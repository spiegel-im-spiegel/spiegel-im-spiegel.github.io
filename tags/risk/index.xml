<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of risk - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/risk/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/risk/index.xml" />
	<id>tag:text.Baldanders.info,2021-05-05:/tags</id>
	<updated>2021-05-05T10:43:57+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>非公開 Facebook Page を晒される</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/05/facebook-page/" />
		<id>tag:text.Baldanders.info,2021-05-05:/remark/2021/05/facebook-page/</id>
		<published>2021-05-05T01:43:57+00:00</published>
		<updated>2021-05-05T04:18:00+00:00</updated>
		<summary>非公開で何の活動も表示されない本人アカウントと何やら活動してるっぽいなりすましアカウントのどちらを信用するかという話である</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;既に Facebook の TL では既に愚痴ってるが，実害が出る前に注意喚起しておく。&lt;/p&gt;
&lt;p&gt;私はずいぶん前から Facebook の TL に載せる記事を「友人」限定にして Facebook Page も「友人」以外には見えないようにしている。
なので「友人」関係にない人が私の Facebook Page を見てもエラー画面が表示されるだけだったのだ，この前までは！&lt;/p&gt;
&lt;p&gt;実はこの前，職場で間違えて自分の Facebook Page をブラウザで開いてしまったのよ。
したら，いつものエラー画面ではなく，普通に Facebook Page が表示されてビックリしてしまった。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./facebook-page.jpg&#34;&gt;&lt;img src=&#34;./facebook-page.jpg&#34; srcset=&#34;./facebook-page.jpg 1306w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;なにすんねん！！&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./facebook-page.jpg&#34;&gt;なにすんねん！！&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;さすがにプロフィール情報とか TL に上げた記事や写真は非表示になっているが，アテンション画像やアバターアイコン，名前・ニックネーム・1行コメントはそのまま表示される。
これだけなら「なにすんねん」で済む話だが，たちの悪いことに同名または類似名のユーザを列挙してくれやがるのよ。&lt;/p&gt;
&lt;p&gt;この結果なにが起きるかというと情報非公開の Facebook ユーザを容易にサーベイできるわけ。&lt;/p&gt;
&lt;p&gt;マジで要らんことするよね Facebook は！&lt;/p&gt;
&lt;p&gt;この件は Facebook Page を公開している人には「それがどーした」な話だろう。
しかし，今の御時世 SNS を使ってるのはセルフ・ブランディングや自己肯定感を満たす目的の人だけではないのだ。&lt;/p&gt;
&lt;p&gt;私は Facebook を広島時代の友人や大学時代の友人や先輩方との連絡手段として使っている。
ついでに TL で「ド田舎に引きこもっても相変わらず馬鹿やってますよー」と生存証明の記事を上げている。
それがなかったら（&lt;a href=&#34;https://text.baldanders.info/remark/2020/08/divorce-from-instagram/&#34; title=&#34;Instagram から足を洗う方法&#34;&gt;Instagram と同じく&lt;/a&gt;）プライバシーに敵対的なサービスのアカウントなんかとっくに潰してるっての（まぁ BAN されたら復帰せず終了するけどw）。&lt;/p&gt;
&lt;p&gt;最近 Facebook の友人がアバターアイコンをパクられ，なりすましアカウントを作られたと TL で報告していた。
非公開で何の活動も表示されない本人アカウントと何やら活動してるっぽいなりすましアカウントのどちらを（第三者から見て）信用するかという話である。&lt;/p&gt;
&lt;p&gt;というわけで，長すぎるまえがきはここまでにして，本題の注意喚起。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;strong&gt;私名義の Facebook アカウントで私から「友人」申請をすることはありません。もし申請があっても 100% なりすましなのでご注意を！&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;私は現在，リアルで直接知り合った人以外には Facebook の友人申請をしないし受け付けないことにしている。
もし私の活動をフォローしたいという奇特な方がいらっしゃるのであれば，&lt;a href=&#34;https://text.baldanders.info/about-feeds/&#34; title=&#34;更新情報について&#34;&gt;このブログの feed&lt;/a&gt; を食わせるか &lt;a href=&#34;https://twitter.com/spiegel_2007&#34;&gt;Twitter アカウント&lt;/a&gt; をフォローしていただければありがたい。
相互フォローの強要などしないのでご心配なく（笑） どうしても Facebook の「友人」関係が必要であれば直接お会いしましょう。
個別のやりとりで私のケータイ番号をご存知であれば &lt;a href=&#34;https://www.signal.org/&#34;&gt;Signal&lt;/a&gt; がオススメ。&lt;/p&gt;
&lt;p&gt;ちなみに Facebook アカウントのアバターアイコンは（Facebook への抗議の意味を込めて）違うものに差し替えた。
3.11 の復興活動が「収束宣言」するまでは “Pray for Japan” のバッヂの付いたアイコンで通すつもりだったが，残念なことである。&lt;/p&gt;
&lt;p&gt;時代は「ゆく川の流れ」のように移りゆく。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01MZGVHOA?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51T6PBdGbyL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B01MZGVHOA?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;超監視社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 池村 千秋 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;草思社 2016-12-13 (Release 2017-02-03)&lt;/dd&gt;
    &lt;dd class=&#34;type&#34; style=&#34;display: none;&#34;&gt;product&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01MZGVHOA (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-03-23&#34;&gt;2019-03-23&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 超監視社会 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0125TZSZ0?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/616sjle5ITL._SL160_.jpg&#34; width=&#34;109&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0125TZSZ0?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;つながりっぱなしの日常を生きる：ソーシャルメディアが若者にもたらしたもの&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ダナ・ボイド (著), 野中 モモ (翻訳)&lt;/dd&gt;
    &lt;dd&gt;草思社 2014-10-09 (Release 2015-07-21)&lt;/dd&gt;
    &lt;dd class=&#34;type&#34; style=&#34;display: none;&#34;&gt;product&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0125TZSZ0 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;読むのに1年半以上かかってしまった。ネット，特に SNS 上で自身のアイデンティティやプライバシーを保つにはどうすればいいか。豊富な事例を交えて考察する。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-05-10&#34;&gt;2016-05-10&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- つながりっぱなしの日常を生きる --&gt;
</content>
	</entry><entry>
		<title>MISRA-C の思ひ出（または「守られないルールはルール自体に問題がある」）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/04/making-rule/" />
		<id>tag:text.Baldanders.info,2021-04-25:/remark/2021/04/making-rule/</id>
		<published>2021-04-25T02:35:57+00:00</published>
		<updated>2021-04-25T02:36:51+00:00</updated>
		<summary>ルール・メイキングは難しい</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;h2&gt;オンライン開催お疲れさまでした&lt;/h2&gt;
&lt;p&gt;2021-04-21 に開催された &lt;a href=&#34;https://gocon.connpass.com/event/208896/&#34;&gt;Go Conference 2021 Spring&lt;/a&gt; は初のオンラインだったそうで，週末の土曜日ということもあって，出不精で人見知りな私でも気軽に参加できたのがありがたかった。
（リアルタイム視聴も含めて）動画や音声のコンテンツはまとまった時間で拘束されてしまうのであまり好きではないのだが，たまにはこういうものに参加するのもよろしかろう。&lt;/p&gt;
&lt;p&gt;そのなかのひとつである&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/lmt_swallow/lets-build-security-guardrails-for-your-go-programs&#34; title=&#34;Go をセキュアに書き進めるための「ガードレール」を整備しよう / Let&#39;s Build Security Guardrails For Your Go Programs! - Speaker Deck&#34;&gt;Go をセキュアに書き進めるための「ガードレール」を整備しよう / Let&amp;rsquo;s Build Security Guardrails For Your Go Programs! - Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;は興味深く視聴させてもらった。
特に &lt;a href=&#34;https://github.com/quasilyte/go-ruleguard&#34; title=&#34;quasilyte/go-ruleguard: Define and run pattern-based custom linting rules.&#34;&gt;go-ruleguard&lt;/a&gt; は面白そうだ。
個人でも使う機会があるかもしれない。&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://speakerdeck.com/lmt_swallow/lets-build-security-guardrails-for-your-go-programs&#34; title=&#34;Go をセキュアに書き進めるための「ガードレール」を整備しよう / Let&#39;s Build Security Guardrails For Your Go Programs! - Speaker Deck&#34;&gt;スライド&lt;/a&gt;にも書かれているが， &lt;a href=&#34;https://github.com/securego/gosec&#34; title=&#34;securego/gosec: Golang security checker&#34;&gt;gosec&lt;/a&gt; は &lt;a href=&#34;https://golangci-lint.run/&#34;&gt;golangci-lint&lt;/a&gt; にも組み込まれているので&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ golangci-lint run --enable gosec ./...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;といった感じに使うことができる。&lt;/p&gt;
&lt;h2&gt;MISRA-C の思ひ出&lt;/h2&gt;
&lt;p&gt;この発表を視聴しながら思い出していたのは大昔に車載系のプロジェクトに参加したときのことだ。
あのときはアセンブラでベクタテーブルからゴリゴリ書いてたよなぁ（遠い目）&lt;/p&gt;
&lt;p&gt;今は違うと思うが，当時は MISRA-C というガイドラインがあって，これが車載系における事実上の C 言語コーディング基準（criteria）になっていた。&lt;/p&gt;
&lt;p&gt;詳細は割愛するが， MISRA-C には127個のルールがあって「必要（Required）」と「推奨（Advisory）」のいずれかに分類されている。
このうち「必要」ルールは強制的に課せられるルールで，このルールからの逸脱（deviation）を許容する場合には，手続きを踏んで文書化と承認を行わなければならない。
各ルールにはルールの詳細（何故そのルールが必要か）と逸脱可否の判断基準とサンプルコードが載っているので，それを参考に逸脱の可否を判定する。&lt;/p&gt;
&lt;p&gt;MISRA-C が定めるルール自体は合理的な内容なのだが，127個ものルールを机上でチェックするのは不毛なので MISRA-C 対応の lint ツールを使うことになる（当時はこれがバカ高くてねぇ）。
で，当然ながら lint ツールは製品の差別化のために MISRA-C 以外のルールもチェックできるようになっていて，最終的に数百ものルールをチェックすることになる。&lt;/p&gt;
&lt;h2&gt;守られないルールはルール自体に問題がある&lt;/h2&gt;
&lt;p&gt;問題は lint を実施した結果，大量の警告が出た場合である。
あるルールについて大量の逸脱が発生する理由は大きく2つある。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;プログラム設計が根本的に間違っている&lt;/li&gt;
&lt;li&gt;ルールが間違っている&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;プログラマのスキルによるかもしれないが，経験上こういうときに前者が理由であることはほとんどない。
なので，まずは「ルールが間違っている」のではないかと疑ってみるのが定石である。&lt;/p&gt;
&lt;p&gt;基本的に「ルールは守られるべきもの」であるが，ルールもまた人間が考えたものであり，間違っている可能性を常に考慮すべきである。
何故なら人間は間違いを犯す生き物なのだから。&lt;/p&gt;
&lt;p&gt;私は「悪法も法」という考え方には与しない。
「悪法は悪法」であり正すべきだ。
そして「悪法」の判断基準のひとつが「守られないルールはルール自体に問題がある」である。
ルールもリファクタリングの対象となる「コード」なのだ。&lt;/p&gt;
&lt;p&gt;最初に挙げた&lt;a href=&#34;https://speakerdeck.com/lmt_swallow/lets-build-security-guardrails-for-your-go-programs&#34; title=&#34;Go をセキュアに書き進めるための「ガードレール」を整備しよう / Let&#39;s Build Security Guardrails For Your Go Programs! - Speaker Deck&#34;&gt;発表&lt;/a&gt;では &lt;a href=&#34;https://github.com/reviewdog/reviewdog&#34; title=&#34;reviewdog/reviewdog: 🐶 Automated code review tool integrated with any code analysis tools regardless of programming language&#34;&gt;reviewdog&lt;/a&gt; を使って変更部分のみチェックする方法が紹介されていたが， &lt;a href=&#34;https://github.com/reviewdog/reviewdog&#34; title=&#34;reviewdog/reviewdog: 🐶 Automated code review tool integrated with any code analysis tools regardless of programming language&#34;&gt;reviewdog&lt;/a&gt; を常用するのは個人的にお勧めできない。
これが常態化すると「動いてるコードは触るな」という方向に行きがちで，それによってリファクタリングの機会を失うこととなり，最終的に&lt;a href=&#34;https://text.baldanders.info/remark/2020/12/technical-debt-and-hacker/&#34; title=&#34;技術的負債とハッカー&#34;&gt;技術的負債&lt;/a&gt;の返済が遅れることになる。
リファクタリングに厚いのが Go の持ち味なので，これを抑圧するような運用は避けるべきだろう。&lt;/p&gt;
&lt;p&gt;ことほど左様にルール・メイキングというのは難しいのである。
できるなら，煩わしいことは機械に任せて楽しくコードを書きたいものである。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/using-golangci-lint-action/&#34;&gt;golangci-lint を GitHub Actions で使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4542503461?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51CAFNAdZPL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4542503461?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;組込み開発者におくるMISRA‐C:2004―C言語利用の高信頼化ガイド&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;MISRA‐C研究会 (編集)&lt;/dd&gt;
    &lt;dd&gt;日本規格協会 2006-10-01&lt;/dd&gt;
    &lt;dd class=&#34;type&#34; style=&#34;display: none;&#34;&gt;product&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4542503461 (ASIN), 9784542503465 (EAN), 4542503461 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私が持っているのはこれよりひとつ古い版だが，まぁいいか。むかし，車載用の組み込みエンジニアをやっていた頃は必読書として読まされました。今はもっと包括的な内容のものがあるはず。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-06&#34;&gt;2019-02-06&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 組込み開発者におくるMISRA‐C:2004 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01CYDGUV8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/31Q2jh&amp;#43;5SgL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B01CYDGUV8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;CODE VERSION 2.0&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ローレンス・レッシグ (著), 山形浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;翔泳社 2007-12-19 (Release 2016-03-14)&lt;/dd&gt;
    &lt;dd class=&#34;type&#34; style=&#34;display: none;&#34;&gt;product&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01CYDGUV8 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;前著『CODE』改訂版。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-11-17&#34;&gt;2018-11-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- CODE VERSION 2.0 --&gt;
</content>
	</entry><entry>
		<title>FinTech の曲がり角</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/04/cryptocurrency-with-signal/" />
		<id>tag:text.Baldanders.info,2021-04-24:/remark/2021/04/cryptocurrency-with-signal/</id>
		<published>2021-04-24T06:12:30+00:00</published>
		<updated>2021-05-04T04:59:49+00:00</updated>
		<summary>藪をつついて蛇を出す</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;2週間以上前の記事で恐縮だが &lt;a href=&#34;https://signal.org/&#34;&gt;Signal&lt;/a&gt; がいわゆる暗号通貨（cryptocurrency）機能を組み込むらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wired.com/story/signal-mobilecoin-payments-messaging-cryptocurrency/&#34;&gt;Signal Adds a Payments Feature—With a Privacy-Focused Cryptocurrency | WIRED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2021/04/wtf-signal-adds-cryptocurrency-support.html&#34;&gt;Signal Adds Cryptocurrency Support - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.stephendiehl.com/blog/signal.html&#34;&gt;Et tu, Signal?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2021/04/07/2021-04-06-signal-tests-payments-in-the-uk-using-mobilecoin/&#34;&gt;暗号化チャットのSignalが英国でMobileCoinによる決済機能をテスト中  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20210412/signal-cryptcurrency&#34;&gt;メッセージングアプリSignalの暗号通貨による送金機能の追加にブルース・シュナイアーが苦言 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実はこの話はほぼスルーしていたのだが &lt;a href=&#34;https://yamdas.hatenablog.com/entry/20210412/signal-cryptcurrency&#34; title=&#34;メッセージングアプリSignalの暗号通貨による送金機能の追加にブルース・シュナイアーが苦言 - YAMDAS現更新履歴&#34;&gt;yomoyomo さんの記事&lt;/a&gt;を見て，やはり「ログ」として残しておくのがいいだろうという気分になった。&lt;/p&gt;
&lt;p&gt;この問題は Bruce Schneier 先生の以下の一文に集約できるだろう。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;It’s that adding a cryptocurrency to an end-to-end encrypted app muddies the morality of the product, and invites all sorts of government investigative and regulatory meddling: by the IRS, the SEC, FinCEN, and probably the FBI&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2021/04/wtf-signal-adds-cryptocurrency-support.html&#34;&gt;Signal Adds Cryptocurrency Support&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;日本語でいうと「藪をつついて蛇を出す」。
個人的な印象で恐縮だが，信頼できる暗号化メッセージング・アプリケーションはもはや &lt;a href=&#34;https://signal.org/&#34;&gt;Signal&lt;/a&gt; が唯一と思っているので，マジで勘弁していただきたいところである。
そんなもん入れられるくらいなら普通に &lt;a href=&#34;https://signal.org/&#34;&gt;Signal&lt;/a&gt; に金を払うよ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;そもそも2018年に G20 が「それ」を&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/crypto-assets/&#34; title=&#34;「暗号資産」とやら&#34;&gt;暗号資産（crypto-assets）と定義&lt;/a&gt;した時点で，私の中では「試合終了」だったのよ&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
最近では「通貨」機能は諦めたのか NFT (Non-Fungible Token) が流行りらしいが， Xanadu 未満の駄アイデアにしか見えない。
追記型データベースとしての Blockchain も意外に使い道がなく，むしろ「&lt;a href=&#34;https://wired.jp/2021/03/30/blockchain-cryptocurrency-energy-use/&#34; title=&#34;ブロックチェーンによるエネルギーの大量消費を解消できるか：動き出したイーサリアムと「PoS」の潜在力 | WIRED.jp&#34;&gt;環境にやさしくない&lt;/a&gt;」とか言われているし（笑）&lt;/p&gt;
&lt;p&gt;いずれにしろデジタル・トークンを「通貨」とみなして流通させる季節はとっくに終わってるわけで，あとは「資産」としてのデジタル・トークンの運用で一山当てようという山師的な発想しか見えてこない。&lt;/p&gt;
&lt;p&gt;デジタル・トークンの「資産運用」を全面否定するつもりはないが（私は関わりたくないが）， &lt;a href=&#34;https://signal.org/&#34;&gt;Signal&lt;/a&gt; のようなセキュリティまたはプライバシー上のクリティカル・サービスで山師的機能を付加する動きについては，今後は厳しく監視していく必要があるかもしれない。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/01/cryptocurrency-are-not-crypto/&#34;&gt;「暗号通貨」ってゆーな！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/05/internet-as-a-class-system/&#34;&gt;階級社会としてのインターネット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/02/blockchain-and-trust-by-bruce-schneier/&#34;&gt;“Blockchain and Trust” by Bruce Schneier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd class=&#34;type&#34; style=&#34;display: none;&#34;&gt;product&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;ruby&gt;&lt;rb&gt;無料&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;ただ&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;ほど高い「安心安全」はない。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;何故 G20 が「暗号資産」と定義したか考えて欲しい。通貨としての信頼と安定がないからだよ。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>「ウイルスの好物は心のスキ」などと言った首長がいるそうで</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/03/why-japanese-people/" />
		<id>tag:text.Baldanders.info,2021-03-28:/remark/2021/03/why-japanese-people/</id>
		<published>2021-03-28T03:26:31+00:00</published>
		<updated>2021-03-28T03:35:11+00:00</updated>
		<summary>自分が乗ってる舟のオールを他人任せにしないよう（笑）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;新聞系メディアにはリンクしないことにしているので何処の話とは言わないが「ウイルスの好物は心のスキ」などと言った首長がいるそうで，それじゃあ何時まで経っても収束しないに決まってるよね（笑）&lt;/p&gt;
&lt;p&gt;旧ブログで6年前に「&lt;a href=&#34;https://baldanders.info/blog/000855/&#34;&gt;「なぜなぜ分析」は人に責任を帰さないのが大原則&lt;/a&gt;」と書いたが，障害やトラブルが起きた際に，その原因や責任を「人」に帰するのは絶対にやってはいけないことである。&lt;/p&gt;
&lt;p&gt;もちろん，個人の心がけとして不注意やうっかりに気をつけるのは結構なことだ。&lt;/p&gt;
&lt;p&gt;20年以上前に&lt;a href=&#34;https://baldanders.info/spiegel/log/nikki/&#34; title=&#34;Spiegel の闘病日記&#34;&gt;ちょっと死にかけた&lt;/a&gt;とき，当時の担当医に「絶対に風邪を引かないように」と無茶振りされたことがある。
念のためにいうと，もちろん（双方分かった上での）冗談話だからね。
でも私のような「高リスク群」に属する人はそのくらいの心づもりが必要なわけで，そのとき以来，私は「&lt;a href=&#34;https://dic.pixiv.net/a/%E8%A6%9A%E6%82%9F%E5%AE%8C%E4%BA%86&#34;&gt;覚悟完了&lt;/a&gt;」している。
まぁ，それから20年も意地汚く生き残ってるわけだけど（笑）&lt;/p&gt;
&lt;p&gt;話が逸れた。&lt;/p&gt;
&lt;p&gt;人は間違いやうっかりをする生き物である。
それは人の持つ柔軟性や拡張性の裏面・副作用みたいなもので，むしろ肯定的に捉えるべきものだ。&lt;/p&gt;
&lt;p&gt;人的ミスが起きたときに「間違いやうっかり」をなくしましょうと言うのは何も対策しないのと同義である。
「なぜなぜ分析」の結論が「私の不注意でした」となるのは「なぜ」の掘り方を間違えている。&lt;/p&gt;
&lt;p&gt;人的ミスが起きたときあるいはミスが起きそうな状況のとき，上に立つ人間がやるべきことは以下の2つだ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ミスが減る方向に行動を誘導するためのシステム（環境やルール）を構築する&lt;/li&gt;
&lt;li&gt;ミスが起きた際に周辺に影響が拡大しないよう早く収束させる，またそのための体制づくりをする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;そこまでやってはじめて「個人も気をつけましょう」と言えるわけだ。&lt;/p&gt;
&lt;p&gt;SARS-CoV-2 パンデミックに関しては，有効な手段として（変異種も含めて）期待できるのはワクチンの同時・集団接種くらいしかない。
しかし実際にはワクチンの調達や接種時期は国や地域によってバラツキがある。
日本なんか庶民にワクチンが降りるのは（シミュレーション（笑）や希望的観測ばかりで）いつになるやら。&lt;/p&gt;
&lt;p&gt;そういう現状を踏まえてロックダウンや段階的な移動規制の判断を行う（そしてそれによって不利益を被る経済的弱者に直接的な支援を行う）べきだし，中長期的には風邪やインフルエンザと同じく「SARS-CoV-2 系列のウイルスには誰もが罹る」前提で医療・福祉体制を整えていく必要がある。&lt;/p&gt;
&lt;p&gt;つか，そろそろ「緊急避難」を言い訳にした行きあたりばったりな政策は止めようや。&lt;/p&gt;
&lt;p&gt;少なくとも（全国レベルで感染規模が3月中旬から拡大傾向に転じているのに）緊急事態を解除して聖火リレーをするとか，その一方で「ウイルスの好物は心のスキ」などと曰う政治家いや政治屋どもの何を信用しろというのか。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://github.com/spiegel-im-spiegel/covid-2019-report&#34;&gt;&lt;img src=&#34;./covid-2019-new-cases-histgram-in-japan.png&#34; srcset=&#34;./covid-2019-new-cases-histgram-in-japan.png 1520w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;spiegel-im-spiegel/covid-2019-report: 日本における COVID-2019 確認発症者のレポート&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/covid-2019-report&#34;&gt;spiegel-im-spiegel/covid-2019-report: 日本における COVID-2019 確認発症者のレポート&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;というわけで，自分が乗ってる舟のオールを他人任せにしないよう（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nature.com/articles/d41586-021-00728-2&#34;&gt;Five reasons why COVID herd immunity is probably impossible&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2021/03/5.html&#34;&gt;ブログ: 新型コロナの集団免疫がおそらく不可能である5つの理由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B08MX57XXK?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51&amp;#43;lADJZ6xL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B08MX57XXK?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;宙 船（そらふね）&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;中島みゆき (メインアーティスト)&lt;/dd&gt;
    &lt;dd&gt;YAMAHA MUSIC COMMUNICATIONS CO., LTD. 2020-12-02 (Release 2020-12-02)&lt;/dd&gt;
    &lt;dd class=&#34;type&#34; style=&#34;display: none;&#34;&gt;product&lt;/dd&gt;
    &lt;dd&gt;MP3 ダウンロード&lt;/dd&gt;
    &lt;dd&gt;B08MX57XXK (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;最近，メディアで政治ネタを見かける度に脳内BGMがこれになる（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-03-28&#34;&gt;2021-03-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 宙船 --&gt;
&lt;!-- eof --&gt;
</content>
	</entry><entry>
		<title>RSA は砕けない（たぶん？）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/03/rsa-is-unbreakable/" />
		<id>tag:text.Baldanders.info,2021-03-06:/remark/2021/03/rsa-is-unbreakable/</id>
		<published>2021-03-06T00:33:55+00:00</published>
		<updated>2021-03-06T00:44:23+00:00</updated>
		<summary>まだあわてるような時間じゃない（笑）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;こっち方面のアンテナがすっかり鈍ってしまって，気付いたのがやっと昨日なのだが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://eprint.iacr.org/2021/232&#34;&gt;Cryptology ePrint Archive: Report 2021/232 - Fast Factoring Integers by SVP Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という論文を巡ってちょっとした騒ぎになっていたらしい。
いや abstract に &lt;q lang=&#34;en&#34;&gt;This destroys the RSA cryptosystem&lt;/q&gt; とか書いてあるもんで，その筋の方々が色めき立っちゃたようだ（笑）&lt;/p&gt;
&lt;p&gt;これについて Bruce Schneier 先生も&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;It does not. At best, it’s an improvement in factoring — and I’m not sure it’s even that&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2021/03/no-rsa-is-not-broken.html&#34;&gt;No, RSA Is Not Broken - Schneier on Security&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とおっしゃっている。
論文自体の査読もまだだし，これから要検証という感じ。
少なくとも&lt;a href=&#34;https://text.baldanders.info/remark/2020/04/rsa-250-factored/&#34;&gt;2020年時点で RSA-250 の解読には成功&lt;/a&gt;してるんだから，それとの比較で評価できるだろう。&lt;/p&gt;
&lt;p&gt;要するに「&lt;a href=&#34;https://dic.nicovideo.jp/a/%E3%81%BE%E3%81%A0%E3%81%82%E3%82%8F%E3%81%A6%E3%82%8B%E3%82%88%E3%81%86%E3%81%AA%E6%99%82%E9%96%93%E3%81%98%E3%82%83%E3%81%AA%E3%81%84&#34;&gt;まだあわてるような時間じゃない&lt;/a&gt;」ということだ。
まぁ，でも，これから鍵を替えるなら ECC 鍵がいいんじゃないかな（笑）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-ecc-with-gnupg/&#34;&gt;そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/ssh-key-management-with-gnupg/&#34;&gt;SSH の認証鍵を GunPG で作成・管理する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/eddsa/&#34;&gt;Edwards-curve Digital Signature Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://crypto.stackexchange.com/questions/88582/does-schnorrs-2021-factoring-method-show-that-the-rsa-cryptosystem-is-not-secur&#34;&gt;Does Schnorr&amp;rsquo;s 2021 factoring method show that the RSA cryptosystem is not secure? - Cryptography Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.letsencrypt.org/t/schnorrs-factorization-algorithm/146550&#34;&gt;Schnorr&amp;rsquo;s factorization algorithm - Issuance Policy - Let&amp;rsquo;s Encrypt Community Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd class=&#34;type&#34; style=&#34;display: none;&#34;&gt;product&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd class=&#34;type&#34; style=&#34;display: none;&#34;&gt;product&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
</content>
	</entry><entry>
		<title>DSA は NIST 電子署名標準から外れるようだ</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/02/dsa-deprecation/" />
		<id>tag:text.Baldanders.info,2021-02-17:/remark/2021/02/dsa-deprecation/</id>
		<published>2021-02-17T11:53:55+00:00</published>
		<updated>2021-02-17T12:01:33+00:00</updated>
		<summary>ドラフト版 FIPS 186-5 の DSA の節の内容がまるっと削られている。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/go1.16&#34; title=&#34;Go 1.16 Release Notes - The Go Programming Language&#34;&gt;Go 1.16 のリリースノート&lt;/a&gt;を眺めていて今さら気付いたのだが，いまだ&lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/186/5/draft&#34; title=&#34;FIPS 186-5 (Draft), Digital Signature Standard (DSS) | CSRC&#34;&gt;ドラフト中の FIPS 186-5&lt;/a&gt; によると， DSA を「電子署名生成用途としては」電子署名標準（Digital Signature Standard; DSS）から外すつもりのようだ。
ドラフト版 &lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/186/5/draft&#34; title=&#34;FIPS 186-5 (Draft), Digital Signature Standard (DSS) | CSRC&#34;&gt;FIPS 186-5&lt;/a&gt; の DSA の節はまるっと削られて以下の文章のみ掲載されている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Prior versions of this standard specified the DSA. This standard no longer approves DSA for digital signature generation. DSA may be used to verify signatures generated prior to the implementation date of this standard. See FIPS 186-4 [20] for the specifications for DSA&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/186/5/draft&#34;&gt;FIPS 186-5 (Draft), Digital Signature Standard (DSS)&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;鍵長の問題（現在は鍵長を変数化することで対処している）以外はアルゴリズム自体に危殆化問題があるわけではないと思うが，出自がアレだし実装面の複雑さ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; もあって評判がよろしくないのは聞いていた。
まぁ「設計限界」というやつなんだろう。&lt;/p&gt;
&lt;p&gt;その代わりといってはナニだが楕円曲線暗号のひとつである EdDSA (楕円曲線 ed25519/ed488) が &lt;a href=&#34;https://csrc.nist.gov/publications/detail/fips/186/5/draft&#34; title=&#34;FIPS 186-5 (Draft), Digital Signature Standard (DSS) | CSRC&#34;&gt;FIPS 186-5&lt;/a&gt; から電子署名標準のひとつとして加わることになっている。
これについては以前に記事を書いた（なんでそのときに DSA に気がつかなかったのか）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/eddsa/&#34;&gt;Edwards-curve Digital Signature Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁ，時代は楕円曲線暗号ということなのだろう。
次期 &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; である &lt;a href=&#34;https://datatracker.ietf.org/doc/draft-ietf-openpgp-rfc4880bis/&#34; title=&#34;draft-ietf-openpgp-rfc4880bis - OpenPGP Message Format&#34;&gt;RFC 4880bis&lt;/a&gt; が正式にリリースされるタイミングでメインの鍵を替えようかと目論んでいるのだが，前倒ししたほうがいいのかねぇ。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/40337&#34;&gt;crypto/dsa: deprecate and remove from crypto/x509 and x/crypto/ssh · Issue #40337 · golang/go · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://buttondown.email/cryptography-dispatches/archive/cryptography-dispatches-dsa-is-past-its-prime/&#34;&gt;Cryptography Dispatches: DSA Is Past Its Prime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-ecc-with-gnupg/&#34;&gt;そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2021/02/go-1_16-is-released/&#34;&gt;Go 1.16 がリリースされた&lt;/a&gt;： Go 1.16 では &lt;a href=&#34;https://golang.org/pkg/crypto/dsa/&#34; title=&#34;dsa - The Go Programming Language&#34;&gt;&lt;code&gt;crypto/dsa&lt;/code&gt;&lt;/a&gt; パッケージが非推奨になった。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd class=&#34;type&#34; style=&#34;display: none;&#34;&gt;product&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd class=&#34;type&#34; style=&#34;display: none;&#34;&gt;product&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;DSA は実装に必要な要素技術が多く，そのうちのひとつでも瑕疵があれば全体のセキュリティ強度が下がってしまう。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>github.com/cli/safeexec パッケージを使った外部コマンドの安全な起動</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/safeexec-packge/" />
		<id>tag:text.Baldanders.info,2020-12-20:/golang/safeexec-packge/</id>
		<published>2020-12-20T01:00:16+00:00</published>
		<updated>2020-12-20T01:02:48+00:00</updated>
		<summary>このパッケージを使って exec.LookPath() 関数を置き換えることを検討するのもいいだろう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo/releases/tag/v0.79.1&#34; title=&#34;Release v0.79.1 · gohugoio/hugo&#34;&gt;Hugo v0.79.1 のリリースノート&lt;/a&gt;を見て気づいたのだが， GitHub が自身のコマンドライン・ツール用に &lt;a href=&#34;https://github.com/cli/safeexec&#34; title=&#34;cli/safeexec: A safer version of exec.LookPath on Windows&#34;&gt;github.com/cli/safeexec&lt;/a&gt; パッケージを公開している。&lt;/p&gt;
&lt;p&gt;これは &lt;a href=&#34;https://golang.org/pkg/os/exec/&#34; title=&#34;exec - The Go Programming Language&#34;&gt;&lt;code&gt;os/exec&lt;/code&gt;&lt;/a&gt; 標準パッケージ内の &lt;a href=&#34;https://golang.org/pkg/os/exec/&#34; title=&#34;exec - The Go Programming Language&#34;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.LookPath()&lt;/code&gt; 関数を置き換えるもので&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;os/exec&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/cli/safeexec&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gitStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;gitBin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;safeexec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LookPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gitBin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じに使うようだ。&lt;/p&gt;
&lt;p&gt;以前に Zenn で紹介したが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20201107-lookpath-by-golang&#34;&gt;Go でサブプロセスを起動する際は LookPath に気をつけろ！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows 環境で &lt;a href=&#34;https://golang.org/pkg/os/exec/&#34; title=&#34;exec - The Go Programming Language&#34;&gt;&lt;code&gt;os/exec&lt;/code&gt;&lt;/a&gt; 標準パッケージを使って外部コマンドをする際，パスなしのコマンド名を指定するとカレントにある同名の実行モジュールが優先的に起動されてしまう。
このブログでは &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-27955&#34; title=&#34;NVD - CVE-2020-27955&#34;&gt;CVE-2020-27955&lt;/a&gt; の脆弱性として&lt;a href=&#34;https://text.baldanders.info/release/2020/11/git-for-windows-2_29_2-2-is-released/&#34; title=&#34;Git for Windows 2.29.2 (2) のリリース【セキュリテイ・アップデート】&#34;&gt;紹介&lt;/a&gt;している。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/os/exec/&#34; title=&#34;exec - The Go Programming Language&#34;&gt;&lt;code&gt;os/exec&lt;/code&gt;&lt;/a&gt; 標準パッケージを使って外部コマンドを起動している場合は &lt;a href=&#34;https://github.com/cli/safeexec&#34; title=&#34;cli/safeexec: A safer version of exec.LookPath on Windows&#34;&gt;github.com/cli/safeexec&lt;/a&gt; パッケージで &lt;code&gt;LookPath()&lt;/code&gt; 関数を置き換えることを検討するのもいいだろう。&lt;/p&gt;
&lt;p&gt;なお，この問題は既に以下の issue として上がっているようだ（特に10月下旬辺りからの議論）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/38736&#34;&gt;proposal: os/exec: make LookPath not look in dot implicitly on Windows · Issue #38736 · golang/go · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どうなることやら。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2020/11/depm-v0_3_0-is-released/&#34;&gt;Go パッケージ／モジュールの依存関係可視化ツール Depm v0.3.0 をリリースした&lt;/a&gt; : 拙作では &lt;a href=&#34;https://github.com/cli/safeexec&#34; title=&#34;cli/safeexec: A safer version of exec.LookPath on Windows&#34;&gt;github.com/cli/safeexec&lt;/a&gt; パッケージ と同じような方針で &lt;a href=&#34;https://golang.org/pkg/os/exec/&#34; title=&#34;exec - The Go Programming Language&#34;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.LookPath()&lt;/code&gt; 関数の問題を回避している&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd class=&#34;type&#34; style=&#34;display: none;&#34;&gt;product&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>2020年米国大統領選挙はセキュアだったか？</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/11/was-the-2020-election-secure/" />
		<id>tag:text.Baldanders.info,2020-11-15:/remark/2020/11/was-the-2020-election-secure/</id>
		<published>2020-11-15T02:36:58+00:00</published>
		<updated>2020-11-26T10:33:53+00:00</updated>
		<summary>要するに（某現職大統領がゴネることも含めて）「計画通り」だったわけだ（笑）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;個人的に米国大統領選挙の内容については殆ど興味がないのだが&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，2016年米国大統領選挙後に発覚したドタバタを考えると，今回の大統領選挙がセキュアだったかどうか考えるのは意味があるだろう。&lt;/p&gt;
&lt;p&gt;というわけで，丁度いい記事が出ていた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lawfareblog.com/2020-election-security-success-story-so-far&#34;&gt;2020 Is An Election Security Success Story (So Far) - Lawfare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この記事については &lt;a href=&#34;https://www.schneier.com/blog/archives/2020/11/2020-was-a-secure-election.html&#34; title=&#34;2020 Was a Secure Election - Schneier on Security&#34;&gt;Bruce Schneier 先生も “good summary” と評価されている&lt;/a&gt;ようだが&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;What’s more, the voting itself was remarkably smooth. It was only a few months ago that professionals and analysts who monitor election administration were alarmed at how badly unprepared the country was for voting during a pandemic. Some of the primaries were disasters. There were not clear rules in many states for voting by mail or sufficient opportunities for voting early. There was an acute shortage of poll workers. Yet the United States saw unprecedented turnout over the last few weeks. Many states handled voting by mail and early voting impressively and huge numbers of volunteers turned up to work the polls. Large amounts of litigation before the election clarified the rules in every state. And for all the president’s griping about the counting of votes, it has been orderly and apparently without significant incident. The result was that, in the midst of a pandemic that has killed 230,000 Americans, record numbers of Americans voted—and voted by mail—and those votes are almost all counted at this stage.&lt;/p&gt;
&lt;p&gt;On the cybersecurity front, there is even more good news. Most significantly, there was no serious effort to target voting infrastructure. After voting concluded, the director of the Cybersecurity and Infrastructure Security Agency (CISA), Chris Krebs, released &lt;a href=&#34;https://www.cisa.gov/news/2020/11/04/statement-cisa-director-krebs-following-final-day-voting&#34;&gt;a statement&lt;/a&gt;, saying that “after millions of Americans voted, we have no evidence any foreign adversary was capable of preventing Americans from voting or changing vote tallies.” Krebs pledged to “remain vigilant for any attempts by foreign actors to target or disrupt the ongoing vote counting and final certification of results,” and no reports have emerged of threats to tabulation and certification processes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.lawfareblog.com/2020-election-security-success-story-so-far&#34;&gt;2020 Is An Election Security Success Story (So Far)&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とまとめられている。
要するに（某現職大統領がゴネることも含めて）「&lt;a href=&#34;https://dic.nicovideo.jp/a/%E8%A8%88%E7%94%BB%E9%80%9A%E3%82%8A&#34;&gt;計画通り&lt;/a&gt;」だったわけだ（笑）&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;The country pulled off a free and fair election without significant cyber disruptions, foreign influence or unchecked disinformation—all during a pandemic and in the face of active efforts by the president to undermine both the administration of and confidence in the election&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.lawfareblog.com/2020-election-security-success-story-so-far&#34;&gt;2020 Is An Election Security Success Story (So Far)&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;しかし，現職大統領がパンデミックと同列のリスクと見なされる国って。
日本の現職首相が国民からそう思われないことを祈ります。
遅いか（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2020/11/more-on-the-security-of-the-2020-us-election.html&#34;&gt;More on the Security of the 2020 US Election - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ぶっちゃけ70代の爺さんから70代の爺さんに「易姓」したところでさしたる違いはないだろうし（今の時代にイデオロギー対立とか空疎），そういう対決構図になったこと自体がアメリカの政治的弱体化を象徴していると総括せざるを得ない。まぁ，日本はそれを嗤えないが（笑） いずれにせよ，誰がなるにせよ，2021年の春以降アメリカはどうするのか，が重要である。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Go のコードでも GitHub Code Scanning が使えるらしい</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/10/github-code-scanning-with-golang/" />
		<id>tag:text.Baldanders.info,2020-10-01:/remark/2020/10/github-code-scanning-with-golang/</id>
		<published>2020-10-01T09:03:46+00:00</published>
		<updated>2020-10-30T10:57:03+00:00</updated>
		<summary>うん。簡単！</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の Code Scanning 機能が全ユーザで有効になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iamninad.com/github-code-scanning/&#34;&gt;Github Code Scanning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-09-30-code-scanning-is-now-available/&#34;&gt;Code scanning is now available! - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「えー。どうせ &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では使えないんでしょ？」と思ったが， C/C++, C#, &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt;, Java, JavaScript/TypeScript, Python で有効らしい。
というわけで，とりあえず手持ちの &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; パッケージのリポジトリで試してみた。&lt;/p&gt;
&lt;p&gt;Code Scanning は各リポジトリの “Security” で設定できる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./github-security-menu.png&#34;&gt;&lt;img src=&#34;./github-security-menu.png&#34; srcset=&#34;./github-security-menu.png 1284w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;一番下の “Code scanning alerts” の &lt;code&gt;[Set up code scanning]&lt;/code&gt; ボタンを押す。
次に表示される以下の画面で&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./code-scanning-setting.png&#34;&gt;&lt;img src=&#34;./code-scanning-setting.png&#34; srcset=&#34;./code-scanning-setting.png 682w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;[Set up this workflow]&lt;/code&gt; ボタンを押す。&lt;/p&gt;
&lt;p&gt;すると &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; Actions 用の YAML ファイル編集画面が表示される。
今回は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コードのリポジトリなので，こんな感じの内容になった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# For most projects, this workflow file will not need changing; you simply need&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# to commit it to your repository.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# You may wish to alter this file to override the set of languages analyzed,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# or to provide custom queries or build logic.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CodeQL&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;master]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pull_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# The branches below must be a subset of the branches above&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;master]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schedule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;cron&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0 6 * * 4&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;analyze&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Analyze&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fail-fast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Override automatic language detection by changing the below list&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Supported options are [&amp;#39;csharp&amp;#39;, &amp;#39;cpp&amp;#39;, &amp;#39;go&amp;#39;, &amp;#39;java&amp;#39;, &amp;#39;javascript&amp;#39;, &amp;#39;python&amp;#39;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;go&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Learn more...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Checkout repository&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# We must fetch at least the immediate parents so that if this is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# a pull request then we can checkout the head.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# If this run was triggered by a pull request event, then checkout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# the head of the pull request instead of the merge commit.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;git checkout HEAD^2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ github.event_name == &amp;#39;pull_request&amp;#39; }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Initializes the CodeQL tools for scanning.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Initialize CodeQL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;github/codeql-action/init@v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;languages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ matrix.language }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# If you wish to specify custom queries, you can do so here or in a config file.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# By default, queries listed here will override any specified in a config file. &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Prefix the list here with &amp;#34;+&amp;#34; to use these queries and those in the config file.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# queries: ./path/to/local/query, your-org/your-repo/queries@main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# If this step fails, then you should remove it and run the build manually (see below)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Autobuild&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;github/codeql-action/autobuild@v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ℹ️ Command-line programs to run using the OS shell.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 📚 https://git.io/JvXDl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ✏️ If the Autobuild fails above, remove it and uncomment the following three lines&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#    and modify them (or add more) to build your code if your project&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#    uses a compiled language&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#- run: |&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   make bootstrap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   make release&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Perform CodeQL Analysis&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;github/codeql-action/analyze@v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コードの検査だけならこのままコミットしてしまって構わない。
ちなみにコミットする場合は &lt;code&gt;master&lt;/code&gt; ブランチ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; に対してではなく pull request 用のブランチを作ってそこにコミットしたほうがよい。
そうすれば PR 時に上記設定の action が走るので動作確認になるだろう。&lt;/p&gt;
&lt;p&gt;うん。
簡単！&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepsrun&#34;&gt;Workflow syntax for GitHub Actions - GitHub Docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35160321/&#34;&gt;GitHub、コードの脆弱性を検出する「Code Scanning」を全ユーザーに提供 - ZDNet Japan&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/githubgithub_code_scanning.html&#34;&gt;GitHub、コードの脆弱性などを発見してくれる「GitHub Code Scanning」正式版が提供開始。パブリックリポジトリには無料 － Publickey&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://news.mynavi.jp/article/20201002-1364892/&#34;&gt;GitHub、開発者がセキュリティ脆弱性を発見するための支援機能「Code Scanning」 | マイナビニュース&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-10-05-announcing-third-party-code-scanning-tools-static-analysis-and-developer-security-training/&#34;&gt;Announcing third-party code scanning tools: static analysis &amp;amp; developer security training - The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-10-27-code-scanning-a-github-repository-using-github-advanced-security-within-an-azure-devops-pipeline/&#34;&gt;Code Scanning a GitHub Repository using GitHub Advanced Security within an Azure DevOps Pipeline - The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/check-for-vulns-in-golang-dependencies/&#34;&gt;Go 依存パッケージの脆弱性検査&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;2020年10月から &lt;a href=&#34;https://text.baldanders.info/remark/2020/08/renaming-default-branch-name-in-github-repositries/&#34; title=&#34;GitHub リポジトリの既定ブランチ名が main になるらしい&#34;&gt;GitHub の新規リポジトリの既定ブランチ名が &lt;code&gt;main&lt;/code&gt; になるらしい&lt;/a&gt;。ご注意を。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>国勢調査の思ひ出</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/10/census/" />
		<id>tag:text.Baldanders.info,2020-10-01:/remark/2020/10/census/</id>
		<published>2020-10-01T03:09:11+00:00</published>
		<updated>2020-10-01T05:00:06+00:00</updated>
		<summary>まだ回答してない人でネット回答可能であれば，ネットのほうが断然楽。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;知り合いのブログ記事で&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.netandfield.com/shar/2020/09/post-3809.html&#34;&gt;国勢調査オンライン - 電気ウナギ的○○&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というのがあって「そういや前回はネットで回答したな」と思い出して&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env&#34; title=&#34;spiegel-im-spiegel/github-pages-env: Document Environment for spiegel-im-spiegel.github.io&#34;&gt;作業用リポジトリ&lt;/a&gt;に grep かけて探してみたらやっぱり書いてた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2015/0920-diary/#census&#34; title=&#34;今日の戯れ言：週末は掃除三昧&#34;&gt;国勢調査を片付けた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんでも記事にしておくものである。
5年前の私 good work!&lt;/p&gt;
&lt;h2&gt;あの会社は今&lt;/h2&gt;
&lt;p&gt;当時は「国勢調査オンライン」のサイト証明書は Symantec 社が発行していて，ページにデカデカとロゴが貼り付けてあって苦笑したものだが，当の Symantec 社は CA 事業の不祥事で Web ブラウザのベンダ企業から信用されなくなり，2017年に事業を手放している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://internet.watch.impress.co.jp/docs/news/1103161.html&#34;&gt;Symantec→DigiCertでSSL/TLS証明書はどうなる？　日本国内にも認証局構築へ、IoT機器市場も見据え - INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回はどうしてるんだろうと見てみたら DigiCert 社だったよ。
何も変わってないな（笑）&lt;/p&gt;
&lt;p&gt;そういや DigiCert 社のルート CA 証明書は RSA/2048 鍵で2031年まで有効なんだよな。
ちなみに &lt;a href=&#34;https://text.baldanders.info/remark/2017/10/key-parameters/&#34; title=&#34;暗号鍵関連の各種変数について&#34;&gt;RSA/2048 鍵が acceptable なのは2030年まで&lt;/a&gt;だ。
まぁ鼻の先は問題ないが，政府調達品でこの程度の認識しかない企業を使うのはどうなんだろう。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;strong&gt;【追記】&lt;/strong&gt;
Facebook で教えてもらったが DigiCert 社の CA 証明書はよりサイクルの短いものに順次切り替えていくそうだ。
Web 用のサーバ証明書は長くても1年程度のサイクルになる筈だし，数年かけて切り替えていくイメージだろうか。&lt;/div&gt;
&lt;h2&gt;なりすましと本人確認&lt;/h2&gt;
&lt;p&gt;そういや5年前はうっかり Phishing サイトを作って怒られた輩がいて話題になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1509/15/news083.html&#34;&gt;国勢調査の“偽サイト”作った意図は？　総務省から削除依頼……「騒ぎになり深く反省」と制作者 (1/3) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近の「ドコモロ系事案」を引くまでもなく，なりすましや本人確認は古くて新しい問題であり続ける。
このご時世に「オンライン推奨」とか現政権は勇気あるな（皮肉）&lt;/p&gt;
&lt;p&gt;国勢調査が面白いのは，基本的に「戸」単位であり，その枠組みの中で識別できていれば「本人確認」は必ずしも必要条件ではないということだ。
そして，その「戸」単位の確認を行うのが「国勢調査員」である。
これは紙でもネットでも同じこと。
ネットで回答するにしても，そのアカウント情報は国勢調査員から貰わなければならない。&lt;/p&gt;
&lt;p&gt;そもそも路上生活者とかにも国勢調査員が出向いて聞き取り調査するんだよ。
日本語が通じない人達だって相当数いるだろうに，ホンマ国勢調査員のご苦労は察するにあまりある。&lt;/p&gt;
&lt;p&gt;故に「『コロナ』だからオンライン推奨」というのは全く以って詭弁である。
ちなみに，今回うちで国勢調査の回答をしたのは親父殿だが，パソコンもスマホも持ってないので紙で回答したらしい。
私？ 私はただの居候ですから（笑）&lt;/p&gt;
&lt;h2&gt;「国勢調査オンライン」はダサいか&lt;/h2&gt;
&lt;p&gt;どうも「国勢調査オンライン」のサイトをダサいとか文句を言ってる人がいるらしい。
まぁ今風ではないな（笑）&lt;/p&gt;
&lt;p&gt;今回は私は回答してないのでどうだったかは知らないが，&lt;a href=&#34;https://text.baldanders.info/remark/2015/0920-diary/#census&#34; title=&#34;今日の戯れ言：週末は掃除三昧&#34;&gt;前回ネットで回答&lt;/a&gt;してめっさ楽だったのは覚えている。
ぶっちゃけて言うが&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;&lt;strong&gt;政府系サイトに &lt;ruby&gt;&lt;rb&gt;SEO&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;屁のつっぱり&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt; は要らんですよ&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;そもそも Web アクセシビリティってそんな簡単じゃない。
うちのサイトもそうだけど，本当に不特定に見易い使い易いサイトなんか無理である。
このブログサイトをダークモードにしてるのは，主に「私」のためだ。&lt;/p&gt;
&lt;p&gt;できるだけ多くの人に対応しようとして結果として今風じゃないデザインになったとしても，利用者が文句を言う筋合いじゃないのだ。
機能要件やセキュリティ要件を満たしていない部分があるのなら，文句を言って然るべきだけど（笑）&lt;/p&gt;
&lt;p&gt;というわけで，まだ回答してない人でネット回答可能であれば，ネットのほうが断然楽なので，お試しあれ。&lt;/p&gt;
&lt;h2&gt;いまさら思い出したが&amp;hellip;&lt;/h2&gt;
&lt;p&gt;このブログサイト，&lt;a href=&#34;https://text.baldanders.info/remark/2015/open-this-site/&#34; title=&#34;text.Baldanders.info 正式オープン&#34;&gt;正式オープン&lt;/a&gt;から5周年だわ。
何も考えてなかった。&lt;/p&gt;
&lt;p&gt;まぁ，&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/assemble-a-living-pc/&#34; title=&#34;整いました！&#34;&gt;この前買ったタブレット&lt;/a&gt;がご褒美ということで（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/nist-sp-800-207-zero-trust-architecture/&#34;&gt;NIST SP 800-207: “Zero Trust Architecture”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/authenticator-and-aal/&#34;&gt;Authenticator と AAL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- eof --&gt;
</content>
	</entry>
</feed>
