<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of risk - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/risk/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/risk/index.xml" />
	<id>tag:text.Baldanders.info,2022-09-10:/tags</id>
	<updated>2022-09-10T09:40:40+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>命のリスク・トレードオフ</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/09/risk-management/" />
		<id>tag:text.Baldanders.info,2022-09-10:/remark/2022/09/risk-management/</id>
		<published>2022-09-10T00:40:40+00:00</published>
		<updated>2022-09-10T02:08:36+00:00</updated>
		<summary>大抵は自分の主張に都合のいいリスクに対しては声高に叫ぶが，リスク間のトレードオフについては口を閉ざす</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;久しぶりに11年前に書いてた自ブログ記事を眺めていたが「&lt;a href=&#34;https://baldanders.info/blog/000546/&#34;&gt;日本学術学会は原発に批判的？&lt;/a&gt;」に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
リスクにおける「基準値」はリスク評価に対して特定の条件を加えたもので，その条件は政治的な判断にならざるをえない場合が多い。 放射線量の基準値が平時と有事で異なるのはそのためだ。 リスクは系全体で最小となるようにマネジメントされなければならない。 だから「条件」を巡って議論が起きるのは不思議なことではない。 ただ傍で見てて「それって科学なの？」という思いはあるけど
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://baldanders.info/blog/000546/&#34;&gt;日本学術学会は原発に批判的？&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;という記述を見つけて「日本てば10年経っても何も進歩しなかったんだな」と暗澹たる気持ちになった。
もちろん「コロナ」の話だよ。&lt;/p&gt;
&lt;p&gt;リスクに関して細かい話は色々あるが，大雑把には&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;リスクは定量評価である&lt;/li&gt;
&lt;li&gt;リスクはリスクとしかトレードオフできない&lt;/li&gt;
&lt;li&gt;リスクは系全体で最小（ゼロではない）となるようマネジメントされなければならない&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;といった辺りが重要である。&lt;/p&gt;
&lt;p&gt;たとえば疾病関連のリスクは基本的には「損失余命リスク」で評価する。
これ自体は妥当だと思う。
問題は疾病関連リスクしか見ないことにある。
たとえば社会的な経済活動が減退して困窮したり絶望したりする人が増えれば，これまもた「損失余命リスク」と言える。
つまり，感染症の大規模感染を抑える行動とそれによる経済活動の減退とのトレードオフは「損失余命リスク」評価の下に議論することもできる。&lt;/p&gt;
&lt;p&gt;でも実際には，あるリスクを減らすための行動を他のリスクと絡めて考えている人は（専門家も含めて）少ないように見える。
大抵は自分の主張に都合のいいリスクに対しては声高に叫ぶが，リスク間のトレードオフについては口を閉ざす。
これでは正しい「政治判断」はできないのではないか。
浪花節で社会は回らない。&lt;/p&gt;
&lt;p&gt;お金は大事だし，実のところリスクはお金（の量）に換算できる。
身も蓋もないことを言えば感染症リスクも不況の影響もお金持ちなら解決できる。
でも，政治決断としてリスクに対してお金を出すのなら（社会全体で）きちんと抑制効果が出るものでなければ意味がない。
考えなしにお金やポイント・クーポン券をばら撒くのはただの政治腐敗である。&lt;/p&gt;
&lt;p&gt;それとも「不況だからマイナポイントをばら撒く」というのが令和時代のトレンドなのだろうか。&lt;/p&gt;
</content>
	</entry><entry>
		<title>名誉毀損とリンク</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/08/defamation-and-hyperlinks/" />
		<id>tag:text.Baldanders.info,2022-08-20:/remark/2022/08/defamation-and-hyperlinks/</id>
		<published>2022-08-20T02:43:10+00:00</published>
		<updated>2022-08-20T03:36:44+00:00</updated>
		<summary>リンクは単なる道具・手段</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;オーストラリアの話であるが Google の検索結果およびそのリンクによって名誉毀損を受けたとして裁判になっていたそうで，先日その判決結果が出たらしい。&lt;/p&gt;
&lt;p&gt;発端はこんな感じ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;The &lt;a href=&#34;https://www.hcourt.gov.au/cases/case_m86-2021&#34;&gt;case&lt;/a&gt; relates to a Google search result that linked to a 2004 article published by The Age with the title, &amp;ldquo;Underworld loses valued friend at court.&amp;rdquo; The article described Melbourne-based lawyer George Defteros, who was charged with conspiracy to murder and incitement to murder the day before it was published. The charge was withdrawn in 2005.&lt;/p&gt;
&lt;p&gt;Defteros sued Google after becoming aware that a Google search of his name produced a link to the article and a snippet. Google refused to remove the article from search results despite a request from Defteros in 2016.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/tech-policy/2022/08/linking-to-news-doesnt-make-google-liable-for-defamation-australia-court-rules/&#34;&gt;Linking to news doesn’t make Google liable for defamation, Australia court rules | Ars Technica&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これに対して下級裁判所は&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Lower courts decided that Google &amp;ldquo;published the defamatory matter because the provision of the Search Result was instrumental to the communication of the content of the Underworld article to the user, in that it lent assistance to its publication,&amp;rdquo; &lt;a href=&#34;https://cdn.hcourt.gov.au/assets/publications/judgment-summaries/2022/hca-27-2022-08-17.pdf&#34;&gt;according to a summary of today&amp;rsquo;s ruling&lt;/a&gt; provided by the High Court of Australia.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/tech-policy/2022/08/linking-to-news-doesnt-make-google-liable-for-defamation-australia-court-rules/&#34;&gt;Linking to news doesn’t make Google liable for defamation, Australia court rules | Ars Technica&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;として Google 側に賠償金の支払いを命じた。
その後 (当然ながら) Google は上告したようで，最終的に&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Google cannot be held liable for defamation simply for providing hyperlinks to other webpages, Australia&amp;rsquo;s highest court &lt;a href=&#34;https://eresources.hcourt.gov.au/downloadPdf/2022/HCA/27&#34;&gt;ruled today&lt;/a&gt;. By itself, providing a URL is not &amp;ldquo;participation in the communication of defamatory matter which happens to be at that address&amp;hellip; In reality, &lt;strong&gt;a hyperlink is merely a tool which enables a person to navigate to another webpage&lt;/strong&gt;,&amp;rdquo; the High Court of Australia ruling said.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/tech-policy/2022/08/linking-to-news-doesnt-make-google-liable-for-defamation-australia-court-rules/&#34;&gt;Linking to news doesn’t make Google liable for defamation, Australia court rules | Ars Technica&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;という結果になったそうな。
ちなみに強調は私がやりました。&lt;/p&gt;
&lt;p&gt;まぁ，当たり前っちゃあ当たり前なんだけど&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Today&amp;rsquo;s ruling could have been different if Google had been paid to promote The Age article. The appeal &amp;ldquo;does not present the occasion to consider whether the conclusion would be different in respect of those hyperlinks that, by agreement with a third party, are promoted by the appellant following a search request,&amp;rdquo; the ruling said.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/tech-policy/2022/08/linking-to-news-doesnt-make-google-liable-for-defamation-australia-court-rules/&#34;&gt;Linking to news doesn’t make Google liable for defamation, Australia court rules | Ars Technica&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とあるようにリンクそのものではなく，リンクを含むコンテンツの文脈とかその背後にある利害関係が重要かな，と思ったりする。
たとえば6年前に「&lt;a href=&#34;https://p2ptk.org/copyright/553&#34; title=&#34;欧州司法裁、侵害コンテンツへのリンクを著作権侵害と判断 | p2ptk[.]org&#34;&gt;欧州司法裁、侵害コンテンツへのリンクを著作権侵害と判断&lt;/a&gt;」という話があったが，この前提のもとに改めて記事を見直せば「なるほど」と思うかもしれない。&lt;/p&gt;
&lt;p&gt;「リンク」という言葉だけを抜き出してシロかクロか論じることに意味はない，ということだろう。
願わくば日本のマスメディアもこうした視点で報道していただきたいものである。&lt;/p&gt;
</content>
	</entry><entry>
		<title>アクセス制御状態の4分類</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/08/taxonomy-of-access-control/" />
		<id>tag:text.Baldanders.info,2022-08-16:/remark/2022/08/taxonomy-of-access-control/</id>
		<published>2022-08-16T03:41:39+00:00</published>
		<updated>2022-08-16T03:42:36+00:00</updated>
		<summary>Bruce Schneier 先生の記事より</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://www.schneier.com/&#34;&gt;Bruce Schneier&lt;/a&gt; 先生の記事より：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2022/08/a-taxonomy-of-access-control.html&#34;&gt;A Taxonomy of Access Control - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;元ネタは Cryptocurrency Wallet (何となく嫌なので日本語で書いてやらんw) に関する以下の論文：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://eprint.iacr.org/2021/1522.pdf&#34;&gt;On Cryptocurrency Wallet Design &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Abstract には&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;The security of individual keys was widely studied with practical solutions available, from mnemonic phrases to dedicated hardware. There are also techniques for securing funds by requiring combinations of multiple keys. However, to the best of our knowledge, a crucial question was never addressed: How is wallet security affected by the number of keys, their types, and how they are combined? This is the focus of this work.&lt;/p&gt;
&lt;p&gt;We present a model where each key has certain probabilities for being &lt;em&gt;safe&lt;/em&gt;, &lt;em&gt;lost&lt;/em&gt;, &lt;em&gt;leaked&lt;/em&gt;, or &lt;em&gt;stolen&lt;/em&gt; (available only to an attacker). The number of possible wallets for a given number of keys is the Dedekind number, prohibiting an exhaustive search with many keys. Nonetheless, we bound optimal-wallet failure probabilities with an evolutionary algorithm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://eprint.iacr.org/2021/1522.pdf&#34;&gt;On Cryptocurrency Wallet Design&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とあるが， Bruce Schneier さんが&lt;a href=&#34;https://www.schneier.com/blog/archives/2022/08/a-taxonomy-of-access-control.html&#34; title=&#34;A Taxonomy of Access Control - Schneier on Security&#34;&gt;指摘&lt;/a&gt;される通り，これはもっと一般的なアクセス制御に関わるアカウント情報や暗号鍵の状態についても応用可能となる。
すなわち：&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;safe&lt;/th&gt;&lt;td&gt;Only the user has access,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;loss&lt;/th&gt;&lt;td&gt;No one has access,&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;leak&lt;/th&gt;&lt;td&gt;Both the user and the adversary have access, or&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;theft&lt;/th&gt;&lt;td&gt;Only the adversary has access&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://eprint.iacr.org/2021/1522.pdf&#34;&gt;On Cryptocurrency Wallet Design&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;の4つの状態を定義することで&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Once you know these states, you can assign probabilities of transitioning from one state to another (someone hacks your account and locks you out, you forgot your own password, etc.) and then build optimal security and reliability to deal with it.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2022/08/a-taxonomy-of-access-control.html&#34;&gt;A Taxonomy of Access Control&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;というわけだ。
件の論文はこの4状態とその関係を定量的に評価している点で素晴らしく，他のセキュリティ評価にも使えるため “&lt;a href=&#34;https://www.schneier.com/blog/archives/2022/08/a-taxonomy-of-access-control.html&#34; title=&#34;A Taxonomy of Access Control - Schneier on Security&#34;&gt;It’s a truly elegant way of conceptualizing the problem&lt;/a&gt;” と絶賛されているのだろう。&lt;/p&gt;
&lt;p&gt;というわけで，覚え書きとして記しておく。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
</content>
	</entry><entry>
		<title>オープンソース製品とソフトウェア部品表</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/08/software-bills-of-materials/" />
		<id>tag:text.Baldanders.info,2022-08-09:/remark/2022/08/software-bills-of-materials/</id>
		<published>2022-08-09T11:31:46+00:00</published>
		<updated>2022-08-11T04:06:27+00:00</updated>
		<summary>ブログってのはこういう粗結合連鎖が面白いと思うのだけどねぇ</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;拙作の &lt;a href=&#34;https://github.com/goark/depm&#34; title=&#34;goark/depm: Visualize depndency packages and modules&#34;&gt;depm&lt;/a&gt; で利用している &lt;a href=&#34;https://github.com/google/licenseclassifier&#34; title=&#34;google/licenseclassifier: A License Classifier&#34;&gt;github.com/google/licenseclassifier&lt;/a&gt; パッケージの v2 系モジュールがいい感じにバージョンが上がってきたので，どのくらい使えるようになったのか試してみた記事がこれ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20220806-licenseclassifier&#34;&gt;ライセンスファイルからライセンスを推定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で，この記事について有り難くも「&lt;a href=&#34;https://twitter.com/fu7mu4/status/1556141959755886593&#34;&gt;SPDX License identifier にも触れて欲しい&lt;/a&gt;」というリクエストを頂いたので &lt;a href=&#34;https://spdx.dev/&#34; title=&#34;International Open Standard (ISO/IEC 5962:2021) - Software Package Data Exchange (SPDX)&#34;&gt;SPDX (Software Package Data Exchange)&lt;/a&gt; についてちょろんと紹介する文章を追記した。
これを書くためにサイトを眺めて初めて気がついたのだが &lt;a href=&#34;https://spdx.dev/&#34; title=&#34;International Open Standard (ISO/IEC 5962:2021) - Software Package Data Exchange (SPDX)&#34;&gt;SPDX&lt;/a&gt; が &lt;a href=&#34;https://www.iso.org/standard/81870.html&#34; title=&#34;ISO - ISO/IEC 5962:2021 - Information technology — SPDX® Specification V2.2.1&#34;&gt;ISO/IEC 5962:2021&lt;/a&gt; として標準化されていたらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxfoundation.org/featured/spdx-becomes-internationally-recognized-standard-for-software-bill-of-materials/&#34;&gt;SPDX Becomes Internationally Recognized Standard for Software Bill of Materials - Linux Foundation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Between eighty and ninety percent (80%-90%) of a modern application is assembled from open source software components. An SBOM accounts for the software components contained in an application — open source, proprietary, or third-party — and details their provenance, license, and security attributes. SBOMs are used as a part of a foundational practice to track and trace components across software supply chains. SBOMs also help to proactively identify software issues and risks and establish a starting point for their remediation.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.linuxfoundation.org/featured/spdx-becomes-internationally-recognized-standard-for-software-bill-of-materials/&#34;&gt;SPDX Becomes Internationally Recognized Standard for Software Bill of Materials&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;https://www.iso.org/standard/81870.html&#34; title=&#34;ISO - ISO/IEC 5962:2021 - Information technology — SPDX® Specification V2.2.1&#34;&gt;ISO/IEC 5962:2021&lt;/a&gt; がリリースされたのが2021年8月。
その年の年末に例の &lt;a href=&#34;https://text.baldanders.info/remark/2021/12/log4j-vulnerability/&#34; title=&#34;ava 製 Logger “Log4j” の脆弱性について&#34;&gt;Apache Log4j の脆弱性&lt;/a&gt;に端を発したソフトウェア・サプライチェーン脆弱性の問題が大きく取り上げられることになった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20211222/apache-log4j&#34;&gt;Apache Log4jの脆弱性とともに浮かび上がったオープンソースのメンテナの責任範囲の問題 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どーりで今年（2022年）に入ってやたらと「ソフトウェア部品表（Software Bill of Materials; SBOM）」の話を聞くようになったわけだ。&lt;/p&gt;
&lt;p&gt;更にタイミングのいいことに7月下旬に以下の記事が公開されていたのを yomoyomo さんの記事で知った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lawfareblog.com/open-source-security-how-digital-infrastructure-built-house-cards&#34;&gt;Open-Source Security: How Digital Infrastructure Is Built on a House of Cards  - Lawfare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2022/07/securing-open-source-software.html&#34;&gt;Securing Open-Source Software - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20220808/open-source-security&#34;&gt;オープンソースのセキュリティ：デジタルインフラは砂上の楼閣に築かれている？ - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Importantly, the culprit was not the developers of the code but the company that &lt;a href=&#34;https://techcrunch.com/2018/12/10/equifax-breach-preventable-house-oversight-report/&#34;&gt;failed to implement a patch&lt;/a&gt; that promised to prevent the very thing that happened. Many observers complain that Equifax has suffered little consequence for its negligence, highlighting weak oversight and accountability structures.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.lawfareblog.com/open-source-security-how-digital-infrastructure-built-house-cards&#34;&gt;Open-Source Security: How Digital Infrastructure Is Built on a House of Cards&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote&gt;これに対し、最近では連邦取引委員会が Log4Shell の対応パッチの適用が遅い企業を強制措置をかますなど、政府がオープンソースのセキュリティ問題に介入する姿勢を見せつつある。著者はその一環としての SBOM（Software Bill Of Materials：ソフトウェア部品表）を評価するが、それだけでは不十分と断じる。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20220808/open-source-security&#34;&gt;オープンソースのセキュリティ：デジタルインフラは砂上の楼閣に築かれている？&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;An SBOM is simply a list of the ingredients, or codebases, that comprise software you purchased. It does not provide a list of vulnerabilities nor does it impose any minimum security requirements on the vendor generating the SBOM. Comparable to a list of ingredients on a snack or medication you purchase, the information is only as useful as your ability to parse it.&lt;/p&gt;
&lt;p&gt;To operationalize an SBOM, a company must be able to read it, which is a challenge as there is no mandated standard format for an SBOM, and actually use it to check databases such as the &lt;a href=&#34;https://nvd.nist.gov/&#34;&gt;National Vulnerability Database (NVD)&lt;/a&gt; for new vulnerabilities found in the software components the SBOM lists. These activities are costly and cumbersome. While Google and Intel might have the resources and security maturity to demand machine-readable SBOMs and regularly scan databases for new vulnerabilities that impact their systems, there are countless small businesses using open source that cannot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.lawfareblog.com/open-source-security-how-digital-infrastructure-built-house-cards&#34;&gt;Open-Source Security: How Digital Infrastructure Is Built on a House of Cards&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote&gt;著者は、もはや公共財の性質を持つオープンソースを維持する制度的構造を構築する必要があると訴える。そして、それ自体は目新しい主張ではない。それには効率的な資源配分を確保し、最低基準を課すことが必要になるが、果たしてそれをオープンソースプロジェクトに適用するのはうまくいくかねというのがワタシの感想になる。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20220808/open-source-security&#34;&gt;オープンソースのセキュリティ：デジタルインフラは砂上の楼閣に築かれている？&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;個人的には FOSS 製品を「公共財」と見なす向きには違和感や危うさを感じてしまうのだが，もはや四の五の言ってられねー，って感じなのだろう。
せめて &lt;a href=&#34;https://spdx.dev/&#34; title=&#34;International Open Standard (ISO/IEC 5962:2021) - Software Package Data Exchange (SPDX)&#34;&gt;SPDX&lt;/a&gt; が SBOM の標準としてセキュリティ・リスク管理に上手く組み込まれることを期待したい。&lt;/p&gt;
&lt;p&gt;報告される脆弱性の量的評価としての CVSS，ソフトウェア・サプライチェーンの構成を可視化する &lt;a href=&#34;https://spdx.dev/&#34; title=&#34;International Open Standard (ISO/IEC 5962:2021) - Software Package Data Exchange (SPDX)&#34;&gt;SPDX&lt;/a&gt;/SBOM，脆弱性が報告された際のアクションを支援する SSVC&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; といった道具・手段を組み合わせて，脆弱性報告から対応までのワークフローがスムーズに流れるようになるといいなぁ，と思ったり。
まぁ，そのワークフロー自体がソフトウェア・サプライチェーンだったりするのだが（笑）&lt;/p&gt;
&lt;p&gt;しかし，ブログってのはこういう粗結合連鎖が面白いと思うのだが「&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20220808/pc-crash&#34; title=&#34;恥さらし文章「ある「パソコンの大先生」の死」に寄せられたありがたいコメントの数々 - YAMDAS現更新履歴&#34;&gt;ブログの退潮&lt;/a&gt;」はもはや避けられぬか（笑）&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://snyk.io/&#34; title=&#34;Snyk | Developer security | Develop fast. Stay secure.&#34;&gt;Synk&lt;/a&gt; と SBOM&lt;/h2&gt;
&lt;p&gt;開発者向けのセキュリティ関連サービスを提供している &lt;a href=&#34;https://snyk.io/&#34; title=&#34;Snyk | Developer security | Develop fast. Stay secure.&#34;&gt;Synk&lt;/a&gt; は &lt;a href=&#34;https://spdx.dev/&#34; title=&#34;International Open Standard (ISO/IEC 5962:2021) - Software Package Data Exchange (SPDX)&#34;&gt;SPDX&lt;/a&gt;/SBOM について以下のように述べている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;Snyk integrates with a wide range of different package managers and developer tools to help identify vulnerabilities in the software components used. In doing that we need to build up a SBOM under the hood, normalising the list of software and augmenting that list with additional metadata from other sources. The Snyk tooling mainly focuses on presenting that information alongside information about vulnerabilities, but Snyk customers can access that raw SBOM via our built-in reporting or &lt;a href=&#34;https://snyk.docs.apiary.io/#reference/dependencies/dependencies-by-organization/list-all-dependencies&#34;&gt;powerful API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In fact, you can think of Snyk client tools like the CLI and CI/CD plugins as generating an SBOM, while Snyk’s backend takes an SBOM and returns vulnerability data, or provides automation around that data to help you fix issues. It’s this extensive experience that leads to our interest in emerging standards in this space.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://snyk.io/blog/advancing-sbom-standards-snyk-spdx/&#34;&gt;Advancing SBOM standards: Snyk and SPDX | Snyk&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Microsoft と SBOM&lt;/h2&gt;
&lt;p&gt;忘れていたが Microsoft も SBOM を自動生成するツールを OSS で出してたんだっけ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/engineering-at-microsoft/microsoft-open-sources-software-bill-of-materials-sbom-generation-tool/&#34;&gt;Microsoft open sources its software bill of materials (SBOM) generation tool - Engineering@Microsoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/22/sbomsbom_tool.html&#34;&gt;マイクロソフト、ビルド時にソフトウェアの部品表（SBOM）を自動生成する「SBOM Tool」、オープンソースで公開 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;具体的には、ソフトウェア名やライセンス、作成者、バージョン、個々のファイルのハッシュ値などの情報を、SBOMのフォーマットとしての標準の1つである「SPDX」（Software Package Data Exchange）形式で出力してくれます。&lt;/p&gt;
&lt;p&gt;また、ビルドの対象となるソフトウェアにSBOMが用意されている場合、新たに生成されるSBOMにはそのSBOMの情報をきちんととりまとめて生成することが可能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/22/sbomsbom_tool.html&#34;&gt;マイクロソフト、ビルド時にソフトウェアの部品表（SBOM）を自動生成する「SBOM Tool」、オープンソースで公開&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;まぁ，メインの文章でも紹介したように「SBOM をどう使うか」が重要なんだけどね。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.pwc.com/jp/ja/knowledge/column/awareness-cyber-security/stakeholder-specific-vulnerability-categorization.html&#34;&gt;SSVC（Stakeholder-Specific Vulnerability Categorization）を活用した脆弱性管理 | PwC Japanグループ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20220402-how-go-mitigates-supply-chain-attacks&#34;&gt;Go はどのようにしてサプライチェーン攻撃を低減しているか&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/07/slow-motion-car-crash/&#34;&gt;「ブログはやはり『死に続けている』」&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;SSVC (Stakeholder-Specific Vulnerability Categorization) については “&lt;span&gt;&lt;a href=&#34;https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=653459&#34;&gt;Prioritizing Vulnerability Response: A Stakeholder-Specific Vulnerability Categorization (Version 2.0) &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;” あたりを参照のこと。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>悪意のコードを含む多数の分岐リポジトリが見つかった話</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/08/malicious-code-in-many-forked-repositories/" />
		<id>tag:text.Baldanders.info,2022-08-04:/remark/2022/08/malicious-code-in-many-forked-repositories/</id>
		<published>2022-08-03T23:12:52+00:00</published>
		<updated>2022-08-04T10:37:19+00:00</updated>
		<summary>今回の件は spam の一種とみなすこともできる</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;2022-08-03 頃の Twitter TL でちょっとした騒ぎを見かけたのだが，詳細記事が出たらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bleepingcomputer.com/news/security/35-000-code-repos-not-hacked-but-clones-flood-github-to-serve-malware/&#34;&gt;35,000 code repos not hacked—but clones flood GitHub to serve malware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初は各リポジトリに悪意のコードがねじ込まれたのか？ とリポジトリ・アクセスの認証周りを疑ったが，実はそうではなく&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Rather, the thousands of backdoored projects are copies (forks or clones) of legitimate projects purportedly made by threat actors to push malware.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bleepingcomputer.com/news/security/35-000-code-repos-not-hacked-but-clones-flood-github-to-serve-malware/&#34;&gt;35,000 code repos not hacked—but clones flood GitHub to serve malware&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ということらしい。
GitHub の公式 tweet にも&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;GitHub is investigating the Tweet published Wed, Aug. 3, 2022:&lt;br&gt;* No repositories were compromised&lt;br&gt;* Malicious code was posted to cloned repositories, not the repositories themselves&lt;br&gt;* The clones were quarantined and there was no evident compromise of GitHub or maintainer accounts&lt;/p&gt;&amp;mdash; GitHub Security (@GitHubSecurity) &lt;a href=&#34;https://twitter.com/GitHubSecurity/status/1554843443200806913?ref_src=twsrc%5Etfw&#34;&gt;August 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;とあり，ひと安心といったところ。&lt;/p&gt;
&lt;p&gt;知らない人のために一応解説しておくと GitHub には pull request という仕組みがあり，他者のリポジトリにコードを貢献したい場合に自身のリポジトリに分岐（fork）させた上でコードを変更・追加し，そのコードを対象のリポジトリにマージするよう提案を行うことができる。
提案を受けた側は，そのコードのレビューを行った上で明示的な操作でコードを受け入れることができる。
もちろんダメなら拒否もできる。&lt;/p&gt;
&lt;p&gt;Pull request は GitHub アカウントを持つユーザなら誰でも可能であり，その過程で悪意のコードを忍ばせることは形式上は可能である。
まぁ，普通は「そういう PR はレビューで拒否しましょうね」となるだろうし，一度そんなコードを送りつけた相手を二度と信用することはないだろう。
なので今回の件は spam の一種とみなすこともできる。
実際，アホみたいな数だしね。&lt;/p&gt;
&lt;p&gt;気をつける点があるとすれば「悪意の PR」を送りつけるために作った分岐リポジトリのコードをうっかり取り込んでしまう場合だろう。
最初に紹介した記事では&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;As a best practice, remember to consume software from the official project repos and watch out for potential typosquats or repository forks/clones that may appear identical to the original project but hide malware.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bleepingcomputer.com/news/security/35-000-code-repos-not-hacked-but-clones-flood-github-to-serve-malware/&#34;&gt;35,000 code repos not hacked—but clones flood GitHub to serve malware&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と述べている。
言われんでも（笑）&lt;/p&gt;
&lt;p&gt;それに続けて&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Open source code commits signed with GPG keys of authentic project authors are one way of verifying the authenticity of code.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bleepingcomputer.com/news/security/35-000-code-repos-not-hacked-but-clones-flood-github-to-serve-malware/&#34;&gt;35,000 code repos not hacked—but clones flood GitHub to serve malware&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と書かれているが，ぶっちゃけプロジェクトの外側にいる人から見てコミットに OpenPGP 署名があることは大した保証にはならない。
この辺は以前書いた&lt;a href=&#34;https://text.baldanders.info/openpgp/web-of-trust/&#34; title=&#34;OpenPGP の電子署名は「ユーザーの身元を保証し」ない&#34;&gt;拙文&lt;/a&gt;を参考にしてほしい。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;じゃあ git commit で OpenPGP 署名を付与することにどんな意義があるかというと，それはチーム運営で威力を発揮する。
つまり公開鍵や電子署名で「ユーザーの身元を保証」するのではなく「身元の保証されたユーザ」同士で鍵と電子署名を運用するのである。
これでチーム以外からのなりすまし commit を検知（防止ではない）しやすくなる。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/web-of-trust/&#34;&gt;OpenPGP の電子署名は「ユーザーの身元を保証し」ない&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;オープンソース・プロジェクトであれば pull request を受け付けるメンテナの技量と判断が試されるところだろう。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;NTT出版 2013-12-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-28&#34;&gt;2015-11-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 信頼と裏切りの社会 --&gt;
</content>
	</entry><entry>
		<title>Go 1.19 で os/exec パッケージの挙動が変わった話</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/exec-package-in-go119/" />
		<id>tag:text.Baldanders.info,2022-08-03:/golang/exec-package-in-go119/</id>
		<published>2022-08-03T12:28:36+00:00</published>
		<updated>2022-08-04T22:02:12+00:00</updated>
		<summary>Windows 環境でコマンドを起動する際の脆弱性の回避</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 1.19 の&lt;a href=&#34;https://go.dev/doc/go1.19&#34; title=&#34;Go 1.19 Release Notes - The Go Programming Language&#34;&gt;リリースノート&lt;/a&gt;を眺めてみると&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;a href=&#34;https://go.dev/pkg/os/exec/#Command&#34;&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://go.dev/pkg/os/exec/#LookPath&#34;&gt;&lt;code&gt;LookPath&lt;/code&gt;&lt;/a&gt; no longer allow results from a PATH search to be found relative to the current directory. This removes a &lt;a href=&#34;https://go.dev/blog/path-security&#34;&gt;common source of security problems&lt;/a&gt; but may also break existing programs that depend on using, say, &lt;code&gt;exec.Command(&amp;quot;prog&amp;quot;)&lt;/code&gt; to run a binary named &lt;code&gt;prog&lt;/code&gt; (or, on Windows, &lt;code&gt;prog.exe&lt;/code&gt;) in the current directory. See the &lt;a href=&#34;https://go.dev/pkg/os/exec/&#34;&gt;&lt;code&gt;os/exec&lt;/code&gt;&lt;/a&gt; package documentation for information about how best to update such programs.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://go.dev/doc/go1.19&#34;&gt;Go 1.19 Release Notes - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とある。
さっそく試してみよう。&lt;/p&gt;
&lt;p&gt;まず Windows 環境で &lt;a href=&#34;https://github.com/goark/gpgpdump&#34; title=&#34;goark/gpgpdump: OpenPGP packet visualizer&#34;&gt;&lt;code&gt;gpgpdump.exe&lt;/code&gt;&lt;/a&gt; コマンドを PATH で指定されたフォルダ以外，具体的には以下のソースファイルと同じフォルダに置く。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;os/exec&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;gpgpdump.exe&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CombinedOutput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;output by %v:\n%v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これを &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 1.19 コンパイル環境下で実行すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; go run sample.go
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;exec: &amp;#34;gpgpdump.exe&amp;#34;: cannot run executable found relative to current directory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;「カレントディレクトリに指定の実行ファイルあるけど起動しちゃらん（←超意訳，出雲弁）」とエラーになった。&lt;/p&gt;
&lt;p&gt;Windows ではパス指定なしでコマンドを起動する際に，カレントフォルダに同名の実行ファイルが存在すると優先的にそれを起動してしまう。
&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 標準の &lt;a href=&#34;https://pkg.go.dev/os/exec&#34; title=&#34;exec package - os/exec - Go Packages&#34;&gt;&lt;code&gt;os/exec&lt;/code&gt;&lt;/a&gt; パッケージもこの挙動に合わせていたのだが，2020年の &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-27955&#34;&gt;CVE-2020-27955&lt;/a&gt; で問題になった。
この挙動を悪用して悪意のコマンドを実行される可能性があるというわけだ。&lt;/p&gt;
&lt;p&gt;この脆弱性を回避するために，様々な試行錯誤が行われたが &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 1.19 の改修が決定打になるだろう。
カレントフォルダにある同名の実行ファイルを無視するのではなく，エラーとして「起動させない」というのがポイント。&lt;/p&gt;
&lt;p&gt;なお，今まで通りパスなしのコマンド指定時にカレントフォルダの実行ファイルを起動したいなら &lt;a href=&#34;https://pkg.go.dev/os/exec&#34; title=&#34;exec package - os/exec - Go Packages&#34;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.ErrDot&lt;/code&gt; エラーを明示的に潰すことで実現できる。
こんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;os/exec&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gpgpdump.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ErrDot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CombinedOutput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;output by %v:\n%v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これを実行すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; go run sample2.go
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;exec: &amp;#34;gpgpdump.exe&amp;#34;: cannot run executable found relative to current directory
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;output by .\gpgpdump.exe version:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gpgpdump v0.14.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;repository: https://github.com/goark/gpgpdump
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;となる。
エラーを無視してカレントディレクトリ &lt;code&gt;.&lt;/code&gt; を付加した状態で実行されているのがお分かりだろうか。&lt;/p&gt;
&lt;p&gt;ちなみに，同じコードを Windows 以外の環境で実行すると（&lt;code&gt;.exe&lt;/code&gt; の拡張子は外してね）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ go run sample2b.go 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;exec: &amp;#34;gpgpdump&amp;#34;: executable file not found in $PATH
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と PATH 上に実行ファイルが見つからない旨の普通のエラーが表示される。
これでアプリケーション側は OS ごとに処理を分ける必要がなくなったわけだ。
めでたい！&lt;/p&gt;
&lt;p&gt;ところで Windows には &lt;code&gt;NoDefaultCurrentDirectoryInExePath&lt;/code&gt; なる環境変数があるそうで，これが有効になっているとパスなしのコマンド指定時にカレントフォルダの同名実行ファイルを無視するらしい。&lt;/p&gt;
&lt;p&gt;で &lt;a href=&#34;https://pkg.go.dev/os/exec&#34; title=&#34;exec package - os/exec - Go Packages&#34;&gt;&lt;code&gt;os/exec&lt;/code&gt;&lt;/a&gt; パッケージは律儀にこの環境変数にも対応している。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;On Windows, &lt;code&gt;Command&lt;/code&gt; and &lt;code&gt;LookPath&lt;/code&gt; now respect the &lt;code&gt;NoDefaultCurrentDirectoryInExePath&lt;/code&gt; environment variable, making it possible to disable the default implicit search of “&lt;code&gt;.&lt;/code&gt;” in PATH lookups on Windows systems.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://go.dev/doc/go1.19&#34;&gt;Go 1.19 Release Notes - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;標準パッケージのソースコード &lt;code&gt;os/exec/lp_windows.go&lt;/code&gt; を眺めると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// LookPath searches for an executable named file in the
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// directories named by the PATH environment variable.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// LookPath also uses PATHEXT environment variable to match
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// a suitable candidate.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// If file contains a slash, it is tried directly and the PATH is not consulted.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Otherwise, on success, the result is an absolute path.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// In older versions of Go, LookPath could return a path relative to the current directory.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// As of Go 1.19, LookPath will instead return that path along with an error satisfying
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// errors.Is(err, ErrDot). See the package documentation for more details.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;LookPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;`PATHEXT`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ToLower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;exts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;exts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;.bat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;.cmd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ContainsAny&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`:\/`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findExecutable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// On Windows, creating the NoDefaultCurrentDirectoryInExePath
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// environment variable (with any value or no value!) signals that
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// path lookups should skip the current directory.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// In theory we are supposed to call NeedCurrentDirectoryForExePathW
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// &amp;#34;as the registry location of this environment variable can change&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// but that seems exceedingly unlikely: it would break all users who
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// have configured their environment this way!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// https://docs.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-needcurrentdirectoryforexepathw
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// See also go.dev/issue/43947.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;dotf&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;dotErr&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;found&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;syscall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;NoDefaultCurrentDirectoryInExePath&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;found&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findExecutable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;godebug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;execerrdot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;dotf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dotErr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ErrDot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Getenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SplitList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findExecutable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dotErr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;// https://go.dev/issue/53536: if we resolved a relative path implicitly,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// and it is the same executable that would be resolved from the explicit %PATH%,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// prefer the explicit name for the executable (and, likely, no error) instead
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// of the equivalent implicit name with ErrDot.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// Otherwise, return the ErrDot for the implicit path as soon as we find
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// out that the explicit one doesn&amp;#39;t match.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;nx&#34;&gt;dotfi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dotfiErr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Lstat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dotf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nx&#34;&gt;fi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fiErr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Lstat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dotfiErr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fiErr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SameFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dotfi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dotf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dotErr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;IsAbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;godebug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;execerrdot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ErrDot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dotErr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dotf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dotErr&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ErrNotFound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と &lt;code&gt;NoDefaultCurrentDirectoryInExePath&lt;/code&gt; 環境変数がない場合だけカレントフォルダ &lt;code&gt;.&lt;/code&gt; を付加してチェックしているのが分かる。
ご苦労さんなことである。&lt;/p&gt;
&lt;p&gt;少々姑息ではあるが，これを利用してカレントフォルダの同名実行ファイルを無視するよう構成することもできる。
こんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;os/exec&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Setenv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;NoDefaultCurrentDirectoryInExePath&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gpgpdump.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ErrDot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CombinedOutput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;output by %v:\n%v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これを実行すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; go run sample3.go
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;exec: &amp;#34;gpgpdump.exe&amp;#34;: executable file not found in %PATH%
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;となる。
前のコードの実行結果で出力されるエラーメッセージの違いを確かめてほしい。
Windows 以外でこの環境変数が悪さをすることはないだろうから Linux 等と挙動を合わせたいなら，おまじない的にセットしておくのもいいかもしれない。&lt;/p&gt;
&lt;p&gt;やっぱ Windows は面倒くさいな（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20201107-lookpath-by-golang&#34;&gt;Go でサブプロセスを起動する際は LookPath に気をつけろ！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/safeexec-packge/&#34;&gt;github.com/cli/safeexec パッケージを使った外部コマンドの安全な起動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/416Stewy0NS._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20 (Release 2021-07-13)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B099928SJD (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2016/07/go-programming-language/&#34; &gt;こちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-05-22&#34;&gt;2021-05-22&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>クラウドストレージのアカウント情報がクラウドストレージにある罠</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/07/midsummer-horror/" />
		<id>tag:text.Baldanders.info,2022-07-29:/remark/2022/07/midsummer-horror/</id>
		<published>2022-07-29T11:41:52+00:00</published>
		<updated>2022-08-08T10:41:06+00:00</updated>
		<summary>真夏のホラー</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;久しぶりにぞんぞがさばる（出雲弁）記事を見た。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2022/07/82884/&#34;&gt;ある「パソコンの大先生」の死 – WirelessWire News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;今回のお題&lt;/h2&gt;
&lt;p&gt;今回の条件は割とありがちではないだろうか。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Windows パソコン1台のみ&lt;/li&gt;
&lt;li&gt;パスワード管理ツールあり
&lt;ul&gt;
&lt;li&gt;ただし Windows 専用プロプライエタリ・ツール&lt;/li&gt;
&lt;li&gt;パスワード情報はクラウド・ストレージにバックアップあり&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ローカル NAS はなし&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;この唯一のパソコンが故障して復旧不能となった場合にどうなるかという話。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;しかし、そのフリーウェアはWindows用のプロプライエタリソフトウエアのため、ワタシのスマホではデータを閲覧できません。それに気付いたのは、スマホで新しいPCを購入する手続きを進め、最後にクレジットカードの会員向けサービスのパスワードを聞かれ、途方に暮れたときです。これでは新しいPCが調達できないじゃないか！&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://wirelesswire.jp/2022/07/82884/&#34;&gt;ある「パソコンの大先生」の死&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ぞんぞがさばる！&lt;/p&gt;
&lt;h2&gt;NAS とクラウドストレージ&lt;/h2&gt;
&lt;p&gt;最近は「クラウドストレージがあるならローカルの NAS とかいらなくね？」という向きも多いようだ。&lt;/p&gt;
&lt;p&gt;でもクラウドストレージにアクセスするためにはアカウント情報が必要で，更に多要素認証を使うのであればその分だけ認証手段を確保しておく必要がある。
それをどこに保持しておくか。&lt;/p&gt;
&lt;p&gt;個人的にはローカルに NAS を置いておくのはまだ意味があると思う。
もっと言えばローカル NAS とクラウドストレージを連携できるならなおよし。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/10/nas/&#34;&gt;秋 NAS は俺に喰わせろ！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私もクラウドストレージは機密保持の観点からはあまり信用してない。
個人向けのクラウドストレージ・サービスの多くは他者と情報共有しやすいよう設計されているため「うっかり漏洩」してしまう可能性も排除できない。
法人向けならユーザごとに細かく権限を設定できるので逆に安心なんだけどね。&lt;/p&gt;
&lt;p&gt;そういう意味じゃ信用してないのはクラウドサービスではなくて自分自身か（笑）&lt;/p&gt;
&lt;p&gt;まぁ，クラウドストレージは「バックアップ用」と割り切って sensitive な情報については置かないようにするか暗号化するのがいいんだろうね。&lt;/p&gt;
&lt;h2&gt;マルチプラットフォームは重要&lt;/h2&gt;
&lt;p&gt;今回のもうひとつのポイントはパスワード管理ツールが Windows 専用だったことだろう。
プロプライエタリなツールであることは今回のケースでは問題ではない。&lt;/p&gt;
&lt;p&gt;最近はセキュリティ企業も独自のパスワード管理ツールを出しているが，これがもし特定 OS 専用なら考え直したほうがいいかもしれない（実際のところは知らない）。&lt;/p&gt;
&lt;p&gt;私は昔から &lt;a href=&#34;https://keepass.info/&#34; title=&#34;KeePass Password Safe&#34;&gt;KeePass&lt;/a&gt; 派なのだが，最近は派生ツールである &lt;a href=&#34;https://keepassxc.org/&#34; title=&#34;KeePassXC Password Manager&#34;&gt;KeePassXC&lt;/a&gt; および Android 版の &lt;a href=&#34;https://play.google.com/store/apps/details?id=keepass2android.keepass2android&#34; title=&#34;Keepass2Android Password Safe - Apps on Google Play&#34;&gt;Keepass2Android&lt;/a&gt; を愛用している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://keepassxc.org/&#34;&gt;KeePassXC Password Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/keepassxreboot/keepassxc&#34;&gt;GitHub - keepassxreboot/keepassxc: KeePassXC is a cross-platform community-driven port of the Windows application “Keepass Password Safe”.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=keepass2android.keepass2android&amp;amp;hl=en_US&amp;amp;gl=JP&#34;&gt;Keepass2Android Password Safe - Apps on Google Play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;パスワードを紙に書くのは案外悪くない&lt;/h2&gt;
&lt;p&gt;（特に同居人が居る場合は）管理に気を使う必要はあるが，パスワード情報を紙に書き出すというのは案外悪くないと思っている。
もちろん全て書き出す必要はなくて，いざというときに最低限必要な情報のみに厳選する。&lt;/p&gt;
&lt;p&gt;私の自宅環境はパソコン（Linux 機），NAS，スマホの3機構成でこれらが同時に使えなくなる事態は真面目に考えてなかったのだが，今回の記事を読んで，考えを改めた。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
起こる可能性のあることは，いつか実際に起こる（If it can happen, it will happen）
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;マーフィーの法則&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;作業記録は大事&lt;/h2&gt;
&lt;p&gt;上述のようにパスワードを紙に書き出すとしても，どのアカウント情報を書き出すべきかはよくよく検討しないといけない。
その一環としてスマホやパソコンのセットアップ時の作業記録を録っておくことをおすすめする。&lt;/p&gt;
&lt;p&gt;以下はスマホの機種変更した際の作業記録の概要。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/05/changing-smartphone/&#34;&gt;ついカッとなって機種変した，反省はしない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それを見れば必要な情報が分かるはず。
Android 機のセットアップには Google アカウントが絶対に必要とか。&lt;/p&gt;
&lt;p&gt;今回の記事を書かれた yomoyomo さんにはご愁傷さまとしか言いようがないが，私としてはこれを好機として自宅環境を見直すとしようか。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20220808/pc-crash&#34;&gt;恥さらし文章「ある「パソコンの大先生」の死」に寄せられたありがたいコメントの数々 - YAMDAS現更新履歴&lt;/a&gt; : ブログの退潮&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0855LMP81?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/31Jy8IwFHwL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0855LMP81?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Synology NASキット 2ベイ DS220j クアッドコアCPU 512MBメモリ搭載 ライトユーザー向け 国内正規代理店品 電話サポート対応品 DiskStation&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Synology (Release 2020-03-12)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B0855LMP81 (ASIN), 4537694279369 (EAN), 0846504003440 (EAN), 846504003440 (UPC)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.dospara.co.jp/&#34;&gt;ドスパラ&lt;/a&gt;で HDD 2基と3点セットで購入。家庭内 LAN で使うなら必要十分な性能。各種クラウド・ストレージ・サービスと連携可能。 Tailscale を含む各種 VPN と組み合わせることも可能。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-10-26&#34;&gt;2021-10-26&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Synology DS220j --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B08V8LNR2H?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41&amp;#43;wOkdJItL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B08V8LNR2H?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Western Digital ウエスタンデジタル 内蔵 HDD WD Red Plus NAS RAID (CMR) 3.5インチ WD40EFZX-EC 【国内正規代理店品】&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ウエスタンデジタル(Western Digital) (Release 2021-02-05)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B08V8LNR2H (ASIN), 4988755057738 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.synology.com/ja-jp/products/DS220j&#34;&gt;Synology DS220j&lt;/a&gt; と併せて購入。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-10-26&#34;&gt;2021-10-26&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- HDD WD Red Plus --&gt;
</content>
	</entry><entry>
		<title>「俺が正義だ！」</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/01/mining-codes/" />
		<id>tag:text.Baldanders.info,2022-01-22:/remark/2022/01/mining-codes/</id>
		<published>2022-01-22T04:24:25+00:00</published>
		<updated>2022-01-22T23:14:33+00:00</updated>
		<summary>今回の判決文はなかなか面白いので，特に職業エンジニアの方は読んでおくことをおすすめする。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/28-stories/#gray&#34; title=&#34;サイトオーナーがページの広告掲載の代わりにマイニング・コードを仕込むのはヤクザの「みかじめ料」と同じ&#34;&gt;4年前&lt;/a&gt;にもちょろんと言及しているので，今回も一応言及しておこう。&lt;/p&gt;
&lt;p&gt;例の裁判は最高裁による最終判断が出たようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.courts.go.jp/app/hanrei_jp/detail2?id=90869&#34;&gt;令和2(あ)457 不正指令電磁的記録保管被告事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://www.courts.go.jp/app/files/hanrei_jp/869/090869_hanrei.pdf&#34;&gt;判決文 &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Coinhive が提供する mining code による計算資源搾取は，当時は大騒ぎになったが，今ではブラウザ自身が拒否できるようになった（どこまで効くかは分からないけどw）。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./firefox-settings.png&#34;&gt;&lt;img src=&#34;./firefox-settings.png&#34; srcset=&#34;./firefox-settings.png 676w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Firefox のセキュリティ設定例&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./firefox-settings.png&#34;&gt;Firefox のセキュリティ設定例&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;今は「&lt;a href=&#34;https://ascii.jp/elem/000/004/070/4070140/&#34; title=&#34;ASCII.jp：ネットワークに特化したIPUのMount Evansでシェア拡大を狙うインテル　インテル CPUロードマップ (1/3)&#34;&gt;インフラ処理でCPUを使ったら負け&lt;/a&gt;」などと言われる時代である。
それだけ CPU/GPU 計算資源は価値が高いのだ。
もちろん，それを駆動する&lt;a href=&#34;https://nextmoney.jp/?p=46494&#34; title=&#34;ロシアとウクライナが違法なマイニング施設を閉鎖| NEXTMONEY｜仮想通貨メディア&#34;&gt;電力&lt;/a&gt;もね。&lt;/p&gt;
&lt;p&gt;一方で，こう言っちゃあなんだが，日本は法治国家ではなく，刑罰に於ける法執行は基本的に「見せしめ主義」だ。
何故なら全国民や全法人に対して法を厳密に執行したら罪人や違反者で溢れかえってしまうから。
故に「&lt;a href=&#34;https://dic.nicovideo.jp/a/%E3%83%90%E3%83%AC%E3%81%AA%E3%81%8D%E3%82%83%E7%8A%AF%E7%BD%AA%E3%81%98%E3%82%83%E3%81%AA%E3%81%84%E3%82%93%E3%81%A7%E3%81%99%E3%82%88&#34;&gt;バレなきゃ犯罪じゃないんですよ&lt;/a&gt;」みたいな名言も生み出すことになる（笑）&lt;/p&gt;
&lt;p&gt;しかも日本人は何故か「&lt;ruby&gt;&lt;rb&gt;私刑&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;ざまぁ&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;」に寛容で，積極的に行う輩すらいる野蛮国家である。
日本の法システムは壊れていると言ってもいいかもしれない。&lt;/p&gt;
&lt;p&gt;今回の裁判は最高裁判決文の以下の文言に集約されていると言ってもいいだろう。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;原判決は，不正指令電磁的記録の解釈を誤り，その該当性を判断する際に考慮すべき事情を適切に考慮しなかったため，重大な事実誤認をしたものというべきであり，これらが判決に影響を及ぼすことは明らかであって，原判決を破棄しなければ著しく正義に反すると認められる&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.courts.go.jp/app/files/hanrei_jp/869/090869_hanrei.pdf&#34;&gt;判決文&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ここで「原判決」というのは二審の有罪判決を指すが，遠回しに警察の所業も指していると解釈している。
どこぞのガンダムよろしく「俺が正義だ！」とばかりに法解釈を歪めて相手を陥れるというのは，勧善懲悪な時代劇ならスカッとするかもしれないが，リアルでやったら恐怖政治そのものだ。&lt;/p&gt;
&lt;p&gt;個人的には今回の最高裁判決文は妥当なものと納得している。
その上で改めて「&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/28-stories/#gray&#34;&gt;サイトオーナーがページの広告掲載の代わりにマイニング・コードを仕込むのはヤクザの「みかじめ料」と同じ&lt;/a&gt;」であると主張しておこう。&lt;/p&gt;
&lt;ruby&gt;&lt;rb&gt;閑話休題&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;それはさておき&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;
&lt;p&gt;今回の&lt;span&gt;&lt;a href=&#34;https://www.courts.go.jp/app/files/hanrei_jp/869/090869_hanrei.pdf&#34;&gt;判決文 &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; はなかなか面白いので，特に職業エンジニアの方は読んでおくことをおすすめする。&lt;/p&gt;
&lt;p&gt;今回の最高裁判決文のポイント（判示事項）は2つあるそうで&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;刑法１６８条の２第１項にいう「その意図に沿うべき動作をさせず，又はその意図に反する動作をさせるべき不正な指令を与える電磁的記録」に当たるか否かの判断方法&lt;/li&gt;
&lt;li&gt;ウェブサイトの閲覧者の同意を得ることなくその電子計算機を使用して仮想通貨のマイニングを行わせるプログラムコードが不正指令電磁的記録に当たらないとされた事例&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.courts.go.jp/app/hanrei_jp/detail2?id=90869&#34;&gt;令和2(あ)457 不正指令電磁的記録保管被告事件&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;この中の「意図に反する動作」と「不正な指令」がキーワードになっているのが分かるだろう。
この2つについて判決文には&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;すなわち，反意図性は，当該プログラムについて&lt;strong&gt;一般の使用者が認識すべき動作と実際の動作が異なる場合&lt;/strong&gt;に肯定されるものと解するのが相当であり，一般の使用者が認識すべき動作の認定に当たっては，当該プログラムの動作の内容に加え，プログラムに付された名称，動作に関する説明の内容，想定される当該プログラムの利用方法等を考慮する必要がある。&lt;/p&gt;
&lt;p&gt;また，不正性は，電子計算機による情報処理に対する社会一般の信頼を保護し，&lt;strong&gt;電子計算機の社会的機能を保護するという観点から，社会的に許容し得ないプログラム&lt;/strong&gt;について肯定されるものと解するのが相当であり，その判断に当たっては，当該プログラムの動作の内容に加え，その動作が電子計算機の機能や電子計算機による情報処理に与える影響の有無・程度，当該プログラムの利用方法等を考慮する必要がある。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.courts.go.jp/app/files/hanrei_jp/869/090869_hanrei.pdf&#34;&gt;判決文&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;（強調は私がやりました）&lt;/p&gt;
&lt;p&gt;とアンダーライン付きで記されている（大事なことらしい）。
これを踏まえて&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;本件プログラムコードは，反意図性は認められるが，不正性は認められないため，不正指令電磁的記録とは認められない&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.courts.go.jp/app/files/hanrei_jp/869/090869_hanrei.pdf&#34;&gt;判決文&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;となったわけだ。
「反意図性」だけでは「不正指令電磁的記録」の要件を満たさないということだろう。
例えば，プログラムのバグや脆弱性を指して，いちいち「不正指令電磁的記録」などと訴訟を起こされては堪らないからな。&lt;/p&gt;
&lt;p&gt;実際，4年前に Coinhive の mining code が登場した当初から，これを malware (malicious software) と見なすかどうかには戸惑いがあった。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;しかし、現実としてはトレンドマイクロのウイルスバスターはCoinhiveをブロックしている。CoinhiveのJavaScriptが埋め込まれたWebサイトにアクセスすると、警告メッセージを表示してスクリプトの実行を止める。シマンテックなどほかのベンダーのセキュリティソフトも同様だ。&lt;br&gt;
マルウエアには当たらないが、好ましくない動作を行う可能性がある「グレーウエア」に分類されているためだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;http://itpro.nikkeibp.co.jp/atcl/column/14/346926/110801194/&#34;&gt;FinTech？マルウエア？無断でスマホCPU使う謎のサービス&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;もっとも今ではウイルス対策ツールにすら mining code が仕込まれる有様だけどね（笑）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://krebsonsecurity.com/2022/01/norton-360-now-comes-with-a-cryptominer/&#34;&gt;Norton 360 Now Comes With a Cryptominer – Krebs on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitaltrends.com/computing/no-easy-way-to-uninstall-norton-crypto/&#34;&gt;Once Opted Into Norton Crypto, You Can&amp;rsquo;t Easily Uninstall | Digital Trends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theregister.com/2022/01/05/norton_360_cryptominer_deletion/&#34;&gt;Yes, Norton 360 has a built in cryptominer. Deletion is easy • The Register&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2022/01/nortons-antivirus-product-now-includes-an-ethereum-miner.html&#34;&gt;Norton’s Antivirus Product Now Includes an Ethereum Miner - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回の最高裁判決文を読む限り「不正性」の証明はなかなかに難しい印象を受ける。
今後もこの境界を巡って法的な議論があるだろうが，&lt;ruby&gt;&lt;rb&gt;独善&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;孤独な正義&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;を振りかざして真っ当なエンジニアを陥れるのは勘弁していただきたいところである。&lt;/p&gt;
&lt;p&gt;一方で私は，エンジニアは「善を実装する者」であると認識している。
なにを以って「善」とするかは難しいところだが，この一点に於いて「&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/hacker-ethic/&#34;&gt;エンジニアこそ『狂狷の徒』たれ&lt;/a&gt;」と思うのである。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;理学は、真理の探究であり、工学は善の実現である。そして、藝術は美の表現である－－これで所謂「真美善」が揃う&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4344980158?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;はやぶさ―不死身の探査機と宇宙研の物語&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;おあとがよろしいようで &lt;abbr class=&#34;emoji-chars&#34; title=&#34;ペコン&#34;&gt;&amp;#x1f647;&lt;/abbr&gt;&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bengo4.com/c_1009/n_14033/&#34;&gt;コインハイブ事件の有罪判決、破棄自判で「無罪」に　最高裁 - 弁護士ドットコム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hillelwayne.com/post/are-we-really-engineers/&#34;&gt;Are We Really Engineers? • Hillel Wayne&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01ESA9R5Q?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51N0NM5gtrL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B01ESA9R5Q?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;機動戦士ガンダム00　ファーストシーズン&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;宮野真守 (出演), 三木眞一郎 (出演), 吉野裕行 (出演), 神谷浩史 (出演), 本名陽子 (出演), 松本保典 (出演), 真堂圭 (出演), 高垣彩陽 (出演), 佐藤有世 (出演), 東地宏樹 (出演), 我妻正崇 (出演), 中村悠一 (出演), 浜田賢二 (出演), 入野自由 (出演), 斎藤千和 (出演), 恒松あゆみ (出演), 石塚運昇 (出演), 小笠原亜里沙 (出演), 藤原啓治 (出演), 古谷徹 (出演), 水島精二 (監督), --- (プロデュース)&lt;/dd&gt;
    &lt;dd&gt; (Release 2016-04-28)&lt;/dd&gt;
    &lt;dd&gt;Prime Video&lt;/dd&gt;
    &lt;dd&gt;B01ESA9R5Q (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「俺がガンダムだ」&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-01-22&#34;&gt;2022-01-22&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 機動戦士ガンダム00 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07K356C43?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ENgxWO4IL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B07K356C43?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Another colony&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;TRUE (メインアーティスト)&lt;/dd&gt;
    &lt;dd&gt;Lantis 2018-11-07 (Release 2018-11-07)&lt;/dd&gt;
    &lt;dd&gt;MP3 ダウンロード&lt;/dd&gt;
    &lt;dd&gt;B07K356C43 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「転生したらスライムだった件」第1期 ED 曲。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-01-22&#34;&gt;2022-01-22&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 転スラ Another Colony --&gt;
</content>
	</entry><entry>
		<title>CC Licenses を悪用した新手の著作権トロルについて</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/01/new-copyright-trolls/" />
		<id>tag:text.Baldanders.info,2022-01-05:/remark/2022/01/new-copyright-trolls/</id>
		<published>2022-01-05T12:23:50+00:00</published>
		<updated>2022-02-11T10:22:15+00:00</updated>
		<summary>このリスクを事前に回避したいのであれば「クレジットを明記する」に限る。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;いつものように yomoyomo さんの記事から：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://onezero.medium.com/beware-the-copyleft-trolls-a8b85c66b7eb&#34;&gt;Beware the Copyleft Trolls | by Chip Stewart | OneZero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3844180&#34;&gt;Rise of the Copyleft Trolls: When Photographers Sue After Creative Commons Licenses Go Awry by Daxton Stewart :: SSRN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20220105/copyleft-trolls&#34;&gt;著作権トロールの新種としての「コピーレフト・トロール」 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この記事に Twitter で脊髄反射したときは内容を誤解してたので，改めて簡単に紹介しておく。&lt;/p&gt;
&lt;p&gt;現在，最新の CC Licenses 4.0 では，ライセンスの被許諾者が条件に違反した場合の措置について以下のように書いている。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;p id=&#34;s6&#34;&gt;&lt;strong&gt;第6条　期間および終了&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&#34;a&#34;&gt;
&lt;li id=&#34;s6a&#34;&gt;本パブリック・ライセンスは、ここでライセンスされた著作権およびそれに類する権利が有効な期間、適用されます。しかし、もしあなたが本パブリック・ライセンスに違反すると、本パブリック・ライセンスに定めるあなたの権利は自動的に終了します。&lt;/li&gt;
&lt;li id=&#34;s6b&#34;&gt;
&lt;p&gt;ライセンス対象物をあなたが利用する権利が&lt;a href=&#34;#s6a&#34;&gt;第6条(a)&lt;/a&gt;の事由により終了した場合でも：&lt;/p&gt;
&lt;ol&gt;
&lt;li id=&#34;s6b1&#34;&gt;あなたが違反を発見してから30日以内に違反を是正した場合に限り、違反を是正したその日に、自動的に復活します。または、&lt;/li&gt;
&lt;li id=&#34;s6b2&#34;&gt;許諾者により権利の復活を明示された場合に、復活します。&lt;/li&gt;
&lt;/ol&gt;
誤解を避けるために記すと、&lt;a href=&#34;#s6b&#34;&gt;本第6条(b)&lt;/a&gt;は、許諾者が、あなたの本パブリック・ライセンスに関する違反に対する救済を求めるために有するであろういかなる権利にも影響を及ぼしません。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ (Creative Commons) — 表示 4.0 国際 — CC BY 4.0&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;この30日の猶予期間は 4.0 になってから付加されたもので，それより前のバージョンには書かれていない。
たとえば，写真共有サービスの &lt;a href=&#34;https://www.flickr.com/&#34;&gt;Flickr&lt;/a&gt; では公開した写真に CC Licenses を付与できるが，そのバージョンは 2.0 であり “Termination” の条項には以下のように書かれているのみだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;7. Termination&lt;/strong&gt; &lt;/p&gt;
&lt;ol type=&#34;a&#34;&gt;
&lt;li&gt;
This License and the rights granted hereunder will terminate automatically upon any breach by You of the terms of this License. Individuals or entities who have received Derivative Works or Collective Works from You under this License, however, will not have their licenses terminated provided such individuals or entities remain in full compliance with those licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any termination of this License.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by/2.0/legalcode&#34;&gt;Creative Commons Legal Code -- Attribution 2.0&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;いわゆる「著作権トロル」はバージョン間のこの差異を悪用して善良でうっかりな利用者から金を巻き上げているらしい。
具体的には&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;I became interested in this topic because it happened to me — or at least, to people I try to help, the students in the non-profit online news publication here at my university. A student posted a stock image from a German photographer named Marco Verch that was under a CC-BY (version 2.0) license. They used it as a thumbnail to link to a news story without the attribution. Months later, they got a demand letter requesting $750 to retroactively license the photo, ending with the line, “failure to resolve this matter of unlicensed use within 21 days will result in escalation to one of our partner attorneys for legal proceedings.”&lt;/p&gt;
&lt;p&gt;I checked and, indeed, Verch had filed dozens of lawsuits in U.S. federal courts in recent years, including 41 cases in 2019 and 2020 alone. He employed Pixsy, a company that aids photographers in extracting cash from users who posted their photos online. Pixsy, in the demand letter, noted that taking the photo down or correcting the attribution wasn’t enough: “Removal of the image from your website does not resolve the period of unlicensed use, and it remains that our client be compensated for the previous use of their work.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://onezero.medium.com/beware-the-copyleft-trolls-a8b85c66b7eb&#34;&gt;Beware the Copyleft Trolls&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;という感じ。
訴えられてからクレジットを追記したり該当の写真を削除しても「掲載した期間の損害分を払いやがれ！」と迫るわけだ。&lt;/p&gt;
&lt;p&gt;ただ，実際に裁判まで行っても賠償金を払うとは限らないようで&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Courts are also suggesting that Philpot doesn’t suffer economic harm because his photos have no value outside of litigation; he once testified that he had made “tens of thousands of dollars” from his Willie Nelson photo, but admitted that it was entirely from “settlements he had extracted” for failing to attribute under the CC-BY license. As Western District of Texas Judge Andrew Austin noted in a 2019 case, Philpot “is more in the business of litigation (or threatening litigation) than selling his product or licensing his photograph to third parties” who “seems to want to use the courts as a blunt object with which to coerce nuisance value settlements from unsuspecting parties.”&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://onezero.medium.com/beware-the-copyleft-trolls-a8b85c66b7eb&#34;&gt;Beware the Copyleft Trolls&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と書かれている。
公正な利用（fair use）として回避できるものもあるということだ。
“his photos have no value outside of litigation” の部分でバカウケしてしまったよ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;In the paper, I look at three issues in particular: (1) expansive fair use arguments courts are entertaining to make copyright litigation harder for copyleft trolls like Philpot; (2) the limited damages courts are awarding in these cases; and (3) the general distaste they express for this kind of litigation. In short, courts are finding “transformative purposes” by secondary users (instead of “transformative uses”) under the first factor of the fair use analysis, and they are finding little to no economic harm under the fourth factor, expressing skepticism that lack of attribution is the equivalent of financial loss, thus requiring Philpot and his ilk to make a more robust showing on the record of actual economic harm outside of nuisance lawsuits. Courts are also pushing back at automatic awards of attorney fees when Philpot has won his infringement lawsuits, finding enough merit in defendants’ fair use claims that they do not want to deter such arguments in the future.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://onezero.medium.com/beware-the-copyleft-trolls-a8b85c66b7eb&#34;&gt;Beware the Copyleft Trolls&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;このリスクを事前に回避したいのであれば「クレジットを明記する」に限る。
もしクレジットを書く余白がないのであればクレジットが明記されている URI を指示するだけでもいい。
たとえば &lt;a href=&#34;https://www.flickr.com/&#34;&gt;Flickr&lt;/a&gt; なら写真が掲載されているページに全ての情報が表示されている。&lt;/p&gt;
&lt;p&gt;あとは SaaS の運営者側がとっとと 4.0 にアップグレードしてくれることを祈る。
今回は「写真」だったけど，たとえば Wikipedia 上のコンテンツにだって同様のリスクがある。
Wikipedia の内容をそのままパクって論文に掲載している学生は多そうだ（笑）&lt;/p&gt;
&lt;p&gt;yomoyomo さんも&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20220105/copyleft-trolls&#34; title=&#34;著作権トロールの新種としての「コピーレフト・トロール」 - YAMDAS現更新履歴&#34;&gt;苦言&lt;/a&gt;を呈しておられるが “Copyleft Trolls” という言い回しは止めたほうがいいんじゃないかなぁ。
キャッチーな名前が横滑りして元々の意味が乖離してしまう現象にはウンザリである。
たとえば&lt;a href=&#34;https://community.norton.com/en/blogs/product-service-announcements/introducing-norton-crypto&#34; title=&#34;Introducing Norton Crypto! | Norton Community&#34;&gt;ノートン先生まで Crypto を某デジタル資産の意味で使い始めてる&lt;/a&gt;みたいで，ホンマ &lt;code&gt;orz&lt;/code&gt; な気分だよ。&lt;/p&gt;
&lt;h2&gt;余談だが&amp;hellip;&lt;/h2&gt;
&lt;p&gt;私が勘違いしたのは CC Licenses 1.0 から 2.0 あたりで議論になったいわゆる「Creative Commons 実施権」である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://k.lenz.name/j/r/CC.pdf&#34;&gt;著作権と Creative Commons 実施権 &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし，これはライセンスの（被許諾者ではなく）許諾者側のリスクの話。
ちなみに「Creative Commons 実施権」に絡む条項は 4.0 ではまるっと削除されている。
また日本版 2.1 にも存在しない。&lt;/p&gt;
&lt;p&gt;いやぁ，私の英語不得手っぷりがまたもや露呈してしまいましたねぇ。
とほほ&amp;hellip;&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://doctorow.medium.com/a-bug-in-early-creative-commons-licenses-has-enabled-a-new-breed-of-superpredator-5f6360713299&#34;&gt;A Bug in Early Creative Commons Licenses Has Enabled a New Breed of Superpredator | by Cory Doctorow | Jan, 2022 | Medium&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/cc-licenses/&#34;&gt;改訂3版： CC Licenses について&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2015/cc-by-sa-4-now-one-way-compatible-with-gplv3/&#34;&gt;CC BY-SA 4.0 now one-way compatible with GPLv3&lt;/a&gt; : CC Licenses のうち GNU GPL (copyleft) と互換であると認められているのは BY-SA 4.0 のみである&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/475710152X?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41WPNBY7HZL._SL160_.jpg&#34; width=&#34;110&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/475710152X?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;クリエイティブ・コモンズ―デジタル時代の知的財産権&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;レッシグ,ローレンス (著), 敬士, 椙山 (著), 圭介, 上村 (著), 紘一郎, 林 (著), 絵美, 若槻 (著), 大洋, 土屋 (著), クリエイティブコモンズジャパン (編集), Lessig,Lawrence (原著)&lt;/dd&gt;
    &lt;dd&gt;NTT出版 2005-03-01&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;475710152X (ASIN), 9784757101524 (EAN), 475710152X (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;残念ながら紙の本は実質的に絶版なんですよねぇ。是非デジタル化を希望します。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-08-02&#34;&gt;2014-08-02&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- クリエイティブ・コモンズ―デジタル時代の知的財産権 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4641243336?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51LanI5bgAL._SL160_.jpg&#34; width=&#34;117&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4641243336?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;著作権法 第3版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;中山 信弘 (著)&lt;/dd&gt;
    &lt;dd&gt;有斐閣 2020-09-04&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4641243336 (ASIN), 9784641243330 (EAN), 4641243336 (ISBN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;第3版が出てた。第2版は図書館で借りて読んだが，途中でギブアップした。個人が興味本位で読める本ではないらしい（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-10-12&#34;&gt;2020-10-12&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 著作権法 第3版 --&gt;
</content>
	</entry><entry>
		<title>安全なデジタルライフのために</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/11/securing-our-digital-life/" />
		<id>tag:text.Baldanders.info,2021-11-14:/remark/2021/11/securing-our-digital-life/</id>
		<published>2021-11-14T07:12:34+00:00</published>
		<updated>2021-11-21T04:44:47+00:00</updated>
		<summary>例によって Bruce Schneier 先生の記事経由なのだが，なかなか面白かったので，かいつまんで紹介してみる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;例によって &lt;a href=&#34;https://www.schneier.com/blog/archives/2021/11/advice-for-personal-digital-security.html&#34; title=&#34;Advice for Personal Digital Security - Schneier on Security&#34;&gt;Bruce Schneier 先生の記事&lt;/a&gt;経由なのだが，なかなか面白かったので，かいつまんで紹介してみる。&lt;/p&gt;
&lt;p&gt;ちなみに私は「安心」を主観評価，「安全」を量的評価として区別している。
この記事では項目を列挙するだけに留めているが，本来はこの先に「量的評価」が存在する，という点を踏まえて読んでいただければ幸いである。
リスクは系全体で最小となるよう配分すべきである。&lt;/p&gt;
&lt;h2&gt;携帯端末について&lt;/h2&gt;
&lt;p&gt;まずは前半の記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics | Ars Technica&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;携帯端末は常に紛失・盗難のリスクがつきまとう。
紛失・盗難が起きないよう気をつけることはもちろんだが，万一そうなった場合でも最小限の被害で済むよう備えておく必要がある。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;First, if you’re not at home, you should always lock your device before you put it down, no exceptions. Your phone should be locked with the most secure method you’re comfortable with—as long as it’s not a 4-digit PIN, which isn’t exactly useless but is definitely adjacent to uselessness. For better security, use a password or a passcode that’s at least six characters long—and preferably longer. If you’re using facial recognition or a fingerprint unlock on your phone, this shouldn’t be too inconvenient&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;きょうび PIN コードは6桁なんよねー。
携帯端末のアンロックが6桁なのに，いまだ銀行 ATM の暗証番号が4桁なのは何故だろう（笑）&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Second, set your device to require a password immediately after it’s been locked. Delays mean someone who snatches your phone can get to your data if they bring up the screen in time&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;えっ，最近のケータイってそんな要らん機能があるの？ 困るなぁ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Additionally, make sure your device is set to erase its contents after 10 bad password attempts at maximum. This is especially important if you haven’t set a longer passcode&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これは，そうだね。
心配なら&lt;a href=&#34;https://text.baldanders.info/remark/2021/10/glossary-about-face/&#34; title=&#34;「顔」に関する用語集&#34;&gt;顔認識（facial recognition）&lt;/a&gt;や指紋を使ったアンロックを普段使いにする手もある。&lt;/p&gt;
&lt;p&gt;端末の紛失・盗難に備えてバックアップもしとけよ，って話だが&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Also, regularly back up your phone. The safest way to back up data if you’re concerned about privacy is an encrypted backup to your personal computer; however, most iOS device owners can back up their data to iCloud with confidence that it is end-to-end encrypted (as long as they have iOS 13 or later)&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とか書いてあるけど &lt;a href=&#34;https://text.baldanders.info/remark/2021/08/apples-mass-surveillance-plans/&#34; title=&#34;Apple 監視社会化計画（裏口を穿つ）&#34;&gt;iCloud へのバックアップは（プライバシー的には）安全とは言えない&lt;/a&gt;からね。
私みたいに &lt;a href=&#34;https://text.baldanders.info/remark/2021/10/nas/&#34; title=&#34;秋 NAS は俺に喰わせろ！&#34;&gt;NAS 経由でクラウド・ストレージとの間でデータ暗号化&lt;/a&gt;する手もあるが&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，あまり一般的じゃないよねぇ。
一番いいのは，メールにせよ写真にせよ動画にせよ，プライバシー的にヤバいものはケータイで扱わないことやね。
その上でクラウド・ストレージなりにバックアップしましょう，と。&lt;/p&gt;
&lt;p&gt;携帯端末の OS を最新にしましょうという話。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Along the same lines, make sure you have installed the most recent version of the phone OS available to prevent someone from taking advantage of known security bypasses&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これに続いて &lt;q lang=&#34;en&#34;&gt;For iOS, this is generally simple&lt;/q&gt; とあるが，私は OS のアップデートを渋る iPhone ユーザを結構知っている。
Apple は機能追加や変更のついでみたいにセキュリティ・アップデートを行うが，これによって端末動作に不具合が起きることがままあるからだ。
まぁ Android の場合はキャリアや端末機器メーカーがアップデートを渋る場合があるので，さらに質が悪いのだが（笑） セキュリティ・リスクを減らすために OS を最新に保ってほしいのなら，ユーザがそのように行動するよう工夫すべきだと思うけどね。&lt;/p&gt;
&lt;p&gt;これはいわゆる「野良アプリ」かな。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Side-loaded apps can also lead to security issues. Never side-load an app from an untrusted source or allow an iOS app that requires a “profile” to be installed on your device if the app isn’t one you’ve created or one provided to you by your employer’s mobile device management (MDM) platform&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;まぁ，これはそのとおり。
そして，こっちはアプリの「権限」の話。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;To mitigate such vulnerabilities via apps, regularly review the permissions that applications request from the device. […] Avoid apps with sketchy permission asks, and deny anything that seems like overreach—like when Facebook Messenger asks to be your SMS client and then logs all your phone calls to your Facebook account so it can find “friends” for you more efficiently. (Also, for the love of God, don’t use Facebook Messenger.) And if there are apps that you don’t use, delete them&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Facebook Messenger めった切りだな（笑） まぁ，私は随分前に Facebook Messenger は捨てたけど。&lt;/p&gt;
&lt;p&gt;次は， Wi-Fi や Bluetooth を点けっぱにすんなって話。ちょっと長いけど重要なのでそのまま挙げておく。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;Besides issues that arise from questionable app behavior, mobile devices can be vulnerable through normal functions like Wi-Fi or Bluetooth. Consider turning off Wi-Fi when you’re away from home. Your device may otherwise be constantly polling for the network SSIDs in its history to reconnect automatically or to connect to anything that looks like a carrier’s Wi-Fi network. When this happens, your device gives away information about networks you’ve seen and might allow a hostile network access point to connect. Also, your phone&amp;rsquo;s Wi-Fi MAC address could be used to fingerprint your device and track it. (Apple randomizes the MAC address of its iOS devices’ Wi-Fi adapters while scanning for networks—but if your home Wi-Fi network’s name is particularly memorable, that may not matter.) When your phone tells you to turn on Wi-Fi to improve location accuracy, ignore it.&lt;/p&gt;
&lt;p&gt;The same goes for Bluetooth. If your device has Bluetooth turned on, it’s broadcasting information that could identify it—and you. (I have demonstrated this to journalism classes by calling out students&amp;rsquo; names that I picked out from the default names of their iPhones.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これ，分かってるけどつい忘れちゃうんだよねぇ。
本当は移動中にワイヤレスのヘッドセットを付けるのも止めたほうがいいんだろうけど。&lt;/p&gt;
&lt;h2&gt;パソコンとか&lt;/h2&gt;
&lt;p&gt;パソコン OS や Web ブラウザの最新化は言わずもがなだろう。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;I have found several common themes when things go wrong; the biggest is that malware protection is frequently not up to date or, worse, is disabled. Even allowing Windows Defender to run in the background provides a significant bump in protection over nothing, and disabling it without a very good reason is a very bad idea&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;最低でも Windows Defender は有効にしておけ，ってことやね。&lt;/p&gt;
&lt;p&gt;このあと具体的な脅威が列挙されているが，それは本文を見てもらうとして&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;The basic fixes for these threats are straightforward but require some behavior modification. And one of the easiest behaviors to modify is how we browse the web. We need to treat this the same way we would a walk home in the dark—with extra, active attention to our surroundings&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と続く。
面倒な時代になったよねぇ。
Web ブラウジングについては以下のような緩和措置もある。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Another helpful trick for keeping laptops safe is using a privacy browser plugin such as the &lt;a href=&#34;https://privacybadger.org/&#34;&gt;EFF’s Privacy Badger&lt;/a&gt; and being very selective about which sites are allowed to use tracking cookies. This will reduce the threat of &lt;a href=&#34;https://news.sophos.com/en-us/2020/09/09/faking-it-the-thriving-business-of-fake-alert-web-scams/&#34;&gt;malicious ads&lt;/a&gt;&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;https://privacybadger.org/&#34;&gt;Privacy Badger&lt;/a&gt; 自体は昔からあるようで，以下の記事でも紹介されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gizmodo.jp/2020/09/untracking-browser-extensions.html&#34;&gt;監視されているウェブ閲覧の足跡、ブラウザ拡張機能で対策を | ギズモード・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/privacy/3425&#34;&gt;Doxxing（晒し）からあなたを守るための手引き | P2Pとかその辺のお話R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;単純な広告ブロックではない点がポイントかな。
んー， Android 端末の Firefox でしばらく使ってみようかな。&lt;/p&gt;
&lt;p&gt;そして更に以下に続く。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Another easy way to minimize threats to your PC, first and foremost, is running the most recent fully updated version of the operating system of your choice. I’m not going to advocate for any particular flavor of operating system here, but if you’re on an older release of any OS and connected to the Internet, you’re increasing your risk of compromise. Turn on automatic updates and leave them on. When an update is pending, stop what you’re doing and install it immediately. Yes, this can often be inconvenient. Welcome to the modern world of malware. Suck it up and install your updates or risk compromise. (This applies to your web browser, too—stop putting off that Chrome update prompt and do it right now.)&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;今世紀に入って可用性（availablity）へのインパクトがセキュリティ・リスクとして取り上げられるようになって，迂闊に「すぐに更新しろ」とか言えなくなってしまったが，個人で使ってる携帯端末やパソコンは&lt;strong&gt;可及的速やかに&lt;/strong&gt;更新するという考え方でいいだろう。
アップデートは計画的に。&lt;/p&gt;
&lt;p&gt;パソコンも携帯端末と同じようにちゃんとパスワードロックしておけよ，という話。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Just as a phone’s solid unlock password prevents data theft, the same is true of enabling password or PIN protection on your notebook computer for sleep mode. When traveling in high-risk areas like airports, power-down your computer when it’s not in use so that the risk of someone playing “&lt;a href=&#34;https://en.wikipedia.org/wiki/Evil_maid_attack&#34;&gt;Evil Maid&lt;/a&gt;” or surreptitiously gaining access in some other physical way is reduced&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;“&lt;a href=&#34;https://en.wikipedia.org/wiki/Evil_maid_attack&#34;&gt;Evil maid attack&lt;/a&gt;” なんてな名前があるのか。
知らんかった（笑）&lt;/p&gt;
&lt;p&gt;パスワード・マネージャについても言及されている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;And, finally, use a password manager. An easy-to-guess password renders all other security efforts moot. Whether it’s a password built into your web browser of choice or a standalone program, use one. Chrome, Firefox, and Safari all have reasonably secure password managers, and you can replicate passwords for web accounts across devices. If you don’t like the idea of a password manager because you’re one of those folks who just uses letmein123! as your password everywhere, you need to decide if the convenience is worth the price you’ll eventually pay when you’re compromised. (Spoiler alert: it’s not.)&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/features/2021/10/securing-your-digital-life-part-1/&#34;&gt;Securing your digital life, part one: The basics&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;この辺は改めて言うことはない。
「&lt;a href=&#34;https://baldanders.info/blog/000739/&#34; title=&#34;「パスワードを覚える」なんて脳みその無駄遣い — Baldanders.info&#34;&gt;パスワードを覚えるなんて脳みその無駄遣い&lt;/a&gt;」である。&lt;/p&gt;
&lt;h2&gt;情報管理の Best Practices&lt;/h2&gt;
&lt;p&gt;それでは後半の記事を見てみよう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2021/10/securing-your-digital-life-part-2/&#34;&gt;Securing your digital life, part two: The bigger picture—and special circumstances | Ars Technica&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初のほうでは “These are some best practices to consider” として箇条書されている。
見出しだけ抜き出して番号をつけてみよう。&lt;/p&gt;
&lt;div lang=&#34;en&#34;&gt;&lt;ol&gt;
&lt;li&gt;Use a password manager that generates strong passwords you don’t have to remember.&lt;/li&gt;
&lt;li&gt;When possible, use two-factor or multi-factor authentication (&amp;ldquo;2FA&amp;rdquo; or &amp;ldquo;MFA&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;Set up a separate email address or email alias for your high-value web accounts so that all email regarding them is segmented off from your usual email address.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re a US resident, make sure to &lt;a href=&#34;https://www.irs.gov/payments/view-your-tax-account&#34;&gt;claim an account for your Social Security number&lt;/a&gt; from the IRS for tax information access and other purposes.&lt;/li&gt;
&lt;li&gt;Register for account breach checkups, either through the service provided through your browser (Firefox or Chrome) or through Troy Hunt’s &lt;a href=&#34;https://haveibeenpwned.com/&#34;&gt;haveIbeenpwned.com&lt;/a&gt; (or both!).&lt;/li&gt;
&lt;li&gt;Consider locking your credit reports to reduce identity theft risks.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;p&gt;4番目は分かりにくいが，以下の記事が参考になるかも知れない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://krebsonsecurity.com/2018/06/plant-your-flag-mark-your-territory/&#34;&gt;Plant Your Flag, Mark Your Territory —  Krebs on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;つまり，なりすましなどに遭う前に「旗を立て」て証明しろというわけだ。
日本で類似の話としては JP の「e転居」を悪用した事例がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/07/17/174628&#34;&gt;日本郵便のe転居を悪用したストーカー事件についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁ，これは「e転居」の仕組みが ad hoc 過ぎるのが問題だと思うが。&lt;/p&gt;
&lt;p&gt;これで連想するのが日本の「個人番号カード」だ。
今はあまり表面化してないが，日本政府が無駄にを推進しようとしているせいで今後「個人番号カード」そのものがセキュリティ・リスクになると思う。&lt;/p&gt;
&lt;p&gt;今からでも「個人番号カード」を取得しようという人は「とっとと手続きしなはれ」と言えばいいが，特に年寄りは「個人番号カードなんか分からんし使いこなせん」と思う人もいると思う。
私は役所に「絶対に個人番号カードを発行しない」手続きを行える仕組みを提案したい。&lt;/p&gt;
&lt;h2&gt;2要素認証で不十分なとき&lt;/h2&gt;
&lt;p&gt;“When 2FA is not enough” については似た話を&lt;a href=&#34;https://text.baldanders.info/remark/2021/11/out-of-band-devices/&#34; title=&#34;それはワンタイム・パスワードの問題ではない&#34;&gt;先日書いた&lt;/a&gt;ので，今回は割愛する。&lt;/p&gt;
&lt;h2&gt;公衆への暴露&lt;/h2&gt;
&lt;p&gt;標的型攻撃の（文字通り）ターゲットにならないようにするには個人活動の露出を抑える必要がある。
これも箇条書きにして抜き出しておこう。&lt;/p&gt;
&lt;div lang=&#34;en&#34;&gt;&lt;ol&gt;
&lt;li&gt;don’t post unredacted pictures of driver&amp;rsquo;s licenses, vaccination cards, credit cards, passports, or other documents with PII on social media.&lt;/li&gt;
&lt;li&gt;Lock down access to your social media accounts with 2FA and unique, strong passwords to prevent &amp;ldquo;brute force&amp;rdquo; breaches and &amp;ldquo;password reuse&amp;rdquo; hacks.&lt;/li&gt;
&lt;li&gt;On Facebook, set the default privacy for posts to “friends only.&amp;quot;&lt;/li&gt;
&lt;li&gt;Do not use “precise location” information on posts that can be used to locate you in realtime.&lt;/li&gt;
&lt;li&gt;Don’t post pictures with your home address or other identifying information about your residence clearly visible.&lt;/li&gt;
&lt;li&gt;Don’t drop personal email addresses or phone numbers into public online conversations.&lt;/li&gt;
&lt;li&gt;Don’t allow dating apps, ride-sharing apps, or any other apps that use your location data to collect that data while you’re not actively using them.&lt;/li&gt;
&lt;li&gt;If you are sending your location to someone in one of these apps, make sure it is a public place and that a friend or family member is in sight of that location, or at least knows to check in with you shortly after the appointed meeting time.&lt;/li&gt;
&lt;li&gt;Never take a conversation in one app over to another—say, from a dating app to WhatsApp—before you’ve met a person in person and feel safe.&lt;/li&gt;
&lt;li&gt;Be aware of links sent in Facebook Messenger and of friend requests claiming to be from people you already know—but coming from new accounts.&lt;/li&gt;
&lt;li&gt;Don’t download and run anything from Discord without a malware scan.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;p&gt;実はこのあとオチがあって&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Or, instead of trying to follow all these suggestions, you could mitigate this entire category of risks by never using social media again&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2021/10/securing-your-digital-life-part-2/&#34;&gt;Securing your digital life, part two: The bigger picture—and special circumstances&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と結んでいる。
いや，まぁ，それはそうだけどさ（笑）&lt;/p&gt;
&lt;h2&gt;特殊ケース&lt;/h2&gt;
&lt;p&gt;最後に “Special cases” として VPN (Virtual Private Network) や暗号化コミュニケーションについて以下のように述べている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;But for everyday Internetting, you just don’t need VPNs that much anymore. Transport Layer Security now encrypts a vast majority of Internet traffic, and it’s unlikely that someone is going to grab your credit card data or other personal information off a public Wi-Fi network.&lt;/p&gt;
&lt;p&gt;The same is true of the Tor protocol for anonymizing Internet traffic—odds are you won’t need it daily, but there are times when it’s good to have. Tor and VPNs are most useful when you&amp;rsquo;re outside of your home and on a potentially hostile network (or on the Internet in a potentially hostile country).&lt;/p&gt;
&lt;p&gt;You’ll also want Tor or a VPN in situations where you’re on a network that has a TLS proxy that breaks traditional HTTPS encryption by using proxy certificates to decrypt traffic in the middle. At least in those scenarios, the worst that can happen is you can’t get an outbound connection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2021/10/securing-your-digital-life-part-2/&#34;&gt;Securing your digital life, part two: The bigger picture—and special circumstances&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;For encrypted and verified communications with another specific person, &lt;a href=&#34;https://signal.org/en/&#34;&gt;Signal&lt;/a&gt; is the current standard—it’s cross-platform and doesn’t even have an option for unencrypted storage or transmission of text and voice. Lesser-known platforms such as &lt;a href=&#34;https://keybase.io/&#34;&gt;Keybase&lt;/a&gt; and &lt;a href=&#34;https://wire.com/&#34;&gt;Wire&lt;/a&gt; offer encrypted text communications as well, but a full discussion of encrypted voice and text communications is a subject for another time&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2021/10/securing-your-digital-life-part-2/&#34;&gt;Securing your digital life, part two: The bigger picture—and special circumstances&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ところで，最後の “Peanut Butter Sandwich Anonymization Protocol” ちうのが分からんのだが，どなたか教えてください。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2021-11-15 追記】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/atsushieno/status/1459971971299479556&#34;&gt;Twitter で教えてもらった&lt;/a&gt;が “Peanut Butter Sandwich Anonymization Protocol” ってのは以下の話のことらしい？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thrillist.com/news/nation/couple-arrested-after-spreading-us-navy-secrets-via-a-peanut-butter-sandwich&#34;&gt;Couple Arrested After Spreading U.S. Navy Secrets Via a Peanut Butter Sandwich - Thrillist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;情報感謝！&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;【あとで整理するかも】&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2021/11/securing-your-digital-life-part-3/&#34;&gt;Securing your digital life, part three: How smartphones make us vulnerable | Ars Technica&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2021/11/securing-your-smartphone.html&#34;&gt;Securing Your Smartphone - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01MZGVHOA?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51T6PBdGbyL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B01MZGVHOA?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;超監視社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 池村 千秋 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;草思社 2016-12-13 (Release 2017-02-03)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01MZGVHOA (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-03-23&#34;&gt;2019-03-23&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 超監視社会 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;ちなみに Synology NAS の Cloud Sync は iCloud に対応してない。まぁ iCloud は可能な限り使わんことやね。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
</feed>
