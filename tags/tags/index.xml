<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Tags - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/tags/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/tags/index.xml" />
	<id>tag:text.Baldanders.info,2016-02-05:/tags</id>
	<updated>2016-02-05T00:11:53+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.21</generator>

	
	<entry>
		<title>Struct タグについて - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/struct-tag/" />
		<id>tag:text.Baldanders.info,2016-02-05:/golang/struct-tag/</id>
		<published>2016-02-05T00:11:53+09:00</published>
		<updated>2017-03-18T14:32:28+09:00</updated>
		<summary>Struct で正規化できる情報であれば，タグを使うことでアプリケーション外部とのやり取りがずっと楽になる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; で構造化されている情報を特定のファイルやデータベースに出力したり，逆にファイルやデータベースの情報を &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; に流し込みたい場合に &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; の各フィールドに目印になる情報があると便利である。
この目印として機能するのが &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; タグである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:an&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:an&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; タグは以下のように記述する。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;By convention, tag strings are a concatenation of optionally space-separated key:&#34;value&#34; pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 &#39; &#39;), quote (U+0022 &#39;&#34;&#39;), and colon (U+003A &#39;:&#39;). Each value is quoted using U+0022 &#39;&#34;&#39; characters and Go string literal syntax.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/pkg/reflect/#example_StructTag&#34;&gt;reflect - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Server struct {
	Host      string `elem:&amp;quot;host&amp;quot;`
	IPAddress string `elem:&amp;quot;ip_address&amp;quot;`
	Port      int    `elem:&amp;quot;port&amp;quot;`
	Note      string `elem:&amp;quot;note&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このタグ情報を取得するには &lt;a href=&#34;https://golang.org/pkg/reflect/&#34; title=&#34;reflect - The Go Programming Language&#34;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; パッケージを使う。
たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;reflect&amp;quot;
)

type Server struct {
	Host      string `elem:&amp;quot;host&amp;quot;`
	IPAddress string `elem:&amp;quot;ip_address&amp;quot;`
	Port      int    `elem:&amp;quot;port&amp;quot;`
	Note      string `elem:&amp;quot;note&amp;quot;`
}

func main() {
	s := Server{}
	t := reflect.TypeOf(s)
	for i := 0; i &amp;lt; t.NumField(); i++ {
		field := t.Field(i)
		fmt.Printf(&amp;quot;Name=%s , tag(elem)=%s\n&amp;quot;, field.Name, field.Tag.Get(&amp;quot;elem&amp;quot;))
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行するとこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Name=Host , tag(elem)=host
Name=IPAddress , tag(elem)=ip_address
Name=Port , tag(elem)=port
Name=Note , tag(elem)=note
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際には &lt;a href=&#34;https://golang.org/pkg/reflect/&#34; title=&#34;reflect - The Go Programming Language&#34;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; を直接使う局面は少なく，既にあるパッケージを利用することが多い。
たとえば &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; による構造化データを &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; 形式に出力する &lt;a href=&#34;https://golang.org/pkg/encoding/json/&#34; title=&#34;json - The Go Programming Language&#34;&gt;&lt;code&gt;encoding/json&lt;/code&gt;&lt;/a&gt; パッケージがある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;encoding/json&amp;quot;
	&amp;quot;fmt&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot;`
}

func main() {
	s := Server{Host: &amp;quot;localhost&amp;quot;, IPAddress: &amp;quot;127.0.0.1&amp;quot;, Port: 8080, Note: &amp;quot;Web Application&amp;quot;}
	j, err := json.MarshalIndent(s, &amp;quot;&amp;quot;, &amp;quot;  &amp;quot;)
	if err != nil {
		return
	}
	fmt.Println(string(j))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行するとこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
  &amp;quot;ip_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
  &amp;quot;port&amp;quot;: 8080,
  &amp;quot;note&amp;quot;: &amp;quot;Web Application&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Server&lt;/code&gt; の内容が &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; 形式で出力されているのが分かるだろう。
&lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; の要素名がタグで指定した名前になっていることを確認してほしい。&lt;/p&gt;

&lt;p&gt;反対もやってみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;encoding/json&amp;quot;
	&amp;quot;fmt&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot;`
}

func main() {
	svr := []byte(`{
  &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
  &amp;quot;ip_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
  &amp;quot;port&amp;quot;: 8080,
  &amp;quot;note&amp;quot;: &amp;quot;Web Application&amp;quot;
}`)
	var s Server
	if err := json.Unmarshal(svr, &amp;amp;s); err != nil {
		return
	}
	fmt.Println(s)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果はこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{localhost 127.0.0.1 8080 Web Application}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;きれいに &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; に値が入っているのが分かると思う。&lt;/p&gt;

&lt;p&gt;ちなみにタグの書式は &lt;code&gt;key:&amp;quot;value&amp;quot;&lt;/code&gt; だが，間違って記述しても単に無視されるだけでコンパイル時も実行時もエラーにならないので注意が必要である。
なおタグ書式の文法ミスについては，静的検査ツールの &lt;a href=&#34;https://golang.org/cmd/vet/&#34; title=&#34;vet - The Go Programming Language&#34;&gt;vet&lt;/a&gt; でチェックできる。&lt;/p&gt;

&lt;p&gt;タグは複数列挙することができる。
たとえばサンプルの構造体を &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; にも対応させたいなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Server struct {
	Host      string `json:&amp;quot;host&amp;quot; toml:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot; toml:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot; toml:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot; toml:&amp;quot;note&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとする（デリミタは空白文字）。
じゃあ，先ほどと同じようにして &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; で出力してみる。
&lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; を扱うには &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;&lt;code&gt;github.com/BurntSushi/toml&lt;/code&gt;&lt;/a&gt; パッケージを使うとよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/BurntSushi/toml&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot; toml:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot; toml:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot; toml:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot; toml:&amp;quot;note,omitempty&amp;quot;`
}

func main() {
	s := Server{Host: &amp;quot;localhost&amp;quot;, IPAddress: &amp;quot;127.0.0.1&amp;quot;, Port: 8080, Note: &amp;quot;&amp;quot;}
	t := new(bytes.Buffer)
	if err := toml.NewEncoder(t).Encode(s); err != nil {
		return
	}
	fmt.Println(t.String())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host = &amp;quot;localhost&amp;quot;
ip_address = &amp;quot;127.0.0.1&amp;quot;
port = 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;omitempty&lt;/code&gt; オプションはフィールドが空（&lt;code&gt;nil&lt;/code&gt; または空文字列）の場合に出力を省略できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:oz&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:oz&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
このオプションは &lt;a href=&#34;https://golang.org/pkg/encoding/json/&#34; title=&#34;json - The Go Programming Language&#34;&gt;&lt;code&gt;encoding/json&lt;/code&gt;&lt;/a&gt; パッケージでも使える。&lt;/p&gt;

&lt;p&gt;ついでに反対もやってみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/BurntSushi/toml&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot; toml:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot; toml:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot; toml:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot; toml:&amp;quot;note,omitempty&amp;quot;`
}

func main() {
	svr := `
host = &amp;quot;localhost&amp;quot;
ip_address = &amp;quot;127.0.0.1&amp;quot;
port = 8080
note = &amp;quot;Web Application&amp;quot;
`
	var s Server
	if _, err := toml.Decode(svr, &amp;amp;s); err != nil {
		return
	}
	fmt.Println(s)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{localhost 127.0.0.1 8080 Web Application}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; で正規化できる情報であれば，タグ機能を使うことでアプリケーション外部とのやり取りがだいぶ楽になる。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiyosi.tumblr.com/post/100922038678/go-%E3%81%A7-struct-%E3%81%AE%E3%82%BF%E3%82%B0%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B&#34;&gt;Go で struct のタグ情報を取得する - hiyosi&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/fcd25db64f341ad2471f&#34;&gt;struct にアノテーションつけてたら go vet . すべき - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.restartr.com/2014/08/13/golang-json-marshal-unmarshal/&#34;&gt;Goのjson.Marshal/Unmarshalの仕様を整理してみる - I Will Survive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/6556d4eba797329e9f51&#34;&gt;BurntSushi/tomlを使ってハマったこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/ba363e82332d4dbdf34a&#34;&gt;GoでJSONの一部分を利用者が定義した構造体に読み込める便利な手法を見つけた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/iktakahiro/items/2e240147ca3188948a17&#34;&gt;Go 言語 1つの構造体に複数の validation を適応する - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; タグに validation 情報を埋め込んで利用する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/70080cc33b75152c5c2a&#34;&gt;Goのencoding/xmlを使いこなす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/toast-uz/items/52f0c86716493ad3ca12&#34;&gt;Go言語でJSON内の整数は10進数6桁しか表現できない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:an&#34;&gt;「アノテーション（annotation）」と呼ぶ人もいる。たぶん Java の annotation 機能を意識しているんだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:an&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:oz&#34;&gt;数値の場合は &lt;code&gt;omitzero&lt;/code&gt; オプションを付けると 0 のときに出力を省略できる。ただし &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;&lt;code&gt;BurntSushi/toml&lt;/code&gt;&lt;/a&gt; パッケージでは &lt;a href=&#34;http://qiita.com/reiki4040/items/6556d4eba797329e9f51&#34;&gt;&lt;code&gt;Decode()&lt;/code&gt; がうまく動かない&lt;/a&gt;らしい。実は &lt;code&gt;omitempty&lt;/code&gt; オプションも &lt;code&gt;Decode()&lt;/code&gt; 時の挙動が怪しいんだよなぁ。 &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; パーサの別実装としては &lt;a href=&#34;https://github.com/naoina/toml&#34;&gt;naoina/toml&lt;/a&gt; というのもある。これは最新の &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; 仕様に追随しているようだが &lt;code&gt;omitzero&lt;/code&gt; オプションには対応していない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:oz&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Categories や Tags の一覧ページを作る - hugo</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/hugo/categories-and-tags-list/" />
		<id>tag:text.Baldanders.info,2015-10-04:/hugo/categories-and-tags-list/</id>
		<published>2015-10-04T20:21:54+09:00</published>
		<updated>2016-12-14T10:20:58+09:00</updated>
		<summary>以前の回で紹介してなかったのだが， Categories や Tags の一覧ページを作る機能があるので紹介する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="hugo" label="hugo" scheme="http://text.baldanders.info/hugo" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は補足なので簡単に。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/hugo/section/&#34;&gt;Categories, Tags そして Section&lt;/a&gt;」の回で紹介してなかったのだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;， Categories や Tags の一覧ページを作る機能があるので紹介する。&lt;/p&gt;

&lt;p&gt;Categories や Tags の一覧ページを作るには &lt;code&gt;layouts/_default&lt;/code&gt; フォルダに &lt;code&gt;terms.html&lt;/code&gt; テンプレートを作成する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
たとえば中身はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
{{ with .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }} Cloud -- {{ .Site.Title }}&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
ul.cloud {
    list-style: none;
    padding: 0
}
ul.cloud &amp;gt; li {
    display: inline-block;
    margin: 0 0.5rem;
}
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }} Cloud&amp;lt;/h1&amp;gt;

&amp;lt;ul class=&amp;quot;cloud&amp;quot;&amp;gt;{{ $plural := .Data.Plural }}
{{ range $key, $value := .Data.Terms }}
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/{{ $plural }}/{{ $key | urlize }}&amp;quot;&amp;gt;{{ $key }}&amp;lt;/a&amp;gt; ({{ len $value }})&amp;lt;/li&amp;gt;
{{ end }}
&amp;lt;/ul&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/hugo/section/&#34;&gt;以前の記事&lt;/a&gt;の &lt;a href=&#34;http://text.baldanders.info/hugo/section/&#34;&gt;Taxonomy&lt;/a&gt; の記述に似ているので，それほど難しくないだろう。
これをビルドするとこんな感じにファイルが展開される。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo
0 draft content
0 future content
1 pages created
0 paginator pages created
2 tags created
1 categories created
in 17 ms

C:\hugo-env\www&amp;gt;tree /f .
C:\HUGO-ENV\WWW
│  config.toml
│
├─archetypes
├─content
│  └─practice
│          hello.md
│
├─data
├─layouts
│  │  404.html
│  │  index.html
│  │
│  ├─practice
│  │      single.html
│  │
│  ├─section
│  │      practice.html
│  │
│  └─_default
│          list.html
│          single.html
│          terms.html
│
├─public
│  │  404.html
│  │  index.html
│  │  index.xml
│  │  sitemap.xml
│  │
│  ├─categories
│  │  │  index.html
│  │  │
│  │  └─hugo
│  │          index.html
│  │          index.xml
│  │
│  ├─practice
│  │  │  index.html
│  │  │  index.xml
│  │  │
│  │  └─hello
│  │          index.html
│  │
│  └─tags
│      │  index.html
│      │
│      ├─hello
│      │      index.html
│      │      index.xml
│      │
│      └─world
│              index.html
│              index.xml
│
└─static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;public/categories&lt;/code&gt; および &lt;code&gt;public/tags&lt;/code&gt; フォルダの直下に &lt;code&gt;index.html&lt;/code&gt; ファイルが生成されているのがお分かりだろうか。
また &lt;code&gt;public/tags/index.html&lt;/code&gt; ファイルの中身を見てみると以下のように Tags 情報が展開されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Tags Cloud -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
ul.cloud {
    list-style: none;
    padding: 0
}
ul.cloud &amp;gt; li {
    display: inline-block;
    margin: 0 0.5rem;
}
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Tags Cloud&amp;lt;/h1&amp;gt;

&amp;lt;ul class=&amp;quot;cloud&amp;quot;&amp;gt;

	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/tags/hello&amp;quot;&amp;gt;hello&amp;lt;/a&amp;gt; (1)&amp;lt;/li&amp;gt;

	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/tags/world&amp;quot;&amp;gt;world&amp;lt;/a&amp;gt; (1)&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bookmark&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/templates/terms/&#34;&gt;Taxonomy Terms Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/lab/hugo/&#34;&gt;Hugoサイト構築 | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt; : お勧め！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/_shun_sato_/items/87888fa8425e55b1c758&#34;&gt;Hugoでタグやカテゴリのリンク切れが起こる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/hugo/bookmark/&#34;&gt;Hugo に関するブックマークはこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;というか，今までやり方が分かってなかった。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b&#34;&gt;Tags や Categories などごとに個別にテンプレートを作りたいのであれば &lt;code&gt;layouts/taxonomy/tag.terms.html&lt;/code&gt; といった感じでファイルを作るとよい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Categories, Tags そして Section - hugo</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/hugo/section/" />
		<id>tag:text.Baldanders.info,2015-09-11:/hugo/section/</id>
		<published>2015-09-11T17:58:32+09:00</published>
		<updated>2016-12-14T10:20:58+09:00</updated>
		<summary>前回の続き。今回は Categories, Tags そして Section について書いてみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="hugo" label="hugo" scheme="http://text.baldanders.info/hugo" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/4c5859f7cac877068742&#34;&gt;ゼロから始める Hugo — Categories, Tags そして Section - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/hugo/hello/&#34; title=&#34;インストールから Hello World まで&#34;&gt;前回&lt;/a&gt;の続き。
今回は Categories, Tags そして Section について書いてみる。&lt;/p&gt;

&lt;h2 id=&#34;categories-tags&#34;&gt;Categories と Tags&lt;/h2&gt;

&lt;p&gt;まずは Categories と Tags について。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; では記事に Categories および Tags を設定することができる。
以下のように記述すれば良い。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;+++
date = &amp;quot;2015-09-05T16:40:41+09:00&amp;quot;
draft = false
title = &amp;quot;Hello!&amp;quot;
categories = [ &amp;quot;hugo&amp;quot; ]
tags = [ &amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot; ]
+++

ようこそ， [Hugo](https://gohugo.io/) の世界へ！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように Categories および Tags のキーワードを配列で列挙する（キーワードがひとつでも配列に入れること）。
これをビルドすると以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo
0 draft content
0 future content
1 pages created
0 paginator pages created
2 tags created
1 categories created
in 20 ms

C:\hugo-env\www&amp;gt;tree /f .
C:\HUGO-ENV\WWW
│  config.toml
│
├─archetypes
├─content
│      hello.md
│
├─data
├─layouts
│  │  404.html
│  │  index.html
│  │
│  └─_default
│          single.html
│
├─public
│  │  404.html
│  │  index.html
│  │  index.xml
│  │  sitemap.xml
│  │
│  ├─categories
│  │  └─hugo
│  │          index.html
│  │          index.xml
│  │
│  ├─hello
│  │      index.html
│  │
│  └─tags
│      ├─hello
│      │      index.html
│      │      index.xml
│      │
│      └─world
│              index.html
│              index.xml
│
└─static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力先に &lt;code&gt;categories&lt;/code&gt; および &lt;code&gt;tags&lt;/code&gt; フォルダが作成され，更にその下にキーワードのフォルダが作成されているのがおわかりだろうか。
キーワードのフォルダの &lt;code&gt;index.xml&lt;/code&gt; は feed である。
つまり &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; ではカテゴリ・タグ毎に自動で feed が作成される。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; は（テンプレートがないため）この時点では空である。テンプレートは &lt;code&gt;layouts/_default&lt;/code&gt; フォルダに &lt;code&gt;list.html&lt;/code&gt; ファイルを配置する。
名前からして Categories/Tags 毎に記事を列挙することを期待しているわけやね（笑） とりあえず中身はこんな感じでどうだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
{{ with .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;List of {{ .Title }} -- {{ .Site.Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;List of {{ .Title }}&amp;lt;/h1&amp;gt;

&amp;lt;ul style=&amp;quot;list-style:none;&amp;quot;&amp;gt;
{{ range .Data.Pages }}
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt; (&amp;lt;time&amp;gt;{{ .Date.Format &amp;quot;2006-01-02&amp;quot; }}&amp;lt;/time&amp;gt;){{ if .Draft }} #Draft{{ end }}&amp;lt;/li&amp;gt;
{{ end }}
&amp;lt;/ul&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ビルド結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;List of Hugo -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;List of Hugo&amp;lt;/h1&amp;gt;

&amp;lt;ul style=&amp;quot;list-style:none;&amp;quot;&amp;gt;

	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/hello/&amp;quot;&amp;gt;Hello!&amp;lt;/a&amp;gt; (&amp;lt;time&amp;gt;2015-09-05&amp;lt;/time&amp;gt;)&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おおう。キーワードの頭文字が勝手に大文字に変換されてるぜ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/hugo/hello/&#34; title=&#34;インストールから Hello World まで&#34;&gt;前回&lt;/a&gt;を読んでいる人はトップページのテンプレート &lt;code&gt;layouts/index.html&lt;/code&gt; とほぼ同じ構成であることに気づくと思う。
違うのは &lt;code&gt;{{ .Title }}&lt;/code&gt; には Categories/Tags のキーワードが入ることと &lt;code&gt;{{ range }}&lt;/code&gt; 構文の対象変数が &lt;code&gt;.Site.Pages&lt;/code&gt; ではなく &lt;code&gt;.Data.Pages&lt;/code&gt; であることだ。&lt;/p&gt;

&lt;p&gt;ついでに記事ページで Categories/Tags を表示できるようにしてみよう。
&lt;code&gt;layouts/_default/single.html&lt;/code&gt; を以下のように記述する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
{{ with .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }} -- {{ .Site.Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;nav&amp;gt;
	{{ with .Params.categories }}&amp;lt;div&amp;gt;Categories:{{ range . }} &amp;lt;a href=&amp;quot;/categories/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;{{ end }}&amp;lt;/div&amp;gt;{{ end }}
	{{ with .Params.tags }}&amp;lt;div&amp;gt;Tags:{{ range . }} &amp;lt;a href=&amp;quot;/tags/{{ . | urlize }}/&amp;quot;&amp;gt;#{{ . }}&amp;lt;/a&amp;gt;{{ end }}&amp;lt;/div&amp;gt;{{ end }}
&amp;lt;/nav&amp;gt;

&amp;lt;div&amp;gt;{{ .Content }}&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下がビルド結果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello! -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
&amp;lt;nav&amp;gt;
	&amp;lt;div&amp;gt;Categories: &amp;lt;a href=&amp;quot;/categories/hugo/&amp;quot;&amp;gt;hugo&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;div&amp;gt;Tags: &amp;lt;a href=&amp;quot;/tags/hello/&amp;quot;&amp;gt;#hello&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;/tags/world/&amp;quot;&amp;gt;#world&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;

&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;ようこそ， &amp;lt;a href=&amp;quot;https://gohugo.io/&amp;quot;&amp;gt;Hugo&amp;lt;/a&amp;gt; の世界へ！&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;{{ with }}&lt;/code&gt; 構文の中に &lt;code&gt;{{ range }}&lt;/code&gt; 構文が入ってて分かりにくいが，変数のスコープに注意すれば，それほど難しくはないはず。
注意しないといけないのは， Categories/Tags の変数名が &lt;code&gt;.Categories&lt;/code&gt;, &lt;code&gt;.Tags&lt;/code&gt; ではなく &lt;code&gt;.Params.categories&lt;/code&gt;, &lt;code&gt;.Params.tags&lt;/code&gt; になっている点である。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{ . | urlize }}&lt;/code&gt; というのはパイプ機能の一種で， &lt;code&gt;urlize&lt;/code&gt; であれば左側の値（文字列）を URL として安全な文字列に変換してくれる。&lt;/p&gt;

&lt;p&gt;Categories と Tags との間に機能上の違いはない。
名前が違うだけである。
おそらく他のブログサービスとの互換性の為にあるのだろうが，「ゼロから始める」のであれば Categories と Tags を併記することに意味はない。
それなら後述する Section と組み合わせるほうが合理的である。&lt;/p&gt;

&lt;h3 id=&#34;params&#34;&gt;.Params のルール&lt;/h3&gt;

&lt;p&gt;Front matter で指定する変数は，「&lt;a href=&#34;https://gohugo.io/templates/variables/&#34;&gt;テンプレート変数&lt;/a&gt;」にある既定のもの以外は &lt;code&gt;.Params&lt;/code&gt; 以下に自動的に組み換えられる。
なおかつ &lt;code&gt;.Params&lt;/code&gt; 以下の変数名は小文字になる決まりである。
Categories/Tags は標準機能なのだが，どういうわけかこれだけ &lt;code&gt;.Params&lt;/code&gt; 以下に組み替えられる。
なんだかなぁ。「歴史的経緯」ってやつだろうか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;code&gt;config.toml&lt;/code&gt; によるサイト設定では &lt;code&gt;.Site.Params&lt;/code&gt; への暗黙的な組み換えは行われないため，明示的に記述する必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[params]
author = &amp;quot;Spiegel&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この非対称性も分かりにくいんだよなぁ。&lt;/p&gt;

&lt;h3 id=&#34;taxonomy&#34;&gt;Taxonomy&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; には Taxonomy と呼ばれる機能があって，標準では Categories/Tags のリストを取り出すことができる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
たとえば， &lt;code&gt;layouts/index.html&lt;/code&gt; をこんな感じに書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h2&amp;gt;Taxonomy Terms&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;{{ range $taxonomyname, $taxonomy := .Site.Taxonomies }}
    &amp;lt;li&amp;gt;{{ $taxonomyname }}
        &amp;lt;ul&amp;gt;{{ range $key, $value := $taxonomy }}
            &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/{{ $taxonomyname | urlize }}/{{ $key | urlize }}&amp;quot;&amp;gt;{{ $key }}&amp;lt;/a&amp;gt; ({{ $value.Count }})
                &amp;lt;ul&amp;gt;{{ range $value.Pages }}
                    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .LinkTitle }}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
                {{ end }}&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
        {{ end }}&amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
{{ end }}&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをビルドするとこんな感じに展開される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h2&amp;gt;Taxonomy Terms&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;categories
        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/categories/hugo&amp;quot;&amp;gt;hugo&amp;lt;/a&amp;gt; (1)
                &amp;lt;ul&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/hello/&amp;quot;&amp;gt;Hello!&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;

    &amp;lt;li&amp;gt;tags
        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/tags/hello&amp;quot;&amp;gt;hello&amp;lt;/a&amp;gt; (1)
                &amp;lt;ul&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/hello/&amp;quot;&amp;gt;Hello!&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;

            &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/tags/world&amp;quot;&amp;gt;world&amp;lt;/a&amp;gt; (1)
                &amp;lt;ul&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/hello/&amp;quot;&amp;gt;Hello!&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tags の一覧のみを取得したいのであれば，もっと簡単に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h2&amp;gt;Tags&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;{{ range $key, $value := .Site.Taxonomies.tags.ByCount }}
	&amp;lt;li&amp;gt;#&amp;lt;a href=&amp;quot;/tags/{{ $key | urlize }}&amp;quot;&amp;gt;{{ $key }}&amp;lt;/a&amp;gt; ({{ $value.Count }})&amp;lt;/li&amp;gt;
{{ end }}&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でもよい。
ちなみに &lt;code&gt;.Site.Taxonomies.tags.ByCount&lt;/code&gt; は Tags の一覧をタグされている記事数の順で sort したものである。
アルファベット順にするには &lt;code&gt;.Site.Taxonomies.tags.Alphabetical&lt;/code&gt; とする。&lt;/p&gt;

&lt;p&gt;（追記： Categories/Tags の一覧ページを作る方法は&lt;a href=&#34;http://text.baldanders.info/hugo/categories-and-tags-list/&#34;&gt;こちら&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&#34;section&#34;&gt;Section&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;content&lt;/code&gt; フォルダの下に &lt;code&gt;practice&lt;/code&gt; というフォルダを作り，ここに &lt;code&gt;hello.md&lt;/code&gt; を移動させてみよう。
新たに作る場合は path 付きで作成すればよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo new practice/hello.md
C:\hugo-env\www\content\practice\hello.md created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでビルドしてみる（ファイルを移動した際は出力フォルダの中をいったんクリーンにしてからビルドするとゴミが残らない）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo
0 draft content
0 future content
1 pages created
0 paginator pages created
2 tags created
1 categories created
in 19 ms

C:\hugo-env\www&amp;gt;tree /f .
C:\HUGO-ENV\WWW
│  config.toml
│
├─archetypes
├─content
│  └─practice
│          hello.md
│
├─data
├─layouts
│  │  404.html
│  │  index.html
│  │
│  └─_default
│          list.html
│          single.html
│
├─public
│  │  404.html
│  │  index.html
│  │  index.xml
│  │  sitemap.xml
│  │
│  ├─categories
│  │  └─hugo
│  │          index.html
│  │          index.xml
│  │
│  ├─practice
│  │  │  index.html
│  │  │  index.xml
│  │  │
│  │  └─hello
│  │          index.html
│  │
│  └─tags
│      ├─hello
│      │      index.html
│      │      index.xml
│      │
│      └─world
│              index.html
│              index.xml
│
└─static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hello/index.html&lt;/code&gt; が &lt;code&gt;practice/hello/index.html&lt;/code&gt; に配置されるのは予想通りだと思うが， &lt;code&gt;practice&lt;/code&gt; に &lt;code&gt;index.html&lt;/code&gt; と &lt;code&gt;index.xml&lt;/code&gt; が生成されているのがおわかりだろうか。
&lt;code&gt;practice/index.html&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;List of Practices -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;List of Practices&amp;lt;/h1&amp;gt;

&amp;lt;ul style=&amp;quot;list-style:none;&amp;quot;&amp;gt;

	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/practice/hello/&amp;quot;&amp;gt;Hello!&amp;lt;/a&amp;gt; (&amp;lt;time&amp;gt;2015-09-05&amp;lt;/time&amp;gt;)&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは &lt;code&gt;layouts/_default/list.html&lt;/code&gt; テンプレートで生成されたページだ。
&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; ではフォルダ付きの記事を作成すると，そのフォルダが Section として機能する。&lt;/p&gt;

&lt;p&gt;当然だが，ひとつの記事はひとつの Section にしか帰属できない。
これは先の Categories/Tags との大きな違いである。
Section と Categories/Tags を組み合わせれば縦串と横串で記事を指示できるようになる。&lt;/p&gt;

&lt;p&gt;ついでに記事ページで Section を表示できるようにしてみよう。
たとえば， &lt;code&gt;layouts/_default/single.html&lt;/code&gt; をこんな感じに書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
{{ with .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}{{ with .Section }} -- {{ . }}{{ end }} -- {{ .Site.Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}{{ with .Section }} [&amp;lt;a href=&amp;quot;/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;]{{ end }}&amp;lt;/h1&amp;gt;
&amp;lt;nav&amp;gt;
	{{ with .Params.categories }}&amp;lt;div&amp;gt;Categories:{{ range . }} &amp;lt;a href=&amp;quot;/categories/{{ . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;{{ end }}&amp;lt;/div&amp;gt;{{ end }}
	{{ with .Params.tags }}&amp;lt;div&amp;gt;Tags:{{ range . }} &amp;lt;a href=&amp;quot;/tags/{{ . | urlize }}/&amp;quot;&amp;gt;#{{ . }}&amp;lt;/a&amp;gt;{{ end }}&amp;lt;/div&amp;gt;{{ end }}
&amp;lt;/nav&amp;gt;

&amp;lt;div&amp;gt;{{ .Content }}&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下がビルド結果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello! -- practice -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello! [&amp;lt;a href=&amp;quot;/practice/&amp;quot;&amp;gt;practice&amp;lt;/a&amp;gt;]&amp;lt;/h1&amp;gt;
&amp;lt;nav&amp;gt;
	&amp;lt;div&amp;gt;Categories: &amp;lt;a href=&amp;quot;/categories/hugo/&amp;quot;&amp;gt;hugo&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;div&amp;gt;Tags: &amp;lt;a href=&amp;quot;/tags/hello/&amp;quot;&amp;gt;#hello&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;/tags/world/&amp;quot;&amp;gt;#world&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;

&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;ようこそ， &amp;lt;a href=&amp;quot;https://gohugo.io/&amp;quot;&amp;gt;Hugo&amp;lt;/a&amp;gt; の世界へ！&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;記事のフォルダ階層はいくらでも深くできるが， Section として認識されるのは直下のフォルダのみのようである。
たとえば &lt;code&gt;content/practice/hello.md&lt;/code&gt; を &lt;code&gt;content/practice/firstcode/hello.md&lt;/code&gt; に移動してビルドすると（出力フォルダはクリーンアップしてね）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;tree /f .
C:\HUGO-ENV\WWW
│  config.toml
│
├─archetypes
├─content
│  └─practice
│      └─firstcode
│              hello.md
│
├─data
├─layouts
│  │  404.html
│  │  index.html
│  │
│  └─_default
│          list.html
│          single.html
│
├─public
│  │  404.html
│  │  index.html
│  │  index.xml
│  │  sitemap.xml
│  │
│  ├─categories
│  │  └─hugo
│  │          index.html
│  │          index.xml
│  │
│  ├─practice
│  │  │  index.html
│  │  │  index.xml
│  │  │
│  │  └─firstcode
│  │      └─hello
│  │              index.html
│  │
│  └─tags
│      ├─hello
│      │      index.html
│      │      index.xml
│      │
│      └─world
│              index.html
│              index.xml
│
└─static
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello! -- practice -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello! [&amp;lt;a href=&amp;quot;/practice/&amp;quot;&amp;gt;practice&amp;lt;/a&amp;gt;]&amp;lt;/h1&amp;gt;
&amp;lt;nav&amp;gt;
	&amp;lt;div&amp;gt;Categories: &amp;lt;a href=&amp;quot;/categories/hugo/&amp;quot;&amp;gt;hugo&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;div&amp;gt;Tags: &amp;lt;a href=&amp;quot;/tags/hello/&amp;quot;&amp;gt;#hello&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;/tags/world/&amp;quot;&amp;gt;#world&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;

&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;ようこそ， &amp;lt;a href=&amp;quot;https://gohugo.io/&amp;quot;&amp;gt;Hugo&amp;lt;/a&amp;gt; の世界へ！&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というわけで，あくまでも &lt;code&gt;practice&lt;/code&gt; フォルダが Section になっているのがわかると思う。&lt;/p&gt;

&lt;h3 id=&#34;section-custom&#34;&gt;Section ごとのカスタマイズ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; では Section ごとにカスタマイズすることができる。
&lt;code&gt;layouts&lt;/code&gt; フォルダに &lt;code&gt;section&lt;/code&gt; フォルダを作成し，その中に &lt;code&gt;&amp;lt;section name&amp;gt;.html&lt;/code&gt; ファイルを作成すると，そのテンプレートで Section のトップページ（&lt;code&gt;&amp;lt;section name&amp;gt;/index.html&lt;/code&gt;）を作成する。
今回は &lt;code&gt;layouts/section/practice.html&lt;/code&gt; を作成してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
{{ with .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hugo の練習 -- {{ .Site.Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hugo の練習&amp;lt;/h1&amp;gt;

&amp;lt;ul style=&amp;quot;list-style:none;&amp;quot;&amp;gt;
{{ range .Data.Pages }}
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt; (&amp;lt;time&amp;gt;{{ .Date.Format &amp;quot;2006-01-02&amp;quot; }}&amp;lt;/time&amp;gt;){{ if .Draft }} #Draft{{ end }}&amp;lt;/li&amp;gt;
{{ end }}
&amp;lt;/ul&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ビルド結果。変わり映えしなくてすみません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hugo の練習 -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hugo の練習&amp;lt;/h1&amp;gt;

&amp;lt;ul style=&amp;quot;list-style:none;&amp;quot;&amp;gt;

	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/practice/hello/&amp;quot;&amp;gt;Hello!&amp;lt;/a&amp;gt; (&amp;lt;time&amp;gt;2015-09-05&amp;lt;/time&amp;gt;)&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更に Section 内の記事ページもカスタマイズできる。
これは &lt;code&gt;layouts&lt;/code&gt; フォルダに Section 名のフォルダを作成し，その中に &lt;code&gt;single.html&lt;/code&gt; を配置する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
{{ with .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }} -- Hugo の練習 | {{ .Site.Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }} -- Hugo の練習&amp;lt;/h1&amp;gt;
&amp;lt;nav&amp;gt;
	{{ with .Params.categories }}&amp;lt;div&amp;gt;Categories:{{ range . }} &amp;lt;a href=&amp;quot;/categories/{{ lower . | urlize }}/&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;{{ end }}&amp;lt;/div&amp;gt;{{ end }}
	{{ with .Params.tags }}&amp;lt;div&amp;gt;Tags:{{ range . }} &amp;lt;a href=&amp;quot;/tags/{{ lower . | urlize }}/&amp;quot;&amp;gt;#{{ . }}&amp;lt;/a&amp;gt;{{ end }}&amp;lt;/div&amp;gt;{{ end }}
&amp;lt;/nav&amp;gt;

&amp;lt;div&amp;gt;{{ .Content }}&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello! -- Hugo の練習 | Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello! -- Hugo の練習&amp;lt;/h1&amp;gt;
&amp;lt;nav&amp;gt;
	&amp;lt;div&amp;gt;Categories: &amp;lt;a href=&amp;quot;/categories/hugo/&amp;quot;&amp;gt;hugo&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
	&amp;lt;div&amp;gt;Tags: &amp;lt;a href=&amp;quot;/tags/hello/&amp;quot;&amp;gt;#hello&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;/tags/world/&amp;quot;&amp;gt;#world&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;

&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;ようこそ， &amp;lt;a href=&amp;quot;https://gohugo.io/&amp;quot;&amp;gt;Hugo&amp;lt;/a&amp;gt; の世界へ！&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これも変わり映えしなくてすみません。&lt;/p&gt;

&lt;p&gt;しかし，なんでこんなテンプレートの構成なんだろう。
これだと &lt;code&gt;section&lt;/code&gt; や &lt;code&gt;_default&lt;/code&gt; という名前のセクションはカスタマイズ出来ないことになる（まだ説明してないが &lt;code&gt;layouts&lt;/code&gt; フォルダには他にも &lt;code&gt;partials&lt;/code&gt; や &lt;code&gt;shortcodes&lt;/code&gt; といったフォルダもある）。
そうではなくて，  &lt;code&gt;layouts/section&lt;/code&gt; フォルダの下にセクション名のフォルダを掘ってその中に &lt;code&gt;list.html&lt;/code&gt; や &lt;code&gt;single.html&lt;/code&gt; を配置すればスッキリするのに。&lt;/p&gt;

&lt;p&gt;さきほどの &lt;code&gt;.Params&lt;/code&gt; の話といい，どうも &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; は名前管理がいきあたりばったりな気がする。&lt;/p&gt;

&lt;h3 id=&#34;conflict&#34;&gt;categories/hugo という名前の記事はどうなるの？&lt;/h3&gt;

&lt;p&gt;これも名前に関する話。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;categories/hugo.md&lt;/code&gt; という名前の記事は &lt;code&gt;categories/hugo/index.html&lt;/code&gt; に展開される。
これって Categories の機能と丸かぶりである。
実は &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; では名前が衝突した際の挙動は明文化されていない（筈）。
強いて言うなら実装依存で状況依存である。またビルド時にエラーになることもない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo new categories/hugo.md
C:\hugo-env\www\content\categories\hugo.md created

C:\hugo-env\www&amp;gt;hugo undraft content/categories/hugo.md

C:\hugo-env\www&amp;gt;hugo
0 draft content
0 future content
2 pages created
0 paginator pages created
2 tags created
1 categories created
in 24 ms

C:\hugo-env\www&amp;gt;tree /f .
C:\HUGO-ENV\WWW
│  config.toml
│
├─archetypes
├─content
│  ├─categories
│  │      hugo.md
│  │
│  └─practice
│          hello.md
│
├─data
├─layouts
│  │  404.html
│  │  index.html
│  │
│  └─_default
│          list.html
│          single.html
│
├─public
│  │  404.html
│  │  index.html
│  │  index.xml
│  │  sitemap.xml
│  │
│  ├─categories
│  │  │  index.html
│  │  │  index.xml
│  │  │
│  │  └─hugo
│  │          index.html
│  │          index.xml
│  │
│  ├─practice
│  │  │  index.html
│  │  │  index.xml
│  │  │
│  │  └─hello
│  │          index.html
│  │
│  └─tags
│      ├─hello
│      │      index.html
│      │      index.xml
│      │
│      └─world
│              index.html
│              index.xml
│
└─static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上の場合は &lt;code&gt;categories/hugo/index.html&lt;/code&gt; が記事ページになった。
他にも，このフォルダ構成なら &lt;code&gt;practice.md&lt;/code&gt; も名前が衝突する。
このような衝突を避けるにはユーザ側で名前を管理するしかない。
小規模なサイトなら人間が気をつければいいが，中規模以上で複数人が関わるようになると結構危ないかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;bookmark&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/lab/hugo/&#34;&gt;Hugoサイト構築 | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt; : お勧め！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/_shun_sato_/items/87888fa8425e55b1c758&#34;&gt;Hugoでタグやカテゴリのリンク切れが起こる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/hugo/bookmark/&#34;&gt;Hugo に関するブックマークはこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;Categories/Tags の配置が特殊なのは，これらが &lt;a href=&#34;#taxonomy&#34;&gt;Taxonomy&lt;/a&gt; として実装されているからのようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b&#34;&gt;Taxonomy の項目は Categories/Tags 以外にも任意に設定することができる（&lt;q lang=&#34;en&#34;&gt;&lt;a href=&#34;https://gohugo.io/taxonomies/usage/&#34;&gt;Using Taxonomies&lt;/a&gt;&lt;/q&gt; 参照）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
