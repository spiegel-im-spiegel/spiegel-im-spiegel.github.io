<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Language - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/language/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/language/index.xml" />
	<id>tag:text.Baldanders.info,2016-07-31:/</id>
	<updated>2016-07-31T14:20:10+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.16</generator>

	
	<entry>
		<title>「「私は数式アレルギーの文系でして」とへらへら笑う大人に耳を貸すな」は正しい - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/07/math-allergie/" />
		<id>tag:text.Baldanders.info,2016-07-31:/remark/2016/07/math-allergie/</id>
		<published>2016-07-31T14:20:10+09:00</published>
		<updated>2016-07-31T14:20:10+09:00</updated>
		<summary>外国語にせよ数式にせよプログラミング言語にせよ，自身とは異質な「言語」を学ぶというのは背後にある学問体系や思想や哲学といったものを丸ごと学ぶのに等しい。それは人の「想像力の地平線」を拡大する数少ない手段のひとつである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（「アレルギー」ってドイツ語なのね）&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;何を怒っているかというと「私は数式アレルギーでして（てへ）」といってる（自称）大人に怒るのだ。勉強不足を恥じろよ。若者を自分のレベルまで落とそうとするなよ。文系ですからなんていうなよ。きょうび文系でもしっかり数式はよむぜ！若者を自分のレベルまでおとしめようとするのに腹が立つのだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://rentwi.textfile.org/?759297917043609600s&#34;&gt;「私は数式アレルギーの文系でして」とへらへら笑う大人に耳を貸すな。 - 結城浩の連ツイ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;学生時代，友人（文学部・考古学専攻）に微分方程式の検算を頼まれたことがある。
卒論で調査した遺跡を統計処理するためらしい。
理系だろうが文系だろうが数学ができないのはちっとも自慢にならない。
ちなみに当時理学部にいた私たちは「数学科は文系クラス」と認識していた。&lt;/p&gt;

&lt;p&gt;あるいは，近年は見なくなったが，昔は「私はプログラムは分からないので」などと公言する SE&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:se&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:se&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; がいっぱいいた。
プログラムは「動いてるコード」のみが正解である。
コードが読めなくてどうやってプロジェクトを管理するのかと思ったが，やはりそういう人間に限って管理できていなかった。
コードを VCS (Version Control System) で管理するようになれば，なおさらコードが読めなければ仕事にならない（のでそういう人は排除されてしまったんだろう）。&lt;/p&gt;

&lt;p&gt;苦手な分野があるのは分かる。
私は子供の頃から英語が壊滅的で今でも大変苦労している。
しかし学生時代なら多少学業成績が悪くても「てへぺろ」と笑って済ませられるが，社会人になったら「分からない」ことは言い訳にならない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
ましてや分からないことを「アレルギー」などと称して分からないまま放置して平気というのは明確に恥である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
英語ができないからといって英語の論文や技術文書を読まなくて済む法はない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
プロアスリートだって海外の最新論文から学んだりするのである。&lt;/p&gt;

&lt;p&gt;これは大きな声で言っていいと思うが，学生時代より社会人になってからのほうが百倍は勉強している&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:s&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
だからこそ大人は言うのである。
&lt;ruby&gt;&lt;rb&gt;学生&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;ヒマ&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;なうちに勉強しておけ，と。&lt;/p&gt;

&lt;p&gt;前にも&lt;a href=&#34;http://text.baldanders.info/remark/2016/06/19-stories/#ed&#34;&gt;書いた&lt;/a&gt;が&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ちなみに「人工知能」の台頭を意識しているのなら，なおさら「プログラミング教育」は不要である。 なぜなら「問題を解決する仕事」はこれからどんどん機械が奪っていくから。 そうなった時に望まれる人材は「問題を解決できる人」ではなく「正しい問いを立てられる人」である。 親や学校教師に言われた通りのことしかできない子どもは，大人社会の中では機械以下の底辺でしか生きられなくなる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;「正しい問いを立てられる」ことはこれからの人にとって必須スキルになる。
「正しい問いを立てられる」ようになるには数学をきちんと修めることである（「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000744.shtml&#34; title=&#34;日本の「算数」は壊れてる？ — Baldanders.info&#34;&gt;掛け算は順序が大事&lt;/a&gt;」などは問題外）。
学術分野に進まなくても「数学的なものの考え方」は将来の貴方の役に立つはずである。&lt;/p&gt;

&lt;p&gt;外国語にせよ数式にせよプログラミング言語にせよ，自身とは異質な「言語」を学ぶというのは背後にある学問体系や思想や哲学といったものを丸ごと学ぶのに等しい。
それは人の「想像力の地平線」を拡大する数少ない手段のひとつである。&lt;/p&gt;

&lt;h2 id=&#34;関連する-かも知れない-記事&#34;&gt;関連する（かも知れない）記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000868.shtml&#34;&gt;プログラミングは「損得勘定」で考える — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/lets-programming/&#34;&gt;「だれもがプログラミングを学ぶべき」ではない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NAQA33A/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41hSKEDU3zL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NAQA33A/baldandersinf-22/&#34;&gt;数学ガールの誕生　理想の数学対話を求めて&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2013-09-13&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMIQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMIQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／式とグラフ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01EL08HVS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01EL08HVS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／場合の数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMJ0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMJ0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／整数で遊ぼう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;結城浩さんの講演集。こういう場所に立ち会える今の学生さんは羨ましい。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-31&#34;&gt;2016-07-31&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51XGP8AFX2L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;いかにして問題をとくか&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;G. ポリア 柿内 賢信 &lt;/dd&gt;&lt;dd&gt;丸善 1975-04-01&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621085298/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621085298.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;いかにして問題をとくか・実践活用編&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4061497863/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4061497863.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学的思考法―説明力を鍛えるヒント  講談社現代新書&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/462108819X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/462108819X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学×思考=ざっくりと  いかにして問題をとくか&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797375698/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797375698.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4185086180/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4185086180.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;授業研究に学ぶ高校新数学科の在り方&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-26&#34;&gt;2014/09/26&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:se&#34;&gt;SE (System Engineer) という言葉がもう古語かもしれないが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:se&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:0&#34;&gt;学校教師のように怒られることはないだろうが，懇切丁寧に教えてくれることもない。ただ「能力が低い」と見なされるだけである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;ただし人には向き不向きというものがある。向いてないものに貴重なリソースを割くのは賢明でないこともある。もしかしたら自らの無能を「アレルギー」と称しているのは深い複合感情（complex）から来るものなのかもしれない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:e&#34;&gt;幸いというか，技術文書は英語力がなくてもある程度は読める。いやホンマに助かる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:s&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000529.shtml&#34; title=&#34;私はこうしてプログラミングを覚えた — Baldanders.info&#34;&gt;ずい分前に書いた&lt;/a&gt;が，私は企業の新人研修で専門学校2年分のカリキュラムを3ヶ月でやらされた。なので「学校で習うプログラミング」に対する評価が低い。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『プログラミング言語 Go』を眺める - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/07/go-programming-language/" />
		<id>tag:text.Baldanders.info,2016-07-13:/remark/2016/07/go-programming-language/</id>
		<published>2016-07-13T04:19:59+09:00</published>
		<updated>2016-07-17T23:06:47+09:00</updated>
		<summary>Go 言語をある程度使える（私程度のレベル）という方は第7章から第9章までを重点的に読むといい。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のよいところのひとつは&lt;a href=&#34;http://golang-jp.org/doc/&#34;&gt;ドキュメント&lt;/a&gt;が分かりやすい形で提供されている点である。
はじめて &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に接する人なら “&lt;a href=&#34;https://tour.golang.org/&#34;&gt;A Tour of Go&lt;/a&gt;” から気楽に始められるし，手元にコンパイラがなくてもとりあえず “&lt;a href=&#34;https://play.golang.org/&#34; title=&#34;The Go Playground&#34;&gt;Playground&lt;/a&gt;” で遊ぶことはできる。
更に&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;言語仕様&lt;/a&gt;や&lt;a href=&#34;https://golang.org/pkg/&#34;&gt;標準パッケージのドキュメント&lt;/a&gt;や &lt;a href=&#34;https://golang.org/doc/faq&#34;&gt;FAQ&lt;/a&gt; といったものはもちろん， “&lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt;” みたいなドキュメントも用意されている。
なので実際のところ，本を買わなくてもオンラインで充分学ぶことができる。&lt;/p&gt;

&lt;p&gt;にも関わらず今回この本を買った理由は以下の2つ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;オフラインで参照できる完全なリファレンス本が欲しかった&lt;/li&gt;
&lt;li&gt;知識体系として &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を学べる教科書が欲しかった&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;実は現在，職場が某セキュリティ・エリアの中にあってネットから物理的に切り離された環境にいる。
以前は分からないことは Google 先生に訊けたのに，それが出来なくなってしまったのだ。
スマホやタブレットといった電子機器も持ち込めないので「Kindle で」というわけにもいかない。
今ほど紙の本のありがたみを実感できたことはないよ。&lt;/p&gt;

&lt;p&gt;まぁそういう経験をしてしまったので（仕事に絡みそうなものであれば）紙の本はちゃんと買っておくか，という気になったのだった。
逆に紙の本を買ってしまったので（今までみたいな余暇の遊びじゃなく）元を取らないとダメだなぁ，などと思ったり。&lt;/p&gt;

&lt;p&gt;さて本題。&lt;/p&gt;

&lt;p&gt;まず， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を全くはじめて習うという方は，『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34; title=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) : Alan A.A. Donovan, Brian W. Kernighan, 柴田 芳樹 : 本 : Amazon&#34;&gt;プログラミング言語 Go&lt;/a&gt;』からはじめるのではなく， “&lt;a href=&#34;https://tour.golang.org/&#34;&gt;A Tour of Go&lt;/a&gt;” （&lt;a href=&#34;https://go-tour-jp.appspot.com/&#34;&gt;日本語版&lt;/a&gt;もある）からはじめることを強くおすすめする。
“&lt;a href=&#34;https://tour.golang.org/&#34;&gt;A Tour of Go&lt;/a&gt;” では手を動かしながら学べるので「感触」を掴むのにちょうどよい教材と言える。
そうした後に『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34; title=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) : Alan A.A. Donovan, Brian W. Kernighan, 柴田 芳樹 : 本 : Amazon&#34;&gt;プログラミング言語 Go&lt;/a&gt;』を読み進めれば理解しやすいと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;をある程度使える（私程度のレベル）という方は第7章から第9章までを重点的に読むといい。
Interface, goroutine, channel の概念や実装方法は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の中核技術といえるもので，ここを押さえておけばかなり使いこなせるようになるはず。
また第12章以降に登場する refrection や &lt;a href=&#34;https://golang.org/pkg/unsafe/&#34;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; パッケージの説明は個人的にかなり分かりやすかった。&lt;/p&gt;

&lt;p&gt;第8章および第9章を読んでいて気がついたのだが， goroutine/channel を使った CSP (Communicating Sequential Processes) の真価は data driven な設計で真価を発揮するのではないだろうか。
「並行プログラミング」を意識するとどうしてもスレッドを連想してしまうけど，スレッドよりも遥かに軽量な goroutine はもっと無茶ができるはず。
たとえば多数の goroutine をネットワーク化した非ノイマン型っぽい「何か」とか。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;プログラミング言語 Go&lt;/a&gt; : 不定期に書いてます&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/why-go-is-a-poorly-designed-language/&#34;&gt;なぜGo言語は設計が悪いのか – Go愛好者の見地から | 未分類 | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/go-best-practices-2016/&#34;&gt;6年間におけるGoのベストプラクティス | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160706165757.htm&#34;&gt;Big Sky :: golang の channel を使ったテクニックあれこれ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogger.ukai.org/2016/07/gogo.html&#34;&gt;ukai&amp;rsquo;s blog: 『プログラミング言語Go』刊行記念イベント「Goの設計思想を読み解く～実際の開発に活かすために」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Java はやめておけ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/07/java/" />
		<id>tag:text.Baldanders.info,2016-07-09:/remark/2016/07/java/</id>
		<published>2016-07-09T15:27:27+09:00</published>
		<updated>2016-07-17T23:55:41+09:00</updated>
		<summary>現在 Java でバリバリ仕事しているおぢさんから（老婆心ながら）言っておくと「Java はやめておけ」である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://news.nifty.com/article/item/neta/dime-269849/&#34;&gt;ITエンジニアがこれから重要になると思うプログラミング言語TOP10｜ニフティニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うわぁ。
まじすか，これ。
確かに &lt;a href=&#34;http://www.tiobe.com/tiobe_index?page=index&#34;&gt;TIOBE&lt;/a&gt; でも Java は常に1位か2位だけどね。&lt;/p&gt;

&lt;p&gt;現在 Java でバリバリ仕事しているおぢさんから（老婆心ながら）言っておくと「Java はやめておけ」である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35085410/&#34;&gt;Java EEの開発が停滞？&amp;ndash;オラクルの不透明な態度にコミュニティーが不信感 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/java_ee9javaone.html&#34;&gt;オラクル、次期Java EEはマイクロサービスやコンテナをサポートするものになるとコメント。9月のJavaOneで計画を発表予定。ただし本気度には疑問符も － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どういうわけか日本人は Java が大好きで，確かにあと数年は飯の種になるだろうが，将来を見据えれば Java は間違いなく COBOL と同じ道をたどる。
今 COBOL-er は季節労働者のごとく仕事を求めて全国行脚しているそうだ。
以前仕事で一緒になった COBOL プログラマ（私と同年代）は，その前は富山で仕事をしていたと言っていた。&lt;/p&gt;

&lt;p&gt;今後10年20年をにらんで「飯の種」としてプログラミング言語をきちんと学びたいなら「関数型プログラミング言語」を選択すべき&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
個人的には（純正の関数型言語ではないが） Python か ES6 以降の JavaScript をお薦めする。
あっ Swift も多分オススメ。&lt;/p&gt;

&lt;p&gt;日本では何故か Python の人気が薄い気がするが，新しいアイデアは大抵の場合，真っ先に Python で実装される。
Python 自体は飯の種にならなくても技術トレンドを追いかけるなら外せない。&lt;/p&gt;

&lt;p&gt;JavaScript はもともと手続き型言語だが， ES6 で関数型の言語仕様がいろいろと追加されている。
なにより Web システムにおいてサーバ側からクライアント側まで同じ言語で記述できるのは有利な点である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/stkdev/items/5c021d4e5d54d56b927c&#34;&gt;関数型プログラミングはまず考え方から理解しよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/srd7/items/fad2d0a94b99d1de2e48&#34;&gt;for文を使わないプログラミングって？（関数型プログラミング入門） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Swift はオープンソースになってサーバ用途でも使えるようになった。
個人的には色々試してみたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078299/&#34;&gt;IBM、ヴイエムウェアとハイブリッドクラウドで提携&amp;ndash;Swiftのクラウド対応も発表 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taketo1024/items/2ab856d21bf9b9f30357&#34;&gt;Swiftで自然数を作ってみた（ペアノの公理） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taketo1024/items/bd356c59dc0559ee9a0b&#34;&gt;Swiftで代数学入門 〜 1. 数とは何か？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ハードウェア寄りの仕事に興味があるなら C/C++ のような手続き型の言語もいまだに有効である。
たとえば Google の &lt;a href=&#34;https://www.tensorflow.org/&#34; title=&#34;TensorFlow — an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; のバックエンドは C++ で実装されているそうな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/02/tensorflow/&#34;&gt;TensorFlow に関するブックマーク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと，ものすごく個人的な意見として，手続き型言語なら &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;をお薦めする（笑）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;プログラミング言語 Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基礎をきっちり固めてから「第2言語」や「第3言語」として Java や .NET を学ぶのは悪くない。
将来的にはともかく，現時点で Java は「飯の種」になっているので。
でも，上で挙げたような言語を学んだあとで Java をやったら，間違いなくモニタに向かって中指をおっ立てるハメになるであろう（笑）&lt;/p&gt;

&lt;p&gt;最後に。&lt;/p&gt;

&lt;p&gt;反論は自由ですが，私は関知しません。
言語論争は宗教論争と同じで出口がないからね。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774182427/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774182427.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;WEB+DB PRESS Vol.93&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;腹を括って発注かけました。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-09&#34;&gt;2016-07-09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;今回紹介した以外にも Erlang や Haskell や Scala といった言語も気になっているのだが，私が評価できてないので割愛する（Haskell については&lt;a href=&#34;http://postd.cc/becoming-productive-in-haskell/&#34; title=&#34;Haskellで生産性を高める-Pythonからの移行 | プログラミング | POSTD&#34;&gt;この辺の記事&lt;/a&gt;が参考になるかも）。 Scala は飯の種になりそうな気がして本も買ってるのだが&amp;hellip; Python や Swift のような「いまどき」の言語は multiparadigm programming language と呼ぶそうで，古い資産との整合性を取りやすいのが利点である（Scala なんかモロにそうだよね）。見方を変えるなら，今はもっと大きなパラダイム・シフトの真っ最中であると言うこともできる。故に本当に10年後を見据えた場合に，どれが主流になるかなんて誰も予測できないのではないだろうか。たとえばコーディングを AI がやるようになれば，今ある言語は絶滅し， AI が記述しやすい（かつ人間も読みやすい）言語体系が主流になる可能性だってあるのだ。故に「どの言語か？」という議論はあまり意味がなくて，泡沫のように現れては消える技術トレンドをキチンと押さえておくことが重要である。人間死ぬまで勉強ですよ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>プログラミング言語との付き合い方 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/programming-language/" />
		<id>tag:text.Baldanders.info,2015-11-17:/remark/2015/programming-language/</id>
		<published>2015-11-17T21:52:50+09:00</published>
		<updated>2016-02-18T12:56:03+09:00</updated>
		<summary>こういう話は好きなので便乗してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rentwi.textfile.org/?666213569055166464s&#34;&gt;考えてみると結城はC, Perl, Javaの本は書いたけれど&amp;hellip; - 結城浩の連ツイ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今朝見かけたこれ。
こういう話は好きなので便乗してみる。&lt;/p&gt;

&lt;p&gt;ちなみに，結城浩さんの通称「デザパタ本」はずい分昔に買っている。
お世話になってます。&lt;/p&gt;

&lt;h2 id=&#34;プログラミング言語の-母国語&#34;&gt;プログラミング言語の「母国語」&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;プログラミング言語との付き合い方というのはいろいろあってですね。自分の母国語という言語はある。それから現在学んでいる最中の言語というのもある。そして、仕事用の言語やら、他の人とのコミュニケーション用言語というのもある。そのあたりは、自然言語とちょっと似ている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://rentwi.textfile.org/?666213569055166464s&#34;&gt;考えてみると結城はC, Perl, Javaの本は書いたけれど...&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;個人的に母国語と言えるのはアセンブラとC言語。
私の場合はコードを脳内でインストラクションに翻訳する。
手続き型の言語ならこの「翻訳」をほとんど無意識でできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
だから手続き型の言語であれば知らない言語でも見ればだいたい理解できる。&lt;/p&gt;

&lt;p&gt;逆に，関数型のような非手続き型言語はあまり得意ではないのだが，簡単なものであれば手続き型に翻訳できるので，簡単なものを組み合わせて考えることで，まぁ何とか理解することはできる。&lt;/p&gt;

&lt;h3 id=&#34;ちまりまわるつ&#34;&gt;ちまりまわるつ&lt;/h3&gt;

&lt;p&gt;そういえば，竹本泉さんの作品に『ちまりまわるつ』シリーズというのがある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
このシリーズの世界では「魔法」が科学的（？）に体系化されていて，工場で生産できるようになっている。なので，人力（？）で魔法を使う「魔法使い」は（工場で生産できない高度な魔法を使うことのできる一部の大魔法使いを除いては）古臭い職業として子供たちからは敬遠されている。
魔法使い達は能力でランク分けされていて，低ランクの魔法使いは簡単な呪文で簡単な魔法しか使えない。&lt;/p&gt;

&lt;p&gt;でもここからが竹本泉作品らしいところで，簡単な呪文しか使えない魔法使いも呪文を組み合わせることで高度な魔法を使うことができるのだ（ただし高度な魔法は制御が難しいので，ふつうは使わせてもらえない）。
プログラムに例えるなら，高級言語で1行で書けるプログラムをアセンブラで数十ステップで書くような感じだと思えばよい。&lt;/p&gt;

&lt;p&gt;こういう世界設定を少女漫画でさらっと描いてしまうところが竹本泉さんの凄いところである。&lt;/p&gt;

&lt;h3 id=&#34;目的別の言語&#34;&gt;目的別の言語&lt;/h3&gt;

&lt;p&gt;話が逸れた。&lt;/p&gt;

&lt;p&gt;そういうわけなので個人的に「学んでいる最中の言語」というのはない。
見て理解できるかできないか。
いや，ぺーぺーの新人の頃はアセンブラやC言語を必死こいて学んでいたが，一度基礎ができればあとは全部「応用編」なのである。
そういう意味じゃ「今現在学んでない言語なんかない」とも言えるか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a2&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;私は職業プログラマなので当然「仕事用の言語」というのは存在するが，「コミュニケーション用言語」というのはないな。
『数学ガール』冒頭のミルカさんの登場シーンはなかなかインパクトがあるが，あんな感じだろうか。&lt;/p&gt;

&lt;p&gt;プログラマにとって最も信頼できる言葉は「動くコード」なので，ある意味で「仕事用の言語」が「コミュニケーション用言語」と言えるかもしれない。
ただ，職業プログラマは非プログラマとも話ができないといけない。
というか，大抵の顧客はそう。
顧客の「言語化されない意図」をいかに聞き取れるかが重要。
ホンマ「コミュニケーション用言語」なるものがあるなら欲しいよ。&lt;/p&gt;

&lt;p&gt;あぁでも，&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000869.shtml&#34;&gt;要求開発&lt;/a&gt;で使う「概念モデリング」は「コミュニケーション用言語」と言えなくもない？&lt;/p&gt;

&lt;h2 id=&#34;言語を巡る愛憎&#34;&gt;言語を巡る愛憎&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;自然言語と同じようにプログラミング言語を使う人（要はプログラマ）には、その言語に対する愛情がこもる（愛憎がこもる）。なので、エンジニアリングや効率の話題と思っているのにいつのまにか忠誠心や貢献度みたいな話になることも。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://rentwi.textfile.org/?666213569055166464s&#34;&gt;考えてみると結城はC, Perl, Javaの本は書いたけれど...&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;仕事でプログラミングを行う際に言語を選べることはほとんどない。
顧客が指定してくることもあるし（顧客がコード資産を持っている），プロジェクト管理者が指定してくることもある（すでにある資産を使おうとする）。
そうじゃない場合でも要求と予算と期間とプロジェクトの面子によって（つまりそれを使うメリットとか関係なしに）言語が決まってしまう。&lt;/p&gt;

&lt;p&gt;もし，そういうのが一切ないのなら，今なら &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;か JavaScript/&lt;a href=&#34;http://electron.atom.io/&#34; title=&#34;Electron&#34;&gt;Electron&lt;/a&gt; がいいなぁ。
これらで十分だよね。&lt;/p&gt;

&lt;p&gt;一時期は Ruby も好きだったが，きれいさっぱり忘れてしまった。
今では Ruby の最新バージョンがいくつかさえ知らない。
なんか Rails 以降，凄い面倒くさいイメージがあるんだよね。
ある機能を Ruby で実装した記事を見かけたら，同じ機能を他の言語でもっと簡単にできないか，つい探してしまう。
こういうのが「宗教的」って言われるんだろうな，きっと（笑）&lt;/p&gt;

&lt;p&gt;まぁ，でも，上で書いたように仕事で言語を選べることはほとんどないので，「グダグダ言わずにコード書け」って感じだけど。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【12月21日 追記】&lt;/strong&gt;
フィードバックで Python について言及があったので。
Python は Linux 等では実質的に（少なくとも Ruby よりは）標準言語のようになっているし，資産も豊富なのでちゃんと覚えなきゃなぁ，とは思ってる。
しかし構文にインデントが必須な言語構造はどうしても慣れない。
同じ理由で Haskell や CoffeeScript とかも馴染めない。&lt;/p&gt;

&lt;p&gt;プログラムコードをもっと human-understandable に，という考え方は分からなくもないけど，それなら &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のようにフォーマッタやドキュメントフレームワークを標準で用意するほうが賢いと思う。
私はもうプログラミングで（タブだの全角空白だのも含めた）空白文字に煩わされたくない。&lt;/p&gt;

&lt;p&gt;とはいえ，こういうのは「慣れ」の問題なので，仕事でやれと言われれば喜んでやりますよ。&lt;/p&gt;

&lt;h2 id=&#34;ひとつのプログラミング言語に縛られることの恐さ&#34;&gt;ひとつのプログラミング言語に縛られることの恐さ&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;一つの技術に縛られることの恐さは、エンジニアなら誰でも知っている。では一つのプログラミング言語に縛られることの恐さは知っているか。一つのプログラミング言語がパーフェクトなことはない。時代が変われば要請も変わる。リソース配分は時々刻々変わる。そんな中で何にコミットするか。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://rentwi.textfile.org/?666213569055166464s&#34;&gt;考えてみると結城はC, Perl, Javaの本は書いたけれど...&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;手続き型言語の弱点は「ノイマン型コンピュータ」に最適化されていることだ。&lt;/p&gt;

&lt;p&gt;ノイマン型コンピュータの構造はプロセッサとメモリが分かれているのが特徴で&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;，メモリから命令を順番にプロセッサにフェッチして実行していく。&lt;/p&gt;

&lt;p&gt;もちろん「非ノイマン型コンピュータ」というのもある。
典型的なのは，いわゆるニューロチップである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35073012/&#34;&gt;脳を模したチップ「TrueNorth」でコンピューティング革命を模索するIBM - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こういうタイプのコンピュータは（ノイマン型コンピュータで言うところの）プロセッサとメモリがセットでひとつの素子になっているのが特徴で，しかも素子同士はお互いに非同期で動く。
こういうのが本気で市場に台頭してきたら私のようなロートル・エンジニアはお払い箱だ。&lt;/p&gt;

&lt;h2 id=&#34;若い人が正しい&#34;&gt;若い人が正しい&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;いつの時代でも、若い人は自由だ。何でも選べる。何でも言える。ときにはバカにされるかもしれない。わかってないよと侮られるかもしれない。でも、ほとんどの場合、若い人が正しい。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://rentwi.textfile.org/?666213569055166464s&#34;&gt;考えてみると結城はC, Perl, Javaの本は書いたけれど...&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;先のことは誰にもわからない。
特に今の時代は。
だから「より多くの未来を持っている人」が正しいと言える。
私のように人生の残り時間を勘定している人ではない。&lt;/p&gt;

&lt;p&gt;願わくば「何でも選べる。何でも言える」未来を引き渡したいものである。&lt;/p&gt;

&lt;h2 id=&#34;おまけ-tensorflow-に関するブックマーク&#34;&gt;【おまけ】 TensorFlow に関するブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;#feedback&#34;&gt;フィードバック&lt;/a&gt;で &lt;a href=&#34;http://tensorflow.org/&#34; title=&#34;TensorFlow is an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; について言及があったので，ついでに。&lt;/p&gt;

&lt;p&gt;（この項は「&lt;a href=&#34;http://text.baldanders.info/remark/2016/02/tensorflow/&#34;&gt;TensorFlow に関するブックマーク&lt;/a&gt;」に移動しました）&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EYXMA9I/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41ETMZ7i9qL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EYXMA9I/baldandersinf-22/&#34;&gt;数学ガール&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ株式会社 2014-02-14&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1CM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／フェルマーの最終定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1D6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1D6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ゲーデルの不完全性定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;「数学ガール」シリーズ第1作目。ミルカさん衝撃の登場から分割数まで。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-06-06&#34;&gt;2015/06/06&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:0&#34;&gt;たとえば，C言語では「ポインタ」の概念でよく躓くと言われているが，インストラクションで考えれば実にシンプル。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;多分もう絶版。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:a1&#34;&gt;評価を中断している言語はある。 Erlang とか Scala とか Haskell とか。仕事で絡むようなことがあれば是非やりたい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:a2&#34;&gt;そう考えると，私にとって &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はちょっと例外的かも。今のところ身近に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を使った仕事がないということもあるが，仕事抜きで完全に&lt;a href=&#34;http://text.baldanders.info/golang&#34;&gt;「遊び」でやってる&lt;/a&gt;。はっきり言って C/C++ や初期の Java 以来「これでなに作ろうかな」って思わせる言語に久しぶりに出会った感じ。もっとも，今は仕事が忙しすぎて全然かまってあげられないのだが orz
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b&#34;&gt;キャッシュやパイプライン等の話はとりあえずチャイしてね。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
