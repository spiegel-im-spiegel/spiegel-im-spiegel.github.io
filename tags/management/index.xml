<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of management - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/management/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/management/index.xml" />
	<id>tag:text.Baldanders.info,2019-09-01:/tags</id>
	<updated>2019-09-01T19:39:57+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>Go モジュールのミラーリング・サービス【正式版】</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/mirror-index-and-checksum-database-for-go-module/" />
		<id>tag:text.Baldanders.info,2019-09-01:/golang/mirror-index-and-checksum-database-for-go-module/</id>
		<published>2019-09-01T10:39:57+00:00</published>
		<updated>2020-01-05T11:59:50+00:00</updated>
		<summary>Google による Go モジュールの公式ミラーリング・サービスが正式リリースした。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;（この記事は「&lt;a href=&#34;https://text.baldanders.info/release/2019/05/mirror-index-and-checksum-database-for-go-module/&#34;&gt;Go モジュールのミラーリングとインデックス化&lt;/a&gt;」を全面改訂したものです）&lt;/p&gt;
&lt;p&gt;Google による &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; モジュールの公式ミラーリング・サービスが正式リリースした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/module-mirror-launch&#34;&gt;Module Mirror and Checksum Database Launched - The Go Blog&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://proxy.golang.org/&#34;&gt;&lt;code&gt;proxy.golang.org&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sum.golang.org/&#34;&gt;&lt;code&gt;sum.golang.org&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://index.golang.org/&#34;&gt;&lt;code&gt;index.golang.org&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;モジュール・ミラー&lt;/h2&gt;
&lt;p&gt;ミラー・サーバ &lt;a href=&#34;https://proxy.golang.org/&#34;&gt;&lt;code&gt;proxy.golang.org&lt;/code&gt;&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のモジュールをミラーリングする一種のプロキシ・サーバとして機能する。
ただし，単純な透過プロキシではなく必要なバージョンのみ取ってこれるようになっているようだ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://blog.golang.org/module-mirror-launch&#34;&gt;&lt;img src=&#34;https://blog.golang.org/module-mirror-launch/proxy-protocol.png&#34; srcset=&#34;https://blog.golang.org/module-mirror-launch/proxy-protocol.png 2106w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Module Mirror and Checksum Database Launched&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://blog.golang.org/module-mirror-launch&#34;&gt;Module Mirror and Checksum Database Launched&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ミラー・サーバは環境変数 &lt;code&gt;GOPROXY&lt;/code&gt; で URL を指定する。
&lt;code&gt;GOPROXY&lt;/code&gt; の既定値は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.13 では以下のようになっている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env | grep GOPROXY
GOPROXY=&amp;#34;https://proxy.golang.org,direct&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ミラー・サーバは複数指定できる（指定する場合はカンマで区切る）。
ミラーリングを無効にする場合は &lt;code&gt;GOPROXY&lt;/code&gt; に &lt;code&gt;direct&lt;/code&gt; のみを指定する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;go env -w GOPROXY=direct
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ミラーリングが有効な状態で特定の非公開モジュールを使う場合は &lt;code&gt;GOPRIVATE&lt;/code&gt; に非公開モジュールのパスを指定する。&lt;/p&gt;
&lt;h2&gt;チェックサム・データベース&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では利用するモジュールの完全性（integrity）を担保するために &lt;code&gt;go.sum&lt;/code&gt; ファイルにモジュールの SHA-256 チェックサム値を格納しているが，最初にモジュールをフェッチする場合はチェックサム値が分からないため無条件に信頼せざるを得ない。&lt;/p&gt;
&lt;p&gt;公開されているモジュールのチェックサム値がデータベース化されていれば未知のモジュールに対しても（チェックサム・データベースを参照することで）ある程度の信頼性を確保できるだろう。&lt;/p&gt;
&lt;p&gt;チェックサム・データベースは環境変数 &lt;code&gt;GOSUMDB&lt;/code&gt; で指定する。
&lt;code&gt;GOSUMDB&lt;/code&gt; の既定値は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.13 では以下のようになっている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env | grep GOSUMDB
GOSUMDB=&amp;#34;sum.golang.org&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;チェックサム・データベースを無効にする場合は &lt;code&gt;GOSUMDB&lt;/code&gt; に &lt;code&gt;off&lt;/code&gt; をセットする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;go env -w GOSUMDB=off
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また特定のモジュールを検索対象から除外する場合は，ミラーリング除外のときと同じく &lt;code&gt;GOPRIVATE&lt;/code&gt; が使える。&lt;/p&gt;
&lt;p&gt;公式チェックサム・データベース &lt;a href=&#34;https://sum.golang.org/&#34;&gt;&lt;code&gt;sum.golang.org&lt;/code&gt;&lt;/a&gt; は &lt;a href=&#34;https://github.com/google/trillian&#34; title=&#34;google/trillian: A transparent, highly scalable and cryptographically verifiable data store.&#34;&gt;Trillian&lt;/a&gt; による&lt;a href=&#34;https://research.swtch.com/tlog&#34; title=&#34;research!rsc: Transparent Logs for Skeptical Clients&#34;&gt;透過ログ&lt;/a&gt;（追記型データベース）で改竄に強いという特徴がある。&lt;/p&gt;
&lt;p&gt;まぁ，最初から悪意のあるモジュールは排除しようがないが malicious code 混入は検知しやすくなるかも知れない。&lt;/p&gt;
&lt;h3&gt;【2019-09-06 追記】 バージョンタグの管理に注意&lt;/h3&gt;
&lt;p&gt;上で述べたように標準の &lt;a href=&#34;https://sum.golang.org/&#34;&gt;&lt;code&gt;sum.golang.org&lt;/code&gt;&lt;/a&gt; は追記型のデータベースで，既存データの変更はできない仕様になっている。&lt;/p&gt;
&lt;p&gt;たとえばパッケージ/モジュールのリポジトリにバージョンタグ（&lt;code&gt;v0.1.0&lt;/code&gt; など）を付ける際に，うっかり間違ったコミットにタグを付けたとしても，一度 &lt;a href=&#34;https://sum.golang.org/&#34;&gt;&lt;code&gt;sum.golang.org&lt;/code&gt;&lt;/a&gt; に登録されると取り消すことができない。
手動でタグの位置を変えても，モジュール読み込み時に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;SECURITY ERROR
This download does NOT match the one reported by the checksum server.
The bits may have been replaced on the origin server, or an attacker may
have intercepted the download attempt.

For more information, see &amp;#39;go help module-auth&amp;#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などと表示されビルドに失敗する。&lt;/p&gt;
&lt;p&gt;少なくとも公開されているパッケージ/モジュールでは迂闊にバージョンタグを付け換えないよう，管理は慎重に行う必要がある。&lt;/p&gt;
&lt;h2&gt;ミラーリング・サービスのプライバシー・ポリシー&lt;/h2&gt;
&lt;p&gt;今回，正式稼働したミラーリング・サービスのプライバシー・ポリシーは以下のページある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://proxy.golang.org/privacy&#34;&gt;Privacy: Go modules services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以前はいきなり Google のページに飛ばされて「なんだかなぁ」という感じだったが，多少マシになったようである（笑）&lt;/p&gt;
&lt;p&gt;これによると公式サービスでは以下の情報を収集しているようだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;Request timestamp&lt;/li&gt;
&lt;li&gt;Client IP address&lt;/li&gt;
&lt;li&gt;Full request URL, including:
&lt;ul&gt;
&lt;li&gt;service domain, e.g. proxy.golang.org&lt;/li&gt;
&lt;li&gt;URI path being requested&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Response latency&lt;/li&gt;
&lt;li&gt;Response bytes sent&lt;/li&gt;
&lt;li&gt;Response code sent&lt;/li&gt;
&lt;li&gt;The response returned by the go command when it runs in our systems&lt;/li&gt;
&lt;li&gt;Whether the request hit our frontend cache&lt;/li&gt;
&lt;li&gt;Whether the request hit a cache elsewhere in the system (but not the frontend)&lt;/li&gt;
&lt;li&gt;Name of the Google machine that processed this request, e.g. machine101&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://proxy.golang.org/privacy&#34;&gt;Privacy: Go modules services&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;取得した情報については&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;We do not store logged personally identifiable information such as IP addresses for more than 30 days. We also do not correlate or combine information from our request logs with any personal information that you have provided Google for other services.&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://proxy.golang.org/privacy&#34;&gt;Privacy: Go modules services&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ということらしいが，最後の&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;We intend to aggregate and anonymize usage metrics to measure popularity for Go modules and share this popularity data with the Go community.&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://proxy.golang.org/privacy&#34;&gt;Privacy: Go modules services&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;てのがねぇ。
&lt;a href=&#34;https://text.baldanders.info/remark/2018/04/handling-privacy/&#34; title=&#34;誰がプライバシーを支配するのか&#34;&gt;プライバシーに敵対的な企業&lt;/a&gt;のサービスだと思うとあまり利用したくない気分なのだが（もちろん偏見），はてさて&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2019/06/next-steps-toward-go-2/&#34;&gt;Go 1.13 と 1.14 （Go 2 へ向けて）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/go-env/&#34;&gt;Go 言語の環境変数管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-10-20&#34;&gt;2018-10-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;にしろ（最近ブームが再燃している） Dart 言語にしろ，言語系のプロダクトやサービスは Google から切り離してほしいよなぁ。 Alphabet の傘下から外れろとまでは言わないから。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Ubuntu に KeePassXC を導入する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/08/installing-keepassxc-in-ubuntu/" />
		<id>tag:text.Baldanders.info,2019-08-25:/remark/2019/08/installing-keepassxc-in-ubuntu/</id>
		<published>2019-08-25T03:05:20+00:00</published>
		<updated>2019-09-01T02:09:37+00:00</updated>
		<summary>APT または Snap から導入できるのだが Snap 版を利用したほうがいいみたい。 </summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;以前に &lt;a href=&#34;https://text.baldanders.info/remark/2019/04/mono-in-ubuntu/&#34; title=&#34;Ubuntu に Mono を導入する&#34;&gt;Mono 版の KeePass を導入&lt;/a&gt;する手順を紹介したが Linux 用であればサードパーティの &lt;a href=&#34;https://keepassxc.org/&#34; title=&#34;KeePassXC Password Manager&#34;&gt;KeePassXC&lt;/a&gt; がよさげである。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://keepassxc.org/&#34; title=&#34;KeePassXC Password Manager&#34;&gt;KeePassXC&lt;/a&gt; は &lt;a href=&#34;https://keepass.info/&#34; title=&#34;KeePass Password Safe&#34;&gt;KeePass&lt;/a&gt; のサードパーティ版である KeePassX の fork でマルチプラットフォームに対応している。
Windows や macOS の他，各種 Linux ディストリビューションにも対応しているようだ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; では APT または &lt;a href=&#34;https://github.com/snapcore/snapd&#34; title=&#34;snapcore/snapd: The snapd and snap tools enable systems to work with .snap files.&#34;&gt;Snap&lt;/a&gt; から導入できるのだが&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apt show keepassxc
Package: keepassxc
Version: 2.3.4+dfsg.1-1
Priority: optional
Section: universe/utils
Origin: Ubuntu
Maintainer: Ubuntu Developers &amp;lt;ubuntu-devel-discuss@lists.ubuntu.com&amp;gt;
Original-Maintainer: Julian Andres Klode &amp;lt;jak@debian.org&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ snap find keepassxc
Name             Version  Publisher       Notes  Summary
keepassxc        2.4.3    keepassxreboot  -      community driven port of the windows application “Keepass Password Safe”
keepassx-elopio  2.0.2    elopio          -      KeePassX is a cross platform password safe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ということで &lt;a href=&#34;https://github.com/snapcore/snapd&#34; title=&#34;snapcore/snapd: The snapd and snap tools enable systems to work with .snap files.&#34;&gt;Snap&lt;/a&gt; 版を利用したほうがいいみたい。
というわけで，早速！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo snap install keepassxc
keepassxc 2.4.3 from Jonathan White (keepassxreboot) installed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;これで &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; のメニューから &lt;a href=&#34;https://keepassxc.org/&#34; title=&#34;KeePassXC Password Manager&#34;&gt;KeePassXC&lt;/a&gt; を起動できる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./keepassxc.png&#34;&gt;&lt;img src=&#34;./keepassxc.png&#34; srcset=&#34;./keepassxc.png 800w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;おおっ，日本語だ（笑）&lt;/p&gt;
&lt;p&gt;使い方は本家の &lt;a href=&#34;https://keepass.info/&#34; title=&#34;KeePass Password Safe&#34;&gt;KeePass&lt;/a&gt; とだいたい同じようだ。
ブラウザ連携は今のところ怖くて使う気にならない。
まぁ，そのうち気が向いたらね。&lt;/p&gt;
&lt;p&gt;削除する場合は&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo snap remove keepassxc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;でおｋ。
ちなみにアップグレードは&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo snap refresh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;で &lt;a href=&#34;https://github.com/snapcore/snapd&#34; title=&#34;snapcore/snapd: The snapd and snap tools enable systems to work with .snap files.&#34;&gt;Snap&lt;/a&gt; 管理下にある全てのパッケージを一括でアップグレードできる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/snapcore/snapd&#34; title=&#34;snapcore/snapd: The snapd and snap tools enable systems to work with .snap files.&#34;&gt;Snap&lt;/a&gt; はローカルにリポジトリ・データベースを持たないので（APT に比べて）扱いが簡単なのはいいのだが，こういうアプリ・ストア型のパッケージ管理システムは，どうしてもサービス提供者側の統制が強くなるので，好かんのだよなぁ。
一応 &lt;a href=&#34;https://launchpad.net/ubuntu/+ppas&#34; title=&#34;Personal Package Archives : Ubuntu&#34;&gt;PPA&lt;/a&gt; にも&lt;a href=&#34;https://launchpad.net/~phoerious/+archive/ubuntu/keepassxc&#34; title=&#34;KeePassXC : Janek Bevendorff&#34;&gt;リポジトリがあるみたい&lt;/a&gt;なのだが，うーん&amp;hellip;&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/keepassxreboot/keepassxc&#34;&gt;GitHub - keepassxreboot/keepassxc: KeePassXC is a cross-platform community-driven port of the Windows application “Keepass Password Safe”.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2019/08/ubuntu-1904-146-snap-store5.html&#34;&gt;Ubuntu 19.04 その146 - Snap Storeからインストール可能なセキュリティーアプリ5選 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.mynavi.jp/article/20190825-883052/&#34;&gt;Snapから使いやすいセキュリティソフトウェア5選 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 18.04 以降は標準で &lt;a href=&#34;https://github.com/snapcore/snapd&#34; title=&#34;snapcore/snapd: The snapd and snap tools enable systems to work with .snap files.&#34;&gt;Snap&lt;/a&gt; が入ってるらしい。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>パスワード・マネージャに関する走り書き</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/06/password-manager/" />
		<id>tag:text.Baldanders.info,2019-06-20:/remark/2019/06/password-manager/</id>
		<published>2019-06-20T12:34:14+00:00</published>
		<updated>2020-01-05T11:59:50+00:00</updated>
		<summary>これは Facebook の TL に書いた記事です。今後の考察のためのメモとして残しておきます。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;（これは Facebook の TL に書いた記事です。今後の考察のためのメモとして残しておきます）&lt;/p&gt;
&lt;p&gt;今週のおすすめ記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@stuartschechter/before-you-use-a-password-manager-9f5949ccf168&#34;&gt;Before You Use a Password Manager – Stuart Schechter – Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パスワードおよびパスワード・マネージャによる管理についてよくまとめられている。
パスワード・マネージャの比較表もあるので参考になるだろう。&lt;/p&gt;
&lt;p&gt;セキュリティ専門家の Bruce Schneier 氏はこの記事に対して&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;My particular choices about security and risk is to only store passwords on my computer -- not on my phone -- and not to put anything in the cloud.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2019/06/risks_of_passwo.html&#34;&gt;Risks of Password Managers - Schneier on Security&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と述べておられるが，そんな運用は私には無理。
まぁ，どこまでを自分の制御下に置くかがセキュリティ・トレードオフの勘所なのかもねぇ。&lt;/p&gt;
&lt;p&gt;セキュリティ管理の首根っこを掴まれるのは&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/kyoken/&#34; title=&#34;搾取と狂狷&#34;&gt;搾取&lt;/a&gt;される第一歩だ。
Android が登場した当初，あまりにダサい iTunes と比較して&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「PCを母艦にするのは時代遅れ，これからはクラウドが母艦の時代」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と思ったものだが「監視資本主義」が台頭する今では認識を少し改めたほうがいいかもしれない。&lt;/p&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01MZGVHOA?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51T6PBdGbyL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01MZGVHOA?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;超監視社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 池村 千秋 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;草思社 2016-12-13 (Release 2017-02-03)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01MZGVHOA (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-03-23&#34;&gt;2019-03-23&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 超監視社会 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;&lt;img src=&#34;https://tatsu-zine.com/images/books/877/cover_s.jpg&#34; width=&#34;106&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;yomoyomo (著)&lt;/dd&gt;
    &lt;dd&gt;達人出版会 2017-12-25 (Release 2019-03-02)&lt;/dd&gt;
    &lt;dd&gt;デジタル書籍&lt;/dd&gt;
    &lt;dd&gt;infoshare2 (tatsu-zine.com)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://wirelesswire.jp/author/yomoyomo/&#34;&gt;WirelessWire News 連載&lt;/a&gt;の書籍化。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2019/01/infoshare2/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-31&#34;&gt;2018-12-31&lt;/abbr&gt;&lt;/p&gt;
&lt;/div&gt; &lt;!-- 続・情報共有の未来 --&gt;
</content>
	</entry><entry>
		<title>新しい OpenPGP 鍵サーバが Launch したらしい</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/06/launching-a-new-openpgp-key-server/" />
		<id>tag:text.Baldanders.info,2019-06-13:/remark/2019/06/launching-a-new-openpgp-key-server/</id>
		<published>2019-06-13T13:19:09+00:00</published>
		<updated>2020-01-05T11:59:50+00:00</updated>
		<summary>これで思い出すのが，かつての OpenPKSD だが，今回の keys.openpgp.org がその二の舞にならないことを祈るばかりである。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://www.ietf.org/mailman/listinfo/openpgp&#34;&gt;OpenPGP のメーリングリスト&lt;/a&gt;より。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mailarchive.ietf.org/arch/msg/openpgp/1cQeIV8s81lhwG_FQtMuc2JbRSk&#34;&gt;Launching a new keyserver on keys.openpgp.org!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://keys.openpgp.org/about/news#2019-06-12-launch&#34;&gt;Launching a new keyserver! - keys.openpgp.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/sequoia-pgp/hagrid&#34;&gt;sequoia-pgp / hagrid · GitLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;Fast and reliable. No wait times, no downtimes, no inconsistencies.&lt;/li&gt;
&lt;li&gt;Precise. Searches return only a single key, which allows for easy key discovery.&lt;/li&gt;
&lt;li&gt;Validating. Identities are only published with consent, while non-identity information is freely distributed.&lt;/li&gt;
&lt;li&gt;Deletable. Users can delete personal information with a simple e-mail confirmation.&lt;/li&gt;
&lt;li&gt;Built on Rust, powered by &lt;a href=&#34;https://sequoia-pgp.org/&#34;&gt;Sequoia PGP&lt;/a&gt; - free and open source, running AGPLv3.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://keys.openpgp.org/about/news#2019-06-12-launch&#34;&gt;Launching a new keyserver!&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ほほう。
Rust ベースなのか。
面白いな。&lt;/p&gt;
&lt;p&gt;現行の &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 鍵サーバ同士は peer-to-peer で同期しているが，新しい &lt;a href=&#34;https://keys.openpgp.org&#34;&gt;keys.openpgp.org&lt;/a&gt; はこれらとは別のネットワークを形成するようだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;We created keys.openpgp.org to provide an alternative to the SKS Keyserver pool, which is the default in many applications today. This distributed network of keyservers has been struggling with &lt;a href=&#34;https://medium.com/@mdrahony/are-sks-keyservers-safe-do-we-need-them-7056b495101c&#34;&gt;abuse&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Key_server_(cryptographic)#Problems_with_keyservers&#34;&gt;performance&lt;/a&gt;, as well as &lt;a href=&#34;http://www.openwall.com/lists/oss-security/2017/12/10/1&#34;&gt;privacy issues&lt;/a&gt;, and more recently also &lt;a href=&#34;http://nongnu.13855.n7.nabble.com/SKS-apocalypse-mitigation-td228252.html&#34;&gt;GDPR&lt;/a&gt; compliance questions. Kristian Fiskerstrand has done a stellar job maintaining the pool for &lt;a href=&#34;https://blog.sumptuouscapital.com/2016/12/10-year-anniversary-for-sks-keyservers-net/&#34;&gt;more than ten years&lt;/a&gt;, but at this point development activity seems to have &lt;a href=&#34;https://bitbucket.org/skskeyserver/sks-keyserver/pull-requests/60/clean-build-with-405&#34;&gt;mostly ceased&lt;/a&gt;.&lt;br&gt;
We thought it time to consider a fresh approach to solve these problems.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://keys.openpgp.org/about/news#2019-06-12-launch&#34;&gt;Launching a new keyserver!&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;さらに&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The keys.openpgp.org keysever will receive first-party support in upcoming releases of &lt;a href=&#34;https://enigmail.net/&#34;&gt;Enigmail&lt;/a&gt; for Thunderbird, as well as &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.sufficientlysecure.keychain&amp;hl=en&#34;&gt;OpenKeychain&lt;/a&gt; on Android. This means users of those implementations will benefit from the faster response times, and improved key discovery by e-mail address. We hope that this will also give us some momentum to build this project into a bigger community effort. &lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://keys.openpgp.org/about/news#2019-06-12-launch&#34;&gt;Launching a new keyserver!&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ということで &lt;a href=&#34;https://enigmail.net/&#34;&gt;Enigmail&lt;/a&gt; や &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.sufficientlysecure.keychain&#34; title=&#34;OpenKeychain: Easy PGP - Google Play&#34;&gt;OpenKeychain&lt;/a&gt; と連携するのであれば期待できそうな感じである。
ただし，いまのところ &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; との相性がイマイチのようなので，もう少し様子を見たいところではある。&lt;/p&gt;
&lt;p&gt;これで思い出すのが，かつての &lt;a href=&#34;https://www.ipa.go.jp/security/fy16/development/openPKSD/&#34; title=&#34;信頼できるOpenPGP公開鍵を提供する公開鍵サーバOpenPKSD Trusted Keyserver：IPA 独立行政法人 情報処理推進機構&#34;&gt;OpenPKSD&lt;/a&gt; だが，日本主導でフル Ruby で組まれていて割と期待してたんだが，世界的にはあまり注目されないまま閉鎖されたんだよなぁ。
今回の &lt;a href=&#34;https://keys.openpgp.org&#34;&gt;keys.openpgp.org&lt;/a&gt; がそうならないことを祈るばかりである。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
</content>
	</entry><entry>
		<title>そろそろ Vuls を唱えるか</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/06/cast-vuls/" />
		<id>tag:text.Baldanders.info,2019-06-02:/remark/2019/06/cast-vuls/</id>
		<published>2019-06-02T13:22:06+00:00</published>
		<updated>2019-06-02T13:22:42+00:00</updated>
		<summary>セットアップ自体はうまく行ったが，このままでは使えないなぁ。しょうがない。少しずつ調べてみるか。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 関連の脆弱性情報は以下のサイトで収集できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.debian.org/security/&#34;&gt;Debian &amp;ndash; Security Information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://usn.ubuntu.com/&#34;&gt;Ubuntu security notices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのサイトの脆弱性情報はとても有用なのだが，パッケージ単位の情報なのでパッケージ間の依存関係が分かってないと何がどう影響するか分かりにくい。
更に上のサイトを見ただけでは深刻度が分からない（CVE 番号から調べることは可能）。
更に更に言うと &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; の各パッケージは古いバージョンに対してバックポートティングをかけて脆弱性を手当している場合もあり，パッケージのバージョン番号を見ただけでは分かりにくかったりする。&lt;/p&gt;
&lt;p&gt;つまり CVE や OVAL や各ディストリビューションが提供する情報を統合管理する必要があるのだが，手動でこれをやるのは骨が折れる。
今回は個人のデスクトップ PC だけだから管理も比較的楽だけど，複数のサーバ（クラウド環境も併せて）を管理するとか気が遠くなる。
つか，もはや手動で管理とかあり得ないだろう。&lt;/p&gt;
&lt;p&gt;というわけで，そろそろ &lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; を唱えてみるか。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; とは&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://vuls.io/&#34;&gt;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; は脆弱性の検知を行うツールで，ほぼ &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で組まれているのが特徴である。
複数のサーバに対して脆弱性の有無を一括スキャンすることが可能という実にサーバ管理者に優しいつくりになっている。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://github.com/future-architect/vuls&#34;&gt;&lt;img src=&#34;./vuls-abstract.png&#34; srcset=&#34;./vuls-abstract.png 1100w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;future-architect/vuls: Agent-less vulnerability scanner for Linux/FreeBSD/WordPress/Programming language libraries/Network devices&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://github.com/future-architect/vuls&#34;&gt;future-architect/vuls: Agent-less vulnerability scanner for Linux/FreeBSD/WordPress/Programming language libraries/Network devices&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; 本体はシングル・バイナリだが CVE や OVAL などの脆弱性情報を収集するツール群と組み合わせて使うことを前提としている。
また最近では &lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; を含むツール群を SaaS 化した FutureVuls なる商用サービスも登場している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://vuls.biz/&#34;&gt;FutureVuls - Vulsクラウドサービス [Vuls SaaS]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は &lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; の基本機能でローカル PC の脆弱性管理を行ってみたいと思う。&lt;/p&gt;
&lt;h2&gt;【前準備】 ディレクトリの作成&lt;/h2&gt;
&lt;p&gt;まず前準備として &lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; を含むツール群が出力するデータベースを置くディレクトリ &lt;code&gt;~/vuls&lt;/code&gt; を作成しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ mkdir ~/vuls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次に各ツールが吐き出すログの出力先ディレクトリを作っておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo mkdir /var/log/vuls
$ sudo chown username:username /var/log/vuls
$ sudo chmod 700 /var/log/vuls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo mkdir /var/log/gost
$ sudo chown username:username /var/log/gost
$ sudo chmod 700 /var/log/gost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo mkdir /var/log/go-exploitdb
$ sudo chown username:username /var/log/go-exploitdb
$ sudo chmod 700 /var/log/go-exploitdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;CVE 情報の収集&lt;/h2&gt;
&lt;p&gt;CVE 情報の収集には &lt;a href=&#34;https://github.com/kotakanbe/go-cve-dictionary&#34; title=&#34;kotakanbe/go-cve-dictionary: Build a local copy of CVE (NVD and Japanese JVN). Server mode for easy querying.&#34;&gt;go-cve-dictionary&lt;/a&gt; を使う。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://github.com/kotakanbe/go-cve-dictionary&#34; title=&#34;kotakanbe/go-cve-dictionary: Build a local copy of CVE (NVD and Japanese JVN). Server mode for easy querying.&#34;&gt;go-cve-dictionary&lt;/a&gt; のセットアップ&lt;/h3&gt;
&lt;p&gt;ソースコードからのインストール方法については色々説明があるが，最近のバージョンはバイナリも提供しているようである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kotakanbe/go-cve-dictionary/releases&#34;&gt;Releases · kotakanbe/go-cve-dictionary · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これをありがたく使わせてもらおう。
いやぁ &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のツールは取り回しが楽でいいね。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://github.com/kotakanbe/go-cve-dictionary&#34; title=&#34;kotakanbe/go-cve-dictionary: Build a local copy of CVE (NVD and Japanese JVN). Server mode for easy querying.&#34;&gt;go-cve-dictionary&lt;/a&gt; による CVE 情報の収集&lt;/h3&gt;
&lt;p&gt;たとえば2002年以降の CVE 情報を収集し SQLite のデータベースファイル &lt;code&gt;~/vuls/cve.sqlite3&lt;/code&gt; へ格納するには以下の一行スクリプトを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ for i in `seq 2002 $(date +&amp;#34;%Y&amp;#34;)`; do go-cve-dictionary fetchnvd -dbpath ~/vuls/cve.sqlite3 -years $i; done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ものごっつ時間がかかるので，ここらでお茶の時間にしよう。&lt;/p&gt;
&lt;h2&gt;OVAL 情報の収集&lt;/h2&gt;
&lt;p&gt;OVAL 情報の収集には &lt;a href=&#34;https://github.com/kotakanbe/goval-dictionary&#34; title=&#34;kotakanbe/goval-dictionary: Build a local copy of OVAL. Server mode for easy querying.&#34;&gt;goval-dictionary&lt;/a&gt; を使う。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://github.com/kotakanbe/goval-dictionary&#34; title=&#34;kotakanbe/goval-dictionary: Build a local copy of OVAL. Server mode for easy querying.&#34;&gt;goval-dictionary&lt;/a&gt; のセットアップ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kotakanbe/goval-dictionary&#34; title=&#34;kotakanbe/goval-dictionary: Build a local copy of OVAL. Server mode for easy querying.&#34;&gt;goval-dictionary&lt;/a&gt; もバイナリがリリースされているのだが，バイナリ・リリースされているバージョンでは &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 19 に対応していないようなので，最新ソースを取ってきてビルドする必要がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd $GOPATH/src/github.com/kotakanbe
$ git clone https://github.com/kotakanbe/goval-dictionary.git
$ cd gost/
$ make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行モジュールは &lt;code&gt;$GOPATH/bin&lt;/code&gt; ディレクトリにインストールされる。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://github.com/kotakanbe/goval-dictionary&#34; title=&#34;kotakanbe/goval-dictionary: Build a local copy of OVAL. Server mode for easy querying.&#34;&gt;goval-dictionary&lt;/a&gt; による OVAL 情報の収集&lt;/h3&gt;
&lt;p&gt;ディストリビューションおよびそのバージョンごとに  OVAL 情報を収集する。
たとえば &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; なら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ goval-dictionary fetch-ubuntu -dbpath ~/vuls/oval.sqlite3 12 14 16 18 19
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとする。
他にも &lt;code&gt;fetch-alpine&lt;/code&gt;, &lt;code&gt;fetch-amazon&lt;/code&gt;, &lt;code&gt;fetch-debian&lt;/code&gt;, &lt;code&gt;fetch-oracle&lt;/code&gt;, &lt;code&gt;fetch-redhat&lt;/code&gt;, &lt;code&gt;fetch-suse&lt;/code&gt; といったディストリビューションに対応している。&lt;/p&gt;
&lt;h2&gt;ディストリビューション別セキュリティ情報の収集&lt;/h2&gt;
&lt;p&gt;ディストリビューション毎のセキュリティ情報の収集には &lt;a href=&#34;https://github.com/knqyf263/gost&#34; title=&#34;knqyf263/gost: Build a local copy of Security Tracker. Notify via E-mail/Slack if there is an update.&#34;&gt;gost (go-security-tracker)&lt;/a&gt; を使う。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://github.com/knqyf263/gost&#34; title=&#34;knqyf263/gost: Build a local copy of Security Tracker. Notify via E-mail/Slack if there is an update.&#34;&gt;gost&lt;/a&gt; のセットアップ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/knqyf263/gost&#34; title=&#34;knqyf263/gost: Build a local copy of Security Tracker. Notify via E-mail/Slack if there is an update.&#34;&gt;gost&lt;/a&gt; はソースコードのみのリリースなのでビルドを行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd $GOPATH/src/github.com/knqyf263
$ git clone https://github.com/knqyf263/gost.git
$ cd gost/
$ make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行モジュールは &lt;code&gt;GOPATH/bin&lt;/code&gt; ディレクトリにインストールされる。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://github.com/knqyf263/gost&#34; title=&#34;knqyf263/gost: Build a local copy of Security Tracker. Notify via E-mail/Slack if there is an update.&#34;&gt;gost&lt;/a&gt; によるセキュリティ情報の収集&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/knqyf263/gost&#34; title=&#34;knqyf263/gost: Build a local copy of Security Tracker. Notify via E-mail/Slack if there is an update.&#34;&gt;gost&lt;/a&gt; では &lt;code&gt;redhat&lt;/code&gt;, &lt;code&gt;debian&lt;/code&gt;, &lt;code&gt;microsoft&lt;/code&gt; のセキュリティ情報の収集を行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gost fetch debian --dbpath ~/vuls/gost.sqlite3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; のセキュリティ情報収集については TODO 扱いになっているようだ。
今後に期待しよう。&lt;/p&gt;
&lt;h2&gt;Exploit 情報の収集&lt;/h2&gt;
&lt;p&gt;Exploit 情報の収集には &lt;a href=&#34;https://github.com/mozqnet/go-exploitdb&#34; title=&#34;mozqnet/go-exploitdb&#34;&gt;go-exploitdb&lt;/a&gt; を使う。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://github.com/mozqnet/go-exploitdb&#34; title=&#34;mozqnet/go-exploitdb&#34;&gt;go-exploitdb&lt;/a&gt; のセットアップ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mozqnet/go-exploitdb&#34; title=&#34;mozqnet/go-exploitdb&#34;&gt;go-exploitdb&lt;/a&gt; はソースコードのみのリリースなのでビルドを行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd $GOPATH/src/github.com/mozqnet
$ git clone https://github.com/mozqnet/go-exploitdb.git
$ cd go-exploitdb/
$ make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行モジュールは &lt;code&gt;GOPATH/bin&lt;/code&gt; ディレクトリにインストールされる。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://github.com/mozqnet/go-exploitdb&#34; title=&#34;mozqnet/go-exploitdb&#34;&gt;go-exploitdb&lt;/a&gt; によるセキュリティ情報の収集&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mozqnet/go-exploitdb&#34; title=&#34;mozqnet/go-exploitdb&#34;&gt;go-exploitdb&lt;/a&gt; では &lt;code&gt;awesomepoc&lt;/code&gt;, &lt;code&gt;exploitdb&lt;/code&gt;, &lt;code&gt;githubrepos&lt;/code&gt; を対象に Exploit 情報の収集を行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go-exploitdb fetch exploitdb --dbpath ~/vuls/go-exploitdb.sqlite3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; でローカル PC をスキャンする&lt;/h2&gt;
&lt;p&gt;さて，いよいよ &lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; を唱えるときが来た（笑）&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; のセットアップ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; はバイナリがリリースされている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/future-architect/vuls/releases&#34;&gt;Releases · future-architect/vuls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ありがたや。&lt;/p&gt;
&lt;p&gt;次にスキャン対象のマシンへのアクセスを定義する &lt;code&gt;~/vuls/config.toml&lt;/code&gt; 設定ファイルを作成する。
今回はローカル PC のみのスキャンなので以下のような記述にする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;localhost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;host&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;local&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;スキャン対象は複数指定可能で，たとえば対象に ssh 接続する場合は以下のような内容になるようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remotehost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;host&lt;/span&gt;         &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;remotehost&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;22&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;keyPath&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/home/username/.ssh/id_rsa&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;設定が正しいかどうかチェックしておこう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd ~/vuls
$ vuls configtest
[Jun  2 18:07:05]  INFO [localhost] Validating config...
[Jun  2 18:07:05]  INFO [localhost] Detecting Server/Container OS... 
[Jun  2 18:07:05]  INFO [localhost] Detecting OS of servers... 
[Jun  2 18:07:05]  INFO [localhost] (1/1) Detected: localhost: ubuntu 19.04
[Jun  2 18:07:05]  INFO [localhost] Detecting OS of containers... 
[Jun  2 18:07:05]  INFO [localhost] Checking Scan Modes...
[Jun  2 18:07:05]  INFO [localhost] Checking dependencies...
[Jun  2 18:07:05]  INFO [localhost] Dependencies... Pass
[Jun  2 18:07:05]  INFO [localhost] Checking sudo settings...
[Jun  2 18:07:05]  INFO [localhost] sudo ... No need
[Jun  2 18:07:05]  INFO [localhost] It can be scanned with fast scan mode even if warn or err messages are displayed due to lack of dependent packages or sudo settings in fast-root or deep scan mode
[Jun  2 18:07:05]  INFO [localhost] Scannable servers are below...
localhost 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;んー，エラーにはなっていないみたいだし，こんな感じでいいのかな。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://vuls.io/&#34; title=&#34;Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD&#34;&gt;Vuls&lt;/a&gt; でローカル PC をスキャンする&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;configtest&lt;/code&gt; も問題なさそうだし，実際にスキャンをかけてみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd ~/vuls
$ vuls scan
[Jun  2 20:24:26]  INFO [localhost] Start scanning
[Jun  2 20:24:26]  INFO [localhost] config: /home/username/vuls/config.toml
[Jun  2 20:24:26]  INFO [localhost] Validating config...
[Jun  2 20:24:26]  INFO [localhost] Detecting Server/Container OS... 
[Jun  2 20:24:26]  INFO [localhost] Detecting OS of servers... 
[Jun  2 20:24:26]  INFO [localhost] (1/1) Detected: localhost: ubuntu 19.04
[Jun  2 20:24:26]  INFO [localhost] Detecting OS of containers... 
[Jun  2 20:24:26]  INFO [localhost] Checking Scan Modes... 
[Jun  2 20:24:26]  INFO [localhost] Detecting Platforms... 
[Jun  2 20:24:27]  INFO [localhost] (1/1) localhost is running on other
[Jun  2 20:24:27]  INFO [localhost] Scanning vulnerabilities... 
[Jun  2 20:24:27]  INFO [localhost] Scanning vulnerable OS packages...
[Jun  2 20:24:27]  INFO [localhost] Scanning in fast mode


One Line Summary
================
localhost	ubuntu19.04	2173 installed




To view the detail, vuls tui is useful.
To send a report, run vuls report -h.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よしよし。
うまく行ったようである。&lt;/p&gt;
&lt;p&gt;スキャン結果を簡易表示してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd ~/vuls
$ vuls report -format-one-line-text
[Jun  2 20:30:18]  INFO [localhost] Validating config...
[Jun  2 20:30:18]  INFO [localhost] Loaded: /home/username/vuls/results/2019-06-02T20:30:15+09:00
[Jun  2 20:30:18]  INFO [localhost] Validating db config...
INFO[0000] -cvedb-type: sqlite3, -cvedb-url: , -cvedb-path: /home/username/vuls/cve.sqlite3 
INFO[0000] -ovaldb-type: sqlite3, -ovaldb-url: , -ovaldb-path: /home/username/vuls/oval.sqlite3 
INFO[0000] -gostdb-type: sqlite3, -gostdb-url: , -gostdb-path: /home/username/vuls/gost.sqlite3 
INFO[0000] -exploitdb-type: sqlite3, -exploitdb-url: , -exploitdb-path: /home/username/vuls/go-exploitdb.sqlite3 
INFO[06-02|20:30:18] Opening DB.                              db=sqlite3
INFO[06-02|20:30:18] Migrating DB.                            db=sqlite3
INFO[06-02|20:30:18] Opening Database.                        db=sqlite3
INFO[06-02|20:30:18] Migrating DB.                            db=sqlite3
[Jun  2 20:30:18]  INFO [localhost] OVAL is fresh: ubuntu 19.04 
[Jun  2 20:30:26]  INFO [localhost] localhost: 220 CVEs are detected with OVAL
[Jun  2 20:30:26]  INFO [localhost] localhost: 0 CVEs are detected with CPE
[Jun  2 20:30:26]  INFO [localhost] localhost: 0 CVEs are detected with GitHub Security Alerts
[Jun  2 20:30:26]  INFO [localhost] localhost: 0 unfixed CVEs are detected with gost
[Jun  2 20:30:26]  INFO [localhost] Fill CVE detailed information with CVE-DB
[Jun  2 20:30:27]  INFO [localhost] Fill exploit information with Exploit-DB
[Jun  2 20:30:27]  INFO [localhost] localhost: 13 exploits are detected
[Jun  2 20:30:27]  INFO [localhost] localhost: en: 0, ja: 0 alerts are detected


One Line Summary
================
localhost	Total: 220 (High:26 Medium:172 Low:22 ?:0)	0/220 Fixed	2173 installed	13 exploits	en: 0, ja: 0 alerts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ありゃりゃ。
最新状態にしているにも関わらず220もひっかかるとか。&lt;/p&gt;
&lt;p&gt;もう少し詳細に見るには TUI モードにするとよい&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd ~/vuls
$ vuls tui
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./vuls-tui.png&#34;&gt;&lt;img src=&#34;./vuls-tui.png&#34; srcset=&#34;./vuls-tui.png 1272w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;うーむ。
どうも &lt;code&gt;report&lt;/code&gt; がまともに機能してないっぽい？ これってやっぱ &lt;a href=&#34;https://github.com/knqyf263/gost&#34; title=&#34;knqyf263/gost: Build a local copy of Security Tracker. Notify via E-mail/Slack if there is an update.&#34;&gt;gost&lt;/a&gt; が &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; に対応してないせいなのかな（状態のほぼ全てが &lt;code&gt;unfixed&lt;/code&gt; になっている）。&lt;/p&gt;
&lt;p&gt;このままではちょっと使えないなぁ。
しょうがない。
少しずつ調べてみるか。&lt;/p&gt;
&lt;p&gt;今回はここまで。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/sadayuki-matsuno/items/0bb8bb1689425bb9a21c&#34;&gt;あなたのサーバは本当に安全ですか？今もっともイケてる脆弱性検知ツールVulsを使ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2018/futurevuls&#34;&gt;FutureVuls(脆弱性管理サービス) Advent Calendar 2018 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vuls.io/docs/ja/tutorial-local-scan.html&#34;&gt;Tutorial - Local Scan Mode · Vuls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;TUI モードを終了するには &lt;code&gt;ctrl+c&lt;/code&gt; を入力すれば良い。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Go モジュールのミラーリングとインデックス化</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2019/05/mirror-index-and-checksum-database-for-go-module/" />
		<id>tag:text.Baldanders.info,2019-05-31:/release/2019/05/mirror-index-and-checksum-database-for-go-module/</id>
		<published>2019-05-31T14:15:13+00:00</published>
		<updated>2020-01-05T11:59:50+00:00</updated>
		<summary>モジュールのミラーリング・サービスは各所で公開されているモジュールのミラーリングを行うためのプロキシ・サーバの一種で，現在ベータ版である Go 1.13 では既定で有効になっているそうだ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;（この記事は &lt;a href=&#34;https://text.baldanders.info/golang/mirror-index-and-checksum-database-for-go-module/&#34; title=&#34;Go モジュールのミラーリングとインデックス化&#34;&gt;golang セクションから移動&lt;/a&gt;させてきたものである）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; モジュールのミラーリングとインデックス化を行うためのサービスがベータ・リリースされたようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/0wo8cOhGuAI&#34;&gt;Go Module Mirror and Checksum Database in Beta! - Google Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2019-09-01 追記】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2019年8月に &lt;a href=&#34;https://proxy.golang.org/&#34;&gt;proxy.golang.org&lt;/a&gt;, &lt;a href=&#34;https://sum.golang.org/&#34;&gt;sum.golang.org&lt;/a&gt; および &lt;a href=&#34;https://index.golang.org/&#34;&gt;index.golang.org&lt;/a&gt; が正式にサービスを開始した。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/module-mirror-launch&#34;&gt;Module Mirror and Checksum Database Launched - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;これは “&lt;a href=&#34;https://blog.golang.org/modules2019&#34; title=&#34;Go Modules in 2019 - The Go Blog&#34;&gt;Go Modules in 2019&lt;/a&gt;” で予告されていたものだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;We are planning to launch a mirror service for publicly-available modules in 2019.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://blog.golang.org/modules2019&#34;&gt;Go Modules in 2019&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;モジュールのミラー・サービスは各所で公開されているモジュールのミラーリングを行うためのプロキシ・サーバの一種で，現在ベータ版である &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.13 では既定で有効になっているそうだ。
それ以前のバージョン（1.12 ?）では環境変数 &lt;code&gt;GOPROXY&lt;/code&gt; に &lt;a href=&#34;https://proxy.golang.org/&#34; title=&#34;Go modules services&#34;&gt;&lt;code&gt;https://proxy.golang.org&lt;/code&gt;&lt;/a&gt; をセットすることで有効になるらしい（試してない）。&lt;/p&gt;
&lt;p&gt;更に，モジュールのインデックス・サービスも開始される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://index.golang.org/&#34;&gt;&lt;code&gt;index.golang.org&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クエリに対して JSON データを返す仕様なのかな。&lt;/p&gt;
&lt;p&gt;更に更に，モジュールのチェックサム値をデータベース化してモジュールの検証に使えるようにするようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sum.golang.org/&#34;&gt;&lt;code&gt;sum.golang.org&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;チェックサム値をデータベースとして保持っておくことでモジュールの完全性を担保し，コードの改竄を検知しやすくする目的があると思われる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
チェックサム・データベースの利用については &lt;a href=&#34;https://godoc.org/golang.org/x/exp/sumdb/gosumcheck&#34; title=&#34;gosumcheck - GoDoc&#34;&gt;gosumcheck&lt;/a&gt; というツールが提供されている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go get golang.org/x/exp/sumdb/gosumcheck
$ gosumcheck /path/to/go.sum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これらのサービスのプライバシー・ポリシーについては &lt;a href=&#34;http://proxy.golang.org/privacy&#34;&gt;&lt;code&gt;proxy.golang.org/privacy&lt;/code&gt;&lt;/a&gt; を参照しろとあるが，この URL を叩くと &lt;a href=&#34;https://policies.google.com/privacy&#34;&gt;Google のプライバシー・ポリシー&lt;/a&gt;のページに飛ばされる。
まぁ Google のサービスなんだから当然だろうけど，&lt;a href=&#34;https://text.baldanders.info/remark/2018/04/handling-privacy/&#34; title=&#34;誰がプライバシーを支配するのか&#34;&gt;プライバシーに敵対的な企業&lt;/a&gt;のサービスだと思うとあまり利用したくない気分&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;モジュールのミラーリングやインデックス化はそれぞれ単体のサービスではなく，モジュールを中心とした生態系（module ecosystem）を構築するための部品と考えるのがいいだろう。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.13 以降からはモジュール周りが更に大きく変わりそうである。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/25530-sumdb.md&#34;&gt;Proposal: Secure the Public Go Module Ecosystem&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/release/2019/06/next-steps-toward-go-2/&#34;&gt;Go 1.13 と 1.14 （Go 2 へ向けて）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-10-20&#34;&gt;2018-10-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B013URFRLQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;[まとめ買い] 超人ロック　ミラーリング&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;聖 悠紀 (著)&lt;/dd&gt;
    &lt;dd&gt;&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B013URFRLQ (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「エレナ」続編。分散 AI といえばこれだよね。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-12-28&#34;&gt;2017-12-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- [まとめ買い] 超人ロック　ミラーリング --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;本当に完全性を担保したいなら電子署名と組み合わせるべきだと思うけどね。まぁ，そこまで厳密な管理は（今のところ）要らないと考えているのだろう。今や GnuPG と OpenSSH と Git はワンセットなので（&lt;a href=&#34;https://text.baldanders.info/openpgp/using-gnupg-for-windows-2/&#34; title=&#34;GnuPG for Windows : gpg-agent について&#34;&gt;OpenSSH の鍵は GnuPG で管理可能&lt;/a&gt;） OpenPGP で電子署名すればいいじゃない，と思うのだが。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;にしろ（最近ブームが再燃している） Dart 言語にしろ，言語系のプロダクトやサービスは Google から切り離してほしいよなぁ。 Alphabet の傘下から外れろとまでは言わないから。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>「ヒト」こそがセキュリティの最強点</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/05/incident-response/" />
		<id>tag:text.Baldanders.info,2019-05-30:/remark/2019/05/incident-response/</id>
		<published>2019-05-30T12:51:57+00:00</published>
		<updated>2020-01-05T11:59:50+00:00</updated>
		<summary>こんな15年くらい前の腐ったセキュリティ事例を目の当たりにできるとは思わなかったが，「他山の石」とでも思って今後の私達の活動に活かしていきたいものである。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今夜はリリースされたばかりの『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B07RWSCKKG/baldandersinf-22/&#34;&gt;賢者の弟子を名乗る賢者 11&lt;/a&gt;』でも読んでのんびり過ごそうと思っていたのだが，面白そうな話が上がっているので便乗してみる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2019/05/30/063417&#34;&gt;ヤマダ電機通販サイトの不正アクセスについてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さすが &lt;a href=&#34;https://piyolog.hatenadiary.jp/&#34;&gt;piyolog&lt;/a&gt; さんは早いなぁ。&lt;/p&gt;
&lt;p&gt;この記事を見かけたのが朝の忙しい時間帯だったこともあり，タイトルだけを見て「やらかしてら」くらいの感想しかなかったのだが，どうも「ヤマダ電機はクレカのセキュリティ・コードまで保持っていて丸ごとそれらを抜かれたらしい」という噂になっていたようだ。&lt;/p&gt;
&lt;p&gt;が，実際にはこれはマスメディアの報道からくる誤解らしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://news.yahoo.co.jp/byline/shinoharashuji/20190530-00127999/&#34;&gt;ヤマダ電機のクレジットカード情報流出事件、「セキュリティコードを保存」の誤解広がる(篠原修司) - 個人 - Yahoo!ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例によってマスメディアの中途半端で杜撰な報道をネットメディア（Twitter 等を含む）が増幅しフェイク化するといういつもの展開なわけだが，語るのも面倒なので，こちらは無視する。&lt;/p&gt;
&lt;p&gt;問題はヤマダ電機側がインシデントを認知してから実際にクレカ運用を止めるまでに10日かかっていること，そこから警察に届けるまで（例の10連休を挟んで）10日，そこからユーザに告知するまでに20日以上もかかっていることだ。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;日時&lt;/th&gt;
&lt;th&gt;出来事&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2019年3月18日までに&lt;/td&gt;
&lt;td&gt;ヤマダウェブコム・ヤマダモールが不正アクセスを受け、ペイメントアプリケーションが改ざんされる。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;：&lt;/td&gt;
&lt;td&gt;カード情報流出の可能性がある対象期間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2019年4月16日&lt;/td&gt;
&lt;td&gt;クレジットカード会社より情報流出の疑義について連絡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;同日&lt;/td&gt;
&lt;td&gt;ヤマダ電機が情報漏えいの可能性を把握。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;：&lt;/td&gt;
&lt;td&gt;カード情報流出の可能性がある対象期間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2019年4月26日&lt;/td&gt;
&lt;td&gt;ヤマダウェブコム・ヤマダモールでシステムメンテナンス。カード登録を休止する措置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;同日&lt;/td&gt;
&lt;td&gt;ヤマダ電機がP.C.F.FRONTEOへ不正アクセスの調査を依頼。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2019年5月7日&lt;/td&gt;
&lt;td&gt;ヤマダ電機が警察へ被害相談。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2019年5月20日&lt;/td&gt;
&lt;td&gt;P.C.F.FRONTEOによる調査が完了。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2019年5月22日&lt;/td&gt;
&lt;td&gt;ヤマダ電機が警察へ被害届を提出。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2019年5月28日&lt;/td&gt;
&lt;td&gt;ヤマダ電機が個人情報保護委員会へ不正アクセス被害を報告。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2019年5月29日&lt;/td&gt;
&lt;td&gt;ヤマダ電機が不正アクセス被害とクレジットカード情報流出の可能性を発表。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2019/05/30/063417&#34;&gt;ヤマダ電機通販サイトの不正アクセスについてまとめてみた&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;いやいやいや。
あり得ない愚鈍さである。
今時こんなテキトーなインシデント・レスポンスをかます企業があるとは思わざりき。&lt;/p&gt;
&lt;p&gt;上のタイムラインを見れば分かるが，情報漏洩の可能性を認知した4月16日の時点でサービスを止めユーザに告知した上で警察と調査会社との三者で事に当たれば被害（の可能性）を抑え少なくとも10連休前には解決できただろう。
しかも10連休直前にえんやらやっと調査を依頼して自分たちは10連休を楽しんだ後に警察へ通報かい？ 安倍政権の中の人たち，あなた達の進める「働き方改革」は順調なようですよ（笑）&lt;/p&gt;
&lt;p&gt;「ヒトはセキュリティの最弱点である」とはよく言われることだが，まさに今回のケースはヤマダ電機側の怠慢による「人災」だろう（もちろんクレカ情報を盗んだ犯罪者が一番悪いのは言うまでもないが）。&lt;/p&gt;
&lt;p&gt;しかし本当は「ヒトはセキュリティの最強点になり得る」のである（「である」ではなく「なり得る」のがポイント）。
何故なら，予期しないイレギュラーが起きた時，危機的状況に見舞われた時，そういったときにこそ「ヒト」の真価が問われるからだ。&lt;/p&gt;
&lt;p&gt;こんな15年くらい前の腐ったセキュリティ事例を目の当たりにできるとは思わなかったが，「他山の石」とでも思って今後の私達の活動に活かしていきたいものである。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00GJOESS6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ymtvyHUmL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00GJOESS6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;復活の地１&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;小川一水 (著)&lt;/dd&gt;
    &lt;dd&gt;早川書房 2012-09-15 (Release 2013-11-15)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00GJOESS6 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;コミカライズ版もある。てか，コミカライズ版を最初に読んだ（笑） 大きな災害がある度にこの作品を思い出す。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-04-17&#34;&gt;2016-04-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 復活の地 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B009S7CDP6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51b1VUql4DL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B009S7CDP6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ソーシャルシフト　これからの企業にとって一番大切なこと&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;斉藤 徹 (著)&lt;/dd&gt;
    &lt;dd&gt;日本経済新聞出版社 2011-11-11 (Release 2012-10-18)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B009S7CDP6 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;随分前に出版された本だが，企業がソーシャル・メディアと付き合うための基本的な事柄が載っている。これ読んで出直してきなはれ。ちなみに巻末の spesial thanks に私の名前が載っているのは密かな自慢である（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-05-30&#34;&gt;2019-05-30&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ソーシャルシフト --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B07RWSCKKG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51nMoOn8kkL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07RWSCKKG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;賢者の弟子を名乗る賢者 11 (GCノベルズ)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;りゅうせんひろつぐ (著), 藤ちょこ (著)&lt;/dd&gt;
    &lt;dd&gt;マイクロマガジン社 2019-05-30 (Release 2019-05-30)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B07RWSCKKG (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;ソウルハウル編のクライマックス。今度はレイドボスだ！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-05-30&#34;&gt;2019-05-30&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 賢者の弟子を名乗る賢者 11 --&gt;
</content>
	</entry><entry>
		<title>本当のチャイナ・リスク</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/05/china-risk/" />
		<id>tag:text.Baldanders.info,2019-05-22:/remark/2019/05/china-risk/</id>
		<published>2019-05-22T03:52:58+00:00</published>
		<updated>2020-01-05T11:59:50+00:00</updated>
		<summary>モノやサービスで溢れかえる時代に生きている私達の自由は意外に貧弱なものである。それを握っているのは「私達」ではないのだから。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;「チャイナ・リスク」というフレーズが出回ったのはゼロ年代，ブッシュ共和党政権の時である。
その後，オバマ民主党政権に代わって「チャイナ・リスク」というフレーズは聞こえなくなり，むしろ中国を重要なビジネス・パートナーと見做すようになっていく。
それがトランプ共和党政権でまた反転する。
この辺の見事な色分けは流石米国としか言いようがない。
官僚主導で硬直しきった日本の政治状況と比べれば羨ましいことである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/05/20/2019-05-19-google-reportedly-suspends-select-business-with-huawei-following-u-s-ban/&#34;&gt;Googleがファーウェイに対してAndroidのサポートを中止へ  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.technologyreview.jp/nl/google-has-blocked-huawei-from-using-android-in-any-new-phones/&#34;&gt;MIT Tech Review: グーグルが一部取引を中止、「ファーウェイ排除」の波紋&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/05/21/2019-05-21-google-says-its-app-store-will-continue-to-work-for-existing-huawei-smartphone-owners/&#34;&gt;既存ファーウェイ端末はGoogle Playストアを継続利用可能とグーグルが声明  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/05/22/2019-05-20-trumps-huawei-ban-also-causing-tech-shocks-in-europe/&#34;&gt;Googleのファーウェイ制裁参加で欧州にショック拡大中、脱米模索も  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Google の思惑は分からない。
「&lt;a href=&#34;https://jp.techcrunch.com/2019/05/22/2019-05-20-trumps-huawei-ban-also-causing-tech-shocks-in-europe/&#34; title=&#34;Googleのファーウェイ制裁参加で欧州にショック拡大中、脱米模索も  |  TechCrunch Japan&#34;&gt;（大統領の）行政命令を遵守するため&lt;/a&gt;」というのはいかにも後付けくさい。
ただ Huawei (華為) はこの決定にあまり困らないんじゃないのかなぁ。
そして「あまり困らない」ことこそが本当のリスクと言える。
何故なら Huawei 製端末においてはコントロールの主体が Google から Huawei に移ることを意味するから。
まぁ Google と Huawei のどっちがマシかというリスク・トレードオフの問題でもあるのだが。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;スマートフォンにおけるEUの反トラスト措置の核心はAndroidデバイスとグーグルのポピュラーなアプリをアンバンドルすることだ。これによりスマートフォンメーカーはグーグルのブランドを維持したまま完全にグーグルの支配下にあるのではないデバイスを販売できる。例えば、Playストアをプレロードするものの、デフォールトの検索エンジンやブラウザにグーグル以外のプロダクトを設定するなどだ。&lt;br&gt;
しかしグーグルが（現行モデルでは継続されるとしても）ファーウェイに新しいAndroid OSやGoogle Playストアを提供しないとなれば、こうした構想は崩れてしまう。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/05/22/2019-05-20-trumps-huawei-ban-also-causing-tech-shocks-in-europe/&#34;&gt;Googleのファーウェイ制裁参加で欧州にショック拡大中、脱米模索も&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;OS ないしはハードウェア・ベンダが「アプリケーション・ストア」を通じてソフトウェア供給を支配下に置く，いわゆる&lt;a href=&#34;https://japan.zdnet.com/article/35108430/&#34; title=&#34;「スティーブ・ジョブズがいなければセールスフォースはなかった」：ベニオフCEO - ZDNet Japan&#34;&gt;「アプリケーション経済」は故 Steve Jobs の考えたビジネスモデルと聞いたことがある&lt;/a&gt;が，結局のところそれはアプリケーション流通を利用した CRM (Customer Relationship Management) 覇権競争にほかならない。&lt;/p&gt;
&lt;p&gt;「アプリケーション・ストア」は APT (Advanced Package Tool) のようなパッケージ管理ツールとは根本的に異なる。
たとえば APT は簡単にサードパーティのリポジトリを組み込むことができ，その信用モデルは &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; の「信用の輪（web of trust）」で構成されている&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
どちらかというとこれは VRM (Vendor Relationship Management) に近い。&lt;/p&gt;
&lt;p&gt;今回の件をきっかけに「アプリケーション経済」がもっと VRM 寄りになっていくと面白いのだが，流石にそれは夢を見すぎか（笑） 折角の AI 技術も「&lt;a href=&#34;https://text.baldanders.info/remark/2018/04/ai-assistant/&#34; title=&#34;AI アシスタントはユーザをアシストしない&#34;&gt;バーチャル外商&lt;/a&gt;」としてしか使われないのなら宝の持ち腐れだよなぁ。&lt;/p&gt;
&lt;p&gt;モノやサービスで溢れかえる時代に生きている私達の自由は意外に貧弱なものである。
それを握っているのは「私達」ではないのだから。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/05/23/2019-05-23-arm-halts-huawei-relationship-following-us-ban/&#34;&gt;ARMが米方針に従いファーウェイとの取引を停止  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/05/27/2019-05-24-smic-nasdaq-delisting/&#34;&gt;中国最大のチップメーカーがニューヨーク証券取引所上場廃止へ  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00DIM6BE6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/519&amp;#43;kIHb71L._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00DIM6BE6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;インテンション・エコノミー～顧客が支配する経済&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Doc Searls (著), 栗原潔 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;翔泳社 2013-03-14 (Release 2013-06-20)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00DIM6BE6 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;時代はソーシャル CRM から VRM へ。&lt;a href=&#39;https://baldanders.info/blog/000794/&#39;&gt;俺達がインターネットだ！&lt;/a&gt; &lt;a href=&#39;https://baldanders.info/blog/000638/&#39;&gt;感想文はこちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-04-26&#34;&gt;2015-04-26&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- インテンション・エコノミー --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4532149029?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51811H1N43L._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4532149029?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;これまでのビジネスのやり方は終わりだ―あなたの会社を絶滅恐竜にしない95の法則&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;レバイン,リック (著), サールズ,ドク (著), ロック,クリストファー (著), ワインバーガー,デビッド (著), Levine,Rick (原著), Searls,Doc (原著), Locke,Christopher (原著), Weinberger,David (原著), 彰, 倉骨 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日本経済新聞社 2001-03-01&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4532149029 (ASIN), 9784532149024 (EAN), 4532149029 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#39;http://www2.gol.com/users/jheine/cluetrainj.html&#39;&gt;クルートレイン宣言&lt;/a&gt;。タイトルがアレ過ぎる（笑） ちなみに今は &lt;a href=&#34;https://github.com/dweinberger/newclues&#34;&gt;New Clues&lt;/a&gt; が登場している。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-01-14&#34;&gt;2015-01-14&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- クルートレイン宣言 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;「信用の輪」については拙文「&lt;a href=&#34;https://text.baldanders.info/openpgp/openpgp-key-management/&#34;&gt;OpenPGP 鍵管理に関する考察&lt;/a&gt;」で少し紹介しているので参考にどうぞ。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Advanced Package Tool に関する覚え書き</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/05/advanced-package-tool/" />
		<id>tag:text.Baldanders.info,2019-05-10:/remark/2019/05/advanced-package-tool/</id>
		<published>2019-05-10T09:32:34+00:00</published>
		<updated>2019-11-10T11:31:58+00:00</updated>
		<summary>今回の件で自機でのアプリケーションあるいはパッケージ管理について，ちょっと考えてしまった。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;先日 Firefox がやらしたじゃないですか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.mozilla.org/t/thread-add-ons-not-working-due-to-certificate-expiration/38968&#34;&gt;Thread: Add-ons not working due to certificate expiration - Add-on Support - Mozilla Discourse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;証明書の期限切れでアドオンが全部排除されるというバグとしてはありがちなやつなんだけど， Mozilla が改修版（v66.0.4）を出してから &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; の &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; でアップデートできるようになるまで概ね2日ほどかかってるのよ。&lt;/p&gt;
&lt;p&gt;今回の件で自機でのアプリケーションあるいはパッケージ管理について，ちょっと考えてしまった。
そこでまずは &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; について調べ直すところから始めることにした。&lt;/p&gt;
&lt;h2&gt;dpkg と Advanced Package Tool&lt;/h2&gt;
&lt;p&gt;皆さんご存知の通り &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; は &lt;a href=&#34;https://www.debian.org/&#34; title=&#34;Debian -- The Universal Operating System&#34;&gt;Debian&lt;/a&gt; から fork したディストリビューションでアプリケーション管理も &lt;a href=&#34;https://www.debian.org/&#34; title=&#34;Debian -- The Universal Operating System&#34;&gt;Debian&lt;/a&gt; のものを踏襲している。&lt;/p&gt;
&lt;p&gt;アプリケーションのビルド済みバイナリや関連ファイルにバージョン情報や依存情報等のメタデータを付加したものを（ar/tar/gzip/bzip2 などで）ひとまとめにしたものを「&lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/packaging-system.html&#34; title=&#34;第 5 章 パッケージシステム、ツールと基本原則&#34;&gt;パッケージ&lt;/a&gt;」と呼ぶ。
&lt;a href=&#34;https://www.debian.org/&#34; title=&#34;Debian -- The Universal Operating System&#34;&gt;Debian&lt;/a&gt;/&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; では &lt;code&gt;.deb&lt;/code&gt; の拡張子が付いたファイルがそのパッケージファイルで，パッケージファイルを利用するためのツールが &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/sect.manipulating-packages-with-dpkg.html&#34; title=&#34;5.4. dpkg を用いたパッケージの操作&#34;&gt;dpkg&lt;/a&gt; である。&lt;/p&gt;
&lt;p&gt;ただし &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/sect.manipulating-packages-with-dpkg.html&#34; title=&#34;5.4. dpkg を用いたパッケージの操作&#34;&gt;dpkg&lt;/a&gt; にはプリミティブな機能しかないため一般のユーザが &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/sect.manipulating-packages-with-dpkg.html&#34; title=&#34;5.4. dpkg を用いたパッケージの操作&#34;&gt;dpkg&lt;/a&gt; をそのまま使うことはまずない。
一般ユーザ用のフロントエンド（のひとつ）が &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; (Advanced Package Tool) ということになる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; はバックエンドにパッケージ管理用のデータベースを持っていて&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，このデータベースをもとにパッケージ間の依存関係を維持しながら可能な限り自動で導入や削除を行おうとする。&lt;/p&gt;
&lt;p&gt;したがってデータベースにないパッケージは &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; では導入できない。
この場合は以下の3つの手段をとることができる。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;サードパーティのリポジトリを登録して &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; から導入できるようにする&lt;/li&gt;
&lt;li&gt;deb ファイルを使って直接インストールする&lt;/li&gt;
&lt;li&gt;ビルド済みバイナリを直接展開して導入する。またはソースファイルから直接ビルドを行う&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; パッケージのリリースサイクル&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; は概ね半年ごとにアップグレードされ，リリース時の年月がそのままバージョン番号になっている。
たとえば先日2019年4月にリリースされたバージョンには 19.04 が振られている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; に収録されるパッケージは OS リリース時にバージョンが固定され重大な不具合や脆弱性が発覚しない限り更新されることはないようだ。
先日の Firefox の件はむしろ例外的に早い対応だったということになる。&lt;/p&gt;
&lt;p&gt;しかし，昨今は活況なソフトウェアほどリリースサイクルが短い傾向があり半年というタイムスケールでは追いつかないことも多い。
自身でリスクを引き受けてでも &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; による管理を離れて自前で最新バージョンを維持したいという要求もあると思う。&lt;/p&gt;
&lt;p&gt;つまり &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; で管理可能なパッケージについても&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; で導入する&lt;/li&gt;
&lt;li&gt;deb ファイルを使って直接インストールする&lt;/li&gt;
&lt;li&gt;ビルド済みバイナリを直接展開して導入する。またはソースファイルから直接ビルドを行う&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という3つの手段をとり得るわけだ。&lt;/p&gt;
&lt;p&gt;そこで以降からは管理方法毎によく使うパッケージを分類してみる。
なお，この分類は私の独断と偏見に依る部分が大きいので，他の人にはあまり参考にならないであろう点は先に誤っておく。
ゴメンペコン。&lt;/p&gt;
&lt;h2&gt;公式リポジトリから &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; を使って管理するパッケージ&lt;/h2&gt;
&lt;h3&gt;セキュリティ関連ツールなのでしょうがない&lt;/h3&gt;
&lt;p&gt;以下のパッケージはセキュリティ関連ツールで，これらに依存するパッケーも多く，特に保守的な運用になっているようだ。
したがって安定的な運用を優先し &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; による管理とする。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;製品名&lt;/th&gt;
&lt;th&gt;パッケージ名&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gnupg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;既定でインストール済&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;openssh-client&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;クライアント側。既定でインストール済&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;openssl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;既定でインストール済&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以下も参考にどうぞ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/move-gpg-keyring/&#34;&gt;Windows 環境で作った GnuPG の鍵束を Ubuntu に移行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; に任せて安心なパッケージ&lt;/h3&gt;
&lt;p&gt;以下は何も考えずに &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; に任せても大丈夫だろう。
不具合や脆弱性への対応はどうしても遅れるが今のところは許容範囲ということで。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;製品名&lt;/th&gt;
&lt;th&gt;パッケージ名&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.mozilla.org/&#34; title=&#34;Internet for people, not profit — Mozilla&#34;&gt;Firefox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;firefox&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;既定でインストール済&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ifconfig&lt;/td&gt;
&lt;td&gt;&lt;code&gt;net-tools&lt;/code&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;何故か既定で入ってなかった&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://curl.haxx.se/&#34;&gt;curl&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何故か既定で入ってなかった&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://kdiff3.sourceforge.net/&#34;&gt;KDiff3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;kdiff3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;graphviz&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.vim.org/&#34;&gt;vim&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;vim&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;既定で入ってるのは &lt;code&gt;vim-tiny&lt;/code&gt; で &lt;code&gt;vim&lt;/code&gt; を入れると置き換わる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://boinc.berkeley.edu/&#34;&gt;BOINC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boinc-client&lt;/code&gt;, &lt;code&gt;boinc-manager&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;クライアント側&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mozilla.org/&#34; title=&#34;Internet for people, not profit — Mozilla&#34;&gt;Firefox&lt;/a&gt; については公式サイトで実行イメージがダウンロード可能になっていて，そちらを取ってきて使うこともできるが，完全に APT の管理を離れてしまい，かつ APT で管理されるバージョンと混在になってしまうので考えどころではある。
&lt;a href=&#34;https://www.mozilla.org/firefox/developer/&#34;&gt;Firefox Developer Edition&lt;/a&gt; を使うなら混在もありかも。&lt;/p&gt;
&lt;h3&gt;その他&lt;/h3&gt;
&lt;p&gt;依存関係とか導入手順とかが複雑で自前で管理するのが面倒くさい，て感じのパッケージ。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;製品名&lt;/th&gt;
&lt;th&gt;パッケージ名&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; 等&lt;/td&gt;
&lt;td&gt;&lt;code&gt;build-essential&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;何故か 18.10 には既定で入ってなかった&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CIFS Client&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cifs-utils&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;導入方法は&lt;a href=&#34;https://text.baldanders.info/remark/2019/03/common-internet-file-system/&#34;&gt;拙文を参照&lt;/a&gt;のこと&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.clamav.net/&#34; title=&#34;ClamavNet&#34;&gt;ClamAV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;clamav&lt;/code&gt;, &lt;code&gt;clamav-daemon&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;導入方法は&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/clamav-for-ubuntu/&#34;&gt;拙文を参照&lt;/a&gt;のこと&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;サードパーティ・リポジトリから &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; を使って管理するパッケージ&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;公式リポジトリでも導入可能だが最新版が欲しかったので &lt;a href=&#34;https://launchpad.net/ubuntu/+ppas&#34; title=&#34;Personal Package Archives : Ubuntu&#34;&gt;PPA&lt;/a&gt; のリポジトリを使うことにした。
詳しくは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-git-from-ppa/&#34;&gt;PPA から Git をインストールする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を参照のこと。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;インストールにはサードパーティ・リポジトリの登録と署名検証用の公開鍵の取得が必要。
詳しくは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/mono-in-ubuntu/&#34;&gt;Ubuntu に Mono を導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を参照のこと。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタ&lt;/h3&gt;
&lt;p&gt;インストールにはサードパーティ・リポジトリの登録と署名検証用の公開鍵の取得が必要。
詳しくは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2019/05/atom-v1_37-released/&#34;&gt;ATOM v1.37 がリリースされた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で紹介している。&lt;/p&gt;
&lt;p&gt;また deb ファイルを使って直接インストールすることも可能。
詳しくは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/atom-in-ubuntu/&#34;&gt;Ubuntu に ATOM エディタを導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を参照のこと。&lt;/p&gt;
&lt;h2&gt;deb ファイルを使って直接インストールする&lt;/h2&gt;
&lt;p&gt;deb ファイルを使って直接インストールするには gdebi を使うのがオススメである。
導入は &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; からできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install gdebi-core
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo gdebi foo.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば依存パッケージも含めてインストールしてくれる。
内部で &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; のデータベースを使ってるのかな。&lt;/p&gt;
&lt;p&gt;自前で導入する場合は最新バージョンに常に注意すること。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;いや，シングルバイナリで依存関係も殆どないので deb ファイルからインストールする必然性は微塵もないのだが，どうも &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; からインストールできるパッケージが全く追従できてないみたいなので。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34; title=&#34;Releases · gohugoio/hugo&#34;&gt;リリースページ&lt;/a&gt;から最新版の deb ファイルを取ってきてインストールすればよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo gdebi ./hugo_0.55.5_Linux-64bit.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; は公式ページにあるバージョンが無難なようである。
詳しくは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/installing-libreoffice-in-ubuntu/&#34;&gt;Ubuntu に LibreOffice をインストールする3つの方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ビルド済みバイナリを直接展開して導入する&lt;/h2&gt;
&lt;p&gt;自前で導入する場合は最新バージョンに常に注意すること。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラ自体は &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; でも導入可能だが，お互いのリリースタイミングが悪いのか2世代もバージョンが古い。
これでは使いものにならないので（&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラの公式サポートは1世代前まで），&lt;a href=&#34;https://golang.org/dl/&#34; title=&#34;Downloads - The Go Programming Language&#34;&gt;ダウンロードページ&lt;/a&gt;から &lt;code&gt;go1.xx.x.linux-amd64.tar.gz&lt;/code&gt; ファイルを取ってきて任意の場所に展開して使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src
$ sudo curl https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz -O
$ cd ..
$ unlink go # 以前の Go が入っている場合
$ sudo tar xvf src/go1.12.5.linux-amd64.tar.gz
$ sudo mv go go1.12.5
$ sudo ln -s go1.12.5 go
$ ./go/bin/go version
go version go1.12.5 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;bin/&lt;/code&gt; ディレクトリにはパスを通しておけば大丈夫。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://filezilla-project.org/&#34; title=&#34;FileZilla - The free FTP solution&#34;&gt;FileZilla&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;これも &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; で導入可能なのだが，だいぶバージョンが古いので，&lt;a href=&#34;https://filezilla-project.org/download.php&#34; title=&#34;Download FileZilla Client for Linux&#34;&gt;ダウンロードページ&lt;/a&gt;から取ってきたファイルを展開して使うことにする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/
$ sudo tar xvf src/FileZilla_3.42.1_x86_64-linux-gnu.tar.bz2
$ sudo chown -R root:root FileZilla3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;chown&lt;/code&gt; でオーナーを変えるのを忘れないように。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; がインストールされていることが前提。
詳しくは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/mono-in-ubuntu/&#34;&gt;Ubuntu に Mono を導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を参照のこと。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://www.tug.org/texlive/&#34; title=&#34;TeX Live - TeX Users Group&#34;&gt;TeX Live&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.tug.org/texlive/&#34; title=&#34;TeX Live - TeX Users Group&#34;&gt;TeX Live&lt;/a&gt; に関しては（大量のパッケージがあるため）最新の環境が必要ないのであれば &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; を使うほうがオススメである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apt show texlive
Package: texlive
Version: 2018.20190227-1
Priority: optional
Section: universe/tex
Source: texlive-base
Origin: Ubuntu
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;が，やっぱり最新の環境がほしいので手動でインストールすることにした。&lt;/p&gt;
&lt;p&gt;手動でインストールする場合はインストーラ &lt;code&gt;install-tl&lt;/code&gt; を使う。
&lt;a href=&#34;http://www.tug.org/texlive/&#34; title=&#34;TeX Live - TeX Users Group&#34;&gt;TeX Live&lt;/a&gt; 内の各パッケージの更新には tlmgr を使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo tlmgr update --self --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;詳しくは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[TeX Live を Ubuntu に（&lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; を使わずに）導入する](https://text.baldanders.info/remark/2019/04/install-texlive-in-ubuntu/)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を参照のこと。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;詳しくは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/07/reinstalling-openjdk/&#34;&gt;結局 OpenJDK をインストールし直すことにした&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を参照のこと。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.thunderbird.net/&#34; title=&#34;Thunderbird — Software made to make email easier. — Mozilla&#34;&gt;Thunderbird&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;詳しくは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/11/reinstalling-thunderbird/&#34;&gt;結局 Thunderbird もインストールし直すことにした&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を参照のこと。&lt;/p&gt;
&lt;h2&gt;ソースファイルから直接ビルドを行う&lt;/h2&gt;
&lt;p&gt;自前で導入する場合は最新バージョンに常に注意すること。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34;&gt;pgpdump&lt;/a&gt; のビルド&lt;/h3&gt;
&lt;p&gt;実は &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; で導入できるっぽいのだが，自作の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; の動作確認用にリファレンス実装として最新版が必要なのよ。
&lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; 等のツールチェーンがあれば簡単にビルドできる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;リポジトリ&lt;/a&gt;からソースコードを取ってきて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ./configure 
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;でビルドできる。
なお圧縮パケットの解凍に bz2 が必要な場合は &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; でパッケージ &lt;code&gt;libbz2-dev&lt;/code&gt; をあらかじめインストールしておくこと。&lt;/p&gt;
&lt;h3&gt;git-credential-libsecret のビルド&lt;/h3&gt;
&lt;p&gt;git-credential 用に git-credential-libsecret をビルドする。&lt;/p&gt;
&lt;p&gt;libsecret 自体のインストールは &lt;a href=&#34;https://debian-handbook.info/browse/ja-JP/stable/apt.html&#34; title=&#34;第 6 章 メンテナンスと更新、APT ツール&#34;&gt;APT&lt;/a&gt; で行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install libsecret-1-dev libgnome-keyring-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで展開されるソースコードを適当な場所にコピーしてビルドする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cp -r /usr/share/doc/git/contrib/credential/libsecret ~/work
$ cd ~/work/libsecret
$ make
gcc -g -O2 -Wall  -pthread -I/usr/include/libsecret-1 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/uuid -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-libsecret.o -c git-credential-libsecret.c
gcc -o git-credential-libsecret  git-credential-libsecret.o -lsecret-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ビルドした git-credential-libsecret をパスの通ったディレクトリに入れれば完了。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://usn.ubuntu.com/&#34;&gt;Ubuntu security notices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.debian.org/security/&#34;&gt;Debian &amp;ndash; Security Information&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://linuxfan.info/package-management-ubuntu&#34;&gt;「apt-get」はもう古い？新しい「apt」コマンドを使ったUbuntuのパッケージ管理 | LFI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://itsfoss.com/gdebi-default-ubuntu-software-center/&#34;&gt;Use GDebi for Quickly Installing DEB Packages in Ubuntu - It&#39;s FOSS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://linuxfan.info/post-1881&#34;&gt;【Linux FAQ】.debファイルをダウンロードしたのですが、どうやってインストールすればいいですか？ | LFI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.documentfoundation.org/Documentation/Install/Linux&#34;&gt;Installing LibreOffice on Linux - The Document Foundation Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;code&gt;/etc/apt/&lt;/code&gt; ディレクトリ以下のファイル群がそれ。このうち &lt;code&gt;sources.list&lt;/code&gt; が &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 公式のパッケージ・リポジトリを定義したファイルである。またサードパーティのリポジトリは &lt;code&gt;/etc/apt/sources.list.d/&lt;/code&gt; ディレクトリに &lt;code&gt;*.list&lt;/code&gt; ファイルで設定可能である。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;パッケージ &lt;code&gt;net-tools&lt;/code&gt; をインストールすると ifconfig のほかに arp, netstat, rarp, nameif, route といったツールがインストールされる。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Ununtu に ClamAV を導入する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/05/clamav-for-ubuntu/" />
		<id>tag:text.Baldanders.info,2019-05-06:/remark/2019/05/clamav-for-ubuntu/</id>
		<published>2019-05-06T08:39:20+00:00</published>
		<updated>2019-07-25T13:49:55+00:00</updated>
		<summary>こんなに面倒臭いとは思わなかった。もうしばらく運用してから評価してみるですよ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://www.clamav.net/&#34; title=&#34;ClamavNet&#34;&gt;ClamAV&lt;/a&gt; を &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; に導入したのだが，思いのほか面倒臭かったので，覚え書きとして記しておく。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.clamav.net/&#34; title=&#34;ClamavNet&#34;&gt;ClamAV&lt;/a&gt; をインストールする&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.clamav.net/&#34; title=&#34;ClamavNet&#34;&gt;ClamAV&lt;/a&gt; のインストール自体は APT (Advanced Package Tool) で簡単にできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install clamav clamav-daemon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なお &lt;code&gt;clamav-daemon&lt;/code&gt; は &lt;a href=&#34;https://www.clamav.net/&#34; title=&#34;ClamavNet&#34;&gt;ClamAV&lt;/a&gt; をサービス化するためのパッケージである。&lt;/p&gt;
&lt;p&gt;現時点（2019年5月）で &lt;a href=&#34;https://www.clamav.net/&#34; title=&#34;ClamavNet&#34;&gt;ClamAV&lt;/a&gt; の最新は 0.101.x なのだが APT で提供されているバージョンは 0.100.x の古いバージョンのようだ。
一応，以下の脆弱性への対応はしてあるみたいだが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.clamav.net/2019/03/clamav-01012-and-01003-patches-have.html&#34;&gt;ClamAV® blog: ClamAV 0.101.2 and 0.100.3 patches have been released!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このバージョンの古さは後々に影響を及ぼすかもしれない。
Debian には最新の&lt;a href=&#34;https://packages.debian.org/source/unstable/clamav&#34;&gt;ソースパッケージがある&lt;/a&gt;ようだが，セキュリティ製品だしソースコードからビルドするのは流石に&amp;hellip;&lt;/p&gt;
&lt;h2&gt;データベースを更新する&lt;/h2&gt;
&lt;p&gt;まずは手動でデータベースを更新する。&lt;/p&gt;
&lt;p&gt;設定ファイル &lt;code&gt;/etc/clamav/freshclam.conf&lt;/code&gt; から &lt;code&gt;NotifyClamd&lt;/code&gt; の行をコメントアウトした上で &lt;code&gt;freshclam&lt;/code&gt; コマンドを実行する。
コマンドラインで書くとこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo systemctl stop clamav-freshclam

$ sudo sed -i -e &amp;#34;s/^NotifyClamd/#NotifyClamd/g&amp;#34; /etc/clamav/freshclam.conf

$ sudo freshclam
Sun May  5 13:36:34 2019 -&amp;gt; ClamAV update process started at Sun May  5 13:36:34 2019
Sun May  5 13:36:34 2019 -&amp;gt; ^Your ClamAV installation is OUTDATED!
Sun May  5 13:36:34 2019 -&amp;gt; ^Local version: 0.100.3 Recommended version: 0.101.2
Sun May  5 13:36:34 2019 -&amp;gt; DON&amp;#39;T PANIC! Read https://www.clamav.net/documents/upgrading-clamav
Sun May  5 13:36:34 2019 -&amp;gt; main.cvd is up to date (version: 58, sigs: 4566249, f-level: 60, builder: sigmgr)
Sun May  5 13:36:34 2019 -&amp;gt; daily.cvd is up to date (version: 25439, sigs: 1562310, f-level: 63, builder: raynman)
Sun May  5 13:36:34 2019 -&amp;gt; bytecode.cvd is up to date (version: 328, sigs: 94, f-level: 63, builder: neo)

$ sudo sed -i -e &amp;#34;s/^#NotifyClamd/NotifyClamd/g&amp;#34; /etc/clamav/freshclam.conf

$ sudo systemctl start clamav-freshclam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;データベースの更新自体はうまく行ってるようだが &lt;code&gt;OUTDATED&lt;/code&gt; とか言われてるよ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;見なかったことにしよう。&lt;/p&gt;
&lt;p&gt;なお &lt;code&gt;clamav-freshclam.service&lt;/code&gt; の状態を確認するには以下のコマンドを起動すればよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo systemctl status clamav-freshclam.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;手動で動作確認&lt;/h2&gt;
&lt;p&gt;Malware 対策ソフト用の無害なウイルス（笑）があるので，これを使って &lt;code&gt;clamscan&lt;/code&gt; コマンドで動作確認する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ curl http://www.eicar.org/download/eicar.com -O

$ clamscan --infected --remove ./eicar.com
./eicar.com: Eicar-Test-Signature FOUND
./eicar.com: Removed.

----------- SCAN SUMMARY -----------
Known viruses: 6120222
Engine version: 0.100.3
Scanned directories: 0
Scanned files: 1
Infected files: 1
Data scanned: 0.00 MB
Data read: 0.00 MB (ratio 0.00:1)
Time: 20.181 sec (0 m 20 s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h2&gt;Scan On-Access の設定&lt;/h2&gt;
&lt;p&gt;ファイルアクセスへの常時監視を行う Scan On-Access を有効にするために &lt;code&gt;/etc/clamav/clamd.conf&lt;/code&gt; ファイルを修正する。
本当は &lt;code&gt;ScanOnAccess&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にするだけでいい筈なのだが&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，以下のコマンドで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo systemctl status clamav-daemon.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;サービスの状態を確認すると以下のログを吐いて停止していた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;ERROR: ScanOnAccess: fanotify_init failed: Operation not permitted
ScanOnAccess: clamd must be started by root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;/etc/clamav/clamd.conf&lt;/code&gt; ファイルの他の部分にも手を入れる必要があるようだ。
以下に変更・追記が必要な項目を挙げておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;hl&#34;&gt;LocalSocketGroup root
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;User root
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;ScanOnAccess true
&lt;/span&gt;OnAccessMountPath /home/username
OnAccessExcludePath /home/username/nocheck
# VirusEvent /usr/local/bin/clamd-response
OnAccessPrevention false
OnAccessExtraScanning true
OnAccessExcludeUID 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初の3行が変更が必要な項目，以降が追加項目である。
&lt;code&gt;OnAccessMountPath&lt;/code&gt; でスキャン対象のディレクトリを &lt;code&gt;OnAccessExcludePath&lt;/code&gt; で除外対象を指定する。
どちらも複数指定できる。&lt;/p&gt;
&lt;h3&gt;VirusEvent が効かない！？&lt;/h3&gt;
&lt;p&gt;上の設定で &lt;code&gt;VirusEvent&lt;/code&gt; をコメントアウトしているが，どうやら 0.100 では Scan On-Access を有効にしても &lt;code&gt;VirusEvent&lt;/code&gt; の設定が効かないようなのだ（0.101 はどうなんだろう）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VirusEvent&lt;/code&gt; には malware を発見した際に起動するコマンドを指定するのだが，これが動かないってかなり致命的じゃないのか？&lt;/p&gt;
&lt;p&gt;次善の策として以下のスクリプトを書いて cron で回すことにした。
Malware を検出すれば画面に通知が表示されるはずである。
cron で回してるだけなのでタイムラグが発生する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;logfile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/home/username/.local/log/clamd-found.log&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -r &lt;span class=&#34;nv&#34;&gt;$logfile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;PRV_CNT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;cat &lt;span class=&#34;nv&#34;&gt;$logfile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; wc -l&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;PRV_CNT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;CNT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;grep ScanOnAccess /var/log/syslog &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep FOUND &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v &lt;span class=&#34;s2&#34;&gt;&amp;#34;(null)&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tee &lt;span class=&#34;nv&#34;&gt;$logfile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; wc -l&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$CNT&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PRV_CNT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;DATESTR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;date&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  sudo -u username &lt;span class=&#34;nv&#34;&gt;DISPLAY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;:0 &lt;span class=&#34;nv&#34;&gt;DBUS_SESSION_BUS_ADDRESS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;unix:path&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/run/user/1000/bus /usr/bin/notify-send -t &lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DATESTR&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; Virus Found &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$CNT&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ダサいけどしょうがない。
ちなみに &lt;code&gt;username&lt;/code&gt; の部分には cron を回すログインユーザ名を， &lt;code&gt;1000&lt;/code&gt; の部分にはそのユーザ ID をセットする&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2&gt;もう一度，動作確認&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;clamav-daemon.service&lt;/code&gt; がうまく機能するか試してみよう。&lt;/p&gt;
&lt;p&gt;先ほどの無害なウイルス（笑）をダウンロードする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ curl http://www.eicar.org/download/eicar.com -O
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでログ等を見て検知しているか確認する（上の通知も出れば完璧）。
確認できたらとっとと削除すること。&lt;/p&gt;
&lt;p&gt;今回は &lt;code&gt;clamdscan&lt;/code&gt; のほうを使ってみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ clamdscan --infected --remove ./eicar.com
/home/username/work/./eicar.com: Eicar-Test-Signature FOUND
/home/username/work/./eicar.com: Removed.

----------- SCAN SUMMARY -----------
Infected files: 1
Time: 0.365 sec (0 m 0 s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;圧倒的に速くなった。
まぁ，バックグラウンドにサービスがいるんだから当たり前だが（笑）&lt;/p&gt;
&lt;h2&gt;Thunderbird と連携したかったが&amp;hellip;&lt;/h2&gt;
&lt;p&gt;MUA である Thunderbird と連携できるアドオンがあると聞いたのだが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://addons.thunderbird.net/ja/thunderbird/addon/clamdrib-lin/&#34;&gt;clamdrib LIN :: Thunderbird 向けアドオン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;うまくインストールできない。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://addons.thunderbird.net/ja/thunderbird/addon/clamdrib-lin/&#34; title=&#34;clamdrib LIN :: Thunderbird 向けアドオン&#34;&gt;clamdrib LIN&lt;/a&gt; の最新バージョンは2017年のもので最近のバージョン 60 以降には対応してないっぽい（互換性チェック回避のオプションも試したがうまく行かなかった）。
諦めるしかないようだ。&lt;/p&gt;
&lt;p&gt;こんなんばっかだな ＞ &lt;a href=&#34;https://www.clamav.net/&#34; title=&#34;ClamavNet&#34;&gt;ClamAV&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;「ウイルス対策ソフト」は必要か？&lt;/h2&gt;
&lt;p&gt;なんだか知らないが「Linux にウイルス対策ソフトは必要か？」などという頭の悪い議論があるそうで，しかも「必要ない」という人の主張は「Linux ユーザは Windows や macOS に比べて規模が小さいから狙われにくい」という，これまた頭が悪いとしか言いようがないものらしい。&lt;/p&gt;
&lt;p&gt;「ウイルス」という表現は古臭くて的を得ていないので，この記事では色々ひっくるめて malware (malicious software) という表現に統一させてもらうが，ぶっちゃけて言うなら使っている OS にかかわらず「&lt;strong&gt;ユーザレベルでは malware 対策はセキュリティ管理の中核ではない&lt;/strong&gt;」というのが多分正しい。&lt;/p&gt;
&lt;p&gt;じゃあ malware 対策は必要ないのかと言えば「さにあらず」で，しかしそういったものは外部化され不可視になっている。
今どきの言葉で言うなら “Security as a Service” とでもいうような状況である。
そしてそのプラットフォーム OS として Linux 等のセキュリティ要件はむしろ高まっていると言えるだろう。
今回 &lt;a href=&#34;https://www.clamav.net/&#34; title=&#34;ClamavNet&#34;&gt;ClamAV&lt;/a&gt; を触ってみて感じたことだが，一般ユーザにとって &lt;a href=&#34;https://www.clamav.net/&#34; title=&#34;ClamavNet&#34;&gt;ClamAV&lt;/a&gt; がちょっと残念な感じになっているのはサーバ用途に最適化されつつあるからではないかと思うのだ。&lt;/p&gt;
&lt;p&gt;セキュリティのトレンドは「防衛」中心から「監視」中心にシフトしていて，単純に malware をバラ撒いただけではすぐに検知され対策されてしまう。
故に攻撃側も時間をかけてでも密やかに確実にターゲットを追い詰める social engineering を駆使した各種ターゲティング攻撃へとシフトしている。&lt;/p&gt;
&lt;p&gt;Phishing メールやそれに含まれる malware 検知などはサービスプロバイダが（有料のものも含めて）やってくれるし， Web についても Phishing サイトやマイニング・コード等を含んだサイトはブラウザレベルでかなりいい感じにブロックできるようになりつつある&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
そういう意味で私にとって malware 対策ソフトは「うっかり転んだときのための少額保険」みたいなもので，それ以外ではあまり出しゃばって欲しくなかったりする。&lt;/p&gt;
&lt;p&gt;実際にそれまで使ってた Windows 7 でも “Microsoft Security Essentials” で必要十分な性能だったし &lt;a href=&#34;https://www.clamav.net/&#34; title=&#34;ClamavNet&#34;&gt;ClamAV&lt;/a&gt; でも同程度の性能を満たしていれば，今回はそれでよかったのだ。
それがこんなに面倒臭いとは思わなかった。&lt;/p&gt;
&lt;p&gt;かといって malware 対策ソフトそのものに金銭は払いたくないし&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，もうしばらく運用してから評価してみるですよ。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tecmint.com/best-antivirus-programs-for-linux/&#34;&gt;The 8 Best Free Anti-Virus Programs for Linux&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://news.mynavi.jp/article/20170420-a074/&#34;&gt;Linux向けアンチウイルスソフト8選 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://clamav-jp.osdn.jp/jdoc/clamav.html&#34;&gt;Clam Antivirusに関するメモ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://help.ubuntu.com/community/ClamAV&#34;&gt;ClamAV - Community Help Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/2018/05/21/setup-clamav-on-ubuntu-mate-18.04-lts/&#34;&gt;ClamAVをUbuntu MATE 18.04 LTSにセットアップ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://lab4ict.com/system/archives/934&#34;&gt;Ubuntu 18.04 LTS DesktopでClamAVによるウィルスチェックを実行 – LAB4ICT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/ClamAV&#34;&gt;ClamAV - ArchWiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sophos.com/en-us/products/free-tools/sophos-antivirus-for-linux.aspx&#34;&gt;Free Linux Malware Scanner | Lightweight Agent for Linux Malware Detection and Removal | Sophos&lt;/a&gt; : &lt;a href=&#34;https://www.clamav.net/&#34; title=&#34;ClamavNet&#34;&gt;ClamAV&lt;/a&gt; がダメそうならこっちにする（笑）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/gano/items/802519add83c524e3019&#34;&gt;Ubuntu16.04(さくらVPS)で１からcronの設定をし、pythonプログラムを定期実行する - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;サービスのリスタートには &lt;code&gt;sudo systemctl restart clamav-daemon.service&lt;/code&gt; とすればよい。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ユーザ ID が分からない場合は &lt;code&gt;id username&lt;/code&gt; とコマンドを打てば分かるだろう。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;はっきり言ってフェイク・ニュースなんかより Phishing ページなどセキュリティ・リスクの高いコンテンツに対する監視の方にもっとリソースを割いてほしいのだけど。かといって中間車攻撃で暗号通信を覗き見るなんてのは論外だが。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Android 端末には &lt;a href=&#34;https://www.f-secure.com/en/home/products/freedome&#34;&gt;F-Secure 社の FREEDOME&lt;/a&gt; を入れている。 FREEDOME 自体は VPN ソフトだが malware 対策機能も付いていて追跡コードもある程度ブロックしてくれる優れもの。実はこれの Linux 版があれば買ってもよかったのだがなかったのだ。仮想ネットワークについては I2P を試してみるか，と思っていたりする。 &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
</feed>
