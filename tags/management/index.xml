<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of management - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/management/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/management/index.xml" />
	<id>tag:text.Baldanders.info,2021-02-21:/tags</id>
	<updated>2021-02-21T16:15:24+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>Go 1.16 からのモジュール管理</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/manage-modules/" />
		<id>tag:text.Baldanders.info,2021-02-21:/golang/manage-modules/</id>
		<published>2021-02-21T07:15:24+00:00</published>
		<updated>2021-02-21T07:19:18+00:00</updated>
		<summary>覚え書きとして記しておく</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;先日リリースされた &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.16 でモジュール管理がいくつか変更になったので，覚え書きとして記しておく。&lt;/p&gt;
&lt;h2&gt;GO111MODULE 既定値の変更&lt;/h2&gt;
&lt;p&gt;環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; の既定値が &lt;code&gt;auto&lt;/code&gt; から &lt;code&gt;on&lt;/code&gt; に変更になった。
&lt;code&gt;GO111MODULE&lt;/code&gt; の取りうる値は以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;on&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常にモジュール対応モードで動作する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;off&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に GOPATH モードで動作する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$GOPATH/src&lt;/code&gt; 以下のディレクトリに配置され &lt;code&gt;go.mod&lt;/code&gt; を含まないパッケージは GOPATH モードで，それ以外はモジュール対応モードで動作する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;GO111MODULE&lt;/code&gt; の値を &lt;code&gt;auto&lt;/code&gt; に戻すのであれば &lt;code&gt;go env&lt;/code&gt; コマンドで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env -w GO111MODULE=auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とする。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; の環境変数の取り扱いについては，拙文「&lt;a href=&#34;https://text.baldanders.info/golang/go-env/&#34;&gt;Go 言語の環境変数管理&lt;/a&gt;」を参照のこと。&lt;/p&gt;
&lt;h2&gt;go.mod および go.sum の自動更新の抑制&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.15 までは &lt;code&gt;go build&lt;/code&gt; や &lt;code&gt;go test&lt;/code&gt; などのコマンドで &lt;code&gt;go.mod&lt;/code&gt; や &lt;code&gt;go.sum&lt;/code&gt; の内容が勝手に更新されていたが， 1.16 からは自動では更新されなくなった。&lt;/p&gt;
&lt;p&gt;なので，コード上の &lt;code&gt;import&lt;/code&gt; で新しい外部パッケージを追加しても &lt;code&gt;go.mod&lt;/code&gt; や &lt;code&gt;go.sum&lt;/code&gt; に記述がないと&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go test ./...
main.go:9:2: no required module provides package github.com/spiegel-im-spiegel/cov19jpn/chart; to add it:
	go get github.com/spiegel-im-spiegel/cov19jpn/chart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とか&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go test ./...
go: github.com/spiegel-im-spiegel/cov19jpn@v0.2.0: missing go.sum entry; to add it:
	go mod download github.com/spiegel-im-spiegel/cov19jpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;みたいなエラーが出たりする。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go.mod&lt;/code&gt; や &lt;code&gt;go.sum&lt;/code&gt; をいい感じに更新したいのであれば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod tidy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とするとよい。&lt;/p&gt;
&lt;h2&gt;バージョン付きの go install&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;go install&lt;/code&gt; コマンドで指定するパッケージパスにバージョン番号サフィックスを付けることができるようになった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go install golang.org/x/tools/gopls@v0.6.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでバージョンを指定してモジュールのビルド&amp;amp;インストールができる。
ただし &lt;code&gt;go.mod&lt;/code&gt; ファイルが &lt;code&gt;replace&lt;/code&gt; や &lt;code&gt;exclude&lt;/code&gt; ディレクティブを含んでいると &lt;code&gt;go install&lt;/code&gt; が失敗するみたい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go install github.com/spiegel-im-spiegel/cov19jpn@v0.2.0
go install github.com/spiegel-im-spiegel/cov19jpn@v0.2.0: github.com/spiegel-im-spiegel/cov19jpn@v0.2.0
	The go.mod file for the module providing named packages contains one or
	more replace directives. It must not contain directives that would cause
	it to be interpreted differently than if it were the main module.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この場合は今までどおり &lt;code&gt;go get&lt;/code&gt; コマンドでビルドまでやってくれるが， &lt;code&gt;go get&lt;/code&gt; コマンドによるビルドは&lt;a href=&#34;https://github.com/golang/go/issues/43684&#34; title=&#34;cmd/go: deprecate installing binaries using &#39;go get&#39; in Go 1.17 and make &#39;go get -d&#39; the default behavior · Issue #43684 · golang/go&#34;&gt;将来的に廃止&lt;/a&gt;になるみたいなので，早めになんとかしたいものである。&lt;/p&gt;
&lt;p&gt;でもなぁ，私の場合「&lt;a href=&#34;&#34;&gt;Go 依存パッケージの脆弱性検査&lt;/a&gt;」の誤検出対策に &lt;code&gt;replace&lt;/code&gt; ディレクティブを使ってるから悩ましいんだよなぁ&amp;hellip;&lt;/p&gt;
&lt;h2&gt;特定バージョンのモジュールの撤回&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;go.mod&lt;/code&gt; で &lt;code&gt;retract&lt;/code&gt; ディレクティブを使って特定バージョンのモジュールを撤回できるようになった（&lt;code&gt;go&lt;/code&gt; ディレクティブが &lt;code&gt;1.16&lt;/code&gt; 以上の場合）。&lt;/p&gt;
&lt;p&gt;こんな感じにコメントとともに指定するといいらしい（コメント付けられたのか）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;// Remote-triggered crash in package foo. See CVE-2021-01234.
retract v1.0.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでこのバージョンを使おうとしても&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go list -m -u all
example.com/lib v1.0.0 (retracted)
$ go get .
go: warning: example.com/lib@v1.0.5: retracted by module author:
    Remote-triggered crash in package foo. See CVE-2021-01234.
go: to switch to the latest unretracted version, run:
    go get example.com/lib@latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じにコメントの内容で警告が表示されるそうだ。&lt;/p&gt;
&lt;h2&gt;GOVCS によるバージョン管理ツールの制御&lt;/h2&gt;
&lt;p&gt;環境変数 &lt;code&gt;GOVCS&lt;/code&gt; を使ってリポジトリとバージョン管理ツールを関連付けることができる。
これを使って悪意のあるリポジトリ・サーバへのアクセスを制限することを意図しているようだ。&lt;/p&gt;
&lt;p&gt;環境変数の設定は &lt;code&gt;go env -w&lt;/code&gt; コマンドを使うとよいだろう。
たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env -w &amp;#34;GOVCS=github.com:git,evil.com:off,*:git|hg&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば， github.com サイトでは git のみ許容し evil.com は使用禁止，その他のサイトでは git および mercurial のみ許容する，といった指定ができるらしい。&lt;/p&gt;
&lt;p&gt;なお &lt;code&gt;GOVCS&lt;/code&gt; の既定値は &lt;code&gt;public:git|hg,private:all&lt;/code&gt; となっている。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.golang.org/go116-module-changes&#34;&gt;New module changes in Go 1.16 - The Go Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/versioning-of-go-modules/&#34;&gt;Go モジュールのバージョン管理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/release/2021/02/go-1_16-is-released/&#34;&gt;Go 1.16 がリリースされた&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>SSH の認証鍵を GunPG で作成・管理する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/openpgp/ssh-key-management-with-gnupg/" />
		<id>tag:text.Baldanders.info,2021-01-06:/openpgp/ssh-key-management-with-gnupg/</id>
		<published>2021-01-06T14:06:57+00:00</published>
		<updated>2021-01-10T02:49:53+00:00</updated>
		<summary>新たに鍵を作成する場合や今までの鍵を破棄して作り直す場合などの状況があれば検討してもいいだろう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今回は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; で作成した鍵を &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; の認証鍵として使う方法について覚え書きとして記しておく。
現時点で運用できている認証鍵を置き換えるメリットはないが，新たに鍵を作成する場合や今までの鍵を破棄して作り直す場合などの状況があれば検討してもいいだろう。&lt;/p&gt;
&lt;p&gt;まず &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; で作成する鍵は機能別に以下の4種類に分類される（ひとつの鍵で複数の機能を持たせることもできる）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;機能&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;略称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;署名&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;証明&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;認証&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;A&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;暗号化&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;E&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;このうち &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; の認証鍵として使えるのは「認証」機能をもった鍵のみである。
認証機能は電子署名用の鍵であれば任意に付与することができるが，専用の副鍵を追加するのがセオリーらしい。&lt;/p&gt;
&lt;h2&gt;認証用の副鍵を追加する&lt;/h2&gt;
&lt;p&gt;まず以下の &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵があるとする（主鍵には &lt;code&gt;SC&lt;/code&gt;，副鍵には &lt;code&gt;E&lt;/code&gt; の機能が付いてる点に注目）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --list-keys alice
pub   ed25519 2021-01-06 [SC] [有効期限: 2021-01-13]
      011C720B03D2E1D6BCFA98391DFF44901121B61D
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   cv25519 2021-01-06 [E]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この鍵に認証用の副鍵を追加する。
鍵の追加には &lt;code&gt;--edit&lt;/code&gt; コマンドを使う。
なお &lt;code&gt;--expert&lt;/code&gt; オプションと一緒に使うと幸せになれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --expert --edit-key alice
gpg (GnuPG) 2.2.26; Copyright (C) 2020 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

秘密鍵が利用できます。

sec  ed25519/1DFF44901121B61D
     作成: 2021-01-06  有効期限: 2021-01-13  利用法: SC  
     信用: 究極        有効性: 究極
ssb  cv25519/4FECD03BE5BE4454
     作成: 2021-01-06  有効期限: 無期限      利用法: E   
[  究極  ] (1). Alice &amp;lt;alice@example.com&amp;gt;

gpg&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここで &lt;code&gt;addkey&lt;/code&gt; コマンドを入力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;gpg&amp;gt; addkey
ご希望の鍵の種類を選択してください:
   (3) DSA (署名のみ)
   (4) RSA (署名のみ)
   (5) Elgamal (暗号化のみ)
   (6) RSA (暗号化のみ)
   (7) DSA (機能をあなた自身で設定)
   (8) RSA (機能をあなた自身で設定)
  (10) ECC (署名のみ)
&lt;span class=&#34;hl&#34;&gt;  (11) ECC (機能をあなた自身で設定)
&lt;/span&gt;  (12) ECC (暗号化のみ)
  (13) 既存の鍵
  (14) カードに存在する鍵
あなたの選択は? 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;今回は認証用の鍵の追加なので 7, 8, 11 のいずれかを選択する。
ここは個人的な好みで ECC 鍵を選択しよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;あなたの選択は? 11

鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 
&lt;span class=&#34;hl&#34;&gt;現在の認められた操作: Sign 
&lt;/span&gt;
   (S) 署名機能を反転する
   (A) 認証機能を反転する
   (Q) 完了

   あなたの選択は? 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;現在は署名機能（Sign）のみ有効になっているが，欲しいのは認証機能のみなので &lt;code&gt;S&lt;/code&gt; と &lt;code&gt;A&lt;/code&gt; を一回づつ入力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;あなたの選択は? s

鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 
&lt;span class=&#34;hl&#34;&gt;現在の認められた操作: 
&lt;/span&gt;
   (S) 署名機能を反転する
   (A) 認証機能を反転する
   (Q) 完了

あなたの選択は? a

鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 
&lt;span class=&#34;hl&#34;&gt;現在の認められた操作: Authenticate 
&lt;/span&gt;
   (S) 署名機能を反転する
   (A) 認証機能を反転する
   (Q) 完了

あなたの選択は? 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで認証機能（Authenticate）のみ有効になった。
&lt;code&gt;Q&lt;/code&gt; を入力して次に進もう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;あなたの選択は? q
ご希望の楕円曲線を選択してください:
&lt;span class=&#34;hl&#34;&gt;   (1) Curve 25519
&lt;/span&gt;   (3) NIST P-256
   (4) NIST P-384
   (5) NIST P-521
   (6) Brainpool P-256
   (7) Brainpool P-384
   (8) Brainpool P-512
   (9) secp256k1
あなたの選択は? 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; の認証用には &lt;code&gt;1&lt;/code&gt; から &lt;code&gt;5&lt;/code&gt; の楕円曲線のいずれかを選択する。
個人的なお勧めは &lt;code&gt;1&lt;/code&gt; の “&lt;code&gt;Curve 25519&lt;/code&gt;” である。
理由は以下の記事を参考のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/eddsa/&#34;&gt;Edwards-curve Digital Signature Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;では &lt;code&gt;1&lt;/code&gt; を入力して先に進む。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;あなたの選択は? 1
鍵の有効期限を指定してください。
&lt;span class=&#34;hl&#34;&gt;         0 = 鍵は無期限
&lt;/span&gt;      &amp;lt;n&amp;gt;  = 鍵は n 日間で期限切れ
      &amp;lt;n&amp;gt;w = 鍵は n 週間で期限切れ
      &amp;lt;n&amp;gt;m = 鍵は n か月間で期限切れ
      &amp;lt;n&amp;gt;y = 鍵は n 年間で期限切れ
鍵の有効期間は? (0)0
鍵は無期限です
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有効期限は意味がないので無期限（&lt;code&gt;0&lt;/code&gt;）を選択する。
理由は後述するのでちょっと待ってね。&lt;/p&gt;
&lt;p&gt;最終確認をして鍵を生成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;これで正しいですか? (y/N) y
本当に作成しますか? (y/N) y         
たくさんのランダム・バイトの生成が必要です。キーボードを打つ、マウスを動か
す、ディスクにアクセスするなどの他の操作を素数生成の間に行うことで、乱数生
成器に十分なエントロピーを供給する機会を与えることができます。

sec  ed25519/1DFF44901121B61D
     作成: 2021-01-06  有効期限: 2021-01-13  利用法: SC  
     信用: 究極        有効性: 究極
ssb  cv25519/4FECD03BE5BE4454
     作成: 2021-01-06  有効期限: 無期限      利用法: E   
ssb  ed25519/230D446E390C3E49
     作成: 2021-01-06  有効期限: 無期限      利用法: A   
[  究極  ] (1). Alice &amp;lt;alice@example.com&amp;gt;

gpg&amp;gt; save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後は &lt;code&gt;save&lt;/code&gt; コマンドを入力して結果を鍵束に保存する。
これで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --list-keys alice
pub   ed25519 2021-01-06 [SC] [有効期限: 2021-01-13]
      011C720B03D2E1D6BCFA98391DFF44901121B61D
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   cv25519 2021-01-06 [E]
&lt;span class=&#34;hl&#34;&gt;sub   ed25519 2021-01-06 [A]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;認証用の鍵が追加できた。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; フォーマットの公開鍵を出力する。&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; フォーマットの公開鍵は &lt;code&gt;--export-ssh-key&lt;/code&gt; コマンドで出力できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --export-ssh-key alice
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFfjejx/Saej929myfZoBQAKgusPi2iiOxdZZfpCLxh5 openpgp:0x390C3E49
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このテキストをホスト機の &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; ファイルに追記すれば仕込みは完了である。
パーミッションの変更を忘れずに（笑）&lt;/p&gt;
&lt;p&gt;この操作で分かると思うが &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; フォーマットで出力する時点で &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵の情報はほぼ脱落している。
だから「有効期限は意味がない」のよ。&lt;/p&gt;
&lt;p&gt;ちなみにこの操作は公開鍵に対して行われる。
たとえば，認証用の鍵を付加した &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 公開鍵をサーバ管理者に渡せば，サーバ管理者は集めた &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 公開鍵に署名して完全性を確保した後， &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; 認証用公開鍵を抽出して各ユーザのディレクトリにまとめてセットする，といったこともできるだろう。&lt;/p&gt;
&lt;h2&gt;ローカル側の設定 【2021-01-09 変更・追記あり】&lt;/h2&gt;
&lt;p&gt;念のためローカル側の設定についても記しておく。&lt;/p&gt;
&lt;h3&gt;ssh-agent を gpg-agent に置き換える&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; では &lt;code&gt;ssh-agent&lt;/code&gt; を &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の &lt;code&gt;gpg-agent&lt;/code&gt; に置き換えることで鍵の管理を &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 側に委譲できる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; の設定手順については以下の記事でまとめている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/gpg-agent-in-ubuntu/&#34;&gt;gpg-agent の設定： GnuPG in Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows については，古い内容で恐縮だが，以下の記事を参考にして欲しい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-gnupg-for-windows-2/&#34;&gt;GnuPG for Windows : gpg-agent について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; 認証鍵の登録&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の鍵束の鍵を &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; の認証鍵として使うには &lt;code&gt;~/.gnupg/sshcontrol&lt;/code&gt; ファイルへの登録が必要である。
先ほど作成した鍵であれば，まず以下のコマンドで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --list-keys --with-keygrip alice
pub   ed25519 2021-01-06 [SC] [有効期限: 2021-01-13]
      011C720B03D2E1D6BCFA98391DFF44901121B61D
      Keygrip = 97249ABEB2A2FD9E88F6723BB19D4F84B90E261A
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   cv25519 2021-01-06 [E]
      Keygrip = 96CB831965E1A7EB4705577D6A7CB7F9E05C8192
sub   ed25519 2021-01-06 [A]
&lt;span class=&#34;hl&#34;&gt;      Keygrip = F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;該当する鍵の keygrip 値を調べる。
今回の例なら “&lt;code&gt;F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E&lt;/code&gt;” が該当する keygrip 値である。
これを &lt;code&gt;~/.gnupg/sshcontrol&lt;/code&gt; ファイルに追記する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E 0 &amp;gt;&amp;gt; ~/.gnupg/sshcontrol
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;ssh-add -L&lt;/code&gt; コマンドでこの鍵の内容が表示されればOK。&lt;/p&gt;
&lt;p&gt;ちなみに keygrip 値の後ろの &lt;code&gt;0&lt;/code&gt; はキャッシュ期間（秒）を指すらしい。
&lt;code&gt;0&lt;/code&gt; より大きければ &lt;code&gt;gpg-agent.conf&lt;/code&gt; ファイルの指定より優先されるってことかな。
また行頭に &lt;code&gt;!&lt;/code&gt; マークを付けると鍵の使用を無効化できる。&lt;/p&gt;
&lt;p&gt;念のため &lt;code&gt;sshcontrol&lt;/code&gt; ファイルも不用意に書き込みできないよう制限をかけておくとよいだろう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/gnupg-cheat-sheet/&#34;&gt;GnuPG チートシート（鍵作成から失効まで）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-ecc-with-gnupg/&#34;&gt;そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/upgrade-openssh-key/&#34;&gt;OpenSSH 鍵をアップグレードする（さようなら SHA-1）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
</content>
	</entry><entry>
		<title>ルールを解釈で捻じ曲げる</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/12/rules-and-interpretations/" />
		<id>tag:text.Baldanders.info,2020-12-29:/remark/2020/12/rules-and-interpretations/</id>
		<published>2020-12-29T07:06:27+00:00</published>
		<updated>2020-12-30T00:16:22+00:00</updated>
		<summary>“People don&#39;t want to be educated, they want to be entertained”</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;「数学ガール」シリーズでおなじみの結城浩さんが &lt;a href=&#34;https://twitter.com/hyuki/status/1343313840889593859&#34;&gt;Twitter でゼロの偶奇を問うアンケート&lt;/a&gt;をされていて，その結果について&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;「0は偶数です」を正しいとした方は58%で、驚くほどの低正解率でした。&lt;br&gt;&lt;br&gt;「0は偶数でも奇数でもありません」を正しいとした方が41%もいらっしゃいました。この回答をした方の理由をお聞きしたいです。&lt;a href=&#34;https://t.co/reMDPiPM9f&#34;&gt;https://t.co/reMDPiPM9f&lt;/a&gt;&lt;/p&gt;&amp;mdash; 結城浩 (@hyuki) &lt;a href=&#34;https://twitter.com/hyuki/status/1343677705712123904?ref_src=twsrc%5Etfw&#34;&gt;December 28, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;と感想を tweet しておられた。&lt;/p&gt;
&lt;p&gt;実はこのアンケートには元ネタがあるそうで，それがこれ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.solipsys.co.uk/new/TheParityOfZero.html&#34;&gt;The Parity Of Zero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20201228-0-even-education/&#34;&gt;「0は偶数ではない」と多くの人が信じているのは教育に問題があるという指摘 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;わざわざこんな辺境の記事を読むような人には自明だろうが，念のためにいうと，偶数とは「2の整数倍数」あるいは「2で割り切れる整数」として &lt;strong&gt;定義&lt;/strong&gt; されるものである。
プログラマ風に言うなら「2進数に展開した際に最下位ビットが0になる整数値」または「&lt;code&gt;n&amp;amp;1==0&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; となる &lt;code&gt;int n&lt;/code&gt;」でもいいだろう（笑） いずれにしてもゼロは偶数と言える，議論の余地なく。&lt;/p&gt;
&lt;p&gt;この話のポイントは，偶奇の色分けは「定義」であるということだ。
言い方を変えるなら「2で割り切れる整数を偶数としましょう」という「ルール」である。
つまり「0は偶数でも奇数でもありません」と考えた人は，思い込みの解釈で偶奇のルールを捻じ曲げてしまったわけだ。&lt;/p&gt;
&lt;p&gt;これで思い出したのが数年前に話題になった「&lt;a href=&#34;https://twitter.com/genkuroki/status/515350512305049600&#34;&gt;掛け算は順序が大事&lt;/a&gt;」という話である。
もちろん掛け算に順序に関するルールはない。
その上で数の掛け算には「交換法則」が成り立つという点が算数の算数たる所以なのだが，そういうのを全部チャイして「順序が大事」と言っちゃってるわけだ。&lt;/p&gt;
&lt;p&gt;当時はこの話を聞いて「日本の学校教育 &lt;code&gt;＼(^o^)／ｵﾜﾀ&lt;/code&gt;」と&lt;a href=&#34;https://baldanders.info/blog/000744/&#34; title=&#34;日本の「算数」は壊れてる？ — 旧メイン・ブログ | Baldanders.info&#34;&gt;思った&lt;/a&gt;ものだが，似たような話は世界中どこにでも転がっているということなのかもしれない。
これに関して，最初に挙げた記事の&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;It doesn’t necessarily need to be made “relevant.” Yes, for some people you can create the motivation that way, but for others, they will engage purely for the pleasure of finding things out, and the satisfaction in being able to see a reason behind things that were previously stated without justification&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.solipsys.co.uk/new/TheParityOfZero.html&#34;&gt;The Parity Of Zero&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;という部分は結構重要なポイントに見える。
ものに喩えるのは私もよくやるが，喩えを行う場合はその「差異」を常に意識しないと，分かりやすい喩えの方に意識が引きずられてしまう。&lt;/p&gt;
&lt;p&gt;まぁ，日本の，いや世界の数学教育の話はここまでにしておいて，注目したい点は「ルールを解釈で捻じ曲げる」人が一定数いるということだろう。&lt;/p&gt;
&lt;p&gt;典型例は日本の「憲法九条」かな。
「解釈」で捻れまくっているよね。
あるいは知財やプライバシー・セキュリティ関連の法律など「ガイドライン」という名の解釈によって為政者に都合よく運用される風景が当たり前になっている。&lt;/p&gt;
&lt;p&gt;Bruce Schneier 先生原著の『&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;』では「抑止&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」における教育の必要性を説く。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;抑止が効果を持つためには、「教育」が必要だ。社会が犯罪から守られているのは、基本的に、攻撃に対する直接的な防御があるからではない。人々が法律を守るからだ。ほとんどの人は倫理や道徳を重んじる。倫理は人が生まれながらに持つ性質で、これがなかったら人は文明化できなかっただろう。道徳は、何が道徳的で善良な市民とはどういうものかという教育によって身につけるものだ&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;倫理や道徳はともかく，ルールを作ってそれを守ってもらいたいなら，教える側にしても教わる側にしても，それをどのように解釈するか（あるいはされるか）については常に注意を払うべきかもしれない。
なにせ偶数の定義すら捻じ曲げて解釈してしまうのが人間なのだから（笑）&lt;/p&gt;
&lt;p&gt;あちこちの職場を渡り歩いて，その度に「セキュリテイ研修」を受けるが，ぶっちゃけルールを押し付けるだけのところが多く「何故」がないんだよね（まぁ「傭兵」相手に時間をかける気はないってことなんだろうけど）。
特にセキュリティ管理はルールの根拠をきちんと示さなければ守ろうとは思わないし，しぶしぶ守るとしても「解釈で捻じ曲げる」余地を与えてしまう。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;People don’t want to be educated, they want to be entertained&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.solipsys.co.uk/new/TheParityOfZero.html&#34;&gt;The Parity Of Zero&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;私は「&lt;strong&gt;守られないルールは，ルール自体に問題がある&lt;/strong&gt;」と考えるが「ルールを解釈で捻じ曲げる」事態が常態化するなら（教育を含めて）マネジメント全体を見直す最初のアラームとなるだろう。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00NAQA33A?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41hSKEDU3zL._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00NAQA33A?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;数学ガールの誕生　理想の数学対話を求めて&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2013-09-13 (Release 2014-09-13)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00NAQA33A (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんの講演集。こういう場所に立ち会える今の学生さんは羨ましい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2013-09-21&#34;&gt;2013-09-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 数学ガールの誕生 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621045938?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51XGP8AFX2L._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621045938?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;いかにして問題をとくか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;G. ポリア (著), Polya,G. (原著), 賢信, 柿内 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善 1975-04-01&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4621045938 (ASIN), 9784621045930 (EAN), 4621045938 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-26&#34;&gt;2014-09-26&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- いかにして問題をとくか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;』では「抑止」を「将来の攻撃をセキュリティシステムが防止するやり方」と定義している。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Go のコードでも GitHub Code Scanning が使えるらしい</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/10/github-code-scanning-with-golang/" />
		<id>tag:text.Baldanders.info,2020-10-01:/remark/2020/10/github-code-scanning-with-golang/</id>
		<published>2020-10-01T09:03:46+00:00</published>
		<updated>2020-10-30T10:57:03+00:00</updated>
		<summary>うん。簡単！</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の Code Scanning 機能が全ユーザで有効になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iamninad.com/github-code-scanning/&#34;&gt;Github Code Scanning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-09-30-code-scanning-is-now-available/&#34;&gt;Code scanning is now available! - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「えー。どうせ &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では使えないんでしょ？」と思ったが， C/C++, C#, &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt;, Java, JavaScript/TypeScript, Python で有効らしい。
というわけで，とりあえず手持ちの &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; パッケージのリポジトリで試してみた。&lt;/p&gt;
&lt;p&gt;Code Scanning は各リポジトリの “Security” で設定できる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./github-security-menu.png&#34;&gt;&lt;img src=&#34;./github-security-menu.png&#34; srcset=&#34;./github-security-menu.png 1284w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;一番下の “Code scanning alerts” の &lt;code&gt;[Set up code scanning]&lt;/code&gt; ボタンを押す。
次に表示される以下の画面で&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./code-scanning-setting.png&#34;&gt;&lt;img src=&#34;./code-scanning-setting.png&#34; srcset=&#34;./code-scanning-setting.png 682w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;[Set up this workflow]&lt;/code&gt; ボタンを押す。&lt;/p&gt;
&lt;p&gt;すると &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; Actions 用の YAML ファイル編集画面が表示される。
今回は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コードのリポジトリなので，こんな感じの内容になった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# For most projects, this workflow file will not need changing; you simply need&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# to commit it to your repository.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# You may wish to alter this file to override the set of languages analyzed,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# or to provide custom queries or build logic.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CodeQL&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;master]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pull_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# The branches below must be a subset of the branches above&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;master]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schedule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;cron&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0 6 * * 4&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;analyze&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Analyze&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fail-fast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Override automatic language detection by changing the below list&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Supported options are [&amp;#39;csharp&amp;#39;, &amp;#39;cpp&amp;#39;, &amp;#39;go&amp;#39;, &amp;#39;java&amp;#39;, &amp;#39;javascript&amp;#39;, &amp;#39;python&amp;#39;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;go&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Learn more...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Checkout repository&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# We must fetch at least the immediate parents so that if this is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# a pull request then we can checkout the head.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# If this run was triggered by a pull request event, then checkout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# the head of the pull request instead of the merge commit.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;git checkout HEAD^2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ github.event_name == &amp;#39;pull_request&amp;#39; }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Initializes the CodeQL tools for scanning.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Initialize CodeQL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;github/codeql-action/init@v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;languages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ matrix.language }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# If you wish to specify custom queries, you can do so here or in a config file.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# By default, queries listed here will override any specified in a config file. &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Prefix the list here with &amp;#34;+&amp;#34; to use these queries and those in the config file.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# queries: ./path/to/local/query, your-org/your-repo/queries@main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# If this step fails, then you should remove it and run the build manually (see below)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Autobuild&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;github/codeql-action/autobuild@v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ℹ️ Command-line programs to run using the OS shell.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 📚 https://git.io/JvXDl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ✏️ If the Autobuild fails above, remove it and uncomment the following three lines&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#    and modify them (or add more) to build your code if your project&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#    uses a compiled language&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#- run: |&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   make bootstrap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   make release&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Perform CodeQL Analysis&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;github/codeql-action/analyze@v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コードの検査だけならこのままコミットしてしまって構わない。
ちなみにコミットする場合は &lt;code&gt;master&lt;/code&gt; ブランチ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; に対してではなく pull request 用のブランチを作ってそこにコミットしたほうがよい。
そうすれば PR 時に上記設定の action が走るので動作確認になるだろう。&lt;/p&gt;
&lt;p&gt;うん。
簡単！&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepsrun&#34;&gt;Workflow syntax for GitHub Actions - GitHub Docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35160321/&#34;&gt;GitHub、コードの脆弱性を検出する「Code Scanning」を全ユーザーに提供 - ZDNet Japan&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/githubgithub_code_scanning.html&#34;&gt;GitHub、コードの脆弱性などを発見してくれる「GitHub Code Scanning」正式版が提供開始。パブリックリポジトリには無料 － Publickey&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://news.mynavi.jp/article/20201002-1364892/&#34;&gt;GitHub、開発者がセキュリティ脆弱性を発見するための支援機能「Code Scanning」 | マイナビニュース&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-10-05-announcing-third-party-code-scanning-tools-static-analysis-and-developer-security-training/&#34;&gt;Announcing third-party code scanning tools: static analysis &amp;amp; developer security training - The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-10-27-code-scanning-a-github-repository-using-github-advanced-security-within-an-azure-devops-pipeline/&#34;&gt;Code Scanning a GitHub Repository using GitHub Advanced Security within an Azure DevOps Pipeline - The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/check-for-vulns-in-golang-dependencies/&#34;&gt;Go 依存パッケージの脆弱性検査&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;2020年10月から &lt;a href=&#34;https://text.baldanders.info/remark/2020/08/renaming-default-branch-name-in-github-repositries/&#34; title=&#34;GitHub リポジトリの既定ブランチ名が main になるらしい&#34;&gt;GitHub の新規リポジトリの既定ブランチ名が &lt;code&gt;main&lt;/code&gt; になるらしい&lt;/a&gt;。ご注意を。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Go 依存パッケージの脆弱性検査</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/check-for-vulns-in-golang-dependencies/" />
		<id>tag:text.Baldanders.info,2020-09-30:/golang/check-for-vulns-in-golang-dependencies/</id>
		<published>2020-09-30T03:49:21+00:00</published>
		<updated>2020-09-30T06:15:03+00:00</updated>
		<summary>nancy を使うのがよさげである。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どの言語でも同じだけど，インポートする外部パッケージが安全かどうかを調べるのはけっこう大変である。
で， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は &lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy&#34; title=&#34;sonatype-nexus-community/nancy: A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index&#34;&gt;nancy&lt;/a&gt; を使うのがよさげである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy&#34;&gt;sonatype-nexus-community/nancy: A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy&#34; title=&#34;sonatype-nexus-community/nancy: A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index&#34;&gt;nancy&lt;/a&gt; は “&lt;a href=&#34;https://ossindex.sonatype.org/&#34;&gt;Sonatype OSS Index&lt;/a&gt;” の情報を使って依存パッケージ／モジュールの検査をしてくれる。
ツール自体は Apache-2.0 でライセンスされている。
提供されているデータについては&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;OSS Index and the associated tools are and always will be free to the community. The data we gather is derived from public sources, and does not include human curated intelligence nor expert remediation guidance&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://ossindex.sonatype.org/&#34;&gt;Sonatype OSS Index&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とあるので，オープンな場で使うなら問題ないかな。&lt;/p&gt;
&lt;p&gt;使い方は簡単で，開発中のパッケージのリポジトリ上で&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go list -json -m all | nancy sleuth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすればよい。
問題なければ&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go list -json -m all | nancy sleuth -n
┏━━━━━━━━━━━━━━━┓
┃ Summary                      ┃
┣━━━━━━━━━━━━━┳━┫
┃ Audited Dependencies     ┃ 9┃
┣━━━━━━━━━━━━━╋━┫
┃ Vulnerable Dependencies  ┃ 0┃
┗━━━━━━━━━━━━━┻━┛
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;みたいな感じで結果を返してくれる。
問題のあるパッケージ／モジュールを含んでると，ものすごい勢いで叱られるけど（笑）&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; Actions でも使える&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy&#34; title=&#34;sonatype-nexus-community/nancy: A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index&#34;&gt;nancy&lt;/a&gt; には &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; Actions も用意されている。
ありがたや。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy-github-action&#34;&gt;sonatype-nexus-community/nancy-github-action: Sonatype Nancy for GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定は簡単。
リポジトリの &lt;code&gt;.github/workflows/&lt;/code&gt; ディレクトリに YAML ファイル（例えば &lt;code&gt;vulns.yml&lt;/code&gt;）を置き，以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vulns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;v*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pull_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vulns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Vulnerability scanner&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/setup-go@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;go-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;^1.13&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;WriteGoList&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;go list -json -m all &amp;gt; go.list&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Nancy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sonatype-nexus-community/nancy-github-action@main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで pull request 時， &lt;code&gt;master&lt;/code&gt; ブランチ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; への push 時，およびバージョンタグを打った際に脆弱性検査が走る。&lt;/p&gt;
&lt;h2&gt;依存の依存パッケージに脆弱性がある&lt;/h2&gt;
&lt;p&gt;直接インポートするパッケージに脆弱性があるなら無害なバージョンに差し替えればいいけど，依存パッケージが依存しているパッケージに脆弱性がある場合はどうするか。&lt;/p&gt;
&lt;p&gt;とりあえず，そのパッケージ宛てには issue を投げておくとして，それまでの継ぎとしては &lt;code&gt;go.mod&lt;/code&gt; ファイルの &lt;code&gt;replace&lt;/code&gt; ディレクティブを使って凌ぐことができそうだ。&lt;/p&gt;
&lt;p&gt;たとえば，依存パッケージが &lt;a href=&#34;https://github.com/etcd-io/etcd&#34; title=&#34;etcd-io/etcd: Distributed reliable key-value store for the most critical data of a distributed system&#34;&gt;github.com/coreos/etcd&lt;/a&gt; v3.3.13 に依存してるんだけど v3.3.13 に脆弱性がある場合，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;replace (
	github.com/coreos/etcd v3.3.13+incompatible =&amp;gt; github.com/coreos/etcd v3.3.25+incompatible
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとして無害なバージョンに差し替えできる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;require&lt;/code&gt; ディレクティブで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;require (
	github.com/coreos/etcd v3.3.25+incompatible
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とか書いても同じ効果があるけど，名目だけの依存関係で実際にはインポートしないパッケージは &lt;code&gt;go mod tidy&lt;/code&gt; コマンドで記述が削除されちゃうのでオススメできない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go list -m all&lt;/code&gt; って，実際にはリンクしない名目上の依存関係も全部拾ってリストアップしちゃうので，凄い面倒くさいんだよねぇ。
実際にリンクするパッケージだけリストアップしてくれないものだろうか&amp;hellip;&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;2020年10月から &lt;a href=&#34;https://text.baldanders.info/remark/2020/08/renaming-default-branch-name-in-github-repositries/&#34; title=&#34;GitHub リポジトリの既定ブランチ名が main になるらしい&#34;&gt;GitHub の新規リポジトリの既定ブランチ名が &lt;code&gt;main&lt;/code&gt; になるらしい&lt;/a&gt;。ご注意を。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Authenticator と AAL</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/authenticator-and-aal/" />
		<id>tag:text.Baldanders.info,2020-09-27:/remark/2020/09/authenticator-and-aal/</id>
		<published>2020-09-27T10:45:38+00:00</published>
		<updated>2020-09-27T11:01:38+00:00</updated>
		<summary>どうも日本の金融界は「リスク感度が鈍い」そうなので，自衛のためにも2017年にリリースされた NIST SP 800-63-3 をベースに少しお勉強しておく。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どうも日本の金融界は「&lt;a href=&#34;https://japan.cnet.com/article/35160001/&#34; title=&#34;ゆうちょ池田社長「リスク感度が鈍かった」--被害は約6000万円に拡大、2017年から発生 - CNET Japan&#34;&gt;リスク感度が鈍い&lt;/a&gt;」そうなので，自衛のためにも2017年にリリースされた &lt;a href=&#34;https://pages.nist.gov/800-63-3/&#34; title=&#34;NIST SP 800-63 Digital Identity Guidelines&#34;&gt;NIST SP 800-63-3&lt;/a&gt; をベースに少しお勉強しておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63-3.html&#34;&gt;NIST Special Publication 800-63-3: Digital Identity Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63a.html&#34;&gt;NIST Special Publication 800-63A: Enrollment and Identity Proofing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34;&gt;NIST Special Publication 800-63B: Authentication and Lifecycle Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63c.html&#34;&gt;NIST Special Publication 800-63C: Federation and Assertions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/&#34; title=&#34;NIST SP 800-63 Digital Identity Guidelines&#34;&gt;SP 800-63-3&lt;/a&gt; といえばパスワード運用で当時は話題になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/10/changes-in-password-best-practices/&#34;&gt;「パスワードのベストプラクティス」が変わる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このパスワード話が出てくるのが &lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34; title=&#34;[NIST Special Publication 800-63B: Authentication and Lifecycle Management&#34;&gt;SP 800-63B&lt;/a&gt; だが，このドキュメントでは Authenticator 全体について色々と書かれている。&lt;/p&gt;
&lt;h2&gt;Authenticator&lt;/h2&gt;
&lt;p&gt;Authenticator について適切な日本語が見当たらないが，強いて言うなら「認証機能」あるいは「認証器」といったところだろうか。
たとえばパスワードも Authenticator だし，スマホにインストールした TOTP アプリも Authenticator だ。
Yubikey なんかの暗号デバイスも Authenticator に含まれる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34; title=&#34;[NIST Special Publication 800-63B: Authentication and Lifecycle Management&#34;&gt;SP 800-63B&lt;/a&gt; では Authenticator を以下の9つに分類している。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;種別名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;認証要素&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Memorized Secrets&lt;br&gt;記憶シークレット&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;知識&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Look-Up Secrets&lt;br&gt;ルックアップ・シークレット&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Out-of-Band Devices&lt;br&gt;経路外デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single-Factor OTP Device&lt;br&gt;単要素 OTP デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-Factor OTP Devices&lt;br&gt;多要素 OTP デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有＋知識／生体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single-Factor Cryptographic Software&lt;br&gt;単要素暗号ソフトウェア&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single-Factor Cryptographic Devices&lt;br&gt;単要素暗号デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-Factor Cryptographic Software&lt;br&gt;多要素暗号ソフトウェア&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有＋知識／生体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-Factor Cryptographic Devices&lt;br&gt;多要素暗号デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有＋知識／生体&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;また，各 Authenticator の例としては以下のものが挙げられる。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Authenticator&lt;/th&gt;
&lt;th&gt;具体例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;記憶シークレット&lt;/td&gt;
&lt;td&gt;パスワード，PINコード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ルックアップ・シークレット&lt;/td&gt;
&lt;td&gt;乱数表，認証失敗時のリカバリコード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;経路外デバイス&lt;/td&gt;
&lt;td&gt;SMS によるコード送信， QR コード（電子メールや VoIP は認められない）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;単要素 OTP デバイス&lt;/td&gt;
&lt;td&gt;アクティベーションを必要としない OTP デバイスまたはソフトウェア&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多要素 OTP デバイス&lt;/td&gt;
&lt;td&gt;アクティベーションを行った上で利用可能な OTP デバイスまたはソフトウェア&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;単要素暗号ソフトウェア&lt;/td&gt;
&lt;td&gt;セキュアなストレージ上で保護されている暗号鍵&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;単要素暗号デバイス&lt;/td&gt;
&lt;td&gt;FIDO U2F の USB ドングル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多要素暗号ソフトウェア&lt;/td&gt;
&lt;td&gt;単要素暗号ソフトウェアに対して追加のアクティベーションを必要とするもの&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多要素暗号デバイス&lt;/td&gt;
&lt;td&gt;単要素暗号デバイスに対して追加のアクティベーションを必要とするもの&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Authenticator Assurance Level&lt;/h2&gt;
&lt;p&gt;さらに &lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34; title=&#34;[NIST Special Publication 800-63B: Authentication and Lifecycle Management&#34;&gt;SP 800-63B&lt;/a&gt; では AAL (Authenticator Assurance Level) を定義している。
AAL は 1 〜 3 の3段階あり，それぞれ以下に示す  Authenticator の組み合わせを許容している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AAL 1 では9種の Authenticator 全て許容され，単要素の認証で OK&lt;/li&gt;
&lt;li&gt;AAL 2 では以下に示す通り複数の認証要素による多要素認証が必要：
&lt;ul&gt;
&lt;li&gt;多要素 OTP デバイス&lt;/li&gt;
&lt;li&gt;多要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;多要素暗号デバイス&lt;/li&gt;
&lt;li&gt;記憶シークレット＋以下
&lt;ul&gt;
&lt;li&gt;ルックアップ・シークレット&lt;/li&gt;
&lt;li&gt;経路外デバイス&lt;/li&gt;
&lt;li&gt;単要素 OTP デバイス&lt;/li&gt;
&lt;li&gt;単要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;単要素暗号デバイス&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AAL 3 では以下に示す通り，暗号鍵の所持証明要素とハードウェア関与を含む複数の認証要素による多要素認証が必要：
&lt;ul&gt;
&lt;li&gt;多要素暗号デバイス&lt;/li&gt;
&lt;li&gt;単要素暗号デバイス＋記憶シークレット&lt;/li&gt;
&lt;li&gt;多要素OTPデバイス(SW/HW)＋単要素暗号デバイス&lt;/li&gt;
&lt;li&gt;多要素OTPデバイス(HW)＋単要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;単要素OTPデバイス(HW)＋多要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;単要素OTPデバイス(HW)＋単暗号ソフトウェア＋記憶シークレット&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AAL の各レベルごとに要求されるセキュリティ事項（一部）は以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;要求事項&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;AAL 1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;AAL 2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;AAL 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中間者攻撃耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verifier なりすまし耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verifier 改ざん耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;リプレイ耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;認証意図（AuthN Inbtent）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;推奨&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;レコード保持ポリシー&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;プライバシー統制&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;金融系サービスの subscriber 確認で乗っ取りやなりすましを防ぎたいなら AAL 3 で何らかの物理暗号デバイスが必要だと思うけどねー。&lt;/p&gt;
&lt;h2&gt;格子型の乱数表は NG&lt;/h2&gt;
&lt;p&gt;現在は使ってるところはないだろうが，かつてネットバンキングでよく見られた格子型の乱数表はルックアップ・シークレットとしても NG だそうだ。
まぁ，当然だよな。&lt;/p&gt;
&lt;h2&gt;SMS 認証は非推奨？&lt;/h2&gt;
&lt;p&gt;NIST は SMS によるコード送信について， &lt;a href=&#34;https://pages.nist.gov/800-63-3/&#34; title=&#34;NIST SP 800-63 Digital Identity Guidelines&#34;&gt;SP 800-63-3&lt;/a&gt; のドラフト段階では非推奨にするつもりだったらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/07/26/20160725nist-declares-the-age-of-sms-based-2-factor-authentication-over/&#34;&gt;SMSを使った二要素認証を非推奨〜禁止へ、米国立技術規格研究所NISTの新ガイダンス案 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかしその後，激しい議論があったようで，最終的には “&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html#restricted&#34;&gt;Restricted Authenticator&lt;/a&gt;” という位置づけまで緩和されたようだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Currently, authenticators leveraging the public switched telephone network, including phone- and Short Message Service (SMS)-based one-time passwords (OTPs) are restricted. Other authenticator types may be added as additional threats emerge. Note that, among other requirements, even when using phone- and SMS-based OTPs, the agency also has to verify that the OTP is being directed to a phone and not an IP address, such as with VoIP, as these accounts are not typically protected with multi-factor authentication&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-FAQ/#q-b01&#34;&gt;NIST SP 800-63 Digital Identity Guidelines-FAQ&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;（スマホを含む）電話機に依存した認証は，プライバシーも絡めて考えると筋が悪い。
ぶっちゃけ SMS 認証を含む経路外デバイスを使った認証は排除するか（ルックアップ・シークレットのように）優先順位を下げて非常時のみ使えるようにするのがいいと思う。
もちろん&lt;a href=&#34;https://japan.cnet.com/article/35159898/&#34; title=&#34;Twitterに集団訴訟--電話番号がターゲティング広告に不正利用された可能性 - CNET Japan&#34;&gt;電話番号を広告に流用&lt;/a&gt;するなど以っての外である。&lt;/p&gt;
&lt;h2&gt;生体情報は Authenticator として使えるか&lt;/h2&gt;
&lt;p&gt;Authenticator の分類を見れば分かるように，生体情報は単独では認証手段としては使えないという認識のようだ。
そもそも&lt;strong&gt;生体情報は秘密情報ではない&lt;/strong&gt;のだから当たり前といえば当たり前かな。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/usnistgov/800-63-3&#34;&gt;usnistgov/800-63-3: Home to public development of NIST Special Publication 800-63-3: Digital Authentication Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/kthrtty/20171027-nist-sp80063bkthrtty-81333156&#34;&gt;NIST SP800-63-3翻訳版63-Bパートの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://www.nic.ad.jp/sc-sendai/program/iwsc-sendai-d2-6.pdf&#34;&gt;認証にまつわるセキュリティの新常識 &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.trustlogin.com/hc/ja/articles/115004031154-%E4%B8%96%E7%95%8C%E3%81%AE%E9%9B%BB%E5%AD%90%E8%AA%8D%E8%A8%BC%E5%9F%BA%E6%BA%96%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8B-NIST-SP800-63-3%E3%82%92%E8%AA%AD%E3%81%BF%E8%A7%A3%E3%81%8F&#34;&gt;世界の電子認証基準が変わる：NIST SP800-63-3を読み解く – サポート − トラスト・ログイン byGMO【旧SKUID(スクイド)】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-09-25-phishing-resistant-sms-autofill/&#34;&gt;Phishing Resistant SMS Autofill - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;NTT出版 2013-12-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-28&#34;&gt;2015-11-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 信頼と裏切りの社会 --&gt;
</content>
	</entry><entry>
		<title>ブログのネタをカンバン方式で管理する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/github-issues-milestones-and-projects/" />
		<id>tag:text.Baldanders.info,2020-09-22:/remark/2020/09/github-issues-milestones-and-projects/</id>
		<published>2020-09-22T10:32:40+00:00</published>
		<updated>2020-09-22T20:47:46+00:00</updated>
		<summary>これで塩漬け案件が無闇に増えるのを防ぐわけ。このまましばらく運用してみよう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ここのブログ記事は，大体は思い付きで書いているのだが，ネタとして溜め込んでいるものもそこそこある。
今まではテキストファイルでフラットに管理していたのだが「そういや &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; って Projects 機能があるぢゃん♡」と気がついた。&lt;/p&gt;
&lt;p&gt;そこで溜め込んでるネタを &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects にいったん吐き出してみる&lt;/a&gt;ことにした。
まずはネタを全部 &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; に書き出すところから。
書き出したらそれを &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects&lt;/a&gt; で整理していく。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の Projects 機能は，いわゆる「カンバン方式」で &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; を管理できる。
こんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34;&gt;&lt;img src=&#34;./kanban.png&#34; srcset=&#34;./kanban.png 1477w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ブログのネタ帳&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34;&gt;ブログのネタ帳&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とりあえず &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; に上げたものは全部 “Materials” に寄せておいて，その中で着手予定のものを “Issues” へ。
実際に着手を始めたものを “WIP (Work In Progress)” へ移動し，完了したら案件を Close (自動で “Done” に移動) する。&lt;/p&gt;
&lt;p&gt;単純工程なこともあり WIP と Done はひと組しかないが，チームでやるシステム開発じゃないんだからこれで必要十分だろう。&lt;/p&gt;
&lt;p&gt;ただし &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; も &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects&lt;/a&gt; も期限を管理できないので &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/milestones&#34; title=&#34;Milestones - spiegel-im-spiegel/github-pages-env&#34;&gt;Milestones&lt;/a&gt; を設定する。
ここで言う期限はいわゆる「締切」ではない。
文字通りの一里塚。つまり，あるマイルストーンの期限が来たら終了してない案件を次のマイルストーンに回すか止めるか判断するわけだ。&lt;/p&gt;
&lt;p&gt;これで塩漬け案件が無闇に増えるのを防げる（筈）。
まぁ，このまましばらく運用してみよう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/srggrs/assign-one-project-github-action&#34;&gt;srggrs/assign-one-project-github-action: Automatically add an issue or pull request to specific GitHub Project(s) when you create and/or label them.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/move-with-trello/&#34;&gt;Trello で引っ越し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01IGW5IIW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51gC8Tmq1kL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01IGW5IIW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;リーン開発の現場 カンバンによる大規模プロジェクトの運営&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ＨｅｎｒｉｋＫｎｉｂｅｒｇ (著), 角谷信太郎 (著), 市谷聡啓 (翻訳), 藤原大 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オーム社 2013-10-25 (Release 2017-07-15)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01IGW5IIW (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私はこれで勉強しました。もう一回読み直すかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-02-17&#34;&gt;2015-02-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- リーン開発の現場 --&gt;
</content>
	</entry><entry>
		<title>NIST SP 800-207: “Zero Trust Architecture”</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/nist-sp-800-207-zero-trust-architecture/" />
		<id>tag:text.Baldanders.info,2020-09-17:/remark/2020/09/nist-sp-800-207-zero-trust-architecture/</id>
		<published>2020-09-17T03:25:07+00:00</published>
		<updated>2020-12-27T01:17:35+00:00</updated>
		<summary>Refactoring することを前提としたシステム設計が大事。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;毎度の言い訳だが（笑），私がネットワーク管理者でセキュリティ管理者だったのは遥か昔の牧歌的な時代であり，現在時点で参加・所属する企業・組織のポリシーについてどうこう言う権限はないし，その気もない。
ただし，自衛のための知識を摂取し続けることは必要だと思っている。&lt;/p&gt;
&lt;p&gt;というわけで，今回は2020年8月に最終版が公開された NIST &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; の触りの部分を覚え書きとして記しておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207, Zero Trust Architecture | CSRC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pwc.com/jp/ja/knowledge/column/awareness-cyber-security/zero-trust-architecture-jp.html&#34;&gt;NIST SP800-207 「ゼロトラスト・アーキテクチャ」の解説と日本語訳 | PwC Japanグループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Zero Trust および Zero Trust Architecture の定義&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では Zero Trust および Zero Trust Architecture は以下のように定義づけられている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;&lt;i&gt;Zero trust&lt;/i&gt; (ZT) provides a collection of concepts and ideas designed to minimize uncertainty in enforcing accurate, least privilege per-request access decisions in information systems and services in the face of a network viewed as compromised. &lt;i&gt;Zero trust architecture&lt;/i&gt; (ZTA) is an enterprise’s cybersecurity plan that utilizes zero trust concepts and encompasses component relationships, workflow planning, and access policies. Therefore, a zero trust enterpriseis the network infrastructure (physical and virtual) and operational policies that are in place for an enterprise as a product of a zero trust architecture plan&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;SP 800-207: Zero Trust Architecture&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ポイントは，アクセスを行うリソース，権限，期間が最小となるよう設計することだ。
これは，特定の安全地帯に入る許可さえあれば，内部のリソースにラフにアクセスできる従来の境界型セキュリティ設計とは大きく異なっている。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では，アクセスする対象を &lt;q lang=&#34;en&#34;&gt;resource&lt;/q&gt; と呼んでいる。
これは単なるデータだけではなく物理的なデバイスも対象となっていることを示す。
つまり (&lt;a href=&#34;https://www.gartner.com/jp/newsroom/press-releases/pr-20200910&#34; title=&#34;ガートナー、「日本における未来志向型インフラ・テクノロジのハイプ・サイクル：2020年」を発表&#34;&gt;日本では既に幻滅期に入っている&lt;/a&gt;) IoT も視野に入っているわけだ。&lt;/p&gt;
&lt;p&gt;さらに &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では，アクセスを行う主体を &lt;q lang=&#34;en&#34;&gt;subjects&lt;/q&gt; と呼んでいる。
そう呼ぶからには subjects が指すのは人間（ユーザ）だけではなく，アプリケーション，サービス，デバイス等も含まれる。
また subjects は &lt;q lang=&#34;en&#34;&gt;authorized and approved subjects&lt;/q&gt; と &lt;q lang=&#34;en&#34;&gt;all other subjects&lt;/q&gt; で色分けされている。
もちろん &lt;q lang=&#34;en&#34;&gt;all other subjects&lt;/q&gt; の代表は「攻撃者（attackers）」である。&lt;/p&gt;
&lt;p&gt;つまり，あるリソースに対して認証・承認されない actor は，システム上の役割に関わらず，&lt;strong&gt;全て敵&lt;/strong&gt;である（笑） この辺が「ゼロトラスト」と呼ばれる所以なのだろう。&lt;/p&gt;
&lt;p&gt;ZT/ZTA が重視される理由としては以下の2つが挙げられると思う。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;企業・組織への攻撃が巧妙化していて，セキュリティ管理の比重が防御から監視へシフトした&lt;/li&gt;
&lt;li&gt;クラウド上の XaaS リソースは「境界型」では管理できない&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;できれば安直にクラウドに繋がろうとするスマート家電もなんとかしてほしいのだが&amp;hellip;&lt;/p&gt;
&lt;h2&gt;Zero Trust Architecture の基本理念&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では ZTA の基本理念として，以下の7つの項目を挙げている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;All data sources and computing services are considered resources.&lt;/li&gt;
&lt;li&gt;All communication is secured regardless of network location.&lt;/li&gt;
&lt;li&gt;Access to individual enterprise resources is granted on a per-session basis.&lt;/li&gt;
&lt;li&gt;Access to resources is determined by dynamic policy—including the observable state of client identity, application/service, and the requesting asset—and may include other behavioral and environmental attributes.&lt;/li&gt;
&lt;li&gt;The enterprise monitors and measures the integrity and security posture of all owned and associated assets.&lt;/li&gt;
&lt;li&gt;All resource authentication and authorization are dynamic and strictly enforced before access is allowed.&lt;/li&gt;
&lt;li&gt;The enterprise collects as much information as possible about the current state of assets, network infrastructure and communications and uses it to improve its security posture.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;SP 800-207: Zero Trust Architecture&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ちなみに日本語訳は以下の通り。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;すべてのデータソースとコンピューティングサービスをリソースとみなす&lt;/li&gt;
&lt;li&gt;ネットワークの場所に関係なく、すべての通信を保護する&lt;/li&gt;
&lt;li&gt;企業リソースへのアクセスは、セッション単位で付与する&lt;/li&gt;
&lt;li&gt;リソースへのアクセスは、クライアントアイデンティティ、アプリケーション/サービス、リクエストする資産の状態、その他の行動属性や環境属性を含めた動的ポリシーにより決定する&lt;/li&gt;
&lt;li&gt;すべての資産の整合性とセキュリティ動作を監視し、測定する&lt;/li&gt;
&lt;li&gt;すべてのリソースの認証と認可を動的に行い、アクセスが許可される前に厳格に実施する&lt;/li&gt;
&lt;li&gt;資産、ネットワークインフラストラクチャ、通信の現状について可能な限り多くの情報を収集し、セキュリティ態勢の改善に利用する&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.pwc.com/jp/ja/knowledge/column/awareness-cyber-security/zero-trust-architecture-jp.html&#34;&gt;NIST SP800-207 「ゼロトラスト・アーキテクチャ」の解説と日本語訳 | PwC Japanグループ&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;面白いのは ZTA に最初から「監視」が組み込まれていること，常に状況をフィードバックして「改善」のサイクルを構築するところまでがセットになっていることだろう。&lt;/p&gt;
&lt;p&gt;セキュリティに於いても PDCA サイクル，いや今なら OODA ループか，が重要ということやね（笑）&lt;/p&gt;
&lt;h2&gt;大変なのは&amp;hellip;&lt;/h2&gt;
&lt;p&gt;ZT を組み込むこと自体は，そう難しくないだろう。
おそらくは既存のシステムに ZT の仕組みをラッピングすることで構成可能なはずだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;&lt;img src=&#34;./zero-trust-access.png&#34; srcset=&#34;./zero-trust-access.png 1183w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;SP 800-207: Zero Trust Architecture&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;SP 800-207: Zero Trust Architecture&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;大変なのは ZTA におけるリソースとサブジェクト（の権限）の定義・運用・評価だろう。
これ，かなり細かい要求分析が必要だと思うよ。&lt;/p&gt;
&lt;p&gt;当然ながら人間組織の役職で権限を決めるわけにはいかない。
システム管理者やセキュリティ管理者（セキュリティ企業も含めて）であっても「アクセスしてはいけないリソース」はある。
サブジェクトやリソースの杜撰な管理で &lt;a href=&#34;https://text.baldanders.info/remark/2020/07/class-breaks-from-twitter/&#34; title=&#34;Twitter から始まる Class Break&#34;&gt;Class Break を引き起こした Twitter&lt;/a&gt; の事例は耳に新しいだろう。
日本での最近の Class Break 事例は「ドコモロ系事案&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」か（笑）&lt;/p&gt;
&lt;p&gt;だからこそループを回して「改善」していかなければならないんだろうけど。
Refactoring することを前提としたシステム設計が大事。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-09-24-lightning-qa-devsecops-in-five-with-maya-kaczorowski/&#34;&gt;Lightning Q&amp;amp;A: DevSecOps in five with Maya Kaczorowski - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atmarkit.co.jp/ait/articles/2009/15/news007.html&#34;&gt;NISTによる「ゼロトラストにおける7つの基本原則」と従来の境界型防御との関係：働き方改革時代の「ゼロトラスト」セキュリティ（6） - ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jpn.nec.com/cybersecurity/blog/201016/index.html&#34;&gt;【超図解】ゼロトラスト: NECセキュリティブログ | NEC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;NTT出版 2013-12-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-28&#34;&gt;2015-11-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 信頼と裏切りの社会 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B07ND6QTN4?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51NHngUGOFL._SL160_.jpg&#34; width=&#34;103&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07ND6QTN4?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ＯＯＤＡ　ＬＯＯＰ（ウーダループ）―次世代の最強組織に進化する意思決定スキル&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;チェット リチャーズ (著), 原田 勉 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;東洋経済新報社 2019-02-22 (Release 2019-02-22)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B07ND6QTN4 (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;買ったはいいが，実はまだ読んでない。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-07-02&#34;&gt;2019-07-02&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- OODA LOOP --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/16/064653&#34; title=&#34;不正利用が発生した電子決済サービスについてまとめてみた - piyolog&#34;&gt;キャッシュレス決済を使った不正利用に関する一連のインシデント&lt;/a&gt;のこと。 Facebook の TL で見かけた「ドコモロ系事案」のフレーズが面白かったので使ってみた（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>経路の暗号化とデータの暗号化では要件が異なる</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/07/requirement-for-encryption/" />
		<id>tag:text.Baldanders.info,2020-07-08:/remark/2020/07/requirement-for-encryption/</id>
		<published>2020-07-08T05:40:40+00:00</published>
		<updated>2020-09-20T02:38:11+00:00</updated>
		<summary>データを安全に受け渡ししたいのならデータの暗号化を端折ってはいけない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;数学ガール・シリーズを読んでる途中だが，気になる記事を見つけたので。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/security-theater/&#34; title=&#34;劇場型セキュリティと PPAP&#34;&gt;以前の記事&lt;/a&gt;で紹介した&lt;a href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;情報処理 2020年7月号 | 情報処理学会 | 科学・テクノロジー | Kindleストア | Amazon&#34;&gt;「情報処理」2020年7月号&lt;/a&gt;内の PPAP 座談会で妙に Firefox Send を推してるなぁ，と思っていたが（笑），実は件のサービスが一時停止に追い込まれているらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1264007.html&#34;&gt;無償のファイル送信サービス“Firefox Send”が一時停止中 ～マルウェアによる悪用が増加 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんでも&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;“Firefox Send”が利用する“send.firefox.com”というドメインは比較的信頼されており、スパムメールフィルターをパスしてしまったり、警戒心の高いユーザーでさえも気を許してクリックしてしまう可能性がある&lt;/q&gt;。
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1264007.html&#34;&gt;無償のファイル送信サービス“Firefox Send”が一時停止中 ～マルウェアによる悪用が増加&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とのこと。&lt;/p&gt;
&lt;p&gt;私は今回の件で Firefox Send 側に瑕疵があるとは思わない。
でも詐欺（social engineering）の温床になるのであれば，最悪は閉鎖せざるを得ないだろう。
ニンともカンとも，お気の毒なことである。&lt;/p&gt;
&lt;h2&gt;暗号化の手段&lt;/h2&gt;
&lt;p&gt;あるデータを暗号化技術によってオンラインで安全に運ぶための手段としては，大きく2つある。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;経路の暗号化&lt;/li&gt;
&lt;li&gt;データの暗号化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例えば TLS (Transport Layer Security) は典型的な「経路の暗号化」である。
暗号化メッセージング・サービスも基本的には「経路の暗号化」によってメッセージの秘匿を達成している。&lt;/p&gt;
&lt;p&gt;Firefox Send は一見「データの暗号化」に見えるかもしれないが，実は「経路の暗号化」に分類できる。
何故なら Firefox Send はデータ送受信のエンド・ポイントには介入しないからだ。
ここに犯罪者の付け入る余地がある。&lt;/p&gt;
&lt;h2&gt;経路の暗号化の4要件&lt;/h2&gt;
&lt;p&gt;経路の暗号化の要件には以下の4つがある。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;機密性（Confidentiality）&lt;/li&gt;
&lt;li&gt;完全性（Integrity）&lt;/li&gt;
&lt;li&gt;認証（Authentication）&lt;/li&gt;
&lt;li&gt;否認可能（Deniability）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;経路の暗号化の場合，セッション中になりすましや改ざんがないことは勿論だが，セッション終了後のいかなる時点でも内容が再生されないこと，が要求される。
そのためには「否認可能」であることが必要なのだ。&lt;/p&gt;
&lt;p&gt;「否認可能」を達成する方法としては PFS (Perfect Forward Secrecy) を組み込む手がある。
また，暗号技術そのものではないが，セッション中のトラフィック・データやログなどを正しく破棄する運用が必要である。
まぁ，ログはそもそも取らないのが最善なのだが。&lt;/p&gt;
&lt;h2&gt;データの暗号化の4要件&lt;/h2&gt;
&lt;p&gt;一方，データの暗号化の要件は経路の暗号化の要件とは少し異なっている。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;機密性（Confidentiality）&lt;/li&gt;
&lt;li&gt;完全性（Integrity）&lt;/li&gt;
&lt;li&gt;認証（Authentication）&lt;/li&gt;
&lt;li&gt;否認防止（Non-repudiation）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;見ての通り，注目は4番目の「否認防止」である。&lt;/p&gt;
&lt;p&gt;「否認防止」とは，「データを送った」という事実を送信側が否定できないこと，を指す。
もっと簡単に郵便の比喩で言うなら「内容証明付き」のデータにするということである。&lt;/p&gt;
&lt;p&gt;これを達成するには永続的（証明（certification）された公開鍵がセッションやドメインを超えて有効であること）な鍵で電子署名すればよい。&lt;/p&gt;
&lt;h2&gt;データの暗号化を端折ってはいけない&lt;/h2&gt;
&lt;p&gt;注意すべきは「否認可能」と「否認防止」は要件としては真逆である点だ。&lt;/p&gt;
&lt;p&gt;もし Firefox Send で送るデータに最低でも（経路の暗号化とは異なる鍵で）電子署名を付与していれば多少はリスクを軽減できたかもしれない。
まぁ URL で釣る（phishing）のはオンライン詐欺の常套手段なので，そもそも URL を渡すアイデアが微妙なのかもしれないけど。&lt;/p&gt;
&lt;p&gt;公開鍵暗号方式を利用した暗号化を面倒臭がる人は多く&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，これを隠蔽または回避するために（経路の暗号化のみで）データの暗号化を端折るサービスやアプリケーションが多いが，データを（暗号化技術を使って）安全に受け渡ししたいのなら端折ってはいけない。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/18/2020-09-17-mozilla-shutters-firefox-send-and-notes/&#34;&gt;Mozillaがファイル転送サービスのFirefox SendとメモアプリのFirefox Notesの開発を断念  |  TechCrunch Japan&lt;/a&gt; : やはり閉鎖になったか&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51VvkVylsGL._SL160_.jpg&#34; width=&#34;120&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;情報処理 2020年7月号&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;情報処理学会 (著)&lt;/dd&gt;
    &lt;dd&gt; 2020-06-15 (Release 2020-06-15)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B089N3VX86 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;PPAP 特集（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-06-25&#34;&gt;2020-06-25&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 情報処理 2020年7月号 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;毎回パスワードを考えてデータをロックするより，最初に公開鍵を決めておいて使いまわしたほうが楽だし安全だと思うのだが&amp;hellip; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>劇場型セキュリティと PPAP</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/06/security-theater/" />
		<id>tag:text.Baldanders.info,2020-06-25:/remark/2020/06/security-theater/</id>
		<published>2020-06-25T09:05:01+00:00</published>
		<updated>2020-06-25T09:05:15+00:00</updated>
		<summary>つか，今だにこんなことやってる企業あるの？ ホンマに？</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;最近セキュリティ関連で PPAP なる謎の隠語を聞くのだが，どうも&lt;a href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;情報処理 2020年7月号 | 情報処理学会 | 科学・テクノロジー | Kindleストア | Amazon&#34;&gt;「情報処理」2020年7月号&lt;/a&gt;の特集記事が発端らしい？&lt;/p&gt;
&lt;p&gt;命名の元ネタはもちろんアレである（笑）&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/0E00Zuayv9Q&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0E00Zuayv9Q&#34;&gt;PPAP（Pen-Pineapple-Apple-Pen Official）ペンパイナッポーアッポーペン／PIKOTARO(ピコ太郎) - YouTube&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;PPAP については特集記事を見ていただくとして，簡単にいうと，暗号化 zip ファイルとその復号パスワードを相手に電子メールで送りつける日本独特の商慣行（笑）を揶揄した言葉のようだ。&lt;/p&gt;
&lt;p&gt;つか，今だにこんなことやってる企業あるの？ ホンマに？&lt;/p&gt;
&lt;h2&gt;劇場型セキュリティ（Security Theater）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;情報処理 2020年7月号 | 情報処理学会 | 科学・テクノロジー | Kindleストア | Amazon&#34;&gt;「情報処理」2020年7月号&lt;/a&gt;でも説明されているが， security theater というのはゼロ年代初頭に起きた同時多発テロ（9.11）を受けて打ち出されたセキュリティ対策の間抜けさ加減を指した言葉で， Bruce Schneier さん著作の『&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;セキュリティはなぜやぶられたのか | ブルース・シュナイアー, 井口 耕二 |本 | 通販 | Amazon&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;』にも登場する。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;セキュリティは、ある程度、どう感じるかという問題だと第1章で説明した。そうであるなら、実体だけでなく守られているという感覚も得られる対策が望ましい。しかし実際には、実体がなくて感覚だけの対策もある。それでは単なる&lt;strong&gt;セキュリティ芝居&lt;/strong&gt;である。言い訳にすぎないのだ&lt;/q&gt;。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;最近でも COVID-2019 絡みで&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;As scientists and health care professionals in general agree, thermal imaging systems are an inappropriate and ineffective strategy for identifying individual cases of Covid-19 and preventing its spread. Beyond the wasted costs, installing thermal scanning as part of a “back to work” process might create a false sense of security that convinces some to prematurely return to their jobs and emboldens others to relax more effective strategies, such as social distancing and responsible contact tracing efforts&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://onezero.medium.com/the-public-is-being-misled-by-pandemic-technology-that-wont-keep-them-safe-1966ed740a87&#34;&gt;The Public Is Being Misled by Pandemic Technology That Won’t Keep Them Safe&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なんてな話もある。
PPAP とか典型的な security theater と言えるだろう。&lt;/p&gt;
&lt;h2&gt;暗号化 zip とか使うな！&lt;/h2&gt;
&lt;p&gt;そもそもの話として，暗号化 zip ファイルを解読するツールはそこらに普通に出回ってるけどね（笑）&lt;/p&gt;
&lt;p&gt;まともな暗号化圧縮が使いたいなら &lt;a href=&#34;https://www.gnupg.org/documentation/manuals/gnupg/gpgtar.html&#34; title=&#34;Using the GNU Privacy Guard: gpgtar&#34;&gt;gpgtar&lt;/a&gt; を使いましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/gpgtar/&#34;&gt;複数ファイルをまとめて署名・暗号化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows 環境に限定するなら「&lt;a href=&#34;https://hibara.org/software/attachecase/&#34; title=&#34;アタッシェケース#3 | HiBARA Software&#34;&gt;アタッシェケース&lt;/a&gt;」等を使う手もあり（パスワード配布の問題は残るけど）。&lt;/p&gt;
&lt;h2&gt;電子メールとか使うな！&lt;/h2&gt;
&lt;p&gt;電子メールはよく葉書に喩えられる。
例として，年賀状に厨二病的な文言を書いて相手に「それ」が渡るまで，どれだけ見られる可能性があるか想像したら軽く死ねるだろう。&lt;/p&gt;
&lt;p&gt;いわんや，国家権力をや，である。&lt;/p&gt;
&lt;p&gt;大昔，電子メールは重要なメッセージング基盤だった。
だから PGP をはじめとして安全でない電子メールの内容をいかに安全に相手に届けるか，を真剣に考える必要があった。
しかし今日においては，苦労して電子メールなんか使わなくても秘密を安全に配信する手段はあるのだ。&lt;/p&gt;
&lt;h2&gt;むしろ電子署名をちゃんとしようよ&lt;/h2&gt;
&lt;p&gt;私は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を日常的に使ってるが &lt;code&gt;git commit&lt;/code&gt; 時の電子署名が主な使い道である。
職業エンジニアだった頃も機密文書の共有は Box や Dropbox 等のクラウド・ストレージを使うのが当たり前だったし，そこで暗号化が必要なら &lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; 文書に &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; で署名・暗号化すればよかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/git-commit-with-openpgp-signature/&#34;&gt;Git Commit で OpenPGP 署名を行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/libreoffice-with-openpgp/&#34;&gt;LibreOffice と OpenPGP （仕切り直し）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大袈裟な基盤は必要なく &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; の peer-to-peer で緩やかな信用モデルの下に運用できていれば通常業務には十分である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/web-of-trust/&#34;&gt;OpenPGP の電子署名は「ユーザーの身元を保証し」ない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/06/04/2020-06-03-paperwork-automation-platform-anvil-raises-5-million-from-googles-gradient-ventures/&#34;&gt;PDFベースの共同編集・電子署名サービスのAnvilがグーグル系VCから5億円超を調達  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35155164/&#34;&gt;電子署名サービスを今夏提供へ&amp;ndash;ドロップボックスが2020年の事業戦略 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のようなニュースを見かけるようになり「リモートワークがメインになれば要るよなぁ」と思った一方で，よりにもよって「情報処理」みたいな雑誌が PPAP がどうのとか言ってるのを見るとガッカリしてしまう。
日本の企業はどこまで周回遅れなのか。&lt;/p&gt;
&lt;p&gt;もはや暗号化なんてどうとでもできるけど，ゼロトラスト云々な時代なら「そのデータは本当に『正しい』よね？」ってのがより重要なんじゃないのか。&lt;/p&gt;
&lt;p&gt;とっとと次に行こうぜ。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51VvkVylsGL._SL160_.jpg&#34; width=&#34;120&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;情報処理 2020年7月号&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;情報処理学会 (著)&lt;/dd&gt;
    &lt;dd&gt; 2020-06-15 (Release 2020-06-15)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B089N3VX86 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;PPAP 特集（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-06-25&#34;&gt;2020-06-25&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 情報処理 2020年7月号 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
</content>
	</entry>
</feed>
