<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of management - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/management/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/management/index.xml" />
	<id>tag:text.Baldanders.info,2020-09-22:/tags</id>
	<updated>2020-09-22T19:32:40+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>ブログのネタをカンバン方式で管理する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/github-issues-milestones-and-projects/" />
		<id>tag:text.Baldanders.info,2020-09-22:/remark/2020/09/github-issues-milestones-and-projects/</id>
		<published>2020-09-22T10:32:40+00:00</published>
		<updated>2020-09-22T20:47:46+00:00</updated>
		<summary>これで塩漬け案件が無闇に増えるのを防ぐわけ。このまましばらく運用してみよう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ここのブログ記事は，大体は思い付きで書いているのだが，ネタとして溜め込んでいるものもそこそこある。
今まではテキストファイルでフラットに管理していたのだが「そういや &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; って Projects 機能があるぢゃん♡」と気がついた。&lt;/p&gt;
&lt;p&gt;そこで溜め込んでるネタを &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects にいったん吐き出してみる&lt;/a&gt;ことにした。
まずはネタを全部 &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; に書き出すところから。
書き出したらそれを &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects&lt;/a&gt; で整理していく。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の Projects 機能は，いわゆる「カンバン方式」で &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; を管理できる。
こんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34;&gt;&lt;img src=&#34;./kanban.png&#34; srcset=&#34;./kanban.png 1477w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ブログのネタ帳&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34;&gt;ブログのネタ帳&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とりあえず &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; に上げたものは全部 “Materials” に寄せておいて，その中で着手予定のものを “Issues” へ。
実際に着手を始めたものを “WIP (Work In Progress)” へ移動し，完了したら案件を Close (自動で “Done” に移動) する。&lt;/p&gt;
&lt;p&gt;単純工程なこともあり WIP と Done はひと組しかないが，チームでやるシステム開発じゃないんだからこれで必要十分だろう。&lt;/p&gt;
&lt;p&gt;ただし &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; も &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects&lt;/a&gt; も期限を管理できないので &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/milestones&#34; title=&#34;Milestones - spiegel-im-spiegel/github-pages-env&#34;&gt;Milestones&lt;/a&gt; を設定する。
ここで言う期限はいわゆる「締切」ではない。
文字通りの一里塚。つまり，あるマイルストーンの期限が来たら終了してない案件を次のマイルストーンに回すか止めるか判断するわけだ。&lt;/p&gt;
&lt;p&gt;これで塩漬け案件が無闇に増えるのを防げる（筈）。
まぁ，このまましばらく運用してみよう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/srggrs/assign-one-project-github-action&#34;&gt;srggrs/assign-one-project-github-action: Automatically add an issue or pull request to specific GitHub Project(s) when you create and/or label them.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/move-with-trello/&#34;&gt;Trello で引っ越し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01IGW5IIW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51gC8Tmq1kL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01IGW5IIW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;リーン開発の現場 カンバンによる大規模プロジェクトの運営&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ＨｅｎｒｉｋＫｎｉｂｅｒｇ (著), 角谷信太郎 (著), 市谷聡啓 (翻訳), 藤原大 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オーム社 2013-10-25 (Release 2017-07-15)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01IGW5IIW (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私はこれで勉強しました。もう一回読み直すかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-02-17&#34;&gt;2015-02-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- リーン開発の現場 --&gt;
</content>
	</entry><entry>
		<title>NIST SP 800-207: “Zero Trust Architecture”</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/nist-sp-800-207-zero-trust-architecture/" />
		<id>tag:text.Baldanders.info,2020-09-17:/remark/2020/09/nist-sp-800-207-zero-trust-architecture/</id>
		<published>2020-09-17T03:25:07+00:00</published>
		<updated>2020-09-17T03:34:57+00:00</updated>
		<summary>Refactoring することを前提としたシステム設計が大事。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;毎度の言い訳だが（笑），私がネットワーク管理者でセキュリティ管理者だったのは遥か昔の牧歌的な時代であり，現在時点で参加・所属する企業・組織のポリシーについてどうこう言う権限はないし，その気もない。
ただし，自衛のための知識を摂取し続けることは必要だと思っている。&lt;/p&gt;
&lt;p&gt;というわけで，今回は2020年8月に最終版が公開された NIST &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; の触りの部分を覚え書きとして記しておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207, Zero Trust Architecture | CSRC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Zero Trust および Zero Trust Architecture の定義&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では Zero Trust および Zero Trust Architecture は以下のように定義づけられている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;&lt;i&gt;Zero trust&lt;/i&gt; (ZT) provides a collection of concepts and ideas designed to minimize uncertainty in enforcing accurate, least privilege per-request access decisions in information systems and services in the face of a network viewed as compromised. &lt;i&gt;Zero trust architecture&lt;/i&gt; (ZTA) is an enterprise’s cybersecurity plan that utilizes zero trust concepts and encompasses component relationships, workflow planning, and access policies. Therefore, a zero trust enterpriseis the network infrastructure (physical and virtual) and operational policies that are in place for an enterprise as a product of a zero trust architecture plan&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;SP 800-207: Zero Trust Architecture&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ポイントは，アクセスを行うリソース，権限，期間が最小となるよう設計することだ。
これは，特定の安全地帯に入る許可さえあれば，内部のリソースにラフにアクセスできる従来の境界型セキュリティ設計とは大きく異なっている。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では，アクセスする対象を &lt;q lang=&#34;en&#34;&gt;resource&lt;/q&gt; と呼んでいる。
これは単なるデータだけではなく物理的なデバイスも対象となっていることを示す。
つまり (&lt;a href=&#34;https://www.gartner.com/jp/newsroom/press-releases/pr-20200910&#34; title=&#34;ガートナー、「日本における未来志向型インフラ・テクノロジのハイプ・サイクル：2020年」を発表&#34;&gt;日本では既に幻滅期に入っている&lt;/a&gt;) IoT も視野に入っているわけだ。&lt;/p&gt;
&lt;p&gt;さらに &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では，アクセスを行う主体を &lt;q lang=&#34;en&#34;&gt;subjects&lt;/q&gt; と呼んでいる。
そう呼ぶからには subjects が指すのは人間（ユーザ）だけではなく，アプリケーション，サービス，デバイス等も含まれる。
また subjects は &lt;q lang=&#34;en&#34;&gt;authorized and approved subjects&lt;/q&gt; と &lt;q lang=&#34;en&#34;&gt;all other subjects&lt;/q&gt; で色分けされている。
もちろん &lt;q lang=&#34;en&#34;&gt;all other subjects&lt;/q&gt; の代表は「攻撃者（attackers）」である。&lt;/p&gt;
&lt;p&gt;つまり，あるリソースに対して認証・承認されない actor は，システム上の役割に関わらず，&lt;strong&gt;全て敵&lt;/strong&gt;である（笑） この辺が「ゼロトラスト」と呼ばれる所以なのだろう。&lt;/p&gt;
&lt;p&gt;ZT/ZTA が重視される理由としては以下の2つが挙げられると思う。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;企業・組織への攻撃が巧妙化していて，セキュリティ管理の比重が防御から監視へシフトした&lt;/li&gt;
&lt;li&gt;クラウド上の XaaS リソースは「境界型」では管理できない&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;できれば安直にクラウドに繋がろうとするスマート家電もなんとかしてほしいのだが&amp;hellip;&lt;/p&gt;
&lt;h2&gt;Zero Trust Architecture の基本理念&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では ZTA の基本理念として，以下の7つの項目を挙げている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;All data sources and computing services are considered resources.&lt;/li&gt;
&lt;li&gt;All communication is secured regardless of network location.&lt;/li&gt;
&lt;li&gt;Access to individual enterprise resources is granted on a per-session basis.&lt;/li&gt;
&lt;li&gt;Access to resources is determined by dynamic policy—including the observable state of client identity, application/service, and the requesting asset—and may include other behavioral and environmental attributes.&lt;/li&gt;
&lt;li&gt;The enterprise monitors and measures the integrity and security posture of all owned and associated assets.&lt;/li&gt;
&lt;li&gt;All resource authentication and authorization are dynamic and strictly enforced before access is allowed.&lt;/li&gt;
&lt;li&gt;The enterprise collects as much information as possible about the current state of assets, network infrastructure and communications and uses it to improve its security posture.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;SP 800-207: Zero Trust Architecture&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;https://www.atmarkit.co.jp/ait/articles/2009/15/news007.html&#34; title=&#34;NISTによる「ゼロトラストにおける7つの基本原則」と従来の境界型防御との関係&#34;&gt;@IT の記事&lt;/a&gt;にこの7項目の抄訳が載ってたので以下に挙げておく（ちなみに私は @IT のアカウントを持ってないので記事自体は読んでない&lt;code&gt;w&lt;/code&gt;）。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;データソースとコンピュータサービスは、全てリソースと見なす&lt;/li&gt;
&lt;li&gt;「ネットワークの場所」に関係なく、通信は全て保護される&lt;/li&gt;
&lt;li&gt;組織のリソースへのアクセスは、全て個別のセッションごとに許可される&lt;/li&gt;
&lt;li&gt;リソースへのアクセスは動的なポリシーによって決定される&lt;/li&gt;
&lt;li&gt;組織が保有するデバイスは、全て正しくセキュリティが保たれているように継続的に監視する&lt;/li&gt;
&lt;li&gt;リソースの認証と認可は、全てアクセスが許可される前に動的かつ厳密に実施される&lt;/li&gt;
&lt;li&gt;資産・ネットワーク・通信の状態について可能な限り多くの情報を収集し、セキュリティを高めるために利用する&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.atmarkit.co.jp/ait/articles/2009/15/news007.html&#34;&gt;NISTによる「ゼロトラストにおける7つの基本原則」と従来の境界型防御との関係：働き方改革時代の「ゼロトラスト」セキュリティ（6） - ＠IT&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;面白いのは ZTA に最初から「監視」が組み込まれていること，常に状況をフィードバックして「改善」のサイクルを構築するところまでがセットになっていることだろう。&lt;/p&gt;
&lt;p&gt;セキュリティに於いても PDCA サイクル，いや今なら OODA ループか，が重要ということやね（笑）&lt;/p&gt;
&lt;h2&gt;大変なのは&amp;hellip;&lt;/h2&gt;
&lt;p&gt;ZT を組み込むこと自体は，そう難しくないだろう。
おそらくは既存のシステムに ZT の仕組みをラッピングすることで構成可能なはずだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;&lt;img src=&#34;./zero-trust-access.png&#34; srcset=&#34;./zero-trust-access.png 1183w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;SP 800-207: Zero Trust Architecture&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;SP 800-207: Zero Trust Architecture&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;大変なのは ZTA におけるリソースとサブジェクト（の権限）の定義・運用・評価だろう。
これ，かなり細かい要求分析が必要だと思うよ。&lt;/p&gt;
&lt;p&gt;当然ながら人間組織の役職で権限を決めるわけにはいかない。
システム管理者やセキュリティ管理者（セキュリティ企業も含めて）であっても「アクセスしてはいけないリソース」はある。
サブジェクトやリソースの杜撰な管理で &lt;a href=&#34;https://text.baldanders.info/remark/2020/07/class-breaks-from-twitter/&#34; title=&#34;Twitter から始まる Class Break&#34;&gt;Class Break を引き起こした Twitter&lt;/a&gt; の事例は耳に新しいだろう。
日本での最近の Class Break 事例は「ドコモロ系事案&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」か（笑）&lt;/p&gt;
&lt;p&gt;だからこそループを回して「改善」していかなければならないんだろうけど。
Refactoring することを前提としたシステム設計が大事。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;NTT出版 2013-12-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-28&#34;&gt;2015-11-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 信頼と裏切りの社会 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B07ND6QTN4?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51NHngUGOFL._SL160_.jpg&#34; width=&#34;103&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07ND6QTN4?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ＯＯＤＡ　ＬＯＯＰ（ウーダループ）―次世代の最強組織に進化する意思決定スキル&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;チェット リチャーズ (著), 原田 勉 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;東洋経済新報社 2019-02-22 (Release 2019-02-22)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B07ND6QTN4 (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;買ったはいいが，実はまだ読んでない。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-07-02&#34;&gt;2019-07-02&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- OODA LOOP --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/16/064653&#34; title=&#34;不正利用が発生した電子決済サービスについてまとめてみた - piyolog&#34;&gt;キャッシュレス決済を使った不正利用に関する一連のインシデント&lt;/a&gt;のこと。 Facebook の TL で見かけた「ドコモロ系事案」のフレーズが面白かったので使ってみた（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>経路の暗号化とデータの暗号化では要件が異なる</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/07/requirement-for-encryption/" />
		<id>tag:text.Baldanders.info,2020-07-08:/remark/2020/07/requirement-for-encryption/</id>
		<published>2020-07-08T05:40:40+00:00</published>
		<updated>2020-09-20T02:38:11+00:00</updated>
		<summary>データを安全に受け渡ししたいのならデータの暗号化を端折ってはいけない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;数学ガール・シリーズを読んでる途中だが，気になる記事を見つけたので。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/security-theater/&#34; title=&#34;劇場型セキュリティと PPAP&#34;&gt;以前の記事&lt;/a&gt;で紹介した&lt;a href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;情報処理 2020年7月号 | 情報処理学会 | 科学・テクノロジー | Kindleストア | Amazon&#34;&gt;「情報処理」2020年7月号&lt;/a&gt;内の PPAP 座談会で妙に Firefox Send を推してるなぁ，と思っていたが（笑），実は件のサービスが一時停止に追い込まれているらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1264007.html&#34;&gt;無償のファイル送信サービス“Firefox Send”が一時停止中 ～マルウェアによる悪用が増加 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんでも&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;“Firefox Send”が利用する“send.firefox.com”というドメインは比較的信頼されており、スパムメールフィルターをパスしてしまったり、警戒心の高いユーザーでさえも気を許してクリックしてしまう可能性がある&lt;/q&gt;。
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1264007.html&#34;&gt;無償のファイル送信サービス“Firefox Send”が一時停止中 ～マルウェアによる悪用が増加&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とのこと。&lt;/p&gt;
&lt;p&gt;私は今回の件で Firefox Send 側に瑕疵があるとは思わない。
でも詐欺（social engineering）の温床になるのであれば，最悪は閉鎖せざるを得ないだろう。
ニンともカンとも，お気の毒なことである。&lt;/p&gt;
&lt;h2&gt;暗号化の手段&lt;/h2&gt;
&lt;p&gt;あるデータを暗号化技術によってオンラインで安全に運ぶための手段としては，大きく2つある。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;経路の暗号化&lt;/li&gt;
&lt;li&gt;データの暗号化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例えば TLS (Transport Layer Security) は典型的な「経路の暗号化」である。
暗号化メッセージング・サービスも基本的には「経路の暗号化」によってメッセージの秘匿を達成している。&lt;/p&gt;
&lt;p&gt;Firefox Send は一見「データの暗号化」に見えるかもしれないが，実は「経路の暗号化」に分類できる。
何故なら Firefox Send はデータ送受信のエンド・ポイントには介入しないからだ。
ここに犯罪者の付け入る余地がある。&lt;/p&gt;
&lt;h2&gt;経路の暗号化の4要件&lt;/h2&gt;
&lt;p&gt;経路の暗号化の要件には以下の4つがある。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;機密性（Confidentiality）&lt;/li&gt;
&lt;li&gt;完全性（Integrity）&lt;/li&gt;
&lt;li&gt;認証（Authentication）&lt;/li&gt;
&lt;li&gt;否認可能（Deniability）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;経路の暗号化の場合，セッション中になりすましや改ざんがないことは勿論だが，セッション終了後のいかなる時点でも内容が再生されないこと，が要求される。
そのためには「否認可能」であることが必要なのだ。&lt;/p&gt;
&lt;p&gt;「否認可能」を達成する方法としては PFS (Perfect Forward Secrecy) を組み込む手がある。
また，暗号技術そのものではないが，セッション中のトラフィック・データやログなどを正しく破棄する運用が必要である。
まぁ，ログはそもそも取らないのが最善なのだが。&lt;/p&gt;
&lt;h2&gt;データの暗号化の4要件&lt;/h2&gt;
&lt;p&gt;一方，データの暗号化の要件は経路の暗号化の要件とは少し異なっている。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;機密性（Confidentiality）&lt;/li&gt;
&lt;li&gt;完全性（Integrity）&lt;/li&gt;
&lt;li&gt;認証（Authentication）&lt;/li&gt;
&lt;li&gt;否認防止（Non-repudiation）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;見ての通り，注目は4番目の「否認防止」である。&lt;/p&gt;
&lt;p&gt;「否認防止」とは，「データを送った」という事実を送信側が否定できないこと，を指す。
もっと簡単に郵便の比喩で言うなら「内容証明付き」のデータにするということである。&lt;/p&gt;
&lt;p&gt;これを達成するには永続的（証明（certification）された公開鍵がセッションやドメインを超えて有効であること）な鍵で電子署名すればよい。&lt;/p&gt;
&lt;h2&gt;データの暗号化を端折ってはいけない&lt;/h2&gt;
&lt;p&gt;注意すべきは「否認可能」と「否認防止」は要件としては真逆である点だ。&lt;/p&gt;
&lt;p&gt;もし Firefox Send で送るデータに最低でも（経路の暗号化とは異なる鍵で）電子署名を付与していれば多少はリスクを軽減できたかもしれない。
まぁ URL で釣る（phishing）のはオンライン詐欺の常套手段なので，そもそも URL を渡すアイデアが微妙なのかもしれないけど。&lt;/p&gt;
&lt;p&gt;公開鍵暗号方式を利用した暗号化を面倒臭がる人は多く&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，これを隠蔽または回避するために（経路の暗号化のみで）データの暗号化を端折るサービスやアプリケーションが多いが，データを（暗号化技術を使って）安全に受け渡ししたいのなら端折ってはいけない。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/18/2020-09-17-mozilla-shutters-firefox-send-and-notes/&#34;&gt;Mozillaがファイル転送サービスのFirefox SendとメモアプリのFirefox Notesの開発を断念  |  TechCrunch Japan&lt;/a&gt; : やはり閉鎖になったか&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51VvkVylsGL._SL160_.jpg&#34; width=&#34;120&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;情報処理 2020年7月号&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;情報処理学会 (著)&lt;/dd&gt;
    &lt;dd&gt; 2020-06-15 (Release 2020-06-15)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B089N3VX86 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;PPAP 特集（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-06-25&#34;&gt;2020-06-25&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 情報処理 2020年7月号 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;毎回パスワードを考えてデータをロックするより，最初に公開鍵を決めておいて使いまわしたほうが楽だし安全だと思うのだが&amp;hellip; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>劇場型セキュリティと PPAP</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/06/security-theater/" />
		<id>tag:text.Baldanders.info,2020-06-25:/remark/2020/06/security-theater/</id>
		<published>2020-06-25T09:05:01+00:00</published>
		<updated>2020-06-25T09:05:15+00:00</updated>
		<summary>つか，今だにこんなことやってる企業あるの？ ホンマに？</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;最近セキュリティ関連で PPAP なる謎の隠語を聞くのだが，どうも&lt;a href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;情報処理 2020年7月号 | 情報処理学会 | 科学・テクノロジー | Kindleストア | Amazon&#34;&gt;「情報処理」2020年7月号&lt;/a&gt;の特集記事が発端らしい？&lt;/p&gt;
&lt;p&gt;命名の元ネタはもちろんアレである（笑）&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/0E00Zuayv9Q&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0E00Zuayv9Q&#34;&gt;PPAP（Pen-Pineapple-Apple-Pen Official）ペンパイナッポーアッポーペン／PIKOTARO(ピコ太郎) - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;PPAP については特集記事を見ていただくとして，簡単にいうと，暗号化 zip ファイルとその復号パスワードを相手に電子メールで送りつける日本独特の商慣行（笑）を揶揄した言葉のようだ。&lt;/p&gt;
&lt;p&gt;つか，今だにこんなことやってる企業あるの？ ホンマに？&lt;/p&gt;
&lt;h2&gt;劇場型セキュリティ（Security Theater）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;情報処理 2020年7月号 | 情報処理学会 | 科学・テクノロジー | Kindleストア | Amazon&#34;&gt;「情報処理」2020年7月号&lt;/a&gt;でも説明されているが， security theater というのはゼロ年代初頭に起きた同時多発テロ（9.11）を受けて打ち出されたセキュリティ対策の間抜けさ加減を指した言葉で， Bruce Schneier さん著作の『&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;セキュリティはなぜやぶられたのか | ブルース・シュナイアー, 井口 耕二 |本 | 通販 | Amazon&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;』にも登場する。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;セキュリティは、ある程度、どう感じるかという問題だと第1章で説明した。そうであるなら、実体だけでなく守られているという感覚も得られる対策が望ましい。しかし実際には、実体がなくて感覚だけの対策もある。それでは単なる&lt;strong&gt;セキュリティ芝居&lt;/strong&gt;である。言い訳にすぎないのだ&lt;/q&gt;。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;最近でも COVID-2019 絡みで&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;As scientists and health care professionals in general agree, thermal imaging systems are an inappropriate and ineffective strategy for identifying individual cases of Covid-19 and preventing its spread. Beyond the wasted costs, installing thermal scanning as part of a “back to work” process might create a false sense of security that convinces some to prematurely return to their jobs and emboldens others to relax more effective strategies, such as social distancing and responsible contact tracing efforts&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://onezero.medium.com/the-public-is-being-misled-by-pandemic-technology-that-wont-keep-them-safe-1966ed740a87&#34;&gt;The Public Is Being Misled by Pandemic Technology That Won’t Keep Them Safe&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なんてな話もある。
PPAP とか典型的な security theater と言えるだろう。&lt;/p&gt;
&lt;h2&gt;暗号化 zip とか使うな！&lt;/h2&gt;
&lt;p&gt;そもそもの話として，暗号化 zip ファイルを解読するツールはそこらに普通に出回ってるけどね（笑）&lt;/p&gt;
&lt;p&gt;まともな暗号化圧縮が使いたいなら &lt;a href=&#34;https://www.gnupg.org/documentation/manuals/gnupg/gpgtar.html&#34; title=&#34;Using the GNU Privacy Guard: gpgtar&#34;&gt;gpgtar&lt;/a&gt; を使いましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/gpgtar/&#34;&gt;複数ファイルをまとめて署名・暗号化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows 環境に限定するなら「&lt;a href=&#34;https://hibara.org/software/attachecase/&#34; title=&#34;アタッシェケース#3 | HiBARA Software&#34;&gt;アタッシェケース&lt;/a&gt;」等を使う手もあり（パスワード配布の問題は残るけど）。&lt;/p&gt;
&lt;h2&gt;電子メールとか使うな！&lt;/h2&gt;
&lt;p&gt;電子メールはよく葉書に喩えられる。
例として，年賀状に厨二病的な文言を書いて相手に「それ」が渡るまで，どれだけ見られる可能性があるか想像したら軽く死ねるだろう。&lt;/p&gt;
&lt;p&gt;いわんや，国家権力をや，である。&lt;/p&gt;
&lt;p&gt;大昔，電子メールは重要なメッセージング基盤だった。
だから PGP をはじめとして安全でない電子メールの内容をいかに安全に相手に届けるか，を真剣に考える必要があった。
しかし今日においては，苦労して電子メールなんか使わなくても秘密を安全に配信する手段はあるのだ。&lt;/p&gt;
&lt;h2&gt;むしろ電子署名をちゃんとしようよ&lt;/h2&gt;
&lt;p&gt;私は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を日常的に使ってるが &lt;code&gt;git commit&lt;/code&gt; 時の電子署名が主な使い道である。
職業エンジニアだった頃も機密文書の共有は Box や Dropbox 等のクラウド・ストレージを使うのが当たり前だったし，そこで暗号化が必要なら &lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; 文書に &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; で署名・暗号化すればよかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/git-commit-with-openpgp-signature/&#34;&gt;Git Commit で OpenPGP 署名を行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/libreoffice-with-openpgp/&#34;&gt;LibreOffice と OpenPGP （仕切り直し）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大袈裟な基盤は必要なく &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; の peer-to-peer で緩やかな信用モデルの下に運用できていれば通常業務には十分である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/web-of-trust/&#34;&gt;OpenPGP の電子署名は「ユーザーの身元を保証し」ない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/06/04/2020-06-03-paperwork-automation-platform-anvil-raises-5-million-from-googles-gradient-ventures/&#34;&gt;PDFベースの共同編集・電子署名サービスのAnvilがグーグル系VCから5億円超を調達  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35155164/&#34;&gt;電子署名サービスを今夏提供へ&amp;ndash;ドロップボックスが2020年の事業戦略 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のようなニュースを見かけるようになり「リモートワークがメインになれば要るよなぁ」と思った一方で，よりにもよって「情報処理」みたいな雑誌が PPAP がどうのとか言ってるのを見るとガッカリしてしまう。
日本の企業はどこまで周回遅れなのか。&lt;/p&gt;
&lt;p&gt;もはや暗号化なんてどうとでもできるけど，ゼロトラスト云々な時代なら「そのデータは本当に『正しい』よね？」ってのがより重要なんじゃないのか。&lt;/p&gt;
&lt;p&gt;とっとと次に行こうぜ。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51VvkVylsGL._SL160_.jpg&#34; width=&#34;120&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B089N3VX86?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;情報処理 2020年7月号&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;情報処理学会 (著)&lt;/dd&gt;
    &lt;dd&gt; 2020-06-15 (Release 2020-06-15)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B089N3VX86 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;PPAP 特集（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-06-25&#34;&gt;2020-06-25&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 情報処理 2020年7月号 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
</content>
	</entry><entry>
		<title>「特別定額給付金」申請のナニがダメだったのか（その2）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/06/bottleneck2/" />
		<id>tag:text.Baldanders.info,2020-06-12:/remark/2020/06/bottleneck2/</id>
		<published>2020-06-12T03:14:23+00:00</published>
		<updated>2020-06-12T11:31:19+00:00</updated>
		<summary>個人番号カードを使わせるとか余計なことは考えず，最初からちゃっちゃと郵送したほうが最終的にスムーズにいったのではないかと邪推してしまう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;一応「&lt;a href=&#34;https://text.baldanders.info/remark/2020/05/bottleneck/&#34;&gt;「特別定額給付金」申請のナニがダメだったのか&lt;/a&gt;」の続きだが，今回は完全に愚痴なので読まなくてもいいです。&lt;/p&gt;
&lt;p&gt;いや，この記事を見て嘲笑わずにはいられなかったのよ。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;立憲民主党の蓮舫副代表が11日、参議院予算委員会で給付金のITシステムを巡る質問をした際に、「サーバーは増やすんじゃなくて、時代はもうクラウドなんですよ！」と断言した。しかし、クラウドもサーバーにあることに変わりはなく、他党の議員やネット民から「IT系弱すぎる」「知ったかぶり」などと失笑を買う事態になっている&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;http://agora-web.jp/archives/2046561.html&#34;&gt;「クラウド蓮舫」国会質問でIT弱者ぶりが露見して失笑買う – アゴラ&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;まず絵面が完全に「ヤンキー集会」。
国会議員の方々，ホンマご苦労さまです（笑）&lt;/p&gt;
&lt;p&gt;あと「立憲民主党の蓮舫副代表」による「時代はもうクラウド」という発言。
そこだけ切り取ったら10年前の記事だと言われても疑わないね，私は（笑）&lt;/p&gt;
&lt;p&gt;そして「クラウドもサーバーにあることに変わりはなく」という的はずれな感想（？）&lt;/p&gt;
&lt;p&gt;与野党議員とメディアによる「三馬鹿トリオ」爆誕である！&lt;/p&gt;
&lt;p&gt;ネット・サービスに於いて「可用性（availability）」がセキュリティ要件として重視されるのは，それが毀損されることによって「名目上の経済損失」が発生するからだ。
そして，いわゆる「クラウド（cloud）」の特徴である scalability を上手く使えば可用性リスクを抑制することが可能，というのがゼロ年代に持て囃された話だ。&lt;/p&gt;
&lt;p&gt;そういう意味では（オンプレミスから）クラウドへの移行は，今からでも悪い選択ではない。
いまや&lt;a href=&#34;https://www.sakura.ne.jp/function/contentboost/&#34; title=&#34;コンテンツブースト - レンタルサーバーはさくらインターネット&#34;&gt;レンサバですら CDN は当たり前&lt;/a&gt;だしね。&lt;/p&gt;
&lt;p&gt;&lt;ruby&gt;&lt;rb&gt;駄菓子菓子&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;だがしかし&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;。&lt;/p&gt;
&lt;p&gt;今回の「特別定額給付金」のオンライン申請に限れば可用性リスクはさして重要ではない。
理由は以下の3つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;営利ではなく行政サービスなので可用性毀損による「名目上の経済損失」は発生しない&lt;/li&gt;
&lt;li&gt;申請書の郵送が始まるまでの極短期サービス&lt;/li&gt;
&lt;li&gt;そもそも「個人番号カード」の所持率が低い（筈だった&lt;code&gt;w&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁ，金くれるんなら一刻も早くってのは当然の心理だけど。
それで緊急事態下の役所窓口が大混乱するとか，個人番号カード所持や口座情報登録の義務化とか，まさに「泥棒を捕らえてから縄を綯う」の典型例だよな（笑）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/05/bottleneck/&#34; title=&#34;「特別定額給付金」申請のナニがダメだったのか&#34;&gt;前回も書いた&lt;/a&gt;が，最大の障害（ボトルネック）は，サービスが落っこちたことではなく，申請後の受理作業が「人力」である点だろう。&lt;/p&gt;
&lt;p&gt;敢えて今回の件を総括するなら「サーバを増やす」でも「時代はクラウド」でも「個人番号カード所持や口座情報登録の義務化」でもなく「オンライン申請させないほうがよかった」だと思う。
個人番号カードを使わせるとか余計なことは考えず，最初からちゃっちゃと郵送したほうが最終的にスムーズにいったのではないかと邪推してしまう。&lt;/p&gt;
&lt;p&gt;もし個人番号やそれに紐づく住基データを使いたいのであれば，システム全体に渡って &lt;strong&gt;人力を介さず&lt;/strong&gt; 自動化するフレームワークを確立するところから始めるべきだろう。&lt;/p&gt;
&lt;p&gt;デジタル・データというのはそこにあるだけではダメで，データへのアクセス設計をセットにして初めて意味を持つ。
ダダ漏れが駄目なのは当たり前だが，闇雲に制限すればいいというものでもない。
個人情報保護法があろうとなかろうと，人力の力技なんか下の下である。
お金を使うところが間違っている。&lt;/p&gt;
&lt;p&gt;「公僕」とは言うけれど，お役人は奴隷じゃないのよ。
庶民もね。
今回のようなことを繰り返すのなら日本に「ブラック国家」の称号を与えよう（笑）&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B009LFBL4Y?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/412TwuSJT1L._SL160_.jpg&#34; width=&#34;114&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B009LFBL4Y?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;グーグル　ネット覇者の真実&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レヴィ (著), 仲達志；池村千秋 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;CCCメディアハウス 2011-12-16 (Release 2012-08-31)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B009LFBL4Y (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;そういえばこれ Kindle で買い直したのに途中まで読んでそのまま積ん読だったよ。ゼロ年代の Google を中心とした話なのでちょっと古びた感はあるが歴史書としては今でも通用するだろう。書評は&lt;a href=&#34;https://www.yamdas.org/booklog/intheplex.html&#34; title=&#34;yomoyomoの読書記録 - スティーブン・レヴィ『グーグル　ネット覇者の真実　追われる立場から追う立場へ』（阪急コミュニケーションズ）&#34;&gt;こちら&lt;/a&gt;が参考になる。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-11&#34;&gt;2018-12-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- グーグル　ネット覇者の真実 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00QAQEOSW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51wDPAx18RL._SL160_.jpg&#34; width=&#34;102&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00QAQEOSW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;だがしかし（１） (少年サンデーコミックス)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;コトヤマ (著)&lt;/dd&gt;
    &lt;dd&gt;小学館 2014-09-18 (Release 2014-12-08)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00QAQEOSW (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;永遠の夏休み（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-06-12&#34;&gt;2020-06-12&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- だがしかし --&gt;
</content>
	</entry><entry>
		<title>「特別定額給付金」申請のナニがダメだったのか</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/05/bottleneck/" />
		<id>tag:text.Baldanders.info,2020-05-21:/remark/2020/05/bottleneck/</id>
		<published>2020-05-21T01:49:31+00:00</published>
		<updated>2020-05-21T03:53:45+00:00</updated>
		<summary>日本というのは本当に本当におバカな国である。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;「ダメだったのか」って過去形にしちゃったけど別にいいよね，もう今更だし。&lt;/p&gt;
&lt;p&gt;いやね&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/05/20/183407&#34;&gt;特別定額給付金のオンライン申請で起きた問題についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を見て笑っちまったのよ。
特に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;この問題を受け、郵送方式での申請を一部の自治体では推奨しています&lt;/q&gt;。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/05/20/183407&#34;&gt;特別定額給付金のオンライン申請で起きた問題についてまとめてみた&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;の部分。
それってただの「先延ばし」なんだけど（笑）&lt;/p&gt;
&lt;p&gt;今回の「&lt;a href=&#34;https://kyufukin.soumu.go.jp/ja-JP/&#34; title=&#34;総務省｜特別定額給付金&#34;&gt;特別定額給付金&lt;/a&gt;」申請の最大の障害（ボトルネック）は申請受理の作業が「人力」である点だろう。
世帯単位での申請とはいえ人口の多い都会ほど世帯ごとの人数が少なくなるんだから，申請受理の「人力」作業でパンクしてしまうのは火を見るよりも明らか。
その上に個人番号カード発行や関連トラブルで&lt;a href=&#34;https://text.baldanders.info/remark/2020/05/my-number-card/&#34; title=&#34;引っ越ししたら個人番号カードを更新しましょう&#34;&gt;混乱に拍車がかかっている&lt;/a&gt;のだから，ニンともカンとも。&lt;/p&gt;
&lt;p&gt;オンライン申請で「おや？」と思った人も多いと思うが，申請時に提出する「添付書類&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」って「目視」による確認らしいんだよね（そう明記されていた）。
しかも「&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/05/20/183407&#34; title=&#34;特別定額給付金のオンライン申請で起きた問題についてまとめてみた - piyolog&#34;&gt;特別定額給付金のオンライン申請で起きた問題についてまとめてみた&lt;/a&gt;」によると，そもそも申請データと住基データを「人力」で照合するなどという無駄な作業をしているらしい。
ホンマ，馬鹿だよねぇ。&lt;/p&gt;
&lt;p&gt;これも住基ネットの呪いだよなぁ。
いや，むしろ個人情報保護法の呪いか（笑）&lt;/p&gt;
&lt;p&gt;前にもどっかで書いたような気がするが，システムのセキュリティを考える際のポイントは「識別」と「認証」と「許可」の3つであり，これらをいかに上手く分離し組み合わせるかにかかっている。&lt;/p&gt;
&lt;p&gt;かつての住基ネットや現在の個人番号システムの何が下手糞かって，この識別・認証・許可の混同によりサービス・ドメイン毎の適切な運用が阻害されていることだ。
更にこの無能なシステムを「個人情報保護法」なる悪法で無理やり規制しようとする&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; から「&lt;a href=&#34;https://kyufukin.soumu.go.jp/ja-JP/&#34; title=&#34;総務省｜特別定額給付金&#34;&gt;特別定額給付金&lt;/a&gt;」のような子供の思い付きみたいな政策ですら実装困難になってしまうのだ。&lt;/p&gt;
&lt;p&gt;けど，まぁ，&lt;a href=&#34;https://text.baldanders.info/remark/2020/05/my-number-card/&#34; title=&#34;引っ越ししたら個人番号カードを更新しましょう&#34;&gt;前回も書いた&lt;/a&gt;けど，お祭り騒ぎが終われば忘れきって次回以降もまた同じことを繰り返すのだろう。&lt;/p&gt;
&lt;p&gt;日本というのは本当に本当におバカな国である。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hyuki.com/techinfo/uniqid.html&#34;&gt;固有IDのシンプル・シナリオ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;添付書類は「振込先講座の確認書類（写し）申請者名義の通帳やキャッシュカード、インターネットバンキングの画面等の写し又は画像（口座番号、カナ氏名等が分かるもの）」とのこと。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;お忘れの方も多いかもしれないが，個人情報保護法はもともと「住基ネットを規制する」ために（住基法とセットで）考えられたものだ。これに様々な政治的思惑が重なったキメラみたいな法律が現在の個人情報保護法である。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>リスクは事前と事後をセットで考える</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/02/risk-of-infection/" />
		<id>tag:text.Baldanders.info,2020-02-15:/remark/2020/02/risk-of-infection/</id>
		<published>2020-02-15T11:15:03+00:00</published>
		<updated>2020-04-01T22:55:17+00:00</updated>
		<summary>感染者と死人を数え上げて脅威を煽るだけのメディア報道は無視して，ハザードからリスクへ頭を切り換えよう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今日は通院日。&lt;/p&gt;
&lt;p&gt;数年かけて体重を70kg未満まで落としたが，かかりつけ医は65kgまで落とせという。
しかも「筋肉は落とさないように」と釘を刺された（笑） 身体を動かすのって苦手なんだよなぁ。&lt;/p&gt;
&lt;p&gt;かかりつけ医に「新型コロナウイルスが流行ってるみたいですが，疑わしい症状が出たらどうすればいいですか？」と訊いてみた。
すると「まずは保健所へ連絡」とのこと。
そういや SARS (Severe Acute Respiratory Syndrome) のときもそうだったな。
基本は同じということだろう。&lt;/p&gt;
&lt;p&gt;私のかかりつけのクリニックは循環器科なので風邪やインフルエンザに対して重症化リスクの高い人が集まりやすい（当然ながら年寄りが多い，土地柄もあるけど&lt;code&gt;w&lt;/code&gt;）。
私もその高リスク群に入るんだけど（笑） そんなところに，新型コロナウイルスに感染したかもしれない，などとノコノコ行けるわけがない。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.who.int/emergencies/diseases/novel-coronavirus-2019/situation-reports&#34;&gt;WHO の situation report&lt;/a&gt; を見ると中国国内の感染者数に対して（日本を含め）国外の感染者数が桁違いに少ないのが分かる。
これは各国の防疫対策がきちんと機能していると評価すべきだ。
そこに政治宣伝を挟み込む余地はない。&lt;/p&gt;
&lt;p&gt;でも，たとえば日本でも数ヶ月単位で渡航歴のない人から感染者が出た時点でハザードのみで対処するフェーズは終わっているのだ。
感染者と死人を数え上げて脅威を煽るだけのメディア報道は無視して，ハザードからリスクへ頭を切り換えよう。
そしてリスク管理は事前と事後をセットで考えないと意味がない。&lt;/p&gt;
&lt;p&gt;事前の予防は（&lt;ruby&gt;&lt;rb&gt;正しく情報を伝えた&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;リスク・コミュニケーション&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;上で）最終的には個人の行動に委ねるしかないが，事後の対応は政府・自治体の仕事である。&lt;/p&gt;
&lt;p&gt;今だに対策に「早めの受診」とか言ってるところがあるようだが，声を大にして「&lt;a href=&#34;https://text.baldanders.info/remark/2018/02/04-stories/#triage&#34; title=&#34;インフルエンザ過敏症とトリアージ&#34;&gt;馬鹿か！&lt;/a&gt;」と言いたい。
まぁ，かかりつけ医も「まずは保健所へ連絡」と言ってたし，政府・自治体・保健所・医療機関等の連携は完了してるんだよね？&lt;/p&gt;
&lt;p&gt;ところで，そろそろ「新型コロナウイルス」って言うの止めない？ それ言ったら SARS だって当時は新型のコロナウイルスだったんだよ。
だからといって 2019-nCoV とか COVID-19 とかってのは記号に過ぎないので日常会話には使えないだろうけど。&lt;/p&gt;
&lt;h2&gt;追記： 2020-02-19&lt;/h2&gt;
&lt;p&gt;Facebook の TL で教えていただいたが，&lt;a href=&#34;https://talk.ictvonline.org/&#34;&gt;国際ウイルス分類委員会&lt;/a&gt;（International Committee on Taxonomy of Viruses; ICTV）が今回流行のウイルスに SARS-CoV-2 (Severe Acute Respiratory Syndrome Coronavirus 2) と命名したそうな。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://doi.org/10.1101/2020.02.07.937862&#34;&gt;Severe acute respiratory syndrome-related coronavirus: The species and its viruses – a statement of the Coronavirus Study Group | bioRxiv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前の SARS より明らかに致命率が低い状況&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; で「重症急性呼吸器症候群」はないわ，と思うのだが，分類的には前回の SARS と 今回の SARS 2 は同系統らしい。
ふむむー。&lt;/p&gt;
&lt;p&gt;要らん誤解が広まらなければいいが。
そうでなくてもデマやら陰謀論やら流布されているらしいし。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/02/06/064457&#34;&gt;新型コロナウイルスに関連したサイバー犯罪、誤情報などをまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;デマやら陰謀論やらとセットで「流行」しているという点でも SARS と同系統と言えるのかもね（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mhlw.go.jp/stf/seisakunitsuite/bunya/kenkou_iryou/covid19-kikokusyasessyokusya.html&#34;&gt;新型コロナウイルスに関する帰国者・接触者相談センター｜厚生労働省&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.who.int/emergencies/diseases/novel-coronavirus-2019&#34;&gt;Coronavirus disease 2019&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.niid.go.jp/niid/ja/diseases/ka/corona-virus/2019-ncov/9324-2019-ncov.html&#34;&gt;新型コロナウイルス（2019-nCoV）関連情報について&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.niid.go.jp/niid/ja/diseases/ka/corona-virus/2019-ncov.html&#34;&gt;新型コロナウイルス（2019-nCoV）関連情報ページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;前回の SARS の致命率は9.6%程と言われている。今回の SARS 2 は中国の発表を鵜呑みにするなら2.6%， WHO の推定で最終的に3%程と言われているようだ。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>CVSS v3.1</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/01/cvss-v3_1/" />
		<id>tag:text.Baldanders.info,2020-01-26:/remark/2020/01/cvss-v3_1/</id>
		<published>2020-01-26T08:20:03+00:00</published>
		<updated>2020-05-24T01:30:52+00:00</updated>
		<summary>調べてみたら 3.1 って2019年6月にリリースされてたんだねぇ。 半年以上前の話だよ。 感度低いなぁ orz</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/01/pre-announcement-of-go-1_13_7/&#34; title=&#34;Go 1.13.7 リリース予告と CVE-2020-0601&#34;&gt;前回の記事&lt;/a&gt;を書いてて気がついたのだが CVSSv3 のバージョンが 3.1 に上がってるぢゃん。&lt;/p&gt;
&lt;p&gt;たとえば &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-0601&#34;&gt;CVE-2020-0601&lt;/a&gt; の CVSS ベクタは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の2つが用意されている。&lt;/p&gt;
&lt;p&gt;調べてみたら 3.1 って2019年6月にリリースされてたんだねぇ。
半年以上前の話だよ。
感度低いなぁ，私 &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.0 と 3.1 の仕様は以下のリンクから見れる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.first.org/cvss/v3.0/specification-document&#34;&gt;CVSS v3.0 Specification Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.first.org/cvss/v3.1/specification-document&#34;&gt;CVSS v3.1 Specification Document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;差分情報がないのでひっじょーに分かりにくいのだが&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，各評価基準の項目と値に変更はなく，スコア算出式のみ変更になっているようだ。
しかも変更されているのは環境評価基準（Environmental Metrics）だけのようなので，私達がよく見る基本評価基準（Base Metrics）は変更なしと見てよさそうだ。&lt;/p&gt;
&lt;p&gt;なので上述の CVSS ベクタのスコアはいずれも 8.1 で深刻度（Severity Rating）も「重要（High）」となる。&lt;/p&gt;
&lt;p&gt;実は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で CVSS のパッケージを作って公開しているのだが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/go-cvss&#34;&gt;spiegel-im-spiegel/go-cvss: Common Vulnerability Scoring System (CVSS) Version 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本評価基準しか実装してないんで大っぴらにしていない。
仕事で使いそうなら続きを作り込もうかと思っていたのだが，職業エンジニア自体が無期休業中だからねぇ（笑）&lt;/p&gt;
&lt;p&gt;なお &lt;a href=&#34;https://github.com/spiegel-im-spiegel/go-cvss&#34; title=&#34;spiegel-im-spiegel/go-cvss: Common Vulnerability Scoring System (CVSS) Version 3&#34;&gt;spiegel-im-spiegel/go-cvss&lt;/a&gt; については，一応 v3.1 のベクタも受け入れるようにした。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/vuln/CVSS.html&#34;&gt;共通脆弱性評価システムCVSS概説：IPA 独立行政法人 情報処理推進機構&lt;/a&gt; : v3.1 に対応しているようだ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/vuln/CVSSv3.html&#34;&gt;共通脆弱性評価システムCVSS v3概説：IPA 独立行政法人 情報処理推進機構&lt;/a&gt; : v3.1 に対応していないように見えるのだが&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.atmarkit.co.jp/ait/articles/2005/19/news002.html&#34;&gt;CVSS（共通脆弱性評価システム）3.0から3.1への変更点：OpenSCAPで脆弱性対策はどう変わる？（7） - ＠IT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2015/cvss-v3-metrics-in-jvn/&#34;&gt;JVN が CVSSv3 による脆弱性評価を開始&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- eof --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;少なくとも技術文書をワープロで書くのは止めてほしいのだが。最終出力は PDF でも構わないが（PDF で出力するなら PDF/A で）， Markdown でも AsciiDoc でも Org-mode でもいいから，入力はプレイン・テキストで管理して欲しい。したら簡単に差分が取れるでしょ。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Go モジュールのミラーリング・サービス【正式版】</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/mirror-index-and-checksum-database-for-go-module/" />
		<id>tag:text.Baldanders.info,2019-09-01:/golang/mirror-index-and-checksum-database-for-go-module/</id>
		<published>2019-09-01T10:39:57+00:00</published>
		<updated>2020-01-05T11:59:50+00:00</updated>
		<summary>Google による Go モジュールの公式ミラーリング・サービスが正式リリースした。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;（この記事は「&lt;a href=&#34;https://text.baldanders.info/release/2019/05/mirror-index-and-checksum-database-for-go-module/&#34;&gt;Go モジュールのミラーリングとインデックス化&lt;/a&gt;」を全面改訂したものです）&lt;/p&gt;
&lt;p&gt;Google による &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; モジュールの公式ミラーリング・サービスが正式リリースした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/module-mirror-launch&#34;&gt;Module Mirror and Checksum Database Launched - The Go Blog&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://proxy.golang.org/&#34;&gt;&lt;code&gt;proxy.golang.org&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sum.golang.org/&#34;&gt;&lt;code&gt;sum.golang.org&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://index.golang.org/&#34;&gt;&lt;code&gt;index.golang.org&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;モジュール・ミラー&lt;/h2&gt;
&lt;p&gt;ミラー・サーバ &lt;a href=&#34;https://proxy.golang.org/&#34;&gt;&lt;code&gt;proxy.golang.org&lt;/code&gt;&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のモジュールをミラーリングする一種のプロキシ・サーバとして機能する。
ただし，単純な透過プロキシではなく必要なバージョンのみ取ってこれるようになっているようだ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://blog.golang.org/module-mirror-launch&#34;&gt;&lt;img src=&#34;https://blog.golang.org/module-mirror-launch/proxy-protocol.png&#34; srcset=&#34;https://blog.golang.org/module-mirror-launch/proxy-protocol.png 2106w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Module Mirror and Checksum Database Launched&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://blog.golang.org/module-mirror-launch&#34;&gt;Module Mirror and Checksum Database Launched&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ミラー・サーバは環境変数 &lt;code&gt;GOPROXY&lt;/code&gt; で URL を指定する。
&lt;code&gt;GOPROXY&lt;/code&gt; の既定値は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.13 では以下のようになっている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env | grep GOPROXY
GOPROXY=&amp;#34;https://proxy.golang.org,direct&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ミラー・サーバは複数指定できる（指定する場合はカンマで区切る）。
ミラーリングを無効にする場合は &lt;code&gt;GOPROXY&lt;/code&gt; に &lt;code&gt;direct&lt;/code&gt; のみを指定する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;go env -w GOPROXY=direct
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ミラーリングが有効な状態で特定の非公開モジュールを使う場合は &lt;code&gt;GOPRIVATE&lt;/code&gt; に非公開モジュールのパスを指定する。&lt;/p&gt;
&lt;h2&gt;チェックサム・データベース&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では利用するモジュールの完全性（integrity）を担保するために &lt;code&gt;go.sum&lt;/code&gt; ファイルにモジュールの SHA-256 チェックサム値を格納しているが，最初にモジュールをフェッチする場合はチェックサム値が分からないため無条件に信頼せざるを得ない。&lt;/p&gt;
&lt;p&gt;公開されているモジュールのチェックサム値がデータベース化されていれば未知のモジュールに対しても（チェックサム・データベースを参照することで）ある程度の信頼性を確保できるだろう。&lt;/p&gt;
&lt;p&gt;チェックサム・データベースは環境変数 &lt;code&gt;GOSUMDB&lt;/code&gt; で指定する。
&lt;code&gt;GOSUMDB&lt;/code&gt; の既定値は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.13 では以下のようになっている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env | grep GOSUMDB
GOSUMDB=&amp;#34;sum.golang.org&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;チェックサム・データベースを無効にする場合は &lt;code&gt;GOSUMDB&lt;/code&gt; に &lt;code&gt;off&lt;/code&gt; をセットする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;go env -w GOSUMDB=off
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また特定のモジュールを検索対象から除外する場合は，ミラーリング除外のときと同じく &lt;code&gt;GOPRIVATE&lt;/code&gt; が使える。&lt;/p&gt;
&lt;p&gt;公式チェックサム・データベース &lt;a href=&#34;https://sum.golang.org/&#34;&gt;&lt;code&gt;sum.golang.org&lt;/code&gt;&lt;/a&gt; は &lt;a href=&#34;https://github.com/google/trillian&#34; title=&#34;google/trillian: A transparent, highly scalable and cryptographically verifiable data store.&#34;&gt;Trillian&lt;/a&gt; による&lt;a href=&#34;https://research.swtch.com/tlog&#34; title=&#34;research!rsc: Transparent Logs for Skeptical Clients&#34;&gt;透過ログ&lt;/a&gt;（追記型データベース）で改竄に強いという特徴がある。&lt;/p&gt;
&lt;p&gt;まぁ，最初から悪意のあるモジュールは排除しようがないが malicious code 混入は検知しやすくなるかも知れない。&lt;/p&gt;
&lt;h3&gt;【2019-09-06 追記】 バージョンタグの管理に注意&lt;/h3&gt;
&lt;p&gt;上で述べたように標準の &lt;a href=&#34;https://sum.golang.org/&#34;&gt;&lt;code&gt;sum.golang.org&lt;/code&gt;&lt;/a&gt; は追記型のデータベースで，既存データの変更はできない仕様になっている。&lt;/p&gt;
&lt;p&gt;たとえばパッケージ/モジュールのリポジトリにバージョンタグ（&lt;code&gt;v0.1.0&lt;/code&gt; など）を付ける際に，うっかり間違ったコミットにタグを付けたとしても，一度 &lt;a href=&#34;https://sum.golang.org/&#34;&gt;&lt;code&gt;sum.golang.org&lt;/code&gt;&lt;/a&gt; に登録されると取り消すことができない。
手動でタグの位置を変えても，モジュール読み込み時に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;SECURITY ERROR
This download does NOT match the one reported by the checksum server.
The bits may have been replaced on the origin server, or an attacker may
have intercepted the download attempt.

For more information, see &amp;#39;go help module-auth&amp;#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などと表示されビルドに失敗する。&lt;/p&gt;
&lt;p&gt;少なくとも公開されているパッケージ/モジュールでは迂闊にバージョンタグを付け換えないよう，管理は慎重に行う必要がある。&lt;/p&gt;
&lt;h2&gt;ミラーリング・サービスのプライバシー・ポリシー&lt;/h2&gt;
&lt;p&gt;今回，正式稼働したミラーリング・サービスのプライバシー・ポリシーは以下のページある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://proxy.golang.org/privacy&#34;&gt;Privacy: Go modules services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以前はいきなり Google のページに飛ばされて「なんだかなぁ」という感じだったが，多少マシになったようである（笑）&lt;/p&gt;
&lt;p&gt;これによると公式サービスでは以下の情報を収集しているようだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;Request timestamp&lt;/li&gt;
&lt;li&gt;Client IP address&lt;/li&gt;
&lt;li&gt;Full request URL, including:
&lt;ul&gt;
&lt;li&gt;service domain, e.g. proxy.golang.org&lt;/li&gt;
&lt;li&gt;URI path being requested&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Response latency&lt;/li&gt;
&lt;li&gt;Response bytes sent&lt;/li&gt;
&lt;li&gt;Response code sent&lt;/li&gt;
&lt;li&gt;The response returned by the go command when it runs in our systems&lt;/li&gt;
&lt;li&gt;Whether the request hit our frontend cache&lt;/li&gt;
&lt;li&gt;Whether the request hit a cache elsewhere in the system (but not the frontend)&lt;/li&gt;
&lt;li&gt;Name of the Google machine that processed this request, e.g. machine101&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://proxy.golang.org/privacy&#34;&gt;Privacy: Go modules services&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;取得した情報については&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;We do not store logged personally identifiable information such as IP addresses for more than 30 days. We also do not correlate or combine information from our request logs with any personal information that you have provided Google for other services.&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://proxy.golang.org/privacy&#34;&gt;Privacy: Go modules services&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ということらしいが，最後の&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;We intend to aggregate and anonymize usage metrics to measure popularity for Go modules and share this popularity data with the Go community.&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://proxy.golang.org/privacy&#34;&gt;Privacy: Go modules services&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;てのがねぇ。
&lt;a href=&#34;https://text.baldanders.info/remark/2018/04/handling-privacy/&#34; title=&#34;誰がプライバシーを支配するのか&#34;&gt;プライバシーに敵対的な企業&lt;/a&gt;のサービスだと思うとあまり利用したくない気分なのだが（もちろん偏見），はてさて&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2019/06/next-steps-toward-go-2/&#34;&gt;Go 1.13 と 1.14 （Go 2 へ向けて）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/go-env/&#34;&gt;Go 言語の環境変数管理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;にしろ（最近ブームが再燃している） Dart 言語にしろ，言語系のプロダクトやサービスは Google から切り離してほしいよなぁ。 Alphabet の傘下から外れろとまでは言わないから。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Ubuntu に KeePassXC を導入する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/08/installing-keepassxc-in-ubuntu/" />
		<id>tag:text.Baldanders.info,2019-08-25:/remark/2019/08/installing-keepassxc-in-ubuntu/</id>
		<published>2019-08-25T03:05:20+00:00</published>
		<updated>2020-05-28T07:43:38+00:00</updated>
		<summary>Snap 版は日本語入力ができないため PPA リポジトリを使って最新版をインストールする。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;以前に &lt;a href=&#34;https://text.baldanders.info/remark/2019/04/mono-in-ubuntu/&#34; title=&#34;Ubuntu に Mono を導入する&#34;&gt;Mono 版の KeePass を導入&lt;/a&gt;する手順を紹介したが Linux 用であればサードパーティの &lt;a href=&#34;https://keepassxc.org/&#34; title=&#34;KeePassXC Password Manager&#34;&gt;KeePassXC&lt;/a&gt; がよさげである。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://keepassxc.org/&#34; title=&#34;KeePassXC Password Manager&#34;&gt;KeePassXC&lt;/a&gt; は &lt;a href=&#34;https://keepass.info/&#34; title=&#34;KeePass Password Safe&#34;&gt;KeePass&lt;/a&gt; のサードパーティ版である KeePassX の fork でマルチプラットフォームに対応している。
Windows や macOS の他，各種 Linux ディストリビューションにも対応しているようだ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2020-05-28 修正】&lt;/strong&gt;
&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; では APT または &lt;a href=&#34;https://github.com/snapcore/snapd&#34; title=&#34;snapcore/snapd: The snapd and snap tools enable systems to work with .snap files.&#34;&gt;Snap&lt;/a&gt; から導入できるのだが， &lt;a href=&#34;https://github.com/snapcore/snapd&#34; title=&#34;snapcore/snapd: The snapd and snap tools enable systems to work with .snap files.&#34;&gt;Snap&lt;/a&gt; 版は日本語入力ができない（日本語の文字列のコピペは可能）という致命的な欠点があるため &lt;a href=&#34;https://launchpad.net/ubuntu/+ppas&#34; title=&#34;Personal Package Archives : Ubuntu&#34;&gt;PPA&lt;/a&gt; リポジトリを使って最新版をインストールする。&lt;/p&gt;
&lt;p&gt;まずは &lt;a href=&#34;https://launchpad.net/ubuntu/+ppas&#34; title=&#34;Personal Package Archives : Ubuntu&#34;&gt;PPA&lt;/a&gt; リポジトリの登録から。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo add-apt-repository ppa:phoerious/keepassxc
$ sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;a href=&#34;https://keepassxc.org/&#34; title=&#34;KeePassXC Password Manager&#34;&gt;KeePassXC&lt;/a&gt; がインストール可能になった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apt show keepassxc
Package: keepassxc
Version: 2.5.4-1ppa1~focal1
Priority: optional
Section: utils
Maintainer: KeePassXC Team &amp;lt;team@keepassxc.org&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あとは普通に &lt;code&gt;apt install&lt;/code&gt; すればよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install keepassxc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; のメニューから &lt;a href=&#34;https://keepassxc.org/&#34; title=&#34;KeePassXC Password Manager&#34;&gt;KeePassXC&lt;/a&gt; を起動できる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./keepassxc.png&#34;&gt;&lt;img src=&#34;./keepassxc.png&#34; srcset=&#34;./keepassxc.png 800w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;おおっ，日本語だ（笑）&lt;/p&gt;
&lt;p&gt;使い方は本家の &lt;a href=&#34;https://keepass.info/&#34; title=&#34;KeePass Password Safe&#34;&gt;KeePass&lt;/a&gt; とだいたい同じようだ。
ブラウザ連携は今のところ怖くて使う気にならない。
まぁ，そのうち気が向いたらね。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/keepassxreboot/keepassxc&#34;&gt;GitHub - keepassxreboot/keepassxc: KeePassXC is a cross-platform community-driven port of the Windows application “Keepass Password Safe”.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2019/08/ubuntu-1904-146-snap-store5.html&#34;&gt;Ubuntu 19.04 その146 - Snap Storeからインストール可能なセキュリティーアプリ5選 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.mynavi.jp/article/20190825-883052/&#34;&gt;Snapから使いやすいセキュリティソフトウェア5選 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
</feed>
