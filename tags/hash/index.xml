<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of Hash - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/hash/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/hash/index.xml" />
	<id>tag:text.Baldanders.info,2021-08-23:/tags</id>
	<updated>2021-08-23T23:07:22+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>GNKF: NKF ぽいなにか の v0.6.0 をリリースした</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2021/08/gnkf-v0_6_0-is-released/" />
		<id>tag:text.Baldanders.info,2021-08-23:/release/2021/08/gnkf-v0_6_0-is-released/</id>
		<published>2021-08-23T14:07:22+00:00</published>
		<updated>2024-05-10T22:02:32+00:00</updated>
		<summary>指定した文字列を BCrypt アルゴリズムで符号化する機能を追加した。悪用しないように（笑）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go 言語&lt;/a&gt;における文字列処理の習作 &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34; title=&#34;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; の v0.6.0 をリリースした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf/releases/tag/v0.6.0&#34;&gt;Release v0.6.0 · spiegel-im-spiegel/gnkf · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このバージョンで指定した文字列を BCrypt アルゴリズムで符号化する機能を追加した。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gnkf bcrypt -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hash and compare by BCrypt.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Usage:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  gnkf bcrypt [flags] string [string...]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Aliases:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  bcrypt, bc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Flags:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      --compare string   compare to BCrypt hashed string
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -c, --cost int         BCrypt cost (4-31) (default 10)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -h, --help             help for bcrypt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Global Flags:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      --debug   for debug
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな感じで使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gnkf bc password
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$2a$10$ES0KxMf9p.t0FEMp8WB6we8X43rMzfXb9r5WvFeUSk8Q2z3wdjrCS
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;符号化した文字列を検証することもできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gnkf bc --compare &amp;#39;$2a$10$ES0KxMf9p.t0FEMp8WB6we8X43rMzfXb9r5WvFeUSk8Q2z3wdjrCS&amp;#39; foo bar password
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;compare BCrypt hashed string &amp;#39;$2a$10$ES0KxMf9p.t0FEMp8WB6we8X43rMzfXb9r5WvFeUSk8Q2z3wdjrCS&amp;#39; to...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;foo : crypto/bcrypt: hashedPassword is not the hash of the given password
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bar : crypto/bcrypt: hashedPassword is not the hash of the given password
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;password : match!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;いやね。
最初は Java のパスワード処理を検証するミニツールを作ってたんだけど，符号化するところだけチェックすればいいのなら &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34; title=&#34;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; に組み込んじゃえばいいぢゃん，と思いついて「えいやっ」で組み込んでしまった。
反省はしない。&lt;/p&gt;
&lt;p&gt;悪用しないように（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/gnkf/&#34;&gt;GNKF: Network Kanji Filter by Golang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>GNKF: NKF ぽいなにか の v0.5.0 をリリースした</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2021/05/gnkf-v0_5_0-is-released/" />
		<id>tag:text.Baldanders.info,2021-05-23:/release/2021/05/gnkf-v0_5_0-is-released/</id>
		<published>2021-05-23T05:11:55+00:00</published>
		<updated>2024-05-10T22:02:32+00:00</updated>
		<summary>データのハッシュ値を取得・検証する機能を追加した。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go 言語&lt;/a&gt;における文字列処理の習作 &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34; title=&#34;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; の v0.5.0 をリリースした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf/releases/tag/v0.5.0&#34;&gt;Release v0.5.0 · spiegel-im-spiegel/gnkf · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このバージョンでデータのハッシュ値を取得・検証する機能を追加した。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gnkf hash -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Print or check hash value.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Support algorithm:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  MD5, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Usage:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  gnkf hash [flags] [file]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Aliases:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  hash, h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Flags:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -a, --algorithm string   hash algorithm (default &amp;#34;SHA-256&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -c, --check              don&amp;#39;t fail or report status for missing files
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -h, --help               help for hash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      --ignore-missing     don&amp;#39;t fail or report status for missing files (with check option)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      --quiet              don&amp;#39;t print OK for each successfully verified file (with check option)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Global Flags:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      --debug   for debug
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;MD5, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, および SHA-512/256 各アルゴリズムに対応している&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
既定のアルゴリズムは SHA-256 で，それ以外を使う場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ echo Hello World | gnkf h -a md5
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;e59ff97941044f85df5297e1c302d260  -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとアルゴリズム名を指定する。&lt;/p&gt;
&lt;p&gt;また，リリースファイルに対して &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf/releases/download/v0.5.0/gnkf_0.5.0_checksums.txt&#34;&gt;&lt;code&gt;gnkf_0.5.0_checksums.txt&lt;/code&gt;&lt;/a&gt; のようなハッシュ値の情報があれば， &lt;code&gt;-c&lt;/code&gt; オプションを使って&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl -L https://github.com/spiegel-im-spiegel/gnkf/releases/download/v0.5.0/gnkf_0.5.0_checksums.txt -O
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl -L https://github.com/spiegel-im-spiegel/gnkf/releases/download/v0.5.0/gnkf_0.5.0_Linux_64bit.tar.gz -O
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gnkf h --ignore-missing -c gnkf_0.5.0_checksums.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gnkf_0.5.0_Linux_64bit.tar.gz: OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;WARNING in 9 items: no such file or directory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;といった感じにダウンロードしたファイルの検証を行うことができる。&lt;/p&gt;
&lt;p&gt;まぁ Linux とかなら &lt;code&gt;sha256sum&lt;/code&gt; コマンド等を使えばいいのだけど， Windows 環境で互換性のあるコマンドが見当たらなかったので &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34; title=&#34;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; に組み込んでみたのだった。
以前に &lt;a href=&#34;https://text.baldanders.info/release/2020/10/gnkf-v0_2_0-is-released/&#34;&gt;BASE64 符号化のサブコマンド&lt;/a&gt;を組み込んだことがあったので，これもありかなと（笑）&lt;/p&gt;
&lt;p&gt;余談だが &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; で MD5 や SHA-1 アルゴリズムを使うと &lt;a href=&#34;https://github.com/securego/gosec&#34; title=&#34;securego/gosec: Golang security checker&#34;&gt;gosec&lt;/a&gt; に叱られる。
これを回避するには G501 および G505 のワーニングを除外すればよい。&lt;/p&gt;
&lt;p&gt;たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ golangci-lint run --enable gosec --exclude &amp;#34;G501|G505&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;みたいな感じ。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/gnkf/&#34;&gt;GNKF: Network Kanji Filter by Golang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;SHA-3 は標準パッケージにないので今回は見送った。ちなみに &lt;a href=&#34;https://pkg.go.dev/golang.org/x/crypto/sha3&#34; title=&#34;sha3 · pkg.go.dev&#34;&gt;&lt;code&gt;golang.org/x/crypto/sha3&lt;/code&gt;&lt;/a&gt; パッケージを使えば SHA-3 アルゴリズムも簡単に組み込める。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>OpenSSH 完全に理解した（笑）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/01/openssh-mystery/" />
		<id>tag:text.Baldanders.info,2021-01-11:/remark/2021/01/openssh-mystery/</id>
		<published>2021-01-11T07:31:17+00:00</published>
		<updated>2021-02-18T13:26:40+00:00</updated>
		<summary>どうやら OpenSSH に対する理解が足りないと気付いたので，知ってること気付いたこと等を書き出してみる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;使ってみたかったんだ，このフレーズ（笑）&lt;/p&gt;
&lt;p&gt;めでたくも&lt;a href=&#34;https://text.baldanders.info/remark/2020/12/github-discussions/&#34; title=&#34;ようやく Disqus を捨てれるよ&#34;&gt;フィードバック先移行&lt;/a&gt;後，はじめてのフィードバックを頂いた。
どうやら &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; に対する理解が足りないと気付いたので，知ってること気付いたこと等を書き出してみる。&lt;/p&gt;
&lt;p&gt;「ここ違うよ」とかいうのがありましたら&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/discussions&#34; title=&#34;Discussions · spiegel-im-spiegel/github-pages-env&#34;&gt;フィードバック&lt;/a&gt;にてご指摘いただけると有り難いです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; に関する本とかあればよかったんだけどねぇ。
日本語の本はみんな出版年がエラく古いし，しかも「使い方」は書いてあっても中で何してるかについてはあまり言及されてない感じ？ とっかに「Inside OpenSSH」みたいな本があればいいのに（笑）&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 暗号化通信の手順&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; におけるサーバ-クライアント間の暗号化通信の手順は大雑把に&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;サーバ-クライアント間で使える暗号スイートの確認&lt;/li&gt;
&lt;li&gt;鍵交換アルゴリズムによるシークレットの導出とセッション鍵の生成
&lt;ul&gt;
&lt;li&gt;ホスト鍵を使ったホスト認証（ユーザからホストを認証する）も併せて行う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;セッション鍵による暗号化通信の開始&lt;/li&gt;
&lt;li&gt;クライアント認証&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;となっているようだ。
以降でひとつづつ見ていこう。&lt;/p&gt;
&lt;h2&gt;鍵交換アルゴリズムとハッシュ・アルゴリズム&lt;/h2&gt;
&lt;p&gt;暗号化通信を行うためにはサーバ-クライアント間でセッション鍵（共通鍵）を共有する必要がある。
（昔はともかく）今の &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; ではセッション鍵の取得に Diffie-Hellman 鍵交換アルゴリズムまたはそのバリエーションを使う。
Diffie-Hellman 鍵交換アルゴリズムは公開鍵暗号の一種だがセッションの開始ごとに使い捨ての鍵ペアを生成する（筈）ので，ユーザがそれを意識することはないだろう。&lt;/p&gt;
&lt;p&gt;鍵交換アルゴリズムで得られる共有データを「シークレット」と呼ぶことがある。
&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; ではシークレットをハッシュ化した値をセッション鍵として使っているようだ。&lt;/p&gt;
&lt;p&gt;したがってセッション鍵の共有には鍵交換アルゴリズムとハッシュ・アルゴリズムの2つが必要となる。
&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; でサポートしてる暗号スイートは以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;鍵交換&lt;/th&gt;
&lt;th&gt;ハッシュ&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;推奨&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;curve25519-sha256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ECDH (curve25519)&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 7.4 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;diffie-hellman-group1-sha1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;DH (1024 bits)&lt;/td&gt;
&lt;td&gt;SHA1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;diffie-hellman-group14-sha1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;DH (2048 bits)&lt;/td&gt;
&lt;td&gt;SHA1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;diffie-hellman-group14-sha256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;DH (2048 bits)&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 7.3 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;diffie-hellman-group16-sha512&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;DH (4096 bits)&lt;/td&gt;
&lt;td&gt;SHA2-512&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 7.3 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;diffie-hellman-group18-sha512&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;DH (8192 bits)&lt;/td&gt;
&lt;td&gt;SHA2-512&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 7.3 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;diffie-hellman-group-exchange-sha1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Custom DH (?)&lt;/td&gt;
&lt;td&gt;SHA1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;diffie-hellman-group-exchange-sha256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Custom DH (?)&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 5.4 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ecdh-sha2-nistp256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ECDH (NIST curve P-256)&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 5.7 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ecdh-sha2-nistp384&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ECDH (NIST curve P-384)&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 5.7 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ecdh-sha2-nistp521&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ECDH (NIST curve P-521)&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 5.7 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;SHA-1 は危殆化が叫ばれて久しく，既に推奨されていない。
このブログでもあちこちで書いているが Zenn の以下の記事でまとめているので興味のある人はどうぞ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20201025-sayonara-sha1&#34;&gt;さようなら SHA-1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ECDH (Elliptic Curve Diffie–Hellman) は Diffie-Hellman 鍵交換アルゴリズムの楕円曲線版と考えてもらって構わない。&lt;/p&gt;
&lt;p&gt;ECDH で使用する楕円曲線のうち NIST 推奨パラメータ（curve P-256/384/521）は微妙に評判が悪いようで，推奨しないところがあった。
どうも NIST 発のアルゴリズムは使いたくないということのようだ。
まぁ NSA 絡みで度々やらかしてるから信用がないんだろうな（笑）&lt;/p&gt;
&lt;p&gt;これらの暗号スイートの選択と優先順位はサーバ側で設定するのでユーザが意識することはない。
強いて言うなら古いバージョンは使うなってことくらいか。&lt;/p&gt;
&lt;h3&gt;鍵交換とホスト認証【2021-02-18 追記】&lt;/h3&gt;
&lt;p&gt;フィードバックで&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/discussions/92&#34;&gt;教えていただいた&lt;/a&gt;が，最近の &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; では鍵交換のプロセスにホスト認証を混ぜて行っているようだ。
ホスト認証については以下の記事が参考になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/angel_p_57/items/30a12a0d45457b5f76d5&#34;&gt;SSHのハイブリッド暗号に関する良くある誤解の話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使い捨ての鍵ペアを使う ephemeral な DH や ECDH では「なりすまし」の問題があるため，ユーザとホストの間での相互認証がどうしても必要となる。
ホスト認証に使うホスト鍵はあらかじめサーバ側で用意するのだが，このホスト鍵（の公開鍵）の電子指紋をつかって鍵自体の証明を行うようだ。
このような信用モデルのことを &lt;a href=&#34;https://en.wikipedia.org/wiki/Trust_on_first_use&#34; title=&#34;Trust on first use - Wikipedia&#34;&gt;TOFU (Trust On First Use)&lt;/a&gt; と呼ぶ。
クライアント側は接続時にホスト鍵（の公開鍵）の電子指紋をチェックして以前と変わっていれば警告を出す。&lt;/p&gt;
&lt;p&gt;ホスト認証に使える電子署名アルゴリズムはクライアント認証で使う暗号スイートと同じようだ。
なので「&lt;a href=&#34;#ds&#34;&gt;電子署名アルゴリズムとハッシュ・アルゴリズム&lt;/a&gt; 」の節を参照してほしい。&lt;/p&gt;
&lt;h2&gt;共通鍵暗号アルゴリズムと暗号モード&lt;/h2&gt;
&lt;p&gt;実際の暗号化通信はセッション鍵を使った共通鍵暗号アルゴリズムで行う。
&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; でサポートしてる共通鍵暗号アルゴリズムと暗号モードは以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;共通鍵暗号&lt;/th&gt;
&lt;th&gt;暗号モード&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;推奨&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;3des-cbc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;TripleDES&lt;/td&gt;
&lt;td&gt;CBC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aes128-cbc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AES-128&lt;/td&gt;
&lt;td&gt;CBC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aes192-cbc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AES-192&lt;/td&gt;
&lt;td&gt;CBC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aes256-cbc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AES-256&lt;/td&gt;
&lt;td&gt;CBC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aes128-ctr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AES-128&lt;/td&gt;
&lt;td&gt;CTR&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aes192-ctr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AES-192&lt;/td&gt;
&lt;td&gt;CTR&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aes256-ctr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;AES-256&lt;/td&gt;
&lt;td&gt;CTR&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aes128-gcm&lt;/code&gt;@openssh.com&lt;/td&gt;
&lt;td&gt;AES-128&lt;/td&gt;
&lt;td&gt;GCM&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 6.2 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;aes256-gcm&lt;/code&gt;@openssh.com&lt;/td&gt;
&lt;td&gt;AES-256&lt;/td&gt;
&lt;td&gt;GCM&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 6.2 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arcfour&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ARCFOUR (40?)&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arcfour128&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ARCFOUR (128)&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arcfour256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ARCFOUR (256)&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;blowfish-cbc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blowfish (64)&lt;/td&gt;
&lt;td&gt;CBC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cast128-cbc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;CAST (128)&lt;/td&gt;
&lt;td&gt;CBC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;chacha20-poly1305&lt;/code&gt;@openssh.com&lt;/td&gt;
&lt;td&gt;ChaCha20&lt;/td&gt;
&lt;td&gt;Poly1305&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 6.5 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ARCFOUR ってのはいわゆる RC4 ストリーム暗号のこと。
RC4 は公式にはアルゴリズムを公開していないため “Alleged RC FOUR” の意味で ARCFOUR という名称が使われているようだ。&lt;/p&gt;
&lt;p&gt;RC4 および CBC モードは危殆化が報告されて久しく，推奨されない。
また TripleDES, Blowfish, CAST はセキュリティ強度不足のため，これも推奨されない。&lt;/p&gt;
&lt;p&gt;優先順位としては AEAD (Authenticated Encryption with Associated Data; 認証付き暗号) として機能する GCM や ChaCha20-Poly1305 がより推奨されているらしい。
なお，これらの暗号スイートの選択と優先順位はサーバ側で設定するのでユーザが意識することはない。&lt;/p&gt;
&lt;h2&gt;メッセージ認証符号&lt;/h2&gt;
&lt;p&gt;GCM や ChaCha20-Poly1305 以外の AEAD として機能しない暗号モードの場合は MAC (Message Authentication Code; メッセージ認証符号) を組み合わせる。
組み合わせ方としては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encrypt-then-MAC (&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 6.2 以降)&lt;/li&gt;
&lt;li&gt;MAC-then-encrypt&lt;/li&gt;
&lt;li&gt;Encrypt-and-MAC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のいずれかを選択できるらしい。
Encrypt-then-MAC であれば AEAD として機能する。
&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; でサポートしてる MAC アルゴリズムとハッシュ・アルゴリズムの組み合わせは以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;MAC&lt;/th&gt;
&lt;th&gt;ハッシュ&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;推奨&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hmac-md5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HMAC&lt;/td&gt;
&lt;td&gt;MD5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hmac-md5-96&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HMAC&lt;/td&gt;
&lt;td&gt;MD5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hmac-sha1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HMAC&lt;/td&gt;
&lt;td&gt;SHA1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hmac-sha1-96&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HMAC&lt;/td&gt;
&lt;td&gt;SHA1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hmac-sha2-256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HMAC&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 5.9 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hmac-sha2-512&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HMAC&lt;/td&gt;
&lt;td&gt;SHA2-512&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 5.9 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;umac-64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UMAC-64&lt;/td&gt;
&lt;td&gt;(Universal Hash)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 4.7 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;umac-128&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UMAC-128&lt;/td&gt;
&lt;td&gt;(Universal Hash)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 6.2 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;それぞれの名称の後ろに &lt;code&gt;-etm&lt;/code&gt;@openssh.com と付くと Encrypt-then-MAC で動作する。&lt;/p&gt;
&lt;p&gt;MD5 は危殆化が報告されて久しく，推奨されない。
SHA1 は HMAC に関しては2031年以降も “Acceptable” であるとされているが，他の暗号スイートとの組み合わせで考えると避けたほうがいいかもしれない。&lt;/p&gt;
&lt;p&gt;UMAC は &lt;a href=&#34;https://tools.ietf.org/html/rfc4418&#34; title=&#34;RFC 4418 - UMAC: Message Authentication Code using Universal Hashing&#34;&gt;RFC 4418&lt;/a&gt; で規定されている。
この中で&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Likewise, 32-, 96-, and 128-bit tags cannot be forged with more than 1/2^30, 1/2^90, and 1/2^120 probability plus the   probability of a successful attack against AES as a pseudorandom permutation&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4418&#34;&gt;UMAC: Message Authentication Code using Universal Hashing&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とあるので UMAC-64 や UMAC-128 はセキュリティ強度不足なんじゃないかと思うのだが，どうだろう。&lt;/p&gt;
&lt;p&gt;これらの暗号スイートの選択と優先順位はサーバ側で設定するのでユーザが意識することはない。&lt;/p&gt;
&lt;h2 id=&#34;ds&#34;&gt;電子署名アルゴリズムとハッシュ・アルゴリズム&lt;/h2&gt;
&lt;p&gt;クライアント認証で公開鍵暗号を用いる場合は，ユーザ側で認証鍵ペアを生成し，公開鍵をあらかじめサーバ側と共有する必要がある。
また公開鍵暗号を用いたクライアント認証ではハッシュ・アルゴリズムも用いる。
&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; でサポートしてるクライアント認証の暗号スイートは以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称（サーバ側）&lt;/th&gt;
&lt;th&gt;電子署名&lt;/th&gt;
&lt;th&gt;ハッシュ&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;推奨&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ssh-ed25519&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EdDSA (edwards25519)&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sk-ssh-ed25519&lt;/code&gt;@openssh.com&lt;/td&gt;
&lt;td&gt;EdDSA (edwards25519)&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 8.2 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ssh-rsa&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;RSA&lt;/td&gt;
&lt;td&gt;SHA1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;廃止予定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rsa-sha2-256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;RSA&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 7.2 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rsa-sha2-512&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;RSA&lt;/td&gt;
&lt;td&gt;SHA2-512&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 7.2 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ssh-dss&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;DSA&lt;/td&gt;
&lt;td&gt;SHA1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ecdsa-sha2-nistp256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ECDSA (NIST curve P-256)&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ecdsa-sha2-nistp384&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ECDSA (NIST curve P-384)&lt;/td&gt;
&lt;td&gt;SHA2-384&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ecdsa-sha2-nistp521&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ECDSA (NIST curve P-521)&lt;/td&gt;
&lt;td&gt;SHA2-512&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sk-ecdsa-sha2-nistp256&lt;/code&gt;@openssh.com&lt;/td&gt;
&lt;td&gt;ECDSA (NIST curve P-256)&lt;/td&gt;
&lt;td&gt;SHA2-256&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 8.2 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;頭に &lt;code&gt;sk-&lt;/code&gt; が付いているものは暗号デバイスに対応している。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-rsa&lt;/code&gt; は将来バージョンで廃止が決まっている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; では FIPS 186-3 以降の DSA に対応してないようで，鍵長が1024ビットしか対応してない（これも NIST 嫌悪か？）。
もちろん推奨できない。&lt;/p&gt;
&lt;p&gt;NIST 推奨パラメータを使った ECDSA も（ECDH と同じく）微妙に評判が悪い。
あと ECDSA は電子署名時に乱数を使うのだが，この実装をサボると脆弱性の元となる。
実際に，2013年に発覚した&lt;a href=&#34;https://www.cryptrec.go.jp/topics/cryptrec-er-0001-2013.html&#34; title=&#34;擬似乱数生成アルゴリズム Dual_EC_DRBG について | CRYPTREC&#34;&gt;疑似乱数生成器 Dual EC DRBG の脆弱性&lt;/a&gt;では， NSA が絡んでいたこともあって，一気に ECDSA 忌避が強まったらしい。&lt;/p&gt;
&lt;p&gt;以上はサーバ側の設定の話だが，ユーザ側では &lt;code&gt;ssh-keygen&lt;/code&gt; コマンドを使って認証鍵を生成する必要がある。&lt;/p&gt;
&lt;p&gt;認証鍵の生成では鍵種別（&lt;code&gt;-t&lt;/code&gt; オプション）と鍵長（&lt;code&gt;-b&lt;/code&gt; オプション）を指定する。
組み合わせは以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;鍵種別&lt;/th&gt;
&lt;th&gt;鍵長&lt;/th&gt;
&lt;th&gt;アルゴリズム&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;推奨&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rsa&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1024以上&lt;br&gt;（既定3072）&lt;/td&gt;
&lt;td&gt;RSA&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;3072ビット以上推奨&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dsa&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;DSA&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ed25519&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;EdDSA (edwards25519)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ed25519-sk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;EdDSA (edwards25519)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;span&gt;&lt;i class=&#34;fa-solid fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 8.2 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ecdsa&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;256（既定）&lt;/td&gt;
&lt;td&gt;ECDSA (NIST curve P-256)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ecdsa&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;384&lt;/td&gt;
&lt;td&gt;ECDSA (NIST curve P-384)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ecdsa&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;521&lt;/td&gt;
&lt;td&gt;ECDSA (NIST curve P-521)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ecdsa-sk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;ECDSA (NIST curve P-256)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 8.2 以降&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これは私が盛大に勘違いしていたのだが，たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-keygen -t rsa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Generating public/private rsa key pair.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter file in which to save the key (/home/username/.ssh/id_rsa): 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter passphrase (empty for no passphrase): 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter same passphrase again: 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your identification has been saved in /home/username/.ssh/id_rsa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your public key has been saved in /home/username/.ssh/id_rsa.pub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The key fingerprint is:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHA256:qufsNjgco3QZNjE4eupwQiT6mD8fr2a7nXmU3ybxFHo username@hostname
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The key&amp;#39;s randomart image is:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+---[RSA 3072]----+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|   .             |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|..o o            |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|+. . o           |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|o.. +       .    |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|.* . +  S. . .   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|* + =  .o o E    |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|o= +.+.. . *     |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| .+ **+o. o +    |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|   =*XOo   o     |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+----[SHA256]-----+
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じに鍵を作ったときに表示される &lt;code&gt;SHA256&lt;/code&gt; は署名時ではなく，鍵指紋のハッシュ・アルゴリズムを指しているらしい。
実際の電子署名でどのハッシュ・アルゴリズムを使うのかはサーバ-クライアント間のネゴシエーションで決まるのかな（？）&lt;/p&gt;
&lt;h2&gt;【おまけ】 各種アルゴリズムのセキュリティ強度&lt;/h2&gt;
&lt;p&gt;（「&lt;a href=&#34;https://text.baldanders.info/remark/2017/10/key-parameters/&#34;&gt;暗号鍵関連の各種変数について&lt;/a&gt;」より抜粋）&lt;/p&gt;
&lt;p&gt;おまけとして各種アルゴリズムのセキュリティ強度を挙げておく。&lt;/p&gt;
&lt;h3&gt;各種暗号アルゴリズムとセキュリティ強度の関係&lt;/h3&gt;
&lt;p&gt;最初は種暗号アルゴリズムの鍵長とセキュリティ強度の関係を示す表。
単位は全てビットである。&lt;/p&gt;
&lt;p&gt;&lt;figure lang=&#34;en&#34;&gt;
&lt;style&gt;
main table.nist2 th  {
  vertical-align:middle;
  text-align: center;
}
main table.nist2 td  {
  vertical-align:middle;
  text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;nist2&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Security&lt;br&gt;Strength&lt;/th&gt;
&lt;th&gt;Symmetric&lt;br&gt; key&lt;br&gt; algorithms&lt;/th&gt;
&lt;th&gt;FFC&lt;br&gt;(DSA, DH,&lt;br&gt;MQV)&lt;/th&gt;
&lt;th&gt;IFC&lt;br&gt;(RSA)&lt;/th&gt;
&lt;th&gt;ECC&lt;br&gt;(ECDSA,&lt;br&gt;EdDSA, DH,&lt;br&gt;MQV)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt; $\le 80$ &lt;/td&gt;&lt;td&gt;2TDEA&lt;/td&gt;&lt;td&gt; $L=1024$ &lt;br&gt; $N=160$ &lt;/td&gt;&lt;td&gt; $k=1024$ &lt;/td&gt; &lt;td&gt; $f = 160\text{ - }223$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; $112$ &lt;/td&gt;&lt;td&gt;3TDEA&lt;/td&gt;&lt;td&gt; $L=2048$ &lt;br&gt; $N=224$ &lt;/td&gt;&lt;td&gt;$k=2048$&lt;/td&gt; &lt;td&gt;$f = 224\text{ - }255$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; $128$ &lt;/td&gt;&lt;td&gt;AES-128&lt;/td&gt;&lt;td&gt; $L=3072$ &lt;br&gt; $N=256$ &lt;/td&gt;&lt;td&gt;$k=3072$&lt;/td&gt; &lt;td&gt;$f = 256\text{ - }383$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; $192$ &lt;/td&gt;&lt;td&gt;AES-192&lt;/td&gt;&lt;td&gt; $L=7680$ &lt;br&gt; $N=384$ &lt;/td&gt;&lt;td&gt;$k=7680$&lt;/td&gt; &lt;td&gt;$f = 384\text{ - }511$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; $256$ &lt;/td&gt;&lt;td&gt;AES-256&lt;/td&gt;&lt;td&gt; $L=15360$ &lt;br&gt; $N=512$ &lt;/td&gt;&lt;td&gt;$k=15360$&lt;/td&gt;&lt;td&gt;$f=512+$&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;div&gt;Comparable security strengths of symmetric block cipher and asymmetric-key algorithms (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r5&#39;&gt;SP 800-57 Part 1 Revision 5 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 5.6.1.1)&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt; &lt;!-- 要 MathJax --&gt;&lt;/p&gt;
&lt;h3&gt;ハッシュ・アルゴリズムとセキュリティ強度の関係&lt;/h3&gt;
&lt;p&gt;次はハッシュ・アルゴリズムとセキュリティ強度の関係を示す表。&lt;/p&gt;
&lt;p&gt;&lt;figure lang=&#39;en&#39;&gt;
&lt;style&gt;
main table.nist3 th  {
  vertical-align:middle;
  text-align: center;
}
main table.nist3 td  {
   
  text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;nist3&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Security &lt;br&gt;Strength&lt;/th&gt;
&lt;th&gt;Digital Signatures and Other&lt;br&gt;Applications Requiring Collision&lt;br&gt;Resistance&lt;/th&gt;
&lt;th&gt;HMAC, KMAC,&lt;br&gt;Key Derivation Functions,&lt;br&gt;Random Bit Generation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; $\le 8$0&lt;/td&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$112$&lt;/td&gt;
&lt;td&gt;SHA-224, SHA-512/224, SHA3-224&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$128$&lt;/td&gt;
&lt;td&gt;SHA-256, SHA-512/256, SHA3-256&lt;/td&gt;
&lt;td&gt;SHA-1, KMAC128&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$192$&lt;/td&gt;
&lt;td&gt;SHA-384, SHA3-384&lt;/td&gt;
&lt;td&gt;SHA-224, SHA-512/224, SHA3-224&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$\ge 256$&lt;/td&gt;
&lt;td&gt;SHA-512, SHA3-512&lt;/td&gt;
&lt;td&gt;SHA-256, SHA-512/256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, KMAC256&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;div&gt;Maximum security strengths for hash and hash-based functions (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r5&#39;&gt;SP 800-57 Part 1 Revision 5 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 5.6.1.2)&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt; &lt;!-- 要 MathJax --&gt;&lt;/p&gt;
&lt;h3&gt;セキュリティ強度と有効期限&lt;/h3&gt;
&lt;p&gt;こちらはセキュリティ強度の有効期限を表したものだ。&lt;/p&gt;
&lt;p&gt;&lt;figure lang=&#39;en&#39;&gt;
&lt;style&gt;
main table.nist4 th  {
  vertical-align:middle;
  text-align: center;
}
main table.nist4 td  {
  vertical-align:middle;
  text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;nist4&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&#39;2&#39;&gt;Security Strength&lt;/th&gt;
&lt;th&gt;Through&lt;br&gt; 2030&lt;/th&gt;
&lt;th&gt;2031 and&lt;br&gt; Beyond&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td rowspan=&#39;2&#39;&gt;$\lt 112$&lt;/td&gt;&lt;td&gt;Applying&lt;/td&gt;                       &lt;td colspan=&#39;2&#39;&gt;Disallowed&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;                              &lt;td&gt;Processing&lt;/td&gt;                     &lt;td colspan=&#39;2&#39;&gt;Legacy use&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan=&#39;2&#39;&gt;$112$&lt;/td&gt;    &lt;td&gt;Applying&lt;/td&gt;                       &lt;td rowspan=&#39;2&#39;&gt;Acceptable&lt;/td&gt;&lt;td&gt;Disallowed&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;                              &lt;td&gt;Processing&lt;/td&gt;                                                    &lt;td&gt;Legacy use&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$128$&lt;/td&gt;                &lt;td rowspan=&#39;3&#39;&gt;Applying/Processing&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$192$&lt;/td&gt;                                                        &lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$256$&lt;/td&gt;                                                        &lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;div&gt;Security-strength time frames (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r5&#39;&gt;SP 800-57 Part 1 Revision 5 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 5.6.3)&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt; &lt;!-- 要 MathJax --&gt;&lt;/p&gt;
&lt;p&gt;各用語はそれぞれ&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;用語&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Applying&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;適用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Processing&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;処理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Acceptable&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;許容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Legacy use&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;許容（レガシー使用のみ）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Disallowed&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;禁止&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;という意味だ。
例を挙げると，セキュリティ強度112ビットの暗号スイート（Cipher Suites）を適用する場合は2030年までは許容するけど2031年以降は禁止。
すでに暗号化されているデータを復号したい場合でも2031年以降はレガシー・システムしか許容しない，ということになる。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/aqmr-kino/items/8c3306ea8022b0d5cbe4&#34;&gt;OpenSSHの暗号化周りの設定について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tex2e.github.io/blog/crypto/chacha20poly1305&#34;&gt;ChaCha20-Poly1305の解説と実装 | 晴耕雨読&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.conoha.jp/v/openssh/&#34;&gt;OpenSSHの認証に証明書を使う方法｜ConoHa VPSサポート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B079NL1L9K?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51mVqXeeVyL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B079NL1L9K?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;SSH Mastery: OpenSSH, PuTTY, Tunnels and Keys (IT Mastery Book 12) (English Edition)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Lucas, Michael W (著)&lt;/dd&gt;
    &lt;dd&gt;Tilted Windmill Press 2018-02-06 (Release 2018-02-06)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B079NL1L9K (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;タイトルを見て “SSH Mystery” と空目したアホは私です。洋書だけど英語不得手の私にも読める内容。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-01-11&#34;&gt;2021-01-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- SSH Mastery --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
</content>
	</entry><entry>
		<title>Git v2.29 がリリースされた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/10/git-2_29-is-released/" />
		<id>tag:text.Baldanders.info,2020-10-25:/release/2020/10/git-2_29-is-released/</id>
		<published>2020-10-25T09:09:33+00:00</published>
		<updated>2020-11-02T23:24:36+00:00</updated>
		<summary>SHA-2 コミット・ハッシュの実験的サポート / Windows 版 Git Credential Manager のアップグレード</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;先日 &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; v.2.29 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lore.kernel.org/git/xmqqy2k2t77l.fsf@gitster.c.googlers.com/&#34;&gt;[ANNOUNCE] Git v2.29.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SHA-2 コミット・ハッシュの実験的サポート&lt;/h2&gt;
&lt;p&gt;v2.29 ではコミット・ハッシュに関する重大な仕様変更がある。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Git 2.29 includes experimental support for writing your repository’s objects using a SHA-256 hash of their contents, instead of using SHA-1&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://github.blog/2020-10-19-git-2-29-released/&#34;&gt;Highlights from Git 2.29 - The GitHub Blog&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;といっても今回は実験的なサポート（experimental support）で，試すのであれば以下のような感じでできるらしい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git init --object-format=sha256 sample-repo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Initialized empty Git repository in /home/username/sample-repo/.git/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cd sample-repo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ echo &amp;#39;Hello, SHA-256!&amp;#39; &amp;gt;README.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git add README.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git commit -m &amp;#34;README.md: initial commit&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[main (root-commit) 6d45449] README.md: initial commit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 1 file changed, 1 insertion(+)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; create mode 100644 README.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; $ git rev-parse HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 6d45449028a8e76500adbfe7330e779d5dc4a3a14fca58ff08ec354c58727b2c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然ながら SHA-1 ベースのコミット・ハッシュと SHA-2 (SHA256) ベースのコミット・ハッシュとの間には互換性がない。
当面は2系統のリポジトリを使い分けて運用することになりそうだ。
ただし，将来的には両者を相互運用できるようにするらしい。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;In future releases, Git will support interoperating between repositories with different object formats by computing both a SHA-1 and SHA-256 hash of each object it writes, and storing a translation table between them. This will eventually allow repositories that store their objects using SHA-256 to interact with (sufficiently up-to-date) SHA-1 clients, and vice-versa. It will also allow converted SHA-256 repositories to have their references to older SHA-1 commits still function as normal (e.g., if I write a commit whose message references an earlier commit by its SHA-1 name, then Git will still be able to follow that reference even after the repository is converted to use SHA-256 by consulting the translation table)&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://github.blog/2020-10-19-git-2-29-released/&#34;&gt;Highlights from Git 2.29 - The GitHub Blog&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ここまで到達すれば SHA-2 ベースへ本格的に切り替えていってもいいかも知れない。&lt;/p&gt;
&lt;h2&gt;Windows 版 Git Credential Manager のアップグレード&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt; では，もうひとつ重大な変更がある。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;This version upgrades existing users of &lt;a href=&#34;https://github.com/microsoft/Git-Credential-Manager-for-Windows/&#34;&gt;Git Credential Manager for Windows&lt;/a&gt; (which was just deprecated) to &lt;a href=&#34;https://github.com/microsoft/Git-Credential-Manager-Core&#34;&gt;Git Credential Manager Core&lt;/a&gt; (“GCM Core”, which is the designated successor of the former). This is necessary because &lt;a href=&#34;https://github.blog/changelog/2019-08-08-password-based-http-basic-authentication-deprecation-and-removal/&#34;&gt;GitHub deprecated password-based authentication&lt;/a&gt; and intends to remove support for it soon, and GCM Core is prepared for this change.&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://github.com/git-for-windows/git/releases/tag/v2.29.0.windows.1&#34;&gt;Release Git for Windows 2.29.0 · git-for-windows/git&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;GitHub リポジトリに HTTPS でアクセスしている場合は注意が必要かも知れない（&lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt; を使ってないので，どの程度影響するか分かってない。ゴメンペコン &lt;abbr class=&#34;emoji-chars&#34; title=&#34;ゴメン&#34;&gt;🙇&lt;/abbr&gt;）。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/git/xmqq4kmlj9q9.fsf@gitster.c.googlers.com/&#34;&gt;[ANNOUNCE] Git v2.29.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://lore.kernel.org/git/xmqqlffo4qjw.fsf@gitster.c.googlers.com/&#34;&gt;[ANNOUNCE] Git v2.29.2 - Junio C Hamano&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-10-19-git-2-29-released/&#34;&gt;Highlights from Git 2.29 - The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/git-for-windows/git/releases/tag/v2.29.0.windows.1&#34;&gt;Release Git for Windows 2.29.0 · git-for-windows/git · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/git-for-windows/git/releases/tag/v2.29.1.windows.1&#34;&gt;Release Git for Windows 2.29.1 · git-for-windows/git · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/git-for-windows/git/releases/tag/v2.29.2.windows.1&#34;&gt;Release Git for Windows 2.29.2 · git-for-windows/git · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1284871.html&#34;&gt;「Git for Windows 2.29.0」が公開 ～セットアップ時にデフォルトブランチ名を設定可能 - 窓の杜&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-git-from-ppa/&#34;&gt;PPA から Git をインストールする&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20201025-sayonara-sha1&#34;&gt;さようなら SHA-1&lt;/a&gt; : SHA-1 の危殆化について Zenn でまとめ記事を書いてみた&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
</content>
	</entry><entry>
		<title>OpenSSH 鍵をアップグレードする【2020-01-11 改訂】</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/06/upgrade-openssh-key/" />
		<id>tag:text.Baldanders.info,2020-06-01:/remark/2020/06/upgrade-openssh-key/</id>
		<published>2020-06-01T07:12:32+00:00</published>
		<updated>2024-01-26T21:38:55+00:00</updated>
		<summary>どうせ鍵を新調するのなら楕円曲線暗号で構成するのがいいよね。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;strong&gt;【2020-01-11 改訂】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2020-05-27 に &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 8.3 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lwn.net/Articles/821544/&#34;&gt;OpenSSH 8.3 released (and ssh-rsa deprecation notice) [LWN.net]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この中で “Future deprecation notice” として&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;It is now possible to perform chosen-prefix attacks against the SHA-1 algorithm for less than USD$50K. For this reason, we will be disabling the “ssh-rsa” public key signature algorithm by default in a near-future release&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://lwn.net/Articles/821544/&#34;&gt;OpenSSH 8.3 released (and ssh-rsa deprecation notice)&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と書かれていてた&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
といっても，これはサーバ側の設定の話だそうでクライアントには関係ないそうだ（&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/discussions/85&#34;&gt;フィードバック&lt;/a&gt;感謝）。&lt;/p&gt;
&lt;!--
クライアント側はそろそろ古い RSA 鍵から交換したほうがよさそうである。
もっとも最近のバージョン[^sha1b] で作った鍵であれば特に問題ないようだ。

[^sha1b]: ちなみに，私は2011年に作った RSA 鍵を使っているが，ハッシュ・アルゴリズムは SHA256 だった。少なくとも10年以内に作った鍵なら問題なさそう？ あとは鍵長かねぇ。

```text
$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/username/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/username/.ssh/id_rsa
Your public key has been saved in /home/username/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:qufsNjgco3QZNjE4eupwQiT6mD8fr2a7nXmU3ybxFHo username@hostname
The key&#39;s randomart image is:
+---[RSA 3072]----+
|   .             |
|..o o            |
|+. . o           |
|o.. +       .    |
|.* . +  S. . .   |
|* + =  .o o E    |
|o= +.+.. . *     |
| .+ **+o. o +    |
|   =*XOo   o     |
+----[SHA256]-----+
```

ハッシュ・アルゴリズムが SHA256 以上になっているか，がポイント。
--&gt;
&lt;p&gt;もし2048ビット以下の古い RSA 鍵を使ってるなら替えどきかな。
で，どうせ鍵を新調するのなら楕円曲線暗号（Elliptic Curve Cryptography; ECC）で構成するのがいいよね。&lt;/p&gt;
&lt;p&gt;ちうわけで，ECC 鍵を作って登録するところまでやってみる。
ちゃんとメモっておかないと忘れるので（笑）&lt;/p&gt;
&lt;h2&gt;前提条件【2021-01-09 変更】&lt;/h2&gt;
&lt;p&gt;今回は &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 環境下での作業とし鍵管理を &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; で行うものとする。
&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; での設定方法は以下を参考にどうぞ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/gpg-agent-in-ubuntu/&#34;&gt;gpg-agent の設定： GnuPG in Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows 環境の場合は以下の拙文を参考にどうぞ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-gnupg-for-windows-2/&#34;&gt;GnuPG for Windows : gpg-agent について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに，今回は鍵の生成を &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; で行っているが &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; でも生成できる。
詳しくは以下を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/ssh-key-management-with-gnupg/&#34;&gt;OpenSSH の認証鍵を GunPG で作成・管理する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 鍵の生成&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 鍵を生成するには &lt;code&gt;ssh-keygen&lt;/code&gt; コマンドを使う。
たとえばこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-keygen -t ecdsa -b 256 -C &amp;#34;alice@example.com&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Generating public/private ecdsa key pair.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter file in which to save the key (/home/username/.ssh/id_ecdsa): 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter passphrase (empty for no passphrase): 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter same passphrase again: 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your identification has been saved in /home/username/.ssh/id_ecdsa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your public key has been saved in /home/username/.ssh/id_ecdsa.pub
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The key fingerprint is:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHA256:DtXgQm9rz7Dc5M5yWu/CNVo341o1rcfN9UCyYu+SZU4 alice@example.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The key&amp;#39;s randomart image is:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+---[ECDSA 256]---+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|      . .        |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|     . o o       |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|      . = . . .  |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|       + .   +  .|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|      . S + . ..+|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|       = X oE +*=|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|        +.*X.+oo*|
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|        .+Bo.... |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|        .+o+=.   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+----[SHA256]-----+
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで作成された &lt;code&gt;id_ecdsa&lt;/code&gt; および &lt;code&gt;id_ecdsa.pub&lt;/code&gt; ファイルが鍵ファイルである。
ちなみに &lt;code&gt;id_ecdsa&lt;/code&gt; ファイルには秘密鍵， &lt;code&gt;id_ecdsa.pub&lt;/code&gt; ファイルには公開鍵が格納されている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; オプションで鍵種別を， &lt;code&gt;-b&lt;/code&gt; で鍵長（ビット数）をセットする。
鍵種別と鍵長の組み合わせと，それぞれに対するセキュリティ強度（ビット数）は以下の通り&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div&gt;
&lt;figure&gt;
&lt;style&gt;
main table.sshkeys th  {
  vertical-align:middle;
  text-align: center;
}
main table.sshkeys td  {
  vertical-align:middle;
  //text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;sshkeys&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;鍵種別&lt;/th&gt;
&lt;th&gt;鍵長&lt;/th&gt;
&lt;th&gt;強度&lt;/th&gt;
&lt;th&gt;楕円曲線名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;td&gt;&lt;strike&gt;&lt;code&gt;dsa&lt;/code&gt;&lt;/strike&gt;&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;&lt;strike&gt;1024&lt;/strike&gt;&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;80&lt;/td&gt;
  &lt;td&gt;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td rowspan=&#34;3&#34;&gt;&lt;code&gt;ecdsa&lt;/code&gt; / &lt;code&gt;ecdsa-sk&lt;/code&gt;&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;256&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;128&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;nistp256&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&#34;right&#34;&gt;384&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;192&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;nistp384&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&#34;right&#34;&gt;521&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;256&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;nistp521&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ed25519&lt;/code&gt; / &lt;code&gt;ed25519-sk&lt;/code&gt;&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;&amp;mdash;&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;128&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;ed25519&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td rowspan=&#34;3&#34;&gt;&lt;code&gt;rsa&lt;/code&gt;&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;3072&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;128&lt;/td&gt;
  &lt;td rowspan=&#34;3&#34;&gt;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&#34;right&#34;&gt;7680&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;192&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&#34;right&#34;&gt;15360&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;この組み合わせの（&lt;code&gt;dsa&lt;/code&gt; 以外の）いずれかであれば2031年以降も問題なく使える。
なお &lt;code&gt;ecdsa-sk&lt;/code&gt; および &lt;code&gt;ed25519-sk&lt;/code&gt; は暗号デバイスに登録する際に使うらしい（今回は割愛する）。&lt;/p&gt;
&lt;p&gt;余談だが楕円曲線 &lt;code&gt;ed25519&lt;/code&gt; に対応する電子署名アルゴリズムは EdDSA と呼ばれ &lt;a href=&#34;https://tools.ietf.org/html/rfc8032&#34; title=&#34;RFC 8032 - Edwards-Curve Digital Signature Algorithm (EdDSA)&#34;&gt;RFC 8032&lt;/a&gt; で規定されている&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
なんで鍵種別を &lt;code&gt;eddsa&lt;/code&gt; としなかったのかは知らない。
紛らわしかったのかな？&lt;/p&gt;
&lt;h3&gt;楕円曲線と鍵長&lt;/h3&gt;
&lt;p&gt;（「&lt;a href=&#34;https://text.baldanders.info/openpgp/using-ecc-with-gnupg/&#34;&gt;そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな&lt;/a&gt;」より抜粋）&lt;/p&gt;
&lt;p&gt;ここでちょっと横道に逸れて鍵長の話をしておく。&lt;/p&gt;
&lt;p&gt;たとえば RSA の（平文 $M$ から暗号文 $C$ への）暗号化は以下の式で表される。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;mathjax box&#34;&gt;
\[
    C = M^e \bmod n
\]
&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;$(e, n)$ のセットが公開鍵で， $n$ のサイズが鍵長に相当する。
実際の計算はともかく，感覚としては分かりやすいよね。&lt;/p&gt;
&lt;p&gt;ECC の場合は暗号化の前に，まずベースとなる楕円曲線の（素数 $q$ で決められる）素体（prime fields）を決めなければならない&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
これは以下の式で表される。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;mathjax box&#34;&gt;
\[
    E : y^2 \equiv x^3 + ax + b \pmod{q}
\]
&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;この素体上の有理点の数（位数）を $\#E$ とした時の $\#E$ のサイズが鍵長に相当する。
$(a,b,q)$ といったパラメータを眺めただけでは鍵長が分からないというのが面倒臭い感じである&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;そこで ECC の場合は楕円曲線を表すパラメータのセットが標準化されている。
&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; の場合は &lt;code&gt;nistp256&lt;/code&gt;, &lt;code&gt;nistp384&lt;/code&gt;, &lt;code&gt;nistp521&lt;/code&gt;, &lt;code&gt;ed25519&lt;/code&gt; といった楕円曲線名に対応している。
つまり楕円曲線名から楕円曲線の種類を特定し，そこから鍵長も分かる，というわけだ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 鍵の登録（クライアント側）&lt;/h2&gt;
&lt;p&gt;本題に戻る。
作成した &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 鍵ファイル &lt;code&gt;id_ecdsa&lt;/code&gt; および &lt;code&gt;id_ecdsa.pub&lt;/code&gt; を登録しよう。&lt;/p&gt;
&lt;p&gt;クライアント側は &lt;code&gt;ssh-add&lt;/code&gt; コマンドを使って秘密鍵ファイル &lt;code&gt;id_ecdsa&lt;/code&gt; の内容を &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の鍵束に永続的に登録できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-add ./id_ecdsa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter passphrase for ./id_ecdsa: 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Identity added: ./id_ecdsa (alice@example.com)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この時 &lt;code&gt;ssh-add&lt;/code&gt; コマンドによるパスフレーズ入力とは別に &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の pinentry によるパスフレーズの設定が行われる（確認を含めて2回入力する必要あり）。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./pinentry.png&#34;&gt;&lt;img src=&#34;./pinentry.png&#34; srcset=&#34;./pinentry.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;pinentry&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./pinentry.png&#34;&gt;pinentry&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Pinentry で設定するパスフレーズは &lt;code&gt;id_ecdsa&lt;/code&gt; ファイルに対するものとは管理が異なるので注意。
というか &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の鍵束に登録したら &lt;code&gt;id_ecdsa&lt;/code&gt; ファイルは不要になる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 秘密鍵が登録できたかどうかは &lt;code&gt;~/.gnupg/sshcontrol&lt;/code&gt; ファイルで確認できる。
ちゃんと登録できていれば以下のような内容が追記される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# ECDSA key added on: 2020-06-01 14:05:35
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Fingerprints:  MD5:e4:5b:66:a6:03:9a:a4:0e:f2:1b:a5:04:72:93:f3:f0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#                SHA256:DtXgQm9rz7Dc5M5yWu/CNVo341o1rcfN9UCyYu+SZU4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A5353D587000D820669B0BD55A0B4AD6897458DB 0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また &lt;code&gt;ssh-add -L&lt;/code&gt; コマンドでも登録した鍵を確認できる。&lt;/p&gt;
&lt;p&gt;鍵の実体は &lt;code&gt;~/.gnupg/private-keys-v1.d/&lt;/code&gt; ディレクトリにある。
上述の鍵の場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A5353D587000D820669B0BD55A0B4AD6897458DB.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というファイル名で格納されているはずである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 鍵の登録（サーバ側）&lt;/h2&gt;
&lt;p&gt;ログイン先のサーバに公開鍵ファイル &lt;code&gt;id_ecdsa.pub&lt;/code&gt; の中身を登録する。
つっても，どうにかして &lt;code&gt;id_ecdsa.pub&lt;/code&gt; ファイルをサーバにアップロードして&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cat ./id_ecdsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と &lt;code&gt;authorized_keys&lt;/code&gt; ファイルに追記すればよい。
追記ではなく内容を書き換えるなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cat ./id_ecdsa.pub &amp;gt; ~/.ssh/authorized_keys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;でもよい。
書き換えるなら以前のファイルのバックアップはとってね。
パーミッションの設定も忘れずに。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ chmod 700 ~/.ssh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ chmod 600 ~/.ssh/authorized_keys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;老婆心ながら，新しい鍵でログインできることを確認するまでは接続中のセッションは切らないこと。
設定を間違えてログイン不能になったら悲惨だからねぇ。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;h3&gt;【2021-12-13 追記】 ssh-copy-id を使う方法&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/discussions/85#discussioncomment-1793423&#34;&gt;フィードバックで教えてもらった&lt;/a&gt;が（感謝！） &lt;code&gt;ssh-copy-id&lt;/code&gt; コマンド（中身は shell スクリプト）を使うともっと簡単に登録できるそうだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-copy-id -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Usage: /usr/bin/ssh-copy-id [-h|-?|-f|-n] [-i [identity_file]] [-p port] [-F alternative ssh_config file] [[-o &amp;lt;ssh -o options&amp;gt;] ...] [user@]hostname
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	-f: force mode -- copy keys without trying to check if they are already installed
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	-n: dry run    -- no keys are actually copied
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	-h|-?: print this help
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ふむむ。
&lt;code&gt;-n&lt;/code&gt; オプションで dry run できるのか。
ありがたい。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; オプションで公開鍵ファイルを指定するが，標準入力からも受け付けるようなので，パイプで繋いで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ssh-add -L | ssh-copy-id -n alice@hostname
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;=-=-=-=-=-=-=-=
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Would have added the following key(s):
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFfjejx/Saej929myfZoBQAKgusPi2iiOxdZZfpCLxh5 (none)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;=-=-=-=-=-=-=-=
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じにできる（実際に登録する際は &lt;code&gt;-n&lt;/code&gt; オプションを外してね）。&lt;/p&gt;
&lt;p&gt;あるいは &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; で作った認証鍵であれば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gpg --export-ssh-key alice | ssh-copy-id -n alice@hostname
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとすることもできる（実際に登録する際は &lt;code&gt;-n&lt;/code&gt; オプションを外してね）。&lt;/p&gt;
&lt;p&gt;サーバ側に既に &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; ファイルがある場合は（公開鍵認証でログインした上で）ちゃんと追記してくれるし，パーミッションの心配も要らないようだ。&lt;/p&gt;
&lt;p&gt;教えていただいて本当にありがとう &lt;abbr class=&#34;emoji-chars&#34; title=&#34;ペコン&#34;&gt;🙇&lt;/abbr&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;各種 &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; リポジトリ・サービスに公開鍵を登録する&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; ではリポジトリのアクセスに &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 認証が使える。
&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 認証に使う公開鍵は設定の “&lt;a href=&#34;https://github.com/settings/keys&#34;&gt;SSH and GPG keys&lt;/a&gt;” で登録する（複数登録可能）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/product/&#34;&gt;Bitbucket&lt;/a&gt; や &lt;a href=&#34;https://gitlab.com/&#34;&gt;GitLab&lt;/a&gt; などの各種 &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; リポジトリ・サービスでも同様に &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 公開鍵を登録できる。&lt;/p&gt;
&lt;p&gt;よしゃあ！ これで作業完了。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://orumin.blogspot.com/2020/05/ssh-rsa.html&#34;&gt;ssh-rsa，非推奨のお知らせ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35154545/&#34;&gt;OpenSSH、将来のリリースでssh-rsa公開鍵の署名アルゴリズムをデフォルトで無効に - ZDNet Japan&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://support.conoha.jp/v/openssh/&#34;&gt;OpenSSHの認証に証明書を使う方法｜ConoHa VPSサポート&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/aat00000/items/a7973b104be9bfd3bb5c&#34;&gt;SSHのCA認証 - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/artizirk/d09ce3570021b0f65469cb450bee5e29&#34;&gt;OpenPGP SSH access with Yubikey and GnuPG · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.yubico.com/PIV/Guides/Securing_SSH_with_OpenPGP_or_PIV.html&#34;&gt;Securing SSH with OpenPGP or PIV&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.yubico.com/SSH/&#34;&gt;Securing SSH with the YubiKey&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.classmethod.jp/articles/ssh-ubuntu-ec2-with-fido-u2f-security-key/&#34;&gt;セキュリティキー「YubiKey」でEC2へのSSHを2段階認証にしてみた | Developers.IO&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://nulab.com/ja/blog/backlog/disables-rsa-sig-using-the-sha-1-in-openssh/&#34;&gt;OpenSSHがSHA-1を使用したRSA署名を廃止、BacklogのGitで発生した問題と解決にいたるまでの道のり | 株式会社ヌーラボ(Nulab inc.)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/10/key-parameters/&#34;&gt;暗号鍵関連の各種変数について&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/01/sayonara-sha-1/&#34;&gt;（何度目かの）さようなら SHA-1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/eddsa/&#34;&gt;Edwards-curve Digital Signature Algorithm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;実は同様の問題は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; でも指摘されていて，半年前にリリースされた 2.2.18 で対応済みである（&lt;a href=&#34;https://text.baldanders.info/release/2019/11/gnupg-2_2_18-is-released/&#34;&gt;GnuPG 2.2.18 リリース： さようなら SHA-1&lt;/a&gt;）&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/discussions/85&#34;&gt;フィードバック&lt;/a&gt;で教えていただいたが， &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; は FIPS 186-3 以降の DSA に対応していないそうで，1024ビットの鍵長しか選択できないらしい。なので，最近の &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; のデフォルト設定では DSA を無効にしているそうな。情報感謝です。あと &lt;code&gt;ecdsa-sk&lt;/code&gt; では鍵長の指定はできない（無視される）ようだ。256ビット（&lt;code&gt;nistp256&lt;/code&gt;）固定ってことかな？&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;code&gt;ed25519&lt;/code&gt; (edwards25519) は &lt;a href=&#34;http://cr.yp.to/ecdh.html&#34; title=&#34;Curve25519: high-speed elliptic-curve cryptography&#34;&gt;Curve25519&lt;/a&gt; と双有理同値な楕円曲線で，鍵長も  &lt;a href=&#34;http://cr.yp.to/ecdh.html&#34; title=&#34;Curve25519: high-speed elliptic-curve cryptography&#34;&gt;Curve25519&lt;/a&gt; と同じく256ビット（セキュリティ強度128ビット）と見積もられている。ちなみに &lt;a href=&#34;http://cr.yp.to/ecdh.html&#34; title=&#34;Curve25519: high-speed elliptic-curve cryptography&#34;&gt;Curve25519&lt;/a&gt; は ECDH 用の楕円曲線およびそのライブラリで，公有（public domain）のソフトウェアとして公開されている。また &lt;a href=&#34;https://text.baldanders.info/remark/2020/06/eddsa/&#34; title=&#34;Edwards-curve Digital Signature Algorithm&#34;&gt;EdDSA は FIPS 186-5 に組み込まれる予定&lt;/a&gt;になっていて，そうなれば正式に NIST 標準となる。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;素体ではなく「標数2の体（binary fields）」を使う場合もあるが，ここでは割愛する。&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;楕円曲線と楕円曲線暗号については結城浩さんの『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版&lt;/a&gt;』の付録に比較的分かりやすい解説が載っている。同じく結城浩さんの『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34;&gt;数学ガール ガロア理論&lt;/a&gt;』が何となく分かれば楕円曲線についても何となく分かると思う。大丈夫。私も何となくしか分かっていない（笑）&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>（何度目かの）さようなら SHA-1</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/01/sayonara-sha-1/" />
		<id>tag:text.Baldanders.info,2020-01-09:/remark/2020/01/sayonara-sha-1/</id>
		<published>2020-01-09T14:02:25+00:00</published>
		<updated>2020-10-26T10:24:45+00:00</updated>
		<summary>思ったより騒がれてる感じなので記事を立ててみた。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;2019年11月に書いた「&lt;a href=&#34;https://text.baldanders.info/release/2019/11/gnupg-2_2_18-is-released/&#34;&gt;GnuPG 2.2.18 リリース： さようなら SHA-1&lt;/a&gt;」に追記してお終いにしようかと思ったが，思ったより騒がれてる感じなので記事を立ててみた。&lt;/p&gt;
&lt;p&gt;というわけで：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://eprint.iacr.org/2020/014&#34;&gt;Cryptology ePrint Archive: Report 2020/014 - SHA-1 is a Shambles - First Chosen-Prefix Collision on SHA-1 and Application to the PGP Web of Trust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sha-mbles.github.io/&#34;&gt;SHA-1 is a Shambles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2020/01/pgp-keys-software-security-and-much-more-threatened-by-new-sha1-exploit/&#34;&gt;PGP keys, software security, and much more threatened by new SHA1 exploit | Ars Technica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2020/01/new_sha-1_attac.html&#34;&gt;New SHA-1 Attack - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要約としては &lt;a href=&#34;https://www.schneier.com/blog/archives/2020/01/new_sha-1_attac.html&#34; title=&#34;New SHA-1 Attack - Schneier on Security&#34;&gt;Bruce Schneier さんの記事&lt;/a&gt;が分かりやすいので，これを起点に紹介していく。&lt;/p&gt;
&lt;h2&gt;ハッシュ値の衝突問題&lt;/h2&gt;
&lt;p&gt;（「&lt;a href=&#34;https://text.baldanders.info/remark/2015/problem-of-sha1-collision/&#34;&gt;SHA-1 衝突問題： 廃止の前倒し&lt;/a&gt;」からの抜粋）&lt;/p&gt;
&lt;p&gt;暗号技術におけるハッシュ関数とは，以下の機能を持ったアルゴリズムである&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;任意のデータ列を一定の長さのデータ列（ハッシュ値）に「要約」する&lt;/li&gt;
&lt;li&gt;ハッシュ値から元のデータ列を推測できない&lt;/li&gt;
&lt;li&gt;ひとつのハッシュ値に対して複数のデータ列が（実時間で）見つからない&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ハッシュ関数はメッセージ認証符号（Message Authentication Code; MAC）や電子署名（digital signature）の中核技術のひとつであり，データの「完全性（Integrity）」を担保する重要な要素である。
特に3番目の「ひとつのハッシュ値に対して複数のデータ列が（実時間で）見つからない」という機能が破られると，そのハッシュ関数では完全性を担保できなくなってしまう。
これを「ハッシュ値の衝突問題」という。&lt;/p&gt;
&lt;h2&gt;SHA-1 ハッシュ値を力づくで攻略してみる&lt;/h2&gt;
&lt;p&gt;SHA-1 における「ハッシュ値の衝突問題」は&lt;a href=&#34;https://baldanders.info/blog/000048/&#34;&gt;2004年まで遡る&lt;/a&gt;が，当時の攻略法は SHA-1 アルゴリズムの危殆化を狙ったもので，しかもその後の進展は殆どなかった。&lt;/p&gt;
&lt;p&gt;この状況が変わったのが2015年の “&lt;a href=&#34;https://sites.google.com/site/itstheshappening/&#34;&gt;freestart collisions for SHA-1&lt;/a&gt;” 論文である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2015/problem-of-sha1-collision/&#34;&gt;SHA-1 衝突問題： 廃止の前倒し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここで初めて「SHA-1 ハッシュ値を力づくで攻略」できる可能性が示された。
さらに2017年には Google によって最初の SHA-1 衝突例が公表された。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/02/sha-1-collision/&#34;&gt;最初の SHA-1 衝突例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回の “&lt;a href=&#34;https://sha-mbles.github.io/&#34;&gt;SHA-1 is a Shambles&lt;/a&gt;” の注目点は&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;“chosen-prefix collision for SHA-1” なる手法により，衝突可能なデータを用意する際の自由度が高い&lt;/li&gt;
&lt;li&gt;ハッシュ値を攻略する際の計算機パワーの調達コストが比較的実用的なレベルまで下がった&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;の2つである。
特に2番目が重要で， “Nvidia GTX 1060GPU” × 900 の構成で2ヶ月ほどで攻略できたらしい。
コストにして 45k USD だそうだ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; / &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; は既に SHA-1 を捨てつつある&lt;/h2&gt;
&lt;p&gt;“&lt;a href=&#34;https://sha-mbles.github.io/&#34;&gt;SHA-1 is a Shambles&lt;/a&gt;” では &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; が生成する公開鍵への電子署名をターゲットにしているが，実は現行の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2 系は既に SHA-1 を捨てつつあり，電子署名に使うハッシュ関数の既定は SHA256 である（“&lt;a href=&#34;https://sha-mbles.github.io/&#34;&gt;SHA-1 is a Shambles&lt;/a&gt;” で指摘されているのはレガシー・バージョンの 1.4 系のほう）。&lt;/p&gt;
&lt;p&gt;たとえば私が git コミットへの署名などで&lt;a href=&#34;https://baldanders.info/pubkeys/&#34;&gt;普段遣いしている OpenPGP 鍵&lt;/a&gt;は2013年に作ったものだが，鍵への署名は SHA256 で行っている。
私の公開鍵をチェックするには以下のコマンドを実行すればよい（何気に拙作の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; を宣伝しておく&lt;code&gt;w&lt;/code&gt;）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ wget https://baldanders.info/pubkeys/spiegel.asc -O - | gpgpdump
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また，次期 OpenPGP 標準となる &lt;a href=&#34;https://datatracker.ietf.org/doc/draft-ietf-openpgp-rfc4880bis/&#34; title=&#34;draft-ietf-openpgp-rfc4880bis - OpenPGP Message Format&#34;&gt;RFC 4880bis&lt;/a&gt; では新しい V5 パケットを策定中だが，鍵指紋（key fingerprint）に使うハッシュ関数の既定が SHA256 になるようだ。
&lt;a href=&#34;https://datatracker.ietf.org/doc/draft-ietf-openpgp-rfc4880bis/&#34; title=&#34;draft-ietf-openpgp-rfc4880bis - OpenPGP Message Format&#34;&gt;RFC 4880bis&lt;/a&gt; が正式に RFC 標準として公開されれば，かつての MD5 と同じく， SHA-1 は後方互換性のためだけに残されることになるだろう&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; の実装は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; だけではなく，今や&lt;a href=&#34;https://www.symantec.com/products/encryption&#34;&gt;シマンテック社のおまけプロダクトに成り下がった PGP&lt;/a&gt; をはじめ &lt;a href=&#34;http://openpgpjs.org/&#34; title=&#34;OpenPGP.js | OpenPGP JavaScript Implementation&#34;&gt;JsvaScript&lt;/a&gt; や &lt;a href=&#34;https://sequoia-pgp.org/&#34; title=&#34;Sequoia-PGP&#34;&gt;Rust&lt;/a&gt; などによる実装がある。
これらの実装が SHA-1 をどのように取り扱っているかは分からない。
どなたか教えて！&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2020-10-26 追記】&lt;/strong&gt;
&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 以外の実装でも議論が行われているようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mailarchive.ietf.org/arch/msg/openpgp/Rp-inhYKT8A9H5E34iLTrc9I0gc/&#34;&gt;[openpgp] Deprecating SHA1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h2&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; のコミット・ハッシュはどうなるのか&lt;/h2&gt;
&lt;p&gt;おそらく今回の件でもっとも議論を呼ぶのは &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; なんじゃないだろうか。
&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; のコミット・ハッシュは SHA-1 を使って行われるが，ハッシュ値の衝突が比較的簡単にできるようになれば，ひとつのコミット・ハッシュに対して複数のコミットが重複してしまうという問題が現実的になるかもしれない（ならないかもしれない）。&lt;/p&gt;
&lt;p&gt;ただ，コミットへの電子署名が正しく運用されているなら，&lt;a href=&#34;https://text.baldanders.info/openpgp/web-of-trust/&#34; title=&#34;OpenPGP の電子署名は「ユーザーの身元を保証し」ない&#34;&gt;なりすましに対してはある程度は抑止（防止ではない）できる&lt;/a&gt;だろう。&lt;/p&gt;
&lt;p&gt;なので，個人的にはあまり心配はしていない。
&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; の今後の活躍にご期待ください，といったところだろうか（笑）&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2020-10-26 追記】&lt;/strong&gt;
[Git] 2.29 から SHA-2 ベースのコミット・ハッシュがサポートされるようになった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2020/10/git-2_29-is-released/&#34;&gt;Git v2.29 がリリースされた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mailarchive.ietf.org/arch/msg/openpgp/h-6vCMDFFKhVXpXLC6gAt9tK7r8&#34;&gt;&amp;ldquo;SHA-1 is a Shambles&amp;rdquo; and forging PGP WoT signatures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/algorithms-for-openpgp/&#34;&gt;OpenPGP で利用可能なアルゴリズム（RFC 4880bis 対応版）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;単純に 1 USD = 110 JPY とするなら 45k USD = 4.95M JPY ほど。まぁ五百万円以下で攻略できてしまうわけですな。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/draft-ietf-openpgp-rfc4880bis/&#34; title=&#34;draft-ietf-openpgp-rfc4880bis - OpenPGP Message Format&#34;&gt;RFC 4880bis&lt;/a&gt; では SHA-1 は “SHOULD NOT create messages” となる。&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2.18 以降では，これが前倒しで実装されたわけだ。ちなみに &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2 系では MD5 は既にサポートされていない（1.4 系があるため）。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>GnuPG 2.2.18 リリース： さようなら SHA-1</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2019/11/gnupg-2_2_18-is-released/" />
		<id>tag:text.Baldanders.info,2019-11-26:/release/2019/11/gnupg-2_2_18-is-released/</id>
		<published>2019-11-26T13:12:19+00:00</published>
		<updated>2020-09-18T01:51:57+00:00</updated>
		<summary>2019-01-19 以降に鍵に付与された SHA-1 ベースの電子署名を全て削除する（CVE-2019-14855）。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2.18 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2019q4/000442.html&#34;&gt;[Announce] GnuPG 2.2.18 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は（&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 自体には）脆弱性もなく通常のメンテナンス・リリースなのだが，ひとつ大きな修正というか対策があって&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;This release also retires the use of SHA-1 key signatures created since this year.&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2019q4/000442.html&#34;&gt;GnuPG 2.2.18 released&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;らしい。
厳密には 2019-01-19 以降に鍵に付与された SHA-1 ベースの電子署名を全て削除するというもの（&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2019-14855&#34;&gt;CVE-2019-14855&lt;/a&gt;）。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2020-09-18 追記】&lt;/strong&gt;
&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2019-14855&#34;&gt;CVE-2019-14855&lt;/a&gt; の CVSS 評価は以下の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;深刻度: 重要 (7.5)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基本評価基準&lt;/th&gt;
&lt;th&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;攻撃元区分&lt;/td&gt;
&lt;td&gt;ネットワーク&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;攻撃条件の複雑さ&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;必要な特権レベル&lt;/td&gt;
&lt;td&gt;不要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ユーザ関与レベル&lt;/td&gt;
&lt;td&gt;不要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;スコープ&lt;/td&gt;
&lt;td&gt;変更なし&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;機密性への影響&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;完全性への影響&lt;/td&gt;
&lt;td&gt;なし&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可用性への影響&lt;/td&gt;
&lt;td&gt;なし&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ただし Red Hat はもう少し低めに見積もっているようで&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;深刻度: 警告 (5.3)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基本評価基準&lt;/th&gt;
&lt;th&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;攻撃元区分&lt;/td&gt;
&lt;td&gt;ネットワーク&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;攻撃条件の複雑さ&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;必要な特権レベル&lt;/td&gt;
&lt;td&gt;不要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ユーザ関与レベル&lt;/td&gt;
&lt;td&gt;要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;スコープ&lt;/td&gt;
&lt;td&gt;変更なし&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;機密性への影響&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;完全性への影響&lt;/td&gt;
&lt;td&gt;なし&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可用性への影響&lt;/td&gt;
&lt;td&gt;なし&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;としている。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;とはいえ，ずいぶん前から &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; が生成する電子署名は SHA2-256 ベースが既定なので影響は限定的だと思うが&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;， &lt;strong&gt;わざわざ&lt;/strong&gt; SHA-1 ベースの電子署名を鍵に付与している方はご注意を。&lt;/p&gt;
&lt;p&gt;一応 &lt;code&gt;--allow-weak-key-signatues&lt;/code&gt; オプションを付けることで今回の措置を回避できるようだが，腹を括ったほうがいいだろう。
なお，鍵への電子署名にどのようなアルゴリズムが使われているかを調べるために拙作の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; を宣伝しておく（笑）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/gpgpdump/&#34;&gt;OpenPGP パケットを可視化する gpgpdump&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例えば，こんな感じで鍵を取り出して調べることができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gpg -a --export alice@example.com | gpgpdump
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;その他，詳細はこちら。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;gpg: Changed the way keys are detected on a smartcards; this allows the use of non-OpenPGP cards.  In the case of a not very likely regression the new option &lt;code&gt;--use-only-openpgp-card&lt;/code&gt; is available.  [#4681]&lt;/li&gt;
&lt;li&gt;gpg: The commands &lt;code&gt;--full-gen-key&lt;/code&gt; and &lt;code&gt;--quick-gen-key&lt;/code&gt; now allow direct key generation from supported cards.  [#4681]&lt;/li&gt;
&lt;li&gt;gpg: Prepare against chosen-prefix SHA-1 collisions in key signatures.  This change removes all SHA-1 based key signature newer than 2019-01-19 from the web-of-trust.  Note that this includes all key signature created with dsa1024 keys.  The new option &lt;code&gt;--allow-weak-key-signatues&lt;/code&gt; can be used to override the new and safer behaviour.  [#4755,CVE-2019-14855]&lt;/li&gt;
&lt;li&gt;gpg: Improve performance for import of large keyblocks.  [#4592]&lt;/li&gt;
&lt;li&gt;gpg: Implement a keybox compression run.  [#4644]&lt;/li&gt;
&lt;li&gt;gpg: Show warnings from dirmngr about redirect and certificate problems (details require &lt;code&gt;--verbose&lt;/code&gt; as usual).&lt;/li&gt;
&lt;li&gt;gpg: Allow to pass the empty string for the passphrase if the &amp;lsquo;&lt;code&gt;--passphase=&lt;/code&gt;&amp;rsquo; syntax is used.  [#4633]&lt;/li&gt;
&lt;li&gt;gpg: Fix printing of the KDF object attributes.&lt;/li&gt;
&lt;li&gt;gpg: Avoid surprises with &lt;code&gt;--locate-external-key&lt;/code&gt; and certain &lt;code&gt;--auto-key-locate&lt;/code&gt; settings.  [#4662]&lt;/li&gt;
&lt;li&gt;gpg: Improve selection of best matching key.  [#4713]&lt;/li&gt;
&lt;li&gt;gpg: Delete key binding signature when deletring a subkey.  [#4665,#4457]&lt;/li&gt;
&lt;li&gt;gpg: Fix a potential loss of key sigantures during import with &lt;code&gt;self-sigs-only&lt;/code&gt; active.  [#4628]&lt;/li&gt;
&lt;li&gt;gpg: Silence &amp;ldquo;marked as ultimately trusted&amp;rdquo; diagnostics if option &lt;code&gt;--quiet&lt;/code&gt; is used.  [#4634]&lt;/li&gt;
&lt;li&gt;gpg: Silence some diagnostics during in key listsing even with option &lt;code&gt;--verbose&lt;/code&gt;.  [#4627]&lt;/li&gt;
&lt;li&gt;gpg, gpgsm: Change parsing of agent&amp;rsquo;s pkdecrypt results.  [#4652]&lt;/li&gt;
&lt;li&gt;gpgsm: Support AES-256 keys.&lt;/li&gt;
&lt;li&gt;gpgsm: Fix a bug in triggering a keybox compression run if &lt;code&gt;--faked-system-time&lt;/code&gt; is used.&lt;/li&gt;
&lt;li&gt;dirmngr: System CA certificates are no longer used for the SKS pool if GNUTLS instead of NTBTLS is used as TLS library.  [#4594]&lt;/li&gt;
&lt;li&gt;dirmngr: On Windows detect usability of IPv4 and IPv6 interfaces to avoid long timeouts.  [#4165]&lt;/li&gt;
&lt;li&gt;scd: Fix BWI value for APDU level transfers to make Gemalto Ezio Shield and Trustica Cryptoucan work.  [#4654,#4566]&lt;/li&gt;
&lt;li&gt;wkd: gpg-wks-client &lt;code&gt;--install-key&lt;/code&gt; now installs the required policy file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Release-info: &lt;a href=&#34;https://dev.gnupg.org/T4684&#34;&gt;https://dev.gnupg.org/T4684&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2019q4/000442.html&#34;&gt;GnuPG 2.2.18 released&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;アップデートは計画的に。&lt;/p&gt;
&lt;h2&gt;【2020-09-18 追記】 &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 18.04 LTS にてバックポート・パッチのリリースあり&lt;/h2&gt;
&lt;p&gt;LTS 版 &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 18.04 にて &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2019-14855&#34;&gt;CVE-2019-14855&lt;/a&gt; に対応したバックポートパッチが出ている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ubuntu.com/security/notices/USN-4516-1&#34;&gt;USN-4516-1: GnuPG vulnerability | Ubuntu security notices | Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今更どういうつもりなのか。
いや，まぁ，出るだけマシだけど。&lt;/p&gt;
&lt;p&gt;ちなみに現時点で LTS 最新版である 20.04 では 2.2.19 が提供されている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gpg --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gpg (GnuPG) 2.2.19
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;libgcrypt 1.8.5
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Copyright (C) 2019 Free Software Foundation, Inc.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;This is free software: you are free to change and redistribute it.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;There is NO WARRANTY, to the extent permitted by law.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Home: /home/username/.gnupg
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;サポートしているアルゴリズム:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;現時点の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 最新は 2.2.23 だけどね（笑）&lt;/p&gt;
&lt;p&gt;しかし &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; の足の遅さは何とかならないのかねぇ。
APT でも使う中核部品だろうに。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mailarchive.ietf.org/arch/msg/openpgp/h-6vCMDFFKhVXpXLC6gAt9tK7r8&#34;&gt;&amp;ldquo;SHA-1 is a Shambles&amp;rdquo; and forging PGP WoT signatures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/algorithms-for-openpgp/&#34;&gt;OpenPGP で利用可能なアルゴリズム（RFC 4880bis 対応版）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2015/problem-of-sha1-collision/&#34;&gt;SHA-1 衝突問題： 廃止の前倒し&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/02/sha-1-collision/&#34;&gt;最初の SHA-1 衝突例&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/01/sayonara-sha-1/&#34;&gt;（何度目かの）さようなら SHA-1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;ちなみに私が&lt;a href=&#34;https://baldanders.info/pubkeys/&#34; title=&#34;OpenPGP 公開鍵リスト&#34;&gt;普段遣いしている鍵&lt;/a&gt;は2013年に作ったものだが， SHA2-256 ベースの電子署名が付与されている。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>Hash 値を計算するパッケージを作ってみた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/calculating-hash-value/" />
		<id>tag:text.Baldanders.info,2017-10-31:/golang/calculating-hash-value/</id>
		<published>2017-10-31T05:31:04+00:00</published>
		<updated>2024-05-10T22:02:32+00:00</updated>
		<summary>Windows で hash 値を計算するいい感じのツールがないので，もう自分で作っちゃったよ。といっても自前の部分は殆どないけどね。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;Windows で hash 値を計算するいい感じのツールがない&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; ので，もう自分で作っちゃったよ。
といっても自前の部分は殆どないけどね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/hash&#34;&gt;spiegel-im-spiegel/hash: Calculating Hash Value&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;詳しくは &lt;a href=&#34;https://github.com/spiegel-im-spiegel/hash/blob/master/README.md&#34; title=&#34;hash/README.md at master · spiegel-im-spiegel/hash&#34;&gt;README.md&lt;/a&gt; を見ていただくとして，実際に計算をするのはこの関数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;crypto&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/pkg/errors&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//ErrNoImplement is error &amp;#34;no implementation&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;ErrNoImplement&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;no implementation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//Value returns hash value string from io.Reader
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alg&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;crypto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ErrNoImplement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;error &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;algoString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;alg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;呼び出し側はこんな感じ（空文字列の SHA1 値を取得する場合）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;crypto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SHA1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%x\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Output:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// da39a3ee5e6b4b0d3255bfef95601890afd80709
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/crypto/&#34; title=&#34;crypto - The Go Programming Language&#34;&gt;&lt;code&gt;crypto&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Hash.New()&lt;/code&gt; 関数で &lt;a href=&#34;https://golang.org/pkg/hash/&#34; title=&#34;hash - The Go Programming Language&#34;&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Hash&lt;/code&gt; のインスタンスを生成している。
&lt;a href=&#34;https://golang.org/pkg/hash/&#34; title=&#34;hash - The Go Programming Language&#34;&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Hash&lt;/code&gt; はこんな感じの &lt;a href=&#34;https://go.dev/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; 型である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Hash is the common interface implemented by all hash functions.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Hash&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Write (via the embedded io.Writer interface) adds more data to the running hash.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// It never returns an error.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Sum appends the current hash to b and returns the resulting slice.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// It does not change the underlying hash state.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;Sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Reset resets the Hash to its initial state.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;Reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Size returns the number of bytes Sum will return.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;Size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// BlockSize returns the hash&amp;#39;s underlying block size.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// The Write method must be able to accept any amount
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// of data, but it may operate more efficiently if all writes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// are a multiple of the block size.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;BlockSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;つまり，このインタフェースを備えていれば自前の hash アルゴリズムを簡単に組み込むことができるわけだ。
言い方を変えると， &lt;code&gt;hash.Value()&lt;/code&gt; 関数で実際に hash 値を計算するにはこのパッケージだけではダメで， hash アルゴリズムを実装するパッケージをインポートする必要がある。&lt;/p&gt;
&lt;p&gt;以下にアルゴリズム毎に必要なパッケージを示す。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;hash algorithm&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;import package&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.MD4&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;golang.org/x/crypto/md4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.MD5&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto/md5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.SHA1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto/sha1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.SHA224&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto/sha256&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.SHA256&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto/sha256&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.SHA384&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto/sha512&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.SHA512&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto/sha512&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.SHA512_224&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto/sha512&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.SHA512_256&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto/sha512&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.RIPEMD160&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;golang.org/x/crypto/ripemd160&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.SHA3_224&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;golang.org/x/crypto/sha3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.SHA3_256&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;golang.org/x/crypto/sha3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.SHA3_384&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;golang.org/x/crypto/sha3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.SHA3_512&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;golang.org/x/crypto/sha3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.BLAKE2s_256&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;golang.org/x/crypto/blake2s&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.BLAKE2b_256&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;golang.org/x/crypto/blake2b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.BLAKE2b_384&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;golang.org/x/crypto/blake2b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;crypto.BLAKE2b_512&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;golang.org/x/crypto/blake2b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;この中から必要なパッケージを &lt;code&gt;main&lt;/code&gt; パッケージでブランク・インポートする&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
全部インポートするならこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;crypto/md5&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;crypto/sha1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;crypto/sha256&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;crypto/sha512&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;golang.org/x/crypto/blake2b&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;golang.org/x/crypto/blake2s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;golang.org/x/crypto/md4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;golang.org/x/crypto/ripemd160&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;golang.org/x/crypto/sha3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これを CLI (Command-Line Interface) にしたのが以下に示す hash コマンドである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hash -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Usage:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  hash [flags] [binary file]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Flags:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -a, --algo string      hash algorithm (default &amp;#34;sha256&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -c, --compare string   compare hash value
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -h, --help             help for hash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;サイズがゼロの空ファイル &lt;code&gt;empty.txt&lt;/code&gt; を作って試してみると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hash -a sha1 empty.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;da39a3ee5e6b4b0d3255bfef95601890afd80709
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;となる。
パイプにも対応してるので&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cat empty.txt | hash -a sha1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;da39a3ee5e6b4b0d3255bfef95601890afd80709
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすることもできる。
さらに &lt;code&gt;-c&lt;/code&gt; オプションで hash 値の計算結果をリファレンスの値と比較できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hash -a sha1 empty.txt -c da39a3ee5e6b4b0d3255bfef95601890afd80709
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;matched
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なお，アルゴリズムには &lt;code&gt;md4&lt;/code&gt;, &lt;code&gt;md5&lt;/code&gt;, &lt;code&gt;sha1&lt;/code&gt;, &lt;code&gt;sha224&lt;/code&gt;, &lt;code&gt;sha256&lt;/code&gt;, &lt;code&gt;sha384&lt;/code&gt;, &lt;code&gt;sha512&lt;/code&gt;, &lt;code&gt;sha512/224&lt;/code&gt;, &lt;code&gt;sha512/256&lt;/code&gt;, &lt;code&gt;ripemd160&lt;/code&gt;, &lt;code&gt;sha3-224&lt;/code&gt;, &lt;code&gt;sha3-256&lt;/code&gt;, &lt;code&gt;sha3-384&lt;/code&gt;, &lt;code&gt;sha3-512&lt;/code&gt;, &lt;code&gt;blake2s&lt;/code&gt;, &lt;code&gt;blake2b/256&lt;/code&gt;, &lt;code&gt;blake2b/384&lt;/code&gt;, &lt;code&gt;blake2b/512&lt;/code&gt; を指定できるようにした。
既定は &lt;code&gt;sha256&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例えば，これで &lt;a href=&#34;https://github.com/golang/dep&#34; title=&#34;golang/dep: Go dependency management tool&#34;&gt;dep&lt;/a&gt; の実行モジュールの正当性確認が少し楽になる。
&lt;a href=&#34;https://github.com/golang/dep&#34; title=&#34;golang/dep: Go dependency management tool&#34;&gt;dep&lt;/a&gt; の&lt;a href=&#34;https://github.com/golang/dep/releases/latest&#34;&gt;リリースページ&lt;/a&gt;で Windows 用の実行モジュールと SHA256 値を記述したファイルをダウンロードする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dep-windows-amd64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dep-windows-amd64.sha256&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;dep-windows-amd64.sha256&lt;/code&gt; の中身が&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;034f8cf6c225fde51aa025376df12450832f111b39050a7ec451a9ec2ce2cb54  release/dep-windows-amd64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とするなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hash dep-windows-amd64 -c 034f8cf6c225fde51aa025376df12450832f111b39050a7ec451a9ec2ce2cb54
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;matched
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で一発確認できる。
確認できたら &lt;code&gt;dep-windows-amd64&lt;/code&gt; を &lt;code&gt;dep.exe&lt;/code&gt; にリネームして使えばよい。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/consider-switching-from-glide-to-dep/&#34;&gt;Glide から Dep への移行を検討する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Windows 標準ツールとしては， PowerShell 4.0 以上が入っている PC なら， &lt;code&gt;Get-FileHash&lt;/code&gt; コマンドレットが使える。 Windows 7 の場合は “&lt;a href=&#34;https://www.microsoft.com/ja-jp/download/details.aspx?id=40855&#34;&gt;Windows Management Framework 4.0&lt;/a&gt;” をインストールすることで PowerShell 4.0 にアップグレードできる。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;ブランク・インポートは &lt;code&gt;main&lt;/code&gt; パッケージでしないと &lt;a href=&#34;https://github.com/golang/lint&#34; title=&#34;golang/lint: This is a linter for Go source code.&#34;&gt;golint&lt;/a&gt; に怒られるのよ。まぁ言いたいことは分かるけど。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>暗号鍵関連の各種変数について</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2017/10/key-parameters/" />
		<id>tag:text.Baldanders.info,2017-10-17:/remark/2017/10/key-parameters/</id>
		<published>2017-10-17T07:32:03+00:00</published>
		<updated>2020-06-07T02:09:49+00:00</updated>
		<summary>この記事は将来の記事で再利用するための snippet 置き場として使うことにする。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;「&lt;a href=&#34;https://qiita.com/darai0512/items/c7b47d1b3fe06c4dea7d&#34;&gt;ECDSA鍵をGitHubで使う方法&lt;/a&gt;」で SP 800-57 第一部が Rev.4 になってるのを見て一瞬「ふぁ！」となったが，よく考えたら今年始めに書いた「&lt;a href=&#34;https://text.baldanders.info/remark/2017/02/sha-1-collision/&#34;&gt;最初の SHA-1 衝突例&lt;/a&gt;」では既に Rev.4 を参照していたのだった。
でも古い記事を見返したら結構 Rev.3 のままになってるので，このさい全部アップデートすることにした。&lt;/p&gt;
&lt;p&gt;この記事は将来の記事で再利用するための snippet 置き場として使うことにする。
表のレイアウトの関係で携帯端末で見ている人は見づらいかもしれないけど，そこはご容赦。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;strong&gt;【2020-06-07】&lt;/strong&gt; SP 800-57 第一部 の Rev.5 の最終版がリリースされていたので，以降 Rev.5 をベースに書き換えた。&lt;/div&gt;
&lt;h2&gt;参照資料&lt;/h2&gt;
&lt;p&gt;ここで参照する資料は，米国 &lt;a href=&#34;https://www.nist.gov/&#34; title=&#34;National Institute of Standards and Technology | NIST&#34;&gt;NIST&lt;/a&gt; の Special Publication (SP) 800-57 Part 1 で正式タイトルは「Recommendation for Key Management Part 1: General （鍵管理における推奨事項 第一部：一般事項）」となっている（日本語訳は IPA によるもの）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-5/final&#34;&gt;SP 800-57 Part 1 Rev. 5, Recommendation for Key Management: Part 1 – General | CSRC&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://doi.org/10.6028/NIST.SP.800-57pt1r5&#34;&gt;NIST Special Publication 800-57 Part 1; Revision 5; Recommendation for Key Management Part 1: General &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお，ひとつ前の &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-4/final&#34; title=&#34;SP 800-57 Part 1 Rev. 4 Recommendation for Key Management, Part 1: General&#34;&gt;Rev.4&lt;/a&gt; については &lt;span&gt;&lt;a href=&#34;https://www.ipa.go.jp/files/000055490.pdf&#34;&gt;IPA による日本語訳 &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; があるので参考にどうぞ。&lt;/p&gt;
&lt;h2&gt;セキュリティ強度と鍵長の関係&lt;/h2&gt;
&lt;p&gt;最初はセキュリティ強度と鍵長の関係を示す表。
単位は全てビットである。&lt;/p&gt;
&lt;p&gt;&lt;figure lang=&#34;en&#34;&gt;
&lt;style&gt;
main table.nist2 th  {
  vertical-align:middle;
  text-align: center;
}
main table.nist2 td  {
  vertical-align:middle;
  text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;nist2&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Security&lt;br&gt;Strength&lt;/th&gt;
&lt;th&gt;Symmetric&lt;br&gt; key&lt;br&gt; algorithms&lt;/th&gt;
&lt;th&gt;FFC&lt;br&gt;(DSA, DH,&lt;br&gt;MQV)&lt;/th&gt;
&lt;th&gt;IFC&lt;br&gt;(RSA)&lt;/th&gt;
&lt;th&gt;ECC&lt;br&gt;(ECDSA,&lt;br&gt;EdDSA, DH,&lt;br&gt;MQV)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt; $\le 80$ &lt;/td&gt;&lt;td&gt;2TDEA&lt;/td&gt;&lt;td&gt; $L=1024$ &lt;br&gt; $N=160$ &lt;/td&gt;&lt;td&gt; $k=1024$ &lt;/td&gt; &lt;td&gt; $f = 160\text{ - }223$ &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; $112$ &lt;/td&gt;&lt;td&gt;3TDEA&lt;/td&gt;&lt;td&gt; $L=2048$ &lt;br&gt; $N=224$ &lt;/td&gt;&lt;td&gt;$k=2048$&lt;/td&gt; &lt;td&gt;$f = 224\text{ - }255$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; $128$ &lt;/td&gt;&lt;td&gt;AES-128&lt;/td&gt;&lt;td&gt; $L=3072$ &lt;br&gt; $N=256$ &lt;/td&gt;&lt;td&gt;$k=3072$&lt;/td&gt; &lt;td&gt;$f = 256\text{ - }383$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; $192$ &lt;/td&gt;&lt;td&gt;AES-192&lt;/td&gt;&lt;td&gt; $L=7680$ &lt;br&gt; $N=384$ &lt;/td&gt;&lt;td&gt;$k=7680$&lt;/td&gt; &lt;td&gt;$f = 384\text{ - }511$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt; $256$ &lt;/td&gt;&lt;td&gt;AES-256&lt;/td&gt;&lt;td&gt; $L=15360$ &lt;br&gt; $N=512$ &lt;/td&gt;&lt;td&gt;$k=15360$&lt;/td&gt;&lt;td&gt;$f=512+$&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;div&gt;Comparable security strengths of symmetric block cipher and asymmetric-key algorithms (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r5&#39;&gt;SP 800-57 Part 1 Revision 5 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 5.6.1.1)&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt; &lt;!-- 要 MathJax --&gt;&lt;/p&gt;
&lt;p&gt;Symmetric key algorithms は共通鍵暗号アルゴリズム全般を指す。
たとえば AES とか。
IFC (Integer Factorization Cryptosystems) は素因数分解問題ベースの公開鍵暗号アルゴリズムで RSA がこれに該当する。
FFC (Finite Field Cryptosystems) は離散対数問題ベースの公開鍵暗号アルゴリズムで Diffie-Hellman や ElGamal, DSA などがこれに該当する。
ECC (Elliptic Curve Cryptosystems) は離散対数問題でも特に楕円曲線上の離散対数問題ベースの公開鍵暗号アルゴリズムを指す。
たとえば ECDH や ECDSA など。&lt;/p&gt;
&lt;p&gt;IFC では $k$，FFC では $L$，ECC では $f$ が鍵長を示す。
たとえばセキュリティ強度が128ビットなら&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AES 128bit&lt;/li&gt;
&lt;li&gt;ElGamal, DSA 3072bit&lt;/li&gt;
&lt;li&gt;RSA 3072bit&lt;/li&gt;
&lt;li&gt;ECDH, ECDSA 256bit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の組み合わせで「&lt;a href=&#34;https://dic.pixiv.net/a/%E3%83%93%E3%83%AB%E3%83%89%E3%83%89%E3%83%A9%E3%82%A4%E3%83%90%E3%83%BC&#34;&gt;ベストマッチ&lt;/a&gt; キター！」となる。&lt;/p&gt;
&lt;h2&gt;セキュリティ強度と Hash 関数の関係&lt;/h2&gt;
&lt;p&gt;次はセキュリティ強度とHash 関数の関係を示す表。&lt;/p&gt;
&lt;p&gt;&lt;figure lang=&#39;en&#39;&gt;
&lt;style&gt;
main table.nist3 th  {
  vertical-align:middle;
  text-align: center;
}
main table.nist3 td  {
   
  text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;nist3&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Security &lt;br&gt;Strength&lt;/th&gt;
&lt;th&gt;Digital Signatures and Other&lt;br&gt;Applications Requiring Collision&lt;br&gt;Resistance&lt;/th&gt;
&lt;th&gt;HMAC, KMAC,&lt;br&gt;Key Derivation Functions,&lt;br&gt;Random Bit Generation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; $\le 8$0&lt;/td&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$112$&lt;/td&gt;
&lt;td&gt;SHA-224, SHA-512/224, SHA3-224&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$128$&lt;/td&gt;
&lt;td&gt;SHA-256, SHA-512/256, SHA3-256&lt;/td&gt;
&lt;td&gt;SHA-1, KMAC128&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$192$&lt;/td&gt;
&lt;td&gt;SHA-384, SHA3-384&lt;/td&gt;
&lt;td&gt;SHA-224, SHA-512/224, SHA3-224&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$\ge 256$&lt;/td&gt;
&lt;td&gt;SHA-512, SHA3-512&lt;/td&gt;
&lt;td&gt;SHA-256, SHA-512/256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, KMAC256&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;div&gt;Maximum security strengths for hash and hash-based functions (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r5&#39;&gt;SP 800-57 Part 1 Revision 5 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 5.6.1.2)&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt; &lt;!-- 要 MathJax --&gt;&lt;/p&gt;
&lt;p&gt;考え方は先程の暗号鍵長のときと同じ。
ただし Hash 関数の場合は使用目的ごとに要求されるアルゴリズムが異なるので注意が必要である。&lt;/p&gt;
&lt;h2&gt;セキュリティ強度と有効期限&lt;/h2&gt;
&lt;p&gt;こちらはセキュリティ強度の有効期限を表したものだ。&lt;/p&gt;
&lt;p&gt;&lt;figure lang=&#39;en&#39;&gt;
&lt;style&gt;
main table.nist4 th  {
  vertical-align:middle;
  text-align: center;
}
main table.nist4 td  {
  vertical-align:middle;
  text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;nist4&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&#39;2&#39;&gt;Security Strength&lt;/th&gt;
&lt;th&gt;Through&lt;br&gt; 2030&lt;/th&gt;
&lt;th&gt;2031 and&lt;br&gt; Beyond&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td rowspan=&#39;2&#39;&gt;$\lt 112$&lt;/td&gt;&lt;td&gt;Applying&lt;/td&gt;                       &lt;td colspan=&#39;2&#39;&gt;Disallowed&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;                              &lt;td&gt;Processing&lt;/td&gt;                     &lt;td colspan=&#39;2&#39;&gt;Legacy use&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan=&#39;2&#39;&gt;$112$&lt;/td&gt;    &lt;td&gt;Applying&lt;/td&gt;                       &lt;td rowspan=&#39;2&#39;&gt;Acceptable&lt;/td&gt;&lt;td&gt;Disallowed&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;                              &lt;td&gt;Processing&lt;/td&gt;                                                    &lt;td&gt;Legacy use&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$128$&lt;/td&gt;                &lt;td rowspan=&#39;3&#39;&gt;Applying/Processing&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$192$&lt;/td&gt;                                                        &lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$256$&lt;/td&gt;                                                        &lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;div&gt;Security-strength time frames (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r5&#39;&gt;SP 800-57 Part 1 Revision 5 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 5.6.3)&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt; &lt;!-- 要 MathJax --&gt;&lt;/p&gt;
&lt;p&gt;各用語はそれぞれ&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;用語&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Applying&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;適用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Processing&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;処理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Acceptable&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;許容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Legacy use&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;許容（レガシー使用のみ）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Disallowed&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;禁止&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;という意味だ。
例を挙げると，セキュリティ強度112ビットの暗号スイート（Cipher Suites）を適用する場合は2030年までは許容するけど2031年以降は禁止。
すでに暗号化されているデータを復号したい場合でも2031年以降はレガシー・システムしか許容しない，ということになる。&lt;/p&gt;
&lt;p&gt;たとえば ssh 認証は「適用」なので，いまだ多くの人が使ってる（かもしれない） RSA 2048ビットの鍵は2031年以降は使用禁止となるわけだ。
まぁ，そんな先まで同じシステムで同じ鍵を使い続けるかどうかは分からないが（なので今使ってる鍵を慌てて新調する必要はない。新規に作成するなら128ビット強度の鍵をお勧めするが）。&lt;/p&gt;
&lt;p&gt;なお，これは各アルゴリズムに危殆化要因となる脆弱性等がない場合の話である。
したがって暗号製品を使うシステムの管理者やセキュリティ管理者は常に暗号関係のトピックに耳を澄ませておくべきであろう。&lt;/p&gt;
&lt;h2&gt;OpenPGP で利用可能なアルゴリズム&lt;/h2&gt;
&lt;p&gt;この項は「&lt;a href=&#34;https://text.baldanders.info/openpgp/algorithms-for-openpgp/&#34;&gt;OpenPGP で利用可能なアルゴリズム&lt;/a&gt;」に移動した。&lt;/p&gt;
&lt;h2&gt;パスワードの強度&lt;/h2&gt;
&lt;p&gt;これは &lt;a href=&#34;https://www.nist.gov/&#34; title=&#34;National Institute of Standards and Technology | NIST&#34;&gt;NIST&lt;/a&gt; ではなく IPA の資料だが，文字種と文字数の組み合わせによるパスワードの強度についても上げておこう。
出典は以下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ipg/documents/dev_setting_crypt.html&#34;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://www.ipa.go.jp/files/000026760.pdf&#34;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&#39;4&#39;&gt;利用する文字種類数と内訳&lt;/th&gt;
&lt;th colspan=&#39;4&#39;&gt;パスワード長&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;種類数&lt;/th&gt;
&lt;th&gt;数字&lt;/th&gt;
&lt;th&gt;文字&lt;/th&gt;
&lt;th&gt;シンボル&lt;/th&gt;
&lt;th&gt;4文字&lt;/th&gt;
&lt;th&gt;8文字&lt;/th&gt;
&lt;th&gt;12文字&lt;/th&gt;
&lt;th&gt;16文字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;10種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満&lt;br&gt;（$2^{13.3}$）&lt;/td&gt;&lt;td&gt;1円未満&lt;br&gt;（$2^{26.6}$）&lt;/td&gt;&lt;td&gt;約35円&lt;br&gt;（$2^{39.9}$）&lt;/td&gt;&lt;td&gt;約35万円&lt;br&gt;（$2^{53.2}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;36種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満&lt;br&gt;（$2^{20.7}$）&lt;/td&gt;&lt;td&gt;約100円&lt;br&gt;（$2^{41.4}$）&lt;/td&gt;&lt;td&gt;約1.65億円&lt;br&gt;（$2^{62.0}$）&lt;/td&gt;&lt;td&gt;約276兆円&lt;br&gt;（$2^{82.7}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;62種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満&lt;br&gt;（$2^{23.8}$）&lt;/td&gt;&lt;td&gt;約7,500円&lt;br&gt;（$2^{47.6}$）&lt;/td&gt;&lt;td&gt;約1,120億円&lt;br&gt;（$2^{71.5}$）&lt;/td&gt;&lt;td&gt;約165京円&lt;br&gt;（$2^{95.3}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;94種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;
	&lt;td&gt;&lt;code style=&#39;font-size:smaller;&#39;&gt;! &#34; # $ %&lt;br&gt;&amp;amp; &#39; ( ) =&lt;br&gt;~ | - ^ `&lt;br&gt;¥ { @ [&lt;br&gt;+ * ] ; :&lt;br&gt;} &amp;lt; &amp;gt; ? _&lt;br&gt;, . /&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;1円未満&lt;br&gt;（$2^{26.2}$）&lt;/td&gt;&lt;td&gt;約21万円&lt;br&gt;（$2^{52.4}$）&lt;/td&gt;&lt;td&gt;約16.5兆円&lt;br&gt;（$2^{78.7}$）&lt;/td&gt;&lt;br&gt;&lt;td&gt;約129,000京円&lt;br&gt;（$2^{104.9}$）&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;div&gt;パスワード解読の想定コスト例（&lt;q&gt;&lt;a href=&#39;https://www.ipa.go.jp/files/000026760.pdf&#39;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 2.4.2.2項より）&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt; &lt;!-- 要 MathJax --&gt;&lt;/p&gt;
&lt;p&gt;測定基準は以下の通り。&lt;/p&gt;
&lt;div&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;利用できる文字種類すべてを完全にランダムに選択して作ったパスワードを一つ一つ調べる全数探索により1日で解読しようとした際にかかるおおまかな想定攻撃コストを示しています。ここでは、全数探索(暗号鍵の総数256)でDES10を1日で解読するためのコストを約250万円と仮定します。また、パスワードを1つ検査するのとDESの暗号鍵を1つ検査するコストは同じであるとし、パスワードを求めるのに必要な計算量(検査する個数)が半分になればコストも半分、2倍になればコストも2倍になるものとしています。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#39;https://www.ipa.go.jp/files/000026760.pdf&#39;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 2.4.2.2項より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://baldanders.info/blog/000740/&#34;&gt;CRYPTREC Report 2013 — Baldanders.info&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://baldanders.info/blog/000810/&#34;&gt;Prohibiting RC4 — Baldanders.info&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cryptrec.go.jp/topics/cryptrec_20151218_sha1_cryptanalysis.html&#34;&gt;CRYPTREC | SHA-1の安全性について&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.cryptrec.go.jp/report/c13_tech_guideline_SHA-1_web.pdf&#34;&gt;CRYPTREC暗号技術ガイドライン(SHA-1) &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.visvirial.com/articles/519&#34;&gt;scryptがGPUに破られる時 | びりあるの研究ノート&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/02/sha-1-collision/&#34;&gt;最初の SHA-1 衝突例&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/10/changes-in-password-best-practices/&#34;&gt;「パスワードのベストプラクティス」が変わる&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
</content>
	</entry><entry>
		<title>最初の SHA-1 衝突例</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2017/02/sha-1-collision/" />
		<id>tag:text.Baldanders.info,2017-02-25:/remark/2017/02/sha-1-collision/</id>
		<published>2017-02-25T03:38:07+00:00</published>
		<updated>2020-06-07T02:09:49+00:00</updated>
		<summary>もうみんな SHA-1 とはオサラバしてるよね（笑）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;いやぁ，ついにこの日が来たようです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html&#34;&gt;Google Online Security Blog: Announcing the first SHA1 collision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shattered.it/&#34;&gt;SHAttered&lt;/a&gt; : SHA-1 の衝突例&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2017/02/sha-1_collision.html&#34;&gt;SHA-1 Collision Found - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1702/24/news067.html&#34;&gt;SHA-1衝突攻撃がついに現実に、Google発表　90日後にコード公開 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.mozilla.org/security/2017/02/23/the-end-of-sha-1-on-the-public-web/&#34;&gt;The end of SHA-1 on the Public Web | Mozilla Security Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35097102/&#34;&gt;グーグル、SHA-1衝突攻撃に成功&amp;ndash;同一ハッシュ値の2つのPDFも公開 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mailarchive.ietf.org/arch/msg/openpgp/AjJ3BHzd2c9K2KQ3DTk9Ry_QVYM&#34;&gt;Re: [openpgp] SHA1 collision found&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mailarchive.ietf.org/arch/msg/openpgp/_uV_coJ0CYayv_2ptJMuSraJhws&#34;&gt;[openpgp] V5 Fingerprint again&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/herumi/googlesha1&#34;&gt;GoogleのSHA-1のはなし&lt;/a&gt; : 分かりやすい解説&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/2338-sha-1-collision-detection-on-github-com&#34;&gt;SHA-1 collision detection on GitHub.com&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/1050486.html&#34;&gt;GitHub Enterprise、SHA-1衝突を実行不能にするパッチを適用へ -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;This is not a surprise. We&#39;ve all expected this for over a decade, watching computing power increase. This is why NIST standardized SHA-3 in 2012.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2017/02/sha-1_collision.html&#34;&gt;SHA-1 Collision Found&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;SHA-1 衝突問題については以下を参照のこと。
NIST などでは2014年以降 SHA-1 を電子署名等に使わないよう勧告している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2015/problem-of-sha1-collision/&#34;&gt;SHA-1 衝突問題： 廃止の前倒し&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cryptrec.go.jp/topics/cryptrec_20151218_sha1_cryptanalysis.html&#34;&gt;CRYPTREC | SHA-1の安全性について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現時点で主要な CA では証明書に SHA-1 は使っていないはずである。
また，主要なブラウザについても SHA-1 を使う証明書に対して警告を発するようになっている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.technet.microsoft.com/jpsecurity/2016/11/25/sha1countdown/&#34;&gt;SHA-1 ウェブサーバー証明書は 2017 年２月から警告！ウェブサイト管理者は影響の最終確認を – 日本のセキュリティチーム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://forest.watch.impress.co.jp/docs/serial/yajiuma/1041798.html&#34;&gt;「Google Chrome」の閲覧画面にエラーが！ ～“https://”のサイトにアクセスできない - やじうまの杜 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もうみんな SHA-1 とはオサラバしてるよね（笑）&lt;/p&gt;
&lt;h2&gt;追記というか補足&lt;/h2&gt;
&lt;p&gt;たとえば git の commit hash 値は SHA-1 で付与されるが大丈夫なのか？ とかいった意見が散見されるが，当面は問題ない。&lt;/p&gt;
&lt;p&gt;今回の件はあくまでも電子署名や hash 値そのものを何かの証明に使おうとする場合に問題となる。
git の commit hash 値はあくまで identity として付与されるものである。
改ざんされたかどうかは commit hash 値ではなく差分情報によって容易に知ることができる。&lt;/p&gt;
&lt;p&gt;git による悪意のなりすまし等を警戒する必要があるのなら commit hash 値を気にするのではなく commit にきちんと電子署名を行うことをお勧めする（チームで作業する人は是非習慣化するべきである）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/04/git-commit-with-openpgp-signature/&#34;&gt;Git Commit で OpenPGP 署名を行う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし，かつて標準として使われていた MD5 が危殆化とともに廃れていったように，今後 SHA-1 は電子署名以外でも使われなくなると思われる。
念のため， NIST による現在の SHA アルゴリズムの評価と有効期限を以下に示す。&lt;/p&gt;
&lt;p&gt;&lt;figure lang=&#39;en&#39;&gt;
&lt;style&gt;
main table.nist3 th  {
  vertical-align:middle;
  text-align: center;
}
main table.nist3 td  {
   
  text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;nist3&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Security &lt;br&gt;Strength&lt;/th&gt;
&lt;th&gt;Digital Signatures and Other&lt;br&gt;Applications Requiring Collision&lt;br&gt;Resistance&lt;/th&gt;
&lt;th&gt;HMAC, KMAC,&lt;br&gt;Key Derivation Functions,&lt;br&gt;Random Bit Generation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; $\le 8$0&lt;/td&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$112$&lt;/td&gt;
&lt;td&gt;SHA-224, SHA-512/224, SHA3-224&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$128$&lt;/td&gt;
&lt;td&gt;SHA-256, SHA-512/256, SHA3-256&lt;/td&gt;
&lt;td&gt;SHA-1, KMAC128&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$192$&lt;/td&gt;
&lt;td&gt;SHA-384, SHA3-384&lt;/td&gt;
&lt;td&gt;SHA-224, SHA-512/224, SHA3-224&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$\ge 256$&lt;/td&gt;
&lt;td&gt;SHA-512, SHA3-512&lt;/td&gt;
&lt;td&gt;SHA-256, SHA-512/256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, KMAC256&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;div&gt;Maximum security strengths for hash and hash-based functions (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r5&#39;&gt;SP 800-57 Part 1 Revision 5 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 5.6.1.2)&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt; &lt;!-- 要 MathJax --&gt;
&lt;figure lang=&#39;en&#39;&gt;
&lt;style&gt;
main table.nist4 th  {
  vertical-align:middle;
  text-align: center;
}
main table.nist4 td  {
  vertical-align:middle;
  text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;nist4&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&#39;2&#39;&gt;Security Strength&lt;/th&gt;
&lt;th&gt;Through&lt;br&gt; 2030&lt;/th&gt;
&lt;th&gt;2031 and&lt;br&gt; Beyond&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td rowspan=&#39;2&#39;&gt;$\lt 112$&lt;/td&gt;&lt;td&gt;Applying&lt;/td&gt;                       &lt;td colspan=&#39;2&#39;&gt;Disallowed&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;                              &lt;td&gt;Processing&lt;/td&gt;                     &lt;td colspan=&#39;2&#39;&gt;Legacy use&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan=&#39;2&#39;&gt;$112$&lt;/td&gt;    &lt;td&gt;Applying&lt;/td&gt;                       &lt;td rowspan=&#39;2&#39;&gt;Acceptable&lt;/td&gt;&lt;td&gt;Disallowed&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;                              &lt;td&gt;Processing&lt;/td&gt;                                                    &lt;td&gt;Legacy use&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$128$&lt;/td&gt;                &lt;td rowspan=&#39;3&#39;&gt;Applying/Processing&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$192$&lt;/td&gt;                                                        &lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$256$&lt;/td&gt;                                                        &lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;div&gt;Security-strength time frames (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r5&#39;&gt;SP 800-57 Part 1 Revision 5 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 5.6.3)&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt; &lt;!-- 要 MathJax --&gt;&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
</content>
	</entry>
</feed>
