<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Tools - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/tools/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/tools/index.xml" />
	<id>tag:text.Baldanders.info,2016-03-01:/</id>
	<updated>2016-03-01T22:02:47+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/gcc-msys2-3/" />
		<id>tag:text.Baldanders.info,2016-03-01:/remark/2016/03/gcc-msys2-3/</id>
		<published>2016-03-01T22:02:47+09:00</published>
		<updated>2016-03-01T22:02:47+09:00</updated>
		<summary>前回で gcc を導入できたので，実際にビルドを試してみる。今回はターゲットとして pgpdump を用いる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;前回&lt;/a&gt;で gcc を導入できたので，実際にビルドを試してみる。
今回はターゲットとして &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; を用いる。&lt;/p&gt;

&lt;h2 id=&#34;pgpdump:c509a9983168e49e64441034797bfe05&#34;&gt;pgpdump&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; は山本和彦さんによる &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; パケットの&lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/ja/&#34;&gt;視覚化ツール&lt;/a&gt;。
ソースコードは &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;GitHub で公開&lt;/a&gt;されているが， UNIX 系のプラットフォームを前提に作られているため &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 上でビルドを行う。&lt;/p&gt;

&lt;p&gt;まずは &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; のソースコードをダウンロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git clone https://github.com/kazu-yamamoto/pgpdump.git
Cloning into &#39;pgpdump&#39;...
remote: Counting objects: 492, done.
Receiving objects:  59% (291remote: Total 492 (delta 0), reused 0 (delta 0), pack-reused 492 92
Receiving objects: 100% (492/492), 180.29 KiB | 0 bytes/s, done.
Resolving deltas: 100% (320/320), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;32bit-版のビルド:c509a9983168e49e64441034797bfe05&#34;&gt;32bit 版のビルド&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; のビルド手順は &lt;code&gt;configure&lt;/code&gt; を実行した後 make を実行する。
まずは何も考えずに &lt;code&gt;configure&lt;/code&gt; の実行してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cd pgpdump/

$ ./configure
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for inflate in -lz... yes
checking for BZ2_bzBuffToBuffDecompress in -lbz2... yes
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for unistd.h... (cached) yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking unixlib/local.h usability... no
checking unixlib/local.h presence... no
checking for unixlib/local.h... no
checking whether time.h and sys/time.h may both be included... yes
checking whether struct tm is in sys/time.h or time.h... time.h
checking for struct tm.tm_zone... no
checking whether tzname is declared... yes
checking for tzname... yes
configure: creating ./config.status
config.status: creating Makefile
config.status: WARNING:  &#39;Makefile.in&#39; seems to ignore the --datarootdir setting
config.status: creating config.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; ではパケット内の圧縮データを扱うため &lt;code&gt;libz&lt;/code&gt; および &lt;code&gt;libbz2&lt;/code&gt; が必要となるが，ちゃんと認識しているようだ。
これによって作成された &lt;code&gt;Makefile&lt;/code&gt; がこれ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;prefix = /usr/local
exec_prefix = ${prefix}
bindir = ${exec_prefix}/bin
mandir = ${prefix}/share/man
LIBS = -lbz2 -lz
CFLAGS  = -g -O2 -O -Wall
LDFLAGS =
VERSION = `git tag | tail -1 | sed -e &#39;s/v//&#39;`

RM = rm -f
INSTALL  = install

INCS = pgpdump.h
SRCS = pgpdump.c types.c tagfuncs.c packet.c subfunc.c signature.c keys.c \
       buffer.c uatfunc.c
OBJS = pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o \
       buffer.o uatfunc.o
PROG = pgpdump

MAN  = pgpdump.1

CNF = config.h config.status config.cache config.log
MKF = Makefile

.c.o:
	$(CC) -c $(CFLAGS) $&amp;lt;

all: $(PROG)

$(PROG): $(OBJS)
	$(CC) $(CFLAGS) -o $(PROG) $(OBJS) $(LIBS) $(LDFLAGS)

clean:
	$(RM) $(OBJS) $(PROG)

distclean:
	$(RM) $(OBJS) $(PROG) $(CNF) $(MKF)

install: all
	$(INSTALL) -d $(DESTDIR)$(bindir)
	$(INSTALL) -cp -pm755 $(PROG) $(DESTDIR)$(bindir)
	$(INSTALL) -d $(DESTDIR)$(mandir)/man1
	$(INSTALL) -cp -pm644 $(MAN) $(DESTDIR)$(mandir)/man1

archive:
	git archive master -o ~/pgpdump-$(VERSION).tar --prefix=pgpdump-$(VERSION)/
	gzip ~/pgpdump-$(VERSION).tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この時点での問題は以下のとおり。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; が &lt;code&gt;/usr/local&lt;/code&gt; になっている。このままでもエラーにはならないが，今回は 32bit 版と 64bit 版を分けたいので &lt;code&gt;/mingw32&lt;/code&gt; としたい&lt;/li&gt;
&lt;li&gt;リンク時のオプション（&lt;code&gt;LDFLAGS&lt;/code&gt;）に &lt;code&gt;-static&lt;/code&gt; がないため，このままビルドすると DLL に依存する構成になってしまう&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらについては &lt;code&gt;configure&lt;/code&gt; に情報を渡せばよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ./configure --prefix=/mingw32 LDFLAGS=-static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;Makefile&lt;/code&gt; は以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;prefix = /mingw32
exec_prefix = ${prefix}
bindir = ${exec_prefix}/bin
mandir = ${prefix}/share/man
LIBS = -lbz2 -lz
CFLAGS  = -g -O2 -O -Wall
LDFLAGS = -static
VERSION = `git tag | tail -1 | sed -e &#39;s/v//&#39;`

RM = rm -f
INSTALL  = install

INCS = pgpdump.h
SRCS = pgpdump.c types.c tagfuncs.c packet.c subfunc.c signature.c keys.c \
       buffer.c uatfunc.c
OBJS = pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o \
       buffer.o uatfunc.o
PROG = pgpdump

MAN  = pgpdump.1

CNF = config.h config.status config.cache config.log
MKF = Makefile

.c.o:
	$(CC) -c $(CFLAGS) $&amp;lt;

all: $(PROG)

$(PROG): $(OBJS)
	$(CC) $(CFLAGS) -o $(PROG) $(OBJS) $(LIBS) $(LDFLAGS)

clean:
	$(RM) $(OBJS) $(PROG)

distclean:
	$(RM) $(OBJS) $(PROG) $(CNF) $(MKF)

install: all
	$(INSTALL) -d $(DESTDIR)$(bindir)
	$(INSTALL) -cp -pm755 $(PROG) $(DESTDIR)$(bindir)
	$(INSTALL) -d $(DESTDIR)$(mandir)/man1
	$(INSTALL) -cp -pm644 $(MAN) $(DESTDIR)$(mandir)/man1

archive:
	git archive master -o ~/pgpdump-$(VERSION).tar --prefix=pgpdump-$(VERSION)/
	gzip ~/pgpdump-$(VERSION).tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では make を実行しよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ make
cc -c -g -O2 -O -Wall pgpdump.c
cc -c -g -O2 -O -Wall types.c
cc -c -g -O2 -O -Wall tagfuncs.c
cc -c -g -O2 -O -Wall packet.c
cc -c -g -O2 -O -Wall subfunc.c
cc -c -g -O2 -O -Wall signature.c
cc -c -g -O2 -O -Wall keys.c
cc -c -g -O2 -O -Wall buffer.c
cc -c -g -O2 -O -Wall uatfunc.c
cc -g -O2 -O -Wall -o pgpdump pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o buffer.o uatfunc.o -lbz2 -lz  -static

$ strip pgpdump.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;できた実行ファイルをコマンドプロンプトから起動してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;pgpdump.exe -v
pgpdump.exe version 0.29, Copyright (C) 1998-2014 Kazu Yamamoto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うまくいったようである。&lt;/p&gt;

&lt;h2 id=&#34;64bit-版のビルド:c509a9983168e49e64441034797bfe05&#34;&gt;64bit 版のビルド&lt;/h2&gt;

&lt;p&gt;32bit 版で要領は分かったので一気に終わらせてしまおう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git clone https://github.com/kazu-yamamoto/pgpdump.git
Cloning into &#39;pgpdump&#39;...
remote: Counting objects: 492, done.
Receiving objects:  62% (306remote: Total 492 (delta 0), reused 0 (delta 0), pack-reused 492/92
Receiving objects: 100% (492/492), 180.29 KiB | 0 bytes/s, done.
Resolving deltas: 100% (320/320), done.
Checking connectivity... done.

$ cd pgpdump/

$ ./configure --prefix=/mingw64 LDFLAGS=-static
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for inflate in -lz... yes
checking for BZ2_bzBuffToBuffDecompress in -lbz2... yes
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for unistd.h... (cached) yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking unixlib/local.h usability... no
checking unixlib/local.h presence... no
checking for unixlib/local.h... no
checking whether time.h and sys/time.h may both be included... yes
checking whether struct tm is in sys/time.h or time.h... time.h
checking for struct tm.tm_zone... no
checking whether tzname is declared... yes
checking for tzname... yes
configure: creating ./config.status
config.status: creating Makefile
config.status: WARNING:  &#39;Makefile.in&#39; seems to ignore the --datarootdir setting
config.status: creating config.h

$ make
cc -c -g -O2 -O -Wall pgpdump.c
cc -c -g -O2 -O -Wall types.c
cc -c -g -O2 -O -Wall tagfuncs.c
cc -c -g -O2 -O -Wall packet.c
cc -c -g -O2 -O -Wall subfunc.c
cc -c -g -O2 -O -Wall signature.c
cc -c -g -O2 -O -Wall keys.c
cc -c -g -O2 -O -Wall buffer.c
cc -c -g -O2 -O -Wall uatfunc.c
cc -g -O2 -O -Wall -o pgpdump pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o buffer.o uatfunc.o -lbz2 -lz  -static

$ strip pgpdump.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これもコマンドプロンプト上で起動してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;pgpdump.exe -v
pgpdump.exe version 0.29, Copyright (C) 1998-2014 Kazu Yamamoto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;問題なし。&lt;/p&gt;

&lt;h2 id=&#34;動作確認:c509a9983168e49e64441034797bfe05&#34;&gt;動作確認&lt;/h2&gt;

&lt;p&gt;実際にちゃんと動くかどうか &lt;a href=&#34;https://www.jpcert.or.jp/jpcert-pgp.html&#34; title=&#34;JPCERT コーディネーションセンター PGP公開鍵&#34;&gt;JPCERT/CC の公開鍵&lt;/a&gt;をを使って確認してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;pgpdump.exe info-0x69ECE048.asc
Old: Public Key Packet(tag 6)(269 bytes)
        Ver 4 - new
        Public key creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Pub alg - RSA Encrypt or Sign(pub 1)
        RSA n(2048 bits) - ...
        RSA e(17 bits) - ...
Old: User ID Packet(tag 13)(29 bytes)
        User ID - JPCERT/CC &amp;lt;info@jpcert.or.jp&amp;gt;
Old: Signature Packet(tag 2)(316 bytes)
        Ver 4 - new
        Sig type - Generic certification of a User ID and Public Key packet(0x10).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: preferred symmetric algorithms(sub 11)(3 bytes)
                Sym alg - AES with 256-bit key(sym 9)
                Sym alg - CAST5(sym 3)
                Sym alg - Triple-DES(sym 2)
        Hashed Sub: key server preferences(sub 23)(4 bytes)
                Flag - No-modify
        Hashed Sub: key flags(sub 27)(4 bytes)
                Flag - This key may be used to certify other keys
                Flag - This key may be used to sign data
                Flag - This key may be used to encrypt communications
                Flag - This key may be used to encrypt storage
                Flag - The private component of this key may be in the possession of more than one person
        Hashed Sub: preferred compression algorithms(sub 22)(2 bytes)
                Comp alg - ZLIB &amp;lt;RFC1950&amp;gt;(comp 2)
                Comp alg - ZIP &amp;lt;RFC1951&amp;gt;(comp 1)
        Hashed Sub: features(sub 30)(4 bytes)
                Flag - Modification detection (packets 18 and 19)
        Hashed Sub: preferred hash algorithms(sub 21)(3 bytes)
                Hash alg - SHA256(hash 8)
                Hash alg - SHA384(hash 9)
                Hash alg - SHA512(hash 10)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 16 12:51:22 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x317D97A469ECE048
        Hash left 2 bytes - cd 79
        RSA m^d mod n(2047 bits) - ...
                -&amp;gt; PKCS-1
Old: Signature Packet(tag 2)(277 bytes)
        Ver 3 - old
        Hash material(5 bytes):
                Sig type - Generic certification of a User ID and Public Key packet(0x10).
                Creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Key ID - 0xE7734FA60C7BDE12
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hash left 2 bytes - e9 53
        RSA m^d mod n(2047 bits) - ...
                -&amp;gt; PKCS-1
Old: Signature Packet(tag 2)(156 bytes)
        Ver 4 - new
        Sig type - Generic certification of a User ID and Public Key packet(0x10).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Mon Jun 15 14:51:27 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x8C756B2E2C94D4ED
        Hash left 2 bytes - 35 fd
        RSA m^d mod n(1022 bits) - ...
                -&amp;gt; PKCS-1
Old: Public Subkey Packet(tag 14)(269 bytes)
        Ver 4 - new
        Public key creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Pub alg - RSA Encrypt or Sign(pub 1)
        RSA n(2048 bits) - ...
        RSA e(17 bits) - ...
Old: Signature Packet(tag 2)(577 bytes)
        Ver 4 - new
        Sig type - Subkey Binding Signature(0x18).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 02 14:43:58 東京 (標準時) 2009
        Hashed Sub: key flags(sub 27)(4 bytes)
                Flag - This key may be used to encrypt communications
                Flag - This key may be used to encrypt storage
        Hashed Sub: embedded signature(sub 32)(284 bytes)
        Ver 4 - new
        Sig type - Primary Key Binding Signature(0x19).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA256(hash 8)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x09D704B753BA1622
        Hash left 2 bytes - 71 2d
        RSA m^d mod n(2048 bits) - ...
                -&amp;gt; PKCS-1
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x317D97A469ECE048
        Hash left 2 bytes - 1d e2
        RSA m^d mod n(2046 bits) - ...
                -&amp;gt; PKCS-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うむ，問題ないようだな。
ちなみに Windows バイナリは&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/&#34;&gt;うちのサイトでも公開&lt;/a&gt;しているのでご自由にどうぞ。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/gcc-msys2-2/" />
		<id>tag:text.Baldanders.info,2016-03-01:/remark/2016/03/gcc-msys2-2/</id>
		<published>2016-03-01T22:02:44+09:00</published>
		<updated>2016-03-01T22:02:44+09:00</updated>
		<summary>いよいよ gcc をインストールする。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;いよいよ gcc をインストールする。
その前に&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;pacman-によるパッケージ管理:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;pacman によるパッケージ管理&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;の初期化でもちょっとだけ出てきたが， &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のパッケージ管理には pacman コマンドを使う。
pacman は元々 Arch Linux のパッケージ管理ツールで，使い方もこれと同じようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://archlinuxjp.kusakata.com/wiki/Pacman&#34;&gt;pacman - ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;よく使うコマンドとしては&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;コマンドライン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;処理内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -S &amp;lt;package_name1&amp;gt; [package_name2...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定したパッケージをインストールする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Sl [repository]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;パッケージを一覧表示する（リポジトリを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Ss [regex...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;パッケージを一覧・検索する（キーワードを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Su&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;インストール済みのパッケージを更新する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Sy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;パッケージのデータベースを更新する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Syu&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;-Su&lt;/code&gt;, &lt;code&gt;-Sy&lt;/code&gt; の同時指定&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Q [package_name...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;インストール済みパッケージを一覧・検索する（パッケージを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Qs [regex...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;インストール済みパッケージを一覧・検索する（をキーワードを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -R &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定したパッケージを削除する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Rs &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;依存関係を含めて指定したパッケージを削除する（指定したパッケージにのみ依存するパッケージを削除）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;あたりか。
試しに git をインストールしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman -S git
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (34) db-5.3.28-2  expat-2.1.0-2  gdbm-1.11-3  heimdal-1.5.3-8  libgdbm-1.11-3
                openssh-7.1p2-1  perl-5.22.0-2  perl-Authen-SASL-2.16-2  perl-Convert-BinHex-1.123-2
                perl-Encode-Locale-1.04-1  perl-Error-0.17024-1  perl-File-Listing-6.04-2
                perl-HTML-Parser-3.71-3  perl-HTML-Tagset-3.20-2  perl-HTTP-Cookies-6.01-2
                perl-HTTP-Daemon-6.01-2  perl-HTTP-Date-6.02-2  perl-HTTP-Message-6.06-2
                perl-HTTP-Negotiate-6.01-2  perl-IO-Socket-SSL-2.016-1  perl-IO-stringy-2.111-1
                perl-LWP-MediaTypes-6.02-2  perl-MIME-tools-5.506-1  perl-MailTools-2.14-1
                perl-Net-HTTP-6.09-1  perl-Net-SMTP-SSL-1.02-1  perl-Net-SSLeay-1.70-1
                perl-TermReadKey-2.33-1  perl-TimeDate-2.30-2  perl-URI-1.68-1
                perl-WWW-RobotRules-6.02-2  perl-libwww-6.13-1  vim-7.4.1415-2  git-2.7.1-1

合計ダウンロード容量:   24.75 MiB
合計インストール容量:  114.53 MiB

:: インストールを行いますか？ [Y/n] y
:: パッケージを取得します...
 expat-2.1.0-2-x86_64                                  13.1 KiB  12.8M/s 00:00 [##################] 100%
 vim-7.4.1415-2-x86_64                                  6.1 MiB  1217K/s 00:05 [##################] 100%
 heimdal-1.5.3-8-x86_64                               543.7 KiB   824K/s 00:01 [##################] 100%
 openssh-7.1p2-1-x86_64                               653.4 KiB   312K/s 00:02 [##################] 100%
 db-5.3.28-2-x86_64                                    41.7 KiB  10.2M/s 00:00 [##################] 100%
 libgdbm-1.11-3-x86_64                                 20.4 KiB  9.94M/s 00:00 [##################] 100%
 gdbm-1.11-3-x86_64                                   108.5 KiB   682K/s 00:00 [##################] 100%
 perl-5.22.0-2-x86_64                                  12.4 MiB  1170K/s 00:11 [##################] 100%
 perl-Error-0.17024-1-any                              17.1 KiB  8.33M/s 00:00 [##################] 100%
 perl-Authen-SASL-2.16-2-any                           42.4 KiB  8.28M/s 00:00 [##################] 100%
 perl-Encode-Locale-1.04-1-any                          9.7 KiB  9.46M/s 00:00 [##################] 100%
 perl-HTTP-Date-6.02-2-any                              8.6 KiB  8.42M/s 00:00 [##################] 100%
 perl-File-Listing-6.04-2-any                           7.7 KiB  0.00B/s 00:00 [##################] 100%
 perl-HTML-Tagset-3.20-2-any                           10.3 KiB  10.0M/s 00:00 [##################] 100%
 perl-HTML-Parser-3.71-3-x86_64                        76.9 KiB  10.7M/s 00:00 [##################] 100%
 perl-LWP-MediaTypes-6.02-2-any                        18.0 KiB  8.81M/s 00:00 [##################] 100%
 perl-URI-1.68-1-any                                   75.6 KiB  9.22M/s 00:00 [##################] 100%
 perl-HTTP-Message-6.06-2-any                          71.3 KiB  9.94M/s 00:00 [##################] 100%
 perl-HTTP-Cookies-6.01-2-any                          20.4 KiB  20.0M/s 00:00 [##################] 100%
 perl-HTTP-Daemon-6.01-2-any                           14.2 KiB  0.00B/s 00:00 [##################] 100%
 perl-HTTP-Negotiate-6.01-2-any                        11.4 KiB  0.00B/s 00:00 [##################] 100%
 perl-Net-HTTP-6.09-1-any                              19.8 KiB  19.3M/s 00:00 [##################] 100%
 perl-WWW-RobotRules-6.02-2-any                        12.2 KiB  12.0M/s 00:00 [##################] 100%
 perl-libwww-6.13-1-any                               122.2 KiB   367K/s 00:00 [##################] 100%
 perl-TimeDate-2.30-2-any                              35.9 KiB  8.77M/s 00:00 [##################] 100%
 perl-MailTools-2.14-1-any                             58.4 KiB  9.50M/s 00:00 [##################] 100%
 perl-IO-stringy-2.111-1-any                           52.6 KiB  10.3M/s 00:00 [##################] 100%
 perl-Convert-BinHex-1.123-2-any                       30.1 KiB  9.79M/s 00:00 [##################] 100%
 perl-MIME-tools-5.506-1-any                          180.4 KiB   367K/s 00:00 [##################] 100%
 perl-Net-SSLeay-1.70-1-x86_64                        191.2 KiB   590K/s 00:00 [##################] 100%
 perl-IO-Socket-SSL-2.016-1-any                       112.5 KiB   208K/s 00:01 [##################] 100%
 perl-Net-SMTP-SSL-1.02-1-any                           3.5 KiB  22.2K/s 00:00 [##################] 100%
 perl-TermReadKey-2.33-1-x86_64                        20.9 KiB  18.7K/s 00:01 [##################] 100%
 git-2.7.1-1-x86_64                                     3.6 MiB   448K/s 00:08 [##################] 100%
(34/34) キーリングのキーを確認                                                 [##################] 100%
(34/34) パッケージの整合性をチェック                                           [##################] 100%
(34/34) パッケージファイルのロード                                             [##################] 100%
(34/34) ファイルの衝突をチェック                                               [##################] 100%
(34/34) 空き容量を確認                                                         [##################] 100%
:: パッケージの変更を処理しています...
( 1/34) インストール expat                                                     [##################] 100%
( 2/34) インストール vim                                                       [##################] 100%
( 3/34) インストール heimdal                                                   [##################] 100%
( 4/34) インストール openssh                                                   [##################] 100%
( 5/34) インストール db                                                        [##################] 100%
( 6/34) インストール libgdbm                                                   [##################] 100%
( 7/34) インストール gdbm                                                      [##################] 100%
( 8/34) インストール perl                                                      [##################] 100%
( 9/34) インストール perl-Error                                                [##################] 100%
(10/34) インストール perl-Authen-SASL                                          [##################] 100%
(11/34) インストール perl-Encode-Locale                                        [##################] 100%
(12/34) インストール perl-HTTP-Date                                            [##################] 100%
(13/34) インストール perl-File-Listing                                         [##################] 100%
(14/34) インストール perl-HTML-Tagset                                          [##################] 100%
(15/34) インストール perl-HTML-Parser                                          [##################] 100%
(16/34) インストール perl-LWP-MediaTypes                                       [##################] 100%
(17/34) インストール perl-URI                                                  [##################] 100%
(18/34) インストール perl-HTTP-Message                                         [##################] 100%
(19/34) インストール perl-HTTP-Cookies                                         [##################] 100%
(20/34) インストール perl-HTTP-Daemon                                          [##################] 100%
(21/34) インストール perl-HTTP-Negotiate                                       [##################] 100%
(22/34) インストール perl-Net-HTTP                                             [##################] 100%
(23/34) インストール perl-WWW-RobotRules                                       [##################] 100%
(24/34) インストール perl-libwww                                               [##################] 100%
perl-libwww の提案パッケージ
    perl-LWP-Protocol-HTTPS: for https:// url schemes
(25/34) インストール perl-TimeDate                                             [##################] 100%
(26/34) インストール perl-MailTools                                            [##################] 100%
(27/34) インストール perl-IO-stringy                                           [##################] 100%
(28/34) インストール perl-Convert-BinHex                                       [##################] 100%
module test... pass.
(29/34) インストール perl-MIME-tools                                           [##################] 100%
(30/34) インストール perl-Net-SSLeay                                           [##################] 100%
(31/34) インストール perl-IO-Socket-SSL                                        [##################] 100%
(32/34) インストール perl-Net-SMTP-SSL                                         [##################] 100%
(33/34) インストール perl-TermReadKey                                          [##################] 100%
(34/34) インストール git                                                       [##################] 100%
git の提案パッケージ
    python2: various helper scripts
    subversion: git svn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てか，本当に最小限しか入ってないんだな（笑） 提案パッケージについては，とりあえずスルーする。&lt;/p&gt;

&lt;h3 id=&#34;msys2-のリポジトリ:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;MSYS2 のリポジトリ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/etc/pacman.conf&lt;/code&gt; を見ると MSYS2 では &lt;code&gt;mingw32&lt;/code&gt;, &lt;code&gt;mingw64&lt;/code&gt;, &lt;code&gt;msys&lt;/code&gt; の3つのリポジトリを管理していることが分かる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;リポジトリ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;参照ファイル&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;mingw32&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.mingw32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;mingw64&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.mingw64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;msys&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.msys&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;実際には「参照ファイル」にリポジトリへの URI が書かれている。
たとえば &lt;code&gt;/etc/pacman.d/mirrorlist.mingw32&lt;/code&gt; ならこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;##
## 32-bit Mingw-w64 repository mirrorlist
##

## Primary
## msys2.org
Server = http://repo.msys2.org/mingw/i686
Server = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686
Server = http://www2.futureware.at/~nickoe/msys2-mirror/i686/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では実際にリポジトリの中を覗いてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman -Sl | grep gcc
mingw32 mingw-w64-i686-gcc 5.3.0-2
mingw32 mingw-w64-i686-gcc-ada 5.3.0-2
mingw32 mingw-w64-i686-gcc-fortran 5.3.0-2
mingw32 mingw-w64-i686-gcc-libgfortran 5.3.0-2
mingw32 mingw-w64-i686-gcc-libs 5.3.0-2
mingw32 mingw-w64-i686-gcc-objc 5.3.0-2
mingw64 mingw-w64-x86_64-gcc 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-ada 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-fortran 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-libgfortran 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-libs 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-objc 5.3.0-2
msys gcc 4.9.2-6
msys gcc-fortran 4.9.2-6
msys gcc-libs 4.9.2-6 [インストール済み]
msys mingw-w64-cross-gcc 4.9.2-3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どれを使うかはユーザ次第だが，今回は &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 内ではなく Windows 環境で動作するアプリケーションを作りたいので， &lt;code&gt;mingw32&lt;/code&gt; および &lt;code&gt;mingw64&lt;/code&gt; リポジトリのものを導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chromabox/items/fd07bad3f426101fc4a6&#34;&gt;Windowsでgccなどを利用できるMSYS2の環境設定など - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gcc-のインストール:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;gcc のインストール&lt;/h2&gt;

&lt;p&gt;では gcc のインストールを始めよう。
今回は以下のパッケージグループを導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingw-w64-i686-toolchain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingw-w64-x86_64-toolchain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ものすごく分かりにくいが &lt;code&gt;mingw-w64-x86_64-toolchain&lt;/code&gt; が 64bit 用である。
ログがかなり長くなるがご容赦。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman -S base-devel mingw-w64-i686-toolchain mingw-w64-x86_64-toolchain
:: 51 のパッケージがグループ base-devel にあります:
:: リポジトリ msys
   1) asciidoc  2) autoconf  3) autoconf2.13  4) autogen  5) automake-wrapper  6) automake1.10
   7) automake1.11  8) automake1.12  9) automake1.13  10) automake1.14  11) automake1.15
   12) automake1.6  13) automake1.7  14) automake1.8  15) automake1.9  16) bison  17) diffstat
   18) diffutils  19) dos2unix  20) file  21) flex  22) gawk  23) gdb  24) gettext  25) gperf
   26) grep  27) groff  28) help2man  29) intltool  30) lemon  31) libtool  32) libunrar  33) m4
   34) make  35) man-db  36) pacman  37) patch  38) patchutils  39) perl  40) pkg-config  41) pkgfile
   42) rcs  43) scons  44) sed  45) swig  46) texinfo  47) texinfo-tex  48) ttyrec  49) unrar
   50) wget  51) xmlto

選択して下さい (デフォルト=all):
警告: file-5.25-1 は最新です -- 再インストール
警告: flex-2.6.0-1 は最新です -- 再インストール
警告: gawk-4.1.3-1 は最新です -- 再インストール
警告: gettext-0.19.6-1 は最新です -- 再インストール
警告: grep-2.22-1 は最新です -- 再インストール
警告: m4-1.4.17-4 は最新です -- 再インストール
警告: pacman-5.0.1.6388.dcb2397-1 は最新です -- 再インストール
警告: perl-5.22.0-2 は最新です -- 再インストール
警告: pkgfile-15-1 は最新です -- 再インストール
警告: sed-4.2.2-2 は最新です -- 再インストール
:: 16 のパッケージがグループ mingw-w64-i686-toolchain にあります:
:: リポジトリ mingw32
   1) mingw-w64-i686-binutils  2) mingw-w64-i686-crt-git  3) mingw-w64-i686-gcc
   4) mingw-w64-i686-gcc-ada  5) mingw-w64-i686-gcc-fortran  6) mingw-w64-i686-gcc-libgfortran
   7) mingw-w64-i686-gcc-libs  8) mingw-w64-i686-gcc-objc  9) mingw-w64-i686-gdb
   10) mingw-w64-i686-headers-git  11) mingw-w64-i686-libmangle-git
   12) mingw-w64-i686-libwinpthread-git  13) mingw-w64-i686-make  14) mingw-w64-i686-pkg-config
   15) mingw-w64-i686-tools-git  16) mingw-w64-i686-winpthreads-git

選択して下さい (デフォルト=all): 1 2 3 7 9 10 11 12 13 14 15 16
:: 16 のパッケージがグループ mingw-w64-x86_64-toolchain にあります:
:: リポジトリ mingw64
   1) mingw-w64-x86_64-binutils  2) mingw-w64-x86_64-crt-git  3) mingw-w64-x86_64-gcc
   4) mingw-w64-x86_64-gcc-ada  5) mingw-w64-x86_64-gcc-fortran  6) mingw-w64-x86_64-gcc-libgfortran
   7) mingw-w64-x86_64-gcc-libs  8) mingw-w64-x86_64-gcc-objc  9) mingw-w64-x86_64-gdb
   10) mingw-w64-x86_64-headers-git  11) mingw-w64-x86_64-libmangle-git
   12) mingw-w64-x86_64-libwinpthread-git  13) mingw-w64-x86_64-make  14) mingw-w64-x86_64-pkg-config
   15) mingw-w64-x86_64-tools-git  16) mingw-w64-x86_64-winpthreads-git

選択して下さい (デフォルト=all): 1 2 3 7 9 10 11 12 13 14 15 16
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (143) docbook-xml-4.5-2  docbook-xsl-1.78.1-3  glib2-2.44.1-1  libassuan-2.4.2-1
                 libgc-7.2.d-1  libgcrypt-1.6.4-1  libgpg-error-1.21-1  libgpgme-1.6.0-1
                 libguile-2.0.11-3  libltdl-2.4.6-1  libpipeline-1.4.0-1  libunistring-0.9.6-1
                 libxslt-1.1.28-7  mingw-w64-i686-bzip2-1.0.6-5
                 mingw-w64-i686-ca-certificates-20150426-2
                 mingw-w64-i686-expat-2.1.0-6  mingw-w64-i686-gdbm-1.11-3
                 mingw-w64-i686-gettext-0.19.6-2  mingw-w64-i686-gmp-6.1.0-1
                 mingw-w64-i686-isl-0.15-1  mingw-w64-i686-libffi-3.2.1-3
                 mingw-w64-i686-libiconv-1.14-5  mingw-w64-i686-libsystre-1.0.1-2
                 mingw-w64-i686-libtasn1-4.7-1  mingw-w64-i686-libtre-git-r122.c2f5d13-4
                 mingw-w64-i686-mpc-1.0.3-2  mingw-w64-i686-mpfr-3.1.3.p0-2
                 mingw-w64-i686-ncurses-6.0.20160220-1  mingw-w64-i686-openssl-1.0.2.f-1
                 mingw-w64-i686-p11-kit-0.23.1-3  mingw-w64-i686-python2-2.7.11-2
                 mingw-w64-i686-readline-6.3.008-1  mingw-w64-i686-tcl-8.6.4-2
                 mingw-w64-i686-termcap-1.3.1-2  mingw-w64-i686-tk-8.6.4-2
                 mingw-w64-i686-windows-default-manifest-6.4-2  mingw-w64-i686-zlib-1.2.8-9
                 mingw-w64-x86_64-bzip2-1.0.6-5  mingw-w64-x86_64-ca-certificates-20150426-2
                 mingw-w64-x86_64-expat-2.1.0-6  mingw-w64-x86_64-gdbm-1.11-3
                 mingw-w64-x86_64-gettext-0.19.6-2  mingw-w64-x86_64-gmp-6.1.0-1
                 mingw-w64-x86_64-isl-0.15-1  mingw-w64-x86_64-libffi-3.2.1-3
                 mingw-w64-x86_64-libiconv-1.14-5  mingw-w64-x86_64-libsystre-1.0.1-2
                 mingw-w64-x86_64-libtasn1-4.7-1  mingw-w64-x86_64-libtre-git-r122.c2f5d13-4
                 mingw-w64-x86_64-mpc-1.0.3-2  mingw-w64-x86_64-mpfr-3.1.3.p0-2
                 mingw-w64-x86_64-ncurses-6.0.20160220-1  mingw-w64-x86_64-openssl-1.0.2.f-1
                 mingw-w64-x86_64-p11-kit-0.23.1-3  mingw-w64-x86_64-python2-2.7.11-2
                 mingw-w64-x86_64-readline-6.3.008-1  mingw-w64-x86_64-tcl-8.6.4-2
                 mingw-w64-x86_64-termcap-1.3.1-2  mingw-w64-x86_64-tk-8.6.4-2
                 mingw-w64-x86_64-windows-default-manifest-6.4-2  mingw-w64-x86_64-zlib-1.2.8-9
                 perl-Locale-Gettext-1.05-4  perl-Module-Build-0.4212-1  perl-Test-Pod-1.50-1
                 perl-XML-Parser-2.44-1  perl-YAML-Syck-1.29-1  python2-2.7.10-1  tar-1.28-3
                 asciidoc-8.6.9-4  autoconf-2.69-3  autoconf2.13-2.13-2  autogen-5.18.4-2
                 automake-wrapper-10-1  automake1.10-1.10.3-3  automake1.11-1.11.6-3
                 automake1.12-1.12.6-3  automake1.13-1.13.4-4  automake1.14-1.14.1-3
                 automake1.15-1.15-2  automake1.6-1.6.3-2  automake1.7-1.7.9-2  automake1.8-1.8.5-3
                 automake1.9-1.9.6-2  bison-3.0.4-1  diffstat-1.58-1  diffutils-3.3-3
                 dos2unix-7.3.3-1  file-5.25-1  flex-2.6.0-1  gawk-4.1.3-1  gdb-7.9-1
                 gettext-0.19.6-1  gperf-3.0.4-3  grep-2.22-1  groff-1.22.3-1  help2man-1.47.3-1
                 intltool-0.51.0-2  lemon-3.8.7.0-1  libtool-2.4.6-1  libunrar-5.3.7-1  m4-1.4.17-4
                 make-4.1-4  man-db-2.7.4-1  mingw-w64-i686-binutils-2.25.1-2
                 mingw-w64-i686-crt-git-5.0.0.4627.d55f21d-1  mingw-w64-i686-gcc-5.3.0-2
                 mingw-w64-i686-gcc-libs-5.3.0-2  mingw-w64-i686-gdb-7.11-1
                 mingw-w64-i686-headers-git-5.0.0.4627.6baeb9d-1
                 mingw-w64-i686-libmangle-git-5.0.0.4509.2e5a9a2-1
                 mingw-w64-i686-libwinpthread-git-5.0.0.4573.628fdbf-1
                 mingw-w64-i686-make-4.1.2351.a80a8b8-1  mingw-w64-i686-pkg-config-0.29-1
                 mingw-w64-i686-tools-git-5.0.0.4592.90b8472-1
                 mingw-w64-i686-winpthreads-git-5.0.0.4573.628fdbf-1
                 mingw-w64-x86_64-binutils-2.25.1-2  mingw-w64-x86_64-crt-git-5.0.0.4627.03684c4-1
                 mingw-w64-x86_64-gcc-5.3.0-2  mingw-w64-x86_64-gcc-libs-5.3.0-2
                 mingw-w64-x86_64-gdb-7.11-1  mingw-w64-x86_64-headers-git-5.0.0.4627.53be55d-1
                 mingw-w64-x86_64-libmangle-git-5.0.0.4509.2e5a9a2-1
                 mingw-w64-x86_64-libwinpthread-git-5.0.0.4573.628fdbf-1
                 mingw-w64-x86_64-make-4.1.2351.a80a8b8-1  mingw-w64-x86_64-pkg-config-0.29-1
                 mingw-w64-x86_64-tools-git-5.0.0.4592.90b8472-1
                 mingw-w64-x86_64-winpthreads-git-5.0.0.4573.628fdbf-1  pacman-5.0.1.6388.dcb2397-1
                 patch-2.7.5-1  patchutils-0.3.3-2  perl-5.22.0-2  pkg-config-0.28-2  pkgfile-15-1
                 rcs-5.9.4-1  scons-2.4.1-2  sed-4.2.2-2  swig-3.0.7-1  texinfo-6.0-1
                 texinfo-tex-6.0-1  ttyrec-1.0.8-1  unrar-5.3.7-1  wget-1.17.1-2  xmlto-0.0.26-2

合計ダウンロード容量:   186.38 MiB
合計インストール容量:  1221.31 MiB
最終的なアップグレード容量:  1124.41 MiB

:: インストールを行いますか？ [Y/n] y
:: パッケージを取得します...
 mingw-w64-i686-libiconv-1.14-5-any                   602.2 KiB   929K/s 00:01 [##################] 100%
 mingw-w64-i686-gmp-6.1.0-1-any                       459.3 KiB   947K/s 00:00 [##################] 100%
 mingw-w64-i686-libwinpthread-git-5.0.0.4573.628...    27.1 KiB  8.84M/s 00:00 [##################] 100%
 mingw-w64-i686-gcc-libs-5.3.0-2-any                  609.8 KiB   944K/s 00:01 [##################] 100%
 mingw-w64-i686-bzip2-1.0.6-5-any                      75.5 KiB  9.21M/s 00:00 [##################] 100%
 mingw-w64-i686-zlib-1.2.8-9-any                      153.2 KiB   471K/s 00:00 [##################] 100%
 mingw-w64-i686-binutils-2.25.1-2-any                  10.3 MiB  1080K/s 00:10 [##################] 100%
 mingw-w64-i686-headers-git-5.0.0.4627.6baeb9d-1-any    5.0 MiB  1244K/s 00:04 [##################] 100%
 mingw-w64-i686-crt-git-5.0.0.4627.d55f21d-1-any     1701.9 KiB   888K/s 00:02 [##################] 100%
 mingw-w64-i686-isl-0.15-1-any                        539.7 KiB   843K/s 00:01 [##################] 100%
 mingw-w64-i686-mpfr-3.1.3.p0-2-any                   258.0 KiB   809K/s 00:00 [##################] 100%
 mingw-w64-i686-mpc-1.0.3-2-any                        62.3 KiB  10.1M/s 00:00 [##################] 100%
 mingw-w64-i686-windows-default-manifest-6.4-2-any   1472.0   B  0.00B/s 00:00 [##################] 100%
 mingw-w64-i686-winpthreads-git-5.0.0.4573.628fd...    35.1 KiB  11.4M/s 00:00 [##################] 100%
 mingw-w64-i686-gcc-5.3.0-2-any                        24.6 MiB  1222K/s 00:21 [##################] 100%
 mingw-w64-i686-expat-2.1.0-6-any                     107.1 KiB  9.51M/s 00:00 [##################] 100%
 mingw-w64-i686-gettext-0.19.6-2-any                    3.0 MiB   808K/s 00:04 [##################] 100%
 mingw-w64-i686-gdbm-1.11-3-any                       150.1 KiB   313K/s 00:00 [##################] 100%
 mingw-w64-i686-libffi-3.2.1-3-any                     36.3 KiB  17.7M/s 00:00 [##################] 100%
 mingw-w64-i686-libtre-git-r122.c2f5d13-4-any          69.1 KiB  11.3M/s 00:00 [##################] 100%
 mingw-w64-i686-libsystre-1.0.1-2-any                   9.1 KiB  0.00B/s 00:00 [##################] 100%
 mingw-w64-i686-ncurses-6.0.20160220-1-any           1747.2 KiB   918K/s 00:02 [##################] 100%
 mingw-w64-i686-libtasn1-4.7-1-any                    171.3 KiB   268K/s 00:01 [##################] 100%
 mingw-w64-i686-p11-kit-0.23.1-3-any                  198.0 KiB   630K/s 00:00 [##################] 100%
 mingw-w64-i686-ca-certificates-20150426-2-any        382.4 KiB   797K/s 00:00 [##################] 100%
 mingw-w64-i686-openssl-1.0.2.f-1-any                   2.7 MiB   986K/s 00:03 [##################] 100%
 mingw-w64-i686-termcap-1.3.1-2-any                    12.3 KiB  12.0M/s 00:00 [##################] 100%
 mingw-w64-i686-readline-6.3.008-1-any                327.2 KiB   986K/s 00:00 [##################] 100%
 mingw-w64-i686-tcl-8.6.4-2-any                         2.8 MiB  1151K/s 00:03 [##################] 100%
 mingw-w64-i686-tk-8.6.4-2-any                       1874.2 KiB  1180K/s 00:02 [##################] 100%
 mingw-w64-i686-python2-2.7.11-2-any                   10.8 MiB  1286K/s 00:09 [##################] 100%
 mingw-w64-i686-gdb-7.11-1-any                          2.8 MiB   995K/s 00:03 [##################] 100%
 mingw-w64-i686-libmangle-git-5.0.0.4509.2e5a9a2...    16.5 KiB  8.07M/s 00:00 [##################] 100%
 mingw-w64-i686-make-4.1.2351.a80a8b8-1-any           105.3 KiB  9.34M/s 00:00 [##################] 100%
 mingw-w64-i686-pkg-config-0.29-1-any                 235.8 KiB   741K/s 00:00 [##################] 100%
 mingw-w64-i686-tools-git-5.0.0.4592.90b8472-1-any    235.1 KiB   742K/s 00:00 [##################] 100%
 mingw-w64-x86_64-libiconv-1.14-5-any                 600.2 KiB   757K/s 00:01 [##################] 100%
 mingw-w64-x86_64-gmp-6.1.0-1-any                     477.1 KiB   756K/s 00:01 [##################] 100%
 mingw-w64-x86_64-libwinpthread-git-5.0.0.4573.6...    24.2 KiB  7.87M/s 00:00 [##################] 100%
 mingw-w64-x86_64-gcc-libs-5.3.0-2-any                541.9 KiB   845K/s 00:01 [##################] 100%
 mingw-w64-x86_64-bzip2-1.0.6-5-any                    77.9 KiB  10.9M/s 00:00 [##################] 100%
 mingw-w64-x86_64-zlib-1.2.8-9-any                    148.6 KiB   472K/s 00:00 [##################] 100%
 mingw-w64-x86_64-binutils-2.25.1-2-any                11.9 MiB  1245K/s 00:10 [##################] 100%
 mingw-w64-x86_64-headers-git-5.0.0.4627.53be55d...     5.0 MiB  1117K/s 00:05 [##################] 100%
 mingw-w64-x86_64-crt-git-5.0.0.4627.03684c4-1-any      2.6 MiB  1002K/s 00:03 [##################] 100%
 mingw-w64-x86_64-isl-0.15-1-any                      524.3 KiB   830K/s 00:01 [##################] 100%
 mingw-w64-x86_64-mpfr-3.1.3.p0-2-any                 265.2 KiB   831K/s 00:00 [##################] 100%
 mingw-w64-x86_64-mpc-1.0.3-2-any                      62.3 KiB  10.1M/s 00:00 [##################] 100%
 mingw-w64-x86_64-windows-default-manifest-6.4-2-any 1484.0   B  0.00B/s 00:00 [##################] 100%
 mingw-w64-x86_64-winpthreads-git-5.0.0.4573.628...    33.2 KiB  8.11M/s 00:00 [##################] 100%
 mingw-w64-x86_64-gcc-5.3.0-2-any                      25.1 MiB  1270K/s 00:20 [##################] 100%
 mingw-w64-x86_64-expat-2.1.0-6-any                   106.7 KiB  9.47M/s 00:00 [##################] 100%
 mingw-w64-x86_64-gettext-0.19.6-2-any                  3.0 MiB  1214K/s 00:03 [##################] 100%
 mingw-w64-x86_64-gdbm-1.11-3-any                     151.8 KiB   315K/s 00:00 [##################] 100%
 mingw-w64-x86_64-libffi-3.2.1-3-any                   34.5 KiB  16.9M/s 00:00 [##################] 100%
 mingw-w64-x86_64-libtre-git-r122.c2f5d13-4-any        69.2 KiB  11.3M/s 00:00 [##################] 100%
 mingw-w64-x86_64-libsystre-1.0.1-2-any                 9.3 KiB  9.11M/s 00:00 [##################] 100%
 mingw-w64-x86_64-ncurses-6.0.20160220-1-any         1794.3 KiB  1133K/s 00:02 [##################] 100%
 mingw-w64-x86_64-libtasn1-4.7-1-any                  171.4 KiB   353K/s 00:00 [##################] 100%
 mingw-w64-x86_64-p11-kit-0.23.1-3-any                193.5 KiB   610K/s 00:00 [##################] 100%
 mingw-w64-x86_64-ca-certificates-20150426-2-any      382.1 KiB   799K/s 00:00 [##################] 100%
 mingw-w64-x86_64-openssl-1.0.2.f-1-any                 3.3 MiB   984K/s 00:03 [##################] 100%
 mingw-w64-x86_64-termcap-1.3.1-2-any                  12.6 KiB  12.3M/s 00:00 [##################] 100%
 mingw-w64-x86_64-readline-6.3.008-1-any              327.4 KiB   992K/s 00:00 [##################] 100%
 mingw-w64-x86_64-tcl-8.6.4-2-any                       2.8 MiB  1070K/s 00:03 [##################] 100%
 mingw-w64-x86_64-tk-8.6.4-2-any                     1869.4 KiB  1158K/s 00:02 [##################] 100%
 mingw-w64-x86_64-python2-2.7.11-2-any                 10.9 MiB  1132K/s 00:10 [##################] 100%
 mingw-w64-x86_64-gdb-7.11-1-any                        2.8 MiB  1119K/s 00:03 [##################] 100%
 mingw-w64-x86_64-libmangle-git-5.0.0.4509.2e5a9...    16.3 KiB  15.9M/s 00:00 [##################] 100%
 mingw-w64-x86_64-make-4.1.2351.a80a8b8-1-any         103.2 KiB  10.1M/s 00:00 [##################] 100%
 mingw-w64-x86_64-pkg-config-0.29-1-any               226.1 KiB   691K/s 00:00 [##################] 100%
 mingw-w64-x86_64-tools-git-5.0.0.4592.90b8472-1-any  247.0 KiB   774K/s 00:00 [##################] 100%
 python2-2.7.10-1-x86_64                               10.0 MiB  1138K/s 00:09 [##################] 100%
 libgpg-error-1.21-1-x86_64                           103.8 KiB  11.3M/s 00:00 [##################] 100%
 libgcrypt-1.6.4-1-x86_64                             337.7 KiB  1014K/s 00:00 [##################] 100%
 gettext-0.19.6-1-x86_64                             1441.4 KiB  1131K/s 00:01 [##################] 100%
 libxslt-1.1.28-7-x86_64                              121.8 KiB   372K/s 00:00 [##################] 100%
 docbook-xml-4.5-2-any                                 81.4 KiB  64.8K/s 00:01 [##################] 100%
 docbook-xsl-1.78.1-3-any                             714.3 KiB   197K/s 00:04 [##################] 100%
 asciidoc-8.6.9-4-any                                 173.6 KiB  1052K/s 00:00 [##################] 100%
 gawk-4.1.3-1-x86_64                                  951.1 KiB   755K/s 00:01 [##################] 100%
 m4-1.4.17-4-x86_64                                   200.8 KiB   637K/s 00:00 [##################] 100%
 diffutils-3.3-3-x86_64                               265.7 KiB   557K/s 00:00 [##################] 100%
 autoconf-2.69-3-any                                  584.6 KiB   615K/s 00:01 [##################] 100%
 autoconf2.13-2.13-2-any                              134.8 KiB   843K/s 00:00 [##################] 100%
 libgc-7.2.d-1-x86_64                                  60.2 KiB  8.40M/s 00:00 [##################] 100%
 libltdl-2.4.6-1-x86_64                                28.0 KiB  9.13M/s 00:00 [##################] 100%
 libunistring-0.9.6-1-x86_64                          492.2 KiB   769K/s 00:01 [##################] 100%
 libguile-2.0.11-3-x86_64                               2.1 MiB   822K/s 00:03 [##################] 100%
 autogen-5.18.4-2-x86_64                              623.9 KiB   792K/s 00:01 [##################] 100%
 automake1.6-1.6.3-2-any                              253.6 KiB   793K/s 00:00 [##################] 100%
 automake1.7-1.7.9-2-any                              296.0 KiB   911K/s 00:00 [##################] 100%
 automake1.8-1.8.5-3-any                              342.9 KiB   719K/s 00:00 [##################] 100%
 automake1.9-1.9.6-2-any                              385.5 KiB   805K/s 00:00 [##################] 100%
 automake1.10-1.10.3-3-any                            439.6 KiB   698K/s 00:01 [##################] 100%
 automake1.11-1.11.6-3-any                            489.5 KiB   622K/s 00:01 [##################] 100%
 automake1.12-1.12.6-3-any                            502.4 KiB   786K/s 00:01 [##################] 100%
 automake1.13-1.13.4-4-any                            500.0 KiB   778K/s 00:01 [##################] 100%
 automake1.14-1.14.1-3-any                            502.2 KiB   792K/s 00:01 [##################] 100%
 automake1.15-1.15-2-any                              502.0 KiB   781K/s 00:01 [##################] 100%
 automake-wrapper-10-1-any                              3.0 KiB  0.00B/s 00:00 [##################] 100%
 bison-3.0.4-1-x86_64                                1045.1 KiB   914K/s 00:01 [##################] 100%
 diffstat-1.58-1-x86_64                                20.8 KiB  20.3M/s 00:00 [##################] 100%
 dos2unix-7.3.3-1-x86_64                              311.7 KiB   950K/s 00:00 [##################] 100%
 flex-2.6.0-1-x86_64                                  280.4 KiB   863K/s 00:00 [##################] 100%
 gdb-7.9-1-x86_64                                       3.4 MiB  1030K/s 00:03 [##################] 100%
 gperf-3.0.4-3-x86_64                                  93.6 KiB  9.14M/s 00:00 [##################] 100%
 grep-2.22-1-x86_64                                   220.7 KiB   655K/s 00:00 [##################] 100%
 groff-1.22.3-1-x86_64                               1776.5 KiB  1099K/s 00:02 [##################] 100%
 perl-Locale-Gettext-1.05-4-x86_64                     11.0 KiB  10.7M/s 00:00 [##################] 100%
 help2man-1.47.3-1-x86_64                             142.3 KiB   426K/s 00:00 [##################] 100%
 perl-XML-Parser-2.44-1-x86_64                        142.7 KiB   176K/s 00:01 [##################] 100%
 intltool-0.51.0-2-x86_64                              39.4 KiB  9.61M/s 00:00 [##################] 100%
 lemon-3.8.7.0-1-x86_64                                35.2 KiB  11.5M/s 00:00 [##################] 100%
 tar-1.28-3-x86_64                                    671.9 KiB   821K/s 00:01 [##################] 100%
 libtool-2.4.6-1-x86_64                               381.6 KiB   779K/s 00:00 [##################] 100%
 libunrar-5.3.7-1-x86_64                              138.8 KiB   836K/s 00:00 [##################] 100%
 make-4.1-4-x86_64                                    387.0 KiB   791K/s 00:00 [##################] 100%
 libpipeline-1.4.0-1-x86_64                            25.7 KiB  8.36M/s 00:00 [##################] 100%
 man-db-2.7.4-1-x86_64                                477.0 KiB   739K/s 00:01 [##################] 100%
 sed-4.2.2-2-x86_64                                   671.9 KiB   689K/s 00:01 [##################] 100%
 patch-2.7.5-1-x86_64                                  75.9 KiB  10.6M/s 00:00 [##################] 100%
 patchutils-0.3.3-2-x86_64                             64.7 KiB  10.5M/s 00:00 [##################] 100%
 glib2-2.44.1-1-x86_64                               1689.1 KiB   747K/s 00:02 [##################] 100%
 pkg-config-0.28-2-x86_64                             159.4 KiB   333K/s 00:00 [##################] 100%
 pkgfile-15-1-x86_64                                   21.4 KiB  10.5M/s 00:00 [##################] 100%
 rcs-5.9.4-1-x86_64                                   164.1 KiB   508K/s 00:00 [##################] 100%
 scons-2.4.1-2-any                                    786.9 KiB   448K/s 00:02 [##################] 100%
 swig-3.0.7-1-x86_64                                 1023.2 KiB   709K/s 00:01 [##################] 100%
 texinfo-6.0-1-x86_64                                 992.7 KiB   768K/s 00:01 [##################] 100%
 texinfo-tex-6.0-1-x86_64                              25.0 KiB  12.2M/s 00:00 [##################] 100%
 ttyrec-1.0.8-1-x86_64                                 17.4 KiB  17.0M/s 00:00 [##################] 100%
 unrar-5.3.7-1-x86_64                                 110.6 KiB   203K/s 00:01 [##################] 100%
 libassuan-2.4.2-1-x86_64                              91.7 KiB  35.8K/s 00:03 [##################] 100%
 libgpgme-1.6.0-1-x86_64                              175.7 KiB  84.3K/s 00:02 [##################] 100%
 wget-1.17.1-2-x86_64                                 570.7 KiB   275K/s 00:02 [##################] 100%
 perl-YAML-Syck-1.29-1-x86_64                          60.7 KiB  9.88M/s 00:00 [##################] 100%
 perl-Module-Build-0.4212-1-any                       172.0 KiB   534K/s 00:00 [##################] 100%
 perl-Test-Pod-1.50-1-any                               8.0 KiB  0.00B/s 00:00 [##################] 100%
 xmlto-0.0.26-2-x86_64                                 23.5 KiB  7.66M/s 00:00 [##################] 100%
(143/143) キーリングのキーを確認                                               [##################] 100%
(143/143) パッケージの整合性をチェック                                         [##################] 100%
(143/143) パッケージファイルのロード                                           [##################] 100%
(143/143) ファイルの衝突をチェック                                             [##################] 100%
(143/143) 空き容量を確認                                                       [##################] 100%
:: パッケージの変更を処理しています...
(  1/143) インストール python2                                                 [##################] 100%
(  2/143) インストール libgpg-error                                            [##################] 100%
(  3/143) インストール libgcrypt                                               [##################] 100%
(  4/143) 再インストール gettext                                               [##################] 100%
(  5/143) インストール libxslt                                                 [##################] 100%
(  6/143) インストール docbook-xml                                             [##################] 100%
(  7/143) インストール docbook-xsl                                             [##################] 100%
(  8/143) インストール asciidoc                                                [##################] 100%
(  9/143) 再インストール gawk                                                  [##################] 100%
( 10/143) 再インストール m4                                                    [##################] 100%
( 11/143) インストール diffutils                                               [##################] 100%
( 12/143) インストール autoconf                                                [##################] 100%
( 13/143) インストール autoconf2.13                                            [##################] 100%
( 14/143) インストール libgc                                                   [##################] 100%
( 15/143) インストール libltdl                                                 [##################] 100%
( 16/143) インストール libunistring                                            [##################] 100%
( 17/143) インストール libguile                                                [##################] 100%
( 18/143) インストール autogen                                                 [##################] 100%
( 19/143) 再インストール perl                                                  [##################] 100%
( 20/143) インストール automake1.6                                             [##################] 100%
( 21/143) インストール automake1.7                                             [##################] 100%
( 22/143) インストール automake1.8                                             [##################] 100%
( 23/143) インストール automake1.9                                             [##################] 100%
( 24/143) インストール automake1.10                                            [##################] 100%
( 25/143) インストール automake1.11                                            [##################] 100%
( 26/143) インストール automake1.12                                            [##################] 100%
( 27/143) インストール automake1.13                                            [##################] 100%
( 28/143) インストール automake1.14                                            [##################] 100%
( 29/143) インストール automake1.15                                            [##################] 100%
( 30/143) インストール automake-wrapper                                        [##################] 100%
( 31/143) インストール bison                                                   [##################] 100%
( 32/143) インストール diffstat                                                [##################] 100%
( 33/143) インストール dos2unix                                                [##################] 100%
( 34/143) 再インストール file                                                  [##################] 100%
( 35/143) 再インストール flex                                                  [##################] 100%
( 36/143) インストール gdb                                                     [##################] 100%
( 37/143) インストール gperf                                                   [##################] 100%
( 38/143) 再インストール grep                                                  [##################] 100%
( 39/143) インストール groff                                                   [##################] 100%
( 40/143) インストール perl-Locale-Gettext                                     [##################] 100%
( 41/143) インストール help2man                                                [##################] 100%
( 42/143) インストール perl-XML-Parser                                         [##################] 100%
( 43/143) インストール intltool                                                [##################] 100%
( 44/143) インストール lemon                                                   [##################] 100%
( 45/143) インストール tar                                                     [##################] 100%
( 46/143) インストール libtool                                                 [##################] 100%
( 47/143) インストール libunrar                                                [##################] 100%
( 48/143) インストール make                                                    [##################] 100%
( 49/143) インストール libpipeline                                             [##################] 100%
( 50/143) インストール man-db                                                  [##################] 100%
it&#39;s recommended to create an initial
database running as root:
&amp;quot;/usr/bin/mandb --quiet&amp;quot;
man-db の提案パッケージ
    gzip [インストール済み]
( 51/143) 再インストール sed                                                   [##################] 100%
( 52/143) 再インストール pacman                                                [##################] 100%
( 53/143) インストール patch                                                   [##################] 100%
patch の提案パッケージ
    ed: for patch -e functionality
( 54/143) インストール patchutils                                              [##################] 100%
( 55/143) インストール glib2                                                   [##################] 100%
glib2 の提案パッケージ
    gamin: for gio fam module
    python2: for gdbus-codegen and gtester-report [インストール済み]
( 56/143) インストール pkg-config                                              [##################] 100%
( 57/143) 再インストール pkgfile                                               [##################] 100%
( 58/143) インストール rcs                                                     [##################] 100%
( 59/143) インストール scons                                                   [##################] 100%
( 60/143) インストール swig                                                    [##################] 100%
( 61/143) インストール texinfo                                                 [##################] 100%
( 62/143) インストール texinfo-tex                                             [##################] 100%
( 63/143) インストール ttyrec                                                  [##################] 100%
( 64/143) インストール unrar                                                   [##################] 100%
( 65/143) インストール libassuan                                               [##################] 100%
( 66/143) インストール libgpgme                                                [##################] 100%
( 67/143) インストール wget                                                    [##################] 100%
wget の提案パッケージ
    ca-certificates: HTTPS downloads [インストール済み]
( 68/143) インストール perl-YAML-Syck                                          [##################] 100%
( 69/143) インストール perl-Module-Build                                       [##################] 100%
( 70/143) インストール perl-Test-Pod                                           [##################] 100%
( 71/143) インストール xmlto                                                   [##################] 100%
( 72/143) インストール mingw-w64-i686-libiconv                                 [##################] 100%
( 73/143) インストール mingw-w64-i686-gmp                                      [##################] 100%
( 74/143) インストール mingw-w64-i686-libwinpthread-git                        [##################] 100%
( 75/143) インストール mingw-w64-i686-gcc-libs                                 [##################] 100%
( 76/143) インストール mingw-w64-i686-bzip2                                    [##################] 100%
( 77/143) インストール mingw-w64-i686-zlib                                     [##################] 100%
( 78/143) インストール mingw-w64-i686-binutils                                 [##################] 100%
( 79/143) インストール mingw-w64-i686-headers-git                              [##################] 100%
( 80/143) インストール mingw-w64-i686-crt-git                                  [##################] 100%
( 81/143) インストール mingw-w64-i686-isl                                      [##################] 100%
( 82/143) インストール mingw-w64-i686-mpfr                                     [##################] 100%
( 83/143) インストール mingw-w64-i686-mpc                                      [##################] 100%
( 84/143) インストール mingw-w64-i686-windows-default-manifest                 [##################] 100%
( 85/143) インストール mingw-w64-i686-winpthreads-git                          [##################] 100%
( 86/143) インストール mingw-w64-i686-gcc                                      [##################] 100%
( 87/143) インストール mingw-w64-i686-expat                                    [##################] 100%
( 88/143) インストール mingw-w64-i686-gettext                                  [##################] 100%
( 89/143) インストール mingw-w64-i686-gdbm                                     [##################] 100%
( 90/143) インストール mingw-w64-i686-libffi                                   [##################] 100%
( 91/143) インストール mingw-w64-i686-libtre-git                               [##################] 100%
( 92/143) インストール mingw-w64-i686-libsystre                                [##################] 100%
( 93/143) インストール mingw-w64-i686-ncurses                                  [##################] 100%
( 94/143) インストール mingw-w64-i686-libtasn1                                 [##################] 100%
( 95/143) インストール mingw-w64-i686-p11-kit                                  [##################] 100%
( 96/143) インストール mingw-w64-i686-ca-certificates                          [##################] 100%
( 97/143) インストール mingw-w64-i686-openssl                                  [##################] 100%
( 98/143) インストール mingw-w64-i686-termcap                                  [##################] 100%
( 99/143) インストール mingw-w64-i686-readline                                 [##################] 100%
(100/143) インストール mingw-w64-i686-tcl                                      [##################] 100%
(101/143) インストール mingw-w64-i686-tk                                       [##################] 100%
(102/143) インストール mingw-w64-i686-python2                                  [##################] 100%
(103/143) インストール mingw-w64-i686-gdb                                      [##################] 100%
(104/143) インストール mingw-w64-i686-libmangle-git                            [##################] 100%
(105/143) インストール mingw-w64-i686-make                                     [##################] 100%
(106/143) インストール mingw-w64-i686-pkg-config                               [##################] 100%
(107/143) インストール mingw-w64-i686-tools-git                                [##################] 100%
(108/143) インストール mingw-w64-x86_64-libiconv                               [##################] 100%
(109/143) インストール mingw-w64-x86_64-gmp                                    [##################] 100%
(110/143) インストール mingw-w64-x86_64-libwinpthread-git                      [##################] 100%
(111/143) インストール mingw-w64-x86_64-gcc-libs                               [##################] 100%
(112/143) インストール mingw-w64-x86_64-bzip2                                  [##################] 100%
(113/143) インストール mingw-w64-x86_64-zlib                                   [##################] 100%
(114/143) インストール mingw-w64-x86_64-binutils                               [##################] 100%
(115/143) インストール mingw-w64-x86_64-headers-git                            [##################] 100%
(116/143) インストール mingw-w64-x86_64-crt-git                                [##################] 100%
(117/143) インストール mingw-w64-x86_64-isl                                    [##################] 100%
(118/143) インストール mingw-w64-x86_64-mpfr                                   [##################] 100%
(119/143) インストール mingw-w64-x86_64-mpc                                    [##################] 100%
(120/143) インストール mingw-w64-x86_64-windows-default-manifest               [##################] 100%
(121/143) インストール mingw-w64-x86_64-winpthreads-git                        [##################] 100%
(122/143) インストール mingw-w64-x86_64-gcc                                    [##################] 100%
(123/143) インストール mingw-w64-x86_64-expat                                  [##################] 100%
(124/143) インストール mingw-w64-x86_64-gettext                                [##################] 100%
(125/143) インストール mingw-w64-x86_64-gdbm                                   [##################] 100%
(126/143) インストール mingw-w64-x86_64-libffi                                 [##################] 100%
(127/143) インストール mingw-w64-x86_64-libtre-git                             [##################] 100%
(128/143) インストール mingw-w64-x86_64-libsystre                              [##################] 100%
(129/143) インストール mingw-w64-x86_64-ncurses                                [##################] 100%
(130/143) インストール mingw-w64-x86_64-libtasn1                               [##################] 100%
(131/143) インストール mingw-w64-x86_64-p11-kit                                [##################] 100%
(132/143) インストール mingw-w64-x86_64-ca-certificates                        [##################] 100%
(133/143) インストール mingw-w64-x86_64-openssl                                [##################] 100%
(134/143) インストール mingw-w64-x86_64-termcap                                [##################] 100%
(135/143) インストール mingw-w64-x86_64-readline                               [##################] 100%
(136/143) インストール mingw-w64-x86_64-tcl                                    [##################] 100%
(137/143) インストール mingw-w64-x86_64-tk                                     [##################] 100%
(138/143) インストール mingw-w64-x86_64-python2                                [##################] 100%
(139/143) インストール mingw-w64-x86_64-gdb                                    [##################] 100%
(140/143) インストール mingw-w64-x86_64-libmangle-git                          [##################] 100%
(141/143) インストール mingw-w64-x86_64-make                                   [##################] 100%
(142/143) インストール mingw-w64-x86_64-pkg-config                             [##################] 100%
(143/143) インストール mingw-w64-x86_64-tools-git                              [##################] 100%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;base-devel&lt;/code&gt; は面倒なので全てインストール。
一部が再インストールされたが問題はなさそう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
gcc を含む toolchain については Ada, FORTRAN, Object-C の言語パッケージを除いたものをインストールした。&lt;/p&gt;

&lt;h3 id=&#34;gcc-の動作確認:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;gcc の動作確認&lt;/h3&gt;

&lt;p&gt;まずは 32bit 版の動作確認。
&lt;code&gt;mingw32_shell.bat&lt;/code&gt; を起動，または 環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; に &lt;code&gt;MINGW32&lt;/code&gt; をセットして shell を起動する。
&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; を使うのであれば以下のシーケンスで起動できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;set MSYSTEM=MINGW32 &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gcc を起動して動作確認。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gcc -v
Using built-in specs.
COLLECT_GCC=C:\msys64\mingw32\bin\gcc.exe
COLLECT_LTO_WRAPPER=C:/msys64/mingw32/bin/../lib/gcc/i686-w64-mingw32/5.3.0/lto-wrapper.exe
Target: i686-w64-mingw32
Configured with: ../gcc-5.3.0/configure --prefix=/mingw32 --with-local-prefix=/mingw32/local --build=i686-w64-mingw32 --host=i686-w64-mingw32 --target=i686-w64-mingw32 --with-native-system-header-dir=/mingw32/i686-w64-mingw32/include --libexecdir=/mingw32/lib --with-gxx-include-dir=/mingw32/include/c++/5.3.0 --enable-bootstrap --with-arch=i686 --with-tune=generic --enable-languages=c,lto,c++,objc,obj-c++,fortran,ada --enable-shared --enable-static --enable-libatomic --enable-threads=posix --enable-graphite --enable-fully-dynamic-string --enable-libstdcxx-time=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-version-specific-runtime-libs --disable-isl-version-check --enable-lto --enable-libgomp --disable-multilib --enable-checking=release --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-libiconv --with-system-zlib --with-gmp=/mingw32 --with-mpfr=/mingw32 --with-mpc=/mingw32 --with-isl=/mingw32 --with-pkgversion=&#39;Rev2, Built by MSYS2 project&#39; --with-bugurl=http://sourceforge.net/projects/msys2 --with-gnu-as --with-gnu-ld --disable-sjlj-exceptions --with-dwarf2
Thread model: posix
gcc version 5.3.0 (Rev2, Built by MSYS2 project)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に 64bit 版の動作確認。
動作確認には &lt;code&gt;mingw64_shell.bat&lt;/code&gt; を起動，または 環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; に &lt;code&gt;MINGW64&lt;/code&gt; をセットして shell を起動する。
&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; を使うのであれば以下のシーケンスで起動できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;set MSYSTEM=MINGW64 &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gcc を起動して動作確認。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gcc -v
Using built-in specs.
COLLECT_GCC=C:\msys64\mingw64\bin\gcc.exe
COLLECT_LTO_WRAPPER=C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/5.3.0/lto-wrapper.exe
Target: x86_64-w64-mingw32
Configured with: ../gcc-5.3.0/configure --prefix=/mingw64 --with-local-prefix=/mingw64/local --build=x86_64-w64-mingw32 --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --with-native-system-header-dir=/mingw64/x86_64-w64-mingw32/include --libexecdir=/mingw64/lib --with-gxx-include-dir=/mingw64/include/c++/5.3.0 --enable-bootstrap --with-arch=x86-64 --with-tune=generic --enable-languages=c,lto,c++,objc,obj-c++,fortran,ada --enable-shared --enable-static --enable-libatomic --enable-threads=posix --enable-graphite --enable-fully-dynamic-string --enable-libstdcxx-time=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-version-specific-runtime-libs --disable-isl-version-check --enable-lto --enable-libgomp --disable-multilib --enable-checking=release --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-libiconv --with-system-zlib --with-gmp=/mingw64 --with-mpfr=/mingw64 --with-mpc=/mingw64 --with-isl=/mingw64 --with-pkgversion=&#39;Rev2, Built by MSYS2 project&#39; --with-bugurl=http://sourceforge.net/projects/msys2 --with-gnu-as --with-gnu-ld
Thread model: posix
gcc version 5.3.0 (Rev2, Built by MSYS2 project)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ターゲット名が &lt;code&gt;x86_64-w64-mingw32&lt;/code&gt; となっていて非常に分かりにくいが， mingw32 版では &lt;code&gt;i686-w64-mingw32&lt;/code&gt; となっているので，なんとか区別して欲しい。&lt;/p&gt;

&lt;h2 id=&#34;gcc-のスレッドモデルと例外処理:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;gcc のスレッドモデルと例外処理&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; で提供される gcc のスレッドモデルと例外処理は以下のようになっているらしい。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;On MSYS2 I maintain only one configuration:&lt;br&gt;
32-bit: threads=posix, exceptions=dwarf&lt;br&gt;
64-bit: threads=posix, exceptions=seh&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://sourceforge.net/p/msys2/tickets/24/&#34;&gt;MSYS2 / Tickets / #24 Mingw64 downloads through msys2?&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のベースになっている &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; のスレッドモデルには win32 と posix が提供されている。 win32 は Windows ネイティブなスレッド関連関数を使っているため速いが， C++11 の thread, mutex, future はサポートしていないらしい。
一方，例外処理には SJLJ（SetJump/LongJump）， &lt;a href=&#34;http://ja.wikipedia.org/wiki/DWARF&#34;&gt;DWARF&lt;/a&gt;2， SEH（Structured Exception Handling）があり，この中では Windows ネイティブな SEH が一番速い。ただし SEH は 64bit gcc でしか対応していないため 32bit 環境では使えない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; のもうひとつの実装である &lt;a href=&#34;http://tdm-gcc.tdragon.net/&#34; title=&#34;TDM-GCC&#34;&gt;TDM-GCC&lt;/a&gt; では，スレッドモデルには posix，例外処理には SJLJ（32bit）または SEH（64bit）が設定されているようだ。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;TDM-GCC includes a pthreads emulation layer for Microsoft Windows systems, called &#34;winpthreads&#34;. This lets you use std::thread and other C++11 concurrency features in your programs, out of the box.&lt;br&gt;
[...]&lt;br&gt;
64-bit binaries use &#34;SEH&#34;, which stands for &#34;Structured Exception Handling&#34;.&lt;br&gt;
[...]&lt;br&gt;
If you create a 32-bit binary with the TDM64 edition, it will use SJLJ exception handling. DW2 exception handling is not available in this edition.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://tdm-gcc.tdragon.net/quirks&#34;&gt;TDM-GCC : Quirks&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする&#34;&gt;次回&lt;/a&gt;は実際にビルドを行う。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;ていうか，最新版が入ってるのが分かるなら，わざわざ再インストールする必要はないと思うのだが&amp;hellip;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;ちなみにオリジナルの &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; ではインストール時にスレッドモデルと例外処理を選択できる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/gcc-msys2-1/" />
		<id>tag:text.Baldanders.info,2016-03-01:/remark/2016/03/gcc-msys2-1/</id>
		<published>2016-03-01T22:02:41+09:00</published>
		<updated>2016-03-01T22:02:41+09:00</updated>
		<summary>MSYS の後継（？）とも言える MSYS2 では開発環境を 32bit と 64bit で併設できるらしい。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;これは Qiita の以下の記事からの再構成である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/ba4e8d2418bdfe0c8049&#34;&gt;MSYS2 による gcc 開発環境の構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/877cbfb970509b272fc1&#34;&gt;MSYS2 による gcc 開発環境の構築（2） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここでは以下の3部構成になっている。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;gcc-と-msys2:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;gcc と MSYS2&lt;/h2&gt;

&lt;p&gt;MSYS の後継（？）とも言える &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; ではgcc を含む開発環境を 32bit と 64bit で併設できるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msys2.github.io/&#34;&gt;MSYS2 installer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/msys2&#34;&gt;msys2&lt;/a&gt; : GitHub ページ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; を使って gcc 開発環境を構築する。&lt;/p&gt;

&lt;p&gt;なお，単に gcc が欲しいのであれば &lt;a href=&#34;http://tdm-gcc.tdragon.net/&#34; title=&#34;TDM-GCC&#34;&gt;TDM-GCC&lt;/a&gt; のほうがお勧めである。
そうではなく gcc を含む UNIX 互換の開発環境が欲しいのであれば，今回紹介する &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; が適切と思われる（UNIX 系のコマンドを Windows にポーティングする場合など）。
また開発環境は要らないが UNIX 互換の動作環境が欲しいだけなら &lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; を導入する手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:68cb36b4eea9bb94b5bc4bd2a85da6bf:gfw&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:68cb36b4eea9bb94b5bc4bd2a85da6bf:gfw&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;msys2-のインストール:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;MSYS2 のインストール&lt;/h2&gt;

&lt;p&gt;では早速 64bit 版インストーラ（今回は &lt;code&gt;msys2-x86_64-20160205.exe&lt;/code&gt; を使用）でインストールを行ってみる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25210363812/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1462/25210363812_7cd554cc78.jpg&#34; alt=&#34;MSYS2 Installing (1)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25210363812/&#34;&gt;MSYS2 Installing (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;わお！ 日本語だ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25032985150/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1540/25032985150_5bc67480e8.jpg&#34; alt=&#34;MSYS2 Installing (2)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25032985150/&#34;&gt;MSYS2 Installing (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/24960938719/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1594/24960938719_0dba3ebf95.jpg&#34; alt=&#34;MSYS2 Installing (3)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24960938719/&#34;&gt;MSYS2 Installing (3)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25210363972/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1621/25210363972_b14f16a013.jpg&#34; alt=&#34;MSYS2 Installing (4)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25210363972/&#34;&gt;MSYS2 Installing (4)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25235500391/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1473/25235500391_d1bf4d5f3b.jpg&#34; alt=&#34;MSYS2 Installing (5)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25235500391/&#34;&gt;MSYS2 Installing (5)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;このまま「完了」するとターミナル（&lt;a href=&#34;https://mintty.github.io/&#34; title=&#34;Mintty — Cygwin Terminal emulator&#34;&gt;mintty&lt;/a&gt;）が起動する。
のだが，ここでちょっと寄り道する。
「MSYS2 64bit を実行中」のチェックを外して「完了」しよう。&lt;/p&gt;

&lt;h3 id=&#34;msys2-起動モード:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;MSYS2 起動モード&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の起動バッチには以下の3つがある（64bit 版をインストールした場合）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mingw32_shell.bat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingw64_shell.bat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;msys2_shell.bat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中身はターミナルエミュレータ（既定で &lt;a href=&#34;https://mintty.github.io/&#34; title=&#34;Mintty — Cygwin Terminal emulator&#34;&gt;mintty&lt;/a&gt;）の場所を探して起動するだけだが，環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; にそれぞれ以下の値をセットしている&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;バッチファイル&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;セットする値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;mingw32_shell.bat&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MINGW32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;mingw64_shell.bat&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MINGW64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;msys2_shell.bat&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MSYS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; は &lt;code&gt;/etc/profile&lt;/code&gt; 内で参照される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;MSYS2_PATH=&amp;quot;/usr/local/bin:/usr/bin:/bin&amp;quot;
MANPATH=&amp;quot;/usr/local/man:/usr/share/man:/usr/man:/share/man:${MANPATH}&amp;quot;
INFOPATH=&amp;quot;/usr/local/info:/usr/share/info:/usr/info:/share/info:${INFOPATH}&amp;quot;
MINGW_MOUNT_POINT=
if [ -n &amp;quot;$MSYSTEM&amp;quot; ]
then
  case &amp;quot;$MSYSTEM&amp;quot; in
    MINGW32)
      MINGW_MOUNT_POINT=/mingw32
      PATH=&amp;quot;${MINGW_MOUNT_POINT}/bin:${MSYS2_PATH}:${PATH}&amp;quot;
      PKG_CONFIG_PATH=&amp;quot;${MINGW_MOUNT_POINT}/lib/pkgconfig:${MINGW_MOUNT_POINT}/share/pkgconfig&amp;quot;
      ACLOCAL_PATH=&amp;quot;${MINGW_MOUNT_POINT}/share/aclocal:/usr/share/aclocal&amp;quot;
      MANPATH=&amp;quot;${MINGW_MOUNT_POINT}/share/man:${MANPATH}&amp;quot;
    ;;
    MINGW64)
      MINGW_MOUNT_POINT=/mingw64
      PATH=&amp;quot;${MINGW_MOUNT_POINT}/bin:${MSYS2_PATH}:${PATH}&amp;quot;
      PKG_CONFIG_PATH=&amp;quot;${MINGW_MOUNT_POINT}/lib/pkgconfig:${MINGW_MOUNT_POINT}/share/pkgconfig&amp;quot;
      ACLOCAL_PATH=&amp;quot;${MINGW_MOUNT_POINT}/share/aclocal:/usr/share/aclocal&amp;quot;
      MANPATH=&amp;quot;${MINGW_MOUNT_POINT}/share/man:${MANPATH}&amp;quot;
    ;;
    MSYS)
      PATH=&amp;quot;${MSYS2_PATH}:/opt/bin:${PATH}&amp;quot;
      PKG_CONFIG_PATH=&amp;quot;/usr/lib/pkgconfig:/usr/share/pkgconfig:/lib/pkgconfig&amp;quot;
    ;;
    *)
      PATH=&amp;quot;${MSYS2_PATH}:${PATH}&amp;quot;
    ;;
  esac
else
  PATH=&amp;quot;${MSYS2_PATH}:${PATH}&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;MINGW32&lt;/code&gt; または &lt;code&gt;MINGW64&lt;/code&gt; の場合は，新たに &lt;code&gt;/mingw32&lt;/code&gt; または &lt;code&gt;/mingw64&lt;/code&gt; がパス等に追加されているのがお分かりだろうか。&lt;/p&gt;

&lt;h3 id=&#34;conemu-から-msys2-bash-を起動する:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;ConEmu から MSYS2 bash を起動する&lt;/h3&gt;

&lt;p&gt;以上から，環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; を適切に設定すれば &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の起動バッチを介さずに shell を起動しても構わないことが分かる。
ここでは &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; から &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の bash を起動することを考える。
以下のように Tasks 設定で &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の bash を起動するシーケンスを設定すればよい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22388493089/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/698/22388493089_73bb752b56.jpg&#34; alt=&#34;ConEmu Setting&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22388493089/&#34;&gt;ConEmu Setting&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;起動シーケンスは以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;set MSYSTEM=MSYS &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前半で環境変数を設定し，後半で実際に bash を呼び出している。&lt;/p&gt;

&lt;h3 id=&#34;環境変数-path-のチューニング:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;環境変数 PATH のチューニング&lt;/h3&gt;

&lt;p&gt;Windows の環境変数は &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; にも引き継がれる。
&lt;code&gt;PATH&lt;/code&gt; も同様。
ただし Windows の &lt;code&gt;PATH&lt;/code&gt; 上のアプリケーションを &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 上で動いてほしくない場合もある。
この場合は起動時に &lt;code&gt;PATH&lt;/code&gt; を書き換える。
先ほどの &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; の起動シーケンスなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;set PATH=%SystemRoot%System32 &amp;amp; set MSYSTEM=MSYS &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でいいだろう。
Windows 上の特定のツールを使いたい場合はフルパスまたはその alias で指定するほうがスマートである。&lt;/p&gt;

&lt;h2 id=&#34;初期設定:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;初期設定&lt;/h2&gt;

&lt;p&gt;では本題に戻ろう。
&lt;code&gt;msys2_shell.bat&lt;/code&gt; または環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; に &lt;code&gt;MSYS&lt;/code&gt; をセットして shell を起動し，まずはコア・パッケージを最新のものに更新する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ update-core
==&amp;gt; Update package databases...
:: パッケージデータベースの同期中...
 mingw32                                              232.6 KiB   720K/s 00:00 [##################] 100%
 mingw32.sig                                           96.0   B  93.8K/s 00:00 [##################] 100%
 mingw64                                              231.6 KiB   740K/s 00:00 [##################] 100%
 mingw64.sig                                           96.0   B  0.00B/s 00:00 [##################] 100%
 msys                                                 130.7 KiB   165K/s 00:01 [##################] 100%
 msys.sig                                              96.0   B  93.8K/s 00:00 [##################] 100%
==&amp;gt; Checking if there are critical packages to upgrade.
pacman 5.0.0.6348.cc5a8f1-1 -&amp;gt; 5.0.1.6388.dcb2397-1
==&amp;gt; Core packages require updating.
==&amp;gt; Please close all other MSYS2 derived windows (e.g. terminal
==&amp;gt; windows, Bash sessions, etc) before proceeding.
==&amp;gt; 警告: When the update has completed, you MUST close this MSYS2 window
==&amp;gt; 警告: (use Alt-F4 or red [ X ], etc.), rather than &#39;exit&#39;!!!
Press [Enter] key when ready to start update...
==&amp;gt; Updating core packages...
警告: bash-4.3.042-4 は最新です -- スキップ
警告: msys2-runtime-2.4.1.16860.40c26fc-1 は最新です -- スキップ
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (2) msys2-runtime-devel-2.4.1.16860.40c26fc-1  pacman-5.0.1.6388.dcb2397-1

合計ダウンロード容量:  10.34 MiB
合計インストール容量:  54.72 MiB
最終的なアップグレード容量:  21.12 MiB

:: インストールを行いますか？ [Y/n]
:: パッケージを取得します ...
 pacman-5.0.1.6388.dcb2397-1-x86_64                     6.8 MiB  1248K/s 00:06 [##################] 100%
 msys2-runtime-devel-2.4.1.16860.40c26fc-1-x86_64       3.5 MiB  1027K/s 00:04 [##################] 100%
(2/2) キーリングのキーを確認                                                   [##################] 100%
(2/2) パッケージの整合性をチェック                                             [##################] 100%
(2/2) パッケージファイルのロード                                               [##################] 100%
(2/2) ファイルの衝突をチェック                                                 [##################] 100%
(2/2) 空き容量を確認                                                           [##################] 100%
:: パッケージの変更を処理しています...
(1/2) 更新 pacman                                                              [##################] 100%
(2/2) インストール msys2-runtime-devel                                         [##################] 100%
Please close this window.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おや。
ツールが更新された。
&lt;code&gt;update-core&lt;/code&gt; で更新があった場合，いったん shell を閉じて起動し直す。
このとき &lt;code&gt;exit&lt;/code&gt; コマンドで終了するのではなく，強制終了する。&lt;/p&gt;

&lt;p&gt;Shell を再起動したら他のインストール済みのパッケージを更新しよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman -Su
:: システム全体の更新を開始...
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (7) curl-7.47.1-1  file-5.25-1  gnupg-1.4.20-1  libcurl-7.47.1-1  libopenssl-1.0.2.f-1
               mintty-1~2.2.3-1  openssl-1.0.2.f-1

合計ダウンロード容量:   4.40 MiB
合計インストール容量:  20.60 MiB
最終的なアップグレード容量:   0.12 MiB

:: インストールを行いますか？ [Y/n] y
:: パッケージを取得します...
 libopenssl-1.0.2.f-1-x86_64                          815.3 KiB   796K/s 00:01 [##################] 100%
 openssl-1.0.2.f-1-x86_64                            1336.9 KiB   977K/s 00:01 [##################] 100%
 libcurl-7.47.1-1-x86_64                              185.0 KiB   269K/s 00:01 [##################] 100%
 curl-7.47.1-1-x86_64                                 595.3 KiB   855K/s 00:01 [##################] 100%
 file-5.25-1-x86_64                                   396.5 KiB   767K/s 00:01 [##################] 100%
 gnupg-1.4.20-1-x86_64                               1026.9 KiB   672K/s 00:02 [##################] 100%
 mintty-1~2.2.3-1-x86_64                              147.2 KiB   436K/s 00:00 [##################] 100%
(7/7) キーリングのキーを確認                                                   [##################] 100%
(7/7) パッケージの整合性をチェック                                             [##################] 100%
(7/7) パッケージファイルのロード                                               [##################] 100%
(7/7) ファイルの衝突をチェック                                                 [##################] 100%
(7/7) 空き容量を確認                                                           [##################] 100%
:: パッケージの変更を処理しています...
(1/7) 更新 libopenssl                                                          [##################] 100%
(2/7) 更新 openssl                                                             [##################] 100%
(3/7) 更新 libcurl                                                             [##################] 100%
(4/7) 更新 curl                                                                [##################] 100%
(5/7) 更新 file                                                                [##################] 100%
(6/7) 更新 gnupg                                                               [##################] 100%
gpg: /etc/pacman.d/gnupg/trustdb.gpg: 信用データベースができました
gpg: 究極的に信用する鍵が見つかりません
gpg: Generating pacman keyring master key...
gpg: skipping control `%no-protection&#39; ()
.+++++
+++++
gpg: 鍵CD81616Cを究極的に信用するよう記録しました
gpg: Done
==&amp;gt; 信用データベースを更新...
gpg: 最小の「ある程度の信用」3、最小の「全面的信用」1、PGP信用モデル
gpg: 深さ: 0  有効性:   1  署名:   0  信用: 0-, 0q, 0n, 0m, 0f, 1u
==&amp;gt; msys2.gpg からキーを追加...
gpg: 最小の「ある程度の信用」3、最小の「全面的信用」1、PGP信用モデル
gpg: 深さ: 0  有効性:   1  署名:   0  信用: 0-, 0q, 0n, 0m, 0f, 1u
==&amp;gt; キーリングの信頼されたキーに署名...
  -&amp;gt; キーに署名 D55E7A6D7CE9BA1587C0ACACF40D263ECA25678A...
  -&amp;gt; キーに署名 123D4D51A1793859C2BE916BBBE514E53E0D0813...
  -&amp;gt; キーに署名 B91BCF3303284BF90CC043CA9F418C233E652008...
  -&amp;gt; キーに署名 9DD0D4217D75A33B896159E6DA7EF2ABAEEA755C...
==&amp;gt; 所有者信頼値をインポート...
gpg: setting ownertrust to 4
gpg: setting ownertrust to 4
gpg: setting ownertrust to 4
gpg: inserting ownertrust of 4
==&amp;gt; 信用データベースを更新...
gpg: 最小の「ある程度の信用」3、最小の「全面的信用」1、PGP信用モデル
gpg: 深さ: 0  有効性:   1  署名:   4  信用: 0-, 0q, 0n, 0m, 0f, 1u
gpg: 深さ: 1  有効性:   4  署名:   3  信用: 0-, 0q, 0n, 4m, 0f, 0u
gpg: 深さ: 2  有効性:   3  署名:   0  信用: 3-, 0q, 0n, 0m, 0f, 0u
(7/7) 更新 mintty                                                              [##################] 100%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで初期化は終了。
&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;次回&lt;/a&gt;へ続く。&lt;/p&gt;

&lt;h2 id=&#34;おまけ1-ホームディレクトリについて:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;【おまけ1】 ホームディレクトリについて&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のホームディレクトリは，インストールフォルダ直下の &lt;code&gt;home\username&lt;/code&gt; フォルダになるが， Windows 上で自前のホームディレクトリを作っている場合は，その場所を &lt;code&gt;/etc/fstab&lt;/code&gt; でマウントする手もある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:/home	/home
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合，元のフォルダにある &lt;code&gt;.profile&lt;/code&gt; ファイル等の移動も忘れないこと。&lt;/p&gt;

&lt;h2 id=&#34;おまけ2-proxy-サーバ越しのアクセス:68cb36b4eea9bb94b5bc4bd2a85da6bf&#34;&gt;【おまけ2】 Proxy サーバ越しのアクセス&lt;/h2&gt;

&lt;p&gt;Proxy サーバ越しに curl を使う場合は &lt;code&gt;~/.curlrc&lt;/code&gt; に以下の記述を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;proxy-user = &amp;quot;username:password&amp;quot;
proxy = &amp;quot;http://proxy.example.com:8080&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッケージ管理コマンドである &lt;code&gt;pacman&lt;/code&gt; を Proxy サーバ越しに使う場合は，上述の通りに curl の設定をしたうえで &lt;code&gt;/etc/pacman.conf&lt;/code&gt; ファイルの以下の記述を探し，コメントを解除する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#XferCommand = /usr/bin/curl -C - -f %u &amp;gt; %o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GnuPG で鍵サーバにアクセスする場合も， Proxy サーバ越しにアクセスするのであれば， &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt; に以下のオプションを追記する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text:gpg.conf&#34;&gt;keyserver-options http-proxy=http://username:password@proxy.example.com:8080/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実は &lt;code&gt;/etc/pacman.d/gnupg&lt;/code&gt; ディレクトリにも &lt;code&gt;gpg.conf&lt;/code&gt; ファイルがあって &lt;code&gt;pacman-key&lt;/code&gt; コマンドはこちらを見てるっぽい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:68cb36b4eea9bb94b5bc4bd2a85da6bf:gpg&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:68cb36b4eea9bb94b5bc4bd2a85da6bf:gpg&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman-key -l
/etc/pacman.d/gnupg/pubring.gpg
-------------------------------
pub   2048R/CD81616C 2016-03-01
uid                  Pacman Keyring Master Key &amp;lt;pacman@localhost&amp;gt;

pub   2048R/CA25678A 2014-09-28
uid                  Alexey Pavlov (Alexpux) &amp;lt;alexey.pawlow@gmail.com&amp;gt;
sub   2048R/2BBF340E 2014-09-28

pub   4096R/AEEA755C 2014-10-04
uid                  Martell Malone (martell) &amp;lt;martellmalone@gmail.com&amp;gt;
sub   4096R/2A292C03 2014-10-04

pub   4096R/3E0D0813 2014-09-28
uid                  Ray Donnelly (MSYS2 Developer - master key) &amp;lt;mingw.android@gmail.com&amp;gt;
sub   4096R/8603AA9D 2014-09-28

pub   2048R/3E652008 2014-09-29
uid                  Ignacio Casal Quinteiro &amp;lt;icquinteiro@gmail.com&amp;gt;
sub   2048R/64D62A76 2014-09-29

pub   2048D/A47D45A1 2013-11-11
uid                  Alexey Pavlov (Alexpux) &amp;lt;alexpux@gmail.com&amp;gt;
sub   2048g/31CF7700 2013-11-11

pub   4096R/2C51581E 2015-07-22
uid                  Martell Malone (MSYS2 Developer) &amp;lt;martellmalone@gmail.com&amp;gt;
sub   4096R/282D6707 2015-07-22

pub   4096R/4CA56930 2014-09-28
uid                  Ray Donnelly (MSYS2 Developer) &amp;lt;mingw.android@gmail.com&amp;gt;
sub   4096R/576CF231 2014-09-28
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もしかしたらこちらの &lt;code&gt;gpg.conf&lt;/code&gt; ファイルも修正する必要があるかもしれない（未確認）。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:68cb36b4eea9bb94b5bc4bd2a85da6bf:gfw&#34;&gt;&lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; には bash などの &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; サブセットを含んでいるため， &lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; の bash （通称 git bash）を起動することで UNIX 互換の動作環境を得られる。なお &lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; の環境は git を動かすための最小限のツールしか入っていないため， Git for Windows SDK も併せて導入し，その中の pacman コマンドで必要に応じてのツールを追加する。 pacman については&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;次回&lt;/a&gt;説明する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:68cb36b4eea9bb94b5bc4bd2a85da6bf:gfw&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:68cb36b4eea9bb94b5bc4bd2a85da6bf:gpg&#34;&gt;ちなみに &lt;code&gt;/etc/pacman.d/gnupg&lt;/code&gt; ディレクトリにある鍵束を GnuPG から直接見る場合には &lt;code&gt;gpg --homedir /etc/pacman.d/gnupg --list-keys&lt;/code&gt; とする。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:68cb36b4eea9bb94b5bc4bd2a85da6bf:gpg&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>gpgpdump - OpenPGP packet visualizer - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/gpgpdump-released/" />
		<id>tag:text.Baldanders.info,2016-02-07:/remark/2016/02/gpgpdump-released/</id>
		<published>2016-02-07T00:18:50+09:00</published>
		<updated>2016-02-07T11:08:40+09:00</updated>
		<summary>OpenPGP パケットの内容を視覚化する gpgpdump の 0.1.0 をリリースした。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;余暇でちまちま作っていたが，とりあえず使えるようになったので。&lt;/p&gt;

&lt;p&gt;OpenPGP パケットの内容を視覚化する &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; の 0.1.0 をリリースした。
名前でピンとくる人もいるだろうが，山本和彦さんの &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; の翻案である。
特徴は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で作成。特別なパッケージは使用していないので &lt;code&gt;go get&lt;/code&gt; コマンドのみでビルド可能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; （または &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt;）フォーマットで出力&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;RFC 4880&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc5581&#34; title=&#34;RFC 5581 - The Camellia Cipher in OpenPGP&#34;&gt;RFC 5581&lt;/a&gt; および &lt;a href=&#34;https://tools.ietf.org/html/rfc6637&#34; title=&#34;RFC 6637 - Elliptic Curve Cryptography (ECC) in OpenPGP&#34;&gt;RFC 6637&lt;/a&gt; をサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License Version 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat sig
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iF4EARMIAAYFAlTDCN8ACgkQMfv9qV+7+hg2HwEA6h2iFFuCBv3VrsSf2BREQaT1
T1ZprZqwRPOjiLJg9AwA/ArTwCPz7c2vmxlv7sRlRLUI6CdsOqhuO1KfYXrq7idI
=ZOTN
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という OpenPGP 署名データがあるとする。
これを &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; で表示すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pgpdump sig
Old: Signature Packet(tag 2)(94 bytes)
        Ver 4 - new
        Sig type - Signature of a canonical text document(0x01).
        Pub alg - Reserved for ECDSA(pub 19)
        Hash alg - SHA256(hash 8)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Sat Jan 24 11:52:15 東京 (標準時) 2015
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x31FBFDA95FBBFA18
        Hash left 2 bytes - 36 1f
        Unknown signature(pub 19)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
一方， &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; の場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpgpdump sig
[[Packet]]
  name = &amp;quot;Packet&amp;quot;
  value = &amp;quot;Signature Packet (tag 2)&amp;quot;
  note = &amp;quot;94 bytes&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Version&amp;quot;
    value = &amp;quot;4&amp;quot;
    dump = &amp;quot;04&amp;quot;
    note = &amp;quot;new&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Signiture Type&amp;quot;
    value = &amp;quot;Signature of a canonical text document (0x01)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Public-key Algorithm&amp;quot;
    value = &amp;quot;ECDSA public key algorithm (pub 19)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hash Algorithm&amp;quot;
    value = &amp;quot;SHA256 (hash 8)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hashed Subpacket&amp;quot;

    [[Packet.Item.Item]]
      name = &amp;quot;Signature Creation Time (sub 2)&amp;quot;
      value = &amp;quot;2015-01-24T11:52:15+09:00&amp;quot;
      dump = &amp;quot;54 c3 08 df&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Unhashed Subpacket&amp;quot;

    [[Packet.Item.Item]]
      name = &amp;quot;Issuer (sub 16)&amp;quot;
      value = &amp;quot;0x31FBFDA95FBBFA18&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hash left 2 bytes&amp;quot;
    dump = &amp;quot;36 1f&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Multi-precision integer&amp;quot;
    dump = &amp;quot;...&amp;quot;
    note = &amp;quot;ECDSA r (256 bits)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Multi-precision integer&amp;quot;
    dump = &amp;quot;...&amp;quot;
    note = &amp;quot;ECDSA s (252 bits)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じで同等の内容を &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; フォーマットで出力する。
また &lt;code&gt;-j&lt;/code&gt; オプションを付けると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpgpdump -j sig
{
  &amp;quot;Packet&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;Packet&amp;quot;,
      &amp;quot;value&amp;quot;: &amp;quot;Signature Packet (tag 2)&amp;quot;,
      &amp;quot;note&amp;quot;: &amp;quot;94 bytes&amp;quot;,
      &amp;quot;Item&amp;quot;: [
        {
          &amp;quot;name&amp;quot;: &amp;quot;Version&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;4&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;04&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;new&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Signiture Type&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;Signature of a canonical text document (0x01)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Public-key Algorithm&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;ECDSA public key algorithm (pub 19)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hash Algorithm&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;SHA256 (hash 8)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hashed Subpacket&amp;quot;,
          &amp;quot;Item&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;Signature Creation Time (sub 2)&amp;quot;,
              &amp;quot;value&amp;quot;: &amp;quot;2015-01-24T11:52:15+09:00&amp;quot;,
              &amp;quot;dump&amp;quot;: &amp;quot;54 c3 08 df&amp;quot;
            }
          ]
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Unhashed Subpacket&amp;quot;,
          &amp;quot;Item&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;Issuer (sub 16)&amp;quot;,
              &amp;quot;value&amp;quot;: &amp;quot;0x31FBFDA95FBBFA18&amp;quot;
            }
          ]
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hash left 2 bytes&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;36 1f&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Multi-precision integer&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;...&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;ECDSA r (256 bits)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Multi-precision integer&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;...&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;ECDSA s (252 bits)&amp;quot;
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じに &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; 形式で出力する。
だいぶ冗長な表現で申し訳ないが，解析結果を以下の &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; で正規化している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Packets - OpenPGP packets
type Packets struct {
	Packet []*Item
}

//Item - item in Packets
type Item struct {
	Name  string  `toml:&amp;quot;name&amp;quot; json:&amp;quot;name&amp;quot;`
	Value string  `toml:&amp;quot;value,omitempty&amp;quot; json:&amp;quot;value,omitempty&amp;quot;`
	Dump  string  `toml:&amp;quot;dump,omitempty&amp;quot; json:&amp;quot;dump,omitempty&amp;quot;`
	Note  string  `toml:&amp;quot;note,omitempty&amp;quot; json:&amp;quot;note,omitempty&amp;quot;`
	Item  []*Item `toml:&amp;quot;Item,omitempty&amp;quot; json:&amp;quot;Item,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の勉強用に作成した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet&#34;&gt;&lt;code&gt;golang.org/x/crypto/openpgp/packet&lt;/code&gt;&lt;/a&gt; というパッケージがあって，これを使えば簡単にできるだろうと思ったのが大間違いで，結局このパッケージで使えたのは &lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet#OpaquePacket&#34;&gt;&lt;code&gt;OpaquePacket&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet#OpaqueSubpacket&#34;&gt;&lt;code&gt;OpaqueSubpacket&lt;/code&gt;&lt;/a&gt; くらい。
実際のパケットの解析はゴリゴリとコードを書くはめになった。
いや，これだけでもだいぶ助かったけど。&lt;/p&gt;

&lt;p&gt;とはいえ，まだまだ課題はあって&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パケット解析部分のテストが未実装。つか，古いフォーマットのパケットのテストどうしよう&lt;/li&gt;
&lt;li&gt;そもそもパケット解析部分は作りが悪くて，不正なパケットを食わせると簡単に &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; が起きてしまうので全面的に書きなおす予定&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4880#section-5.6&#34;&gt;Compressed Data Packet (Tag 8)&lt;/a&gt; が未実装。どうやって実現しようか悩み中&lt;/li&gt;
&lt;li&gt;実は ECC (&lt;a href=&#34;https://tools.ietf.org/html/rfc6637&#34; title=&#34;RFC 6637 - Elliptic Curve Cryptography (ECC) in OpenPGP&#34;&gt;RFC 6637&lt;/a&gt;) がよく分かってない。もしかしたら解釈を間違えているかもしれない&lt;/li&gt;
&lt;li&gt;最終的には &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; と同等な出力を目指す&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったあたりを，これからゆっくり手を入れていこうと考えている。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:a131791b2fce306ad1e4a38715959029&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml&#34;&gt;わかる！ OpenPGP 暗号 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;プログラミング言語 Go — text.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： フェルミのパラドックス - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/30-stories/" />
		<id>tag:text.Baldanders.info,2016-01-30:/remark/2016/01/30-stories/</id>
		<published>2016-01-30T19:19:39+09:00</published>
		<updated>2016-01-30T19:19:39+09:00</updated>
		<summary>フェルミのパラドックス / GnuPG 2.1.11 released / Go 1.6 Release Candidate 1 / MIAU からの意見書</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#seti:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;フェルミのパラドックス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gpg:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;GnuPG 2.1.11 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golang:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;Go 1.6 Release Candidate 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miau:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;MIAU からの意見書&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;seti:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;フェルミのパラドックス&lt;/h2&gt;

&lt;p&gt;人類の歴史は（宇宙誕生からの時間に比べれば）極々短いものだが，この歴史の中で私たちが ETI（Extra-terrestrial Intelligence; 地球外生命体）と直接的・間接的に接触したという記録はない。
宇宙に ETI やその文明がありふれているのなら，今まで地球人が接触しなかったのは何故？ というのが「フェルミのパラドックス」の内容であり，これが ETI 非存在を示す間接的な材料となっている。&lt;/p&gt;

&lt;p&gt;最近このフェルミのパラドックスを説明する新しい説が出たらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://online.liebertpub.com/doi/10.1089/ast.2015.1387&#34;&gt;The Case for a Gaian Bottleneck: The Biology of Habitability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://science.anu.edu.au/whats-on/all-news/aliens-are-silent-because-they-are-extinct&#34;&gt;The aliens are silent because they are extinct | Science, Medicine and Health&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/01/27exolife/index-j.shtml&#34;&gt;地球外生命からコンタクトがない理由 - アストロアーツ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;もし金星や火星に初期の微生物が存在していたとしても、急速な環境の変化を安定にすることはできませんでした。一方、おそらく地球上の生物は、惑星の気候を安定させる重要な役割を果たしたのでしょう。いまだに地球外生命体の存在を示す兆候を見つけられていないのは、生物または知的生命体の誕生というよりも、惑星表面におけるフィードバック・サイクルの生物学的な制御が急速に起こることは稀だ、ということと関係が深いと思われます&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/01/27exolife/index-j.shtml&#34;&gt;地球外生命からコンタクトがない理由&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;銀河系内にどのくらい（地球人と交信可能な）知的文明が存在するか推定する方程式がある。
これが「ドレイク方程式」と呼ばれるものだ。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
    N = R_{*} \times f_p \times  n_e \times f_l \times f_i \times f_c \times L
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;各項の意味は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$R_{*}$ ： 銀河系内で年間で誕生する恒星の数&lt;/li&gt;
&lt;li&gt;$f_p$ ： その恒星が惑星を持つようになる確率&lt;/li&gt;
&lt;li&gt;$n_e$ ： それらの中で生命の発生し得る条件を備えた惑星の数&lt;/li&gt;
&lt;li&gt;$f_l$ ： その惑星の中に実際に生命が発生し得る確率&lt;/li&gt;
&lt;li&gt;$f_i$ ： その生命が知性を持つに至る確率&lt;/li&gt;
&lt;li&gt;$f_c$ ： 彼らが実際に恒星間電波通信を行うまでに進歩する確率&lt;/li&gt;
&lt;li&gt;$L$ ： その文明の寿命&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;である。&lt;/p&gt;

&lt;p&gt;この式の評価は色々あるのだが，金子隆一著『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;ファースト・コンタクト―地球外知性体と出会う日&lt;/a&gt;』では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$R_{*} = 20$&lt;/li&gt;
&lt;li&gt;$f_p = 0.25$&lt;/li&gt;
&lt;li&gt;$n_e = 1.5$&lt;/li&gt;
&lt;li&gt;$f_l = 0.75$&lt;/li&gt;
&lt;li&gt;$f_i = 0.5$&lt;/li&gt;
&lt;li&gt;$f_c = 0.5$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と見積もられていた。
つまり $N = 1.4L$ となる。
仮に恒星間電波通信が可能な文明の寿命を1万年とするなら約1万4千の地球外文明が存在し得ることになる。
ちなみに地球人が電波を通信手段として使うようになってからまだ150年も経っていない。
さらに宇宙に向けて「アレシボ・メッセージ」を送ったのは1974年末。
「つい最近」の出来事である。&lt;/p&gt;

&lt;p&gt;後半の $f_i$, $f_c$, $L$ 以外はほぼ物理的要因で決まると言ってよい。
また $L$ の唯一のサンプルは地球文明なので，地球文明が長く続ければ続くほど $L$ が大きく見積もれることになる。&lt;/p&gt;

&lt;p&gt;しかし今回の論文から， $n_e$ や $f_l$ といった項が実はかなり小さい値なのではないか，と考えることもできる。
さて，現在の学者さん達はドレイク方程式をどのように解釈するだろうか。&lt;/p&gt;

&lt;p&gt;そうそう。
&lt;a href=&#34;http://setiathome.ssl.berkeley.edu/&#34;&gt;SETI@home&lt;/a&gt; はバージョン 8 がリリースされている。
自宅マシンでは順調に稼働中。
Android 版もあるよ。&lt;/p&gt;

&lt;h2 id=&#34;gpg:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;GnuPG 2.1.11 released&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.1.11 が出た。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q1/000383.html&#34;&gt;[Announce] GnuPG 2.1.11 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;セキュリティ・アップデートはなし。
主な変更点は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: New command &amp;ndash;export-ssh-key to replace the gpgkey2ssh tool.&lt;/li&gt;
&lt;li&gt;gpg: Allow to generate mail address only keys with &amp;ndash;gen-key.&lt;/li&gt;
&lt;li&gt;gpg: &amp;ldquo;&amp;ndash;list-options show-usage&amp;rdquo; is now the default.&lt;/li&gt;
&lt;li&gt;gpg: Make lookup of DNS CERT records holding an URL work.&lt;/li&gt;
&lt;li&gt;gpg: Emit PROGRESS status lines during key generation.&lt;/li&gt;
&lt;li&gt;gpg: Don&amp;rsquo;t check for ambigious or non-matching key specification in the config file or given to &amp;ndash;encrypt-to.  This feature will return in 2.3.x.&lt;/li&gt;
&lt;li&gt;gpg: Lock keybox files while updating them.&lt;/li&gt;
&lt;li&gt;gpg: Solve rare error on Windows during keyring and Keybox updates.&lt;/li&gt;
&lt;li&gt;gpg: Fix possible keyring corruption. (bug#2193)&lt;/li&gt;
&lt;li&gt;gpg: Fix regression of &amp;ldquo;bkuptocard&amp;rdquo; sub-command in &amp;ndash;edit-key and remove &amp;ldquo;checkbkupkey&amp;rdquo; sub-command introduced with 2.1.  (bug#2169)&lt;/li&gt;
&lt;li&gt;gpg: Fix internal error in gpgv when using default keyid-format.&lt;/li&gt;
&lt;li&gt;gpg: Fix &amp;ndash;auto-key-retrieve to work with dirmngr.conf configured keyservers. (bug#2147).&lt;/li&gt;
&lt;li&gt;agent: New option &amp;ndash;pinentry-timeout.&lt;/li&gt;
&lt;li&gt;scd: Improve unplugging of USB readers under Windows.&lt;/li&gt;
&lt;li&gt;scd: Fix regression for generating RSA keys on card.&lt;/li&gt;
&lt;li&gt;dirmmgr: All configured keyservers are now searched.&lt;/li&gt;
&lt;li&gt;dirmngr: Install CA certificate for hkps.pool.sks-keyservers.net. Use this certiticate even if &amp;ndash;hkp-cacert is not used.&lt;/li&gt;
&lt;li&gt;gpgtar: Add actual encryption code.  gpgtar does now fully replace gpg-zip.&lt;/li&gt;
&lt;li&gt;gpgtar: Fix filename encoding problem on Windows.&lt;/li&gt;
&lt;li&gt;Print a warning if a GnuPG component is using an older version of gpg-agent, dirmngr, or scdaemon.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;golang:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;Go 1.6 Release Candidate 1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の 1.6 RC 版が登場。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/pXcUuFHc4YE&#34;&gt;Go 1.6 Release Candidate 1 is released - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Our goal is to release the final version of Go 1.6 in around two weeks.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/pXcUuFHc4YE&#34;&gt;Go 1.6 Release Candidate 1 is released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;だそうで，楽しみである。&lt;/p&gt;

&lt;h2 id=&#34;miau:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;MIAU からの意見書&lt;/h2&gt;

&lt;p&gt;MIAU から「知的財産推進計画2016」が公開されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://miau.jp/index1453962972.phtml&#34;&gt;MIAU : 知的財産戦略本部「知的財産推進計画2016」策定に当たっての意見募集に、意見書を提出しました。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容については概ね同意。
つか， MIAU って仕事してるんだねぇ（笑）&lt;/p&gt;

&lt;p&gt;でもこれって効果あるのかねぇ。
やらないよりはマシだろうけど。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41GPXP2HRVL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;ファースト・コンタクト―地球外知性体と出会う日 (文春新書)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;金子 隆一 &lt;/dd&gt;&lt;dd&gt;文藝春秋 1998-10&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;地球外文明探査の歴史を俯瞰する良書。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-30&#34;&gt;2016-01-30&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： Go コンパイラのセキュリティアップデートがあるらしい - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/09-stories/" />
		<id>tag:text.Baldanders.info,2016-01-09:/remark/2016/01/09-stories/</id>
		<published>2016-01-09T18:59:13+09:00</published>
		<updated>2016-01-09T18:59:13+09:00</updated>
		<summary>Go コンパイラのセキュリティアップデートがあるらしい / GnuPG 1.4.20 released / GitLab.com にアカウントを作った / くそな「中間者デバイス」が SHA-1 廃止の邪魔をする</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;年末忙しくて書き損ねてるネタを回収中。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#go:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;Go コンパイラのセキュリティアップデートがあるらしい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gpg:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GnuPG 1.4.20 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gl:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GitLab.com にアカウントを作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mitm:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;くそな「中間者デバイス」が SHA-1 廃止の邪魔をする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;go:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;Go コンパイラのセキュリティアップデートがあるらしい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/MLaPAPFlCNY&#34;&gt;[security] Go 1.5.3 pre-announcement - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳細は示されてないが13日（日本時間だと14日かな）を待つことにしよう。
来週は月例のセキュリティ更新週間である。&lt;/p&gt;

&lt;h2 id=&#34;gpg:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GnuPG 1.4.20 released&lt;/h2&gt;

&lt;p&gt;昨年の話で申し訳ないが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2015q4/000382.html&#34;&gt;[Announce] GnuPG 1.4.20 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;セキュリティアップデートではないが既定の動作が変わるようである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reject signatures made using the MD5 hash algorithm unless the new option &amp;ndash;allow-weak-digest-algos or &amp;ndash;pgp2 are given.&lt;/li&gt;
&lt;li&gt;New option &amp;ndash;weak-digest to specify hash algorithms which should be considered weak.&lt;/li&gt;
&lt;li&gt;Changed default cipher for symmetric-only encryption to AES-128.&lt;/li&gt;
&lt;li&gt;Fix for DoS when importing certain garbled secret keys.&lt;/li&gt;
&lt;li&gt;Improved error reporting for secret subkey w/o corresponding public subkey.&lt;/li&gt;
&lt;li&gt;Improved error reporting in decryption due to wrong algorithm.&lt;/li&gt;
&lt;li&gt;Fix cluttering of stdout with trustdb info in double verbose mode.&lt;/li&gt;
&lt;li&gt;Pass a DBUS envvar to gpg-agent for use by gnome-keyring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GnuPG というか OpenPGP が後生大事に MD5 を残しているのは過去の資産への対応のためであろう。&lt;/p&gt;

&lt;p&gt;ちなみに PGP の最初のリリースは1991年で，実に四半世紀も前である。
作者の &lt;a href=&#34;https://www.philzimmermann.com/&#34;&gt;Phil Zimmermann&lt;/a&gt; は当時，米国内反核運動の活動家であった。
更に暗号技術に対する政治的圧力は現在と比較にならないほど厳しく，米国は長いあいだ彼をマークし続けた。
PGP の広まり方や改良のプロセスは実に「インターネット的」であった。
詳しくは Steven Levy の『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化（Crypto）&lt;/a&gt;』をどうぞ。&lt;/p&gt;

&lt;p&gt;あれからネットも随分変わったが，当時政府が何をしたか企業は何をしたか「暗号アナーキスト」たちはどうしたか。
現在のネットは先人の努力により「勝ち取った」ものであることを私たちは絶対に忘れてはならない。&lt;/p&gt;

&lt;p&gt;自由そのものは自由ではない。
勝ち取ったものはいつか奪われる。
奪われたくなければ勝ち続けなければならない。&lt;/p&gt;

&lt;h2 id=&#34;gl:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GitLab.com にアカウントを作った&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masakura/items/e679c094e8afea9a4879&#34;&gt;GitLab/GitLab.com 勉強会 (2015/12/09) レポート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ見て &lt;a href=&#34;https://gitlab.com/&#34; title=&#34;GitLab&#34;&gt;GitLab.com&lt;/a&gt; にアカウントを作ってみた。
とりあえず中身は空っぽ。
公開リポジトリを &lt;a href=&#34;https://gitlab.com/&#34; title=&#34;GitLab&#34;&gt;GitLab.com&lt;/a&gt; に作るメリットはない気もするが，容量が 10GB/repos あるのはありがたい。&lt;/p&gt;

&lt;p&gt;まぁ，どう使うかはこれからおいおい考える。
今年あたり，どっかにサーバでも借りて私用リポジトリ・サービスを立ち上げてみたいのだが，これもおいおい。&lt;/p&gt;

&lt;h2 id=&#34;mitm:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;くそな「中間者デバイス」が SHA-1 廃止の邪魔をする&lt;/h2&gt;

&lt;p&gt;いやもうこれは笑うところだよね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35075954/&#34;&gt;「Firefox」、SHA-1証明書のサポートを一時的に復活&amp;ndash;HTTPSサイトのアクセスに問題 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1601/08/news069.html&#34;&gt;FirefoxのSHA-1廃止で一部ユーザーに障害、サポート復活 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;Barnes氏は次のように説明している。「ユーザーがHTTPSサイトへの接続を試みると、中間者デバイスがFirefoxに対し、サーバの本物の証明書でなく新規のSHA-1証明書を送信する」&lt;br&gt;
「Firefoxは新規のSHA-1証明書を拒否するため、サーバに接続できない」（同氏）&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35075954/&#34;&gt;「Firefox」、SHA-1証明書のサポートを一時的に復活--HTTPSサイトのアクセスに問題&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/remark/2015/problem-of-sha1-collision/&#34;&gt;SHA-1 衝突問題： 廃止の前倒し&lt;/a&gt;」でも紹介したが， SHA-1 の危殆化はかなり現実的な問題になってきている。
いますぐどうこうというわけではないが，これ以上の先延ばしは出来ない状態である。
しかし CA やブラウザが頑張っても「中間者デバイス」なる覗き屋が邪魔をする。&lt;/p&gt;

&lt;p&gt;やはりセキュリティ製品が暗号通信に対して「中間者攻撃」を仕掛けるのは筋が悪すぎると思うのだが，何とかならないものかねぇ。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>NYAGOS 4.1-beta がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/nyagos-4_1_beta/" />
		<id>tag:text.Baldanders.info,2015-12-20:/remark/2015/nyagos-4_1_beta/</id>
		<published>2015-12-20T16:31:06+09:00</published>
		<updated>2015-12-21T10:36:09+09:00</updated>
		<summary>4.1 で大きく変わったのはコールバック関数の扱いのようだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;ここのところ忙しくしてたら，いつの間にか &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; の &lt;a href=&#34;https://github.com/zetamatta/nyagos/releases/tag/4.1-beta&#34;&gt;4.1-beta&lt;/a&gt; が出てた。
4.1 で大きく変わったのはコールバック関数の扱いのようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クラッシュ回避のため、全てのLua のコールバック関数はそれぞれの Lua インスタンスを持つようにした。（つまり、.nyagos で定義されたグローバル変数は、全てのコールバック関数から見ることができなくなった）&lt;/li&gt;
&lt;li&gt;コールバック関数と .nyagos 間で値を共有するため、テーブル share[] を作った&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コールバック関数の挙動が変わったのは&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この制限は、クラッシュ回避のため、コールバック関数ごとに別の Lua インスタンスを用意しているためです。エイリアス等は別の goroutine 内で呼ばれるのですが、4.0 では、この時同一の Lua インスタンスを使用していたため、時にスタックに矛盾が発生して、クラッシュすることがあったのです。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c08586c85fa73c182a7a&#34;&gt;nyagosスクリプト解説 - CMD.EXEで化けさせず、nyagosの中だけプロンプトをカラー化&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ということらしい。&lt;/p&gt;

&lt;p&gt;実は &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; で表示するプロンプトは以下の記事を参考にオリジナルの &lt;code&gt;%PROMPT%&lt;/code&gt; から変えている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c08586c85fa73c182a7a&#34;&gt;nyagosスクリプト解説 - CMD.EXEで化けさせず、nyagosの中だけプロンプトをカラー化 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前のプロンプト定義は以下のような感じだった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Simple Prompt for CMD.EXE
set{
    PROMPT=&#39;$L&#39;.. nyagos.getenv(&#39;COMPUTERNAME&#39;) .. &#39;:$P$G$_$$$s&#39;
}

-- Coloring Prompt for NYAGOS.exe
local prompter=nyagos.prompt
nyagos.prompt = function(this)
    return prompter(&#39;$e[36;40;1m&#39;..this..&#39;$e[37;1m&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この中の &lt;code&gt;prompter&lt;/code&gt; がコールバック関数から見えなくなったということらしい。
そこで以下のようにコードを変更するのだそうだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Simple Prompt for CMD.EXE
nyagos.env.prompt=&#39;$L&#39;.. nyagos.getenv(&#39;COMPUTERNAME&#39;) .. &#39;:$P$G$_$$$s&#39;

-- Coloring Prompt for NYAGOS.exe
share.org_prompter=nyagos.prompt
nyagos.prompt = function(this)
    return share.org_prompter(&#39;$e[36;40;1m&#39;..this..&#39;$e[37;1m&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポイントは &lt;code&gt;share.org_prompter=nyagos.prompt&lt;/code&gt; の部分。
オリジナルの &lt;code&gt;nyagos.prompt()&lt;/code&gt; 関数を &lt;code&gt;share[]&lt;/code&gt; テーブルに退避させている。&lt;/p&gt;

&lt;p&gt;これでめでたく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\program\nyagos&amp;gt;nyagos.exe
Nihongo Yet Another GOing Shell 4.1-beta-amd64 Powered by go1.5.2 &amp;amp; Lua 5.3
Copyright (c) 2014,2015 HAYAMA_Kaoru and NYAOS.ORG
&amp;lt;VENUS:C:/program/nyagos&amp;gt;
$ ls
Doc/               lua53.dll          nyagos.lua*        specialfolders.js*
catalog.d/         makeicon.cmd*      nyole.dll
license.txt        nyagos.d/          readme.md
lnk.js*            nyagos.exe*        readme_ja.md
&amp;lt;VENUS:C:/program/nyagos&amp;gt;
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示できるようになった（カラーでお見せできないのが残念です）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:98f564c311f7795b2925fd0f13551316:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:98f564c311f7795b2925fd0f13551316:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;実は私もプロンプトは折り返す派。
開発環境ではフォルダがかなり深くなることがあり，既存の &lt;code&gt;$P$G&lt;/code&gt; では見づらいのだ。
まぁこれは Windows に限らないのだが。&lt;/p&gt;

&lt;h2 id=&#34;参考:98f564c311f7795b2925fd0f13551316&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/nyagos-and-lua/&#34;&gt;NYAGOS で Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/75840096f8279dd641a8&#34;&gt;何がちがう？NYAGOS 4.0 と 4.1β - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:98f564c311f7795b2925fd0f13551316:a&#34;&gt;そういや昔の UNIX ワークステーションはホスト名に venus とか惑星名を付けてるところが多かったな。私がネットワーク管理者をしてた時はプロキシサーバに janus とか付けてた。若気の至りである（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:98f564c311f7795b2925fd0f13551316:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>あまり使わないけど，たまに使おうとすると忘れてる Git コマンド集 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/git-commands/" />
		<id>tag:text.Baldanders.info,2015-12-09:/remark/2015/git-commands/</id>
		<published>2015-12-09T20:14:59+09:00</published>
		<updated>2016-03-01T16:54:07+09:00</updated>
		<summary>git 各コマンドに関する覚え書き。思い出したら追記予定。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; 各コマンドに関する覚え書き。
思い出したら追記予定。&lt;/p&gt;

&lt;h2 id=&#34;submodule-の作成から削除まで:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の作成から削除まで&lt;/h2&gt;

&lt;h3 id=&#34;submodule-の作成:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の作成&lt;/h3&gt;

&lt;p&gt;Repository に別の repository &lt;code&gt;sub_repo.git&lt;/code&gt; を submodule として &lt;code&gt;subdir&lt;/code&gt; に追加する場合は以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add sub_repo.git subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;submodule-の初期化:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の初期化&lt;/h3&gt;

&lt;p&gt;Submodule を含む repository を clone してきた場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone repo.git
$ cd repo/subdir
$ git submodule init
$ git submodule update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone --recursive repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で初期化できる。
これ以降， remote 側から fetch/maerge した際に submodule の参照ポイントが変更されていた場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で初期化できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;submodule-の更新:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の更新&lt;/h3&gt;

&lt;p&gt;Submodule の remote 側の変更を pull する場合は以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --remote subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fetch したデータを merge する場合は &lt;code&gt;--merge&lt;/code&gt; オプションを， rebase する場合は &lt;code&gt;--rebase&lt;/code&gt; オプションを付ける&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;submodule-の削除:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の削除&lt;/h3&gt;

&lt;p&gt;Repository から submodule を削除する場合は以下のコマンドで削除できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule deinit subdir
$ git rm subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remote-repository-の接続設定:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository の接続設定&lt;/h2&gt;

&lt;h3 id=&#34;remote-repository-への-uri-を変更する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository への URI を変更する&lt;/h3&gt;

&lt;p&gt;Remote repository （通常は &lt;code&gt;origin&lt;/code&gt;）の接続先 URI を変更するには以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote set-url origin new_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remote-repository-との接続を追加する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository との接続を追加する&lt;/h3&gt;

&lt;p&gt;新たに remote repository との接続を追加する場合には以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote add upstream up_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは追加した remote repository に &lt;code&gt;upstream&lt;/code&gt; と名前をつけている。
たとえば fork した repository で作業する際に fork 元の repository の変更も取り込みたい場合などに有効である。&lt;/p&gt;

&lt;h3 id=&#34;remote-repository-との接続を削除する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository との接続を削除する&lt;/h3&gt;

&lt;p&gt;Remote repository との接続を削除する場合には以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote rm upstream
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;repository-の分離:426366135f9b7036b5475695fbc6d142&#34;&gt;Repository の分離&lt;/h2&gt;

&lt;p&gt;Repository の特定のディレクトリ &lt;code&gt;subdir&lt;/code&gt; を commit tree を維持したまま分離したいときの手順。&lt;/p&gt;

&lt;p&gt;まず元の repository &lt;code&gt;org_repo.git&lt;/code&gt; を clone する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone org_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clone 元の bare repository がない場合にはローカルの repository を丸ごとどっかにコピーすればよい（commit 済みであること）。&lt;/p&gt;

&lt;p&gt;で， clone した repository 内に入って &lt;code&gt;git filter-branch&lt;/code&gt; コマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd org_repo
$ git filter-branch --subdirectory-filter subdir HEAD
Rewrite **************************************** (999/999)
Ref &#39;refs/heads/master&#39; was rewritten
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このとき &lt;code&gt;subdir&lt;/code&gt; 以下のファイル・ディレクトリが repository のトップ・ディレクトリに移動するので注意が必要である。
また，オリジナルの commit tree が &lt;code&gt;refs/original/refs/heads/master&lt;/code&gt; として残っているので以下のコマンドで削除する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git update-ref -d refs/original/refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成した repository はそのまま使うなり新しい bare repository に push するなりすればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote set-url origin new_repo.git
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;元の repository に push しようとすると怒られる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;remote-repository-の-branch-を削除する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository の branch を削除する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; とかで余計な branch を作っちゃって削除したい時。
ローカルの clone から以下の引数で push すればいいようだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git push origin :wrong-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://passingloop.tumblr.com/post/18015576208/remove-remote-branches-by-git-push&#34;&gt;passingloop • 復習 Git: GitHub のブランチを削除する．&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.ruedap.com/2011/02/08/git-github-delete-tag&#34;&gt;GitHubで付けたタグを削除する - アインシュタインの電話番号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-に関するブックマーク:426366135f9b7036b5475695fbc6d142&#34;&gt;Git に関するブックマーク&lt;/h2&gt;

&lt;p&gt;ついでなので，ローカルで溜め込んでいた &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; に関するブックマークを挙げておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;Git for Windows&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kumazo@github/items/2169e1ee7be278f82b94&#34;&gt;Git for Windows で日本語を使いたい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gitextensions.github.io/&#34;&gt;Git Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kinokoru.jp/archives/1017&#34;&gt;【Git入門者向け】イメージで理解するGitコマンド事始め | きのこる庭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kray.jp/blog/git-pull-rebase/&#34;&gt;git pull と git pull –rebase の違いって？図を交えて説明します！ | KRAY Inc&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Teloo/items/95a860ae276b49edb040&#34;&gt;Git - pull は本当に fetch + merge なの？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/doilux/items/b5a9abd95ac91e848a5f&#34;&gt;Gitのこれやめて！リスト - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kiida/items/0d51c43ac73f14f09f5a&#34;&gt;Git LFSが1.0になってGitHubで使えるようになったので試してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/crifff/items/32ffc824f69ed5632217&#34;&gt;git-lfsは大容量のファイルを扱うもので多量のファイルを扱うものではない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-h.hatenablog.com/entry/2013/12/07/093423&#34;&gt;gitで重いリポジトリをcloneするとき - webネタ&lt;/a&gt; （&lt;a href=&#34;http://qiita.com/butchi_y/items/cc0fe50acc47c1e3ab32&#34;&gt;Qiita 版&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;Git - サブモジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://raimon49.github.io/2015/04/04/git-submodule-deinit.html&#34;&gt;Gitのsubmoduleをお手軽に削除する - Steel Dragon 14106&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/hiratara/20091112/1258023732&#34;&gt;Gitリポジトリ中のサブディレクトリを別のリポジトリにする - 北海道苫小牧市出身のPGが書くブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gozuk16.hatenablog.com/entry/2015/04/24/145714&#34;&gt;Gitリポジトリのディレクトリ構成を変えて別リポジトリにする - ごずろぐ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/go_astrayer/items/6e39d3ab16ae8094496c&#34;&gt;Git リポジトリに上がっているファイルを履歴ごと消すには？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hirogw/items/3ea3a321a367740e971a&#34;&gt;マージされてない他者のプルリクを取り込む - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sagaraya/items/60e983856e16dc571f22&#34;&gt;git commit時に英語でメッセージ書くためのヒントを表示する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Kenya/items/f72fba8fecc79d1b090c&#34;&gt;【Git】コミットに規約をつくる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/waterada/items/44f270a659370809e1dc&#34;&gt;git reset のやり方 備忘録 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;github:426366135f9b7036b5475695fbc6d142&#34;&gt;GitHub&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://meme.efcl.info/2011/07/gitcloneerror-setting-certificate.html&#34;&gt;githubからclone時にerror setting certificate verify locationsがでる | MemeTodo&lt;/a&gt; : うちでもなっていろいろ大変だった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dtan4/items/34e41e3bd40a43fd8cbf&#34;&gt;GitHub にパスワードとかセンシティブなファイルを push してしまったときの対処法 - Qiita&lt;/a&gt; : GitHub などリモートのリポジトリに上げてしまうと，とてつもなく面倒になるので，要注意&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yo1000/items/8ffe225716ba3b064697&#34;&gt;Github のブランチ保護を使用してリスキーなマージを防止する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/using-ssh-over-the-https-port/&#34;&gt;Using SSH over the HTTPS port - User Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;git-flow-and-github-flow:426366135f9b7036b5475695fbc6d142&#34;&gt;Git-flow and GitHub-flow&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scottchacon.com/2011/08/31/github-flow.html&#34;&gt;GitHub Flow – Scott Chacon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;GitHub Flow (Japanese translation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;A successful Git branching model » nvie.com&#34;&gt;A successful Git branching model » nvie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;git-flow cheatsheet&#34;&gt;git-flow cheatsheet&lt;/a&gt; （日本語）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://komaken.me/blog/2013/09/09/git-flow%E3%81%A8github-flow%E3%81%96%E3%81%A3%E3%81%8F%E3%82%8A%E3%81%BE%E3%81%A8%E3%82%81/&#34;&gt;git flowとgithub flowざっくりまとめ | KentaKomai Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.qnyp.com/2013/05/28/pull-request-for-github-beginners/&#34;&gt;GitHub初心者はForkしない方のPull Requestから入門しよう | qnyp blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/anqooqie/items/07367b2b5932f3acfc38&#34;&gt;Git for Windows 2.xのシステムコンフィグファイルは2つある - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eaglesakura/items/4fa17bf1f2b6683e6520&#34;&gt;小規模開発のgit-flowの導入を楽にするブランチルールと拡張スクリプト配布 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;code&gt;--recursive&lt;/code&gt; オプションなしで cloneした 直後は &lt;code&gt;git update&lt;/code&gt; では初期化できないので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;Rebase は歴史の改変なので取り扱いに注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;code&gt;-f&lt;/code&gt; オプションを付けて強制的に push することは可能。ただしこれは（rebase と同じで）歴史の改変になるため取り扱いに注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Glide で Vendoring - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/vendoring-with-glide/" />
		<id>tag:text.Baldanders.info,2015-12-07:/golang/vendoring-with-glide/</id>
		<published>2015-12-07T23:30:21+09:00</published>
		<updated>2015-12-23T12:59:00+09:00</updated>
		<summary>Go 言語 1.5 の vendoring 機能をサポートするツールが glide である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;以前「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt; 1.5 の vendoring 機能を紹介したが，この vendoring のヘルパ・ツールと言えるのが &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; である。
&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では依存する外部パッケージの情報を YAML 形式の定義ファイルに記述し，この定義ファイルを基に外部パッケージの管理を行う。&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; 0.8 から挙動が少し変わった。
この記事では 0.8.2 を使っている）&lt;/p&gt;

&lt;h2 id=&#34;glide-のインストール:721380b38042a10816ac6a323733a866&#34;&gt;Glide のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は自身も &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; で外部パッケージを管理している。
なので最初は &lt;code&gt;go get&lt;/code&gt; ではなく &lt;a href=&#34;https://github.com/Masterminds/glide/releases&#34;&gt;Releases&lt;/a&gt; ページからビルド済みのものを取得することをお勧めする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;既に &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; が利用可能な状態なら，以下の要領でビルドできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\glide&amp;gt;SET GOPATH=C:\workspace\glide

C:\workspace\glide&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\glide&amp;gt;git clone git@github.com:Masterminds/glide.git src\github.com\Masterminds\glide
Cloning into &#39;src\github.com\Masterminds\glide&#39;...
remote: Counting objects: 2292, done.
remote: Compressing objects: 100% (65/65), done.
remote: Total 2292 (delta 34), reused 0 (delta 0), pack-reused 2292
Receiving objects: 100% (2292/2292), 468.01 KiB | 397.00
Receiving objects: 100% (2292/2292), 537.97 KiB | 397.00 KiB/s, done.
Resolving deltas: 100% (1578/1578), done.
Checking connectivity... done.

C:\workspace\glide&amp;gt;pushd src\github.com\Masterminds\glide

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;glide install
[INFO] Fetching updates for github.com/codegangsta/cli.
[INFO] Fetching updates for github.com/Masterminds/cookoo.
[INFO] Fetching updates for github.com/Masterminds/vcs.
[INFO] Fetching updates for gopkg.in/yaml.v2.
[INFO] Fetching updates for github.com/Masterminds/semver.
[INFO] Setting version for github.com/Masterminds/cookoo to 78aa11ce75e257c51be7ea945edb84cf19c4a6de.
[INFO] Setting version for github.com/Masterminds/semver to 6333b7bd29aad1d79898ff568fd90a8aa533ae82.
[INFO] Setting version for github.com/codegangsta/cli to b5232bb2934f606f9f27a1305f1eea224e8e8b88.
[INFO] Setting version for github.com/Masterminds/vcs to eaee272c8fa4514e1572e182faecff5be20e792a.
[INFO] Setting version for gopkg.in/yaml.v2 to f7716cbe52baa25d2e9b0d0da546fcf909fc16b4.

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;popd

C:\workspace\glide&amp;gt;go install -v ./...
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io
github.com/Masterminds/glide/msg
github.com/Masterminds/glide/gb
github.com/Masterminds/glide/vendor/gopkg.in/yaml.v2
github.com/Masterminds/glide/vendor/github.com/Masterminds/semver
github.com/Masterminds/glide/vendor/github.com/codegangsta/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/safely
github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/sql
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/active
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/convert
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/fmt
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/example
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/log
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web/auth
github.com/Masterminds/glide/util
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/doc
github.com/Masterminds/glide/cfg
github.com/Masterminds/glide/dependency
github.com/Masterminds/glide/cmd
github.com/Masterminds/glide

C:\workspace\glide&amp;gt;bin\glide.exe -v
glide version dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単な使い方は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt; glide -h
NAME:
   glide - The lightweight vendor package manager for your Go projects.

Each project should have a &#39;glide.yaml&#39; file in the project directory. Files
look something like this:

        package: github.com/Masterminds/glide
        imports:
                - package: github.com/Masterminds/cookoo
                  vcs: git
                  ref: 1.1.0
                  subpackages: **
                - package: github.com/kylelemons/go-gypsy
                  subpackages: yaml
                        flatten: true

NOTE: As of Glide 0.5, the commands &#39;in&#39;, &#39;into&#39;, &#39;gopath&#39;, &#39;status&#39;, and &#39;env&#39;
no longer exist.


USAGE:
   glide [global options] command [command options] [arguments...]

VERSION:
   0.8.2

COMMANDS:
   create, init Initialize a new project, creating a glide.yaml file
   get          Install one or more packages into `vendor/` and add dependency to glide.yaml.
   import       Import files from other dependency management systems.
   name         Print the name of this project.
   novendor, nv List all non-vendor paths in a directory.
   rebuild      Rebuild (&#39;go build&#39;) the dependencies
   install, i   Install a project&#39;s dependencies
   update, up   Update a project&#39;s dependencies
   tree         Tree prints the dependencies of this project as a tree.
   list         List prints all dependencies that Glide could discover.
   about        Learn about Glide
   help, h      Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --yaml, -y &amp;quot;glide.yaml&amp;quot;              Set a YAML configuration file.
   --quiet, -q                          Quiet (no info or debug messages)
   --debug                              Print Debug messages (verbose)
   --home &amp;quot;C:\Users\username\.glide&amp;quot;    The location of Glide files [$GLIDE_HOME]
   --no-color                           Turn off colored output for log messages
   --help, -h                           show help
   --version, -v                        print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;開発環境の準備:721380b38042a10816ac6a323733a866&#34;&gt;開発環境の準備&lt;/h2&gt;

&lt;p&gt;動作検証用に「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で使ったコードを利用する。
まず，以下の環境を作る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\workspace\vdemo2&amp;gt;SET GOPATH=C:\workspace\vdemo2

C:\workspace\vdemo2&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\vdemo2&amp;gt;tree /f .
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;julian-day.go&lt;/code&gt; の内容は以下のとおりである。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

    &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		}
		args[i] = num
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, modjulian.DayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然ながら，このままビルドしても外部パッケージがないため失敗する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;go install ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo2\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;依存関係を定義する:721380b38042a10816ac6a323733a866&#34;&gt;依存関係を定義する&lt;/h2&gt;

&lt;p&gt;開発環境ができたら，パッケージのフォルダ（今回は &lt;code&gt;src/julian-day&lt;/code&gt;）に移動し， &lt;code&gt;glide create&lt;/code&gt; コマンドで依存関係を定義する &lt;code&gt;glide.yaml&lt;/code&gt; ファイルを生成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;pushd src\julian-day

C:\workspace\vdemo2\src\julian-day&amp;gt;glide create
[INFO] Generating a YAML configuration file and guessing the dependencies
[INFO] Attempting to import from other package managers (use --skip-import to skip)
[INFO] Found reference to github.com\spiegel-im-spiegel\astrocalc\modjulian

C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            glide.yaml
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースコードを読んで &lt;code&gt;glide.yaml&lt;/code&gt; に必要な情報を推測して書いてくれているようだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:cre&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，デリミタが “/” じゃなくて “\” になってる。
Windows 環境だからかな。
残念 orz&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com\spiegel-im-spiegel\astrocalc\modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34; title=&#34;spiegel-im-spiegel/astrocalc&#34;&gt;astrocalc&lt;/a&gt;/modjulian パッケージのパスを修正して、更にバージョン情報を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com/spiegel-im-spiegel/astrocalc/modjulian
  version: v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;go get&lt;/code&gt; コマンドと同じように， &lt;code&gt;package&lt;/code&gt; のパスから自動的に repository を判別してパッケージを取得できる。
&lt;code&gt;go get&lt;/code&gt; コマンドと異なるのは， &lt;code&gt;glide.yaml&lt;/code&gt; ファイルで指定した &lt;code&gt;version&lt;/code&gt; 情報から適切な revision を選択できる点である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:semv&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:semv&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;また，以下のように VCS (Version Control System) の種類&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:vcs&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; と URI を明示的に指定することもできる（&lt;code&gt;vcs&lt;/code&gt; と &lt;code&gt;repo&lt;/code&gt; は必ずセットで指定する）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com/spiegel-im-spiegel/astrocalc/modjulian
  vcs:     git
  repo:    git@github.com:spiegel-im-spiegel/astrocalc.git
  version: v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば，プライベートな bare repository からインポートする場合には，この方法が有効である。&lt;/p&gt;

&lt;h2 id=&#34;パッケージの取得とビルド:721380b38042a10816ac6a323733a866&#34;&gt;パッケージの取得とビルド&lt;/h2&gt;

&lt;p&gt;パッケージの取得には &lt;code&gt;glide update&lt;/code&gt; または &lt;code&gt;glide up&lt;/code&gt; コマンドを起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;glide up
[INFO] Fetching updates for github.com/spiegel-im-spiegel/astrocalc.
[INFO] Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Scanning github.com/spiegel-im-spiegel/astrocalc for dependencies.
[INFO] Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Project relies on 1 dependencies.
[INFO] Writing glide.lock file
C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
        │  glide.lock
        │  glide.yaml
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでビルドが可能になった。
ではビルドしようかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;popd

C:\workspace\vdemo2&amp;gt;go install -v  ./...
julian-day/vendor/github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\vdemo2&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;h2 id=&#34;vendor-フォルダの管理:721380b38042a10816ac6a323733a866&#34;&gt;Vendor フォルダの管理&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;glide.lock&lt;/code&gt; ファイルには外部パッケージの状態が記述されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hash: b1eecd43769aa1225f7b8922a35566008561c64f4ce11180f299888ed153ad69
updated: 2015-12-23T10:47:22.4140434+09:00
imports:
- name: github.com/spiegel-im-spiegel/astrocalc
  version: 256cd3bd4dc63441d3f4759d761593a147d51d88
  subpackages:
  - modjulian
devImports: []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;glide.lock&lt;/code&gt; があれば &lt;code&gt;glide install&lt;/code&gt;（または &lt;code&gt;glide i&lt;/code&gt;）コマンドで &lt;code&gt;vendor&lt;/code&gt; フォルダ以下の状態を復元できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では外部パッケージを vendor フォルダ以下に repository 構造ごと展開する。
この場合，開発対象のパッケージも repository で管理しているのだから， repository が入れ子になり具合が悪い。
その辺，当の &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; はどうしてるのかなぁと思ったら &lt;code&gt;.gitignore&lt;/code&gt; ファイルで &lt;code&gt;vendor/&lt;/code&gt; を除外対象にしていた。
なるほど，そりゃそうか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;glide.yaml&lt;/code&gt; および &lt;code&gt;glide.lock&lt;/code&gt; ファイルの管理さえちゃんとしていれば &lt;code&gt;glide install&lt;/code&gt; コマンドでいつでも復元できるのだから &lt;code&gt;vendor&lt;/code&gt; フォルダ以下を除外しても問題ないわけだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:v&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
これは複数メンバで開発環境を共有する際には便利な機能である。&lt;/p&gt;

&lt;p&gt;また vendoring に対応していない（Go 1.4 以下の）環境や &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; がない環境では &lt;code&gt;go get&lt;/code&gt; で外部パッケージを取ってくることで（revision 等の問題はあるけど）一応ビルドは通る。&lt;/p&gt;

&lt;p&gt;更に言うと， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の標準機能に準拠しているため，他のサポートツールとの相性がいいのも利点だろう。
たとえば， &lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;ATOM ベースの開発環境&lt;/a&gt;は &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; と相性がいい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:gov&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:gov&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
あと，（多少強引な手を使っているが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:tci&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;） &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; のような CI (Continuous Integration) と組み合わせることも難しくない。&lt;/p&gt;

&lt;p&gt;こう考えると &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34;&gt;前に紹介&lt;/a&gt;した &lt;a href=&#34;http://getgb.io/&#34;&gt;gb&lt;/a&gt; よりも筋がいいツールといえるかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:721380b38042a10816ac6a323733a866&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/8e192e68d6b18bec3b4a&#34;&gt;glide - パッケージ管理のお困りの方へ - - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;Mac 環境なら brew でインストールできるらしい。 Linux 等の環境であれば &lt;code&gt;make&lt;/code&gt; コマンドで各種プラットフォームの実行ファイルをビルドできる。一応 &lt;code&gt;go get&lt;/code&gt; でもビルドできるが， revision を制御できないので失敗する可能性もある（これは &lt;code&gt;make&lt;/code&gt; コマンドでビルドする場合でも同じだけど）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;code&gt;glide create&lt;/code&gt; 時の依存パッケージの推測を抑止するには &lt;code&gt;--skip-import&lt;/code&gt; オプションを付ける。のだが，効いてないな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:semv&#34;&gt;今回であれば repository の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc/releases/tag/v0.1.0&#34;&gt;&lt;code&gt;v0.1.0&lt;/code&gt;&lt;/a&gt; タグに対応する revision を選択する。バージョンの記述形式は &lt;code&gt;package.json&lt;/code&gt; と同じように記述でき，バージョンの解釈は &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; に従っている。ちなみに revision ID を直接指定することもできる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:semv&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt; のほか svn (&lt;a href=&#34;http://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;), hg (&lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;), bzr (&lt;a href=&#34;http://bazaar.canonical.com/&#34;&gt;Bazaar&lt;/a&gt;) が利用可能である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダ以下は外部パッケージなので通常はさわることはない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:gov&#34;&gt;残念ながら，「&lt;a href=&#34;http://text.baldanders.info/golang/package-visualization-tool/&#34;&gt;パッケージの依存状況の視覚化&lt;/a&gt;」ツールは vendoring 機能に対応していないため上手く表示できない。なお， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;code&gt;glide list&lt;/code&gt; および &lt;code&gt;glide tree&lt;/code&gt; で依存パッケージを見ることができる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:gov&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; の &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/.travis.yml&#34;&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/Makefile&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt; を参照。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 「はやぶさ2」地球 Swing-by - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1205-diary/" />
		<id>tag:text.Baldanders.info,2015-12-06:/remark/2015/1205-diary/</id>
		<published>2015-12-06T00:22:47+09:00</published>
		<updated>2015-12-19T14:40:56+09:00</updated>
		<summary>「はやぶさ2」地球 Swing-by / GnuPG 2.1.10 released / Go 1.5.2 Released / 11月の Flattr / 機械創作でクリエイターは失業するか / 新刊小説の滅亡</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#hayabusa:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;「はやぶさ2」地球 Swing-by&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gnupg:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;GnuPG 2.1.10 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golang:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;Go 1.5.2 Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flattr:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;11月の Flattr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#machine:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;機械創作でクリエイターは失業するか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#book:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;新刊小説の滅亡&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;hayabusa:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;「はやぶさ2」地球 Swing-by&lt;/h2&gt;

&lt;p&gt;12月3日に「はやぶさ2」の地球 swing-by が行われた。
Swing-by 自体はうまくいったようだが，今のところ所定の軌道に乗ったかどうか確認中らしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hayabusa2.jaxa.jp/topics/20151202/&#34;&gt;「はやぶさ２」の地球スイングバイ軌道が確定しました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1931&#34;&gt;「はやぶさ2」打ち上げから1年、本日軌道変更(地球スイングバイ)を実施 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2015/12/20151203_hayabusa2_j.html&#34;&gt;JAXA | 小惑星探査機「はやぶさ2」の地球スイングバイ実施について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1938&#34;&gt;はやぶさ2、軌道変更(地球スイングバイ)を実施、成否は数日後に判明 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hayabusa2.jaxa.jp/topics/20151203/&#34;&gt;「はやぶさ２」スイングバイ直前に撮影された地球の画像 | JAXA はやぶさ２プロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;地球 Swing-by については以下の解説記事が参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jpn.nec.com/ad/cosmos/hayabusa2/swingby/&#34;&gt;探査機をスマートに飛ばすテクニック「スイングバイ」: 小惑星探査機「はやぶさ2」: NECの宇宙開発利用への取り組み「宙への挑戦」 | NEC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;もし地球が止まっているなら、近づく時も離れる時も、探査機の速度は変わりません。ですが地球は、秒速30kmという猛スピードで太陽の周りを公転しており、とても大きな運動エネルギーを持っています。「はやぶさ２」は地球の後方を通過することで、そのエネルギーのほんの一部をもらって、前方へ加速していきます。今回のスイングバイで「はやぶさ2」は毎秒1.6km、時速にすると何と約6000kmも速くなります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jpn.nec.com/ad/cosmos/hayabusa2/swingby/&#34;&gt;探査機をスマートに飛ばすテクニック「スイングバイ」&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;さて，週明けは「あかつき」だよ。
うまくいくといいね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.planetary.org/blogs/guest-blogs/2015/1204-akatsuki-returns-to-venus.html&#34;&gt;Back from the Brink: Akatsuki Returns to Venus | The Planetary Society&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;12月14日-追記:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;12月14日 追記&lt;/h3&gt;

&lt;p&gt;地球 swing-by 後の「はやぶさ2」の軌道計算が完了。
予定通り航行しているようだ。
おめでとう！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2015/12/20151214_hayabusa2_j.html&#34;&gt;JAXA | 小惑星探査機「はやぶさ2」の地球スイングバイ実施結果について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1948&#34;&gt;はやぶさ2、軌道変更(スイングバイ)成功を確認 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1951&#34;&gt;「はやぶさ2」の軌道変更(スイングバイ)時に撮影された地球の写真 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gnupg:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;GnuPG 2.1.10 released&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2015q4/000381.html&#34;&gt;[Announce] GnuPG 2.1.10 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はセキュリティ脆弱性関連のアップデートはないが，このバージョンで TOFU (Trust-On-First-Use) 信用モデルをサポートするらしい。
これって SSH のプロトコルで使われている方式かな&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Trust_on_first_use&#34;&gt;Trust on first use - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あぁ，また勉強しないと。
日本語の記事が見当たらないんだが&amp;hellip;&lt;/p&gt;

&lt;p&gt;その他の変更点は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: New trust models &amp;ldquo;tofu&amp;rdquo; and &amp;ldquo;tofu+pgp&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;gpg: New command &amp;ndash;tofu-policy.  New options &amp;ndash;tofu-default-policy and &amp;ndash;tofu-db-format.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;weak-digest to specify hash algorithms which should be considered weak.&lt;/li&gt;
&lt;li&gt;gpg: Allow the use of multiple &amp;ndash;default-key options; take the last available key.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;encrypt-to-default-key.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;unwrap to only strip the encryption layer.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;only-sign-text-ids to exclude photo IDs from key signing.&lt;/li&gt;
&lt;li&gt;gpg: Check for ambigious or non-matching key specification in the config file or given to &amp;ndash;encrypt-to.&lt;/li&gt;
&lt;li&gt;gpg: Show the used card reader with &amp;ndash;card-status.&lt;/li&gt;
&lt;li&gt;gpg: Print export statistics and an EXPORTED status line.&lt;/li&gt;
&lt;li&gt;gpg: Allow selecting subkeys by keyid in &amp;ndash;edit-key.&lt;/li&gt;
&lt;li&gt;gpg: Allow updating the expiration time of multiple subkeys at once.&lt;/li&gt;
&lt;li&gt;dirmngr: New option &amp;ndash;use-tor.  For full support this requires libassuan version 2.4.2 and a patched version of libadns (e.g. adns-1.4-g10-7 as used by the standard Windows installer).&lt;/li&gt;
&lt;li&gt;dirmngr: New option &amp;ndash;nameserver to specify the nameserver used in Tor mode.&lt;/li&gt;
&lt;li&gt;dirmngr: Keyservers may again be specified by IP address.&lt;/li&gt;
&lt;li&gt;dirmngr: Fixed problems in resolving keyserver pools.&lt;/li&gt;
&lt;li&gt;dirmngr: Fixed handling of premature termination of TLS streams so that large numbers of keys can be refreshed via hkps.&lt;/li&gt;
&lt;li&gt;gpg: Fixed a regression in &amp;ndash;locate-key [since 2.1.9].&lt;/li&gt;
&lt;li&gt;gpg: Fixed another bug for keyrings with legacy keys.&lt;/li&gt;
&lt;li&gt;gpgsm: Allow combinations of usage flags in &amp;ndash;gen-key.&lt;/li&gt;
&lt;li&gt;Make tilde expansion work with most options.&lt;/li&gt;
&lt;li&gt;Many other cleanups and bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt; gpg --version
gpg (GnuPG) 2.1.10
libgcrypt 1.6.4
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
Supported algorithms:
Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;golang:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;Go 1.5.2 Released&lt;/h2&gt;

&lt;p&gt;今週はアップデートが多いなぁ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.5.minor&#34;&gt;Go 1.5.2 milestone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;細かい不具合の修正がメインのようだ。
セキュリティ関連のバグはないかな。&lt;/p&gt;

&lt;h2 id=&#34;flattr:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;11月の Flattr&lt;/h2&gt;

&lt;p&gt;11月は1件のみ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flattr.com/thing/114786/timestamp/1443655861&#34; title=&#34;SETI@home - Flattr.com&#34;&gt;SETI@home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://flattr.com/&#34; title=&#34;Flattr - Social microdonations&#34;&gt;Flattr&lt;/a&gt; はまたサービスを&lt;a href=&#34;http://blog.flattr.net/2015/11/flattr-developer-update-6-time-to-move/&#34;&gt;改装&lt;/a&gt;してるみたいなのだが，今度はどうなるやら。&lt;/p&gt;

&lt;h2 id=&#34;machine:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;機械創作でクリエイターは失業するか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/special/fukui/20151201_732993.html&#34;&gt;人工知能と著作権　～機械創作の普及でクリエイターは失業するのか？～ -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;別に人工知能を使わなくても今あるもので「機械創作」なるものは可能だろう。&lt;/p&gt;

&lt;p&gt;たとえば「人工無脳」を使えば無限に言葉を紡ぐことができる。
また，今は亡き Mag. さんが公開されていた「&lt;a href=&#34;http://magarchive.halfmoon.jp/vector/chaos/index.html&#34;&gt;Chaos von Eschenbach&lt;/a&gt;」を使えば無限のバリエーションで作曲できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
あとは初音ミクにでも唄わせればいい。&lt;/p&gt;

&lt;p&gt;ほら「機械創作」なんて簡単でしょ。&lt;/p&gt;

&lt;p&gt;でも「人工無脳」や「自動作曲」が紡ぐ言葉や曲を以って「表現」しているとは誰も思わないだろう。
何故ならそこに知性は存在しない（しないと思っている）から。
それでもその知性なき創作に私たちは時に感動を見出す。
たとえば自然現象のような。&lt;/p&gt;

&lt;p&gt;ということは「機械創作」は別の問題を示唆している。
つまり「機械が創作する」ことが問題なのではなく「創作」することに知性が必要なのかということである。
それはたとえば「知的財産権」の論理基盤を根底から覆す可能性を秘めている。&lt;/p&gt;

&lt;p&gt;人工知能は今のところ「問いに答える（応える）」ことはできるが，自ら「問いを立てる」ことはできない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
私は，それこそが「機械」を知性と呼べない（今や最後の）理由だと思う。
IBM の &lt;a href=&#34;http://www.ibm.com/smarterplanet/jp/ja/ibmwatson/&#34;&gt;Watson&lt;/a&gt; がどんなに優秀でも「エキスパート・システム」のバリエーションに留まる限り知性にはならない。&lt;/p&gt;

&lt;p&gt;現実のピノキオはどうやっても人間になれないのである。
もしピノキオが人間になれるなら，そこにいるのは人間ではなく，まったく新しい知性と言える。&lt;/p&gt;

&lt;p&gt;じゃあ「知的労働者」は将来も安泰なのかといえば，全くそんなことはない。
むしろ人工知能は「知的労働」を侵食していくだろう。
何故なら「知的労働」に知性は必要ないのだから。&lt;/p&gt;

&lt;p&gt;決められたコードに従って「創作」しているだけの職業クリエイターこそが人工知能に排除される対象である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magarchive.halfmoon.jp/vector/chaos/copyright.html&#34;&gt;自動作曲と著作権&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/12/08/20151207jukedeck/&#34;&gt;自作のビデオに音楽をつけたい人、作曲サービスJukedeckが著作権のない曲を一瞬で作ってくれる | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;book:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;新刊小説の滅亡&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/04/downfall-of-novels/&#34;&gt;新刊小説は滅亡について考えた方がいい « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いやぁ&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;消費者にとって、新刊小説を買わないことには、メリットがあるからである。&lt;br&gt;
新刊小説は、買わない方がいいからである。&lt;br&gt;
なぜ買わない方がいいのか。どんなメリットがあるのか。それは「新刊小説の滅亡」に書いた。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/04/downfall-of-novels/&#34;&gt;新刊小説は滅亡について考えた方がいい&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;はウケた。
なかなかのセールストークである。
これ見てうっかり『&lt;a href=&#34;http://store.kadokawa.co.jp/shop/g/g321509000668/&#34;&gt;本をめぐる物語&lt;/a&gt;』を買う人もいるかもしれない。
いや，私は買わないけど。&lt;/p&gt;

&lt;p&gt;まぁ，でも，しかし，続きを読めば「なぜ」の答えは書いてあって&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;有体にいえば、一回読んだら置き場所に困るような文学など、買わない方がいい、ということだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/04/downfall-of-novels/&#34;&gt;新刊小説は滅亡について考えた方がいい&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;と結ばれている。&lt;/p&gt;

&lt;p&gt;わたしが15年間に溜め込んだマンガやラノベの山（文字通りの山というか蟻塚）を&lt;a href=&#34;http://text.baldanders.info/remark/2015/0920-diary/&#34;&gt;処分&lt;/a&gt;したら軽トラ山盛り1杯分あった。
これからは紙の本を買うのは仕事に絡む本か余程好きな作家さんのみにしようと心に決めた。
たしかに「一回読んだら置き場所に困るような」紙の本などおよびではない。
買うのなら E ブックで買うか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;， E ブックで買えないのなら図書館へ行くべきだ。&lt;/p&gt;

&lt;p&gt;要するに私たちがしたいことは「本を読む」ことであり「本を所有」することではないということだ。
「所有する」ことにお金を使うバカバカしさに（もはや消費者ではない）ユーザは気づいてしまったのだ。
これはたとえば映像や音楽でも同じ。
ユーザは観て聴いて読むことができるのなら手段は問わない（つまりお金を払っても構わない）し，それを阻もうとするのなら迂回するか，迂回もできないのなら「観て聴いて読む」行為を止めるだけである。&lt;/p&gt;

&lt;p&gt;もう「コンテンツを売って儲ける」ビジネスは破綻している。
それは近代でのみ通用する泡沫のビジネスモデルだったのだろう。&lt;/p&gt;

&lt;p&gt;音楽業界が失くなっても音楽は存在し続けるし，書籍出版業界が失くなっても本は存在し続ける。
そろそろ気づけ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;&lt;code&gt;TOFU&lt;/code&gt; でググってて気がついたんだけど， &lt;a href=&#34;http://www.gnutls.org/&#34;&gt;GnuTLS&lt;/a&gt; ってまだ生きてるんだね。使ってるところってどのくらいあるんだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;当時はこのソフトにメチャメチャはまったものである。他にも自動作曲ソフトには様々なものがある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;推論の過程でいくつかの仮説をたてることはある。が，それも「反応」の一種に過ぎない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;E ブックの実体はクラウドに置かれる。ユーザは E ブックにアクセスする権利を買っているだけで所有しているわけではない。ちなみに図書館は太古からあるクラウドである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
