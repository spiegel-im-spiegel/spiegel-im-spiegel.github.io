<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Tools - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/tools/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/tools/index.xml" />
	<id>tag:text.Baldanders.info,2016-02-07:/</id>
	<updated>2016-02-07T00:18:50+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>gpgpdump - OpenPGP packet visualizer - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/gpgpdump-released/" />
		<id>tag:text.Baldanders.info,2016-02-07:/remark/2016/02/gpgpdump-released/</id>
		<published>2016-02-07T00:18:50+09:00</published>
		<updated>2016-02-07T00:18:50+09:00</updated>
		<summary>OpenPGP パケットの内容を視覚化する gpgpdump の 0.1.0 をリリースした。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;余暇でちまちま作っていたが，とりあえず使えるようになったので。&lt;/p&gt;

&lt;p&gt;OpenPGP パケットの内容を視覚化する &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; の 0.1.0 をリリースした。
名前でピンとくる人もいるだろうが，山本和彦さんの &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; の翻案である。
特徴は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で作成。特別なパッケージは使用していないので &lt;code&gt;go get&lt;/code&gt; コマンドのみでビルド可能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; （または &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt;）フォーマットで出力&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;RFC 4880&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc5581&#34; title=&#34;RFC 5581 - The Camellia Cipher in OpenPGP&#34;&gt;RFC 5581&lt;/a&gt; および &lt;a href=&#34;https://tools.ietf.org/html/rfc6637&#34; title=&#34;RFC 6637 - Elliptic Curve Cryptography (ECC) in OpenPGP&#34;&gt;RFC 6637&lt;/a&gt; をサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License Version 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat sig
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iF4EARMIAAYFAlTDCN8ACgkQMfv9qV+7+hg2HwEA6h2iFFuCBv3VrsSf2BREQaT1
T1ZprZqwRPOjiLJg9AwA/ArTwCPz7c2vmxlv7sRlRLUI6CdsOqhuO1KfYXrq7idI
=ZOTN
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という OpenPGP 署名データがあるとする。
これを &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; で表示すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pgpdump sig
Old: Signature Packet(tag 2)(94 bytes)
        Ver 4 - new
        Sig type - Signature of a canonical text document(0x01).
        Pub alg - Reserved for ECDSA(pub 19)
        Hash alg - SHA256(hash 8)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Sat Jan 24 11:52:15 東京 (標準時) 2015
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x31FBFDA95FBBFA18
        Hash left 2 bytes - 36 1f
        Unknown signature(pub 19)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
一方， &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; の場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpgpdump sig
[[Packet]]
  name = &amp;quot;Packet&amp;quot;
  value = &amp;quot;Signature Packet (tag 2)&amp;quot;
  note = &amp;quot;94 bytes&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Version&amp;quot;
    value = &amp;quot;4&amp;quot;
    dump = &amp;quot;04&amp;quot;
    note = &amp;quot;new&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Signiture Type&amp;quot;
    value = &amp;quot;Signature of a canonical text document (0x01)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Public-key Algorithm&amp;quot;
    value = &amp;quot;ECDSA public key algorithm (pub 19)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hash Algorithm&amp;quot;
    value = &amp;quot;SHA256 (hash 8)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hashed Subpacket&amp;quot;

    [[Packet.Item.Item]]
      name = &amp;quot;Signature Creation Time (sub 2)&amp;quot;
      value = &amp;quot;2015-01-24T11:52:15+09:00&amp;quot;
      dump = &amp;quot;54 c3 08 df&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Unhashed Subpacket&amp;quot;

    [[Packet.Item.Item]]
      name = &amp;quot;Issuer (sub 16)&amp;quot;
      value = &amp;quot;0x31FBFDA95FBBFA18&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hash left 2 bytes&amp;quot;
    dump = &amp;quot;36 1f&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Multi-precision integer&amp;quot;
    dump = &amp;quot;...&amp;quot;
    note = &amp;quot;ECDSA r (256 bits)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Multi-precision integer&amp;quot;
    dump = &amp;quot;...&amp;quot;
    note = &amp;quot;ECDSA s (252 bits)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じで同等の内容を &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; フォーマットで出力する。
また &lt;code&gt;-j&lt;/code&gt; オプションを付けると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpgpdump sig
{
  &amp;quot;Packet&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;Packet&amp;quot;,
      &amp;quot;value&amp;quot;: &amp;quot;Signature Packet (tag 2)&amp;quot;,
      &amp;quot;note&amp;quot;: &amp;quot;94 bytes&amp;quot;,
      &amp;quot;Item&amp;quot;: [
        {
          &amp;quot;name&amp;quot;: &amp;quot;Version&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;4&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;04&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;new&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Signiture Type&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;Signature of a canonical text document (0x01)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Public-key Algorithm&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;ECDSA public key algorithm (pub 19)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hash Algorithm&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;SHA256 (hash 8)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hashed Subpacket&amp;quot;,
          &amp;quot;Item&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;Signature Creation Time (sub 2)&amp;quot;,
              &amp;quot;value&amp;quot;: &amp;quot;2015-01-24T11:52:15+09:00&amp;quot;,
              &amp;quot;dump&amp;quot;: &amp;quot;54 c3 08 df&amp;quot;
            }
          ]
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Unhashed Subpacket&amp;quot;,
          &amp;quot;Item&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;Issuer (sub 16)&amp;quot;,
              &amp;quot;value&amp;quot;: &amp;quot;0x31FBFDA95FBBFA18&amp;quot;
            }
          ]
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hash left 2 bytes&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;36 1f&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Multi-precision integer&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;...&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;ECDSA r (256 bits)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Multi-precision integer&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;...&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;ECDSA s (252 bits)&amp;quot;
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じに &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; 形式で出力する。
だいぶ冗長な表現で申し訳ないが，解析結果を以下の &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; で正規化している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Packets - OpenPGP packets
type Packets struct {
	Packet []*Item
}

//Item - item in Packets
type Item struct {
	Name  string  `toml:&amp;quot;name&amp;quot; json:&amp;quot;name&amp;quot;`
	Value string  `toml:&amp;quot;value,omitempty&amp;quot; json:&amp;quot;value,omitempty&amp;quot;`
	Dump  string  `toml:&amp;quot;dump,omitempty&amp;quot; json:&amp;quot;dump,omitempty&amp;quot;`
	Note  string  `toml:&amp;quot;note,omitempty&amp;quot; json:&amp;quot;note,omitempty&amp;quot;`
	Item  []*Item `toml:&amp;quot;Item,omitempty&amp;quot; json:&amp;quot;Item,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の勉強用に作成した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet&#34;&gt;&lt;code&gt;golang.org/x/crypto/openpgp/packet&lt;/code&gt;&lt;/a&gt; というパッケージがあって，これを使えば簡単にできるだろうと思ったのが大間違いで，結局このパッケージで使えたのは &lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet#OpaquePacket&#34;&gt;&lt;code&gt;OpaquePacket&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet#OpaqueSubpacket&#34;&gt;&lt;code&gt;OpaqueSubpacket&lt;/code&gt;&lt;/a&gt; くらい。
実際のパケットの解析はゴリゴリとコードを書くはめになった
いや，これだけでもだいぶ助かったけど。&lt;/p&gt;

&lt;p&gt;とはいえ，まだまだ課題はあって&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パケット解析部分のテストが未実装。つか，古いフォーマットのパケットのテストどうしよう&lt;/li&gt;
&lt;li&gt;そもそもパケット解析部分は作りが悪くて簡単に &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; が起きてしまうので全面的に書きなおす予定&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4880#section-5.6&#34;&gt;Compressed Data Packet (Tag 8)&lt;/a&gt; が未実装。どうやって実現しようか悩み中&lt;/li&gt;
&lt;li&gt;実は ECC (&lt;a href=&#34;https://tools.ietf.org/html/rfc6637&#34; title=&#34;RFC 6637 - Elliptic Curve Cryptography (ECC) in OpenPGP&#34;&gt;RFC 6637&lt;/a&gt;) がよく分かってない。もしかしたら解釈を間違えているかもしれない&lt;/li&gt;
&lt;li&gt;最終的には &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; と同等な出力を目指す&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったあたりを，これからゆっくり手を入れていこうと考えている。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:a131791b2fce306ad1e4a38715959029&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;プログラミング言語 Go — text.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： フェルミのパラドックス - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/30-stories/" />
		<id>tag:text.Baldanders.info,2016-01-30:/remark/2016/01/30-stories/</id>
		<published>2016-01-30T19:19:39+09:00</published>
		<updated>2016-01-30T19:19:39+09:00</updated>
		<summary>フェルミのパラドックス / GnuPG 2.1.11 released / Go 1.6 Release Candidate 1 / MIAU からの意見書</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#seti:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;フェルミのパラドックス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gpg:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;GnuPG 2.1.11 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golang:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;Go 1.6 Release Candidate 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miau:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;MIAU からの意見書&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;seti:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;フェルミのパラドックス&lt;/h2&gt;

&lt;p&gt;人類の歴史は（宇宙誕生からの時間に比べれば）極々短いものだが，この歴史の中で私たちが ETI（Extra-terrestrial Intelligence; 地球外生命体）と直接的・間接的に接触したという記録はない。
宇宙に ETI やその文明がありふれているのなら，今まで地球人が接触しなかったのは何故？ というのが「フェルミのパラドックス」の内容であり，これが ETI 非存在を示す間接的な材料となっている。&lt;/p&gt;

&lt;p&gt;最近このフェルミのパラドックスを説明する新しい説が出たらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://online.liebertpub.com/doi/10.1089/ast.2015.1387&#34;&gt;The Case for a Gaian Bottleneck: The Biology of Habitability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://science.anu.edu.au/whats-on/all-news/aliens-are-silent-because-they-are-extinct&#34;&gt;The aliens are silent because they are extinct | Science, Medicine and Health&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/01/27exolife/index-j.shtml&#34;&gt;地球外生命からコンタクトがない理由 - アストロアーツ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;もし金星や火星に初期の微生物が存在していたとしても、急速な環境の変化を安定にすることはできませんでした。一方、おそらく地球上の生物は、惑星の気候を安定させる重要な役割を果たしたのでしょう。いまだに地球外生命体の存在を示す兆候を見つけられていないのは、生物または知的生命体の誕生というよりも、惑星表面におけるフィードバック・サイクルの生物学的な制御が急速に起こることは稀だ、ということと関係が深いと思われます&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/01/27exolife/index-j.shtml&#34;&gt;地球外生命からコンタクトがない理由&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;銀河系内にどのくらい（地球人と交信可能な）知的文明が存在するか推定する方程式がある。
これが「ドレイク方程式」と呼ばれるものだ。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
    N = R_{*} \times f_p \times  n_e \times f_l \times f_i \times f_c \times L
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;各項の意味は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$R_{*}$ ： 銀河系内で年間で誕生する恒星の数&lt;/li&gt;
&lt;li&gt;$f_p$ ： その恒星が惑星を持つようになる確率&lt;/li&gt;
&lt;li&gt;$n_e$ ： それらの中で生命の発生し得る条件を備えた惑星の数&lt;/li&gt;
&lt;li&gt;$f_l$ ： その惑星の中に実際に生命が発生し得る確率&lt;/li&gt;
&lt;li&gt;$f_i$ ： その生命が知性を持つに至る確率&lt;/li&gt;
&lt;li&gt;$f_c$ ： 彼らが実際に恒星間電波通信を行うまでに進歩する確率&lt;/li&gt;
&lt;li&gt;$L$ ： その文明の寿命&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;である。&lt;/p&gt;

&lt;p&gt;この式の評価は色々あるのだが，金子隆一著『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;ファースト・コンタクト―地球外知性体と出会う日&lt;/a&gt;』では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$R_{*} = 20$&lt;/li&gt;
&lt;li&gt;$f_p = 0.25$&lt;/li&gt;
&lt;li&gt;$n_e = 1.5$&lt;/li&gt;
&lt;li&gt;$f_l = 0.75$&lt;/li&gt;
&lt;li&gt;$f_i = 0.5$&lt;/li&gt;
&lt;li&gt;$f_c = 0.5$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と見積もられていた。
つまり $N = 1.4L$ となる。
仮に恒星間電波通信が可能な文明の寿命を1万年とするなら約1万4千の地球外文明が存在し得ることになる。
ちなみに地球人が電波を通信手段として使うようになってからまだ150年も経っていない。
さらに宇宙に向けて「アレシボ・メッセージ」を送ったのは1974年末。
「つい最近」の出来事である。&lt;/p&gt;

&lt;p&gt;後半の $f_i$, $f_c$, $L$ 以外はほぼ物理的要因で決まると言ってよい。
また $L$ の唯一のサンプルは地球文明なので，地球文明が長く続ければ続くほど $L$ が大きく見積もれることになる。&lt;/p&gt;

&lt;p&gt;しかし今回の論文から， $n_e$ や $f_l$ といった項が実はかなり小さい値なのではないか，と考えることもできる。
さて，現在の学者さん達はドレイク方程式をどのように解釈するだろうか。&lt;/p&gt;

&lt;p&gt;そうそう。
&lt;a href=&#34;http://setiathome.ssl.berkeley.edu/&#34;&gt;SETI@home&lt;/a&gt; はバージョン 8 がリリースされている。
自宅マシンでは順調に稼働中。
Android 版もあるよ。&lt;/p&gt;

&lt;h2 id=&#34;gpg:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;GnuPG 2.1.11 released&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.1.11 が出た。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q1/000383.html&#34;&gt;[Announce] GnuPG 2.1.11 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;セキュリティ・アップデートはなし。
主な変更点は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: New command &amp;ndash;export-ssh-key to replace the gpgkey2ssh tool.&lt;/li&gt;
&lt;li&gt;gpg: Allow to generate mail address only keys with &amp;ndash;gen-key.&lt;/li&gt;
&lt;li&gt;gpg: &amp;ldquo;&amp;ndash;list-options show-usage&amp;rdquo; is now the default.&lt;/li&gt;
&lt;li&gt;gpg: Make lookup of DNS CERT records holding an URL work.&lt;/li&gt;
&lt;li&gt;gpg: Emit PROGRESS status lines during key generation.&lt;/li&gt;
&lt;li&gt;gpg: Don&amp;rsquo;t check for ambigious or non-matching key specification in the config file or given to &amp;ndash;encrypt-to.  This feature will return in 2.3.x.&lt;/li&gt;
&lt;li&gt;gpg: Lock keybox files while updating them.&lt;/li&gt;
&lt;li&gt;gpg: Solve rare error on Windows during keyring and Keybox updates.&lt;/li&gt;
&lt;li&gt;gpg: Fix possible keyring corruption. (bug#2193)&lt;/li&gt;
&lt;li&gt;gpg: Fix regression of &amp;ldquo;bkuptocard&amp;rdquo; sub-command in &amp;ndash;edit-key and remove &amp;ldquo;checkbkupkey&amp;rdquo; sub-command introduced with 2.1.  (bug#2169)&lt;/li&gt;
&lt;li&gt;gpg: Fix internal error in gpgv when using default keyid-format.&lt;/li&gt;
&lt;li&gt;gpg: Fix &amp;ndash;auto-key-retrieve to work with dirmngr.conf configured keyservers. (bug#2147).&lt;/li&gt;
&lt;li&gt;agent: New option &amp;ndash;pinentry-timeout.&lt;/li&gt;
&lt;li&gt;scd: Improve unplugging of USB readers under Windows.&lt;/li&gt;
&lt;li&gt;scd: Fix regression for generating RSA keys on card.&lt;/li&gt;
&lt;li&gt;dirmmgr: All configured keyservers are now searched.&lt;/li&gt;
&lt;li&gt;dirmngr: Install CA certificate for hkps.pool.sks-keyservers.net. Use this certiticate even if &amp;ndash;hkp-cacert is not used.&lt;/li&gt;
&lt;li&gt;gpgtar: Add actual encryption code.  gpgtar does now fully replace gpg-zip.&lt;/li&gt;
&lt;li&gt;gpgtar: Fix filename encoding problem on Windows.&lt;/li&gt;
&lt;li&gt;Print a warning if a GnuPG component is using an older version of gpg-agent, dirmngr, or scdaemon.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;golang:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;Go 1.6 Release Candidate 1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の 1.6 RC 版が登場。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/pXcUuFHc4YE&#34;&gt;Go 1.6 Release Candidate 1 is released - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Our goal is to release the final version of Go 1.6 in around two weeks.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/pXcUuFHc4YE&#34;&gt;Go 1.6 Release Candidate 1 is released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;だそうで，楽しみである。&lt;/p&gt;

&lt;h2 id=&#34;miau:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;MIAU からの意見書&lt;/h2&gt;

&lt;p&gt;MIAU から「知的財産推進計画2016」が公開されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://miau.jp/index1453962972.phtml&#34;&gt;MIAU : 知的財産戦略本部「知的財産推進計画2016」策定に当たっての意見募集に、意見書を提出しました。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容については概ね同意。
つか， MIAU って仕事してるんだねぇ（笑）&lt;/p&gt;

&lt;p&gt;でもこれって効果あるのかねぇ。
やらないよりはマシだろうけど。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41GPXP2HRVL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;ファースト・コンタクト―地球外知性体と出会う日 (文春新書)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;金子 隆一 &lt;/dd&gt;&lt;dd&gt;文藝春秋 1998-10&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;地球外文明探査の歴史を俯瞰する良書。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-30&#34;&gt;2016-01-30&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： Go コンパイラのセキュリティアップデートがあるらしい - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/09-stories/" />
		<id>tag:text.Baldanders.info,2016-01-09:/remark/2016/01/09-stories/</id>
		<published>2016-01-09T18:59:13+09:00</published>
		<updated>2016-01-09T18:59:13+09:00</updated>
		<summary>Go コンパイラのセキュリティアップデートがあるらしい / GnuPG 1.4.20 released / GitLab.com にアカウントを作った / くそな「中間者デバイス」が SHA-1 廃止の邪魔をする</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;年末忙しくて書き損ねてるネタを回収中。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#go:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;Go コンパイラのセキュリティアップデートがあるらしい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gpg:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GnuPG 1.4.20 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gl:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GitLab.com にアカウントを作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mitm:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;くそな「中間者デバイス」が SHA-1 廃止の邪魔をする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;go:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;Go コンパイラのセキュリティアップデートがあるらしい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/MLaPAPFlCNY&#34;&gt;[security] Go 1.5.3 pre-announcement - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳細は示されてないが13日（日本時間だと14日かな）を待つことにしよう。
来週は月例のセキュリティ更新週間である。&lt;/p&gt;

&lt;h2 id=&#34;gpg:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GnuPG 1.4.20 released&lt;/h2&gt;

&lt;p&gt;昨年の話で申し訳ないが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2015q4/000382.html&#34;&gt;[Announce] GnuPG 1.4.20 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;セキュリティアップデートではないが既定の動作が変わるようである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reject signatures made using the MD5 hash algorithm unless the new option &amp;ndash;allow-weak-digest-algos or &amp;ndash;pgp2 are given.&lt;/li&gt;
&lt;li&gt;New option &amp;ndash;weak-digest to specify hash algorithms which should be considered weak.&lt;/li&gt;
&lt;li&gt;Changed default cipher for symmetric-only encryption to AES-128.&lt;/li&gt;
&lt;li&gt;Fix for DoS when importing certain garbled secret keys.&lt;/li&gt;
&lt;li&gt;Improved error reporting for secret subkey w/o corresponding public subkey.&lt;/li&gt;
&lt;li&gt;Improved error reporting in decryption due to wrong algorithm.&lt;/li&gt;
&lt;li&gt;Fix cluttering of stdout with trustdb info in double verbose mode.&lt;/li&gt;
&lt;li&gt;Pass a DBUS envvar to gpg-agent for use by gnome-keyring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GnuPG というか OpenPGP が後生大事に MD5 を残しているのは過去の資産への対応のためであろう。&lt;/p&gt;

&lt;p&gt;ちなみに PGP の最初のリリースは1991年で，実に四半世紀も前である。
作者の &lt;a href=&#34;https://www.philzimmermann.com/&#34;&gt;Phil Zimmermann&lt;/a&gt; は当時，米国内反核運動の活動家であった。
更に暗号技術に対する政治的圧力は現在と比較にならないほど厳しく，米国は長いあいだ彼をマークし続けた。
PGP の広まり方や改良のプロセスは実に「インターネット的」であった。
詳しくは Steven Levy の『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化（Crypto）&lt;/a&gt;』をどうぞ。&lt;/p&gt;

&lt;p&gt;あれからネットも随分変わったが，当時政府が何をしたか企業は何をしたか「暗号アナーキスト」たちはどうしたか。
現在のネットは先人の努力により「勝ち取った」ものであることを私たちは絶対に忘れてはならない。&lt;/p&gt;

&lt;p&gt;自由そのものは自由ではない。
勝ち取ったものはいつか奪われる。
奪われたくなければ勝ち続けなければならない。&lt;/p&gt;

&lt;h2 id=&#34;gl:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GitLab.com にアカウントを作った&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masakura/items/e679c094e8afea9a4879&#34;&gt;GitLab/GitLab.com 勉強会 (2015/12/09) レポート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ見て &lt;a href=&#34;https://gitlab.com/&#34; title=&#34;GitLab&#34;&gt;GitLab.com&lt;/a&gt; にアカウントを作ってみた。
とりあえず中身は空っぽ。
公開リポジトリを &lt;a href=&#34;https://gitlab.com/&#34; title=&#34;GitLab&#34;&gt;GitLab.com&lt;/a&gt; に作るメリットはない気もするが，容量が 10GB/repos あるのはありがたい。&lt;/p&gt;

&lt;p&gt;まぁ，どう使うかはこれからおいおい考える。
今年あたり，どっかにサーバでも借りて私用リポジトリ・サービスを立ち上げてみたいのだが，これもおいおい。&lt;/p&gt;

&lt;h2 id=&#34;mitm:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;くそな「中間者デバイス」が SHA-1 廃止の邪魔をする&lt;/h2&gt;

&lt;p&gt;いやもうこれは笑うところだよね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35075954/&#34;&gt;「Firefox」、SHA-1証明書のサポートを一時的に復活&amp;ndash;HTTPSサイトのアクセスに問題 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1601/08/news069.html&#34;&gt;FirefoxのSHA-1廃止で一部ユーザーに障害、サポート復活 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;Barnes氏は次のように説明している。「ユーザーがHTTPSサイトへの接続を試みると、中間者デバイスがFirefoxに対し、サーバの本物の証明書でなく新規のSHA-1証明書を送信する」&lt;br&gt;
「Firefoxは新規のSHA-1証明書を拒否するため、サーバに接続できない」（同氏）&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35075954/&#34;&gt;「Firefox」、SHA-1証明書のサポートを一時的に復活--HTTPSサイトのアクセスに問題&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/remark/2015/problem-of-sha1-collision/&#34;&gt;SHA-1 衝突問題： 廃止の前倒し&lt;/a&gt;」でも紹介したが， SHA-1 の危殆化はかなり現実的な問題になってきている。
いますぐどうこうというわけではないが，これ以上の先延ばしは出来ない状態である。
しかし CA やブラウザが頑張っても「中間者デバイス」なる覗き屋が邪魔をする。&lt;/p&gt;

&lt;p&gt;やはりセキュリティ製品が暗号通信に対して「中間者攻撃」を仕掛けるのは筋が悪すぎると思うのだが，何とかならないものかねぇ。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>NYAGOS 4.1-beta がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/nyagos-4_1_beta/" />
		<id>tag:text.Baldanders.info,2015-12-20:/remark/2015/nyagos-4_1_beta/</id>
		<published>2015-12-20T16:31:06+09:00</published>
		<updated>2015-12-21T10:36:09+09:00</updated>
		<summary>4.1 で大きく変わったのはコールバック関数の扱いのようだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;ここのところ忙しくしてたら，いつの間にか &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; の &lt;a href=&#34;https://github.com/zetamatta/nyagos/releases/tag/4.1-beta&#34;&gt;4.1-beta&lt;/a&gt; が出てた。
4.1 で大きく変わったのはコールバック関数の扱いのようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クラッシュ回避のため、全てのLua のコールバック関数はそれぞれの Lua インスタンスを持つようにした。（つまり、.nyagos で定義されたグローバル変数は、全てのコールバック関数から見ることができなくなった）&lt;/li&gt;
&lt;li&gt;コールバック関数と .nyagos 間で値を共有するため、テーブル share[] を作った&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コールバック関数の挙動が変わったのは&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この制限は、クラッシュ回避のため、コールバック関数ごとに別の Lua インスタンスを用意しているためです。エイリアス等は別の goroutine 内で呼ばれるのですが、4.0 では、この時同一の Lua インスタンスを使用していたため、時にスタックに矛盾が発生して、クラッシュすることがあったのです。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c08586c85fa73c182a7a&#34;&gt;nyagosスクリプト解説 - CMD.EXEで化けさせず、nyagosの中だけプロンプトをカラー化&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ということらしい。&lt;/p&gt;

&lt;p&gt;実は &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; で表示するプロンプトは以下の記事を参考にオリジナルの &lt;code&gt;%PROMPT%&lt;/code&gt; から変えている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c08586c85fa73c182a7a&#34;&gt;nyagosスクリプト解説 - CMD.EXEで化けさせず、nyagosの中だけプロンプトをカラー化 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前のプロンプト定義は以下のような感じだった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Simple Prompt for CMD.EXE
set{
    PROMPT=&#39;$L&#39;.. nyagos.getenv(&#39;COMPUTERNAME&#39;) .. &#39;:$P$G$_$$$s&#39;
}

-- Coloring Prompt for NYAGOS.exe
local prompter=nyagos.prompt
nyagos.prompt = function(this)
    return prompter(&#39;$e[36;40;1m&#39;..this..&#39;$e[37;1m&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この中の &lt;code&gt;prompter&lt;/code&gt; がコールバック関数から見えなくなったということらしい。
そこで以下のようにコードを変更するのだそうだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Simple Prompt for CMD.EXE
nyagos.env.prompt=&#39;$L&#39;.. nyagos.getenv(&#39;COMPUTERNAME&#39;) .. &#39;:$P$G$_$$$s&#39;

-- Coloring Prompt for NYAGOS.exe
share.org_prompter=nyagos.prompt
nyagos.prompt = function(this)
    return share.org_prompter(&#39;$e[36;40;1m&#39;..this..&#39;$e[37;1m&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポイントは &lt;code&gt;share.org_prompter=nyagos.prompt&lt;/code&gt; の部分。
オリジナルの &lt;code&gt;nyagos.prompt()&lt;/code&gt; 関数を &lt;code&gt;share[]&lt;/code&gt; テーブルに退避させている。&lt;/p&gt;

&lt;p&gt;これでめでたく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\program\nyagos&amp;gt;nyagos.exe
Nihongo Yet Another GOing Shell 4.1-beta-amd64 Powered by go1.5.2 &amp;amp; Lua 5.3
Copyright (c) 2014,2015 HAYAMA_Kaoru and NYAOS.ORG
&amp;lt;VENUS:C:/program/nyagos&amp;gt;
$ ls
Doc/               lua53.dll          nyagos.lua*        specialfolders.js*
catalog.d/         makeicon.cmd*      nyole.dll
license.txt        nyagos.d/          readme.md
lnk.js*            nyagos.exe*        readme_ja.md
&amp;lt;VENUS:C:/program/nyagos&amp;gt;
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示できるようになった（カラーでお見せできないのが残念です）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:98f564c311f7795b2925fd0f13551316:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:98f564c311f7795b2925fd0f13551316:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;実は私もプロンプトは折り返す派。
開発環境ではフォルダがかなり深くなることがあり，既存の &lt;code&gt;$P$G&lt;/code&gt; では見づらいのだ。
まぁこれは Windows に限らないのだが。&lt;/p&gt;

&lt;h2 id=&#34;参考:98f564c311f7795b2925fd0f13551316&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/nyagos-and-lua/&#34;&gt;NYAGOS で Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/75840096f8279dd641a8&#34;&gt;何がちがう？NYAGOS 4.0 と 4.1β - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:98f564c311f7795b2925fd0f13551316:a&#34;&gt;そういや昔の UNIX ワークステーションはホスト名に venus とか惑星名を付けてるところが多かったな。私がネットワーク管理者をしてた時はプロキシサーバに janus とか付けてた。若気の至りである（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:98f564c311f7795b2925fd0f13551316:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>あまり使わないけど，たまに使おうとすると忘れてる Git コマンド集 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/git-commands/" />
		<id>tag:text.Baldanders.info,2015-12-09:/remark/2015/git-commands/</id>
		<published>2015-12-09T20:14:59+09:00</published>
		<updated>2016-01-24T15:42:38+09:00</updated>
		<summary>git 各コマンドに関する覚え書き。思い出したら追記予定。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; 各コマンドに関する覚え書き。
思い出したら追記予定。&lt;/p&gt;

&lt;h2 id=&#34;submodule-の作成から削除まで:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の作成から削除まで&lt;/h2&gt;

&lt;h3 id=&#34;submodule-の作成:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の作成&lt;/h3&gt;

&lt;p&gt;Repository に別の repository &lt;code&gt;sub_repo.git&lt;/code&gt; を submodule として &lt;code&gt;subdir&lt;/code&gt; に追加する場合は以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add sub_repo.git subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;submodule-の初期化:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の初期化&lt;/h3&gt;

&lt;p&gt;Submodule を含む repository を clone してきた場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone repo.git
$ cd repo/subdir
$ git submodule init
$ git submodule update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone --recursive repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で初期化できる。
これ以降， remote 側から fetch/maerge した際に submodule の参照ポイントが変更されていた場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で初期化できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;submodule-の更新:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の更新&lt;/h3&gt;

&lt;p&gt;Submodule の remote 側の変更を pull する場合は以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --remote subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fetch したデータを merge する場合は &lt;code&gt;--merge&lt;/code&gt; オプションを， rebase する場合は &lt;code&gt;--rebase&lt;/code&gt; オプションを付ける&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;submodule-の削除:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の削除&lt;/h3&gt;

&lt;p&gt;Repository から submodule を削除する場合は以下のコマンドで削除できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule deinit subdir
$ git rm subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remote-repository-の接続設定:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository の接続設定&lt;/h2&gt;

&lt;h3 id=&#34;remote-repository-への-uri-を変更する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository への URI を変更する&lt;/h3&gt;

&lt;p&gt;Remote repository （通常は &lt;code&gt;origin&lt;/code&gt;）の接続先 URI を変更するには以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote set-url origin new_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remote-repository-との接続を追加する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository との接続を追加する&lt;/h3&gt;

&lt;p&gt;新たに remote repository との接続を追加する場合には以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote add upstream up_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは追加した remote repository に &lt;code&gt;upstream&lt;/code&gt; と名前をつけている。
たとえば fork した repository で作業する際に fork 元の repository の変更も取り込みたい場合などに有効である。&lt;/p&gt;

&lt;h3 id=&#34;remote-repository-との接続を削除する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository との接続を削除する&lt;/h3&gt;

&lt;p&gt;Remote repository との接続を削除する場合には以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote rm upstream
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;repository-の分離:426366135f9b7036b5475695fbc6d142&#34;&gt;Repository の分離&lt;/h2&gt;

&lt;p&gt;Repository の特定のディレクトリ &lt;code&gt;subdir&lt;/code&gt; を commit tree を維持したまま分離したいときの手順。&lt;/p&gt;

&lt;p&gt;まず元の repository &lt;code&gt;org_repo.git&lt;/code&gt; を clone する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone org_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clone 元の bare repository がない場合にはローカルの repository を丸ごとどっかにコピーすればよい（commit 済みであること）。&lt;/p&gt;

&lt;p&gt;で， clone した repository 内に入って &lt;code&gt;git filter-branch&lt;/code&gt; コマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd org_repo
$ git filter-branch --subdirectory-filter subdir HEAD
Rewrite **************************************** (999/999)
Ref &#39;refs/heads/master&#39; was rewritten
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このとき &lt;code&gt;subdir&lt;/code&gt; 以下のファイル・ディレクトリが repository のトップ・ディレクトリに移動するので注意が必要である。
また，オリジナルの commit tree が &lt;code&gt;refs/original/refs/heads/master&lt;/code&gt; として残っているので以下のコマンドで削除する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git update-ref -d refs/original/refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成した repository はそのまま使うなり新しい bare repository に push するなりすればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote set-url origin new_repo.git
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;元の repository に push しようとすると怒られる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;git-に関するブックマーク:426366135f9b7036b5475695fbc6d142&#34;&gt;Git に関するブックマーク&lt;/h2&gt;

&lt;p&gt;ついでなので，ローカルで溜め込んでいた &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; に関するブックマークを挙げておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;Git for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gitextensions.github.io/&#34;&gt;Git Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kinokoru.jp/archives/1017&#34;&gt;【Git入門者向け】イメージで理解するGitコマンド事始め | きのこる庭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kray.jp/blog/git-pull-rebase/&#34;&gt;git pull と git pull –rebase の違いって？図を交えて説明します！ | KRAY Inc&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Teloo/items/95a860ae276b49edb040&#34;&gt;Git - pull は本当に fetch + merge なの？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/doilux/items/b5a9abd95ac91e848a5f&#34;&gt;Gitのこれやめて！リスト - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://meme.efcl.info/2011/07/gitcloneerror-setting-certificate.html&#34;&gt;githubからclone時にerror setting certificate verify locationsがでる | MemeTodo&lt;/a&gt; : うちでもなっていろいろ大変だった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kiida/items/0d51c43ac73f14f09f5a&#34;&gt;Git LFSが1.0になってGitHubで使えるようになったので試してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/crifff/items/32ffc824f69ed5632217&#34;&gt;git-lfsは大容量のファイルを扱うもので多量のファイルを扱うものではない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-h.hatenablog.com/entry/2013/12/07/093423&#34;&gt;gitで重いリポジトリをcloneするとき - webネタ&lt;/a&gt; （&lt;a href=&#34;http://qiita.com/butchi_y/items/cc0fe50acc47c1e3ab32&#34;&gt;Qiita 版&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;Git - サブモジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://raimon49.github.io/2015/04/04/git-submodule-deinit.html&#34;&gt;Gitのsubmoduleをお手軽に削除する - Steel Dragon 14106&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/hiratara/20091112/1258023732&#34;&gt;Gitリポジトリ中のサブディレクトリを別のリポジトリにする - 北海道苫小牧市出身のPGが書くブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gozuk16.hatenablog.com/entry/2015/04/24/145714&#34;&gt;Gitリポジトリのディレクトリ構成を変えて別リポジトリにする - ごずろぐ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/go_astrayer/items/6e39d3ab16ae8094496c&#34;&gt;Git リポジトリに上がっているファイルを履歴ごと消すには？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dtan4/items/34e41e3bd40a43fd8cbf&#34;&gt;GitHub にパスワードとかセンシティブなファイルを push してしまったときの対処法 - Qiita&lt;/a&gt; : GitHub などリモートのリポジトリに上げてしまうと，とてつもなく面倒になるので，要注意&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hirogw/items/3ea3a321a367740e971a&#34;&gt;マージされてない他者のプルリクを取り込む - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sagaraya/items/60e983856e16dc571f22&#34;&gt;git commit時に英語でメッセージ書くためのヒントを表示する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;git-flow-and-github-flow:426366135f9b7036b5475695fbc6d142&#34;&gt;Git-flow and GitHub-flow&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scottchacon.com/2011/08/31/github-flow.html&#34;&gt;GitHub Flow – Scott Chacon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;GitHub Flow (Japanese translation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;A successful Git branching model » nvie.com&#34;&gt;A successful Git branching model » nvie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;git-flow cheatsheet&#34;&gt;git-flow cheatsheet&lt;/a&gt; （日本語）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://komaken.me/blog/2013/09/09/git-flow%E3%81%A8github-flow%E3%81%96%E3%81%A3%E3%81%8F%E3%82%8A%E3%81%BE%E3%81%A8%E3%82%81/&#34;&gt;git flowとgithub flowざっくりまとめ | KentaKomai Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.qnyp.com/2013/05/28/pull-request-for-github-beginners/&#34;&gt;GitHub初心者はForkしない方のPull Requestから入門しよう | qnyp blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/anqooqie/items/07367b2b5932f3acfc38&#34;&gt;Git for Windows 2.xのシステムコンフィグファイルは2つある - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;code&gt;--recursive&lt;/code&gt; オプションなしで cloneした 直後は &lt;code&gt;git update&lt;/code&gt; では初期化できないので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;Rebase は歴史の改変なので取り扱いに注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;code&gt;-f&lt;/code&gt; オプションを付けて強制的に push することは可能。ただしこれは（rebase と同じで）歴史の改変になるため取り扱いに注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Glide で Vendoring - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/vendoring-with-glide/" />
		<id>tag:text.Baldanders.info,2015-12-07:/golang/vendoring-with-glide/</id>
		<published>2015-12-07T23:30:21+09:00</published>
		<updated>2015-12-23T12:59:00+09:00</updated>
		<summary>Go 言語 1.5 の vendoring 機能をサポートするツールが glide である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;以前「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt; 1.5 の vendoring 機能を紹介したが，この vendoring のヘルパ・ツールと言えるのが &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; である。
&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では依存する外部パッケージの情報を YAML 形式の定義ファイルに記述し，この定義ファイルを基に外部パッケージの管理を行う。&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; 0.8 から挙動が少し変わった。
この記事では 0.8.2 を使っている）&lt;/p&gt;

&lt;h2 id=&#34;glide-のインストール:721380b38042a10816ac6a323733a866&#34;&gt;Glide のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は自身も &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; で外部パッケージを管理している。
なので最初は &lt;code&gt;go get&lt;/code&gt; ではなく &lt;a href=&#34;https://github.com/Masterminds/glide/releases&#34;&gt;Releases&lt;/a&gt; ページからビルド済みのものを取得することをお勧めする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;既に &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; が利用可能な状態なら，以下の要領でビルドできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\glide&amp;gt;SET GOPATH=C:\workspace\glide

C:\workspace\glide&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\glide&amp;gt;git clone git@github.com:Masterminds/glide.git src\github.com\Masterminds\glide
Cloning into &#39;src\github.com\Masterminds\glide&#39;...
remote: Counting objects: 2292, done.
remote: Compressing objects: 100% (65/65), done.
remote: Total 2292 (delta 34), reused 0 (delta 0), pack-reused 2292
Receiving objects: 100% (2292/2292), 468.01 KiB | 397.00
Receiving objects: 100% (2292/2292), 537.97 KiB | 397.00 KiB/s, done.
Resolving deltas: 100% (1578/1578), done.
Checking connectivity... done.

C:\workspace\glide&amp;gt;pushd src\github.com\Masterminds\glide

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;glide install
[INFO] Fetching updates for github.com/codegangsta/cli.
[INFO] Fetching updates for github.com/Masterminds/cookoo.
[INFO] Fetching updates for github.com/Masterminds/vcs.
[INFO] Fetching updates for gopkg.in/yaml.v2.
[INFO] Fetching updates for github.com/Masterminds/semver.
[INFO] Setting version for github.com/Masterminds/cookoo to 78aa11ce75e257c51be7ea945edb84cf19c4a6de.
[INFO] Setting version for github.com/Masterminds/semver to 6333b7bd29aad1d79898ff568fd90a8aa533ae82.
[INFO] Setting version for github.com/codegangsta/cli to b5232bb2934f606f9f27a1305f1eea224e8e8b88.
[INFO] Setting version for github.com/Masterminds/vcs to eaee272c8fa4514e1572e182faecff5be20e792a.
[INFO] Setting version for gopkg.in/yaml.v2 to f7716cbe52baa25d2e9b0d0da546fcf909fc16b4.

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;popd

C:\workspace\glide&amp;gt;go install -v ./...
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io
github.com/Masterminds/glide/msg
github.com/Masterminds/glide/gb
github.com/Masterminds/glide/vendor/gopkg.in/yaml.v2
github.com/Masterminds/glide/vendor/github.com/Masterminds/semver
github.com/Masterminds/glide/vendor/github.com/codegangsta/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/safely
github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/sql
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/active
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/convert
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/fmt
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/example
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/log
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web/auth
github.com/Masterminds/glide/util
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/doc
github.com/Masterminds/glide/cfg
github.com/Masterminds/glide/dependency
github.com/Masterminds/glide/cmd
github.com/Masterminds/glide

C:\workspace\glide&amp;gt;bin\glide.exe -v
glide version dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単な使い方は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt; glide -h
NAME:
   glide - The lightweight vendor package manager for your Go projects.

Each project should have a &#39;glide.yaml&#39; file in the project directory. Files
look something like this:

        package: github.com/Masterminds/glide
        imports:
                - package: github.com/Masterminds/cookoo
                  vcs: git
                  ref: 1.1.0
                  subpackages: **
                - package: github.com/kylelemons/go-gypsy
                  subpackages: yaml
                        flatten: true

NOTE: As of Glide 0.5, the commands &#39;in&#39;, &#39;into&#39;, &#39;gopath&#39;, &#39;status&#39;, and &#39;env&#39;
no longer exist.


USAGE:
   glide [global options] command [command options] [arguments...]

VERSION:
   0.8.2

COMMANDS:
   create, init Initialize a new project, creating a glide.yaml file
   get          Install one or more packages into `vendor/` and add dependency to glide.yaml.
   import       Import files from other dependency management systems.
   name         Print the name of this project.
   novendor, nv List all non-vendor paths in a directory.
   rebuild      Rebuild (&#39;go build&#39;) the dependencies
   install, i   Install a project&#39;s dependencies
   update, up   Update a project&#39;s dependencies
   tree         Tree prints the dependencies of this project as a tree.
   list         List prints all dependencies that Glide could discover.
   about        Learn about Glide
   help, h      Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --yaml, -y &amp;quot;glide.yaml&amp;quot;              Set a YAML configuration file.
   --quiet, -q                          Quiet (no info or debug messages)
   --debug                              Print Debug messages (verbose)
   --home &amp;quot;C:\Users\username\.glide&amp;quot;    The location of Glide files [$GLIDE_HOME]
   --no-color                           Turn off colored output for log messages
   --help, -h                           show help
   --version, -v                        print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;開発環境の準備:721380b38042a10816ac6a323733a866&#34;&gt;開発環境の準備&lt;/h2&gt;

&lt;p&gt;動作検証用に「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で使ったコードを利用する。
まず，以下の環境を作る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\workspace\vdemo2&amp;gt;SET GOPATH=C:\workspace\vdemo2

C:\workspace\vdemo2&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\vdemo2&amp;gt;tree /f .
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;julian-day.go&lt;/code&gt; の内容は以下のとおりである。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

    &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		}
		args[i] = num
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, modjulian.DayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然ながら，このままビルドしても外部パッケージがないため失敗する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;go install ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo2\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;依存関係を定義する:721380b38042a10816ac6a323733a866&#34;&gt;依存関係を定義する&lt;/h2&gt;

&lt;p&gt;開発環境ができたら，パッケージのフォルダ（今回は &lt;code&gt;src/julian-day&lt;/code&gt;）に移動し， &lt;code&gt;glide create&lt;/code&gt; コマンドで依存関係を定義する &lt;code&gt;glide.yaml&lt;/code&gt; ファイルを生成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;pushd src\julian-day

C:\workspace\vdemo2\src\julian-day&amp;gt;glide create
[INFO] Generating a YAML configuration file and guessing the dependencies
[INFO] Attempting to import from other package managers (use --skip-import to skip)
[INFO] Found reference to github.com\spiegel-im-spiegel\astrocalc\modjulian

C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            glide.yaml
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースコードを読んで &lt;code&gt;glide.yaml&lt;/code&gt; に必要な情報を推測して書いてくれているようだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:cre&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，デリミタが “/” じゃなくて “\” になってる。
Windows 環境だからかな。
残念 orz&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com\spiegel-im-spiegel\astrocalc\modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34; title=&#34;spiegel-im-spiegel/astrocalc&#34;&gt;astrocalc&lt;/a&gt;/modjulian パッケージのパスを修正して、更にバージョン情報を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com/spiegel-im-spiegel/astrocalc/modjulian
  version: v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;go get&lt;/code&gt; コマンドと同じように， &lt;code&gt;package&lt;/code&gt; のパスから自動的に repository を判別してパッケージを取得できる。
&lt;code&gt;go get&lt;/code&gt; コマンドと異なるのは， &lt;code&gt;glide.yaml&lt;/code&gt; ファイルで指定した &lt;code&gt;version&lt;/code&gt; 情報から適切な revision を選択できる点である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:semv&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:semv&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;また，以下のように VCS (Version Control System) の種類&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:vcs&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; と URI を明示的に指定することもできる（&lt;code&gt;vcs&lt;/code&gt; と &lt;code&gt;repo&lt;/code&gt; は必ずセットで指定する）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com/spiegel-im-spiegel/astrocalc/modjulian
  vcs:     git
  repo:    git@github.com:spiegel-im-spiegel/astrocalc.git
  version: v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば，プライベートな bare repository からインポートする場合には，この方法が有効である。&lt;/p&gt;

&lt;h2 id=&#34;パッケージの取得とビルド:721380b38042a10816ac6a323733a866&#34;&gt;パッケージの取得とビルド&lt;/h2&gt;

&lt;p&gt;パッケージの取得には &lt;code&gt;glide update&lt;/code&gt; または &lt;code&gt;glide up&lt;/code&gt; コマンドを起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;glide up
[INFO] Fetching updates for github.com/spiegel-im-spiegel/astrocalc.
[INFO] Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Scanning github.com/spiegel-im-spiegel/astrocalc for dependencies.
[INFO] Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Project relies on 1 dependencies.
[INFO] Writing glide.lock file
C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
        │  glide.lock
        │  glide.yaml
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでビルドが可能になった。
ではビルドしようかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;popd

C:\workspace\vdemo2&amp;gt;go install -v  ./...
julian-day/vendor/github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\vdemo2&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;h2 id=&#34;vendor-フォルダの管理:721380b38042a10816ac6a323733a866&#34;&gt;Vendor フォルダの管理&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;glide.lock&lt;/code&gt; ファイルには外部パッケージの状態が記述されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hash: b1eecd43769aa1225f7b8922a35566008561c64f4ce11180f299888ed153ad69
updated: 2015-12-23T10:47:22.4140434+09:00
imports:
- name: github.com/spiegel-im-spiegel/astrocalc
  version: 256cd3bd4dc63441d3f4759d761593a147d51d88
  subpackages:
  - modjulian
devImports: []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;glide.lock&lt;/code&gt; があれば &lt;code&gt;glide install&lt;/code&gt;（または &lt;code&gt;glide i&lt;/code&gt;）コマンドで &lt;code&gt;vendor&lt;/code&gt; フォルダ以下の状態を復元できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では外部パッケージを vendor フォルダ以下に repository 構造ごと展開する。
この場合，開発対象のパッケージも repository で管理しているのだから， repository が入れ子になり具合が悪い。
その辺，当の &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; はどうしてるのかなぁと思ったら &lt;code&gt;.gitignore&lt;/code&gt; ファイルで &lt;code&gt;vendor/&lt;/code&gt; を除外対象にしていた。
なるほど，そりゃそうか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;glide.yaml&lt;/code&gt; および &lt;code&gt;glide.lock&lt;/code&gt; ファイルの管理さえちゃんとしていれば &lt;code&gt;glide install&lt;/code&gt; コマンドでいつでも復元できるのだから &lt;code&gt;vendor&lt;/code&gt; フォルダ以下を除外しても問題ないわけだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:v&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
これは複数メンバで開発環境を共有する際には便利な機能である。&lt;/p&gt;

&lt;p&gt;また vendoring に対応していない（Go 1.4 以下の）環境や &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; がない環境では &lt;code&gt;go get&lt;/code&gt; で外部パッケージを取ってくることで（revision 等の問題はあるけど）一応ビルドは通る。&lt;/p&gt;

&lt;p&gt;更に言うと， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の標準機能に準拠しているため，他のサポートツールとの相性がいいのも利点だろう。
たとえば， &lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;ATOM ベースの開発環境&lt;/a&gt;は &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; と相性がいい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:gov&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:gov&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
あと，（多少強引な手を使っているが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:tci&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;） &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; のような CI (Continuous Integration) と組み合わせることも難しくない。&lt;/p&gt;

&lt;p&gt;こう考えると &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34;&gt;前に紹介&lt;/a&gt;した &lt;a href=&#34;http://getgb.io/&#34;&gt;gb&lt;/a&gt; よりも筋がいいツールといえるかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:721380b38042a10816ac6a323733a866&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/8e192e68d6b18bec3b4a&#34;&gt;glide - パッケージ管理のお困りの方へ - - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;Mac 環境なら brew でインストールできるらしい。 Linux 等の環境であれば &lt;code&gt;make&lt;/code&gt; コマンドで各種プラットフォームの実行ファイルをビルドできる。一応 &lt;code&gt;go get&lt;/code&gt; でもビルドできるが， revision を制御できないので失敗する可能性もある（これは &lt;code&gt;make&lt;/code&gt; コマンドでビルドする場合でも同じだけど）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;code&gt;glide create&lt;/code&gt; 時の依存パッケージの推測を抑止するには &lt;code&gt;--skip-import&lt;/code&gt; オプションを付ける。のだが，効いてないな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:semv&#34;&gt;今回であれば repository の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc/releases/tag/v0.1.0&#34;&gt;&lt;code&gt;v0.1.0&lt;/code&gt;&lt;/a&gt; タグに対応する revision を選択する。バージョンの記述形式は &lt;code&gt;package.json&lt;/code&gt; と同じように記述でき，バージョンの解釈は &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; に従っている。ちなみに revision ID を直接指定することもできる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:semv&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt; のほか svn (&lt;a href=&#34;http://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;), hg (&lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;), bzr (&lt;a href=&#34;http://bazaar.canonical.com/&#34;&gt;Bazaar&lt;/a&gt;) が利用可能である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダ以下は外部パッケージなので通常はさわることはない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:gov&#34;&gt;残念ながら，「&lt;a href=&#34;http://text.baldanders.info/golang/package-visualization-tool/&#34;&gt;パッケージの依存状況の視覚化&lt;/a&gt;」ツールは vendoring 機能に対応していないため上手く表示できない。なお， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;code&gt;glide list&lt;/code&gt; および &lt;code&gt;glide tree&lt;/code&gt; で依存パッケージを見ることができる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:gov&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; の &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/.travis.yml&#34;&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/Makefile&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt; を参照。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 「はやぶさ2」地球 Swing-by - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1205-diary/" />
		<id>tag:text.Baldanders.info,2015-12-06:/remark/2015/1205-diary/</id>
		<published>2015-12-06T00:22:47+09:00</published>
		<updated>2015-12-19T14:40:56+09:00</updated>
		<summary>「はやぶさ2」地球 Swing-by / GnuPG 2.1.10 released / Go 1.5.2 Released / 11月の Flattr / 機械創作でクリエイターは失業するか / 新刊小説の滅亡</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#hayabusa:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;「はやぶさ2」地球 Swing-by&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gnupg:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;GnuPG 2.1.10 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golang:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;Go 1.5.2 Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flattr:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;11月の Flattr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#machine:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;機械創作でクリエイターは失業するか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#book:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;新刊小説の滅亡&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;hayabusa:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;「はやぶさ2」地球 Swing-by&lt;/h2&gt;

&lt;p&gt;12月3日に「はやぶさ2」の地球 swing-by が行われた。
Swing-by 自体はうまくいったようだが，今のところ所定の軌道に乗ったかどうか確認中らしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hayabusa2.jaxa.jp/topics/20151202/&#34;&gt;「はやぶさ２」の地球スイングバイ軌道が確定しました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1931&#34;&gt;「はやぶさ2」打ち上げから1年、本日軌道変更(地球スイングバイ)を実施 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2015/12/20151203_hayabusa2_j.html&#34;&gt;JAXA | 小惑星探査機「はやぶさ2」の地球スイングバイ実施について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1938&#34;&gt;はやぶさ2、軌道変更(地球スイングバイ)を実施、成否は数日後に判明 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hayabusa2.jaxa.jp/topics/20151203/&#34;&gt;「はやぶさ２」スイングバイ直前に撮影された地球の画像 | JAXA はやぶさ２プロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;地球 Swing-by については以下の解説記事が参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jpn.nec.com/ad/cosmos/hayabusa2/swingby/&#34;&gt;探査機をスマートに飛ばすテクニック「スイングバイ」: 小惑星探査機「はやぶさ2」: NECの宇宙開発利用への取り組み「宙への挑戦」 | NEC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;もし地球が止まっているなら、近づく時も離れる時も、探査機の速度は変わりません。ですが地球は、秒速30kmという猛スピードで太陽の周りを公転しており、とても大きな運動エネルギーを持っています。「はやぶさ２」は地球の後方を通過することで、そのエネルギーのほんの一部をもらって、前方へ加速していきます。今回のスイングバイで「はやぶさ2」は毎秒1.6km、時速にすると何と約6000kmも速くなります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jpn.nec.com/ad/cosmos/hayabusa2/swingby/&#34;&gt;探査機をスマートに飛ばすテクニック「スイングバイ」&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;さて，週明けは「あかつき」だよ。
うまくいくといいね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.planetary.org/blogs/guest-blogs/2015/1204-akatsuki-returns-to-venus.html&#34;&gt;Back from the Brink: Akatsuki Returns to Venus | The Planetary Society&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;12月14日-追記:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;12月14日 追記&lt;/h3&gt;

&lt;p&gt;地球 swing-by 後の「はやぶさ2」の軌道計算が完了。
予定通り航行しているようだ。
おめでとう！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2015/12/20151214_hayabusa2_j.html&#34;&gt;JAXA | 小惑星探査機「はやぶさ2」の地球スイングバイ実施結果について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1948&#34;&gt;はやぶさ2、軌道変更(スイングバイ)成功を確認 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1951&#34;&gt;「はやぶさ2」の軌道変更(スイングバイ)時に撮影された地球の写真 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gnupg:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;GnuPG 2.1.10 released&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2015q4/000381.html&#34;&gt;[Announce] GnuPG 2.1.10 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はセキュリティ脆弱性関連のアップデートはないが，このバージョンで TOFU (Trust-On-First-Use) 信用モデルをサポートするらしい。
これって SSH のプロトコルで使われている方式かな&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Trust_on_first_use&#34;&gt;Trust on first use - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あぁ，また勉強しないと。
日本語の記事が見当たらないんだが&amp;hellip;&lt;/p&gt;

&lt;p&gt;その他の変更点は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: New trust models &amp;ldquo;tofu&amp;rdquo; and &amp;ldquo;tofu+pgp&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;gpg: New command &amp;ndash;tofu-policy.  New options &amp;ndash;tofu-default-policy and &amp;ndash;tofu-db-format.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;weak-digest to specify hash algorithms which should be considered weak.&lt;/li&gt;
&lt;li&gt;gpg: Allow the use of multiple &amp;ndash;default-key options; take the last available key.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;encrypt-to-default-key.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;unwrap to only strip the encryption layer.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;only-sign-text-ids to exclude photo IDs from key signing.&lt;/li&gt;
&lt;li&gt;gpg: Check for ambigious or non-matching key specification in the config file or given to &amp;ndash;encrypt-to.&lt;/li&gt;
&lt;li&gt;gpg: Show the used card reader with &amp;ndash;card-status.&lt;/li&gt;
&lt;li&gt;gpg: Print export statistics and an EXPORTED status line.&lt;/li&gt;
&lt;li&gt;gpg: Allow selecting subkeys by keyid in &amp;ndash;edit-key.&lt;/li&gt;
&lt;li&gt;gpg: Allow updating the expiration time of multiple subkeys at once.&lt;/li&gt;
&lt;li&gt;dirmngr: New option &amp;ndash;use-tor.  For full support this requires libassuan version 2.4.2 and a patched version of libadns (e.g. adns-1.4-g10-7 as used by the standard Windows installer).&lt;/li&gt;
&lt;li&gt;dirmngr: New option &amp;ndash;nameserver to specify the nameserver used in Tor mode.&lt;/li&gt;
&lt;li&gt;dirmngr: Keyservers may again be specified by IP address.&lt;/li&gt;
&lt;li&gt;dirmngr: Fixed problems in resolving keyserver pools.&lt;/li&gt;
&lt;li&gt;dirmngr: Fixed handling of premature termination of TLS streams so that large numbers of keys can be refreshed via hkps.&lt;/li&gt;
&lt;li&gt;gpg: Fixed a regression in &amp;ndash;locate-key [since 2.1.9].&lt;/li&gt;
&lt;li&gt;gpg: Fixed another bug for keyrings with legacy keys.&lt;/li&gt;
&lt;li&gt;gpgsm: Allow combinations of usage flags in &amp;ndash;gen-key.&lt;/li&gt;
&lt;li&gt;Make tilde expansion work with most options.&lt;/li&gt;
&lt;li&gt;Many other cleanups and bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt; gpg --version
gpg (GnuPG) 2.1.10
libgcrypt 1.6.4
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
Supported algorithms:
Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;golang:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;Go 1.5.2 Released&lt;/h2&gt;

&lt;p&gt;今週はアップデートが多いなぁ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.5.minor&#34;&gt;Go 1.5.2 milestone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;細かい不具合の修正がメインのようだ。
セキュリティ関連のバグはないかな。&lt;/p&gt;

&lt;h2 id=&#34;flattr:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;11月の Flattr&lt;/h2&gt;

&lt;p&gt;11月は1件のみ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flattr.com/thing/114786/timestamp/1443655861&#34; title=&#34;SETI@home - Flattr.com&#34;&gt;SETI@home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://flattr.com/&#34; title=&#34;Flattr - Social microdonations&#34;&gt;Flattr&lt;/a&gt; はまたサービスを&lt;a href=&#34;http://blog.flattr.net/2015/11/flattr-developer-update-6-time-to-move/&#34;&gt;改装&lt;/a&gt;してるみたいなのだが，今度はどうなるやら。&lt;/p&gt;

&lt;h2 id=&#34;machine:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;機械創作でクリエイターは失業するか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/special/fukui/20151201_732993.html&#34;&gt;人工知能と著作権　～機械創作の普及でクリエイターは失業するのか？～ -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;別に人工知能を使わなくても今あるもので「機械創作」なるものは可能だろう。&lt;/p&gt;

&lt;p&gt;たとえば「人工無脳」を使えば無限に言葉を紡ぐことができる。
また，今は亡き Mag. さんが公開されていた「&lt;a href=&#34;http://magarchive.halfmoon.jp/vector/chaos/index.html&#34;&gt;Chaos von Eschenbach&lt;/a&gt;」を使えば無限のバリエーションで作曲できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
あとは初音ミクにでも唄わせればいい。&lt;/p&gt;

&lt;p&gt;ほら「機械創作」なんて簡単でしょ。&lt;/p&gt;

&lt;p&gt;でも「人工無脳」や「自動作曲」が紡ぐ言葉や曲を以って「表現」しているとは誰も思わないだろう。
何故ならそこに知性は存在しない（しないと思っている）から。
それでもその知性なき創作に私たちは時に感動を見出す。
たとえば自然現象のような。&lt;/p&gt;

&lt;p&gt;ということは「機械創作」は別の問題を示唆している。
つまり「機械が創作する」ことが問題なのではなく「創作」することに知性が必要なのかということである。
それはたとえば「知的財産権」の論理基盤を根底から覆す可能性を秘めている。&lt;/p&gt;

&lt;p&gt;人工知能は今のところ「問いに答える（応える）」ことはできるが，自ら「問いを立てる」ことはできない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
私は，それこそが「機械」を知性と呼べない（今や最後の）理由だと思う。
IBM の &lt;a href=&#34;http://www.ibm.com/smarterplanet/jp/ja/ibmwatson/&#34;&gt;Watson&lt;/a&gt; がどんなに優秀でも「エキスパート・システム」のバリエーションに留まる限り知性にはならない。&lt;/p&gt;

&lt;p&gt;現実のピノキオはどうやっても人間になれないのである。
もしピノキオが人間になれるなら，そこにいるのは人間ではなく，まったく新しい知性と言える。&lt;/p&gt;

&lt;p&gt;じゃあ「知的労働者」は将来も安泰なのかといえば，全くそんなことはない。
むしろ人工知能は「知的労働」を侵食していくだろう。
何故なら「知的労働」に知性は必要ないのだから。&lt;/p&gt;

&lt;p&gt;決められたコードに従って「創作」しているだけの職業クリエイターこそが人工知能に排除される対象である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magarchive.halfmoon.jp/vector/chaos/copyright.html&#34;&gt;自動作曲と著作権&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/12/08/20151207jukedeck/&#34;&gt;自作のビデオに音楽をつけたい人、作曲サービスJukedeckが著作権のない曲を一瞬で作ってくれる | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;book:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;新刊小説の滅亡&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/04/downfall-of-novels/&#34;&gt;新刊小説は滅亡について考えた方がいい « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いやぁ&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;消費者にとって、新刊小説を買わないことには、メリットがあるからである。&lt;br&gt;
新刊小説は、買わない方がいいからである。&lt;br&gt;
なぜ買わない方がいいのか。どんなメリットがあるのか。それは「新刊小説の滅亡」に書いた。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/04/downfall-of-novels/&#34;&gt;新刊小説は滅亡について考えた方がいい&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;はウケた。
なかなかのセールストークである。
これ見てうっかり『&lt;a href=&#34;http://store.kadokawa.co.jp/shop/g/g321509000668/&#34;&gt;本をめぐる物語&lt;/a&gt;』を買う人もいるかもしれない。
いや，私は買わないけど。&lt;/p&gt;

&lt;p&gt;まぁ，でも，しかし，続きを読めば「なぜ」の答えは書いてあって&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;有体にいえば、一回読んだら置き場所に困るような文学など、買わない方がいい、ということだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/04/downfall-of-novels/&#34;&gt;新刊小説は滅亡について考えた方がいい&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;と結ばれている。&lt;/p&gt;

&lt;p&gt;わたしが15年間に溜め込んだマンガやラノベの山（文字通りの山というか蟻塚）を&lt;a href=&#34;http://text.baldanders.info/remark/2015/0920-diary/&#34;&gt;処分&lt;/a&gt;したら軽トラ山盛り1杯分あった。
これからは紙の本を買うのは仕事に絡む本か余程好きな作家さんのみにしようと心に決めた。
たしかに「一回読んだら置き場所に困るような」紙の本などおよびではない。
買うのなら E ブックで買うか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;， E ブックで買えないのなら図書館へ行くべきだ。&lt;/p&gt;

&lt;p&gt;要するに私たちがしたいことは「本を読む」ことであり「本を所有」することではないということだ。
「所有する」ことにお金を使うバカバカしさに（もはや消費者ではない）ユーザは気づいてしまったのだ。
これはたとえば映像や音楽でも同じ。
ユーザは観て聴いて読むことができるのなら手段は問わない（つまりお金を払っても構わない）し，それを阻もうとするのなら迂回するか，迂回もできないのなら「観て聴いて読む」行為を止めるだけである。&lt;/p&gt;

&lt;p&gt;もう「コンテンツを売って儲ける」ビジネスは破綻している。
それは近代でのみ通用する泡沫のビジネスモデルだったのだろう。&lt;/p&gt;

&lt;p&gt;音楽業界が失くなっても音楽は存在し続けるし，書籍出版業界が失くなっても本は存在し続ける。
そろそろ気づけ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;&lt;code&gt;TOFU&lt;/code&gt; でググってて気がついたんだけど， &lt;a href=&#34;http://www.gnutls.org/&#34;&gt;GnuTLS&lt;/a&gt; ってまだ生きてるんだね。使ってるところってどのくらいあるんだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;当時はこのソフトにメチャメチャはまったものである。他にも自動作曲ソフトには様々なものがある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;推論の過程でいくつかの仮説をたてることはある。が，それも「反応」の一種に過ぎない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;E ブックの実体はクラウドに置かれる。ユーザは E ブックにアクセスする権利を買っているだけで所有しているわけではない。ちなみに図書館は太古からあるクラウドである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Windows 用バイナリ・エディタ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/binary-editor/" />
		<id>tag:text.Baldanders.info,2015-12-04:/remark/2015/binary-editor/</id>
		<published>2015-12-04T23:14:34+09:00</published>
		<updated>2015-12-05T17:12:51+09:00</updated>
		<summary>Windows で EBCDIC を扱えるバイナリ・エディタを紹介。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;長らく組込み開発から離れているせいもあるが，昨今めっきりバイナリデータを触る機会が減った。
データを dump out することはあっても&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:021791166dbffd1ec8731dec1d23ca3a:dump&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:021791166dbffd1ec8731dec1d23ca3a:dump&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，直に弄ることは少なくなった。
それでも，全くなくなったわけではなく，そうなった時にいつも「ええつと，バイナリ・エディタってどこにあるっけ？」と探しまわることになるのだ。&lt;/p&gt;

&lt;p&gt;特に最近は EBCDIC，それも PACKED DECIMAL を弄らないといけなくて，たまにモニタを殴りたくなる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://motoama.chu.jp/program/905&#34;&gt;EBICDICで符号付数値型がなんだって？ « motoama&amp;rsquo;s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.simotime.com/datapk01.htm&#34;&gt;Packed-Decimal Format, Description and Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そうでなくても（ASCII コードに慣れてる身としては） EBCDIC は直感的じゃないのに。&lt;/p&gt;

&lt;h2 id=&#34;windows-で使えるバイナリ-エディタ:021791166dbffd1ec8731dec1d23ca3a&#34;&gt;Windows で使えるバイナリ・エディタ&lt;/h2&gt;

&lt;p&gt;というわけで， Windows で使えるバイナリ・エディタ。
実は色々あるのだが， EBCDIC を扱えるとなると以下の3つが妥当だろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vector.co.jp/soft/win95/util/se079072.html&#34; title=&#34;Stirlingの詳細情報 : Vector ソフトを探す！&#34;&gt;Stirling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www002.upp.so-net.ne.jp/janus/xedit.html&#34; title=&#34;ROM化支援バイナリエディタ - xedit -&#34;&gt;xedit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vector.co.jp/soft/win95/util/se079072.html&#34; title=&#34;Stirlingの詳細情報 : Vector ソフトを探す！&#34;&gt;Stirling&lt;/a&gt; はかなり古いアプリケーションで，最新版の 1.31 が出たのは1999年のようだ。
古いのがいけないわけではないが（実際，現在でも遜色ないほど高機能で職場で使ってる人もいる），流石に15年以上前のものを使うのはねぇ&amp;hellip;&lt;/p&gt;

&lt;p&gt;というわけで，残りの2つが個人的におすすめなのだが，今回は &lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt; を紹介する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:021791166dbffd1ec8731dec1d23ca3a:xe&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:021791166dbffd1ec8731dec1d23ca3a:xe&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;binary-editor-bz:021791166dbffd1ec8731dec1d23ca3a&#34;&gt;Binary Editor Bz&lt;/h2&gt;

&lt;p&gt;知る人ぞ知るだが， &lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt; のオリジナルはあの &lt;a href=&#34;http://www.vcraft.jp/&#34;&gt;c.mos&lt;/a&gt; さんによるものである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:021791166dbffd1ec8731dec1d23ca3a:cmos&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:021791166dbffd1ec8731dec1d23ca3a:cmos&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
で，そのオリジナルのコードを &lt;a href=&#34;https://github.com/devil-tamachan&#34;&gt;devil.tamachan&lt;/a&gt; さんが改造したのが今回紹介する &lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt; である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devil-tamachan.github.io/BZDoc/&#34;&gt;Binary Editor BZ&lt;/a&gt; : ヘルプページ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;現時点での最新版は &lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz/releases/tag/v1.9.7.1&#34;&gt;1.9.7.1&lt;/a&gt;。
Portable 版の zip ファイルの中身を適当なフォルダにコピーして起動すればよい。
簡単！&lt;/p&gt;

&lt;p&gt;ただし，最新のバージョンは &lt;code&gt;EBCDIC.def&lt;/code&gt; ファイルがないため，そのままでは EBCDIC で表示できない。
&lt;code&gt;EBCDIC.def&lt;/code&gt; ファイルはググれば見つかると思うが，一応&lt;a href=&#34;http://text.baldanders.info/material/bz/EBCDIC.def&#34;&gt;ここ&lt;/a&gt;にも置いておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt; では ASCII や EBCDIC の他， Shift-JIS, JIS, EUC や Unicode 系の文字エンコードィングにも（一応）対応している。
その他の特徴としては&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;既定で書き込み禁止（間違って弄らないようにするため）&lt;/li&gt;
&lt;li&gt;構造体解析が可能&lt;/li&gt;
&lt;li&gt;データをビットマップで俯瞰できる&lt;/li&gt;
&lt;li&gt;オフセットジャンプ（カーソル位置の値分だけジャンプする）&lt;/li&gt;
&lt;li&gt;画面を2分割まで可能&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ってとこかな。
個人的にはこれで必要十分。
贅沢を言えば 10GB 程度のファイル&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:021791166dbffd1ec8731dec1d23ca3a:file&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:021791166dbffd1ec8731dec1d23ca3a:file&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; を読み込んでもへこたれないでほしいものだが，まぁそこは無理は言うまい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:021791166dbffd1ec8731dec1d23ca3a:size&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:021791166dbffd1ec8731dec1d23ca3a:size&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:021791166dbffd1ec8731dec1d23ca3a:dump&#34;&gt;データを dump out するだけならいくらでも手段がある。懐かしいところだと UNIX 系の &lt;code&gt;od&lt;/code&gt; コマンドとかあるし（&lt;code&gt;-tx1z&lt;/code&gt; とかオプションを付けると幸せ），大抵のスクリプト言語なら手軽に dump out できる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:021791166dbffd1ec8731dec1d23ca3a:dump&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:021791166dbffd1ec8731dec1d23ca3a:xe&#34;&gt;&lt;a href=&#34;http://www002.upp.so-net.ne.jp/janus/xedit.html&#34; title=&#34;ROM化支援バイナリエディタ - xedit -&#34;&gt;xedit&lt;/a&gt; は組込み向けの開発に向いているが，今回は割愛する。ちなみに EBCDIC 対応でもカナや漢字をまともに扱えるものは存在しない。そもそもカナや漢字は汎用機ごとに方言がキツい（たとえ Shift-JIS でも旧 JIS だったりする）ので，汎用のツールはないと考えたほうがいい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:021791166dbffd1ec8731dec1d23ca3a:xe&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:021791166dbffd1ec8731dec1d23ca3a:cmos&#34;&gt;&lt;a href=&#34;http://www.vcraft.jp/&#34;&gt;c.mos&lt;/a&gt; さんといえば Vz Editor。私たちの世代から見れば神のようなお方である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:021791166dbffd1ec8731dec1d23ca3a:cmos&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:021791166dbffd1ec8731dec1d23ca3a:file&#34;&gt;そういうのがあるんだってば，どってんばってん。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:021791166dbffd1ec8731dec1d23ca3a:file&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:021791166dbffd1ec8731dec1d23ca3a:size&#34;&gt;&lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt; は今のところ 4GB までしか扱えない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:021791166dbffd1ec8731dec1d23ca3a:size&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM Editor で Amazon Associate ID を含んだ商品 URL を生成する - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/insert-amazon-url-with-associate-id-in-atom-editor/" />
		<id>tag:text.Baldanders.info,2015-11-27:/remark/2015/insert-amazon-url-with-associate-id-in-atom-editor/</id>
		<published>2015-11-27T22:20:50+09:00</published>
		<updated>2015-11-27T22:20:50+09:00</updated>
		<summary>昔，結城浩さんが Amazon の商品 URL を変換する秀丸マクロを公開されていて， ATOM Editor では使えないためどうしたものかと思っていたのだが，先日 init.coffee に簡単なコマンドを書く方法を習ったので移植してみた。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;昔，結城浩さんが Amazon の商品 URL を変換する秀丸マクロを公開されていて&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/hyuki/20120413/amazon&#34;&gt;アマゾン・アソシエイトID（アフィリエイト用のID）を含んだ商品URLを生成する秀丸マクロ - 結城浩のはてな日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これがとても便利で重宝していたのだが， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor では使えないためどうしたものかと思っていた。
で，先日 &lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/&#34;&gt;&lt;code&gt;init.coffee&lt;/code&gt; に簡単なコマンドを書く方法を習った&lt;/a&gt;ので，上の秀丸マクロを &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor に移植してみた。&lt;/p&gt;

&lt;p&gt;以下が &lt;code&gt;init.coffee&lt;/code&gt; に追記する内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;# Amazon Associate ID を含んだ商品 URL を生成する
#  クリップボードの内容を読み込み，変換してセットする
#  http(s)://www.amazon.co.jp/... から始まる文字列を想定
#  /dp/XXXXXXXXXX または /ASIN/XXXXXXXXXX のパタンを探す
#  変換できない場合はクリップボードの内容をそのままセットする
# refs http://d.hatena.ne.jp/hyuki/20120413/amazon
amazonUrl = (id) -&amp;gt;
  url = atom.clipboard.read()
  re = /^htt(?:p|ps):\/\/www.amazon.co.jp\//
  if !re.test(url)
    return url
  result = url.match(/\/(?:dp|ASIN)\/(.{10})/)
  if result == null
    return url
  else if result.length &amp;lt; 2
    return url
  asin = result[1]
  if id == &amp;quot;&amp;quot;
    &amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/#{asin}/&amp;quot;
  else
    &amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/#{asin}/#{id}/&amp;quot;

insertText = (str) -&amp;gt;
  return unless editor = atom.workspace.getActiveTextEditor()
  selection = editor.getLastSelection()
  selection.insertText(str)

atom.commands.add &#39;atom-text-editor&#39;, &#39;my-tools:amazon&#39;, -&amp;gt;
  id = &#39;&#39; # Amazon Associate ID
  insertText(amazonUrl(id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コードがやっつけでダサいのはご勘弁ということで&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:028833c50231051bae73e587c9bed4d5:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
&lt;code&gt;insertText&lt;/code&gt; 関数は&lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/&#34;&gt;前のとき&lt;/a&gt;の使い回し。&lt;/p&gt;

&lt;p&gt;これで &lt;code&gt;id&lt;/code&gt; に Associate ID （たとえば私の &lt;code&gt;baldandersinf-22&lt;/code&gt;）をセットして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.amazon.co.jp/%E6%95%B0%E5%AD%A6%E3%82%AC%E3%83%BC%E3%83%AB-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797341378
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をクリップボードにコピーした状態でコマンドパレットから「My Tools: Amazon」を起動すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.amazon.co.jp/exec/obidos/ASIN/4797341378/baldandersinf-22/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出力される。
変換できない場合はクリップボードの内容をそのまま出力する。&lt;/p&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;h2 id=&#34;参考:028833c50231051bae73e587c9bed4d5&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/docs/api/&#34;&gt;Atom API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_Expressions&#34;&gt;正規表現 - JavaScript | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.softel.co.jp/labs/tools/regex/&#34;&gt;正規表現チェッカー（JavaScript版） | Softel labs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt; は慣れん。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Security Advisory Gpg4win - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/security-advisory-gpg4win/" />
		<id>tag:text.Baldanders.info,2015-11-25:/remark/2015/security-advisory-gpg4win/</id>
		<published>2015-11-25T21:49:56+09:00</published>
		<updated>2015-11-25T21:49:56+09:00</updated>
		<summary>今回の Gpg4win のリリースはセキュリティ・アップデートを含み， Advisory も併せてリリースされている。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;Windows 用の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を含む暗号ツール群 &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; の 2.3.0 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lists.wald.intevation.org/pipermail/gpg4win-announce/2015-November/000067.html&#34;&gt;Gpg4win-announce: Gpg4win 2.3.0 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回のリリースはセキュリティ・アップデートを含み， Advisory も併せてリリースされている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lists.wald.intevation.org/pipermail/gpg4win-announce/2015-November/000066.html&#34;&gt;[Gpg4win-announce] Security Advisory Ggp4win 2015-11-25&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容は以下のとおり。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The installer will load and execute other code if it is placed in the same directory as a DLL with the right name.  This &amp;ldquo;current directory attack&amp;rdquo; or &amp;ldquo;dll preloading attack&amp;rdquo; can be part of a remote exploitation for example if the Gpg4win installer is downloaded to a common Downloads directory and the attacker can previously place files there by tricking a user or other software to download files with a specific name to the same place. If the Gpg4win installer is then executed, the other code may run, while the user believes to run only the Gpg4win installer.&lt;/li&gt;
&lt;li&gt;There is a &amp;ldquo;local privilege escalation&amp;rdquo; during an installer run.  Installer runs can happen during a fresh, an update install or a deinstallation. With Windows Vista or later an administrator can log in as user and give higher privileges to a single process using the User Account Control mechanism (UAC). If the installer is started in this way, there is a time window where an attacker running with user privileges can insert code in a temporary directory of the installer that will be executed with the higher privileges bypassing the UAC.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;まぁ Windows ではありがちな脆弱性である。
GnuPG 自体に問題があるわけではなく，&lt;a href=&#34;http://sourceforge.net/p/nsis/bugs/1125/&#34; title=&#34;NSIS: Nullsoft Scriptable Install System / Bugs / #1125 Code execution / Privilege escalation problems with NSIS installers&#34;&gt;インストーラのバグ&lt;/a&gt;っぽい。&lt;/p&gt;

&lt;p&gt;世の中は&lt;a href=&#34;http://text.baldanders.info/remark/2015/use-the-signal-luke/&#34;&gt;10人にひとりもまともに OpenPGP 製品を使えない&lt;/a&gt;らしいのに &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; を使ってる人がどの程度いるのかかなり怪しいのだが，まぁ一応。&lt;/p&gt;

&lt;p&gt;影響度はよく分からないが， DLL プリロード攻撃の脆弱性も権限昇格の脆弱性も割とヤバめなので，さっさとアップデートすることをおすすめする。
ひょっとして，これ他の Windows 向けオンラインソフトにも影響出るかなぁ。&lt;/p&gt;
</content>
	</entry>
	
</feed>
