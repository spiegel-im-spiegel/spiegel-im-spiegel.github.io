<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Tools - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/tools/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/tools/index.xml" />
	<id>tag:text.Baldanders.info,2018-02-04:/tags</id>
	<updated>2018-02-04T14:58:31+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.35</generator>

	
	<entry>
		<title>LibreOffice と OpenPGP （仕切り直し） - openpgp</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/openpgp/libreoffice-with-openpgp/" />
		<id>tag:text.Baldanders.info,2018-02-04:/openpgp/libreoffice-with-openpgp/</id>
		<published>2018-02-04T14:58:31+09:00</published>
		<updated>2018-02-04T14:58:31+09:00</updated>
		<summary>原因が分かったので仕切り直しの記事を書くことにする。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="openpgp" label="openpgp" scheme="http://text.baldanders.info/openpgp" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/openpgp/git-extensions-and-libreoffice-6-with-openpgp/&#34;&gt;Git Extensions と LibreOffice 6 と OpenPGP&lt;/a&gt;」で &lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; 文書に &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 署名できなくて「何がいけないんだろう。 誰かやり方を教えてください」と締めくくっていたが，原因が分かったので仕切り直しの記事を書くことにする。
情報を下さった方には感謝を捧げます。&lt;/p&gt;

&lt;h2 id=&#34;openpgp-署名について&#34;&gt;&lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 署名について&lt;/h2&gt;

&lt;p&gt;まず &lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; 6.0 のリリースノートはこちら。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.documentfoundation.org/ReleaseNotes/6.0/ja&#34;&gt;LibreOffice 6.0 リリースノート - The Document Foundation Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux 版では &lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; 5.4 から &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 署名とその検証が可能だったようだが， 6.0 で Windows 版および macOS 版でも可能になった。
他のプラットフォーム（Android 版のビュアーとか）で対応しているかどうかは不明。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; ドキュメントへのデジタル署名は X.509 鍵では以前から可能だった。
デジタル署名を付与することにより以下が担保される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;完全性（Integrity）： 改竄の有無&lt;/li&gt;
&lt;li&gt;認証（Authentication）： なりすましの有無&lt;/li&gt;
&lt;li&gt;否認防止（Non-repudiation）： 文書作成の否認を防止（完全性と認証により達成可能）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デジタル署名可能な &lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; ドキュメントとして以下を確認している。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writer （文書ドキュメント）&lt;/li&gt;
&lt;li&gt;Calc （表計算ドキュメント）&lt;/li&gt;
&lt;li&gt;Impress （プレゼンテーション）&lt;/li&gt;
&lt;li&gt;Draw （図形描画）&lt;/li&gt;
&lt;li&gt;Math （数式）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また &lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; では PDF ドキュメントへのデジタル署名も可能だが， &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 署名には対応していないようだ（X.509 のみ）。
残念（まぁ，他の PDF ツールが対応してないと意味がないし）。&lt;/p&gt;

&lt;p&gt;この記事では以下の環境を前提に話をすすめる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows 7 Professional SP1 64ビット版（Win10 でも大丈夫っぽい）&lt;/li&gt;
&lt;li&gt;LibreOffice 6.0.0 Windows 64ビット版（&lt;a href=&#34;https://portableapps.com/apps/office/libreoffice_portable&#34; title=&#34;LibreOffice Portable | PortableApps.com - Portable software for USB, portable and cloud drives&#34;&gt;Portable 版&lt;/a&gt;でもいけるらしい）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2.x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;理由はすぐに分かる。&lt;/p&gt;

&lt;h2 id=&#34;gnupg-のインストール&#34;&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 署名を行うために &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; をインストールする。
インストールの手順については以下を参照のこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/openpgp/using-gnupg-for-windows-1/&#34;&gt;GnuPG for Windows インストール編&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そしてインストール先だが，&lt;strong&gt;必ず既定の “&lt;code&gt;C:\Program Files (x86)\gnupg&lt;/code&gt;” フォルダにインストールすること&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;どうやら &lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; は実行本体である &lt;code&gt;gpg.exe&lt;/code&gt; の場所を “&lt;code&gt;C:\Program Files (x86)\gnupg\bin&lt;/code&gt;” フォルダに決め打ちしているらしく，他のフォルダにインストールしても &lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; が認識しないのだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gpg1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:gpg1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
ただ最近のインストーラはインストール先を指定する画面をすっ飛ばすみたい（？）なので，新規にインストールしている場合はあまり考えなくていいかもしれない。&lt;/p&gt;

&lt;p&gt;なお &lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; が推奨している &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; は不要で &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の最小構成のみインストールできていれば問題ない。
フロント・エンドの &lt;a href=&#34;https://www.kde.org/applications/utilities/kleopatra/&#34; title=&#34;KDE - Kleopatra - Certificate Manager and Unified Crypto GUI&#34;&gt;Kleopatra&lt;/a&gt; も不要&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:k1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:k1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;libreoffice-ドキュメントへの-openpgp-署名&#34;&gt;&lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; ドキュメントへの &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 署名&lt;/h2&gt;

&lt;p&gt;まずメニューから「ファイル(F)」→「デジタル署名(Q)」→「デジタル署名&amp;reg;&amp;hellip;」と辿っていく。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26181610768/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4657/26181610768_acaa5d2e1c_o.png&#34; srcset=&#34;https://farm5.staticflickr.com/4657/26181610768_acaa5d2e1c_o.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;LibreOffice: digital sign&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26181610768/&#34;&gt;LibreOffice: digital sign&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;すると以下のウィンドウが表示される。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40071712341/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4627/40071712341_13c8f8c2b7.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4627/40071712341_13c8f8c2b7.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;List of digital sigs (1)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40071712341/&#34;&gt;List of digital sigs (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ここで「ドキュメントに署名（D）&amp;hellip;」ボタンを押すと署名可能な鍵のリストが表示される。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26198104318/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4747/26198104318_ced43cb690.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4747/26198104318_ced43cb690.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Select key&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26198104318/&#34;&gt;Select key&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵であれば「支払期日」（何で？）の項目が “OpenPGP” と表記されている筈である（X.509 鍵なら “X.509” と表記される）。
鍵を選択して「署名」ボタンを押すとデジタル署名が付与される&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:pe1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:pe1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40071712521/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4741/40071712521_f1dbbfb8c3.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4741/40071712521_f1dbbfb8c3.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;List of digital sigs (2)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40071712521/&#34;&gt;List of digital sigs (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;デジタル署名は複数付与できる。
署名が完了したら「閉じる」ボタンを押して作業を終える。&lt;/p&gt;

&lt;p&gt;正しいデジタル署名が付与されていれば，編集画面が以下のようになる筈である。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/39172914465/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4674/39172914465_05e85ab216.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4674/39172914465_05e85ab216.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Valid sig&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/39172914465/&#34;&gt;Valid sig&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;またこの状態で編集作業を行うと以下の表示になる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40038567142/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4724/40038567142_c99e4f0848.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4724/40038567142_c99e4f0848.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Editing&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40038567142/&#34;&gt;Editing&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ドキュメントの保存を実行するとデジタル署名が削除されるのでご注意を。&lt;/p&gt;

&lt;h2 id=&#34;保存時に-openpgp-暗号化オプションがあるんだけど&#34;&gt;保存時に &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 暗号化オプションがあるんだけど&amp;hellip;&lt;/h2&gt;

&lt;p&gt;文書を「名前を付けて保存」すると以下のオプションが表示される。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40072008511/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4650/40072008511_1b320717d5.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4650/40072008511_1b320717d5.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Save as...&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40072008511/&#34;&gt;Save as...&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ここで「GPGキーで暗号化する」をチェックして保存すると暗号化可能な鍵のリストが表示されて暗号化できるっぽいんだけど，実際にやってみると&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40072008591/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4669/40072008591_44d719908c.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4669/40072008591_44d719908c.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Encryption error&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40072008591/&#34;&gt;Encryption error&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;となって上手くいかない。
自分の鍵でもダメだったので，まだ機能が組み込まれてないとか？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵でドキュメントが暗号化できると取り回しが凄く楽になるんだけどねぇ。
メールにパスワード書くとかマヌケなことをしなくて良くなるし（笑）&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/openpgp/gnupg-cheat-sheet/&#34;&gt;GnuPG チートシート（鍵作成から失効まで）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/openpgp/openpgp-key-management/&#34;&gt;OpenPGP 鍵管理に関する考察&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:gpg1&#34;&gt;いや，これダメだろ。何でこんなダサい作りになってるんだ？ 普通にインストールすれば PATH が張られるし，オプションに OpenPGP の項目があるんだから &lt;code&gt;gpg.exe&lt;/code&gt; までのフルパスを指定できるようにすればいいぢゃん。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gpg1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:k1&#34;&gt;色々試行錯誤して &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; も &lt;a href=&#34;https://www.kde.org/applications/utilities/kleopatra/&#34; title=&#34;KDE - Kleopatra - Certificate Manager and Unified Crypto GUI&#34;&gt;Kleopatra&lt;/a&gt; も不要と分かったときには椅子から転げ落ちそうになったよ。何だったんだ&lt;a href=&#34;http://text.baldanders.info/openpgp/git-extensions-and-libreoffice-6-with-openpgp/&#34; title=&#34;Git Extensions と LibreOffice 6 と OpenPGP&#34;&gt;前回&lt;/a&gt;のアレは &lt;code&gt;orz&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:k1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:pe1&#34;&gt;必要に応じて &lt;code&gt;gpg-agent&lt;/code&gt; が Pinentry を起動して PIN またはパスフレーズの入力を促す。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:pe1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Git Extensions と LibreOffice 6 と OpenPGP - openpgp</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/openpgp/git-extensions-and-libreoffice-6-with-openpgp/" />
		<id>tag:text.Baldanders.info,2018-02-03:/openpgp/git-extensions-and-libreoffice-6-with-openpgp/</id>
		<published>2018-02-03T18:18:31+09:00</published>
		<updated>2018-02-03T18:18:31+09:00</updated>
		<summary>LibreOffice での OpenPGP 署名が上手くできないんだけど！</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="openpgp" label="openpgp" scheme="http://text.baldanders.info/openpgp" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;h2 id=&#34;git-extensions-2-51-と-openpgp-署名&#34;&gt;&lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; 2.51 と &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 署名&lt;/h2&gt;

&lt;p&gt;先日 &lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; 2.51 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gitextensions/gitextensions/releases/tag/v2.51&#34;&gt;Release Version 2.51 · gitextensions/gitextensions · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.51 では色々と機能追加・改善があるが，個人的な目玉は &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 署名に対応したことだ。
メインのリポジトリ・ウィンドウでは “GPG” タブが追加され，コミットの電子署名の検証ができるようになった。
こんな感じ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:v1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:v1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/39343646184/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4609/39343646184_55ecfa512f.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4609/39343646184_55ecfa512f.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;GitEx: gpg validation&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/39343646184/&#34;&gt;GitEx: gpg validation&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;“GPG” タブを表示させるには設定で「GPG 情報を表示」にチェックを入れる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25182287037/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4743/25182287037_1396a310bd.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4743/25182287037_1396a310bd.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;GitEx: setting&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25182287037/&#34;&gt;GitEx: setting&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;更にコミットやタグ作成時に電子署名を付与することもできる。
コミット時はこんな感じ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40021720412/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4632/40021720412_f00cd337af.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4632/40021720412_f00cd337af.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;GitEx: commit&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40021720412/&#34;&gt;GitEx: commit&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;タグ作成時はこんな感じ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25182287227/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4662/25182287227_6e94fcd134_o.png&#34; srcset=&#34;https://farm5.staticflickr.com/4662/25182287227_6e94fcd134_o.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;GitEx: create tag&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25182287227/&#34;&gt;GitEx: create tag&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;Git&lt;/a&gt; と &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を連携する方法については以下を参照のこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/openpgp/git-commit-with-openpgp-signature/&#34;&gt;Git Commit で OpenPGP 署名を行う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;libreoffice-6-と-openpgp-署名&#34;&gt;&lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; 6 と &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 署名&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.libreoffice.org/&#34; title=&#34;LibreOffice - Free Office Suite - Fun Project - Fantastic People&#34;&gt;LibreOffice&lt;/a&gt; 6 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.documentfoundation.org/ReleaseNotes/6.0/ja&#34;&gt;LibreOffice 6.0 リリースノート - The Document Foundation Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1104230.html&#34;&gt;「LibreOffice 6.0」が公開 ～多数の改善を盛り込んだメジャーバージョンアップ - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これも色々と機能追加・改善があるが，この記事ではやはり OpenPGP 署名について。
Linux 版では以前からできてたそうだがバージョン 6 で Windows や macOS でもできるようになった。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26181610768/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4657/26181610768_acaa5d2e1c_o.png&#34; srcset=&#34;https://farm5.staticflickr.com/4657/26181610768_acaa5d2e1c_o.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;LibreOffice: digital sign&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/26181610768/&#34;&gt;LibreOffice: digital sign&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;つか，うまくいかないんだけど！&lt;/p&gt;

&lt;p&gt;どうも &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 本体だけではダメみたいで &lt;a href=&#34;https://www.kde.org/applications/utilities/kleopatra/&#34; title=&#34;KDE - Kleopatra - Certificate Manager and Unified Crypto GUI&#34;&gt;Kleopatra&lt;/a&gt; などのフロントエンド・ツールが必要なようだ。
Windows 環境では &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; を導入することで関連ツールを一度にインストールできる（macOS では &lt;a href=&#34;https://gpgtools.org/&#34;&gt;GPG Suite&lt;/a&gt; を導入すればいいらしい）。
GnuPG 側と上手く連携できていれば「証明書の選択」ダイアログに電子署名可能な鍵が表示されるらしい。&lt;/p&gt;

&lt;p&gt;でもダメなんだよねー。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40055187561/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4604/40055187561_2ceefb559b.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4604/40055187561_2ceefb559b.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Empty&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/40055187561/&#34;&gt;Empty&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;何がいけないんだろう。
誰かやり方を教えてください。
はっきり言って &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; 要らないので使えないなら削除したい。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/01/git-extensions-in-japanese/&#34;&gt;Git Extensions に関する覚え書き&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:v1&#34;&gt;一部文字化けなのはご容赦。文字化けしてるのは時差表示の部分なのだが，うちの Windows 環境ではこの部分を Shift-JIS で吐き出すので文字化けしてしまうのだ。 &lt;code&gt;display-charset&lt;/code&gt; オプションを弄ってもダメぽい。コマンドプロンプトや NYAGOS で使うぶんには問題ないんだけどねぇ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:v1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Git Extensions に関する覚え書き - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/01/git-extensions-in-japanese/" />
		<id>tag:text.Baldanders.info,2018-01-21:/remark/2018/01/git-extensions-in-japanese/</id>
		<published>2018-01-21T16:07:15+09:00</published>
		<updated>2018-02-03T18:31:50+09:00</updated>
		<summary>毎度のことながらインストールしたときのことを忘れているため，Git Extensions のインストールに絡むあれこれについて覚え書きを記しておく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;私は &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; の GUI フロントエンドとして &lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; を愛用しているのだが，毎度のことながらインストールしたときのことを忘れているため，インストールに絡むあれこれについて覚え書きを記しておく。&lt;/p&gt;

&lt;h2 id=&#34;git-extensions-のインストール&#34;&gt;&lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; のインストール&lt;/h2&gt;

&lt;p&gt;現在 &lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; は以下のサイトで運用されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gitextensions.github.io/&#34;&gt;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; は .NET Framework （4.6.1 以上）で動作するが Mono （5.0 以上）でも動くので Linux や macOS 等でも利用可能らしい。
Windows 用なら &lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; 本体の他に以下のツールが同梱されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:inst1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:inst1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kdiff3.sourceforge.net/&#34;&gt;KDiff3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうち &lt;a href=&#34;http://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt; と &lt;a href=&#34;http://kdiff3.sourceforge.net/&#34;&gt;KDiff3&lt;/a&gt; は SetupComplete ファイル&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sc1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:sc1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; にのみ同梱されているが，バージョンが古いため，別途インストールしてから（SetupComplete ファイルではなく） Setup ファイルでインストールしたほうがいいかもしれない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; を別途インストールしている場合は設定でそちらに差し替えできる。
&lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; は時々セキュリティ・アップデートが行われるが &lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; 側で追従できないことも多いので（SSH クライアントとして &lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; を使うのであれば）自前でインストールして運用した方がいいだろう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; はそのままでOK。&lt;/p&gt;

&lt;h2 id=&#34;git-extensions-を日本語化したいけど&#34;&gt;&lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; を日本語化したいけど&amp;hellip;&lt;/h2&gt;

&lt;p&gt;最近の &lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; はインストールした状態では日本語にできない。
&lt;a href=&#34;https://github.com/gitextensions/gitextensions&#34;&gt;リポジトリ&lt;/a&gt;に日本語化モジュールはあるのだが Setup ファイルに同梱されていないようだ。&lt;/p&gt;

&lt;p&gt;そこで無理矢理ではあるが，&lt;a href=&#34;https://github.com/gitextensions/gitextensions/releases/latest&#34;&gt;リリースページ&lt;/a&gt;から “Source Code” をダウンロードし，その中にある以下のファイルを &lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; インストール先フォルダ以下の &lt;code&gt;Translation&lt;/code&gt; に入れてみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gitextensions-2.xx.xx/GitUI/Translation/Japanese.gif&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gitextensions-2.xx.xx/GitUI/Translation/Japanese.xlf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gitextensions-2.xx.xx/GitUI/Translation/Japanese.Plugins.xlf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これで言語を日本語にできる。
言語の変更は Settings ダイアログの以下の部分をクリックする。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24939315857/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4765/24939315857_34f8968be0.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4765/24939315857_34f8968be0.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Setting of Git Extensions&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24939315857/&#34;&gt;Setting of Git Extensions&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;すると以下のウィンドウが表示されるので日本の国旗を選択すれば日本語に切り替わる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/39100077644/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4754/39100077644_db52f99e03.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4754/39100077644_db52f99e03.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Choose language in Git Extensions Setting&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/39100077644/&#34;&gt;Choose language in Git Extensions Setting&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;やってみるとわかると思うが，けっこう英語のままである（そのせいで Setup ファイルに含まれないのかな）。
&lt;code&gt;Japanese.xlf&lt;/code&gt; および &lt;code&gt;Japanese.Plugins.xlf&lt;/code&gt; はテキストファイルなので，ここをいじれば日本語化できそうだ。
もし英語得手の方がいれば翻訳に貢献できるかもしれない。
私は&amp;hellip; まぁ英語でも別に困らないか。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opcdiary.net/?page_id=27065&#34;&gt;私家版 Git For Windowsのインストール手順 | OPC Diary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://w3w.nnn2.com/?p=874&#34;&gt;KDiff3 の日本語化 – 各種パソコン技術情報&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://takkii.hatenablog.com/entry/2017/11/06/195156&#34;&gt;しれっと、GitExtensionを日本語化する。 - Sinatraのあらかると&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/openpgp/using-gnupg-for-windows-2/&#34;&gt;GnuPG for Windows : gpg-agent について&lt;/a&gt; : SSH の鍵管理も gpg-agent で行う&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/11/git-extensions-2_49/&#34;&gt;Git Extensions 2.49 × ConEmu ＝ ♥&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/openpgp/git-extensions-and-libreoffice-6-with-openpgp/&#34;&gt;Git Extensions と LibreOffice 6 と OpenPGP&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- eof --&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:inst1&#34;&gt;最近の &lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; には &lt;a href=&#34;https://github.com/Microsoft/Git-Credential-Manager-for-Windows&#34; title=&#34;Microsoft/Git-Credential-Manager-for-Windows: Secure Git credential storage for Windows with support for Visual Studio Team Services, GitHub, and Bitbucket multi-factor authentication.&#34;&gt;GCM (Git Credential Manager for Windows)&lt;/a&gt; は同梱されていない。 &lt;a href=&#34;https://github.com/Microsoft/Git-Credential-Manager-for-Windows&#34; title=&#34;Git Credential Manager for Windows&#34;&gt;GCM&lt;/a&gt; は &lt;a href=&#34;http://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt; の方に同梱されているため， &lt;a href=&#34;http://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt; インストール時に &lt;a href=&#34;https://github.com/Microsoft/Git-Credential-Manager-for-Windows&#34; title=&#34;Git Credential Manager for Windows&#34;&gt;GCM&lt;/a&gt; も有効にすること。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:inst1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sc1&#34;&gt;&lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; 2.50.02 であれば &lt;code&gt;GitExtensions-2.50.02-SetupComplete.msi&lt;/code&gt; が SetupComplete ファイルである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sc1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>20周年記念！ GnuPG 2.2.4 がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/12/gnupg-2_2_4-released/" />
		<id>tag:text.Baldanders.info,2017-12-21:/remark/2017/12/gnupg-2_2_4-released/</id>
		<published>2017-12-21T15:02:20+09:00</published>
		<updated>2017-12-21T15:02:20+09:00</updated>
		<summary>今回もセキュリティ・アップデートはない。平和なのはよいことである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2.4 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2017q4/000419.html&#34;&gt;[Announce] GnuPG 2.2.4 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんと！&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;20 years after the first version we are pleased to announce the availability of a new GnuPG release: version 2.2.4.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2017q4/000419.html&#34;&gt;GnuPG 2.2.4 released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;なんだってさ。
同梱されている &lt;code&gt;README.txt&lt;/code&gt; を見ると&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;GNUPG is

&lt;span class=&#34;hl&#34;&gt;  Copyright (C) 1997-2017 Werner Koch
&lt;/span&gt;  Copyright (C) 1994-2017 Free Software Foundation, Inc.
  Copyright (C) 2003-2017 g10 Code GmbH
  Copyright (C) 2002 Klarälvdalens Datakonsult AB
  Copyright (C) 1995-1997, 2000-2007 Ulrich Drepper &amp;lt;drepper@gnu.ai.mit.edu&amp;gt;
  Copyright (C) 1994 X Consortium
  Copyright (C) 1998 by The Internet Society.
  Copyright (C) 1998-2004 The OpenLDAP Foundation
  Copyright (C) 1998-2004 Kurt D. Zeilenga.
  Copyright (C) 1998-2004 Net Boolean Incorporated.
  Copyright (C) 2001-2004 IBM Corporation.
  Copyright (C) 1999-2003 Howard Y.H. Chu.
  Copyright (C) 1999-2003 Symas Corporation.
  Copyright (C) 1998-2003 Hallvard B. Furuseth.
  Copyright (C) 1992-1996 Regents of the University of Michigan.
  Copyright (C) 2000 Dimitrios Souflis
  Copyright (C) 2008,2009,2010,2012-2016 William Ahern

  GnuPG is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 3 of the License, or
  (at your option) any later version.

  GnuPG is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
  License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;となっているので，そういうことなんだろう。&lt;/p&gt;

&lt;p&gt;ちなみに，私が最初の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/BkGnuPG&#34; title=&#34;spiegel-im-spiegel/BkGnuPG: GNU Privacy Guard Plug-in for Becky! 2&#34;&gt;BkGnuPG&lt;/a&gt; を公開&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bgp1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bgp1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; したのが2000年9月12日，らしい（よく憶えてない&lt;code&gt;w&lt;/code&gt;）。
色んな思惑や成り行きがあり，当時は仕事で使うのは憚れた PGP から &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; へ切り替えるにあたって当時使ってた Becky! がネックになっていて，誰も &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 用のプラグインを作ってくれないからしょうがなしに自分で作ったんだよな。
したら日本語圏より英語圏のほうで需要が高くて，英語不得手なのに大変だったよ。
最後はロシア語にも対応してくれと言われる始末（ロシア語のリソースファイルもらって対応したけどね）。&lt;/p&gt;

&lt;p&gt;もし将来また GUI なアプリケーションをフリーで公開することがあるなら今度は最初から英語版を作ろうと心に誓ったのだが，今は「アプリ」の時代で国際化は当たり前だしねぇ。
もう私の出番はないだろう。&lt;/p&gt;

&lt;p&gt;与太話はこれくらいにして， &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2.4 では今回もセキュリティ・アップデートはない。
平和なのはよいことである。
主な修正点は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: Change default preferences to prefer SHA512.&lt;/li&gt;
&lt;li&gt;gpg: Print a warning when more than 150 MiB are encrypted using a cipher with 64 bit block size.&lt;/li&gt;
&lt;li&gt;gpg: Print a warning if the MDC feature has not been used for a message.&lt;/li&gt;
&lt;li&gt;gpg: Fix regular expression of domain addresses in trust signatures. [#2923]&lt;/li&gt;
&lt;li&gt;agent: New option &lt;code&gt;--auto-expand-secmem&lt;/code&gt; to help with high numbers of concurrent connections.  Requires libgcrypt 1.8.2 for having an effect.  [#3530]&lt;/li&gt;
&lt;li&gt;dirmngr: Cache responses of WKD queries.&lt;/li&gt;
&lt;li&gt;gpgconf: Add option &lt;code&gt;--status-fd&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;wks: Add commands &amp;ndash;check and &lt;code&gt;--remove-key&lt;/code&gt; to gpg-wks-server.&lt;/li&gt;
&lt;li&gt;Increase the backlog parameter of the daemons to 64 and add option &lt;code&gt;--listen-backlog&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;New configure option &lt;code&gt;--enable-run-gnupg-user-socket&lt;/code&gt; to first try a socket directory which is not removed by systemd at session end.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;--enable-run-gnupg-user-socket&lt;/code&gt; オプションはそのうち試してみたい。
そのうちね。&lt;/p&gt;

&lt;p&gt;最新版をインストールすると以下のようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.2.4
libgcrypt 1.8.2
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: C:/home/spiegel/keyring
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;アップデートは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lists.wald.intevation.org/pipermail/gpg4win-announce/2017-December/000075.html&#34;&gt;[Gpg4win-announce] Gpg4win 3.0.2 released&lt;/a&gt; : こちらはまだ &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2.3 ベース&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2017q4/000418.html&#34;&gt;[Announce] GPGME 1.10.0 released&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/openpgp/&#34;&gt;OpenPGP の実装&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:bgp1&#34;&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/BkGnuPG&#34; title=&#34;spiegel-im-spiegel/BkGnuPG: GNU Privacy Guard Plug-in for Becky! 2&#34;&gt;BkGnuPG&lt;/a&gt; はもうメンテナンスしてないので間違っても使おうとか考えないように。危ないからね。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bgp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM エディタを使った作図（PlantUML 編） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/12/plantuml-with-atom/" />
		<id>tag:text.Baldanders.info,2017-12-17:/remark/2017/12/plantuml-with-atom/</id>
		<published>2017-12-17T21:56:39+09:00</published>
		<updated>2017-12-17T21:56:39+09:00</updated>
		<summary>おおっ。流石にクラス図は PlantUML の方がいいな。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34; title=&#34;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&#34;&gt;前回&lt;/a&gt;で &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの掃除も終わったので，以前から気になっていた「&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; を使った作図」について調べてみた。
ええ，分かってますとも。
&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34; title=&#34;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&#34;&gt;前回&lt;/a&gt;に引き続き「現実逃避」というやつです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/&#34;&gt;Open-source tool that uses simple textual descriptions to draw UML diagrams.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;atom-に-plantuml-関連パッケージを導入する&#34;&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 関連パッケージを導入する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体は UML (Unified Modeling Language; 統一モデリング言語) を記述するための DSL (Domain-Specific Language; ドメイン特化言語) と考えてよい（実際には UML 以外のものも記述可能）。
UML の構文（に相当するもの）は図形で表されるが，それをテキストで記述できるようにしたのが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; である。
「UML って何？」って方もおられるだろうが，それは&lt;a href=&#34;#uml&#34;&gt;後ほど説明&lt;/a&gt;する。&lt;/p&gt;

&lt;p&gt;直前に述べたように &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体はテキストで記述するが，最終的には図（diagram）に落とし込むため &lt;a href=&#34;http://www.graphviz.org/&#34; title=&#34;Graphviz | Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; と Java の実行環境が必要となる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jar0&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:jar0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
これらをあらかじめ導入しておくこと（導入方法については割愛する）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で UML を書く（描く）ために以下の2つのパッケージを導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jar1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:jar1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; は（今のところ）ハイライト機能しかないようなので無くても構わないが， &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; は描画に必要なので必ず導入すること。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; を導入したら Settings を開いて “Charset” および “Graphviz Dot Executable” 各項目の設定をしておく。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/38219245875/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4736/38219245875_7b15a4bf02.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4736/38219245875_7b15a4bf02.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;settings of plantuml-viewer package&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/38219245875/&#34;&gt;settings of plantuml-viewer package&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;“Graphviz Dot Executable” 項目には &lt;a href=&#34;http://www.graphviz.org/&#34; title=&#34;Graphviz | Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の dot コマンドへのフルパスをセットする。
“Charset” 項目については， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で書くんだから UTF-8 にしておけばいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;最初はやっぱり-hello-world-でしょ&#34;&gt;最初はやっぱり Hello World でしょ&lt;/h2&gt;

&lt;p&gt;動作確認を兼ねて何か書いてみる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; では &lt;code&gt;.pu&lt;/code&gt;, &lt;code&gt;.puml&lt;/code&gt;, &lt;code&gt;.plantuml&lt;/code&gt; を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 用の拡張子と認識するようなので，まずは &lt;code&gt;hello.puml&lt;/code&gt; ファイルを作って以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Bob-&amp;gt;Alice : hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; で表示する（&lt;code&gt;ctrl-alt-p&lt;/code&gt; でビュアーが開く）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello1.puml&#34;&gt;&lt;img src=&#34;hello1.svg&#34; srcset=&#34;hello1.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;おおっ。
できたできた。
表示されている図は PNG, SVG, EPS のいずれかの形式で保存できる（コンテキスト・メニューから “Save As &amp;hellip;” を選択する）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は &lt;code&gt;@startuml ... @enduml&lt;/code&gt; の間を記述領域と見なすようで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;ほげほげ

@startuml
  Bob-&amp;gt;Alice : hello
@enduml

ほえほえ&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いても，全く同じ図が出力される。
他形式のドキュメントに埋め込むことを想定してのことだろうが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:embd1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:embd1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，今回は単純に図が出力できればいいので，以降の記述では &lt;code&gt;@startuml&lt;/code&gt; および &lt;code&gt;@enduml&lt;/code&gt; を省くことにする。&lt;/p&gt;

&lt;h2 id=&#34;見た目の調整&#34;&gt;見た目の調整&lt;/h2&gt;

&lt;p&gt;このままでもいいっちゃあいいのだが，もう少し見た目をどうにかしたい。
まずはモノクロ表示にしてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;skinparam monochrome true
&lt;/span&gt;Bob-&amp;gt;Alice : hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello2a.puml&#34;&gt;&lt;img src=&#34;hello2a.svg&#34; srcset=&#34;hello2a.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;という感じにモノクロになった。
調子に乗ってもう少し色々と弄ってみよう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;skinparam shadowing false
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam default{
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName &amp;#39;Noto Serif&amp;#39;, &amp;#39;Noto Serif JP&amp;#39;, serif
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 14
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam sequence {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontName &amp;#39;Noto Sans&amp;#39;, &amp;#39;Noto Sans JP&amp;#39;, sans-serif
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontColor black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontSize 10
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBackgroundColor White
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ActorBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ActorBackgroundColor White
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ParticipantBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ParticipantBackgroundColor LightGray
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  MessageAlign center
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;
actor ボブ
participant Alice

ボブ-&amp;gt;Alice : こんにちは
activate Alice

Alice--&amp;gt;ボブ : Hello
deactivate Alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;前半部分で線や背景色の色およびフォントについて指定し&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fnt1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fnt1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，後半部分で実際のシーケンスを記述している。
これを SVG に出力するとこんな感じになる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello2b.puml&#34;&gt;&lt;img src=&#34;hello2b.svg&#34; srcset=&#34;hello2b.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;見た目の記述に毎回あれだけの量を書くのはかったるいのでインクルードファイルとして別出ししてしまおう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;!include style.puml
&lt;/span&gt;
actor ボブ
participant Alice

ボブ-&amp;gt;Alice : こんにちは
activate Alice

Alice--&amp;gt;ボブ : Hello
deactivate Alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これでスッキリした。
&lt;a href=&#34;./style.puml&#34;&gt;&lt;code&gt;style.puml&lt;/code&gt;&lt;/a&gt; ファイルの中身はこんな感じで，記述をそのままコピっただけ。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;skinparam shadowing false
skinparam default{
  FontName &amp;#39;Noto Serif&amp;#39;, &amp;#39;Noto Serif JP&amp;#39;, serif
  FontColor black
  FontSize 14
}
skinparam sequence {
  ArrowColor Black
  ArrowFontName &amp;#39;Noto Sans&amp;#39;, &amp;#39;Noto Sans JP&amp;#39;, sans-serif
  ArrowFontColor black
  ArrowFontSize 10
  LifeLineBorderColor Black
  LifeLineBackgroundColor White
  ActorBorderColor Black
  ActorBackgroundColor White
  ParticipantBorderColor Black
  ParticipantBackgroundColor LightGray
  MessageAlign center
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;uml&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図可能な UML 図&lt;/h2&gt;

&lt;p&gt;現在 UML 2.0 では以下の図（Diagrams）が定義されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Diagrams

&lt;ul&gt;
&lt;li&gt;構造図（Structural Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/class-diagram&#34;&gt;クラス図（Class Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/object-diagram&#34;&gt;オブジェクト図（Object Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パッケージ図（Package Diagram）&lt;/li&gt;
&lt;li&gt;コンポジット構造図（Composite Structure Diagram）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/component-diagram&#34;&gt;コンポーネント図（Component Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/deployment-diagram&#34;&gt;配置図（Deployment Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;振る舞い図（Behavioral Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/use-case-diagram&#34;&gt;ユースケース図（Use Case Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図（Activity Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/state-diagram&#34;&gt;状態遷移図（State Machine Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図（Sequence Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コミュニケーション図（Communication Diagram）&lt;/li&gt;
&lt;li&gt;相互作用概要図（Interaction Overview Diagram）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/timing-diagram&#34;&gt;タイミング図（Timing Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;リンクがあるものが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 記述可能な図である。&lt;/p&gt;

&lt;p&gt;UML 各図の中の線や図形は全て「意味」が決められており，それらを組み合わせることでシステムの仕様や設計が表現できることを目指している。
名前が示す通りモデリングの設計手法と相性がいいため，オブジェクト指向設計においてよく使われる。&lt;/p&gt;

&lt;p&gt;実際には上で挙げた図を全て駆使するのではなく，システムの性格や規模に応じて幾つかの図を組み合わせて使うのが普通である。&lt;/p&gt;

&lt;p&gt;UML 図の中でもよく使われるシーケンス図とクラス図について &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; での記述を紹介しよう。
以前「&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/sequence-diagram/&#34; title=&#34;そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ）&#34;&gt;そうだ，シーケンス図を描こう！&lt;/a&gt;」の中で， &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で書いたシーケンス図&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
sequenceDiagram
    カバ-&gt;&gt;+カバン: あなた，泳げまして？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: 空は飛べるんですの？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: じゃあ，足が速いとか？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;カバン: あなた，何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&gt;&gt;カバン: ううっ
    end
&lt;/div&gt;
&lt;figcaption&gt;カバとカバン&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図するとこんな感じだろうか（図のリンク先が &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; ソースコード）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;kaban.puml&#34;&gt;&lt;img src=&#34;kaban.svg&#34; srcset=&#34;kaban.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;カバとカバン&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;kaban.puml&#34;&gt;カバとカバン&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;じゃあ， &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で書いたクラス図&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
classDiagram
    friends&lt;|--serval
    friends&lt;|--raccoon
    friends&lt;|--fennec
    serval : +Waai()
    raccoon : +OmakaseNanoda()
    fennec : +Haiyo()
&lt;/div&gt;
&lt;figcaption&gt;フレンズ&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図するとこんな感じかな（コメントをちょろんと加えてみた）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;friends-class.puml&#34;&gt;&lt;img src=&#34;friends-class.svg&#34; srcset=&#34;friends-class.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;フレンズ&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;friends-class.puml&#34;&gt;フレンズ&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おおっ。
流石にクラス図は &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の方がいいな。
矢印は横向きにも出来るっぽい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;wiki.puml&#34;&gt;&lt;img src=&#34;wiki.svg&#34; srcset=&#34;wiki.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;今度からクラス図描くときは &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で描くようにしよう。&lt;/p&gt;

&lt;h2 id=&#34;やっぱり考えながら描く&#34;&gt;やっぱり考えながら描く&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/sequence-diagram/&#34; title=&#34;そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ）&#34;&gt;そうだ，シーケンス図を描こう！&lt;/a&gt;」でも書いたんだけど，クラス図やシーケンス図といったものは試行錯誤しながら描いていくものなのよ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:case1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:case1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
お客さんもマネージャもプログラマも UML 図を中心に議論を行っていく。
だから作成や修正が面倒なツールはダメなのだ。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は時々刻々と修正されることを前提にしたツールと言える。&lt;/p&gt;

&lt;p&gt;もうひとつ。&lt;/p&gt;

&lt;p&gt;要求定義を行っていくと「要求」やそれに伴う「仕様」が大きく変化することがある。
変化すること自体は（改善されてるってことだし）結構なのだが（予算規模が変わってアワアワする可能性はあるけど），あとからチームに参加する人たちは「結果」しか提示されないので「何故そのような「要求」に至ったか」が理解できないことが多い。
不完全な理解のまま作業をすすめると必ず何処かで不整合が起きる（つまり文脈（context）が大事ってこと）。&lt;/p&gt;

&lt;p&gt;だから議論の流れを後から追えるよう「履歴」をとっていく必要がある。
私が最近 UML 図に関して教わったのは&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;最初は不完全でも間違ってても構わない。まずは考えていることを図にぶちまけることが重要&lt;/li&gt;
&lt;li&gt;ただし，クラス図では多重度を記述すること（MUST）&lt;/li&gt;
&lt;li&gt;要求定義レベルの図と設計レベルの図は必要とされる詳細度や厳密度が異なる。最初から設計レベルの図を描こうとしないこと&lt;/li&gt;
&lt;li&gt;作成した図は（手書きのものも含めて）全て履歴として保管し，後から参照できるようにすること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;だったかな。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の利点は，テキストであるが故に修正・変更が容易で， git などのバージョン管理システムと組み合わせて履歴から差分情報を抽出しやすいことにある。
ぶっちゃけ，出力としての PNG や SVG 画像ファイルにはさしたる価値はなく， UML 用の DSL である &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の記述にこそ大きな価値があるということだ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/&#34;&gt;UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/skinparam&#34;&gt;Changing colors and fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yohshiy.blog.fc2.com/blog-category-22.html&#34;&gt;PlantUML の使い方 | プログラマーズ雑記帳&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/ogomr/items/0b5c4de7f38fd1482a48&#34;&gt;PlantUML Cheat Sheet - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/nakahashi/items/3d88655f055ca6a2617c&#34;&gt;AtomとPlantUMLで爆速UMLモデリング - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/k_nakayama/items/77ca73753ebd049a66de&#34;&gt;Atom+PlantUMLで見た目もいい感じのシーケンス図を作成する - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:jar0&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の本体は &lt;code&gt;plantuml.jar&lt;/code&gt; で提供されている。このファイルを使って “&lt;code&gt;java -jar plantuml.jar -language&lt;/code&gt;” とコマンドを打つと &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で使われる全シンボルが表示される。シーケンス図以外は内部で DOT 言語に変換してから &lt;a href=&#34;http://www.graphviz.org/&#34; title=&#34;Graphviz | Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; を使って作図するようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jar0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:jar1&#34;&gt;Windows なら &lt;code&gt;%USERPROFILE%\.atom\packages\plantuml-viewer&lt;/code&gt; フォルダにインストールされるが，その中の &lt;code&gt;node_modules\node-plantuml&lt;/code&gt; フォルダに &lt;code&gt;plantuml.jar&lt;/code&gt; がある筈である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jar1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:embd1&#34;&gt;&lt;code&gt;@startuml&lt;/code&gt; の後ろに &lt;code&gt;images/hello.png&lt;/code&gt; などと指定すれば &lt;code&gt;plantuml.jar&lt;/code&gt; のほうで自動的に指定したパス名で画像ファイルを出力するらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:embd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fnt1&#34;&gt;フォント名については &lt;code&gt;font-family&lt;/code&gt; としてそのまま SVG に埋め込まれる。従って環境によって見え方が異なる筈である。どの環境でも同じような見え方にしたいなら PNG で保存するのが最も確実だろう。その場合は &lt;code&gt;xxxFontName&lt;/code&gt; に自マシンにインストールされている具体的なフォント名を指定する必要がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fnt1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:case1&#34;&gt;もちろん UML を CASE (Computer Aided Software Engineering) の入力手段として使う場合もある（つか UML ってそれを念頭に置いて開発されたものだからねぇ）。その場合は矛盾のない正確な記述が要求される。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:case1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/" />
		<id>tag:text.Baldanders.info,2017-12-16:/remark/2017/12/favorite-atom-packages-2017/</id>
		<published>2017-12-16T18:16:31+09:00</published>
		<updated>2017-12-17T08:37:00+09:00</updated>
		<summary>というわけで，唐突に ATOM エディタの掃除とか始めてしまう。ついでに最近のお気に入りパッケージとか紹介してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;なんで日本人はクソ忙しい年末に「大掃除」とかするんでしょうねぇ。
普段からやっとけっての，自分。
分かってます。
現実逃避ってやつですね（笑）&lt;/p&gt;

&lt;p&gt;というわけで，唐突に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの掃除とか始めてしまう。
ついでに最近のお気に入りパッケージとか紹介してみる。&lt;/p&gt;

&lt;h2 id=&#34;atom-のいいところ-悪いところ&#34;&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; のいいところ，悪いところ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; のいいところって何だろう。
私の場合，あるエディタが気に入る理由はひとつしかない。
それは&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;手に馴染むかどうか&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;である。
これは極めて感覚的かつ主観的なので説明しづらい。
でも，これって殆どの人がそうじゃないだろうか。&lt;/p&gt;

&lt;p&gt;たとえば私が「&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の◯◯機能がチョー便利！」とか「◯◯パッケージが素敵！」とか言ったところで「それ◯◯で出来るよ」と返されるのがオチである。
「好き」という感情は感覚的なものなので合理的に説明するのは難しいし，好悪を評価軸に他人を説得するのは更に無理筋というものである。&lt;/p&gt;

&lt;p&gt;逆に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の悪いところは幾らでも挙げられる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tsundere1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:tsundere1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
すぐ思いつくところでは&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;起動が遅い&lt;/li&gt;
&lt;li&gt;全体的に動きがモッサリしている&lt;/li&gt;
&lt;li&gt;巨大ファイルを（事実上）扱えない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;といった感じ。
これのせいで私はテキスト・エディタを「&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34;&gt;秀丸&lt;/a&gt;」から完全に乗り換えることができないでいる。
今のところ &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; での作業はテキスト表示・入力・編集作業全体の9割5分といったところ。
ちょこっとだけファイルの中身を覗いてみたいとか，10万行くらいの巨大 CSV ファイル（しかも Shift-JIS）を開きたいとかいったことには  &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; は向かない。&lt;/p&gt;

&lt;p&gt;まぁ，でも，私がよく使うパッケージ等を紹介することで「&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタってこんな感じ」くらいのことは分かってもらえるのではないかと淡い期待を寄せてみる。&lt;/p&gt;

&lt;h2 id=&#34;インストールしたパッケージを整理する&#34;&gt;インストールしたパッケージを整理する&lt;/h2&gt;

&lt;p&gt;さて，前口上はこのくらいにして，タイトル通り &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの掃除を始めよう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; は多様なパッケージ群が特徴でインストールも非常に簡単なのはいいのだが &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を長く使っているとインストールしたまま忘れ去ってしまったパッケージのひとつやふたつはあるものだ。
自分の環境にどんなパッケージが入っているか調べるには以下のコマンドを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm list -i -b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみにパッケージだけを見る場合には &lt;code&gt;-p&lt;/code&gt; オプションを付けて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm list -i -b -p&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすればよい（テーマのみなら &lt;code&gt;-t&lt;/code&gt; オプションを付ける）。
表示される一覧を見て「何だっけ？ これ」っていうのがあったなら削除してしまって構わない。
ただし，パッケージ同士が依存関係にある場合は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を再起動した際に再インストールを要求されることがある。&lt;/p&gt;

&lt;p&gt;パッケージの削除は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の Setting で行うかコマンドラインで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm delete package-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすればいい。&lt;/p&gt;

&lt;p&gt;お気に入りのパッケージについては，各パッケージの Web ページで ☆ (star) を付けることをお勧めする。
Star を付けたパッケージは初期インストール時に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm stars --install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で一気にインストールすることが可能になる。
詳しくは「&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;」を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;2017年のお気に入りパッケージ&#34;&gt;2017年のお気に入りパッケージ&lt;/h2&gt;

&lt;p&gt;それでは以下に2017年末時点でよく使うパッケージを紹介する。&lt;/p&gt;

&lt;h3 id=&#34;テーマ&#34;&gt;テーマ&lt;/h3&gt;

&lt;p&gt;最近は &lt;a href=&#34;https://atom.io/themes/atom-material-syntax-dark&#34;&gt;atom-material-syntax-dark&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;本当はライト・テーマにしたいのだが，いいのがないんだよねぇ。
何だってみんなライト・テーマの背景を真っ白にするんだろう。
ちょっとベージュっぽい背景色にすれば，それで充分眼に優しい配色になるのに。&lt;/p&gt;

&lt;p&gt;黒背景もそれはそれで視覚的にキツいんだけど，真っ白背景よりはマシなので仕方なくダーク・テーマを使っている。&lt;/p&gt;

&lt;p&gt;選択するテーマによるのだが &lt;a href=&#34;https://atom.io/packages/highlight-line&#34;&gt;highlight-line&lt;/a&gt; でカーソル行にアンダーラインを表示させている。
&lt;code&gt;styles.less&lt;/code&gt; ファイルで簡単に色などを調整できるのがよい。&lt;/p&gt;

&lt;h3 id=&#34;git-関連&#34;&gt;Git 関連&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 1.18 でコア・パッケージに &lt;a href=&#34;https://atom.io/packages/github&#34;&gt;github&lt;/a&gt; が導入され，ようやく GUI で git の基本操作が出来るようになった。
ただし，キーボード・ベースの操作では &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; の方が使いやすい。
てか，私は主に &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; のほうを使っている。&lt;/p&gt;

&lt;p&gt;他には， commit 履歴を視覚的に見るために &lt;a href=&#34;https://atom.io/packages/git-time-machine&#34;&gt;git-time-machine&lt;/a&gt; を使うことがある。
ちょっと癖が強いのが難点なのだが。&lt;/p&gt;

&lt;h3 id=&#34;自動保存&#34;&gt;自動保存&lt;/h3&gt;

&lt;p&gt;ファイルの自動保存機能として，コア・パッケージに &lt;a href=&#34;https://atom.io/packages/autosave&#34;&gt;autosave&lt;/a&gt; というのがあるのだが，ファイル保存をトリガにして動く機能もあるので（&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; の commit コメントとか），使い所が微妙である。&lt;/p&gt;

&lt;p&gt;ちなみに，かつての &lt;a href=&#34;https://atom.io/packages/save-session&#34;&gt;save-session&lt;/a&gt; 機能は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 本体に取り込まれているそうで，保存を忘れて &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を閉じても，次に開くときは未保存状態のまま復元されるようだ。
よしよし。&lt;/p&gt;

&lt;h3 id=&#34;go-plus-と-atom-ide&#34;&gt;go-plus と atom-ide&lt;/h3&gt;

&lt;p&gt;はっきり言おう。
私が &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にロックインされている最大の理由が &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージである。
コードの入力補完と整形，lint，テスト，カバレッジ 等々&amp;hellip; これがなかったらコーディング効率半減どころか 70% 減かも。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージを入れると副パッケージとして，以下も併せてインストールされる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-debug&#34;&gt;go-debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-signature-statusbar&#34;&gt;go-signature-statusbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/hyperclick&#34;&gt;hyperclick&lt;/a&gt; （&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; が入ってる場合は不要？）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また &lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34; title=&#34;GitHub - alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output&#34;&gt;alecthomas/gometalinter&lt;/a&gt; をはじめとする大量のツールがインストールされるため &lt;code&gt;GOPATH&lt;/code&gt; および &lt;code&gt;PATH&lt;/code&gt; 環境変数の設定をしておくこと。&lt;/p&gt;

&lt;p&gt;最近の &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; は &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; を導入するよう勧めてくる。
&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; は最近発表された &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 用の IDE (Integrated Development Environment; 統合開発環境) パッケージで &lt;a href=&#34;http://langserver.org/&#34;&gt;LSP (Language Server Protocol)&lt;/a&gt; に対応しているのが売りである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ide.atom.io/&#34;&gt;Atom IDE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どうも &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; は &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; とも両立するようになったらしい。
&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; は言語ごとのサブパッケージと組み合わせるようになっていて， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に対応しているものとしては &lt;a href=&#34;https://atom.io/packages/ide-go&#34;&gt;ide-go&lt;/a&gt; というパッケージがあるのだが，これがウチの環境では動いてくれんのよ。
&lt;a href=&#34;https://atom.io/packages/ide-go&#34;&gt;ide-go&lt;/a&gt; のバックエンドには &lt;a href=&#34;https://github.com/sourcegraph/go-langserver&#34; title=&#34;GitHub - sourcegraph/go-langserver: Go language server to add Go support to editors and other tools that use the Language Server Protocol (LSP)&#34;&gt;sourcegraph/go-langserver&lt;/a&gt; が動いているのだが，こいつが Windows と相性が悪い気がする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に関しては &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; があれば &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; は全く必要ないのだが，他の言語（たとえば &lt;a href=&#34;https://atom.io/packages/ide-typescript&#34;&gt;ide-typescript&lt;/a&gt; とか）用に入れてある。
そのうち統合されることがあるのだろうか。&lt;/p&gt;

&lt;h3 id=&#34;editorconfig&#34;&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;コード書きで &lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; を使わないやつは，もはや evil と言っていいだろう。
チームでソースコードのフォーマットを合わせるなら &lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; は必須だし，ひとりで作業するときもリポジトリに必ず &lt;code&gt;.editorconfig&lt;/code&gt; を含める習慣をつけていきたいものである。&lt;/p&gt;

&lt;h3 id=&#34;機能を直接埋め込む&#34;&gt;機能を直接埋め込む&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; では &lt;code&gt;init.coffee&lt;/code&gt; ファイルで機能を記述し組み込むことが出来る。
パッケージにするまでもない小さな処理などで重宝する。&lt;/p&gt;

&lt;p&gt;私が組み込んでいるのは以下の機能。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/&#34;&gt;ATOM Editor で現在日時を挿入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-amazon-url-with-associate-id-in-atom-editor/&#34;&gt;ATOM Editor で Amazon Associate ID を含んだ商品 URL を生成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;日本語関連のパッケージ&#34;&gt;日本語関連のパッケージ&lt;/h3&gt;

&lt;p&gt;以降は簡単に箇条書きで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/auto-encoding&#34;&gt;auto-encoding&lt;/a&gt;&lt;/em&gt; ： 文字エンコーディングを自動で判定してくれる。 Shift-JIS や EUC-JP なファイルを開く時に重宝する。たまに間違うのがご愛嬌&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/japan-util&#34;&gt;japan-util&lt;/a&gt;&lt;/em&gt; ： 日本語用の文字変換パッケージ半角/全角変換や平仮名/片仮名変換とかしてくれる&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/show-ideographic-space&#34;&gt;show-ideographic-space&lt;/a&gt;&lt;/em&gt; ： いわゆる全角空白文字を視覚化してくれる。これがないとコンパイルエラー時にパニクるハメになる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:zs1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:zs1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。見せ方は &lt;code&gt;styles.less&lt;/code&gt; ファイルでカスタマイズ可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;その他のお気に入りパッケージ&#34;&gt;その他のお気に入りパッケージ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/autoclose-html&#34;&gt;autoclose-html&lt;/a&gt;&lt;/em&gt; ： HTML 入力でタグを入力すると自動的に閉じタグを補完してくれる。便利なのだが HTML を直に弄ることが少なくなったので削除した&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/file-icons&#34;&gt;file-icons&lt;/a&gt;&lt;/em&gt; ： Tree View やタブのアイコン表示を見やすくしてくれる&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/language-lua&#34;&gt;language-lua&lt;/a&gt;&lt;/em&gt; ： Lua 言語用のパッケージ。 &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; に対応するものがないっぽいので。 &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; 用のバッチ処理等を書くのに Lua 言語を使うのよ&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/markdown-table-editor&#34;&gt;markdown-table-editor&lt;/a&gt;&lt;/em&gt; ： Markdown のテーブル作成支援パッケージ。めっさ便利&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/nav-panel-plus&#34;&gt;nav-panel-plus&lt;/a&gt;&lt;/em&gt; ： アウトライン表示。 &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; のアウトラインで表示できない言語（markdown 等）はこちらで。以前は &lt;a href=&#34;https://atom.io/packages/symbols-tree-view&#34;&gt;symbols-tree-view&lt;/a&gt; を使っていたが，こちらに乗り換えた&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/open-recent&#34;&gt;open-recent&lt;/a&gt;&lt;/em&gt; ： File メニューに “Open Recent” 項目を追加し，最近開いたファイルやプロジェクトを表示してくれる&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt;&lt;/em&gt; ： &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 内でターミナルを起動する。 shell  や環境変数を指定できるのが素敵。私は shell として &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; を指定している&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;未インストールだけど気になってるパッケージ&#34;&gt;未インストールだけど気になってるパッケージ&lt;/h2&gt;

&lt;p&gt;こちらも簡単に箇条書きで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/docblockr&#34;&gt;fdocblockr&lt;/a&gt;&lt;/em&gt; ： &lt;code&gt;/** */&lt;/code&gt; みたいなブロックコメントを生成してくれる。 Java とかならありがたいが &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は微妙&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt;&lt;/em&gt; ： PlantUML 用の言語パッケージと画像表示パッケージ。 SVG や PNG といった画像データとして保存できるのが素敵。 DOT 言語に変換されるので， &lt;a href=&#34;http://www.graphviz.org/&#34; title=&#34;Graphviz | Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; を用意する必要がある

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nakahashi/items/3d88655f055ca6a2617c&#34;&gt;AtomとPlantUMLで爆速UMLモデリング - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/k_nakayama/items/77ca73753ebd049a66de&#34;&gt;Atom+PlantUMLで見た目もいい感じのシーケンス図を作成する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/linter&#34;&gt;linter&lt;/a&gt;&lt;/em&gt; ： これ単独では使えなくて，言語ごとに lint パッケージを用意する必要がある。 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; が独自の強力な lint 機能を持っているため不要

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/pechefamille/items/40966a0c78846f4053c9&#34;&gt;AtomにESLint導入した - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/tablr&#34;&gt;tablr&lt;/a&gt;&lt;/em&gt; ： CSV ファイルをスプレッドシート風に表示・編集できる。小さいファイルならいいんだけど， CSV ファイルって大抵が巨大ファイルだからなぁ。結局 Office ツール使ったほうがよかったり&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://texwiki.texjp.org/?Atom&#34;&gt;Atom - TeX Wiki&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://employment.en-japan.com/engineerhub/entry/2017/08/10/110000&#34;&gt;［保存版］Atomエディタ 便利なパッケージ一覧！ 全23社のWebエンジニア・デザイナーがおすすめを紹介 - エンジニアHub｜若手Webエンジニアのキャリアを考える！&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/11/nyagos-with-atom/&#34;&gt;ATOM × NYAGOS ＝ ♥&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;ATOM で Go&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:tsundere1&#34;&gt;あっ，私ツンデレ属性とかないですから（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tsundere1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:zs1&#34;&gt;Windows 環境なら，全角空白文字の誤入力は IME のプロパティでスペース・キー押下で常に「半角空白」を入力するように設定すればほとんど防げるんだどね（全角空白を入力する場合は &lt;code&gt;shift-space&lt;/code&gt; 押下）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:zs1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「nkf っぽいなにか」を作った - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/12/like-nkf/" />
		<id>tag:text.Baldanders.info,2017-12-06:/remark/2017/12/like-nkf/</id>
		<published>2017-12-06T01:20:36+09:00</published>
		<updated>2017-12-08T17:05:45+09:00</updated>
		<summary>思いつきで文字エンコーディングを変換するロジックを考えていたのだが，その副産物で「nkf っぽいなにか」を作ったので，併せてリリースする。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;思いつきで&lt;a href=&#34;http://text.baldanders.info/golang/detecting-character-encoding/&#34;&gt;文字エンコーディングを変換するロジックを考えていた&lt;/a&gt;のだが，その副産物で「nkf っぽいなにか」を作ったので，併せてリリースする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/text/releases/tag/v0.3.0&#34;&gt;Release v0.3.0 · spiegel-im-spiegel/text · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;リリースパッケージに含まれる gonkf がそれ。
nkf のように文字エンコーディングを指定して変換を行う。
使い方はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gonkf -h
Network Kanji Filter by Golang

Usage:
  gonkf [flags]
  gonkf [command]

Available Commands:
  conv        Convert character encoding of text
  guess       Guess character encoding of text
  help        Help about any command
  norm        Unicode normalization
  nwline      Convert newline of text
  version     Print the version number of gonkf
  width       Convert character width of text

Flags:
  -h, --help   help for gonkf

Use &amp;#34;gonkf [command] --help&amp;#34; for more information about a command.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;nikf と異なり，サブコマンド方式にした。
文字エンコーディング変換なら &lt;code&gt;conv&lt;/code&gt; サブコマンドを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gonkf conv -h
Convert character encoding of text

Usage:
  gonkf conv [flags] [text file]

Flags:
  -d, --dst-encoding string   character encoding of destination text
  -h, --help                  help for conv
  -n, --newline string        type of newline
  -o, --output string         output file path
  -s, --src-encoding string   character encoding of source text&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;たとえば Shift-JIS のテキストを UTF-8 に変換したい場合は以下のようにする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gonkf conv -s sjis -d utf8 SHIFT_JIS.txt
こんにちは。世界の国から。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;元テキストの文字エンコーディング指定を省略すると，元テキストの文字エンコーディングを推測して変換する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gonkf conv -d utf8 SHIFT_JIS.txt
こんにちは。世界の国から。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文字エンコーディングの推測のみ実行したい場合は &lt;code&gt;guess&lt;/code&gt; サブコマンドを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gonkf guess SHIFT_JIS.txt
Shift_JIS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;nkf にない機能（多分）としては Unicode 正規化ができる。
たとえば半角カナの「ﾍﾟﾝｷﾞﾝ」を事前合成形に正規化すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo ﾍﾟﾝｷﾞﾝ | gonkf norm -f NFKC
ペンギン&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となる。
Unicode 正規化については以下の記事を参照のこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/unicode-normalization/&#34;&gt;Go 言語と Unicode 正規化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文字エンコーディング変換で元テキストの文字エンコーディングを推測する場合，文字列が短いと誤判定する確率が跳ね上がるので注意（特に Shift-JIS と EUC）。
また ISO-2022-JP (&lt;code&gt;jis&lt;/code&gt;) に変換する際，変換ロジックにバグがあるようで，文字列の末尾が改行で終わらない場合に文字セットを US-ASCII に戻す指示シーケンス（1BH 28H 42H）が出力されない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jis1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:jis1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
末尾が改行で終わる場合は大丈夫。&lt;/p&gt;

&lt;p&gt;nkf みたいなツールは15年以上前なら割と重宝してたけど，今はテキスト・エディタの機能でちょいちょいと変換できるので，あんまり使わなくなったよなぁ。
まぁ，今回は自作のパッケージの使い勝手を確認するための習作なので，こんなもんだろう。&lt;/p&gt;

&lt;h2 id=&#34;追記-半角-全角変換機能を追加した&#34;&gt;【追記】 半角/全角変換機能を追加した&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/character-width-for-unicode/&#34;&gt;Go 言語による Unicode 半角/全角変換&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで，半角/全角変換機能の追加と諸々修正・変更した v0.5.0 をリリースした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/text/releases/tag/v0.5.0&#34;&gt;Release v0.5.0 · spiegel-im-spiegel/text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;多分もう機能追加はしないはず。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:jis1&#34;&gt;おそらく「行末に指示シーケンスを出力」するのではなく「改行コードの手前で指示シーケンスを出力」しているのだろう。昔はこの手の安直な実装が結構あって，電子署名の検証が valid にならなかったりと苦労した記憶があるが，今だに残ってるものなんだねぇ。まぁ ISO-2022-JP ってだいぶ廃れてきてると思うので，放置しても実害はないだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jis1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GnuPG チートシート（鍵作成から失効まで） - openpgp</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/openpgp/gnupg-cheat-sheet/" />
		<id>tag:text.Baldanders.info,2017-12-01:/openpgp/gnupg-cheat-sheet/</id>
		<published>2017-12-01T17:51:18+09:00</published>
		<updated>2017-12-08T10:29:28+09:00</updated>
		<summary>ちうわけで GnuPG の使い方に関する簡単な「虎の巻（cheat sheet）」を作ってみることにした。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="openpgp" label="openpgp" scheme="http://text.baldanders.info/openpgp" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;(move from &lt;a href=&#34;http://text.baldanders.info/remark/2017/11/gnupg-sheat-sheet/&#34; title=&#34;GnuPG チートシート（鍵作成から失効まで）&#34;&gt;http://text.baldanders.info/remark/2017/11/gnupg-sheat-sheet/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;最近 &lt;code&gt;git commit&lt;/code&gt; に電子署名する目的などで &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を使う記事などをチラホラ見かけるようになったが，やっぱ使い慣れんもんは分からんよねぇ。
しかもバージョンによって微妙に挙動が異なるのが困りものである。&lt;/p&gt;

&lt;p&gt;ちうわけで &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の使い方に関する簡単な「虎の巻（cheat sheet）」を作ってみることにした。
対象となる  &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; のバージョンは最新版の 2.2.x とする。&lt;/p&gt;

&lt;p&gt;なお，この記事は大変長文なので，あらかじめお茶菓子などを用意した上で読みはじめることをお勧めする。
また Qiita に簡易版を公開した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/spiegel-im-spiegel/items/079d69282166281eb946&#34;&gt;GnuPG チートシート（簡易版） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;説明はいいから例示だけ見せろという方はこちらで。&lt;/p&gt;

&lt;p&gt;では，ご笑覧あれ。&lt;/p&gt;

&lt;h2 id=&#34;コマンドとオプション&#34;&gt;コマンドとオプション&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; のコマンドラインはちょっと作りが古くて（なんせ初期の PGP の UI を引きずってるので&lt;code&gt;w&lt;/code&gt;），今時あたり前な「サブコマンド」みたいな構成になっていない。
その代わりオプションの種別が「コマンド」と「オプション」に分かれている。
具体的には &lt;code&gt;gpg -h&lt;/code&gt; でヘルプを見ると分かる（もちろん &lt;code&gt;-h&lt;/code&gt; オプションもコマンドである）。&lt;/p&gt;

&lt;p&gt;以上を踏まえて，そろそろ本題に入ろう。&lt;/p&gt;

&lt;h2 id=&#34;鍵の作成&#34;&gt;鍵の作成&lt;/h2&gt;

&lt;p&gt;鍵の作成コマンドにはいくつか種類がある。&lt;/p&gt;

&lt;h3 id=&#34;generate-key-コマンド&#34;&gt;&amp;ndash;generate-key コマンド&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;--generate-key&lt;/code&gt; コマンドは対話モードで鍵の作成を行う。
短縮名は &lt;code&gt;--gen-key&lt;/code&gt;。
あんまり短縮されていないな（笑）&lt;/p&gt;

&lt;p&gt;コマンド自体は初期バージョンから存在するが，バージョンによって挙動がかなり違うので要注意だ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --gen-key
gpg (GnuPG) 2.2.3; Copyright (C) 2017 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

注意: 全機能の鍵生成には &amp;#34;gpg --full-generate-key&amp;#34; を使います。

GnuPGはあなたの鍵を識別するためにユーザIDを構成する必要があります。

本名:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最新版 2.2.x では暗号アルゴリズムは RSA/2048bit，有効期限は作成日当日で固定されている。
したがって，ユーザが入力するのはユーザID（本名，電子メール・アドレス）とパスフレーズのみとなる（パスフレーズ入力時には Pinentry が起動する）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--generate-key&lt;/code&gt; コマンドについては，以下のような設定ファイルを作って &lt;code&gt;--batch&lt;/code&gt; オプションを付けて起動することで対話モードを回避し，かつアルゴリズム等の詳細な指定をすることもできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cat alice-key.conf
Key-Type: RSA
Key-Length: 3072
Key-Usage: sign,cert
Subkey-Type: RSA
Subkey-Length: 3072
Subkey-Usage: encrypt
Name-Real: Alice
Name-Email: alice@example.com
Expire-Date: 0
Passphrase: passwd
%commit
%echo done

$ gpg --gen-key --batch alice-key.conf
gpg: 鍵058E5BB44555AF2Cを究極的に信用するよう記録しました
gpg: 失効証明書を &amp;#39;C:/Users/alice/AppData/Roaming/gnupg/openpgp-revocs.d\DE93A51F5F4EC94847556525058E5BB44555AF2C.rev&amp;#39; に保管しました。
gpg: done

$ gpg --list-keys alice
pub   rsa3072 2017-11-30 [SC]
      DE93A51F5F4EC94847556525058E5BB44555AF2C
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   rsa3072 2017-11-30 [E]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;設定ファイルの書き方は &amp;ldquo;&lt;a href=&#34;https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html&#34; title=&#34;Using the GNU Privacy Guard: Unattended GPG key generation&#34;&gt;Unattended GPG key generation&lt;/a&gt;” を参照のこと。
いったん設定ファイルを作ってしまえばこの方法が一番簡単かな。&lt;/p&gt;

&lt;p&gt;なお &lt;code&gt;Passphrase&lt;/code&gt; の項目を削除すれば &lt;code&gt;--batch&lt;/code&gt; モードでも Pinentry で設定するパスフレーズを訊いてくるので「設定ファイルにパスフレーズを書くのは&amp;hellip;」という方も安心である。&lt;/p&gt;

&lt;h3 id=&#34;full-generate-key-コマンド&#34;&gt;&amp;ndash;full-generate-key コマンド&lt;/h3&gt;

&lt;p&gt;対話モードで暗号アルゴリズムや鍵長を指定したい場合は &lt;code&gt;--full-generate-key&lt;/code&gt; コマンドを使う。
短縮名は &lt;code&gt;--full-gen-key&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;具体的にはこんな感じで進行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --full-gen-key
gpg (GnuPG) 2.2.3; Copyright (C) 2017 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

ご希望の鍵の種類を選択してください:
   (1) RSA と RSA (デフォルト)
   (2) DSA と Elgamal
   (3) DSA (署名のみ)
   (4) RSA (署名のみ)
あなたの選択は? 2
DSA 鍵は 1024 から 3072 ビットの長さで可能です。
鍵長は? (2048) 3072
要求された鍵長は3072ビット
鍵の有効期限を指定してください。
         0 = 鍵は無期限
      &amp;lt;n&amp;gt;  = 鍵は n 日間で期限切れ
      &amp;lt;n&amp;gt;w = 鍵は n 週間で期限切れ
      &amp;lt;n&amp;gt;m = 鍵は n か月間で期限切れ
      &amp;lt;n&amp;gt;y = 鍵は n 年間で期限切れ
鍵の有効期間は? (0)1y
鍵は11/30/18 10:39:03 東京 (標準時)で期限切れとなります
これで正しいですか? (y/N)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--expert&lt;/code&gt; オプションを付けると選択可能なアルゴリズムの組み合わせが増える。
こんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --full-gen-key --expert
gpg (GnuPG) 2.2.3; Copyright (C) 2017 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

ご希望の鍵の種類を選択してください:
   (1) RSA と RSA (デフォルト)
   (2) DSA と Elgamal
   (3) DSA (署名のみ)
   (4) RSA (署名のみ)
   (7) DSA (機能をあなた自身で設定)
   (8) RSA (機能をあなた自身で設定)
   (9) ECC と ECC
  (10) ECC (署名のみ)
  (11) ECC (機能をあなた自身で設定)
  (13) 既存の鍵
あなたの選択は?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ECC (Elliptic Curve Cryptography; 楕円曲線暗号) 鍵の取り扱いについては以下の記事を参照のこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/openpgp/using-ecc-with-gnupg/&#34;&gt;そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;quick-generate-key-コマンド&#34;&gt;&amp;ndash;quick-generate-key コマンド&lt;/h3&gt;

&lt;p&gt;コマンドライン一発で鍵を作成したい場合は &lt;code&gt;--quick-generate-key&lt;/code&gt; コマンドでユーザID，アルゴリズム，有効期限を指定できる。
短縮名は &lt;code&gt;--quick-gen-key&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Usage: gpg [options] --quick-generate-key user-id [algo [usage [expire]]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;algo&lt;/code&gt; にはアルゴリズムと鍵長を文字列で指定する。
指定可能な文字列は以下の通り。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;公開鍵暗号アルゴリズム&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;名前&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;RSA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;default&lt;/code&gt; (= &lt;code&gt;rsa2048&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;RSA (署名のみ)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;rsa&lt;/code&gt; (= &lt;code&gt;rsa2048&lt;/code&gt;), &lt;code&gt;rsa1024&lt;/code&gt;, &lt;code&gt;rsa2048&lt;/code&gt;, &lt;code&gt;rsa3071&lt;/code&gt;, &lt;code&gt;rsa4096&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;DSA (署名のみ)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;dsa&lt;/code&gt; (= &lt;code&gt;dsa2048&lt;/code&gt;), &lt;code&gt;dsa1024&lt;/code&gt;, &lt;code&gt;dsa2048&lt;/code&gt;, &lt;code&gt;dsa3072&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ECDH/EdDSA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;future-default&lt;/code&gt; (= &lt;code&gt;cv25519&lt;/code&gt;/&lt;code&gt;ed25519&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;EdDSA (署名のみ)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ed25519&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ECDSA (署名のみ)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;nistp256&lt;/code&gt;, &lt;code&gt;nistp384&lt;/code&gt;, &lt;code&gt;nistp521&lt;/code&gt;, &lt;code&gt;brainpoolP256r1&lt;/code&gt;, &lt;code&gt;brainpoolP384r1&lt;/code&gt;, &lt;code&gt;brainpoolP512r1&lt;/code&gt;, &lt;code&gt;secp256k1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;usage&lt;/code&gt; には主鍵の機能を文字列で指定する。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;機能&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;名前&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;署名&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;sign&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;証明&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;cert&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;認証&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;auth&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;暗号化&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;encr&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;主鍵には自動的に &lt;code&gt;cert&lt;/code&gt; が付与されるため暗号化機能しかないアルゴリズム（ElGamal や ECDH）を主鍵に使うことはできない。
また暗号アルゴリズムと機能がマッチしない場合はエラーになる（電子署名用のアルゴリズムなのに &lt;code&gt;encr&lt;/code&gt; を指定するなど）。&lt;/p&gt;

&lt;p&gt;目的が複数ある場合はカンマで区切って列挙する。
なお &lt;code&gt;default&lt;/code&gt; または &lt;code&gt;-&lt;/code&gt; を指定すれば &lt;code&gt;sign&lt;/code&gt;+&lt;code&gt;cert&lt;/code&gt; となるので，通常は &lt;code&gt;default&lt;/code&gt; のままでよい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expire&lt;/code&gt; には有効期限を指定する。
1週間なら &lt;code&gt;7d&lt;/code&gt; または &lt;code&gt;1w&lt;/code&gt;，1年なら &lt;code&gt;12m&lt;/code&gt; または &lt;code&gt;1y&lt;/code&gt; といった感じ。
&lt;code&gt;0&lt;/code&gt; を指定すると無期限になる。
省略すると作成日当日が有効期限となる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--quick-generate-key&lt;/code&gt; コマンドの実行例はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --quick-gen-key &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34; default default 0
たくさんのランダム・バイトの生成が必要です。キーボードを打つ、マウスを動か
す、ディスクにアクセスするなどの他の操作を素数生成の間に行うことで、乱数生
成器に十分なエントロピーを供給する機会を与えることができます。

たくさんのランダム・バイトの生成が必要です。キーボードを打つ、マウスを動か
す、ディスクにアクセスするなどの他の操作を素数生成の間に行うことで、乱数生
成器に十分なエントロピーを供給する機会を与えることができます。
gpg: 鍵FED63B6C83CE0152を究極的に信用するよう記録しました
gpg: 失効証明書を &amp;#39;C:/Users/alice/AppData/Roaming/gnupg/openpgp-revocs.d\57D6D370A7E9BA27A02367DAFED63B6C83CE0152.rev&amp;#39; に保管しました。
公開鍵と秘密鍵を作成し、署名しました。

pub   rsa2048 2017-11-30 [SC]
      57D6D370A7E9BA27A02367DAFED63B6C83CE0152
uid                      Alice &amp;lt;alice@example.com&amp;gt;
sub   rsa2048 2017-11-30 [E]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;パスフレーズ入力の回避&#34;&gt;パスフレーズ入力の回避&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;--quick-generate-key&lt;/code&gt; コマンドでもパスフレーズの入力は Pinentry から行うことになるが &lt;code&gt;--pinentry-mode&lt;/code&gt; オプションおよび &lt;code&gt;--passphrase&lt;/code&gt; オプションを付加することで回避できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --pinentry-mode loopback --passphrase passwd --quick-gen-key &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34; default default 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただしコマンドラインの履歴に入力したパスフレーズが残ってしまうのであまりお勧めできないが&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;quick-add-key-コマンドによる副鍵の追加&#34;&gt;&amp;ndash;quick-add-key コマンドによる副鍵の追加&lt;/h3&gt;

&lt;p&gt;作成した鍵に &lt;code&gt;--quick-add-key&lt;/code&gt; コマンドで後から暗号鍵を追加できる。
これは &lt;code&gt;--quick-generate-key&lt;/code&gt; コマンドで主鍵のみ作って後から副鍵を加えたい場合などに有効である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Usage: gpg [options] --quick-add-key key-fingerprint [algo [usage [expire]]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;たとえば，以下の鍵に対して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --list-keys alice
pub   dsa3072 2017-11-30 [SC]
      B5BF56B346B4D961E6BF25A45CC68B4A317E8E5C
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のように暗号鍵を副鍵として追加できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --quick-add-key B5BF56B346B4D961E6BF25A45CC68B4A317E8E5C elg3072 encr
たくさんのランダム・バイトの生成が必要です。キーボードを打つ、マウスを動か
す、ディスクにアクセスするなどの他の操作を素数生成の間に行うことで、乱数生
成器に十分なエントロピーを供給する機会を与えることができます。

$ gpg --list-keys alice
pub   dsa3072 2017-11-30 [SC]
      B5BF56B346B4D961E6BF25A45CC68B4A317E8E5C
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   elg3072 2017-11-30 [E]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに &lt;code&gt;B5BF56B346B4D961E6BF25A45CC68B4A317E8E5C&lt;/code&gt; という長ったらしい数字列は鍵指紋（key fingerprint）である。
&lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; では鍵指紋をそのまま（または下位バイトを）鍵IDとして使っている。&lt;/p&gt;

&lt;p&gt;副鍵では機能として &lt;code&gt;cert&lt;/code&gt; は指定できない。
また暗号アルゴリズムと機能がマッチしない場合はエラーになる。
ただし &lt;code&gt;default&lt;/code&gt; または &lt;code&gt;-&lt;/code&gt; を指定すればアルゴリズムに合わせた適切な機能をセットしてくれるみたいなので，大抵の場合は &lt;code&gt;default&lt;/code&gt; でいいだろう。&lt;/p&gt;

&lt;p&gt;暗号化用に使用できるアルゴリズムは以下の通り。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;公開鍵暗号アルゴリズム&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;名前&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;RSA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;default&lt;/code&gt; (= &lt;code&gt;rsa2048&lt;/code&gt;), &lt;code&gt;rsa&lt;/code&gt; (= &lt;code&gt;rsa2048&lt;/code&gt;), &lt;code&gt;rsa1024&lt;/code&gt;, &lt;code&gt;rsa2048&lt;/code&gt;, &lt;code&gt;rsa3071&lt;/code&gt;, &lt;code&gt;rsa4096&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ElGamal&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;elg&lt;/code&gt; (= &lt;code&gt;elg2048&lt;/code&gt;), &lt;code&gt;elg1024&lt;/code&gt;, &lt;code&gt;elg2048&lt;/code&gt;, &lt;code&gt;elg3072&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ECDH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;cv25519&lt;/code&gt;, &lt;code&gt;nistp256&lt;/code&gt;, &lt;code&gt;nistp384&lt;/code&gt;, &lt;code&gt;nistp521&lt;/code&gt;, &lt;code&gt;brainpoolP256r1&lt;/code&gt;, &lt;code&gt;brainpoolP384r1&lt;/code&gt;, &lt;code&gt;brainpoolP512r1&lt;/code&gt;, &lt;code&gt;secp256k1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;電子署名用のアルゴリズムも（署名用の副鍵として指定すれば）もちろん使える。&lt;/p&gt;

&lt;h2 id=&#34;鍵の管理&#34;&gt;鍵の管理&lt;/h2&gt;

&lt;p&gt;作成した鍵や配布・受領した公開鍵を管理するためのコマンドを紹介する。&lt;/p&gt;

&lt;h3 id=&#34;鍵束内の公開鍵の検索&#34;&gt;鍵束内の公開鍵の検索&lt;/h3&gt;

&lt;p&gt;鍵束内の公開鍵の検索を検索する場合， &lt;code&gt;--list-keys&lt;/code&gt; コマンドの引数にユーザID（の一部）または鍵IDを指定することで，条件にマッチする鍵を検索できる。
短縮名は &lt;code&gt;-k&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -k alice
pub   dsa3072 2017-11-23 [SC]
      3F8EFC477F9D4D49AA6C308FB965D53DB907EF0E
uid           [  充分  ] Alice (root) &amp;lt;alice@example.com&amp;gt;

pub   rsa2048 2017-11-23 [SC]
      A3CEFEEEDA222024F325C403DFFC3F67BBB3C083
uid           [  究極  ] Alice (commit) &amp;lt;alice@example.com&amp;gt;
sub   rsa2048 2017-11-23 [E]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引数なしで &lt;code&gt;--list-keys&lt;/code&gt; コマンドを起動した場合は公開鍵の鍵束（&lt;code&gt;pubring.kbx&lt;/code&gt;）にある鍵が全て列挙される。&lt;/p&gt;

&lt;p&gt;秘密鍵を検索する場合には &lt;code&gt;--list-secret-keys&lt;/code&gt; コマンドを使う。
短縮名は大文字の &lt;code&gt;-K&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -K alice
sec   rsa2048 2017-11-23 [SC]
      A3CEFEEEDA222024F325C403DFFC3F67BBB3C083
uid           [  究極  ] Alice (commit) &amp;lt;alice@example.com&amp;gt;
ssb   rsa2048 2017-11-23 [E]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;副鍵の鍵指紋の表示&#34;&gt;副鍵の鍵指紋の表示&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;--list-keys&lt;/code&gt; コマンドでも主鍵の鍵指紋が表示されるが，副鍵の鍵指紋も表示したい場合は &lt;code&gt;--fingerprint&lt;/code&gt; コマンドを2つ重ねる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --fingerprint --fingerprint alice
pub   rsa2048 2017-11-30 [SC]
      79FD 2B99 F3C6 2D2D 3B85  0BBC 93B3 5094 7582 0D5D
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   rsa2048 2017-11-30 [E]
      476E 9EA7 D703 F0BB 01B6  FA44 9278 B060 D202 3C53&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;パスフレーズの変更&#34;&gt;パスフレーズの変更&lt;/h3&gt;

&lt;p&gt;秘密鍵のパスフレーズを変更する場合には &lt;code&gt;--change-passphrase&lt;/code&gt; コマンドを使う。
短縮名は &lt;code&gt;--passwd&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --passwd alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引数にはユーザID（の一部）を指定できる。
パスワードの入力は Pinentry で行う。&lt;/p&gt;

&lt;h3 id=&#34;有効期限の変更&#34;&gt;有効期限の変更&lt;/h3&gt;

&lt;p&gt;自身の鍵の有効期限を変更する場合には &lt;code&gt;--quick-set-expire&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;p&gt;鍵の鍵指紋がが以下の場合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --fingerprint --fingerprint alice
pub   rsa2048 2017-11-30 [SC]
      79FD 2B99 F3C6 2D2D 3B85  0BBC 93B3 5094 7582 0D5D
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   rsa2048 2017-11-30 [E]
      476E 9EA7 D703 F0BB 01B6  FA44 9278 B060 D202 3C53&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有効期限を2年（&lt;code&gt;2y&lt;/code&gt;）に指定するなら，操作は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --quick-set-expire 79FD2B99F3C62D2D3B850BBC93B3509475820D5D 2y

$ gpg --list-keys alice
pub   rsa2048 2017-11-30 [SC] [有効期限: 2019-11-30]
      79FD2B99F3C62D2D3B850BBC93B3509475820D5D
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   rsa2048 2017-11-30 [E]

$ gpg --quick-set-expire 79FD2B99F3C62D2D3B850BBC93B3509475820D5D 2y 476E9EA7D703F0BB01B6FA449278B060D2023C53

$ gpg --list-keys alice
pub   rsa2048 2017-11-30 [SC] [有効期限: 2019-11-30]
      79FD2B99F3C62D2D3B850BBC93B3509475820D5D
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   rsa2048 2017-11-30 [E] [有効期限: 2019-11-30]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前半は主鍵，後半は（主鍵に紐づく）副鍵の有効期限を変更している。
このことから分かるとおり，主鍵と副鍵は個別に有効期限を設定することが可能である。&lt;/p&gt;

&lt;h3 id=&#34;公開鍵をエクスポートする&#34;&gt;公開鍵をエクスポートする&lt;/h3&gt;

&lt;p&gt;公開鍵のエクスポートには &lt;code&gt;--export&lt;/code&gt; コマンドを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --armor --export alice
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBFofiskBCADjUvPHA3PNscg0K74/Uwxj46+oLsyIy7fYIp/4C4dHejcbbPjx
VFeic9wQ4aQFp3VKjYgONgQrRo/9p40Ei1+PtMAV7D6Oy6dxlV8zyCJcSf74ahpB
B15GyA7v4uvTf0Py+Ujyt241ik0fXeLEuwt7p4SIbgJnQs1Fb+61wo8UcCFOLJO5
An6HjXNgNs6fFoiTad+T4PfaTbRHLfFPkoqmDUKWy40hjWl+Ui0QborXH+PUeUm9
vgHbqZzS0QRDGI7rO9AeJ6LweBkP1A2qbDLyexS/F+WUEcY0b76IQM5XH0txwnnl
uCPYcQfIGWce3US1GWJhChF9s/bMGVXOEJbvABEBAAG0GUFsaWNlIDxhbGljZUBl
eGFtcGxlLmNvbT6JAVQEEwEIAD4CGwMFCwkIBwIGFQgJCgsCBBYCAwECHgECF4AW
IQR5/SuZ88YtLTuFC7yTs1CUdYINXQUCWh+LMAUJA8JnZwAKCRCTs1CUdYINXcKT
B/4tLFaPRe289GcX91yLJ/yPS0JvvJKyZzjpNqLbKHuQHPEqGromMGlP4LcaGdFL
rVZ36W3kVk+75q8JFkld0eRS22vftjz6lA9lyb3W9lU1CayF5s3IsC/Ehj55uaHc
OHnp6rl7zEeIdvca6yV0gwySs3j9VPHy58zNrpN/clHoB4Zozy6vCXFMShyLc/wF
brPySf/5LP/642Uro92M2lbkIvZpDhZCVG7s7Ilz3BzsTTNMPkPd5yvdGa5lHQzK
OmXHaxydOYbEWBgqRGqzEIIoLbEd8KHxJVIVDfcAQCjSWRUjAUSDLpBokGsKoQfp
41NjWwjkIsfyJ2tDUeRPGYRbuQENBFofiskBCACzyYfIB+/ZwJBJXw7WMDlEKdnz
L4abwVpw9rBGAWGXjaC/cu7l0svNilXyTgZNq4uKddJ6aYjs7of0SaBl20I8aj5G
nbw0pG+KkoYhfpZaAZc+bcb+6SprSbAsRhrZ810XNIBUMa8XWsUDn1uv70vGBWBv
keKZZ7FJ4kuQe0nTONmvQ4EwFekV+IXT5LwdgmPWF0QR7cO8jqeb6psHYauktuzZ
2ul4nMLmLLf/m4DwiCAbEdToBXqRA30KshtgBYYQwL1YkWYgknnAdhHyeu6ybJvv
Y57JYzotjFOlnFhtcGITESEWv+pnj0RJUUrlVwLkJhUOKMwL+sbhw0s5+m27ABEB
AAGJATwEGAEIACYCGwwWIQR5/SuZ88YtLTuFC7yTs1CUdYINXQUCWh+LhAUJA8Jn
uwAKCRCTs1CUdYINXXuvB/9IKK3SLgJ6lOc2Vq73rGYsrDqfjYt5rCDXhjIaFRE7
LYmFJcGL5CHJTae438XtAixa+mu6PYG28eknjZs58Cx/bSj9uS6NiLAPCgyTAtvg
ao6usECOm9Y0xf2+ZcZ9Uji+wsCAFmxRC9je0yUErVyuyQRqzNtdqytnszoTzvb9
iOP8sX/YNrjC83BtZ4Vg3fzAu8qvwbObgSbws5M8TBwIKd4WFTjOtSU6F8aioJ1g
mpfd8KGljHkzC0oG8l8fZiTNYqkIMbfyfPpVwsSqsysLKofifFT+mNs79DJdqNFO
HA2W4WzekYmWWmgK7J8kXHYkxUJA6VpSmNAKwUKqXbNV
=hneF
-----END PGP PUBLIC KEY BLOCK-----&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--armor&lt;/code&gt; オプションを指定すると，上記のように， ASCII Armor 形式のテキストを出力する。
短縮名は &lt;code&gt;-a&lt;/code&gt;。
&lt;code&gt;--armor&lt;/code&gt; オプションを付けないとバイナリを吐く。&lt;/p&gt;

&lt;p&gt;秘密鍵をエクスポートする場合は &lt;code&gt;--export-secret-key&lt;/code&gt; コマンドを使う（パスフレーズ入力あり）。&lt;/p&gt;

&lt;p&gt;公開鍵をファイル等で配布する場合は &lt;code&gt;--export&lt;/code&gt; コマンドの出力をファイルに落とせばよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -a --export alice &amp;gt; alice-key.asc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;公開鍵をインポートする&#34;&gt;公開鍵をインポートする&lt;/h3&gt;

&lt;p&gt;公開鍵のインポートには &lt;code&gt;--import&lt;/code&gt; コマンドを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --import alice-key.asc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インポートではパイプが使えるので&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;cat alice-key.asc | gpg --import&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;などとできる。
また Web ページ上に公開鍵のファイルを置いている場合は &lt;code&gt;--fetch-keys&lt;/code&gt; コマンドで直接インポートすることもできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --fetch-keys http://www.baldanders.info/spiegel/pubkeys/spiegel.asc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インポートする鍵が既に鍵束にある場合でも，単純な上書きではなく， &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; がいい感じにマージしてくれる。&lt;/p&gt;

&lt;h3 id=&#34;公開鍵を鍵サーバに送信する&#34;&gt;公開鍵を鍵サーバに送信する&lt;/h3&gt;

&lt;p&gt;鍵束にある公開鍵を鍵サーバに送信するには &lt;code&gt;--send-keys&lt;/code&gt; コマンドを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --keyserver keys.gnupg.net --send-keys 7E20B81C&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;鍵の指定には鍵Dを使う。&lt;/p&gt;

&lt;p&gt;上記のように &lt;code&gt;--keyserver&lt;/code&gt; オプションで鍵サーバを指定する。
または鍵束フォルダにある &lt;code&gt;gpg.conf&lt;/code&gt; ファイルに既定の鍵サーバを指定できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;keyserver  keys.gnupg.net&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;鍵サーバは，基本的には互いに同期しているので，どのサーバを指定してもいいのだが，有名なところでは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://keys.gnupg.net/&#34; title=&#34;Nebraska Wesleyan University - OpenPGP Keyserver&#34;&gt;keys.gnupg.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pgp.mit.edu/&#34; title=&#34;MIT PGP Key Server&#34;&gt;pgp.mit.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pgp.nic.ad.jp/&#34; title=&#34;PGP KEYSERVER&#34;&gt;pgp.nic.ad.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりだろうか。&lt;/p&gt;

&lt;h3 id=&#34;公開鍵を鍵サーバから受信する&#34;&gt;公開鍵を鍵サーバから受信する&lt;/h3&gt;

&lt;p&gt;鍵サーバから公開鍵を受信する場合は &lt;code&gt;--receive-keys&lt;/code&gt; コマンドを使う。
短縮名は &lt;code&gt;--recv-keys&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --keyserver keys.gnupg.net --recv-keys 7E20B81C&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;送信のときと同じく，こちらも鍵の指定には鍵Dを使う。
あらかじめ鍵IDがわからない場合は &lt;code&gt;--search-keys&lt;/code&gt; コマンドで検索できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --keyserver keys.gnupg.net --search-keys alice@example.com
(1)     by Teemob &amp;lt;alice@example.com&amp;gt;
        by Teemob &amp;lt;lockstar2017@gmail.com&amp;gt;
          3072 bit RSA key 966893ECDA2FD3EC, 作成: 2017-11-15
(2)     Alice (Alice&amp;#39;s key) &amp;lt;Alice@example.com&amp;gt;
          1024 bit DSA key A251C75C6213F841, 作成: 2017-11-12, 有効期限: 2018-11-12
(3)     Alice &amp;lt;alice@example.com&amp;gt;
          3072 bit RSA key 8EDAABFF277776F3, 作成: 2017-11-03
(4)     Alice &amp;lt;alice@example.com&amp;gt;
          3072 bit RSA key 37FC4F26B92A3964, 作成: 2017-10-18
(5)     Alice &amp;lt;alice@example.com&amp;gt;
          3072 bit RSA key 09AB44CAA589D7A2, 作成: 2017-10-04
(6)     Alice &amp;lt;alice@example.com&amp;gt;
          3072 bit RSA key D3205D5A68E02E2B, 作成: 2017-10-04
(7)     Alice &amp;lt;alice@example.com&amp;gt;
          2048 bit RSA key 29FD3D6668D47FA1, 作成: 2017-09-14
(8)     Alice &amp;lt;alice@example.com&amp;gt;
          3072 bit RSA key 25B9727BCE238CDE, 作成: 2017-08-10
(9)     Alice &amp;lt;alice@example.com&amp;gt;
          3072 bit RSA key 2604F9169E9C4E37, 作成: 2017-08-05 (失効)
(10)    Alice &amp;lt;alice@example.com&amp;gt;
          3072 bit RSA key B2251B1A2B632A2E, 作成: 2017-07-17
(11)    Alice &amp;lt;alice-example-187723@mailismagic.com&amp;gt;
          2048 bit RSA key FF99048E395DC7E7, 作成: 2017-04-20, 有効期限: 2019-04-20
Keys 1-11 of 103 for &amp;#34;alice@example.com&amp;#34;.  番号(s)、N)次、またはQ)中止を入力してください &amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;検索結果に対して番号を指定すればそのままインポートしてくれる。&lt;/p&gt;

&lt;h3 id=&#34;公開鍵に署名する&#34;&gt;公開鍵に署名する&lt;/h3&gt;

&lt;p&gt;インポートした公開鍵が有効であることを確認したら，公開鍵に電子署名して有効化しよう。
公開鍵への電子署名には &lt;code&gt;--sign-key&lt;/code&gt; コマンドまたは &lt;code&gt;--quick-sign-key&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--sign-key&lt;/code&gt; コマンドは対話モードで複数の鍵にひとつずつ署名することができる。
&lt;code&gt;--quick-sign-key&lt;/code&gt; コマンドは鍵指紋を指定して一気に処理を行う（パスフレーズ入力あり）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;gpg --quick-sign-key 1B5202DB4A3EC776F1E0AD18B4DA3BAE7E20B81C&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;電子署名が可能な秘密鍵を複数所持している場合は &lt;code&gt;--local-user&lt;/code&gt; オプションで電子署名に使う鍵を指定する。
短縮名は &lt;code&gt;-u&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;gpg -u alice --quick-sign-key 1B5202DB4A3EC776F1E0AD18B4DA3BAE7E20B81C&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;または電子署名に使う鍵を鍵束フォルダにある &lt;code&gt;gpg.conf&lt;/code&gt; ファイルで指定することもできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;default-key alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この電子署名は公開鍵のエクスポート時にも付加されて配布される。
電子署名を配布されては困る場合は &lt;code&gt;--lsign-key&lt;/code&gt; コマンドまたは &lt;code&gt;--quick-lsign-key&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;h2 id=&#34;データの暗号化&#34;&gt;データの暗号化&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の暗号化は概ね2種類ある。&lt;/p&gt;

&lt;h3 id=&#34;ハイブリッド暗号&#34;&gt;ハイブリッド暗号&lt;/h3&gt;

&lt;p&gt;ハイブリッド暗号は &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; の基本機能で，平文を暗号化する「セッション鍵」とセッション鍵を暗号化する公開鍵で構成される。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml&#34;&gt;&lt;img src=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/hybrid-enc.svg&#34; srcset=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/hybrid-enc.svg 715w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;「わかる！ OpenPGP 暗号」より&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml&#34;&gt;「わかる！ OpenPGP 暗号」より&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;セッション鍵は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; が自動的にし生成するのでコマンドラインではセッション鍵を暗号化する公開鍵を指定する。&lt;/p&gt;

&lt;p&gt;暗号化を行うには &lt;code&gt;--encrypt&lt;/code&gt; コマンドを使う。
短縮名は &lt;code&gt;-e&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -a --recipient alice -e plain-data
-----BEGIN PGP MESSAGE-----

hQIOAzn9g6TGzi9EEAgAsjEZxs4vutjg1U6BooimWrX3immaTL958Uheqcr7risr
2MCfVzzHuZtOpS4/lk/K4zk2xCxR3/NreZKlGrWZ205RCUJEY6Hy8GtrjJ2yilC6
ZV2U/ICRrpoTJm/J/R7W+99arXhP3zDSD2k5Fx9AMJ+OaKuHaBTxJQUtESV8J7Uk
RhyxQvJPXIfNRG4ZrfTzFzVOV1s9EeFR4UQHhQnp2q+7LA3qrfEh/y/sj4fs6o3G
KYcRVvUeAYsC1NGGcmpK6Q33oWJxN9vxl+NYlLebtCDS6GYl/bMw+YCXtfMh+cA2
aLiGUqXZT0Nhb/zVX8zlnP6CZE2kxS60LmTWv11DMQf/UCjdnIM80GKFvvy7/Vas
OlAwzQv2sWgI4ayL/VvslGVixSATsLD9DREjGo2/RfyDX/aLRsykK7H+Lr/+a3kp
LQzviY0ogYem1jCcqJs6wKMh1B+M+Ukkk9kVrgXelM6bmPT93Sb54LW9VVCf0GFK
ntVqfAkhOSOt3p+mHGH0hAmzGGVA9FGU5dIpvWUrMRdoBBJXj3akFVfLFv81QU9H
j3CCVHvCnGxBDtXWJV9CqVYWARit72R8FOLonpkFTRJ/IvFpePTccsMfsVvvBxS0
jt88EQAZ7bpdoJZ9qklr7LPMcNzXfZHdZLzNihbLhgEpVkfxI1vfflS5B5p1fIrK
/NJIAXJc8rgTJ0uI6MyYsgmJS2IVDXzwlsZWDLE9D3cbB8Xa53mlnPvmHgHwxAEn
Ic3OL8vsjZz9IcRksLr38/nbWhsHIUOrCovj
=jIJs
-----END PGP MESSAGE-----&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あるいはパイプを使って&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo Hello world | gpg -a --recipient alice -e
-----BEGIN PGP MESSAGE-----

hQIOAzn9g6TGzi9EEAgAsjEZxs4vutjg1U6BooimWrX3immaTL958Uheqcr7risr
2MCfVzzHuZtOpS4/lk/K4zk2xCxR3/NreZKlGrWZ205RCUJEY6Hy8GtrjJ2yilC6
ZV2U/ICRrpoTJm/J/R7W+99arXhP3zDSD2k5Fx9AMJ+OaKuHaBTxJQUtESV8J7Uk
RhyxQvJPXIfNRG4ZrfTzFzVOV1s9EeFR4UQHhQnp2q+7LA3qrfEh/y/sj4fs6o3G
KYcRVvUeAYsC1NGGcmpK6Q33oWJxN9vxl+NYlLebtCDS6GYl/bMw+YCXtfMh+cA2
aLiGUqXZT0Nhb/zVX8zlnP6CZE2kxS60LmTWv11DMQf/UCjdnIM80GKFvvy7/Vas
OlAwzQv2sWgI4ayL/VvslGVixSATsLD9DREjGo2/RfyDX/aLRsykK7H+Lr/+a3kp
LQzviY0ogYem1jCcqJs6wKMh1B+M+Ukkk9kVrgXelM6bmPT93Sb54LW9VVCf0GFK
ntVqfAkhOSOt3p+mHGH0hAmzGGVA9FGU5dIpvWUrMRdoBBJXj3akFVfLFv81QU9H
j3CCVHvCnGxBDtXWJV9CqVYWARit72R8FOLonpkFTRJ/IvFpePTccsMfsVvvBxS0
jt88EQAZ7bpdoJZ9qklr7LPMcNzXfZHdZLzNihbLhgEpVkfxI1vfflS5B5p1fIrK
/NJIAXJc8rgTJ0uI6MyYsgmJS2IVDXzwlsZWDLE9D3cbB8Xa53mlnPvmHgHwxAEn
Ic3OL8vsjZz9IcRksLr38/nbWhsHIUOrCovj
=jIJs
-----END PGP MESSAGE-----&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすることもできる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--recipient&lt;/code&gt; がセッション鍵の暗号化を行う公開鍵を指定するオプションである。
短縮名は &lt;code&gt;-r&lt;/code&gt;。
&lt;code&gt;--recipient&lt;/code&gt; オプションは複数指定できる。
また鍵束フォルダにある &lt;code&gt;gpg.conf&lt;/code&gt; ファイルで常に使用する公開鍵を指定することもできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dr1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dr1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;default-key alice
default-recipient-self&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;セッション鍵のみで暗号化する&#34;&gt;セッション鍵のみで暗号化する&lt;/h3&gt;

&lt;p&gt;公開鍵は使わずセッション鍵のみで暗号化を行う場合は &lt;code&gt;--symmetric&lt;/code&gt; コマンドを使う。
短縮名は &lt;code&gt;-c&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo Hello world | gpg -a -c
-----BEGIN PGP MESSAGE-----

jA0EBwMChZ5yarrU9aTF0kIBioFpcLD/laFWIMDVz7AzkzQl+Xwnao+iKpE+yaGo
sWe2GdB8IGA0O+CAqQYqwQTLKFVtWmAJKMi1hXsb/fuPpzU=
=5pGP
-----END PGP MESSAGE-----&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コマンド起動時にパスフレーズの入力を要求され，パスフレーズからセッション鍵を生成して暗号化を行う。
したがって，何らかの方法で暗号データの受け手とパスフレーズを共有する必要がある。&lt;/p&gt;

&lt;h2 id=&#34;暗号データの復号&#34;&gt;暗号データの復号&lt;/h2&gt;

&lt;p&gt;暗号データのf区号には &lt;code&gt;--decrypt&lt;/code&gt; コマンドを使う。
短縮名は &lt;code&gt;-d&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo Hello world | gpg -r alice -e -a &amp;gt; alice-enc.asc

$ gpg -d alice-enc.asc
gpg: 2048-ビットELG鍵, ID 39FD83A4C6CE2F44, 日付2017-11-30に暗号化されました
      &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;
Hello world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（パスフレーズ入力あり）&lt;/p&gt;

&lt;p&gt;復号したデータはファイルにリダイレクトすればいいのだが， Windows の場合は安全のため &lt;code&gt;--output&lt;/code&gt; オプションを使うことをお勧めする。
短縮名は &lt;code&gt;-o&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -o out.txt -d alice-enc.asc
gpg: 2048-ビットELG鍵, ID 39FD83A4C6CE2F44, 日付2017-11-30に暗号化されました
      &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;
Hello world

$ cat out.txt
Hello world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;セッション鍵のみで暗号化した場合も同じコマンドで復号できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo Hello world | gpg -a -c &amp;gt; alice-sym-enc.asc

$ gpg -d alice-sym-enc.asc
gpg: AES暗号化済みデータ
gpg: 1 個のパスフレーズで暗号化
Hello world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（パスフレーズ入力あり）&lt;/p&gt;

&lt;h2 id=&#34;データへの電子署名と検証&#34;&gt;データへの電子署名と検証&lt;/h2&gt;

&lt;p&gt;データへの電子署名にも幾つかの方法がある。&lt;/p&gt;

&lt;h3 id=&#34;クリア署名&#34;&gt;クリア署名&lt;/h3&gt;

&lt;p&gt;まずデータがテキストの場合は「クリア署名」という方法が使える。
クリア署名には &lt;code&gt;--clear-sign&lt;/code&gt; コマンドを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo Hello world | gpg -u alice --clear-sign
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hello world
-----BEGIN PGP SIGNATURE-----

iIgEAREIADAWIQTvp6IB8w6ZkSW4Whx6nWuc4jC66QUCWh/IZhIcYWxpY2VAZXhh
bXBsZS5jb20ACgkQep1rnOIwuuns2QD/RWTidtZjon5cPaiGJHM6oYnYx4HpQXNw
/xABYweyKdgA/3ArBLWmGhGq1aB8au7bixK91IdIRyhLC0DDJhXG2vM/
=sLc9
-----END PGP SIGNATURE-----&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにクリア署名は元になるテキストと電子署名がくっついた状態で出力される。
なお，クリア署名の場合は必ず ASCII Armor 形式の出力になるため &lt;code&gt;--armor&lt;/code&gt; オプションは不要である。&lt;/p&gt;

&lt;p&gt;署名の検証には &lt;code&gt;--verify&lt;/code&gt; コマンドを使う。
少し横着して署名と検証をパイプで繋いでしまおう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo Hello world | gpg -u alice --clear-sign | gpg --verify
gpg: 11/30/17 18:02:44 東京 (標準時)に施された署名
gpg:                DSA鍵EFA7A201F30E999125B85A1C7A9D6B9CE230BAE9を使用
gpg:                発行者&amp;#34;alice@example.com&amp;#34;
gpg: &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;からの正しい署名 [究極]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まぁ自分で署名して，出力をそのまま自分で検証してるんだから正しくてあたり前なのだが，流れは分かると思う。&lt;/p&gt;

&lt;p&gt;実は &lt;code&gt;--verify&lt;/code&gt; コマンドは &lt;code&gt;--decrypt&lt;/code&gt; コマンドで代替えできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo Hello world | gpg -u alice --clear-sign | gpg -d
Hello world
gpg: 11/30/17 18:05:11 東京 (標準時)に施された署名
gpg:                DSA鍵EFA7A201F30E999125B85A1C7A9D6B9CE230BAE9を使用
gpg:                発行者&amp;#34;alice@example.com&amp;#34;
gpg: &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;からの正しい署名 [究極]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように &lt;code&gt;--decrypt&lt;/code&gt; コマンドを使うと署名対象のテキストを抽出して出力してくれるのが利点である。&lt;/p&gt;

&lt;h3 id=&#34;分離署名&#34;&gt;分離署名&lt;/h3&gt;

&lt;p&gt;次はファイルへの電子署名をやってみる。
まず署名対象のファイルを用意する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo Hello world&amp;gt; hello.txt

$ cat hello.txt
Hello world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このファイルを配布する際に途中で改竄がないか知りたい。
こういう場合は「分離署名」にする。
分離署名には &lt;code&gt;--detach-sign&lt;/code&gt; コマンドを使う。
短縮名は &lt;code&gt;-b&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -u alice -b hello.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この結果 &lt;code&gt;hello.txt&lt;/code&gt; ファイルと同じ場所に &lt;code&gt;hello.txt.sig&lt;/code&gt; ファイルが作成される。
中身はバイナリデータである。&lt;/p&gt;

&lt;p&gt;この&lt;code&gt;hello.txt&lt;/code&gt; ファイルと &lt;code&gt;hello.txt.sig&lt;/code&gt; ファイルをセットで配布するのである。
どちらかのファイルが改竄されていれば署名の検証が NG になるはずである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --verify hello.txt.sig
gpg: 署名されたデータが&amp;#39;hello.txt&amp;#39;にあると想定します
gpg: 11/30/17 18:31:17 東京 (標準時)に施された署名
gpg:                DSA鍵EFA7A201F30E999125B85A1C7A9D6B9CE230BAE9を使用
gpg:                発行者&amp;#34;alice@example.com&amp;#34;
gpg: &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;からの正しい署名 [究極]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここでは署名対象のファイルを &lt;code&gt;hello.txt&lt;/code&gt; と推測して署名の検証を行っている。
署名対象のファイルを明示して指定するには&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --verify hello.txt.sig hello.txt
gpg: 11/30/17 18:31:17 東京 (標準時)に施された署名
gpg:                DSA鍵EFA7A201F30E999125B85A1C7A9D6B9CE230BAE9を使用
gpg:                発行者&amp;#34;alice@example.com&amp;#34;
gpg: &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;からの正しい署名 [究極]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とする。
分離署名の検証でも &lt;code&gt;--decrypt&lt;/code&gt; コマンドが使える。
ただし出力は全く同じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -d hello.txt.sig
gpg: 署名されたデータが&amp;#39;hello.txt&amp;#39;にあると想定します
gpg: 11/30/17 18:31:17 東京 (標準時)に施された署名
gpg:                DSA鍵EFA7A201F30E999125B85A1C7A9D6B9CE230BAE9を使用
gpg:                発行者&amp;#34;alice@example.com&amp;#34;
gpg: &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;からの正しい署名 [究極]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお，署名対象のファイルがテキスト・ファイルの場合は &lt;code&gt;--textmode&lt;/code&gt; オプションを付けて電子署名を行ったほうが安全である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -u alice --textmode -b hello.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;テキスト・ファイルの場合，配布経路によっては改行コードが変えられたりするため（電子メールや FTP 転送など），電子署名を行ったり署名検証を行ったりする前にテキストを正規化しているのである。&lt;/p&gt;

&lt;h3 id=&#34;署名データに署名対象のデータを含める&#34;&gt;署名データに署名対象のデータを含める&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; ではもうひとつ電子署名の形式がある。
電子署名データの中に署名対象のデータを埋め込んでしまうのである。
これを行うには &lt;code&gt;--sign&lt;/code&gt; コマンドを使う。
短縮名は &lt;code&gt;-s&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -u alice -s hello.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この結果 &lt;code&gt;hello.txt&lt;/code&gt; ファイルと同じ場所に &lt;code&gt;hello.txt.gpg&lt;/code&gt; ファイルが作成される。
中身はバイナリデータである。&lt;/p&gt;

&lt;p&gt;さて，できたファイルを検証しよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --verify hello.txt.gpg
gpg: 11/30/17 19:21:22 東京 (標準時)に施された署名
gpg:                RSA鍵0200ACBA190D0FB1D4EC7C02DC1D13A6CCA86E21を使用
gpg:                発行者&amp;#34;alice@example.com&amp;#34;
gpg: &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;からの正しい署名 [究極]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;検証は OK だが署名対象のデータが取り出せない。
そこでまた &lt;code&gt;--decrypt&lt;/code&gt; コマンドを使う。。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -d hello.txt.gpg
Hello world
gpg: 11/30/17 19:21:22 東京 (標準時)に施された署名
gpg:                RSA鍵0200ACBA190D0FB1D4EC7C02DC1D13A6CCA86E21を使用
gpg:                発行者&amp;#34;alice@example.com&amp;#34;
gpg: &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;からの正しい署名 [究極]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでデータの抽出ができた。
署名対象のデータを埋め込む方式の何が嬉しいかというと，暗号化と組み合わせる事ができるのである。&lt;/p&gt;

&lt;h3 id=&#34;暗号化と電子署名を同時に行う&#34;&gt;暗号化と電子署名を同時に行う&lt;/h3&gt;

&lt;p&gt;暗号化と電子署名を同時に行うには &lt;code&gt;--encrypt&lt;/code&gt; コマンドと&lt;code&gt;--sign&lt;/code&gt; コマンドを同時に指定する。
短縮名は &lt;code&gt;-se&lt;/code&gt; または &lt;code&gt;-es&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -u alice -r bob -se hello.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここでは Bob の公開鍵で暗号化して Alice の鍵で電子署名するようにしてみた。
この結果 &lt;code&gt;hello.txt&lt;/code&gt; ファイルと同じ場所に &lt;code&gt;hello.txt.gpg&lt;/code&gt; ファイルが作成される。
中身はバイナリデータである。&lt;/p&gt;

&lt;p&gt;ではこれを復号してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -d hello.txt.gpg
gpg: 2048-ビットRSA鍵, ID D74C71530446FD66, 日付2017-11-30に暗号化されました
      &amp;#34;Bob &amp;lt;bob@example.com&amp;gt;&amp;#34;
Hello world
gpg: 11/30/17 19:34:06 東京 (標準時)に施された署名
gpg:                RSA鍵0200ACBA190D0FB1D4EC7C02DC1D13A6CCA86E21を使用
gpg:                発行者&amp;#34;alice@example.com&amp;#34;
gpg: &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;からの正しい署名 [究極]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように復号と署名検証が同時に行われる。&lt;/p&gt;

&lt;p&gt;ちなみにセッション鍵のみの暗号化と電子署名を組み合わせることもできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg -u alice -sc hello.txt
gpg: AES暗号化を使用します

$ gpg -d hello.txt.gpg
gpg: AES暗号化済みデータ
gpg: 1 個のパスフレーズで暗号化
Hello world
gpg: 11/30/17 19:47:57 東京 (標準時)に施された署名
gpg:                RSA鍵0200ACBA190D0FB1D4EC7C02DC1D13A6CCA86E21を使用
gpg:                発行者&amp;#34;alice@example.com&amp;#34;
gpg: &amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;からの正しい署名 [究極]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;署名・暗号化ではパスフレーズ入力が最大3回（暗号化で確認を入れて2回，電子署名で1回）発生するので注意すること。&lt;/p&gt;

&lt;h2 id=&#34;鍵の失効&#34;&gt;鍵の失効&lt;/h2&gt;

&lt;p&gt;パスフレーズの漏洩や暗号アルゴリズムの危殆化などによって鍵を失効しなければならない場合がある。&lt;/p&gt;

&lt;p&gt;鍵を作成する際に鍵束フォルダの &lt;code&gt;openpgp-revocs.d&lt;/code&gt; フォルダに失効証明書が作成される。
中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;これは失効証明書でこちらのOpenPGP鍵に対するものです:

pub   rsa2048 2017-11-30 [SC]
      0200ACBA190D0FB1D4EC7C02DC1D13A6CCA86E21
uid          Alice &amp;lt;alice@example.com&amp;gt;

失効証明書は &amp;#34;殺すスイッチ&amp;#34; のようなもので、鍵がそれ以上使えない
ように公に宣言するものです。一度発行されると、そのような失効証明書は
撤回することはできません。

秘密鍵のコンプロマイズや紛失の場合、これを使ってこの鍵を失効させます。
しかし、秘密鍵がまだアクセス可能である場合、新しい失効証明書を生成し、
失効の理由をつける方がよいでしょう。詳細は、GnuPGマニュアルのgpgコマン
ド &amp;#34;--generate-revocation&amp;#34;の記述をご覧ください。

このファイルを誤って使うのを避けるため、以下ではコロンが5つのダッシュ
の前に挿入されます。この失効証明書をインポートして公開する前に、テク
スト・エディタでこのコロンを削除してください。

:-----BEGIN PGP PUBLIC KEY BLOCK-----
Comment: This is a revocation certificate

iQE2BCABCAAgFiEEAgCsuhkND7HU7HwC3B0TpsyobiEFAlof25ICHQAACgkQ3B0T
psyobiHRgwf/cNwI01IlXP1dw6op6IgIv3r8nT9XXU4S1WjCvT7yoNs0u+BLHELU
1V16vY9FcnaiNzz/xkSaAVpY+X1O1G7RZ7oYUMA6yMmeUH2fdP7eh4RFM2RZtlq+
HQAoyJb6PVu3uIsfqZh2uMH5v3cUIpRI0dwAZG9hQkg0uZ2a1SGKuSjN9voC9vsE
T55v2WSAtOeleMsNxmywcYGGQBm8YV1F8AC+7K5oc+dmciTBX1IpVHMHkxccObfy
yrpaQGEWJ39Bp8aR+W6Ywe2Bcpbz1tKWmXmXh4iMYEXDBqs/tnpA30dWJYAiLdCA
OYcNJtm9leku3UYJGiTSlxZWmImOEgT8ng==
=xiB6
-----END PGP PUBLIC KEY BLOCK-----&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このファイルをインポートすることで鍵が失効される。
なお失効証明書を使用の際には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;:-----BEGIN PGP PUBLIC KEY BLOCK-----&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;の先頭のコロン（&lt;code&gt;:&lt;/code&gt;）を削除して使うこと。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --import openpgp-revocs.d/0200ACBA190D0FB1D4EC7C02DC1D13A6CCA86E21.rev
gpg: 鍵DC1D13A6CCA86E21:&amp;#34;Alice &amp;lt;alice@example.com&amp;gt;&amp;#34;失効証明書をインポートしました
gpg:           処理数の合計: 1
gpg:         新しい鍵の失効: 1

$ gpg -k alice
pub   rsa2048 2017-11-30 [SC] [失効: 2017-11-30]
      0200ACBA190D0FB1D4EC7C02DC1D13A6CCA86E21
uid           [  失効  ] Alice &amp;lt;alice@example.com&amp;gt;

$ gpg -a --export alice &amp;gt; alice-rev.asc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;失効した公開鍵を配布するのを忘れずに！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;失効証明書は &lt;code&gt;--generate-revocation&lt;/code&gt; コマンドで作成することもできる。
短縮名は &lt;code&gt;--gen-revoke&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-test&#34; data-lang=&#34;test&#34;&gt;$ gpg --gen-revoke alice

sec  rsa2048/F3B15FCBA57934CF 2017-11-30 Alice &amp;lt;alice@example.com&amp;gt;

この鍵に対する失効証明書を作成しますか? (y/N) y
失効の理由を選択してください:
  0 = 理由は指定されていません
  1 = 鍵(の信頼性)が損なわれています
  2 = 鍵がとりかわっています
  3 = 鍵はもはや使われていません
  Q = キャンセル
(ここではたぶん1を選びたいでしょう)
あなたの決定は? 1
予備の説明を入力。空行で終了:
&amp;gt;
失効理由: 鍵(の信頼性)が損なわれています
(説明はありません)
よろしいですか? (y/N) y
ASCII外装出力を強制します。
gpg: AllowSetForegroundWindow(11408) failed: アクセスが拒否されました。

-----BEGIN PGP PUBLIC KEY BLOCK-----
Comment: This is a revocation certificate

iQE2BCABCAAgFiEErVfNdsSCr6H+LTqu87Ffy6V5NM8FAlof5W0CHQIACgkQ87Ff
y6V5NM+rwgf/dhNTJlYaDdt52CkS8ckSjhrwK3t56mei+sXaic89mYG6RZsJJeAg
+/KAZbruQZqcYAYYw9jOM0UZpysBvZRRfHj7v44FbcJX7GJORDv3lgtQ0nANwHVN
DXzjpuxBTXGHkBKaOkJ/K5FKGxzFCg+uxJbFh8S710UgS7eg499X+wuKUYuC5orT
n8qdTvehxLf6hfznCA8fgkSP4VFh1X9NWXBcuH1kogAdOTfTcveY/qC2km/i4SfY
6x/s4pQvwAIS682dGaqXro0pODsi5Am43xIZeOJaNui7Ear98zB6S/I0Cbp/knzr
kAc/Jx5aYcyrXqcZtxNwHF+oflpRWyd0KA==
=wLMC
-----END PGP PUBLIC KEY BLOCK-----
失効証明書を作成しました。

みつからないように隠せるような媒体に移してください。もし_悪者_がこの証明書への
アクセスを得ると、あなたの鍵を使えなくすることができます。
媒体が読出し不能になった場合に備えて、この証明書を印刷して保管するのが賢明です。
しかし、ご注意ください。あなたのマシンの印字システムは、他の人がアクセスできる
場所にデータをおくことがあります!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このうち ASCII Armor 形式の部分をコピペして使えばよい。&lt;/p&gt;

&lt;p&gt;鍵作成時に作られた失効証明書は別の場所に補完しておくことをお勧めする。
もし失効が必要になった時に時間的な余裕があれば &lt;code&gt;--generate-revocation&lt;/code&gt; コマンドで失効証明書を（失効理由も含める形で）作成し，即失効，配布を行うのがいいと思う。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnupg.org/documentation/manuals/gnupg/OpenPGP-Key-Management.html&#34;&gt;Using the GNU Privacy Guard: OpenPGP Key Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html&#34;&gt;Using the GNU Privacy Guard: Unattended GPG key generation&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html&#34;&gt;Using the GNU Privacy Guard: GPG Configuration Options&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml&#34;&gt;わかる！ OpenPGP 暗号 — Baldanders.info&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/11/openpgp-key-management/&#34;&gt;OpenPGP 鍵管理に関する考察&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dr1&#34;&gt;&lt;code&gt;default-recipient-self&lt;/code&gt; の指定は自身の鍵で復号できるよう設定するためのものである。相手の公開鍵のみで暗号化してしまうと，暗号化した本人が復号できないことになってしまうため。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dr1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GnuPG for Windows : gpg-agent について - openpgp</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/openpgp/using-gnupg-for-windows-2/" />
		<id>tag:text.Baldanders.info,2017-12-01:/openpgp/using-gnupg-for-windows-2/</id>
		<published>2017-12-01T17:48:43+09:00</published>
		<updated>2017-12-02T21:55:18+09:00</updated>
		<summary>今回は gpg-agent について解説する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="openpgp" label="openpgp" scheme="http://text.baldanders.info/openpgp" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;h2 id=&#34;gpg-agent&#34;&gt;gpg-agent&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;gpg-agent&lt;/code&gt; は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の中核コンポーネントで，秘密鍵の管理&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:sr&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; を行い一定期間キャッシュする。
&lt;code&gt;gpg-agent&lt;/code&gt; は &lt;code&gt;gpg&lt;/code&gt;, &lt;code&gt;gpgsm&lt;/code&gt;, &lt;code&gt;gpgconf&lt;/code&gt;, &lt;code&gt;gpg-connect-agent&lt;/code&gt; といったコンポーネントから常駐プロセスとして起動されお互いに通信を行う&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:od&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:od&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gpg-agent&lt;/code&gt; が稼働中かどうかは &lt;code&gt;gpg-agent&lt;/code&gt; を引数なしで起動すれば分かる。
以下は既に起動している場合。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg-agent
gpg-agent[3996]: gpg-agent running and available&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;gpg-agent&lt;/code&gt; が稼働していない場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg-agent
gpg-agent[9552]: no gpg-agent running in this session&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;などと表示される。&lt;/p&gt;

&lt;p&gt;手動で &lt;code&gt;gpg-agent&lt;/code&gt; を起動する場合は以下のコマンドで起動する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg-connect-agent /bye
gpg-connect-agent: no running gpg-agent - starting &amp;#39;C:\path\to\GnuPG\bin\gpg-agent.exe&amp;#39;
gpg-connect-agent: waiting for the agent to come up ... (5s)
gpg-connect-agent: connection to agent established&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逆に &lt;code&gt;gpg-agent&lt;/code&gt; を手動で停止したい場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg-connect-agent killagent /bye
OK closing connection&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすれば安全に停止できる。&lt;/p&gt;

&lt;h3 id=&#34;pinentry&#34;&gt;Pinentry&lt;/h3&gt;

&lt;p&gt;Pinentry はパスフレーズ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:pp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:pp&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; やスマートカードの PIN コードを入力する際に &lt;code&gt;gpg-agent&lt;/code&gt; から呼び出される。
Windows 版では Pinentry プログラムとして &lt;code&gt;pinentry-basic.exe&lt;/code&gt; が同梱されている。
同等の機能を持つものであれば他のプログラムと差し替えることもできる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gpg&lt;/code&gt; に &lt;code&gt;--batch&lt;/code&gt; （または &lt;code&gt;--pinentry-mode loopback&lt;/code&gt;）オプションとパスフレーズ指定オプション（&lt;code&gt;--passphrase&lt;/code&gt;, &lt;code&gt;--passphrase-fd&lt;/code&gt;, &lt;code&gt;--passphrase-file&lt;/code&gt;）をセットで指定している場合は Pinentry を迂回できることがある（&lt;code&gt;--quick-gen-key&lt;/code&gt; コマンドの場合など）。&lt;/p&gt;

&lt;h3 id=&#34;gpg-agent-のオプション&#34;&gt;gpg-agent のオプション&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;gpg-agent&lt;/code&gt; のオプションは &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; ホームディレクトリ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:hd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:hd&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; 直下にある &lt;code&gt;gpg-agent.conf&lt;/code&gt; ファイルで設定する。
設定は以下の様なフォーマットで行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;default-cache-ttl 600
max-cache-ttl 7200&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;gpg-agent.conf&lt;/code&gt; ファイルで使いそうなオプションを以下に挙げる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;オプション名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;log-file&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ログの出力先をフルパスで指定する。 挙動をチェックしたい場合など&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;default-cache-ttl&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;直前にアクセスしたキャッシュ・エントリの有効期間を秒単位で指定する。 既定値は 600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;max-cache-ttl&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;キャッシュ・エントリの有効期間の最大値を秒単位で指定する。 アクセスの有無にかかわらずこの期間が過ぎるとキャッシュがクリアされる。 既定値は 7200&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pinentry-program&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;独自に Pinentry プログラムを指定する場合はここにフルパスで指定する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pinentry-timeout&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pinentry プログラムの表示時間を秒単位で指定する。 既定値は 0 （タイムアウトなし）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;他にも，鍵生成時にパスフレーズの文字種や最小文字長を指定したり，パスフレーズの有効期間（期間が過ぎると警告が出るらしい）を設定できたりするようだ。
オプション項目について詳しくはは&lt;a href=&#34;https://gnupg.org/documentation/manuals/gnupg/Agent-Options.html&#34; title=&#34;Agent Options - Using the GNU Privacy Guard&#34;&gt;マニュアル&lt;/a&gt;（英語）を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;putty-with-gpg-agent&#34;&gt;PuTTY with gpg-agent&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; は Windows 用の SSH クライアント兼ターミナル・エミュレータである。
&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; には Plink と呼ばれるコマンドラインベースの SSH 接続ツールがあり，他ツール（例えば &lt;a href=&#34;https://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt;）と連携できるようになっている。
さらに &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; には Pageant と呼ばれるエージェントツールもあり，認証用の秘密鍵をキャッシュすることができる。&lt;/p&gt;

&lt;p&gt;今回は Pageant を &lt;code&gt;gpg-agent&lt;/code&gt; で置き換えることを考える。&lt;/p&gt;

&lt;h3 id=&#34;gpg-agent-のオプション-1&#34;&gt;gpg-agent のオプション&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;gpg-agent.conf&lt;/code&gt; ファイルに以下のオプションを追加する（&lt;code&gt;enable-putty-support&lt;/code&gt; 以外は任意）。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;オプション名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;enable-putty-support&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pageant プロトコルを有効にする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;default-cache-ttl-ssh&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;直前にアクセスしたキャッシュ・エントリの有効期間を秒単位で指定する。 既定値は 1800&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;max-cache-ttl-ssh&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;キャッシュ・エントリの有効期間の最大値を秒単位で指定する。 アクセスの有無にかかわらずこの期間が過ぎるとキャッシュがクリアされる。 既定値は 7200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;設定を保存したら &lt;code&gt;gpg-connect-agent&lt;/code&gt; を使って &lt;code&gt;gpg-agent&lt;/code&gt; を再起動する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg-connect-agent killagent /bye
OK closing connection

$ gpg-connect-agent /bye
gpg-connect-agent: no running gpg-agent - starting &amp;#39;C:\path\to\GnuPG\bin\gpg-agent.exe&amp;#39;
gpg-connect-agent: waiting for the agent to come up ... (5s)
gpg-connect-agent: connection to agent established&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお， &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の各コンポーネントは必要に応じて自動的に &lt;code&gt;gpg-agent&lt;/code&gt; を起動するので問題ないのだが， &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; と連動しているわけではないため， &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; 起動時に &lt;code&gt;gpg-agent&lt;/code&gt; が起動していない状況もありうる。
そこで， Windows ログイン時に &lt;code&gt;gpg-connect-agent&lt;/code&gt; を使って &lt;code&gt;gpg-agent&lt;/code&gt; を起動しておくことをお薦めする。&lt;/p&gt;

&lt;h3 id=&#34;ssh-鍵のインポート&#34;&gt;SSH 鍵のインポート&lt;/h3&gt;

&lt;p&gt;SSH 鍵のインポートには2通りの方法あるようだが，今回は簡単な方でいく&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:imp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:imp&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;鍵ファイル（ここでは &lt;code&gt;id_rsa.PPK&lt;/code&gt; とする）を Pageant で開く。
ファイルの関連付けがされている場合はエクスプローラから該当の PPK ファイルをダブルクリックすればいい。
そうでない場合は以下のコマンドで PPK ファイルを開く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pageant.exe id_rsa.PPK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると Pageant のプロンプトが1回， &lt;code&gt;gpg-agent&lt;/code&gt; のプロンプトが2回表示され，都合3回パスフレーズを入力させられる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25558118892/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1454/25558118892_045f0a9b8f_o.png&#34; srcset=&#34;https://farm2.staticflickr.com/1454/25558118892_045f0a9b8f_o.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Pageant&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25558118892/&#34;&gt;Pageant&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25558116832/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1485/25558116832_dd02c5d7ec_o.png&#34; srcset=&#34;https://farm2.staticflickr.com/1485/25558116832_dd02c5d7ec_o.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;GnuPG Pinentry (1)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25558116832/&#34;&gt;GnuPG Pinentry (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25376004580/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1467/25376004580_58a790993c_o.png&#34; srcset=&#34;https://farm2.staticflickr.com/1467/25376004580_58a790993c_o.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;GnuPG Pinentry (2)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25376004580/&#34;&gt;GnuPG Pinentry (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これで秘密鍵が &lt;code&gt;private-keys-v1.d&lt;/code&gt; フォルダに格納される。
また &lt;code&gt;sshcontrol&lt;/code&gt; ファイルが作成され，インポートした鍵の情報が書き込まれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# List of allowed ssh keys.  Only keys present in this file are used
# in the SSH protocol.  The ssh-add tool may add new entries to this
# file to enable them; you may also add them manually.  Comment
# lines, like this one, as well as empty lines are ignored.  Lines do
# have a certain length limit but this is not serious limitation as
# the format of the entries is fixed and checked by gpg-agent. A
# non-comment line starts with optional white spaces, followed by the
# keygrip of the key given as 40 hex digits, optionally followed by a
# caching TTL in seconds, and another optional field for arbitrary
# flags.   Prepend the keygrip with an &amp;#39;!&amp;#39; mark to disable it.

# RSA key added on: 2016-03-10 21:24:32
# MD5 Fingerprint:  56:ff:fd:60:38:a1:7a:44:0c:37:86:90:94:8d:7f:6a
F65BB98767E88930612C6EABC4D4918E2A573903 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この &lt;code&gt;F65B...&lt;/code&gt; の長ったらしい数字列は keygrip と呼ばれる鍵の識別子で &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; の鍵 ID とは異なるもののようだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:kg&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:kg&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;これで鍵のインポートができたので &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; で実際に SSH 接続してみると&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25585468551/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1586/25585468551_0447584a65_o.png&#34; srcset=&#34;https://farm2.staticflickr.com/1586/25585468551_0447584a65_o.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;GnuPG Pinentry (3)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25585468551/&#34;&gt;GnuPG Pinentry (3)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とプロンプトが表示された。
めでたし！&lt;/p&gt;

&lt;h3 id=&#34;git-for-windows-との連携&#34;&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; との連携&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; と &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; を連携するには，環境変数 &lt;code&gt;GIT_SSH&lt;/code&gt; に Plink へのフルパスをセットする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;setx GIT_SSH=C:\path\to\PuTTY\plink.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし，最近の &lt;a href=&#34;https://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; ではインストール時の SSH 接続設定で &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; を使うよう指定すれば自動的に環境変数をセットしてくれるので，手動で設定する必要はないと思われる。&lt;/p&gt;

&lt;h2 id=&#34;windows-版-gpg-agent-は-openssh-と相性が悪い&#34;&gt;Windows 版 gpg-agent は &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; と相性が悪い？&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;gpg-agent&lt;/code&gt; は &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; の &lt;code&gt;ssh-agent&lt;/code&gt; と置き換えることもできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sa&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:sa&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。
&lt;code&gt;gpg-agent&lt;/code&gt; への SSH 鍵のインポートには &lt;code&gt;ssh-add&lt;/code&gt; を使うのだが， Windows 環境では上手く動かない。
どうやらファイル・ディスクリプタ &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; が上手く機能しないようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 版&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:m&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:m&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; と &lt;a href=&#34;https://github.com/PowerShell/Win32-OpenSSH&#34; title=&#34;PowerShell/Win32-OpenSSH: Win32 port of OpenSSH&#34;&gt;PowerShell 用&lt;/a&gt;の &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; で試してみたのだが，いずれも上手くいかなかった。
&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 版については &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を使えば上手くいくのかもしれないが，面倒なので試してない。&lt;/p&gt;

&lt;h3 id=&#34;ssh-pageant-経由で-openssh-と連携できる&#34;&gt;ssh-pageant 経由で &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; と連携できる！&lt;/h3&gt;

&lt;p&gt;フィードバックで教えていただいたのだが &lt;code&gt;ssh-pageant&lt;/code&gt; というツールがあって，これを経由して &lt;code&gt;gpg-agent&lt;/code&gt; と &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; を繋げられるようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cuviper/ssh-pageant&#34;&gt;GitHub - cuviper/ssh-pageant: An SSH authentication agent for Cygwin/MSYS to PuTTY&amp;rsquo;s Pageant.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;ssh-pageant&lt;/code&gt; は最近の &lt;a href=&#34;https://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; には同梱されている。
&lt;code&gt;ssh-pageant&lt;/code&gt; が常駐している状態では， &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; からは &lt;code&gt;ssh-agent&lt;/code&gt; が起動しているように見える。
一方， &lt;code&gt;gpg-agent&lt;/code&gt; には &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; から要求があるように見える。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
graph LR
  OpenSSH-- request key --&gt;ssh-pageant
  ssh-pageant-- store key --&gt;OpenSSH
  ssh-pageant-- request key --&gt;gpg-agent
  gpg-agent-- store key --&gt;ssh-pageant
&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;この方法の利点は， &lt;code&gt;enable-putty-support&lt;/code&gt; オプションを有効にしておけば， &lt;code&gt;gpg-agent&lt;/code&gt; は &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; とも &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; とも全く等価にアクセスできる点だろう。
欠点は，結局のところ &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; は手放せないということだろうか（だって bash 以外の環境では今まで通りだし）。
&lt;a href=&#34;https://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; に関しては&amp;hellip; もう Plink での接続でいいんじゃないかな。&lt;/p&gt;

&lt;p&gt;まぁ Windows だしね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh-pageant&lt;/code&gt; の起動は bash から以下のコマンドを起動する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ eval $(/usr/bin/ssh-pageant -r -a &amp;#34;/tmp/.ssh-pageant-$USERNAME&amp;#34;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ssh-agent&lt;/code&gt; と似たようなやりかただな。
&lt;code&gt;ssh-pageant&lt;/code&gt; は完全に土管として機能するので，上のコマンドを &lt;code&gt;.bash_profile&lt;/code&gt; か &lt;code&gt;.bashrc&lt;/code&gt; に書いておいて bash 起動時に常駐させておけばいいだろう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bash1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bash1&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh-add&lt;/code&gt; で鍵のインポートができるかどうかは試してないが（Pageant からインポートできてるし）， &lt;code&gt;ssh-add -l&lt;/code&gt; ってやったらちゃんと鍵情報が取れたので，多分できるんじゃないかな？&lt;/p&gt;

&lt;h2 id=&#34;参考になる-かもしれない-web-ページ&#34;&gt;参考になる（かもしれない） Web ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hp.vector.co.jp/authors/VA024651/PuTTYkj.html&#34;&gt;hdk の自作ソフトの紹介 | PuTTYjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ice.hotmint.com/putty/&#34;&gt;iceiv+putty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webkaru.net/linux/putty-ssh-login-public-key/&#34;&gt;公開鍵認証によるSSH接続 - PuTTYの使い方 - Linux入門 - Webkaru&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tsuyoshi_cho/items/79c09905ae3f192b3a0f&#34;&gt;Windowsでのssh agent - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.yubico.com/PGP/SSH_authentication/Windows.html&#34;&gt;SSH authentication using a YubiKey on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yanor.net/wiki/?Git%2FGit%20for%20Windows%2FSSH%E3%81%ABPuTTY%E3%82%92%E4%BD%BF%E3%81%86&#34;&gt;Git/Git for Windows/SSHにPuTTYを使う - yanor.net/wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://superuser.com/questions/911496/gpg-agent-under-windows-as-ssh-agent-for-git-bash&#34;&gt;GPG Agent under Windows as SSH Agent for  - Super User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://incenp.org/notes/2015/gnupg-for-ssh-authentication.html&#34;&gt;Using GnuPG (2.1) for SSH authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sysmic.org/dotclear/index.php?post/2010/03/24/Convert-keys-betweens-GnuPG%2C-OpenSsh-and-OpenSSL&#34;&gt;Convert keys between GnuPG, OpenSsh and OpenSSL - Sysmic.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/jkr_2255/items/f1ebd3fa4a9bf8ee1b03&#34;&gt;Git for WindowsのシェルからPageantでSSH - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tsuyoshi_cho/items/79c09905ae3f192b3a0f&#34;&gt;Windowsでのssh agent - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/20081106192615.htm&#34;&gt;Big Sky :: Windowsでもssh-agentとssh-addを使ってパスフレーズ入力を省略する。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lechnology.com/software/keeagent/&#34;&gt;KeeAgent – lechnology.com&lt;/a&gt; : パスワード管理ツール &lt;a href=&#34;https://keepass.info/&#34; title=&#34;KeePass Password Safe&#34;&gt;KeePass&lt;/a&gt; のプラグインで， &lt;a href=&#34;https://keepass.info/&#34; title=&#34;KeePass Password Safe&#34;&gt;KeePass&lt;/a&gt; のパスワードデータベースを使って SSH 鍵を管理し Agent 機能で SSH に鍵を渡す仕組みらしい。  &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; と &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; に対応しているようだ&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:sr&#34;&gt;&lt;a href=&#34;http://text.baldanders.info/openpgp/using-gnupg-for-windows-1/&#34; title=&#34;GnuPG for Windows インストール編&#34;&gt;前回&lt;/a&gt;も書いたが， classic version と現行バージョンでは鍵（特に秘密鍵）の管理の仕方が異なるため両者を混在させる場合は注意が必要である。 Classic version で作成した鍵を現行バージョンにも反映させたいのであれば &lt;code&gt;gpg-v21-migrated&lt;/code&gt; ファイルを削除すると再度移行処理が走るらしい。 Classic version を使わなければならない状況（Linux などではパッケージ管理ツールがアプリケーションの証明用に &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の classic version を使うことがある）でないのなら現行バージョンに一本化するほうがお勧めである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:od&#34;&gt;現行バージョンでは &lt;code&gt;gpg-agent&lt;/code&gt; が必須である。したがって，かつての &lt;code&gt;--use-agent&lt;/code&gt;, &lt;code&gt;--no-use-agent&lt;/code&gt;, &lt;code&gt;--gpg-agent-info&lt;/code&gt; 各オプションは無効（ダミーオプション）になっている。また UNIX 互換プラットフォームで &lt;code&gt;gpg-agent&lt;/code&gt; 利用する際は &lt;code&gt;GPG_TTY&lt;/code&gt; 環境変数をセットする必要があるが， Windows では不要なためここでは割愛する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:od&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:pp&#34;&gt;パスワード（password）とパスフレーズ（passphrase）の違いは，パスフレーズでは英数字以外に空白文字や記号が使え文字数の制限がないことにある。ちなみに &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; の秘密鍵にはいかなる形でもパスフレーズを保持しない（S2K パラメータ情報は持っている）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:pp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:hd&#34;&gt;Windows では， &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; ホームディレクトリの既定は &lt;code&gt;%APPDATA%\gnupg&lt;/code&gt; となっている。これを変更するには &lt;code&gt;GNUPGHOME&lt;/code&gt; 環境変数または &lt;code&gt;--homedir&lt;/code&gt; オプションを使う。（&lt;a href=&#34;http://text.baldanders.info/openpgp/using-gnupg-for-windows-1/&#34; title=&#34;GnuPG for Windows インストール編&#34;&gt;前回&lt;/a&gt;を参照のこと）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:hd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:imp&#34;&gt;今回は PPK ファイルを直接読み込む方法をとったが， PPK ファイルから OpenSSH 形式にエクスポートし，それを更に X.509 形式に変換した後 &lt;code&gt;gpgsm&lt;/code&gt; でインポートすることもできるらしい。（参考： &lt;a href=&#34;http://www.sysmic.org/dotclear/index.php?post/2010/03/24/Convert-keys-betweens-GnuPG%2C-OpenSsh-and-OpenSSL&#34;&gt;Convert keys between GnuPG, OpenSsh and OpenSSL&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:imp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:kg&#34;&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 鍵以外の鍵にも対応するためらしい。 &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 鍵の keygrip は &lt;code&gt;--with-keygrip&lt;/code&gt; オプションを付けて鍵を表示すると見ることができる。ちなみに &lt;code&gt;private-keys-v1.d&lt;/code&gt; フォルダにある秘密鍵のファイルは，この keygrip 値がそのままファイル名になっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:kg&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sa&#34;&gt;&lt;code&gt;gpg-agent.conf&lt;/code&gt; ファイルに &lt;code&gt;enable-ssh-support&lt;/code&gt; オプションをセットする。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sa&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:m&#34;&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; に同梱されている bash も &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:m&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bash1&#34;&gt;うちの &lt;a href=&#34;https://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; 付属の bash では何故か &lt;code&gt;.bash_profile&lt;/code&gt; を読んでくれない。ので &lt;code&gt;.bashrc&lt;/code&gt; に書いている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bash1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GnuPG for Windows インストール編 - openpgp</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/openpgp/using-gnupg-for-windows-1/" />
		<id>tag:text.Baldanders.info,2017-12-01:/openpgp/using-gnupg-for-windows-1/</id>
		<published>2017-12-01T17:48:32+09:00</published>
		<updated>2017-12-01T17:48:32+09:00</updated>
		<summary>Windows 版 GnuPG のインストールについて。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="openpgp" label="openpgp" scheme="http://text.baldanders.info/openpgp" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;この記事は以下の記事を最新版 &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 用に再構成したものです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000770.shtml&#34;&gt;GnuPG 2.1.0 (modern) for Windows のインストール — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ECC への対応については以下の Gist ページを参照のこと。
（これもそのうち再構成してここで公開する予定）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/spiegel-im-spiegel/f177c02af04d3b34ade0&#34;&gt;Windows 版 GnuPG 2.1.x を使ってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;openpgp-実装としての-gnupg&#34;&gt;OpenPGP 実装としての GnuPG&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; の起源は &lt;a href=&#34;https://www.philzimmermann.com/&#34; title=&#34;Phil Zimmermann&#39;s Home Page&#34;&gt;Phil Zimmermann&lt;/a&gt; さんによる PGP (Pretty Good Privacy) と呼ばれる暗号ツールである。
PGP の最初のバージョンは1991年に公開された&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1991&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1991&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
当時の &lt;a href=&#34;https://www.philzimmermann.com/&#34; title=&#34;Phil Zimmermann&#39;s Home Page&#34;&gt;Phil Zimmermann&lt;/a&gt; さんは反核運動家で，政府等の組織からデータやメッセージ（特に電子メール）を保護するための手段として PGP を開発し，最終的にそれをフリーで公開した&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:pgp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:pgp&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;その後 PGP はいくつか改良を重ね，1998年に &lt;a href=&#34;http://tools.ietf.org/html/rfc2440&#34; title=&#34;RFC 2440 - OpenPGP Message Format&#34;&gt;RFC 2440&lt;/a&gt; つまり OpenPGP として標準化された&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:op&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:op&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
また特許上の制限や国際政治上の問題も2000年を機に大幅に緩和され PGP を含む多くの暗号製品が本格的に使われるようになった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; は &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; をベースにドイツで生まれた製品である。
特定の個人・組織が独占することのないよう &lt;a href=&#34;https://www.gnu.org/&#34; title=&#34;The GNU Operating System and the Free Software Movement&#34;&gt;GNU&lt;/a&gt; プロジェクトの一環として現在も開発が行われている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gpl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:gpl&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の最新バージョンは 2.2 系である。
2.0 系（旧 stable version）および 2.1 系（旧 modern version）は 2.2 系に統合された。
また 2.0 系は2017年末でサポートが終了する。&lt;/p&gt;

&lt;p&gt;なお classic version である 1.4 系はレガシー・システムとの互換性のためにメンテナンスが継続されるが， Windows で新たに導入するのであれば 2.2 系を強くお勧めする。&lt;/p&gt;

&lt;h2 id=&#34;事前準備-インストーラのダウンロード&#34;&gt;【事前準備】インストーラのダウンロード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/download/&#34; title=&#34;GnuPG - Download&#34;&gt;ダウンロードページ&lt;/a&gt; の “GnuPG binary releases” にある Windows 用のバイナリへのリンクから “current GnuPG” をダウンロードする（2017年11月20日時点で v2.2.3 が最新）。
必ずインストーラ本体と署名ファイルをセットでダウンロードすること。&lt;/p&gt;

&lt;p&gt;前バージョンの &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を持っている場合はインストーラの署名検証を行い，正しいファイルであることを確認すること。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --verify  gnupg-w32-2.2.3_20171120.exe.sig
gpg: 署名されたデータが&amp;#39;gnupg-w32-2.2.3_20171120.exe&amp;#39;にあると想定します
gpg: 11/20/17 21:25:34 東京 (標準時)に施された署名
gpg:                RSA鍵D8692123C4065DEA5E0F3AB5249B39D24F25E3B6を使用
gpg: &amp;#34;Werner Koch (dist sig)&amp;#34;からの正しい署名 [充分]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;署名検証用の公開鍵は以下にある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gnupg.org/signature_key.html&#34;&gt;Signature Key&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;公開鍵は鍵サーバから取得することもできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --keyserver keys.gnupg.net --recv-keys 0x4F25E3B6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;classic-version-削除のススメ&#34;&gt;Classic Version 削除のススメ&lt;/h3&gt;

&lt;p&gt;現行バージョンのファイル構成は classic version と互換性がない。
Windows で現行バージョンを利用するのなら classic version は削除するのがお勧めである。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Classic version の鍵束（keyring; &lt;code&gt;pubring.gpg&lt;/code&gt;, &lt;code&gt;secring.gpg&lt;/code&gt;, &lt;code&gt;trustdb.gpg&lt;/code&gt;）は別の場所に退避させておき，現行バージョンのインストール後にインポートする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:imp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:imp&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。インポートの方法は後述する&lt;/li&gt;
&lt;li&gt;Classic version  アンインストール後に環境変数 &lt;code&gt;PATH&lt;/code&gt; に &lt;code&gt;gpg.exe&lt;/code&gt; へのパスが残っている場合は念のためこれも削除しておく。環境変数の変更方法がわからない方は無理に削除しなくてもいい&lt;/li&gt;
&lt;li&gt;Classic version  アンインストール後にレジストリ &lt;code&gt;HKEY_CURRENT_USER\Software\GNU\GnuPG&lt;/code&gt; が残っている場合は，これも削除してしまうのがよいだろう。ただしレジストリ操作に自信のない人はこれも無理に触らなくてよい&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;なお &lt;code&gt;trustdb.gpg&lt;/code&gt; は以下のコマンドでテキストファイルにエクスポートしておくとよい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:t&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:t&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --export-ownertrust &amp;gt; trust.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;インストーラの実行&#34;&gt;インストーラの実行&lt;/h2&gt;

&lt;p&gt;準備ができたところでインストールを始めよう。
ダウンロードしたインストーラを起動する（スクリーンショットが古いがご容赦）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24974542243/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1502/24974542243_4e83a1d7b1.jpg&#34; srcset=&#34;https://farm2.staticflickr.com/1502/24974542243_4e83a1d7b1.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing GnuPG for Windows (1)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24974542243/&#34;&gt;Installing GnuPG for Windows (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;英語だけど無問題。
ほとんど選択肢はないので &lt;code&gt;[Next]&lt;/code&gt; ボタンで先に進めていけばいい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25482633892/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1545/25482633892_d9dc023e1a.jpg&#34; srcset=&#34;https://farm2.staticflickr.com/1545/25482633892_d9dc023e1a.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing GnuPG for Windows (2)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25482633892/&#34;&gt;Installing GnuPG for Windows (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24974542073/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1695/24974542073_20408e1079.jpg&#34; srcset=&#34;https://farm2.staticflickr.com/1695/24974542073_20408e1079.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing GnuPG for Windows (3)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24974542073/&#34;&gt;Installing GnuPG for Windows (3)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25305629970/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1472/25305629970_6f5dcb4ef0.jpg&#34; srcset=&#34;https://farm2.staticflickr.com/1472/25305629970_6f5dcb4ef0.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing GnuPG for Windows (4)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25305629970/&#34;&gt;Installing GnuPG for Windows (4)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;インストール先のフォルダを変えたい場合はここで変更する。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25601226555/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1449/25601226555_b07b73e7fa.jpg&#34; srcset=&#34;https://farm2.staticflickr.com/1449/25601226555_b07b73e7fa.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing GnuPG for Windows (5)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25601226555/&#34;&gt;Installing GnuPG for Windows (5)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25575126816/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1633/25575126816_f090b537bf.jpg&#34; srcset=&#34;https://farm2.staticflickr.com/1633/25575126816_f090b537bf.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing GnuPG for Windows (6)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25575126816/&#34;&gt;Installing GnuPG for Windows (6)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24970753344/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1587/24970753344_5da4faf427.jpg&#34; srcset=&#34;https://farm2.staticflickr.com/1587/24970753344_5da4faf427.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing GnuPG for Windows (7)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24970753344/&#34;&gt;Installing GnuPG for Windows (7)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;[Finish]&lt;/code&gt; ボタンを押してインストール完了。&lt;/p&gt;

&lt;p&gt;この時点で &lt;code&gt;PATH&lt;/code&gt; も通っているため，コマンドプロンプトから&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.2.3
libgcrypt 1.8.1
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: C:/Users/username/AppData/Roaming/gnupg
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と入力すればバージョン情報が表示される。&lt;/p&gt;

&lt;h3 id=&#34;ホームディレクトリの変更-必要に応じて&#34;&gt;ホームディレクトリの変更（必要に応じて）&lt;/h3&gt;

&lt;p&gt;インストール直後は &lt;code&gt;%APPDATA%\gnupg&lt;/code&gt; が &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; のホームディレクトリになっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gh&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:gh&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。
通常はこれで問題ないが，他のフォルダに変更したい場合は環境変数 &lt;code&gt;GNUPGHOME&lt;/code&gt; でフォルダを指定する。
また &lt;code&gt;gpg.exe&lt;/code&gt; 起動時に &lt;code&gt;--homedir&lt;/code&gt; オプションでホームディレクトリを直接指定することもできる（&lt;code&gt;--homedir&lt;/code&gt; オプションが優先）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version --homedir C:\usr\home
gpg (GnuPG) 2.2.3
libgcrypt 1.8.1
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: C:/usr/home
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インストール直後のホームディレクトリはまだ空である。&lt;/p&gt;

&lt;h3 id=&#34;classic-version-の鍵束のインポート-移行時のみ&#34;&gt;Classic Version の鍵束のインポート（移行時のみ）&lt;/h3&gt;

&lt;p&gt;Classic version からアップグレードした人は旧鍵束（&lt;code&gt;pubring.gpg&lt;/code&gt;, &lt;code&gt;secring.gpg&lt;/code&gt;, &lt;code&gt;trustdb.gpg&lt;/code&gt; → &lt;code&gt;trust.txt&lt;/code&gt;）をあらかじめ退避していると思うが，これを現行バージョンへインポートする。
手順は以下のとおり。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --import-options import-local-sigs --import pubring.gpg
$ gpg --import secring.gpg
$ gpg --import-ownertrust trust.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;秘密鍵（&lt;code&gt;secring.gpg&lt;/code&gt;）のインポートでは鍵の数だけパスフレーズの入力をを要求される。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25316582890/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1507/25316582890_9ff8c3d2ea_o.png&#34; srcset=&#34;https://farm2.staticflickr.com/1507/25316582890_9ff8c3d2ea_o.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;GnuPG pinentry&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25316582890/&#34;&gt;GnuPG pinentry&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;このプロンプト画面（Pinentry）については&lt;a href=&#34;http://text.baldanders.info/openpgp/using-gnupg-for-windows-2/&#34; title=&#34;GnuPG for Windows : gpg-agent について&#34;&gt;次回&lt;/a&gt;に &lt;code&gt;gpg-agent&lt;/code&gt; の話と絡めて説明する。&lt;/p&gt;

&lt;p&gt;上手くインポートできていれば以下のように鍵を表示することができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --list-keys 0x4F25E3B6
pub   rsa2048 2011-01-12 [SC] [有効期限: 2019-12-31]
      D8692123C4065DEA5E0F3AB5249B39D24F25E3B6
uid           [  充分  ] Werner Koch (dist sig)
sub   rsa2048 2011-01-12 [A] [有効期限: 2019-12-31]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インポートにより &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; のホームディレクトリには以下のフォルダ・ファイルができているはずである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pubring.kbx&lt;/code&gt; ファイル&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:kbx&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:kbx&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trustdb.gpg&lt;/code&gt; ファイル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gpg-v21-migrated&lt;/code&gt; ファイル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private-keys-v1.d&lt;/code&gt; フォルダ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;private-keys-v1.d&lt;/code&gt; フォルダにはインポートした秘密鍵の数だけファイルが作成されている。
&lt;code&gt;gpg-v21-migrated&lt;/code&gt; ファイルは鍵束が現行バージョンへ移行したことを示すフラグである。&lt;/p&gt;

&lt;h2 id=&#34;参考になる-かもしれない-web-ページ&#34;&gt;参考になる（かもしれない） Web ページ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/openpgp/bookmark/&#34;&gt;ブックマークはこちら&lt;/a&gt;に移動した。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4900900028/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/5132396FFQL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4900900028/baldandersinf-22/&#34;&gt;PGP―暗号メールと電子署名&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;シムソン ガーフィンケル Simson Garfinkel &lt;/dd&gt;&lt;dd&gt;オライリー・ジャパン 1996-04&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;3&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4756136494/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4756136494.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング作法&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320026926/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4320026926.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング言語C 第2版 ANSI規格準拠&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797350997/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797350997.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新版暗号技術入門 秘密の国のアリス&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798132608/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798132608.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報処理教科書 高度試験午後II論述 春期・秋期 (EXAMPRESS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798105538.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;エンタープライズ アプリケーションアーキテクチャパターン (Object Oriented Selection)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;良書なのだが，残念ながら内容が古すぎた。 PGP の歴史資料として読むならいいかもしれない。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-10-16&#34;&gt;2014/10/16&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1991&#34;&gt;当時の PGP の仕様は（公開年にちなんでか） &lt;a href=&#34;http://tools.ietf.org/html/rfc1991&#34; title=&#34;RFC 1991 - PGP Message Exchange Formats&#34;&gt;RFC 1991&lt;/a&gt; として公開されている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1991&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:pgp&#34;&gt;もともと &lt;a href=&#34;https://www.philzimmermann.com/&#34; title=&#34;Phil Zimmermann&#39;s Home Page&#34;&gt;Phil Zimmermann&lt;/a&gt; さんは PGP をシェアウェアとして売り出すつもりだったらしい。しかし米国内で事実上暗号を禁止する法案が提出され，法案の可決を阻止する目的もあり PGP をフリーで公開した。ところが &lt;a href=&#34;https://www.philzimmermann.com/&#34; title=&#34;Phil Zimmermann&#39;s Home Page&#34;&gt;Phil Zimmermann&lt;/a&gt; さんが暗号に関する特許について迂闊だったことや PGP が ftp サーバを通じて海外に漏洩してしまった（当時は暗号製品には輸出規制があり強い暗号製品は米国外に持ち出せなかった）ことなどもあって，しばらくの間 &lt;a href=&#34;https://www.philzimmermann.com/&#34; title=&#34;Phil Zimmermann&#39;s Home Page&#34;&gt;Phil Zimmermann&lt;/a&gt; さんと PGP は不遇の身の上となる。当時の輸入規制に「書籍」は含まれていなかったため，最新版の PGP コードを書籍として出版し海外でコンパイルする国際化プロジェクトがあった。何もかも懐かしい（笑） ちなみに現在の PGP は無料ではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:pgp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:op&#34;&gt;現在は &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;RFC 4880&lt;/a&gt; にアップデートされ，更に改良が進められている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:op&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gpl&#34;&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の著作権は &lt;a href=&#34;http://www.fsf.org/&#34; title=&#34;Front Page — Free Software Foundation — working together for free software&#34;&gt;FSF&lt;/a&gt; に帰属し &lt;a href=&#34;http://www.gnu.org/licenses/licenses.html#GPL&#34; title=&#34;The GNU General Public License&#34;&gt;GNU GPL&lt;/a&gt; でライセンスされている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gpl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:imp&#34;&gt;実は classic version の鍵束をそのまま使っても自動的にファイルが移行されるため大抵は問題ないのだが，旧鍵束にはバグが混入しているそうで，安全のため明示的にインポート作業を行うほうがいいらしい。なお現行バージョンの &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; は，移行時以外は classic version の &lt;code&gt;secring.gpg&lt;/code&gt; を参照しないため，Classic version と混在させるのであれば取り扱いに注意が必要である。（&lt;code&gt;gpg-v21-migrated&lt;/code&gt; ファイルを削除すると再度移行処理が走るらしい）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:imp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:t&#34;&gt;&lt;code&gt;trustdb.gpg&lt;/code&gt; ファイルはそのまま使うのではなく， &lt;code&gt;--export-ownertrust&lt;/code&gt; オプションでテキストファイルにエクスポートしたものを使うのが安全なようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:t&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gh&#34;&gt;環境変数 &lt;code&gt;APPDATA&lt;/code&gt; には通常 &lt;code&gt;C:\Users\username\AppData\Roaming&lt;/code&gt; （&lt;code&gt;username&lt;/code&gt; はログインユーザの名前）がセットされている。ちなみに UNIX 系のプラットフォームでは &lt;code&gt;~/.gnupg&lt;/code&gt; が &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 既定のホームディレクトリだが Windows は構成が異なるためこのようになっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gh&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:kbx&#34;&gt;kbx は keybox の略らしい。 バージョン 2 以降では OpenPGP の鍵束だけでなく S/MIME （X.509）や OpenSSH の鍵も格納できる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:kbx&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
