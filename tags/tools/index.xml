<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Tools - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/tools/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/tools/index.xml" />
	<id>tag:text.Baldanders.info,2015-11-14:/</id>
	<updated>2015-11-14T06:25:40+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>ルークよ， Signal を使え！ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/use-the-signal-luke/" />
		<id>tag:text.Baldanders.info,2015-11-14:/remark/2015/use-the-signal-luke/</id>
		<published>2015-11-14T06:25:40+09:00</published>
		<updated>2015-11-14T06:25:40+09:00</updated>
		<summary>TextSecure は Signal に統合された。Signal は SMS を置き換えることができ，ローカルストレージにあるログもちゃんと暗号化される。オススメである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;「&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20151112/jonnycantencrypt&#34;&gt;なぜジョニーは今もやっぱり暗号化できないのか：現在のPGPクライアントの使いやすさ評価 - YAMDAS現更新履歴&lt;/a&gt;」経由。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://arxiv.org/pdf/1510.08555.pdf&#34;&gt;Why Johnny Still, Still Can’t Encrypt: Evaluating the Usability of a Modern PGP Client&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boingboing.net/2015/11/06/why-do-encryption-tools-suck.html&#34;&gt;Why do encryption tools suck? / Boing Boing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;タイトルだけ見て最初に思ったのは「PGP ってゆーな&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6649b65a6ffc9428af54253099b2dda3:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6649b65a6ffc9428af54253099b2dda3:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」だったが，それはともかく&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;In our study of 20 participants, grouped into 10 pairs of participants who attempted to exchange encrypted email, only one pair was able to successfully complete the assigned tasks using Mailvelope. All other participants were unable to complete the assigned task in the one hour allotted to the study.
This demonstrates that encrypting email with PGP, as implemented in Mailvelope, is still unusable for the masses.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://arxiv.org/pdf/1510.08555.pdf&#34;&gt;Why Johnny Still, Still Can’t Encrypt: Evaluating the Usability of a Modern PGP Client&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;10% 以下かよ orz&lt;/p&gt;

&lt;p&gt;1990年代からカジュアルに PGP を使ってて，あまつさえ &lt;a href=&#34;http://hp.vector.co.jp/authors/VA023900/gpg-pin/&#34;&gt;Becky! 用のプラグイン&lt;/a&gt;まで自作してしまった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6649b65a6ffc9428af54253099b2dda3:a2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6649b65a6ffc9428af54253099b2dda3:a2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 身としては，かなり衝撃的ではあったが，まぁそんなもんかなぁ。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://www.mailvelope.com/&#34; title=&#34;Mailvelope&#34;&gt;Mailvelope&lt;/a&gt; は Chrome や Firefox の拡張機能として使える MUA（Mail User Agent）で， Gmail などと連携して使える。
&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000782.shtml&#34; title=&#34;安全なメッセージング・アプリとは（追記あり） — Baldanders.info&#34;&gt;以前にも紹介&lt;/a&gt;したが， &lt;a href=&#34;https://www.eff.org/secure-messaging-scorecard&#34;&gt;EFF の Secure Messaging Scorecard&lt;/a&gt; で MUA の中では（PFS の項目を除いて&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6649b65a6ffc9428af54253099b2dda3:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6649b65a6ffc9428af54253099b2dda3:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;）唯一満点だった製品である。
&lt;a href=&#34;https://www.mailvelope.com/&#34; title=&#34;Mailvelope&#34;&gt;Mailvelope&lt;/a&gt; は &lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 実装を含んでいるため &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; や &lt;a href=&#34;https://www.symantec.com/encryption/&#34; title=&#34;PGP Encryption Software | Symantec&#34;&gt;PGP&lt;/a&gt; のような製品を必要としない利点がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://security.hondaclinic.jp/%E6%9A%97%E5%8F%B7%E3%81%AE%E3%81%99%E3%81%99%E3%82%81/mailvelope%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/&#34;&gt;mailvelopeの使い方 | セキュリティの意識と知識&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この論文については Bruce Schneier さんも言及している。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;I have recently come to the conclusion that e-mail is fundamentally unsecurable. The things we want out of e-mail, and an e-mail system, are not readily compatible with encryption. I advise people who want communications security to not use e-mail, but instead use an encrypted message client like &lt;a href=&#34;https://otr.cypherpunks.ca/&#34;&gt;OTR&lt;/a&gt; or &lt;a href=&#34;https://whispersystems.org/&#34;&gt;Signal&lt;/a&gt;.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2015/11/testing_the_usa.html&#34;&gt;Testing the Usability of PGP Encryption Tools - Schneier on Security&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;正論ですね。
そういうことです。&lt;/p&gt;

&lt;p&gt;そういえば， &lt;a href=&#34;https://whispersystems.org/&#34;&gt;Open Whisper Systems&lt;/a&gt; の TextSecure は Signal に統合された。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://whispersystems.org/blog/just-signal/&#34;&gt;Open Whisper Systems &amp;gt;&amp;gt; Blog &amp;gt;&amp;gt; Just Signal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.thoughtcrime.securesms&#34;&gt;Signal Private Messenger - Google Play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;暗号化通話アプリの RedPhone も Signal に統合された。
Signal は SMS を置き換えることができ，ローカルストレージにあるログもちゃんと暗号化される。
オススメである。&lt;/p&gt;

&lt;p&gt;いや，もう，マジ LINE とか捨てて欲しい。
Facebook もくだらない「&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/13/news077.html&#34;&gt;セキュリティ劇場&lt;/a&gt;」で遊んでないで， OTR くらい組み込めや。&lt;/p&gt;

&lt;p&gt;メッセージングの主体が PC からスマホなどの携帯端末にシフトしている状態で電子メールの有効性は下がってきていると思う。
もちろん仕事などではまだまだ PC や Workstation を使うことも多いし，対外的には電子メールが主体になると思うけど，たとえばグループウェアに XMPP＋OTR を組み込んでいくなら，やはり電子メールは無用の長物になっていくだろう。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;375&#34; src=&#34;https://www.youtube-nocookie.com/embed/o2we_B6hDrY&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;/figure&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;第3版出た！ てか，もう Kindle 版出てるのか。紙の本買うのはやまったかなぁ。 SHA-3 や BitCoin/BlockChain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6649b65a6ffc9428af54253099b2dda3:a&#34;&gt;昔はともかく，現在 &lt;a href=&#34;https://www.symantec.com/encryption/&#34; title=&#34;PGP Encryption Software | Symantec&#34;&gt;PGP&lt;/a&gt; は Symantic 社の製品名であり，いくつかある &lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 実装のひとつにすぎない。余談だが，確かに &lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 用の「公開鍵サーバ」というのは存在しているが， &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; も &lt;a href=&#34;https://www.symantec.com/encryption/&#34; title=&#34;PGP Encryption Software | Symantec&#34;&gt;PGP&lt;/a&gt; も，今回紹介する &lt;a href=&#34;https://www.mailvelope.com/&#34; title=&#34;Mailvelope&#34;&gt;Mailvelope&lt;/a&gt; も別にクライアントというわけではなく，スタンドアロンで動作するプログラムである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6649b65a6ffc9428af54253099b2dda3:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6649b65a6ffc9428af54253099b2dda3:a2&#34;&gt;現在，このプラグインはメンテナンスされてない。使わないように。 Windows パソコンでメールの暗号化がしたいなら &lt;a href=&#34;https://www.mozilla.org/thunderbird/&#34;&gt;Thunderbird&lt;/a&gt;＋&lt;a href=&#34;https://addons.mozilla.org/thunderbird/addon/enigmail/&#34;&gt;Enigmail&lt;/a&gt; がオススメである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6649b65a6ffc9428af54253099b2dda3:a2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6649b65a6ffc9428af54253099b2dda3:b&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000782.shtml&#34; title=&#34;安全なメッセージング・アプリとは（追記あり） — Baldanders.info&#34;&gt;前にも書いた&lt;/a&gt;が， MUA はその性質上 PFS（Perfect Forward Secrecy）を満たせない。 PFS は通信経路の暗号化や IM（Instant Messaging）など使い捨てのメッセージを扱う場合には必要な要件だが，電子メールには向いていない。電子メールは過去のやり取りに対して「否認防止（non-repudiation）」できなければならないからだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6649b65a6ffc9428af54253099b2dda3:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM Editor で現在日時を挿入する - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/" />
		<id>tag:text.Baldanders.info,2015-11-13:/remark/2015/insert-datetime-in-atom-editor/</id>
		<published>2015-11-13T21:43:11+09:00</published>
		<updated>2015-11-14T06:25:40+09:00</updated>
		<summary>よろしい，ならば自作しよう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/toruot/items/b26fde1a898bb52985e1&#34;&gt;Atomに現在日時を挿入するコマンドを追加する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上の記事で， &lt;a href=&#34;https://atom.io/packages/date&#34;&gt;date&lt;/a&gt; パッケージなるものがあるというので早速試してみるが，フォーマットの指定の仕方が分からない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bcl.sci.yamaguchi-u.ac.jp/~jun/ja/blog/150221-insert_date_keymap_to_atom&#34;&gt;日付を挿入するキーマップをAtomに追加 | Jun Nishii&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事を見ると，変な場所を触らないといけないらしい。&lt;/p&gt;

&lt;p&gt;よろしい，ならば&lt;del&gt;戦争だ&lt;/del&gt;自作しよう。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/toruot/items/b26fde1a898bb52985e1&#34;&gt;Atomに現在日時を挿入するコマンドを追加する&lt;/a&gt;」を参考に（というかほとんどコピペでw）， Init Script (&lt;code&gt;init.coffee&lt;/code&gt;) に以下の記述を追加した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;# 現在日時を挿入するコマンドを追加
# refs https://github.com/dannyfritz/atom-date
# refs https://github.com/JerrySievert/date-utils
# refs http://qiita.com/toruot/items/b26fde1a898bb52985e1
daysAbbr = [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;]
#daysKanji = [&#39;日&#39;, &#39;月&#39;, &#39;火&#39;, &#39;水&#39;, &#39;木&#39;, &#39;金&#39;, &#39;土&#39;]

paddingZero = (str, length) -&amp;gt;
  str = String(str)
  str = &#39;0&#39; + str  while(str.length &amp;lt; length)
  str

timezone = (offset) -&amp;gt;
  if offset == 0
    &#39;Z&#39;
  else if offset &amp;lt; 0
    &#39;+&#39; + paddingZero(-offset / 60, 2) + &#39;:00&#39; # 今のところ分単位の時差はないので計算を端折る
  else
    &#39;-&#39; + paddingZero(offset / 60, 2) + &#39;:00&#39; # 今のところ分単位の時差はないので計算を端折る

dateOrTime = (kind) -&amp;gt;
  now = new Date()
  yyyy = now.getYear() + 1900
  mm = paddingZero(now.getMonth() + 1, 2)
  dd = paddingZero(now.getDate(), 2)
  ddd = daysAbbr[now.getDay()]
  #ddd = daysKanji[now.getDay()]
  hh24 = paddingZero(now.getHours(), 2)
  mi = paddingZero(now.getMinutes(), 2)
  ss = paddingZero(now.getSeconds(), 2)
  tz = timezone(now.getTimezoneOffset())
  if kind == 1
    &amp;quot;#{yyyy}/#{mm}/#{dd} (#{ddd})&amp;quot;
  else if kind == 2
    &amp;quot;#{hh24}:#{mi}:#{ss}&amp;quot;
  else if kind == 3
    &amp;quot;#{yyyy}/#{mm}/#{dd} (#{ddd}) #{hh24}:#{mi}:#{ss}&amp;quot;
  else
    &amp;quot;#{yyyy}-#{mm}-#{dd}T#{hh24}:#{mi}:#{ss}#{tz}&amp;quot;

insertText = (str) -&amp;gt;
  return unless editor = atom.workspace.getActiveTextEditor()
  selection = editor.getLastSelection()
  selection.insertText(str)

atom.commands.add &#39;atom-text-editor&#39;, &#39;my-date:date&#39;, -&amp;gt;
  insertText(dateOrTime(1))
atom.commands.add &#39;atom-text-editor&#39;, &#39;my-date:time&#39;, -&amp;gt;
  insertText(dateOrTime(2))
atom.commands.add &#39;atom-text-editor&#39;, &#39;my-date:datetime&#39;, -&amp;gt;
  insertText(dateOrTime(3))
atom.commands.add &#39;atom-text-editor&#39;, &#39;my-date:rfc3339&#39;, -&amp;gt;
  insertText(dateOrTime(0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;元のコードでは timezone の項目がなかったので追加し，更に &lt;a href=&#34;https://www.ietf.org/rfc/rfc3339.txt&#34;&gt;RFC 3339&lt;/a&gt; のフォーマットを追加した。
そういや JavaScript の &lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset&#34;&gt;&lt;code&gt;Date.getTimezoneOffset()&lt;/code&gt;&lt;/a&gt; って ± が逆になるんだっけ。
忘れてた orz&lt;/p&gt;

&lt;p&gt;なるほど。
自分で（パッケージにするまでもない）簡単なコマンドを作る場合はこうすればいいんだな。
勉強になりました（谷啓風）。
しかし &lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt; は慣れん。
Arrow functions は確かに便利だけど（ES6 に採用されるくらいだし）。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>PuTTY 0.66 リリース（Security Fix） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/putty-0_66-released/" />
		<id>tag:text.Baldanders.info,2015-11-11:/remark/2015/putty-0_66-released/</id>
		<published>2015-11-11T20:28:23+09:00</published>
		<updated>2015-11-14T06:25:40+09:00</updated>
		<summary>0.65 以下の PuTTY を使っている人は必ず 0.66 にアップデートすること。日本語版もリリースされている。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;Windows 用の SSH（Secure SHell） クライアント &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free telnet/ssh client&#34;&gt;PuTTY&lt;/a&gt; 0.66 がリリースされている。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Versions of PuTTY and pterm between 0.54 and 0.65 inclusive have a potentially memory-corrupting integer overflow in the handling of the ECH (erase characters) control sequence in the terminal emulator.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/wishlist/vuln-ech-overflow.html&#34;&gt;PuTTY vulnerability vuln-ech-overflow&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;以前のバージョンには ECH (ERASE CHARACTER) 制御シーケンスにおいてメモリ破壊を伴う整数オーバーフロー（memory-corrupting integer overflow）脆弱性があるそうな。
ECH については以下を参照のこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;#ZgotmplZ&#34;&gt;Standerd ECMA-48: Control Functions for Coded Character Sets&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://linuxjm.osdn.jp/html/LDP_man-pages/man4/console_codes.4.html&#34;&gt;Man page of CONSOLE_CODES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;0.65 以下の &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free telnet/ssh client&#34;&gt;PuTTY&lt;/a&gt; を使っている人は &lt;strong&gt;必ず&lt;/strong&gt; 0.66 にアップデートすること。
なお，以下の日本語版も 0.66 がリリースされている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hp.vector.co.jp/authors/VA024651/PuTTYkj.html&#34; title=&#34;hdk の自作ソフトの紹介 | PuTTYjp&#34;&gt;PuTTYjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ice.hotmint.com/putty/&#34; title=&#34;iceiv+putty&#34;&gt;iceiv+putty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そういや，最近「整数オーバーフロー」な脆弱性報告をよく見かけるな。
Google のこいつとかもそうだっけ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jvndb.jvn.jp/ja/contents/2015/JVNDB-2015-005816.html&#34;&gt;JVNDB-2015-005816 Google Picasa における整数オーバーフローの脆弱性 - JVN iPedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;流行ってるのか？&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>gibo による .gitignore 生成（再掲載） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/gitignore-boilerplates/" />
		<id>tag:text.Baldanders.info,2015-11-07:/remark/2015/gitignore-boilerplates/</id>
		<published>2015-11-07T22:01:10+09:00</published>
		<updated>2015-11-14T06:25:40+09:00</updated>
		<summary>Git の repository を作る際に .gitignore をどうするかは悩みどころだが、 gibo というツールを使えば .gitignore の生成をかなり自動化できるらしい。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;以前 &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/45a4619aafcacc161521&#34;&gt;Qiita で書いた&lt;/a&gt;が，復習を兼ねて再掲載する。&lt;/p&gt;

&lt;p&gt;Git の repository を作る際に &lt;code&gt;.gitignore&lt;/code&gt; をどうするかは悩みどころだが（つか、大概は他の repository からコピってくるのだが）、 &lt;code&gt;gibo&lt;/code&gt; というツールを使えば &lt;code&gt;.gitignore&lt;/code&gt; の生成をかなり自動化できるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/simonwhitaker/gibo&#34;&gt;simonwhitaker/gibo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;導入方法は &lt;code&gt;README.md&lt;/code&gt; に書かれているが，実体はスクリプトのみなので，面倒くさいならプラットフォームごとにスクリプト・ファイル（Windows なら &lt;code&gt;gibo.bat&lt;/code&gt;）を取ってきてパスの通っているフォルダに放り込めばよい。
処理自体は簡単で， &lt;a href=&#34;https://github.com/github/gitignore&#34; title=&#34;github/gitignore&#34;&gt;github/gitignore&lt;/a&gt; で公開されているテンプレートを取ってきて単純に連結しているだけである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:32a1cbcb62001915d1d530155d7e0ff8:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:32a1cbcb62001915d1d530155d7e0ff8:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;以下は Windows での操作手順。
まずは動作確認と初期化から。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;gibo -v
gibo 1.0.4 by Simon Whitaker &amp;lt;sw@netcetera.org&amp;gt;
https://github.com/simonwhitaker/gitignore-boilerplates

C:&amp;gt;gibo -u
Cloning https://github.com/github/gitignore.git to C:\Users\username\AppData\Roaming\.gitignore-boilerplates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;C:\Users\username\AppData\Roaming\.gitignore-boilerplates&lt;/code&gt; に &lt;a href=&#34;https://github.com/github/gitignore&#34; title=&#34;github/gitignore&#34;&gt;github/gitignore&lt;/a&gt; の内容がセットされる。&lt;/p&gt;

&lt;p&gt;使用するにはコマンドラインに言語名やフレームワーク名を並べればよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;gibo java eclipse
### java

*.class

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*


### eclipse

*.pydevproject
.metadata
.gradle
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath

# Eclipse Core
.project

# External tool builders
.externalToolBuilders/

# Locally stored &amp;quot;Eclipse launch configurations&amp;quot;
*.launch

# CDT-specific
.cproject

# JDT-specific (Eclipse Java Development Tools)
.classpath

# Java annotation processor (APT)
.factorypath

# PDT-specific
.buildpath

# sbteclipse plugin
.target

# TeXlipse plugin
.texlipse

# STS (Spring Tool Suite)
.springBeans
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力は標準出力なので &lt;code&gt;.gitignore&lt;/code&gt; にリダイレクトしてあげればよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;gibo java eclipse &amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;既に &lt;code&gt;.gitignore&lt;/code&gt; があるのなら追記で OK。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;gibo windows &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;対応している言語等が知りたければ &lt;code&gt;-l&lt;/code&gt; オプションを付けて起動すると一覧が表示される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;gibo -l
=== Languages ===

Actionscript
Ada
Agda
Android
AppceleratorTitanium
AppEngine
ArchLinuxPackages
Autotools
C
C++
CakePHP
CFWheels
ChefCookbook
Clojure
CMake
CodeIgniter
CommonLisp
Composer
Concrete5
Coq
CraftCMS
CUDA
D
Dart
Delphi
DM
Drupal
Eagle
Elisp
Elixir
Elm
EPiServer
Erlang
ExpressionEngine
ExtJs
Fancy
Finale
ForceDotCom
Fortran
FuelPHP
Gcov
GitBook
Go
Gradle
Grails
GWT
Haskell
Idris
IGORPro
Java
Jboss
Jekyll
Joomla
KiCAD
Kohana
LabVIEW
Laravel
Leiningen
LemonStand
Lilypond
Lithium
Lua
Magento
Maven
Mercury
MetaProgrammingSystem
Nanoc
Nim
Node
Objective-C
OCaml
Opa
OpenCart
OracleForms
Packer
Perl
Phalcon
PlayFramework
Plone
Prestashop
Processing
Python
Qooxdoo
Qt
R
Rails
RhodesRhomobile
ROS
Ruby
Rust
Sass
Scala
SCons
Scrivener
Sdcc
SeamGen
SketchUp
Stella
SugarCRM
Swift
Symfony
SymphonyCMS
TeX
Textpattern
TurboGears2
Typo3
Umbraco
Unity
UnrealEngine
VisualStudio
VVVV
Waf
WordPress
Xojo
Yeoman
Yii
ZendFramework
Zephir

=== Global ===

Anjuta
Archives
BricxCC
Cloud9
CodeKit
CVS
DartEditor
Dreamweaver
Eclipse
EiffelStudio
Emacs
Ensime
Espresso
FlexBuilder
GPG
IPythonNotebook
JDeveloper
JetBrains
Kate
KDevelop4
Lazarus
LibreOffice
Linux
LyX
Matlab
Mercurial
MicrosoftOffice
ModelSim
Momentics
MonoDevelop
NetBeans
Ninja
NotepadPP
OSX
Otto
Redcar
Redis
SBT
SlickEdit
SublimeText
SVN
SynopsysVCS
Tags
TextMate
TortoiseGit
Vagrant
Vim
VirtualEnv
VisualStudioCode
WebMethods
Windows
Xcode
XilinxISE
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:32a1cbcb62001915d1d530155d7e0ff8:a&#34;&gt;とはいえ自分で処理を書くのは微妙に面倒くさいからね。このツールを作った方には感謝である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:32a1cbcb62001915d1d530155d7e0ff8:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>NYAGOS で Lua - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/nyagos-and-lua/" />
		<id>tag:text.Baldanders.info,2015-11-02:/remark/2015/nyagos-and-lua/</id>
		<published>2015-11-02T21:41:54+09:00</published>
		<updated>2015-11-11T20:19:05+09:00</updated>
		<summary>前回，ConEmu とともに NYAGOS を導入したけど，今回は NYAGOS のセッティングを中心に。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/conemu-and-nyagos/&#34;&gt;前回&lt;/a&gt;， &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; とともに &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; を導入したけど，今回は &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; のセッティングを中心に。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; の特徴のひとつに， &lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; のエンジンを内蔵し解釈できる点がある。
というか &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; 自身が機能拡張を &lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; で実装していて，ユーザも hackable に &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; をカスタマイズできる。&lt;/p&gt;

&lt;p&gt;また &lt;code&gt;nyagos.exe&lt;/code&gt; を &lt;code&gt;-f&lt;/code&gt; オプションを付けて起動すると &lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; のソースファイルをスクリプトとして実行できる。
たとえば以下のコード &lt;code&gt;hello.lua&lt;/code&gt; を以下のように記述し&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;print &amp;quot;Hello World!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nyagos.exe&lt;/code&gt; で実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;nyagos.exe -f hello.lua
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;p&gt;これだけだと大したことはないが， &lt;code&gt;nyagos.exe&lt;/code&gt; でスクリプトを実行した場合は &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; の &lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; 拡張が使える。
例えばカレント・フォルダを取得する &lt;code&gt;getwd.lua&lt;/code&gt; を以下のように記述し&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;nyagos.write(nyagos.getwd()..&amp;quot;\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nyagos.exe&lt;/code&gt; で実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\username&amp;gt;nyagos.exe -f getwd.lua
C:\Users\username
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; 拡張については &lt;a href=&#34;https://github.com/zetamatta/nyagos/blob/master/Doc/nyagos_ja.md&#34;&gt;NYAGOS のドキュメント&lt;/a&gt;を参照するとよいだろう。
特筆すべきは &lt;code&gt;alias&lt;/code&gt; 機能で，単純なコマンドの置き換えだけでなく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nyagos.alias.cmdname = function(args) ... end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のような形式で新しい内部コマンドを作成することもできる。&lt;/p&gt;

&lt;p&gt;ところで &lt;code&gt;nyagos.exe&lt;/code&gt; を普通に起動して &lt;code&gt;ls -oF&lt;/code&gt; コマンドでファイルの一覧を表示させてみると，拡張子 &lt;code&gt;.lua&lt;/code&gt; のファイルは実行可能ファイルになっていることが分かる。
ただ，実際に起動しようとすると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~&amp;gt; hello.lua
&#39;lua&#39; is not recognized as an internal or external command,
operable program or batch file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と怒られた。
どうやら &lt;code&gt;lua&lt;/code&gt; コマンドがねーよ，と言っているらしい（確かに &lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; の実行モジュールは入れてないのだが）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; をインストールしたフォルダにある &lt;code&gt;nyagos.d\suffix.lua&lt;/code&gt; ファイルの末尾あたりを見ると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;suffix.pl=&amp;quot;perl&amp;quot;
if nyagos.which(&amp;quot;ipy&amp;quot;) then
  suffix.py=&amp;quot;ipy&amp;quot;
elseif nyagos.which(&amp;quot;py&amp;quot;) then
  suffix.py=&amp;quot;py&amp;quot;
else
  suffix.py=&amp;quot;python&amp;quot;
end
suffix.rb=&amp;quot;ruby&amp;quot;
suffix.lua=&amp;quot;lua&amp;quot;
suffix.awk={&amp;quot;awk&amp;quot;,&amp;quot;-f&amp;quot;}
suffix.js={&amp;quot;cscript&amp;quot;,&amp;quot;//nologo&amp;quot;}
suffix.vbs={&amp;quot;cscript&amp;quot;,&amp;quot;//nologo&amp;quot;}
suffix.ps1={&amp;quot;powershell&amp;quot;,&amp;quot;-file&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていて，拡張子 &lt;code&gt;.lua&lt;/code&gt; のファイルが &lt;code&gt;lua&lt;/code&gt; コマンドに関連付けられているのが分かる。
ってことは，これを &lt;code&gt;nyagos.exe&lt;/code&gt; に書き換えればいいわけだ。
とはいえ &lt;code&gt;nyagos.d\suffix.lua&lt;/code&gt; ファイルを直接いじるわけにはいかないので（バージョンアップのたびに上書きされる）， &lt;code&gt;%HOME%&lt;/code&gt; または &lt;code&gt;%HOMEPATH%&lt;/code&gt; フォルダにある &lt;code&gt;.nyagos&lt;/code&gt; ファイルに以下の記述を追加する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2947fb7ea07389eeb0d261554825324c:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2947fb7ea07389eeb0d261554825324c:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt; suffix.lua={&amp;quot;nyagos.exe&amp;quot;,&amp;quot;-f&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;nyagos.exe&lt;/code&gt; を起動し直して &lt;code&gt;hello.lua&lt;/code&gt; ファイルを実行してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~&amp;gt; hello.lua
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おおっ，うまくいった。
これで &lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; スクリプトを &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; 上でバッチファイルのように扱うことができる。&lt;/p&gt;

&lt;p&gt;さぁて，これでいよいよもって &lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; の勉強をしないといけなくなった。
Pascal 系の構文は目が滑るんだよなぁ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:2947fb7ea07389eeb0d261554825324c&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;h3 id=&#34;nyagos-作者による解説:2947fb7ea07389eeb0d261554825324c&#34;&gt;NYAGOS 作者による解説&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/a49e3a40201511128508&#34;&gt;環境変数PATHが長すぎて、追加したパスが有効にならないぜ！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c4ad3cc55c5afa74da63&#34;&gt;nyagosスクリプト解説 - svn のサブコマンドを勝手に拡張する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/29a85695813926cafd2c&#34;&gt;nyagosスクリプト解説 - ezoe.lua「コマンドではない。」 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/cdff310f53faf3369e48&#34;&gt;nyagosスクリプト解説 - 逆クォートによるコマンド出力展開編(backquote.lua) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c08586c85fa73c182a7a&#34;&gt;nyagosスクリプト解説 - CMD.EXEで化けさせず、nyagosの中だけプロンプトをカラー化 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/89a907f4bd46d1750c31&#34;&gt;nyagosスクリプト解説 - VisualStudio れんけー - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/1fe83f736b0254e02415&#34;&gt;git 付属のPerlやunzipとかを使いたいけどsort,find,lnとかは要らない - Qiita&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2947fb7ea07389eeb0d261554825324c:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2947fb7ea07389eeb0d261554825324c:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lua-の解説:2947fb7ea07389eeb0d261554825324c&#34;&gt;Lua の解説&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yohshiy.blog.fc2.com/blog-entry-291.html&#34;&gt;Lua の Windows へのインストールと使い方 | プログラマーズ雑記帳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://densan-labs.net/tech/lua/index.html&#34;&gt;Luaプログラミング入門 | densan-labs.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ie.u-ryukyu.ac.jp/~e085739/lua.hajime.html&#34;&gt;高速スクリプト言語 Lua を始めよう — WTOPIA v1.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://handasse.blogspot.com/2010/02/lua.html&#34;&gt;良いもの。悪いもの。: Lua基礎文法最速マスター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://noriko3.blog42.fc2.com/blog-entry-128.html&#34;&gt;紀子さん＠へぼぷろぐらまの日常 | Luaで日付時間操作。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://symfoware.blog68.fc2.com/blog-entry-454.html&#34;&gt;Luaでファイルの読み書きを行なう - Symfoware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://torus.jp/memo/x200907/lua-coroutine.rd.html&#34;&gt;Lua のコルーチンの使い方〜基本編〜 : torus solutions!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;その他:2947fb7ea07389eeb0d261554825324c&#34;&gt;その他&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/daxanya1/items/7d4b51bba6c8f3a6016b&#34;&gt;NYAGOSとconemuでキーボード操作の拡張 - Qiita&lt;/a&gt; : &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt;+&lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; で動作を定義， &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; でキーバインドを変更する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:2947fb7ea07389eeb0d261554825324c:a&#34;&gt;&lt;code&gt;suffix&lt;/code&gt; ではなく &lt;code&gt;alias&lt;/code&gt; で &lt;code&gt;lua&lt;/code&gt; コマンドを定義する手もある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2947fb7ea07389eeb0d261554825324c:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2947fb7ea07389eeb0d261554825324c:b&#34;&gt;最近の &lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;Git for Windows&lt;/a&gt; は bash 関連のコマンドを &lt;code&gt;Git\usr\bin&lt;/code&gt; フォルダに集めている。 git コマンドだけが必要なら &lt;code&gt;Git\cmd&lt;/code&gt; フォルダにのみパスを通せばよい。 bash を使う場合は &lt;code&gt;Git\bin&lt;/code&gt; フォルダにある &lt;code&gt;bash.exe&lt;/code&gt; を起動するのが一番安全なようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2947fb7ea07389eeb0d261554825324c:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ようやく ConEmu と NYAGOS を導入した - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/conemu-and-nyagos/" />
		<id>tag:text.Baldanders.info,2015-10-30:/remark/2015/conemu-and-nyagos/</id>
		<published>2015-10-30T00:56:49+09:00</published>
		<updated>2015-11-11T21:35:59+09:00</updated>
		<summary>そんなわけで，えんやらやっと ConEmu を導入することにした。ついでに NYAGOS も入れなおすことに。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;いやぁ， &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; 使い出したらコマンドプロンプトがいくらあっても足りないのさ。
そんなわけで，えんやらやっと &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; を導入することにした。
ついでに &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; も入れなおすことに。&lt;/p&gt;

&lt;h2 id=&#34;nyagos-の導入:ab0c58b1d771644ad2a8c0ace1515d66&#34;&gt;NYAGOS の導入&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34;&gt;NYAOS.ORG - NYAGOS&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zetamatta/nyagos&#34;&gt;zetamatta/nyagos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zetamatta/nyole&#34;&gt;zetamatta/nyole&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前 &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; を導入した時は&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/9c11acf72fa38ef379f8&#34;&gt;どえら苦労した&lt;/a&gt;が&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ab0c58b1d771644ad2a8c0ace1515d66:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ab0c58b1d771644ad2a8c0ace1515d66:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，&lt;a href=&#34;https://github.com/zetamatta/nyagos/releases&#34;&gt;最近のバージョン&lt;/a&gt;は64ビット版のビルド済みのものがある。
ありがたくこのまま使わせて頂く。
&lt;a href=&#34;https://github.com/zetamatta/nyole&#34;&gt;nyole&lt;/a&gt; も同梱されているので無問題。&lt;/p&gt;

&lt;p&gt;zip ファイル内のファイル群をフォルダ構成ごと適当な場所に展開すればよい。
展開できたら動作確認。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\program\nyagos&amp;gt;nyagos.exe
Nihongo Yet Another GOing Shell 4.0.9_10-amd64 Powered by go1.5.1 &amp;amp; Lua 5.3
Copyright (c) 2014,2015 HAYAMA_Kaoru and NYAOS.ORG
C:/program/nyagos&amp;gt;ls
Doc/               lua53.dll          nyagos.lua*        specialfolders.js*
catalog.d/         makeicon.cmd*      nyole.dll
license.txt        nyagos.d/          readme.md
lnk.js*            nyagos.exe*        readme_ja.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ほい，おっけ。&lt;/p&gt;

&lt;h2 id=&#34;conemu-の導入:ab0c58b1d771644ad2a8c0ace1515d66&#34;&gt;ConEmu の導入&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; は Windows 用のターミナルでタブごとに異なる shell を呼び出せるのが特徴。
コマンドプロンプトや上述の &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; はもちろん， &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の bash や &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free telnet/ssh client&#34;&gt;PuTTY&lt;/a&gt; も呼び出せてしまう優れもの&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ab0c58b1d771644ad2a8c0ace1515d66:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ab0c58b1d771644ad2a8c0ace1515d66:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ab0c58b1d771644ad2a8c0ace1515d66:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ab0c58b1d771644ad2a8c0ace1515d66:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://conemu.github.io/&#34;&gt;ConEmu - Handy Windows Terminal&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kenpg.bitbucket.org/blog/201506/07.html&#34;&gt;Windows：コマンドプロンプト代替をConsole2からConEmuに変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.nitoyon.com/ja/blog/2014/03/07/fancy-git-bash/&#34;&gt;ConEmu 突っ込んだら Git for Windows の Git Bash がカッコよくなった - てっく煮ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/1000k/items/4a2f9419b19fdc9ed5f4&#34;&gt;ConEmu + nyagos で Windows ターミナル環境を作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thecrumb.com/2013/03/04/configuring-conemu-and-putty/&#34;&gt;Configuring ConEmu and Putty | theCRUMB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kuroeveryday.blogspot.jp/2015/10/ConEmu-PuTTY.html&#34;&gt;ConEmu + PuTTYでSSHクライアントを快適に使う（Windows版） | Black Everyday Company&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以降，覚え書きで &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; の設定を晒しておく。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22385157049/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/716/22385157049_4c7af6ef0a.jpg&#34; alt=&#34;ConEmu Setting&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22385157049/&#34;&gt;ConEmu Setting&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;フォントは既定のままで問題ない（もちろん好きなフォントに変えてもよい）。
ただし，日本語を使う場合は “Monospace” のチェックは必ず外すこと。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/21949162924/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5792/21949162924_ba2742c857.jpg&#34; alt=&#34;ConEmu Setting&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21949162924/&#34;&gt;ConEmu Setting&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;“Center console in ConEmu workspace” にチェックを入れて数ピクセル程度アキを入れるとウィンドウ境界付近の窮屈感が解消される。
おススメ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22583116011/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/591/22583116011_9e109f185e.jpg&#34; alt=&#34;ConEmu Setting&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22583116011/&#34;&gt;ConEmu Setting&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Windows Explorer の context menu 設定。
上段の “ConEmu Here” を登録（register）すると， context menu を開いたフォルダで &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; を起動してくれる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22583116021/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5630/22583116021_222c1acaee.jpg&#34; alt=&#34;ConEmu Setting&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22583116021/&#34;&gt;ConEmu Setting&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; 起動時の状態。
“Auto save/restore opened tabs” を選択すると，タブの状態を保持してくれる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22575095305/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/644/22575095305_4d0c7752e6.jpg&#34; alt=&#34;ConEmu Setting&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22575095305/&#34;&gt;ConEmu Setting&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; 起動時の環境設定。
コードページの設定（&lt;code&gt;chcp&lt;/code&gt; コマンド）もここでできるし alias の設定もできたりする。
ただし，環境設定は shell 呼び出し時にも個別にできるので，ここでは &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; 全体の設定に限定すべきだろう。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22388493089/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/698/22388493089_73bb752b56.jpg&#34; alt=&#34;ConEmu Setting&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22388493089/&#34;&gt;ConEmu Setting&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Shell 呼び出しの設定例。
ここでは &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の bash を呼んでいる。
起動時の calling sequence は以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set MSYSTEM=MSYS &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前半で環境変数を設定し，後半で実際に bash を呼び出している。
やぁ，これで mintty を使わなくて済むよ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free telnet/ssh client&#34;&gt;PuTTY&lt;/a&gt; の場合は以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\PATH\TO\PuTTY\putty.exe -load &amp;quot;mysession&amp;quot; -new_console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mysession&lt;/code&gt; には &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free telnet/ssh client&#34;&gt;PuTTY&lt;/a&gt; であらかじめ作成したセッション名をセットする。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; の場合は &lt;code&gt;nyagos.exe&lt;/code&gt; をフルパスで指定すれば OK。&lt;/p&gt;

&lt;p&gt;ところで設定ダイアログの左下に &lt;a href=&#34;https://flattr.com/&#34;&gt;Flattr&lt;/a&gt; ボタンがあるのにお気づきだろうか。
&lt;a href=&#34;https://flattr.com/&#34;&gt;Flattr&lt;/a&gt; アカウントのある人は是非。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ab0c58b1d771644ad2a8c0ace1515d66:a&#34;&gt;まぁこれは &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; を試すきっかけになったので，結果的にはよかったのだが。  &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の記事はそのうちちゃんと書かないといけないなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ab0c58b1d771644ad2a8c0ace1515d66:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ab0c58b1d771644ad2a8c0ace1515d66:b&#34;&gt;&lt;del&gt;ただし &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; から &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free telnet/ssh client&#34;&gt;PuTTY&lt;/a&gt; を呼び出す場合，サーバ側が UTF-8 だと文字化けするっぽい。ググると「&lt;code&gt;chcp 65001&lt;/code&gt; に設定しろ」みたいなことが書いてあるが， &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free telnet/ssh client&#34;&gt;PuTTY&lt;/a&gt; に対しては効いてない感じ。&lt;/del&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ab0c58b1d771644ad2a8c0ace1515d66:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ab0c58b1d771644ad2a8c0ace1515d66:c&#34;&gt;（11月11日追記） 上のを訂正。オリジナルの &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free telnet/ssh client&#34;&gt;PuTTY&lt;/a&gt; じゃなくて，日本語に対応している &lt;a href=&#34;http://hp.vector.co.jp/authors/VA024651/PuTTYkj.html&#34; title=&#34;hdk の自作ソフトの紹介 | PuTTYjp&#34;&gt;PuTTYjp&lt;/a&gt; なら問題なく日本語で表示される。ブラボー！
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ab0c58b1d771644ad2a8c0ace1515d66:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>今日の戯れ言： GitHub-flow を捨てた ATOM Editor - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1024-diary/" />
		<id>tag:text.Baldanders.info,2015-10-24:/remark/2015/1024-diary/</id>
		<published>2015-10-24T01:13:56+09:00</published>
		<updated>2015-11-14T06:25:40+09:00</updated>
		<summary>GitHub-flow を捨てた ATOM Editor / 暗号プロトコルのセキュリティ評価 / VoLTE の脆弱性 / 「おかげさまで半世紀も生きちゃったぜ」記念</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#atom:607609ccb6f4d1c721b237710b517ddf&#34;&gt;GitHub-flow を捨てた ATOM Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cipher:607609ccb6f4d1c721b237710b517ddf&#34;&gt;暗号プロトコルのセキュリティ評価&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#volte:607609ccb6f4d1c721b237710b517ddf&#34;&gt;VoLTE の脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#birth:607609ccb6f4d1c721b237710b517ddf&#34;&gt;「おかげさまで半世紀も生きちゃったぜ」記念&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;atom:607609ccb6f4d1c721b237710b517ddf&#34;&gt;GitHub-flow を捨てた ATOM Editor&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.atom.io/2015/10/21/introducing-the-atom-beta-channel.html&#34;&gt;Introducing the Atom Beta Channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20151022_726976.html&#34;&gt;オープンソースのテキストエディター「Atom」にベータチャンネルが登場 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;これまで「Atom」は“master”ブランチ（ソースコードの大元）を直接リリースする形態がとられていた。この方法はシンプルで、機能の追加や不具合の修正をそのままユーザーの元へ届けることができたため、開発当初はうまくいっていたという。しかし、機能が増えるにつれて修正済みの不具合が再発する“リグレッション”が多くなり、ワークフローに混乱が生じることがたびたび発生するようになったようだ。&lt;br&gt;
そこで、GitHubは“master”ブランチを直接リリースする方法をやめ、「Google Chrome」などでお馴染みの“リリースチャンネル”を設ける方針をとることにした。「Atom」の場合、開発を行う“master”ブランチから切り離されたベータ版と、ベータ版でテストされた新機能や不具合修正を盛り込んだ正式版（stable）の2つのリリースチャンネルが設けられる。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20151022_726976.html&#34;&gt;オープンソースのテキストエディター「Atom」にベータチャンネルが登場&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;まぁ要するに &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; は， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に関してはお家芸の GitHub-flow を捨てて Git-flow に切り替えたということらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scottchacon.com/2011/08/31/github-flow.html&#34;&gt;GitHub Flow – Scott Chacon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;GitHub Flow (Japanese translation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;A successful Git branching model » nvie.com&#34;&gt;A successful Git branching model » nvie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;git-flow cheatsheet&#34;&gt;git-flow cheatsheet&lt;/a&gt; （日本語）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://komaken.me/blog/2013/09/09/git-flow%E3%81%A8github-flow%E3%81%96%E3%81%A3%E3%81%8F%E3%82%8A%E3%81%BE%E3%81%A8%E3%82%81/&#34;&gt;git flowとgithub flowざっくりまとめ | KentaKomai Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どちらがいいのかについては何とも言えないが，複数バージョンを同時に管理していくのであれば Git-flow にせざるを得ないだろう。
個人的には 1.0 系でそれほど不満はないので，敢えてベータ版を使う必要はないかな。&lt;/p&gt;

&lt;h2 id=&#34;cipher:607609ccb6f4d1c721b237710b517ddf&#34;&gt;暗号プロトコルのセキュリティ評価&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nict.go.jp/press/2015/10/20-2.html&#34;&gt;プレスリリース | 暗号プロトコルのセキュリティ評価結果をリスト化・公開 | NICT-情報通信研究機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crypto-protocol.nict.go.jp/&#34;&gt;Cryptographic Protocol Verification Portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/068/1068218/&#34;&gt;ASCII.jp：58個の暗号プロトコルをセキュリティ評価！NICTがリスト公開&lt;/a&gt; : 10月23日現在ダウン中&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:607609ccb6f4d1c721b237710b517ddf:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:607609ccb6f4d1c721b237710b517ddf:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各種の認証および鍵交換プロトコルの評価一覧。
分かりやすくまとめられてるし技術文書へのリンクもあってとても参考になる。
なんで &lt;a href=&#34;http://www.nict.go.jp/&#34; title=&#34;NICT-情報通信研究機構&#34;&gt;NICT&lt;/a&gt; なのかは分からないけど。
&lt;a href=&#34;http://www.nict.go.jp/&#34; title=&#34;NICT-情報通信研究機構&#34;&gt;NICT&lt;/a&gt; の活動って chaotic でイマイチよく分からないんだよなぁ。&lt;/p&gt;

&lt;p&gt;そうそう。
&lt;a href=&#34;http://www.nict.go.jp/&#34; title=&#34;NICT-情報通信研究機構&#34;&gt;NICT&lt;/a&gt; で思い出したけど，また ntpd の脆弱性が見つかったみたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.cisco.com/security/talos/2015-10-ntpd-vulnerabilities&#34;&gt;Cisco Identifies Multiple Vulnerabilities in Network Time Protocol daemon (ntpd)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35072380/&#34;&gt;時刻同期のNTPに複数の脆弱性&amp;ndash;HTTPS接続のバイパスなどを誘発 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;やれやれ。&lt;/p&gt;

&lt;h2 id=&#34;volte:607609ccb6f4d1c721b237710b517ddf&#34;&gt;VoLTE の脆弱性&lt;/h2&gt;

&lt;p&gt;脆弱性といえばもうひとつ。
いや4つ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dl.acm.org/citation.cfm?id=2813718&#34;&gt;Breaking and Fixing VoLTE: Exploiting Hidden Data Channels and Mis-implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kb.cert.org/vuls/id/943167&#34;&gt;Vulnerability Note VU#943167 - Voice over LTE implementations contain multiple vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jvn.jp/vu/JVNVU93463833/index.html&#34;&gt;JVNVU#93463833: Voice over LTE (VoLTE) の実装に複数の脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2015/10/23/085/&#34;&gt;VoLTEの脆弱性、携帯3社は検証の上で「問題なし」 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちうことで日本の3大キャリアでは問題なさそうだ。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;GoogleとしてはIMSベアラに直接触れないようにOSを修繕する必要があるので「対策します」ってことになったのでしょうが、基本的にはシステム全体としてはとっくに対策されてるんですよね。あまり知られていませんがVoLTEも実はモデムチップに依存したシステムで、主要チップ屋の実装として端末への直接攻撃も防がれるようになっているみたいですし。まあ、そういう情報は普通はあまり外に漏れないので（漏れたらそれはそれでセキュリティリスクになるし）、理屈上はこうやったらハックできちゃうぜ、って発表されることは悪いことではないと思うのですが、少なくとも、日本やその他情報通信先進国でまともな装置を使っているような国では、このリスクは問題ないと思っていただいて大丈夫だと思いますよ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wnyan.jp/4204&#34;&gt;ニュースコメント[VoLTEの実装で複数の脆弱性と報告] | 無線にゃん&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;慌てない慌てない。&lt;/p&gt;

&lt;h2 id=&#34;birth:607609ccb6f4d1c721b237710b517ddf&#34;&gt;「おかげさまで半世紀も生きちゃったぜ」記念&lt;/h2&gt;

&lt;p&gt;今月で五十路に突入します。
いやぁ，半世紀も生きちゃったよ。&lt;/p&gt;

&lt;p&gt;半世紀も生きてるのに何かを悟ったとか全然ないし，財や名誉を得たとかも全然ないし，何やってるんだろうね，私は。
50代になったらもっとこうナイスミドル（笑）になってるとかありそうなもんだけど，言動が（歳の割に）幼いのか，いまだに生物年齢相当に見られないのは困ったもんである。&lt;/p&gt;

&lt;p&gt;お祝いを下さった友人方々，本当に有難うございます。
みなさんのおかげで明日からも生きていけると思います。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:607609ccb6f4d1c721b237710b517ddf:a&#34;&gt;&lt;a href=&#34;http://japanese.engadget.com/2015/10/22/ascii-jp-ddos-anonymous-it-ascii-jp/&#34;&gt;イルカ漁への抗議で Anonymous が絶賛攻撃中&lt;/a&gt;らしい。 ASCII.jp 関係ないじゃん。迷惑な話。ちなみにイルカは美味い。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:607609ccb6f4d1c721b237710b517ddf:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>パッケージの依存状況の視覚化 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/package-visualization-tool/" />
		<id>tag:text.Baldanders.info,2015-10-15:/golang/package-visualization-tool/</id>
		<published>2015-10-15T20:32:32+09:00</published>
		<updated>2015-11-14T06:25:40+09:00</updated>
		<summary>今回はちょっと横道にそれて，パッケージの依存状況を視覚化するツールをご紹介。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回はちょっと横道にそれて，パッケージの依存状況を視覚化するツールをご紹介。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hirokidaichi/goviz&#34; title=&#34;hirokidaichi/goviz&#34;&gt;hirokidaichi/goviz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;goviz-のインストール:b1af6a3f08cda062ac6e4b6083ff30fb&#34;&gt;goviz のインストール&lt;/h2&gt;

&lt;p&gt;導入は &lt;code&gt;go get&lt;/code&gt; でOK。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;go get -v github.com/hirokidaichi/goviz
github.com/hirokidaichi/goviz (download)
github.com/jessevdk/go-flags (download)
github.com/hirokidaichi/goviz/dotwriter
github.com/jessevdk/go-flags
github.com/hirokidaichi/goviz/goimport
github.com/hirokidaichi/goviz/metrics
github.com/hirokidaichi/goviz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;パッケージ依存状況の視覚化:b1af6a3f08cda062ac6e4b6083ff30fb&#34;&gt;パッケージ依存状況の視覚化&lt;/h2&gt;

&lt;p&gt;では，早速動かしてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;goviz.exe -i github.com/hirokidaichi/goviz
digraph main{
	edge[arrowhead=vee]
	graph [rankdir=LR,compound=true,ranksep=1.0];
	/* plot github.com/hirokidaichi/goviz */
	&amp;quot;github.com/hirokidaichi/goviz&amp;quot;[shape=&amp;quot;record&amp;quot;,label=&amp;quot;main|github.com/hirokidaichi/goviz|goviz.go&amp;quot;,style=&amp;quot;solid&amp;quot;]
	&amp;quot;github.com/hirokidaichi/goviz&amp;quot; -&amp;gt; &amp;quot;github.com/hirokidaichi/goviz/dotwriter&amp;quot;[dir=forward]
	/* plot github.com/hirokidaichi/goviz/dotwriter */
	&amp;quot;github.com/hirokidaichi/goviz/dotwriter&amp;quot;[shape=&amp;quot;record&amp;quot;,label=&amp;quot;dotwriter|github.com/hirokidaichi/goviz/dotwriter|dotwriter.go&amp;quot;,style=&amp;quot;solid&amp;quot;]
	&amp;quot;github.com/hirokidaichi/goviz&amp;quot; -&amp;gt; &amp;quot;github.com/hirokidaichi/goviz/goimport&amp;quot;[dir=forward]
	/* plot github.com/hirokidaichi/goviz/goimport */
	&amp;quot;github.com/hirokidaichi/goviz/goimport&amp;quot;[shape=&amp;quot;record&amp;quot;,label=&amp;quot;goimport|github.com/hirokidaichi/goviz/goimport|import.go\nimport_factory.go\nsource.go&amp;quot;,style=&amp;quot;solid&amp;quot;]
	&amp;quot;github.com/hirokidaichi/goviz/goimport&amp;quot; -&amp;gt; &amp;quot;github.com/hirokidaichi/goviz/dotwriter&amp;quot;[dir=forward]
	&amp;quot;github.com/hirokidaichi/goviz&amp;quot; -&amp;gt; &amp;quot;github.com/hirokidaichi/goviz/metrics&amp;quot;[dir=forward]
	/* plot github.com/hirokidaichi/goviz/metrics */
	&amp;quot;github.com/hirokidaichi/goviz/metrics&amp;quot;[shape=&amp;quot;record&amp;quot;,label=&amp;quot;metrics|github.com/hirokidaichi/goviz/metrics|metrics.go&amp;quot;,style=&amp;quot;solid&amp;quot;]
	&amp;quot;github.com/hirokidaichi/goviz/metrics&amp;quot; -&amp;gt; &amp;quot;github.com/hirokidaichi/goviz/dotwriter&amp;quot;[dir=forward]
	&amp;quot;github.com/hirokidaichi/goviz&amp;quot; -&amp;gt; &amp;quot;github.com/jessevdk/go-flags&amp;quot;[dir=forward]
	/* plot github.com/jessevdk/go-flags */
	&amp;quot;github.com/jessevdk/go-flags&amp;quot;[shape=&amp;quot;record&amp;quot;,label=&amp;quot;flags|github.com/jessevdk/go-flags|arg.go\nclosest.go\ncommand.go\ncommand_private.go\ncompletion.go\nconvert.go\nerror.go\nflags.go\ngroup.go\ngroup_private.go\nhelp.go\nini.go\nini_private.go\nman.go\nmultitag.go\noption.go\noption_private.go\noptstyle_other.go\noptstyle_windows.go\nparser.go\nparser_private.go\ntermsize.go\ntermsize_linux.go\ntermsize_nosysioctl.go\ntermsize_other.go\ntermsize_unix.go&amp;quot;,style=&amp;quot;solid&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おー。
なんだか凄いコードが出力されました。
じつはこれ &lt;a href=&#34;https://ja.wikipedia.org/wiki/DOT%E8%A8%80%E8%AA%9E&#34;&gt;DOT というデータ記述言語&lt;/a&gt;で書かれたものです。
なので，この出力を &lt;a href=&#34;http://www.graphviz.org/&#34; title=&#34;Graphviz | Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; のツールに通すことで最終的な出力を得ます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;goviz.exe -i github.com/hirokidaichi/goviz | dot.exe -Tpng -o goviz.png
&lt;/code&gt;&lt;/pre&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/21563262573/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5782/21563262573_630b0eed8a.jpg&#34; alt=&#34;output by goviz &amp;#43; graphviz&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21563262573/&#34;&gt;output by goviz &amp;#43; graphviz&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;パッケージ依存度の評価:b1af6a3f08cda062ac6e4b6083ff30fb&#34;&gt;パッケージ依存度の評価&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;-m&lt;/code&gt; オプションを指定するとパッケージ依存度（結合度）の評価ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;goviz.exe -i github.com/hirokidaichi/goviz -m
Inst:1.000 Ca(  0) Ce(  4)      github.com/hirokidaichi/goviz
Inst:0.500 Ca(  1) Ce(  1)      github.com/hirokidaichi/goviz/goimport
Inst:0.500 Ca(  1) Ce(  1)      github.com/hirokidaichi/goviz/metrics
Inst:0.000 Ca(  3) Ce(  0)      github.com/hirokidaichi/goviz/dotwriter
Inst:0.000 Ca(  1) Ce(  0)      github.com/jessevdk/go-flags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Inst&lt;/code&gt; は Instability， &lt;code&gt;Ca&lt;/code&gt; は Afferent Couplings， &lt;code&gt;Ce&lt;/code&gt; は Efferent Couplings かな。&lt;/p&gt;

&lt;p&gt;Afferent Couplings は，そのパッケージに依存しているパッケージがいくつあるか，を示すものです。
Efferent Couplings は，逆にそのパッケージが依存しているパッケージがいくつあるか，を示すものです。
Instability は $Inst = Ce / (Ce + Ca)$ で算出される値で，この値が大きいほど他パッケージへの依存度が高いと評価できます。
共通ライブラリとして運用したいパッケージはなるべく Instability を低く抑えたいところです。
またソースコードを読む場合は Instability の高いパッケージから優先的にみるといいかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;goviz-の起動オプション:b1af6a3f08cda062ac6e4b6083ff30fb&#34;&gt;goviz の起動オプション&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hirokidaichi/goviz&#34; title=&#34;hirokidaichi/goviz&#34;&gt;hirokidaichi/goviz&lt;/a&gt; のオプションは以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;goviz.exe -h
Usage:
  goviz.exe [OPTIONS]

Application Options:
  /i, /input:    intput ploject name
  /o, /output:   output file (default: STDOUT)
  /d, /depth:    max plot depth of the dependency tree (default: 128)
  /f, /focus:    focus on the specific module
  /s, /search:   top directory of searching
  /l, /leaf      whether leaf nodes are plotted (default: false)
  /m, /metrics   display module metrics (default: false)

Help Options:
  /?             Show this help message
  /h, /help      Show this help message
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bookmark:b1af6a3f08cda062ac6e4b6083ff30fb&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hirokidaichi/items/52fc6286c9e432792a07&#34;&gt;そろそろ理解しておきたいのでDockerのソースコードをビジュアルに読む！ - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/hirokidaichi/goviz&#34; title=&#34;hirokidaichi/goviz&#34;&gt;hirokidaichi/goviz&lt;/a&gt; : 作者による解説&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.showa-corp.jp/special/graphtools/graphviz.html&#34;&gt;データのビジュアル化を最少の労力で: Graphviz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>今日の戯れ言：ロボット法学会 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1013-diary/" />
		<id>tag:text.Baldanders.info,2015-10-13:/remark/2015/1013-diary/</id>
		<published>2015-10-13T22:54:48+09:00</published>
		<updated>2015-11-14T06:25:40+09:00</updated>
		<summary>「ロボット法学会」設立準備研究会 / 『パクリ経済――コピーはイノベーションを加速するか(仮)』 / GnuPG 2.1.9 released / wrap-style がなかなかよい</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#law:40845aafa61f9857714e6435e2346641&#34;&gt;「ロボット法学会」設立準備研究会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#copy:40845aafa61f9857714e6435e2346641&#34;&gt;『パクリ経済――コピーはイノベーションを加速するか(仮)』&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gnupg:40845aafa61f9857714e6435e2346641&#34;&gt;GnuPG 2.1.9 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atom:40845aafa61f9857714e6435e2346641&#34;&gt;wrap-style がなかなかよい&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;law:40845aafa61f9857714e6435e2346641&#34;&gt;「ロボット法学会」設立準備研究会&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://robotlaw.jp/&#34;&gt;「ロボット法学会」設立準備研究会 | Robot Law @ Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://peatix.com/event/115206&#34;&gt;「ロボット法学会」設立準備研究会 | Peatix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bengo4.com/internet/n_3805/&#34;&gt;「法律が普及の足かせになってはいけない」ロボット法学会の設立目指し、準備会開催|弁護士ドットコムニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2015/10/46992/&#34;&gt;「ロボットの社会導入に向けて、法律家も技術者もともに議論を」——「ロボット法学会」の設立準備イベント開催 - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://robotlaw.jp/archives/66&#34;&gt;新保史生「何故に『ロボット法』なのか」(2015年10月11日）報告資料 | 「ロボット法学会」設立準備研究会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itresearchart.biz/?p=442&#34;&gt;ロボット法って何 | IT Research Art&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogos.com/article/138762/&#34;&gt;「ロボット法学会設立準備会」に寄せて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初の2つの記事では「ロボット法 新8原則」を紹介している。
曰く&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;人間第一の原則&lt;/li&gt;
&lt;li&gt;命令服従の原則&lt;/li&gt;
&lt;li&gt;秘密保持の原則&lt;/li&gt;
&lt;li&gt;利用制限の原則&lt;/li&gt;
&lt;li&gt;安全保護の原則&lt;/li&gt;
&lt;li&gt;公開・透明性の原則&lt;/li&gt;
&lt;li&gt;個人参加の原則&lt;/li&gt;
&lt;li&gt;責任の原則&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これって既存の「機械」の概念を超えるなと言ってるのと同じだよね。
エンジニア的には面白くはないんだけど，まぁ多分これが大方の人たちの「気分」なんだろう。&lt;/p&gt;

&lt;p&gt;あと&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;人間はロボットよりも肉体能力が高いけれど、知的能力は結構、負け始めている。頭はロボット、体は人間という仕事の体制ができることになる。つまり、トップの人間がロボットに基本的な命令を出し、ロボットがゴーグルを通じて下級の労働者に命令を出して、人間がその通りに仕事をすることになる。言葉もいらず、すごく安く人間を使える。この危険性を指摘している人は少ない&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bengo4.com/internet/n_3805/&#34;&gt;「法律が普及の足かせになってはいけない」ロボット法学会の設立目指し、準備会開催&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるが，現時点において人工知能が「知的」かというと首をひねらざるをえない。
たとえば IBM の Watson は，いわゆる「エキスパート・システム」としては現時点での究極と言えるかもしれないが，「知的」ではない。
Watson は「問いを解く」ことに関して人を凌駕しつつあるかもしれないが，「問いを立てる」ことはできないからだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:40845aafa61f9857714e6435e2346641:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:40845aafa61f9857714e6435e2346641:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;自律的に「問いを立てる」ことができるようにならないかぎり，人工知能は危険でも脅威でもない。
でも，もしそれができるようになれば，まさしく「&lt;a href=&#34;http://text.baldanders.info/remark/2015/0917-diary/#ai:7de7822f81e49845760a41cfe20e81ad&#34;&gt;進化&lt;/a&gt;」だし，そうなれば進化の階梯を機械に譲ることになっても仕方ないだろう。&lt;/p&gt;

&lt;p&gt;もうひとつ考えるべきは「遠隔操作ロボット」である。
これは問題提起としては昨年末に既に出ている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bengo4.com/other/1146/1287/n_2352/&#34;&gt;ロボットを「奴隷的に拘束」したら憲法違反？ 「ロボット法」の可能性を研究者が議論|弁護士ドットコムニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;システムが複雑化すれば，身体的なものであれ，精神的なものであれ，機械と人間との間に軋轢が起きる。
両者の媒として働くと考えられているのも人工知能である。
個人的にはこちらのほうが社会に普及しやすいと考える。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;身体的なものをロボットが模倣する方向で動いていると思うが、はたして身体になりうるのか。たとえば憲法18条では、身体について、奴隷的な拘束は認められていないが、テレイグジスタンスが高度に発達して、ロボットが拘束された場合は身体性を犯されたことになるのかという疑問がある&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bengo4.com/other/1146/1287/n_2352/&#34;&gt;ロボットを「奴隷的に拘束」したら憲法違反？ 「ロボット法」の可能性を研究者が議論&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;また、ロボット法政策研究者でキャンペナーの工藤郁子氏は「製造物責任は『無過失責任』で、ミスがなくても製造者側に責任を負わせるようになっている。しかし、無過失責任を採用する場合、ユーザーにとってメリットはあるが、メーカーにとって重い負担になる」とした上で、「ロボット自体が自分でユーザーとのインタラクションを経て学習すると、もしかしたら技術者が把握している範囲を超えて活動するかもしれない。そのまま製造物責任を導入していいかという問題があるだろう」と語った&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bengo4.com/other/1146/1287/n_2352/&#34;&gt;ロボットを「奴隷的に拘束」したら憲法違反？ 「ロボット法」の可能性を研究者が議論&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これに直接応えるものではないが「&lt;a href=&#34;http://blogos.com/article/138762/&#34;&gt;「ロボット法学会設立準備会」に寄せて&lt;/a&gt;」はなかなか興味深い。
この記事では「4つの NEW」を提示している。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NEW Machine&lt;/li&gt;
&lt;li&gt;NEW Relationship&lt;/li&gt;
&lt;li&gt;NEW Law&lt;/li&gt;
&lt;li&gt;NEW Generation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらを軸に議論していくと面白いのではないかと思う。&lt;/p&gt;

&lt;h2 id=&#34;copy:40845aafa61f9857714e6435e2346641&#34;&gt;『パクリ経済――コピーはイノベーションを加速するか(仮)』&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20151012/pakuri&#34;&gt;この本の帯文は佐野研二郎氏に依頼すればいいのではと思った『パクリ経済――コピーはイノベーションを加速するか(仮)』 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うーん。
3,780円。
392ページ。&lt;/p&gt;

&lt;p&gt;今年は高めの本は（主に経済的な理由で）遠慮してるのだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:40845aafa61f9857714e6435e2346641:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:40845aafa61f9857714e6435e2346641:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，これは読みたいなぁ。
でもこの前，&lt;a href=&#34;http://text.baldanders.info/remark/2015/0920-diary/&#34;&gt;泣く泣く本を処分した&lt;/a&gt;ばっかりだしなぁ。
これ以上魔窟の進行を許すわけには&amp;hellip;&lt;/p&gt;

&lt;p&gt;ちうわけで，とりあえず Kindle リクエストを出してみた。&lt;/p&gt;

&lt;p&gt;ところで，この「（仮）」ってのは正式タイトルなのだろうか。
タイトルの後ろに「（仮）」って付いてると，昔あった某どどエロアニメを連想してしまうんだが（笑）&lt;/p&gt;

&lt;h2 id=&#34;gnupg:40845aafa61f9857714e6435e2346641&#34;&gt;GnuPG 2.1.9 released&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2015q4/000380.html&#34;&gt;GnuPG 2.1.9 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回もセキュリティ脆弱性に絡む修正はなし。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: Allow fetching keys via OpenPGP DANE (&amp;ndash;auto-key-locate).  New option &amp;ndash;print-dane-records.&lt;/li&gt;
&lt;li&gt;gpg: Fix for a problem with PGP-2 keys in a keyring.&lt;/li&gt;
&lt;li&gt;gpg: Fail with an error instead of a warning if a modern cipher algorithm is used without a MDC.&lt;/li&gt;
&lt;li&gt;agent: New option &amp;ndash;pinentry-invisible-char.&lt;/li&gt;
&lt;li&gt;agent: Always do a RSA signature verification after creation.&lt;/li&gt;
&lt;li&gt;agent: Fix a regression in ssh-add-ing Ed25519 keys.&lt;/li&gt;
&lt;li&gt;agent: Fix ssh fingerprint computation for nistp384 and EdDSA.&lt;/li&gt;
&lt;li&gt;agent: Fix crash during passprase entry on some platforms.&lt;/li&gt;
&lt;li&gt;scd: Change timeout to fix problems with some 2.1 cards.&lt;/li&gt;
&lt;li&gt;dirmngr: Displayed name is now Key Acquirer.&lt;/li&gt;
&lt;li&gt;dirmngr: Add option &amp;ndash;keyserver.  Deprecate that option for gpg.  Install a dirmngr.conf file from a skeleton for new installations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;atom:40845aafa61f9857714e6435e2346641&#34;&gt;wrap-style がなかなかよい&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor&lt;/a&gt; は実は日本語混じりのテキストが苦手で，まともに使おうと思ったら相応のパッケージを導入する必要がある。
今までは &lt;a href=&#34;https://atom.io/packages/japanese-wrap&#34; title=&#34;japanese-wrap&#34;&gt;japanese-wrap&lt;/a&gt; を使ってたのだが，同じ作者による &lt;a href=&#34;https://atom.io/packages/wrap-style&#34; title=&#34;wrap-style&#34;&gt;wrap-style&lt;/a&gt; に乗り換えた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/raccy/items/4678af4020189366a297&#34;&gt;Atomで上手にwarpを刻んでくれるwrap-styleを開発しました。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者ご本人は「遅い。遅すぎる」と書かれているが，なかなかどうして。
実用上は問題ない。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:40845aafa61f9857714e6435e2346641:1&#34;&gt;まぁ人間だって自分で「問いを立てる」ことのできる者は少なそうだが。特に日本の学校教育は意図的にそういうことを spoil してるからね。できない者はニコラ・テスラに「君は automaton だ」とか言われそう（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:40845aafa61f9857714e6435e2346641:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:40845aafa61f9857714e6435e2346641:a&#34;&gt;積ん読も溜まりまくってるので消化しないと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:40845aafa61f9857714e6435e2346641:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM Editor に関するメモ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/atom-editor/" />
		<id>tag:text.Baldanders.info,2015-09-15:/remark/2015/atom-editor/</id>
		<published>2015-09-15T21:00:13+09:00</published>
		<updated>2015-11-06T14:30:00+09:00</updated>
		<summary>ATOM Editor に関するメモ。 Windows 環境が前提になっているのであしからず。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;この記事は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor に関する情報を Qiita に投稿した記事から再構成したものである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/3d41d98dacc107d73431&#34;&gt;ATOM Editor をそろそろ始めようか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/a1b4d1ad2a6693ae33e4&#34;&gt;行末の空白は EditorConfig で始末しましょう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/5c6dafcece9e7118877a&#34;&gt;ATOM 1.0 リリースおめでたう記念に最初からインストールし直してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そうそう。
Windows 環境が前提になっているのであしからず。&lt;/p&gt;

&lt;h2 id=&#34;atom-1-0-をインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM 1.0 をインストールする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; サイトからインストールパッケージ &lt;code&gt;AtomSetup.exe&lt;/code&gt; をダウンロードして起動すればよい。
インストールが成功するとインストールフォルダ &lt;code&gt;C:\Users\username\AppData\Local\atom\bin&lt;/code&gt; に PATH が通る。
これでコマンドプロンプトからも &lt;code&gt;atom&lt;/code&gt; および &lt;code&gt;apm&lt;/code&gt; コマンドが使えるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;atom -v
[7696:0915/112859:INFO:CONSOLE(0)] 1.0.11


C:&amp;gt;apm -v
apm  1.0.4
npm  2.13.3
node 0.10.40
python
git 2.5.2.windows.2
visual studio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の環境では Python と Visual Studio は入れてないのでバージョンが入ってないのかな。
たしか node-gyp をビルドするのに（Windows 環境では） Python と Visual Studio が要るんだよね。
ううむ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://create-something.hatenadiary.jp/entry/2014/07/13/021655&#34;&gt;Windowsでnode-gypのビルドを通す - なにか作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;atom-をアンインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM をアンインストールする&lt;/h3&gt;

&lt;p&gt;アンインストール自体はコンパネから「プログラムと機能」を開いて「Atom」をアンインストールする。アンインストールを開始するもほぼ無言で完了。男前（笑）&lt;/p&gt;

&lt;p&gt;ただしユーザのフォルダ内には &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 関連のファイルがかなり残っているので手動で掃除する。対象となるのは以下のフォルダ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\.atom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Local\atom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Local\Temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Roaming\Atom&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;AppData&lt;/code&gt; フォルダは既定では不可視になっているのでご注意を。 &lt;code&gt;C:\Users\username\.atom&lt;/code&gt; フォルダには &lt;code&gt;keymap.cson&lt;/code&gt; などの設定ファイルが入ってるので，バックアップを取っておくと安全。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\Users\username\AppData\Local\Temp&lt;/code&gt; には &lt;code&gt;Atom Crashes&lt;/code&gt; フォルダがある。どうやらクラッシュ・レポートはここに吐かれるらしい。テンポラリ・フォルダにある古い日付のフォルダ・ファイルは，大概は削除して大丈夫なのだが，たまにヤバいやつもあるので掃除は慎重に。&lt;/p&gt;

&lt;h2 id=&#34;apm-stars-でテーマ-パッケージを一気にインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;apm stars でテーマ・パッケージを一気にインストールする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;apm&lt;/code&gt; には star を付けたテーマ・パッケージを一気にインストールするコマンドがある。&lt;/p&gt;

&lt;p&gt;この機能を使うには，まず &lt;code&gt;apm&lt;/code&gt; にアカウントのトークンを登録する必要がある。アカウントのトークンは &lt;a href=&#34;https://atom.io/account&#34;&gt;Account&lt;/a&gt; ページから取得できる。（&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; のアカウントを持っていれば，そのまま &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にも sign in できるのだが，持ってない人はどうするんだろう？）&lt;/p&gt;

&lt;p&gt;取得したトークンを &lt;code&gt;apm login&lt;/code&gt; コマンドで登録すれば OK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;apm login
Welcome to Atom!

Before you can publish packages, you&#39;ll need an API token.

Visit your account page on Atom.io https://atom.io/account,
copy the token and paste it below when prompted.

Press [Enter] to open your account page on Atom.io.
Token&amp;gt; ****************
Saving token to Keychain done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Star を付けたテーマ・パッケージは &lt;code&gt;apm stars&lt;/code&gt; コマンドで見ることができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm stars
Packages starred by you (13)
├── atom-monokai Monokai syntax theme for Atom Dark &amp;amp; Light UI, One Dark &amp;amp; Light, and Seti UI (27359 downloads, 39 stars)
├── autoclose-html Automates closing of HTML Tags (83771 downloads, 296 stars)
├── editorconfig Helps developers maintain consistent coding styles between different editors (55732 downloads, 446 stars)
├── file-icons Assign file extension icons and colours for improved visual grepping (305041 downloads, 1561 stars)
├── git-plus Do git things without the terminal (264729 downloads, 861 stars)
├── highlight-line Highlights the current line in the editor (54346 downloads, 423 stars)
├── japan-util utilities for Japanese (858 downloads, 12 stars)
├── open-recent Open recent files in the current window, and recent folders (optionally) in a new window. (11595 downloads, 142 stars)
├── quick-highlight Highlight text quickly. (943 downloads, 11 stars)
├── show-ideographic-space Show ideographic space (known as 全角スペース) (4255 downloads, 57 stars)
├── symbols-tree-view A symbols view like taglist (19099 downloads, 181 stars)
├── tablr Edit CSV files using a table editor (538 downloads, 16 stars)
└── wrap-style Select word warp style. (10 downloads, 2 stars)

Use `apm stars --install` to install them all or visit http://atom.io/packages to read more about them.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに &lt;code&gt;--install&lt;/code&gt; オプションを付ければ一気にインストールできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm stars --install
Installing atom-monokai to C:\Users\username\.atom\packages done
Installing autoclose-html to C:\Users\username\.atom\packages done
Installing editorconfig to C:\Users\username\.atom\packages done
Installing file-icons to C:\Users\username\.atom\packages done
Installing git-plus to C:\Users\username\.atom\packages done
Installing highlight-line to C:\Users\username\.atom\packages done
Installing japan-util to C:\Users\username\.atom\packages done
Installing open-recent to C:\Users\username\.atom\packages done
Installing quick-highlight to C:\Users\username\.atom\packages done
Installing show-ideographic-space to C:\Users\username\.atom\packages done
Installing symbols-tree-view to C:\Users\username\.atom\packages done
Installing tablr to C:\Users\username\.atom\packages done
Installing wrap-style to C:\Users\username\.atom\packages done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで複数マシンへの環境構築が随分楽になると思う。なお star の管理は &lt;code&gt;apm star&lt;/code&gt; または &lt;code&gt;apm unstar&lt;/code&gt; コマンドでできるが，テーマ・パッケージのページでも可能。&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の star が &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; の star のように &lt;a href=&#34;https://flattr.com/&#34;&gt;Flattr&lt;/a&gt; と連動すれば面白いんだけどねぇ。とりあえず flattr ボタンを貼り付ける手もあるけど）&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/115fea37ad2e515f6641&#34;&gt;ATOM の Theme / Package の感想文（2015-06-10） - Qiita&lt;/a&gt;」にテーマ・パッケージの感想を書いている。個人的な印象なんであんまり参考にならないかもだけど，よろしかったらどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;atom-の設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM の設定&lt;/h2&gt;

&lt;h3 id=&#34;proxy-設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Proxy 設定&lt;/h3&gt;

&lt;p&gt;Intranet 上のマシンで外部との接続が阻まれている場合は Proxy 設定を行う。
設定には &lt;code&gt;apm&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm config set https-proxy http://username:password@proxy.exsample.com:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firewall のなかには，セキュリティ上の理由から， SSL/TLS 暗号通信を中間者攻撃&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; でのぞき見するものがある。
このタイプの Firewall/Proxy は SSL/TLS の証明書を書き換えてしまうため， &lt;code&gt;apm&lt;/code&gt; が通信エラーになる。
この場合は以下の設定を行って強制的に SSL/TLS を通すようにするとよいらしい（取扱注意）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm config set strict-ssl false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やれやれ。&lt;/p&gt;

&lt;h3 id=&#34;font-family-の選択:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Font Family の選択&lt;/h3&gt;

&lt;p&gt;エディタのフォントは作業効率に大きく影響する。
これは私個人の感覚だが，日本語の地の文章がゴシック体なのは辛い。
いくら綺麗だからといって Meiryo フォントをエディタに使う気にはならない。
ただし，コードに関しては視認性が一番重要。
ということで，フォントの指定は以下で無問題&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Inconsolata&amp;quot;, &amp;quot;MS Mincho&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows では Tree View のフォントが汚いので，ここは素直に Meiryo UI フォントに変える。 &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; を以下のように変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.tree-view {
	font-family: &amp;quot;Meiryo UI&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;atom-workspace {
  font-family: &amp;quot;Meiryo UI&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればタブや Settings 画面のフォントも変えられる。&lt;/p&gt;

&lt;h3 id=&#34;editorconfig:9f5cc37d12d96caee7deea463dce6873&#34;&gt;EditorConfig&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; があればタブや改行コードなどの設定を統一できる。
これは特に複数人で作業する場合に威力を発揮する。
たとえば，このサイトの作業環境では以下のように設定している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;root = true

[*]
end_of_line = lf
charset = utf-8
indent_style = tab
indent_size = 4
trim_trailing_whitespace = true
insert_final_newline = true

[*.html]
insert_final_newline = false

[*.md]
indent_style = space
indent_size = 4
trim_trailing_whitespace = false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; はフォルダを遡って &lt;code&gt;.editorconfig&lt;/code&gt; ファイルを探し，フォルダの上から順番に評価していく。
&lt;code&gt;root = true&lt;/code&gt; の記述がないとどこまでも上の階層に遡っていくので，プロジェクトのトップ・フォルダの &lt;code&gt;.editorconfig&lt;/code&gt; には必ずこれを記述すること。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[*]&lt;/code&gt; は対象となるファイルを指定している。 &lt;code&gt;[*]&lt;/code&gt; なら全てのファイルが対象である。 &lt;code&gt;[*.html]&lt;/code&gt; は拡張子 &lt;code&gt;html&lt;/code&gt; のファイルが対象となる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end_of_line&lt;/code&gt; では改行コードを指定する。 &lt;code&gt;lf&lt;/code&gt;, &lt;code&gt;cr&lt;/code&gt;, &lt;code&gt;crlf&lt;/code&gt; から選択できる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indent_style&lt;/code&gt; はインデント（タブ）のスタイルを指定する。 &lt;code&gt;tab&lt;/code&gt; または &lt;code&gt;space&lt;/code&gt; を指定する。 &lt;code&gt;space&lt;/code&gt; にすると，いわゆる「ソフトタブ」になる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indent_size&lt;/code&gt; はタブの幅を指定する。 &lt;code&gt;indent_style&lt;/code&gt; と &lt;code&gt;indent_size&lt;/code&gt; は常にセットで指定すると間違いがない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trim_trailing_whitespace&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にすると行末の空白文字を削除してくれる。残念なことに &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の場合は，いわゆる「全角空白」を空白文字と見なしてくれない。まぁ全角空白を空白文字と見なす実装のほうが少ないけど。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert_final_newline&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にするとファイルの末尾が改行文字ではない場合に補完してくれる。でもこれって使いどころが難しいのよね。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; は多くのテキスト・エディタや統合開発環境に対応していて，もちろん &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にも対応パッケージがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/editorconfig&#34;&gt;editorconfig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;文字エンコーディングについて残念なお知らせ:9f5cc37d12d96caee7deea463dce6873&#34;&gt;文字エンコーディングについて残念なお知らせ&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;charset&lt;/code&gt; では文字エンコーディングを指定するが，標準では &lt;code&gt;latin1&lt;/code&gt;, &lt;code&gt;utf-8&lt;/code&gt;, &lt;code&gt;utf-8-bom&lt;/code&gt;, &lt;code&gt;utf-16be&lt;/code&gt;, &lt;code&gt;utf-16le&lt;/code&gt; しかサポートしていない。
それ以外の文字エンコーディングは実装依存ということになる。&lt;/p&gt;

&lt;p&gt;しかも &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の場合，ファイルを新規作成する場合にこの設定が効かないようで，たとえば &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 側の “File Encoding” が &lt;code&gt;shiftjis&lt;/code&gt; で  &lt;code&gt;.editorconfig&lt;/code&gt; ファイル側が &lt;code&gt;charset = utf-8&lt;/code&gt; の場合，新規作成ファイルは &lt;code&gt;shiftjis&lt;/code&gt; にセットされ，そのまま保存される。
しかも次にそのファイルを開く場合は（&lt;code&gt;.editorconfig&lt;/code&gt; ファイル側の設定が効いてしまうので） &lt;code&gt;utf8&lt;/code&gt; で開いてしまい，結果派手に文字化けする（&lt;code&gt;ctrl-shift-U&lt;/code&gt; で文字エンコーディングを変更すれば元に戻るけど）。&lt;/p&gt;

&lt;p&gt;新規作成時の初期の文字エンコーディングは今のところどうしようもないが，プロジェクトごとに “File Encoding” を変更して対応するか，新規作成ファイルが開いた直後に &lt;code&gt;ctrl-shift-U&lt;/code&gt; で文字エンコーディングを変更することで何とかなるだろう（ダサいけど）。&lt;/p&gt;

&lt;h4 id=&#34;ファイル読み込み時に文字エンコーディングを自動判別する:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ファイル読み込み時に文字エンコーディングを自動判別する&lt;/h4&gt;

&lt;p&gt;もうひとつの緩和策としては，既存ファイル読み込み時に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に文字エンコードを自動判別させることだ。ただし，この機能を持つ Package は今のところ存在しないようなので自前で何とかするしかない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tokudiro/items/bc232c7d36261dc45936&#34;&gt;ATOM でファイルを開いたら自動文字コード判定を行う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この設定を行うには node.js のフルパッケージが必要。&lt;/p&gt;

&lt;p&gt;（Linux や Mac な人は依存関係で node.js がインストールされると思うけど， Windows では &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; インストール時に一部機能が同梱されているだけなので（しかもバージョンが古い），フル機能を使うには別途インストールする必要あり）&lt;/p&gt;

&lt;p&gt;Windows の場合は &lt;code&gt;%USERPROFILE%\.atom&lt;/code&gt; フォルダに移動する。その後， &lt;code&gt;npm&lt;/code&gt; コマンドを使って &lt;code&gt;iconv-lite&lt;/code&gt; と &lt;code&gt;jschardet&lt;/code&gt; をインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;cd C:\Users\username\.atom
C:\Users\username\.atom&amp;gt;npm install iconv-lite
iconv-lite@0.4.10 node_modules\iconv-lite

C:\Users\username\.atom&amp;gt;npm install jschardet
jschardet@1.1.1 node_modules\jschardet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると &lt;code&gt;%USERPROFILE%\.atom\node_modules&lt;/code&gt; フォルダが作成され，その中に &lt;code&gt;iconv-lite&lt;/code&gt; と &lt;code&gt;jschardet&lt;/code&gt; がインストールされているはずである。&lt;/p&gt;

&lt;p&gt;次は &lt;code&gt;%USERPROFILE%\.atom\init.coffee&lt;/code&gt; ファイルに以下の記述を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;fs = require(&#39;fs&#39;)

atom.workspace.onDidOpen -&amp;gt;
  editor = atom.workspace.getActiveTextEditor()

  try
    filePath = editor.getPath()
  catch error
    return
  return unless fs.existsSync(filePath)

  jschardet = require &#39;jschardet&#39;
  iconv = require &#39;iconv-lite&#39;
  fs.readFile filePath, (error, buffer) =&amp;gt;
    return if error?
    {encoding} = jschardet.detect(buffer) ? {}
    encoding = &#39;utf8&#39; if encoding is &#39;ascii&#39;
    return unless iconv.encodingExists(encoding)

    encoding = encoding.toLowerCase().replace(/[^0-9a-z]|:\d{4}$/g, &#39;&#39;)
    editor.setEncoding(encoding)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/tokudiro/items/bc232c7d36261dc45936&#34;&gt;ATOM でファイルを開いたら自動文字コード判定を行う&lt;/a&gt;」によると，これは &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; からの流用らしい。ただし現在， &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; は Core Package に入ってるので atom フォルダをひっくり返してもソースコードは見当たらない。ので，GitHub repository &lt;a href=&#34;https://github.com/atom/encoding-selector&#34;&gt;atom/encoding-selector&lt;/a&gt; にある &lt;a href=&#34;https://github.com/atom/encoding-selector/blob/master/lib/encoding-list-view.coffee&#34;&gt;lib/encoding-list-view.coffee&lt;/a&gt; を参考にするといいだろう。 &lt;code&gt;detectEncoding:&lt;/code&gt; のあたりである。&lt;/p&gt;

&lt;p&gt;これで &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を起動して既定の文字エンコーディングでない適当なファイルを読み込ませてみれば確認できる。ただし，自動判別は万能じゃない（たまに間違う）ので，その辺は悪しからずってことで。&lt;/p&gt;

&lt;p&gt;一番いいのは &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; がファイル読み込み時に自動判別する機能を付けてくれることなんだけど。誰かやらないかな。個人的には &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 開発に積極的に commit する気はないので，完全に他人任せなのだが。&lt;/p&gt;

&lt;h3 id=&#34;git-関連機能:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Git 関連機能&lt;/h3&gt;

&lt;p&gt;GitHub が作ったという割には git 機能が貧弱なのは何故なのだろう。特に &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; 相当の機能が Core パッケージに入ってないのは解せぬ。というわけでインストールした。公開してくださった方に感謝。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; は主にコマンドパレットで操作するが（メニューの「Packages」からも辿れる），コマンドパレットの呼び出しを f1 キーに割り当てたらだいぶ使いやすくなった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/git-control&#34;&gt;git-control&lt;/a&gt; は GUI で最初の頃は便利だったのだが， &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; が手に馴染んできたら使わなくなった。
submodule の処理が得意ではないっぽいのもマイナス。&lt;/p&gt;

&lt;h3 id=&#34;矩形選択:9f5cc37d12d96caee7deea463dce6873&#34;&gt;矩形選択&lt;/h3&gt;

&lt;p&gt;矩形選択用に &lt;code&gt;%USERPROFILE%\.atom\keymap.cson&lt;/code&gt; ファイルに対して以下のキー設定を行った&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;body&#39;:
  &#39;alt-shift-down&#39;: &#39;editor:add-selection-below&#39;
  &#39;alt-shift-left&#39;: &#39;core:select-left&#39;
  &#39;alt-shift-right&#39;: &#39;core:select-right&#39;
  &#39;alt-shift-up&#39;: &#39;editor:add-selection-above&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Alt+Shift キーを押しながらカーソルを上下左右に動かせば矩形選択ができる。実はこれらの操作のキー割り当ては元々こうなっている。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Keybind&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;コマンド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ctrl-alt-down&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;editor:add-selection-below&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ctrl-alt-up&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;editor:add-selection-above&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-left&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;core:select-left&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-right&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;core:select-right&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ただし，うちのパソコンでは Ctrl+Alt キーを押しながらカーソルを動かすと（Windows がキーを横取りして）ディスプレイの向きが変わってしまうので，かなり切ないことになってしまう。&lt;/p&gt;

&lt;p&gt;実際には &lt;code&gt;editor:add-selection-below&lt;/code&gt; および &lt;code&gt;editor:add-selection-above&lt;/code&gt; はマルチカーソル・モードのコマンドである。マルチカーソル・モードは癖がある感じだが慣れれば結構使えるかも。&lt;/p&gt;

&lt;p&gt;キーボード操作ではなく，マウス操作で矩形選択がしたい場合は &lt;a href=&#34;https://atom.io/packages/Sublime-Style-Column-Selection&#34;&gt;sublime-style-column-selection&lt;/a&gt; を導入するとよい。 Windows ではマウスのセンターボタンを押しながらマウスを動かす。&lt;/p&gt;

&lt;p&gt;いずれのやり方でも，日本語混じりのテキストではうまくいかない。
やれやれ。&lt;/p&gt;

&lt;h3 id=&#34;その他:9f5cc37d12d96caee7deea463dce6873&#34;&gt;その他&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;自動保存を行う Core パッケージ &lt;a href=&#34;https://atom.io/packages/autosave&#34;&gt;autosave&lt;/a&gt; は既定で無効になってる。私は &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; で commit する前に保存するのをどうしても忘れるので，これを有効にしておくと吉。ただし &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; で，自動保存により勝手に commit が走るので注意。&lt;/li&gt;
&lt;li&gt;Core パッケージ &lt;a href=&#34;https://atom.io/packages/tabs&#34;&gt;tabs&lt;/a&gt; の設定で “Enable VCS Coloring” を有効にするとタブに表示されているファイル名が色分けされて表示される。&lt;/li&gt;
&lt;li&gt;Core パッケージ &lt;a href=&#34;https://atom.io/packages/git-diff&#34;&gt;git-diff&lt;/a&gt; の設定で “Show Icons In Editor Gutter” を有効にすると差分情報がちょっとだけ見やすくなる。&lt;/li&gt;
&lt;li&gt;インデントをそろえるために &lt;a href=&#34;https://atom.io/packages/highlight-column&#34;&gt;highlight-column&lt;/a&gt; を紹介しているページを見かけたけど，インデントをそろえる目的なら，標準の Settings で “Show Indent Guide” にチェックを入れておく方が吉。&lt;/li&gt;
&lt;li&gt;秀丸では大変重宝したアウトライン解析。&lt;a href=&#34;https://atom.io/packages/symbols-tree-view&#34;&gt;symbols-tree-view&lt;/a&gt; があればアウトライン解析を行って右側のサイドバーに表示する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/japan-util&#34;&gt;japan-util&lt;/a&gt; : 全角・半角変換機能。英数字を全角で書いたり仮名文字を半角で書いたりするバカがいるので，意外と使うのよ，これ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/highlight-line&#34;&gt;highlight-line&lt;/a&gt; でカーソル行をハイライトにしたり下線を引いたりできる。色のカスタマイズは &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; ファイルで行う。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/open-recent&#34;&gt;open-recent&lt;/a&gt; は最近開いたファイルやフォルダを覚えておいてくれる便利なやつ。てか，なぜこれが標準で搭載されてないのだ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/show-ideographic-space&#34;&gt;show-ideographic-space&lt;/a&gt; : いわゆる「全角空白」を視覚化してくれる。見せ方は &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; ファイルでカスタマイズ可能。実際には IME のプロパティでスペース・キー押下で常に「半角空白」を入力するように設定すればほとんど防げるんだどね（全角空白を入力する場合は &lt;code&gt;shift-space&lt;/code&gt; 押下）。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/autoclose-html&#34;&gt;autoclose-html&lt;/a&gt; : HTML 入力でタグを入力すると自動的に閉じタグを補完してくれる。自動補完の機能は色々あって，大抵は &lt;a href=&#34;https://atom.io/packages/autocomplete-plus&#34;&gt;autocomplete-plus&lt;/a&gt; のサブパッケージだったりするのだが，これだけは毛色が違う（笑）&lt;/li&gt;
&lt;li&gt;特定の単語をマークしておける &lt;a href=&#34;https://atom.io/packages/quick-highlight&#34;&gt;quick-highlight&lt;/a&gt; が結構使える。 Windows だとキーに割り当てられないので、 toggle を適当なファンクションキーとかに割り当てておくとめっさ便利。&lt;/li&gt;
&lt;li&gt;むむっ。 &lt;a href=&#34;https://atom.io/packages/latex&#34;&gt;latex&lt;/a&gt; パッケージなるものがあるなぁ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/tablr&#34;&gt;tablr&lt;/a&gt; : CSV Editor。なにこれ素敵！&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;現在の設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;現在の設定&lt;/h3&gt;

&lt;p&gt;現在の設定は &lt;a href=&#34;https://gist.github.com/spiegel-im-spiegel/e6e9c7340987f1607b2c&#34;&gt;Gist に貼り付け&lt;/a&gt;ている。
よろしかったら参考にどうぞ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;&#39;&gt;
&lt;script src=&#34;https://gist.github.com/spiegel-im-spiegel/e6e9c7340987f1607b2c.js&#34;&gt;&lt;/script&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;ブックマーク:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に関するブックマークは &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/3d41d98dacc107d73431&#34;&gt;Qiita でメンテナンス&lt;/a&gt;している。
こちらも併せてどうぞ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;Deep Packet Inspection とか言うらしいけど，どう見たって Man-in-the-Middle Attack だろ（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;日本語フォントの指定が MS 明朝なのは，どんな日本語 Windows 環境でも MS 明朝は必ず入ってるからという理由だけなので，自分の感覚で見易いフォントがあればそちらを使うべき。ちなみに IPA 明朝は線が細すぎて不向きだった。 &lt;a href=&#34;http://www.levien.com/type/myfonts/inconsolata.html&#34; title=&#34;Inconsolata&#34;&gt;Inconsolata&lt;/a&gt; は OpenType フォントを取ってきて「インストール」してしまえばよい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
