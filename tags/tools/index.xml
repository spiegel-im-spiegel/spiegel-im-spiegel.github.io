<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Tools - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/tools/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/tools/index.xml" />
	<id>tag:text.Baldanders.info,2015-12-20:/</id>
	<updated>2015-12-20T16:31:06+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>NYAGOS 4.1-beta がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/nyagos-4_1_beta/" />
		<id>tag:text.Baldanders.info,2015-12-20:/remark/2015/nyagos-4_1_beta/</id>
		<published>2015-12-20T16:31:06+09:00</published>
		<updated>2015-12-20T16:31:06+09:00</updated>
		<summary>4.1 で大きく変わったのはコールバック関数の扱いのようだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;ここのところ忙しくしてたら，いつの間にか &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; の &lt;a href=&#34;https://github.com/zetamatta/nyagos/releases/tag/4.1-beta&#34;&gt;4.1-beta&lt;/a&gt; が出てた。
4.1 で大きく変わったのはコールバック関数の扱いのようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クラッシュ回避のため、全てのLua のコールバック関数はそれぞれの Lua インスタンスを持つようにした。（つまり、.nyagos で定義されたグローバル変数は、全てのコールバック関数から見ることができなくなった）&lt;/li&gt;
&lt;li&gt;コールバック関数と .nyagos 間で値を共有するため、テーブル share[] を作った&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コールバック関数の挙動が変わったのは&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この制限は、クラッシュ回避のため、コールバック関数ごとに別の Lua インスタンスを用意しているためです。エイリアス等は別の goroutine 内で呼ばれるのですが、4.0 では、この時同一の Lua インスタンスを使用していたため、時にスタックに矛盾が発生して、クラッシュすることがあったのです。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c08586c85fa73c182a7a&#34;&gt;nyagosスクリプト解説 - CMD.EXEで化けさせず、nyagosの中だけプロンプトをカラー化&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ということらしい。&lt;/p&gt;

&lt;p&gt;実は &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; で表示するプロンプトは以下の記事を参考にオリジナルの &lt;code&gt;%PROMPT%&lt;/code&gt; から変えている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c08586c85fa73c182a7a&#34;&gt;nyagosスクリプト解説 - CMD.EXEで化けさせず、nyagosの中だけプロンプトをカラー化 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前のプロンプト定義は以下のような感じだった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Simple Prompt for CMD.EXE
set{
    PROMPT=&#39;$L&#39;.. nyagos.getenv(&#39;COMPUTERNAME&#39;) .. &#39;:$P$G$_$$$s&#39;
}

-- Coloring Prompt for NYAGOS.exe
local prompter=nyagos.prompt
nyagos.prompt = function(this)
    return prompter(&#39;$e[36;40;1m&#39;..this..&#39;$e[37;1m&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この中の &lt;code&gt;prompter&lt;/code&gt; がコールバック関数から見えなくなったということらしい。
そこで以下のようにコードを変更するのだそうだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Simple Prompt for CMD.EXE
nyagos.env.prompt=&#39;$L&#39;.. nyagos.getenv(&#39;COMPUTERNAME&#39;) .. &#39;:$P$G$_$$$s&#39;

-- Coloring Prompt for NYAGOS.exe
share.org_prompter=nyagos.prompt
nyagos.prompt = function(this)
    return share.org_prompter(&#39;$e[36;40;1m&#39;..this..&#39;$e[37;1m&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポイントは &lt;code&gt;share.org_prompter=nyagos.prompt&lt;/code&gt; の部分。
オリジナルの &lt;code&gt;nyagos.prompt()&lt;/code&gt; 関数を &lt;code&gt;share[]&lt;/code&gt; テーブルに退避させている。&lt;/p&gt;

&lt;p&gt;これでめでたく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\program\nyagos&amp;gt;nyagos.exe
Nihongo Yet Another GOing Shell 4.1-beta-amd64 Powered by go1.5.2 &amp;amp; Lua 5.3
Copyright (c) 2014,2015 HAYAMA_Kaoru and NYAOS.ORG
&amp;lt;VENUS:C:/program/nyagos&amp;gt;
$ ls
Doc/               lua53.dll          nyagos.lua*        specialfolders.js*
catalog.d/         makeicon.cmd*      nyole.dll
license.txt        nyagos.d/          readme.md
lnk.js*            nyagos.exe*        readme_ja.md
&amp;lt;VENUS:C:/program/nyagos&amp;gt;
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示できるようになった（カラーでお見せできないのが残念です）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:98f564c311f7795b2925fd0f13551316:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:98f564c311f7795b2925fd0f13551316:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;実は私もプロンプトは折り返す派。
開発環境ではフォルダがかなり深くなることがあり，既存の &lt;code&gt;$P$G&lt;/code&gt; では見づらいのだ。
まぁこれは Windows に限らないのだが。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:98f564c311f7795b2925fd0f13551316:a&#34;&gt;そういや昔の UNIX ワークステーションはホスト名に venus とか惑星名を付けてるところが多かったな。私がネットワーク管理者をしてた時はプロキシサーバに janus とか付けてた。若気の至りである（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:98f564c311f7795b2925fd0f13551316:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>あまり使わないけど，たまに使おうとすると忘れてる Git コマンド集 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/git-commands/" />
		<id>tag:text.Baldanders.info,2015-12-09:/remark/2015/git-commands/</id>
		<published>2015-12-09T20:14:59+09:00</published>
		<updated>2015-12-10T13:32:34+09:00</updated>
		<summary>git 各コマンドに関する覚え書き。思い出したら追記予定。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; 各コマンドに関する覚え書き。
思い出したら追記予定。&lt;/p&gt;

&lt;h2 id=&#34;submodule-の作成から削除まで:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の作成から削除まで&lt;/h2&gt;

&lt;h3 id=&#34;submodule-の作成:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の作成&lt;/h3&gt;

&lt;p&gt;Repository に別の repository &lt;code&gt;sub_repo.git&lt;/code&gt; を submodule として &lt;code&gt;subdir&lt;/code&gt; に追加する場合は以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add sub_repo.git subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;submodule-の初期化:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の初期化&lt;/h3&gt;

&lt;p&gt;Submodule を含む repository を clone してきた場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone repo.git
$ cd repo/subdir
$ git submodule init
$ git submodule update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone --recursive repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で初期化できる。
これ以降， remote 側から fetch/maerge した際に submodule の参照ポイントが変更されていた場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で初期化できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;submodule-の更新:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の更新&lt;/h3&gt;

&lt;p&gt;Submodule の remote 側の変更を pull する場合は以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --remote subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fetch したデータを merge する場合は &lt;code&gt;--merge&lt;/code&gt; オプションを， rebase する場合は &lt;code&gt;--rebase&lt;/code&gt; オプションを付ける&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;submodule-の削除:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の削除&lt;/h3&gt;

&lt;p&gt;Repository から submodule を削除する場合は以下のコマンドで削除できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule deinit subdir
$ git rm subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remote-repository-の接続設定:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository の接続設定&lt;/h2&gt;

&lt;h3 id=&#34;remote-repository-への-uri-を変更する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository への URI を変更する&lt;/h3&gt;

&lt;p&gt;Remote repository （通常は &lt;code&gt;origin&lt;/code&gt;）の接続先 URI を変更するには以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote set-url origin new_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remote-repository-との接続を追加する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository との接続を追加する&lt;/h3&gt;

&lt;p&gt;新たに remote repository との接続を追加する場合には以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote add upstream up_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは追加した remote repository に &lt;code&gt;upstream&lt;/code&gt; と名前をつけている。
たとえば fork した repository で作業する際に fork 元の repository の変更も取り込みたい場合などに有効である。&lt;/p&gt;

&lt;h3 id=&#34;remote-repository-との接続を削除する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository との接続を削除する&lt;/h3&gt;

&lt;p&gt;Remote repository との接続を削除する場合には以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote rm upstream up_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;repository-の分離:426366135f9b7036b5475695fbc6d142&#34;&gt;Repository の分離&lt;/h2&gt;

&lt;p&gt;Repository の特定のディレクトリ &lt;code&gt;subdir&lt;/code&gt; を commit tree を維持したまま分離したいときの手順。&lt;/p&gt;

&lt;p&gt;まず元の repository &lt;code&gt;org_repo.git&lt;/code&gt; を clone する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone org_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clone 元の bare repository がない場合にはローカルの repository を丸ごとどっかにコピーすればよい（commit 済みであること）。&lt;/p&gt;

&lt;p&gt;で， clone した repository 内に入って &lt;code&gt;git filter-branch&lt;/code&gt; コマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd org_repo
$ git filter-branch --subdirectory-filter subdir HEAD
Rewrite **************************************** (999/999)
Ref &#39;refs/heads/master&#39; was rewritten
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このとき &lt;code&gt;subdir&lt;/code&gt; 以下のファイル・ディレクトリが repository のトップ・ディレクトリに移動するので注意が必要である。
また，オリジナルの commit tree が &lt;code&gt;refs/original/refs/heads/master&lt;/code&gt; として残っているので以下のコマンドで削除する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git update-ref -d refs/original/refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成した repository はそのまま使うなり新しい bare repository に push するなりすればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote set-url origin new_repo.git
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;元の repository に push しようとすると怒られる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;git-に関するブックマーク:426366135f9b7036b5475695fbc6d142&#34;&gt;Git に関するブックマーク&lt;/h2&gt;

&lt;p&gt;ついでなので，ローカルで溜め込んでいた &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; に関するブックマークを挙げておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;Git for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gitextensions.github.io/&#34;&gt;Git Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kinokoru.jp/archives/1017&#34;&gt;【Git入門者向け】イメージで理解するGitコマンド事始め | きのこる庭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kray.jp/blog/git-pull-rebase/&#34;&gt;git pull と git pull –rebase の違いって？図を交えて説明します！ | KRAY Inc&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Teloo/items/95a860ae276b49edb040&#34;&gt;Git - pull は本当に fetch + merge なの？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/doilux/items/b5a9abd95ac91e848a5f&#34;&gt;Gitのこれやめて！リスト - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://meme.efcl.info/2011/07/gitcloneerror-setting-certificate.html&#34;&gt;githubからclone時にerror setting certificate verify locationsがでる | MemeTodo&lt;/a&gt; : うちでもなっていろいろ大変だった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kiida/items/0d51c43ac73f14f09f5a&#34;&gt;Git LFSが1.0になってGitHubで使えるようになったので試してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/crifff/items/32ffc824f69ed5632217&#34;&gt;git-lfsは大容量のファイルを扱うもので多量のファイルを扱うものではない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-h.hatenablog.com/entry/2013/12/07/093423&#34;&gt;gitで重いリポジトリをcloneするとき - webネタ&lt;/a&gt; （&lt;a href=&#34;http://qiita.com/butchi_y/items/cc0fe50acc47c1e3ab32&#34;&gt;Qiita 版&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;Git - サブモジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://raimon49.github.io/2015/04/04/git-submodule-deinit.html&#34;&gt;Gitのsubmoduleをお手軽に削除する - Steel Dragon 14106&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/hiratara/20091112/1258023732&#34;&gt;Gitリポジトリ中のサブディレクトリを別のリポジトリにする - 北海道苫小牧市出身のPGが書くブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gozuk16.hatenablog.com/entry/2015/04/24/145714&#34;&gt;Gitリポジトリのディレクトリ構成を変えて別リポジトリにする - ごずろぐ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/go_astrayer/items/6e39d3ab16ae8094496c&#34;&gt;Git リポジトリに上がっているファイルを履歴ごと消すには？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;git-flow-and-github-flow:426366135f9b7036b5475695fbc6d142&#34;&gt;Git-flow and GitHub-flow&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scottchacon.com/2011/08/31/github-flow.html&#34;&gt;GitHub Flow – Scott Chacon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;GitHub Flow (Japanese translation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;A successful Git branching model » nvie.com&#34;&gt;A successful Git branching model » nvie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;git-flow cheatsheet&#34;&gt;git-flow cheatsheet&lt;/a&gt; （日本語）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://komaken.me/blog/2013/09/09/git-flow%E3%81%A8github-flow%E3%81%96%E3%81%A3%E3%81%8F%E3%82%8A%E3%81%BE%E3%81%A8%E3%82%81/&#34;&gt;git flowとgithub flowざっくりまとめ | KentaKomai Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.qnyp.com/2013/05/28/pull-request-for-github-beginners/&#34;&gt;GitHub初心者はForkしない方のPull Requestから入門しよう | qnyp blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;code&gt;--recursive&lt;/code&gt; オプションなしで cloneした 直後は &lt;code&gt;git update&lt;/code&gt; では初期化できないので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;Rebase は歴史の改変なので取り扱いに注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;code&gt;-f&lt;/code&gt; オプションを付けて強制的に push することは可能。ただしこれは（rebase と同じで）歴史の改変になるため取り扱いに注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Glide で Vendoring - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/vendoring-with-glide/" />
		<id>tag:text.Baldanders.info,2015-12-07:/golang/vendoring-with-glide/</id>
		<published>2015-12-07T23:30:21+09:00</published>
		<updated>2015-12-08T12:57:44+09:00</updated>
		<summary>Go 言語 1.5 の vendoring 機能をサポートするツールが glide である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;以前「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt; 1.5 の vendoring 機能を紹介したが，この vendoring のヘルパ・ツールと言えるのが &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; である。
&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では依存する外部パッケージの情報を YAML 形式の定義ファイルに記述し，この定義ファイルを基に外部パッケージの管理を行う。&lt;/p&gt;

&lt;h2 id=&#34;glide-のインストール:721380b38042a10816ac6a323733a866&#34;&gt;Glide のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は自身も &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; で外部パッケージを管理している。
なので最初は &lt;code&gt;go get&lt;/code&gt; ではなく &lt;a href=&#34;https://github.com/Masterminds/glide/releases&#34;&gt;Releases&lt;/a&gt; ページからビルド済みのものを取得することをお勧めする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;既に &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; が利用可能な状態なら，以下の要領でビルドできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\glide&amp;gt;SET GOPATH=C:\workspace\glide

C:\workspace\glide&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\glide&amp;gt;git clone git@github.com:Masterminds/glide.git src\github.com\Masterminds\glide
Cloning into &#39;src\github.com\Masterminds\glide&#39;...
remote: Counting objects: 1993, done.
remote: Compressing objects: 100% (65/65), done.
remote: Total 1993 (delta 34), reused 0 (delta 0), pack-reused 1928
Receiving objects: 100% (1993/1993), 476.75 KiB | 85.00 KiB/s, done.
Resolving deltas: 100% (1382/1382), done.
Checking connectivity... done.

C:\workspace\glide&amp;gt;pushd src\github.com\Masterminds\glide

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;glide install
[INFO] Fetching updates for gopkg.in/yaml.v2.
[INFO] Fetching updates for github.com/Masterminds/cookoo.
[INFO] Fetching updates for github.com/Masterminds/vcs.
[INFO] Fetching updates for github.com/codegangsta/cli.
[INFO] Fetching updates for github.com/Masterminds/semver.
[INFO] Setting version for github.com/Masterminds/cookoo to master.
[INFO] Detected semantic version. Setting version for github.com/Masterminds/vcs to 1.3.0.
[INFO] Detected semantic version. Setting version for github.com/Masterminds/semver to 1.0.0.
[INFO] Package gopkg.in/yaml.v2 manages its own dependencies
[INFO] Found glide.yaml in C:\workspace\glide\src\github.com\Masterminds\glide\vendor/github.com/Masterminds/cookoo/glide.yaml
[INFO] Package github.com/Masterminds/vcs manages its own dependencies
[INFO] Package github.com/codegangsta/cli manages its own dependencies
[INFO] Package github.com/Masterminds/semver manages its own dependencies
[INFO] Setting version for github.com/Masterminds/cookoo to master.
[INFO] Detected semantic version. Setting version for github.com/Masterminds/vcs to 1.3.0.
[INFO] Detected semantic version. Setting version for github.com/Masterminds/semver to 1.0.0.
[INFO] Project relies on 5 dependencies.

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;popd

C:\workspace\glide&amp;gt;go install -v ./...
github.com/Masterminds/glide/gb
github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io
github.com/Masterminds/glide/vendor/gopkg.in/yaml.v2
github.com/Masterminds/glide/vendor/github.com/Masterminds/semver
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo
github.com/Masterminds/glide/util
github.com/Masterminds/glide/vendor/github.com/codegangsta/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/safely
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/convert
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/active
github.com/Masterminds/glide/yaml
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/sql
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/fmt
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web
github.com/Masterminds/glide/cmd
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/example
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/log
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/doc
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web/auth
github.com/Masterminds/glide

C:\workspace\glide&amp;gt;bin\glide.exe -v
glide version dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単な使い方は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt; glide -h
NAME:
   glide - The lightweight vendor package manager for your Go projects.

Each project should have a &#39;glide.yaml&#39; file in the project directory. Files
look something like this:

        package: github.com/Masterminds/glide
        imports:
                - package: github.com/Masterminds/cookoo
                  vcs: git
                  ref: 1.1.0
                  subpackages: **
                - package: github.com/kylelemons/go-gypsy
                  subpackages: yaml
                        flatten: true

NOTE: As of Glide 0.5, the commands &#39;in&#39;, &#39;into&#39;, &#39;gopath&#39;, &#39;status&#39;, and &#39;env&#39;
no longer exist.


USAGE:
   glide [global options] command [command options] [arguments...]

VERSION:
   0.7.2

COMMANDS:
   create, init         Initialize a new project, creating a template glide.yaml
   get                  Install one or more package into `vendor/` and add dependency to glide.yaml.

   import               Import files from other dependency management systems.
   name                 Print the name of this project.
   novendor, nv         List all non-vendor paths in a directory.
   pin                  Print a YAML file with all of the packages pinned to the current version
   rebuild              Rebuild (&#39;go build&#39;) the dependencies
   update, up, install  Update or install a project&#39;s dependencies
   tree                 Tree prints the dependencies of this project as a tree.
   list                 List prints all dependencies that Glide could discover.
   guess                Guess dependencies for existing source.
   about                Learn about Glide
   help, h              Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --yaml, -y &amp;quot;glide.yaml&amp;quot;              Set a YAML configuration file.
   --quiet, -q                          Quiet (no info or debug messages)
   --debug                              Print Debug messages (verbose)
   --home &amp;quot;C:\Users\username\.glide&amp;quot;    The location of Glide files [$GLIDE_HOME]
   --no-color                           Turn off colored output for log messages
   --help, -h                           show help
   --version, -v                        print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;開発環境の準備:721380b38042a10816ac6a323733a866&#34;&gt;開発環境の準備&lt;/h2&gt;

&lt;p&gt;動作検証用に「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で使ったコードを利用する。
まず，以下の環境を作る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\workspace\vdemo2&amp;gt;SET GOPATH=C:\workspace\vdemo2

C:\workspace\vdemo2&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\vdemo2&amp;gt;tree /f .
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;julian-day.go&lt;/code&gt; の内容は以下のとおりである。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

    &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		}
		args[i] = num
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, modjulian.DayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然ながら，このままビルドしても外部パッケージがないため失敗する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;go install ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo2\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;依存関係を定義する:721380b38042a10816ac6a323733a866&#34;&gt;依存関係を定義する&lt;/h2&gt;

&lt;p&gt;開発環境ができたら，パッケージのフォルダ（今回は &lt;code&gt;src/julian-day&lt;/code&gt;）に移動し， &lt;code&gt;glide create&lt;/code&gt; コマンドで依存関係を定義する &lt;code&gt;glide.yaml&lt;/code&gt; ファイルを生成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;pushd src\julian-day

C:\workspace\vdemo2\src\julian-day&amp;gt;glide create
[INFO] Initialized. You can now edit &#39;glide.yaml&#39;

C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            glide.yaml
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この時点での &lt;code&gt;glide.yaml&lt;/code&gt; の中身は以下の通り空っぽの状態。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Glide YAML configuration file
# Set this to your fully qualified package name, e.g.
# github.com/Masterminds/foo. This should be the
# top level package.
package: main

# Declare your project&#39;s dependencies.
import:
  # Fetch package similar to &#39;go get&#39;:
  #- package: github.com/Masterminds/cookoo
  # Get and manage a package with Git:
  #- package: github.com/Masterminds/cookoo
  #  # The repository URL
  #  repo: git@github.com:Masterminds/cookoo.git
  #  # A tag, branch, or SHA
  #  ref: 1.1.0
  #  # the VCS type (compare to bzr, hg, svn). You should
  #  # set this if you know it.
  #  vcs: git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これに &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34; title=&#34;spiegel-im-spiegel/astrocalc&#34;&gt;astrocalc&lt;/a&gt;/modjulian パッケージの記述を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Glide YAML configuration file
# Set this to your fully qualified package name, e.g.
# github.com/Masterminds/foo. This should be the
# top level package.
package: julian-day

# Declare your project&#39;s dependencies.
import:
  - package: github.com/spiegel-im-spiegel/astrocalc/modjulian
    version: 0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;go get&lt;/code&gt; コマンドと同じように， &lt;code&gt;package&lt;/code&gt; のパスから自動的に repository を判別してパッケージを取得できる。
&lt;code&gt;go get&lt;/code&gt; コマンドと異なるのは， &lt;code&gt;glide.yaml&lt;/code&gt; ファイルで指定した &lt;code&gt;version&lt;/code&gt; 情報から適切な revision を選択できる点である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:semv&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:semv&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;また，以下のように VCS (Version Control System) の種類&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:vcs&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; と URI を明示的に指定することもできる（&lt;code&gt;vcs&lt;/code&gt; と &lt;code&gt;repo&lt;/code&gt; は必ずセットで指定する）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Glide YAML configuration file
# Set this to your fully qualified package name, e.g.
# github.com/Masterminds/foo. This should be the
# top level package.
package: julian-day

# Declare your project&#39;s dependencies.
import:
  - package: github.com/spiegel-im-spiegel/astrocalc/modjulian
    vcs:     git
    repo:    git@github.com:spiegel-im-spiegel/astrocalc.git
    version: 0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば，プライベートな bare repository からインポートする場合には，この方法が有効である。&lt;/p&gt;

&lt;h2 id=&#34;パッケージの取得とビルド:721380b38042a10816ac6a323733a866&#34;&gt;パッケージの取得とビルド&lt;/h2&gt;

&lt;p&gt;パッケージの取得には &lt;code&gt;glide up&lt;/code&gt; コマンドを起動する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;glide up
[INFO] Fetching updates for github.com/spiegel-im-spiegel/astrocalc.
[INFO] Detected semantic version. Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Package github.com/spiegel-im-spiegel/astrocalc manages its own dependencies
[INFO] Detected semantic version. Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Project relies on 1 dependencies.

C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
        │  glide.yaml
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに，まだ &lt;code&gt;glide.yaml&lt;/code&gt; ファイルへパッケージを定義していない状態なら &lt;code&gt;glide get&lt;/code&gt; コマンドを使って &lt;code&gt;glide.yaml&lt;/code&gt; ファイルへの記述とパッケージの導入を一度に済ませられる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;glide get github.com/spiegel-im-spiegel/astrocalc/modjulian
[INFO] Preparing to install 1 package.
[INFO] Package github.com/spiegel-im-spiegel/astrocalc/modjulian manages its own dependencies
[INFO] Project relies on 1 dependencies.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このときの &lt;code&gt;glide.yaml&lt;/code&gt; ファイルの内容は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: main
import:
- package: github.com/spiegel-im-spiegel/astrocalc
  subpackages:
  - /modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合は（&lt;code&gt;version&lt;/code&gt; 指定がないため）パッケージの最新 revision が導入される。
Revision を制御したければ，以下のように &lt;code&gt;glide.yaml&lt;/code&gt; ファイルを修正して &lt;code&gt;glide up&lt;/code&gt; し直せばよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com/spiegel-im-spiegel/astrocalc
  version: 0.1.0 # Version control
  subpackages:
  - /modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでビルドが可能になった。
ではビルドしようかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;popd

C:\workspace\vdemo2&amp;gt;go install -v  ./...
julian-day/vendor/github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\vdemo2&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;h2 id=&#34;vendor-フォルダの管理:721380b38042a10816ac6a323733a866&#34;&gt;Vendor フォルダの管理&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では外部パッケージを vendor フォルダ以下に repository 構造ごと展開する。
この場合，開発対象のパッケージも repository で管理しているのだから， repository が入れ子になり具合が悪い。
その辺，当の &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; はどうしてるのかなぁと思ったら &lt;code&gt;.gitignore&lt;/code&gt; ファイルで &lt;code&gt;vendor/&lt;/code&gt; を除外対象にしていた。
なるほど，そりゃそうか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;glide.yaml&lt;/code&gt; ファイルの管理さえちゃんとしていれば &lt;code&gt;glide install&lt;/code&gt; コマンドでいつでも復元できるのだから &lt;code&gt;vendor&lt;/code&gt; フォルダ以下を除外しても問題ないわけだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:v&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
また vendoring に対応していない（Go 1.4 以下の）環境や &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; がない環境では &lt;code&gt;go get&lt;/code&gt; で外部パッケージを取ってくることで（revision 等の問題はあるけど）一応ビルドは通る。&lt;/p&gt;

&lt;p&gt;更に言うと， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の標準機能に準拠しているため，他のサポートツールとの相性がいいのも利点だろう。
たとえば， &lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;ATOM ベースの開発環境&lt;/a&gt;は &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; と相性がいい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:gov&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:gov&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
あと，（多少強引な手を使っているが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:tci&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;） &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; のような CI (Continuous Integration) と組み合わせることも難しくない。&lt;/p&gt;

&lt;p&gt;こう考えると &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34;&gt;前に紹介&lt;/a&gt;した &lt;a href=&#34;http://getgb.io/&#34;&gt;gb&lt;/a&gt; よりも筋がいいツールといえるかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:721380b38042a10816ac6a323733a866&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/8e192e68d6b18bec3b4a&#34;&gt;glide - パッケージ管理のお困りの方へ - - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;コマンドとしては &lt;code&gt;glide install&lt;/code&gt;， &lt;code&gt;glide update&lt;/code&gt; および &lt;code&gt;glide up&lt;/code&gt; があるが，どれも処理の中身は同じらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:semv&#34;&gt;今回であれば repository の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc/releases/tag/v0.1.0&#34;&gt;&lt;code&gt;v0.1.0&lt;/code&gt;&lt;/a&gt; タグに対応する revision を選択する。バージョンの記述形式は &lt;code&gt;package.json&lt;/code&gt; と同じように記述でき，バージョンの解釈は &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; に従っている。ちなみに revision ID を直接指定することもできる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:semv&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt; のほか svn (&lt;a href=&#34;http://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;), hg (&lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;), bzr (&lt;a href=&#34;http://bazaar.canonical.com/&#34;&gt;Bazaar&lt;/a&gt;) が利用可能である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;コマンドとしては &lt;code&gt;glide install&lt;/code&gt;， &lt;code&gt;glide update&lt;/code&gt; および &lt;code&gt;glide up&lt;/code&gt; があるが，どれも処理の中身は同じらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダ以下は外部パッケージなので通常はさわることはない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:gov&#34;&gt;残念ながら，「&lt;a href=&#34;http://text.baldanders.info/golang/package-visualization-tool/&#34;&gt;パッケージの依存状況の視覚化&lt;/a&gt;」ツールは vendoring 機能に対応していないため上手く表示できない。なお， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;code&gt;glide list&lt;/code&gt; および &lt;code&gt;glide tree&lt;/code&gt; で依存パッケージを見ることができる，らしいのだが今回の環境だとうまくいかないなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:gov&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; の &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/.travis.yml&#34;&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/Makefile&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt; を参照。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 「はやぶさ2」地球 Swing-by - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1205-diary/" />
		<id>tag:text.Baldanders.info,2015-12-06:/remark/2015/1205-diary/</id>
		<published>2015-12-06T00:22:47+09:00</published>
		<updated>2015-12-19T14:40:56+09:00</updated>
		<summary>「はやぶさ2」地球 Swing-by / GnuPG 2.1.10 released / Go 1.5.2 Released / 11月の Flattr / 機械創作でクリエイターは失業するか / 新刊小説の滅亡</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#hayabusa:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;「はやぶさ2」地球 Swing-by&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gnupg:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;GnuPG 2.1.10 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golang:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;Go 1.5.2 Released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flattr:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;11月の Flattr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#machine:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;機械創作でクリエイターは失業するか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#book:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;新刊小説の滅亡&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;hayabusa:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;「はやぶさ2」地球 Swing-by&lt;/h2&gt;

&lt;p&gt;12月3日に「はやぶさ2」の地球 swing-by が行われた。
Swing-by 自体はうまくいったようだが，今のところ所定の軌道に乗ったかどうか確認中らしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hayabusa2.jaxa.jp/topics/20151202/&#34;&gt;「はやぶさ２」の地球スイングバイ軌道が確定しました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1931&#34;&gt;「はやぶさ2」打ち上げから1年、本日軌道変更(地球スイングバイ)を実施 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2015/12/20151203_hayabusa2_j.html&#34;&gt;JAXA | 小惑星探査機「はやぶさ2」の地球スイングバイ実施について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1938&#34;&gt;はやぶさ2、軌道変更(地球スイングバイ)を実施、成否は数日後に判明 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hayabusa2.jaxa.jp/topics/20151203/&#34;&gt;「はやぶさ２」スイングバイ直前に撮影された地球の画像 | JAXA はやぶさ２プロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;地球 Swing-by については以下の解説記事が参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jpn.nec.com/ad/cosmos/hayabusa2/swingby/&#34;&gt;探査機をスマートに飛ばすテクニック「スイングバイ」: 小惑星探査機「はやぶさ2」: NECの宇宙開発利用への取り組み「宙への挑戦」 | NEC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;もし地球が止まっているなら、近づく時も離れる時も、探査機の速度は変わりません。ですが地球は、秒速30kmという猛スピードで太陽の周りを公転しており、とても大きな運動エネルギーを持っています。「はやぶさ２」は地球の後方を通過することで、そのエネルギーのほんの一部をもらって、前方へ加速していきます。今回のスイングバイで「はやぶさ2」は毎秒1.6km、時速にすると何と約6000kmも速くなります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jpn.nec.com/ad/cosmos/hayabusa2/swingby/&#34;&gt;探査機をスマートに飛ばすテクニック「スイングバイ」&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;さて，週明けは「あかつき」だよ。
うまくいくといいね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.planetary.org/blogs/guest-blogs/2015/1204-akatsuki-returns-to-venus.html&#34;&gt;Back from the Brink: Akatsuki Returns to Venus | The Planetary Society&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;12月14日-追記:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;12月14日 追記&lt;/h3&gt;

&lt;p&gt;地球 swing-by 後の「はやぶさ2」の軌道計算が完了。
予定通り航行しているようだ。
おめでとう！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2015/12/20151214_hayabusa2_j.html&#34;&gt;JAXA | 小惑星探査機「はやぶさ2」の地球スイングバイ実施結果について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1948&#34;&gt;はやぶさ2、軌道変更(スイングバイ)成功を確認 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1951&#34;&gt;「はやぶさ2」の軌道変更(スイングバイ)時に撮影された地球の写真 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gnupg:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;GnuPG 2.1.10 released&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2015q4/000381.html&#34;&gt;[Announce] GnuPG 2.1.10 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はセキュリティ脆弱性関連のアップデートはないが，このバージョンで TOFU (Trust-On-First-Use) 信用モデルをサポートするらしい。
これって SSH のプロトコルで使われている方式かな&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Trust_on_first_use&#34;&gt;Trust on first use - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あぁ，また勉強しないと。
日本語の記事が見当たらないんだが&amp;hellip;&lt;/p&gt;

&lt;p&gt;その他の変更点は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: New trust models &amp;ldquo;tofu&amp;rdquo; and &amp;ldquo;tofu+pgp&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;gpg: New command &amp;ndash;tofu-policy.  New options &amp;ndash;tofu-default-policy and &amp;ndash;tofu-db-format.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;weak-digest to specify hash algorithms which should be considered weak.&lt;/li&gt;
&lt;li&gt;gpg: Allow the use of multiple &amp;ndash;default-key options; take the last available key.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;encrypt-to-default-key.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;unwrap to only strip the encryption layer.&lt;/li&gt;
&lt;li&gt;gpg: New option &amp;ndash;only-sign-text-ids to exclude photo IDs from key signing.&lt;/li&gt;
&lt;li&gt;gpg: Check for ambigious or non-matching key specification in the config file or given to &amp;ndash;encrypt-to.&lt;/li&gt;
&lt;li&gt;gpg: Show the used card reader with &amp;ndash;card-status.&lt;/li&gt;
&lt;li&gt;gpg: Print export statistics and an EXPORTED status line.&lt;/li&gt;
&lt;li&gt;gpg: Allow selecting subkeys by keyid in &amp;ndash;edit-key.&lt;/li&gt;
&lt;li&gt;gpg: Allow updating the expiration time of multiple subkeys at once.&lt;/li&gt;
&lt;li&gt;dirmngr: New option &amp;ndash;use-tor.  For full support this requires libassuan version 2.4.2 and a patched version of libadns (e.g. adns-1.4-g10-7 as used by the standard Windows installer).&lt;/li&gt;
&lt;li&gt;dirmngr: New option &amp;ndash;nameserver to specify the nameserver used in Tor mode.&lt;/li&gt;
&lt;li&gt;dirmngr: Keyservers may again be specified by IP address.&lt;/li&gt;
&lt;li&gt;dirmngr: Fixed problems in resolving keyserver pools.&lt;/li&gt;
&lt;li&gt;dirmngr: Fixed handling of premature termination of TLS streams so that large numbers of keys can be refreshed via hkps.&lt;/li&gt;
&lt;li&gt;gpg: Fixed a regression in &amp;ndash;locate-key [since 2.1.9].&lt;/li&gt;
&lt;li&gt;gpg: Fixed another bug for keyrings with legacy keys.&lt;/li&gt;
&lt;li&gt;gpgsm: Allow combinations of usage flags in &amp;ndash;gen-key.&lt;/li&gt;
&lt;li&gt;Make tilde expansion work with most options.&lt;/li&gt;
&lt;li&gt;Many other cleanups and bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt; gpg --version
gpg (GnuPG) 2.1.10
libgcrypt 1.6.4
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
Supported algorithms:
Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;golang:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;Go 1.5.2 Released&lt;/h2&gt;

&lt;p&gt;今週はアップデートが多いなぁ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.5.minor&#34;&gt;Go 1.5.2 milestone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;細かい不具合の修正がメインのようだ。
セキュリティ関連のバグはないかな。&lt;/p&gt;

&lt;h2 id=&#34;flattr:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;11月の Flattr&lt;/h2&gt;

&lt;p&gt;11月は1件のみ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flattr.com/thing/114786/timestamp/1443655861&#34; title=&#34;SETI@home - Flattr.com&#34;&gt;SETI@home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://flattr.com/&#34; title=&#34;Flattr - Social microdonations&#34;&gt;Flattr&lt;/a&gt; はまたサービスを&lt;a href=&#34;http://blog.flattr.net/2015/11/flattr-developer-update-6-time-to-move/&#34;&gt;改装&lt;/a&gt;してるみたいなのだが，今度はどうなるやら。&lt;/p&gt;

&lt;h2 id=&#34;machine:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;機械創作でクリエイターは失業するか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/special/fukui/20151201_732993.html&#34;&gt;人工知能と著作権　～機械創作の普及でクリエイターは失業するのか？～ -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;別に人工知能を使わなくても今あるもので「機械創作」なるものは可能だろう。&lt;/p&gt;

&lt;p&gt;たとえば「人工無脳」を使えば無限に言葉を紡ぐことができる。
また，今は亡き Mag. さんが公開されていた「&lt;a href=&#34;http://magarchive.halfmoon.jp/vector/chaos/index.html&#34;&gt;Chaos von Eschenbach&lt;/a&gt;」を使えば無限のバリエーションで作曲できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
あとは初音ミクにでも唄わせればいい。&lt;/p&gt;

&lt;p&gt;ほら「機械創作」なんて簡単でしょ。&lt;/p&gt;

&lt;p&gt;でも「人工無脳」や「自動作曲」が紡ぐ言葉や曲を以って「表現」しているとは誰も思わないだろう。
何故ならそこに知性は存在しない（しないと思っている）から。
それでもその知性なき創作に私たちは時に感動を見出す。
たとえば自然現象のような。&lt;/p&gt;

&lt;p&gt;ということは「機械創作」は別の問題を示唆している。
つまり「機械が創作する」ことが問題なのではなく「創作」することに知性が必要なのかということである。
それはたとえば「知的財産権」の論理基盤を根底から覆す可能性を秘めている。&lt;/p&gt;

&lt;p&gt;人工知能は今のところ「問いに答える（応える）」ことはできるが，自ら「問いを立てる」ことはできない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
私は，それこそが「機械」を知性と呼べない（今や最後の）理由だと思う。
IBM の &lt;a href=&#34;http://www.ibm.com/smarterplanet/jp/ja/ibmwatson/&#34;&gt;Watson&lt;/a&gt; がどんなに優秀でも「エキスパート・システム」のバリエーションに留まる限り知性にはならない。&lt;/p&gt;

&lt;p&gt;現実のピノキオはどうやっても人間になれないのである。
もしピノキオが人間になれるなら，そこにいるのは人間ではなく，まったく新しい知性と言える。&lt;/p&gt;

&lt;p&gt;じゃあ「知的労働者」は将来も安泰なのかといえば，全くそんなことはない。
むしろ人工知能は「知的労働」を侵食していくだろう。
何故なら「知的労働」に知性は必要ないのだから。&lt;/p&gt;

&lt;p&gt;決められたコードに従って「創作」しているだけの職業クリエイターこそが人工知能に排除される対象である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magarchive.halfmoon.jp/vector/chaos/copyright.html&#34;&gt;自動作曲と著作権&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/12/08/20151207jukedeck/&#34;&gt;自作のビデオに音楽をつけたい人、作曲サービスJukedeckが著作権のない曲を一瞬で作ってくれる | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;book:1cedb51a0dc72512bc6cbf36d7cc1819&#34;&gt;新刊小説の滅亡&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/04/downfall-of-novels/&#34;&gt;新刊小説は滅亡について考えた方がいい « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いやぁ&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;消費者にとって、新刊小説を買わないことには、メリットがあるからである。&lt;br&gt;
新刊小説は、買わない方がいいからである。&lt;br&gt;
なぜ買わない方がいいのか。どんなメリットがあるのか。それは「新刊小説の滅亡」に書いた。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/04/downfall-of-novels/&#34;&gt;新刊小説は滅亡について考えた方がいい&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;はウケた。
なかなかのセールストークである。
これ見てうっかり『&lt;a href=&#34;http://store.kadokawa.co.jp/shop/g/g321509000668/&#34;&gt;本をめぐる物語&lt;/a&gt;』を買う人もいるかもしれない。
いや，私は買わないけど。&lt;/p&gt;

&lt;p&gt;まぁ，でも，しかし，続きを読めば「なぜ」の答えは書いてあって&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;有体にいえば、一回読んだら置き場所に困るような文学など、買わない方がいい、ということだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/04/downfall-of-novels/&#34;&gt;新刊小説は滅亡について考えた方がいい&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;と結ばれている。&lt;/p&gt;

&lt;p&gt;わたしが15年間に溜め込んだマンガやラノベの山（文字通りの山というか蟻塚）を&lt;a href=&#34;http://text.baldanders.info/remark/2015/0920-diary/&#34;&gt;処分&lt;/a&gt;したら軽トラ山盛り1杯分あった。
これからは紙の本を買うのは仕事に絡む本か余程好きな作家さんのみにしようと心に決めた。
たしかに「一回読んだら置き場所に困るような」紙の本などおよびではない。
買うのなら E ブックで買うか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;， E ブックで買えないのなら図書館へ行くべきだ。&lt;/p&gt;

&lt;p&gt;要するに私たちがしたいことは「本を読む」ことであり「本を所有」することではないということだ。
「所有する」ことにお金を使うバカバカしさに（もはや消費者ではない）ユーザは気づいてしまったのだ。
これはたとえば映像や音楽でも同じ。
ユーザは観て聴いて読むことができるのなら手段は問わない（つまりお金を払っても構わない）し，それを阻もうとするのなら迂回するか，迂回もできないのなら「観て聴いて読む」行為を止めるだけである。&lt;/p&gt;

&lt;p&gt;もう「コンテンツを売って儲ける」ビジネスは破綻している。
それは近代でのみ通用する泡沫のビジネスモデルだったのだろう。&lt;/p&gt;

&lt;p&gt;音楽業界が失くなっても音楽は存在し続けるし，書籍出版業界が失くなっても本は存在し続ける。
そろそろ気づけ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;&lt;code&gt;TOFU&lt;/code&gt; でググってて気がついたんだけど， &lt;a href=&#34;http://www.gnutls.org/&#34;&gt;GnuTLS&lt;/a&gt; ってまだ生きてるんだね。使ってるところってどのくらいあるんだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;当時はこのソフトにメチャメチャはまったものである。他にも自動作曲ソフトには様々なものがある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;推論の過程でいくつかの仮説をたてることはある。が，それも「反応」の一種に過ぎない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;E ブックの実体はクラウドに置かれる。ユーザは E ブックにアクセスする権利を買っているだけで所有しているわけではない。ちなみに図書館は太古からあるクラウドである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1cedb51a0dc72512bc6cbf36d7cc1819:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Windows 用バイナリ・エディタ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/binary-editor/" />
		<id>tag:text.Baldanders.info,2015-12-04:/remark/2015/binary-editor/</id>
		<published>2015-12-04T23:14:34+09:00</published>
		<updated>2015-12-05T17:12:51+09:00</updated>
		<summary>Windows で EBCDIC を扱えるバイナリ・エディタを紹介。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;長らく組込み開発から離れているせいもあるが，昨今めっきりバイナリデータを触る機会が減った。
データを dump out することはあっても&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:021791166dbffd1ec8731dec1d23ca3a:dump&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:021791166dbffd1ec8731dec1d23ca3a:dump&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，直に弄ることは少なくなった。
それでも，全くなくなったわけではなく，そうなった時にいつも「ええつと，バイナリ・エディタってどこにあるっけ？」と探しまわることになるのだ。&lt;/p&gt;

&lt;p&gt;特に最近は EBCDIC，それも PACKED DECIMAL を弄らないといけなくて，たまにモニタを殴りたくなる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://motoama.chu.jp/program/905&#34;&gt;EBICDICで符号付数値型がなんだって？ « motoama&amp;rsquo;s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.simotime.com/datapk01.htm&#34;&gt;Packed-Decimal Format, Description and Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そうでなくても（ASCII コードに慣れてる身としては） EBCDIC は直感的じゃないのに。&lt;/p&gt;

&lt;h2 id=&#34;windows-で使えるバイナリ-エディタ:021791166dbffd1ec8731dec1d23ca3a&#34;&gt;Windows で使えるバイナリ・エディタ&lt;/h2&gt;

&lt;p&gt;というわけで， Windows で使えるバイナリ・エディタ。
実は色々あるのだが， EBCDIC を扱えるとなると以下の3つが妥当だろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vector.co.jp/soft/win95/util/se079072.html&#34; title=&#34;Stirlingの詳細情報 : Vector ソフトを探す！&#34;&gt;Stirling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www002.upp.so-net.ne.jp/janus/xedit.html&#34; title=&#34;ROM化支援バイナリエディタ - xedit -&#34;&gt;xedit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vector.co.jp/soft/win95/util/se079072.html&#34; title=&#34;Stirlingの詳細情報 : Vector ソフトを探す！&#34;&gt;Stirling&lt;/a&gt; はかなり古いアプリケーションで，最新版の 1.31 が出たのは1999年のようだ。
古いのがいけないわけではないが（実際，現在でも遜色ないほど高機能で職場で使ってる人もいる），流石に15年以上前のものを使うのはねぇ&amp;hellip;&lt;/p&gt;

&lt;p&gt;というわけで，残りの2つが個人的におすすめなのだが，今回は &lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt; を紹介する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:021791166dbffd1ec8731dec1d23ca3a:xe&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:021791166dbffd1ec8731dec1d23ca3a:xe&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;binary-editor-bz:021791166dbffd1ec8731dec1d23ca3a&#34;&gt;Binary Editor Bz&lt;/h2&gt;

&lt;p&gt;知る人ぞ知るだが， &lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt; のオリジナルはあの &lt;a href=&#34;http://www.vcraft.jp/&#34;&gt;c.mos&lt;/a&gt; さんによるものである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:021791166dbffd1ec8731dec1d23ca3a:cmos&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:021791166dbffd1ec8731dec1d23ca3a:cmos&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
で，そのオリジナルのコードを &lt;a href=&#34;https://github.com/devil-tamachan&#34;&gt;devil.tamachan&lt;/a&gt; さんが改造したのが今回紹介する &lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt; である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devil-tamachan.github.io/BZDoc/&#34;&gt;Binary Editor BZ&lt;/a&gt; : ヘルプページ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;現時点での最新版は &lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz/releases/tag/v1.9.7.1&#34;&gt;1.9.7.1&lt;/a&gt;。
Portable 版の zip ファイルの中身を適当なフォルダにコピーして起動すればよい。
簡単！&lt;/p&gt;

&lt;p&gt;ただし，最新のバージョンは &lt;code&gt;EBCDIC.def&lt;/code&gt; ファイルがないため，そのままでは EBCDIC で表示できない。
&lt;code&gt;EBCDIC.def&lt;/code&gt; ファイルはググれば見つかると思うが，一応&lt;a href=&#34;http://text.baldanders.info/material/bz/EBCDIC.def&#34;&gt;ここ&lt;/a&gt;にも置いておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt; では ASCII や EBCDIC の他， Shift-JIS, JIS, EUC や Unicode 系の文字エンコードィングにも（一応）対応している。
その他の特徴としては&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;既定で書き込み禁止（間違って弄らないようにするため）&lt;/li&gt;
&lt;li&gt;構造体解析が可能&lt;/li&gt;
&lt;li&gt;データをビットマップで俯瞰できる&lt;/li&gt;
&lt;li&gt;オフセットジャンプ（カーソル位置の値分だけジャンプする）&lt;/li&gt;
&lt;li&gt;画面を2分割まで可能&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ってとこかな。
個人的にはこれで必要十分。
贅沢を言えば 10GB 程度のファイル&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:021791166dbffd1ec8731dec1d23ca3a:file&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:021791166dbffd1ec8731dec1d23ca3a:file&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; を読み込んでもへこたれないでほしいものだが，まぁそこは無理は言うまい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:021791166dbffd1ec8731dec1d23ca3a:size&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:021791166dbffd1ec8731dec1d23ca3a:size&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:021791166dbffd1ec8731dec1d23ca3a:dump&#34;&gt;データを dump out するだけならいくらでも手段がある。懐かしいところだと UNIX 系の &lt;code&gt;od&lt;/code&gt; コマンドとかあるし（&lt;code&gt;-tx1z&lt;/code&gt; とかオプションを付けると幸せ），大抵のスクリプト言語なら手軽に dump out できる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:021791166dbffd1ec8731dec1d23ca3a:dump&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:021791166dbffd1ec8731dec1d23ca3a:xe&#34;&gt;&lt;a href=&#34;http://www002.upp.so-net.ne.jp/janus/xedit.html&#34; title=&#34;ROM化支援バイナリエディタ - xedit -&#34;&gt;xedit&lt;/a&gt; は組込み向けの開発に向いているが，今回は割愛する。ちなみに EBCDIC 対応でもカナや漢字をまともに扱えるものは存在しない。そもそもカナや漢字は汎用機ごとに方言がキツい（たとえ Shift-JIS でも旧 JIS だったりする）ので，汎用のツールはないと考えたほうがいい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:021791166dbffd1ec8731dec1d23ca3a:xe&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:021791166dbffd1ec8731dec1d23ca3a:cmos&#34;&gt;&lt;a href=&#34;http://www.vcraft.jp/&#34;&gt;c.mos&lt;/a&gt; さんといえば Vz Editor。私たちの世代から見れば神のようなお方である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:021791166dbffd1ec8731dec1d23ca3a:cmos&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:021791166dbffd1ec8731dec1d23ca3a:file&#34;&gt;そういうのがあるんだってば，どってんばってん。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:021791166dbffd1ec8731dec1d23ca3a:file&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:021791166dbffd1ec8731dec1d23ca3a:size&#34;&gt;&lt;a href=&#34;https://github.com/devil-tamachan/binaryeditorbz&#34; title=&#34;devil-tamachan/binaryeditorbz&#34;&gt;Bz&lt;/a&gt; は今のところ 4GB までしか扱えない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:021791166dbffd1ec8731dec1d23ca3a:size&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM Editor で Amazon Associate ID を含んだ商品 URL を生成する - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/insert-amazon-url-with-associate-id-in-atom-editor/" />
		<id>tag:text.Baldanders.info,2015-11-27:/remark/2015/insert-amazon-url-with-associate-id-in-atom-editor/</id>
		<published>2015-11-27T22:20:50+09:00</published>
		<updated>2015-11-27T22:20:50+09:00</updated>
		<summary>昔，結城浩さんが Amazon の商品 URL を変換する秀丸マクロを公開されていて， ATOM Editor では使えないためどうしたものかと思っていたのだが，先日 init.coffee に簡単なコマンドを書く方法を習ったので移植してみた。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;昔，結城浩さんが Amazon の商品 URL を変換する秀丸マクロを公開されていて&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/hyuki/20120413/amazon&#34;&gt;アマゾン・アソシエイトID（アフィリエイト用のID）を含んだ商品URLを生成する秀丸マクロ - 結城浩のはてな日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これがとても便利で重宝していたのだが， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor では使えないためどうしたものかと思っていた。
で，先日 &lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/&#34;&gt;&lt;code&gt;init.coffee&lt;/code&gt; に簡単なコマンドを書く方法を習った&lt;/a&gt;ので，上の秀丸マクロを &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor に移植してみた。&lt;/p&gt;

&lt;p&gt;以下が &lt;code&gt;init.coffee&lt;/code&gt; に追記する内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;# Amazon Associate ID を含んだ商品 URL を生成する
#  クリップボードの内容を読み込み，変換してセットする
#  http(s)://www.amazon.co.jp/... から始まる文字列を想定
#  /dp/XXXXXXXXXX または /ASIN/XXXXXXXXXX のパタンを探す
#  変換できない場合はクリップボードの内容をそのままセットする
# refs http://d.hatena.ne.jp/hyuki/20120413/amazon
amazonUrl = (id) -&amp;gt;
  url = atom.clipboard.read()
  re = /^htt(?:p|ps):\/\/www.amazon.co.jp\//
  if !re.test(url)
    return url
  result = url.match(/\/(?:dp|ASIN)\/(.{10})/)
  if result == null
    return url
  else if result.length &amp;lt; 2
    return url
  asin = result[1]
  if id == &amp;quot;&amp;quot;
    &amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/#{asin}/&amp;quot;
  else
    &amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/#{asin}/#{id}/&amp;quot;

insertText = (str) -&amp;gt;
  return unless editor = atom.workspace.getActiveTextEditor()
  selection = editor.getLastSelection()
  selection.insertText(str)

atom.commands.add &#39;atom-text-editor&#39;, &#39;my-tools:amazon&#39;, -&amp;gt;
  id = &#39;&#39; # Amazon Associate ID
  insertText(amazonUrl(id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コードがやっつけでダサいのはご勘弁ということで&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:028833c50231051bae73e587c9bed4d5:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
&lt;code&gt;insertText&lt;/code&gt; 関数は&lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/&#34;&gt;前のとき&lt;/a&gt;の使い回し。&lt;/p&gt;

&lt;p&gt;これで &lt;code&gt;id&lt;/code&gt; に Associate ID （たとえば私の &lt;code&gt;baldandersinf-22&lt;/code&gt;）をセットして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.amazon.co.jp/%E6%95%B0%E5%AD%A6%E3%82%AC%E3%83%BC%E3%83%AB-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797341378
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をクリップボードにコピーした状態でコマンドパレットから「My Tools: Amazon」を起動すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.amazon.co.jp/exec/obidos/ASIN/4797341378/baldandersinf-22/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出力される。
変換できない場合はクリップボードの内容をそのまま出力する。&lt;/p&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;h2 id=&#34;参考:028833c50231051bae73e587c9bed4d5&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/docs/api/&#34;&gt;Atom API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_Expressions&#34;&gt;正規表現 - JavaScript | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.softel.co.jp/labs/tools/regex/&#34;&gt;正規表現チェッカー（JavaScript版） | Softel labs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt; は慣れん。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Security Advisory Gpg4win - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/security-advisory-gpg4win/" />
		<id>tag:text.Baldanders.info,2015-11-25:/remark/2015/security-advisory-gpg4win/</id>
		<published>2015-11-25T21:49:56+09:00</published>
		<updated>2015-11-25T21:49:56+09:00</updated>
		<summary>今回の Gpg4win のリリースはセキュリティ・アップデートを含み， Advisory も併せてリリースされている。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;Windows 用の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を含む暗号ツール群 &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; の 2.3.0 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lists.wald.intevation.org/pipermail/gpg4win-announce/2015-November/000067.html&#34;&gt;Gpg4win-announce: Gpg4win 2.3.0 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回のリリースはセキュリティ・アップデートを含み， Advisory も併せてリリースされている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lists.wald.intevation.org/pipermail/gpg4win-announce/2015-November/000066.html&#34;&gt;[Gpg4win-announce] Security Advisory Ggp4win 2015-11-25&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容は以下のとおり。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The installer will load and execute other code if it is placed in the same directory as a DLL with the right name.  This &amp;ldquo;current directory attack&amp;rdquo; or &amp;ldquo;dll preloading attack&amp;rdquo; can be part of a remote exploitation for example if the Gpg4win installer is downloaded to a common Downloads directory and the attacker can previously place files there by tricking a user or other software to download files with a specific name to the same place. If the Gpg4win installer is then executed, the other code may run, while the user believes to run only the Gpg4win installer.&lt;/li&gt;
&lt;li&gt;There is a &amp;ldquo;local privilege escalation&amp;rdquo; during an installer run.  Installer runs can happen during a fresh, an update install or a deinstallation. With Windows Vista or later an administrator can log in as user and give higher privileges to a single process using the User Account Control mechanism (UAC). If the installer is started in this way, there is a time window where an attacker running with user privileges can insert code in a temporary directory of the installer that will be executed with the higher privileges bypassing the UAC.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;まぁ Windows ではありがちな脆弱性である。
GnuPG 自体に問題があるわけではなく，&lt;a href=&#34;http://sourceforge.net/p/nsis/bugs/1125/&#34; title=&#34;NSIS: Nullsoft Scriptable Install System / Bugs / #1125 Code execution / Privilege escalation problems with NSIS installers&#34;&gt;インストーラのバグ&lt;/a&gt;っぽい。&lt;/p&gt;

&lt;p&gt;世の中は&lt;a href=&#34;http://text.baldanders.info/remark/2015/use-the-signal-luke/&#34;&gt;10人にひとりもまともに OpenPGP 製品を使えない&lt;/a&gt;らしいのに &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; を使ってる人がどの程度いるのかかなり怪しいのだが，まぁ一応。&lt;/p&gt;

&lt;p&gt;影響度はよく分からないが， DLL プリロード攻撃の脆弱性も権限昇格の脆弱性も割とヤバめなので，さっさとアップデートすることをおすすめする。
ひょっとして，これ他の Windows 向けオンラインソフトにも影響出るかなぁ。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>行末の空白文字を削除する - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/trim-trailing-whitespace/" />
		<id>tag:text.Baldanders.info,2015-11-23:/remark/2015/trim-trailing-whitespace/</id>
		<published>2015-11-23T20:42:06+09:00</published>
		<updated>2015-11-23T20:42:06+09:00</updated>
		<summary>行末の空白文字を削除する小ネタ。いや，たまに使おうとすると忘れてるんだよね。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;テキストエディタで行末の空白文字を削除する小ネタ。
いや，たまに使おうとすると忘れてるんだよね。&lt;/p&gt;

&lt;h2 id=&#34;atom-editor-の場合:b7eb25d7668de56fd3123c625cd97081&#34;&gt;ATOM Editor の場合&lt;/h2&gt;

&lt;p&gt;以前は行末の処理は &lt;a href=&#34;https://atom.io/packages/editorconfig&#34; title=&#34;editorconfig&#34;&gt;editorconfig&lt;/a&gt; でできてたはずなんだけど，いつの間にか &lt;code&gt;trim_trailing_whitespace&lt;/code&gt; と &lt;code&gt;insert_final_newline&lt;/code&gt; は “doesn&amp;rsquo;t work yet” になってる。
それとも私の勘違いだったのか。&lt;/p&gt;

&lt;p&gt;気を取り直して。&lt;/p&gt;

&lt;p&gt;行末の空白を一気に削除したいならコマンドパレットで &lt;code&gt;whitespace&lt;/code&gt; を検索すると “Remove Trailing Whitespace” があるので，これを実行する。
保存するたびに自動的に行末の空白文字を削除したいのであれば &lt;a href=&#34;https://atom.io/packages/whitespace&#34; title=&#34;whitespace&#34;&gt;whitespace&lt;/a&gt; の Settings にある “Remove Trailing Whitespace” を有効にする。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/23214924646/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/778/23214924646_fb830df03b.jpg&#34; alt=&#34;settings for whitespace (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23214924646/&#34;&gt;settings for whitespace (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おまけだが，同じ Settings 画面で “Ensure Single Trailing Newline” を有効にすると，テキストファイル末尾が改行になっていない場合は改行を補ってくれる。
他にもこまごまとした設定があり，しかもファイルタイプごとに設定できるようだ。
でもファイルタイプではなく &lt;a href=&#34;https://atom.io/packages/editorconfig&#34; title=&#34;editorconfig&#34;&gt;editorconfig&lt;/a&gt; でコントロールできるようになってほしい。&lt;/p&gt;

&lt;p&gt;もうひとつ余談だが， &lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;Go 言語環境&lt;/a&gt;ではコードの整形を行う際に &lt;a href=&#34;https://atom.io/packages/whitespace&#34; title=&#34;whitespace&#34;&gt;whitespace&lt;/a&gt; の設定に関係なく行末の空白を削除してくれる。
他の言語でも整形ツールがあれば同様にできるかも。&lt;/p&gt;

&lt;h2 id=&#34;秀丸またはサクラエディタの場合:b7eb25d7668de56fd3123c625cd97081&#34;&gt;秀丸またはサクラエディタの場合&lt;/h2&gt;

&lt;p&gt;現在，ほとんどの作業は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に移行できているのだが，巨大ファイルを扱う場合などはまだ&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;等&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; のお世話になっている。
&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;ではファイルタイプごとに保存時に行末の空白を削除するかどうか設定できる。
あるいは置換機能を使う方法もある。
手順は以下の通り。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;「検索文字列」に &lt;strong&gt;&lt;code&gt;[ 　\t]+$&lt;/code&gt;&lt;/strong&gt; を指定する（行末の半角空白，全角空白，タブ文字を正規表現で指定する）&lt;/li&gt;
&lt;li&gt;「置換文字列」はブランクにする（何もセットしない）&lt;/li&gt;
&lt;li&gt;「正規表現」の項目にチェックを入れて置換を開始する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ちなみに同様の手順は&lt;a href=&#34;http://sakura-editor.sourceforge.net/&#34; title=&#34;サクラエディタ&#34;&gt;サクラエディタ&lt;/a&gt;でも使える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
てか， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; も含め置換処理に正規表現が使えるエディタならたいてい使える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;職場では&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;が NG の場合もあるので，その場合は&lt;a href=&#34;http://sakura-editor.sourceforge.net/&#34; title=&#34;サクラエディタ&#34;&gt;サクラエディタ&lt;/a&gt;で代替えしている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;&lt;a href=&#34;http://sakura-editor.sourceforge.net/&#34; title=&#34;サクラエディタ&#34;&gt;サクラエディタ&lt;/a&gt;では「タイプ別設定」の「スクリーン → インデント」の項目で「改行時に末尾の空白を削除」にチェックを入れることで行末の空白を自動的に削除できる。なんでこんな変なところに設定項目があるんだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;でも正規表現ってあまり得意じゃないので，普段は忘れてるんだよなぁ。昔，正規表現を簡単に組み立てることのできるツールがあって重宝していたが，マシンを replace していくうちに行方不明になっちゃった。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM で Go - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/golang-with-atom/" />
		<id>tag:text.Baldanders.info,2015-11-21:/golang/golang-with-atom/</id>
		<published>2015-11-21T14:19:02+09:00</published>
		<updated>2015-11-27T14:31:41+09:00</updated>
		<summary>ATOM Editor で Go 言語のコーディング環境を整える。 go-plus パッケージの導入について。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回もまた横道に逸れてツールの話。
&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のコーディング環境を整える。
環境を作る度に「どうだったっけ」とあちこちサイトを巡るので，覚え書きとしてまとめておく。&lt;/p&gt;

&lt;p&gt;例によって Windows 環境を前提にしているので，他の環境の方は適当に脳内補完してください。&lt;/p&gt;

&lt;h2 id=&#34;開発支援ツールの導入:19f55614c00d490a9959ede6566335af&#34;&gt;開発支援ツールの導入&lt;/h2&gt;

&lt;p&gt;まずは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援ツールを導入する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt; go get -v golang.org/x/tools/cmd/vet
C:&amp;gt; go get -v golang.org/x/tools/cmd/goimports
C:&amp;gt; go get -v golang.org/x/tools/cmd/oracle
C:&amp;gt; go get -v github.com/golang/lint/golint
C:&amp;gt; go get -v github.com/nsf/gocode
C:&amp;gt; go get -v github.com/rogpeppe/godef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/lint&#34; title=&#34;golang/lint&#34;&gt;golint&lt;/a&gt; は，いわゆる lint ツール。
&lt;a href=&#34;https://golang.org/cmd/vet/&#34; title=&#34;vet - The Go Programming Language&#34;&gt;vet&lt;/a&gt; もコードの静的検査ツール。
両方あると幸せになれる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/goimports&#34; title=&#34;goimports - GoDoc&#34;&gt;goimport&lt;/a&gt; はコード整形ツールで，標準の &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; を置き換えることができ，かつ &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; よりも若干かしこい。
&lt;a href=&#34;https://github.com/nsf/gocode&#34; title=&#34;nsf/gocode&#34;&gt;gocode&lt;/a&gt; は入力補完ツール。
&lt;a href=&#34;https://github.com/rogpeppe/godef&#34; title=&#34;rogpeppe/godef&#34;&gt;godef&lt;/a&gt; は指定したシンボルの定義定義元情報を出力するツール（出力を使って定義元へジャンプできる。実際には &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/oracle&#34; title=&#34;oracle - GoDoc&#34;&gt;oracle&lt;/a&gt; と併用するらしい）。
いずれも vim や emacs などでは有名だが &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; でも使える。&lt;/p&gt;

&lt;p&gt;言わずもがなだが，これらのツールには PATH を通しておくこと。
&lt;code&gt;%GOPATH%\bin&lt;/code&gt; フォルダにパスを通しておけばいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;go-plus-パッケージの導入:19f55614c00d490a9959ede6566335af&#34;&gt;go-plus パッケージの導入&lt;/h2&gt;

&lt;p&gt;では，上述のツールを操作できる &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージを導入する。
やり方は Settings 画面（&lt;code&gt;ctrl+,&lt;/code&gt; で起動）で Install してもいいし &lt;code&gt;apm&lt;/code&gt; コマンドを使ってもよい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; には設定項目がいくつかあるが，ほとんど既定値のままで使える。
コマンドパレットから &lt;code&gt;golang&lt;/code&gt; をキーワードに検索すると山程機能があるのが分かるだろう。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22710708563/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5794/22710708563_3d4aca2709.jpg&#34; alt=&#34;menu of go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22710708563/&#34;&gt;menu of go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;既定ではソースファイルを保存する度にコード整形や lint 等が走る。
これを制御したい場合はパッケージの Setting で以下の項目を調整すればよい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/735/22767398347_ed9329653a.jpg&#34; alt=&#34;settings for go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;settings for go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;定義ファイルへのジャンプと復帰は &lt;code&gt;alt-cmd-g&lt;/code&gt; および &lt;code&gt;alt-shift-cmd-G&lt;/code&gt; にバインドされているが Windows 環境では動かないので（コマンドパレットから起動してもいいのだが）適当なキーに再割当てするといいだろう。
ファンクションキーは結構空いてるので，たとえば&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Keystroke&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Selector&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef-return&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;とアサインするなら &lt;code&gt;%USERPROFILE%\.atom\keymap.cson&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&#39;:
  &#39;f12&#39;: &#39;golang:godef&#39;
  &#39;shift-f12&#39;: &#39;golang:godef-return&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と設定すればいい。&lt;/p&gt;

&lt;p&gt;lint や定義ファイルのジャンプは &lt;code&gt;GOPATH&lt;/code&gt; や &lt;code&gt;GOROOT&lt;/code&gt; を見て外部パッケージを判断しているのだが， &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; のようなツールでは &lt;code&gt;GOPATH&lt;/code&gt; をコマンド内部で書き換えて実行するので lint ツールとは整合性が取れなくなる。
&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; の設定では &lt;code&gt;GOPATH&lt;/code&gt; を上書きすることも可能なので，とりあえずこれで回避する方法もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:19f55614c00d490a9959ede6566335af:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/23233956325/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5821/23233956325_0ddf55e61a.jpg&#34; alt=&#34;settings for go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23233956325/&#34;&gt;settings for go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; への対応は “Planned Features” に挙がってるので，将来的には小細工しなくても &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; ベースの開発ができるようになるかもしれない。
てか，なってほしい。&lt;/p&gt;

&lt;h2 id=&#34;language-go-パッケージは同梱済み:19f55614c00d490a9959ede6566335af&#34;&gt;language-go パッケージは同梱済み&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-go&#34; title=&#34;language-go&#34;&gt;language-go&lt;/a&gt; は Core パッケージに入っているためインストール時点で既に入っている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:19f55614c00d490a9959ede6566335af:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://atom.io/packages/language-go&#34; title=&#34;language-go&#34;&gt;language-go&lt;/a&gt; の機能で目を引くのはやはり Snippets だろう。
以下はその一部（パッケージの Settings に一覧がある）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22712254763/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5675/22712254763_f8fb9f6735.jpg&#34; alt=&#34;Snippets for golang (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22712254763/&#34;&gt;Snippets for golang (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;こんなよぅけ覚えれるか！ まぁとりあえず，よく使うものだけ覚えておけばいいのだろうけど。&lt;/p&gt;

&lt;p&gt;使い方は，トリガーとなる文字列を入力して tab キーを押す。
たとえば &lt;code&gt;func&lt;/code&gt; と入力して tab キーを押すと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ()  {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と展開される。
&lt;code&gt;iferr&lt;/code&gt; なら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err != nil {
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;h2 id=&#34;go-find-references-パッケージが惜しい:19f55614c00d490a9959ede6566335af&#34;&gt;go-find-references パッケージが惜しい&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-find-references&#34; title=&#34;go-find-references&#34;&gt;go-find-references&lt;/a&gt; パッケージは &lt;a href=&#34;https://github.com/redefiance/go-find-references&#34;&gt;redefiance/go-find-references&lt;/a&gt; を使って指定したシンボルを参照しているファイルを列挙してくれる便利ツールだが， Windows 環境ではタグジャンプが上手く動かない。
どうやら &lt;code&gt;C:&lt;/code&gt; などのドライブレターを上手く処理できないようだ。
とほほ。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:19f55614c00d490a9959ede6566335af&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/fcd25db64f341ad2471f&#34;&gt;struct にアノテーションつけてたら go vet . すべき - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/osamingo/items/d5ec42fb8587d857310a&#34;&gt;これからGo言語を書く人への三種の神器 - Qiita&lt;/a&gt; : &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;goimports&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt; で正しいコードを書きましょう。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;code&gt;GOPATH&lt;/code&gt; を &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; の設定で上書きする場合は “Environment Overrides Config” を&lt;strong&gt;無効にする&lt;/strong&gt;こと。なんでかこれ，毎回ハマるんだよなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;code&gt;language&lt;/code&gt; でインストール済みパッケージを検索するとメジャーな言語は大抵入っているのが分かる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ルークよ， Signal を使え！ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/use-the-signal-luke/" />
		<id>tag:text.Baldanders.info,2015-11-14:/remark/2015/use-the-signal-luke/</id>
		<published>2015-11-14T06:25:40+09:00</published>
		<updated>2015-11-14T06:25:40+09:00</updated>
		<summary>TextSecure は Signal に統合された。Signal は SMS を置き換えることができ，ローカルストレージにあるログもちゃんと暗号化される。オススメである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;「&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20151112/jonnycantencrypt&#34;&gt;なぜジョニーは今もやっぱり暗号化できないのか：現在のPGPクライアントの使いやすさ評価 - YAMDAS現更新履歴&lt;/a&gt;」経由。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://arxiv.org/pdf/1510.08555.pdf&#34;&gt;Why Johnny Still, Still Can’t Encrypt: Evaluating the Usability of a Modern PGP Client&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://boingboing.net/2015/11/06/why-do-encryption-tools-suck.html&#34;&gt;Why do encryption tools suck? / Boing Boing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;タイトルだけ見て最初に思ったのは「PGP ってゆーな&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6649b65a6ffc9428af54253099b2dda3:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6649b65a6ffc9428af54253099b2dda3:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」だったが，それはともかく&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;In our study of 20 participants, grouped into 10 pairs of participants who attempted to exchange encrypted email, only one pair was able to successfully complete the assigned tasks using Mailvelope. All other participants were unable to complete the assigned task in the one hour allotted to the study.
This demonstrates that encrypting email with PGP, as implemented in Mailvelope, is still unusable for the masses.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://arxiv.org/pdf/1510.08555.pdf&#34;&gt;Why Johnny Still, Still Can’t Encrypt: Evaluating the Usability of a Modern PGP Client&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;10% 以下かよ orz&lt;/p&gt;

&lt;p&gt;1990年代からカジュアルに PGP を使ってて，あまつさえ &lt;a href=&#34;http://hp.vector.co.jp/authors/VA023900/gpg-pin/&#34;&gt;Becky! 用のプラグイン&lt;/a&gt;まで自作してしまった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6649b65a6ffc9428af54253099b2dda3:a2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6649b65a6ffc9428af54253099b2dda3:a2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 身としては，かなり衝撃的ではあったが，まぁそんなもんかなぁ。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://www.mailvelope.com/&#34; title=&#34;Mailvelope&#34;&gt;Mailvelope&lt;/a&gt; は Chrome や Firefox の拡張機能として使える MUA（Mail User Agent）で， Gmail などと連携して使える。
&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000782.shtml&#34; title=&#34;安全なメッセージング・アプリとは（追記あり） — Baldanders.info&#34;&gt;以前にも紹介&lt;/a&gt;したが， &lt;a href=&#34;https://www.eff.org/secure-messaging-scorecard&#34;&gt;EFF の Secure Messaging Scorecard&lt;/a&gt; で MUA の中では（PFS の項目を除いて&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6649b65a6ffc9428af54253099b2dda3:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6649b65a6ffc9428af54253099b2dda3:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;）唯一満点だった製品である。
&lt;a href=&#34;https://www.mailvelope.com/&#34; title=&#34;Mailvelope&#34;&gt;Mailvelope&lt;/a&gt; は &lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 実装を含んでいるため &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; や &lt;a href=&#34;https://www.symantec.com/encryption/&#34; title=&#34;PGP Encryption Software | Symantec&#34;&gt;PGP&lt;/a&gt; のような製品を必要としない利点がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://security.hondaclinic.jp/%E6%9A%97%E5%8F%B7%E3%81%AE%E3%81%99%E3%81%99%E3%82%81/mailvelope%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/&#34;&gt;mailvelopeの使い方 | セキュリティの意識と知識&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この論文については Bruce Schneier さんも言及している。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;I have recently come to the conclusion that e-mail is fundamentally unsecurable. The things we want out of e-mail, and an e-mail system, are not readily compatible with encryption. I advise people who want communications security to not use e-mail, but instead use an encrypted message client like &lt;a href=&#34;https://otr.cypherpunks.ca/&#34;&gt;OTR&lt;/a&gt; or &lt;a href=&#34;https://whispersystems.org/&#34;&gt;Signal&lt;/a&gt;.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2015/11/testing_the_usa.html&#34;&gt;Testing the Usability of PGP Encryption Tools - Schneier on Security&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;正論ですね。
そういうことです。&lt;/p&gt;

&lt;p&gt;そういえば， &lt;a href=&#34;https://whispersystems.org/&#34;&gt;Open Whisper Systems&lt;/a&gt; の TextSecure は Signal に統合された。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://whispersystems.org/blog/just-signal/&#34;&gt;Open Whisper Systems &amp;gt;&amp;gt; Blog &amp;gt;&amp;gt; Just Signal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.thoughtcrime.securesms&#34;&gt;Signal Private Messenger - Google Play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;暗号化通話アプリの RedPhone も Signal に統合された。
Signal は SMS を置き換えることができ，ローカルストレージにあるログもちゃんと暗号化される。
オススメである。&lt;/p&gt;

&lt;p&gt;いや，もう，マジ LINE とか捨てて欲しい。
Facebook もくだらない「&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/13/news077.html&#34;&gt;セキュリティ劇場&lt;/a&gt;」で遊んでないで， OTR くらい組み込めや。&lt;/p&gt;

&lt;p&gt;メッセージングの主体が PC からスマホなどの携帯端末にシフトしている状態で電子メールの有効性は下がってきていると思う。
もちろん仕事などではまだまだ PC や Workstation を使うことも多いし，対外的には電子メールが主体になると思うけど，たとえばグループウェアに XMPP＋OTR を組み込んでいくなら，やはり電子メールは無用の長物になっていくだろう。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;375&#34; src=&#34;https://www.youtube-nocookie.com/embed/o2we_B6hDrY&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;/figure&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;第3版出た！ てか，もう Kindle 版出てるのか。紙の本買うのはやまったかなぁ。 SHA-3 や BitCoin/BlockChain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6649b65a6ffc9428af54253099b2dda3:a&#34;&gt;昔はともかく，現在 &lt;a href=&#34;https://www.symantec.com/encryption/&#34; title=&#34;PGP Encryption Software | Symantec&#34;&gt;PGP&lt;/a&gt; は Symantic 社の製品名であり，いくつかある &lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 実装のひとつにすぎない。余談だが，確かに &lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 用の「公開鍵サーバ」というのは存在しているが， &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; も &lt;a href=&#34;https://www.symantec.com/encryption/&#34; title=&#34;PGP Encryption Software | Symantec&#34;&gt;PGP&lt;/a&gt; も，今回紹介する &lt;a href=&#34;https://www.mailvelope.com/&#34; title=&#34;Mailvelope&#34;&gt;Mailvelope&lt;/a&gt; も別にクライアントというわけではなく，スタンドアロンで動作するプログラムである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6649b65a6ffc9428af54253099b2dda3:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6649b65a6ffc9428af54253099b2dda3:a2&#34;&gt;現在，このプラグインはメンテナンスされてない。使わないように。 Windows パソコンでメールの暗号化がしたいなら &lt;a href=&#34;https://www.mozilla.org/thunderbird/&#34;&gt;Thunderbird&lt;/a&gt;＋&lt;a href=&#34;https://addons.mozilla.org/thunderbird/addon/enigmail/&#34;&gt;Enigmail&lt;/a&gt; がオススメである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6649b65a6ffc9428af54253099b2dda3:a2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6649b65a6ffc9428af54253099b2dda3:b&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000782.shtml&#34; title=&#34;安全なメッセージング・アプリとは（追記あり） — Baldanders.info&#34;&gt;前にも書いた&lt;/a&gt;が， MUA はその性質上 PFS（Perfect Forward Secrecy）を満たせない。 PFS は通信経路の暗号化や IM（Instant Messaging）など使い捨てのメッセージを扱う場合には必要な要件だが，電子メールには向いていない。電子メールは過去のやり取りに対して「否認防止（non-repudiation）」できなければならないからだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6649b65a6ffc9428af54253099b2dda3:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
