<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Helloworld - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/helloworld/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/helloworld/index.xml" />
	<id>tag:text.Baldanders.info,2015-09-12T11:26:44+0900:/</id>
	<updated>2015-09-12T11:26:44+0900</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>インストールから Hello World まで - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/hello/" />
		<id>tag:text.Baldanders.info,2015-09-12T11:26:44+0900:/golang/hello/</id>
		<published>2015-09-12T11:26:44+0900</published>
		<updated>2015-09-12T11:26:44+0900</updated>
		<summary>みんなだいすき Hello World!</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/dca0df389df1470bdbfa&#34;&gt;はじめての Go 言語 (on Windows) - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;最初に言い訳しておくと，現時点での私の主要マシンは Windows 機なため， Windows 上での動作を前提としている。
ただし Go 言語コンパイラはマルチプラットフォームに対応しているため，操作に関してはほぼ同じと考えてよい。
Linux 等のマシンを使っている方は適当に読み替えて欲しい（簡単でしょ）。&lt;/p&gt;

&lt;h2 id=&#34;go-コンパイラのインストール-on-windows:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;Go コンパイラのインストール（on Windows）&lt;/h2&gt;

&lt;p&gt;Go言語はコンパイル言語である。
プラットフォームとして FreeBSD, Lunux, Mac OS X, Windows などがある。
また，クロスコンパイルが比較的容易なことでも知られている。&lt;/p&gt;

&lt;p&gt;現時点（2015-09-08）での Go コンパイラの最新版は 1.5.1。
Windows 版では&lt;a href=&#34;https://golang.org/dl/&#34;&gt;ダウンロードページ&lt;/a&gt;にインストール・パッケージが用意されているので，ダウンロードしてインストールすればよい。&lt;/p&gt;

&lt;p&gt;Go コンパイラが最低限動作するのに必要な環境変数は（&lt;code&gt;PATH&lt;/code&gt; を除けば） &lt;code&gt;GOROOT&lt;/code&gt; のみである。
Windows 版の場合は，インストール・パッケージからインストールすれば自動的に環境変数もセットされる。
セットされていない場合は手動で &lt;code&gt;GOROOT&lt;/code&gt; にインストール先のフォルダを指定すればいい。
（参考： &lt;a href=&#34;http://qiita.com/rohinomiya/items/cf5236678b3459da9017&#34;&gt;Windows - SETX コマンドで環境変数を永続的に設定する - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;インストールができたら動作確認。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go version
go version go1.5 windows/amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;みんなだいすき-hello-world:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;みんなだいすき Hello World!&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	fmt.Println(&amp;quot;Hello World!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このソースコード &lt;code&gt;hello.go&lt;/code&gt; を compile and run。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run hello.go
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おおっ，動いた動いた。じゃあこれを build して，実行モジュールを起動してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go build hello.go

C:&amp;gt;hello.exe
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よし。ちゃんと動くようだな。
今回はここまで。&lt;/p&gt;

&lt;h2 id=&#34;おまけ-1-5-系へのアップグレードに関する注意点:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;【おまけ】 1.5 系へのアップグレードに関する注意点&lt;/h2&gt;

&lt;p&gt;Windows 版（64bit）のインストールパッケージで 1.4 系から 1.5 系へ上書きインストールしようとしたらエラーになった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/20692976166/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5759/20692976166_a38bee50d8_o.png&#34; alt=&#34;Install Error&#34; title=&#34;Install Error&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この場合は，コントロールパネルの「プログラムと機能」で既存のバージョンをアンインストールしてから最新バージョンをインストールし直せば OK。&lt;/p&gt;

&lt;p&gt;1.5 系から Go コンパイラ自身で自身をコンパイルできるようになった。
この影響で， Linux 環境などでは 1.5 系を導入するために 1.4 系の Go コンパイラをあらかじめインストールする必要がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taji-taji/items/4c43e126e67d65a219e3&#34;&gt;Go 1.3 から 1.5 へのアップデートでエラー - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ブックマーク:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;The Go Programming Language&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/&#34;&gt;git repositories (Google)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang&#34;&gt;git repositories (GitHub)&lt;/a&gt; : mirror&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang-jp.org/&#34;&gt;golang-jp - The Go Programming Language&lt;/a&gt; : 本家の日本語訳サイト（一部のみ）。（&lt;a href=&#34;http://golang.jp/&#34;&gt;golang.jp&lt;/a&gt; は古いので参考にしない方がいい，らしい）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>インストールから Hello World まで - hugo</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/hugo/hello/" />
		<id>tag:text.Baldanders.info,2015-09-11T17:58:23+0900:/hugo/hello/</id>
		<published>2015-09-11T17:58:23+0900</published>
		<updated>2015-09-12T12:25:00+0900</updated>
		<summary>自サイトのブログ機能を Hugo で外出しにする作業を行うにあたって，いろいろ試しながら作業している。ここではその時のメモを公開する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="hugo" label="hugo" scheme="http://text.baldanders.info/hugo" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/eac7bf2a3c0fc19afcbf&#34;&gt;ゼロから始める Hugo — インストールから Hello World まで - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000870.shtml&#34;&gt;私の本家サイトのブログ機能を外出しにする作業&lt;/a&gt;を行うにあたり，ツールとしては &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; を使うことにしたのだが，初めて使うツールなので，いろいろ試しながら作業している。
ここではその時のメモを公開する。&lt;/p&gt;

&lt;h2 id=&#34;install:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;Hugo のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; の実行モジュールは公式サイトから取得できるのだが Go 言語環境のある方は是非 &lt;code&gt;go get&lt;/code&gt; から取得することをお勧めする。
&lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;Hugo の repository&lt;/a&gt; はサイトのドキュメントのビルド環境も同梱されているため色々と参考になる。&lt;/p&gt;

&lt;p&gt;なお &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; では非常に多くのパッケージを利用していて，取得の際には git の他に Mercurial が必要である（参照： 「&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/a52a47942fd3946bb583&#34;&gt;はじめての Go 言語 (on Windows) その3&lt;/a&gt;」）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace&amp;gt;mkdir hugo

C:\workspace&amp;gt;cd hugo

C:\workspace\hugo&amp;gt;SET GOPATH=C:\workspace\hugo

C:\workspace\hugo&amp;gt;go get -v github.com/spf13/hugo
github.com/spf13/hugo (download)
github.com/kardianos/osext (download)
github.com/spf13/afero (download)
github.com/spf13/cast (download)
github.com/spf13/jwalterweatherman (download)
github.com/spf13/cobra (download)
github.com/cpuguy83/go-md2man (download)
github.com/russross/blackfriday (download)
github.com/shurcooL/sanitized_anchor_name (download)
github.com/inconshreveable/mousetrap (download)
github.com/spf13/pflag (download)
github.com/spf13/fsync (download)
github.com/PuerkitoBio/purell (download)
github.com/opennota/urlesc (download)
github.com/miekg/mmark (download)
github.com/BurntSushi/toml (download)
Fetching https://gopkg.in/yaml.v2?go-get=1
Parsing meta tags from https://gopkg.in/yaml.v2?go-get=1 (status code 200)
get &amp;quot;gopkg.in/yaml.v2&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;gopkg.in/yaml.v2&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://gopkg.in/yaml.v2&amp;quot;} at https://gopkg.in/yaml.v2?go-get=1
gopkg.in/yaml.v2 (download)
github.com/spf13/viper (download)
github.com/kr/pretty (download)
github.com/kr/text (download)
github.com/magiconair/properties (download)
github.com/mitchellh/mapstructure (download)
Fetching https://golang.org/x/text/transform?go-get=1
Parsing meta tags from https://golang.org/x/text/transform?go-get=1 (status code 200)
get &amp;quot;golang.org/x/text/transform&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;golang.org/x/text&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://go.googlesource.com/text&amp;quot;} at https://golang.org/x/text/transform?go-get=1
get &amp;quot;golang.org/x/text/transform&amp;quot;: verifying non-authoritative meta tag
Fetching https://golang.org/x/text?go-get=1
Parsing meta tags from https://golang.org/x/text?go-get=1 (status code 200)
golang.org/x/text (download)
Fetching https://golang.org/x/text/unicode/norm?go-get=1
Parsing meta tags from https://golang.org/x/text/unicode/norm?go-get=1 (status code 200)
get &amp;quot;golang.org/x/text/unicode/norm&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;golang.org/x/text&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://go.googlesource.com/text&amp;quot;} at https://golang.org/x/text/unicode/norm?go-get=1
get &amp;quot;golang.org/x/text/unicode/norm&amp;quot;: verifying non-authoritative meta tag
bitbucket.org/pkg/inflect (download)
github.com/dchest/cssmin (download)
github.com/eknkc/amber (download)
github.com/yosssi/ace (download)
github.com/spf13/nitro (download)
github.com/gorilla/websocket (download)
Fetching https://gopkg.in/fsnotify.v1?go-get=1
Parsing meta tags from https://gopkg.in/fsnotify.v1?go-get=1 (status code 200)
get &amp;quot;gopkg.in/fsnotify.v1&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;gopkg.in/fsnotify.v1&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://gopkg.in/fsnotify.v1&amp;quot;} at https://gopkg.in/fsnotify.v1?go-get=1
gopkg.in/fsnotify.v1 (download)
github.com/shurcooL/sanitized_anchor_name
github.com/spf13/afero
github.com/inconshreveable/mousetrap
github.com/spf13/hugo/bufferpool
github.com/kr/text
github.com/kardianos/osext
github.com/spf13/jwalterweatherman
github.com/spf13/pflag
github.com/russross/blackfriday
github.com/opennota/urlesc
github.com/BurntSushi/toml
github.com/PuerkitoBio/purell
gopkg.in/yaml.v2
github.com/spf13/cast
github.com/kr/pretty
github.com/magiconair/properties
github.com/spf13/fsync
github.com/cpuguy83/go-md2man/md2man
github.com/spf13/hugo/hugofs
github.com/mitchellh/mapstructure
golang.org/x/text/transform
bitbucket.org/pkg/inflect
github.com/dchest/cssmin
github.com/miekg/mmark
github.com/eknkc/amber/parser
github.com/spf13/cobra
github.com/yosssi/ace
golang.org/x/text/unicode/norm
github.com/spf13/nitro
github.com/spf13/hugo/parser
github.com/spf13/viper
github.com/eknkc/amber
github.com/gorilla/websocket
github.com/spf13/hugo/utils
gopkg.in/fsnotify.v1
github.com/spf13/hugo/transform
github.com/spf13/hugo/watcher
github.com/spf13/hugo/livereload
github.com/spf13/hugo/helpers
github.com/spf13/hugo/source
github.com/spf13/hugo/target
github.com/spf13/hugo/tpl
github.com/spf13/hugo/hugolib
github.com/spf13/hugo/create
github.com/spf13/hugo/commands
github.com/spf13/hugo

C:\workspace\hugo&amp;gt;bin\hugo.exe version
Hugo Static Site Generator v0.15-DEV BuildDate: 2015-09-05T13:45:44+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成した実行モジュールは，作成された場所に &lt;code&gt;PATH&lt;/code&gt; を通すか， &lt;code&gt;PATH&lt;/code&gt; の通った場所にコピーすればよい。&lt;/p&gt;

&lt;h2 id=&#34;env:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;作業環境の作成&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; 用の作業環境を作るには &lt;code&gt;hugo new site&lt;/code&gt; コマンドを起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;hugo new site C:\hugo-env\www

C:&amp;gt;cd C:\hugo-env\www

C:\hugo-env\www&amp;gt;tree /f .
C:\HUGO-ENV\WWW
│  config.toml
│
├─archetypes
├─content
├─data
├─layouts
└─static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで &lt;code&gt;config.toml&lt;/code&gt; はサイト設定用のファイルである。初期値は以下のようになっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml:config.toml&#34;&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお， TOML 形式のファイルの読み書きは以下が参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/b4b4r07/items/77c327742fc2256d6cbe&#34;&gt;設定ファイル記述言語 TOML - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中で必須なのは baseurl のみで，これがないとビルドエラーになる（ただし &lt;code&gt;--baseUrl&lt;/code&gt; オプションを付ければ回避できる）。
今回は &lt;code&gt;config.toml&lt;/code&gt; を以下のようにセットする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml:config.toml&#34;&gt;baseurl = &amp;quot;http://hello.example.com/&amp;quot;
languageCode = &amp;quot;jp&amp;quot;
title = &amp;quot;Hello World!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では，いきなりビルドしてみよう（えー）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo
0 draft content
0 future content
0 pages created
0 paginator pages created
0 categories created
0 tags created
in 7 ms

C:\hugo-env\www&amp;gt;tree /f .
C:\HUGO-ENV\WWW
│  config.toml
│
├─archetypes
├─content
├─data
├─layouts
├─public
│      404.html
│      index.html
│      index.xml
│      sitemap.xml
│
└─static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;public&lt;/code&gt; フォルダとその下に4つのファイルが作成されている（ちなみに出力先は &lt;code&gt;-d&lt;/code&gt; または &lt;code&gt;--destination&lt;/code&gt; オプションで変更できる）。
現時点では &lt;code&gt;404.html&lt;/code&gt; と &lt;code&gt;index.html&lt;/code&gt; は空。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.xml&lt;/code&gt; は feed 用のファイルで RSS 2.0 形式で書かれている（何故か atom の語彙を使っている）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml:index.xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;
&amp;lt;rss version=&amp;quot;2.0&amp;quot; xmlns:atom=&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&amp;gt;
  &amp;lt;channel&amp;gt;
    &amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;
    &amp;lt;link&amp;gt;http://hello.example.com/&amp;lt;/link&amp;gt;
    &amp;lt;description&amp;gt;Recent content on Hello World!&amp;lt;/description&amp;gt;
    &amp;lt;generator&amp;gt;Hugo -- gohugo.io&amp;lt;/generator&amp;gt;
    &amp;lt;language&amp;gt;jp&amp;lt;/language&amp;gt;
    &amp;lt;atom:link href=&amp;quot;http://hello.example.com/index.xml&amp;quot; rel=&amp;quot;self&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; /&amp;gt;

  &amp;lt;/channel&amp;gt;
&amp;lt;/rss&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sitemap.xml&lt;/code&gt; は文字通りサイトマップ記述ファイル（SEO 用？）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml:sitemap.xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;
&amp;lt;urlset xmlns=&amp;quot;http://www.sitemaps.org/schemas/sitemap/0.9&amp;quot;&amp;gt;

  &amp;lt;url&amp;gt;
    &amp;lt;loc&amp;gt;http://hello.example.com/&amp;lt;/loc&amp;gt;
    &amp;lt;priority&amp;gt;0&amp;lt;/priority&amp;gt;
  &amp;lt;/url&amp;gt;

&amp;lt;/urlset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;server-mode:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;サーバモード&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; では &lt;code&gt;hugo saver&lt;/code&gt; コマンドによりサーバモードで起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo server
0 draft content
0 future content
0 pages created
0 paginator pages created
0 categories created
0 tags created
in 7 ms
Serving pages from C:\hugo-env\www\public
Web Server is available at http://127.0.0.1:1313/
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で &lt;code&gt;http://127.0.0.1:1313/&lt;/code&gt; をブラウザで開けばいいのだが，現時点では &lt;code&gt;index.html&lt;/code&gt; が空なので何も表示されない。
ちなみに，この状態の &lt;code&gt;index.xml&lt;/code&gt; は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml:index.xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;
&amp;lt;rss version=&amp;quot;2.0&amp;quot; xmlns:atom=&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&amp;gt;
  &amp;lt;channel&amp;gt;
    &amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;
    &amp;lt;link&amp;gt;http://localhost:1313/&amp;lt;/link&amp;gt;
    &amp;lt;description&amp;gt;Recent content on Hello World!&amp;lt;/description&amp;gt;
    &amp;lt;generator&amp;gt;Hugo -- gohugo.io&amp;lt;/generator&amp;gt;
    &amp;lt;language&amp;gt;jp&amp;lt;/language&amp;gt;
    &amp;lt;atom:link href=&amp;quot;http://localhost:1313/index.xml&amp;quot; rel=&amp;quot;self&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; /&amp;gt;

  &amp;lt;/channel&amp;gt;
&amp;lt;/rss&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっている。
URL が変更されていることにお気づきだろうか。
&lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; は動作モードによって URL を自動的に書き換えてくれるのでデバッグが容易である。
ただしサーバモードの状態で本番環境に deploy しようとすると大変なことになるのでご注意を。
deploy する前には必ずビルドしよう（またはビルド結果の出力先を分ける）。&lt;/p&gt;

&lt;p&gt;個人で作業する場合はこれで問題ないが，デバッグ用サーバを共有する場合には &lt;code&gt;http://localhost:1313/&lt;/code&gt; では都合が悪いので &lt;code&gt;--bind&lt;/code&gt; および &lt;code&gt;--port&lt;/code&gt; オプションを付加する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo server --bind=&amp;quot;hostname&amp;quot; --port=8080 --watch
0 draft content
0 future content
0 pages created
0 paginator pages created
0 tags created
0 categories created
in 8 ms
Watching for changes in C:\hugo-env\www/{data,content,layouts,static}
Serving pages from C:\hugo-env\www\public
Web Server is available at http://hostname:8080/
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;http://hostname:8080/&lt;/code&gt; でアクセスできるようになる。
ちなみに &lt;code&gt;--watch&lt;/code&gt; オプションを付加すると，入力フォルダを監視して変更があればリコンパイルする。便利！&lt;/p&gt;

&lt;h2 id=&#34;template:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;はじめてのテンプレート&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; を生成するにはテンプレートを用意する必要がある。
&lt;code&gt;index.html&lt;/code&gt; のテンプレートは &lt;code&gt;layouts&lt;/code&gt; フォルダに &lt;code&gt;index.html&lt;/code&gt; というファイル名で配置する（安直！）&lt;/p&gt;

&lt;p&gt;それじゃあ，早速テンプレートを組んでみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:layouts/index.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
{{ with .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Hello Hugo World!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;{{ }}&lt;/code&gt; で囲まれている部分が埋め込み構文だ。
たとえば &lt;code&gt;{{ .Title }}&lt;/code&gt; にはタイトルが入る。
今回はトップページなので， &lt;code&gt;config.toml&lt;/code&gt; で &lt;code&gt;title&lt;/code&gt; に設定した文字列が入る。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{ with .Site.LanguageCode }} ... {{ else }} ... {{ end }}&lt;/code&gt; はいわゆる with 構文ってやつ。
これ便利だよね。ちなみに &lt;code&gt;with&lt;/code&gt; で指定する変数が存在しない場合は &lt;code&gt;{{ else }}&lt;/code&gt; 以降が走る。
似た書式で &lt;code&gt;{{ if .Site.LanguageCode }} ... {{ else }} ... {{ end }}&lt;/code&gt; もあるが， &lt;code&gt;with&lt;/code&gt; とは変数のスコープが異なるので注意（慣れるまでは結構ハマった）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ .Site.LanguageCode }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをビルドした結果はこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:public/index.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Hello Hugo World!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに &lt;code&gt;config.toml&lt;/code&gt; で &lt;code&gt;baseurl&lt;/code&gt; 以外を削除してビルドするとこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:public/index.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Hello Hugo World!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;埋め込み構文がどのように機能しているか分かると思う。&lt;/p&gt;

&lt;h3 id=&#34;404:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;404.html をどうしよう&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;404.html&lt;/code&gt; はページが存在しない場合（404）に代わりに表示するページである。
普通 404 では Web サーバで決められたページを表示するのだが， GitHub Pages のようにサイトのトップページにある &lt;code&gt;404.html&lt;/code&gt; を表示してくれる場合もある。
なら &lt;code&gt;404.html&lt;/code&gt; を空っぽにしておくわけにはいかないよねぇ。&lt;/p&gt;

&lt;p&gt;固定の内容なら &lt;code&gt;static&lt;/code&gt; フォルダ直下に &lt;code&gt;404.html&lt;/code&gt; を置く手もある（&lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; では &lt;code&gt;static&lt;/code&gt; フォルダ以下のファイルはそのままコピーされるが &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; のコントロール外となる）。
また， &lt;code&gt;layouts&lt;/code&gt; フォルダ直下にテンプレートを置く手もある。たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:layouts/404.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
{{ with .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
{{ .Hugo.Generator }}
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;{{ with .Site.Params.error404 }}&amp;lt;p&amp;gt;{{ . }}&amp;lt;/p&amp;gt;{{ end }}&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをビルドするとこんな感じになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:public/404.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;Hugo 0.15-DEV&amp;quot; /&amp;gt;
&amp;lt;title&amp;gt;404 Page not found&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;あると思った？ 残念！ 404 でした。&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;post:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;記事を書く&lt;/h2&gt;

&lt;p&gt;さて，いよいよ記事を書いてみる。
&lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; では今どきの流行にのっとって Markdown 形式のファイルを入力ファイルにしている。
自前でファイルを用意してもよいが，新規に作成するなら &lt;code&gt;hugo new&lt;/code&gt; コマンドで作成するのがよいだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo new hello.md
C:\hugo-env\www\content\hello.md created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成されたファイルを見てみると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown:content\hello.md&#34;&gt;+++
date = &amp;quot;2015-09-05T16:40:41+09:00&amp;quot;
draft = true
title = &amp;quot;hello&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとなっている。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;+++&lt;/code&gt; で囲まれている部分は “front matter” と呼ばれている領域で，記事ごとの設定情報を格納する。
&lt;code&gt;+++&lt;/code&gt; の場合は TOML， &lt;code&gt;---&lt;/code&gt; の場合は YAML， &lt;code&gt;{ }&lt;/code&gt; で挟んである場合は JSON として解釈されるようだ。&lt;/p&gt;

&lt;p&gt;このファイルに記事を入力する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown::content\hello.md&#34;&gt;+++
date = &amp;quot;2015-09-05T16:40:41+09:00&amp;quot;
draft = false
title = &amp;quot;Hello!&amp;quot;
+++

ようこそ， [Hugo](http://gohugo.io/) の世界へ！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;草稿記事の場合は &lt;code&gt;draft&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; のままでよいが，そうでない場合は &lt;code&gt;false&lt;/code&gt; にすること。
ちなみに &lt;code&gt;-D&lt;/code&gt; または &lt;code&gt;--buildDrafts&lt;/code&gt; オプションを付けてビルドすると草稿版も含めて出力される。
先ほどのサーバモードと組み合わせてデバッグに使うとよいだろう。&lt;/p&gt;

&lt;p&gt;草稿（&lt;code&gt;draft&lt;/code&gt;）状態の解除は手動でもいいのだが，&lt;code&gt;hugo undraft&lt;/code&gt; コマンドを使うてもある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo undraft content/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドを使うと &lt;code&gt;date&lt;/code&gt; の値が現在時刻に更新されるので注意。&lt;/p&gt;

&lt;p&gt;では，ここでもいきなりビルドしてみる（えー）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo
0 draft content
0 future content
1 pages created
0 paginator pages created
0 tags created
0 categories created
in 42 ms

C:\hugo-env\www&amp;gt;tree /f .
C:\HUGO-ENV\WWW
│  config.toml
│
├─archetypes
├─content
│      hello.md
│
├─data
├─layouts
│      404.html
│      index.html
│
├─public
│  │  404.html
│  │  index.html
│  │  index.xml
│  │  sitemap.xml
│  │
│  └─hello
│          index.html
│
└─static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; の標準では &lt;code&gt;hello.md&lt;/code&gt; は &lt;code&gt;hello/index.html&lt;/code&gt; に展開される。
これを deploy すると Web ブラウザからは &lt;code&gt;http://hello.example.com/hello/&lt;/code&gt; でアクセスできることになる。
この path の展開のさせ方はいろいろ設定できるようなのだが，今回は割愛する。&lt;/p&gt;

&lt;p&gt;現時点では &lt;code&gt;hello/index.html&lt;/code&gt; は空。
まぁテンプレートがないから当たり前なのだが。
記事用のテンプレートは &lt;code&gt;layouts&lt;/code&gt; フォルダ以下に &lt;code&gt;_default&lt;/code&gt; フォルダを作成し，さらにその下に &lt;code&gt;single.html&lt;/code&gt; を配置する。&lt;/p&gt;

&lt;p&gt;それじゃあ，早速テンプレートを組んでみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:layouts/_default/single.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
{{ with .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }} -- {{ .Site.Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;div&amp;gt;{{ .Content }}&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;{{ .Title }}&lt;/code&gt; には（今回は）記事のタイトルが入る。
&lt;code&gt;{{ .Content }}&lt;/code&gt; は実際の記事の中身である。これでビルドすると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:public/hello/index.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello! -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;ようこそ， &amp;lt;a href=&amp;quot;http://gohugo.io/&amp;quot;&amp;gt;Hugo&amp;lt;/a&amp;gt; の世界へ！&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
Feed はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml:index.xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;
&amp;lt;rss version=&amp;quot;2.0&amp;quot; xmlns:atom=&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&amp;gt;
  &amp;lt;channel&amp;gt;
    &amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;
    &amp;lt;link&amp;gt;http://hello.example.com/&amp;lt;/link&amp;gt;
    &amp;lt;description&amp;gt;Recent content on Hello World!&amp;lt;/description&amp;gt;
    &amp;lt;generator&amp;gt;Hugo -- gohugo.io&amp;lt;/generator&amp;gt;
    &amp;lt;language&amp;gt;jp&amp;lt;/language&amp;gt;
    &amp;lt;lastBuildDate&amp;gt;Sat, 05 Sep 2015 16:40:41 +0900&amp;lt;/lastBuildDate&amp;gt;
    &amp;lt;atom:link href=&amp;quot;http://hello.example.com/index.xml&amp;quot; rel=&amp;quot;self&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; /&amp;gt;

    &amp;lt;item&amp;gt;
      &amp;lt;title&amp;gt;Hello!&amp;lt;/title&amp;gt;
      &amp;lt;link&amp;gt;http://hello.example.com/hello/&amp;lt;/link&amp;gt;
      &amp;lt;pubDate&amp;gt;Sat, 05 Sep 2015 16:40:41 +0900&amp;lt;/pubDate&amp;gt;

      &amp;lt;guid&amp;gt;http://hello.example.com/hello/&amp;lt;/guid&amp;gt;
      &amp;lt;description&amp;gt;&amp;amp;lt;p&amp;amp;gt;ようこそ， &amp;amp;lt;a href=&amp;amp;#34;http://gohugo.io/&amp;amp;#34;&amp;amp;gt;Hugo&amp;amp;lt;/a&amp;amp;gt; の世界へ！&amp;amp;lt;/p&amp;amp;gt;
&amp;lt;/description&amp;gt;
    &amp;lt;/item&amp;gt;

  &amp;lt;/channel&amp;gt;
&amp;lt;/rss&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに front matter をまるっと削除してビルドすると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:public/hello/index.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt; -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;ようこそ， &amp;lt;a href=&amp;quot;http://gohugo.io/&amp;quot;&amp;gt;Hugo&amp;lt;/a&amp;gt; の世界へ！&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml:index.xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;
&amp;lt;rss version=&amp;quot;2.0&amp;quot; xmlns:atom=&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&amp;gt;
  &amp;lt;channel&amp;gt;
    &amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;
    &amp;lt;link&amp;gt;http://hello.example.com/&amp;lt;/link&amp;gt;
    &amp;lt;description&amp;gt;Recent content on Hello World!&amp;lt;/description&amp;gt;
    &amp;lt;generator&amp;gt;Hugo -- gohugo.io&amp;lt;/generator&amp;gt;
    &amp;lt;language&amp;gt;jp&amp;lt;/language&amp;gt;
    &amp;lt;atom:link href=&amp;quot;http://hello.example.com/index.xml&amp;quot; rel=&amp;quot;self&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; /&amp;gt;

    &amp;lt;item&amp;gt;
      &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
      &amp;lt;link&amp;gt;http://hello.example.com/hello/&amp;lt;/link&amp;gt;
      &amp;lt;pubDate&amp;gt;Mon, 01 Jan 0001 00:00:00 +0000&amp;lt;/pubDate&amp;gt;

      &amp;lt;guid&amp;gt;http://hello.example.com/hello/&amp;lt;/guid&amp;gt;
      &amp;lt;description&amp;gt;&amp;amp;lt;p&amp;amp;gt;ようこそ， &amp;amp;lt;a href=&amp;amp;#34;http://gohugo.io/&amp;amp;#34;&amp;amp;gt;Hugo&amp;amp;lt;/a&amp;amp;gt; の世界へ！&amp;amp;lt;/p&amp;amp;gt;
&amp;lt;/description&amp;gt;
    &amp;lt;/item&amp;gt;

  &amp;lt;/channel&amp;gt;
&amp;lt;/rss&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のような感じになる。
タイトルや日付の情報が欠落するがエラーにはならないようだ。&lt;/p&gt;

&lt;h3 id=&#34;list:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;記事の一覧をつくる&lt;/h3&gt;

&lt;p&gt;ついでなので &lt;code&gt;index.html&lt;/code&gt; に記事の一覧を表示するようにしよう。
テンプレートはこんな感じで書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:layouts/index.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
{{ with .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;

&amp;lt;h2&amp;gt;What&#39;s New&amp;lt;/h2&amp;gt;
&amp;lt;ul style=&amp;quot;list-style:none;&amp;quot;&amp;gt;
{{ range first 15 .Site.Pages }}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt; (&amp;lt;time&amp;gt;{{ .Date.Format &amp;quot;2006-01-02&amp;quot; }}&amp;lt;/time&amp;gt;){{ if .Draft }} #Draft{{ end }}&amp;lt;/li&amp;gt;
{{ end }}
&amp;lt;/ul&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで最新の15記事を列挙できる。
で，ビルド結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:public/index.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;

&amp;lt;h2&amp;gt;What&#39;s New&amp;lt;/h2&amp;gt;
&amp;lt;ul style=&amp;quot;list-style:none;&amp;quot;&amp;gt;

    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/hello/&amp;quot;&amp;gt;Hello!&amp;lt;/a&amp;gt; (&amp;lt;time&amp;gt;2015-09-05&amp;lt;/time&amp;gt;)&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで大まかなテンプレートのイメージがつかめただろうか。&lt;/p&gt;

&lt;h2 id=&#34;html:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;【おまけ】 HTML ファイルをそのまま突っ込んだらどうなるの？&lt;/h2&gt;

&lt;p&gt;というわけで，上で作成した &lt;code&gt;hello/index.html&lt;/code&gt; を &lt;code&gt;hello2.html&lt;/code&gt; として &lt;code&gt;content&lt;/code&gt; フォルダに突っ込んでみた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo
0 draft content
0 future content
2 pages created
0 paginator pages created
0 tags created
0 categories created
in 16 ms

C:\hugo-env\www&amp;gt;tree /f .
C:\HUGO-ENV\WWW
│  config.toml
│
├─archetypes
├─content
│      hello.md
│      hello2.html
│
├─data
├─layouts
│  │  404.html
│  │  index.html
│  │
│  └─_default
│          single.html
│
├─public
│  │  404.html
│  │  index.html
│  │  index.xml
│  │  sitemap.xml
│  │
│  ├─hello
│  │      index.html
│  │
│  └─hello2
│          index.html
│
└─static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おおう。
&lt;code&gt;hello2/index.html&lt;/code&gt; に変換されている。
ルートの &lt;code&gt;index.html&lt;/code&gt; ファイルはどうなっているだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:public/index.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;

&amp;lt;h2&amp;gt;What&#39;s New&amp;lt;/h2&amp;gt;
&amp;lt;ul style=&amp;quot;list-style:none;&amp;quot;&amp;gt;

    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/hello/&amp;quot;&amp;gt;Hello!&amp;lt;/a&amp;gt; (&amp;lt;time&amp;gt;2015-09-05&amp;lt;/time&amp;gt;)&amp;lt;/li&amp;gt;

    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/hello2/&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; (&amp;lt;time&amp;gt;0001-01-01&amp;lt;/time&amp;gt;)&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おおう。
残念な結果に。
でもこれってもしかして front matter つけりゃいいのか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown:content\hello2.html&#34;&gt;+++
date = &amp;quot;2015-09-05T18:00:00+09:00&amp;quot;
draft = false
title = &amp;quot;Hello! Part 2&amp;quot;
+++

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello! Part 2 -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello! Part 2&amp;lt;/h1&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;再びようこそ， &amp;lt;a href=&amp;quot;http://gohugo.io/&amp;quot;&amp;gt;Hugo&amp;lt;/a&amp;gt; の世界へ！&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んで，ビルドしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:public/index.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;

&amp;lt;h2&amp;gt;What&#39;s New&amp;lt;/h2&amp;gt;
&amp;lt;ul style=&amp;quot;list-style:none;&amp;quot;&amp;gt;

	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/hello2/&amp;quot;&amp;gt;Hello! Part 2&amp;lt;/a&amp;gt; (&amp;lt;time&amp;gt;2015-09-05&amp;lt;/time&amp;gt;)&amp;lt;/li&amp;gt;

	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/hello/&amp;quot;&amp;gt;Hello!&amp;lt;/a&amp;gt; (&amp;lt;time&amp;gt;2015-09-05&amp;lt;/time&amp;gt;)&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おおお！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:public/hello2/index.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello! Part 2 -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello! Part 2&amp;lt;/h1&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello! Part 2 -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello! Part 2&amp;lt;/h1&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;再びようこそ， &amp;lt;a href=&amp;quot;http://gohugo.io/&amp;quot;&amp;gt;Hugo&amp;lt;/a&amp;gt; の世界へ！&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おおう orz なんてこったい。
つまり，元の HTML ファイルからヘッダ等の要素を抜いて  front matter を付加すれば見た目も保持できて &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; からも Controllable な状態になるってことか？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown:content\hello2.html&#34;&gt;+++
date = &amp;quot;2015-09-05T18:00:00+09:00&amp;quot;
draft = false
title = &amp;quot;Hello! Part 2&amp;quot;
+++

&amp;lt;p&amp;gt;再びようこそ， &amp;lt;a href=&amp;quot;http://gohugo.io/&amp;quot;&amp;gt;Hugo&amp;lt;/a&amp;gt; の世界へ！&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでビルドしてみると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html:public/hello2/index.html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Hello! Part 2 -- Hello World!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello! Part 2&amp;lt;/h1&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;再びようこそ， &amp;lt;a href=&amp;quot;http://gohugo.io/&amp;quot;&amp;gt;Hugo&amp;lt;/a&amp;gt; の世界へ！&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ふむむむむ。
これは古い資産を &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; に組み入れるのは結構骨かもなぁ。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:8a07c3dae13f18d0c06cf5f9e482b173&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/lab/hugo/&#34;&gt;Hugoサイト構築 | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt; : お勧め！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/hugo/bookmark/&#34;&gt;Hugo に関するブックマークはこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
</feed>
