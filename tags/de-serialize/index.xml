<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>De Serialize - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/de-serialize/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/de-serialize/index.xml" />
	<id>tag:text.Baldanders.info,2015-11-18:/tags</id>
	<updated>2015-11-18T20:29:21+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info//images/avatar.jpg</icon>
	<logo>https://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.54.0</generator>

	
	<entry>
		<title>Apache Commons Collections ライブラリの非直列化処理に脆弱性 - remark</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2015/vulnerability-acc-library/" />
		<id>tag:text.Baldanders.info,2015-11-18:/remark/2015/vulnerability-acc-library/</id>
		<published>2015-11-18T20:29:21+09:00</published>
		<updated>2015-12-05T17:12:17+09:00</updated>
		<summary>なお，今回のケースは Java 以外にも広がるかもしれないので，類似情報に注意しておいた方がいいだろう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>https://baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;1週間以上前の話で，なんだか今更なんだけど，全く仕事に絡んでないこともないので，覚え書きの形で残しておく。
なお，今回のケースは Java 以外にも広がるかもしれないので，類似情報に注意しておいた方がいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;脆弱性の内容&#34;&gt;脆弱性の内容&lt;/h2&gt;

&lt;p&gt;発端はこれ。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;2015年1月に開催された AppSec California 2015 において、&lt;a href=&#34;http://frohoff.github.io/appseccali-marshalling-pickles/&#34;&gt;Gabriel Lawrence 氏と Chris Frohoff 氏&lt;/a&gt;は、信頼できないデータをデシリアライズしてしまう脆弱性について講演し、任意のコードを実行可能であることを示しました。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU94276522/&#34;&gt;Apache Commons Collections ライブラリのデシリアライズ処理に脆弱性&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/a8ysJs2aqxHie8&#34; frameborder=&#34;0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles&#34;&gt;AppSecCali 2015 - Marshalling Pickles&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この際に &lt;a href=&#34;https://github.com/frohoff/ysoserial&#34; title=&#34;frohoff/ysoserial&#34;&gt;PoC&lt;/a&gt;（Proof-of-Concept; 概念実証コード）も公開されている。&lt;/p&gt;

&lt;p&gt;更に両氏は今月になって，この &lt;a href=&#34;https://github.com/frohoff/ysoserial&#34; title=&#34;frohoff/ysoserial&#34;&gt;PoC&lt;/a&gt; を使って Apache Commons Collections ライブラリを使用するいくつかのミドルウェアおよび Groovy, Spring が攻略可能であることを示した。&lt;/p&gt;

&lt;h2 id=&#34;影響を受ける製品&#34;&gt;影響を受ける製品&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Apache Commons Collections ライブラリのバージョン 3.2.1 および 4.0&lt;/li&gt;
&lt;li&gt;Groovy や Spring の一部バージョン&lt;/li&gt;
&lt;li&gt;上記ライブラリまたはフレームワークが classpath に読み込まれている状態で，シリアル化された Java オブジェクトを外部から受け付けている環境

&lt;ul&gt;
&lt;li&gt;WebLogic, WebSphere, JBoss, Jenkins, OpenNMS 等のミドルウェア製品&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;Weblogic や WebSphere に対して可能だと言われているのは、アプリケーションサーバを起動または停止するために通常、組織内で使用する管理ポートへの攻撃です。これらのアプリケーションサーバ上で稼働するすべての Webアプリケーションに影響があるわけではありません。受け付ける入力にシリアル化された Javaオブジェクトを含まない、つまり入力がユーザーのマウス操作やキー入力、文字データや画像のみであるような Webアプリケーションであれば影響を受けません。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://blog.trendmicro.co.jp/archives/12577&#34;&gt;主要Javaアプリケーションサーバに影響するJavaライブラリの脆弱性を正しく理解する&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;さらに&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java 以外にも Python, Ruby などで書かれたアプリケーションやライブラリにも同様の脆弱性がある可能性が指摘されている

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/charliesome/charlie.bz/blob/master/posts/rails-3.2.10-remote-code-execution.md&#34; title=&#34;charlie.bz/rails-3.2.10-remote-code-execution.md at master · charliesome/charlie.bz&#34;&gt;Rails 3.2.10 Remote Code Execution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;影響度-cvss&#34;&gt;影響度（CVSS）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CVSSv2 基本評価値 7.5 (AV:N/AC:L/Au:N/C:P/I:P/A:P)&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低 (L)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃前の認証要否（Au）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CVSS については&lt;a href=&#34;https://text.baldanders.info/remark/2015/cvss-v3-metrics-in-jvn/&#34;&gt;解説ページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;対策-回避策&#34;&gt;対策・回避策&lt;/h2&gt;

&lt;p&gt;回避策としては以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;外部入力に認証をかける（今回の &lt;a href=&#34;https://github.com/frohoff/ysoserial&#34; title=&#34;frohoff/ysoserial&#34;&gt;PoC&lt;/a&gt; には認証をバイパスする機能はない）&lt;/li&gt;
&lt;li&gt;外部入力にシリアル化された Java オブジェクトを受け付けない，または受け付けるオブジェクトを限定する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frohoff/ysoserial&#34; title=&#34;frohoff/ysoserial&#34;&gt;PoC&lt;/a&gt; 対象のクラス（ACC ライブラリであれば &lt;code&gt;InvokerTransformer&lt;/code&gt; クラス）を使用しない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さらに根本的な対策としてアプリケーションの設計の見直しが推奨されている。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;However, to be clear: this is not the only known and especially not unknown useable gadget. So replacing your installations with a hardened version of Apache Commons Collections will not make your application resist this vulnerability.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://blogs.apache.org/foundation/entry/apache_commons_statement_to_widespread&#34;&gt;Apache Commons statement to widespread Java object de-serialisation vulnerability&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;Apache Commons Collections ライブラリの対策版リリースの準備が進められています。しかし、現状提案されているパッチはシリアライズ機能をデフォルトで無効にするだけのものです。当該ライブラリのシリアライズ機能が必要な場合には、この機能を有効にするコードを追加するとともに、安全にデシリアライズするようアプリケーションの設計を見直す必要があります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU94276522/&#34;&gt;Apache Commons Collections ライブラリのデシリアライズ処理に脆弱性&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この PoC が公開された「&lt;a href=&#34;http://frohoff.github.io/appseccali-marshalling-pickles/&#34;&gt;Marshalling Pickles&lt;/a&gt;」の発表には「オブジェクトのデシリアル化処理はいかにしてあなたの一日を台無しにするか」という副題がついており、Java に限らずシリアル化されたオブジェクトを受け取り、デシリアル化処理を行う場合の危険性について広く述べられています。&lt;br&gt;
なかでも強く「脆弱性は非安全なデシリアル化処理にあるのであり、PoC があることが脆弱なのではない」と述べられています。デシリアル化処理には脆弱性ができやすいため、これを安全に行うための方法として、デシリアル化するクラスをホワイトリストでフィルターする（resolveClass のオーバーライド）、単なる暗号化ではない適切な認証方法を利用することなどが紹介されています。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://blog.trendmicro.co.jp/archives/12577&#34;&gt;主要Javaアプリケーションサーバに影響するJavaライブラリの脆弱性を正しく理解する&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;ベンダの対応&#34;&gt;ベンダの対応&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;WebLogic : 最新版は対策済み（&lt;a href=&#34;https://support.oracle.com/rs?type=doc&amp;amp;id=2076338.1&#34;&gt;回避策&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;WebSphere : 最新版は対策済み&lt;/li&gt;
&lt;li&gt;JBoss : 最新版は対策済み（一部パッチ準備中），危険なクラスを削除&lt;/li&gt;
&lt;li&gt;Jenkins : 最新版は対策済み&lt;/li&gt;
&lt;li&gt;OpenNMS : Port 1099 の遮断で回避&lt;/li&gt;
&lt;li&gt;Groovy : 最新版は対策済み&lt;/li&gt;
&lt;li&gt;Spring : 最新版は対策済み&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU94276522/&#34;&gt;JVNVU#94276522: Apache Commons Collections ライブラリのデシリアライズ処理に脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kb.cert.org/vuls/id/576313&#34;&gt;Vulnerability Note VU#576313 - Apache Commons Collections Java library insecurely deserializes data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://frohoff.github.io/appseccali-marshalling-pickles/&#34;&gt;AppSecCali 2015: Marshalling Pickles by frohoff&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frohoff/ysoserial&#34;&gt;frohoff/ysoserial&lt;/a&gt; : 概念実証コード&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/&#34;&gt;What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and Your Application Have in Common? This Vulnerability.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.apache.org/foundation/entry/apache_commons_statement_to_widespread&#34;&gt;Apache Commons statement to widespread Java object de-serialisation vulnerability : The Apache Software Foundation Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.trendmicro.co.jp/archives/12577&#34;&gt;主要Javaアプリケーションサーバに影響するJavaライブラリの脆弱性を正しく理解する | トレンドマイクロ セキュリティブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1511/10/news053.html&#34;&gt;Javaライブラリに脆弱性、主要ミドルウェア全てに影響 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35073223/&#34;&gt;Javaライブラリにリモートコード実行の脆弱性--JBoss、WebSphere、WebLogicなどに影響 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20151110/1447175137&#34;&gt;Apache Commonsのcollectionsの脆弱性に関連するリンク集をまとめてみた。 - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takahashikzn.root42.jp/entry/2015/11/10/155319&#34;&gt;commons-collectionsのInvokerTransformer脆弱性について - R42日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takahashikzn.root42.jp/entry/2015/11/12/031449&#34;&gt;SpringとGroovyにも直列化オブジェクト脆弱性 - R42日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvndb.jvn.jp/ja/contents/2015/JVNDB-2015-005968.html&#34;&gt;JVNDB-2015-005968 Oracle WebLogic Server の WLS Security コンポーネントにおける任意のコマンドを実行される脆弱性 - JVN iPedia - 脆弱性対策情報データベース&lt;/a&gt; : 対策版リリース&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www-01.ibm.com/support/docview.wss?uid=swg21972121&#34;&gt;IBM (参考) Apache Commons の脆弱性が Lotus Widget Factory に与える影響について (CVE-2015-7450) - Japan&lt;/a&gt; : この記事では，影響度を CVSSv3 基本評価値で 9.8 (&lt;code&gt;CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H&lt;/code&gt;) と評価している。 CVSSv3 では基本評価値 9.0 以上で「緊急」レベルとみなせる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;&lt;a href=&#34;https://github.com/frohoff/ysoserial&#34; title=&#34;frohoff/ysoserial&#34;&gt;PoC&lt;/a&gt; による攻撃に限るなら認証をバイパスできないため，外部入力に認証をかけている場合は評価値は7未満になる。今回のようなケースは CVSSv2 では評価が難しいかも。 &lt;a href=&#34;https://baldanders.info/spiegel/log2/000864.shtml&#34;&gt;CVSSv3&lt;/a&gt; で評価し直した方がいいかな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
