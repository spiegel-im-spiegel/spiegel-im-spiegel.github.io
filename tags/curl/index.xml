<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Curl - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/curl/index.xml" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/curl/index.xml/index.xml" />
	<id>tag:text.Baldanders.info,0001-01-01:/</id>
	<updated>0001-01-01T00:00:00+00:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.19</generator>

	
	<entry>
		<title>Git.io から短縮 URL を取得するコード - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/get-shortened-url-from-gitio/" />
		<id>tag:text.Baldanders.info,2015-11-26:/golang/get-shortened-url-from-gitio/</id>
		<published>2015-11-26T20:29:30+09:00</published>
		<updated>2016-02-14T19:26:03+09:00</updated>
		<summary>これって curl で書けるんなら Go 言語で表現できるんじゃね？</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/042751d98e315e4e3382&#34;&gt;Git.io 短縮 URL を golang コードで取得してみる - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&#34;git-io-で短縮-url-が取得できるらしい&#34;&gt;Git.io で短縮 URL が取得できるらしい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sotayamashita/items/1cf05f2a2be3d6fb3388&#34;&gt;Git・Githubに隠された便利な機能 | GitHub Cheat Sheet（日本語訳） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを読んでたら後ろの方に &lt;a href=&#34;http://git.io/&#34; title=&#34;git.io&#34;&gt;Git.io&lt;/a&gt; の話が出ていた。
このサイトで短縮 URL を生成できるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/985-git-io-github-url-shortener&#34;&gt;Git.io: GitHub URL Shortener&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API が &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; で掲載されていて，例えば私の &lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;https://github.com/spiegel-im-spiegel&lt;/a&gt; なら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -i &amp;quot;https://git.io&amp;quot; -F &amp;quot;url=https://github.com/spiegel-im-spiegel&amp;quot;
HTTP/1.1 201 Created
Server: Cowboy
Connection: keep-alive
Date: Sat, 08 Aug 2015 02:42:16 GMT
Status: 201 Created
Content-Type: text/html;charset=utf-8
Location: http://git.io/vOj52
Content-Length: 37
X-Xss-Protection: 1; mode=block
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Runtime: 0.210952
X-Node: 871d903e-a8e0-46ff-a96f-ef424385e5ed
X-Revision: b1d9ce07ccb700fc90398edafd397beb8d3bd772
Via: 1.1 vegur

https://github.com/spiegel-im-spiegel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てな感じで，ヘッダの Location 要素に短縮 URL が返ってくる仕組みらしい。
って，これって &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; で書けるんなら &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で表現できるんじゃね？&lt;/p&gt;

&lt;h2 id=&#34;curl-as-dsl&#34;&gt;cURL as DSL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34;&gt;cURL as DSL — cURL as DSL 1.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.shibu.jp/article/115602749.html&#34;&gt;Shibu&amp;rsquo;s Diary: cURL as DSLとは何だったのか。あるいは細かすぎて伝わらないcURL as DSL。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; とは &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; の構文を任意のコード&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; に変換してくれるもので，どういうことかというと「&lt;a href=&#34;http://qiita.com/Hiraku/items/dfda2f8a5353b0742271&#34;&gt;Web API は curl で表現すればいいんじゃね？&lt;/a&gt;」ということらしい。&lt;/p&gt;

&lt;h2 id=&#34;さっそく-curl-を-go-言語に変換してみる&#34;&gt;さっそく curl を Go 言語に変換してみる&lt;/h2&gt;

&lt;p&gt;では早速，上述の curl コマンドを &lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; を使って &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に変換してみる（ただし &lt;code&gt;-i&lt;/code&gt; オプションは付けない）。
結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;mime/multipart&amp;quot;
	&amp;quot;net/http&amp;quot;
)

func main() {
	var buffer bytes.Buffer
	writer := multipart.NewWriter(&amp;amp;buffer)
	writer.WriteField(&amp;quot;url&amp;quot;, &amp;quot;https://github.com/spiegel-im-spiegel&amp;quot;)
	writer.Close()

	resp, err := http.Post(&amp;quot;https://git.io&amp;quot;, &amp;quot;multipart/form-data; boundary=&amp;quot;+writer.Boundary(), &amp;amp;buffer)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	log.Print(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力のみちょっと弄って&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;mime/multipart&amp;quot;
	&amp;quot;net/http&amp;quot;
)

func main() {
	var buffer bytes.Buffer
	writer := multipart.NewWriter(&amp;amp;buffer)
	writer.WriteField(&amp;quot;url&amp;quot;, &amp;quot;https://github.com/spiegel-im-spiegel&amp;quot;)
	writer.Close()

	resp, err := http.Post(&amp;quot;https://git.io&amp;quot;, &amp;quot;multipart/form-data; boundary=&amp;quot;+writer.Boundary(), &amp;amp;buffer)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	log.Println(&amp;quot;  Status: &amp;quot;, resp.Header.Get(&amp;quot;Status&amp;quot;))
	log.Println(&amp;quot;Location: &amp;quot;, resp.Header.Get(&amp;quot;Location&amp;quot;))
	log.Println(&amp;quot;    Body: &amp;quot;, string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;go run gitio.go
2015/08/08 12:00:00   Status: 201 Created
2015/08/08 12:00:00 Location: http://git.io/vOj52
2015/08/08 12:00:00     Body: https://github.com/spiegel-im-spiegel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり，めでたく短縮 URL が取得できた。&lt;/p&gt;

&lt;p&gt;ちなみに最初の &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; コマンドの &lt;code&gt;-F&lt;/code&gt; を &lt;code&gt;-d&lt;/code&gt; に替えて &lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; にかけると&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
	&amp;quot;net/url&amp;quot;
)

func main() {
	values := url.Values{
		&amp;quot;url&amp;quot;: {&amp;quot;https://github.com/spiegel-im-spiegel&amp;quot;},
	}

	resp, err := http.PostForm(&amp;quot;https://git.io&amp;quot;, values)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	log.Print(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように変換される。
&lt;a href=&#34;https://golang.org/pkg/net/http/&#34; title=&#34;http - The Go Programming Language&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Post()&lt;/code&gt; 関数から &lt;a href=&#34;https://golang.org/pkg/net/http/&#34; title=&#34;http - The Go Programming Language&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;PostForm()&lt;/code&gt; 関数に替わってかなりコードがすっきりした。
今回のような単純な request ならこちらの方がいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;ついでにパッケージも作ってみた&#34;&gt;ついでにパッケージも作ってみた&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gitioapi&#34;&gt;spiegel-im-spiegel/gitioapi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを称して「他人の褌で相撲を取る」という&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
なるほど。
こうやって API を実装していくんだね。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;今のところは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のほかに Python3, PHP, JavaScript (node.js/XMLHttpRequest), Java, Objective-C (NSURL_Session/NSURLConnection), Vim Script (WebAPI-vim) に対応している。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b&#34;&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/042751d98e315e4e3382&#34;&gt;初出の記事&lt;/a&gt;のコメントで &lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; の作者の方に教えていただいた。感謝！
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c&#34;&gt;実はジェネレータで生成したコードの著作権は誰に帰属するのか，とかいろいろ思うところはあるのだけど，それはまた別の機会に。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
