<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of openssh - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/openssh/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/openssh/index.xml" />
	<id>tag:text.Baldanders.info,2021-01-06:/tags</id>
	<updated>2021-01-06T23:06:57+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>SSH の認証鍵を GunPG で作成・管理する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/openpgp/ssh-key-management-with-gnupg/" />
		<id>tag:text.Baldanders.info,2021-01-06:/openpgp/ssh-key-management-with-gnupg/</id>
		<published>2021-01-06T14:06:57+00:00</published>
		<updated>2021-01-09T02:08:25+00:00</updated>
		<summary>新たに鍵を作成する場合や今までの鍵を破棄して作り直す場合などの状況があれば検討してもいいだろう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今回は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; で作成した鍵を &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; の認証鍵として使う方法について覚え書きとして記しておく。
現時点で運用できている認証鍵を置き換えるメリットはないが，新たに鍵を作成する場合や今までの鍵を破棄して作り直す場合などの状況があれば検討してもいいだろう。&lt;/p&gt;
&lt;p&gt;まず &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; で作成する鍵は機能別に以下の4種類に分類される（ひとつの鍵で複数の機能を持たせることもできる）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;機能&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;略称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;署名&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;証明&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;認証&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;A&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;暗号化&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;E&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;このうち &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; の認証鍵として使えるのは「認証」機能をもった鍵のみである。
認証機能は電子署名用の鍵であれば任意に付与することができるが，専用の副鍵を追加するのがセオリーらしい。&lt;/p&gt;
&lt;h2&gt;認証用の副鍵を追加する&lt;/h2&gt;
&lt;p&gt;まず以下の &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵があるとする（主鍵には &lt;code&gt;SC&lt;/code&gt;，副鍵には &lt;code&gt;E&lt;/code&gt; の機能が付いてる点に注目）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --list-keys alice
pub   ed25519 2021-01-06 [SC] [有効期限: 2021-01-13]
      011C720B03D2E1D6BCFA98391DFF44901121B61D
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   cv25519 2021-01-06 [E]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この鍵に認証用の副鍵を追加する。
鍵の追加には &lt;code&gt;--edit&lt;/code&gt; コマンドを使う。
なお &lt;code&gt;--expert&lt;/code&gt; オプションと一緒に使うと幸せになれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --expert --edit-key alice
gpg (GnuPG) 2.2.26; Copyright (C) 2020 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

秘密鍵が利用できます。

sec  ed25519/1DFF44901121B61D
     作成: 2021-01-06  有効期限: 2021-01-13  利用法: SC  
     信用: 究極        有効性: 究極
ssb  cv25519/4FECD03BE5BE4454
     作成: 2021-01-06  有効期限: 無期限      利用法: E   
[  究極  ] (1). Alice &amp;lt;alice@example.com&amp;gt;

gpg&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここで &lt;code&gt;addkey&lt;/code&gt; コマンドを入力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;gpg&amp;gt; addkey
ご希望の鍵の種類を選択してください:
   (3) DSA (署名のみ)
   (4) RSA (署名のみ)
   (5) Elgamal (暗号化のみ)
   (6) RSA (暗号化のみ)
   (7) DSA (機能をあなた自身で設定)
   (8) RSA (機能をあなた自身で設定)
  (10) ECC (署名のみ)
&lt;span class=&#34;hl&#34;&gt;  (11) ECC (機能をあなた自身で設定)
&lt;/span&gt;  (12) ECC (暗号化のみ)
  (13) 既存の鍵
  (14) カードに存在する鍵
あなたの選択は? 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;今回は認証用の鍵の追加なので 7, 8, 11 のいずれかを選択する。
ここは個人的な好みで ECC 鍵を選択しよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;あなたの選択は? 11

鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 
&lt;span class=&#34;hl&#34;&gt;現在の認められた操作: Sign 
&lt;/span&gt;
   (S) 署名機能を反転する
   (A) 認証機能を反転する
   (Q) 完了

   あなたの選択は? 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;現在は署名機能（Sign）のみ有効になっているが，欲しいのは認証機能のみなので &lt;code&gt;S&lt;/code&gt; と &lt;code&gt;A&lt;/code&gt; を一回づつ入力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;あなたの選択は? s

鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 
&lt;span class=&#34;hl&#34;&gt;現在の認められた操作: 
&lt;/span&gt;
   (S) 署名機能を反転する
   (A) 認証機能を反転する
   (Q) 完了

あなたの選択は? a

鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 
&lt;span class=&#34;hl&#34;&gt;現在の認められた操作: Authenticate 
&lt;/span&gt;
   (S) 署名機能を反転する
   (A) 認証機能を反転する
   (Q) 完了

あなたの選択は? 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで認証機能（Authenticate）のみ有効になった。
&lt;code&gt;Q&lt;/code&gt; を入力して次に進もう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;あなたの選択は? q
ご希望の楕円曲線を選択してください:
&lt;span class=&#34;hl&#34;&gt;   (1) Curve 25519
&lt;/span&gt;   (3) NIST P-256
   (4) NIST P-384
   (5) NIST P-521
   (6) Brainpool P-256
   (7) Brainpool P-384
   (8) Brainpool P-512
   (9) secp256k1
あなたの選択は? 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; の認証用には &lt;code&gt;1&lt;/code&gt; から &lt;code&gt;5&lt;/code&gt; の楕円曲線のいずれかを選択する。
個人的なお勧めは &lt;code&gt;1&lt;/code&gt; の “&lt;code&gt;Curve 25519&lt;/code&gt;” である。
理由は以下の記事を参考のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/eddsa/&#34;&gt;Edwards-curve Digital Signature Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;では &lt;code&gt;1&lt;/code&gt; を入力して先に進む。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;あなたの選択は? 1
鍵の有効期限を指定してください。
&lt;span class=&#34;hl&#34;&gt;         0 = 鍵は無期限
&lt;/span&gt;      &amp;lt;n&amp;gt;  = 鍵は n 日間で期限切れ
      &amp;lt;n&amp;gt;w = 鍵は n 週間で期限切れ
      &amp;lt;n&amp;gt;m = 鍵は n か月間で期限切れ
      &amp;lt;n&amp;gt;y = 鍵は n 年間で期限切れ
鍵の有効期間は? (0)0
鍵は無期限です
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有効期限は意味がないので無期限（&lt;code&gt;0&lt;/code&gt;）を選択する。
理由は後述するのでちょっと待ってね。&lt;/p&gt;
&lt;p&gt;最終確認をして鍵を生成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;これで正しいですか? (y/N) y
本当に作成しますか? (y/N) y         
たくさんのランダム・バイトの生成が必要です。キーボードを打つ、マウスを動か
す、ディスクにアクセスするなどの他の操作を素数生成の間に行うことで、乱数生
成器に十分なエントロピーを供給する機会を与えることができます。

sec  ed25519/1DFF44901121B61D
     作成: 2021-01-06  有効期限: 2021-01-13  利用法: SC  
     信用: 究極        有効性: 究極
ssb  cv25519/4FECD03BE5BE4454
     作成: 2021-01-06  有効期限: 無期限      利用法: E   
ssb  ed25519/230D446E390C3E49
     作成: 2021-01-06  有効期限: 無期限      利用法: A   
[  究極  ] (1). Alice &amp;lt;alice@example.com&amp;gt;

gpg&amp;gt; save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後は &lt;code&gt;save&lt;/code&gt; コマンドを入力して結果を鍵束に保存する。
これで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --list-keys alice
pub   ed25519 2021-01-06 [SC] [有効期限: 2021-01-13]
      011C720B03D2E1D6BCFA98391DFF44901121B61D
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   cv25519 2021-01-06 [E]
&lt;span class=&#34;hl&#34;&gt;sub   ed25519 2021-01-06 [A]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;認証用の鍵が追加できた。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; フォーマットの公開鍵を出力する。&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; フォーマットの公開鍵は &lt;code&gt;--export-ssh-key&lt;/code&gt; コマンドで出力できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --export-ssh-key alice
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFfjejx/Saej929myfZoBQAKgusPi2iiOxdZZfpCLxh5 openpgp:0x390C3E49
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このテキストをホスト機の &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; ファイルに追記すれば仕込みは完了である。
パーミッションの変更を忘れずに（笑）&lt;/p&gt;
&lt;p&gt;この操作で分かると思うが &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; フォーマットで出力する時点で &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵の情報はほぼ脱落している。
だから「有効期限は意味がない」のよ。&lt;/p&gt;
&lt;p&gt;ちなみにこの操作は公開鍵に対して行われる。
たとえば，認証用の鍵を付加した &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 公開鍵をサーバ管理者に渡せば，サーバ管理者は集めた &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 公開鍵に署名して完全性を確保した後， &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; 認証用公開鍵を抽出して各ユーザのディレクトリにまとめてセットする，といったこともできるだろう。&lt;/p&gt;
&lt;h2&gt;ローカル側の設定 【2020-01-09 変更・追記あり】&lt;/h2&gt;
&lt;p&gt;念のためローカル側の設定についても記しておく。&lt;/p&gt;
&lt;h3&gt;ssh-agent を gpg-agent に置き換える&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; では &lt;code&gt;ssh-agent&lt;/code&gt; を &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の &lt;code&gt;gpg-agent&lt;/code&gt; に置き換えることで鍵の管理を &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 側に委譲できる。
&lt;code&gt;gpg-agent&lt;/code&gt; は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 秘密鍵管理の中核コンポーネントで，自身は Pinentry で入力したパスフレーズを一定期間キャッシュすることでユーザの鍵操作を省力化できる（秘密鍵自体のキャッシュは行わない）。&lt;/p&gt;
&lt;p&gt;この記事では Ubuntu での設定方法を挙げておく&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;どうも (Ubuntu を含む) Debian 系のディストリビューションでは SSH 接続に &lt;code&gt;ssh-agent&lt;/code&gt; を使うよう構成されているようで， &lt;code&gt;gpg-agent&lt;/code&gt; に置き換えるためにはいくつか設定を換える必要があるようだ。&lt;/p&gt;
&lt;p&gt;まず &lt;code&gt;/etc/X11/Xsession.options&lt;/code&gt; ファイル。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# $Id: Xsession.options 189 2005-06-11 00:04:27Z branden $
#
# configuration options for /etc/X11/Xsession
# See Xsession.options(5) for an explanation of the available options.
allow-failsafe
allow-user-resources
allow-user-xsession
use-ssh-agent
use-session-dbus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この中の &lt;code&gt;use-ssh-agent&lt;/code&gt; を &lt;code&gt;no-use-ssh-agent&lt;/code&gt; に置き換える。&lt;/p&gt;
&lt;p&gt;次に &lt;code&gt;/etc/xdg/autostart/gnome-keyring-ssh.desktop&lt;/code&gt; ファイルを &lt;code&gt;~/.config/autostart/&lt;/code&gt; ディレクトリにコピーし&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Hidden=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;を書き加える。&lt;/p&gt;
&lt;p&gt;最後に &lt;code&gt;~/.gnupg/gpg-agent.conf&lt;/code&gt; ファイルに &lt;code&gt;enable-ssh-support&lt;/code&gt; を書き加える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;enable-ssh-support
default-cache-ttl-ssh 1800
max-cache-ttl-ssh 7200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下2つのオプションは任意で，以下の意味を持つ。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション名&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default-cache-ttl-ssh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;直前にアクセスしたキャッシュ・エントリの有効期間を秒単位で指定する。 既定値は 1800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;max-cache-ttl-ssh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キャッシュ・エントリの有効期間の最大値を秒単位で指定する。 アクセスの有無にかかわらずこの期間が過ぎるとキャッシュがクリアされる。 既定値は 7200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;有効期間は大きすぎると漏洩リスクが高まるのでほどほどに（笑）&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; 認証鍵の登録&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の鍵束の鍵を &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; の認証鍵として使うには &lt;code&gt;~/.gnupg/sshcontrol&lt;/code&gt; ファイルへの登録が必要である。
先ほど作成した鍵であれば，まず以下のコマンドで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --list-keys --with-keygrip alice
pub   ed25519 2021-01-06 [SC] [有効期限: 2021-01-13]
      011C720B03D2E1D6BCFA98391DFF44901121B61D
      Keygrip = 97249ABEB2A2FD9E88F6723BB19D4F84B90E261A
uid           [  究極  ] Alice &amp;lt;alice@example.com&amp;gt;
sub   cv25519 2021-01-06 [E]
      Keygrip = 96CB831965E1A7EB4705577D6A7CB7F9E05C8192
sub   ed25519 2021-01-06 [A]
&lt;span class=&#34;hl&#34;&gt;      Keygrip = F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;該当する鍵の keygrip 値を調べる。
今回の例なら “&lt;code&gt;F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E&lt;/code&gt;” が該当する keygrip 値である。
これを &lt;code&gt;~/.gnupg/sshcontrol&lt;/code&gt; ファイルに追記する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E 0 &amp;gt;&amp;gt; ~/.gnupg/sshcontrol
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;ssh-add -L&lt;/code&gt; コマンドでこの鍵の内容が表示されればOK。&lt;/p&gt;
&lt;p&gt;ちなみに keygrip 値の後ろの &lt;code&gt;0&lt;/code&gt; はキャッシュ期間（秒）を指すらしい。
&lt;code&gt;0&lt;/code&gt; より大きければ &lt;code&gt;gpg-agent.conf&lt;/code&gt; ファイルの指定より優先されるってことかな。
また行頭に &lt;code&gt;!&lt;/code&gt; マークを付けると鍵の使用を無効化できる。&lt;/p&gt;
&lt;p&gt;念のため &lt;code&gt;sshcontrol&lt;/code&gt; ファイルも不用意に書き込みできないよう制限をかけておくとよいだろう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/gnupg-cheat-sheet/&#34;&gt;GnuPG チートシート（鍵作成から失効まで）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-ecc-with-gnupg/&#34;&gt;そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/upgrade-openssh-key/&#34;&gt;OpenSSH 鍵をアップグレードする（さようなら SHA-1）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Windows 環境での設定手順については拙文「&lt;a href=&#34;https://text.baldanders.info/openpgp/using-gnupg-for-windows-2/&#34;&gt;GnuPG for Windows : gpg-agent について&lt;/a&gt;」を参考にどうぞ。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Ubuntu 20.10 のアップグレードに失敗していた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/11/upgrade-ubuntu-20_10/" />
		<id>tag:text.Baldanders.info,2020-11-23:/remark/2020/11/upgrade-ubuntu-20_10/</id>
		<published>2020-11-23T02:02:44+00:00</published>
		<updated>2020-11-23T02:03:41+00:00</updated>
		<summary>ま，まぁ，ともかく，アップグレードは完了した。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;2020年10月に &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 20.10 がリリースされたが，今回は日本語 Remix 版が出るまで呑気に待つつもりだった。
その後ちょっと忙しくなったので完全に忘れていたのだが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.ubuntu.com/archives/ubuntu-jp/2020-November/006372.html&#34;&gt;[ubuntu-jp:6373] Ubuntu 20.10 日本語 Remix リリース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/11/ubuntu-2010-50-ubuntu-2010-remix.html&#34;&gt;Ubuntu 20.10 その50 - Ubuntu 20.10 日本語 Remixがリリースされました・ディスクイメージのダウンロード - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2週間前に出てるぢゃん &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;あれ？ そういえば GUI の update が何も言ってこないな？ と思って少し調べてみた。
まず GUI 側の設定は問題ない（新バージョンの通知が「すべての新バージョン」になっていればOK）。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./settings-update.png&#34;&gt;&lt;img src=&#34;./settings-update.png&#34; srcset=&#34;./settings-update.png 1009w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;念のため &lt;code&gt;/etc/update-manager/release-upgrades&lt;/code&gt; ファイルも見てみるが&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Default prompting and upgrade behavior, valid options:&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#  never  - Never check for, or allow upgrading to, a new release.&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#  normal - Check to see if a new release is available.  If more than one new&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           release is found, the release upgrader will attempt to upgrade to&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           the supported release that immediately succeeds the&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           currently-running release.&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#  lts    - Check to see if a new LTS release is available.  The upgrader&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           will attempt to upgrade to the first LTS release available after&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           the currently-running one.  Note that if this option is used and&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           the currently-running release is not itself an LTS release the&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           upgrader will assume prompt was meant to be normal.&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Prompt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;normal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ってなってた。
これも問題ない。&lt;/p&gt;
&lt;p&gt;しょうがないので手動でターミナル・エミュレータから &lt;code&gt;do-release-upgrade&lt;/code&gt; を起動してみる。
したら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo do-release-upgrade
Checking for a new Ubuntu release
Failed to connect to https://changelogs.ubuntu.com/meta-release. Check your Internet connection or proxy settings
No new release found.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;は？ ネット接続設定に問題はねーよ。
どーりでアップグレードが動かないわけだよ。
ちなみにブラウザから上述の URL を叩いてみたがちゃんと開くし，末尾に Groovy Gorilla の項目もある。&lt;/p&gt;
&lt;p&gt;何じゃこりゃ，とググってみたら &lt;code&gt;/etc/update-manager/meta-release&lt;/code&gt; ファイル&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;METARELEASE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;URI&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changelogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ubuntu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;release&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;URI_LTS&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changelogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ubuntu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lts&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;URI_UNSTABLE_POSTFIX&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;development&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;URI_PROPOSED_POSTFIX&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proposed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;の &lt;code&gt;URI&lt;/code&gt; 項目を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;nx&#34;&gt;URI&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changelogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ubuntu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;release&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;に書き換えろ，とあった。
つまり HTTPS 接続できないらしい。
実際に書き換えたらようやくアップグレードが走り出した。&lt;/p&gt;
&lt;p&gt;これ，大丈夫か？&lt;/p&gt;
&lt;p&gt;ま，まぁ，ともかく，途中で &lt;code&gt;mozc&lt;/code&gt; や GNOME の日本語パッケージが勝手に消されるアクシデントもあったが設定の「地域と言語」から復元できたし，アップグレードは完了した。&lt;/p&gt;
&lt;h2&gt;個別のアプリケーションについて&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; および &lt;a href=&#34;https://gnupg.org/software/libgcrypt/&#34;&gt;Libgcrypt&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.2.20
libgcrypt 1.8.5
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: /home/username/.gnupg
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,
      TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の遅れっぷりは相変わらず。
ちなみに現時点（2020-11-23）の最新版は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
&lt;span class=&#34;hl&#34;&gt;gpg (GnuPG) 2.2.24
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;libgcrypt 1.8.7
&lt;/span&gt;Copyright (C) 2020 g10 Code GmbH
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;である。
おっ， 2.2.24 から著作権者表示が代わってるな。
いや，開発やメンテは一貫して “g10 Code GmbH” がやってるんだけど。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; および &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ssh -V
OpenSSH_8.3p1 Ubuntu-1, OpenSSL 1.1.1h  22 Sep 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; は 2020-09-27 に 8.4 が出てるのでこれも周回遅れ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; については APT では&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apt show openssl
Package: openssl
Version: 1.1.1f-1ubuntu4
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とバックポート・パッチのせいで相変わらずよく分からないのだが，私が&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/installing-openssl-in-ubuntu/&#34;&gt;Ubuntu に最新の OpenSSL を入れる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という感じに手動でアップデートを行っている。
ちなみに，現時点（2020-11-23）での &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; 1.1.1 系最新版は 2020-09-22 にリリースされた 1.1.1h である。&lt;/p&gt;
&lt;h3&gt;Libsecret のアップデート&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; credential helper である GNOME/libsecret もバージョンが上がってる？ のかな。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apt show libsecret-1-dev
Package: libsecret-1-dev
Version: 0.20.3-1
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というわけで，これも手動でビルドする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ mkdor ~/work
$ cd ~/work
$ cp -r /usr/share/doc/git/contrib/credential/libsecret .
$ cd libsecret
$ make
gcc -g -O2 -Wall  -pthread -I/usr/include/libsecret-1 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-libsecret.o -c git-credential-libsecret.c
gcc -o git-credential-libsecret  git-credential-libsecret.o -lsecret-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで生成した &lt;code&gt;git-credential-libsecret&lt;/code&gt; を &lt;code&gt;$PATH&lt;/code&gt; の通ったディレクトリに放り込んでおけばよい。
&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; の設定に組み込むには以下のコマンドでOK。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git config --global credential.helper libsecret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ubuntu-news.org/2020/10/22/ubuntu-20-10-groovy-gorilla-released/&#34;&gt;Ubuntu Fridge | Ubuntu 20.10 (Groovy Gorilla) released&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://discourse.ubuntu.com/t/groovy-gorilla-release-notes/15533&#34;&gt;Groovy Gorilla Release Notes - Release - Ubuntu Community Hub&lt;/a&gt; (&lt;a href=&#34;https://wiki.ubuntu.com/GroovyGorilla/ReleaseNotes/Ja&#34;&gt;日本語&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/news/secadv/20200909.txt&#34;&gt;OpenSSL Security Advisory [09 September 2020]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ubuntuforums.org/showthread.php?t=2452515&amp;amp;s=b5cbbeb5143c46914981366cb0eec2ef&#34;&gt;[SOLVED] Cannot upgrade 20.10 Failed to connect to https://changelogs.ubuntu.com/meta-release&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/10/ubuntu-2010-12-ubuntu-2010.html&#34;&gt;Ubuntu 20.10 その12 - Ubuntu 20.10がリリースされました・ディスクイメージのダウンロード - kledgeb&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://net.youhei02.com/ubuntu13/&#34;&gt;Ubuntu20.04から20.10にアップグレードする方法 | ネットでお金を稼ぐ男のブログ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/bootable-usb/&#34;&gt;Ubuntu インストール用のブート可能 USB メモリを作成する&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-git-from-ppa/&#34;&gt;PPA から Git をインストールする&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/317fsDSqG8L._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;シリコンパワー USBメモリ 32GB USB3.1 / USB3.0 亜鉛合金ボディ 防水 防塵 耐衝撃 永久保証 PS4動作確認済 Jewel J80 SP032GBUF3J80V1TJA&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;シリコンパワー (Release 2017-02-01)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B01NBU1OS5 (ASIN), 4712702655292 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;OS 移行用に購入。ひたすらデザインで決めた（笑） よく考えたら32GBも要らなかった。まぁ，何か使い道があるだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-04-21&#34;&gt;2019-04-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- シリコンパワー USBメモリ 32GB USB3.1 --&gt;
</content>
	</entry><entry>
		<title>Ubuntu に最新の OpenSSL を入れる</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/06/installing-openssl-in-ubuntu/" />
		<id>tag:text.Baldanders.info,2020-06-24:/remark/2020/06/installing-openssl-in-ubuntu/</id>
		<published>2020-06-24T11:37:29+00:00</published>
		<updated>2020-06-24T11:37:45+00:00</updated>
		<summary>セキュリティの中核部品なので手動で入れるのはどうかと思ったが，調べたところ簡単に行きそうだ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;最近ようやく &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 20.04 で &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 8.3 に対応するバックポート・パッチが出たようだ？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ssh -V
OpenSSH_8.2p1 Ubuntu-4ubuntu0.1, OpenSSL 1.1.1f  31 Mar 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし，上に見るように &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; に関しては 1.1.1f のまま，&lt;a href=&#34;https://usn.ubuntu.com/&#34; title=&#34;Ubuntu security notices&#34;&gt;バックポート・パッチもなく&lt;/a&gt;，脆弱性が放置されている模様。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/alert20200423.html&#34;&gt;OpenSSL の脆弱性対策について(CVE-2020-1967) ：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2020/at200018.html&#34;&gt;OpenSSL の脆弱性 (CVE-2020-1967) に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私としてはそろそろ我慢の限界なので，手動で最新バージョンの &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; を入れることにした。
セキュリティの中核部品なので手動で入れるのはどうかと思ったが，調べたところ簡単に行きそうだ。&lt;/p&gt;
&lt;p&gt;自分で試す場合は自己責任でね☆&lt;/p&gt;
&lt;h2&gt;既定状態&lt;/h2&gt;
&lt;p&gt;まず &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; を手動インストールする前の状態をメモっておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ which openssl
/usr/bin/openssl

$ ldd /usr/bin/openssl
	linux-vdso.so.1 (0x00007ffe186db000)
	libssl.so.1.1 =&amp;gt; /usr/lib/x86_64-linux-gnu/libssl.so.1.1 (0x00007f5d77c11000)
	libcrypto.so.1.1 =&amp;gt; /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 (0x00007f5d7793b000)
	libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f5d77918000)
	libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f5d77726000)
	libdl.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f5d77720000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f5d77d7e000)

$ openssl version
OpenSSL 1.1.1f  31 Mar 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この状態を覚えておく。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; 最新版のダウンロード&lt;/h2&gt;
&lt;p&gt;2020-06-24 時点の最新バージョンは 1.1.1g なので，これを&lt;a href=&#34;https://www.openssl.org/source/&#34;&gt;ダウンロードする&lt;/a&gt;ところから始める。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src/
$ sudo wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz
$ sudo wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz.asc
$ gpg -d openssl-1.1.1g.tar.gz.asc
gpg: 署名されたデータが&amp;#39;openssl-1.1.1g.tar.gz&amp;#39;にあると想定します
gpg: 2020年04月21日 21時22分45秒 JSTに施された署名
gpg:                RSA鍵8657ABB260F056B1E5190839D9C4D26D0E604491を使用
gpg: &amp;#34;Matt Caswell &amp;lt;matt@openssl.org&amp;gt;&amp;#34;からの正しい署名 [不明の]
gpg:                 別名&amp;#34;Matt Caswell &amp;lt;frodo@baggins.org&amp;gt;&amp;#34; [不明の]
gpg: *警告*: この鍵は信用できる署名で証明されていません!
gpg:          この署名が所有者のものかどうかの検証手段がありません。
主鍵フィンガープリント: 8657 ABB2 60F0 56B1 E519  0839 D9C4 D26D 0E60 4491
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;openssl-1.1.1g.tar.gz.asc&lt;/code&gt; ファイルは &lt;code&gt;openssl-1.1.1g.tar.gz&lt;/code&gt; ファイルに対する &lt;a href=&#34;https://www.openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 電子署名ファイルで，上述の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; コマンドで検証できる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;ダウンロードしたファイルの検証は必ず行うこと。
検証用の公開鍵がない場合には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --recv-keys 0xD9C4D26D0E604491
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で鍵サーバからインポートできる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; 最新版をビルド&amp;amp;インストールする&lt;/h2&gt;
&lt;p&gt;では，インストールの続きを。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ pwd
/usr/local/src

$ sudo tar xvf openssl-1.1.1g.tar.gz 
$ cd openssl-1.1.1g/
$ sudo ./config
$ sudo make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; コマンドが始まると長いため，あらかじめお茶菓子を用意しておきましょう（笑）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; により各ファイル（マニュアル以外）は以下のディレクトリに配置される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/usr/local/bin/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;openssl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/local/lib/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libcrypto.so.1.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libssl.so.1.1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/local/ssl/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;openssl.cnf&lt;/code&gt; 等&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ldconfig を忘れずに&lt;/h2&gt;
&lt;p&gt;ほんじゃあ動かしてみよっか。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ which openssl
/usr/local/bin/openssl

$ ldd /usr/local/bin/openssl
	linux-vdso.so.1 (0x00007ffcb01b7000)
	libssl.so.1.1 =&amp;gt; /usr/lib/x86_64-linux-gnu/libssl.so.1.1 (0x00007f1d88d55000)
	libcrypto.so.1.1 =&amp;gt; /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 (0x00007f1d88a7f000)
	libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f1d88a5c000)
	libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1d8886a000)
	libdl.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f1d88864000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f1d88ec6000)

$ openssl version
openssl: symbol lookup error: openssl: undefined symbol: EVP_mdc2, version OPENSSL_1_1_0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;おっと。
&lt;code&gt;libssl.so.1.1&lt;/code&gt; と &lt;code&gt;libcrypto.so.1.1&lt;/code&gt; のリンク情報が古いままだったね。
ちうわけで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo ldconfig

$ ldd /usr/local/bin/openssl
	linux-vdso.so.1 (0x00007fff9e6f0000)
&lt;span class=&#34;hl&#34;&gt;	libssl.so.1.1 =&amp;gt; /usr/local/lib/libssl.so.1.1 (0x00007fcbf44ab000)
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;	libcrypto.so.1.1 =&amp;gt; /usr/local/lib/libcrypto.so.1.1 (0x00007fcbf41c1000)
&lt;/span&gt;	libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fcbf419e000)
	libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fcbf3fac000)
	libdl.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fcbf3fa6000)
	/lib64/ld-linux-x86-64.so.2 (0x00007fcbf4620000)

$ openssl version
OpenSSL 1.1.1g  21 Apr 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ldconfig&lt;/code&gt; コマンドでキャッシュを更新するのを忘れずに&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;（笑）
これで &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; も&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ssh -V
OpenSSH_8.2p1 Ubuntu-4ubuntu0.1, OpenSSL 1.1.1g  21 Apr 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と新しい方の &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; を見てくれる。&lt;/p&gt;
&lt;p&gt;ちなみにオリジナルの &lt;code&gt;/usr/bin/openssl&lt;/code&gt; はそのまま残ってて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ /usr/bin/openssl version
OpenSSL 1.1.1f  31 Mar 2020 (Library: OpenSSL 1.1.1g  21 Apr 2020)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じになる。
APT で &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; を更新する場合は注意すること。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.trusted-design.net/archives/933/&#34;&gt;UbuntuでOpenSSLを最新バージョンにする | Trusted Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kaworu.jpn.org/security/OpenSSL%E3%81%8C_error_while_loading_shared_libraries_libssl.so.1.1&#34;&gt;OpenSSLが error while loading shared libraries libssl.so.1.1 - セキュリティ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- eof --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;インポートした公開鍵を有効化してないと署名検証時に「この鍵は信用できる署名で証明されていません」と表示される。まぁ，有効化しなくても検証自体はできるけど。 &lt;a href=&#34;https://www.openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵の操作については拙文「&lt;a href=&#34;https://text.baldanders.info/openpgp/gnupg-cheat-sheet/&#34;&gt;GnuPG チートシート（鍵作成から失効まで）&lt;/a&gt;」を参考にどうぞ。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;既定では &lt;code&gt;openssl.cnf&lt;/code&gt; ファイルは &lt;code&gt;/etc/ssl/&lt;/code&gt; ディレクトリに置かれているものを読む。環境変数 &lt;code&gt;OPENSSL_CONF&lt;/code&gt; で変更することも可能。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;万が一 &lt;code&gt;ldconfig&lt;/code&gt; で新しいファイルに切り替わらない場合は &lt;code&gt;/etc/ld.so.conf.d/&lt;/code&gt; ディレクトリにある &lt;code&gt;*.conf&lt;/code&gt; ファイルをチェックして &lt;code&gt;/usr/local/lib/&lt;/code&gt; ディレクトリもキャッシュの対象に含めるよう設定する。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>OpenSSH 鍵をアップグレードする（さようなら SHA-1）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/06/upgrade-openssh-key/" />
		<id>tag:text.Baldanders.info,2020-06-01:/remark/2020/06/upgrade-openssh-key/</id>
		<published>2020-06-01T07:12:32+00:00</published>
		<updated>2020-06-08T01:14:57+00:00</updated>
		<summary>どうせ鍵を新調するのなら楕円曲線暗号で構成するのがいいよね。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;2020-05-27 に &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 8.3 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lwn.net/Articles/821544/&#34;&gt;OpenSSH 8.3 released (and ssh-rsa deprecation notice) [LWN.net]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この中で “Future deprecation notice” として&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;It is now possible to perform chosen-prefix attacks against the SHA-1 algorithm for less than USD$50K. For this reason, we will be disabling the “ssh-rsa” public key signature algorithm by default in a near-future release&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://lwn.net/Articles/821544/&#34;&gt;OpenSSH 8.3 released (and ssh-rsa deprecation notice)&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と書かれていて&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，クライアント側はそろそろ古い RSA 鍵から交換したほうがよさそうである。
もっとも最近のバージョン&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; で作った鍵であれば特に問題ないようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/username/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/username/.ssh/id_rsa
Your public key has been saved in /home/username/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:qufsNjgco3QZNjE4eupwQiT6mD8fr2a7nXmU3ybxFHo username@hostname
The key&amp;#39;s randomart image is:
+---[RSA 3072]----+
|   .             |
|..o o            |
|+. . o           |
|o.. +       .    |
|.* . +  S. . .   |
|* + =  .o o E    |
|o= +.+.. . *     |
| .+ **+o. o +    |
|   =*XOo   o     |
+----[SHA256]-----+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ハッシュ・アルゴリズムが SHA256 以上になっているか，がポイント。&lt;/p&gt;
&lt;p&gt;でも，まぁ，どうせ鍵を新調するのなら楕円曲線暗号（Elliptic Curve Cryptography; ECC）で構成するのがいいよね。
ちうわけで，ECC 鍵を作って登録するところまでやってみる。
ちゃんとメモっておかないと忘れるので（笑）&lt;/p&gt;
&lt;h2&gt;前提条件&lt;/h2&gt;
&lt;p&gt;今回は &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 環境下での作業とし鍵管理を &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; で行うものとする。
Windows 環境の場合は以下の拙文を参考にどうぞ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-gnupg-for-windows-2/&#34;&gt;GnuPG for Windows : gpg-agent について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; と &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を連携させるには &lt;code&gt;~/.gupg/gpg-agent.conf&lt;/code&gt; ファイルに &lt;code&gt;enable-ssh-support&lt;/code&gt; オプションをセットする。
他に有効なオプションとしては&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション名&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default-cache-ttl-ssh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;直前にアクセスしたキャッシュ・エントリの有効期間を秒単位で指定する。 既定値は 1800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;max-cache-ttl-ssh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;キャッシュ・エントリの有効期間の最大値を秒単位で指定する。 アクセスの有無にかかわらずこの期間が過ぎるとキャッシュがクリアされる。 既定値は 7200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;がある。
たとえばこんな感じで記述すればいいだろう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;enable-ssh-support
default-cache-ttl-ssh 1800
max-cache-ttl-ssh 7200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あとは &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; 環境変数を以下のように書き換えればOK。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;~/.bashrc&lt;/code&gt; 等に追記しておけばよいだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 鍵の生成&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 鍵を生成するには &lt;code&gt;ssh-keygen&lt;/code&gt; コマンドを使う。
たとえばこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ssh-keygen -t ecdsa -b 256 -C &amp;#34;alice@example.com&amp;#34;
Generating public/private ecdsa key pair.
Enter file in which to save the key (/home/username/.ssh/id_ecdsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/username/.ssh/id_ecdsa
Your public key has been saved in /home/username/.ssh/id_ecdsa.pub
The key fingerprint is:
SHA256:DtXgQm9rz7Dc5M5yWu/CNVo341o1rcfN9UCyYu+SZU4 alice@example.com
The key&amp;#39;s randomart image is:
+---[ECDSA 256]---+
|      . .        |
|     . o o       |
|      . = . . .  |
|       + .   +  .|
|      . S + . ..+|
|       = X oE +*=|
|        +.*X.+oo*|
|        .+Bo.... |
|        .+o+=.   |
+----[SHA256]-----+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで作成された &lt;code&gt;id_ecdsa&lt;/code&gt; および &lt;code&gt;id_ecdsa.pub&lt;/code&gt; ファイルが鍵ファイルである。
ちなみに &lt;code&gt;id_ecdsa&lt;/code&gt; ファイルには秘密鍵， &lt;code&gt;id_ecdsa.pub&lt;/code&gt; ファイルには公開鍵が格納されている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; オプションで鍵種別を， &lt;code&gt;-b&lt;/code&gt; で鍵長（ビット数）をセットする。
鍵種別と鍵長の組み合わせと，それぞれに対するセキュリティ強度（ビット数）は以下の通り。&lt;/p&gt;
&lt;div&gt;
&lt;figure&gt;
&lt;style&gt;
main table.sshkeys th  {
  vertical-align:middle;
  text-align: center;
}
main table.sshkeys td  {
  vertical-align:middle;
  //text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;sshkeys&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;鍵種別&lt;/th&gt;
&lt;th&gt;鍵長&lt;/th&gt;
&lt;th&gt;強度&lt;/th&gt;
&lt;th&gt;楕円曲線名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;td rowspan=&#34;3&#34;&gt;&lt;code&gt;dsa&lt;/code&gt;&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;3072&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;128&lt;/td&gt;
  &lt;td rowspan=&#34;3&#34;&gt;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&#34;right&#34;&gt;7680&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;192&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&#34;right&#34;&gt;15360&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td rowspan=&#34;3&#34;&gt;&lt;code&gt;ecdsa&lt;/code&gt; / &lt;code&gt;ecdsa-sk&lt;/code&gt;&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;256&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;128&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;nistp256&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&#34;right&#34;&gt;384&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;192&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;nistp384&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&#34;right&#34;&gt;521&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;256&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;nistp521&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ed25519&lt;/code&gt; / &lt;code&gt;ed25519-sk&lt;/code&gt;&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;&amp;mdash;&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;128&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;ed25519&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td rowspan=&#34;3&#34;&gt;&lt;code&gt;rsa&lt;/code&gt;&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;3072&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;128&lt;/td&gt;
  &lt;td rowspan=&#34;3&#34;&gt;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&#34;right&#34;&gt;7680&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;192&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&#34;right&#34;&gt;15360&lt;/td&gt;
  &lt;td class=&#34;right&#34;&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;この組み合わせのいずれかであれば2031年以降も問題なく使える。
なお &lt;code&gt;ecdsa-sk&lt;/code&gt; および &lt;code&gt;ed25519-sk&lt;/code&gt; は認証デバイスに登録する際に使うらしい（今回は割愛する）。&lt;/p&gt;
&lt;p&gt;余談だが楕円曲線 &lt;code&gt;ed25519&lt;/code&gt; に対応する電子署名アルゴリズムは EdDSA と呼ばれ &lt;a href=&#34;https://tools.ietf.org/html/rfc8032&#34; title=&#34;RFC 8032 - Edwards-Curve Digital Signature Algorithm (EdDSA)&#34;&gt;RFC 8032&lt;/a&gt; で規定されている&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
なんで鍵種別を &lt;code&gt;eddsa&lt;/code&gt; としなかったのかは知らない。
紛らわしかったのかな？&lt;/p&gt;
&lt;h3&gt;楕円曲線と鍵長&lt;/h3&gt;
&lt;p&gt;（「&lt;a href=&#34;https://text.baldanders.info/openpgp/using-ecc-with-gnupg/&#34;&gt;そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな&lt;/a&gt;」より抜粋）&lt;/p&gt;
&lt;p&gt;ここでちょっと横道に逸れて鍵長の話をしておく。&lt;/p&gt;
&lt;p&gt;たとえば RSA の（平文 $M$ から暗号文 $C$ への）暗号化は以下の式で表される。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;
\[
    C = M^e \bmod n
\]
&lt;/div&gt;
&lt;p&gt;$(e, n)$ のセットが公開鍵で， $n$ のサイズが鍵長に相当する。
実際の計算はともかく，感覚としては分かりやすいよね。&lt;/p&gt;
&lt;p&gt;ECC の場合は暗号化の前に，まずベースとなる楕円曲線の（素数 $q$ で決められる）素体（prime fields）を決めなければならない&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
これは以下の式で表される。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;
\[
    E : y^2 \equiv x^3 + ax + b \pmod{q}
\]
&lt;/div&gt;
&lt;p&gt;この素体上の有理点の数（位数）を $\#E$ とした時の $\#E$ のサイズが鍵長に相当する。
$(a,b,q)$ といったパラメータを眺めただけでは鍵長が分からないというのが面倒臭い感じである&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;そこで ECC の場合は楕円曲線を表すパラメータのセットが標準化されている。
&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; の場合は &lt;code&gt;nistp256&lt;/code&gt;, &lt;code&gt;nistp384&lt;/code&gt;, &lt;code&gt;nistp521&lt;/code&gt;, &lt;code&gt;ed25519&lt;/code&gt; といった楕円曲線名に対応している。
つまり楕円曲線名から楕円曲線の種類を特定し，そこから鍵長も分かる，というわけだ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 鍵の登録（クライアント側）&lt;/h2&gt;
&lt;p&gt;本題に戻る。
作成した &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 鍵ファイル &lt;code&gt;id_ecdsa&lt;/code&gt; および &lt;code&gt;id_ecdsa.pub&lt;/code&gt; を登録しよう。&lt;/p&gt;
&lt;p&gt;クライアント側は &lt;code&gt;ssh-add&lt;/code&gt; コマンドを使って秘密鍵ファイル &lt;code&gt;id_ecdsa&lt;/code&gt; の内容を &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の鍵束に永続的に登録できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ssh-add ./id_ecdsa
Enter passphrase for ./id_ecdsa: 
Identity added: ./id_ecdsa (alice@example.com)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この時 &lt;code&gt;ssh-add&lt;/code&gt; コマンドによるパスフレーズ入力とは別に &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の pinentry によるパスフレーズの設定が行われる（確認を含めて2回入力する必要あり）。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./pinentry.png&#34;&gt;&lt;img src=&#34;./pinentry.png&#34; srcset=&#34;./pinentry.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;pinentry&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./pinentry.png&#34;&gt;pinentry&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Pinentry で設定するパスフレーズは &lt;code&gt;id_ecdsa&lt;/code&gt; ファイルに対するものとは管理が異なるので注意。
というか &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の鍵束に登録したら &lt;code&gt;id_ecdsa&lt;/code&gt; ファイルは不要になる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 秘密鍵が登録できたかどうかは &lt;code&gt;~/.gnupg/sshcontrol&lt;/code&gt; ファイルで確認できる。
ちゃんと登録できていれば以下のような内容が追記される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# ECDSA key added on: 2020-06-01 14:05:35
# Fingerprints:  MD5:e4:5b:66:a6:03:9a:a4:0e:f2:1b:a5:04:72:93:f3:f0
#                SHA256:DtXgQm9rz7Dc5M5yWu/CNVo341o1rcfN9UCyYu+SZU4
A5353D587000D820669B0BD55A0B4AD6897458DB 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また &lt;code&gt;ssh-add -l&lt;/code&gt; コマンドでも登録した鍵を確認できる。&lt;/p&gt;
&lt;p&gt;鍵の実体は &lt;code&gt;~/.gnupg/private-keys-v1.d/&lt;/code&gt; ディレクトリにある。
上述の鍵の場合は&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A5353D587000D820669B0BD55A0B4AD6897458DB.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;というファイル名で格納されているはずである。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 鍵の登録（サーバ側）&lt;/h2&gt;
&lt;p&gt;ログイン先のサーバに公開鍵ファイル &lt;code&gt;id_ecdsa.pub&lt;/code&gt; の中身を登録する。
つっても，どうにかして &lt;code&gt;id_ecdsa.pub&lt;/code&gt; ファイルをサーバにアップロードして&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat ./id_ecdsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;と &lt;code&gt;authorized_keys&lt;/code&gt; ファイルに追記すればよい。
追記ではなく内容を書き換えるなら&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat ./id_ecdsa.pub &amp;gt; ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;でもよい。
書き換えるなら以前のファイルのバックアップはとってね。
パーミッションの設定も忘れずに。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ chamod 700 ~/.ssh
$ chamod 600 ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;老婆心ながら，新しい鍵でログインできることを確認するまでは接続中のセッションは切らないこと。
設定を間違えてログイン不能になったら悲惨だからねぇ。&lt;/p&gt;
&lt;h3&gt;各種 &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; リポジトリ・サービスに公開鍵を登録する&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; ではリポジトリのアクセスに &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 認証が使える。
&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 認証に使う公開鍵は設定の “&lt;a href=&#34;https://github.com/settings/keys&#34;&gt;SSH and GPG keys&lt;/a&gt;” で登録する（複数登録可能）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/product/&#34;&gt;Bitbucket&lt;/a&gt; や &lt;a href=&#34;https://gitlab.com/&#34;&gt;GitLab&lt;/a&gt; などの各種 &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; リポジトリ・サービスでも同様に &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 公開鍵を登録できる。&lt;/p&gt;
&lt;p&gt;よしゃあ！ これで作業完了。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://orumin.blogspot.com/2020/05/ssh-rsa.html&#34;&gt;ssh-rsa，非推奨のお知らせ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35154545/&#34;&gt;OpenSSH、将来のリリースでssh-rsa公開鍵の署名アルゴリズムをデフォルトで無効に - ZDNet Japan&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/10/key-parameters/&#34;&gt;暗号鍵関連の各種変数について&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/01/sayonara-sha-1/&#34;&gt;（何度目かの）さようなら SHA-1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/eddsa/&#34;&gt;Edwards-curve Digital Signature Algorithm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;実は同様の問題は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; でも指摘されていて，半年前にリリースされた 2.2.18 で対応済みである（&lt;a href=&#34;https://text.baldanders.info/release/2019/11/gnupg-2_2_18-is-released/&#34;&gt;GnuPG 2.2.18 リリース： さようなら SHA-1&lt;/a&gt;） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ちなみに，私は2011年に作った RSA 鍵を使っているが，ハッシュ・アルゴリズムは SHA256 だった。少なくとも10年以内に作った鍵なら問題なさそう？ あとは鍵長かねぇ。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;code&gt;ed25519&lt;/code&gt; (edwards25519) は &lt;a href=&#34;http://cr.yp.to/ecdh.html&#34; title=&#34;Curve25519: high-speed elliptic-curve cryptography&#34;&gt;Curve25519&lt;/a&gt; と双有理同値な楕円曲線で，鍵長も  &lt;a href=&#34;http://cr.yp.to/ecdh.html&#34; title=&#34;Curve25519: high-speed elliptic-curve cryptography&#34;&gt;Curve25519&lt;/a&gt; と同じく256ビット（セキュリティ強度128ビット）と見積もられている。ちなみに &lt;a href=&#34;http://cr.yp.to/ecdh.html&#34; title=&#34;Curve25519: high-speed elliptic-curve cryptography&#34;&gt;Curve25519&lt;/a&gt; は ECDH 用の楕円曲線およびそのライブラリで，公有（public domain）のソフトウェアとして公開されている。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;素体ではなく「標数2の体（binary fields）」を使う場合もあるが，ここでは割愛する。 &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;楕円曲線と楕円曲線暗号については結城浩さんの『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版&lt;/a&gt;』の付録に比較的分かりやすい解説が載っている。同じく結城浩さんの『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34;&gt;数学ガール ガロア理論&lt;/a&gt;』が何となく分かれば楕円曲線についても何となく分かると思う。大丈夫。私も何となくしか分かっていない（笑） &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Ubuntu 20.04 にアップグレードする</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/04/upgrade-ubuntu-20_04/" />
		<id>tag:text.Baldanders.info,2020-04-26:/release/2020/04/upgrade-ubuntu-20_04/</id>
		<published>2020-04-26T07:58:37+00:00</published>
		<updated>2020-11-23T02:03:41+00:00</updated>
		<summary>よーやく GnuPG/Libgcrypt のバージョンが上がったよ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 20.04 がリリースされた。
20.04 は長期サポート版で2025年4月までサポートが有効である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ubuntu.com/blog/ubuntu-20-04-lts-arrives&#34;&gt;Ubuntu 20.04 LTS arrives | Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.ubuntu.com/FocalFossa/ReleaseNotes&#34;&gt;FocalFossa/ReleaseNotes - Ubuntu Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;19.10 または長期サポート版の 18.04 から 20.04 へのアップグレードは&lt;a href=&#34;https://wiki.ubuntu.com/FocalFossa/ReleaseNotes&#34; title=&#34;FocalFossa/ReleaseNotes - Ubuntu Wiki&#34;&gt;リリースノート&lt;/a&gt;を参考にするとよい。
基本的には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ update-manager -c -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とアップグレード・モードで GUI を起動すれば，あとはよろしくやってくれる。
ただし 20.04 では32bitアーキテクチャをサポートしなくなったので，この場合は 18.04 からアップグレードしてはいけない&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;なお，アップグレード時にサードパーティの APT リポジトリ（&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-git-from-ppa/&#34; title=&#34;PPA から Git をインストールする&#34;&gt;git&lt;/a&gt; や &lt;a href=&#34;https://flight-manual.atom.io/getting-started/sections/installing-atom/&#34; title=&#34;Installing Atom&#34;&gt;ATOM&lt;/a&gt; など）が外れるので，必要ならアップグレード時に戻して更新すること。&lt;/p&gt;
&lt;h2&gt;個別のアプリケーションについて&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; および &lt;a href=&#34;https://gnupg.org/software/libgcrypt/&#34;&gt;Libgcrypt&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;よーやく &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt;/&lt;a href=&#34;https://gnupg.org/software/libgcrypt/&#34;&gt;Libgcrypt&lt;/a&gt; のバージョンが上がったよ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.2.19
libgcrypt 1.8.5
Copyright (C) 2019 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: /home/username/.gnupg
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,
      TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まぁ，現時点での&lt;a href=&#34;https://text.baldanders.info/release/2020/03/gnupg-2_2_20-is-released/&#34; title=&#34;GnuPG 2.2.20 がリリースされた&#34;&gt;最新版は 2.2.20&lt;/a&gt; だけどね。
ちなみに &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2.17 から SHA-1 電子署名の扱いが変わったのでご注意を。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2019/07/gnupg-2_2_17-is-released/&#34;&gt;GnuPG 2.2.17 リリース： 公開鍵サーバ・アクセスに関する過激な変更あり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2019/11/gnupg-2_2_18-is-released/&#34;&gt;GnuPG 2.2.18 リリース： さようなら SHA-1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; および &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;アップグレード直後の &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; および &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; のバージョンは以下のとおりだった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ssh -V
OpenSSH_8.2p1 Ubuntu-4, OpenSSL 1.1.1f  31 Mar 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; は &lt;a href=&#34;https://www.openssh.com/txt/release-8.2&#34;&gt;2020-02-14 にリリースされた最新版&lt;/a&gt;が入っているようだ。
ただ &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; はこの前セキュリティ・アップデートがあったばかりなんだよねぇ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/alert20200423.html&#34;&gt;OpenSSL の脆弱性対策について(CVE-2020-1967) ：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2020/at200018.html&#34;&gt;OpenSSL の脆弱性 (CVE-2020-1967) に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁ，間に合わなかったんだろうけど。
&lt;a href=&#34;https://access.redhat.com/security/cve/CVE-2020-1967&#34;&gt;CVSSv3 のスコアが 7.5&lt;/a&gt; で深刻度が高いので早めの対応をお願いしたい。&lt;/p&gt;
&lt;h3&gt;保留されているパッケージ&lt;/h3&gt;
&lt;p&gt;アップグレード後に &lt;code&gt;libc++1&lt;/code&gt; が保留状態で残っていた。
保留状態のパッケージがある場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt full-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で保留分をまとめてアップグレードするか，個別に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install libc++1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとすればいいようだ。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; が消えとるがな&lt;/h3&gt;
&lt;p&gt;アップグレードしたら何故か &lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; が削除されてた &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;しょうがないので&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install build-essential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;したですよ。
&lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; のコンパイル・リンクも問題なく動くみたいだし，いっかな&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; は 9.3 が導入される。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; も削除される&lt;/h3&gt;
&lt;p&gt;サードパーティ・リポジトリから &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; をインストールしている場合，アップグレード時に APT のリストからリポジトリが外されるだけだが，今回の 20.04 へのアップグレードでは &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; 自体がまるっと削除される。&lt;/p&gt;
&lt;p&gt;ただし設定やパッケージはそのまま残っているので，リポジトリ設定を戻して &lt;code&gt;apt install&lt;/code&gt; し直せばおっけ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flight-manual.atom.io/getting-started/sections/installing-atom/&#34;&gt;Installing Atom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://wiki.gnome.org/Apps/Lollypop?action=show&#34; title=&#34;Apps/Lollypop - GNOME Wiki!&#34;&gt;Lollypop&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;どうやら &lt;a href=&#34;https://wiki.gnome.org/Apps/Lollypop?action=show&#34; title=&#34;Apps/Lollypop - GNOME Wiki!&#34;&gt;Lollypop&lt;/a&gt; は標準の APT リポジトリに入ったらしい。
いつからだ？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apt show lollypop
Package: lollypop
Version: 1.2.35-1
Priority: optional
Section: universe/gnome
Origin: Ubuntu
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ちうわけで，もう &lt;a href=&#34;https://launchpad.net/~gnumdk/+archive/ubuntu/lollypop&#34; title=&#34;Lollypop : Cédric Bellegarde&#34;&gt;PPA リポジトリ&lt;/a&gt;を使わなくともよさそうである，多分。&lt;/p&gt;
&lt;h3&gt;【追記 2020-04-28】 Libsecret のアップデート&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; credential helper である GNOME/libsecret もバージョンが上がっているようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apt show libsecret-1-dev
Package: libsecret-1-dev
Version: 0.20.2-1
Priority: optional
Section: libdevel
Source: libsecret
Origin: Ubuntu
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;GNOME/libsecret は &lt;code&gt;apt upgrade&lt;/code&gt; しただけではダメで，手動でビルドする必要がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ mkdir ~/work
$ cd ~/work
$ cp -r /usr/share/doc/git/contrib/credential/libsecret .
$ cd libsecret
$ make
gcc -g -O2 -Wall  -pthread -I/usr/include/libsecret-1 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-libsecret.o -c git-credential-libsecret.c
gcc -o git-credential-libsecret  git-credential-libsecret.o -lsecret-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで生成した &lt;code&gt;git-credential-libsecret&lt;/code&gt; を &lt;code&gt;$PATH&lt;/code&gt; の通ったディレクトリに放り込んでおけばよい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-git-from-ppa/&#34;&gt;PPA から Git をインストールする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;【2020-05-15 追記】 日本語 Remix のリリースと Bootable USB メモリの作成&lt;/h2&gt;
&lt;p&gt;Japanese Team による &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 20.04 LTS 日本語 Remix がリリースされた。
感謝！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ubuntulinux.jp/News/ubuntu2004-ja-remix&#34;&gt;Ubuntu 20.04 LTS 日本語 Remix リリース | Ubuntu Japanese Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Team による追加パッケージのリポジトリを導入するには以下の手順を実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ wget -q https://www.ubuntulinux.jp/ubuntu-ja-archive-keyring.gpg -O- | sudo apt-key add -
$ wget -q https://www.ubuntulinux.jp/ubuntu-jp-ppa-keyring.gpg -O- | sudo apt-key add -
$ sudo wget https://www.ubuntulinux.jp/sources.list.d/focal.list -O /etc/apt/sources.list.d/ubuntu-ja.list
$ sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また ISO イメージ・ファイルも公開されているのでこれを使って bootable USB メモリを作成しておく。
詳しくは以下の拙文を参考にどうぞ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/bootable-usb/&#34;&gt;Ubuntu インストール用のブート可能 USB メモリを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-23-ubuntu-2004-lts.html&#34;&gt;Ubuntu 20.04 その23 - Ubuntu 20.04 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-24-ubuntu-2004-lts.html&#34;&gt;Ubuntu 20.04 その24 - Ubuntu 20.04 LTSの新機能と変更点 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-25-ubuntu-2004-lts.html&#34;&gt;Ubuntu 20.04 その25 - Ubuntu 20.04 LTSの既知の問題 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-26-ubuntu-20041-ltsubuntu.html&#34;&gt;Ubuntu 20.04 その26 - Ubuntu 20.04.1 LTSのリリーススケジュール・Ubuntu 18.04 LTSユーザーにアップグレードパスの提供 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-27-qt-5142qt-5128.html&#34;&gt;Ubuntu 20.04 その27 - Qt 5.14.2の採用見送りとQt 5.12.8の採用 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-28-ubuntu-desktop.html&#34;&gt;Ubuntu 20.04 その28 - Ubuntu Desktopの新機能と魅力・様々な新機能と改良点の紹介 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-29-linux-kernel-54.html&#34;&gt;Ubuntu 20.04 その29 - Linux kernel 5.4の新機能 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxfan.info/ubuntu-20-04-install-guide&#34;&gt;Ubuntu 20.04 LTSインストールガイド【スクリーンショットつき解説】 | LFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/mmns/items/eaf42dd3345a2285ff9e&#34;&gt;(今はまだ)WSL1にUbuntu 20.04を入れるな - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/05/ubuntu-2004-48-ubuntu-2004-lts-remix.html&#34;&gt;Ubuntu 20.04 その48 - Ubuntu 20.04 LTS 日本語 Remixがリリースされました・ディスクイメージのダウンロード - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/317fsDSqG8L._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;シリコンパワー USBメモリ 32GB USB3.1 / USB3.0 亜鉛合金ボディ 防水 防塵 耐衝撃 永久保証 PS4動作確認済 Jewel J80 SP032GBUF3J80V1TJA&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;シリコンパワー (Release 2017-02-01)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B01NBU1OS5 (ASIN), 4712702655292 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;OS 移行用に購入。ひたすらデザインで決めた（笑） よく考えたら32GBも要らなかった。まぁ，何か使い道があるだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-04-21&#34;&gt;2019-04-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- シリコンパワー USBメモリ 32GB USB3.1 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 18.04 のサポート期間は2023年4月まで。 18.04 サポート満了を以って32bit版 &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; のサポートは終了する。ので，早めに64bitアーキテクチャへのリプレースを検討しませう。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; も APT で導入できるようだが，バージョンが古いので，最新版が必要なら &lt;a href=&#34;https://text.baldanders.info/rust-lang/hello/&#34; title=&#34;みんな大好き Hello World&#34;&gt;APT は使わない&lt;/a&gt;ほうがよい。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>ATOM エディタでリモートのディレクトリ・ファイルを同期する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/12/remote-sync-with-atom/" />
		<id>tag:text.Baldanders.info,2019-12-31:/remark/2019/12/remote-sync-with-atom/</id>
		<published>2019-12-31T10:13:34+00:00</published>
		<updated>2020-06-06T11:40:22+00:00</updated>
		<summary>remote-sync が設定や操作がシンプルなので，これを使うことにした。 </summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;まぁ，独りで作業するなら &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; で管理するほうが安全なのだが，リモートのサーバとちょっとしたファイルのやり取りをするために &lt;a href=&#34;https://filezilla-project.org/&#34; title=&#34;FileZilla - The free FTP solution&#34;&gt;FileZilla&lt;/a&gt; を起動して接続するのは大袈裟でかったるいなぁ思い始め「そういや &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; のパッケージでリモートのファイルを直接編集できるパッケージがなかったっけ？」と探してみた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/remote-ftp&#34;&gt;remote-ftp&lt;/a&gt; を推す記事が多かったので最初はこれを導入してみたが，何故か sftp で接続できんのよ。
しょうがないので他のパッケージを漁ってみたのだが &lt;a href=&#34;https://atom.io/packages/remote-sync&#34;&gt;remote-sync&lt;/a&gt; が設定や操作がシンプルなので，これを使うことにした。
厳密にはリモートのファイルを直接編集するわけではないのだが，まぁいいや。&lt;/p&gt;
&lt;p&gt;まずはローカル側とリモート側で同期するディレクトリを作成する。&lt;/p&gt;
&lt;p&gt;ローカル側で作成したディレクトリをプロジェクトのルートとして &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; を起動し，コマンドパレットから “Remote Sync: Configure” を選択するか Tree View のコンテキストメニューから  “Remote Sync” → “Configure” と選択する。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./remote-sync-context-menu.png&#34;&gt;&lt;img src=&#34;./remote-sync-context-menu.png&#34; srcset=&#34;./remote-sync-context-menu.png 680w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;すると以下の設定画面が表示されるので必要な情報を設定して &lt;code&gt;[Save]&lt;/code&gt; する。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./remote-sync-configure.png&#34;&gt;&lt;img src=&#34;./remote-sync-configure.png&#34; srcset=&#34;./remote-sync-configure.png 530w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;これで準備完了。
“uploadOnSave” にチェックが入っていればセーブするたびにリモートのファイルを更新してくれる。
その他の機能についてはコマンドパレットまたはコンテキストメニューから起動できる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;ちなみに設定内容はロカール側のプロジェクト・ディレクトリ直下の &lt;code&gt;.remote-sync.json&lt;/code&gt; に格納されている。
中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;logger&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Remote Sync&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;uploadOnSave&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;useAtomicWrites&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;deleteLocal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2222&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/home/username/docs/sync&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;ignore&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;.remote-sync.json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;.git/**&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;useAgent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;transport&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;scp&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このファイルさえあれば任意のディレクトリを同期ディレクトリにできるわけだ。&lt;/p&gt;
&lt;p&gt;とりあえず，こんなもんかな。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Diff ツールについては初期状態では何も指定されていないので &lt;a href=&#34;https://atom.io/packages/remote-sync&#34;&gt;remote-sync&lt;/a&gt; の設定で任意のツールを指定する。個人的には KDiff3 がオススメ。 &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; なら apt コマンドで導入できる。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>中古 PC に Ubuntu 環境を導入する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/12/install-ubuntu-to-second-hand-pc/" />
		<id>tag:text.Baldanders.info,2019-12-01:/remark/2019/12/install-ubuntu-to-second-hand-pc/</id>
		<published>2019-11-30T17:22:24+00:00</published>
		<updated>2020-09-24T12:56:57+00:00</updated>
		<summary>ついカッとなってやった。反省はしない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ついカッとなってやった。
反省はしない。&lt;/p&gt;
&lt;p&gt;久しぶりの衝動買いですよ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/49144529442/&#34;&gt;&lt;img src=&#34;./49144529442_3655cab86e_e.jpg&#34; srcset=&#34;./49144529442_3655cab86e_e.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;玩具が来た！ 早速 Ubuntu をぶち込んで遊ぶナリ&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/49144529442/&#34;&gt;玩具が来た！ 早速 Ubuntu をぶち込んで遊ぶナリ&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;一応，理由はあって&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;システムが壊れても日常生活でダメージにならない余剰パソコンが欲しかった&lt;/li&gt;
&lt;li&gt;技術系のイベントに参加するのにそろそろ Andorid タブレットではキツくなってきた&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;といったところ。&lt;/p&gt;
&lt;p&gt;最初の理由に関しては，最初は来年あたりにラズパイのキットでも買って遊ぼうかとも思っていたのだが，一通り揃ってるキットを買うと数千円はするみたいだし，それなら1万円前後の中古 PC でもいいんじゃないかって感じ。&lt;/p&gt;
&lt;p&gt;今回は&lt;a href=&#34;https://www.dospara.co.jp/&#34;&gt;ドスパラ&lt;/a&gt;で中古の DELL Lititude E5540 を購入した。
送料やら消費税やら全部込み込みで13K円ほど。
OS は入っていない。
もっと安いものもあったが，動作保証しないとか怖いことが書いてあったので止めた。
あーゆーのって部品取りするためのものなのかねぇ。&lt;/p&gt;
&lt;p&gt;今回は &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; を導入して &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタ上で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コードをコンパイル&amp;amp;テストできるところまでが目標。
メインの PC に &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 環境が既にあって，そこから設定をコピーする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; のインストール&lt;/h2&gt;
&lt;p&gt;いざというときのために &lt;a href=&#34;https://text.baldanders.info/remark/2019/04/bootable-usb/&#34; title=&#34;Ubuntu インストール用のブート可能 USB メモリを作成する&#34;&gt;USB メモリでブータブル・メディアを作成済み&lt;/a&gt;なので，これを使って &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; をインストールする。&lt;/p&gt;
&lt;p&gt;DELL パソコンの BIOS 画面がなかなか出なくて往生したが，電源投入直後に表示される「DELL」ロゴ画面で F2 キーを連打すればいいらしい。
なんじゃそら（笑）&lt;/p&gt;
&lt;p&gt;BIOS 画面で USB からのブートを最優先にし，改めてブータブル・メディアを指してインストールを開始する&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://www.ubuntulinux.jp/japanese&#34;&gt;日本語 Remix&lt;/a&gt; 版を使えばインストーラも日本語だし悩むところはないのだが，ノート PC なので（紛失・盗難のリスクを考慮して）ストレージの暗号化を忘れないこと。&lt;/p&gt;
&lt;p&gt;私の場合はセットアップに必要なファイルを NAS に置いているので，インストールが完了したら NAS への接続設定をしておく。
前のときは「&lt;a href=&#34;https://text.baldanders.info/remark/2019/03/common-internet-file-system/&#34;&gt;CIFS 経由で NAS に接続&lt;/a&gt;」していたが，今回は（外に持ち出すことも考慮して）ファイルマネージャ Nautilus 上で動的に接続できるよう構成してみた。&lt;/p&gt;
&lt;h2&gt;KeePassXC のインストール&lt;/h2&gt;
&lt;p&gt;パスワード・マネージャ &lt;a href=&#34;https://keepassxc.org/&#34; title=&#34;KeePassXC Password Manager&#34;&gt;KeePassXC&lt;/a&gt; のインストールについては以下を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/08/installing-keepassxc-in-ubuntu/&#34;&gt;Ubuntu に KeePassXC を導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これでようやく無線 LAN に繋げられる。
有線からの解放。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 環境の移行&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 環境の移行および &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; との連携については以下を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/move-gpg-keyring/&#34;&gt;Windows 環境で作った GnuPG の鍵束を Ubuntu に移行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;つっても，今回は &lt;code&gt;~/.gnupg&lt;/code&gt; ディレクトリの中身をまるっとコピればいいだけなんだけど。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; と連携するなら &lt;code&gt;gpg-agent.conf&lt;/code&gt; ファイルで以下のオプションを設定し&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;# for ssh
enable-ssh-support
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;環境変数 &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; の設定も忘れないこと。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;SSH_AUTH_SOCK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;gpgconf --list-dirs agent-ssh-socket&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;基本ツールのインストール&lt;/h2&gt;
&lt;p&gt;APT で基本ツールをインストールしておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install net-tools curl kdiff3 graphviz vim xsel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタで使いたいので &lt;a href=&#34;https://www.levien.com/type/myfonts/inconsolata.html&#34;&gt;Inconsolata&lt;/a&gt; フォントも入れておく。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Inconsolata.otf&lt;/code&gt; ファイルを取ってきて &lt;code&gt;/usr/local/share/fonts&lt;/code&gt; ディレクトリに入れてキャッシュを更新する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ fc-cache -fv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新されたかどうかは以下で確認できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ fc-list | grep Inconsolata
/usr/local/share/fonts/Inconsolata.otf: Inconsolata:style=Medium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; のインストール&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; をインストールする前に &lt;code&gt;~/.config/git/config&lt;/code&gt; ファイルをコピっておく。
既に &lt;code&gt;~/.gitconfig&lt;/code&gt; ファイルがあるなら &lt;code&gt;~/.config/git/config&lt;/code&gt; へ &lt;code&gt;mv&lt;/code&gt; する。&lt;/p&gt;
&lt;p&gt;インストールは以下を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-git-from-ppa/&#34;&gt;PPA から Git をインストールする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラのインストール&lt;/h2&gt;
&lt;p&gt;APT で管理される &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラはバージョンが古すぎるので公式サイトの&lt;a href=&#34;https://golang.org/dl/&#34; title=&#34;Downloads - The Go Programming Language&#34;&gt;ダウンロードページ&lt;/a&gt;から直接バイナリを取ってきて展開する。&lt;/p&gt;
&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.13.4 をインストールしたいなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src
$ sudo curl &amp;#34;https://dl.google.com/go/go1.13.4.linux-amd64.tar.gz&amp;#34; -O
$ cd ..
$ sudo unlink go # 以前の Go が入っている場合
$ sudo tar xvf src/go1.13.4.linux-amd64.tar.gz
$ sudo mv go go1.13.4
$ sudo ln -s go1.13.4 go
$ go version # /usr/local/go/bin にパスが通っている場合
go version go1.13.4 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとする。&lt;/p&gt;
&lt;p&gt;これでようやく &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt;, &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt;, &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラと必要なツールのセットアップが完了した。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタのインストール&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタは公式の APT リポジトリが用意されているので，そちらを利用する。&lt;/p&gt;
&lt;p&gt;まずはリポジトリの登録。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ wget -qO - https://packagecloud.io/AtomEditor/atom/gpgkey | sudo apt-key add -
$ sudo sh -c &amp;#39;echo &amp;#34;deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main&amp;#34; &amp;gt; /etc/apt/sources.list.d/atom.list&amp;#39;
$ sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これであとは&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install atom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば，インストール完了。&lt;/p&gt;
&lt;h3&gt;パッケージをまとめてインストールする&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタのサード・パーティ・パッケージにあらかじめ star (☆) を付けておくことでまとめてインストールすることができる。&lt;/p&gt;
&lt;p&gt;まずはログインから&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm login
Welcome to Atom!

Before you can publish packages, you&amp;#39;ll need an API token.

Visit your account page on Atom.io https://atom.io/account,
copy the token and paste it below when prompted.

Press [Enter] to open your account page on Atom.io.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここで &lt;code&gt;[Enter]&lt;/code&gt; キーを押すと Web ブラウザでアカウントページが開く。
開かない場合は Web ブラウザで直接 &lt;a href=&#34;https://atom.io/account&#34;&gt;https://atom.io/account&lt;/a&gt; を開く。
アカウントページに表示されたアクセス・トークンを入力すればログイン完了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Token&amp;gt; ****************
Saving token to Keychain done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Star を付けたパッケージは以下のコマンドで見れる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm stars
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Star を付けたパッケージをまとめてインストールするなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm stars --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;でOK。&lt;/p&gt;
&lt;h3&gt;設定ファイルの移行&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~/.atom&lt;/code&gt; ディレクトリ直下にある以下のファイルをコピれば簡単に設定を移行できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.cson&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init.coffee&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keymap.cson&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;styles.less&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snipets.cson&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これで完了！&lt;/p&gt;
&lt;h2&gt;その他お好みで&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/mono-in-ubuntu/&#34;&gt;Ubuntu に Mono を導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-texlive-in-ubuntu/&#34;&gt;TeX Live を Ubuntu に（APT を使わずに）導入する&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/upgrade-texlive-from-2018-to-2019/&#34;&gt;TeX Live 2018 から 2019 へのアップグレード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/academic-distributed-computing-projects-by-boinc/&#34;&gt;BOINC による学術分散コンピューティング・プロジェクトでの活動を再開した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/clamav-for-ubuntu/&#34;&gt;Ununtu に ClamAV を導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/installing-libreoffice-in-ubuntu/&#34;&gt;Ubuntu に LibreOffice をインストールする3つの方法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2019/08/upgrade-libreoffice-6_3/&#34;&gt;LibreOffice 6.3 へのアップグレード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/kindle-for-wine/&#34;&gt;Ubuntu でも Kindle 本が読みたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/send-mail-without-mail-service/&#34;&gt;メール・サービスを立てずにコマンドラインでメールを送信する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/cast-vuls/&#34;&gt;そろそろ Vuls を唱えるか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/ripping-cd-music-in-ubuntu/&#34;&gt;Ubuntu で音楽 CD のリッピング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/lollypop-music-player/&#34;&gt;音楽プレイヤー Lollypop を試す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/07/reinstalling-openjdk/&#34;&gt;結局 OpenJDK をインストールし直すことにした&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/11/reinstalling-thunderbird/&#34;&gt;結局 Thunderbird もインストールし直すことにした&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-gnupg-for-windows-2/&#34;&gt;GnuPG for Windows : gpg-agent について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/gnupg-cheat-sheet/&#34;&gt;GnuPG チートシート（鍵作成から失効まで）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/advanced-package-tool/&#34;&gt;Advanced Package Tool に関する覚え書き&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/vuln-list/&#34;&gt;Ubuntu アプリケーションにおけるセキュリティ・アップデート一覧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/317fsDSqG8L._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;シリコンパワー USBメモリ 32GB USB3.1 / USB3.0 亜鉛合金ボディ 防水 防塵 耐衝撃 永久保証 PS4動作確認済 Jewel J80 SP032GBUF3J80V1TJA&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;シリコンパワー (Release 2017-02-01)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B01NBU1OS5 (ASIN), 4712702655292 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;OS 移行用に購入。ひたすらデザインで決めた（笑） よく考えたら32GBも要らなかった。まぁ，何か使い道があるだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-04-21&#34;&gt;2019-04-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- シリコンパワー USBメモリ 32GB USB3.1 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00G9NIL7G?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41uU9SMEAyL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00G9NIL7G?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;エレコム マウス Bluetooth (iOS対応) Sサイズ 小型 3ボタン IRセンサー 省電力 シルバー M-BT12BRSV&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;エレコム (Release 2013-11-09)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B00G9NIL7G (ASIN), 4953103501997 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;まぁ，マウスは消耗品だから（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-12-01&#34;&gt;2019-12-01&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- エレコム マウス Bluetooth --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;BIOS 設定はあとで戻しておくこと。ついでに BIOS を&lt;a href=&#34;https://www.dell.com/community/%E4%B8%80%E8%88%AC-%E3%83%8E%E3%83%BC%E3%83%88%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3/BIOS%E3%81%A7%E8%A8%AD%E5%AE%9A%E3%81%A7%E3%81%8D%E3%82%8B%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/td-p/6225663&#34; title=&#34;BIOSで設定できるパスワードについて - Dell Community&#34;&gt;パスワードロック&lt;/a&gt;しておかないと。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Git GUI フロントエンドをたずねて三千里</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/04/searching-for-git-gui-front-end/" />
		<id>tag:text.Baldanders.info,2019-04-21:/remark/2019/04/searching-for-git-gui-front-end/</id>
		<published>2019-04-21T05:37:37+00:00</published>
		<updated>2020-06-06T11:40:22+00:00</updated>
		<summary>ブランチやタグや履歴を見ながらちょっと込み入った処理をする際はやはり GUI があるといいよねってことで。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;私は &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; の GUI フロントエンドに &lt;a href=&#34;https://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; を使っている。
個人的には FOSS の GUI フロントエンドではこれ以上のものはないと思っているが，残念なことに .NET Framework 上で動く製品なのである。
Windows プラットフォームではこれで何の問題もなかったが，どうにも&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/mono-in-ubuntu/&#34; title=&#34;Ubuntu に Mono を導入する&#34;&gt;（.NET Framework の別実装である） Mono&lt;/a&gt; と相性が悪いようで，メジャーバージョンは上げられないしチョットしたことで落っこちてしまう。&lt;/p&gt;
&lt;p&gt;というわけで Linux/&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; で動作する GUI フロントエンドを探してみることした。
今回の評価ポイントは以下の通り。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コミット履歴をブランチ込みでツリー表示でき，簡単に操作できること&lt;/li&gt;
&lt;li&gt;コミットやタグに対して電子署名を付与でき，かつ署名の検証ができること&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; や &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; を適切に扱えること&lt;/li&gt;
&lt;li&gt;サブモジュールを簡単に扱えること&lt;/li&gt;
&lt;li&gt;できれば FOSS 製品であること&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;VS Code や &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; など最近はテキストエディタや IDE でグラフィカルに &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; を扱える製品も多く &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;pull&lt;/code&gt; といった基本機能を扱うだけなら GUI フロントエンドを別途用意する必要はないのだが，ブランチやタグや履歴を見ながらちょっと込み入った処理をする際はやはり GUI があるといいよねってことで。&lt;/p&gt;
&lt;h2&gt;GUI フロントエンドいろいろ&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;-gui&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; の&lt;a href=&#34;https://git-scm.com/docs/git-gui&#34; title=&#34;Git - git-gui Documentation&#34;&gt;公式フロントエンド&lt;/a&gt;らしい。
APT でインストールできる。&lt;/p&gt;
&lt;p&gt;Look&amp;amp;Feel は微妙だが機能的には悪くない。
ただ，タグへの署名と署名検証ができないっぽいんだよなぁ。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://wiki.gnome.org/Apps/giggle/&#34; title=&#34;Apps/giggle - GNOME Wiki!&#34;&gt;Giggle&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;APT でインストールできる。&lt;/p&gt;
&lt;p&gt;GNOME 用ということで Look&amp;amp;Feel は悪くないが，あまり複雑なことはできないようだ。
残念。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://wiki.gnome.org/Apps/Gitg/&#34; title=&#34;Apps/Gitg - GNOME Wiki!&#34;&gt;Gitg&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;APT でインストールできる。&lt;/p&gt;
&lt;p&gt;これも GNOME 用の製品だが，やっぱり複雑なことはできない感じ。
GNOME 用の製品ってみんなこんな感じなのか？&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://desktop.github.com/&#34; title=&#34;GitHub Desktop | Simple collaboration from your desktop&#34;&gt;GitHub Desktop&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;あまり複雑なことはできなくて残念という意味では &lt;a href=&#34;https://desktop.github.com/&#34; title=&#34;GitHub Desktop | Simple collaboration from your desktop&#34;&gt;GitHub Desktop&lt;/a&gt; もそうか。
元々は Windows および macOS 用だが Linux 向けの fork を公開している方がいるようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shiftkey/desktop&#34;&gt;shiftkey/desktop: Simple collaboration from your desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://desktop.github.com/&#34; title=&#34;GitHub Desktop | Simple collaboration from your desktop&#34;&gt;GitHub Desktop&lt;/a&gt; は GitHub 上の Issue や pull request が使いやすくなるよう設計されている。
なので &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; 機能自体のサポートについてはイマイチな感じである。
「初心者向け」と言われるのも宜なるかなというところであろうか。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://desktop.github.com/&#34; title=&#34;GitHub Desktop | Simple collaboration from your desktop&#34;&gt;GitHub Desktop&lt;/a&gt; の今後には期待している。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.collab.net/products/giteye&#34; title=&#34;Free Git Client - GitEye | CollabNet VersionOne&#34;&gt;GitEye&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;FOSS ではないが「無料」で利用できる。
動作には別途 Java ランタイム（JRE）を用意する必要がある&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;Eclipse を連想させるプロジェクトベースの構成。
でも，これならいっそ Eclipse もしくは &lt;a href=&#34;https://www.jetbrains.com/idea/&#34; title=&#34;IntelliJ IDEA: The Java IDE for Professional Developers by JetBrains&#34;&gt;IntelliJ IDEA&lt;/a&gt; を使ったほうがいいんじゃないのか。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.gitkraken.com/&#34; title=&#34;Git Client - Glo Boards | GitKraken&#34;&gt;GitKraken&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;プロプライエタリ・ライセンスで非商用のみ「無料」で利用できる。
Pro 版であれば4.08USD/月のサブスクリプション制で利用できる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; の GUI フロントエンドといえば大抵これが挙がるくらい有名。
てことは皆これにお金払ってるってことか？&lt;/p&gt;
&lt;p&gt;Look&amp;amp;Feel は好みがあるので言及しないとして，機能自体は悪くないのだが &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の扱いが雑。
なんでパスフレーズを入力させるのに自前の入力窓を使うかな。
独自の Pinentry を使ってるってわけでもないようだし，まさかパスフレーズをメモリ上に保持ってないよね？&lt;/p&gt;
&lt;p&gt;あと，私の環境ではコミットやタグの署名検証ができなかった。
購入すれば見れるのかな？&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.syntevo.com/smartgit/&#34; title=&#34;SmartGit – Git Client for Windows, macOS, Linux&#34;&gt;SmartGit&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;こちらもプロプライエタリ・ライセンスで非商用のみ「無料」で利用できる。
フルサポートで買うとかなり高い。
サブスクリプションを利用するなら5.99USD/月。&lt;/p&gt;
&lt;p&gt;Look&amp;amp;Feel や機能は申し分ないのだが，一点だけ &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; の扱いが駄目すぎる。
あと署名検証ができないぽい？&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.syntevo.com/smartgit/&#34; title=&#34;SmartGit – Git Client for Windows, macOS, Linux&#34;&gt;SmartGit&lt;/a&gt; では内臓の SSH クライアントを使うか &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; を使うか選択できる。
内臓の SSH クライアントを使う場合は自前で秘密鍵を管理しようとするが，どういうロジックで管理しているか不明。
&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; を使う場合は更に駄目で，勝手に &lt;code&gt;ssh-agent&lt;/code&gt; を起動してくれやがるのだ（無効にするオプションが見当たらない）。
ちゃんと &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; 環境変数でソケットを指定してるだろ。
見ろよ！&lt;/p&gt;
&lt;p&gt;私は SSH 鍵の管理を &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; で&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/move-gpg-keyring/&#34; title=&#34;Windows 環境で作った GnuPG の鍵束を Ubuntu に移行する&#34;&gt;行ってる&lt;/a&gt;。
&lt;a href=&#34;https://www.syntevo.com/smartgit/&#34; title=&#34;SmartGit – Git Client for Windows, macOS, Linux&#34;&gt;SmartGit&lt;/a&gt; は &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; をまともに扱えないという理由で却下&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
残念！&lt;/p&gt;
&lt;h2&gt;というわけで&lt;/h2&gt;
&lt;p&gt;どれもイマイチな出来。
それなら曲がりなりにも機能が揃っていて FOSS な &lt;a href=&#34;https://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; のほうがマシだな。
Linux ってホンマに GUI が弱いよな。
文化的なものかも知れないが。&lt;/p&gt;
&lt;p&gt;というわけで，もうしばらくは &lt;a href=&#34;https://gitextensions.github.io/&#34; title=&#34;Git Extensions | Git Extensions is a graphical user interface for Git that allows you to control Git without using the commandline&#34;&gt;Git Extensions&lt;/a&gt; を騙し騙し使うか。&lt;/p&gt;
&lt;h2&gt;【おまけ】 CUI な &lt;a href=&#34;https://jonas.github.io/tig/&#34; title=&#34;Introduction · Tig - Text-mode interface for Git&#34;&gt;Tig&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;GUI ではないがキャラクタベースの &lt;a href=&#34;https://jonas.github.io/tig/&#34; title=&#34;Introduction · Tig - Text-mode interface for Git&#34;&gt;tig&lt;/a&gt; というのがあるらしい。
あちこちページを眺めていると，これを推す記事が結構多い。&lt;/p&gt;
&lt;p&gt;サーバ等のリモートホストに対してキャラクタ端末でリポジトリにアクセスする場合は便利かもしれない。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/downloads/guis&#34;&gt;Git - GUI Clients&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools&#34;&gt;Interfaces, frontends, and tools - Git SCM Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://note.kurodigi.com/linux-gitclient/&#34;&gt;Linuxで使えるGitクライアントを集めてみた&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/solmin719/items/f174aab0fc73ddbc9cdf&#34;&gt;Ubuntu/Linuxで使えるGitのGUIクライアント(無料)まとめ - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/git-commit-with-openpgp-signature/&#34;&gt;Git Commit で OpenPGP 署名を行う&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;JRE のインストールについては&lt;a href=&#34;https://text.baldanders.info/remark/2019/03/using-ubuntu/#jdk&#34;&gt;「Ubuntu で遊ぶ」の OpenJDK インストールの項&lt;/a&gt;を参照のこと。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;そもそも &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; で署名を行うということは &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; とセットで使うということなんだから &lt;code&gt;ssh-agent&lt;/code&gt; なんか使う選択肢はないと思うのだが。鍵管理は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; に任せて &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; や &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; は本来の機能に集中するのが吉である。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Ubuntu 19.04 へのアップグレードを試す</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/04/upgrade-ubuntu-19_04/" />
		<id>tag:text.Baldanders.info,2019-04-20:/remark/2019/04/upgrade-ubuntu-19_04/</id>
		<published>2019-04-20T10:14:30+00:00</published>
		<updated>2020-06-06T11:40:22+00:00</updated>
		<summary>こういうアップグレードとかやると，いかに Windows がシステムとして駄目か分かるよな。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 19.04 がリリースされたようだ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2019/04/ubuntu-1904-15-ubuntu-1904.html&#34;&gt;Ubuntu 19.04 その15 - Ubuntu 19.04がリリースされました・ディスクイメージのダウンロード - kledgeb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;私が検証中の仮想環境&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; でもソフトウェアの更新&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 後に以下のメッセージが出た。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./upgrade-esign.png&#34;&gt;&lt;img src=&#34;./upgrade-sign.png&#34; srcset=&#34;./upgrade-sign.png 645w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;折角なのでアップグレードを試してみるとするか（仕事用のマシンじゃないので LTS バージョンを使う気は更々ない）。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; のアップグレード&lt;/h2&gt;
&lt;p&gt;「アップグレード」ボタンを押すとリリースノートが表示される。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./upgrade-relnote.png&#34;&gt;&lt;img src=&#34;./upgrade-relnote.png&#34; srcset=&#34;./upgrade-relnote.png 600w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;文章中の空白文字が詰められていて「なんじゃこりゃ」な画面だが（何かの署名かと思ったぜ&lt;code&gt;w&lt;/code&gt;），気にせず「アップグレード」ボタンを押す。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./upgrade-prepare.png&#34;&gt;&lt;img src=&#34;./upgrade-prepare.png&#34; srcset=&#34;./upgrade-prepare.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;これでしばらく経過を眺めていると以下のワーニングが出る。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./upgrade-warning1.png&#34;&gt;&lt;img src=&#34;./upgrade-warning1.png&#34; srcset=&#34;./upgrade-warning1.png 1533w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;どうも &lt;a href=&#34;http://www.ubuntulinux.jp/&#34;&gt;Ubuntu Japanese Team&lt;/a&gt; や他のサードパーティのリポジトリは外されてしまうらしい。
まぁ，これはしょうがない。
&lt;a href=&#34;#srclist&#34;&gt;あとで繋げばいいし&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;処理を続けると確認画面が表示されるので追加・変更・削除されるソフトウェアを確認しておく。
どうやら &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt;, &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;, &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; といったセキュリティ関連のツールもアップグレードされるようだ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./upgrade-confirm2.png&#34;&gt;&lt;img src=&#34;./upgrade-confirm2.png&#34; srcset=&#34;./upgrade-confirm2.png 1026w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./upgrade-confirm3.png&#34;&gt;&lt;img src=&#34;./upgrade-confirm3.png&#34; srcset=&#34;./upgrade-confirm3.png 1026w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;確認して問題ないようなら「アップグレードを開始」ボタンを押して処理を続行する。
アップグレードは時間がかかるのでお茶でも淹れてこよう。&lt;/p&gt;
&lt;p&gt;途中でワーニングが出たりもしたが&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./upgrade-warning2.png&#34;&gt;&lt;img src=&#34;./upgrade-warning2.png&#34; srcset=&#34;./upgrade-warning2.png 1190w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;気にせず最後まで終わらせる。
終わったら（再起動しろとは言われなかったが）一応再起動しておく。&lt;/p&gt;
&lt;p&gt;再起動後，気になっていたセキュリティ・ツールのバージョンをチェックしてみた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.2.12
libgcrypt 1.8.4
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: /home/username/.gnupg
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,
      TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2

$ openssl version
OpenSSL 1.1.1b  26 Feb 2019

$ ssh -V
OpenSSH_7.9p1 Ubuntu-10, OpenSSL 1.1.1b  26 Feb 2019
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;おおっ。
&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; はまだちょっと古いが &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; と &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; は最新になっている。
まぁこのくらいなら許容範囲だろう&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id=&#34;srclist&#34;&gt;サードパーティのリポジトリを再び有効にする&lt;/h2&gt;
&lt;p&gt;アップグレード時に外されたサードパーティのリポジトリをチェックしておく。
「ソフトウェアとアップデート」を開いて「他のソフトウェア」タブを見てみる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./upgrade-srclist.png&#34;&gt;&lt;img src=&#34;./upgrade-srclist.png&#34; srcset=&#34;./upgrade-srclist.png 972w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;うん，外れてるね。
&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; と &lt;a href=&#34;https://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; のリポジトリは有効にしておく。
&lt;a href=&#34;http://www.ubuntulinux.jp/&#34;&gt;Ubuntu Japanese Team&lt;/a&gt; のリポジトリも有効にしておけばいいかな。&lt;/p&gt;
&lt;p&gt;これで &lt;code&gt;apt update&lt;/code&gt; と，必要に応じて &lt;code&gt;apt upgrade&lt;/code&gt; や &lt;code&gt;apt autoremove&lt;/code&gt; を行えば OK。&lt;/p&gt;
&lt;h2&gt;しかし，なんだな。&lt;/h2&gt;
&lt;p&gt;こういうアップグレードとかやると，いかに Windows がシステムとして駄目か分かるよな。
パソコンでもスマホのような携帯端末でも定期的にアップデートされることを前提にハードウェアもソフトウェアも構成しないと駄目だということだよねぇ。&lt;/p&gt;
&lt;p&gt;いまや Office ツールは Microsoft の独占というほどでもないし，大抵のことは Web インタフェースがあるのでブラウザがあればなんとかなる。
と考えるとやはり Windows を捨てる選択は正解だなと改めて思う。
他人に薦められるかと言えば，それは別問題だが（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2019/04/ubuntu-1810-172-ubuntu-1904.html&#34;&gt;Ubuntu 18.10 その172 - Ubuntu 19.04へアップグレードするには・アップグレードの注意事項 - kledgeb&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ubuntulinux.jp/News/ubuntu1904-ja-remix&#34;&gt;Ubuntu 19.04 日本語 Remix リリース | Ubuntu Japanese Team&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxfan.info/ubuntu-19-04-basic-settings&#34;&gt;Ubuntu 19.04のインストール直後にやっておきたいことまとめ | LFI&lt;/a&gt; : 「言語サポートの設定」はやっておいたほうがいいかも&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-git-from-ppa/&#34;&gt;PPA から Git をインストールする&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/mono-in-ubuntu/&#34;&gt;Ubuntu に Mono を導入する&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;既に &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 19.10 の話題が&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2019/04/ubuntu-1910-2-libreofficesnap.html&#34;&gt;Ubuntu 19.10 その2 - LibreOfficeをSnapで提供する提案 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2019/04/ubuntu-1910-3-geary.html&#34;&gt;Ubuntu 19.10 その3 - デフォルトのメールクライアントをGearyに変更する提案 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;余談だが &lt;a href=&#34;https://www.virtualbox.org/&#34; title=&#34;Oracle VM VirtualBox&#34;&gt;VirtualBox&lt;/a&gt; でも 6.0.6 がリリースされている。アップデートは計画的に。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; では「ソフトウェアの更新」で GUI によるソフトウェアのアップデートが可能である。また「ソフトウェアとアップデート」を使って更新の自動化や LivePatch の設定も可能だ。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;あとで確認したが，ちゃんと最新版が入ってるっぽい。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; は 1.1.1 系の最新， &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; は 7.9 系の最新になっていた。 Facebook の TL で教えてもらったが， &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; はパッケージマネージャでパッケージの完全性検証に使われるため特に保守的な管理になっているらしい。まぁ脆弱性や不具合等は随時バックポートされているそうなので，バージョン番号であまり神経質にならないほうがいいのかも知れない。ただ &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の動向を追いかけている身としては何とか改善したい。でもそれは後々のお楽しみということで。 &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>PPA から Git をインストールする</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/04/install-git-from-ppa/" />
		<id>tag:text.Baldanders.info,2019-04-08:/remark/2019/04/install-git-from-ppa/</id>
		<published>2019-04-07T15:12:49+00:00</published>
		<updated>2020-06-06T11:40:22+00:00</updated>
		<summary>Git に関しては PPA (Personal Package Archive) で最新版のビルドを提供されている方がいるらしい。ありがたや。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/move-gpg-keyring/&#34; title=&#34;Windows 環境で作った GnuPG の鍵束を Ubuntu に移行する&#34;&gt;前回&lt;/a&gt;で &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; と &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を連携させたのでようやく &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; で遊べるようになった。&lt;/p&gt;
&lt;p&gt;しかし，実際にコマンドを叩いてみたら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git version

Command &amp;#39;git&amp;#39; not found, but can be installed with:

sudo apt install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;またかよ。
嫌な予感しかしない。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt show git
Package: git
Version: 1:2.19.1-1ubuntu1.1
Priority: optional
Section: vcs
Origin: Ubuntu
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;やっぱり。
2.21.0 が出たのってだいぶ前だよな。&lt;/p&gt;
&lt;p&gt;いろいろ調べてみたら &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; に関しては &lt;a href=&#34;https://launchpad.net/ubuntu/+ppas&#34;&gt;PPA (Personal Package Archive)&lt;/a&gt; で最新版のビルドを提供されている方がいるらしい。
ありがたや。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://launchpad.net/~git-core/+archive/ubuntu/ppa&#34;&gt;Git stable releases : “Ubuntu Git Maintainers” team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;何故か &lt;code&gt;add-apt-repository&lt;/code&gt; は既に入ってるぽかったので，まずはリポジトリを導入しよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo add-apt-repository ppa:git-core/ppa
 The most current stable version of Git for Ubuntu.

For release candidates, go to https://launchpad.net/~git-core/+archive/candidate .
 詳しい情報: https://launchpad.net/~git-core/+archive/ubuntu/ppa
[ENTER] を押すと続行します。Ctrl-c で追加をキャンセルできます。

ヒット:1 http://jp.archive.ubuntu.com/ubuntu cosmic InRelease
取得:2 http://jp.archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB]
ヒット:3 http://archive.ubuntulinux.jp/ubuntu cosmic InRelease
取得:4 http://jp.archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB]
ヒット:5 http://archive.ubuntulinux.jp/ubuntu-ja-non-free cosmic InRelease
取得:6 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB]
取得:7 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic InRelease [20.7 kB]
取得:8 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic/main i386 Packages [3,032 B]
取得:9 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic/main amd64 Packages [3,032 B]
取得:10 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic/main Translation-en [2,248 B]
281 kB を 3秒 で取得しました (81.9 kB/s)
パッケージリストを読み込んでいます... 完了

$ sudo apt update
ヒット:1 http://archive.ubuntulinux.jp/ubuntu cosmic InRelease
ヒット:2 http://jp.archive.ubuntu.com/ubuntu cosmic InRelease
ヒット:3 http://archive.ubuntulinux.jp/ubuntu-ja-non-free cosmic InRelease
取得:4 http://jp.archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB]
取得:5 http://jp.archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB]
取得:6 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB]
ヒット:7 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic InRelease
252 kB を 2秒 で取得しました (155 kB/s)
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています
状態情報を読み取っています... 完了
パッケージはすべて最新です。

$ sudo apt upgrade
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています
状態情報を読み取っています... 完了
アップグレードパッケージを検出しています... 完了
アップグレード: 0 個、新規インストール: 0 個、削除: 0 個、保留: 0 個。

$ sudo apt show git
Package: git
Version: 1:2.21.0-0ppa1~ubuntu18.10.1
Priority: optional
Section: vcs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よし。
最新版が入ってるな。
インストールっと。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでインストール完了。
動作確認してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git version
git version 2.21.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よしよし。
おっと，初期設定しないと。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git config --global user.name &amp;#34;Alice&amp;#34;
$ git config --global user.email &amp;#34;alice@example.com&amp;#34;
$ git config --global user.signingkey 697CDD8A
$ git config --global commit.gpgsign true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;SSH 経由で git clone する&lt;/h2&gt;
&lt;p&gt;まずは適当なリポジトリを SSH 経由で git clone してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git clone git@github.com:spiegel-im-spiegel/gocli.git github.com/spiegel-im-spiegel/gocli
Cloning into &amp;#39;github.com/spiegel-im-spiegel/gocli&amp;#39;...
The authenticity of host &amp;#39;github.com (192.30.255.112)&amp;#39; can&amp;#39;t be established.
RSA key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &amp;#39;github.com,192.30.255.112&amp;#39; (RSA) to the list of known hosts.
remote: Enumerating objects: 71, done.
remote: Counting objects: 100% (71/71), done.
remote: Compressing objects: 100% (52/52), done.
remote: Total 246 (delta 31), reused 53 (delta 16), pack-reused 175
Receiving objects: 100% (246/246), 53.99 KiB | 431.00 KiB/s, done.
Resolving deltas: 100% (107/107), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/move-gpg-keyring/&#34; title=&#34;Windows 環境で作った GnuPG の鍵束を Ubuntu に移行する&#34;&gt;前回&lt;/a&gt;で &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; と &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を連携させたので認証時に Pinentry が起動する。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;../move-gpg-keyring/ssh-login.png&#34;&gt;&lt;img src=&#34;../move-gpg-keyring/ssh-login.png&#34; srcset=&#34;../move-gpg-keyring/ssh-login.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h2&gt;git-credential による認証管理&lt;/h2&gt;
&lt;p&gt;SSH 経由でリポジトリにアクセスする場合はこれでいいのだが HTTPS 経由でアクセスする場合はアクセスするたびに毎回パスワードを訊かれるため鬱陶しい。
この場合は git-credential による認証管理を行うのがいいようだ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; では gnome-keyring を使った認証管理が使える。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shugo/git-credential-gnomekeyring&#34;&gt;shugo/git-credential-gnomekeyring: A git credential helper for GNOME keyring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これによると&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;There is a git package that includes all of contrib sources in /usr/share/doc/git/contrib/. Users who want to use git-credential-gnomekeyring should copy source from /usr/share/doc/git/contrib/credential/gnome-keyring to their working directory, then users can make and install it.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://github.com/shugo/git-credential-gnomekeyring&#34;&gt;shugo/git-credential-gnomekeyring&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ということらしい。
さっそくやってみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cp -r /usr/share/doc/git/contrib/credential/gnome-keyring ~/work
$ cd ~/work/gnome-keyring
$ make
gcc -c -g -O2 -Wall -o git-credential-gnome-keyring.o git-credential-gnome-keyring.c
git-credential-gnome-keyring.c:28:10: fatal error: glib.h: そのようなファイルやディレクトリはありません
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まじすか。
まぁ，入れればいいか。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install libglib2.0-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;では再開。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ make
gcc -c -g -O2 -Wall -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-gnome-keyring.o git-credential-gnome-keyring.c
git-credential-gnome-keyring.c:29:10: fatal error: gnome-keyring.h: そのようなファイルやディレクトリはありません
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ええい。
これも入れればいいのね。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install libgnome-keyring-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ make
gcc -g -O2 -Wall  -I/usr/include/gnome-keyring-1 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-gnome-keyring.o -c git-credential-gnome-keyring.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ワーニングいっぱい出たけどようやく通ったよ。
これで作成された &lt;code&gt;git-credential-gnome-keyring&lt;/code&gt; をパスの通ったディレクトリに入れれば完了。
&lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; 側が認識しているか確認してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git help -a | grep credential-
   credential-cache     Helper to temporarily store passwords in memory
   credential-store     Helper to store credentials on disk
   credential-gnome-keyring
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よしよし。
認識しているな。&lt;/p&gt;
&lt;p&gt;これで &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; 設定に以下を加えれば完了となる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git config --global credential.helper gnome-keyring
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;適当なリポジトリで確かめてみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git clone https://github.com/spiegel-im-spiegel/private-repos.git aaa
Cloning into &amp;#39;aaa&amp;#39;...
Username for &amp;#39;https://github.com&amp;#39;: alice@example.com
Password for &amp;#39;https://alice@example.com@github.com&amp;#39;: 
remote: Enumerating objects: 51, done.
remote: Counting objects: 100% (51/51), done.
remote: Compressing objects: 100% (41/41), done.
remote: Total 51 (delta 8), reused 47 (delta 8), pack-reused 0
Unpacking objects: 100% (51/51), done.

$ git clone https://github.com/spiegel-im-spiegel/private-repos.git bbb
Cloning into &amp;#39;bbb&amp;#39;...
remote: Enumerating objects: 51, done.
remote: Counting objects: 100% (51/51), done.
remote: Compressing objects: 100% (41/41), done.
remote: Total 51 (delta 8), reused 47 (delta 8), pack-reused 0
Unpacking objects: 100% (51/51), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よし。
2回目からは訊いてこないな。&lt;/p&gt;
&lt;p&gt;ちなみにこのときのパスワードは Web ページにサインインするときのパスワードじゃなくて，設定画面で振り出した personal access token を使うのでご注意を（つか，私がすっかり忘れててハマったのだが&lt;code&gt;w&lt;/code&gt;）。&lt;/p&gt;
&lt;h3&gt;【追記】 Libsecret を使う&lt;/h3&gt;
&lt;p&gt;gnome-keyring の代わりに libsecret を使う方法もあるようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hawksnowlog.blogspot.com/2018/10/try-git-credential.html&#34;&gt;hawksnowlog: git credential を使おう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/GNOME/Keyring&#34;&gt;GNOME/Keyring - ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt show libsecret-1-dev
Package: libsecret-1-dev
Version: 0.18.8-1
Priority: optional
Section: libdevel
Source: libsecret
Origin: Ubuntu
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;既定では入ってないっぽいのでインストールする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install libsecret-1-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以降は nome-keyring のときと同じ&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cp -r /usr/share/doc/git/contrib/credential/libsecret ~/work
$ cd ~/work/libsecret
$ make
gcc -g -O2 -Wall  -pthread -I/usr/include/libsecret-1 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/uuid -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-libsecret.o -c git-credential-libsecret.c
gcc -o git-credential-libsecret  git-credential-libsecret.o -lsecret-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;おおっ。
ワーニングが出ない。
こっちのほうがいいかな。&lt;/p&gt;
&lt;p&gt;ビルドした git-credential-libsecret をパスの通ったディレクトリに入れれば完了。
&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; 側が認識しているか確認してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git help -a | grep credential-
   credential-cache     Helper to temporarily store passwords in memory
   credential-store     Helper to store credentials on disk
   credential-libsecret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あとは &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; の設定に組み込めば終了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git config --global credential.helper libsecret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://allabout.co.jp/gm/gc/438675/&#34;&gt;UbuntuのPPAて何？ [Linuxの使い方] All About&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://spangled-shalalala.hatenablog.com/entry/2017/09/05/060106&#34;&gt;ubuntuのapt-getで最新版のgitをインストールする方法 - spangled shalalala blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/ja/v1/%E4%BD%BF%E3%81%84%E5%A7%8B%E3%82%81%E3%82%8B-Git%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB&#34;&gt;Git - Gitのインストール&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/git-commit-with-openpgp-signature/&#34;&gt;Git Commit で OpenPGP 署名を行う&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
</feed>
