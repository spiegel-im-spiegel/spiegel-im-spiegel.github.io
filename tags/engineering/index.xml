<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of Engineering - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/engineering/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/engineering/index.xml" />
	<id>tag:text.Baldanders.info,2024-05-18:/tags</id>
	<updated>2024-05-18T20:19:34+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>『効率的な Go』読書会 2回目</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2024/05/efficient-go-2/" />
		<id>tag:text.Baldanders.info,2024-05-18:/remark/2024/05/efficient-go-2/</id>
		<published>2024-05-18T11:19:34+00:00</published>
		<updated>2024-05-19T07:59:02+00:00</updated>
		<summary>第2章だけ立ち読みするってのも手かも知れない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今日は読書会の日。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yokohama-go-reading.connpass.com/event/317024/&#34;&gt;第59回横浜Go読書会（オンライン） - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というわけで，&lt;a href=&#34;https://text.baldanders.info/remark/2024/04/efficient-go-1/&#34;&gt;前回&lt;/a&gt;に引き続き『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;効率的なGo ―データ指向によるGoアプリケーションの性能最適化 | Bartłomiej Płotka, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;効率的な Go&lt;/a&gt;』の話を。
今回は第2章の真ん中辺りまで読んだので「第2章 効率的な Go 入門」の感想を書いてみる。&lt;/p&gt;
&lt;p&gt;これから &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; について調べたい。
あるいは「&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; ってどがぁな言語？」って方がいたらこの第2章だけ立ち読みするってのも手かも知れない。
&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; を礼賛するフレーズが多いが，苦手とする部分もきっちり言及してるし参考にはなると思う。
例示されているコードは少なめ且つ簡単なので「&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; なにもわからない」って方も取り敢えず大丈夫。&lt;/p&gt;
&lt;p&gt;以下，個人的に面白いと思ったフレーズを抜き出しててみよう。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;指針となった原則は、安全性と繰り返しの少なさを引き換えにせず、よりシンプルなコードを可能にする言語を作ることでした。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.41&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;GoogleはいまだにGoを管理する唯一の企業であり、Goに対する最後の決定的な支配権を持っています。たとえ誰もが修正、使用、貢献できるとしても、単一のベンダーによって調整されたプロジェクトは、再ライセンスや特定の機能のブロックなど、身勝手で有害な決定を下す危険性があります&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.41&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;「gofmt のスタイルは誰の好みでもないが、gofmt はみんなの好みである（ Gofmt&amp;rsquo;s style is no one&amp;rsquo;s favorite, yet gofmt is everyone&amp;rsquo;s favorite. ）」&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.42&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;標準ライブラリの設計を通じて、依存関係を制御することに多大な努力が払われました。1つの機能のために大きなライブラリを引っ張ってくるよりも、少しのコードをコピーするほうが良い場合があります（システムビルドのテストでは、新しいコアの依存関係が発生すると文句を言われます）。依存関係の衛生管理は、コードの再利用に優先します。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.47&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;繰り返しになりますが、効率を考慮すると、依存関係と透明性における潜在的なミニマリズムは、非常に大きな価値をもたらします。未知なものが少ないということは、主要なボトルネックをすばやく検出し、もっとも重要な価値のある最適化にまず注力できることを意味します。私たちは、依存関係に最適化の余地があることに気づいても、それを回避する必要はないのです。そのかわり、私たちは通常、その修正を直接アップストリームに貢献することが歓迎されます。これは両者にとって有益なことです！&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.48&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Goは、エラーを第一級市民の言語機能として扱うことで、独自の道を歩んでいます。信頼できるソフトウェアを書きたいと仮定して、エラー処理を明示的に、簡単に、そしてライブラリやインターフェイスにわたって統一的に行うのです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.50&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;もうひとつよくある不満は、Goを書くと非常に「悲観的」になるということです。なぜなら、決して起こらないかもしれないエラーが、目に見える形で現れるからです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.53&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;以下は読書会では未読だけど面白かったので。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;
&lt;p&gt;1960 年、米国と欧州のプログラミング言語専門家が手を組み、Algol60 が誕生しました。1970 年、Algol のツリーはCとPascal の2 つのブランチに分かれました。約 40 年後、この2 つの枝はGoで再び合流しました。&lt;/p&gt;
&lt;p class=&#34;right&#34; lang=&#34;en&#34;&gt;Robert Griesemer, &lt;q&gt;The Evolution of Go&lt;/q&gt; （https://oreil.ly/a4V1e）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.71&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;効率という点では、Go にはアキレス腱があります。「5.5 Goのメモリ管理」で学ぶように、メモリ使用量はときに制御しにくいことがあります。プログラム中の割り当ては（特に新しいユーザーにとっては）驚くようなもので、ガベージコレクションの自動メモリ解放処理にはオーバーヘッドや偶発的な動作があります。特にデータ指向（data-intensive）のアプリケーションでは、メモリやCPU の効率を確保するために、メモリ容量が厳しく制限されているマシン（IoT など）と同様に努力が必要です。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.71&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と，まぁ，こんな感じかな。
多少は雰囲気が伝わるだろうか。&lt;/p&gt;
&lt;p&gt;そういえば &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 処理系のバリエーションとして &lt;a href=&#34;https://tinygo.org/&#34;&gt;TinyGo&lt;/a&gt; は知ってたけど &lt;a href=&#34;https://gobot.io/&#34; title=&#34;Gobot - Golang framework for robotics, drones, and the Internet of Things (IoT)&#34;&gt;GoBot&lt;/a&gt; は知らんかった。
いや Mastodon の TL で見かけたかな。
いわゆる IoT で &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 処理系を考えているならこの辺も視野に入れたほうがいいだろう。&lt;/p&gt;
&lt;p&gt;今回はここまで。
次回も感想を書くかどうかは分からない。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/_kazuya/articles/0045ef8057c0b5&#34;&gt;Golang(Gobot+Firmata+Arduino)でアナログメーターを作ってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41&amp;#43;ew2wl2jL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;効率的なGo ―データ指向によるGoアプリケーションの性能最適化&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Bartłomiej Płotka (著), 山口 能迪 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリー・ジャパン 2024-02-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4814400535 (ASIN), 9784814400539 (EAN), 4814400535 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784814400539/&#34;&gt;版元&lt;/a&gt;で Ebook を買える。Go言語のリファレンス本ではない。フトウェア工学，プログラミング（の考え方）を学ぶ教科書的な位置づけかなぁ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2024-04-21&#34;&gt;2024-04-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 効率的なGo : Efficient Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4863544006?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413DpucT1ML._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4863544006?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;基礎から学ぶ TinyGoの組込み開発&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;高砂正哲 (著)&lt;/dd&gt;
    &lt;dd&gt;C&amp;amp;R研究所 2022-11-12&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4863544006 (ASIN), 9784863544000 (EAN), 4863544006 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://book.mynavi.jp/manatee/c-r/books/detail/id=134168&#34;&gt;本の森.jp で PDF 版&lt;/a&gt;を購入。ハンズオン的な内容らしい。実は Wio Terminal を買ったまま放置プレイ中なので，楽しみにしている。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-11-12&#34;&gt;2022-11-12&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 基礎から学ぶ TinyGo の組込み開発 --&gt;
</content>
	</entry><entry>
		<title>性能とはなにか【『効率的な Go』読書会 初回】</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2024/04/efficient-go-1/" />
		<id>tag:text.Baldanders.info,2024-04-21:/remark/2024/04/efficient-go-1/</id>
		<published>2024-04-21T04:18:52+00:00</published>
		<updated>2024-05-18T11:19:50+00:00</updated>
		<summary>『効率的な Go』読書会が始まった</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;冬の間忙しくてできなかった読書会への参加を再開することにした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yokohama-go-reading.connpass.com/event/313675/&#34;&gt;第58回横浜Go読書会（オンライン）- Part 2 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「横浜Go読書会」とあって田舎暮らしの私としては躊躇するところではあったが主催の柴田芳樹さんより「&lt;a href=&#34;https://twitter.com/yoshiki_shibata/status/1760774448217723104&#34;&gt;全国から参加可能&lt;/a&gt;」と言っていただけたので参加することに決めた。&lt;/p&gt;
&lt;p&gt;題材となる書籍はこれ。&lt;/p&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41&amp;#43;ew2wl2jL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;効率的なGo ―データ指向によるGoアプリケーションの性能最適化&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Bartłomiej Płotka (著), 山口 能迪 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリー・ジャパン 2024-02-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4814400535 (ASIN), 9784814400539 (EAN), 4814400535 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784814400539/&#34;&gt;版元&lt;/a&gt;で Ebook を買える。Go言語のリファレンス本ではない。フトウェア工学，プログラミング（の考え方）を学ぶ教科書的な位置づけかなぁ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2024-04-21&#34;&gt;2024-04-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 効率的なGo : Efficient Go --&gt;
&lt;p&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784814400539/&#34; title=&#34;O&#39;Reilly Japan - 効率的なGo&#34;&gt;版元が O&amp;rsquo;Reilly Japan&lt;/a&gt; ということで PDF で購入した。&lt;/p&gt;
&lt;p&gt;タイトルを見たとき「ついに Effective Go を冠する本が出たのか」と思ったが&lt;a href=&#34;https://ymotongpoo.hatenablog.com/entry/efficient-go&#34; title=&#34;『効率的なGo』という本が出版されました #efficient_go - YAMAGUCHI::weblog&#34;&gt;翻訳者の方&lt;/a&gt;に「&lt;a href=&#34;https://bsky.app/profile/ymotongpoo.com/post/3knziwolx2c27&#34;&gt;&amp;ldquo;Efficient Go&amp;rdquo; だよ&lt;/a&gt;」と指摘していただいた恥ずかしい過去は内緒である。&lt;/p&gt;
&lt;p&gt;普通は本を買ったら最低でも流し読みくらいをしておくものだけど，これを買った2月頃はホンマに忙しくてねぇ。
目次くらいしか眺めてなかった。
まぁ読書会で読むし，と後回しにしてたら結局初見で読書会に望むことになってしまった。
反省。&lt;/p&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;効率的なGo ―データ指向によるGoアプリケーションの性能最適化 | Bartłomiej Płotka, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;効率的な Go&lt;/a&gt;』は11章で構成されていて500ページちょっとというボリューム。
読書会では読み終わるまで1年くらいかかるかなぁという見通しだった。
1回目の今回は都合で時間短めだったこともあり，序文と1章の途中まで。&lt;/p&gt;
&lt;p&gt;読み始めた最初の感想は「講釈が長い！」だった。
&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; のコードは殆ど出てこないし。&lt;/p&gt;
&lt;p&gt;読書会のあとで後ろの章をさっくり眺めてみたが，コードは少なめで地の文章が多い。
なので，よくあるリファレンス本と思って読むと面食らうかもしれない。
どっちかというとソフトウェア工学，プログラミング（の考え方）を学ぶ教科書的な位置づけかなぁ。
その教材としてのプログラミング言語として &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; が選ばれているという感じ。
実際に序文でも&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;最適化の考え方やオブザーバビリティパターンを示すためにGoを例題言語として使っていますが、本書の11 章のうち8章は言語に中立的に書かれています。Java、C#、Scala、Python、C++、Rust、Haskellなど、他の言語で書かれたソフトウェアを改善するために、同じテクニックを使えます。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』序文&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と書かれている。
なので，この本の内容を &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 以外の言語で応用するにはどうすればいいか考えながら読むのも面白いかもしれない。&lt;/p&gt;
&lt;p&gt;そういえば「訳者まえがき」には&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;私が直近で翻訳に携わった『オブザーバビリティ・エンジニアリング』（2023、オライリー・ジャパン、ISBN9784814400126）、『SLO サービスレベル目標』（2023、オライリー・ジャパン、ISBN9784814400348）の2冊に続いて、本書が加わることで、システムの性能改善というテーマにおいてマクロからミクロまで、全体の理解を深められる書籍が揃ったからです。したがって先の2冊を併せて読むことで、広い視点を保ったまま、プログラムの性能改善に取り組む意味が見えてくると思います。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』訳者まえがき&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と書かれている。
この辺も読んでおくといいかも。&lt;/p&gt;
&lt;p&gt;では，1章の前半で刺さったフレーズをつまみ食いしてみよう。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;よく言われるように、「完璧は善の敵（Perfect is the enemy of good、https://oreil.ly/OogZF）」ですが、まずはそのバランスの取れた善を見つけなければなりません。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.3&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これは個人的に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4344980158?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;理学は、真理の探究であり、工学は善の実現である。そして、藝術は美の表現である－－これで所謂「真美善」が揃う&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4344980158?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;はやぶさ―不死身の探査機と宇宙研の物語&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;を座右の銘のひとつとしている私としては気になるフレーズである。
ちなみに &lt;a href=&#34;https://oreil.ly/OogZF&#34;&gt;&lt;code&gt;https://oreil.ly/OogZF&lt;/code&gt;&lt;/a&gt; は Wikipedia へのリンクになっていて，そのバリエーションとして&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://en.wikipedia.org/wiki/Perfect_is_the_enemy_of_good&#34;&gt;&amp;ldquo;If you never miss a plane, you&amp;rsquo;re spending too much time at the airport&amp;rdquo;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Perfect_is_the_enemy_of_good&#34;&gt;Perfect is the enemy of good - Wikipedia&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;というフレーズがあって笑ってしまった。他に Donald Knuth 博士の&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://en.wikipedia.org/wiki/Perfect_is_the_enemy_of_good&#34;&gt;&amp;ldquo;Premature optimization is the root of all evil&amp;rdquo;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Perfect_is_the_enemy_of_good&#34;&gt;Perfect is the enemy of good - Wikipedia&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;も紹介されていたが，これは『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;効率的なGo ―データ指向によるGoアプリケーションの性能最適化 | Bartłomiej Płotka, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;効率的な Go&lt;/a&gt;』でも言及されている。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;しかし、この名言はずいぶん前になされたものです。過去から一般的なプログラミングについて多くを学ぶことができる一方で、1974年から大幅に改善されたことも多くあります。たとえば、当時はリスト1-5に紹介されているように、変数名に変数の型に関する情報を追加することが一般的でした。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.13&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;「リスト1-5」ってのがこれ&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34; cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;structSystem&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;sliceU32Numbers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;bCharacter&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;f64Ratio&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;float64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.14&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;いわゆるハンガリアン記法ってやつですな。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;当時はコンパイラーや統合開発環境（IDE）があまり成熟していなかったので、ハンガリアン記法が便利でした。しかし現在では、IDEやGitHubのようなリポジトリサイトでも、変数にカーソルを合わせるとすぐにその型を認識できるようになりました。数ミリ秒で変数の定義にたどり着き、解説を読み、すべての呼び出しと変更を見つけられます。賢いコードの提案、高度なハイライト、1990 年代半ばに開発されたオブジェクト指向プログラミングの優位性により、実用的な可読性に大きな影響を与えることなく、機能や効率の最適化（複雑化）を追加できるツールを手に入れました。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.14&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;最近では、IDEの機能に対応しやすいようにコードを書くことが推奨されていることは、特筆に値するでしょう。たとえば、コード構造は「連結」グラフ（https://oreil.ly/mFzH9）であるべきです。これは、IDE が支援できる方法で関数を接続することを意味します。動的ディスパッチ、コードインジェクション、遅延読み込みは、これらの機能を無効にするので、厳密に必要でない限り避けるべきです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.14 脚注&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;こういった感じにツールの助け等によってコードに対する認知負荷が変わってきているため「性能の最適化」も昔とは変わってきている，ということらしい。&lt;/p&gt;
&lt;p&gt;じゃあ，そもそも「性能（performance）」って何？ って話になる。
この辺の話が今回読んだ中で一番面白かった。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;私の経験では、多くの人がソフトウェア開発において性能（パフォーマンス）という言葉を速度（スピード）の代名詞と考えています。他の人々にとっては、この言葉の本来の定義である実行の全体的な質を意味します 。この現象は「意味拡散（semantic diffusion、https://oreil.ly/Qx9Ft）」と呼ばれることもあり、ある言葉がより大きな集団によって、本来持っていた意味と異なる意味で使われ始めるときに起こります。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.4&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;p&gt;結論から言うと、性能とは少なくともこの3つの要素の組み合わせです。&lt;/p&gt;
\[ 性能 = ( 精度 \times 効率 \times 速度 ) \]&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.6&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ここで性能は単にソフトウェアの機能を指すものではないというのが重要なポイント&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
日々要件が変わるソフトウェア開発においては如何にして変化をプロセスに組み込み小刻みにイテレーションを回していくかが重要になる。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;たとえば、RockstarGamesが人気ゲーム「グランド・セフト・オートV」を開発するのに5年の歳月と250人のエンジニアを要し、その費用は1億3750万ドルと推定されて（https://oreil.ly/0CRW2）います。また、Appleは、実用的で商品化されたOSを作るために、2001年にmacOSを初めてリリースするまでに5億ドル（https://oreil.ly/hQhiv）をはるかに超える資金を費やさなければなりませんでした。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.1&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;故に1章の「ソフトウェア効率性が重要」という見出しになるわけだ。&lt;/p&gt;
&lt;p&gt;&amp;hellip;という感じで読み進めていくことになりそうだ。
次回の読書会の感想を書くかどうかはわからないけど（笑）&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51pUKQajnaL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go言語による並行処理&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Katherine Cox-Buday (著), 山口 能迪 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2018-10-26&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873118468/&#34;&gt;Eブック版もある&lt;/a&gt;。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2018/11/concurrency-in-go/&#34;&gt;こちら&lt;/a&gt;。 Go 言語で並行処理を書くならこの本は必読書になるだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-01-13&#34;&gt;2020-01-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Go言語による並行処理 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;効率的なGo ―データ指向によるGoアプリケーションの性能最適化 | Bartłomiej Płotka, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;効率的な Go&lt;/a&gt;』では 性能＝上手くできているか？ とし，その内訳として 精度＝間違いを犯してないか？ 効率＝余計な仕事をしてないか / 資源を使いすぎてないか？ 速度＝早くできているか？ といった感じに噛み砕いて説明している。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>オープンソース・プロジェクトの乗っ取りを試みる</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2024/04/take-over-opensource-project/" />
		<id>tag:text.Baldanders.info,2024-04-20:/remark/2024/04/take-over-opensource-project/</id>
		<published>2024-04-20T08:59:26+00:00</published>
		<updated>2024-04-20T09:03:08+00:00</updated>
		<summary>OpenSSF および OpenJS Foundation からの警告</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2024/04/other-attempts-to-take-over-open-source-projects.html&#34; title=&#34;Other Attempts to Take Over Open Source Projects - Schneier on Security&#34;&gt;Bruce Schneier 先生の記事&lt;/a&gt;経由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects – Open Source Security Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openjsf.org/blog/openssf-openjs-alert-social-engineering-takeovers&#34;&gt;Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects | OpenJS Foundation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先日の &lt;a href=&#34;https://text.baldanders.info/remark/2024/04/xz-utils-backdoor/&#34; title=&#34;XZ Utils に仕組まれたバックドアに関する覚え書き&#34;&gt;XZ Utils に仕組まれたバックドア&lt;/a&gt;に関連して &lt;a href=&#34;https://openssf.org/&#34; title=&#34;Open Source Security Foundation – Linux Foundation Projects&#34;&gt;OpenSSF (Open Source Security Foundation)&lt;/a&gt; と &lt;a href=&#34;https://openjsf.org/&#34; title=&#34;A safe and modern home for JavaScript technologies | OpenJS Foundation&#34;&gt;OpenJS Foundation&lt;/a&gt; よりオープンソース・プロジェクトの乗っ取りに関する警告が出ている。
両者とも同じ内容かな。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2024/04/xz-utils-backdoor/&#34; title=&#34;XZ Utils に仕組まれたバックドアに関する覚え書き&#34;&gt;今回&lt;/a&gt;のような話は特異なケースというわけではないらしく，以下のような類似例（試みは失敗したようだが）を報告している。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;&lt;p&gt;The OpenJS Foundation Cross Project Council received a suspicious series of emails with similar messages, bearing different names and overlapping GitHub-associated emails. These emails implored OpenJS to take action to update one of its popular JavaScript projects to “address any critical vulnerabilities,” yet cited no specifics. The email author(s) wanted OpenJS to designate them as a new maintainer of the project despite having little prior involvement. This approach bears strong resemblance to the manner in which “Jia Tan” positioned themselves in the XZ/liblzma backdoor.&lt;/p&gt;
&lt;p&gt;[&amp;hellip;]&lt;/p&gt;
&lt;p&gt;The OpenJS team also recognized a similar suspicious pattern in two other popular JavaScript projects not hosted by its Foundation, and immediately flagged the potential security concerns to respective OpenJS leaders, and the Cybersecurity and Infrastructure Security Agency (CISA) within the United States Department of Homeland Security (DHS).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これらを踏まえ social engineering による乗っ取りのパターンとして以下を挙げている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;&lt;ul&gt;
&lt;li&gt;Friendly yet aggressive and persistent pursuit of maintainer or their hosted entity (foundation or company) by relatively unknown members of the community.&lt;/li&gt;
&lt;li&gt;Request to be elevated to maintainer status by new or unknown persons.&lt;/li&gt;
&lt;li&gt;Endorsement coming from other unknown members of the community who may also be using false identities, also known as “sock puppets.”&lt;/li&gt;
&lt;li&gt;PRs containing blobs as artifacts.
&lt;ul&gt;
&lt;li&gt;For example, the XZ backdoor was a cleverly crafted file as part of the test suite that wasn’t human readable, as opposed to source code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intentionally obfuscated or difficult to understand source code.&lt;/li&gt;
&lt;li&gt;Gradually escalating security issues.
&lt;ul&gt;
&lt;li&gt;For example, the XZ issue started off with a relatively innocuous replacement of safe_fprintf() with fprintf() to see who would notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deviation from typical project compile, build, and deployment practices that could allow the insertion of external malicious payloads into blobs, zips, or other binary artifacts.&lt;/li&gt;
&lt;li&gt;A false sense of urgency, especially if the implied urgency forces a maintainer to reduce the thoroughness of a review or bypass a control.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;まぁ，悪人顔の悪人はいないってね。
漫画やドラマならともかく，現実の詐欺師は友好的かつ誠実そうな顔をしてやってくる（笑） 企業・組織などへの標的型攻撃もそうだけど，安全な「距離」をはかりながら徐々に侵食していく感じだよね。
寄生虫が宿主を乗っ取るのと同じ。
これを防ぐのはなかなか難しいだろう。
特に小規模の FOSS プロジェクトなんかでは。&lt;/p&gt;
&lt;p&gt;件の記事では，オープンソース・プロジェクトを保護するための手順として&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;&lt;ul&gt;
&lt;li&gt;Consider following industry-standard security best practices such as &lt;a href=&#34;https://openssf.org/resources/guides/&#34;&gt;OpenSSF Guides&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use strong authentication.
&lt;ul&gt;
&lt;li&gt;Enable two-factor authentication (2FA) or Multifactor Authentication (MFA).&lt;/li&gt;
&lt;li&gt;Use a secure password manager.&lt;/li&gt;
&lt;li&gt;Preserve your recovery codes in a safe, preferably offline place.&lt;/li&gt;
&lt;li&gt;Do not reuse credentials/passwords across different services.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Have a security policy including a “&lt;a href=&#34;https://github.com/ossf/oss-vulnerability-guide&#34;&gt;coordinated disclosure&lt;/a&gt;” process for reports.&lt;/li&gt;
&lt;li&gt;Use best practices for merging new code.
&lt;ul&gt;
&lt;li&gt;Enable branch protections and signed commits.&lt;/li&gt;
&lt;li&gt;If possible, have a second developer conduct code reviews before merging, even when the PR comes from a maintainer.&lt;/li&gt;
&lt;li&gt;Enforce readability requirements to ensure new PRs are not obfuscated, and use of opaque binaries is minimized.&lt;/li&gt;
&lt;li&gt;Limit who has npm publish rights.&lt;/li&gt;
&lt;li&gt;Know your committers and maintainers, and do a periodic review. Have you seen them in your working group meetings or met them at events, for example?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you run an open source package repository, consider adopting &lt;a href=&#34;https://repos.openssf.org/principles-for-package-repository-security&#34;&gt;Principles for Package Repository Security&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Review “&lt;a href=&#34;https://www.cisa.gov/news-events/news/avoiding-social-engineering-and-phishing-attacks&#34;&gt;Avoiding social engineering and phishing attacks&lt;/a&gt;” from CISA and/or “&lt;a href=&#34;https://www.enisa.europa.eu/topics/incident-response/glossary/what-is-social-engineering&#34;&gt;What is ‘Social Engineering’&lt;/a&gt;” from ENISA.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;を挙げている。
比較的大きなコミュニティならこれでもいいんだろうけどねぇ。
サプライチェーンの観点では重要だけどオープンソース・プロジェクトとしては小規模で，殆どワンオペで回してるようなところは難しいかもしれない。
&lt;a href=&#34;https://text.baldanders.info/remark/2024/04/xz-utils-backdoor/&#34; title=&#34;XZ Utils に仕組まれたバックドアに関する覚え書き&#34;&gt;今回&lt;/a&gt;の XZ Utils のように。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4296001574?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51anznwPz2L._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4296001574?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ハッキング思考　強者はいかにしてルールを歪めるのか、それを正すにはどうしたらいいのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 高橋 聡 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2023-10-12&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4296001574 (ASIN), 9784296001576 (EAN), 4296001574 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「AI時代にルールを味方につけるには、「正しいハッキングの考え方」が必要だ」（帯の言葉より）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2023-10-13&#34;&gt;2023-10-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ハッキング思考 --&gt;
</content>
	</entry><entry>
		<title>自家中毒を起こす AI と SF に取り憑かれたビッグテック</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2024/04/model-collapse/" />
		<id>tag:text.Baldanders.info,2024-04-15:/remark/2024/04/model-collapse/</id>
		<published>2024-04-15T13:12:54+00:00</published>
		<updated>2024-05-21T22:54:39+00:00</updated>
		<summary>botshit とモデル崩壊</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;久しぶりに &lt;a href=&#34;https://p2ptk.org/&#34; title=&#34;P2Pとかその辺のお話R | Sharing is Caring&#34;&gt;P2Ptk.org&lt;/a&gt; の翻訳記事を見た気がする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/monopoly/4484&#34;&gt;食糞AIがもたらす危機：botshitの肥溜めと化すインターネットの未来 | p2ptk[.]org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;またコリイ・ドクトロウさんってばお下品な言葉を（笑）と思ったが “botshit” というのは2024年1月のこの論文が元ネタらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4678265&#34;&gt;Beware of Botshit: How to Manage the Epistemic Risks of Generative Chatbots by Tim Hannigan, Ian P. McCarthy, Andre Spicer :: SSRN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Abstract によると&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4678265&#34;&gt;Generative chatbots do this work by ‘predicting’ responses rather than ‘knowing’ the meaning of their responses. This means chatbots can produce coherent sounding but inaccurate or fabricated content, referred to as ‘hallucinations’. When humans use this untruthful content for tasks, it becomes what we call ‘botshit’.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4678265&#34;&gt;Beware of Botshit: How to Manage the Epistemic Risks of Generative Chatbots&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なんだそうだ。
そしてコリイ・ドクトロウさんによると「&lt;a href=&#34;https://p2ptk.org/monopoly/4484&#34; title=&#34;食糞AIがもたらす危機：botshitの肥溜めと化すインターネットの未来 | p2ptk[.]org&#34;&gt;すでにインターネットはbotshitの肥溜めと化している&lt;/a&gt;（&lt;a href=&#34;https://pluralistic.net/2024/03/14/inhuman-centipede/#enshittibottification&#34; title=&#34;Pluralistic: The Coprophagic AI crisis (14 Mar 2024) – Pluralistic: Daily links from Cory Doctorow&#34;&gt;internet is already drowning in it&lt;/a&gt;）」ということらしい。
つか，訳文のほうがお下品だな（笑）&lt;/p&gt;
&lt;p&gt;これによって起こりうるのがモデル崩壊（Model Collapse）である。
以下は2023年5月の論文。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2305.17493&#34;&gt;[2305.17493] The Curse of Recursion: Training on Generated Data Makes Models Forget&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://arxiv.org/abs/2305.17493&#34;&gt;We find that use of model-generated content in training causes irreversible defects in the resulting models, where tails of the original content distribution disappear. We refer to this effect as Model Collapse and show that it can occur in Variational Autoencoders, Gaussian Mixture Models and LLMs.  We build theoretical intuition behind the phenomenon and portray its ubiquity amongst all learned generative models. We demonstrate that it has to be taken seriously if we are to sustain the benefits of training from large-scale data scraped from the web.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arxiv.org/abs/2305.17493&#34;&gt;The Curse of Recursion: Training on Generated Data Makes Models Forget&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なんちうか，これって自家中毒みたいだよな（喩えが雑）。
こっちの記事のほうがイメージしやすいかな。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lightbluetouchpaper.org/2023/06/06/will-gpt-models-choke-on-their-own-exhaust/&#34;&gt;Will GPT models choke on their own exhaust? | Light Blue Touchpaper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://www.lightbluetouchpaper.org/2023/06/06/will-gpt-models-choke-on-their-own-exhaust/&#34;&gt;Just as we’ve strewn the oceans with plastic trash and filled the atmosphere with carbon dioxide, so we’re about to fill the Internet with blah. This will make it harder to train newer models by scraping the web, giving an advantage to firms which already did that, or which control access to human interfaces at scale. Indeed, we already see AI startups &lt;a href=&#34;https://blog.archive.org/2023/05/29/let-us-serve-you-but-dont-bring-us-down/&#34;&gt;hammering the Internet Archive&lt;/a&gt; for training data.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.lightbluetouchpaper.org/2023/06/06/will-gpt-models-choke-on-their-own-exhaust/&#34;&gt;Will GPT models choke on their own exhaust?&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;“AI startups &lt;a href=&#34;https://blog.archive.org/2023/05/29/let-us-serve-you-but-dont-bring-us-down/&#34;&gt;hammering the Internet Archive&lt;/a&gt; for training data” の部分を示す記事がこれだね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.archive.org/2023/05/29/let-us-serve-you-but-dont-bring-us-down/&#34;&gt;Let us serve you, but don’t bring us down | Internet Archive Blogs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://blog.archive.org/2023/05/29/let-us-serve-you-but-dont-bring-us-down/&#34;&gt;Tens of thousands of requests per second for our public domain OCR files were launched from 64 virtual hosts on amazon’s AWS services. (Even by web standards,10’s of thousands of requests per second is a lot.)&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://blog.archive.org/2023/05/29/let-us-serve-you-but-dont-bring-us-down/&#34;&gt;Let us serve you, but don’t bring us down&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これは酷い。
1年前にこんなことが起こってたのか。&lt;/p&gt;
&lt;p&gt;モデル崩壊については，私も耳にしていたが，昨年前半は仕事が徐々に忙しくなっていて LLM への関心が薄れていたんだよな。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://p2ptk.org/monopoly/4484&#34;&gt;皮肉なことに、AI企業自身がこの問題の火種を作っている。GoogleやMicrosoftによる「AI検索」の全面的な推進は、検索エンジンがウェブページへのリンクを返すのではなく、そのコンテンツを要約する未来を想定している。しかし、そうなれば誰がウェブを書くだろうか。あなたの書いたものを見つけられるのはAIのクローラーだけで、しかもそのAIはあなたの書いたものを自分のトレーニングの餌にするだけで、読者にあなたの書いたものを紹介する気は毛頭ない。AIが検索を支配すれば、オープンウェブはAIの工業的畜産場（CAFO）となり、検索クローラーはますます肥溜めからクソを吸い上げるようになるだろう。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://p2ptk.org/monopoly/4484&#34;&gt;食糞AIがもたらす危機：botshitの肥溜めと化すインターネットの未来&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;大昔，仕事とかでメールのやり取りに辟易してた頃， AI がエージェントとなってメール送受信を仲立ちしてくれれば，マナーと称した下らない時候の挨拶とか書かなくて済むし，分かりにくい文面も要約してくれるんじゃないか？ と夢想したものだが，人同士のやり取りを LLM が仲立ちして肩代わりするようになったらどんな恐ろしいことが起きるんだろうねぇ（笑）&lt;/p&gt;
&lt;p&gt;ところで，この記事の最初の方に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://p2ptk.org/monopoly/4484&#34;&gt;かつては、一部の作家や読者がSFを予言と勘違いしても、さして問題にはならなかった。SF＝予言という妄想に駆られた人々に、社会を間違った方向に再構築する力がなかったからだ。しかし、SFに取り憑かれたテック億万長者たちが、我先に「人類苦悩化システム（torment nexus）」の発明に乗り出すに至っては、SF作家たちは作り物のお話と予言とを明確に区別しなくてはならなくなった（例「サイバーパンクは警告であって提案ではない」）。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://p2ptk.org/monopoly/4484&#34;&gt;食糞AIがもたらす危機：botshitの肥溜めと化すインターネットの未来&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とか書かれていて思わず笑ってしまったのだが，似たような話を yomoyomo さんが紹介していた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20240415/science-fiction-shape-the-future&#34;&gt;SFが未来を方向づけるのか？ 当代の人気SF作家が答える - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この記事でも&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://yamdas.hatenablog.com/entry/20240415/science-fiction-shape-the-future&#34;&gt;コリイ・ドクトロウは、実際にものを作る人の多くが SF にインスピレーションを受けているのは否定できないと認めながらも、物語の寓意をそのまま受け取りすぎるのは、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%B4%9E%E7%AA%9F%E3%81%AE%E6%AF%94%E5%96%A9&#34;&gt;「プラトンの洞窟」&lt;/a&gt;を本当に探すようなものと語っている。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20240415/science-fiction-shape-the-future&#34;&gt;SFが未来を方向づけるのか？ 当代の人気SF作家が答える&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と紹介している。
ほかにも&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://yamdas.hatenablog.com/entry/20240415/science-fiction-shape-the-future&#34;&gt;結局のところ、SF が我々が築く未来の青写真になるんですかね？ という最初の問いに、N・K・ジェミシンが、そんなわけない。他の文学ジャンルと変わらん。ちょっとしたことを一つ正しく言い当てて、他はすべてハズレなのが「先見の明がある」ヴィジョンと言えるか？ と答えていて受けた。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20240415/science-fiction-shape-the-future&#34;&gt;SFが未来を方向づけるのか？ 当代の人気SF作家が答える&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と紹介されていて，これが一番面白かった。
「SFに取り憑かれたテック億万長者たち」のせいで SF 作家がわざわざこういうことを言わないといけない世の中になったのかねぇ。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/ai/4486&#34;&gt;学校教育とAI：生成AIの使用禁止とAI検出ツールは生徒たちを害する | p2ptk[.]org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20240415/quality-assurance-and-ai&#34;&gt;AI栄えてQAエンジニアが儲かる？ 話はそんな単純ではない - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20240415/ai-snake-oil&#34;&gt;アーヴィンド・ナラヤナンらの「インチキAI」本が遂に出る - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.techno-edge.net/article/2024/04/08/3130.html&#34;&gt;GPT-4超え精度でスマホ上実行できるオンデバイス生成AI「Octopus v2」、Google「生成AIは大きければいいってものではない」など重要論文5本を解説（生成AIウィークリー） | テクノエッジ TechnoEdge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/ai/4500&#34;&gt;AI黙示録は“簡単に”回避できる | p2ptk[.]org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2024/05/86454/&#34;&gt;TESCREALふたたび：AGIが約束するユートピアはSF脳のディストピアなのか？ – WirelessWire News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/ai/4556&#34;&gt;なぜ我々はジェットパックの実用化というウソっぱちを信じたのか | p2ptk[.]org&lt;/a&gt; : dis る dis る（笑）&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>プラットフォームかプロトコルか</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2024/04/platform-or-protocol/" />
		<id>tag:text.Baldanders.info,2024-04-15:/remark/2024/04/platform-or-protocol/</id>
		<published>2024-04-15T12:07:04+00:00</published>
		<updated>2024-04-20T10:42:40+00:00</updated>
		<summary>日本で2日間（東京と大阪）に渡り Bluesky Meetup が開催された</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;物凄い偏見であることは承知の上で書いてしまうけど，現代を含む近代というのは「『個人』が台頭する時代」だと思うのよ。
もしくは社会と個人が向き合う時代。
時に協力し時に反目するのが社会と個人との関係。
その文脈の中で，たとえば身分や差別の問題，たとえばジェンダーの問題，たとえば税金と福祉の問題，といったことを捉える必要がある。&lt;/p&gt;
&lt;p&gt;ゼロ年代前半の「Web 2.0」で期待されたのは多様な Web サービスの間で個人が緩やかに連携しボトムアップで「ネット社会」を構成することだった筈だ。
しかしそれは「ソーシャルネットワーク・サービス」の登場でぶち壊された。
ユーザは人間関係を「人質」にプラットフォームに囲い込まれ縛り付けられる。
更に2010年代の「アラブの春」がこれを強化した。
日本ではこれに 3.11 を加えてもいいかも知れない。
ネットはプラットフォーム間の覇権ゲームの会場となりユーザを&lt;a href=&#34;https://text.baldanders.info/remark/2023/01/internet-bulimia/&#34; title=&#34;嘔吐するインターネット&#34;&gt;過剰に飲み込み嘔吐する&lt;/a&gt;。
そこに個人は存在せず，ユーザは統計上の「数値」でしかない。
この辺が「&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20230828/neo-feudalism&#34; title=&#34;時代はデジタル封建主義？ ジョエル・コトキン『新しい封建制がやってくる』が出るぞ - YAMDAS現更新履歴&#34;&gt;デジタル封建主義&lt;/a&gt;」などと呼ばれる所以だろう。&lt;/p&gt;
&lt;p&gt;これを打ち破りたいならプロトコルから変えるべきだ！ という発想になるのは自然なことかもしれない。&lt;/p&gt;
&lt;p&gt;先週末は日本で2日間（東京と大阪）に渡り Bluesky Meetup が開催された。
個人的には関心が薄かったので見てもないのだが yomoyomo さんがこれに絡む記事を &lt;a href=&#34;https://wirelesswire.jp/&#34; title=&#34;WirelessWire News – The Technology and Ecosystem of the IoT.&#34;&gt;WirelessWire News&lt;/a&gt; のブログにタイムリーに公開されていて，流石と思ってしまった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2024/04/86389/&#34;&gt;BlueskyやThreadsに受け継がれたネット原住民の叡智 – WirelessWire News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この中で紹介されている以下の記事は読んでおくべきだろう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20210201-free-speech-protocols-approach/&#34;&gt;言論の自由を取り巻く問題を解決する「プロトコルに基づいた仕組み」とは？ - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.yamdas.org/column/technique/marking-the-webs-35th-birthday-an-open-letterj.html&#34;&gt;ウェブの35歳の誕生日を祝う：オープンレター（Marking the Web’s 35th Birthday: An Open Letter 日本語訳）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今のところ Bluesky には Bluesky というサービスと，それを駆動する &lt;a href=&#34;https://atproto.com/&#34; title=&#34;The AT Protocol&#34;&gt;AT (Authenticated Transfer) Protocol&lt;/a&gt; という2本の柱がある。
おそらく Bluesky 自身は AT プロトコルを実装する実験的な側面を持っていて，本命は AT プロトコルの標準化とそれを使った「Bluesky ではない」サービス群の台頭ではないかと思う。&lt;/p&gt;
&lt;p&gt;上で紹介した一連の記事を読んで思い出したのが『&lt;a href=&#34;https://www.amazon.co.jp/dp/B00DIM6BE6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;インテンション・エコノミー&lt;/a&gt;』だ。
この本についても yomoyomo さんの&lt;a href=&#34;https://www.yamdas.org/booklog/intentioneconomy.html&#34; title=&#34;yomoyomoの読書記録 - ドク・サールズ『インテンション・エコノミー 顧客が支配する経済』（翔泳社）&#34;&gt;書評&lt;/a&gt;がある。
一部引用しておこう。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.yamdas.org/booklog/intentioneconomy.html&#34;&gt;&lt;p&gt;　インテンション・エコノミーとは買い手が価値の源泉となる真の意味でオープンな市場であり、VRM（企業関係管理）が CRM（顧客関係管理）にとってかわり、顧客は企業に囲い込まれることなく、つまり消費者として集合的に扱われるのでなく企業との関係はパーソナルなものになる。&lt;/p&gt;
&lt;p&gt;　つまり、顧客の側が自分に関するデータの主導権に握り、自らの意思に従い企業との関係を決められる。それには顧客側に立ちそのニーズの代理人として機能する「フォース・パーティ」の存在が必要になるし、顧客と企業の間には対話的でオープンな API が提供されることで市場のオープンさが担保される。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.yamdas.org/booklog/intentioneconomy.html&#34;&gt;yomoyomoの読書記録 - ドク・サールズ『インテンション・エコノミー 顧客が支配する経済』（翔泳社）&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これを&lt;a href=&#34;https://baldanders.info/blog/000638/&#34; title=&#34;『インテンション・エコノミー』を読む&#34;&gt;読んだ&lt;/a&gt;当時は「企業と個人」の関係で考えていたが，これは「社会と個人」の関係で考えることもできる。
もしかしたらこれから求められるのは SRM (社会関係管理) みたいな仕組みかもしれない，などと妄想してみた。
もし AT プロトコルによって SRM が構成できるなら面白いのに（笑）&lt;/p&gt;
&lt;p&gt;既に ActivityPub は W3C によって&lt;a href=&#34;https://www.w3.org/TR/activitypub/&#34;&gt;標準化&lt;/a&gt;され Mastodon のみならず PeerTube や Pixelfed といった多様なサービスを生み出しつつある（なくなってるぽいものもあるが）。
日本でならこれに Misskey を加えてもいいかも知れない。
Threads は Mastodon ベースだそうだが，もはや Mastodon とは別物だろう。
こういうことが AT プロトコル周りでも起こるようになれば，もう少し真面目に取り組んでもいいかなぁ，とは思っている。&lt;/p&gt;
&lt;p&gt;まぁ，でも，標準化されたらされたで，またぞろ覇権ゲームが勃発しそうな気がするけどね。
そしてその勝者はやがて腐っていく。
これも自然の理か？&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://p2ptk.org/monopoly/4366&#34;&gt;プラットフォームはこのように滅びていく。まず、ユーザにとって良き存在になる。次に、ビジネス顧客にとって良き存在になるために、ユーザを虐げる。最後に、ビジネス顧客を虐げて、すべての価値を自分たちに向ける。そうして死んでいく。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://p2ptk.org/monopoly/4366&#34;&gt;メタクソ化するTiktok&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;それならば，持てる荷物は最小限に，いつでもプラットフォームから離脱できるよう備えるのがネットでの賢い過ごし方なのかも知れない。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20240415/wirelesswire&#34;&gt;WirelessWire News連載更新（BlueskyやThreadsに受け継がれたネット原住民の叡智） - YAMDAS現更新履歴&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/masayukihatta/ss-199545007&#34;&gt;プロトコル・ベースのプラットフォーム規制 | PPT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://p2ptk.org/monopoly/4502&#34;&gt;誰もがインターネットの「暗がり」に安住する日 | p2ptk[.]org&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/monopoly/4482&#34;&gt;なぜミレニアル世代はTiktokを離れられないのか（あるいはおじさん・おばさんがFacebookを離れられないのはなぜか） | p2ptk[.]org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://lovetech-media.com/love/bluesky-meetup-in-tokyo-vol2-report/&#34;&gt;「日本の開発者は素晴らしい」ソーシャルメディアの明るい未来を感じたBlueskyミートアップ東京 #BskyMeetup | LoveTechMedia - ラブテックメディア&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/bookmarks/fediverse/&#34;&gt;Fediverse 関連のブックマーク&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00DIM6BE6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/519&amp;#43;kIHb71L._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B00DIM6BE6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;インテンション・エコノミー～顧客が支配する経済&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Doc Searls (著), 栗原潔 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;翔泳社 2013-03-14 (Release 2013-06-20)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00DIM6BE6 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;時代はソーシャル CRM から VRM へ。&lt;a href=&#39;https://baldanders.info/blog/000794/&#39;&gt;俺達がインターネットだ！&lt;/a&gt; &lt;a href=&#39;https://baldanders.info/blog/000638/&#39;&gt;感想文はこちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-04-26&#34;&gt;2015-04-26&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- インテンション・エコノミー --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00FW5SSCK?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/515aVCPebQL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B00FW5SSCK?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ソーシャル・ネットワーク (字幕版)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ジェシー・アイゼンバーグ (出演), アンドリュー・ガーフィールド (出演), ジャスティン・ティンバーレイク (出演), アーミー・ハマー (出演), マックス・ミンゲラ (出演), David Fincher (監督), Scott Rudin (プロデュース), Dana Brunetti (プロデュース), Michael De Luca (プロデュース), Cean Chaffin (プロデュース)&lt;/dd&gt;
    &lt;dd&gt; (Release 2013-11-26)&lt;/dd&gt;
    &lt;dd&gt;Prime Video&lt;/dd&gt;
    &lt;dd&gt;B00FW5SSCK (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;この映画が公開された当時（2011年）は日本でも Facebook が一般（特に年配層）に浸透し始めていたときで，スクリーン上の狂騒に苦笑したものだが，その Facebook が広告まみれの駄システムに堕ちてしまうとは誰も思わなかっただろうな（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-04-14&#34;&gt;2019-04-14&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ソーシャル・ネットワーク --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;&lt;img src=&#34;https://tatsu-zine.com/images/books/877/cover_s.jpg&#34; width=&#34;106&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;yomoyomo (著)&lt;/dd&gt;
    &lt;dd&gt;達人出版会 2017-12-25 (Release 2019-03-02)&lt;/dd&gt;
    &lt;dd&gt;デジタル書籍&lt;/dd&gt;
    &lt;dd&gt;infoshare2 (tatsu-zine.com)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://wirelesswire.jp/author/yomoyomo/&#34;&gt;WirelessWire News 連載&lt;/a&gt;の書籍化。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2019/01/infoshare2/&#34;&gt;こちら&lt;/a&gt;。祝 &lt;a href=&#34;https://www.amazon.co.jp/dp/B08DD2MC46?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Kindle 化&lt;/a&gt;！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-31&#34;&gt;2018-12-31&lt;/abbr&gt;&lt;/p&gt;
&lt;/div&gt; &lt;!-- 続・情報共有の未来 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4903127044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41uBRNdBygL._SL160_.jpg&#34; width=&#34;110&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4903127044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ジョック ヤング (著), Young,Jock (原著), 秀男, 青木 (翻訳), 泰郎, 伊藤 (翻訳), 政彦, 岸 (翻訳), 真保呂, 村澤 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;洛北出版 2007-03-01&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4903127044 (ASIN), 9784903127040 (EAN), 4903127044 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://baldanders.info/blog/000410/&#34;&gt;感想はこちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-10-31&#34;&gt;2015-10-31&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 排除型社会 --&gt;
</content>
	</entry><entry>
		<title>Spiegelさん＠がんばらない</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2024/03/tekipaki-working/" />
		<id>tag:text.Baldanders.info,2024-03-23:/remark/2024/03/tekipaki-working/</id>
		<published>2024-03-23T00:44:18+00:00</published>
		<updated>2024-03-23T00:45:54+00:00</updated>
		<summary>たぶん「生産性の高い仕事」ってのは「がむしゃら」にがんばることではなく「てきぱき」さばくことだと思うのよ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今回のネタ元はこちら。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.com/tsukamoto/n/n8a03a4175572&#34;&gt;「がむしゃらに働く」って週60時間ぐらいまで｜塚本 牧生&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;念のために引用しておくと&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://note.com/tsukamoto/n/n8a03a4175572&#34;&gt;ただし、ここでいうがむしゃらとは「週60〜65時間労働」です。 これは超えてはいけない過労死ラインで、また超えても成果がむしろ出なくなるラインなので、がむしゃらも度が過ぎないようにしてください。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://note.com/tsukamoto/n/n8a03a4175572&#34;&gt;「がむしゃらに働く」って週60時間ぐらいまで｜塚本 牧生&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ということだそうなので。
つか，まっとうな企業なら三六協定などでその辺は守られてると思うけど。&lt;/p&gt;
&lt;p&gt;個人的な感覚として「もう週50Hも無理」になってきた。
我ながら衰えたなぁと思う。
いや頑張ればできるのよ。
でもそこから回復に時間がかかるようになった。
週末休んでも追いつかないくらい。&lt;/p&gt;
&lt;ruby&gt;&lt;rb&gt;閑話休題&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;それはさておき&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;
&lt;p&gt;ぺーぺーの新人の頃に言われたのが「仕事には必ず終わりがある」である。
私はこれを曲解して「終わりのない（見えない）仕事は仕事じゃない」と思っている。
精神的に削られるのは「終わりのない仕事」である。
終わりがあるからこそ最終直線のひと仕事を「がむしゃら」に駆け抜けることができる。&lt;/p&gt;
&lt;p&gt;たぶん「生産性の高い仕事」ってのは「がむしゃら」にがんばることではなく「てきぱき」さばくことだと思うのよ。
まぁ，それが難しいから「がむしゃら」に頑張ることでカバーしようとするんだけどね。
「てきぱき」さばくのって技能（スキル）だし。
だからといって，そこで「がむしゃら」を導入するのは根本からやり方を間違えてる。
「がむしゃら」は最後のひと鞭で発揮するからこそ効果が出るのである。&lt;/p&gt;
&lt;p&gt;&amp;hellip;というようなことをつらつらと考えたりした。
なので，やっぱり今年も「がんばらない」方向でよろしくお願いします。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00HY73M16?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51yk&amp;#43;9cbozL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B00HY73M16?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;SAVED. ／ Be mine!&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;坂本　真綾 (メインアーティスト)&lt;/dd&gt;
    &lt;dd&gt;FlyingDog 2014-02-05 (Release 2014-02-05)&lt;/dd&gt;
    &lt;dd&gt;MP3 ダウンロード&lt;/dd&gt;
    &lt;dd&gt;B00HY73M16 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「世界征服〜謀略のズヴィズダー〜」OP曲。万能感溢れるノリのいい曲である（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-12-26&#34;&gt;2020-12-26&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Be mine! --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4757700423?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/518JGPT6DEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4757700423?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;てきぱきワーキン〓ラブ (5) (ビームコミックス)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;竹本 泉 (著)&lt;/dd&gt;
    &lt;dd&gt;エンターブレイン 2000-05-01&lt;/dd&gt;
    &lt;dd&gt;コミック&lt;/dd&gt;
    &lt;dd&gt;4757700423 (ASIN), 9784757700420 (EAN), 4757700423 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;ついに（「さよパラ」にも出てきた）アレックスの謎が解ける？&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-10-13&#34;&gt;2017-10-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- てきぱきワーキン♡ラブ --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00FYKN2C4?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51EE&amp;#43;Hx-J8L._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B00FYKN2C4?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ささみさん@がんばらない【TBSオンデマンド】&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;高山カツヒコ (Writer), 新房昭之 (監督), ――― (プロデュース)&lt;/dd&gt;
    &lt;dd&gt; (Release 2013-05-15)&lt;/dd&gt;
    &lt;dd&gt;Prime Video&lt;/dd&gt;
    &lt;dd&gt;B00FYKN2C4 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;2013年の作品なんだねぇ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2023-02-08&#34;&gt;2023-02-08&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ささみさん@がんばらない --&gt;
</content>
	</entry><entry>
		<title>VTuber に満たない Bluesky</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2023/07/audience/" />
		<id>tag:text.Baldanders.info,2023-07-23:/remark/2023/07/audience/</id>
		<published>2023-07-23T05:56:09+00:00</published>
		<updated>2023-07-23T08:26:26+00:00</updated>
		<summary>70万ユーザ登録おめでとうございます。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;いやぁ，夏っスねぇ。
九州はまだ梅雨が明けてないのに，本州は明けてしまったらしい。
相変わらずテキトーだな，気象庁，いや地方気象台か？&lt;/p&gt;
&lt;p&gt;昨日も自転車で遊びに出かけたのだが，日中が暑すぎて図書館から出れなくなったり。
しょうがないので昼飯食いに路線バスで移動したですよ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/53063471038/&#34;&gt;&lt;img src=&#34;./53063471038_a2982980e4_e.jpg&#34; srcset=&#34;./53063471038_a2982980e4_e.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;夏雲 | Flickr&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/53063471038/&#34;&gt;夏雲 | Flickr&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ruby&gt;&lt;rb&gt;閑話休題&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;それはさておき&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;
&lt;p&gt;Threads のリリースですっかり影が薄くなった Bluesky は昨日時点でユーザ総数が34万人を超えたらしい。
同じ日， VTuber の周防パトラの&lt;a href=&#34;https://www.youtube.com/watch?v=xdDw9YGApLE&#34; title=&#34;【ギター/ESP FRX】70万人いくまでメタルをギターを弾き続ける耐久！ロック＆メタル！ フーファイターズ/メガデス/紅/Helloween/メガロバニア and more...【周防パトラ】 - YouTube&#34;&gt;「70万人いくまでギターを弾き続ける耐久！」ライブ&lt;/a&gt;が行われていた。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/xdDw9YGApLE&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xdDw9YGApLE&#34;&gt;70万人いくまでギターを弾き続ける耐久！ ロック＆メタル！... - YouTube&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;念のために言っておくが， Bluesky は今（2023-07 時点で）なおクローズドベータ状態で，サインアップするためには wait list に登録するか誰かから招待コードを貰うしかない。
でも，単純に言って Bluesky のユーザ規模の倍以上のオーディエンスがいるわけですよ，彼女には。
もちろん世の中にはもっと上の桁のオーディエンスを抱える有名人もいるわけで。&lt;/p&gt;
&lt;p&gt;先日，またもや Twitter がやらかしてかなりのユーザが Mastodon や Bluesky 等に流れ込んだわけだが，自前でどうとでも調達できる（クラウドという名の）計算資源を持ってる「ビッグテック」と違って「その他大勢」のサービスでは，とつぜん難民が押し寄せたからといってリアルタイムにスケールアップできるわけじゃない。
実際，新規登録を制限してるはずの Bluesky でさえ一時的にサインアップを止めざるを得なかった。
おそらくサーバ資源の増強をしてたんだろう。&lt;/p&gt;
&lt;p&gt;Mastodon サーバのひとつで私がメインで利用している fedibird.com のユーザ総数は現在33K人を超えたあたりで，アクティブユーザに限れば10K人ほどらしい&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
そんで，ランニングコストは145K円/月ほどだそうな。
この規模なら，単純計算で各アクティブユーザが300円/年ほど寄付すれば（少なくともランニングコスト分は）賄えるとのこと。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox center&#34;&gt;
&lt;iframe src=&#34;https://fedibird.com/@noellabo/110758504812079195/embed&#34; class=&#34;mastodon-embed&#34; style=&#34;max-width: 100%; border: 0&#34; width=&#34;400&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;&lt;script src=&#34;https://fedibird.com/embed.js&#34; async=&#34;async&#34;&gt;&lt;/script&gt;
&lt;/blockquote&gt;&lt;/figure&gt;
&lt;p&gt;この中に人件費は含まれてないだろうし，累積赤字がけっこうあるらしいので「お金なんてナンボあってもいいですからね」って感じだろうけど。&lt;/p&gt;
&lt;p&gt;実は昨年末に Hostdon で（何かに使えるかなと思って）ホスティングサービスを契約していたのだが，何もしないまま先月解約した。
ホスティングサービスに500円/月払うくらいなら fedibird.com に寄付するほうが全然安上がりだろうという判断。
不特定多数相手の汎用サーバだとコンプライアンスが云々とかあるので，特殊用途（TRUTH Social とかw）ならホスティングのほうがいいんだろうけど（あとはセルフブランディングで独自ドメインを使いたいとか），結局私には用がなかった（笑）&lt;/p&gt;
&lt;p&gt;Mastodon のサーバで最大規模のユーザを抱えているのが mastodon.social で，2023-07時点で1.5M人に満たないくらい。
ちなみに mastodon.social 以外に1M人を超えるユーザを有しているサーバ（Threads のような連合しないサーバは除く）は今のところ存在しない。&lt;/p&gt;
&lt;p&gt;もし Mastodon 連合が全体で1億人を超えるユーザを夢見るなら，ものすごく単純に考えても mastodon.social 規模のサーバが100は必要になる。
実際には ActivityPub で「連合」する &lt;a href=&#34;https://instances.social/list/advanced&#34; title=&#34;Mastodon instances&#34;&gt;Mastodon サーバ&lt;/a&gt;の総数は18Kほどだが&lt;a href=&#34;https://mastodon.social/@mastodonusercount&#34; title=&#34;Mastodon Users (@mastodonusercount@mastodon.social) - Mastodon&#34;&gt;全体のユーザ総数&lt;/a&gt;は13M人を超えたあたりのようだ&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;こうしてみると Threads が単体で初日で10M人ユーザを獲得したのは計算資源の調達からして並大抵ではないし，これが将来 ActivitiyPub 連携で Fediverse に加わるかもしれない考えるとぞんぞがさばる（出雲弁）。&lt;/p&gt;
&lt;p&gt;クラウド資源あるいはサービスの利用はすぐに始められるので，個人利用やスタートアップでは使い勝手がいいが，スケールについて真剣に考え始めると足枷になることも多い。
クラウドで無制限にスケールできるのはクラウドの所有者（社）だけだろう。
あるいは札束で明かりとりをする成金か（笑） 喩えるならクラウドは砂漠の水売りみたいなもんで，ゼロ年代に言われてた「情報ダム」のような公共イメージとは程遠い。&lt;/p&gt;
&lt;p&gt;&amp;hellip;てなことを&lt;a href=&#34;https://www.youtube.com/watch?v=xdDw9YGApLE&#34; title=&#34;【ギター/ESP FRX】70万人いくまでメタルをギターを弾き続ける耐久！ロック＆メタル！ フーファイターズ/メガデス/紅/Helloween/メガロバニア and more...【周防パトラ】 - YouTube&#34;&gt;耐久ライブ&lt;/a&gt;を見ながら考えてた。
そうそう，70万ユーザ登録おめでとうございます。&lt;/p&gt;
&lt;p&gt;結局のところ Twitter が本当に沈没しても代わりになるようなサービスは存在せず，某タイタニック号のごとく全てを道連れにするしかないのだ。
これは他の単一プラットフォームの大規模 SNS でも同じ。
たとえば私は広島時代の友人の近況を見るためだけに Facebook を使ってるが，仮に Facebook がサービスをシャットダウンしても代わりになるものがなく，旧友との関係も「ハイそれまでョ」になりかねない。
これはそういうものだと割り切るしかないだろう。&lt;/p&gt;
&lt;p&gt;ただ，自分自身がネットから切り離されないよう，特定の企業・サービスの思惑に巻き込まれることなく，依存をできるだけ少なくするようにしないと。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://p2ptk.org/freedom-of-speech/4214&#34;&gt;我々が「離脱の自由」を必要とする理由――あるいはソーシャルメディアの失敗をマシにする方法 | p2ptk[.]org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://p2ptk.org/monopoly/4366&#34;&gt;メタクソ化するTiktok：プラットフォームが生まれ、成長し、支配し、滅びるまで | p2ptk[.]org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://note.com/tsukamoto/n/n8056f3562d91&#34;&gt;クラウドネイティブから見たクラウドの小史｜塚本 牧生&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.theverge.com/2023/7/7/23787334/instagram-threads-news-politics-adam-mosseri-meta-facebook&#34;&gt;Threads isn’t for news and politics, says Instagram’s boss - The Verge&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gigazine.net/news/20230706-mastodon-ceo-comments-about-threads/&#34;&gt;Twitter対抗の分散型SNS「Threads」が登場することでMastodonは変わるのか？をMastodonのCEOが解説 - GIGAZINE&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.itmedia.co.jp/news/articles/2307/06/news174.html&#34;&gt;Threads、JASRACと利用許諾契約を結んでいた　Twitterとの差別化点に - ITmedia NEWS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/bookmarks/fediverse/&#34;&gt;Fediverse 関連のブックマーク&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B011LC4D58?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51o1Irti1QL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B011LC4D58?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ハイそれまでョ&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;植木等 (メインアーティスト)&lt;/dd&gt;
    &lt;dd&gt;EMIミュージック・ジャパン 2008-10-22 (Release 2015-07-22)&lt;/dd&gt;
    &lt;dd&gt;MP3 ダウンロード&lt;/dd&gt;
    &lt;dd&gt;B011LC4D58 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「クレイジー・キャッツ・デラックス」より。昭和を代表する歌謡曲（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2023-07-23&#34;&gt;2023-07-23&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- クレイジー・キャッツ・デラックス ハイそれまでョ --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;fedibird.com は 2023-02 から新規登録を制限している。サインアップするには既存ユーザからの招待が必要。なので fedibird.com ユーザの増加ペースはゆっくりしている。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Facebook のユーザ数が29.9億人で世界最大。続いて YouTube は20億人， Instagram が10億人， TikTok が同じく10億人という感じ&lt;a href=&#34;https://growthseed.jp/experts/sns/number-of-users/&#34; title=&#34;【2023年6月最新】SNSの利用者数とユーザー属性や特徴まとめ&#34;&gt;らしい&lt;/a&gt;。ちなみに Twitter は3.3億人だそうな。トラブルで数万ユーザが逃げたところで大したことないし，喉元すぎれば熱さを忘れて戻ってくるユーザも多かろう（笑）&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>Mastodon と Bluesky でボット運用はじめました【2023-12-04 更新】</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2023/07/crawler/" />
		<id>tag:text.Baldanders.info,2023-07-01:/remark/2023/07/crawler/</id>
		<published>2023-07-01T03:49:59+00:00</published>
		<updated>2024-05-10T22:02:32+00:00</updated>
		<summary>自作ツールに Web 上の情報を収集する機能を付けて Mastodon/Bluesky 上でボットを構成できるようにした。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;h2&gt;自作ツール goark/toolbox&lt;/h2&gt;
&lt;p&gt;5月頃に思いついてコマンドラインで Mastodon や Bluesky に投稿できる &lt;a href=&#34;https://github.com/goark/toolbox&#34; title=&#34;goark/toolbox: A collection of miscellaneous commands&#34;&gt;goark/toolbox&lt;/a&gt; というツールを作った。
ついでに Web 上の情報を収集する機能も付けてボットを構成できるようにした。&lt;/p&gt;
&lt;p&gt;実際の運用は自宅 PC で cron を回している（自宅 PC は24時間稼働中）。
&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; ならシングルバイナリで取り回しできるし，この程度ならクラウドとか Docker とか要らんですよ。&lt;/p&gt;
&lt;h2&gt;Bluesky で非公式 APOD 配信ボットを作った&lt;/h2&gt;
&lt;p&gt;Mastodon には &lt;a href=&#34;https://apod.nasa.gov/apod/&#34; title=&#34;Astronomy Picture of the Day&#34;&gt;APOD (Astronomy Picture of the Day)&lt;/a&gt; の非公式配信ボットがいくつかあるのだが（&lt;code&gt;#apod&lt;/code&gt; で検索するとアホほど出てくる），できたばかりの Bluesky で運用している人はいない様子。
なら作っちゃえ！ というわけで作った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bsky.app/profile/apodunofficial.bsky.social&#34; title=&#34;Astronmy Picture of the Day (unofficial bot)&#34;&gt;@apodunofficial.bsky.social&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;データを収集するために &lt;a href=&#34;https://api.nasa.gov/&#34; title=&#34;NASA Open APIs&#34;&gt;NASA API&lt;/a&gt; をハンドリングする機能を &lt;a href=&#34;https://github.com/goark/toolbox&#34; title=&#34;goark/toolbox: A collection of miscellaneous commands&#34;&gt;goark/toolbox&lt;/a&gt; に組み込んだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2023/02/api-for-astronomy-picture-of-the-day/&#34;&gt;NASA API を使って “Astronomy Picture of the Day” のデータを取得する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;API でクレジットが示されているものは明示しているが， NASA 関連の画像・動画については示されない？&lt;/p&gt;
&lt;p&gt;あと API がしょっちゅう 504 で落ちるのね。
Web ページは全然構造化されてなくてスクレイピングする気も起こらない。
というわけで，生暖かく見守っていただければ（笑）&lt;/p&gt;
&lt;h2&gt;自ブログおよび自作パッケージの更新情報も配信&lt;/h2&gt;
&lt;p&gt;Bluesky や Mastodon に記事を投稿する仕組みが整ったので，フィードを読み込む機能も組み込んで自ブログや Flickr にアップした写真の更新情報を以下の Mastodon/Bluesky のメインアカウントに配信できるようにした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fedibird.com/@spiegel&#34; title=&#34;Spiegel@がんばらない&#34;&gt;@spiegel@fedibird.com &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bsky.app/profile/baldanders.info&#34; title=&#34;Spiegel&#34;&gt;@baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; でフィードを取得するには &lt;a href=&#34;https://github.com/mmcdole/gofeed&#34; title=&#34;mmcdole/gofeed: Parse RSS, Atom and JSON feeds in Go&#34;&gt;mmcdole/gofeed&lt;/a&gt; パッケージを使うのが便利。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20201003-feed-with-golang&#34;&gt;フィードを取得する Go 言語パッケージ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これでフィードを自動配信する仕組みも用意できたので，自ブログ以外に &lt;a href=&#34;https://github.com/goark&#34; title=&#34;Playing with Go Language&#34;&gt;github.com/goark&lt;/a&gt; で公開している自作パッケージの更新情報も自動投稿することにした。&lt;/p&gt;
&lt;p&gt;GitHub のリリース情報のフィードは以下の URL で取得できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://github.com/username/repositoryname/releases.atom
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自作パッケージの更新情報は以下のアカウントで自動投稿している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://goark.fedicity.net/@goark&#34; title=&#34;Goark (@goark@goark.fedicity.net) - Goark&#34;&gt;@goark@goark.fedicity.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bsky.app/profile/goark.bsky.social&#34; title=&#34;Goark&#34;&gt;@goark.bsky.social&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://goark.fedicity.net/&#34; title=&#34;Goark&#34;&gt;goark.fedicity.net&lt;/a&gt; については「&lt;a href=&#34;https://text.baldanders.info/remark/2023/12/personal-mastodon-server/&#34;&gt;個人用 Mastodon サーバを立てた&lt;/a&gt;」を参考にどうぞ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bsky.app/profile/goark.bsky.social&#34; title=&#34;Goark&#34;&gt;@goark.bsky.social&lt;/a&gt; は &lt;a href=&#34;https://github.com/goark/toolbox&#34; title=&#34;goark/toolbox: A collection of miscellaneous commands&#34;&gt;goark/toolbox&lt;/a&gt; の動作テスト用に取ったアカウントだけど，遊ばせておくのもナニなので半ボットとして運用することにした。
まぁ，今後もテスト用にゴミ投稿することもあると思うけど，そこはご容赦を（笑）&lt;/p&gt;
&lt;h2&gt;その他のフィードも配信するぞ&lt;/h2&gt;
&lt;p&gt;調子に乗って自作以外でお世話になっている &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; パッケージ（プロダクト）や &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 関連記事も以下のアカウントに自動投稿することにした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://goark.fedicity.net/@goark&#34; title=&#34;Goark (@goark@goark.fedicity.net) - Goark&#34;&gt;@goark@goark.fedicity.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bsky.app/profile/osanpo.bsky.social&#34; title=&#34;Spiegel&#39;s crawler&#34;&gt;@osanpo.bsky.social&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://bsky.app/profile/osanpo.bsky.social&#34; title=&#34;Spiegel&#39;s crawler&#34;&gt;@osanpo.bsky.social&lt;/a&gt; は Bluesky のボット運用のために取ったアカウント。&lt;/p&gt;
&lt;p&gt;監視対象は以下のサイト（今後追加予定）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.dev/blog/&#34;&gt;The Go Blog - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/tools&#34;&gt;golang/tools: [mirror] Go Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/go-task/task&#34;&gt;go-task/task: A task runner / simpler Make alternative written in Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/goreleaser/goreleaser&#34;&gt;goreleaser/goreleaser: Deliver Go binaries as fast and easily as possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sashabaranov/go-openai&#34;&gt;sashabaranov/go-openai: OpenAI ChatGPT, GPT-3, GPT-4, DALL·E, Whisper API wrapper for Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/anchore/syft&#34;&gt;anchore/syft: CLI tool and library for generating a Software Bill of Materials from container images and filesystems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golangci/golangci-lint&#34;&gt;golangci/golangci-lint: Fast linters Runner for Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tinygo-org/tinygo&#34;&gt;tinygo-org/tinygo: Go compiler for small places. Microcontrollers, WebAssembly (WASM/WASI), and command-line tools. Based on LLVM.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pelletier/go-toml&#34;&gt;pelletier/go-toml: Go library for the TOML file format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nyaosorg/go-readline-ny&#34;&gt;nyaosorg/go-readline-ny: Readline library for golang , used in nyagos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hymkor/go-multiline-ny&#34;&gt;hymkor/go-multiline-ny: Readline package supporting multi-lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rs/zerolog&#34;&gt;rs/zerolog: Zero Allocation JSON Logger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/uber-go/zap&#34;&gt;uber-go/zap: Blazing fast, structured, leveled logging in Go.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに調子に乗って &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 関連以外にも私の関心領域にかかる情報も収集・投稿することにした。
投稿先は以下の通り：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://goark.fedicity.net/@osanpo&#34; title=&#34;Spiegel&#39;s Crawler (@osanpo@goark.fedicity.net) - Goark&#34;&gt;@osanpo@goark.fedicity.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bsky.app/profile/osanpo.bsky.social&#34; title=&#34;Spiegel&#39;s crawler&#34;&gt;@osanpo.bsky.social&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;監視対象は以下のサイト（今後追加予定）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.schneier.com/&#34;&gt;Schneier on Security&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/index.html&#34;&gt;情報セキュリティ | IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jpcert.or.jp/&#34;&gt;JPCERT コーディネーションセンター&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/&#34;&gt;piyolog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ubuntu.com/security/notices&#34;&gt;Security notices | Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nist.gov/&#34;&gt;National Institute of Standards and Technology&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://p2ptk.org/&#34;&gt;P2Pとかその辺のお話R | Sharing is Caring&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/blog/&#34;&gt;Blog - Creative Commons&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.flickr.org/&#34;&gt;Flickr Foundation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nao.ac.jp/&#34;&gt;国立天文台（NAOJ）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://eco.mtk.nao.ac.jp/koyomi/&#34;&gt;国立天文台 天文情報センター 暦計算室&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.publickey1.jp/&#34;&gt;Publickey － Enterprise IT × Cloud Computing × Web Technology / Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mathjax.org/&#34;&gt;MathJax | Beautiful math in all browsers.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.thunderbird.net/&#34;&gt;The Thunderbird Blog -&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mattn.kaoriya.net/&#34;&gt;Big Sky&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nyaosorg/nyagos&#34;&gt;nyaosorg/nyagos: NYAGOS - The hybrid Commandline Shell between UNIX &amp;amp; DOS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo&#34;&gt;gohugoio/hugo: The world’s fastest framework for building websites.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tailscale/tailscale&#34;&gt;tailscale/tailscale: The easiest, most secure way to use WireGuard and 2FA.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/koki-develop/gat&#34;&gt;koki-develop/gat: 🐱 cat alternative written in Go.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mermaid-js/mermaid&#34;&gt;mermaid-js/mermaid: Generation of diagrams like flowcharts or sequence diagrams from text in a similar manner as markdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;microsoft/vscode: Visual Studio Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/plantuml/plantuml&#34;&gt;plantuml/plantuml: Generate diagrams from textual description&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot&#34;&gt;spring-projects/spring-boot: Spring Boot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/keepassxreboot/keepassxc&#34;&gt;keepassxreboot/keepassxc: KeePassXC is a cross-platform community-driven port of the Windows application “Keepass Password Safe”.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上のリスト（の一部）は元々 &lt;a href=&#34;https://text.baldanders.info/remark/2017/01/slack/&#34; title=&#34;いまさら聞けない Slack の使い方&#34;&gt;Slack 上で監視&lt;/a&gt;していたものだが，プライベートでも仕事でもあまり Slack を使わなくなったので（仕事では主に Teams） Mastodon/Bluesky に移行することにしたのだ。
ただ，今までの反省で，やたら滅多とフィードを食い散らかして自 TL を埋め尽くすのは嬉しくないので，流量についてはチューニングしながら運用する予定である。&lt;/p&gt;
&lt;p&gt;本来はフィードのチェックは Feedly とか使うべきだし，本当によく見るものだけに厳選したい。
特に青空文庫（&lt;a href=&#34;https://bsky.app/profile/aozorabunko.bsky.social&#34; title=&#34;青空文庫(Aozora Bunko)&#34;&gt;@aozorabunko.bsky.social&lt;/a&gt;）とか，自身でブログ記事の更新情報を積極的に上げておられるユーザとかのフィードは外している。&lt;/p&gt;
&lt;h2&gt;今後は&amp;hellip;&lt;/h2&gt;
&lt;p&gt;今の &lt;a href=&#34;https://github.com/goark/toolbox&#34; title=&#34;goark/toolbox: A collection of miscellaneous commands&#34;&gt;goark/toolbox&lt;/a&gt; ってフィード情報をキャッシュするのにテキストファイルを使ってるんだよな。
これだとそろそろ耐えられない気がするので SQLite を導入するかなぁ。&lt;/p&gt;
&lt;p&gt;Pure &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; で実装するならこのあたりか？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/glebarez/go-sqlite&#34;&gt;glebarez/go-sqlite: pure-Go SQLite driver for Go (SQLite embedded)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/glebarez/sqlite&#34;&gt;glebarez/sqlite: The pure-Go SQLite driver for GORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/moul/zapgorm2&#34;&gt;moul/zapgorm2: ⚡ zap logging driver for gorm v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mpalmer/gorm-zerolog&#34;&gt;mpalmer/gorm-zerolog: Alternative logging with Zerolog for GORM ⚡️&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁ，ぼちぼちやろう。&lt;/p&gt;
&lt;p&gt;Twitter ？ 知らんですよ。
IFTTT にも金を払う気はないし，向こうでの活動は最小限に留めたい。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/mattn/articles/7ac25f3328bde3&#34;&gt;RSS/Atom フィードを Twitter/Nostr にポストする小さいプログラムを書いた。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41dClAl3WKL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Jon Bodner (著), 武舎 広幸 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2022-09-26&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;2021年に出た “&lt;a href=&#34;https://www.oreilly.com/library/view/learning-go/9781492077206/&#34;&gt;Learning Go&lt;/a&gt;” の邦訳版。私は&lt;a href=&#34;https://www.oreilly.co.jp/books/9784814400041/&#34;&gt;版元&lt;/a&gt;で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-10-11&#34;&gt;2022-10-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 初めてのGo言語 --&gt;
</content>
	</entry><entry>
		<title>『はじめて学ぶ ビデオゲームの心理学』は読んどけ！</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2023/04/the-psychology-of-video-games/" />
		<id>tag:text.Baldanders.info,2023-04-09:/remark/2023/04/the-psychology-of-video-games/</id>
		<published>2023-04-09T12:31:30+00:00</published>
		<updated>2023-04-09T23:19:48+00:00</updated>
		<summary>ユーザーはバカではない。賢くなろうよ</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX） | セリア ホデント, 山根 信二, 成田 啓行 |本 | 通販 | Amazon&#34;&gt;はじめて学ぶ ビデオゲームの心理学&lt;/a&gt;』をようやく読み終わった。
ついでに 2023-04-08 に著者の Celia Hodent さんを招待して開催された &lt;a href=&#34;https://www.igda.jp/2023/03/20/13647/&#34; title=&#34;『はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX）』特別ウェビナー(4/8) | 国際ゲーム開発者協会日本&#34;&gt;Webinar&lt;/a&gt; も観た。&lt;/p&gt;
&lt;p&gt;本を手にした第一印象は「字がデカい」「ページ数が薄い（巻末の日本語版解説も併せて184ページしかない）」であった（いや，書く方も翻訳する方も凄い労力だと思うけど）。
私はスキマ時間にチマチマ読んでたので比較的時間がかかったが，メモを取りながらでも1日あれば読める分量だよね。
この本はつまみ食い的に読むのではなく，第1章から順に読んでいくことを強くお勧めする。&lt;/p&gt;
&lt;p&gt;念のために言うと，私はゲームデザイナーでもゲームエンジニアでもない。
ゲームは好きだが，少なくとも社会人になってからはコンシューマー機オンリーだったし，テレビを捨ててからはスマホゲームをスキマ時間でやる程度の雑魚ゲーマーである。
そりゃあ学生時代は可処分時間が有り余ってたし，田舎は娯楽が少ないからゲーセンも通ってたし，なんなら発売日にドラクエを買うためにデパート前の行列に並んでたクチですよ。
それも今は昔。&lt;/p&gt;
&lt;p&gt;じゃあ，なんでこの本に興味を持ったかというと，サブタイトルにある「ユーザー体験（UX）」の単語に惹かれたから。&lt;/p&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX） | セリア ホデント, 山根 信二, 成田 啓行 |本 | 通販 | Amazon&#34;&gt;はじめて学ぶ ビデオゲームの心理学&lt;/a&gt;』にも書かれているが， UX (User eXperience) って UI (User Interface) とは違うのよ。
たとえば最近だと， IPA が自身のサイト構成を一新した際に旧コンテンツのリンクが切れまくって IT 業界が阿鼻叫喚になった話がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1490762.html&#34;&gt;大量のリンク切れをIPAが謝罪 ～重要コンテンツは原則、全件リダイレクトへ - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しいサイトデザインが UI 的にどれだけ優れているのか知らないが， UX 的には既存ユーザーをぶった切る「（悪意はなくとも）悪い UX」事例と言える。&lt;/p&gt;
&lt;p&gt;あるいはネットサービスの「あるある話」で，どこぞのサブスクリプション・サービスとかに退会機能がないかめちゃめちゃ分かりにくい場所にあってユーザーにストレスを与えるって&lt;a href=&#34;https://baldanders.info/blog/000709/&#34; title=&#34;NIKKEI is Worst of Worsts. もしくは「無料（ただ）より高くつくものはない」 — Baldanders.info&#34;&gt;事例&lt;/a&gt;があるよね。
これも「悪い UX」か，意図的であれば「（悪意ある）ダークパターン」って奴だ。&lt;/p&gt;
&lt;p&gt;じゃあ，そういう「悪い UX」や「ダークパターン」を避けるにはどういう設計をすればいいの？ 心理学や社会学の専門家に（お金を払って）来てもらってアドバイスしてもらえばいいの？ って話になる。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ほかのテクノロジー業界（特にソーシャルメディア）に比べて、ゲーム業界がいくらか先に進んでいる点があります。それは、オンラインのマルチプレイゲームのなかで、反社会的な行為（被害者にとって有害と感じられる行動）から、できるだけプレイヤーの安全を守る対策を備えていることです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『はじめて学ぶ ビデオゲームの心理学』 p.63&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;つまり，ゲーム開発・運用における UX 実践&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; を見ていくことで，ゲーム以外のソフトウェア製品やサービス（特に SNS）にもヒントになるようなものがあるんじゃないか。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ドナルド・ノーマン（大きな影響力をもつ『誰のためのデザイン？ —— 認知科学者のデザイン原論』（Norman, 1990）の著者）は「ユーザー体験（UX：user experience）」という単語を提唱し、製品やそのエコシステム（マーケティング、ウェブサイト、顧客サービスなど）にユーザーが関与するときの体験全般を考えるという方針を示しました。そのため、企業やグローバル戦略も UX に含まれます。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『はじめて学ぶ ビデオゲームの心理学』 p.34&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これって私が最近読んでいる&lt;a href=&#34;https://text.baldanders.info/remark/2022/05/competing-with-unicorns/&#34; title=&#34;『ユニコーン企業のひみつ』読書会（1）&#34;&gt;『ユニコーン企業のひみつ』&lt;/a&gt;や&lt;a href=&#34;https://text.baldanders.info/remark/2023/02/peopleware/&#34; title=&#34;『ピープルウエア』を借りて流し読む&#34;&gt;『ピープルウエア』&lt;/a&gt;なんかにも通じる話だよね。
個人が趣味や余暇でやってるようなものはともかく，企業が開発・運用する製品（サービス）は，どうやっても「チーム戦」になる。
突出したスーパープログラマ（笑）が職人技でプロダクトを組む時代ではないのだ。
それもエンジニアだけじゃなく，プロダクトオーナーやその上の経営者や，ときにはその筋の専門家をも巻き込んだ「総力戦」だ。
そのような状況で上手く製品のイテレーションを繰り返すには「文化が重要」（『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』p.152）というわけ。&lt;/p&gt;
&lt;p&gt;もっとも『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』や『&lt;a href=&#34;https://www.amazon.co.jp/dp/4822285243?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ピープルウエア&lt;/a&gt;』はチーム内あるいは職場内の環境や文化にフォーカスしているが『&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX） | セリア ホデント, 山根 信二, 成田 啓行 |本 | 通販 | Amazon&#34;&gt;はじめて学ぶ ビデオゲームの心理学&lt;/a&gt;』は「誰の方を向いて仕事をするのか」といったことにフォーカスしていると言える。
そして，それはもちろん「顧客（ユーザー）」の方を向いていなければならない。
考えてみれば当たり前の話なんだけどね。
SF作家の Cory Doctorow さんも言ってるじゃない。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://p2ptk.org/monopoly/4366&#34;&gt;プラットフォームはこのように滅びていく。まず、ユーザにとって良き存在になる。次に、ビジネス顧客にとって良き存在になるために、ユーザを虐げる。最後に、ビジネス顧客を虐げて、すべての価値を自分たちに向ける。そうして死んでいく。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://p2ptk.org/monopoly/4366&#34;&gt;メタクソ化するTiktok&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;って。&lt;/p&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX） | セリア ホデント, 山根 信二, 成田 啓行 |本 | 通販 | Amazon&#34;&gt;はじめて学ぶ ビデオゲームの心理学&lt;/a&gt;』では UX の実践について第2章で「UX マインドセット」と呼んで具体的に解説している。
「マインドセット」とは「個人やチームが確立したものの見方や考え方」（p.34）らしい。
この辺はゲーム関係者だけでなく，他のソフトウェア製品（サービス）の提供者も読んでおくべきだろう。&lt;/p&gt;
&lt;p&gt;第3章と第4章はビデオゲームの良い面と悪い面について「科学」的な視点から論じている。
「科学」というのは，宗教や信仰とは違い，トライ&amp;amp;エラーの繰り返しである。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;他の専門家から問題を指摘された論文が訂正されるのは正常な科学の営みだ。むしろ問題は、論文は撤回することができるが、その主張にもとづいた政策を取り消すのは論文撤回後も容易ではないということだ。したがってゲームに関する政策決定を行う際には、個々の主張にのみ注目するのではなく、学会（科学者集団）でどこまで合意が得られてどのような異論があるかもとりいれる必要がある。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『はじめて学ぶ ビデオゲームの心理学』 p.181-182&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;第3章と第4章は引用にあるような「政策決定を行う」人だけでなく子どもを持つ親とかゲーマー自身も読んでおくべきだろう。
子どもがある程度以上の年齢なら親子で読んで議論するのも面白いかも知れない。&lt;/p&gt;
&lt;p&gt;第5章は「ビデオゲーム業界の倫理」について。
この章で「悪い UX」や「ダークパターン」といった単語とその解説が登場する。&lt;/p&gt;
&lt;p&gt;たとえばルートボックス（いわゆる「ガチャ」のこと）について「未成年を標的にするルートボックスは、まちがいなく倫理に反しています」（p.143）と断言し，その理由として&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;脳の前頭前野という領域は25歳くらいまで発達を続けます。この脳領域は、衝動や自動的な行動の制御などに関与します。子どもや10代の青少年は前頭前野が未成熟なので、特定の状況で自動的に起きる反応を制御することが、大人に比べてはるかに大変です。このような脳の発達上の理由から、子どもはセルフコントロールが苦手ですし（大人が限度を決めてあげないとうまくいかないことがよくありますよね）、ティーンエージャーはリスクの高い行動をとる傾向が大人より強いのです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『はじめて学ぶ ビデオゲームの心理学』 p.143-144&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と解説している。&lt;/p&gt;
&lt;p&gt;特に，昨今流行りの Generative AI サービスの提供者は必見だと思う。
巷の論調だと LLM に常識や倫理観を求めようと躍起になってるように見えるが，本当に重要なのはサービスを利用するユーザーが常識的かつ倫理的な行動を取りやすいようサービス全体を設計していくことなんじゃないだろうか。
「完全に中立的なデザインは存在しない」（p.152）のなら，まずは提供する側が製品に対して一貫した倫理観を「マインドセット」していく必要がある。&lt;/p&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX） | セリア ホデント, 山根 信二, 成田 啓行 |本 | 通販 | Amazon&#34;&gt;はじめて学ぶ ビデオゲームの心理学&lt;/a&gt;』には「ゲームはルールによって行動を強制する」（p.153）とあるが，それはどんなサービスでも同じだろう。
適切なルール・メイキングとそれを（浪花節や刷り込みではなく）合理的に無理なく遵守させる仕組みが必要なのだ，と思ったり。&lt;/p&gt;
&lt;p&gt;あとゲーマー（あるいはその親）も第5章は読んでおくべきだろう。
ゲームの中で自分たちが何をしているのか（させられてるのか）自覚できればゲーム内での行動も変わってくるかも知れない。
2023-04-08 の &lt;a href=&#34;https://www.igda.jp/2023/03/20/13647/&#34; title=&#34;『はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX）』特別ウェビナー(4/8) | 国際ゲーム開発者協会日本&#34;&gt;Webinar&lt;/a&gt; で Celia Hodent さんが言っておられたが，ユーザーはバカではない。
経験を積み情報を得られれば賢く立ち回れるものである。
賢くなろうよ。&lt;/p&gt;
&lt;p&gt;私は，少なくとも職業エンジニアの&lt;ruby&gt;&lt;rb&gt;矜持&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;pride&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;は「善の実現」にあると思っている。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4344980158?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;
&lt;q&gt;理学は、真理の探究であり、工学は善の実現である。そして、藝術は美の表現である&amp;mdash;&amp;mdash;これで所謂「真美善」が揃う&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4344980158?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;はやぶさ―不死身の探査機と宇宙研の物語&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;でも，その場合「善って何？」という問題が常につきまとう。
『&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX） | セリア ホデント, 山根 信二, 成田 啓行 |本 | 通販 | Amazon&#34;&gt;はじめて学ぶ ビデオゲームの心理学&lt;/a&gt;』がその問題を照らす最初の取っ掛かりになることを期待したい。&lt;/p&gt;
&lt;p&gt;総評すれば『&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX） | セリア ホデント, 山根 信二, 成田 啓行 |本 | 通販 | Amazon&#34;&gt;はじめて学ぶ ビデオゲームの心理学&lt;/a&gt;』はみんな読んどけ！ ってことだな。
以上。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;年齢に関わらず、遊びは私たちの精神を鋭敏に保つために重要です。 [&amp;hellip;] 遊ぶことは学ぶことです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『はじめて学ぶ ビデオゲームの心理学』 p.71&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41Yi36OSUmL._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX）&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;セリア ホデント (著), 山根 信二 (監修), 成田 啓行 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;福村出版 2022-12-13&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4571210450 (ASIN), 9784571210457 (EAN), 4571210450 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;デジタル版が出そうもないので，諦めて紙の本を購入。ゲームデザイナやゲームエンジニアだけでなく，ソフトウェア・エンジニアは全員読むべき。あと，ゲーマーな人も読むといいよ。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2023/04/the-psychology-of-video-games/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2023-04-09&#34;&gt;2023-04-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- はじめて学ぶ ビデオゲームの心理学 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41cE5EmeezL._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Jonathan Rasmusson (著), 島田 浩二 (翻訳), 角谷 信太郎 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2021-04-26&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873119464 (ASIN), 9784873119465 (EAN), 4873119464 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;版元より&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873119465/&#34;&gt;電子版&lt;/a&gt;も出ている。 Google や Spotify のような「ユニコーン企業」はどのようにして「ミッション」を遂行しているのか。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-05-21&#34;&gt;2022-05-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ユニコーン企業のひみつ --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822285243?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51CFepapBZL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4822285243?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ピープルウエア 第3版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;トム・デマルコ (著), ティモシー・リスター (著), 松原友夫 (翻訳), 山浦恒央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2013-12-18&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4822285243 (ASIN), 9784822285241 (EAN), 4822285243 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;とりあえず図書館で借りて試し読みしたら面白かったので買うことにした。原書の初版が1987年ということで，当時の雰囲気が漂う感じ。アジャイルやスクラムなど現代につながる開発スタイルの源流とも言える本。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2023-02-12&#34;&gt;2023-02-12&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ピープルウエア Peopleware --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX） | セリア ホデント, 山根 信二, 成田 啓行 |本 | 通販 | Amazon&#34;&gt;はじめて学ぶ ビデオゲームの心理学&lt;/a&gt;』では UX を「実装」ではなく「実践」と書かれていたのが印象的だった。つまりシステム設計や実装に限る話ではないということだろう。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>ソフトウェア部品表（SBOM）を生成するツール</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2023/03/cli-tool-for-generating-sbom/" />
		<id>tag:text.Baldanders.info,2023-03-26:/remark/2023/03/cli-tool-for-generating-sbom/</id>
		<published>2023-03-26T07:07:29+00:00</published>
		<updated>2024-05-10T22:02:32+00:00</updated>
		<summary>Go 以外のエコシステムでも使える。 grype と組み合わせて脆弱性のチェックも可能，らいい。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; コードのビルドとリリースを一度にやってくれる &lt;a href=&#34;https://goreleaser.com/&#34;&gt;GoReleaser&lt;/a&gt; というツールがあるのだが，これの最近のバージョンはソフトウェア部品表（Software Bill of Materials; SBOM）も生成・リリースできるらしい。
というわけで，&lt;a href=&#34;https://github.com/goark/ml/releases/tag/v0.6.6&#34; title=&#34;Release v0.6.6 · goark/ml&#34;&gt;自作ツール&lt;/a&gt;でちょっと試してみた。&lt;/p&gt;
&lt;p&gt;設定自体は難しくなく &lt;code&gt;.goreleaser.yaml&lt;/code&gt; ファイルに以下の記述を追加すればいいだけのようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;sboms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;artifacts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;archive&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;早速この記述を追加して手元で動かしてみたのだが&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; • cataloging artifacts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    • cataloging                      artifact=dist/ml_SNAPSHOT-a83f2d0b1db0ade89d839cd70b6870cd90011f55_Windows_ARM64.zip cmd=syft sboms=ml_SNAPSHOT-a83f2d0b1db0ade89d839cd70b6870cd90011f55_Windows_ARM64.zip.sbom
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ⨯ release failed after 1s   error=cataloging artifacts: syft failed: exec: &amp;#34;syft&amp;#34;: executable file not found in $PATH: 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ふむむ？ &lt;code&gt;syft&lt;/code&gt; がないって言ってるのか？ 調べてみたら &lt;a href=&#34;https://github.com/anchore/syft&#34; title=&#34;anchore/syft: CLI tool and library for generating a Software Bill of Materials from container images and filesystems&#34;&gt;syft&lt;/a&gt; というのはこれのことらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/anchore/syft&#34;&gt;anchore/syft: CLI tool and library for generating a Software Bill of Materials from container images and filesystems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://goreleaser.com/&#34;&gt;GoReleaser&lt;/a&gt; は内部で &lt;a href=&#34;https://github.com/anchore/syft&#34; title=&#34;anchore/syft: CLI tool and library for generating a Software Bill of Materials from container images and filesystems&#34;&gt;syft&lt;/a&gt; を起動して SBOM を生成しているようだ。
SBOM を生成するための設定を &lt;code&gt;.goreleaser.yaml&lt;/code&gt; ファイルに記述する際の詳細情報は以下のページが参考になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://goreleaser.com/customization/sbom/&#34;&gt;Cataloging artifacts - GoReleaser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;つか，最初からマニュアルを読めっての！＞自分&lt;/p&gt;
&lt;p&gt;GitHub Actions の &lt;a href=&#34;https://github.com/goreleaser/goreleaser-action&#34; title=&#34;goreleaser/goreleaser-action: GitHub Action for GoReleaser&#34;&gt;goreleaser-action&lt;/a&gt; を使って SBOM を含むリリースを行う場合は，自前で &lt;a href=&#34;https://github.com/anchore/syft&#34; title=&#34;anchore/syft: CLI tool and library for generating a Software Bill of Materials from container images and filesystems&#34;&gt;syft&lt;/a&gt; をインストールする必要がある。
とはいえ  &lt;a href=&#34;https://github.com/goreleaser/goreleaser-action&#34; title=&#34;goreleaser/goreleaser-action: GitHub Action for GoReleaser&#34;&gt;goreleaser-action&lt;/a&gt; を使うなら &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; のコンパイラは事前に導入されているはずなので，簡単に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;v*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;permissions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;goreleaser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Checkout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Set up Go&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/setup-go@v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;go-version-file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;go.mod&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;install syft&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;go install github.com/anchore/syft/cmd/syft@latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Run GoReleaser&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;goreleaser/goreleaser-action@v4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# either &amp;#39;goreleaser&amp;#39; (default) or &amp;#39;goreleaser-pro&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;distribution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;goreleaser&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;release --clean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Your GoReleaser Pro key, if you are using the &amp;#39;goreleaser-pro&amp;#39; distribution&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;といった感じに &lt;code&gt;go install&lt;/code&gt; コマンドでインストールしてしまっても問題なく行けるっぽい。
でも，これをすると SBOM に &lt;a href=&#34;https://github.com/anchore/syft&#34; title=&#34;anchore/syft: CLI tool and library for generating a Software Bill of Materials from container images and filesystems&#34;&gt;syft&lt;/a&gt; のバージョンが入らなくなるんだよなぁ。
&lt;a href=&#34;https://github.com/anchore/sbom-action&#34; title=&#34;anchore/sbom-action: GitHub Action for creating software bill of materials using Syft.&#34;&gt;sbom-action&lt;/a&gt; と組み合わせればいいのだろうか。
要検証だな。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/anchore/syft&#34; title=&#34;anchore/syft: CLI tool and library for generating a Software Bill of Materials from container images and filesystems&#34;&gt;syft&lt;/a&gt; は &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 製だが &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; エコシステム専用というわけではなく，以下のものに対応しているらしい。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://github.com/anchore/syft/blob/main/README.md&#34;&gt;&lt;ul&gt;
&lt;li&gt;Alpine (apk)&lt;/li&gt;
&lt;li&gt;C (conan)&lt;/li&gt;
&lt;li&gt;C++ (conan)&lt;/li&gt;
&lt;li&gt;Dart (pubs)&lt;/li&gt;
&lt;li&gt;Debian (dpkg)&lt;/li&gt;
&lt;li&gt;Dotnet (deps.json)&lt;/li&gt;
&lt;li&gt;Objective-C (cocoapods)&lt;/li&gt;
&lt;li&gt;Elixir (mix)&lt;/li&gt;
&lt;li&gt;Erlang (rebar3)&lt;/li&gt;
&lt;li&gt;Go (go.mod, Go binaries)&lt;/li&gt;
&lt;li&gt;Haskell (cabal, stack)&lt;/li&gt;
&lt;li&gt;Java (jar, ear, war, par, sar, native-image)&lt;/li&gt;
&lt;li&gt;JavaScript (npm, yarn)&lt;/li&gt;
&lt;li&gt;Jenkins Plugins (jpi, hpi)&lt;/li&gt;
&lt;li&gt;PHP (composer)&lt;/li&gt;
&lt;li&gt;Python (wheel, egg, poetry, requirements.txt)&lt;/li&gt;
&lt;li&gt;Red Hat (rpm)&lt;/li&gt;
&lt;li&gt;Ruby (gem)&lt;/li&gt;
&lt;li&gt;Rust (cargo.lock)&lt;/li&gt;
&lt;li&gt;Swift (cocoapods)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://github.com/anchore/syft/blob/main/README.md&#34;&gt;syft/README.md at main · anchore/syft&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;んー。
メジャーどころは網羅してる感じ？&lt;/p&gt;
&lt;p&gt;他にも &lt;a href=&#34;https://github.com/anchore/grype&#34; title=&#34;anchore/grype: A vulnerability scanner for container images and filesystems&#34;&gt;grype&lt;/a&gt; と組み合わせることで脆弱性のチェックとかもできるし，その結果を証明書として作成して発行することもできるそうな。
私が公開しているような小物パッケージではそこまで不要だろうが，企業とかが運用している，それなりに規模の大きなプロジェクトでは重宝するかもしれない。&lt;/p&gt;
&lt;p&gt;覚えておこう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://wirelesswire.jp/2023/03/84355/&#34;&gt;米国の国家サイバーセキュリティ戦略とインフラとしてのオープンソース – WirelessWire News&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20220402-how-go-mitigates-supply-chain-attacks&#34;&gt;Go はどのようにしてサプライチェーン攻撃を低減しているか&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/08/software-bills-of-materials/&#34;&gt;オープンソース製品とソフトウェア部品表&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B09C2XBC2F?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/31PDIZXO9tL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B09C2XBC2F?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;デベロッパーゴースーパーゴラン Tシャツ&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Geek Go Super Golang Tees&lt;/dd&gt;
    &lt;dd&gt;ウェア&amp;amp;シューズ&lt;/dd&gt;
    &lt;dd&gt;B09C2XBC2F (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;ついカッとなってポチった。反省はしない&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-04-10&#34;&gt;2022-04-10&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Golang Tシャツ --&gt;
</content>
	</entry>
</feed>
