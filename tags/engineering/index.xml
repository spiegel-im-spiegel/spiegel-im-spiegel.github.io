<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of engineering - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/engineering/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/engineering/index.xml" />
	<id>tag:text.Baldanders.info,2020-10-05:/tags</id>
	<updated>2020-10-05T15:39:17+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>AI はコピペ・プログラマを救うか</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/10/programming-with-artificial-intelligence/" />
		<id>tag:text.Baldanders.info,2020-10-05:/remark/2020/10/programming-with-artificial-intelligence/</id>
		<published>2020-10-05T06:39:17+00:00</published>
		<updated>2020-10-05T22:53:08+00:00</updated>
		<summary>2年前に「AI 時代に真っ先に駆逐される職業は（コピペ）プログラマなんじゃないだろうか」と書いたが，考え直すべき時かもしれない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ガートナーが発表するハイプ・サイクルによると&lt;a href=&#34;https://www.publickey1.jp/blog/20/5gdevops2020.html&#34; title=&#34;日本において、5Gやエッジコンピューティングは過度な期待、DevOpsは幻滅期。ガートナー「日本における未来志向型インフラ・テクノロジのハイプ・サイクル：2020年」を発表 － Publickey&#34;&gt;日本でも「人工知能」そのものはとっくに幻滅期&lt;/a&gt;に入っているわけだが，最近いくつか面白い記事を見かけたので，覚え書きとしてちょろんと書いておく。&lt;/p&gt;
&lt;h2&gt;「AI がしたこと」の責任は誰が取るのか&lt;/h2&gt;
&lt;p&gt;まずはこれ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://news.yahoo.co.jp/byline/kuriharakiyoshi/20200721-00189305/&#34;&gt;リツイートしただけで著作者人格権を侵害し得るという判決が最高裁で確定(栗原潔) - 個人 - Yahoo!ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微妙に釣りタイトルだが（笑），かいつまんで書くとこんな感じ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;「無断転載禁止」の写真を無断で tweet した馬鹿がいた&lt;/li&gt;
&lt;li&gt;さらにその「無断 tweet」を retweet した人がいた（意図は不明）&lt;/li&gt;
&lt;li&gt;Retweet のプレビューは自動でトリミング表示され写真端のクレジット表記が隠される&lt;/li&gt;
&lt;li&gt;写真の著作者側は，プレビューのトリミング表示は著作者人格権の侵害である，として retweet したユーザの情報開示を Twitter に求める&lt;/li&gt;
&lt;li&gt;Twitter 側は「プレビューのトリミングは表示上だけの問題だからいんじゃね？」と拒否したため訴訟に発展&lt;/li&gt;
&lt;li&gt;知財高裁で Twitter 側が負けたので最高裁へ上告&lt;/li&gt;
&lt;li&gt;最高裁は「プレビューのトリミング表示でも著作者人格権の侵害になりうる」と判断し上告を棄却&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;実際に侵害となるかどうかは別の事案になるだろう。&lt;/p&gt;
&lt;p&gt;日本における強すぎる著作者人格権や最高裁の判断については色々思うところがあるだろうが，それについては今は置いておいて，この結果 Twitter 側がどうしたか，である。
それがおそらくこの記事になるんだと思う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/10/04/2020-10-02-twitter-may-let-users-choose-how-to-crop-image-previews-after-bias-scrutiny/&#34;&gt;Twitterは投稿時の画像プレビューのトリミング方法をユーザーに委ねる方針へ  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;元が米国の記事なので人種差別に絡めて書いてあるが，日本人から見れば上の判決の直後だけに，この影響がないとは思わないだろう（笑）&lt;/p&gt;
&lt;p&gt;まぁ人種差別に絡めた話でも同じ結論だと思うが，要するに「『AI がしたこと』の責任は誰が取るのか」ってことだよね。&lt;/p&gt;
&lt;p&gt;AI に「製造物責任」は問えないんだから，その「責任」の所在は人間側にシフトせざるを得ない。
でもサービス・プロバイダはそんな「責任」は取りたくないので「じゃあユーザに押し付けちゃえばいいぢゃん」となる，当然ながら。&lt;/p&gt;
&lt;p&gt;その結果「プレビューのトリミングは君らが決めてくれ」となったわけだ。
その判断のフィードバックは当然行うんだろうけど。
監視資本主義社会だからね（笑）&lt;/p&gt;
&lt;p&gt;実に分かりやすい。&lt;/p&gt;
&lt;h3&gt;「AI が書いたコード」の責任は誰が取るのか&lt;/h3&gt;
&lt;p&gt;同じことはプログラム・コードにも言えるだろう。&lt;/p&gt;
&lt;p&gt;ライセンスでコード自体を「無保証」としても，そのコードで損害が発生したら誰かがそのペナルティを払わなくちゃいけない。
「AI が書いたコード」だから誰もペナルティを払わなくていい，とはならないはずだ。&lt;/p&gt;
&lt;p&gt;であれば，現在および現在の延長線上の未来において「AI がコードを書く」ことはないんじゃないだろうか。
技術的な可能性の有無は別として。&lt;/p&gt;
&lt;h2&gt;AI はコピペ・プログラマを救うか&lt;/h2&gt;
&lt;p&gt;というわけで次の記事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/radar/pair-programming-with-ai/&#34;&gt;Pair Programming with AI – O’Reilly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20201005/pair-programming-with-ai&#34;&gt;AIとのペアプログラミングは可能だろうか？ - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この中の以下の部分（引用の引用でゴメンペコン）&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;そのソリューションはおそらく IDE に組み込まれるだろう。プログラマがやりたいことを、不正確で曖昧な英語でざっと記述することで始める。AI はその解決策がどんなものになるか、おそらくは疑似コードみたいなスケッチでそれに応える。それを受けてプログラマは、豊富なコード補完機能（つまりそう、GitHub とかそうしたものにあるすべてのコードを学習したモデルに基づく）を使って実際のコードを埋めて書き継ぐわけだ&lt;/q&gt;。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20201005/pair-programming-with-ai&#34;&gt;AIとのペアプログラミングは可能だろうか？&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;を見て「それなんてエキスパートシステム？」って思ってしまったのだが（笑）&lt;/p&gt;
&lt;p&gt;もう少し踏み込んで考えると，現在でも「インプットしたコードに対して何らかのアウトプットを返す」仕組みはあるわけだ。
それこそ上の記事でも紹介されている &lt;a href=&#34;https://visualstudio.microsoft.com/ja/services/intellicode/&#34; title=&#34;Visual Studio IntelliCode | Visual Studio - Visual Studio&#34;&gt;Visual Studio IntelliCode&lt;/a&gt; とか。
最近話題の &lt;a href=&#34;https://iamninad.com/github-code-scanning/&#34;&gt;GitHub Code Scanning&lt;/a&gt; の中核である &lt;a href=&#34;https://securitylab.github.com/tools/codeql&#34; title=&#34;CodeQL - GitHub Security Lab&#34;&gt;CodeQL&lt;/a&gt; も確か AI ベースである。&lt;/p&gt;
&lt;p&gt;しかし，今だに「コードでないところからコードを生み出す」ことはできてない。
「ノーコード」だって「ロジックの表現がコードではない」というだけで，ロジック自体は人間が考えなきゃならないし，そのロジックを動かすためのコードは（別の）人間が書かなきゃならない。&lt;/p&gt;
&lt;p&gt;「プログラマがやりたいことを、不正確で曖昧な英語でざっと記述」したものをコードに「翻訳」してくれる AI が登場するとして，それで誰が一番得をするか考えたら，それはコピペ・プログラマじゃないだろうか。&lt;/p&gt;
&lt;p&gt;だってコピペ・プログラミングで一番苦労するのは「コピー元」を探すことだから。
それを AI が肩代わりしてくれるんだよ。
コピペ・コード同士の整合性も AI が指摘してくれるだろう。
スキルも不要。
何故ならスキルの蓄積は人間ではなく AI の仕事になるから。&lt;/p&gt;
&lt;p&gt;AI がコードを書くことは（主に人間側の都合で）ない。
だがプログラミングに必要な道具（ロジックやコード）や提案は AI が用意してくれる。&lt;/p&gt;
&lt;p&gt;こうなると「よいプログラマ」の条件は「AI への質問が上手い人」になるかもしれない。
件の記事は機械が人間に寄り添うことを期待しているようにも読めるが，相手に合わせるのが得意なのは人間のほうだからね（笑）&lt;/p&gt;
&lt;p&gt;2年前に「&lt;a href=&#34;https://text.baldanders.info/remark/2018/06/fizz-buzz/&#34;&gt;AI 時代に真っ先に駆逐される職業は（コピペ）プログラマなんじゃないだろうか&lt;/a&gt;」と書いたが，考え直すべき時かもしれない。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621045938?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51XGP8AFX2L._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621045938?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;いかにして問題をとくか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;G. ポリア (著), Polya,G. (原著), 賢信, 柿内 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善 1975-04-01&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4621045938 (ASIN), 9784621045930 (EAN), 4621045938 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-26&#34;&gt;2014-09-26&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- いかにして問題をとくか --&gt;
</content>
	</entry><entry>
		<title>本当は怖い Blockchain</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/10/blockchain-horror/" />
		<id>tag:text.Baldanders.info,2020-10-04:/remark/2020/10/blockchain-horror/</id>
		<published>2020-10-04T01:21:50+00:00</published>
		<updated>2020-10-04T01:46:00+00:00</updated>
		<summary>Blockchain による不正と腐敗</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;なんか Twitter の TL を眺めていると不穏な話ばかり流れてくるのだが，そもそも「デジタル庁」なるものは最初の1フィートで間違えている印象である。
その中でも気になるのが Blockchain が云々とかいう話で，老婆心ながらこの記事でも言及しておく。&lt;/p&gt;
&lt;p&gt;そもそも Blockchain は「通貨」の性質を持つデジタル・トークンの「取引」を扱うための仕組みで，本来は他に転用できない。
トークンが「通貨」の性質を持つことに意味があるからだ。&lt;/p&gt;
&lt;p&gt;では，それ以外の部分で Blockchain の特徴と言えるものをいくつか挙げると&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;追記型データベースで，追記&lt;strong&gt;された&lt;/strong&gt;データについて完全性（integrity）を保証する&lt;/li&gt;
&lt;li&gt;PoW (Proof-of-Work) によって追記&lt;strong&gt;する&lt;/strong&gt;データが正しい（誤りがない）ことを保証する&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;ul&gt;
&lt;li&gt;PoW の対価として「通貨」の性質を持つデジタル・トークンを振り出す（または手数料を払う）&lt;/li&gt;
&lt;li&gt;PoW の結果の正しさは多数決で保証する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非中央集権型（decentralization）かつ peer-to-peer なシステム構成を前提とする&lt;/li&gt;
&lt;li&gt;不特定多数が参加することを前提とする&lt;/li&gt;
&lt;li&gt;データベースのコピーは自由だが分岐（fork）は無用&lt;/li&gt;
&lt;li&gt;公開鍵を ID としてそのまま用い，鍵の証明（certification）を行わない&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;といったところだろうか。&lt;/p&gt;
&lt;p&gt;なお，3番目から5番目までは2番目の PoW を達成するための要件である点に注意。
まぁ Blockchain 本家である Bitcoin は既に3番目と5番目の要件が瓦解しているのだが（笑）&lt;/p&gt;
&lt;p&gt;6番目についてもう少し詳しく書くと Blockchain は ID となる公開鍵が誰に帰属するかについて全く関知しない。
Blockchain が気にするのは取引履歴の一貫性と無矛盾性であり，この要件が達成されているなら取引を行ったのが「誰か」なんてどうでもいいのだ&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;しかし実際には取引の主体となる「誰か」という情報は最重要であると言っていい。
したがって ID と「誰か」を関連付ける別の仕掛けが必要となる。
たとえば「ウォレット・サービス」とか「交換所」とか。&lt;/p&gt;
&lt;p&gt;Blockchain で「取引」を追記するためには当事者の秘密鍵で電子署名する必要があり，もし「交換所」等でそれを肩代わりしてもらうなら秘密鍵を預けなければならない（key escrow）。
まぁ銀行に通帳とキャッシュカードを預けるみたいなもんだね。
鬼畜（笑）&lt;/p&gt;
&lt;p&gt;さて，ここで問題。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中央集権的またはアクターが構造化されたシステム&lt;/li&gt;
&lt;li&gt;特定の「誰か」のみシステム内部にコミットできる&lt;/li&gt;
&lt;li&gt;データの分岐（fork）を許容する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という3条件のいずれかの下で Blockchain を応用したシステムを導入したら何が起きるか。&lt;/p&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;正解は「不正」と「腐敗（不正の常態化）」。
何故なら PoW 達成要件を満たさないから。&lt;/p&gt;
&lt;p&gt;行政システムなんてまさに上の3条件に当てはまるよね。
それで Blockchain を導入するとか，システムとして「不正」と「腐敗」を許容する，と言っているに等しい。&lt;/p&gt;
&lt;p&gt;あー，コワイコワイ。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/02/blockchain-and-trust-by-bruce-schneier/&#34;&gt;“Blockchain and Trust” by Bruce Schneier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20200925-pubkey-and-seckey&#34;&gt;公開鍵暗号の秘密鍵は絶対に渡してはならない（フリじゃないよ） | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;NTT出版 2013-12-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-28&#34;&gt;2015-11-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 信頼と裏切りの社会 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;PoW の代替となる PoS (Proof-of-Stake) というのもあるが，ここでは割愛する。 PoS をザクッと説明すると「金持ち（の行動）は信用できる」とする仕組みだ。その通貨システムの「金持ち」なら不正をしてまで信用を破壊しないだろうという，ある意味で性善説（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Bitcoin/Blockchain の「公開鍵が誰に帰属するかについては全く関知しない」という特徴を以って，これを匿名的なサービスと言っていた人も昔はいたが， Blockchain の外側で ID (＝公開鍵) とそれが帰属する「誰か」を紐付けることができるなら， Blockchain を解析してその「誰か」がしたことは分かるわけだ。実際にそういう調査を行う会社とかも存在する。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>golangci-lint を GitHub Actions で使う</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/using-golangci-lint-action/" />
		<id>tag:text.Baldanders.info,2020-09-29:/golang/using-golangci-lint-action/</id>
		<published>2020-09-29T02:20:19+00:00</published>
		<updated>2020-09-30T07:22:49+00:00</updated>
		<summary>これで pull request 時に golangci-lint が走る。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://golangci-lint.run/&#34;&gt;golangci-lint&lt;/a&gt; は &lt;code&gt;go vet&lt;/code&gt; をはじめ複数の lint を集約して結果を表示してくれる優れものである。
かつては GolangCI.com で &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; と連携できていたのだが，&lt;a href=&#34;https://medium.com/golangci/golangci-com-is-closing-d1fc1bd30e0e&#34; title=&#34;GolangCI.com is closing. Dear customers of GolangCI.com, | by Denis Isaev | golangci | Medium&#34;&gt;2020年4月でサービスが停止&lt;/a&gt;してしまい，寂しい限り。&lt;/p&gt;
&lt;p&gt;と思っていたのだが，いつの間にか公式の &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; Actions が用意されていた。
気付かなんだよ。
不覚。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golangci/golangci-lint-action&#34;&gt;golangci/golangci-lint-action: Official GitHub action for golangci-lint from it&amp;rsquo;s authors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使い方は簡単。
リポジトリの &lt;code&gt;.github/workflows/&lt;/code&gt; ディレクトリに YAML ファイル（例えば &lt;code&gt;lint.yml&lt;/code&gt;）を置き，以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;golangci-lint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;v*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pull_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;golangci&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;go-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.15&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;.x]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest, macos-latest, windows-latest]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;lint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ matrix.os }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;golangci-lint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;golangci/golangci-lint-action@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1.31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Optional: working directory, useful for monorepos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# working-directory: somedir&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Optional: golangci-lint command line arguments.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# args: --issues-exit-code=0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Optional: show only new issues if it&amp;#39;s a pull request. The default value is `false`.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# only-new-issues: true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また，リポジトリ直下の &lt;code&gt;.gitattributes&lt;/code&gt; ファイルに以下の記述を追加する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;*.go text eol=lf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで pull request 時， &lt;code&gt;master&lt;/code&gt; ブランチ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; への push 時，およびバージョンタグを打った際に &lt;a href=&#34;https://golangci-lint.run/&#34;&gt;golangci-lint&lt;/a&gt; が走る。
&lt;a href=&#34;https://golangci-lint.run/&#34;&gt;golangci-lint&lt;/a&gt; は &lt;code&gt;matrix&lt;/code&gt; の組み合わせで並列処理されるようだ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./reviews-in-pr.png&#34;&gt;&lt;img src=&#34;./reviews-in-pr.png&#34; srcset=&#34;./reviews-in-pr.png 867w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;p&gt;まぁ，プラットフォーム依存のコードでもない限り &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 最新バージョンの &lt;code&gt;ubuntu-latest&lt;/code&gt; だけでいいと思うけどね。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golangci/golangci-lint&#34;&gt;golangci/golangci-lint: Fast linters Runner for Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/donot-sleep-through-life/&#34;&gt;golangci-lint に叱られる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;2020年10月から &lt;a href=&#34;https://text.baldanders.info/remark/2020/08/renaming-default-branch-name-in-github-repositries/&#34; title=&#34;GitHub リポジトリの既定ブランチ名が main になるらしい&#34;&gt;GitHub の新規リポジトリの既定ブランチ名が &lt;code&gt;main&lt;/code&gt; になるらしい&lt;/a&gt;。ご注意を。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>個人番号と個人番号カード</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/my-number-and-my-number-card/" />
		<id>tag:text.Baldanders.info,2020-09-21:/remark/2020/09/my-number-and-my-number-card/</id>
		<published>2020-09-21T10:30:40+00:00</published>
		<updated>2020-09-22T03:24:59+00:00</updated>
		<summary>「個人番号」と「個人番号カード」の問題は（関連してるけど）きちんと切り分けて考えないとワケワカメになる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どうしても TL に脊髄反射コメントを書いてしまう。&lt;/p&gt;
&lt;p&gt;というわけで。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.com/yoshiaono/n/n4cd37820faf0&#34;&gt;いろいろおかしいマイナンバーカード｜青野慶久@サイボウズ｜note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;気持ちは分かる。
共感できる。&lt;/p&gt;
&lt;p&gt;だが「個人番号」と「個人番号カード」の問題は（関連してるけど）きちんと切り分けて考えないとワケワカメになる。&lt;/p&gt;
&lt;h2&gt;「個人番号」の問題&lt;/h2&gt;
&lt;p&gt;「個人番号」の問題は，ひとことで言うなら（ゼロ年代に議論になった）&lt;a href=&#34;http://www.hyuki.com/techinfo/uniqid.html&#34; title=&#34;固有IDのシンプル・シナリオ&#34;&gt;固有 ID の問題&lt;/a&gt;である。&lt;/p&gt;
&lt;p&gt;ID (Identity) には有効な「目的」と「範囲」と「期間」が必ずある。
これを逸脱するとセキュリティおよびプライバシーの問題となる。&lt;/p&gt;
&lt;p&gt;ゼロ年代に批判された「住基番号」問題の核心は，目的と範囲と期間を超えて（認証および許可トークンとして）単一の ID を使いまわしていることだ。
そして個人番号でも，当時の批判から何も学ぶことなく同じ失敗を繰り返している。&lt;/p&gt;
&lt;p&gt;昨今あたり前になりつつある「&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/nist-sp-800-207-zero-trust-architecture/&#34; title=&#34;NIST SP 800-207: “Zero Trust Architecture”&#34;&gt;セロトラスト・セキュリティ&lt;/a&gt;」と照らし合わせても「個人番号」の設計が如何にダサいか分かるだろう。
ダメダメな設計を運用（マイナンバー関連法）でカバーするってのは「動かないシステム」の典型である。&lt;/p&gt;
&lt;h2&gt;「個人番号カード」の問題&lt;/h2&gt;
&lt;p&gt;「個人番号カード」の問題は「&lt;ruby&gt;&lt;rb&gt;情報格差&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;digital divide&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;」の拡大だ。&lt;/p&gt;
&lt;p&gt;5月の「特別定額給付金」でのドタバタを見れば分かるように，オンライン申請によって「できる人」と「できない人」で明確に色分けされてしまった。
もっと言うと現在稼働中の「マイナポイント」はキャッシュレス決済手段を持ってない人は（できるできない以前に）構造的に排除されている。
ぶっちゃけ，&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/bottleneck2/&#34; title=&#34;「特別定額給付金」申請のナニがダメだったのか（その2）&#34;&gt;お役所内部のお些末さ&lt;/a&gt;は枝葉末節に過ぎない。&lt;/p&gt;
&lt;p&gt;これで思い出すのが，最近見かけた以下の記事だ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35158575/&#34;&gt;アフターコロナの中国でネット弱者の老人にどう対応したのか - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この記事では「コロナ」と「老人」を切り口に語られているが，情報格差は&lt;a href=&#34;https://text.baldanders.info/remark/2016/05/its-complicated/&#34; title=&#34;『つながりっぱなしの日常を生きる』を読む&#34;&gt;世代格差よりも経済格差による影響が大きい&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;つまり，「個人番号カード」により拡大した情報格差は経済階級構造と結びつき「情報力」を背景にした階級社会を強化することになるだろう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.com/tsukamoto/n/n290aa887cb52&#34;&gt;マイナンバーそのものは知られても問題ない（はず）｜塚本 牧生｜note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/05/information-illiterate/&#34;&gt;「情報弱者」を再々定義する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.aozora.gr.jp/cards/000021/card4307.html&#34;&gt;&lt;img src=&#34;https://text.baldanders.info/images/aozora/card4307.svg&#34; width=&#34;110&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.aozora.gr.jp/cards/000021/card4307.html&#34;&gt;グリゴリの捕縛&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;白田 秀彰&lt;/dd&gt;
    &lt;dd&gt; 2001-11-26 (Release 2014-09-17)&lt;/dd&gt;
    &lt;dd&gt;青空文庫&lt;/dd&gt;
    &lt;dd&gt;4307 (図書カードNo.)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;白田秀彰さんの「&lt;a href=&#34;http://orion.mt.tama.hosei.ac.jp/hideaki/kenporon.htm&#34;&gt;グリゴリの捕縛&lt;/a&gt;」が青空文庫に収録されていた。
内容は &lt;strike&gt;怪獣大決戦&lt;/strike&gt; おっと憲法（基本法）についてのお話。
古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。
その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-03-30&#34;&gt;2019-03-30&lt;/abbr&gt; (powered by &lt;a href=&#34;https://aozorahack.org/&#34;&gt;aozorahack&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- グリゴリの捕縛 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B0125TZSZ0?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/616sjle5ITL._SL160_.jpg&#34; width=&#34;109&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0125TZSZ0?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;つながりっぱなしの日常を生きる：ソーシャルメディアが若者にもたらしたもの&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ダナ・ボイド (著), 野中 モモ (翻訳)&lt;/dd&gt;
    &lt;dd&gt;草思社 2014-10-09 (Release 2015-07-21)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0125TZSZ0 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;読むのに1年半以上かかってしまった。ネット，特に SNS 上で自身のアイデンティティやプライバシーを保つにはどうすればいいか。豊富な事例を交えて考察する。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-05-10&#34;&gt;2016-05-10&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- つながりっぱなしの日常を生きる --&gt;
</content>
	</entry><entry>
		<title>近ごろ流行りらしい “Zenn” のアカウントを作ってみた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/using-zenn-with-github/" />
		<id>tag:text.Baldanders.info,2020-09-19:/remark/2020/09/using-zenn-with-github/</id>
		<published>2020-09-19T08:09:47+00:00</published>
		<updated>2020-09-22T02:03:47+00:00</updated>
		<summary>とりあえず私も Qiita に置いてる記事の一部を移行してみるか。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;きっかけは &lt;a href=&#34;https://qiita.com/tsuyoshi_cho&#34; title=&#34;tsuyoshi_cho - Qiita&#34;&gt;@tsuyoshi_cho&lt;/a&gt; さんの&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tsuyoshi_cho/items/f615dbd4631957334ef3&#34;&gt;Gitのaliasを晒す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で，最近の更新に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;Zennへ移植改訂しました。&lt;br&gt;
&lt;a href=&#34;https://zenn.dev/tsuyoshicho/articles/git-aliases-revised&#34;&gt;https://zenn.dev/tsuyoshicho/articles/git-aliases-revised&lt;/a&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://qiita.com/tsuyoshi_cho/items/f615dbd4631957334ef3&#34;&gt;Gitのaliasを晒す - Qiita&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とあって「&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; ってなんじゃら？」と調べてみた。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;プログラマーのための新しい情報共有サービス「Zenn」をリリースしました🎉&lt;br&gt;&lt;br&gt;コンセプトは、有益な情報を共有する人がもっと対価を得られること。&lt;br&gt;noteのようにお互いを金銭的にサポートしたり、知見を本にまとめて販売したりできるプラットフォームです。&lt;a href=&#34;https://t.co/l0lxlW24Ug&#34;&gt;https://t.co/l0lxlW24Ug&lt;/a&gt; &lt;a href=&#34;https://t.co/qrddHoCWsr&#34;&gt;pic.twitter.com/qrddHoCWsr&lt;/a&gt;&lt;/p&gt;&amp;mdash; catnose (@catnose99) &lt;a href=&#34;https://twitter.com/catnose99/status/1306160371468627968?ref_src=twsrc%5Etfw&#34;&gt;September 16, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;おおっ！ 最近 launch したサービスだったのか。&lt;/p&gt;
&lt;p&gt;パッと見の印象は「Qiita ＋ note」という感じ。
今や &lt;a href=&#34;https://yamdas.hatenablog.com/entry/20200914/publishers-note&#34; title=&#34;出版社のnote活用事例まとめ完全版（2020年9月時点） - YAMDAS現更新履歴&#34;&gt;note が出版社御用達のプラットフォームになっている&lt;/a&gt;ように &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; は（決済可能な）エンジニア御用達のプラットフォームになれればいいねぇ。&lt;/p&gt;
&lt;p&gt;というわけで，とりあえずアカウントを作ってみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel&#34;&gt;Spiegel | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日本のサービスは &lt;code&gt;spiegel&lt;/code&gt; 名義でアカウントが取れるのが素敵♡&lt;/p&gt;
&lt;p&gt;ただ，決済情報は未入力のままにしてある。
できればクレカや銀行口座より PayPal 決済に対応して欲しい。
&lt;a href=&#34;https://tatsu-zine.com/&#34;&gt;達人出版会&lt;/a&gt;も PayPal 決済だし，技術系のサービスなんだからその方がいいと思うのだが&amp;hellip;&lt;/p&gt;
&lt;h2&gt;“Tech” と “Idea” という色分け&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; では “Tech” と “Idea” の2つの固定カテゴリが用意されていて，投稿する記事は必ずどちらかのカテゴリに含まれる。
&lt;a href=&#34;https://zenn.dev/tech-or-idea&#34; title=&#34;投稿カテゴリー「Tech」「Idea」の選び方 | Zenn&#34;&gt;説明&lt;/a&gt;によると&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;dl&gt;
&lt;dt&gt;Tech&lt;/dt&gt;
&lt;dd&gt;&lt;q&gt;プログラミングやソフトフェア開発、インフラなどに関する技術記事ならTechを選びます&lt;/q&gt;&lt;/dd&gt;
&lt;dt&gt;Idea&lt;/dt&gt;
&lt;dd&gt;&lt;q&gt;個人的な意見やポエム、キャリアについての記事、キュレーション記事ならIdeaを選びます&lt;/q&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://zenn.dev/tech-or-idea&#34;&gt;投稿カテゴリー「Tech」「Idea」の選び方 | Zenn&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なんだそうだ。
Qiita で技術記事と所謂「ポエム」が入り混じって出てくる状況を見れば妥当な措置だろう。
まぁ，悩んだら “Idea” にするのがいいんだろうねぇ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; との連携&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; では &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; リポジトリから記事を deploy することができる。
具体的な手順は以下の記事を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/connect-to-github&#34;&gt;GitHubリポジトリでZennのコンテンツを管理する | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし，いくつか制限があって&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リポジトリ上の記事を削除しても &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; に反映されない&lt;/li&gt;
&lt;li&gt;一度 &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; に deploy された記事の slug は変更できない（別の記事として扱われる）&lt;/li&gt;
&lt;li&gt;既に &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; でオン書きしたコンテンツは &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; に反映されない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ようだ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; でリポジトリを作る際は，リポジトリ名は任意だが， &lt;code&gt;.gitignore&lt;/code&gt; や &lt;code&gt;README.md&lt;/code&gt; は作成しなくてよい。
これらは後述する &lt;code&gt;zenn-cli&lt;/code&gt; ツールで作成される。&lt;/p&gt;
&lt;h2&gt;zenn-cli ツールの導入&lt;/h2&gt;
&lt;p&gt;まずは &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 環境に node.js をインストールしてしまおう（まだ導入していない場合）。
こんな感じでいいだろう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;curl -sL https://deb.nodesource.com/setup_current.x | sudo -E bash -
sudo apt install -y nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次に，作成した &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; リポジトリを適当な場所に &lt;code&gt;git clone&lt;/code&gt; し，リポジトリのあるディレクトリに移動する。
まずは npm の初期化から。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd ~/workspace
$ gh repo clone spiegel-im-spiegel/zenn-docs
$ cd zenn-docs
$ npm init --yes
Wrote to /home/username/workspace/zenn-docs/package.json:

{
  &amp;#34;name&amp;#34;: &amp;#34;zenn-docs&amp;#34;,
  &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;,
  &amp;#34;description&amp;#34;: &amp;#34;## Links&amp;#34;,
  &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;,
  &amp;#34;scripts&amp;#34;: {
    &amp;#34;test&amp;#34;: &amp;#34;echo \&amp;#34;Error: no test specified\&amp;#34; &amp;amp;&amp;amp; exit 1&amp;#34;
  },
  &amp;#34;repository&amp;#34;: {
    &amp;#34;type&amp;#34;: &amp;#34;git&amp;#34;,
    &amp;#34;url&amp;#34;: &amp;#34;git+https://github.com/spiegel-im-spiegel/zenn-docs.git&amp;#34;
  },
  &amp;#34;keywords&amp;#34;: [],
  &amp;#34;author&amp;#34;: &amp;#34;&amp;#34;,
  &amp;#34;license&amp;#34;: &amp;#34;ISC&amp;#34;,
  &amp;#34;bugs&amp;#34;: {
    &amp;#34;url&amp;#34;: &amp;#34;https://github.com/spiegel-im-spiegel/zenn-docs/issues&amp;#34;
  },
  &amp;#34;homepage&amp;#34;: &amp;#34;https://github.com/spiegel-im-spiegel/zenn-docs#readme&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; は弄らなくて大丈夫。
続けて &lt;code&gt;zenn-cli&lt;/code&gt; ツールをインストールする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npm install zenn-cli
...
+ zenn-cli@0.1.29
added 5 packages from 3 contributors, removed 3 packages, updated 3 packages, moved 1 package and audited 905 packages in 42.516s
found 5 low severity vulnerabilities
  run `npm audit fix` to fix them, or `npm audit` for details
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なんか不穏なメッセージが見えるが大丈夫か，これ。 &amp;hellip;まぁいいや&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
次いってみよう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;zenn-cli&lt;/code&gt; ツールがインストールできたらリポジトリ内を初期化する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn init

  🎉Done!
  早速コンテンツを作成しましょう

  👇新しい記事を作成する
  $ zenn new:article

  👇新しい本を作成する
  $ zenn new:book

  👇表示をプレビューする
  $ zenn preview
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでリポジトリ内に &lt;code&gt;articles/&lt;/code&gt; および &lt;code&gt;books/&lt;/code&gt; ディレクトリが作成され，さらに &lt;code&gt;.gitignore&lt;/code&gt; および &lt;code&gt;README.md&lt;/code&gt; ファイルも作成される。
ちなみに &lt;code&gt;.gitignore&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;node_modules
.DS_Store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;何ともシンプルだが，これで &lt;code&gt;zenn-cli&lt;/code&gt; インストール時に作成される &lt;code&gt;node_modules/&lt;/code&gt; ディレクトリはリポジトリから除外される。&lt;/p&gt;
&lt;p&gt;ここまで出来たら一度コミットしておいたほうがいいだろう。&lt;/p&gt;
&lt;h2&gt;記事の作成&lt;/h2&gt;
&lt;p&gt;入力ファイルの作成には以下のコマンドを打つ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn new:article
📄d309af5057a827deda35.md created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このファイル名がそのまま slug として URL のパスになる。
Slug は &lt;code&gt;zenn-cli&lt;/code&gt; ツールが適当に生成するのでユーザは考えなくともよい。&lt;/p&gt;
&lt;p&gt;もし slug を指定したいのであれば &lt;code&gt;--slug&lt;/code&gt; オプションを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn new:article --slug hello-zenn-world
📄hello-zenn-world.md created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし slug 文字列には以下の制限がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;半角英数字（a-z, 0-9）とハイフン（-）の 12〜50 字の組み合わせのみ有効&lt;/li&gt;
&lt;li&gt;&lt;code&gt;articles&lt;/code&gt; 以下のファイルはディレクトリ階層に出来ない（フラットな構成）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;books&lt;/code&gt; の場合は「本」ごとに slug を指定できる。本の slug 以下はフラットな構成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slug 文字列が短いとエラーになるのでご注意を。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn new:article --slug hello
エラー：slugの値（hello）が不正です。半角英数字（a-z0-9）とハイフン（-）の12〜50字の組み合わせにしてください
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;作成したファイルの中身は，以下のように front matter のひな型のみが書き込まれている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emoji&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;🎉&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tech&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# tech: 技術記事 / idea: アイデア&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;topics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;published&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;emoji&lt;/code&gt; 項目は，記事のアテンションに使われるのだが，毎回ランダムな文字で初期化されるようだ。
絵文字を直接入力することはないのだが &lt;a href=&#34;https://www.webfx.com/tools/emoji-cheat-sheet/&#34; title=&#34;🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more&#34;&gt;GitHub markdown&lt;/a&gt; のように文字列で指定できないものかねぇ。&lt;/p&gt;
&lt;h2&gt;プレビューが素敵！&lt;/h2&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2020-09-20 更新】&lt;/strong&gt;
以前プレビュー機能が動かないと書いたが，他でも &lt;a href=&#34;https://github.com/zenn-dev/zenn-roadmap/issues/37&#34; title=&#34;npx zenn preview でエラーが大量に吐き出される · Issue #37 · zenn-dev/zenn-roadmap&#34;&gt;Issue が上がっていた&lt;/a&gt;らしく，対応されていた。
感謝！&lt;/p&gt;
&lt;p&gt;この節は，以前の内容から差し替えている。
なお，障害報告は &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の &lt;a href=&#34;https://github.com/zenn-dev/zenn-roadmap/issues&#34;&gt;zenn-dev/zenn-roadmap/issues&lt;/a&gt; に上げてほしいとのこと。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;以下のコマンドでプレビュー用のローカルサーバが起動する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn preview
👀Preview on http://localhost:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;画面はこんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./preview.png&#34;&gt;&lt;img src=&#34;./preview.png&#34; srcset=&#34;./preview.png 1181w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;おおっ！ 間違いまで指摘してくれるのか。
こりゃあ，ええ。&lt;/p&gt;
&lt;p&gt;エディタの markdown プレビュー機能でもある程度は見れるけど，やっぱサービス立ち上げてブラウザで確認できるのがいいよね。&lt;/p&gt;
&lt;p&gt;うんうん。&lt;/p&gt;
&lt;!--
プレビュー用のローカルサーバを起動しようとしたら

```text
$ npx zenn preview
(node:126485) UnhandledPromiseRejectionWarning: Error: Could not find a valid build in the &#39;/home/username/workspace/zenn-docs/.next&#39; directory! Try building your app with &#39;next build&#39; before starting the server.
    at Server.readBuildId (/home/username/workspace/zenn-docs/node_modules/next/dist/next-server/server/next-server.js:113:355)
    at new Server (/home/username/workspace/zenn-docs/node_modules/next/dist/next-server/server/next-server.js:3:120)
    at Object.createServer [as default] (/home/username/workspace/zenn-docs/node_modules/next/dist/server/next.js:2:638)
    at /home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:53:41
    at step (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:33:23)
    at Object.next (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:14:53)
    at /home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:8:71
    at new Promise (&lt;anonymous&gt;)
    at __awaiter (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:4:12)
    at Object.exports.build (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:48:12)
(Use `node --trace-warnings ...` to show where the warning was created)
(node:126485) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 3)
(node:126485) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

てな感じに例外を吐いて落っこちた。

まぁ，プレビューなくても問題はないのだが...
--&gt;
&lt;h2&gt;とりあえず私も&amp;hellip;&lt;/h2&gt;
&lt;p&gt;まずは Qiita に置いてる記事の一部を移行してみるか。
古すぎて使えない記事はダメだけど（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/connect-to-github&#34;&gt;GitHubリポジトリでZennのコンテンツを管理する | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/install-zenn-cli&#34;&gt;Zenn CLIをインストールする | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/zenn-cli-guide&#34;&gt;Zenn CLIを使ってコンテンツを作成する | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/markdown-guide&#34;&gt;ZennのMarkdown記法 | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-09-17-github-cli-1-0-is-now-available/&#34;&gt;GitHub CLI 1.0 is now available - The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/morinokami/articles/hello-github-cli&#34;&gt;GitHub CLI 1.0 がリリースされたので使ってみた | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://linuxfan.info/install_nodejs_on_ubuntu_debian&#34;&gt;Ubuntu/Debianに最新のNode.jsをインストールする一番良い方法 | LFI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.webfx.com/tools/emoji-cheat-sheet/&#34;&gt;🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; 側に問い合わせてみたが，セキュリティ上の問題はないらしい。「あまり精神的に良いものではないのでそのうちなんとかしようと思っています」とのこと（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>住所コードと郵便番号に関する覚え書き</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/address-code-and-postal-code/" />
		<id>tag:text.Baldanders.info,2020-09-09:/remark/2020/09/address-code-and-postal-code/</id>
		<published>2020-09-09T09:30:36+00:00</published>
		<updated>2020-09-16T01:24:16+00:00</updated>
		<summary>個人が興味本位で弄るのは無理，という結論になった。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;昨日リリースした &lt;a href=&#34;https://github.com/spiegel-im-spiegel/cov19data&#34; title=&#34;spiegel-im-spiegel/cov19data: Importing WHO COVID-2019 Cases Global Data&#34;&gt;spiegel-im-spiegel/cov19data&lt;/a&gt; パッケージなんだけど，東京都の PCR 検査陽性者のデータも参照できるようにしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://catalog.data.metro.tokyo.lg.jp/dataset/t000010d0000000068&#34;&gt;東京都 新型コロナウイルス陽性患者発表詳細 - データセット - 東京都オープンデータカタログサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今までは日付毎に行数をカウントするだけでデータの詳細に興味はなかったのだが，今回改めて CSV ファイルを眺めてみると「全国地方公共団体コード」のカラムがあったので「これなら都道府県名や市区町村名いらなくね？」と気がついた。&lt;/p&gt;
&lt;p&gt;ついでにこの住所コードと郵便番号を関連付ければ面白いデータセットが組めるんじゃないかと安直に考えたのだが，どうも簡単な話ではないようだ。
ていうか，個人が興味本位でやるのは無理，という結論になった。&lt;/p&gt;
&lt;p&gt;今回は，その辺の話を覚え書きとして記しておく。&lt;/p&gt;
&lt;h2&gt;住所コード&lt;/h2&gt;
&lt;p&gt;ひとくちに住所コードと言っても，様々なレイヤがある。
以下で細かく見てみよう。&lt;/p&gt;
&lt;h3&gt;JIS 都道府県コード&lt;/h3&gt;
&lt;p&gt;JIS 規格で決められているコードで，都道府県ごとに &lt;code&gt;01&lt;/code&gt; から &lt;code&gt;47&lt;/code&gt; までの2桁の数字列で表される。
たとえば，島根県の都道府県コードは &lt;code&gt;32&lt;/code&gt; である。&lt;/p&gt;
&lt;h3&gt;JIS 住所コードと全国地方公共団体コード&lt;/h3&gt;
&lt;p&gt;市区町村までを表す住所コードは，都道府県コード＋3桁の合計5桁の数字列で表され，これも JIS 規格で決められている。
たとえば，島根県松江市は &lt;code&gt;32201&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;更に，住所コードの末尾にチェック・ディジットを付加した6桁を「全国地方公共団体コード」と呼ぶ。
ちなみにチェック・ディジットの計算手順は以下の通り。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;住所コード $abcde$ の各桁に対して $a \times 6 + b \times 5 + c \times 4 + d \times 3 + e \times 2$ を求める &lt;em&gt;(1)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(1)&lt;/em&gt; で求めた値を $11$ で割ったあまりを求める &lt;em&gt;(2)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(2)&lt;/em&gt; で求めた値を $11$ から引いた値の下1桁がチェック・ディジットとなる&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;たとえば，住所コード &lt;code&gt;32201&lt;/code&gt; のチェック・ディジットは&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;mathjax&#34;&gt;
\[
11 - \left(\left(3 \times 6 + 2 \times 5 + 2 \times 4 + 0 \times 3 + 1 \times 2 \right) \bmod 11 \right) = 6
\]
&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;なので &lt;code&gt;322016&lt;/code&gt; が全国地方公共団体コードとなる。&lt;/p&gt;
&lt;p&gt;また 都道府県コード＋&lt;code&gt;000&lt;/code&gt;＋チェック・ディジット で都道府県を表す全国地方公共団体コードになるらしい。
つまり &lt;code&gt;320005&lt;/code&gt; で島根県を表す。&lt;/p&gt;
&lt;h3&gt;国交省 &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; による大字町丁目コード&lt;/h3&gt;
&lt;p&gt;JIS 住所コードよりも更に詳細な住所コードは色々あるが，たとえば以下のものがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;国土地理協会の全国町・字ファイルで提供される JIS 住所コードを含む11桁のコード体系。通称「11桁コード」。住基ネットや個人番号カードでおなじみ地方公共団体情報システム機構もこれを使っているようだ&lt;/li&gt;
&lt;li&gt;運輸局で使われる運輸局住所コード。9桁または12桁のコード体系。 JIS 住所コード非互換&lt;/li&gt;
&lt;li&gt;国土交通省 &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; の位置参照情報に含まれる大字町丁目コード。 JIS 住所コードを含む12桁のコード体系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;オススメは &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; の位置参照情報。
&lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; で提供されるデータはいわゆるオープンデータになっていて Creative Commons の「&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; title=&#34;Creative Commons — Attribution 4.0 International — CC BY 4.0&#34;&gt;表示  &lt;span&gt;&lt;i class=&#34;fab fa-creative-commons&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fab fa-creative-commons-by&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;」ライセンス条件下で利用することができる。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;本利用ルールは、クリエイティブ・コモンズ・ライセンスの表示4.0国際（&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode.ja&#34;&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode.ja&#34;&gt;https://creativecommons.org/licenses/by/4.0/legalcode.ja&lt;/a&gt;&lt;/a&gt;に規定される著作権利用許諾条件。以下「CCBY」といいます。）と互換性があり、本利用ルールが適用されるコンテンツはCCBYに従うことでも利用することができます&lt;/q&gt;。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://nlftp.mlit.go.jp/ksj/other/agreement.html&#34;&gt;利用規約&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;&lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34; title=&#34;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&#34;&gt;Japanese-Addresses&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; の位置参照情報を上手く使っているのが &lt;a href=&#34;https://geolonia.com/&#34; title=&#34;Geolonia - An Elastic Map Hosting - Geolonia&#34;&gt;Geolonia&lt;/a&gt; から提供されているオープンデータの &lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34; title=&#34;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&#34;&gt;japanese-addresses&lt;/a&gt; である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geolonia.github.io/japanese-addresses/&#34;&gt;Geolonia 住所データ | japanese-addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34;&gt;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34; title=&#34;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&#34;&gt;japanese-addresses&lt;/a&gt; データは Creative Commons の「&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; title=&#34;Creative Commons — Attribution 4.0 International — CC BY 4.0&#34;&gt;表示  &lt;span&gt;&lt;i class=&#34;fab fa-creative-commons&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fab fa-creative-commons-by&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;」ライセンスで提供されている。
またデータの生成コードは MIT ライセンスで公開されている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34; title=&#34;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&#34;&gt;japanese-addresses&lt;/a&gt; データは &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; の位置参照情報をそのまま使っているわけではなく JP の&lt;a href=&#34;https://www.post.japanpost.jp/zipcode/download.html&#34; title=&#34;郵便番号データダウンロード - 日本郵便&#34;&gt;郵便番号データ&lt;/a&gt;と組み合わせて住所の読み情報も付加しているようだ。
あれ？ じゃあ &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; の位置参照情報と&lt;a href=&#34;https://www.post.japanpost.jp/zipcode/download.html&#34; title=&#34;郵便番号データダウンロード - 日本郵便&#34;&gt;郵便番号データ&lt;/a&gt;を組み合わせて住所コードと郵便番号とを連携させられるんじゃね？ と思った私を誰が責められよう（笑）&lt;/p&gt;
&lt;h2&gt;住所コードと郵便番号&lt;/h2&gt;
&lt;p&gt;JP の&lt;a href=&#34;https://www.post.japanpost.jp/zipcode/download.html&#34; title=&#34;郵便番号データダウンロード - 日本郵便&#34;&gt;郵便番号データ&lt;/a&gt;を眺めてみるとこんな感じになっている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;32201,&amp;#34;690  &amp;#34;,&amp;#34;6900000&amp;#34;,&amp;#34;ｼﾏﾈｹﾝ&amp;#34;,&amp;#34;ﾏﾂｴｼ&amp;#34;,&amp;#34;ｲｶﾆｹｲｻｲｶﾞﾅｲﾊﾞｱｲ&amp;#34;,&amp;#34;島根県&amp;#34;,&amp;#34;松江市&amp;#34;,&amp;#34;以下に掲載がない場合&amp;#34;,0,0,0,0,0,0
32201,&amp;#34;69002&amp;#34;,&amp;#34;6900261&amp;#34;,&amp;#34;ｼﾏﾈｹﾝ&amp;#34;,&amp;#34;ﾏﾂｴｼ&amp;#34;,&amp;#34;ｱｲｶﾁｮｳ&amp;#34;,&amp;#34;島根県&amp;#34;,&amp;#34;松江市&amp;#34;,&amp;#34;秋鹿町&amp;#34;,0,0,0,0,0,0
32201,&amp;#34;690  &amp;#34;,&amp;#34;6900022&amp;#34;,&amp;#34;ｼﾏﾈｹﾝ&amp;#34;,&amp;#34;ﾏﾂｴｼ&amp;#34;,&amp;#34;ｱｵﾊﾞﾀﾞｲ&amp;#34;,&amp;#34;島根県&amp;#34;,&amp;#34;松江市&amp;#34;,&amp;#34;青葉台&amp;#34;,0,0,0,0,0,0
32201,&amp;#34;690  &amp;#34;,&amp;#34;6900015&amp;#34;,&amp;#34;ｼﾏﾈｹﾝ&amp;#34;,&amp;#34;ﾏﾂｴｼ&amp;#34;,&amp;#34;ｱｹﾞﾉｷﾞ&amp;#34;,&amp;#34;島根県&amp;#34;,&amp;#34;松江市&amp;#34;,&amp;#34;上乃木&amp;#34;,0,0,1,0,0,0
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一見 JIS 住所コードと郵便番号が&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./entity-relationship-1.puml&#34;&gt;&lt;img src=&#34;./entity-relationship-1.png&#34; srcset=&#34;./entity-relationship-1.png 687w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;のように 1 対 n の関係になっているように見えるけど&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/_takwat/items/3a121656425fac7bb820&#34;&gt;郵便番号や市区町村データを取り扱うときにはまったこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;によると&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;郵便番号は必ず1つの町名に紐づいているわけではない&lt;/li&gt;
&lt;li&gt;市区町村をまたいで同じ郵便番号を持つケースがある&lt;/li&gt;
&lt;li&gt;市区町村はおろか県を飛び越えて同じ郵便番号を持ちうるケースがある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そうで，つまり JIS 住所コードと郵便番号と住所（文字列）の関係は&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./entity-relationship-2.puml&#34;&gt;&lt;img src=&#34;./entity-relationship-2.png&#34; srcset=&#34;./entity-relationship-2.png 687w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;となっていて， JIS 住所コードと郵便番号の間で関係を記述できない。
敢えてやるなら&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./entity-relationship-3.puml&#34;&gt;&lt;img src=&#34;./entity-relationship-3.png&#34; srcset=&#34;./entity-relationship-3.png 956w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;のように第3の固有IDを作って間接的に関連付ける必要がある。&lt;/p&gt;
&lt;h2&gt;&amp;hellip;というわけで諦めました&lt;/h2&gt;
&lt;p&gt;道理で住所コードと郵便番号を関連付ける実装を見かけない筈だよ。&lt;/p&gt;
&lt;p&gt;使い方としては，まず構造のない住所（文字列）があって，単にその住所を絞り込む条件として住所コードや郵便番号が使える，というだけなのだろう。
古い閉じたシステムではよくある構成だが，外部データと関連付けようとすると素朴すぎて使えない。&lt;/p&gt;
&lt;p&gt;たとえば JIS 住所コードより詳細な「11桁コード」や &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; 位置参照情報の「大字町丁目コード」を第3の固有IDとして郵便番号を関連付けることは可能かもしれないが，そのためには文字列の住所を「名寄せ」する必要がある。
しかも&lt;a href=&#34;https://www.post.japanpost.jp/zipcode/download.html&#34; title=&#34;郵便番号データダウンロード - 日本郵便&#34;&gt;郵便番号データ&lt;/a&gt;って月単位で変更されるので，ほぼ無理ゲーな気がする。
実際 &lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34; title=&#34;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&#34;&gt;japanese-addresses&lt;/a&gt; は郵便番号との関連付けを行っていないわけだし。&lt;/p&gt;
&lt;p&gt;というわけで，個人が興味本位でやるのは（労力に見合わないので）無理，と諦めた&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;おあとがよろしいようで &lt;code&gt;m(_ _)m&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geolonia.com/pressrelease/2020/08/05/japanese-addresses.html&#34;&gt;日本全国の住所マスターデータをオープンデータとして無料公開 - Geolonia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- eof --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;もちろん仕事なら調査・構築・保守までやるよ（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>次期 Go 言語で導入される（かもしれない） io/fs パッケージについて予習する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/file-system-interface-in-go-2/" />
		<id>tag:text.Baldanders.info,2020-09-06:/golang/file-system-interface-in-go-2/</id>
		<published>2020-09-06T07:18:45+00:00</published>
		<updated>2020-09-06T07:22:09+00:00</updated>
		<summary>ツリー型のディレクトリ・ファイル構成のファイルシステムを操作するパッケージに対して統一した interface 型を提供して互換性を高めようというわけだ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;先日行われた “&lt;a href=&#34;https://gocon.connpass.com/event/186317/&#34;&gt;Go 1.15 Release Party in Japan&lt;/a&gt;” で&lt;a href=&#34;https://gist.github.com/tenntenn/fe8995c347a5e1000832d3c6942f1fbe&#34; title=&#34;Draft designを読む · GitHub&#34;&gt;紹介&lt;/a&gt;されていた File System Interfaces のドラフト案について予習がてら覚え書きとして記しておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/draft-iofs.md&#34;&gt;File System Interfaces for Go — Draft Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/yx7lmuwUNv8&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yx7lmuwUNv8&#34;&gt;io/fs draft design - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;たとえば &lt;code&gt;/path/to/filename.txt&lt;/code&gt; のようにツリー型のディレクトリ・ファイル構成のファイルシステムは多い。
メジャーな OS のファイルシステムは大抵そうだし Web のパスや書庫ファイル（&lt;code&gt;*.tar&lt;/code&gt; や &lt;code&gt;*.zip&lt;/code&gt; など）もツリー型のディレクトリ・ファイル構成になっている。&lt;/p&gt;
&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; の標準パッケージ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/archive/zip&#34; title=&#34;zip package · pkg.go.dev&#34;&gt;&lt;code&gt;archive/zip&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/html/template&#34; title=&#34;template package · pkg.go.dev&#34;&gt;&lt;code&gt;html/template&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/net/http&#34; title=&#34;http package · pkg.go.dev&#34;&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/os&#34; title=&#34;os package · pkg.go.dev&#34;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/text/template&#34; title=&#34;template package · pkg.go.dev&#34;&gt;&lt;code&gt;text/template&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などは（ほぼ）同じツリー型だが使い方やメソッド名などが微妙に異なっている。
またサードパーティ製のパッケージでは， &lt;a href=&#34;https://github.com/rakyll/statik&#34; title=&#34;rakyll/statik: Embed files into a Go executable&#34;&gt;&lt;code&gt;rakyll/statik&lt;/code&gt;&lt;/a&gt; のように，実行モジュールにディレクトリ・ファイルをまるっと埋め込めるものもあったりする&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;こういったパッケージに対して統一した interface 型を提供して互換性を高めようというわけだ。
したら，テストとかもやり易くなるしね（笑）&lt;/p&gt;
&lt;h2&gt;fs.FS 型と fs.File 型&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/draft-iofs.md&#34; title=&#34;File System Interfaces for Go — Draft Design&#34;&gt;ドラフト案&lt;/a&gt;では &lt;code&gt;io/fs&lt;/code&gt; パッケージを新たに作ってファイルシステムの汎化を定義するようだ。&lt;/p&gt;
&lt;p&gt;まず，ファイルシステムの汎化型 &lt;code&gt;fs.FS&lt;/code&gt; は以下のように定義するらしい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また &lt;code&gt;fs.FS.Open()&lt;/code&gt; メソッドの返り値になっている &lt;code&gt;fs.File&lt;/code&gt; 型は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;Stat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FileInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と定義される。&lt;/p&gt;
&lt;p&gt;たとえば，通常のファイルの読み書きについて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myFS&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewFS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myFS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fsys&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myFS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;みたいに定義すれば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewFS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;no-exist.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//Output:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//open no-exist.txt: no such file or directory
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じに書ける。
どやさ！&lt;/p&gt;
&lt;p&gt;ちなみにディレクトリ区切り文字はスラッシュ “&lt;code&gt;/&lt;/code&gt;” で（実際のファイルシステムに関わらず）統一するらしい。
また相対パス指定で “&lt;code&gt;.&lt;/code&gt;” や “&lt;code&gt;..&lt;/code&gt;” は使えないようにするようだ。
まぁ，実際にはパス変換関数とか必要になるかもしれないね。&lt;/p&gt;
&lt;h2&gt;ファイルシステム・インタフェースの拡張&lt;/h2&gt;
&lt;p&gt;上述の説明だと「&lt;a href=&#34;https://pkg.go.dev/net/http&#34; title=&#34;http package · pkg.go.dev&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.FileSystem&lt;/code&gt; 型を使えばええんちゃうん？」となる。
実際 &lt;a href=&#34;https://pkg.go.dev/net/http&#34; title=&#34;http package · pkg.go.dev&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.FileSystem&lt;/code&gt; 型は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Closer&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Seeker&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;Readdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FileInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;Stat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FileInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FileSystem&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と定義されているため &lt;code&gt;fs.FS&lt;/code&gt; / &lt;code&gt;fs.File&lt;/code&gt; 型とほぼ変わらない&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;駄菓子菓子。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;io/fs&lt;/code&gt; パッケージでは拡張機能を定義した型も用意するらしい。&lt;/p&gt;
&lt;p&gt;たとえばファイル情報を取得する &lt;code&gt;Stat()&lt;/code&gt; メソッドを含む&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;StatFS&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;Stat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FileInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;や，ディレクトリエントリを読む機能を含む&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ReadDirFS&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;ReadDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FileInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;といった interface 型も用意されている。&lt;/p&gt;
&lt;p&gt;他にもファイルの内容を一括で読み込める&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ReadFileFS&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;ReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;や &lt;code&gt;Glob()&lt;/code&gt; メソッドが使える&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GlobFS&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;FS&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;Glob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;も用意するようだ。
実際にはこれらの interface 型を組み合わせて使うことになると思われる。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/tenntenn/fe8995c347a5e1000832d3c6942f1fbe&#34;&gt;Draft designを読む · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/using-statik-package/&#34;&gt;rakyll/statik でシングルバイナリにまとめる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;実行モジュールにディレクトリ・ファイルを埋め込めるパッケージとしては &lt;a href=&#34;https://github.com/jteeuwen/go-bindata&#34; title=&#34;jteeuwen/go-bindata: Hard fork of jteeuwen/go-bindata because it disappeared, Please refer to issues#5 for details.&#34;&gt;&lt;code&gt;jteeuwen/go-bindata&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://github.com/jessevdk/go-assets&#34; title=&#34;jessevdk/go-assets: Simple embedding of assets in go&#34;&gt;&lt;code&gt;jessevdk/go-assets&lt;/code&gt;&lt;/a&gt; が有名だが，これらは最早メンテナンスされていないので使わないほうがいい。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;たとえば &lt;a href=&#34;https://github.com/rakyll/statik&#34; title=&#34;rakyll/statik: Embed files into a Go executable&#34;&gt;&lt;code&gt;rakyll/statik&lt;/code&gt;&lt;/a&gt; パッケージではファイルシステムの生成・初期化関数 &lt;code&gt;fs.New()&lt;/code&gt; の返り値は &lt;a href=&#34;https://pkg.go.dev/net/http&#34; title=&#34;http package · pkg.go.dev&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.FileSystem&lt;/code&gt; 型である。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>GitHub リポジトリの既定ブランチ名が main になるらしい</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/08/renaming-default-branch-name-in-github-repositries/" />
		<id>tag:text.Baldanders.info,2020-08-27:/remark/2020/08/renaming-default-branch-name-in-github-repositries/</id>
		<published>2020-08-27T08:53:37+00:00</published>
		<updated>2020-10-05T02:32:11+00:00</updated>
		<summary>サービス・プロバイダやオープンソースな人たちが挙ってやってるやつね。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;Twitter の TL で見かけたんだけどさ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;デフォルトブランチを変更していない場合は 2020/10/1 から自動的に新規プロジェクトのデフォルトブランチが master から main に変更されるとのこと。 / “Set the default branch for newly-created repositories - GitHub Changelog” &lt;a href=&#34;https://t.co/zkXPp43aRd&#34;&gt;https://t.co/zkXPp43aRd&lt;/a&gt;&lt;/p&gt;&amp;mdash; mattn (@mattn_jp) &lt;a href=&#34;https://twitter.com/mattn_jp/status/1298803432984207360?ref_src=twsrc%5Etfw&#34;&gt;August 27, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;不覚にも3秒位「？？？」ってなっちゃったYO。&lt;/p&gt;
&lt;p&gt;あ゙ー，あれね。
サービス・プロバイダやオープンソースな人たちが挙って「差別用語を狩ろう」っちう “&lt;a href=&#34;https://text.baldanders.info/remark/2020/07/virtue-signaling/&#34; title=&#34;Virtue Signaling という広告&#34;&gt;Virtue Signaling&lt;/a&gt;” なやつの一環ね。&lt;/p&gt;
&lt;p&gt;なんでも&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;On &lt;strong&gt;October 1, 2020&lt;/strong&gt;, if you haven’t changed the default branch for new repositories for your user, organization, or enterprise, it will automatically change from &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://github.blog/changelog/2020-08-26-set-the-default-branch-for-newly-created-repositories/&#34;&gt;Set the default branch for newly-created repositories - GitHub Changelog&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;だそうで，何もしなかったら 2020-10-01 以降の新規作成リポジトリの既定ブランチが &lt;code&gt;main&lt;/code&gt; になるらしい。
既存のリポジトリには影響しないし&lt;a href=&#34;https://github.com/settings/repositories&#34; title=&#34;Repositories&#34;&gt;設定画面&lt;/a&gt;で既定ブランチをあらかじめ指定しておくことで回避することも可能である（リポジトリ毎に既定ブランチを指定することもできるみたい）。&lt;/p&gt;
&lt;p&gt;個人的にはこういう政治広告に巻き込まれたくないんだけど，名前を変えること自体はさしたる手間ではないし，吝かではないといったところか。
強いていうなら CI サービス周りの対応次第かな。&lt;/p&gt;
&lt;h2&gt;Git リポジトリの既定ブランチ名を指定するには&lt;/h2&gt;
&lt;p&gt;Git の設定で既定ブランチ名を変更するには，以下のコマンドラインで無問題。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git config --global init.defaultBranch foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;$HOME/.config/git/config&lt;/code&gt; (または &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;) ファイルに&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;defaultBranch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;が追加される。&lt;/p&gt;
&lt;p&gt;また &lt;code&gt;git init&lt;/code&gt; コマンドで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git init --initial-branch=foo myrepo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば &lt;code&gt;foo&lt;/code&gt; ブランチで初期化してくれるので，そのまま既定ブランチとして使えばよい。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/github/renaming&#34;&gt;github/renaming: Guidance for changing the default branch name for GitHub repositories&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/changelog/2020-10-01-the-default-branch-for-newly-created-repositories-is-now-main/&#34;&gt;The default branch for newly-created repositories is now main - GitHub Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35156317/&#34;&gt;「ブラックハット」も差別連想？&amp;ndash;用語変更についてセキュリティコミュニティで議論に - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/twitterwhitelistblacklistmasterslavedummy_value.html&#34;&gt;Twitter、コードやドキュメント内の用語「Whitelist/Blacklist」「Master/Slave」「Dummy value」などを好ましい用語へ置き換え、具体例も発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20200713-linux-replace-master-slave/&#34;&gt;Linuxで「マスター／スレイブ」「ブラックリスト／ホワイトリスト」の語句置き換えが決定 - GIGAZINE&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.itmedia.co.jp/news/articles/2007/13/news058.html&#34;&gt;Linuxカーネルでの「master/slave」と「blacklist」禁止、トーバルズ氏が承認 - ITmedia NEWS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35156986/&#34;&gt;アップルも「マスター」「スレーブ」などの用語置き換え&amp;ndash;スタイルガイド更新 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/35158622/&#34;&gt;差別的な用語を排除へ&amp;ndash;IBMとマイクロソフトの自発的な取り組み - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/githubmainmastermain.html&#34;&gt;GitHub、これから作成するリポジトリのデフォルトブランチ名が「main」に。「master」から「main」へ変更 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B07Y29NV9P?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51v&amp;#43;HI-Sh-L._SL160_.jpg&#34; width=&#34;100&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07Y29NV9P?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Virtue Signaling: Essays on Darwinian Politics &amp;amp; Free Speech (English Edition)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Miller, Geoffrey (著)&lt;/dd&gt;
    &lt;dd&gt;Cambrian Moon 2019-09-17 (Release 2019-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B07Y29NV9P (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://shorebird.hatenablog.com/entry/2020/04/29/093951&#34;&gt;shorebird さんによる書評はこちら&lt;/a&gt;。邦訳版があるなら読んでみたい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-07&#34;&gt;2020-07-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Virtue Signaling (洋書) --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4770501994?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41-vH-XzwbL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4770501994?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ちびくろサンボ&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ヘレン・バナーマン (著), フランク・ドビアス (イラスト)&lt;/dd&gt;
    &lt;dd&gt;径書房 2008-06-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4770501994 (ASIN), 9784770501998 (EAN), 4770501994 (ISBN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;イラスト等原書に近い内容らしい。これは紙のほうがいいかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-07&#34;&gt;2020-07-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ちびくろサンボ --&gt;
</content>
	</entry><entry>
		<title>0.1 たす 0.2 が 0.3 にならない場合</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/08/floating-point-number/" />
		<id>tag:text.Baldanders.info,2020-08-19:/remark/2020/08/floating-point-number/</id>
		<published>2020-08-19T02:43:53+00:00</published>
		<updated>2020-09-11T23:25:56+00:00</updated>
		<summary>浮動小数点数の仕様はプログラマなら知ってて当然だよね（笑）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;面白い tweet を&lt;a href=&#34;https://twitter.com/prithvirathor99/status/1295728692316917761&#34;&gt;見かけた&lt;/a&gt;ので。&lt;/p&gt;
&lt;p&gt;以下のコード&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;を実行したら &lt;code&gt;true&lt;/code&gt; になるか &lt;code&gt;false&lt;/code&gt; になるか，というもの。
分からなければ実際に書いて実行してみれば分かる。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では小数点数のリテラル表現を使って &lt;code&gt;a := 0.1&lt;/code&gt; の様に記述すると暗黙的に &lt;code&gt;float64&lt;/code&gt; (倍精度浮動小数点数) 型として宣言・初期化される&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;まぁ，浮動小数点数の仕様はプログラマなら知ってて当然だよね（笑）&lt;/p&gt;
&lt;p&gt;念のために説明すると，これは（言語に関係なく）浮動小数点数の標準である IEEE 754 の仕様によるもの。
IEEE 754 は浮動小数点数を2進数で保持している。&lt;/p&gt;
&lt;p&gt;たとえば &lt;code&gt;0.1&lt;/code&gt; を &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; の書式 &lt;code&gt;%b&lt;/code&gt; で表すと&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%b\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//Output:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//7205759403792794p-56
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;となる。
仮数部が10進数になっているので分かりにくいが，無理やり2進数で表すと&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%b\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%bp-56\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7205759403792794&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//Output:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//7205759403792794p-56
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//11001100110011001100110011001100110011001100110011010p-56
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と循環し，丸め誤差が発生していることが分かる。
これが「0.1 たす 0.2 が 0.3 にならない」カラクリである。&lt;/p&gt;
&lt;p&gt;といっても数値計算であれば（計算誤差を含めた誤差評価ができているなら）特に問題はないのだが，たとえばお金の計算をする場合は小数点以下で計算誤差が発生しては困ってしまう。&lt;/p&gt;
&lt;p&gt;そこで，大抵の言語では「通貨型」と呼ばれる型またはクラスが用意されている。
中身は10の冪でスケーリングした固定小数点数であることが多い。
こういった型やクラスを上手く使い分けることがプログラム設計の最初の1フィートとなるだろう。&lt;/p&gt;
&lt;p&gt;なお &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では，通貨型あるいは固定小数点数型に相当するものが基本型にも標準ライブラリにも存在しない&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
その代わりと言ってはナニだが，標準の &lt;a href=&#34;https://pkg.go.dev/math/big&#34; title=&#34;big package · pkg.go.dev&#34;&gt;&lt;code&gt;math/big&lt;/code&gt;&lt;/a&gt; パッケージに有理数型 &lt;a href=&#34;https://pkg.go.dev/math/big&#34; title=&#34;big package · pkg.go.dev&#34;&gt;&lt;code&gt;big&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Rat&lt;/code&gt; がある。
これを使えば（ちょっと面倒くさい記述になるが）先ほどのコードは&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;math/big&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewRat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewRat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Rat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewRat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のように書き換えることができる。
実行結果は各自でどうぞ（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/loop-counter/&#34;&gt;1を1億回足して1億にならない場合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/floating-point-number/&#34;&gt;Go 言語で浮動小数点数をいろいろな書式で表示してみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B079JLW5YN?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51QDhrqqEtL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B079JLW5YN?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラマの数学 第2版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2018-01-16 (Release 2018-02-08)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B079JLW5YN (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;タイトル通りプログラマ必読書。第2版では機械学習に関する章が付録に追加された。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-03-19&#34;&gt;2018-03-19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラマの数学 第2版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;厳密には定数 “&lt;code&gt;0.1&lt;/code&gt;” は，いったん「型付けなし」の浮動小数点数として評価された後，変数宣言時に &lt;code&gt;float64&lt;/code&gt; に暗黙的に変換される。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ただし &lt;a href=&#34;https://github.com/shopspring/decimal&#34; title=&#34;shopspring/decimal: Arbitrary-precision fixed-point decimal numbers in go&#34;&gt;shopspring/decimal&lt;/a&gt; のようなパッケージを公開されている方はいる。感謝！ &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>ノーコード・プラットフォームとトレーディングカード</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/07/no-code-platform/" />
		<id>tag:text.Baldanders.info,2020-07-07:/remark/2020/07/no-code-platform/</id>
		<published>2020-07-07T05:48:52+00:00</published>
		<updated>2020-07-07T07:04:18+00:00</updated>
		<summary>プレイヤーに与えられた「自由」はゲームという箱庭の内部にしか存在しない。箱庭自体を弄ることはできないし，箱庭の外に出る意義もない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;面白い記事を見つけたので，私もポエムを書いてみる（笑）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.com/__shinji__/n/nde03573dc3a4&#34;&gt;2030年 「エンジニアです。コードは書けません。」｜__shinji__｜note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20200706/the-world-with-no-programming&#34;&gt;プログラミングをする必要がなくなった後に人間に何が残るのか？ - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに私の親父が現役会社員だったあたりまでの時代にはプログラマとは別に「コーダー」という職業があって「&lt;a href=&#34;https://note.com/__shinji__/n/nde03573dc3a4&#34;&gt;2030年 「エンジニアです。コードは書けません。&lt;/a&gt;」で言うところの「パンチャー」に近い，ひたすら「コードを書く」だけの仕事だったそうな。&lt;/p&gt;
&lt;p&gt;もっと言うと，私がペーペーの新人だった頃の某大手プロジェクトでは詳細設計を「馬鹿でもコードが書ける」くらいまでブレイクダウンさせることが要求されていた。
まぁ，私がちょっと昔に助っ人で入った Java 系プロジェクトでも詳細設計に SQL 文が書いてあって「この通りに入力しろ」と言われたことがあるが（笑）&lt;/p&gt;
&lt;p&gt;実は「ノーコード・プラットフォーム」のようなものは1990年代に一大ブームがあって，当時は CASE と呼ばれていたが&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，私もその手のプロジェクトに参加したことがある。
1990年代のブームには「産業界におけるオブジェクト指向の台頭」という背景があって，つまり「ノーコード・プラットフォーム」ってのはオブジェクト指向の究極というか「夢」なんだよね。&lt;/p&gt;
&lt;p&gt;さて，最初の記事でも紹介されているように「ノーコード・プラットフォーム」が特に AI 分野で注目されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/googleappsheet1app_maker.html&#34;&gt;Googleはなぜノーコード開発ツールのAppSheetを買収し、1年半前に正式版になったばかりのApp Makerを終了させるのか？ － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/06/25/2020-06-24-why-aws-built-a-no-code-tool/&#34;&gt;AWSのノーコードツール「Amazon Honeycode」はなぜ生まれたのか？  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私のようなロートルから見れば「この道はいつか来た道♪」とか思ってしまうのだが，将来どうなるかは（私には）予想できない。
本当に「エンジニアです。コードは書けません」という未来がやってくるかもしれない。&lt;/p&gt;
&lt;p&gt;「プログラミング」について物凄くものすごーく簡単に言うと「データと機能の状態を表現する」ことに尽きる（&lt;a href=&#34;https://text.baldanders.info/remark/2018/10/object-oriented-design/&#34; title=&#34;「オブジェクト指向」の黒歴史&#34;&gt;フローチャート&lt;/a&gt;は忘れよう&lt;code&gt;w&lt;/code&gt;）。
「状態を表現」できるのであれば，穴ボコだろうが文字コードだろうが，もっと別の手段（電子ブロックとか&lt;code&gt;w&lt;/code&gt;）でも構わないわけだ。
ただ，まぁ，本当に AI 技術が情報処理の主役になるのなら，ノイマン型のプラットフォームは衰退するだろうけどね。&lt;/p&gt;
&lt;p&gt;20世紀末に夢見た CASE と比べて「ノーコード・プラットフォーム」は既に特定の「何か」から強い統制を受けている点が異なる。
これは「トレーディングカード」の比喩で考えると分かりやすい。&lt;/p&gt;
&lt;p&gt;トレーディングカードの主な遊び方はデッキを構築して対戦することだ。
デッキの組み方は（定石やローカルルールはあるが）基本的に自由で，人によって無限の組み合わせがあると言っていいだろう。
しかしカードの種類とレアリティは配給企業がコントロールしていて「持たざるもの」に不利に働くようチューニングされている（故に皆「持」とうとする）。
言い換えればプレイヤーに与えられた「自由」はゲームという箱庭の内部にしか存在しない。
箱庭自体を弄ることはできないし，箱庭の外に出る意義もない。&lt;/p&gt;
&lt;p&gt;「ノーコード・プラットフォーム」に限らずクラウド上の XaaS は等しく「箱庭」の境界問題を抱えている。
FOSS を通じて「コードの自由」を知っている私達が「ノーコード・プラットフォーム」の内側だけで満足できるのか。&lt;/p&gt;
&lt;p&gt;まぁ「&lt;a href=&#34;https://text.baldanders.info/remark/2017/01/internet-in-the-incubator/&#34; title=&#34;孵卵器の中のインターネット&#34;&gt;インターネットの黄金時代&lt;/a&gt;」が云々とか言いつつ，結局は「中央集権型のインターネット」に甘んじている現状を見れば，トレーディングカード・ゲームと同じく「箱庭の外に出る意義もない」のかもしれないが（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2020/02/blog-post_24.html&#34;&gt;ブログ: ローコードとノーコードプラットフォームはプログラミングに革命をもたらすか?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B000ALJ18G?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51qbIJBb4WL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B000ALJ18G?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;白秋の詩情~この道 生誕120周年記念~&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;童謡・唱歌 (アーティスト), 米良美一 (アーティスト), タンポポ児童合唱団 (アーティスト), ひばり児童合唱団 (アーティスト), 高橋知子 (アーティスト), サカモト児童合唱団 (アーティスト), 真理ヨシコ (アーティスト), 芹洋子 (アーティスト), 藤家虹二クインテット&amp;#43;α (アーティスト), ダーク・ダックス (アーティスト), ペギー葉山 (アーティスト)&lt;/dd&gt;
    &lt;dd&gt;キングレコード (Release 2005-09-22)&lt;/dd&gt;
    &lt;dd&gt;CD&lt;/dd&gt;
    &lt;dd&gt;B000ALJ18G (ASIN), 4988003313180 (EAN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;北原白秋の童謡集。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-07&#34;&gt;2020-07-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 北原白秋の童謡集 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01G12HBDY?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51DVdNJlojL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01G12HBDY?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;【合本版】問題児たちが異世界から来るそうですよ？　全12巻 (角川スニーカー文庫)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;竜ノ湖 太郎 (著), 天之有 (イラスト), ももこ (イラスト)&lt;/dd&gt;
    &lt;dd&gt;KADOKAWA 2016-06-01 (Release 2016-06-01)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01G12HBDY (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-07&#34;&gt;2020-07-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 問題児たちが異世界から来るそうですよ？ --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;いま世の中にある CASE ツールは，当時の「夢」のかけらもしくはサブセットのようなものなので，実質は違うものと考えていただければ。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
</feed>
