<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of engineering - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/engineering/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/engineering/index.xml" />
	<id>tag:text.Baldanders.info,2020-07-07:/tags</id>
	<updated>2020-07-07T14:48:52+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>ノーコード・プラットフォームとトレーディングカード</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/07/no-code-platform/" />
		<id>tag:text.Baldanders.info,2020-07-07:/remark/2020/07/no-code-platform/</id>
		<published>2020-07-07T05:48:52+00:00</published>
		<updated>2020-07-07T07:04:18+00:00</updated>
		<summary>プレイヤーに与えられた「自由」はゲームという箱庭の内部にしか存在しない。箱庭自体を弄ることはできないし，箱庭の外に出る意義もない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;面白い記事を見つけたので，私もポエムを書いてみる（笑）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.com/__shinji__/n/nde03573dc3a4&#34;&gt;2030年 「エンジニアです。コードは書けません。」｜__shinji__｜note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20200706/the-world-with-no-programming&#34;&gt;プログラミングをする必要がなくなった後に人間に何が残るのか？ - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに私の親父が現役会社員だったあたりまでの時代にはプログラマとは別に「コーダー」という職業があって「&lt;a href=&#34;https://note.com/__shinji__/n/nde03573dc3a4&#34;&gt;2030年 「エンジニアです。コードは書けません。&lt;/a&gt;」で言うところの「パンチャー」に近い，ひたすら「コードを書く」だけの仕事だったそうな。&lt;/p&gt;
&lt;p&gt;もっと言うと，私がペーペーの新人だった頃の某大手プロジェクトでは詳細設計を「馬鹿でもコードが書ける」くらいまでブレイクダウンさせることが要求されていた。
まぁ，私がちょっと昔に助っ人で入った Java 系プロジェクトでも詳細設計に SQL 文が書いてあって「この通りに入力しろ」と言われたことがあるが（笑）&lt;/p&gt;
&lt;p&gt;実は「ノーコード・プラットフォーム」のようなものは1990年代に一大ブームがあって，当時は CASE と呼ばれていたが&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，私もその手のプロジェクトに参加したことがある。
1990年代のブームには「産業界におけるオブジェクト指向の台頭」という背景があって，つまり「ノーコード・プラットフォーム」ってのはオブジェクト指向の究極というか「夢」なんだよね。&lt;/p&gt;
&lt;p&gt;さて，最初の記事でも紹介されているように「ノーコード・プラットフォーム」が特に AI 分野で注目されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/googleappsheet1app_maker.html&#34;&gt;Googleはなぜノーコード開発ツールのAppSheetを買収し、1年半前に正式版になったばかりのApp Makerを終了させるのか？ － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/06/25/2020-06-24-why-aws-built-a-no-code-tool/&#34;&gt;AWSのノーコードツール「Amazon Honeycode」はなぜ生まれたのか？  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私のようなロートルから見れば「この道はいつか来た道♪」とか思ってしまうのだが，将来どうなるかは（私には）予想できない。
本当に「エンジニアです。コードは書けません」という未来がやってくるかもしれない。&lt;/p&gt;
&lt;p&gt;「プログラミング」について物凄くものすごーく簡単に言うと「データと機能の状態を表現する」ことに尽きる（&lt;a href=&#34;https://text.baldanders.info/remark/2018/10/object-oriented-design/&#34; title=&#34;「オブジェクト指向」の黒歴史&#34;&gt;フローチャート&lt;/a&gt;は忘れよう&lt;code&gt;w&lt;/code&gt;）。
「状態を表現」できるのであれば，穴ボコだろうが文字コードだろうが，もっと別の手段（電子ブロックとか&lt;code&gt;w&lt;/code&gt;）でも構わないわけだ。
ただ，まぁ，本当に AI 技術が情報処理の主役になるのなら，ノイマン型のプラットフォームは衰退するだろうけどね。&lt;/p&gt;
&lt;p&gt;20世紀末に夢見た CASE と比べて「ノーコード・プラットフォーム」は既に特定の「何か」から強い統制を受けている点が異なる。
これは「トレーディングカード」の比喩で考えると分かりやすい。&lt;/p&gt;
&lt;p&gt;トレーディングカードの主な遊び方はデッキを構築して対戦することだ。
デッキの組み方は（定石やローカルルールはあるが）基本的に自由で，人によって無限の組み合わせがあると言っていいだろう。
しかしカードの種類とレアリティは配給企業がコントロールしていて「持たざるもの」に不利に働くようチューニングされている（故に皆「持」とうとする）。
言い換えればプレイヤーに与えられた「自由」はゲームという箱庭の内部にしか存在しない。
箱庭自体を弄ることはできないし，箱庭の外に出る意義もない。&lt;/p&gt;
&lt;p&gt;「ノーコード・プラットフォーム」に限らずクラウド上の XaaS は等しく「箱庭」の境界問題を抱えている。
FOSS を通じて「コードの自由」を知っている私達が「ノーコード・プラットフォーム」の内側だけで満足できるのか。&lt;/p&gt;
&lt;p&gt;まぁ「&lt;a href=&#34;https://text.baldanders.info/remark/2017/01/internet-in-the-incubator/&#34; title=&#34;孵卵器の中のインターネット&#34;&gt;インターネットの黄金時代&lt;/a&gt;」が云々とか言いつつ，結局は「中央集権型のインターネット」に甘んじている現状を見れば，トレーディングカード・ゲームと同じく「箱庭の外に出る意義もない」のかもしれないが（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2020/02/blog-post_24.html&#34;&gt;ブログ: ローコードとノーコードプラットフォームはプログラミングに革命をもたらすか?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B000ALJ18G?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51qbIJBb4WL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B000ALJ18G?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;白秋の詩情~この道 生誕120周年記念~&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;童謡・唱歌 (アーティスト), 米良美一 (アーティスト), タンポポ児童合唱団 (アーティスト), ひばり児童合唱団 (アーティスト), 高橋知子 (アーティスト), サカモト児童合唱団 (アーティスト), 真理ヨシコ (アーティスト), 芹洋子 (アーティスト), 藤家虹二クインテット&amp;#43;α (アーティスト), ダーク・ダックス (アーティスト), ペギー葉山 (アーティスト)&lt;/dd&gt;
    &lt;dd&gt;キングレコード (Release 2005-09-22)&lt;/dd&gt;
    &lt;dd&gt;CD&lt;/dd&gt;
    &lt;dd&gt;B000ALJ18G (ASIN), 4988003313180 (EAN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;北原白秋の童謡集。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-07&#34;&gt;2020-07-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 北原白秋の童謡集 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01G12HBDY?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51DVdNJlojL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01G12HBDY?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;【合本版】問題児たちが異世界から来るそうですよ？　全12巻 (角川スニーカー文庫)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;竜ノ湖 太郎 (著), 天之有 (イラスト), ももこ (イラスト)&lt;/dd&gt;
    &lt;dd&gt;KADOKAWA 2016-06-01 (Release 2016-06-01)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01G12HBDY (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-07&#34;&gt;2020-07-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 問題児たちが異世界から来るそうですよ？ --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;いま世の中にある CASE ツールは，当時の「夢」のかけらもしくはサブセットのようなものなので，実質は違うものと考えていただければ。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Virtue Signaling という広告</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/07/virtue-signaling/" />
		<id>tag:text.Baldanders.info,2020-07-07:/remark/2020/07/virtue-signaling/</id>
		<published>2020-07-07T02:08:21+00:00</published>
		<updated>2020-07-15T04:24:08+00:00</updated>
		<summary>「それは広く配偶選択や社会選択における自分の広告であり，その真実性を担保するためのコストとしての側面を持つのからなのだ」</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;「黄色矮星人は2人いれば力比べを始める」と曰ったのは（最近の肩書は知らないが多分）SF作家の野尻抱介さんだが，差別や社会階級の問題は地球人類が黄色矮星人である限り逃れられない「業」のような気がする。&lt;/p&gt;
&lt;p&gt;とは言え，昨今の黒人差別問題に対する米国社会の反応については首をひねるところもあり，それを象徴する言葉（のひとつ）が &lt;q lang=&#34;en&#34;&gt;Virtue Signaling&lt;/q&gt; なんじゃないかと思った。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;Kleidermacher氏は講演を取りやめると発表したツイートの中で、情報セキュリティ業界に対し、「ブラックハット」「ホワイトハット」「MITM（マンインザミドル）攻撃」などの用語を、中立的な別の用語に切り替えるよう求めた。&lt;/p&gt;
&lt;p&gt;[&amp;hellip;]&lt;/p&gt;
&lt;p&gt;中にはKleidermacher氏の主張に同調した専門家もいたが、大多数は同意せず、この呼びかけを「極端な美徳シグナリング」だととがめた。（美徳シグナリング：virtue signalingは、自分が倫理的であることを過度にアピールするような行為を指し、それをやゆする表現）&lt;/p&gt;
&lt;p&gt;多くのセキュリティ専門家は、これらの用語は人種差別や肌の色とはまったく関係がなく、古い西部劇映画で、悪玉が「黒いハット」を、善玉が「白いハット」を被っていたことに由来していると指摘した。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35156317/&#34;&gt;「ブラックハット」も差別連想？--用語変更についてセキュリティコミュニティで議論に - ZDNet Japan&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;他にも Twitter による&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/twitterwhitelistblacklistmasterslavedummy_value.html&#34;&gt;Twitter、コードやドキュメント内の用語「Whitelist/Blacklist」「Master/Slave」「Dummy value」などを好ましい用語へ置き換え、具体例も発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;みたいな話もあり，マニュアル等ドキュメントの類はあり得るにしても，コードの中身にまで手を入れるのはどうなん？ という気がする。
それを言うなら UNIX 系の &lt;code&gt;kill&lt;/code&gt; コマンドは廃止すべきだよね（笑）&lt;/p&gt;
&lt;p&gt;ところで，この &lt;q lang=&#34;en&#34;&gt;Virtue Signaling&lt;/q&gt; は，どうも昨年出版された本から来ているらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shorebird.hatenablog.com/entry/2020/04/29/093951&#34;&gt;書評　「Virtue Signaling」 - shorebird　進化心理学中心の書評など&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この書評にある&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;ミラーは徳シグナリングは「偽善」の刻印を持つが，なぜそれが悪徳とされずにディスプレイされ続けるのかを考え，それは広く配偶選択や社会選択（部族の一員であることはこの1つとなるだろう）における自分の（配偶者や同盟相手としての優秀性についての）広告であり，その真実性を担保するためのコストとしての側面を持つのからなのだと議論している&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://shorebird.hatenablog.com/entry/2020/04/29/093951&#34;&gt;書評　「Virtue Signaling」&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;の部分は腑に落ちる話で，邦訳版があるならちょっと読んでみたい。&lt;/p&gt;
&lt;p&gt;この考え方でいくと，3.11以降の某ACのテレビ広告とかモロに Virtue Signaling だな（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/01/25/spam-and-media/&#34;&gt;メディアは（常に）スパムか？ «  マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20200713-linux-replace-master-slave/&#34;&gt;Linuxで「マスター／スレイブ」「ブラックリスト／ホワイトリスト」の語句置き換えが決定 - GIGAZINE&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.itmedia.co.jp/news/articles/2007/13/news058.html&#34;&gt;Linuxカーネルでの「master/slave」と「blacklist」禁止、トーバルズ氏が承認 - ITmedia NEWS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B07Y29NV9P?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51v&amp;#43;HI-Sh-L._SL160_.jpg&#34; width=&#34;100&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07Y29NV9P?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Virtue Signaling: Essays on Darwinian Politics &amp;amp; Free Speech (English Edition)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Miller, Geoffrey (著)&lt;/dd&gt;
    &lt;dd&gt;Cambrian Moon 2019-09-17 (Release 2019-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B07Y29NV9P (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://shorebird.hatenablog.com/entry/2020/04/29/093951&#34;&gt;shorebird さんによる書評はこちら&lt;/a&gt;。邦訳版があるなら読んでみたい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-07&#34;&gt;2020-07-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Virtue Signaling (洋書) --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4770501994?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41-vH-XzwbL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4770501994?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ちびくろサンボ&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ヘレン・バナーマン (著), フランク・ドビアス (イラスト)&lt;/dd&gt;
    &lt;dd&gt;径書房 2008-06-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4770501994 (ASIN), 9784770501998 (EAN), 4770501994 (ISBN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;イラスト等原書に近い内容らしい。これは紙のほうがいいかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-07&#34;&gt;2020-07-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ちびくろサンボ --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01GJZKCUC?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/615A9wwvcOL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01GJZKCUC?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Ebony &amp;amp; Ivory (Made Famous by Paul McCartney &amp;amp; Stevie Wonder)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Soul City Singers (メインアーティスト)&lt;/dd&gt;
    &lt;dd&gt;Big Eye Music 2011-02-01 (Release 2011-02-01)&lt;/dd&gt;
    &lt;dd&gt;MP3 ダウンロード&lt;/dd&gt;
    &lt;dd&gt;B01GJZKCUC (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;嗚呼 Stevie Wonder 様！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-07&#34;&gt;2020-07-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Ebony &amp; Ivory --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/430924744X?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51KtN0YwWcL._SL160_.jpg&#34; width=&#34;109&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/430924744X?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;スパム[spam]:インターネットのダークサイド&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;フィン・ブラントン (著), 生貝直人 (監修), 成原慧 (監修), 松浦俊輔 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;河出書房新社 2015-12-25&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;430924744X (ASIN), 9784309247441 (EAN), 430924744X (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;今読んでるけど読みづらい。修飾語が多すぎるよ。ギリシア神話かっての。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-12-10&#34;&gt;2016-12-10&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- スパム --&gt;
</content>
	</entry><entry>
		<title>「無償ボランティア開発」は美談なのか？</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/06/oss/" />
		<id>tag:text.Baldanders.info,2020-06-29:/remark/2020/06/oss/</id>
		<published>2020-06-29T05:32:26+00:00</published>
		<updated>2020-06-29T11:18:05+00:00</updated>
		<summary>「それがぼくには楽しかったから」で済むのは思春期までだよね</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;予防線として最初に断っておくが，私は COCOA そのものに対しては良くも悪くも評価していない。&lt;/p&gt;
&lt;p&gt;前提として，国家レベルで皆保険制度が定着し私のようなビンボー人でも最低限の医療を受けられる社会環境で接触者監視アプリが本当に有用なのか，疑問視している。
他のリスクを無視して「しないよりはマシ」と押し通すのは security theater と同程度には愚かである。&lt;/p&gt;
&lt;p&gt;まぁ，私個人の不穏当な発言はさておき COCOA の開発周りについては色々ときな臭い話を聞いている。
私の &lt;strong&gt;邪推&lt;/strong&gt; を多く含んでいるのでブログには書いてなかったが，Twitter や Facebook の TL で聞きかじった話をまとめるとこんな感じ。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;発注元である厚労省は COCOA の予算が取れなくて HER-SYS の「仕様変更」としてパーソルプロセス＆テクノロジーに押し付け，更にそれを日本マイクロソフトとFIXERへ委託した&lt;/li&gt;
&lt;li&gt;再委託先のMS&amp;amp;FIXERはオープンソースで Xamarin ベースの Covid-19 Radar を fork させた COCOA をリリースした&lt;/li&gt;
&lt;li&gt;COCOA は単なる fork で元の Covid-19 Radar にコード貢献（contribute）しているわけでもなく（実質別プロジェクト），今後 COCOA をどのようにメンテするのかも不透明&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;&lt;/figure&gt;
&lt;p&gt;又聞きで根拠を調べる気もなかったので以後スルーしていたのだが，案外に近い線だったらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rocaz.net/2020/06/2140.html&#34;&gt;#接触確認アプリ #COCOA  の無償ボランティア開発美談は本当か？ | [ bROOM.LOG ! ]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この記事によると COCOA の開発者関係は大雑把に以下のような感じのようだ（図は &lt;a href=&#34;https://twitter.com/piyokango/status/1275625554360668160&#34;&gt;@piyokango さんの tweet&lt;/a&gt; より）。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://twitter.com/piyokango/status/1275625554360668160&#34;&gt;&lt;img src=&#34;./EbPuWgIU4AAu6vo.png&#34; srcset=&#34;./EbPuWgIU4AAu6vo.png 928w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;接触確認アプリCOCOAの主要な関係組織が頭の中で整理できていなかったため、図にしてみました... / Twitter&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://twitter.com/piyokango/status/1275625554360668160&#34;&gt;接触確認アプリCOCOAの主要な関係組織が頭の中で整理できていなかったため、図にしてみました... / Twitter&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;私も会社員時代（←大昔）は「お上」が絡むようなプロジェクトに関わったこともあるので，少なくとも金回りや権利関係の面倒臭さについては承知しているし，そこにツッコむつもりはない。&lt;/p&gt;
&lt;p&gt;しかし，そもそもの話として「無償ボランティア開発」は美談なのか？&lt;/p&gt;
&lt;p&gt;ひとくちに OSS プロジェクトといっても様々な規模と形態がある。
たとえば，&lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;私のように&lt;/a&gt;自分が使うコードに OSS ライセンスをくっつけただけのものもある&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
あるいは &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; のようにボランティア・ベースで大きなコミュニティを抱えている場合もある。
さらに（Linux が典型的だが）社会的に大きな影響力を持つものすらある。&lt;/p&gt;
&lt;p&gt;OSS 製品に「無料」で流通しているものが多いのは確かだし，ボランティア・ベースのコミュニティが多いのも確かだ。
しかし OSS コミュニティに参加しているボランティアは決して「無償」で参加しているわけではない。
何故なら参加者にとって最も価値があるのは「コード貢献」だから。&lt;/p&gt;
&lt;p&gt;実社会に於いては「お金」が血液のように循環することで経済が成り立っているように， OSS コミュニティに於いては「コード」の自由な流通こそが活況への鍵となる。&lt;/p&gt;
&lt;p&gt;しかし，社会的な影響力が大きかったり，ましてや政府調達品であれば必ず責任と義務とお金が付きまとってくる&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
これらをどのように配分するかによってプロジェクトの成否が決まると言ってもいい。
ただそこにあるものを「ガメる」だけでは OSS 版「コモンズの悲劇」だ。&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;&lt;strong&gt;「それがぼくには楽しかったから」で済むのは思春期までだよね&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;これから &lt;a href=&#34;http://shift-inc.co.jp/gtl/generativity/&#34; title=&#34;SHIFT Inc » Generativity&#34;&gt;generativity&lt;/a&gt; を意識した社会へ移行するのなら「新しい革袋」を用意すべきだ。
そういう意味で「無償ボランティア開発」は（悪いとは言わないが少なくとも）美談ではない。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/01/internet-in-the-incubator/&#34;&gt;孵卵器の中のインターネット&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;&lt;img src=&#34;https://tatsu-zine.com/images/books/877/cover_s.jpg&#34; width=&#34;106&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;yomoyomo (著)&lt;/dd&gt;
    &lt;dd&gt;達人出版会 2017-12-25 (Release 2019-03-02)&lt;/dd&gt;
    &lt;dd&gt;デジタル書籍&lt;/dd&gt;
    &lt;dd&gt;infoshare2 (tatsu-zine.com)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://wirelesswire.jp/author/yomoyomo/&#34;&gt;WirelessWire News 連載&lt;/a&gt;の書籍化。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2019/01/infoshare2/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-31&#34;&gt;2018-12-31&lt;/abbr&gt;&lt;/p&gt;
&lt;/div&gt; &lt;!-- 続・情報共有の未来 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://tatsu-zine.com/books/infoshare&#34;&gt;&lt;img src=&#34;https://tatsu-zine.com/images/books/15/cover_s.jpg&#34; width=&#34;106&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://tatsu-zine.com/books/infoshare&#34;&gt;情報共有の未来&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;yomoyomo (著)&lt;/dd&gt;
    &lt;dd&gt;達人出版会 2011-12-30 (Release 2012-02-19)&lt;/dd&gt;
    &lt;dd&gt;デジタル書籍&lt;/dd&gt;
    &lt;dd&gt;infoshare (tatsu-zine.com)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;同名ブログの書籍化。感想は&lt;a href=&#34;https://baldanders.info/blog/000611/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2012-11-03&#34;&gt;2012-11-03&lt;/abbr&gt;&lt;/p&gt;
&lt;/div&gt; &lt;!-- 情報共有の未来 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4796880011?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51WZM2W6ZBL._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4796880011?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;それがぼくには楽しかったから 全世界を巻き込んだリナックス革命の真実 (小プロ・ブックス)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;リーナス トーバルズ (著), デビッド ダイヤモンド (著), 風見 潤 (翻訳), 中島 洋 (監修)&lt;/dd&gt;
    &lt;dd&gt;小学館プロダクション 2001-05-10&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4796880011 (ASIN), 9784796880015 (EAN), 4796880011 (ISBN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Linux の作者 Linus Torvalds の自伝的作品。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-01-23&#34;&gt;2017-01-23&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- それがぼくには楽しかったから --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;私が GitHub リポジトリで公開している &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コードには大抵 &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34; title=&#34;Apache License, Version 2.0&#34;&gt;Apache-2.0&lt;/a&gt; ライセンスを付与しているが，深い理由はない。理由のひとつは，ちゃんと許諾の条件と範囲を示さないと再利用できず公開する意味がないというもので，もうひとつは， &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34; title=&#34;Apache License, Version 2.0&#34;&gt;Apache-2.0&lt;/a&gt; ライセンスが GPL 互換の「自由のライセンス」の中で最も規定が緩い許諾条件のひとつで，しかも特許終了規定が明記されているから，である。 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; は言語仕様やライブラリのレベルで OSS エコシステムへの依存度が高い。なので公開する &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コードに OSS ライセンスを付与するのは合理的なのである。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;大抵の OSS ライセンスが「無保証」を謳っているのは，こうした責任や義務を回避するためでもある。「コードを公開するから最悪は自分で直してね。ほんでよかったらこちらにフィードバック頂戴」というのが本来の OSS 開発のスタイルである。責任や義務を果たすには相応のコストがかかるってことをお忘れなく。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>「特別定額給付金」申請のナニがダメだったのか（その2）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/06/bottleneck2/" />
		<id>tag:text.Baldanders.info,2020-06-12:/remark/2020/06/bottleneck2/</id>
		<published>2020-06-12T03:14:23+00:00</published>
		<updated>2020-06-12T11:31:19+00:00</updated>
		<summary>個人番号カードを使わせるとか余計なことは考えず，最初からちゃっちゃと郵送したほうが最終的にスムーズにいったのではないかと邪推してしまう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;一応「&lt;a href=&#34;https://text.baldanders.info/remark/2020/05/bottleneck/&#34;&gt;「特別定額給付金」申請のナニがダメだったのか&lt;/a&gt;」の続きだが，今回は完全に愚痴なので読まなくてもいいです。&lt;/p&gt;
&lt;p&gt;いや，この記事を見て嘲笑わずにはいられなかったのよ。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;立憲民主党の蓮舫副代表が11日、参議院予算委員会で給付金のITシステムを巡る質問をした際に、「サーバーは増やすんじゃなくて、時代はもうクラウドなんですよ！」と断言した。しかし、クラウドもサーバーにあることに変わりはなく、他党の議員やネット民から「IT系弱すぎる」「知ったかぶり」などと失笑を買う事態になっている&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;http://agora-web.jp/archives/2046561.html&#34;&gt;「クラウド蓮舫」国会質問でIT弱者ぶりが露見して失笑買う – アゴラ&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;まず絵面が完全に「ヤンキー集会」。
国会議員の方々，ホンマご苦労さまです（笑）&lt;/p&gt;
&lt;p&gt;あと「立憲民主党の蓮舫副代表」による「時代はもうクラウド」という発言。
そこだけ切り取ったら10年前の記事だと言われても疑わないね，私は（笑）&lt;/p&gt;
&lt;p&gt;そして「クラウドもサーバーにあることに変わりはなく」という的はずれな感想（？）&lt;/p&gt;
&lt;p&gt;与野党議員とメディアによる「三馬鹿トリオ」爆誕である！&lt;/p&gt;
&lt;p&gt;ネット・サービスに於いて「可用性（availability）」がセキュリティ要件として重視されるのは，それが毀損されることによって「名目上の経済損失」が発生するからだ。
そして，いわゆる「クラウド（cloud）」の特徴である scalability を上手く使えば可用性リスクを抑制することが可能，というのがゼロ年代に持て囃された話だ。&lt;/p&gt;
&lt;p&gt;そういう意味では（オンプレミスから）クラウドへの移行は，今からでも悪い選択ではない。
いまや&lt;a href=&#34;https://www.sakura.ne.jp/function/contentboost/&#34; title=&#34;コンテンツブースト - レンタルサーバーはさくらインターネット&#34;&gt;レンサバですら CDN は当たり前&lt;/a&gt;だしね。&lt;/p&gt;
&lt;p&gt;&lt;ruby&gt;&lt;rb&gt;駄菓子菓子&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;だがしかし&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;。&lt;/p&gt;
&lt;p&gt;今回の「特別定額給付金」のオンライン申請に限れば可用性リスクはさして重要ではない。
理由は以下の3つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;営利ではなく行政サービスなので可用性毀損による「名目上の経済損失」は発生しない&lt;/li&gt;
&lt;li&gt;申請書の郵送が始まるまでの極短期サービス&lt;/li&gt;
&lt;li&gt;そもそも「個人番号カード」の所持率が低い（筈だった&lt;code&gt;w&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁ，金くれるんなら一刻も早くってのは当然の心理だけど。
それで緊急事態下の役所窓口が大混乱するとか，個人番号カード所持や口座情報登録の義務化とか，まさに「泥棒を捕らえてから縄を綯う」の典型例だよな（笑）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/05/bottleneck/&#34; title=&#34;「特別定額給付金」申請のナニがダメだったのか&#34;&gt;前回も書いた&lt;/a&gt;が，最大の障害（ボトルネック）は，サービスが落っこちたことではなく，申請後の受理作業が「人力」である点だろう。&lt;/p&gt;
&lt;p&gt;敢えて今回の件を総括するなら「サーバを増やす」でも「時代はクラウド」でも「個人番号カード所持や口座情報登録の義務化」でもなく「オンライン申請させないほうがよかった」だと思う。
個人番号カードを使わせるとか余計なことは考えず，最初からちゃっちゃと郵送したほうが最終的にスムーズにいったのではないかと邪推してしまう。&lt;/p&gt;
&lt;p&gt;もし個人番号やそれに紐づく住基データを使いたいのであれば，システム全体に渡って &lt;strong&gt;人力を介さず&lt;/strong&gt; 自動化するフレームワークを確立するところから始めるべきだろう。&lt;/p&gt;
&lt;p&gt;デジタル・データというのはそこにあるだけではダメで，データへのアクセス設計をセットにして初めて意味を持つ。
ダダ漏れが駄目なのは当たり前だが，闇雲に制限すればいいというものでもない。
個人情報保護法があろうとなかろうと，人力の力技なんか下の下である。
お金を使うところが間違っている。&lt;/p&gt;
&lt;p&gt;「公僕」とは言うけれど，お役人は奴隷じゃないのよ。
庶民もね。
今回のようなことを繰り返すのなら日本に「ブラック国家」の称号を与えよう（笑）&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B009LFBL4Y?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/412TwuSJT1L._SL160_.jpg&#34; width=&#34;114&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B009LFBL4Y?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;グーグル　ネット覇者の真実&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レヴィ (著), 仲達志；池村千秋 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;CCCメディアハウス 2011-12-16 (Release 2012-08-31)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B009LFBL4Y (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;そういえばこれ Kindle で買い直したのに途中まで読んでそのまま積ん読だったよ。ゼロ年代の Google を中心とした話なのでちょっと古びた感はあるが歴史書としては今でも通用するだろう。書評は&lt;a href=&#34;https://www.yamdas.org/booklog/intheplex.html&#34; title=&#34;yomoyomoの読書記録 - スティーブン・レヴィ『グーグル　ネット覇者の真実　追われる立場から追う立場へ』（阪急コミュニケーションズ）&#34;&gt;こちら&lt;/a&gt;が参考になる。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-11&#34;&gt;2018-12-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- グーグル　ネット覇者の真実 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00QAQEOSW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51wDPAx18RL._SL160_.jpg&#34; width=&#34;102&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00QAQEOSW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;だがしかし（１） (少年サンデーコミックス)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;コトヤマ (著)&lt;/dd&gt;
    &lt;dd&gt;小学館 2014-09-18 (Release 2014-12-08)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00QAQEOSW (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;永遠の夏休み（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-06-12&#34;&gt;2020-06-12&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- だがしかし --&gt;
</content>
	</entry><entry>
		<title>「特別定額給付金」申請のナニがダメだったのか</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/05/bottleneck/" />
		<id>tag:text.Baldanders.info,2020-05-21:/remark/2020/05/bottleneck/</id>
		<published>2020-05-21T01:49:31+00:00</published>
		<updated>2020-05-21T03:53:45+00:00</updated>
		<summary>日本というのは本当に本当におバカな国である。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;「ダメだったのか」って過去形にしちゃったけど別にいいよね，もう今更だし。&lt;/p&gt;
&lt;p&gt;いやね&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/05/20/183407&#34;&gt;特別定額給付金のオンライン申請で起きた問題についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を見て笑っちまったのよ。
特に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;この問題を受け、郵送方式での申請を一部の自治体では推奨しています&lt;/q&gt;。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/05/20/183407&#34;&gt;特別定額給付金のオンライン申請で起きた問題についてまとめてみた&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;の部分。
それってただの「先延ばし」なんだけど（笑）&lt;/p&gt;
&lt;p&gt;今回の「&lt;a href=&#34;https://kyufukin.soumu.go.jp/ja-JP/&#34; title=&#34;総務省｜特別定額給付金&#34;&gt;特別定額給付金&lt;/a&gt;」申請の最大の障害（ボトルネック）は申請受理の作業が「人力」である点だろう。
世帯単位での申請とはいえ人口の多い都会ほど世帯ごとの人数が少なくなるんだから，申請受理の「人力」作業でパンクしてしまうのは火を見るよりも明らか。
その上に個人番号カード発行や関連トラブルで&lt;a href=&#34;https://text.baldanders.info/remark/2020/05/my-number-card/&#34; title=&#34;引っ越ししたら個人番号カードを更新しましょう&#34;&gt;混乱に拍車がかかっている&lt;/a&gt;のだから，ニンともカンとも。&lt;/p&gt;
&lt;p&gt;オンライン申請で「おや？」と思った人も多いと思うが，申請時に提出する「添付書類&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」って「目視」による確認らしいんだよね（そう明記されていた）。
しかも「&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/05/20/183407&#34; title=&#34;特別定額給付金のオンライン申請で起きた問題についてまとめてみた - piyolog&#34;&gt;特別定額給付金のオンライン申請で起きた問題についてまとめてみた&lt;/a&gt;」によると，そもそも申請データと住基データを「人力」で照合するなどという無駄な作業をしているらしい。
ホンマ，馬鹿だよねぇ。&lt;/p&gt;
&lt;p&gt;これも住基ネットの呪いだよなぁ。
いや，むしろ個人情報保護法の呪いか（笑）&lt;/p&gt;
&lt;p&gt;前にもどっかで書いたような気がするが，システムのセキュリティを考える際のポイントは「識別」と「認証」と「許可」の3つであり，これらをいかに上手く分離し組み合わせるかにかかっている。&lt;/p&gt;
&lt;p&gt;かつての住基ネットや現在の個人番号システムの何が下手糞かって，この識別・認証・許可の混同によりサービス・ドメイン毎の適切な運用が阻害されていることだ。
更にこの無能なシステムを「個人情報保護法」なる悪法で無理やり規制しようとする&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; から「&lt;a href=&#34;https://kyufukin.soumu.go.jp/ja-JP/&#34; title=&#34;総務省｜特別定額給付金&#34;&gt;特別定額給付金&lt;/a&gt;」のような子供の思い付きみたいな政策ですら実装困難になってしまうのだ。&lt;/p&gt;
&lt;p&gt;けど，まぁ，&lt;a href=&#34;https://text.baldanders.info/remark/2020/05/my-number-card/&#34; title=&#34;引っ越ししたら個人番号カードを更新しましょう&#34;&gt;前回も書いた&lt;/a&gt;けど，お祭り騒ぎが終われば忘れきって次回以降もまた同じことを繰り返すのだろう。&lt;/p&gt;
&lt;p&gt;日本というのは本当に本当におバカな国である。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hyuki.com/techinfo/uniqid.html&#34;&gt;固有IDのシンプル・シナリオ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;添付書類は「振込先講座の確認書類（写し）申請者名義の通帳やキャッシュカード、インターネットバンキングの画面等の写し又は画像（口座番号、カナ氏名等が分かるもの）」とのこと。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;お忘れの方も多いかもしれないが，個人情報保護法はもともと「住基ネットを規制する」ために（住基法とセットで）考えられたものだ。これに様々な政治的思惑が重なったキメラみたいな法律が現在の個人情報保護法である。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>カリー化に関する覚え書き</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/03/currying/" />
		<id>tag:text.Baldanders.info,2020-03-20:/remark/2020/03/currying/</id>
		<published>2020-03-20T05:30:42+00:00</published>
		<updated>2020-04-07T10:00:37+00:00</updated>
		<summary>関数型プログラミング言語への馴染みが薄いせいですぐ忘れちゃうのよ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どこぞの某ウイルスのせいでメチャメチャ忙しい。
しかもここ1ヶ月くらいですっかり脅威扇動型ビジネス・モデルへと変貌したようで，ホンマにいい迷惑である。
もはやため息しか出ない。
ので，この件は無視することに決めた。&lt;/p&gt;
&lt;p&gt;と，まぁ近況はこれくらいにして，今回は「カリー化」の話。
いや，関数型プログラミング言語への馴染みが薄いせいですぐ忘れちゃうのよ。&lt;/p&gt;
&lt;p&gt;というわけで，覚え書きとして記しておく。&lt;/p&gt;
&lt;h2&gt;カリーは &lt;del&gt;飲みもの&lt;/del&gt; 動詞&lt;/h2&gt;
&lt;p&gt;Wikipedia によると「カリー化（currying）」とは&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;複数の引数をとる関数を、引数が「もとの関数の最初の引数」で戻り値が「もとの関数の残りの引数を取り結果を返す関数」であるような関数にすること&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96&#34;&gt;カリー化 - Wikipedia&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とある。
「カリー」は偉い数学者である Haskell B. Curry の名前から拝借したものらしい。
名前が動詞化しちゃってるのね（笑）&lt;/p&gt;
&lt;p&gt;詳しくは近所の数学オタクに訊きなはれ。&lt;/p&gt;
&lt;h2&gt;関数型言語におけるカリー化&lt;/h2&gt;
&lt;p&gt;ガチの関数型プログラミング言語 &lt;a href=&#34;https://www.haskell.org/&#34; title=&#34;Haskell Language&#34;&gt;Haskell&lt;/a&gt; ではカリー化は言語仕様に組み込まれていて，たとえば関数 &lt;code&gt;add&lt;/code&gt; の定義&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;は実際にはカリー化表現&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;の糖衣構文となっている&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;カリー化のメリットは関数の部分適用（partial application）が作れることで&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span class=&#34;nf&#34;&gt;increment&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば &lt;code&gt;add&lt;/code&gt; を実引数 &lt;code&gt;1&lt;/code&gt; で部分適用とした新しい関数 &lt;code&gt;increment&lt;/code&gt; をシンプルに記述できる。
もちろん，わざわざ名前を付けなくても無名関数として使えばいいのだが。&lt;/p&gt;
&lt;h2&gt;関数型じゃなくてもカリー化はできる&lt;/h2&gt;
&lt;p&gt;ガチの関数型プログラミング言語じゃなくても第一級関数（first-class function）をサポートするプログラミング言語であればカリー化の記述自体は可能である。&lt;/p&gt;
&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;なら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Output: 3
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//partial application
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Output: 3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のように書ける。
JavaScript でも&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Output: 3
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//partial application
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Output: 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と書くことができる。
さらに JavaScript では&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34; title=&#34;アロー関数 - JavaScript | MDN&#34;&gt;アロー関数式&lt;/a&gt;が使えるので，関数 &lt;code&gt;add&lt;/code&gt; の定義を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などと書くことも可能である。
ここまでくると，だいぶ関数型っぽいよね。&lt;/p&gt;
&lt;h2&gt;「それができる」ことと「そのように作られている」ことには天と地ほどの違いがある&lt;/h2&gt;
&lt;p&gt;この記事を書いて思い出したが，随分前に脊髄反射で&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;そんなこと言ってたら Go でだって関数型モドキな記述はできる。「それができる」ことと「そのように作られている」ことには天と地ほどの違いがある。何言ってるんだ、こいつw &lt;a href=&#34;https://t.co/6YsZ0ouDQY&#34;&gt;https://t.co/6YsZ0ouDQY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Der Spiegel im Spiegel (@spiegel_2007) &lt;a href=&#34;https://twitter.com/spiegel_2007/status/1230417545447870465?ref_src=twsrc%5Etfw&#34;&gt;February 20, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;と呟いた。
今回の話はまさにそれ。&lt;/p&gt;
&lt;p&gt;まぁ，そもそも &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合はシンプルを旨とする思想な上に構文（statement）による制約が強いため，関数型っぽい記述には（書けるとしても）向いてない。&lt;/p&gt;
&lt;p&gt;JavaScript は ES5 以降から関数型の要素を大幅に取り込んでいるが， &lt;a href=&#34;https://www.haskell.org/&#34; title=&#34;Haskell Language&#34;&gt;Haskell&lt;/a&gt; と比較すれば分かるとおり，「関数」に対する考え方の根本が異なっている。&lt;/p&gt;
&lt;p&gt;これは良し悪しの問題ではない。
まさに「制約は構造を生む」で，そうして生み出される構造と実装するシステムとの間で無理なくバランスし続けることがシステムを上手に運用するコツで，それこそが言語を選択する最重要ポイントだと思う（仕事ならね）。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;公理によって与えられる暗黙の制約。この制約が集合の要素同士をしっかり結びつける。単純にしばるのではない、相互に秩序ある関係を結ぶ。言い換えれば――公理によって与えられる制約が構造を生み出しているのだ&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00I8AT1CM?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;数学ガール／フェルマーの最終定理&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;システムを維持するために遺産や負債を抱え続けなければならない場合もあるが（それでも限度というか寿命はあるけど），そうでないならわざわざレガシーを選択する必然性は微塵もない。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/7shi/items/145f1234f8ec2af923ef&#34;&gt;Haskell 超入門 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/7shi/items/a0143daac77a205e7962&#34;&gt;カリー化と部分適用（JavaScriptとHaskell） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/suin/items/a44825d253d023e31e4d&#34;&gt;JavaScript: 通常の関数とアロー関数の違いは「書き方だけ」ではない。異なる性質が10個ほどある。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/rust-lang/closure-and-currying/&#34;&gt;関数閉包で遊ぶ&lt;/a&gt; : &lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; でカリー化を書いてみた&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.haskell.org/&#34; title=&#34;Haskell Language&#34;&gt;Haskell&lt;/a&gt; では関数の引数は1つしかとれないためカリー化は必須の要件となる。意図的にカリー化を避けたいのであれば &lt;code&gt;add (x, y) = x + y&lt;/code&gt; のように引数を組（tuple）にすればよい。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;部分適用を上手く使えば，いわゆる OAOO (Once And Only Once) 原則に基づいて効率的なコードにできる。念のために言うと，部分適用を構成するのにカリー化は必要条件ではない。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>#shimanego より： 配列とスライスとソート</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/02/array-slice-sort/" />
		<id>tag:text.Baldanders.info,2020-02-13:/remark/2020/02/array-slice-sort/</id>
		<published>2020-02-13T13:43:11+00:00</published>
		<updated>2020-02-13T13:44:45+00:00</updated>
		<summary>Slice 周りで「あれ？」と思ったらこのスライドのことも思い出してあげてください。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今月も &lt;a href=&#34;https://shimane-go.connpass.com/event/165192/&#34; title=&#34;Shimane.go#04 - connpass&#34;&gt;Shimane.go#04&lt;/a&gt; に参加して図々しくもまた喋ってきた。
以下にそのとき使ったスライドを公開しておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://slide.baldanders.info/shimane-go-2020-02-13/&#34;&gt;配列とスライスとソート | slide.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ターゲットとしては “&lt;a href=&#34;https://go-tour-jp.appspot.com/&#34;&gt;A Tour of Go&lt;/a&gt;” をひととおり終わらせて「なんとなく」 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; が分かってきたかなぁ，という感じの人。
さすが松江は「お膝元」なので Ruby 経験者は多いが &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; には馴染みのない人が多いようなので。&lt;/p&gt;
&lt;p&gt;実はソートの速度とかベンチマークを取ってやろうかとも考えたのだが，いい感じのデータが作れず（ただのランダムなデータ列ならいくらでも作れるけど，多分そうじゃない），諦めた。
いい方法を考えたらそのうちブログ記事にするかも。&lt;/p&gt;
&lt;p&gt;たぶん &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で引っかかりやすいのは &lt;code&gt;interface&lt;/code&gt; と &lt;code&gt;slice&lt;/code&gt; だと思う。
“&lt;code&gt;interface&lt;/code&gt; の &lt;code&gt;slice&lt;/code&gt;” とか最凶ダッグである（笑） ちうわけで &lt;code&gt;slice&lt;/code&gt; 周りで「あれ？」と思ったら&lt;a href=&#34;https://slide.baldanders.info/shimane-go-2020-02-13/&#34; title=&#34;配列とスライスとソート | slide.Baldanders.info&#34;&gt;このスライド&lt;/a&gt;のことも思い出してあげてください。&lt;/p&gt;
&lt;p&gt;まぁでも，やっぱ座学は退屈だよねぇ。
プログラムは書いてナンボだし。
なんか面白い遊びを提示できればいいんだけど。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/array-and-slice/&#34;&gt;配列と Slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/sort/&#34;&gt;ソートを使う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/comparability/&#34;&gt;インスタンスの比較可能性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>#shimanego より： 継承できないなら注入すればいいじゃない！</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/01/dependency-injection-by-golang/" />
		<id>tag:text.Baldanders.info,2020-01-23:/remark/2020/01/dependency-injection-by-golang/</id>
		<published>2020-01-23T13:49:25+00:00</published>
		<updated>2020-01-25T01:57:19+00:00</updated>
		<summary>今回は僭越ながら LT のひとつをやることになったので，ちょっとだけ頑張ったですよ（笑）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://shimane-go.connpass.com/event/159977/&#34; title=&#34;Shimane.go#03 - connpass&#34;&gt;Shimane.go#03&lt;/a&gt; に参加してきた。
今回は僭越ながら LT (Lightning Talk) のひとつをやることになったので，ちょっとだけ頑張ったですよ（笑）&lt;/p&gt;
&lt;p&gt;LT のスライドは以下に置いてある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://slide.baldanders.info/&#34;&gt;slide.Baldanders.info&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://slide.baldanders.info/shimane-go-2020-01-23/&#34;&gt;継承できないなら注入すればいいじゃない！ | slide.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;サイト全体がスライドになっている。
右下の矢印をクリックするか &lt;code&gt;[Page Up]&lt;/code&gt;/&lt;code&gt;[page Down]&lt;/code&gt; または矢印キーの左右でページ送りできる。
スライド自体は &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; title=&#34;Creative Commons — Attribution 4.0 International   — CC BY 4.0&#34;&gt;CC BY&lt;/a&gt; で公開しているので，再利用は（条件の範囲内で）ご自由にどうぞ。&lt;/p&gt;
&lt;p&gt;本当はスライドを書いた &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; 環境も GitHub あたりに公開したかったが，デプロイ用スクリプトとかもリポジトリに含まれているので，公開は見送ることにした。
ゴメンペコン。&lt;/p&gt;
&lt;p&gt;まぁ，私のはポエムみたいなものだが，他の方のは面白かった。
やっぱ &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; をちゃんと仕事で使っている人は要所をキッチリ押さえた内容で，とても勉強になった。&lt;/p&gt;
&lt;p&gt;あと，やっぱ「独り遊び」には限界があることを思い知らされた。
たとえ仕事で使ってなくとも，こうやって興味のあるイベントに参加して他の方の「仕事」を見るのはためになるし，インスピレーションも湧いてくる。
「参加することに意義がある」って，多分こういうときに使う言葉なんだろう。&lt;/p&gt;
&lt;p&gt;ちうわけで，今後も可処分時間の許す限り参加していこうと思っております，はい。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以降，追加のポエム。&lt;/p&gt;
&lt;p&gt;私は「数学ガール」シリーズの中の「制約が構造を生む」というフレーズが大好きだ。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;公理によって与えられる暗黙の制約。この制約が集合の要素同士をしっかり結びつける。単純にしばるのではない、相互に秩序ある関係を結ぶ。言い換えれば――公理によって与えられる制約が構造を生み出しているのだ&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00I8AT1CM?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;数学ガール／フェルマーの最終定理&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;プログラミング言語としての &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; で気に入ってることのひとつは，まさに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; という制約が興味深い構造を生み出している点である。
いつだって新しい言語は面白いのだ（まぁ &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はそろそろ中堅に入るのかもしれないが&lt;code&gt;w&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;いや，世の中「構造を守るために制約を課す」ケースが多すぎると思わない？ 逆だろ，ふつう。
少なくとも「開発」においては「構造を守るために制約を課」してはならないと思っている。
それは「停滞」と同義である。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://togetter.com/li/1459564&#34;&gt;第3回 Shimane.go の様子 - Togetter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/12/slide-site-by-hugo/&#34;&gt;Hugo でスライド・サイトを立てる実験&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>パッケージの管理（モジュール対応版）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/manage-packages/" />
		<id>tag:text.Baldanders.info,2019-12-20:/golang/manage-packages/</id>
		<published>2019-12-20T09:01:26+00:00</published>
		<updated>2020-01-05T11:59:50+00:00</updated>
		<summary>モジュール対応モードでは $GOPATH/src 下にある外部パッケージのコードは参照しない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;随分前に「&lt;a href=&#34;https://text.baldanders.info/golang/go-get-package/&#34;&gt;go get コマンドでパッケージを管理する&lt;/a&gt;」を書いたのだが，内容が古すぎて使い物にならなくなっている。
この記事を全面改訂してもいいのだが，個人的には当時の試行錯誤っぷりに懐かしい気分になったので，これはそのまま手を加えず新たに記事を起こすことにした。
特にパッケージとモジュールの関係に注意して読んでいただければ幸いである。&lt;/p&gt;
&lt;h2&gt;前提条件&lt;/h2&gt;
&lt;p&gt;作業プラットフォームは &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラのバージョンは 1.13.x (またはそれ以上) とする。
環境構築手順は以下を参考にどうぞ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/12/install-ubuntu-to-second-hand-pc/&#34;&gt;中古 PC に Ubuntu 環境を導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各環境変数の値（一部）は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env GOPATH
GO111MODULE=&amp;#34;&amp;#34;
GOARCH=&amp;#34;amd64&amp;#34;
GOCACHE=&amp;#34;/home/username/.cache/go-build&amp;#34;
GOENV=&amp;#34;/home/username/.config/go/env&amp;#34;
GOHOSTARCH=&amp;#34;amd64&amp;#34;
GOHOSTOS=&amp;#34;linux&amp;#34;
GOOS=&amp;#34;linux&amp;#34;
GOPATH=&amp;#34;/home/username/go&amp;#34;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;プラットフォームによって環境変数の値は異なるが凡その振る舞いは同じなので，適当に読み替えていただきたい。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;GO111MODULE&lt;/code&gt; の値として以下を設定できる。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;on&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常にモジュール対応モードで動作する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;off&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に GOPATH モードで動作する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$GOPATH&lt;/code&gt; 以下のディレクトリにあるパッケージは GOPATH モードで，それ以外はモジュール対応モードで動作する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;GO111MODULE&lt;/code&gt; 未定義時の既定は &lt;code&gt;auto&lt;/code&gt;。
なお，バージョン 1.13 からは &lt;code&gt;auto&lt;/code&gt; で &lt;code&gt;$GOPATH&lt;/code&gt; 以下のディレクトリで作業していても &lt;code&gt;go.mod&lt;/code&gt; によるモジュール定義がされている場合はモジュール対応モードで動作するようになった。&lt;/p&gt;
&lt;h2&gt;ありのまま今おこった事を話すぜ！&lt;/h2&gt;
&lt;h3&gt;パッケージ hello を作って実行してみる&lt;/h3&gt;
&lt;p&gt;まずは &lt;code&gt;$GOPATH/src/hello&lt;/code&gt; ディレクトリを作成し，以下のソースコード &lt;code&gt;hello.go&lt;/code&gt; を記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;there&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ついでに動作確認を兼ねてテスト用に &lt;code&gt;example_test.go&lt;/code&gt; ファイルも作っておこう。
中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hello_test&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ExampleHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//Output:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;//Hello World
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go test ./...
ok  	hello	0.001s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とかなればパッケージ &lt;code&gt;hello&lt;/code&gt; の完成である。&lt;/p&gt;
&lt;p&gt;次にパッケージ &lt;code&gt;hello&lt;/code&gt; を使うコードを書いてみる。
&lt;code&gt;$GOPATH/src/sample&lt;/code&gt; ディレクトリを作成し，以下のソースコード &lt;code&gt;sample.go&lt;/code&gt; を記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先程のサンプル関数 &lt;code&gt;ExampleHello()&lt;/code&gt; と同じ内容なので出力結果は同じになる筈である。
このコードをコンパイル&amp;amp;実行してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run sample.go 
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;うんうん。
ここまでは問題なし。&lt;/p&gt;
&lt;h3&gt;パッケージをモジュール化する&lt;/h3&gt;
&lt;p&gt;では，パッケージ &lt;code&gt;hello&lt;/code&gt; と &lt;code&gt;sample&lt;/code&gt; をモジュール化してみよう。&lt;/p&gt;
&lt;p&gt;まずはパッケージ &lt;code&gt;hello&lt;/code&gt; から。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init hello
go: creating new go.mod: module hello

$ go test ./...
ok  	hello	(cached)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;p&gt;つぎはパッケージ &lt;code&gt;sample&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init sample
go: creating new go.mod: module sample

$ go run sample.go 
build command-line-arguments: cannot load hello: cannot find module providing package hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ありゃりゃーん。
コンパイルに失敗しちゃったよ。
パッケージ &lt;code&gt;hello&lt;/code&gt; をロードできないと言っている。
ロード？&lt;/p&gt;
&lt;p&gt;ここで &lt;code&gt;$GOPATH/pkg/linux_amd64&lt;/code&gt; ディレクトリを見るも &lt;code&gt;hello&lt;/code&gt; に対応するコンパイル済みバイナリは存在しない。
それもその筈で，最近の &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラは外部パッケージのロードとコンパイルをモジュール毎に &lt;code&gt;$GOPATH/pkg/mod&lt;/code&gt; および &lt;code&gt;$GOCACHE&lt;/code&gt; ディレクトリ下で行っている&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
したがってモジュール対応モードでは &lt;code&gt;$GOPATH/src&lt;/code&gt; 下にある外部パッケージのコードは参照しないのだ。&lt;/p&gt;
&lt;p&gt;さて，困ったね。&lt;/p&gt;
&lt;h2&gt;解決法1： 強制的に GOPATH モードにする&lt;/h2&gt;
&lt;p&gt;環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; の値を &lt;code&gt;off&lt;/code&gt; にすることにより， &lt;code&gt;go.mod&lt;/code&gt; の有無に依らず強制的に GOPATH モードでビルドすることができる。
上述の例であれば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env -w GO111MODULE=off

$ go run sample.go 
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすればよい&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;ただし &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラの開発側は GOPATH を将来的に無くす方向で議論および開発を進めているため（後方互換性の観点からバージョン 1.x のうちは大丈夫だろうが）このやり方はあまりオススメできない。
暫定措置というやつである。&lt;/p&gt;
&lt;h2&gt;解決法2： replace ディレクティブを使う&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sample&lt;/code&gt; パッケージの &lt;code&gt;go.mod&lt;/code&gt; に以下のディレクティブを追記することで，ローカルにある &lt;code&gt;hello&lt;/code&gt; パッケージのコードを参照するようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;replace hello =&amp;gt; ../hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;replace&lt;/code&gt; ディレクティブは非常に便利なのだが，どうしても環境依存の記述になってしまうのが欠点である。
たとえば外部の CI/CD サービスと組み合わせる場合はローカルの環境と同じになるように設定をチューニングする必要があるかもしれない。
これも暫定措置だよね。&lt;/p&gt;
&lt;h2&gt;解決法3： モジュール・パッケージ構成を再設計する&lt;/h2&gt;
&lt;p&gt;まぁ，身も蓋もない話だが，最終的にはモジュールおよびパッケージの構成を再設計するしかないだろう。&lt;/p&gt;
&lt;p&gt;今回の例で言えば &lt;code&gt;sample&lt;/code&gt; パッケージの構成を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ tree sample
sample
├── go.mod
├── hello
│   ├── example_test.go
│   └── hello.go
└── sample.go

1 directory, 4 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;として &lt;code&gt;sample.go&lt;/code&gt; を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sample/hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と書き換えればいい。
&lt;code&gt;hello&lt;/code&gt; パッケージを &lt;code&gt;sample&lt;/code&gt; モジュール内のサブ・パッケージとして再構成するのである。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;における「モジュール」は「パッケージ（群）＋バージョン」であり，しかもバージョン管理は git 等 VCS の機能に依るところが大きい。
故に「1モジュール＝1リポジトリ」を目安にすべきだろう（でないとバージョン管理が煩雑になる）。
その上で「モジュール＝リポジトリ」内に関係の密なパッケージ（群）を組み込んでいくというのが &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;プログラミング設計の基本的な進め方になると思うのだが，どうだろう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/k-motoyan/items/4213d5ef09963ffea489&#34;&gt;Goモジュールモードでモジュール内に作ったモジュールを扱う - Qiita&lt;/a&gt; : モジュール内にサブ・モジュールを構成すること自体は可能である&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/go-module-aware-mode/&#34;&gt;モジュール対応モードへの移行を検討する&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/versioning-of-go-modules/&#34;&gt;Go モジュールのバージョン管理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;古いバージョンの &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラでは環境変数 &lt;code&gt;GOCACHE&lt;/code&gt; に &lt;code&gt;off&lt;/code&gt; をセットすることでキャッシュ利用を無効化することができたが，最近のバージョンでは &lt;code&gt;off&lt;/code&gt; は設定できなくなっている。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;コマンド &lt;code&gt;go env -w&lt;/code&gt; で設定した環境変数の値を削除するには &lt;code&gt;-u&lt;/code&gt; オプションを使う。例えば &lt;code&gt;go env -u GO111MODULE&lt;/code&gt; のように使う。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>GolangCI でコード・レビューを自動化する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/code-review-with-golangci/" />
		<id>tag:text.Baldanders.info,2019-12-15:/golang/code-review-with-golangci/</id>
		<published>2019-12-15T05:05:25+00:00</published>
		<updated>2020-03-29T00:50:32+00:00</updated>
		<summary>リポジトリ全体をチェックしてくれるレビュー・サービスの存在はありがたい。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;div class=&#34;box&#34;&gt;&lt;p&gt;この記事で紹介した &lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; のレビュー・サービスは 2020-04-15 で終了するらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/golangci/golangci-com-is-closing-d1fc1bd30e0e&#34;&gt;GolangCI.com is closing - golangci - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁ &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;自体がもっと普及しないと営利サービスとしては難しいのかもね。
残念ではあるが lint ツール自体は公開を続けるそうな。
うんうん，よかったよかった。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;以前「&lt;a href=&#34;https://text.baldanders.info/golang/donot-sleep-through-life/&#34;&gt;golangci-lint に叱られる&lt;/a&gt;」で&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;q&gt;&lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; も気になるが，それはまたいつか&lt;/q&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と書いたが，今回はその話。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; は &lt;a href=&#34;https://github.com/&#34; title=&#34;The world’s leading software development platform · GitHub&#34;&gt;GitHub&lt;/a&gt; と連携して機能するコード・レビュー・サービスで， &lt;a href=&#34;https://github.com/&#34; title=&#34;The world’s leading software development platform · GitHub&#34;&gt;GitHub&lt;/a&gt; 上のリポジトリにある &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コードに lint をかけて結果を報告してくれる。
Pull request とも連携してレビュー結果を上げてくれるので，レビューにかかる労力をかなり引き下げることができる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;サインアップは &lt;a href=&#34;https://github.com/&#34; title=&#34;The world’s leading software development platform · GitHub&#34;&gt;GitHub&lt;/a&gt; アカウントで行うことができる。
サインアップに成功したらリポジトリ一覧画面に行けるようになる&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./list-of-reps.jpg&#34;&gt;&lt;img src=&#34;./list-of-reps.jpg&#34; srcset=&#34;./list-of-reps.jpg 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;連携したいリポジトリに &lt;code&gt;[Connect]&lt;/code&gt; するとレビューを開始するのだが，レビュー結果が表示されるまで結構時間がかかるみたい。
実は随分前に &lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; に登録していくつかのパッケージと連携させていたのだが，なかなか処理が終わらないので，そのまま綺麗サッパリ忘れ去っていたのだった（笑）&lt;/p&gt;
&lt;p&gt;レビューが終わったリポジトリの &lt;code&gt;[Report]&lt;/code&gt; を開くとこんな感じの画面になる。
これは問題がなかったリポジトリの場合：&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./result-review-no-error.jpg&#34;&gt;&lt;img src=&#34;./result-review-no-error.jpg&#34; srcset=&#34;./result-review-no-error.jpg 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;こっちは問題が発見されたリポジトリ：&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./result-review-error.jpg&#34;&gt;&lt;img src=&#34;./result-review-error.jpg&#34; srcset=&#34;./result-review-error.jpg 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;このレポート結果を基にコードを修正する。
当然ながら master ブランチ上で作業をしないこと。&lt;/p&gt;
&lt;p&gt;修正を commit &amp;amp; push し，修正を行ったブランチから pull request をかける。
&lt;a href=&#34;https://github.com/&#34; title=&#34;The world’s leading software development platform · GitHub&#34;&gt;GitHub&lt;/a&gt; 側は pull request したコードに対して連携しているサービスを呼び出して事前チェックを行う。
チェックにパスすればこんな感じになる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./pull-request.jpg&#34;&gt;&lt;img src=&#34;./pull-request.jpg&#34; srcset=&#34;./pull-request.jpg 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;問題があれば “Details” で問題箇所が示されるので，修正を行って再度 commit &amp;amp; push する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; には&lt;a href=&#34;https://github.com/golangci/golangci-lint&#34; title=&#34;golangci/golangci-lint: Linters Runner for Go. 5x faster than gometalinter. Nice colored output. Can report only new issues. Fewer false-positives. Yaml/toml config.&#34;&gt;コマンドライン・ツール&lt;/a&gt;も用意されていて IDE やテキストエディタなどとも連携可能なのだが&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，どうしても見落としがあるみたいで，リポジトリ全体をチェックしてくれるレビュー・サービスの存在はありがたい。&lt;/p&gt;
&lt;p&gt;さて，他のパッケージも修正するか。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.classmethod.jp/go/golangci/&#34;&gt;無料で使える Go 言語の CI サービス『GolangCI』を使ってみる ｜ Developers.IO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4542503461?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51CAFNAdZPL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4542503461?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;組込み開発者におくるMISRA‐C:2004―C言語利用の高信頼化ガイド&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;MISRA‐C研究会 (編集)&lt;/dd&gt;
    &lt;dd&gt;日本規格協会 2006-10-01&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4542503461 (ASIN), 9784542503465 (EAN), 4542503461 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私が持っているのはこれよりひとつ古い版だが，まぁいいか。むかし，車載用の組み込みエンジニアをやっていた頃は必読書として読まされました。今はもっと包括的な内容のものがあるはず。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-06&#34;&gt;2019-02-06&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 組込み開発者におくるMISRA‐C:2004 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;とはいえ &lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; がチェックしてくれるのは lint レベルのコード・チェックなので，ビジネスロジック等の妥当性は人間が判断する必要がある。言い方を変えれば &lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; で lint レベルのチェックを事前に行っておけば，人間はビジネスロジック等のチェックに専念することができる。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;既定では公開リポジトリのみが対象となる。お金を払えばプライベート・リポジトリもチェックできるらしいが試していない。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタの場合は &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージで Linter に &lt;a href=&#34;https://github.com/golangci/golangci-lint&#34; title=&#34;golangci/golangci-lint: Linters Runner for Go. 5x faster than gometalinter. Nice colored output. Can report only new issues. Fewer false-positives. Yaml/toml config.&#34;&gt;golangci-lint&lt;/a&gt; を指定できる。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
</feed>
