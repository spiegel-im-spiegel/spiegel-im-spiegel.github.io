<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Engineering - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/engineering/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/engineering/index.xml" />
	<id>tag:text.Baldanders.info,2018-10-22:/tags</id>
	<updated>2018-10-22T15:55:11+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.49.2</generator>

	
	<entry>
		<title>モジュール対応モードへの移行を検討する - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/go-module-aware-mode/" />
		<id>tag:text.Baldanders.info,2018-10-22:/golang/go-module-aware-mode/</id>
		<published>2018-10-22T15:55:11+09:00</published>
		<updated>2018-10-22T16:33:59+09:00</updated>
		<summary>だからみんな。なにはさておき go.mod ファイルを作成するんだ！</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラの&lt;a href=&#34;http://text.baldanders.info/release/2018/09/go-1_11-ise-released/&#34; title=&#34;Go 1.11 のリリースと「モジュール」機能の実験的サポート&#34;&gt;バージョン 1.11&lt;/a&gt;から搭載された「モジュール対応モード」だが，少し試してみてそれなりに使えそうなので，この記事である程度まとめておくことにした。
これからも何かあればこの記事に加筆・修正していく予定である。&lt;/p&gt;

&lt;p&gt;なお，モジュール対応モードは 1.11 時点で preliminary support に過ぎないため，以降のバージョンで大きな変更が行われるかもしれない。
したがってこの記事はバージョン 1.12 以降で大幅に書き替える可能性がる。&lt;/p&gt;

&lt;h2 id=&#34;用語の整理&#34;&gt;用語の整理&lt;/h2&gt;

&lt;p&gt;まず最初に用語の定義をしておく。&lt;/p&gt;

&lt;h3 id=&#34;gopath-モードとモジュール対応モード&#34;&gt;GOPATH モードとモジュール対応モード&lt;/h3&gt;

&lt;p&gt;バージョン 1.11 以降からは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラは以下の2つのモードのどちらかで動作する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cmd1&#34;&gt;&lt;a href=&#34;#fn:cmd1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GOPATH モード (GOPATH mode)&lt;/strong&gt; : バージョン 1.10 までの動作モード。標準ライブラリを除く全てのパッケージの管理とビルドを &lt;code&gt;$GOPATH&lt;/code&gt; 以下のディレクトリで行う。パッケージの管理はリポジトリの最新リビジョンのみが対象となる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;モジュール対応モード (module-aware mode)&lt;/strong&gt; : 標準ライブラリを除く全てのパッケージをモジュールとして管理する。モジュールの管理とビルドは任意のディレクトリで可能で，モジュールはリポジトリのバージョンタグまたはリビジョン毎に管理される&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;モジュール-とは&#34;&gt;「モジュール」とは&lt;/h3&gt;

&lt;p&gt;モジュール対応モードでは，標準ライブラリを除くパッケージを「モジュール（module）」として管理する。
パッケージが &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; 等のバージョン管理ツールで管理されている場合はバージョン毎に異なるモジュールと見なされる。
つまりモジュールの実体は「パッケージ＋バージョン」ということになる。&lt;/p&gt;

&lt;p&gt;ただしコード上ではパッケージとモジュールの間に区別はなく，したがってソースコードを書き換える必要はない。
モジュールはソースコードではなく &lt;code&gt;go.mod&lt;/code&gt; ファイルで管理される。&lt;/p&gt;

&lt;h2 id=&#34;環境変数-go111module&#34;&gt;環境変数 $GO111MODULE&lt;/h2&gt;

&lt;p&gt;バージョン 1.11 では2つのモードの切り替えのために環境変数 &lt;code&gt;$GO111MODULE&lt;/code&gt; でモードを指定する。
環境変数 &lt;code&gt;$GO111MODULE&lt;/code&gt; は以下の値をとり得る。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;on&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常にモジュール対応モードで動作する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;off&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に GOPATH モードで動作する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$GOPATH&lt;/code&gt; 以下のディレクトリにあるパッケージは GOPATH モードで，それ以外はモジュール対応モードで動作する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;バージョン 1.11 では，環境変数 &lt;code&gt;$GO111MODULE&lt;/code&gt; の既定値には &lt;code&gt;auto&lt;/code&gt; が設定されている。
独自の開発環境や IDE を使用しているためモジュール対応モードへの移行が難しい場合には &lt;code&gt;$GO111MODULE&lt;/code&gt; を &lt;code&gt;off&lt;/code&gt; にするとよいだろう。&lt;/p&gt;

&lt;h2 id=&#34;モジュール対応モード移行への準備&#34;&gt;モジュール対応モード移行への準備&lt;/h2&gt;

&lt;p&gt;本格的にモジュール対応モードへ移行する前に，以下の準備を行う。&lt;/p&gt;

&lt;h3 id=&#34;semantic-versioning-によるバージョン管理&#34;&gt;&lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; によるバージョン管理&lt;/h3&gt;

&lt;p&gt;モジュールのバージョンははリポジトリのリビジョン番号またはバージョンタグによって管理されるが，バージョンタグに関しては &lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; のルールに則ってバージョン番号を設定することが推奨されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sv1&#34;&gt;&lt;a href=&#34;#fn:sv1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://research.swtch.com/vgo-import&#34;&gt;&lt;img src=&#34;https://research.swtch.com/impver.png&#34; srcset=&#34;https://research.swtch.com/impver.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Semantic Import Versioning&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://research.swtch.com/vgo-import&#34;&gt;Semantic Import Versioning&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;このように後方互換性のない変更がある場合にはメジャーバージョンを，後方互換性が担保された変更や追加についてはマイナーバージョンを，不具合や脆弱性の修正については第3位のパッチバージョンを上げるようにする。
またメジャーバージョンを上げる際には，図のようにディレクトリを分離するか，旧バージョン用にブランチを切るのがよいだろう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sv2&#34;&gt;&lt;a href=&#34;#fn:sv2&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;バージョンタグによってバージョン管理を行うのであればきちんとルールを決めて管理する必要がある。
リポジトリ管理に &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;Git&lt;/a&gt; を使うのであれば Git Flow や GitHub Flow などが参考になるかも知れない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;A successful Git branching model » nvie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://danielkummer.github.io/git-flow-cheatsheet/&#34;&gt;git-flow cheatsheet&lt;/a&gt; （&lt;a href=&#34;http://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html&#34;&gt;日本語&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scottchacon.com/2011/08/31/github-flow.html&#34;&gt;GitHub Flow – Scott Chacon&lt;/a&gt; （&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;日本語訳&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; 等の SaaS ではバージョンタグを使ったリリース管理がやりやすいように構成されているし，上手く使ってほしい。&lt;/p&gt;

&lt;h3 id=&#34;なにはさておき-go-mod-ファイルを作成する&#34;&gt;なにはさておき go.mod ファイルを作成する&lt;/h3&gt;

&lt;p&gt;モジュール対応モードでは &lt;code&gt;go.mod&lt;/code&gt; ファイルでモジュール管理を行う。
そういうわけで，なにはさておき &lt;code&gt;go.mod&lt;/code&gt; ファイルを作ってしまおう。&lt;/p&gt;

&lt;p&gt;適当なディレクトリで以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init hello
go: creating new go.mod: module hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで &lt;code&gt;hello&lt;/code&gt; というのがモジュール名（厳密にはモジュール・パス）になる。
モジュール名は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の名前として使えるものであれば何でもいいが，パッケージ名（厳密にはパッケージ・パス）と合わせておくと面倒がない。
たとえば &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; に &lt;code&gt;github.com/my/package&lt;/code&gt; というパッケージを公開するのであれば，モジュール名も&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init github.com/my/package
go: creating new go.mod: module github.com/my/package&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;としておくのがいいだろう。&lt;/p&gt;

&lt;p&gt;コンパイル時に参照する &lt;code&gt;go.mod&lt;/code&gt; ファイルがどこにあるかは環境変数 &lt;code&gt;$GOMOD&lt;/code&gt; を見ればよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env GOMOD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;カレント・ディレクトリに &lt;code&gt;go.mod&lt;/code&gt; ファイルがない場合は親ディレクトリに遡って探すようだ。
まぁ，サブパッケージはディレクトリで階層化されているから当然なんだけど。&lt;/p&gt;

&lt;h4 id=&#34;dep-からの移行&#34;&gt;&lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; からの移行&lt;/h4&gt;

&lt;p&gt;既存のパッケージに &lt;code&gt;go.mod&lt;/code&gt; ファイルを追加する場合も同様の操作でよい。
なお &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; を使ってパッケージ管理を行っている場合は &lt;code&gt;Gopkg.lock&lt;/code&gt; ファイルを読んで &lt;code&gt;go.mod&lt;/code&gt; ファイルに組み込んでくれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init github.com/spiegel-im-spiegel/gpgpdump
go: creating new go.mod: module github.com/spiegel-im-spiegel/gpgpdump
go: copying requirements from Gopkg.lock&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんて便利！&lt;/p&gt;

&lt;h4 id=&#34;go-mod-の内容&#34;&gt;go.mod の内容&lt;/h4&gt;

&lt;p&gt;ここで作成した &lt;code&gt;go.mod&lt;/code&gt; ファイルの中身を見てみよう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/spiegel-im-spiegel/gpgpdump&lt;/code&gt; パッケージのリポジトリに対して &lt;code&gt;go mod init&lt;/code&gt; した結果は以下の通りだった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/spiegel-im-spiegel/gpgpdump

require (
    github.com/BurntSushi/toml v0.3.0
    github.com/inconshreveable/mousetrap v1.0.0
    github.com/pkg/errors v0.8.0
    github.com/spf13/cobra v0.0.3
    github.com/spf13/pflag v1.0.2
    github.com/spiegel-im-spiegel/gocli v0.8.0
    golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;module&lt;/code&gt; や &lt;code&gt;require&lt;/code&gt; は命令（directive）と呼ばれるもので，これらの命令を使ってモジュールの管理を行う。
&lt;code&gt;go.mod&lt;/code&gt; ファイルの記述で使える命令は以下の通り。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;記述例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;module&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;module my/thing&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;require&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;require other/thing v1.0.2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exclude&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;exclude old/thing v1.2.3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;replace bad/thing v1.4.5 =&amp;gt; good/thing v1.4.5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;module&lt;/code&gt; はカレント以下のディレクトリにあるパッケージに対するモジュール名を定義する。
前述したようにモジュール名（モジュール・パス）はパッケージ名（パッケージ・パス）と合わせておくほうが面倒がない。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;require&lt;/code&gt; はカレントのモジュールが要求するモジュール名とバージョンを指定する。
つまり &lt;code&gt;require&lt;/code&gt; で指定したモジュールが，カレント・モジュールが依存する外部モジュールとなるわけだ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exclude&lt;/code&gt; は管理から除外するモジュールを指定する。
不具合等で特定のバージョンのモジュールを使いたくないときなどに使える。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;replace&lt;/code&gt; はモジュール名の置き換えである。
パッケージ・パスのリダイレクトなどで名前と実体が一致しないときなどに使える。
たとえば以下のような感じ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ltst1&#34;&gt;&lt;a href=&#34;#fn:ltst1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module md2html

require gopkg.in/russross/blackfriday.v2 latest
replace gopkg.in/russross/blackfriday.v2 latest =&amp;gt; github.com/russross/blackfriday/v2 latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この件については後ほど詳しく説明する。&lt;/p&gt;

&lt;h2 id=&#34;モジュール対応モードで使う主なコマンド&#34;&gt;モジュール対応モードで使う主なコマンド&lt;/h2&gt;

&lt;p&gt;それではモジュール対応モードで色々と操作してみよう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go build&lt;/code&gt; や &lt;code&gt;go test&lt;/code&gt; や &lt;code&gt;go run&lt;/code&gt; のようなコマンドは，モジュール対応モードでも変わりなく使える。
ビルド時に必要なモジュールは自動的にダウンロードされるため，事前に &lt;code&gt;go get -u ./...&lt;/code&gt; みたいなことはしなくていいようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run hello.go
go: finding rsc.io/quote v1.5.2
go: downloading rsc.io/quote v1.5.2
go: finding rsc.io/sampler v1.3.0
go: finding golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
go: downloading rsc.io/sampler v1.3.0
go: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
Hello, world.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお &lt;code&gt;go get&lt;/code&gt; の挙動については後ほど詳しく紹介する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go list&lt;/code&gt; コマンドは &lt;code&gt;-m&lt;/code&gt; オプションを付けることでモジュールに対応した。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go list -m -u all
go: finding github.com/pkg/errors v0.8.0
go: finding github.com/spf13/pflag v1.0.2
go: finding github.com/spf13/cobra v0.0.3
go: finding github.com/BurntSushi/toml v0.3.0
go: finding github.com/spiegel-im-spiegel/gocli v0.8.0
go: finding github.com/inconshreveable/mousetrap v1.0.0
go: finding golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87
go: finding golang.org/x/crypto latest
go: finding github.com/BurntSushi/toml v0.3.1
github.com/spiegel-im-spiegel/gpgpdump
github.com/BurntSushi/toml v0.3.0 [v0.3.1]
github.com/inconshreveable/mousetrap v1.0.0
github.com/pkg/errors v0.8.0
github.com/spf13/cobra v0.0.3
github.com/spf13/pflag v1.0.2
github.com/spiegel-im-spiegel/gocli v0.8.0
golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87 [v0.0.0-20180910181607-0e37d006457b]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果から &lt;code&gt;github.com/BurntSushi/toml&lt;/code&gt; と &lt;code&gt;golang.org/x/crypto&lt;/code&gt; には新しいバージョンがあることが分かる。
この情報を基に &lt;code&gt;go.mod&lt;/code&gt; を調整していけばいいだろう。&lt;/p&gt;

&lt;p&gt;新しく追加されたモジュール対応モード用のコマンド &lt;code&gt;go mod&lt;/code&gt; はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go help mod
Go mod provides access to operations on modules.

Note that support for modules is built into all the go commands,
not just &amp;#39;go mod&amp;#39;. For example, day-to-day adding, removing, upgrading,
and downgrading of dependencies should be done using &amp;#39;go get&amp;#39;.
See &amp;#39;go help modules&amp;#39; for an overview of module functionality.

Usage:

        go mod &amp;lt;command&amp;gt; [arguments]

The commands are:

        download    download modules to local cache
        edit        edit go.mod from tools or scripts
        graph       print module requirement graph
        init        initialize new module in current directory
        tidy        add missing and remove unused modules
        vendor      make vendored copy of dependencies
        verify      verify dependencies have expected content
        why         explain why packages or modules are needed

Use &amp;#34;go help mod &amp;lt;command&amp;gt;&amp;#34; for more information about a command.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;go mod init&lt;/code&gt; は既に紹介したとおり。
他によく使うものといえば &lt;code&gt;go mod download&lt;/code&gt; と &lt;code&gt;go mod graph&lt;/code&gt; だろうか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go mod download&lt;/code&gt; は &lt;code&gt;go get -u ./...&lt;/code&gt; の代わりに使える。
&lt;code&gt;go mod graph&lt;/code&gt; はモジュール間の依存関係を調べるときに使えるだろう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go mod edit&lt;/code&gt; は &lt;code&gt;go.mod&lt;/code&gt; ファイルを編集するためのコマンドだが手で書いたほうが早い（笑） まぁ何らかのバッチ処理で使える感じだろうか。&lt;/p&gt;

&lt;h2 id=&#34;モジュール間の依存関係の構造化&#34;&gt;モジュール間の依存関係の構造化&lt;/h2&gt;

&lt;p&gt;以下のコードに対して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;rsc.io/quote&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;go.mod&lt;/code&gt; ファイルの内容が以下の通りだとする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module hello

require rsc.io/quote v1.5.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これに対して &lt;code&gt;go mod graph&lt;/code&gt; コマンドを実行すると以下のようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod graph
hello rsc.io/quote@v1.5.2
rsc.io/quote@v1.5.2 rsc.io/sampler@v1.3.0
rsc.io/sampler@v1.3.0 golang.org/x/text@v0.0.0-20170915032832-14c0d48ead0c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを図式化すると以下のようになるだろう。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
graph TD
  hello[&#34;hello&#34;]
  quote[&#34;rsc.io/quote@v1.5.2&#34;]
  sampler[&#34;rsc.io/sampler@v1.3.0&#34;]
  text[&#34;golang.org/x/text@v0.0.0-20170915032832-14c0d48ead0c&#34;]

  hello--&#34;hello/go.mod&#34;--&gt;quote
  quote--&#34;rsc.io/quote@v1.5.2/go.mod&#34;--&gt;sampler
  sampler--&#34;rsc.io/sampler@v1.3.0/go.mod&#34;--&gt;text
&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;hello&lt;/code&gt; モジュールは &lt;code&gt;go.mod&lt;/code&gt; より &lt;code&gt;rsc.io/quote@v1.5.2&lt;/code&gt; モジュールを参照している。
&lt;code&gt;rsc.io/quote@v1.5.2&lt;/code&gt; モジュールは自身の &lt;code&gt;go.mod&lt;/code&gt; より &lt;code&gt;rsc.io/sampler@v1.3.0&lt;/code&gt; モジュールを参照している。
同じように &lt;code&gt;rsc.io/sampler@v1.3.0&lt;/code&gt; モジュールからも依存モジュールを参照しているわけだ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hello/go.mod&lt;/code&gt; には &lt;code&gt;rsc.io/sampler@v1.3.0&lt;/code&gt; 等のモジュールについての記述はないが， &lt;code&gt;rsc.io/quote@v1.5.2/go.mod&lt;/code&gt; や &lt;code&gt;rsc.io/sampler@v1.3.0/go.mod&lt;/code&gt; の記述から依存関係を階層的に取得することができる。&lt;/p&gt;

&lt;p&gt;このようにモジュールごとに &lt;code&gt;go.mod&lt;/code&gt; ファイルを記述していくことで依存関係の構造化を実現できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-mvs&#34;&gt;research!rsc: Minimal Version Selection (Go &amp;amp; Versioning, Part 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だからみんな。なにはさておき &lt;code&gt;go.mod&lt;/code&gt; ファイルを作成するんだ！&lt;/p&gt;

&lt;h2 id=&#34;モジュールのキャッシュとビルド-キャッシュ&#34;&gt;モジュールのキャッシュとビルド・キャッシュ&lt;/h2&gt;

&lt;p&gt;パッケージのコンパイル結果は環境変数 &lt;code&gt;$GOCACHE&lt;/code&gt; の示すディレクトリ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bc1&#34;&gt;&lt;a href=&#34;#fn:bc1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; にキャッシュされる。
モジュール対応モードではモジュール単位でキャッシュされるようだ。
したがって &lt;code&gt;$GOCACHE&lt;/code&gt; の値は &lt;code&gt;off&lt;/code&gt; にせず，正しいディレクトリを指定する必要がある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bc2&#34;&gt;&lt;a href=&#34;#fn:bc2&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$GOCACHE&lt;/code&gt; の値は &lt;code&gt;go env&lt;/code&gt; コマンドで確認できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env GOCACHE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ビルド・キャッシュをクリアするには以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go clean -cache&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バージョン 1.11 ではダウンロードしたモジュールのソースコードは &lt;code&gt;$GOPATH/pkg/mod&lt;/code&gt; 以下に格納される。
モジュールのソースコードを含めて全てのキャッシュをクリアするには以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go clean -modcache&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラの将来バージョンでは &lt;code&gt;$GOPATH/pkg&lt;/code&gt; を廃止する予定があるようで，モジュールのキャッシュの置き場が変更される可能性がある。&lt;/p&gt;

&lt;h2 id=&#34;モジュール対応モード-in-travis-ci&#34;&gt;モジュール対応モード in Travis CI&lt;/h2&gt;

&lt;p&gt;CI (Continuous Integration) サービスのひとつである &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;にも対応しているが，処理対象のパッケージを &lt;code&gt;$GOPATH/src&lt;/code&gt; 以下に展開するため GOPATH モードで処理が走ってしまう。
そこで &lt;code&gt;.travis.yml&lt;/code&gt; ファイルを以下のように書き換えて強引にモジュール対応モードにする。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;language&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;go&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1.11.x&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;env&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;global&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GO111MODULE=on&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;install&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mod&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;download&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;script&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;test&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;環境変数の設定部分に注目してほしい。&lt;/p&gt;

&lt;h3 id=&#34;goreleaser-による-deploy&#34;&gt;&lt;a href=&#34;https://goreleaser.com/&#34; title=&#34;GoReleaser | Deliver Go binaries as fast and easily as possible&#34;&gt;GoReleaser&lt;/a&gt; による Deploy&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://goreleaser.com/&#34; title=&#34;GoReleaser | Deliver Go binaries as fast and easily as possible&#34;&gt;GoReleaser&lt;/a&gt; を使って&lt;a href=&#34;http://text.baldanders.info/golang/cross-compiling-in-travis-ci-with-goreleaser/&#34; title=&#34;Travis CI でクロス・コンパイル（GoReleaser 編）&#34;&gt;複数の実行モジュールをビルド&lt;/a&gt;するには &lt;code&gt;.goreleaser.yml&lt;/code&gt; ファイルの &lt;code&gt;builds&lt;/code&gt; 項目に環境変数の設定を追加しておけば安心である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;builds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;env&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GO111MODULE=on&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; で &lt;a href=&#34;https://goreleaser.com/&#34; title=&#34;GoReleaser | Deliver Go binaries as fast and easily as possible&#34;&gt;GoReleaser&lt;/a&gt; を使って deploy を行うには &lt;code&gt;.travis.yml&lt;/code&gt; ファイルを以下のように記述すれば良い。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;language&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;go&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1.11.x&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;env&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;global&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GO111MODULE=on&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;install&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mod&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;download&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;script&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;test&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;deploy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;provider&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;script&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;skip_cleanup&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;script&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;curl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-sL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;https&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;//git.io/goreleaser&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;| bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;  on:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    tags: true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    condition: $TRAVIS_OS_NAME = linux&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;モジュール-パスとパッケージ-パスが一致しない場合&#34;&gt;モジュール・パスとパッケージ・パスが一致しない場合&lt;/h2&gt;

&lt;p&gt;先ほど少し紹介したが &lt;code&gt;gopkg.in/russross/blackfriday.v2&lt;/code&gt; パッケージをモジュールとして記述する例を挙げてみる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bf1&#34;&gt;&lt;a href=&#34;#fn:bf1&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;まず以下のコードを書く。ファイル名は &lt;code&gt;md2html.go&lt;/code&gt; とでもしておこう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;gopkg.in/russross/blackfriday.v2&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;md&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blackfriday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;md&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;md2html.go&lt;/code&gt; に対して以下のようにモジュール定義を行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module md2html

require gopkg.in/russross/blackfriday.v2 latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では実際にコンパイル&amp;amp;実行してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run md2html.go hello.md
go: finding gopkg.in/russross/blackfriday.v2 v2.0.1
go: gopkg.in/russross/blackfriday.v2@v2.0.1: go.mod has non-....v2 module path &amp;#34;github.com/russross/blackfriday/v2&amp;#34; at revision v2.0.1
go: error loading module requirements&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;おおう。
エラーになってしまった。
&lt;code&gt;github.com/russross/blackfriday/v2&lt;/code&gt; なんてパスはねーよ！ とお怒りのようだ。&lt;/p&gt;

&lt;p&gt;パス名 &lt;code&gt;gopkg.in/russross/blackfriday.v2&lt;/code&gt; は &lt;code&gt;github.com/russross/blackfriday&lt;/code&gt; の alias で v2 のコードは v2 ブランチで管理されている。
v2 ブランチにある &lt;code&gt;go.mod&lt;/code&gt; ファイルを見てみると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/russross/blackfriday/v2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と記されているが，実際に v2 ブランチの &lt;a href=&#34;https://github.com/russross/blackfriday/tree/v2&#34;&gt;&lt;code&gt;github.com/russross/blackfriday&lt;/code&gt;&lt;/a&gt; に &lt;code&gt;v2&lt;/code&gt; ディレクトリは存在しない。
このパスの不一致がエラーの原因のようである。&lt;/p&gt;

&lt;p&gt;この不一致を解消するために &lt;code&gt;replace&lt;/code&gt; を追加する。
具体的には以下のように記述する。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-tex&#34; data-lang=&#34;tex&#34;&gt;module md2html

require gopkg.in/russross/blackfriday.v2 latest
&lt;span class=&#34;hl&#34;&gt;replace gopkg.in/russross/blackfriday.v2 latest =&amp;gt; github.com/russross/blackfriday/v2 latest&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;では，この状態でコンパイル&amp;amp;実行してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run md2html.go hello.md
go: finding github.com/russross/blackfriday/v2 v2.0.1
go: downloading github.com/russross/blackfriday/v2 v2.0.1
go: finding github.com/shurcooL/sanitized_anchor_name latest
go: downloading github.com/shurcooL/sanitized_anchor_name v0.0.0-20170918181015-86672fcb3f95
&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というわけでうまく動作したようだ。&lt;/p&gt;

&lt;h2 id=&#34;バージョンを指定して-go-get-を実行する&#34;&gt;バージョンを指定して go get を実行する&lt;/h2&gt;

&lt;p&gt;たとえば私の自作ツールである &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; を自前でビルドすることを考える。&lt;/p&gt;

&lt;p&gt;GOPATH モードでパッケージをダウンロードし実行ファイルをビルドするには以下のコマンドを実行すればよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go get -v github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump
github.com/spiegel-im-spiegel/gpgpdump (download)
github.com/spiegel-im-spiegel/gocli (download)
vendor/golang_org/x/net/dns/dnsmessage
github.com/spiegel-im-spiegel/gocli/exitcode
github.com/spiegel-im-spiegel/gocli/rwi
github.com/inconshreveable/mousetrap
net
github.com/spf13/pflag
github.com/spf13/cobra
github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump/facade
github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ダウンロードした &lt;code&gt;github.com/spiegel-im-spiegel/gpgpdump&lt;/code&gt; パッケージのソースコードとコンパイル結果（実行ファイルを含む）は &lt;code&gt;$GOPATH&lt;/code&gt; 以下に格納される。&lt;/p&gt;

&lt;p&gt;では，モジュール対応モードでバージョンを指定して &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; をビルドしてみよう。
まずは安直に &lt;code&gt;path@version&lt;/code&gt; 形式で実行してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ export GO111MODULE=on

$ go get github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@latest
go: cannot find main module; see &amp;#39;go help modules&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（ちなみに &lt;code&gt;latest&lt;/code&gt; は最新バージョンを指す）&lt;/p&gt;

&lt;p&gt;うーん。
やっぱダメか。
じゃあ &lt;code&gt;go.mod&lt;/code&gt; ファイルを作ってみたらどうなるか。
適当なディレクトリに &lt;code&gt;go.mod&lt;/code&gt; ファイルを作り，再び &lt;code&gt;go get&lt;/code&gt; してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init tools
go: creating new go.mod: module tools

$ go get github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@latest
go: finding github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump latest
go: finding github.com/spiegel-im-spiegel/gpgpdump/cli latest
go: finding github.com/spiegel-im-spiegel/gpgpdump v0.3.8
go: downloading github.com/spiegel-im-spiegel/gpgpdump v0.3.8
go: finding github.com/spf13/pflag v1.0.2
go: finding github.com/pkg/errors v0.8.0
go: finding github.com/inconshreveable/mousetrap v1.0.0
go: finding github.com/spiegel-im-spiegel/gocli v0.8.0
go: finding github.com/BurntSushi/toml v0.3.1
go: finding github.com/spf13/cobra v0.0.3
go: finding golang.org/x/crypto v0.0.0-20181001203147-e3636079e1a4
go: downloading github.com/spiegel-im-spiegel/gocli v0.8.0
go: downloading github.com/spf13/cobra v0.0.3
go: downloading golang.org/x/crypto v0.0.0-20181001203147-e3636079e1a4
go: downloading github.com/BurntSushi/toml v0.3.1
go: downloading github.com/pkg/errors v0.8.0
go: downloading github.com/spf13/pflag v1.0.2
go: downloading github.com/inconshreveable/mousetrap v1.0.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;おおっ，上手くいった（ちなみにモジュール名に意味はない）。&lt;/p&gt;

&lt;p&gt;ソースコードは &lt;code&gt;$GOPATH/pkg/mod&lt;/code&gt; 以下に，ビルド結果の実行ファイルは &lt;code&gt;$GOPATH/bin&lt;/code&gt; に格納される。
ビルド後の &lt;code&gt;go.mod&lt;/code&gt; ファイルの内容は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module tools

require github.com/spiegel-im-spiegel/gpgpdump v0.3.8 // indirect&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで異なるバージョンのビルドも試してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go get github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@v0.3.9-rc3
go: finding github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump v0.3.9-rc3
go: finding github.com/spiegel-im-spiegel/gpgpdump/cli v0.3.9-rc3
go: finding github.com/spiegel-im-spiegel/gpgpdump v0.3.9-rc3
go: downloading github.com/spiegel-im-spiegel/gpgpdump v0.3.9-rc3
go: finding github.com/spiegel-im-spiegel/gocli v0.8.1
go: finding github.com/spf13/pflag v1.0.3
go: finding golang.org/x/crypto v0.0.0-20181015023909-0c41d7ab0a0e
go: downloading github.com/spiegel-im-spiegel/gocli v0.8.1
go: downloading golang.org/x/crypto v0.0.0-20181015023909-0c41d7ab0a0e
go: downloading github.com/spf13/pflag v1.0.3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依存パッケージも含めて異なるバージョンのモジュールがダウンロードされているのが分かるだろうか。
ビルド後の &lt;code&gt;go.mod&lt;/code&gt; ファイルの内容も&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-tex&#34; data-lang=&#34;tex&#34;&gt;module tools

&lt;span class=&#34;hl&#34;&gt;require github.com/spiegel-im-spiegel/gpgpdump v0.3.9-rc3 // indirect&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;とバージョンが書き換わっている。&lt;/p&gt;

&lt;p&gt;というわけで &lt;code&gt;go.mod&lt;/code&gt; ファイルがあればモジュール対応モードでバージョンを指定しビルドすることができるようだ。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;code&gt;path@version&lt;/code&gt; 形式でモジュールを指定できるのは &lt;code&gt;go get&lt;/code&gt; コマンドのみらしい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@latest
package github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@latest: can only use path@version syntax with &amp;#39;go get&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし &lt;code&gt;go.mod&lt;/code&gt; ファイルに &lt;code&gt;require&lt;/code&gt; でモジュールを指定している状態ならバージョン指定を省略して &lt;code&gt;go build&lt;/code&gt; や &lt;code&gt;go run&lt;/code&gt; コマンドが使えるようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go clean -modcache
can&amp;#39;t load package: package tools: unknown import path &amp;#34;tools&amp;#34;: cannot find module providing package tools

$ go run github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump -h
go: finding github.com/spiegel-im-spiegel/gpgpdump v0.3.9-rc3
go: finding github.com/spiegel-im-spiegel/gocli v0.8.1
go: finding github.com/inconshreveable/mousetrap v1.0.0
go: finding github.com/pkg/errors v0.8.0
go: finding github.com/BurntSushi/toml v0.3.1
go: finding github.com/spf13/cobra v0.0.3
go: finding github.com/spf13/pflag v1.0.3
go: finding golang.org/x/crypto v0.0.0-20181015023909-0c41d7ab0a0e
go: downloading github.com/spiegel-im-spiegel/gpgpdump v0.3.9-rc3
go: downloading github.com/spiegel-im-spiegel/gocli v0.8.1
go: downloading github.com/spf13/cobra v0.0.3
go: downloading golang.org/x/crypto v0.0.0-20181015023909-0c41d7ab0a0e
go: downloading github.com/pkg/errors v0.8.0
go: downloading github.com/BurntSushi/toml v0.3.1
go: downloading github.com/spf13/pflag v1.0.3
go: downloading github.com/inconshreveable/mousetrap v1.0.0
Usage:
  gpgpdump [flags] [OpenPGP file]

Flags:
  -a, --armor     accepts ASCII input only
      --debug     for debug
  -h, --help      help for gpgpdump
  -i, --int       dumps multi-precision integers
  -j, --json      output with JSON format
  -l, --literal   dumps literal packets (tag 11)
  -m, --marker    dumps marker packets (tag 10)
  -p, --private   dumps private packets (tag 60-63)
  -t, --toml      output with TOML format
  -u, --utc       output with UTC time
  -v, --version   output version of gpgpdump&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;テストもできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go test github.com/spiegel-im-spiegel/gpgpdump/...
ok      github.com/spiegel-im-spiegel/gpgpdump  0.070s
?       github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump     [no test files]
ok      github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump/facade      0.482s
ok      github.com/spiegel-im-spiegel/gpgpdump/info     0.124s
ok      github.com/spiegel-im-spiegel/gpgpdump/options  0.131s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet   0.412s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/context   0.164s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/pubkey    0.124s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/reader    0.236s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/s2k       0.040s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/tags      0.161s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/values    0.175s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こりゃあ，便利だ。
上手く活用しましょう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/release/2018/09/go-1_11-ise-released/&#34;&gt;Go 1.11 のリリースと「モジュール」機能の実験的サポート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/spiegel-im-spiegel/items/5cb1587cb55d6f6a34d7&#34;&gt;GOPATH モードからモジュール対応モードへ移行せよ&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.wantedly.com/companies/wantedly/post_articles/132270&#34;&gt;Go 1.11 の modules・vgo を試す - 実際に使っていく上で考えないといけないこと #golang | Wantedly Engineer Blog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/go-and-versioning/&#34;&gt;vgo (Versioned Go) に関する覚え書き&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;span class=&#34;fa-sm&#34; style=&#34;color:goldenrod;&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/span&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cmd1&#34;&gt;「GOPATH モード」および「モジュール対応モード」の名称は “&lt;a href=&#34;https://golang.org/cmd/go/&#34; title=&#34;go - The Go Programming Language&#34;&gt;Command go&lt;/a&gt;” の記述から抜き出した。 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;って用語の表記に微妙なブレがあるのがイマイチだよなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cmd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sv1&#34;&gt;リビジョン番号によるバージョン管理も可能だが， &lt;code&gt;v0.0.0-20180816225734-aabede6cba87&lt;/code&gt; のような擬似バージョン番号に置き換えられるため，モジュールのインポート時の運用が煩雑になり推奨できない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sv1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sv2&#34;&gt;異なるメジャーバージョンを同一ディレクトリの同一ブランチで管理していると &lt;code&gt;go.mod&lt;/code&gt; のバージョン番号部分に勝手に “&lt;code&gt;+incompatible&lt;/code&gt;” が付加されてめっさカッコ悪くなる（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sv2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ltst1&#34;&gt;バージョンに &lt;code&gt;latest&lt;/code&gt; を指定すると，コンパイラ側で最新バージョン（またはリビジョン）を探して，最新の番号に置き換えてくれる。 &lt;code&gt;go build&lt;/code&gt; や &lt;code&gt;go test&lt;/code&gt; などを実行するたびに &lt;code&gt;go.mod&lt;/code&gt; ファイルの &lt;code&gt;latest&lt;/code&gt; 表記が書き換えられるので注意すること。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ltst1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bc1&#34;&gt;Windows 環境では &lt;code&gt;$GOCACHE&lt;/code&gt; の既定値は &lt;code&gt;%USERPROFILE%\AppData\Local\go-build&lt;/code&gt; となっているようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bc1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bc2&#34;&gt;バージョン 1.12 以降では &lt;code&gt;$GOCACHE&lt;/code&gt; の値を &lt;code&gt;off&lt;/code&gt; にできなくなる予定である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bc2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bf1&#34;&gt;&lt;code&gt;gopkg.in/russross/blackfriday.v2&lt;/code&gt; パッケージは Markdown コードを HTML 等の書式に変換するパッケージである（参考：&lt;a href=&#34;http://text.baldanders.info/golang/using-blackfriday-v2/&#34;&gt;Markdown パーサ blackfriday.v2 で遊ぶ&lt;/a&gt;）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bf1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『Go ならわかるシステムプログラミング』を眺める - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/10/system-programming-in-golang/" />
		<id>tag:text.Baldanders.info,2018-10-19:/remark/2018/10/system-programming-in-golang/</id>
		<published>2018-10-19T15:31:01+09:00</published>
		<updated>2018-10-20T23:07:55+09:00</updated>
		<summary>Go 言語でシステム寄りのプログラミングを行うのであれば，是非とも目を通しておくべきだろう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の言語仕様について勉強するなら真っ先に『&lt;a href=&#34;http://text.baldanders.info/remark/2016/07/go-programming-language/&#34; title=&#34;『プログラミング言語 Go』を眺める&#34;&gt;プログラミング言語 Go&lt;/a&gt;』を推すが，もう少し実装よりの話であれば『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34; title=&#34;Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 | Amazon&#34;&gt;Go ならわかるシステムプログラミング&lt;/a&gt;』を推す。
特に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;でシステム寄りのプログラミングを行うのであれば，是非とも目を通しておくべきだろう。&lt;/p&gt;

&lt;p&gt;この本は &lt;a href=&#34;http://ascii.jp/&#34;&gt;ASCII.jp&lt;/a&gt; で連載されていた「&lt;a href=&#34;http://ascii.jp/elem/000/001/235/1235262/&#34; title=&#34;ASCII.jp：Goならわかるシステムプログラミング&#34;&gt;Goならわかるシステムプログラミング&lt;/a&gt;」を書籍用に再構成したものらしい。
なので，まずは Web サイトの方を見て紙の本で買うべきか判断するのがいいと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の特徴のひとつがクロス・コンパイルの容易さである。
いくつか制約はあるが，基本的には同じコードで Windows も UNIX 系プラットフォームも対応していて，これを実現するために標準の &lt;a href=&#34;https://golang.org/pkg/syscall/&#34; title=&#34;syscall - The Go Programming Language&#34;&gt;&lt;code&gt;syscall&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://golang.org/pkg/runtime/&#34; title=&#34;runtime - The Go Programming Language&#34;&gt;&lt;code&gt;runtime&lt;/code&gt;&lt;/a&gt; パッケージ周辺を巧妙にカプセル化している。
しかもこれらのソースコードが公開されているため&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:src1&#34;&gt;&lt;a href=&#34;#fn:src1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; システム・プログラミングの学習教材としても使える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sp1&#34;&gt;&lt;a href=&#34;#fn:sp1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;特に『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34; title=&#34;Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 | Amazon&#34;&gt;Go ならわかるシステムプログラミング&lt;/a&gt;』では，ファイルやソケットなどに代表される順次アクセスの汎化である &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Reader&lt;/code&gt; / &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Writer&lt;/code&gt; およびその派生・特化クラス，またプロセスやスレッドに関する解説が秀逸だと思う。
さらに Docker コアの &lt;a href=&#34;https://github.com/docker/libcontainer&#34; title=&#34;docker/libcontainer: PROJECT MOVED TO RUNC&#34;&gt;libcontainer&lt;/a&gt; についても解説があったりする（自前で &lt;a href=&#34;https://github.com/docker/libcontainer&#34; title=&#34;docker/libcontainer: PROJECT MOVED TO RUNC&#34;&gt;libcontainer&lt;/a&gt; を直に触る人はあまりいないかも知れないが）。&lt;/p&gt;

&lt;p&gt;個人的によく出来てると思うのが平行（concurrent）/並列（parallel）処理について解説している13章と14章だ。
プロセスやスレッド（更にはガベージコレクション）と &lt;a href=&#34;https://golang.org/doc/effective_go.html#concurrency&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;goroutine&lt;/a&gt; の関係について日本語で分かりやすく解説している本は少ないと思うので，これだけで『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34; title=&#34;Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 | Amazon&#34;&gt;Go ならわかるシステムプログラミング&lt;/a&gt;』を買っておく価値があると思う&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c1&#34;&gt;&lt;a href=&#34;#fn:c1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html#concurrency&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;goroutine&lt;/a&gt; と channel の組み合わせは並行処理におけるパラダイムシフトとなる可能性がある。
それくらい高いポテンシャルを持っているのだ。
そのための基礎学習を『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34; title=&#34;Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 | Amazon&#34;&gt;Go ならわかるシステムプログラミング&lt;/a&gt;』でやっておくのがいいんじゃないかな。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/go_concurrency_visualize/&#34;&gt;Go言語の並行性を映像化する | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tfutada/items/a289628d8b2d0af6152d&#34;&gt;Go言語の並行処理デザインパターン by Rob Pike 前編 - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tfutada/items/dc8db894ac270a79ef2b&#34;&gt;Go言語の並行処理デザインパターン by Rob Pike 後編 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160706165757.htm&#34;&gt;Big Sky :: golang の channel を使ったテクニックあれこれ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20180531104907.htm&#34;&gt;Big Sky :: Go 言語の非同期パターン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/515xkIcDgXL._SL160_.jpg&#34; width=&#34;113&#34; height=&#34;160&#34; alt=&#34;Goならわかるシステムプログラミング&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34;&gt;Goならわかるシステムプログラミング&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;渋川 よしき&lt;/dd&gt;
      &lt;dd&gt;ラムダノート&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;span class=&#34;fa-sm&#34; style=&#34;color:goldenrod;&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
      &lt;/span&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;ァイルやソケットなどに代表される順次アクセスの汎化である io.Reader / io.Writer およびその派生・特化クラス，またプロセスやスレッドに関する解説が秀逸だと思う。 さらに Docker コアの libcontainer についても解説がある。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;span class=&#34;fa-sm&#34; style=&#34;color:goldenrod;&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/span&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4873118468/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51pUKQajnaL._SL160_.jpg&#34; width=&#34;125&#34; height=&#34;160&#34; alt=&#34;Go言語による並行処理&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4873118468/baldandersinf-22&#34;&gt;Go言語による並行処理&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Katherine Cox-Buday&lt;/dd&gt;
      &lt;dd&gt;オライリージャパン&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:src1&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の標準パッケージは &lt;a href=&#34;https://opensource.org/licenses/mit-license.php&#34; title=&#34;The MIT License | Open Source Initiative&#34;&gt;MIT ライセンス&lt;/a&gt;で公開されている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:src1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sp1&#34;&gt;ちなみに『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34; title=&#34;Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 | Amazon&#34;&gt;Go ならわかるシステムプログラミング&lt;/a&gt;』では，各章の最後に演習問題がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c1&#34;&gt;ただし並行処理のデザインパターン等，もう少し踏み込んだ内容については『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4873118468/baldandersinf-22/&#34; title=&#34;Go言語による並行処理 | Katherine Cox-Buday, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;Go 言語による並行処理&lt;/a&gt;』のほうがいいかも知れない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「オブジェクト指向」の黒歴史 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/10/object-oriented-design/" />
		<id>tag:text.Baldanders.info,2018-10-11:/remark/2018/10/object-oriented-design/</id>
		<published>2018-10-11T18:54:19+09:00</published>
		<updated>2018-10-21T13:34:31+09:00</updated>
		<summary>オブジェクト指向の価値を利便性に置くという考え方には激しく同意する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（もちろんタイトルは釣りです）&lt;/p&gt;

&lt;p&gt;Qiita で面白い記事を見かけた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/gyu-don/items/09db0a298136debfe757&#34;&gt;まだ「オブジェクト指向はこうあるべき」で消耗してるの?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事にあるオブジェクト指向の価値を利便性に置くという考え方には激しく同意する。
その上で，私の黒歴史を交えて，戯れ言をいくつか書いてみよう。&lt;/p&gt;

&lt;h2 id=&#34;プログラミング-で最初に何を学びましたか&#34;&gt;「プログラミング」で最初に何を学びましたか？&lt;/h2&gt;

&lt;p&gt;最近の子らは「プログラミング」で何を学ぶのだろう。&lt;/p&gt;

&lt;p&gt;私が学生の頃（昭和時代）， FORTRAN の授業で真っ先にやらされたのがフローチャートを書くことだった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:p1&#34;&gt;&lt;a href=&#34;#fn:p1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
ちなみに授業の最初のお題は素数を求めるプログラムだった（ありがち&lt;code&gt;w&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;そもそも「コンピュータ」っていうのは，名前の通り，「計算をする機械」なわけですよ。
つまりフローチャートというのは「計算する」ことをモデル化したものなわけ。
だから「計算する」ことに関してはフローチャートで全て表現できる。&lt;/p&gt;

&lt;p&gt;そう思ってた時代がありました。&lt;/p&gt;

&lt;p&gt;それから，まぁ，&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000529.shtml&#34; title=&#34;私はこうしてプログラミングを覚えた — Baldanders.info&#34;&gt;紆余曲折&lt;/a&gt;あって（バブル最盛期に）某システムハウスに潜り込んだのだが，初仕事の設計書で書かせられたのはフローチャートではなく状態遷移表だった。
むしろ「フローチャートなんか要らん（コードを見れば分かる）」と言われましたよ。
これが「社会の現実」ってやつですね，分かります。&lt;/p&gt;

&lt;p&gt;ここで社会に出たての小僧は気づくわけですよ，「コンピュータ」っていうのは「&lt;strong&gt;計算&lt;/strong&gt; をする機械」ではなく「&lt;strong&gt;情報&lt;/strong&gt; を処理する機械」なんだということを。
そして少年は「オブジェクト指向」と出会う（笑）&lt;/p&gt;

&lt;h2 id=&#34;情報-ってなに&#34;&gt;「情報」ってなに？&lt;/h2&gt;

&lt;p&gt;少なくともノイマン型コンピュータにおいては，基本的に以下の3つの機能しかない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指定したアドレスから命令をフェッチして計算する&lt;/li&gt;
&lt;li&gt;指定したアドレスからデータを読む&lt;/li&gt;
&lt;li&gt;指定したアドレスへデータを書く&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指定したアドレス（メモリとは限らない）に何があるのか決めるのはコードを書く人間側の責務であり，それを可能とするプログラミング言語であれば「情報を処理する」ことに関しては何でもできる。&lt;/p&gt;

&lt;p&gt;じゃあ「情報」ってなに？&lt;/p&gt;

&lt;p&gt;「オブジェクト指向」以前の「構造化プログラミング」の時代において，情報とは「データ」と「機能」だった。
しかし「データ」と「機能」だけではコードは簡単に破綻する。
以前に「&lt;a href=&#34;http://text.baldanders.info/remark/2016/06/code-by-hardware-engineer/&#34;&gt;ハード屋が書く C ソースコードが凄まじかった思い出&lt;/a&gt;」という記事を書いたが，これは情報を「データ」と「機能」と考えた場合の極端例と言える。&lt;/p&gt;

&lt;p&gt;では「構造化プログラミング」時代のソフトウェア・エンジニアのコードは何故破綻しなかったのか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:p2&#34;&gt;&lt;a href=&#34;#fn:p2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
ソフトウェア・エンジニアが暗黙的に考えていたこととはなにか。
その答えのひとつが情報を「オブジェクト」と考える「オブジェクト指向」設計ないしはプログラミングである。&lt;/p&gt;

&lt;p&gt;「オブジェクト指向」設計ではオブジェクトを以下の3つの組み合わせと考えた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名前&lt;/li&gt;
&lt;li&gt;状態（属性）&lt;/li&gt;
&lt;li&gt;機能（操作，手段）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に重要なのが「名前」である。
「名前」とは自と他を区別する識別子で，区別することでそこに「関係」が生まれる。&lt;/p&gt;

&lt;p&gt;たとえば「犬は動物の一種である」というのは，「犬」と「動物」の関係が「一種である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:isa1&#34;&gt;&lt;a href=&#34;#fn:isa1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;（is-a）」ことを示す。
C++ や Java では「一種である」という関係を「クラス・オブジェクトの継承」という形で記述するが，継承は「オブジェクト指向」に必須の記述ではない。
Go 言語の構造的部分型（structural subtyping）のような記述だってあるのだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:exc1&#34;&gt;&lt;a href=&#34;#fn:exc1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;つまり「オブジェクト指向」においてはオブジェクトとその関係をモデル化することが重要で，それを記述することができるのであればどんな言語でも構わないのである。&lt;/p&gt;

&lt;p&gt;ちなみに「オブジェクト指向」プログラミングはアセンブラや C 言語でも記述できるし実際にそういうプロジェクトに関わったこともある（大昔の話だよ）。
プログラミング言語はプログラミングの手段に過ぎないということだ。&lt;/p&gt;

&lt;h2 id=&#34;オブジェクト指向-の先へ&#34;&gt;「オブジェクト指向」の先へ&lt;/h2&gt;

&lt;p&gt;しかし今さらアセンブラや C 言語で「オブジェクト指向」なコードを書こうという人は少ない（いや，ほぼいない？）だろう。
では，当時オブジェクト指向プログラミング言語と呼ばれた C++ や Java によって私達ソフトウェア・エンジニアは幸せになれたのだろうか？ 否である！&lt;/p&gt;

&lt;p&gt;これは私見だけど，「オブジェクト指向」の恩恵は「オブジェクト指向」で設計・記述できるようになったことではなく「オブジェクト指向」からの派生でコード記述が文芸的&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bp1&#34;&gt;&lt;a href=&#34;#fn:bp1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; になり意図や文脈を記述するようになってきたことだと思う。&lt;/p&gt;

&lt;p&gt;こうした発展はプログラミング言語のトレンドがオブジェクト指向言語だけではなく関数型言語など複数のパラダイムをブレンドした「マルチパラダイム・プログラミング言語」へシフトしていることからも言えるんじゃないだろうか。
また FOSS が主流となりプログラムコードがエンジニア同士の対話手段として使われるようになったことも影響しているかもしれない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cr1&#34;&gt;&lt;a href=&#34;#fn:cr1&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;そういう意味で「オブジェクト指向はこうあるべき」という議論は不毛で非生産的な行為と言える。
私達はもはやその先に足を踏み入れているのだから。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://0xcc.net/misc/bad-knowhow.html&#34;&gt;バッドノウハウと「奥が深い症候群」&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://postd.cc/why-is-python-so-slow/&#34;&gt;なぜPythonはこんなにも遅いのか？ | POSTD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/11/null-safety/&#34;&gt;「null 安全」について&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/03/generics-vs-duck-typing/&#34;&gt;きみは Generics がとくいなフレンズなんだね，または「制約は構造を生む」&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/11/do-you-understand-what-a-computer-is/&#34;&gt;「自動販売機の気持ちになって考える」&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797339497/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51W3fP3Q%2BtL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797339497/baldandersinf-22/&#34;&gt;あなたはコンピュータを理解していますか? 10年後、20年後まで必ず役立つ根っこの部分がきっちりわかる！ (サイエンス･アイ新書)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;梅津 信幸 &lt;/dd&gt;&lt;dd&gt;ソフトバンク クリエイティブ 2007-03-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797354690/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797354690.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;あなたはネットワークを理解していますか? インターネット時代に欠かせない根っこの知識が確実に身につく! (サイエンス・アイ新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4087474283/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4087474283.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;痛快!コンピュータ学 (集英社文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774124222/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774124222.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;コンピュータのしくみを理解するための10章&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797348747/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797348747.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;カラー図解でわかる通信のしくみ あなたはインターネット&amp;モバイル通信をどこまで理解していますか? (サイエンス・アイ新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797370939/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797370939.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;図解でかんたんアルゴリズム 情報処理のかなめとなる考え方が手に取るようにわかる! (サイエンス・アイ新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822281655/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822281655.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;コンピュータはなぜ動くのか～知っておきたいハードウエア＆ソフトウエアの基礎知識～&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797384298/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797384298.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;コンピューター&amp;テクノロジー解体新書&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822282708/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822282708.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報はなぜビットなのか 知っておきたいコンピュータと情報処理の基礎知識&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4816352481/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4816352481.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;史上最強カラー図解 プロが教えるパソコンのすべてがわかる本&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4794220588/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4794220588.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;文庫 思考する機械コンピュータ (草思社文庫)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;2002年に技術評論社から出た同名タイトルのリニューアルらしい。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-11-24&#34;&gt;2017-11-24&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1FO/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/416jAxVU4NL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1FO/baldandersinf-22/&#34;&gt;数学ガール／乱択アルゴリズム&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ株式会社 2014-02-14&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1D6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1D6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ゲーデルの不完全性定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1CM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／フェルマーの最終定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMK4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ガロア理論&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EYXMA9I/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00EYXMA9I.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMIQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMIQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／式とグラフ&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;工学ガール，リサちゃん登場！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-04-19&#34;&gt;2015/04/19&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:p1&#34;&gt;今どきの子は知らないかも知れないので念のために解説すると，「フローチャート」というのはコンピュータの処理の流れ（工程）を図式した一種のモデリング言語と思っていただいて構わない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:p1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:p2&#34;&gt;いや「動かないコンピュータ」なんてザラにあったけど。むしろ今も見かけるけど（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:p2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:isa1&#34;&gt;ちなみに「A は B の一種である」という関係を「汎化（または特化）」と言う。 “A is a B” と当て嵌めて考えれば分かりやすいだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:isa1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:exc1&#34;&gt;むしろ継承にこだわって菱形継承のような弱点や例外処理のような歪な構造を生み出したことは初期のオブジェクト指向プログラミング言語の黒歴史と言えるだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:exc1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bp1&#34;&gt;これはいわゆる「文芸的プログラミング」とは意味が異なる。紛らわしくてゴメンペコン。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cr1&#34;&gt;まさしく著作権による知的独占からの解放がもたらした好例のひとつですな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cr1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>UNIX 時刻に関する四方山話 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/10/unix-time/" />
		<id>tag:text.Baldanders.info,2018-10-07:/remark/2018/10/unix-time/</id>
		<published>2018-10-07T21:48:19+09:00</published>
		<updated>2018-10-11T12:44:21+09:00</updated>
		<summary>UNIX 時刻について色々と補足を交えながら簡単に紹介してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Nimimal/items/8b2de87a6870707ba60a&#34;&gt;（Tips）これから100年のunix時間は10桁数字。５桁の固定長文字列でも表現できる。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事はなかなか面白かったが UNIX 時刻&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c1&#34;&gt;&lt;a href=&#34;#fn:c1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;  に関する説明がざっくりしすぎているので，補足を交えながら簡単に紹介してみる。&lt;/p&gt;

&lt;h2 id=&#34;時刻系に関するおさらい&#34;&gt;時刻系に関するおさらい&lt;/h2&gt;

&lt;p&gt;UNIX 時刻の説明に入る前に，前提となる時刻系についておさらいしておこう。&lt;/p&gt;

&lt;p&gt;時刻系というのは，時間および時刻を測るために地球人類が考えた「決まりごと」である。
「決まりごと」なので「正しい時刻系」というのは存在しない。
強いて言うなら「考えた人の数だけ時刻系が存在する」。
とはいえ，やたら滅多に林立しても困るので，ある程度の統一を図る必要がある。&lt;/p&gt;

&lt;p&gt;時刻系の歴史について語ると長くなるので，ここでは現代の日常生活に関係の深い2つの時刻系のみ紹介する。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;世界時系&lt;/strong&gt; : 私達は太陽の日周運動&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:s1&#34;&gt;&lt;a href=&#34;#fn:s1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; を基準に生活している。
そこで昔の人は，この日周運動を時刻の基準にすればいいと考えた。
つまり天球&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cs1&#34;&gt;&lt;a href=&#34;#fn:cs1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; 上の平均太陽 (mean solar)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ms1&#34;&gt;&lt;a href=&#34;#fn:ms1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; と子午線との時角を &lt;strong&gt;観測&lt;/strong&gt; し，そこから基準となる時間（の長さ）を決めればいいわけだ。
こうして決めた時刻系を世界時系と呼ぶ。
世界時系の代表が UT (世界時; universal time)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ut1&#34;&gt;&lt;a href=&#34;#fn:ut1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; である。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原子時系&lt;/strong&gt; : いわゆる原子時計のこと。
最初の原子時計の &lt;strong&gt;定義&lt;/strong&gt; は「セシウム133原子の基底状態における2つの超微細準位（$F=4, M=0$ および $F=3, M=0$）の間の遷移に対応する放射の周期の9,192,631,770倍を1秒とする」というもので，基本的に現在でもこの定義が踏襲されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:si1&#34;&gt;&lt;a href=&#34;#fn:si1&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
この原子時計に対して1958年1月1日0時0分0秒 UT2 を原点とした経過時間を TAI (国際原子時; international atomic time) と呼ぶ。
ちなみに GPS の時計も原子時系の一種である。&lt;/p&gt;

&lt;p&gt;世界時系は私達の日常生活にマッチしているが観測値であり一定の時間を刻まない。
原子時系は定義された一定の時間を刻む&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:at1&#34;&gt;&lt;a href=&#34;#fn:at1&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; が日常生活の基準である世界時系から僅かずつ乖離していく。&lt;/p&gt;

&lt;p&gt;UT と TAI を整合させるために考えられたのが UTC (協定世界時; coordinated universal time) である。
UTC は原子時系の一種だが， UT1 との差が1秒未満になるよう閏秒による調整が行われる。
閏秒による調整は不定期だが，遅くとも半年前には告知される。&lt;/p&gt;

&lt;p&gt;現在の UTC は1972年1月1日から運用を開始している。
運用開始時点では $TAI - UTC = 10\,\mathrm{sec}$ だったが，2017年1月1日時点では37秒まで拡大している&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ls1&#34;&gt;&lt;a href=&#34;#fn:ls1&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;unix-時刻-unix-time-とは&#34;&gt;UNIX 時刻（UNIX Time）とは&lt;/h2&gt;

&lt;p&gt;いよいよ本題へ。&lt;/p&gt;

&lt;p&gt;大抵の文献では， POSIX 標準の UNIX 時刻の定義は「1970年1月1日0時0分0秒 UTC からの経過秒数」となっていて，かつては32ビット符号付き整数値で表されていた。
32ビットつまり4オクテット固定長データで表現できるためとても重宝されたが，2,147,483,647秒までしか表現できないため，2038年1月19日3時14分7秒より以降は桁あふれをおこしてしまう。
これがいわゆる「2038年問題」である。&lt;/p&gt;

&lt;h3 id=&#34;2038年問題-の回避策&#34;&gt;「2038年問題」の回避策&lt;/h3&gt;

&lt;p&gt;「2038年問題」の回避方法としては以下の2つがある。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UNIX 時刻を32ビット符号なし整数で表す&lt;/strong&gt; : 場当たり的な対処だが時刻を表すデータの長さを変更することなく移行できるため，古いデータ・フォーマットをそのまま流用できる利点がある。
ただし1970年1月1日0時0分0秒より前の時刻は取り扱えなくなる。
これにより UNIX 時刻は4,294,967,295秒（2106年2月7日6時28分15秒）まで拡張される。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UNIX 時刻を64ビット符号付き整数で表す&lt;/strong&gt; : データ長が倍の8オクテットになるが，抜本的に対応するのであればこちらを選択すべきだろう。
多くの現行システムはこちらでの対応になっている筈である。
これなら9,223,372,036,854,775,807秒（約3000億年）まで表現できる。
ビッグバンからビッグクランチまで（笑）&lt;/p&gt;

&lt;p&gt;もっとも時刻情報については UNIX 時刻以外にも様々な形式が存在するため，あえて UNIX 時刻に拘る必要はないかもしれない。
そもそも1秒未満の桁を表現できない UNIX 時刻はタイムスタンプとしてはもはや機能不足と言える。&lt;/p&gt;

&lt;h3 id=&#34;実装例1-openpgp-における時刻情報&#34;&gt;【実装例1】 OpenPGP における時刻情報&lt;/h3&gt;

&lt;p&gt;OpenPGP (&lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;RFC 4880&lt;/a&gt;) パケットにおける時刻情報は，古い仕様を踏襲する形で，4オクテット固定長で定義されている。
現在，次期仕様（&lt;a href=&#34;https://datatracker.ietf.org/doc/draft-ietf-openpgp-rfc4880bis/&#34; title=&#34;draft-ietf-openpgp-rfc4880bis - OpenPGP Message Format&#34;&gt;RFC 4880bis&lt;/a&gt;）で V5 パケットの仕様が検討されているが，時刻情報に関しては4オクテットのままでいくようだ。&lt;/p&gt;

&lt;h3 id=&#34;実装例2-go-言語-の-time-パッケージ&#34;&gt;【実装例2】 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の time パッケージ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;には標準ライブラリとして &lt;a href=&#34;https://golang.org/pkg/time/&#34; title=&#34;time - The Go Programming Language&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージが用意されているが，時刻を表す &lt;a href=&#34;https://golang.org/pkg/time/&#34; title=&#34;time - The Go Programming Language&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Time&lt;/code&gt; 型は西暦元年1月1日0時を原点としナノ秒単位まで対応している。
また UNIX 時刻を返す関数も用意されているが，この関数の返り値は int64 (64ビット符号付き整数) の値を返す。&lt;/p&gt;

&lt;p&gt;このように最近のシステムやプログラミング言語は時刻に関する独自のクラス・オブジェクトを用意し，後方互換性を保つために UNIX 時刻を扱うメソッドが用意されていることが多い。&lt;/p&gt;

&lt;h2 id=&#34;unix-時刻と-utc&#34;&gt;UNIX 時刻と UTC&lt;/h2&gt;

&lt;p&gt;ところで，前述した UNIX 時刻の定義を見ておかしいとは思わなかっただろうか。&lt;/p&gt;

&lt;p&gt;現在の UTC の運用が始まったのは1972年からである。
なのに UNIX 時刻の原点は「1970年1月1日0時0分0秒 UTC」となっているのだ。
存在しない時刻&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:utc2&#34;&gt;&lt;a href=&#34;#fn:utc2&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; を原点にするなんて，おかしいよね！&lt;/p&gt;

&lt;p&gt;つまり実際の UNIX 時刻は「1970年1月1日0時0分0秒 UTC からの経過秒数」ではなく，グレゴリオ暦と現在の時制のルールに基づいて，2時点間の差分を単純計算しているだけなのである。
このことが最も顕著に現れるのが UTC における閏秒の扱いである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で簡単なコードを書いてみよう。&lt;/p&gt;

&lt;p&gt;かつて2017年1月1日0時0分0秒 UTC の直前に&lt;a href=&#34;http://text.baldanders.info/remark/2016/11/leap-second-2017/&#34; title=&#34;2017年直前の閏秒について&#34;&gt;閏秒が挿入&lt;/a&gt;された。
したがって&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2016&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;December&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;59&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;59&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UTC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2017&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;January&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UTC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;t1 = %v (%v)\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;t2 = %v (%v)\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;t2 - t1 = %v sec\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というコードを書いたとき，もし UNIX 時刻が閏秒を考慮しているのであれば，2時点の UNIX 時刻の差は2になる筈である。
しかし実際に実行してみると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run unix-time.go
t1 = 2016-12-31 23:59:59 +0000 UTC (1483228799)
t2 = 2017-01-01 00:00:00 +0000 UTC (1483228800)
t2 - t1 = 1 sec&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となる。
これは他の言語でも（独自に閏秒に対応していないのであれば）同じようになる筈である。&lt;/p&gt;

&lt;p&gt;まぁ，しかし，これは UNIX 時刻を設計した人を責めるべきではないだろう。&lt;/p&gt;

&lt;p&gt;そもそも UT と UTC の違いを意識してる人なんて殆どいない。
閏秒がネット上で騒がれるようになったのは2012年頃からである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ls2&#34;&gt;&lt;a href=&#34;#fn:ls2&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;。
今さら UNIX 時刻の仕様を変えようものなら逆に大変な騒ぎになりそうである（UNIX 時刻で格納している過去の時刻データが全てオシャカになる）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/leap-second/&#34;&gt;うるう秒は当分存続らしい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/japanese-koyomi/&#34;&gt;「暦」日本史 （再掲載）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B079YJS1J1/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51CPvtuv%2BwL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B079YJS1J1/baldandersinf-22/&#34;&gt;［試して理解］Linuxのしくみ ～実験と図解で学ぶOSとハードウェアの基礎知識&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;武内 覚 &lt;/dd&gt;&lt;dd&gt;技術評論社 2018-02-23&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B079TLW41L/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B079TLW41L.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07C3JFK3V/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07C3JFK3V.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;前処理大全［データ分析のためのSQL/R/Python実践テクニック］&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07BKVP9QY/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07BKVP9QY.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;独学プログラマー Python言語の基本から仕事のやり方まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B078J4TNT1/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B078J4TNT1.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;低レベルプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07CM2YNVD/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07CM2YNVD.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;まんがでわかるLinux シス管系女子3&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07B8T1F4R/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07B8T1F4R.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;江添亮の詳説C++17 (アスキードワンゴ)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B075ST51Y5/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B075ST51Y5.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ふつうのLinuxプログラミング 第2版　Linuxの仕組みから学べるgccプログラミングの王道&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B079Q6S12G/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B079Q6S12G.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;コンテナ・ベース・オーケストレーション Docker/Kubernetesで作るクラウド時代のシステム基盤&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07BBTSX65/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07BBTSX65.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;クラウドエンジニア養成読本［クラウドを武器にするための知識＆実例満載！］ Software Design plus&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07B8GH29F/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07B8GH29F.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C言語本格入門 ～基礎知識からコンピュータの本質まで&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;コンテナ全盛のこの時代にかなり硬派な内容の Linux 解説書。コンピュータの教科書としても使えそう。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-04-30&#34;&gt;2018-04-30&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805202254/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51mQCyP04rL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805202254/baldandersinf-22/&#34;&gt;天体の位置計算&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;長沢 工 &lt;/dd&gt;&lt;dd&gt;地人書館 1985-09&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805206349/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4805206349.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;日の出・日の入りの計算―天体の出没時刻の求め方&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4769908180/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4769908180.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文計算入門―一球面三角から軌道計算まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805204141/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4805204141.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;パソコンで見る天体の動き&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416114710/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4416114710.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文年鑑2015年版&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00R4X7R0M/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00R4X7R0M.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;月刊 星ナビ 2015年 02月号 [雑誌]&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-01-11&#34;&gt;2015/01/11&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01JFLCW5K/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51EnYDL31WL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01JFLCW5K/baldandersinf-22/&#34;&gt;猫暦 ねこよみ コミック 1-3巻セット (ねこぱんちコミックス)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ねこしみず 美濃 &lt;/dd&gt;&lt;dd&gt;少年画報社 2016-07-11&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「寛政の改暦」のころの伊能勘解由（忠敬）とその妻とされる「おえい」の物語。感想は&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/nekoyomi/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-11-29&#34;&gt;2016-11-29&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c1&#34;&gt;この記事では時刻とはある時点からの経過時間を指すものとして書き分けている。時刻を表すには原点となる時点が必須である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:s1&#34;&gt;もちろん地球を中心とした見かけ上の話。正しくは地球の自転運動および太陽を中心とした公転運動を基準にしている，というべきだろう。ちなみに地球の自転運動を基にした時刻系を恒星時系と呼ぶ。世界時系は恒星時系の一種と言える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:s1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cs1&#34;&gt;天球とは地球を中心とした無限遠の仮想球面である。地球から見える月や惑星や太陽などの星々は天球への写像と見做すわけですね。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cs1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ms1&#34;&gt;太陽に対する地球の公転軌道は（ほぼ円に近い）楕円なので，天球上を移動する太陽（真太陽）の移動速度は季節によって僅かに進み遅れが発生する。これに対し，天球上の移動速度が年間で一定となるような仮想的な太陽を平均太陽と呼ぶ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ms1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ut1&#34;&gt;厳密には UT には UT0 から UT2 まである。 UT0 はほぼ生の観測値で，観測地点ごとの UT0 を集計し極運動等の補正をかけたものを UT1 と呼ぶ。 UT2 は UT1 から更に自転速度の年間の進み遅れを補正したものである。現在では UT2 は使われていないようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ut1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:si1&#34;&gt;SI 単位系の「秒」の定義。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:si1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:at1&#34;&gt;「原子時系は一定の時間を刻む」というのは相対論的効果を除外した場合の話。実は，厳密に言うと現在の TAI は相対論的効果などを加味した座標時系として再定義されている。だが日常生活でそれを意識することはないだろう。更に余談だが，座標時系のひとつに TT (地球時; terrestrial time) というのがあって天体力学や位置天文学の分野で使われている。 TAI と TT の間には $TT = TAI + 32.184\,\mathrm{sec}$ という関係がある（したがって，ある時点の UTC が分かれば TT も自動的に求められる）。何故こんな事になっているかについては聞くも涙の歴史物語があったりする（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:at1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ls1&#34;&gt;閏秒に関する議論については「&lt;a href=&#34;http://text.baldanders.info/remark/2016/11/leap-second-2017/&#34;&gt;2017年直前の閏秒について&lt;/a&gt;」あたりを参考にどうぞ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ls1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:utc2&#34;&gt;厳密に言うと1972年以前にも UTC と呼ばれる時刻系は存在していたが，現在の UTC とは全く異なり，どちらかというと UT に近いルールだった。このため管理が煩雑になりすぎて破綻してしまったのだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:utc2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ls2&#34;&gt;情報処理の高速化により秒単位ではギャップが大きくなりすぎるため。またサービスの可用性（availability）に対する要求が高くなったという点も挙げられるだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ls2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Java 11 がリリース - release</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/release/2018/09/java-11-is-released/" />
		<id>tag:text.Baldanders.info,2018-09-27:/release/2018/09/java-11-is-released/</id>
		<published>2018-09-27T09:57:29+09:00</published>
		<updated>2018-10-21T19:16:32+09:00</updated>
		<summary>Oracle Java に関しては，予告どおり，有償の LTS (Long Term Support) としてのリリースとなる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="http://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;予定通り Java 11 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jdk.java.net/11/&#34;&gt;JDK 11 GA Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jdk.java.net/11/release-notes&#34;&gt;JDK 11 Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows 版だとこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java --version
openjdk 11 2018-09-25
OpenJDK Runtime Environment 18.9 (build 11+28)
OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oracle Java に関しては，予告どおり，有償の LTS (Long Term Support) としてのリリースとなる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.oracle.com/thejavatutorials/jdk-11-is-released&#34;&gt;JDK 11 Is Released! | Oracle The Java Tutorials Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/technetwork/java/javase/11-relnotes-5012447.html&#34;&gt;JDK 11 Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/technetwork/jp/java/eol-135779-ja.html&#34;&gt;Oracle Java SE サポート･ロードマップ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有償ではあるが2026年9月までの長期サポート&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:j11&#34;&gt;&lt;a href=&#34;#fn:j11&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; となるため， Java と共に滅びる勇気があるのであれば，そちらに乗り換えるのも手であろう。
なお Java 8 に関しては2019年1月までは無償でサポートされる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:j8p&#34;&gt;&lt;a href=&#34;#fn:j8p&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; が無償で LTS を行うのではないかという希望的観測もあったが，今のところそういう話は聞こえないようだ。
Red Hat など，ディストリビュータによっては独自の延長サポートもあるようなので調べてみるのもいいだろう。&lt;/p&gt;

&lt;p&gt;他には &lt;a href=&#34;https://adoptopenjdk.net/&#34; title=&#34;AdoptOpenJDK - Open source, prebuilt OpenJDK binaries&#34;&gt;AdoptOpenJDK&lt;/a&gt; あたりも良いらしい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:j8&#34;&gt;&lt;a href=&#34;#fn:j8&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;個人的な偏見で言わせてもらえば Java は1980年代から1990年代にかけて起こった UNIX 機メーカ間戦争の遺児みたいなもので，ライブラリやフレームワークを含めてバイナリ互換を目指すのであれば後方互換性は絶対条件である筈だったのだ。
Java 9 以降でそれを投げ捨ててしまった今， Java の優位性はないと声を大にして言いたい。
バイナリ互換を保証しなくていいのなら他に FOSS で優秀なプログラミング言語が幾らでもあるのだから。&lt;/p&gt;

&lt;p&gt;まぁ Java 8 互換バージョンを legacy Java としてできるだけ維持しつつ徐々に Java 縛りから脱却するのが中長期戦略として妥当だと思うのだけどねぇ。&lt;/p&gt;

&lt;h2 id=&#34;2018-10-21-追記-java-11-0-1-がリリース-セキュリティ-リリース&#34;&gt;【2018-10-21 追記】 Java 11.0.1 がリリース（セキュリティ・リリース）&lt;/h2&gt;

&lt;p&gt;2018年10月の定期アップデートに伴い脆弱性の報告が行われている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/20181017-jre.html&#34;&gt;Oracle Java の脆弱性対策について(CVE-2018-3183等)：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jpcert.or.jp/at/2018/at180042.html&#34;&gt;2018年10月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oracle Java だけでなく &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; も更新されているのでアップデートを行うこと。
以下は Windows 64bit 版の場合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java --version
openjdk 11.0.1 2018-10-16
OpenJDK Runtime Environment 18.9 (build 11.0.1+13)
OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13, mixed mode)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;アップデートは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/18/java_11oracle_jdkopenjdk.html&#34;&gt;Java 11正式版がリリース、本バージョンからOracle JDKのサポートは有償に。OpenJDKで無償の長期サポート提供は現時点で期待薄 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/18/microsoft_azurejavaltsmacwindowsokazul_systems.html&#34;&gt;Microsoft Azure上での実行目的ならJavaの長期サポート（LTS）を無料提供、MacやWindowsでの開発用途もOK。マイクロソフトとAzul Systemsが提携で － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gihyo.jp/news/report/2018/10/0501&#34;&gt;【GlassFish勉強会レポート】各JDKベンダの動向を知ってJava 11に備えよう：レポート｜gihyo.jp … 技術評論社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1nFGazvrCvHMZJgFstlbzoHjpAVwv5DEdnaBr_5pKuHo/edit#heading=h.p3qt2oh5eczi&#34;&gt;Java Is Still Free - Google Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1148283.html&#34;&gt;Oracle、「Java SE 11.0.1」「Java SE 8 Update 191」を公開 ～12件の脆弱性を修正 - 窓の杜&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1810/17/news074.html&#34;&gt;Oracle、Javaやデータベースなど301件の脆弱性を修正　速やかに適用を - ITmedia エンタープライズ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/02/release-cycle-of-java-environment/&#34;&gt;Java 環境のリリースとサポートに関する覚え書き&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:j11&#34;&gt;Extended Support の期限。 Sustaining Support であればバージョンに依らず無期限だがお高い。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:j11&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:j8p&#34;&gt;個人ユーザは2020年12月まで無償でサポートされる。ユーザ端末に JRE を入れさせる馬鹿な実装が今だに多いので仕方ないといったところだろうか。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:j8p&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:j8&#34;&gt;&lt;a href=&#34;https://adoptopenjdk.net/support.html&#34; title=&#34;Support | AdoptOpenJDK - Open source, prebuilt OpenJDK binaries&#34;&gt;Java 8 については少なくとも2023年9月まではサポートされる&lt;/a&gt;ようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:j8&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 1.11 のリリースと「モジュール」機能の実験的サポート - release</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/release/2018/09/go-1_11-ise-released/" />
		<id>tag:text.Baldanders.info,2018-09-26:/release/2018/09/go-1_11-ise-released/</id>
		<published>2018-09-26T13:53:04+09:00</published>
		<updated>2018-10-06T19:03:01+09:00</updated>
		<summary>「モジュール」とは，これまで vgo (Versioned Go) として開発が進められてきたものである。この機能について簡単に紹介する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="http://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;1ヶ月も前の話で申し訳ないが，先月末に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラ 1.11 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go1.11&#34;&gt;Go 1.11 is released - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.11&#34;&gt;Go 1.11 Release Notes - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主な変更点は以下の2つ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebAssembly へのコンパイルをサポート&lt;/li&gt;
&lt;li&gt;「モジュール」機能の実験的サポート&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうち，今回は「モジュール」機能のサポートについて簡単に紹介する。&lt;/p&gt;

&lt;p&gt;「モジュール」とは，これまで vgo (Versioned Go) として開発が進められてきたもので&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/go-and-versioning/&#34;&gt;vgo (Versioned Go) に関する覚え書き&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この成果が正式に組み込まれる。
バージョン 1.11 で「モジュール」機能を有効にするには環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; を &lt;code&gt;on&lt;/code&gt; または &lt;code&gt;auto&lt;/code&gt; にセットする。&lt;/p&gt;

&lt;p&gt;ちなみに，環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; を &lt;code&gt;auto&lt;/code&gt; にセットした場合， GOPATH 下のコードについては以前と同じように動作するが，それ以外の場所では「モジュール」機能が有効になる。
1.11 では環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; が既定で auto になっている。&lt;/p&gt;

&lt;p&gt;試しに以下のソースファイル &lt;code&gt;hello.go&lt;/code&gt; を適当なフォルダに作成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;rsc.io/quote&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行しても &lt;code&gt;rsc.io/quote&lt;/code&gt; パッケージがないと怒られてコンパイルエラーになる。
ここまでは従来どおりの動作。&lt;/p&gt;

&lt;p&gt;次に以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init hello
go: creating new go.mod: module hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このコマンドで &lt;code&gt;go.mod&lt;/code&gt; ファイルが生成される。
中身は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;hello.go&lt;/code&gt; ファイルはモジュール &lt;code&gt;hello&lt;/code&gt; のコードとして定義された。&lt;/p&gt;

&lt;p&gt;モジュール名はパッケージのインポート・パスと同じく&lt;a href=&#34;https://golang.org/cmd/go/#hdr-Remote_import_paths&#34;&gt;リポジトリのパスと連動&lt;/a&gt;している。
たとえば &lt;code&gt;hello.go&lt;/code&gt; ファイルをリポジトリ &lt;code&gt;https://github.com/spiegel-im-spiegel/hello&lt;/code&gt; で公開・管理するなら，モジュール名も &lt;code&gt;github.com/spiegel-im-spiegel/hello&lt;/code&gt; となる。&lt;/p&gt;

&lt;p&gt;では，この状態でコードを実行してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run hello.go
go: finding rsc.io/quote v1.5.2
go: downloading rsc.io/quote v1.5.2
go: finding rsc.io/sampler v1.3.0
go: finding golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
go: downloading rsc.io/sampler v1.3.0
go: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
Hello, world.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自動的に &lt;code&gt;rsc.io/quote&lt;/code&gt; およびその依存パッケージがモジュールとして読み込まれていることが分かると思う。
このとき &lt;code&gt;go.mod&lt;/code&gt; ファイルを見ると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module hello

require rsc.io/quote v1.5.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依存モジュールおよびそのバージョンの記述が追加されていることが分かる。
モジュール間の依存関係を見るには以下のコマンドを実行する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dot1&#34;&gt;&lt;a href=&#34;#fn:dot1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod graph
hello rsc.io/quote@v1.5.2
rsc.io/quote@v1.5.2 rsc.io/sampler@v1.3.0
rsc.io/sampler@v1.3.0 golang.org/x/text@v0.0.0-20170915032832-14c0d48ead0c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，読み込まれたモジュールの実体は &lt;code&gt;$GOPATH/mod&lt;/code&gt; フォルダ以下に格納されている。&lt;/p&gt;

&lt;p&gt;更に &lt;code&gt;go.mod&lt;/code&gt; ファイルを以下のように書き換えてみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module hello

require (
	golang.org/x/text v0.3.0
	rsc.io/quote v1.5.2
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この状態で，再び実行してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run hello.go
go: finding golang.org/x/text v0.3.0
go: downloading golang.org/x/text v0.3.0
Hello, world.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;golang.org/x/text&lt;/code&gt; モジュールの v0.3.0 が読み込まれていることが分かる。&lt;/p&gt;

&lt;p&gt;既存のパッケージをモジュールとして定義する際， &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; で管理していると移行がスムーズになる。
自作の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; で試してみよう。&lt;/p&gt;

&lt;p&gt;まずはリポジトリの内容を適当なフォルダに展開し &lt;code&gt;go.mod&lt;/code&gt; ファイルを作成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init github.com/spiegel-im-spiegel/gpgpdump
go: creating new go.mod: module github.com/spiegel-im-spiegel/gpgpdump
go: copying requirements from Gopkg.lock&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依存情報を &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; の &lt;code&gt;Gopkg.lock&lt;/code&gt; ファイルから取得しているのが分かるだろう。
生成された &lt;code&gt;go.mod&lt;/code&gt; ファイルの内容は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/spiegel-im-spiegel/gpgpdump

require (
	github.com/BurntSushi/toml v0.3.0
	github.com/inconshreveable/mousetrap v1.0.0
	github.com/pkg/errors v0.8.0
	github.com/spf13/cobra v0.0.3
	github.com/spf13/pflag v1.0.2
	github.com/spiegel-im-spiegel/gocli v0.8.0
	golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新しいバージョンがリリースされていないか調べる場合は以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go list -m -u all
go: finding github.com/pkg/errors v0.8.0
go: finding github.com/spf13/pflag v1.0.2
go: finding github.com/spf13/cobra v0.0.3
go: finding github.com/BurntSushi/toml v0.3.0
go: finding github.com/spiegel-im-spiegel/gocli v0.8.0
go: finding github.com/inconshreveable/mousetrap v1.0.0
go: finding golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87
go: finding golang.org/x/crypto latest
go: finding github.com/BurntSushi/toml v0.3.1
github.com/spiegel-im-spiegel/gpgpdump
github.com/BurntSushi/toml v0.3.0 [v0.3.1]
github.com/inconshreveable/mousetrap v1.0.0
github.com/pkg/errors v0.8.0
github.com/spf13/cobra v0.0.3
github.com/spf13/pflag v1.0.2
github.com/spiegel-im-spiegel/gocli v0.8.0
golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87 [v0.0.0-20180910181607-0e37d006457b]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この情報を元に &lt;code&gt;go.mod&lt;/code&gt; ファイルを書き換えてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/spiegel-im-spiegel/gpgpdump

require (
&lt;span class=&#34;hl&#34;&gt;	github.com/BurntSushi/toml v0.3
&lt;/span&gt;	github.com/inconshreveable/mousetrap v1.0.0
	github.com/pkg/errors v0.8.0
	github.com/spf13/cobra v0.0.3
	github.com/spf13/pflag v1.0.2
	github.com/spiegel-im-spiegel/gocli v0.8.0
&lt;span class=&#34;hl&#34;&gt;	golang.org/x/crypto latest
&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで最新モジュールを取得できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod download
go: finding golang.org/x/crypto latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;取得後の &lt;code&gt;go.mod&lt;/code&gt; ファイルは以下のように書き換えられる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/spiegel-im-spiegel/gpgpdump

require (
&lt;span class=&#34;hl&#34;&gt;	github.com/BurntSushi/toml v0.3.1
&lt;/span&gt;	github.com/inconshreveable/mousetrap v1.0.0
	github.com/pkg/errors v0.8.0
	github.com/spf13/cobra v0.0.3
	github.com/spf13/pflag v1.0.2
	github.com/spiegel-im-spiegel/gocli v0.8.0
&lt;span class=&#34;hl&#34;&gt;	golang.org/x/crypto v0.0.0-20180910181607-0e37d006457b
&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;んー。
これで &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; からの置き換えができそうかな。
ようやく「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」が解消されるかねぇ。&lt;/p&gt;

&lt;h2 id=&#34;2018-10-04-追記-go-1-11-1-がリリース&#34;&gt;【2018-10-04 追記】 Go 1.11.1 がリリース&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;“go1.11.1 (released 2018/10/01) includes fixes to the compiler, documentation, go command, runtime, and the &lt;code&gt;crypto/x509&lt;/code&gt;, &lt;code&gt;encoding/json&lt;/code&gt;, &lt;code&gt;go/types&lt;/code&gt;, &lt;code&gt;net&lt;/code&gt;, &lt;code&gt;net/http&lt;/code&gt;, and &lt;code&gt;reflect&lt;/code&gt; packages. See the &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.1&#34;&gt;Go 1.11.1 milestone&lt;/a&gt; on our issue tracker for details.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.11.minor&#34;&gt;Release History - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/pokeh/items/c6511ca15c9a33b48fcc&#34;&gt;Go 1.11 リリースノート（和訳） - Qiita&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://dave.cheney.net/2018/07/16/using-go-modules-with-travis-ci&#34;&gt;Using Go modules with Travis CI | Dave Cheney&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/spiegel-im-spiegel/items/5cb1587cb55d6f6a34d7&#34;&gt;GOPATH モードからモジュール対応モードへ移行せよ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dot1&#34;&gt;是非とも dot 言語で出力してほしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dot1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 1.10.3 および 1.9.7 がリリース - release</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/release/2018/06/go-1_10_3-and-1_9_7-are-released/" />
		<id>tag:text.Baldanders.info,2018-06-24:/release/2018/06/go-1_10_3-and-1_9_7-are-released/</id>
		<published>2018-06-24T16:55:53+09:00</published>
		<updated>2018-06-24T16:55:53+09:00</updated>
		<summary>TLS および X.509 関連の改修と vgo 以降のための前準備？ かな。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="http://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;3週間前の話でゴメンペコン。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラの 1.10.3 と 1.9.7 がリリースされている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/_S9YQriFKuU&#34;&gt;Go 1.10.3 and Go 1.9.7 are released - Google Group&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.10.3&#34;&gt;Go 1.10.3 milestone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;These releases include fixes to the go command, and to the crypto/tls, crypto/x509, and strings packages. In particular, they add minimal support to the go command for the vgo transition.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/_S9YQriFKuU&#34;&gt;Go 1.10.3 and Go 1.9.7 are released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ちうわけで Web 関連や暗号関連の製品を手がけている人はご注意を。
vgo サポートについての詳細は以下を参考にするといいだろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/go/+/d4e21288e444d3ffd30d1a0737f15ea3fc3b8ad9&#34;&gt;cmd/go: add minimal module-awareness for legacy operation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお vgo の考え方については以下を参考にどうぞ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/go-and-versioning/&#34;&gt;vgo (Versioned Go) に関する覚え書き&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>技術的負債としての Web ブラウザ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/06/web-browser-as-the-technical-debt/" />
		<id>tag:text.Baldanders.info,2018-06-04:/remark/2018/06/web-browser-as-the-technical-debt/</id>
		<published>2018-06-04T21:12:37+09:00</published>
		<updated>2018-06-04T21:12:37+09:00</updated>
		<summary>しかし，結局ユーザはプライバシーより利便性を選択し，同じ口で Facebook を避難するのだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fastcodesign.com/90174010/bye-chrome-why-im-switching-to-firefox-and-you-should-too&#34;&gt;Bye, Chrome: Why I’m switching to Firefox and you should too&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20180604/chrometofirefox&#34;&gt;今こそブラウザをChromeからFirefoxに乗り換えるべき理由 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firefox を使いだしたのっていつだっけ？ と昔の日記を掘り返してみたら，どうやら2003年頃らしい。
たった15年前か。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log/200304.html#d29&#34;&gt;火の鳥導入 しっぽのさきっちょ 2003年04月 &amp;ndash; Spiegel&amp;rsquo;s Trunk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（ちなみに当時は Phoenix とか Firebird とかなかなか名前が定着しなかった）&lt;/p&gt;

&lt;p&gt;それまでは Opera を（ちゃんとお金を払って）使っていたのだが，あまりのサポートのダメさ加減に見限ったのだった。
決して Firefox が優れていたから乗り換えたわけじゃない。&lt;/p&gt;

&lt;p&gt;はっきり言うが Mozilla/Firefox がユーザのプライバシーに配慮しているというのは嘘っぱちである。
もし本当に Firefox がユーザのプライバシーに配慮していると言うなら既定で 3rd party cookie を無効にしているはずだし検索窓の標準も &lt;a href=&#34;https://duckduckgo.com/&#34; title=&#34;DuckDuckGo — Privacy, simplified.&#34;&gt;DuckDuckGo&lt;/a&gt; になっている筈である。
昨年リリースされた Quantum だって既定でトラッキングをブロックする設定にすべきだったのだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff1&#34;&gt;&lt;a href=&#34;#fn:ff1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
そうしなかったのは何故か。
私企業ではない彼らもやはり市場原理の下に行動せざるを得ないからだ。&lt;/p&gt;

&lt;p&gt;何よりも Mozilla は &lt;a href=&#34;http://text.baldanders.info/remark/2018/03/name-identification/&#34; title=&#34;善悪の葛藤&#34;&gt;Campbridge Analytica の件&lt;/a&gt;が発覚するまで Facebook に広告を出していたのである。
その広告から広告主たる Mozilla が何を得ていたか知らなかったとは言わせない。
あの件以降，そそくさと広告を引っ込めた企業・団体の名前は覚えておいたほうがいい。
連中は Facebook よりも卑劣である（目くそ鼻くそだけど）。&lt;/p&gt;

&lt;p&gt;私たちに示されている選択肢はそう多くない。
企業製以外のブラウザが欲しければ Firefox か Firefox より fork した強化ブラウザを使うしかない。
検索サービスに至っては今や &lt;a href=&#34;https://duckduckgo.com/&#34; title=&#34;DuckDuckGo — Privacy, simplified.&#34;&gt;DuckDuckGo&lt;/a&gt; 一択である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddg1&#34;&gt;&lt;a href=&#34;#fn:ddg1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
しかし，結局ユーザはプライバシーより利便性を選択し，同じ口で Facebook を非難するのだ。
茶番にも程がある。&lt;/p&gt;

&lt;p&gt;こうしてブラウザは（市場原理の名の下に）いつまでもその技術的負債を背負い続けるのであろう。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ff1&#34;&gt;実際に携帯端末用の &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.mozilla.focus&#34; title=&#34;Firefox Focus: プライバシー保護ブラウザー - Google Play&#34;&gt;Firefox Focus&lt;/a&gt; は最初からトラッキングをブロックする設定になっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddg1&#34;&gt;そういえば最初に &amp;ldquo;&lt;a href=&#34;https://www.schneier.com/&#34;&gt;Schneier on Security&lt;/a&gt;” を見たとき，サイト内検索窓が &lt;a href=&#34;https://duckduckgo.com/&#34; title=&#34;DuckDuckGo — Privacy, simplified.&#34;&gt;DuckDuckGo&lt;/a&gt; なのを見つけて「やっぱちゃんとした人はちゃんとしてるんだな」と改めて思ったものである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddg1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Web ページでローカル・フォントを使う - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/05/using-local-fonts-in-web-pages/" />
		<id>tag:text.Baldanders.info,2018-05-13:/remark/2018/05/using-local-fonts-in-web-pages/</id>
		<published>2018-05-13T14:52:10+09:00</published>
		<updated>2018-05-13T14:52:10+09:00</updated>
		<summary>なんだよ，それ。馬鹿すぎる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;いや，個人的には Web フォントで NOTO フォント使えばいいぢゃんって思ってるけど，仕事だと色々と思惑も絡むので簡単には行かないわけさ。
んで Web ページでローカル・フォントを指定する方法についてちょろんと調べてみたので，以下に覚え書きとして残しておく。&lt;/p&gt;

&lt;p&gt;やっぱり問題は日本語フォント。
しかも Windows と macOS の差異だろう。
こんな感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows

&lt;ul&gt;
&lt;li&gt;游ゴシック（Yu Gothic）&lt;/li&gt;
&lt;li&gt;游明朝（Yu Mincho）&lt;/li&gt;
&lt;li&gt;メイリオ（Meiryo）&lt;/li&gt;
&lt;li&gt;ＭＳ Ｐゴシック（MS PGothic）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;macOS

&lt;ul&gt;
&lt;li&gt;游ゴシック体（YuGothic）&lt;/li&gt;
&lt;li&gt;游明朝体（YuMincho）&lt;/li&gt;
&lt;li&gt;ヒラギノ角ゴ Pro W3（Hiragino Kaku Gothic Pro）&lt;/li&gt;
&lt;li&gt;Osaka&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これだけ見たら「游明朝／游ゴシック」で統一すればいいぢゃん，と思うでしょ。
でも「游明朝／游ゴシック」は Windows 7 には標準で入っていない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:win1&#34;&gt;&lt;a href=&#34;#fn:win1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
更に言うと Windows と macOS では「游明朝／游ゴシック」の中身が違うのだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows 用の「游明朝／游ゴシック」には一部の異体字が入っていない&lt;/li&gt;
&lt;li&gt;Windows 用の「游明朝／游ゴシック」の ウェイトは Regular サイズが標準だが macOS 用は Regular サイズが存在しない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんだよ，それ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;まだあるぞ。&lt;/p&gt;

&lt;p&gt;Windows の Internet Explorler (IE) で日本語のローカル・フォントを指定する際には日本語名で指定しないといけないが，どうやらこれが IE だけの特殊ルールらしいのだ。&lt;/p&gt;

&lt;p&gt;sigh&amp;hellip;&lt;/p&gt;

&lt;p&gt;結局 Web ページで「游明朝／游ゴシック」を指定したいなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;gothic&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;游ゴシック Medium&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Yu Gothic Medium&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;YuGothic&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;sans-serif&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;みたいな感じにしないといけないらしい。
馬鹿すぎる。&lt;/p&gt;

&lt;p&gt;これではあまりにカオスなので以下のように &lt;code&gt;@font-face&lt;/code&gt; を定義してみた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;font-face&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;HiGothic-local&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;font-style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;normal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ヒラギノ角ゴ Pro W3&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hiragino Kaku Gothic Pro&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;font-face&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;YuGothic-local&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;font-style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;normal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;游ゴシック Medium&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Yu Gothic Medium&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;游ゴシック体&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;YuGothic&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;font-face&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;MSGothic-local&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;font-style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;normal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ＭＳ Ｐゴシック&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;MS PGothic&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;font-face&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;SansJP-local&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;font-style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;normal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;メイリオ&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Meiryo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Osaka&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こうしておけば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;gothic&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;HiGothic-local&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;YuGothic-local&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;SansJP-local&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;MSGothic-local&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;sans-serif&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という感じに多少スッキリするのではないかと。&lt;/p&gt;

&lt;p&gt;ちなみに iOS はフォントの種類が限られている（日本語はヒラギノ・フォント）ので serif /  sans-serif を指定すれば対応できる。
更に Android には明朝体がない上，ゴシック体についても端末メーカが各々独自の日本語フォントを入れているらしい。
だから日本はガラｐ&amp;hellip;&lt;/p&gt;

&lt;p&gt;くぁｗせｄｒｆｔｇｙふじこｌｐ&lt;/p&gt;

&lt;p&gt;&amp;hellip;やっぱ Web フォントでいいと思うなぁ。
ローカル・フォントは serif /  sans-serif で指定すれば十分だろう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.webdlab.com/css/font-text-font-family/&#34;&gt;font-family【CSSリファレンス】 | Webデザインラボ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.csstux.com/font-family.html&#34;&gt;font-familyには何を指定すればいい？ - csstux.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mw-s.jp/2017css-font-win-mac/&#34;&gt;2017年版個人的ベスト｜CSSフォント指定WIN、MACでキレイに表示（ゴシック、明朝）｜MWORKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mirucon.com/2017/03/04/android-font-family/&#34;&gt;Android における最適なフォント環境を考えてみる – ミルログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:win1&#34;&gt;Windows Vista, XP は論外ね。つまり IE 11 より前のバージョンはもう考えなくていいと思う。ベストは一刻も早く IE が滅亡することだけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:win1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 1.10.2 および 1.9.6 がリリース - release</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/release/2018/05/go-1_10_2-and-1_9_6-are-released/" />
		<id>tag:text.Baldanders.info,2018-05-07:/release/2018/05/go-1_10_2-and-1_9_6-are-released/</id>
		<published>2018-05-07T19:24:19+09:00</published>
		<updated>2018-05-07T19:24:19+09:00</updated>
		<summary>セキュリティアップデートではないが，結構こまかく変わってるみたいなので，早めのアップデートを推奨かな。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="http://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラの 1.10.2 と 1.9.6 がリリースされている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/qXEbop4t-Wg&#34;&gt;Go 1.10.2 and Go 1.9.6 are released - Google Group&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.10.2&#34;&gt;Go 1.10.2 milestone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;These releases include fixes to the compiler, linker, and go command.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/qXEbop4t-Wg&#34;&gt;Go 1.10.2 and Go 1.9.6 are released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;セキュリティアップデートではないが，結構こまかく変わってるみたいなので，早めのアップデートを推奨かな。&lt;/p&gt;

&lt;p&gt;アップデートは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
