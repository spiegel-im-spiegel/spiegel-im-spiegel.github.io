<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of engineering - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/engineering/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/engineering/index.xml" />
	<id>tag:text.Baldanders.info,2022-10-11:/tags</id>
	<updated>2022-10-11T20:21:10+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>「退屈な Go」あらため『初めての Go 言語』はよい本</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/10/learning-go/" />
		<id>tag:text.Baldanders.info,2022-10-11:/remark/2022/10/learning-go/</id>
		<published>2022-10-11T11:21:10+00:00</published>
		<updated>2022-10-11T22:51:47+00:00</updated>
		<summary>本ブログ1,500本目記念記事</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;なんと！ この記事で本ブログ1,500本目なのですよ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p class=&#34;center&#34;&gt;&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:drum:&#34;&gt;🥁&lt;/abbr&gt; &lt;strong&gt;ドンドンドン！ パフパフ！&lt;/strong&gt; &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:trumpet:&#34;&gt;🎺&lt;/abbr&gt;&lt;/p&gt;
&lt;p&gt;日記は別として，ブログは SaaS も含めて色々と遍歴してるんだけど，今まで千本も続いたことはなくって。
じゃあ，1,000本超えたところで記念記事を書けばよかったんじゃ？ と思われるだろうが，そのときは完全に頭からすっぽ抜けてて，気が付いたら1,200超えてたのだ。
まぁ，でも，7年で1,500って凄くない？&lt;/p&gt;
&lt;p&gt;というわけで記念記事だが，『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド&#34;&gt;初めての Go 言語&lt;/a&gt;』の感想というか紹介を書くことにした&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
パチパチパチ。&lt;/p&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41dClAl3WKL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Jon Bodner (著), 武舎 広幸 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2022-09-26&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;2021年に出た “&lt;a href=&#34;https://www.oreilly.com/library/view/learning-go/9781492077206/&#34;&gt;Learning Go&lt;/a&gt;” の邦訳版。私は&lt;a href=&#34;https://www.oreilly.co.jp/books/9784814400041/&#34;&gt;版元&lt;/a&gt;で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-10-11&#34;&gt;2022-10-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 初めてのGo言語 --&gt;
&lt;p&gt;実際には紙の本ではなく版元の &lt;a href=&#34;https://www.oreilly.co.jp/books/9784814400041/&#34; title=&#34;O&#39;Reilly Japan - 初めてのGo言語&#34;&gt;O&amp;rsquo;Reilly Japan でデジタル版を購入&lt;/a&gt;した。
技術関連本はやっぱ PDF が最善だよな。
いくらでも書き込みできるのもいい。&lt;/p&gt;
&lt;h2&gt;退屈な Go&lt;/h2&gt;
&lt;p&gt;この本はまず「まえがき」が面白い。
のっけから&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;最初に考えたこの本のタイトルは『Boring Go』でした。実のところ Go のコードは退屈なのです&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;初めての Go 言語&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;だもん（笑） まぁ &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; にネガティブな反応をする人の多くは「Go はつまらない」って言うみたいなので，たぶん間違ってない。
そして&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;Go 言語の機能は、モダンなプログラミング言語に比べると「だいぶ少ない」と言えるでしょう。Go で書かれたプログラムは、ある意味「単刀直入」で、ときによっては繰り返しが多くなる傾向にあります。継承はありませんし、アスペクト指向プログラミングも、関数の多重定義もありません。ましてや演算子の多重定義なんて以ての外です。&lt;/p&gt;
&lt;p&gt;パターンマッチングもありませんし、名前付き引数もありません、例外処理もないのです。一方、多くのプログラマーにとっては恐怖の的かもしれませんが、&lt;strong&gt;ポインタ&lt;/strong&gt;は含まれています。並行実行のモデルも他の言語とは違っています。1970 年代のアイデアに基づいているのです（ちなみにガベージコレクションに使われているアイデアも同じく1970年代のものです）。簡単に言ってしまえば Go 言語は「先祖返り」したような言語です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;初めての Go 言語&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と続く。
うんうん。&lt;/p&gt;
&lt;p&gt;ここから &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; のメリットについて記述があるのだが，これは&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;Go 言語は長持ちするプログラムを作ることを意図して開発されました。何十年にも渡って、何十人もの開発者に修正されることが想定されているのです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;初めての Go 言語&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;という一文に集約されるだろう。
&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; が「退屈な言語」であることには意味があるというわけだ。&lt;/p&gt;
&lt;p&gt;まぁ，実際に &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; が「何十年にも渡って」使われる言語になるかどうかは分からない。
&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; はようやく10代の思春期に入ったばかりだ（笑） でも上の「意図」に共感できるなら &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; を選択するのは悪くないと個人的には思う。&lt;/p&gt;
&lt;p&gt;今は20世紀の頃のような「変化しない要件を前提に堅牢な設計を組んでから忠実に実装する」時代ではない。
書籍『&lt;a href=&#34;https://www.amazon.co.jp/dp/B07FSBHS2V?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Clean Architecture&lt;/a&gt;』では&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;アーキテクチャの形状の目的 は、そこに含まれるソフトウェアシステムの開発・デプロイ・運用・保守を容易にすることである。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07FSBHS2V?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Clean Architecture&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とし&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;それらを容易にするための戦略は、できるだけ長い期間、できるだけ多く選択肢を残すことである。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07FSBHS2V?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Clean Architecture&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と述べている。
これから数十年後に残っている言語がどんなものかは分からないが，コードを書くにあたって，この「戦略」の実行を容易にする言語がメインストリームに残っていくと私は思っている。&lt;/p&gt;
&lt;p&gt;2021年に書いた「&lt;a href=&#34;https://text.baldanders.info/remark/2021/03/awesome-golang/&#34;&gt;Go を褒め殺ししてみる&lt;/a&gt;」で，私は &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; の特徴を「はやく作って はやく改（なお）す&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;」と評した。
&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; が長期に渡って残っていく言語になることを期待したい。&lt;/p&gt;
&lt;h2&gt;2022年最新の Go 技術解説書&lt;/h2&gt;
&lt;p&gt;訳者まえがきでも述べられているが，原著の “&lt;a href=&#34;https://www.oreilly.com/library/view/learning-go/9781492077206/&#34;&gt;Learning Go&lt;/a&gt;” が出版されたのは2021年で，いわゆる Generics が登場する &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 1.18 より前である。
このため日本語版『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド&#34;&gt;初めての Go 言語&lt;/a&gt;』では15章の「ジェネリクス」が全面的に書き直され，他の章でも Generics 関連の記述が調整されているらしい。&lt;/p&gt;
&lt;p&gt;あと日本語版の特徴は，なんといっても付録。
特に「実例で学ぶGo言語入門」は多くのサンプルコードが適切なサイズで載っているので「試しにちょっと動かして確認したい」人には便利だと思う。
翻訳者の方の気合の入りようが分かる。
他の言語からやってきた人は付録のコードを動かすところから始めてもいいかもしれない。&lt;/p&gt;
&lt;p&gt;なお，&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド&#34;&gt;日本語版&lt;/a&gt;のサンプルコードは以下の GitHub リポジトリから取得できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mushahiroyuki/lgo&#34;&gt;mushahiroyuki/lgo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;サンプルコードも含めて&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド&#34;&gt;日本語版&lt;/a&gt;は2022年最新の &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 1.19 で動くよう調整されているそうな。
なので，この本は2022年時点で最新の &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 技術参考書と言ってもいいかもしれない（笑）&lt;/p&gt;
&lt;p&gt;本文では，特に12章の「コンテキスト」と15章の「ジェネリクス」は分かりやすくてよかった。
Generics についてはネット上では日本語でも既に色々と記事があるけど，書籍の形でまとまった内容になっているのはとても助かる。&lt;/p&gt;
&lt;h2&gt;「イディオマティック Go 実践ガイド」&lt;/h2&gt;
&lt;p&gt;副題に「他言語プログラマーのためのイディオマティック Go 実践ガイド&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;」とあるように『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド&#34;&gt;初めての Go 言語&lt;/a&gt;』は &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 特有の語法（idiom）にフォーカスを当てている点で，いわゆる「入門書」とは毛色が違っている。
このため&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;この本の対象読者は、2番目（あるいは5番目あたりかもしれませんが）にマスターするプログラミング言語を選ぼうとしているソフトウェア開発者です。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;初めての Go 言語&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;としている。
といっても1章でコンパイラのセットアップから linter の使い方までかなり細かく紹介しているので，全くのプログラミング初心者がどうしていいか分からなくて途方に暮れる，ということもないだろう。
なお，開発環境として VS Code と GoLand は紹介されているが Vim への言及はなかったので vimmer には不満かもしれない（笑）&lt;/p&gt;
&lt;p&gt;この linter にまでちゃんと言及してるってのは個人的にポイントが高い。
&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; に限らず，ある言語に於いてよく知られた idiom に沿ってコードを書くことで，うっかりミスやセキュリティ脆弱性が紛れ込む可能性を減らすことができる。
Idiom に気を配ってコードを書くのであれば linter は必須の道具と言えるだろう。&lt;/p&gt;
&lt;ruby&gt;&lt;rb&gt;閑話休題&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;それはさておき&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;
&lt;p&gt;この本で言うところの「イディオマティック実践ガイド」な本というと「Effective ◯◯」みたいなタイトルを冠していることが多い。
『&lt;a href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Effective Java&lt;/a&gt;』とか。
ただ，この手の本は大抵の場合，入門レベルを終えた人が次のステップに上がるための参考書に位置づけられる。
そういう意味でも『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド&#34;&gt;初めての Go 言語&lt;/a&gt;』はだいぶ変わった本という印象を受ける。&lt;/p&gt;
&lt;p&gt;なお &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; の公式ドキュメントとして “&lt;a href=&#34;https://go.dev/doc/effective_go&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;Effective Go&lt;/a&gt;” というコンテンツは存在する。
入門レベルの最終ドキュメントという感じだろうか。
これがあるせいで “Learning Go” にせざるを得なかったとか（笑）&lt;/p&gt;
&lt;h2&gt;Go の2番目の教科書&lt;/h2&gt;
&lt;p&gt;私は &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; の教科書として普段は『&lt;a href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語 Go&lt;/a&gt;』を推している。
入門書はとかく「使い方」に偏りがちで，言語仕様に踏み込んだ「何故そのようになるのか」に関してはどうしても薄くなってしまう。
私が『&lt;a href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語 Go&lt;/a&gt;』を教科書として推す理由は，この本が真面目に言語仕様に踏み込んだ内容になっている点である。&lt;/p&gt;
&lt;p&gt;とはいえ，言語仕様を（ある程度）理解できればスラスラとコードが書けるのかと言うと，そうもいかなかったりする。
たとえば『&lt;a href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語 Go&lt;/a&gt;』を読めば &lt;a href=&#34;https://pkg.go.dev/reflect&#34; title=&#34;reflect package - reflect - Go Packages&#34;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://pkg.go.dev/unsafe&#34; title=&#34;unsafe package - unsafe - Go Packages&#34;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; といったパッケージの機能や使い方は分かるが，実際のプログラミングにおける使いどころや注意点は分からない。
また，前節で述べたように，どんな言語でもバグを引き起こしやすい書き方ってのはあって，これを避けるコーディングは言語仕様を見ただけでは分からないものである。&lt;/p&gt;
&lt;p&gt;したがって「プログラミング言語を習得したければ大量のコードを読むことと大量のコードを書くことだ」という話になりがちである&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
また「&lt;a href=&#34;https://www.yamdas.org/column/technique/21-daysj.html&#34; title=&#34;プログラミングを独習するには10年かかる（Teach Yourself Programming in Ten Years 日本語訳）&#34;&gt;プログラミングを独習するには10年かかる&lt;/a&gt;」というのも，まぁ仕方ないかなとは思う。&lt;/p&gt;
&lt;p&gt;そんな『&lt;a href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語 Go&lt;/a&gt;』に足りない部分を多少なりとも補ってくれるのが『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド&#34;&gt;初めての Go 言語&lt;/a&gt;』ではないかと思う。
なので，私としては『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド&#34;&gt;初めての Go 言語&lt;/a&gt;』を &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; の2番目の教科書として推したい。
どちらを最初に読むかは難しいところだが， &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; に近づく最初の1フィートとして読むなら『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400047?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド&#34;&gt;初めての Go 言語&lt;/a&gt;』を，ある程度 &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; に慣れたところで「そろそろちゃんとやろう」というのであれば『&lt;a href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語 Go&lt;/a&gt;』がいいのではないだろうか。&lt;/p&gt;
&lt;p&gt;その上で更に『&lt;a href=&#34;https://www.amazon.co.jp/dp/4908686122?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Goならわかるシステムプログラミング&lt;/a&gt;』や『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go言語による並行処理&lt;/a&gt;』や『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119979?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go言語による分散サービス&lt;/a&gt;』といった本に手を付けていくのが順当だろう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/07/books-for-golang/&#34;&gt;2022年に出た（出る） Go 言語関連の本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/416Stewy0NS._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20 (Release 2021-07-13)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B099928SJD (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2016/07/go-programming-language/&#34; &gt;こちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-05-22&#34;&gt;2021-05-22&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51pUKQajnaL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go言語による並行処理&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Katherine Cox-Buday (著), 山口 能迪 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2018-10-26&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873118468/&#34;&gt;Eブック版もある&lt;/a&gt;。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2018/11/concurrency-in-go/&#34;&gt;こちら&lt;/a&gt;。 Go 言語で並行処理を書くならこの本は必読書になるだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-01-13&#34;&gt;2020-01-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Go言語による並行処理 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4908686122?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51UR-fn8fmL._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4908686122?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Goならわかるシステムプログラミング 第2版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;渋川よしき (著), ごっちん (イラスト)&lt;/dd&gt;
    &lt;dd&gt;ラムダノート 2022-03-23&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4908686122 (ASIN), 9784908686122 (EAN), 4908686122 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;第1版はとても&lt;a href=&#34;https://text.baldanders.info/remark/2018/10/system-programming-in-golang/&#34;&gt;ためになる内容&lt;/a&gt;だったので第2版も &lt;a href=&#34;https://www.lambdanote.com/collections/frontpage/products/go-2-pdf&#34;&gt;PDF 版&lt;/a&gt;で確保しておく。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-10-08&#34;&gt;2022-10-08&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Goならわかるシステムプログラミング 第2版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119979?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41WaZWxEzVL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873119979?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go言語による分散サービス ―信頼性、拡張性、保守性の高いシステムの構築&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Travis Jeffery (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2022-08-03&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873119979 (ASIN), 9784873119977 (EAN), 4873119979 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873119977/&#34;&gt;版元&lt;/a&gt;でデジタル版を購入。&lt;a href=&#34;https://technical-book-reading-2.connpass.com/&#34;&gt;読書会&lt;/a&gt;の課題図書。ハンズオンぽい構成でコードがたくさん書かれているのがよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-08-03&#34;&gt;2022-08-03&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Go言語による分散サービス --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07FSBHS2V?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51mQrYTahJL._SL160_.jpg&#34; width=&#34;121&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B07FSBHS2V?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Clean Architecture　達人に学ぶソフトウェアの構造と設計 (アスキードワンゴ)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Ｒｏｂｅｒｔ Ｃ．Ｍａｒｔｉｎ (著), 角 征典 (著), 高木 正弘 (著)&lt;/dd&gt;
    &lt;dd&gt;ドワンゴ 2018-08-01 (Release 2018-08-01)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B07FSBHS2V (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;実務に即効性のある技術解説書というわけではないが，ものの「考え方」を示す本としてはよく出来ている。ソフトウェア技術史の読み物としても面白い。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-04-03&#34;&gt;2021-04-03&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Clean Architecture --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;厳密には削除したり移動したりして &lt;a href=&#34;https://text.baldanders.info/tags/obsolete/&#34;&gt;obsolete&lt;/a&gt; な記事があるので，それを含めた延べ数ならとっくに1,500超えてたんだけど。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;どうも「はじめての〇〇」ってタイトルを見ると一歩引いちゃうんだよなぁ。昔「はじめての C」ていう本があって「エロ本か思うた」とかいうジョークがあったが（ABC の古い隠語を知らない若い人にはごめんなさい），そういう時代を連想してしまう（笑）&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;「改す」を「なおす」と読むのは辞書的に正しい日本語ではありません。念のため（笑）&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;原著では &lt;q lang=&#34;en&#34;&gt;An Idiomatic Approach to Real-World Go Programming&lt;/q&gt; となっている。&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; は標準パッケージのソースコードが読みやすく，あれを読むだけでとても勉強になる。&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>オープンソース製品とソフトウェア部品表</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/08/software-bills-of-materials/" />
		<id>tag:text.Baldanders.info,2022-08-09:/remark/2022/08/software-bills-of-materials/</id>
		<published>2022-08-09T11:31:46+00:00</published>
		<updated>2022-08-11T04:06:27+00:00</updated>
		<summary>ブログってのはこういう粗結合連鎖が面白いと思うのだけどねぇ</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;拙作の &lt;a href=&#34;https://github.com/goark/depm&#34; title=&#34;goark/depm: Visualize depndency packages and modules&#34;&gt;depm&lt;/a&gt; で利用している &lt;a href=&#34;https://github.com/google/licenseclassifier&#34; title=&#34;google/licenseclassifier: A License Classifier&#34;&gt;github.com/google/licenseclassifier&lt;/a&gt; パッケージの v2 系モジュールがいい感じにバージョンが上がってきたので，どのくらい使えるようになったのか試してみた記事がこれ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20220806-licenseclassifier&#34;&gt;ライセンスファイルからライセンスを推定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で，この記事について有り難くも「&lt;a href=&#34;https://twitter.com/fu7mu4/status/1556141959755886593&#34;&gt;SPDX License identifier にも触れて欲しい&lt;/a&gt;」というリクエストを頂いたので &lt;a href=&#34;https://spdx.dev/&#34; title=&#34;International Open Standard (ISO/IEC 5962:2021) - Software Package Data Exchange (SPDX)&#34;&gt;SPDX (Software Package Data Exchange)&lt;/a&gt; についてちょろんと紹介する文章を追記した。
これを書くためにサイトを眺めて初めて気がついたのだが &lt;a href=&#34;https://spdx.dev/&#34; title=&#34;International Open Standard (ISO/IEC 5962:2021) - Software Package Data Exchange (SPDX)&#34;&gt;SPDX&lt;/a&gt; が &lt;a href=&#34;https://www.iso.org/standard/81870.html&#34; title=&#34;ISO - ISO/IEC 5962:2021 - Information technology — SPDX® Specification V2.2.1&#34;&gt;ISO/IEC 5962:2021&lt;/a&gt; として標準化されていたらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linuxfoundation.org/featured/spdx-becomes-internationally-recognized-standard-for-software-bill-of-materials/&#34;&gt;SPDX Becomes Internationally Recognized Standard for Software Bill of Materials - Linux Foundation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Between eighty and ninety percent (80%-90%) of a modern application is assembled from open source software components. An SBOM accounts for the software components contained in an application — open source, proprietary, or third-party — and details their provenance, license, and security attributes. SBOMs are used as a part of a foundational practice to track and trace components across software supply chains. SBOMs also help to proactively identify software issues and risks and establish a starting point for their remediation.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.linuxfoundation.org/featured/spdx-becomes-internationally-recognized-standard-for-software-bill-of-materials/&#34;&gt;SPDX Becomes Internationally Recognized Standard for Software Bill of Materials&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;https://www.iso.org/standard/81870.html&#34; title=&#34;ISO - ISO/IEC 5962:2021 - Information technology — SPDX® Specification V2.2.1&#34;&gt;ISO/IEC 5962:2021&lt;/a&gt; がリリースされたのが2021年8月。
その年の年末に例の &lt;a href=&#34;https://text.baldanders.info/remark/2021/12/log4j-vulnerability/&#34; title=&#34;ava 製 Logger “Log4j” の脆弱性について&#34;&gt;Apache Log4j の脆弱性&lt;/a&gt;に端を発したソフトウェア・サプライチェーン脆弱性の問題が大きく取り上げられることになった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20211222/apache-log4j&#34;&gt;Apache Log4jの脆弱性とともに浮かび上がったオープンソースのメンテナの責任範囲の問題 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どーりで今年（2022年）に入ってやたらと「ソフトウェア部品表（Software Bill of Materials; SBOM）」の話を聞くようになったわけだ。&lt;/p&gt;
&lt;p&gt;更にタイミングのいいことに7月下旬に以下の記事が公開されていたのを yomoyomo さんの記事で知った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lawfareblog.com/open-source-security-how-digital-infrastructure-built-house-cards&#34;&gt;Open-Source Security: How Digital Infrastructure Is Built on a House of Cards  - Lawfare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2022/07/securing-open-source-software.html&#34;&gt;Securing Open-Source Software - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20220808/open-source-security&#34;&gt;オープンソースのセキュリティ：デジタルインフラは砂上の楼閣に築かれている？ - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Importantly, the culprit was not the developers of the code but the company that &lt;a href=&#34;https://techcrunch.com/2018/12/10/equifax-breach-preventable-house-oversight-report/&#34;&gt;failed to implement a patch&lt;/a&gt; that promised to prevent the very thing that happened. Many observers complain that Equifax has suffered little consequence for its negligence, highlighting weak oversight and accountability structures.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.lawfareblog.com/open-source-security-how-digital-infrastructure-built-house-cards&#34;&gt;Open-Source Security: How Digital Infrastructure Is Built on a House of Cards&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote&gt;これに対し、最近では連邦取引委員会が Log4Shell の対応パッチの適用が遅い企業を強制措置をかますなど、政府がオープンソースのセキュリティ問題に介入する姿勢を見せつつある。著者はその一環としての SBOM（Software Bill Of Materials：ソフトウェア部品表）を評価するが、それだけでは不十分と断じる。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20220808/open-source-security&#34;&gt;オープンソースのセキュリティ：デジタルインフラは砂上の楼閣に築かれている？&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;An SBOM is simply a list of the ingredients, or codebases, that comprise software you purchased. It does not provide a list of vulnerabilities nor does it impose any minimum security requirements on the vendor generating the SBOM. Comparable to a list of ingredients on a snack or medication you purchase, the information is only as useful as your ability to parse it.&lt;/p&gt;
&lt;p&gt;To operationalize an SBOM, a company must be able to read it, which is a challenge as there is no mandated standard format for an SBOM, and actually use it to check databases such as the &lt;a href=&#34;https://nvd.nist.gov/&#34;&gt;National Vulnerability Database (NVD)&lt;/a&gt; for new vulnerabilities found in the software components the SBOM lists. These activities are costly and cumbersome. While Google and Intel might have the resources and security maturity to demand machine-readable SBOMs and regularly scan databases for new vulnerabilities that impact their systems, there are countless small businesses using open source that cannot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.lawfareblog.com/open-source-security-how-digital-infrastructure-built-house-cards&#34;&gt;Open-Source Security: How Digital Infrastructure Is Built on a House of Cards&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote&gt;著者は、もはや公共財の性質を持つオープンソースを維持する制度的構造を構築する必要があると訴える。そして、それ自体は目新しい主張ではない。それには効率的な資源配分を確保し、最低基準を課すことが必要になるが、果たしてそれをオープンソースプロジェクトに適用するのはうまくいくかねというのがワタシの感想になる。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20220808/open-source-security&#34;&gt;オープンソースのセキュリティ：デジタルインフラは砂上の楼閣に築かれている？&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;個人的には FOSS 製品を「公共財」と見なす向きには違和感や危うさを感じてしまうのだが，もはや四の五の言ってられねー，って感じなのだろう。
せめて &lt;a href=&#34;https://spdx.dev/&#34; title=&#34;International Open Standard (ISO/IEC 5962:2021) - Software Package Data Exchange (SPDX)&#34;&gt;SPDX&lt;/a&gt; が SBOM の標準としてセキュリティ・リスク管理に上手く組み込まれることを期待したい。&lt;/p&gt;
&lt;p&gt;報告される脆弱性の量的評価としての CVSS，ソフトウェア・サプライチェーンの構成を可視化する &lt;a href=&#34;https://spdx.dev/&#34; title=&#34;International Open Standard (ISO/IEC 5962:2021) - Software Package Data Exchange (SPDX)&#34;&gt;SPDX&lt;/a&gt;/SBOM，脆弱性が報告された際のアクションを支援する SSVC&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; といった道具・手段を組み合わせて，脆弱性報告から対応までのワークフローがスムーズに流れるようになるといいなぁ，と思ったり。
まぁ，そのワークフロー自体がソフトウェア・サプライチェーンだったりするのだが（笑）&lt;/p&gt;
&lt;p&gt;しかし，ブログってのはこういう粗結合連鎖が面白いと思うのだが「&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20220808/pc-crash&#34; title=&#34;恥さらし文章「ある「パソコンの大先生」の死」に寄せられたありがたいコメントの数々 - YAMDAS現更新履歴&#34;&gt;ブログの退潮&lt;/a&gt;」はもはや避けられぬか（笑）&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://snyk.io/&#34; title=&#34;Snyk | Developer security | Develop fast. Stay secure.&#34;&gt;Synk&lt;/a&gt; と SBOM&lt;/h2&gt;
&lt;p&gt;開発者向けのセキュリティ関連サービスを提供している &lt;a href=&#34;https://snyk.io/&#34; title=&#34;Snyk | Developer security | Develop fast. Stay secure.&#34;&gt;Synk&lt;/a&gt; は &lt;a href=&#34;https://spdx.dev/&#34; title=&#34;International Open Standard (ISO/IEC 5962:2021) - Software Package Data Exchange (SPDX)&#34;&gt;SPDX&lt;/a&gt;/SBOM について以下のように述べている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;Snyk integrates with a wide range of different package managers and developer tools to help identify vulnerabilities in the software components used. In doing that we need to build up a SBOM under the hood, normalising the list of software and augmenting that list with additional metadata from other sources. The Snyk tooling mainly focuses on presenting that information alongside information about vulnerabilities, but Snyk customers can access that raw SBOM via our built-in reporting or &lt;a href=&#34;https://snyk.docs.apiary.io/#reference/dependencies/dependencies-by-organization/list-all-dependencies&#34;&gt;powerful API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In fact, you can think of Snyk client tools like the CLI and CI/CD plugins as generating an SBOM, while Snyk’s backend takes an SBOM and returns vulnerability data, or provides automation around that data to help you fix issues. It’s this extensive experience that leads to our interest in emerging standards in this space.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://snyk.io/blog/advancing-sbom-standards-snyk-spdx/&#34;&gt;Advancing SBOM standards: Snyk and SPDX | Snyk&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Microsoft と SBOM&lt;/h2&gt;
&lt;p&gt;忘れていたが Microsoft も SBOM を自動生成するツールを OSS で出してたんだっけ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/engineering-at-microsoft/microsoft-open-sources-software-bill-of-materials-sbom-generation-tool/&#34;&gt;Microsoft open sources its software bill of materials (SBOM) generation tool - Engineering@Microsoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/22/sbomsbom_tool.html&#34;&gt;マイクロソフト、ビルド時にソフトウェアの部品表（SBOM）を自動生成する「SBOM Tool」、オープンソースで公開 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;具体的には、ソフトウェア名やライセンス、作成者、バージョン、個々のファイルのハッシュ値などの情報を、SBOMのフォーマットとしての標準の1つである「SPDX」（Software Package Data Exchange）形式で出力してくれます。&lt;/p&gt;
&lt;p&gt;また、ビルドの対象となるソフトウェアにSBOMが用意されている場合、新たに生成されるSBOMにはそのSBOMの情報をきちんととりまとめて生成することが可能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/22/sbomsbom_tool.html&#34;&gt;マイクロソフト、ビルド時にソフトウェアの部品表（SBOM）を自動生成する「SBOM Tool」、オープンソースで公開&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;まぁ，メインの文章でも紹介したように「SBOM をどう使うか」が重要なんだけどね。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.pwc.com/jp/ja/knowledge/column/awareness-cyber-security/stakeholder-specific-vulnerability-categorization.html&#34;&gt;SSVC（Stakeholder-Specific Vulnerability Categorization）を活用した脆弱性管理 | PwC Japanグループ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20220402-how-go-mitigates-supply-chain-attacks&#34;&gt;Go はどのようにしてサプライチェーン攻撃を低減しているか&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/07/slow-motion-car-crash/&#34;&gt;「ブログはやはり『死に続けている』」&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;SSVC (Stakeholder-Specific Vulnerability Categorization) については “&lt;span&gt;&lt;a href=&#34;https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=653459&#34;&gt;Prioritizing Vulnerability Response: A Stakeholder-Specific Vulnerability Categorization (Version 2.0) &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;” あたりを参照のこと。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>悪意のコードを含む多数の分岐リポジトリが見つかった話</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/08/malicious-code-in-many-forked-repositories/" />
		<id>tag:text.Baldanders.info,2022-08-04:/remark/2022/08/malicious-code-in-many-forked-repositories/</id>
		<published>2022-08-03T23:12:52+00:00</published>
		<updated>2022-08-04T10:37:19+00:00</updated>
		<summary>今回の件は spam の一種とみなすこともできる</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;2022-08-03 頃の Twitter TL でちょっとした騒ぎを見かけたのだが，詳細記事が出たらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bleepingcomputer.com/news/security/35-000-code-repos-not-hacked-but-clones-flood-github-to-serve-malware/&#34;&gt;35,000 code repos not hacked—but clones flood GitHub to serve malware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初は各リポジトリに悪意のコードがねじ込まれたのか？ とリポジトリ・アクセスの認証周りを疑ったが，実はそうではなく&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Rather, the thousands of backdoored projects are copies (forks or clones) of legitimate projects purportedly made by threat actors to push malware.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bleepingcomputer.com/news/security/35-000-code-repos-not-hacked-but-clones-flood-github-to-serve-malware/&#34;&gt;35,000 code repos not hacked—but clones flood GitHub to serve malware&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ということらしい。
GitHub の公式 tweet にも&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;GitHub is investigating the Tweet published Wed, Aug. 3, 2022:&lt;br&gt;* No repositories were compromised&lt;br&gt;* Malicious code was posted to cloned repositories, not the repositories themselves&lt;br&gt;* The clones were quarantined and there was no evident compromise of GitHub or maintainer accounts&lt;/p&gt;&amp;mdash; GitHub Security (@GitHubSecurity) &lt;a href=&#34;https://twitter.com/GitHubSecurity/status/1554843443200806913?ref_src=twsrc%5Etfw&#34;&gt;August 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;とあり，ひと安心といったところ。&lt;/p&gt;
&lt;p&gt;知らない人のために一応解説しておくと GitHub には pull request という仕組みがあり，他者のリポジトリにコードを貢献したい場合に自身のリポジトリに分岐（fork）させた上でコードを変更・追加し，そのコードを対象のリポジトリにマージするよう提案を行うことができる。
提案を受けた側は，そのコードのレビューを行った上で明示的な操作でコードを受け入れることができる。
もちろんダメなら拒否もできる。&lt;/p&gt;
&lt;p&gt;Pull request は GitHub アカウントを持つユーザなら誰でも可能であり，その過程で悪意のコードを忍ばせることは形式上は可能である。
まぁ，普通は「そういう PR はレビューで拒否しましょうね」となるだろうし，一度そんなコードを送りつけた相手を二度と信用することはないだろう。
なので今回の件は spam の一種とみなすこともできる。
実際，アホみたいな数だしね。&lt;/p&gt;
&lt;p&gt;気をつける点があるとすれば「悪意の PR」を送りつけるために作った分岐リポジトリのコードをうっかり取り込んでしまう場合だろう。
最初に紹介した記事では&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;As a best practice, remember to consume software from the official project repos and watch out for potential typosquats or repository forks/clones that may appear identical to the original project but hide malware.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bleepingcomputer.com/news/security/35-000-code-repos-not-hacked-but-clones-flood-github-to-serve-malware/&#34;&gt;35,000 code repos not hacked—but clones flood GitHub to serve malware&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と述べている。
言われんでも（笑）&lt;/p&gt;
&lt;p&gt;それに続けて&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Open source code commits signed with GPG keys of authentic project authors are one way of verifying the authenticity of code.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bleepingcomputer.com/news/security/35-000-code-repos-not-hacked-but-clones-flood-github-to-serve-malware/&#34;&gt;35,000 code repos not hacked—but clones flood GitHub to serve malware&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と書かれているが，ぶっちゃけプロジェクトの外側にいる人から見てコミットに OpenPGP 署名があることは大した保証にはならない。
この辺は以前書いた&lt;a href=&#34;https://text.baldanders.info/openpgp/web-of-trust/&#34; title=&#34;OpenPGP の電子署名は「ユーザーの身元を保証し」ない&#34;&gt;拙文&lt;/a&gt;を参考にしてほしい。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;じゃあ git commit で OpenPGP 署名を付与することにどんな意義があるかというと，それはチーム運営で威力を発揮する。
つまり公開鍵や電子署名で「ユーザーの身元を保証」するのではなく「身元の保証されたユーザ」同士で鍵と電子署名を運用するのである。
これでチーム以外からのなりすまし commit を検知（防止ではない）しやすくなる。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/web-of-trust/&#34;&gt;OpenPGP の電子署名は「ユーザーの身元を保証し」ない&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;オープンソース・プロジェクトであれば pull request を受け付けるメンテナの技量と判断が試されるところだろう。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;NTT出版 2013-12-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-28&#34;&gt;2015-11-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 信頼と裏切りの社会 --&gt;
</content>
	</entry><entry>
		<title>『ユニコーン企業のひみつ』読書会（2）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/06/competing-with-unicorns-2/" />
		<id>tag:text.Baldanders.info,2022-06-18:/remark/2022/06/competing-with-unicorns-2/</id>
		<published>2022-06-18T12:37:06+00:00</published>
		<updated>2022-06-18T12:37:25+00:00</updated>
		<summary>トライブ，チャプター，ギルド，そしてカンパニーベット</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;先月から始まった『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 | Jonathan Rasmusson, 島田 浩二, 角谷 信太郎 |本 | 通販 - Amazon.co.jp&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』読書会の2回目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://technical-book-reading.connpass.com/event/248923/&#34;&gt;第2回『ユニコーン企業のひみつ』オンライン読書会 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は4章から9.4章までだったが，内容盛り沢山なので複数回に分けて紹介する。&lt;/p&gt;
&lt;p&gt;ところでヘッドセットのマイクの調子が悪いのよ。
自分の声は聞こえないので分からなかったが，過剰にノイキャンが効いてる感じらしい。
観念して USB 接続のマイクを発注した。
とほほ&lt;/p&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00T5ANN00?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/31umrghJaJL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B00T5ANN00?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;audio-technica USBコンデンサーマイク 在宅勤務/録音/動画配信/ポッドキャスト AT9933USB&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Audio Technica(オーディオテクニカ) (Release 2015-02-13)&lt;/dd&gt;
    &lt;dd&gt;エレクトロニクス&lt;/dd&gt;
    &lt;dd&gt;B00T5ANN00 (ASIN), 4961310129798 (EAN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Bluetooth 接続のヘッドセットの調子が悪いので，マイクだけ USB 接続のものを買ってみた。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-06-18&#34;&gt;2022-06-18&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- USBコンデンサーマイク --&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/05/competing-with-unicorns/&#34;&gt;『ユニコーン企業のひみつ』読書会（1）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/06/competing-with-unicorns-2/&#34;&gt;『ユニコーン企業のひみつ』読書会（2）&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;“There is No Spotify Model”&lt;/h2&gt;
&lt;p&gt;今回の範囲からは外れるが，読書会で以下の記事が紹介されていたので共有する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jeremiahlee.com/posts/failed-squad-goals/&#34;&gt;Spotify’s Failed #SquadGoals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://agile.quora.com/Spotify%E3%81%AF-Spotify%E3%83%A2%E3%83%87%E3%83%AB-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84&#34;&gt;Spotifyは &amp;lsquo;Spotifyモデル &amp;lsquo;を使っていない  - アジャイルよろず相談室&lt;/a&gt;（日本語訳）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実はこの辺の話は「訳者あとがき」で少し言及されている。
「訳者あとがき」によると&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;Spotify でのスクワッドやトライブ、ギルドといった少し変わった名前のエンジニアリング組織編成、いわゆる「Spotify モデル」は、アジャイルコーチの Henrik Kniberg らの記事や動画をきっかけに英語圏のアジャイル界隈では広く認知されました。本文での説明も、初出である &amp;ldquo;Scaling@Spotify&amp;rdquo;（2012年）、&amp;ldquo;Spotify Engineering Culture&amp;rdquo;（2014 年）&amp;ldquo;Spotify Rythm&amp;rdquo;（2016 年）を踏まえたものになっています。とはいえこれも、あくまで著者の在籍時の経験にもとづいたスナップショットです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』訳者あとがき&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とある。
&lt;a href=&#34;https://text.baldanders.info/remark/2022/05/competing-with-unicorns/&#34; title=&#34;『ユニコーン企業のひみつ』読書会（1）]&#34;&gt;前回&lt;/a&gt;紹介したようにスタートアップが「学習する機械」であり「失敗はゲームの一部」であるなら，マネジメントそのものも同様にイテレーションしているだろうと想像できる。&lt;/p&gt;
&lt;p&gt;じゃあ『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 | Jonathan Rasmusson, 島田 浩二, 角谷 信太郎 |本 | 通販 - Amazon.co.jp&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』はもう古くて使えないのかというと，さにあらずで&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;繰り返しますが、大切なのはスクラムか Spotify モデルかというプラクティスではありません。重要なのはプラクティスを支える原則や、それを生みだす価値観のあり方、すなわち文化です。「文化が重要」なのです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』訳者あとがき&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と記されている。&lt;/p&gt;
&lt;p&gt;「訳者あとがき」ではこの辺の話を含め『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 | Jonathan Rasmusson, 島田 浩二, 角谷 信太郎 |本 | 通販 - Amazon.co.jp&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』以外の本も紹介されているので「いまさら Spotify モデルかよ！」という人は「訳者あとがき」を立ち読みするところから始めてもいいかも知れない（笑） ちなみに『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 | Jonathan Rasmusson, 島田 浩二, 角谷 信太郎 |本 | 通販 - Amazon.co.jp&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』で「文化」の話は9章で登場する。&lt;/p&gt;
&lt;p&gt;前説おわり。&lt;/p&gt;
&lt;h2&gt;トライブ（Tribe），チャプター（Chapter），ギルド（Guild）&lt;/h2&gt;
&lt;p&gt;トライブ，チャプター，ギルドは Spotify が考案した組織の概念で，スクワッドの機能を全社レベルにスケールするための構造化と言える。
ひとつずつ見ていこう。&lt;/p&gt;
&lt;h3&gt;トライブ&lt;/h3&gt;
&lt;p&gt;トライブは&lt;a href=&#34;https://text.baldanders.info/remark/2022/05/competing-with-unicorns/&#34; title=&#34;『ユニコーン企業のひみつ』読書会（1）]&#34;&gt;前回&lt;/a&gt;紹介したスクワッドを束ねたものだ。
といってもトライブはスクワッドの上位組織ではなく&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;スクワッド以外の組織構造（トライブ、チャプター、ギルド）はどれも、スクワッドの支援と調整のために組まれた「足場」&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』4.2章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;であり，あくまでも自律（フルスタック）した小さなチームである「スクワッド第一」で&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;スクワッドとトライブのどちらも、どんな顧客に向けたものなのかがきちんと特定された、明快なミッションを持っていなければならない。ミッションには成功を示す明確な指標が必要であり、トライブはその達成に責任がある。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』4.2章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ということらしい。&lt;/p&gt;
&lt;h3&gt;チャプター&lt;/h3&gt;
&lt;p&gt;チャプターはトライブ内のスクワッドを横断し，同じ専門性を持つメンバーで構成されるグループだ。
スクワッドを縦串とするならチャプターは横串と考えてもいいかも知れない。
ただし，いわゆる「マトリクス組織」構造における「人材プール」ではないらしい（私はいまいちピンとこなかったが）。&lt;/p&gt;
&lt;h3&gt;ギルド&lt;/h3&gt;
&lt;p&gt;ギルドは&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;同じ専門分野に興味のあるメンバーからなるグループで、組織を横断して形成される。
[&amp;hellip;]
チャプターとは異なり、ギルドは正式な組織ではない。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』4.6章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;だそうな。
緩い技術交流コミュニティ，あるいはもっと緩い勉強会みたいなイメージだろうか。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;このことを過小評価してはいけない。学ぶことの持つ力、すなわち、自分自身が成長していると感じ続けられることは、勤勉でスマートな、知性豊かな人たちにとってはこの上ない魅力だ。これこそ、最も優秀で素晴らしいメンバーを惹きつけ続けるための秘訣だ。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』4.6章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;スクワッド・トライブの自己組織化&lt;/h3&gt;
&lt;p&gt;4.7章でトライブの面白い例が紹介されている。
多めの引用はご容赦。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;Spotify の組織改編がいつもこうだったというわけではないが、ある大規模なトライブの組織再編にあたり、アジャイルコーチをファシリテーターとしたワークショップを開催したことがあった。そのワークショップではリーダー陣が一堂に会して、共同で新しいトライブの編成を考えた。といっても、その時点では新しいトライブに具体的なメンバーをアサインしなかった。Spotify はメンバーに自分で自分の所属をサインアップさせることにした。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』4.7章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote&gt;この一連の流れが特筆に値すると思ったのは、テック企業の本気を目のあたりにしたからだ。テック企業は意思決定を現場に任せて、メンバーの自己組織化を促すためなら、どこまでも突き進む。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』4.7章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote&gt;Spotify や他のテック企業が発見したのは、メンバーが転職せずにすぐれた仕事を続けてくれる可能性が高くなるのは、内容をよく理解した仕事を自分で選び、気に入った人たちと一緒に働いている場合だということだ。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』4.7章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なんとなく「スクワッドが寄り集まってトライブを形成する」みたいなイメージで考えていたのだが，最初から構造化されたスクワッド・トライブを構成して，そこに向かって各々サインアップするって感じなのね。&lt;/p&gt;
&lt;p&gt;ここまで読み進めるとチャプターが「人材プール」ではないと述べられていることの意味が少し分かる。
上から辞令が降りてくるわけではないのだ。
スタートアップ内では自分の仕事は自分で見つけないといけないらしい（笑） 言い方を変えるなら，それができる「人材」こそがスタートアップでは求められているわけだ。&lt;/p&gt;
&lt;h2&gt;カンパニーベット（Company Bet）&lt;/h2&gt;
&lt;p&gt;「カンパニーベット」も Spotify の用語だそうで&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;カンパニーベットは、会社が取り組みたい重要事項を、終わらせたい順に並べたリスト&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』5.2章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;を指すらしい。
もちろん，ただ漫然と優先順位を決めるのではなく DIBB (Data, Insight, Belief, Bet) と呼ばれる意思決定フレームワークに基づいて決定していく。&lt;/p&gt;
&lt;p&gt;前節の「スクワッド・トライブの自己組織化」とは異なりカンパニーベットは上から降りてくるメッセージだ。
とはいえ，これは業務命令ではない。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;念を押しておくが、自分たちの時間を何に費やすべきかの最終的な決定権はあくまでスクワッドにある。スクワッドの自律性は揺らがない。スクワッドはベットや DIBB を参照することで、自分たちが会社全体の役に立っていることと、利己的な部分最適に陥っていないことを自分たちで点検する。ベットもDIBB もスクワッドの判断を支援することに存在意義があるのだ。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』5.5章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;カンパニーベットは，喩えるなら，現場のエンジニアの向きを揃える整流器のようなものだろうか。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;大きなチャンスに狙いを絞ったベットに向けて「部隊」を集結させ、総力をあげてこれに取り組む。やり遂げたら、次の大がかりなベットが始まるまでの間、各自はそれぞれ普段の業務に戻る。Spotify のようなテック企業はそうやって物事を進めている。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』5.5章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;というわけで&amp;hellip;&lt;/h2&gt;
&lt;p&gt;次回へ続く。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41cE5EmeezL._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Jonathan Rasmusson (著), 島田 浩二 (翻訳), 角谷 信太郎 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2021-04-26&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873119464 (ASIN), 9784873119465 (EAN), 4873119464 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;版元より&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873119465/&#34;&gt;電子版&lt;/a&gt;も出ている。 Google や Spotify のような「ユニコーン企業」はどのようにして「ミッション」を遂行しているのか。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-05-21&#34;&gt;2022-05-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ユニコーン企業のひみつ --&gt;
</content>
	</entry><entry>
		<title>『ユニコーン企業のひみつ』読書会（1）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/05/competing-with-unicorns/" />
		<id>tag:text.Baldanders.info,2022-05-21:/remark/2022/05/competing-with-unicorns/</id>
		<published>2022-05-21T11:28:24+00:00</published>
		<updated>2022-06-18T12:37:25+00:00</updated>
		<summary>アレな GAFA 礼賛本を読むくらいならこっちの方をお勧めする。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;前にどっかで書いたような気がするが，遅まきながらプロジェクト・マネジメントの勉強を始めている。
といっても別にプロマネになりたいわけではなく，単に職場でマネジメントの観点で意見を求められることがあったので，そういう観点で見る目も養おうということで。
つっても PMBOK の基礎的な内容に留まっているが。
身も蓋もない言い方をするなら興味本位（笑）&lt;/p&gt;
&lt;p&gt;で，今回『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 | Jonathan Rasmusson, 島田 浩二, 角谷 信太郎 |本 | 通販 - Amazon.co.jp&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』という本を題材にした読書会を開催するというので，これまた興味本位で参加してみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://technical-book-reading.connpass.com/event/245551/&#34;&gt;第1回『ユニコーン企業のひみつ』オンライン読書会 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この本は知らなくても原著者の Jonathan Rasmusson&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; という名前を聞いたら「あぁ『&lt;a href=&#34;https://www.amazon.co.jp/dp/B00J1XKB6K?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;アジャイルサムライ&lt;/a&gt;』の人か」と思う人もいるかも知れない。
いや，私は読んでないけど。
ちなみに原書 “&lt;a href=&#34;https://www.amazon.co.jp/dp/B088PBCWBZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Competing with Unicorns&lt;/a&gt;” は2020年，今回の翻訳本『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 | Jonathan Rasmusson, 島田 浩二, 角谷 信太郎 |本 | 通販 - Amazon.co.jp&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』は2021年に出版されている。&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/05/competing-with-unicorns/&#34;&gt;『ユニコーン企業のひみつ』読書会（1）&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/06/competing-with-unicorns-2/&#34;&gt;『ユニコーン企業のひみつ』読書会（2）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;「ユニコーン企業」とは&lt;/h2&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 | Jonathan Rasmusson, 島田 浩二, 角谷 信太郎 |本 | 通販 - Amazon.co.jp&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』の訳注によると，「ユニコーン企業」とは&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;2013年にベンチャーキャリタリストの Aileen Lee が「ユニコーン企業」という概念を提唱したときの定義は、創業10年以内、評価額10億ドル以上、非上場、米国拠点のテック企業（当時は39社）。ユニコーンと呼ぶのは、その統計上の希少性を神話的な幻獣になぞらえたもの&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』まえがき&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;だそうな。
ただ，この本ではもう少し緩い定義で&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;本書で「ユニコーン企業」と言うとき、それは評価額が10億ドル規模の企業でありながら、スタートアップみたいに運営されている企業のことだと思ってほしい&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』まえがき&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;としている。
この定義なら「Google、Amazon、Facebook、Spotify なんかがこれに該当する」（まえがき）と言えるだろう。&lt;/p&gt;
&lt;p&gt;なお「スタートアップ」の定義も&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;本書においてスタートアップとは、50名未満の小さな企業を想定している&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』まえがき&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とだいぶ緩い。&lt;/p&gt;
&lt;h2&gt;「スタートアップはプロダクトがすべて」&lt;/h2&gt;
&lt;p&gt;スタートアップを特徴づける説明がこれ。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;スタートアップはプロダクトがすべてだ。デモで見せるのはプロダクトだ。新しい顧客をひきつけるのもプロダクトだ。資金調達するのもプロダクトだし、学習するのもプロダクトを通じてだ&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』1.1章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;故に「スタートアップはイテレーションを重ねる」（1.2章）ことになる。
これが既存のエンタープライズ企業との最大の違いだろう。
『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 | Jonathan Rasmusson, 島田 浩二, 角谷 信太郎 |本 | 通販 - Amazon.co.jp&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』ではエンタープライズを「期待に応じる機械」（1.4章）と呼びスタートアップを「学習する機械」（1.2章）と呼んでいる。&lt;/p&gt;
&lt;p&gt;「期待に応じる」ためには「プロジェクト駆動」が望ましい。
期待に応じる目標を掲げ，目標を達成するための KGI/KPI を評価しゴールを設定する。
コストを計上し期日を決め作業分割を行いリソース（予算や人員を含む）を確保してスケジュールやリスクの変動を管理（監視）する。
プロジェクトが設定するゴールへ計画通りに到達できたら成功だ。&lt;/p&gt;
&lt;p&gt;でもプロダクトを中心に据えるなら「プロジェクト駆動」はうまく行かない。
PDCA や OODA といったサイクルを回すにしても活動がプロジェクト単位で途切れてしまうので，とてもじゃないが「イテレーションを重ねる」ことはできない。
そこでスタートアップはチームに権限と自律性を与える「ミッション」で仕事を進める。&lt;/p&gt;
&lt;h2&gt;「失敗はゲームの一部」&lt;/h2&gt;
&lt;p&gt;「プロジェクトとミッションってなにがちゃうねん」と思うだろう（実際に読書会でもそういう疑問は出た）。
『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 | Jonathan Rasmusson, 島田 浩二, 角谷 信太郎 |本 | 通販 - Amazon.co.jp&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』ではプロジェクトとミッションの違いを以下のようにまとめている。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロジェクト&lt;/th&gt;
&lt;th&gt;ミッション&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;予算がある&lt;/td&gt;
&lt;td&gt;チームの人数が予算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;終わりがある&lt;/td&gt;
&lt;td&gt;期間に定めがない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;短期間&lt;/td&gt;
&lt;td&gt;長期間&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;プロジェクトマネージャーがいる&lt;/td&gt;
&lt;td&gt;プロジェクトマネージャーがいない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;開発だけして引き継ぐ&lt;/td&gt;
&lt;td&gt;開発もメンテナンスもする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;完成したら解散する&lt;/td&gt;
&lt;td&gt;チームは一緒のまま&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;計画にフォーカス&lt;/td&gt;
&lt;td&gt;顧客にフォーカス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;期待に応じることが価値&lt;/td&gt;
&lt;td&gt;インパクトが価値&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;トップダウン&lt;/td&gt;
&lt;td&gt;ボトムアップ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』2.5章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;もしプロジェクトからミッションへ切り替えたいならプロダクトに対する「成功」の定義も書き換える必要がある。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;プロダクト開発における成功とは「発見と学習」だ。最初のプロダクトをとにかく早く世に出すのもそのためだ。そしてこれを素早く、何度も何度も繰り返す。失策をおかすこともあるだろう。だが、リリースを重ねるごとにプロダクトは良くなっていく&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』1.5章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote&gt;プロダクト開発では失敗はゲームの一部だ。 [&amp;hellip;] プロダクト開発は一発勝負じゃない。初回のリリースは始まりに過ぎない&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』1.5章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;プロジェクトマネージャーなどいない&lt;/h2&gt;
&lt;p&gt;ところで「プロジェクトマネージャーがいない」のにどうやって管理するねん，って思わなかった？ 私は思った。
でもプロジェクトじゃないんだからプロジェクトマネージャーがいないのは当たり前だよな。
その代わり重要なのが「プロダクトマネージャー」と「データサイエンティスト」だ。&lt;/p&gt;
&lt;p&gt;データサイエンティストは8章で詳しく説明されるらしいので，とりあえずプロダクトマネージャーについて紹介すると&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;プロダクトマネージャーは「このプロダクトは何をすべきか」について、信頼のおける情報源になることでプロダクトのデリバリーを導く。スクワッドと協力して戦略を定義し、ロードマップを策定し、機能の定義を考える。マーケティング、売上予測、損益計算の責任にも何らかの関わりを持つ&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』3.3章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;だそうな。
「スクワッドと協力して」というのがポイントだろう。
つまりプロダクトマネージャーはスクワッドの管理者ではないということだ。
故にプロダクトマネージャーはスクワッドに対して「指示」は行わない（アドバイスや提案はあり）。&lt;/p&gt;
&lt;p&gt;ちなみに，この本で「スクワッド（Squad）」とは&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;少人数で、職能横断（Cross-Function）の、自己組織化されたチームだ。
[&amp;hellip;]
自律した小さなチームはテック企業のあらゆる活動の中心だ。新規プロダクトの開発、新たな市場への参入、株式公開の準備。どの場合であっても、テック企業では自律した小さなチームがその中心にいる&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ユニコーン企業のひみつ』3.1章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と定義・解説されている&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
この定義を見て「公安9課」を連想したのは私だけじゃない筈（と思いたいw）。&lt;/p&gt;
&lt;p&gt;スクワッドが所属する企業に対して自律的に振る舞うためには，お互いに対等な信頼関係が必要だ。
この辺が一番難しいんじゃないかな，と個人的には思う。
そのためのヒントは3.7章に書かれている。&lt;/p&gt;
&lt;h2&gt;GAFA 礼賛本を読むくらいなら&lt;/h2&gt;
&lt;p&gt;というわけで，今回は3章まで読了。
ページ数が少ないので，多分あと2回ほどで終わると思う。
もしこの拙文を見て興味が湧いたなら手にとって読んでみてもいいだろう。&lt;/p&gt;
&lt;p&gt;買うなら&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873119465/&#34; title=&#34;O&#39;Reilly Japan - ユニコーン企業のひみつ&#34;&gt;版元で扱っている電子版&lt;/a&gt;がお勧め。
「&lt;a href=&#34;https://gpl-reading.connpass.com/&#34;&gt;プログラミング言語Go読書会&lt;/a&gt;」では紙の本にびっしり書き込みをしているが PDF なら書き込みもデジタルでできる&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;（笑）&lt;/p&gt;
&lt;p&gt;この本を読んで「お父さん，明日からミッションを掲げてプロダクト駆動で頑張るぞ！」とは行かないかも知れないが，アレな GAFA 礼賛本を読むくらいならこっちの方をお勧めする。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41cE5EmeezL._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Jonathan Rasmusson (著), 島田 浩二 (翻訳), 角谷 信太郎 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2021-04-26&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873119464 (ASIN), 9784873119465 (EAN), 4873119464 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;版元より&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873119465/&#34;&gt;電子版&lt;/a&gt;も出ている。 Google や Spotify のような「ユニコーン企業」はどのようにして「ミッション」を遂行しているのか。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-05-21&#34;&gt;2022-05-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ユニコーン企業のひみつ --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01JMEDX8A?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/512LcoC3R8L._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B01JMEDX8A?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;攻殻機動隊 STAND ALONE COMPLEX&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;田中敦子 (出演), 阪脩 (出演), 大塚明夫 (出演), 山寺宏一 (出演), 仲野裕 (出演), 大川透 (出演), 山口太郎 (出演), 小野塚貴志 (出演), 玉川紗己子 (出演), 神山健治 (監督)&lt;/dd&gt;
    &lt;dd&gt; (Release 2016-08-05)&lt;/dd&gt;
    &lt;dd&gt;Prime Video&lt;/dd&gt;
    &lt;dd&gt;B01JMEDX8A (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「&lt;a href=&#34;https://www.amazon.co.jp/dp/B06XCRQQZF?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;GHOST IN THE SHELL&lt;/a&gt;」とどっちが好きかと言われれば悩むところだが，アニメ版「攻殻機動隊」シリーズでは好きな作品。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-05-21&#34;&gt;2022-05-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 攻殻機動隊 STAND ALONE COMPLEX (SAC) --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Amazon に書かれている著者の経歴によると「世界最大級の革新的なテック企業が世界中にソフトウェアを届けることを支援してきた。エンジニアとしては、Spotifyのインテグレーションを支援した。対象プラットフォームはSony PlayStation、Facebook Messenger、Google Chromecast、iMessage。同様にBMW、Tesla、Fordの自動車にも統合した」とある。『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 | Jonathan Rasmusson, 島田 浩二, 角谷 信太郎 |本 | 通販 - Amazon.co.jp&#34;&gt;ユニコーン企業のひみつ&lt;/a&gt;』では Spotify での経験が色濃く反映されている。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;スクワッドはかなり重要な概念なので3章を丸々使って解説されている。 Spotify においてスクワッドがどう機能しているかについて&lt;a href=&#34;https://youtu.be/Yvfz4HGtoPc&#34;&gt;これ&lt;/a&gt;とか&lt;a href=&#34;https://youtu.be/vOt4BbWLWQw&#34;&gt;これ&lt;/a&gt;で紹介されている（いずれも15分弱の動画）。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Ubuntu に標準で付いている &lt;a href=&#34;https://wiki.gnome.org/action/show/Apps/Evince&#34; title=&#34;Apps/Evince - GNOME Wiki!&#34;&gt;Evince&lt;/a&gt; は PDF の任意の場所にメモを追加する程度はできる。このくらいの機能で十分だろう。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>波乗りプログラマ</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/05/programmer-the-surfer/" />
		<id>tag:text.Baldanders.info,2022-05-05:/remark/2022/05/programmer-the-surfer/</id>
		<published>2022-05-05T01:49:50+00:00</published>
		<updated>2022-05-05T01:52:43+00:00</updated>
		<summary>競馬の予想屋に現金を預けてはいけない（笑）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;（この記事は Twitter に書き散らしたものを再構成したものです）&lt;/p&gt;
&lt;p&gt;起点はここから。&lt;/p&gt;
&lt;div&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;最近のプログラミング言語はなんだかファッションみたくトレンド指向が強い気がしてる。先日の飽きたの記事の人もそうだけど、皆トレンドに遅れを取られまいと必死になってしまってるんじゃなかろうか。&lt;/p&gt;&amp;mdash; mattn (@mattn_jp) &lt;a href=&#34;https://twitter.com/mattn_jp/status/1521461714679906304?ref_src=twsrc%5Etfw&#34;&gt;May 3, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;この tweet からの一連は実際に Twitter で見ていただくとして，プログラミング言語の「トレンド」はだいたい2,3年おきに入れ替わる。
学生にとって3年は長い時間かもしれないが，仕事してる人にとって3年は短い。
このタイムスケールで「トレンド」を追いかけることに意味は殆どないと断言してしまおう（笑）&lt;/p&gt;
&lt;p&gt;ネットでも「COBOL は終わった」「まだだ！まだ終わらんよ」みたいな話はしょっちゅう聞くし，私自身「&lt;a href=&#34;https://text.baldanders.info/remark/2016/07/java/&#34;&gt;Java はやめておけ&lt;/a&gt;」と言って憚らない人間だが，実際の世の中は汎用機は捨てても COBOL は捨てられないシステムも多いし，私も今だに Java コードで四苦八苦している。
こういった仕事がなくなることは短期的にはないだろう。
だからといってそれらの言語を若い人に勧めるかというと，それは別の話。&lt;/p&gt;
&lt;p&gt;yomoyomo さんの翻訳記事に「&lt;a href=&#34;https://www.yamdas.org/column/technique/21-daysj.html&#34; title=&#34;プログラミングを独習するには10年かかる（Teach Yourself Programming in Ten Years 日本語訳）&#34;&gt;プログラミングを独習するには10年かかる&lt;/a&gt;」というのがある。
20年以上前の Java に関する記事だが主な主張に関しては他の言語どころか他の業界に置き換えても同じだろう。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;研究者 (&lt;a href=&#34;http://www.amazon.com/exec/obidos/ASIN/0805803092&#34;&gt;Hayes&lt;/a&gt;, &lt;a href=&#34;http://www.amazon.com/exec/obidos/ASIN/034531509X/&#34;&gt;Bloom&lt;/a&gt;) によると、チェス、作曲、絵画、ピアノ演奏、水泳、テニス、そして神経心理学や位相幾何学の研究を含む、広範な分野のいずれについても、専門技術を身につけるにはおよそ10年かかるそうだ。近道など実在しないようなのだ。4歳にして音楽の神童だったモーツァルトでさえ、超一流の楽曲を作り出すまでに13年以上を要している。別のジャンルになるが、ビートルズが突如現れナンバーワンヒットを連発し、エド・サリバン・ショーに出演したのは1964年だった。しかし、彼らは1957年からリバプールやハンブルグの小さなクラブで演奏していたわけで、また彼らは初期から大衆の支持を獲得したが、彼らがはじめて批評的にも大きな成功を得た『サージェント・ペパーズ』がリリースされたのは1967年である。サミュエル・ジョンソンは、「どんな分野であれ、生涯にわたる努力なくして優れたものには達し得ない。それよりも安い代償で手に入れることはできないのだ」と、それには十年以上かかると考えた。またチョーサーも「人生はとても短く、技を習得するにはとても時間がかかる」と嘆いている。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.yamdas.org/column/technique/21-daysj.html&#34;&gt;プログラミングを独習するには10年かかる&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;この記事を勝手に読み替えるなら「仕事でプログラミング言語を習得し使いこなすにはそのくらいのタイムスケールで考えなければならない」ということだろう。
言い方を変えるなら，たかが2,3年の「トレンド」で言語を評価するなどナンセンスである。&lt;/p&gt;
&lt;p&gt;10年というのは人生の「就労時代」の1/4から1/3の期間に相当する。
でも「トレンド」で考えるならその10年の間に最低でも2回は入れ替わりがあるということになる。
如何に刹那的か分かるだろう。&lt;/p&gt;
&lt;p&gt;もちろん，どの業界でも「波の最先端」は常に意識して情報を仕入れていく必要がある。
でもその最先端に立っている人を羨み波の尻尾を必死に追いかけるだけでは何も身につかない。
「鶏口となるも牛後となるなかれ」とはよく言ったものである（笑）&lt;/p&gt;
&lt;p&gt;「推測するな計測せよ」の IT 業界では広く集めた「情報」を実際に試して「技能（スキル）」として深堀りし「技術」として昇華していかなければならない。&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;&lt;strong&gt;技能はモノに付くが技術はヒトに付く&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;これは私がペーペーの新人の頃に当時のボスに叩き込まれた言葉だ。
企業は技能を求めるが，最終的に「個人」に残るのは技術だけだ。
当然ながら辿り着くまでには時間がかかるし，明確なゴールもない。&lt;/p&gt;
&lt;p&gt;某恋愛ラノベ作品に「お金がなければ浮気もできない」というフレーズがあって思わず笑ってしまったが，お金で買える最も価値あるものは自由と時間である。
職業ソフトウェア・エンジニアはプログラミングを「技術」として身に付けるために時間をかけるし，その時間を稼ぐために少なくないお金を使う&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;メディアは「波」のさきっちょしか見ないし，さらにその先は語れない。
たかが3年先の予測さえ外すのがメディアである。
競馬の予想屋に現金を預けてはいけない（笑）&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/K0-Dm4wMJpQ&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=K0-Dm4wMJpQ&#34;&gt;桑田佳祐 – 波乗りジョニー（Full ver.） - YouTube&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2015/programming-language/&#34;&gt;プログラミング言語との付き合い方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873114608?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41cXiQEuF1L._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873114608?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;アプレンティスシップ・パターン　―徒弟制度に学ぶ熟練技術者の技と心得 (THEORY/IN/PRACTICE)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Dave H. Hoover (著), Adewale Oshineye (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2010-07-08&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873114608 (ASIN), 9784873114606 (EAN), 4873114608 (ISBN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873114606/&#34;&gt;出版元でデジタル版を購入可能&lt;/a&gt;。いわゆる「徒弟制度」を参考に「技術」を習得するための考え方を示す本。なんだけど，まだ読み終わってない。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-05-05&#34;&gt;2022-05-05&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- アプレンティスシップ・パターン --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41cE5EmeezL._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873119464?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Jonathan Rasmusson (著), 島田 浩二 (翻訳), 角谷 信太郎 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2021-04-26&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873119464 (ASIN), 9784873119465 (EAN), 4873119464 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;版元より&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873119465/&#34;&gt;電子版&lt;/a&gt;も出ている。 Google や Spotify のような「ユニコーン企業」はどのようにして「ミッション」を遂行しているのか。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-05-21&#34;&gt;2022-05-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ユニコーン企業のひみつ --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B082FWNFPG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-5qR-lSOL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B082FWNFPG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;波乗りジョニー&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;桑田佳祐 (メインアーティスト)&lt;/dd&gt;
    &lt;dd&gt;TAISHITA 2001-07-04 (Release 2019-12-20)&lt;/dd&gt;
    &lt;dd&gt;MP3 ダウンロード&lt;/dd&gt;
    &lt;dd&gt;B082FWNFPG (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;個人的にカラオケ定番曲のひとつ。桑田佳祐さんの曲は音域が合ってるみたいで歌いやすくてよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-05-05&#34;&gt;2022-05-05&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 波乗りジョニー --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;考えてみたら，自由と時間を買うためにお金を稼ぐのに，お金を得るために自分の時間を売り飛ばすのは本末転倒だよな（笑） まぁ，私達ビンボー人はお金がないと死んじゃうからな。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>Azure App Service に VS Code でデプロイできなかった話</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/04/cannot-deploy-with-vscode/" />
		<id>tag:text.Baldanders.info,2022-04-06:/remark/2022/04/cannot-deploy-with-vscode/</id>
		<published>2022-04-06T11:37:03+00:00</published>
		<updated>2022-04-14T11:20:28+00:00</updated>
		<summary>当面は VS Code 1.65.x にダウングレードするしかないらしい。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;私は &lt;a href=&#34;https://azure.microsoft.com/en-us/services/app-service/&#34; title=&#34;App Service — Build &amp;amp; Host Web Apps | Microsoft Azure&#34;&gt;Azure App Service&lt;/a&gt; に手動でデプロイする際は &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; の &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureappservice&#34; title=&#34;Azure App Service - Visual Studio Marketplace&#34;&gt;Azure App Service 拡張機能&lt;/a&gt;を使ってるんだけど，ここのところ頻繁にデプロイに失敗してたのよ。
最初は &lt;a href=&#34;https://azure.microsoft.com/en-us/services/app-service/&#34; title=&#34;App Service — Build &amp;amp; Host Web Apps | Microsoft Azure&#34;&gt;App Service&lt;/a&gt; のほうがやらかしてるんだと思ってたんだけど（だって上手く行くときもあるし），ググったら違ってたようだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
VS Code 1.66 upgraded to Node 16 which has been causing deployment issues for both Functions and App Service. Unfortunately, the only current known workaround is to downgrade VS Code to 1.65.x. We&#39;re currently investigating a proper fix.
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-azureappservice/issues/2194#issuecomment-1087857459&#34;&gt;ECONNRESET trying azure deploy webapp VS Code · Issue #2194 · microsoft/vscode-azureappservice&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;まじすか &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ダウングレードってどうやんだ？ と思ったが単純に 1.65.x のインストール・パッケージを拾ってきて上書きインストールすればいいようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/updates/v1_65&#34;&gt;Visual Studio Code February 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows 環境では自動更新を無効にするのをお忘れなく。
やれやれ&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2022-04-14 追記】&lt;/strong&gt;
v1.66.2 で直った。
よかったよかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vscode/releases/tag/1.66.2&#34;&gt;Release March 2022 Recovery 2 · microsoft/vscode · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-azurefunctions/issues/2844&#34;&gt;Investigate ECONNRESET issue during &amp;ldquo;zipdeploy&amp;rdquo; call · Issue #2844 · microsoft/vscode-azurefunctions · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>独り GitHub Team を作ってみた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/03/github-team/" />
		<id>tag:text.Baldanders.info,2022-03-13:/remark/2022/03/github-team/</id>
		<published>2022-03-13T11:31:26+00:00</published>
		<updated>2022-04-23T14:00:19+00:00</updated>
		<summary>ついカッとなってやった。今はちょっとだけ反省している。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;GitHub のリポジトリで諸々を公開するようになって後悔（駄洒落だよ）してるのは「ユーザ名が長すぎる」ことである。
ユーザ名は（名前が被らなければ）後から変更することもできるのだが（新しい方の URL にリダイレクトされる）， &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; の場合はリポジトリの URI がそのままモジュール・パッケージのパスになるので移行が面倒そうだし，このブログ（GitHub Page）の CNAME 変更も面倒が起きそうな気がしたので諦めていた。&lt;/p&gt;
&lt;p&gt;でも，半年ほど前に&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;nyaosorg という organization を作って、そちらへ nyagos のレポジトリを引っ越しました。nyagos が依存するパッケージも順次そちらへ移動する予定です&lt;a href=&#34;https://t.co/yFwrGxdHiP&#34;&gt;https://t.co/yFwrGxdHiP&lt;/a&gt;&lt;/p&gt;&amp;mdash; 𝒏𝒚𝒂𝒐𝒔.𝒐𝒓𝒈 (@NyaosOrg) &lt;a href=&#34;https://twitter.com/NyaosOrg/status/1436892273489301506?ref_src=twsrc%5Etfw&#34;&gt;September 12, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;という tweet を見て「なるほど！」と思ったわけよ。
もっとも本業がだんだん忙しくなって何となく先延ばしにしてたのだが，昨日ついカッとなってやってもうた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/goark&#34;&gt;github.com/goark Playing with Go Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;忙しいときほど要らんことをしたくなるよね（部屋の掃除とか）。
今はちょっとだけ反省している。&lt;/p&gt;
&lt;p&gt;“ark” は archive の駄洒落である&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
なので「ごーあーく」とでも呼んでいただければ幸いである。
もしくは更に縮めて「ごらく」とか（読めねーよ）&lt;/p&gt;
&lt;p&gt;用途としては，タイトル通り，個人的な「&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; の遊び場」として利用することを考えとりやす。
元の &lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;github.com/spiegel-im-spiegel&lt;/a&gt; から &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; パッケージを徐々に移行する予定。
とりあえず &lt;a href=&#34;https://github.com/goark/gpgpdump&#34; title=&#34;goark/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; と &lt;a href=&#34;https://github.com/goark/depm&#34; title=&#34;goark/depm: Visualize depndency packages and modules&#34;&gt;depm&lt;/a&gt; は個人的に使うので（依存パッケージと併せて）真っ先に移行した。
他のアクティブなパッケージもそのうち移行するつもりである。&lt;/p&gt;
&lt;p&gt;移行自体は簡単で，リポジトリの Settings ページの下の方に “Danger Zone” てのがあるのだが&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./danger-zone.png&#34;&gt;&lt;img src=&#34;./danger-zone.png&#34; srcset=&#34;./danger-zone.png 794w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Danger Zone&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./danger-zone.png&#34;&gt;Danger Zone&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;その中の “Transfer ownership” で移行先のユーザ名（または組織名）を指定すればよい。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./transfer.png&#34;&gt;&lt;img src=&#34;./transfer.png&#34; srcset=&#34;./transfer.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Transfer ownership&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./transfer.png&#34;&gt;Transfer ownership&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;移行するためには移行先にリポジトリの作成権限があることが必要。&lt;/p&gt;
&lt;p&gt;更に &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; パッケージについてはソースコード内のインポート・パスを書き換えないといけないのだが，実際にやってみると思ったほど大変ではなかった。
&lt;code&gt;go.mod&lt;/code&gt; ファイルに依存パッケージが列挙されているので，これを見ながら一括置換してしまえばいいのだ。&lt;/p&gt;
&lt;p&gt;注意する点としては移行後にバージョンタグを付けてバージョンを上げておくこと。
そうしないと，ひとつのバージョンに対して複数のパスが存在することになり &lt;code&gt;go mod tidy&lt;/code&gt; とかでがっつり怒られる。&lt;/p&gt;
&lt;p&gt;そうそう。
今回は Free ではなく，有料の Team にした。
だって Codespace が使いたかったんじゃもん。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://github.com/pricing&#34;&gt;&lt;img src=&#34;./pricing.png&#34; srcset=&#34;./pricing.png 858w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Pricing · Plans for every developer&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://github.com/pricing&#34;&gt;Pricing · Plans for every developer&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;今や IDE やエディタも XaaS の時代ですよ。
まぁ，飽きたらフリーに戻すかも知れんけど。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zetamatta.hatenablog.com/entry/2022/02/02/183120&#34;&gt;GitHub のアカウントの名前を変更したら起きること - 標準愚痴出力&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zetamatta.hatenablog.com/entry/2022/03/17/192943&#34;&gt;続・GitHub のアカウントの名前を変更したら起きること 〈AppVeyor編〉 - 標準愚痴出力&lt;/a&gt; : 結局 GitHub のユーザ名を変えて一番面倒くさいのは OAuth 周りなんだな。やっぱ下手に変えないほうがいいか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zetamatta/scraps/e622959b4c34eb&#34;&gt;パッケージ引っ越し大作戦&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/tmknom/books/github-organization-security&#34;&gt;GitHubセキュリティ Organization運用のベストプラクティス&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/release/2022/03/status-of-migrations/&#34;&gt;Go パッケージの移行状況&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/416Stewy0NS._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20 (Release 2021-07-13)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B099928SJD (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2016/07/go-programming-language/&#34; &gt;こちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-05-22&#34;&gt;2021-05-22&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;エンジニアに必要なのはダジャレ力だって &lt;a href=&#34;https://twitter.com/mattn_jp/status/1502146966855495682&#34;&gt;Go の偉い人が言ってた&lt;/a&gt;（笑）&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>GnuPG 030周年（笑）と寄付の話</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/12/gnupg-030-years-anniversary/" />
		<id>tag:text.Baldanders.info,2021-12-21:/remark/2021/12/gnupg-030-years-anniversary/</id>
		<published>2021-12-20T21:36:50+00:00</published>
		<updated>2021-12-20T21:41:16+00:00</updated>
		<summary>寄付は「消費」ではない。 個々人の意思による明確な社会参加の形である。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;12月20日は最初の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; がリリースされた日ということで記念の tweet が上がっていたが&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;It&amp;#39;s now 030 years since the first version of GnuPG was released. (Back then under its working title g10.)&lt;br&gt;After all these years we are now on solid financial grounds and do not anymore need to ask for donations. Many Thanks to everyone who made this possible. &lt;a href=&#34;https://t.co/gr3Mc0LuRA&#34;&gt;pic.twitter.com/gr3Mc0LuRA&lt;/a&gt;&lt;/p&gt;&amp;mdash; GNU Privacy Guard (@gnupg) &lt;a href=&#34;https://twitter.com/gnupg/status/1472942349865136130?ref_src=twsrc%5Etfw&#34;&gt;December 20, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;とあり，さらに&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;To our donors: Please stop your donations to GnuPG and instead donate to projects which still need financial support&lt;/p&gt;&amp;mdash; GNU Privacy Guard (@gnupg) &lt;a href=&#34;https://twitter.com/gnupg/status/1472943158346629125?ref_src=twsrc%5Etfw&#34;&gt;December 20, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;と tweet されている。
8進数は思いつかなんだ。
再来年は私も真似しよう（笑）&lt;/p&gt;
&lt;p&gt;寄付云々の話はピンとこない人もいるかもしれないが，実は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; プロジェクトは財政的に困窮していた時期があり，作者の Werner Koch はプロジェクトを放棄することも考えていたらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.propublica.org/article/the-worlds-email-encryption-software-relies-on-one-guy-who-is-going-broke&#34;&gt;The World&amp;rsquo;s Email Encryption Software Relies on One Guy, Who is Going Broke — ProPublica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2015/02/once-starving-gnupg-crypto-project-gets-a-windfall-but-can-it-be-saved/&#34;&gt;Once-starving GnuPG crypto project gets a windfall. Now comes the hard part | Ars Technica&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当時は Edward Snowden による NSA 内部告発や &lt;a href=&#34;https://baldanders.info/blog/000682/&#34; title=&#34;パスワード変更は計画的に&#34;&gt;OpenSSL の脆弱性&lt;/a&gt;で発覚したオープンソース・プロジェクトにおける人的・経済的リソースの不足などが背景としてあり，個人・法人を問わず寄付が集まったおかげで &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; で人を雇えるほど財政が持ち直した経緯がある。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/12/open-source-is-unbreakable/&#34; title=&#34;オープンソースは砕けない&#34;&gt;前にも書いた&lt;/a&gt;けど，オープンソースの功績・貢献をお金に換えることについては昔から議論があるが，一般的に「これだ！」と言えるものはない。
一時期はデジタル補完通貨&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; と FinTech で皆ウハウハみたいな話もあったが，あれって本当に儲かってるのは miner と山師だけだろう。&lt;/p&gt;
&lt;p&gt;寄付は「消費」ではない。
個々人の意思による明確な&lt;a href=&#34;http://shinta.tea-nifty.com/nikki/2005/01/donation.html&#34; title=&#34;寄付する前に立ち止まれ&#34;&gt;社会参加&lt;/a&gt;の形である。
この手の話は今後も泡沫のように出てくる話題なのだろう。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;暗号通貨とか暗号資産とか言ってやらん（笑）&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>オープンソースは砕けない</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/12/open-source-is-unbreakable/" />
		<id>tag:text.Baldanders.info,2021-12-14:/remark/2021/12/open-source-is-unbreakable/</id>
		<published>2021-12-14T12:59:02+00:00</published>
		<updated>2022-01-03T03:33:46+00:00</updated>
		<summary>タイトルは釣り</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;Log4j の対応に追われている現場エンジニアの皆様にお見舞い申し上げます。&lt;/p&gt;
&lt;p&gt;こういうことが起きると&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://christine.website/blog/open-source-broken-2021-12-11&#34;&gt;&amp;ldquo;Open Source&amp;rdquo; is Broken - Xe&lt;/a&gt; (&lt;a href=&#34;https://okuranagaimo.blogspot.com/2021/12/blog-post_13.html&#34; title=&#34;ブログ: 「オープンソース」は壊れている&#34;&gt;日本語訳&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nadh.in/blog/open-source-is-not-broken/&#34;&gt;&amp;ldquo;Open source&amp;rdquo; is not broken - nadh.in&lt;/a&gt; (&lt;a href=&#34;https://okuranagaimo.blogspot.com/2021/12/blog-post_89.html&#34; title=&#34;ブログ: 「オープンソース」は壊れていない&#34;&gt;日本語訳&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とか言い出す連中がいるわけで，ネタとしてはまぁまぁ面白いけど，食傷気味なところではある。
これらに対する反応としては Twitter TL で見かけた&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;20年以上みんなずっと同じ話してるなと思ってしまうが、オープンソースが壊れている、壊れていないの話がやたらに流れている。この文脈ならフリーソフトウェアの時代からずっと壊れてるんだよ。それでも動いているのは自由だからだよ。&lt;/p&gt;&amp;mdash; Shuji Sado (佐渡 秀治) (@shujisado) &lt;a href=&#34;https://twitter.com/shujisado/status/1470662395228225536?ref_src=twsrc%5Etfw&#34;&gt;December 14, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;あたりを強く支持する。&lt;/p&gt;
&lt;p&gt;自由には責任が伴う。
何故なら社会集団を構成する私達にとって自由とは自明のものではないから。
「個人の自由」は私たちの人類社会が長い時間をかけて「勝ち取った」ものであり，近代の夢で，ネットが社会と接続した現代でもそれは同じである。&lt;/p&gt;
&lt;p&gt;でも「フリーソフトウェア」をわざわざ「オープンソース・ソフトウェア」と言い直したのにはちゃんと意味があると思う。&lt;/p&gt;
&lt;p&gt;ソフトウェアを自由に公開する意図は様々だ。
「それがぼくには楽しかったから」で産業構造をひっくり返す製品を送り出した人もいる。
また，何らかの社会的使命のもとに製品を作り続けている人もいるかもしれない。
あるいは私のように「独占する価値もないから」オープンソース・ライセンスを付けて公衆に放り出してるだけの人もいるだろう。&lt;/p&gt;
&lt;p&gt;オープンソースの功績・貢献をお金に換えることについては昔から議論があるが，上述したようにオープンソースで括れるプレイヤーは本当に多様で，もちろん商業的な成功例はあるが，一般化できないように思える。&lt;/p&gt;
&lt;p&gt;そもそも「オープンソースの功績・貢献をお金に換える」というのは問いの立て方として正しいのだろうか。&lt;/p&gt;
&lt;p&gt;いま話題の log4j とか脆弱性発生時点でスポンサーが３人しかいなかったと騒がれている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;As of yesterday, there were a grand total of three sponsors for this person’s work&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://christine.website/blog/open-source-broken-2021-12-11&#34;&gt;“Open Source” is Broken&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;GnuPG の作者である Werner Koch さんは一時期，経済的に困窮して &lt;a href=&#34;https://arstechnica.com/information-technology/2015/02/once-starving-gnupg-crypto-project-gets-a-windfall-but-can-it-be-saved/&#34; title=&#34;Once-starving GnuPG crypto project gets a windfall. Now comes the hard part | Ars Technica&#34;&gt;GnuPG プロジェクトを放棄しようと考えていた&lt;/a&gt;ことがあるそうな。
Linux Kernel なんてイレギュラー中のイレギュラーで，あんな奇跡は二度と起こらないと断言しておこう。
一時期はデジタル補完通貨&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; と FinTech で皆ウハウハみたいな話もあったけど，あれって本当に儲かってるのは miner と山師だけでしょ（笑）&lt;/p&gt;
&lt;p&gt;この業界に入るきっかけになった会社では色々なことを叩き込まれたが，その中のひとつに「仕事は終わらせるもの」というのがある。
どんな仕事にも終わりがあるし，真っ当に終わらせることで「次」に進むことができる。&lt;/p&gt;
&lt;p&gt;離陸したならちゃんと着陸しないとね。
まぁ，エンジニアと違って経営者は着陸した先を考えるものだけど（笑）&lt;/p&gt;
&lt;p&gt;一方で個人の趣味や興味で作ったものに対して，その趣味や興味が他所に移ったとして，そのことで批判を受ける義理はないよね。
でもそういったものでも社会的な影響力を持つと「やーめた！」で終わらせることが難しくなる。&lt;/p&gt;
&lt;p&gt;私はオープンソース・プロジェクトの問題のひとつは「終わらせる」ことが難しいことにあるんじゃないかと思っている。&lt;/p&gt;
&lt;p&gt;今の GitHub はアーカイブ機能でリポジトリを凍結させられる。
この機能によってプロジェクトを明示的に「終わらせる」ことができる。
これは結構重要な機能だと思う。&lt;/p&gt;
&lt;p&gt;個人で無限の責任を負うことはできない。
それがたとえ自由の代償であってもだ。
責任を有限にするには「境界」を設定しなければならない。
それは時間軸についても同じ。
興味本位で始めたことであっても，死ぬまで同じプロジェクトに囚われるとか嫌過ぎる（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20211222/apache-log4j&#34;&gt;Apache Log4jの脆弱性とともに浮かび上がったオープンソースのメンテナの責任範囲の問題 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4309242456?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51KXSMMSTFL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4309242456?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;リナックスの革命 ― ハッカー倫理とネット社会の精神&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ペッカ ヒマネン (著), リーナス トーバルズ (著), マニュエル カステル (著), 安原 和見 (翻訳), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;河出書房新社 2001-05-26&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4309242456 (ASIN), 9784309242453 (EAN), 4309242456 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;大昔に買ったんだけどうろ覚え。買い直そうかと思ったが邦訳は Kindle ではないのか。それにしても「リナックスの革命」とかいう頭の悪いタイトルはどうにかならなかったのだろうか。副題だけで十分ぢゃん。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-12-12&#34;&gt;2020-12-12&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- リナックスの革命 Hacker Ethic --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;&lt;img src=&#34;https://tatsu-zine.com/images/books/877/cover_s.jpg&#34; width=&#34;106&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;yomoyomo (著)&lt;/dd&gt;
    &lt;dd&gt;達人出版会 2017-12-25 (Release 2019-03-02)&lt;/dd&gt;
    &lt;dd&gt;デジタル書籍&lt;/dd&gt;
    &lt;dd&gt;infoshare2 (tatsu-zine.com)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://wirelesswire.jp/author/yomoyomo/&#34;&gt;WirelessWire News 連載&lt;/a&gt;の書籍化。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2019/01/infoshare2/&#34;&gt;こちら&lt;/a&gt;。祝 &lt;a href=&#34;https://www.amazon.co.jp/dp/B08DD2MC46?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Kindle 化&lt;/a&gt;！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-31&#34;&gt;2018-12-31&lt;/abbr&gt;&lt;/p&gt;
&lt;/div&gt; &lt;!-- 続・情報共有の未来 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621045938?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51XGP8AFX2L._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621045938?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;いかにして問題をとくか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;G. ポリア (著), Polya,G. (原著), 賢信, 柿内 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善 1975-04-01&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4621045938 (ASIN), 9784621045930 (EAN), 4621045938 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-26&#34;&gt;2014-09-26&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- いかにして問題をとくか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01DSV9KDU?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/61qdM4litiL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B01DSV9KDU?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ジョジョの奇妙な冒険 ダイヤモンドは砕けない&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;小野友樹 (出演), 梶裕貴 (出演), 高木渉 (出演), 櫻井孝宏 (出演), 小野大輔 (出演), 津田尚克 (監督), ジョジョの奇妙な冒険DU製作委員会  (プロデュース)&lt;/dd&gt;
    &lt;dd&gt; (Release 2016-04-04)&lt;/dd&gt;
    &lt;dd&gt;Prime Video&lt;/dd&gt;
    &lt;dd&gt;B01DSV9KDU (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;実は見ていない（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-12-14&#34;&gt;2021-12-14&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ダイヤモンドは砕けない --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;暗号通貨とか暗号資産とか言ってやらん（笑）&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
</feed>
