<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of engineering - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/engineering/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/engineering/index.xml" />
	<id>tag:text.Baldanders.info,2021-10-09:/tags</id>
	<updated>2021-10-09T04:27:29+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>「顔」に関する用語集</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/10/glossary-about-face/" />
		<id>tag:text.Baldanders.info,2021-10-09:/remark/2021/10/glossary-about-face/</id>
		<published>2021-10-08T19:27:29+00:00</published>
		<updated>2021-10-09T01:54:17+00:00</updated>
		<summary>エンジニアの端くれとして用語をきちんと押さえておくことは重要</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://p2ptk.org/&#34; title=&#34;P2Pとかその辺のお話R | Sharing is Caring&#34;&gt;P2Ptk.org&lt;/a&gt; で面白い記事が翻訳されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eff.org/deeplinks/2021/10/face-recognition-technology-commonly-used-terms&#34;&gt;Face Recognition Technology: Commonly Used Terms | Electronic Frontier Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/privacy/3413&#34;&gt;顔認識テクノロジーの用語集 | P2Pとかその辺のお話R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;エンジニアの端くれとして用語をきちんと押さえておくことは重要だと思うので，覚え書きとしてまとめておく。
各用語に関する（リスクを含む）詳しい解説は上述のリンク先か末尾のブックマークを参照のこと。&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;顔検出（&lt;span lang=&#34;en&#34;&gt;Face detection&lt;/span&gt;）&lt;/dt&gt;
&lt;dd&gt;画像の中に人間の顔が含まれているかどうかを判断する&lt;/dd&gt;
&lt;dt&gt;フェイスプリンティング（&lt;span lang=&#34;en&#34;&gt;Faceprinting&lt;/span&gt;）&lt;/dt&gt;
&lt;dd&gt;顔の特徴を分析し数学的表現（&lt;span lang=&#34;en&#34;&gt;mathematical representation&lt;/span&gt;）に変換すること&lt;/dd&gt;
&lt;dt&gt;顔認識（&lt;span lang=&#34;en&#34;&gt;Face recognition&lt;/span&gt;）&lt;/dt&gt;
&lt;dd&gt;顔照合および顔分析を含むフェイスプリントの収集・処理を指す。処理のための収集も含まれている点に注意&lt;/dd&gt;
&lt;dt&gt;顔照合（&lt;span lang=&#34;en&#34;&gt;Face matching&lt;/span&gt;）&lt;/dt&gt;
&lt;dd&gt;顔認識のひとつ。2つ以上のフェイスプリントを比較すること。具体的には顔識別，顔認証，フェイス・クラスタリング，フェイス・トラッキング等を指す。比較は単純な等値・等価性（equality）ではなく推論を含んでいる点に注意&lt;/dd&gt;
&lt;dt&gt;顔識別（&lt;span lang=&#34;en&#34;&gt;Face identification&lt;/span&gt;）&lt;/dt&gt;
&lt;dd&gt;顔照合のひとつ。未知の人物の単一のフェイスプリントと既知の人物のフェイスプリントのセットとの比較。比較結果は「確信度（&lt;span lang=&#34;en&#34;&gt;confidence&lt;/span&gt;）」として示されることが多い&lt;/dd&gt;
&lt;dt&gt;顔認証（&lt;span lang=&#34;en&#34;&gt;Face verification&lt;/span&gt;）&lt;/dt&gt;
&lt;dd&gt;顔照合のひとつ。認証を求める人物の単一のフェイスプリントと認証された人物のひとつまたは複数のフェイスプリントとの比較。個人の識別は必要条件ではないが，顔識別と組み合わせることは可能&lt;/dd&gt;
&lt;dt&gt;フェイス・クラスタリング（&lt;span lang=&#34;en&#34;&gt;Face clustering&lt;/span&gt;）&lt;/dt&gt;
&lt;dd&gt;顔照合のひとつ。画像コレクションに含まれる全ての人物のフェイスプリントを抽出・比較し，人物およびその集団をグループ化すること。個人の識別は必要条件ではないが，顔識別と組み合わせることは可能&lt;/dd&gt;
&lt;dt&gt;フェイス・トラッキング（&lt;span lang=&#34;en&#34;&gt;Face tracking&lt;/span&gt;）&lt;/dt&gt;
&lt;dd&gt;顔照合のひとつ。（複数の）監視カメラ等を使って物理空間における特定人物の移動をフェイスプリントを用いて追跡すること。個人の識別は必要条件ではないが，顔識別と組み合わせることは可能&lt;/dd&gt;
&lt;dt&gt;顔分析（&lt;span lang=&#34;en&#34;&gt;Face analysis&lt;/span&gt;） aka. 顔推論（&lt;span lang=&#34;en&#34;&gt;Face inference&lt;/span&gt;）&lt;/dt&gt;
&lt;dd&gt;顔認識のひとつ。特定の人物の分析・推論のためにフェイスプリントを抽出・利用すること。他のフェイスプリントとの直接的な比較は不要。例として対象の人物の人種・性別・感情・行動的特徴などの推論がある&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;セキュリティやプライバシーのリスクという観点で考えると「推論の実行は AI など機械が行うにしても，そのアルゴリズムには必ず『ヒト』の恣意が紛れ込む」という点が重要なんだろうね。&lt;/p&gt;
&lt;p&gt;大昔に生体情報が名寄せに使えると言ったら一笑に付されたものだが，いまや「顔」はそこら中に溢れかえり「オープンソース・インテリジェンス」の格好の情報源にもなっている。
しかもアルゴリズム次第で自分たちに都合のいいデータをいくらでも作り出せる。
見知らぬ誰かのプライバシーをでっち上げることさえ可能な時代なわけだ。
気ぃつけなはれや！&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eff.org/deeplinks/2021/10/face-recognition-isnt-just-face-identification-and-verification&#34;&gt;Face Recognition Isn’t Just Face Identification and Verification: It’s Also Photo Clustering, Race Analysis, Real-time Tracking, and More | Electronic Frontier Foundation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/privacy/3410&#34;&gt;顔認識技術の問題は“識別”と“認証”だけではない：写真クラスタリング、人種分析、リアルタイム追跡などなど…… | P2Pとかその辺のお話R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eff.org/aboutface&#34;&gt;About Face | Electronic Frontier Foundation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/facial-recognition-system/&#34;&gt;「顔認識」に関するブックマーク&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01MZGVHOA?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51T6PBdGbyL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B01MZGVHOA?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;超監視社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 池村 千秋 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;草思社 2016-12-13 (Release 2017-02-03)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01MZGVHOA (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-03-23&#34;&gt;2019-03-23&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 超監視社会 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B093KFTV53?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/512tneLgY8S._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B093KFTV53?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;監視資本主義―人類の未来を賭けた闘い&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ショシャナ・ズボフ (著), 野中 香方子 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;東洋経済新報社 2021-06-25 (Release 2021-06-25)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B093KFTV53 (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;夏休みの課題図書として買ったが，全く読めてない orz&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-08-08&#34;&gt;2021-08-08&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 監視資本主義 --&gt;
</content>
	</entry><entry>
		<title>失敗体験という技術</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/09/trial-and-error/" />
		<id>tag:text.Baldanders.info,2021-09-05:/remark/2021/09/trial-and-error/</id>
		<published>2021-09-05T02:26:57+00:00</published>
		<updated>2021-09-05T02:59:57+00:00</updated>
		<summary>技能は成功体験で技術は失敗体験</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今回は Facebook の TL で見かけた記事を起点に戯れ言を書いてみる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://logmi.jp/business/articles/324932&#34;&gt;今の子どもを苦しめているのは、昔の常識を教える大人　植松努氏が実感した、日本教育の世界との“ズレ”  - ログミーBiz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;教育機関の最終目標は教育機関から離陸させることであり「企業はおそらく最終教育機関」てのはダメなんじゃないのかなぁ。
教育機関があろうとなかろうと人は一生勉強だよ。
まぁ「教育機関」としての企業を踏み台にして別の企業や事業へキャリア・アップするというのなら，労働者側にとってはアリかもしれないが（笑）&lt;/p&gt;
&lt;p&gt;何も知らずに IT 業界に入ったばかりの頃は色々叩き込まれたが，そのうちのひとつは「プログラミング設計は異常系を書ききること」だ。&lt;/p&gt;
&lt;p&gt;正常系は基本的に一本道だが異常系は無数にある。
それらをひとつひとつ迷路パズルの袋小路を塗りつぶすように塞いでいくのがプログラミングだろう。
これはプログラムをフローで認識しているうちは気づかない。
だから新人のうちは状態遷移表を大量に書かされた&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;でも異常系の列挙は，それを予め知ってないと書けないんだよね。&lt;/p&gt;
&lt;p&gt;この「予め知る」ための失敗体験こそが &lt;ruby&gt;&lt;rb&gt;技能&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;スキル&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;ではなく技術の源泉だと思う。
そういう意味で「制御された失敗」を蓄積することはエンジニアとしては正しいやり方と言える。
エンジニアが言う「もう二度とやらない」は「次やるときは上手くやる」という意味である（笑）&lt;/p&gt;
&lt;p&gt;また当時は「技能はモノに付くが技術は人に付く」とも教えられた。
今回紹介した記事に絡めるなら技能は成功体験で技術は失敗体験と言えるかもしれない。
技能と技術は開発の両輪で，どちらもなくてはならないものだ。&lt;/p&gt;
&lt;p&gt;よく整備された散歩道を歩くのは気持ちいいし，それはそれでよい体験だと思うが，散歩道に施されている「整備」に気付けるのは脇道や寄り道も歩いてこそである。
まぁ，今の世知辛い世の中では，失敗を許容する余裕がないから技術も蓄積されないのかもしれないが。
技術斜陽国ニッポン（笑）&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4816412174?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51EnOXOZbdL._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4816412174?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;迷路で行こう&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;忠之, 坂本 (著), 博, 吉岡 (著), 一之, 湯沢 (著), ニコリ (編集)&lt;/dd&gt;
    &lt;dd&gt;波書房 1991-12-01&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4816412174 (ASIN), 9784816412172 (EAN), 4816412174 (ISBN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私はニコリで迷路の解き方を教えてもらいました。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-09-05&#34;&gt;2021-09-05&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 迷路で行こう --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873114985?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/512xgQsxaML._SL160_.jpg&#34; width=&#34;114&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873114985?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;子どもが体験するべき50の危険なこと (Make: Japan Books)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Gever Tulley (著), Julie Spiegler (著), 金井 哲夫 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2011-05-26&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873114985 (ASIN), 9784873114989 (EAN), 4873114985 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;ただ守るだけではダメなのよ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-10-08&#34;&gt;2014-10-08&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 子どもが体験するべき50の危険なこと --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00O1VJZLO?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51DLzSbrC9L._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B00O1VJZLO?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;火星の人&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;アンディ ウィアー (著), 小野田和子 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;早川書房 2014-08-25 (Release 2014-09-30)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00O1VJZLO (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;面白かった。やっぱ原作のほうがいいな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-02-20&#34;&gt;2016-02-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 火星の人 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;知らない人のために解説すると，状態遷移表とは「状態」と「イベント」を行・列の表として列挙して，交差する各要素に処理を記述したもの。ちなみに，フローはコードを見れば分かるからフローチャートは要らんと言われた。顧客への言い訳用に書かされたことはあったけど（笑） 現在主流になりつつある関数型言語ではそもそもフロー記述が通用しないかな。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Eclipse の SSH アクセスで失敗した話</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/08/ssh-access-by-eclipse-fails/" />
		<id>tag:text.Baldanders.info,2021-08-30:/remark/2021/08/ssh-access-by-eclipse-fails/</id>
		<published>2021-08-30T11:55:10+00:00</published>
		<updated>2021-08-30T23:12:11+00:00</updated>
		<summary>これのせいで半日近く作業が止まってしまったよ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;トラブル対応で自前の環境に &lt;a href=&#34;https://www.eclipse.org/&#34; title=&#34;Enabling Open Innovation &amp;amp; Collaboration | The Eclipse Foundation&#34;&gt;Eclipse&lt;/a&gt; を入れて &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; リポジトリにアクセスする羽目になった。
&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; リポジトリへのアクセスには HTTPS と SSH の2通りある。
このうち HTTPS のほうはアカウントのパスワードが使えなくなり，代替手段として personal access token を取得する必要がある&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/ja/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;個人アクセストークンを使用する - GitHub Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁ personal access token の話はこれくらいにして，本題は SSH 接続のほう。
ちなみに今回の構成は以下の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS : Windows 10&lt;/li&gt;
&lt;li&gt;Eclipse : &lt;a href=&#34;https://mergedoc.osdn.jp/&#34; title=&#34;Java 開発環境 - Eclipse 日本語化 Pleiades プラグイン&#34;&gt;Pleiades All in One&lt;/a&gt; 2021-06 リリース版&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org/&#34; title=&#34;Enabling Open Innovation &amp;amp; Collaboration | The Eclipse Foundation&#34;&gt;Eclipse&lt;/a&gt; で Git および SSH をドライブしてるのは &lt;a href=&#34;https://www.eclipse.org/egit/&#34; title=&#34;EGit | The Eclipse Foundation&#34;&gt;EGit&lt;/a&gt; と &lt;a href=&#34;http://www.jcraft.com/jsch/&#34; title=&#34;JSch - Java Secure Channel&#34;&gt;JSch&lt;/a&gt; だそうだが，ユーザからこれが見えることはない。
「自前で構築している環境（&lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt; と &lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt;）は使えないんだろうなぁ。鍵を作るところから始めるか」とため息をつきつつ，以下のページを参考に（感謝！）作業を始めたのだが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://itsakura.com/eclipse-github-clone-push&#34;&gt;Eclipseでgit操作(GitHubからcloneしてpushまで/ssh接続) | ITSakura&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初の1フィートで驚愕してしまった。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;eclipse-ssh2.png&#34;&gt;&lt;img src=&#34;eclipse-ssh2.png&#34; srcset=&#34;eclipse-ssh2.png 762w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;いやいやいや。
DSA か RSA の1024ビット鍵しか作れんのかい！ まさか世の Eclipse ユーザはみんな1024ビット鍵で SSH にアクセスしてるの？ アカンやろ。アカンよね！？&lt;/p&gt;
&lt;p&gt;首を捻りながらも設定を済ませ，いざ clone しようとしたら今度は &lt;q lang=&#34;en&#34;&gt;No supported authentication methods available&lt;/q&gt; とか言ってくさる。&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;&lt;a href=&#34;https://dic.nicovideo.jp/a/%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E4%BD%95%E8%A8%80%E3%81%A3%E3%81%A6%E3%82%8B%E3%81%8B%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84&#34;&gt;ちょっと何言ってるか分からない&lt;/a&gt;&amp;hellip;&lt;/div&gt;
&lt;p&gt;周囲の人たちは問題なくアクセスできてるみたいなので私の環境の問題だと思うが，マジで分からない。
これのせいで半日近く作業が止まってしまったよ。
で，さんざん悩んだ挙句に気が付いた。
これってひょっとして plink で SSH アクセスしようとしている？&lt;/p&gt;
&lt;p&gt;念のために説明すると plink は Windows 用の SSH クライアント兼ターミナル・エミュレータである &lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; が他ツールとの連携用に提供している SSH 接続ツールだ。
Git がインストールされている環境で&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;set GIT_SSH=C:\Program Files\PuTTY\plink.exe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;とか環境設定しておけば OpenSSH ではなく&lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt;/plink で接続しようとする。
どうやら &lt;a href=&#34;https://www.eclipse.org/&#34; title=&#34;Enabling Open Innovation &amp;amp; Collaboration | The Eclipse Foundation&#34;&gt;Eclipse&lt;/a&gt; はこれを認識しているのかな？&lt;/p&gt;
&lt;p&gt;となると話は早い。
ぶっちゃけ &lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; で既に環境が出来ていれば &lt;a href=&#34;https://www.eclipse.org/&#34; title=&#34;Enabling Open Innovation &amp;amp; Collaboration | The Eclipse Foundation&#34;&gt;Eclipse&lt;/a&gt; 側の SSH 設定は不要ということだ。
というわけでめでたく GitHub リポジトリに SSH でアクセスできた。
ようやくトラブル対応できる。
RSA-1024 とか玩具の南京錠のごとき鍵を作る必要もなく，既に運用している EdDSA 鍵で問題なし。
上のスナップショットで作った鍵はとっとと捨てたよ（笑）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org/&#34; title=&#34;Enabling Open Innovation &amp;amp; Collaboration | The Eclipse Foundation&#34;&gt;Eclipse&lt;/a&gt; の git リポジトリ操作も見せてもらったが面倒臭すぎてまともに運用できる気がしない。
いや，これ，マジで VS Code を啓蒙しないとダメかしらん。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-gnupg-for-windows-2/&#34;&gt;GnuPG for Windows : gpg-agent について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/ssh-key-management-with-gnupg/&#34;&gt;OpenSSH の認証鍵を GunPG で作成・管理する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0893LQ5KY?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZDTBiszCS._SL160_.jpg&#34; width=&#34;100&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0893LQ5KY?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Spring Boot 2 入門: 基礎から実演まで Webアプリ開発入門&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;原田 けいと (著), 竹田 甘地 (著), Robert Segawa (著)&lt;/dd&gt;
    &lt;dd&gt; 2020-05-22 (Release 2020-05-22)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0893LQ5KY (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Spring Boot を勉強することになって急遽買った本。めっさ分かりやすかった。 PDF 版が欲しいくらい（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-06-13&#34;&gt;2021-06-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Spring Boot 2 入門 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41WZElZb9eL._SL160_.jpg&#34; width=&#34;128&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Effective Java 第3版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Joshua Bloch (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2018-10-30&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-03-17&#34;&gt;2021-03-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Effective Java 第3版 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.github.com/ja/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34; title=&#34;個人アクセストークンを使用する - GitHub Docs&#34;&gt;GitHub Docs の内容&lt;/a&gt;は少し古いみたいで，Settings の構成がちょっと違う。 &lt;code&gt;Settings &amp;gt; Developer settings &amp;gt; Personal access tokens&lt;/code&gt; の順に辿っていけばよい。ちなみに personal access token の Expiration を無期限に設定すると &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; が物凄い勢いで警告を出してくる（笑）&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>技術的負債と FOSS</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/07/technical-debt-and-foss/" />
		<id>tag:text.Baldanders.info,2021-07-26:/remark/2021/07/technical-debt-and-foss/</id>
		<published>2021-07-26T12:13:02+00:00</published>
		<updated>2021-08-15T10:16:33+00:00</updated>
		<summary>不完全でおｋ</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今回の戯れ言の起点はここから。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://techcrunch.com/2021/07/18/the-end-of-open-source/&#34;&gt;The end of open source? – TechCrunch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20210726/the-end-of-open-source&#34;&gt;オープンソースの終焉？ ではなく次代の（技術、ガバナンス）モデルに移るべきという話 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;発端は2021年春頃に発覚した話で，知っている人は知っていると思うが簡単に言うと，どこぞの大学関係者が論文のネタに Linux Kernel にわざと脆弱性を含むパッチを提供し，それがどのように解消されていくか（あるいはされないのか）を観察するという，なかなかに鬼畜なことをやらかしたらしい。&lt;/p&gt;
&lt;p&gt;私もこの話は知っていたが，あまり重視していなかった（&lt;a href=&#34;https://text.baldanders.info/bookmarks/&#34;&gt;ブックマーク&lt;/a&gt;にも入れてなかったし）。
いや，これって大学関係者がやらかしたから物珍しかっただけで&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，脆弱性のあるコードの混入自体は別に珍しくないだろ。
悪意や害意はないにしても Ubuntu の APT ベースで月に何回 Kernel を更新してるんだって話である。&lt;/p&gt;
&lt;p&gt;伽藍であれバザールであれ，隠された悪意や悪意なき害意を見つけるのは困難である。
こういうのは人的な統制をしても無駄で，結局はコードで証明していくしかない。
まぁ，昔に比べれば典型的なバグや脆弱性の検出についてはずいぶん楽になったけどね。&lt;/p&gt;
&lt;p&gt;大昔にソフトウェアを「&lt;a href=&#34;https://baldanders.info/spiegel/log/200511.html#d20_t1&#34;&gt;大量生産される一品もの&lt;/a&gt;」と評したことがある。
当時は XaaS とか考慮してなかったので当てはまらないことも多いと思うが，私は製品を作るときは「開発」と「製造」を分けるべきだと思っている。
何故ならそれぞれに要求される技術要素が異なるからだ。
でもソフトウェアはしばしば「開発」と「製造」が混濁する。&lt;/p&gt;
&lt;p&gt;Linux Kernel の場合は（営利企業を主体とする）ディストリビュータが「製造」で要求される品質を担保していると思っていたが，そういうわけでもないらしい。&lt;/p&gt;
&lt;p&gt;ところで，上の記事を見て連想したのが「技術的負債」というフレーズだ。
「技術的負債」については，同じく yomoyomo さんの記事が参考になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20201210/technical-debt&#34;&gt;お前も技術的負債にしてやろうか！ もしくは技術的負債と和田卓人さんをめぐるシンクロニシティ - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「技術的負債」を，お金を前借りするように「より早く実現するために引き換えにするもの」とするなら， FOSS と「技術的負債」は本来は相性がいいと言える。
ただ，負債の清算（＝リファクタリング）が上手く回らないのであれば，何らかの見直しが必要だろう。
これは FOSS 全体というよりは個々の製品・サービス毎に考えるべきことだ。&lt;/p&gt;
&lt;p&gt;FOSS 最大の特徴は「&lt;em&gt;不完全でおｋ&lt;/em&gt;」という点だと思う。
不完全さを埋めようとする限り，その製品には伸びしろがある。
その変化のプロセスが重要なのである。&lt;/p&gt;
&lt;p&gt;さて，最初に挙げた記事では進化する「オープンソースへの脅威」への対応策として&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;Limit the spread of monocultures. Stuff like Alva Linux and AWS’ Open Distribution of ElasticSearch are good, partly because they keep widely used FOSS solutions free and open source, but also because they inject technical diversity.&lt;/li&gt;
&lt;li&gt;Reevaluate project governance, organization and funding with an eye toward mitigating complete reliance on the human factor, as well as incentivizing for-profit companies to contribute their expertise and other resources. Most for-profit companies would be happy to contribute to open source because of its openness, and not despite it, but within many communities, this may require a culture change for existing contributors.&lt;/li&gt;
&lt;li&gt;Accelerate commodification by simplifying the stack and verifying the components. Push appropriate responsibility for security up into the application layers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://techcrunch.com/2021/07/18/the-end-of-open-source/&#34;&gt;The end of open source?&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;モノカルチャーの広がりを制限する。オープンソースであるというだけでなく、技術的多様性（technical diversity）の導入が重要&lt;/li&gt;
&lt;li&gt;プロジェクトのガバナンス、組織、資金を見直し、特定の人に完全に依存しないようにしながら、営利企業が専門知識などのリソースを提供する動機付けを行う&lt;/li&gt;
&lt;li&gt;スタックを単純化し、コンポーネントを検証してコモディティ化を促進。セキュリティ面のしかるべき責任をアプリケーション層に押し上げる&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20210726/the-end-of-open-source&#34;&gt;オープンソースの終焉？ ではなく次代の（技術、ガバナンス）モデルに移るべきという話&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とか書かれているが FOSS 関係なくね？ yomoyomo さんも「タイトルはいくらなんでも釣り」と呆れているが，そのとーり（by 財津一郎）だと思う。
最後のやつとか，普通にアーキテクチャ設計の基本の話だよね。&lt;/p&gt;
&lt;p&gt;ちうわけで，そろそろ『&lt;a href=&#34;https://www.amazon.co.jp/dp/B07FSBHS2V?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;Clean Architecture　達人に学ぶソフトウェアの構造と設計 (アスキードワンゴ) | Ｒｏｂｅｒｔ Ｃ．Ｍａｒｔｉｎ, 角 征典, 高木 正弘 | 工学 | Kindleストア | Amazon&#34;&gt;Clean Architecture&lt;/a&gt;』の読書感想文を書かなあかんかなぁ，と思ったりする（予定は未定）。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://jp.techcrunch.com/2021/08/10/2021-07-18-the-end-of-open-source/&#34;&gt;【コラム】オープンソースの終焉が来ているのだろうか？  |  TechCrunch Japan&lt;/a&gt; : よーやく日本語記事が（笑）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://cruel.org/freeware/cathedral.html&#34;&gt;伽藍とバザール（The Cathedral and the Bazaar）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/12/technical-debt-and-hacker/&#34;&gt;技術的負債とハッカー&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4309242456?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51KXSMMSTFL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4309242456?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;リナックスの革命 ― ハッカー倫理とネット社会の精神&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ペッカ ヒマネン (著), リーナス トーバルズ (著), マニュエル カステル (著), 安原 和見 (翻訳), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;河出書房新社 2001-05-26&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4309242456 (ASIN), 9784309242453 (EAN), 4309242456 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;大昔に買ったんだけどうろ覚え。買い直そうかと思ったが邦訳は Kindle ではないのか。それにしても「リナックスの革命」とかいう頭の悪いタイトルはどうにかならなかったのだろうか。副題だけで十分ぢゃん。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-12-12&#34;&gt;2020-12-12&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- リナックスの革命 Hacker Ethic --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07FSBHS2V?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51mQrYTahJL._SL160_.jpg&#34; width=&#34;121&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B07FSBHS2V?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Clean Architecture　達人に学ぶソフトウェアの構造と設計 (アスキードワンゴ)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Ｒｏｂｅｒｔ Ｃ．Ｍａｒｔｉｎ (著), 角 征典 (著), 高木 正弘 (著)&lt;/dd&gt;
    &lt;dd&gt;ドワンゴ 2018-08-01 (Release 2018-08-01)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B07FSBHS2V (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;実務に即効性のある技術解説書というわけではないが，ものの「考え方」を示す本としてはよく出来ている。ソフトウェア技術史の読み物としても面白い。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-04-03&#34;&gt;2021-04-03&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Clean Architecture --&gt;
&lt;!-- eof --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;今回の話を聞いて私はむしろ「ありがち」と思ったよ。大学が「善」なわけない。真理に善悪はないのだから。たとえば1990年代の米国暗号シーンに於いて大学は何をしてたのかってことだし，もっと言うと，ゼロ年代の Winny 狂躁は（お上による弾圧のほうがクローズアップされるが）明らかに「余計なこと」で，日本はアレで P2P に関して周回遅れになったし，日本企業が「リモートワーク」に及び腰なのはゼロ年代のこの悪夢が尾を引いてるよね。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Windows 10 が最後って言ったぢゃん！</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/06/why-windows11/" />
		<id>tag:text.Baldanders.info,2021-06-26:/remark/2021/06/why-windows11/</id>
		<published>2021-06-26T04:42:39+00:00</published>
		<updated>2021-08-17T12:32:04+00:00</updated>
		<summary>Windows 10 を最後にすると約束したな。あれは嘘だ！</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;div class=&#34;center&#34;&gt;&lt;strong&gt;Windows 10 を最後にすると約束したな&lt;br&gt;あれは嘘だ！&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;ちっくしょー！&lt;/p&gt;
&lt;p&gt;&amp;hellip;気を取り直して。&lt;/p&gt;
&lt;p&gt;ビル・ゲイツ氏が引退してからかなりまともになった Microsoft だが，どうにも Windows に関しては「やらかす」度合いが酷い気がする。
というわけで，2021年内に Windows 11 を出すとか何とか。
&lt;strong&gt;最後の&lt;/strong&gt; Windows だったはずの 10 は2025年でサポートが切れるとか何とか。&lt;/p&gt;
&lt;p&gt;自宅マシンはとっくに &lt;a href=&#34;https://text.baldanders.info/remark/2019/04/hello-ubuntu/&#34; title=&#34;Windows とともに平成は去り Ubuntu とともに令和を迎える&#34;&gt;Ubuntu に換装済み&lt;/a&gt;なので Windows がどうなろうと知ったことではないのだが，職場のマシンや関わってるプロジェクトのシステム要件を見直す必要があるのは面倒な話である。
そこで今後のために Windows 11 の要件をまとめておこう。&lt;/p&gt;
&lt;h2&gt;ハードウェア要件&lt;/h2&gt;
&lt;p&gt;一番重要な点は 32bit アーキテクチャが対象外となることだろう。
まぁ，この辺は時代の流れというやつで仕方がない。
「Ubuntu にすればいいじゃない」という声も聞こえるが， 32bit アーキテクチャをサポートする LTS の最終版である 18.04 (Bionic Beaver) のサポート期限が2023年4月なので&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，乗り換えるメリットはないだろう。&lt;/p&gt;
&lt;p&gt;今ある 32bit 機は4年以内に引退させ，物理的にオフラインにしてソリティア専用機として余生を送らせるのがいいだろう。&lt;/p&gt;
&lt;p&gt;その他の要件は以下の通り&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Windows 11&lt;/th&gt;
&lt;th&gt;Windows 10&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;プロセッサー&lt;/td&gt;
&lt;td&gt;1GHz以上、2コア以上、&lt;br&gt;64bit互換CPU/SoC&lt;/td&gt;
&lt;td&gt;1GHz以上のCPU/SoC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;メインメモリ&lt;/td&gt;
&lt;td&gt;4GB&lt;/td&gt;
&lt;td&gt;2GB（64bit）、&lt;br&gt;1GB（32bit）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ストレージ&lt;/td&gt;
&lt;td&gt;64GB以上&lt;/td&gt;
&lt;td&gt;32GB（64bit）、&lt;br&gt;16GB（32bit）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;グラフィックスカード&lt;/td&gt;
&lt;td&gt;DirectX 12以降（WDDM 2.0）&lt;/td&gt;
&lt;td&gt;DirectX 9以降（WDDM 1.0）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ディスプレイ&lt;/td&gt;
&lt;td&gt;対角9インチ以上、&lt;br&gt;8bitカラー、720p&lt;/td&gt;
&lt;td&gt;800x600&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1333957.html&#34;&gt;「Windows 11」は32bit CPUをサポートせず ～セキュアブート、TPM 2.0も必須に - 窓の杜&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;64bit アーキテクチャでシングルコアってことはないだろうから，プロセッサ要件はいいか。
古いミニノートだとディスプレイ要件を満たさないのか？&lt;/p&gt;
&lt;p&gt;Windows 10 のメモリ要件が 2GB 以上というのは知らなかった。
でも現時点でも起動直後に 4GB のメモリを専有してるんだけど，これで 11 になったら 8GB でも足らなくなるんじゃないの？&lt;/p&gt;
&lt;h2&gt;ファームウェア要件&lt;/h2&gt;
&lt;p&gt;ファームウェアについては UEFI (Unified Extensible Firmware Interface)，セキュアブート，および TPM (Trusted Platform Module) 2.0 に対応していることが要件となる。
これ 64bit 機でも古いマシンだと要件を満たさないものが結構あるんじゃないだろうか。&lt;/p&gt;
&lt;p&gt;この前買った自宅マシンは TPM 2.0 に対応してるのかと思ったが，大丈夫ぽい。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./firmware.png&#34;&gt;&lt;img src=&#34;./firmware.png&#34; srcset=&#34;./firmware.png 1920w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;AMD Ryzen シリーズは “AMD Memory Guard” としてチップレベルで対応してるんだってさ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://www.amd.com/system/files/documents/amd-memory-guard-white-paper.pdf&#34;&gt;&lt;img src=&#34;./amd-memory-guard.png&#34; srcset=&#34;./amd-memory-guard.png 848w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.amd.com/system/files/documents/amd-memory-guard-white-paper.pdf&#34;&gt;AMD MEMORY GUARD&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;うんうん。&lt;/p&gt;
&lt;h3&gt;TPM の確認&lt;/h3&gt;
&lt;p&gt;私の周辺の反応を見ると TPM 2.0 未対応で非互換と判定されることが多いらしい。&lt;/p&gt;
&lt;p&gt;Windows 環境で TPM 対応の有無をチェックするには &lt;a href=&#34;https://www.nextofwindows.com/do-i-have-tpm-2-0-on-my-computer-to-run-windows-11&#34; title=&#34;Do I Have TPM 2.0 on My Computer to Run Windows 11? - NEXTOFWINDOWS.COM&#34;&gt;&lt;code&gt;tpm.msc&lt;/code&gt; を起動&lt;/a&gt;するといいようだ。
TPM に対応していないマシンでは「互換性のある TPM が見つかりません」とか表示される。&lt;/p&gt;
&lt;p&gt;Linux 環境で確認する場合は，カーネル等の構成によると思うが，たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo dmesg | grep -i tpm
[    0.004558] ACPI: Reserving TPM2 table memory at [mem 0xba8c4000-0xba8c404b]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じにカーネル起動時のメッセージログから調べることもできる。&lt;/p&gt;
&lt;p&gt;SoC に組み込まれている fTPM の場合は，取り扱いに若干の注意が必要らしい。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;Ryzenの場合、CPUを交換するとTPMのデータも置き換わる(CPUのSoCにTPMが搭載されているため)。Windows 11導入の際に、CPU交換なども考えている場合は、鍵の扱いに注意が必要だ。BitLockerなどはあらかじめ解除してからCPUを交換しないと起動できなくなる可能性がある&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://pc.watch.impress.co.jp/docs/topic/feature/1334277.html&#34;&gt;【特集】Windows 11で必須になった「TPM 2.0」って何？TPMの役割や確認方法を紹介 - PC Watch&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ふむふむ。&lt;/p&gt;
&lt;h3&gt;ファームウェアに関するブックマーク&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://trustedcomputinggroup.org/resource/tpm-library-specification/&#34;&gt;TPM 2.0 Library | Trusted Computing Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/windows/security/information-protection/tpm/how-windows-uses-the-tpm&#34;&gt;Windows での TPM の使われ方 - Microsoft 365 Security | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/ja-jp/windows/-94205cbc-a492-8d79-cc55-1ecd6b0a8022&#34;&gt;セキュリティ プロセッサ (TPM) ファームウェアを更新する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pc.watch.impress.co.jp/docs/topic/feature/1334277.html&#34;&gt;【特集】Windows 11で必須になった「TPM 2.0」って何？TPMの役割や確認方法を紹介  - PC Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/windows-hardware/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions&#34;&gt;UEFI/GPT ベースのハード ドライブ パーティション | Microsoft Docs&lt;/a&gt; : 実は GPT (GUID Partition Table) によるストレージのパーティション管理が隠し要件になっているらしい。旧来の MBR で構成している Windows 環境に対してアップグレードしようとすると NG になるかもしれない&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ascii.jp/elem/000/004/065/4065911/&#34;&gt;ASCII.jp：Windows 11では、Windows 10で追加された数々の新機能が早くもリストラされる (1/2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;アプリケーション&lt;/h2&gt;
&lt;p&gt;標準で入るアプリケーションはかなり淘汰されるようだ。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;管理者と一般ユーザーの両方が、Windows Store以外からアプリケーションをインストールできないようにしたり、多くのWindows管理ツールをブロックしたりする「Sモード」機能は、Windows 11のHomeエディションでしか利用できなくなる。&lt;/li&gt;
&lt;li&gt;「Internet Explorer」（IE）はWindows 11に搭載されない。一部の古いウェブサイトや業務アプリケーションにアクセスする必要がある企業顧客は、新しい「Microsoft Edge」に組み込まれた「IEモード」を使う必要がある。&lt;/li&gt;
&lt;li&gt;「Cortana」にも別れを告げることになる。かつては「Siri」と「Alexa」をライバル視していたCortanaだが、もはや初回起動時に音声案内が流れることもなければ、タスクバーにアイコンがピン留めされることもない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35172927/&#34;&gt;「Windows 11」で廃止されるアプリや機能--「Cortana」も姿を消すことに - ZDNet Japan&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/10/stop-cortana-kun/&#34; title=&#34;ストップ!! Cortana 君！&#34;&gt;Cortana は要らん&lt;/a&gt;よねぇ。
職場で Windows 10 機を支給されたときに真っ先に潰したし（笑）&lt;/p&gt;
&lt;p&gt;他に削除・制限される機能は以下の通り（「&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1333959.html&#34;&gt;次期OS「Windows 11」は「Internet Explorer」無効 ～廃止・削除される機能が案内 - 窓の杜&lt;/a&gt;」より抜粋）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;壁紙の同期 → 同期できなくなる&lt;/li&gt;
&lt;li&gt;数式入力パネル → 削除&lt;/li&gt;
&lt;li&gt;ニュースと関心事項 → ウィジェットに置き換え&lt;/li&gt;
&lt;li&gt;ロック画面の簡易ステータス → 廃止&lt;/li&gt;
&lt;li&gt;Skype の「今すぐ会議」 → Microsoft Teams のチャット機能に置き換え&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Snipping Tool → 「切り取り &amp;amp; スケッチ」機能に置き換え？&lt;/li&gt;
&lt;li&gt;［スタート］画面
&lt;ul&gt;
&lt;li&gt;タイルをグループ化する機能はなくなる。レイアウトは今のところサイズ変更できない&lt;/li&gt;
&lt;li&gt;Windows 10からの移行時にピン留めアプリ・サイトは移行されない&lt;/li&gt;
&lt;li&gt;ライブタイルは使用できなくなる。後継機能は新しいウィジェットとなる&lt;/li&gt;
&lt;li&gt;タブレットモードは廃止される。代わりの機能が追加されるようだ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;タスクバー
&lt;ul&gt;
&lt;li&gt;「People」がタスクバーからなくなる&lt;/li&gt;
&lt;li&gt;アップグレード前にカスタマイズしたものを含む一部のアイコンは、アップグレードしたデバイスのタスクトレイに表示されなくなる&lt;/li&gt;
&lt;li&gt;タスクバーの位置は画面下部にのみ。上や横には表示できない&lt;/li&gt;
&lt;li&gt;アプリはタスクバー エリアをカスタマイズできなくなる&lt;/li&gt;
&lt;li&gt;タイムラインはなくなる。「Microsoft Edge」にそれを補完する機能が導入される&lt;/li&gt;
&lt;li&gt;18インチ以上のモニターでタッチキーボードはキーボードレイアウトのドック・アンドックが不能となる&lt;/li&gt;
&lt;li&gt;「Wallet」は削除される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下のプリインストールアプリは廃止（Microsoft Store からインストールは可能）
&lt;ul&gt;
&lt;li&gt;「3D ビューアー」&lt;/li&gt;
&lt;li&gt;Windows 10 向けの「OneNote」&lt;/li&gt;
&lt;li&gt;「ペイント 3D」&lt;/li&gt;
&lt;li&gt;「Skype」&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プリインストールアプリは本当に最小限にしていただきたいものである。&lt;/p&gt;
&lt;h2&gt;【2021-07-04 追記】 「第8世代プロセッサ」が前提？&lt;/h2&gt;
&lt;p&gt;2021-06-28 の Microsoft のブログでシステム要件の前提として以下の3つの原則を挙げている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;Security. Windows 11 raises the bar for security by requiring hardware that can enable protections like Windows Hello, Device Encryption, virtualization-based security (VBS), hypervisor-protected code integrity (HVCI) and Secure Boot. The combination of these features has been shown to &lt;a href=&#34;https://www.microsoft.com/security/blog/2021/01/11/new-surface-pcs-enable-virtualization-based-security-vbs-by-default-to-empower-customers-to-do-more-securely/&#34;&gt;reduce malware by 60%&lt;/a&gt; on tested devices. To meet the principle, all Windows 11 supported CPUs have an embedded TPM, support secure boot, and support VBS and specific &lt;a href=&#34;https://techcommunity.microsoft.com/t5/virtualization/virtualization-based-security-enabled-by-default/ba-p/890167&#34;&gt;VBS capabilities&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Reliability. Devices upgraded to Windows 11 will be in a supported and reliable state. By choosing CPUs that have adopted the new &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/develop/getting-started-with-windows-drivers&#34;&gt;Windows Driver model&lt;/a&gt; and are supported by our OEM and silicon partners who are achieving a 99.8% crash free experience.&lt;/li&gt;
&lt;li&gt;Compatibility. Windows 11 is designed to be compatible with the apps you use. It has the fundamentals of &amp;gt;1GHz, 2-core processors, 4GB memory, and 64GB of storage, aligning with our minimum system requirements for Office and Microsoft Teams.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://blogs.windows.com/windows-insider/2021/06/28/update-on-windows-11-minimum-system-requirements/&#34;&gt;Update on Windows 11 minimum system requirements | Windows Insider Blog&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;更に&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Using the principles above, we are confident that devices running on Intel 8th generation processors and AMD Zen 2 as well as Qualcomm 7 and 8 Series will meet our principles around security and reliability and minimum system requirements for Windows 11. As we release to Windows Insiders and partner with our OEMs, we will test to identify devices running on Intel 7th generation and AMD Zen 1 that may meet our principles&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://blogs.windows.com/windows-insider/2021/06/28/update-on-windows-11-minimum-system-requirements/&#34;&gt;Update on Windows 11 minimum system requirements | Windows Insider Blog&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と謳っていて，いわゆる「第8世代プロセッサ」を前提としているようだ（第7世代はこれから検証）。
というわけで，&lt;a href=&#34;https://text.baldanders.info/remark/2018/01/reading-privileged-memory-with-a-side-channel/&#34; title=&#34;「CPU に対するサイドチャネル攻撃」に関する覚え書き&#34;&gt;2018年に公表された CPU 脆弱性&lt;/a&gt;への連想も成り立つわけだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ascii.jp/elem/000/004/061/4061479/&#34;&gt;ASCII.jp：Windows 11にアップグレード可能なCPUは基本はやっぱり第8世代／Zen+以降になりそう？ (1/2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後パソコンを購入するのであれば（特に中古パソコンを買うのなら）この辺が目安になってくるだろう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/ja-jp/windows/windows-11&#34;&gt;新しい Windows 11 OS へのアップグレード | Microsoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/ja-jp/windows/windows-11-specifications&#34;&gt;Windows 11 の仕様 - Microsoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pc.watch.impress.co.jp/docs/news/1333729.html&#34;&gt;Windows 11発表。年内提供予定でWindows 10からは無償アップグレード  - PC Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1333957.html&#34;&gt;「Windows 11」は32bit CPUをサポートせず ～セキュアブート、TPM 2.0も必須に - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2021/06/25/2021-06-24-microsoft-announces-windows-11-generally-available-by-the-holidays/&#34;&gt;マイクロソフトがWindows 11を正式発表、アマゾンと驚きの提携でAndroidアプリも利用可能に、年末商戦までに一般発売  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35172929/&#34;&gt;「Windows 11」、機能アップデートは年1回に - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35172927/&#34;&gt;「Windows 11」で廃止されるアプリや機能&amp;ndash;「Cortana」も姿を消すことに - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1333960.html&#34;&gt;「Windows 11」はAndroidアプリにも対応 ～ストアはAmazonのものを利用 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1333959.html&#34;&gt;次期OS「Windows 11」は「Internet Explorer」無効 ～廃止・削除される機能が案内 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gizmodo.jp/2021/06/end-of-windows-10-support.html&#34;&gt;Windows 10 ユーザーよ、2025年10月のサポート終了に備える時が来ました | ギズモード・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/21/windows_11uiwindows_update40.html&#34;&gt;［速報］マイクロソフト、Windows 11を発表。UIを洗練、Windows Updateは40％小さく、マルチモニタ環境が便利に － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/21/windows_11android.html&#34;&gt;［速報］Windows 11でAndroidアプリが実行可能に、マイクロソフトが発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chiritsumon.net/contents/archives/22&#34;&gt;自作AMD RyzenマシンでTPMは利用できるのか  |  ちりつもノート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35172926/&#34;&gt;「Windows Subsystem for Android」に言及&amp;ndash;「Windows 11」の「Android」アプリ対応 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wired.jp/2021/06/26/microsoft-windows-11-app-store-android/&#34;&gt;Windows 11のアプリ配信の仕組みから、マイクロソフトの「大きな変化」が見えてくる | WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rcmaehl/WhyNotWin11&#34;&gt;GitHub - rcmaehl/WhyNotWin11: Detection Script to help identify why your PC isn&amp;rsquo;t Windows 11 ready&lt;/a&gt; : 対応度合いを詳しく表示してくれるのでベンチだが，実行にはデバイスへのアクセス権限が必要。ご利用は自己責任で
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/review/1334420.html&#34;&gt;「Windows 11」へアップグレードできない理由を親切に教えてくれる「WhyNotWin11」【レビュー】 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/builtbybel/ReadySunValley&#34;&gt;GitHub - builtbybel/ReadySunValley: Ready for Windows11/Sun Valley update?&lt;/a&gt; : コマンドライン版。実行にはデバイスへのアクセス権限が必要。ご利用は自己責任で
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.builtbybel.com/blog/19-apps/41-check-with-the-readysunvalley-app-if-your-device-works-with-windows11-sun-valley-update&#34;&gt;Check with the ReadySunValley app if your device works with Windows11/Sun Valley update | built by Bel ❤︎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/review/1335219.html&#34;&gt;「Windows 11」へ更新できない原因の調査ツール「ReadySunValley」 ～親切なUIが魅力【レビュー】 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1334623.html&#34;&gt;Microsoftが「Windows 11」のシステム要件を見直しへ ～「PC 正常性チェック」ツールはいったん撤回 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1334821.html&#34;&gt;ARMネイティブの速度とx64相互運用を両立 ～Microsoft、「ARM64EC」を発表 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35173429/&#34;&gt;Windowsの「死のブルースクリーン」、「Windows 11」ではブラックに？ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wired.jp/2021/07/08/windows-11-hardware-requirements-security/&#34;&gt;セキュリティが強化される「Windows 11」では、古いPCのユーザーが“置き去り”にされるかもしれない | WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2021/07/13/windows11-rollback-10-days/&#34;&gt;Windows 11へのアップグレード後、Windows 10に戻せる猶予期間は10日間までと判明  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1337129.html&#34;&gt;「Windows 11」へ更新できない原因を調査する「ReadySunValley」、UIを一新 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00WAMAKZQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/61gih7I7ztL._SL160_.jpg&#34; width=&#34;120&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B00WAMAKZQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;コマンドー (吹替版)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;アーノルド・シュワルツェネッガー (出演), アリッサ・ミラノ (出演), ダン・ヘダヤ (出演), レイ・ドーン・チョン (出演), マーク・L・レスター (監督), スティーブン・E・デ・スーザ (Writer)&lt;/dd&gt;
    &lt;dd&gt; (Release 2015-04-24)&lt;/dd&gt;
    &lt;dd&gt;Prime Video&lt;/dd&gt;
    &lt;dd&gt;B00WAMAKZQ (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;あらゆる障害を筋肉で粉砕する！ 脳みそをカラッぽにして見れる作品。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-10-13&#34;&gt;2020-10-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- コマンドー --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Ubuntu は LTS 版について&lt;a href=&#34;https://ubuntu.com/blog/ubuntu-16-04-lts-transitions-to-extended-security-maintenance-esm&#34; title=&#34;Ubuntu 16.04 LTS transitions to Extended Security Maintenance | Ubuntu&#34;&gt;10年の延長セキュリティ・メンテナンスを発表&lt;/a&gt;しているが， 32bit アーキテクチャは対象に含まれていないようだ。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;SoC は “System on a Chip” の略。 CPU や GPU あるいはメモリやモデムといった機能をワンチップに組み込んだ構成を指すらしい。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Microsoft Teams は&lt;a href=&#34;https://www.publickey1.jp/blog/21/microsoft_teamstodo30024.html&#34; title=&#34;Microsoft Teamsの個人向け無償提供が正式にスタート。友人や家族とのチャット、ToDoリストの共有、当面は300人24時間まで無料のビデオ会議など提供 － Publickey&#34;&gt;個人で無料アカウントを取れる&lt;/a&gt;ようになった。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>CAVOC Web API で遊ぶ</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/05/cavoc-api-client/" />
		<id>tag:text.Baldanders.info,2021-05-29:/remark/2021/05/cavoc-api-client/</id>
		<published>2021-05-29T07:58:27+00:00</published>
		<updated>2021-05-29T08:00:45+00:00</updated>
		<summary>CVO 情報を取得する Web API があるみたいなので，これを検証するためのコマンドライン・ツールを作ってみた。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;突然だが「&lt;a href=&#34;http://cavoc.org/&#34;&gt;共通農業語彙（Common Agricaulturel VOcabulary; CAVOC）&lt;/a&gt;」というサイトがあるのだが，この中に農作物の語彙体系を整理したデータベースがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cavoc.org/cvo.php&#34;&gt;農作物語彙体系(CVO, Crop VOcabulary)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この CVO 情報を取得する Web API があるみたいなので，これを検証するためのコマンドライン・ツールを作ってみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gcavoc&#34;&gt;spiegel-im-spiegel/gcavoc: Common Agricaulturel Vocabulary API Client by Golang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;動作例を挙げると「せろり」の標準名は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gcavoc std せろり
{&amp;#34;term&amp;#34;:&amp;#34;セロリ&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じに取得できる。
また，セロリの Wikipedia ページを取得したいなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gcavoc wikipedia セロリ
https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%AB%E3%83%AA%E3%82%A2%E3%83%83%E3%82%AF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という感じ。
いや，なんで「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%AB%E3%83%AA%E3%82%A2%E3%83%83%E3%82%AF&#34;&gt;セルリアック&lt;/a&gt;」のページなんだ？&lt;/p&gt;
&lt;p&gt;とまぁ微妙なんだよな。&lt;/p&gt;
&lt;p&gt;たとえば，同じ「セロリ」にしても収穫・出荷する部位によって異なる「農作物」になるのだが Web API ではそこまで細かく制御できない感じ。
元データはオープンデータで公開されているので，真面目にやりたいなら自前で何とかしろってことかもしれない。&lt;/p&gt;
</content>
	</entry><entry>
		<title>MISRA-C の思ひ出（または「守られないルールはルール自体に問題がある」）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/04/making-rule/" />
		<id>tag:text.Baldanders.info,2021-04-25:/remark/2021/04/making-rule/</id>
		<published>2021-04-25T02:35:57+00:00</published>
		<updated>2021-04-25T02:36:51+00:00</updated>
		<summary>ルール・メイキングは難しい</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;h2&gt;オンライン開催お疲れさまでした&lt;/h2&gt;
&lt;p&gt;2021-04-21 に開催された &lt;a href=&#34;https://gocon.connpass.com/event/208896/&#34;&gt;Go Conference 2021 Spring&lt;/a&gt; は初のオンラインだったそうで，週末の土曜日ということもあって，出不精で人見知りな私でも気軽に参加できたのがありがたかった。
（リアルタイム視聴も含めて）動画や音声のコンテンツはまとまった時間で拘束されてしまうのであまり好きではないのだが，たまにはこういうものに参加するのもよろしかろう。&lt;/p&gt;
&lt;p&gt;そのなかのひとつである&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/lmt_swallow/lets-build-security-guardrails-for-your-go-programs&#34; title=&#34;Go をセキュアに書き進めるための「ガードレール」を整備しよう / Let&#39;s Build Security Guardrails For Your Go Programs! - Speaker Deck&#34;&gt;Go をセキュアに書き進めるための「ガードレール」を整備しよう / Let&amp;rsquo;s Build Security Guardrails For Your Go Programs! - Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;は興味深く視聴させてもらった。
特に &lt;a href=&#34;https://github.com/quasilyte/go-ruleguard&#34; title=&#34;quasilyte/go-ruleguard: Define and run pattern-based custom linting rules.&#34;&gt;go-ruleguard&lt;/a&gt; は面白そうだ。
個人でも使う機会があるかもしれない。&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://speakerdeck.com/lmt_swallow/lets-build-security-guardrails-for-your-go-programs&#34; title=&#34;Go をセキュアに書き進めるための「ガードレール」を整備しよう / Let&#39;s Build Security Guardrails For Your Go Programs! - Speaker Deck&#34;&gt;スライド&lt;/a&gt;にも書かれているが， &lt;a href=&#34;https://github.com/securego/gosec&#34; title=&#34;securego/gosec: Golang security checker&#34;&gt;gosec&lt;/a&gt; は &lt;a href=&#34;https://golangci-lint.run/&#34;&gt;golangci-lint&lt;/a&gt; にも組み込まれているので&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ golangci-lint run --enable gosec ./...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;といった感じに使うことができる。&lt;/p&gt;
&lt;h2&gt;MISRA-C の思ひ出&lt;/h2&gt;
&lt;p&gt;この発表を視聴しながら思い出していたのは大昔に車載系のプロジェクトに参加したときのことだ。
あのときはアセンブラでベクタテーブルからゴリゴリ書いてたよなぁ（遠い目）&lt;/p&gt;
&lt;p&gt;今は違うと思うが，当時は MISRA-C というガイドラインがあって，これが車載系における事実上の C 言語コーディング基準（criteria）になっていた。&lt;/p&gt;
&lt;p&gt;詳細は割愛するが， MISRA-C には127個のルールがあって「必要（Required）」と「推奨（Advisory）」のいずれかに分類されている。
このうち「必要」ルールは強制的に課せられるルールで，このルールからの逸脱（deviation）を許容する場合には，手続きを踏んで文書化と承認を行わなければならない。
各ルールにはルールの詳細（何故そのルールが必要か）と逸脱可否の判断基準とサンプルコードが載っているので，それを参考に逸脱の可否を判定する。&lt;/p&gt;
&lt;p&gt;MISRA-C が定めるルール自体は合理的な内容なのだが，127個ものルールを机上でチェックするのは不毛なので MISRA-C 対応の lint ツールを使うことになる（当時はこれがバカ高くてねぇ）。
で，当然ながら lint ツールは製品の差別化のために MISRA-C 以外のルールもチェックできるようになっていて，最終的に数百ものルールをチェックすることになる。&lt;/p&gt;
&lt;h2&gt;守られないルールはルール自体に問題がある&lt;/h2&gt;
&lt;p&gt;問題は lint を実施した結果，大量の警告が出た場合である。
あるルールについて大量の逸脱が発生する理由は大きく2つある。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;プログラム設計が根本的に間違っている&lt;/li&gt;
&lt;li&gt;ルールが間違っている&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;プログラマのスキルによるかもしれないが，経験上こういうときに前者が理由であることはほとんどない。
なので，まずは「ルールが間違っている」のではないかと疑ってみるのが定石である。&lt;/p&gt;
&lt;p&gt;基本的に「ルールは守られるべきもの」であるが，ルールもまた人間が考えたものであり，間違っている可能性を常に考慮すべきである。
何故なら人間は間違いを犯す生き物なのだから。&lt;/p&gt;
&lt;p&gt;私は「悪法も法」という考え方には与しない。
「悪法は悪法」であり正すべきだ。
そして「悪法」の判断基準のひとつが「守られないルールはルール自体に問題がある」である。
ルールもリファクタリングの対象となる「コード」なのだ。&lt;/p&gt;
&lt;p&gt;最初に挙げた&lt;a href=&#34;https://speakerdeck.com/lmt_swallow/lets-build-security-guardrails-for-your-go-programs&#34; title=&#34;Go をセキュアに書き進めるための「ガードレール」を整備しよう / Let&#39;s Build Security Guardrails For Your Go Programs! - Speaker Deck&#34;&gt;発表&lt;/a&gt;では &lt;a href=&#34;https://github.com/reviewdog/reviewdog&#34; title=&#34;reviewdog/reviewdog: 🐶 Automated code review tool integrated with any code analysis tools regardless of programming language&#34;&gt;reviewdog&lt;/a&gt; を使って変更部分のみチェックする方法が紹介されていたが， &lt;a href=&#34;https://github.com/reviewdog/reviewdog&#34; title=&#34;reviewdog/reviewdog: 🐶 Automated code review tool integrated with any code analysis tools regardless of programming language&#34;&gt;reviewdog&lt;/a&gt; を常用するのは個人的にお勧めできない。
これが常態化すると「動いてるコードは触るな」という方向に行きがちで，それによってリファクタリングの機会を失うこととなり，最終的に&lt;a href=&#34;https://text.baldanders.info/remark/2020/12/technical-debt-and-hacker/&#34; title=&#34;技術的負債とハッカー&#34;&gt;技術的負債&lt;/a&gt;の返済が遅れることになる。
リファクタリングに厚いのが Go の持ち味なので，これを抑圧するような運用は避けるべきだろう。&lt;/p&gt;
&lt;p&gt;ことほど左様にルール・メイキングというのは難しいのである。
できるなら，煩わしいことは機械に任せて楽しくコードを書きたいものである。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/using-golangci-lint-action/&#34;&gt;golangci-lint を GitHub Actions で使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4542503461?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51CAFNAdZPL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4542503461?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;組込み開発者におくるMISRA‐C:2004―C言語利用の高信頼化ガイド&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;MISRA‐C研究会 (編集)&lt;/dd&gt;
    &lt;dd&gt;日本規格協会 2006-10-01&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4542503461 (ASIN), 9784542503465 (EAN), 4542503461 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私が持っているのはこれよりひとつ古い版だが，まぁいいか。むかし，車載用の組み込みエンジニアをやっていた頃は必読書として読まされました。今はもっと包括的な内容のものがあるはず。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-06&#34;&gt;2019-02-06&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 組込み開発者におくるMISRA‐C:2004 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01CYDGUV8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/31Q2jh&amp;#43;5SgL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B01CYDGUV8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;CODE VERSION 2.0&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ローレンス・レッシグ (著), 山形浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;翔泳社 2007-12-19 (Release 2016-03-14)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01CYDGUV8 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;前著『CODE』改訂版。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-11-17&#34;&gt;2018-11-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- CODE VERSION 2.0 --&gt;
</content>
	</entry><entry>
		<title>「情報交換用に推奨される絵文字のリスト」を作ってみた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/04/emoji-list/" />
		<id>tag:text.Baldanders.info,2021-04-02:/remark/2021/04/emoji-list/</id>
		<published>2021-04-02T13:26:53+00:00</published>
		<updated>2021-04-02T23:07:37+00:00</updated>
		<summary>とりあえずチョー面倒くさいのは分かった。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/03/terrible-emoji/&#34; title=&#34;おそるべき絵文字&#34;&gt;前回&lt;/a&gt;，絵文字についてちょろんと調べた余波で絵文字の一覧を作ってみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/emoji-list/&#34;&gt;情報交換用に推奨される絵文字のリスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/emoji-shortcodes/&#34;&gt;絵文字と Markdown Shortcodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本当はひとつの表にしたかったのだが，ページのレイアウトが崩れまくるので2つに分けた。
まぁ，それでも携帯端末で見たら崩れてると思うけど。&lt;/p&gt;
&lt;p&gt;今回の一覧を作るにあたって Unicode の公式ページから以下の情報を拾って使っている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.unicode.org/Public/UCD/latest/ucd/emoji/&#34;&gt;&lt;code&gt;https://www.unicode.org/Public/UCD/latest/ucd/emoji/&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.unicode.org/Public/UCD/latest/ucd/emoji/ReadMe.txt&#34;&gt;&lt;code&gt;ReadMe.txt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-data.txt&#34;&gt;&lt;code&gt;emoji-data.txt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-variation-sequences.txt&#34;&gt;&lt;code&gt;emoji-variation-sequences.txt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unicode.org/Public/emoji/&#34;&gt;&lt;code&gt;https://unicode.org/Public/emoji/&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://unicode.org/Public/emoji/13.1/&#34;&gt;13.1/&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://unicode.org/Public/emoji/13.1/ReadMe.txt&#34;&gt;&lt;code&gt;ReadMe.txt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unicode.org/Public/emoji/13.1/emoji-sequences.txt&#34;&gt;&lt;code&gt;emoji-sequences.txt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unicode.org/Public/emoji/13.1/emoji-zwj-sequences.txt&#34;&gt;&lt;code&gt;emoji-zwj-sequences.txt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお markdown shortcodes の情報の取得には以下のパッケージを使った。
ありがたや。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kyokomi/emoji&#34;&gt;kyokomi/emoji: emoji terminal output for golang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このパッケージは Hugo でも使われているので「&lt;a href=&#34;https://text.baldanders.info/emoji-shortcodes/&#34;&gt;絵文字と Markdown Shortcodes&lt;/a&gt;」にある markdown shortcodes は全て &lt;a href=&#34;https://text.baldanders.info/remark/2020/10/emoji-variation-and-markdown/&#34; title=&#34;絵文字と異体字と Markdown&#34;&gt;Hugo で使える&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;なにせ量が量なので手作業でやるわけにもいかず，データ取得用のパッケージを作った。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/emojis&#34;&gt;spiegel-im-spiegel/emojis: List of Emoji-Sequences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中身は JSON データ作成用のモジュールと作成した JSON ファイルを読み込むモジュールに別れている。
JSON データ作成用のモジュールで作成した JASON ファイルは，パッケージの &lt;a href=&#34;https://github.com/spiegel-im-spiegel/emojis/tree/main/json&#34;&gt;&lt;code&gt;json/&lt;/code&gt;&lt;/a&gt; ディレクトリに置いている。
JSON データを読むための構造体定義も同じところに置いているので，ご利用はご自由にどうぞ。&lt;/p&gt;
&lt;h2&gt;絵文字の構造&lt;/h2&gt;
&lt;p&gt;今回利用したデータの中身については以下のページに公式の解説がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.unicode.org/reports/tr51/&#34;&gt;UTS #51: Unicode Emoji&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以降で簡単に紹介してみる。&lt;/p&gt;
&lt;h3&gt;Emoji Characters&lt;/h3&gt;
&lt;p&gt;まず Unicode 符号点単位の「絵文字文字（emoji characters）」には文字種ごとに以下のプロパティが付与されている。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロパティ&lt;/th&gt;
&lt;th&gt;種別&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Emoji&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;emoji character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Extended_Pictographic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;extended pictographic character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Emoji_Presentation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;default emoji presentation character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Emoji_Component&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;emoji component&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Emoji_Modifier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;emoji modifier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Emoji_Modifier_Base&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;emoji modifier base&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらのプロパティは独立に付与されていて，複数のプロパティが付与されている符号点コードもある。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/emojis&#34; title=&#34;spiegel-im-spiegel/emojis: List of Emoji-Sequences&#34;&gt;spiegel-im-spiegel/emojis&lt;/a&gt; パッケージでは符号点コードごとにプロパティをチェックできるようにした。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;EmojiData&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Code&lt;/span&gt;                 &lt;span class=&#34;kt&#34;&gt;rune&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;                 &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Emoji&lt;/span&gt;                &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;EmojiPresentation&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;Emoji_Presentation,omitempty&amp;#34;`&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;EmojiModifier&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;Emoji_Modifier,omitempty&amp;#34;`&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;EmojiModifierBase&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;Emoji_Modifier_Base,omitempty&amp;#34;`&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;EmojiComponent&lt;/span&gt;       &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;Emoji_Component,omitempty&amp;#34;`&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ExtendedPictographic&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;Extended_Pictographic,omitempty&amp;#34;`&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;RegionalIndicator&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;Regional_Indicator,omitempty&amp;#34;`&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;VariationTextStyle&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;VariationEmojiStyle&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Emoji Presentation Sequences&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Emoji&lt;/code&gt; プロパティが付与されている符号点コードの直後に絵文字表示セレクタ &lt;code&gt;U+FE0F VARIATION SELECTOR-16&lt;/code&gt; を付けることで絵文字であることを明示できる。
といっても何でも組み合わせればいいというわけではないようで，先ほどの &lt;a href=&#34;https://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-variation-sequences.txt&#34;&gt;&lt;code&gt;emoji-variation-sequences.txt&lt;/code&gt;&lt;/a&gt; で定義されているシーケンスのみ有効らしい。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;U+FE0F VARIATION SELECTOR-16&lt;/code&gt; には &lt;code&gt;Emoji_Component&lt;/code&gt; プロパティが付与されている。&lt;/p&gt;
&lt;h3&gt;Emoji Modifiers&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Emoji_Modifier_Base&lt;/code&gt; プロパティが付与されている符号点コードに &lt;code&gt;Emoji_Modifier&lt;/code&gt; プロパティが付与されている符号点コードを付けることで&lt;code&gt;Emoji_Modifier_Base&lt;/code&gt; プロパティが付与されている符号点コードの絵文字を装飾できる。&lt;/p&gt;
&lt;p&gt;といって現在は肌色のトーンを変更する符号点コードしかないのだが。
肌色の異体字については&lt;a href=&#34;https://text.baldanders.info/remark/2021/03/terrible-emoji/&#34; title=&#34;おそるべき絵文字&#34;&gt;前回&lt;/a&gt;の記事を参照のこと。&lt;/p&gt;
&lt;h3&gt;Emoji Flag Sequence&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Emoji_Component&lt;/code&gt; プロパティを持つ符号点コードの中に Regional Indicator に分類されるコードがあるのだが，このコードのうち2文字を組み合わせて国別コードを構成すると国旗の絵文字になるというトンデモ仕様がある。
これについても&lt;a href=&#34;https://text.baldanders.info/remark/2021/03/terrible-emoji/&#34; title=&#34;おそるべき絵文字&#34;&gt;前回&lt;/a&gt;の記事を参照のこと。&lt;/p&gt;
&lt;h3&gt;Emoji Tag Sequence (ETS)&lt;/h3&gt;
&lt;p&gt;まず，文字種を以下のように定義する&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;tag_base := emoji_character | emoji_modifier_sequence | emoji_presentation_sequence
tag_spec := [\x{E0020}-\x{E007E}]+
tag_end  := \x{E007F}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これを使って&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;emoji_tag_sequence := tag_base tag_spec tag_end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と定義されるのが emoji tag sequence の構成である。
&lt;code&gt;tag_spec&lt;/code&gt; および &lt;code&gt;tag_end&lt;/code&gt; に含まれる符号点コードには &lt;code&gt;Emoji_Component&lt;/code&gt; プロパティが付与されている。&lt;/p&gt;
&lt;p&gt;Unicode v13 現在は subdivision-flag のみ実装されているようだ。
これについても&lt;a href=&#34;https://text.baldanders.info/remark/2021/03/terrible-emoji/&#34; title=&#34;おそるべき絵文字&#34;&gt;前回&lt;/a&gt;の記事を参照のこと。&lt;/p&gt;
&lt;h3&gt;Emoji Keycap Sequence&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;emoji_keycap_sequence := [0-9#*] \x{FE0F 20E3}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;たったこれだけのためのシーケンス。
なんだかなぁ。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;[0-9#*]&lt;/code&gt; はただの半角文字だが &lt;code&gt;Emoji_Component&lt;/code&gt; プロパティが付与されている。
また &lt;code&gt;U+20E3&lt;/code&gt; にも &lt;code&gt;Emoji_Component&lt;/code&gt; プロパティが付与されている。&lt;/p&gt;
&lt;h3&gt;Emoji ZWJ Sequence&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;emoji_zwj_element := emoji_character | emoji_presentation_sequence | emoji_modifier_sequence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;としたときに&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;emoji_zwj_sequence := emoji_zwj_element ( ZWJ emoji_zwj_element )+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で構成される絵文字。
ちなみに &lt;code&gt;U+200D ZWJ&lt;/code&gt; は &lt;code&gt;Emoji_Component&lt;/code&gt; プロパティが付与された結合子で，これを使っていくらでも文字を繋げられるのが恐ろしい点である。
といっても情報交換用として推奨される組み合わせが &lt;a href=&#34;https://unicode.org/Public/emoji/13.1/emoji-zwj-sequences.txt&#34;&gt;&lt;code&gt;emoji-zwj-sequences.txt&lt;/code&gt;&lt;/a&gt; で定義されているので，この中から選択することになるだろう。&lt;/p&gt;
&lt;h2&gt;絵文字の分類&lt;/h2&gt;
&lt;p&gt;結局，絵文字の分類は以下のようになるらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;emoji sequence
&lt;ul&gt;
&lt;li&gt;emoji core sequence
&lt;ul&gt;
&lt;li&gt;emoji character&lt;/li&gt;
&lt;li&gt;emoji presentation sequence&lt;/li&gt;
&lt;li&gt;emoji keycap sequence&lt;/li&gt;
&lt;li&gt;emoji modifier sequence&lt;/li&gt;
&lt;li&gt;emoji flag sequence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;emoji zwj sequence&lt;/li&gt;
&lt;li&gt;emoji tag sequence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;emoji character が emoji core sequence に含まれている点に注目。&lt;/p&gt;
&lt;p&gt;で， “&lt;a href=&#34;http://www.unicode.org/reports/tr51/&#34;&gt;UTS #51: Unicode Emoji&lt;/a&gt;” に絵文字を判別するための正規表現ってのが載っていたのだが&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;\p{Regional_Indicator} \p{Regional_Indicator} 
| \p{Emoji} 
  ( \p{Emoji_Modifier} 
  | \x{FE0F} \x{20E3}? 
  | [\x{E0020}-\x{E007E}]+ \x{E007F} )?
  (\x{200D} \p{Emoji}
    ( \p{Emoji_Modifier} 
    | \x{FE0F} \x{20E3}? 
    | [\x{E0020}-\x{E007E}]+ \x{E007F} )?
  )*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;http://www.unicode.org/reports/tr51/&#34;&gt;UTS #51: Unicode Emoji&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;いやいやいや。
符号点コードごとに絵文字プロパティをチェックせんとアカンのかい！ これは面倒くさい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://unicode.org/Public/emoji/13.1/emoji-sequences.txt&#34;&gt;&lt;code&gt;emoji-sequences.txt&lt;/code&gt;&lt;/a&gt; および &lt;a href=&#34;https://unicode.org/Public/emoji/13.1/emoji-zwj-sequences.txt&#34;&gt;&lt;code&gt;emoji-zwj-sequences.txt&lt;/code&gt;&lt;/a&gt; ファイルでは収録している絵文字を以下のように分類している。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分類名&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Basic_Emoji&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Emoji_Presentation&lt;/code&gt; プロパティを含む emoji character または &lt;code&gt;Emoji_Presentation&lt;/code&gt; プロパティを含まない emoji character の emoji presentation sequence で構成された絵文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Emoji_Keycap_Sequence&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;emoji keycap sequence で構成された絵文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RGI_Emoji_Flag_Sequence&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;emoji flag sequence で構成される推奨絵文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RGI_Emoji_Tag_Sequence&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;emoji tag sequence で構成される推奨絵文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RGI_Emoji_Modifier_Sequence&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;emoji modifier sequence で構成される推奨絵文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RGI_Emoji_ZWJ_Sequence&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;emoji zwj sequence で構成される推奨絵文字&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ちなみに RGI は “Recommended for General Interchange” の略だそうだ。
超意訳するなら「情報交換用の推奨絵文字」ってところかねぇ。
なお「&lt;a href=&#34;https://text.baldanders.info/emoji-list/&#34;&gt;情報交換用に推奨される絵文字のリスト&lt;/a&gt;」ではこの分類を表示している。
また &lt;a href=&#34;https://github.com/spiegel-im-spiegel/emojis&#34; title=&#34;spiegel-im-spiegel/emojis: List of Emoji-Sequences&#34;&gt;spiegel-im-spiegel/emojis&lt;/a&gt; パッケージでは絵文字シーケンスごとにこの分類をセットしている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SequencesType&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;TypeUnknown&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SequencesType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;TypeBasicEmoji&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;TypeEmojiKeycapSequence&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;TypeRGIEmojiFlagSequence&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;TypeRGIEmojiTagSequence&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;TypeRGIEmojiModifierSequence&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;TypeRGIEmojiZWJSequence&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;EmojiSequence&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Sequence&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;         &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;SequenceType&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SequencesType&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Shortcodes&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで絵文字の調査は一段落かな。
とりあえずチョー面倒くさいのは分かった。&lt;/p&gt;
</content>
	</entry><entry>
		<title>おそるべき絵文字</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/03/terrible-emoji/" />
		<id>tag:text.Baldanders.info,2021-03-30:/remark/2021/03/terrible-emoji/</id>
		<published>2021-03-30T10:58:27+00:00</published>
		<updated>2021-09-12T06:37:57+00:00</updated>
		<summary>なんでこんなカオスになっちゃったのかねぇ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;きっかけは以下の tweet:&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ほら &lt;a href=&#34;https://twitter.com/hashtag/golang?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#golang&lt;/a&gt; ならこんなに簡単に絵文字を取り除けますよ！8ビット単位だとややこしい書き方が必要になっちゃう。&lt;a href=&#34;https://t.co/AiELa8RlvS&#34;&gt;https://t.co/AiELa8RlvS&lt;/a&gt;&lt;/p&gt;&amp;mdash; のぼのぼ📡 (@nobonobo) &lt;a href=&#34;https://twitter.com/nobonobo/status/1376186097881866240?ref_src=twsrc%5Etfw&#34;&gt;March 28, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;この tweet の元ネタである「&lt;a href=&#34;https://twitter.com/c_shii41/status/1376163845647986688&#34;&gt;Go言語の正規表現regexpが遅すぎる&lt;/a&gt;」というのは概ねその通りで，私も&lt;a href=&#34;https://text.baldanders.info/golang/regular-expression/&#34; title=&#34;正規表現に関する戯れ言&#34;&gt;記事で書いた&lt;/a&gt; が，これはそもそも &lt;a href=&#34;https://golang.org/pkg/regexp/&#34; title=&#34;regexp - The Go Programming Language&#34;&gt;&lt;code&gt;regexp&lt;/code&gt;&lt;/a&gt; パッケージの設計方針が&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;The regexp implementation provided by this package is guaranteed to run in time linear in the size of the input&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/pkg/regexp/&#34;&gt;regexp - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;となっているためで，「遅くなりすぎない」ことのトレードオフとして（Ruby や Perl などと比べて）全体的に遅いのである&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;ただ，&lt;a href=&#34;https://play.golang.org/p/brhrHn6dm3A&#34;&gt;サンプルコード&lt;/a&gt;にある&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;emojiRegex&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;regexp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MustCompile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;[\U0001f000-\U0001ffff]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という正規表現はさすがに端折りすぎで，つい「&lt;a href=&#34;https://twitter.com/spiegel_2007/status/1376301767411990529&#34;&gt;そんな単純じゃねーよ&lt;/a&gt;」と脊髄反射してしまったのは許してほしい。&lt;/p&gt;
&lt;p&gt;でも，よく考えたら，ここのブログや &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜エンジニアのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; でも絵文字の話をよく書くようになったが，まとまった記事としては書いてない。
というわけで，この記事である程度まとめてみたいと思う。&lt;/p&gt;
&lt;p&gt;以上，前説おわり。&lt;/p&gt;
&lt;h2&gt;Unicode は1コード＝1文字じゃない&lt;/h2&gt;
&lt;p&gt;まず大前提として Unicode は1コード＝1文字じゃない。
これは日本語圏で苦労している私たちには自明だと思うが，たとえば「ペンギン」という単語にしたって&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ペ：&lt;code&gt;U+30D8&lt;/code&gt; + &lt;code&gt;U+309A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ン：&lt;code&gt;U+30F3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ギ：&lt;code&gt;U+30AD&lt;/code&gt; + &lt;code&gt;U+3099&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ン：&lt;code&gt;U+30F3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;と&lt;a href=&#34;https://text.baldanders.info/golang/unicode-normalization/&#34; title=&#34;Go 言語と Unicode 正規化&#34;&gt;濁点・半濁点が分離している場合がある&lt;/a&gt; 。
これは絵文字でも同様で，たとえば「土下座する男性 &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:bowing_man:&#34;&gt;🙇‍♂️&lt;/abbr&gt;」を拙作の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34; title=&#34;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; を使って Unicode 符号点（code point）に分解すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo 🙇‍♂️ | gnkf dump --unicode
0x0001f647, 0x200d, 0x2642, 0xfe0f, 0x000a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と，4つの符号点の合成列として構成されているのが分かる。
ちなみに各符号点の内容は&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号点&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;字形&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F647&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:person_bowing:&#34;&gt;🙇&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;PERSON BOWING DEEPLY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+200D&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;ZERO WIDTH JOINER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+2642&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;♂&lt;/td&gt;
&lt;td&gt;MALE SIGN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+FE0F&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;VARIATION SELECTOR-16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;となっている。
これだけ見ても，絵文字を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;emojiRegex&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;regexp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MustCompile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;[\U0001f000-\U0001ffff]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などと安直に括り出すのが如何にヤバいか分かるであろう。&lt;/p&gt;
&lt;p&gt;Unicode 文字列中の「文字」を真面目に分解して取り扱いたいなら，たとえば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 言語なら &lt;code&gt;rune&lt;/code&gt; ではなく &lt;code&gt;[]rune&lt;/code&gt; のように符号点の可変配列として取り扱う必要があるだろう。
かつ，各符号点の意味を考えながら「どこまでが1文字か」を解析するロジックが必要になる。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; では &lt;a href=&#34;https://github.com/rivo/uniseg&#34; title=&#34;rivo/uniseg: Unicode Text Segmentation for Go (or: How to Count Characters in a String)&#34;&gt;rivo/uniseg&lt;/a&gt; パッケージを使うといい感じに分解してくれるらしい。&lt;/p&gt;
&lt;h2&gt;符号とフォントと入出力&lt;/h2&gt;
&lt;p&gt;これも言ってしまえば当たり前のことなのだが，絵文字は符号とフォントと入出力が揃ってはじめて絵文字として機能する。
先ほどの &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:bowing_man:&#34;&gt;🙇‍♂️&lt;/abbr&gt; も&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo 🙇‍♂️ | gnkf dump --unicode
0x0001f647, 0x200d, 0x2642, 0xfe0f, 0x000a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という符号点の並びがひとつの絵文字であると解釈し，かつその文字に対応するフォントとグリフがあり，さらにそのグリフで表示できるアプリケーションがあってはじめて &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:bowing_man:&#34;&gt;🙇‍♂️&lt;/abbr&gt; と表示できる。&lt;/p&gt;
&lt;p&gt;この記事中の絵文字も，もしかしたらブラウザの種類やバージョン等によって 🙇♂ と2文字に見えているかもしれない。
もしくは変な記号に「文字化け」するとか，そもそも全く表示されないとか&amp;hellip;&lt;/p&gt;
&lt;p&gt;たとえば Twitter ではユーザ側の環境やアプリケーション間の差異を軽減するため，絵文字を独自の画像データに置き換えるツールキットを公開している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twemoji.twitter.com/&#34;&gt;Twemoji&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜エンジニアのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; のアテンション用絵文字もこれを使って表示している筈。&lt;/p&gt;
&lt;p&gt;それぞれの絵文字がどのように表示されるか（または表示されないか）については Unicode 公式ページにある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://unicode.org/emoji/charts/full-emoji-list.html&#34;&gt;Full Emoji List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が参考になるだろう。
2021年3月時点の最新版である v13.1 では1,816個の絵文字が定義されている。&lt;/p&gt;
&lt;p&gt;多いよ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;ターミナル・エミュレータと絵文字&lt;/h3&gt;
&lt;p&gt;ブラウザとかスマホ・アプリならまだマシだと思うが， CUI ベースのターミナル・エミュレータは絵文字周りが特に冷遇されている印象がある。&lt;/p&gt;
&lt;p&gt;私は CLI ツールで対話モードを組むときに &lt;a href=&#34;https://github.com/nyaosorg/go-readline-ny&#34; title=&#34;nyaosorg/go-readline-ny: Readline library for golang , used in nyagos&#34;&gt;nyaosorg/go-readline-ny&lt;/a&gt; パッケージ&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; のお世話になるのだが，&lt;a href=&#34;https://github.com/nyaosorg/go-readline-ny/releases&#34; title=&#34;Releases · nyaosorg/go-readline-ny&#34;&gt;リリース情報&lt;/a&gt;を見るとホンマに絵文字で苦労されているのが分かる。
その一端が以下の &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜エンジニアのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; 本に記されているので，是非ご覧あれ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/zetamatta/books/b820d588f4856bcf836c&#34;&gt;Windows と Unicode とボク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プログラマが読んだら涙で前が見えなくなるよ（笑）&lt;/p&gt;
&lt;h2&gt;“#” の Keycap はあるのに “A” の Keycap はないのか&lt;/h2&gt;
&lt;p&gt;上で紹介した “&lt;a href=&#34;https://unicode.org/emoji/charts/full-emoji-list.html&#34;&gt;Full Emoji List&lt;/a&gt;” を眺めると，たとえば絵文字 &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:keycap_#:&#34;&gt;#️⃣&lt;/abbr&gt; は&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号点&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;字形&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+0023&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;NUMBER SIGN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+FE0F&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;VARIATION SELECTOR-16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+20E3&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt; ⃣&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;COMBINING ENCLOSING KEYCAP&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;という並びになっている。
もう&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;emojiRegex&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;regexp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MustCompile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;[\U0001f000-\U0001ffff]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という正規表現に微塵もかからない（笑）&lt;/p&gt;
&lt;p&gt;いや，そうじゃなくて。
たしかに普通の半角記号である &lt;code&gt;#&lt;/code&gt; が合成列の先頭に来ているのも驚きだが，その直後に絵文字用の異体字セレクタが来ているのにビックリした。
必ずしも異体字セレクタが最後に付くんじゃないのか。&lt;/p&gt;
&lt;p&gt;まぁ，でも意味は分かる。
&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:keycap_#:&#34;&gt;#️⃣&lt;/abbr&gt; は &lt;code&gt;#&lt;/code&gt; 記号の絵文字異体字ってことで，先頭の符号点だけ見れば &lt;code&gt;#&lt;/code&gt; と等価な文字として扱えるってことだよね。
そしてその後ろに keycap を表す結合文字がくっ付いている，と。&lt;/p&gt;
&lt;p&gt;そんじゃあ &lt;code&gt;#&lt;/code&gt; の代わりに &lt;code&gt;A&lt;/code&gt; とかの任意の文字でも keycap の絵文字が作れるんじゃね？ と一瞬思ったが “&lt;a href=&#34;https://unicode.org/emoji/charts/full-emoji-list.html&#34;&gt;Full Emoji List&lt;/a&gt;” を見る限りそんなことはないようだ&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;どういうルールなんだろうねぇ。&lt;/p&gt;
&lt;h2&gt;肌色の異体字&lt;/h2&gt;
&lt;p&gt;最初に紹介した “PERSON BOWING DEEPLY” &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:person_bowing:&#34;&gt;🙇&lt;/abbr&gt; には肌色の情報をくっ付けることができる。&lt;/p&gt;
&lt;p&gt;こんな感じ。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;合成列&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;字形&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F647&lt;/code&gt; + &lt;code&gt;U+1F3FB&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:person_bowing_tone1:&#34;&gt;🙇🏻&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;person bowing: light skin tone&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F647&lt;/code&gt; + &lt;code&gt;U+1F3FC&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:person_bowing_tone2:&#34;&gt;🙇🏼&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;person bowing: medium-light skin tone&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F647&lt;/code&gt; + &lt;code&gt;U+1F3FD&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:person_bowing_tone3:&#34;&gt;🙇🏽&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;person bowing: medium skin tone&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F647&lt;/code&gt; + &lt;code&gt;U+1F3FE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:person_bowing_tone4:&#34;&gt;🙇🏾&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;person bowing: medium-dark skin tone&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F647&lt;/code&gt; + &lt;code&gt;U+1F3FF&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:person_bowing_tone5:&#34;&gt;🙇🏿&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;person bowing: dark skin tone&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;この肌色って人種を指すものじゃなくて “&lt;a href=&#34;https://en.wikipedia.org/wiki/Fitzpatrick_scale&#34; title=&#34;Fitzpatrick scale - Wikipedia&#34;&gt;fitzpatrick skin typing&lt;/a&gt;” と呼ばれる紫外線への感受性を基にした分類らしい。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号点&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F3FB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EMOJI MODIFIER FITZPATRICK TYPE-1-2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F3FC&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EMOJI MODIFIER FITZPATRICK TYPE-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F3FD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EMOJI MODIFIER FITZPATRICK TYPE-4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F3FE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EMOJI MODIFIER FITZPATRICK TYPE-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F3FF&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EMOJI MODIFIER FITZPATRICK TYPE-6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;このコードは結合文字の一種のように見えるが，どんな絵文字にもくっ付くわけではないらしい。
有効な組み合わせは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.unicode.org/emoji/charts/full-emoji-modifiers.html&#34;&gt;Full Emoji Modifier Sequences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を参考にするといいだろう。&lt;/p&gt;
&lt;h2&gt;ZWJ による絵文字の合成&lt;/h2&gt;
&lt;p&gt;最初の「土下座する男性 &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:bowing_man:&#34;&gt;🙇‍♂️&lt;/abbr&gt;」に戻る。
男性があるのだから女性バージョン &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:bowing_woman:&#34;&gt;🙇‍♀️&lt;/abbr&gt; も当然ある。&lt;/p&gt;
&lt;p&gt;&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:bowing_woman:&#34;&gt;🙇‍♀️&lt;/abbr&gt; の内容は以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号点&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;字形&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F647&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:person_bowing:&#34;&gt;🙇&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;PERSON BOWING DEEPLY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+200D&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;ZERO WIDTH JOINER&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+2640&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;♀&lt;/td&gt;
&lt;td&gt;FEMALE SIGN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+FE0F&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;VARIATION SELECTOR-16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;つまり “PERSON BOWING DEEPLY” に性差を示す “MALE SIGN” または “FEMALE SIGN” を “ZERO WIDTH JOINER” (ZWJ) を介してくっ付けることで異体字を構成している。&lt;/p&gt;
&lt;p&gt;このように ZWJ を使って文字をくっ付けて異体字や新たな絵文字を作る方法にはかなりのバリエーションがあるようだが，どうもプラットフォームごとに勝手にコードを組み合わせているらしく上手く表示できないパターンがあるようだ。&lt;/p&gt;
&lt;p&gt;このため &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜エンジニアのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; では，以下のリストにない絵文字を排除することで&lt;a href=&#34;https://github.com/zenn-dev/zenn-roadmap/issues/224#issuecomment-767231796&#34;&gt;対応&lt;/a&gt;しているそうだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.unicode.org/emoji/charts/emoji-zwj-sequences.html&#34;&gt;Recommended Emoji ZWJ Sequences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この一覧によると “PERSON BOWING DEEPLY” &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:person_bowing:&#34;&gt;🙇&lt;/abbr&gt; には，前節の肌色バリエーションと男女性差のバリエーションを組み合わせて，合計10個の異体字がある，ということになる。&lt;/p&gt;
&lt;h2&gt;国旗絵文字&lt;/h2&gt;
&lt;p&gt;個人的にこれが一番ワケワカメ。&lt;/p&gt;
&lt;p&gt;REGIONAL INDICATOR なるコードがあって&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号点&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;字形&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F1E6&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;🇦&lt;/td&gt;
&lt;td&gt;REGIONAL INDICATOR SYMBOL LETTER A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F1E7&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;🇧&lt;/td&gt;
&lt;td&gt;REGIONAL INDICATOR SYMBOL LETTER B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F1E8&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;🇨&lt;/td&gt;
&lt;td&gt;REGIONAL INDICATOR SYMBOL LETTER C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F1EF&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;🇯&lt;/td&gt;
&lt;td&gt;REGIONAL INDICATOR SYMBOL LETTER J&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F1F5&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;🇵&lt;/td&gt;
&lt;td&gt;REGIONAL INDICATOR SYMBOL LETTER P&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F1FF&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;🇿&lt;/td&gt;
&lt;td&gt;REGIONAL INDICATOR SYMBOL LETTER Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これを使って ISO 3166 (日本では JIS X 0304) の国別コードを組むと国旗の絵文字になるらしい。
日本の国別コードは JP なので&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;合成列&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;字形&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+1F1EF&lt;/code&gt; + &lt;code&gt;U+1F1F5&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:flag_jp:&#34;&gt;🇯🇵&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;flag: Japan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;となる。&lt;/p&gt;
&lt;p&gt;ところでこれ，ちゃんと国旗に見えてます？ かなり環境依存度が大きいようで Windows とかでは軒並みアウトっぽい。&lt;/p&gt;
&lt;p&gt;さらにアレなのが Unicode 10.0 で追加された &lt;a href=&#34;https://emojipedia.org/emoji-tag-sequence/&#34; title=&#34;🏴󠁧󠁢󠁳󠁣󠁴󠁿 Emoji Tag Sequences for Subdivision Flags&#34;&gt;subdivision-flag&lt;/a&gt; に分類されているもので，たとえば「イングランドの国旗 &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:flag_England:&#34;&gt;🏴󠁧󠁢󠁥󠁮󠁧󠁿&lt;/abbr&gt;」は&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号点&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;字形&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+x1F3F4&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;🏴&lt;/td&gt;
&lt;td&gt;WAVING BLACK FLAG&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+E0067&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;TAG LATIN SMALL LETTER G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+E0062&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;TAG LATIN SMALL LETTER B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+E0065&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;TAG LATIN SMALL LETTER E&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+E006E&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;TAG LATIN SMALL LETTER N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+E0067&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;TAG LATIN SMALL LETTER G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U+E007F&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td&gt;CANCEL TAG&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;という並びになっている。
一般的には “WAVING BLACK FLAG” と “CANCEL TAG” の間に TAG LATIN SMALL LETTER A～Z (&lt;code&gt;U+E0061&lt;/code&gt; ～ &lt;code&gt;U+E007A&lt;/code&gt;) を5つ並べる構成になっているらしい。&lt;/p&gt;
&lt;p&gt;なにその面倒くさいやつ。&lt;/p&gt;
&lt;h2&gt;絵文字シーケンスのまとめ&lt;/h2&gt;
&lt;p&gt;以上をまとめると，絵文字の分類は以下のようになっているらしい（「&lt;a href=&#34;https://qiita.com/_sobataro/items/47989ee4b573e0c2adfc&#34; title=&#34;Unicode 絵文字にまつわるあれこれ (絵文字の標準とプログラム上でのハンドリング) - Qiita&#34;&gt;Unicode 絵文字にまつわるあれこれ&lt;/a&gt;」を参考に分類）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;singleton ： 単体のコードポイントからなる絵文字&lt;/li&gt;
&lt;li&gt;emoji sequence ： 複数のコードポイントからなる絵文字
&lt;ul&gt;
&lt;li&gt;emoji core sequence ： 通常の絵文字
&lt;ul&gt;
&lt;li&gt;emoji combining sequence ： 囲み文字&lt;/li&gt;
&lt;li&gt;emoji modifier sequence ： skin tone 絵文字&lt;/li&gt;
&lt;li&gt;emoji flag sequence ： 国旗絵文字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;emoji zwj sequence ： 家族絵文字、職業絵文字など&lt;/li&gt;
&lt;li&gt;emoji tag sequence ：タグ絵文字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この分類でいくと Keycap の絵文字は “emoji combining sequence” に相当する。
肌色の異体字は “emoji modifier sequence” やね。
ZWJ にとる文字の結合は “emoji zwj sequence” で，国旗絵文字はそのまま “emoji flag sequence”。
ただし subdivision-flag は “emoji tag sequence” に分類されるようだ。&lt;/p&gt;
&lt;p&gt;しかもこれってただの分類なので，実際の絵文字がどれに分類されるかは「知識」としてあらかじめ知ってないといけない。
プログラマ的に言うならロジックを書くだけでは足りなくてロジックを駆動する知識をデータベースとして何処かに保持っておく必要がある。&lt;/p&gt;
&lt;p&gt;なんでこんなカオスになっちゃったのかねぇ。
本当に「おそるべき絵文字」だよ。&lt;/p&gt;
&lt;h2&gt;【余談】元号記号も絵文字と見做せばいいぢゃん&lt;/h2&gt;
&lt;p&gt;絵文字を調べてて思い出したのが，4年前に書いた&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/character-of-the-new-era-name/&#34;&gt;新元号「文字」という技術的負債&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という記事。
「&lt;a href=&#34;https://text.baldanders.info/remark/2020/12/technical-debt-and-hacker/&#34; title=&#34;技術的負債とハッカー&#34;&gt;技術的負債&lt;/a&gt;」と口走ったのは私の黒歴史としてスルーしていただけるとありがたいが，よく考えたら「㍻ &lt;code&gt;U+337B&lt;/code&gt;」とかを「文字」だと思うから不合理に感じるのであって「絵文字」と思えばアリなのか。
いや， Unicode では絵文字と定義しているわけじゃないけど。&lt;/p&gt;
&lt;p&gt;でも「&lt;abbr class=&#34;emoji-chars&#34; title=&#34;:copyright:&#34;&gt;©️&lt;/abbr&gt; &lt;code&gt;U+00A9&lt;/code&gt;」だって絵文字扱いなんだから ㍻ も絵文字でいいよね（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;p&gt;Unicode における「絵文字」黎明期の話は，&lt;a href=&#34;https://ogwata.hatenadiary.org/&#34; title=&#34;もじのなまえ&#34;&gt;小形克宏&lt;/a&gt;さんの一連の記事が参考になる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/20389042/&#34;&gt;絵文字が開いてしまった「パンドラの箱」第1回&amp;ndash;日本の携帯電話キャリアが選んだ道 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/20389453/&#34;&gt;絵文字が開いてしまった「パンドラの箱」第2回&amp;ndash;Googleの開けてしまった箱の中味 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/20390204/&#34;&gt;絵文字が開いてしまった「パンドラの箱」第3回&amp;ndash;Unicode提案の限界とメリット - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/20394318/&#34;&gt;絵文字が開いてしまった「パンドラの箱」第4回&amp;ndash;絵文字が引き起こしたUnicode-MLの“祭り” - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/20398174/&#34;&gt;絵文字が開いてしまった「パンドラの箱」第5回&amp;ndash;絵文字と日本マンガの親密な関係 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/20407674/&#34;&gt;絵文字が開いてしまった「パンドラの箱」第6回&amp;ndash;Google・Apple提案とそのシナリオ - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/20407951/&#34;&gt;絵文字が開いてしまった「パンドラの箱」第7回&amp;ndash;そして舞台はダブリンから東京へ - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/20409186/&#34;&gt;グーグルが絵文字を世界標準に提案した理由&amp;ndash;国際化エンジニアに聞くプロジェクトの舞台裏（前編） - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/20409186/&#34;&gt;グーグルが絵文字を世界標準に提案した理由&amp;ndash;国際化エンジニアに聞くプロジェクトの舞台裏（前編） - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://internet.watch.impress.co.jp/docs/special/670150.html&#34;&gt;「絵文字に平等をサポートしてください」人種差別の指摘にゆれるUnicode - INTERNET Watch Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://internet.watch.impress.co.jp/docs/special/678029.html&#34;&gt;どんな人々がUnicodeの絵文字に「民族の多様性」を求めているのか？ - INTERNET Watch Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://internet.watch.impress.co.jp/docs/special/379269.html&#34;&gt;絵文字を「符号」として処理する難しさ～日本のモバイルウェブのカオスぶり - INTERNET Watch Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://internet.watch.impress.co.jp/docs/special/380149.html&#34;&gt;絵文字を「語」として処理する難しさ～定義通りとは限らない、絵文字の意味 - INTERNET Watch Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://internet.watch.impress.co.jp/docs/special/380180.html&#34;&gt;絵文字を「語」として処理する難しさ～「ビール」と「飲み会」見分ける技術 - INTERNET Watch Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他のブックマーク：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lets-emoji.com/&#34;&gt;Let&amp;rsquo;s EMOJI｜絵文字一覧と絵文字検索🎉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/10/emoji-variation-and-markdown/&#34;&gt;絵文字と異体字と Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/unicode-rangetables/&#34;&gt;Unicode 文字種の判別&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20210118-characters&#34;&gt;やっかいな日本語&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/regexp/&#34; title=&#34;regexp - The Go Programming Language&#34;&gt;&lt;code&gt;regexp&lt;/code&gt;&lt;/a&gt; パッケージの設計については &lt;q&gt;&lt;a href=&#34;https://swtch.com/~rsc/regexp/regexp1.html&#34;&gt;Regular Expression Matching Can Be Simple And Fast&lt;/a&gt;&lt;/q&gt; を参照のこと。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nyaosorg/go-readline-ny&#34; title=&#34;nyaosorg/go-readline-ny: Readline library for golang , used in nyagos&#34;&gt;nyaosorg/go-readline-ny&lt;/a&gt; は同じ作者による &lt;a href=&#34;https://github.com/nyaosorg/nyagos&#34; title=&#34;nyaosorg/nyagos: NYAGOS - The hybrid Commandline Shell betweeeeeeen UNIX &amp;amp; DOS&#34;&gt;NYAGOS&lt;/a&gt; からのスピンオフで，ターミナル・エミュレータからの入力制御に特化している。Emacs 風のキー・バインドでヒストリ機能を付けることもできる。元々は Windows 用だと思うが Ubuntu のターミナル・エミュレータでも問題なく機能するので重宝している。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;処理系によっては任意のコードを組み合わせて勝手に絵文字を作れたりするのかもしれないが，互換性がなくなるので「情報交換用」としては使えない。ちなみに &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:A_button_(blood_type):&#34;&gt;🅰&lt;/abbr&gt; という絵文字はあるが，これは血液型（A型）を表す絵文字らしい。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Java のサポート期限ってどうなってるんだっけ？</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2021/03/java-support-roadmap/" />
		<id>tag:text.Baldanders.info,2021-03-19:/release/2021/03/java-support-roadmap/</id>
		<published>2021-03-19T11:25:53+00:00</published>
		<updated>2021-04-11T01:57:29+00:00</updated>
		<summary>アップデートは計画的に。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ぶっちゃけ &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; を動かす程度の利用なら最新の &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; だけ気にしていればよかったんだけど，仕事で Java を使うとなればそういうわけにもいかない。
けど，今の Java のサポート期限ってどうなってるんだっけ？&lt;/p&gt;
&lt;p&gt;まずは Oracle Java。
これははっきりしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/technologies/java-se-support-roadmap.html&#34;&gt;Oracle Java SE Support Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これによると&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Release&lt;/th&gt;
&lt;th&gt;GA Date&lt;/th&gt;
&lt;th&gt;Premier Support&lt;/th&gt;
&lt;th&gt;Extended Support&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;2011-07&lt;/td&gt;
&lt;td&gt;2019-07&lt;/td&gt;
&lt;td&gt;2022-07&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2014-03&lt;/td&gt;
&lt;td&gt;2022-03&lt;/td&gt;
&lt;td&gt;2030-12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;2017-09&lt;/td&gt;
&lt;td&gt;2018-03&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2018-03&lt;/td&gt;
&lt;td&gt;2018-09&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11 (LTS)&lt;/td&gt;
&lt;td&gt;2018-09&lt;/td&gt;
&lt;td&gt;2023-09&lt;/td&gt;
&lt;td&gt;2026-09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;2019-03&lt;/td&gt;
&lt;td&gt;2019-09&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2019-09&lt;/td&gt;
&lt;td&gt;2020-03&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2020-03&lt;/td&gt;
&lt;td&gt;2020-09&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2020-09&lt;/td&gt;
&lt;td&gt;2021-03&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2021-03&lt;/td&gt;
&lt;td&gt;2021-09&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17 (LTS)&lt;/td&gt;
&lt;td&gt;2021-09&lt;/td&gt;
&lt;td&gt;2026-09&lt;/td&gt;
&lt;td&gt;2029-03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ということらしい&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;（どのバージョンでも Sustaining Support は無期限で受けれるため省いた）。
つまり Premier Support を受けれるバージョンは現時点（2021-03）で 8, 11, 15/16 が対象となる（15 は 2021-03 まで）。
Extended Support なら 7 も含まれる（Java 7 なら費用は免除）。&lt;/p&gt;
&lt;p&gt;一方 &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; はよく分からない。&lt;/p&gt;
&lt;p&gt;Java 10 以降なら（リリースサイクルが半年毎というだけで）特にサポート期限というものはないみたい。
向こうが「やーめた」と言うまではアップデートを出し続けるのかな？ 7u と 8u については記述がなかったが，四半期ごとのマイナーアップデートの対象になってるみたいなので，一応はサポートしていると思われる。
まぁ， Oracle Java や &lt;a href=&#34;https://adoptopenjdk.net/&#34; title=&#34;AdoptOpenJDK - Open source, prebuilt OpenJDK binaries&#34;&gt;AdoptOpenJDK&lt;/a&gt;, &lt;a href=&#34;http://www.eclipse.org/openj9/&#34; title=&#34;Eclipse OpenJ9&#34;&gt;OpenJ9&lt;/a&gt; などからフィードバックがあるのかもしれない。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://adoptopenjdk.net/&#34; title=&#34;AdoptOpenJDK - Open source, prebuilt OpenJDK binaries&#34;&gt;AdoptOpenJDK&lt;/a&gt; のサポート期限は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://adoptopenjdk.net/support.html&#34;&gt;Support | AdoptOpenJDK - Open source, prebuilt OpenJDK binaries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;によると&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;バージョン&lt;/th&gt;
&lt;th&gt;First Availability&lt;/th&gt;
&lt;th&gt;End of Availability&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;8 (LTS)&lt;/td&gt;
&lt;td&gt;2014-03&lt;/td&gt;
&lt;td&gt;at least 2022-05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;2017-09&lt;/td&gt;
&lt;td&gt;2018-03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2018-03&lt;/td&gt;
&lt;td&gt;2018-09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11 (LTS)&lt;/td&gt;
&lt;td&gt;2018-09&lt;/td&gt;
&lt;td&gt;2024-10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;2019-03&lt;/td&gt;
&lt;td&gt;2019-09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;2019-09&lt;/td&gt;
&lt;td&gt;2020-03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2020-03&lt;/td&gt;
&lt;td&gt;2020-09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2020-09&lt;/td&gt;
&lt;td&gt;2021-03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2021-03&lt;/td&gt;
&lt;td&gt;2021-09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17 (LTS)&lt;/td&gt;
&lt;td&gt;2021-09&lt;/td&gt;
&lt;td&gt;(TBC)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;となっていた。
現時点（2021-03）では 8, 11, 15/16 がサポート対象だ（15 は 2021-03 まで）。&lt;/p&gt;
&lt;p&gt;今はクラウドサービスごとに独自のディストリビューションを提供してたりするので， 11 以降ならあまり気にする必要はないのかな。
今だに 8/8u を使ってるサービス（行政サービスとか多そうだw）は，そろそろ未来について（Java を捨てる選択肢も含めて）議論したほうがいいだろう。&lt;/p&gt;
&lt;p&gt;なお，年間のリリース・イベントは以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;月&lt;/th&gt;
&lt;th&gt;バージョンアップ・イベント&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;1月&lt;/td&gt;
&lt;td&gt;マイナー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;3月&lt;/td&gt;
&lt;td&gt;メジャー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;4月&lt;/td&gt;
&lt;td&gt;マイナー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;5月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;6月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7月&lt;/td&gt;
&lt;td&gt;マイナー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;9月&lt;/td&gt;
&lt;td&gt;メジャー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;10月&lt;/td&gt;
&lt;td&gt;マイナー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;11月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;12月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;アップデートは計画的に。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://projects.eclipse.org/projects/adoptium&#34;&gt;Eclipse Adoptium | projects.eclipse.org&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/adoptopenjdkeclipse_foundationeclipse_adoptium.html&#34;&gt;AdoptOpenJDKプロジェクトがEclipse Foundationへの合流を発表。合流後の新プロジェクト名は「Eclipse Adoptium」に － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/awsjava_82026java_1120273javacorretto_8corretto_11.html&#34;&gt;AWS、「Java 8」を2026年まで、「Java 11」は2027年まで、現行より3年サポート期間延長を発表。独自JavaディストリビューションのCorretto 8とCorretto 11で － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/yamadamn/articles/2e3b388076cbde229655&#34;&gt;OpenJDKと各種JDKディストリビューションの情報源まとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/21/javamicrosoft_build_of_openjdk.html&#34;&gt;マイクロソフトが無償でJavaの長期サポートを提供へ、「Microsoft Build of OpenJDK」をリリース － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41WZElZb9eL._SL160_.jpg&#34; width=&#34;128&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Effective Java 第3版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Joshua Bloch (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2018-10-30&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-03-17&#34;&gt;2021-03-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Effective Java 第3版 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Oracle Java 8 はクライアント側での利用と開発目的での利用のみ許可されている。サーバ側での運用は別途有償契約が必要（の筈）。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
</feed>
