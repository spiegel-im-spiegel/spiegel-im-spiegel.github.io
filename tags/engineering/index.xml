<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Engineering - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/engineering/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/engineering/index.xml" />
	<id>tag:text.Baldanders.info,2015-10-01T20:47:00+0900:/</id>
	<updated>2015-10-01T20:47:00+0900</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>人工知能は「ハイル・ヒトラー」と叫ぶか - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/artificial-intelligence/" />
		<id>tag:text.Baldanders.info,2015-10-01T20:47:00+0900:/remark/2015/artificial-intelligence/</id>
		<published>2015-10-01T20:47:00+0900</published>
		
		<summary>「人工知能に人類と協力する目的を持たせる」にしろ「人工知能の開発は人類がコントロールできるように進める」にしろ，人工知能が「ハイル・ヒトラー」と叫ぶ可能性は排除できない。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;サイトリニューアルの余波で&lt;a href=&#34;http://www.baldanders.info/spiegel/log/&#34;&gt;昔の日記&lt;/a&gt;なんか眺めてたら「&lt;a href=&#34;http://www.ne.jp/asahi/comp/tarusan/index.html&#34;&gt;たるさんのパソコンフィールド&lt;/a&gt;」が復活していることに気が付いた。
当時はよく読んでたなぁ。
スパコンネタは（そっち方面には詳しくないので）当時は本当に勉強になりました。&lt;/p&gt;

&lt;p&gt;で，復活後の記事から。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ne.jp/asahi/comp/tarusan/main257.htm&#34;&gt;ラスト関東を楽しむ日&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事の後半部分が人工知能の話である。&lt;/p&gt;

&lt;p&gt;個人的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;個々のヒトには（身体的な理由により）知性の限界が存在する&lt;/li&gt;
&lt;li&gt;人工知能がヒトを超えるのなら，それは間違いなく「進化」である&lt;/li&gt;
&lt;li&gt;知性の進化をヒトが阻むのなら，ヒトは進化のレースから退場すべき&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と考えている。
しかし実際には，人工知能が人間社会と本格的に競合することはないと思う。&lt;/p&gt;

&lt;figure lang=&#34;ja&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;さらに人間と機械は、出自がちがうので、同じリソースをめぐって争う必要がない。
これが動物だと、居住空間とか食べ物とか毛皮や肉とか、競合する資源がある。
だけど機械とは競合しない……完全にしないとは言わないけれど、他の動物と比べれば大幅にちがう。
人間はお金や女や権力を巡って争ってきたけど、機械はお金とか関係ないし、セックスもしないし（人間のほうはしたがる人もいるけど）、権力も関係ない。
だから機械やAIが賢くなっても、別に人間なんか滅ぼす必要なんかまったくない。
人間にそういうものをエサとして差し出せば（あるいは実物なくても画面にその絵を描いてやるだけで）人間はホイホイ動くし掃除もするしメンテもするし。機械にとってこんな便利なものはないよ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://cruel.hatenablog.com/entry/2015/08/28/161912&#34;&gt;機械支配待望論&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;もちろん失くなる職業はあるだろうし&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，存続する職業の多くは変革を迫られるかもしれない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
でもそれは過去の歴史で何度もあったことで，しかもその程度のことなら20世紀から予測された「想定内」の話である。&lt;/p&gt;

&lt;p&gt;問題は人工知能ではなくヒト（人間社会）の側にある。&lt;/p&gt;

&lt;p&gt;人間社会はいまだかつて自身に匹敵するまたは自身を上回る「対外知性」に出会ったことがない。
もちろん対外知性と交渉するための法も規範も存在しない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
もし人工知能がヒトに匹敵またはヒトを上回る知性を獲得したとして，そのことに社会が堪えられるかどうかがヒトの進化の分岐点となるのだろう。&lt;/p&gt;

&lt;figure lang=&#34;ja&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;いや、まだまだ懸念事項はある。これらの人工知能には良心という概念はプログラミングする事無しには存在し得ない。とすると、現代版ヒトラーや現代版スターリンが人工知能に世界制圧を命令して設定したら．．．&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.ne.jp/asahi/comp/tarusan/main257.htm&#34;&gt;ラスト関東を楽しむ日&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;これは面白い。&lt;/p&gt;

&lt;p&gt;どう考えたって「人工知能は洗脳に弱い&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;」。
「機械学習」なんてのは体のいい洗脳である（もちろん偏見）。
人工知能の側に人間社会と競合する理由はなくても，人間自身がそのように「刷り込み」を行ったらどうなるか。&lt;/p&gt;

&lt;figure lang=&#34;ja&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;2015年5月にロンドンで開催された「Zeitgeist 2015」のカンファレンスで、ホーキング博士は今後100年以内に人工知能が人間を超えるだろうと警告しました。人工知能が人類を超えるとき、人工知能に人類と協力する目的を持たせるべき必要があり、また人工知能の開発は人類がコントロールできるように進めるべきだ、とホーキング博士は考えています。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://gigazine.net/news/20150529-ai-will-overtake-humans/&#34;&gt;人工知能は核兵器よりも潜在的に危険、ホーキング博士が「100年以内に人工知能は人間を超える」と警告 - GIGAZINE&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;結局これはいつもの「技術の両義性」の話だ。
「人工知能に人類と協力する目的を持たせる」にしろ「人工知能の開発は人類がコントロールできるように進める」にしろ，人工知能が「ハイル・ヒトラー」と叫ぶ可能性は排除できない。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:cc9cb610c712d98fa6058f6db1926168&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35070557/&#34;&gt;人工知能「IBM Watson」は何に使われているのか？ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35071319/&#34;&gt;「Watson」は科学的根拠に基づいて結論を出す、言うなれば“その道の専門家”だ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考文献:cc9cb610c712d98fa6058f6db1926168&#34;&gt;参考文献&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/31e2h91IUWL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22/&#34;&gt;イノベーション 悪意なき嘘 (双書 時代のカルテ)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;名和 小太郎 &lt;/dd&gt;&lt;dd&gt;岩波書店 2007-01-11&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「両用技術とはどのようなものか。その核心には「矛と楯の論理」がある」（本書より）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-10-01&#34;&gt;2015-10-01&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;若い方は知らないだろうが（私も実際に会ったことはないが），テレビモニタとキーボードを備えた対話型コンピュータが登場する前は，「コーダー」というただプログラムを書くだけの職業が存在した。もちろん，現在は「コーダー」なる職業は存在しない。プログラマがコードを書くからだ。だから歴史的には，いつか人工知能がプログラムを設計してコードを書くようになったとしても驚くことではない。まぁ進化論的には道具が自身のために自律的に道具を生み出せるようになったら驚くことだが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;グレッグ・イーガンの『万物理論』では最終的に人工知能が「万物理論」の論文を書き上げる。過去の例で言うなら，戦後の日本の主婦は炊飯器・洗濯機・冷蔵庫の「三種の神器」のおかげで家事から解放されたという伝説がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;実は「&lt;a href=&#34;http://www.seti-inst.edu/post-detection.html&#34;&gt;地球外知的生命体の発見に続いてとるべき行動の公式な原則&lt;/a&gt;」というのは存在する。大真面目な話である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;そもそも「良心」自体が社会的刷り込みだけどね。というか，「個」と「社会」の関係を定義することなく「良心」を組み込むのは無理だと思うのだが。そのためには人工知能を社会に「包摂」しなくてはならない。ってこれは「&lt;a href=&#34;http://robotlaw.jp/&#34;&gt;ロボット法学会&lt;/a&gt;」の仕事かな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>制約は構造を生む - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/the-structure-from-restriction/" />
		<id>tag:text.Baldanders.info,2015-09-30T20:33:14+0900:/remark/2015/the-structure-from-restriction/</id>
		<published>2015-09-30T20:33:14+0900</published>
		
		<summary>制約は programmable である</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;「制約は構造を生む」というのは確か結城浩さんの『数学ガール』の中にあったフレーズだと思うが，私はこの言葉が好きである。
ただし，私の中ではこの言葉に続きがあって，それは「制約は programmable である」というものだ。&lt;/p&gt;

&lt;p&gt;「言葉」というのは面白いもので，表現のためのすばらしい手段でありながら，それ自体が表現に制約を加える。
自然言語の場合，その「制約」が硬直化するのを防ぐため自己を改変していく&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
しかしプログラミング言語の場合は「仕様」であり「ルール」であるため自己改変がしづらい面がある。
つまり，どんなプログラミング言語にも「賞味期限」があるのだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000529.shtml&#34;&gt;前にも書いた&lt;/a&gt;けど，私は職業プログラマなので，プログラミングが好きでも嫌いでもない。
私から見れば「プログラミングが好き」というのは「鋸が好き」と言ってるのと大差ない。
プログラミング言語も同様で，基本的にはどんな言語にも対応できる自信はあるが，特定の言語が好きというのはない。&lt;/p&gt;

&lt;p&gt;それでも「これで何かを作ってみたい」と思う言語はいくつかあって，私の場合はそれが C/C++ や Java そして Go 言語である。
どういうわけかスクリプト言語にはあまり食指は向かなかった。
これはたぶん後付けの理由だけど，スクリプト言語というのはひたすら対象を「記述」しているだけで，あまり「作ってる」実感がない。&lt;/p&gt;

&lt;p&gt;先日，ついカッとなって「&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;」という記事を書いたが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，書いてて思い出したのが，まさに「制約は構造を生む」というフレーズだった。&lt;/p&gt;

&lt;p&gt;いわゆる「オブジェクト指向言語」が台頭しだした頃， C++ や Java でなかなか馴染めなかったのが「例外処理」である。
「&lt;a href=&#34;http://www.kaoriya.net/blog/2014/04/17/&#34;&gt;または私は如何にして例外するのを止めて golang を愛するようになったか&lt;/a&gt;」で「Java の例外が発生しうるメソッドの呼び出しは分岐を隠蔽・内包している」と指摘されているように，まさにこれは呼び出した関数から見て正体不明の &lt;code&gt;longjump&lt;/code&gt; をかまされるのとほとんど同じであり&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，「そんな危ないもん使えるか！」というのが最初の印象だった。
まぁ，もうすっかり馴らされたけどね。&lt;/p&gt;

&lt;p&gt;かつての私のように，例外になじめない人は結構いるようで，中には呼び出す関数ひとつひとつを &lt;code&gt;try-catch&lt;/code&gt; で囲ってる人とかもいて，「それって例外で実装する意味あるのか？」って感じである。
で，結局，関数の返値専用のオブジェクトを作って，返ってくるオブジェクトの状態を見てエラー・ハンドリングしたり。
それって CDD (Context-Driven Design) の萌芽かも（笑）&lt;/p&gt;

&lt;p&gt;Go 言語のエラー・ハンドリングと「古き良き」例外処理のどちらが優れているのかは一概に言えないと思うが，個人的には Go 言語のやり方に慣れてしまったら例外処理には戻れない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
今まで触ってみた感触だけど，おそらく Go 言語の肝は &lt;code&gt;return&lt;/code&gt; にあると思う。
Go 言語の &lt;code&gt;return&lt;/code&gt; をどう記述するか（あるいはしないか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;）がコードの構造を決める鍵になっている。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;逆に言うと自己改変しなくなった言語は緩慢な死を迎える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;後悔はしていない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;今はもう存在しないと思うが，初期の C++ の実装のいくつかは例外を &lt;code&gt;longjump&lt;/code&gt; で実装していた。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;いや，もちろん仕事ならやりますよ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;記述しないことは記述することの一種である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GOPATH 汚染問題 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/gopath-pollution/" />
		<id>tag:text.Baldanders.info,2015-09-29T23:40:59+0900:/golang/gopath-pollution/</id>
		<published>2015-09-29T23:40:59+0900</published>
		<updated>2015-09-30T20:12:00+0900</updated>
		<summary>go get コマンドは外部パッケージの revision 等をコントロールできず，常に repository の最新コードを取ってこようとする。GOPATH 内に複数のプロジェクトが同居している場合は同じ外部パッケージでもプロジェクトごとに異なるリビジョンを要求する場合があり，管理が煩雑になってしまう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/73ebc684b5807277b7e2&#34;&gt;そろそろ真面目に Golang 開発環境について考える — GOPATH 汚染問題 - Qiita&lt;/a&gt;，&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/baa3671c7e1b8a6594a9&#34;&gt;そろそろ真面目に Golang 開発環境について考える — Internal Packages と Vendoring - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; コマンドはとても強力な機能で，私のように Windows と UNIX 系環境の間を渡り歩いてる身としては， make などの tool chain に大きく依存することなく， &lt;code&gt;go get&lt;/code&gt; コマンドだけで repository の fetch からビルド・インストールまで出来てしまうのは非常にありがたい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;しかし， &lt;code&gt;go get&lt;/code&gt; コマンドは外部パッケージの revision 等をコントロールできず，常に repository の最新コードを取ってこようとする。
ひとつの環境でひとつのプロジェクトを管理していくのならこれでも何とかならないこともないが， &lt;code&gt;GOPATH&lt;/code&gt; 内に複数のプロジェクトが同居している場合は同じ外部パッケージでもプロジェクトごとに異なるリビジョンを要求する可能性があり，管理が煩雑になってしまう。&lt;/p&gt;

&lt;p&gt;しかも困ったことに &lt;code&gt;GOPATH&lt;/code&gt; 環境変数は複数のプロジェクト管理を想定していないため，全てのパッケージをひとつのフォルダに入れようとする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;対策1-プロジェクトごとに-gopath-を設定し直す:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策1】 プロジェクトごとに GOPATH を設定し直す&lt;/h2&gt;

&lt;p&gt;この問題に対する一番安直な答えは「プロジェクトごとに &lt;code&gt;GOPATH&lt;/code&gt; を設定し直す」である。例えば&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; をビルドする場合は以下のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;mkdir C:\workspace\gb

C:&amp;gt;SET GOPATH=C:\workspace\gb

C:&amp;gt;go get -v github.com/constabulary/gb/...
github.com/constabulary/gb (download)
github.com/constabulary/gb/log
github.com/constabulary/gb
github.com/constabulary/gb/vendor
github.com/constabulary/gb/cmd
github.com/constabulary/gb/cmd/gb
github.com/constabulary/gb/cmd/gb-vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは &lt;code&gt;GOPATH&lt;/code&gt; 直下の &lt;code&gt;bin&lt;/code&gt; フォルダにパスを通すか，パスの通ってるフォルダに実行ファイルをコピーすればよい。
実行履歴はバッチファイル（UNIX 系なら shell スクリプト）に保存しておけばいつでも復元できる。&lt;/p&gt;

&lt;p&gt;毎回環境をセットアップしないといけないのは面倒だが，プロジェクト管理のためのツールも必要なく， Go コンパイラの標準機能のみで管理できる。
標準機能のみで管理できるというのは結構重要で，たとえば CI ツールを使っている場合は，設定を単純にできるので管理しやすいといえる。&lt;/p&gt;

&lt;p&gt;UNIX 系の環境であれば &lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; を使う手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; は &lt;code&gt;cd&lt;/code&gt; をフックし，ディレクトリごとに環境変数を書き換えることができる。
この機能を使ってプロジェクト・フォルダごとに &lt;code&gt;GOPATH&lt;/code&gt; を設定できる。&lt;/p&gt;

&lt;h2 id=&#34;対策2-プロジェクト-ベースの管理ツールを使う:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策2】 プロジェクト・ベースの管理ツールを使う&lt;/h2&gt;

&lt;p&gt;もうひとつは &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; のようなプロジェクト・ベースでコード管理のできるツールを使う方法である。
&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; については&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;紹介したので，そちらを参照のこと。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; で作った開発環境はフォルダ構成を丸ごと開発メンバに配布・同期することが可能になるため，複数人で環境を合わせることが容易になる。&lt;/p&gt;

&lt;h2 id=&#34;対策3-go-1-5-の-vendoring-機能を使う:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策3】 Go 1.5 の Vendoring 機能を使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のバージョン 1.5 から Vendoring 機能が使えるようになった。&lt;/p&gt;

&lt;p&gt;Vendoring 機能を使うと，外部パッケージを &lt;code&gt;GOPATH&lt;/code&gt; とは独立に管理できるようになる。
この機能を使うには環境変数 &lt;code&gt;GO15VENDOREXPERIMENT&lt;/code&gt; に 1 をセットする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit&#34;&gt;Go 1.5 Vendor Experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vendoring 機能が有効な状態では &lt;code&gt;vendor&lt;/code&gt; フォルダが特別な意味を持つ。
たとえば &lt;code&gt;mypackage&lt;/code&gt; パッケージに対して &lt;code&gt;mypackage/vendor/vpackage&lt;/code&gt; と配置した場合， &lt;code&gt;import &amp;quot;vpackage&amp;quot;&lt;/code&gt; と記述すれば &lt;code&gt;mypackage/vendor&lt;/code&gt; フォルダ以下の &lt;code&gt;vpackage&lt;/code&gt; も探してくれる。&lt;/p&gt;

&lt;p&gt;では，&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;作ったコードを流用して確かめてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;SET GOPATH=C:\workspace\vdemo

C:\workspace\vdemo&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
            julian-day.go

C:\workspace\vdemo&amp;gt;go build ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)

C:\workspace\vdemo&amp;gt;mkdir src\julian-day\vendor

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor


C:\workspace\vdemo&amp;gt;go build ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\workspace\vdemo\src\julian-day\vendor\github.com\spiegel-im-spiegel\astrocalc\modjulian (vendor tree)
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダを追加したことで Go コンパイラの挙動が変わったことがお分かりだろうか。
目的のパッケージを vendor tree → &lt;code&gt;GOROOT&lt;/code&gt; → &lt;code&gt;GOPATH&lt;/code&gt; の順で捜索している。&lt;/p&gt;

&lt;p&gt;では &lt;code&gt;vendor&lt;/code&gt; フォルダに外部パッケージを導入してビルドしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;pushd src\julian-day\vendor

C:\workspace\vdemo\src\julian-day\vendor&amp;gt;git clone https://github.com/spiegel-im-spiegel/astrocalc.git github.com/spiegel-im-spiegel/astrocalc
Cloning into &#39;github.com/spiegel-im-spiegel/astrocalc&#39;...
remote: Counting objects: 43, done.
remote: Total 43 (delta 0), reused 0 (delta 0), pack-reused 43
Unpacking objects: 100% (43/43), done.
Checking connectivity... done.

C:\workspace\vdemo\src\julian-day\vendor&amp;gt;popd

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go

C:\workspace\vdemo&amp;gt;go install -v ./...
julian-day/vendor/github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
├─bin
│      julian-day.exe
│
├─pkg
│  └─windows_amd64
│      └─julian-day
│          └─vendor
│              └─github.com
│                  └─spiegel-im-spiegel
│                      └─astrocalc
│                              modjulian.a
│
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go

C:\workspace\vdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダ以下にパッケージがフルパスで入ってしまうため階層が深くなりがちなのが「玉に瑕」だが，それ以外は特に問題はない。
あるいは &lt;code&gt;vendor&lt;/code&gt; フォルダ以下のパッケージは &lt;code&gt;go get&lt;/code&gt; の制約から外れているので，呼び出し側を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;astrocalc/modjulian&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として以下のフォルダ構成にする手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─astrocalc
                │  .editorconfig
                │  .gitignore
                │  .travis.yml
                │  LICENSE
                │  README.md
                │
                └─modjulian
                        example_test.go
                        LICENSE
                        modjulian.go
                        modjulian_test.go


C:\workspace\vdemo&amp;gt;go install -v ./...
julian-day/vendor/astrocalc/modjulian
julian-day

C:\workspace\vdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意が必要なのは， &lt;code&gt;go get&lt;/code&gt; は git の submodule を上手く扱えないため， &lt;code&gt;vendor&lt;/code&gt; フォルダ以下のパッケージを submodule として配置している場合はビルドに失敗することだ。
この場合は &lt;code&gt;-d&lt;/code&gt; オプションで &lt;code&gt;go get&lt;/code&gt; がビルドまで行わないようにし，手動で submodule の &lt;code&gt;init&lt;/code&gt; と &lt;code&gt;update&lt;/code&gt; を行う必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go get -d project/...
C:&amp;gt;git submodule init
C:&amp;gt;git submodule update
C:&amp;gt;go install ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ブックマーク:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doloopwhile.hatenablog.com/entry/2014/06/18/010449&#34;&gt;direnvで解決するGOPATHの3つの問題点 - None is None is None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hde.co.jp/entry/2015/02/27/182117&#34;&gt;改めて、direnvを使いましょう！ - HDE BLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/aminamid/items/5a0e9461385c80d0c8a6&#34;&gt;さくら - homeにgolang, direnv とvirtualenvを入れて動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;それでも git などのコード管理ツールへの依存はどうしても残るのだけれど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;具体的には &lt;code&gt;GOPATH&lt;/code&gt; で列挙されるパスのリストのうち先頭のパスにインストールされる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の開発・管理主体は Google だが，こんな構成で Google は困らないのかと思ったのだが，実は Google は全てのコードを単一の repository で管理しているらしい。（参考： &lt;a href=&#34;http://www.publickey1.jp/blog/15/2045000google.html&#34;&gt;20億行のコードを保存し、毎日4万5000回のコミットを発行しているGoogleが、単一のリポジトリで全社のソースコードを管理している理由&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で組まれている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;パッケージのパスが変わるとテストが通らなくなる場合があるので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>プロジェクト・ベースの開発環境をつくる - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/project-based-development/" />
		<id>tag:text.Baldanders.info,2015-09-28T20:38:45+0900:/golang/project-based-development/</id>
		<published>2015-09-28T20:38:45+0900</published>
		
		<summary>今回は gb を使ってプロジェクト・ベースで Golang のコードを管理してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/ef15a48542e043b32c99&#34;&gt;はじめての Go 言語 (on Windows) その9 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;今回は &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; を使ってプロジェクト・ベースで Golang のコードを管理してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://getgb.io/&#34;&gt;gb - A project based build tool for Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gb-の導入:6e131725c8916e09bb821f8d42f65641&#34;&gt;gb の導入&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; の導入は &lt;code&gt;go get&lt;/code&gt; でできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go get -v github.com/constabulary/gb/...
github.com/constabulary/gb (download)
github.com/constabulary/gb/log
github.com/constabulary/gb
github.com/constabulary/gb/vendor
github.com/constabulary/gb/cmd
github.com/constabulary/gb/cmd/gb
github.com/constabulary/gb/cmd/gb-vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows の場合，環境変数 &lt;code&gt;GOPATH&lt;/code&gt; で指定するフォルダ配下の &lt;code&gt;bin&lt;/code&gt; フォルダに &lt;code&gt;gb.exe&lt;/code&gt; および &lt;code&gt;gb-vendor.exe&lt;/code&gt; が生成される。
このフォルダにパスを通しておく（またはパスの通っているフォルダに実行ファイルをコピーする）。&lt;/p&gt;

&lt;h2 id=&#34;プロジェクトの構築とビルド:6e131725c8916e09bb821f8d42f65641&#34;&gt;プロジェクトの構築とビルド&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34;&gt;機能のパッケージ化&lt;/a&gt;」で最後に作ったコードを使って実際に &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; でプロジェクトを作成しビルドを行ってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		} else {
			args[i] = num
		}
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, modjulian.DayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ソース-ファイルの配置:6e131725c8916e09bb821f8d42f65641&#34;&gt;ソース・ファイルの配置&lt;/h3&gt;

&lt;p&gt;プロジェクト・フォルダを &lt;code&gt;C:\workspace\gbdemo&lt;/code&gt; とし，ソース・ファイル用のフォルダ &lt;code&gt;src\julian-day&lt;/code&gt; を作成する。
このフォルダに上述のコードを記述したソース・ファイルを配置する。
フォルダ構成は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
└─src
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ビルドするには &lt;code&gt;gb build&lt;/code&gt; コマンドを実行すればいいのだが，このままでは &lt;code&gt;modjulian&lt;/code&gt; パッケージがないため失敗する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build
FATAL command &amp;quot;build&amp;quot; failed: failed to resolve import path &amp;quot;julian-day&amp;quot;: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\gbdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
        C:\workspace\gbdemo\vendor\src\github.com\spiegel-im-spiegel\astrocalc\modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクト・フォルダ以下を &lt;code&gt;GOPATH&lt;/code&gt; として &lt;code&gt;modjulian&lt;/code&gt; パッケージを探しているのがお分かりだろうか。
&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; では，実行時に既存の &lt;code&gt;GOPATH&lt;/code&gt; を上書きするようである。
またプロジェクト・フォルダ配下の &lt;code&gt;vendor&lt;/code&gt; フォルダを探しているのにも注目してほしい。&lt;/p&gt;

&lt;h3 id=&#34;外部パッケージの導入:6e131725c8916e09bb821f8d42f65641&#34;&gt;外部パッケージの導入&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; では外部パッケージを &lt;code&gt;gb vendor&lt;/code&gt; コマンドで管理できる。
外部パッケージの導入には &lt;code&gt;gb vendor fetch&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb vendor fetch github.com/spiegel-im-spiegel/astrocalc/modjulian

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
├─src
│  └─julian-day
│          julian-day.go
│
└─vendor
    │  manifest
    │
    └─src
        └─github.com
            └─spiegel-im-spiegel
                └─astrocalc
                    └─modjulian
                            example_test.go
                            LICENSE
                            modjulian.go
                            modjulian_test.go

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロジェクト・フォルダ以下に &lt;code&gt;vendor&lt;/code&gt; フォルダが作成され，パッケージのソースファイルが展開されている。&lt;/p&gt;

&lt;p&gt;今回 &lt;code&gt;gb vendor fetch&lt;/code&gt; で取得したパッケージは &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; のリポジトリから取ってきたものだが， &lt;code&gt;git clone&lt;/code&gt; ではなく，フォルダ・ファイル構成ごとコピーしてきたもののようである。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gb vendor fetch&lt;/code&gt; コマンドでは &lt;code&gt;-branch&lt;/code&gt; や &lt;code&gt;-tag&lt;/code&gt; や &lt;code&gt;-revision&lt;/code&gt; オプションでリポジトリのブランチやタグまたはリビジョンを指定できる。
このとき，導入したパッケージのリポジトリ情報は &lt;code&gt;vender\manifest&lt;/code&gt; ファイルに格納されている（中身は JSON 形式）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;version&amp;quot;: 0,
	&amp;quot;dependencies&amp;quot;: [
		{
			&amp;quot;importpath&amp;quot;: &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;,
			&amp;quot;repository&amp;quot;: &amp;quot;https://github.com/spiegel-im-spiegel/astrocalc&amp;quot;,
			&amp;quot;revision&amp;quot;: &amp;quot;c9f5fb495e67b868a2b3f0e16c38282095fe5033&amp;quot;,
			&amp;quot;branch&amp;quot;: &amp;quot;master&amp;quot;,
			&amp;quot;path&amp;quot;: &amp;quot;/modjulian&amp;quot;
		}
	]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに外部パッケージをアップデートする場合は &lt;code&gt;gb vendor update&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb vendor update github.com/spiegel-im-spiegel/astrocalc/modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb vendor update -all
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プロジェクトのビルド:6e131725c8916e09bb821f8d42f65641&#34;&gt;プロジェクトのビルド&lt;/h3&gt;

&lt;p&gt;では，この状態でもう一回ビルドしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build
julian-day

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
├─bin
│      julian-day.exe
│
├─pkg
│  └─windows-amd64
│      │  julian-day.a
│      │
│      └─github.com
│          └─spiegel-im-spiegel
│              └─astrocalc
│                      modjulian.a
│
├─src
│  └─julian-day
│          julian-day.go
│
└─vendor
    │  manifest
    │
    └─src
        └─github.com
            └─spiegel-im-spiegel
                └─astrocalc
                    └─modjulian
                            example_test.go
                            LICENSE
                            modjulian.go
                            modjulian_test.go

C:\workspace\gbdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度は上手くいったようだ。
&lt;code&gt;gb build&lt;/code&gt; コマンドのオプションは以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb help build
usage: gb build [build flags] [packages]

Build compiles the packages named by the import paths, along with their
dependencies.

Flags:

        -f
                ignore cached packages if present, new packages built will overwrite
                any cached packages. This effectively disables incremental
                compilation.
        -F
                do not cache packages, cached packages will still be used for
                incremental compilation. -f -F is advised to disable the package

                caching system.
        -q
                decreases verbosity, effectively raising the output level to ERROR.
                In a successful build, no output will be displayed.
        -P
                The number of build jobs to run in parallel, including test execution.
                By default this is the number of CPUs visible to gb.
        -R
                sets the base of the project root search path from the current working
                directory to the value supplied. Effectively gb changes working
                directory to this path before searching for the project root.
        -v
                increases verbosity, effectively lowering the output level from INFO
                to DEBUG.
        -dotfile
                if provided, gb will output a dot formatted file of the build steps to
                be performed.
        -ldflags &#39;flag list&#39;
                arguments to pass on each linker invocation.
        -gcflags &#39;arg list&#39;
                arguments to pass on each compile invocation.
        -tags &#39;tag list&#39;
                additional build tags.

The list flags accept a space-separated list of strings. To embed spaces in an
element in the list, surround it with either single or double quotes.

For more about specifying packages, see &#39;gb help packages&#39;. For more about
where packages and binaries are installed, run &#39;gb help project&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-ldflags&lt;/code&gt; や &lt;code&gt;-gcflags&lt;/code&gt; オプションが使えるのはありがたいかな。&lt;/p&gt;

&lt;h2 id=&#34;複数パッケージを含めたプロジェクト管理:6e131725c8916e09bb821f8d42f65641&#34;&gt;複数パッケージを含めたプロジェクト管理&lt;/h2&gt;

&lt;p&gt;複数のパッケージをまとめて管理したい場合もある。
例えば以下のような構成を考えてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
└─src
    └─julian-day
            julian-day.go

C:\workspace\gbdemo&amp;gt;pushd src

C:\workspace\gbdemo\src&amp;gt;git clone https://github.com/spiegel-im-spiegel/astrocalc.git github.com/spiegel-im-spiegel/astrocalc
Cloning into &#39;github.com/spiegel-im-spiegel/astrocalc&#39;...
remote: Counting objects: 43, done.
remote: Total 43 (delta 0), reused 0 (delta 0), pack-reused 43
Unpacking objects: 100% (43/43), done.
Checking connectivity... done.

C:\workspace\gbdemo\src&amp;gt;popd

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
└─src
    ├─github.com
    │  └─spiegel-im-spiegel
    │      └─astrocalc
    │          │  .editorconfig
    │          │  .gitignore
    │          │  .travis.yml
    │          │  LICENSE
    │          │  README.md
    │          │
    │          └─modjulian
    │                  example_test.go
    │                  LICENSE
    │                  modjulian.go
    │                  modjulian_test.go
    │
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態でビルドを実行してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build
github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\gbdemo&amp;gt;tree /f .
C:\WORKSPACE\GBDEMO
├─bin
│      julian-day.exe
│
├─pkg
│  └─windows-amd64
│      │  julian-day.a
│      │
│      └─github.com
│          └─spiegel-im-spiegel
│              └─astrocalc
│                      modjulian.a
│
└─src
    ├─github.com
    │  └─spiegel-im-spiegel
    │      └─astrocalc
    │          │  .editorconfig
    │          │  .gitignore
    │          │  .travis.yml
    │          │  LICENSE
    │          │  README.md
    │          │
    │          └─modjulian
    │                  example_test.go
    │                  LICENSE
    │                  modjulian.go
    │                  modjulian_test.go
    │
    └─julian-day
            julian-day.go

C:\workspace\gbdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; ではプロジェクト・フォルダ以下にあるパッケージを自動で検索してビルドしてくれる。
もちろんパッケージを指定してビルドすることも可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\gbdemo&amp;gt;gb build github.com/spiegel-im-spiegel/astrocalc/modjulian
github.com/spiegel-im-spiegel/astrocalc/modjulian

C:\workspace\gbdemo&amp;gt;gb build julian-day
julian-day
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらにテストもできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\gbdemo&amp;gt;gb test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- PASS: TestDayNumber (0.00s)
=== RUN   ExampleDayNumber
--- PASS: ExampleDayNumber (0.00s)                  
PASS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッケージによっては &lt;code&gt;go test&lt;/code&gt; の結果と &lt;code&gt;gb test&lt;/code&gt; の結果が異なる場合があるので注意が必要。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:6e131725c8916e09bb821f8d42f65641&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinofara/items/ac0591fef95c2c6e936e&#34;&gt;golang - gbを知ったのでgojiを使ったWEBアプリケーションプロジェクトを管理してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;&lt;code&gt;go get&lt;/code&gt; の使い方については「&lt;a href=&#34;http://text.baldanders.info/golang/go-get-package/&#34;&gt;go get コマンドでパッケージを管理する&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6e131725c8916e09bb821f8d42f65641:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;テストについては「&lt;a href=&#34;http://text.baldanders.info/golang/testing/&#34;&gt;Go 言語のテスト・フレームワーク&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6e131725c8916e09bb821f8d42f65641:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>PHP の思ひ出 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/php-memory/" />
		<id>tag:text.Baldanders.info,2015-09-23T20:06:29+0900:/remark/2015/php-memory/</id>
		<published>2015-09-23T20:06:29+0900</published>
		
		<summary>うひゃあ。 PHP って今そんなことになっているのか。今度仕事で PHP やる機会があっても最初から勉強しなおしだな，こりゃ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（この記事は「プリキュア・メモリ」を脳内 BGM にお送りしています）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tadsan/items/157969b338fd8b782b21&#34;&gt;モダンPHPアンチパターン - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うひゃあ。
&lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; って今そんなことになっているのか。
今度仕事で &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; やる機会があっても最初から勉強しなおしだな，こりゃ。&lt;/p&gt;

&lt;h2 id=&#34;asp-の劣化コピーだろ-これ:6c548a925ccf868852f8a61e292ab466&#34;&gt;ASP の劣化コピーだろ，これ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; は最初から気に食わない言語だった。
だって ASP （ASP.NET じゃなくて ASP）の劣化コピーにしか見えなかったんだもの。
MS ですら ASP.NET に移行していたあの当時に &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; が魅力的に見えるはずがなかった。&lt;/p&gt;

&lt;h2 id=&#34;php-で制御を行う:6c548a925ccf868852f8a61e292ab466&#34;&gt;PHP で制御を行う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000481.shtml&#34;&gt;最後に PHP の仕事をしたのは2010年&lt;/a&gt;かな。
ネットワークに繋がっている機器を &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; で（もちろん Web インタフェースで）制御するという仕事で，初めて &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; が面白いと思った仕事だった。
ちなみにこの時のフレームワークは &lt;a href=&#34;http://www.smarty.net/&#34;&gt;Smarty&lt;/a&gt; だった。&lt;/p&gt;

&lt;p&gt;今まで C/C++ でゴリゴリと制御を書いてきた身としてはまさに「目からうろこが落ちる」状態だった。
スクリプト言語で制御ができるなんて！&lt;/p&gt;

&lt;p&gt;当時の機器は制御ロジック自体は内部に埋め込まれていた。
だから programmable な部分は&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;機器に制御のトリガ・イベントを送る&lt;/li&gt;
&lt;li&gt;機器間の同期をとる&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ことであり，トリガ・イベントを送るだけでいいのならスクリプト言語でも構わないわけだ。&lt;/p&gt;

&lt;p&gt;IoT たらいうバズワードでもてはやされる最近の「スマート家電」の特徴は，制御だけでなくセンサも備えていることだが，センシング・データを「情報」として解釈して自律的に動けるほど「スマート」なものは少ない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6c548a925ccf868852f8a61e292ab466:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6c548a925ccf868852f8a61e292ab466:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
結局，データの解釈とその結果として何らかの制御トリガを蹴ったくるのは「外部のなにか」であり，その「外部のなにか」の真正性が問題になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6c548a925ccf868852f8a61e292ab466:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6c548a925ccf868852f8a61e292ab466:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;php-は死なず:6c548a925ccf868852f8a61e292ab466&#34;&gt;PHP は死なず？&lt;/h2&gt;

&lt;p&gt;これは印象論だが，ゼロからシステムを組むのであれば &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; を使う必然性は全くない。
Web サービス限定であっても「後ろから前まで JavaScript でいいじゃん」な感じである。
デスクトップアプリですら &lt;a href=&#34;http://electron.atom.io/&#34;&gt;Electron&lt;/a&gt; で組めるんだから。&lt;/p&gt;

&lt;p&gt;まぁでも，安いレンタルサーバを借りてる場合は選択肢は少ないし，既に &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; が稼働している環境なら &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; のほうが手軽なことも多々ある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6c548a925ccf868852f8a61e292ab466:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6c548a925ccf868852f8a61e292ab466:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;あるいは&lt;a href=&#34;http://qiita.com/naru0504/items/9bd56998a187d101a777&#34;&gt;日本以外にも PHP が人気な国もある&lt;/a&gt;そうなので，「ただ消え去る（fade away）のみ」とはならないかもしれない。
ただ，時々舞い込んでくる「汎用機の COBOL システムをオープン系のシステムに replace する」案件に関わってると，似たようなことが &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; 界隈でも起きないか心配なところではある。&lt;/p&gt;

&lt;h2 id=&#34;php-5-4-は捨てましょう:6c548a925ccf868852f8a61e292ab466&#34;&gt;PHP 5.4 は捨てましょう&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/tadsan/items/157969b338fd8b782b21&#34;&gt;モダンPHPアンチパターン&lt;/a&gt;」によると，既に &lt;a href=&#34;http://php.net/supported-versions.php&#34;&gt;PHP 5.4 はサポートが終了&lt;/a&gt;しているらしい。&lt;/p&gt;

&lt;p&gt;って，あれ？ &lt;a href=&#34;http://www.sakura.ne.jp/&#34;&gt;さくらのレンタルサーバ&lt;/a&gt;は PHP 5.4 が標準じゃなかったっけ？ と思って確認したら 5.4 だった。
とりあえず 5.6 に上げておく。
まぁ，ほとんど使わないんだけどね&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6c548a925ccf868852f8a61e292ab466:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6c548a925ccf868852f8a61e292ab466:d&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;これって，ひょっとして結構インパクトが大きい？&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6c548a925ccf868852f8a61e292ab466:a&#34;&gt;それができるなら，もう家電じゃなくてロボットだけどね。ほとんどロボットみたいな家電は既にあるが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6c548a925ccf868852f8a61e292ab466:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6c548a925ccf868852f8a61e292ab466:b&#34;&gt;そもそも機器自体（というかその背後にいる存在）の悪意の有無は，実際に被害に遭うまで分かりようがない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6c548a925ccf868852f8a61e292ab466:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6c548a925ccf868852f8a61e292ab466:c&#34;&gt;昔， &lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000236.shtml&#34;&gt;Perl で RSS を JSON に変換しようとしてどえら苦労した&lt;/a&gt;が， PHP なら数行の記述でほぼ同じことができる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6c548a925ccf868852f8a61e292ab466:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6c548a925ccf868852f8a61e292ab466:d&#34;&gt;そもそもさくらが自分とこのサーバをちゃんとメンテしてるかどうかもよく分からないのだが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6c548a925ccf868852f8a61e292ab466:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>今日の戯れ言 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/0917-diary/" />
		<id>tag:text.Baldanders.info,2015-09-18T03:11:44+0900:/remark/2015/0917-diary/</id>
		<published>2015-09-18T03:11:44+0900</published>
		<updated>2015-10-01T15:45:00+0900</updated>
		<summary>セキュリティ・暗号関連 / 機械支配待望論</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;日を跨いじゃったけど，溜まってたものを吐き出す。&lt;/p&gt;

&lt;h2 id=&#34;セキュリティ-暗号関連:7de7822f81e49845760a41cfe20e81ad&#34;&gt;セキュリティ・暗号関連&lt;/h2&gt;

&lt;p&gt;とりあえずメモ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50754420.html&#34;&gt;エフセキュアブログ : 最悪のプライバシー保護機能を持つ、WINDOWS 10にアップグレードする必要はなし&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lifehacker.jp/2015/08/150817win10_privacy.html&#34;&gt;デフォルトのままは危険？ 「Windows 10」のプライバシー設定はこう変えよう ｜ ライフハッカー［日本版］&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.livedoor.jp/k_urushima/archives/1768181.html&#34;&gt;自堕落な技術者の日記 : 「RFC 7525 TLSとDTLSの安全な利用に関する推奨事項」の公開 - livedoor Blog（ブログ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1509/16/news007.html&#34;&gt;Windows標準機能でいますぐできる標的型攻撃対策：続・設定を見直すだけ、いますぐ簡単にできる「標的型メール攻撃対策」 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;) - ＠IT&lt;/a&gt; : 「&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1409/05/news006.html&#34;&gt;すぐ実践可能！：設定を見直すだけ、いますぐ簡単にできる「標的型メール攻撃対策」 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;) - ＠IT&lt;/a&gt;」の続編らしい&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;64ビットブロック暗号misty1の安全性について:7de7822f81e49845760a41cfe20e81ad&#34;&gt;「64ビットブロック暗号MISTY1の安全性について」&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cryptrec.go.jp/topics/cryptrec_20150716_misty1_cryptanalysis.html&#34;&gt;64ビットブロック暗号MISTY1の安全性について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cryptrec.go.jp/topics/cryptrec_20150812_misty1_cryptanalysis.html&#34;&gt;64ビットブロック暗号MISTY1の安全性について（続報）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;随分前の話で恐縮だが，国産のブロック暗号 MISTY1 がちょっとだけ攻略された，という話題。
といっても，鍵空間が $2^{64}$ に対して解読に必要なデータ量が $2^{63.58}$ ということで，ほとんど全件探索と変わらないのであるが。
続報にある改良版にしても計算量は $2^{69.5}$ で大幅に少なくなっているものの，解読に必要なデータ量は $2^{64}$ であり，これも現実的な脅威ではないようである。&lt;/p&gt;

&lt;p&gt;MISTY1 は &lt;a href=&#34;http://cryptrec.go.jp/list.html&#34;&gt;CRYPTREC 暗号リスト&lt;/a&gt;において「推奨候補暗号リスト」のひとつとして挙げられている。
なおブロック暗号については，可能であれば $128\,\mathrm{bits}$ のブロック長のもの（AES や Camellia など）を選択ことが推奨されている。&lt;/p&gt;

&lt;p&gt;そうそう。
CRYPTREC といえば &lt;a href=&#34;http://cryptrec.go.jp/topics/cryptrec_20150716_c14report.html&#34;&gt;CRYPTREC Report 2014&lt;/a&gt; が出てるのだった。
あとでチェックしないと。&lt;/p&gt;

&lt;h3 id=&#34;rc4-overkill:7de7822f81e49845760a41cfe20e81ad&#34;&gt;RC4 Overkill&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rc4nomore.com/&#34;&gt;RC4 NOMORE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1507/17/news058.html&#34;&gt;短時間でcookie解読、RC4暗号通信を破る新手法 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/d8MtmKrXlKQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=d8MtmKrXlKQ&#34;&gt;The RC4 NOMORE Attack: Demonstration in Practice - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;これも随分前の話でゴメン。
既に&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000810.shtml&#34;&gt;死に体の RC4&lt;/a&gt; に追い打ち。&lt;/p&gt;

&lt;h3 id=&#34;ietf-94-で-openpgp-wg-がなんかやるらしい:7de7822f81e49845760a41cfe20e81ad&#34;&gt;IETF-94 で OpenPGP WG がなんかやるらしい？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mailarchive.ietf.org/arch/search/?email_list=openpgp&#34;&gt;[openpgp] Should we try to meet in Yokohama?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ietf.org/meeting/94/index.html&#34;&gt;11月に横浜で行われる IETF-94&lt;/a&gt; で OpenPGP WG もなにかやるらしい？&lt;/p&gt;

&lt;h2 id=&#34;機械支配待望論:7de7822f81e49845760a41cfe20e81ad&#34;&gt;機械支配待望論&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cruel.hatenablog.com/entry/2015/08/28/161912&#34;&gt;We&amp;rsquo;ll Make Great Pets: 機械支配待望論 - 山形浩生の「経済のトリセツ」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中で&lt;/p&gt;

&lt;figure lang=&#34;ja&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;さらに人間と機械は、出自がちがうので、同じリソースをめぐって争う必要がない。
これが動物だと、居住空間とか食べ物とか毛皮や肉とか、競合する資源がある。
だけど機械とは競合しない……完全にしないとは言わないけれど、他の動物と比べれば大幅にちがう。
人間はお金や女や権力を巡って争ってきたけど、機械はお金とか関係ないし、セックスもしないし（人間のほうはしたがる人もいるけど）、権力も関係ない。
だから機械やAIが賢くなっても、別に人間なんか滅ぼす必要なんかまったくない。
人間にそういうものをエサとして差し出せば（あるいは実物なくても画面にその絵を描いてやるだけで）人間はホイホイ動くし掃除もするしメンテもするし。機械にとってこんな便利なものはないよ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://cruel.hatenablog.com/entry/2015/08/28/161912&#34;&gt;機械支配待望論&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;というのは全く以ってそのとおりだと思う。&lt;/p&gt;

&lt;p&gt;「機械が仕事を奪う」というのは&lt;a href=&#34;http://text.baldanders.info/remark/2015/information-oriented-society/&#34;&gt;前回書いた話&lt;/a&gt;と相似形で，自分たちがやってることをモノに転嫁しているに過ぎない。
奪ってるのはモノではなくヒトである。&lt;/p&gt;

&lt;p&gt;もし本当に「ターミネーター脳」の人達が言うように機械が人類を滅ぼすのなら，（今のところただの「自然現象」の延長にすぎない）地球上の知性にとって，間違いなく「進化」である。
そもそも機械なら地球に縛られる必要もなかろう。
どちらかと言うと機械に見捨てられる方を心配したほうがいいんじゃないのか？&lt;/p&gt;
</content>
	</entry>
	
</feed>
