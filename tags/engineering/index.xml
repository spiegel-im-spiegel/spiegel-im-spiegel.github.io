<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Engineering - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/engineering/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/engineering/index.xml" />
	<id>tag:text.Baldanders.info,2016-02-18:/</id>
	<updated>2016-02-18T12:55:42+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>TensorFlow に関するブックマーク - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/tensorflow/" />
		<id>tag:text.Baldanders.info,2016-02-18:/remark/2016/02/tensorflow/</id>
		<published>2016-02-18T12:55:42+09:00</published>
		<updated>2016-03-14T01:12:59+09:00</updated>
		<summary>TensorFlow は Google がオープンソースとして提供する多次元配列（tensor）演算（flow）ライブラリ。いわゆる「機械学習」で威力を発揮する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;（この記事は「&lt;a href=&#34;http://text.baldanders.info/remark/2015/programming-language/&#34;&gt;プログラミング言語との付き合い方&lt;/a&gt;」のおまけの項からの転載です）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tensorflow.org/&#34; title=&#34;TensorFlow is an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; は Google がオープンソースとして提供する多次元配列（tensor）&lt;a href=&#34;https://en.wikipedia.org/wiki/Flow_%28mathematics%29&#34;&gt;演算（flow）&lt;/a&gt;ライブラリ。
いわゆる「機械学習（machine learning）」で威力を発揮し， &lt;a href=&#34;http://tensorflow.org/&#34; title=&#34;TensorFlow is an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; の元となっている Google 内製のインフラ &lt;a href=&#34;http://research.google.com/pubs/pub40565.html&#34;&gt;DistBelief&lt;/a&gt; では既に実績がある。&lt;/p&gt;

&lt;p&gt;バックエンドは C++ で構築しているそうだが，フロントエンドでは Python が使える（将来的には他の言語にも対応するそうだ）。
携帯端末から GPU バリバリのワークステーションまでスケーラブルに対応し，簡易な記述で実装できるのが特徴。
可視化ツールもある。&lt;/p&gt;

&lt;p&gt;たしかに「&lt;a href=&#34;https://plus.google.com/+HidekiSaito/posts/EJZgMkANqou&#34;&gt;何か作れそうな気がする&lt;/a&gt;」感じではある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tensorflow.org/&#34;&gt;TensorFlow is an Open Source Software Library for Machine Intelligence&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt;tensorflow/tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/10/news055.html&#34;&gt;Google、機械学習システム「TensorFlow」をオープンソースで公開 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nextdeveloper.hatenablog.com/entry/2015/11/10/204609&#34;&gt;Googleの公開した人工知能ライブラリTensorFlowを触ってみた - 株式会社ネクスト　エンジニアBlog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/icoxfog417/items/fb5c24e35a849f8e2c5d&#34;&gt;TensorFlowを算数で理解する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/haminiku/items/36982ae65a770565458d&#34;&gt;TensorFlow 畳み込みニューラルネットワークで手書き認識率99.2%の分類器を構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kazuhirokomoda/items/a4cd0f6f42eb75c757e4&#34;&gt;自然言語処理をはじめたい人のためのゆるい記事 - Qiita&lt;/a&gt; : &lt;a href=&#34;http://tensorflow.org/&#34; title=&#34;TensorFlow is an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; についても少しだけ言及&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/n_kats_/items/73538c7c66559d09f35d&#34;&gt;わざわざTensorFlowの機械学習で$\sqrt{2}$を計算する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/TomokIshii/items/f355d8e87d23ee8e0c7a&#34;&gt;Python - 初めてのTensorFlow - イントロダクションとしての線形回帰 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/KojiOhki/items/00ae0297f6809bdbc484&#34;&gt;TensorFlowチュートリアル - マンデルブロ集合（翻訳） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/02/17/20160216google-makes-it-easier-to-take-machine-learning-models-into-production/&#34;&gt;TensorFlowライブラリによる機械学習モデルの、本番アプリケーションへの実装を助けるAPI集TensorFlow ServingをGoogleがリリース | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/oZikw5k_2FM&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oZikw5k_2FM&#34;&gt;TensorFlow: Open source machine learning - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
</content>
	</entry>
	
	<entry>
		<title>Blockchain と Smart Contract - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/blockchain-and-smart-contract/" />
		<id>tag:text.Baldanders.info,2016-01-07:/remark/2016/01/blockchain-and-smart-contract/</id>
		<published>2016-01-07T20:50:45+09:00</published>
		<updated>2016-01-18T12:18:27+09:00</updated>
		<summary>Bitcoin は「誰が」取り引きしているかについて気にしないが，もっと広く smart contract を考えるのなら何らかの形で「誰が」を保証しなければならないし，そのための基盤（infrastructure）が必要となる，と思うのだがどうだろう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;年末忙しくて書き損ねてるネタを回収中。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20151223/blockchain&#34;&gt;「YAMDAS現更新履歴」の記事&lt;/a&gt;より。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115869/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp1&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中1話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115873/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp3&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中3話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昨年この記事を斜め読みした時は気づかなかったが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sakura.ad.jp/press/2015/1216_mijin_cloud_chain/&#34;&gt;さくらインターネットとテックビューロ、ブロックチェーンの実証実験環境「mijinクラウドチェーンβ」を金融機関やITエンジニア向けに無料提供～本日より申込受付を開始し、2016年1月から順次提供～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sakura.ad.jp/press/2016/0107_demonstration_platform/&#34;&gt;「さくらのクラウド」、「ASTERIA WARP」、「mijin」の3社製品･サービスによるプライベート･ブロックチェーン＆IoT実証実験プラットフォームの無償提供開始について＜無償提供期間：2016年1月18日～6月30日＞&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あぁ，これって広告記事だったのか。
感度低いなぁ，私（笑）&lt;/p&gt;

&lt;p&gt;上の記事からいくつか気になる部分を抜き出しておく。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;しかし、ブロックチェーン技術の登場により、既存の様々なセキュリティや整合性といった基準を妥協することなく、トランザクションあたりのコストが限りなくゼロに近づいていきます。そこで新しい常識として、「リアルタイムセトルメント」の概念が現実となります。そして締めの集計概念も、そもそもトランザクションに残高（バランス）の概念を持つブロックチェーンの基本機能でまかなえます。&lt;br&gt;
ビジネス慣習が締め処理からリアルタイム決済へパラダイムシフトすることにより、カウンターパーティーリスクも最小限となるだけではなく、既存の様々な頭痛の種が払拭されるでしょう。バッチ処理がされていたものに関してもリアルタイム処理へと移行し、真のリアルタイム24時間サービスの提供など、一般消費者もそこから大きな恩恵を得るに違いありません。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目）&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;現在主流のブロックチェーン技術は、処理の負荷を分散することが主目的ではないという点が分散型DBとは大きく違います。あくまでも主目的は物理的分散によるダウンタイムの払拭です。我々はデータ自体の分散や処理の分散の研究も進めておりますが、現在では全てのノードが同じデータを保有し、同じ仕事をすることができます。従って一般的なブロックチェーンの世界では、台数の増加がパフォーマンスの向上に直結しません。よって、「最低何台必要ですか？」の問いに対する答えは、「1台」となります。&lt;br&gt;
現在のブロックチェーン技術が、最新の分散型DBにデータベースとしてのスループット性能では勝つことはできません。ブロックチェーンが持つ大きな利点は、現在の金融システム等で必要とされる処理量であれば、データの整合性を保ったまま、物理的分散によりゼロダウンタイムを実現し、かつそこに同時に劇的なコスト削減をもたらすということに集約されます。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目）&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Blockchain の特徴は完全性と可用性にある，ということのようだ。
「&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;東雲銀子さん&lt;/a&gt;」みたいな人は要らなくなるかもしれない。&lt;/p&gt;

&lt;p&gt;ちなみに昨年までの私の Bitcoin や Blockchain に関する理解は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000827.shtml&#34;&gt;そろそろ Blockchain について勉強を始めるか — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このときのまとめをもう一度整理して再掲載しておくと&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Blockchain は「鎖」で繋がれた追記型データベース。「鎖」の途中のデータは取り消しも変更（改竄）もできない&lt;/li&gt;
&lt;li&gt;Blockchain の追記プロセスには不正の余地がないよう何らかの仕掛けが必要。 Bitcoin の場合は「作業証明（proof-of-work）」がそれにあたる&lt;/li&gt;
&lt;li&gt;Blockchain は P2P による分散型かつ fault tolerant（過失を許容する）なシステムだが最終的には fork も merge も許容しない&lt;/li&gt;
&lt;li&gt;Bitcoin のアドレス（実体は公開鍵）の帰属先について Bitcoin/Blockchain は関知しない。Bitcoin が気にするのは Blockchain に記載されるアドレスの一貫性と無矛盾性である。アドレスの証明が必要な場合は外部の PKI を利用するか新たに組み込む必要がある&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;私の関心領域は「信用モデル（trust model）」にあるため，このようなまとめになっている。
Bitcoin は「誰が」取り引きしているかについて気にしない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; が，もっと広く smart contract を考えるのなら何らかの形で「誰が」を保証しなければならないし，そのための基盤（infrastructure）が必要となる，と思うのだがどうだろう。&lt;/p&gt;

&lt;p&gt;私は Bitcoin そのものへの関心が薄いのだが，これは地方から見て Bitcoin がアベノミクスのごとき「彼岸」の話であることと，いわゆる FinTech（Financial Technology） なるバズワードは「畑違い」だから。
でも Blockchain 自身は FinTech 分野におさまらない可能性を持っていると思う。
ので，今後も情報を追いかけていくつもりである。&lt;/p&gt;

&lt;h2 id=&#34;参考ページ:0c973b9c2f93e7746db5aec1dc8b68cd&#34;&gt;参考ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/03/31/bitcoin-essay/&#34;&gt;誰も教えてくれないけれど、これを読めば分かるビットコインの仕組みと可能性 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boj.or.jp/research/wps_rev/rev_2015/rev15j13.htm/&#34;&gt;（日銀レビュー）「デジタル通貨」の特徴と国際的な議論 ：日本銀行 Bank of Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hshimo/items/093f40b856ba2436fbba&#34;&gt;スマートコントラクトとは何か? Smart Contractsの言葉の定義 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cryptocoin.hatenablog.com/entry/2015/07/22/001500&#34;&gt;Smart Contract - 暗号通貨のお勉強　～Bitcoin、Rippleを中心に～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tatarou1986/items/9d994896795a4871dc37&#34;&gt;BitCoinとBlockChainにまつわる誤解ーそんなことはできない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:0c973b9c2f93e7746db5aec1dc8b68cd&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W1BX3N2/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51aobp3mndL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W1BX3N2/baldandersinf-22/&#34;&gt;アンダーグラウンド・マーケット (朝日新聞出版)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;藤井太洋 &lt;/dd&gt;&lt;dd&gt;朝日新聞出版 2015-03-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00V7Y7DUS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00V7Y7DUS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ビッグデータ・コネクト (文春文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I3W45AS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I3W45AS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;オービタル・クラウド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CHIFA1M/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CHIFA1M.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Gene Mapper -full build-&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B019FV4BGI/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B019FV4BGI.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天冥の標Ⅸ　PART1　ヒトであるヒトとないヒトと (ハヤカワ文庫JA)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B019FV4BGS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B019FV4BGS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;中継ステーション〔新訳版〕 (ハヤカワ文庫SF)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;デジタル通貨ならこれかな。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-07&#34;&gt;2016-01-07&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51d7PAEntoL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;銀子の窓口（１） (バンブーコミックス 4コマセレクション)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;唐草ミチル &lt;/dd&gt;&lt;dd&gt;竹書房 2014-10-27&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0185M2QAQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0185M2QAQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;秘書の仕事じゃありません　２巻 (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0197POLV2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0197POLV2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;軍神ちゃんとよばないで　２巻 (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B018K0HAIQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B018K0HAIQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;私設花野女子怪館（２） (バンブーコミックス MOMOセレクション)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B013FVA8KW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B013FVA8KW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;腹黒舞子さんとの京生活（２） (バンブーコミックス 4コマセレクション)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B017XKJD84/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B017XKJD84.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;うしろのご先祖さま（２） (バンブーコミックス 4コマセレクション)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;金融界のクール・ビューティ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-07&#34;&gt;2016-01-07&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;これは匿名とは異なる。 Bitcoin の元帳である Blockchain は同期されたコピーを誰でも閲覧でき，同じ Bitcoin アドレスを使い続けるならそのアドレスに対する取引履歴を抽出することもできる。アドレスや取引履歴をもとに対象を絞り込むのは面倒だが不可能ではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Glide で Vendoring - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/vendoring-with-glide/" />
		<id>tag:text.Baldanders.info,2015-12-07:/golang/vendoring-with-glide/</id>
		<published>2015-12-07T23:30:21+09:00</published>
		<updated>2015-12-23T12:59:00+09:00</updated>
		<summary>Go 言語 1.5 の vendoring 機能をサポートするツールが glide である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;以前「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt; 1.5 の vendoring 機能を紹介したが，この vendoring のヘルパ・ツールと言えるのが &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; である。
&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では依存する外部パッケージの情報を YAML 形式の定義ファイルに記述し，この定義ファイルを基に外部パッケージの管理を行う。&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; 0.8 から挙動が少し変わった。
この記事では 0.8.2 を使っている）&lt;/p&gt;

&lt;h2 id=&#34;glide-のインストール:721380b38042a10816ac6a323733a866&#34;&gt;Glide のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は自身も &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; で外部パッケージを管理している。
なので最初は &lt;code&gt;go get&lt;/code&gt; ではなく &lt;a href=&#34;https://github.com/Masterminds/glide/releases&#34;&gt;Releases&lt;/a&gt; ページからビルド済みのものを取得することをお勧めする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;既に &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; が利用可能な状態なら，以下の要領でビルドできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\glide&amp;gt;SET GOPATH=C:\workspace\glide

C:\workspace\glide&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\glide&amp;gt;git clone git@github.com:Masterminds/glide.git src\github.com\Masterminds\glide
Cloning into &#39;src\github.com\Masterminds\glide&#39;...
remote: Counting objects: 2292, done.
remote: Compressing objects: 100% (65/65), done.
remote: Total 2292 (delta 34), reused 0 (delta 0), pack-reused 2292
Receiving objects: 100% (2292/2292), 468.01 KiB | 397.00
Receiving objects: 100% (2292/2292), 537.97 KiB | 397.00 KiB/s, done.
Resolving deltas: 100% (1578/1578), done.
Checking connectivity... done.

C:\workspace\glide&amp;gt;pushd src\github.com\Masterminds\glide

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;glide install
[INFO] Fetching updates for github.com/codegangsta/cli.
[INFO] Fetching updates for github.com/Masterminds/cookoo.
[INFO] Fetching updates for github.com/Masterminds/vcs.
[INFO] Fetching updates for gopkg.in/yaml.v2.
[INFO] Fetching updates for github.com/Masterminds/semver.
[INFO] Setting version for github.com/Masterminds/cookoo to 78aa11ce75e257c51be7ea945edb84cf19c4a6de.
[INFO] Setting version for github.com/Masterminds/semver to 6333b7bd29aad1d79898ff568fd90a8aa533ae82.
[INFO] Setting version for github.com/codegangsta/cli to b5232bb2934f606f9f27a1305f1eea224e8e8b88.
[INFO] Setting version for github.com/Masterminds/vcs to eaee272c8fa4514e1572e182faecff5be20e792a.
[INFO] Setting version for gopkg.in/yaml.v2 to f7716cbe52baa25d2e9b0d0da546fcf909fc16b4.

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;popd

C:\workspace\glide&amp;gt;go install -v ./...
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io
github.com/Masterminds/glide/msg
github.com/Masterminds/glide/gb
github.com/Masterminds/glide/vendor/gopkg.in/yaml.v2
github.com/Masterminds/glide/vendor/github.com/Masterminds/semver
github.com/Masterminds/glide/vendor/github.com/codegangsta/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/safely
github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/sql
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/active
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/convert
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/fmt
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/example
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/log
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web/auth
github.com/Masterminds/glide/util
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/doc
github.com/Masterminds/glide/cfg
github.com/Masterminds/glide/dependency
github.com/Masterminds/glide/cmd
github.com/Masterminds/glide

C:\workspace\glide&amp;gt;bin\glide.exe -v
glide version dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単な使い方は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt; glide -h
NAME:
   glide - The lightweight vendor package manager for your Go projects.

Each project should have a &#39;glide.yaml&#39; file in the project directory. Files
look something like this:

        package: github.com/Masterminds/glide
        imports:
                - package: github.com/Masterminds/cookoo
                  vcs: git
                  ref: 1.1.0
                  subpackages: **
                - package: github.com/kylelemons/go-gypsy
                  subpackages: yaml
                        flatten: true

NOTE: As of Glide 0.5, the commands &#39;in&#39;, &#39;into&#39;, &#39;gopath&#39;, &#39;status&#39;, and &#39;env&#39;
no longer exist.


USAGE:
   glide [global options] command [command options] [arguments...]

VERSION:
   0.8.2

COMMANDS:
   create, init Initialize a new project, creating a glide.yaml file
   get          Install one or more packages into `vendor/` and add dependency to glide.yaml.
   import       Import files from other dependency management systems.
   name         Print the name of this project.
   novendor, nv List all non-vendor paths in a directory.
   rebuild      Rebuild (&#39;go build&#39;) the dependencies
   install, i   Install a project&#39;s dependencies
   update, up   Update a project&#39;s dependencies
   tree         Tree prints the dependencies of this project as a tree.
   list         List prints all dependencies that Glide could discover.
   about        Learn about Glide
   help, h      Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --yaml, -y &amp;quot;glide.yaml&amp;quot;              Set a YAML configuration file.
   --quiet, -q                          Quiet (no info or debug messages)
   --debug                              Print Debug messages (verbose)
   --home &amp;quot;C:\Users\username\.glide&amp;quot;    The location of Glide files [$GLIDE_HOME]
   --no-color                           Turn off colored output for log messages
   --help, -h                           show help
   --version, -v                        print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;開発環境の準備:721380b38042a10816ac6a323733a866&#34;&gt;開発環境の準備&lt;/h2&gt;

&lt;p&gt;動作検証用に「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で使ったコードを利用する。
まず，以下の環境を作る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\workspace\vdemo2&amp;gt;SET GOPATH=C:\workspace\vdemo2

C:\workspace\vdemo2&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\vdemo2&amp;gt;tree /f .
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;julian-day.go&lt;/code&gt; の内容は以下のとおりである。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

    &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		}
		args[i] = num
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, modjulian.DayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然ながら，このままビルドしても外部パッケージがないため失敗する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;go install ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo2\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;依存関係を定義する:721380b38042a10816ac6a323733a866&#34;&gt;依存関係を定義する&lt;/h2&gt;

&lt;p&gt;開発環境ができたら，パッケージのフォルダ（今回は &lt;code&gt;src/julian-day&lt;/code&gt;）に移動し， &lt;code&gt;glide create&lt;/code&gt; コマンドで依存関係を定義する &lt;code&gt;glide.yaml&lt;/code&gt; ファイルを生成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;pushd src\julian-day

C:\workspace\vdemo2\src\julian-day&amp;gt;glide create
[INFO] Generating a YAML configuration file and guessing the dependencies
[INFO] Attempting to import from other package managers (use --skip-import to skip)
[INFO] Found reference to github.com\spiegel-im-spiegel\astrocalc\modjulian

C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            glide.yaml
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースコードを読んで &lt;code&gt;glide.yaml&lt;/code&gt; に必要な情報を推測して書いてくれているようだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:cre&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，デリミタが “/” じゃなくて “\” になってる。
Windows 環境だからかな。
残念 orz&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com\spiegel-im-spiegel\astrocalc\modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34; title=&#34;spiegel-im-spiegel/astrocalc&#34;&gt;astrocalc&lt;/a&gt;/modjulian パッケージのパスを修正して、更にバージョン情報を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com/spiegel-im-spiegel/astrocalc/modjulian
  version: v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;go get&lt;/code&gt; コマンドと同じように， &lt;code&gt;package&lt;/code&gt; のパスから自動的に repository を判別してパッケージを取得できる。
&lt;code&gt;go get&lt;/code&gt; コマンドと異なるのは， &lt;code&gt;glide.yaml&lt;/code&gt; ファイルで指定した &lt;code&gt;version&lt;/code&gt; 情報から適切な revision を選択できる点である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:semv&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:semv&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;また，以下のように VCS (Version Control System) の種類&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:vcs&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; と URI を明示的に指定することもできる（&lt;code&gt;vcs&lt;/code&gt; と &lt;code&gt;repo&lt;/code&gt; は必ずセットで指定する）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com/spiegel-im-spiegel/astrocalc/modjulian
  vcs:     git
  repo:    git@github.com:spiegel-im-spiegel/astrocalc.git
  version: v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば，プライベートな bare repository からインポートする場合には，この方法が有効である。&lt;/p&gt;

&lt;h2 id=&#34;パッケージの取得とビルド:721380b38042a10816ac6a323733a866&#34;&gt;パッケージの取得とビルド&lt;/h2&gt;

&lt;p&gt;パッケージの取得には &lt;code&gt;glide update&lt;/code&gt; または &lt;code&gt;glide up&lt;/code&gt; コマンドを起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;glide up
[INFO] Fetching updates for github.com/spiegel-im-spiegel/astrocalc.
[INFO] Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Scanning github.com/spiegel-im-spiegel/astrocalc for dependencies.
[INFO] Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Project relies on 1 dependencies.
[INFO] Writing glide.lock file
C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
        │  glide.lock
        │  glide.yaml
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでビルドが可能になった。
ではビルドしようかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;popd

C:\workspace\vdemo2&amp;gt;go install -v  ./...
julian-day/vendor/github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\vdemo2&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;h2 id=&#34;vendor-フォルダの管理:721380b38042a10816ac6a323733a866&#34;&gt;Vendor フォルダの管理&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;glide.lock&lt;/code&gt; ファイルには外部パッケージの状態が記述されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hash: b1eecd43769aa1225f7b8922a35566008561c64f4ce11180f299888ed153ad69
updated: 2015-12-23T10:47:22.4140434+09:00
imports:
- name: github.com/spiegel-im-spiegel/astrocalc
  version: 256cd3bd4dc63441d3f4759d761593a147d51d88
  subpackages:
  - modjulian
devImports: []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;glide.lock&lt;/code&gt; があれば &lt;code&gt;glide install&lt;/code&gt;（または &lt;code&gt;glide i&lt;/code&gt;）コマンドで &lt;code&gt;vendor&lt;/code&gt; フォルダ以下の状態を復元できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では外部パッケージを vendor フォルダ以下に repository 構造ごと展開する。
この場合，開発対象のパッケージも repository で管理しているのだから， repository が入れ子になり具合が悪い。
その辺，当の &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; はどうしてるのかなぁと思ったら &lt;code&gt;.gitignore&lt;/code&gt; ファイルで &lt;code&gt;vendor/&lt;/code&gt; を除外対象にしていた。
なるほど，そりゃそうか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;glide.yaml&lt;/code&gt; および &lt;code&gt;glide.lock&lt;/code&gt; ファイルの管理さえちゃんとしていれば &lt;code&gt;glide install&lt;/code&gt; コマンドでいつでも復元できるのだから &lt;code&gt;vendor&lt;/code&gt; フォルダ以下を除外しても問題ないわけだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:v&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
これは複数メンバで開発環境を共有する際には便利な機能である。&lt;/p&gt;

&lt;p&gt;また vendoring に対応していない（Go 1.4 以下の）環境や &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; がない環境では &lt;code&gt;go get&lt;/code&gt; で外部パッケージを取ってくることで（revision 等の問題はあるけど）一応ビルドは通る。&lt;/p&gt;

&lt;p&gt;更に言うと， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の標準機能に準拠しているため，他のサポートツールとの相性がいいのも利点だろう。
たとえば， &lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;ATOM ベースの開発環境&lt;/a&gt;は &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; と相性がいい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:gov&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:gov&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
あと，（多少強引な手を使っているが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:tci&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;） &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; のような CI (Continuous Integration) と組み合わせることも難しくない。&lt;/p&gt;

&lt;p&gt;こう考えると &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34;&gt;前に紹介&lt;/a&gt;した &lt;a href=&#34;http://getgb.io/&#34;&gt;gb&lt;/a&gt; よりも筋がいいツールといえるかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:721380b38042a10816ac6a323733a866&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/8e192e68d6b18bec3b4a&#34;&gt;glide - パッケージ管理のお困りの方へ - - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;Mac 環境なら brew でインストールできるらしい。 Linux 等の環境であれば &lt;code&gt;make&lt;/code&gt; コマンドで各種プラットフォームの実行ファイルをビルドできる。一応 &lt;code&gt;go get&lt;/code&gt; でもビルドできるが， revision を制御できないので失敗する可能性もある（これは &lt;code&gt;make&lt;/code&gt; コマンドでビルドする場合でも同じだけど）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;code&gt;glide create&lt;/code&gt; 時の依存パッケージの推測を抑止するには &lt;code&gt;--skip-import&lt;/code&gt; オプションを付ける。のだが，効いてないな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:semv&#34;&gt;今回であれば repository の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc/releases/tag/v0.1.0&#34;&gt;&lt;code&gt;v0.1.0&lt;/code&gt;&lt;/a&gt; タグに対応する revision を選択する。バージョンの記述形式は &lt;code&gt;package.json&lt;/code&gt; と同じように記述でき，バージョンの解釈は &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; に従っている。ちなみに revision ID を直接指定することもできる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:semv&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt; のほか svn (&lt;a href=&#34;http://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;), hg (&lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;), bzr (&lt;a href=&#34;http://bazaar.canonical.com/&#34;&gt;Bazaar&lt;/a&gt;) が利用可能である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダ以下は外部パッケージなので通常はさわることはない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:gov&#34;&gt;残念ながら，「&lt;a href=&#34;http://text.baldanders.info/golang/package-visualization-tool/&#34;&gt;パッケージの依存状況の視覚化&lt;/a&gt;」ツールは vendoring 機能に対応していないため上手く表示できない。なお， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;code&gt;glide list&lt;/code&gt; および &lt;code&gt;glide tree&lt;/code&gt; で依存パッケージを見ることができる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:gov&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; の &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/.travis.yml&#34;&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/Makefile&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt; を参照。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM で Go - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/golang-with-atom/" />
		<id>tag:text.Baldanders.info,2015-11-21:/golang/golang-with-atom/</id>
		<published>2015-11-21T14:19:02+09:00</published>
		<updated>2016-03-25T22:02:50+09:00</updated>
		<summary>ATOM Editor で Go 言語のコーディング環境を整える。 go-plus パッケージの導入について。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回もまた横道に逸れてツールの話。
&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のコーディング環境を整える。
環境を作る度に「どうだったっけ」とあちこちサイトを巡るので，覚え書きとしてまとめておく。&lt;/p&gt;

&lt;p&gt;例によって Windows 環境を前提にしているので，他の環境の方は適当に脳内補完してください。&lt;/p&gt;

&lt;p&gt;（2016年3月： &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; バージョン 4 以降で大きく構成が変わったので改訂した）&lt;/p&gt;

&lt;h2 id=&#34;開発支援ツールの導入:19f55614c00d490a9959ede6566335af&#34;&gt;開発支援ツールの導入&lt;/h2&gt;

&lt;p&gt;まずは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援ツールを導入する（更新時には &lt;code&gt;-u&lt;/code&gt; オプションを付ける）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go get -v github.com/alecthomas/gometalinter
$ go get -v golang.org/x/tools/cmd/gorename
$ go get -v github.com/nsf/gocode
$ go get -v github.com/rogpeppe/godef
$ go get -v golang.org/x/tools/cmd/oracle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34; title=&#34;alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output&#34;&gt;gometalinter&lt;/a&gt; は所謂 lint ツールなのだが，単独で動作するのではなく，巷にいくつかある lint ツール（標準の &lt;a href=&#34;https://golang.org/cmd/vet/&#34; title=&#34;vet - The Go Programming Language&#34;&gt;vet&lt;/a&gt; を含む）を統合的に管理することができる。
以下のコマンドで &lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34; title=&#34;alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output&#34;&gt;gometalinter&lt;/a&gt; が使用する lint ツールをまとめてインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gometalinter --install --update
Installing:
  structcheck
  interfacer
  goconst
  golint
  goimports
  dupl
  errcheck
  aligncheck
  gocyclo
  ineffassign
  unconvert
  gotype
  varcheck
  deadcode
  lll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/gorename&#34; title=&#34;gorename - GoDoc&#34;&gt;gorename&lt;/a&gt; は関数や変数の名前を変更したい時に使うツールで，文法を解釈してくれるため副作用が少ないのが特徴。
&lt;a href=&#34;https://github.com/nsf/gocode&#34; title=&#34;nsf/gocode&#34;&gt;gocode&lt;/a&gt; は入力補完ツール。
&lt;a href=&#34;https://github.com/rogpeppe/godef&#34; title=&#34;rogpeppe/godef&#34;&gt;godef&lt;/a&gt; は指定したシンボルの定義定義元情報を出力するツール（出力を使って定義元へジャンプできる。実際には &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/oracle&#34; title=&#34;oracle - GoDoc&#34;&gt;oracle&lt;/a&gt; と併用するらしい）。
いずれも vim や emacs などでは有名だが &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; でも使える。&lt;/p&gt;

&lt;p&gt;言わずもがなだが，これらのツールには PATH を通しておくこと。
&lt;code&gt;%GOPATH%\bin&lt;/code&gt; フォルダにパスを通しておけばいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;go-plus-パッケージの導入:19f55614c00d490a9959ede6566335af&#34;&gt;go-plus パッケージの導入&lt;/h2&gt;

&lt;p&gt;では，上述のツールを操作できる &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージを導入する。
やり方は Settings 画面（&lt;code&gt;ctrl+,&lt;/code&gt; で起動）で Install してもいいし &lt;code&gt;apm&lt;/code&gt; コマンドを使ってもよい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近の &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; は複数のサブ・パッケージで構成されているらしい。
&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; を導入すると以下のサブ・パッケージも自動的に導入される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/autocomplete-go&#34;&gt;autocomplete-go&lt;/a&gt; : &lt;a href=&#34;https://github.com/nsf/gocode&#34; title=&#34;nsf/gocode&#34;&gt;gocode&lt;/a&gt; を使って入力補完&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/builder-go&#34;&gt;builder-go&lt;/a&gt; : ソースコードのビルド&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-config&#34;&gt;go-config&lt;/a&gt; : &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用ツール等のチェック&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-get&#34;&gt;go-get&lt;/a&gt; : &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用ツールを取得する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/gofmt&#34;&gt;gofmt&lt;/a&gt; : &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; または &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/goimports&#34; title=&#34;goimports - GoDoc&#34;&gt;goimport&lt;/a&gt; を使用したフォーマッタ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:19f55614c00d490a9959ede6566335af:gf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:19f55614c00d490a9959ede6566335af:gf&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/gometalinter-linter&#34;&gt;gometalinter-linter&lt;/a&gt; : &lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34; title=&#34;alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output&#34;&gt;gometalinter&lt;/a&gt; を使った lint&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/gorename&#34;&gt;gorename&lt;/a&gt; : &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/gorename&#34; title=&#34;gorename - GoDoc&#34;&gt;gorename&lt;/a&gt; を使ってリネーム&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/navigator-godef&#34;&gt;navigator-godef&lt;/a&gt; : &lt;a href=&#34;https://github.com/rogpeppe/godef&#34; title=&#34;rogpeppe/godef&#34;&gt;godef&lt;/a&gt; を使って定義元へジャンプ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/tester-go&#34;&gt;tester-go&lt;/a&gt; : テストの実行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コマンドパレットから呼び出されるコマンドもかなり整理されているようだ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22710708563/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5794/22710708563_f49bdbb61c.jpg&#34; alt=&#34;menu for go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22710708563/&#34;&gt;menu for go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; ではサブ・パッケージごとに設定項目がいくつかあるが，ほとんど既定値のままで使える。
たとえば &lt;a href=&#34;https://atom.io/packages/gofmt&#34;&gt;gofmt&lt;/a&gt; サブ・パッケージの設定画面は以下のようになっている。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/735/22767398347_86d14e29f9.jpg&#34; alt=&#34;settings for gofmt@go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;settings for gofmt@go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;定義元へのジャンプと復帰は &lt;code&gt;alt-cmd-g&lt;/code&gt; および &lt;code&gt;alt-shift-cmd-G&lt;/code&gt; にバインドされているが Windows 環境では動かないので（コマンドパレットから起動してもいいのだが）適当なキーに再割当てするといいだろう。
ファンクションキーは結構空いてるので，たとえば&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Keystroke&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Selector&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar~=&amp;quot;go&amp;quot;]:not([mini])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef-return&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar~=&amp;quot;go&amp;quot;]:not([mini])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;とアサインするなら &lt;code&gt;%USERPROFILE%\.atom\keymap.cson&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;atom-text-editor[data-grammar~=&amp;quot;go&amp;quot;]:not([mini])&#39;:
  &#39;f12&#39;: &#39;golang:godef&#39;
  &#39;shift-f12&#39;: &#39;golang:godef-return&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と設定すればいい。&lt;/p&gt;

&lt;p&gt;lint や定義元のジャンプは &lt;code&gt;GOPATH&lt;/code&gt; や &lt;code&gt;GOROOT&lt;/code&gt; を見て外部パッケージを判断しているのだが， &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; のようなツールでは &lt;code&gt;GOPATH&lt;/code&gt; をコマンド内部で書き換えて実行するので lint ツールとは整合性が取れなくなる。
&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; の設定では &lt;code&gt;GOPATH&lt;/code&gt; を上書きすることも可能なので，とりあえずこれで回避する方法もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:19f55614c00d490a9959ede6566335af:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23233956325/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5821/23233956325_0d13c7379f.jpg&#34; alt=&#34;settings for go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23233956325/&#34;&gt;settings for go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;（&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; 4.0.1 および &lt;a href=&#34;https://atom.io/packages/gometalinter-linter&#34;&gt;gometalinter-linter&lt;/a&gt; 1.0.2 で上記の設定が効いてない模様。コマンドプロンプトななどで環境変数 &lt;code&gt;GOPATH&lt;/code&gt; を上書き設定してからプロジェクト・フォルダ上で &lt;code&gt;atom.com .&lt;/code&gt; と起動すれば上手くいくようだ）&lt;/p&gt;

&lt;h2 id=&#34;language-go-パッケージは同梱済み:19f55614c00d490a9959ede6566335af&#34;&gt;language-go パッケージは同梱済み&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-go&#34; title=&#34;language-go&#34;&gt;language-go&lt;/a&gt; は Core パッケージに入っているためインストール時点で既に入っている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:19f55614c00d490a9959ede6566335af:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://atom.io/packages/language-go&#34; title=&#34;language-go&#34;&gt;language-go&lt;/a&gt; の機能で目を引くのはやはり Snippets だろう。
以下はその一部（パッケージの Settings に一覧がある）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22712254763/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5675/22712254763_f8fb9f6735.jpg&#34; alt=&#34;Snippets for golang (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22712254763/&#34;&gt;Snippets for golang (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;こんなよぅけ覚えれるか！ まぁとりあえず，よく使うものだけ覚えておけばいいのだろうけど。&lt;/p&gt;

&lt;p&gt;使い方は，トリガーとなる文字列を入力して tab キーを押す。
たとえば &lt;code&gt;func&lt;/code&gt; と入力して tab キーを押すと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ()  {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と展開される。
&lt;code&gt;iferr&lt;/code&gt; なら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err != nil {
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:19f55614c00d490a9959ede6566335af&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/fcd25db64f341ad2471f&#34;&gt;struct にアノテーションつけてたら go vet . すべき - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/osamingo/items/d5ec42fb8587d857310a&#34;&gt;これからGo言語を書く人への三種の神器 - Qiita&lt;/a&gt; : &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;goimports&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt; で正しいコードを書きましょう。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20150113141338.htm&#34;&gt;Big Sky :: golang のリファクタリングには gofmt ではなく、gorename を使おう。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/238f6f0ee27bdf1de2a0&#34;&gt;gometalinter で楽々 lint - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:19f55614c00d490a9959ede6566335af:gf&#34;&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/goimports&#34; title=&#34;goimports - GoDoc&#34;&gt;goimport&lt;/a&gt; はコード整形ツールで，標準の &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; を置き換えることができ，かつ &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; よりも若干かしこい。 &lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34; title=&#34;alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output&#34;&gt;gometalinter&lt;/a&gt; からインストールされる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:19f55614c00d490a9959ede6566335af:gf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;code&gt;GOPATH&lt;/code&gt; を &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; の設定で上書きする場合は “Environment Overrides Config” を&lt;strong&gt;無効にする&lt;/strong&gt;こと。なんでかこれ，毎回ハマるんだよなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;code&gt;language&lt;/code&gt; でインストール済みパッケージを検索するとメジャーな言語は大抵入っているのが分かる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： The TPP must be rejected. - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1121-diary/" />
		<id>tag:text.Baldanders.info,2015-11-21:/remark/2015/1121-diary/</id>
		<published>2015-11-21T07:48:29+09:00</published>
		<updated>2015-11-25T21:06:23+09:00</updated>
		<summary>The TPP must be rejected. / 広島大学天文学研究会プラネタリウム &amp; 天体観望会 / NTPsec ベータ版が公開 / Visual Studio Code がベータ版に到達</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#tppip:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;The TPP must be rejected.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#huaa:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;広島大学天文学研究会プラネタリウム &amp;amp; 天体観望会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ntpsec:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;NTPsec ベータ版が公開&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vscode:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;Visual Studio Code がベータ版に到達&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;tppip:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;The TPP must be rejected.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; から TPP の分析とかなり強い調子の提言。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://creativecommons.org/weblog/entry/46455&#34;&gt;Trans-Pacific Partnership Would Harm User Rights and the Commons - Creative Commons&lt;/a&gt; : 要旨&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/campaigns/trans-pacific-partnership-would-harm-user-rights-and-the-commons&#34;&gt;Trans-Pacific Partnership Would Harm User Rights and the Commons - Creative Commons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要点は以下のとおり（英語のままでごめん）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;20-year copyright term extension is unnecessary and unwarranted&lt;/li&gt;
&lt;li&gt;The mention of the public domain is lip service, at best&lt;/li&gt;
&lt;li&gt;Enforcement provisions are mandatory, while exceptions and limitations are optional&lt;/li&gt;
&lt;li&gt;Potentially drastic infringement penalties, even for non-commercial sharing&lt;/li&gt;
&lt;li&gt;Criminal penalties for circumventing digital rights management on works&lt;/li&gt;
&lt;li&gt;Investor-state dispute settlement mechanism may be leveraged for intellectual property claims&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最初の著作権期限の延長および2番目については，&lt;a href=&#34;http://text.baldanders.info/remark/2015/1114-diary/#tppip:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;これまで述べた&lt;/a&gt;ように「公有財産の私有化」と言えるものだが，残りの4つはまさに「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%A2%E3%83%B3%E3%82%BA%E3%81%AE%E6%82%B2%E5%8A%87&#34;&gt;コモンズの悲劇&lt;/a&gt;」を地で行くような内容であり &lt;a href=&#34;http://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; が強い調子に出るのも当然と言える。&lt;/p&gt;

&lt;p&gt;「所有」の概念も「共有」の概念も希薄&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4ca62cdab1361b1e3422be67b19d3669:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4ca62cdab1361b1e3422be67b19d3669:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; な日本では，このような強い調子に出る人や団体はない。
しかし TPP 知財は1国の問題ではなく，かつ今後100年単位で世界に影響を及ぼしうるものだ。&lt;/p&gt;

&lt;p&gt;さて，どうなるやら。&lt;/p&gt;

&lt;h3 id=&#34;追記:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;追記&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/25/news078.html&#34;&gt;著作権侵害の非親告罪化には「慎重であるべき」　文芸家協会が声明 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20151125_732191.html&#34;&gt;日本ではパロディー認める判決は出ていない、コミケなど摘発の可能性――TPPによる著作権侵害の非親告罪化になおも懸念、日本文藝家協会が声明 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;huaa:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;広島大学天文学研究会プラネタリウム &amp;amp; 天体観望会&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiroshima-u.jp/moto/news/2015-11-13-1057&#34;&gt;広島大学天文学研究会プラネタリウム＆天体観望会を開催します | 広島大学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;わお。
広大のサイトで告知だよ。
偉くなったなぁ，天文研。
私の頃のようなヌルいサークル活動じゃなくなってるのかもな。&lt;/p&gt;

&lt;p&gt;11月20日（金）の回は終わったけど，12月8日（火）の回はこれからなので，興味のある方は是非。
西条おっと東広島キャンパスの夜空はいいですよ。&lt;/p&gt;

&lt;p&gt;私は平日は無理 orz&lt;/p&gt;

&lt;h2 id=&#34;ntpsec:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;NTPsec ベータ版が公開&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ntpsec.org/pressrelease-20151116.html&#34;&gt;NTP Security Project announces public development release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/ntpsec09.html&#34;&gt;Network Time Protocol（NTP）の脆弱性を改善する「NTPsec」、ベータ版が公開 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The goal of the project is to harden against security vulnerabilities and especially against “amplification attacks” that threaten the stability of the entire Internet. The project welcomes the participation of information security researchers, and practices Responsible Disclosure.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.ntpsec.org/pressrelease-20151116.html&#34;&gt;NTP Security Project announces public development release&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;NTP における「増幅攻撃（amplification attacks）」とは2014年に発生した NTP を使った DDoS を指していて&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;というのも、monlistで問い合わせを送ると、そのNTPサーバーが過去に通信したマシン、最大600台分のIPアドレスを返答する。わずか234バイトの問い合わせパケットに対し、帰ってくる応答パケットのサイズは数十倍、数百倍という大きさだ。オープンなNTPサーバーに送信元を偽装したmonlistリクエストを送り付けると、標的には膨大なトラフィックが押し寄せる。&lt;br&gt;
この構図は、2013年のDDoS攻撃に悪用された「DNSリフレクション攻撃」（DNS amp攻撃）と同様だ。ただ、DNSリフレクション攻撃における増幅率が8倍であるのに対し、NTPのmonlistを悪用した増幅攻撃では、19倍から206倍という数字がはじき出せると、CloudFlareは説明している。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1402/12/news140.html&#34;&gt;DNSよりも高い増幅率の「理想的なDDoSツール」：NTP増幅攻撃で“史上最大規模”を上回るDDoS攻撃発生 - ＠IT&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;というものだ。
これから徐々に &lt;a href=&#34;https://www.ntpsec.org/&#34; title=&#34;Welcome to NTPsec&#34;&gt;NTPsec&lt;/a&gt; に置き換わっていくのかな。&lt;/p&gt;

&lt;h2 id=&#34;vscode:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;Visual Studio Code がベータ版に到達&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/b/vscode/archive/2015/11/17/announcing-visual-studio-code-beta.aspx&#34;&gt;Announcing Visual Studio Code Beta - Visual Studio Code - Site Home - MSDN Blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/visual_studio_code_go_pascal.html&#34;&gt;［速報］無償のコードエディタ「Visual Studio Code」が、Go言語/Pascal/Reactなどに対応。ベータ版にも到達。Microsoft Connect(); 2015 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さらに&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/netwindowsmacos_xlinux.html&#34;&gt;［速報］オープンソース版.NETがリリース候補版に到達。Windows、MacOS X、Linuxで同一の.NETアプリが実行可能に。Microsoft Connect(); 2015 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20151119_731485.html&#34;&gt;Microsoft、開発者向けの無償プログラム“Visual Studio Dev Essentials”を発表 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大盤振る舞い！ まぁでも，残念ながらエディタは &lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM に乗り換えちゃった&lt;/a&gt;ので &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined.&#34;&gt;Visual Studio Code&lt;/a&gt; は当分出番なしかな。
仕事でも使う予定はないし。&lt;/p&gt;

&lt;p&gt;新しい .NET はかなり期待している。
希望としては &lt;a href=&#34;http://gitextensions.github.io/&#34;&gt;Git Extensions&lt;/a&gt; や &lt;a href=&#34;http://keepass.info/&#34;&gt;KeePass&lt;/a&gt; など今まで &lt;a href=&#34;http://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; で動いていたものが新しい .NET に置き換えれるなら私が嬉しい。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:4ca62cdab1361b1e3422be67b19d3669:a&#34;&gt;「所有」の概念が薄いからこそ「公有」や「共有」の概念も希薄だと言えるが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4ca62cdab1361b1e3422be67b19d3669:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： FBI 曰く「Ransomware 感染時は身代金払え」 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1114-diary/" />
		<id>tag:text.Baldanders.info,2015-11-14:/remark/2015/1114-diary/</id>
		<published>2015-11-14T17:49:15+09:00</published>
		<updated>2015-11-14T17:49:15+09:00</updated>
		<summary>FBI 曰く「Ransomware 感染時は身代金払え」 / 移動式プラネタリウム製作資金を集める Crowd-Funding / 家事を「要求開発」する / Facebook のない人生は幸せ？ / 日本における TPP 知財のこれから</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;最近，週末に小ネタをまとめて放出するパターンなので「週末スペシャル」と銘打ってみた。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ransomware:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;FBI 曰く「Ransomware 感染時は身代金払え」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#planetarium:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;移動式プラネタリウム製作資金を集める Crowd-Funding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#require:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;家事を「要求開発」する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#facebook:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;Facebook のない人生は幸せ？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tppip:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;日本における TPP 知財のこれから&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ransomware:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;FBI 曰く「Ransomware 感染時は身代金払え」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.wsj.com/articles/SB12239780145041894104204581346871573085148&#34;&gt;ハッカーへの身代金支払い、FBIが奨励？ 職員発言が物議 - WSJ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2015/11/12/199/&#34;&gt;FBIが「ランサムウェア感染時は身代金払え」と語るも、Kasperskyが全否定 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まぁ，なんちうか。
いわゆる「身代金」を払えば FBI の仕事だし，それを拒否して何とか暗号化を解除しようとするなら Kaspersky などセキュリティ企業の仕事になる。
要するに「みかじめ料」をどちらに払うのがいいのか，という話である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3520c6f27e68cb332b04696ebe5f9997:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3520c6f27e68cb332b04696ebe5f9997:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;（笑）&lt;/p&gt;

&lt;p&gt;強いて言うなら&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;身代金を支払うということは、犯罪者に日々の糧を与えるだけでなく、これから行う悪事の資金集めに協力することにもなる&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2015/11/12/199/&#34;&gt;FBIが「ランサムウェア感染時は身代金払え」と語るも、Kasperskyが全否定&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;というのはその通りで，企業としてはそういった部分も含めてどのセキュリティ企業と手を組むかってことになると思う。
あと，企業にせよ個人にせよ，セキュリティ対策の「最後の切り札（ace in the hole）」は「バックアップ」である。
ゆめゆめ忘れませぬよう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35073168/&#34;&gt;暗号化電子メールProtonMailにDDoS攻撃&amp;ndash;「身代金」6000ドルを支払うも収まらず - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;planetarium:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;移動式プラネタリウム製作資金を集める Crowd-Funding&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://a-port.asahi.com/projects/planetarium_hospital&#34;&gt;移動式プラネタリウムで、全国各地の入院中の子どもたちに“星空”を届けたい！ | A-port｜朝日新聞社のクラウドファンディングサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;iframe src=&#39;https://a-port.asahi.com/projects/planetarium_hospital/widget&#39; frameborder=&#34;0&#34; scrolling=&#34;no&#34; width=&#34;300&#34; height=&#34;420&#34;&gt;&lt;/iframe&gt;


&lt;/figure&gt;

&lt;p&gt;だそうで，協力したい方，グッズがほしい方は是非。&lt;/p&gt;

&lt;h2 id=&#34;require:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;家事を「要求開発」する&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://conobie.jp/article/4013&#34;&gt;「理系のための豚汁レシピ」を参考に「理系夫のための家事シェアツール」を作ってみた | Conobie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容については記事を見ていただくとして，「家事シェアツールを作ってよかったこと」として&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;夫が言われなくても家事ができるようになった&lt;/li&gt;
&lt;li&gt;どちらかが出来なくても、もう一方ができる&lt;/li&gt;
&lt;li&gt;ツールを作るときに、「我が家ルール」を話し合う機会ができる&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;を挙げていて「なるほど」と思った。
特に3番目。
これって「要求開発」なのだよ。
日本政府も見習って欲しいですね（笑）&lt;/p&gt;

&lt;h2 id=&#34;facebook:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;Facebook のない人生は幸せ？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.afpbb.com/articles/-/3066190&#34;&gt;幸せな人生望むならフェイスブックやめるべき、デンマーク調査　写真1枚　国際ニュース：AFPBB News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facebook の TL にもちょろんと書いたけど，これって Facebook などの SNS の問題じゃないよね。
強いて言うなら「人間関係嗜癖」の問題と言える。&lt;/p&gt;

&lt;p&gt;斎藤環さんの『思春期ポストモダン&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3520c6f27e68cb332b04696ebe5f9997:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3520c6f27e68cb332b04696ebe5f9997:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;』では「ひきこもり系」と「自分探し系」のふたつのモードを紹介している。
上の記事で&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この調査結果を受け、「私たちには、自分たちに実際何が必要なのかに注意を向けるのではなく、他人が何を持っているかに注意を向けるという不幸な傾向がある」と著者らは結論付けている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.afpbb.com/articles/-/3066190&#34;&gt;幸せな人生望むならフェイスブックやめるべき、デンマーク調査&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるが，実際には私たちみんなに「他人が何を持っているかに注意を向けるという不幸な傾向」があるのではなく，そういう傾向を持つ「自分探し系」な人たちが一定数いるということだと思う。
そういう人たちにとっては Facebook のような「人間関係」をデフォルメする SNS は劇薬だろうし，「回復」のためにそこから離れてみるというのはアリだと思う。&lt;/p&gt;

&lt;p&gt;SNS は相手との距離感をはかるのが難しい側面はあるし，私もそれで時々失敗するが，上手に使えば良い道具ではある。&lt;/p&gt;

&lt;h2 id=&#34;tppip:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;日本における TPP 知財のこれから&lt;/h2&gt;

&lt;p&gt;さぁ！ これからが本番だよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cas.go.jp/jp/tpp/tppinfo.html#201511kyoutei_zanteiban&#34;&gt;交渉会合関連情報： TPP協定暫定案文等の公表について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bunka.go.jp/seisaku/bunkashingikai/chosakuken/hoki/h27_06/&#34;&gt;文化審議会著作権分科会法制・基本問題小委員会（第6回）｜文化庁&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20151111_730105.html&#34;&gt;TPPで“違法ダウンロード”適用拡大も、文化庁の審議会で再び検討か -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;検討項目は以下のとおり。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;著作物等の保護期間の延長&lt;/li&gt;
&lt;li&gt;著作権等侵害罪の一部非親告罪化&lt;/li&gt;
&lt;li&gt;著作物等の利用を管理する効果的な技術的手段（アクセスコントロール）に関する制度整備&lt;/li&gt;
&lt;li&gt;配信音源の二次使用に対する使用料請求の付与&lt;/li&gt;
&lt;li&gt;法定の損害賠償又は追加的な損害賠償に係る制度整備&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;非親告罪化については対象の範囲をどう規定するかが問題（個人的にはないほうがいいけど）。
いわゆる「技術的保護手段」の迂回についてはなんでも NG にするのではなく「公正な利用」を考慮する必要がある。
問題は 1, 4, 5 かな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aozora.gr.jp/aozorablog/?p=3522&#34;&gt;aozorablog » TPPの影響ってどれくらい？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中で著作権の保護期間が70年に延長された場合にどの程度のインパクトがあるか試算されていて&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;すると、1945年1月1日から1964年12月31日の間に亡くなった方は311人で、その作品数は6,885。&lt;br&gt;
もし、2015年11月11日に著作権保護期間が50年から70年に移行したとすると、公開されている作品数が13,354なので、13,354－6,885＝6,469 。つまり、6,885は著作権が復活して読めなくなり、青空文庫で読めるのは半分以下の6,469、という計算になる。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.aozora.gr.jp/aozorablog/?p=3522&#34;&gt;TPPの影響ってどれくらい？&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;まぁ鵜呑みには出来ない数字だが，無視するにはインパクトが大きい感じ。
保護期間の延長というのは「公有財産の私有化」にほかならない。&lt;/p&gt;

&lt;p&gt;というわけで，この「しっぽのさきっちょ」でもキャンペーン・バナーを表示することにした。
改めて著作権保護期間の延長に反対します。&lt;/p&gt;

&lt;p&gt;TPP 知財の中身についての詳細情報は以下が参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://r.binb.jp/epm/e1_3251_02102014015414/&#34;&gt;誰のための著作権か&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822282686/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/512Y77Y5WDL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822282686/baldandersinf-22/&#34;&gt;要求開発~価値ある要求を導き出すプロセスとモデリング&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;山岸 耕二 安井 昌男 萩本 順三 河野 正幸 野田 伊佐夫 平鍋 健児 細川 努 依田 智夫 ［要求開発アライアンス］ &lt;/dd&gt;&lt;dd&gt;日経BP社 2006-03-02&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774142573/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774142573.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;[改訂第2版] [入門+実践]要求を仕様化する技術・表現する技術 -仕様が書けていますか?&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283585/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822283585.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;UMLモデリング入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320023528/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4320023528.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;要求仕様の探検学―設計に先立つ品質の作り込み&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/490531819X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/490531819X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;SECBOOKS 共通フレーム2013 (SEC books)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283666/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822283666.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;上流工程UMLモデリング&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;「要求定義」から「要求開発」へ&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#me&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-08-31&#34;&gt;2015/08/31&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CZCW9BE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41H4JSiPBYL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CZCW9BE/baldandersinf-22/&#34;&gt;思春期ポストモダン　成熟はいかにして可能か&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;斎藤環 &lt;/dd&gt;&lt;dd&gt;幻冬舎 2013-05-31&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0099FB10A/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0099FB10A.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;「社会的うつ病」の治し方―人間関係をどう見直すか―（新潮選書）&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0125T1JYE/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0125T1JYE.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;世界が土曜の夜の夢なら　ヤンキーと精神分析 (角川文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00IE7MAZY/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00IE7MAZY.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ひきこもりはなぜ「治る」のか？　―精神分析的アプローチ―&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00S7A03K2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00S7A03K2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;承認をめぐる病&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00799R36Y/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00799R36Y.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;社会的ひきこもり 終わらない思春期 (PHP新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;終わらない思春期の2つのモードについて。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-14&#34;&gt;2015-11-14&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4414429145/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41NXMXRCBVL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4414429145/baldandersinf-22/&#34;&gt;嗜癖する人間関係―親密になるのが怖い&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;アン・ウィルソン シェフ Anne Wilson Schaef &lt;/dd&gt;&lt;dd&gt;誠信書房 1999-01&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791108434/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791108434.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;人はなぜ依存症になるのか 自己治療としてのアディクション&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4272405438/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4272405438.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;共依存かもしれない―他人やモノで自分を満たそうとする人たち (10代のセルフケア)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4584391246/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4584391246.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;何かを心配しているときにそっと開く本 (ワニ文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4122036291/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4122036291.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;愛しすぎる女たち (中公文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4414429110/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4414429110.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アダルトチルドレンと共依存&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;終盤になると「霊性」という単語が頻出するけど，日本のいわゆる「スピリチュアル」や類似のカルトの言説とは意味が異なるのでご注意を。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-10-30&#34;&gt;2014/10/30&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:3520c6f27e68cb332b04696ebe5f9997:a&#34;&gt;古今東西，ヤクザとケーサツ，強盗と税務署は同類だからね。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3520c6f27e68cb332b04696ebe5f9997:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3520c6f27e68cb332b04696ebe5f9997:b&#34;&gt;最近の斎藤環さんの著作は「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000765.shtml&#34;&gt;う～んな感じ&lt;/a&gt;」だが，このころの著作本は好き。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3520c6f27e68cb332b04696ebe5f9997:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>今日の戯れ言：ロボット法学会 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1013-diary/" />
		<id>tag:text.Baldanders.info,2015-10-13:/remark/2015/1013-diary/</id>
		<published>2015-10-13T22:54:48+09:00</published>
		<updated>2016-03-14T01:12:59+09:00</updated>
		<summary>「ロボット法学会」設立準備研究会 / 『パクリ経済――コピーはイノベーションを加速するか(仮)』 / GnuPG 2.1.9 released / wrap-style がなかなかよい</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#law:40845aafa61f9857714e6435e2346641&#34;&gt;「ロボット法学会」設立準備研究会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#copy:40845aafa61f9857714e6435e2346641&#34;&gt;『パクリ経済――コピーはイノベーションを加速するか(仮)』&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gnupg:40845aafa61f9857714e6435e2346641&#34;&gt;GnuPG 2.1.9 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atom:40845aafa61f9857714e6435e2346641&#34;&gt;wrap-style がなかなかよい&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;law:40845aafa61f9857714e6435e2346641&#34;&gt;「ロボット法学会」設立準備研究会&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://robotlaw.jp/&#34;&gt;「ロボット法学会」設立準備研究会 | Robot Law @ Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://peatix.com/event/115206&#34;&gt;「ロボット法学会」設立準備研究会 | Peatix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bengo4.com/internet/n_3805/&#34;&gt;「法律が普及の足かせになってはいけない」ロボット法学会の設立目指し、準備会開催|弁護士ドットコムニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2015/10/46992/&#34;&gt;「ロボットの社会導入に向けて、法律家も技術者もともに議論を」——「ロボット法学会」の設立準備イベント開催 - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://robotlaw.jp/archives/66&#34;&gt;新保史生「何故に『ロボット法』なのか」(2015年10月11日）報告資料 | 「ロボット法学会」設立準備研究会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itresearchart.biz/?p=442&#34;&gt;ロボット法って何 | IT Research Art&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogos.com/article/138762/&#34;&gt;「ロボット法学会設立準備会」に寄せて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初の2つの記事では「ロボット法 新8原則」を紹介している。
曰く&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;人間第一の原則&lt;/li&gt;
&lt;li&gt;命令服従の原則&lt;/li&gt;
&lt;li&gt;秘密保持の原則&lt;/li&gt;
&lt;li&gt;利用制限の原則&lt;/li&gt;
&lt;li&gt;安全保護の原則&lt;/li&gt;
&lt;li&gt;公開・透明性の原則&lt;/li&gt;
&lt;li&gt;個人参加の原則&lt;/li&gt;
&lt;li&gt;責任の原則&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これって既存の「機械」の概念を超えるなと言ってるのと同じだよね。
エンジニア的には面白くはないんだけど，まぁ多分これが大方の人たちの「気分」なんだろう。&lt;/p&gt;

&lt;p&gt;あと&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;人間はロボットよりも肉体能力が高いけれど、知的能力は結構、負け始めている。頭はロボット、体は人間という仕事の体制ができることになる。つまり、トップの人間がロボットに基本的な命令を出し、ロボットがゴーグルを通じて下級の労働者に命令を出して、人間がその通りに仕事をすることになる。言葉もいらず、すごく安く人間を使える。この危険性を指摘している人は少ない&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bengo4.com/internet/n_3805/&#34;&gt;「法律が普及の足かせになってはいけない」ロボット法学会の設立目指し、準備会開催&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるが，現時点において人工知能が「知的」かというと首をひねらざるをえない。
たとえば IBM の Watson は，いわゆる「エキスパート・システム」としては現時点での究極と言えるかもしれないが，「知的」ではない。
Watson は「問いを解く」ことに関して人を凌駕しつつあるかもしれないが，「問いを立てる」ことはできないからだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:40845aafa61f9857714e6435e2346641:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:40845aafa61f9857714e6435e2346641:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;自律的に「問いを立てる」ことができるようにならないかぎり，人工知能は危険でも脅威でもない。
でも，もしそれができるようになれば，まさしく「&lt;a href=&#34;http://text.baldanders.info/remark/2015/0917-diary/#ai:7de7822f81e49845760a41cfe20e81ad&#34;&gt;進化&lt;/a&gt;」だし，そうなれば進化の階梯を機械に譲ることになっても仕方ないだろう。&lt;/p&gt;

&lt;p&gt;もうひとつ考えるべきは「遠隔操作ロボット」である。
これは問題提起としては昨年末に既に出ている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bengo4.com/other/1146/1287/n_2352/&#34;&gt;ロボットを「奴隷的に拘束」したら憲法違反？ 「ロボット法」の可能性を研究者が議論|弁護士ドットコムニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;システムが複雑化すれば，身体的なものであれ，精神的なものであれ，機械と人間との間に軋轢が起きる。
両者の媒として働くと考えられているのも人工知能である。
個人的にはこちらのほうが社会に普及しやすいと考える。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;身体的なものをロボットが模倣する方向で動いていると思うが、はたして身体になりうるのか。たとえば憲法18条では、身体について、奴隷的な拘束は認められていないが、テレイグジスタンスが高度に発達して、ロボットが拘束された場合は身体性を犯されたことになるのかという疑問がある&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bengo4.com/other/1146/1287/n_2352/&#34;&gt;ロボットを「奴隷的に拘束」したら憲法違反？ 「ロボット法」の可能性を研究者が議論&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;また、ロボット法政策研究者でキャンペナーの工藤郁子氏は「製造物責任は『無過失責任』で、ミスがなくても製造者側に責任を負わせるようになっている。しかし、無過失責任を採用する場合、ユーザーにとってメリットはあるが、メーカーにとって重い負担になる」とした上で、「ロボット自体が自分でユーザーとのインタラクションを経て学習すると、もしかしたら技術者が把握している範囲を超えて活動するかもしれない。そのまま製造物責任を導入していいかという問題があるだろう」と語った&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bengo4.com/other/1146/1287/n_2352/&#34;&gt;ロボットを「奴隷的に拘束」したら憲法違反？ 「ロボット法」の可能性を研究者が議論&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これに直接応えるものではないが「&lt;a href=&#34;http://blogos.com/article/138762/&#34;&gt;「ロボット法学会設立準備会」に寄せて&lt;/a&gt;」はなかなか興味深い。
この記事では「4つの NEW」を提示している。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NEW Machine&lt;/li&gt;
&lt;li&gt;NEW Relationship&lt;/li&gt;
&lt;li&gt;NEW Law&lt;/li&gt;
&lt;li&gt;NEW Generation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらを軸に議論していくと面白いのではないかと思う。&lt;/p&gt;

&lt;h2 id=&#34;copy:40845aafa61f9857714e6435e2346641&#34;&gt;『パクリ経済――コピーはイノベーションを加速するか(仮)』&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20151012/pakuri&#34;&gt;この本の帯文は佐野研二郎氏に依頼すればいいのではと思った『パクリ経済――コピーはイノベーションを加速するか(仮)』 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うーん。
3,780円。
392ページ。&lt;/p&gt;

&lt;p&gt;今年は高めの本は（主に経済的な理由で）遠慮してるのだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:40845aafa61f9857714e6435e2346641:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:40845aafa61f9857714e6435e2346641:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，これは読みたいなぁ。
でもこの前，&lt;a href=&#34;http://text.baldanders.info/remark/2015/0920-diary/&#34;&gt;泣く泣く本を処分した&lt;/a&gt;ばっかりだしなぁ。
これ以上魔窟の進行を許すわけには&amp;hellip;&lt;/p&gt;

&lt;p&gt;ちうわけで，とりあえず Kindle リクエストを出してみた。&lt;/p&gt;

&lt;p&gt;ところで，この「（仮）」ってのは正式タイトルなのだろうか。
タイトルの後ろに「（仮）」って付いてると，昔あった某どどエロアニメを連想してしまうんだが（笑）&lt;/p&gt;

&lt;h2 id=&#34;gnupg:40845aafa61f9857714e6435e2346641&#34;&gt;GnuPG 2.1.9 released&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2015q4/000380.html&#34;&gt;GnuPG 2.1.9 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回もセキュリティ脆弱性に絡む修正はなし。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: Allow fetching keys via OpenPGP DANE (&amp;ndash;auto-key-locate).  New option &amp;ndash;print-dane-records.&lt;/li&gt;
&lt;li&gt;gpg: Fix for a problem with PGP-2 keys in a keyring.&lt;/li&gt;
&lt;li&gt;gpg: Fail with an error instead of a warning if a modern cipher algorithm is used without a MDC.&lt;/li&gt;
&lt;li&gt;agent: New option &amp;ndash;pinentry-invisible-char.&lt;/li&gt;
&lt;li&gt;agent: Always do a RSA signature verification after creation.&lt;/li&gt;
&lt;li&gt;agent: Fix a regression in ssh-add-ing Ed25519 keys.&lt;/li&gt;
&lt;li&gt;agent: Fix ssh fingerprint computation for nistp384 and EdDSA.&lt;/li&gt;
&lt;li&gt;agent: Fix crash during passprase entry on some platforms.&lt;/li&gt;
&lt;li&gt;scd: Change timeout to fix problems with some 2.1 cards.&lt;/li&gt;
&lt;li&gt;dirmngr: Displayed name is now Key Acquirer.&lt;/li&gt;
&lt;li&gt;dirmngr: Add option &amp;ndash;keyserver.  Deprecate that option for gpg.  Install a dirmngr.conf file from a skeleton for new installations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;atom:40845aafa61f9857714e6435e2346641&#34;&gt;wrap-style がなかなかよい&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor&lt;/a&gt; は実は日本語混じりのテキストが苦手で，まともに使おうと思ったら相応のパッケージを導入する必要がある。
今までは &lt;a href=&#34;https://atom.io/packages/japanese-wrap&#34; title=&#34;japanese-wrap&#34;&gt;japanese-wrap&lt;/a&gt; を使ってたのだが，同じ作者による &lt;a href=&#34;https://atom.io/packages/wrap-style&#34; title=&#34;wrap-style&#34;&gt;wrap-style&lt;/a&gt; に乗り換えた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/raccy/items/4678af4020189366a297&#34;&gt;Atomで上手にwarpを刻んでくれるwrap-styleを開発しました。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者ご本人は「遅い。遅すぎる」と書かれているが，なかなかどうして。
実用上は問題ない。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:40845aafa61f9857714e6435e2346641:1&#34;&gt;まぁ人間だって自分で「問いを立てる」ことのできる者は少なそうだが。特に日本の学校教育は意図的にそういうことを spoil してるからね。できない者はニコラ・テスラに「君は automaton だ」とか言われそう（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:40845aafa61f9857714e6435e2346641:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:40845aafa61f9857714e6435e2346641:a&#34;&gt;積ん読も溜まりまくってるので消化しないと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:40845aafa61f9857714e6435e2346641:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>人工知能は「ハイル・ヒトラー」と叫ぶか - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/artificial-intelligence/" />
		<id>tag:text.Baldanders.info,2015-10-01:/remark/2015/artificial-intelligence/</id>
		<published>2015-10-01T20:47:00+09:00</published>
		<updated>2016-03-14T01:12:59+09:00</updated>
		<summary>「人工知能に人類と協力する目的を持たせる」にしろ「人工知能の開発は人類がコントロールできるように進める」にしろ，人工知能が「ハイル・ヒトラー」と叫ぶ可能性は排除できない。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;サイトリニューアルの余波で&lt;a href=&#34;http://www.baldanders.info/spiegel/log/&#34;&gt;昔の日記&lt;/a&gt;なんか眺めてたら「&lt;a href=&#34;http://www.ne.jp/asahi/comp/tarusan/index.html&#34;&gt;たるさんのパソコンフィールド&lt;/a&gt;」が復活していることに気が付いた。
当時はよく読んでたなぁ。
スパコンネタは（そっち方面には詳しくないので）当時は本当に勉強になりました。&lt;/p&gt;

&lt;p&gt;で，復活後の記事から。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ne.jp/asahi/comp/tarusan/main257.htm&#34;&gt;ラスト関東を楽しむ日&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事の後半部分が人工知能の話である。&lt;/p&gt;

&lt;p&gt;個人的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;個々のヒトには（身体的な理由により）知性の限界が存在する&lt;/li&gt;
&lt;li&gt;人工知能がヒトを超えるのなら，それは間違いなく「進化」である&lt;/li&gt;
&lt;li&gt;知性の進化をヒトが阻むのなら，ヒトは進化のレースから退場すべき&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と考えている。
しかし実際には，人工知能が人間社会と本格的に競合することはないと思う。&lt;/p&gt;

&lt;figure lang=&#34;ja&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;さらに人間と機械は、出自がちがうので、同じリソースをめぐって争う必要がない。
これが動物だと、居住空間とか食べ物とか毛皮や肉とか、競合する資源がある。
だけど機械とは競合しない……完全にしないとは言わないけれど、他の動物と比べれば大幅にちがう。
人間はお金や女や権力を巡って争ってきたけど、機械はお金とか関係ないし、セックスもしないし（人間のほうはしたがる人もいるけど）、権力も関係ない。
だから機械やAIが賢くなっても、別に人間なんか滅ぼす必要なんかまったくない。
人間にそういうものをエサとして差し出せば（あるいは実物なくても画面にその絵を描いてやるだけで）人間はホイホイ動くし掃除もするしメンテもするし。機械にとってこんな便利なものはないよ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://cruel.hatenablog.com/entry/2015/08/28/161912&#34;&gt;機械支配待望論&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;もちろん失くなる職業はあるだろうし&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，存続する職業の多くは変革を迫られるかもしれない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
でもそれは過去の歴史で何度もあったことで，しかもその程度のことなら20世紀から予測された「想定内」の話である。&lt;/p&gt;

&lt;p&gt;問題は人工知能ではなくヒト（人間社会）の側にある。&lt;/p&gt;

&lt;p&gt;人間社会はいまだかつて自身に匹敵するまたは自身を上回る「対外知性」に出会ったことがない。
もちろん対外知性と交渉するための法も規範も存在しない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
もし人工知能がヒトに匹敵またはヒトを上回る知性を獲得したとして，そのことに社会が堪えられるかどうかがヒトの進化の分岐点となるのだろう。&lt;/p&gt;

&lt;figure lang=&#34;ja&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;いや、まだまだ懸念事項はある。これらの人工知能には良心という概念はプログラミングする事無しには存在し得ない。とすると、現代版ヒトラーや現代版スターリンが人工知能に世界制圧を命令して設定したら．．．&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.ne.jp/asahi/comp/tarusan/main257.htm&#34;&gt;ラスト関東を楽しむ日&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これは面白い。&lt;/p&gt;

&lt;p&gt;どう考えたって「人工知能は洗脳に弱い&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;」。
「機械学習」なんてのは体のいい洗脳である（もちろん偏見）。
人工知能の側に人間社会と競合する理由はなくても，人間自身がそのように「刷り込み」を行ったらどうなるか。&lt;/p&gt;

&lt;figure lang=&#34;ja&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;2015年5月にロンドンで開催された「Zeitgeist 2015」のカンファレンスで、ホーキング博士は今後100年以内に人工知能が人間を超えるだろうと警告しました。人工知能が人類を超えるとき、人工知能に人類と協力する目的を持たせるべき必要があり、また人工知能の開発は人類がコントロールできるように進めるべきだ、とホーキング博士は考えています。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://gigazine.net/news/20150529-ai-will-overtake-humans/&#34;&gt;人工知能は核兵器よりも潜在的に危険、ホーキング博士が「100年以内に人工知能は人間を超える」と警告 - GIGAZINE&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;結局これはいつもの「技術の両義性」の話だ。
「人工知能に人類と協力する目的を持たせる」にしろ「人工知能の開発は人類がコントロールできるように進める」にしろ，人工知能が「ハイル・ヒトラー」と叫ぶ可能性は排除できない。&lt;/p&gt;

&lt;p&gt;と，ここまで書いて気がついた。
これって「究極超人あ～る」ぢゃん（笑）&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:cc9cb610c712d98fa6058f6db1926168&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35070557/&#34;&gt;人工知能「IBM Watson」は何に使われているのか？ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35071319/&#34;&gt;「Watson」は科学的根拠に基づいて結論を出す、言うなれば“その道の専門家”だ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考文献:cc9cb610c712d98fa6058f6db1926168&#34;&gt;参考文献&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/31e2h91IUWL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22/&#34;&gt;イノベーション 悪意なき嘘 (双書 時代のカルテ)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;名和 小太郎 &lt;/dd&gt;&lt;dd&gt;岩波書店 2007-01-11&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「両用技術とはどのようなものか。その核心には「矛と楯の論理」がある」（まえがき「予断・診断・独断 そんなばかな」より）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-10-01&#34;&gt;2015-10-01&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;若い方は知らないだろうが（私も実際に会ったことはないが），テレビモニタとキーボードを備えた対話型コンピュータが登場する前は，「コーダー」というただプログラムを書くだけの職業が存在した。もちろん，現在は「コーダー」なる職業は存在しない。プログラマがコードを書くからだ。だから歴史的には，いつか人工知能がプログラムを設計してコードを書くようになったとしても驚くことではない。まぁ進化論的には道具が自身のために自律的に道具を生み出せるようになったら驚くことだが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;グレッグ・イーガンの『万物理論』では最終的に人工知能が「万物理論」の論文を書き上げる。過去の例で言うなら，戦後の日本の主婦は炊飯器・洗濯機・冷蔵庫の「三種の神器」のおかげで家事から解放されたという伝説がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;実は「&lt;a href=&#34;http://www.seti-inst.edu/post-detection.html&#34;&gt;地球外知的生命体の発見に続いてとるべき行動の公式な原則&lt;/a&gt;」というのは存在する。大真面目な話である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;そもそも「良心」自体が社会的刷り込みだけどね。というか，「個」と「社会」の関係を定義することなく「良心」を組み込むのは無理だと思うのだが。そのためには人工知能を社会に「包摂」しなくてはならない。ってこれは「&lt;a href=&#34;http://robotlaw.jp/&#34;&gt;ロボット法学会&lt;/a&gt;」の仕事かな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cc9cb610c712d98fa6058f6db1926168:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>制約は構造を生む - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/the-structure-from-restriction/" />
		<id>tag:text.Baldanders.info,2015-09-30:/remark/2015/the-structure-from-restriction/</id>
		<published>2015-09-30T20:33:14+09:00</published>
		<updated>2015-09-30T20:33:14+09:00</updated>
		<summary>制約は programmable である</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;「制約は構造を生む」というのは確か結城浩さんの『数学ガール』の中にあったフレーズだと思うが，私はこの言葉が好きである。
ただし，私の中ではこの言葉に続きがあって，それは「制約は programmable である」というものだ。&lt;/p&gt;

&lt;p&gt;「言葉」というのは面白いもので，表現のためのすばらしい手段でありながら，それ自体が表現に制約を加える。
自然言語の場合，その「制約」が硬直化するのを防ぐため自己を改変していく&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
しかしプログラミング言語の場合は「仕様」であり「ルール」であるため自己改変がしづらい面がある。
つまり，どんなプログラミング言語にも「賞味期限」があるのだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000529.shtml&#34;&gt;前にも書いた&lt;/a&gt;けど，私は職業プログラマなので，プログラミングが好きでも嫌いでもない。
私から見れば「プログラミングが好き」というのは「鋸が好き」と言ってるのと大差ない。
プログラミング言語も同様で，基本的にはどんな言語にも対応できる自信はあるが，特定の言語が好きというのはない。&lt;/p&gt;

&lt;p&gt;それでも「これで何かを作ってみたい」と思う言語はいくつかあって，私の場合はそれが C/C++ や Java そして Go 言語である。
どういうわけかスクリプト言語にはあまり食指は向かなかった。
これはたぶん後付けの理由だけど，スクリプト言語というのはひたすら対象を「記述」しているだけで，あまり「作ってる」実感がない。&lt;/p&gt;

&lt;p&gt;先日，ついカッとなって「&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;」という記事を書いたが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，書いてて思い出したのが，まさに「制約は構造を生む」というフレーズだった。&lt;/p&gt;

&lt;p&gt;いわゆる「オブジェクト指向言語」が台頭しだした頃， C++ や Java でなかなか馴染めなかったのが「例外処理」である。
「&lt;a href=&#34;http://www.kaoriya.net/blog/2014/04/17/&#34;&gt;または私は如何にして例外するのを止めて golang を愛するようになったか&lt;/a&gt;」で「Java の例外が発生しうるメソッドの呼び出しは分岐を隠蔽・内包している」と指摘されているように，まさにこれは呼び出した関数から見て正体不明の &lt;code&gt;longjump&lt;/code&gt; をかまされるのとほとんど同じであり&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，「そんな危ないもん使えるか！」というのが最初の印象だった。
まぁ，もうすっかり馴らされたけどね。&lt;/p&gt;

&lt;p&gt;かつての私のように，例外になじめない人は結構いるようで，中には呼び出す関数ひとつひとつを &lt;code&gt;try-catch&lt;/code&gt; で囲ってる人とかもいて，「それって例外で実装する意味あるのか？」って感じである。
で，結局，関数の返値専用のオブジェクトを作って，返ってくるオブジェクトの状態を見てエラー・ハンドリングしたり。
それって CDD (Context-Driven Design) の萌芽かも（笑）&lt;/p&gt;

&lt;p&gt;Go 言語のエラー・ハンドリングと「古き良き」例外処理のどちらが優れているのかは一概に言えないと思うが，個人的には Go 言語のやり方に慣れてしまったら例外処理には戻れない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
今まで触ってみた感触だけど，おそらく Go 言語の肝は &lt;code&gt;return&lt;/code&gt; にあると思う。
Go 言語の &lt;code&gt;return&lt;/code&gt; をどう記述するか（あるいはしないか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;）がコードの構造を決める鍵になっている。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;逆に言うと自己改変しなくなった言語は緩慢な死を迎える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;後悔はしていない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;今はもう存在しないと思うが，初期の C++ の実装のいくつかは例外を &lt;code&gt;longjump&lt;/code&gt; で実装していた。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;いや，もちろん仕事ならやりますよ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;記述しないことは記述することの一種である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GOPATH 汚染問題 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/gopath-pollution/" />
		<id>tag:text.Baldanders.info,2015-09-29:/golang/gopath-pollution/</id>
		<published>2015-09-29T23:40:59+09:00</published>
		<updated>2016-02-01T09:29:53+09:00</updated>
		<summary>go get コマンドは外部パッケージの revision 等をコントロールできず，常に repository の最新コードを取ってこようとする。GOPATH 内に複数のプロジェクトが同居している場合は同じ外部パッケージでもプロジェクトごとに異なるリビジョンを要求する場合があり，管理が煩雑になってしまう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/73ebc684b5807277b7e2&#34;&gt;そろそろ真面目に Golang 開発環境について考える — GOPATH 汚染問題 - Qiita&lt;/a&gt;，&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/baa3671c7e1b8a6594a9&#34;&gt;そろそろ真面目に Golang 開発環境について考える — Internal Packages と Vendoring - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; コマンドはとても強力な機能で，私のように Windows と UNIX 系環境の間を渡り歩いてる身としては， make などの tool chain に大きく依存することなく， &lt;code&gt;go get&lt;/code&gt; コマンドだけで repository の fetch からビルド・インストールまで出来てしまうのは非常にありがたい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;しかし， &lt;code&gt;go get&lt;/code&gt; コマンドは外部パッケージの revision 等をコントロールできず，常に repository の最新コードを取ってこようとする。
ひとつの環境でひとつのプロジェクトを管理していくのならこれでも何とかならないこともないが， &lt;code&gt;GOPATH&lt;/code&gt; 内に複数のプロジェクトが同居している場合は同じ外部パッケージでもプロジェクトごとに異なるリビジョンを要求する可能性があり，管理が煩雑になってしまう。&lt;/p&gt;

&lt;p&gt;しかも困ったことに &lt;code&gt;GOPATH&lt;/code&gt; 環境変数は複数のプロジェクト管理を想定していないため，全てのパッケージをひとつのフォルダに入れようとする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;対策1-プロジェクトごとに-gopath-を設定し直す:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策1】 プロジェクトごとに GOPATH を設定し直す&lt;/h2&gt;

&lt;p&gt;この問題に対する一番安直な答えは「プロジェクトごとに &lt;code&gt;GOPATH&lt;/code&gt; を設定し直す」である。例えば&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; をビルドする場合は以下のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;mkdir C:\workspace\gb

C:&amp;gt;SET GOPATH=C:\workspace\gb

C:&amp;gt;go get -v github.com/constabulary/gb/...
github.com/constabulary/gb (download)
github.com/constabulary/gb/log
github.com/constabulary/gb
github.com/constabulary/gb/vendor
github.com/constabulary/gb/cmd
github.com/constabulary/gb/cmd/gb
github.com/constabulary/gb/cmd/gb-vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは &lt;code&gt;GOPATH&lt;/code&gt; 直下の &lt;code&gt;bin&lt;/code&gt; フォルダにパスを通すか，パスの通ってるフォルダに実行ファイルをコピーすればよい。
実行履歴はバッチファイル（UNIX 系なら shell スクリプト）に保存しておけばいつでも復元できる。&lt;/p&gt;

&lt;p&gt;毎回環境をセットアップしないといけないのは面倒だが，プロジェクト管理のためのツールも必要なく， Go コンパイラの標準機能のみで管理できる。
標準機能のみで管理できるというのは結構重要で，たとえば CI ツールを使っている場合は，設定を単純にできるので管理しやすいといえる。&lt;/p&gt;

&lt;p&gt;UNIX 系の環境であれば &lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; を使う手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; は &lt;code&gt;cd&lt;/code&gt; をフックし，ディレクトリごとに環境変数を書き換えることができる。
この機能を使ってプロジェクト・フォルダごとに &lt;code&gt;GOPATH&lt;/code&gt; を設定できる。&lt;/p&gt;

&lt;h2 id=&#34;対策2-プロジェクト-ベースの管理ツールを使う:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策2】 プロジェクト・ベースの管理ツールを使う&lt;/h2&gt;

&lt;p&gt;もうひとつは &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; のようなプロジェクト・ベースでコード管理のできるツールを使う方法である。
&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; については&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;紹介したので，そちらを参照のこと。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; で作った開発環境はフォルダ構成を丸ごと開発メンバに配布・同期することが可能になるため，複数人で環境を合わせることが容易になる。&lt;/p&gt;

&lt;h2 id=&#34;対策3-go-1-5-の-vendoring-機能を使う:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策3】 Go 1.5 の Vendoring 機能を使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のバージョン 1.5 から Vendoring 機能が使えるようになった。&lt;/p&gt;

&lt;p&gt;Vendoring 機能を使うと，外部パッケージを &lt;code&gt;GOPATH&lt;/code&gt; とは独立に管理できるようになる。
この機能を使うには環境変数 &lt;code&gt;GO15VENDOREXPERIMENT&lt;/code&gt; に 1 をセットする。&lt;/p&gt;

&lt;p&gt;（&lt;strong&gt;追記&lt;/strong&gt; 当初の予告通り Vendoring 機能は 1.6 から既定の機能になった。環境変数 &lt;code&gt;GO15VENDOREXPERIMENT&lt;/code&gt; をセットしなくても有効になる）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit&#34;&gt;Go 1.5 Vendor Experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vendoring 機能が有効な状態では &lt;code&gt;vendor&lt;/code&gt; フォルダが特別な意味を持つ。
たとえば &lt;code&gt;mypackage&lt;/code&gt; パッケージに対して &lt;code&gt;mypackage/vendor/vpackage&lt;/code&gt; と配置した場合， &lt;code&gt;import &amp;quot;vpackage&amp;quot;&lt;/code&gt; と記述すれば &lt;code&gt;mypackage/vendor&lt;/code&gt; フォルダ以下の &lt;code&gt;vpackage&lt;/code&gt; も探してくれる。&lt;/p&gt;

&lt;p&gt;では，&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;作ったコードを流用して確かめてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;SET GOPATH=C:\workspace\vdemo

C:\workspace\vdemo&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
            julian-day.go

C:\workspace\vdemo&amp;gt;go build ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)

C:\workspace\vdemo&amp;gt;mkdir src\julian-day\vendor

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor


C:\workspace\vdemo&amp;gt;go build ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\workspace\vdemo\src\julian-day\vendor\github.com\spiegel-im-spiegel\astrocalc\modjulian (vendor tree)
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダを追加したことで Go コンパイラの挙動が変わったことがお分かりだろうか。
目的のパッケージを vendor tree → &lt;code&gt;GOROOT&lt;/code&gt; → &lt;code&gt;GOPATH&lt;/code&gt; の順で捜索している。&lt;/p&gt;

&lt;p&gt;では &lt;code&gt;vendor&lt;/code&gt; フォルダに外部パッケージを導入してビルドしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;pushd src\julian-day\vendor

C:\workspace\vdemo\src\julian-day\vendor&amp;gt;git clone https://github.com/spiegel-im-spiegel/astrocalc.git github.com/spiegel-im-spiegel/astrocalc
Cloning into &#39;github.com/spiegel-im-spiegel/astrocalc&#39;...
remote: Counting objects: 43, done.
remote: Total 43 (delta 0), reused 0 (delta 0), pack-reused 43
Unpacking objects: 100% (43/43), done.
Checking connectivity... done.

C:\workspace\vdemo\src\julian-day\vendor&amp;gt;popd

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go

C:\workspace\vdemo&amp;gt;go install -v ./...
julian-day/vendor/github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
├─bin
│      julian-day.exe
│
├─pkg
│  └─windows_amd64
│      └─julian-day
│          └─vendor
│              └─github.com
│                  └─spiegel-im-spiegel
│                      └─astrocalc
│                              modjulian.a
│
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go

C:\workspace\vdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダ以下にパッケージがフルパスで入ってしまうため階層が深くなりがちなのが「玉に瑕」だが，それ以外は特に問題はない。
あるいは &lt;code&gt;vendor&lt;/code&gt; フォルダ以下のパッケージは &lt;code&gt;go get&lt;/code&gt; の制約から外れているので，呼び出し側を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;astrocalc/modjulian&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として以下のフォルダ構成にする手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─astrocalc
                │  .editorconfig
                │  .gitignore
                │  .travis.yml
                │  LICENSE
                │  README.md
                │
                └─modjulian
                        example_test.go
                        LICENSE
                        modjulian.go
                        modjulian_test.go


C:\workspace\vdemo&amp;gt;go install -v ./...
julian-day/vendor/astrocalc/modjulian
julian-day

C:\workspace\vdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意が必要なのは， &lt;code&gt;go get&lt;/code&gt; は git の submodule を上手く扱えないため， &lt;code&gt;vendor&lt;/code&gt; フォルダ以下のパッケージを submodule として配置している場合はビルドに失敗することだ。
この場合は &lt;code&gt;-d&lt;/code&gt; オプションで &lt;code&gt;go get&lt;/code&gt; がビルドまで行わないようにし，手動で submodule の &lt;code&gt;init&lt;/code&gt; と &lt;code&gt;update&lt;/code&gt; を行う必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go get -d project/...
C:&amp;gt;git submodule init
C:&amp;gt;git submodule update
C:&amp;gt;go install ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ブックマーク:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doloopwhile.hatenablog.com/entry/2014/06/18/010449&#34;&gt;direnvで解決するGOPATHの3つの問題点 - None is None is None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hde.co.jp/entry/2015/02/27/182117&#34;&gt;改めて、direnvを使いましょう！ - HDE BLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/aminamid/items/5a0e9461385c80d0c8a6&#34;&gt;さくら - homeにgolang, direnv とvirtualenvを入れて動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;それでも git などのコード管理ツールへの依存はどうしても残るのだけれど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;具体的には &lt;code&gt;GOPATH&lt;/code&gt; で列挙されるパスのリストのうち先頭のパスにインストールされる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の開発・管理主体は Google だが，こんな構成で Google は困らないのかと思ったのだが，実は Google は全てのコードを単一の repository で管理しているらしい。（参考： &lt;a href=&#34;http://www.publickey1.jp/blog/15/2045000google.html&#34;&gt;20億行のコードを保存し、毎日4万5000回のコミットを発行しているGoogleが、単一のリポジトリで全社のソースコードを管理している理由&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で組まれている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;パッケージのパスが変わるとテストが通らなくなる場合があるので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
