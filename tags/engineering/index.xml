<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of Engineering - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/engineering/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/engineering/index.xml" />
	<id>tag:text.Baldanders.info,2025-02-08:/tags</id>
	<updated>2025-02-08T18:04:57+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>GitHub Copilot で遊ぶ</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2025/02/playing-with-github-copilot/" />
		<id>tag:text.Baldanders.info,2025-02-08:/remark/2025/02/playing-with-github-copilot/</id>
		<published>2025-02-08T09:04:57+00:00</published>
		<updated>2025-02-09T01:47:51+00:00</updated>
		<summary> 生成 AI の時代に求められる人材とはプロンプトを駆使する技能を持つ人ではなく，生成 AI の提案に NO と言える技術力と見識を持つ「狂狷の徒」ではないだろうか。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;http://copilot.github.com/&#34; title=&#34;GitHub Copilot · Your AI pair programmer&#34;&gt;GitHub Copilot&lt;/a&gt; の無料版（制限あり）が開放されて VS Code 上で使えるようになった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GitHub.copilot&#34;&gt;GitHub Copilot - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といってもコメントの補完とかコミットメッセージくらいにしか使ってないけど。
英語不得手なので，これだけでもめっちゃ助かっている。&lt;/p&gt;
&lt;p&gt;ちょっと思いついて &lt;a href=&#34;https://github.com/goark/koyomi&#34; title=&#34;GitHub - goark/koyomi: 日本のこよみ&#34;&gt;&lt;code&gt;github.com/goark/koyomi&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/value&lt;/code&gt; パッケージに曜日（Weekday）型を追加しようと思うのだが，試しに &lt;a href=&#34;http://copilot.github.com/&#34; title=&#34;GitHub Copilot · Your AI pair programmer&#34;&gt;GitHub Copilot&lt;/a&gt; に手伝ってもらうことにした。&lt;/p&gt;
&lt;h2&gt;GitHub Copilot で遊ぶ&lt;/h2&gt;
&lt;p&gt;まず &lt;span class=&#34;box&#34;&gt; Ctrl &lt;/span&gt;+&lt;span class=&#34;box&#34;&gt; I &lt;/span&gt; でプロンプトを表示し「&lt;a href=&#34;https://pkg.go.dev/time&#34; title=&#34;time package - time - Go Packages&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Weekday&lt;/code&gt; と同等な機能で日本語の曜日名を出力する型」で問い合わせてみる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./github-copilot-prompt.png&#34;&gt;&lt;img src=&#34;./github-copilot-prompt.png&#34; srcset=&#34;./github-copilot-prompt.png 1039w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;time.Weekday と同等な機能で日本語の曜日名を出力する型&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./github-copilot-prompt.png&#34;&gt;time.Weekday と同等な機能で日本語の曜日名を出力する型&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;おー。
一通り提示してくれるんだな。
既に作っている &lt;a href=&#34;https://github.com/goark/koyomi&#34; title=&#34;GitHub - goark/koyomi: 日本のこよみ&#34;&gt;&lt;code&gt;koyomi&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/value.DateJp&lt;/code&gt; 型と関連するメソッドも追加されている。&lt;/p&gt;
&lt;p&gt;これはこれで（エラーもバグもないし）使えなくもないのだが，いくつか調整したい。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;WeekdayJp&lt;/code&gt; 型の基底型は &lt;code&gt;int&lt;/code&gt; ではなく &lt;a href=&#34;https://pkg.go.dev/time&#34; title=&#34;time package - time - Go Packages&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Weekday&lt;/code&gt; としたい
&lt;ul&gt;
&lt;li&gt;機能上のメリットがあるわけではないが「文芸」的に &lt;code&gt;WeekdayJp&lt;/code&gt; 型と &lt;a href=&#34;https://pkg.go.dev/time&#34; title=&#34;time package - time - Go Packages&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Weekday&lt;/code&gt; 型が「関連」することを明示したい（&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; に「継承」はない）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;曜日名の出力メソッドは &lt;code&gt;String()&lt;/code&gt;, &lt;code&gt;ShortString()&lt;/code&gt; ではなく &lt;code&gt;StringJp()&lt;/code&gt;, &lt;code&gt;ShortStringJp()&lt;/code&gt; としたい
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String()&lt;/code&gt; メソッドは &lt;a href=&#34;https://pkg.go.dev/time&#34; title=&#34;time package - time - Go Packages&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Weekday&lt;/code&gt; と同じ機能にする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WeekdayJp&lt;/code&gt; 型の値が &lt;code&gt;Sunday&lt;/code&gt; 〜 &lt;code&gt;Saturday&lt;/code&gt; 以外なら，曜日名の出力は &lt;a href=&#34;https://pkg.go.dev/time&#34; title=&#34;time package - time - Go Packages&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Weekday.String()&lt;/code&gt; メソッドと同じにしたい&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;というわけで，最終的には以下のようなコードにした。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// WeekdayJp is a type that represents the days of the week in the Japanese context.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// It is based on the time.Weekday type from the standard library.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WeekdayJp&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Weekday&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Sunday&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;WeekdayJp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WeekdayJp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sunday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 日曜日&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Monday&lt;/span&gt;                                              &lt;span class=&#34;c1&#34;&gt;// 月曜日&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Tuesday&lt;/span&gt;                                             &lt;span class=&#34;c1&#34;&gt;// 火曜日&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Wednesday&lt;/span&gt;                                           &lt;span class=&#34;c1&#34;&gt;// 水曜日&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Thursday&lt;/span&gt;                                            &lt;span class=&#34;c1&#34;&gt;// 木曜日&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Friday&lt;/span&gt;                                              &lt;span class=&#34;c1&#34;&gt;// 金曜日&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Saturday&lt;/span&gt;                                            &lt;span class=&#34;c1&#34;&gt;// 土曜日&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weekdayNames&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;日曜日&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;月曜日&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;火曜日&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;水曜日&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;木曜日&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;金曜日&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;土曜日&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weekdayShortNames&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;日&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;月&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;火&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;水&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;木&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;金&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;土&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// String returns the English name of the Japanese weekday (WeekdayJp)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// by converting it to the standard time.Weekday type and calling its String method.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WeekdayJp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Weekday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// StringJp returns the Japanese name of the WeekdayJp if it is between Sunday and Saturday.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// If the WeekdayJp is out of this range, it returns the standard time.Weekday string representation.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WeekdayJp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;StringJp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sunday&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Saturday&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Weekday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weekdayNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ShortStringJp returns the short Japanese name of the WeekdayJp.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// If the WeekdayJp is not within the valid range (Sunday to Saturday),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// it returns the default string representation of the time.Weekday.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WeekdayJp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ShortStringJp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sunday&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Saturday&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Weekday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weekdayShortNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;たとえば &lt;code&gt;String()&lt;/code&gt; メソッドは&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./autocomplete-code.png&#34;&gt;&lt;img src=&#34;./autocomplete-code.png&#34; srcset=&#34;./autocomplete-code.png 530w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;コード補完&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./autocomplete-code.png&#34;&gt;コード補完&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;という感じにコードを提案してくる。
この状態で &lt;span class=&#34;box&#34;&gt; Tab &lt;/span&gt; キー押下で確定する。
テストコードも関数名から推測して妥当なコードを提案してくる。
変数・定数もクラス・メソッド名も名前が大事ってことですね（笑）&lt;/p&gt;
&lt;p&gt;コメントの補完も同様。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./autocomplete-comment.png&#34;&gt;&lt;img src=&#34;./autocomplete-comment.png&#34; srcset=&#34;./autocomplete-comment.png 530w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;コメント補完&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./autocomplete-comment.png&#34;&gt;コメント補完&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ドキュメント生成もやってくれる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./generate-docs.png&#34;&gt;&lt;img src=&#34;./generate-docs.png&#34; srcset=&#34;./generate-docs.png 1038w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ドキュメント生成&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./generate-docs.png&#34;&gt;ドキュメント生成&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ATOM や VS Code の使い始めの頃はスニペットベースのコード補完機能に感動したものだが， &lt;a href=&#34;http://copilot.github.com/&#34; title=&#34;GitHub Copilot · Your AI pair programmer&#34;&gt;Copilot&lt;/a&gt; によって柔軟なコード補完や生成ができるのマジ助かる。
今回はコードレビュー機能等は紹介しないが，ちょろんと試した感じではなかなかいい感じである。
人間にレビューを投げる前に &lt;a href=&#34;http://copilot.github.com/&#34; title=&#34;GitHub Copilot · Your AI pair programmer&#34;&gt;Copilot&lt;/a&gt; 相手にレビューを行うのはアリかもしれない。&lt;/p&gt;
&lt;h2&gt;「自律」機械は（今のところ）存在しない&lt;/h2&gt;
&lt;p&gt;教科書に載っているサンプルコード程度ならともかく，プログラムコードに &lt;strong&gt;唯一の正解&lt;/strong&gt; はない。
今回のような小さなコードですらそうなのだ。
&lt;a href=&#34;http://copilot.github.com/&#34; title=&#34;GitHub Copilot · Your AI pair programmer&#34;&gt;Copilot&lt;/a&gt; を含む生成 AI による提案を受け入れるか否かについては「人」による判断が不可欠だし，判断を行うためには，扱う対象に関する知識・技能・技術が要求される。
「自律」的な判断を行うのは今なお，機械ではなく，人の側なのである。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;LINKCODE=OGI&amp;amp;TH=1&amp;amp;PSC=1&#34;&gt;
&lt;q&gt;自立とは、仮想代理人ソフトウェアであるところのエージェントが自ら動き、誰の力も借りずに意思決定できることを言う。
[...]
一方、自律というのは哲学的な意味であり、自らが行動する際の基準と目的を明確を持ち、自ら規範を作り出すことができることをいう。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;LINKCODE=OGI&amp;amp;TH=1&amp;amp;PSC=1&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;LINKCODE=OGI&amp;amp;TH=1&amp;amp;PSC=1&#34;&gt;
&lt;q&gt;今、世の中で懸念されているのは、自立ではなく自律の方だが、学習能力を与えられ、自らのプログラムを改善できるようになっても、機械が自律することは考えられない。
なぜなら、機械は結局、人間に与えられた理論やルールにのっとって行動することになるからである。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;LINKCODE=OGI&amp;amp;TH=1&amp;amp;PSC=1&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;http://copilot.github.com/&#34; title=&#34;GitHub Copilot · Your AI pair programmer&#34;&gt;GitHub Copilot&lt;/a&gt; をはじめとする最近流行りの生成 AI の機能とは「翻案の大量生産」であり，その膨大な翻案空間から何をどうやって拾い上げるかについては，アルゴリズムの設計を含め（今のところ）人の側に委ねられている&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
そういう意味で &lt;a href=&#34;http://copilot.github.com/&#34; title=&#34;GitHub Copilot · Your AI pair programmer&#34;&gt;GitHub Copilot&lt;/a&gt; が文字通りコパイロット（ナビゲーション）の立ち位置に徹しているのは上手い割り切り方だと思う。&lt;/p&gt;
&lt;p&gt;生成 AI の時代に求められる人材とはプロンプトを駆使（して翻案空間を放浪）する技能を持つ人ではなく（積極的に利用しつつ）生成 AI の提案に NO と言える見識と技術を持つ「&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/hacker-ethic/&#34; title=&#34;エンジニアこそ「狂狷の徒」たれ&#34;&gt;狂狷の徒&lt;/a&gt;」ではないだろうか。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.watch.impress.co.jp/docs/news/1649089.html&#34;&gt;GitHub、VS Code上で「Copilot Free」開始　無料で月2000回コード補完 - Impress Watch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1659601.html&#34;&gt;OpenAIの最新推論モデル「o3-mini」が「GitHub Copilot」などで利用可能に - 窓の杜&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1660865.html&#34;&gt;無償ユーザーも対象 ～「Gemini 2.0 Flash」が「GitHub Copilot」で利用できるように - 窓の杜&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1661141.html&#34;&gt;「Visual Studio Code 1.97」が公開 ～新AI支援機能「Copilot NES」をプレビュー - 窓の杜&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/07/code-launderring/&#34;&gt;GitHub Copilot は貢献者から貢献を奪うか？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/10/cultural-commons/&#34;&gt;AI は「創作者様」を引きずり下ろすか — 『人権と文化コモンズ』を流し読む&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51cD7DR87IL._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;そろそろ、人工知能の真実を話そう (早川書房)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ジャン＝ガブリエル ガナシア (著), 小林 重裕・他 (翻訳), 伊藤 直子 (監修)&lt;/dd&gt;
    &lt;dd&gt;早川書房 2017-05-25 (Release 2017-05-31)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B071FHBGW8 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;シンギュラリティは起きない。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-02&#34;&gt;2016-07-02&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 人工知能の真実を話そう --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DTT1L1KL?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51TENFa9uZL._SL160_.jpg&#34; width=&#34;120&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0DTT1L1KL?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;日経サイエンス2025年3月号 [雑誌]&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;日経サイエンス (編集)&lt;/dd&gt;
    &lt;dd&gt;日経サイエンス 2025-01-24 (Release 2025-01-24)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0DTT1L1KL (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Kindle 版は固定レイアウトなのでブラウザ（Kindle Cloud Reader）で読める。特集は「ことばが世界を作る」と「CO2回収の現実味」。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2025-02-03&#34;&gt;2025-02-03&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 「日経サイエンス」2025年3月号 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41&amp;#43;ew2wl2jL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;効率的なGo ―データ指向によるGoアプリケーションの性能最適化&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Bartłomiej Płotka (著), 山口 能迪 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリー・ジャパン 2024-02-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4814400535 (ASIN), 9784814400539 (EAN), 4814400535 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784814400539/&#34;&gt;版元&lt;/a&gt;で Ebook を買える。Go言語のリファレンス本ではない。フトウェア工学，プログラミング（の考え方）を学ぶ教科書的な位置づけかなぁ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2024-04-21&#34;&gt;2024-04-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 効率的なGo : Efficient Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B099RTG3J7?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51TsccJ7LnS._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B099RTG3J7?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;著作権は文化を発展させるのか: 人権と文化コモンズ&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;山田 奨治 (著)&lt;/dd&gt;
    &lt;dd&gt;人文書院 2021-07-29 (Release 2021-07-29)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B099RTG3J7 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著作権を「ユーザーの人権」という観点から捉え直す。その後 文化→コモンズ→文化コモンズ と進み，本当の意味で「文化の発展に寄与する」とはどういうことか考察していく。
&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-10-23&#34;&gt;2022-10-23&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 著作権は文化を発展させるのか: 人権と文化コモンズ --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01J1I8PRQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/5132MaXTkGL._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B01J1I8PRQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;社会は情報化の夢を見る (河出文庫)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;佐藤俊樹 (著)&lt;/dd&gt;
    &lt;dd&gt;河出書房新社 2010-09-03 (Release 2016-07-29)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01J1I8PRQ (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;1996年に出版された『ノイマンの夢・近代の欲望―情報化社会を解体する』の改訂新装版。しかし内容はこれまでと変わりなく，繰り返し語られる技術決定論を前提とする安易な未来予測を「情報化」社会論だとして批判する。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 社会は情報化の夢を見る --&gt;
&lt;h2&gt;作業中の BGV (メン限配信以外)&lt;/h2&gt;
&lt;p&gt;ReGLOSS の五色のバラバラな声がパズルのようにカチッと填まると本当にかっこいいよね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=u4uDiV3u-do&#34;&gt;ReGLOSS &amp;lsquo;フィーリングラデーション&amp;rsquo; OFFICIAL MV - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Mb2Pdf7P-a4&#34;&gt;晴る / ヨルシカ  covered by ReGLOSS 【歌ってみた / hololive DEV_IS】 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=m6T71r7hRMI&#34;&gt;ムーンライト / 星街すいせい covered by ReGLOSS 【歌ってみた / hololive DEV_IS】 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ed-0AKPWaf8&#34;&gt;【歌ってみた】STAR TRAIN/Perfume【ReGLOSS】 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;生成 AI の背後にある翻案元のコンテンツやアルゴリズムと知財権との&lt;a href=&#34;https://text.baldanders.info/remark/2023/06/is-generative-ai-copyright-safe/&#34; title=&#34;Generative AI は Copyright-Safe か？&#34;&gt;関係&lt;/a&gt;についてはここでは知らないふりをする。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>goroutine はグリーンスレッドではない（『Go言語で学ぶ並行プログラミング』読書会1回目）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2025/01/learn-concurrent-programming-with-go-1/" />
		<id>tag:text.Baldanders.info,2025-01-25:/remark/2025/01/learn-concurrent-programming-with-go-1/</id>
		<published>2025-01-25T14:27:33+00:00</published>
		<updated>2025-01-26T00:24:30+00:00</updated>
		<summary>「並行処理」と「並列処理」を使って文を書け</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今日は「&lt;a href=&#34;https://technical-book-reading-2.connpass.com/event/337562/&#34; title=&#34;第1回『Go言語で学ぶ並行プログラミング』オンライン読書会 - connpass&#34;&gt;第1回『Go言語で学ぶ並行プログラミング』オンライン読書会&lt;/a&gt;」だった。&lt;/p&gt;
&lt;p&gt;版元から PDF 版を&lt;a href=&#34;https://book.impress.co.jp/books/1123101144&#34; title=&#34;Go言語で学ぶ並行プログラミング　他言語にも適用できる原則とベストプラクティス - インプレスブックス&#34;&gt;購入&lt;/a&gt;した。
インプレス社って絶版でもないのにいつの間にか Kindle 版を引っ込めたりするそうで，デジタル版を買うなら PDF 版を買うのがオススメらしい。
まぁ，技術参考書は PDF 版のほうが取り回ししやすいからな。
紙はかさばるし。&lt;/p&gt;
&lt;p&gt;事前にざっと斜め読みしたのだが，解説が丁寧という印象。
タイトル通り &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 言語を前提に書かれているが C/C++ や Java などの構文型のプログラミング言語に慣れているのなら難しくないと思う。&lt;/p&gt;
&lt;p&gt;まずは1章から順に読むのがおすすめ。
「並行処理，&lt;a href=&#34;https://zenn.dev/activecore/articles/9862409de182c7&#34; title=&#34;エンジニア完全に理解した&#34;&gt;完全に理解した&lt;/a&gt;」という人も復習のつもりで順に読んでいくのがいいだろう。&lt;/p&gt;
&lt;h2&gt;並行と並列&lt;/h2&gt;
&lt;p&gt;以前，読書感想文で『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;Go言語による並行処理 | Katherine Cox-Buday, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;Go言語による並行処理&lt;/a&gt;』を&lt;a href=&#34;https://text.baldanders.info/remark/2018/11/concurrency-in-go/&#34; title=&#34;『Go 言語による並行処理』は Go 言語プログラマ必読書だろう&#34;&gt;大絶賛&lt;/a&gt;したのだが，その中の「2.1 並行性と並列性の違い」の中で&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;並行性はコードの性質を指し、並列性は動作しているプログラムの性質を指します。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『Go言語による並行処理』 p.23&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と書かれている。
『&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;Go言語で学ぶ並行プログラミング　他言語にも適用できる原則とベストプラクティス impress top gearシリーズ | James Cutajar, 柴田 芳樹 | 工学 | Kindleストア | Amazon&#34;&gt;Go言語で学ぶ並行プログラミング&lt;/a&gt;』では更に具体的に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;並行性とは、多くのタスクを同時にどのように実行するかを計画する（planning）ことです。並列性とは、多くのタスクを同時に実行する（performing）ことです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『Go言語で学ぶ並行プログラミング』 p.39&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と書かれている。
たとえば&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;em&gt;問. 「並行処理」と「並列処理」を使って文を書け&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;みたいな問題があったら&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;並行処理を組み込んだプログラムを書いて実行したところ正しく並列処理が行われた。&lt;/div&gt;
&lt;p&gt;みたいに回答するのがいいだろうか（笑）&lt;/p&gt;
&lt;p&gt;今回の&lt;a href=&#34;https://technical-book-reading-2.connpass.com/event/337562/&#34; title=&#34;第1回『Go言語で学ぶ並行プログラミング』オンライン読書会 - connpass&#34;&gt;読書会&lt;/a&gt;は第3章にかかった辺りまでだったが，今のところ『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;Go言語による並行処理 | Katherine Cox-Buday, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;Go言語による並行処理&lt;/a&gt;』よりは『&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;Go言語で学ぶ並行プログラミング　他言語にも適用できる原則とベストプラクティス impress top gearシリーズ | James Cutajar, 柴田 芳樹 | 工学 | Kindleストア | Amazon&#34;&gt;Go言語で学ぶ並行プログラミング&lt;/a&gt;』のほうがオススメな感じ。
まぁ，あとから出た本だからねぇ。&lt;/p&gt;
&lt;h2&gt;goroutine はグリーンスレッドではない&lt;/h2&gt;
&lt;p&gt;並行処理の仕組みとしてカーネルが用意している機能にはプロセスとスレッドがある。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;オペレーティングシステムの各プロセスは、他のプロセスから隔離された独自のメモリ空間を持っています。通常、プロセスは独立して動作し、他のプロセスとの相互作用は最小限です。プロセスは、多くの資源を消費する代償として、隔離を提供します。たとえば、あるプロセスがエラーでクラッシュしても、そのプロセスは独自のメモリ空間を持っているため、他のプロセスに影響を与えることはありません。この隔離の欠点は、多くのメモリを消費してしまうことです。さらに、メモリ領域やその他のシステム資源を確保する必要があるため、プロセスの起動には（スレッドに比べて）少し時間がかかります。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『Go言語で学ぶ並行プログラミング』 p.20&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;p&gt;新たなスレッドを作成する場合、オペレーティングシステムが作成する必要があるのは、スタック領域、レジスタ、プログラムカウンタを管理するのに十分な資源だけです。新たなスレッドは、同じプロセスのコンテキスト内で実行されます。対照的に、新たなプロセスを作成する場合、オペレーティングシステムはそれに完全に新たなメモリ空間を割り当てる必要があります。この理由から、スレッドはプロセスよりもはるかに軽量であり、システムが資源を使い果たすまでに、プロセスよりも多くのスレッドを作成することが通常可能です。さらに、新たに割り当てる資源がかなり少ないため、スレッドの起動はプロセスの起動よりもはるかに速いです。&lt;/p&gt;
&lt;p&gt;[&amp;hellip;]&lt;/p&gt;
&lt;p&gt;ただし、この追加の性能には、ある代償が伴います。同じメモリ空間で作業するということは、プロセスが提供する隔離が得られないことを意味します。そのため、あるスレッドが他のスレッドの作業に干渉して被害を与える可能性があります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『Go言語で学ぶ並行プログラミング』 p.25&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;各スレッドがどの CPU コアに割り当てられるかはカーネルが決定する。
このため上述のスレッドのことを特に「カーネルレベルスレッド」と呼ぶ。&lt;/p&gt;
&lt;p&gt;カーネルレベルスレッドがあるということはユーザー空間で完全にアプリケーションが制御する「ユーザーレベルスレッド」もあるわけだ。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;p&gt;ユーザーレベルスレッドの主な利点は性能です。ユーザーレベルスレッドのコンテキストスイッチは、カーネルレベルスレッドのコンテキストスイッチよりも高速です。なぜなら、カーネルレベルのコンテキストスイッチでは、オペレーティングシステムが介入して次に実行するスレッドを選択する必要があるからです。カーネルを呼び出さずに実行を切り替えることができれば、実行中のプロセスは、キャッシュをフラッシュして処理速度を低下させる必要がなく、CPU を保持し続けられます。&lt;/p&gt;
&lt;p&gt;ユーザーレベルスレッドを使うことの不都合な点は、ブロッキング I/O 呼び出しを行うコードを実行するときに現れます。ファイルからの読み込みが必要な状況を考えてみましょう。オペレーティングシステムはプロセスを 1 つの実行のスレッドと見なすため、ユーザーレベルスレッドがこのブロッキング読み込み呼び出しを実行すると、プロセス全体がスケジュールから外されます。同じプロセス内に他のユーザーレベルスレッドが存在する場合、読み込み操作が完了するまで、それらのスレッドは実行されません。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『Go言語で学ぶ並行プログラミング』 p.33-34&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;で， &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; の goroutine はどれやねん？ という話だが，実はカーネルレベルスレッドとユーザーレベルスレッドを組み合わせたハイブリッドな構成となっている。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go はハイブリッドシステムを採用することで、ユーザーレベルスレッドの優れた性能を提供し、不都合な点がほとんどありません。これは、カーネルレベルスレッドの集まりを使い、それぞれがゴルーチンのキューを管理することで実現しています。複数のカーネルレベルスレッドがあるので、複数のプロセッサが利用可能な場合、複数のプロセッサを利用できます。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『Go言語で学ぶ並行プログラミング』 p.34-35&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これを「M:N スレッディングモデル」と呼ぶ。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go がゴルーチンに使っているシステムは、M:N スレッディングモデル（threading model）と呼ばれることがあります。M:N とするのは M 個のユーザーレベルスレッド（ゴルーチン）がN 個のカーネルレベルスレッドにマッピングされている場合です。これは、通常のユーザーレベルスレッドとは対照的です。通常のユーザーレベルスレッドは、N:1 スレッディングモデルと呼ばれ、1 つのカーネルレベルスレッドに対して N 個のユーザーレベルスレッドという意味です。M:N モデルのランタイムを実装するには、カーネルレベルスレッドの集まり上でユーザーレベルスレッドを移動させてバランスを取るための多くの技法が必要なため、他のモデルよりも複雑になります。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『Go言語で学ぶ並行プログラミング』 p.35&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;一方で「グリーンスレッド」という言葉があるのだが，これは Java の用語らしい。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;グリーンスレッド（green thread）という用語は、プログラミング言語 Java のバージョン 1.1で生まれました 。Java のオリジナルのグリーンスレッドは、ユーザーレベルスレッドの実装でした。単一のコア上でのみ実行され、JVM によって完全に管理されていました 。Javaバージョン 1.3 では、グリーンスレッドはカーネルレベルスレッドに取って代わられました。それ以来、多くの開発者がユーザーレベルスレッドの他の実装を指すために用語「グリーンスレッド」を使っています。後述するように、Go のランタイムはゴルーチンが複数の CPU を十分に活用できるようにしているので、 Go のゴルーチンをグリーンスレッドと呼ぶのはおそらく不正確です。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『Go言語で学ぶ並行プログラミング』 p.34&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;へー。
よその記事で goroutine をグリーンスレッドと書いてる気がするなぁ。
直すの面倒だし，過去記事は放置で，これから気をつけることにしよう。&lt;/p&gt;
&lt;p&gt;ちなみに Java 21 からは &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; に似たスレッドモデルが正式に導入されていて，これは「仮想スレッド（virtual thread）」と呼ぶそうな。&lt;/p&gt;
&lt;h2&gt;Go のメモリモデル&lt;/h2&gt;
&lt;p&gt;翻訳者で&lt;a href=&#34;https://technical-book-reading-2.connpass.com/event/337562/&#34; title=&#34;第1回『Go言語で学ぶ並行プログラミング』オンライン読書会 - connpass&#34;&gt;読書会&lt;/a&gt;の主催者である&lt;a href=&#34;https://note.com/yoshiki_shibata&#34; title=&#34;柴田 芳樹｜note&#34;&gt;柴田芳樹&lt;/a&gt;さんが今回おっしゃっていたが（実は訳者あとがきでも言及されている），『&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;Go言語で学ぶ並行プログラミング　他言語にも適用できる原則とベストプラクティス impress top gearシリーズ | James Cutajar, 柴田 芳樹 | 工学 | Kindleストア | Amazon&#34;&gt;Go言語で学ぶ並行プログラミング&lt;/a&gt;』にはメモリモデルについての解説がない。
並行処理とメモリ共有は密接な関係があるのでメモリモデルについても解説があればよかったのに，という感じ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; のメモリモデルについては公式のドキュメントがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.dev/ref/mem&#34;&gt;The Go Memory Model - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このドキュメントの冒頭に&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://go.dev/ref/mem&#34;&gt;If you must read the rest of this document to understand the behavior of your program, you are being too clever.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://go.dev/ref/mem&#34;&gt;The Go Memory Model&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とか皮肉（？）な文章が書かれていて笑っちまったよ。&lt;/p&gt;
&lt;p&gt;それはともかく，中身をちょろんと紹介すると，たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というコードがあったとき “&lt;code&gt;hello, world&lt;/code&gt;” と出力されることが保証されるというもの。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://go.dev/ref/mem&#34;&gt;The go statement that starts a new goroutine is synchronized before the start of the goroutine&amp;rsquo;s execution.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://go.dev/ref/mem&#34;&gt;The Go Memory Model&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;「当たり前やんけ！」と思うかもしれないが &lt;code&gt;hello()&lt;/code&gt; 関数と &lt;code&gt;f()&lt;/code&gt; 関数が異なる CPU コアで並列に実行される場合，この「保証」はかなり重要である。&lt;/p&gt;
&lt;p&gt;マルチコアプロセッサでは（システムバスを通じて）メモリに直接アクセスするのではなく，メモリキャッシュを挟んだ間接的なアクセスになる。
この際に複数の CPU コアとメモリとの間にデータ競合が起きないよう「キャッシュ・コヒーレンシー・プロトコル（cache-coherency protocols）」が走るらしい。&lt;/p&gt;
&lt;p&gt;このプロトコルが正しく働いて CPU レベルでのデータ競合が起きないことが保証できないと，並行処理下で「何も信用できない」ことになってしまう。&lt;/p&gt;
&lt;p&gt;キャッシュ・コヒーレンシー・プロトコル周りの話を始めるとそれだけで本が書けるそうで，実際に紹介してもらったが，かなりの分量があって理解するのも大変とのこと。
たぶん『&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;Go言語による並行処理 | Katherine Cox-Buday, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;Go言語による並行処理&lt;/a&gt;』にメモリモデルの解説を入れると分量が1.5倍とか2倍とかになるんじゃないのかな（笑）&lt;/p&gt;
&lt;h2&gt;というわけで&lt;/h2&gt;
&lt;p&gt;次回以降の読書会も楽しみである。
記事にするかどうかは不明。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cutajarj/ConcurrentProgrammingWithGo&#34;&gt;GitHub - cutajarj/ConcurrentProgrammingWithGo: Listings from manning book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51wZEHUKZiL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go言語で学ぶ並行プログラミング　他言語にも適用できる原則とベストプラクティス impress top gearシリーズ&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;James Cutajar (著), 柴田 芳樹 (著)&lt;/dd&gt;
    &lt;dd&gt;インプレス 2024-12-04 (Release 2024-12-04)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0DNYMMBBQ (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://technical-book-reading-2.connpass.com/event/337562/&#34;&gt;読書会&lt;/a&gt;のために購入。インプレス社の本は Kindle 版より版元で &lt;a href=&#34;https://book.impress.co.jp/books/1123101144&#34;&gt;PDF 版&lt;/a&gt;を買うのがオススメ。「並行処理」について原理的な解説から丁寧に書かれている。 Go で解説されているが Go 以外の言語でも応用できる。
&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2025-01-25&#34;&gt;2025-01-25&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Go言語で学ぶ並行プログラミング --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0CFL1DK8Q?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51BmDUG6D0L._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0CFL1DK8Q?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go言語 100Tips ありがちなミスを把握し、実装を最適化する impress top gearシリーズ&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Teiva Harsanyi (著), 柴田 芳樹 (著)&lt;/dd&gt;
    &lt;dd&gt;インプレス 2023-08-18 (Release 2023-08-18)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0CFL1DK8Q (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://book.impress.co.jp/books/1122101133&#34;&gt;版元&lt;/a&gt;で PDF 版を購入可能。事実上の Effective Go とも言える充実の内容。オリジナルは敢えてタイトルに “tips” という単語を入れるのを避けたのに邦題が「100 Tips」とかなっていて，原作者がお怒りとの噂（あくまで噂）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2023-08-18&#34;&gt;2023-08-18&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Go言語 100Tips --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51pUKQajnaL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go言語による並行処理&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Katherine Cox-Buday (著), 山口 能迪 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2018-10-26&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873118468/&#34;&gt;Eブック版もある&lt;/a&gt;。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2018/11/concurrency-in-go/&#34;&gt;こちら&lt;/a&gt;。 Go 言語で並行処理を書くならこの本は必読書になるだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-01-13&#34;&gt;2020-01-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Go言語による並行処理 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;122&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。と思ったら絶版状態らしい（2025-01 現在）。復刊を望む！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0CX1NVW3F?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/414YsJmBYNL._SL160_.jpg&#34; width=&#34;120&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0CX1NVW3F?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;へぇ～ボタン 懐かし玩具 リセットボタン&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ノーブランド品&lt;/dd&gt;
    &lt;dd&gt;&lt;/dd&gt;
    &lt;dd&gt;B0CX1NVW3F (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;へーへーへー&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2025-01-25&#34;&gt;2025-01-25&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- へぇ～ボタン へーボタン --&gt;
&lt;h2&gt;作業中の BGV (メン限配信以外)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=kFH-KEZGYRk&#34;&gt;【MV】また、おかえり。／猫又おかゆ　ノベルゲーム『おかゆにゅ～～む！』OPテーマ - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a9kO512t5Vs&#34;&gt;ファッとして桃源郷 - 尾丸ポルカ(cover) - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DHAH4NBz8c4&#34;&gt;【民俗学 / 解説】蛇と関係しているってほんと？七福神「弁財天」の民俗学【VTuber/ #諸星めぐる 】 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cCI8YBhPsdo&#34;&gt;【 #大猫百桜 】俺たちの大富豪はこれからだ🤝🔥【 ホロライブ 】 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>「『大きすぎてつぶせない』というハック」</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2025/01/too-big-to-fail/" />
		<id>tag:text.Baldanders.info,2025-01-24:/remark/2025/01/too-big-to-fail/</id>
		<published>2025-01-24T11:39:07+00:00</published>
		<updated>2025-01-24T12:08:35+00:00</updated>
		<summary>今『ハッキング思考』は改めて読む価値のある本だと思うよ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;Bruce Schneier 先生の『&lt;a href=&#34;https://www.amazon.co.jp/dp/B0CK19L1HC?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;Amazon.co.jp: ハッキング思考　強者はいかにしてルールを歪めるのか、それを正すにはどうしたらいいのか eBook : ブルース・シュナイアー, 高橋 聡: Kindleストア&#34;&gt;ハッキング思考&lt;/a&gt;』に「『大きすぎてつぶせない』というハック」という見出しの章がある。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/B0CK19L1HC?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;一般の経営者や企業がリスクを判断するところを想像してみよう。成功したときの利益と、失敗したときのコストをはかりにかけ、最終的な決定ではどちらも検討するはずだ。それに対して、必要度が高すぎて破綻させられないとみなされている大企業の経営陣は、誤った判断を下した結果、避けようのないコストが発生したとしても、そのコストは納税者によって、つまりは社会全体によってまかなわれると分かっている。これは、リスクの高い意思決定を助長しかねないモラルハザードだ。うまくいけば、そうした大企業は得をする。うまくいかなったとしても、損はしないよう保護されている。「大きすぎてつぶせない」は、賭けに負けたときの保険なのである。市場システムを乱すことは間違いない。金と権力が生むひずみ。そして、ハックである。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0CK19L1HC?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『ハッキング思考』23章&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;最近「『大きすぎてつぶせない』というハック」について書かれた翻訳記事を見た。
例によってSF作家の Cory Doctorow 氏による記事の翻訳である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/monopoly/5236&#34;&gt;誰にも裁かれない裕福なメディケア詐欺師たち » p2ptk[.]org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じ。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://p2ptk.org/monopoly/5236&#34;&gt;&lt;p&gt;Lincareは何度もMedicare詐欺で有罪判決を受けてきた。今世紀に入ってからだけでも4回の保護観察処分を受け、再び違反すれば連邦政府との取引を永久に禁止されるという「死刑条項」が付されていた。しかしいずれのケースでも、Lincareは新たな詐欺を働き、それでも死刑条項が適用されることはなかった。&lt;/p&gt;
&lt;p&gt;なぜか。Lincareは「大きすぎて潰せない」存在だからだ。米国の医療システムは、世界一の高コストと最低水準のサービスで知られる奇妙な民営化システムだが、Medicareのような公的医療でさえ民間企業に依存している。人間の生存に不可欠な酸素供給を独占するLincareがMedicareから締め出されれば、文字通り無数の米国人が窒息してしまう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://p2ptk.org/monopoly/5236&#34;&gt;誰にも裁かれない裕福なメディケア詐欺師たち&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;まぁ，最後のオチは&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://p2ptk.org/monopoly/5236&#34;&gt;トランプ政権は間違いなく、米国の「最悪の企業」の一部を取り締まるだろう。「米国は腐敗している」と訴えて当選した唯一の候補者を選んだ、怒れる有権者たちの期待に応えるために。だがトランプ自身は、支持者への影響など関係なく、自分への忠誠度や妨害の有無によって標的を選ぶことを明言している。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://p2ptk.org/monopoly/5236&#34;&gt;誰にも裁かれない裕福なメディケア詐欺師たち&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;という感じに締めくくられているのだが（笑） 米国大統領選挙が終わりトランプ政権が復活した今『&lt;a href=&#34;https://www.amazon.co.jp/dp/B0CK19L1HC?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;Amazon.co.jp: ハッキング思考　強者はいかにしてルールを歪めるのか、それを正すにはどうしたらいいのか eBook : ブルース・シュナイアー, 高橋 聡: Kindleストア&#34;&gt;ハッキング思考&lt;/a&gt;』は改めて読む価値のある本だと思うよ。&lt;/p&gt;
&lt;ruby&gt;&lt;rb&gt;閑話休題&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;それはさておき&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;
&lt;p&gt;私はもうテレビを全く見てないし，最近 Mastodon や Bluesky の TL でチラホラ見かける某芸能人の不祥事やそれに絡むテレビ局の騒動に微塵も興味はないのだが，見かけるたびに思い出すのが2007年の関西テレビの不祥事だ。
なんせ20年近く前の話なので若い人は知らないかもしれないが。&lt;/p&gt;
&lt;p&gt;当時は電波免許を取り上げろみたいな論調も強かったし一時期は民放連から除名されたこともあったけど，結局翌年には民放連に再加入してるし総務省も「警告」はしたけど電波を取り上げることはしなかった。
まさに「大きすぎて潰せない」ってやつだ。
まぁ，該当する番組は打ち切りになったし関係者の何人かの首は切られたんだろうけど，概ね「何も変わらなかった」と言っていいだろう。&lt;/p&gt;
&lt;p&gt;今回も広告主が抜けたあとはAC某で埋めてるって話だし&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，引退が云々とか言ってる某芸能人も離れた広告主も，ほとぼりが冷めたらしれっと帰ってくるんだろう。
電波を取り上げろみたいな議論も聞かないし，他テレビ局等もゴシップ以上の扱いではなさそうだし（深くツッコんだら「おまえがゆーな」とか言われて藪蛇だろうし。巳年だけにw）
騒ぐだけ騒いで「何も変わらない」という点では，今回もえっと変わらんっちうわけだ，多分。&lt;/p&gt;
&lt;p&gt;どんなメディアでも同じだけど，見る（聞く）側から見れば，その情報の価値なんて「噂」と同程度ってことよねー。
人間社会ってのはまっこと業が深い&amp;hellip;&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0CK19L1HC?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41iX72RfUuL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0CK19L1HC?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ハッキング思考　強者はいかにしてルールを歪めるのか、それを正すにはどうしたらいいのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 高橋 聡 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2023-10-12 (Release 2023-10-12)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0CK19L1HC (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Kindle 版が出てた！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2023-11-21&#34;&gt;2023-11-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ハッキング思考 Kindle 版 --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;営利企業が広告を引き上げてるのにAC某の支援団体はこの事態に文句を言ったりしないのかな？ テレビに映れば背景はどうでもいいとかかな？&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>ソーシャルメディアは億万長者から逃げ切れるか？</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2025/01/escape-from-billionaires/" />
		<id>tag:text.Baldanders.info,2025-01-15:/remark/2025/01/escape-from-billionaires/</id>
		<published>2025-01-15T13:41:44+00:00</published>
		<updated>2025-01-24T11:47:24+00:00</updated>
		<summary>タイトルは釣り</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;面白い翻訳記事を立て続けに見たので，今回はこれをネタに戯れ言を書いてみる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/freedom-of-speech/5174&#34;&gt;Free Our Feeds：ソーシャルメディアを億万長者の支配から解放するために力を貸してくれないか » p2ptk[.]org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/freedom-of-speech/5176&#34;&gt;「広場」は誰のものでもない、みんなのものであるべきだ » p2ptk[.]org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの記事を並べて載せる &lt;a href=&#34;https://p2ptk.org/&#34; title=&#34;P2Pとかその辺のお話R | Sharing is Caring&#34;&gt;p2ptk.org&lt;/a&gt; は相変わらず流石だなぁ，と思う。&lt;/p&gt;
&lt;h2&gt;AT Protocol を億万長者から守れ！&lt;/h2&gt;
&lt;p&gt;（原文: &lt;a href=&#34;https://freeourfeeds.com/&#34; title=&#34;Free Our Feeds&#34;&gt;Free Our Feeds – Save Social Media From Billionaire Capture.&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;プラットフォームあるいはアプリケーションとしての Bluesky と基盤技術である AT Protocol は開発体制としては不可分になっている。
今のところはこれでも問題なく運営できているが，プロトコルを私企業に握られている状況は将来に不安があるため AT Protocol を独立させようという動きがあるようだ。
このための資金として，まずは4M米ドルの調達を目指すらしい。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://p2ptk.org/freedom-of-speech/5174&#34;&gt;&lt;p&gt;資金は以下の目的で調達される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BlueskyのベースとなるテクノロジーであるAT Protocolを億万長者の支配から守るために活動する公益財団の設立。&lt;/li&gt;
&lt;li&gt;独立したホスティングインフラ（第2の「リレー」）の構築。これにより、Blueskyのユーザ、開発者、研究者は、今後同社がどのような決定を下そうとも、コンテンツとデータのストリームに完全にアクセスできる。&lt;/li&gt;
&lt;li&gt;開発者への資金提供。これにより、オープンプロトコル上に多様なソーシャルアプリケーションを構築し、ソーシャルメディアをより健全で幸せな場所にすることができる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今こそ、ソーシャルメディアを解放する時だ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://p2ptk.org/freedom-of-speech/5174&#34;&gt;Free Our Feeds：ソーシャルメディアを億万長者の支配から解放するために力を貸してくれないか&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;たとえば ActivityPub は2018年早々に &lt;a href=&#34;https://www.w3.org/TR/2018/REC-activitypub-20180123/&#34; title=&#34;ActivityPub - W3C Recommendation 23 January 2018&#34;&gt;W3C 勧告&lt;/a&gt;となっている。
AT Protocol も何らかの形で標準化していくのが正しい道筋だと思う。
そのためには実績を作らなくちゃね&lt;abbr class=&#34;emoji-chars&#34; title=&#34;はぁと&#34;&gt;💛&lt;/abbr&gt; というところだろう。&lt;/p&gt;
&lt;p&gt;Facebook や Instagram を擁する Meta が Pixelfed サーバへのリンクを&lt;a href=&#34;https://gigazine.net/news/20250114-meta-block-link-pixelfed/&#34; title=&#34;MetaがInstagram風の写真共有SNS「Pixelfed」へのリンクをブロック中 - GIGAZINE&#34;&gt;ブロックしている&lt;/a&gt;という話も聞くし，マイクロブログだけでなく写真や動画といったものについても AT Protocol ベースのサービスが登場すれば面白いのに，とか思ったりする。&lt;/p&gt;
&lt;h2&gt;Mastodon を「所有」から解放する&lt;/h2&gt;
&lt;p&gt;（原文: &lt;a href=&#34;https://blog.joinmastodon.org/2025/01/the-people-should-own-the-town-square/&#34;&gt;The people should own the town square - Mastodon Blog&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;もうひとつは Mastodon の話。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://p2ptk.org/freedom-of-speech/5176&#34;&gt;端的に言えば、Mastodonのエコシステムとプラットフォームの主要コンポーネント（名称や著作権などの資産を含む）の所有権を新しい非営利組織に移管し、Mastodonが特定の個人によって所有または管理されるべきではないという意図を明確にします。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://p2ptk.org/freedom-of-speech/5176&#34;&gt;「広場」は誰のものでもない、みんなのものであるべきだ&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;個人的には &lt;a href=&#34;https://www.fediscovery.org/&#34; title=&#34;Fediverse Discovery Providers&#34;&gt;Fediscovery&lt;/a&gt; プロジェクトの話は知らなかったので興味を引いた。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://p2ptk.org/freedom-of-speech/5176&#34;&gt;より直感的で使いやすいインターフェースを目指すとともに、&lt;a href=&#34;https://www.fediscovery.org/&#34;&gt;Fediscovery&lt;/a&gt;プロジェクトも前進させています。これは、Mastodonが主導し、NGI Searchの支援を受けて開発している、プライバシーに配慮したFediverse全体の検索ツールです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://p2ptk.org/freedom-of-speech/5176&#34;&gt;「広場」は誰のものでもない、みんなのものであるべきだ&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Mastodon というか ActivityPub は検索機能が弱く&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，特にサーバ横断的な検索ができないのが不便ではある（公開された投稿であってもインデックス化されるのを嫌うユーザもいるので，一概にダメとは言えないが）。
&lt;a href=&#34;https://www.fediscovery.org/&#34; title=&#34;Fediverse Discovery Providers&#34;&gt;Fediscovery&lt;/a&gt; プロジェクトでこの辺が改善されるのであればありがたい。&lt;/p&gt;
&lt;h2&gt;ソーシャルメディアは億万長者から逃げ切れるか？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://freeourfeeds.com/&#34; title=&#34;Free Our Feeds&#34;&gt;Free Our Feeds&lt;/a&gt; も Mastodon も運営のための寄付を募っている。
億万長者の害意に対抗するにはお金が必要だからね。
日本では税控除の対象にならないだろうけど，よろしかったらどうぞって感じかな。&lt;/p&gt;
&lt;p&gt;私は &lt;a href=&#34;https://fedibird.com/&#34; title=&#34;Fedibird&#34;&gt;Fedibird&lt;/a&gt; に対しては継続的に&lt;a href=&#34;https://opencollective.com/fedibird-infrastructure&#34; title=&#34;Fedibird Infrastructure - Open Collective&#34;&gt;寄付&lt;/a&gt;を行っている。
まぁ，微々たる金額だけど。
こちらは &lt;a href=&#34;https://fedibird.com/&#34; title=&#34;Fedibird&#34;&gt;Fedibird&lt;/a&gt; のサーバ維持に限定したものなので Mastodon 全体の運営に寄付するなら別口で考えないとなぁ。&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&#34;https://text.baldanders.info/remark/2025/01/2024-mosaic-retrospective/&#34; title=&#34;パズルで2024年を振り返る&#34;&gt;紹介&lt;/a&gt;した “&lt;a href=&#34;https://store.steampowered.com/app/3380760/2024_Mosaic_Retrospective/&#34; title=&#34;2024: Mosaic Retrospective on Steam&#34;&gt;2024: Mosaic Retrospective&lt;/a&gt;” で遊びながら2024年を振り返ったりしているのだが，現職大統領が辞職間際に有罪判決を受けた自分の息子を恩赦した（2024年当時）とか有罪判決を受けたにも関わらず当選した次期大統領が就任後に自身を恩赦する（2024年当時）とかいうニュースを見て，米国は本当に破落戸の国になったんだなぁと感慨深かった。
政治トップが破落戸なら市場も安心して破落戸になれるというものである（笑） 億万長者が所有するソーシャルメディアも，どこぞの世紀末漫画よろしく「汚物は消毒だ～!!」とばかりに立ち塞がるものを蹴散らしていく。&lt;/p&gt;
&lt;p&gt;Bluesky は英国で Mastodon は独国だっけ&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;？ 逃げ切れるといいねぇ。&lt;/p&gt;
&lt;p&gt;私は Mastodon 個人サーバという離れ小島でお一人さま生活を満喫しつつ&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，対岸の火事を眺めることにしよう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wired.jp/article/plaintext-meta-zuckerberg-maga-trump/&#34;&gt;メタ、「MAGA」になる──ファクトチェック廃止で、ヘイトスピーチ増加に懸念 | WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/freedom-of-speech/5153&#34;&gt;弱者をいたぶるためのMetaのポリシー変更――表現の自由のために真になすべきこと » p2ptk[.]org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketing.itmedia.co.jp/mm/articles/2501/10/news045.html&#34;&gt;Xがアルゴリズム変更へ　イーロン・マスク氏が優遇したい投稿とは？：Social Media Today - ITmedia マーケティング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20250114-free-our-feeds/&#34;&gt;ソーシャルメディアを億万長者の魔の手から守るキャンペーン「Free Our Feeds」が登場 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20250114-mastodon-transition-nonprofit-structure/&#34;&gt;Mastodonが運営の大部分を非営利団体に移管することを発表 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/freedom-of-speech/5178&#34;&gt;インターネットをビリオネアの手から守るために » p2ptk[.]org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/freedom-of-speech/5241&#34;&gt;Blueskyに参加する前に知っておくべきこと » p2ptk[.]org&lt;/a&gt; : EFF による2025年初頭時点での Bluesky 評価&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.technologyreview.jp/s/354065/we-need-to-protect-the-protocol-that-runs-bluesky/&#34;&gt;MIT Tech Review: SNSは億万長者から解放されるか？ Blueskyが描くネットの理想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;作業中の BGV (メン限配信以外)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uq9V7WlnczQ&#34;&gt;【民俗学】今年の干支は巳！カオスな蛇の民俗学！【VTuber/ #諸星めぐる 】 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gWo7tfVcM7Q&#34;&gt;【雑談】いろいろ始まりました！ちょっとまつたけ～！！！【儒烏風亭らでん #ReGLOSS 】 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DHjJPACJZnQ&#34;&gt;【雑談】ゲリラでごめんね！新成人おめでとう！乾杯！🍻【古代日本史VTuber きら子】 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Mastodon は標準では全文検索機能を持っていない。ただし &lt;a href=&#34;https://fedibird.com/&#34; title=&#34;Fedibird&#34;&gt;Fedibird&lt;/a&gt; のように独自に全文検索機能を実装しているサーバもある。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Mastodon については，米国非営利法人（501(c)(3)）は引き続き資金調達の拠点として残すが，運営主体としては欧州に本部を置いて運営するらしい。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;以前に &lt;code&gt;mastodon.social&lt;/code&gt; でボット・アカウントを作り運用してたのだが &lt;a href=&#34;https://text.baldanders.info/remark/2024/05/a-string-of-mastodons/#ban&#34; title=&#34;mastodon.social ボット・アカウントを BAN された話&#34;&gt;BAN されてしまった&lt;/a&gt;。特にルールに違反してはいないと思うのだが，理由は示されず，抗弁するのも面倒。結局，自分のやりたいようにやるには個人サーバを立てるしかないと思い今に至る。 Mastodon サーバは世界中に数多あるが，特定言語以外 NG なサーバも多いし利用目的を限定しているサーバもある。それでも私のように個人でお一人さまサーバを立ち上げることも容易になったし Mastodon サーバ間でアカウントを移行するのが容易というのは十分なメリットだと思っている。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>「うるう秒は時代遅れ？」</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2025/01/should-we-abandon-the-leap-second/" />
		<id>tag:text.Baldanders.info,2025-01-04:/remark/2025/01/should-we-abandon-the-leap-second/</id>
		<published>2025-01-04T13:31:23+00:00</published>
		<updated>2025-01-05T03:04:59+00:00</updated>
		<summary>「日経サイエンス」2025年2月特大号より</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0D47FY7Q3?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;日経サイエンス2025年2月特大号 [雑誌] | 日経サイエンス | 趣味・その他 | Kindleストア | Amazon&#34;&gt;「日経サイエンス」2025年2月号&lt;/a&gt;の Kindle 版が出てたのでポチって読む。
これって紙版と同時にリリースしてくれないのかなぁ。
私はお金を出して資源ゴミを買う趣味はないので，紙の雑誌はなるべく買いたくないのよ。&lt;/p&gt;
&lt;p&gt;特集記事以外では「&lt;a href=&#34;https://www.nikkei-science.com/202502_100.html&#34; title=&#34;うるう秒は時流遅れ？ | 日経サイエンス&#34;&gt;うるう秒は時代遅れ？&lt;/a&gt;」が面白かった。
挿し絵を含めて4ページほどの短い記事。&lt;/p&gt;
&lt;p&gt;念のために説明すると私達が日常で使っている時刻系には大きく恒星時系と原子時系の2つがある。
恒星時系は UT (universal time; 世界時) に代表される地球の自転を基準にした時刻系で原子時系は TAI (international atomic time; 国際原子時) に代表される原子時計（SI秒）を基準にした時刻系である。
恒星時系は地球上の日周運動とリンクしているため日常生活にマッチしているが，一定の時間を刻まず，また観測値であるため未来時刻の予測ができない。
原子時系は一定の時間を刻む&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; が恒星時系との乖離が発生する。&lt;/p&gt;
&lt;p&gt;UT と TAI とのギャップを埋めるために考えられたのが UTC (coordinated universal time; 協定世界時) である。
現在の UTC は原子時系の一種で1972年1月1日から TAI と10秒差で開始された&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
以後 UTC は TAI との差が整数秒かつ UT1&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; との差が0.9秒より大きくならないよう適宜調整されている（$|UT1-UTC| \leq 0.9^\,\mathrm{sec}$）。
この時刻調整が閏秒。
閏秒の予測はできないが，挿入または差し引かれる半年前にはアナウンスがある。&lt;/p&gt;
&lt;p&gt;実は&lt;a href=&#34;https://text.baldanders.info/remark/2016/11/leap-second-2017/&#34; title=&#34;2017年直前の閏秒について&#34;&gt;2017年直前の閏秒挿入&lt;/a&gt;以来，閏秒は発生していない。
&lt;a href=&#34;https://www.nikkei-science.com/202502_100.html&#34; title=&#34;うるう秒は時流遅れ？ | 日経サイエンス&#34;&gt;件の記事&lt;/a&gt;によると2029年までは発生しないだろうと試算されて，しかもこのときは1秒が差し引かれる閏秒になるんだそうな。&lt;/p&gt;
&lt;p&gt;地球の自転は潮汐摩擦により遅くなっていく傾向にあるが（恐竜が生きてた時代は1日が23.5時間ほどだったとか），1990年頃から逆に加速しているらしい。
加速している理由は地球温暖化により極地で地殻を押さえつけていた氷が融けて地球の形状が（より球に近く）変わったせいなんだとか。
でもこれは一時的なもので，融解した水が赤道付近に集まれば再び自転速度は遅くなるそうな。&lt;/p&gt;
&lt;p&gt;UTC が開始された頃は閏秒のインパクトはそれほど大きくなかった。
しかしコンピュータ・ネットワークが発達し，更にチップの処理単位もマイクロ秒あるいはナノ秒といった桁で処理されるようになり，閏秒のインパクトが馬鹿にならなくなってきた。
特に2012年の閏秒では実際にあちこちのサービスで不具合が発生し大騒ぎになった。
今や閏秒は可用性リスク要因となっているのだ。
これにより「ホンマに閏秒って要るの？」という議論がされるようになった。&lt;/p&gt;
&lt;p&gt;仮に閏秒を入れずに UT とのギャップをスルーしたとしても100年で1分程度の差にしかならないらしい。
それなら100年ごとに閏分を入れるとか，いっそ時刻調整なんか止めちまえとかいった主張が出るのも無理からぬ話である。&lt;/p&gt;
&lt;p&gt;そこで2022年の国際度量衡総会で閏秒の調整を2035年まで行わないことに決めたんだそうな（廃止ではない）。
それまでにどういうルールで調整するのか決めるということで，ぶっちゃけ問題の先送りである（笑）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nikkei-science.com/202502_100.html&#34; title=&#34;うるう秒は時流遅れ？ | 日経サイエンス&#34;&gt;件の記事&lt;/a&gt;にあるように時刻調整が20年ごととか100年ごとになるのか，それとも廃止になるのかは分からない。
たぶん100年後って今のようなコンピュータは存在しないんじゃないのかな？ それならいっそ閏秒なんか止めちまえば？ とか最近は思うようになった。
だって閏秒のたびに不具合が起きないよう起きても即座に対処できるよう大量の人員を配置するんだぜ。
費用対効果の観点からも無駄の極みだよな（こういうのこそ AI が肩代わりしてくれないものだろうか）。&lt;/p&gt;
&lt;p&gt;さて，どうなるやら。&lt;/p&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0D47FY7Q3?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/514G8lxv3GL._SL160_.jpg&#34; width=&#34;120&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0D47FY7Q3?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;日経サイエンス2025年2月特大号 [雑誌]&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;日経サイエンス (編集)&lt;/dd&gt;
    &lt;dd&gt;日経サイエンス 2024-12-25 (Release 2024-12-25)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0D47FY7Q3 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;固定レイアウトなので&lt;a href=&#34;https://read.amazon.co.jp/&#34;&gt;ブラウザ&lt;/a&gt;で読める。この巻の特集は「科学者に迫る人工知能」と「めざすは月」。あと閏秒の小さな記事が面白かった。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2025-01-04&#34;&gt;2025-01-04&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 「日経サイエンス」2025年2月号 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4416723660?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/317XDfcuC0L._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4416723660?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;天文年鑑 2025年版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;天文年鑑編集委員会 (編集)&lt;/dd&gt;
    &lt;dd&gt;誠文堂新光社 2024-12-05 (Release 2024-12-05)&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4416723660 (ASIN), 9784416723661 (EAN), 4416723660 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;天文ファン必携。2025年版。これが届くと年末って感じ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2024-12-05&#34;&gt;2024-12-05&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 天文年鑑 2025年版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621304259?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51bBPM6dbwL._SL160_.jpg&#34; width=&#34;114&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621304259?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;理科年表 2020&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;国立天文台 (編集)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2019-11-20&lt;/dd&gt;
    &lt;dd&gt;文庫&lt;/dd&gt;
    &lt;dd&gt;4621304259 (ASIN), 9784621304259 (EAN), 4621304259 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;日本における令和への改元や国際単位系（SI）の定義改定などに関するトピックを多く掲載。2020年版は（保存用として）買いかも。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-12-08&#34;&gt;2019-12-08&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 理科年表 2020 --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;厳密には相対論効果があるため（観測者との位置関係によっては）一定ではない。相対論効果を考慮した時刻系を座標時系と呼ぶ。座標時系は天文学の厳密な力学計算で用いられる。また原子時系のひとつである TAI は，実は座標時系の一種として再定義されている。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;1972年より前にも UTC は存在したが，現在とは異なるルール（1秒の長さを意図的に変える）で運用されていた。これが破綻したため現在の UTC になった。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;簡単に言うと &lt;a href=&#34;https://www.gsi.go.jp/uchusokuchi/vlbi-about.html&#34; title=&#34;VLBIとは | 国土地理院&#34;&gt;VLBI (Very Long Baseline Interferometry; 超長基線電波干渉法)&lt;/a&gt; などを使った観測により求められた生の値が UT0。そこから地球自転軸の極運動等の効果（これも観測により求める）を差し引いたものが UT1 である。さらにそこから年間の自転速度の進み遅れを調整した UT2 もあるのだが，現在 UT2 は運用されていない？&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>書きたくないときには書かなくていい</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2024/12/input-output/" />
		<id>tag:text.Baldanders.info,2024-12-28:/remark/2024/12/input-output/</id>
		<published>2024-12-28T08:39:01+00:00</published>
		<updated>2024-12-29T13:21:24+00:00</updated>
		<summary>大事なのは好奇心を錆びつかせないこと</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;皆さま，年末をいかがお過ごしでしょうか。
勤務先は&lt;a href=&#34;https://text.baldanders.info/remark/2023/12/bonenkai/&#34; title=&#34;はじめての一泊忘年会&#34;&gt;昨年&lt;/a&gt;と同じく温泉旅館で一泊忘年会を行いましたよ。
ただし今年は皆生温泉へ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54229882215/&#34;&gt;&lt;img src=&#34;./54229882215_3c32d3255e_e.jpg&#34; srcset=&#34;./54229882215_3c32d3255e_e.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;皆生温泉上がりのコーヒー牛乳（白バラ） | Flickr&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54229882215/&#34;&gt;皆生温泉上がりのコーヒー牛乳（白バラ） | Flickr&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54229724428/&#34;&gt;&lt;img src=&#34;./54229724428_5a643384fe_e.jpg&#34; srcset=&#34;./54229724428_5a643384fe_e.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;宴会場 机と椅子助かる | Flickr&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54229724428/&#34;&gt;宴会場 机と椅子助かる | Flickr&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ruby&gt;&lt;rb&gt;閑話休題&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;それはさておき&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;
&lt;p&gt;今回は Bluesky で見かけた記事をネタに戯れ言を書いてみる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/moroi/items/e39fb42172bfe2d4d209&#34;&gt;なぜ俺たち中年はアウトプットできなくなったのか #ポエム - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bookplus.nikkei.com/atcl/column/121100449/121100003/&#34;&gt;「本を読んでいれば、教養が身に付く」は勘違い　本物の教養とは | 日経BOOKプラス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「俺たち」ゆーな（笑） ぶっちゃけ「時間」はつくるものだし。
以上！&lt;/p&gt;
&lt;p&gt;&amp;hellip;では面白くないので続きを。&lt;/p&gt;
&lt;p&gt;この辺の記事を読んでて思い出したのは『&lt;a href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Effective Java&lt;/a&gt;』や『&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go&lt;/a&gt;』の翻訳でおなじみ柴田芳樹さんが挙げておられる以下のイメージ図だ（グラフっぽいけど定量評価ではない）。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39; cite=&#34;https://yshibata.blog.ss-blog.jp/2010-01-27&#34;&gt;
&lt;a href=&#34;https://yshibata.blog.ss-blog.jp/2010-01-27&#34;&gt;&lt;img src=&#34;https://yshibata.c.blog.ss-blog.jp/_images/blog/_d3f/yshibata/E68890E995B7E382ABE383BCE38396.JPG&#34; srcset=&#34;https://yshibata.c.blog.ss-blog.jp/_images/blog/_d3f/yshibata/E68890E995B7E382ABE383BCE38396.JPG 1057w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ソフトウェアエンジニアの成長カーブ（２）：柴田 芳樹 (Yoshiki Shibata)：SSブログ&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://yshibata.blog.ss-blog.jp/2010-01-27&#34;&gt;ソフトウェアエンジニアの成長カーブ（２）：柴田 芳樹 (Yoshiki Shibata)：SSブログ&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;この図について教えてもらったのは，とある読書会の雑談でだったが，その時の話がこんな感じだった。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;/remark/2022/12/09-san-in/&#34;&gt;&lt;p&gt;この図が示すのは，会社から与えられている仕事に慣れて自律的に「学ぶ」ことを止めてしまうと，手持ちのスキルは（時代の流れで）先細りし，さらに学習習慣が失われることにより新たな技術・スキルを得る機会を逸してしまうため，全体としてスキルレベルが低下してしまう，というものです。&lt;/p&gt;
&lt;p&gt;特に日本企業は従業員の「今」のスキルレベルに合わせて「できそうな仕事」を見繕って割り振る傾向があり，所属部署から与えられる仕事をこなすことに満足しているとあっという間にスキルが先細りしてしまう，というような話を読書会でもしていました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/12/09-san-in/&#34;&gt;松江に出戻り5度目の冬（Advent Calendar）&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ちなみに縦軸の「&lt;a href=&#34;http://yshibata.blog.so-net.ne.jp/2010-01-11&#34; title=&#34;技術者のレベルとソフトウェア開発の難易度（２）&#34;&gt;ソフトウェア・スキル・インデックス&lt;/a&gt;」については『&lt;a href=&#34;https://www.amazon.co.jp/dp/B0CCY7VJ4C?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラマー“まだまだ”現役続行&lt;/a&gt;』に詳しく書かれているので是非ご一読を&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;自身の話で恐縮だが，私は思考が言語的じゃないのよ。
だから「文章を書く」というのは思考を言語に翻訳する作業なのだ（ブログ記事は意図的に文体を崩して書いてるけど&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;）。
と同時にインプットした（と思ってる）ことを振り返る機会でもある。
これはプログラミングでも同じ。
思考を言語化することで理解の解像度が上がるし，見落としてたことにも気付ける。&lt;/p&gt;
&lt;p&gt;最初に挙げたイメージ図にもある通り，エンジニアの学習・勉強は現役でいるかぎり続くものだけど，続けるための最大のモチベーションは「それ」を楽しめるか否かだと思う。
ただ（仕事はともかく）個人の趣味・興味・関心は歳を重ねるごとに移り変わって当たり前である。
なのにアウトプットは若い頃と同じなんてありえない。&lt;/p&gt;
&lt;p&gt;大事なのは好奇心を錆びつかせないことなので，一時的にアウトプットを止めてインプットに専念していいと思うし疲れたならインプットも休んでいいと思う。
まぁ，休むのなら期限を切ったほうがいいだろうけど。&lt;/p&gt;
&lt;p&gt;私なんて今年このブログで書いた Go 関連の記事は&lt;a href=&#34;https://text.baldanders.info/golang/pseudo-random-number-generator-v2/&#34; title=&#34;Go 1.22 における疑似乱数生成器&#34;&gt;一本&lt;/a&gt;だけだぜ。
年間の記事数はそう変わらないと思うけど。
松江に &lt;ruby&gt;&lt;rb&gt;帰郷&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;かえ&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;って自転車を再開して明らかに趣味が変わったもんな（笑）&lt;/p&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/B0C9Z7KGRN?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;はじめて学ぶ ビデオゲームの心理学&lt;/a&gt;』にも書いてあるぢゃん。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;年齢に関わらず、遊びは私たちの精神を鋭敏に保つために重要です。 [&amp;hellip;] 遊ぶことは学ぶことです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4571210450?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『はじめて学ぶ ビデオゲームの心理学』 p.71&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;って。&lt;/p&gt;
&lt;p&gt;来年は『&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go言語で学ぶ並行プログラミング&lt;/a&gt;』の&lt;a href=&#34;https://technical-book-reading-2.connpass.com/event/337562/&#34; title=&#34;第1回『Go言語で学ぶ並行プログラミング』オンライン読書会 - connpass&#34;&gt;読書会&lt;/a&gt;が始まるし CVSSv4 の実装もいい加減始めないとなぁ&amp;hellip;&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41WZElZb9eL._SL160_.jpg&#34; width=&#34;128&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Effective Java 第3版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Joshua Bloch (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2018-10-30&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-03-17&#34;&gt;2021-03-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Effective Java 第3版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;122&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。と思ったら絶版状態らしい（2025-01 現在）。復刊を望む！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0CCY7VJ4C?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51mZrPkoejL._SL160_.jpg&#34; width=&#34;109&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0CCY7VJ4C?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラマー&amp;#34;まだまだ&amp;#34;現役続行 技評SE選書&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;柴田 芳樹 (著)&lt;/dd&gt;
    &lt;dd&gt;技術評論社 2023-08-01 (Release 2023-08-01)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0CCY7VJ4C (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;初版は2006年。当時は「プログラマ35歳定年説」とか言われてた頃で，仕事でも「私はコード読めないので」とか平気で言う SE がいたりした。この本はそういう風潮に対するアンチテーゼになっていたわけだ。ただし中身は今でも十分通用すると思う。奇抜な内容ではないが，こういうのは継続することが重要だからなぁ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2023-08-01&#34;&gt;2023-08-01&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラマー&#34;まだまだ&#34;現役続行 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0C9Z7KGRN?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41LvknHYLwL._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0C9Z7KGRN?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX）&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;セリア ホデント (著), 山根 信二（監修） (著), 山根 信二 (翻訳), 成田 啓行 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;福村出版 2022-12-15 (Release 2023-07-03)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0C9Z7KGRN (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Kindle 版が出ている。ゲームデザイナやゲームエンジニアだけでなく，ソフトウェア・エンジニアは全員読むべき。あと，ゲーマーな人も読むといいよ。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2023/04/the-psychology-of-video-games/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2023-11-21&#34;&gt;2023-11-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- はじめて学ぶ ビデオゲームの心理学 Kindle 版 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51wZEHUKZiL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0DNYMMBBQ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go言語で学ぶ並行プログラミング　他言語にも適用できる原則とベストプラクティス impress top gearシリーズ&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;James Cutajar (著), 柴田 芳樹 (著)&lt;/dd&gt;
    &lt;dd&gt;インプレス 2024-12-04 (Release 2024-12-04)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0DNYMMBBQ (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://technical-book-reading-2.connpass.com/event/337562/&#34;&gt;読書会&lt;/a&gt;のために購入。インプレス社の本は Kindle 版より版元で &lt;a href=&#34;https://book.impress.co.jp/books/1123101144&#34;&gt;PDF 版&lt;/a&gt;を買うのがオススメ。「並行処理」について原理的な解説から丁寧に書かれている。 Go で解説されているが Go 以外の言語でも応用できる。
&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2025-01-25&#34;&gt;2025-01-25&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Go言語で学ぶ並行プログラミング --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/B0CCY7VJ4C?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラマー“まだまだ”現役続行&lt;/a&gt;』が最初に出たのは2006年。当時は「プログラマ35歳定年説」とか言われてた頃で，仕事でも「私はコード読めないので」とか平気で言う SE がいたりした。この本はそういう風潮に対するアンチテーゼになっていたわけだ。ただし中身は今でも十分通用すると思う。奇抜な内容ではないが，こういうのは継続することが重要だからなぁ。ちなみに著者の柴田芳樹さんは既に&lt;a href=&#34;https://note.com/yoshiki_shibata/n/n86d730f758e5&#34; title=&#34;65歳になりました｜柴田 芳樹&#34;&gt;65歳&lt;/a&gt;とのことだが，今も「&lt;a href=&#34;https://note.com/yoshiki_shibata/n/n1489871a51ac&#34; title=&#34;カウシェでのAPI仕様整備と効率的なバックエンド開発の実現｜柴田 芳樹&#34;&gt;現役&lt;/a&gt;」だそうだ。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;かっちりした文章は仕事でアホほど書いてるし。仕事以外で真面目な文章なんて書きたくない。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>「ミリしら」で KeebWorld Conference 2024 へ行ってみた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2024/12/keebworld-conference-2024/" />
		<id>tag:text.Baldanders.info,2024-12-07:/remark/2024/12/keebworld-conference-2024/</id>
		<published>2024-12-07T14:27:29+00:00</published>
		<updated>2024-12-08T00:06:25+00:00</updated>
		<summary>ただ聴きに来ただけという感じになってしまった。発表に対して何を質問していいのかすら分からん</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;h2&gt;「ミリしら」で KeebWorld Conference 2024 へ行ってみた&lt;/h2&gt;
&lt;p&gt;最初に予防線を張っておくと，私は自作キーボードとか全く知らないのよ。
そりゃ，そういうことをする人たちがいるのは知ってるよ。
でも，それだけ。
でもまぁ，せっかく松江でやるってのなら見てみたいし，そもそも技術系のオフラインイベントが「コロナ」以降では初参加なので&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，リハビリにはなるかなぁと（笑）&lt;/p&gt;
&lt;p&gt;毎年松江市内で RubyWorld Conference が開かれるが，今年はその流れで&lt;a href=&#34;https://2024.rubyworld-conf.org/&#34; title=&#34;RubyWorld Conference 2024&#34;&gt;カンファレンス&lt;/a&gt;の翌日の今日に開催された。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://keebkaigi.org/2024/&#34;&gt;KeebWorld Conference 2024 松江&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さっそく松江駅前の&lt;a href=&#34;https://team-place.com/space/494&#34; title=&#34;松江オープンソースラボ | TeamPlace - 「人でつながる」ワークプレイスプラットフォーム&#34;&gt;オープンソースラボ&lt;/a&gt;まで出かける。
自転車は&lt;a href=&#34;https://text.baldanders.info/remark/2024/12/overhaul/#overhaul&#34; title=&#34;自転車をオーバーホールに出した&#34;&gt;オーバーホール&lt;/a&gt;に出してるので公共交通機関で。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54188441314/&#34;&gt;&lt;img src=&#34;./54188441314_fa8148d34e_e.jpg&#34; srcset=&#34;./54188441314_fa8148d34e_e.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;今日の会場 カルト？が煩い | Flickr&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54188441314/&#34;&gt;今日の会場 カルト？が煩い | Flickr&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;いや，なんか，なんかワクチンがどうたらとか叫ぶカルト集団？ がビルの前に居たので，大回りの遠巻きにしながら入っていった。
マジ迷惑。
病院前も迷惑だろうし，休日にやるならお役所前でやってくれ。&lt;/p&gt;
&lt;p&gt;開始10分前に入ったのだが，既にほぼ満席状態だった。
&lt;a href=&#34;https://2024.rubyworld-conf.org/&#34; title=&#34;RubyWorld Conference 2024&#34;&gt;RubyWorld Conference&lt;/a&gt; からの流れとはいえ，結構ビックリした。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54188425748/&#34;&gt;&lt;img src=&#34;./54188425748_05f83ef656_e.jpg&#34; srcset=&#34;./54188425748_05f83ef656_e.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;KeebWorld Conference 2024 (聴衆モード) | Flickr&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54188425748/&#34;&gt;KeebWorld Conference 2024 (聴衆モード) | Flickr&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;最初に述べたように自作キーボードに関しては本当に「ミリしら」状態なので，ただ聴きに来ただけという感じになってしまった。
発表に対して何を質問していいのかすら分からん（笑）&lt;/p&gt;
&lt;p&gt;例えば，なんで &lt;a href=&#34;https://2024.rubyworld-conf.org/&#34; title=&#34;RubyWorld Conference 2024&#34;&gt;RubyWorld Conference&lt;/a&gt; の流れでこれを開催するのか，今回の一連の発表でようやく分かった。
どうやら Ruby 製の &lt;a href=&#34;https://github.com/picoruby/prk_firmware&#34; title=&#34;picoruby/prk_firmware: A keyboard firmware platform in PicoRuby&#34;&gt;picoruby/prk_firmware&lt;/a&gt; というファームウェア環境があって，それを使って自作キーボードをカスタマイズするってのが Ruby コミュニティ内で随分前から流行ってるらしい。
そういう基本的なことも知らないレベルな私である&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;以下は覚え書で（全ての発表を網羅しているわけではないのはご容赦）：&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1XPRzvgzHdGFtaawGHmVlssijzvD40zISW7wQGv3uf8o/edit?usp=sharing&#34;&gt;Have fun why not&lt;/a&gt; by &lt;a href=&#34;https://yhara.jp/&#34;&gt;原悠&lt;/a&gt; (&lt;a href=&#34;https://x.com/yhara&#34;&gt;@yhara&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;自作キーボードについてのガイダンス的な発表。
助かる。
60%とか40%とか30%とかいうキーボードの分類の仕方を初めて知った（たとえば有名な &lt;a href=&#34;https://happyhackingkb.com/&#34; title=&#34;Happy Hacking Keyboard Microsite | PFU&#34;&gt;HHKB&lt;/a&gt; は60%）。
特に面白かったのは，キーボードの話にはあまり関係ないが&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39; cite=&#34;https://docs.google.com/presentation/d/1XPRzvgzHdGFtaawGHmVlssijzvD40zISW7wQGv3uf8o/edit?usp=sharing&#34;&gt;
&lt;a href=&#34;https://docs.google.com/presentation/d/1XPRzvgzHdGFtaawGHmVlssijzvD40zISW7wQGv3uf8o/edit?usp=sharing&#34;&gt;&lt;img src=&#34;./have-fun-why-not.png&#34; srcset=&#34;./have-fun-why-not.png 1263w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Have fun why not&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1XPRzvgzHdGFtaawGHmVlssijzvD40zISW7wQGv3uf8o/edit?usp=sharing&#34;&gt;Have fun why not&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;プログラミング言語を包丁に喩えて，普通は切れ味や軽さや丈夫さといった点で評価するが Ruby は「持ち手がすべすべだと嬉しいよね」的な評価になりがちってのがめがっさウケた。&lt;/p&gt;
&lt;p&gt;考えてみれば &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 言語も（Ruby とはある意味真逆なのに）似たようなもんだと思ったり。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://github.com/kurod1492/keebworldconf-2024/blob/main/slide.md&#34;&gt;キーボードからロボットへ&lt;/a&gt; by &lt;a href=&#34;https://qiita.com/kurod1492&#34;&gt;Akihiro Kurotani&lt;/a&gt; (&lt;a href=&#34;https://x.com/kurod1492&#34;&gt;@kurod1492&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;次に紹介する発表に絡むが，ファームウェアのカスタマイズ（書き換え）が容易という話は興味深かった。&lt;/p&gt;
&lt;p&gt;自作キーボードと関係ないが，来年 2024-01-12 に&lt;a href=&#34;https://www.matsue-terrsa.jp/&#34; title=&#34;松江テルサ&#34;&gt;松江テルサ&lt;/a&gt;で「&lt;a href=&#34;https://www.shimane-oss.org/kani-robo/&#34; title=&#34;Matz葉がにロボコン|かにロボ連盟 ご当地こども向けプログラミングコンテスト&#34;&gt;Matz葉がにロボコン&lt;/a&gt;」ってのが開催されるらしい。
でも関係者以外の見学は無理そう？&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://speakerdeck.com/sylph01/actual-security-in-microcontroller-ruby&#34;&gt;&amp;ldquo;Actual&amp;rdquo; Security in Microcontroller Ruby!?&lt;/a&gt; by &lt;a href=&#34;https://s01.ninja/&#34;&gt;sylph01&lt;/a&gt; (&lt;a href=&#34;https://x.com/s01&#34;&gt;@s01&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;自作キーボードの制御に使われている &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-pico/&#34; title=&#34;Buy a Raspberry Pi Pico – Raspberry Pi&#34;&gt;Raspberry Pi Pico&lt;/a&gt; および &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-pico-2/&#34; title=&#34;Buy a Raspberry Pi Pico 2 – Raspberry Pi&#34;&gt;Raspberry Pi Pico 2&lt;/a&gt; では WiFi 接続ができるそうな。
しかもファームウェアである &lt;a href=&#34;https://github.com/picoruby/prk_firmware&#34; title=&#34;picoruby/prk_firmware: A keyboard firmware platform in PicoRuby&#34;&gt;picoruby/prk_firmware&lt;/a&gt; も WiFi 制御に対応してるんだと。
さらに &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-pico-2/&#34; title=&#34;Buy a Raspberry Pi Pico 2 – Raspberry Pi&#34;&gt;Raspberry Pi Pico 2&lt;/a&gt; のほうは SRAM がほぼ倍（520MB）になったそうで，単純な制御ではなくもっと色々なことができるようになったわけだ。
さらにさらに前節にあるようにファームウェアの書き換えは容易という話（スクリプトキディには無理かもしれないが）。&lt;/p&gt;
&lt;p&gt;これで何が起きるかというと，自作キーボード経由で不正アクセスがしやすくなるということだ。
これを防ぐのが Secure Boot や Encryptd Boot らしい。&lt;/p&gt;
&lt;p&gt;まぁ，キーボードを PC (Programmable Controller) として構成すれば当然そうなるよな。
面白い！&lt;/p&gt;
&lt;h3&gt;わたしのキーボード by &lt;a href=&#34;https://matz.rubyist.net/&#34;&gt;まつもとゆきひろ&lt;/a&gt; (&lt;a href=&#34;https://x.com/yukihiro_matz&#34;&gt;@yukihiro_matz&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;スライドの公開はないのかな。
うろ覚えですまん。&lt;/p&gt;
&lt;p&gt;欲しいキーボードのスペックは決まってるけど，完成品でも自作（金に飽せて作ってもらったらしい）でも満足するものがなくて，キーボードを買いまくってる話が面白かった。
カンファレンスのあと（私は参加してないが）使わなくなったキーボードを放出したそうな。&lt;/p&gt;
&lt;p&gt;キーレイアウトは日本語キーボードが欲しいんだけどマッピングは US 配列がいいらしい。
理由は US キーボードはキーの数が少ないから。&lt;/p&gt;
&lt;p&gt;さらにファンクションキーは独立したものが欲しいらしい。
これに関しては同意する。
ファンクションキーは結構使うし，コンビネーション・キーと組み合わせたキーアサインは少ないほうがいいと私も思う。&lt;/p&gt;
&lt;h3&gt;30%キーボード発想法 by &lt;a href=&#34;https://scrapbox.io/self-made-kbds-ja/minamo&#34;&gt;みなも♨️30%&lt;/a&gt; (&lt;a href=&#34;https://x.com/X___MOON___X&#34;&gt;@X___MOON___X&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;これもスライドの公開はないのかな。
うろ覚えですまん。&lt;/p&gt;
&lt;p&gt;最初に紹介した発表から引用するが，30%キーボードってのは概ね以下のようなキーで構成されているキーボードらしい。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39; cite=&#34;https://docs.google.com/presentation/d/1XPRzvgzHdGFtaawGHmVlssijzvD40zISW7wQGv3uf8o/edit?usp=sharing&#34;&gt;
&lt;a href=&#34;https://docs.google.com/presentation/d/1XPRzvgzHdGFtaawGHmVlssijzvD40zISW7wQGv3uf8o/edit?usp=sharing&#34;&gt;&lt;img src=&#34;./have-fun-why-not-2.png&#34; srcset=&#34;./have-fun-why-not-2.png 1230w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Have fun why not&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1XPRzvgzHdGFtaawGHmVlssijzvD40zISW7wQGv3uf8o/edit?usp=sharing&#34;&gt;Have fun why not&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;たとえば60%だとキーの配列の自由度がなくなって，どれも似たようなレイアウトになるらしい。
せいぜい分割にするとかかな。
キーの数を極端に減らすことでタイプライタ由来のレイアウトの軛から外れ自由な設計ができる，という話が興味深かった。&lt;/p&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://keebkaigi.org/2024/&#34; title=&#34;KeebWorld Conference 2024 松江&#34;&gt;カンファレンス&lt;/a&gt;では自作キーボードも色々展示されていたが，あまり見てない。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54188541799/&#34;&gt;&lt;img src=&#34;./54188541799_2b0851cf6c_e.jpg&#34; srcset=&#34;./54188541799_2b0851cf6c_e.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;KeebWorld Conference 2024 | Flickr&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54188541799/&#34;&gt;KeebWorld Conference 2024 | Flickr&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;やっぱ分割は基本なんだな。
まぁ分割しないでファームウェアのカスタマイズも要らないならメーカーから完成品を買えばいいだろうし。&lt;/p&gt;
&lt;p&gt;私は若い頃にガチの VT 端末で「現地調整」させられてたことがあって US キー配列でも日本語キー配列でもどっちでもいけるのよ。
でも60%キーボードは当時のトラウマがフラッシュバックするので使いたくない（あと vi/vim もトラウマがフラッシュバックするw）。
それに「わたしのキーボード」でも言及されていたが，コンビネーション・キーと組み合わせたキーアサインは少ないほうがいい。
そもそもメカニカルキーボード自体を使い出したのが&lt;a href=&#34;https://text.baldanders.info/remark/2024/11/mechanical-keyboard/&#34; title=&#34;はじめてのメカニカルキーボード&#34;&gt;ごく最近&lt;/a&gt;なんだよな。&lt;/p&gt;
&lt;p&gt;あと手先が不器用なのでハンダ付けとかも駄目。
私の場合，パーツ数の少ないガンプラを組み立てるくらいが限界である。
母親は手先が器用でハンダ付けも得意なのに，その辺は遺伝してくれなかったようだ（不器用さは親父似）。
もしやるなら金に飽せて得意な人にやってもらうって感じになるだろうか。&lt;/p&gt;
&lt;p&gt;まぁ，しばらくはキーボードには手を出すまいと思った。
ファームウェアをいじるのは面白そうだし「キーボードガチ勢でもないのに全部他人の仕事でごそごそやっていたら新聞に載ってしまった件 (by &lt;a href=&#34;https://github.com/HirohitoHigashi&#34;&gt;東裕人&lt;/a&gt;)」で紹介されているような特殊用途のキーボードとかなら興味あるけど&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;広島にいた頃から Ruby 案件には恵まれてなくて，仕事で全く使ったことがない。
仕事以外では C/C++ か Java か &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; で，今は &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 一辺倒なので，松江地元にいてこれでいいのか？ という気はチョットしている。
一方で，歳とってから Ruby かぁ，という気もしないではないが。&lt;/p&gt;
&lt;p&gt;あと Ruby コミュニティでは SNS は &lt;abbr class=&#34;emoji-chars&#34; title=&#34;X&#34;&gt;𝕏&lt;/abbr&gt; が主流なのかね。
Bluesky とかで見かけない感じ？ まぁ，今回の&lt;a href=&#34;https://keebkaigi.org/2024/&#34; title=&#34;KeebWorld Conference 2024 松江&#34;&gt;カンファレンス&lt;/a&gt;は Bluesky の TL で知ったんだけど。&lt;/p&gt;
&lt;p&gt;日本語圏のエンジニアは Bluesky であまり見かけない印象を受ける。
真面目に探してないせいかも知れないが。
Mastodon は他サーバのユーザは探しにくいので動向が分からない。&lt;/p&gt;
&lt;p&gt;今回はタイムテーブルをちゃんと見てなくて「日没までには帰ろう」とか呑気に考えてたら17時半過ぎまでみっちりだった。
逢魔時のバス停で帰りのバスを待っていたら号外が配られているのに気づく。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54188796995/&#34;&gt;&lt;img src=&#34;./54188796995_09454faa67_e.jpg&#34; srcset=&#34;./54188796995_09454faa67_e.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;号外！ | Flickr&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/54188796995/&#34;&gt;号外！ | Flickr&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;おー。
いよいよか。
新聞記者さんに捕まってインタビューを求められたが断った。
私は数年前から政治的無関心を装う（特に政治的なポジショントークはしない）ことを年間目標にしてるので（ときどき胡乱なことを口走るのはご容赦），応えないほうがいいだろう（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2024/11/mechanical-keyboard/&#34;&gt;はじめてのメカニカルキーボード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0CJT7S6D6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41UoRrBP69L._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0CJT7S6D6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;エレコム メカニカルキーボード Leggero 有線 テンキーレス Nキーロールオーバー対応 5000万回高耐久スイッチ採用 赤軸 グレー TK-MC30UKLGY/EC&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;エレコム (Release 2023-10-25)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B0CJT7S6D6 (ASIN), 4549550275798 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;赤軸（リニア）で押下圧50g，ストローク4.0mm。個人的にはちょうどいい感じ。打鍵音が煩いがメカニカルだとこんなもんらしい。押下圧45gで静音タイプもあるらしいが10K円超える。有線だがキーボード直結ではなく USB-C ケーブルで接続できる（USB-C⇔USB-A ケーブル付属）。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2024-11-05&#34;&gt;2024-11-05&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- テンキーレス キーボード メカニカル --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;技術系以外のイベントならある。「&lt;a href=&#34;https://shimane-kodaibunka.jp/sympo/sympo-3424/&#34; title=&#34;島根の歴史文化講座　2024 | 島根県古代文化センター&#34;&gt;島根の歴史文化講座 2024&lt;/a&gt;」とか。これも今年に入ってからだけどさ。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;確か &lt;a href=&#34;https://tinygo.org/&#34; title=&#34;TinyGo&#34;&gt;TinyGo&lt;/a&gt; でキーボードのファームウェアを組むみたいな話も聞いたことがあるが，この辺の情報も全く知らない。いやぁ，組込み制御ソフトウェアに全くタッチしなくなって長いからなぁ&amp;hellip;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;特定用途というなら FPS (First-Person Shooter) とかでキーボード入力する人なら30%キーボードはむしろ需要があるかも？ ハードウェア要件が厳しいかもだけど。そういえば &lt;span class=&#34;box&#34;&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;/span&gt; や &lt;span class=&#34;box&#34;&gt; &lt;code&gt;Ctrl&lt;/code&gt; &lt;/span&gt; といったコンビネーション・キーをフットペダルにアサインした製品を見かけたことがあるな。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>『効率的な Go』読書会 2回目</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2024/05/efficient-go-2/" />
		<id>tag:text.Baldanders.info,2024-05-18:/remark/2024/05/efficient-go-2/</id>
		<published>2024-05-18T11:19:34+00:00</published>
		<updated>2024-08-23T08:21:01+00:00</updated>
		<summary>第2章だけ立ち読みするってのも手かも知れない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今日は読書会の日。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yokohama-go-reading.connpass.com/event/317024/&#34;&gt;第59回横浜Go読書会（オンライン） - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というわけで，&lt;a href=&#34;https://text.baldanders.info/remark/2024/04/efficient-go-1/&#34;&gt;前回&lt;/a&gt;に引き続き『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;効率的なGo ―データ指向によるGoアプリケーションの性能最適化 | Bartłomiej Płotka, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;効率的な Go&lt;/a&gt;』の話を。
今回は第2章の真ん中辺りまで読んだので「第2章 効率的な Go 入門」の感想を書いてみる。&lt;/p&gt;
&lt;p&gt;これから &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; について調べたい。
あるいは「&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; ってどがぁな言語？」って方がいたらこの第2章だけ立ち読みするってのも手かも知れない。
&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; を礼賛するフレーズが多いが，苦手とする部分もきっちり言及してるし参考にはなると思う。
例示されているコードは少なめ且つ簡単なので「&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; なにもわからない」って方も取り敢えず大丈夫。&lt;/p&gt;
&lt;p&gt;以下，個人的に面白いと思ったフレーズを抜き出しててみよう。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;指針となった原則は、安全性と繰り返しの少なさを引き換えにせず、よりシンプルなコードを可能にする言語を作ることでした。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.41&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;GoogleはいまだにGoを管理する唯一の企業であり、Goに対する最後の決定的な支配権を持っています。たとえ誰もが修正、使用、貢献できるとしても、単一のベンダーによって調整されたプロジェクトは、再ライセンスや特定の機能のブロックなど、身勝手で有害な決定を下す危険性があります&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.41&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;「gofmt のスタイルは誰の好みでもないが、gofmt はみんなの好みである（ Gofmt&amp;rsquo;s style is no one&amp;rsquo;s favorite, yet gofmt is everyone&amp;rsquo;s favorite. ）」&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.42&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;標準ライブラリの設計を通じて、依存関係を制御することに多大な努力が払われました。1つの機能のために大きなライブラリを引っ張ってくるよりも、少しのコードをコピーするほうが良い場合があります（システムビルドのテストでは、新しいコアの依存関係が発生すると文句を言われます）。依存関係の衛生管理は、コードの再利用に優先します。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.47&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;繰り返しになりますが、効率を考慮すると、依存関係と透明性における潜在的なミニマリズムは、非常に大きな価値をもたらします。未知なものが少ないということは、主要なボトルネックをすばやく検出し、もっとも重要な価値のある最適化にまず注力できることを意味します。私たちは、依存関係に最適化の余地があることに気づいても、それを回避する必要はないのです。そのかわり、私たちは通常、その修正を直接アップストリームに貢献することが歓迎されます。これは両者にとって有益なことです！&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.48&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Goは、エラーを第一級市民の言語機能として扱うことで、独自の道を歩んでいます。信頼できるソフトウェアを書きたいと仮定して、エラー処理を明示的に、簡単に、そしてライブラリやインターフェイスにわたって統一的に行うのです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.50&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;もうひとつよくある不満は、Goを書くと非常に「悲観的」になるということです。なぜなら、決して起こらないかもしれないエラーが、目に見える形で現れるからです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.53&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;以下は読書会では未読だけど面白かったので。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;
&lt;p&gt;1960 年、米国と欧州のプログラミング言語専門家が手を組み、Algol60 が誕生しました。1970 年、Algol のツリーはCとPascal の2 つのブランチに分かれました。約 40 年後、この2 つの枝はGoで再び合流しました。&lt;/p&gt;
&lt;p class=&#34;right&#34; lang=&#34;en&#34;&gt;Robert Griesemer, &lt;q&gt;The Evolution of Go&lt;/q&gt; （https://oreil.ly/a4V1e）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.71&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;効率という点では、Go にはアキレス腱があります。「5.5 Goのメモリ管理」で学ぶように、メモリ使用量はときに制御しにくいことがあります。プログラム中の割り当ては（特に新しいユーザーにとっては）驚くようなもので、ガベージコレクションの自動メモリ解放処理にはオーバーヘッドや偶発的な動作があります。特にデータ指向（data-intensive）のアプリケーションでは、メモリやCPU の効率を確保するために、メモリ容量が厳しく制限されているマシン（IoT など）と同様に努力が必要です。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.71&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と，まぁ，こんな感じかな。
多少は雰囲気が伝わるだろうか。&lt;/p&gt;
&lt;p&gt;そういえば &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 処理系のバリエーションとして &lt;a href=&#34;https://tinygo.org/&#34;&gt;TinyGo&lt;/a&gt; は知ってたけど &lt;a href=&#34;https://gobot.io/&#34; title=&#34;Gobot - Golang framework for robotics, drones, and the Internet of Things (IoT)&#34;&gt;GoBot&lt;/a&gt; は知らんかった。
いや Mastodon の TL で見かけたかな。
いわゆる IoT で &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 処理系を考えているならこの辺も視野に入れたほうがいいだろう。&lt;/p&gt;
&lt;p&gt;今回はここまで。
次回も感想を書くかどうかは分からない。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/_kazuya/articles/0045ef8057c0b5&#34;&gt;Golang(Gobot+Firmata+Arduino)でアナログメーターを作ってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41&amp;#43;ew2wl2jL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;効率的なGo ―データ指向によるGoアプリケーションの性能最適化&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Bartłomiej Płotka (著), 山口 能迪 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリー・ジャパン 2024-02-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4814400535 (ASIN), 9784814400539 (EAN), 4814400535 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784814400539/&#34;&gt;版元&lt;/a&gt;で Ebook を買える。Go言語のリファレンス本ではない。フトウェア工学，プログラミング（の考え方）を学ぶ教科書的な位置づけかなぁ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2024-04-21&#34;&gt;2024-04-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 効率的なGo : Efficient Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;122&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。と思ったら絶版状態らしい（2025-01 現在）。復刊を望む！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4863544006?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413DpucT1ML._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4863544006?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;基礎から学ぶ TinyGoの組込み開発&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;高砂正哲 (著)&lt;/dd&gt;
    &lt;dd&gt;C&amp;amp;R研究所 2022-11-12&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4863544006 (ASIN), 9784863544000 (EAN), 4863544006 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://book.mynavi.jp/manatee/c-r/books/detail/id=134168&#34;&gt;本の森.jp で PDF 版&lt;/a&gt;を購入。ハンズオン的な内容らしい。実は Wio Terminal を買ったまま放置プレイ中なので，楽しみにしている。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-11-12&#34;&gt;2022-11-12&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 基礎から学ぶ TinyGo の組込み開発 --&gt;
</content>
	</entry><entry>
		<title>性能とはなにか【『効率的な Go』読書会 初回】</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2024/04/efficient-go-1/" />
		<id>tag:text.Baldanders.info,2024-04-21:/remark/2024/04/efficient-go-1/</id>
		<published>2024-04-21T04:18:52+00:00</published>
		<updated>2024-08-23T08:21:01+00:00</updated>
		<summary>『効率的な Go』読書会が始まった</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;冬の間忙しくてできなかった読書会への参加を再開することにした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yokohama-go-reading.connpass.com/event/313675/&#34;&gt;第58回横浜Go読書会（オンライン）- Part 2 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「横浜Go読書会」とあって田舎暮らしの私としては躊躇するところではあったが主催の柴田芳樹さんより「&lt;a href=&#34;https://twitter.com/yoshiki_shibata/status/1760774448217723104&#34;&gt;全国から参加可能&lt;/a&gt;」と言っていただけたので参加することに決めた。&lt;/p&gt;
&lt;p&gt;題材となる書籍はこれ。&lt;/p&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41&amp;#43;ew2wl2jL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;効率的なGo ―データ指向によるGoアプリケーションの性能最適化&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Bartłomiej Płotka (著), 山口 能迪 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリー・ジャパン 2024-02-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4814400535 (ASIN), 9784814400539 (EAN), 4814400535 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784814400539/&#34;&gt;版元&lt;/a&gt;で Ebook を買える。Go言語のリファレンス本ではない。フトウェア工学，プログラミング（の考え方）を学ぶ教科書的な位置づけかなぁ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2024-04-21&#34;&gt;2024-04-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 効率的なGo : Efficient Go --&gt;
&lt;p&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784814400539/&#34; title=&#34;O&#39;Reilly Japan - 効率的なGo&#34;&gt;版元が O&amp;rsquo;Reilly Japan&lt;/a&gt; ということで PDF で購入した。&lt;/p&gt;
&lt;p&gt;タイトルを見たとき「ついに Effective Go を冠する本が出たのか」と思ったが&lt;a href=&#34;https://ymotongpoo.hatenablog.com/entry/efficient-go&#34; title=&#34;『効率的なGo』という本が出版されました #efficient_go - YAMAGUCHI::weblog&#34;&gt;翻訳者の方&lt;/a&gt;に「&lt;a href=&#34;https://bsky.app/profile/ymotongpoo.com/post/3knziwolx2c27&#34;&gt;&amp;ldquo;Efficient Go&amp;rdquo; だよ&lt;/a&gt;」と指摘していただいた恥ずかしい過去は内緒である。&lt;/p&gt;
&lt;p&gt;普通は本を買ったら最低でも流し読みくらいをしておくものだけど，これを買った2月頃はホンマに忙しくてねぇ。
目次くらいしか眺めてなかった。
まぁ読書会で読むし，と後回しにしてたら結局初見で読書会に望むことになってしまった。
反省。&lt;/p&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;効率的なGo ―データ指向によるGoアプリケーションの性能最適化 | Bartłomiej Płotka, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;効率的な Go&lt;/a&gt;』は11章で構成されていて500ページちょっとというボリューム。
読書会では読み終わるまで1年くらいかかるかなぁという見通しだった。
1回目の今回は都合で時間短めだったこともあり，序文と1章の途中まで。&lt;/p&gt;
&lt;p&gt;読み始めた最初の感想は「講釈が長い！」だった。
&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; のコードは殆ど出てこないし。&lt;/p&gt;
&lt;p&gt;読書会のあとで後ろの章をさっくり眺めてみたが，コードは少なめで地の文章が多い。
なので，よくあるリファレンス本と思って読むと面食らうかもしれない。
どっちかというとソフトウェア工学，プログラミング（の考え方）を学ぶ教科書的な位置づけかなぁ。
その教材としてのプログラミング言語として &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; が選ばれているという感じ。
実際に序文でも&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;最適化の考え方やオブザーバビリティパターンを示すためにGoを例題言語として使っていますが、本書の11 章のうち8章は言語に中立的に書かれています。Java、C#、Scala、Python、C++、Rust、Haskellなど、他の言語で書かれたソフトウェアを改善するために、同じテクニックを使えます。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』序文&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と書かれている。
なので，この本の内容を &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 以外の言語で応用するにはどうすればいいか考えながら読むのも面白いかもしれない。&lt;/p&gt;
&lt;p&gt;そういえば「訳者まえがき」には&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;私が直近で翻訳に携わった『オブザーバビリティ・エンジニアリング』（2023、オライリー・ジャパン、ISBN9784814400126）、『SLO サービスレベル目標』（2023、オライリー・ジャパン、ISBN9784814400348）の2冊に続いて、本書が加わることで、システムの性能改善というテーマにおいてマクロからミクロまで、全体の理解を深められる書籍が揃ったからです。したがって先の2冊を併せて読むことで、広い視点を保ったまま、プログラムの性能改善に取り組む意味が見えてくると思います。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』訳者まえがき&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と書かれている。
この辺も読んでおくといいかも。&lt;/p&gt;
&lt;p&gt;では，1章の前半で刺さったフレーズをつまみ食いしてみよう。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;よく言われるように、「完璧は善の敵（Perfect is the enemy of good、https://oreil.ly/OogZF）」ですが、まずはそのバランスの取れた善を見つけなければなりません。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.3&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これは個人的に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4344980158?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;理学は、真理の探究であり、工学は善の実現である。そして、藝術は美の表現である－－これで所謂「真美善」が揃う&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4344980158?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;はやぶさ―不死身の探査機と宇宙研の物語&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;を座右の銘のひとつとしている私としては気になるフレーズである。
ちなみに &lt;a href=&#34;https://oreil.ly/OogZF&#34;&gt;&lt;code&gt;https://oreil.ly/OogZF&lt;/code&gt;&lt;/a&gt; は Wikipedia へのリンクになっていて，そのバリエーションとして&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://en.wikipedia.org/wiki/Perfect_is_the_enemy_of_good&#34;&gt;&amp;ldquo;If you never miss a plane, you&amp;rsquo;re spending too much time at the airport&amp;rdquo;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Perfect_is_the_enemy_of_good&#34;&gt;Perfect is the enemy of good - Wikipedia&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;というフレーズがあって笑ってしまった。他に Donald Knuth 博士の&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://en.wikipedia.org/wiki/Perfect_is_the_enemy_of_good&#34;&gt;&amp;ldquo;Premature optimization is the root of all evil&amp;rdquo;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Perfect_is_the_enemy_of_good&#34;&gt;Perfect is the enemy of good - Wikipedia&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;も紹介されていたが，これは『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;効率的なGo ―データ指向によるGoアプリケーションの性能最適化 | Bartłomiej Płotka, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;効率的な Go&lt;/a&gt;』でも言及されている。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;しかし、この名言はずいぶん前になされたものです。過去から一般的なプログラミングについて多くを学ぶことができる一方で、1974年から大幅に改善されたことも多くあります。たとえば、当時はリスト1-5に紹介されているように、変数名に変数の型に関する情報を追加することが一般的でした。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.13&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;「リスト1-5」ってのがこれ&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34; cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;structSystem&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;sliceU32Numbers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;bCharacter&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;f64Ratio&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;float64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.14&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;いわゆるハンガリアン記法ってやつですな。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;当時はコンパイラーや統合開発環境（IDE）があまり成熟していなかったので、ハンガリアン記法が便利でした。しかし現在では、IDEやGitHubのようなリポジトリサイトでも、変数にカーソルを合わせるとすぐにその型を認識できるようになりました。数ミリ秒で変数の定義にたどり着き、解説を読み、すべての呼び出しと変更を見つけられます。賢いコードの提案、高度なハイライト、1990 年代半ばに開発されたオブジェクト指向プログラミングの優位性により、実用的な可読性に大きな影響を与えることなく、機能や効率の最適化（複雑化）を追加できるツールを手に入れました。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.14&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;最近では、IDEの機能に対応しやすいようにコードを書くことが推奨されていることは、特筆に値するでしょう。たとえば、コード構造は「連結」グラフ（https://oreil.ly/mFzH9）であるべきです。これは、IDE が支援できる方法で関数を接続することを意味します。動的ディスパッチ、コードインジェクション、遅延読み込みは、これらの機能を無効にするので、厳密に必要でない限り避けるべきです。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.14 脚注&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;こういった感じにツールの助け等によってコードに対する認知負荷が変わってきているため「性能の最適化」も昔とは変わってきている，ということらしい。&lt;/p&gt;
&lt;p&gt;じゃあ，そもそも「性能（performance）」って何？ って話になる。
この辺の話が今回読んだ中で一番面白かった。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;私の経験では、多くの人がソフトウェア開発において性能（パフォーマンス）という言葉を速度（スピード）の代名詞と考えています。他の人々にとっては、この言葉の本来の定義である実行の全体的な質を意味します 。この現象は「意味拡散（semantic diffusion、https://oreil.ly/Qx9Ft）」と呼ばれることもあり、ある言葉がより大きな集団によって、本来持っていた意味と異なる意味で使われ始めるときに起こります。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.4&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;p&gt;結論から言うと、性能とは少なくともこの3つの要素の組み合わせです。&lt;/p&gt;
\[ 性能 = ( 精度 \times 効率 \times 速度 ) \]&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.6&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ここで性能は単にソフトウェアの機能を指すものではないというのが重要なポイント&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
日々要件が変わるソフトウェア開発においては如何にして変化をプロセスに組み込み小刻みにイテレーションを回していくかが重要になる。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote cite=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;たとえば、RockstarGamesが人気ゲーム「グランド・セフト・オートV」を開発するのに5年の歳月と250人のエンジニアを要し、その費用は1億3750万ドルと推定されて（https://oreil.ly/0CRW2）います。また、Appleは、実用的で商品化されたOSを作るために、2001年にmacOSを初めてリリースするまでに5億ドル（https://oreil.ly/hQhiv）をはるかに超える資金を費やさなければなりませんでした。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;『効率的なGo』p.1&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;故に1章の「ソフトウェア効率性が重要」という見出しになるわけだ。&lt;/p&gt;
&lt;p&gt;&amp;hellip;という感じで読み進めていくことになりそうだ。
次回の読書会の感想を書くかどうかはわからないけど（笑）&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51pUKQajnaL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873118468?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Go言語による並行処理&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Katherine Cox-Buday (著), 山口 能迪 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2018-10-26&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873118468/&#34;&gt;Eブック版もある&lt;/a&gt;。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2018/11/concurrency-in-go/&#34;&gt;こちら&lt;/a&gt;。 Go 言語で並行処理を書くならこの本は必読書になるだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-01-13&#34;&gt;2020-01-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Go言語による並行処理 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;122&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。と思ったら絶版状態らしい（2025-01 現在）。復刊を望む！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4814400535?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;効率的なGo ―データ指向によるGoアプリケーションの性能最適化 | Bartłomiej Płotka, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;効率的な Go&lt;/a&gt;』では 性能＝上手くできているか？ とし，その内訳として 精度＝間違いを犯してないか？ 効率＝余計な仕事をしてないか / 資源を使いすぎてないか？ 速度＝早くできているか？ といった感じに噛み砕いて説明している。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>オープンソース・プロジェクトの乗っ取りを試みる</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2024/04/take-over-opensource-project/" />
		<id>tag:text.Baldanders.info,2024-04-20:/remark/2024/04/take-over-opensource-project/</id>
		<published>2024-04-20T08:59:26+00:00</published>
		<updated>2024-04-20T09:03:08+00:00</updated>
		<summary>OpenSSF および OpenJS Foundation からの警告</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2024/04/other-attempts-to-take-over-open-source-projects.html&#34; title=&#34;Other Attempts to Take Over Open Source Projects - Schneier on Security&#34;&gt;Bruce Schneier 先生の記事&lt;/a&gt;経由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects – Open Source Security Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openjsf.org/blog/openssf-openjs-alert-social-engineering-takeovers&#34;&gt;Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects | OpenJS Foundation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先日の &lt;a href=&#34;https://text.baldanders.info/remark/2024/04/xz-utils-backdoor/&#34; title=&#34;XZ Utils に仕組まれたバックドアに関する覚え書き&#34;&gt;XZ Utils に仕組まれたバックドア&lt;/a&gt;に関連して &lt;a href=&#34;https://openssf.org/&#34; title=&#34;Open Source Security Foundation – Linux Foundation Projects&#34;&gt;OpenSSF (Open Source Security Foundation)&lt;/a&gt; と &lt;a href=&#34;https://openjsf.org/&#34; title=&#34;A safe and modern home for JavaScript technologies | OpenJS Foundation&#34;&gt;OpenJS Foundation&lt;/a&gt; よりオープンソース・プロジェクトの乗っ取りに関する警告が出ている。
両者とも同じ内容かな。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2024/04/xz-utils-backdoor/&#34; title=&#34;XZ Utils に仕組まれたバックドアに関する覚え書き&#34;&gt;今回&lt;/a&gt;のような話は特異なケースというわけではないらしく，以下のような類似例（試みは失敗したようだが）を報告している。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;&lt;p&gt;The OpenJS Foundation Cross Project Council received a suspicious series of emails with similar messages, bearing different names and overlapping GitHub-associated emails. These emails implored OpenJS to take action to update one of its popular JavaScript projects to “address any critical vulnerabilities,” yet cited no specifics. The email author(s) wanted OpenJS to designate them as a new maintainer of the project despite having little prior involvement. This approach bears strong resemblance to the manner in which “Jia Tan” positioned themselves in the XZ/liblzma backdoor.&lt;/p&gt;
&lt;p&gt;[&amp;hellip;]&lt;/p&gt;
&lt;p&gt;The OpenJS team also recognized a similar suspicious pattern in two other popular JavaScript projects not hosted by its Foundation, and immediately flagged the potential security concerns to respective OpenJS leaders, and the Cybersecurity and Infrastructure Security Agency (CISA) within the United States Department of Homeland Security (DHS).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これらを踏まえ social engineering による乗っ取りのパターンとして以下を挙げている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;&lt;ul&gt;
&lt;li&gt;Friendly yet aggressive and persistent pursuit of maintainer or their hosted entity (foundation or company) by relatively unknown members of the community.&lt;/li&gt;
&lt;li&gt;Request to be elevated to maintainer status by new or unknown persons.&lt;/li&gt;
&lt;li&gt;Endorsement coming from other unknown members of the community who may also be using false identities, also known as “sock puppets.”&lt;/li&gt;
&lt;li&gt;PRs containing blobs as artifacts.
&lt;ul&gt;
&lt;li&gt;For example, the XZ backdoor was a cleverly crafted file as part of the test suite that wasn’t human readable, as opposed to source code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intentionally obfuscated or difficult to understand source code.&lt;/li&gt;
&lt;li&gt;Gradually escalating security issues.
&lt;ul&gt;
&lt;li&gt;For example, the XZ issue started off with a relatively innocuous replacement of safe_fprintf() with fprintf() to see who would notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deviation from typical project compile, build, and deployment practices that could allow the insertion of external malicious payloads into blobs, zips, or other binary artifacts.&lt;/li&gt;
&lt;li&gt;A false sense of urgency, especially if the implied urgency forces a maintainer to reduce the thoroughness of a review or bypass a control.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;まぁ，悪人顔の悪人はいないってね。
漫画やドラマならともかく，現実の詐欺師は友好的かつ誠実そうな顔をしてやってくる（笑） 企業・組織などへの標的型攻撃もそうだけど，安全な「距離」をはかりながら徐々に侵食していく感じだよね。
寄生虫が宿主を乗っ取るのと同じ。
これを防ぐのはなかなか難しいだろう。
特に小規模の FOSS プロジェクトなんかでは。&lt;/p&gt;
&lt;p&gt;件の記事では，オープンソース・プロジェクトを保護するための手順として&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote cite=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;&lt;ul&gt;
&lt;li&gt;Consider following industry-standard security best practices such as &lt;a href=&#34;https://openssf.org/resources/guides/&#34;&gt;OpenSSF Guides&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use strong authentication.
&lt;ul&gt;
&lt;li&gt;Enable two-factor authentication (2FA) or Multifactor Authentication (MFA).&lt;/li&gt;
&lt;li&gt;Use a secure password manager.&lt;/li&gt;
&lt;li&gt;Preserve your recovery codes in a safe, preferably offline place.&lt;/li&gt;
&lt;li&gt;Do not reuse credentials/passwords across different services.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Have a security policy including a “&lt;a href=&#34;https://github.com/ossf/oss-vulnerability-guide&#34;&gt;coordinated disclosure&lt;/a&gt;” process for reports.&lt;/li&gt;
&lt;li&gt;Use best practices for merging new code.
&lt;ul&gt;
&lt;li&gt;Enable branch protections and signed commits.&lt;/li&gt;
&lt;li&gt;If possible, have a second developer conduct code reviews before merging, even when the PR comes from a maintainer.&lt;/li&gt;
&lt;li&gt;Enforce readability requirements to ensure new PRs are not obfuscated, and use of opaque binaries is minimized.&lt;/li&gt;
&lt;li&gt;Limit who has npm publish rights.&lt;/li&gt;
&lt;li&gt;Know your committers and maintainers, and do a periodic review. Have you seen them in your working group meetings or met them at events, for example?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you run an open source package repository, consider adopting &lt;a href=&#34;https://repos.openssf.org/principles-for-package-repository-security&#34;&gt;Principles for Package Repository Security&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Review “&lt;a href=&#34;https://www.cisa.gov/news-events/news/avoiding-social-engineering-and-phishing-attacks&#34;&gt;Avoiding social engineering and phishing attacks&lt;/a&gt;” from CISA and/or “&lt;a href=&#34;https://www.enisa.europa.eu/topics/incident-response/glossary/what-is-social-engineering&#34;&gt;What is ‘Social Engineering’&lt;/a&gt;” from ENISA.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://openssf.org/blog/2024/04/15/open-source-security-openssf-and-openjs-foundations-issue-alert-for-social-engineering-takeovers-of-open-source-projects/&#34;&gt;Open Source Security (OpenSSF) and OpenJS Foundations Issue Alert for Social Engineering Takeovers of Open Source Projects&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;を挙げている。
比較的大きなコミュニティならこれでもいいんだろうけどねぇ。
サプライチェーンの観点では重要だけどオープンソース・プロジェクトとしては小規模で，殆どワンオペで回してるようなところは難しいかもしれない。
&lt;a href=&#34;https://text.baldanders.info/remark/2024/04/xz-utils-backdoor/&#34; title=&#34;XZ Utils に仕組まれたバックドアに関する覚え書き&#34;&gt;今回&lt;/a&gt;の XZ Utils のように。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4296001574?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51anznwPz2L._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4296001574?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ハッキング思考　強者はいかにしてルールを歪めるのか、それを正すにはどうしたらいいのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 高橋 聡 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2023-10-12&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4296001574 (ASIN), 9784296001576 (EAN), 4296001574 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「AI時代にルールを味方につけるには、「正しいハッキングの考え方」が必要だ」（帯の言葉より）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2023-10-13&#34;&gt;2023-10-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ハッキング思考 --&gt;
</content>
	</entry>
</feed>
