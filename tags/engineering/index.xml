<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Engineering - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/engineering/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/engineering/index.xml" />
	<id>tag:text.Baldanders.info,2017-03-24:/tags</id>
	<updated>2017-03-24T08:04:30+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.21</generator>

	
	<entry>
		<title>人工知能に「常識」は必要なのか？ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/03/common-sense-of-ai/" />
		<id>tag:text.Baldanders.info,2017-03-24:/remark/2017/03/common-sense-of-ai/</id>
		<published>2017-03-24T08:04:30+09:00</published>
		<updated>2017-03-24T08:04:30+09:00</updated>
		<summary>「常識」は「知能（intelligence）」というより「知性（intellect）」に近い。果たして人工知能（artificial intelligence）に「常識」は必要なのか。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;「常識」は「知能（intelligence）」というより「知性（intellect）」に近い。
果たして人工知能（artificial intelligence）に「常識」は必要なのか。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#trolley-problem&#34;&gt;機械と「トロッコ問題」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#common-sense&#34;&gt;人工知能に「常識」は必要なのか？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;trolley-problem&#34;&gt;機械と「トロッコ問題」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2017/03/20/robocars-will-sometimes-kill/&#34;&gt;トロッコ問題とは何か？ 自律走行車は「人を守るために人を殺すこともある」｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「トロッコ問題」については以前に言及した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/10/artificial-intelligence/#trolley-problem&#34;&gt;AI は「トロッコ問題」をどう解くか&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「トロッコ問題」のポイントは「正解が存在しない」ことにある。
ゆえにヒトは葛藤し（どちらを選んでも）後悔するのだ。&lt;/p&gt;

&lt;p&gt;宗教臭い言い方をするなら葛藤は「罪」であり後悔は「罰」である。
社会的動物である私たちヒトは常に社会に対して罪と罰を背負わされ続ける。
一方で，（社会的に&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:g1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:g1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;）「公正」であり「正義」であると信じ切れるなら，それが自爆テロでも人類殲滅でも，罪と感じることはないだろう。&lt;/p&gt;

&lt;p&gt;機械は葛藤も後悔もしない。
内部構造がどうであれ入力に対して必ず何らかの出力を行うよう定められている。
その意味で機械に「トロッコ問題」は存在しない。
言い方を変えるなら「葛藤や後悔は機械が負う責務ではない」ということだ。&lt;/p&gt;

&lt;h2 id=&#34;common-sense&#34;&gt;人工知能に「常識」は必要なのか？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/35098179/&#34;&gt;人工知能は「常識」を持てるのか&amp;ndash;FacebookのAI研究者が語る - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「常識」というのはヒトが社会的動物であることと密接な関係がある。
そもそも「公平かつ正当な判断」という考え方からしてそうだ。
「公平」も「公正」も社会の中でこそ意味を成す。&lt;/p&gt;

&lt;p&gt;「常識」というのは社会に対する個人（identity）を固定するための基盤であり，同時に個人の想像力を制限する枷でもある。
人は想像を絶するものは想像できない。
その想像力の地平線こそが「常識」というやつである。&lt;/p&gt;

&lt;p&gt;ならば問おう。
果たして人工知能に「常識」は必要なのか？ と。
「常識」を刷り込まれ「想像を絶するものを想像できない」人工知能の価値とは如何ほどか。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;巷では「人工知能が人の仕事を奪う」みたいな言説が流布されているけど，機械の本領は人の仕事を肩代わりすることではない。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/01/game-ai/&#34;&gt;ゲーム AI の本領&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://30th.rcast.u-tokyo.ac.jp/future/future01.html&#34;&gt;対話する「未来論」：イスラームの宗教と脳の機能は交差する。&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/artificial-intelligence/&#34;&gt;人工知能は「ハイル・ヒトラー」と叫ぶか&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/08/pinocchio/&#34;&gt;「ピノキオ」と AI&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/10/artificial-intelligence/&#34;&gt;AI は人（の良心）を殺すか？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/01/game-ai/&#34;&gt;ゲーム AI の本領&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:g1&#34;&gt;社会的にというか「神の教えの下に」とでも言うべきか。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:g1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>2017年直前の閏秒について - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/leap-second-2017/" />
		<id>tag:text.Baldanders.info,2016-11-29:/remark/2016/11/leap-second-2017/</id>
		<published>2016-11-29T22:06:59+09:00</published>
		<updated>2017-01-12T11:11:28+09:00</updated>
		<summary>年も押し迫ってきたし関連情報も出てき始めているので，あらためて記事を再構成し関連リンクを順次追加していくことにする。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/07/10-stories/#ls&#34;&gt;以前に紹介した&lt;/a&gt;けど，年も押し迫ってきたし関連情報も出てき始めているので，あらためて記事を再構成し関連リンクを順次追加していくことにする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nict.go.jp/press/2016/07/08-1.html&#34;&gt;プレスリリース | 「うるう秒」挿入のお知らせ | NICT-情報通信研究機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/business/35085582/&#34;&gt;2016年12月31日にうるう秒が追加へ - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UTC の2017年直前に閏秒が挿入される。
日本時間では，時差があるので，2017年1月1日午前9:00直前に閏秒が挿入されることになる。
これにより UTC と TAI の差は37秒となる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;実施年月日&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;調整時間（秒）&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;$UTC - TAI$（秒）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1972年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;―&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-10$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1972年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-11$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1973年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-12$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1974年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-13$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1975年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-14$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1976年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-15$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1977年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-16$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1978年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-17$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1979年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-18$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1980年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-19$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1981年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-20$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1982年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-21$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1983年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-22$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1985年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-23$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1988年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-24$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1990年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-25$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1991年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-26$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1992年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-27$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1993年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-28$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1994年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-29$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1996年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-20$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1997年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-31$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1999年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-32$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2006年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-33$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2009年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-34$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2012年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-35$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015年7月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-36$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017年1月1日&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$+1$&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$-37$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;閏秒について&#34;&gt;閏秒について&lt;/h2&gt;

&lt;p&gt;日常生活で接する時刻系としては UT （universal time; 世界時）と UTC （coordinated universal time; 協定世界時）の2つが存在する。
2つの時刻系は基準となる物差しが異なる。&lt;/p&gt;

&lt;p&gt;UT は恒星時（sidereal time）系の一種&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ut&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ut&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;で，簡単に言うと地球の自転速度を基準にしている。
私たちの日常生活は太陽や月などに大きな影響を受けているので， UT を用いるのは妥当と言える。
一方で UT は観測値であり，しかも地球の自転速度は一定ではなく予測できない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:es&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:es&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; のが欠点だった。
そこで「同じ間隔で時を刻む時刻系」の要求が高まってくる。&lt;/p&gt;

&lt;p&gt;かなりの試行錯誤の末，最終的に原子時（atmic time）系が採用されることになった。
具体的には1958年1月1日0時0分0秒 UT2&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ut2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ut2&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; を原点とした TAI&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tai&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:tai&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; （international atomic time; 国際原子時）である。&lt;/p&gt;

&lt;p&gt;そして UT と TAI との間のギャップを埋めるのが UTC なのである。&lt;/p&gt;

&lt;p&gt;UTC は TAI と同じ原子時系で TAI との差が整数秒になるように調整される。
また UT に対する差は 0.9 秒以内になるように調整される。
この「調整」を行う手段が閏秒（leap second）である。&lt;/p&gt;

&lt;p&gt;閏秒は UTC の1月1日直前または7月1日直前に挿入あるいは削除される&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:410&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:410&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
UT が観測値である以上「いつ閏秒が発生するか」は長期的には予測できないが，少なくとも半年前には&lt;a href=&#34;http://jjy.nict.go.jp/QandA/data/leapsec.html&#34; title=&#34;日本標準時プロジェクト Information of Leap second&#34;&gt;告知&lt;/a&gt;される。&lt;/p&gt;

&lt;h2 id=&#34;コンピュータ-システムにおける閏秒の問題&#34;&gt;コンピュータ・システムにおける閏秒の問題&lt;/h2&gt;

&lt;p&gt;コンピュータ・システムにおける閏秒の問題は概ね以下の2つに大別できる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;閏秒の挿入による見かけ上の時刻の巻き戻し&lt;/li&gt;
&lt;li&gt;タイムスタンプの処理&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以下，もう少し詳しく解説する。&lt;/p&gt;

&lt;h3 id=&#34;閏秒の挿入による見かけ上の時刻の巻き戻し&#34;&gt;閏秒の挿入による見かけ上の時刻の巻き戻し&lt;/h3&gt;

&lt;p&gt;現在，多くのコンピュータシステムは &lt;a href=&#34;https://tools.ietf.org/html/rfc5905&#34; title=&#34;RFC 5905 - Network Time Protocol Version 4: Protocol and Algorithms Specification&#34;&gt;NTP (Network Time Protocol)&lt;/a&gt; によって時刻同期を行っている。
閏秒が発生する際に &lt;a href=&#34;https://tools.ietf.org/html/rfc5905&#34; title=&#34;RFC 5905 - Network Time Protocol Version 4: Protocol and Algorithms Specification&#34;&gt;NTP&lt;/a&gt; では LI (Leap Indicator) をセットするのだが，閏秒を挿入する際には見かけ上の時刻の巻き戻しが発生する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;23:59:59.000000（→ 23:59:59.999999）→ 23:59:59.000000 → 00:00:00.000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サービスやアプリケーションのいくつか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:debug&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:debug&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; は「時刻の巻き戻し」が考慮されていないため，巻き戻しのタイミングで重大なエラーが発生する可能性がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5905&#34; title=&#34;RFC 5905 - Network Time Protocol Version 4: Protocol and Algorithms Specification&#34;&gt;NTP&lt;/a&gt; には LI をセットせず時刻の巻き戻しを行わない SLEW モードがあり，このモードにすることで問題を回避できる。
ただし SLEW モードは時刻のギャップが起きた際の同期に時間がかかるため，モードの使い分けが必要になるかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;タイムスタンプの処理&#34;&gt;タイムスタンプの処理&lt;/h3&gt;

&lt;p&gt;タイムスタンプは電子署名などでは欠かせない技術要素である（「否認防止（non-repudiation）」には正しい時刻が必要）。
タイムスタンプを提供するサービスでは厳密に UTC に準拠して運営されている。
したがって閏秒の瞬間に「2016年12月31日 23:59:60 UTC」といったタイムスタンプがセットされる可能性がある。&lt;/p&gt;

&lt;p&gt;このタイムスタンプを扱う際に処理系によっては誤動作を起こす可能性があるのだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/J_3woo86/items/8641b98c14278569ab94&#34;&gt;【殴り書き】javascriptにおけるうるう秒の調査 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/J_3woo86/items/31ffd000786273fd05e6&#34;&gt;【殴り書き】C#におけるうるう秒調査 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;タイムスタンプ・サービスを行っているプロバイダには，閏秒の前後でサービスを止めて「23:59:60 UTC」なタイムスタンプが発生しないようにしているところもあるようだ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;h3 id=&#34;技術情報&#34;&gt;技術情報&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/jp/blogs/news/look-before-you-leap-december-31-2016-leap-second-on-aws/&#34;&gt;事前にご確認ください – AWSにおける2016年12月31日（日本時間2017年1月1日）のうるう秒 | Amazon Web Services ブログ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/1036937.html&#34;&gt;Amazon AWS、うるう秒の1秒分を前後12時間の1秒を1/86400長くして吸収 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudplatform.googleblog.com/2016/11/making-every-leap-second-count-with-our-new-public-NTP-servers.html&#34;&gt;Google Cloud Platform Blog: Making every (leap) second count with our new public NTP servers&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/1033101.html&#34;&gt;Google、うるう秒の1秒分を前後20時間のクロック変更で吸収 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/1027910.html&#34;&gt;来年の元旦に「うるう秒」挿入、システム障害などのトラブル回避に向けて引き続き警戒を -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hitachi-support.com/alert/ss/HWS16-002/index.htm&#34;&gt;製品使用上の重要なお知らせ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tsukamoto/items/5bbecd29ac40ac16e039&#34;&gt;VMware製品へのうるう秒調整の影響 - Qiita&lt;/a&gt; : 最新版に更新されている

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;amp;cmd=displayKC&amp;amp;externalId=2126101&#34;&gt;NTP のスルー モードの有効化 (2126101) | VMware KB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.astroarts.co.jp/article/hl/a/8687&#34;&gt;「ステラナビゲータ10」10.0gアップデータ公開、うるう秒対応や不具合修正など - AstroArts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.seiko-cybertime.jp/time/column3.html&#34;&gt;サマータイム、うるう秒とタイムスタンプの関係｜タイムスタンプ入門｜セイコーサイバータイム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5905&#34;&gt;RFC 5905 - Network Time Protocol Version 4: Protocol and Algorithms Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3161&#34;&gt;RFC 3161 - Internet X.509 Public Key Infrastructure Time Stamp Protocol (TSP)&lt;/a&gt; （&lt;a href=&#34;https://www.ipa.go.jp/security/rfc/RFC3161JA.html&#34;&gt;日本語訳&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;その他の四方山話&#34;&gt;その他の四方山話&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eco.mtk.nao.ac.jp/koyomi/topics/html/topics2013_1.html&#34;&gt;閏秒(うるう秒)とは何か - 国立天文台暦計算室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.nao.ac.jp/contents/about-naoj/reports/report-naoj/11-34-2.pdf&#34;&gt;暦象年表の改訂について&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000840.shtml&#34;&gt;暦の改訂（DE405 から DE430 へ） — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2015/06/30/torvalds_leapsecond/&#34;&gt;Linux開発者リーナス・トーヴァルズ、来る「うるう秒」を語る｜WIRED.jp&lt;/a&gt; ： 2015年の記事&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/leap-second/&#34;&gt;うるう秒は当分存続らしい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/news/archive/nict_170110.html&#34;&gt;うるう秒で1秒長かった今年の元日｜ニュース/アーカイブ｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt; : 地球の自転について現在の観測方法を紹介している&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昔書いた以下の記事は内容が古くて地球時（terrestrial time; TT）などを含む座標時系への言及がないけど，閏秒に関する歴史的経緯を知るという意味では参考になるかもしれない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000109.shtml&#34;&gt;時刻系の話： 閏秒ができるまで － 序章 &amp;ndash; 戯れ言++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000118.shtml&#34;&gt;時刻系の話： 閏秒ができるまで － 恒星時系と世界時系 &amp;ndash; 戯れ言++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000127.shtml&#34;&gt;時刻系の話： 閏秒ができるまで － 暦表時系 &amp;ndash; 戯れ言++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000130.shtml&#34;&gt;時刻系の話： 閏秒ができるまで － 原子時系と閏秒 &amp;ndash; 戯れ言++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000147.shtml&#34;&gt;時刻系の話： 閏秒ができるまで － 新しい暦計算システムと力学時 &amp;ndash; 戯れ言++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805202254/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51mQCyP04rL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805202254/baldandersinf-22/&#34;&gt;天体の位置計算&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;長沢 工 &lt;/dd&gt;&lt;dd&gt;地人書館 1985-09&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805206349/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4805206349.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;日の出・日の入りの計算―天体の出没時刻の求め方&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4769908180/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4769908180.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文計算入門―一球面三角から軌道計算まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805204141/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4805204141.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;パソコンで見る天体の動き&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416114710/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4416114710.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文年鑑2015年版&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00R4X7R0M/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00R4X7R0M.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;月刊 星ナビ 2015年 02月号 [雑誌]&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-01-11&#34;&gt;2015/01/11&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01JFLCW5K/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51EnYDL31WL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01JFLCW5K/baldandersinf-22/&#34;&gt;猫暦 ねこよみ コミック 1-3巻セット (ねこぱんちコミックス)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ねこしみず 美濃 &lt;/dd&gt;&lt;dd&gt;少年画報社 2016-07-11&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「寛政の改暦」のころの伊能勘解由（忠敬）とその妻とされる「おえい」の物語。感想は&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/nekoyomi/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-11-29&#34;&gt;2016-11-29&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ut&#34;&gt;もう少し詳しく言うと UT は恒星時系の一種である太陽時系である。恒星時は「春分点の子午線からの時角」であるのに対して UT は「平均太陽のグリニジ子午線からの時角＋12時」となる（子午線を基準にすると昼間に日付が変わるため）。両者は同じ物差し（地球の自転速度）で求められた時刻系であり数学的関係があるため互いに換算可能である。ちなみに平均太陽というのは天球上にある太陽の移動速度を均した仮想太陽である。実際の太陽（真太陽）は季節によって天球上での移動速度が異なる。これは地球の公転軌道が楕円になっているからだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ut&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:es&#34;&gt;地球の自転は（潮汐摩擦などにより）大雑把に言って少しずつ遅くなる傾向にある。実はこれが分かったのって20世紀に入ってからなのだよ（問題の認識は19世紀後半からあった）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:es&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ut2&#34;&gt;観測から得られた時刻を UT0 と呼ぶ。 UT0 に対し極運動等の補正をかけたものを UT1 と呼ぶ。現在 UT と言う場合にはこの UT1 を指す。 UT2 は UT1 から更に自転速度の季節変動分を均した値である。現在の UTC が採用されるまでは UT2 が主に使われていたらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ut2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:tai&#34;&gt;現在の TAI の定義は「回転するジオイド上で実現される SI の秒を目盛りの単位とした, 地心座標系で定義される座標時（coordinate time）の目盛り」（&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%9B%BD%E9%9A%9B%E5%8E%9F%E5%AD%90%E6%99%82&#34; title=&#34;国際原子時 - Wikipedia&#34;&gt;訳は Wikipedia より&lt;/a&gt;）となっている。ちなみに「SI の秒」は「セシウム 133 の原子の基底状態の2つの超微細構造準位の間の遷移に対応する放射の周期の9192631770倍の継続時間」（&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E7%A7%92&#34; title=&#34;秒 - Wikipedia&#34;&gt;訳は Wikipedia より&lt;/a&gt;）である。この「SI の秒」を使っている時刻系は全て原子時系とも言える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tai&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:410&#34;&gt;これ以外には4月1日直前および10月1日直前も第2優先日として閏秒が発生する可能性があるが，過去においてこの日に閏秒が発生したことはない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:410&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:debug&#34;&gt;2012年の閏秒の挿入時には数多くのサービスに障害が発生したが，その後の改善や回避策により2015年には大きな混乱もなく閏秒を迎えられた。なお Linux 系のシステムには &lt;code&gt;right/Asia/Tokyo&lt;/code&gt; のような閏秒を考慮したタイムゾーンも存在するが，旧来の &lt;code&gt;Asia/Tokyo&lt;/code&gt; のようなタイムゾーンとの間で UNIX Time の互換性がなくなるのとタイムスタンプ処理と同じ問題が発生してしまうため推奨されないことも多い。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:debug&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>鬼（もの）のインターネット - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/internet-of-mono/" />
		<id>tag:text.Baldanders.info,2016-11-03:/remark/2016/11/internet-of-mono/</id>
		<published>2016-11-03T22:18:00+09:00</published>
		<updated>2016-11-03T22:18:00+09:00</updated>
		<summary>つまり，今のインターネットでは，結果的に，より多くの「モノ」を自分たちの陣営に「包摂」した者こそが「覇権」を握るのである。量こそ正義！ まさに民主主義の典型ではないか（笑）</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;もともとの Internet of Things はいわゆる &lt;a href=&#34;http://www.yamdas.org/column/technique/sensor.html&#34;&gt;Sensorware&lt;/a&gt; の文脈で語られたもののようだが，2010年代に入って定義が変質する（よくある話）。&lt;/p&gt;

&lt;p&gt;たとえば「&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/H02/H02HO035.html&#34;&gt;特定通信・放送開発事業実施円滑化法&lt;/a&gt;」には以下の記述がある。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;インターネット・オブ・シングスの実現（インターネットに多様かつ多数の物が接続され、及びそれらの物から送信され、又はそれらの物に送信される大量の情報の円滑な流通が国民生活及び経済活動の基盤となる社会の実現をいう。）&lt;/q&gt;
（第五条 ２ 一）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/H02/H02HO035.html&#34;&gt;特定通信・放送開発事業実施円滑化法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;また経産省の「&lt;span&gt;&lt;a href=&#34;http://www.meti.go.jp/press/2016/07/20160705002/20160705002-1.pdf&#34;&gt;IoTセキュリティガイドライン ver1.0&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;」では ITU の定義を引いて&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;IoT とは”Internet of Things”の略であり、ITU（国際電気通信連合）の勧告（ITU-T Y.2060(Y.4000)）では、「情報社会のために、既存もしくは開発中の相互運用可能な情報通信技術により、物理的もしくは仮想的なモノを接続し、高度なサービスを実現するグローバルインフラ」とされ&lt;/q&gt;
（p.7，「1.3.1 IoT とは」）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.meti.go.jp/press/2016/07/20160705002/20160705002-1.pdf&#34;&gt;IoTセキュリティガイドライン ver1.0&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;と記してある。&lt;/p&gt;

&lt;p&gt;ポイントは「モノ（things）」自体は単なる PC (Programmable Controller) に過ぎず（intelligent ではない），その制御は主にインターネット側の「（intelligent な）誰か」が行う点にある。
問題は「モノ」を制御する「誰か」も programmable （というか hackable）であることで，更にその「モノ」が無数（それこそ何億という単位で）にネットに繋がってしまっていることだ。
まるで「蛍火の光く神」の如く（笑）&lt;/p&gt;

&lt;p&gt;つまり，今のインターネットでは，手段の如何に関わらず，より多くの「モノ」を自分たちの陣営に「包摂」した者こそが「覇権」を握るのである。
量こそ正義！ まさに近代の夢，民主主義の典型ではないか（笑）&lt;/p&gt;

&lt;p&gt;先日の DDoS のように，包摂された「モノ」が犯罪に使われれば確かにセキュリティ問題と言えるが，一方でこれが政治宣伝に利用されれば政治問題だし，軍事作戦に使われれば軍事問題である。
あるいはもっとつつましく家中のスマート家電を操って特定のお店でしか買い物をしないよう仕向ける，なんてなこともできるかもしれない。&lt;/p&gt;

&lt;p&gt;まったく “&lt;a href=&#34;https://krebsonsecurity.com/2016/09/the-democratization-of-censorship/&#34;&gt;The Democratization of Censorship&lt;/a&gt;” とはよく言ったものである。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35051376/&#34;&gt;「モノのインターネット」&amp;ndash;定義はどこまで拡散するのか - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yamdas.org/column/technique/sensor.html&#34;&gt;Sensorware（前編）&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yamdas.org/column/technique/sensor2.html&#34;&gt;Sensorware（後編）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://archive.wiredvision.co.jp/blog/yomoyomo/200905/200905141600.html&#34;&gt;Sensorwareふたたび | ワイアードビジョン アーカイブ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50744439.html&#34;&gt;エフセキュアブログ : スマートホームの安全を保つ方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.unixuser.org/~euske/doc/tiotiwiaou/index.html&#34;&gt;モノのインターネットはすさまじく危険だ - そして多くはパッチ不可能である by Bruce Schneier (The Internet of Things Is Wildly Insecure - And Often Unpatchable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.business.f-secure.com/the-simple-reason-iot-devices-are-so-hackable/&#34;&gt;IoTデバイスがハッキングされやすい簡単な理由 | Business Security Insider Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20161030/iotsecurity&#34;&gt;我々は「モノのインターネット」からインターネットを守る必要がある、ところまで来てしまったのか - YAMDAS現更新履歴&lt;/a&gt; ： この記事のリンク先も必見&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書？&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/456008193X/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/315iNBEKHLL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/456008193X/baldandersinf-22/&#34;&gt;鬼と天皇（新装版）&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;大和 岩雄 &lt;/dd&gt;&lt;dd&gt;白水社 2012-01-18&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4584393788/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4584393788.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;もうひとつの日本史 闇の修験道 異端の古代史5 (ワニ文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4309226159/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4309226159.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;諏訪の神: 封印された縄文の血祭り&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4908117039/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4908117039.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天皇と鬼&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/499065692X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/499065692X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;失われた十部族の足跡　イスラエルの地から日本まで　－新書版－&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480083774/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480083774.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;雨月物語 (ちくま学芸文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4054061605/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4054061605.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;日本とユダヤ 聖徳太子の謎 (ムー・スーパー・ミステリー・ブックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4884698207/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4884698207.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;富士山、2200年の秘密 なぜ日本最大の霊山は古事記に無視されたのか&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「鬼は天皇の影法師であり，両者の関係は「かくれんぼう遊び」に喩えることができる」（当時の帯より）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-11-03&#34;&gt;2016-11-03&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>AI は人（の良心）を殺すか？ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/10/artificial-intelligence/" />
		<id>tag:text.Baldanders.info,2016-10-12:/remark/2016/10/artificial-intelligence/</id>
		<published>2016-10-12T00:39:24+09:00</published>
		<updated>2017-01-16T12:44:51+09:00</updated>
		<summary>「正義」とか「良心」とかいうのは人の不完全さの象徴である。その不完全さが人のアイデンティティだというのなら，そんな種は進化の階梯を機械に譲ったほうがいい。でも実際には，私たちは種としてもっと先に進めるはずである，と私は思う。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/&#34; title=&#34;YAMDAS現更新履歴&#34;&gt;yomoyomo&lt;/a&gt; さんの最近の記事は文章や記事の間の「行間」が絶妙に繋がってる感じで色々と触発されます。
まぁ私のは妄言・妄想ですけどw）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#conscience&#34;&gt;良心について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nothing&#34;&gt;「良心」の無意味化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#alg&#34;&gt;「信頼に値するアルゴリズム」とは（追記：2016-10-15）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#trolley-problem&#34;&gt;AI は「トロッコ問題」をどう解くか（再掲載）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#virus&#34;&gt;IV 型ウイルス（追記：2016-10-18）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bookmark&#34;&gt;ブックマーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reference&#34;&gt;参考図書&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conscience&#34;&gt;良心について&lt;/h2&gt;

&lt;p&gt;ふだん私たちは何の前提もなく「良心」という言葉を使う。
そして人には必ず「良心」が存在すると思っている。
で，「良心」のない（あるいはないように見える）人に対して「ひとでなし」とか「冷血漢」とか言って排除しようとする。
でも，排除される側からすれば「他人を「ひとでなし」と言う貴方の「良心」って何なの？」と思ってしまうわけだ。&lt;/p&gt;

&lt;p&gt;実際には「良心」というのは人の中にあるのではなく人と人の間にあるものである。
そしてこれを「人と機械」という関係に拡張したらどうなるのだろう。&lt;/p&gt;

&lt;p&gt;「良心」は哲学の問題であり社会なんとか学の問題だった。
でも「人と機械」の間に良心を組み込もうとするなら，それは工学の問題にもなってくる。
はたして工学は「良心」を定義できるのだろうか。&lt;/p&gt;

&lt;h2 id=&#34;nothing&#34;&gt;「良心」の無意味化&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2016/06/54411/&#34;&gt;ユートピアのキモさと人工知能がもたらす不気味の谷 - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20161010/kobayashihideo&#34;&gt;人工知能は人間を人間でなくすのか？ - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;感情とか表情とかいうものは「他者」を認識して初めて意味を成す。
世界の始まりから自分一人しか存在しないとして，喜怒哀楽を感じたり，ましてやそれを表現することに意味があるとは思えない。&lt;/p&gt;

&lt;p&gt;人は言葉のみにて話すわけではない。
身振り手振りや顔の表情，匂いや触覚など五感を駆使して「会話」し，お互いに文脈を形成・共有する。
機械が HMI (Human Machine Interface) を備えるなら人の表情（顔の表情だけとは限らない）やそれに伴う感情を読み取ろうとするのは自然な流れだし，たぶん必要なことである。
そうしなければ機械と人との間で文脈を形成できない。
機械が人の感情に対してどう「思う」かは別にして。&lt;/p&gt;

&lt;p&gt;問題があるとするならそれは機械の側にではなく，あくまで機械を含むシステム（もっと言えば社会）を設計する側にある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;たとえば，秘密を持つことや嘘をつくことがある文脈において必要な情報コントロール（嘘も方便）であるなら，技術的に可能だからといってわざわざそれを暴き立てることがシステムにとってどのような結果をもたらすか，といったことである。
あるユーザに関する evidence のみが必要なのであれば，そのユーザが嘘をついているかどうか推測するのは「過剰」だ。&lt;/p&gt;

&lt;p&gt;確かに小林秀雄さんの「「良心」の無意味化」の話&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; は考えさせられるところもあるが，現代は（もちろんインターネットも含めて）既にそういう時代になっている。照魔鏡ほど威圧的ではないかもしれないが。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;後期近代社会における社会統制の基調にあるもの、それは「保険統計主義」である。
すでにみたように〔第2章の表2-2（一一九頁）〕、ここでは正義を追求することよりも被害を最小限にすることが求められている。
そして犯罪や逸脱の原因を探ったところで犯罪という社会問題は解決しないとみなされている。
保険統計主義の中心にあるのはリスク計算である。
それは精度の高い確率論的解析であり、そこで注意が向けられるのは問題の原因ではなく、その問題が起こる蓋然性である。
保険統計主義にとって重要なのは、正義ではなく、被害の最小化である。
それが目的とするのは、世界から犯罪をなくすことではなく、損害を最小限にする効果的手段である。
それが追求するのは、ユートピアをつくりだすことではなく、敵意に満ちたこの世界に塀で囲まれた小さな楽園をできるだけ多くつくりだすことである。&lt;/q&gt;
（p.170）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この社会のどこに「良心」の余地があるというのだろう。
人が「性善」だろうが「性悪」だろうが関係ない。
私たちは「保険統計主義」が示す「正解」のとおりに行動しなければ排除されてしまうのだから。
そしてそれは近代文明が求めた結果なのである。
良いか悪いかは別にして。&lt;/p&gt;

&lt;p&gt;AI (Artificial Intelligence) はたまたま再流行してこれから何か影響を及ぼすのではなく「保険統計主義」な時代の要請で必然的に台頭してきている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; （もちろん AI が台頭することによって他の様々なことが変化するだろうけど，それは別の話）。
ある分野やシーンで機械が台頭してくればそこで職を失う人は当然出るだろうし（それは私かもしれない），「「良心」の無意味化」は AI の登場に関わらずとっくに起きている。&lt;/p&gt;

&lt;h2 id=&#34;alg&#34;&gt;「信頼に値するアルゴリズム」とは（追記：2016-10-15）&lt;/h2&gt;

&lt;p&gt;上で&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「問題があるとするならそれは機械の側にではなく，あくまで機械を含むシステム（もっと言えば社会）を設計する側にある。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;などと無責任に書いたが，実際には並大抵のことではない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2016/10/56935/&#34;&gt;我々は信頼に足るアルゴリズムを見極められるのか？ - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://drive.google.com/file/d/0B-wQVEjH9yuhanpyQjUwQS1JOTQ/view&#34;&gt;Equality of Opportunity in Supervised Learning&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/10/10/20161007google-aims-to-prevent-discriminatory-ai-with-equality-of-opportunity-method/&#34;&gt;Google、AIから偏見を排除する方法を研究中 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2017/01/16/20170114putting-the-intelligent-machine-in-its-place/&#34;&gt;機械と人間の役割分担を見つめ直してみよう | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;機械学習なんて体のいい「洗脳」であるが，その洗脳から必然的に生まれる「偏見」を数学的手法で排除しようとするのがいかにも Google らしい。
でも，そうしたロジックも含めて実装し評価するのは人なのである（今のところ）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/&#34; title=&#34;YAMDAS現更新履歴&#34;&gt;yomoyomo&lt;/a&gt; さんの「&lt;a href=&#34;https://wirelesswire.jp/2016/10/56935/&#34;&gt;我々は信頼に足るアルゴリズムを見極められるのか？&lt;/a&gt;」ではオライリーによる「特定のアルゴリズムが信頼に値するか評価する指針」を紹介している。
曰く，以下の4つだ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;アルゴリズムの作者がどんな出力結果を求めているか明確にし、外部の観察者がその出力結果を検証できる。&lt;/li&gt;
&lt;li&gt;そのアルゴリズムが成功しているか測定可能である。&lt;/li&gt;
&lt;li&gt;アルゴリズムの作者の目指すものが、そのアルゴリズムの利用者の目指すものと足並みを揃えている。&lt;/li&gt;
&lt;li&gt;そのアルゴリズムは、その作者と利用者をより良い長期的な意思決定に導くか？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1 から 3 は要するに「基準（criteria）」からの「逸脱（deviation）」がないかということなのだが，そもそもその criteria が正しいものなのか評価することが難しい。
テストすることは設計することと同じなのである（TDD 的にはね）。&lt;/p&gt;

&lt;p&gt;そして 4 を満たす製品・サービスはほとんどど無いと思われる。
何故なら長期に渡って要求が変わらないシステムなどありえないし，まず前提として「信頼」の評価は過去の事象に対してのみ可能であり未来については「予測」しかできない。
予測であれば必ず「予断」が混入するものである。
バグのないプログラムがほとんど不可能であるように予断のない予測もほぼ不可能だ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ana&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ana&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;私なら以下の5つ目を加える。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;失敗に対する対処が比較的容易である。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;長く運用していれば必ず何かの「失敗」が起きる。
失敗が起きた時にベンダは指を咥えて見ているだけでユーザは泣き寝入りするしかないシステムは許容できない。&lt;/p&gt;

&lt;h2 id=&#34;trolley-problem&#34;&gt;AI は「トロッコ問題」をどう解くか（再掲載）&lt;/h2&gt;

&lt;p&gt;（&lt;a href=&#34;http://text.baldanders.info/remark/2015/1103-diary/#trolley-problem&#34;&gt;以前書いた記事&lt;/a&gt;をちょっと弄って再掲載&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:replay&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:replay&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogos.com/article/142284/&#34;&gt;完全自動運転自動車とトロッコ問題について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/ta26/20151104&#34;&gt;自動運転車の法律問題を総括すると見えてくる難解な課題 - 風観羽　情報空間を羽のように舞い本質を観る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これって「&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00O1VK072/baldandersinf-22/&#34;&gt;われはロボット&lt;/a&gt;」だよね。&lt;/p&gt;

&lt;p&gt;明らかに「正しい解」がない場合，いくつかの近似解の中から妥当と思われるものを選ぶしかない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b2&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
「緊急避難」というのは「正しい解」が存在しない場合に「近似解でいいんだよ」ということを法的に担保するものだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c2&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。
でも，どの解を選んでも結局「正しい解」ではないのだ。
だから人は葛藤し，さらに後悔する。&lt;/p&gt;

&lt;p&gt;AI は（今のところ）近似解に葛藤したりしない。
もちろん後悔だってしない。
その解に辿り着いたのは，機械が自ら考えたのではなく，あくまでも構築された論理と学習に沿って必然的に導かれたものなのだから（たとえ解への道筋が人には理解できないものだとしても）。
じゃあ機械が導き出した解を実行した結果の責任は誰が取るの？ ってことである。&lt;/p&gt;

&lt;h2 id=&#34;virus&#34;&gt;IV 型ウイルス（追記：2016-10-18）&lt;/h2&gt;

&lt;p&gt;毎度『BOOM TOWN』ネタで申し訳ないが，この作品の中に AI に感染するウイルスが登場する。
このウイルスは AI の学習パターンを少しずつ変質させるため発見が遅れることが多く，ある日突然 AI が使い物にならなくなるという厄介なものだ。&lt;/p&gt;

&lt;p&gt;まぁ，ここまで極端でなくても AI に干渉する要素というのはいくらでもあるものだ。
しかもそこに悪意の有無は関係ない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/25/20160324microsoft-silences-its-new-a-i-bot-tay-after-twitter-users-teach-it-racism/&#34;&gt;MicrosoftがAIチャットボット、Tayを停止―人種差別ジョークで機械学習の問題点が明らかに | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これは機械が人とのコミュニケーションを行うようになれば必ず起こり得る問題であり，それを「修正」しようとすれば更に恣意が入り込むことになる。
もし仮に人と機械との間に「良心」が組み込まれたとしても，それが書き換えられる可能性は常にあるのだ。（でもそれは人だって同じことだけどね）&lt;/p&gt;

&lt;h2 id=&#34;bookmark&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/artificial-intelligence/&#34;&gt;人工知能は「ハイル・ヒトラー」と叫ぶか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/08/pinocchio/&#34;&gt;「ピノキオ」と AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ne.jp/asahi/comp/tarusan/main260.htm&#34;&gt;コンピュータが次々と間違える時代。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gendai.ismedia.jp/articles/-/50660&#34;&gt;なぜいま「ロボット倫理学」が必要か〜問題はすでに起きている（岡本 慎平） | 現代ビジネス | 講談社&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/417iD4x5N%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジョック ヤング Jock Young &lt;/dd&gt;&lt;dd&gt;洛北出版 2007-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764331/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764331.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;後期近代の眩暈―排除から過剰包摂へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4255008515/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4255008515.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;断片的なものの社会学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796700439/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4796700439.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スティグマの社会学―烙印を押されたアイデンティティ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764242/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764242.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新しい貧困 労働消費主義ニュープア&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062881357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062881357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;弱者の居場所がない社会――貧困・格差と社会的包摂 (講談社現代新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000410.shtml&#34;&gt;感想はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/31e2h91IUWL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22/&#34;&gt;イノベーション 悪意なき嘘 (双書 時代のカルテ)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;名和 小太郎 &lt;/dd&gt;&lt;dd&gt;岩波書店 2007-01-11&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「両用技術とはどのようなものか。その核心には「矛と楯の論理」がある」（まえがき「予断・診断・独断 そんなばかな」より）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-10-01&#34;&gt;2015-10-01&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4167107120/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51SERF7MQRL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4167107120/baldandersinf-22/&#34;&gt;考えるヒント (文春文庫)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;小林 秀雄 &lt;/dd&gt;&lt;dd&gt;文藝春秋 2004-08&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4167107139/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4167107139.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;考えるヒント〈2〉 (文春文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4167107147/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4167107147.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;考えるヒント3〈新装版〉 (文春文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4122005426/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4122005426.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;人生について (中公文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4101007098/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4101007098.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;直観を磨くもの: 小林秀雄対話集 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4101007047/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4101007047.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;モオツァルト・無常という事 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410100708X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410100708X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;人間の建設 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4101007063/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4101007063.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;本居宣長〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4101007071/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4101007071.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;本居宣長〈下〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4120045404/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4120045404.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;読書について&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4101007039/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4101007039.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ドストエフスキイの生活 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;学生時代に受験対策で読んでるはずなんだけどなぁ。あんまり憶えてない。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-10-12&#34;&gt;2016-10-12&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B013UQUH80/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/C1RBaQMQg4S._SL160_.png&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B013UQUH80/baldandersinf-22/&#34;&gt;[まとめ買い] キカイダー02（角川コミックス・エース）&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ＭＥＩＭＵ 石ノ森 章太郎 &lt;/dd&gt;&lt;dd&gt; &lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「キカイダー」を神秘学的視点で再解釈する（笑）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-08-18&#34;&gt;2016-08-18&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00O1VK072/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51UzGYXJ70L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00O1VK072/baldandersinf-22/&#34;&gt;われはロボット〔決定版〕&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;アイザック アシモフ 小尾芙佐 &lt;/dd&gt;&lt;dd&gt;早川書房 2014-04-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00O2O7JFY/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00O2O7JFY.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;鋼鉄都市&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00N4FBCR8/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00N4FBCR8.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;第二ファウンデーション&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00N4FBCUU/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00N4FBCUU.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ファウンデーション対帝国&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00N4FBCO6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00N4FBCO6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ファウンデーション&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00N4FBCQO/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00N4FBCQO.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;サリーはわが恋人&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;ロボットや AI の SF ならこれが古典で定番か？ 面白かったら続けて『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00O2O7JFY/baldandersinf-22/&#34;&gt;鋼鉄都市&lt;/a&gt;』も読むとよい。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-03&#34;&gt;2015-11-03&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NWQI4N4/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51Ia%2B77IpiL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NWQI4N4/baldandersinf-22/&#34;&gt;BOOM TOWN　TRIP.30&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;内田 美奈子 &lt;/dd&gt;&lt;dd&gt; 2014-09-26&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NWQI4DE/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00NWQI4DE.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;BOOM TOWN　４&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NWQI4D4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00NWQI4D4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;BOOM TOWN　２&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NWQI4CA/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00NWQI4CA.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;BOOM TOWN　３&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NWQI49S/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00NWQI49S.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;BOOM TOWN　１&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NWQI4B6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00NWQI4B6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アンバランス・トーキョー&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;掲載誌「コミックガンマ」が休刊になって単行本収録できなかった&lt;del&gt;まるぼし&lt;/del&gt;まぼろしの30話。これが Kindle で読めるとはいい時代になったものです。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-06-05&#34;&gt;2016-06-05&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;もちろん機械が自律的にものを創造できるようになれば話は変わってくるが，とりあえず今はそんな心配はない（笑） 技術の両義性の問題は昔から言われていることではあるが，少なくとも「技術が世界を変える」という幻想はそろそろ捨てるべきだと思う。それは近代の「科学万能主義」とさして変わらない発想である。人の社会を動かし変えるのはあくまで人の意思と行動であり，インターネットや SNS といったものは「背中をもうちょっと押してくれる」程度に考えるべきだろう。それはそれで重要なことなんだけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b&#34;&gt;小林秀雄著『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4167107120/baldandersinf-22/&#34;&gt;考えるヒント&lt;/a&gt;』の「良心」より：  「もし、嘘発見機に止まらず、これが人間観察装置として、例えば、閻魔の持っている照魔鏡のような性能を備えるに至ったならどうなるだろうか。その威力に屈服しない人間はいなくなるだろう。誰にも悪い事は出来なくなるだろうが、その理由はただ為（し）ようにも出来ないからに過ぎず、良心を持つ事は、誰にも無意味な事になろう。」
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c&#34;&gt;「&lt;a href=&#34;http://jp.techcrunch.com/2016/05/17/20160510please-dont-learn-to-code/&#34;&gt;頼むからプログラミングを学ばないでくれ | TechCrunch Japan&lt;/a&gt;」 より： 「プログラミングが注目されたことにより，問題を理解することよりも，それを「正しい方法で」解決することに重きが置かれるようになった。」
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ana&#34;&gt;予断だらけの予測を「&lt;ruby&gt;&lt;rb&gt;天数演繹&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;うらない&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;」と言う（笑） 私は「アナリスト」は「競馬の予想屋」と同業種だと思っている人なのであしからず。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ana&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:replay&#34;&gt;自己防衛的な措置として，このサイトでは安易に「知性（intellect）」という言葉を使わないことにした。今まで私は知性は「知能（intelligence）」の延長線上にあるものとしてあまり区別してなかった（哲学（つか神学）上の intellectus と intelligentia の違いがピンとこなくて）。が，どうもそういう解釈をしている人は少なそうである。なかには知能の反対が知性だという人もいるっぽい。そういう前提条件が異なる状態では議論にも参考にもならない（議論するためには前提となるものの擦りあわせが必要）。このサイトの記事についても遡って修正することにする。本家サイトは（若気の至りということで）とりあえず放置。まぁ「知能」の概念が大きく乖離することはあるまい。「知能＝学力」みたいに勘違いしてる人はいるかもだが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:replay&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b2&#34;&gt;もちろん「何も選ばない」というのも選択肢のひとつである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c2&#34;&gt;しかし，法的に担保されているからといって倫理・道徳的に問題がないとは限らない。しかも倫理観・道徳観念というのは，特に個人主義が進んだ現代では，かつての「大きな物語（meta-narrative）」ほどには機能しない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ハード屋が書く C ソースコードが凄まじかった思い出（再掲載） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/06/code-by-hardware-engineer/" />
		<id>tag:text.Baldanders.info,2016-06-04:/remark/2016/06/code-by-hardware-engineer/</id>
		<published>2016-06-04T09:08:09+09:00</published>
		<updated>2016-06-04T09:08:09+09:00</updated>
		<summary>この件では，若いころのほろ苦い思い出がある。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;これは&lt;a href=&#34;https://medium.com/@spiegel/-1ca9e4895f4c&#34;&gt;ちょうど1年前に Medium で書いた記事&lt;/a&gt;の再掲載である。
今は Medium を全く利用しないので，昔書いたもので（私が）面白いと思った記事は少しずつこっちに移転しようかな。&lt;/p&gt;

&lt;hr /&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この記事で面白いのは、Michael Barr が20ヶ月以上にわたりトヨタ車で使われているソースコードを、Philip Koopman カーネギーメロン大学教授がトヨタのエンジニアリングの安全プロセスを精査した話で、両者ともトヨタのソフトウェアがスパゲッティコード山盛りなことを証言している。
&lt;br&gt;
トヨタの生産方式はアジャイル方面においてソフトウェア開発手法に多大な影響を与えている。ところでそのトヨタが開発するソフトウェアの品質はどうなんだろう、というのは多くの人の頭に浮かぶ疑問だろう。組み込みソフトウェアのエキスパートによると、ものすごく複雑で、複雑すぎてテストもメンテもできない関数がたくさんあるとか、グローバル変数が1万個以上あるとかなかなか壮絶らしい……。マジかよ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20150604/toyota&#34;&gt;トヨタの車のソースコードはスパゲッティコード山盛り？ - YAMDAS現更新履歴&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この件では，若いころのほろ苦い思い出がある。&lt;/p&gt;

&lt;p&gt;私は若いころは「システムハウス」と呼ばれる類の会社にいたのだが，そこではハードとソフトの両面で開発を進められるのが「売り」だった。
&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000529.shtml&#34; title=&#34;私はこうしてプログラミングを覚えた — Baldanders.info&#34;&gt;私はハードは壊滅的にダメ&lt;/a&gt;なのでソフトウェア担当。
当時のハード屋は自分が組んだ回路の実証のために自分でもプログラムを組んで動作確認する。
私たちソフト屋はそのコードをもらって実際のコードを書くわけだが，この実証コードが凄まじかった。&lt;/p&gt;

&lt;p&gt;まず変数は全てグローバル変数。
スコープとかカプセル化なんて知るか！ という気概が感じられる。
そして関数は果てしなく長い main 関数のみ。
無間地獄のネスト。
goto 文で飛びまくり。
なのに異常系の記述は皆無。
世に聞く「スパゲッティ・コード」とはこのようなものなのかと感嘆したよ。&lt;/p&gt;

&lt;p&gt;一番凄かったのは，とあるチップを使った30次のバンドパスフィルタを組むのに「サンプルがあるから簡単でしょ」と言われてサンプルを見たら世にも悍ましいコードで，解析するだけで半月もかかってしまった。&lt;/p&gt;

&lt;p&gt;まぁ，ハード屋がこういうコードを書くのは理由があって，変数を記述するときはメモリ上のマッピングをそのまま置き換えようとするし，ロジックも基本的にマシン語のインストラクションをそのまま C に置き換えようとするから「関数」という概念がそもそもないことが多い&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;おかげで私は「他人のコードを読む」ことがすんごい得意になってしまった。
アレに比べればソフト屋の書くコードなんて絵本を読むように分かりやすい（笑） でも，こんなしょうもない特技でも後年ちゃんと役に立ってるんだから世の中というのは分からないものである。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/427406932X/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51llL1uygcL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/427406932X/baldandersinf-22/&#34;&gt;リーン開発の現場 カンバンによる大規模プロジェクトの運営&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Henrik Kniberg 角谷 信太郎 &lt;/dd&gt;&lt;dd&gt;オーム社 2013-10-26&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4897979358/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4897979358.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハイブリッドアジャイルの実践&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/462108786X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/462108786X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Fearless Change アジャイルに効く アイデアを組織に広めるための48のパターン&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/482228350X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/482228350X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;リーン開発の本質&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798130613/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798130613.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ディシプリンド・アジャイル・デリバリー エンタープライズ・アジャイル実践ガイド (Object Oriented SELECTION)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117097/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117097.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Serverspec&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「かんばん方式」もだいぶ浸透してきましたよね。私はこれで勉強しました。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-02-17&#34;&gt;2015/02/17&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;ハード屋は call インストラクションを「特殊なジャンプ」程度にしか認識していない（まぁ確かにそうなのだが）。あるプロジェクトで見せてもらったアセンブラコードでは call で積んだスタックをいじって戻り先アドレスを変えて return する記述が頻出していた。これはアセンブラ・コードにパッチを当てる際の基本テクニックらしい。大昔の話だよ（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： まじめに規制に従っている人ほど馬鹿を見る社会 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/10-stories/" />
		<id>tag:text.Baldanders.info,2016-04-10:/remark/2016/04/10-stories/</id>
		<published>2016-04-10T18:44:29+09:00</published>
		<updated>2016-11-09T15:18:42+09:00</updated>
		<summary>まじめに規制に従っている人ほど馬鹿を見る社会 / Linux サブシステムは Windows の終わりの始まり / 鍵管理システム CONIKS / Go 言語を使うようになって変わったこと / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;3月は去りました。
春になっちゃったよ。&lt;/p&gt;

&lt;p&gt;うっかり左手首を痛めてしまった（疲労がたまるとたまになる）のでいろいろ控えてた。
溜まりまくった小ネタを消化しないと。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#code&#34;&gt;まじめに規制に従っている人ほど馬鹿を見る社会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bash&#34;&gt;Linux サブシステムは Windows の終わりの始まり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pki&#34;&gt;鍵管理システム CONIKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#go&#34;&gt;Go 言語を使うようになって変わったこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;code&#34;&gt;まじめに規制に従っている人ほど馬鹿を見る社会&lt;/h2&gt;

&lt;p&gt;もう何度も書いているが「警察にできることは犯罪者にもできる」。
問題は犯罪者にできることが警察にもできるかどうか駄菓子菓子&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/society/35080404/&#34;&gt;米政府によるスマホデータ取り出しの協力要請、ACLUが実態調査 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/01/news114.html&#34;&gt;FBIのiPhoneロック解除方法、Appleに知らされない可能性も (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/08/news060.html&#34;&gt;FBI長官、「購入したロック解除ツールはiPhone 5sでは機能しなかった」 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/04/09/20160408justice-department-keeps-pushing-apple-to-unlock-iphone-in-new-york-drug-case/&#34;&gt;司法省がまたAppleにiPhoneアンロック要求、今度はAppleが“相手を間違えた”国を訴訟か | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FBI が端末を突破するのに外部企業を使ったということ，そして企業がそれに応じたことは重要だ。
もちろん実は NSA の息のかかった企業だった，としても驚かないけど。&lt;/p&gt;

&lt;p&gt;企業は利があると思えば警察にも犯罪者にだって加担する。
今回の件のポイントは「犯罪者にできることが警察にできるとは限らない」と証明してしまったことだ。
セキュリティ企業は新しい時代の「死の商人」になるかもしれない。&lt;/p&gt;

&lt;p&gt;警察が優位に立てるのは犯罪者よりもパワー（暴力・権力を含む）を有している場合のみである。
コンピュータ・ネットワーク技術あるいは暗号技術において政府・警察は優位に立てない。
米国司法省は法規制によって優位に立てると思ってるようだが，こんなもの最初から「法の外」にいる犯罪者やテロリストに対しては効力がない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/09/news022.html&#34;&gt;暗号化解除をめぐる米法案、司法当局へのバックドア提供を義務付け - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/society/35080962/&#34;&gt;バックドア提供を拒む企業に制裁金を&amp;ndash;米国で法案が公開 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これは「飲酒運転を減らすために飲酒運転規制を厳罰化する」というのとは話が違う。
犯罪者にはインパクトがないし，まじめに規制に従っている人ほど「馬鹿を見る」ことになる。&lt;/p&gt;

&lt;p&gt;有害なルールに従う必要はないし，それに従うことはむしろリスクを高めることになる。&lt;/p&gt;

&lt;h2 id=&#34;bash&#34;&gt;Linux サブシステムは Windows の終わりの始まり&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/31/20160330be-very-afraid-hell-has-frozen-over-bash-is-coming-to-windows-10/&#34;&gt;Build 2016で驚きの発表―Microsoftはこの夏Windows 10でBashシェルをサポート | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35080406/&#34;&gt;「Windows 10」で動作するUbuntuのBashシェル&amp;ndash;その実現方法 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://satonaoki.wordpress.com/2016/03/31/bash-ubuntu-windows/&#34;&gt;開発者がWindows 10でBashシェルとユーザー モードのUbuntu Linuxバイナリを実行可能に | S/N Ratio (by SATO Naoki)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/mariadbmariadb_columnstoreolap.html&#34;&gt;MariaDB、カラム型データベースエンジン「MariaDB ColumnStore」発表。OLAPへ参入 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;もともと Windows は POSIX サブシステムを持っている。
今回はそれに加えて&lt;/del&gt; Ubuntu ベースの Linux サブシステムを組み込むということらしいが子亀の上に親亀を乗っけるようなものだ。&lt;/p&gt;

&lt;p&gt;Windows の基本的な設計思想は20～25年くらい前の古いものだ。
しかも DOS/Windows はもともとシングルユーザ用に設計されたもので UNIX 等のマルチユーザ向けの OS とは全く異なる。&lt;/p&gt;

&lt;p&gt;Linux のベースとなっている UNIX もそうとう古いが，マルチユーザを前提とした考え方は今でも通用するし，なにより Linux はもはや UNIX に縛られない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20160331/linux25years&#34;&gt;Linux公開25周年を受けたリーナス・トーバルズのインタビュー - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35080722/&#34;&gt;Linux創始者トーバルズ氏、IoTを語る&amp;ndash;「セキュリティは二の次」と警鐘 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows は永遠に Windows に縛られ続ける。
Microsoft が満を持して出した Windows 10 も結局は Windows に縛られている。&lt;/p&gt;

&lt;p&gt;Windows が時代遅れなのは明らかである。
Microsoft 自らこういう無茶をすること自体が「Windows の終わりの始まり」だ。
個人的に2020年までに自宅 PC のメインを Linux 機に換装する予定だが，ちょっと計画を前倒ししたほうがいいかもしれない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35080364/&#34;&gt;目的別のおすすめLinuxディストリビューション&amp;ndash;あなたにぴったりなのはどれ？ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;追記&#34;&gt;追記&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/why-i-use-cmd-on-windows.htm&#34;&gt;Big Sky :: Windows ユーザは cmd.exe で生きるべき。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;激しく同意。
もっとも私は &lt;a href=&#34;http://text.baldanders.info/remark/2015/conemu-and-nyagos/&#34;&gt;ConEmu &amp;amp; NYAGOS&lt;/a&gt; だけど（笑）&lt;/p&gt;

&lt;h2 id=&#34;sig&#34;&gt;WhatsApp がついに Signal ベースの E2E 暗号化を実装する&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://whispersystems.org/blog/whatsapp-complete/&#34;&gt;Open Whisper Systems &amp;gt;&amp;gt; Blog &amp;gt;&amp;gt; WhatsApp&amp;rsquo;s Signal Protocol integration is now complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techcrunch.com/2016/04/05/whatsapp-completes-end-to-end-encryption-rollout/&#34;&gt;WhatsApp completes end-to-end encryption rollout | TechCrunch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1604/06/news069.html&#34;&gt;Facebook傘下のWhatsApp、完全暗号化を完了　「政府もわれわれも解除できない」 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/04/06/20160405whatsapp-completes-end-to-end-encryption-rollout/&#34;&gt;WhatsApp、全てのプラットフォームのエンドツーエンド暗号化を完了 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もともと WhatsApp が Signal ベースの暗号化システムを実装することは予告されていた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://whispersystems.org/&#34;&gt;Open Whisper Systems&lt;/a&gt; (&lt;a href=&#34;https://github.com/WhisperSystems&#34;&gt;GitHub&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://support.whispersystems.org/hc/en-us/articles/212477768-Is-it-secure-Can-I-trust-it-&#34;&gt;Is it private? Can I trust it? – Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Signal 自体は SMS アプリを置き換えることのできる優れたアプリなのだが SNS ベースのメッセンジャー・アプリとしては機能的に劣る。
WhatsApp がその辺を埋めることになるかどうか。
でも日本のユーザにはウケないかなぁ。&lt;/p&gt;

&lt;p&gt;メールは ProtonMail， SMS ベースのメッセンジャーには Signal，それ以外のメッセンジャーには WhatsApp と，だいぶ揃ってきたねぇ。&lt;/p&gt;

&lt;h2 id=&#34;pki&#34;&gt;鍵管理システム CONIKS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coniks.cs.princeton.edu/&#34;&gt;CONIKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2016/04/coniks.html&#34;&gt;CONIKS - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;CONIKS is a key management system for end users capable of integration in end-to-end secure communication services. The main idea is that users should not have to worry about managing encryption keys when they want to communicate securely, but they also should not have to trust their secure communication service providers to act in their interest.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://coniks.cs.princeton.edu/&#34;&gt;CONIKS&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とりあえずメーリング・リストに入ってみた。&lt;/p&gt;

&lt;h2 id=&#34;go&#34;&gt;Go 言語を使うようになって変わったこと&lt;/h2&gt;

&lt;p&gt;内容自体にさほど文句があるわけではないが（細かい部分は置いておいて），「interface を中心に設計する」という記述が気になって。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;947e9a6ef68c4310baf21afdec4fcfab&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;私はそんなにたくさんの言語を知っているわけではないが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を勉強するようになって設計の考え方が少し変わった。
まさに「制約は構造を生む」（by 結城浩「数学ガール」シリーズより）が如く，言語仕様によって思考も影響を受けるのである。
以下にいくつか例を挙げよう。&lt;/p&gt;

&lt;h3 id=&#34;value-object-から考える&#34;&gt;Value Object から考える&lt;/h3&gt;

&lt;p&gt;さて，いつもの図。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/DDD.svg&#34;&gt;&lt;img srcset=&#34;http://text.baldanders.info/images/DDD.svg 640w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Domain-Driven Design&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://text.baldanders.info/images/DDD.svg&#34;&gt;Domain-Driven Design&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Domain Layer の中身は Domain Service, Entity, そして Value Object に分類される。
ビジネスロジックは図の右側，つまり Entity や Value Object に記述されるのが良い設計だと言われている（記述の重複を避けられるため）。
ただし Value Object はしばしば省略されることが多い。&lt;/p&gt;

&lt;p&gt;Value Object の特徴は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;内部状態を持たず不変である&lt;/li&gt;
&lt;li&gt;属性（property）の比較のみでオブジェクト同士が等価かどうか決定できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして実装上の要件としては「軽量」であることが求められる。
何故なら Value Object は Entity の属性として使われることが多く Value Object がボトルネックになるとシステム全般へのインパクトが大きいからだ。&lt;/p&gt;

&lt;p&gt;実は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はこの Value Object の実装にとても向いている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」 — プログラミング言語 Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/function-and-pointer/&#34;&gt;関数とポインタ — プログラミング言語 Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の特徴である「強い型付け」も Value Object を念頭に置いて考えるなら合理的な仕様であることが分かるだろう。&lt;/p&gt;

&lt;h3 id=&#34;多態性を-振る舞い-から考える&#34;&gt;多態性を「振る舞い」から考える&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の多態性（polymorphism）は振る舞いによってのみ規定される（&lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_typing&#34; title=&#34;Duck typing - Wikipedia, the free encyclopedia&#34;&gt;duck typing&lt;/a&gt;）。
つまり「猫」のように振る舞うのであれば実体がロボットだろうがコスプレイヤーだろうが全部「猫」として括れるのである。
そして「猫」のようにあるためにロボットやコスプレイヤーの identity を書き換える必要はない。
これはとても重要な事である。&lt;/p&gt;

&lt;p&gt;たとえば「猫」を実装する際に，それに多態性を持たせなければならないかどうかは設計の割と早い段階で決めなければならないことが多い。
そうして先に &lt;code&gt;interface&lt;/code&gt; などを決めなければ具体的なクラスを記述することができない。
しかし &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではアプローチが逆になる。
先にロボットやコスプレイヤーといった具体的な型（&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt;）をバンバン作り，個々の振る舞いを見て，あとから「あっ，これ「猫」で括れるぢゃん♥」となるわけだ。
言い方を変えるなら refactoring 向きであるとも言える。&lt;/p&gt;

&lt;h3 id=&#34;要件定義からコードを書く&#34;&gt;要件定義からコードを書く&lt;/h3&gt;

&lt;p&gt;これは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に限らないが， refactoring しやすい言語は prototyping に向いている言語であるとも言える。
Prototyping に向いているということはプロジェクトのかなり早い段階（たとえば要件定義）からコードを書けるということでもある。
結局エンジニアにとって信用できるのは百万語を連ねた設計書より「動くコード」なのである。&lt;/p&gt;

&lt;h2 id=&#34;other&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/transmission-releases-long-awaited-bittorrent-client-for-windows-160327/&#34;&gt;Transmission Releases Long-Awaited BitTorrent Client For Windows - TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/npm-and-left-pad/&#34;&gt;NPMとleft-pad : 私たちはプログラミングのやり方を忘れてしまったのか？ | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/29/20160328windows-users-finally-have-a-good-bittorrent-client/&#34;&gt;WindowsにBitTorrentクライアントの決定版Transmissionがやってくる | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iij.ad.jp/news/pressrelease/2016/0329-2.html&#34;&gt;IIJ、Webサイトにおけるユーザ認証のセキュリティを強化する 「IIJ SmartKeyマネージメントサービス」を提供開始 | 2016年 | IIJ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/technicalwatch/201600330.html&#34;&gt;IPAテクニカルウォッチ「公衆無線LAN利用に係る脅威と対策」：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/research/apt-guide.html&#34;&gt;高度サイバー攻撃(APT)への備えと対応ガイド～企業や組織に薦める一連のプロセスについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://p2ptk.org/copyright/231&#34;&gt;著作権削除要請の28％が「疑わしい」との研究結果 – P2Pとかその辺のお話R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://current.ndl.go.jp/node/31200&#34;&gt;国立極地研究所情報図書室、ウェブサイトをCC BYで公開 | カレントアウェアネス・ポータル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fanfun.jaxa.jp/jaxatv/files/20160408_hitomi.pdf&#34;&gt;Ｘ線天文衛星「ひとみ」（ASTRO-H）の状況について - 20160408_hitomi.pdf&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/030201/2016_04_02_jspoc.html&#34;&gt;X線天文衛星「ひとみ」、回転は破片を誤認？米軍発表 | Sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@tsukamoto/-f42bf7b5e25e&#34;&gt;定時帰宅のススメ — Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/04/09/20160408spacex-just-landed-a-rocket-on-a-drone-ship-for-the-first-time/&#34;&gt;SpaceXのFalcon 9ロケット、洋上のドローン艀への軟着陸についに成功 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sonickun.hatenablog.com/entry/2016/04/03/183220&#34;&gt;GoogleがTLSでの採用を提唱している共通鍵暗号方式「ChaCha」についてまとめた - sonickun.log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41aCueik45L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-15&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117607/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117607.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;マイクロサービスアーキテクチャ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハイパフォーマンスPython&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/0134190440/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/0134190440.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;The Go Programming Language (Addison-Wesley Professional Computing Series)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166340/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774166340.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Vim script テクニックバイブル ~Vim使いの魔法の杖&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。買おうかどうか悩み中。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-12&#34;&gt;2016-03-12&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>TensorFlow に関するブックマーク - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/tensorflow/" />
		<id>tag:text.Baldanders.info,2016-02-18:/remark/2016/02/tensorflow/</id>
		<published>2016-02-18T12:55:42+09:00</published>
		<updated>2016-03-14T01:12:59+09:00</updated>
		<summary>TensorFlow は Google がオープンソースとして提供する多次元配列（tensor）演算（flow）ライブラリ。いわゆる「機械学習」で威力を発揮する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;（この記事は「&lt;a href=&#34;http://text.baldanders.info/remark/2015/programming-language/&#34;&gt;プログラミング言語との付き合い方&lt;/a&gt;」のおまけの項からの転載です）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tensorflow.org/&#34; title=&#34;TensorFlow is an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; は Google がオープンソースとして提供する多次元配列（tensor）&lt;a href=&#34;https://en.wikipedia.org/wiki/Flow_%28mathematics%29&#34;&gt;演算（flow）&lt;/a&gt;ライブラリ。
いわゆる「機械学習（machine learning）」で威力を発揮し， &lt;a href=&#34;http://tensorflow.org/&#34; title=&#34;TensorFlow is an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; の元となっている Google 内製のインフラ &lt;a href=&#34;http://research.google.com/pubs/pub40565.html&#34;&gt;DistBelief&lt;/a&gt; では既に実績がある。&lt;/p&gt;

&lt;p&gt;バックエンドは C++ で構築しているそうだが，フロントエンドでは Python が使える（将来的には他の言語にも対応するそうだ）。
携帯端末から GPU バリバリのワークステーションまでスケーラブルに対応し，簡易な記述で実装できるのが特徴。
可視化ツールもある。&lt;/p&gt;

&lt;p&gt;たしかに「&lt;a href=&#34;https://plus.google.com/+HidekiSaito/posts/EJZgMkANqou&#34;&gt;何か作れそうな気がする&lt;/a&gt;」感じではある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tensorflow.org/&#34;&gt;TensorFlow is an Open Source Software Library for Machine Intelligence&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt;tensorflow/tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/10/news055.html&#34;&gt;Google、機械学習システム「TensorFlow」をオープンソースで公開 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nextdeveloper.hatenablog.com/entry/2015/11/10/204609&#34;&gt;Googleの公開した人工知能ライブラリTensorFlowを触ってみた - 株式会社ネクスト　エンジニアBlog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/icoxfog417/items/fb5c24e35a849f8e2c5d&#34;&gt;TensorFlowを算数で理解する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/haminiku/items/36982ae65a770565458d&#34;&gt;TensorFlow 畳み込みニューラルネットワークで手書き認識率99.2%の分類器を構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kazuhirokomoda/items/a4cd0f6f42eb75c757e4&#34;&gt;自然言語処理をはじめたい人のためのゆるい記事 - Qiita&lt;/a&gt; : &lt;a href=&#34;http://tensorflow.org/&#34; title=&#34;TensorFlow is an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; についても少しだけ言及&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/n_kats_/items/73538c7c66559d09f35d&#34;&gt;わざわざTensorFlowの機械学習で$\sqrt{2}$を計算する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/TomokIshii/items/f355d8e87d23ee8e0c7a&#34;&gt;Python - 初めてのTensorFlow - イントロダクションとしての線形回帰 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/KojiOhki/items/00ae0297f6809bdbc484&#34;&gt;TensorFlowチュートリアル - マンデルブロ集合（翻訳） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/02/17/20160216google-makes-it-easier-to-take-machine-learning-models-into-production/&#34;&gt;TensorFlowライブラリによる機械学習モデルの、本番アプリケーションへの実装を助けるAPI集TensorFlow ServingをGoogleがリリース | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/oZikw5k_2FM&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oZikw5k_2FM&#34;&gt;TensorFlow: Open source machine learning - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
</content>
	</entry>
	
	<entry>
		<title>Blockchain と Smart Contract - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/blockchain-and-smart-contract/" />
		<id>tag:text.Baldanders.info,2016-01-07:/remark/2016/01/blockchain-and-smart-contract/</id>
		<published>2016-01-07T20:50:45+09:00</published>
		<updated>2016-01-18T12:18:27+09:00</updated>
		<summary>Bitcoin は「誰が」取り引きしているかについて気にしないが，もっと広く smart contract を考えるのなら何らかの形で「誰が」を保証しなければならないし，そのための基盤（infrastructure）が必要となる，と思うのだがどうだろう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;年末忙しくて書き損ねてるネタを回収中。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20151223/blockchain&#34;&gt;「YAMDAS現更新履歴」の記事&lt;/a&gt;より。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115869/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp1&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中1話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115873/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp3&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中3話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昨年この記事を斜め読みした時は気づかなかったが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sakura.ad.jp/press/2015/1216_mijin_cloud_chain/&#34;&gt;さくらインターネットとテックビューロ、ブロックチェーンの実証実験環境「mijinクラウドチェーンβ」を金融機関やITエンジニア向けに無料提供～本日より申込受付を開始し、2016年1月から順次提供～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sakura.ad.jp/press/2016/0107_demonstration_platform/&#34;&gt;「さくらのクラウド」、「ASTERIA WARP」、「mijin」の3社製品･サービスによるプライベート･ブロックチェーン＆IoT実証実験プラットフォームの無償提供開始について＜無償提供期間：2016年1月18日～6月30日＞&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あぁ，これって広告記事だったのか。
感度低いなぁ，私（笑）&lt;/p&gt;

&lt;p&gt;上の記事からいくつか気になる部分を抜き出しておく。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;しかし、ブロックチェーン技術の登場により、既存の様々なセキュリティや整合性といった基準を妥協することなく、トランザクションあたりのコストが限りなくゼロに近づいていきます。そこで新しい常識として、「リアルタイムセトルメント」の概念が現実となります。そして締めの集計概念も、そもそもトランザクションに残高（バランス）の概念を持つブロックチェーンの基本機能でまかなえます。&lt;br&gt;
ビジネス慣習が締め処理からリアルタイム決済へパラダイムシフトすることにより、カウンターパーティーリスクも最小限となるだけではなく、既存の様々な頭痛の種が払拭されるでしょう。バッチ処理がされていたものに関してもリアルタイム処理へと移行し、真のリアルタイム24時間サービスの提供など、一般消費者もそこから大きな恩恵を得るに違いありません。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目）&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;現在主流のブロックチェーン技術は、処理の負荷を分散することが主目的ではないという点が分散型DBとは大きく違います。あくまでも主目的は物理的分散によるダウンタイムの払拭です。我々はデータ自体の分散や処理の分散の研究も進めておりますが、現在では全てのノードが同じデータを保有し、同じ仕事をすることができます。従って一般的なブロックチェーンの世界では、台数の増加がパフォーマンスの向上に直結しません。よって、「最低何台必要ですか？」の問いに対する答えは、「1台」となります。&lt;br&gt;
現在のブロックチェーン技術が、最新の分散型DBにデータベースとしてのスループット性能では勝つことはできません。ブロックチェーンが持つ大きな利点は、現在の金融システム等で必要とされる処理量であれば、データの整合性を保ったまま、物理的分散によりゼロダウンタイムを実現し、かつそこに同時に劇的なコスト削減をもたらすということに集約されます。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目）&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Blockchain の特徴は完全性と可用性にある，ということのようだ。
「&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;東雲銀子さん&lt;/a&gt;」みたいな人は要らなくなるかもしれない。&lt;/p&gt;

&lt;p&gt;ちなみに昨年までの私の Bitcoin や Blockchain に関する理解は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000827.shtml&#34;&gt;そろそろ Blockchain について勉強を始めるか — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このときのまとめをもう一度整理して再掲載しておくと&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Blockchain は「鎖」で繋がれた追記型データベース。「鎖」の途中のデータは取り消しも変更（改竄）もできない&lt;/li&gt;
&lt;li&gt;Blockchain の追記プロセスには不正の余地がないよう何らかの仕掛けが必要。 Bitcoin の場合は「作業証明（proof-of-work）」がそれにあたる&lt;/li&gt;
&lt;li&gt;Blockchain は P2P による分散型かつ fault tolerant（過失を許容する）なシステムだが最終的には fork も merge も許容しない&lt;/li&gt;
&lt;li&gt;Bitcoin のアドレス（実体は公開鍵）の帰属先について Bitcoin/Blockchain は関知しない。Bitcoin が気にするのは Blockchain に記載されるアドレスの一貫性と無矛盾性である。アドレスの証明が必要な場合は外部の PKI を利用するか新たに組み込む必要がある&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;私の関心領域は「信用モデル（trust model）」にあるため，このようなまとめになっている。
Bitcoin は「誰が」取り引きしているかについて気にしない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; が，もっと広く smart contract を考えるのなら何らかの形で「誰が」を保証しなければならないし，そのための基盤（infrastructure）が必要となる，と思うのだがどうだろう。&lt;/p&gt;

&lt;p&gt;私は Bitcoin そのものへの関心が薄いのだが，これは地方から見て Bitcoin がアベノミクスのごとき「彼岸」の話であることと，いわゆる FinTech（Financial Technology） なるバズワードは「畑違い」だから。
でも Blockchain 自身は FinTech 分野におさまらない可能性を持っていると思う。
ので，今後も情報を追いかけていくつもりである。&lt;/p&gt;

&lt;h2 id=&#34;参考ページ&#34;&gt;参考ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/03/31/bitcoin-essay/&#34;&gt;誰も教えてくれないけれど、これを読めば分かるビットコインの仕組みと可能性 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boj.or.jp/research/wps_rev/rev_2015/rev15j13.htm/&#34;&gt;（日銀レビュー）「デジタル通貨」の特徴と国際的な議論 ：日本銀行 Bank of Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hshimo/items/093f40b856ba2436fbba&#34;&gt;スマートコントラクトとは何か? Smart Contractsの言葉の定義 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cryptocoin.hatenablog.com/entry/2015/07/22/001500&#34;&gt;Smart Contract - 暗号通貨のお勉強　～Bitcoin、Rippleを中心に～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tatarou1986/items/9d994896795a4871dc37&#34;&gt;BitCoinとBlockChainにまつわる誤解ーそんなことはできない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W1BX3N2/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51aobp3mndL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W1BX3N2/baldandersinf-22/&#34;&gt;アンダーグラウンド・マーケット (朝日新聞出版)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;藤井太洋 &lt;/dd&gt;&lt;dd&gt;朝日新聞出版 2015-03-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00V7Y7DUS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00V7Y7DUS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ビッグデータ・コネクト (文春文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I3W45AS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I3W45AS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;オービタル・クラウド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CHIFA1M/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CHIFA1M.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Gene Mapper -full build-&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B019FV4BGI/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B019FV4BGI.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天冥の標Ⅸ　PART1　ヒトであるヒトとないヒトと (ハヤカワ文庫JA)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B019FV4BGS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B019FV4BGS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;中継ステーション〔新訳版〕 (ハヤカワ文庫SF)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;デジタル通貨ならこれかな。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-07&#34;&gt;2016-01-07&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51d7PAEntoL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;銀子の窓口（１） (バンブーコミックス 4コマセレクション)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;唐草ミチル &lt;/dd&gt;&lt;dd&gt;竹書房 2014-10-27&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0185M2QAQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0185M2QAQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;秘書の仕事じゃありません　２巻 (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0197POLV2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0197POLV2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;軍神ちゃんとよばないで　２巻 (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B018K0HAIQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B018K0HAIQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;私設花野女子怪館（２） (バンブーコミックス MOMOセレクション)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B013FVA8KW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B013FVA8KW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;腹黒舞子さんとの京生活（２） (バンブーコミックス 4コマセレクション)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B017XKJD84/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B017XKJD84.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;うしろのご先祖さま（２） (バンブーコミックス 4コマセレクション)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;金融界のクール・ビューティ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-07&#34;&gt;2016-01-07&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;これは匿名とは異なる。 Bitcoin の元帳である Blockchain は同期されたコピーを誰でも閲覧でき，同じ Bitcoin アドレスを使い続けるならそのアドレスに対する取引履歴を抽出することもできる。アドレスや取引履歴をもとに対象を絞り込むのは面倒だが不可能ではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Glide で Vendoring - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/vendoring-with-glide/" />
		<id>tag:text.Baldanders.info,2015-12-07:/golang/vendoring-with-glide/</id>
		<published>2015-12-07T23:30:21+09:00</published>
		<updated>2016-11-18T09:28:32+09:00</updated>
		<summary>Go 言語 1.5 の vendoring 機能をサポートするツールが glide である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;以前「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt; 1.5 の vendoring 機能を紹介したが，この vendoring のヘルパ・ツールと言えるのが &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; である。
&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では依存する外部パッケージの情報を YAML 形式の定義ファイルに記述し，この定義ファイルを基に外部パッケージの管理を行う。&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; 0.8 から挙動が少し変わった。
この記事では 0.8.2 を使っている）&lt;/p&gt;

&lt;h2 id=&#34;glide-のインストール&#34;&gt;Glide のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は自身も &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; で外部パッケージを管理している。
なので最初は &lt;code&gt;go get&lt;/code&gt; ではなく &lt;a href=&#34;https://github.com/Masterminds/glide/releases&#34;&gt;Releases&lt;/a&gt; ページからビルド済みのものを取得することをお勧めする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ins&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ins&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;既に &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; が利用可能な状態なら，以下の要領でビルドできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\glide&amp;gt;SET GOPATH=C:\workspace\glide

C:\workspace\glide&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\glide&amp;gt;git clone git@github.com:Masterminds/glide.git src\github.com\Masterminds\glide
Cloning into &#39;src\github.com\Masterminds\glide&#39;...
remote: Counting objects: 2292, done.
remote: Compressing objects: 100% (65/65), done.
remote: Total 2292 (delta 34), reused 0 (delta 0), pack-reused 2292
Receiving objects: 100% (2292/2292), 468.01 KiB | 397.00
Receiving objects: 100% (2292/2292), 537.97 KiB | 397.00 KiB/s, done.
Resolving deltas: 100% (1578/1578), done.
Checking connectivity... done.

C:\workspace\glide&amp;gt;pushd src\github.com\Masterminds\glide

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;glide install
[INFO] Fetching updates for github.com/codegangsta/cli.
[INFO] Fetching updates for github.com/Masterminds/cookoo.
[INFO] Fetching updates for github.com/Masterminds/vcs.
[INFO] Fetching updates for gopkg.in/yaml.v2.
[INFO] Fetching updates for github.com/Masterminds/semver.
[INFO] Setting version for github.com/Masterminds/cookoo to 78aa11ce75e257c51be7ea945edb84cf19c4a6de.
[INFO] Setting version for github.com/Masterminds/semver to 6333b7bd29aad1d79898ff568fd90a8aa533ae82.
[INFO] Setting version for github.com/codegangsta/cli to b5232bb2934f606f9f27a1305f1eea224e8e8b88.
[INFO] Setting version for github.com/Masterminds/vcs to eaee272c8fa4514e1572e182faecff5be20e792a.
[INFO] Setting version for gopkg.in/yaml.v2 to f7716cbe52baa25d2e9b0d0da546fcf909fc16b4.

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;popd

C:\workspace\glide&amp;gt;go install -v ./...
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io
github.com/Masterminds/glide/msg
github.com/Masterminds/glide/gb
github.com/Masterminds/glide/vendor/gopkg.in/yaml.v2
github.com/Masterminds/glide/vendor/github.com/Masterminds/semver
github.com/Masterminds/glide/vendor/github.com/codegangsta/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/safely
github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/sql
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/active
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/convert
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/fmt
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/example
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/log
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web/auth
github.com/Masterminds/glide/util
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/doc
github.com/Masterminds/glide/cfg
github.com/Masterminds/glide/dependency
github.com/Masterminds/glide/cmd
github.com/Masterminds/glide

C:\workspace\glide&amp;gt;bin\glide.exe -v
glide version dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単な使い方は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt; glide -h
NAME:
   glide - The lightweight vendor package manager for your Go projects.

Each project should have a &#39;glide.yaml&#39; file in the project directory. Files
look something like this:

        package: github.com/Masterminds/glide
        imports:
                - package: github.com/Masterminds/cookoo
                  vcs: git
                  ref: 1.1.0
                  subpackages: **
                - package: github.com/kylelemons/go-gypsy
                  subpackages: yaml
                        flatten: true

NOTE: As of Glide 0.5, the commands &#39;in&#39;, &#39;into&#39;, &#39;gopath&#39;, &#39;status&#39;, and &#39;env&#39;
no longer exist.


USAGE:
   glide [global options] command [command options] [arguments...]

VERSION:
   0.8.2

COMMANDS:
   create, init Initialize a new project, creating a glide.yaml file
   get          Install one or more packages into `vendor/` and add dependency to glide.yaml.
   import       Import files from other dependency management systems.
   name         Print the name of this project.
   novendor, nv List all non-vendor paths in a directory.
   rebuild      Rebuild (&#39;go build&#39;) the dependencies
   install, i   Install a project&#39;s dependencies
   update, up   Update a project&#39;s dependencies
   tree         Tree prints the dependencies of this project as a tree.
   list         List prints all dependencies that Glide could discover.
   about        Learn about Glide
   help, h      Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --yaml, -y &amp;quot;glide.yaml&amp;quot;              Set a YAML configuration file.
   --quiet, -q                          Quiet (no info or debug messages)
   --debug                              Print Debug messages (verbose)
   --home &amp;quot;C:\Users\username\.glide&amp;quot;    The location of Glide files [$GLIDE_HOME]
   --no-color                           Turn off colored output for log messages
   --help, -h                           show help
   --version, -v                        print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;開発環境の準備&#34;&gt;開発環境の準備&lt;/h2&gt;

&lt;p&gt;動作検証用に「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で使ったコードを利用する。
まず，以下の環境を作る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\workspace\vdemo2&amp;gt;SET GOPATH=C:\workspace\vdemo2

C:\workspace\vdemo2&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\vdemo2&amp;gt;tree /f .
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;julian-day.go&lt;/code&gt; の内容は以下のとおりである。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

    &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		}
		args[i] = num
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, modjulian.DayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然ながら，このままビルドしても外部パッケージがないため失敗する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;go install ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo2\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;依存関係を定義する&#34;&gt;依存関係を定義する&lt;/h2&gt;

&lt;p&gt;開発環境ができたら，パッケージのフォルダ（今回は &lt;code&gt;src/julian-day&lt;/code&gt;）に移動し， &lt;code&gt;glide create&lt;/code&gt; コマンドで依存関係を定義する &lt;code&gt;glide.yaml&lt;/code&gt; ファイルを生成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;pushd src\julian-day

C:\workspace\vdemo2\src\julian-day&amp;gt;glide create
[INFO] Generating a YAML configuration file and guessing the dependencies
[INFO] Attempting to import from other package managers (use --skip-import to skip)
[INFO] Found reference to github.com\spiegel-im-spiegel\astrocalc\modjulian

C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            glide.yaml
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースコードを読んで &lt;code&gt;glide.yaml&lt;/code&gt; に必要な情報を推測して書いてくれているようだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cre&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cre&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，デリミタが “/” じゃなくて “\” になってる。
Windows 環境だからかな。
残念 orz&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com\spiegel-im-spiegel\astrocalc\modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34; title=&#34;spiegel-im-spiegel/astrocalc&#34;&gt;astrocalc&lt;/a&gt;/modjulian パッケージのパスを修正して、更にバージョン情報を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com/spiegel-im-spiegel/astrocalc/modjulian
  version: v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;go get&lt;/code&gt; コマンドと同じように， &lt;code&gt;package&lt;/code&gt; のパスから自動的に repository を判別してパッケージを取得できる。
&lt;code&gt;go get&lt;/code&gt; コマンドと異なるのは， &lt;code&gt;glide.yaml&lt;/code&gt; ファイルで指定した &lt;code&gt;version&lt;/code&gt; 情報から適切な revision を選択できる点である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:semv&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:semv&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;また，以下のように VCS (Version Control System) の種類&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:vcs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:vcs&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; と URI を明示的に指定することもできる（&lt;code&gt;vcs&lt;/code&gt; と &lt;code&gt;repo&lt;/code&gt; は必ずセットで指定する）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com/spiegel-im-spiegel/astrocalc/modjulian
  vcs:     git
  repo:    git@github.com:spiegel-im-spiegel/astrocalc.git
  version: v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば，プライベートな bare repository からインポートする場合には，この方法が有効である。&lt;/p&gt;

&lt;h2 id=&#34;パッケージの取得とビルド&#34;&gt;パッケージの取得とビルド&lt;/h2&gt;

&lt;p&gt;パッケージの取得には &lt;code&gt;glide update&lt;/code&gt; または &lt;code&gt;glide up&lt;/code&gt; コマンドを起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;glide up
[INFO] Fetching updates for github.com/spiegel-im-spiegel/astrocalc.
[INFO] Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Scanning github.com/spiegel-im-spiegel/astrocalc for dependencies.
[INFO] Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Project relies on 1 dependencies.
[INFO] Writing glide.lock file
C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
        │  glide.lock
        │  glide.yaml
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでビルドが可能になった。
ではビルドしようかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;popd

C:\workspace\vdemo2&amp;gt;go install -v  ./...
julian-day/vendor/github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\vdemo2&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;h2 id=&#34;vendor-フォルダの管理&#34;&gt;Vendor フォルダの管理&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;glide.lock&lt;/code&gt; ファイルには外部パッケージの状態が記述されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hash: b1eecd43769aa1225f7b8922a35566008561c64f4ce11180f299888ed153ad69
updated: 2015-12-23T10:47:22.4140434+09:00
imports:
- name: github.com/spiegel-im-spiegel/astrocalc
  version: 256cd3bd4dc63441d3f4759d761593a147d51d88
  subpackages:
  - modjulian
devImports: []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;glide.lock&lt;/code&gt; があれば &lt;code&gt;glide install&lt;/code&gt;（または &lt;code&gt;glide i&lt;/code&gt;）コマンドで &lt;code&gt;vendor&lt;/code&gt; フォルダ以下の状態を復元できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では外部パッケージを vendor フォルダ以下に repository 構造ごと展開する。
この場合，開発対象のパッケージも repository で管理しているのだから， repository が入れ子になり具合が悪い。
その辺，当の &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; はどうしてるのかなぁと思ったら &lt;code&gt;.gitignore&lt;/code&gt; ファイルで &lt;code&gt;vendor/&lt;/code&gt; を除外対象にしていた。
なるほど，そりゃそうか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;glide.yaml&lt;/code&gt; および &lt;code&gt;glide.lock&lt;/code&gt; ファイルの管理さえちゃんとしていれば &lt;code&gt;glide install&lt;/code&gt; コマンドでいつでも復元できるのだから &lt;code&gt;vendor&lt;/code&gt; フォルダ以下を除外しても問題ないわけだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:v&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:v&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
これは複数メンバで開発環境を共有する際には便利な機能である。&lt;/p&gt;

&lt;p&gt;また vendoring に対応していない（Go 1.4 以下の）環境や &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; がない環境では &lt;code&gt;go get&lt;/code&gt; で外部パッケージを取ってくることで（revision 等の問題はあるけど）一応ビルドは通る。&lt;/p&gt;

&lt;p&gt;更に言うと， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の標準機能に準拠しているため，他のサポートツールとの相性がいいのも利点だろう。
たとえば， &lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;ATOM ベースの開発環境&lt;/a&gt;は &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; と相性がいい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gov&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:gov&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
あと，（多少強引な手を使っているが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tci&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:tci&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;） &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; のような CI (Continuous Integration) と組み合わせることも難しくない。&lt;/p&gt;

&lt;p&gt;こう考えると &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34;&gt;前に紹介&lt;/a&gt;した &lt;a href=&#34;http://getgb.io/&#34;&gt;gb&lt;/a&gt; よりも筋がいいツールといえるかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;おまけ-vender-フォルダ以下をテストから除外する&#34;&gt;おまけ： vender フォルダ以下をテストから除外する&lt;/h2&gt;

&lt;p&gt;テストを行う際に普通に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go test -v ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかやると &lt;code&gt;vendor&lt;/code&gt; フォルダ以下も対象になってしまう。
&lt;code&gt;vendor&lt;/code&gt; フォルダ以下を除外したいのであれば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go test -v $(glide novendor)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればよい。&lt;/p&gt;

&lt;p&gt;ただこれ Windows のコマンドプロンプトでは使えないんだよねぇ。
パイプで &lt;code&gt;go test&lt;/code&gt; に渡してもうまくいかない感じ。
そういう場合は &lt;code&gt;glide novendor&lt;/code&gt; の実行結果を整形してバッチファイルにするしかないのだろう。
やれやれ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/8e192e68d6b18bec3b4a&#34;&gt;glide - パッケージ管理のお困りの方へ - - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ktsujichan/items/c78e2515c459316cb1f6&#34;&gt;Golangでプロジェクト内のテストを全件実行する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ins&#34;&gt;Mac 環境なら brew でインストールできるらしい。 Linux 等の環境であれば &lt;code&gt;make&lt;/code&gt; コマンドで各種プラットフォームの実行ファイルをビルドできる。一応 &lt;code&gt;go get&lt;/code&gt; でもビルドできるが， revision を制御できないので失敗する可能性もある（これは &lt;code&gt;make&lt;/code&gt; コマンドでビルドする場合でも同じだけど）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ins&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cre&#34;&gt;&lt;code&gt;glide create&lt;/code&gt; 時の依存パッケージの推測を抑止するには &lt;code&gt;--skip-import&lt;/code&gt; オプションを付ける。のだが，効いてないな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cre&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:semv&#34;&gt;今回であれば repository の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc/releases/tag/v0.1.0&#34;&gt;&lt;code&gt;v0.1.0&lt;/code&gt;&lt;/a&gt; タグに対応する revision を選択する。バージョンの記述形式は &lt;code&gt;package.json&lt;/code&gt; と同じように記述でき，バージョンの解釈は &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; に従っている。ちなみに revision ID を直接指定することもできる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:semv&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:vcs&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt; のほか svn (&lt;a href=&#34;http://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;), hg (&lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;), bzr (&lt;a href=&#34;http://bazaar.canonical.com/&#34;&gt;Bazaar&lt;/a&gt;) が利用可能である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:vcs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:v&#34;&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダ以下は外部パッケージなので通常はさわることはない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:v&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gov&#34;&gt;残念ながら，「&lt;a href=&#34;http://text.baldanders.info/golang/package-visualization-tool/&#34;&gt;パッケージの依存状況の視覚化&lt;/a&gt;」ツールは vendoring 機能に対応していないため上手く表示できない。なお， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;code&gt;glide list&lt;/code&gt; および &lt;code&gt;glide tree&lt;/code&gt; で依存パッケージを見ることができる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gov&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:tci&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; の &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/.travis.yml&#34;&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/Makefile&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt; を参照。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tci&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM で Go - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/golang-with-atom/" />
		<id>tag:text.Baldanders.info,2015-11-21:/golang/golang-with-atom/</id>
		<published>2015-11-21T14:19:02+09:00</published>
		<updated>2016-03-25T22:02:50+09:00</updated>
		<summary>ATOM Editor で Go 言語のコーディング環境を整える。 go-plus パッケージの導入について。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回もまた横道に逸れてツールの話。
&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のコーディング環境を整える。
環境を作る度に「どうだったっけ」とあちこちサイトを巡るので，覚え書きとしてまとめておく。&lt;/p&gt;

&lt;p&gt;例によって Windows 環境を前提にしているので，他の環境の方は適当に脳内補完してください。&lt;/p&gt;

&lt;p&gt;（2016年3月： &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; バージョン 4 以降で大きく構成が変わったので改訂した）&lt;/p&gt;

&lt;h2 id=&#34;開発支援ツールの導入&#34;&gt;開発支援ツールの導入&lt;/h2&gt;

&lt;p&gt;まずは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援ツールを導入する（更新時には &lt;code&gt;-u&lt;/code&gt; オプションを付ける）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go get -v github.com/alecthomas/gometalinter
$ go get -v golang.org/x/tools/cmd/gorename
$ go get -v github.com/nsf/gocode
$ go get -v github.com/rogpeppe/godef
$ go get -v golang.org/x/tools/cmd/oracle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34; title=&#34;alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output&#34;&gt;gometalinter&lt;/a&gt; は所謂 lint ツールなのだが，単独で動作するのではなく，巷にいくつかある lint ツール（標準の &lt;a href=&#34;https://golang.org/cmd/vet/&#34; title=&#34;vet - The Go Programming Language&#34;&gt;vet&lt;/a&gt; を含む）を統合的に管理することができる。
以下のコマンドで &lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34; title=&#34;alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output&#34;&gt;gometalinter&lt;/a&gt; が使用する lint ツールをまとめてインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gometalinter --install --update
Installing:
  structcheck
  interfacer
  goconst
  golint
  goimports
  dupl
  errcheck
  aligncheck
  gocyclo
  ineffassign
  unconvert
  gotype
  varcheck
  deadcode
  lll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/gorename&#34; title=&#34;gorename - GoDoc&#34;&gt;gorename&lt;/a&gt; は関数や変数の名前を変更したい時に使うツールで，文法を解釈してくれるため副作用が少ないのが特徴。
&lt;a href=&#34;https://github.com/nsf/gocode&#34; title=&#34;nsf/gocode&#34;&gt;gocode&lt;/a&gt; は入力補完ツール。
&lt;a href=&#34;https://github.com/rogpeppe/godef&#34; title=&#34;rogpeppe/godef&#34;&gt;godef&lt;/a&gt; は指定したシンボルの定義定義元情報を出力するツール（出力を使って定義元へジャンプできる。実際には &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/oracle&#34; title=&#34;oracle - GoDoc&#34;&gt;oracle&lt;/a&gt; と併用するらしい）。
いずれも vim や emacs などでは有名だが &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; でも使える。&lt;/p&gt;

&lt;p&gt;言わずもがなだが，これらのツールには PATH を通しておくこと。
&lt;code&gt;%GOPATH%\bin&lt;/code&gt; フォルダにパスを通しておけばいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;go-plus-パッケージの導入&#34;&gt;go-plus パッケージの導入&lt;/h2&gt;

&lt;p&gt;では，上述のツールを操作できる &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージを導入する。
やり方は Settings 画面（&lt;code&gt;ctrl+,&lt;/code&gt; で起動）で Install してもいいし &lt;code&gt;apm&lt;/code&gt; コマンドを使ってもよい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近の &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; は複数のサブ・パッケージで構成されているらしい。
&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; を導入すると以下のサブ・パッケージも自動的に導入される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/autocomplete-go&#34;&gt;autocomplete-go&lt;/a&gt; : &lt;a href=&#34;https://github.com/nsf/gocode&#34; title=&#34;nsf/gocode&#34;&gt;gocode&lt;/a&gt; を使って入力補完&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/builder-go&#34;&gt;builder-go&lt;/a&gt; : ソースコードのビルド&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-config&#34;&gt;go-config&lt;/a&gt; : &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用ツール等のチェック&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-get&#34;&gt;go-get&lt;/a&gt; : &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用ツールを取得する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/gofmt&#34;&gt;gofmt&lt;/a&gt; : &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; または &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/goimports&#34; title=&#34;goimports - GoDoc&#34;&gt;goimport&lt;/a&gt; を使用したフォーマッタ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:gf&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/gometalinter-linter&#34;&gt;gometalinter-linter&lt;/a&gt; : &lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34; title=&#34;alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output&#34;&gt;gometalinter&lt;/a&gt; を使った lint&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/gorename&#34;&gt;gorename&lt;/a&gt; : &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/gorename&#34; title=&#34;gorename - GoDoc&#34;&gt;gorename&lt;/a&gt; を使ってリネーム&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/navigator-godef&#34;&gt;navigator-godef&lt;/a&gt; : &lt;a href=&#34;https://github.com/rogpeppe/godef&#34; title=&#34;rogpeppe/godef&#34;&gt;godef&lt;/a&gt; を使って定義元へジャンプ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/tester-go&#34;&gt;tester-go&lt;/a&gt; : テストの実行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コマンドパレットから呼び出されるコマンドもかなり整理されているようだ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22710708563/&#34;&gt;&lt;img srcset=&#34;https://farm6.staticflickr.com/5794/22710708563_f49bdbb61c.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;menu for go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22710708563/&#34;&gt;menu for go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; ではサブ・パッケージごとに設定項目がいくつかあるが，ほとんど既定値のままで使える。
たとえば &lt;a href=&#34;https://atom.io/packages/gofmt&#34;&gt;gofmt&lt;/a&gt; サブ・パッケージの設定画面は以下のようになっている。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;&lt;img srcset=&#34;https://farm1.staticflickr.com/735/22767398347_86d14e29f9.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;settings for gofmt@go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;settings for gofmt@go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;定義元へのジャンプと復帰は &lt;code&gt;alt-cmd-g&lt;/code&gt; および &lt;code&gt;alt-shift-cmd-G&lt;/code&gt; にバインドされているが Windows 環境では動かないので（コマンドパレットから起動してもいいのだが）適当なキーに再割当てするといいだろう。
ファンクションキーは結構空いてるので，たとえば&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Keystroke&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Selector&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar~=&amp;quot;go&amp;quot;]:not([mini])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef-return&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar~=&amp;quot;go&amp;quot;]:not([mini])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;とアサインするなら &lt;code&gt;%USERPROFILE%\.atom\keymap.cson&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;atom-text-editor[data-grammar~=&amp;quot;go&amp;quot;]:not([mini])&#39;:
  &#39;f12&#39;: &#39;golang:godef&#39;
  &#39;shift-f12&#39;: &#39;golang:godef-return&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と設定すればいい。&lt;/p&gt;

&lt;p&gt;lint や定義元のジャンプは &lt;code&gt;GOPATH&lt;/code&gt; や &lt;code&gt;GOROOT&lt;/code&gt; を見て外部パッケージを判断しているのだが， &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; のようなツールでは &lt;code&gt;GOPATH&lt;/code&gt; をコマンド内部で書き換えて実行するので lint ツールとは整合性が取れなくなる。
&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; の設定では &lt;code&gt;GOPATH&lt;/code&gt; を上書きすることも可能なので，とりあえずこれで回避する方法もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23233956325/&#34;&gt;&lt;img srcset=&#34;https://farm6.staticflickr.com/5821/23233956325_0d13c7379f.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;settings for go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23233956325/&#34;&gt;settings for go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;（&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; 4.0.1 および &lt;a href=&#34;https://atom.io/packages/gometalinter-linter&#34;&gt;gometalinter-linter&lt;/a&gt; 1.0.2 で上記の設定が効いてない模様。コマンドプロンプトななどで環境変数 &lt;code&gt;GOPATH&lt;/code&gt; を上書き設定してからプロジェクト・フォルダ上で &lt;code&gt;atom.com .&lt;/code&gt; と起動すれば上手くいくようだ）&lt;/p&gt;

&lt;h2 id=&#34;language-go-パッケージは同梱済み&#34;&gt;language-go パッケージは同梱済み&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-go&#34; title=&#34;language-go&#34;&gt;language-go&lt;/a&gt; は Core パッケージに入っているためインストール時点で既に入っている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://atom.io/packages/language-go&#34; title=&#34;language-go&#34;&gt;language-go&lt;/a&gt; の機能で目を引くのはやはり Snippets だろう。
以下はその一部（パッケージの Settings に一覧がある）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22712254763/&#34;&gt;&lt;img srcset=&#34;https://farm6.staticflickr.com/5675/22712254763_f8fb9f6735.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Snippets for golang (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22712254763/&#34;&gt;Snippets for golang (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;こんなよぅけ覚えれるか！ まぁとりあえず，よく使うものだけ覚えておけばいいのだろうけど。&lt;/p&gt;

&lt;p&gt;使い方は，トリガーとなる文字列を入力して tab キーを押す。
たとえば &lt;code&gt;func&lt;/code&gt; と入力して tab キーを押すと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ()  {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と展開される。
&lt;code&gt;iferr&lt;/code&gt; なら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err != nil {
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/fcd25db64f341ad2471f&#34;&gt;struct にアノテーションつけてたら go vet . すべき - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/osamingo/items/d5ec42fb8587d857310a&#34;&gt;これからGo言語を書く人への三種の神器 - Qiita&lt;/a&gt; : &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;goimports&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt; で正しいコードを書きましょう。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20150113141338.htm&#34;&gt;Big Sky :: golang のリファクタリングには gofmt ではなく、gorename を使おう。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/238f6f0ee27bdf1de2a0&#34;&gt;gometalinter で楽々 lint - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:gf&#34;&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/goimports&#34; title=&#34;goimports - GoDoc&#34;&gt;goimport&lt;/a&gt; はコード整形ツールで，標準の &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; を置き換えることができ，かつ &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; よりも若干かしこい。 &lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34; title=&#34;alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output&#34;&gt;gometalinter&lt;/a&gt; からインストールされる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:a&#34;&gt;&lt;code&gt;GOPATH&lt;/code&gt; を &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; の設定で上書きする場合は “Environment Overrides Config” を&lt;strong&gt;無効にする&lt;/strong&gt;こと。なんでかこれ，毎回ハマるんだよなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b&#34;&gt;&lt;code&gt;language&lt;/code&gt; でインストール済みパッケージを検索するとメジャーな言語は大抵入っているのが分かる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
