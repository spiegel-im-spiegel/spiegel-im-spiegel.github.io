<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Null Safety - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/null-safety/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/null-safety/index.xml" />
	<id>tag:text.Baldanders.info,2016-11-13:/tags</id>
	<updated>2016-11-13T05:20:11+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.40</generator>

	
	<entry>
		<title>「null 安全」について - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/null-safety/" />
		<id>tag:text.Baldanders.info,2016-11-13:/remark/2016/11/null-safety/</id>
		<published>2016-11-13T05:20:11+09:00</published>
		<updated>2016-12-05T10:41:13+09:00</updated>
		<summary>nullable 参照と non-null 参照の区別は，コードに「意図」を記述することを言語仕様レベルで規定するものである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;公理によって与えられる暗黙の制約。この制約が集合の要素同士をしっかり結びつける。単純にしばるのではない、相互に秩序ある関係を結ぶ。言い換えれば――公理によって与えられる制約が構造を生み出しているのだ&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34;&gt;数学ガール／フェルマーの最終定理&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/koher/items/e4835bd429b88809ab33&#34;&gt;null安全でない言語は、もはやレガシー言語だ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/omochimetaru/items/ee29d4c6eb0d78f02b15&#34;&gt;null安全を誤解している人達へのメッセージ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「null 安全（null safety）」についての上の記事はなかなか興味深かった。
特に「&lt;a href=&#34;http://qiita.com/omochimetaru/items/ee29d4c6eb0d78f02b15&#34;&gt;null安全を誤解している人達へのメッセージ&lt;/a&gt;」は事実上の FAQ になっているので是非読んでみてほしい。&lt;/p&gt;

&lt;p&gt;以下は個人的なメモ。&lt;/p&gt;

&lt;p&gt;「null 参照（null reference）」とは「参照が無効である」ことを示すものだ。
「null 参照」は昔から悩ましい問題である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ah&#34;&gt;&lt;a href=&#34;#fn:ah&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
どんなプログラムであれ「null 参照」が存在するのであれば，それを異常系としてハンドリングしなければならない。
しかし大抵の場合，「null 参照」をセットする場所と評価する場所は異なっていて，特にライブラリやフレームワークの中で「null 参照」をセットしている場合は評価されることなくスルーしてしまうことも多い。&lt;/p&gt;

&lt;p&gt;オブジェクト指向以前，たとえばアセンブラや C 言語の時代では値と参照は明確に区別されているわけではなく，「それ」を値と見なすのか「参照（addressing/pointer）」と見なすのかは完全にプログラマの責任だった。
それからオブジェクト指向プログラミングが産業分野でも台頭してきたのだが，このパラダイムシフトの過程で「参照（reference）」が言語仕様レベルで意味を持つものとなった。&lt;/p&gt;

&lt;p&gt;更に「null 安全」な言語では nullable （null かもしれない）参照と non-null （null を許容しない）参照を明確に区別し未評価の nullable 参照をエラーと見なす。
これは言語仕様の根幹&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ns&#34;&gt;&lt;a href=&#34;#fn:ns&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; に関わるパラダイムシフトのひとつである。&lt;/p&gt;

&lt;p&gt;もちろん設計&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:vo&#34;&gt;&lt;a href=&#34;#fn:vo&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; などで「null 参照」に起因するバグや脆弱性を回避することは重要である。
「null 参照」をいかにハンドリングするのかは相変わらずプログラマの責任なのだから。
機械がやってくれるのは nullable 参照をそのままアドホックに使いまわさないようコンパイルエラーを出すところまでだ。（ただし，そのコードがコンパイルエラーになるのなら少なくとも製品として世に出ることはない）&lt;/p&gt;

&lt;p&gt;私はアセンブラや C 言語（それも K&amp;amp;R バージョン）が全盛のころからの（今やロートル）エンジニアだが，こうして見ていくと人と機械の責務分担が時代ごとに変わっていくのを感じる。&lt;/p&gt;

&lt;p&gt;私は将来のプログラミング言語においてはコードに「意図」を記述できるようになっていくと期待している。
nullable 参照と non-null 参照の区別は，コードに「意図」を記述することを言語仕様レベルで規定するものと言える。
これまでもコンパイラヒントとしての annotation のような機能はあったが，そういったものとは質的に異なっている。&lt;/p&gt;

&lt;p&gt;コードに「意図」を記述できるようになれば，それ自体が設計書になる。
最近の私は「プログラマも要求定義（開発）から参加すべき」と思っている。
参加してがんがんコードを書けばいい。
百万ページの設計書より「動くコード」のほうが価値が高い。&lt;/p&gt;

&lt;p&gt;これまでもそうだったように，コードの「正しさ」を機械の側で担保してくれるならプログラマはもっと違うことに脳みそを振り分けられる。
テストを書かずに済むならそれに越したことはない。
まぁ，最終的に AI がコードを書くようになればプログラマという職業がなくなる（もしくは意味が変わる）かもだけど（笑）&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tbd.kaitoy.xyz/2015/07/26/why-null-is-bad/&#34;&gt;なぜNullはダメか | To Be Decided&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kmry2045/items/0d412a6461de70719ec4&#34;&gt;Null安全な言語をめぐるエトセトラ　その１　３種の「現場」 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/takasek/items/119218a2bae2f75062c0&#34;&gt;null安全はいいぞ。だって、型安全はいいぞ。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/koher/items/04025f0e4bba738f188c&#34;&gt;「null安全」という訳語の背景 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ah&#34;&gt;「null 参照」による損失を10億ドルと見積もっている人もいる。（「&lt;a href=&#34;https://en.wikipedia.org/wiki/Tony_Hoare&#34;&gt;Tony Hoare - Wikipedia&lt;/a&gt;」参照）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ah&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ns&#34;&gt;たとえば nullable 参照と non-null 参照を区別するのであればおそらく静的な型付けが要求されるだろうし，型を円滑にドライブするには型推論も必要かもしれない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ns&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:vo&#34;&gt;たとえば安直に null をセットするのではなく null 状態を扱える適切な value object を使う（デフォルトの動作が決まっているなら null object pattern を構成する）など。そういえば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではある変数が nil 値でもその型に紐付く関数を参照渡しで呼び出すことができ（故に nil は必ず何らかの型を持っている）， nil を正しくハンドリングするのは呼び出した関数の責務となっている（「&lt;a href=&#34;http://text.baldanders.info/golang/function-and-pointer/&#34;&gt;関数とポインタ&lt;/a&gt;」参照）。そういう意味でも &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は value object を構成するのに都合がいい。なお &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は「null 安全」ではない，残念ながら。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:vo&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Kotlin に関する覚え書き - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/kotlin/" />
		<id>tag:text.Baldanders.info,2016-11-08:/remark/2016/11/kotlin/</id>
		<published>2016-11-08T21:02:26+09:00</published>
		<updated>2016-11-10T18:45:34+09:00</updated>
		<summary>今回は試して遊ぶ余裕がないので本当にただのメモ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は試して遊ぶ余裕がないので本当にただのメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; は IntelliJ IDEA で有名な &lt;a href=&#34;http://www.jetbrains.com/&#34; title=&#34;JetBrains: Development Tools for Professionals and Teams&#34;&gt;JetBrains&lt;/a&gt; 社が中心となって開発が行われているオブジェクト指向のプログラミング言語だ。
研究用とかではなく明確に産業利用を目的に作られている。&lt;/p&gt;

&lt;p&gt;JavaVM で動作可能なバイトコードを吐くそうで， Android アプリの開発などでもすでに実績があるようだ。
また JavaScript のコードも吐けるらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; の特徴の一つは「null 安全（null safety）」であることのようだ。
「null 安全」とは実行時にいわゆる「ぬるぽ（null pointer error or exception）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:np&#34;&gt;&lt;a href=&#34;#fn:np&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」が発生しない言語仕様になっていることで， &lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; の場合はコンパイル時にチェックされる。&lt;/p&gt;

&lt;p&gt;アプリケーションが「ぬるぽ」で落ちるならまだマシなほうで，最悪の場合は重大な脆弱性問題を引き起こす場合もあるため，「null 安全」という考え方は近年とくに注目されている。
そのため今どき流行りの言語では「null 安全」が取り入れられつつあるらしい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:go&#34;&gt;&lt;a href=&#34;#fn:go&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;更に &lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; は Java からの置き換えを目論み，かつ言語仕様を拡張させている点も特徴である（Scala や Groovy 由来の機能や糖衣構文もある）。
少なくとも &lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; では関数を第一級オブジェクト（first-class object）として扱うことができるのは大きい。
個人的には &lt;a href=&#34;http://text.baldanders.info/remark/2016/07/java/&#34; title=&#34;Java はやめておけ&#34;&gt;Java は終わってる&lt;/a&gt;と思ってるので，こういうのは大歓迎である。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/tarokotlin/&#34;&gt;プログラミング言語Kotlin 解説&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/noppefoxwolf/items/b2d93f946f158c7b5852&#34;&gt;Kotlinを１ヶ月使ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.satotaichi.info/first-thoughts-of-kotlin/&#34;&gt;Kotlinに対する雑感&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/koher/items/e4835bd429b88809ab33&#34;&gt;null安全でない言語は、もはやレガシー言語だ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:np&#34;&gt;null の英語での発音は「ナル」に近いのだが，どういうわけか日本の IT 界隈ではドイツ語っぽく「ヌル」と呼ぶ人が圧倒的多数のようだ。私もそうだし職場の半径100m以内で「ナル」と呼ぶ人はいない。まぁ私は TTC (Telecommunication Technology Committee) を「てってーしー」と呼んでいた世代だからな（笑） （参考：&lt;a href=&#34;http://qiita.com/ryounagaoka/items/290885ee3291b393fe1f&#34;&gt;IT業界で横行する恥ずかしい英語発音 - Qiita&lt;/a&gt;：コメントの議論が面白いので是非）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:np&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:go&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は全く「null 安全」ではない。「ぬるぽ」を緩和するような仕組みはないこともないが，コンパイラレベルで保証しているわけではない。（参考： &lt;a href=&#34;http://postd.cc/why-go-is-not-good/&#34;&gt;Go言語がダメな理由 | プログラミング | POSTD&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:go&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
