<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/programming/index.xml" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/programming/index.xml/index.xml" />
	<id>tag:text.Baldanders.info,0001-01-01:/</id>
	<updated>0001-01-01T00:00:00+00:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.17</generator>

	
	<entry>
		<title>「null 安全」について - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/null-safety/" />
		<id>tag:text.Baldanders.info,2016-11-13:/remark/2016/11/null-safety/</id>
		<published>2016-11-13T05:20:11+09:00</published>
		<updated>2016-11-13T05:20:11+09:00</updated>
		<summary>nullable 参照と non-null 参照の区別は，コードに「意図」を記述することを言語仕様レベルで規定するものである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;公理によって与えられる暗黙の制約。この制約が集合の要素同士をしっかり結びつける。単純にしばるのではない、相互に秩序ある関係を結ぶ。言い換えれば――公理によって与えられる制約が構造を生み出しているのだ&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34;&gt;数学ガール／フェルマーの最終定理&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/koher/items/e4835bd429b88809ab33&#34;&gt;null安全でない言語は、もはやレガシー言語だ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/omochimetaru/items/ee29d4c6eb0d78f02b15&#34;&gt;null安全を誤解している人達へのメッセージ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「null 安全（null safety）」についての上の記事はなかなか興味深かった。
特に「&lt;a href=&#34;http://qiita.com/omochimetaru/items/ee29d4c6eb0d78f02b15&#34;&gt;null安全を誤解している人達へのメッセージ&lt;/a&gt;」は事実上の FAQ になっているので是非読んでみてほしい。&lt;/p&gt;

&lt;p&gt;以下は個人的なメモ。&lt;/p&gt;

&lt;p&gt;「null 参照（null reference）」とは「参照が無効である」ことを示すものだ。
「null 参照」は昔から悩ましい問題である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ah&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ah&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
どんなプログラムであれ「null 参照」が存在するのであれば，それを異常系としてハンドリングしなければならない。
しかし大抵の場合，「null 参照」をセットする場所と評価する場所は異なっていて，特にライブラリやフレームワークの中で「null 参照」をセットしている場合は評価されることなくスルーしてしまうことも多い。&lt;/p&gt;

&lt;p&gt;オブジェクト指向以前，たとえばアセンブラや C 言語の時代では値と参照は明確に区別されているわけではなく，「それ」を値と見なすのか「参照（addressing/pointer）」と見なすのかは完全にプログラマの責任だった。
それからオブジェクト指向プログラミングが産業分野でも台頭してきたのだが，このパラダイムシフトの過程で「参照（reference）」が言語仕様レベルで意味を持つものとなった。&lt;/p&gt;

&lt;p&gt;更に「null 安全」な言語では nullable （null かもしれない）参照と non-null （null を許容しない）参照を明確に区別し未評価の nullable 参照をエラーと見なす。
これは言語仕様の根幹&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ns&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ns&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; に関わるパラダイムシフトのひとつである。&lt;/p&gt;

&lt;p&gt;もちろん設計&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:vo&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:vo&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; などで「null 参照」に起因するバグや脆弱性を回避することは重要である。
「null 参照」をいかにハンドリングするのかは相変わらずプログラマの責任なのだから。
機械がやってくれるのは nullable 参照をそのままアドホックに使いまわさないようコンパイルエラーを出すところまでだ。（ただし，そのコードがコンパイルエラーになるのなら少なくとも製品として世に出ることはない）&lt;/p&gt;

&lt;p&gt;私はアセンブラや C 言語（それも K&amp;amp;R バージョン）が全盛のころからの（今やロートル）エンジニアだが，こうして見ていくと人と機械の責務分担が時代ごとに変わっていくのを感じる。&lt;/p&gt;

&lt;p&gt;私は将来のプログラミング言語においてはコードに「意図」を記述できるようになっていくと期待している。
nullable 参照と non-null 参照の区別は，コードに「意図」を記述することを言語仕様レベルで規定するものと言える。
これまでもコンパイラヒントとしての annotation のような機能はあったが，そういったものとは質的に異なっている。&lt;/p&gt;

&lt;p&gt;コードに「意図」を記述できるようになれば，それ自体が設計書になる。
最近の私は「プログラマも要求定義（開発）から参加すべき」と思っている。
参加してがんがんコードを書けばいい。
百万ページの設計書より「動くコード」のほうが価値が高い。&lt;/p&gt;

&lt;p&gt;これまでもそうだったように，コードの「正しさ」を機械の側で担保してくれるならプログラマはもっと違うことに脳みそを振り分けられる。
テストを書かずに済むならそれに越したことはない。
まぁ，最終的に AI がコードを書くようになればプログラマという職業がなくなる（もしくは意味が変わる）かもだけど（笑）&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tbd.kaitoy.xyz/2015/07/26/why-null-is-bad/&#34;&gt;なぜNullはダメか | To Be Decided&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kmry2045/items/0d412a6461de70719ec4&#34;&gt;Null安全な言語をめぐるエトセトラ　その１　３種の「現場」 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/takasek/items/119218a2bae2f75062c0&#34;&gt;null安全はいいぞ。だって、型安全はいいぞ。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ah&#34;&gt;「null 参照」による損失を10億ドルと見積もっている人もいる。（「&lt;a href=&#34;https://en.wikipedia.org/wiki/Tony_Hoare&#34;&gt;Tony Hoare - Wikipedia&lt;/a&gt;」参照）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ah&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ns&#34;&gt;たとえば nullable 参照と non-null 参照を区別するのであればおそらく静的な型付けが要求されるだろうし，型を円滑にドライブするには型推論も必要かもしれない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ns&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:vo&#34;&gt;たとえば安直に null をセットするのではなく null 状態を扱える適切な value object を使う（デフォルトの動作が決まっているなら null object pattern を構成する）など。そういえば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではある変数が nil 値でもその型に紐付く関数を参照渡しで呼び出すことができ（故に nil は必ず何らかの型を持っている）， nil を正しくハンドリングするのは呼び出した関数の責務となっている（「&lt;a href=&#34;http://text.baldanders.info/golang/function-and-pointer/&#34;&gt;関数とポインタ&lt;/a&gt;」参照）。そういう意味でも &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は value object を構成するのに都合がいい。なお &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は「null 安全」ではない，残念ながら。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:vo&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Kotlin に関する覚え書き - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/kotlin/" />
		<id>tag:text.Baldanders.info,2016-11-08:/remark/2016/11/kotlin/</id>
		<published>2016-11-08T21:02:26+09:00</published>
		<updated>2016-11-10T18:45:34+09:00</updated>
		<summary>今回は試して遊ぶ余裕がないので本当にただのメモ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は試して遊ぶ余裕がないので本当にただのメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; は IntelliJ IDEA で有名な &lt;a href=&#34;http://www.jetbrains.com/&#34; title=&#34;JetBrains: Development Tools for Professionals and Teams&#34;&gt;JetBrains&lt;/a&gt; 社が中心となって開発が行われているオブジェクト指向のプログラミング言語だ。
研究用とかではなく明確に産業利用を目的に作られている。&lt;/p&gt;

&lt;p&gt;JavaVM で動作可能なバイトコードを吐くそうで， Android アプリの開発などでもすでに実績があるようだ。
また JavaScript のコードも吐けるらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; の特徴の一つは「null 安全（null safety）」であることのようだ。
「null 安全」とは実行時にいわゆる「ぬるぽ（null pointer error or exception）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:np&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:np&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」が発生しない言語仕様になっていることで， &lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; の場合はコンパイル時にチェックされる。&lt;/p&gt;

&lt;p&gt;アプリケーションが「ぬるぽ」で落ちるならまだマシなほうで，最悪の場合は重大な脆弱性問題を引き起こす場合もあるため，「null 安全」という考え方は近年とくに注目されている。
そのため今どき流行りの言語では「null 安全」が取り入れられつつあるらしい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:go&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:go&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;更に &lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; は Java からの置き換えを目論み，かつ言語仕様を拡張させている点も特徴である（Scala や Groovy 由来の機能や糖衣構文もある）。
少なくとも &lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; では関数を第一級オブジェクト（first-class object）として扱うことができるのは大きい。
個人的には &lt;a href=&#34;http://text.baldanders.info/remark/2016/07/java/&#34; title=&#34;Java はやめておけ&#34;&gt;Java は終わってる&lt;/a&gt;と思ってるので，こういうのは大歓迎である。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/tarokotlin/&#34;&gt;プログラミング言語Kotlin 解説&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/noppefoxwolf/items/b2d93f946f158c7b5852&#34;&gt;Kotlinを１ヶ月使ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.satotaichi.info/first-thoughts-of-kotlin/&#34;&gt;Kotlinに対する雑感&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/koher/items/e4835bd429b88809ab33&#34;&gt;null安全でない言語は、もはやレガシー言語だ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:np&#34;&gt;null の英語での発音は「ナル」に近いのだが，どういうわけか日本の IT 界隈ではドイツ語っぽく「ヌル」と呼ぶ人が圧倒的多数のようだ。私もそうだし職場の半径100m以内で「ナル」と呼ぶ人はいない。まぁ私は TTC (Telecommunication Technology Committee) を「てってーしー」と呼んでいた世代だからな（笑） （参考：&lt;a href=&#34;http://qiita.com/ryounagaoka/items/290885ee3291b393fe1f&#34;&gt;IT業界で横行する恥ずかしい英語発音 - Qiita&lt;/a&gt;：コメントの議論が面白いので是非）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:np&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:go&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は全く「null 安全」ではない。「ぬるぽ」を緩和するような仕組みはないこともないが，コンパイラレベルで保証しているわけではない。（参考： &lt;a href=&#34;http://postd.cc/why-go-is-not-good/&#34;&gt;Go言語がダメな理由 | プログラミング | POSTD&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:go&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Dart 言語に関する覚え書き - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/10/programming-language-dart/" />
		<id>tag:text.Baldanders.info,2016-10-30:/remark/2016/10/programming-language-dart/</id>
		<published>2016-10-30T01:39:04+09:00</published>
		<updated>2016-10-30T01:39:04+09:00</updated>
		<summary>個人的に TypeScript や CoffeeScript の構文は好みじゃないし（もちろん仕事ならやりますよ）， Dart でそういったものの代わりになるのなら悪くないと思ったのだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;最初の頃は Dash とか呼ばれていたこの言語だが，正直に言ってあまり関心は高くなかった。
昔 Microsoft が JScript/VBScript や ActiveX で似たようなことをやろうとして大失敗したのを見ていたので「大失敗の2番煎じとか（笑）」という感じだったのだ。&lt;/p&gt;

&lt;p&gt;でも&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/10/26/20161026googles-dart-programming-language-returns-to-the-spotlight/&#34;&gt;GoogleのDartプログラミング言語に再びスポットライトが…その高い生産性にまず社内で人気が盛り上がる | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を見てちょっと調べてみることにした。
個人的に TypeScript や CoffeeScript の構文は好みじゃないし（もちろん仕事ならやりますよ）， &lt;a href=&#34;https://www.dartlang.org/&#34; title=&#34;Dart programming language | Dart&#34;&gt;Dart&lt;/a&gt; でそういったものの代わりになるのなら悪くないと思ったのだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.dartlang.org/&#34; title=&#34;Dart programming language | Dart&#34;&gt;Dart&lt;/a&gt; 環境は以下から取得できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dartlang.org/install&#34;&gt;Install Dart | Dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows の場合は Chocolatey 経由で導入するかサード・パーティのインストーラが用意されている。
今回はサード・パーティのインストーラを使ってみた。
インストール後にコマンドプロンプト等で&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ dart --version
Dart VM version: 1.20.1 (Wed Oct 12 15:07:45 2016) on &amp;quot;windows_x64&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てな感じになれば成功である。
さっそく，みんな大好き “Hello World” から&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {
    print(&#39;Hello World!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを DartVM 上で実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ dart hello.dart
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;p&gt;じゃあ，これを JavaScript コードに変換してみようか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ dart2js -ohello.js hello.dart
Dart file (hello.dart) compiled to JavaScript: hello.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うひゃ！ なんか凄いコード吐いたな。
元の3行のコードに対して300行くらいあるぞ。
でも node.js&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:n&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:n&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; に食わせると一応ちゃんと出力される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ node hello.js
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力された JavaScript コードの一部を抜粋するとこんな感じのコードを吐いている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var dart = [[&amp;quot;dart2js._js_primitives&amp;quot;, &amp;quot;dart:_js_primitives&amp;quot;,, H, {
  &amp;quot;^&amp;quot;: &amp;quot;&amp;quot;,
  printString: function(string) {
    if (typeof dartPrint == &amp;quot;function&amp;quot;) {
      dartPrint(string);
      return;
    }
    if (typeof console == &amp;quot;object&amp;quot; &amp;amp;&amp;amp; typeof console.log != &amp;quot;undefined&amp;quot;) {
      console.log(string);
      return;
    }
    if (typeof window == &amp;quot;object&amp;quot;)
      return;
    if (typeof print == &amp;quot;function&amp;quot;) {
      print(string);
      return;
    }
    throw &amp;quot;Unable to print message: &amp;quot; + String(string);
  }
}], [&amp;quot;&amp;quot;, &amp;quot;hello.dart&amp;quot;,, G, {
  &amp;quot;^&amp;quot;: &amp;quot;&amp;quot;,
  main: function() {
    H.printString(&amp;quot;Hello World!&amp;quot;);
  }
}, 1]];
setupProgram(dart, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いや，うーん。
いいのか，これ。
“Hello World” ごときでこれって，もう少しスリムなコードを吐けないのだろうか。&lt;/p&gt;

&lt;p&gt;たとえば仕事で &lt;a href=&#34;https://www.dartlang.org/&#34; title=&#34;Dart programming language | Dart&#34;&gt;Dart&lt;/a&gt; を使うようなプロジェクトでもあれば面白そうだが，それ以外で積極的に使おうという気にはならないかなぁ，これは。
制御用の言語を統一するのなら JavaScript (ES6) で十分だし，バックエンド側のみということであれば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のほうがよさ気だし。
うーん。&lt;/p&gt;

&lt;p&gt;というわけで，もう少し様子見。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dartlang.org/&#34;&gt;Dart programming language | Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang&#34;&gt;Dart · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cresc.co.jp/tech/java/Google_Dart/DartLanguageSpecification_about.html&#34;&gt;Dartプログラミング言語仕様書邦訳版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/dartrefjp/&#34;&gt;dartrefjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1208/29/news120.html&#34;&gt;小山博史のJavaを楽しむ（16）：JavaとJavaScriptの良いとこ取り？ 「Dart」超入門 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/alucky0707/items/76aaf819a86eda7d6c4d&#34;&gt;Dart入門してみる。インストール～ブラウザでHelloWorldまで - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/takyam/items/3dd2c1948f1fa7968a01&#34;&gt;2015年にDart言語はどう変わってどこに向かっていってるのか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sh4869/items/55d1ad5cd011113ed543&#34;&gt;Dart 1.19リリースノート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:n&#34;&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt; は最近 v7.0.0 が出ている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:n&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>プログラミングで「計算論的思考」は身につかない - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/09/programming/" />
		<id>tag:text.Baldanders.info,2016-09-27:/remark/2016/09/programming/</id>
		<published>2016-09-27T22:30:13+09:00</published>
		<updated>2016-09-27T22:30:13+09:00</updated>
		<summary>本気で「計算論的思考」を身につけさせたいのなら，もっと算数・数学あるいは理科を（単なる知識ではなく）学問体系としてきっちり教えるべき</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kids.gakken.co.jp/parents/digital/mima01/&#34;&gt;プログラミング教育についての素朴なギモンを聞く【前編】　プログラミング教育って何？　本当に子どもに必要なの？ | 学研キッズネット for Parents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学校の数学を学んで数学的な考え方が身につくわけではないように，「プログラミング教育」を行っても「計算論的思考」は身につかない。&lt;/p&gt;

&lt;p&gt;これは因果関係が逆。
「計算論的思考」ができる人はプログラミング&lt;strong&gt;も&lt;/strong&gt;比較的上手にできる，というだけのことにすぎない。&lt;/p&gt;

&lt;p&gt;ここではいつも言っていることだが&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000868.shtml&#34; title=&#34;プログラミングは「損得勘定」で考える — Baldanders.info&#34;&gt;&lt;strong&gt;数学の問題を解くのに公式の暗記から始める人はプログラマには向いてないので諦めた方がいい&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;でも高校くらいまでの算数・数学なら暗記だけで何となく解けてしまうのも事実である（私は暗記が苦手なので無理だが）。
同様にプログラミングもある程度ならコピペだけで書けてしまう。
でもこれではいつまで経っても「計算論的思考」は身につかない。
身につくはずがない&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;しかし、これはコピペを多用している人にありがちな考え方のようで、コピペしても動かないのはなにか間違ったことをしていて、正確にコピペできていないところがないかを探すというプログラミングサイクルが習慣化していることが背景にはあるのではないかと感じられた。
&lt;br&gt;そのため、一度書き終わったコードは記号の羅列のように見えてしまい、そこに何か間違いがないか目で探すのだ。自分で書いたものもコピペで始まっているため、それは記号の羅列であって、理解していないものになってしまう。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://qiita.com/hirokidaichi/items/27c757d92b6915e8ecf7&#34;&gt;ペアプログラミングして気がついた新人プログラマの成長を阻害する悪習 - Qiita&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;本気で「計算論的思考」を身につけさせたいのなら，もっと算数・数学あるいは理科を（単なる知識ではなく）学問体系としてきっちり教えるべきで，「プログラミング教育」なんぞは必要条件にも十分条件にもならない。
「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000744.shtml&#34; title=&#34;日本の「算数」は壊れてる？ — Baldanders.info&#34;&gt;掛け算は順序が大事&lt;/a&gt;」などと言ってはばからない未開人の国がどうやってプログラミングを教えるというのだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/lets-programming/&#34;&gt;「だれもがプログラミングを学ぶべき」ではない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797329734/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51xj-xFKUXL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797329734/baldandersinf-22/&#34;&gt;プログラマの数学&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;ソフトバンククリエイティブ 2005-03-24&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274067556/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274067556.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマのための論理パズル 難題を突破する論理思考トレーニング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873116694/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873116694.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アルゴリズムパズル ―プログラマのための数学パズル入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4048869558/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4048869558.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマの考え方がおもしろいほど身につく本 問題解決能力を鍛えよう!&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/479803925X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/479803925X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラムはこうして作られるプログラマの頭の中をのぞいてみよう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/479814245X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/479814245X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマ脳を鍛える数学パズル シンプルで高速なコードが書けるようになる70問&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;プログラマ必修の教科書（笑）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-05-17&#34;&gt;2016-05-17&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51XGP8AFX2L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;いかにして問題をとくか&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;G. ポリア 柿内 賢信 &lt;/dd&gt;&lt;dd&gt;丸善 1975-04-01&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621085298/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621085298.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;いかにして問題をとくか・実践活用編&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4061497863/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4061497863.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学的思考法―説明力を鍛えるヒント  講談社現代新書&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/462108819X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/462108819X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学×思考=ざっくりと  いかにして問題をとくか&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797375698/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797375698.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4185086180/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4185086180.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;授業研究に学ぶ高校新数学科の在り方&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-26&#34;&gt;2014/09/26&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「シルバー・ウィーク」スペシャル： C&#43;&#43; 再勉強中。 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/09/22-stories/" />
		<id>tag:text.Baldanders.info,2016-09-22:/remark/2016/09/22-stories/</id>
		<published>2016-09-22T16:50:46+09:00</published>
		<updated>2016-09-22T19:59:48+09:00</updated>
		<summary>C&#43;&#43; 再勉強中。 / alt-right ??? / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;いや，私は普通にカレンダー通りですけどね。
今日は仕事してる人も多いみたいだし。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#cpp&#34;&gt;C++ 再勉強中。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ar&#34;&gt;alt-right ???&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;cpp&#34;&gt;C++ 再勉強中。&lt;/h2&gt;

&lt;p&gt;昨年出た『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117364/baldandersinf-22/&#34; title=&#34;Effective Modern C++ ―C++11/14プログラムを進化させる42項目 : Scott Meyers, 千住 治郎 : 本 : Amazon.co.jp&#34;&gt;Effective Modern C++&lt;/a&gt;』をようやく読み始めてる。
C++ 11 でだいぶ変わったしね。
読書感想はまた後日。&lt;/p&gt;

&lt;p&gt;他にもこの辺は読んでおかないと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/sec/publish/tn10-003.html&#34;&gt;SEC BOOKS：ESCR C++：組込みソフトウェア開発向けコーディング作法ガイド［C++言語版］：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/sec/publish/tn13-001.html&#34;&gt;SEC BOOKS：ESCR Ver.2.0：【改訂版】組込みソフトウェア開発向け コーディング作法ガイド［C言語版］Ver.2.0：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/herumi/cc-66035712&#34;&gt;C/C++プログラマのための開発ツール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/code-behaving-differently-in-c90-c99-c11-c98-and-c11/&#34;&gt;C90, C99, C11, C++98, C++11で異なる動作をするコード | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;Go 言語の勉強&lt;/a&gt;は今のところはアソビ半分だが，こっちはうまく仕事に結びつくといいですなぁ。&lt;/p&gt;

&lt;h2 id=&#34;ar&#34;&gt;alt-right ???&lt;/h2&gt;

&lt;p&gt;最近よく聞くようになったが実は結構前から言われているらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/09/03/alter-right-wing/&#34;&gt;覆面ブロガーの告白、そして「オルタナ右翼」とは何なのか｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mhatta.org/wp/blog/2016/09/12/identitarianism-as-racism-2-0/&#34;&gt;レイシズム2.0としてのアイデンティタリアニズム | mhatta&amp;rsquo;s mumbo jumbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mhatta.org/wp/blog/2016/09/22/alt-right-depicted/&#34;&gt;オルタナ右翼の図解 | mhatta&amp;rsquo;s mumbo jumbo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかし，このご時世に右とか左とかいう色分けはあまり意味が無い気がする。
ぱっと見た感じ Identitarianism ってのはジョック・ヤングの『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34; title=&#34;排除型社会―後期近代における犯罪・雇用・差異 : ジョック ヤング, Jock Young, 青木 秀男, 伊藤 泰郎, 岸 政彦, 村澤 真保呂 : 本 : Amazon&#34;&gt;排除型社会&lt;/a&gt;』に出てくる「多文化主義&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 的エポケー」の変奏に過ぎないように思える。
でもって「多文化主義的エポケー」は文化的な袋小路であって未来に何も生み出さないんだよね。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;しかし、現在のように都市生活が多様化し、グローバル化したマスメディアが毎日のように多種多様な文化を垂れ流す状況では、もはや自然的エポケーは通用しなくなっている。こうした困難に対処する態度こそ、私が「多文化主義的エポケー」と呼んでいるものである。つまり、自然的エポケーの特徴である「懐疑の一時停止（あるいは〈括弧〉にいれる）」を、いわば多元化することである。この場合、それぞれの文化は、他の文化からみずからを区別するために、独自の排他的領域という〈括弧〉のなかに閉じこもろうとする。それはちょうど、それぞれの集団が、リスクを最小化するために、保険統計的計算にもとづいて物質的・経済的バリアを張り巡らせようとするのと同じである。&lt;/q&gt;（p.251）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;多文化主義のおかげで、人々は自分たちの選択を相対化しなくても、規範の相対性を受け入れることができるようになるわけである。……多文化主義における異文化への距離の取り方（「尊重」とか「寛容」という言葉でごまかしているが）が異文化への不安をつくりだす可能性は十分にある。というのも、それは戦後の包摂型社会に代えて、排除型の飛び地が点在する世界をつくりだすからである。……かつて近代主義が求めたのは、開放的で、「脱埋め込み」的で、両義的で、断片化された世界をつくりだすことであった。それは自己とライフスタイルを自由に選択し、創造することが可能な世界だった。しかし、多文化主義はそのような世界を消し去ろうとする――つまり、一方で多様性を認めながら、他方では行為者から選択の自由を奪おうとするのである。&lt;/q&gt;（p.259）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;other&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/draft-payment-system-in-erlang/&#34;&gt;「Erlangを使用して、効率的な決済システムを構築するには？」 | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2016/08/55823/&#34;&gt;もうすぐ絶滅するという開かれたウェブについて - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20160911/algorithmfda&#34;&gt;やはり我々には「アルゴリズムの監査機関」が必要なのか？ - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117364/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ng4usMVYL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117364/baldandersinf-22/&#34;&gt;Effective Modern C++ ―C++11/14プログラムを進化させる42項目&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Scott Meyers 千住 治郎 &lt;/dd&gt;&lt;dd&gt;オライリージャパン 2015-09-18&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4048694243/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4048694243.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C++11/14 コア言語&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797375957/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797375957.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング言語C++第4版&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621066099/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621066099.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Effective C++ 第3版 (ADDISON-WESLEY PROFESSIONAL COMPUTI)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797384778/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797384778.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C++のエッセンス&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4048930516/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4048930516.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C++によるプログラミングの原則と実践&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797376686/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797376686.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C++テンプレートテクニック 第2版&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4844338900/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4844338900.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Game Programming Patterns ソフトウェア開発の問題解決メニュー (impress top gear)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117569/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117569.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Effective Python ―Pythonプログラムを改良する59項目&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774174084/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774174084.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;改訂新版　C++ポケットリファレンス&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4862462928/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4862462928.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Computer Graphics Gems JP 2015 - コンピュータグラフィックス技術の最前線 -&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;C++ 再勉強中。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-09-22&#34;&gt;2016-09-22&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/417iD4x5N%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジョック ヤング Jock Young &lt;/dd&gt;&lt;dd&gt;洛北出版 2007-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764331/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764331.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;後期近代の眩暈―排除から過剰包摂へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4255008515/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4255008515.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;断片的なものの社会学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796700439/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4796700439.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スティグマの社会学―烙印を押されたアイデンティティ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764242/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764242.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新しい貧困 労働消費主義ニュープア&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062881357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062881357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;弱者の居場所がない社会――貧困・格差と社会的包摂 (講談社現代新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000410.shtml&#34;&gt;感想はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;多文化主義というのはもともとリベラルの考え方だと何かに書いてあった。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『数学ガールの秘密ノート／場合の数』はプログラマの必読書だ！ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/07/math-girls-combinatorics/" />
		<id>tag:text.Baldanders.info,2016-07-23:/remark/2016/07/math-girls-combinatorics/</id>
		<published>2016-07-23T20:00:02+09:00</published>
		<updated>2016-07-23T20:00:02+09:00</updated>
		<summary>よし。こうしよう。算数や数学に興味のあるお子さんは『数学ガールの秘密ノート／場合の数』と『いかにして問題をとくか』で読書感想文（とついでに夏休みの自由研究）を書きなさい。これができたら今年の夏はずうっと Pokémon GO してて構わない。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;今回は最初から Kindle で購入したのだが何となく先延ばしにしていた。
「数学ガール」シリーズは通勤のスキマ時間とかではなく，ちゃんと時間を作って一気に読みたかったのだ。
でもこう忙しくちゃねぇ。
おぢさんはもっと気楽に生きたいのに。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/28345047646/&#34;&gt;&lt;img srcset=&#34;https://c7.staticflickr.com/9/8043/28345047646_424ca88ef5.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;paperwhite で「数学ガール」&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/28345047646/&#34;&gt;paperwhite で「数学ガール」&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/mathgirl-note-vector/&#34; title=&#34;『数学ガールの秘密ノート／ベクトルの真実』で遊ぶ&#34;&gt;「ベクトルの真実」は個人的にミルカさんの回&lt;/a&gt;だったけど，今回は「僕」の回だね。
「僕」の暴走を押さえこむテトラちゃんとミルカさん。
そして Lazy Susan 大活躍（笑）&lt;/p&gt;

&lt;p&gt;途中まで読んでようやく気がついたんだけど，これって『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00H372H40/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: プログラマの数学 電子書籍: 結城 浩: Kindleストア&#34;&gt;プログラマの数学&lt;/a&gt;』ぢゃん。
本棚から引っ張りだして見たら第5章がそのものずばり「順列・組み合わせ」だった。
10年以上前に買った本とはいえ忘れていたとはオイラも歳をとったもんだぜ。
Kindle で買い直して読み返そうかな。&lt;/p&gt;

&lt;p&gt;いつもは&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「数学ガールの秘密ノート」シリーズは数学成分多めで中学生以上を対象にしているが，小学生高学年なら頑張れば理解できるはず&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と説明しているが（「&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01EL08HVS/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: 数学ガールの秘密ノート／場合の数 電子書籍: 結城 浩: Kindleストア&#34;&gt;場合の数&lt;/a&gt;」もそうなのだが），今回は声を大にして言おう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;プログラマ（志望者も含む）は全員『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01EL08HVS/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: 数学ガールの秘密ノート／場合の数 電子書籍: 結城 浩: Kindleストア&#34;&gt;数学ガールの秘密ノート／場合の数&lt;/a&gt;』を読め！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;そして「&lt;a href=&#34;http://text.baldanders.info/remark/2016/06/19-stories/#ed&#34;&gt;小学生に「プログラミング教育」をさせる&lt;/a&gt;」などとキチガイじみた提案をするなら学級文庫&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cl&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; に「数学ガールの秘密ノート」シリーズを全巻揃えてみせろ。
話はそれからだ。&lt;/p&gt;

&lt;p&gt;前に&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ちなみに「人工知能」の台頭を意識しているのなら，なおさら「プログラミング教育」は不要である。 なぜなら「問題を解決する仕事」はこれからどんどん機械が奪っていくから。 そうなった時に望まれる人材は「問題を解決できる人」ではなく「正しい問いを立てられる人」である。 親や学校教師に言われた通りのことしかできない子どもは，大人社会の中では機械以下の底辺でしか生きられなくなる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と&lt;a href=&#34;http://text.baldanders.info/remark/2016/06/19-stories/#ed&#34;&gt;書いた&lt;/a&gt;が，今回の「&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01EL08HVS/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: 数学ガールの秘密ノート／場合の数 電子書籍: 結城 浩: Kindleストア&#34;&gt;場合の数&lt;/a&gt;」ではポリアの『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34; title=&#34;いかにして問題をとくか : G. ポリア, G. Polya, 柿内 賢信 : 本 : Amazon&#34;&gt;いかにして問題をとくか&lt;/a&gt;』を教科書に「問いの立て方」について議論している。分からないことや知りたいことについて「正しく問いを立てる」ことができれば，その問題は半分解けたも同然だということをこの本は示している。&lt;/p&gt;

&lt;p&gt;よし。
こうしよう。
算数や数学に興味のあるお子さんは『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01EL08HVS/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: 数学ガールの秘密ノート／場合の数 電子書籍: 結城 浩: Kindleストア&#34;&gt;数学ガールの秘密ノート／場合の数&lt;/a&gt;』と『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34; title=&#34;いかにして問題をとくか : G. ポリア, G. Polya, 柿内 賢信 : 本 : Amazon&#34;&gt;いかにして問題をとくか&lt;/a&gt;』で読書感想文（とついでに夏休みの自由研究）を書きなさい。
これができたら今年の夏はずうっと &lt;a href=&#34;http://www.pokemongo.jp/&#34; title=&#34;『Pokémon GO』公式サイト&#34;&gt;Pokémon GO&lt;/a&gt; してて構わない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:g&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:g&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;（笑）&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01EL08HVS/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41gorf%2BfNaL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01EL08HVS/baldandersinf-22/&#34;&gt;数学ガールの秘密ノート／場合の数&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2016-04-19&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B018VE46YW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B018VE46YW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／ベクトルの真実&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMJ0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMJ0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／整数で遊ぼう&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;このシリーズの今回巻はプログラマ必読書である。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-23&#34;&gt;2016-07-23&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797329734/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51xj-xFKUXL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797329734/baldandersinf-22/&#34;&gt;プログラマの数学&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;ソフトバンククリエイティブ 2005-03-24&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274067556/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274067556.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマのための論理パズル 難題を突破する論理思考トレーニング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873116694/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873116694.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アルゴリズムパズル ―プログラマのための数学パズル入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4048869558/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4048869558.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマの考え方がおもしろいほど身につく本 問題解決能力を鍛えよう!&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/479803925X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/479803925X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラムはこうして作られるプログラマの頭の中をのぞいてみよう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/479814245X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/479814245X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマ脳を鍛える数学パズル シンプルで高速なコードが書けるようになる70問&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;プログラマ必修の教科書（笑）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-05-17&#34;&gt;2016-05-17&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51XGP8AFX2L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;いかにして問題をとくか&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;G. ポリア 柿内 賢信 &lt;/dd&gt;&lt;dd&gt;丸善 1975-04-01&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621085298/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621085298.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;いかにして問題をとくか・実践活用編&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4061497863/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4061497863.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学的思考法―説明力を鍛えるヒント  講談社現代新書&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/462108819X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/462108819X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学×思考=ざっくりと  いかにして問題をとくか&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797375698/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797375698.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4185086180/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4185086180.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;授業研究に学ぶ高校新数学科の在り方&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-26&#34;&gt;2014/09/26&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cl&#34;&gt;私の子供の頃はこう呼ばれていた。英語で言うと「クラスライブラリ」（少しウソw）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:g&#34;&gt;学校側の出す宿題なんてどうせ「塹壕掘り」なんだから，最初の1週間で終わらせられるでしょ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:g&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『プログラミング言語 Go』を眺める - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/07/go-programming-language/" />
		<id>tag:text.Baldanders.info,2016-07-13:/remark/2016/07/go-programming-language/</id>
		<published>2016-07-13T04:19:59+09:00</published>
		<updated>2016-07-17T23:06:47+09:00</updated>
		<summary>Go 言語をある程度使える（私程度のレベル）という方は第7章から第9章までを重点的に読むといい。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のよいところのひとつは&lt;a href=&#34;http://golang-jp.org/doc/&#34;&gt;ドキュメント&lt;/a&gt;が分かりやすい形で提供されている点である。
はじめて &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に接する人なら “&lt;a href=&#34;https://tour.golang.org/&#34;&gt;A Tour of Go&lt;/a&gt;” から気楽に始められるし，手元にコンパイラがなくてもとりあえず “&lt;a href=&#34;https://play.golang.org/&#34; title=&#34;The Go Playground&#34;&gt;Playground&lt;/a&gt;” で遊ぶことはできる。
更に&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;言語仕様&lt;/a&gt;や&lt;a href=&#34;https://golang.org/pkg/&#34;&gt;標準パッケージのドキュメント&lt;/a&gt;や &lt;a href=&#34;https://golang.org/doc/faq&#34;&gt;FAQ&lt;/a&gt; といったものはもちろん， “&lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt;” みたいなドキュメントも用意されている。
なので実際のところ，本を買わなくてもオンラインで充分学ぶことができる。&lt;/p&gt;

&lt;p&gt;にも関わらず今回この本を買った理由は以下の2つ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;オフラインで参照できる完全なリファレンス本が欲しかった&lt;/li&gt;
&lt;li&gt;知識体系として &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を学べる教科書が欲しかった&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;実は現在，職場が某セキュリティ・エリアの中にあってネットから物理的に切り離された環境にいる。
以前は分からないことは Google 先生に訊けたのに，それが出来なくなってしまったのだ。
スマホやタブレットといった電子機器も持ち込めないので「Kindle で」というわけにもいかない。
今ほど紙の本のありがたみを実感できたことはないよ。&lt;/p&gt;

&lt;p&gt;まぁそういう経験をしてしまったので（仕事に絡みそうなものであれば）紙の本はちゃんと買っておくか，という気になったのだった。
逆に紙の本を買ってしまったので（今までみたいな余暇の遊びじゃなく）元を取らないとダメだなぁ，などと思ったり。&lt;/p&gt;

&lt;p&gt;さて本題。&lt;/p&gt;

&lt;p&gt;まず， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を全くはじめて習うという方は，『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34; title=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) : Alan A.A. Donovan, Brian W. Kernighan, 柴田 芳樹 : 本 : Amazon&#34;&gt;プログラミング言語 Go&lt;/a&gt;』からはじめるのではなく， “&lt;a href=&#34;https://tour.golang.org/&#34;&gt;A Tour of Go&lt;/a&gt;” （&lt;a href=&#34;https://go-tour-jp.appspot.com/&#34;&gt;日本語版&lt;/a&gt;もある）からはじめることを強くおすすめする。
“&lt;a href=&#34;https://tour.golang.org/&#34;&gt;A Tour of Go&lt;/a&gt;” では手を動かしながら学べるので「感触」を掴むのにちょうどよい教材と言える。
そうした後に『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34; title=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) : Alan A.A. Donovan, Brian W. Kernighan, 柴田 芳樹 : 本 : Amazon&#34;&gt;プログラミング言語 Go&lt;/a&gt;』を読み進めれば理解しやすいと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;をある程度使える（私程度のレベル）という方は第7章から第9章までを重点的に読むといい。
Interface, goroutine, channel の概念や実装方法は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の中核技術といえるもので，ここを押さえておけばかなり使いこなせるようになるはず。
また第12章以降に登場する refrection や &lt;a href=&#34;https://golang.org/pkg/unsafe/&#34;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; パッケージの説明は個人的にかなり分かりやすかった。&lt;/p&gt;

&lt;p&gt;第8章および第9章を読んでいて気がついたのだが， goroutine/channel を使った CSP (Communicating Sequential Processes) の真価は data driven な設計で真価を発揮するのではないだろうか。
「並行プログラミング」を意識するとどうしてもスレッドを連想してしまうけど，スレッドよりも遥かに軽量な goroutine はもっと無茶ができるはず。
たとえば多数の goroutine をネットワーク化した非ノイマン型っぽい「何か」とか。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;プログラミング言語 Go&lt;/a&gt; : 不定期に書いてます&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/why-go-is-a-poorly-designed-language/&#34;&gt;なぜGo言語は設計が悪いのか – Go愛好者の見地から | 未分類 | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/go-best-practices-2016/&#34;&gt;6年間におけるGoのベストプラクティス | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160706165757.htm&#34;&gt;Big Sky :: golang の channel を使ったテクニックあれこれ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogger.ukai.org/2016/07/gogo.html&#34;&gt;ukai&amp;rsquo;s blog: 『プログラミング言語Go』刊行記念イベント「Goの設計思想を読み解く～実際の開発に活かすために」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Java はやめておけ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/07/java/" />
		<id>tag:text.Baldanders.info,2016-07-09:/remark/2016/07/java/</id>
		<published>2016-07-09T15:27:27+09:00</published>
		<updated>2016-11-08T20:52:07+09:00</updated>
		<summary>現在 Java でバリバリ仕事しているおぢさんから（老婆心ながら）言っておくと「Java はやめておけ」である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://news.nifty.com/article/item/neta/dime-269849/&#34;&gt;ITエンジニアがこれから重要になると思うプログラミング言語TOP10｜ニフティニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うわぁ。
まじすか，これ。
確かに &lt;a href=&#34;http://www.tiobe.com/tiobe_index?page=index&#34;&gt;TIOBE&lt;/a&gt; でも Java は常に1位か2位だけどね。&lt;/p&gt;

&lt;p&gt;現在 Java でバリバリ仕事しているおぢさんから（老婆心ながら）言っておくと「Java はやめておけ」である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35085410/&#34;&gt;Java EEの開発が停滞？&amp;ndash;オラクルの不透明な態度にコミュニティーが不信感 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/java_ee9javaone.html&#34;&gt;オラクル、次期Java EEはマイクロサービスやコンテナをサポートするものになるとコメント。9月のJavaOneで計画を発表予定。ただし本気度には疑問符も － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どういうわけか日本人は Java が大好きで，確かにあと数年は飯の種になるだろうが，将来を見据えれば Java は間違いなく COBOL と同じ道をたどる。
今 COBOL-er は季節労働者のごとく仕事を求めて全国行脚しているそうだ。
以前仕事で一緒になった COBOL プログラマ（私と同年代）は，その前は富山で仕事をしていたと言っていた。&lt;/p&gt;

&lt;p&gt;今後10年20年をにらんで「飯の種」としてプログラミング言語をきちんと学びたいなら「関数型プログラミング言語」を選択すべき&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
個人的には（純正の関数型言語ではないが） Python か ES6 以降の JavaScript をお薦めする。
あっ Swift も多分オススメ。&lt;/p&gt;

&lt;p&gt;日本では何故か Python の人気が薄い気がするが，新しいアイデアは大抵の場合，真っ先に Python で実装される。
Python 自体は飯の種にならなくても技術トレンドを追いかけるなら外せない。&lt;/p&gt;

&lt;p&gt;JavaScript はもともと手続き型言語だが， ES6 で関数型の言語仕様がいろいろと追加されている。
なにより Web システムにおいてサーバ側からクライアント側まで同じ言語で記述できるのは有利な点である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/stkdev/items/5c021d4e5d54d56b927c&#34;&gt;関数型プログラミングはまず考え方から理解しよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/srd7/items/fad2d0a94b99d1de2e48&#34;&gt;for文を使わないプログラミングって？（関数型プログラミング入門） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Swift はオープンソースになってサーバ用途でも使えるようになった。
個人的には色々試してみたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078299/&#34;&gt;IBM、ヴイエムウェアとハイブリッドクラウドで提携&amp;ndash;Swiftのクラウド対応も発表 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taketo1024/items/2ab856d21bf9b9f30357&#34;&gt;Swiftで自然数を作ってみた（ペアノの公理） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taketo1024/items/bd356c59dc0559ee9a0b&#34;&gt;Swiftで代数学入門 〜 1. 数とは何か？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ハードウェア寄りの仕事に興味があるなら C/C++ のような手続き型の言語もいまだに有効である。
たとえば Google の &lt;a href=&#34;https://www.tensorflow.org/&#34; title=&#34;TensorFlow — an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; のバックエンドは C++ で実装されているそうな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/02/tensorflow/&#34;&gt;TensorFlow に関するブックマーク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと，ものすごく個人的な意見として，手続き型言語なら &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;をお薦めする（笑）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;プログラミング言語 Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基礎をきっちり固めてから「第2言語」や「第3言語」として Java や .NET を学ぶのは悪くない。
将来的にはともかく，現時点で Java は「飯の種」になっているので。
でも，上で挙げたような言語を学んだあとで Java をやったら，間違いなくモニタに向かって中指をおっ立てるハメになるであろう（笑）&lt;/p&gt;

&lt;p&gt;最後に。&lt;/p&gt;

&lt;p&gt;反論は自由ですが，私は関知しません。
言語論争は宗教論争と同じで出口がないからね。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774182427/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774182427.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;WEB+DB PRESS Vol.93&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;腹を括って発注かけました。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-09&#34;&gt;2016-07-09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;今回紹介した以外にも Erlang や Haskell や Scala といった言語も気になっているのだが，私が評価できてないので割愛する（Haskell については&lt;a href=&#34;http://postd.cc/becoming-productive-in-haskell/&#34; title=&#34;Haskellで生産性を高める-Pythonからの移行 | プログラミング | POSTD&#34;&gt;この辺の記事&lt;/a&gt;が参考になるかも）。 Scala は飯の種になりそうな気がして本も買ってるのだが&amp;hellip; Python や Swift のような「いまどき」の言語は multiparadigm programming language と呼ぶそうで，古い資産との整合性を取りやすいのが利点である（Scala なんかモロにそうだよね）。見方を変えるなら，今はもっと大きなパラダイム・シフトの真っ最中であると言うこともできる。故に本当に10年後を見据えた場合に，どれが主流になるかなんて誰も予測できないのではないだろうか。たとえばコーディングを AI がやるようになれば，今ある言語は絶滅し， AI が記述しやすい（かつ人間も読みやすい）言語体系が主流になる可能性だってあるのだ。故に「どの言語か？」という議論はあまり意味がなくて，泡沫のように現れては消える技術トレンドをキチンと押さえておくことが重要である。人間死ぬまで勉強ですよ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： GnuPG 2.1.13 および Libgcrypt 1.7.1 がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/06/19-stories/" />
		<id>tag:text.Baldanders.info,2016-06-19:/remark/2016/06/19-stories/</id>
		<published>2016-06-19T19:49:11+09:00</published>
		<updated>2016-07-23T08:57:16+09:00</updated>
		<summary>GnuPG 2.1.13 および Libgcrypt 1.7.1 がリリース / 学校で「プログラミング」を学ばせる必要はない / 今週はセキュリティ・アップデート週間でした / Pokémon GO / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#gpg&#34;&gt;GnuPG 2.1.13 および Libgcrypt 1.7.1 がリリース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ed&#34;&gt;学校で「プログラミング」を学ばせる必要はない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#upd&#34;&gt;今週はセキュリティ・アップデート週間でした&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pg&#34;&gt;Pokémon GO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;gpg&#34;&gt;GnuPG 2.1.13 および Libgcrypt 1.7.1 がリリース&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q2/000389.html&#34;&gt;[Announce] Libgcrypt 1.7.1 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q2/000390.html&#34;&gt;[Announce] GnuPG 2.1.13 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回もセキュリティ・アップデートはなし。&lt;/p&gt;

&lt;p&gt;GnuPG 2.1.13 の変更点は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: New command &lt;code&gt;--quick-addkey&lt;/code&gt;.  Extend the &lt;code&gt;--quick-gen-key&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;gpg: New &lt;code&gt;--keyid-format&lt;/code&gt; &amp;ldquo;&lt;code&gt;none&lt;/code&gt;&amp;rdquo; which is now also the default.&lt;/li&gt;
&lt;li&gt;gpg: New option &lt;code&gt;--with-subkey-fingerprint&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;gpg: Include Signer&amp;rsquo;s UID subpacket in signatures if the secret key has been specified using a mail address and the new option &lt;code&gt;--disable-signer-uid&lt;/code&gt; is not used.&lt;/li&gt;
&lt;li&gt;gpg: Allow unattended deletion of a secret key.&lt;/li&gt;
&lt;li&gt;gpg: Allow export of non-passphrase protected secret keys.&lt;/li&gt;
&lt;li&gt;gpg: New status lines &lt;code&gt;KEY_CONSIDERED&lt;/code&gt; and &lt;code&gt;NOTATION_FLAGS&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;gpg: Change status line &lt;code&gt;TOFU_STATS_LONG&lt;/code&gt; to use &amp;lsquo;&lt;code&gt;~&lt;/code&gt;&amp;rsquo; as a non-breaking-space character.&lt;/li&gt;
&lt;li&gt;gpg: Speedup key listings in Tofu mode.&lt;/li&gt;
&lt;li&gt;gpg: Make sure that the current and total values of a &lt;code&gt;PROGRESS&lt;/code&gt; status line are small enough.&lt;/li&gt;
&lt;li&gt;gpgsm: Allow the use of AES192 and SERPENT ciphers.&lt;/li&gt;
&lt;li&gt;dirmngr: Adjust WKD lookup to current specs.&lt;/li&gt;
&lt;li&gt;dirmngr: Fallback to LDAP v3 if v2 is is not supported.&lt;/li&gt;
&lt;li&gt;gpgconf: New commands &lt;code&gt;--create-socketdir&lt;/code&gt; and &lt;code&gt;--remove-socketdir&lt;/code&gt;, new option &lt;code&gt;--homedir&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If a /run/user/$UID directory exists, that directory is now used for IPC sockets instead of the GNUPGHOME directory.  This fixes problems with NFS and too long socket names and thus avoids the need for redirection files.&lt;/li&gt;
&lt;li&gt;The Speedo build systems now uses the new versions.gnupg.org server to retrieve the default package versions.&lt;/li&gt;
&lt;li&gt;Fix detection of libusb on FreeBSD.&lt;/li&gt;
&lt;li&gt;Speedup fd closing after a fork.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一方， Libgcrypt 1.7.1 の変更点は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bug fixes:

&lt;ul&gt;
&lt;li&gt;Fix ecc_verify for cofactor support.&lt;/li&gt;
&lt;li&gt;Fix portability bug when using gcc with Solaris 9 SPARC.&lt;/li&gt;
&lt;li&gt;Build fix for OpenBSD/amd64&lt;/li&gt;
&lt;li&gt;Add OIDs to the Serpent ciphers.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Internal changes:

&lt;ul&gt;
&lt;li&gt;Use getrandom system call on Linux if available.&lt;/li&gt;
&lt;li&gt;Blinding is now also used for RSA signature creation.&lt;/li&gt;
&lt;li&gt;Changed names of debug envvars&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インストール後はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.1.13
libgcrypt 1.7.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ed&#34;&gt;学校で「プログラミング」を学ばせる必要はない&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mext.go.jp/b_menu/shingi/chousa/shotou/122/attach/1372525.htm&#34;&gt;小学校段階におけるプログラミング教育の在り方について（議論の取りまとめ）：文部科学省&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;単純に特定のプログラミング言語で「コーディングを覚えることが目的ではない」というのは一安心だが&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;プログラミング教育とは、子供たちに、コンピュータに意図した処理を行うよう指示することができるということを体験させながら、将来どのような職業に就くとしても、時代を超えて普遍的に求められる力としての「プログラミング的思考」などを育むことであり&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.mext.go.jp/b_menu/shingi/chousa/shotou/122/attach/1372525.htm&#34;&gt;小学校段階におけるプログラミング教育の在り方について&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;というのは全く以ていただけない。
「プログラミング的思考」に「時代を超えて普遍的に求められる力」はない。
はっきり言うが，それは全く無駄なことである。
それがやりたいのならコンピュータ系の専門学校にでも行かせればいい話である（まぁコンピュータ系の専門学校へ行ってモノになるのは全体の一割弱だろうけど）。&lt;/p&gt;

&lt;p&gt;前に「&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/lets-programming/&#34;&gt;「だれもがプログラミングを学ぶべき」ではない&lt;/a&gt;」でも書いたが，プログラミングもプログラミング言語も手段や道具でしかない。&lt;/p&gt;

&lt;p&gt;プログラミングやプログラミング言語には前提となる学問体系が存在する。
それはたとえば「コンピュータ科学（computer science）」などと言われたりする。
また手段や道具を使うからには，それらを使う目的があるはずである。
たとえば「&lt;a href=&#34;http://marketing-campus.jp/lecture/noyan/045.html&#34; title=&#34;レビット博士が提唱したマーケティングで最も重要な格言とは | ノヤン先生のマーケティング講座 | 講座 | マーケティングキャンパス&#34;&gt;ドリルを買う人が欲しいのは「穴」である&lt;/a&gt;」といったようなことだ。&lt;/p&gt;

&lt;p&gt;コンピュータオタクには偏執者が多く，彼等は手段や道具そのものに異常な執着を見せるが，一般の人達には関係のないことだし，そんな執着心を真似すべきではない。&lt;/p&gt;

&lt;p&gt;コンピュータ科学や社会学・経済学（の基礎となるもの）について小さい頃から学ばせる事自体は賛成だ。
しかし，何度でも言うが「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000744.shtml&#34; title=&#34;日本の「算数」は壊れてる？ — Baldanders.info&#34;&gt;掛け算は順序が大事&lt;/a&gt;」などと言ってはばからない未開人の国がどうやってそれらを教えるというのだ。&lt;/p&gt;

&lt;p&gt;ちなみに「人工知能」の台頭を意識しているのなら，なおさら「プログラミング教育」は不要である。
なぜなら「問題を解決する仕事」はこれからどんどん機械が奪っていくから。
そうなった時に望まれる人材は「問題を解決できる人」ではなく「正しい問いを立てられる人」である。
親や学校教師に言われた通りのことしかできない子どもは，大人社会の中では機械以下の底辺でしか生きられなくなる。&lt;/p&gt;

&lt;p&gt;一時の流行り廃りに流されることなく，きちんと足元を見て，50年100年のタイムスケールで「教育」というものを考えて欲しい。&lt;/p&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/05/17/20160510please-dont-learn-to-code/&#34;&gt;頼むからプログラミングを学ばないでくれ | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;upd&#34;&gt;今週はセキュリティ・アップデート週間でした&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.technet.microsoft.com/jpsecurity/2016/06/15/201606-security-bulletin/&#34;&gt;2016 年 6 月のセキュリティ情報 (月例) – MS16-063, MS16-068 ～ MS16-082 | 日本のセキュリティチーム&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2016/at160025.html&#34;&gt;2016年 6月 Microsoft セキュリティ情報 (緊急 5件含) に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/ciadr/vul/20160615-ms.html&#34;&gt;Microsoft 製品の脆弱性対策について(2016年6月)：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jprs.jp/tech/security/2016-06-17-msdns-vuln-remotecodeexec.html&#34;&gt;（緊急）Microsoft Windows DNSの脆弱性（リモートでのコード実行）について（CVE-2016-3227）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvndb.jvn.jp/ja/contents/2016/JVNDB-2016-003040.html&#34;&gt;JVNDB-2016-003040 Apache Struts における任意のコードを実行される脆弱性 - JVN iPedia - 脆弱性対策情報データベース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvndb.jvn.jp/ja/contents/2016/JVNDB-2016-003113.html&#34;&gt;JVNDB-2016-003113 Android のメディアサーバの libstagefright における権限を取得される脆弱性 - JVN iPedia - 脆弱性対策情報データベース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvndb.jvn.jp/ja/contents/2016/JVNDB-2016-003134.html&#34;&gt;JVNDB-2016-003134 Android の sdcard/sdcard.c における権限を取得される脆弱性 - JVN iPedia - 脆弱性対策情報データベース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvndb.jvn.jp/ja/contents/2016/JVNDB-2016-003093.html&#34;&gt;JVNDB-2016-003093 GNU C Library の sunrpc/clnt_udp.c の clntudp_call 関数におけるスタックベースのバッファオーバーフローの脆弱性 - JVN iPedia - 脆弱性対策情報データベース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/ciadr/vul/20160615-adobeflashplayer.html&#34;&gt;Adobe Flash Player の脆弱性対策について(APSA16-03)(CVE-2016-4171)：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2016/at160026.html&#34;&gt;Adobe Flash Player の脆弱性 (APSB16-18) に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://forest.watch.impress.co.jp/docs/news/1005272.html&#34;&gt;「Adobe Flash Player」にゼロデイ脆弱性、攻撃者にシステムを乗っ取られる恐れ - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://forest.watch.impress.co.jp/docs/news/1005785.html&#34;&gt;「Google Chrome 51」に3件の脆弱性、修正が施されたv51.0.2704.103が公開 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと，最近は不正アクセスやアカウント情報漏洩に絡む記事が多い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.kaspersky.co.jp/myspace-tumbler-data-breach/11619/&#34;&gt;Tumblrと（懐かしの）MySpaceから大量のログイン情報が流出 | Kaspersky Daily - カスペルスキー公式ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/06/09/20160608twitter-hack/&#34;&gt;3200万のTwitterアカウントのパスワードがハックされてリークした、かもしれない | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/2190-github-security-update-reused-password-attack&#34;&gt;GitHub Security Update: Reused password attack&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35084420/&#34;&gt;GitHub、不正アクセスを確認&amp;ndash;他サービスから流出したパスワードを試行の可能性 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20160614/1465925330&#34;&gt;JTBへの不正アクセスについてまとめてみた - piyolog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35084254/&#34;&gt;JTB、793万人分の個人情報流出か&amp;ndash;外部への通信で不正アクセスと判明 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“&lt;a href=&#34;https://haveibeenpwned.com/&#34; title=&#34;Have I been pwned? Check if your email has been compromised in a data breach&#34;&gt;Have I been pwned?&lt;/a&gt;” のサイトには過去漏洩したアカウント情報のデータベースがあり，自分のアカウントが漏洩しているかどうか調べれることができる。
ご利用の際は自己責任でどうぞ。&lt;/p&gt;

&lt;p&gt;なお，パスポート番号については&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;担当者は「番号や取得日が流出していても、パスポートの冊子じたいを手元にお持ちであれば、過剰な心配には及ばない」と話し、番号が漏れてしまった人も、再発行手続きなどは「不要だと考えている」という。外務省としても、今回の問題に伴う特別な対応などは「考えていない」という。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1606/15/news102.html&#34;&gt;パスポート番号漏えい、偽造のリスクは？　外務省に聞いた - ITmedia ニュース&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;なんだそうで，あくまでもパスポートの原本が大事，ということらしい。&lt;/p&gt;

&lt;p&gt;パスワード認証についてはいつものとおり。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;可能な限り2要素認証を使うこと&lt;/li&gt;
&lt;li&gt;サービス間で同じパスワードを使いまわさないこと&lt;/li&gt;
&lt;li&gt;パスワードは推測の難しい充分に複雑なものにすること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;を最低限守っておけばいざというときの被害が少なくて済む&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
パスワードの強度については，いつものあの表を引用するが，&lt;/p&gt;

&lt;figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&#39;4&#39;&gt;利用する文字種類数と内訳&lt;/th&gt;
&lt;th colspan=&#39;4&#39;&gt;パスワード長&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;種類数&lt;/th&gt;
&lt;th&gt;数字&lt;/th&gt;
&lt;th&gt;文字&lt;/th&gt;
&lt;th&gt;シンボル&lt;/th&gt;
&lt;th&gt;4文字&lt;/th&gt;
&lt;th&gt;8文字&lt;/th&gt;
&lt;th&gt;12文字&lt;/th&gt;
&lt;th&gt;16文字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;10種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;      &lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{13.3}$）&lt;/td&gt;&lt;td&gt;1円未満（$2^{26.6}$）&lt;/td&gt;  &lt;td&gt;約35円（$2^{39.9}$）&lt;/td&gt;     &lt;td&gt;約35万円（$2^{53.2}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;36種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;/td&gt;       &lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{20.7}$）&lt;/td&gt;&lt;td&gt;約100円（$2^{41.4}$）&lt;/td&gt;  &lt;td&gt;約1.65億円（$2^{62.0}$）&lt;/td&gt; &lt;td&gt;約276兆円（$2^{82.7}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;62種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{23.8}$）&lt;/td&gt;&lt;td&gt;約7,500円（$2^{47.6}$）&lt;/td&gt;&lt;td&gt;約1,120億円（$2^{71.5}$）&lt;/td&gt;&lt;td&gt;約165京円（$2^{95.3}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;94種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;&lt;td&gt;&lt;code style=&#39;font-size:smaller;&#39;&gt;! &#34; # $ %&lt;br&gt;&amp;amp; &#39; ( ) =&lt;br&gt;~ | - ^ `&lt;br&gt;¥ { @ [&lt;br&gt;+ * ] ; :&lt;br&gt;} &amp;lt; &amp;gt; ? _&lt;br&gt;, . /&lt;/code&gt;&lt;/td&gt;
                                                             &lt;td&gt;1円未満（$2^{26.2}$）&lt;/td&gt;&lt;td&gt;約21万円（$2^{52.4}$）&lt;/td&gt; &lt;td&gt;約16.5兆円（$2^{78.7}$）&lt;/td&gt; &lt;td&gt;約129,000京円（$2^{104.9}$）&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;パスワード解読の想定コスト例（&lt;q&gt;&lt;a href=&#39;https://www.ipa.go.jp/files/000026760.pdf&#39;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 2.4.2.2項より）&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;12文字を目安に数字と英字（大文字小文字）を絡めたランダムな文字列にする。
人間の脳は無意識に規則性を求めてしまうものなので，横着せずパスワード生成ツールを使ったほうがよい。
もっと言うなら「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000739.shtml&#34; title=&#34;「パスワードを覚える」なんて脳みその無駄遣い — Baldanders.info&#34;&gt;パスワードを覚えるなんて脳みその無駄遣い&lt;/a&gt;」である。
&lt;a href=&#34;http://keepass.info/&#34; title=&#34;KeePass Password Safe&#34;&gt;KeePass&lt;/a&gt; のようなパスワード管理ツールを使うこと。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; は2要素認証が使えるが，2要素認証を使うと https で git push する際にパスワードが有効でなくなる。
この場合は access token を取得してパスワードとして使えばよい。
また master branch にプロテクトを掛けることで直接 master branch に push させないようにする手もある（pull request でのみ merge 可能にする）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/27154130743/&#34;&gt;&lt;img srcset=&#34;https://c8.staticflickr.com/8/7352/27154130743_8690a88078.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Branch Protection&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/27154130743/&#34;&gt;Branch Protection&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;更に，前にも紹介したが， &lt;a href=&#34;http://text.baldanders.info/remark/2016/04/git-commit-with-openpgp-signature/&#34; title=&#34;Git Commit で OpenPGP 署名を行う&#34;&gt;commit に OpenPGP 署名を付与する&lt;/a&gt;ことで不正な merge を検出しやすくできるかもしれない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; アカウントはエンジニアにとっては Twitter や Facebook よりも重要な identity なので，きっちり管理していきたいものである。&lt;/p&gt;

&lt;h2 id=&#34;pg&#34;&gt;Pokémon GO&lt;/h2&gt;

&lt;p&gt;すっかり忘れていたが，いよいよ出るらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/06/18/pokemon-go-will-soon-bring/&#34;&gt;『Pokémon GO』開発現場を直撃──もうすぐぼくらは、ポケモンを現実世界でゲットできる｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/lKUwVYUKii4&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lKUwVYUKii4&#34;&gt;【公式】『Pokémon GO』　初公開映像 - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;いやぁ &lt;a href=&#34;https://www.nianticlabs.com/&#34; title=&#34;Niantic, Inc.&#34;&gt;NIANTIC&lt;/a&gt; が絡んでて面白くならないわけがないよね。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;イングレスで「ポータル」として指定されている地点は、いまや1,500万にもなる。図書館、博物館、歴史的な場所、彫像、パブリックアートワークといったそれらのランドマークが、Pokémon GOではポケストップやジムとして使われるわけだ。
&lt;br&gt;各地のデータを集めてくれたイングレスプレイヤーたちのおかげでPokémon GOはそのスタートから「ロケットスタート」を迎えられる。ちなみに、先週末カリフォルニアのマウントディアブロで登山をしていたハンケは、その途中でポケストップやジムになっているピースマーカー（山頂の基準点）やトレイルマーカー（道標）を見つけた。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2016/06/18/pokemon-go-will-soon-bring/&#34;&gt;『Pokémon GO』開発現場を直撃──もうすぐぼくらは、ポケモンを現実世界でゲットできる&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;さらにこれは朗報。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;Pokémon GOを詳しく知るための、もう1つのパズルのピースが「Pokémon GO Plus」だ。Bluetooth接続するタイプのウェアラブルデヴァイスで、これを持ち歩けばスマートフォンを見続けずに済む。「そう、頭を下げて歩き回る必要はないのです」と、ハンケも言う。
&lt;br&gt;「ポケストップやポケモンに近づくと、点滅し振動します。アイテムを取得し、ポケモンを捕獲することもできます。スマホを見ることなく、毎朝の通勤中に使えます」&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2016/06/18/pokemon-go-will-soon-bring/&#34;&gt;『Pokémon GO』開発現場を直撃──もうすぐぼくらは、ポケモンを現実世界でゲットできる&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ingress.com/&#34;&gt;Ingress&lt;/a&gt; でもこれがあれば良かったのに。
ねぇ。
そういえば，脚を痛めて以来 &lt;a href=&#34;https://www.ingress.com/&#34;&gt;Ingress&lt;/a&gt; はご無沙汰だったんだよな。
忙しいからオフ会とかも出れないし。&lt;/p&gt;

&lt;p&gt;というわけで，今更だけど&lt;a href=&#34;http://www.pokemon.co.jp/redirect/index.php/3901/&#34;&gt;フィールドテスト&lt;/a&gt;に申し込んでみた。
もう無理かな。&lt;/p&gt;

&lt;p&gt;さて，世のお父さんお母さんたちはどうなる（笑） どえらいおもちゃが出てしまいますよ。&lt;/p&gt;

&lt;h2 id=&#34;other&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases/tag/v0.16&#34;&gt;Release v0.16 · spf13/hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://acetaminophen.hatenablog.com/entry/new-platex-20160507-01&#34;&gt;新しい pLaTeX の話：非公式リリースノート 2016 年版 (1) - Acetaminophen’s diary&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://acetaminophen.hatenablog.com/entry/new-platex-20160507-02&#34;&gt;新しい pLaTeX の話：非公式リリースノート 2016 年版 (2) - Acetaminophen’s diary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fsight.jp/articles/-/41274&#34;&gt;フロリダとパリのテロはグローバル・ジハードの拡散の典型：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fsight.jp/articles/-/41273&#34;&gt;フロリダ州オーランドのゲイ・ナイトクラブへのテロに対するオバマの言葉：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fsight.jp/articles/-/41275&#34;&gt;グローバル・ジハードの「触発」と「指示」の相違：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fsight.jp/articles/-/41276&#34;&gt;フロリダのテロが示す、宗教規範と世俗・リベラルな規範の間の「葛藤」：池内恵 | 中東の部屋 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4120048349/baldandersinf-22/&#34;&gt;Amazon.co.jp： 増補新版 イスラーム世界の論じ方: 池内 恵: 本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/178/1178273/&#34;&gt;ASCII.jp：脆弱性情報のサイトでよく目にする「CVE」とは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1606/14/news071.html&#34;&gt;Apple、iPadでコーディングして学べる「Swift Playgrounds」を無償提供 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/06/14/20160613microsoft-to-buy-linkedin-for-26b-in-cash-makes-big-move-into-enterprise-social-media/&#34;&gt;MicrosoftがLinkedInを262億ドルで買収、エンタープライズ向けソーシャルメディアに参入 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/06/17/instagram-gunsforsale/&#34;&gt;Instagramで売りに出される銃と、ソーシャルメディアのモラル｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35083529/&#34;&gt;ソフトウェアのバグをなくすには？&amp;ndash;プログラミングの際に避けるべき10の失敗 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://note.golden-lucky.net/2016/06/markdowngithub.html&#34;&gt;k16&amp;rsquo;s note: Markdown原稿をGitHubで管理して本にする仕組みが出版社で導入されないわけ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;アカウント情報を含む個人情報漏洩はもはや「あり得べきもの」として事後をふまえた備えが必要。これを「未然防止」という。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ハード屋が書く C ソースコードが凄まじかった思い出（再掲載） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/06/code-by-hardware-engineer/" />
		<id>tag:text.Baldanders.info,2016-06-04:/remark/2016/06/code-by-hardware-engineer/</id>
		<published>2016-06-04T09:08:09+09:00</published>
		<updated>2016-06-04T09:08:09+09:00</updated>
		<summary>この件では，若いころのほろ苦い思い出がある。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;これは&lt;a href=&#34;https://medium.com/@spiegel/-1ca9e4895f4c&#34;&gt;ちょうど1年前に Medium で書いた記事&lt;/a&gt;の再掲載である。
今は Medium を全く利用しないので，昔書いたもので（私が）面白いと思った記事は少しずつこっちに移転しようかな。&lt;/p&gt;

&lt;hr /&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この記事で面白いのは、Michael Barr が20ヶ月以上にわたりトヨタ車で使われているソースコードを、Philip Koopman カーネギーメロン大学教授がトヨタのエンジニアリングの安全プロセスを精査した話で、両者ともトヨタのソフトウェアがスパゲッティコード山盛りなことを証言している。
&lt;br&gt;
トヨタの生産方式はアジャイル方面においてソフトウェア開発手法に多大な影響を与えている。ところでそのトヨタが開発するソフトウェアの品質はどうなんだろう、というのは多くの人の頭に浮かぶ疑問だろう。組み込みソフトウェアのエキスパートによると、ものすごく複雑で、複雑すぎてテストもメンテもできない関数がたくさんあるとか、グローバル変数が1万個以上あるとかなかなか壮絶らしい……。マジかよ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20150604/toyota&#34;&gt;トヨタの車のソースコードはスパゲッティコード山盛り？ - YAMDAS現更新履歴&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この件では，若いころのほろ苦い思い出がある。&lt;/p&gt;

&lt;p&gt;私は若いころは「システムハウス」と呼ばれる類の会社にいたのだが，そこではハードとソフトの両面で開発を進められるのが「売り」だった。
&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000529.shtml&#34; title=&#34;私はこうしてプログラミングを覚えた — Baldanders.info&#34;&gt;私はハードは壊滅的にダメ&lt;/a&gt;なのでソフトウェア担当。
当時のハード屋は自分が組んだ回路の実証のために自分でもプログラムを組んで動作確認する。
私たちソフト屋はそのコードをもらって実際のコードを書くわけだが，この実証コードが凄まじかった。&lt;/p&gt;

&lt;p&gt;まず変数は全てグローバル変数。
スコープとかカプセル化なんて知るか！ という気概が感じられる。
そして関数は果てしなく長い main 関数のみ。
無間地獄のネスト。
goto 文で飛びまくり。
なのに異常系の記述は皆無。
世に聞く「スパゲッティ・コード」とはこのようなものなのかと感嘆したよ。&lt;/p&gt;

&lt;p&gt;一番凄かったのは，とあるチップを使った30次のバンドパスフィルタを組むのに「サンプルがあるから簡単でしょ」と言われてサンプルを見たら世にも悍ましいコードで，解析するだけで半月もかかってしまった。&lt;/p&gt;

&lt;p&gt;まぁ，ハード屋がこういうコードを書くのは理由があって，変数を記述するときはメモリ上のマッピングをそのまま置き換えようとするし，ロジックも基本的にマシン語のインストラクションをそのまま C に置き換えようとするから「関数」という概念がそもそもないことが多い&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;おかげで私は「他人のコードを読む」ことがすんごい得意になってしまった。
アレに比べればソフト屋の書くコードなんて絵本を読むように分かりやすい（笑） でも，こんなしょうもない特技でも後年ちゃんと役に立ってるんだから世の中というのは分からないものである。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/427406932X/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51llL1uygcL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/427406932X/baldandersinf-22/&#34;&gt;リーン開発の現場 カンバンによる大規模プロジェクトの運営&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Henrik Kniberg 角谷 信太郎 &lt;/dd&gt;&lt;dd&gt;オーム社 2013-10-26&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4897979358/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4897979358.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハイブリッドアジャイルの実践&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/462108786X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/462108786X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Fearless Change アジャイルに効く アイデアを組織に広めるための48のパターン&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/482228350X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/482228350X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;リーン開発の本質&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798130613/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798130613.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ディシプリンド・アジャイル・デリバリー エンタープライズ・アジャイル実践ガイド (Object Oriented SELECTION)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117097/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117097.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Serverspec&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「かんばん方式」もだいぶ浸透してきましたよね。私はこれで勉強しました。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-02-17&#34;&gt;2015/02/17&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;ハード屋は call インストラクションを「特殊なジャンプ」程度にしか認識していない（まぁ確かにそうなのだが）。あるプロジェクトで見せてもらったアセンブラコードでは call で積んだスタックをいじって戻り先アドレスを変えて return する記述が頻出していた。これはアセンブラ・コードにパッチを当てる際の基本テクニックらしい。大昔の話だよ（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
