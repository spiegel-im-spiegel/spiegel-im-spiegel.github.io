<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Programming - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/programming/index.xml" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/programming/index.xml/index.xml" />
	<id>tag:text.Baldanders.info,0001-01-01:/</id>
	<updated>0001-01-01T00:00:00+00:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.19</generator>

	
	<entry>
		<title>「プレミアムフライデー」を求めるパッケージを作ってみた - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/premium-friday/" />
		<id>tag:text.Baldanders.info,2017-03-04:/golang/premium-friday/</id>
		<published>2017-03-04T09:40:51+09:00</published>
		<updated>2017-03-04T09:40:51+09:00</updated>
		<summary>もちろん息抜きである。潤いは大事。でも実用性はないと思われ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;そういえば先月の「プレミアムフライデー」，皆様はいかがお過ごしでしたか。
私は3時間も残業してしまいましたよ（笑）&lt;/p&gt;

&lt;p&gt;ちうわけで，以下を真似して「プレミアムフライデー」を求めるパッケージを考えてみる。
もちろん息抜きである。
潤いは大事。
でも実用性はないと思われ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/neko_the_shadow/items/4ebf94a8a6d9282e7207&#34;&gt;プレミアムフライデーを求めるメソッドを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/deaf_tadashi/items/963a62072338f09f12a5&#34;&gt;プレミアムフライデーを求めるメソッドを作った（Java8版） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まずはパッケージ分割しないでベタに書いてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;
)

//GetPremiumFriday returns day of premium friday
func GetPremiumFriday(y int, m time.Month) (int, error) {
	//引数のチェック
	if y &amp;lt; 2017 || (m &amp;lt; time.January &amp;amp;&amp;amp; m &amp;gt; time.December) {
		return 0, os.ErrInvalid
	}
	if y == 2017 &amp;amp;&amp;amp; m &amp;lt; time.February { //2017年1月は実施前なのでエラー
		return 0, os.ErrInvalid
	}

	//指定月末（翌月0日）で初期化する
	tz, err := time.LoadLocation(&amp;quot;Asia/Tokyo&amp;quot;)
	if err != nil {
		return 0, err
	}
	tm := time.Date(y, m+1, 0, 0, 0, 0, 0, tz)

	//月末尾から1日ずつ減じて最終金曜日を探す
	for {
		if tm.Weekday() == time.Friday {
			break
		}
		tm = tm.AddDate(0, 0, -1)
	}
	return tm.Day(), nil
}

func main() {
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 2 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月を指定してください&amp;quot;)
		return
	}
	args := make([]int, 2)
	for i := 0; i &amp;lt; 2; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		}
		args[i] = num
	}
	d, err := GetPremiumFriday(args[0], time.Month(args[1]))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	fmt.Println(d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定月末を求めるのに「翌月0日」で初期化するのがポイント（つか，ここしかポイントになるものがない&lt;code&gt;w&lt;/code&gt;）。
実行結果は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run pf.go 2017 2
24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;期待通りの値が得られた。&lt;/p&gt;

&lt;p&gt;関数1個だけなんでパッケージにするのもどうかと思うけど折角なのでパッケージ化してみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/pf&#34;&gt;spiegel-im-spiegel/pf: Premium Friday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容は &lt;code&gt;GetPremiumFriday()&lt;/code&gt; 関数を切り出しただけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package pf

import (
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

//GetPremiumFriday returns day of premium friday
func GetPremiumFriday(y int, m time.Month) (int, error) {
	//引数のチェック
	if y &amp;lt; 2017 || (m &amp;lt; time.January &amp;amp;&amp;amp; m &amp;gt; time.December) {
		return 0, os.ErrInvalid
	}
	if y == 2017 &amp;amp;&amp;amp; m &amp;lt; time.February { //2017年1月は実施前なのでエラー
		return 0, os.ErrInvalid
	}

	//指定月末（翌月0日）で初期化する
	tz, err := time.LoadLocation(&amp;quot;Asia/Tokyo&amp;quot;)
	if err != nil {
		return 0, err
	}
	tm := time.Date(y, m+1, 0, 0, 0, 0, 0, tz)

	//月末尾から1日ずつ減じて最終金曜日を探す
	for {
		if tm.Weekday() == time.Friday {
			break
		}
		tm = tm.AddDate(0, 0, -1)
	}
	return tm.Day(), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;したがって &lt;code&gt;main()&lt;/code&gt; 関数はこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/pf&amp;quot;
)

func main() {
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 2 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月を指定してください&amp;quot;)
		return
	}
	args := make([]int, 2)
	for i := 0; i &amp;lt; 2; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		}
		args[i] = num
	}
	d, err := pf.GetPremiumFriday(args[0], time.Month(args[1]))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	fmt.Println(d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁこんなもんかな。
遊んだ遊んだ。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>演算子とステートメント - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/operators-and-statements/" />
		<id>tag:text.Baldanders.info,2017-02-20:/golang/operators-and-statements/</id>
		<published>2017-02-20T21:07:33+09:00</published>
		<updated>2017-02-21T11:44:15+09:00</updated>
		<summary>今回は「つまみ食い」的に演算子（operator）とステートメント（statement）について解説する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（この記事は &lt;a href=&#34;http://qiita.com/&#34;&gt;Qiita&lt;/a&gt; に投稿した「&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/2c6cf5ff44d816d1be7b&#34;&gt;Go 言語の &lt;code&gt;++&lt;/code&gt; や &lt;code&gt;--&lt;/code&gt; は演算子ではない - Qiita&lt;/a&gt;」を大幅に修正して再構成したものです）&lt;/p&gt;

&lt;p&gt;あるプログラミング言語を習得する際に最も早道なのは「たくさんの（他人の）コードを読むこと」であり「たくさんのコードを（コピペではなく自分で）書く」ことである。
これは間違いない。
しかし，その言語の仕様をきちんと把握してないとコードを読んでも間違って理解するかもしれないし，何より実際に自分でコードを書く際に躓く原因になる。&lt;/p&gt;

&lt;p&gt;というわけで，少なくとも学ぶ言語の言語仕様を一度は眺めておくことをお勧めする。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は以下のページで言語仕様を見ることができる（“&lt;a href=&#34;https://tour.golang.org/&#34;&gt;A Tour of Go&lt;/a&gt;” の後で読むと頭に入りやすいかもしれない）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.jp/go_spec&#34;&gt;Goプログラミング言語仕様 - golang.jp&lt;/a&gt; : 日本語だが内容が古いので注意&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は「つまみ食い」的に演算子（operator）とステートメント（statement）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:stmt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:stmt&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; について軽く紹介してみる。&lt;/p&gt;

&lt;h2 id=&#34;stmnt&#34;&gt;ステートメント&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;においては「ステートメント」は以下のように定義されている。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Statement =
	Declaration | LabeledStmt | SimpleStmt |
	GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
	FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
	DeferStmt .

SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;まぁ名前で何か大体わかると思う。
ここでは &lt;code&gt;SimpleStmt&lt;/code&gt; (simple statement) に絞って紹介しよう。&lt;/p&gt;

&lt;h3 id=&#34;empty-statements&#34;&gt;Empty Statements&lt;/h3&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;EmptyStmt = .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;文字通り空のステートメント。&lt;/p&gt;

&lt;h3 id=&#34;expression-statements&#34;&gt;Expression Statements&lt;/h3&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ExpressionStmt = Expression .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;式（expression）を表すステートメント。
関数呼び出しや受信操作のコンテキスト内に記述できる。&lt;/p&gt;

&lt;p&gt;さらに式は以下のように定義される。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Expression = UnaryExpr | Expression binary_op Expression .
UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .

binary_op  = &amp;quot;||&amp;quot; | &amp;quot;&amp;amp;&amp;amp;&amp;quot; | rel_op | add_op | mul_op .
rel_op     = &amp;quot;==&amp;quot; | &amp;quot;!=&amp;quot; | &amp;quot;&amp;lt;&amp;quot; | &amp;quot;&amp;lt;=&amp;quot; | &amp;quot;&amp;gt;&amp;quot; | &amp;quot;&amp;gt;=&amp;quot; .
add_op     = &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;|&amp;quot; | &amp;quot;^&amp;quot; .
mul_op     = &amp;quot;*&amp;quot; | &amp;quot;/&amp;quot; | &amp;quot;%&amp;quot; | &amp;quot;&amp;lt;&amp;lt;&amp;quot; | &amp;quot;&amp;gt;&amp;gt;&amp;quot; | &amp;quot;&amp;amp;&amp;quot; | &amp;quot;&amp;amp;^&amp;quot; .

unary_op   = &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;!&amp;quot; | &amp;quot;^&amp;quot; | &amp;quot;*&amp;quot; | &amp;quot;&amp;amp;&amp;quot; | &amp;quot;&amp;lt;-&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;（&lt;code&gt;PrimaryExpr&lt;/code&gt; (primary expression) については割愛する。詳細は「&lt;a href=&#34;https://golang.org/ref/spec&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;言語仕様&lt;/a&gt;」で確かめてみてください。ここでは &lt;code&gt;Expression&lt;/code&gt; を構成する要素にはステートメントが含まれないことに注目）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;binary_op&lt;/code&gt;, &lt;code&gt;rel_op&lt;/code&gt;, &lt;code&gt;add_op&lt;/code&gt;, &lt;code&gt;mul_op&lt;/code&gt;, &lt;code&gt;unary_op&lt;/code&gt; は演算子である。
演算子については&lt;a href=&#34;#op&#34;&gt;後述&lt;/a&gt;する。&lt;/p&gt;

&lt;h3 id=&#34;send-statements&#34;&gt;Send Statements&lt;/h3&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;SendStmt = Channel &amp;quot;&amp;lt;-&amp;quot; Expression .
Channel  = Expression .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; 送信のステートメント。&lt;/p&gt;

&lt;h3 id=&#34;incdec-statements&#34;&gt;IncDec Statements&lt;/h3&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;IncDecStmt = Expression ( &amp;quot;++&amp;quot; | &amp;quot;--&amp;quot; ) .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;インクリメント（increment）およびデクリメント（decrement）のステートメント。
C/C++ のように &lt;code&gt;++x&lt;/code&gt; みたいな記述はできないので注意。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;code&gt;IncDecStmt&lt;/code&gt; は次の代入ステートメントの以下の記述と同じである。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IncDec statement&lt;/th&gt;
&lt;th&gt;Assignment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x += 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;x--&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x -= 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;assignments&#34;&gt;Assignments&lt;/h3&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Assignment = ExpressionList assign_op ExpressionList .
assign_op = [ add_op | mul_op ] &amp;quot;=&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;代入。
&lt;code&gt;add_op&lt;/code&gt;, &lt;code&gt;mul_op&lt;/code&gt; は先ほど出た &lt;code&gt;Expression&lt;/code&gt; の演算子を指す。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;add_op     = &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;|&amp;quot; | &amp;quot;^&amp;quot; .
mul_op     = &amp;quot;*&amp;quot; | &amp;quot;/&amp;quot; | &amp;quot;%&amp;quot; | &amp;quot;&amp;lt;&amp;lt;&amp;quot; | &amp;quot;&amp;gt;&amp;gt;&amp;quot; | &amp;quot;&amp;amp;&amp;quot; | &amp;quot;&amp;amp;^&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;定義だと &lt;code&gt;assign_op&lt;/code&gt; は演算子っぽく見える。
そもそも代入を “assignment operation” と表記しているのだ。
どうなんだろう。
まぁ，いずれにしろ代入自体は間違いなくステートメントであり式の中には含められない。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;code&gt;ExpressionList&lt;/code&gt; は &lt;code&gt;Expression&lt;/code&gt; を列挙したものである。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ExpressionList = Expression { &amp;quot;,&amp;quot; Expression } .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これにより代入の左辺・右辺を組（tuple）で記述できる。
たとえば2つの変数の値を入れ替える場合は以下のように記述する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;x, y = y, x
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;short-variable-declarations&#34;&gt;Short Variable Declarations&lt;/h3&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;ShortVarDecl = IdentifierList &amp;quot;:=&amp;quot; ExpressionList .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;変数宣言の短縮表現。
&lt;code&gt;var&lt;/code&gt; キーワードを使った以下の表現と同じ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;quot;var&amp;quot; IdentifierList = ExpressionList .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;IdentifierList&lt;/code&gt; は &lt;code&gt;identifier&lt;/code&gt; を列挙したもので&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;IdentifierList = identifier { &amp;quot;,&amp;quot; identifier } .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これにより &lt;code&gt;identifier&lt;/code&gt; で記述される複数の変数をまとめて宣言・初期化できる。
&lt;code&gt;identifier&lt;/code&gt; の定義は以下の通り&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;identifier = letter { letter | unicode_digit } .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ちなみに変数名となる &lt;code&gt;identifier&lt;/code&gt; は全ての Unicode 文字を許容する。
なので日本語交じりでこんな書き方もできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    わーい := &amp;quot;わーい！ たのしー！&amp;quot;
    fmt.Println(わーい)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;op&#34;&gt;演算子&lt;/h2&gt;

&lt;p&gt;さて，式と演算子の定義を再び掲げる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Expression = UnaryExpr | Expression binary_op Expression .
UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .

binary_op  = &amp;quot;||&amp;quot; | &amp;quot;&amp;amp;&amp;amp;&amp;quot; | rel_op | add_op | mul_op .
rel_op     = &amp;quot;==&amp;quot; | &amp;quot;!=&amp;quot; | &amp;quot;&amp;lt;&amp;quot; | &amp;quot;&amp;lt;=&amp;quot; | &amp;quot;&amp;gt;&amp;quot; | &amp;quot;&amp;gt;=&amp;quot; .
add_op     = &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;|&amp;quot; | &amp;quot;^&amp;quot; .
mul_op     = &amp;quot;*&amp;quot; | &amp;quot;/&amp;quot; | &amp;quot;%&amp;quot; | &amp;quot;&amp;lt;&amp;lt;&amp;quot; | &amp;quot;&amp;gt;&amp;gt;&amp;quot; | &amp;quot;&amp;amp;&amp;quot; | &amp;quot;&amp;amp;^&amp;quot; .

unary_op   = &amp;quot;+&amp;quot; | &amp;quot;-&amp;quot; | &amp;quot;!&amp;quot; | &amp;quot;^&amp;quot; | &amp;quot;*&amp;quot; | &amp;quot;&amp;amp;&amp;quot; | &amp;quot;&amp;lt;-&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で式に使える演算子はここに挙げられているものが全てである。
このうち二項演算子（&lt;code&gt;binary_op&lt;/code&gt;）には優先順位が付けられている。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Precedence&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Operator&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;*  /  %  &amp;lt;&amp;lt;  &amp;gt;&amp;gt;  &amp;amp;  &amp;amp;^&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;+  -&lt;/code&gt;  |  &lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;==  !=  &amp;lt;  &amp;lt;=  &amp;gt;  &amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;||&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;The Go Programming Language Specification&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;なお単項演算子（&lt;code&gt;unary_op&lt;/code&gt;）は二項演算子よりも高い優先順位で機能する。
したがって全体としてはこんな感じだろうか。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Precedence&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Operator&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;unary_op&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;mul_op&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;add_op&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;rel_op&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;||&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;インクリメント-デクリメントは演算子ではない&#34;&gt;インクリメント／デクリメントは演算子ではない&lt;/h3&gt;

&lt;p&gt;たとえば &lt;a href=&#34;http://www.bohyoh.com/CandCPP/C/operator.html&#34; title=&#34;BohYoh.com【Ｃ言語講座】演算子一覧表&#34;&gt;C 言語の演算子&lt;/a&gt;と比較すると &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではインクリメント（&lt;code&gt;++&lt;/code&gt;）／デクリメント（&lt;code&gt;--&lt;/code&gt;）が演算子として扱われていないことに気付く&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:op&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:op&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではインクリメント／デクリメント（および代入）はステートメントである。&lt;/p&gt;

&lt;p&gt;これはどういうことかというと，たとえば C 言語のコードに似せて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	i := 1
	fmt.Println(i++)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書いてコンパイルしようとしても&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;syntax error: unexpected ++, expecting comma or )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とコンパイルエラーになるということである（式を構成する要素にステートメントは含まれないことを思い出してほしい）。
これはコードを，以下のように，代入に置き換えたほうが直感的で分かりやすいかもしれない。
（この場合も「&lt;code&gt;syntax error: unexpected +=, expecting comma or )&lt;/code&gt;」でコンパイルエラーになる）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	i := 1
	fmt.Println(i+=1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私見で申し訳ないが，私は「式中の演算子は変数の状態を変えるべきではない」と考えている。
たとえば C/C++ では &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt; 演算子を前置にすべきか後置にすべきかというのでよく議論になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:pp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:pp&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
しかし，これはそもそも &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt; 演算子が式の中で対象の変数の状態を変えてしまうことに問題があるのだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではインクリメントやデクリメント（あるいは代入）といった変数の状態を変える操作をステートメントとし，式の中に埋め込むことを禁止することでこの問題を回避しているように見える。
式の中で変数の状態が変わらないのであれば副作用を気にすることなく安全にコードを書くことができる。&lt;/p&gt;

&lt;p&gt;ただし例外がある。&lt;/p&gt;

&lt;h3 id=&#34;channel-操作&#34;&gt;&lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; 操作&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; 操作では，送信はステートメントだが受信は &lt;code&gt;&amp;lt;-&lt;/code&gt; 単項演算子を使う。
したがって，こんな記述もできる（意味があるかどうかはともかく）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ch2 &amp;lt;- &amp;lt;-ch1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; 受信を含んだ式では &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; 変数の状態が変わる副作用（特に deadlock 関連）に注意を払う必要がある。&lt;/p&gt;

&lt;h2 id=&#34;とまぁ-こんな感じで&#34;&gt;とまぁ，こんな感じで&lt;/h2&gt;

&lt;p&gt;手を動かしながら「&lt;a href=&#34;https://golang.org/ref/spec&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;言語仕様&lt;/a&gt;」を眺めていくと，いろいろ発見があって楽しいと思う。&lt;/p&gt;

&lt;p&gt;ではまた。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tonkotsuboy_com/items/0adc5dac54e690fcf706&#34;&gt;web制作者にもわかる、Swift 3が++と&amp;ndash;を削除した理由 - Qiita&lt;/a&gt; : Swift 3 では &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt; 演算子を仕様から削除したらしい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:stmt&#34;&gt;&lt;a href=&#34;https://golang.org/ref/spec&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;言語仕様&lt;/a&gt;における “statement” の適切な日本語訳が思いつかなかったので，今回はカタカナにのばして「ステートメント」と表記する。教えて，英語得手の人。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:stmt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:op&#34;&gt;「&lt;a href=&#34;https://golang.org/ref/spec&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;言語仕様&lt;/a&gt;」では文章上の表現として operator と記述しているところが幾つかあるが定義としては演算子として扱われていない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:op&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:pp&#34;&gt;C/C++ で &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt; 演算子を前置にするか後置にするかという問題は挙動の分かりにくさと実行時パフォーマンスの2つの論点がある。いずれにしろ前置に統一する方がよいと言われているが，&lt;a href=&#34;http://cpp.aquariuscode.com/preincriment-vs-postincriment&#34; title=&#34;前置インクリメント vs 後置インクリメント | 闇夜のC++&#34;&gt;パフォーマンスに関しては異論もある&lt;/a&gt;ようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:pp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語 1.8 がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/02/go-1_8-released/" />
		<id>tag:text.Baldanders.info,2017-02-19:/remark/2017/02/go-1_8-released/</id>
		<published>2017-02-19T15:45:53+09:00</published>
		<updated>2017-02-19T15:45:53+09:00</updated>
		<summary>Go 言語コンパイラのバージョン 1.8 がリリースされた。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラのバージョン 1.8 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go1.8&#34;&gt;Go 1.8 is released - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主な改善点を上げると&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コンパイル時間の短縮&lt;/li&gt;
&lt;li&gt;ガベージコレクションの改善（通常で 100μsec 未満，しばしば 10μsec 未満）&lt;/li&gt;
&lt;li&gt;HTTP/2 Push の追加&lt;/li&gt;
&lt;li&gt;標準ライブラリの &lt;a href=&#34;https://golang.org/pkg/context/&#34; title=&#34;context - The Go Programming Language&#34;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; パッケージについてキャンセルとタイムアウトの仕組みを追加

&lt;ul&gt;
&lt;li&gt;HTTP サーバのシャットダウンの改善など&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;a href=&#34;https://golang.org/pkg/sort/#Slice&#34;&gt;&lt;code&gt;Slice&lt;/code&gt;&lt;/a&gt; 関数の追加。 &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; のソートが簡単になった&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他，詳しくは以下のリリースノートを参照のこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.8&#34;&gt;Go 1.8 Release Notes - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;戯れ言&#34;&gt;戯れ言&lt;/h2&gt;

&lt;p&gt;2015年頃から（仕事以外でだが） &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で遊ぶようになって2年半近くが過ぎた。&lt;/p&gt;

&lt;p&gt;仕事においては，業務システムでは相変わらず Java への replace 仕事ばっかりだし（私のようなロートルエンジニアは過去の&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%8A%80%E8%A1%93%E7%9A%84%E8%B2%A0%E5%82%B5&#34;&gt;技術的負債&lt;/a&gt;の後始末をするのがお役目），組み込みでは C/C++ がメインなので， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を使う機会がないのだが，恐ろしいことに私の中で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;が「&lt;a href=&#34;http://text.baldanders.info/remark/2015/programming-language/&#34; title=&#34;プログラミング言語との付き合い方&#34;&gt;母国語&lt;/a&gt;」になりつつある。
つまり，あるロジックをプログラム・コードに「翻訳」する際に，まず &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のコードが思い浮かぶようになってきた。&lt;/p&gt;

&lt;p&gt;この業界に四半世紀以上も足を突っ込んでるが脳内の&lt;a href=&#34;http://text.baldanders.info/remark/2015/programming-language/&#34; title=&#34;プログラミング言語との付き合い方&#34;&gt;母国語&lt;/a&gt;が変わるという経験は初めてで，まるで転生物のラノベ作品を読むがごとく，年甲斐もなく「&lt;a href=&#34;https://nijipi.com/it-news/kemono-lang_ruby-brainfuck/&#34;&gt;わーい！ たのしー！&lt;/a&gt;」な気分でコードを眺める日々である。&lt;/p&gt;

&lt;p&gt;もっとも，有り余る計算資源を持つクラウド環境ならともかくリソースの限られた RTOS (Real-Time Operating System) 環境下では息を吸うようにヒープを使いまくる &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;での実装は向いてない気がするので，「これは言語のチョイスを間違えたかなぁ」とも思わないでもない。
まぁでもそれならそれで C/C++ を使えばいいので困ることでもないんだけどね。&lt;/p&gt;

&lt;p&gt;でも  &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;が&lt;a href=&#34;http://text.baldanders.info/remark/2015/programming-language/&#34; title=&#34;プログラミング言語との付き合い方&#34;&gt;母国語&lt;/a&gt;になると（アセンブラに近い C 言語はともかく） C++ って本当に面倒くさい言語だったんだなぁ，と涙が出ちゃう。
だってエンジニアだもん。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/why-go-is-not-good/&#34;&gt;Go言語がダメな理由 | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;プログラミング言語 Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320026926/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41W69WGATNL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320026926/baldandersinf-22/&#34;&gt;プログラミング言語C 第2版 ANSI規格準拠&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;B.W. カーニハン D.M. リッチー 石田 晴久 &lt;/dd&gt;&lt;dd&gt;共立出版 1989-06-15&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320027485/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4320027485.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング言語Cアンサー・ブック 第2版&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4874084141/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4874084141.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C言語による最新アルゴリズム事典 (ソフトウェアテクノロジー)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774111422/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774111422.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C言語ポインタ完全制覇 (標準プログラマーズライブラリ)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797304952/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797304952.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;定本 Cプログラマのためのアルゴリズムとデータ構造 (SOFTBANK BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4900900648/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4900900648.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C実践プログラミング 第3版&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4781908535/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4781908535.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;工科系の数学 (5)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4781908896/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4781908896.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;工科系の数学〈6〉関数論&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4756136494/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4756136494.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング作法&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798030147/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798030147.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;苦しんで覚えるC言語&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798101036/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798101036.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Cの絵本―C言語が好きになる9つの扉&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;通称 “K&amp;amp;R”。その筋の人々には「バイブル」と呼ばれる名著。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-02-19&#34;&gt;2017-02-19&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>1を1億回足して1億にならない場合 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/loop-counter/" />
		<id>tag:text.Baldanders.info,2017-01-18:/golang/loop-counter/</id>
		<published>2017-01-18T21:45:30+09:00</published>
		<updated>2017-02-27T14:33:55+09:00</updated>
		<summary>浮動小数点数型の変数をループカウンタにするのは止めましょうね。約束だよ！</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（この記事は &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/74a49773413c62721189&#34; title=&#34;1を1億回足して1億にならない場合 - Qiita&#34;&gt;Qiita に投稿した記事&lt;/a&gt;の転載です）&lt;/p&gt;

&lt;p&gt;今回は軽めのネタで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/7of9/items/438a43bf53d60eab59e3&#34;&gt;C &amp;gt; 浮動小数点型変数はループカウンタとして使用しない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まぁ浮動小数点数型の仕様を知れば当たり前の話なのだが，面白そうなので「1を1億回足す」ってのを &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;でも書いてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	var d float32 = 0.0
	for i := 0; i &amp;lt; 100000000; i++ {
		d += 1.0
	}
	fmt.Println(d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果は予想通り&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run loop1.go
1.6777216e+07
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:f32&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:f32&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
念のため &lt;code&gt;float64&lt;/code&gt; でも試してみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	var d float64 = 0.0
	for i := 0; i &amp;lt; 100000000; i++ {
		d += 1.0
	}
	fmt.Println(d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run loop2.go
1e+08
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で，ちゃんと1億になる。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では基本型のサイズが厳密に決まってるので（int, uint, uintptr は除く），浮動小数点数型の計算誤差についてもきちんと見積もれるはずである。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	for d := 0.0; d &amp;lt; 1.0; d += 0.1 {
		fmt.Println(d)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:var&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:var&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run loop3.go
0
0.1
0.2
0.30000000000000004
0.4
0.5
0.6
0.7
0.7999999999999999
0.8999999999999999
0.9999999999999999
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ってなことになる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:r&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:r&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; ので浮動小数点数型の変数をループカウンタにするのは止めましょうね。
約束だよ！&lt;/p&gt;

&lt;h2 id=&#34;math-big-パッケージ-追記&#34;&gt;math/big パッケージ（追記）&lt;/h2&gt;

&lt;p&gt;浮動小数点数演算の「情報落ち」や「丸め誤差」等を緩和する方法として &lt;a href=&#34;https://golang.org/pkg/math/big/&#34; title=&#34;big - The Go Programming Language&#34;&gt;&lt;code&gt;math/big&lt;/code&gt;&lt;/a&gt; パッケージの &lt;a href=&#34;https://golang.org/pkg/math/big/#Float&#34;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt; 型を使う手がある。
&lt;a href=&#34;https://golang.org/pkg/math/big/#Float&#34;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt; 型では有効桁数を指定できる。
たとえば先程の 0.1 ずつカウントアップさせる処理ならこんなコードになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math/big&amp;quot;
)

func main() {
	var x, y, z big.Float //zero initialize
	y.SetFloat64(0.1)     //53bit precision
	x.SetPrec(64)
	y.SetPrec(64)

	for i := 0; i &amp;lt; 10; i++ {
		z.Add(&amp;amp;x, &amp;amp;y)
		x.Set(&amp;amp;z)
		fmt.Printf(&amp;quot;x = %v (prec = %d bits)\n&amp;quot;, &amp;amp;x, x.Prec())
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコードでは有効桁数を64ビットにそろえて計算している。
これを実行するとこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run big2.go
x = 0.10000000000000000555 (prec = 64 bits)
x = 0.2000000000000000111 (prec = 64 bits)
x = 0.30000000000000001665 (prec = 64 bits)
x = 0.4000000000000000222 (prec = 64 bits)
x = 0.50000000000000002776 (prec = 64 bits)
x = 0.6000000000000000333 (prec = 64 bits)
x = 0.70000000000000003886 (prec = 64 bits)
x = 0.8000000000000000444 (prec = 64 bits)
x = 0.90000000000000004996 (prec = 64 bits)
x = 1.0000000000000000555 (prec = 64 bits)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もうひとつ。
&lt;a href=&#34;https://golang.org/pkg/math/big/#Rat&#34;&gt;&lt;code&gt;Rat&lt;/code&gt;&lt;/a&gt; 型を使う手もある。
&lt;a href=&#34;https://golang.org/pkg/math/big/#Rat&#34;&gt;&lt;code&gt;Rat&lt;/code&gt;&lt;/a&gt; 型は有理数の内部表現で値を保持するため記述によっては誤差を小さくできる。
たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math/big&amp;quot;
)

func main() {
	var x, y, z big.Rat //zero initialize
	var a, b big.Int
	a.SetInt64(1)
	b.SetInt64(10)
	y.SetFrac(&amp;amp;a, &amp;amp;b)

	for i := 0; i &amp;lt; 10; i++ {
		z.Add(&amp;amp;x, &amp;amp;y)
		x.Set(&amp;amp;z)
		fmt.Printf(&amp;quot;x = %s (%v)\n&amp;quot;, x.FloatString(20), &amp;amp;x)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run big3.go
x = 0.10000000000000000000 (1/10)
x = 0.20000000000000000000 (1/5)
x = 0.30000000000000000000 (3/10)
x = 0.40000000000000000000 (2/5)
x = 0.50000000000000000000 (1/2)
x = 0.60000000000000000000 (3/5)
x = 0.70000000000000000000 (7/10)
x = 0.80000000000000000000 (4/5)
x = 0.90000000000000000000 (9/10)
x = 1.00000000000000000000 (1/1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;decimal-型-追記&#34;&gt;Decimal 型（追記）&lt;/h2&gt;

&lt;p&gt;残念ながら &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の標準パッケージには Java で言うところの &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html&#34;&gt;BigDecimal&lt;/a&gt; に相当するものがない。
ただし似たパッケージを提供している人はいるようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shopspring/decimal&#34; title=&#34;shopspring/decimal: Arbitrary-precision fixed-point decimal numbers in go&#34;&gt;shopspring/decimal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえばこんな感じに記述する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/shopspring/decimal&amp;quot;
)

func main() {
	x := decimal.NewFromFloat(0)
	y, _ := decimal.NewFromString(&amp;quot;0.1&amp;quot;)

	for i := 0; i &amp;lt; 10; i++ {
		x = x.Add(y)
		fmt.Printf(&amp;quot;x = %s\n&amp;quot;, x.StringFixed(20))
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run big4.go
x = 0.10000000000000000000
x = 0.20000000000000000000
x = 0.30000000000000000000
x = 0.40000000000000000000
x = 0.50000000000000000000
x = 0.60000000000000000000
x = 0.70000000000000000000
x = 0.80000000000000000000
x = 0.90000000000000000000
x = 1.00000000000000000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;じゃあ試しに1を1億回足してみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/shopspring/decimal&amp;quot;
)

func main() {
	x := decimal.NewFromFloat(0)
	y, _ := decimal.NewFromString(&amp;quot;1.0&amp;quot;)

	for i := 0; i &amp;lt; 100000000; i++ {
		x = x.Add(y)
	}
	fmt.Printf(&amp;quot;x = %s\n&amp;quot;, x.StringFixed(20))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果はこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run big4b.go
z = 100000000.00000000000000000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結構な時間がかかった。
でも「情報落ち」もなく綺麗に1億になったようだ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cc.kyoto-su.ac.jp/~yamada/programming/float.html&#34;&gt;浮動小数点数型と誤差&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tooljp.com/jyosho/docs/ketaochi-jyohoochi/ketaochi-jyohoochi.html&#34;&gt;情報落ち、桁落ち、丸め誤差、打切り誤差の違い&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:f32&#34;&gt;&lt;code&gt;float32&lt;/code&gt; は32ビットサイズの浮動小数点数型で，符号部1ビット，指数部8ビット，仮数部23ビット，という内訳になっている（仮数部は仮数の小数点以下を表す）。つまり有効桁数が24ビット（10進数で約7桁）しかない。したがって今回のような「1づつ加算する動作を繰り返す」処理では16,777,216（&lt;code&gt;=0xffffff+1&lt;/code&gt;）以降は「情報落ち」が発生する。ちなみに &lt;code&gt;float64&lt;/code&gt; は64ビットサイズで仮数部は52ビットあり，10進数にして約15桁の有効桁数になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:f32&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:var&#34;&gt;“&lt;code&gt;d := 0.0&lt;/code&gt;” と記述した場合，変数 &lt;code&gt;d&lt;/code&gt; は &lt;code&gt;float64&lt;/code&gt; として宣言・初期化される。厳密には定数 “&lt;code&gt;0.0&lt;/code&gt;” は，いったん「型付けなし」の浮動小数点数として評価された後，変数宣言時に &lt;code&gt;float64&lt;/code&gt; に暗黙的に変換される。 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;におけるこの定数の機能は何かと便利なので覚えておくとよいだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:var&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:r&#34;&gt;このような結果になるのは &lt;code&gt;float32&lt;/code&gt;/&lt;code&gt;float64&lt;/code&gt; の浮動小数点数型の内部表現が2進数になっているため。たとえば 0.1 を2進数で表すと「0.000110011&amp;hellip;」と循環しキリのいい値にならない。このため 0.1 を加算していくと「丸め誤差」が蓄積していくのである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:r&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『数学ガールの秘密ノート／やさしい統計』で遊ぶ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/12/math-girl-secret-note-statistics/" />
		<id>tag:text.Baldanders.info,2016-12-11:/remark/2016/12/math-girl-secret-note-statistics/</id>
		<published>2016-12-11T15:59:26+09:00</published>
		<updated>2016-12-11T15:59:26+09:00</updated>
		<summary>今回はテトラちゃん回かなぁ。1,2章のユーリちゃんとのやり取りも面白いけど，新しい用語が次々登場する状況で，言葉や名前に敏感なテトラちゃんがアワアワする感じがよかった。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;（今回はネタバレをガッツリ含むので見たくない方は静かにページを閉じてください）&lt;/p&gt;

&lt;p&gt;本当は「この世界の片隅に」を観に行こうかと思っていたのだが，さすが地元広島は大人気のようで満席になっていた。
こりゃあ劇場で観るのは無理そうだな。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31524625546/&#34;&gt;&lt;img srcset=&#34;https://c3.staticflickr.com/1/547/31524625546_7ecb84c98b.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;残念。こりゃあ劇場で見るのは無理そうだな。シネコンで見る気はないし。&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31524625546/&#34;&gt;残念。こりゃあ劇場で見るのは無理そうだな。シネコンで見る気はないし。&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ということで映画は諦めて，夕方の待ち合わせ時間まで喫茶店で積ん読状態だった『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01MSJMKMW/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: 数学ガールの秘密ノート／やさしい統計 電子書籍: 結城 浩: Kindleストア&#34;&gt;数学ガールの秘密ノート／やさしい統計&lt;/a&gt;』を一気読みすることにした。&lt;/p&gt;

&lt;p&gt;ちなみに『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01MSJMKMW/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: 数学ガールの秘密ノート／やさしい統計 電子書籍: 結城 浩: Kindleストア&#34;&gt;数学ガールの秘密ノート／やさしい統計&lt;/a&gt;』の詳しい解説は以下のページが参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://id.fnshr.info/2016/11/05/secret-notebook-statistics/&#34;&gt;数学好きから統計好きに――『数学ガールの秘密ノート／やさしい統計』｜Colorless Green Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事によると最近の中高生は統計についてきちんと習うらしい（でも選択科目？）。
私は高校は理数科だったので一通り習ったはずなのだが，あまり憶えてなかったりする。
統計について強く意識するようになったのは大学で誤差論を習ってから。
だから純粋に数学って感じじゃなくて，あくまでもデータを解析するための道具・手段として捉えていた。
『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01MSJMKMW/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: 数学ガールの秘密ノート／やさしい統計 電子書籍: 結城 浩: Kindleストア&#34;&gt;数学ガールの秘密ノート／やさしい統計&lt;/a&gt;』を通して統計の初歩について数学体系として学ぶのは多分初めての体験で（高校で習ったのはあくまでも受験用だったからね）とても面白かった。&lt;/p&gt;

&lt;p&gt;今回はテトラちゃん回かなぁ。
1,2章のユーリちゃんとのやり取りも面白いけど，新しい用語が次々登場する状況で，言葉や名前に敏感なテトラちゃんがアワアワする感じがよかった。&lt;/p&gt;

&lt;p&gt;今回の『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01MSJMKMW/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: 数学ガールの秘密ノート／やさしい統計 電子書籍: 結城 浩: Kindleストア&#34;&gt;数学ガールの秘密ノート／やさしい統計&lt;/a&gt;』がいつもと毛色が違うなと感じたのは，次々と用語が登場して，その定義と意味についてユーリちゃんやテトラちゃんに延々と説明していく，という流れになっていたからだろうか。
実は最近新しいプロジェクトで要求分析をやっているところなので，それと脳内でシンクロする感じが楽しかった。&lt;/p&gt;

&lt;p&gt;要求分析で真っ先にやるのは「用語集」を作ることだ。
「用語集」を作る目的は2つある。
ひとつは顧客と「言葉」を合わせることで，もうひとつは「言葉」を厳密に定義することだ。
これを最初にやっておかないと顧客との間で齟齬が生じてしまう場合がある。
『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01MSJMKMW/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: 数学ガールの秘密ノート／やさしい統計 電子書籍: 結城 浩: Kindleストア&#34;&gt;数学ガールの秘密ノート／やさしい統計&lt;/a&gt;』でやっていることは用語集の作成プロセスに似ている。&lt;/p&gt;

&lt;p&gt;さて，作中で登場した村木先生の《カード》&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;コインを10回投げたとき、表は何回出るだろう。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01MSJMKMW/baldandersinf-22/&#34;&gt;『数学ガールの秘密ノート／やさしい統計』第4章&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;プログラマならこれを擬似乱数を使って試してみたいって思うよね。
このサイトの別セクションで，以前「&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi/&#34;&gt;モンテカルロ法を使って円周率を求める&lt;/a&gt;」というのをやったので，これを応用してコードを組んでみることにしよう。&lt;/p&gt;

&lt;p&gt;できあがりはこちら。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/cointoss&#34;&gt;spiegel-im-spiegel/cointoss: コインを10回投げたとき、表は何回出るだろう。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;パッケージ構成は概ねこんな感じ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/ddd-cointoss.svg&#34;&gt;&lt;img srcset=&#34;http://text.baldanders.info/images/ddd-cointoss.svg 640w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;パッケージ構成&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://text.baldanders.info/images/ddd-cointoss.svg&#34;&gt;パッケージ構成&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;gen&lt;/code&gt; パッケージで擬似乱数を使ってコイントスを行う。
こんな感じのコード。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/**
 * These codes are licensed under CC0.
 * http://creativecommons.org/publicdomain/zero/1.0/
 */

package gen

import &amp;quot;math/rand&amp;quot;

//New returns generator of random number [0,2)
func New(s rand.Source, ct int64) &amp;lt;-chan int {
	ch := make(chan int)
	r := rand.New(s)

	go func(ct int64) {
		for i := int64(0); i &amp;lt; ct; i++ {
			ch &amp;lt;- r.Intn(2)
		}
		close(ch)
	}(ct)

	return ch
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コイントスを行った結果を入れる &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; を生成し，実際のコイントスは &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt; の中で擬似乱数生成器を使い指定した回数だけ行っている。
1が出れば表である。
では実際にコインを10回投げてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go toss -t 10
0
0
1
0
0
0
0
0
1
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは10回中表になったのは3回。
さらに「コインを10回投げる」行為を10回行って統計値を取ってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go repeat -t 10 -c 10
6
6
5
1
9
5
5
5
6
3
minimum value: 1
maximum value: 9
average value: 5.10000
standard deviation: 1.97231
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは表が出た回数の最小値が1，最大値が9，平均値が5.1，標準偏差が約1.97となった。
10回ではよくわからないので次はどどーんと1万回やってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run main.go repeat -t 10 -c 10000 &amp;gt; cointoss.dat
minimum value: 0
maximum value: 10
average value: 4.99690
standard deviation: 1.57477
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果データは &lt;code&gt;cointoss.dat&lt;/code&gt; ファイルに保存している。
ここでは表が出た回数の最小値が0，最大値が10，平均値が約5.0，標準偏差が約1.57となった。
では &lt;code&gt;cointoss.dat&lt;/code&gt; ファイルを &lt;a href=&#34;http://www.gnuplot.info/&#34; title=&#34;gnuplot homepage&#34;&gt;gnuplot&lt;/a&gt; に食わせてヒストグラムにしてみる（階級幅は1）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:h&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:h&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gnuplot&amp;gt; unset key
gnuplot&amp;gt; set xrange [-1:11]  
gnuplot&amp;gt; filter(x,y)=int(x/y)*y                                                              
gnuplot&amp;gt; plot &amp;quot;cointoss.dat&amp;quot;  u (filter($1,1)):(1) smooth frequency with boxes lc rgb &amp;quot;black&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果はこんな感じ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/cointoss-hist.png&#34;&gt;&lt;img srcset=&#34;http://text.baldanders.info/images/cointoss-hist.png 750w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ヒストグラム&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://text.baldanders.info/images/cointoss-hist.png&#34;&gt;ヒストグラム&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おおっ。
きれいに正規分布っぽくなっている。
さて，『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01MSJMKMW/baldandersinf-22/&#34; title=&#34;Amazon.co.jp: 数学ガールの秘密ノート／やさしい統計 電子書籍: 結城 浩: Kindleストア&#34;&gt;数学ガールの秘密ノート／やさしい統計&lt;/a&gt;』4章で数学的に求めた値とどのくらい違うかな（笑） ちなみに $\sqrt{2.5} = 1.5811&amp;hellip;$ である。&lt;/p&gt;

&lt;p&gt;あー，遊んだ遊んだ。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01MSJMKMW/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41-A4q7tckL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01MSJMKMW/baldandersinf-22/&#34;&gt;数学ガールの秘密ノート／やさしい統計&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2016-10-28&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01EL08HVS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01EL08HVS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／場合の数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B018VE46YW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B018VE46YW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／ベクトルの真実&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01NCIV1N7/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01NCIV1N7.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;はじめての深層学習（ディープラーニング）プログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01NA96U1T/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01NA96U1T.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ポートとソケットがわかればインターネットがわかる――TCP/IP・ネットワーク技術を学びたいあなたのために&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMJ0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMJ0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／整数で遊ぼう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01N66D7CV/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01N66D7CV.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;経済数学の直観的方法　確率・統計編 (ブルーバックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01MXHLC6P/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01MXHLC6P.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;速習 Python 3 上: プログラミングの基礎編&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;統計の本当に基礎の部分から。学業成績でよく聞く「偏差値」とは何を表していて何を意味しているのか。なんてなあたりから。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-12-11&#34;&gt;2016-12-11&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:h&#34;&gt;「&lt;a href=&#34;http://qiita.com/iwiwi/items/4c7635d4c84bc785e47a&#34;&gt;gnuplot でヒストグラム（頻度分布図）を描画する - Qiita&lt;/a&gt;」を参考にした。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:h&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「null 安全」について - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/null-safety/" />
		<id>tag:text.Baldanders.info,2016-11-13:/remark/2016/11/null-safety/</id>
		<published>2016-11-13T05:20:11+09:00</published>
		<updated>2016-12-05T10:41:13+09:00</updated>
		<summary>nullable 参照と non-null 参照の区別は，コードに「意図」を記述することを言語仕様レベルで規定するものである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;公理によって与えられる暗黙の制約。この制約が集合の要素同士をしっかり結びつける。単純にしばるのではない、相互に秩序ある関係を結ぶ。言い換えれば――公理によって与えられる制約が構造を生み出しているのだ&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34;&gt;数学ガール／フェルマーの最終定理&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/koher/items/e4835bd429b88809ab33&#34;&gt;null安全でない言語は、もはやレガシー言語だ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/omochimetaru/items/ee29d4c6eb0d78f02b15&#34;&gt;null安全を誤解している人達へのメッセージ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「null 安全（null safety）」についての上の記事はなかなか興味深かった。
特に「&lt;a href=&#34;http://qiita.com/omochimetaru/items/ee29d4c6eb0d78f02b15&#34;&gt;null安全を誤解している人達へのメッセージ&lt;/a&gt;」は事実上の FAQ になっているので是非読んでみてほしい。&lt;/p&gt;

&lt;p&gt;以下は個人的なメモ。&lt;/p&gt;

&lt;p&gt;「null 参照（null reference）」とは「参照が無効である」ことを示すものだ。
「null 参照」は昔から悩ましい問題である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ah&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ah&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
どんなプログラムであれ「null 参照」が存在するのであれば，それを異常系としてハンドリングしなければならない。
しかし大抵の場合，「null 参照」をセットする場所と評価する場所は異なっていて，特にライブラリやフレームワークの中で「null 参照」をセットしている場合は評価されることなくスルーしてしまうことも多い。&lt;/p&gt;

&lt;p&gt;オブジェクト指向以前，たとえばアセンブラや C 言語の時代では値と参照は明確に区別されているわけではなく，「それ」を値と見なすのか「参照（addressing/pointer）」と見なすのかは完全にプログラマの責任だった。
それからオブジェクト指向プログラミングが産業分野でも台頭してきたのだが，このパラダイムシフトの過程で「参照（reference）」が言語仕様レベルで意味を持つものとなった。&lt;/p&gt;

&lt;p&gt;更に「null 安全」な言語では nullable （null かもしれない）参照と non-null （null を許容しない）参照を明確に区別し未評価の nullable 参照をエラーと見なす。
これは言語仕様の根幹&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ns&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ns&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; に関わるパラダイムシフトのひとつである。&lt;/p&gt;

&lt;p&gt;もちろん設計&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:vo&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:vo&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; などで「null 参照」に起因するバグや脆弱性を回避することは重要である。
「null 参照」をいかにハンドリングするのかは相変わらずプログラマの責任なのだから。
機械がやってくれるのは nullable 参照をそのままアドホックに使いまわさないようコンパイルエラーを出すところまでだ。（ただし，そのコードがコンパイルエラーになるのなら少なくとも製品として世に出ることはない）&lt;/p&gt;

&lt;p&gt;私はアセンブラや C 言語（それも K&amp;amp;R バージョン）が全盛のころからの（今やロートル）エンジニアだが，こうして見ていくと人と機械の責務分担が時代ごとに変わっていくのを感じる。&lt;/p&gt;

&lt;p&gt;私は将来のプログラミング言語においてはコードに「意図」を記述できるようになっていくと期待している。
nullable 参照と non-null 参照の区別は，コードに「意図」を記述することを言語仕様レベルで規定するものと言える。
これまでもコンパイラヒントとしての annotation のような機能はあったが，そういったものとは質的に異なっている。&lt;/p&gt;

&lt;p&gt;コードに「意図」を記述できるようになれば，それ自体が設計書になる。
最近の私は「プログラマも要求定義（開発）から参加すべき」と思っている。
参加してがんがんコードを書けばいい。
百万ページの設計書より「動くコード」のほうが価値が高い。&lt;/p&gt;

&lt;p&gt;これまでもそうだったように，コードの「正しさ」を機械の側で担保してくれるならプログラマはもっと違うことに脳みそを振り分けられる。
テストを書かずに済むならそれに越したことはない。
まぁ，最終的に AI がコードを書くようになればプログラマという職業がなくなる（もしくは意味が変わる）かもだけど（笑）&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tbd.kaitoy.xyz/2015/07/26/why-null-is-bad/&#34;&gt;なぜNullはダメか | To Be Decided&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kmry2045/items/0d412a6461de70719ec4&#34;&gt;Null安全な言語をめぐるエトセトラ　その１　３種の「現場」 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/takasek/items/119218a2bae2f75062c0&#34;&gt;null安全はいいぞ。だって、型安全はいいぞ。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/koher/items/04025f0e4bba738f188c&#34;&gt;「null安全」という訳語の背景 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ah&#34;&gt;「null 参照」による損失を10億ドルと見積もっている人もいる。（「&lt;a href=&#34;https://en.wikipedia.org/wiki/Tony_Hoare&#34;&gt;Tony Hoare - Wikipedia&lt;/a&gt;」参照）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ah&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ns&#34;&gt;たとえば nullable 参照と non-null 参照を区別するのであればおそらく静的な型付けが要求されるだろうし，型を円滑にドライブするには型推論も必要かもしれない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ns&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:vo&#34;&gt;たとえば安直に null をセットするのではなく null 状態を扱える適切な value object を使う（デフォルトの動作が決まっているなら null object pattern を構成する）など。そういえば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではある変数が nil 値でもその型に紐付く関数を参照渡しで呼び出すことができ（故に nil は必ず何らかの型を持っている）， nil を正しくハンドリングするのは呼び出した関数の責務となっている（「&lt;a href=&#34;http://text.baldanders.info/golang/function-and-pointer/&#34;&gt;関数とポインタ&lt;/a&gt;」参照）。そういう意味でも &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は value object を構成するのに都合がいい。なお &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は「null 安全」ではない，残念ながら。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:vo&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Kotlin に関する覚え書き - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/kotlin/" />
		<id>tag:text.Baldanders.info,2016-11-08:/remark/2016/11/kotlin/</id>
		<published>2016-11-08T21:02:26+09:00</published>
		<updated>2016-11-10T18:45:34+09:00</updated>
		<summary>今回は試して遊ぶ余裕がないので本当にただのメモ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は試して遊ぶ余裕がないので本当にただのメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; は IntelliJ IDEA で有名な &lt;a href=&#34;http://www.jetbrains.com/&#34; title=&#34;JetBrains: Development Tools for Professionals and Teams&#34;&gt;JetBrains&lt;/a&gt; 社が中心となって開発が行われているオブジェクト指向のプログラミング言語だ。
研究用とかではなく明確に産業利用を目的に作られている。&lt;/p&gt;

&lt;p&gt;JavaVM で動作可能なバイトコードを吐くそうで， Android アプリの開発などでもすでに実績があるようだ。
また JavaScript のコードも吐けるらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; の特徴の一つは「null 安全（null safety）」であることのようだ。
「null 安全」とは実行時にいわゆる「ぬるぽ（null pointer error or exception）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:np&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:np&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」が発生しない言語仕様になっていることで， &lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; の場合はコンパイル時にチェックされる。&lt;/p&gt;

&lt;p&gt;アプリケーションが「ぬるぽ」で落ちるならまだマシなほうで，最悪の場合は重大な脆弱性問題を引き起こす場合もあるため，「null 安全」という考え方は近年とくに注目されている。
そのため今どき流行りの言語では「null 安全」が取り入れられつつあるらしい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:go&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:go&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;更に &lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; は Java からの置き換えを目論み，かつ言語仕様を拡張させている点も特徴である（Scala や Groovy 由来の機能や糖衣構文もある）。
少なくとも &lt;a href=&#34;https://kotlinlang.org/&#34; title=&#34;Kotlin Programming Language&#34;&gt;Kotlin&lt;/a&gt; では関数を第一級オブジェクト（first-class object）として扱うことができるのは大きい。
個人的には &lt;a href=&#34;http://text.baldanders.info/remark/2016/07/java/&#34; title=&#34;Java はやめておけ&#34;&gt;Java は終わってる&lt;/a&gt;と思ってるので，こういうのは大歓迎である。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/tarokotlin/&#34;&gt;プログラミング言語Kotlin 解説&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/noppefoxwolf/items/b2d93f946f158c7b5852&#34;&gt;Kotlinを１ヶ月使ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.satotaichi.info/first-thoughts-of-kotlin/&#34;&gt;Kotlinに対する雑感&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/koher/items/e4835bd429b88809ab33&#34;&gt;null安全でない言語は、もはやレガシー言語だ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:np&#34;&gt;null の英語での発音は「ナル」に近いのだが，どういうわけか日本の IT 界隈ではドイツ語っぽく「ヌル」と呼ぶ人が圧倒的多数のようだ。私もそうだし職場の半径100m以内で「ナル」と呼ぶ人はいない。まぁ私は TTC (Telecommunication Technology Committee) を「てってーしー」と呼んでいた世代だからな（笑） （参考：&lt;a href=&#34;http://qiita.com/ryounagaoka/items/290885ee3291b393fe1f&#34;&gt;IT業界で横行する恥ずかしい英語発音 - Qiita&lt;/a&gt;：コメントの議論が面白いので是非）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:np&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:go&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は全く「null 安全」ではない。「ぬるぽ」を緩和するような仕組みはないこともないが，コンパイラレベルで保証しているわけではない。（参考： &lt;a href=&#34;http://postd.cc/why-go-is-not-good/&#34;&gt;Go言語がダメな理由 | プログラミング | POSTD&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:go&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Dart 言語に関する覚え書き - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/10/programming-language-dart/" />
		<id>tag:text.Baldanders.info,2016-10-30:/remark/2016/10/programming-language-dart/</id>
		<published>2016-10-30T01:39:04+09:00</published>
		<updated>2016-10-30T01:39:04+09:00</updated>
		<summary>個人的に TypeScript や CoffeeScript の構文は好みじゃないし（もちろん仕事ならやりますよ）， Dart でそういったものの代わりになるのなら悪くないと思ったのだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;最初の頃は Dash とか呼ばれていたこの言語だが，正直に言ってあまり関心は高くなかった。
昔 Microsoft が JScript/VBScript や ActiveX で似たようなことをやろうとして大失敗したのを見ていたので「大失敗の2番煎じとか（笑）」という感じだったのだ。&lt;/p&gt;

&lt;p&gt;でも&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/10/26/20161026googles-dart-programming-language-returns-to-the-spotlight/&#34;&gt;GoogleのDartプログラミング言語に再びスポットライトが…その高い生産性にまず社内で人気が盛り上がる | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を見てちょっと調べてみることにした。
個人的に TypeScript や CoffeeScript の構文は好みじゃないし（もちろん仕事ならやりますよ）， &lt;a href=&#34;https://www.dartlang.org/&#34; title=&#34;Dart programming language | Dart&#34;&gt;Dart&lt;/a&gt; でそういったものの代わりになるのなら悪くないと思ったのだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.dartlang.org/&#34; title=&#34;Dart programming language | Dart&#34;&gt;Dart&lt;/a&gt; 環境は以下から取得できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dartlang.org/install&#34;&gt;Install Dart | Dart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows の場合は Chocolatey 経由で導入するかサード・パーティのインストーラが用意されている。
今回はサード・パーティのインストーラを使ってみた。
インストール後にコマンドプロンプト等で&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ dart --version
Dart VM version: 1.20.1 (Wed Oct 12 15:07:45 2016) on &amp;quot;windows_x64&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てな感じになれば成功である。
さっそく，みんな大好き “Hello World” から&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {
    print(&#39;Hello World!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを DartVM 上で実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ dart hello.dart
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;p&gt;じゃあ，これを JavaScript コードに変換してみようか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ dart2js -ohello.js hello.dart
Dart file (hello.dart) compiled to JavaScript: hello.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うひゃ！ なんか凄いコード吐いたな。
元の3行のコードに対して300行くらいあるぞ。
でも node.js&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:n&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:n&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; に食わせると一応ちゃんと出力される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ node hello.js
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力された JavaScript コードの一部を抜粋するとこんな感じのコードを吐いている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var dart = [[&amp;quot;dart2js._js_primitives&amp;quot;, &amp;quot;dart:_js_primitives&amp;quot;,, H, {
  &amp;quot;^&amp;quot;: &amp;quot;&amp;quot;,
  printString: function(string) {
    if (typeof dartPrint == &amp;quot;function&amp;quot;) {
      dartPrint(string);
      return;
    }
    if (typeof console == &amp;quot;object&amp;quot; &amp;amp;&amp;amp; typeof console.log != &amp;quot;undefined&amp;quot;) {
      console.log(string);
      return;
    }
    if (typeof window == &amp;quot;object&amp;quot;)
      return;
    if (typeof print == &amp;quot;function&amp;quot;) {
      print(string);
      return;
    }
    throw &amp;quot;Unable to print message: &amp;quot; + String(string);
  }
}], [&amp;quot;&amp;quot;, &amp;quot;hello.dart&amp;quot;,, G, {
  &amp;quot;^&amp;quot;: &amp;quot;&amp;quot;,
  main: function() {
    H.printString(&amp;quot;Hello World!&amp;quot;);
  }
}, 1]];
setupProgram(dart, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いや，うーん。
いいのか，これ。
“Hello World” ごときでこれって，もう少しスリムなコードを吐けないのだろうか。&lt;/p&gt;

&lt;p&gt;たとえば仕事で &lt;a href=&#34;https://www.dartlang.org/&#34; title=&#34;Dart programming language | Dart&#34;&gt;Dart&lt;/a&gt; を使うようなプロジェクトでもあれば面白そうだが，それ以外で積極的に使おうという気にはならないかなぁ，これは。
制御用の言語を統一するのなら JavaScript (ES6) で十分だし，バックエンド側のみということであれば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のほうがよさ気だし。
うーん。&lt;/p&gt;

&lt;p&gt;というわけで，もう少し様子見。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dartlang.org/&#34;&gt;Dart programming language | Dart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang&#34;&gt;Dart · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cresc.co.jp/tech/java/Google_Dart/DartLanguageSpecification_about.html&#34;&gt;Dartプログラミング言語仕様書邦訳版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/dartrefjp/&#34;&gt;dartrefjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1208/29/news120.html&#34;&gt;小山博史のJavaを楽しむ（16）：JavaとJavaScriptの良いとこ取り？ 「Dart」超入門 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/alucky0707/items/76aaf819a86eda7d6c4d&#34;&gt;Dart入門してみる。インストール～ブラウザでHelloWorldまで - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/takyam/items/3dd2c1948f1fa7968a01&#34;&gt;2015年にDart言語はどう変わってどこに向かっていってるのか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sh4869/items/55d1ad5cd011113ed543&#34;&gt;Dart 1.19リリースノート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:n&#34;&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt; は最近 v7.0.0 が出ている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:n&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>プログラミングで「計算論的思考」は身につかない - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/09/programming/" />
		<id>tag:text.Baldanders.info,2016-09-27:/remark/2016/09/programming/</id>
		<published>2016-09-27T22:30:13+09:00</published>
		<updated>2016-09-27T22:30:13+09:00</updated>
		<summary>本気で「計算論的思考」を身につけさせたいのなら，もっと算数・数学あるいは理科を（単なる知識ではなく）学問体系としてきっちり教えるべき</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kids.gakken.co.jp/parents/digital/mima01/&#34;&gt;プログラミング教育についての素朴なギモンを聞く【前編】　プログラミング教育って何？　本当に子どもに必要なの？ | 学研キッズネット for Parents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学校の数学を学んで数学的な考え方が身につくわけではないように，「プログラミング教育」を行っても「計算論的思考」は身につかない。&lt;/p&gt;

&lt;p&gt;これは因果関係が逆。
「計算論的思考」ができる人はプログラミング&lt;strong&gt;も&lt;/strong&gt;比較的上手にできる，というだけのことにすぎない。&lt;/p&gt;

&lt;p&gt;ここではいつも言っていることだが&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000868.shtml&#34; title=&#34;プログラミングは「損得勘定」で考える — Baldanders.info&#34;&gt;&lt;strong&gt;数学の問題を解くのに公式の暗記から始める人はプログラマには向いてないので諦めた方がいい&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;でも高校くらいまでの算数・数学なら暗記だけで何となく解けてしまうのも事実である（私は暗記が苦手なので無理だが）。
同様にプログラミングもある程度ならコピペだけで書けてしまう。
でもこれではいつまで経っても「計算論的思考」は身につかない。
身につくはずがない&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;しかし、これはコピペを多用している人にありがちな考え方のようで、コピペしても動かないのはなにか間違ったことをしていて、正確にコピペできていないところがないかを探すというプログラミングサイクルが習慣化していることが背景にはあるのではないかと感じられた。
&lt;br&gt;そのため、一度書き終わったコードは記号の羅列のように見えてしまい、そこに何か間違いがないか目で探すのだ。自分で書いたものもコピペで始まっているため、それは記号の羅列であって、理解していないものになってしまう。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://qiita.com/hirokidaichi/items/27c757d92b6915e8ecf7&#34;&gt;ペアプログラミングして気がついた新人プログラマの成長を阻害する悪習 - Qiita&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;本気で「計算論的思考」を身につけさせたいのなら，もっと算数・数学あるいは理科を（単なる知識ではなく）学問体系としてきっちり教えるべきで，「プログラミング教育」なんぞは必要条件にも十分条件にもならない。
「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000744.shtml&#34; title=&#34;日本の「算数」は壊れてる？ — Baldanders.info&#34;&gt;掛け算は順序が大事&lt;/a&gt;」などと言ってはばからない未開人の国がどうやってプログラミングを教えるというのだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/lets-programming/&#34;&gt;「だれもがプログラミングを学ぶべき」ではない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797329734/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51xj-xFKUXL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797329734/baldandersinf-22/&#34;&gt;プログラマの数学&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;ソフトバンククリエイティブ 2005-03-24&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274067556/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274067556.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマのための論理パズル 難題を突破する論理思考トレーニング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873116694/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873116694.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アルゴリズムパズル ―プログラマのための数学パズル入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4048869558/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4048869558.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマの考え方がおもしろいほど身につく本 問題解決能力を鍛えよう!&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/479803925X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/479803925X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラムはこうして作られるプログラマの頭の中をのぞいてみよう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/479814245X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/479814245X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマ脳を鍛える数学パズル シンプルで高速なコードが書けるようになる70問&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;プログラマ必修の教科書（笑）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-05-17&#34;&gt;2016-05-17&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51XGP8AFX2L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;いかにして問題をとくか&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;G. ポリア 柿内 賢信 &lt;/dd&gt;&lt;dd&gt;丸善 1975-04-01&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621085298/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621085298.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;いかにして問題をとくか・実践活用編&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4061497863/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4061497863.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学的思考法―説明力を鍛えるヒント  講談社現代新書&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/462108819X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/462108819X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学×思考=ざっくりと  いかにして問題をとくか&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797375698/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797375698.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4185086180/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4185086180.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;授業研究に学ぶ高校新数学科の在り方&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-26&#34;&gt;2014/09/26&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「シルバー・ウィーク」スペシャル： C&#43;&#43; 再勉強中。 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/09/22-stories/" />
		<id>tag:text.Baldanders.info,2016-09-22:/remark/2016/09/22-stories/</id>
		<published>2016-09-22T16:50:46+09:00</published>
		<updated>2016-09-22T19:59:48+09:00</updated>
		<summary>C&#43;&#43; 再勉強中。 / alt-right ??? / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;いや，私は普通にカレンダー通りですけどね。
今日は仕事してる人も多いみたいだし。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#cpp&#34;&gt;C++ 再勉強中。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ar&#34;&gt;alt-right ???&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;cpp&#34;&gt;C++ 再勉強中。&lt;/h2&gt;

&lt;p&gt;昨年出た『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117364/baldandersinf-22/&#34; title=&#34;Effective Modern C++ ―C++11/14プログラムを進化させる42項目 : Scott Meyers, 千住 治郎 : 本 : Amazon.co.jp&#34;&gt;Effective Modern C++&lt;/a&gt;』をようやく読み始めてる。
C++ 11 でだいぶ変わったしね。
読書感想はまた後日。&lt;/p&gt;

&lt;p&gt;他にもこの辺は読んでおかないと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/sec/publish/tn10-003.html&#34;&gt;SEC BOOKS：ESCR C++：組込みソフトウェア開発向けコーディング作法ガイド［C++言語版］：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/sec/publish/tn13-001.html&#34;&gt;SEC BOOKS：ESCR Ver.2.0：【改訂版】組込みソフトウェア開発向け コーディング作法ガイド［C言語版］Ver.2.0：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/herumi/cc-66035712&#34;&gt;C/C++プログラマのための開発ツール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/code-behaving-differently-in-c90-c99-c11-c98-and-c11/&#34;&gt;C90, C99, C11, C++98, C++11で異なる動作をするコード | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;Go 言語の勉強&lt;/a&gt;は今のところはアソビ半分だが，こっちはうまく仕事に結びつくといいですなぁ。&lt;/p&gt;

&lt;h2 id=&#34;ar&#34;&gt;alt-right ???&lt;/h2&gt;

&lt;p&gt;最近よく聞くようになったが実は結構前から言われているらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/09/03/alter-right-wing/&#34;&gt;覆面ブロガーの告白、そして「オルタナ右翼」とは何なのか｜WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mhatta.org/wp/blog/2016/09/12/identitarianism-as-racism-2-0/&#34;&gt;レイシズム2.0としてのアイデンティタリアニズム | mhatta&amp;rsquo;s mumbo jumbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mhatta.org/wp/blog/2016/09/22/alt-right-depicted/&#34;&gt;オルタナ右翼の図解 | mhatta&amp;rsquo;s mumbo jumbo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかし，このご時世に右とか左とかいう色分けはあまり意味が無い気がする。
ぱっと見た感じ Identitarianism ってのはジョック・ヤングの『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34; title=&#34;排除型社会―後期近代における犯罪・雇用・差異 : ジョック ヤング, Jock Young, 青木 秀男, 伊藤 泰郎, 岸 政彦, 村澤 真保呂 : 本 : Amazon&#34;&gt;排除型社会&lt;/a&gt;』に出てくる「多文化主義&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 的エポケー」の変奏に過ぎないように思える。
でもって「多文化主義的エポケー」は文化的な袋小路であって未来に何も生み出さないんだよね。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;しかし、現在のように都市生活が多様化し、グローバル化したマスメディアが毎日のように多種多様な文化を垂れ流す状況では、もはや自然的エポケーは通用しなくなっている。こうした困難に対処する態度こそ、私が「多文化主義的エポケー」と呼んでいるものである。つまり、自然的エポケーの特徴である「懐疑の一時停止（あるいは〈括弧〉にいれる）」を、いわば多元化することである。この場合、それぞれの文化は、他の文化からみずからを区別するために、独自の排他的領域という〈括弧〉のなかに閉じこもろうとする。それはちょうど、それぞれの集団が、リスクを最小化するために、保険統計的計算にもとづいて物質的・経済的バリアを張り巡らせようとするのと同じである。&lt;/q&gt;（p.251）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;多文化主義のおかげで、人々は自分たちの選択を相対化しなくても、規範の相対性を受け入れることができるようになるわけである。……多文化主義における異文化への距離の取り方（「尊重」とか「寛容」という言葉でごまかしているが）が異文化への不安をつくりだす可能性は十分にある。というのも、それは戦後の包摂型社会に代えて、排除型の飛び地が点在する世界をつくりだすからである。……かつて近代主義が求めたのは、開放的で、「脱埋め込み」的で、両義的で、断片化された世界をつくりだすことであった。それは自己とライフスタイルを自由に選択し、創造することが可能な世界だった。しかし、多文化主義はそのような世界を消し去ろうとする――つまり、一方で多様性を認めながら、他方では行為者から選択の自由を奪おうとするのである。&lt;/q&gt;（p.259）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;other&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/draft-payment-system-in-erlang/&#34;&gt;「Erlangを使用して、効率的な決済システムを構築するには？」 | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2016/08/55823/&#34;&gt;もうすぐ絶滅するという開かれたウェブについて - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20160911/algorithmfda&#34;&gt;やはり我々には「アルゴリズムの監査機関」が必要なのか？ - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117364/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ng4usMVYL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117364/baldandersinf-22/&#34;&gt;Effective Modern C++ ―C++11/14プログラムを進化させる42項目&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Scott Meyers 千住 治郎 &lt;/dd&gt;&lt;dd&gt;オライリージャパン 2015-09-18&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4048694243/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4048694243.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C++11/14 コア言語&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797375957/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797375957.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング言語C++第4版&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621066099/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621066099.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Effective C++ 第3版 (ADDISON-WESLEY PROFESSIONAL COMPUTI)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797384778/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797384778.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C++のエッセンス&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4048930516/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4048930516.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C++によるプログラミングの原則と実践&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797376686/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797376686.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C++テンプレートテクニック 第2版&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4844338900/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4844338900.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Game Programming Patterns ソフトウェア開発の問題解決メニュー (impress top gear)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117569/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117569.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Effective Python ―Pythonプログラムを改良する59項目&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774174084/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774174084.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;改訂新版　C++ポケットリファレンス&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4862462928/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4862462928.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Computer Graphics Gems JP 2015 - コンピュータグラフィックス技術の最前線 -&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;C++ 再勉強中。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-09-22&#34;&gt;2016-09-22&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/417iD4x5N%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジョック ヤング Jock Young &lt;/dd&gt;&lt;dd&gt;洛北出版 2007-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764331/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764331.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;後期近代の眩暈―排除から過剰包摂へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4255008515/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4255008515.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;断片的なものの社会学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796700439/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4796700439.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スティグマの社会学―烙印を押されたアイデンティティ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764242/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764242.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新しい貧困 労働消費主義ニュープア&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062881357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062881357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;弱者の居場所がない社会――貧困・格差と社会的包摂 (講談社現代新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000410.shtml&#34;&gt;感想はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a&#34;&gt;多文化主義というのはもともとリベラルの考え方だと何かに書いてあった。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
