<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Programming - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/programming/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/programming/index.xml" />
	<id>tag:text.Baldanders.info,2016-03-12:/</id>
	<updated>2016-03-12T22:12:53+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>「ズンドコチェック」なるものが流行っているらしい - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/zundoko-choir/" />
		<id>tag:text.Baldanders.info,2016-03-12:/golang/zundoko-choir/</id>
		<published>2016-03-12T22:12:53+09:00</published>
		<updated>2016-03-16T17:35:35+09:00</updated>
		<summary>というわけで Go 言語で実装することを考えてみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Javaの講義、試験が「自作関数を作り記述しなさい」って問題だったから&lt;br&gt;「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数作ったら満点で単位貰ってた&lt;/p&gt;&amp;mdash; てくも (@kumiromilk) &lt;a href=&#34;https://twitter.com/kumiromilk/status/707437861881180160&#34;&gt;2016年3月9日&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;p&gt;「習作（study）」としてはなかなか秀逸なアイデアだと思う。
これで満点くれる教官も流石だが（笑） 巷では「ズンドコキヨシ」とか「キヨシチェック」とか「ズンドコチェック」とか呼ばれているらしい。&lt;/p&gt;

&lt;p&gt;というわけで&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;を &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で実装することを考えてみる。
私はコレを「ズンドコ・コール（zundoko-choir）」と呼ぶことにする。&lt;/p&gt;

&lt;p&gt;とはいえ，ズンドコ・コールを実装する事自体はそう難しくない。
たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math/rand&amp;quot;
	&amp;quot;time&amp;quot;
)

const (
	zun     = &amp;quot;ズン&amp;quot;
	doko    = &amp;quot;ドコ&amp;quot;
	kiyoshi = &amp;quot;キ・ヨ・シ！&amp;quot;
)

func generate() chan string {
	ch := make(chan string)
	go func() {
		var zundoko = [2]string{zun, doko}
		rand.Seed(time.Now().UnixNano())
		for {
			ch &amp;lt;- zundoko[rand.Intn(2)]
		}
	}()
	return ch
}

func main() {
	zundoko := generate()
	zcount := 0
	for {
		zd := &amp;lt;-zundoko
		fmt.Print(zd)
		if zd == zun {
			zcount++
		} else if zcount &amp;gt;= 4 {
			break
		} else {
			zcount = 0
		}
	}
	fmt.Print(kiyoshi)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「ズン」および「ドコ」をランダムに生成する部分は &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; と &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt; を使えばいいだろう（&lt;code&gt;generate()&lt;/code&gt; 関数内の処理）。
擬似乱数は厳密でなくてもいいので安直に &lt;a href=&#34;https://golang.org/pkg/math/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; を使うことにした&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ba7781b05a447c47fa6bc5c87477853e:rand&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ba7781b05a447c47fa6bc5c87477853e:rand&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
さらに「ズン」「ズン」「ズン」「ズン」「ドコ」の配列パターンのチェックだが，「ズン」が4回以上連続で来た直後に「ドコ」が来たら OK としてみた。
まぁ，これがもっとも素朴な実装でパフォーマンスとしてもそれほど遜色ない筈。&lt;/p&gt;

&lt;p&gt;と，ここまで考えてハタと気づいた。
問題は「自作関数を作り記述しなさい」なんだからメイン関数にロジック書いたらアカンやん！&lt;/p&gt;

&lt;p&gt;というわけでまたもゴリゴリとコードを書いてパッケージにしてしまった。
アホだ，私（笑）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/zundoko&#34;&gt;spiegel-im-spiegel/zundoko: Zundoko-choirs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;出力は標準出力に直書きするのではなく &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; の &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; に &lt;code&gt;append()&lt;/code&gt; することで実現する。
この出力先を &lt;code&gt;Choirs&lt;/code&gt; 型として定義した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Choirs - zundoko-choirs list
type Choirs struct {
	c []string
}

//Push is append choirs
func (c *Choirs) Push(s string) {
	c.c = append(c.c, s) //maybe panic if c is nil.
}

func (c *Choirs) String() string {
	if c == nil {
		return &amp;quot;&amp;quot;
	}
	content := make([]byte, 0, 128)
	for _, s := range c.c {
		content = append(content, s...)
	}
	return string(content)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに文字列の連結は &lt;a href=&#34;https://golang.org/pkg/strings/&#34; title=&#34;strings - The Go Programming Language&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Join()&lt;/code&gt; 関数は使わず「&lt;a href=&#34;http://text.baldanders.info/golang/join-strings/&#34; title=&#34;文字列連結はどれが速い？ — プログラミング言語 Go&#34;&gt;文字列連結はどれが速い？&lt;/a&gt;」で紹介した方法を使っている。&lt;/p&gt;

&lt;p&gt;これで最初のコードは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func generate() chan string {
	ch := make(chan string)
	go func() {
		var zd = [2]string{Zun, Doko}
		rand.Seed(time.Now().UnixNano())
		for {
			ch &amp;lt;- zd[rand.Intn(2)]
		}
	}()
	return ch
}

//Run zundoko-choirs
func Run() *Choirs {
	zd := generate()
	c := &amp;amp;Choirs{make([]string, 0)}
	zcount := 0
	for {
		s := &amp;lt;-zd
		c.Push(s)
		if s == Zun {
			zcount++
		} else if zcount &amp;gt;= 4 {
			break
		} else {
			zcount = 0
		}
	}
	c.Push(Kiyoshi)
	return c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書き換えることができる。
このパッケージを呼び出すメイン側は例えば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/zundoko&amp;quot;
)

func main() {
	c := zundoko.Run()
	fmt.Println(c)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書けばいい。&lt;/p&gt;

&lt;p&gt;ところで「ズン」「ドコ」の出力は &lt;code&gt;Choirs&lt;/code&gt; 型で保持られているので，末尾の5要素のパターンを調べる別の方法もあると気づく。
たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var matchingPattern = []string{Zun, Zun, Zun, Zun, Doko}

func (c *Choirs) match() bool {
	if c == nil {
		return false
	}
	if len(c.c) &amp;lt; 5 {
		return false
	}
	return reflect.DeepEqual(c.c[len(c.c)-5:], matchingPattern)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この関数を使えば &lt;code&gt;Run()&lt;/code&gt; 関数は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Run2 zundoko-choirs (another logic)
func Run2() *Choirs {
	zd := generate()
	c := &amp;amp;Choirs{make([]string, 0)}
	for {
		s := &amp;lt;-zd
		c.Push(s)
		if c.match() {
			break
		}
	}
	c.Push(Kiyoshi)
	return c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり随分すっきりする。
ただこれコストが高くつきそうである。
というわけで，これも調べてみた。
まず以下のベンチマークを書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package zundoko

import &amp;quot;testing&amp;quot;

func BenchmarkRun1(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		Run()
	}
}

func BenchmarkRun2(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		Run2()
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;BenchmarkRun1&lt;/code&gt; が従来のもの， &lt;code&gt;BenchmarkRun2&lt;/code&gt; が先程の &lt;code&gt;match()&lt;/code&gt; 関数を使ったバージョンである。
結果は以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go test -bench Run -benchmem
testing: warning: no tests to run
PASS
BenchmarkRun1-4    50000     28141 ns/op    1800 B/op     9 allocs/op
BenchmarkRun2-4    30000     40102 ns/op    3912 B/op   115 allocs/op
ok      github.com/spiegel-im-spiegel/zundoko   4.261s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;乱数の要素が絡むので毎回同じ値ではないが，傾向としてはこんな感じ。
&lt;code&gt;BenchmarkRun2&lt;/code&gt; のほうが allocation 回数が圧倒的に多いのが分かるだろう。
これがスピードにもダイレクトに反映されている感じである。&lt;/p&gt;

&lt;p&gt;今回は「「ズン」が4回以上連続で来た直後に「ドコ」が来たら OK」という単純なロジックだったが，もっと複雑なパターンが要求される場合は工夫が必要かもしれない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;「ズン」と「ドコ」の出現回数を数える関数も作ってみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//CountZunDoko returns count of &amp;quot;ZUN&amp;quot; and &amp;quot;DOKO&amp;quot; choirs
func (c *Choirs) CountZunDoko() (int, int) {
	z := 0
	d := 0
	if c == nil {
		return z, d
	}
	for _, s := range c.c {
		switch s {
		case Zun:
			z++
		case Doko:
			d++
		}
	}
	return z, d
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば &lt;code&gt;generate()&lt;/code&gt; 関数内で使っている擬似乱数パッケージを別のものに換えた時に統計処理で簡単な性能評価ができるかもしれない。
今回はそこまではしなけど（擬似乱数の話はいずれやりたい）。&lt;/p&gt;

&lt;p&gt;こうやって手遊びでコードを弄るのは楽しいものである。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:ba7781b05a447c47fa6bc5c87477853e&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shunsugai@github/items/971a15461de29563bf90&#34;&gt;ズンドコキヨシまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinderuman@github/items/2ff67c2404647d2b7ea6&#34;&gt;ズンドコキヨシ with Go (n番煎じ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Rompei/items/bfa03fbc9a94a37703bb&#34;&gt;ズンドコキヨシGolang並列版 - Qiita&lt;/a&gt; : 「ズン」「ドコ」の生成部分を CPU の数だけ並列処理で行わせてひとつの &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; に入力するというユニークな実装&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/6a5bc07dbfa46a328e26&#34;&gt;「ズンドコキヨシ」と擬似乱数 - Qiita&lt;/a&gt; : Qiita で擬似乱数について簡単にまとめてみた。整理できたらこちらでも記事にするかも&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:ba7781b05a447c47fa6bc5c87477853e&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41aCueik45L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-15&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117607/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117607.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;マイクロサービスアーキテクチャ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハイパフォーマンスPython&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/0134190440/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/0134190440.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;The Go Programming Language (Addison-Wesley Professional Computing Series)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166340/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774166340.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Vim script テクニックバイブル ~Vim使いの魔法の杖&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。買おうかどうか悩み中。目次があればなぁ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-12&#34;&gt;2016-03-12&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ba7781b05a447c47fa6bc5c87477853e:rand&#34;&gt;&lt;a href=&#34;https://golang.org/pkg/math/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; の乱数生成アルゴリズムの既定は線形合同法らしい。&lt;a href=&#34;http://www001.upp.so-net.ne.jp/isaku/rand.html&#34; title=&#34;良い乱数・悪い乱数&#34;&gt;線形合同法は性能が良くなく&lt;/a&gt;ゲームや暗号等では使えない。&lt;a href=&#34;https://golang.org/pkg/math/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; の乱数生成アルゴリズムは他のものに入れ替えることができる。たとえば &lt;a href=&#34;https://github.com/seehuhn/mt19937&#34; title=&#34;seehuhn/mt19937: An implementation of Takuji Nishimura&#39;s and Makoto Matsumoto&#39;s Mersenne Twister pseudo random number generator in Go.&#34;&gt;&lt;code&gt;seehuhn/mt19937&lt;/code&gt;&lt;/a&gt; パッケージが使える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ba7781b05a447c47fa6bc5c87477853e:rand&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;たとえば &lt;a href=&#34;https://golang.org/pkg/container/list/&#34; title=&#34;list - The Go Programming Language&#34;&gt;&lt;code&gt;container/list&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://golang.org/pkg/container/ring/&#34; title=&#34;ring - The Go Programming Language&#34;&gt;&lt;code&gt;container/ring&lt;/code&gt;&lt;/a&gt; といったパッケージを使う手がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： X 線天文衛星 ASTRO-H の打上げ成功 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/20-stories/" />
		<id>tag:text.Baldanders.info,2016-02-20:/remark/2016/02/20-stories/</id>
		<published>2016-02-20T18:03:21+09:00</published>
		<updated>2016-03-08T14:38:23+09:00</updated>
		<summary>X 線天文衛星 ASTRO-H の打上げ成功 / TMT 建設に関する報道 / スマホへ「ブルートフォース攻撃」を要求するアメリカ / C 言語はどう書くべきか / Bitcoin は「群衆の知恵」を前提とする / Amazon Prime 入ろうかと / 「ムラ社会」という名の多文化主義的エポケー</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#hitomi:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;X 線天文衛星 ASTRO-H の打上げ成功&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tmt:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;TMT 建設に関する報道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#iphone:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;スマホへ「ブルートフォース攻撃」を要求するアメリカ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#c:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;C 言語はどう書くべきか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#blockchain:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;Bitcoin は「群衆の知恵」を前提とする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#amazon:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;Amazon Prime 入ろうかと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#media:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;「ムラ社会」という名の多文化主義的エポケー&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;hitomi:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;X 線天文衛星 ASTRO-H の打上げ成功&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/02/20160217_h2af30_j.html&#34;&gt;JAXA | H-IIAロケット30号機によるX線天文衛星（ASTRO-H）の打上げ結果について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/02/20160217_hitomi_j.html&#34;&gt;JAXA | X線天文衛星（ASTRO-H）の太陽電池パドル展開及び衛星の名称について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/02/20160218_hitomi_j.html&#34;&gt;JAXA | X線天文衛星「ひとみ」（ASTRO-H）の軌道計算結果について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.space.com/31968-japan-x-ray-observatory-launch-hitomi.html&#34;&gt;Japan Launches X-ray Observatory to Study Black Holes, Star Explosions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techcrunch.com/2016/02/20/japan-launches-observatory-to-study-black-holes-and-dying-stars/&#34;&gt;Japan Launches Observatory To Study Black Holes And Dying Stars | TechCrunch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/02/20160229_hitomi_j.html&#34;&gt;JAXA | X線天文衛星「ひとみ」（ASTRO-H）のクリティカル運用期間の終了について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://apod.nasa.gov/apod/ap160218.html&#34;&gt;&lt;img src=&#34;http://apod.nasa.gov/apod/image/1602/IMG_0193PorterAstroH.jpg&#34; height=&#34;333&#34; width=&#34;500&#34; alt=&#34;APOD: 2016 February 18 - Hitomi Launches&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://apod.nasa.gov/apod/ap160218.html&#34;&gt;APOD: 2016 February 18 - Hitomi Launches&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「ひとみ」と命名されたらしい。
「ひとみ」には広島大学も関わってたんだそうで，なんかちょっと嬉しい。
面白い成果が出るといいですねぇ。&lt;/p&gt;

&lt;h2 id=&#34;tmt:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;TMT 建設に関する報道&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tmt.nao.ac.jp/info/555&#34;&gt;ハワイ・マウナケアにおけるTMT建設に関する報道について | 国立天文台TMT推進室&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tmt.org/&#34;&gt;TMT (Thirty Meter Telescope)&lt;/a&gt; について NHK のひどい yellow journalism に激おこプンプン丸（古いw）のようだ。&lt;/p&gt;

&lt;p&gt;まぁ &lt;a href=&#34;http://www.tmt.org/&#34; title=&#34;Recent News | Thirty Meter Telescope&#34;&gt;TMT&lt;/a&gt; があまり順調と言えないのはたしかだ。
マウナケア山は信仰対象なので，これまでも望遠鏡建設について地元と協議しながらやってきた。
すばる望遠鏡もそうしたひとつである。
故に今回 &lt;a href=&#34;http://www.tmt.org/&#34; title=&#34;Recent News | Thirty Meter Telescope&#34;&gt;TMT&lt;/a&gt; だけが無茶したというのは，普通に考えて言いがかりである。&lt;/p&gt;

&lt;p&gt;しかし「マウナケア山に望遠鏡作りすぎ！」という訴えはたしかにあって，その辺の政治的駆け引きがどうなるかという点は要注目である。
実際 &lt;a href=&#34;http://www.tmt.org/&#34; title=&#34;Recent News | Thirty Meter Telescope&#34;&gt;TMT&lt;/a&gt; の建設を他所にしようかと検討する動きはあるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hawaiinewsnow.com/story/31193881/thirty-meter-telescope-officials-considering-sites-outside-of-hawaii&#34;&gt;Thirty-Meter Telescope officials reviewing sites outside of Hawa - Hawaii News Now - KGMB and KHNL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同じ天文学でも（先の「ひとみ」もそうだが）いわゆる &amp;ldquo;Big Science” と呼ばれる分野は利権が大きく関係してくるし，単純に学問だけで済まないのが辛いところである。&lt;/p&gt;

&lt;h2 id=&#34;iphone:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;スマホへ「ブルートフォース攻撃」を要求するアメリカ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1602/17/news102.html&#34;&gt;銃乱射犯のiPhoneパスコードを総当たりへ──米判事、Appleに「10回ミスでデータ消去」機能のオフ命じる - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1602/17/news152.html&#34;&gt;Apple、FBI捜査のためのiPhoneバックドア命令を拒否──自由を脅かすもの - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/02/18/apple-encryption-iphone-san-bernardino/&#34;&gt;アップル、「セキュリティの弱体化」を求める米国政府の要請を拒否 « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1602/18/news077.html&#34;&gt;GoogleのピチャイCEO、AppleのクックCEOの決断にTwitterで賛同表明 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/business/35078101/&#34;&gt;グーグルCEO、アップル支持を表明&amp;ndash;「iPhone」ロック解除をめぐる裁判所命令について - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/02/19/20160217googles-ceo-says-enable-hacking-could-compromise-users-privacy/&#34;&gt;GoogleのCEO、スンダル・ピチャイ、「当局が企業にハッキングを命じることはユーザーの利益を損なう」 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/02/19/20160218apple-gets-an-extension-in-iphone-unlock-case-response-now-due-february-26th/&#34;&gt;AppleはiPhoneアンロックの事案で延期を獲得、返答の期限は2月26日に | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2016/02/decrypting_an_i.html&#34;&gt;Decrypting an iPhone for the FBI - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/business/35078733/&#34;&gt;ニューヨーク連邦地裁、「iPhone」ロック解除求める米政府要請を却下 - CNET Japan&lt;/a&gt; : 今回の件とは別だが，影響あるかも&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/03/06/tech-giants-agree-the-fbis-case/&#34;&gt;言論の自由、コードの自由：アップル「iPhoneロック解除」拒否で団結する米テック界 « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50764280.html&#34;&gt;エフセキュアブログ : 思考実験：FBiOS 盗聴エディション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/07/20160306apple-head-of-software-engineering-says-fbis-demands-compromise-the-safety-of-all-ios-users/&#34;&gt;Appleのソフトウェアエンジニアリング責任者曰く：FBIの要求は全iOSユーザーの安全を脅かす | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要求されているのは以下の3つらしい（「&lt;a href=&#34;http://jp.techcrunch.com/2016/02/19/20160218apple-gets-an-extension-in-iphone-unlock-case-response-now-due-february-26th/&#34;&gt;AppleはiPhoneアンロックの事案で延期を獲得、返答の期限は2月26日に&lt;/a&gt;」より）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;間違ったパスワードを何回も入力するとその電話機のデータを消してしまう自動消去機能を無効化またはバイパスする&lt;/li&gt;
&lt;li&gt;パスワード誤入力（ロックアウト）の際の遅延を取り去る&lt;/li&gt;
&lt;li&gt;パスコードの入力をBluetoothやWi-Fiのような無線プロトコルまたはデバイス上の物理的ポートからできるような、新しいバージョンのiOSを作る&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ちなみに数字4桁の組み合わせをブルートフォース攻撃で攻略する際の計算量は $2^{13.3}$ 程度だ（DES 暗号鍵が $2^{56}$）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a7037682d5c3ed7e7eed7ed927d2fcf9:s&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
ロックアウトなしで遠隔操作が可能ならほぼ一瞬で終わるだろう。&lt;/p&gt;

&lt;p&gt;国家が考えるセキュリティ・リスクと企業が考えるセキュリティ・リスクと個人が考えるセキュリティ・リスクはそれぞれ異なる。
国家が守るべきは国家であり個人ではない。
企業が守るものは利益だ。
国家と個人を天秤にかけてリスクの高い方を切り捨てる。
個人が守るべきものは（他者を含めた）個人である。
個人を守るためには，時に国家や企業を敵に回す必要がある。&lt;/p&gt;

&lt;p&gt;Apple がセキュリティやプライバシーに取り組むようになったのはつい最近から。
Google はかつて「プライバシーなど存在しない」と言い放った企業である。
企業は（個人の）自由を守っているわけではないのだ。&lt;/p&gt;

&lt;p&gt;以下の例は企業とはちょっと違うけど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078156/&#34;&gt;ランサムウェア被害の大病院、犯人に身代金を支払う&amp;ndash;1万7000ドル相当 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のように，いざとなれば犯罪者と組むこともある。&lt;/p&gt;

&lt;p&gt;来週末に Apple がどのような答えを出すかが見ものである。
いつものことではあるが，私たちはあらゆる事態を想定して備える必要がある。&lt;/p&gt;

&lt;h2 id=&#34;c:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;C 言語はどう書くべきか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/how-to-c-in-2016-1/&#34;&gt;2016年、C言語はどう書くべきか (前編) | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/how-to-c-in-2016-2/&#34;&gt;2016年、C言語はどう書くべきか (後編) | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実はまた C 言語の仕事の話もチラチラ聞くので，念のため復習。
とはいえ，ここに書いてあるようなことは昔から言われていることなので（先進的なコンパイラ実装は標準を先取りする），ビックリするような内容ではないが。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hidenorly/items/12f5b5de0a9741ad4e5a&#34;&gt;「2016年、C言語はどう書くべきか」をちょっと分析してみる (warning編) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hidenorly/items/5831e8fa87f4a7adc2c9&#34;&gt;「2016年、C言語はどう書くべきか」をちょっと分析してみる (building編) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;blockchain:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;Bitcoin は「群衆の知恵」を前提とする&lt;/h2&gt;

&lt;p&gt;いや，最近 Blockchain の話題をまた見るようになったけど， Blockchain 最大の弱点は追記プロセスにあることをみんな分かっているのだろうか。
そこを見ないで「Blockchain は改竄不可能」というのは言いすぎだと思う。&lt;/p&gt;

&lt;p&gt;Blockchain の代表的な実装である Bitcoin は追記プロセスを「群衆の知恵（wisdom of crowds）」を前提に実装している&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:wc&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a7037682d5c3ed7e7eed7ed927d2fcf9:wc&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;「群衆の知恵」モデルは、多様性をもった参加者が、個々に自律していて、まわりの人々の考えに影響を受けないことが前提となっている。参加者がお互いに影響を与え、同質なグループができあがってしまうと、結果がゆがめられてしまうからだ。しかし、現実には、参加者はお互いに影響を与えあうため、「群集の知恵」モデルは問題をかかえている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://blog.keiichimaeda.com/archives/97&#34;&gt;集団的知性（Collective Intelligence）と、群衆の知恵（Wisdom of Crowds）の違い&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「群衆の知恵」モデルが使えるのは株価の予測とかそういった分野である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:h&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a7037682d5c3ed7e7eed7ed927d2fcf9:h&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
不特定多数のユーザが参加する Bitcoin でも「群衆の知恵」モデルを前提にした（proof-of-work などの）追記プロセスが実装され，実際に上手く機能している。&lt;/p&gt;

&lt;p&gt;しかしこれを閉鎖的組織・コミュニティでやろうとしてもうまくいかないんじゃないだろうか。
「群衆の知恵」モデルは player がカルテルを組めば崩壊してしまう。&lt;/p&gt;

&lt;p&gt;多分 Blockchain のコピーが十数個程度あるだけでは話にならない気がする。
FinTech の中の人達はそういうのどうやって解決しているのだろうか。&lt;/p&gt;

&lt;h2 id=&#34;amazon:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;Amazon Prime 入ろうかと&lt;/h2&gt;

&lt;p&gt;クラウド・ストレージの &lt;a href=&#34;https://www.copy.com/&#34;&gt;Copy&lt;/a&gt; が今年の5月で shutdown するというので，他のサービスを探している。
目的は写真データの管理。
Box や Dropbox は他の用途で使っていて混ぜたくないし， Flickr や Google や Evernote は問題外。
というわけで Amazon Cloud Drive を使おうと思ったのだが，無料では5GBまでしかなく，それ以上使いたい場合は Amazon Prime に入らないといけないらしい。&lt;/p&gt;

&lt;p&gt;まぁ，以前から Amazon Music や Prime Video には興味があったので「えいや！」でお試し期間で入ってみた。
よさげならお金払って継続してみる。
継続するなら Hulu は解約かな。&lt;/p&gt;

&lt;h2 id=&#34;media:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;「ムラ社会」という名の多文化主義的エポケー&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lullymiura.hatenadiary.jp/entry/2016/02/16/021154&#34;&gt;メディア「ムラ」は民主的に統制されるべきか？―高市総務相の放送法発言問題 - 山猫日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ikeuchisatoshi.com/%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%81%A8%E6%94%BF%E6%B2%BB%E3%81%AE%E9%96%A2%E4%BF%82%E3%81%A8%E3%80%81%E3%81%9D%E3%82%8C%E3%82%92%E6%94%AF%E3%81%88%E3%81%A6%E3%81%84%E3%81%9F%E3%83%A0%E3%83%A9/&#34;&gt;メディアと政治の関係と、それを支えていたムラ社会の崩壊はどこまで及ぶか – 中東・イスラーム学の風姿花伝&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここでいう「ムラ社会」は多文化主義的エポケーの超小規模版のように見える。&lt;/p&gt;

&lt;p&gt;「多文化主義的エポケー」はイギリスの犯罪学者ジョック・ヤングの著書『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;』で出てくる言葉だ。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;しかし、現在のように都市生活が多様化し、グローバル化したマスメディアが毎日のように多種多様な文化を垂れ流す状況では、もはや自然的エポケーは通用しなくなっている。こうした困難に対処する態度こそ、私が「多文化主義的エポケー」と呼んでいるものである。つまり、自然的エポケーの特徴である「懐疑の一時停止（あるいは〈括弧〉にいれる）」を、いわば多元化することである。この場合、それぞれの文化は、他の文化からみずからを区別するために、独自の排他的領域という〈括弧〉のなかに閉じこもろうとする。それはちょうど、それぞれの集団が、リスクを最小化するために、保険統計的計算にもとづいて物質的・経済的バリアを張り巡らせようとするのと同じである。&lt;/q&gt;（p.251）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;多文化主義のおかげで、人々は自分たちの選択を相対化しなくても、規範の相対性を受け入れることができるようになるわけである。……多文化主義における異文化への距離の取り方（「尊重」とか「寛容」という言葉でごまかしているが）が異文化への不安をつくりだす可能性は十分にある。というのも、それは戦後の包摂型社会に代えて、排除型の飛び地が点在する世界をつくりだすからである。……かつて近代主義が求めたのは、開放的で、「脱埋め込み」的で、両義的で、断片化された世界をつくりだすことであった。それは自己とライフスタイルを自由に選択し、創造することが可能な世界だった。しかし、多文化主義はそのような世界を消し去ろうとする――つまり、一方で多様性を認めながら、他方では行為者から選択の自由を奪おうとするのである。&lt;/q&gt;（p.259）
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;』で言う「多文化主義的エポケー」はアメリカの特にエスニック文化やゲイ文化を指しているが，日本でも形を変えて存在するということではないだろうか。&lt;/p&gt;

&lt;p&gt;とか思ったりする。&lt;/p&gt;

&lt;p&gt;そういえば，&lt;a href=&#34;{{ relref&amp;lt; &amp;quot;remark/2016/02/no-more-paper-books.md&amp;quot; &amp;gt;}}&#34;&gt;この前ちらっと紹介&lt;/a&gt;した「&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B011KRIYVS/baldandersinf-22/&#34;&gt;リベラルのことは嫌いでも、リベラリズムは嫌いにならないでください&lt;/a&gt;」も同じ匂いを感じる。
この本を読む限り，リベラリズムは「多文化主義的エポケー」に陥ったまま足が抜けなくなってるようにしか見えない。
（そういや，多文化主義ってリベラリズムの考え方だっけ）&lt;/p&gt;

&lt;h2 id=&#34;参考:a7037682d5c3ed7e7eed7ed927d2fcf9&#34;&gt;参考&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/417iD4x5N%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジョック ヤング Jock Young &lt;/dd&gt;&lt;dd&gt;洛北出版 2007-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764331/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764331.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;後期近代の眩暈―排除から過剰包摂へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4255008515/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4255008515.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;断片的なものの社会学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796700439/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4796700439.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スティグマの社会学―烙印を押されたアイデンティティ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764242/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764242.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新しい貧困 労働消費主義ニュープア&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062881357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062881357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;弱者の居場所がない社会――貧困・格差と社会的包摂 (講談社現代新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000410.shtml&#34;&gt;感想はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a7037682d5c3ed7e7eed7ed927d2fcf9:s&#34;&gt;「&lt;span&gt;&lt;a href=&#34;https://www.ipa.go.jp/files/000026760.pdf&#34;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;」より。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:a7037682d5c3ed7e7eed7ed927d2fcf9:wc&#34;&gt;「&lt;a href=&#34;http://blog.keiichimaeda.com/archives/97&#34;&gt;集団的知性（Collective Intelligence）と、群衆の知恵（Wisdom of Crowds）の違い&lt;/a&gt;」は既にリンクが切れていたので &lt;a href=&#34;http://sousu.tumblr.com/post/12854295698/&#34;&gt;Tumblr の reblog&lt;/a&gt; を参照した。 reblog バンザイ！
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:wc&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:a7037682d5c3ed7e7eed7ed927d2fcf9:h&#34;&gt;かつて「はてな」が選挙予測を「群衆の知恵」モデルでやろうとして実際的中させたのだが，あれは多分使い方が間違っている。あたったのはたまたまか別の要因だろう。はてなコミュニティで「群衆の知恵」モデルは成立しない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a7037682d5c3ed7e7eed7ed927d2fcf9:h&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>オンラインでプログラミング - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/online-programming/" />
		<id>tag:text.Baldanders.info,2016-02-14:/remark/2016/02/online-programming/</id>
		<published>2016-02-14T20:19:41+09:00</published>
		<updated>2016-02-14T20:19:41+09:00</updated>
		<summary>paiza.IO を試してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;先ほどの「&lt;a href=&#34;http://text.baldanders.info/remark/2016/02/14-stories/&#34;&gt;週末スペシャル&lt;/a&gt;」でも紹介したが， &lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; を試してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://paiza.io/&#34;&gt;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/omochiiiY/items/b3b3f7ece1dedca1d4e1&#34;&gt;GistをPaiza.ioで使ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コードを試すだけならアカウントはいらないが，コードを再利用したり他のサービスと連携する場合はサインアップが必要。
&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; アカウントと連携できるのでその辺は問題ないだろう。&lt;/p&gt;

&lt;p&gt;まず「&lt;a href=&#34;http://localhost:1313/golang/stack-trace-and-panic-handling/&#34;&gt;スタック追跡とパニック・ハンドリング&lt;/a&gt;」のコード例を &lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; で&lt;a href=&#34;https://paiza.io/projects/MencTrqIn3FYdg6u53xNSg&#34;&gt;書いてみた&lt;/a&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;iframe src=&#34;https://paiza.io/projects/e/MencTrqIn3FYdg6u53xNSg?theme=github&#34; width=&#34;100%&#34; height=&#34;500&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;&gt;&lt;/iframe&gt;


&lt;/figure&gt;

&lt;p&gt;こんな感じでコードと実行結果を埋め込むこともできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
また埋め込まれたコードはその場で編集して実行し直すこともできる。
試しに for 文の中を以下のコードに差し替えて実行してみて欲しい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for depth := 0; ; depth++ {
	pc, _, line, ok := runtime.Caller(depth)
	if !ok {
		break
	}
	fmt.Fprintf(log, &amp;quot; -&amp;gt; %d: %s: (%d)\n&amp;quot;, depth, runtime.FuncForPC(pc).Name(), line)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; で書いたコードは Gist と連携できる。
たとえば上のコードは&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;&#39;&gt;
&lt;script src=&#34;https://gist.github.com/spiegel-im-spiegel/89526909cc206f31c1d7.js&#34;&gt;&lt;/script&gt;
&lt;/figure&gt;

&lt;p&gt;という感じで Gist に保存されている。
Gist との同期は自動ではなく明示的に指定する必要がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; で書いたコードで他の（Twitter API などの）サービスと接続することも可能。
&amp;ldquo;&lt;a href=&#34;https://play.golang.org/&#34;&gt;The Go Playground&lt;/a&gt;” では外部との通信はできないので，これは嬉しい機能である。
たとえば「&lt;a href=&#34;http://text.baldanders.info/golang/get-shortened-url-from-gitio/&#34;&gt;Git.io から短縮 URL を取得するコード&lt;/a&gt;」を参考に書いたコードがこれ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;iframe src=&#34;https://paiza.io/projects/e/uUG8z-Teb45q4RZIBSSAeg?theme=github&#34; width=&#34;100%&#34; height=&#34;500&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;&gt;&lt;/iframe&gt;


&lt;/figure&gt;

&lt;p&gt;実行をスケジューリングすることも可能なので，簡単なサーバ監視プログラムとか，色々な使い方ができそうである。&lt;/p&gt;

&lt;p&gt;更に &lt;a href=&#34;https://twitter.com/&#34;&gt;Twitter&lt;/a&gt; でコードを書くことも可能。
あらかじめ @&lt;a href=&#34;https://twitter.com/paiza_run&#34;&gt;paiza_run&lt;/a&gt; を follow しておいて&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/paiza_run&#34;&gt;@paiza_run&lt;/a&gt; go: package main&lt;br&gt;import &amp;quot;fmt&amp;quot;&lt;br&gt;func main() {&lt;br&gt;    fmt.Println(&amp;quot;Hello World!&amp;quot;)&lt;br&gt;}&lt;/p&gt;&amp;mdash; Spiegel im Spiegel (@spiegel_2007) &lt;a href=&#34;https://twitter.com/spiegel_2007/status/698818840533184512&#34;&gt;2016, 2月 14&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;p&gt;とコードを投げれば&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/spiegel_2007&#34;&gt;@spiegel_2007&lt;/a&gt; Hello World! &lt;a href=&#34;https://twitter.com/hashtag/paiza_run_result?src=hash&#34;&gt;#paiza_run_result&lt;/a&gt;&lt;/p&gt;&amp;mdash; paiza_run (@paiza_run) &lt;a href=&#34;https://twitter.com/paiza_run/status/698818848921776128&#34;&gt;2016, 2月 14&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;p&gt;と結果が返ってくる。
これはスクリプト言語でやったほうが面白いかな。&lt;/p&gt;

&lt;p&gt;更に更に，他のユーザが書いたコードを fork することも可能。
またチャット等でリアルタイムにやり取りしながらコードを書くこともできるみたい。
遠隔ペアプログラミングとかできそうだよね。&lt;/p&gt;

&lt;p&gt;ただし， &lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; では実行時間と使えるメモリに制限があって，大体どの言語でも2秒で512MBが制限になっている模様。
また &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は標準以外の外部パッケージが使えない。
たとえば以下は「&lt;a href=&#34;http://text.baldanders.info/golang/transform-character-encoding/&#34;&gt;文字エンコーディング変換&lt;/a&gt;」で書いたコードだが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;golang.org/x/text/encoding/japanese&amp;quot;
	&amp;quot;golang.org/x/text/transform&amp;quot;
)

func main() {
	reader := NewDecoder(os.Stdin)
	writer := NewEncoder(os.Stdout)
	if _, err := io.Copy(writer, reader); err != nil {
		fmt.Fprintln(os.Stderr, err)
	}
}

func NewDecoder(reader io.Reader) *transform.Reader {
	return transform.NewReader(reader, japanese.ShiftJIS.NewDecoder())
}

func NewEncoder(writer io.Writer) *transform.Writer {
	return transform.NewWriter(writer, japanese.EUCJP.NewEncoder())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; ではコンパイル時にエラーになる。&lt;/p&gt;

&lt;p&gt;欲を言えば &amp;ldquo;&lt;a href=&#34;https://play.golang.org/&#34;&gt;The Go Playground&lt;/a&gt;” にあるようなコードの整形機能が欲しいところである。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;ただし埋め込んだコードを表示するにはブラウザ設定で third-party cookie を有効にする必要がある。 Firefox であれば例外設定をすることもできる。いや，こういうのマジ勘弁して欲しいんですけど。今時 third-party cookie とかありえない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： LIGO が重力波の「直接検出」に成功する！ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/14-stories/" />
		<id>tag:text.Baldanders.info,2016-02-14:/remark/2016/02/14-stories/</id>
		<published>2016-02-14T14:00:52+09:00</published>
		<updated>2016-03-06T12:48:28+09:00</updated>
		<summary>LIGO が重力波の「直接検出」に成功する！ / aozorahack.org ドメインの取得 / オンラインのプログラム実行環境 paiza.IO / パスワードや秘密鍵の管理はどうしてますか？ / 達人出版会から「数学ガールの秘密ノート」の PDF 版が出てるらしい</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ligo:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;LIGO が重力波の「直接検出」に成功する！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#aozora:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;aozorahack.org ドメインの取得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#paiza:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;オンラインのプログラム実行環境 paiza.IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#yubikey:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;パスワードや秘密鍵の管理はどうしてますか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mathgirl:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;達人出版会から「数学ガールの秘密ノート」の PDF 版が出てるらしい&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ligo:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;LIGO が重力波の「直接検出」に成功する！&lt;/h2&gt;

&lt;p&gt;先週に &lt;a href=&#34;https://www.ligo.caltech.edu/&#34;&gt;LIGO （Laser Interferometer Gravitational wave Observatory）&lt;/a&gt;から「アナウンスがあるよ」って予告されてたけど，このことだったとは。
知らない人は「なにそれ？」って感じだろうし，オカルトな人は「波動が科学的に証明された」とかワケワカメなことを言い出しそうだけど，これはホンマに凄いことなのですよ。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/GravitationalWaves?src=hash&#34;&gt;#GravitationalWaves&lt;/a&gt; from &lt;a href=&#34;https://twitter.com/hashtag/BinaryBlackHole?src=hash&#34;&gt;#BinaryBlackHole&lt;/a&gt; detected on September 14, 2015 @ 9:51AM UTC by &lt;a href=&#34;https://twitter.com/LIGOWA&#34;&gt;@LIGOWA&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/LIGOLA&#34;&gt;@LIGOLA&lt;/a&gt; observatories.&lt;/p&gt;&amp;mdash; LIGO (@LIGO) &lt;a href=&#34;https://twitter.com/LIGO/status/697806099135754244&#34;&gt;2016, 2月 11&lt;/a&gt;&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.116.061102&#34;&gt;Phys. Rev. Lett. 116, 061102 (2016) - Observation of Gravitational Waves from a Binary Black Hole Merger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dcc.ligo.org/LIGO-P1500238/public/main&#34;&gt;Characterization of transient noise in Advanced LIGO relevant to gravitational wave signal GW150914&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.sciencemuseum.org.uk/first-ever-gravitational-waves-detected/&#34;&gt;First ever gravitational waves detected | Science Museum Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ligo.org/news/detection-press-release.pdf&#34;&gt;GRAVITATIONAL WAVES DETECTED 100 YEARS AFTER EINSTEIN’S PREDICTION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nature.com/news/einstein-s-gravitational-waves-found-at-last-1.19361&#34;&gt;Einstein&amp;rsquo;s gravitational waves found at last : Nature News &amp;amp; Comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.space.com/31922-gravitational-waves-detection-what-it-means.html&#34;&gt;Gravitational Waves: What Their Discovery Means for Science and Humanity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seti.org/seti-institute/gravity-waves-and-et&#34;&gt;Gravity Waves and ET | SETI Institute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scientificamerican.com/article/gravitational-waves-discovered-from-colliding-black-holes1/&#34;&gt;Gravitational Waves Discovered from Colliding Black Holes - Scientific American&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.space.com/31960-hawking-gravitational-waves-could-revolutionize-astronomy.html&#34;&gt;Hawking: Gravitational Waves Could Revolutionize Astronomy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://theconversation.com/how-did-the-odd-black-holes-detected-by-ligo-form-and-can-we-spot-them-in-the-sky-54672&#34;&gt;How did the odd black holes detected by LIGO form – and can we spot them in the sky?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/02/19blackhole/index-j.shtml&#34;&gt;重力波を発生させたブラックホール連星のなぞ - アストロアーツ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nao.ac.jp/news/topics/2016/20160212-gw.html&#34;&gt;LIGOによる重力波の直接検出について | 国立天文台(NAOJ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.icrr.u-tokyo.ac.jp/2016/02/12010659.html&#34;&gt;ICRR: 【コメント】LIGO-Virgoの重力波発見に関するKAGRAグループからのコメント - 東京大学宇宙線研究所&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2016/02/12/114/&#34;&gt;重力波天文学に道開く - 初観測のＬＩＧＯチーム | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2016/02/12/192/&#34;&gt;「重力波」の観測に初成功 - アインシュタインの予言から100年目の大成果 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://natgeo.nikkeibp.co.jp/atcl/news/16/021200053/&#34;&gt;重力波、世紀の発見をもたらした壮大な物語 | ナショナルジオグラフィック日本版サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/02/12/ligo-gravitational-waves/&#34;&gt;13億年前の「ブラックホールの合体」で生じた重力波、検出される（動画あり） « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/02/12/20160211einsteins-gravitational-waves-have-been-detected-for-the-first-time/&#34;&gt;アインシュタインが予言した重力波、米中心のLIGOチームが史上初めて観測に成功 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/02/20160212_02.html&#34;&gt;2016年2月12日ニュース「アインシュタイン予言の重力波初観測 宇宙創成の謎解明に有力手掛かり」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jun-makino.sakura.ne.jp/articles/future_sc/note131.html&#34;&gt;重力波検出の意義と今後の進展(2016/2/12)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://core-u.hiroshima-u.ac.jp/blog/2016/02/15/core-u%E3%81%AB%E3%82%88%E3%82%8B%E9%87%8D%E5%8A%9B%E6%B3%A2%E5%A4%A9%E4%BD%93%E3%81%AE%E6%8E%A2%E6%9F%BB%E6%B4%BB%E5%8B%95/&#34;&gt;重力波天体からのガンマ線か？ フェルミ衛星がガンマ線バーストを観測広島大学極限宇宙研究拠点 CORE-U&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://core-u.hiroshima-u.ac.jp/blog/2016/02/16/%E7%B7%8A%E6%80%A5%E3%82%BB%E3%83%9F%E3%83%8A%E3%83%BC%E3%80%8C%E9%87%8D%E5%8A%9B%E6%B3%A2%E5%88%9D%E6%A4%9C%E5%87%BA%E3%80%8D%E3%81%AE%E9%96%8B%E5%82%AC-222/&#34;&gt;緊急セミナー「重力波初検出」の開催 (&lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;22&lt;/sub&gt;)広島大学極限宇宙研究拠点 CORE-U&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/02/22/discover-of-a-gravitational-wave/&#34;&gt;重力波を最初に「目撃」したイタリア人 « WIRED.jp&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/03/05/gravitational-wave-and-italy/&#34;&gt;重力波観測のウラに、イタリアの貢献があった « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いちばん分かりやすいのは &lt;a href=&#34;http://apod.nasa.gov/&#34;&gt;APOD&lt;/a&gt; に掲載されたこの図かな。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://apod.nasa.gov/apod/ap160211.html&#34;&gt;&lt;img src=&#34;http://apod.nasa.gov/apod/image/1602/BHmerger_LIGO_3600.jpg&#34; height=&#34;374&#34; width=&#34;500&#34; alt=&#34;APOD: 2016 February 11 - LIGO Detects Gravitational Waves from Merging Black Holes&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://apod.nasa.gov/apod/ap160211.html&#34;&gt;APOD: 2016 February 11 - LIGO Detects Gravitational Waves from Merging Black Holes&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「重力波（gravitational wave または gravity wave）」はアインシュタイン博士の「一般相対性理論」で予言されてた現象。
ちなみに一般相対性理論は重力と時空間&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4f4f353f554c7ee3c7517860f7a88449:sp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4f4f353f554c7ee3c7517860f7a88449:sp&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; の関係について考察した理論。&lt;/p&gt;

&lt;p&gt;実は「重力波」の存在自体は既に間接的には証明されている。
1974年に連星パルサー&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4f4f353f554c7ee3c7517860f7a88449:ps&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4f4f353f554c7ee3c7517860f7a88449:ps&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; の公転周期の軌道が短くなっていく現象が観測され，これが重力波の存在を示す間接的な証拠となった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4f4f353f554c7ee3c7517860f7a88449:dp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4f4f353f554c7ee3c7517860f7a88449:dp&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
この研究を行ったチームは1993年にノーベル物理学賞を受賞している。
今回の「直接検出」はこれ以来の快挙であり，確かに「ノーベル賞級」の成果といえる。&lt;/p&gt;

&lt;p&gt;しかし連星ブラックホールかぁ。
おそらく各国・各組織の重力波検出の研究チームは1974年の観測成果を意識してパルサーをターゲットにしていたところが多かったのではないだろうか。&lt;/p&gt;

&lt;p&gt;2005年の &amp;ldquo;Einstein Year” に開始された &lt;a href=&#34;http://www.einsteinathome.org/&#34; title=&#34;Einstein@Home&#34;&gt;Einstein@Home&lt;/a&gt; でもパルサーの発見と観測が主である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://huaa.baldanders.info/log/000181.shtml&#34;&gt;Einstein@Home のすすめ &amp;ndash; Club-HUAA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同じ &lt;a href=&#34;https://www.ligo.caltech.edu/&#34; title=&#34;LIGO Lab | Caltech | MIT&#34;&gt;LIGO&lt;/a&gt; をソースとしながら &lt;a href=&#34;http://www.einsteinathome.org/&#34; title=&#34;Einstein@Home&#34;&gt;Einstein@Home&lt;/a&gt; は今回の発見に貢献できなかったわけだが，こんなコメントを残している。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Did Einstein@Home play any role in this? No, it didn’t. The signal in the instrument lasted only about 1/4 of a second. It’s not a continuous-wave signal like the type that Einstein@Home has been searching for. But since the observing run ended in mid January, we have been preparing the data to start a new low-frequency all-sky search for continuous gravitational waves. We are now starting to run this on Einstein@Home, so please sign up your computers and disable their sleep mode! In the next months we will extend the frequency range of the continuous waves all-sky searches, target interesting point sources and we are also gearing up to perform broader surveys for binary black hole mergers.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://einstein.phys.uwm.edu/forum_thread.php?id=11814&#34;&gt;Exciting news: Gravitational Waves detected!&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;いやぁ，夢が広がりますねぇ。&lt;/p&gt;

&lt;p&gt;重力を利用した天体観測は今では珍しくなくなりつつある。
たとえば光が重力で曲げられる（これも一般相対性理論で予言されていた）ことを利用した「重力レンズ」による観測は日本の &lt;a href=&#34;http://alma.mtk.nao.ac.jp/j/&#34;&gt;ALMA 望遠鏡&lt;/a&gt;の得意とするところである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.s.u-tokyo.ac.jp/ja/press/6857/&#34;&gt;視力13,000を達成！アルマ望遠鏡と重力レンズ望遠鏡のかけ合わせで　モンスター銀河の真の姿をとらえることに成功 — 東京大学 大学院理学系研究科・理学部&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの道具に重力波干渉計が加わっていくことになるだろう。
確実に天文学は新しいステージに上る。&lt;/p&gt;

&lt;h2 id=&#34;aozora:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;aozorahack.org ドメインの取得&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://honnomirai.net/&#34;&gt;本の未来基金&lt;/a&gt;」が aozorahack.org ドメインを取得したらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aozorahack/aozorahack/issues/35&#34;&gt;aozorahack.org サイトを準備する · Issue #35 · aozorahack/aozorahack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/aozorahack/&#34;&gt; aozorahack &lt;/a&gt; の今後の活躍を期待します。&lt;/p&gt;

&lt;h2 id=&#34;paiza:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;オンラインのプログラム実行環境 paiza.IO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://paiza.io/&#34;&gt;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/omochiiiY/items/b3b3f7ece1dedca1d4e1&#34;&gt;GistをPaiza.ioで使ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとで試してみる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に関しては &amp;ldquo;&lt;a href=&#34;https://play.golang.org/&#34;&gt;The Go Playground&lt;/a&gt;” があるのでオン書きには困らないのだが， &lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; では様々な言語に対応しているのと，リアルタイム編集機能やチャット機能もあるそうなので，リモート環境でのペア・プログラミングみたいなことも出来そう。&lt;/p&gt;

&lt;h2 id=&#34;yubikey:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;パスワードや秘密鍵の管理はどうしてますか？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/jkr_2255/items/6927758094c3078e62c5&#34;&gt;YubiKey+Pageantでらくらく秘密鍵管理 on Windows - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/jkr_2255/items/f1ebd3fa4a9bf8ee1b03&#34;&gt;Git for WindowsのシェルからPageantでSSH - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dseg/items/77d77467970b1b510285&#34;&gt;秘密鍵、管理してますか? YubiKeyで鍵の一元管理とSSH接続、２段階認証の高速化を試す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tsuyoshi_cho/items/79c09905ae3f192b3a0f&#34;&gt;Windowsでのssh agent - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;YubiKey については興味はあるのだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4f4f353f554c7ee3c7517860f7a88449:yk&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4f4f353f554c7ee3c7517860f7a88449:yk&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，むしろ YubiKey を紛失しそうで怖いんだよなぁ。
自宅のメインマシンを Linux に換装したら色々試してみたい。&lt;/p&gt;

&lt;h2 id=&#34;mathgirl:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;達人出版会から「数学ガールの秘密ノート」の PDF 版が出てるらしい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tatsu-zine.com/books/mathgirl-himitu-formula-graph&#34;&gt;数学ガールの秘密ノート／式とグラフ【委託】 - 達人出版会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hyuki.com/d/201602.html#i20160210160000&#34;&gt;結城浩の日記 - 達人出版会から『数学ガールの秘密ノート／式とグラフ』PDF版の販売を開始します。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サンプル版を見てみたが，「ページの抽出」以外のほとんどの機能が許可されている。
素晴らしい。&lt;/p&gt;

&lt;p&gt;実は今， PayPal は調整中&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4f4f353f554c7ee3c7517860f7a88449:pp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4f4f353f554c7ee3c7517860f7a88449:pp&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; ですぐに使えないので買えるようになったら買います。
他のシリーズ（デザパタ本とか）も PDF で出るといいなぁ。&lt;/p&gt;

&lt;p&gt;そうそう。
PDF リーダは「自由なソフトウェア」を使いましょう。
Adobe Reader なんか要らんですよ。
偉い人にはそれが分からんのです。
Windows 環境なら &lt;a href=&#34;http://projects.gnome.org/evince/&#34;&gt;Evince&lt;/a&gt; がオススメ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pdfreaders.org/&#34;&gt;Get a Free Software PDF reader!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:4f4f353f554c7ee3c7517860f7a88449&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMIQ/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41yiQ7I2sLL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMIQ/baldandersinf-22/&#34;&gt;数学ガールの秘密ノート／式とグラフ&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2013-07-12&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMJ0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMJ0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／整数で遊ぼう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMK4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ガロア理論&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;数学は「代数」の概念を理解し「幾何」と脳内連携できるとグッと世界が広がる。私が小学生ならこの本を夏休みの読書感想文と自由研究のネタにする。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-02-14&#34;&gt;2016-02-14&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:4f4f353f554c7ee3c7517860f7a88449:sp&#34;&gt;「時空間」とは時間の流れを空間と同等な「次元」のひとつとみなす考え方。今ではみんな当たり前だと思っているかもしれないが，当時の物理学において「時空間」という考え方はかなり革新的で，それを論じた一般相対性理論はものすごいパラダイムシフトをもたらしたわけだ。そしてそれを「観測」によって証明できたということは理論の正しさを示すものでもある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4f4f353f554c7ee3c7517860f7a88449:sp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4f4f353f554c7ee3c7517860f7a88449:ps&#34;&gt;高速回転する中性子星のことをパルサー（pulsar）と呼ぶ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4f4f353f554c7ee3c7517860f7a88449:ps&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4f4f353f554c7ee3c7517860f7a88449:dp&#34;&gt;連星パルサーは重力波を放出することによりエネルギーを失い公転周期が短くなるとかなんとか。で，実際に重力波があるとして計算した周期減少率が実際の観測と誤差の範囲内で一致したとかなんとか。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4f4f353f554c7ee3c7517860f7a88449:dp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4f4f353f554c7ee3c7517860f7a88449:yk&#34;&gt;gpg-agent でも使えると聞いているのだが試す環境がない。Anrdoid アプリの &lt;a href=&#34;https://www.openkeychain.org/&#34;&gt;OpenKeychain&lt;/a&gt; も NFC 経由で YubiKey が使えるらしいのだが&amp;hellip;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4f4f353f554c7ee3c7517860f7a88449:yk&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4f4f353f554c7ee3c7517860f7a88449:pp&#34;&gt;デビットカードは許可するくせに au WALLET は拒否られた。今時ネットでクレカは使いたくないのだが，どうしよう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4f4f353f554c7ee3c7517860f7a88449:pp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語における「オブジェクト」 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/object-oriented-programming/" />
		<id>tag:text.Baldanders.info,2015-12-15:/golang/object-oriented-programming/</id>
		<published>2015-12-15T21:19:58+09:00</published>
		<updated>2016-02-22T19:23:38+09:00</updated>
		<summary>Go 言語がいわゆる「オブジェクト指向言語」と言えるかどうかについては色々とあるようだが，オブジェクト指向プログラミングを助けるための仕掛けはいくつか存在する。今回はその中の type キーワードを中心に解説していく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;がいわゆる「オブジェクト指向言語」と言えるかどうかについては色々とあるようだが，オブジェクト指向プログラミングを助けるための仕掛けはいくつか存在する。
今回はその中の &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードを中心に解説していく。&lt;/p&gt;

&lt;p&gt;なお，今回のソースコードは “&lt;a href=&#34;https://tour.golang.org/&#34;&gt;A Tour of Go&lt;/a&gt;” のものをかなり流用しているため取り扱いに注意。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の公式ドキュメントは CC License の by 3.0，ソースコードは &lt;a href=&#34;https://golang.org/LICENSE&#34;&gt;BSD license&lt;/a&gt; で提供されている。&lt;/p&gt;

&lt;h2 id=&#34;go-言語の基本型:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;Go 言語の基本型&lt;/h2&gt;

&lt;p&gt;今さらだけど， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の基本型（basic type）は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bool&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;int, int8, int16, int32, int64&lt;/li&gt;
&lt;li&gt;uint, uint8, uint16, uint32, uint64&lt;/li&gt;
&lt;li&gt;uintptr&lt;/li&gt;
&lt;li&gt;byte&lt;/li&gt;
&lt;li&gt;rune&lt;/li&gt;
&lt;li&gt;float32, float64&lt;/li&gt;
&lt;li&gt;complex64, complex128&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうち byte は uint8 の別名で rune&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:rn&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:rn&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; は int32 の別名である。
また int, uint, uintptr のサイズはプラットフォーム依存になっている。
string は不変（immutable）な値で，その実体は byte 配列である。
基本型は組み込み型であり，振る舞いを追加・変更することはできない。&lt;/p&gt;

&lt;p&gt;さらにこれらの基本型を集約した構造体 &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; を定義できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	vertex := struct {
		X int
		Y int
	}{X: 1, Y: 2}
	fmt.Println(vertex)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに構造体のフィールド（field）には構造体を含めることができ，入れ子構造にすることもできる。&lt;/p&gt;

&lt;p&gt;この他に配列（array/slice）や連想配列（map）あるいは関数値（function value）といったものもあるが，今回は踏み込まない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:slc&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:slc&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;型に名前を付ける:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;型に名前を付ける&lt;/h2&gt;

&lt;p&gt;全ての型には &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードを使って名前を付けることができる。
例えば先ほどのコードは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func main() {
	vertex := Vertex{X: 1, Y: 2}
	fmt.Println(vertex)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書き直すことができる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードが使えるのは構造体だけではない。
上述の基本型も &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードを使って型を再定義できる。&lt;/p&gt;

&lt;p&gt;たとえば，2つの時点間の時間を表す &lt;a href=&#34;https://golang.org/pkg/time/&#34; title=&#34;time - The Go Programming Language&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Duration&lt;/code&gt; は以下のように定義されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Duration int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また，配列なども型として再定義できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Msgs []string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードを使って型に名前を付ける利点は3つある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;名前を付けることでコードの可読性を上げる（オブジェクト指向設計では名前がとても重要）&lt;/li&gt;
&lt;li&gt;再利用性の向上（特に構造体の場合）&lt;/li&gt;
&lt;li&gt;型に関数を関連付けることができる。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードによる名付けは単なる別名定義ではないということだ。&lt;/p&gt;

&lt;h2 id=&#34;型に関数を関連付ける:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;型に関数を関連付ける&lt;/h2&gt;

&lt;p&gt;型に関数を関連付けるには以下のように記述する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X =&amp;quot;, v.X, &amp;quot;, Y =&amp;quot;, v.Y)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;(v Vertex)&lt;/code&gt; の部分はメソッド・レシーバ（method receiver）と呼ばれ，これが型と関数を関連付ける役割を果たす。
内部処理としては&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func String(v Vertex) string {
	return fmt.Sprint(&amp;quot;X =&amp;quot;, v.X, &amp;quot;, Y =&amp;quot;, v.Y)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と等価である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:call&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:call&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
関数の呼び出し側は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X =&amp;quot;, v.X, &amp;quot;, Y =&amp;quot;, v.Y)
}

func main() {
	vertex := Vertex{X: 1, Y: 2}
	fmt.Println(vertex.String())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにピリオドで関数を連結して記述する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:pr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:pr&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;構造体そのものには関数を付与できない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:mt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:mt&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func (v struct{ X, Y int }) String() string {
	return fmt.Sprint(&amp;quot;X =&amp;quot;, v.X, &amp;quot;, Y =&amp;quot;, v.Y)
}

func main() {
	var vertex = struct {
		X int
		Y int
	}{X: 1, Y: 2}
	fmt.Println(vertex.String())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと書いても，コンパイル時に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;invalid receiver type struct { X int; Y int } (struct { X int; Y int } is an unnamed type)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と怒られる。
&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードによって型に名前が付けられていることが重要なのだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;には class キーワードはないが， &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードを使うことで，名前と属性と操作を持つクラスを記述することができる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:cls&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:cls&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;汎化-特化と処理の委譲:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;汎化・特化と処理の委譲&lt;/h2&gt;

&lt;p&gt;オブジェクト指向設計においてクラス間の関係は大きく2つある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;汎化・特化&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:c1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:c1&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;（継承または is-a 関係）&lt;/li&gt;
&lt;li&gt;関連&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:c2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:c2&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;（包含または has-a 関係）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このうち関連についてはこれまで説明した方法で実現できるが，汎化・特化は表現できない。
そこで以下の機能を使って汎化・特化を実現する。&lt;/p&gt;

&lt;h3 id=&#34;振る舞いのみを定義した型:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;振る舞いのみを定義した型&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; を使うと振る舞いのみを定義した型を表現することができる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; で定義された型で最もよく目にするのは &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; だろう。
&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は以下のように定義できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:er1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:er1&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type error interface {
	Error() string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は「string 型を返す &lt;code&gt;Error()&lt;/code&gt; 関数」のみが定義されている。
逆に言うと「string 型を返す &lt;code&gt;Error()&lt;/code&gt; 関数」を持つ全ての型は &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; の一種（つまり is-a 関係）であると見なすことができる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:dt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:dt&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package os

// PathError records an error and the operation and file path that caused it.
type PathError struct {
	Op   string
	Path string
	Err  error
}

func (e *PathError) Error() string { return e.Op + &amp;quot; &amp;quot; + e.Path + &amp;quot;: &amp;quot; + e.Err.Error() }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と定義される &lt;a href=&#34;https://golang.org/pkg/os/&#34; title=&#34;os - The Go Programming Language&#34;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;PathError&lt;/code&gt; は &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; の一種である。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; も &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードで名前を付けることができ，他の型と同じように扱うことができる。
さらに &lt;a href=&#34;https://golang.org/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; で定義した型は振る舞いのみで具体的な実装を含まないため，多態性を持たせた記述が可能になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:if&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:if&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;型の埋め込み:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;型の埋め込み&lt;/h3&gt;

&lt;p&gt;もうひとつの汎化・特化の機能が型の埋め込み（embedding）である。
構造体や &lt;a href=&#34;https://golang.org/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; には別の型を埋め込むことができる。&lt;/p&gt;

&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;ReadWriter&lt;/code&gt; は以下のように &lt;code&gt;Reader&lt;/code&gt; および &lt;code&gt;Writer&lt;/code&gt; を埋め込んでいる。
（このときの &lt;code&gt;Reader&lt;/code&gt; および &lt;code&gt;Writer&lt;/code&gt; を「埋め込みインタフェース（embedding interface）」と呼ぶ）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package io

// Implementations must not retain p.
type Reader interface {
	Read(p []byte) (n int, err error)
}

// Implementations must not retain p.
type Writer interface {
	Write(p []byte) (n int, err error)
}

// ReadWriter is the interface that groups the basic Read and Write methods.
type ReadWriter interface {
	Reader
	Writer
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これによって &lt;code&gt;ReadWriter&lt;/code&gt; は &lt;code&gt;Read()&lt;/code&gt; および &lt;code&gt;Write()&lt;/code&gt; を自身の振る舞いのように扱うことができる。
この場合も &lt;code&gt;ReadWriter&lt;/code&gt; は &lt;code&gt;Reader&lt;/code&gt; および &lt;code&gt;Writer&lt;/code&gt; の一種であると見なすことができる。&lt;/p&gt;

&lt;p&gt;同様に &lt;a href=&#34;https://golang.org/pkg/bufio/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;bufio&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;ReadWriter&lt;/code&gt; についても&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package bufio

// ReadWriter stores pointers to a Reader and a Writer.
// It implements io.ReadWriter.
type ReadWriter struct {
	*Reader
	*Writer
}

// NewReadWriter allocates a new ReadWriter that dispatches to r and w.
func NewReadWriter(r *Reader, w *Writer) *ReadWriter {
	return &amp;amp;ReadWriter{r, w}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と実装されていて， &lt;a href=&#34;https://golang.org/pkg/bufio/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;bufio&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;Reader&lt;/code&gt; および &lt;code&gt;Writer&lt;/code&gt; を埋め込み，これらの型の一種として実装されている（このときの &lt;code&gt;Reader&lt;/code&gt; および &lt;code&gt;Writer&lt;/code&gt; を「埋め込みフィールド（embedded field）」または「匿名フィールド（anonymous field）」と呼ぶ）。
なお， &lt;a href=&#34;https://golang.org/pkg/bufio/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;bufio&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;ReadWriter&lt;/code&gt; は &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;ReadWriter&lt;/code&gt; の一種として機能している点にも注目してほしい。&lt;/p&gt;

&lt;h3 id=&#34;関数のオーバーライドと処理の委譲:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;関数のオーバーライドと処理の委譲&lt;/h3&gt;

&lt;p&gt;では，今まで述べたことを使って以下のコードを書いてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type ErrorInfo interface {
	error
	Errno() int
}

type ErrorInfo1 struct{}

func (err *ErrorInfo1) Error() string {
	return fmt.Sprint(&amp;quot;Error Information: &amp;quot;, err.Errno())
}

func (err *ErrorInfo1) Errno() int {
	return 1
}

func Action() error {
	err := &amp;amp;ErrorInfo1{}
	return err
}

func main() {
    if err := Action(); err != nil {
		fmt.Println(err)
        return
	}
    fmt.Println(&amp;quot;Normal End&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; の拡張として &lt;code&gt;ErrorInfo&lt;/code&gt; を定義する。
&lt;code&gt;ErrorInfo&lt;/code&gt; では &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を埋め込み，さらに &lt;code&gt;Errno()&lt;/code&gt; を追加している。
これを実装したのが &lt;code&gt;ErrorInfo1&lt;/code&gt; である。
したがって実行結果は “&lt;code&gt;Error Information: 1&lt;/code&gt;” が出力される。&lt;/p&gt;

&lt;p&gt;次に &lt;code&gt;ErrorInfo1&lt;/code&gt; のバリエーションとして &lt;code&gt;ErrorInfo2&lt;/code&gt; を追加してみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type ErrorInfo interface {
	error
	Errno() int
}

type ErrorInfo1 struct{}

func (err *ErrorInfo1) Error() string {
	return fmt.Sprint(&amp;quot;Error Information: &amp;quot;, err.Errno())
}

func (err *ErrorInfo1) Errno() int {
	return 1
}

type ErrorInfo2 struct {
	ErrorInfo1
}

func (err *ErrorInfo2) Errno() int {
	return 2
}

func Action() error {
	err := &amp;amp;ErrorInfo2{}
	return err
}

func main() {
    if err := Action(); err != nil {
		fmt.Println(err)
        return
	}
    fmt.Println(&amp;quot;Normal End&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ErrorInfo2&lt;/code&gt; では &lt;code&gt;Error()&lt;/code&gt; は &lt;code&gt;ErrorInfo1&lt;/code&gt; のものをそのまま使い回したいが &lt;code&gt;Errno()&lt;/code&gt; では異なる値を出力したい，と考えた。
実行結果として “&lt;code&gt;Error Information: 2&lt;/code&gt;” が出力されることを期待したが，実際には前回と同じ “&lt;code&gt;Error Information: 1&lt;/code&gt;” が出力される。&lt;/p&gt;

&lt;p&gt;埋め込みフィールド（&lt;code&gt;ErrorInfo1&lt;/code&gt;）の関数の名前が埋め込みを行った型（&lt;code&gt;ErrorInfo2&lt;/code&gt;）の名前と衝突する場合は埋め込みを行った型のほうが優先的される&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:ovr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:ovr&#34;&gt;12&lt;/a&gt;&lt;/sup&gt; が，これは C++ や Java などにある仮想関数のオーバーライドとは少し異なる。&lt;/p&gt;

&lt;p&gt;上のコードでは &lt;code&gt;ErrorInfo2&lt;/code&gt; と直接関連付けられた &lt;code&gt;Error()&lt;/code&gt; がないため &lt;code&gt;ErrorInfo1&lt;/code&gt; の &lt;code&gt;Error()&lt;/code&gt; が呼ばれるが，その関数の中で呼ばれる &lt;code&gt;Errno()&lt;/code&gt; は &lt;code&gt;ErrorInfo2&lt;/code&gt; と関連付けられた関数ではなく &lt;code&gt;ErrorInfo1&lt;/code&gt; と関連付けられた関数になる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/delegation.svg&#34;&gt;&lt;img src=&#34;http://text.baldanders.info/images/delegation.svg&#34; alt=&#34;delegation&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://text.baldanders.info/images/delegation.svg&#34;&gt;delegation&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では埋め込みフィールドの関数呼び出しが「委譲」として機能しているためである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:ef&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:ef&#34;&gt;13&lt;/a&gt;&lt;/sup&gt;。
たとえば C++ 言語では virtual 修飾子を付与して仮想関数化することで意図的にオーバーライドできるが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:dlg&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:dlg&#34;&gt;14&lt;/a&gt;&lt;/sup&gt;， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではこのような仕掛けがないため，呼ばれた関数は常に委譲として機能する。&lt;/p&gt;

&lt;p&gt;上の例はクラス構成からして明らかにダメダメなのだが，今回のポイントはサブクラスである &lt;code&gt;ErrorInfo2&lt;/code&gt; から &lt;code&gt;Errno()&lt;/code&gt; 関数を上書きすることでスーパークラス &lt;code&gt;ErrorInfo1&lt;/code&gt; の &lt;code&gt;Error()&lt;/code&gt; 関数の処理を書き換えようとした点にある。
継承&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:ih&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:ih&#34;&gt;15&lt;/a&gt;&lt;/sup&gt; の実装で一番よくあるミスがこの「カプセル化の破れ」で， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は敢えて移譲を強制することでこの手の不具合が発生するのを回避しようとしているように見える。&lt;/p&gt;

&lt;p&gt;また，他の言語では明示的に委譲を実装しようとすると冗長な記述になることが多いが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は埋め込みを使うことでシンプルな記述で委譲を実装できる点がメリットと言える。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20130919023425.htm&#34;&gt;Big Sky :: Go言語でインタフェースの変更がそれ程問題にならない理由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/16acb36e94cfe3b02aa1&#34;&gt;オブジェクト指向言語としてGolangをやろうとするとハマること - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sona-tar/items/2b4b70694fd680f6297c&#34;&gt;オブジェクト指向言語としてGolangをやろうとするとハマる点を整理してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://otiai10.hatenablog.com/entry/2014/01/15/220136&#34;&gt;Go言語に継承は無いんですか【golang】 - DRYな備忘録&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://otiai10.hatenablog.com/entry/2014/06/16/224109&#34;&gt;Go言語でジェネリクスっぽいことがしたいでござる【generics】【golang】 - DRYな備忘録&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:rn&#34;&gt;rune は Unicode 文字の符号点（code point）を示す型で文字そのものを表現する。 string と rune の関係については「&lt;a href=&#34;http://text.baldanders.info/golang/string-and-rune/&#34;&gt;String と Rune&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:rn&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:slc&#34;&gt;slice については「&lt;a href=&#34;http://text.baldanders.info/golang/search-prime-numbers/&#34;&gt;素数探索アルゴリズムで遊ぶ&lt;/a&gt;」で少し紹介している。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:slc&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:call&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の関数呼び出しでは，引数の渡し方は基本的に「値渡し」である。「参照渡し」にするにはポインタを使う。メソッド・レシーバについては値渡しで定義すれば値とポインタ両方のインスタンスに対して関数を呼び出せる。いわゆる value object についてはこれで問題ないだろう。バッファ操作のような内部状態を操作する関数についてはメソッド・レシーバを参照渡しにして定義するとよい。ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のポインタは C/C++ のようなポインタ演算はできないので注意（ポインタ演算をしたい場合は &lt;a href=&#34;https://golang.org/pkg/unsafe/&#34; title=&#34;unsafe - The Go Programming Language&#34;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; パッケージを使う）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:call&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:pr&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;time - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Print&lt;/code&gt; などでは引数の型が &lt;code&gt;String()&lt;/code&gt; を持っていることを期待し，この関数の出力結果をデフォルト書式にしている。したがって &lt;code&gt;fmt.Println(vertex.String())&lt;/code&gt; と &lt;code&gt;fmt.Println(vertex)&lt;/code&gt; は同じ結果になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:pr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:mt&#34;&gt;他にも基本型や他パッケージで定義されている型に関数を追加することはできない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:mt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:cls&#34;&gt;クラスは名前と属性と操作の3つの要素で構成されている。名前は他クラスと識別できるものを1個。属性と操作は0個以上存在する。 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では空のフィールドの &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; を定義することにより0個の属性を持つクラスを構成できる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:cls&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:c1&#34;&gt;言わずもがなだが，サブクラスから見たスーパークラスが「汎化」でその逆が「特化」である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:c1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:c2&#34;&gt;関連は更に集約と複合に分類できるが今回は踏み込まない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:c2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:er1&#34;&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は組み込み型なので，実際にこのような定義が標準パッケージにあるわけではない。 &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; について詳しくは「&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:er1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:dt&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では Java の implement のような継承を明示するキーワードはない。記述された振る舞いからクラス関係を決定する方法を「&lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_typing&#34;&gt;ダック・タイピング（duck typing）&lt;/a&gt;」と呼ぶ。ダック・タイピングの由来は「&lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_test&#34;&gt;ダック・テスト（duck test）&lt;/a&gt;」だそうで，ダック・テストとは “If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.” と帰納法的に対象を推測する手法を指すらしい。ダック・タイピングのメリットのひとつは多重継承で発生する様々な問題（名前の衝突や菱形継承など）を気にする必要がない点である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:dt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:if&#34;&gt;たとえば &lt;code&gt;interface{}&lt;/code&gt; と記述すればあらゆる型を含むことになる。これを利用して &lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;time - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Print&lt;/code&gt; は &lt;code&gt;func Print(a ...interface{}) (n int, err error) { ... }&lt;/code&gt; と定義されている。ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;にはいわゆる&lt;a href=&#34;https://golang.org/doc/faq#generics&#34;&gt;「総称型」はサポートされていない&lt;/a&gt;。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:if&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:ovr&#34;&gt;複数の型を埋め込んでいる場合，埋め込みフィールド間で名前が衝突しているフィールドや関数を使おうとするとコンパイルエラーになる。この場合は &lt;code&gt;err.ErrorInfo1.Error()&lt;/code&gt; のように型を明示して回避できる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:ovr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:ef&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;的には埋め込みフィールドはフィールドのバリエーションのひとつにすぎないため，動作も通常のフィールドが持つ関数を呼び出した場合と変わらない。そういう意味では構造体への埋め込みは，見かけ上は「is-a 関係」でも，実質的には「has-a 関係」に近いと言えるかもしれない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:ef&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:dlg&#34;&gt;逆に Java では関数は常に仮想関数として機能しオーバーライドされる可能性がある。これを抑止するためには final 修飾子を付加する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:dlg&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:ih&#34;&gt;ここで言う継承は設計時の「汎化・特化」のことではなく，言語機能などを使った実装上の継承のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:ih&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Git.io から短縮 URL を取得するコード - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/get-shortened-url-from-gitio/" />
		<id>tag:text.Baldanders.info,2015-11-26:/golang/get-shortened-url-from-gitio/</id>
		<published>2015-11-26T20:29:30+09:00</published>
		<updated>2016-02-14T19:26:03+09:00</updated>
		<summary>これって curl で書けるんなら Go 言語で表現できるんじゃね？</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/042751d98e315e4e3382&#34;&gt;Git.io 短縮 URL を golang コードで取得してみる - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&#34;git-io-で短縮-url-が取得できるらしい:0223b5e2f12da4589f164146964cba22&#34;&gt;Git.io で短縮 URL が取得できるらしい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sotayamashita/items/1cf05f2a2be3d6fb3388&#34;&gt;Git・Githubに隠された便利な機能 | GitHub Cheat Sheet（日本語訳） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを読んでたら後ろの方に &lt;a href=&#34;http://git.io/&#34; title=&#34;git.io&#34;&gt;Git.io&lt;/a&gt; の話が出ていた。
このサイトで短縮 URL を生成できるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/985-git-io-github-url-shortener&#34;&gt;Git.io: GitHub URL Shortener&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API が &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; で掲載されていて，例えば私の &lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;https://github.com/spiegel-im-spiegel&lt;/a&gt; なら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -i &amp;quot;https://git.io&amp;quot; -F &amp;quot;url=https://github.com/spiegel-im-spiegel&amp;quot;
HTTP/1.1 201 Created
Server: Cowboy
Connection: keep-alive
Date: Sat, 08 Aug 2015 02:42:16 GMT
Status: 201 Created
Content-Type: text/html;charset=utf-8
Location: http://git.io/vOj52
Content-Length: 37
X-Xss-Protection: 1; mode=block
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Runtime: 0.210952
X-Node: 871d903e-a8e0-46ff-a96f-ef424385e5ed
X-Revision: b1d9ce07ccb700fc90398edafd397beb8d3bd772
Via: 1.1 vegur

https://github.com/spiegel-im-spiegel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てな感じで，ヘッダの Location 要素に短縮 URL が返ってくる仕組みらしい。
って，これって &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; で書けるんなら &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で表現できるんじゃね？&lt;/p&gt;

&lt;h2 id=&#34;curl-as-dsl:0223b5e2f12da4589f164146964cba22&#34;&gt;cURL as DSL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34;&gt;cURL as DSL — cURL as DSL 1.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.shibu.jp/article/115602749.html&#34;&gt;Shibu&amp;rsquo;s Diary: cURL as DSLとは何だったのか。あるいは細かすぎて伝わらないcURL as DSL。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; とは &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; の構文を任意のコード&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0223b5e2f12da4589f164146964cba22:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0223b5e2f12da4589f164146964cba22:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; に変換してくれるもので，どういうことかというと「&lt;a href=&#34;http://qiita.com/Hiraku/items/dfda2f8a5353b0742271&#34;&gt;Web API は curl で表現すればいいんじゃね？&lt;/a&gt;」ということらしい。&lt;/p&gt;

&lt;h2 id=&#34;さっそく-curl-を-go-言語に変換してみる:0223b5e2f12da4589f164146964cba22&#34;&gt;さっそく curl を Go 言語に変換してみる&lt;/h2&gt;

&lt;p&gt;では早速，上述の curl コマンドを &lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; を使って &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に変換してみる（ただし &lt;code&gt;-i&lt;/code&gt; オプションは付けない）。
結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;mime/multipart&amp;quot;
	&amp;quot;net/http&amp;quot;
)

func main() {
	var buffer bytes.Buffer
	writer := multipart.NewWriter(&amp;amp;buffer)
	writer.WriteField(&amp;quot;url&amp;quot;, &amp;quot;https://github.com/spiegel-im-spiegel&amp;quot;)
	writer.Close()

	resp, err := http.Post(&amp;quot;https://git.io&amp;quot;, &amp;quot;multipart/form-data; boundary=&amp;quot;+writer.Boundary(), &amp;amp;buffer)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	log.Print(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力のみちょっと弄って&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;mime/multipart&amp;quot;
	&amp;quot;net/http&amp;quot;
)

func main() {
	var buffer bytes.Buffer
	writer := multipart.NewWriter(&amp;amp;buffer)
	writer.WriteField(&amp;quot;url&amp;quot;, &amp;quot;https://github.com/spiegel-im-spiegel&amp;quot;)
	writer.Close()

	resp, err := http.Post(&amp;quot;https://git.io&amp;quot;, &amp;quot;multipart/form-data; boundary=&amp;quot;+writer.Boundary(), &amp;amp;buffer)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	log.Println(&amp;quot;  Status: &amp;quot;, resp.Header.Get(&amp;quot;Status&amp;quot;))
	log.Println(&amp;quot;Location: &amp;quot;, resp.Header.Get(&amp;quot;Location&amp;quot;))
	log.Println(&amp;quot;    Body: &amp;quot;, string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;go run gitio.go
2015/08/08 12:00:00   Status: 201 Created
2015/08/08 12:00:00 Location: http://git.io/vOj52
2015/08/08 12:00:00     Body: https://github.com/spiegel-im-spiegel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり，めでたく短縮 URL が取得できた。&lt;/p&gt;

&lt;p&gt;ちなみに最初の &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; コマンドの &lt;code&gt;-F&lt;/code&gt; を &lt;code&gt;-d&lt;/code&gt; に替えて &lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; にかけると&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0223b5e2f12da4589f164146964cba22:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0223b5e2f12da4589f164146964cba22:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
	&amp;quot;net/url&amp;quot;
)

func main() {
	values := url.Values{
		&amp;quot;url&amp;quot;: {&amp;quot;https://github.com/spiegel-im-spiegel&amp;quot;},
	}

	resp, err := http.PostForm(&amp;quot;https://git.io&amp;quot;, values)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	log.Print(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように変換される。
&lt;a href=&#34;https://golang.org/pkg/net/http/&#34; title=&#34;http - The Go Programming Language&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Post()&lt;/code&gt; 関数から &lt;a href=&#34;https://golang.org/pkg/net/http/&#34; title=&#34;http - The Go Programming Language&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;PostForm()&lt;/code&gt; 関数に替わってかなりコードがすっきりした。
今回のような単純な request ならこちらの方がいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;ついでにパッケージも作ってみた:0223b5e2f12da4589f164146964cba22&#34;&gt;ついでにパッケージも作ってみた&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gitioapi&#34;&gt;spiegel-im-spiegel/gitioapi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを称して「他人の褌で相撲を取る」という&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0223b5e2f12da4589f164146964cba22:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0223b5e2f12da4589f164146964cba22:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
なるほど。
こうやって API を実装していくんだね。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:0223b5e2f12da4589f164146964cba22&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:0223b5e2f12da4589f164146964cba22:a&#34;&gt;今のところは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のほかに Python3, PHP, JavaScript (node.js/XMLHttpRequest), Java, Objective-C (NSURL_Session/NSURLConnection), Vim Script (WebAPI-vim) に対応している。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0223b5e2f12da4589f164146964cba22:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:0223b5e2f12da4589f164146964cba22:b&#34;&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/042751d98e315e4e3382&#34;&gt;初出の記事&lt;/a&gt;のコメントで &lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; の作者の方に教えていただいた。感謝！
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0223b5e2f12da4589f164146964cba22:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:0223b5e2f12da4589f164146964cba22:c&#34;&gt;実はジェネレータで生成したコードの著作権は誰に帰属するのか，とかいろいろ思うところはあるのだけど，それはまた別の機会に。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0223b5e2f12da4589f164146964cba22:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>プログラミング言語との付き合い方 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/programming-language/" />
		<id>tag:text.Baldanders.info,2015-11-17:/remark/2015/programming-language/</id>
		<published>2015-11-17T21:52:50+09:00</published>
		<updated>2016-02-18T12:56:03+09:00</updated>
		<summary>こういう話は好きなので便乗してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rentwi.textfile.org/?666213569055166464s&#34;&gt;考えてみると結城はC, Perl, Javaの本は書いたけれど&amp;hellip; - 結城浩の連ツイ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今朝見かけたこれ。
こういう話は好きなので便乗してみる。&lt;/p&gt;

&lt;p&gt;ちなみに，結城浩さんの通称「デザパタ本」はずい分昔に買っている。
お世話になってます。&lt;/p&gt;

&lt;h2 id=&#34;プログラミング言語の-母国語:79bafae369a776b9f3fc1a35fedebca1&#34;&gt;プログラミング言語の「母国語」&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;プログラミング言語との付き合い方というのはいろいろあってですね。自分の母国語という言語はある。それから現在学んでいる最中の言語というのもある。そして、仕事用の言語やら、他の人とのコミュニケーション用言語というのもある。そのあたりは、自然言語とちょっと似ている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://rentwi.textfile.org/?666213569055166464s&#34;&gt;考えてみると結城はC, Perl, Javaの本は書いたけれど...&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;個人的に母国語と言えるのはアセンブラとC言語。
私の場合はコードを脳内でインストラクションに翻訳する。
手続き型の言語ならこの「翻訳」をほとんど無意識でできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:79bafae369a776b9f3fc1a35fedebca1:0&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:79bafae369a776b9f3fc1a35fedebca1:0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
だから手続き型の言語であれば知らない言語でも見ればだいたい理解できる。&lt;/p&gt;

&lt;p&gt;逆に，関数型のような非手続き型言語はあまり得意ではないのだが，簡単なものであれば手続き型に翻訳できるので，簡単なものを組み合わせて考えることで，まぁ何とか理解することはできる。&lt;/p&gt;

&lt;h3 id=&#34;ちまりまわるつ:79bafae369a776b9f3fc1a35fedebca1&#34;&gt;ちまりまわるつ&lt;/h3&gt;

&lt;p&gt;そういえば，竹本泉さんの作品に『ちまりまわるつ』シリーズというのがある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:79bafae369a776b9f3fc1a35fedebca1:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:79bafae369a776b9f3fc1a35fedebca1:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
このシリーズの世界では「魔法」が科学的（？）に体系化されていて，工場で生産できるようになっている。なので，人力（？）で魔法を使う「魔法使い」は（工場で生産できない高度な魔法を使うことのできる一部の大魔法使いを除いては）古臭い職業として子供たちからは敬遠されている。
魔法使い達は能力でランク分けされていて，低ランクの魔法使いは簡単な呪文で簡単な魔法しか使えない。&lt;/p&gt;

&lt;p&gt;でもここからが竹本泉作品らしいところで，簡単な呪文しか使えない魔法使いも呪文を組み合わせることで高度な魔法を使うことができるのだ（ただし高度な魔法は制御が難しいので，ふつうは使わせてもらえない）。
プログラムに例えるなら，高級言語で1行で書けるプログラムをアセンブラで数十ステップで書くような感じだと思えばよい。&lt;/p&gt;

&lt;p&gt;こういう世界設定を少女漫画でさらっと描いてしまうところが竹本泉さんの凄いところである。&lt;/p&gt;

&lt;h3 id=&#34;目的別の言語:79bafae369a776b9f3fc1a35fedebca1&#34;&gt;目的別の言語&lt;/h3&gt;

&lt;p&gt;話が逸れた。&lt;/p&gt;

&lt;p&gt;そういうわけなので個人的に「学んでいる最中の言語」というのはない。
見て理解できるかできないか。
いや，ぺーぺーの新人の頃はアセンブラやC言語を必死こいて学んでいたが，一度基礎ができればあとは全部「応用編」なのである。
そういう意味じゃ「今現在学んでない言語なんかない」とも言えるか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:79bafae369a776b9f3fc1a35fedebca1:a1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:79bafae369a776b9f3fc1a35fedebca1:a1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:79bafae369a776b9f3fc1a35fedebca1:a2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:79bafae369a776b9f3fc1a35fedebca1:a2&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;私は職業プログラマなので当然「仕事用の言語」というのは存在するが，「コミュニケーション用言語」というのはないな。
『数学ガール』冒頭のミルカさんの登場シーンはなかなかインパクトがあるが，あんな感じだろうか。&lt;/p&gt;

&lt;p&gt;プログラマにとって最も信頼できる言葉は「動くコード」なので，ある意味で「仕事用の言語」が「コミュニケーション用言語」と言えるかもしれない。
ただ，職業プログラマは非プログラマとも話ができないといけない。
というか，大抵の顧客はそう。
顧客の「言語化されない意図」をいかに聞き取れるかが重要。
ホンマ「コミュニケーション用言語」なるものがあるなら欲しいよ。&lt;/p&gt;

&lt;p&gt;あぁでも，&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000869.shtml&#34;&gt;要求開発&lt;/a&gt;で使う「概念モデリング」は「コミュニケーション用言語」と言えなくもない？&lt;/p&gt;

&lt;h2 id=&#34;言語を巡る愛憎:79bafae369a776b9f3fc1a35fedebca1&#34;&gt;言語を巡る愛憎&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;自然言語と同じようにプログラミング言語を使う人（要はプログラマ）には、その言語に対する愛情がこもる（愛憎がこもる）。なので、エンジニアリングや効率の話題と思っているのにいつのまにか忠誠心や貢献度みたいな話になることも。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://rentwi.textfile.org/?666213569055166464s&#34;&gt;考えてみると結城はC, Perl, Javaの本は書いたけれど...&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;仕事でプログラミングを行う際に言語を選べることはほとんどない。
顧客が指定してくることもあるし（顧客がコード資産を持っている），プロジェクト管理者が指定してくることもある（すでにある資産を使おうとする）。
そうじゃない場合でも要求と予算と期間とプロジェクトの面子によって（つまりそれを使うメリットとか関係なしに）言語が決まってしまう。&lt;/p&gt;

&lt;p&gt;もし，そういうのが一切ないのなら，今なら &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;か JavaScript/&lt;a href=&#34;http://electron.atom.io/&#34; title=&#34;Electron&#34;&gt;Electron&lt;/a&gt; がいいなぁ。
これらで十分だよね。&lt;/p&gt;

&lt;p&gt;一時期は Ruby も好きだったが，きれいさっぱり忘れてしまった。
今では Ruby の最新バージョンがいくつかさえ知らない。
なんか Rails 以降，凄い面倒くさいイメージがあるんだよね。
ある機能を Ruby で実装した記事を見かけたら，同じ機能を他の言語でもっと簡単にできないか，つい探してしまう。
こういうのが「宗教的」って言われるんだろうな，きっと（笑）&lt;/p&gt;

&lt;p&gt;まぁ，でも，上で書いたように仕事で言語を選べることはほとんどないので，「グダグダ言わずにコード書け」って感じだけど。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【12月21日 追記】&lt;/strong&gt;
フィードバックで Python について言及があったので。
Python は Linux 等では実質的に（少なくとも Ruby よりは）標準言語のようになっているし，資産も豊富なのでちゃんと覚えなきゃなぁ，とは思ってる。
しかし構文にインデントが必須な言語構造はどうしても慣れない。
同じ理由で Haskell や CoffeeScript とかも馴染めない。&lt;/p&gt;

&lt;p&gt;プログラムコードをもっと human-understandable に，という考え方は分からなくもないけど，それなら &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のようにフォーマッタやドキュメントフレームワークを標準で用意するほうが賢いと思う。
私はもうプログラミングで（タブだの全角空白だのも含めた）空白文字に煩わされたくない。&lt;/p&gt;

&lt;p&gt;とはいえ，こういうのは「慣れ」の問題なので，仕事でやれと言われれば喜んでやりますよ。&lt;/p&gt;

&lt;h2 id=&#34;ひとつのプログラミング言語に縛られることの恐さ:79bafae369a776b9f3fc1a35fedebca1&#34;&gt;ひとつのプログラミング言語に縛られることの恐さ&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;一つの技術に縛られることの恐さは、エンジニアなら誰でも知っている。では一つのプログラミング言語に縛られることの恐さは知っているか。一つのプログラミング言語がパーフェクトなことはない。時代が変われば要請も変わる。リソース配分は時々刻々変わる。そんな中で何にコミットするか。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://rentwi.textfile.org/?666213569055166464s&#34;&gt;考えてみると結城はC, Perl, Javaの本は書いたけれど...&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;手続き型言語の弱点は「ノイマン型コンピュータ」に最適化されていることだ。&lt;/p&gt;

&lt;p&gt;ノイマン型コンピュータの構造はプロセッサとメモリが分かれているのが特徴で&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:79bafae369a776b9f3fc1a35fedebca1:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:79bafae369a776b9f3fc1a35fedebca1:b&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;，メモリから命令を順番にプロセッサにフェッチして実行していく。&lt;/p&gt;

&lt;p&gt;もちろん「非ノイマン型コンピュータ」というのもある。
典型的なのは，いわゆるニューロチップである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35073012/&#34;&gt;脳を模したチップ「TrueNorth」でコンピューティング革命を模索するIBM - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こういうタイプのコンピュータは（ノイマン型コンピュータで言うところの）プロセッサとメモリがセットでひとつの素子になっているのが特徴で，しかも素子同士はお互いに非同期で動く。
こういうのが本気で市場に台頭してきたら私のようなロートル・エンジニアはお払い箱だ。&lt;/p&gt;

&lt;h2 id=&#34;若い人が正しい:79bafae369a776b9f3fc1a35fedebca1&#34;&gt;若い人が正しい&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;いつの時代でも、若い人は自由だ。何でも選べる。何でも言える。ときにはバカにされるかもしれない。わかってないよと侮られるかもしれない。でも、ほとんどの場合、若い人が正しい。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://rentwi.textfile.org/?666213569055166464s&#34;&gt;考えてみると結城はC, Perl, Javaの本は書いたけれど...&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;先のことは誰にもわからない。
特に今の時代は。
だから「より多くの未来を持っている人」が正しいと言える。
私のように人生の残り時間を勘定している人ではない。&lt;/p&gt;

&lt;p&gt;願わくば「何でも選べる。何でも言える」未来を引き渡したいものである。&lt;/p&gt;

&lt;h2 id=&#34;おまけ-tensorflow-に関するブックマーク:79bafae369a776b9f3fc1a35fedebca1&#34;&gt;【おまけ】 TensorFlow に関するブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;#feedback&#34;&gt;フィードバック&lt;/a&gt;で &lt;a href=&#34;http://tensorflow.org/&#34; title=&#34;TensorFlow is an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; について言及があったので，ついでに。&lt;/p&gt;

&lt;p&gt;（この項は「&lt;a href=&#34;http://text.baldanders.info/remark/2016/02/tensorflow/&#34;&gt;TensorFlow に関するブックマーク&lt;/a&gt;」に移動しました）&lt;/p&gt;

&lt;h2 id=&#34;参考図書:79bafae369a776b9f3fc1a35fedebca1&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EYXMA9I/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41ETMZ7i9qL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EYXMA9I/baldandersinf-22/&#34;&gt;数学ガール&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ株式会社 2014-02-14&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1CM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／フェルマーの最終定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1D6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1D6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ゲーデルの不完全性定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;「数学ガール」シリーズ第1作目。ミルカさん衝撃の登場から分割数まで。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-06-06&#34;&gt;2015/06/06&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:79bafae369a776b9f3fc1a35fedebca1:0&#34;&gt;たとえば，C言語では「ポインタ」の概念でよく躓くと言われているが，インストラクションで考えれば実にシンプル。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:79bafae369a776b9f3fc1a35fedebca1:0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:79bafae369a776b9f3fc1a35fedebca1:1&#34;&gt;多分もう絶版。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:79bafae369a776b9f3fc1a35fedebca1:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:79bafae369a776b9f3fc1a35fedebca1:a1&#34;&gt;評価を中断している言語はある。 Erlang とか Scala とか Haskell とか。仕事で絡むようなことがあれば是非やりたい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:79bafae369a776b9f3fc1a35fedebca1:a1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:79bafae369a776b9f3fc1a35fedebca1:a2&#34;&gt;そう考えると，私にとって &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はちょっと例外的かも。今のところ身近に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を使った仕事がないということもあるが，仕事抜きで完全に&lt;a href=&#34;http://text.baldanders.info/golang&#34;&gt;「遊び」でやってる&lt;/a&gt;。はっきり言って C/C++ や初期の Java 以来「これでなに作ろうかな」って思わせる言語に久しぶりに出会った感じ。もっとも，今は仕事が忙しすぎて全然かまってあげられないのだが orz
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:79bafae369a776b9f3fc1a35fedebca1:a2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:79bafae369a776b9f3fc1a35fedebca1:b&#34;&gt;キャッシュやパイプライン等の話はとりあえずチャイしてね。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:79bafae369a776b9f3fc1a35fedebca1:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>制約は構造を生む - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/the-structure-from-restriction/" />
		<id>tag:text.Baldanders.info,2015-09-30:/remark/2015/the-structure-from-restriction/</id>
		<published>2015-09-30T20:33:14+09:00</published>
		<updated>2015-09-30T20:33:14+09:00</updated>
		<summary>制約は programmable である</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;「制約は構造を生む」というのは確か結城浩さんの『数学ガール』の中にあったフレーズだと思うが，私はこの言葉が好きである。
ただし，私の中ではこの言葉に続きがあって，それは「制約は programmable である」というものだ。&lt;/p&gt;

&lt;p&gt;「言葉」というのは面白いもので，表現のためのすばらしい手段でありながら，それ自体が表現に制約を加える。
自然言語の場合，その「制約」が硬直化するのを防ぐため自己を改変していく&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
しかしプログラミング言語の場合は「仕様」であり「ルール」であるため自己改変がしづらい面がある。
つまり，どんなプログラミング言語にも「賞味期限」があるのだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000529.shtml&#34;&gt;前にも書いた&lt;/a&gt;けど，私は職業プログラマなので，プログラミングが好きでも嫌いでもない。
私から見れば「プログラミングが好き」というのは「鋸が好き」と言ってるのと大差ない。
プログラミング言語も同様で，基本的にはどんな言語にも対応できる自信はあるが，特定の言語が好きというのはない。&lt;/p&gt;

&lt;p&gt;それでも「これで何かを作ってみたい」と思う言語はいくつかあって，私の場合はそれが C/C++ や Java そして Go 言語である。
どういうわけかスクリプト言語にはあまり食指は向かなかった。
これはたぶん後付けの理由だけど，スクリプト言語というのはひたすら対象を「記述」しているだけで，あまり「作ってる」実感がない。&lt;/p&gt;

&lt;p&gt;先日，ついカッとなって「&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;」という記事を書いたが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，書いてて思い出したのが，まさに「制約は構造を生む」というフレーズだった。&lt;/p&gt;

&lt;p&gt;いわゆる「オブジェクト指向言語」が台頭しだした頃， C++ や Java でなかなか馴染めなかったのが「例外処理」である。
「&lt;a href=&#34;http://www.kaoriya.net/blog/2014/04/17/&#34;&gt;または私は如何にして例外するのを止めて golang を愛するようになったか&lt;/a&gt;」で「Java の例外が発生しうるメソッドの呼び出しは分岐を隠蔽・内包している」と指摘されているように，まさにこれは呼び出した関数から見て正体不明の &lt;code&gt;longjump&lt;/code&gt; をかまされるのとほとんど同じであり&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，「そんな危ないもん使えるか！」というのが最初の印象だった。
まぁ，もうすっかり馴らされたけどね。&lt;/p&gt;

&lt;p&gt;かつての私のように，例外になじめない人は結構いるようで，中には呼び出す関数ひとつひとつを &lt;code&gt;try-catch&lt;/code&gt; で囲ってる人とかもいて，「それって例外で実装する意味あるのか？」って感じである。
で，結局，関数の返値専用のオブジェクトを作って，返ってくるオブジェクトの状態を見てエラー・ハンドリングしたり。
それって CDD (Context-Driven Design) の萌芽かも（笑）&lt;/p&gt;

&lt;p&gt;Go 言語のエラー・ハンドリングと「古き良き」例外処理のどちらが優れているのかは一概に言えないと思うが，個人的には Go 言語のやり方に慣れてしまったら例外処理には戻れない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
今まで触ってみた感触だけど，おそらく Go 言語の肝は &lt;code&gt;return&lt;/code&gt; にあると思う。
Go 言語の &lt;code&gt;return&lt;/code&gt; をどう記述するか（あるいはしないか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;）がコードの構造を決める鍵になっている。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;逆に言うと自己改変しなくなった言語は緩慢な死を迎える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;後悔はしていない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;今はもう存在しないと思うが，初期の C++ の実装のいくつかは例外を &lt;code&gt;longjump&lt;/code&gt; で実装していた。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;いや，もちろん仕事ならやりますよ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;記述しないことは記述することの一種である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ddb5603ffc2de5a81cdadbb2d23d8d85:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
