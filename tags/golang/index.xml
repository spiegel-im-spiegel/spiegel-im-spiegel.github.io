<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Golang - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/golang/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/golang/index.xml" />
	<id>tag:text.Baldanders.info,2018-12-17:/tags</id>
	<updated>2018-12-17T22:45:24+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.53</generator>

	
	<entry>
		<title>2018年お気に入り ATOM パッケージ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/12/favorite-atom-packages-2018/" />
		<id>tag:text.Baldanders.info,2018-12-17:/remark/2018/12/favorite-atom-packages-2018/</id>
		<published>2018-12-17T22:45:24+09:00</published>
		<updated>2018-12-18T08:08:33+09:00</updated>
		<summary>年末なので ATOM エディタの整理を。 </summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;年末なので &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの整理を。
といっても最近はあまりいじるところがないけど。&lt;/p&gt;

&lt;h2 id=&#34;gocode-を巡るあれこれ&#34;&gt;gocode を巡るあれこれ&lt;/h2&gt;

&lt;p&gt;本当のことを言うと &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援パッケージを LSP (Language Server Protocol) ベースにしたいんだけど，最近流行りの &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/golsp&#34; title=&#34;golsp - GoDoc&#34;&gt;golsp&lt;/a&gt; や &lt;a href=&#34;https://github.com/saibing/bingo&#34; title=&#34;saibing/bingo: Bingo is a Go language server that speaks Language Server Protocol.&#34;&gt;bingo&lt;/a&gt; を扱えるパッケージはなさそう。&lt;/p&gt;

&lt;p&gt;以前からある &lt;a href=&#34;https://github.com/sourcegraph/go-langserver&#34; title=&#34;sourcegraph/go-langserver: Go language server to add Go support to editors and other tools that use the Language Server Protocol (LSP)&#34;&gt;go-langserver&lt;/a&gt; はバックエンドに gocode を利用しているのだが（今は違う？），本家の &lt;a href=&#34;https://github.com/nsf/gocode&#34; title=&#34;nsf/gocode: An autocompletion daemon for the Go programming language&#34;&gt;nsf/gocode&lt;/a&gt; が &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.10 以降で組み込まれたビルドキャッシュ機能に追従できず fork が乱立して混沌としている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gc1&#34;&gt;&lt;a href=&#34;#fn:gc1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;結局 &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援パッケージを利用するなら &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; 一択で&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; をインストール，またはインストール済みであることを確認する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; をインストールする。この際，サブパッケージおよび各種支援ツールが自動インストールされるのを確認する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stamblerre/gocode&#34; title=&#34;stamblerre/gocode: An autocompletion daemon for the Go programming language&#34;&gt;stamblerre/gocode&lt;/a&gt; を &lt;code&gt;go get&lt;/code&gt; コマンドで上書きインストールする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gp1&#34;&gt;&lt;a href=&#34;#fn:gp1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という手順になるだろう。
&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/golsp&#34; title=&#34;golsp - GoDoc&#34;&gt;golsp&lt;/a&gt; や &lt;a href=&#34;https://github.com/saibing/bingo&#34; title=&#34;saibing/bingo: Bingo is a Go language server that speaks Language Server Protocol.&#34;&gt;bingo&lt;/a&gt; が使えれば将来的に楽なんだけどねぇ。&lt;/p&gt;

&lt;p&gt;それ以前に 1.12 で&lt;a href=&#34;http://text.baldanders.info/golang/go-module-aware-mode/&#34; title=&#34;モジュール対応モードへの移行を検討する&#34;&gt;モジュール対応モード&lt;/a&gt;に本格的に移行した場合に &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; が追従できるかどうかなんだけど。
最悪の場合は &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt; に乗り換えるか（vim は若い頃のデスマーチなトラウマがフラッシュバックするので使いたくない）。&lt;/p&gt;

&lt;h2 id=&#34;atom-ide-ui-と連携する-document-outline&#34;&gt;&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; と連携する &lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;今まで markdown テキストのアウトライン表示は &lt;a href=&#34;https://atom.io/packages/nav-panel-plus&#34;&gt;nav-panel-plus&lt;/a&gt; を使ってたんだけど &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; に対応していないのが欠点だった。
で，色々探してみたら &lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt; が良さげである。
&lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt; の設定で “show by default” 項目を無効にしておけば &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; のアウトライン表示のタブだけが表示される。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt; は以下の構造化テキストに対応している&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markdown (Commonmark)&lt;/li&gt;
&lt;li&gt;LaTeX&lt;/li&gt;
&lt;li&gt;ReStructuredText&lt;/li&gt;
&lt;li&gt;AsciiDoc&lt;/li&gt;
&lt;li&gt;Knitr&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;らしいんだけど LaTeX ファイルのアウトラインが上手く表示されないんだよなぁ。
うーむ。&lt;/p&gt;

&lt;p&gt;他にも &lt;a href=&#34;https://atom.io/packages/ide-html&#34;&gt;ide-html&lt;/a&gt; で HTML を，&lt;a href=&#34;https://atom.io/packages/ide-css&#34;&gt;ide-css&lt;/a&gt; で CSS を，&lt;a href=&#34;https://atom.io/packages/ide-yaml&#34;&gt;ide-yaml&lt;/a&gt; で YAML を，&lt;a href=&#34;https://atom.io/packages/ide-json&#34;&gt;ide-json&lt;/a&gt; で JSON を扱える。
これでメジャーな構造化テキストは大体扱えるかな&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:om1&#34;&gt;&lt;a href=&#34;#fn:om1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34;&gt;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/plantuml-with-atom/&#34;&gt;ATOM エディタを使った作図（PlantUML 編）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:gc1&#34;&gt;gocode を巡るゴタゴタについては「&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20181217000056.htm&#34;&gt;gocode やめます(そして Language Server へ)&lt;/a&gt;」が参考になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gc1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gp1&#34;&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; では &lt;a href=&#34;https://github.com/mdempsky/gocode&#34; title=&#34;mdempsky/gocode: An autocompletion daemon for the Go programming language&#34;&gt;mdempsky/gocode&lt;/a&gt; が自動インストールされるが， &lt;a href=&#34;https://github.com/mdempsky/gocode&#34; title=&#34;mdempsky/gocode: An autocompletion daemon for the Go programming language&#34;&gt;mdempsky/gocode&lt;/a&gt; は&lt;a href=&#34;http://text.baldanders.info/golang/go-module-aware-mode/&#34; title=&#34;モジュール対応モードへの移行を検討する&#34;&gt;モジュール対応モード&lt;/a&gt;に対応していないらしいので &lt;a href=&#34;https://github.com/stamblerre/gocode&#34; title=&#34;stamblerre/gocode: An autocompletion daemon for the Go programming language&#34;&gt;stamblerre/gocode&lt;/a&gt; を手動でインストールする必要がある。実は &lt;a href=&#34;https://atom.io/packages/ide-go&#34;&gt;ide-go&lt;/a&gt; で &lt;a href=&#34;https://github.com/sourcegraph/go-langserver&#34; title=&#34;sourcegraph/go-langserver: Go language server to add Go support to editors and other tools that use the Language Server Protocol (LSP)&#34;&gt;go-langserver&lt;/a&gt; を駆動させていたのだが &lt;a href=&#34;https://atom.io/packages/ide-go&#34;&gt;ide-go&lt;/a&gt; 自体が &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; を要求するので意味がなかったっぽい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:om1&#34;&gt;私は使わないが &lt;a href=&#34;https://atom.io/packages/org-mode&#34;&gt;org-mode&lt;/a&gt; パッケージもあるらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:om1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 1.11.4 のリリース - release</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/release/2018/12/go-1_11_4-is-released/" />
		<id>tag:text.Baldanders.info,2018-12-15:/release/2018/12/go-1_11_4-is-released/</id>
		<published>2018-12-15T16:00:33+09:00</published>
		<updated>2018-12-15T16:00:33+09:00</updated>
		<summary>今回はセキュリティアップデートはないが，前回のリリースに間に合わなかった修正が反映されている。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="http://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラの 1.11.4 および 1.10.7 がリリースされた。
今回はセキュリティアップデートはないが，前回のリリースに間に合わなかった修正が反映されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/7LQy56br6Y4&#34;&gt;Go 1.11.4 and Go 1.10.7 are released - Google group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.4+label%3ACherryPickApproved&#34;&gt;Go 1.11.4 milestone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Type alias 周りの修正が多いねぇ。
あと HTTP/2 関連の修正もある。&lt;/p&gt;

&lt;p&gt;アップデートは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 1.11.3 のリリース 【セキュリティ・アップデート】 - release</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/release/2018/12/go-1_11_3-is-released/" />
		<id>tag:text.Baldanders.info,2018-12-14:/release/2018/12/go-1_11_3-is-released/</id>
		<published>2018-12-14T22:10:04+09:00</published>
		<updated>2018-12-15T16:24:47+09:00</updated>
		<summary>3つのインシデントに対して修正が行われている。深刻度は高めで早めのアップデート推奨。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="http://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラの 1.11.3 および 1.10.6 がリリースされた。
今回はセキュリティ・アップデートを含んでいるので必ずアップデートすること。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#%21topic/golang-announce/Kw31K8G7Fi0&#34;&gt;[security] Go 1.11.3 and Go 1.10.6 are released - Google group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.3&#34;&gt;Go 1.11.3 milestone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下の3つのインシデントに対して修正が行われている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;cmd/go: remote command execution during &amp;quot;&lt;code&gt;go get -u&lt;/code&gt;&amp;quot; : The issue is CVE-2018-16873 and Go issue &lt;a href=&#34;https://golang.org/issue/29230&#34;&gt;golang.org/issue/29230&lt;/a&gt;. See the Go issue for details. Thanks to Etienne Stalmans from the Heroku platform security team for discovering and reporting this issue.&lt;/li&gt;
&lt;li&gt;cmd/go: directory traversal in &amp;quot;&lt;code&gt;go get&lt;/code&gt;&amp;quot; via curly braces in import paths : The issue is CVE-2018-16874 and Go issue &lt;a href=&#34;https://golang.org/issue/29231&#34;&gt;golang.org/issue/29231&lt;/a&gt;. See the Go issue for details. Thanks to ztz of Tencent Security Platform for discovering and reporting this issue.&lt;/li&gt;
&lt;li&gt;crypto/x509: CPU denial of service in chain validation : The issue is CVE-2018-16875 and Go issue &lt;a href=&#34;https://golang.org/issue/29233&#34;&gt;golang.org/issue/29233&lt;/a&gt;. See the Go issue for details. Thanks to Netflix for discovering and reporting this issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#%21topic/golang-announce/Kw31K8G7Fi0&#34;&gt;Go 1.11.3 and Go 1.10.6 are released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;想定される影響&#34;&gt;想定される影響&lt;/h2&gt;

&lt;h3 id=&#34;cve-2018-16873-https-nvd-nist-gov-vuln-detail-cve-2018-16873&#34;&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2018-16873&#34;&gt;CVE-2018-16873&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/security/cve/cve-2018-16873&#34;&gt;CVE-2018-16873 - Red Hat Customer Portal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H&lt;/code&gt; (深刻度7.5) :&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基本評価基準&lt;/th&gt;
&lt;th&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;攻撃元区分&lt;/td&gt;
&lt;td&gt;ネットワーク&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;攻撃条件の複雑さ&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;必要な特権レベル&lt;/td&gt;
&lt;td&gt;不要&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ユーザ関与レベル&lt;/td&gt;
&lt;td&gt;要&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;スコープ&lt;/td&gt;
&lt;td&gt;変更なし&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;機密性への影響&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;完全性への影響&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;可用性への影響&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;cve-2018-16874-https-nvd-nist-gov-vuln-detail-cve-2018-16874&#34;&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2018-16874&#34;&gt;CVE-2018-16874&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/security/cve/cve-2018-16874&#34;&gt;CVE-2018-16874 - Red Hat Customer Portal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:N&lt;/code&gt; (深刻度6.8) :&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基本評価基準&lt;/th&gt;
&lt;th&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;攻撃元区分&lt;/td&gt;
&lt;td&gt;ネットワーク&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;攻撃条件の複雑さ&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;必要な特権レベル&lt;/td&gt;
&lt;td&gt;不要&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ユーザ関与レベル&lt;/td&gt;
&lt;td&gt;要&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;スコープ&lt;/td&gt;
&lt;td&gt;変更なし&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;機密性への影響&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;完全性への影響&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;可用性への影響&lt;/td&gt;
&lt;td&gt;なし&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;cve-2018-16875-https-nvd-nist-gov-vuln-detail-cve-2018-16875&#34;&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2018-16875&#34;&gt;CVE-2018-16875&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/security/cve/cve-2018-16875&#34;&gt;CVE-2018-16875 - Red Hat Customer Portal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H&lt;/code&gt; (深刻度5.9) :&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基本評価基準&lt;/th&gt;
&lt;th&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;攻撃元区分&lt;/td&gt;
&lt;td&gt;ネットワーク&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;攻撃条件の複雑さ&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;必要な特権レベル&lt;/td&gt;
&lt;td&gt;不要&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ユーザ関与レベル&lt;/td&gt;
&lt;td&gt;不要&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;スコープ&lt;/td&gt;
&lt;td&gt;変更なし&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;機密性への影響&lt;/td&gt;
&lt;td&gt;なし&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;完全性への影響&lt;/td&gt;
&lt;td&gt;なし&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;可用性への影響&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;

&lt;p&gt;これとは別に “&lt;code&gt;go get github.com/golang/pkg/...&lt;/code&gt;” でコードを再帰的にダウンロードしてしまう問題があるそうで，これは次回の 1.11.4 および Go 1.10.7 で解消されるとのこと。&lt;/p&gt;

&lt;p&gt;アップデートは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>次期 Go 言語で導入される（かもしれない）新しいエラー・ハンドリングについて予習する - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/error-handling-in-go-2/" />
		<id>tag:text.Baldanders.info,2018-11-13:/golang/error-handling-in-go-2/</id>
		<published>2018-11-13T22:48:47+09:00</published>
		<updated>2018-11-13T22:48:47+09:00</updated>
		<summary>総称型なんか後回しにしてこっちを先に実現してほしい。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は「&lt;a href=&#34;http://text.baldanders.info/golang/generics-in-go-2/&#34;&gt;次期 Go 言語で導入される（かもしれない）総称型について予習する&lt;/a&gt;」の続き。&lt;/p&gt;

&lt;p&gt;次期 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で追加される（かもしれない）仕様についてもう一度挙げておこう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;総称型（generics）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-generics-overview.md&#34;&gt;Generics — Problem Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-contracts.md&#34;&gt;Contracts — Draft Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;エラー・ハンドリングに関するもの

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling.md&#34;&gt;Error Handling — Draft Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-error-inspection.md&#34;&gt;Error Inspection — Draft Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-error-printing.md&#34;&gt;Error Printing — Draft Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事ではエラー・ハンドリングについて予習してみる。
はっきり言って私は物凄く期待している。
総称型なんか後回しにしてこっちを先に実現してほしい。&lt;/p&gt;

&lt;p&gt;なお “Go 2” の提案はまだドラフト段階なので大幅に変更になったり場合によっては立ち消えになる可能性もある。
なので，この記事では深いところまで踏み込まずフワっとした説明になるけど，あしからずご了承の程を。&lt;/p&gt;

&lt;h2 id=&#34;check-式-check-expression-と-handle-構文-handle-statement&#34;&gt;Check 式（Check Expression）と Handle 構文（Handle Statement）&lt;/h2&gt;

&lt;p&gt;まずはファイルをコピーする簡単なコマンドを書いてみよう。
ちなみにこれは完全に動くコードである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;copyFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NArg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ErrInvalid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;copyFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この中で&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という記述が多数見られるのが分かると思う。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は C++ や Java で言うところの例外処理の仕組みを持っていない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ec1&#34;&gt;&lt;a href=&#34;#fn:ec1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; ためにこのような記述になるのだが，こうした単純な繰り返しの記述は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;プログラマの間でも不評のようだ。&lt;/p&gt;

&lt;p&gt;これを解消するのが check 式と handle 構文である。&lt;/p&gt;

&lt;p&gt;たとえば，関数の返り値に error を含む場合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;vn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;check 式を使って error を検知し残りの返り値を返す事ができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;vn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;chack&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;検知した error はどうなるかというと直近の handle 構文で指定された処理へ飛ぶ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:hdl1&#34;&gt;&lt;a href=&#34;#fn:hdl1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;handle&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では check と handle を使って先程の &lt;code&gt;copyFile()&lt;/code&gt; 関数を書き直してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;copyFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;handle&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;check&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;check&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;check&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;随分とスッキリした。
&lt;a href=&#34;https://dic.pixiv.net/a/%E3%81%93%E3%81%86%E3%81%8B%E3%81%AF%E3%81%B0%E3%81%A4%E3%81%90%E3%82%93%E3%81%A0%21&#34;&gt;こうかはばつぐんだ！&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check は式なので&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;check&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;check&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;といった書き方もできる。
関数の返り値が error とタプルになっている場合は（いったん変数に流し込んだり）スマートでない記述になっているので，これは嬉しい。&lt;/p&gt;

&lt;p&gt;Handle 構文はいくつでも書くことができる。
たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;files&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;handle&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;process: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// handler A
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;handle&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;attempt %d: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// handler B
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;handle&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;moreWrapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;                    &lt;span class=&#34;c1&#34;&gt;// handler C
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;check&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;something&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// check 1: handler chain C, B, A
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;check&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;somethingElse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// check 2: handler chain A
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように書けるらしい。
Handle 構文の処理はスタック状に積まれていく感じかな。&lt;/p&gt;

&lt;h2 id=&#34;wrapper-interface&#34;&gt;Wrapper interface&lt;/h2&gt;

&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/pkg/os/&#34; title=&#34;os - The Go Programming Language&#34;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.PathError&lt;/code&gt; は以下のように内部に error 情報を持っている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// PathError records an error and the operation and file path that caused it.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PathError&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Op&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PathError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Op&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エラーハンドリングを行う際は，この内部の error を見て原因となるエラー情報を取得することができる。
このような構造になっている error オブジェクトは多そうである。
そこで &lt;a href=&#34;https://golang.org/pkg/errors/&#34; title=&#34;errors - The Go Programming Language&#34;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; パッケージに Wrapper interface を追加することを考える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// A Wrapper is an error implementation
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// wrapping context around another error.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Wrapper&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Unwrap returns the next error in the error chain.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// If there is no next error, Unwrap returns nil.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nf&#34;&gt;Unwrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;error オブジェクトが &lt;code&gt;Unwrap()&lt;/code&gt; 関数を用意していれば，この関数を使って原因となる error オブジェクトを取得できるというわけだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PathError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Unwrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを踏まえて以下の関数も用意する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;As&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Unwrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この &lt;code&gt;As()&lt;/code&gt; 関数は&lt;a href=&#34;http://text.baldanders.info/golang/generics-in-go-2/&#34; title=&#34;次期 Go 言語で導入される（かもしれない）新しいエラー・ハンドリングについて予習する&#34;&gt;総称型&lt;/a&gt; &lt;code&gt;E&lt;/code&gt; を含んでいる点に注目。
これを使えば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;As&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PathError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errno&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;As&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;syscall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Errno&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errno&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;syscall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ENOENT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ファイルが存在しない&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;syscall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ENOTDIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ディレクトリが存在しない&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Errno =&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errno&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;その他の PathError&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;という感じでハンドリングできるだろう。&lt;/p&gt;

&lt;p&gt;ホンマこれ早めに実現しないかなぁ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/error-handling2/&#34;&gt;Error の構造化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;span class=&#34;fa-sm&#34; style=&#34;color:goldenrod;&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/span&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ec1&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の panic は例外処理に似た大域脱出の機能を持っているが，本来はリカバリ不能なエラーや障害が発生した際に迅速にプロセスを終了させるための仕組みなので，例外処理のような使い方をすべきではないとされている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ec1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:hdl1&#34;&gt;直近に handle 構文がない場合には error を吸い込んだまま何もせずにスルーするようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:hdl1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>次期 Go 言語で導入される（かもしれない）総称型について予習する - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/generics-in-go-2/" />
		<id>tag:text.Baldanders.info,2018-11-11:/golang/generics-in-go-2/</id>
		<published>2018-11-11T06:10:48+09:00</published>
		<updated>2018-11-11T15:28:29+09:00</updated>
		<summary>現時点ではまだドラフト案なのでフワっとした説明になるけど，あしからずご了承の程を。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;2018年8月に次期 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で追加される（かもしれない）仕様についてアナウンスがあった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go2draft&#34;&gt;Go 2 Draft Designs - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft.md&#34;&gt;Go 2 Draft Designs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/6wIP3rO6On8&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6wIP3rO6On8&#34;&gt;Go 2 Drafts Announcement - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;“Go 2” といってもメジャー・バージョンが変わるのではなく現行バージョンに対する追加仕様らしい。
したがって後方互換性は確保されているようだ。&lt;/p&gt;

&lt;p&gt;紹介されているドラフト案は大きく2つある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;総称型（generics）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-generics-overview.md&#34;&gt;Generics — Problem Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-contracts.md&#34;&gt;Contracts — Draft Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;エラー・ハンドリングに関するもの

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling.md&#34;&gt;Error Handling — Draft Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-error-inspection.md&#34;&gt;Error Inspection — Draft Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft-error-printing.md&#34;&gt;Error Printing — Draft Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうち今回は総称型について予習してみる。&lt;/p&gt;

&lt;p&gt;なお “Go 2” の提案はまだドラフト段階なので大幅に変更になったり場合によっては立ち消えになる可能性もある。
なので，この記事では深いところまで踏み込まずフワっとした説明になるけど，あしからずご了承の程を。&lt;/p&gt;

&lt;h2 id=&#34;総称型のメリット&#34;&gt;総称型のメリット&lt;/h2&gt;

&lt;p&gt;ソフトウェア・エンジニアには自明だと思うが，まずは復習から。&lt;/p&gt;

&lt;p&gt;具体例として2つの値のうち大きい方を返す関数を考えてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;max(%v, %v) = %v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//Output
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//max(1, 2) = 2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;この関数 &lt;code&gt;max()&lt;/code&gt; は int 型で記述しているが byte 型や float32/float64 型でも関数の中身は全く同じコードになる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float64&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.1&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.2&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;max(%v, %v) = %v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//Output
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//max(1.1, 1.2) = 1.2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ならば，最初から汎化した型で単一のコード記述すれば型ごとに複数のコードを量産しなくてもいんじゃね？ という発想になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:oaoo1&#34;&gt;&lt;a href=&#34;#fn:oaoo1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
これが総称型の原点である。&lt;/p&gt;

&lt;p&gt;たとえば Java で総称型を使うと以下のような記述になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:java1&#34;&gt;&lt;a href=&#34;#fn:java1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; の部分が総称型の定義にあたる。
ちなみに総称型の名前（この場合は &lt;code&gt;T&lt;/code&gt;）はスコープ内で被らなければ任意に指定できる。&lt;/p&gt;

&lt;p&gt;現行版 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;において総称型の不在で割りを食っている典型例のひとつが &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt; パッケージで，基本型の slice のソートだけで以下の型が用意されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sort1&#34;&gt;&lt;a href=&#34;#fn:sort1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Float64Slice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.IntSlice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.StringSlice&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;後方互換性を確保するため，これらの型がなくなることはないだろうけど，総称型が実現すれば内部実装の refactoring が進むかも知れない。&lt;/p&gt;

&lt;p&gt;このように総称型はコンテナ（container; オブジェクトの集合を表現するデータ構造）操作で特に威力を発揮する。
また，現行版 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では総称型を用いずとも interface 型と &lt;a href=&#34;https://golang.org/pkg/reflect/&#34; title=&#34;reflect - The Go Programming Language&#34;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; パッケージを使ってかなりの部分を代替できるが，コード量のコスト高を別にしても，記述の正しさは実行時での評価ではなくコンパイル時に評価して欲しいところである。&lt;/p&gt;

&lt;p&gt;そういうわけで，今までずうっと後回しにされてきたが，総称型を導入できるのであれば是非とも期待したいものである。&lt;/p&gt;

&lt;h2 id=&#34;型パラメータ-type-parameter-と型引数-type-argument&#34;&gt;型パラメータ（Type Parameter）と型引数（Type Argument）&lt;/h2&gt;

&lt;p&gt;次期 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で総称型を導入するために型パラメータおよび型引数の構文を追加するようだ。&lt;/p&gt;

&lt;p&gt;例えば先程の &lt;code&gt;max()&lt;/code&gt; 関数であれば以下のように記述できる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;max(%v, %v) = %v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//Output
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//max(1, 2) = 2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;(type T)&lt;/code&gt; の部分が型パラメータで，これによって総称型を定義している。
既存の語彙だけで構成しているのがポイント（&lt;code&gt;&amp;lt;&lt;/code&gt; や &lt;code&gt;&amp;gt;&lt;/code&gt; は演算子だし &lt;code&gt;[...]&lt;/code&gt; は 配列/slice や map の構文で使われるので避けたのだろう）。&lt;/p&gt;

&lt;p&gt;関数を呼び出す側は型推論によって引数の型が一意に決定するので特別な記述は必要ない。
相変わらず refatoring に優しい言語だよな（笑）&lt;/p&gt;

&lt;p&gt;明示的に型を指定するなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;などと記述する。
&lt;code&gt;(int)&lt;/code&gt; の部分が型引数にあたる。&lt;/p&gt;

&lt;p&gt;型宣言とインスタンス生成でも同様に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;listInt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;などと記述できる。&lt;/p&gt;

&lt;h2 id=&#34;型コントラクト-type-contract&#34;&gt;型コントラクト（Type Contract）&lt;/h2&gt;

&lt;p&gt;先程の &lt;code&gt;max()&lt;/code&gt; 関数だが&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型 &lt;code&gt;T&lt;/code&gt; のインスタンス同士で比較演算（具体的には &lt;code&gt;x &amp;lt; y&lt;/code&gt;）が可能である必要がある。
たとえば complex64/complex128 は基本型だが &lt;code&gt;&amp;lt;&lt;/code&gt; 演算子による比較ができない。&lt;/p&gt;

&lt;p&gt;Java の場合は継承を構成して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Comparable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;などと記述することで総称型に対する制約（type constraint）を表現できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:con1&#34;&gt;&lt;a href=&#34;#fn:con1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;しかし &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではいわゆる「継承」の仕組みを持ってないため別のアプローチをとる必要がある。
それが型コントラクトである。
型コントラクトでは contract キーワードおよびそれを使った構文を追加する。
具体的には以下のようなコードになる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;comparable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;comparable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;なお &lt;code&gt;comparable&lt;/code&gt; の型引数を明示する場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;comparable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書く。&lt;/p&gt;

&lt;p&gt;型コントラクトの記述はバイナリ・コードにコンパイルされない。
上の例では型 &lt;code&gt;T&lt;/code&gt; に対して比較演算子 &lt;code&gt;&amp;lt;&lt;/code&gt; が使えることを要求しているとコンパイラに知らせるものである。
これなら &lt;code&gt;T&lt;/code&gt; を complex128 に展開しようとしてもコンパイル時に「契約違反」になるわけだ。&lt;/p&gt;

&lt;p&gt;型コントラクトは型コントラクトに埋め込むことができる。
例えばこんな感じ。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;equalable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;comparable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;equalable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで &lt;code&gt;comparable&lt;/code&gt; は &lt;code&gt;==&lt;/code&gt; 演算子と &lt;code&gt;&amp;lt;&lt;/code&gt; 演算子が使えることを要求していることになる。&lt;/p&gt;

&lt;p&gt;継承を利用した制約と異なり，型コントラクトの自由度は高く応用範囲も広い。
たとえばポインタ型を要求するなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;などと書くこともできるらしい。
他にも &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Reader&lt;/code&gt; と汎化・特化の関係があることを要求するなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;などと書けばいいようだ。&lt;/p&gt;

&lt;p&gt;もし今回のドラフト案の通りに総称型が実現するなら型コントラクトの整備が喫緊の作業となるだろう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/lufia/items/242d25e8c93d88e22a2e&#34;&gt;Go 2のgenerics/contract簡易まとめ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/03/generics-vs-duck-typing/&#34;&gt;きみは Generics がとくいなフレンズなんだね，または「制約は構造を生む」&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;span class=&#34;fa-sm&#34; style=&#34;color:goldenrod;&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/span&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:oaoo1&#34;&gt;このように同じコードを重複させないように記述するコーディング指針を「OAOO (Once And Only Once) 原則」と呼ぶ。そういえばよくある勘違いで「DRY (Don&#39;t Repeat Yourself) 原則」と解説している記事が見受けられるが， DRY 原則は同じ意味を持つ情報やデータを複数に散らばせないというシステム設計や開発環境の指針を指すものである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:oaoo1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:java1&#34;&gt;久しぶりに Java コード書いたら型を前置することに違和感がハンパない。型の前置なんて非合理的だよなあ（もちろん偏見&lt;code&gt;w&lt;/code&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:java1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sort1&#34;&gt;Slice のソートについてはバージョン 1.8 から任意の型に対応する &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Slice()&lt;/code&gt; 関数が用意された。内部で &lt;a href=&#34;https://golang.org/pkg/reflect/&#34; title=&#34;reflect - The Go Programming Language&#34;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; パッケージを使っているが，かなり巧妙に組まれているため，パフォーマンス低下は殆どないらしい。ただし slice 以外のインスタンスを指定すると（コンパイル時ではなく）実行時に panic を吐く。詳しくは「&lt;a href=&#34;http://text.baldanders.info/golang/sort/&#34;&gt;ソートを使う&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sort1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:con1&#34;&gt;C++ や C# でも where 句を用いて総称型に対する制約を表現できるが，基本は継承を利用したものである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:con1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『Go 言語による並行処理』は Go 言語プログラマ必読書だろう - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/11/concurrency-in-go/" />
		<id>tag:text.Baldanders.info,2018-11-03:/remark/2018/11/concurrency-in-go/</id>
		<published>2018-11-03T09:50:43+09:00</published>
		<updated>2018-11-10T19:07:16+09:00</updated>
		<summary>並行処理プログラミングが難しいのは，デザイン・パターンの熟成がまだ若いことと，パターンの組み合わせの選択が複雑な点にあると思う。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;やぁ！ ついに “&lt;a href=&#34;https://katherine.cox-buday.com/concurrency-in-go/&#34;&gt;Concurrency in Go&lt;/a&gt;” の邦訳版が登場したですよ。
めでたい！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の特徴はいくつかあるが，大きなものとして「並行処理&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cm1&#34;&gt;&lt;a href=&#34;#fn:cm1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」を前提とした言語設計が挙げられる。&lt;/p&gt;

&lt;p&gt;並行処理では &lt;a href=&#34;https://dl.acm.org/citation.cfm?doid=359576.359585&#34;&gt;CSP (Communicating Sequential Processes)&lt;/a&gt; の成果が取り入れられている。
これが goroutine と channel である。&lt;/p&gt;

&lt;p&gt;Goroutine は軽量スレッドなどと呼ばれることもあるが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:thrd1&#34;&gt;&lt;a href=&#34;#fn:thrd1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，厳密には coroutine の一種である。
Main goroutine を含む各 goroutine はランタイム・プログラムに組み込まれたスケジューラによって制御される。
つまり実行時の並列処理の詳細はコードレベルでは隠蔽されているのだ。
故にプログラマはコード上の並行処理にのみ注力して記述すればいいことになる。
OS スレッドの仕様がどうなってるとか無駄にデカいスレッドをプールの中でどう使い回すかとか，生産性の欠片もないようなことは考えなくていいわけだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:grt1&#34;&gt;&lt;a href=&#34;#fn:grt1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;Channel は入出力プリミティブで，これによって goroutine 間のメッセージ・パッシング（message passing）を実現している。
たとえば以下のような感じで記述する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ch1&#34;&gt;&lt;a href=&#34;#fn:ch1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//main goroutine
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//create channel
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//sub goroutine
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//send
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//receive
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（&lt;code&gt;go&lt;/code&gt; 構文（&lt;a href=&#34;https://golang.org/ref/spec#Go_statements&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;go statement&lt;/a&gt;）でキックされた関数が sub goroutine となる。関数閉包（closure）になっている点に注目）&lt;/p&gt;

&lt;p&gt;これらに加えて，同期をとるための &lt;a href=&#34;https://golang.org/pkg/sync/&#34; title=&#34;sync - The Go Programming Language&#34;&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/a&gt; パッケージやコールグラフの各枝をキャンセルするための &lt;a href=&#34;https://golang.org/pkg/context/&#34; title=&#34;context - The Go Programming Language&#34;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; パッケージが標準ライブラリで用意されている。&lt;/p&gt;

&lt;p&gt;メッセージ・パッシングを構成するか &lt;a href=&#34;https://golang.org/pkg/sync/&#34; title=&#34;sync - The Go Programming Language&#34;&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/a&gt; パッケージ等を用いて legacy なメモリアクセス同期を構成するか（あるいはそれらを組み合わせるか）の判断は難しいが，2.4章に大まかな指針が挙げられているので参考になるだろう。
ただし，今まで無理やりメモリアクセス同期で運用していたもののうちかなりのものを軽くて（スレッドセーフという意味で）安全なメッセージ・パッシングに置き換えられるのは確かである。&lt;/p&gt;

&lt;p&gt;そうそう。
『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4873118468/baldandersinf-22/&#34; title=&#34;Go言語による並行処理 | Katherine Cox-Buday, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;Go 言語による並行処理&lt;/a&gt;』では &lt;a href=&#34;https://golang.org/pkg/context/&#34; title=&#34;context - The Go Programming Language&#34;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; パッケージについてページを割いて紹介されているのだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cxt1&#34;&gt;&lt;a href=&#34;#fn:cxt1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;（4.12章）。
&lt;a href=&#34;https://golang.org/pkg/context/&#34; title=&#34;context - The Go Programming Language&#34;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; パッケージをデザイン・パターンとして日本語できちんと紹介している Web 記事や書籍はあまり見かけないので，単純に嬉しい。&lt;/p&gt;

&lt;p&gt;並行処理プログラミングが難しいのは，デザイン・パターン（4章で言及されている）の熟成がまだ若いこと，パターンの組み合わせ最適化が複雑なこと，もっと言うなら並行処理の設計は context driven であること，にあると思う（だからこそ &lt;a href=&#34;https://golang.org/pkg/context/&#34; title=&#34;context - The Go Programming Language&#34;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; パッケージは秀逸なのよ）。
デザイン・パターンは（数学の公式と同じく）思考のショートカットなので，そのパターンを構成することの意味を分かった上で適用しないと失敗することが多いんじゃないだろうか。&lt;/p&gt;

&lt;p&gt;この本を読んで「よっしゃ，明日から立派な goroutine 使いだ！」とはならないと思うけど，有象無象なコピペ・プログラマじゃなく，きちんと &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のプログラミングを勉強したいのであれば，この本は必読書になると思う。
少なくとも（立ち読みででも）2章までは熟読すべき。&lt;/p&gt;

&lt;p&gt;ところで余談だが，補遺Bは日本語版オリジナルの章だそうだけど，その中に &lt;a href=&#34;https://blog.golang.org/go2draft&#34; title=&#34;Go 2 Draft Designs - The Go Blog&#34;&gt;Go 2 ドラフト&lt;/a&gt;で提案されている Generics についてしれっと書かれている。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/6wIP3rO6On8&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6wIP3rO6On8&#34;&gt;Go 2 Drafts Announcement - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;次期 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に搭載される（かもしれない） Generics についての解説は以下を参考にどうぞ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/lufia/items/242d25e8c93d88e22a2e&#34;&gt;Go 2のgenerics/contract簡易まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/concurrency-in-go.htm&#34;&gt;Big Sky :: 書評「Go言語による並行処理」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160706165757.htm&#34;&gt;Big Sky :: golang の channel を使ったテクニックあれこれ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20180531104907.htm&#34;&gt;Big Sky :: Go 言語の非同期パターン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/go_concurrency_visualize/&#34;&gt;Go言語の並行性を映像化する | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qiita.com/tfutada/items/a289628d8b2d0af6152d&#34;&gt;Go言語の並行処理デザインパターン by Rob Pike 前編 - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tfutada/items/dc8db894ac270a79ef2b&#34;&gt;Go言語の並行処理デザインパターン by Rob Pike 後編 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/ticker/&#34;&gt;time.Ticker で遊ぶ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4873118468/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51pUKQajnaL._SL160_.jpg&#34; width=&#34;125&#34; height=&#34;160&#34; alt=&#34;Go言語による並行処理&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4873118468/baldandersinf-22&#34;&gt;Go言語による並行処理&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Katherine Cox-Buday&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;span class=&#34;fa-sm&#34; style=&#34;color:goldenrod;&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
    &lt;/span&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;この本を読んで「よっしゃ，明日から立派な goroutine 使いだ！」とはならないと思うけど，有象無象なコピペ・プログラマじゃなく，きちんと Go 言語のプログラミングを勉強したいのであれば，この本は必読書になると思う。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.11.3&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;span class=&#34;fa-sm&#34; style=&#34;color:goldenrod;&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/span&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cm1&#34;&gt;「同時に複数の動作が行われていること」を意味する言葉として「並行（concurrent）」と「並列（parallel）」が混同されることがあるが，プログラミングにおいては，書かれたコードの性質をを表すものを「並行」，動作するランタイム・プログラム（群）の性質を表すものを「並列」と呼んで区別している。両者は密接に関連しているが等価ではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cm1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:thrd1&#34;&gt;OS スレッドに比べて goroutine を駆動する（ランタイム・プログラムが展開する）グリーン・スレッドは非常に軽量らしい。初期のメモリ割当で数キロバイト程度で，実行時に自動的に増減するようだ。 Goroutine のリソースの概算については3.1章で言及されている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:thrd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:grt1&#34;&gt;ある規模以上のシステムの場合は流量制限等をかける必要があるかも知れない。大規模システム開発での注意点については5章で言及されている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:grt1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ch1&#34;&gt;受信（&lt;code&gt;&amp;lt;-chan&lt;/code&gt;）は単項演算子で，送信（&lt;code&gt;chan&amp;lt;-&lt;/code&gt;）は送信構文（send statement）で記述する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ch1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cxt1&#34;&gt;&lt;a href=&#34;https://golang.org/pkg/context/&#34; title=&#34;context - The Go Programming Language&#34;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; パッケージはバージョン 1.7 から標準ライブラリに組み込まれたため，古い参考書には載っていない。なお &lt;a href=&#34;https://golang.org/pkg/context/&#34; title=&#34;context - The Go Programming Language&#34;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; パッケージにはキャンセルの伝搬以外にもコールグラフ間でデータを受け渡す機能もある。もっともこちらは濫用するとヤバいけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cxt1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>モジュール対応モードへの移行を検討する - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/go-module-aware-mode/" />
		<id>tag:text.Baldanders.info,2018-10-22:/golang/go-module-aware-mode/</id>
		<published>2018-10-22T15:55:11+09:00</published>
		<updated>2018-10-23T13:48:39+09:00</updated>
		<summary>みんな。なにはさておき go.mod ファイルを作成するんだ！</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラの&lt;a href=&#34;http://text.baldanders.info/release/2018/09/go-1_11-ise-released/&#34; title=&#34;Go 1.11 のリリースと「モジュール」機能の実験的サポート&#34;&gt;バージョン 1.11&lt;/a&gt;から搭載された「モジュール対応モード」だが，少し試してみてそれなりに使えそうなので，この記事である程度まとめておくことにした。
これからも何かあればこの記事に加筆・修正していく予定である。&lt;/p&gt;

&lt;p&gt;なお，モジュール対応モードは 1.11 時点で preliminary support に過ぎないため，以降のバージョンで大きな変更が行われるかもしれない。
したがってこの記事はバージョン 1.12 以降で大幅に書き替える可能性がる。&lt;/p&gt;

&lt;h2 id=&#34;用語の整理&#34;&gt;用語の整理&lt;/h2&gt;

&lt;p&gt;まず最初に用語の定義をしておく。&lt;/p&gt;

&lt;h3 id=&#34;gopath-モードとモジュール対応モード&#34;&gt;GOPATH モードとモジュール対応モード&lt;/h3&gt;

&lt;p&gt;バージョン 1.11 以降からは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラは以下の2つのモードのどちらかで動作する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cmd1&#34;&gt;&lt;a href=&#34;#fn:cmd1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GOPATH モード (GOPATH mode)&lt;/strong&gt; : バージョン 1.10 までの動作モード。標準ライブラリを除く全てのパッケージの管理とビルドを &lt;code&gt;$GOPATH&lt;/code&gt; 以下のディレクトリで行う。パッケージの管理はリポジトリの最新リビジョンのみが対象となる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;モジュール対応モード (module-aware mode)&lt;/strong&gt; : 標準ライブラリを除く全てのパッケージをモジュールとして管理する。モジュールの管理とビルドは任意のディレクトリで可能で，モジュールはリポジトリのバージョンタグまたはリビジョン毎に管理される&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;モジュール-とは&#34;&gt;「モジュール」とは&lt;/h3&gt;

&lt;p&gt;モジュール対応モードでは，標準ライブラリを除くパッケージを「モジュール（module）」として管理する。
パッケージが &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; 等のバージョン管理ツールで管理されている場合はバージョン毎に異なるモジュールと見なされる。
つまりモジュールの実体は「パッケージ＋バージョン」ということになる。&lt;/p&gt;

&lt;p&gt;ただしコード上ではパッケージとモジュールの間に区別はなく，したがってソースコードを書き換える必要はない。
モジュールはソースコードではなく &lt;code&gt;go.mod&lt;/code&gt; ファイルで管理される。&lt;/p&gt;

&lt;h2 id=&#34;環境変数-go111module&#34;&gt;環境変数 $GO111MODULE&lt;/h2&gt;

&lt;p&gt;バージョン 1.11 では2つのモードの切り替えのために環境変数 &lt;code&gt;$GO111MODULE&lt;/code&gt; でモードを指定する。
環境変数 &lt;code&gt;$GO111MODULE&lt;/code&gt; は以下の値をとり得る。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;on&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常にモジュール対応モードで動作する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;off&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に GOPATH モードで動作する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$GOPATH&lt;/code&gt; 以下のディレクトリにあるパッケージは GOPATH モードで，それ以外はモジュール対応モードで動作する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;バージョン 1.11 では，環境変数 &lt;code&gt;$GO111MODULE&lt;/code&gt; の既定値には &lt;code&gt;auto&lt;/code&gt; が設定されている。
独自の開発環境や IDE を使用しているためモジュール対応モードへの移行が難しい場合には &lt;code&gt;$GO111MODULE&lt;/code&gt; を &lt;code&gt;off&lt;/code&gt; にするとよいだろう。&lt;/p&gt;

&lt;h2 id=&#34;モジュール対応モード移行への準備&#34;&gt;モジュール対応モード移行への準備&lt;/h2&gt;

&lt;p&gt;本格的にモジュール対応モードへ移行する前に，以下の準備を行う。&lt;/p&gt;

&lt;h3 id=&#34;semantic-versioning-によるバージョン管理&#34;&gt;&lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; によるバージョン管理&lt;/h3&gt;

&lt;p&gt;モジュールのバージョンははリポジトリのリビジョン番号またはバージョンタグによって管理されるが，バージョンタグに関しては &lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; のルールに則ってバージョン番号を設定することが推奨されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sv1&#34;&gt;&lt;a href=&#34;#fn:sv1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://research.swtch.com/vgo-import&#34;&gt;&lt;img src=&#34;https://research.swtch.com/impver.png&#34; srcset=&#34;https://research.swtch.com/impver.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Semantic Import Versioning&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://research.swtch.com/vgo-import&#34;&gt;Semantic Import Versioning&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;このように後方互換性のない変更がある場合にはメジャーバージョンを，後方互換性が担保された変更や追加についてはマイナーバージョンを，不具合や脆弱性の修正については第3位のパッチバージョンを上げるようにする。
またメジャーバージョンを上げる際には，図のようにディレクトリを分離するか，旧バージョン用にブランチを切るのがよいだろう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sv2&#34;&gt;&lt;a href=&#34;#fn:sv2&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;バージョンタグによってバージョン管理を行うのであればきちんとルールを決めて管理する必要がある。
リポジトリ管理に &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;Git&lt;/a&gt; を使うのであれば Git Flow や GitHub Flow などが参考になるかも知れない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;A successful Git branching model » nvie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://danielkummer.github.io/git-flow-cheatsheet/&#34;&gt;git-flow cheatsheet&lt;/a&gt; （&lt;a href=&#34;http://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html&#34;&gt;日本語&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scottchacon.com/2011/08/31/github-flow.html&#34;&gt;GitHub Flow – Scott Chacon&lt;/a&gt; （&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;日本語訳&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; 等の SaaS ではバージョンタグを使ったリリース管理がやりやすいように構成されているし，上手く使ってほしい。&lt;/p&gt;

&lt;h3 id=&#34;なにはさておき-go-mod-ファイルを作成する&#34;&gt;なにはさておき go.mod ファイルを作成する&lt;/h3&gt;

&lt;p&gt;モジュール対応モードでは &lt;code&gt;go.mod&lt;/code&gt; ファイルでモジュール管理を行う。
そういうわけで，なにはさておき &lt;code&gt;go.mod&lt;/code&gt; ファイルを作ってしまおう。&lt;/p&gt;

&lt;p&gt;適当なディレクトリで以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init hello
go: creating new go.mod: module hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで &lt;code&gt;hello&lt;/code&gt; というのがモジュール名（厳密にはモジュール・パス）になる。
モジュール名は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の名前として使えるものであれば何でもいいが，パッケージ名（厳密にはパッケージ・パス）と合わせておくと面倒がない。
たとえば &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; に &lt;code&gt;github.com/my/package&lt;/code&gt; というパッケージを公開するのであれば，モジュール名も&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init github.com/my/package
go: creating new go.mod: module github.com/my/package&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;としておくのがいいだろう。&lt;/p&gt;

&lt;p&gt;コンパイル時に参照する &lt;code&gt;go.mod&lt;/code&gt; ファイルがどこにあるかは環境変数 &lt;code&gt;$GOMOD&lt;/code&gt; を見ればよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env GOMOD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;カレント・ディレクトリに &lt;code&gt;go.mod&lt;/code&gt; ファイルがない場合は親ディレクトリに遡って探すようだ。
まぁ，サブパッケージはディレクトリで階層化されているから当然なんだけど。&lt;/p&gt;

&lt;h4 id=&#34;dep-からの移行&#34;&gt;&lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; からの移行&lt;/h4&gt;

&lt;p&gt;既存のパッケージに &lt;code&gt;go.mod&lt;/code&gt; ファイルを追加する場合も同様の操作でよい。
なお &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; を使ってパッケージ管理を行っている場合は &lt;code&gt;Gopkg.lock&lt;/code&gt; ファイルを読んで &lt;code&gt;go.mod&lt;/code&gt; ファイルに組み込んでくれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init github.com/spiegel-im-spiegel/gpgpdump
go: creating new go.mod: module github.com/spiegel-im-spiegel/gpgpdump
go: copying requirements from Gopkg.lock&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんて便利！&lt;/p&gt;

&lt;h4 id=&#34;go-mod-の内容&#34;&gt;go.mod の内容&lt;/h4&gt;

&lt;p&gt;ここで作成した &lt;code&gt;go.mod&lt;/code&gt; ファイルの中身を見てみよう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/spiegel-im-spiegel/gpgpdump&lt;/code&gt; パッケージのリポジトリに対して &lt;code&gt;go mod init&lt;/code&gt; した結果は以下の通りだった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/spiegel-im-spiegel/gpgpdump

require (
    github.com/BurntSushi/toml v0.3.0
    github.com/inconshreveable/mousetrap v1.0.0
    github.com/pkg/errors v0.8.0
    github.com/spf13/cobra v0.0.3
    github.com/spf13/pflag v1.0.2
    github.com/spiegel-im-spiegel/gocli v0.8.0
    golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;module&lt;/code&gt; や &lt;code&gt;require&lt;/code&gt; は命令（directive）と呼ばれるもので，これらの命令を使ってモジュールの管理を行う。
&lt;code&gt;go.mod&lt;/code&gt; ファイルの記述で使える命令は以下の通り。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;記述例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;module&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;module my/thing&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;require&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;require other/thing v1.0.2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exclude&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;exclude old/thing v1.2.3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;replace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;replace bad/thing v1.4.5 =&amp;gt; good/thing v1.4.5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;module&lt;/code&gt; はカレント以下のディレクトリにあるパッケージに対するモジュール名を定義する。
前述したようにモジュール名（モジュール・パス）はパッケージ名（パッケージ・パス）と合わせておくほうが面倒がない。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;require&lt;/code&gt; はカレントのモジュールが要求するモジュール名とバージョンを指定する。
つまり &lt;code&gt;require&lt;/code&gt; で指定したモジュールが，カレント・モジュールが依存する外部モジュールとなるわけだ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exclude&lt;/code&gt; は管理から除外するモジュールを指定する。
不具合等で特定のバージョンのモジュールを使いたくないときなどに使える。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;replace&lt;/code&gt; はモジュール名の置き換えである。
パッケージ・パスのリダイレクトなどで名前と実体が一致しないときなどに使える。
たとえば以下のような感じ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ltst1&#34;&gt;&lt;a href=&#34;#fn:ltst1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module md2html

require gopkg.in/russross/blackfriday.v2 latest
replace gopkg.in/russross/blackfriday.v2 latest =&amp;gt; github.com/russross/blackfriday/v2 latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この件については後ほど詳しく説明する。&lt;/p&gt;

&lt;h2 id=&#34;モジュール対応モードで使う主なコマンド&#34;&gt;モジュール対応モードで使う主なコマンド&lt;/h2&gt;

&lt;p&gt;それではモジュール対応モードで色々と操作してみよう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go build&lt;/code&gt; や &lt;code&gt;go test&lt;/code&gt; や &lt;code&gt;go run&lt;/code&gt; のようなコマンドは，モジュール対応モードでも変わりなく使える。
ビルド時に必要なモジュールは自動的にダウンロードされるため，事前に &lt;code&gt;go get -u ./...&lt;/code&gt; みたいなことはしなくていいようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run hello.go
go: finding rsc.io/quote v1.5.2
go: downloading rsc.io/quote v1.5.2
go: finding rsc.io/sampler v1.3.0
go: finding golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
go: downloading rsc.io/sampler v1.3.0
go: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
Hello, world.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお &lt;code&gt;go get&lt;/code&gt; の挙動については後ほど詳しく紹介する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go list&lt;/code&gt; コマンドは &lt;code&gt;-m&lt;/code&gt; オプションを付けることでモジュールに対応した。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go list -m -u all
go: finding github.com/pkg/errors v0.8.0
go: finding github.com/spf13/pflag v1.0.2
go: finding github.com/spf13/cobra v0.0.3
go: finding github.com/BurntSushi/toml v0.3.0
go: finding github.com/spiegel-im-spiegel/gocli v0.8.0
go: finding github.com/inconshreveable/mousetrap v1.0.0
go: finding golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87
go: finding golang.org/x/crypto latest
go: finding github.com/BurntSushi/toml v0.3.1
github.com/spiegel-im-spiegel/gpgpdump
github.com/BurntSushi/toml v0.3.0 [v0.3.1]
github.com/inconshreveable/mousetrap v1.0.0
github.com/pkg/errors v0.8.0
github.com/spf13/cobra v0.0.3
github.com/spf13/pflag v1.0.2
github.com/spiegel-im-spiegel/gocli v0.8.0
golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87 [v0.0.0-20180910181607-0e37d006457b]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行結果から &lt;code&gt;github.com/BurntSushi/toml&lt;/code&gt; と &lt;code&gt;golang.org/x/crypto&lt;/code&gt; には新しいバージョンがあることが分かる。
この情報を基に &lt;code&gt;go.mod&lt;/code&gt; を調整していけばいいだろう。&lt;/p&gt;

&lt;p&gt;新しく追加されたモジュール対応モード用のコマンド &lt;code&gt;go mod&lt;/code&gt; はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go help mod
Go mod provides access to operations on modules.

Note that support for modules is built into all the go commands,
not just &amp;#39;go mod&amp;#39;. For example, day-to-day adding, removing, upgrading,
and downgrading of dependencies should be done using &amp;#39;go get&amp;#39;.
See &amp;#39;go help modules&amp;#39; for an overview of module functionality.

Usage:

        go mod &amp;lt;command&amp;gt; [arguments]

The commands are:

        download    download modules to local cache
        edit        edit go.mod from tools or scripts
        graph       print module requirement graph
        init        initialize new module in current directory
        tidy        add missing and remove unused modules
        vendor      make vendored copy of dependencies
        verify      verify dependencies have expected content
        why         explain why packages or modules are needed

Use &amp;#34;go help mod &amp;lt;command&amp;gt;&amp;#34; for more information about a command.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;go mod init&lt;/code&gt; は既に紹介したとおり。
他によく使うものといえば &lt;code&gt;go mod download&lt;/code&gt; と &lt;code&gt;go mod graph&lt;/code&gt; だろうか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go mod download&lt;/code&gt; は &lt;code&gt;go get -u ./...&lt;/code&gt; の代わりに使える。
&lt;code&gt;go mod graph&lt;/code&gt; はモジュール間の依存関係を調べるときに使えるだろう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go mod edit&lt;/code&gt; は &lt;code&gt;go.mod&lt;/code&gt; ファイルを編集するためのコマンドだが手で書いたほうが早い（笑） まぁ何らかのバッチ処理で使える感じだろうか。&lt;/p&gt;

&lt;h2 id=&#34;モジュール間の依存関係の構造化&#34;&gt;モジュール間の依存関係の構造化&lt;/h2&gt;

&lt;p&gt;以下のコードに対して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;rsc.io/quote&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;go.mod&lt;/code&gt; ファイルの内容が以下の通りだとする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module hello

require rsc.io/quote v1.5.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これに対して &lt;code&gt;go mod graph&lt;/code&gt; コマンドを実行すると以下のようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod graph
hello rsc.io/quote@v1.5.2
rsc.io/quote@v1.5.2 rsc.io/sampler@v1.3.0
rsc.io/sampler@v1.3.0 golang.org/x/text@v0.0.0-20170915032832-14c0d48ead0c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを図式化すると以下のようになるだろう。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
graph TD
  hello[&#34;hello&#34;]
  quote[&#34;rsc.io/quote@v1.5.2&#34;]
  sampler[&#34;rsc.io/sampler@v1.3.0&#34;]
  text[&#34;golang.org/x/text@v0.0.0-20170915032832-14c0d48ead0c&#34;]

  hello--&#34;hello/go.mod&#34;--&gt;quote
  quote--&#34;rsc.io/quote@v1.5.2/go.mod&#34;--&gt;sampler
  sampler--&#34;rsc.io/sampler@v1.3.0/go.mod&#34;--&gt;text
&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;hello&lt;/code&gt; モジュールは &lt;code&gt;go.mod&lt;/code&gt; より &lt;code&gt;rsc.io/quote@v1.5.2&lt;/code&gt; モジュールを参照している。
&lt;code&gt;rsc.io/quote@v1.5.2&lt;/code&gt; モジュールは自身の &lt;code&gt;go.mod&lt;/code&gt; より &lt;code&gt;rsc.io/sampler@v1.3.0&lt;/code&gt; モジュールを参照している。
同じように &lt;code&gt;rsc.io/sampler@v1.3.0&lt;/code&gt; モジュールからも依存モジュールを参照しているわけだ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hello/go.mod&lt;/code&gt; には &lt;code&gt;rsc.io/sampler@v1.3.0&lt;/code&gt; 等のモジュールについての記述はないが， &lt;code&gt;rsc.io/quote@v1.5.2/go.mod&lt;/code&gt; や &lt;code&gt;rsc.io/sampler@v1.3.0/go.mod&lt;/code&gt; の記述から依存関係を階層的に取得することができる。&lt;/p&gt;

&lt;p&gt;このようにモジュールごとに &lt;code&gt;go.mod&lt;/code&gt; ファイルを記述していくことで依存関係の構造化を実現できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-mvs&#34;&gt;research!rsc: Minimal Version Selection (Go &amp;amp; Versioning, Part 4)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だからみんな。なにはさておき &lt;code&gt;go.mod&lt;/code&gt; ファイルを作成するんだ！&lt;/p&gt;

&lt;h2 id=&#34;モジュールのキャッシュとビルド-キャッシュ&#34;&gt;モジュールのキャッシュとビルド・キャッシュ&lt;/h2&gt;

&lt;p&gt;パッケージのコンパイル結果は環境変数 &lt;code&gt;$GOCACHE&lt;/code&gt; の示すディレクトリ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bc1&#34;&gt;&lt;a href=&#34;#fn:bc1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; にキャッシュされる。
モジュール対応モードではモジュール単位でキャッシュされるようだ。
したがって &lt;code&gt;$GOCACHE&lt;/code&gt; の値は &lt;code&gt;off&lt;/code&gt; にせず，正しいディレクトリを指定する必要がある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bc2&#34;&gt;&lt;a href=&#34;#fn:bc2&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$GOCACHE&lt;/code&gt; の値は &lt;code&gt;go env&lt;/code&gt; コマンドで確認できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env GOCACHE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ビルド・キャッシュをクリアするには以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go clean -cache&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;バージョン 1.11 ではダウンロードしたモジュールのソースコードは &lt;code&gt;$GOPATH/pkg/mod&lt;/code&gt; 以下に格納される。
モジュールのソースコードを含めて全てのキャッシュをクリアするには以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go clean -modcache&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラの将来バージョンでは &lt;code&gt;$GOPATH/pkg&lt;/code&gt; を廃止する予定があるようで，モジュールのキャッシュの置き場が変更される可能性がある。&lt;/p&gt;

&lt;h2 id=&#34;モジュール対応モード-in-travis-ci&#34;&gt;モジュール対応モード in Travis CI&lt;/h2&gt;

&lt;p&gt;CI (Continuous Integration) サービスのひとつである &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;にも対応しているが，処理対象のパッケージを &lt;code&gt;$GOPATH/src&lt;/code&gt; 以下に展開するため GOPATH モードで処理が走ってしまう。
そこで &lt;code&gt;.travis.yml&lt;/code&gt; ファイルを以下のように書き換えて強引にモジュール対応モードにする。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;language&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;go&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1.11.x&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;env&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;global&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GO111MODULE=on&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;install&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mod&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;download&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;script&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;test&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;環境変数の設定部分に注目してほしい。&lt;/p&gt;

&lt;h3 id=&#34;goreleaser-による-deploy&#34;&gt;&lt;a href=&#34;https://goreleaser.com/&#34; title=&#34;GoReleaser | Deliver Go binaries as fast and easily as possible&#34;&gt;GoReleaser&lt;/a&gt; による Deploy&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://goreleaser.com/&#34; title=&#34;GoReleaser | Deliver Go binaries as fast and easily as possible&#34;&gt;GoReleaser&lt;/a&gt; を使って&lt;a href=&#34;http://text.baldanders.info/golang/cross-compiling-in-travis-ci-with-goreleaser/&#34; title=&#34;Travis CI でクロス・コンパイル（GoReleaser 編）&#34;&gt;複数の実行モジュールをビルド&lt;/a&gt;するには &lt;code&gt;.goreleaser.yml&lt;/code&gt; ファイルの &lt;code&gt;builds&lt;/code&gt; 項目に環境変数の設定を追加しておけば安心である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;builds&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;env&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GO111MODULE=on&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; で &lt;a href=&#34;https://goreleaser.com/&#34; title=&#34;GoReleaser | Deliver Go binaries as fast and easily as possible&#34;&gt;GoReleaser&lt;/a&gt; を使って deploy を行うには &lt;code&gt;.travis.yml&lt;/code&gt; ファイルを以下のように記述すれば良い。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;language&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;go&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1.11.x&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;env&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;global&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;GO111MODULE=on&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;install&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;mod&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;download&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;script&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;go&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;test&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;./...&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;deploy&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;provider&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;script&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;skip_cleanup&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;script&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;curl&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-sL&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;https&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;//git.io/goreleaser&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;| bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;  on:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    tags: true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    condition: $TRAVIS_OS_NAME = linux&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;モジュール-パスとパッケージ-パスが一致しない場合&#34;&gt;モジュール・パスとパッケージ・パスが一致しない場合&lt;/h2&gt;

&lt;p&gt;先ほど少し紹介したが &lt;code&gt;gopkg.in/russross/blackfriday.v2&lt;/code&gt; パッケージをモジュールとして記述する例を挙げてみる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bf1&#34;&gt;&lt;a href=&#34;#fn:bf1&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;まず以下のコードを書く。ファイル名は &lt;code&gt;md2html.go&lt;/code&gt; とでもしておこう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;gopkg.in/russross/blackfriday.v2&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;md&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blackfriday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;md&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;md2html.go&lt;/code&gt; に対して以下のようにモジュール定義を行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module md2html

require gopkg.in/russross/blackfriday.v2 latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では実際にコンパイル&amp;amp;実行してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run md2html.go hello.md
go: finding gopkg.in/russross/blackfriday.v2 v2.0.1
go: gopkg.in/russross/blackfriday.v2@v2.0.1: go.mod has non-....v2 module path &amp;#34;github.com/russross/blackfriday/v2&amp;#34; at revision v2.0.1
go: error loading module requirements&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;おおう。
エラーになってしまった。
&lt;code&gt;github.com/russross/blackfriday/v2&lt;/code&gt; なんてパスはねーよ！ とお怒りのようだ。&lt;/p&gt;

&lt;p&gt;パス名 &lt;code&gt;gopkg.in/russross/blackfriday.v2&lt;/code&gt; は &lt;code&gt;github.com/russross/blackfriday&lt;/code&gt; の alias で v2 のコードは v2 ブランチで管理されている。
v2 ブランチにある &lt;code&gt;go.mod&lt;/code&gt; ファイルを見てみると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/russross/blackfriday/v2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と記されているが，実際に v2 ブランチの &lt;a href=&#34;https://github.com/russross/blackfriday/tree/v2&#34;&gt;&lt;code&gt;github.com/russross/blackfriday&lt;/code&gt;&lt;/a&gt; に &lt;code&gt;v2&lt;/code&gt; ディレクトリは存在しない。
このパスの不一致がエラーの原因のようである。&lt;/p&gt;

&lt;p&gt;この不一致を解消するために &lt;code&gt;replace&lt;/code&gt; を追加する。
具体的には以下のように記述する。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-tex&#34; data-lang=&#34;tex&#34;&gt;module md2html

require gopkg.in/russross/blackfriday.v2 latest
&lt;span class=&#34;hl&#34;&gt;replace gopkg.in/russross/blackfriday.v2 latest =&amp;gt; github.com/russross/blackfriday/v2 latest&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;では，この状態でコンパイル&amp;amp;実行してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run md2html.go hello.md
go: finding github.com/russross/blackfriday/v2 v2.0.1
go: downloading github.com/russross/blackfriday/v2 v2.0.1
go: finding github.com/shurcooL/sanitized_anchor_name latest
go: downloading github.com/shurcooL/sanitized_anchor_name v0.0.0-20170918181015-86672fcb3f95
&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というわけでうまく動作したようだ。&lt;/p&gt;

&lt;h2 id=&#34;バージョンを指定して-go-get-を実行する&#34;&gt;バージョンを指定して go get を実行する&lt;/h2&gt;

&lt;p&gt;たとえば私の自作ツールである &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; を自前でビルドすることを考える。&lt;/p&gt;

&lt;p&gt;GOPATH モードでパッケージをダウンロードし実行ファイルをビルドするには以下のコマンドを実行すればよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go get -v github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump
github.com/spiegel-im-spiegel/gpgpdump (download)
github.com/spiegel-im-spiegel/gocli (download)
vendor/golang_org/x/net/dns/dnsmessage
github.com/spiegel-im-spiegel/gocli/exitcode
github.com/spiegel-im-spiegel/gocli/rwi
github.com/inconshreveable/mousetrap
net
github.com/spf13/pflag
github.com/spf13/cobra
github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump/facade
github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ダウンロードした &lt;code&gt;github.com/spiegel-im-spiegel/gpgpdump&lt;/code&gt; パッケージのソースコードとコンパイル結果（実行ファイルを含む）は &lt;code&gt;$GOPATH&lt;/code&gt; 以下に格納される。&lt;/p&gt;

&lt;p&gt;では，モジュール対応モードでバージョンを指定して &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; をビルドしてみよう。
まずは安直に &lt;code&gt;path@version&lt;/code&gt; 形式で実行してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ export GO111MODULE=on

$ go get github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@latest
go: cannot find main module; see &amp;#39;go help modules&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（ちなみに &lt;code&gt;latest&lt;/code&gt; は最新バージョンを指す）&lt;/p&gt;

&lt;p&gt;うーん。
やっぱダメか。
じゃあ &lt;code&gt;go.mod&lt;/code&gt; ファイルを作ってみたらどうなるか。
適当なディレクトリに &lt;code&gt;go.mod&lt;/code&gt; ファイルを作り，再び &lt;code&gt;go get&lt;/code&gt; してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init tools
go: creating new go.mod: module tools

$ go get github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@latest
go: finding github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump latest
go: finding github.com/spiegel-im-spiegel/gpgpdump/cli latest
go: finding github.com/spiegel-im-spiegel/gpgpdump v0.3.8
go: downloading github.com/spiegel-im-spiegel/gpgpdump v0.3.8
go: finding github.com/spf13/pflag v1.0.2
go: finding github.com/pkg/errors v0.8.0
go: finding github.com/inconshreveable/mousetrap v1.0.0
go: finding github.com/spiegel-im-spiegel/gocli v0.8.0
go: finding github.com/BurntSushi/toml v0.3.1
go: finding github.com/spf13/cobra v0.0.3
go: finding golang.org/x/crypto v0.0.0-20181001203147-e3636079e1a4
go: downloading github.com/spiegel-im-spiegel/gocli v0.8.0
go: downloading github.com/spf13/cobra v0.0.3
go: downloading golang.org/x/crypto v0.0.0-20181001203147-e3636079e1a4
go: downloading github.com/BurntSushi/toml v0.3.1
go: downloading github.com/pkg/errors v0.8.0
go: downloading github.com/spf13/pflag v1.0.2
go: downloading github.com/inconshreveable/mousetrap v1.0.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;おおっ，上手くいった（ちなみにモジュール名に意味はない）。&lt;/p&gt;

&lt;p&gt;ソースコードは &lt;code&gt;$GOPATH/pkg/mod&lt;/code&gt; 以下に，ビルド結果の実行ファイルは &lt;code&gt;$GOPATH/bin&lt;/code&gt; に格納される。
ビルド後の &lt;code&gt;go.mod&lt;/code&gt; ファイルの内容は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module tools

require github.com/spiegel-im-spiegel/gpgpdump v0.3.8 // indirect&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで異なるバージョンのビルドも試してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go get github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@v0.3.9-rc3
go: finding github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump v0.3.9-rc3
go: finding github.com/spiegel-im-spiegel/gpgpdump/cli v0.3.9-rc3
go: finding github.com/spiegel-im-spiegel/gpgpdump v0.3.9-rc3
go: downloading github.com/spiegel-im-spiegel/gpgpdump v0.3.9-rc3
go: finding github.com/spiegel-im-spiegel/gocli v0.8.1
go: finding github.com/spf13/pflag v1.0.3
go: finding golang.org/x/crypto v0.0.0-20181015023909-0c41d7ab0a0e
go: downloading github.com/spiegel-im-spiegel/gocli v0.8.1
go: downloading golang.org/x/crypto v0.0.0-20181015023909-0c41d7ab0a0e
go: downloading github.com/spf13/pflag v1.0.3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依存パッケージも含めて異なるバージョンのモジュールがダウンロードされているのが分かるだろうか。
ビルド後の &lt;code&gt;go.mod&lt;/code&gt; ファイルの内容も&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-tex&#34; data-lang=&#34;tex&#34;&gt;module tools

&lt;span class=&#34;hl&#34;&gt;require github.com/spiegel-im-spiegel/gpgpdump v0.3.9-rc3 // indirect&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;とバージョンが書き換わっている。&lt;/p&gt;

&lt;p&gt;というわけで &lt;code&gt;go.mod&lt;/code&gt; ファイルがあればモジュール対応モードでバージョンを指定しビルドすることができるようだ。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;code&gt;path@version&lt;/code&gt; 形式でモジュールを指定できるのは &lt;code&gt;go get&lt;/code&gt; コマンドのみらしい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@latest
package github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@latest: can only use path@version syntax with &amp;#39;go get&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし &lt;code&gt;go.mod&lt;/code&gt; ファイルに &lt;code&gt;require&lt;/code&gt; でモジュールを指定している状態ならバージョン指定を省略して &lt;code&gt;go build&lt;/code&gt; や &lt;code&gt;go run&lt;/code&gt; コマンドが使えるようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go clean -modcache
can&amp;#39;t load package: package tools: unknown import path &amp;#34;tools&amp;#34;: cannot find module providing package tools

$ go run github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump -h
go: finding github.com/spiegel-im-spiegel/gpgpdump v0.3.9-rc3
go: finding github.com/spiegel-im-spiegel/gocli v0.8.1
go: finding github.com/inconshreveable/mousetrap v1.0.0
go: finding github.com/pkg/errors v0.8.0
go: finding github.com/BurntSushi/toml v0.3.1
go: finding github.com/spf13/cobra v0.0.3
go: finding github.com/spf13/pflag v1.0.3
go: finding golang.org/x/crypto v0.0.0-20181015023909-0c41d7ab0a0e
go: downloading github.com/spiegel-im-spiegel/gpgpdump v0.3.9-rc3
go: downloading github.com/spiegel-im-spiegel/gocli v0.8.1
go: downloading github.com/spf13/cobra v0.0.3
go: downloading golang.org/x/crypto v0.0.0-20181015023909-0c41d7ab0a0e
go: downloading github.com/pkg/errors v0.8.0
go: downloading github.com/BurntSushi/toml v0.3.1
go: downloading github.com/spf13/pflag v1.0.3
go: downloading github.com/inconshreveable/mousetrap v1.0.0
Usage:
  gpgpdump [flags] [OpenPGP file]

Flags:
  -a, --armor     accepts ASCII input only
      --debug     for debug
  -h, --help      help for gpgpdump
  -i, --int       dumps multi-precision integers
  -j, --json      output with JSON format
  -l, --literal   dumps literal packets (tag 11)
  -m, --marker    dumps marker packets (tag 10)
  -p, --private   dumps private packets (tag 60-63)
  -t, --toml      output with TOML format
  -u, --utc       output with UTC time
  -v, --version   output version of gpgpdump&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;テストもできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go test github.com/spiegel-im-spiegel/gpgpdump/...
ok      github.com/spiegel-im-spiegel/gpgpdump  0.070s
?       github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump     [no test files]
ok      github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump/facade      0.482s
ok      github.com/spiegel-im-spiegel/gpgpdump/info     0.124s
ok      github.com/spiegel-im-spiegel/gpgpdump/options  0.131s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet   0.412s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/context   0.164s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/pubkey    0.124s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/reader    0.236s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/s2k       0.040s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/tags      0.161s
ok      github.com/spiegel-im-spiegel/gpgpdump/packet/values    0.175s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こりゃあ，便利だ。
上手く活用しましょう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/release/2018/09/go-1_11-ise-released/&#34;&gt;Go 1.11 のリリースと「モジュール」機能の実験的サポート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/spiegel-im-spiegel/items/5cb1587cb55d6f6a34d7&#34;&gt;GOPATH モードからモジュール対応モードへ移行せよ&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.wantedly.com/companies/wantedly/post_articles/132270&#34;&gt;Go 1.11 の modules・vgo を試す - 実際に使っていく上で考えないといけないこと #golang | Wantedly Engineer Blog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/go-and-versioning/&#34;&gt;vgo (Versioned Go) に関する覚え書き&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;span class=&#34;fa-sm&#34; style=&#34;color:goldenrod;&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/span&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cmd1&#34;&gt;「GOPATH モード」および「モジュール対応モード」の名称は “&lt;a href=&#34;https://golang.org/cmd/go/&#34; title=&#34;go - The Go Programming Language&#34;&gt;Command go&lt;/a&gt;” の記述から抜き出した。 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;って用語の表記に微妙なブレがあるのがイマイチだよなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cmd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sv1&#34;&gt;リビジョン番号によるバージョン管理も可能だが， &lt;code&gt;v0.0.0-20180816225734-aabede6cba87&lt;/code&gt; のような擬似バージョン番号に置き換えられるため，モジュールのインポート時の運用が煩雑になり推奨できない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sv1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sv2&#34;&gt;異なるメジャーバージョンを同一ディレクトリの同一ブランチで管理していると &lt;code&gt;go.mod&lt;/code&gt; のバージョン番号部分に勝手に “&lt;code&gt;+incompatible&lt;/code&gt;” が付加されてめっさカッコ悪くなる（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sv2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ltst1&#34;&gt;バージョンに &lt;code&gt;latest&lt;/code&gt; を指定すると，コンパイラ側で最新バージョン（またはリビジョン）を探して，最新の番号に置き換えてくれる。 &lt;code&gt;go build&lt;/code&gt; や &lt;code&gt;go test&lt;/code&gt; などを実行するたびに &lt;code&gt;go.mod&lt;/code&gt; ファイルの &lt;code&gt;latest&lt;/code&gt; 表記が書き換えられるので注意すること。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ltst1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bc1&#34;&gt;Windows 環境では &lt;code&gt;$GOCACHE&lt;/code&gt; の既定値は &lt;code&gt;%USERPROFILE%\AppData\Local\go-build&lt;/code&gt; となっているようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bc1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bc2&#34;&gt;バージョン 1.12 以降では &lt;code&gt;$GOCACHE&lt;/code&gt; の値を &lt;code&gt;off&lt;/code&gt; にできなくなる予定である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bc2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bf1&#34;&gt;&lt;code&gt;gopkg.in/russross/blackfriday.v2&lt;/code&gt; パッケージは Markdown コードを HTML 等の書式に変換するパッケージである（参考：&lt;a href=&#34;http://text.baldanders.info/golang/using-blackfriday-v2/&#34;&gt;Markdown パーサ blackfriday.v2 で遊ぶ&lt;/a&gt;）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bf1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『Go ならわかるシステムプログラミング』を眺める - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/10/system-programming-in-golang/" />
		<id>tag:text.Baldanders.info,2018-10-19:/remark/2018/10/system-programming-in-golang/</id>
		<published>2018-10-19T15:31:01+09:00</published>
		<updated>2018-11-03T09:50:43+09:00</updated>
		<summary>Go 言語でシステム寄りのプログラミングを行うのであれば，是非とも目を通しておくべきだろう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の言語仕様について勉強するなら真っ先に『&lt;a href=&#34;http://text.baldanders.info/remark/2016/07/go-programming-language/&#34; title=&#34;『プログラミング言語 Go』を眺める&#34;&gt;プログラミング言語 Go&lt;/a&gt;』を推すが，もう少し実装よりの話であれば『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34; title=&#34;Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 | Amazon&#34;&gt;Go ならわかるシステムプログラミング&lt;/a&gt;』を推す。
特に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;でシステム寄りのプログラミングを行うのであれば，是非とも目を通しておくべきだろう。&lt;/p&gt;

&lt;p&gt;この本は &lt;a href=&#34;http://ascii.jp/&#34;&gt;ASCII.jp&lt;/a&gt; で連載されていた「&lt;a href=&#34;http://ascii.jp/elem/000/001/235/1235262/&#34; title=&#34;ASCII.jp：Goならわかるシステムプログラミング&#34;&gt;Goならわかるシステムプログラミング&lt;/a&gt;」を書籍用に再構成したものらしい。
なので，まずは Web サイトの方を見て紙の本で買うべきか判断するのがいいと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の特徴のひとつがクロス・コンパイルの容易さである。
いくつか制約はあるが，基本的には同じコードで Windows も UNIX 系プラットフォームも対応していて，これを実現するために標準の &lt;a href=&#34;https://golang.org/pkg/syscall/&#34; title=&#34;syscall - The Go Programming Language&#34;&gt;&lt;code&gt;syscall&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://golang.org/pkg/runtime/&#34; title=&#34;runtime - The Go Programming Language&#34;&gt;&lt;code&gt;runtime&lt;/code&gt;&lt;/a&gt; パッケージ周辺を巧妙にカプセル化している。
しかもこれらのソースコードが公開されているため&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:src1&#34;&gt;&lt;a href=&#34;#fn:src1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; システム・プログラミングの学習教材としても使える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sp1&#34;&gt;&lt;a href=&#34;#fn:sp1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;特に『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34; title=&#34;Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 | Amazon&#34;&gt;Go ならわかるシステムプログラミング&lt;/a&gt;』では，ファイルやソケットなどに代表される順次アクセスの汎化である &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Reader&lt;/code&gt; / &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Writer&lt;/code&gt; およびその派生・特化クラス，またプロセスやスレッドに関する解説が秀逸だと思う。
さらに Docker コアの &lt;a href=&#34;https://github.com/docker/libcontainer&#34; title=&#34;docker/libcontainer: PROJECT MOVED TO RUNC&#34;&gt;libcontainer&lt;/a&gt; についても解説があったりする（自前で &lt;a href=&#34;https://github.com/docker/libcontainer&#34; title=&#34;docker/libcontainer: PROJECT MOVED TO RUNC&#34;&gt;libcontainer&lt;/a&gt; を直に触る人はあまりいないかも知れないが）。&lt;/p&gt;

&lt;p&gt;個人的によく出来てると思うのが平行（concurrent）/並列（parallel）処理について解説している13章と14章だ。
プロセスやスレッド（更にはガベージコレクション）と &lt;a href=&#34;https://golang.org/doc/effective_go.html#concurrency&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;goroutine&lt;/a&gt; の関係について日本語で分かりやすく解説している本は少ないと思うので，これだけで『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34; title=&#34;Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 | Amazon&#34;&gt;Go ならわかるシステムプログラミング&lt;/a&gt;』を買っておく価値があると思う&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c1&#34;&gt;&lt;a href=&#34;#fn:c1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html#concurrency&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;goroutine&lt;/a&gt; と channel の組み合わせは並行処理におけるパラダイムシフトとなる可能性がある。
それくらい高いポテンシャルを持っているのだ。
そのための基礎学習を『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34; title=&#34;Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 | Amazon&#34;&gt;Go ならわかるシステムプログラミング&lt;/a&gt;』でやっておくのがいいんじゃないかな。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/11/concurrency-in-go/&#34;&gt;『Go 言語による並行処理』は Go 言語プログラマ必読書だろう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/515xkIcDgXL._SL160_.jpg&#34; width=&#34;113&#34; height=&#34;160&#34; alt=&#34;Goならわかるシステムプログラミング&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34;&gt;Goならわかるシステムプログラミング&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;渋川 よしき&lt;/dd&gt;
      &lt;dd&gt;ラムダノート&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;span class=&#34;fa-sm&#34; style=&#34;color:goldenrod;&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
      &lt;/span&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;ァイルやソケットなどに代表される順次アクセスの汎化である io.Reader / io.Writer およびその派生・特化クラス，またプロセスやスレッドに関する解説が秀逸だと思う。 さらに Docker コアの libcontainer についても解説がある。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;span class=&#34;fa-sm&#34; style=&#34;color:goldenrod;&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/span&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:src1&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の標準パッケージは &lt;a href=&#34;https://opensource.org/licenses/mit-license.php&#34; title=&#34;The MIT License | Open Source Initiative&#34;&gt;MIT ライセンス&lt;/a&gt;で公開されている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:src1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sp1&#34;&gt;ちなみに『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4908686033/baldandersinf-22&#34; title=&#34;Goならわかるシステムプログラミング | 渋川 よしき, ごっちん |本 | 通販 | Amazon&#34;&gt;Go ならわかるシステムプログラミング&lt;/a&gt;』では，各章の最後に演習問題がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c1&#34;&gt;ただし並行処理のデザインパターン等，もう少し踏み込んだ内容については『&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4873118468/baldandersinf-22/&#34; title=&#34;Go言語による並行処理 | Katherine Cox-Buday, 山口 能迪 |本 | 通販 | Amazon&#34;&gt;Go 言語による並行処理&lt;/a&gt;』のほうがいいかも知れない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>CSV/TSV データの読み書き - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/encode-csv-or-tsv-data/" />
		<id>tag:text.Baldanders.info,2018-10-14:/golang/encode-csv-or-tsv-data/</id>
		<published>2018-10-14T05:41:02+09:00</published>
		<updated>2018-10-14T11:20:56+09:00</updated>
		<summary>関数型言語に慣れている人から見ると Go 言語が標準で提供しているコンテナ操作のアレコレはまだるっこしい感じに見えると思う。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は小ネタ。
以下の記事を見て，思いつきで書いてみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kei0425/items/e095bc8435429a22a002&#34;&gt;tsvファイルの入出力を簡単にする技&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「Python ならこんなに簡単に書けるのに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で書いたらワケワカメだよ」という，まぁよくある DIS り記事なのだが，関数型言語に慣れている人から見ると &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;が標準で提供しているコンテナ操作のアレコレはまだるっこしい感じに見えると思う。&lt;/p&gt;

&lt;p&gt;特に配列や連想配列については zip/unzip や map のような標準的で気の利いた高階関数は用意されておらず，頑張って汎用パッケージを作ってみたところで実用的なパフォーマンスが得られずに打ち捨てられてしまうのがオチのようである。&lt;/p&gt;

&lt;p&gt;リンク先の例にしても，結局 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では for 文で回していかざるを得ないのだから連想配列に格納するという発想自体を捨ててしまったほうが得策である。&lt;/p&gt;

&lt;p&gt;というわけで，手遊びで書いてみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/csvtable&#34;&gt;GitHub - spiegel-im-spiegel/csvtable: Demonstration for CSV/TSV Access&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSV/TSV は要するに行・列の2次元配列なんだから，以下のクラスを作って連想配列ではなく普通の配列で管理する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//CsvTable is CSV/TSV table class
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CsvTable&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;col&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;[][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;その上でデータの読み込み時にヘッダの列名とカラム位置の関係を &lt;code&gt;col&lt;/code&gt; フィールドに保持ってしまえばいいのである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//New returns new CsvTable instance
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CsvTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CsvTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;readAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CsvTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;readAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CsvTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;dt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ReadAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;main 側は以下のようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;encoding/csv&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/spiegel-im-spiegel/csvtable&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NArg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ErrInvalid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NArg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stdin&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//maybe file path
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Comma&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LazyQuotes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// a quote may appear in an unquoted field and a non-doubled quote may appear in a quoted field.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TrimLeadingSpace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// leading white space in a field is ignored.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;csvtable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//fmt.Println(&amp;#34;cols :&amp;#34;, ct.Cols())
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//fmt.Println(&amp;#34;rows :&amp;#34;, ct.Rows())
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Comma&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Comma&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//w.UseCRLF = true
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//header, body := ct.OutputAll()
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;city/temperature&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WriteAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;念の為このパッケージの欠点を挙げておくと， CSV/TSV ファイルの内容の総てを一旦メモリ内に読み込んでいるため，巨大データを扱えないという問題がある。
実際問題として CSV/TSV データは数万行から数十万行の規模になることもザラにあるため，このままでは全く実用に耐えられないだろう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/transform-character-encoding/&#34;&gt;文字エンコーディング変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/array-and-slice/&#34;&gt;配列と Slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/map/&#34;&gt;Map の話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/greatest-common-divisor/&#34;&gt;最大公約数と関数型プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 1.11 のリリースと「モジュール」機能の実験的サポート - release</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/release/2018/09/go-1_11-ise-released/" />
		<id>tag:text.Baldanders.info,2018-09-26:/release/2018/09/go-1_11-ise-released/</id>
		<published>2018-09-26T13:53:04+09:00</published>
		<updated>2018-12-14T22:10:04+09:00</updated>
		<summary>「モジュール」とは，これまで vgo (Versioned Go) として開発が進められてきたものである。この機能について簡単に紹介する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="http://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;1ヶ月も前の話で申し訳ないが，先月末に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラ 1.11 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go1.11&#34;&gt;Go 1.11 is released - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.11&#34;&gt;Go 1.11 Release Notes - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主な変更点は以下の2つ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebAssembly へのコンパイルをサポート&lt;/li&gt;
&lt;li&gt;「モジュール」機能の実験的サポート&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうち，今回は「モジュール」機能のサポートについて簡単に紹介する。&lt;/p&gt;

&lt;p&gt;「モジュール」とは，これまで vgo (Versioned Go) として開発が進められてきたもので&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/go-and-versioning/&#34;&gt;vgo (Versioned Go) に関する覚え書き&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この成果が正式に組み込まれる。
バージョン 1.11 で「モジュール」機能を有効にするには環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; を &lt;code&gt;on&lt;/code&gt; または &lt;code&gt;auto&lt;/code&gt; にセットする。&lt;/p&gt;

&lt;p&gt;ちなみに，環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; を &lt;code&gt;auto&lt;/code&gt; にセットした場合， GOPATH 下のコードについては以前と同じように動作するが，それ以外の場所では「モジュール」機能が有効になる。
1.11 では環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; が既定で auto になっている。&lt;/p&gt;

&lt;p&gt;試しに以下のソースファイル &lt;code&gt;hello.go&lt;/code&gt; を適当なフォルダに作成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;rsc.io/quote&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行しても &lt;code&gt;rsc.io/quote&lt;/code&gt; パッケージがないと怒られてコンパイルエラーになる。
ここまでは従来どおりの動作。&lt;/p&gt;

&lt;p&gt;次に以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init hello
go: creating new go.mod: module hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このコマンドで &lt;code&gt;go.mod&lt;/code&gt; ファイルが生成される。
中身は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;hello.go&lt;/code&gt; ファイルはモジュール &lt;code&gt;hello&lt;/code&gt; のコードとして定義された。&lt;/p&gt;

&lt;p&gt;モジュール名はパッケージのインポート・パスと同じく&lt;a href=&#34;https://golang.org/cmd/go/#hdr-Remote_import_paths&#34;&gt;リポジトリのパスと連動&lt;/a&gt;している。
たとえば &lt;code&gt;hello.go&lt;/code&gt; ファイルをリポジトリ &lt;code&gt;https://github.com/spiegel-im-spiegel/hello&lt;/code&gt; で公開・管理するなら，モジュール名も &lt;code&gt;github.com/spiegel-im-spiegel/hello&lt;/code&gt; となる。&lt;/p&gt;

&lt;p&gt;では，この状態でコードを実行してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run hello.go
go: finding rsc.io/quote v1.5.2
go: downloading rsc.io/quote v1.5.2
go: finding rsc.io/sampler v1.3.0
go: finding golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
go: downloading rsc.io/sampler v1.3.0
go: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
Hello, world.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自動的に &lt;code&gt;rsc.io/quote&lt;/code&gt; およびその依存パッケージがモジュールとして読み込まれていることが分かると思う。
このとき &lt;code&gt;go.mod&lt;/code&gt; ファイルを見ると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module hello

require rsc.io/quote v1.5.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依存モジュールおよびそのバージョンの記述が追加されていることが分かる。
モジュール間の依存関係を見るには以下のコマンドを実行する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dot1&#34;&gt;&lt;a href=&#34;#fn:dot1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod graph
hello rsc.io/quote@v1.5.2
rsc.io/quote@v1.5.2 rsc.io/sampler@v1.3.0
rsc.io/sampler@v1.3.0 golang.org/x/text@v0.0.0-20170915032832-14c0d48ead0c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，読み込まれたモジュールの実体は &lt;code&gt;$GOPATH/mod&lt;/code&gt; フォルダ以下に格納されている。&lt;/p&gt;

&lt;p&gt;更に &lt;code&gt;go.mod&lt;/code&gt; ファイルを以下のように書き換えてみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module hello

require (
	golang.org/x/text v0.3.0
	rsc.io/quote v1.5.2
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この状態で，再び実行してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run hello.go
go: finding golang.org/x/text v0.3.0
go: downloading golang.org/x/text v0.3.0
Hello, world.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;golang.org/x/text&lt;/code&gt; モジュールの v0.3.0 が読み込まれていることが分かる。&lt;/p&gt;

&lt;p&gt;既存のパッケージをモジュールとして定義する際， &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; で管理していると移行がスムーズになる。
自作の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; で試してみよう。&lt;/p&gt;

&lt;p&gt;まずはリポジトリの内容を適当なフォルダに展開し &lt;code&gt;go.mod&lt;/code&gt; ファイルを作成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init github.com/spiegel-im-spiegel/gpgpdump
go: creating new go.mod: module github.com/spiegel-im-spiegel/gpgpdump
go: copying requirements from Gopkg.lock&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依存情報を &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; の &lt;code&gt;Gopkg.lock&lt;/code&gt; ファイルから取得しているのが分かるだろう。
生成された &lt;code&gt;go.mod&lt;/code&gt; ファイルの内容は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/spiegel-im-spiegel/gpgpdump

require (
	github.com/BurntSushi/toml v0.3.0
	github.com/inconshreveable/mousetrap v1.0.0
	github.com/pkg/errors v0.8.0
	github.com/spf13/cobra v0.0.3
	github.com/spf13/pflag v1.0.2
	github.com/spiegel-im-spiegel/gocli v0.8.0
	golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新しいバージョンがリリースされていないか調べる場合は以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go list -m -u all
go: finding github.com/pkg/errors v0.8.0
go: finding github.com/spf13/pflag v1.0.2
go: finding github.com/spf13/cobra v0.0.3
go: finding github.com/BurntSushi/toml v0.3.0
go: finding github.com/spiegel-im-spiegel/gocli v0.8.0
go: finding github.com/inconshreveable/mousetrap v1.0.0
go: finding golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87
go: finding golang.org/x/crypto latest
go: finding github.com/BurntSushi/toml v0.3.1
github.com/spiegel-im-spiegel/gpgpdump
github.com/BurntSushi/toml v0.3.0 [v0.3.1]
github.com/inconshreveable/mousetrap v1.0.0
github.com/pkg/errors v0.8.0
github.com/spf13/cobra v0.0.3
github.com/spf13/pflag v1.0.2
github.com/spiegel-im-spiegel/gocli v0.8.0
golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87 [v0.0.0-20180910181607-0e37d006457b]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この情報を元に &lt;code&gt;go.mod&lt;/code&gt; ファイルを書き換えてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/spiegel-im-spiegel/gpgpdump

require (
&lt;span class=&#34;hl&#34;&gt;	github.com/BurntSushi/toml v0.3
&lt;/span&gt;	github.com/inconshreveable/mousetrap v1.0.0
	github.com/pkg/errors v0.8.0
	github.com/spf13/cobra v0.0.3
	github.com/spf13/pflag v1.0.2
	github.com/spiegel-im-spiegel/gocli v0.8.0
&lt;span class=&#34;hl&#34;&gt;	golang.org/x/crypto latest
&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで最新モジュールを取得できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod download
go: finding golang.org/x/crypto latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;取得後の &lt;code&gt;go.mod&lt;/code&gt; ファイルは以下のように書き換えられる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/spiegel-im-spiegel/gpgpdump

require (
&lt;span class=&#34;hl&#34;&gt;	github.com/BurntSushi/toml v0.3.1
&lt;/span&gt;	github.com/inconshreveable/mousetrap v1.0.0
	github.com/pkg/errors v0.8.0
	github.com/spf13/cobra v0.0.3
	github.com/spf13/pflag v1.0.2
	github.com/spiegel-im-spiegel/gocli v0.8.0
&lt;span class=&#34;hl&#34;&gt;	golang.org/x/crypto v0.0.0-20180910181607-0e37d006457b
&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;んー。
これで &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; からの置き換えができそうかな。
ようやく「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」が解消されるかねぇ。&lt;/p&gt;

&lt;h2 id=&#34;2018-10-04-追記-go-1-11-1-がリリース&#34;&gt;【2018-10-04 追記】 Go 1.11.1 がリリース&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;“go1.11.1 (released 2018/10/01) includes fixes to the compiler, documentation, go command, runtime, and the &lt;code&gt;crypto/x509&lt;/code&gt;, &lt;code&gt;encoding/json&lt;/code&gt;, &lt;code&gt;go/types&lt;/code&gt;, &lt;code&gt;net&lt;/code&gt;, &lt;code&gt;net/http&lt;/code&gt;, and &lt;code&gt;reflect&lt;/code&gt; packages. See the &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.1&#34;&gt;Go 1.11.1 milestone&lt;/a&gt; on our issue tracker for details.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.11.minor&#34;&gt;Release History - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;2018-11-03-追記-go-1-11-2-がリリース&#34;&gt;【2018-11-03 追記】 Go 1.11.2 がリリース&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;“go1.11.2 (released 2018/11/02) includes fixes to the compiler, linker, documentation, go command, and the database/sql and go/types packages. See the &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.2&#34;&gt;Go 1.11.2 milestone&lt;/a&gt; on our issue tracker for details.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.11.minor&#34;&gt;Release History - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/pokeh/items/c6511ca15c9a33b48fcc&#34;&gt;Go 1.11 リリースノート（和訳） - Qiita&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://dave.cheney.net/2018/07/16/using-go-modules-with-travis-ci&#34;&gt;Using Go modules with Travis CI | Dave Cheney&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/spiegel-im-spiegel/items/5cb1587cb55d6f6a34d7&#34;&gt;GOPATH モードからモジュール対応モードへ移行せよ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dot1&#34;&gt;是非とも dot 言語で出力してほしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dot1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
