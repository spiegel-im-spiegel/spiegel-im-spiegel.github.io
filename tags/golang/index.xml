<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of golang - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/golang/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/golang/index.xml" />
	<id>tag:text.Baldanders.info,2020-12-11:/tags</id>
	<updated>2020-12-11T20:05:28+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>#golang のエラー・ハンドリングについて Zenn 本を書いてしまった</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/12/error-handling-in-golang/" />
		<id>tag:text.Baldanders.info,2020-12-11:/remark/2020/12/error-handling-in-golang/</id>
		<published>2020-12-11T11:05:28+00:00</published>
		<updated>2020-12-11T11:14:16+00:00</updated>
		<summary>これで私も単著持ちだ（違う）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;というわけで &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜エンジニアのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; で本を出してみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/books/error-handling-in-golang&#34;&gt;Go のエラーハンドリング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これで私も単著持ちだ（違う）&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; title=&#34;Creative Commons — Attribution-ShareAlike 4.0 International — CC BY-SA 4.0&#34;&gt;CC BY-SA &lt;span&gt;&lt;i class=&#34;fab fa-creative-commons&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fab fa-creative-commons-by&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fab fa-creative-commons-sa&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt; で公開してるので（要求される条件を満たしていれば）自由にパクって構わない。&lt;/p&gt;
&lt;p&gt;いや，ちょっとした思いつきだったのよ。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;Go のエラー・ハンドリングについて自ブログで記事にしたのは，もう5年も前だが […] 補足記事を別途書いたりもしているが，起点となるこの記事が古すぎて微妙すぎる。いっそのこと全面改訂するか&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://zenn.dev/spiegel/scraps/1a1ede0f7df6eb#comment-a93126569b925e&#34;&gt;Golang のエラー・ハンドリングについて本を書いてしまった（改題）&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;それで，実際にこのブログの記事として書き始めたんだけど&amp;hellip;&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;なんか大作の予感がするよw ちうわけで，方針変更。 Zenn でデジタル本書きます。これなら「全部入り」で書けるだろう&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://zenn.dev/spiegel/scraps/1a1ede0f7df6eb#comment-231f1aee0c1726&#34;&gt;Golang のエラー・ハンドリングについて本を書いてしまった（改題）&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;というわけで &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜エンジニアのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; の Book 形式で書き直したんだけど，ホントに2万字強の大作になっちゃったよ。
誰だよ，ブログ記事で改訂版を書こうとか考えた奴。
オレだよ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;カバー絵はいいのが思い浮かばなかったので，以前に &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34; title=&#34;Creative Commons — CC0 1.0 Universal&#34;&gt;CC0 &lt;span&gt;&lt;i class=&#34;fab fa-creative-commons&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fab fa-creative-commons-zero&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt; で公開していたのを使いまわした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/aozora-cover&#34;&gt;spiegel-im-spiegel/aozora-cover: Book Cover images for Aozora-bunko&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;お金を取れるような文章ではないので無料にしているが寄付（サポート）は歓迎！ ご笑覧あれ。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20200921-unfinished-book&#34;&gt;完成しない本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>io.Copy を上限付きで実行する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/copying-with-upper-limit/" />
		<id>tag:text.Baldanders.info,2020-12-06:/golang/copying-with-upper-limit/</id>
		<published>2020-12-06T05:10:36+00:00</published>
		<updated>2020-12-06T05:15:40+00:00</updated>
		<summary>「データ解凍爆弾」への対処</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;「&lt;a href=&#34;https://qiita.com/wagi0716/items/362700f84881ca27521a&#34; title=&#34;もうlintに怒られない！Goでより安全にzipを扱うために（Potential DoS vulnerability via decompression bombエラーへの対処法） - Qiita&#34;&gt;もうlintに怒られない！Goでより安全にzipを扱うために&lt;/a&gt;」を読んで「なるほど！」と思ったが，（おそらくコードをかなり端折ってるんだと思うが）サンプル・コードがツッコミどころ満載なので，うちのブログでも覚え書として記しておく。
&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;自作ツール&lt;/a&gt;でも圧縮データの解凍処理を使ってるしね。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/securego/gosec&#34; title=&#34;securego/gosec: Golang security checker&#34;&gt;gosec&lt;/a&gt; について&lt;/h2&gt;
&lt;p&gt;ところで，上述のリンク先で使われている &lt;a href=&#34;https://github.com/securego/gosec&#34; title=&#34;securego/gosec: Golang security checker&#34;&gt;gosec&lt;/a&gt; は統合 linter である &lt;a href=&#34;https://github.com/golangci/golangci-lint&#34; title=&#34;golangci/golangci-lint: Fast linters Runner for Go&#34;&gt;golangci-lint&lt;/a&gt; から呼び出すことができるが，既定では無効になっている。
有効にするには &lt;code&gt;--enable&lt;/code&gt; オプションで &lt;a href=&#34;https://github.com/securego/gosec&#34; title=&#34;securego/gosec: Golang security checker&#34;&gt;gosec&lt;/a&gt; を指定すればよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ golangci-lint run --enable gosec ./...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/securego/gosec&#34; title=&#34;securego/gosec: Golang security checker&#34;&gt;gosec&lt;/a&gt; が既定で有効になっていないのは，特に &lt;a href=&#34;https://golang.org/pkg/unsafe/&#34; title=&#34;unsafe - The Go Programming Language&#34;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; 標準パッケージを使っている場合の誤検知が多すぎるかららしい。
私の環境で試してみたが処理速度的には問題ないようなので，一度は試してみてもいいかもしれない。&lt;/p&gt;
&lt;h2&gt;最初のサンプル・コード&lt;/h2&gt;
&lt;p&gt;まずは起点となるサンプル・コードを挙げておこう。
こんな感じでどうだろう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;compress/zlib&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;zw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;zlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;zw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;zw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;extract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;zlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello world\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//raw data
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;zbuf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//compress raw data
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;zbuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//display compressed data
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;zbuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d bytes: %v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//extract from compressed data
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;extract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//display extracted data
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最初に紹介した記事で使っている &lt;a href=&#34;https://golang.org/pkg/archive/zip/&#34; title=&#34;zip - The Go Programming Language&#34;&gt;&lt;code&gt;archive/zip&lt;/code&gt;&lt;/a&gt; パッケージはファイルシステムを含んでいるので，今回はもっとシンプルに &lt;a href=&#34;https://golang.org/pkg/compress/zlib/&#34; title=&#34;zlib - The Go Programming Language&#34;&gt;&lt;code&gt;compress/zlib&lt;/code&gt;&lt;/a&gt; パッケージ（&lt;a href=&#34;https://tools.ietf.org/html/rfc1950&#34; title=&#34;RFC 1950 - ZLIB Compressed Data Format Specification version 3.3&#34;&gt;RFC 1950&lt;/a&gt; 準拠）を使ってみた。
これならデータの圧縮と解凍のみ注視できるだろう。&lt;/p&gt;
&lt;p&gt;このコードを実行すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run sample.go 
24 bytes: [120 156 242 72 205 201 201 87 40 207 47 202 73 225 2 4 0 0 255 255 28 242 4 71]
Hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と一応は問題なく動く。
これで準備OK。&lt;/p&gt;
&lt;h2&gt;Decompression Bomb Vulnerability&lt;/h2&gt;
&lt;p&gt;では，このコードに対して lint をかけてみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ golangci-lint run --enable gosec ./...
sample1.go:27:15: G110: Potential DoS vulnerability via decompression bomb (gosec)
	if _, err := io.Copy(dst, r); err != nil {
	             ^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;おー，出た出た。&lt;/p&gt;
&lt;p&gt;“Decompression bomb” というのは&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;A &lt;strong&gt;zip bomb&lt;/strong&gt;, also known as a &lt;strong&gt;zip of death&lt;/strong&gt; or &lt;strong&gt;decompression bomb&lt;/strong&gt;, is a malicious &lt;a href=&#34;https://en.wikipedia.org/wiki/Archive_file&#34;&gt;archive file&lt;/a&gt; designed to crash or render useless the program or system reading it. It is often employed to disable &lt;a href=&#34;https://en.wikipedia.org/wiki/Antivirus_software&#34;&gt;antivirus software&lt;/a&gt;, in order to create an opening for more traditional viruses&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Zip_bomb&#34;&gt;Zip bomb - Wikipedia&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ということで，主にウイルス対策ツールをターゲットにした攻撃手段らしい。
まぁ &lt;code&gt;42.zip&lt;/code&gt; みたいなファイルを解凍したら普通にシステムが死ぬと思うけど（笑）&lt;/p&gt;
&lt;h2&gt;解凍処理の改修&lt;/h2&gt;
&lt;p&gt;“Decompression bomb” を緩和する方法はいくつかあるようだが，いちばん安直なのは &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Copy()&lt;/code&gt; 関数に上限を設けることだろう。
そのための関数として &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.CopyN()&lt;/code&gt; が用意されている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CopyN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;written&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;機能としては&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;&lt;code&gt;CopyN&lt;/code&gt; copies &lt;code&gt;n&lt;/code&gt; bytes (or until an error) from &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt;. It returns the number of bytes copied and the earliest error encountered while copying. On return, written &lt;code&gt;== n&lt;/code&gt; if and only if &lt;code&gt;err == nil&lt;/code&gt;&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/pkg/io/#CopyN&#34;&gt;io - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ということで&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;err == nil&lt;/code&gt; なら上限いっぱいまで読み込み完了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;err&lt;/code&gt; の値が &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.EOF&lt;/code&gt; ならストリームの終端まで読み込み完了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;err&lt;/code&gt; の値が &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.EOF&lt;/code&gt; 以外ならエラー&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;と見なすことができそうだ。
そこで最初のサンプルコードの &lt;code&gt;extract()&lt;/code&gt; 関数を以下のように書き直す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxSize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//1GB
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ErrTooLarge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;too laege decompressed data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;extract&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;zlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CopyN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Is&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;EOF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ErrTooLarge&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とりあえずコピーの上限は1GBとした（深い意味はない）。
これで少なくとも &lt;a href=&#34;https://github.com/securego/gosec&#34; title=&#34;securego/gosec: Golang security checker&#34;&gt;gosec&lt;/a&gt; に怒られることはなくなる。&lt;/p&gt;
&lt;p&gt;これ仕込むのかぁ。
頑張ろう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://securego.io/&#34;&gt;Secure Go · A project devoted to secure programming in the Go language&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/compress-data/&#34;&gt;Go 言語でデータ圧縮と解凍&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>Go 1.15.6 がリリースされた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/12/go-1_15_6-is-released/" />
		<id>tag:text.Baldanders.info,2020-12-05:/release/2020/12/go-1_15_6-is-released/</id>
		<published>2020-12-05T01:01:58+00:00</published>
		<updated>2020-12-05T01:02:41+00:00</updated>
		<summary>セキュリティ・アップデートはなし。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.15.6 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/golang-announce/c/0kN8l6MprTo&#34;&gt;Go 1.15.6 and Go 1.14.13 are released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;セキュリティ・アップデートはなし。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;go1.15.6 (released 2020/12/03) includes fixes to the compiler, linker, runtime, the go command, and the &lt;code&gt;io&lt;/code&gt; package. See the &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.6+label%3ACherryPickApproved&#34;&gt;Go 1.15.6 milestone&lt;/a&gt; on our issue tracker for details&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.15.minor&#34;&gt;Release History - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;例によって &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; の APT で管理している &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラは古いので，&lt;a href=&#34;https://golang.org/dl/&#34; title=&#34;Downloads - The Go Programming Language&#34;&gt;ダウンロードページ&lt;/a&gt;からバイナリ（&lt;a href=&#34;https://golang.org/dl/go1.15.6.linux-amd64.tar.gz&#34;&gt;&lt;code&gt;go1.15.6.linux-amd64.tar.gz&lt;/code&gt;&lt;/a&gt;）を取ってきて手動でインストールすることを強く推奨する。
以下は手動での作業例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src
$ sudo curl -L &amp;#34;https://golang.org/dl/go1.15.6.linux-amd64.tar.gz&amp;#34; -O
$ cd ..
$ sudo unlink go # 以前の Go が入っている場合
$ sudo tar xvf src/go1.15.6.linux-amd64.tar.gz
$ sudo mv go go1.15.6
$ sudo ln -s go1.15.6 go
$ go version # /usr/local/go/bin にパスが通っている場合
go version go1.15.6 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;アップデートは計画的に。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>GNKF: NKF ぽいなにか の v0.3.0 をリリースした</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/11/gnkf-v0_3_0-is-released/" />
		<id>tag:text.Baldanders.info,2020-11-28:/release/2020/11/gnkf-v0_3_0-is-released/</id>
		<published>2020-11-28T08:57:55+00:00</published>
		<updated>2020-11-28T08:58:42+00:00</updated>
		<summary>このバージョンで UTF-8 テキスト中の BOM を除去する機能を追加した。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;における文字列処理の習作 &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34; title=&#34;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; の v0.3.0 をリリースした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf/releases/tag/v0.3.0&#34;&gt;Release v0.3.0 · spiegel-im-spiegel/gnkf · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このバージョンで UTF-8 テキスト中の BOM (Byte Order Mark; U+FEFF) を除去する機能を追加した。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf remove-bom -h
Remove BOM character in UTF-8 string.

Usage:
  gnkf remove-bom [flags]

Aliases:
  remove-bom, rbom, rb

Flags:
  -f, --file string     path of input text file
  -h, --help            help for remove-bom
  -o, --output string   path of output file

Global Flags:
      --debug   for debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo ﻿Hello | gnkf dump
0xef, 0xbb, 0xbf, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x0a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな感じに BOM が付いてるテキストに対し&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo ﻿Hello | gnkf rb | gnkf dump
0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x0a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じで BOM を除去できる。&lt;/p&gt;
&lt;p&gt;（&lt;a href=&#34;https://catalog.data.metro.tokyo.lg.jp/dataset/t000010d0000000068&#34; title=&#34;東京都 新型コロナウイルス陽性患者発表詳細 - データセット - 東京都オープンデータカタログサイト&#34;&gt;東京都の COVID-2019 オープンデータ&lt;/a&gt;とか） CSV ファイル等に BOM が付いてるものがあって，前々から「誰がこんな要らんことしてんねん」と思っていたが，仕事で再び MS Office ドキュメントを弄るようになって気がついた。
&lt;strong&gt;おまえか！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ことあるごとに言っているが， UTF-8 はオクテット単位のストリームなのでエンディアンを指示する BOM は不要である。
てか，付けるべきではない。
大きさを持たないかつ意味のない文字コードを付加するのはリスクである。&lt;/p&gt;
&lt;p&gt;昔は文字列の先頭に BOM があるかどうかで文字エンコーディングを判定する手抜き実装もあったが，流石にそんな頭の悪いシステムはなくなっただろう。&lt;/p&gt;
&lt;p&gt;なお &lt;code&gt;enc&lt;/code&gt;, &lt;code&gt;norm&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;kana&lt;/code&gt; の各サブコマンドでも &lt;code&gt;--remove-bom&lt;/code&gt; オプション（短縮名 &lt;code&gt;-b&lt;/code&gt;）を付けることで，前処理として BOM の除去を行うようにした。&lt;/p&gt;
&lt;p&gt;全文をいったんメモリに読み込んで変換処理を行っているので，巨大テキストを処理する際はご注意を。
習作（study）として作ったツールを仕事で使う羽目になるとは &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ホンマ UTF-8 の BOM は滅びればいいのに。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/gnkf/&#34;&gt;GNKF: Network Kanji Filter by Golang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>gpgpdump v0.10.0 をリリースした</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/11/gpgpdump-v0_10_0-is-released/" />
		<id>tag:text.Baldanders.info,2020-11-22:/release/2020/11/gpgpdump-v0_10_0-is-released/</id>
		<published>2020-11-22T04:33:47+00:00</published>
		<updated>2020-11-22T04:34:28+00:00</updated>
		<summary>このバージョンで github および fetch サブコマンドを追加した。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; パケットの内容を可視化する &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; の v0.10.0 をリリースした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump/releases/tag/v0.10.0&#34;&gt;Release v0.10.0 · spiegel-im-spiegel/gpgpdump · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このバージョンで &lt;code&gt;github&lt;/code&gt; および &lt;code&gt;fetch&lt;/code&gt; サブコマンドを追加した。&lt;/p&gt;
&lt;p&gt;たとえば &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; リポジトリのコミットやタグに&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./verified-signature.png&#34;&gt;&lt;img src=&#34;./verified-signature.png&#34; srcset=&#34;./verified-signature.png 547w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;のような署名情報があるときに&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpgpdump github spiegel-im-spiegel --keyid B4DA3BAE7E20B81C -u
Public-Key Packet (tag 6) (1198 bytes)
    Version: 4 (current)
    Public key creation time: 2013-04-28T10:29:43Z
    Public-key Algorithm: DSA (Digital Signature Algorithm) (pub 17)
    DSA p (3072 bits)
    DSA q (q is a prime divisor of p-1) (256 bits)
    DSA g (3070 bits)
    DSA y (= g^x mod p where x is secret) (3067 bits)
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとすれば，公開鍵の中身が見れる。&lt;/p&gt;
&lt;p&gt;ついでに &lt;code&gt;--raw&lt;/code&gt; オプションを付ければ，公開鍵そのものを取得することもできる。
まぁ &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; に登録してある公開鍵を &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; にまとめてインポートするなら，シンプルに&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --fetch-keys https://github.com/spiegel-im-spiegel.gpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とかすればいいのだが（笑）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fetch&lt;/code&gt; サブコマンドは URL を直接指定して OpenPGP パケット・データを取得できる。
たとえば &lt;a href=&#34;https://www.jpcert.or.jp/jpcert-pgp.html&#34; title=&#34;JPCERT コーディネーションセンター PGP公開鍵&#34;&gt;JPCERT/CC の公開鍵&lt;/a&gt;なら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpgpdump fetch https://www.jpcert.or.jp/keys/info-0x69ECE048.asc -u
Public-Key Packet (tag 6) (269 bytes)
    Version: 4 (current)
    Public key creation time: 2009-06-02T05:43:57Z
    Public-key Algorithm: RSA (Encrypt or Sign) (pub 1)
    RSA public modulus n (2048 bits)
    RSA public encryption exponent e (17 bits)
User ID Packet (tag 13) (29 bytes)
    User ID: JPCERT/CC &amp;lt;info@jpcert.or.jp&amp;gt;
Signature Packet (tag 2) (316 bytes)
    Version: 4 (current)
    Signiture Type: Generic certification of a User ID and Public-Key packet (0x10)
    Public-key Algorithm: RSA (Encrypt or Sign) (pub 1)
    Hash Algorithm: SHA-1 (hash 2)
    Hashed Subpacket (38 bytes)
        Preferred Symmetric Algorithms (sub 11) (3 bytes)
            Symmetric Algorithm: AES with 256-bit key (sym 9)
            Symmetric Algorithm: CAST5 (128 bit key, as per) (sym 3)
            Symmetric Algorithm: TripleDES (168 bit key derived from 192) (sym 2)
        Key Server Preferences (sub 23) (4 bytes)
            Flag: No-modify
        Key Flags (sub 27) (4 bytes)
            Flag: This key may be used to certify other keys.
            Flag: This key may be used to sign data.
            Flag: This key may be used to encrypt communications.
            Flag: This key may be used to encrypt storage.
            Flag: The private component of this key may be in the possession of more than one person.
        Preferred Compression Algorithms (sub 22) (2 bytes)
            Compression Algorithm: ZLIB &amp;lt;RFC1950&amp;gt; (comp 2)
            Compression Algorithm: ZIP &amp;lt;RFC1951&amp;gt; (comp 1)
        Features (sub 30) (4 bytes)
            Flag: Modification Detection (packets 18 and 19)
        Preferred Hash Algorithms (sub 21) (3 bytes)
            Hash Algorithm: SHA2-256 (hash 8)
            Hash Algorithm: SHA2-384 (hash 9)
            Hash Algorithm: SHA2-512 (hash 10)
        Signature Creation Time (sub 2): 2009-06-16T03:51:22Z
    Unhashed Subpacket (10 bytes)
        Issuer (sub 16): 0x317d97a469ece048
    Hash left 2 bytes
        cd 79
    RSA signature value m^d mod n (2047 bits)
Signature Packet (tag 2) (277 bytes)
    Version: 3 (old)
    Hashed material (5 bytes)
        Signiture Type: Generic certification of a User ID and Public-Key packet (0x10)
        Signature creation time: 2009-06-02T05:43:57Z
    Key ID: 0xe7734fa60c7bde12
    Public-key Algorithm: RSA (Encrypt or Sign) (pub 1)
    Hash Algorithm: SHA-1 (hash 2)
    Hash left 2 bytes
        e9 53
    RSA signature value m^d mod n (2047 bits)
Signature Packet (tag 2) (156 bytes)
    Version: 4 (current)
    Signiture Type: Generic certification of a User ID and Public-Key packet (0x10)
    Public-key Algorithm: RSA (Encrypt or Sign) (pub 1)
    Hash Algorithm: SHA-1 (hash 2)
    Hashed Subpacket (6 bytes)
        Signature Creation Time (sub 2): 2009-06-15T05:51:27Z
    Unhashed Subpacket (10 bytes)
        Issuer (sub 16): 0x8c756b2e2c94d4ed
    Hash left 2 bytes
        35 fd
    RSA signature value m^d mod n (1022 bits)
Public-Subkey Packet (tag 14) (269 bytes)
    Version: 4 (current)
    Public key creation time: 2009-06-02T05:43:57Z
    Public-key Algorithm: RSA (Encrypt or Sign) (pub 1)
    RSA public modulus n (2048 bits)
    RSA public encryption exponent e (17 bits)
Signature Packet (tag 2) (577 bytes)
    Version: 4 (current)
    Signiture Type: Subkey Binding Signature (0x18)
    Public-key Algorithm: RSA (Encrypt or Sign) (pub 1)
    Hash Algorithm: SHA-1 (hash 2)
    Hashed Subpacket (299 bytes)
        Signature Creation Time (sub 2): 2009-06-02T05:43:58Z
        Key Flags (sub 27) (4 bytes)
            Flag: This key may be used to encrypt communications.
            Flag: This key may be used to encrypt storage.
        Embedded Signature (sub 32) (284 bytes)
            Signature Packet (tag 2) (284 bytes)
                Version: 4 (current)
                Signiture Type: Primary Key Binding Signature (0x19)
                Public-key Algorithm: RSA (Encrypt or Sign) (pub 1)
                Hash Algorithm: SHA2-256 (hash 8)
                Hashed Subpacket (6 bytes)
                    Signature Creation Time (sub 2): 2009-06-02T05:43:57Z
                Unhashed Subpacket (10 bytes)
                    Issuer (sub 16): 0x09d704b753ba1622
                Hash left 2 bytes
                    71 2d
                RSA signature value m^d mod n (2048 bits)
    Unhashed Subpacket (10 bytes)
        Issuer (sub 16): 0x317d97a469ece048
    Hash left 2 bytes
        1d e2
    RSA signature value m^d mod n (2046 bits)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じに中身を見ることができる。
うわっ。
電子署名を埋め込んでるよ。&lt;/p&gt;
&lt;p&gt;さて，&lt;a href=&#34;https://zenn.dev/spiegel/scraps/4ced7e0004c6fa83f037&#34; title=&#34;gpgpdump のネタ帳&#34;&gt;次&lt;/a&gt;はどうするか。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/&#34;&gt;OpenPGP の実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/gpgpdump/&#34;&gt;OpenPGP パケットを可視化する gpgpdump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20201014-openpgp-pubkey-in-github&#34;&gt;GitHub に登録した OpenPGP 公開鍵を取り出す&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
</content>
	</entry><entry>
		<title>Go 1.15.5 のリリース【セキュリティ・アップデート】</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/11/go-1_15_5-is-released/" />
		<id>tag:text.Baldanders.info,2020-11-14:/release/2020/11/go-1_15_5-is-released/</id>
		<published>2020-11-14T03:24:32+00:00</published>
		<updated>2020-11-14T03:24:49+00:00</updated>
		<summary>今回は複数の脆弱性について改修されている。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://groups.google.com/g/golang-announce/c/kMa3eup0qhU&#34; title=&#34;[security] Go 1.15.5 and Go 1.14.12 pre-announcement&#34;&gt;予告&lt;/a&gt;通り， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.15.5 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/golang-announce/c/NpBGTTmKzpM&#34;&gt;[security] Go 1.15.5 and Go 1.14.12 are released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は複数の脆弱性について改修されている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://golang.org/pkg/math/big/&#34; title=&#34;big - The Go Programming Language&#34;&gt;math/big&lt;/a&gt;: panic during recursive division of very large numbers (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-28362&#34;&gt;CVE-2020-28362&lt;/a&gt;)&lt;/h2&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;A number of &lt;a href=&#34;https://pkg.go.dev/math/big#Int&#34;&gt;&lt;code&gt;math/big.Int&lt;/code&gt;&lt;/a&gt; methods (&lt;code&gt;Div&lt;/code&gt;, &lt;code&gt;Exp&lt;/code&gt;, &lt;code&gt;DivMod&lt;/code&gt;, &lt;code&gt;Quo&lt;/code&gt;, &lt;code&gt;Rem&lt;/code&gt;, &lt;code&gt;QuoRem&lt;/code&gt;, &lt;code&gt;Mod&lt;/code&gt;, &lt;code&gt;ModInverse&lt;/code&gt;, &lt;code&gt;ModSqrt&lt;/code&gt;, &lt;code&gt;Jacobi&lt;/code&gt;, and &lt;code&gt;GCD&lt;/code&gt;) can panic when provided crafted large inputs. For the panic to happen, the divisor or modulo argument must be larger than 3168 bits (on 32-bit architectures) or 6336 bits (on 64-bit architectures). Multiple &lt;a href=&#34;https://pkg.go.dev/math/big#Rat&#34;&gt;&lt;code&gt;math/big.Rat&lt;/code&gt;&lt;/a&gt; methods are similarly affected&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/g/golang-announce/c/NpBGTTmKzpM&#34;&gt;Go 1.15.5 and Go 1.14.12 are released&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/math/big/&#34; title=&#34;big - The Go Programming Language&#34;&gt;&lt;code&gt;math/big&lt;/code&gt;&lt;/a&gt; パッケージは暗号関連のパッケージと密な関係にあるため，暗号関係の処理全般にインパクトがあると考えたほうがいいだろう。&lt;/p&gt;
&lt;p&gt;（以下未稿）&lt;/p&gt;
&lt;h2&gt;cmd/go: arbitrary code execution at build time through cgo (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-28366&#34;&gt;CVE-2020-28366&lt;/a&gt;, &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-28367&#34;&gt;CVE-2020-28367&lt;/a&gt;)&lt;/h2&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/g/golang-announce/c/NpBGTTmKzpM&#34;&gt;Go 1.15.5 and Go 1.14.12 are released&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;うわっ，ヤベ！ 相変わらず cgo は（セキュリティ的に）鬼門だなぁ。&lt;/p&gt;
&lt;p&gt;（以下未稿）&lt;/p&gt;
&lt;h2&gt;例によって&amp;hellip;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; の APT で管理している &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラは古いので，&lt;a href=&#34;https://golang.org/dl/&#34; title=&#34;Downloads - The Go Programming Language&#34;&gt;ダウンロードページ&lt;/a&gt;からバイナリ（&lt;a href=&#34;https://golang.org/dl/go1.15.5.linux-amd64.tar.gz&#34;&gt;&lt;code&gt;go1.15.5.linux-amd64.tar.gz&lt;/code&gt;&lt;/a&gt;）を取ってきて手動でインストールすることを強く推奨する。
以下は手動での作業例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src
$ sudo curl -L &amp;#34;https://golang.org/dl/go1.15.5.linux-amd64.tar.gz&amp;#34; -O
$ cd ..
$ sudo unlink go # 以前の Go が入っている場合
$ sudo tar xvf src/go1.15.5.linux-amd64.tar.gz
$ sudo mv go go1.15.5
$ sudo ln -s go1.15.5 go
$ go version # /usr/local/go/bin にパスが通っている場合
go version go1.15.5 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;アップデートは計画的に。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>Go パッケージ／モジュールの依存関係可視化ツール Depm v0.3.0 をリリースした</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/11/depm-v0_3_0-is-released/" />
		<id>tag:text.Baldanders.info,2020-11-08:/release/2020/11/depm-v0_3_0-is-released/</id>
		<published>2020-11-08T08:14:01+00:00</published>
		<updated>2020-11-08T08:15:27+00:00</updated>
		<summary>これで個人的に欲しい機能は揃ったかな。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;気になる部分の修正といくつか機能追加を行った &lt;a href=&#34;https://github.com/spiegel-im-spiegel/depm&#34; title=&#34;spiegel-im-spiegel/depm: Visualize depndency packages and modules&#34;&gt;spiegel-im-spiegel/depm&lt;/a&gt; の v0.3.0 をリリースした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/depm/releases/tag/v0.3.0&#34;&gt;Release v0.3.0 · spiegel-im-spiegel/depm · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使い方については以下の記事を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/dependency-graph-for-golang-modules/&#34;&gt;Depm: Go 言語用モジュール依存関係可視化ツール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;気になる部分というのは，ツール内から &lt;code&gt;go list&lt;/code&gt; コマンドを呼び出している部分で，以下の問題に対応している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20201107-lookpath-by-golang&#34;&gt;Go でサブプロセスを起動する際は LookPath に気をつけろ！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これで個人的に欲しい機能は揃ったので少しペースを落とすか。
つか，ほとんどテストを書いてないんだよなぁ&amp;hellip;&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>Depm: Go 言語用モジュール依存関係可視化ツール</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/dependency-graph-for-golang-modules/" />
		<id>tag:text.Baldanders.info,2020-11-08:/release/dependency-graph-for-golang-modules/</id>
		<published>2020-11-08T07:55:50+00:00</published>
		<updated>2020-11-08T08:15:27+00:00</updated>
		<summary> Go言語のパッケージまたはモジュール間の依存関係を可視化するコマンドラインツール</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/depm&#34; title=&#34;spiegel-im-spiegel/depm: Visualize depndency packages and modules&#34;&gt;spiegel-im-spiegel/depm&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt;言語のパッケージまたはモジュール間の依存関係を可視化するコマンドラインツールである。
以下のように依存関係を図にすることも可能である。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./output3.png&#34;&gt;&lt;img src=&#34;./output3.png&#34; srcset=&#34;./output3.png 2534w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;以降で &lt;a href=&#34;https://github.com/spiegel-im-spiegel/depm&#34; title=&#34;spiegel-im-spiegel/depm: Visualize depndency packages and modules&#34;&gt;spiegel-im-spiegel/depm&lt;/a&gt; について簡単に紹介する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/depm/actions&#34;&gt;&lt;img src=&#34;https://github.com/spiegel-im-spiegel/depm/workflows/vulns/badge.svg&#34; alt=&#34;check vulns&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/spiegel-im-spiegel/depm/actions&#34;&gt;&lt;img src=&#34;https://github.com/spiegel-im-spiegel/depm/workflows/lint/badge.svg&#34; alt=&#34;lint status&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://raw.githubusercontent.com/spiegel-im-spiegel/depm/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-blue.svg&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/spiegel-im-spiegel/depm/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/spiegel-im-spiegel/depm.svg&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;簡単な使い方&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;-h&lt;/code&gt; オプションで簡単な使い方が表示される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ depm -h
Visualize depndency packages and modules.

Usage:
  depm [flags]
  depm [command]

Available Commands:
  help        Help about any command
  list        list modules
  module      analyze depndency modules
  package     analyze depndency packages
  version     print the version number

Flags:
      --cgo-enabled string   set CGO_ENABLED environment variable
      --debug                for debug
      --goarch string        set GOARCH environment variable
      --goos string          set GOOS environment variable
  -h, --help                 help for depm

Use &amp;#34;depm [command] --help&amp;#34; for more information about a command.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;では，コマンドごとに見ていく。&lt;/p&gt;
&lt;h3&gt;パッケージ間の依存関係を調べる&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;depm package&lt;/code&gt; コマンドはパッケージ単位で依存関係を調べて結果を出力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ depm package -h
analyze depndency packages.

Usage:
  depm package [flags] [package import path]

Aliases:
  package, pkg, p

Flags:
      --dot                 output by DOT language
      --dot-config string   config file for DOT language
  -h, --help                help for package
  -i, --include-internal    include internal packages
  -s, --include-standard    include standard Go library

Global Flags:
      --cgo-enabled string   set CGO_ENABLED environment variable
      --debug                for debug
      --goarch string        set GOARCH environment variable
      --goos string          set GOOS environment variable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;github.com/spiegel-im-spiegel/depm&lt;/code&gt; パッケージを調べる場合は以下のコマンドラインとなる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ depm package github.com/spiegel-im-spiegel/depm | jq .
[
  {
    &amp;#34;Package&amp;#34;: {
      &amp;#34;ImportPath&amp;#34;: &amp;#34;github.com/spf13/cobra&amp;#34;,
      &amp;#34;Module&amp;#34;: {
        &amp;#34;Path&amp;#34;: &amp;#34;github.com/spf13/cobra&amp;#34;,
        &amp;#34;Version&amp;#34;: &amp;#34;v1.1.1&amp;#34;
      }
    },
    &amp;#34;Deps&amp;#34;: [
      {
        &amp;#34;ImportPath&amp;#34;: &amp;#34;github.com/spf13/pflag&amp;#34;,
        &amp;#34;Module&amp;#34;: {
          &amp;#34;Path&amp;#34;: &amp;#34;github.com/spf13/pflag&amp;#34;,
          &amp;#34;Version&amp;#34;: &amp;#34;v1.0.5&amp;#34;
        }
      }
    ]
  },
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出力は JSON 形式なので &lt;a href=&#34;https://stedolan.github.io/jq/&#34; title=&#34;jq&#34;&gt;jq&lt;/a&gt; コマンド等で加工可能である。
JSON 出力の構造は以下の構造体 &lt;code&gt;nodeJSON&lt;/code&gt; の配列で表される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nodeJSON&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Package&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;packageJSON&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Deps&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;packageJSON&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;packageJSON&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ImportPath&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Internal&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;        &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;CGO&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;        &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Unsafe&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;        &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Module&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;moduleJSON&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;moduleJSON&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Version&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CGO に依存するパッケージは &lt;code&gt;CGO&lt;/code&gt; フラグが &lt;code&gt;true&lt;/code&gt; になる。
同様に &lt;a href=&#34;https://golang.org/pkg/unsafe/&#34; title=&#34;unsafe - The Go Programming Language&#34;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; を使っているパッケージでも &lt;code&gt;Unsafe&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; になる。
また &lt;code&gt;-i&lt;/code&gt; オプションを付けてコマンドを起動すると internal パッケージも結果に含まれるが，この場合は &lt;code&gt;Internal&lt;/code&gt; フラグが &lt;code&gt;true&lt;/code&gt; になる。&lt;/p&gt;
&lt;p&gt;たとえば有名な &lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34; title=&#34;mattn/go-sqlite3: sqlite3 driver for go using database/sql&#34;&gt;&lt;code&gt;github.com/mattn/go-sqlite3&lt;/code&gt;&lt;/a&gt; パッケージなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ depm package &amp;#34;github.com/mattn/go-sqlite3&amp;#34; | jq .
[
  {
    &amp;#34;Package&amp;#34;: {
      &amp;#34;ImportPath&amp;#34;: &amp;#34;github.com/mattn/go-sqlite3&amp;#34;,
      &amp;#34;CGO&amp;#34;: true,
      &amp;#34;Unsafe&amp;#34;: true,
      &amp;#34;Module&amp;#34;: {
        &amp;#34;Path&amp;#34;: &amp;#34;github.com/mattn/go-sqlite3&amp;#34;,
        &amp;#34;Version&amp;#34;: &amp;#34;v1.14.4&amp;#34;
      }
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のようになる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--dot&lt;/code&gt; オプションで &lt;a href=&#34;https://graphviz.gitlab.io/_pages/doc/info/lang.html&#34; title=&#34;The DOT Language&#34;&gt;DOT&lt;/a&gt; 言語形式の出力にもできるため &lt;a href=&#34;http://www.graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の dot コマンドを使って図に変換することができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ depm package --dot github.com/spiegel-im-spiegel/depm | dot -Tpng -o output1.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行結果はこんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./output1.png&#34;&gt;&lt;img src=&#34;./output1.png&#34; srcset=&#34;./output1.png 4578w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;output1.png&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./output1.png&#34;&gt;output1.png&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;図の node と edge の属性については &lt;a href=&#34;http://www.graphviz.org/doc/info/attrs.html&#34;&gt;DOT 言語の仕様&lt;/a&gt;に従って簡単な装飾ができる。
TOML 形式で&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;fontname&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Inconsolata&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のような設定ファイルを作って&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ depm package --dot --dot-config sample.toml &amp;#34;github.com/spiegel-im-spiegel/depm&amp;#34; | dot -Tpng -o output2.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./output2.png&#34;&gt;&lt;img src=&#34;./output2.png&#34; srcset=&#34;./output2.png 4259w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;output2.png&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./output2.png&#34;&gt;output2.png&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;のようにできる。&lt;/p&gt;
&lt;p&gt;パッケージのインポート・パスを省略すると，カレント・ディレクトリのパッケージを捜査する（&lt;code&gt;go list&lt;/code&gt; コマンドで &lt;code&gt;all&lt;/code&gt; を指定したときと同じ動作）。&lt;/p&gt;
&lt;h3&gt;モジュール間の依存関係を調べる&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;depm module&lt;/code&gt; コマンドはモジュール単位で依存関係を調べて結果を出力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ depm module -h
analyze depndency modules.

Usage:
  depm module [flags] [package import path]

Aliases:
  module, mod, m

Flags:
  -u, --check-update        check updating module
      --dot                 output by DOT language
      --dot-config string   config file for DOT language
  -h, --help                help for module
  -i, --include-internal    include internal packages

Global Flags:
      --cgo-enabled string   set CGO_ENABLED environment variable
      --debug                for debug
      --goarch string        set GOARCH environment variable
      --goos string          set GOOS environment variable

$ depm module &amp;#34;github.com/spiegel-im-spiegel/depm&amp;#34; | jq .
[
  {
    &amp;#34;Module&amp;#34;: {
      &amp;#34;Path&amp;#34;: &amp;#34;github.com/spf13/cobra@v1.1.1&amp;#34;,
      &amp;#34;Packages&amp;#34;: [
        &amp;#34;github.com/spf13/cobra&amp;#34;
      ]
    },
    &amp;#34;Deps&amp;#34;: [
      {
        &amp;#34;Path&amp;#34;: &amp;#34;github.com/spf13/pflag@v1.0.5&amp;#34;,
        &amp;#34;Packages&amp;#34;: [
          &amp;#34;github.com/spf13/pflag&amp;#34;
        ]
      }
    ]
  },
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出力は同じく JSON 形式で，以下の構造体 &lt;code&gt;nodeJSON&lt;/code&gt; の配列で表される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nodeJSON&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Module&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;moduleJSON&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Deps&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;moduleJSON&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;moduleJSON&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Replace&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Latest&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Main&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;     &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;CGO&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;     &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Unsafe&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;     &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Packages&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CGO や &lt;a href=&#34;https://golang.org/pkg/unsafe/&#34; title=&#34;unsafe - The Go Programming Language&#34;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; パッケージに関するフラグは &lt;code&gt;depm package&lt;/code&gt; コマンドのときと同様である。
&lt;code&gt;-u&lt;/code&gt; オプションを付けると，新しいバージョンのモジュールがある場合に &lt;code&gt;Latest&lt;/code&gt; に情報がセットされる。&lt;/p&gt;
&lt;p&gt;depm package&lt;code&gt;コマンドのときと同じく&lt;/code&gt;-dot` オプションで &lt;a href=&#34;https://graphviz.gitlab.io/_pages/doc/info/lang.html&#34; title=&#34;The DOT Language&#34;&gt;DOT&lt;/a&gt; 言語形式の出力にできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ depm module --dot --dot-config sample.toml &amp;#34;github.com/spiegel-im-spiegel/depm&amp;#34; | dot -Tpng -o output3.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./output3.png&#34;&gt;&lt;img src=&#34;./output3.png&#34; srcset=&#34;./output3.png 2534w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;output3.png&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./output3.png&#34;&gt;output3.png&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;パッケージのインポート・パスを省略すると，カレント・ディレクトリのパッケージを捜査する。
&lt;code&gt;go list -m&lt;/code&gt; コマンドで &lt;code&gt;all&lt;/code&gt; を指定したときと同じ動作だが，実際にはリンクしない形式的な依存モジュールは出力されない。
基本的にコード内の &lt;code&gt;import&lt;/code&gt; に基づく依存関係のみ表示される。&lt;/p&gt;
&lt;h3&gt;モジュールの列挙&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;depm list&lt;/code&gt; コマンドは &lt;code&gt;go list -m&lt;/code&gt; コマンドと同じ形式でモジュールの列挙を行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ depm list -h
list modules, compatible &amp;#39;go list -m&amp;#39; command

Usage:
  depm list [flags] [package import path]

Aliases:
  list, lst, l

Flags:
  -u, --check-update   check updating module
  -h, --help           help for list
  -j, --json           output by JSON format

Global Flags:
      --cgo-enabled string   set CGO_ENABLED environment variable
      --debug                for debug
      --goarch string        set GOARCH environment variable
      --goos string          set GOOS environment variable

$ depm list &amp;#34;github.com/spiegel-im-spiegel/depm&amp;#34;
github.com/BurntSushi/toml v0.3.1
github.com/emicklei/dot v0.15.0
github.com/spf13/cobra v1.1.1
github.com/spf13/pflag v1.0.5
github.com/spiegel-im-spiegel/depm v0.3.0
github.com/spiegel-im-spiegel/errs v1.0.2
github.com/spiegel-im-spiegel/gocli v0.10.3
golang.org/x/mod v0.3.0
golang.org/x/net v0.0.0-20201021035429-f5854403a974
golang.org/x/tools v0.0.0-20201105220310-78b158585360
golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;go list -m&lt;/code&gt; コマンドでは実際にはリンクしない形式上の依存モジュールまで表示してしまうが， &lt;code&gt;depm list&lt;/code&gt; コマンドは基本的にコード内の &lt;code&gt;import&lt;/code&gt; に基づく依存関係のみ表示されるため，最小限のリストに抑えられる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-u&lt;/code&gt; オプションを付けると &lt;code&gt;go list -m -u&lt;/code&gt; と同等の出力にできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ depm list -u &amp;#34;github.com/spiegel-im-spiegel/depm&amp;#34;
github.com/BurntSushi/toml v0.3.1
github.com/emicklei/dot v0.15.0
github.com/spf13/cobra v1.1.1
github.com/spf13/pflag v1.0.5
github.com/spiegel-im-spiegel/depm v0.3.0
github.com/spiegel-im-spiegel/errs v1.0.2
github.com/spiegel-im-spiegel/gocli v0.10.3
golang.org/x/mod v0.3.0
&lt;span class=&#34;hl&#34;&gt;golang.org/x/net v0.0.0-20201021035429-f5854403a974 [v0.0.0-20201031054903-ff519b6c9102]
&lt;/span&gt;golang.org/x/tools v0.0.0-20201105220310-78b158585360
golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-j&lt;/code&gt; オプションを付けると &lt;code&gt;go list -m -json&lt;/code&gt; と同等の JSON 出力にできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ depm list -j &amp;#34;github.com/spiegel-im-spiegel/depm&amp;#34;
{
	&amp;#34;Path&amp;#34;: &amp;#34;github.com/BurntSushi/toml&amp;#34;,
	&amp;#34;Version&amp;#34;: &amp;#34;v0.3.1&amp;#34;,
	&amp;#34;Time&amp;#34;: &amp;#34;2018-08-15T10:47:33Z&amp;#34;,
	&amp;#34;Indirect&amp;#34;: true,
	&amp;#34;Dir&amp;#34;: &amp;#34;/home/spiegel/go/pkg/mod/github.com/!burnt!sushi/toml@v0.3.1&amp;#34;,
	&amp;#34;GoMod&amp;#34;: &amp;#34;/home/spiegel/go/pkg/mod/cache/download/github.com/!burnt!sushi/toml/@v/v0.3.1.mod&amp;#34;
}
{
	&amp;#34;Path&amp;#34;: &amp;#34;github.com/emicklei/dot&amp;#34;,
	&amp;#34;Version&amp;#34;: &amp;#34;v0.15.0&amp;#34;,
	&amp;#34;Time&amp;#34;: &amp;#34;2020-10-30T08:43:19Z&amp;#34;,
	&amp;#34;Indirect&amp;#34;: true,
	&amp;#34;Dir&amp;#34;: &amp;#34;/home/spiegel/go/pkg/mod/github.com/emicklei/dot@v0.15.0&amp;#34;,
	&amp;#34;GoMod&amp;#34;: &amp;#34;/home/spiegel/go/pkg/mod/cache/download/github.com/emicklei/dot/@v/v0.15.0.mod&amp;#34;,
	&amp;#34;GoVersion&amp;#34;: &amp;#34;1.13&amp;#34;
}
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;go list -m&lt;/code&gt; コマンドに比べると遅くなりがちなのが欠点だが，他のツールと組み合わせることを考えると使い勝手はさほど悪くないと思う。&lt;/p&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>PA-APIv5 クライアント・パッケージ v0.8.0 をリリースした</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/11/pa-api-v0_8_0-is-released/" />
		<id>tag:text.Baldanders.info,2020-11-06:/release/2020/11/pa-api-v0_8_0-is-released/</id>
		<published>2020-11-06T12:01:53+00:00</published>
		<updated>2020-11-06T12:03:34+00:00</updated>
		<summary>今回は Marketplace 定義の追加のみ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ありがたいことに pull request をいただきまして， Amazon &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34; title=&#34;Product Advertising API&#34;&gt;Product Advertising API&lt;/a&gt; v5 へアクセスできる &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用パッケージ &lt;a href=&#34;https://github.com/spiegel-im-spiegel/pa-api&#34; title=&#34;spiegel-im-spiegel/pa-api: APIs for Amazon Product Advertising API v5 by Golang&#34;&gt;spiegel-im-spiegel/pa-api&lt;/a&gt; の v0.8.0 をリリースした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/pa-api/releases/tag/v0.8.0&#34;&gt;Release v0.8.0 · spiegel-im-spiegel/pa-api · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は Marketplace 定義の追加のみ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/pa-api&#34; title=&#34;spiegel-im-spiegel/pa-api: APIs for Amazon Product Advertising API v5 by Golang&#34;&gt;spiegel-im-spiegel/pa-api&lt;/a&gt; では Marketplace を&lt;a href=&#34;https://text.baldanders.info/golang/enumeration/&#34; title=&#34;列挙型での遊び方&#34;&gt;列挙型&lt;/a&gt;で定義しているのだが，頻繁に追加や変更があるなら上手いやり方ではないかもしれない。
いっそ interface 型で汎化してしまうか。
手を入れるのは簡単だが，今のところは考え中。&lt;/p&gt;
&lt;!-- eof --&gt;
</content>
	</entry><entry>
		<title>Go 1.15.4 がリリースされた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/11/go-1_15_4-is-released/" />
		<id>tag:text.Baldanders.info,2020-11-06:/release/2020/11/go-1_15_4-is-released/</id>
		<published>2020-11-06T11:24:43+00:00</published>
		<updated>2020-11-14T03:24:49+00:00</updated>
		<summary>セキュリティ・アップデートはなし。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.15.4 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/golang-announce/c/iKm1t36tF80&#34;&gt;Go 1.15.4 and Go 1.14.11 are released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;セキュリティ・アップデートはなし。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;go1.15.4 (released 2020/11/05) includes fixes to cgo, the compiler, linker, runtime, and the &lt;code&gt;compress/flate&lt;/code&gt;, &lt;code&gt;net/http&lt;/code&gt;, &lt;code&gt;reflect&lt;/code&gt;, and &lt;code&gt;time&lt;/code&gt; packages. See the &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.4+label%3ACherryPickApproved&#34;&gt;Go 1.15.4 milestone&lt;/a&gt; on our issue tracker for details&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.15.minor&#34;&gt;Release History - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;例によって &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; の APT で管理している &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラは古いので，&lt;a href=&#34;https://golang.org/dl/&#34; title=&#34;Downloads - The Go Programming Language&#34;&gt;ダウンロードページ&lt;/a&gt;からバイナリ（&lt;a href=&#34;https://golang.org/dl/go1.15.4.linux-amd64.tar.gz&#34;&gt;&lt;code&gt;go1.15.4.linux-amd64.tar.gz&lt;/code&gt;&lt;/a&gt;）を取ってきて手動でインストールすることを強く推奨する。
以下は手動での作業例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src
$ sudo curl -L &amp;#34;https://golang.org/dl/go1.15.4.linux-amd64.tar.gz&amp;#34; -O
$ cd ..
$ sudo unlink go # 以前の Go が入っている場合
$ sudo tar xvf src/go1.15.4.linux-amd64.tar.gz
$ sudo mv go go1.15.4
$ sudo ln -s go1.15.4 go
$ go version # /usr/local/go/bin にパスが通っている場合
go version go1.15.4 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;アップデートは計画的に。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry>
</feed>
