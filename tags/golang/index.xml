<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Golang - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/golang/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/golang/index.xml" />
	<id>tag:text.Baldanders.info,2016-03-13:/</id>
	<updated>2016-03-13T13:03:59+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>週末スペシャル： サイバーテロ企業 Microsoft - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/13-stories/" />
		<id>tag:text.Baldanders.info,2016-03-13:/remark/2016/03/13-stories/</id>
		<published>2016-03-13T13:03:59+09:00</published>
		<updated>2016-03-13T13:03:59+09:00</updated>
		<summary>サイバーテロ企業 Microsoft / 3月9日は皆既日食でした / いまさら「2033年問題」 / 『プログラミング言語 Go』</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#win:717e7722a178792caabc6c325915d05e&#34;&gt;サイバーテロ企業 Microsoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#eclipse:717e7722a178792caabc6c325915d05e&#34;&gt;3月9日は皆既日食でした&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cal:717e7722a178792caabc6c325915d05e&#34;&gt;いまさら「2033年問題」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prog:717e7722a178792caabc6c325915d05e&#34;&gt;『プログラミング言語 Go』&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;win:717e7722a178792caabc6c325915d05e&#34;&gt;サイバーテロ企業 Microsoft&lt;/h2&gt;

&lt;p&gt;あぁ，ついに知り合いに被害者が出てしまいましたよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.netandfield.com/shar/2016/03/windows-10.html&#34;&gt;Windows 10 への強引アップデートというサイバーテロについて - 電気ウナギ的○○&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.netandfield.com/shar/2016/03/windows-10-1.html&#34;&gt;Windows 10 への強引アップデートというサイバーテロについて（つづき） - 電気ウナギ的○○&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかも &lt;a href=&#34;https://www.instagram.com/p/BC22bDzI4vI/&#34;&gt;Windows 7 に復元した後もトラブってる&lt;/a&gt;ようだ。
はっきりいって昔から Windows のメジャーバージョンのアップグレードはトラブることが多い。
やるなら真っさらな状態からクリーン・インストールしないと。&lt;/p&gt;

&lt;p&gt;今月の Windows Update は特に酷かったようで&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gigazine.net/news/20160311-windows10-nag-in-ie-patch/&#34;&gt;IEのセキュリティパッチにWindows 10アップグレード広告を挿入＆システム管理者にアップグレードを促す広告も現れいよいよMicrosoftの本気度が明らかに - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://freesoft.tvbok.com/cat97/2016/2016_03_windows_update.html&#34;&gt;2016年3月のWindows Updateの注意事項&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://freesoft.tvbok.com/cat97/2016/gwx_app_2016_03.html&#34;&gt;(2016年3月)Windows10への半強制アップグレードが再び猛威を奮っている模様？(追記あり)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ集団訴訟起こしたら勝てるんじゃねーの。
私は&lt;a href=&#34;http://text.baldanders.info/remark/2015/windows-10-upgrade-problem/&#34; title=&#34;また Windows 10 にヤラレタ（KB3112343 の恐怖） — しっぽのさきっちょ&#34;&gt;事前に対策&lt;/a&gt;してるので実害ないけど（でも危ないので Windows Update の自動更新は無効にした）。
もう Microsoft 社は「サイバーテロ企業」と認定していいんじゃないかな。
セキュリティ企業各社におかれましては何卒 Microsoft 社の蛮行から防御するツールを開発していただきたい。
買うよ，今なら。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/windows-10-upgrade-problem/&#34; title=&#34;また Windows 10 にヤラレタ（KB3112343 の恐怖） — しっぽのさきっちょ&#34;&gt;前にも書いた&lt;/a&gt;が， Windows 10 が悪いとは言わない（敢えてオススメはしないけど）。
しかし，その気がない人にまで無理やりアップグレードさせようというのは悪質極まる。
しかも今回はセキュリティ・アップデートに広告パッチを混ぜるという蛮行を犯した。
これが evil じゃないとは言わせない。&lt;/p&gt;

&lt;p&gt;Microsoft は Windows を捨てるべきである。
もう OS を売って儲ける時代ではない。
Windows の（マネタイズを含めた）思想は20年以上も&lt;strong&gt;大昔&lt;/strong&gt;のものでインターネットを含む現代の状況にマッチしていない。
自前でカーネルを作るのは諦めて &lt;a href=&#34;http://www.x.org/&#34; title=&#34;X.Org&#34;&gt;X11&lt;/a&gt; 上に Windows 風の GUI shell を構築するとか &lt;a href=&#34;https://www.winehq.org/&#34; title=&#34;WineHQ - Run Windows applications on Linux, BSD, Solaris and Mac OS X&#34;&gt;Wine&lt;/a&gt; にコミットするとかしたほうがいい。
&lt;a href=&#34;https://msdn.microsoft.com/ja-jp/library/dn878908%28v=vs.110%29.aspx&#34; title=&#34;.NET Core とオープン ソース&#34;&gt;.NET だってオープンソース&lt;/a&gt;にできたんだから，できないことはないだろう。
どうしても Windows を残したいのなら携帯端末でやってくれ。&lt;/p&gt;

&lt;p&gt;2020年までに自宅のメインマシンを &lt;a href=&#34;http://www.ubuntu.com/&#34; title=&#34;The leading OS for PC, tablet, phone and cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; か何かに換装しようと思ってるのだけど，こりゃあ計画を前倒しにした方がいいかなぁ。&lt;/p&gt;

&lt;h2 id=&#34;eclipse:717e7722a178792caabc6c325915d05e&#34;&gt;3月9日は皆既日食でした&lt;/h2&gt;

&lt;p&gt;（以下の動画は音楽が流れるので再生時には周りに注意）&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/VOdVQnUKmE0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VOdVQnUKmE0&#34;&gt;the total solar eclipse time laps movie 2016/皆既日食まとめ動画2016 weathernews - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;日本では部分日食だったけど，あいにくの天気で見れなかった人が多そうだ。
今回は人工衛星からの映像が話題になった。
人工衛星からは皆既食の地域が丸い陰となっている。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://www.jma-net.go.jp/sat/data/web89/himawari8_sample_data.html#nisshoku&#34;&gt;&lt;img src=&#34;http://www.jma-net.go.jp/sat/data/web89/parts89/himawari8_sample_data/thumbnail/201603091110_TRC_SolarEclipse_s.png&#34; width=&#34;500&#34; alt=&#34;「ひまわり８号のサンプル画像」より&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://www.jma-net.go.jp/sat/data/web89/himawari8_sample_data.html#nisshoku&#34;&gt;「ひまわり８号のサンプル画像」より&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;今年は9月1日に金環日食があるが，これも日本からは見れない。&lt;/p&gt;

&lt;h2 id=&#34;cal:717e7722a178792caabc6c325915d05e&#34;&gt;いまさら「2033年問題」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hoshisora.jp/topics/?p=2029&#34;&gt;琉球新報コラム「2033年問題」 | TOPICS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大丈夫だ。
問題ない（笑）&lt;/p&gt;

&lt;p&gt;「2033年問題」について詳しくは国立天文台暦計算室による以下を参照のこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eco.mtk.nao.ac.jp/koyomi/topics/html/topics2014.html&#34;&gt;旧暦2033年問題について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2033年から2034年の春分にかけて中気&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:717e7722a178792caabc6c325915d05e:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:717e7722a178792caabc6c325915d05e:c&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;を含まない朔望月が3回もあり，いわゆる「旧暦」のルール&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;冬至を含む朔望月を11月とする&lt;/li&gt;
&lt;li&gt;春分を含む朔望月を2月とする&lt;/li&gt;
&lt;li&gt;夏至を含む朔望月を5月とする&lt;/li&gt;
&lt;li&gt;秋分を含む朔望月を8月とする&lt;/li&gt;
&lt;li&gt;1年が13ヶ月ある場合，中気を含まない朔望月を閏月とする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;のうち 1 と 4 が衝突するため，どの月を閏月とすべきか決められないということのようだ。&lt;/p&gt;

&lt;p&gt;ルールにない事態なのだからルールを作ればよい。
具体的には 1 から 4 のルールの中で優先順位を決めればよい。
先程の国立天文台暦計算室の記事では「時憲暦」の「冬至を含む月から次に冬至を含む月までに13か月ある場合に，中気が入らない最初の月を閏月とする」というルールを紹介している。&lt;/p&gt;

&lt;p&gt;ポイントは誰がそれを決めるのか，ということだが&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;あなたが「旧暦」と思うものが「旧暦」です。ただし、他人の賛同を得られるとは限りません&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;でいいんじゃないかな。
得意ぢゃん，日本人って，そういうの。&lt;/p&gt;

&lt;p&gt;「旧暦」は民間暦のひとつに過ぎない。
民間暦なんてものは宗教・宗派あるいは地域で勝手に決めているものなのだから，それぞれのコミュニティで暦を合わせていれば深刻な問題にはならない。
「2033年問題」の場合は「中秋の名月」がいつになるかでちょっともめるくらいだろう。
ちなみに国立天文台には暦を決定する大事な役割がある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:717e7722a178792caabc6c325915d05e:naoj&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:717e7722a178792caabc6c325915d05e:naoj&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;が民間暦は関知しない。&lt;/p&gt;

&lt;h2 id=&#34;prog:717e7722a178792caabc6c325915d05e&#34;&gt;『プログラミング言語 Go』&lt;/h2&gt;

&lt;p&gt;6月に出るという『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語 Go&lt;/a&gt;』を買おうかどうか考え中。
&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/0134190440/baldandersinf-22/&#34;&gt;原書&lt;/a&gt;の目次を見るかぎり基本的な部分はちゃんと押さえてるみたいだし「買ってもいいかな」と思ってはいるのだけど。&lt;/p&gt;

&lt;p&gt;ちなみに『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34;&gt;Go 言語による Web アプリケーション開発&lt;/a&gt;』は既に買った。
ざくっと斜め読みしただけだけど，そのうち役に立つ日が来るかもしれない。&lt;/p&gt;

&lt;p&gt;この手の本は，昔は重宝したけど今は賞味期限が早いので手にした時にはもう骨董品レベルだったりするんだよなぁ。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はネットにあるドキュメント類が充実しているので正直「書籍」はなくてもいいんだが，英語が中心なので，英語不得手の私としては日本語のまとまったドキュメントが欲しいと思ってしまうわけなのさ。&lt;/p&gt;

&lt;h2 id=&#34;other:717e7722a178792caabc6c325915d05e&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/syui/items/429962c76f6c3117f351&#34;&gt;GitBookの使用例 - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nacika_ins/items/24b91f654cf2dc59dd81&#34;&gt;Gitbookを高速化する方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/20160309091404.htm&#34;&gt;Big Sky :: コマンドラインから JSON が簡単に作れるツール jo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/03/10/five-years-after-fukushimas-contamination/&#34;&gt;福島原発事故から5年：水産物の放射性セシウム汚染の現状 « WIRED.jp&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://swfsc.noaa.gov/textblock.aspx?Division=FRD&amp;amp;id=20593&#34;&gt;Fukushima Radioactivity in U.S. West Coast Tuna - SWFSC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iopscience.iop.org/1748-9326/7/3/034004/&#34;&gt;Model simulations on the long-term dispersal of 137Cs released into the Pacific Ocean off Fukushima - IOPscience&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hiroshima-cu.ac.jp/modules/peace_j/content0252.html&#34;&gt;『広島平和研究』第3号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160310_747743.html&#34;&gt;TPPでよみがえる“マジコンプレイ違法化”の亡霊、「みなし侵害」で成仏するか？　著作権法改正案が明らかに -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://security.srad.jp/story/16/03/10/1530233/&#34;&gt;違法コピーに悩まされる美少女ゲームメーカー、「世界最高レベル」のコピープロテクト実装へ | スラド セキュリティ&lt;/a&gt; : 1ヶ月かそこらで突破されちゃうようなシロモノが「世界最高レベル」なのか？ つか，今時「コピー出来ないソフト」とか，悪人には関係ないし善人には使い勝手が悪いだけだと思うのだが，悪人が利するシステムに意味があるのか？&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160311_747871.html&#34;&gt;GitHub、コメントに「いいね!」など6種類の感情表現が可能に -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:717e7722a178792caabc6c325915d05e&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416115458/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51XoyiTnmFL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416115458/baldandersinf-22/&#34;&gt;天文年鑑2016年版&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;天文年鑑編集委員会 &lt;/dd&gt;&lt;dd&gt;誠文堂新光社 2015-11-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805208899/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4805208899.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文手帳 2016年版: 星座早見盤付 天文ポケット年鑑&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/462108965X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/462108965X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;理科年表 平成28年&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B016YNZD0I/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B016YNZD0I.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文ガイド 2016年 01 月号  [特大号 付録付き]&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B017VPHTX2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B017VPHTX2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;月刊 星ナビ 2016年 1月号&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416115512/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4416115512.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;藤井 旭の天文年鑑 2016年版: スターウォッチング完全ガイド&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;天文ファン必携。2016年版&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-12-29&#34;&gt;2015-12-29&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41aCueik45L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-15&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117607/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117607.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;マイクロサービスアーキテクチャ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハイパフォーマンスPython&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/0134190440/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/0134190440.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;The Go Programming Language (Addison-Wesley Professional Computing Series)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166340/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774166340.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Vim script テクニックバイブル ~Vim使いの魔法の杖&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。買おうかどうか悩み中。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-12&#34;&gt;2016-03-12&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51UoREcNrnL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34;&gt;Go言語によるWebアプリケーション開発&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Mat Ryer 鵜飼 文敏 &lt;/dd&gt;&lt;dd&gt;オライリージャパン 2016-01-22&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621300253.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング言語Go&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117607/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117607.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;マイクロサービスアーキテクチャ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774178667/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774178667.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;nginx実践入門 (WEB+DB PRESS plus)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4863541783/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4863541783.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;改訂2版 基礎からわかる Go言語&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774179930/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774179930.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;サーバ/インフラエンジニア養成読本 DevOps編 [Infrastructure as Code を実践するノウハウが満載! ] (Software Design plus)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;日本語監訳者による解説（付録 B）が意外に役に立つ感じ。 Web アプリケーションだけでなく，サーバサイドで動く CLI アプリへの言及もある。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-13&#34;&gt;2016-03-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:717e7722a178792caabc6c325915d05e:c&#34;&gt;「中気」は二十四節気のうち冬至を0起点として偶数番目のものを指す。奇数番目のものは「節気」と呼ぶ。現代の二十四節気は天球上の太陽の視黄経（太陽黄経）で決まる（定気法）。例えば太陽が黄経0度を通過した瞬間を含む日が春分となる。ただし二十四節気の暦上の基点は冬至で，古い暦では太陽観測により冬至を確定し次の冬至までの1年を24等分することで二十四節気が決まっていた（平気法）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:717e7722a178792caabc6c325915d05e:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:717e7722a178792caabc6c325915d05e:naoj&#34;&gt;国立天文台では毎年2月1日に翌年の暦を発表する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:717e7722a178792caabc6c325915d05e:naoj&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「ズンドコチェック」なるものが流行っているらしい - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/zundoko-choir/" />
		<id>tag:text.Baldanders.info,2016-03-12:/golang/zundoko-choir/</id>
		<published>2016-03-12T22:12:53+09:00</published>
		<updated>2016-03-13T03:35:04+09:00</updated>
		<summary>というわけで Go 言語で実装することを考えてみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Javaの講義、試験が「自作関数を作り記述しなさい」って問題だったから&lt;br&gt;「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数作ったら満点で単位貰ってた&lt;/p&gt;&amp;mdash; てくも (@kumiromilk) &lt;a href=&#34;https://twitter.com/kumiromilk/status/707437861881180160&#34;&gt;2016年3月9日&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;p&gt;「習作（study）」としてはなかなか秀逸なアイデアだと思う。
これで満点くれる教官も流石だが（笑） 巷では「ズンドコキヨシ」とか「キヨシチェック」とか「ズンドコチェック」とか呼ばれているらしい。&lt;/p&gt;

&lt;p&gt;というわけで&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;を &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で実装することを考えてみる。
私はコレを「ズンドコ・コール（zundoko-choir）」と呼ぶことにする。&lt;/p&gt;

&lt;p&gt;とはいえ，ズンドコ・コールを実装する事自体はそう難しくない。
たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math/rand&amp;quot;
	&amp;quot;time&amp;quot;
)

const (
	zun     = &amp;quot;ズン&amp;quot;
	doko    = &amp;quot;ドコ&amp;quot;
	kiyoshi = &amp;quot;キ・ヨ・シ！&amp;quot;
)

func generate() chan string {
	ch := make(chan string)
	go func() {
		var zundoko = [2]string{zun, doko}
		rand.Seed(time.Now().UnixNano())
		for {
			ch &amp;lt;- zundoko[rand.Intn(2)]
		}
	}()
	return ch
}

func main() {
	zundoko := generate()
	zcount := 0
	for {
		zd := &amp;lt;-zundoko
		fmt.Print(zd)
		if zd == zun {
			zcount++
		} else if zcount &amp;gt;= 4 {
			break
		} else {
			zcount = 0
		}
	}
	fmt.Print(kiyoshi)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「ズン」および「ドコ」をランダムに生成する部分は &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; と &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt; を使えばいいだろう（&lt;code&gt;generate()&lt;/code&gt; 関数内の処理）。
擬似乱数は厳密でなくてもいいので安直に &lt;a href=&#34;https://golang.org/pkg/math/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; を使うことにした。
さらに「ズン」「ズン」「ズン」「ズン」「ドコ」の配列パターンのチェックだが，「ズン」が4回以上連続で来た直後に「ドコ」が来たら OK としてみた。
まぁ，これがもっとも素朴な実装でパフォーマンスとしてもそれほど遜色ない筈。&lt;/p&gt;

&lt;p&gt;と，ここまで考えてハタと気づいた。
問題は「自作関数を作り記述しなさい」なんだからメイン関数にロジック書いたらアカンやん！&lt;/p&gt;

&lt;p&gt;というわけでまたもゴリゴリとコードを書いてパッケージにしてしまった。
アホだ，私（笑）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/zundoko&#34;&gt;spiegel-im-spiegel/zundoko: Zundoko-choirs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;出力は標準出力に直書きするのではなく &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; の &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; に &lt;code&gt;append()&lt;/code&gt; することで実現する。
この出力先を &lt;code&gt;Choirs&lt;/code&gt; 型として定義した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Choirs - zundoko-choirs list
type Choirs struct {
	c []string
}

//Push is append choirs
func (c *Choirs) Push(s string) {
	c.c = append(c.c, s) //maybe panic if c is nil.
}

func (c *Choirs) String() string {
	if c == nil {
		return &amp;quot;&amp;quot;
	}
	content := make([]byte, 0, 128)
	for _, s := range c.c {
		content = append(content, s...)
	}
	return string(content)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに文字列の連結は &lt;a href=&#34;https://golang.org/pkg/strings/&#34; title=&#34;strings - The Go Programming Language&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Join()&lt;/code&gt; 関数は使わず「&lt;a href=&#34;http://text.baldanders.info/golang/join-strings/&#34; title=&#34;文字列連結はどれが速い？ — プログラミング言語 Go&#34;&gt;文字列連結はどれが速い？&lt;/a&gt;」で紹介した方法を使っている。&lt;/p&gt;

&lt;p&gt;これで最初のコードは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func generate() chan string {
	ch := make(chan string)
	go func() {
		var zd = [2]string{Zun, Doko}
		rand.Seed(time.Now().UnixNano())
		for {
			ch &amp;lt;- zd[rand.Intn(2)]
		}
	}()
	return ch
}

//Run zundoko-choirs
func Run() *Choirs {
	zd := generate()
	c := &amp;amp;Choirs{make([]string, 0)}
	zcount := 0
	for {
		s := &amp;lt;-zd
		c.Push(s)
		if s == Zun {
			zcount++
		} else if zcount &amp;gt;= 4 {
			break
		} else {
			zcount = 0
		}
	}
	c.Push(Kiyoshi)
	return c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書き換えることができる。
このパッケージを呼び出すメイン側は例えば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/zundoko&amp;quot;
)

func main() {
	c := zundoko.Run()
	fmt.Println(c)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書けばいい。&lt;/p&gt;

&lt;p&gt;ところで「ズン」「ドコ」の出力は &lt;code&gt;Choirs&lt;/code&gt; 型で保持られているので，末尾の5要素のパターンを調べる別の方法もあると気づく。
たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var matchingPattern = []string{Zun, Zun, Zun, Zun, Doko}

func (c *Choirs) match() bool {
	if c == nil {
		return false
	}
	if len(c.c) &amp;lt; 5 {
		return false
	}
	return reflect.DeepEqual(c.c[len(c.c)-5:], matchingPattern)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この関数を使えば &lt;code&gt;Run()&lt;/code&gt; 関数は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Run2 zundoko-choirs (another logic)
func Run2() *Choirs {
	zd := generate()
	c := &amp;amp;Choirs{make([]string, 0)}
	for {
		s := &amp;lt;-zd
		c.Push(s)
		if c.match() {
			break
		}
	}
	c.Push(Kiyoshi)
	return c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり随分すっきりする。
ただこれコストが高くつきそうである。
というわけで，これも調べてみた。
まず以下のベンチマークを書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package zundoko

import &amp;quot;testing&amp;quot;

func BenchmarkRun1(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		Run()
	}
}

func BenchmarkRun2(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		Run2()
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;BenchmarkRun1&lt;/code&gt; が従来のもの， &lt;code&gt;BenchmarkRun2&lt;/code&gt; が先程の &lt;code&gt;match()&lt;/code&gt; 関数を使ったバージョンである。
結果は以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go test -bench Run -benchmem
testing: warning: no tests to run
PASS
BenchmarkRun1-4    50000     28141 ns/op    1800 B/op     9 allocs/op
BenchmarkRun2-4    30000     40102 ns/op    3912 B/op   115 allocs/op
ok      github.com/spiegel-im-spiegel/zundoko   4.261s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;乱数の要素が絡むので毎回同じ値ではないが，傾向としてはこんな感じ。
&lt;code&gt;BenchmarkRun2&lt;/code&gt; のほうが allocation 回数が圧倒的に多いのが分かるだろう。
これがスピードにもダイレクトに反映されている感じである。&lt;/p&gt;

&lt;p&gt;今回は「「ズン」が4回以上連続で来た直後に「ドコ」が来たら OK」という単純なロジックだったが，もっと複雑なパターンが要求される場合は工夫が必要かもしれない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;「ズン」と「ドコ」の出現回数を数える関数も作ってみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//CountZunDoko returns count of &amp;quot;ZUN&amp;quot; and &amp;quot;DOKO&amp;quot; choirs
func (c *Choirs) CountZunDoko() (int, int) {
	z := 0
	d := 0
	if c == nil {
		return z, d
	}
	for _, s := range c.c {
		switch s {
		case Zun:
			z++
		case Doko:
			d++
		}
	}
	return z, d
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば &lt;code&gt;generate()&lt;/code&gt; 関数内で使っている擬似乱数パッケージを別のものに換えた時に統計処理で簡単な性能評価ができるかもしれない。
今回はそこまではしなけど（擬似乱数の話はいずれやりたい）。&lt;/p&gt;

&lt;p&gt;こうやって手遊びでコードを弄るのは楽しいものである。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:ba7781b05a447c47fa6bc5c87477853e&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shunsugai@github/items/971a15461de29563bf90&#34;&gt;ズンドコキヨシまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinderuman@github/items/2ff67c2404647d2b7ea6&#34;&gt;ズンドコキヨシ with Go (n番煎じ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:ba7781b05a447c47fa6bc5c87477853e&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41aCueik45L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-15&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117607/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117607.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;マイクロサービスアーキテクチャ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハイパフォーマンスPython&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/0134190440/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/0134190440.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;The Go Programming Language (Addison-Wesley Professional Computing Series)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166340/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774166340.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Vim script テクニックバイブル ~Vim使いの魔法の杖&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。買おうかどうか悩み中。目次があればなぁ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-12&#34;&gt;2016-03-12&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;たとえば &lt;a href=&#34;https://golang.org/pkg/container/list/&#34; title=&#34;list - The Go Programming Language&#34;&gt;&lt;code&gt;container/list&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://golang.org/pkg/container/ring/&#34; title=&#34;ring - The Go Programming Language&#34;&gt;&lt;code&gt;container/ring&lt;/code&gt;&lt;/a&gt; といったパッケージを使う手がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>icat4json 公開 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/icat4json/" />
		<id>tag:text.Baldanders.info,2016-02-25:/remark/2016/02/icat4json/</id>
		<published>2016-02-25T16:45:01+09:00</published>
		<updated>2016-02-26T17:40:58+09:00</updated>
		<summary>IPA が提供する “icat for JSON” にアクセスする Go 言語用のパッケージを公開した。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;IPA が提供する “&lt;a href=&#34;https://www.ipa.go.jp/security/vuln/icat.html&#34; title=&#34;サイバーセキュリティ注意喚起サービス「icat for JSON」：IPA 独立行政法人 情報処理推進機構&#34;&gt;icat for JSON&lt;/a&gt;” にアクセスする &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用のパッケージを公開した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/icat4json&#34; title=&#34;spiegel-im-spiegel/icat4json: icat for JSON with Golang&#34;&gt;github.com/spiegel-im-spiegel/icat4json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下のような感じで使える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/icat4json&amp;quot;
)

func main() {
	json, err := icat4json.Get(icat4json.ToolICATW)
	if err != nil {
		log.Fatal(err)
	}
	data, err := json.Decode()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf(&amp;quot;Title: %v\n&amp;quot;, data.Title)
	fmt.Printf(&amp;quot;  URL: %v\n&amp;quot;, data.Link)
	fmt.Printf(&amp;quot; Date: %v\n&amp;quot;, data.Date)
	fmt.Print(&amp;quot;Items:\n&amp;quot;)
	for _, item := range data.Itemdata {
		fmt.Printf(&amp;quot;\t%v: %v (%v)\n&amp;quot;, item.Date, item.Title, item.Link)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run sample.go
Title: IPAセキュリティセンター:重要なセキュリティ情報
  URL: https://www.ipa.go.jp/security/vuln/icat.html
 Date: 2016-02-10 11:58:22 +0900 JST
Items:
	2016-02-10 12:00:00 +0900 JST: Microsoft 製品の脆弱性対策について(2016年02月) (http://www.ipa.go.jp/security/ciadr/vul/20160210-ms.html)
	2016-02-10 12:00:00 +0900 JST: Adobe Flash Player の脆弱性対策について(APSB16-04)(CVE-2016-0985等) (http://www.ipa.go.jp/security/ciadr/vul/20160210-adobeflashplayer.html)
	2016-01-20 12:00:00 +0900 JST: Oracle Java の脆弱性対策について(CVE-2016-0494等) (http://www.ipa.go.jp/security/ciadr/vul/20160120-jre.html)
	2016-01-13 12:00:00 +0900 JST: Microsoft 製品の脆弱性対策について(2016年01月) (http://www.ipa.go.jp/security/ciadr/vul/20160113-ms.html)
	2016-01-13 12:00:00 +0900 JST: Adobe Reader および Acrobat の脆弱性対策について(APSB16-02)(CVE-2016-0932等) (http://www.ipa.go.jp/security/ciadr/vul/20160113-adobereader.html)
	2016-01-06 16:40:00 +0900 JST: 【注意喚起】インターネットに接続する複合機等のオフィス機器の再点検を！ (http://www.ipa.go.jp/security/ciadr/vul/20160106-printer.html)
	2016-01-05 14:00:00 +0900 JST: 「DXライブラリ」におけるバッファオーバーフローの脆弱性対策について(JVN#49476817) (http://www.ipa.go.jp/security/ciadr/vul/20160105-jvn.html)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“&lt;a href=&#34;https://www.ipa.go.jp/security/vuln/icat.html&#34; title=&#34;サイバーセキュリティ注意喚起サービス「icat for JSON」：IPA 独立行政法人 情報処理推進機構&#34;&gt;icat for JSON&lt;/a&gt;” という名前なのに IPA は API の仕様を公開していない。
そこで JavaScript コードの中身を見てみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/4acefe47d3dda688a03e&#34;&gt;icat for JSON について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/icat4json&#34; title=&#34;spiegel-im-spiegel/icat4json: icat for JSON with Golang&#34;&gt;&lt;code&gt;icat4json&lt;/code&gt;&lt;/a&gt; パッケージでは “&lt;a href=&#34;https://www.ipa.go.jp/security/vuln/icat.html&#34; title=&#34;サイバーセキュリティ注意喚起サービス「icat for JSON」：IPA 独立行政法人 情報処理推進機構&#34;&gt;icat for JSON&lt;/a&gt;” から取得した JSON データを以下の構造体にデコードする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Item - itemdata from icat
type Item struct {
	Title      string    `json:&amp;quot;item_title&amp;quot;`
	Link       string    `json:&amp;quot;item_link&amp;quot;`
	Date       time.Time `json:&amp;quot;item_date&amp;quot;`
	Identifier []string  `json:&amp;quot;item_identifier&amp;quot;`
}

//ICAT - data from icat
type ICAT struct {
	Itemdata []Item    `json:&amp;quot;itemdata&amp;quot;`
	Title    string    `json:&amp;quot;docTitle&amp;quot;`
	Fix      string    `json:&amp;quot;docTitleFix&amp;quot;`
	Link     string    `json:&amp;quot;docLink&amp;quot;`
	Date     time.Time `json:&amp;quot;docDate&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JavaScript コードを見ると &lt;code&gt;item_identifier&lt;/code&gt; 項目は使ってない模様。
&lt;code&gt;docTitleFix&lt;/code&gt; 項目は中身が &lt;code&gt;null&lt;/code&gt; かどうかしかチェックしてなくて&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2f15d11d1611e9dd61fef23ed1583d23:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2f15d11d1611e9dd61fef23ed1583d23:s&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;， &lt;code&gt;null&lt;/code&gt; 以外だと &lt;code&gt;htmlentities()&lt;/code&gt; 関数を通さずに素のまま表示するという恐ろしいことをしている（普通こういうのって boolean 値を使うんじゃないのか？）。
これらの項目は無視でもいいだろう。
本当は IPA が仕様を公開してくれると有難いんだけどねぇ。&lt;/p&gt;

&lt;p&gt;脆弱性情報をクライアントサイドで取るのなら “&lt;a href=&#34;https://www.ipa.go.jp/security/vuln/icat.html&#34; title=&#34;サイバーセキュリティ注意喚起サービス「icat for JSON」：IPA 独立行政法人 情報処理推進機構&#34;&gt;icat for JSON&lt;/a&gt;” ではなく Twitter の @&lt;a href=&#34;https://twitter.com/ICATalerts/&#34;&gt;ICATalerts&lt;/a&gt; アカウントのタイム・ラインをチェックするほうがオススメ。
JSON データを使うのならサーバサイドでやるべきだよね。
&lt;a href=&#34;https://github.com/spiegel-im-spiegel/icat4json&#34; title=&#34;spiegel-im-spiegel/icat4json: icat for JSON with Golang&#34;&gt;&lt;code&gt;icat4json&lt;/code&gt;&lt;/a&gt; パッケージはドメイン・レイヤのエンティティとして使われることを意識している。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/icat4json.svg&#34;&gt;&lt;img src=&#34;http://text.baldanders.info/images/icat4json.svg&#34; alt=&#34;icat4json entity&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://text.baldanders.info/images/icat4json.svg&#34;&gt;icat4json entity&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;私はたまたま &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;を勉強中なので &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のパッケージとして実装したけど，本当なら Java とか Ruby とか node.js とかサーバサイドの実装があるといいよね。
IPA も jQuery じゃなくて，そういうので実装すればいいのに。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:2f15d11d1611e9dd61fef23ed1583d23:s&#34;&gt;ところで &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;における &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; の実体は &lt;code&gt;[]byte&lt;/code&gt; だが nil 状態はない。 &lt;a href=&#34;https://github.com/spiegel-im-spiegel/icat4json&#34; title=&#34;spiegel-im-spiegel/icat4json: icat for JSON with Golang&#34;&gt;&lt;code&gt;icat4json&lt;/code&gt;&lt;/a&gt; パッケージでは &lt;code&gt;docTitleFix&lt;/code&gt; 項目が &lt;code&gt;null&lt;/code&gt; の場合は空文字列に展開される。 JSON の &lt;code&gt;null&lt;/code&gt; 状態を区別したいのであれば &lt;a href=&#34;https://github.com/guregu/null&#34; title=&#34;guregu/null: reasonable handling of nullable values&#34;&gt;&lt;code&gt;github.com/guregu/null&lt;/code&gt;&lt;/a&gt; パッケージ等を使う手もある。ちなみに &lt;a href=&#34;https://github.com/guregu/null&#34; title=&#34;guregu/null: reasonable handling of nullable values&#34;&gt;&lt;code&gt;github.com/guregu/null&lt;/code&gt;&lt;/a&gt; パッケージの型の実体は &lt;a href=&#34;https://golang.org/pkg/database/sql/&#34; title=&#34;sql - The Go Programming Language&#34;&gt;&lt;code&gt;database/sql&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;NullString&lt;/code&gt; 型等である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2f15d11d1611e9dd61fef23ed1583d23:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Interface の謎 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/interface/" />
		<id>tag:text.Baldanders.info,2016-02-22:/golang/interface/</id>
		<published>2016-02-22T19:22:33+09:00</published>
		<updated>2016-02-22T20:53:30+09:00</updated>
		<summary>Interface には落とし穴がある。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回も軽めの小ネタで。&lt;/p&gt;

&lt;p&gt;まず，文字列の配列を表示するだけの単純なコードを書いてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	strlist := []string{&amp;quot;alpha&amp;quot;, &amp;quot;beta&amp;quot;, &amp;quot;gamma&amp;quot;}
	fmt.Println(strlist)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[alpha beta gamma]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
配列&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a38e724b1dfc1725327e2aea22a2a689:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a38e724b1dfc1725327e2aea22a2a689:s&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; の中身をそのままダンプ出力しているだけなので，まぁ当たり前っちゃあ当たり前。
では，配列のダンプではなくきちんと項目を列挙したいとしよう。
やり方は色々あるが簡単に &amp;ldquo;&lt;code&gt;...&lt;/code&gt;” トークンを使って&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	strlist := []string{&amp;quot;alpha&amp;quot;, &amp;quot;beta&amp;quot;, &amp;quot;gamma&amp;quot;}
	fmt.Println(strlist...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と配列を展開すればいんじゃね？ って思うよね，普通。
&lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;fmt - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Println()&lt;/code&gt; 関数の定義を見ても&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Println(a ...interface{}) (n int, err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっているし，問題ないように見える。&lt;/p&gt;

&lt;p&gt;でもこれはうまくいかない。
これを実行しようとすると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;prog.go:7: cannot use strlist (type []string) as type []interface {} in argument to fmt.Println
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とエラーになる。&lt;/p&gt;

&lt;p&gt;実は &lt;code&gt;[]string&lt;/code&gt; 型の &lt;code&gt;strlist&lt;/code&gt; は &lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;fmt - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Println()&lt;/code&gt; 関数に渡す際に &lt;code&gt;[]interface{}&lt;/code&gt; 型ではなく &lt;code&gt;interface{}&lt;/code&gt; 型に&lt;strong&gt;必ず&lt;/strong&gt;キャストされる。
だから &lt;code&gt;strlist...&lt;/code&gt; と展開しようとしても「そりゃあ無理（←超意訳）」と怒られてしまうわけだ。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の型（&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt;）は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Msg []string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように配列やポインタも型として定義できてしまうことを&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;思い出して&lt;/a&gt;欲しい。&lt;/p&gt;

&lt;p&gt;じゃあ，明示的なキャストならいけるのかと思ったが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Msg []string

func main() {
	strlist := []string{&amp;quot;alpha&amp;quot;, &amp;quot;beta&amp;quot;, &amp;quot;gamma&amp;quot;}
	fmt.Println(([]interface{})(strlist)...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;prog.go:9: cannot convert strlist (type []string) to type []interface {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と，これもエラーになった。&lt;/p&gt;

&lt;p&gt;ではどうすればいいのかというと &lt;code&gt;[]interface{}&lt;/code&gt; 型の配列を用意してそこに値をコピーする。
先程のコードであれば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Msg []string

func main() {
	strlist := []string{&amp;quot;alpha&amp;quot;, &amp;quot;beta&amp;quot;, &amp;quot;gamma&amp;quot;}
	var list = make([]interface{}, 0)
	for _, str := range strlist {
		list = append(list, str)
	}
	fmt.Println(list...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;alpha beta gamma
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにめでたく列挙される。
この問題は &lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;fmt - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Println()&lt;/code&gt; 関数だけじゃなく，ある型の配列を &lt;code&gt;[]interface{}&lt;/code&gt; 型にキャストしようとする際は必ず発生するようだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a38e724b1dfc1725327e2aea22a2a689:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a38e724b1dfc1725327e2aea22a2a689:c&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;いや，「“&lt;code&gt;cannot use strlist (type []string) as type []interface {} in argument to fmt.Println&lt;/code&gt;” なんてコンパイルエラーを出せるならコンパイラ側でなんとかしてよ」と思うのだが，どうも無理らしい。&lt;/p&gt;

&lt;p&gt;やれやれ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:a38e724b1dfc1725327e2aea22a2a689&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@tucnak/why-go-is-a-poorly-designed-language-1cc04e5daf2#.ucutrogyz&#34;&gt;Why Go is a poorly designed language — Medium&lt;/a&gt; （&lt;a href=&#34;http://postd.cc/why-go-is-a-poorly-designed-language/&#34;&gt;日本語訳&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/InterfaceSlice&#34;&gt;InterfaceSlice · golang/go Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a38e724b1dfc1725327e2aea22a2a689:s&#34;&gt;厳密には &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;。分かってますよ，もちろん。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a38e724b1dfc1725327e2aea22a2a689:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:a38e724b1dfc1725327e2aea22a2a689:c&#34;&gt;例えば &lt;code&gt;list&lt;/code&gt; に &lt;code&gt;strlist&lt;/code&gt; の内容をコピーする際に for 文で回すのではなく &lt;code&gt;list = append(list, strlist...)&lt;/code&gt; でできるかどうか試してみればいい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a38e724b1dfc1725327e2aea22a2a689:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Travis CI でクロス・コンパイル - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/cross-compiling-in-travis-ci/" />
		<id>tag:text.Baldanders.info,2016-02-13:/golang/cross-compiling-in-travis-ci/</id>
		<published>2016-02-13T19:37:11+09:00</published>
		<updated>2016-02-25T09:39:28+09:00</updated>
		<summary>今回は Travis CI から GitHub へ mitchellh/gox で生成した実行バイナリを deploy することを考える。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;h2 id=&#34;gox-でまとめてクロス-コンパイル:fa953b67964726c338be9843a0c52e04&#34;&gt;Gox でまとめてクロス・コンパイル&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の特徴のひとつにクロス・コンパイルの容易さがあるが，複数プラットフォームのビルドをまとめて行う &lt;a href=&#34;https://github.com/mitchellh/gox&#34; title=&#34;mitchellh/gox: A dead simple, no frills Go cross compile tool&#34;&gt;mitchellh/gox&lt;/a&gt; を使うと便利である。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go get github.com/mitchellh/gox

$gox -h
Usage: gox [options] [packages]

  Gox cross-compiles Go applications in parallel.

  If no specific operating systems or architectures are specified, Gox
  will build for all pairs supported by your version of Go.

Options:

  -arch=&amp;quot;&amp;quot;            Space-separated list of architectures to build for
  -build-toolchain    Build cross-compilation toolchain
  -cgo                Sets CGO_ENABLED=1, requires proper C toolchain (advanced)
  -gcflags=&amp;quot;&amp;quot;         Additional &#39;-gcflags&#39; value to pass to go build
  -ldflags=&amp;quot;&amp;quot;         Additional &#39;-ldflags&#39; value to pass to go build
  -tags=&amp;quot;&amp;quot;            Additional &#39;-tags&#39; value to pass to go build
  -os=&amp;quot;&amp;quot;              Space-separated list of operating systems to build for
  -osarch=&amp;quot;&amp;quot;          Space-separated list of os/arch pairs to build for
  -osarch-list        List supported os/arch pairs for your Go version
  -output=&amp;quot;foo&amp;quot;       Output path template. See below for more info
  -parallel=-1        Amount of parallelism, defaults to number of CPUs
  -rebuild            Force rebuilding of package that were up to date
  -verbose            Verbose mode

Output path template:

  The output path for the compiled binaries is specified with the
  &amp;quot;-output&amp;quot; flag. The value is a string that is a Go text template.
  The default value is &amp;quot;{{.Dir}}_{{.OS}}_{{.Arch}}&amp;quot;. The variables and
  their values should be self-explanatory.

Platforms (OS/Arch):

  The operating systems and architectures to cross-compile for may be
  specified with the &amp;quot;-arch&amp;quot; and &amp;quot;-os&amp;quot; flags. These are space separated lists
  of valid GOOS/GOARCH values to build for, respectively. You may prefix an
  OS or Arch with &amp;quot;!&amp;quot; to negate and not build for that platform. If the list
  is made up of only negations, then the negations will come from the default
  list.

  Additionally, the &amp;quot;-osarch&amp;quot; flag may be used to specify complete os/arch
  pairs that should be built or ignored. The syntax for this is what you would
  expect: &amp;quot;darwin/amd64&amp;quot; would be a valid osarch value. Multiple can be space
  separated. An os/arch pair can begin with &amp;quot;!&amp;quot; to not build for that platform.

  The &amp;quot;-osarch&amp;quot; flag has the highest precedent when determing whether to
  build for a platform. If it is included in the &amp;quot;-osarch&amp;quot; list, it will be
  built even if the specific os and arch is negated in &amp;quot;-os&amp;quot; and &amp;quot;-arch&amp;quot;,
  respectively.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;オプションは色々あるが，とりあえずパッケージを指定して起動すれば全てのプラットフォームについてビルドを行う&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fa953b67964726c338be9843a0c52e04:bt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fa953b67964726c338be9843a0c52e04:bt&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
私が今つくってる &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; を例にすると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go get get github.com/spiegel-im-spiegel/gpgpdump

$ gox -output &amp;quot;goxdist/{{.OS}}_{{.Arch}}/{{.Dir}}&amp;quot; github.com/spiegel-im-spiegel/gpgpdump

--&amp;gt;      netbsd/arm: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;   windows/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;   freebsd/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;      darwin/386: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;    darwin/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;       linux/386: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;     linux/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;       linux/arm: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;     freebsd/386: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;      netbsd/386: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;     freebsd/arm: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;    netbsd/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;   openbsd/amd64: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;     openbsd/386: github.com/spiegel-im-spiegel/gpgpdump
--&amp;gt;     windows/386: github.com/spiegel-im-spiegel/gpgpdump

$ ls -l goxdist
drwx 0 2016-02-13 17:41 darwin_386/
drwx 0 2016-02-13 17:41 darwin_amd64/
drwx 0 2016-02-13 17:42 freebsd_386/
drwx 0 2016-02-13 17:41 freebsd_amd64/
drwx 0 2016-02-13 17:42 freebsd_arm/
drwx 0 2016-02-13 17:41 linux_386/
drwx 0 2016-02-13 17:41 linux_amd64/
drwx 0 2016-02-13 17:42 linux_arm/
drwx 0 2016-02-13 17:42 netbsd_386/
drwx 0 2016-02-13 17:42 netbsd_amd64/
drwx 0 2016-02-13 17:41 netbsd_arm/
drwx 0 2016-02-13 17:42 openbsd_386/
drwx 0 2016-02-13 17:42 openbsd_amd64/
drwx 0 2016-02-13 17:42 windows_386/
drwx 0 2016-02-13 17:41 windows_amd64/

$ ls -l goxdist/windows_amd64
-rw- 5712896 2016-02-13 17:41 gpgpdump.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;といい感じに出力してくれる。&lt;/p&gt;

&lt;p&gt;OS を指定する場合は &lt;code&gt;-os &amp;quot;linux windows&amp;quot;&lt;/code&gt; のように指定する。
アーキテクチャは &lt;code&gt;-arch&lt;/code&gt; オプションを， OS とアーキテクチャを組み合わせる場合は &lt;code&gt;-osarch linux/arm&lt;/code&gt; などとする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-output&lt;/code&gt; オプションの &lt;code&gt;&amp;quot;goxdist/{{.OS}}_{{.Arch}}/{{.Dir}}&amp;quot;&lt;/code&gt; は出力先のテンプレートで &lt;code&gt;{{ }}&lt;/code&gt; で囲まれている部分に実際の値が埋め込まれる。
たとえば OS が windows でアーキテクチャが amd64 なら &lt;code&gt;goxdist/windows_amd64/gpgpdump&lt;/code&gt; と展開されるわけだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fa953b67964726c338be9843a0c52e04:tpl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fa953b67964726c338be9843a0c52e04:tpl&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;このようにクロス・コンパイルが非常に簡単なので &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; などで複数プラットフォームのバイナリを生成するのも難しくない。&lt;/p&gt;

&lt;h2 id=&#34;ghr-を使って-github-に-deploy-する:fa953b67964726c338be9843a0c52e04&#34;&gt;ghr を使って GitHub に Deploy する&lt;/h2&gt;

&lt;p&gt;今回は &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; から &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; へ &lt;a href=&#34;https://github.com/mitchellh/gox&#34; title=&#34;mitchellh/gox: A dead simple, no frills Go cross compile tool&#34;&gt;mitchellh/gox&lt;/a&gt; で生成した実行バイナリを deploy することを考える。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mitchellh/gox&#34; title=&#34;mitchellh/gox: A dead simple, no frills Go cross compile tool&#34;&gt;mitchellh/gox&lt;/a&gt; で生成した実行バイナリをそのままアップしてもいいのだが，ちょっと気持ち悪いので&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fa953b67964726c338be9843a0c52e04:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fa953b67964726c338be9843a0c52e04:s&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，まずは zip で固めてしまおう。
以下のような簡単な shell script を書いてみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

DIR=`pwd`
mkdir ./goxdist/dist
for PLATFORM in $(find ./goxdist -mindepth 1 -maxdepth 1 -type d); do
    PLATFORM_NAME=$(basename ${PLATFORM})

    if [ ${PLATFORM_NAME} = &amp;quot;dist&amp;quot; ]; then
        continue
    fi

    cd ${PLATFORM}
    zip ${DIR}/goxdist/dist/${PLATFORM_NAME}.zip ./*
    cd ${DIR}
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほど &lt;code&gt;goxdist&lt;/code&gt; フォルダ以下に生成した各バイナリをひとつづつ zip 圧縮して &lt;code&gt;goxdist/dist&lt;/code&gt; フォルダに置くだけの簡単なお仕事。
これで &lt;code&gt;goxdist/dist&lt;/code&gt; フォルダの中身を &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; に deploy すればよい。
&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; への deploy には &lt;a href=&#34;https://github.com/tcnksm/ghr&#34; title=&#34;tcnksm/ghr: Create Github Release and upload artifacts in parallel&#34;&gt;tcnksm/ghr&lt;/a&gt; が便利である。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go get github.com/tcnksm/ghr

$ ghr -h

Usage: ghr [options] TAG PATH

  ghr is a tool to create Release on Github and upload your artifacts to
  it. ghr parallelizes upload multiple artifacts.

  You can use ghr on GitHub Enterprise. Change URL by GITHUB_API env var.

Options:

  --username, -u        GitHub username. By default, ghr extracts user
                        name from global gitconfig value.

  --repository, -r      GitHub repository name. By default, ghr extracts
                        repository name from current directory&#39;s .git/config
                        value.

  --token, -t           GitHub API Token. To use ghr, you will first need
                        to create a GitHub API token with an account which
                        has enough permissions to be able to create releases.
                        You can set this value via GITHUB_TOKEN env var.

  --parallel=-1         Parallelization factor. This option limit amount
                        of parallelism of uploading. By default, ghr uses
                        number of logic CPU of your PC.

  --delete              Delete release if it already created. If you want
                        to recreate release itself from begining, use
                        this. Just want to upload same artifacts to same
                        release again, use --replace option.

  --replace             Replace artifacts if it is already uploaded. Same
                        artifact measn, same release and same artifact
                        name.

  --stat=false          Show number of download of each release and quit.
                        This is special command.

Examples:

  $ ghr v1.0 dist/     Upload all artifacts which are in dist directory
                       with version v1.0.

  $ ghr --stat         Show download number of each relase and quit.

$ ghr --username spiegel-im-spiegel --token $GITHUB_TOKEN v0.1.2 goxdist/dist/
--&amp;gt; Uploading: windows_amd64_v0.1.2.zip
--&amp;gt; Uploading: linux_amd64_v0.1.2.zip
--&amp;gt; Uploading: darwin_386_v0.1.2.zip
--&amp;gt; Uploading: darwin_amd64_v0.1.2.zip
--&amp;gt; Uploading: freebsd_386_v0.1.2.zip
--&amp;gt; Uploading: freebsd_amd64_v0.1.2.zip
--&amp;gt; Uploading: freebsd_arm_v0.1.2.zip
--&amp;gt; Uploading: linux_386_v0.1.2.zip
--&amp;gt; Uploading: netbsd_arm_v0.1.2.zip
--&amp;gt; Uploading: linux_arm_v0.1.2.zip
--&amp;gt; Uploading: netbsd_386_v0.1.2.zip
--&amp;gt; Uploading: netbsd_amd64_v0.1.2.zip
--&amp;gt; Uploading: openbsd_amd64_v0.1.2.zip
--&amp;gt; Uploading: openbsd_386_v0.1.2.zip
--&amp;gt; Uploading: windows_386_v0.1.2.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てな感じで deploy できる。
ちなみに &lt;code&gt;$GITHUB_TOKEN&lt;/code&gt; には &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; の access token をセットする。
Access token は &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; の &amp;ldquo;Settings” の &amp;ldquo;Personal access tokens” のページで取得できる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/24367702843/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1626/24367702843_e72366313f.jpg&#34; alt=&#34;Get access token in GitHub&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24367702843/&#34;&gt;Get access token in GitHub&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;repo の権限を付けること。
この access token を &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; で参照するには， &amp;ldquo;Settings” の &amp;ldquo;Environment Variables” でセットすればよい。
Build log にこの access token が表示されないようにすること。&lt;/p&gt;

&lt;p&gt;最終的な &lt;code&gt;.travis.yml&lt;/code&gt; の内容はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: go

go:
  - 1.5.3

branches:
  only: master

before_install:
  - go get -v github.com/mitchellh/gox
  - go get -v github.com/tcnksm/ghr

script:
  - go test -v ./...

after_success:
  - gox -output &amp;quot;goxdist/{{.OS}}_{{.Arch}}_`git tag | tail -1`/{{.Dir}}&amp;quot; -ldflags &amp;quot;-X main.Version=`git tag | tail -1`&amp;quot;
  - sh scripts/package.sh
  - ghr --username spiegel-im-spiegel --token $GITHUB_TOKEN `git tag | tail -1` goxdist/dist/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git tag | tail -1&lt;/code&gt; で最新のタグを取得して，そこに deploy するようにしている。
&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; に何か push するたびにビルドが走るのはウザいので， master ブランチのみテスト &amp;amp; ビルドの対象とした。&lt;/p&gt;

&lt;p&gt;まっ，こんなもんかな。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:fa953b67964726c338be9843a0c52e04&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yanolab/items/5a6dfb3c07c94f7c760d&#34;&gt;Golang + Raspberry Pi + LPS331AP で気圧・温度を測定してみた - Qiita&lt;/a&gt; : arm アーキテクチャでいけるらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/07/22/go1_5-cross-compile/&#34;&gt;Go1.5はクロスコンパイルがより簡単 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/rerofumi/items/d6a8ba08270acb61b31c&#34;&gt;Raspberry PI ２ 用の consul を作る (201512版 - Qiita&lt;/a&gt; : Raspberry PI 上でビルドするより Linux のクロス環境を使ったほうが速いらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/10/16/golang-in-ci-as-a-service/&#34;&gt;CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/m0a/items/d933982293dcadd4998c&#34;&gt;RaspberryPi1(2とzeroも)で動かすgolang製アプリをクロスコンパイル(onMac) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fa953b67964726c338be9843a0c52e04:bt&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の 1.4 までは &lt;a href=&#34;https://github.com/mitchellh/gox&#34; title=&#34;mitchellh/gox: A dead simple, no frills Go cross compile tool&#34;&gt;mitchellh/gox&lt;/a&gt; インストール後に &lt;code&gt;gox -build-toolchain&lt;/code&gt; でクロス環境を生成する必要があったが， 1.5 からは不要になった。めでたい！
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fa953b67964726c338be9843a0c52e04:bt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fa953b67964726c338be9843a0c52e04:tpl&#34;&gt;&lt;code&gt;{{ }}&lt;/code&gt; でテンプレートをハンドリングするには &lt;a href=&#34;https://golang.org/pkg/text/template/&#34; title=&#34;template - The Go Programming Language&#34;&gt;&lt;code&gt;text/template&lt;/code&gt;&lt;/a&gt; パッケージを使う。静的サイト・ジェネレータの &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; でもこのテンプレート・パッケージを使っている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fa953b67964726c338be9843a0c52e04:tpl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fa953b67964726c338be9843a0c52e04:s&#34;&gt;企業などのネット環境では Web から exe ファイルなどの実行バイナリを直接ダウンロードすることを禁止している場合もある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fa953b67964726c338be9843a0c52e04:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>スタック追跡とパニック・ハンドリング - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/stack-trace-and-panic-handling/" />
		<id>tag:text.Baldanders.info,2016-02-13:/golang/stack-trace-and-panic-handling/</id>
		<published>2016-02-13T14:48:05+09:00</published>
		<updated>2016-02-13T14:48:05+09:00</updated>
		<summary>panic 時の出力をカスタマイズすることを考える。スタック情報を取得するには， panic を recover で捕まえた上で runtime.Caller() 関数を使う。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は軽めの小ネタで。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;」でも少し説明したが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では回復不能のエラー（ゼロ除算やメモリ不足など）が発生した場合には &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; を投げる仕様になっている。
たとえば以下のコードでは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
)

func main() {
	os.Exit(run())
}

func run() int {
	f()
	return 0
}

func f() {
	numbers := []int{0, 1, 2}
	fmt.Println(numbers[3]) //panic!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のスタック情報が標準エラー出力に表示される&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4e4334940cfbd371abfb6e84384d704c:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4e4334940cfbd371abfb6e84384d704c:s&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
（&lt;a href=&#34;https://play.golang.org/&#34;&gt;The Go Playground&lt;/a&gt; での実行結果）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;panic: runtime error: index out of range

goroutine 1 [running]:
main.f()
	/tmp/sandbox269685094/main.go:19 +0x160
main.run(0x20300, 0x104000e0)
	/tmp/sandbox269685094/main.go:13 +0x20
main.main()
	/tmp/sandbox269685094/main.go:9 +0x20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁ必要な情報はあるのでこれでも構わないのだが，ファイル名がフルパスで表示されるのがアレな感じである。
また出力先が標準エラー出力で固定されているのも面白くない。&lt;/p&gt;

&lt;p&gt;そこで &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; 時の出力をカスタマイズすることを考える。
スタック情報を取得するには， &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; を &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;recover&lt;/a&gt; で捕まえた上で &lt;a href=&#34;https://golang.org/pkg/runtime/&#34; title=&#34;runtime - The Go Programming Language&#34;&gt;&lt;code&gt;runtime&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Caller()&lt;/code&gt; 関数を使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;runtime&amp;quot;
)

func main() {
	os.Exit(run(os.Stderr))
}

func run(log io.Writer) (exit int) {
	defer func() {
		if r := recover(); r != nil {
			fmt.Fprintf(log, &amp;quot;Panic: %v\n&amp;quot;, r)
			for depth := 0; ; depth++ {
				pc, src, line, ok := runtime.Caller(depth)
				if !ok {
					break
				}
				fmt.Fprintf(log, &amp;quot; -&amp;gt; %d: %s: %s(%d)\n&amp;quot;, depth, runtime.FuncForPC(pc).Name(), src, line)
			}
			exit = 1
		}
	}()

	f()
    exit = 0
    return
}

func f() {
	numbers := []int{0, 1, 2}
	fmt.Println(numbers[3]) //panic!
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで出力は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Panic: runtime error: index out of range
 -&amp;gt; 0: main.run.func1: /tmp/sandbox562252505/main.go(19)
 -&amp;gt; 1: runtime.call16: /usr/local/go/src/runtime/asm_amd64p32.s(390)
 -&amp;gt; 2: runtime.gopanic: /usr/local/go/src/runtime/panic.go(423)
 -&amp;gt; 3: runtime.panicindex: /usr/local/go/src/runtime/panic.go(12)
 -&amp;gt; 4: main.f: /tmp/sandbox562252505/main.go(36)
 -&amp;gt; 5: main.run: /tmp/sandbox562252505/main.go(29)
 -&amp;gt; 6: main.main: /tmp/sandbox562252505/main.go(11)
 -&amp;gt; 7: runtime.main: /usr/local/go/src/runtime/proc.go(111)
 -&amp;gt; 8: runtime.goexit: /usr/local/go/src/runtime/asm_amd64p32.s(1133)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
ファイル名を出力したくないなら for 文の中を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for depth := 0; ; depth++ {
	pc, _, line, ok := runtime.Caller(depth)
	if !ok {
		break
	}
	fmt.Fprintf(log, &amp;quot; -&amp;gt; %d: %s: (%d)\n&amp;quot;, depth, runtime.FuncForPC(pc).Name(), line)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とする手もある。
コードを書いてる人はスタック追跡情報とファイルの行番号があれば大体あたりをつけられるので，これだけでもありがたい。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:4e4334940cfbd371abfb6e84384d704c&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sgykfjsm.github.io/blog/2016/01/20/golang-function-tracing/&#34;&gt;Goでfunctionが実行された順番を追いかける - sgykfjsm.github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:4e4334940cfbd371abfb6e84384d704c:s&#34;&gt;ちなみにこの情報は &lt;code&gt;-s&lt;/code&gt; のリンクオプション（ビルド時に &lt;code&gt;-ldflags &amp;quot;-s&amp;quot;&lt;/code&gt; と指定する）でデバッグ用のシンボル情報を削除しても表示されるようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4e4334940cfbd371abfb6e84384d704c:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>gpgpdump - OpenPGP packet visualizer - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/gpgpdump-released/" />
		<id>tag:text.Baldanders.info,2016-02-07:/remark/2016/02/gpgpdump-released/</id>
		<published>2016-02-07T00:18:50+09:00</published>
		<updated>2016-02-07T11:08:40+09:00</updated>
		<summary>OpenPGP パケットの内容を視覚化する gpgpdump の 0.1.0 をリリースした。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;余暇でちまちま作っていたが，とりあえず使えるようになったので。&lt;/p&gt;

&lt;p&gt;OpenPGP パケットの内容を視覚化する &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; の 0.1.0 をリリースした。
名前でピンとくる人もいるだろうが，山本和彦さんの &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; の翻案である。
特徴は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で作成。特別なパッケージは使用していないので &lt;code&gt;go get&lt;/code&gt; コマンドのみでビルド可能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; （または &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt;）フォーマットで出力&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;RFC 4880&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc5581&#34; title=&#34;RFC 5581 - The Camellia Cipher in OpenPGP&#34;&gt;RFC 5581&lt;/a&gt; および &lt;a href=&#34;https://tools.ietf.org/html/rfc6637&#34; title=&#34;RFC 6637 - Elliptic Curve Cryptography (ECC) in OpenPGP&#34;&gt;RFC 6637&lt;/a&gt; をサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License Version 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat sig
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iF4EARMIAAYFAlTDCN8ACgkQMfv9qV+7+hg2HwEA6h2iFFuCBv3VrsSf2BREQaT1
T1ZprZqwRPOjiLJg9AwA/ArTwCPz7c2vmxlv7sRlRLUI6CdsOqhuO1KfYXrq7idI
=ZOTN
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という OpenPGP 署名データがあるとする。
これを &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; で表示すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pgpdump sig
Old: Signature Packet(tag 2)(94 bytes)
        Ver 4 - new
        Sig type - Signature of a canonical text document(0x01).
        Pub alg - Reserved for ECDSA(pub 19)
        Hash alg - SHA256(hash 8)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Sat Jan 24 11:52:15 東京 (標準時) 2015
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x31FBFDA95FBBFA18
        Hash left 2 bytes - 36 1f
        Unknown signature(pub 19)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
一方， &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; の場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpgpdump sig
[[Packet]]
  name = &amp;quot;Packet&amp;quot;
  value = &amp;quot;Signature Packet (tag 2)&amp;quot;
  note = &amp;quot;94 bytes&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Version&amp;quot;
    value = &amp;quot;4&amp;quot;
    dump = &amp;quot;04&amp;quot;
    note = &amp;quot;new&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Signiture Type&amp;quot;
    value = &amp;quot;Signature of a canonical text document (0x01)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Public-key Algorithm&amp;quot;
    value = &amp;quot;ECDSA public key algorithm (pub 19)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hash Algorithm&amp;quot;
    value = &amp;quot;SHA256 (hash 8)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hashed Subpacket&amp;quot;

    [[Packet.Item.Item]]
      name = &amp;quot;Signature Creation Time (sub 2)&amp;quot;
      value = &amp;quot;2015-01-24T11:52:15+09:00&amp;quot;
      dump = &amp;quot;54 c3 08 df&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Unhashed Subpacket&amp;quot;

    [[Packet.Item.Item]]
      name = &amp;quot;Issuer (sub 16)&amp;quot;
      value = &amp;quot;0x31FBFDA95FBBFA18&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hash left 2 bytes&amp;quot;
    dump = &amp;quot;36 1f&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Multi-precision integer&amp;quot;
    dump = &amp;quot;...&amp;quot;
    note = &amp;quot;ECDSA r (256 bits)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Multi-precision integer&amp;quot;
    dump = &amp;quot;...&amp;quot;
    note = &amp;quot;ECDSA s (252 bits)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じで同等の内容を &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; フォーマットで出力する。
また &lt;code&gt;-j&lt;/code&gt; オプションを付けると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpgpdump -j sig
{
  &amp;quot;Packet&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;Packet&amp;quot;,
      &amp;quot;value&amp;quot;: &amp;quot;Signature Packet (tag 2)&amp;quot;,
      &amp;quot;note&amp;quot;: &amp;quot;94 bytes&amp;quot;,
      &amp;quot;Item&amp;quot;: [
        {
          &amp;quot;name&amp;quot;: &amp;quot;Version&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;4&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;04&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;new&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Signiture Type&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;Signature of a canonical text document (0x01)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Public-key Algorithm&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;ECDSA public key algorithm (pub 19)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hash Algorithm&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;SHA256 (hash 8)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hashed Subpacket&amp;quot;,
          &amp;quot;Item&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;Signature Creation Time (sub 2)&amp;quot;,
              &amp;quot;value&amp;quot;: &amp;quot;2015-01-24T11:52:15+09:00&amp;quot;,
              &amp;quot;dump&amp;quot;: &amp;quot;54 c3 08 df&amp;quot;
            }
          ]
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Unhashed Subpacket&amp;quot;,
          &amp;quot;Item&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;Issuer (sub 16)&amp;quot;,
              &amp;quot;value&amp;quot;: &amp;quot;0x31FBFDA95FBBFA18&amp;quot;
            }
          ]
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hash left 2 bytes&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;36 1f&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Multi-precision integer&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;...&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;ECDSA r (256 bits)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Multi-precision integer&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;...&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;ECDSA s (252 bits)&amp;quot;
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じに &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; 形式で出力する。
だいぶ冗長な表現で申し訳ないが，解析結果を以下の &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; で正規化している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Packets - OpenPGP packets
type Packets struct {
	Packet []*Item
}

//Item - item in Packets
type Item struct {
	Name  string  `toml:&amp;quot;name&amp;quot; json:&amp;quot;name&amp;quot;`
	Value string  `toml:&amp;quot;value,omitempty&amp;quot; json:&amp;quot;value,omitempty&amp;quot;`
	Dump  string  `toml:&amp;quot;dump,omitempty&amp;quot; json:&amp;quot;dump,omitempty&amp;quot;`
	Note  string  `toml:&amp;quot;note,omitempty&amp;quot; json:&amp;quot;note,omitempty&amp;quot;`
	Item  []*Item `toml:&amp;quot;Item,omitempty&amp;quot; json:&amp;quot;Item,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の勉強用に作成した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet&#34;&gt;&lt;code&gt;golang.org/x/crypto/openpgp/packet&lt;/code&gt;&lt;/a&gt; というパッケージがあって，これを使えば簡単にできるだろうと思ったのが大間違いで，結局このパッケージで使えたのは &lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet#OpaquePacket&#34;&gt;&lt;code&gt;OpaquePacket&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet#OpaqueSubpacket&#34;&gt;&lt;code&gt;OpaqueSubpacket&lt;/code&gt;&lt;/a&gt; くらい。
実際のパケットの解析はゴリゴリとコードを書くはめになった。
いや，これだけでもだいぶ助かったけど。&lt;/p&gt;

&lt;p&gt;とはいえ，まだまだ課題はあって&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パケット解析部分のテストが未実装。つか，古いフォーマットのパケットのテストどうしよう&lt;/li&gt;
&lt;li&gt;そもそもパケット解析部分は作りが悪くて，不正なパケットを食わせると簡単に &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; が起きてしまうので全面的に書きなおす予定&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4880#section-5.6&#34;&gt;Compressed Data Packet (Tag 8)&lt;/a&gt; が未実装。どうやって実現しようか悩み中&lt;/li&gt;
&lt;li&gt;実は ECC (&lt;a href=&#34;https://tools.ietf.org/html/rfc6637&#34; title=&#34;RFC 6637 - Elliptic Curve Cryptography (ECC) in OpenPGP&#34;&gt;RFC 6637&lt;/a&gt;) がよく分かってない。もしかしたら解釈を間違えているかもしれない&lt;/li&gt;
&lt;li&gt;最終的には &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; と同等な出力を目指す&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったあたりを，これからゆっくり手を入れていこうと考えている。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:a131791b2fce306ad1e4a38715959029&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml&#34;&gt;わかる！ OpenPGP 暗号 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;プログラミング言語 Go — text.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Struct タグについて - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/struct-tag/" />
		<id>tag:text.Baldanders.info,2016-02-05:/golang/struct-tag/</id>
		<published>2016-02-05T00:11:53+09:00</published>
		<updated>2016-02-05T00:11:53+09:00</updated>
		<summary>Struct で正規化できる情報であれば，タグを使うことでアプリケーション外部とのやり取りがずっと楽になる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; で構造化されている情報を特定のファイルやデータベースに出力したり，逆にファイルやデータベースの情報を &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; に流し込みたい場合に &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; の各フィールドに目印になる情報があると便利である。
この目印として機能するのが &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; タグである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5fa302080eeba16361245078fe0e5ca6:an&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5fa302080eeba16361245078fe0e5ca6:an&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; タグは以下のように記述する。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;By convention, tag strings are a concatenation of optionally space-separated key:&#34;value&#34; pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 &#39; &#39;), quote (U+0022 &#39;&#34;&#39;), and colon (U+003A &#39;:&#39;). Each value is quoted using U+0022 &#39;&#34;&#39; characters and Go string literal syntax.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/pkg/reflect/#example_StructTag&#34;&gt;reflect - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Server struct {
	Host      string `elem:&amp;quot;host&amp;quot;`
	IPAddress string `elem:&amp;quot;ip_address&amp;quot;`
	Port      int    `elem:&amp;quot;port&amp;quot;`
	Note      string `elem:&amp;quot;note&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このタグ情報を取得するには &lt;a href=&#34;https://golang.org/pkg/reflect/&#34; title=&#34;reflect - The Go Programming Language&#34;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; パッケージを使う。
たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;reflect&amp;quot;
)

type Server struct {
	Host      string `elem:&amp;quot;host&amp;quot;`
	IPAddress string `elem:&amp;quot;ip_address&amp;quot;`
	Port      int    `elem:&amp;quot;port&amp;quot;`
	Note      string `elem:&amp;quot;note&amp;quot;`
}

func main() {
	s := Server{}
	t := reflect.TypeOf(s)
	for i := 0; i &amp;lt; t.NumField(); i++ {
		field := t.Field(i)
		fmt.Printf(&amp;quot;Name=%s , tag(elem)=%s\n&amp;quot;, field.Name, field.Tag.Get(&amp;quot;elem&amp;quot;))
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行するとこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Name=Host , tag(elem)=host
Name=IPAddress , tag(elem)=ip_address
Name=Port , tag(elem)=port
Name=Note , tag(elem)=note
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際には &lt;a href=&#34;https://golang.org/pkg/reflect/&#34; title=&#34;reflect - The Go Programming Language&#34;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; を直接使う局面は少なく，既にあるパッケージを利用することが多い。
たとえば &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; による構造化データを &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; 形式に出力する &lt;a href=&#34;https://golang.org/pkg/encoding/json/&#34; title=&#34;json - The Go Programming Language&#34;&gt;&lt;code&gt;encoding/json&lt;/code&gt;&lt;/a&gt; パッケージがある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;encoding/json&amp;quot;
	&amp;quot;fmt&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot;`
}

func main() {
	s := Server{Host: &amp;quot;localhost&amp;quot;, IPAddress: &amp;quot;127.0.0.1&amp;quot;, Port: 8080, Note: &amp;quot;Web Application&amp;quot;}
	j, err := json.MarshalIndent(s, &amp;quot;&amp;quot;, &amp;quot;  &amp;quot;)
	if err != nil {
		return
	}
	fmt.Println(string(j))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行するとこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
  &amp;quot;ip_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
  &amp;quot;port&amp;quot;: 8080,
  &amp;quot;note&amp;quot;: &amp;quot;Web Application&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Server&lt;/code&gt; の内容が &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; 形式で出力されているのが分かるだろう。
&lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; の要素名がタグで指定した名前になっていることを確認してほしい。&lt;/p&gt;

&lt;p&gt;反対もやってみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;encoding/json&amp;quot;
	&amp;quot;fmt&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot;`
}

func main() {
	svr := []byte(`{
  &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
  &amp;quot;ip_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
  &amp;quot;port&amp;quot;: 8080,
  &amp;quot;note&amp;quot;: &amp;quot;Web Application&amp;quot;
}`)
	var s Server
	if err := json.Unmarshal(svr, &amp;amp;s); err != nil {
		return
	}
	fmt.Println(s)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果はこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{localhost 127.0.0.1 8080 Web Application}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;きれいに &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; に値が入っているのが分かると思う。&lt;/p&gt;

&lt;p&gt;ちなみにタグの書式は &lt;code&gt;key:&amp;quot;value&amp;quot;&lt;/code&gt; だが，間違って記述しても単に無視されるだけでコンパイル時も実行時もエラーにならないので注意が必要である。
なおタグ書式の文法ミスについては，静的検査ツールの &lt;a href=&#34;https://golang.org/cmd/vet/&#34; title=&#34;vet - The Go Programming Language&#34;&gt;vet&lt;/a&gt; でチェックできる。&lt;/p&gt;

&lt;p&gt;タグは複数列挙することができる。
たとえばサンプルの構造体を &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; にも対応させたいなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Server struct {
	Host      string `json:&amp;quot;host&amp;quot; toml:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot; toml:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot; toml:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot; toml:&amp;quot;note&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとする（デリミタは空白文字）。
じゃあ，先ほどと同じようにして &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; で出力してみる。
&lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; を扱うには &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;&lt;code&gt;github.com/BurntSushi/toml&lt;/code&gt;&lt;/a&gt; パッケージを使うとよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/BurntSushi/toml&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot; toml:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot; toml:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot; toml:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot; toml:&amp;quot;note,omitempty&amp;quot;`
}

func main() {
	s := Server{Host: &amp;quot;localhost&amp;quot;, IPAddress: &amp;quot;127.0.0.1&amp;quot;, Port: 8080, Note: &amp;quot;&amp;quot;}
	t := new(bytes.Buffer)
	if err := toml.NewEncoder(t).Encode(s); err != nil {
		return
	}
	fmt.Println(t.String())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host = &amp;quot;localhost&amp;quot;
ip_address = &amp;quot;127.0.0.1&amp;quot;
port = 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;omitempty&lt;/code&gt; オプションはフィールドが空（&lt;code&gt;nil&lt;/code&gt; または空文字列）の場合に出力を省略できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5fa302080eeba16361245078fe0e5ca6:oz&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5fa302080eeba16361245078fe0e5ca6:oz&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
このオプションは &lt;a href=&#34;https://golang.org/pkg/encoding/json/&#34; title=&#34;json - The Go Programming Language&#34;&gt;&lt;code&gt;encoding/json&lt;/code&gt;&lt;/a&gt; パッケージでも使える。&lt;/p&gt;

&lt;p&gt;ついでに反対もやってみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/BurntSushi/toml&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot; toml:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot; toml:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot; toml:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot; toml:&amp;quot;note,omitempty&amp;quot;`
}

func main() {
	svr := `
host = &amp;quot;localhost&amp;quot;
ip_address = &amp;quot;127.0.0.1&amp;quot;
port = 8080
note = &amp;quot;Web Application&amp;quot;
`
	var s Server
	if _, err := toml.Decode(svr, &amp;amp;s); err != nil {
		return
	}
	fmt.Println(s)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{localhost 127.0.0.1 8080 Web Application}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; で正規化できる情報であれば，タグ機能を使うことでアプリケーション外部とのやり取りがだいぶ楽になる。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:5fa302080eeba16361245078fe0e5ca6&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiyosi.tumblr.com/post/100922038678/go-%E3%81%A7-struct-%E3%81%AE%E3%82%BF%E3%82%B0%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B&#34;&gt;Go で struct のタグ情報を取得する - hiyosi&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/fcd25db64f341ad2471f&#34;&gt;struct にアノテーションつけてたら go vet . すべき - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.restartr.com/2014/08/13/golang-json-marshal-unmarshal/&#34;&gt;Goのjson.Marshal/Unmarshalの仕様を整理してみる - I Will Survive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/6556d4eba797329e9f51&#34;&gt;BurntSushi/tomlを使ってハマったこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:5fa302080eeba16361245078fe0e5ca6:an&#34;&gt;「アノテーション（annotation）」と呼ぶ人もいる。たぶん Java の annotation 機能を意識しているんだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5fa302080eeba16361245078fe0e5ca6:an&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5fa302080eeba16361245078fe0e5ca6:oz&#34;&gt;数値の場合は &lt;code&gt;omitzero&lt;/code&gt; オプションを付けると 0 のときに出力を省略できる。ただし &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;&lt;code&gt;BurntSushi/toml&lt;/code&gt;&lt;/a&gt; パッケージでは &lt;a href=&#34;http://qiita.com/reiki4040/items/6556d4eba797329e9f51&#34;&gt;&lt;code&gt;Decode()&lt;/code&gt; がうまく動かない&lt;/a&gt;らしい。実は &lt;code&gt;omitempty&lt;/code&gt; オプションも &lt;code&gt;Decode()&lt;/code&gt; 時の挙動が怪しいんだよなぁ。 &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; パーサの別実装としては &lt;a href=&#34;https://github.com/naoina/toml&#34;&gt;naoina/toml&lt;/a&gt; というのもある。これは最新の &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; 仕様に追随しているようだが &lt;code&gt;omitzero&lt;/code&gt; オプションには対応していない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5fa302080eeba16361245078fe0e5ca6:oz&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： フェルミのパラドックス - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/30-stories/" />
		<id>tag:text.Baldanders.info,2016-01-30:/remark/2016/01/30-stories/</id>
		<published>2016-01-30T19:19:39+09:00</published>
		<updated>2016-01-30T19:19:39+09:00</updated>
		<summary>フェルミのパラドックス / GnuPG 2.1.11 released / Go 1.6 Release Candidate 1 / MIAU からの意見書</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#seti:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;フェルミのパラドックス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gpg:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;GnuPG 2.1.11 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golang:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;Go 1.6 Release Candidate 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miau:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;MIAU からの意見書&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;seti:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;フェルミのパラドックス&lt;/h2&gt;

&lt;p&gt;人類の歴史は（宇宙誕生からの時間に比べれば）極々短いものだが，この歴史の中で私たちが ETI（Extra-terrestrial Intelligence; 地球外生命体）と直接的・間接的に接触したという記録はない。
宇宙に ETI やその文明がありふれているのなら，今まで地球人が接触しなかったのは何故？ というのが「フェルミのパラドックス」の内容であり，これが ETI 非存在を示す間接的な材料となっている。&lt;/p&gt;

&lt;p&gt;最近このフェルミのパラドックスを説明する新しい説が出たらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://online.liebertpub.com/doi/10.1089/ast.2015.1387&#34;&gt;The Case for a Gaian Bottleneck: The Biology of Habitability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://science.anu.edu.au/whats-on/all-news/aliens-are-silent-because-they-are-extinct&#34;&gt;The aliens are silent because they are extinct | Science, Medicine and Health&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/01/27exolife/index-j.shtml&#34;&gt;地球外生命からコンタクトがない理由 - アストロアーツ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;もし金星や火星に初期の微生物が存在していたとしても、急速な環境の変化を安定にすることはできませんでした。一方、おそらく地球上の生物は、惑星の気候を安定させる重要な役割を果たしたのでしょう。いまだに地球外生命体の存在を示す兆候を見つけられていないのは、生物または知的生命体の誕生というよりも、惑星表面におけるフィードバック・サイクルの生物学的な制御が急速に起こることは稀だ、ということと関係が深いと思われます&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/01/27exolife/index-j.shtml&#34;&gt;地球外生命からコンタクトがない理由&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;銀河系内にどのくらい（地球人と交信可能な）知的文明が存在するか推定する方程式がある。
これが「ドレイク方程式」と呼ばれるものだ。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
    N = R_{*} \times f_p \times  n_e \times f_l \times f_i \times f_c \times L
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;各項の意味は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$R_{*}$ ： 銀河系内で年間で誕生する恒星の数&lt;/li&gt;
&lt;li&gt;$f_p$ ： その恒星が惑星を持つようになる確率&lt;/li&gt;
&lt;li&gt;$n_e$ ： それらの中で生命の発生し得る条件を備えた惑星の数&lt;/li&gt;
&lt;li&gt;$f_l$ ： その惑星の中に実際に生命が発生し得る確率&lt;/li&gt;
&lt;li&gt;$f_i$ ： その生命が知性を持つに至る確率&lt;/li&gt;
&lt;li&gt;$f_c$ ： 彼らが実際に恒星間電波通信を行うまでに進歩する確率&lt;/li&gt;
&lt;li&gt;$L$ ： その文明の寿命&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;である。&lt;/p&gt;

&lt;p&gt;この式の評価は色々あるのだが，金子隆一著『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;ファースト・コンタクト―地球外知性体と出会う日&lt;/a&gt;』では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$R_{*} = 20$&lt;/li&gt;
&lt;li&gt;$f_p = 0.25$&lt;/li&gt;
&lt;li&gt;$n_e = 1.5$&lt;/li&gt;
&lt;li&gt;$f_l = 0.75$&lt;/li&gt;
&lt;li&gt;$f_i = 0.5$&lt;/li&gt;
&lt;li&gt;$f_c = 0.5$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と見積もられていた。
つまり $N = 1.4L$ となる。
仮に恒星間電波通信が可能な文明の寿命を1万年とするなら約1万4千の地球外文明が存在し得ることになる。
ちなみに地球人が電波を通信手段として使うようになってからまだ150年も経っていない。
さらに宇宙に向けて「アレシボ・メッセージ」を送ったのは1974年末。
「つい最近」の出来事である。&lt;/p&gt;

&lt;p&gt;後半の $f_i$, $f_c$, $L$ 以外はほぼ物理的要因で決まると言ってよい。
また $L$ の唯一のサンプルは地球文明なので，地球文明が長く続ければ続くほど $L$ が大きく見積もれることになる。&lt;/p&gt;

&lt;p&gt;しかし今回の論文から， $n_e$ や $f_l$ といった項が実はかなり小さい値なのではないか，と考えることもできる。
さて，現在の学者さん達はドレイク方程式をどのように解釈するだろうか。&lt;/p&gt;

&lt;p&gt;そうそう。
&lt;a href=&#34;http://setiathome.ssl.berkeley.edu/&#34;&gt;SETI@home&lt;/a&gt; はバージョン 8 がリリースされている。
自宅マシンでは順調に稼働中。
Android 版もあるよ。&lt;/p&gt;

&lt;h2 id=&#34;gpg:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;GnuPG 2.1.11 released&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.1.11 が出た。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q1/000383.html&#34;&gt;[Announce] GnuPG 2.1.11 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;セキュリティ・アップデートはなし。
主な変更点は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: New command &amp;ndash;export-ssh-key to replace the gpgkey2ssh tool.&lt;/li&gt;
&lt;li&gt;gpg: Allow to generate mail address only keys with &amp;ndash;gen-key.&lt;/li&gt;
&lt;li&gt;gpg: &amp;ldquo;&amp;ndash;list-options show-usage&amp;rdquo; is now the default.&lt;/li&gt;
&lt;li&gt;gpg: Make lookup of DNS CERT records holding an URL work.&lt;/li&gt;
&lt;li&gt;gpg: Emit PROGRESS status lines during key generation.&lt;/li&gt;
&lt;li&gt;gpg: Don&amp;rsquo;t check for ambigious or non-matching key specification in the config file or given to &amp;ndash;encrypt-to.  This feature will return in 2.3.x.&lt;/li&gt;
&lt;li&gt;gpg: Lock keybox files while updating them.&lt;/li&gt;
&lt;li&gt;gpg: Solve rare error on Windows during keyring and Keybox updates.&lt;/li&gt;
&lt;li&gt;gpg: Fix possible keyring corruption. (bug#2193)&lt;/li&gt;
&lt;li&gt;gpg: Fix regression of &amp;ldquo;bkuptocard&amp;rdquo; sub-command in &amp;ndash;edit-key and remove &amp;ldquo;checkbkupkey&amp;rdquo; sub-command introduced with 2.1.  (bug#2169)&lt;/li&gt;
&lt;li&gt;gpg: Fix internal error in gpgv when using default keyid-format.&lt;/li&gt;
&lt;li&gt;gpg: Fix &amp;ndash;auto-key-retrieve to work with dirmngr.conf configured keyservers. (bug#2147).&lt;/li&gt;
&lt;li&gt;agent: New option &amp;ndash;pinentry-timeout.&lt;/li&gt;
&lt;li&gt;scd: Improve unplugging of USB readers under Windows.&lt;/li&gt;
&lt;li&gt;scd: Fix regression for generating RSA keys on card.&lt;/li&gt;
&lt;li&gt;dirmmgr: All configured keyservers are now searched.&lt;/li&gt;
&lt;li&gt;dirmngr: Install CA certificate for hkps.pool.sks-keyservers.net. Use this certiticate even if &amp;ndash;hkp-cacert is not used.&lt;/li&gt;
&lt;li&gt;gpgtar: Add actual encryption code.  gpgtar does now fully replace gpg-zip.&lt;/li&gt;
&lt;li&gt;gpgtar: Fix filename encoding problem on Windows.&lt;/li&gt;
&lt;li&gt;Print a warning if a GnuPG component is using an older version of gpg-agent, dirmngr, or scdaemon.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;golang:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;Go 1.6 Release Candidate 1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の 1.6 RC 版が登場。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/pXcUuFHc4YE&#34;&gt;Go 1.6 Release Candidate 1 is released - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Our goal is to release the final version of Go 1.6 in around two weeks.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/pXcUuFHc4YE&#34;&gt;Go 1.6 Release Candidate 1 is released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;だそうで，楽しみである。&lt;/p&gt;

&lt;h2 id=&#34;miau:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;MIAU からの意見書&lt;/h2&gt;

&lt;p&gt;MIAU から「知的財産推進計画2016」が公開されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://miau.jp/index1453962972.phtml&#34;&gt;MIAU : 知的財産戦略本部「知的財産推進計画2016」策定に当たっての意見募集に、意見書を提出しました。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容については概ね同意。
つか， MIAU って仕事してるんだねぇ（笑）&lt;/p&gt;

&lt;p&gt;でもこれって効果あるのかねぇ。
やらないよりはマシだろうけど。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41GPXP2HRVL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;ファースト・コンタクト―地球外知性体と出会う日 (文春新書)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;金子 隆一 &lt;/dd&gt;&lt;dd&gt;文藝春秋 1998-10&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;地球外文明探査の歴史を俯瞰する良書。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-30&#34;&gt;2016-01-30&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語と Unicode 正規化 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/unicode-normalization/" />
		<id>tag:text.Baldanders.info,2016-01-30:/golang/unicode-normalization/</id>
		<published>2016-01-30T04:05:52+09:00</published>
		<updated>2016-02-18T22:34:57+09:00</updated>
		<summary>今回は少し目先を変えて「Unicode 正規化」のお話。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は少し目先を変えて「Unicode 正規化（normalization）」のお話。&lt;/p&gt;

&lt;h2 id=&#34;2羽の-ペンギン:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;2羽の「ペンギン」&lt;/h2&gt;

&lt;p&gt;まず「ペンギン」という文字列を思い浮かべてみる。
この文字列を Unicode のコードポイントで表すと以下のようになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ペ：U+30DA&lt;/li&gt;
&lt;li&gt;ン：U+30F3&lt;/li&gt;
&lt;li&gt;ギ：U+30AE&lt;/li&gt;
&lt;li&gt;ン：U+30F3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ところでペンギンの「ペ」と「ギ」は半濁点および濁点を含む。
Unicode は「ペ」と「ギ」をそれぞれ2つの要素に分解できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ペ：U+30D8 + U+309A&lt;/li&gt;
&lt;li&gt;ン：U+30F3&lt;/li&gt;
&lt;li&gt;ギ：U+30AD + U+3099&lt;/li&gt;
&lt;li&gt;ン：U+30F3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;U+309A および U+3099 はそれぞれ半濁点と濁点を表す「結合文字（combining character）」である。
「ヘ」や「キ」のような「基底文字（base character）」に結合文字を1つ以上&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:cs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:cs&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 付加した文字を「合成列（composite sequence）」と呼ぶ。
これに対して「ペ：U+30DA」や「ギ：U+30AE」のような文字を「事前合成形（precomposed）」と呼ぶ。&lt;/p&gt;

&lt;p&gt;つまり同じ文字を同じ文字集合&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:ccs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:ccs&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; で表しているのにもかかわらず複数の符号化&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:ecd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:ecd&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; が存在するわけだ。
これを「重複符号化」と言う。
文字集合に重複符号化があるというのは，はっきり言って「クソ仕様」である。&lt;/p&gt;

&lt;p&gt;もちろんこれは Unicode を作った連中がヘボいのではなく（いや，ヘボいのかもしれないが），いわゆる「歴史的経緯」というやつである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:jis&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:jis&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
だからこれはこういうものだと諦めるしかない。&lt;/p&gt;

&lt;p&gt;しかし情報処理を行う上では，この2羽の「ペンギン」が等価（equivalance）であることを示す手立てを考えなければならない。&lt;/p&gt;

&lt;h2 id=&#34;正規等価:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;正規等価&lt;/h2&gt;

&lt;p&gt;2羽の「ペンギン」が等価であることを示す一番簡単な方法は，文字列を事前合成形あるいは合成列のどちらかに統一（＝正規化）してしまえばいい。
これを「正規等価（canonical equivalance）」と呼ぶ。
このうち，事前合成形に正規化する方法を “NFC（Normalization Form Composition）”，合成列に正規化する方法を “NFD（Normalization Form Decomposition）” と呼ぶ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では &lt;code&gt;golang.org/x/text/unicode/&lt;/code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34; title=&#34;norm - GoDoc&#34;&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/a&gt; パッケージで Unicode 文字列を正規化できる。
まぁ，コードで書いたほうがはやいか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;golang.org/x/text/unicode/norm&amp;quot;
)

func main() {
	penguin := &amp;quot;ペンギン&amp;quot;
	for pos, runeValue := range penguin {
		fmt.Printf(&amp;quot;penguin[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	penguin2 := string(norm.NFD.Bytes([]byte(penguin)))
	for pos, runeValue := range penguin2 {
		fmt.Printf(&amp;quot;penguin2[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	penguin3 := string(norm.NFC.Bytes([]byte(penguin2)))
	for pos, runeValue := range penguin3 {
		fmt.Printf(&amp;quot;penguin3[%d] = %#U\n&amp;quot;, pos, runeValue)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;penguin[0] = U+30DA &#39;ペ&#39;
penguin[3] = U+30F3 &#39;ン&#39;
penguin[6] = U+30AE &#39;ギ&#39;
penguin[9] = U+30F3 &#39;ン&#39;
penguin2[0] = U+30D8 &#39;ヘ&#39;
penguin2[3] = U+309A &#39;゚&#39;
penguin2[6] = U+30F3 &#39;ン&#39;
penguin2[9] = U+30AD &#39;キ&#39;
penguin2[12] = U+3099 &#39;゙&#39;
penguin2[15] = U+30F3 &#39;ン&#39;
penguin3[0] = U+30DA &#39;ペ&#39;
penguin3[3] = U+30F3 &#39;ン&#39;
penguin3[6] = U+30AE &#39;ギ&#39;
penguin3[9] = U+30F3 &#39;ン&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NFC と NFD が交換可能であることがわかると思う。&lt;/p&gt;

&lt;h2 id=&#34;3羽目の-ペンギン-と互換等価:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;3羽目の「ペンギン」と互換等価&lt;/h2&gt;

&lt;p&gt;さてここで3羽目の「ﾍﾟﾝｷﾞﾝ」に登場してもらおう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ﾍ：U+FF8D&lt;/li&gt;
&lt;li&gt;ﾟ：U+FF9F&lt;/li&gt;
&lt;li&gt;ﾝ：U+FF9D&lt;/li&gt;
&lt;li&gt;ｷ：U+FF77&lt;/li&gt;
&lt;li&gt;ﾞ：U+FF9E&lt;/li&gt;
&lt;li&gt;ﾝ：U+FF9D&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これはいわゆる「半角カナ」である。
半角カナの半濁点 U+FF9F および濁点 U+FF9E は結合文字の半濁点 U+309A および濁点 U+3099 と同等とみなされているが「ペ」や「ギ」に相当する半角カナの事前合成形は存在しないため NFC で事前合成形に正規化しようとしても&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;golang.org/x/text/unicode/norm&amp;quot;
)

func main() {
	penguin := &amp;quot;ﾍﾟﾝｷﾞﾝ&amp;quot;
	for pos, runeValue := range penguin {
		fmt.Printf(&amp;quot;penguin[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	penguin2 := string(norm.NFC.Bytes([]byte(penguin)))
	for pos, runeValue := range penguin2 {
		fmt.Printf(&amp;quot;penguin2[%d] = %#U\n&amp;quot;, pos, runeValue)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;penguin[0] = U+FF8D &#39;ﾍ&#39;
penguin[3] = U+FF9F &#39;ﾟ&#39;
penguin[6] = U+FF9D &#39;ﾝ&#39;
penguin[9] = U+FF77 &#39;ｷ&#39;
penguin[12] = U+FF9E &#39;ﾞ&#39;
penguin[15] = U+FF9D &#39;ﾝ&#39;
penguin2[0] = U+FF8D &#39;ﾍ&#39;
penguin2[3] = U+FF9F &#39;ﾟ&#39;
penguin2[6] = U+FF9D &#39;ﾝ&#39;
penguin2[9] = U+FF77 &#39;ｷ&#39;
penguin2[12] = U+FF9E &#39;ﾞ&#39;
penguin2[15] = U+FF9D &#39;ﾝ&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何も変わらないことが分かるだろう。
そもそも半角カナは「互換用文字（Compatibility Character）」として異なるコードポイントが割り当てられているため，このままでは3羽目の「ﾍﾟﾝｷﾞﾝ」が等価であることを示せない。&lt;/p&gt;

&lt;p&gt;このような場合は「ﾍﾟﾝｷﾞﾝ」と互換性のある別の文字列に正規化できるとよい。
これを「互換等価（compatibility equivalance）」と呼ぶ。
具体的には，事前合成形に正規化する NFKC（Normalization Form Compatibility Composition）と合成列に正規化する NFKD（Normalization Form Compatibility Decomposition）の2つがある。&lt;/p&gt;

&lt;p&gt;早速 &lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34; title=&#34;norm - GoDoc&#34;&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/a&gt; パッケージを使ってコードを書いてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;golang.org/x/text/unicode/norm&amp;quot;
)

func main() {
	penguin := &amp;quot;ﾍﾟﾝｷﾞﾝ&amp;quot;
	for pos, runeValue := range penguin {
		fmt.Printf(&amp;quot;penguin[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	penguin2 := string(norm.NFKC.Bytes([]byte(penguin)))
	for pos, runeValue := range penguin2 {
		fmt.Printf(&amp;quot;penguin2[%d] = %#U\n&amp;quot;, pos, runeValue)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;penguin[0] = U+FF8D &#39;ﾍ&#39;
penguin[3] = U+FF9F &#39;ﾟ&#39;
penguin[6] = U+FF9D &#39;ﾝ&#39;
penguin[9] = U+FF77 &#39;ｷ&#39;
penguin[12] = U+FF9E &#39;ﾞ&#39;
penguin[15] = U+FF9D &#39;ﾝ&#39;
penguin2[0] = U+30DA &#39;ペ&#39;
penguin2[3] = U+30F3 &#39;ン&#39;
penguin2[6] = U+30AE &#39;ギ&#39;
penguin2[9] = U+30F3 &#39;ン&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり， NFC で正規化した「ペンギン」と等価であることがわかる。&lt;/p&gt;

&lt;p&gt;互換等価による正規化は応用範囲が広い。
たとえば「㈱」（U+3231）は「(株)」（U+0028 + U+682A + U+0029）に変換される。
文字列検索の前に互換等価による正規化を行っておくことで処理がやりやすくなるというのはあるかもしれない。
ただし， NFC と NFD は交換可能だが（ただしオリジナル文字列が事前合成形と合成列とで混在している場合は元に戻せないが）， NFKC や NFKD で正規化した文字列を元に戻す方法はないので注意が必要である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:hw&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:hw&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;恐怖の-cjk-互換文字:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;恐怖の CJK 互換文字&lt;/h2&gt;

&lt;p&gt;正規等価については注意すべき点がある。
有名な「神」を例に挙げよう。
これを NFC / NFD で正規化する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;golang.org/x/text/unicode/norm&amp;quot;
)

func main() {
	god := &amp;quot;神&amp;quot;
	for pos, runeValue := range god {
		fmt.Printf(&amp;quot;god[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	god2 := string(norm.NFC.Bytes([]byte(god)))
	for pos, runeValue := range god2 {
		fmt.Printf(&amp;quot;god2[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	god3 := string(norm.NFD.Bytes([]byte(god)))
	for pos, runeValue := range god3 {
		fmt.Printf(&amp;quot;god3[%d] = %#U\n&amp;quot;, pos, runeValue)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;god[0] = U+FA19 &#39;神&#39;
god2[0] = U+795E &#39;神&#39;
god3[0] = U+795E &#39;神&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり，NFC でも NFD でも違う文字になってしまった。
ちなみに「神」から「神」へ正規化する方法はない。
困ったね。&lt;/p&gt;

&lt;p&gt;実は「神」は「CJK 互換文字」と呼ばれるグループに属し，「神」とは異体字の関係にある。
故に「神」を「神」に正規化してしまったのである。&lt;/p&gt;

&lt;p&gt;これは明らかに仕様ミスである。
「神」と「神」のような異体字の関係は本来なら正規等価ではなく互換等価であるべきだからだ。&lt;/p&gt;

&lt;p&gt;&amp;hellip;やっぱり Unicode はクソ仕様だ。&lt;/p&gt;

&lt;p&gt;ただ，これが実際の場面で問題になることは少ないと思われる。
なぜなら，正規化を行うのは「2つの文字列が等価であるか？」を調べるための手段にすぎないからだ。
普通はね。&lt;/p&gt;

&lt;p&gt;ところが，普通でないことをする馬鹿がいるのである。&lt;/p&gt;

&lt;h3 id=&#34;独自路線に走る-apple:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;独自路線に走る Apple&lt;/h3&gt;

&lt;p&gt;Apple の OS X （iOS も？）のファイルシステムである HFS+ はファイル名を NFD 相当に正規化するという恐ろしい仕様になっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:fs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:fs&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
しかしそれでは先ほどの例のように異体字を別の文字に変えられてしまうため困ったことになってしまう。&lt;/p&gt;

&lt;p&gt;そこで Apple は CJK 互換文字を含むいくつかの文字を正規化の対象から外すという蛮行に出た。
俗に “NFD-mac” などと呼ばれる独自路線に走ってしまったわけだ。
クソの上塗りである。&lt;/p&gt;

&lt;p&gt;これにより様々な（特にマルチプラットフォームな）アプリケーションが多大なる迷惑を被ることになるが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:mac&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:mac&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;，深くはツッコむまい。&lt;/p&gt;

&lt;h2 id=&#34;unicode-正規化に関するまとめ:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;Unicode 正規化に関するまとめ&lt;/h2&gt;

&lt;p&gt;以上， Unicode 正規化の4つの方式をまとめると以下のようになる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Composing&lt;/th&gt;
    &lt;th&gt;Decomposing&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th style=&#34;text-align:right;&#34;&gt;Canonical equivalence&lt;/th&gt;
    &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34;&gt;norm&lt;/a&gt;.NFC&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34;&gt;norm&lt;/a&gt;.NFD&lt;/code&gt;&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th style=&#34;text-align:right;&#34;&gt;Compatibility equivalence&lt;/th&gt;
    &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34;&gt;norm&lt;/a&gt;.NFKC&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34;&gt;norm&lt;/a&gt;.NFKD&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://blog.golang.org/normalization&#34;&gt;via “Text normalization in Go”&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34; title=&#34;norm - GoDoc&#34;&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/a&gt; パッケージでは “NFD-mac” なるローカル仕様には対応していないので，必要なら自作する必要がある。&lt;/p&gt;

&lt;p&gt;Unicode 文字列の等価属性を調べる際には是非参考にどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/www/column/ogata/sp24.htm&#34;&gt;特別編24 JIS X 0213の改正は、文字コードにどんな未来をもたらすか（7）　番外編：改正JIS X 0213とUnicodeの等価属性／正規化について（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/www/column/ogata/sp25.htm&#34;&gt;特別編24 JIS X 0213の改正は、文字コードにどんな未来をもたらすか（7）　番外編：改正JIS X 0213とUnicodeの等価属性／正規化について（下）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nomenclator.la.coocan.jp/unicode/normalization.htm&#34;&gt;Unicode正規化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/normalization&#34;&gt;Text normalization in Go - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masakielastic/items/01a4fb691c572dd71a19&#34;&gt;Go で UTF-8 の文字列を扱う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.albert2005.co.jp/blog/2014/11/21/mco-normalize/&#34;&gt;文字コード地獄秘話 第3話：後戻りの効かないUnicode正規化 - ALBERT Engineer Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpplover.blogspot.jp/2015/01/blog-post_14.html&#34;&gt;本の虫: Linus Torvalds、HFS+に激怒&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:cs&#34;&gt;結合文字はひとつの基底文字に対して複数付加される場合もある。しかもこの場合に結合文字同士の順序は不定である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:cs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:ccs&#34;&gt;正しくは「符号化文字集合（coded character set）」である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:ccs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:ecd&#34;&gt;これは UTF-8 などの「文字エンコーディング」とは異なるものだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:ecd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:jis&#34;&gt;日本の JIS 規格にも「歴史的経緯」による重複符号化がある。言わずと知れた「半角」「全角」文字である。異体字も一種の重複符号化と言える。もちろんこれは日本語圏だけの問題ではなく，大抵の言語圏は似たような重複符号化の問題を抱えている。そして Unicode はそうした仕様上の欠陥も含めて併呑してしてしまっているため，このような有様になっているわけだ。問題を先送りして更に酷いことになるという失敗例の典型ですな。この辺の「歴史的経緯」の一部については大昔に拙文「&lt;span&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/charset-pdfa.pdf&#34;&gt;文字コードとその実装&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;」で言及しているので参考にどうぞ。古すぎて一部使えない記述もあるけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:jis&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:hw&#34;&gt;単に全角・半角変換ができればいいのなら &lt;code&gt;golang.org/x/text/&lt;/code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/width&#34; title=&#34;width - GoDoc&#34;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; パッケージをお勧めする。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:hw&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:fs&#34;&gt;ちなみに Windows のファイルシステムはフォルダ・ファイルの名前を正規化するとかいうアホなことはしない。事前合成形も合成列も受け入れる。見かけ同じ名前のフォルダ・ファイルが複数できる可能性はあるが，それはそれ。多分，ほとんどの OS のファイルシステムは名前の正規化なんてしてないはず。この HFS+ による Unicode 正規化のおかげで他プラットフォームはかなりの迷惑を被ることになる。たとえば複数のプラットフォームをまたぐファイル交換（例えば Linux → OS X → Windows みたいな経路）を行った場合に OS X を経由した途端にフォルダ・ファイル名を書き換えられてしまうのだ。しかもユーザやアプリケーションは基本的に干渉できない。迷惑千万な話である。もっとも Windows ユーザは Windows ファイルシステムのダメさ加減が身に沁みてるので他所を嗤えないけど（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:fs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:mac&#34;&gt;たとえば Linus Torvalds は HFS+ に起因する git の脆弱性問題で&lt;a href=&#34;http://cpplover.blogspot.jp/2015/01/blog-post_14.html&#34;&gt;激怒&lt;/a&gt;している。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:mac&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
