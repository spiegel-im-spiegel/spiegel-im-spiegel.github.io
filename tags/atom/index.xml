<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Atom - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/atom/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/atom/index.xml" />
	<id>tag:text.Baldanders.info,2016-01-23:/</id>
	<updated>2016-01-23T13:54:34+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>週末スペシャル： Planet Nine - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/23-stories/" />
		<id>tag:text.Baldanders.info,2016-01-23:/remark/2016/01/23-stories/</id>
		<published>2016-01-23T13:54:34+09:00</published>
		<updated>2016-03-03T01:20:06+09:00</updated>
		<summary>Planet Nine / 次期X線国際天文衛星 ASTRO-H は 2月12日に打ち上げ予定 / 2^74207281-1 is Prime! / いまのところ「秀丸」への依存度は1割程度 / Bitcoin は失敗したか / TeX Wiki が移転しとるがな / 「『いま読むべき本』３冊」</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#planet9:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Planet Nine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#astro-h:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;次期X線国際天文衛星 ASTRO-H は 2月12日に打ち上げ予定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prime:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;2^74207281-1 is Prime!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hidemaru:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;いまのところ「秀丸」への依存度は1割程度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bitcoin:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Bitcoin は失敗したか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tex:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;TeX Wiki が移転しとるがな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#books:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;「『いま読むべき本』３冊」&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;planet9:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Planet Nine&lt;/h2&gt;

&lt;p&gt;冥王星が9番目の惑星だった頃からこの手の話は尽きないが，どうも今回はマジらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.caltech.edu/news/caltech-researchers-find-evidence-real-ninth-planet-49523&#34;&gt;Caltech Researchers Find Evidence of a Real Ninth Planet | Caltech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iopscience.iop.org/article/10.3847/0004-6256/151/2/22/pdf&#34;&gt;EVIDENCE FOR A DISTANT GIANT PLANET IN THE SOLAR SYSTEM - pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nature.com/news/evidence-grows-for-giant-planet-on-fringes-of-solar-system-1.19182&#34;&gt;Evidence grows for giant planet on fringes of Solar System : Nature News &amp;amp; Comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seti.org/seti-institute/planet-nine-are-we-not-that-special&#34;&gt;Planet Nine: Are We Not That Special? | SETI Institute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/01/20160121_02.html&#34;&gt;2016年1月21日ニュース「太陽系に9番目の惑星か 米チームが予測」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/01/21planet9/index-j.shtml&#34;&gt;シミュレーションで推測、太陽系第9惑星存在の可能性 - アストロアーツ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/030201/2016_01_21_planet-nine.html&#34;&gt;太陽系に「第9惑星」存在か　米天文学者らが論文発表 | sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/01/21/20160120astronomers-find-evidence-of-a-ninth-planet/&#34;&gt;9番目の惑星の存在を示す証拠が発見された | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japanese.engadget.com/2016/01/25/9/&#34;&gt;「見えない太陽系第9惑星」は本当に発見できる？何を使って、どう見つける？ - Engadget Japanese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://universesandbox.com/blog/2016/01/alpha-18-2-planet-9/&#34;&gt;Alpha 18.2 | Planet Nine | Now Available « Universe Sandbox | blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://arxiv.org/pdf/1602.06116.pdf&#34;&gt;Constraints on the location of a possible 9th planet derived from the Cassini data&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; : 土星探査機 Cassini のデータから9番目の惑星を探そうという論文らしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gizmodo.jp/2016/03/planet_nine.html&#34;&gt;第9惑星発見へ「あと2、3年」？ 天文学者からアイデア集結中 : ギズモード・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実際に発見されたわけではなく，いわゆる「海王星以遠天体（Trans-Neptunian Object; TNO または Edgeworth-Kuiper Belt Object; EKBO）」の軌道の偏りからの推測らしい。
よくある与太話ではなく，割と確からしい話のようだ。&lt;/p&gt;

&lt;p&gt;こういう話を聞くといつも思うが，子供のころ聞かされていた「太陽系」のイメージが実は太陽のほんの近傍のものに過ぎないことに気付かされる。
「水金地火木&amp;hellip;」などと受験用の念仏を唱えている場合ではないのですよ。&lt;/p&gt;

&lt;h2 id=&#34;astro-h:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;次期X線国際天文衛星 ASTRO-H は 2月12日に打ち上げ予定&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://astro-h.isas.jaxa.jp/&#34;&gt;ASTRO-H&lt;/a&gt; て広島大学の CORE-U（極限宇宙研究拠点）も参画してるのか。
母校のことなのに全然知らなかったよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://core-u.hiroshima-u.ac.jp/blog/2016/01/22/x%E7%B7%9A%E5%A4%A9%E6%96%87%E8%A1%9B%E6%98%9F%E3%80%8Castro-h%E3%80%8D2%E6%9C%8812%E6%97%A5%E6%89%93%E3%81%A1%E4%B8%8A%E3%81%92%E3%81%B8/&#34;&gt;X線天文衛星「ASTRO-H」2月12日打ち上げへ広島大学極限宇宙研究拠点 CORE-U&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;prime:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;2^74207281-1 is Prime!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mersenne.org/primes/?press=M74207281&#34;&gt;Mersenne Prime Discovery - 2^74207281-1 is Prime!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/107/1107594/&#34;&gt;ASCII.jp：「新たな世界最大の素数」昨年9月に発見&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/01/22/discover-your-own-prime-number/&#34;&gt;「史上最大の素数」、更新される « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mersenne.org/primes/&#34;&gt;GIMPS (Great Internet Mersenne Prime Search)&lt;/a&gt; プロジェクトによる分散コンピューティングを使った素数探索で新たなメルセンヌ素数 $2^{74,207,281}-1$ が見つかったようだ。&lt;/p&gt;

&lt;p&gt;「メルセンヌ素数」というのは $M_p = 2^p-1$ で表されるメルセンヌ数 $M_p$ のうち素数であるものを指す。
$M_p$ が素数なら $p$ も素数であるという面白い性質がある（逆は成り立たない）。
また $M_p = 2^p-1$ が素数なら $2^{p-1}(2^p-1)$ は完全数&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; になる。&lt;/p&gt;

&lt;p&gt;メルセンヌ数に対しては効率的な素数判定法が知られており分散コンピューティング向きの題材である。&lt;/p&gt;

&lt;h3 id=&#34;参考:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mailsrv.nara-edu.ac.jp/~asait/prime.htm&#34;&gt;巨大素数と計算機&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hidemaru:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;いまのところ「秀丸」への依存度は1割程度&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20160119/hidemaru&#34;&gt;WindowsがMacより優れているのは秀丸エディタが動くことだけ（暴論） - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あー，わかるわかる。
私もかなりの「&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;依存症」なので（笑）&lt;/p&gt;

&lt;p&gt;その「&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;依存症」から脱却すべく &lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM に乗り換え中&lt;/a&gt;だが，今のところ9割くらいは &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で賄えている。
とはいえ，私はコード書きで文章書きではない。
文章を大量に書く人に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; がいいかどうかはなんとも言えない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の欠点は大きく2つ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;起動が遅く，全体的にもっさりしている&lt;/li&gt;
&lt;li&gt;大きなテキストを読み込めない（または読み込みに非常に時間がかかる）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;たかだか20万行程度のテキスト（ぶっちゃけ CSV なんだけど）を読み込むのにフリーズしないで欲しい。
起動が遅いのは仕方がないと諦めた。
秀丸みたいに常駐モードがあればいいんだけどねぇ。
まぁ &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を立ち上げっぱなしにしておけばいいか。&lt;/p&gt;

&lt;p&gt;この辺は多分 &lt;a href=&#34;http://electron.atom.io/&#34;&gt;Electron&lt;/a&gt; の限界なんだろう。
そういや&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;も登場したての頃は動作がもっさりしていて Vz と併用してたっけ（Vz は DOS 窓から使ってた）。
気長に性能向上を待つとしよう。&lt;/p&gt;

&lt;p&gt;テキストエディタは製品云々より手に馴染むかどうかが絶対的に重要で，そのため必然的に hackable にならざるを得ない。
故に宗教論争も起こりやすい。
それに人は慣れ親しんだ手順や workflow からは簡単に抜け出せないものである。
私は emacs なんか触りたくもないし， vi/vim は若い頃のトラウマがフラッシュバックするので可能なかぎり使いたくない。&lt;/p&gt;

&lt;p&gt;そういえば，結城浩さんは Vim を使われているような&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;bitcoin:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Bitcoin は失敗したか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1601/20/news120.html&#34;&gt;ビットコインは「失敗した」　離脱を表明した主要開発者が語る、その問題点 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bitcoin ってどうしてもかつての「地域通貨」を連想しちゃうんだよなぁ。
かつての「地域通貨」で上手くいったところはないはず。&lt;/p&gt;

&lt;p&gt;通貨は血液のように国や企業や人々の間で循環していくことが重要。
特に総量が決まっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 補完通貨は誰かがガメて抱え込んでしまえばそこでお終いなのだ。&lt;/p&gt;

&lt;p&gt;そういえば「世界の富豪62人が保有する資産は、「36億人分の富」に相当する」のだそうだ。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;オックスファムによれば、世界の人口のうち「最も豊かな1パーセント」がもつ富と、「最も貧しい50パーセント」がもつ富が同じになるという見通しは、予想より1年早く、現実になったという&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2016/01/21/global-poverty-oxfam/&#34;&gt;世界人口の約半数は「より貧しく」なっていく « WIRED.jp&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;まぁ今の世界のシステムがそうなるよう構築されているのだから，ある意味当然の帰結と言えるけど。
「アベノミクス」だって結局はそのシステムに乗っかったものなんだから地方在住の貧乏人にカネが回ってくる道理がないのだ。&lt;/p&gt;

&lt;p&gt;でも Bitcoin のような通貨システムはこの動きを加速させてしまうんじゃないだろうか。
どうなんだろう。
そろそろ本当に総括が必要なのだろうか。&lt;/p&gt;

&lt;h3 id=&#34;参考-1:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cruel.org/hotwired/hotwired23_01.html&#34;&gt;HotWired Japan_Altbiz  山形浩生の『ケイザイ2.0』 第23回 地域通貨って、そんなにいいの？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1601/21/news024.html&#34;&gt;特集：FinTech入門（3）：ブロックチェーンは「取引コストゼロ」の世界を実現しようとしている (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/02/08/201602063-ways-that-blockchain-will-change-the-real-estate-market/&#34;&gt;ブロックチェーンで不動産売買が変わる | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tex:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;TeX Wiki が移転しとるがな&lt;/h2&gt;

&lt;p&gt;1月20日から &lt;a href=&#34;https://texwiki.texjp.org/&#34; title=&#34;TeX Wiki&#34;&gt;https://texwiki.texjp.org/&lt;/a&gt; に移転したらしい。&lt;/p&gt;

&lt;p&gt;つらつら眺めてたら&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://texwiki.texjp.org/?Atom&#34;&gt;Atom - TeX Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というページがあった。&lt;/p&gt;

&lt;p&gt;そういや &lt;a href=&#34;http://pandoc.org/&#34; title=&#34;Pandoc - About pandoc&#34;&gt;Pandoc&lt;/a&gt; も気になってるんだよな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pandoc.org/&#34;&gt;Pandoc - About pandoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jgm/pandoc&#34;&gt;jgm/pandoc: Universal markup converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tags/Pandoc&#34;&gt;Pandocに関する投稿 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://betrue12.hateblo.jp/entry/2015/04/10/003830&#34;&gt;PandocでMarkdownからPDF化を試してみた - ARMERIA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://pandoc.org/&#34; title=&#34;Pandoc - About pandoc&#34;&gt;Pandoc&lt;/a&gt; は一度導入しかけて挫折したんだけど，最近のバージョンはとっつきやすくなってるみたい。
けど試す隙がない。&lt;/p&gt;

&lt;h2 id=&#34;books:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;「『いま読むべき本』３冊」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/01/22/3-books-for-new-editors/&#34;&gt;出版の「初心」を思い出すための３冊 « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うーむ，「『いま読むべき本』３冊」かぁ。
私が人様に本を勧めるなどおこがましい話ではあるが，敢えて3冊選べというなら，今のところこれかな。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798115002/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41bC8pdM2iL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798115002/baldandersinf-22/&#34;&gt;CODE VERSION 2.0&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ローレンス・レッシグ Lawrence Lessig &lt;/dd&gt;&lt;dd&gt;翔泳社 2007-12-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798102040/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798102040.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;コモンズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798119806/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798119806.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;REMIX ハイブリッド経済で栄える文化と商業のあり方&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798106801/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798106801.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Free Culture&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480431837/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480431837.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アーキテクチャの生態系: 情報環境はいかに設計されてきたか (ちくま文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757102453/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4757102453.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アーキテクチャの生態系――情報環境はいかに設計されてきたか&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;前著『CODE』改訂版。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ブルース・シュナイアー 山形 浩生 &lt;/dd&gt;&lt;dd&gt;エヌティティ出版 2013-12-24&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4622078007/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4622078007.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;殺人ザルはいかにして経済に目覚めたか?―― ヒトの進化からみた経済学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4140816872/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4140816872.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;限界費用ゼロ社会―&lt;モノのインターネット&gt;と共有型経済の台頭&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4478017883/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4478017883.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;第五の権力---Googleには見えている未来&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621089188/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621089188.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;リスク 不確実性の中での意思決定 (サイエンス・パレット)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/412102138X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/412102138X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ソーシャル・キャピタル入門　- 孤立から絆へ (中公新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-23&#34;&gt;2016-01-23&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/417iD4x5N%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジョック ヤング Jock Young &lt;/dd&gt;&lt;dd&gt;洛北出版 2007-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764331/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764331.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;後期近代の眩暈―排除から過剰包摂へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4255008515/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4255008515.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;断片的なものの社会学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796700439/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4796700439.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スティグマの社会学―烙印を押されたアイデンティティ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764242/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764242.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新しい貧困 労働消費主義ニュープア&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062881357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062881357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;弱者の居場所がない社会――貧困・格差と社会的包摂 (講談社現代新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000410.shtml&#34;&gt;感想はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;もっとも，ちゃんと最後まで読んだのは『排除型社会』だけであとは途中まで読んで積ん読状態。
まぁ『CODE』は Version 1 は既読なのでそのうちゆっくり。
面白い本ほど読むのに時間が掛かるし考える時間も増える。&lt;/p&gt;

&lt;p&gt;というわけで，今年は「本を買わない」ことにした&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
厳密には「2016年に新規に買うのは5冊まで」。
その代わり積ん読状態になってる本を消化することに注力する。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;「完全数（perfect number）」とは「その数自身を除く約数の和がその数自身と等しい自然数」を指す。たとえば $6$ の素因数は $2\times3$ なので $6$ 自身を除く約数の和は $1+2+3=6$ となり完全数と言える。ちなみに $3$ は $2^2-1$ でメルセンヌ素数で $2^1(2^2-1)=6$ である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;たとえば Bitcoin の総量は約2,100万BTCで，どのように振り出されるかは数学的に決まっており恣意的な制御はできないようになっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;マンガやラノベは別ね。あれは娯楽だから。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM Editor で Amazon Associate ID を含んだ商品 URL を生成する - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/insert-amazon-url-with-associate-id-in-atom-editor/" />
		<id>tag:text.Baldanders.info,2015-11-27:/remark/2015/insert-amazon-url-with-associate-id-in-atom-editor/</id>
		<published>2015-11-27T22:20:50+09:00</published>
		<updated>2015-11-27T22:20:50+09:00</updated>
		<summary>昔，結城浩さんが Amazon の商品 URL を変換する秀丸マクロを公開されていて， ATOM Editor では使えないためどうしたものかと思っていたのだが，先日 init.coffee に簡単なコマンドを書く方法を習ったので移植してみた。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;昔，結城浩さんが Amazon の商品 URL を変換する秀丸マクロを公開されていて&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/hyuki/20120413/amazon&#34;&gt;アマゾン・アソシエイトID（アフィリエイト用のID）を含んだ商品URLを生成する秀丸マクロ - 結城浩のはてな日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これがとても便利で重宝していたのだが， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor では使えないためどうしたものかと思っていた。
で，先日 &lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/&#34;&gt;&lt;code&gt;init.coffee&lt;/code&gt; に簡単なコマンドを書く方法を習った&lt;/a&gt;ので，上の秀丸マクロを &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor に移植してみた。&lt;/p&gt;

&lt;p&gt;以下が &lt;code&gt;init.coffee&lt;/code&gt; に追記する内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;# Amazon Associate ID を含んだ商品 URL を生成する
#  クリップボードの内容を読み込み，変換してセットする
#  http(s)://www.amazon.co.jp/... から始まる文字列を想定
#  /dp/XXXXXXXXXX または /ASIN/XXXXXXXXXX のパタンを探す
#  変換できない場合はクリップボードの内容をそのままセットする
# refs http://d.hatena.ne.jp/hyuki/20120413/amazon
amazonUrl = (id) -&amp;gt;
  url = atom.clipboard.read()
  re = /^htt(?:p|ps):\/\/www.amazon.co.jp\//
  if !re.test(url)
    return url
  result = url.match(/\/(?:dp|ASIN)\/(.{10})/)
  if result == null
    return url
  else if result.length &amp;lt; 2
    return url
  asin = result[1]
  if id == &amp;quot;&amp;quot;
    &amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/#{asin}/&amp;quot;
  else
    &amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/#{asin}/#{id}/&amp;quot;

insertText = (str) -&amp;gt;
  return unless editor = atom.workspace.getActiveTextEditor()
  selection = editor.getLastSelection()
  selection.insertText(str)

atom.commands.add &#39;atom-text-editor&#39;, &#39;my-tools:amazon&#39;, -&amp;gt;
  id = &#39;&#39; # Amazon Associate ID
  insertText(amazonUrl(id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コードがやっつけでダサいのはご勘弁ということで&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:028833c50231051bae73e587c9bed4d5:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
&lt;code&gt;insertText&lt;/code&gt; 関数は&lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/&#34;&gt;前のとき&lt;/a&gt;の使い回し。&lt;/p&gt;

&lt;p&gt;これで &lt;code&gt;id&lt;/code&gt; に Associate ID （たとえば私の &lt;code&gt;baldandersinf-22&lt;/code&gt;）をセットして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.amazon.co.jp/%E6%95%B0%E5%AD%A6%E3%82%AC%E3%83%BC%E3%83%AB-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797341378
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をクリップボードにコピーした状態でコマンドパレットから「My Tools: Amazon」を起動すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.amazon.co.jp/exec/obidos/ASIN/4797341378/baldandersinf-22/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出力される。
変換できない場合はクリップボードの内容をそのまま出力する。&lt;/p&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;h2 id=&#34;参考:028833c50231051bae73e587c9bed4d5&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/docs/api/&#34;&gt;Atom API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_Expressions&#34;&gt;正規表現 - JavaScript | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.softel.co.jp/labs/tools/regex/&#34;&gt;正規表現チェッカー（JavaScript版） | Softel labs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt; は慣れん。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>行末の空白文字を削除する - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/trim-trailing-whitespace/" />
		<id>tag:text.Baldanders.info,2015-11-23:/remark/2015/trim-trailing-whitespace/</id>
		<published>2015-11-23T20:42:06+09:00</published>
		<updated>2015-11-23T20:42:06+09:00</updated>
		<summary>行末の空白文字を削除する小ネタ。いや，たまに使おうとすると忘れてるんだよね。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;テキストエディタで行末の空白文字を削除する小ネタ。
いや，たまに使おうとすると忘れてるんだよね。&lt;/p&gt;

&lt;h2 id=&#34;atom-editor-の場合:b7eb25d7668de56fd3123c625cd97081&#34;&gt;ATOM Editor の場合&lt;/h2&gt;

&lt;p&gt;以前は行末の処理は &lt;a href=&#34;https://atom.io/packages/editorconfig&#34; title=&#34;editorconfig&#34;&gt;editorconfig&lt;/a&gt; でできてたはずなんだけど，いつの間にか &lt;code&gt;trim_trailing_whitespace&lt;/code&gt; と &lt;code&gt;insert_final_newline&lt;/code&gt; は “doesn&amp;rsquo;t work yet” になってる。
それとも私の勘違いだったのか。&lt;/p&gt;

&lt;p&gt;気を取り直して。&lt;/p&gt;

&lt;p&gt;行末の空白を一気に削除したいならコマンドパレットで &lt;code&gt;whitespace&lt;/code&gt; を検索すると “Remove Trailing Whitespace” があるので，これを実行する。
保存するたびに自動的に行末の空白文字を削除したいのであれば &lt;a href=&#34;https://atom.io/packages/whitespace&#34; title=&#34;whitespace&#34;&gt;whitespace&lt;/a&gt; の Settings にある “Remove Trailing Whitespace” を有効にする。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/23214924646/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/778/23214924646_fb830df03b.jpg&#34; alt=&#34;settings for whitespace (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23214924646/&#34;&gt;settings for whitespace (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おまけだが，同じ Settings 画面で “Ensure Single Trailing Newline” を有効にすると，テキストファイル末尾が改行になっていない場合は改行を補ってくれる。
他にもこまごまとした設定があり，しかもファイルタイプごとに設定できるようだ。
でもファイルタイプではなく &lt;a href=&#34;https://atom.io/packages/editorconfig&#34; title=&#34;editorconfig&#34;&gt;editorconfig&lt;/a&gt; でコントロールできるようになってほしい。&lt;/p&gt;

&lt;p&gt;もうひとつ余談だが， &lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;Go 言語環境&lt;/a&gt;ではコードの整形を行う際に &lt;a href=&#34;https://atom.io/packages/whitespace&#34; title=&#34;whitespace&#34;&gt;whitespace&lt;/a&gt; の設定に関係なく行末の空白を削除してくれる。
他の言語でも整形ツールがあれば同様にできるかも。&lt;/p&gt;

&lt;h2 id=&#34;秀丸またはサクラエディタの場合:b7eb25d7668de56fd3123c625cd97081&#34;&gt;秀丸またはサクラエディタの場合&lt;/h2&gt;

&lt;p&gt;現在，ほとんどの作業は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に移行できているのだが，巨大ファイルを扱う場合などはまだ&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;等&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; のお世話になっている。
&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;ではファイルタイプごとに保存時に行末の空白を削除するかどうか設定できる。
あるいは置換機能を使う方法もある。
手順は以下の通り。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;「検索文字列」に &lt;strong&gt;&lt;code&gt;[ 　\t]+$&lt;/code&gt;&lt;/strong&gt; を指定する（行末の半角空白，全角空白，タブ文字を正規表現で指定する）&lt;/li&gt;
&lt;li&gt;「置換文字列」はブランクにする（何もセットしない）&lt;/li&gt;
&lt;li&gt;「正規表現」の項目にチェックを入れて置換を開始する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ちなみに同様の手順は&lt;a href=&#34;http://sakura-editor.sourceforge.net/&#34; title=&#34;サクラエディタ&#34;&gt;サクラエディタ&lt;/a&gt;でも使える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
てか， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; も含め置換処理に正規表現が使えるエディタならたいてい使える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;職場では&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;が NG の場合もあるので，その場合は&lt;a href=&#34;http://sakura-editor.sourceforge.net/&#34; title=&#34;サクラエディタ&#34;&gt;サクラエディタ&lt;/a&gt;で代替えしている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;&lt;a href=&#34;http://sakura-editor.sourceforge.net/&#34; title=&#34;サクラエディタ&#34;&gt;サクラエディタ&lt;/a&gt;では「タイプ別設定」の「スクリーン → インデント」の項目で「改行時に末尾の空白を削除」にチェックを入れることで行末の空白を自動的に削除できる。なんでこんな変なところに設定項目があるんだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;でも正規表現ってあまり得意じゃないので，普段は忘れてるんだよなぁ。昔，正規表現を簡単に組み立てることのできるツールがあって重宝していたが，マシンを replace していくうちに行方不明になっちゃった。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM で Go - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/golang-with-atom/" />
		<id>tag:text.Baldanders.info,2015-11-21:/golang/golang-with-atom/</id>
		<published>2015-11-21T14:19:02+09:00</published>
		<updated>2015-11-27T14:31:41+09:00</updated>
		<summary>ATOM Editor で Go 言語のコーディング環境を整える。 go-plus パッケージの導入について。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回もまた横道に逸れてツールの話。
&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のコーディング環境を整える。
環境を作る度に「どうだったっけ」とあちこちサイトを巡るので，覚え書きとしてまとめておく。&lt;/p&gt;

&lt;p&gt;例によって Windows 環境を前提にしているので，他の環境の方は適当に脳内補完してください。&lt;/p&gt;

&lt;h2 id=&#34;開発支援ツールの導入:19f55614c00d490a9959ede6566335af&#34;&gt;開発支援ツールの導入&lt;/h2&gt;

&lt;p&gt;まずは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援ツールを導入する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt; go get -v golang.org/x/tools/cmd/vet
C:&amp;gt; go get -v golang.org/x/tools/cmd/goimports
C:&amp;gt; go get -v golang.org/x/tools/cmd/oracle
C:&amp;gt; go get -v github.com/golang/lint/golint
C:&amp;gt; go get -v github.com/nsf/gocode
C:&amp;gt; go get -v github.com/rogpeppe/godef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/lint&#34; title=&#34;golang/lint&#34;&gt;golint&lt;/a&gt; は，いわゆる lint ツール。
&lt;a href=&#34;https://golang.org/cmd/vet/&#34; title=&#34;vet - The Go Programming Language&#34;&gt;vet&lt;/a&gt; もコードの静的検査ツール。
両方あると幸せになれる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/goimports&#34; title=&#34;goimports - GoDoc&#34;&gt;goimport&lt;/a&gt; はコード整形ツールで，標準の &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; を置き換えることができ，かつ &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; よりも若干かしこい。
&lt;a href=&#34;https://github.com/nsf/gocode&#34; title=&#34;nsf/gocode&#34;&gt;gocode&lt;/a&gt; は入力補完ツール。
&lt;a href=&#34;https://github.com/rogpeppe/godef&#34; title=&#34;rogpeppe/godef&#34;&gt;godef&lt;/a&gt; は指定したシンボルの定義定義元情報を出力するツール（出力を使って定義元へジャンプできる。実際には &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/oracle&#34; title=&#34;oracle - GoDoc&#34;&gt;oracle&lt;/a&gt; と併用するらしい）。
いずれも vim や emacs などでは有名だが &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; でも使える。&lt;/p&gt;

&lt;p&gt;言わずもがなだが，これらのツールには PATH を通しておくこと。
&lt;code&gt;%GOPATH%\bin&lt;/code&gt; フォルダにパスを通しておけばいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;go-plus-パッケージの導入:19f55614c00d490a9959ede6566335af&#34;&gt;go-plus パッケージの導入&lt;/h2&gt;

&lt;p&gt;では，上述のツールを操作できる &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージを導入する。
やり方は Settings 画面（&lt;code&gt;ctrl+,&lt;/code&gt; で起動）で Install してもいいし &lt;code&gt;apm&lt;/code&gt; コマンドを使ってもよい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; には設定項目がいくつかあるが，ほとんど既定値のままで使える。
コマンドパレットから &lt;code&gt;golang&lt;/code&gt; をキーワードに検索すると山程機能があるのが分かるだろう。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22710708563/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5794/22710708563_3d4aca2709.jpg&#34; alt=&#34;menu of go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22710708563/&#34;&gt;menu of go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;既定ではソースファイルを保存する度にコード整形や lint 等が走る。
これを制御したい場合はパッケージの Setting で以下の項目を調整すればよい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/735/22767398347_ed9329653a.jpg&#34; alt=&#34;settings for go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;settings for go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;定義ファイルへのジャンプと復帰は &lt;code&gt;alt-cmd-g&lt;/code&gt; および &lt;code&gt;alt-shift-cmd-G&lt;/code&gt; にバインドされているが Windows 環境では動かないので（コマンドパレットから起動してもいいのだが）適当なキーに再割当てするといいだろう。
ファンクションキーは結構空いてるので，たとえば&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Keystroke&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Selector&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef-return&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;とアサインするなら &lt;code&gt;%USERPROFILE%\.atom\keymap.cson&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&#39;:
  &#39;f12&#39;: &#39;golang:godef&#39;
  &#39;shift-f12&#39;: &#39;golang:godef-return&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と設定すればいい。&lt;/p&gt;

&lt;p&gt;lint や定義ファイルのジャンプは &lt;code&gt;GOPATH&lt;/code&gt; や &lt;code&gt;GOROOT&lt;/code&gt; を見て外部パッケージを判断しているのだが， &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; のようなツールでは &lt;code&gt;GOPATH&lt;/code&gt; をコマンド内部で書き換えて実行するので lint ツールとは整合性が取れなくなる。
&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; の設定では &lt;code&gt;GOPATH&lt;/code&gt; を上書きすることも可能なので，とりあえずこれで回避する方法もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:19f55614c00d490a9959ede6566335af:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/23233956325/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5821/23233956325_0ddf55e61a.jpg&#34; alt=&#34;settings for go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23233956325/&#34;&gt;settings for go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; への対応は “Planned Features” に挙がってるので，将来的には小細工しなくても &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; ベースの開発ができるようになるかもしれない。
てか，なってほしい。&lt;/p&gt;

&lt;h2 id=&#34;language-go-パッケージは同梱済み:19f55614c00d490a9959ede6566335af&#34;&gt;language-go パッケージは同梱済み&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-go&#34; title=&#34;language-go&#34;&gt;language-go&lt;/a&gt; は Core パッケージに入っているためインストール時点で既に入っている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:19f55614c00d490a9959ede6566335af:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://atom.io/packages/language-go&#34; title=&#34;language-go&#34;&gt;language-go&lt;/a&gt; の機能で目を引くのはやはり Snippets だろう。
以下はその一部（パッケージの Settings に一覧がある）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22712254763/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5675/22712254763_f8fb9f6735.jpg&#34; alt=&#34;Snippets for golang (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22712254763/&#34;&gt;Snippets for golang (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;こんなよぅけ覚えれるか！ まぁとりあえず，よく使うものだけ覚えておけばいいのだろうけど。&lt;/p&gt;

&lt;p&gt;使い方は，トリガーとなる文字列を入力して tab キーを押す。
たとえば &lt;code&gt;func&lt;/code&gt; と入力して tab キーを押すと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ()  {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と展開される。
&lt;code&gt;iferr&lt;/code&gt; なら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err != nil {
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;h2 id=&#34;go-find-references-パッケージが惜しい:19f55614c00d490a9959ede6566335af&#34;&gt;go-find-references パッケージが惜しい&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-find-references&#34; title=&#34;go-find-references&#34;&gt;go-find-references&lt;/a&gt; パッケージは &lt;a href=&#34;https://github.com/redefiance/go-find-references&#34;&gt;redefiance/go-find-references&lt;/a&gt; を使って指定したシンボルを参照しているファイルを列挙してくれる便利ツールだが， Windows 環境ではタグジャンプが上手く動かない。
どうやら &lt;code&gt;C:&lt;/code&gt; などのドライブレターを上手く処理できないようだ。
とほほ。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:19f55614c00d490a9959ede6566335af&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/fcd25db64f341ad2471f&#34;&gt;struct にアノテーションつけてたら go vet . すべき - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/osamingo/items/d5ec42fb8587d857310a&#34;&gt;これからGo言語を書く人への三種の神器 - Qiita&lt;/a&gt; : &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;goimports&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt; で正しいコードを書きましょう。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;code&gt;GOPATH&lt;/code&gt; を &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; の設定で上書きする場合は “Environment Overrides Config” を&lt;strong&gt;無効にする&lt;/strong&gt;こと。なんでかこれ，毎回ハマるんだよなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;code&gt;language&lt;/code&gt; でインストール済みパッケージを検索するとメジャーな言語は大抵入っているのが分かる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM Editor で現在日時を挿入する - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/" />
		<id>tag:text.Baldanders.info,2015-11-13:/remark/2015/insert-datetime-in-atom-editor/</id>
		<published>2015-11-13T21:43:11+09:00</published>
		<updated>2015-11-13T21:43:11+09:00</updated>
		<summary>よろしい，ならば自作しよう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/toruot/items/b26fde1a898bb52985e1&#34;&gt;Atomに現在日時を挿入するコマンドを追加する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上の記事で， &lt;a href=&#34;https://atom.io/packages/date&#34;&gt;date&lt;/a&gt; パッケージなるものがあるというので早速試してみるが，フォーマットの指定の仕方が分からない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bcl.sci.yamaguchi-u.ac.jp/~jun/ja/blog/150221-insert_date_keymap_to_atom&#34;&gt;日付を挿入するキーマップをAtomに追加 | Jun Nishii&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事を見ると，変な場所を触らないといけないらしい。&lt;/p&gt;

&lt;p&gt;よろしい，ならば&lt;del&gt;戦争だ&lt;/del&gt;自作しよう。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/toruot/items/b26fde1a898bb52985e1&#34;&gt;Atomに現在日時を挿入するコマンドを追加する&lt;/a&gt;」を参考に（というかほとんどコピペでw）， Init Script (&lt;code&gt;init.coffee&lt;/code&gt;) に以下の記述を追加した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;# 現在日時を挿入するコマンドを追加
# refs https://github.com/dannyfritz/atom-date
# refs https://github.com/JerrySievert/date-utils
# refs http://qiita.com/toruot/items/b26fde1a898bb52985e1
daysAbbr = [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;]
#daysKanji = [&#39;日&#39;, &#39;月&#39;, &#39;火&#39;, &#39;水&#39;, &#39;木&#39;, &#39;金&#39;, &#39;土&#39;]

paddingZero = (str, length) -&amp;gt;
  str = String(str)
  str = &#39;0&#39; + str  while(str.length &amp;lt; length)
  str

timezone = (offset) -&amp;gt;
  if offset == 0
    &#39;Z&#39;
  else if offset &amp;lt; 0
    &#39;+&#39; + paddingZero(-offset / 60, 2) + &#39;:00&#39; # 今のところ分単位の時差はないので計算を端折る
  else
    &#39;-&#39; + paddingZero(offset / 60, 2) + &#39;:00&#39; # 今のところ分単位の時差はないので計算を端折る

dateOrTime = (kind) -&amp;gt;
  now = new Date()
  yyyy = now.getYear() + 1900
  mm = paddingZero(now.getMonth() + 1, 2)
  dd = paddingZero(now.getDate(), 2)
  ddd = daysAbbr[now.getDay()]
  #ddd = daysKanji[now.getDay()]
  hh24 = paddingZero(now.getHours(), 2)
  mi = paddingZero(now.getMinutes(), 2)
  ss = paddingZero(now.getSeconds(), 2)
  tz = timezone(now.getTimezoneOffset())
  if kind == 1
    &amp;quot;#{yyyy}/#{mm}/#{dd} (#{ddd})&amp;quot;
  else if kind == 2
    &amp;quot;#{hh24}:#{mi}:#{ss}&amp;quot;
  else if kind == 3
    &amp;quot;#{yyyy}/#{mm}/#{dd} (#{ddd}) #{hh24}:#{mi}:#{ss}&amp;quot;
  else
    &amp;quot;#{yyyy}-#{mm}-#{dd}T#{hh24}:#{mi}:#{ss}#{tz}&amp;quot;

insertText = (str) -&amp;gt;
  return unless editor = atom.workspace.getActiveTextEditor()
  selection = editor.getLastSelection()
  selection.insertText(str)

atom.commands.add &#39;atom-text-editor&#39;, &#39;my-date:date&#39;, -&amp;gt;
  insertText(dateOrTime(1))
atom.commands.add &#39;atom-text-editor&#39;, &#39;my-date:time&#39;, -&amp;gt;
  insertText(dateOrTime(2))
atom.commands.add &#39;atom-text-editor&#39;, &#39;my-date:datetime&#39;, -&amp;gt;
  insertText(dateOrTime(3))
atom.commands.add &#39;atom-text-editor&#39;, &#39;my-date:rfc3339&#39;, -&amp;gt;
  insertText(dateOrTime(0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;元のコードでは timezone の項目がなかったので追加し，更に &lt;a href=&#34;https://www.ietf.org/rfc/rfc3339.txt&#34;&gt;RFC 3339&lt;/a&gt; のフォーマットを追加した。
そういや JavaScript の &lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset&#34;&gt;&lt;code&gt;Date.getTimezoneOffset()&lt;/code&gt;&lt;/a&gt; って ± が逆になるんだっけ。
忘れてた orz&lt;/p&gt;

&lt;p&gt;なるほど。
自分で（パッケージにするまでもない）簡単なコマンドを作る場合はこうすればいいんだな。
勉強になりました（谷啓風）。
しかし &lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt; は慣れん。
Arrow functions は確かに便利だけど（ES6 に採用されるくらいだし）。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>今日の戯れ言： GitHub-flow を捨てた ATOM Editor - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1024-diary/" />
		<id>tag:text.Baldanders.info,2015-10-24:/remark/2015/1024-diary/</id>
		<published>2015-10-24T01:13:56+09:00</published>
		<updated>2015-10-24T01:13:56+09:00</updated>
		<summary>GitHub-flow を捨てた ATOM Editor / 暗号プロトコルのセキュリティ評価 / VoLTE の脆弱性 / 「おかげさまで半世紀も生きちゃったぜ」記念</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#atom:607609ccb6f4d1c721b237710b517ddf&#34;&gt;GitHub-flow を捨てた ATOM Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cipher:607609ccb6f4d1c721b237710b517ddf&#34;&gt;暗号プロトコルのセキュリティ評価&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#volte:607609ccb6f4d1c721b237710b517ddf&#34;&gt;VoLTE の脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#birth:607609ccb6f4d1c721b237710b517ddf&#34;&gt;「おかげさまで半世紀も生きちゃったぜ」記念&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;atom:607609ccb6f4d1c721b237710b517ddf&#34;&gt;GitHub-flow を捨てた ATOM Editor&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.atom.io/2015/10/21/introducing-the-atom-beta-channel.html&#34;&gt;Introducing the Atom Beta Channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20151022_726976.html&#34;&gt;オープンソースのテキストエディター「Atom」にベータチャンネルが登場 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;これまで「Atom」は“master”ブランチ（ソースコードの大元）を直接リリースする形態がとられていた。この方法はシンプルで、機能の追加や不具合の修正をそのままユーザーの元へ届けることができたため、開発当初はうまくいっていたという。しかし、機能が増えるにつれて修正済みの不具合が再発する“リグレッション”が多くなり、ワークフローに混乱が生じることがたびたび発生するようになったようだ。&lt;br&gt;
そこで、GitHubは“master”ブランチを直接リリースする方法をやめ、「Google Chrome」などでお馴染みの“リリースチャンネル”を設ける方針をとることにした。「Atom」の場合、開発を行う“master”ブランチから切り離されたベータ版と、ベータ版でテストされた新機能や不具合修正を盛り込んだ正式版（stable）の2つのリリースチャンネルが設けられる。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20151022_726976.html&#34;&gt;オープンソースのテキストエディター「Atom」にベータチャンネルが登場&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;まぁ要するに &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; は， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に関してはお家芸の GitHub-flow を捨てて Git-flow に切り替えたということらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scottchacon.com/2011/08/31/github-flow.html&#34;&gt;GitHub Flow – Scott Chacon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;GitHub Flow (Japanese translation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;A successful Git branching model » nvie.com&#34;&gt;A successful Git branching model » nvie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;git-flow cheatsheet&#34;&gt;git-flow cheatsheet&lt;/a&gt; （日本語）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://komaken.me/blog/2013/09/09/git-flow%E3%81%A8github-flow%E3%81%96%E3%81%A3%E3%81%8F%E3%82%8A%E3%81%BE%E3%81%A8%E3%82%81/&#34;&gt;git flowとgithub flowざっくりまとめ | KentaKomai Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どちらがいいのかについては何とも言えないが，複数バージョンを同時に管理していくのであれば Git-flow にせざるを得ないだろう。
個人的には 1.0 系でそれほど不満はないので，敢えてベータ版を使う必要はないかな。&lt;/p&gt;

&lt;h2 id=&#34;cipher:607609ccb6f4d1c721b237710b517ddf&#34;&gt;暗号プロトコルのセキュリティ評価&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nict.go.jp/press/2015/10/20-2.html&#34;&gt;プレスリリース | 暗号プロトコルのセキュリティ評価結果をリスト化・公開 | NICT-情報通信研究機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://crypto-protocol.nict.go.jp/&#34;&gt;Cryptographic Protocol Verification Portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/068/1068218/&#34;&gt;ASCII.jp：58個の暗号プロトコルをセキュリティ評価！NICTがリスト公開&lt;/a&gt; : 10月23日現在ダウン中&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:607609ccb6f4d1c721b237710b517ddf:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:607609ccb6f4d1c721b237710b517ddf:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各種の認証および鍵交換プロトコルの評価一覧。
分かりやすくまとめられてるし技術文書へのリンクもあってとても参考になる。
なんで &lt;a href=&#34;http://www.nict.go.jp/&#34; title=&#34;NICT-情報通信研究機構&#34;&gt;NICT&lt;/a&gt; なのかは分からないけど。
&lt;a href=&#34;http://www.nict.go.jp/&#34; title=&#34;NICT-情報通信研究機構&#34;&gt;NICT&lt;/a&gt; の活動って chaotic でイマイチよく分からないんだよなぁ。&lt;/p&gt;

&lt;p&gt;そうそう。
&lt;a href=&#34;http://www.nict.go.jp/&#34; title=&#34;NICT-情報通信研究機構&#34;&gt;NICT&lt;/a&gt; で思い出したけど，また ntpd の脆弱性が見つかったみたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.cisco.com/security/talos/2015-10-ntpd-vulnerabilities&#34;&gt;Cisco Identifies Multiple Vulnerabilities in Network Time Protocol daemon (ntpd)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35072380/&#34;&gt;時刻同期のNTPに複数の脆弱性&amp;ndash;HTTPS接続のバイパスなどを誘発 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;やれやれ。&lt;/p&gt;

&lt;h2 id=&#34;volte:607609ccb6f4d1c721b237710b517ddf&#34;&gt;VoLTE の脆弱性&lt;/h2&gt;

&lt;p&gt;脆弱性といえばもうひとつ。
いや4つ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dl.acm.org/citation.cfm?id=2813718&#34;&gt;Breaking and Fixing VoLTE: Exploiting Hidden Data Channels and Mis-implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kb.cert.org/vuls/id/943167&#34;&gt;Vulnerability Note VU#943167 - Voice over LTE implementations contain multiple vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jvn.jp/vu/JVNVU93463833/index.html&#34;&gt;JVNVU#93463833: Voice over LTE (VoLTE) の実装に複数の脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2015/10/23/085/&#34;&gt;VoLTEの脆弱性、携帯3社は検証の上で「問題なし」 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちうことで日本の3大キャリアでは問題なさそうだ。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;GoogleとしてはIMSベアラに直接触れないようにOSを修繕する必要があるので「対策します」ってことになったのでしょうが、基本的にはシステム全体としてはとっくに対策されてるんですよね。あまり知られていませんがVoLTEも実はモデムチップに依存したシステムで、主要チップ屋の実装として端末への直接攻撃も防がれるようになっているみたいですし。まあ、そういう情報は普通はあまり外に漏れないので（漏れたらそれはそれでセキュリティリスクになるし）、理屈上はこうやったらハックできちゃうぜ、って発表されることは悪いことではないと思うのですが、少なくとも、日本やその他情報通信先進国でまともな装置を使っているような国では、このリスクは問題ないと思っていただいて大丈夫だと思いますよ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wnyan.jp/4204&#34;&gt;ニュースコメント[VoLTEの実装で複数の脆弱性と報告] | 無線にゃん&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;慌てない慌てない。&lt;/p&gt;

&lt;h2 id=&#34;birth:607609ccb6f4d1c721b237710b517ddf&#34;&gt;「おかげさまで半世紀も生きちゃったぜ」記念&lt;/h2&gt;

&lt;p&gt;今月で五十路に突入します。
いやぁ，半世紀も生きちゃったよ。&lt;/p&gt;

&lt;p&gt;半世紀も生きてるのに何かを悟ったとか全然ないし，財や名誉を得たとかも全然ないし，何やってるんだろうね，私は。
50代になったらもっとこうナイスミドル（笑）になってるとかありそうなもんだけど，言動が（歳の割に）幼いのか，いまだに生物年齢相当に見られないのは困ったもんである。&lt;/p&gt;

&lt;p&gt;お祝いを下さった友人方々，本当に有難うございます。
みなさんのおかげで明日からも生きていけると思います。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:607609ccb6f4d1c721b237710b517ddf:a&#34;&gt;&lt;a href=&#34;http://japanese.engadget.com/2015/10/22/ascii-jp-ddos-anonymous-it-ascii-jp/&#34;&gt;イルカ漁への抗議で Anonymous が絶賛攻撃中&lt;/a&gt;らしい。 ASCII.jp 関係ないじゃん。迷惑な話。ちなみにイルカは美味い。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:607609ccb6f4d1c721b237710b517ddf:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>今日の戯れ言：ロボット法学会 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1013-diary/" />
		<id>tag:text.Baldanders.info,2015-10-13:/remark/2015/1013-diary/</id>
		<published>2015-10-13T22:54:48+09:00</published>
		<updated>2015-10-13T22:54:48+09:00</updated>
		<summary>「ロボット法学会」設立準備研究会 / 『パクリ経済――コピーはイノベーションを加速するか(仮)』 / GnuPG 2.1.9 released / wrap-style がなかなかよい</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#law:40845aafa61f9857714e6435e2346641&#34;&gt;「ロボット法学会」設立準備研究会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#copy:40845aafa61f9857714e6435e2346641&#34;&gt;『パクリ経済――コピーはイノベーションを加速するか(仮)』&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gnupg:40845aafa61f9857714e6435e2346641&#34;&gt;GnuPG 2.1.9 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#atom:40845aafa61f9857714e6435e2346641&#34;&gt;wrap-style がなかなかよい&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;law:40845aafa61f9857714e6435e2346641&#34;&gt;「ロボット法学会」設立準備研究会&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://robotlaw.jp/&#34;&gt;「ロボット法学会」設立準備研究会 | Robot Law @ Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://peatix.com/event/115206&#34;&gt;「ロボット法学会」設立準備研究会 | Peatix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bengo4.com/internet/n_3805/&#34;&gt;「法律が普及の足かせになってはいけない」ロボット法学会の設立目指し、準備会開催|弁護士ドットコムニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2015/10/46992/&#34;&gt;「ロボットの社会導入に向けて、法律家も技術者もともに議論を」——「ロボット法学会」の設立準備イベント開催 - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://robotlaw.jp/archives/66&#34;&gt;新保史生「何故に『ロボット法』なのか」(2015年10月11日）報告資料 | 「ロボット法学会」設立準備研究会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itresearchart.biz/?p=442&#34;&gt;ロボット法って何 | IT Research Art&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogos.com/article/138762/&#34;&gt;「ロボット法学会設立準備会」に寄せて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初の2つの記事では「ロボット法 新8原則」を紹介している。
曰く&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;人間第一の原則&lt;/li&gt;
&lt;li&gt;命令服従の原則&lt;/li&gt;
&lt;li&gt;秘密保持の原則&lt;/li&gt;
&lt;li&gt;利用制限の原則&lt;/li&gt;
&lt;li&gt;安全保護の原則&lt;/li&gt;
&lt;li&gt;公開・透明性の原則&lt;/li&gt;
&lt;li&gt;個人参加の原則&lt;/li&gt;
&lt;li&gt;責任の原則&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これって既存の「機械」の概念を超えるなと言ってるのと同じだよね。
エンジニア的には面白くはないんだけど，まぁ多分これが大方の人たちの「気分」なんだろう。&lt;/p&gt;

&lt;p&gt;あと&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;人間はロボットよりも肉体能力が高いけれど、知的能力は結構、負け始めている。頭はロボット、体は人間という仕事の体制ができることになる。つまり、トップの人間がロボットに基本的な命令を出し、ロボットがゴーグルを通じて下級の労働者に命令を出して、人間がその通りに仕事をすることになる。言葉もいらず、すごく安く人間を使える。この危険性を指摘している人は少ない&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bengo4.com/internet/n_3805/&#34;&gt;「法律が普及の足かせになってはいけない」ロボット法学会の設立目指し、準備会開催&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるが，現時点において人工知能が「知的」かというと首をひねらざるをえない。
たとえば IBM の Watson は，いわゆる「エキスパート・システム」としては現時点での究極と言えるかもしれないが，「知的」ではない。
Watson は「問いを解く」ことに関して人を凌駕しつつあるかもしれないが，「問いを立てる」ことはできないからだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:40845aafa61f9857714e6435e2346641:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:40845aafa61f9857714e6435e2346641:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;自律的に「問いを立てる」ことができるようにならないかぎり，人工知能は危険でも脅威でもない。
でも，もしそれができるようになれば，まさしく「&lt;a href=&#34;http://text.baldanders.info/remark/2015/0917-diary/#ai:7de7822f81e49845760a41cfe20e81ad&#34;&gt;進化&lt;/a&gt;」だし，そうなれば進化の階梯を機械に譲ることになっても仕方ないだろう。&lt;/p&gt;

&lt;p&gt;もうひとつ考えるべきは「遠隔操作ロボット」である。
これは問題提起としては昨年末に既に出ている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bengo4.com/other/1146/1287/n_2352/&#34;&gt;ロボットを「奴隷的に拘束」したら憲法違反？ 「ロボット法」の可能性を研究者が議論|弁護士ドットコムニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;システムが複雑化すれば，身体的なものであれ，精神的なものであれ，機械と人間との間に軋轢が起きる。
両者の媒として働くと考えられているのも人工知能である。
個人的にはこちらのほうが社会に普及しやすいと考える。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;身体的なものをロボットが模倣する方向で動いていると思うが、はたして身体になりうるのか。たとえば憲法18条では、身体について、奴隷的な拘束は認められていないが、テレイグジスタンスが高度に発達して、ロボットが拘束された場合は身体性を犯されたことになるのかという疑問がある&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bengo4.com/other/1146/1287/n_2352/&#34;&gt;ロボットを「奴隷的に拘束」したら憲法違反？ 「ロボット法」の可能性を研究者が議論&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;また、ロボット法政策研究者でキャンペナーの工藤郁子氏は「製造物責任は『無過失責任』で、ミスがなくても製造者側に責任を負わせるようになっている。しかし、無過失責任を採用する場合、ユーザーにとってメリットはあるが、メーカーにとって重い負担になる」とした上で、「ロボット自体が自分でユーザーとのインタラクションを経て学習すると、もしかしたら技術者が把握している範囲を超えて活動するかもしれない。そのまま製造物責任を導入していいかという問題があるだろう」と語った&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.bengo4.com/other/1146/1287/n_2352/&#34;&gt;ロボットを「奴隷的に拘束」したら憲法違反？ 「ロボット法」の可能性を研究者が議論&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これに直接応えるものではないが「&lt;a href=&#34;http://blogos.com/article/138762/&#34;&gt;「ロボット法学会設立準備会」に寄せて&lt;/a&gt;」はなかなか興味深い。
この記事では「4つの NEW」を提示している。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NEW Machine&lt;/li&gt;
&lt;li&gt;NEW Relationship&lt;/li&gt;
&lt;li&gt;NEW Law&lt;/li&gt;
&lt;li&gt;NEW Generation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらを軸に議論していくと面白いのではないかと思う。&lt;/p&gt;

&lt;h2 id=&#34;copy:40845aafa61f9857714e6435e2346641&#34;&gt;『パクリ経済――コピーはイノベーションを加速するか(仮)』&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20151012/pakuri&#34;&gt;この本の帯文は佐野研二郎氏に依頼すればいいのではと思った『パクリ経済――コピーはイノベーションを加速するか(仮)』 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うーん。
3,780円。
392ページ。&lt;/p&gt;

&lt;p&gt;今年は高めの本は（主に経済的な理由で）遠慮してるのだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:40845aafa61f9857714e6435e2346641:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:40845aafa61f9857714e6435e2346641:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，これは読みたいなぁ。
でもこの前，&lt;a href=&#34;http://text.baldanders.info/remark/2015/0920-diary/&#34;&gt;泣く泣く本を処分した&lt;/a&gt;ばっかりだしなぁ。
これ以上魔窟の進行を許すわけには&amp;hellip;&lt;/p&gt;

&lt;p&gt;ちうわけで，とりあえず Kindle リクエストを出してみた。&lt;/p&gt;

&lt;p&gt;ところで，この「（仮）」ってのは正式タイトルなのだろうか。
タイトルの後ろに「（仮）」って付いてると，昔あった某どどエロアニメを連想してしまうんだが（笑）&lt;/p&gt;

&lt;h2 id=&#34;gnupg:40845aafa61f9857714e6435e2346641&#34;&gt;GnuPG 2.1.9 released&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2015q4/000380.html&#34;&gt;GnuPG 2.1.9 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回もセキュリティ脆弱性に絡む修正はなし。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: Allow fetching keys via OpenPGP DANE (&amp;ndash;auto-key-locate).  New option &amp;ndash;print-dane-records.&lt;/li&gt;
&lt;li&gt;gpg: Fix for a problem with PGP-2 keys in a keyring.&lt;/li&gt;
&lt;li&gt;gpg: Fail with an error instead of a warning if a modern cipher algorithm is used without a MDC.&lt;/li&gt;
&lt;li&gt;agent: New option &amp;ndash;pinentry-invisible-char.&lt;/li&gt;
&lt;li&gt;agent: Always do a RSA signature verification after creation.&lt;/li&gt;
&lt;li&gt;agent: Fix a regression in ssh-add-ing Ed25519 keys.&lt;/li&gt;
&lt;li&gt;agent: Fix ssh fingerprint computation for nistp384 and EdDSA.&lt;/li&gt;
&lt;li&gt;agent: Fix crash during passprase entry on some platforms.&lt;/li&gt;
&lt;li&gt;scd: Change timeout to fix problems with some 2.1 cards.&lt;/li&gt;
&lt;li&gt;dirmngr: Displayed name is now Key Acquirer.&lt;/li&gt;
&lt;li&gt;dirmngr: Add option &amp;ndash;keyserver.  Deprecate that option for gpg.  Install a dirmngr.conf file from a skeleton for new installations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;atom:40845aafa61f9857714e6435e2346641&#34;&gt;wrap-style がなかなかよい&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor&lt;/a&gt; は実は日本語混じりのテキストが苦手で，まともに使おうと思ったら相応のパッケージを導入する必要がある。
今までは &lt;a href=&#34;https://atom.io/packages/japanese-wrap&#34; title=&#34;japanese-wrap&#34;&gt;japanese-wrap&lt;/a&gt; を使ってたのだが，同じ作者による &lt;a href=&#34;https://atom.io/packages/wrap-style&#34; title=&#34;wrap-style&#34;&gt;wrap-style&lt;/a&gt; に乗り換えた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/raccy/items/4678af4020189366a297&#34;&gt;Atomで上手にwarpを刻んでくれるwrap-styleを開発しました。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者ご本人は「遅い。遅すぎる」と書かれているが，なかなかどうして。
実用上は問題ない。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:40845aafa61f9857714e6435e2346641:1&#34;&gt;まぁ人間だって自分で「問いを立てる」ことのできる者は少なそうだが。特に日本の学校教育は意図的にそういうことを spoil してるからね。できない者はニコラ・テスラに「君は automaton だ」とか言われそう（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:40845aafa61f9857714e6435e2346641:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:40845aafa61f9857714e6435e2346641:a&#34;&gt;積ん読も溜まりまくってるので消化しないと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:40845aafa61f9857714e6435e2346641:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM Editor に関するメモ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/atom-editor/" />
		<id>tag:text.Baldanders.info,2015-09-15:/remark/2015/atom-editor/</id>
		<published>2015-09-15T21:00:13+09:00</published>
		<updated>2016-02-09T16:41:53+09:00</updated>
		<summary>ATOM Editor に関するメモ。 Windows 環境が前提になっているのであしからず。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;この記事は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor に関する情報を Qiita に投稿した記事から再構成したものである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/3d41d98dacc107d73431&#34;&gt;ATOM Editor をそろそろ始めようか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/a1b4d1ad2a6693ae33e4&#34;&gt;行末の空白は EditorConfig で始末しましょう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/5c6dafcece9e7118877a&#34;&gt;ATOM 1.0 リリースおめでたう記念に最初からインストールし直してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そうそう。
Windows 環境が前提になっているのであしからず。&lt;/p&gt;

&lt;h2 id=&#34;atom-1-0-をインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM 1.0 をインストールする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; サイトからインストールパッケージ &lt;code&gt;AtomSetup.exe&lt;/code&gt; をダウンロードして起動すればよい。
インストールが成功するとインストールフォルダ &lt;code&gt;C:\Users\username\AppData\Local\atom\bin&lt;/code&gt; に PATH が通る。
これでコマンドプロンプトからも &lt;code&gt;atom&lt;/code&gt; および &lt;code&gt;apm&lt;/code&gt; コマンドが使えるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;atom -v
[7696:0915/112859:INFO:CONSOLE(0)] 1.0.11


C:&amp;gt;apm -v
apm  1.0.4
npm  2.13.3
node 0.10.40
python
git 2.5.2.windows.2
visual studio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の環境では Python と Visual Studio は入れてないのでバージョンが入ってないのかな。
たしか node-gyp をビルドするのに（Windows 環境では） Python と Visual Studio が要るんだよね。
ううむ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://create-something.hatenadiary.jp/entry/2014/07/13/021655&#34;&gt;Windowsでnode-gypのビルドを通す - なにか作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;atom-をアンインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM をアンインストールする&lt;/h3&gt;

&lt;p&gt;アンインストール自体はコンパネから「プログラムと機能」を開いて「Atom」をアンインストールする。アンインストールを開始するもほぼ無言で完了。男前（笑）&lt;/p&gt;

&lt;p&gt;ただしユーザのフォルダ内には &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 関連のファイルがかなり残っているので手動で掃除する。対象となるのは以下のフォルダ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\.atom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Local\atom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Local\Temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Roaming\Atom&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;AppData&lt;/code&gt; フォルダは既定では不可視になっているのでご注意を。 &lt;code&gt;C:\Users\username\.atom&lt;/code&gt; フォルダには &lt;code&gt;keymap.cson&lt;/code&gt; などの設定ファイルが入ってるので，バックアップを取っておくと安全。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\Users\username\AppData\Local\Temp&lt;/code&gt; には &lt;code&gt;Atom Crashes&lt;/code&gt; フォルダがある。どうやらクラッシュ・レポートはここに吐かれるらしい。テンポラリ・フォルダにある古い日付のフォルダ・ファイルは，大概は削除して大丈夫なのだが，たまにヤバいやつもあるので掃除は慎重に。&lt;/p&gt;

&lt;h4 id=&#34;参考:9f5cc37d12d96caee7deea463dce6873&#34;&gt;参考&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masa36/items/c800185174bd77526a7d&#34;&gt;Atom レジストリエントリを含むアンインストール方法（Windows版） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;apm-stars-でテーマ-パッケージを一気にインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;apm stars でテーマ・パッケージを一気にインストールする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;apm&lt;/code&gt; には star を付けたテーマ・パッケージを一気にインストールするコマンドがある。&lt;/p&gt;

&lt;p&gt;この機能を使うには，まず &lt;code&gt;apm&lt;/code&gt; にアカウントのトークンを登録する必要がある。アカウントのトークンは &lt;a href=&#34;https://atom.io/account&#34;&gt;Account&lt;/a&gt; ページから取得できる。（&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; のアカウントを持っていれば，そのまま &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にも sign in できるのだが，持ってない人はどうするんだろう？）&lt;/p&gt;

&lt;p&gt;取得したトークンを &lt;code&gt;apm login&lt;/code&gt; コマンドで登録すれば OK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;apm login
Welcome to Atom!

Before you can publish packages, you&#39;ll need an API token.

Visit your account page on Atom.io https://atom.io/account,
copy the token and paste it below when prompted.

Press [Enter] to open your account page on Atom.io.
Token&amp;gt; ****************
Saving token to Keychain done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Star を付けたテーマ・パッケージは &lt;code&gt;apm stars&lt;/code&gt; コマンドで見ることができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm stars
Packages starred by you (13)
├── atom-monokai Monokai syntax theme for Atom Dark &amp;amp; Light UI, One Dark &amp;amp; Light, and Seti UI (27359 downloads, 39 stars)
├── autoclose-html Automates closing of HTML Tags (83771 downloads, 296 stars)
├── editorconfig Helps developers maintain consistent coding styles between different editors (55732 downloads, 446 stars)
├── file-icons Assign file extension icons and colours for improved visual grepping (305041 downloads, 1561 stars)
├── git-plus Do git things without the terminal (264729 downloads, 861 stars)
├── highlight-line Highlights the current line in the editor (54346 downloads, 423 stars)
├── japan-util utilities for Japanese (858 downloads, 12 stars)
├── open-recent Open recent files in the current window, and recent folders (optionally) in a new window. (11595 downloads, 142 stars)
├── quick-highlight Highlight text quickly. (943 downloads, 11 stars)
├── show-ideographic-space Show ideographic space (known as 全角スペース) (4255 downloads, 57 stars)
├── symbols-tree-view A symbols view like taglist (19099 downloads, 181 stars)
├── tablr Edit CSV files using a table editor (538 downloads, 16 stars)
└── wrap-style Select word warp style. (10 downloads, 2 stars)

Use `apm stars --install` to install them all or visit http://atom.io/packages to read more about them.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに &lt;code&gt;--install&lt;/code&gt; オプションを付ければ一気にインストールできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm stars --install
Installing atom-monokai to C:\Users\username\.atom\packages done
Installing autoclose-html to C:\Users\username\.atom\packages done
Installing editorconfig to C:\Users\username\.atom\packages done
Installing file-icons to C:\Users\username\.atom\packages done
Installing git-plus to C:\Users\username\.atom\packages done
Installing highlight-line to C:\Users\username\.atom\packages done
Installing japan-util to C:\Users\username\.atom\packages done
Installing open-recent to C:\Users\username\.atom\packages done
Installing quick-highlight to C:\Users\username\.atom\packages done
Installing show-ideographic-space to C:\Users\username\.atom\packages done
Installing symbols-tree-view to C:\Users\username\.atom\packages done
Installing tablr to C:\Users\username\.atom\packages done
Installing wrap-style to C:\Users\username\.atom\packages done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで複数マシンへの環境構築が随分楽になると思う。なお star の管理は &lt;code&gt;apm star&lt;/code&gt; または &lt;code&gt;apm unstar&lt;/code&gt; コマンドでできるが，テーマ・パッケージのページでも可能。&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の star が &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; の star のように &lt;a href=&#34;https://flattr.com/&#34;&gt;Flattr&lt;/a&gt; と連動すれば面白いんだけどねぇ。とりあえず flattr ボタンを貼り付ける手もあるけど）&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/115fea37ad2e515f6641&#34;&gt;ATOM の Theme / Package の感想文（2015-06-10） - Qiita&lt;/a&gt;」にテーマ・パッケージの感想を書いている。個人的な印象なんであんまり参考にならないかもだけど，よろしかったらどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;atom-の設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM の設定&lt;/h2&gt;

&lt;h3 id=&#34;proxy-設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Proxy 設定&lt;/h3&gt;

&lt;p&gt;Intranet 上のマシンで外部との接続が阻まれている場合は Proxy 設定を行う。
設定には &lt;code&gt;apm&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm config set https-proxy http://username:password@proxy.exsample.com:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firewall のなかには，セキュリティ上の理由から， SSL/TLS 暗号通信を中間者攻撃&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; でのぞき見するものがある。
このタイプの Firewall/Proxy は SSL/TLS の証明書を書き換えてしまうため， &lt;code&gt;apm&lt;/code&gt; が通信エラーになる。
この場合は以下の設定を行って強制的に SSL/TLS を通すようにするとよいらしい（取扱注意）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm config set strict-ssl false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やれやれ。&lt;/p&gt;

&lt;h3 id=&#34;font-family-の選択:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Font Family の選択&lt;/h3&gt;

&lt;p&gt;エディタのフォントは作業効率に大きく影響する。
これは私個人の感覚だが，日本語の地の文章がゴシック体なのは辛い。
いくら綺麗だからといって Meiryo フォントをエディタに使う気にはならない。
ただし，コードに関しては視認性が一番重要。
ということで，フォントの指定は以下で無問題&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Inconsolata&amp;quot;, &amp;quot;MS Mincho&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows では Tree View のフォントが汚いので，ここは素直に Meiryo UI フォントに変える。 &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; を以下のように変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.tree-view {
	font-family: &amp;quot;Meiryo UI&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;atom-workspace {
  font-family: &amp;quot;Meiryo UI&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればタブや Settings 画面のフォントも変えられる。&lt;/p&gt;

&lt;h3 id=&#34;editorconfig:9f5cc37d12d96caee7deea463dce6873&#34;&gt;EditorConfig&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; があればタブや改行コードなどの設定を統一できる。
これは特に複数人で作業する場合に威力を発揮する。
たとえば，このサイトの作業環境では以下のように設定している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;root = true

[*]
end_of_line = lf
charset = utf-8
indent_style = tab
indent_size = 4
trim_trailing_whitespace = true
insert_final_newline = true

[*.html]
insert_final_newline = false

[*.md]
indent_style = space
indent_size = 4
trim_trailing_whitespace = false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; はフォルダを遡って &lt;code&gt;.editorconfig&lt;/code&gt; ファイルを探し，フォルダの上から順番に評価していく。
&lt;code&gt;root = true&lt;/code&gt; の記述がないとどこまでも上の階層に遡っていくので，プロジェクトのトップ・フォルダの &lt;code&gt;.editorconfig&lt;/code&gt; には必ずこれを記述すること。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[*]&lt;/code&gt; は対象となるファイルを指定している。 &lt;code&gt;[*]&lt;/code&gt; なら全てのファイルが対象である。 &lt;code&gt;[*.html]&lt;/code&gt; は拡張子 &lt;code&gt;html&lt;/code&gt; のファイルが対象となる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end_of_line&lt;/code&gt; では改行コードを指定する。 &lt;code&gt;lf&lt;/code&gt;, &lt;code&gt;cr&lt;/code&gt;, &lt;code&gt;crlf&lt;/code&gt; から選択できる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indent_style&lt;/code&gt; はインデント（タブ）のスタイルを指定する。 &lt;code&gt;tab&lt;/code&gt; または &lt;code&gt;space&lt;/code&gt; を指定する。 &lt;code&gt;space&lt;/code&gt; にすると，いわゆる「ソフトタブ」になる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indent_size&lt;/code&gt; はタブの幅を指定する。 &lt;code&gt;indent_style&lt;/code&gt; と &lt;code&gt;indent_size&lt;/code&gt; は常にセットで指定すると間違いがない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trim_trailing_whitespace&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にすると行末の空白文字を削除してくれる。残念なことに &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の場合は，いわゆる「全角空白」を空白文字と見なしてくれない。まぁ全角空白を空白文字と見なす実装のほうが少ないけど。ただし現在は機能していない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert_final_newline&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にするとファイルの末尾が改行文字ではない場合に補完してくれる。ただし現在は機能していない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; は多くのテキスト・エディタや統合開発環境に対応していて，もちろん &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にも対応パッケージがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/editorconfig&#34;&gt;editorconfig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;文字エンコーディングについて残念なお知らせ:9f5cc37d12d96caee7deea463dce6873&#34;&gt;文字エンコーディングについて残念なお知らせ&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;charset&lt;/code&gt; では文字エンコーディングを指定するが，標準では &lt;code&gt;latin1&lt;/code&gt;, &lt;code&gt;utf-8&lt;/code&gt;, &lt;code&gt;utf-8-bom&lt;/code&gt;, &lt;code&gt;utf-16be&lt;/code&gt;, &lt;code&gt;utf-16le&lt;/code&gt; しかサポートしていない。
それ以外の文字エンコーディングは実装依存ということになる。&lt;/p&gt;

&lt;p&gt;しかも &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の場合，ファイルを新規作成する場合にこの設定が効かないようで，たとえば &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 側の “File Encoding” が &lt;code&gt;shiftjis&lt;/code&gt; で  &lt;code&gt;.editorconfig&lt;/code&gt; ファイル側が &lt;code&gt;charset = utf-8&lt;/code&gt; の場合，新規作成ファイルは &lt;code&gt;shiftjis&lt;/code&gt; にセットされ，そのまま保存される。
しかも次にそのファイルを開く場合は（&lt;code&gt;.editorconfig&lt;/code&gt; ファイル側の設定が効いてしまうので） &lt;code&gt;utf8&lt;/code&gt; で開いてしまい，結果派手に文字化けする（&lt;code&gt;ctrl-shift-U&lt;/code&gt; で文字エンコーディングを変更すれば元に戻るけど）。&lt;/p&gt;

&lt;p&gt;新規作成時の初期の文字エンコーディングは今のところどうしようもないが，プロジェクトごとに “File Encoding” を変更して対応するか，新規作成ファイルが開いた直後に &lt;code&gt;ctrl-shift-U&lt;/code&gt; で文字エンコーディングを変更することで何とかなるだろう（ダサいけど）。&lt;/p&gt;

&lt;h4 id=&#34;ファイル読み込み時に文字エンコーディングを自動判別する:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ファイル読み込み時に文字エンコーディングを自動判別する&lt;/h4&gt;

&lt;p&gt;もうひとつの緩和策としては，既存ファイル読み込み時に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に文字エンコードを自動判別させることだ。ただし，この機能を持つ Package は今のところ存在しないようなので自前で何とかするしかない（後述するが &lt;a href=&#34;https://atom.io/packages/auto-encoding&#34;&gt;auto-encoding&lt;/a&gt; パッケージというのがあった）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tokudiro/items/bc232c7d36261dc45936&#34;&gt;ATOM でファイルを開いたら自動文字コード判定を行う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この設定を行うには node.js のフルパッケージが必要。&lt;/p&gt;

&lt;p&gt;（Linux や Mac な人は依存関係で node.js がインストールされると思うけど， Windows では &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; インストール時に一部機能が同梱されているだけなので（しかもバージョンが古い），フル機能を使うには別途インストールする必要あり）&lt;/p&gt;

&lt;p&gt;Windows の場合は &lt;code&gt;%USERPROFILE%\.atom&lt;/code&gt; フォルダに移動する。その後， &lt;code&gt;npm&lt;/code&gt; コマンドを使って &lt;code&gt;iconv-lite&lt;/code&gt; と &lt;code&gt;jschardet&lt;/code&gt; をインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;cd C:\Users\username\.atom
C:\Users\username\.atom&amp;gt;npm install iconv-lite
iconv-lite@0.4.10 node_modules\iconv-lite

C:\Users\username\.atom&amp;gt;npm install jschardet
jschardet@1.1.1 node_modules\jschardet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると &lt;code&gt;%USERPROFILE%\.atom\node_modules&lt;/code&gt; フォルダが作成され，その中に &lt;code&gt;iconv-lite&lt;/code&gt; と &lt;code&gt;jschardet&lt;/code&gt; がインストールされているはずである。&lt;/p&gt;

&lt;p&gt;次は &lt;code&gt;%USERPROFILE%\.atom\init.coffee&lt;/code&gt; ファイルに以下の記述を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;fs = require(&#39;fs&#39;)

atom.workspace.onDidOpen -&amp;gt;
  editor = atom.workspace.getActiveTextEditor()

  try
    filePath = editor.getPath()
  catch error
    return
  return unless fs.existsSync(filePath)

  jschardet = require &#39;jschardet&#39;
  iconv = require &#39;iconv-lite&#39;
  fs.readFile filePath, (error, buffer) =&amp;gt;
    return if error?
    {encoding} = jschardet.detect(buffer) ? {}
    encoding = &#39;utf8&#39; if encoding is &#39;ascii&#39;
    return unless iconv.encodingExists(encoding)

    encoding = encoding.toLowerCase().replace(/[^0-9a-z]|:\d{4}$/g, &#39;&#39;)
    editor.setEncoding(encoding)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/tokudiro/items/bc232c7d36261dc45936&#34;&gt;ATOM でファイルを開いたら自動文字コード判定を行う&lt;/a&gt;」によると，これは &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; からの流用らしい。ただし現在， &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; は Core Package に入ってるので atom フォルダをひっくり返してもソースコードは見当たらない。ので，GitHub repository &lt;a href=&#34;https://github.com/atom/encoding-selector&#34;&gt;atom/encoding-selector&lt;/a&gt; にある &lt;a href=&#34;https://github.com/atom/encoding-selector/blob/master/lib/encoding-list-view.coffee&#34;&gt;lib/encoding-list-view.coffee&lt;/a&gt; を参考にするといいだろう。 &lt;code&gt;detectEncoding:&lt;/code&gt; のあたりである。&lt;/p&gt;

&lt;p&gt;これで &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を起動して既定の文字エンコーディングでない適当なファイルを読み込ませてみれば確認できる。ただし，自動判別は万能じゃない（たまに間違う）ので，その辺は悪しからずってことで。&lt;/p&gt;

&lt;p&gt;一番いいのは &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; がファイル読み込み時に自動判別する機能を付けてくれることなんだけど。誰かやらないかな。個人的には &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 開発に積極的に commit する気はないので，完全に他人任せなのだが。&lt;/p&gt;

&lt;p&gt;とか思ってたら &lt;a href=&#34;https://atom.io/packages/auto-encoding&#34;&gt;auto-encoding&lt;/a&gt; パッケージというのがあった。
素敵！ 2015年の春には存在していたらしい。
それ知らんかっとってんちんとんしゃん。
コマンドパレットで自動判別をオフにすることもできる。
ありがとー！&lt;/p&gt;

&lt;h3 id=&#34;git-関連機能:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Git 関連機能&lt;/h3&gt;

&lt;p&gt;GitHub が作ったという割には git 機能が貧弱なのは何故なのだろう。特に &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; 相当の機能が Core パッケージに入ってないのは解せぬ。というわけでインストールした。公開してくださった方に感謝。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; は主にコマンドパレットで操作するが（メニューの「Packages」からも辿れる），コマンドパレットの呼び出しを &lt;code&gt;f1&lt;/code&gt; キーに割り当てたらだいぶ使いやすくなった。
更に &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; 専用のコマンドパレットもある。これも &lt;code&gt;shift-f1&lt;/code&gt; キーに割り当てた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/git-control&#34;&gt;git-control&lt;/a&gt; は GUI で最初の頃は便利だったのだが， &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; が手に馴染んできたら使わなくなった。
submodule の処理が得意ではないっぽいのもマイナス。&lt;/p&gt;

&lt;h3 id=&#34;矩形選択:9f5cc37d12d96caee7deea463dce6873&#34;&gt;矩形選択&lt;/h3&gt;

&lt;p&gt;矩形選択用に &lt;code&gt;%USERPROFILE%\.atom\keymap.cson&lt;/code&gt; ファイルに対して以下のキー設定を行った&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;body&#39;:
  &#39;alt-shift-down&#39;: &#39;editor:add-selection-below&#39;
  &#39;alt-shift-left&#39;: &#39;core:select-left&#39;
  &#39;alt-shift-right&#39;: &#39;core:select-right&#39;
  &#39;alt-shift-up&#39;: &#39;editor:add-selection-above&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Alt+Shift キーを押しながらカーソルを上下左右に動かせば矩形選択ができる。実はこれらの操作のキー割り当ては元々こうなっている。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Keybind&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;コマンド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ctrl-alt-down&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;editor:add-selection-below&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ctrl-alt-up&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;editor:add-selection-above&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-left&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;core:select-left&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-right&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;core:select-right&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ただし，うちのパソコンでは Ctrl+Alt キーを押しながらカーソルを動かすと（Windows がキーを横取りして）ディスプレイの向きが変わってしまうので，かなり切ないことになってしまう。&lt;/p&gt;

&lt;p&gt;実際には &lt;code&gt;editor:add-selection-below&lt;/code&gt; および &lt;code&gt;editor:add-selection-above&lt;/code&gt; はマルチカーソル・モードのコマンドである。マルチカーソル・モードは癖がある感じだが慣れれば結構使えるかも。&lt;/p&gt;

&lt;p&gt;キーボード操作ではなく，マウス操作で矩形選択がしたい場合は &lt;a href=&#34;https://atom.io/packages/Sublime-Style-Column-Selection&#34;&gt;sublime-style-column-selection&lt;/a&gt; を導入するとよい。 Windows ではマウスのセンターボタンを押しながらマウスを動かす。&lt;/p&gt;

&lt;p&gt;いずれのやり方でも，日本語混じりのテキストではうまくいかない。
やれやれ。&lt;/p&gt;

&lt;h3 id=&#34;その他:9f5cc37d12d96caee7deea463dce6873&#34;&gt;その他&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;自動保存を行う Core パッケージ &lt;a href=&#34;https://atom.io/packages/autosave&#34;&gt;autosave&lt;/a&gt; は既定で無効になってる。私は &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; で commit する前に保存するのをどうしても忘れるので，これを有効にしておくと吉。ただし &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; で，自動保存により勝手に commit が走るので注意。&lt;/li&gt;
&lt;li&gt;Core パッケージ &lt;a href=&#34;https://atom.io/packages/tabs&#34;&gt;tabs&lt;/a&gt; の設定で “Enable VCS Coloring” を有効にするとタブに表示されているファイル名が色分けされて表示される。&lt;/li&gt;
&lt;li&gt;Core パッケージ &lt;a href=&#34;https://atom.io/packages/git-diff&#34;&gt;git-diff&lt;/a&gt; の設定で “Show Icons In Editor Gutter” を有効にすると差分情報がちょっとだけ見やすくなる。&lt;/li&gt;
&lt;li&gt;インデントをそろえるために &lt;a href=&#34;https://atom.io/packages/highlight-column&#34;&gt;highlight-column&lt;/a&gt; を紹介しているページを見かけたけど，インデントをそろえる目的なら，標準の Settings で “Show Indent Guide” にチェックを入れておく方が吉。&lt;/li&gt;
&lt;li&gt;秀丸では大変重宝したアウトライン解析。&lt;a href=&#34;https://atom.io/packages/symbols-tree-view&#34;&gt;symbols-tree-view&lt;/a&gt; があればアウトライン解析を行って右側のサイドバーに表示する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/japan-util&#34;&gt;japan-util&lt;/a&gt; : 全角・半角変換機能。英数字を全角で書いたり仮名文字を半角で書いたりするバカがいるので，意外と使うのよ，これ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/highlight-line&#34;&gt;highlight-line&lt;/a&gt; でカーソル行をハイライトにしたり下線を引いたりできる。色のカスタマイズは &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; ファイルで行う。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/open-recent&#34;&gt;open-recent&lt;/a&gt; は最近開いたファイルやフォルダを覚えておいてくれる便利なやつ。てか，なぜこれが標準で搭載されてないのだ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/show-ideographic-space&#34;&gt;show-ideographic-space&lt;/a&gt; : いわゆる「全角空白」を視覚化してくれる。見せ方は &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; ファイルでカスタマイズ可能。実際には IME のプロパティでスペース・キー押下で常に「半角空白」を入力するように設定すればほとんど防げるんだどね（全角空白を入力する場合は &lt;code&gt;shift-space&lt;/code&gt; 押下）。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/autoclose-html&#34;&gt;autoclose-html&lt;/a&gt; : HTML 入力でタグを入力すると自動的に閉じタグを補完してくれる。自動補完の機能は色々あって，大抵は &lt;a href=&#34;https://atom.io/packages/autocomplete-plus&#34;&gt;autocomplete-plus&lt;/a&gt; のサブパッケージだったりするのだが，これだけは毛色が違う（笑）&lt;/li&gt;
&lt;li&gt;特定の単語をマークしておける &lt;a href=&#34;https://atom.io/packages/quick-highlight&#34;&gt;quick-highlight&lt;/a&gt; が結構使える。 Windows だとキーに割り当てられないので、 toggle を適当なファンクションキーとかに割り当てておくとめっさ便利。&lt;/li&gt;
&lt;li&gt;むむっ。 &lt;a href=&#34;https://atom.io/packages/latex&#34;&gt;latex&lt;/a&gt; パッケージなるものがあるなぁ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/tablr&#34;&gt;tablr&lt;/a&gt; : CSV Editor。なにこれ素敵！&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/tempfile&#34;&gt;tempfile&lt;/a&gt; は書き捨て用のファイルを開くことができる。ファイルタイプを指定できるので通常のファイルと同じように highlight や snippet が効く。また設定でファイル保存先を指定できるので書き散らしたメモを溜めておくこともできる。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;現在の設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;現在の設定&lt;/h3&gt;

&lt;p&gt;現在の設定は &lt;a href=&#34;https://gist.github.com/spiegel-im-spiegel/e6e9c7340987f1607b2c&#34;&gt;Gist に貼り付け&lt;/a&gt;ている。
よろしかったら参考にどうぞ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;&#39;&gt;
&lt;script src=&#34;https://gist.github.com/spiegel-im-spiegel/e6e9c7340987f1607b2c.js&#34;&gt;&lt;/script&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;ブックマーク:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に関するブックマークは &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/3d41d98dacc107d73431&#34;&gt;Qiita でメンテナンス&lt;/a&gt;している。
こちらも併せてどうぞ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;Deep Packet Inspection とか言うらしいけど，どう見たって Man-in-the-Middle Attack だろ（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;日本語フォントの指定が MS 明朝なのは，どんな日本語 Windows 環境でも MS 明朝は必ず入ってるからという理由だけなので，自分の感覚で見易いフォントがあればそちらを使うべき。ちなみに IPA 明朝は線が細すぎて不向きだった。 &lt;a href=&#34;http://www.levien.com/type/myfonts/inconsolata.html&#34; title=&#34;Inconsolata&#34;&gt;Inconsolata&lt;/a&gt; は OpenType フォントを取ってきて「インストール」してしまえばよい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
