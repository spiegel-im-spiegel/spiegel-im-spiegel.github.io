<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Atom - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/atom/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/atom/index.xml" />
	<id>tag:text.Baldanders.info,2015-09-15T21:00:13+0900:/</id>
	<updated>2015-09-15T21:00:13+0900</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>ATOM Editor に関するメモ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/atom-editor/" />
		<id>tag:text.Baldanders.info,2015-09-15T21:00:13+0900:/remark/2015/atom-editor/</id>
		<published>2015-09-15T21:00:13+0900</published>
		<updated>2015-10-13T16:50:00+0900</updated>
		<summary>ATOM Editor に関するメモ。 Windows 環境が前提になっているのであしからず。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;この記事は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor に関する情報を Qiita に投稿した記事から再構成したものである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/3d41d98dacc107d73431&#34;&gt;ATOM Editor をそろそろ始めようか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/a1b4d1ad2a6693ae33e4&#34;&gt;行末の空白は EditorConfig で始末しましょう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/5c6dafcece9e7118877a&#34;&gt;ATOM 1.0 リリースおめでたう記念に最初からインストールし直してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そうそう。
Windows 環境が前提になっているのであしからず。&lt;/p&gt;

&lt;h2 id=&#34;atom-1-0-をインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM 1.0 をインストールする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; サイトからインストールパッケージ &lt;code&gt;AtomSetup.exe&lt;/code&gt; をダウンロードして起動すればよい。
インストールが成功するとインストールフォルダ &lt;code&gt;C:\Users\username\AppData\Local\atom\bin&lt;/code&gt; に PATH が通る。
これでコマンドプロンプトからも &lt;code&gt;atom&lt;/code&gt; および &lt;code&gt;apm&lt;/code&gt; コマンドが使えるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;atom -v
[7696:0915/112859:INFO:CONSOLE(0)] 1.0.11


C:&amp;gt;apm -v
apm  1.0.4
npm  2.13.3
node 0.10.40
python
git 2.5.2.windows.2
visual studio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の環境では Python と Visual Studio は入れてないのでバージョンが入ってないのかな。
たしか node-gyp をビルドするのに（Windows 環境では） Python と Visual Studio が要るんだよね。
ううむ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://create-something.hatenadiary.jp/entry/2014/07/13/021655&#34;&gt;Windowsでnode-gypのビルドを通す - なにか作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;atom-をアンインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM をアンインストールする&lt;/h3&gt;

&lt;p&gt;アンインストール自体はコンパネから「プログラムと機能」を開いて「Atom」をアンインストールする。アンインストールを開始するもほぼ無言で完了。男前（笑）&lt;/p&gt;

&lt;p&gt;ただしユーザのフォルダ内には &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 関連のファイルがかなり残っているので手動で掃除する。対象となるのは以下のフォルダ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\.atom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Local\atom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Local\Temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Roaming\Atom&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;AppData&lt;/code&gt; フォルダは既定では不可視になっているのでご注意を。 &lt;code&gt;C:\Users\username\.atom&lt;/code&gt; フォルダには &lt;code&gt;keymap.cson&lt;/code&gt; などの設定ファイルが入ってるので，バックアップを取っておくと安全。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\Users\username\AppData\Local\Temp&lt;/code&gt; には &lt;code&gt;Atom Crashes&lt;/code&gt; フォルダがある。どうやらクラッシュ・レポートはここに吐かれるらしい。テンポラリ・フォルダにある古い日付のフォルダ・ファイルは，大概は削除して大丈夫なのだが，たまにヤバいやつもあるので掃除は慎重に。&lt;/p&gt;

&lt;h2 id=&#34;apm-stars-でテーマ-パッケージを一気にインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;apm stars でテーマ・パッケージを一気にインストールする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;apm&lt;/code&gt; には star を付けたテーマ・パッケージを一気にインストールするコマンドがある。&lt;/p&gt;

&lt;p&gt;この機能を使うには，まず &lt;code&gt;apm&lt;/code&gt; にアカウントのトークンを登録する必要がある。アカウントのトークンは &lt;a href=&#34;https://atom.io/account&#34;&gt;Account&lt;/a&gt; ページから取得できる。（&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; のアカウントを持っていれば，そのまま &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にも sign in できるのだが，持ってない人はどうするんだろう？）&lt;/p&gt;

&lt;p&gt;取得したトークンを &lt;code&gt;apm login&lt;/code&gt; コマンドで登録すれば OK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;apm login
Welcome to Atom!

Before you can publish packages, you&#39;ll need an API token.

Visit your account page on Atom.io https://atom.io/account,
copy the token and paste it below when prompted.

Press [Enter] to open your account page on Atom.io.
Token&amp;gt; ****************
Saving token to Keychain done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Star を付けたテーマ・パッケージは &lt;code&gt;apm stars&lt;/code&gt; コマンドで見ることができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm stars
Packages starred by you (13)
├── atom-monokai Monokai syntax theme for Atom Dark &amp;amp; Light UI, One Dark &amp;amp; Light, and Seti UI (27359 downloads, 39 stars)
├── autoclose-html Automates closing of HTML Tags (83771 downloads, 296 stars)
├── editorconfig Helps developers maintain consistent coding styles between different editors (55732 downloads, 446 stars)
├── file-icons Assign file extension icons and colours for improved visual grepping (305041 downloads, 1561 stars)
├── git-plus Do git things without the terminal (264729 downloads, 861 stars)
├── highlight-line Highlights the current line in the editor (54346 downloads, 423 stars)
├── japan-util utilities for Japanese (858 downloads, 12 stars)
├── open-recent Open recent files in the current window, and recent folders (optionally) in a new window. (11595 downloads, 142 stars)
├── quick-highlight Highlight text quickly. (943 downloads, 11 stars)
├── show-ideographic-space Show ideographic space (known as 全角スペース) (4255 downloads, 57 stars)
├── symbols-tree-view A symbols view like taglist (19099 downloads, 181 stars)
├── tablr Edit CSV files using a table editor (538 downloads, 16 stars)
└── wrap-style Select word warp style. (10 downloads, 2 stars)

Use `apm stars --install` to install them all or visit http://atom.io/packages to read more about them.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに &lt;code&gt;--install&lt;/code&gt; オプションを付ければ一気にインストールできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm stars --install
Installing atom-monokai to C:\Users\username\.atom\packages done
Installing autoclose-html to C:\Users\username\.atom\packages done
Installing editorconfig to C:\Users\username\.atom\packages done
Installing file-icons to C:\Users\username\.atom\packages done
Installing git-plus to C:\Users\username\.atom\packages done
Installing highlight-line to C:\Users\username\.atom\packages done
Installing japan-util to C:\Users\username\.atom\packages done
Installing open-recent to C:\Users\username\.atom\packages done
Installing quick-highlight to C:\Users\username\.atom\packages done
Installing show-ideographic-space to C:\Users\username\.atom\packages done
Installing symbols-tree-view to C:\Users\username\.atom\packages done
Installing tablr to C:\Users\username\.atom\packages done
Installing wrap-style to C:\Users\username\.atom\packages done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで複数マシンへの環境構築が随分楽になると思う。なお star の管理は &lt;code&gt;apm star&lt;/code&gt; または &lt;code&gt;apm unstar&lt;/code&gt; コマンドでできるが，テーマ・パッケージのページでも可能。&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の star が &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; の star のように &lt;a href=&#34;https://flattr.com/&#34;&gt;Flattr&lt;/a&gt; と連動すれば面白いんだけどねぇ。とりあえず flattr ボタンを貼り付ける手もあるけど）&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/115fea37ad2e515f6641&#34;&gt;ATOM の Theme / Package の感想文（2015-06-10） - Qiita&lt;/a&gt;」にテーマ・パッケージの感想を書いている。個人的な印象なんであんまり参考にならないかもだけど，よろしかったらどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;atom-の設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM の設定&lt;/h2&gt;

&lt;h3 id=&#34;proxy-設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Proxy 設定&lt;/h3&gt;

&lt;p&gt;Intranet 上のマシンで外部との接続が阻まれている場合は Proxy 設定を行う。
設定には &lt;code&gt;apm&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm config set https-proxy http://username:password@proxy.exsample.com:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firewall のなかには，セキュリティ上の理由から， SSL/TLS 暗号通信を中間者攻撃&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; でのぞき見するものがある。
このタイプの Firewall/Proxy は SSL/TLS の証明書を書き換えてしまうため， &lt;code&gt;apm&lt;/code&gt; が通信エラーになる。
この場合は以下の設定を行って強制的に SSL/TLS を通すようにするとよいらしい（取扱注意）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;apm config set strict-ssl false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やれやれ。&lt;/p&gt;

&lt;h3 id=&#34;font-family-の選択:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Font Family の選択&lt;/h3&gt;

&lt;p&gt;エディタのフォントは作業効率に大きく影響する。
これは私個人の感覚だが，日本語の地の文章がゴシック体なのは辛い。
いくら綺麗だからといって Meiryo フォントをエディタに使う気にはならない。
ただし，コードに関しては視認性が一番重要。
ということで，フォントの指定は以下で無問題&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Inconsolata&amp;quot;, &amp;quot;MS Mincho&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows では Tree View のフォントが汚いので，ここは素直に Meiryo UI フォントに変える。 &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; を以下のように変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.tree-view {
	font-family: &amp;quot;Meiryo UI&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;atom-workspace {
  font-family: &amp;quot;Meiryo UI&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればタブや Settings 画面のフォントも変えられる。&lt;/p&gt;

&lt;h3 id=&#34;editorconfig:9f5cc37d12d96caee7deea463dce6873&#34;&gt;EditorConfig&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; があればタブや改行コードなどの設定を統一できる。
これは特に複数人で作業する場合に威力を発揮する。
たとえば，このサイトの作業環境では以下のように設定している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;root = true

[*]
end_of_line = lf
charset = utf-8
indent_style = tab
indent_size = 4
trim_trailing_whitespace = true
insert_final_newline = true

[*.html]
insert_final_newline = false

[*.md]
indent_style = space
indent_size = 4
trim_trailing_whitespace = false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; はフォルダを遡って &lt;code&gt;.editorconfig&lt;/code&gt; ファイルを探し，フォルダの上から順番に評価していく。
&lt;code&gt;root = true&lt;/code&gt; の記述がないとどこまでも上の階層に遡っていくので，プロジェクトのトップ・フォルダの &lt;code&gt;.editorconfig&lt;/code&gt; には必ずこれを記述すること。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[*]&lt;/code&gt; は対象となるファイルを指定している。 &lt;code&gt;[*]&lt;/code&gt; なら全てのファイルが対象である。 &lt;code&gt;[*.html]&lt;/code&gt; は拡張子 &lt;code&gt;html&lt;/code&gt; のファイルが対象となる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end_of_line&lt;/code&gt; では改行コードを指定する。 &lt;code&gt;lf&lt;/code&gt;, &lt;code&gt;cr&lt;/code&gt;, &lt;code&gt;crlf&lt;/code&gt; から選択できる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indent_style&lt;/code&gt; はインデント（タブ）のスタイルを指定する。 &lt;code&gt;tab&lt;/code&gt; または &lt;code&gt;space&lt;/code&gt; を指定する。 &lt;code&gt;space&lt;/code&gt; にすると，いわゆる「ソフトタブ」になる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indent_size&lt;/code&gt; はタブの幅を指定する。 &lt;code&gt;indent_style&lt;/code&gt; と &lt;code&gt;indent_size&lt;/code&gt; は常にセットで指定すると間違いがない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trim_trailing_whitespace&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にすると行末の空白文字を削除してくれる。残念なことに &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の場合は，いわゆる「全角空白」を空白文字と見なしてくれない。まぁ全角空白を空白文字と見なす実装のほうが少ないけど。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert_final_newline&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にするとファイルの末尾が改行文字ではない場合に補完してくれる。でもこれって使いどころが難しいのよね。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; は多くのテキスト・エディタや統合開発環境に対応していて，もちろん &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にも対応パッケージがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/editorconfig&#34;&gt;editorconfig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;文字エンコーディングについて残念なお知らせ:9f5cc37d12d96caee7deea463dce6873&#34;&gt;文字エンコーディングについて残念なお知らせ&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;charset&lt;/code&gt; では文字エンコーディングを指定するが，標準では &lt;code&gt;latin1&lt;/code&gt;, &lt;code&gt;utf-8&lt;/code&gt;, &lt;code&gt;utf-8-bom&lt;/code&gt;, &lt;code&gt;utf-16be&lt;/code&gt;, &lt;code&gt;utf-16le&lt;/code&gt; しかサポートしていない。
それ以外の文字エンコーディングは実装依存ということになる。&lt;/p&gt;

&lt;p&gt;しかも &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の場合，ファイルを新規作成する場合にこの設定が効かないようで，たとえば &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 側の “File Encoding” が &lt;code&gt;shiftjis&lt;/code&gt; で  &lt;code&gt;.editorconfig&lt;/code&gt; ファイル側が &lt;code&gt;charset = utf-8&lt;/code&gt; の場合，新規作成ファイルは &lt;code&gt;shiftjis&lt;/code&gt; にセットされ，そのまま保存される。
しかも次にそのファイルを開く場合は（&lt;code&gt;.editorconfig&lt;/code&gt; ファイル側の設定が効いてしまうので） &lt;code&gt;utf8&lt;/code&gt; で開いてしまい，結果派手に文字化けする（&lt;code&gt;ctrl-shift-U&lt;/code&gt; で文字エンコーディングを変更すれば元に戻るけど）。&lt;/p&gt;

&lt;p&gt;新規作成時の初期の文字エンコーディングは今のところどうしようもないが，プロジェクトごとに “File Encoding” を変更して対応するか，新規作成ファイルが開いた直後に &lt;code&gt;ctrl-shift-U&lt;/code&gt; で文字エンコーディングを変更することで何とかなるだろう（ダサいけど）。&lt;/p&gt;

&lt;h4 id=&#34;ファイル読み込み時に文字エンコーディングを自動判別する:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ファイル読み込み時に文字エンコーディングを自動判別する&lt;/h4&gt;

&lt;p&gt;もうひとつの緩和策としては，既存ファイル読み込み時に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に文字エンコードを自動判別させることだ。ただし，この機能を持つ Package は今のところ存在しないようなので自前で何とかするしかない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tokudiro/items/bc232c7d36261dc45936&#34;&gt;ATOM でファイルを開いたら自動文字コード判定を行う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この設定を行うには node.js のフルパッケージが必要。&lt;/p&gt;

&lt;p&gt;（Linux や Mac な人は依存関係で node.js がインストールされると思うけど， Windows では &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; インストール時に一部機能が同梱されているだけなので（しかもバージョンが古い），フル機能を使うには別途インストールする必要あり）&lt;/p&gt;

&lt;p&gt;Windows の場合は &lt;code&gt;%USERPROFILE%\.atom&lt;/code&gt; フォルダに移動する。その後， &lt;code&gt;npm&lt;/code&gt; コマンドを使って &lt;code&gt;iconv-lite&lt;/code&gt; と &lt;code&gt;jschardet&lt;/code&gt; をインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;cd C:\Users\username\.atom
C:\Users\username\.atom&amp;gt;npm install iconv-lite
iconv-lite@0.4.10 node_modules\iconv-lite

C:\Users\username\.atom&amp;gt;npm install jschardet
jschardet@1.1.1 node_modules\jschardet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると &lt;code&gt;%USERPROFILE%\.atom\node_modules&lt;/code&gt; フォルダが作成され，その中に &lt;code&gt;iconv-lite&lt;/code&gt; と &lt;code&gt;jschardet&lt;/code&gt; がインストールされているはずである。&lt;/p&gt;

&lt;p&gt;次は &lt;code&gt;%USERPROFILE%\.atom\init.coffee&lt;/code&gt; ファイルに以下の記述を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;fs = require(&#39;fs&#39;)

atom.workspace.onDidOpen -&amp;gt;
  editor = atom.workspace.getActiveTextEditor()

  try
    filePath = editor.getPath()
  catch error
    return
  return unless fs.existsSync(filePath)

  jschardet = require &#39;jschardet&#39;
  iconv = require &#39;iconv-lite&#39;
  fs.readFile filePath, (error, buffer) =&amp;gt;
    return if error?
    {encoding} = jschardet.detect(buffer) ? {}
    encoding = &#39;utf8&#39; if encoding is &#39;ascii&#39;
    return unless iconv.encodingExists(encoding)

    encoding = encoding.toLowerCase().replace(/[^0-9a-z]|:\d{4}$/g, &#39;&#39;)
    editor.setEncoding(encoding)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/tokudiro/items/bc232c7d36261dc45936&#34;&gt;ATOM でファイルを開いたら自動文字コード判定を行う&lt;/a&gt;」によると，これは &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; からの流用らしい。ただし現在， &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; は Core Package に入ってるので atom フォルダをひっくり返してもソースコードは見当たらない。ので，GitHub repository &lt;a href=&#34;https://github.com/atom/encoding-selector&#34;&gt;atom/encoding-selector&lt;/a&gt; にある &lt;a href=&#34;https://github.com/atom/encoding-selector/blob/master/lib/encoding-list-view.coffee&#34;&gt;lib/encoding-list-view.coffee&lt;/a&gt; を参考にするといいだろう。 &lt;code&gt;detectEncoding:&lt;/code&gt; のあたりである。&lt;/p&gt;

&lt;p&gt;これで &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を起動して既定の文字エンコーディングでない適当なファイルを読み込ませてみれば確認できる。ただし，自動判別は万能じゃない（たまに間違う）ので，その辺は悪しからずってことで。&lt;/p&gt;

&lt;p&gt;一番いいのは &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; がファイル読み込み時に自動判別する機能を付けてくれることなんだけど。誰かやらないかな。個人的には &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 開発に積極的に commit する気はないので，完全に他人任せなのだが。&lt;/p&gt;

&lt;h3 id=&#34;git-関連機能:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Git 関連機能&lt;/h3&gt;

&lt;p&gt;GitHub が作ったという割には git 機能が貧弱なのは何故なのだろう。特に &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; 相当の機能が Core パッケージに入ってないのは解せぬ。というわけでインストールした。公開してくださった方に感謝。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; は主にコマンドパレットで操作するが（メニューの「Packages」からも辿れる），コマンドパレットの呼び出しを f1 キーに割り当てたらだいぶ使いやすくなった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/git-control&#34;&gt;git-control&lt;/a&gt; は GUI で最初の頃は便利だったのだが， &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; が手に馴染んできたら使わなくなった。
submodule の処理が得意ではないっぽいのもマイナス。&lt;/p&gt;

&lt;h3 id=&#34;矩形選択:9f5cc37d12d96caee7deea463dce6873&#34;&gt;矩形選択&lt;/h3&gt;

&lt;p&gt;矩形選択用に &lt;code&gt;%USERPROFILE%\.atom\keymap.cson&lt;/code&gt; ファイルに対して以下のキー設定を行った&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;body&#39;:
  &#39;alt-shift-down&#39;: &#39;editor:add-selection-below&#39;
  &#39;alt-shift-left&#39;: &#39;core:select-left&#39;
  &#39;alt-shift-right&#39;: &#39;core:select-right&#39;
  &#39;alt-shift-up&#39;: &#39;editor:add-selection-above&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Alt+Shift キーを押しながらカーソルを上下左右に動かせば矩形選択ができる。実はこれらの操作のキー割り当ては元々こうなっている。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Keybind&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;コマンド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ctrl-alt-down&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;editor:add-selection-below&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ctrl-alt-up&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;editor:add-selection-above&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-left&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;core:select-left&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-right&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;core:select-right&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ただし，うちのパソコンでは Ctrl+Alt キーを押しながらカーソルを動かすと（Windows がキーを横取りして）ディスプレイの向きが変わってしまうので，かなり切ないことになってしまう。&lt;/p&gt;

&lt;p&gt;実際には &lt;code&gt;editor:add-selection-below&lt;/code&gt; および &lt;code&gt;editor:add-selection-above&lt;/code&gt; はマルチカーソル・モードのコマンドである。マルチカーソル・モードは癖がある感じだが慣れれば結構使えるかも。&lt;/p&gt;

&lt;p&gt;キーボード操作ではなく，マウス操作で矩形選択がしたい場合は &lt;a href=&#34;https://atom.io/packages/Sublime-Style-Column-Selection&#34;&gt;sublime-style-column-selection&lt;/a&gt; を導入するとよい。 Windows ではマウスのセンターボタンを押しながらマウスを動かす。&lt;/p&gt;

&lt;p&gt;いずれのやり方でも，日本語混じりのテキストではうまくいかない。
やれやれ。&lt;/p&gt;

&lt;h3 id=&#34;その他:9f5cc37d12d96caee7deea463dce6873&#34;&gt;その他&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;自動保存を行う Core パッケージ &lt;a href=&#34;https://atom.io/packages/autosave&#34;&gt;autosave&lt;/a&gt; は既定で無効になってる。私は &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; で commit する前に保存するのをどうしても忘れるので，これを有効にしておくと吉。ただし &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; で，自動保存により勝手に commit が走るので注意。&lt;/li&gt;
&lt;li&gt;Core パッケージ &lt;a href=&#34;https://atom.io/packages/tabs&#34;&gt;tabs&lt;/a&gt; の設定で “Enable VCS Coloring” を有効にするとタブに表示されているファイル名が色分けされて表示される。&lt;/li&gt;
&lt;li&gt;Core パッケージ &lt;a href=&#34;https://atom.io/packages/git-diff&#34;&gt;git-diff&lt;/a&gt; の設定で “Show Icons In Editor Gutter” を有効にすると差分情報がちょっとだけ見やすくなる。&lt;/li&gt;
&lt;li&gt;インデントをそろえるために &lt;a href=&#34;https://atom.io/packages/highlight-column&#34;&gt;highlight-column&lt;/a&gt; を紹介しているページを見かけたけど，インデントをそろえる目的なら，標準の Settings で “Show Indent Guide” にチェックを入れておく方が吉。&lt;/li&gt;
&lt;li&gt;秀丸では大変重宝したアウトライン解析。&lt;a href=&#34;https://atom.io/packages/symbols-tree-view&#34;&gt;symbols-tree-view&lt;/a&gt; があればアウトライン解析を行って右側のサイドバーに表示する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/japan-util&#34;&gt;japan-util&lt;/a&gt; : 全角・半角変換機能。英数字を全角で書いたり仮名文字を半角で書いたりするバカがいるので，意外と使うのよ，これ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/highlight-line&#34;&gt;highlight-line&lt;/a&gt; でカーソル行をハイライトにしたり下線を引いたりできる。色のカスタマイズは &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; ファイルで行う。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/open-recent&#34;&gt;open-recent&lt;/a&gt; は最近開いたファイルやフォルダを覚えておいてくれる便利なやつ。てか，なぜこれが標準で搭載されてないのだ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/show-ideographic-space&#34;&gt;show-ideographic-space&lt;/a&gt; : いわゆる「全角空白」を視覚化してくれる。見せ方は &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; ファイルでカスタマイズ可能。実際には IME のプロパティでスペース・キー押下で常に「半角空白」を入力するように設定すればほとんど防げるんだどね（全角空白を入力する場合は &lt;code&gt;shift-space&lt;/code&gt; 押下）。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/autoclose-html&#34;&gt;autoclose-html&lt;/a&gt; : HTML 入力でタグを入力すると自動的に閉じタグを補完してくれる。自動補完の機能は色々あって，大抵は &lt;a href=&#34;https://atom.io/packages/autocomplete-plus&#34;&gt;autocomplete-plus&lt;/a&gt; のサブパッケージだったりするのだが，これだけは毛色が違う（笑）&lt;/li&gt;
&lt;li&gt;特定の単語をマークしておける &lt;a href=&#34;https://atom.io/packages/quick-highlight&#34;&gt;quick-highlight&lt;/a&gt; が結構使える。 Windows だとキーに割り当てられないので、 toggle を適当なファンクションキーとかに割り当てておくとめっさ便利。&lt;/li&gt;
&lt;li&gt;むむっ。 &lt;a href=&#34;https://atom.io/packages/latex&#34;&gt;latex&lt;/a&gt; パッケージなるものがあるなぁ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/tablr&#34;&gt;tablr&lt;/a&gt; : CSV Editor。なにこれ素敵！&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;現在の設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;現在の設定&lt;/h3&gt;

&lt;p&gt;現在の設定は &lt;a href=&#34;https://gist.github.com/spiegel-im-spiegel/e6e9c7340987f1607b2c&#34;&gt;Gist に貼り付け&lt;/a&gt;ている。
よろしかったら参考にどうぞ。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/spiegel-im-spiegel/e6e9c7340987f1607b2c.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;ブックマーク:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に関するブックマークは &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/3d41d98dacc107d73431&#34;&gt;Qiita でメンテナンス&lt;/a&gt;している。
こちらも併せてどうぞ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;Deep Packet Inspection とか言うらしいけど，どう見たって Man-in-the-Middle Attack だろ（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9f5cc37d12d96caee7deea463dce6873:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;日本語フォントの指定が MS 明朝なのは，どんな日本語 Windows 環境でも MS 明朝は必ず入ってるからという理由だけなので，自分の感覚で見易いフォントがあればそちらを使うべき。ちなみに IPA 明朝は線が細すぎて不向きだった。 &lt;a href=&#34;http://www.levien.com/type/myfonts/inconsolata.html&#34; title=&#34;Inconsolata&#34;&gt;Inconsolata&lt;/a&gt; は OpenType フォントを取ってきて「インストール」してしまえばよい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9f5cc37d12d96caee7deea463dce6873:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
