<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Character - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/character/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/character/index.xml" />
	<id>tag:text.Baldanders.info,2015-09-19T23:45:56+0900:/</id>
	<updated>2015-09-19T23:45:56+0900</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」 （プレ・オープン中）</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>String と Rune - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/string-and-rune/" />
		<id>tag:text.Baldanders.info,2015-09-19T23:45:56+0900:/golang/string-and-rune/</id>
		<published>2015-09-19T23:45:56+0900</published>
		<updated>2015-09-21T09:21:00+0900</updated>
		<summary>今回は文字列について。短めにさくっと。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/556166b6631c0369754f&#34;&gt;はじめての Go 言語 (on Windows) その4 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;文字列を示す &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; は不変（immutable）なオブジェクトだが，中身は byte 配列である。
したがって以下のように&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;
	size := len(nihongo)

	fmt.Printf(&amp;quot;nihongo = %d bytes :&amp;quot;, size)
	for i := 0; i &amp;lt; size; i++ {
		fmt.Printf(&amp;quot; %x&amp;quot;, nihongo[i])
	}
	fmt.Print(&amp;quot;\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; をダンプすると以下の結果になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string01.go
nihongo = 9 bytes : e6 97 a5 e6 9c ac e8 aa 9e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; なんて名前なのに）文字単位で情報を保持しているわけではないため，最初の2文字を取り出すつもりでうっかり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	fmt.Printf(&amp;quot;nihongo = %s\n&amp;quot;, nihongo)
	fmt.Printf(&amp;quot;nippon = %s\n&amp;quot;, nihongo[:2])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんてなコードを書くと以下の結果になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string02.go
nihongo = 日本語
nippon = ��
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文字列を文字単位で扱うには &lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; を使う。
いや，ルーンってどんだけ厨二&amp;hellip; ゲフンゲフン。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;
	nihongoRune := []rune(nihongo)
	size := len(nihongoRune)

	fmt.Printf(&amp;quot;nihongo = %d characters : &amp;quot;, size)
	for i := 0; i &amp;lt; size; i++ {
		fmt.Printf(&amp;quot;%#U &amp;quot;, nihongoRune[i])
	}
	fmt.Printf(&amp;quot;\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run string03.go
nihongo = 3 characters : U+65E5 &#39;日&#39; U+672C &#39;本&#39; U+8A9E &#39;語&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または， &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; に対して &lt;a href=&#34;http://golang.org/ref/spec#For_statements&#34;&gt;for range 構文&lt;/a&gt;を使ってループを回すと文字（&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt;）単位で取得できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	for pos, runeValue := range nihongo {
		fmt.Printf(&amp;quot;%#U starts at byte position %d\n&amp;quot;, runeValue, pos)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run string03b.go
U+65E5 &#39;日&#39; starts at byte position 0
U+672C &#39;本&#39; starts at byte position 3
U+8A9E &#39;語&#39; starts at byte position 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; の実体は int32 で，内部表現は Unicode になっている。
&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; と &lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; 配列は相互変換できるので，文字列を切り取る場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	fmt.Printf(&amp;quot;nihongo = %s\n&amp;quot;, nihongo)
	fmt.Printf(&amp;quot;nippon = %s\n&amp;quot;, string([]rune(nihongo)[:2]))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; → []&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; → &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; と変換していけば安全に処理できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string02b.go
nihongo = 日本語
nippon = 日本
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もう少し細かい処理が必要なら &lt;a href=&#34;http://golang.org/pkg/unicode/utf8/&#34;&gt;&lt;code&gt;unicode/utf8&lt;/code&gt;&lt;/a&gt; パッケージを使う手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:22aba2fd29e0e069728fb8201971f262&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/strings&#34;&gt;Strings, bytes, runes and characters in Go - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://knightso.hateblo.jp/entry/2014/06/24/090719&#34;&gt;Go言語のstring, runeの正体とは？ - golang - The Round&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hokaccha/items/3d3f45b5927b4584dbac&#34;&gt;golang - Goでマルチバイトが混在した文字列をtruncateする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uchiko/items/1810ddacd23fd4d3c934&#34;&gt;golang - Go言語で文字コード変換 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で取り扱う文字列の文字エンコーディングは UTF-8 が既定である。他の文字エンコーディングで書かれた文字列を扱うには，一度 UTF-8 に変換する処理が必要になる。文字エンコーディングの変換については別の記事で改めて紹介する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;ちなみに &lt;a href=&#34;http://golang.org/pkg/strings/&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt; パッケージは内部で &lt;a href=&#34;http://golang.org/pkg/unicode/utf8/&#34;&gt;&lt;code&gt;unicode/utf8&lt;/code&gt;&lt;/a&gt; パッケージを使っているようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:22aba2fd29e0e069728fb8201971f262:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
