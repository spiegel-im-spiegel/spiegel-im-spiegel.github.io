<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of web - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/web/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/web/index.xml" />
	<id>tag:text.Baldanders.info,2022-08-22:/tags</id>
	<updated>2022-08-22T21:32:27+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>SNS を巡る愛憎</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/08/facebook/" />
		<id>tag:text.Baldanders.info,2022-08-22:/remark/2022/08/facebook/</id>
		<published>2022-08-22T12:32:27+00:00</published>
		<updated>2022-08-22T22:44:16+00:00</updated>
		<summary>いやぁ，インターネットは人類社会そのものだね♥</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;歳をとると長文がしんどくてねぇ（笑）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2022/08/82994/&#34;&gt;ソーシャルネットワークの黄昏、Web 2.0の振り返り、そして壊れたテック／コンテンツ文化のサイクル – WirelessWire News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面白かった！ ので，便乗記事を書いてみようと思ったり。&lt;/p&gt;
&lt;p&gt;最初に予防線を張っておくと，私にとって Web 2.0 を象徴するサービスは Facebook でも Twitter でも YouTube でもなくて Flickr なのよ。
緩いソーシャル・グラフ， &lt;a href=&#34;https://creativecommons.org/licenses/&#34;&gt;CC-Licenses&lt;/a&gt; の導入によるコンテンツ共有&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，プロ（有料）アカウントによるマネタイズ，等々。
最後は Yahoo! に買収されて見事ゴールイン！ の筈だった。
しかし，その後の Yahoo! の凋落に巻き込まれる形で運営が停滞，あとから来た Instagram 等に追い抜かれ，沈む船から&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/goodbye-yahoo/&#34;&gt;既のところで逃げ切り&lt;/a&gt;今に至る。
間違いなくBGMはあの曲だろう（笑）&lt;/p&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B097VRFQ69?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/61jL5zLXoVS._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B097VRFQ69?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ああ人生に涙あり&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;巴（CV.佐倉綾音）、澪（CV：鬼頭明里） (メインアーティスト)&lt;/dd&gt;
    &lt;dd&gt;ミリカ・ミュージック 2021-07-29 (Release 2021-07-29)&lt;/dd&gt;
    &lt;dd&gt;MP3 ダウンロード&lt;/dd&gt;
    &lt;dd&gt;B097VRFQ69 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;アニメ「月が導く異世界道中」のED曲。これが流れたときはコケそうになった。まぁ，でも，作品にはお似合いの曲（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-08-22&#34;&gt;2022-08-22&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ああ人生に涙あり --&gt;
&lt;p&gt;私がゼロ年代の SNS として真っ先に思い出すのは Facebook じゃなくて国産（笑）の mixi なんだよね。
いや Facebook のアカウントは割と早くから取ってたんだけど，何していいか分からなくて長いこと放置してたんだよな。
10年以上前に書いた映画「&lt;a href=&#34;https://www.amazon.co.jp/dp/B00FW5SMX0?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ソーシャル・ネットワーク&lt;/a&gt;」の感想でもちょろんと書いたけど&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
mixi は Yahoo! Japan に似て「見えるものがすべて」だが， Facebook では面白さはあらかじめ隠されている。 言い方を変えれば， mixi は見え過ぎてウザいが Facebook は何もなくて何をしていいか分からない，ということになる
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://baldanders.info/blog/000509/&#34;&gt;「ソーシャル・ネットワーク」と Facebook&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;だったんだよ。&lt;/p&gt;
&lt;p&gt;先に紹介した「&lt;a href=&#34;https://wirelesswire.jp/2022/08/82994/&#34;&gt;ソーシャルネットワークの黄昏、Web 2.0の振り返り、そして壊れたテック／コンテンツ文化のサイクル&lt;/a&gt;」にも書かれている通り「Facebookはその歴史の中で、競合他社の機能を何度も露骨に取り入れてきました」のだが，ターニング・ポイントとなったのは Twitter のタイムライン機能をパクった辺りだろう。&lt;/p&gt;
&lt;p&gt;タイムライン機能をパクった Facebook が何をしたかと言うとユーザに広告を出稿させたのだ。
映画「&lt;a href=&#34;https://www.amazon.co.jp/dp/B00FW5SMX0?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ソーシャル・ネットワーク&lt;/a&gt;」ではザッカーバーグ君に「広告はクールじゃない」とか何とか言わせてた気がするが，実際には（自分たちが広告スポンサーを探すのではなく）ユーザを広告主に仕立て上げたわけだ。&lt;/p&gt;
&lt;p&gt;これで「為政者 Facebook」「税金（＝広告料）を払う一級市民（＝広告主）」「タダ乗り二級市民」という構造ができた。
二級市民は税金の代わりに自ら（の情報）を搾取され「商材」にされる。
いやぁ，インターネットは人類社会そのものだね♥&lt;/p&gt;
&lt;p&gt;面白いことにパクられた Twitter もこのシステムを真似し始めた。
「&lt;a href=&#34;https://www.amazon.co.jp/dp/B093KFTV53?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;監視資本主義&lt;/a&gt;」が台頭する時代がやってきたのだ。
「監視」とはすなわち情報力を背景にした支配構造に他ならない。&lt;/p&gt;
&lt;p&gt;私は「&lt;a href=&#34;https://www.amazon.co.jp/dp/B00FW5SMX0?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ソーシャル・ネットワーク&lt;/a&gt;」の感想を書いたのと同じ年に『&lt;a href=&#34;https://www.amazon.co.jp/dp/B00XMCH1DW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ウェブ×ソーシャル×アメリカ&lt;/a&gt;』の感想文も書いているが&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
「神話」というのは，その時の為政者が自身の権威を担保するものとして語らせた縁起物語だ。インターネットに特定の支配者はいないが，この本はインターネットのこれまでを「神話時代」と位置づけ，今を神話時代の終わりと位置づけることで何らかのピリオドを打とうとしてるんじゃないかと邪推したりする
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://baldanders.info/blog/000535/&#34;&gt;インターネット縁起書としての『ウェブ×ソーシャル×アメリカ』&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ゼロ年代の Web 2.0 を素朴な「神話時代」とするなら Facebook や Twitter 等が作り上げた身分階級制度はインターネットがようやく中世辺りにまで達した証だろうか。
そうなると，過激な FinTech で&lt;a href=&#34;https://text.baldanders.info/remark/2022/07/blockchain/&#34; title=&#34;Blockchain/Bitcoin は何だったのか&#34;&gt;市場支配を目論む噂の Web3&lt;/a&gt; は近世か前期近代あたりになれるかな（笑）&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00FW5SSCK?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/515aVCPebQL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B00FW5SSCK?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ソーシャル・ネットワーク (字幕版)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ジェシー・アイゼンバーグ (出演), アンドリュー・ガーフィールド (出演), ジャスティン・ティンバーレイク (出演), アーミー・ハマー (出演), マックス・ミンゲラ (出演), David Fincher (監督), Scott Rudin (プロデュース), Dana Brunetti (プロデュース), Michael De Luca (プロデュース), Cean Chaffin (プロデュース)&lt;/dd&gt;
    &lt;dd&gt; (Release 2013-11-26)&lt;/dd&gt;
    &lt;dd&gt;Prime Video&lt;/dd&gt;
    &lt;dd&gt;B00FW5SSCK (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;この映画が公開された当時（2011年）は日本でも Facebook が一般（特に年配層）に浸透し始めていたときで，スクリーン上の狂騒に苦笑したものだが，その Facebook が広告まみれの駄システムに堕ちてしまうとは誰も思わなかっただろうな（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-04-14&#34;&gt;2019-04-14&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ソーシャル・ネットワーク --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B093KFTV53?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/512tneLgY8S._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B093KFTV53?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;監視資本主義―人類の未来を賭けた闘い&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ショシャナ・ズボフ (著), 野中 香方子 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;東洋経済新報社 2021-06-25 (Release 2021-06-25)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B093KFTV53 (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;夏休みの課題図書として買ったが，全く読めてない orz&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-08-08&#34;&gt;2021-08-08&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 監視資本主義 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00XMCH1DW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51hgk4TG0bL._SL160_.jpg&#34; width=&#34;97&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B00XMCH1DW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ウェブ×ソーシャル×アメリカ　〈全球時代〉の構想力 (講談社現代新書)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;池田純一 (著)&lt;/dd&gt;
    &lt;dd&gt;講談社 2011-03-20 (Release 2015-05-22)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00XMCH1DW (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Kindle 版が出てた。感想文は&lt;a href=&#34;https://baldanders.info/blog/000535/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2011-08-20&#34;&gt;2011-08-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ウェブ×ソーシャル×アメリカ --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B073PT6WDB?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51QXKZr5n3L._SL160_.jpg&#34; width=&#34;115&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B073PT6WDB?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;秘密結社の世界史　フリーメーソンからトランプまで、その謎と陰謀 (朝日文庫)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;海野　弘 (著)&lt;/dd&gt;
    &lt;dd&gt;朝日新聞出版 2017-06-07 (Release 2017-07-07)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B073PT6WDB (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;文庫本版がでてたのか。古代から現代にかけての「結社」の系譜を俯瞰的に解説している。読み物として面白かった。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-04-14&#34;&gt;2019-04-14&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 秘密結社の世界史 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0964KPJ24?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51I2OV7TBYS._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0964KPJ24?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;エルの唄～メリナ Full ver.～&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;村川梨衣 (メインアーティスト)&lt;/dd&gt;
    &lt;dd&gt;WFRecords 2021-06-23 (Release 2021-06-23)&lt;/dd&gt;
    &lt;dd&gt;MP3 ダウンロード&lt;/dd&gt;
    &lt;dd&gt;B0964KPJ24 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;ゲーム「アナザーエデン」の挿入歌。「アナザーエデン」の中でも好きなエピソード。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-08-22&#34;&gt;2022-08-22&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- エルの唄 --&gt;
&lt;!-- eof --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Flickr は &lt;a href=&#34;https://mag.osdn.jp/03/09/29/0955208&#34; title=&#34;クリエイティヴ・コモンズに関する悲観的な見解 | OSDN Magazine&#34;&gt;CC-Licenses のブートストラップ問題&lt;/a&gt;を払拭した功労者のひとつ，と私は思っている。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>名誉毀損とリンク</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/08/defamation-and-hyperlinks/" />
		<id>tag:text.Baldanders.info,2022-08-20:/remark/2022/08/defamation-and-hyperlinks/</id>
		<published>2022-08-20T02:43:10+00:00</published>
		<updated>2022-08-20T03:36:44+00:00</updated>
		<summary>リンクは単なる道具・手段</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;オーストラリアの話であるが Google の検索結果およびそのリンクによって名誉毀損を受けたとして裁判になっていたそうで，先日その判決結果が出たらしい。&lt;/p&gt;
&lt;p&gt;発端はこんな感じ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;The &lt;a href=&#34;https://www.hcourt.gov.au/cases/case_m86-2021&#34;&gt;case&lt;/a&gt; relates to a Google search result that linked to a 2004 article published by The Age with the title, &amp;ldquo;Underworld loses valued friend at court.&amp;rdquo; The article described Melbourne-based lawyer George Defteros, who was charged with conspiracy to murder and incitement to murder the day before it was published. The charge was withdrawn in 2005.&lt;/p&gt;
&lt;p&gt;Defteros sued Google after becoming aware that a Google search of his name produced a link to the article and a snippet. Google refused to remove the article from search results despite a request from Defteros in 2016.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/tech-policy/2022/08/linking-to-news-doesnt-make-google-liable-for-defamation-australia-court-rules/&#34;&gt;Linking to news doesn’t make Google liable for defamation, Australia court rules | Ars Technica&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これに対して下級裁判所は&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Lower courts decided that Google &amp;ldquo;published the defamatory matter because the provision of the Search Result was instrumental to the communication of the content of the Underworld article to the user, in that it lent assistance to its publication,&amp;rdquo; &lt;a href=&#34;https://cdn.hcourt.gov.au/assets/publications/judgment-summaries/2022/hca-27-2022-08-17.pdf&#34;&gt;according to a summary of today&amp;rsquo;s ruling&lt;/a&gt; provided by the High Court of Australia.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/tech-policy/2022/08/linking-to-news-doesnt-make-google-liable-for-defamation-australia-court-rules/&#34;&gt;Linking to news doesn’t make Google liable for defamation, Australia court rules | Ars Technica&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;として Google 側に賠償金の支払いを命じた。
その後 (当然ながら) Google は上告したようで，最終的に&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Google cannot be held liable for defamation simply for providing hyperlinks to other webpages, Australia&amp;rsquo;s highest court &lt;a href=&#34;https://eresources.hcourt.gov.au/downloadPdf/2022/HCA/27&#34;&gt;ruled today&lt;/a&gt;. By itself, providing a URL is not &amp;ldquo;participation in the communication of defamatory matter which happens to be at that address&amp;hellip; In reality, &lt;strong&gt;a hyperlink is merely a tool which enables a person to navigate to another webpage&lt;/strong&gt;,&amp;rdquo; the High Court of Australia ruling said.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/tech-policy/2022/08/linking-to-news-doesnt-make-google-liable-for-defamation-australia-court-rules/&#34;&gt;Linking to news doesn’t make Google liable for defamation, Australia court rules | Ars Technica&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;という結果になったそうな。
ちなみに強調は私がやりました。&lt;/p&gt;
&lt;p&gt;まぁ，当たり前っちゃあ当たり前なんだけど&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;Today&amp;rsquo;s ruling could have been different if Google had been paid to promote The Age article. The appeal &amp;ldquo;does not present the occasion to consider whether the conclusion would be different in respect of those hyperlinks that, by agreement with a third party, are promoted by the appellant following a search request,&amp;rdquo; the ruling said.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://arstechnica.com/tech-policy/2022/08/linking-to-news-doesnt-make-google-liable-for-defamation-australia-court-rules/&#34;&gt;Linking to news doesn’t make Google liable for defamation, Australia court rules | Ars Technica&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とあるようにリンクそのものではなく，リンクを含むコンテンツの文脈とかその背後にある利害関係が重要かな，と思ったりする。
たとえば6年前に「&lt;a href=&#34;https://p2ptk.org/copyright/553&#34; title=&#34;欧州司法裁、侵害コンテンツへのリンクを著作権侵害と判断 | p2ptk[.]org&#34;&gt;欧州司法裁、侵害コンテンツへのリンクを著作権侵害と判断&lt;/a&gt;」という話があったが，この前提のもとに改めて記事を見直せば「なるほど」と思うかもしれない。&lt;/p&gt;
&lt;p&gt;「リンク」という言葉だけを抜き出してシロかクロか論じることに意味はない，ということだろう。
願わくば日本のマスメディアもこうした視点で報道していただきたいものである。&lt;/p&gt;
</content>
	</entry><entry>
		<title>Google Fonts から Bunny Fonts に乗り換える</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/06/migrate-to-bunny-fonts-from-google-fonts/" />
		<id>tag:text.Baldanders.info,2022-06-25:/remark/2022/06/migrate-to-bunny-fonts-from-google-fonts/</id>
		<published>2022-06-25T05:57:34+00:00</published>
		<updated>2022-06-25T05:58:12+00:00</updated>
		<summary>というわけで，うちのサイトは Bunny Fonts で統一することにした。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;EU 圏に &lt;a href=&#34;https://fonts.bunny.net/&#34; title=&#34;Bunny Fonts | Explore Faster &amp;amp; GDPR friendly Fonts&#34;&gt;Bunny Fonts&lt;/a&gt; という Web フォントの CDN サービスがあるそうな。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fonts.bunny.net/&#34; title=&#34;Bunny Fonts | Explore Faster &amp;amp; GDPR friendly Fonts&#34;&gt;Bunny Fonts | Explore Faster &amp;amp; GDPR friendly Fonts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;With a zero-tracking and no-logging policy, Bunny Fonts helps you stay fully GDPR compliant and puts your user&amp;rsquo;s personal data into their own hands. Additionally, you can enjoy lightning-fast load times thanks to bunny.net&amp;rsquo;s global CDN network to help improve SEO and deliver a better user experience.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://fonts.bunny.net/about&#34;&gt;About Bunny Fonts | Faster &amp;amp; GDPR friendly Fonts&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;素晴らしい！ 早速試してみることにした。
まずは日本語混じりサンプルテキストを用意して NOTO Serif JP フォントを探してみる。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://fonts.bunny.net/&#34;&gt;&lt;img src=&#34;./searching.png&#34; srcset=&#34;./searching.png 661w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Bunny Fonts&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://fonts.bunny.net/&#34;&gt;Bunny Fonts&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;おー，あるやないかい！&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://fonts.bunny.net/&#34;&gt;&lt;img src=&#34;./found.png&#34; srcset=&#34;./found.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Bunny Fonts&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://fonts.bunny.net/&#34;&gt;Bunny Fonts&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;詳細を眺めてみると&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://fonts.bunny.net/&#34;&gt;&lt;img src=&#34;./detail.png&#34; srcset=&#34;./detail.png 756w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Bunny Fonts&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://fonts.bunny.net/&#34;&gt;Bunny Fonts&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;という感じに複数のウェイトが用意されているのが分かる。
画面右側の &lt;code&gt;[Add variant]&lt;/code&gt; ボタン押下でインポートするフォント・ウェイトを選択する。&lt;/p&gt;
&lt;p&gt;ちなみに目安としては&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ウェイト&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;ExtraLight&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;Light&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;Regular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;Medium&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;SemiBold&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;Bold&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;Black&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;といった感じ。
通常の文章であれば 400 と 700 があれば十分だろう。&lt;/p&gt;
&lt;p&gt;NOTO Sans JP フォントでも同様にフォント・ウェイトを選択する。&lt;/p&gt;
&lt;p&gt;画面右上の &lt;code&gt;[Fonts+]&lt;/code&gt; ボタンを押下すると&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://fonts.bunny.net/&#34;&gt;&lt;img src=&#34;./selected.png&#34; srcset=&#34;./selected.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Bunny Fonts&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://fonts.bunny.net/&#34;&gt;Bunny Fonts&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;という感じに選択したフォント・ウェイトが一覧表示される。
上部の&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fonts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;bunny&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;css&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;family&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;noto-sans-jp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;700&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;noto-serif-jp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;700&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のコードを CSS ファイルのどこかに書いておけば Web フォントの情報がインポートされる。
また &lt;code&gt;[Switch to HTML]&lt;/code&gt; ボタン押下で&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://fonts.bunny.net/css?family=noto-sans-jp:400,700|noto-serif-jp:400,700&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と HTML の &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 要素の表現に切り替わるので，これを HTML ファイルの &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; に組み込んでもよい。&lt;/p&gt;
&lt;p&gt;この URL の中身を覗いてみると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* japanese */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;font-face&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Noto Serif JP&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;font-style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;normal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;font-weight&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fonts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;bunny&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;noto-serif-jp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;noto-serif-jp-japanese-400-normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;woff2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;woff2&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fonts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;bunny&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;noto-serif-jp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;noto-serif-jp-japanese-400-normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;woff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;woff&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;/* latin */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;font-face&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Noto Serif JP&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;font-style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;normal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;font-weight&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fonts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;bunny&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;noto-serif-jp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;noto-serif-jp-latin-400-normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;woff2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;woff2&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fonts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;bunny&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;net&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;noto-serif-jp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;noto-serif-jp-latin-400-normal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;woff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;woff&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じになっている。
どうやら Google Fonts のようにファイル分割はされないようだ。
しかも &lt;code&gt;font-display&lt;/code&gt; プロパティも設定されないので日本語フォントのようにグリフ数が多いものはちょっと不利かも知れない。&lt;/p&gt;
&lt;p&gt;まぁ，ちょっとでも (個人の&lt;a href=&#34;https://text.baldanders.info/remark/2018/04/handling-privacy/&#34; title=&#34;誰がプライバシーを支配するのか&#34;&gt;プライバシーに敵対的&lt;/a&gt;な) Google 依存を減らしたいのであれば &lt;a href=&#34;https://fonts.bunny.net/&#34; title=&#34;Bunny Fonts | Explore Faster &amp;amp; GDPR friendly Fonts&#34;&gt;Bunny Fonts&lt;/a&gt; は悪くない選択肢だと思う。
というわけで，うちのサイトは &lt;a href=&#34;https://fonts.bunny.net/&#34; title=&#34;Bunny Fonts | Explore Faster &amp;amp; GDPR friendly Fonts&#34;&gt;Bunny Fonts&lt;/a&gt; で統一することにした。
でも，まだ，フォントに関しては Font Awesome への依存があるので完全に追跡を振り切ってるわけでもないんだけどね。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20220622-bunny-fonts/&#34;&gt;トラッキングなし＆ログ取得なしで1400種類超のウェブフォントを無料で利用可能な「Bunny Fonts」 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/12/japanese-fonts-by-google-cdn/&#34;&gt;Google Fonts が日本語に対応してた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>TechCrunch Japan 終了後の後始末</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/05/garbage-collection/" />
		<id>tag:text.Baldanders.info,2022-05-04:/remark/2022/05/garbage-collection/</id>
		<published>2022-05-04T07:03:59+00:00</published>
		<updated>2022-05-04T07:04:24+00:00</updated>
		<summary>翻訳記事 URL を可能な限り原文記事 URL に書き換えてみる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;2月に &lt;a href=&#34;https://text.baldanders.info/remark/2022/02/the-nation-of-amnesia/&#34; title=&#34;記憶喪失の国&#34;&gt;TechCrunch Japan が終了してバックナンバーも残さず消滅する話を書いた&lt;/a&gt;。
んで，実際に GW 中にサイトが消滅したわけだが，以前の URL を叩いてみたところ 404 ではなく&lt;a href=&#34;https://techcrunch.com/&#34; title=&#34;TechCrunch – Startup and Technology News&#34;&gt;本家 TechCrunch&lt;/a&gt; にリダイレクトされるようだ。&lt;/p&gt;
&lt;p&gt;いや，そこまでしてくれるなら，せめて翻訳記事は&lt;a href=&#34;https://techcrunch.com/&#34; title=&#34;TechCrunch – Startup and Technology News&#34;&gt;本家&lt;/a&gt;の原文記事にリダイレクトしてくれよ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;まぁ，愚痴ってもしょうがない。
こちらで可能な限り URL の書き換えを試みることにしよう。&lt;/p&gt;
&lt;p&gt;まずこのブログ・サイトの&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env&#34; title=&#34;spiegel-im-spiegel/github-pages-env: Document Environment for spiegel-im-spiegel.github.io&#34;&gt;作業リポジトリ&lt;/a&gt;上で TechCrunch Japan の URL がどのくらいあるか軽く &lt;code&gt;grep&lt;/code&gt; してみる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ grep -c &amp;#34;jp\.techcrunch\.com&amp;#34; &amp;#34;content/**/*.md&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1121
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;おぅふ。
アホほどあるがな &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;TechCrunch Japan 記事の URL を機械的に変換できるか&lt;/h2&gt;
&lt;p&gt;たとえば TechCrunch Japan 記事の URL を&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;https://jp.techcrunch.com/2020/08/14/2020-08-13-instagram-delete-photos-messages-servers/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とする。
この記事に対する原文記事の URL は&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://techcrunch.com/2020/08/13/instagram-delete-photos-messages-servers/&#34;&gt;&lt;code&gt;https://techcrunch.com/2020/08/13/instagram-delete-photos-messages-servers/&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;である。
ドメインが &lt;code&gt;jp.techcrunch.com&lt;/code&gt; → &lt;a href=&#34;https://techcrunch.com/&#34; title=&#34;TechCrunch – Startup and Technology News&#34;&gt;&lt;code&gt;techcrunch.com&lt;/code&gt;&lt;/a&gt; なのは当然として&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;翻訳記事と原文記事では URL パスの日付部分が違う&lt;/li&gt;
&lt;li&gt;原文記事の日付は翻訳記事の slug に含まれている&lt;/li&gt;
&lt;li&gt;日付部分を除く slug の文字列は翻訳記事と原文記事で同じ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これくらいなら正規表現を使った置換処理で何とかなりそうだ。
最近のテキスト・エディタは置換処理で正規表現が使えるものが多いが，私が愛用している &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; でも正規表現を使った一括置換が可能である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kgsi/items/a88662c6e43fa5311288&#34;&gt;Visual Studio Codeを用いた簡単な正規表現検索 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;ruby&gt;&lt;rb&gt;例外&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;AMP&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;を潰す&lt;/h2&gt;
&lt;p&gt;私の作業環境で2箇所ほど例外というか間違いがあって&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://jp.techcrunch.com/2017/12/12/2017-12-11-some-hp-laptops-are-hiding-a-deactivated-keylogger/amp/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://jp.techcrunch.com/2020/01/03/2020-01-02-ex-google-policy-chief-dumps-on-the-tech-giant-for-dodging-human-rights/amp/?__twitter_impression=true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などと，うっかり AMP 用の URL を載せちゃったみたいで，しかも片方は変なパラメータがくっついている。
これらも機械的に置換できなくはないのだが，2箇所だけだし，手作業で原文記事の URL に書き換えた。&lt;/p&gt;
&lt;p&gt;AMP ページはマジで滅びて欲しい。
なんでこんな下らないことで Google に気を使わにゃならんの。
メディアが気を遣うべき相手は私ら閲覧者だろうが。
本末転倒だよ。&lt;/p&gt;
&lt;p&gt;あと，古い URL でスキーマが HTTP のままになってるのが結構あったので，これは &lt;code&gt;http://jp.techcrunch.com&lt;/code&gt; → &lt;code&gt;https://jp.techcrunch.com&lt;/code&gt; に一括置換した。&lt;/p&gt;
&lt;h2&gt;Slug パターン&lt;/h2&gt;
&lt;p&gt;前節の例外を排除したことで TechCrunch Japan 記事のURL&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;https://jp.techcrunch.com/yyyy/mm/dd/slug/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;のうち slug 部分にのみ注目すればよくなった。
この Slug 部分も複数のパターンが見受けられるので整理しておく&lt;/p&gt;
&lt;h3&gt;パターン1: 日付情報 yyyy-mm-dd を含む Slug&lt;/h3&gt;
&lt;p&gt;最初に挙げた例の通り &lt;code&gt;yyyy-mm-dd-originalslug&lt;/code&gt; に要素分解できるパターン。
このパターンには別のバリエーションがあって&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://jp.techcrunch.com/2020/07/15/x2020-07-14-harvard-mit-sue-ice-student-visas-rule/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://jp.techcrunch.com/2020/11/21/https-techcrunch-com-2020-11-20-google-facebook-and-twitter-threaten-to-leave-pakistan-over-censorship-law/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のように日付情報の前に余分な文字列がくっついている。
2番目のとか原文記事の URL そのままぢゃん。
「なにすんねん」ってツッコんじゃったよ（笑）&lt;/p&gt;
&lt;h3&gt;パターン2: 日付情報 yyyymmdd を含む Slug&lt;/h3&gt;
&lt;p&gt;以下のような URL パターン：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://jp.techcrunch.com/2017/09/13/20170912new-bluetooth-vulnerability-can-hack-a-phone-in-ten-seconds/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://jp.techcrunch.com/2016/07/08/automotive-fortune-tesla20160706tesla-says-drivers-using-autopilot-remain-safer-than-regular-drivers/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パターン1のハイフンが抜けた状態。&lt;/p&gt;
&lt;h3&gt;パターン3: Slug に日付情報がない&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://jp.techcrunch.com/2021/06/10/netflix-cowboy-bebop-streaming-this-fall/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;jp.techcrunch.com&lt;/code&gt; → &lt;a href=&#34;https://techcrunch.com/&#34; title=&#34;TechCrunch – Startup and Technology News&#34;&gt;&lt;code&gt;techcrunch.com&lt;/code&gt;&lt;/a&gt; と置換するだけで行けるかなぁと思ったが駄目だった（&lt;a href=&#34;https://techcrunch.com/&#34; title=&#34;TechCrunch – Startup and Technology News&#34;&gt;本家サイト&lt;/a&gt;が404になる）。
原文記事の日付情報が得られないので置換不可。&lt;/p&gt;
&lt;h3&gt;パターン4: Slug が&lt;a href=&#34;https://text.baldanders.info/golang/uri-encoding/&#34; title=&#34;URI エンコーディングについて&#34;&gt;パーセント・エンコーディング&lt;/a&gt;されている&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://jp.techcrunch.com/2017/03/13/%e3%80%8c%e6%b3%95%e4%bb%a4%e4%b8%8a%e9%81%95%e5%8f%8d%e3%81%ae%e5%8f%af%e8%83%bd%e6%80%a7%e3%80%81%e5%80%ab%e7%90%86%e7%9a%84%e3%81%ab%e3%82%82%e5%95%8f%e9%a1%8c%e3%80%8ddena%e3%81%8cwelq%e5%95%8f/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多分，というか間違いなく日本版オリジナル記事だよね。
これは置換対象外とした。&lt;/p&gt;
&lt;h2&gt;置換用正規表現&lt;/h2&gt;
&lt;p&gt;というわけで，今回はパターン1と2のみが対象となる。
置換処理は &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; を使っている。&lt;/p&gt;
&lt;p&gt;パターン1の検索・置換正規表現は以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;正規表現&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;検索&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://jp\.techcrunch\.com/\d{4}/\d{2}/\d{2}/.*(\d{4})-(\d{2})-(\d{2})-(.+)/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;置換&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://techcrunch.com/$1/$2/$3/$4/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;対象ファイル&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*.md&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;パターン2の検索・置換正規表現は以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;正規表現&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;検索&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://jp\.techcrunch\.com/\d{4}/\d{2}/\d{2}/.*(\d{4})(\d{2})(\d{2})(.+)/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;置換&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://techcrunch.com/$1/$2/$3/$4/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;対象ファイル&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*.md&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;もう少し頑張ればひとつにまとめられたかもしれないが，副作用が出るのが嫌だったので分けた。
これで未変換の TechCrunch Japan 記事の URL は118個まで減ったが，今のところ，これ以上は無理なので，放置ということで。&lt;/p&gt;
&lt;p&gt;どっとはらい&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://murashun.jp/article/programming/regular-expression.html&#34;&gt;基本的な正規表現一覧 | murashun.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;私の環境では &lt;a href=&#34;https://github.com/mattn/jvgrep&#34; title=&#34;mattn/jvgrep: grep for japanese vimmer&#34;&gt;mattn/jvgrep&lt;/a&gt; を &lt;code&gt;grep&lt;/code&gt; に alias して使っている。ファイル指定を &lt;code&gt;&amp;quot;content/**/*.md&amp;quot;&lt;/code&gt; などと再帰的に指定できるのが嬉しい。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>Azure App Service に VS Code でデプロイできなかった話</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2022/04/cannot-deploy-with-vscode/" />
		<id>tag:text.Baldanders.info,2022-04-06:/remark/2022/04/cannot-deploy-with-vscode/</id>
		<published>2022-04-06T11:37:03+00:00</published>
		<updated>2022-04-14T11:20:28+00:00</updated>
		<summary>当面は VS Code 1.65.x にダウングレードするしかないらしい。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;私は &lt;a href=&#34;https://azure.microsoft.com/en-us/services/app-service/&#34; title=&#34;App Service — Build &amp;amp; Host Web Apps | Microsoft Azure&#34;&gt;Azure App Service&lt;/a&gt; に手動でデプロイする際は &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; の &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureappservice&#34; title=&#34;Azure App Service - Visual Studio Marketplace&#34;&gt;Azure App Service 拡張機能&lt;/a&gt;を使ってるんだけど，ここのところ頻繁にデプロイに失敗してたのよ。
最初は &lt;a href=&#34;https://azure.microsoft.com/en-us/services/app-service/&#34; title=&#34;App Service — Build &amp;amp; Host Web Apps | Microsoft Azure&#34;&gt;App Service&lt;/a&gt; のほうがやらかしてるんだと思ってたんだけど（だって上手く行くときもあるし），ググったら違ってたようだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
VS Code 1.66 upgraded to Node 16 which has been causing deployment issues for both Functions and App Service. Unfortunately, the only current known workaround is to downgrade VS Code to 1.65.x. We&#39;re currently investigating a proper fix.
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-azureappservice/issues/2194#issuecomment-1087857459&#34;&gt;ECONNRESET trying azure deploy webapp VS Code · Issue #2194 · microsoft/vscode-azureappservice&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;まじすか &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ダウングレードってどうやんだ？ と思ったが単純に 1.65.x のインストール・パッケージを拾ってきて上書きインストールすればいいようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/updates/v1_65&#34;&gt;Visual Studio Code February 2022&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows 環境では自動更新を無効にするのをお忘れなく。
やれやれ&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2022-04-14 追記】&lt;/strong&gt;
v1.66.2 で直った。
よかったよかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vscode/releases/tag/1.66.2&#34;&gt;Release March 2022 Recovery 2 · microsoft/vscode · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vscode-azurefunctions/issues/2844&#34;&gt;Investigate ECONNRESET issue during &amp;ldquo;zipdeploy&amp;rdquo; call · Issue #2844 · microsoft/vscode-azurefunctions · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>Java と VS Code</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/08/java-with-vscode/" />
		<id>tag:text.Baldanders.info,2021-08-18:/remark/2021/08/java-with-vscode/</id>
		<published>2021-08-18T13:20:30+00:00</published>
		<updated>2022-04-23T13:45:31+00:00</updated>
		<summary>どうせなら VS Code で環境を作るのがいいよねってことで</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/installing-vscode-again/&#34;&gt;パソコンに Visual Studio Code を導入する（再チャレンジ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/golang-with-vscode/&#34;&gt;Go と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/markdown-with-vscode/&#34;&gt;Markdown と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/08/java-with-vscode/&#34;&gt;Java と VS Code&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2022/04/codespaces/&#34;&gt;やっと Codespaces が使える&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;仕事で Spring Boot なコードを書くことになって，今更ながら基本から勉強し直している。
で，どうせなら &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; で環境を作るのがいいよねってことで，覚え書きとして記しておく。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack&#34; title=&#34;Extension Pack for Java - Visual Studio Marketplace&#34;&gt;Extension Pack for Java&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ code --install-extension vscjava.vscode-java-pack
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これをインストールすると以下のパッケージも併せてインストールされる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=redhat.java&#34;&gt;Language Support for Java(TM) by Red Hat - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug&#34;&gt;Debugger for Java - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test&#34;&gt;Test Runner for Java - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven&#34;&gt;Maven for Java - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency&#34;&gt;Project Manager for Java - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode&#34;&gt;Visual Studio IntelliCode - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これだけあれば基本的な道具は一通り揃う。&lt;/p&gt;
&lt;h3&gt;みんな大好き “Hello, World!”&lt;/h3&gt;
&lt;p&gt;ここで簡単に動作確認しておこう。
以下の手順でプロジェクトの雛形を作成する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コマンドパレットから “Java: Create Java Project” を選択する&lt;/li&gt;
&lt;li&gt;プロジェクト・タイプの一覧が表示されるので “No build tools” を選択する&lt;/li&gt;
&lt;li&gt;作業ディレクトリを選択する&lt;/li&gt;
&lt;li&gt;プロジェクト名を指定する（ここでは &lt;code&gt;hello&lt;/code&gt; と入力）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tree hello
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hello
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── README.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── lib
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── src
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── App.java
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2 directories, 2 files
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という感じにディレクトリ・ファイルが作成される。
&lt;code&gt;App.java&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;エディタ上は&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://text.baldanders.info/hello-java-code.png&#34;&gt;&lt;img src=&#34;./hello-java-code.png&#34; srcset=&#34;./hello-java-code.png 528w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;という感じに表示されているので &lt;code&gt;main()&lt;/code&gt; 関数直上の &lt;code&gt;Run&lt;/code&gt; のリンクをクリックすればコンパイル＆実行してくれる。
Java Process Console に &lt;code&gt;Hello, World!&lt;/code&gt; と表示されれば無問題。&lt;/p&gt;
&lt;h3&gt;Import 補完&lt;/h3&gt;
&lt;p&gt;Java の &lt;code&gt;import&lt;/code&gt; 宣言ってすぐに汚れるよね。
使わない &lt;code&gt;import&lt;/code&gt; とか。
逆に &lt;code&gt;import&lt;/code&gt; が足りなくてエラーになったり。&lt;/p&gt;
&lt;p&gt;こういうときはコマンドパレットから “Organize Imports” でいい感じに整形してくれる。
保存時に自動で整形するには &lt;code&gt;settings.json&lt;/code&gt; に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;java.saveActions.organizeImports&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;を追加してやればよい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Pivotal.vscode-boot-dev-pack&#34; title=&#34;Spring Boot Extension Pack - Visual Studio Marketplace&#34;&gt;Spring Boot Extension Pack&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ code --install-extension Pivotal.vscode-boot-dev-pack
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これも以下のパッケージを含んでいるようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Pivotal.vscode-spring-boot&#34;&gt;Spring Boot Tools - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-initializr&#34;&gt;Spring Initializr Java Support - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-boot-dashboard&#34;&gt;Spring Boot Dashboard - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;雛形プロジェクトを作る&lt;/h3&gt;
&lt;p&gt;これも動作確認しておこう。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コマンドパレットから “Spring Initializr: Generate a Maven Project” を選択する&lt;/li&gt;
&lt;li&gt;Spring Boot のバージョンを選択（2021-08-18 時点の最新は 2.5.3）&lt;/li&gt;
&lt;li&gt;使用言語を選択。もちろん Java で&lt;/li&gt;
&lt;li&gt;Group Id を入力。ここはデフォルトの &lt;code&gt;com.example&lt;/code&gt; のままにしておく&lt;/li&gt;
&lt;li&gt;Artifact Id を入力。ここもデフォルトの &lt;code&gt;demo&lt;/code&gt; のままにしておく&lt;/li&gt;
&lt;li&gt;パッケージタイプを選択。 &lt;code&gt;Jar&lt;/code&gt; と &lt;code&gt;War&lt;/code&gt; がある。とりあえす &lt;code&gt;Jar&lt;/code&gt; にしておこうか&lt;/li&gt;
&lt;li&gt;Java のバージョンを選択。無難に LTS 版の 11 を選択しておくか（JDK のインストールは別途行うこと）&lt;/li&gt;
&lt;li&gt;依存パッケージを選択。 Spring Web と Lombok は必須。あとは必要に応じて
&lt;ul&gt;
&lt;li&gt;Spring Web (必須)&lt;/li&gt;
&lt;li&gt;Lombok (必須)&lt;/li&gt;
&lt;li&gt;Spring Boot DevTools&lt;/li&gt;
&lt;li&gt;Thymeleaf&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://text.baldanders.info/choose-dependencies.png&#34;&gt;&lt;img src=&#34;./choose-dependencies.png&#34; srcset=&#34;./choose-dependencies.png 630w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;あとは作業ディレクトリを指定すれば完了。
作業ディレクトリ直下に Artifact Id で指定した名前でディレクトリが掘られ，ディレクトリ・ファイルが展開される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tree demo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;demo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── HELP.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── mvnw
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── mvnw.cmd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── pom.xml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── src
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   ├── java
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │   └── com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │       └── example
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │           └── demo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │               └── DemoApplication.java
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   └── resources
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │       ├── application.properties
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │       ├── static
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │       └── templates
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        └── java
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            └── com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                └── example
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    └── demo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        └── DemoApplicationTests.java
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;DemoApplication.java&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DemoApplication&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DemoApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このままだと何も表示できないので controller クラスと対応するテンプレートファイルを用意する。&lt;/p&gt;
&lt;p&gt;まずは &lt;code&gt;demo/src/main/java/com/example/demo/controller/DemoController.java&lt;/code&gt; ファイルを作る。
中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.demo.controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.stereotype.Controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Controller&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DemoController&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nd&#34;&gt;@GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次に &lt;code&gt;demo/src/main/resources/templates/demo.html&lt;/code&gt; ファイルを作る。
中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Demo&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全体の構成はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tree demo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;demo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── HELP.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── mvnw
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── mvnw.cmd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── pom.xml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── src
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   ├── java
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │   └── com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │       └── example
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │           └── demo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │               ├── DemoApplication.java
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │               └── controller
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │                   └── DemoController.java
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   └── resources
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │       ├── application.properties
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │       ├── static
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │       └── templates
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │           └── demo.html
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        └── java
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            └── com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                └── example
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    └── demo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        └── DemoApplicationTests.java
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;テストとか端折ってるけどご容赦ね。&lt;/p&gt;
&lt;p&gt;あとは Spring Boot Dashboard から Start すれば OK。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://text.baldanders.info/dashboard.png&#34;&gt;&lt;img src=&#34;./dashboard.png&#34; srcset=&#34;./dashboard.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;Web ブラウザから &lt;code&gt;http://localhost:8080/&lt;/code&gt; を叩いて &lt;code&gt;Hello, World!&lt;/code&gt; と表示されれば無問題。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GabrielBB.vscode-lombok&#34; title=&#34;Lombok Annotations Support for VS Code - Visual Studio Marketplace&#34;&gt;Lombok Annotations Support for VS Code&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ code --install-extension GabrielBB.vscode-lombok
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;@Getter&lt;/code&gt; とか &lt;code&gt;@Setter&lt;/code&gt; とか &lt;code&gt;@Slf4j&lt;/code&gt; とかの &lt;a href=&#34;https://projectlombok.org/&#34; title=&#34;Project Lombok&#34;&gt;Lombok&lt;/a&gt; アノテーションを付けると &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; がコードにエラーマークを付けることがある（ビルドはちゃんと通る）。
かなりウザいのでこの拡張機能を入れてみた。
快適！&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureappservice&#34; title=&#34;Azure App Service - Visual Studio Marketplace&#34;&gt;Azure App Service&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ code --install-extension ms-azuretools.vscode-azureappservice
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;VS code 上から &lt;a href=&#34;https://azure.microsoft.com/ja-jp/services/app-service/web/&#34; title=&#34;Web App Service | Microsoft Azure&#34;&gt;Azure Web Apps&lt;/a&gt; にお手軽にデプロイ出来ないかなぁ，と思って探したらありました。
やり方は以下のページの後半で紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/java/java-webapp&#34;&gt;Build and Deploy Java Web Apps to the cloud with Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;めがっさ簡単だった。
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/app-service/deploy-github-actions&#34; title=&#34;GitHub アクションを使用して CI/CD を構成する - Azure App Service | Microsoft Docs&#34;&gt;GitHub Actions を使う&lt;/a&gt;方法とか，何なら &lt;a href=&#34;https://azure.microsoft.com/ja-jp/services/spring-cloud/&#34; title=&#34;Azure Spring Cloud – Spring Boot アプリの開発 | Microsoft Azure&#34;&gt;Azure Spring Cloud&lt;/a&gt; を契約する手もあるのだが，今回はとにかく JAR か WAR を投げれればよかったので。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/takumi_links/items/fe71cfeb4dfaa76fbe31&#34;&gt;VSCodeで作るJava開発環境＆Spring Bootアプリケーション入門 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.pleiades.io/spring-boot/docs/current/reference/html/deployment.html&#34;&gt;Spring Boot アプリケーションのデプロイ - リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/koukibuu3/items/77734596483ffd788931&#34;&gt;SpringBootをVSCodeで使ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kohei.life/spring-boot-build-deploy/&#34;&gt;【Maven編】Spring Bootのビルドとデプロイ方法 | こへいブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ameblo.jp/kazusa-g/entry-12536838291.html&#34;&gt;VSCodeとDockerでSpring Boot + PostgreSQL開発環境を作る(2) | Sales8開発者日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learning-collection.com/springboot-%e3%83%ad%e3%82%b0%e3%82%a4%e3%83%b3%e7%94%bb%e9%9d%a2%e4%bd%9c%e6%88%90/&#34;&gt;SpringBoot ログイン画面作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/t-shin0hara/items/eaf44e4f48341616ab97&#34;&gt;Spring Boot + Spring Data JPA ～サンプルアプリ実装～ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://itref.fc2web.com/java/jpa/annotation.html&#34;&gt;JPA (Java Persistence API)のアノテーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/NagaokaKenichi/items/c6d1b76090ef5ef39482&#34;&gt;Thymeleafチートシート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://one-it-thing.com/2074/&#34;&gt;SpringBootアプリにBootstrap4を追加（WebJars使用） – One IT Thing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codeflow.site/ja/article/spring-boot__spring-boot-slf4j-logging-example&#34;&gt;SpringブートSLF4Jロギングの例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.getdocs.org/spring-boot-spring-boot-slf4j-logging-example/&#34;&gt;SpringブートSLF4Jロギングの例 - 開発者ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://m-shige1979.hatenablog.com/entry/2016/11/30/080000&#34;&gt;Spring bootでHttpSessionを使用する - m_shige1979のささやかな抵抗と欲望の日々&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/t-yama-3/items/572fabc873b4b6a0fc7c&#34;&gt;Spring Boot で Ajax を実装する単純なサンプル - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/opengl-8080/items/671ffd4bf84fe5e32557&#34;&gt;Lombok 使い方メモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitto.jp/posts/%E6%8A%80%E8%A1%93/Windows/vscode-java-organize-import/&#34;&gt;VScodeでJavaのインポート文をFixしたい | 猫好きが猫以外のことも書く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/java/java-on-azure&#34;&gt;Deploy Java to Azure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0893LQ5KY?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51lVSJk1gBL._SL160_.jpg&#34; width=&#34;100&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0893LQ5KY?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Spring Boot 2 入門: 基礎から実演まで&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;原田 けいと (著), 竹田 甘地 (著), Robert Segawa (著)&lt;/dd&gt;
    &lt;dd&gt; 2020-05-22 (Release 2020-05-22)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0893LQ5KY (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Spring Boot を勉強することになって急遽買った本。めっさ分かりやすかった。 PDF 版が欲しいくらい（笑） Spring Boot 2.7 対応にアップデートされていた。素敵！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2022-08-14&#34;&gt;2022-08-14&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Spring Boot 2 入門 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41WZElZb9eL._SL160_.jpg&#34; width=&#34;128&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Effective Java 第3版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Joshua Bloch (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2018-10-30&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-03-17&#34;&gt;2021-03-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Effective Java 第3版 --&gt;
</content>
	</entry><entry>
		<title>そうだ！ Zenn の記事や本にバッヂを贈ろう</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/11/zenn-badges/" />
		<id>tag:text.Baldanders.info,2020-11-12:/remark/2020/11/zenn-badges/</id>
		<published>2020-11-12T12:17:02+00:00</published>
		<updated>2020-11-12T12:27:58+00:00</updated>
		<summary>バッヂを贈られた記事は「金を払う価値のある記事」という実績を示せるし，贈った側も「オラが贈ったバッヂだべや」と悦に入ることができる</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;仕事でまた Windows を弄るようになって&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 改めてウンザリしていること：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ディレクトリ区切り文字がバックスラッシュ
&lt;ul&gt;
&lt;li&gt;エスケープ文字と被るのでチョー面倒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改行コードが2バイト（CR+LF）
&lt;ul&gt;
&lt;li&gt;ちゃんと2バイトにしないとバッチが動かない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ダブルバイトの呪い。また Shift-JIS と付き合わにゃならんのか &lt;code&gt;orz&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;テキストボックスに漢字10文字入るからって半角英数字で20文字入るわけぢゃねーよ！ いつの時代だ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;そんなこんなで，習作（study）として手遊びで作った &lt;a href=&#34;https://text.baldanders.info/release/gnkf/&#34; title=&#34;NKF: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; が実務で役に立つ日が来ようとは&amp;hellip;&lt;/p&gt;
&lt;p&gt;たとえば Shift-JIS のテキストを UTF-8 で「読める」ようにするために&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gnkf e -s shift_jis -f sjis.txt | gnkf nl -n lf &amp;gt; utf8.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;としたり，逆に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gnkf e -d shift_jis -f utf8.txt | gnkf nl -n crlf &amp;gt; sjis.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とか Shift-JIS に変換したりするわけなのだが，いちいち手で打つのは面倒なのでバッチファイルにしたりするよね。
そんで，バッチファイルにうっかりそのまま1行だけ&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bat&#34; data-lang=&#34;bat&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gnkf e -s shift_jis -f &lt;span class=&#34;nv&#34;&gt;%1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; gnkf nl -n lf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と書いて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ conv-utf8.cmd sjis.txt &amp;gt; utf8.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とか実行したら大変なことになるのですよ。
分かるかな？ ここではじめて「そういやバッチ書くときって先頭に &lt;code&gt;@echo off&lt;/code&gt; って付けにゃアカンかったっけ」と思い出すのである。&lt;/p&gt;
&lt;p&gt;はい。
長い前置きでした。
ここからが本題。&lt;/p&gt;
&lt;p&gt;こんなときに役に立つのが以下の本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/zetamatta/books/c84cbe23093eee1b5830&#34;&gt;/bin/shに慣れた人に贈るバッチファイルの書き方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マジで役に立ちました，過ぎ去った過去を思い出す意味でも。
これを読んで最終的にはこんな感じに書き直した。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bat&#34; data-lang=&#34;bat&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ECHO&lt;/span&gt; OFF
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SETLOCAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;INFILE=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%~1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;IF&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%INFILE%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;GOTO&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;ENDPROC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OUTFILE=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%~2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;IF&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%OUTFILE%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  gnkf e -s shift_jis -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%INFILE%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; gnkf nl -n lf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ELSE&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  gnkf e -s shift_jis -f &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%INFILE%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; gnkf nl -n lf -o &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%OUTFILE%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;ENDPROC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;ENDLOCAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;EXIT&lt;/span&gt; /b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな有用な本が無料ですよ。
もったいねー&lt;/p&gt;
&lt;p&gt;でも，ご安心を。
&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; では「サポート」機能を使って無料の記事や本に送金できるのである。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./support-button-in-zenn.png&#34;&gt;&lt;img src=&#34;./support-button-in-zenn.png&#34; srcset=&#34;./support-button-in-zenn.png 712w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;このボタンを押すと&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./support-it.png&#34;&gt;&lt;img src=&#34;./support-it.png&#34; srcset=&#34;./support-it.png 527w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;てなダイアログが表示され，500円単位で支払いできる。&lt;/p&gt;
&lt;p&gt;注目は下半分に表示されているバッヂだ。
送金時にこのバッヂを選択することで，実際にサポート受けた記事や本では&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./badges.png&#34;&gt;&lt;img src=&#34;./badges.png&#34; srcset=&#34;./badges.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;てな感じで贈られたバッヂが表示される。&lt;/p&gt;
&lt;p&gt;金銭的なやり取り以上に，バッヂを贈られた記事や本は「金を払う価値のある内容」という実績を示せるし，もちろん贈った側も「オラが贈ったバッヂだべや」と悦に入ることができる（ちなみに誰がバッヂを贈ったかは外部には非公開）。&lt;/p&gt;
&lt;p&gt;このバッヂ機能，シンプルだけど強力な仕掛けだよね。
単なる LGTM&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; よりも実利的な意味を持つし note.com のサポート機能より更に一歩進んでいると思う。
こういうところが新興サービスの面白いところだよな。&lt;/p&gt;
&lt;p&gt;というわけで，お世話になった無料本のいくつかにバッヂを贈りました。
お世話になりました。&lt;/p&gt;
&lt;!-- eof --&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;春までいた職場でも Windows 10 は使っていたが，あれは PC は PC でも Programmable Controller のほうなので，指定されたアプリや操作以外は許容されていなかった。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;“Looks Good To Me” の略。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>ちょこっと SEO</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/10/seo/" />
		<id>tag:text.Baldanders.info,2020-10-15:/remark/2020/10/seo/</id>
		<published>2020-10-15T06:52:10+00:00</published>
		<updated>2020-10-15T23:10:05+00:00</updated>
		<summary>サイト内 S/N 比を上げるための SEO はアリなんじゃないかというわけで，このブログサイトを少し整理することにした。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;正直に告白します。
今まで SEO (Search Engine Optimization) を馬鹿にしてました。
怪しげな Web 開発会社やコンサルタントが競馬の予想屋の如き呪文を唱えて哀れな子羊からお金を掠め取るのが SEO だと思ってました。&lt;/p&gt;
&lt;p&gt;でも &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; 公式の&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/catnose99/articles/2060cd717894cfa7a0c4&#34;&gt;ユーザー投稿型サービスのSEO対策&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を読んで目から鱗が落ちました。
検索サービスに媚びる SEO ではなく，検索サービス経由で来るユーザから見て，サイト内 S/N 比を上げる（ノイズを検索クローラに拾わせない）ための SEO はアリなんじゃないかと。&lt;/p&gt;
&lt;p&gt;というわけで，上の記事を参考にこのブログサイトを少し整理することにした。&lt;/p&gt;
&lt;h2&gt;タイトルをシンプルにする&lt;/h2&gt;
&lt;p&gt;今まで &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 要素にセットしていたのは&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ページ・タイトル ― セクション・タイトル | サイト・タイトル
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という構成だったのだが，ページ・タイトルの後ろの文字列が長いのは気になっていた。
やっぱタイトルが長いのはアカンらしい。&lt;/p&gt;
&lt;p&gt;流石に &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; のようにサイト・タイトルまで切り詰める勇気はなかったが「セクション・タイトルは要らんな」ちうことでバッサリ削除することにした。
セクション分けは完全に私個人の都合なので（検索サービス経由で）外からくるユーザには意味ないだろ，ということで。&lt;/p&gt;
&lt;p&gt;一方 OGP の&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;og:title&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;〜&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のほうはページ・タイトルのみを設置することにした。
所謂「パンくずリスト」については &lt;a href=&#34;https://text.baldanders.info/remark/2017/11/json-ld/&#34; title=&#34;JSON-LD に対応してみた&#34;&gt;JSON-LD 設置&lt;/a&gt;絡みで整理できているので問題ない。&lt;/p&gt;
&lt;h2&gt;タグ関連ページを noindex とする&lt;/h2&gt;
&lt;p&gt;このブログ・サイトは記事を「セクション」と「タグ」で分類している。
ひとつの記事にはひとつのセクションしか指定できないが，タグは複数指定できる。
セクションが縦串でタグが横串みたいなイメージ。&lt;/p&gt;
&lt;p&gt;タグは，それ自体&lt;a href=&#34;https://text.baldanders.info/tags/&#34;&gt;かなりの数がある&lt;/a&gt;上にタグ毎に列挙される記事が重複してしまうため，関連ページの中身がかなり冗長になることは気になっていた。&lt;/p&gt;
&lt;p&gt;そこでタグ関係のページには&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;robots&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;noindex&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;を設置してインデクス対象外となるようにした。
実際，エゴサーチしててもタグ関連のページがぞろぞろ出てきて鬱陶しかったのよ。&lt;/p&gt;
&lt;h2&gt;ブックマーク収集セクションを noindex で nofollow とする&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/bookmarks/&#34; title=&#34;ブックマーク集&#34;&gt;Bookmarks&lt;/a&gt; セクションは元々，愛用していたソーシャルブックマーク・サービスがダメぽい感じになったので自前で収集できるように作ったものである。&lt;/p&gt;
&lt;p&gt;私としては気になるページをあまり考えることなく溜め込んでおけるので（欲しい情報を探すときは grep が使えるし）重宝しているのだが，他所から来た人から見ればこれ以上ノイズ塗れのページはないよね（笑）&lt;/p&gt;
&lt;p&gt;ちうわけで &lt;a href=&#34;https://text.baldanders.info/bookmarks/&#34; title=&#34;ブックマーク集&#34;&gt;bookmarks&lt;/a&gt; セクションはまるっと &lt;code&gt;noindex&lt;/code&gt; 化することにした。
加えてリンクの &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 要素にも &lt;code&gt;rel=&amp;quot;nofollow&amp;quot;&lt;/code&gt; 属性を設置して評価対象外となるようにした。&lt;/p&gt;
&lt;p&gt;ありがたいことに &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; では &lt;a href=&#34;https://gohugo.io/getting-started/configuration-markup/#markdown-render-hooks&#34; title=&#34;Configure Markup | Hugo&#34;&gt;Markdown Render Hooks&lt;/a&gt; の仕組みを使って &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 要素をカスタマイズできる。
しかも v0.71 からはセクション毎にこれを設置できるようになった。&lt;/p&gt;
&lt;p&gt;今回であれば &lt;code&gt;layouts/bookmarks/_markup&lt;/code&gt; ディレクトリを掘り &lt;code&gt;render-link.html&lt;/code&gt; ファイルを設置すればいい。
中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Destination | safeURL }}&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;nofollow&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Title&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;}}&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ . }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Text | safeHTML }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h2&gt;トップページをダイエットする&lt;/h2&gt;
&lt;p&gt;最後に SEO とはたぶん関係ないけど，トップページに情報を継ぎ足していったら煩雑になりすぎてしまったので，新着記事のリスト以外は&lt;a href=&#34;https://text.baldanders.info/status/&#34; title=&#34;サイトの状況&#34;&gt;ステータス・ページ&lt;/a&gt;に移動した。
まぁ，うちのブログサイトにトップページから入る人はおらんじゃろうけど（笑）&lt;/p&gt;
&lt;p&gt;これでスッキリ！&lt;/p&gt;
&lt;!-- eof --&gt;
</content>
	</entry><entry>
		<title>国勢調査の思ひ出</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/10/census/" />
		<id>tag:text.Baldanders.info,2020-10-01:/remark/2020/10/census/</id>
		<published>2020-10-01T03:09:11+00:00</published>
		<updated>2020-10-01T05:00:06+00:00</updated>
		<summary>まだ回答してない人でネット回答可能であれば，ネットのほうが断然楽。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;知り合いのブログ記事で&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.netandfield.com/shar/2020/09/post-3809.html&#34;&gt;国勢調査オンライン - 電気ウナギ的○○&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というのがあって「そういや前回はネットで回答したな」と思い出して&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env&#34; title=&#34;spiegel-im-spiegel/github-pages-env: Document Environment for spiegel-im-spiegel.github.io&#34;&gt;作業用リポジトリ&lt;/a&gt;に grep かけて探してみたらやっぱり書いてた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2015/0920-diary/#census&#34; title=&#34;今日の戯れ言：週末は掃除三昧&#34;&gt;国勢調査を片付けた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんでも記事にしておくものである。
5年前の私 good work!&lt;/p&gt;
&lt;h2&gt;あの会社は今&lt;/h2&gt;
&lt;p&gt;当時は「国勢調査オンライン」のサイト証明書は Symantec 社が発行していて，ページにデカデカとロゴが貼り付けてあって苦笑したものだが，当の Symantec 社は CA 事業の不祥事で Web ブラウザのベンダ企業から信用されなくなり，2017年に事業を手放している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://internet.watch.impress.co.jp/docs/news/1103161.html&#34;&gt;Symantec→DigiCertでSSL/TLS証明書はどうなる？　日本国内にも認証局構築へ、IoT機器市場も見据え - INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回はどうしてるんだろうと見てみたら DigiCert 社だったよ。
何も変わってないな（笑）&lt;/p&gt;
&lt;p&gt;そういや DigiCert 社のルート CA 証明書は RSA/2048 鍵で2031年まで有効なんだよな。
ちなみに &lt;a href=&#34;https://text.baldanders.info/remark/2017/10/key-parameters/&#34; title=&#34;暗号鍵関連の各種変数について&#34;&gt;RSA/2048 鍵が acceptable なのは2030年まで&lt;/a&gt;だ。
まぁ鼻の先は問題ないが，政府調達品でこの程度の認識しかない企業を使うのはどうなんだろう。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;strong&gt;【追記】&lt;/strong&gt;
Facebook で教えてもらったが DigiCert 社の CA 証明書はよりサイクルの短いものに順次切り替えていくそうだ。
Web 用のサーバ証明書は長くても1年程度のサイクルになる筈だし，数年かけて切り替えていくイメージだろうか。&lt;/div&gt;
&lt;h2&gt;なりすましと本人確認&lt;/h2&gt;
&lt;p&gt;そういや5年前はうっかり Phishing サイトを作って怒られた輩がいて話題になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1509/15/news083.html&#34;&gt;国勢調査の“偽サイト”作った意図は？　総務省から削除依頼……「騒ぎになり深く反省」と制作者 (1/3) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近の「ドコモロ系事案」を引くまでもなく，なりすましや本人確認は古くて新しい問題であり続ける。
このご時世に「オンライン推奨」とか現政権は勇気あるな（皮肉）&lt;/p&gt;
&lt;p&gt;国勢調査が面白いのは，基本的に「戸」単位であり，その枠組みの中で識別できていれば「本人確認」は必ずしも必要条件ではないということだ。
そして，その「戸」単位の確認を行うのが「国勢調査員」である。
これは紙でもネットでも同じこと。
ネットで回答するにしても，そのアカウント情報は国勢調査員から貰わなければならない。&lt;/p&gt;
&lt;p&gt;そもそも路上生活者とかにも国勢調査員が出向いて聞き取り調査するんだよ。
日本語が通じない人達だって相当数いるだろうに，ホンマ国勢調査員のご苦労は察するにあまりある。&lt;/p&gt;
&lt;p&gt;故に「『コロナ』だからオンライン推奨」というのは全く以って詭弁である。
ちなみに，今回うちで国勢調査の回答をしたのは親父殿だが，パソコンもスマホも持ってないので紙で回答したらしい。
私？ 私はただの居候ですから（笑）&lt;/p&gt;
&lt;h2&gt;「国勢調査オンライン」はダサいか&lt;/h2&gt;
&lt;p&gt;どうも「国勢調査オンライン」のサイトをダサいとか文句を言ってる人がいるらしい。
まぁ今風ではないな（笑）&lt;/p&gt;
&lt;p&gt;今回は私は回答してないのでどうだったかは知らないが，&lt;a href=&#34;https://text.baldanders.info/remark/2015/0920-diary/#census&#34; title=&#34;今日の戯れ言：週末は掃除三昧&#34;&gt;前回ネットで回答&lt;/a&gt;してめっさ楽だったのは覚えている。
ぶっちゃけて言うが&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;&lt;strong&gt;政府系サイトに &lt;ruby&gt;&lt;rb&gt;SEO&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;屁のつっぱり&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt; は要らんですよ&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;そもそも Web アクセシビリティってそんな簡単じゃない。
うちのサイトもそうだけど，本当に不特定に見易い使い易いサイトなんか無理である。
このブログサイトをダークモードにしてるのは，主に「私」のためだ。&lt;/p&gt;
&lt;p&gt;できるだけ多くの人に対応しようとして結果として今風じゃないデザインになったとしても，利用者が文句を言う筋合いじゃないのだ。
機能要件やセキュリティ要件を満たしていない部分があるのなら，文句を言って然るべきだけど（笑）&lt;/p&gt;
&lt;p&gt;というわけで，まだ回答してない人でネット回答可能であれば，ネットのほうが断然楽なので，お試しあれ。&lt;/p&gt;
&lt;h2&gt;いまさら思い出したが&amp;hellip;&lt;/h2&gt;
&lt;p&gt;このブログサイト，&lt;a href=&#34;https://text.baldanders.info/remark/2015/open-this-site/&#34; title=&#34;text.Baldanders.info 正式オープン&#34;&gt;正式オープン&lt;/a&gt;から5周年だわ。
何も考えてなかった。&lt;/p&gt;
&lt;p&gt;まぁ，&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/assemble-a-living-pc/&#34; title=&#34;整いました！&#34;&gt;この前買ったタブレット&lt;/a&gt;がご褒美ということで（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/nist-sp-800-207-zero-trust-architecture/&#34;&gt;NIST SP 800-207: “Zero Trust Architecture”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/authenticator-and-aal/&#34;&gt;Authenticator と AAL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- eof --&gt;
</content>
	</entry><entry>
		<title>近ごろ流行りらしい “Zenn” のアカウントを作ってみた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/using-zenn-with-github/" />
		<id>tag:text.Baldanders.info,2020-09-19:/remark/2020/09/using-zenn-with-github/</id>
		<published>2020-09-19T08:09:47+00:00</published>
		<updated>2020-09-22T02:03:47+00:00</updated>
		<summary>とりあえず私も Qiita に置いてる記事の一部を移行してみるか。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;きっかけは &lt;a href=&#34;https://qiita.com/tsuyoshi_cho&#34; title=&#34;tsuyoshi_cho - Qiita&#34;&gt;@tsuyoshi_cho&lt;/a&gt; さんの&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tsuyoshi_cho/items/f615dbd4631957334ef3&#34;&gt;Gitのaliasを晒す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で，最近の更新に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;Zennへ移植改訂しました。&lt;br&gt;
&lt;a href=&#34;https://zenn.dev/tsuyoshicho/articles/git-aliases-revised&#34;&gt;https://zenn.dev/tsuyoshicho/articles/git-aliases-revised&lt;/a&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://qiita.com/tsuyoshi_cho/items/f615dbd4631957334ef3&#34;&gt;Gitのaliasを晒す - Qiita&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とあって「&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; ってなんじゃら？」と調べてみた。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;プログラマーのための新しい情報共有サービス「Zenn」をリリースしました🎉&lt;br&gt;&lt;br&gt;コンセプトは、有益な情報を共有する人がもっと対価を得られること。&lt;br&gt;noteのようにお互いを金銭的にサポートしたり、知見を本にまとめて販売したりできるプラットフォームです。&lt;a href=&#34;https://t.co/l0lxlW24Ug&#34;&gt;https://t.co/l0lxlW24Ug&lt;/a&gt; &lt;a href=&#34;https://t.co/qrddHoCWsr&#34;&gt;pic.twitter.com/qrddHoCWsr&lt;/a&gt;&lt;/p&gt;&amp;mdash; catnose (@catnose99) &lt;a href=&#34;https://twitter.com/catnose99/status/1306160371468627968?ref_src=twsrc%5Etfw&#34;&gt;September 16, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;おおっ！ 最近 launch したサービスだったのか。&lt;/p&gt;
&lt;p&gt;パッと見の印象は「Qiita ＋ note」という感じ。
今や &lt;a href=&#34;https://yamdas.hatenablog.com/entry/20200914/publishers-note&#34; title=&#34;出版社のnote活用事例まとめ完全版（2020年9月時点） - YAMDAS現更新履歴&#34;&gt;note が出版社御用達のプラットフォームになっている&lt;/a&gt;ように &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; は（決済可能な）エンジニア御用達のプラットフォームになれればいいねぇ。&lt;/p&gt;
&lt;p&gt;というわけで，とりあえずアカウントを作ってみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel&#34;&gt;Spiegel | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日本のサービスは &lt;code&gt;spiegel&lt;/code&gt; 名義でアカウントが取れるのが素敵♡&lt;/p&gt;
&lt;p&gt;ただ，決済情報は未入力のままにしてある。
できればクレカや銀行口座より PayPal 決済に対応して欲しい。
&lt;a href=&#34;https://tatsu-zine.com/&#34;&gt;達人出版会&lt;/a&gt;も PayPal 決済だし，技術系のサービスなんだからその方がいいと思うのだが&amp;hellip;&lt;/p&gt;
&lt;h2&gt;“Tech” と “Idea” という色分け&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; では “Tech” と “Idea” の2つの固定カテゴリが用意されていて，投稿する記事は必ずどちらかのカテゴリに含まれる。
&lt;a href=&#34;https://zenn.dev/tech-or-idea&#34; title=&#34;投稿カテゴリー「Tech」「Idea」の選び方 | Zenn&#34;&gt;説明&lt;/a&gt;によると&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;dl&gt;
&lt;dt&gt;Tech&lt;/dt&gt;
&lt;dd&gt;&lt;q&gt;プログラミングやソフトフェア開発、インフラなどに関する技術記事ならTechを選びます&lt;/q&gt;&lt;/dd&gt;
&lt;dt&gt;Idea&lt;/dt&gt;
&lt;dd&gt;&lt;q&gt;個人的な意見やポエム、キャリアについての記事、キュレーション記事ならIdeaを選びます&lt;/q&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://zenn.dev/tech-or-idea&#34;&gt;投稿カテゴリー「Tech」「Idea」の選び方 | Zenn&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なんだそうだ。
Qiita で技術記事と所謂「ポエム」が入り混じって出てくる状況を見れば妥当な措置だろう。
まぁ，悩んだら “Idea” にするのがいいんだろうねぇ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; との連携&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; では &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; リポジトリから記事を deploy することができる。
具体的な手順は以下の記事を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/connect-to-github&#34;&gt;GitHubリポジトリでZennのコンテンツを管理する | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし，いくつか制限があって&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リポジトリ上の記事を削除しても &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; に反映されない&lt;/li&gt;
&lt;li&gt;一度 &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; に deploy された記事の slug は変更できない（別の記事として扱われる）&lt;/li&gt;
&lt;li&gt;既に &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; でオン書きしたコンテンツは &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; に反映されない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ようだ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; でリポジトリを作る際は，リポジトリ名は任意だが， &lt;code&gt;.gitignore&lt;/code&gt; や &lt;code&gt;README.md&lt;/code&gt; は作成しなくてよい。
これらは後述する &lt;code&gt;zenn-cli&lt;/code&gt; ツールで作成される。&lt;/p&gt;
&lt;h2&gt;zenn-cli ツールの導入&lt;/h2&gt;
&lt;p&gt;まずは &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 環境に node.js をインストールしてしまおう（まだ導入していない場合）。
こんな感じでいいだろう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -sL https://deb.nodesource.com/setup_current.x | sudo -E bash -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install -y nodejs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次に，作成した &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; リポジトリを適当な場所に &lt;code&gt;git clone&lt;/code&gt; し，リポジトリのあるディレクトリに移動する。
まずは npm の初期化から。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cd ~/workspace
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gh repo clone spiegel-im-spiegel/zenn-docs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cd zenn-docs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ npm init --yes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Wrote to /home/username/workspace/zenn-docs/package.json:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;name&amp;#34;: &amp;#34;zenn-docs&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;description&amp;#34;: &amp;#34;## Links&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;scripts&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;test&amp;#34;: &amp;#34;echo \&amp;#34;Error: no test specified\&amp;#34; &amp;amp;&amp;amp; exit 1&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;repository&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;type&amp;#34;: &amp;#34;git&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;url&amp;#34;: &amp;#34;git+https://github.com/spiegel-im-spiegel/zenn-docs.git&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;keywords&amp;#34;: [],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;author&amp;#34;: &amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;license&amp;#34;: &amp;#34;ISC&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;bugs&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;url&amp;#34;: &amp;#34;https://github.com/spiegel-im-spiegel/zenn-docs/issues&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;homepage&amp;#34;: &amp;#34;https://github.com/spiegel-im-spiegel/zenn-docs#readme&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; は弄らなくて大丈夫。
続けて &lt;code&gt;zenn-cli&lt;/code&gt; ツールをインストールする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ npm install zenn-cli
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+ zenn-cli@0.1.29
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;added 5 packages from 3 contributors, removed 3 packages, updated 3 packages, moved 1 package and audited 905 packages in 42.516s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;found 5 low severity vulnerabilities
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  run `npm audit fix` to fix them, or `npm audit` for details
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なんか不穏なメッセージが見えるが大丈夫か，これ。 &amp;hellip;まぁいいや&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
次いってみよう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;zenn-cli&lt;/code&gt; ツールがインストールできたらリポジトリ内を初期化する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ npx zenn init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  🎉Done!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  早速コンテンツを作成しましょう
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  👇新しい記事を作成する
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  $ zenn new:article
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  👇新しい本を作成する
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  $ zenn new:book
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  👇表示をプレビューする
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  $ zenn preview
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでリポジトリ内に &lt;code&gt;articles/&lt;/code&gt; および &lt;code&gt;books/&lt;/code&gt; ディレクトリが作成され，さらに &lt;code&gt;.gitignore&lt;/code&gt; および &lt;code&gt;README.md&lt;/code&gt; ファイルも作成される。
ちなみに &lt;code&gt;.gitignore&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;node_modules
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.DS_Store
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;何ともシンプルだが，これで &lt;code&gt;zenn-cli&lt;/code&gt; インストール時に作成される &lt;code&gt;node_modules/&lt;/code&gt; ディレクトリはリポジトリから除外される。&lt;/p&gt;
&lt;p&gt;ここまで出来たら一度コミットしておいたほうがいいだろう。&lt;/p&gt;
&lt;h2&gt;記事の作成&lt;/h2&gt;
&lt;p&gt;入力ファイルの作成には以下のコマンドを打つ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ npx zenn new:article
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;📄d309af5057a827deda35.md created.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このファイル名がそのまま slug として URL のパスになる。
Slug は &lt;code&gt;zenn-cli&lt;/code&gt; ツールが適当に生成するのでユーザは考えなくともよい。&lt;/p&gt;
&lt;p&gt;もし slug を指定したいのであれば &lt;code&gt;--slug&lt;/code&gt; オプションを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ npx zenn new:article --slug hello-zenn-world
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;📄hello-zenn-world.md created.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし slug 文字列には以下の制限がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;半角英数字（a-z, 0-9）とハイフン（-）の 12〜50 字の組み合わせのみ有効&lt;/li&gt;
&lt;li&gt;&lt;code&gt;articles&lt;/code&gt; 以下のファイルはディレクトリ階層に出来ない（フラットな構成）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;books&lt;/code&gt; の場合は「本」ごとに slug を指定できる。本の slug 以下はフラットな構成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slug 文字列が短いとエラーになるのでご注意を。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ npx zenn new:article --slug hello
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;エラー：slugの値（hello）が不正です。半角英数字（a-z0-9）とハイフン（-）の12〜50字の組み合わせにしてください
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;作成したファイルの中身は，以下のように front matter のひな型のみが書き込まれている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emoji&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;🎉&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tech&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# tech: 技術記事 / idea: アイデア&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;topics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;published&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;emoji&lt;/code&gt; 項目は，記事のアテンションに使われるのだが，毎回ランダムな文字で初期化されるようだ。
絵文字を直接入力することはないのだが &lt;a href=&#34;https://www.webfx.com/tools/emoji-cheat-sheet/&#34; title=&#34;🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more&#34;&gt;GitHub markdown&lt;/a&gt; のように文字列で指定できないものかねぇ。&lt;/p&gt;
&lt;h2&gt;プレビューが素敵！&lt;/h2&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2020-09-20 更新】&lt;/strong&gt;
以前プレビュー機能が動かないと書いたが，他でも &lt;a href=&#34;https://github.com/zenn-dev/zenn-roadmap/issues/37&#34; title=&#34;npx zenn preview でエラーが大量に吐き出される · Issue #37 · zenn-dev/zenn-roadmap&#34;&gt;Issue が上がっていた&lt;/a&gt;らしく，対応されていた。
感謝！&lt;/p&gt;
&lt;p&gt;この節は，以前の内容から差し替えている。
なお，障害報告は &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の &lt;a href=&#34;https://github.com/zenn-dev/zenn-roadmap/issues&#34;&gt;zenn-dev/zenn-roadmap/issues&lt;/a&gt; に上げてほしいとのこと。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;以下のコマンドでプレビュー用のローカルサーバが起動する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ npx zenn preview
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;👀Preview on http://localhost:8000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;画面はこんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./preview.png&#34;&gt;&lt;img src=&#34;./preview.png&#34; srcset=&#34;./preview.png 1181w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;おおっ！ 間違いまで指摘してくれるのか。
こりゃあ，ええ。&lt;/p&gt;
&lt;p&gt;エディタの markdown プレビュー機能でもある程度は見れるけど，やっぱサービス立ち上げてブラウザで確認できるのがいいよね。&lt;/p&gt;
&lt;p&gt;うんうん。&lt;/p&gt;
&lt;!--
プレビュー用のローカルサーバを起動しようとしたら

```text
$ npx zenn preview
(node:126485) UnhandledPromiseRejectionWarning: Error: Could not find a valid build in the &#39;/home/username/workspace/zenn-docs/.next&#39; directory! Try building your app with &#39;next build&#39; before starting the server.
    at Server.readBuildId (/home/username/workspace/zenn-docs/node_modules/next/dist/next-server/server/next-server.js:113:355)
    at new Server (/home/username/workspace/zenn-docs/node_modules/next/dist/next-server/server/next-server.js:3:120)
    at Object.createServer [as default] (/home/username/workspace/zenn-docs/node_modules/next/dist/server/next.js:2:638)
    at /home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:53:41
    at step (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:33:23)
    at Object.next (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:14:53)
    at /home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:8:71
    at new Promise (&lt;anonymous&gt;)
    at __awaiter (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:4:12)
    at Object.exports.build (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:48:12)
(Use `node --trace-warnings ...` to show where the warning was created)
(node:126485) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 3)
(node:126485) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

てな感じに例外を吐いて落っこちた。

まぁ，プレビューなくても問題はないのだが...
--&gt;
&lt;h2&gt;とりあえず私も&amp;hellip;&lt;/h2&gt;
&lt;p&gt;まずは Qiita に置いてる記事の一部を移行してみるか。
古すぎて使えない記事はダメだけど（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/connect-to-github&#34;&gt;GitHubリポジトリでZennのコンテンツを管理する | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/install-zenn-cli&#34;&gt;Zenn CLIをインストールする | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/zenn-cli-guide&#34;&gt;Zenn CLIを使ってコンテンツを作成する | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/markdown-guide&#34;&gt;ZennのMarkdown記法 | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-09-17-github-cli-1-0-is-now-available/&#34;&gt;GitHub CLI 1.0 is now available - The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/morinokami/articles/hello-github-cli&#34;&gt;GitHub CLI 1.0 がリリースされたので使ってみた | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://linuxfan.info/install_nodejs_on_ubuntu_debian&#34;&gt;Ubuntu/Debianに最新のNode.jsをインストールする一番良い方法 | LFI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.webfx.com/tools/emoji-cheat-sheet/&#34;&gt;🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; 側に問い合わせてみたが，セキュリティ上の問題はないらしい。「あまり精神的に良いものではないのでそのうちなんとかしようと思っています」とのこと（笑）&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
</feed>
