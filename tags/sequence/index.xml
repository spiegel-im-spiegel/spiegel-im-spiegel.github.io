<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of Sequence - text.Baldanders[.]info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/sequence/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/sequence/index.xml" />
	<id>tag:text.Baldanders[.]info,2018-12-28:/tags</id>
	<updated>2018-12-28T18:18:03+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>真面目に PlantUML (2) : シーケンス図</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/" />
		<id>tag:text.Baldanders[.]info,2018-12-28:/remark/2018/12/plantuml-2-sequence-diagram/</id>
		<published>2018-12-28T09:18:03+00:00</published>
		<updated>2019-11-30T13:55:50+00:00</updated>
		<summary>さっそく今回はシーケンス図を PlantUML で書いてみようか。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34; target=&#34;_blank&#34; title=&#34;真面目に PlantUML (1) : PlantUML のインストール&#34;&gt;前回&lt;/a&gt;でインストールまで終わったので，今回から各図の書き方について記しておく。
なお，今回から &lt;code&gt;skinparam&lt;/code&gt; 定義をまとめた &lt;a href=&#34;https://github.com/spiegel-im-spiegel/plantuml-sample/blob/master/skinparams.iuml&#34; target=&#34;_blank&#34; title=&#34;plantuml-sample/skinparams.iuml at master · spiegel-im-spiegel/plantuml-sample&#34;&gt;&lt;code&gt;skinparams.iuml&lt;/code&gt;&lt;/a&gt; ファイルを用意し，このファイルを食わせることで見た目の調整を行うことにする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ java -Dfile.encoding=UTF-8 -jar plantuml.jar -nometadata -charset UTF-8 -config skinparams.iuml *.puml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;さっそく今回はシーケンス図を &lt;a href=&#34;http://plantuml.com/&#34; target=&#34;_blank&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で書いてみようか。&lt;/p&gt;
&lt;h2&gt;目次&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34; target=&#34;_blank&#34;&gt;PlantUML のインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/&#34; target=&#34;_blank&#34;&gt;シーケンス図&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34; target=&#34;_blank&#34;&gt;クラス図&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/07/plantuml-4-entity-relationship-diagrams/&#34; target=&#34;_blank&#34;&gt;実体関連図&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;オブジェクトとライフライン&lt;/h2&gt;
&lt;p&gt;UML のシーケンス図（sequence diagram）はオブジェクト同士のやり取り（相互作用）を時系列で表したものである。
オブジェクトの粒度は設計により様々で，人やシステムを表す場合もあればクラス単位の場合もある。
たとえば Alice と Bob が挨拶を交わす場合は&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./hello.puml&#34;&gt;&lt;img src=&#34;./hello.png&#34; srcset=&#34;./hello.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;と表す。
上の矩形がオブジェクトを表す。
そこから真下に伸びる点線は「ライフライン（lifeline）」と呼ばれているもので，上から下に時間が進行している。
横向きの矢印は「メッセージ（message）」と呼ばれていて，一方のオブジェクトからもう一方へ何らかのアクションを起こしたことを示している。&lt;/p&gt;
&lt;p&gt;上図の場合は，まず Alice から Bob へ “hello” を行い，その後に Bob から Alice へ “hello” を行ったことを表す。
ただし，この時点では2つの “hello” に関係があるかどうかは分からない。&lt;/p&gt;
&lt;p&gt;UML のシーケンス図ではオブジェクトは矩形で表されるが &lt;a href=&#34;http://plantuml.com/&#34; target=&#34;_blank&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; には以下の図形も用意されている&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

actor Actor
participant Participant
boundary Boundary
control Control
entity Entity
database Database
collections Collections

@enduml
&lt;/code&gt;&lt;/pre&gt;&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./objects.puml&#34;&gt;&lt;img src=&#34;./objects.png&#34; srcset=&#34;./objects.png 1950w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;h2&gt;メインフレーム&lt;/h2&gt;
&lt;p&gt;全体を囲むフレームを表示する場合には &lt;code&gt;mainframe&lt;/code&gt; で指定する。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

mainframe sd Hello World

participant Alice
participant Bob

Alice-&amp;gt;&amp;gt;Bob : hello
Alice&amp;lt;&amp;lt;-Bob : hello

@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./mainframe.puml&#34;&gt;&lt;img src=&#34;./mainframe.png&#34; srcset=&#34;./mainframe.png 684w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;h2&gt;メッセージ詳細&lt;/h2&gt;
&lt;p&gt;シーケンス図におけるメッセージのやりとりについて，いくつかパターンを書いてみる。&lt;/p&gt;
&lt;h3&gt;同期メッセージ（Synchronous Message）&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt; B : Synchronous Message
activate B

B -&amp;gt; B : Internal call

A &amp;lt;&amp;lt;-- B : Reply Message
deactivate B

@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./sync.puml&#34;&gt;&lt;img src=&#34;./sync.png&#34; srcset=&#34;./sync.png 857w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;矢印の種類に注意。&lt;/p&gt;
&lt;p&gt;「メッセージ」となっているが必ずしも通信を行っているわけではなく，相手オブジェクトのメソッドを呼び出す場合もこのような記述になる。&lt;/p&gt;
&lt;p&gt;Object B のライフラインにある縦長の矩形は「実行仕様（execution specification）」と呼ばれるもので，その期間中に何らかの処理を行っていることを示す。
&lt;a href=&#34;http://plantuml.com/&#34; target=&#34;_blank&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;activate&lt;/code&gt; および &lt;code&gt;deactivate&lt;/code&gt; の組み合わせで指定可能（直前のメッセージがトリガとなる）。
Object B は Object A からのメッセージを受けて内部処理を行って結果を Object A に返しているわけやね。&lt;/p&gt;
&lt;h3&gt;非同期メッセージ（Asynchronous Message）&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B
participant &amp;#34;Object C&amp;#34; as C

A -&amp;gt;&amp;gt; C : Asynchronous Message
activate C

A -&amp;gt;&amp;gt; B : Asynchronous Message
activate B

hnote over A : Waiting...

A &amp;lt;&amp;lt;-- B : Reply Message
deactivate B

A &amp;lt;&amp;lt;-- C : Reply Message
deactivate C

@enduml
&lt;/code&gt;&lt;/pre&gt;&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./async.puml&#34;&gt;&lt;img src=&#34;./async.png&#34; srcset=&#34;./async.png 1181w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;矢印の種類，特に同期メッセージとの違いに注意。&lt;/p&gt;
&lt;p&gt;Object A と Object B の間，および Object A と Object C の間は同期していないため，処理の終了を待っているわけですね。
分かります。
ちなみに &lt;code&gt;hnote&lt;/code&gt; はコメントを表す。
&lt;code&gt;note&lt;/code&gt; だと付箋紙っぽい図形だが &lt;code&gt;hnote&lt;/code&gt; なら六角形（hexagon）になる。&lt;/p&gt;
&lt;h3&gt;メッセージの不達&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt;&amp;gt; B : Asynchronous Message
activate B

hnote over A : Waiting...

A x&amp;lt;-- B : No Reply
deactivate B

hnote over A : Timeout

@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./timeout.puml&#34;&gt;&lt;img src=&#34;./timeout.png&#34; srcset=&#34;./timeout.png 790w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;異常系シーケンスでよく見かけるやつ。
この例は Object B からの応答がなくてタイムアウトしちゃった状態を表す。&lt;/p&gt;
&lt;h3&gt;スコープ外からのメッセージ（Found/Lost Message）&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

[o-&amp;gt;&amp;gt; A : Found Message
activate A

A -&amp;gt; B : Synchronous Message
activate B

B -&amp;gt; B : Internal call
activate B

B -&amp;gt;&amp;gt;o] : Lost Message
deactivate B

A &amp;lt;&amp;lt;-- B : Reply Message
deactivate B

@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./found-lost.puml&#34;&gt;&lt;img src=&#34;./found-lost.png&#34; srcset=&#34;./found-lost.png 1126w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;スコープ外のオブジェクトとのやり取りを表す。
メッセージがロストしているわけではない。
本当は黒丸なんだけど，何故か黒丸が使えない。&lt;/p&gt;
&lt;h2&gt;複合フラグメント（Combined Fragment）&lt;/h2&gt;
&lt;p&gt;シーケンス図で条件分岐やループなどの制御構造を表現するために以下のような「複合フラグメント」を記述できる。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

actor Alice
actor Bob

Alice -&amp;gt;&amp;gt; Bob: Hello

alt successful case
  Bob --&amp;gt;&amp;gt; Alice: Hello
else failure case
  Bob --&amp;gt;&amp;gt; Alice: Who?
  loop 3 times
    Alice -&amp;gt;&amp;gt; Bob: Hello again
  end loop
end alt

@enduml
&lt;/code&gt;&lt;/pre&gt;&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./fragment.puml&#34;&gt;&lt;img src=&#34;./fragment.png&#34; srcset=&#34;./fragment.png 596w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;この例では &lt;code&gt;alt ... else ... end&lt;/code&gt;, &lt;code&gt;loop ... end&lt;/code&gt; で囲まれた部分が複合フラグメントに相当する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; target=&#34;_blank&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では複合フラグメントとして以下のものが使える（&lt;code&gt;group&lt;/code&gt; は汎用）。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Operator&lt;/th&gt;
          &lt;th&gt;&lt;a href=&#34;http://plantuml.com/&#34; target=&#34;_blank&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt;&lt;/th&gt;
          &lt;th&gt;意味&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;alt&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Alternative&lt;/strong&gt; 指定した条件下で分岐処理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Option&lt;/strong&gt; 指定した条件下で行う処理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Loop&lt;/strong&gt; 指定した条件下で繰り返し処理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;break&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;break&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Break&lt;/strong&gt; 指定した条件下で中断処理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;par&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;par&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Parallel&lt;/strong&gt; 並列処理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;critical&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;critical&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Critical&lt;/strong&gt; クリティカル・セッション&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;group ignore&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Ignore&lt;/strong&gt; 無効な処理または重要でない処理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;consider&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;group consider&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Consider&lt;/strong&gt; 有効な処理または重要な処理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;group assert&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Assert&lt;/strong&gt; 処理が成り立つために条件が必要なことを示す&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;neg&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;group neg&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Negation&lt;/strong&gt; 本来起こりえない処理&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;外部参照&lt;/h3&gt;
&lt;p&gt;複合フラグメントとはちょっと違うが &lt;a href=&#34;http://plantuml.com/&#34; target=&#34;_blank&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;ref&lt;/code&gt; を使ってシーケンスの一部を外部参照として表せる。
使い方は &lt;code&gt;note&lt;/code&gt;/&lt;code&gt;hnote&lt;/code&gt; と同じ。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt; B : Request

ref over A,B
  Initialize
end ref

A &amp;lt;&amp;lt;-- B : Complete

@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./refer.puml&#34;&gt;&lt;img src=&#34;./refer.png&#34; srcset=&#34;./refer.png 1215w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;これでシーケンス図を機能ごとに分解することが可能になる。&lt;/p&gt;
&lt;h2&gt;オブジェクトの生成と消滅&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; target=&#34;_blank&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;create&lt;/code&gt;/&lt;code&gt;destroy&lt;/code&gt; を使って以下のようにオブジェクトの生成と消滅を記述できる。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B
participant &amp;#34;Object C&amp;#34; as C

== Create Object ==

A -&amp;gt; B: Create Object C
activate B

create C
B-&amp;gt;C: Create

ref over B, C : Initialize

A &amp;lt;&amp;lt;-- B: Success
deactivate B

|||
== Destroy Object ==

A -&amp;gt; B: Destroy Object C
activate B

B-&amp;gt;C: Destroy
activate C

B&amp;lt;&amp;lt;--C: Done
deactivate C
destroy C

A &amp;lt;&amp;lt;-- B: Success
deactivate B

@enduml&lt;/code&gt;&lt;/pre&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./create.puml&#34;&gt;&lt;img src=&#34;./create.png&#34; srcset=&#34;./create.png 1215w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;んー。
バツの付く位置が違うような気がするが，まぁいいか。&lt;/p&gt;
&lt;p&gt;今日のところはこれで。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34; target=&#34;_blank&#34;&gt;Sequence Diagram syntax and features&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/sequence.html&#34; target=&#34;_blank&#34;&gt;シーケンス図(Sequence Diagram) - UML入門 - IT専科&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/plantuml-sample&#34; target=&#34;_blank&#34;&gt;GitHub - spiegel-im-spiegel/plantuml-sample: Samples for PlantUML&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; target=&#34;_blank&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では記述のかなりの部分を省略できるが，そのせいで文脈依存にならざるを得ない。たとえば &lt;code&gt;Alice-&amp;gt;Bob&lt;/code&gt; とだけ記述した場合，それがシーケンス図を表すのかクラス図なのか，あるいは他の図なのか分かりにくい（&lt;a href=&#34;http://plantuml.com/&#34; target=&#34;_blank&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; はシーケンス図判定の優先度が高いようだが仕様として明記されていない）。そこで &lt;a href=&#34;http://plantuml.com/&#34; target=&#34;_blank&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; でオブジェクトを定義する際は “&lt;code&gt;actor Alice&lt;/code&gt;” のように常に種別を明記する癖をつけておくと（後に再利用する上でも）いいだろう。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
</feed>
