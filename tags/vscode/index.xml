<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of vscode - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/vscode/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/vscode/index.xml" />
	<id>tag:text.Baldanders.info,2021-09-09:/tags</id>
	<updated>2021-09-09T22:20:36+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>改めて TeX Live を Ubuntu に（APT を使わずに）導入する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/09/install-texlive-in-ubuntu-again/" />
		<id>tag:text.Baldanders.info,2021-09-09:/remark/2021/09/install-texlive-in-ubuntu-again/</id>
		<published>2021-09-09T13:20:36+00:00</published>
		<updated>2021-09-10T09:57:54+00:00</updated>
		<summary>LuaLaTeX でソースコードを含む文書を PDF 出力するところまで。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;6月にパソコンを買い換えてから新しいマシンには $\mathrm{\TeX}$ 環境を入れてなかったのだが，先日『&lt;a href=&#34;https://www.amazon.co.jp/dp/4297117126?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;[改訂第8版]LaTeX2ε美文書作成入門 | 奥村晴彦, 黒木裕介 |本 | 通販 | Amazon&#34;&gt;LaTeX2ε美文書作成入門&lt;/a&gt;』第8版の&lt;a href=&#34;https://text.baldanders.info/remark/2021/09/latex-primer/&#34; title=&#34;改訂第8版『LaTeX2ε美文書作成入門』を眺める&#34;&gt;読書感想文を書いた&lt;/a&gt;ばかりなので，調子に乗って &lt;a href=&#34;http://www.tug.org/texlive/&#34; title=&#34;TeX Live - TeX Users Group&#34;&gt;TeX Live&lt;/a&gt; 2021 を入れてしまおうと思い立った。&lt;/p&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4297117126?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;[改訂第8版]LaTeX2ε美文書作成入門 | 奥村晴彦, 黒木裕介 |本 | 通販 | Amazon&#34;&gt;LaTeX2ε美文書作成入門&lt;/a&gt;』の付録Aには&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;あらかじめ &lt;code&gt;/usr/local/texlive&lt;/code&gt; というディレクトリを作成し，インストールする人の権限で書き込めるようにしておくのが簡単です&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B08MZ98Z1Q?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;［改訂第8版］LaTeX2ε美文書作成入門&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とか書かれてあって「やっぱそーなのか」と納得してしまった。
激しくダサい気がするがしょうがないか。
まぁ，今回は個人パソコンなので素直に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/
$ sudo mkdir texlive
$ sudo chown -R username:username texlive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;としてしおう。&lt;/p&gt;
&lt;p&gt;サーバ機などでは，インストール完了後にオーナーを &lt;code&gt;root&lt;/code&gt; に書き戻し&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local
$ sudo chown -R root:root texlive
$ cd texlive/2021/bin/x86_64-linux/
$ sudo ./tlmgr path add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と &lt;code&gt;/usr/local/bin/&lt;/code&gt; 等パスの通ったディレクトリへシンボリック・リンクを張っておけば複数ユーザで共有できるようになる。
アップグレード等で元に戻す場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo tlmgr path remove
$ cd /usr/local/
$ sudo chown -R username:username texlive
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という感じに，いったんシンボリック・リンクを削除してから諸々の作業を行うといいだろう。&lt;/p&gt;
&lt;h2&gt;OpenPGP 公開鍵を取ってくる&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.tug.org/texlive/&#34; title=&#34;TeX Live - TeX Users Group&#34;&gt;TeX Live&lt;/a&gt; のサイトでは検証用に OpenPGP 公開鍵を公開している。
これを取ってきて自分の鍵束にインポートしてしまおう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --fetch-key http://www.tug.org/texlive/files/texlive.asc
gpg: 鍵を&amp;#39;http://www.tug.org/texlive/files/texlive.asc&amp;#39;から要求
gpg: 鍵0D5E5D9106BAB6BC: 公開鍵&amp;#34;TeX Live Distribution &amp;lt;tex-live@tug.org&amp;gt;&amp;#34;をインポートしました
gpg: 処理数の合計: 1
gpg:               インポート: 1

$ gpg --list-keys 0D5E5D9106BAB6BC
pub   rsa2048 2016-03-19 [SC]
      C78B82D8C79512F79CC0D7C80D5E5D9106BAB6BC
uid           [  不明  ] TeX Live Distribution &amp;lt;tex-live@tug.org&amp;gt;
sub   rsa2048 2016-03-19 [E]
sub   rsa2048 2016-03-19 [S] [有効期限: 2022-07-27]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これはアレだな。
&lt;a href=&#34;http://www.tug.org/texlive/&#34; title=&#34;TeX Live - TeX Users Group&#34;&gt;TeX Live&lt;/a&gt; がアップグレードされるたびに更新しろってことだな。&lt;/p&gt;
&lt;h2&gt;インストーラのダウンロードと検証&lt;/h2&gt;
&lt;p&gt;では続きを。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ curl -L &amp;#34;https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz&amp;#34; -O
$ curl -L &amp;#34;https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz.sha512&amp;#34; -O
$ curl -L &amp;#34;https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz.sha512.asc&amp;#34; -O
$ gpg -d install-tl-unx.tar.gz.sha512.asc
gpg: 署名されたデータが&amp;#39;install-tl-unx.tar.gz.sha512&amp;#39;にあると想定します
gpg: 2021年09月08日 08時53分40秒 JSTに施された署名
gpg:                RSA鍵4CE1877E19438C70を使用
gpg: &amp;#34;TeX Live Distribution &amp;lt;tex-live@tug.org&amp;gt;&amp;#34;からの正しい署名 [不明の]
gpg: *警告*: この鍵は信用できる署名で証明されていません!
gpg:          この署名が所有者のものかどうかの検証手段がありません。
主鍵フィンガープリント: C78B 82D8 C795 12F7 9CC0  D7C8 0D5E 5D91 06BA B6BC
     副鍵フィンガープリント: D8F2 F860 57A8 57E4 2A88  106A 4CE1 877E 1943 8C70

$ sha512sum -c install-tl-unx.tar.gz.sha512
install-tl-unx.tar.gz: OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なんちう回りくどい&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
普通にダウンロードファイルに署名すりゃいいぢゃん &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ちなみに拙作の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34; title=&#34;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; を使っても&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf hash -a SHA-512 -c install-tl-unx.tar.gz.sha512
install-tl-unx.tar.gz: OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じで検証できる。
&lt;code&gt;sha512sum&lt;/code&gt; コマンドがない環境でどうぞ。
宣伝でした（笑）&lt;/p&gt;
&lt;h2&gt;よーやくインストール開始&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ tar xvf install-tl-unx.tar.gz
$ cd install-tl-20210908/
$ ./install-tl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;リポジトリを指定する必要はないみたい。
適当に近場を探してくれてるようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;======================&amp;gt; TeX Live installation procedure &amp;lt;=====================

======&amp;gt;   Letters/digits in &amp;lt;angle brackets&amp;gt; indicate   &amp;lt;=======
======&amp;gt;   menu items for actions or customizations      &amp;lt;=======
= help&amp;gt;   https://tug.org/texlive/doc/install-tl.html   &amp;lt;=======

 Detected platform: GNU/Linux on x86_64
 
 &amp;lt;B&amp;gt; set binary platforms: 1 out of 16

 &amp;lt;S&amp;gt; set installation scheme: scheme-full

 &amp;lt;C&amp;gt; set installation collections:
     40 collections out of 41, disk space required: 7135 MB

 &amp;lt;D&amp;gt; set directories:
   TEXDIR (the main TeX directory):
     /usr/local/texlive/2021
   TEXMFLOCAL (directory for site-wide local files):
     /usr/local/texlive/texmf-local
   TEXMFSYSVAR (directory for variable and automatically generated data):
     /usr/local/texlive/2021/texmf-var
   TEXMFSYSCONFIG (directory for local config):
     /usr/local/texlive/2021/texmf-config
   TEXMFVAR (personal directory for variable and automatically generated data):
     ~/.texlive2021/texmf-var
   TEXMFCONFIG (personal directory for local config):
     ~/.texlive2021/texmf-config
   TEXMFHOME (directory for user-specific files):
     ~/texmf

 &amp;lt;O&amp;gt; options:
   [ ] use letter size instead of A4 by default
   [X] allow execution of restricted list of programs via \write18
   [X] create all format files
   [X] install macro/font doc tree
   [X] install macro/font source tree
   [ ] create symlinks to standard directories

 &amp;lt;V&amp;gt; set up for portable installation

Actions:
 &amp;lt;I&amp;gt; start installation to hard disk
 &amp;lt;P&amp;gt; save installation profile to &amp;#39;texlive.profile&amp;#39; and exit
 &amp;lt;Q&amp;gt; quit

Enter command: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;必要に応じて設定を変えて（既定のままでも無問題）問題なければ &lt;code&gt;I&lt;/code&gt; を入力してインストールを開始する。
私の環境では1時間近くかかった。
お茶菓子を用意しておくか（笑）&lt;/p&gt;
&lt;p&gt;環境変数については &lt;code&gt;~/.profile&lt;/code&gt; ファイルに&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Expand $PATH to include the directory where TeX Live applications go.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;texlive_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/texlive/2021&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;texlive_bin_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/bin/x86_64-linux&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$texlive_path&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -a -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_bin_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -a -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_bin_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$texlive_bin_path&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;unset&lt;/span&gt; texlive_path texlive_bin_path
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と追記しておけばいいかな。
一応，動作確認しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ lualatex -v
This is LuaHBTeX, Version 1.13.2 (TeX Live 2021)

Execute  &amp;#39;luahbtex --credits&amp;#39;  for credits and version details.

There is NO warranty. Redistribution of this software is covered by
the terms of the GNU General Public License, version 2 or (at your option)
any later version. For more information about these matters, see the file
named COPYING and the LuaTeX source.

LuaTeX is Copyright 2021 Taco Hoekwater and the LuaTeX Team.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;マニュアルに関しては &lt;code&gt;texdoc&lt;/code&gt; コマンドを使って&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ texdoc luatex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとすれば対応する PDF ファイルが開く。
便利！&lt;/p&gt;
&lt;h2&gt;自動実行可能な外部コマンドの指定&lt;/h2&gt;
&lt;p&gt;とりあえず &lt;code&gt;shell_escape_commands&lt;/code&gt; の値を変更しておく。
インストール直後は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ kpsewhich -var-value=shell_escape_commands
bibtex,bibtex8,extractbb,gregorio,kpsewhich,makeindex,repstopdf,texosquery-jre8,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;となっているので &lt;code&gt;/usr/ocal/texlive/texmf-local/web2c/texmf.cnf&lt;/code&gt; ファイルを作成し以下を記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;shell_escape_commands = \
bibtex,bibtex8,pbibtex,jbibtex,\
extractbb,\
gregorio,\
kpsewhich,\
makeindex,mendex,\
repstopdf,epspdf,\
texosquery-jre8,\
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;shell_escape_commands&lt;/code&gt; の値が上書きされて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ kpsewhich -var-value=shell_escape_commands
bibtex,bibtex8,pbibtex,jbibtex,extractbb,gregorio,kpsewhich,makeindex,mendex,repstopdf,epspdf,texosquery-jre8,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;となる。&lt;/p&gt;
&lt;p&gt;設定を変更したら &lt;code&gt;mktexlsr&lt;/code&gt; で状態を更新しておくこと。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ mktexlsr
mktexlsr: Updating /usr/local/texlive/2021/texmf-config/ls-R... 
mktexlsr: Updating /usr/local/texlive/2021/texmf-dist/ls-R... 
mktexlsr: Updating /usr/local/texlive/2021/texmf-var/ls-R... 
mktexlsr: Updating /usr/local/texlive/texmf-local/ls-R... 
mktexlsr: Done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;LuaLaTeX でなんか出力してみる&lt;/h2&gt;
&lt;p&gt;そうだ。
プログラムコードを出してみよう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/10/writing-code-with-lualatex/&#34;&gt;LuaLaTeX でコードを書いてみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その前に &lt;a href=&#34;https://ctan.org/tex-archive/macros/latex/contrib/listings&#34; title=&#34;CTAN: /tex-archive/macros/latex/contrib/listings&#34;&gt;&lt;code&gt;listings&lt;/code&gt;&lt;/a&gt; パッケージで Go コードの syntax highlight が効くよう &lt;a href=&#34;https://github.com/julienc91/listings-golang&#34; title=&#34;julienc91/listings-golang: Golang support for the listings package in LaTeX&#34;&gt;&lt;code&gt;listings-golang&lt;/code&gt;&lt;/a&gt; を取ってくる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/texlive/texmf-local/tex/latex/
$ git clone git@github.com:julienc91/listings-golang.git
$ mktexlsr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;そうそう。
$\mathrm{Lua\LaTeX}$ を使うならフォントキャッシュも念の為にアップデートしておくか。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ luaotfload-tool -fu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用意したテキストはこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span class=&#34;k&#34;&gt;\documentclass&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;jlreq&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;\usepackage&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;[jis2004,deluxe]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;luatexja-preset&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;% Japanese fonts
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;\setmonofont&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;[AutoFakeSlant,BoldItalicFeatures={FakeSlant},Scale=MatchLowercase]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;Inconsolatazi4&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;% use Inconsolata
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;\usepackage&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;graphicx,xcolor&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;% \usepackage{listings}
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;\usepackage&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;listings-golang&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;% import this package after listings
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;\lstset&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;
    frame=single,
    basicstyle=&lt;span class=&#34;k&#34;&gt;\small\ttfamily&lt;/span&gt;,
    tabsize=4,
    commentstyle=&lt;span class=&#34;k&#34;&gt;\color&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;darkgray&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;,
    keywordstyle=&lt;span class=&#34;k&#34;&gt;\color&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;brown&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;\bfseries&lt;/span&gt;,
    stringstyle=&lt;span class=&#34;k&#34;&gt;\color&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;blue&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;,
    showstringspaces=false
&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;\begin&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;document&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;\section&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;Go 言語による Hello World&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;\begin&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;lstlisting&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;[language=Golang]
package main

import &amp;#34;fmt&amp;#34;

func main() &lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;
    for i := 0; i &amp;lt; 10; i++ &lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;
        fmt.Println(&amp;#34;Hello, world&amp;#34;) //Hello, 世界
    &lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;\end&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;lstlisting&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;\section&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;シェルスクリプト&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;\begin&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;lstlisting&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;[language=sh]
#!/bin/sh
for i in `seq 100`; do
  j=&amp;#34;&lt;span class=&#34;s&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;i&amp;#34;
&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;  if &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt; `expr &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;$&lt;/span&gt;i &lt;span class=&#34;c&#34;&gt;% 3` == 0 ]; then echo -n &amp;#39;Fizz&amp;#39;; j=&amp;#39;&amp;#39;; fi
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;  if [ `expr &lt;span class=&#34;s&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;i &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;% 5` == 0 ]; then echo -n &amp;#39;Buzz&amp;#39;; j=&amp;#39;&amp;#39;; fi
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;  echo &amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;$&lt;/span&gt;j&amp;#34;
done
&lt;span class=&#34;k&#34;&gt;\end&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;lstlisting&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;\end&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;{&lt;/span&gt;document&lt;span class=&#34;nb&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;へっへっへ。
&lt;code&gt;jlreq&lt;/code&gt; ドキュメントクラスを使ってみたぜ。&lt;/p&gt;
&lt;p&gt;これを処理した結果は以下の通り。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./sample.pdf&#34;&gt;&lt;img src=&#34;./sample.png&#34; srcset=&#34;./sample.png 1252w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;sample.pdf&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./sample.pdf&#34;&gt;sample.pdf&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;うんうん。
こんなもんだろう。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; に &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop&#34; title=&#34;LaTeX Workshop - Visual Studio Marketplace&#34;&gt;LaTeX Workshop&lt;/a&gt; を導入する&lt;/h2&gt;
&lt;p&gt;『&lt;a href=&#34;https://www.amazon.co.jp/dp/4297117126?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34; title=&#34;[改訂第8版]LaTeX2ε美文書作成入門 | 奥村晴彦, 黒木裕介 |本 | 通販 | Amazon&#34;&gt;LaTeX2ε美文書作成入門&lt;/a&gt;』でも紹介されていた &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; 用の &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=James-Yu.latex-workshop&#34; title=&#34;LaTeX Workshop - Visual Studio Marketplace&#34;&gt;LaTeX Workshop&lt;/a&gt; を導入してみた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension James-Yu.latex-workshop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;たとえば，以下の内容で &lt;code&gt;.latexmkrc&lt;/code&gt; ファイルを用意しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# LaTeX commands&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$pdflatex&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;lualatex %O -synctex=1 %S&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$latex&lt;/span&gt;               &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;uplatex %O -synctex=1 %S&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$latex_silent_switch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;-interaction=batchmode -c-style-errors&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# bibTeX commands&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$bibtex&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;upbibtex %O %B&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$biber&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;biber %O --bblencoding=utf8 -u -U --output_safechars %B&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$makeindex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;mendex %O -o %D %S&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Device Driver&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$dvipdf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;dvipdfmx %O -z9 -V 7 -o %D %S&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$dvips&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;dvips %O -z -f %S | convbkmk -u &amp;gt; %D&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$ps2pdf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;ps2pdf14 -dPDFA -dPDFACompatibilityPolicy=1 -sProcessColorModel=DeviceCMYK %O %S %D&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Typeset mode (generate a PDF)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$pdf_mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 0: do not generate a pdf , 1: using $pdflatex , 2: using $ps2pdf , 3: using $dvipdf&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Other configuration&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$pvc_view_file_via_temporary&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;$max_repeat&lt;/span&gt;                  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;したら $\mathrm{\LaTeX}$ テキストを保存するたびに上の設定でタイプセットが自動実行されて PDF まで作ってしまうわけですよ。
めっさ便利。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.tug.org/texlive/acquire-netinstall.html&#34;&gt;Installing TeX Live over the Internet - TeX Users Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://texwiki.texjp.org/&#34;&gt;TeX Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-texlive-in-ubuntu/&#34;&gt;TeX Live を Ubuntu に（APT を使わずに）導入する&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/upgrade-texlive-from-2018-to-2019/&#34;&gt;TeX Live 2018 から 2019 へのアップグレード&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/04/upgrade-texlive-2020/&#34;&gt;TeX Live 2020 へのアップグレード&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4297117126?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41xmBlTiwlL._SL160_.jpg&#34; width=&#34;126&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4297117126?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;[改訂第8版]LaTeX2ε美文書作成入門&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;奥村晴彦 (著), 黒木裕介 (著)&lt;/dd&gt;
    &lt;dd&gt;技術評論社 2020-11-14&lt;/dd&gt;
    &lt;dd&gt;大型本&lt;/dd&gt;
    &lt;dd&gt;4297117126 (ASIN), 9784297117122 (EAN), 4297117126 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;2020年末に第8版が出てたのに気付かなかったよ。可能なら紙の本も買って常に側に置いておくのが吉。&lt;a href=&#34;https://gihyo.jp/book/2020/978-4-297-11712-2&#34;&gt;版元&lt;/a&gt;には PDF 版もある。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-09-05&#34;&gt;2021-09-05&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- LaTeX2ε美文書作成入門 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;電子署名の検証で「&lt;code&gt;*警告*: この鍵は信用できる署名で証明されていません!&lt;/code&gt;」と表示されているが，気にしなくてよい。その前の「&lt;code&gt;&amp;quot;TeX Live Distribution &amp;lt;tex-live@tug.org&amp;gt;&amp;quot;からの正しい署名&lt;/code&gt;」が表示されていればOK。警告が出るのはインポートした公開鍵に自鍵で署名したり有効度を設定したりしてないからだが，直接手渡しされた鍵でもないのに安易に信用するのは危険であると言っておこう。もちろん何らかの手段で鍵と所有者が確定できるのであれば署名するなり有効度を設定するなりすればよい。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Java と VS Code</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/08/java-with-vscode/" />
		<id>tag:text.Baldanders.info,2021-08-18:/remark/2021/08/java-with-vscode/</id>
		<published>2021-08-18T13:20:30+00:00</published>
		<updated>2021-09-08T10:11:12+00:00</updated>
		<summary>どうせなら VS Code で環境を作るのがいいよねってことで</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/installing-vscode-again/&#34;&gt;パソコンに Visual Studio Code を導入する（再チャレンジ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/golang-with-vscode/&#34;&gt;Go と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/markdown-with-vscode/&#34;&gt;Markdown と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/08/java-with-vscode/&#34;&gt;Java と VS Code&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;仕事で Spring Boot なコードを書くことになって，今更ながら基本から勉強し直している。
で，どうせなら &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; で環境を作るのがいいよねってことで，覚え書きとして記しておく。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack&#34; title=&#34;Extension Pack for Java - Visual Studio Marketplace&#34;&gt;Extension Pack for Java&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension vscjava.vscode-java-pack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これをインストールすると以下のパッケージも併せてインストールされる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=redhat.java&#34;&gt;Language Support for Java(TM) by Red Hat - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug&#34;&gt;Debugger for Java - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test&#34;&gt;Test Runner for Java - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven&#34;&gt;Maven for Java - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency&#34;&gt;Project Manager for Java - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode&#34;&gt;Visual Studio IntelliCode - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これだけあれば基本的な道具は一通り揃う。&lt;/p&gt;
&lt;h3&gt;みんな大好き “Hello, World!”&lt;/h3&gt;
&lt;p&gt;ここで簡単に動作確認しておこう。
以下の手順でプロジェクトの雛形を作成する。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コマンドパレットから “Java: Create Java Project” を選択する&lt;/li&gt;
&lt;li&gt;プロジェクト・タイプの一覧が表示されるので “No build tools” を選択する&lt;/li&gt;
&lt;li&gt;作業ディレクトリを選択する&lt;/li&gt;
&lt;li&gt;プロジェクト名を指定する（ここでは &lt;code&gt;hello&lt;/code&gt; と入力）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ tree hello
hello
├── README.md
├── lib
└── src
    └── App.java

2 directories, 2 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という感じにディレクトリ・ファイルが作成される。
&lt;code&gt;App.java&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;エディタ上は&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://text.baldanders.info/hello-java-code.png&#34;&gt;&lt;img src=&#34;./hello-java-code.png&#34; srcset=&#34;./hello-java-code.png 528w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;という感じに表示されているので &lt;code&gt;main()&lt;/code&gt; 関数直上の &lt;code&gt;Run&lt;/code&gt; のリンクをクリックすればコンパイル＆実行してくれる。
Java Process Console に &lt;code&gt;Hello, World!&lt;/code&gt; と表示されれば無問題。&lt;/p&gt;
&lt;h3&gt;Import 補完&lt;/h3&gt;
&lt;p&gt;Java の &lt;code&gt;import&lt;/code&gt; 宣言ってすぐに汚れるよね。
使わない &lt;code&gt;import&lt;/code&gt; とか。
逆に &lt;code&gt;import&lt;/code&gt; が足りなくてエラーになったり。&lt;/p&gt;
&lt;p&gt;こういうときはコマンドパレットから “Organize Imports” でいい感じに整形してくれる。
保存時に自動で整形するには &lt;code&gt;settings.json&lt;/code&gt; に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;java.saveActions.organizeImports&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;を追加してやればよい。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Pivotal.vscode-boot-dev-pack&#34; title=&#34;Spring Boot Extension Pack - Visual Studio Marketplace&#34;&gt;Spring Boot Extension Pack&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension Pivotal.vscode-boot-dev-pack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これも以下のパッケージを含んでいるようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Pivotal.vscode-spring-boot&#34;&gt;Spring Boot Tools - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-initializr&#34;&gt;Spring Initializr Java Support - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-boot-dashboard&#34;&gt;Spring Boot Dashboard - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;雛形プロジェクトを作る&lt;/h3&gt;
&lt;p&gt;これも動作確認しておこう。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コマンドパレットから “Spring Initializr: Generate a Maven Project” を選択する&lt;/li&gt;
&lt;li&gt;Spring Boot のバージョンを選択（2021-08-18 時点の最新は 2.5.3）&lt;/li&gt;
&lt;li&gt;使用言語を選択。もちろん Java で&lt;/li&gt;
&lt;li&gt;Group Id を入力。ここはデフォルトの &lt;code&gt;com.example&lt;/code&gt; のままにしておく&lt;/li&gt;
&lt;li&gt;Artifact Id を入力。ここもデフォルトの &lt;code&gt;demo&lt;/code&gt; のままにしておく&lt;/li&gt;
&lt;li&gt;パッケージタイプを選択。 &lt;code&gt;Jar&lt;/code&gt; と &lt;code&gt;War&lt;/code&gt; がある。とりあえす &lt;code&gt;Jar&lt;/code&gt; にしておこうか&lt;/li&gt;
&lt;li&gt;Java のバージョンを選択。無難に LTS 版の 11 を選択しておくか（JDK のインストールは別途行うこと）&lt;/li&gt;
&lt;li&gt;依存パッケージを選択。 Spring Web と Lombok は必須。あとは必要に応じて
&lt;ul&gt;
&lt;li&gt;Spring Web (必須)&lt;/li&gt;
&lt;li&gt;Lombok (必須)&lt;/li&gt;
&lt;li&gt;Spring Boot DevTools&lt;/li&gt;
&lt;li&gt;Thymeleaf&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://text.baldanders.info/choose-dependencies.png&#34;&gt;&lt;img src=&#34;./choose-dependencies.png&#34; srcset=&#34;./choose-dependencies.png 630w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;あとは作業ディレクトリを指定すれば完了。
作業ディレクトリ直下に Artifact Id で指定した名前でディレクトリが掘られ，ディレクトリ・ファイルが展開される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ tree demo
demo
├── HELP.md
├── mvnw
├── mvnw.cmd
├── pom.xml
└── src
    ├── main
    │   ├── java
    │   │   └── com
    │   │       └── example
    │   │           └── demo
    │   │               └── DemoApplication.java
    │   └── resources
    │       ├── application.properties
    │       ├── static
    │       └── templates
    └── test
        └── java
            └── com
                └── example
                    └── demo
                        └── DemoApplicationTests.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;DemoApplication.java&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DemoApplication&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DemoApplication&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このままだと何も表示できないので controller クラスと対応するテンプレートファイルを用意する。&lt;/p&gt;
&lt;p&gt;まずは &lt;code&gt;demo/src/main/java/com/example/demo/controller/DemoController.java&lt;/code&gt; ファイルを作る。
中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.example.demo.controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.stereotype.Controller&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nd&#34;&gt;@Controller&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DemoController&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;nd&#34;&gt;@GetMapping&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;demo&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次に &lt;code&gt;demo/src/main/resources/templates/demo.html&lt;/code&gt; ファイルを作る。
中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Demo&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全体の構成はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ tree demo
demo
├── HELP.md
├── mvnw
├── mvnw.cmd
├── pom.xml
└── src
    ├── main
    │   ├── java
    │   │   └── com
    │   │       └── example
    │   │           └── demo
    │   │               ├── DemoApplication.java
    │   │               └── controller
    │   │                   └── DemoController.java
    │   └── resources
    │       ├── application.properties
    │       ├── static
    │       └── templates
    │           └── demo.html
    └── test
        └── java
            └── com
                └── example
                    └── demo
                        └── DemoApplicationTests.java

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;テストとか端折ってるけどご容赦ね。&lt;/p&gt;
&lt;p&gt;あとは Spring Boot Dashboard から Start すれば OK。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://text.baldanders.info/dashboard.png&#34;&gt;&lt;img src=&#34;./dashboard.png&#34; srcset=&#34;./dashboard.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;Web ブラウザから &lt;code&gt;http://localhost:8080/&lt;/code&gt; を叩いて &lt;code&gt;Hello, World!&lt;/code&gt; と表示されれば無問題。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GabrielBB.vscode-lombok&#34; title=&#34;Lombok Annotations Support for VS Code - Visual Studio Marketplace&#34;&gt;Lombok Annotations Support for VS Code&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension GabrielBB.vscode-lombok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;@Getter&lt;/code&gt; とか &lt;code&gt;@Setter&lt;/code&gt; とか &lt;code&gt;@Slf4j&lt;/code&gt; とかの &lt;a href=&#34;https://projectlombok.org/&#34; title=&#34;Project Lombok&#34;&gt;Lombok&lt;/a&gt; アノテーションを付けると &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; がコードにエラーマークを付けることがある（ビルドはちゃんと通る）。
かなりウザいのでこの拡張機能を入れてみた。
快適！&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureappservice&#34; title=&#34;Azure App Service - Visual Studio Marketplace&#34;&gt;Azure App Service&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension ms-azuretools.vscode-azureappservice
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;VS code 上から &lt;a href=&#34;https://azure.microsoft.com/ja-jp/services/app-service/web/&#34; title=&#34;Web App Service | Microsoft Azure&#34;&gt;Azure Web Apps&lt;/a&gt; にお手軽にデプロイ出来ないかなぁ，と思って探したらありました。
やり方は以下のページの後半で紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/java/java-webapp&#34;&gt;Build and Deploy Java Web Apps to the cloud with Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;めがっさ簡単だった。
&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/app-service/deploy-github-actions&#34; title=&#34;GitHub アクションを使用して CI/CD を構成する - Azure App Service | Microsoft Docs&#34;&gt;GitHub Actions を使う&lt;/a&gt;方法とか，何なら &lt;a href=&#34;https://azure.microsoft.com/ja-jp/services/spring-cloud/&#34; title=&#34;Azure Spring Cloud – Spring Boot アプリの開発 | Microsoft Azure&#34;&gt;Azure Spring Cloud&lt;/a&gt; を契約する手もあるのだが，今回はとにかく JAR か WAR を投げれればよかったので。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/takumi_links/items/fe71cfeb4dfaa76fbe31&#34;&gt;VSCodeで作るJava開発環境＆Spring Bootアプリケーション入門 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.pleiades.io/spring-boot/docs/current/reference/html/deployment.html&#34;&gt;Spring Boot アプリケーションのデプロイ - リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/koukibuu3/items/77734596483ffd788931&#34;&gt;SpringBootをVSCodeで使ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kohei.life/spring-boot-build-deploy/&#34;&gt;【Maven編】Spring Bootのビルドとデプロイ方法 | こへいブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ameblo.jp/kazusa-g/entry-12536838291.html&#34;&gt;VSCodeとDockerでSpring Boot + PostgreSQL開発環境を作る(2) | Sales8開発者日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learning-collection.com/springboot-%e3%83%ad%e3%82%b0%e3%82%a4%e3%83%b3%e7%94%bb%e9%9d%a2%e4%bd%9c%e6%88%90/&#34;&gt;SpringBoot ログイン画面作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/t-shin0hara/items/eaf44e4f48341616ab97&#34;&gt;Spring Boot + Spring Data JPA ～サンプルアプリ実装～ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://itref.fc2web.com/java/jpa/annotation.html&#34;&gt;JPA (Java Persistence API)のアノテーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/NagaokaKenichi/items/c6d1b76090ef5ef39482&#34;&gt;Thymeleafチートシート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://one-it-thing.com/2074/&#34;&gt;SpringBootアプリにBootstrap4を追加（WebJars使用） – One IT Thing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codeflow.site/ja/article/spring-boot__spring-boot-slf4j-logging-example&#34;&gt;SpringブートSLF4Jロギングの例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.getdocs.org/spring-boot-spring-boot-slf4j-logging-example/&#34;&gt;SpringブートSLF4Jロギングの例 - 開発者ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://m-shige1979.hatenablog.com/entry/2016/11/30/080000&#34;&gt;Spring bootでHttpSessionを使用する - m_shige1979のささやかな抵抗と欲望の日々&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/t-yama-3/items/572fabc873b4b6a0fc7c&#34;&gt;Spring Boot で Ajax を実装する単純なサンプル - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/opengl-8080/items/671ffd4bf84fe5e32557&#34;&gt;Lombok 使い方メモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitto.jp/posts/%E6%8A%80%E8%A1%93/Windows/vscode-java-organize-import/&#34;&gt;VScodeでJavaのインポート文をFixしたい | 猫好きが猫以外のことも書く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/java/java-on-azure&#34;&gt;Deploy Java to Azure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0893LQ5KY?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZDTBiszCS._SL160_.jpg&#34; width=&#34;100&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B0893LQ5KY?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Spring Boot 2 入門: 基礎から実演まで Webアプリ開発入門&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;原田 けいと (著), 竹田 甘地 (著), Robert Segawa (著)&lt;/dd&gt;
    &lt;dd&gt; 2020-05-22 (Release 2020-05-22)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0893LQ5KY (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Spring Boot を勉強することになって急遽買った本。めっさ分かりやすかった。 PDF 版が欲しいくらい（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-06-13&#34;&gt;2021-06-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Spring Boot 2 入門 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41WZElZb9eL._SL160_.jpg&#34; width=&#34;128&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4621303252?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Effective Java 第3版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Joshua Bloch (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2018-10-30&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-03-17&#34;&gt;2021-03-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Effective Java 第3版 --&gt;
</content>
	</entry><entry>
		<title>Markdown と VS Code</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/02/markdown-with-vscode/" />
		<id>tag:text.Baldanders.info,2021-02-28:/remark/2021/02/markdown-with-vscode/</id>
		<published>2021-02-28T03:45:02+00:00</published>
		<updated>2021-08-18T13:21:04+00:00</updated>
		<summary>Preview 機能は個人的に必要ないのでレビューしないが，仕事で使うようなことがあれば，そのうち記事にすることもあるだろう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/installing-vscode-again/&#34;&gt;パソコンに Visual Studio Code を導入する（再チャレンジ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/golang-with-vscode/&#34;&gt;Go と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/markdown-with-vscode/&#34;&gt;Markdown と VS Code&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/08/java-with-vscode/&#34;&gt;Java と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;今回は &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; で markdown テキストを入出力する話。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one&#34; title=&#34;Markdown All in One - Visual Studio Marketplace&#34;&gt;Markdown All in One&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension yzhang.markdown-all-in-one
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Markdown 関連の拡張機能は色々あるようだが，入力支援に関してはこれで必要十分ぽい。&lt;/p&gt;
&lt;p&gt;お気に入りはテーブル整形の機能で， Linux/Ubuntu なら &lt;code&gt;[Ctrl+Shift+I]&lt;/code&gt; キー（Format Document）押下で綺麗に整形してくれる。&lt;/p&gt;
&lt;p&gt;ところが Windows 版では &lt;code&gt;[Shift+Alt+F]&lt;/code&gt; キーが Format Document に割り当てられているようだ。
プラットフォームによって違うのかよ。&lt;/p&gt;
&lt;p&gt;というわけで Windows 版の方にキー割当を合わせることにした。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Place your key bindings in this file to override the defaults
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;shift+alt+f&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.formatDocument&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorHasDocumentFormattingProvider &amp;amp;&amp;amp; editorTextFocus &amp;amp;&amp;amp; !editorReadonly &amp;amp;&amp;amp; !inCompositeEditor&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+shift+i&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-editor.action.formatDocument&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorHasDocumentFormattingProvider &amp;amp;&amp;amp; editorTextFocus &amp;amp;&amp;amp; !editorReadonly &amp;amp;&amp;amp; !inCompositeEditor&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;shift+alt+f&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.formatDocument.none&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus &amp;amp;&amp;amp; !editorHasDocumentFormattingProvider &amp;amp;&amp;amp; !editorReadonly&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+shift+i&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-editor.action.formatDocument.none&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus &amp;amp;&amp;amp; !editorHasDocumentFormattingProvider &amp;amp;&amp;amp; !editorReadonly&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&#34; title=&#34;Prettier - Code formatter - Visual Studio Marketplace&#34;&gt;Prettier - Code formatter&lt;/a&gt; との競合&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension esbenp.prettier-vscode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Markdown 専用というわけではないが JavaScript/TypeScript, CSS/SCSS/Less, HTML, JSON, GraphQL, YAML など幅広い言語に対応している整形ツールで，しかも plugin 拡張もできるらしい。
もちろん markdown テキストにも対応している。&lt;/p&gt;
&lt;p&gt;で，これと &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one&#34; title=&#34;Markdown All in One - Visual Studio Marketplace&#34;&gt;Markdown All in One&lt;/a&gt; の整形機能（Format Document）が被るわけですよ。
そこで，どちらの機能を使うか言語ごとに設定できるようになっている。
私は &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one&#34; title=&#34;Markdown All in One - Visual Studio Marketplace&#34;&gt;Markdown All in One&lt;/a&gt; 優先でこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;[markdown]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.defaultFormatter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yzhang.markdown-all-in-one&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;さらにファイル保存時に変更した箇所だけを整形する，なんてな設定も言語ごとにできるようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;[markdown]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.defaultFormatter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yzhang.markdown-all-in-one&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.formatOnSave&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.formatOnSaveMode&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;modifications&amp;#34;&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ちなみに &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig&#34; title=&#34;EditorConfig for VS Code - Visual Studio Marketplace&#34;&gt;EditorConfig for VS Code&lt;/a&gt; が有効な場合は &lt;code&gt;.editorconfig&lt;/code&gt; の設定（インデントや改行コードなど）を考慮してくれるようだ。
これを無効にするには “Use Editor Config” の項目を OFF にする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;prettier.useEditorConfig&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし， &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig&#34; title=&#34;EditorConfig for VS Code - Visual Studio Marketplace&#34;&gt;EditorConfig&lt;/a&gt; が有効な場合でも &lt;code&gt;.prettierrc&lt;/code&gt; ファイルなどによる &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&#34; title=&#34;Prettier - Code formatter - Visual Studio Marketplace&#34;&gt;Prettier&lt;/a&gt; 独自の設定がある場合は，そちらのほうが優先されるようだ。
ややこしい&amp;hellip;&lt;/p&gt;
&lt;h2&gt;自動補完を有効にする&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; の売りのひとつはスニペットを含む強力な自動補完機能だが，何故か markdown ファイルには自動補完が効かない。
と思ったら，既定で無効になっているらしい。
いや，有効にしとけよ。&lt;/p&gt;
&lt;p&gt;というわけで &lt;code&gt;settings.json&lt;/code&gt; に以下の設定を手動で書き込む。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;[markdown]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.quickSuggestions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.snippetSuggestions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;top&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでスニペットを優先して自動補完候補に挙げてくれる。&lt;/p&gt;
&lt;h2&gt;Markdown Preview 機能は必要か&lt;/h2&gt;
&lt;p&gt;私個人で言うなら No で，仕事なら場合によっては Yes かな。&lt;/p&gt;
&lt;p&gt;そもそも markdown テキストってのは，見出しや段落や箇条書き等の文書構造がそのままでも human-readable である点が利点と言える。
さらに言えば，ここのブログは &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; の shortcodes 等で入力自体をカスタマイズしまくってるので，ただの markdown preview なんか使いものにならないのだ（&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; はサーバ・モードで起動できるので，リアルタイムでブラウザ表示を確認しながら記事を書いている）。&lt;/p&gt;
&lt;p&gt;一方で， Office ツールなどレガシーな環境を捨てて markdown 等の構造化テキストをベースにしたドキュメンテーションをしようとするなら，それなりにリッチな markdown preview 機能と PDF 等へ「最終出力」するためのツールチェーンが必要となる。&lt;/p&gt;
&lt;p&gt;そのための手段（または道具立て）として &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; をベースに環境を整えるというのは合理的と言えるかもしれない。&lt;/p&gt;
&lt;p&gt;というわけで，以降では PDF 等への「最終出力」を念頭に置いたドキュメントツールとして幾つかの拡張機能を紹介してみる。
上述したように，私個人は全く必要ないのでレビューしないが，仕事で使うようなことがあれば，そのうち記事にすることもあるだろう。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced&#34; title=&#34;Markdown Preview Enhanced - Visual Studio Marketplace&#34;&gt;Markdown Preview Enhanced&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension shd101wyy.markdown-preview-enhanced
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TeX の数学記法あるいは &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; や &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 等の記法も認識して preview 表示できるらしい。
&lt;a href=&#34;https://graphviz.gitlab.io/_pages/doc/info/lang.html&#34; title=&#34;The DOT Language&#34;&gt;DOT&lt;/a&gt; 言語も使えるのか。
CSS をカスタマイズ可能。&lt;/p&gt;
&lt;p&gt;HTML や PDF へ出力できるようだ（PDF 出力は Chrome 経由）。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf&#34; title=&#34;Markdown PDF - Visual Studio Marketplace&#34;&gt;Markdown PDF&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension yzane.markdown-pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;コマンド一発で PDF 変換してくれる。
簡易的な出力しか出来ないのかと思ったら，意外にもかなりカスタマイズできるらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/reona396/items/40b234108f7664267db8&#34;&gt;VSCode と Markdown で技術同人誌書いたので拡張機能とかまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://h-s-hige.hateblo.jp/entry/20190405/1554467885&#34;&gt;【Visual Studio Code】Markdown PDF のスタイル(CSS)を変える方法 - Nekonote&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=marp-team.marp-vscode&#34; title=&#34;Marp for VS Code - Visual Studio Marketplace&#34;&gt;Marp for VS Code&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension marp-team.marp-vscode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://marp.app/&#34; title=&#34;Marp: Markdown Presentation Ecosystem&#34;&gt;Marp&lt;/a&gt; を使って markdown テキストからスライドを生成する。
PDF へエクスポートできるらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tomo_makes/items/aafae4021986553ae1d8&#34;&gt;【VS Code + Marp】Markdown から爆速・自由自在なデザインで、プレゼンスライドを作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio&#34; title=&#34;Draw.io Integration - Visual Studio Marketplace&#34;&gt;Draw.io Integration&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension hediet.vscode-drawio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://app.diagrams.net/&#34;&gt;Draw.io (diagrams.net)&lt;/a&gt; を利用した作図ツール。
データはテキストで保持して PNG や SVG へエクスポート可能って感じなのかな。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/riku-shiru/items/5ab7c5aecdfea323ec4e&#34;&gt;VSCode で Draw.io が使えるようになったらしい！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml&#34; title=&#34;PlantUML - Visual Studio Marketplace&#34;&gt;PlantUML&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension jebbs.plantuml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 作図・出力支援。
あらかじめ &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 作図環境を用意する必要がある（ただし &lt;code&gt;plantuml.jar&lt;/code&gt; ファイルは拡張機能内にあらかじめ格納されている？）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;真面目に PlantUML (1) : PlantUML のインストール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/karaage0703/books/80b6999d429abc8051bb&#34;&gt;VS Code エディタ入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tfukumori/items/0f2b52088cd39f5c124e&#34;&gt;(2020 年 12 月 8 日追記)VSCode で Draw.io Integration 使用時にエクスポートできないことがある問題への対処 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coffee-nominagara.com/2019-01-25-094628&#34;&gt;Visual Studio Code で markdown のスニペットを登録する  |  コーヒー飲みながら仕事したい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20200922-editorconfig&#34;&gt;インデントおよび行末は EditorConfig で始末する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51LziyyXRmL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Software Design (ソフトウェアデザイン) 2020年8月号 [雑誌]&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Software Design 編集部 (編集)&lt;/dd&gt;
    &lt;dd&gt;技術評論社 2020-07-18 (Release 2020-07-18)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B08CZ2C3NZ (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;特集記事は「Vim vs. Visual Studio Code」&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-02-28&#34;&gt;2021-02-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Software Design (2020年8月号) --&gt;
</content>
	</entry><entry>
		<title>Go と VS Code</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/02/golang-with-vscode/" />
		<id>tag:text.Baldanders.info,2021-02-27:/remark/2021/02/golang-with-vscode/</id>
		<published>2021-02-27T09:47:11+00:00</published>
		<updated>2021-12-04T02:40:05+00:00</updated>
		<summary>ぶっちゃけ ATOM の go-plus よりも出来がいいので，ゆるゆると移行していきますよっと。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どっちのセクションで書こう悩んだが，所詮ツールの話だし，こっち側で。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/installing-vscode-again/&#34;&gt;パソコンに Visual Studio Code を導入する（再チャレンジ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/golang-with-vscode/&#34;&gt;Go と VS Code&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/markdown-with-vscode/&#34;&gt;Markdown と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/08/java-with-vscode/&#34;&gt;Java と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;それでは&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/installing-vscode-again/&#34; title=&#34;パソコンに Visual Studio Code を導入する（再チャレンジ）&#34;&gt;前回&lt;/a&gt;の続き。
&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; に &lt;a href=&#34;https://go.dev/&#34;&gt;Go 言語&lt;/a&gt;開発支援環境を入れる。
といっても一択だけどね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=golang.go&#34;&gt;Go - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストールはこちら。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension golang.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一応 Google が公式に参加している拡張機能らしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/vscode-go&#34;&gt;The VS Code Go extension joins the Go project - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/blogs/2020/06/09/go-extension&#34;&gt;Visual Studio Code Go extension joins the Go project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかも最近，こちらも事実上のオフィシャルである &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/gopls&#34; title=&#34;gopls · pkg.go.dev&#34;&gt;gopls&lt;/a&gt; が，この拡張機能の既定の &lt;a href=&#34;https://langserver.org/&#34; title=&#34;Langserver.org&#34;&gt;language server&lt;/a&gt; となったようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/gopls-vscode-go&#34;&gt;Gopls on by default in the VS Code Go extension - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人的にひとつだけ気に入らないところがあって，既定の設定のままではプロジェクト・フォルダを開いたときにトップに &lt;code&gt;go.mod&lt;/code&gt; ファイルがないと上手く動かないみたいなんだよね（&lt;a href=&#34;https://zenn.dev/spiegel/articles/20210223-go-module-aware-mode&#34; title=&#34;Go のモジュール管理【バージョン 1.16 改訂版】&#34;&gt;モジュール対応モード&lt;/a&gt;の場合）。&lt;/p&gt;
&lt;p&gt;最初は拡張機能側の問題かと思っていたが，どうも &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/gopls&#34; title=&#34;gopls · pkg.go.dev&#34;&gt;gopls&lt;/a&gt; の制限らしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/tools/blob/master/gopls/doc/workspace.md&#34;&gt;tools/workspace.md at master · golang/tools · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一応の回避策はあって &lt;code&gt;settings.json&lt;/code&gt; に以下の&lt;a href=&#34;https://github.com/golang/tools/blob/master/gopls/doc/settings.md#experimentalworkspacemodule-bool&#34;&gt;オプションを設定&lt;/a&gt;することでトップ以外の複数の &lt;code&gt;go.mod&lt;/code&gt; ファイルに対応できるようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;gopls&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;build.experimentalWorkspaceModule&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし &lt;code&gt;go.mod&lt;/code&gt; ファイルで定義したモジュール名は開いたプロジェクト・フォルダ内で一意でなければならない。
名前が被ってるとめっさ怒られる。&lt;/p&gt;
&lt;p&gt;まぁ，理屈は分からんでもないが，私の場合，ブログなどのドキュメント環境でサンプルコードを書き散らしていて，それらのモジュール名が大抵 &amp;ldquo;&lt;code&gt;sample&lt;/code&gt;” だったりするので被りまくりなんだよなぁ sigh&amp;hellip;&lt;/p&gt;
&lt;p&gt;ちなみに，この &lt;a href=&#34;https://github.com/golang/tools/blob/master/gopls/doc/settings.md#experimentalworkspacemodule-bool&#34;&gt;&lt;code&gt;experimentalWorkspaceModule&lt;/code&gt; オプション&lt;/a&gt;は一時的な措置なので将来的にはなくなるようだ。
それまでには何とかするということだろう。&lt;/p&gt;
&lt;p&gt;それ以外の部分ではぶっちゃけ &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; の &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; よりも出来がいいので，ゆるゆると移行していきますよっと。&lt;/p&gt;
&lt;p&gt;現時点での &lt;code&gt;settings.json&lt;/code&gt; の内容はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.buildOnSave&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;off&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.autocompleteUnimportedPackages&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.formatTool&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;goimports&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.lintTool&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;golangci-lint&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.gotoSymbol.includeGoroot&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.testOnSave&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.coverageOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;showUncoveredCodeOnly&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.coverOnSave&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.coverOnSingleTestFile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;go.coverageDecorator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;gutter&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;#34;gopls&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nt&#34;&gt;&amp;#34;build.experimentalWorkspaceModule&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;【2021-03-02 追記】&lt;/h2&gt;
&lt;p&gt;書き忘れていたが，コマンドパレットから&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;gt;Go: Install/Update Tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と入力すると関連ツールのインストールおよびアップデートができる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./update-tools.png&#34;&gt;&lt;img src=&#34;./update-tools.png&#34; srcset=&#34;./update-tools.png 612w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Go: Install/Update Tools&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./update-tools.png&#34;&gt;Go: Install/Update Tools&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これを実行すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Tools environment: GOPATH=/home/username/go
Installing 9 tools at /home/username/go/bin in module mode.
  gopkgs
  go-outline
  gotests
  gomodifytags
  impl
  goplay
  dlv
  golangci-lint
  gopls

Installing github.com/uudashr/gopkgs/v2/cmd/gopkgs (/home/username/go/bin/gopkgs) SUCCEEDED
Installing github.com/ramya-rao-a/go-outline (/home/username/go/bin/go-outline) SUCCEEDED
Installing github.com/cweill/gotests/... (/home/username/go/bin/gotests) SUCCEEDED
Installing github.com/fatih/gomodifytags (/home/username/go/bin/gomodifytags) SUCCEEDED
Installing github.com/josharian/impl (/home/username/go/bin/impl) SUCCEEDED
Installing github.com/haya14busa/goplay/cmd/goplay (/home/username/go/bin/goplay) SUCCEEDED
Installing github.com/go-delve/delve/cmd/dlv (/home/username/go/bin/dlv) SUCCEEDED
Installing github.com/golangci/golangci-lint/cmd/golangci-lint (/home/username/go/bin/golangci-lint) SUCCEEDED
Installing golang.org/x/tools/gopls (/home/username/go/bin/gopls) SUCCEEDED

All tools successfully installed. You are ready to Go :).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じで &lt;code&gt;go install&lt;/code&gt; してくれるようだ。
自動でアップデートしてくれるといいのだが&amp;hellip;&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51LziyyXRmL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Software Design (ソフトウェアデザイン) 2020年8月号 [雑誌]&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Software Design 編集部 (編集)&lt;/dd&gt;
    &lt;dd&gt;技術評論社 2020-07-18 (Release 2020-07-18)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B08CZ2C3NZ (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;特集記事は「Vim vs. Visual Studio Code」&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-02-28&#34;&gt;2021-02-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Software Design (2020年8月号) --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/416Stewy0NS._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B099928SJD?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20 (Release 2021-07-13)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B099928SJD (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2016/07/go-programming-language/&#34; &gt;こちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-05-22&#34;&gt;2021-05-22&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>パソコンに Visual Studio Code を導入する（再チャレンジ）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2021/02/installing-vscode-again/" />
		<id>tag:text.Baldanders.info,2021-02-27:/remark/2021/02/installing-vscode-again/</id>
		<published>2021-02-27T05:23:23+00:00</published>
		<updated>2022-02-19T04:42:49+00:00</updated>
		<summary>まずはインストールと初期設定</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今の職場では当然のように Windows 10 機を支給されていてテキスト・エディタ等の普段使いのツールであれば割と自由に使わせてくれるのはいいのだが，6 年ほど使い込んで手に馴染んでる筈の &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; が使えなくてねぇ。
理由は大きく 2 つ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;起動が遅すぎる（もともと遅いが堪えられないほど遅い）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; 言語開発支援の &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; が実質的に動かない&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;特に 2 番目が致命的。
私の観測範囲が狭いせいか，この手の話をほとんど聞かないのだが Windows で &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; で &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; で開発をしてる人はいないってことなのかねぇ。&lt;/p&gt;
&lt;p&gt;さらに言うと &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; を開発している GitHub が &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; を開発している Microsoft に買収され，オフィシャルの Go Language Server である &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/gopls&#34; title=&#34;gopls · pkg.go.dev&#34;&gt;gopls&lt;/a&gt; が，これまた &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=golang.go&#34; title=&#34;Go - Visual Studio Marketplace&#34;&gt;Google オフィシャルの VS Code 用拡張機能&lt;/a&gt;の&lt;a href=&#34;https://blog.golang.org/gopls-vscode-go&#34; title=&#34;Gopls on by default in the VS Code Go extension - The Go Blog&#34;&gt;既定の Language Server になった&lt;/a&gt;というのも大きい。
&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; の &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; なんて今だに gocode 使ってるんだぜ。
完全に廃れているよなぁ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;というわけで，観念して &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; を導入することにした。&lt;/p&gt;
&lt;p&gt;実は昨年 5 月に自宅の &lt;a href=&#34;https://text.baldanders.info/remark/2020/05/installing-vscode-in-ubuntu/&#34; title=&#34;Ubuntu に Visual Studio Code を導入する&#34;&gt;Ubuntu 機に VS Code を入れた&lt;/a&gt;んだけど，結局挫折して削除しちゃったんだよねぇ。
今回は職場の Windows 機で先行して導入している。
なので Windows 機と &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 機を比較しながら，何回かに分けて記事を書いていく予定である。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/installing-vscode-again/&#34;&gt;パソコンに Visual Studio Code を導入する（再チャレンジ）&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/golang-with-vscode/&#34;&gt;Go と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/02/markdown-with-vscode/&#34;&gt;Markdown と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2021/08/java-with-vscode/&#34;&gt;Java と VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; のインストール&lt;/h2&gt;
&lt;p&gt;Windows 版のインストールは&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;サイト&lt;/a&gt;からインストーラをダウンロードすればよい。&lt;/p&gt;
&lt;p&gt;問題は &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; だが Snap 版と APT 版がある。
昨年の話だが Snap 版を入れたら日本語入力が壊滅してたので，今回も選択肢には入れない。&lt;/p&gt;
&lt;p&gt;APT 版は Microsoft がリポジトリを公開しているので，これを設定してインストールする。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &amp;gt; microsoft.gpg
$ sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
$ sudo sh -c &amp;#39;echo &amp;#34;deb [arch=amd64] http://packages.microsoft.com/repos/vscode stable main&amp;#34; &amp;gt; /etc/apt/sources.list.d/vscode.list&amp;#39;
$ sudo apt update
$ sudo apt install -y code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://zenn.dev/karaage0703/books/80b6999d429abc8051bb/viewer/5b814b&#34;&gt;VS Codeエディタ本体のインストール方法｜VS Codeエディタ入門&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;起動は Shell やコマンド・プロンプト等でファイル名またはディレクトリ名を指定して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば起動する&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
Windows 版の &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; はコマンド・プロンプトから任意の場所を開けなくて往生したんだよなぁ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; 本体以外の各種ファイルは以下のディレクトリに格納される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 版
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%USERPROFILE%\.vscode\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%APPDATA%\Code\&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 版
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$HOME/.vscode/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$HOME/.config/Code/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;settings.json&lt;/code&gt; や &lt;code&gt;keybindings.json&lt;/code&gt; といった設定ファイルやスニペットを格納する &lt;code&gt;snippets/&lt;/code&gt; ディレクトリは &lt;code&gt;Code/User/&lt;/code&gt; ディレクトリ直下にあるので，必要に応じてバックアップを取るのがいいだろう。&lt;/p&gt;
&lt;p&gt;ぶっちゃけ日本語化は不要。
つか，コマンドパレットや検索フィルタを常用するなら下手に日本語化しても混乱するだけだろう。&lt;/p&gt;
&lt;h2&gt;テレメトリの無効化&lt;/h2&gt;
&lt;p&gt;これは任意だが，ベンダ・メーカによるテレメトリを嫌うなら，最初の起動時に無効化の設定をしておく。
具体的には設定画面（&lt;code&gt;[Ctrl+,]&lt;/code&gt; 押下で起動）で &lt;code&gt;telemetry&lt;/code&gt; を入力し，出てきた項目のチェックを外す。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./telemetry.png&#34;&gt;&lt;img src=&#34;./telemetry.png&#34; srcset=&#34;./telemetry.png 1044w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;telemetry&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./telemetry.png&#34;&gt;telemetry&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;テレメトリを無効化すると &lt;code&gt;settings.json&lt;/code&gt; に以下の内容が書き込まれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;telemetry.enableCrashReporter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;telemetry.enableTelemetry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; の設定画面は拡張機能も含めて全てフラットに表示してしまうので，検索フィルタで絞り込まないとめちゃめちゃ使い辛い。
慣れるまでは設定画面で操作しながら &lt;code&gt;settings.json&lt;/code&gt; の内容を確認していく（必要に応じてバックアップ）のがいいだろう。&lt;/p&gt;
&lt;p&gt;こういのが面倒くさいんだよなぁ， &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; って。&lt;/p&gt;
&lt;h2&gt;キー設定&lt;/h2&gt;
&lt;p&gt;まずはキー設定を確認しておく。
キー割当の公式情報が PDF で公開されているので，参考にするとよいだろう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&#34;&gt;Keyboard Shortcuts for Windows &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&#34;&gt;Keyboard Shortcuts for Linux &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拡張機能に「◯◯ エディタ風」とかまとめて設定できるものもあるが，歳をとるとそういうカスタマイズは面倒になってくる&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
今回はできるだけキー割当を変えないで Linux 版と Windows 版で挙動が異なるもののみに注目してチューニングしていく。&lt;/p&gt;
&lt;p&gt;なお，キー割当は “Keyboard Shortcuts” 画面で変更するのが無難で安全である。
&lt;code&gt;settings.json&lt;/code&gt; と同じく，慣れるまでは &lt;code&gt;keybindings.json&lt;/code&gt; の内容を確認しながら必要に応じてバックアップをとるのがいいだろう。&lt;/p&gt;
&lt;h3&gt;コマンドパレット等&lt;/h3&gt;
&lt;p&gt;この辺は最低限おぼえておくべき。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;キー割当&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+Shift+P]&lt;/code&gt;&lt;br&gt;&lt;code&gt;[F1]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show All Commands (コマンドパレット)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+,]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open Settings (UI)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+K]&lt;/code&gt; &lt;code&gt;[Ctrl+S]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open Keyboard Shortcuts&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最初から &lt;code&gt;[F1]&lt;/code&gt; キーにコマンドパレットが割り当てられているのはありがたい。
まぁ，コマンドパレットさえ使えれば，あとはうろ覚えでも何とかなる（笑）&lt;/p&gt;
&lt;h3&gt;マルチカーソル&lt;/h3&gt;
&lt;p&gt;きょうびのテキスト・エディタでマルチカーソルが使えないのはク ◯ だろう（下品でごめん）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;キー割当&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+Alt+↑]&lt;/code&gt;&lt;br&gt;&lt;code&gt;[Shift+Alt+↑]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add Cursor Above&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+Alt+↓]&lt;/code&gt;&lt;br&gt;&lt;code&gt;[Shift+Alt+↓]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add Cursor Below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+D]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add Selection To Next Find Match&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+Shift+L]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Select All Occurrences of Find Match&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+F2]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Change All Occurrences&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Shift+Alt+I]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add Cursors to Line Ends&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Windows 版ではマルチカーソルの追加（上の 2 つの機能ね）が&lt;code&gt;[Ctrl+Alt+↑]&lt;/code&gt; および &lt;code&gt;[Ctrl+Alt+↓]&lt;/code&gt; にしか割り当てられてないんだけど，それやったらうちの環境ではモニタ表示の向きが変わってしまうんだよね。
うちだけの現象なのだろうか。&lt;/p&gt;
&lt;p&gt;ちうわけで Windows 版では &lt;code&gt;[Shift+Alt+↑]&lt;/code&gt;, &lt;code&gt;[Shift+Alt+↓]&lt;/code&gt; に変更する。
&lt;code&gt;keybindings.json&lt;/code&gt; にはこんな感じに設定されるようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Place your key bindings in this file to override the defaultsauto[]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;shift+alt+up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.insertCursorAbove&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+alt+up&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-editor.action.insertCursorAbove&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;shift+alt+down&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.insertCursorBelow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+alt+down&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-editor.action.insertCursorBelow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;when&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editorTextFocus&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;行の 2 重化&lt;/h3&gt;
&lt;p&gt;何故この機能がキーに割り当てられてないのだ！ というわけで &lt;code&gt;[Ctrl+F10]&lt;/code&gt; に割り当てた。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;キー割当&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+F10]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Duplicate Selection&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;keybindings.json&lt;/code&gt; にはこんな感じに設定される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Place your key bindings in this file to override the defaultsauto[]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+f10&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor.action.duplicateSelection&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;Integrated Terminal&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; には標準でターミナル機能が付いている。
ありがたや。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;キー割当&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Ctrl+Shift+@]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Toggle Integrated Terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;この機能は頻繁に使うので &lt;code&gt;[Ctrl+F1]&lt;/code&gt; キーに割り当て直す。
&lt;code&gt;keybindings.json&lt;/code&gt; にはこんな感じに設定された。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Place your key bindings in this file to override the defaultsauto[]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+f1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;workbench.action.terminal.toggleTerminal&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+shift+[BracketLeft]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-workbench.action.terminal.toggleTerminal&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows 版なら &lt;a href=&#34;https://github.com/nyaosorg/nyagos/&#34; title=&#34;nyaosorg/nyagos: NYAGOS - The hybrid UNIXLike Commandline Shell for Windows&#34;&gt;NYAGOS&lt;/a&gt; を shell として使いたいものである。
そこで &lt;code&gt;settings.json&lt;/code&gt; に以下の設定を直接書き込む。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;terminal.integrated.shell.windows&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C:\\Users\\username\\scoop\\apps\\nyagos\\current\\nyagos.exe&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（&lt;a href=&#34;https://text.baldanders.info/remark/2020/10/windows-terminal-and-nyagos-and-scoop/&#34; title=&#34;Windows Terminal × NYAGOS × Scoop ＝ ♥&#34;&gt;Scoop で NYAGOS をインストール&lt;/a&gt;した場合）&lt;/p&gt;
&lt;h3&gt;Search Editor&lt;/h3&gt;
&lt;p&gt;簡単な検索と置換は &lt;code&gt;[Ctrl+F]&lt;/code&gt; と &lt;code&gt;[Ctrl+H]&lt;/code&gt; で可能だがファイルを跨いだ grep や grep 置換を行う場合は &lt;code&gt;[Ctrl+Shift+F]&lt;/code&gt; または &lt;code&gt;[Ctrl+Shift+H]&lt;/code&gt; でサイドバーを検索に切り替えた上で &lt;code&gt;[Ctrl+Shift+J]&lt;/code&gt; で詳細項目を展開する。&lt;/p&gt;
&lt;p&gt;ただサイドバーの操作ってマウス前提だし使い勝手がよくないんだよねぇ。&lt;/p&gt;
&lt;p&gt;と思ったら設定に Search Editor という項目があって，“Search: Mode” 項目を変更することで &lt;code&gt;[Ctrl+Shift+F]&lt;/code&gt; キー押下時にどちらを起動するか選べるようだ。
これを &lt;code&gt;newEditor&lt;/code&gt; に変更したら &lt;code&gt;settings.json&lt;/code&gt; にはこんな感じに設定された。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;search.mode&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;newEditor&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでサイドバーではなくエディタのタブとして検索画面が開く。
検索結果から検索元のファイル：行にジャンプするには &lt;code&gt;[F12]&lt;/code&gt; キー押下で OK（ソースコードのシンボル定義元へのジャンプと同じ）。&lt;/p&gt;
&lt;p&gt;Grep 置換機能には該当の項目がなくサイドバーから行うしかないようだ。
まぁ，ファイルを跨いでの一括置換処理は滅多にしないけどな（笑）&lt;/p&gt;
&lt;h2&gt;【2021-03-02 追記】ウィンドウの設定&lt;/h2&gt;
&lt;h3&gt;画面起動時のウィンドウ画面サイズ&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; を起動する際のウィンドウ画面は前回時の状態を継承するのだが，そのまま 2 つ目を起動すると何故かウィンドウサイズが既定で起動してしまう。
これがめちゃめちゃストレスだったのだが，何と設定で変えれるらしい。
具体的には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;window.newWindowDimensions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;inherit&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば 2 つ目以降もウィンドウの状態を「継承」してくれる。
つか，最初からこれを既定にしてくれよ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;ウィンドウのタイトルバーを非表示にする&lt;/h3&gt;
&lt;p&gt;Windows 版は既定でウィンドウのタイトルバーが非表示になっている。
今どきの Windows アプリケーションって大抵そんな見た目なのでそれが普通だと思っていたが，なんか設定で変えれるらしい。
具体的には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;window.titleBarStyle&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;native&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば，タイトルバーが表示されるようになった（&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; 要再起動）。
まぁ，特に嬉しいわけではないのだけど。&lt;/p&gt;
&lt;p&gt;で，実は Linux 版でもこの値を &lt;code&gt;custom&lt;/code&gt; にすることでタイトルバーを非表示にできるようだ。
早速試してみた。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./custom-title-bar-style.png&#34;&gt;&lt;img src=&#34;./custom-title-bar-style.png&#34; srcset=&#34;./custom-title-bar-style.png 1024w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;タイトルバーを非表示に&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./custom-title-bar-style.png&#34;&gt;タイトルバーを非表示に&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;おー，ホンマじゃ。
これは嬉しい。&lt;/p&gt;
&lt;h2&gt;カラー・テーマは&amp;hellip; 入れなくてもいいか&lt;/h2&gt;
&lt;p&gt;歳をとるとだんだん目が弱くなってくる。
Windows にせよ Ubuntu にせよ，パソコンのデスクトップ画面は基本的にダーク・テーマにしているのだが， &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; もこれに合わせて自動的にダークテーマになるようだ。
これならカラー・テーマを別途入れる必要はないか。&lt;/p&gt;
&lt;p&gt;ただし標準のままではカーソル行が分かりにくいので &lt;code&gt;settings.json&lt;/code&gt; に以下の設定を直接書き込む。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;workbench.colorCustomizations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.lineHighlightBackground&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#303030&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h2&gt;必須の拡張機能&lt;/h2&gt;
&lt;p&gt;えっと，私にとって「ないと困る機能」だからね。
念のため。&lt;/p&gt;
&lt;p&gt;ちなみに&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension &amp;lt;package name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすることでも拡張機能をインストールできる。
Shell スクリプト（またはバッチ・ファイル）にまとめておけば再インストールの際にちょっとは楽になると思う。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig&#34; title=&#34;EditorConfig for VS Code - Visual Studio Marketplace&#34;&gt;EditorConfig for VS Code&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension EditorConfig.EditorConfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;コード書きなら &lt;a href=&#34;https://editorconfig.org/&#34;&gt;EditorConfig&lt;/a&gt; は MUST だろう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20200922-editorconfig&#34;&gt;インデントおよび行末は EditorConfig で始末する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=mosapride.zenkaku&#34; title=&#34;zenkaku - Visual Studio Marketplace&#34;&gt;zenkaku&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension mosapride.zenkaku
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全角空白を見やすく表示してくれる優れもの。
つか，滅びろ全角空白！&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=masakit.zenkaku-hankaku&#34; title=&#34;Zenkaku-Hankaku - Visual Studio Marketplace&#34;&gt;Zenkaku-Hankaku&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension masakit.zenkaku-hankaku
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;全角半角変換。
日本語入力環境では必須。
というか半角カナとか全角英数とかマジで勘弁してほしい。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=medo64.render-crlf&#34; title=&#34;Render Line Endings - Visual Studio Marketplace&#34;&gt;Render Line Endings&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension medo64.render-crlf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改行コードの可視化。
色々あったけどユーザが多そうだったのでコレにした。
行末の余分な空白文字も目立たせてくれるスグレモノ。
つか，改行コードを表示するのに拡張機能が必要なのかよ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;settings.json&lt;/code&gt; はこんな感じに設定している。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;code-eol.highlightExtraWhitespace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;code-eol.highlightNonDefault&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ついでに設定の “Render Control Characters” も ON にしている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.renderControlCharacters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-duplicate&#34; title=&#34;Duplicate action - Visual Studio Marketplace&#34;&gt;Duplicate action&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension mrmlnc.vscode-duplicate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; のファイル・エクスプローラー機能がショボい。
特にファイルの duplicate 機能がないのは不便って思ってたら拡張機能にあった。
何故これを標準装備しないのだ！&lt;/p&gt;
&lt;h2&gt;あるとよさげな拡張機能&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme&#34; title=&#34;Material Icon Theme - Visual Studio Marketplace&#34;&gt;Material Icon Theme&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension PKief.material-icon-theme
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よい。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2&#34; title=&#34;Bracket Pair Colorizer 2 - Visual Studio Marketplace&#34;&gt;Bracket Pair Colorizer 2&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension CoenraadS.bracket-pair-colorizer-2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;括弧の対応を色付きで見やすくしてくれる。
ホンマに見やすいな。
2 のほうが出来がいいらしい。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;h4&gt;【2021-09-03 追記】&lt;/h4&gt;
&lt;p&gt;[VS Code] 1.60 で括弧類のカラー化がサポートされた。
設定で “Bracket Pair Colorization” の項目を探してチェックを入れるか &lt;code&gt;settings.json&lt;/code&gt; で&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;editor.bracketPairColorization.enabled&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとすればいいようだ。
ただ &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2&#34; title=&#34;Bracket Pair Colorizer 2 - Visual Studio Marketplace&#34;&gt;Bracket Pair Colorizer 2&lt;/a&gt; と比べると微妙に見え方が違うので，好みが分かれるかも知れない。&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph&#34; title=&#34;Git Graph - Visual Studio Marketplace&#34;&gt;Git Graph&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension mhutchie.git-graph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; などの基本的なコマンドはコマンドパレットから簡単に呼び出せるが， GUI で操作したいときもあるので。
しかも以下のオプションを付ければ電子署名の検証も表示してくれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;git-graph.repository.commits.showSignatureStatus&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というわけで採用。
つか，これがあれば他の git GUI ツール要らなくね？&lt;/p&gt;
&lt;p&gt;キーボードで操作しやすいよう &lt;code&gt;[Shift+F1]&lt;/code&gt; キー押下で表示するようにした。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Place your key bindings in this file to override the defaultss
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;shift+f1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;git-graph.view&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode&#34; title=&#34;Visual Studio IntelliCode - Visual Studio Marketplace&#34;&gt;Visual Studio IntelliCode&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension VisualStudioExptTeam.vscodeintellicode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最初は「別になくてもいいや」と思っていたのだが，使ってみるとめがっさ便利。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&#34; title=&#34;GitLens — Git supercharged - Visual Studio Marketplace&#34;&gt;GitLens&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension eamodio.gitlens
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多分，チーム運用で相互レビューするときなんかには重宝するんだろう。
かなり詳細な情報が見れるんだけど，私個人にはちょっと過剰な機能なんだよなぁ。
とりあえず保留。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer&#34; title=&#34;Excel Viewer - Visual Studio Marketplace&#34;&gt;Excel Viewer&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code --install-extension GrapeCity.gc-excelviewer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;GrapeCity が公開してるのか。
どーりで（笑）&lt;/p&gt;
&lt;p&gt;仕事で使うならよさげだけど，個人レベルじゃ特に要らないかな。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/review/1046119.html&#34;&gt;【レビュー】「Visual Studio Code」で Excel スプレッドシートや CSV データを表示「Excel Viewer」 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv&#34; title=&#34;Rainbow CSV - Visual Studio Marketplace&#34;&gt;Rainbow CSV&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CSV 支援用の拡張機能はいくつかあるが，スプレッドシートにこだわらず，元の状態を維持しつつ分かりやすい。
おすすめ。&lt;/p&gt;
&lt;h2&gt;現在日時を設定するスニペット&lt;/h2&gt;
&lt;p&gt;現在日時をセットする方法はいくつかあるようだが，スニペットを使うのがお手軽な感じである。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Code/User/&lt;/code&gt; ディレクトリ直下に &lt;code&gt;snippets/datetime.code-snippets&lt;/code&gt; というファイルを作って&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，以下の内容をセットすれば OK。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;Today&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;today&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Today (RFC3339)&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;Now&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;now&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;$CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Now time (local time)&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;TodayFull&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;prefix&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;todaytime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;$CURRENT_YEAR-$CURRENT_MONTH-${CURRENT_DATE}T$CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND+09:00&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Today and time (RFC3339)&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;today&lt;/code&gt;, &lt;code&gt;now&lt;/code&gt;, &lt;code&gt;todaytime&lt;/code&gt; の補完候補として表示される。
自動で表示されない場合は &lt;code&gt;[Ctrl+space]&lt;/code&gt; で候補一覧が出る。&lt;/p&gt;
&lt;p&gt;単純な置換ならスニペットのほうがお手軽なので積極的に使っていきたいところである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iucstscui.hatenablog.com/entry/2021/01/13/080000&#34;&gt;Visual Studio Code スニペットで簡単日付入力 - はんなりと、ゆるやかに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/xx2xyyy/items/fd333368db548167f15a&#34;&gt;VsCode のスニペットのススメ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/editor/userdefinedsnippets&#34;&gt;Snippets in Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/karaage0703/books/80b6999d429abc8051bb&#34;&gt;VS Code エディタ入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/catnose99/scraps/36c04be9fb1209&#34;&gt;【随時更新】使ってる VSCode の拡張機能のまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eh-career.com/engineerhub/entry/2019/06/21/103000&#34;&gt;Visual Studio Code のうれしい機能を使いこなして、初心者を最速で脱出する！《VSCode 実践入門》 - エンジニア Hub ｜若手 Web エンジニアのキャリアを考える！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hirocks.jp/vscode-%e3%81%ab%e5%85%a5%e3%82%8c%e3%81%a6%e3%81%84%e3%82%8b%e6%8b%a1%e5%bc%b5%e6%a9%9f%e8%83%bd-2020%e5%b9%b4%e7%89%88/&#34;&gt;VSCode に入れている拡張機能 2020 年版 – 未来をデザインするマーケティング会社 -ハイロックス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geekfeed.co.jp/geekblog/vscode_extension&#34;&gt;VSCode 使い必見！？使って便利な Visual Studio Code 拡張機能 10 選 | ソフトウェア開発のギークフィード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jsstudy.hatenablog.com/entry/How-to-set-a-shortcut-to-enter-the-current-date-and-time-in-Visual-Studio-Code&#34;&gt;Visual Studio Code で現在の日時を入力するショートカットを設定する方法 - JavaScript 勉強会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/y-tsutsu/items/cfe89c0168f40a8fb353&#34;&gt;VSCodeでなるべくマウスを使わない開発環境をがんばる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=cweijan.vscode-database-client2&#34;&gt;Database Client - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ckolkman.vscode-postgres&#34;&gt;PostgreSQL - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51LziyyXRmL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B08CZ2C3NZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Software Design (ソフトウェアデザイン) 2020年8月号 [雑誌]&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Software Design 編集部 (編集)&lt;/dd&gt;
    &lt;dd&gt;技術評論社 2020-07-18 (Release 2020-07-18)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B08CZ2C3NZ (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;特集記事は「Vim vs. Visual Studio Code」&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-02-28&#34;&gt;2021-02-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Software Design (2020年8月号) --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Windows 版でコマンド・プロンプトから開くには，インストール時に PATH を通す設定をする必要がある。また Windows 版ではエクスプローラのコンテキスト・メニューから開くオプションもあるので積極的に利用していいだろう。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;大昔の Mifes や Vz Editor くらいしか選択肢がなかった頃ならともかく，今はいくらでも選択肢があるのにわざわざ「◯◯ エディタ風キーマップ」とかするくらいなら「◯◯ エディタ」を使えよ，と思うのは私だけだろうか。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;汎用で使うスニペットを定義する場合，拡張子が &lt;code&gt;.code-snippets&lt;/code&gt; なファイルであればいいらしい。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Ubuntu に Visual Studio Code を導入する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/05/installing-vscode-in-ubuntu/" />
		<id>tag:text.Baldanders.info,2020-05-28:/remark/2020/05/installing-vscode-in-ubuntu/</id>
		<published>2020-05-28T03:31:57+00:00</published>
		<updated>2021-02-20T10:44:48+00:00</updated>
		<summary>継続的に使うなら今後も追記するつもり。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/05/x-terminal-with-atom/&#34; title=&#34;とりあえず ATOM エディタ内ターミナルを x-terminal に乗り換えた&#34;&gt;ちうわけで&lt;/a&gt; &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt;を導入して試してみることにした。&lt;/p&gt;
&lt;p&gt;継続的に使うなら今後も追記するつもり。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; のインストール&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; に &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; をインストールするのであれば &lt;a href=&#34;https://github.com/snapcore/snapd&#34; title=&#34;snapcore/snapd: The snapd and snap tools enable systems to work with .snap files.&#34;&gt;Snap&lt;/a&gt; を使うのが一番簡単なのだが，うちの環境では何故か &lt;a href=&#34;https://github.com/snapcore/snapd&#34; title=&#34;snapcore/snapd: The snapd and snap tools enable systems to work with .snap files.&#34;&gt;Snap&lt;/a&gt; 版で日本語入力ができないという致命的な問題があるため，今回は公式サイトから deb ファイルをダウンロードして直接 &lt;code&gt;apt install&lt;/code&gt; した。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install ./code_1.45.1-1589445302_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;インストールに成功すれば以下のコマンドでバージョンが取得できるはず。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ code -v
1.45.1
5763d909d5f12fe19f215cbfdd29a91c0fa9208a
x64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よしよし。
ちゃんと最新バージョンだな。&lt;/p&gt;
&lt;p&gt;実際に &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; を起動してアプリケーション情報（メニューの &lt;code&gt;Help&lt;/code&gt; → &lt;code&gt;About&lt;/code&gt; を選択）も確認してみる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./about-vscode.png&#34;&gt;&lt;img src=&#34;./about-vscode.png&#34; srcset=&#34;./about-vscode.png 524w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;うむうむ。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;h3&gt;APT によるインストール【2021-02-20 追記】&lt;/h3&gt;
&lt;p&gt;実は Microsoft から [VS Code] 用の APT リポジトリが提供されている。
これを読み込んでインストールすることもできる。&lt;/p&gt;
&lt;p&gt;まず電子署名鍵のインポートから&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次にリポジトリの登録を行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo add-apt-repository &amp;#34;deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで準備完了。
あとは&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt update
$ sudo apt install code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;でインストールできる。&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; のカスタマイズ&lt;/h2&gt;
&lt;p&gt;カスタマイズはメニューの &lt;code&gt;File&lt;/code&gt; → &lt;code&gt;Preferences&lt;/code&gt; から選択できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;File&lt;/code&gt; → &lt;code&gt;Preferences&lt;/code&gt; → &lt;code&gt;Settings&lt;/code&gt; で設定画面が開く（または &lt;code&gt;Ctrl+,&lt;/code&gt; キー押下）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File&lt;/code&gt; → &lt;code&gt;Preferences&lt;/code&gt; → &lt;code&gt;Keyboard Shortcuts&lt;/code&gt; でキー割当の確認・変更ができる
&lt;ul&gt;
&lt;li&gt;既定のキー割当は &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; とほとんど同じなので悩むところは少なかった&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File&lt;/code&gt; → &lt;code&gt;Preferences&lt;/code&gt; → &lt;code&gt;Keymaps&lt;/code&gt; で他エディタの割当を導入することもできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f1&lt;/code&gt; キー押下でもコマンド・パレット（Show All Commands）が開く&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;設定の行方&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;VS Code&lt;/a&gt; は &lt;code&gt;$HOME&lt;/code&gt; ディレクトリに以下の設定ディレクトリを作成する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.vscode/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.config/Code/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このうち，ユーザ設定は &lt;code&gt;~/.config/Code/User/&lt;/code&gt; ディレクトリ直下の以下のファイルに書き込まれる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;settings.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keybindings.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低でもこれらのファイルを保持っておけば再現しやすくなるだろう。&lt;/p&gt;
&lt;h3&gt;とりあえず導入してみた拡張機能&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタみたいに印を付けておいて纏めてインストールできるといいんだけどねぇ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig&#34;&gt;EditorConfig for VS Code - Visual Studio Marketplace&lt;/a&gt; : &lt;a href=&#34;https://editorconfig.org/&#34;&gt;EditorConfig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=mosapride.zenkaku&#34;&gt;zenkaku - Visual Studio Marketplace&lt;/a&gt; : 全角空白文字を色付きで表示できる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=masakit.zenkaku-hankaku&#34;&gt;Zenkaku-Hankaku - Visual Studio Marketplace&lt;/a&gt; : 全角⇔半角文字変換&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons&#34;&gt;vscode-icons - Visual Studio Marketplace&lt;/a&gt; : file icon theme&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=jsynowiec.vscode-insertdatestring&#34;&gt;Insert Date String - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ego-digital.vscode-powertools&#34;&gt;Power Tools - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/setup/linux&#34;&gt;Running Visual Studio Code on Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yoshiyasu1111/items/e21a77ed68b52cb5f7c8&#34;&gt;UbuntuにVSCodeをインストールする3つの方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/satokaz/items/cb45d82f6f8f1e24c0d6&#34;&gt;VS Code でドキュメントの空白文字を見やすくしてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atmarkit.co.jp/ait/articles/1708/23/news026.html&#34;&gt;Visual Studio Codeの設定「虎の巻」：IDE編 (1/3)：特集：Visual Studio Codeを使いこなそう！ - ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxize.com/post/how-to-install-visual-studio-code-on-ubuntu-20-04/&#34;&gt;How to Install Visual Studio Code on Ubuntu 20.04 | Linuxize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>週末スペシャル： 2016年熊本地震</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2016/04/17-stories/" />
		<id>tag:text.Baldanders.info,2016-04-17:/remark/2016/04/17-stories/</id>
		<published>2016-04-17T06:38:38+00:00</published>
		<updated>2021-05-09T05:34:56+00:00</updated>
		<summary>2016年熊本地震 / 三半規管に異常あり / ATOM 1.7 と Visual Studio Code 1.0 が登場 / Windows 版 QuickTime がようやく終了 / その他の気になる記事</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;疲れが溜まってるのか，ここのところ自宅帰って飯食ったらそのまま寝落ちしていることが多い。
妙に怒りっぽくなってるし（路面電車で隣に人が座っただけでイラッとする）気をつけないとなぁ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#eq&#34;&gt;2016年熊本地震&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#astro&#34;&gt;三半規管に異常あり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#edit&#34;&gt;ATOM 1.7 と Visual Studio Code 1.0 が登場&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#qt&#34;&gt;Windows 版 QuickTime がようやく終了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;eq&#34;&gt;2016年熊本地震&lt;/h2&gt;
&lt;p&gt;まずは被災された方々にはお見舞い申し上げます。
地震関連 tweets をチェックしてたけど直下型のせいか M4, M5 クラスの余震でも震度5とか結構あって，これはちょっとキツいよね。
特に夜中の地震はトラウマで不眠症になったりするのでホンマに大変だと思います。
私自身は今は自分のことで手一杯なので何もできないのですが，まずは事態が落ち着いてくれることを祈ります。&lt;/p&gt;
&lt;p&gt;大きな災害なので流石にテレビ報道も見たんだけど，やっぱテレビはクズだね。
ヘリで上空から中継してる映像とかあるんだけど，あれ地上から「ウザい」と思われてるの知っててやってるのかね。
様々な映像を見るだに「日本のマスコミはクソ」としか言いようがない。&lt;/p&gt;
&lt;p&gt;でも国土地理院の &lt;a href=&#34;http://psgsv2.gsi.go.jp/koukyou/public/uav/&#34;&gt;UAV (Unmanned Aerial Vehicle)&lt;/a&gt; で空撮した映像はいいね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gsi.go.jp/BOUSAI/H27-kumamoto-earthquake-index.html&#34;&gt;平成２８年熊本地震に関する情報｜国土地理院&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/DXTAAvVB2M8&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DXTAAvVB2M8&#34;&gt;【国土地理院】　南阿蘇村河陽周辺の断層 - YouTube&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;人が容易に入れないようなところでも drone なら入れるし，軽い荷物なら配送できる drone とかもあると聞くので，もっとこういう技術を活用したらいいと思うよ。&lt;/p&gt;
&lt;p&gt;危機状態に求められるリーダーと平時のリーダーとでは要件が異なる。
「政治判断」しかできない官僚・政治家や官僚的体質の企業・組織は危機状態に機能しないどころか障害になる。
彼らをバイパスして必要な情報や判断を必要な人に行き渡らせ有機的に連携できるか。
Crisis Management って結局はそういうことなんだよね。&lt;/p&gt;
&lt;p&gt;小川一水さんの『復活の地』でも読んで勉強しなはれ（笑）&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;【拡散希望】『阪神大震災被災者からのお願い』　嬉しいんです！嬉しいんですけどその援助、もうちょっとだけ待って下さい！ &lt;a href=&#34;https://t.co/2BgwW00mRx&#34;&gt;pic.twitter.com/2BgwW00mRx&lt;/a&gt;&lt;/p&gt;&amp;mdash; 澤田 圭 ｷｬﾗｸﾀｰﾃﾞｻﾞｲﾅｰ (@keisawada) &lt;a href=&#34;https://twitter.com/keisawada/status/721306607389253632&#34;&gt;2016年4月16日&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;h3&gt;関連ブックマーク（随時追記予定）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eri.u-tokyo.ac.jp/?page_id=183&amp;amp;id=12595&#34;&gt;平成28年（2016年）熊本地震（M6.5）の地学的背景と布田川断層帯・日奈久断層帯について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.mext.go.jp/component/a_menu/other/detail/__icsFiles/afieldfile/2016/04/17/1369832_002.pdf&#34;&gt;2016年4月17日地震調査委員会評価文（熊本地方地震） &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.mext.go.jp/component/a_menu/other/detail/__icsFiles/afieldfile/2016/04/17/1369832_003.pdf&#34;&gt;平成28 年4 月17日地震調査委員会図表（熊本地方地震） &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kumamoto-jishin.info/map.html&#34;&gt;避難所、給水、配給、空いているスーパーなどについてgooglemapまとめ | 熊本地震 情報掲示板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/news/archive/gsi_kumamoto_160418.html&#34;&gt;熊本地震で観測した電子基準点の変位を、国土地理院がいち早く公表｜ニュース/アーカイブ｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hiroshima-u.ac.jp/news/show/id/25510&#34;&gt;広島大学　熊本県熊本地方を震源とする地震に関する記者説明会を開催しました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160415_01.html&#34;&gt;2016年4月15日ニュース「熊本の大地震は横ずれ断層型 震源浅く揺れ大きく」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160418_01.html&#34;&gt;2016年4月18日ニュース「本震と余震は別の断層帯で発生 地震調査委と気象庁が見解」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160418_02.html&#34;&gt;2016年4月18日ニュース「被害状況を動画で公開 国土地理院がドローンで調査」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pref.kumamoto.jp/kiji_15425.html?type=top&#34;&gt;平成28年熊本地震に伴う被災地救援等のために使用する車両の取り扱いについて / 熊本県&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/usage/userreport/hinanpass_160420.html&#34;&gt;オープンデータで避難所地図を表示する「ヒナンパス」が、熊本地震に暫定対応｜利用者向け情報｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/news/archive/its-jp_160419.html&#34;&gt;熊本地震で、ITSJapanが乗用車・トラックの通行実績情報を提供｜ニュース/アーカイブ｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openstreetmap.jp/node/779&#34;&gt;熊本地震への対応について | OpenStreetMap Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.city.kumamoto.jp/hpkiji/pub/detail.aspx?c_id=5&amp;amp;type=top&amp;amp;id=12541&#34;&gt;災害ボランティアの受入について / 熊本市ホームページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pref.hiroshima.lg.jp/soshiki/4/kumamoto-kiki02.html&#34;&gt;平成２８年熊本地震に伴う被災地救援などのために使用する車両の取扱について - 広島県ホームページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;astro&#34;&gt;三半規管に異常あり&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://fanfun.jaxa.jp/jaxatv/files/20160415_hitomi.pdf&#34;&gt;Ｘ線天文衛星「ひとみ」（ASTRO-H）の状況について &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/space/2016_04_15_asrtoh.html&#34;&gt;X線天文衛星「ひとみ」、2重のトラブルで「自分で回った」と推定 | Sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/04/20160419_hitomi_j.html&#34;&gt;JAXA | X線天文衛星「ひとみ」（ASTRO-H）の状況について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160420_01.html&#34;&gt;2016年4月20日ニュース「姿勢制御装置が誤作動 通信途絶えた天文衛星『ひとみ』」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/02/2016_04_26_astroh.html&#34;&gt;X線天文衛星「ひとみ」、浮かび上がった3つの問題点 | sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小天体かデブリにでもぶち当たったのかと思ったが，擬人化するなら三半規管の異常で「ピヨった」状態らしい。
太陽電池パネルの一部が千切れるほどの高速回転って相当だと思うけど。&lt;/p&gt;
&lt;p&gt;JAXA は通信が回復する可能性を期待して受信体制を続けるようだが，これは難しいんじゃないかなぁ。
宇宙じゃ「ちょいと行ってきて直す」とかできないからねぇ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id=&#34;edit&#34;&gt;ATOM 1.7 と Visual Studio Code 1.0 が登場&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20160414_753303.html&#34;&gt;GitHub、オープンソースのテキストエディター「Atom」の最新正式版v1.7を公開 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20160415_753468.html&#34;&gt;Microsoft製の無償コードエディター「Visual Studio Code」がv1.0.0に - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/visual_studio_code10.html&#34;&gt;オープンソースの開発ツール「Visual Studio Code」が正式版となるバージョン1.0に到達 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/74th/items/12521790a1c680af934c&#34;&gt;1.0になったVisualStudioCodeの強みと弱点 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私は Windows 版の &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を使ってるんだけど， tree view からのファイル削除をしくじるんだよなぁ（&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; というより &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にインストールしているパッケージのせいかもしれんけど）。
多分あれって Windows のファイルシステムのせいだよなぁ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/why-i-use-cmd-on-windows.htm&#34;&gt;Big Sky :: Windows ユーザは cmd.exe で生きるべき。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt; はいい製品に育ったねぇ。
私は既に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; をメインに使ってるけど，これは「ちょっと使ってみようかな」と思わせる製品になった。&lt;/p&gt;
&lt;p&gt;最近の Microsoft は .NET Core と &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt; がいい感じである。
逆に Windows 10 は過剰なコントロールでどんどんダメな OS になっていく。
もう Microsoft も Windows は事実上見捨ててるのだろう。&lt;/p&gt;
&lt;h2 id=&#34;qt&#34;&gt;Windows 版 QuickTime がようやく終了&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.us-cert.gov/ncas/alerts/TA16-105A&#34;&gt;Apple Ends Support for QuickTime for Windows; New Vulnerabilities Announced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/ta/JVNTA92371676/&#34;&gt;JVNTA#92371676: QuickTime for Windows に複数のヒープバッファオーバフローの脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mac 版とかはどうか知らないが， Windows 版の QuickTime は最初からクソッタレな実装だった。
しかも当時は iTunes と抱き合わせでインストールされるので容易に捨てられず往生した覚えがある。&lt;/p&gt;
&lt;p&gt;CVSSv3 基本値は 6.3 なので「要注意」レベルだが，サポートされない製品を入れておく理由はない。
危険物はとっとと捨てましょう。&lt;/p&gt;
&lt;h2 id=&#34;other&#34;&gt;その他の気になる記事&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/linking-to-pirated-content-is-not-copyright-infringement-160407/&#34;&gt;Linking to Pirated Content Is Not Copyright Infringement, Says EU Court Adviser - TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35081244/&#34;&gt;カナダ警察、「BlackBerry」のマスター暗号化キーを入手していた&amp;ndash;メッセージの解読に利用 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eff.org/deeplinks/2016/04/white-house-source-code-policy-big-win-open-government&#34;&gt;White House Source Code Policy a Big Win for Open Government | Electronic Frontier Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/topics/alert280413.html&#34;&gt;【注意喚起】ランサムウェア感染を狙った攻撃に注意：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/blog/2016/04/working-on-html5-1/&#34;&gt;Working on HTML5.1 | W3C Blog&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/w3c/html&#34;&gt;w3c/html: Working Draft of the HTML specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/w3chtml519github.html&#34;&gt;W3C、「HTML5.1」を今年9月に勧告とする計画。仕様はGitHubで公開 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.globalvoices.org/2016/04/13/40418/&#34;&gt;中国は「オーウェル風ディストピア」？「社会信用制度」とは · Global Voices 日本語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.creativecommons.org/2016/04/14/japanese-beatmaking-event-producers-create-cc-remixes-just-four-hours/&#34;&gt;At Japanese Beatmaking Event, Producers Create CC Remixes in Just Four Hours - Creative Commons blog - Creative Commons&lt;/a&gt; : 日本のイベントに本家 CC が反応していることに驚いた。昨年のソウルのイベントでは CCjp はほぼ無視してたのにね&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q2/000386.html&#34;&gt;[Announce] Libgcrypt 1.7.0 released&lt;/a&gt; : SHA-3 や ChaCha など新しいアルゴリズムが登場&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00GJOESS6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ymtvyHUmL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B00GJOESS6?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;復活の地１&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;小川一水 (著)&lt;/dd&gt;
    &lt;dd&gt;早川書房 2012-09-15 (Release 2013-11-15)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00GJOESS6 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;コミカライズ版もある。てか，コミカライズ版を最初に読んだ（笑） 大きな災害がある度にこの作品を思い出す。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-04-17&#34;&gt;2016-04-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 復活の地 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ハッブル望遠鏡の時はスペースシャトルが運用されていた時代なので，望遠鏡のところまで行って修理したけど。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>週末スペシャル： The TPP must be rejected.</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2015/1121-diary/" />
		<id>tag:text.Baldanders.info,2015-11-21:/remark/2015/1121-diary/</id>
		<published>2015-11-20T22:48:29+00:00</published>
		<updated>2019-07-01T13:48:09+00:00</updated>
		<summary>The TPP must be rejected. / 広島大学天文学研究会プラネタリウム &amp; 天体観望会 / NTPsec ベータ版が公開 / Visual Studio Code がベータ版に到達</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#tppip&#34;&gt;The TPP must be rejected.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#huaa&#34;&gt;広島大学天文学研究会プラネタリウム &amp;amp; 天体観望会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ntpsec&#34;&gt;NTPsec ベータ版が公開&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vscode&#34;&gt;Visual Studio Code がベータ版に到達&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tppip&#34;&gt;The TPP must be rejected.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; から TPP の分析とかなり強い調子の提言。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/weblog/entry/46455&#34;&gt;Trans-Pacific Partnership Would Harm User Rights and the Commons - Creative Commons&lt;/a&gt; : 要旨&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/campaigns/trans-pacific-partnership-would-harm-user-rights-and-the-commons&#34;&gt;Trans-Pacific Partnership Would Harm User Rights and the Commons - Creative Commons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要点は以下のとおり（英語のままでごめん）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;20-year copyright term extension is unnecessary and unwarranted&lt;/li&gt;
&lt;li&gt;The mention of the public domain is lip service, at best&lt;/li&gt;
&lt;li&gt;Enforcement provisions are mandatory, while exceptions and limitations are optional&lt;/li&gt;
&lt;li&gt;Potentially drastic infringement penalties, even for non-commercial sharing&lt;/li&gt;
&lt;li&gt;Criminal penalties for circumventing digital rights management on works&lt;/li&gt;
&lt;li&gt;Investor-state dispute settlement mechanism may be leveraged for intellectual property claims&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最初の著作権期限の延長および2番目については，&lt;a href=&#34;https://text.baldanders.info/remark/2015/1114-diary/#tppip&#34;&gt;これまで述べた&lt;/a&gt;ように「公有財産の私有化」と言えるものだが，残りの4つはまさに「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%A2%E3%83%B3%E3%82%BA%E3%81%AE%E6%82%B2%E5%8A%87&#34;&gt;コモンズの悲劇&lt;/a&gt;」を地で行くような内容であり &lt;a href=&#34;https://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; が強い調子に出るのも当然と言える。&lt;/p&gt;
&lt;p&gt;「所有」の概念も「共有」の概念も希薄&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; な日本では，このような強い調子に出る人や団体はない。
しかし TPP 知財は1国の問題ではなく，かつ今後100年単位で世界に影響を及ぼしうるものだ。&lt;/p&gt;
&lt;p&gt;さて，どうなるやら。&lt;/p&gt;
&lt;h3&gt;追記&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/25/news078.html&#34;&gt;著作権侵害の非親告罪化には「慎重であるべき」　文芸家協会が声明 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20151125_732191.html&#34;&gt;日本ではパロディー認める判決は出ていない、コミケなど摘発の可能性――TPPによる著作権侵害の非親告罪化になおも懸念、日本文藝家協会が声明 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;huaa&#34;&gt;広島大学天文学研究会プラネタリウム &amp;amp; 天体観望会&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiroshima-u.jp/moto/news/2015-11-13-1057&#34;&gt;広島大学天文学研究会プラネタリウム＆天体観望会を開催します | 広島大学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;わお。
広大のサイトで告知だよ。
偉くなったなぁ，天文研。
私の頃のようなヌルいサークル活動じゃなくなってるのかもな。&lt;/p&gt;
&lt;p&gt;11月20日（金）の回は終わったけど，12月8日（火）の回はこれからなので，興味のある方は是非。
西条おっと東広島キャンパスの夜空はいいですよ。&lt;/p&gt;
&lt;p&gt;私は平日は無理 orz&lt;/p&gt;
&lt;h2 id=&#34;ntpsec&#34;&gt;NTPsec ベータ版が公開&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ntpsec.org/pressrelease-20151116.html&#34;&gt;NTP Security Project announces public development release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/ntpsec09.html&#34;&gt;Network Time Protocol（NTP）の脆弱性を改善する「NTPsec」、ベータ版が公開 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The goal of the project is to harden against security vulnerabilities and especially against “amplification attacks” that threaten the stability of the entire Internet. The project welcomes the participation of information security researchers, and practices Responsible Disclosure.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;https://www.ntpsec.org/pressrelease-20151116.html&#34;&gt;NTP Security Project announces public development release&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;NTP における「増幅攻撃（amplification attacks）」とは2014年に発生した NTP を使った DDoS を指していて&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;というのも、monlistで問い合わせを送ると、そのNTPサーバーが過去に通信したマシン、最大600台分のIPアドレスを返答する。わずか234バイトの問い合わせパケットに対し、帰ってくる応答パケットのサイズは数十倍、数百倍という大きさだ。オープンなNTPサーバーに送信元を偽装したmonlistリクエストを送り付けると、標的には膨大なトラフィックが押し寄せる。&lt;br&gt;
この構図は、2013年のDDoS攻撃に悪用された「DNSリフレクション攻撃」（DNS amp攻撃）と同様だ。ただ、DNSリフレクション攻撃における増幅率が8倍であるのに対し、NTPのmonlistを悪用した増幅攻撃では、19倍から206倍という数字がはじき出せると、CloudFlareは説明している。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1402/12/news140.html&#34;&gt;DNSよりも高い増幅率の「理想的なDDoSツール」：NTP増幅攻撃で“史上最大規模”を上回るDDoS攻撃発生 - ＠IT&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;というものだ。
これから徐々に &lt;a href=&#34;https://www.ntpsec.org/&#34; title=&#34;Welcome to NTPsec&#34;&gt;NTPsec&lt;/a&gt; に置き換わっていくのかな。&lt;/p&gt;
&lt;h2 id=&#34;vscode&#34;&gt;Visual Studio Code がベータ版に到達&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/b/vscode/archive/2015/11/17/announcing-visual-studio-code-beta.aspx&#34;&gt;Announcing Visual Studio Code Beta - Visual Studio Code - Site Home - MSDN Blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/visual_studio_code_go_pascal.html&#34;&gt;［速報］無償のコードエディタ「Visual Studio Code」が、Go言語/Pascal/Reactなどに対応。ベータ版にも到達。Microsoft Connect(); 2015 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さらに&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/netwindowsmacos_xlinux.html&#34;&gt;［速報］オープンソース版.NETがリリース候補版に到達。Windows、MacOS X、Linuxで同一の.NETアプリが実行可能に。Microsoft Connect(); 2015 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20151119_731485.html&#34;&gt;Microsoft、開発者向けの無償プログラム“Visual Studio Dev Essentials”を発表 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大盤振る舞い！ まぁでも，残念ながらエディタは &lt;a href=&#34;https://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM に乗り換えちゃった&lt;/a&gt;ので &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined.&#34;&gt;Visual Studio Code&lt;/a&gt; は当分出番なしかな。
仕事でも使う予定はないし。&lt;/p&gt;
&lt;p&gt;新しい .NET はかなり期待している。
希望としては &lt;a href=&#34;http://gitextensions.github.io/&#34;&gt;Git Extensions&lt;/a&gt; や &lt;a href=&#34;http://keepass.info/&#34;&gt;KeePass&lt;/a&gt; など今まで &lt;a href=&#34;http://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; で動いていたものが新しい .NET に置き換えれるなら私が嬉しい。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;「所有」の概念が薄いからこそ「公有」や「共有」の概念も希薄だと言えるが。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
</feed>
