<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Module - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/module/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/module/index.xml" />
	<id>tag:text.Baldanders.info,2018-09-26:/tags</id>
	<updated>2018-09-26T13:53:04+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.48</generator>

	
	<entry>
		<title>Go 1.11 のリリースと「モジュール」機能の実験的サポート - release</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/release/2018/09/go-1_11-ise-released/" />
		<id>tag:text.Baldanders.info,2018-09-26:/release/2018/09/go-1_11-ise-released/</id>
		<published>2018-09-26T13:53:04+09:00</published>
		<updated>2018-09-26T19:18:26+09:00</updated>
		<summary>「モジュール」とは，これまで vgo (Versioned Go) として開発が進められてきたものである。この機能について簡単に紹介する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="http://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;1ヶ月も前の話で申し訳ないが，先月末に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラ 1.11 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go1.11&#34;&gt;Go 1.11 is released - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.11&#34;&gt;Go 1.11 Release Notes - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主な変更点は以下の2つ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebAssembly へのコンパイルをサポート&lt;/li&gt;
&lt;li&gt;「モジュール」機能の実験的サポート&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうち，今回は「モジュール」機能のサポートについて簡単に紹介する。&lt;/p&gt;

&lt;p&gt;「モジュール」とは，これまで vgo (Versioned Go) として開発が進められてきたもので&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/go-and-versioning/&#34;&gt;vgo (Versioned Go) に関する覚え書き&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この成果が正式に組み込まれる。
バージョン 1.11 で「モジュール」機能を有効にするには環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; を &lt;code&gt;on&lt;/code&gt; または &lt;code&gt;auto&lt;/code&gt; にセットする。&lt;/p&gt;

&lt;p&gt;ちなみに，環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; を &lt;code&gt;auto&lt;/code&gt; にセットした場合， GOPATH 下のコードについては以前と同じように動作するが，それ以外の場所では「モジュール」機能が有効になる。
1.11 では環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; が既定で auto になっている。&lt;/p&gt;

&lt;p&gt;試しに以下のソースファイル &lt;code&gt;hello.go&lt;/code&gt; を適当なフォルダに作成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;rsc.io/quote&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行しても &lt;code&gt;rsc.io/quote&lt;/code&gt; パッケージがないと怒られてコンパイルエラーになる。
ここまでは従来どおりの動作。&lt;/p&gt;

&lt;p&gt;次に以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init hello
go: creating new go.mod: module hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このコマンドで &lt;code&gt;go.mod&lt;/code&gt; ファイルが生成される。
中身は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;hello.go&lt;/code&gt; ファイルはモジュール &lt;code&gt;hello&lt;/code&gt; のコードとして定義された。&lt;/p&gt;

&lt;p&gt;モジュール名はパッケージのインポート・パスと同じく&lt;a href=&#34;https://golang.org/cmd/go/#hdr-Remote_import_paths&#34;&gt;リポジトリのパスと連動&lt;/a&gt;している。
たとえば &lt;code&gt;hello.go&lt;/code&gt; ファイルをリポジトリ &lt;code&gt;https://github.com/spiegel-im-spiegel/hello&lt;/code&gt; で公開・管理するなら，モジュール名も &lt;code&gt;github.com/spiegel-im-spiegel/hello&lt;/code&gt; となる。&lt;/p&gt;

&lt;p&gt;では，この状態でコードを実行してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run hello.go
go: finding rsc.io/quote v1.5.2
go: downloading rsc.io/quote v1.5.2
go: finding rsc.io/sampler v1.3.0
go: finding golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
go: downloading rsc.io/sampler v1.3.0
go: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
Hello, world.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自動的に &lt;code&gt;rsc.io/quote&lt;/code&gt; およびその依存パッケージがモジュールとして読み込まれていることが分かると思う。
このとき &lt;code&gt;go.mod&lt;/code&gt; ファイルを見ると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module hello

require rsc.io/quote v1.5.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依存モジュールおよびそのバージョンの記述が追加されていることが分かる。
モジュール間の依存関係を見るには以下のコマンドを実行する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dot1&#34;&gt;&lt;a href=&#34;#fn:dot1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod graph
hello rsc.io/quote@v1.5.2
rsc.io/quote@v1.5.2 rsc.io/sampler@v1.3.0
rsc.io/sampler@v1.3.0 golang.org/x/text@v0.0.0-20170915032832-14c0d48ead0c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，読み込まれたモジュールの実体は &lt;code&gt;$GOPATH/mod&lt;/code&gt; フォルダ以下に格納されている。&lt;/p&gt;

&lt;p&gt;更に &lt;code&gt;go.mod&lt;/code&gt; ファイルを以下のように書き換えてみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module hello

require (
	golang.org/x/text v0.3.0
	rsc.io/quote v1.5.2
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この状態で，再び実行してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run hello.go
go: finding golang.org/x/text v0.3.0
go: downloading golang.org/x/text v0.3.0
Hello, world.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;golang.org/x/text&lt;/code&gt; モジュールの v0.3.0 が読み込まれていることが分かる。&lt;/p&gt;

&lt;p&gt;既存のパッケージをモジュールとして定義する際， &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; で管理していると移行がスムーズになる。
自作の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; で試してみよう。&lt;/p&gt;

&lt;p&gt;まずはリポジトリの内容を適当なフォルダに展開し &lt;code&gt;go.mod&lt;/code&gt; ファイルを作成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init github.com/spiegel-im-spiegel/gpgpdump
go: creating new go.mod: module github.com/spiegel-im-spiegel/gpgpdump
go: copying requirements from Gopkg.lock&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依存情報を &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; の &lt;code&gt;Gopkg.lock&lt;/code&gt; ファイルから取得しているのが分かるだろう。
生成された &lt;code&gt;go.mod&lt;/code&gt; ファイルの内容は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/spiegel-im-spiegel/gpgpdump

require (
	github.com/BurntSushi/toml v0.3.0
	github.com/inconshreveable/mousetrap v1.0.0
	github.com/pkg/errors v0.8.0
	github.com/spf13/cobra v0.0.3
	github.com/spf13/pflag v1.0.2
	github.com/spiegel-im-spiegel/gocli v0.8.0
	golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新しいバージョンがリリースされていないか調べる場合は以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go list -m -u all
go: finding github.com/pkg/errors v0.8.0
go: finding github.com/spf13/pflag v1.0.2
go: finding github.com/spf13/cobra v0.0.3
go: finding github.com/BurntSushi/toml v0.3.0
go: finding github.com/spiegel-im-spiegel/gocli v0.8.0
go: finding github.com/inconshreveable/mousetrap v1.0.0
go: finding golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87
go: finding golang.org/x/crypto latest
go: finding github.com/BurntSushi/toml v0.3.1
github.com/spiegel-im-spiegel/gpgpdump
github.com/BurntSushi/toml v0.3.0 [v0.3.1]
github.com/inconshreveable/mousetrap v1.0.0
github.com/pkg/errors v0.8.0
github.com/spf13/cobra v0.0.3
github.com/spf13/pflag v1.0.2
github.com/spiegel-im-spiegel/gocli v0.8.0
golang.org/x/crypto v0.0.0-20180816225734-aabede6cba87 [v0.0.0-20180910181607-0e37d006457b]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この情報を元に &lt;code&gt;go.mod&lt;/code&gt; ファイルを書き換えてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/spiegel-im-spiegel/gpgpdump

require (
&lt;span class=&#34;hl&#34;&gt;	github.com/BurntSushi/toml v0.3
&lt;/span&gt;	github.com/inconshreveable/mousetrap v1.0.0
	github.com/pkg/errors v0.8.0
	github.com/spf13/cobra v0.0.3
	github.com/spf13/pflag v1.0.2
	github.com/spiegel-im-spiegel/gocli v0.8.0
&lt;span class=&#34;hl&#34;&gt;	golang.org/x/crypto latest
&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで最新モジュールを取得できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod download
go: finding golang.org/x/crypto latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;取得後の &lt;code&gt;go.mod&lt;/code&gt; ファイルは以下のように書き換えられる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module github.com/spiegel-im-spiegel/gpgpdump

require (
&lt;span class=&#34;hl&#34;&gt;	github.com/BurntSushi/toml v0.3.1
&lt;/span&gt;	github.com/inconshreveable/mousetrap v1.0.0
	github.com/pkg/errors v0.8.0
	github.com/spf13/cobra v0.0.3
	github.com/spf13/pflag v1.0.2
	github.com/spiegel-im-spiegel/gocli v0.8.0
&lt;span class=&#34;hl&#34;&gt;	golang.org/x/crypto v0.0.0-20180910181607-0e37d006457b
&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;んー。
これで &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; からの置き換えができそうかな。
ようやく「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」が解消されるかねぇ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dave.cheney.net/2018/07/16/using-go-modules-with-travis-ci&#34;&gt;Using Go modules with Travis CI | Dave Cheney&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dot1&#34;&gt;是非とも dot 言語で出力してほしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dot1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>vgo (Versioned Go) に関する覚え書き - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/go-and-versioning/" />
		<id>tag:text.Baldanders.info,2018-02-24:/golang/go-and-versioning/</id>
		<published>2018-02-24T16:10:44+09:00</published>
		<updated>2018-03-01T09:31:39+09:00</updated>
		<summary>Go 言語の次のバージョン（v1.11）から vgo (Versioned Go) を実装する計画があるようで， vgo 関連のドキュメントが公開されている。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の次のバージョン（v1.11）から vgo (Versioned Go) を実装する計画があるようで， vgo 関連のドキュメントが公開されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo&#34;&gt;research!rsc: Go &amp;amp; Versioning&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-intro&#34;&gt;research!rsc: Go += Package Versioning (Go &amp;amp; Versioning, Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-tour&#34;&gt;research!rsc: A Tour of Versioned Go (vgo) (Go &amp;amp; Versioning, Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-import&#34;&gt;research!rsc: Semantic Import Versioning (Go &amp;amp; Versioning, Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-mvs&#34;&gt;research!rsc: Minimal Version Selection (Go &amp;amp; Versioning, Part 4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-repro&#34;&gt;research!rsc: Reproducible, Verifiable, Verified Builds (Go &amp;amp; Versioning, Part 5)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-module&#34;&gt;research!rsc: Defining Go Modules (Go &amp;amp; Versioning, Part 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-cmd&#34;&gt;research!rsc: Versioned Go Commands (Go &amp;amp; Versioning, Part 7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vgo は新しいパッケージのバージョン管理機能で，vendoring 機能を使った &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; や &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; のような仕組みとは異なるアプローチらしい。
まず v1.11 で試験的に導入し， v1.12 で正式に導入することを目指しているようだ。
最終的に vgo が従来の go コマンドから完全に置き換えられることになれば &lt;code&gt;go get&lt;/code&gt; を削除することも考えてるみたい。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;I would like Go 1.11 to ship with preliminary support for Go modules, as a kind of technology preview, and then I&#39;d like Go 1.12 to ship with official support. In some later release, we&#39;ll remove support for the old, unversioned go get. That&#39;s an aggressive schedule, though, and if getting the functionality right means waiting for later releases, we will.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://research.swtch.com/vgo-intro&#34;&gt;Go &amp;#43;= Package Versioning&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;お試し-vgo&#34;&gt;お試し vgo&lt;/h2&gt;

&lt;p&gt;vgo のプロトタイプ版があるようなのでちょっとだけ試してみる。
なお，以下は “&lt;a href=&#34;https://research.swtch.com/vgo-tour&#34; title=&#34;research!rsc: A Tour of Versioned Go (vgo) (Go &amp;amp; Versioning, Part 2)&#34;&gt;A Tour of Versioned Go&lt;/a&gt;” からの拝借なのでご注意を。&lt;/p&gt;

&lt;p&gt;vgo のプロトタイプ版は &lt;code&gt;go get&lt;/code&gt; で取得できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go get -u golang.org/x/vgo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に以下のコードを用意する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:imp1&#34;&gt;&lt;a href=&#34;#fn:imp1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// import &amp;#34;github.com/spiegel-im-spiegel/hello&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;rsc.io/quote&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ファイル名は &lt;code&gt;hello.go&lt;/code&gt; とする。
次に &lt;code&gt;hello.go&lt;/code&gt; を置いているフォルダに空の &lt;code&gt;go.mod&lt;/code&gt; ファイルを作る。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo&amp;gt;go.mod&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで準備完了。
それじゃあ，いきなり &lt;code&gt;vgo build&lt;/code&gt; してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ vgo build
vgo: resolving import &amp;#34;rsc.io/quote&amp;#34;
vgo: finding rsc.io/quote (latest)
vgo: adding rsc.io/quote v1.5.2
vgo: finding rsc.io/quote v1.5.2
vgo: finding rsc.io/sampler v1.3.0
vgo: finding golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
vgo: downloading rsc.io/quote v1.5.2
vgo: downloading rsc.io/sampler v1.3.0
vgo: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;v1.5.2&lt;/code&gt; といったバージョンはパッケージのリポジトリのタグ情報から取得する。
バージョンを示すタグ情報がない場合は &lt;code&gt;v0.0.0-20170915032832-14c0d48ead0c&lt;/code&gt; のような感じで仮バージョンが付与される。&lt;/p&gt;

&lt;p&gt;では，作成した実行バイナリを動かしてみる（この記事では Windows 環境なので悪しからず）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ hello.exe
Hello, world.

$ SET LANG=ja

$ hello.exe
こんにちは世界。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;おおー。
ちゃんと動いてる。&lt;/p&gt;

&lt;p&gt;ビルド後，空の &lt;code&gt;go.mod&lt;/code&gt; ファイルに以下のように記述が加えられた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module &amp;#34;github.com/spiegel-im-spiegel/hello&amp;#34;

require &amp;#34;rsc.io/quote&amp;#34; v1.5.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;vgo-のパッケージ管理&#34;&gt;vgo のパッケージ管理&lt;/h3&gt;

&lt;p&gt;ビルドの様子を見ればわかると思うが，依存関係を調べて各パッケージを全てダウンロードしている。
実は &lt;code&gt;golang.org/x/text&lt;/code&gt; パッケージは &lt;code&gt;GOPATH&lt;/code&gt; 配下にダウンロード済みだったのだが，これを使ってはいないようだ。&lt;/p&gt;

&lt;p&gt;じゃあ，ダウンロードしたパッケージは何処にあるかというと &lt;code&gt;$GOPATH/src/v&lt;/code&gt; フォルダ以下に展開されていた&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gpth&#34;&gt;&lt;a href=&#34;#fn:gpth&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$GOPATH/src/v
├─cache
│  ├─golang.org
│  │  └─x
│  │      └─text
│  │          └─@v
│  └─rsc.io
│      ├─quote
│      │  └─@v
│      └─sampler
│          └─@v
├─golang.org
│  └─x
│      └─text@v0.0.0-20170915032832-14c0d48ead0c
└─rsc.io
    ├─quote@v1.5.2
    └─sampler@v1.3.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更に &lt;code&gt;quote@v1.5.2&lt;/code&gt; フォルダと &lt;code&gt;sampler@v1.3.0&lt;/code&gt; フォルダにもそれぞれ &lt;code&gt;go.mod&lt;/code&gt; ファイルがあって，以下のような記述になっている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module &amp;#34;rsc.io/quote&amp;#34;

require &amp;#34;rsc.io/sampler&amp;#34; v1.3.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module &amp;#34;rsc.io/sampler&amp;#34;

require &amp;#34;golang.org/x/text&amp;#34; v0.0.0-20170915032832-14c0d48ead0c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように &lt;code&gt;go.mod&lt;/code&gt; ファイルの情報を元にして依存パッケージのバージョンを管理するわけだ。
ちなみに各パッケージの全てのバージョンを列挙するには以下のコマンドが使える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ vgo list -t rsc.io/sampler
rsc.io/sampler
        v1.0.0
        v1.2.0
        v1.2.1
        v1.3.0
        v1.3.1
        v1.99.99&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また &lt;code&gt;hello.go&lt;/code&gt; 以下の依存パッケージのバージョン情報は以下のコマンドで見ることができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ vgo list -m -u
MODULE                               VERSION                             LATEST
github.com/spiegel-im-spiegel/hello  -                                   -
golang.org/x/text                    v0.0.0-20170915032832-14c0d48ead0c  v0.0.0-20171214130843-f21a4dfb5e38
rsc.io/quote                         v1.5.2 (2018-02-15 00:44)           -
rsc.io/sampler                       v1.3.0 (2018-02-14 04:05)           v1.99.99 (2018-02-14 07:20)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; みたいに依存関係を可視化できるといいんだけどねえ。&lt;/p&gt;

&lt;h2 id=&#34;semantic-versioning-と後方互換性&#34;&gt;&lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; と後方互換性&lt;/h2&gt;

&lt;p&gt;vgo が管理するバージョンは &lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; に従うことが期待されている。
また同じ import パスで取得するパッケージは後方互換性を持つことも期待されている。&lt;/p&gt;

&lt;p&gt;たとえば， &lt;code&gt;my/thing&lt;/code&gt; パッケージの v2 が後方互換性のない構成になっていた場合は &lt;code&gt;my/thing/v2&lt;/code&gt; という感じに import パスを変えるわけだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gopkg1&#34;&gt;&lt;a href=&#34;#fn:gopkg1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://research.swtch.com/vgo-import&#34;&gt;&lt;img src=&#34;https://research.swtch.com/impver.png&#34; srcset=&#34;https://research.swtch.com/impver.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Semantic Import Versioning&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://research.swtch.com/vgo-import&#34;&gt;Semantic Import Versioning&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;現行の &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラはパッケージのバージョンを意識していないが（バージョン管理は &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; のような外部ツールが担っている）， vgo が正式に組み込まれればより厳密な（&lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; に基づいた）バージョン管理が要求されることになると思う。
なので，今からそれを意識した運用を考えておくべきかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;とはいえ-まだ先の話&#34;&gt;とはいえ，まだ先の話&lt;/h2&gt;

&lt;p&gt;とはいえ，次の v1.11 が出るのは早くても半年後（2018年8月頃）だし，正式対応するという v.1.12 など鬼が笑う話である。
今後 &lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; は意識したほうがいいかもしれないが，当面は &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; などを用いた運用ができていればいいと思う。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/lufia/items/67701e2f927c77a75d6e&#34;&gt;Go &amp;amp; Versioning(vgo)を読んで大きな変更が入ったなと思った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nekketsuuu/items/36f00484ff7c30fd2007&#34;&gt;和訳: Go &amp;amp; Versioning - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nekketsuuu/items/60634417e6279ccfd95b&#34;&gt;和訳: Go += Package Versioning (Go &amp;amp; Versioning, Part 1) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nekketsuuu/items/589bc29f00b507492a96&#34;&gt;和訳: A Tour of Versioned Go (vgo) (Go &amp;amp; Versioning, Part 2) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nekketsuuu/items/2dcad7dde29171e1fe3f&#34;&gt;和訳: Semantic Import Versioning (Go &amp;amp; Versioning, Part 3) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:imp1&#34;&gt;ソースコードの先頭部分 &lt;code&gt;package main&lt;/code&gt; に続くコメント &lt;code&gt;// import ...&lt;/code&gt; を正しく書かないとビルド時にエラーになる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:imp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gpth&#34;&gt;このパスは正式版までに変更されると考えられる。 &lt;code&gt;go.mod&lt;/code&gt; ファイルにパッケージへのフルパスが記述されるため，わざわざ &lt;code&gt;GOPATH&lt;/code&gt; 配下にパス構成を統合する必要が無いからである。最終的には &lt;code&gt;GOPATH&lt;/code&gt; の削除も視野に入れているかもしれない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gpth&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gopkg1&#34;&gt;あるいは &lt;a href=&#34;http://labix.org/gopkg.in&#34; title=&#34;gopkg.in - Stable APIs for the Go language&#34;&gt;gopkg.in&lt;/a&gt; のような API を使う手もある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gopkg1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Lua のモジュール - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/lua-module/" />
		<id>tag:text.Baldanders.info,2016-01-04:/remark/2016/01/lua-module/</id>
		<published>2016-01-04T22:44:13+09:00</published>
		<updated>2016-01-04T22:44:13+09:00</updated>
		<summary>Lua は不案内なので知らなかったのだが module() 関数は Lua 5.2 で廃止されていたらしい。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; 4.1.0_0 がリリースされた。
主な変更点は &lt;code&gt;ln&lt;/code&gt; コマンドが追加されたことのようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zetamatta/nyagos/releases/tag/4.1.0_0&#34;&gt;Release 4.1.0_0 · zetamatta/nyagos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ただ，私の場合はより切実な問題があって， &lt;code&gt;-f&lt;/code&gt; オプションで &lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; のスクリプトを実行させた場合に &lt;code&gt;module()&lt;/code&gt; 関数が使えなくなった。
&lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; は不案内なので知らなかったのだが &lt;code&gt;module()&lt;/code&gt; 関数は &lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; 5.2 で deprecated になっていたらしい。
逆になんで今まで使えてたのかは分からない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://p-monster.hatenablog.com/entry/2013/02/13/205419&#34;&gt;Luaのモジュールを穴が空くまで見つめてみる - プログラミングの魔物&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;module()&lt;/code&gt; 関数が使えないので &lt;code&gt;require()&lt;/code&gt; で外部ファイルを呼び出すとファイル内の記述がそのまま実行される。&lt;/p&gt;

&lt;p&gt;以前なら &lt;code&gt;module1.lua&lt;/code&gt; に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;module1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;package.seeall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;method1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Method 1&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;method2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Method 2&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と定義しておけば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span class=&#34;n&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;module1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;nyagos.write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module1.method1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;nyagos.write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module1.method2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と記述できた。
もし同じように機能させたいなら &lt;code&gt;module1.lua&lt;/code&gt; を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span class=&#34;n&#34;&gt;module1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;module1.method1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Method 1&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;module1.method2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Method 2&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と記述するのが一番簡単なようだ。
&lt;code&gt;module1&lt;/code&gt; を関数テーブルとして定義するわけだ。&lt;/p&gt;

&lt;p&gt;あるいは &lt;code&gt;module1.lua&lt;/code&gt; を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span class=&#34;kd&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;module1.method1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Method 1&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;module1.method2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Method 2&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;としておいて，呼び出し側を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span class=&#34;kd&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;module1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;module1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;nyagos.write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module1.method1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;nyagos.write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module1.method2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすればグローバル領域を汚さずに済むだろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.luafaq.org/&#34;&gt;Lua Unofficial FAQ (uFAQ)&lt;/a&gt; : “1.37.2 Life after module()?” の項が参考になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/16849422/using-the-module-function-in-lua-5-2&#34;&gt;c++ - Using the &amp;lsquo;module&amp;rsquo; function in Lua 5.2? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://marupeke296.com/LUA_No4_Table.html&#34;&gt;その４ 会得必須！Luaの真髄「テーブル」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ie.u-ryukyu.ac.jp/~e085739/lua.hajime.4.html&#34;&gt;第 4 回: Lua のオブジェクト指向について紹介する — WTOPIA v1.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
</feed>
