<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Plantuml - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/plantuml/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/plantuml/index.xml" />
	<id>tag:text.Baldanders.info,2017-12-17:/tags</id>
	<updated>2017-12-17T21:56:39+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.48</generator>

	
	<entry>
		<title>ATOM エディタを使った作図（PlantUML 編） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/12/plantuml-with-atom/" />
		<id>tag:text.Baldanders.info,2017-12-17:/remark/2017/12/plantuml-with-atom/</id>
		<published>2017-12-17T21:56:39+09:00</published>
		<updated>2018-03-06T11:00:35+09:00</updated>
		<summary>おおっ。流石にクラス図は PlantUML の方がいいな。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34; title=&#34;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&#34;&gt;前回&lt;/a&gt;で &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの掃除も終わったので，以前から気になっていた「&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; を使った作図」について調べてみた。
ええ，分かってますとも。
&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34; title=&#34;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&#34;&gt;前回&lt;/a&gt;に引き続き「現実逃避」というやつです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/&#34;&gt;Open-source tool that uses simple textual descriptions to draw UML diagrams.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;atom-に-plantuml-関連パッケージを導入する&#34;&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 関連パッケージを導入する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体は UML (Unified Modeling Language; 統一モデリング言語) を記述するための DSL (Domain-Specific Language; ドメイン特化言語) と考えてよい（実際には UML 以外のものも記述可能）。
UML の構文（に相当するもの）は図形で表されるが，それをテキストで記述できるようにしたのが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; である。
「UML って何？」って方もおられるだろうが，それは&lt;a href=&#34;#uml&#34;&gt;後ほど説明&lt;/a&gt;する。&lt;/p&gt;

&lt;p&gt;直前に述べたように &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体はテキストで記述するが，最終的には図（diagram）に落とし込むため &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; と Java の実行環境が必要となる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jar0&#34;&gt;&lt;a href=&#34;#fn:jar0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
これらをあらかじめ導入しておくこと（導入方法については割愛する）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で UML を書く（描く）ために以下の2つのパッケージを導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jar1&#34;&gt;&lt;a href=&#34;#fn:jar1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; は（今のところ）ハイライト機能しかないようなので無くても構わないが， &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; は描画に必要なので必ず導入すること。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; を導入したら Settings を開いて “Charset” および “Graphviz Dot Executable” 各項目の設定をしておく。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/38219245875/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4736/38219245875_7b15a4bf02.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4736/38219245875_7b15a4bf02.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;settings of plantuml-viewer package&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/38219245875/&#34;&gt;settings of plantuml-viewer package&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;“Graphviz Dot Executable” 項目には &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の dot コマンドへのフルパスをセットする。
“Charset” 項目については， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で書くんだから UTF-8 にしておけばいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;最初はやっぱり-hello-world-でしょ&#34;&gt;最初はやっぱり Hello World でしょ&lt;/h2&gt;

&lt;p&gt;動作確認を兼ねて何か書いてみる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; では &lt;code&gt;.pu&lt;/code&gt;, &lt;code&gt;.puml&lt;/code&gt;, &lt;code&gt;.plantuml&lt;/code&gt; を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 用の拡張子と認識するようなので，まずは &lt;code&gt;hello.puml&lt;/code&gt; ファイルを作って以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Bob-&amp;gt;Alice : hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; で表示する（&lt;code&gt;ctrl-alt-p&lt;/code&gt; でビュアーが開く）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello1.puml&#34;&gt;&lt;img src=&#34;hello1.svg&#34; srcset=&#34;hello1.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;おおっ。
できたできた。
表示されている図は PNG, SVG, EPS のいずれかの形式で保存できる（コンテキスト・メニューから “Save As &amp;hellip;” を選択する）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は &lt;code&gt;@startuml ... @enduml&lt;/code&gt; の間を記述領域と見なすようで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;ほげほげ

@startuml
  Bob-&amp;gt;Alice : hello
@enduml

ほえほえ&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いても，全く同じ図が出力される。
他形式のドキュメントに埋め込むことを想定してのことだろうが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:embd1&#34;&gt;&lt;a href=&#34;#fn:embd1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，今回は単純に図が出力できればいいので，以降の記述では &lt;code&gt;@startuml&lt;/code&gt; および &lt;code&gt;@enduml&lt;/code&gt; を省くことにする。&lt;/p&gt;

&lt;h2 id=&#34;見た目の調整&#34;&gt;見た目の調整&lt;/h2&gt;

&lt;p&gt;このままでもいいっちゃあいいのだが，もう少し見た目をどうにかしたい。
まずはモノクロ表示にしてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;skinparam monochrome true
&lt;/span&gt;Bob-&amp;gt;Alice : hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello2a.puml&#34;&gt;&lt;img src=&#34;hello2a.svg&#34; srcset=&#34;hello2a.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;という感じにモノクロになった。
調子に乗ってもう少し色々と弄ってみよう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;skinparam shadowing false
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam default{
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName &amp;#39;Noto Serif&amp;#39;, &amp;#39;Noto Serif JP&amp;#39;, serif
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 14
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam sequence {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontName &amp;#39;Noto Sans&amp;#39;, &amp;#39;Noto Sans JP&amp;#39;, sans-serif
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontColor black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontSize 10
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBackgroundColor White
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ActorBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ActorBackgroundColor White
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ParticipantBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ParticipantBackgroundColor LightGray
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  MessageAlign center
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;
actor ボブ
participant Alice

ボブ-&amp;gt;Alice : こんにちは
activate Alice

Alice--&amp;gt;ボブ : Hello
deactivate Alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;前半部分で線や背景色の色およびフォントについて指定し&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fnt1&#34;&gt;&lt;a href=&#34;#fn:fnt1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，後半部分で実際のシーケンスを記述している。
これを SVG に出力するとこんな感じになる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello2b.puml&#34;&gt;&lt;img src=&#34;hello2b.svg&#34; srcset=&#34;hello2b.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;見た目の記述に毎回あれだけの量を書くのはかったるいのでインクルードファイルとして別出ししてしまおう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;!include style.puml
&lt;/span&gt;
actor ボブ
participant Alice

ボブ-&amp;gt;Alice : こんにちは
activate Alice

Alice--&amp;gt;ボブ : Hello
deactivate Alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これでスッキリした。
&lt;a href=&#34;./style.puml&#34;&gt;&lt;code&gt;style.puml&lt;/code&gt;&lt;/a&gt; ファイルの中身はこんな感じで，記述をそのままコピっただけ。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;skinparam shadowing false
skinparam default{
  FontName &amp;#39;Noto Serif&amp;#39;, &amp;#39;Noto Serif JP&amp;#39;, serif
  FontColor black
  FontSize 14
}
skinparam sequence {
  ArrowColor Black
  ArrowFontName &amp;#39;Noto Sans&amp;#39;, &amp;#39;Noto Sans JP&amp;#39;, sans-serif
  ArrowFontColor black
  ArrowFontSize 10
  LifeLineBorderColor Black
  LifeLineBackgroundColor White
  ActorBorderColor Black
  ActorBackgroundColor White
  ParticipantBorderColor Black
  ParticipantBackgroundColor LightGray
  MessageAlign center
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;uml&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図可能な UML 図&lt;/h2&gt;

&lt;p&gt;現在 UML 2.0 では以下の図（Diagrams）が定義されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Diagrams

&lt;ul&gt;
&lt;li&gt;構造図（Structural Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/class-diagram&#34;&gt;クラス図（Class Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/object-diagram&#34;&gt;オブジェクト図（Object Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パッケージ図（Package Diagram）&lt;/li&gt;
&lt;li&gt;コンポジット構造図（Composite Structure Diagram）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/component-diagram&#34;&gt;コンポーネント図（Component Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/deployment-diagram&#34;&gt;配置図（Deployment Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;振る舞い図（Behavioral Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/use-case-diagram&#34;&gt;ユースケース図（Use Case Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図（Activity Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/state-diagram&#34;&gt;状態遷移図（State Machine Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図（Sequence Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コミュニケーション図（Communication Diagram）&lt;/li&gt;
&lt;li&gt;相互作用概要図（Interaction Overview Diagram）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/timing-diagram&#34;&gt;タイミング図（Timing Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;リンクがあるものが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 記述可能な図である。&lt;/p&gt;

&lt;p&gt;UML 各図の中の線や図形は全て「意味」が決められており，それらを組み合わせることでシステムの仕様や設計が表現できることを目指している。
名前が示す通りモデリングの設計手法と相性がいいため，オブジェクト指向設計においてよく使われる。&lt;/p&gt;

&lt;p&gt;実際には上で挙げた図を全て駆使するのではなく，システムの性格や規模に応じて幾つかの図を組み合わせて使うのが普通である。&lt;/p&gt;

&lt;p&gt;UML 図の中でもよく使われるシーケンス図とクラス図について &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; での記述を紹介しよう。
以前「&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/sequence-diagram/&#34; title=&#34;そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ）&#34;&gt;そうだ，シーケンス図を描こう！&lt;/a&gt;」の中で， &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で書いたシーケンス図&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
sequenceDiagram
    カバ-&gt;&gt;+カバン: あなた，泳げまして？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: 空は飛べるんですの？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: じゃあ，足が速いとか？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;カバン: あなた，何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&gt;&gt;カバン: ううっ
    end
&lt;/div&gt;
&lt;figcaption&gt;カバとカバン&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図するとこんな感じだろうか（図のリンク先が &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; ソースコード）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;kaban.puml&#34;&gt;&lt;img src=&#34;kaban.svg&#34; srcset=&#34;kaban.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;カバとカバン&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;kaban.puml&#34;&gt;カバとカバン&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;じゃあ， &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で書いたクラス図&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
classDiagram
    friends&lt;|--serval
    friends&lt;|--raccoon
    friends&lt;|--fennec
    serval : +Waai()
    raccoon : +OmakaseNanoda()
    fennec : +Haiyo()
&lt;/div&gt;
&lt;figcaption&gt;フレンズ&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図するとこんな感じかな（コメントをちょろんと加えてみた）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;friends-class.puml&#34;&gt;&lt;img src=&#34;friends-class.svg&#34; srcset=&#34;friends-class.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;フレンズ&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;friends-class.puml&#34;&gt;フレンズ&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おおっ。
流石にクラス図は &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の方がいいな。
矢印は横向きにも出来るっぽい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;wiki.puml&#34;&gt;&lt;img src=&#34;wiki.svg&#34; srcset=&#34;wiki.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;今度からクラス図描くときは &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で描くようにしよう。&lt;/p&gt;

&lt;h2 id=&#34;やっぱり考えながら描く&#34;&gt;やっぱり考えながら描く&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/sequence-diagram/&#34; title=&#34;そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ）&#34;&gt;そうだ，シーケンス図を描こう！&lt;/a&gt;」でも書いたんだけど，クラス図やシーケンス図といったものは試行錯誤しながら描いていくものなのよ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:case1&#34;&gt;&lt;a href=&#34;#fn:case1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
お客さんもマネージャもプログラマも UML 図を中心に議論を行っていく。
だから作成や修正が面倒なツールはダメなのだ。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は時々刻々と修正されることを前提にしたツールと言える。&lt;/p&gt;

&lt;p&gt;もうひとつ。&lt;/p&gt;

&lt;p&gt;要求定義を行っていくと「要求」やそれに伴う「仕様」が大きく変化することがある。
変化すること自体は（改善されてるってことだし）結構なのだが（予算規模が変わってアワアワする可能性はあるけど），あとからチームに参加する人たちは「結果」しか提示されないので「何故そのような「要求」に至ったか」が理解できないことが多い。
不完全な理解のまま作業をすすめると必ず何処かで不整合が起きる（つまり文脈（context）が大事ってこと）。&lt;/p&gt;

&lt;p&gt;だから議論の流れを後から追えるよう「履歴」をとっていく必要がある。
私が最近 UML 図に関して教わったのは&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;最初は不完全でも間違ってても構わない。まずは考えていることを図にぶちまけることが重要&lt;/li&gt;
&lt;li&gt;ただし，クラス図では多重度を記述すること（MUST）&lt;/li&gt;
&lt;li&gt;要求定義レベルの図と設計レベルの図は必要とされる詳細度や厳密度が異なる。最初から設計レベルの図を描こうとしないこと&lt;/li&gt;
&lt;li&gt;作成した図は（手書きのものも含めて）全て履歴として保管し，後から参照できるようにすること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;だったかな。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の利点は，テキストであるが故に修正・変更が容易で， git などのバージョン管理システムと組み合わせて履歴から差分情報を抽出しやすいことにある。
ぶっちゃけ，出力としての PNG や SVG 画像ファイルにはさしたる価値はなく， UML 用の DSL である &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の記述にこそ大きな価値があるということだ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/&#34;&gt;UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/skinparam&#34;&gt;Changing colors and fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yohshiy.blog.fc2.com/blog-category-22.html&#34;&gt;PlantUML の使い方 | プログラマーズ雑記帳&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/ogomr/items/0b5c4de7f38fd1482a48&#34;&gt;PlantUML Cheat Sheet - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/nakahashi/items/3d88655f055ca6a2617c&#34;&gt;AtomとPlantUMLで爆速UMLモデリング - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/k_nakayama/items/77ca73753ebd049a66de&#34;&gt;Atom+PlantUMLで見た目もいい感じのシーケンス図を作成する - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:jar0&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の本体は &lt;code&gt;plantuml.jar&lt;/code&gt; で提供されている。このファイルを使って “&lt;code&gt;java -jar plantuml.jar -language&lt;/code&gt;” とコマンドを打つと &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で使われる全シンボルが表示される。シーケンス図以外は内部で DOT 言語に変換してから &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; を使って作図するようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jar0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:jar1&#34;&gt;Windows なら &lt;code&gt;%USERPROFILE%\.atom\packages\plantuml-viewer&lt;/code&gt; フォルダにインストールされるが，その中の &lt;code&gt;node_modules\node-plantuml&lt;/code&gt; フォルダに &lt;code&gt;plantuml.jar&lt;/code&gt; がある筈である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jar1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:embd1&#34;&gt;&lt;code&gt;@startuml&lt;/code&gt; の後ろに &lt;code&gt;images/hello.png&lt;/code&gt; などと指定すれば &lt;code&gt;plantuml.jar&lt;/code&gt; のほうで自動的に指定したパス名で画像ファイルを出力するらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:embd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fnt1&#34;&gt;フォント名については &lt;code&gt;font-family&lt;/code&gt; としてそのまま SVG に埋め込まれる。従って環境によって見え方が異なる筈である。どの環境でも同じような見え方にしたいなら PNG で保存するのが最も確実だろう。その場合は &lt;code&gt;xxxFontName&lt;/code&gt; に自マシンにインストールされている具体的なフォント名を指定する必要がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fnt1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:case1&#34;&gt;もちろん UML を CASE (Computer Aided Software Engineering) の入力手段として使う場合もある（つか UML ってそれを念頭に置いて開発されたものだからねぇ）。その場合は矛盾のない正確な記述が要求される。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:case1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
