<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Programing - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/programing/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/programing/index.xml" />
	<id>tag:text.Baldanders.info,2016-02-14:/</id>
	<updated>2016-02-14T20:19:41+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>オンラインでプログラミング - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/online-programming/" />
		<id>tag:text.Baldanders.info,2016-02-14:/remark/2016/02/online-programming/</id>
		<published>2016-02-14T20:19:41+09:00</published>
		<updated>2016-02-14T20:19:41+09:00</updated>
		<summary>paiza.IO を試してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;先ほどの「&lt;a href=&#34;http://text.baldanders.info/remark/2016/02/14-stories/&#34;&gt;週末スペシャル&lt;/a&gt;」でも紹介したが， &lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; を試してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://paiza.io/&#34;&gt;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/omochiiiY/items/b3b3f7ece1dedca1d4e1&#34;&gt;GistをPaiza.ioで使ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コードを試すだけならアカウントはいらないが，コードを再利用したり他のサービスと連携する場合はサインアップが必要。
&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; アカウントと連携できるのでその辺は問題ないだろう。&lt;/p&gt;

&lt;p&gt;まず「&lt;a href=&#34;http://localhost:1313/golang/stack-trace-and-panic-handling/&#34;&gt;スタック追跡とパニック・ハンドリング&lt;/a&gt;」のコード例を &lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; で&lt;a href=&#34;https://paiza.io/projects/MencTrqIn3FYdg6u53xNSg&#34;&gt;書いてみた&lt;/a&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;iframe src=&#34;https://paiza.io/projects/e/MencTrqIn3FYdg6u53xNSg?theme=github&#34; width=&#34;100%&#34; height=&#34;500&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;&gt;&lt;/iframe&gt;


&lt;/figure&gt;

&lt;p&gt;こんな感じでコードと実行結果を埋め込むこともできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
また埋め込まれたコードはその場で編集して実行し直すこともできる。
試しに for 文の中を以下のコードに差し替えて実行してみて欲しい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for depth := 0; ; depth++ {
	pc, _, line, ok := runtime.Caller(depth)
	if !ok {
		break
	}
	fmt.Fprintf(log, &amp;quot; -&amp;gt; %d: %s: (%d)\n&amp;quot;, depth, runtime.FuncForPC(pc).Name(), line)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; で書いたコードは Gist と連携できる。
たとえば上のコードは&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;&#39;&gt;
&lt;script src=&#34;https://gist.github.com/spiegel-im-spiegel/89526909cc206f31c1d7.js&#34;&gt;&lt;/script&gt;
&lt;/figure&gt;

&lt;p&gt;という感じで Gist に保存されている。
Gist との同期は自動ではなく明示的に指定する必要がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; で書いたコードで他の（Twitter API などの）サービスと接続することも可能。
&amp;ldquo;&lt;a href=&#34;https://play.golang.org/&#34;&gt;The Go Playground&lt;/a&gt;” では外部との通信はできないので，これは嬉しい機能である。
たとえば「&lt;a href=&#34;http://text.baldanders.info/golang/get-shortened-url-from-gitio/&#34;&gt;Git.io から短縮 URL を取得するコード&lt;/a&gt;」を参考に書いたコードがこれ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;iframe src=&#34;https://paiza.io/projects/e/uUG8z-Teb45q4RZIBSSAeg?theme=github&#34; width=&#34;100%&#34; height=&#34;500&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34;&gt;&lt;/iframe&gt;


&lt;/figure&gt;

&lt;p&gt;実行をスケジューリングすることも可能なので，簡単なサーバ監視プログラムとか，色々な使い方ができそうである。&lt;/p&gt;

&lt;p&gt;更に &lt;a href=&#34;https://twitter.com/&#34;&gt;Twitter&lt;/a&gt; でコードを書くことも可能。
あらかじめ @&lt;a href=&#34;https://twitter.com/paiza_run&#34;&gt;paiza_run&lt;/a&gt; を follow しておいて&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/paiza_run&#34;&gt;@paiza_run&lt;/a&gt; go: package main&lt;br&gt;import &amp;quot;fmt&amp;quot;&lt;br&gt;func main() {&lt;br&gt;    fmt.Println(&amp;quot;Hello World!&amp;quot;)&lt;br&gt;}&lt;/p&gt;&amp;mdash; Spiegel im Spiegel (@spiegel_2007) &lt;a href=&#34;https://twitter.com/spiegel_2007/status/698818840533184512&#34;&gt;2016, 2月 14&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;p&gt;とコードを投げれば&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/spiegel_2007&#34;&gt;@spiegel_2007&lt;/a&gt; Hello World! &lt;a href=&#34;https://twitter.com/hashtag/paiza_run_result?src=hash&#34;&gt;#paiza_run_result&lt;/a&gt;&lt;/p&gt;&amp;mdash; paiza_run (@paiza_run) &lt;a href=&#34;https://twitter.com/paiza_run/status/698818848921776128&#34;&gt;2016, 2月 14&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;p&gt;と結果が返ってくる。
これはスクリプト言語でやったほうが面白いかな。&lt;/p&gt;

&lt;p&gt;更に更に，他のユーザが書いたコードを fork することも可能。
またチャット等でリアルタイムにやり取りしながらコードを書くこともできるみたい。
遠隔ペアプログラミングとかできそうだよね。&lt;/p&gt;

&lt;p&gt;ただし， &lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; では実行時間と使えるメモリに制限があって，大体どの言語でも2秒で512MBが制限になっている模様。
また &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は標準以外の外部パッケージが使えない。
たとえば以下は「&lt;a href=&#34;http://text.baldanders.info/golang/transform-character-encoding/&#34;&gt;文字エンコーディング変換&lt;/a&gt;」で書いたコードだが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;golang.org/x/text/encoding/japanese&amp;quot;
	&amp;quot;golang.org/x/text/transform&amp;quot;
)

func main() {
	reader := NewDecoder(os.Stdin)
	writer := NewEncoder(os.Stdout)
	if _, err := io.Copy(writer, reader); err != nil {
		fmt.Fprintln(os.Stderr, err)
	}
}

func NewDecoder(reader io.Reader) *transform.Reader {
	return transform.NewReader(reader, japanese.ShiftJIS.NewDecoder())
}

func NewEncoder(writer io.Writer) *transform.Writer {
	return transform.NewWriter(writer, japanese.EUCJP.NewEncoder())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://paiza.io/&#34; title=&#34;ブラウザでプログラミング・実行ができる「オンライン実行環境」| paiza.IO&#34;&gt;paiza.IO&lt;/a&gt; ではコンパイル時にエラーになる。&lt;/p&gt;

&lt;p&gt;欲を言えば &amp;ldquo;&lt;a href=&#34;https://play.golang.org/&#34;&gt;The Go Playground&lt;/a&gt;” にあるようなコードの整形機能が欲しいところである。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;ただし埋め込んだコードを表示するにはブラウザ設定で third-party cookie を有効にする必要がある。 Firefox であれば例外設定をすることもできる。いや，こういうのマジ勘弁して欲しいんですけど。今時 third-party cookie とかありえない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c844b2f4bc3106a48368bec3922465ee:cke&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
