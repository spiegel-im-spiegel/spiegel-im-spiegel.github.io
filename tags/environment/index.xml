<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Environment - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/environment/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/environment/index.xml" />
	<id>tag:text.Baldanders.info,2016-03-06:/</id>
	<updated>2016-03-06T18:20:23+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>週末スペシャル： 公開鍵暗号の研究者がチューリング賞を受賞 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/06-stories/" />
		<id>tag:text.Baldanders.info,2016-03-06:/remark/2016/03/06-stories/</id>
		<published>2016-03-06T18:20:23+09:00</published>
		<updated>2016-03-06T18:20:23+09:00</updated>
		<summary>公開鍵暗号の研究者がチューリング賞を受賞 / 出版社（者）としての青空文庫と aozorahack / 避難訓練と 3.11 / ユーザが EC に求めること / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;2月は逃げました。
3月ですよ。
年度末ですよ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#dh:6dd43dcd366428dd58640940df53736a&#34;&gt;公開鍵暗号の研究者がチューリング賞を受賞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#aozora:6dd43dcd366428dd58640940df53736a&#34;&gt;出版社（者）としての青空文庫と aozorahack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#risk:6dd43dcd366428dd58640940df53736a&#34;&gt;避難訓練と 3.11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ec:6dd43dcd366428dd58640940df53736a&#34;&gt;ユーザが EC に求めること&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other:6dd43dcd366428dd58640940df53736a&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;dh:6dd43dcd366428dd58640940df53736a&#34;&gt;公開鍵暗号の研究者がチューリング賞を受賞&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gizmodo.jp/2016/03/Turing_Award_for_public_key_encryption.html&#34;&gt;コンピューティング分野のノーベル賞ことチューリング賞、公開鍵暗号の研究者に与えられる : ギズモード・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「チューリング賞（ACM A. M. Turing Award）」はコンピュータ科学の分野での最高権威の賞と言われている。
この賞に（両氏の名を冠した） “Diffie-Hellman” 暗号方式の発明者である Whitfield Diffie, Martin E. Hellman 両氏が今まで受賞されていなかったことのほうが驚きだが，公開鍵暗号といえば RSA のほうが真っ先に浮かんでしまうからだろうか。
今ごろ受賞というのも政治臭プンプンだが，功績が認められるということはいいことである。&lt;/p&gt;

&lt;p&gt;具体的な論文はこちら。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://www-ee.stanford.edu/~hellman/publications/24.pdf&#34;&gt;New Directions in Cryptography&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;20世紀後半は暗号の暗黒時代とも言われている。
もともと暗号技術は軍事技術の一種として使われることが多かったが，第2次世界大戦の前後から重要性が高まり，国家による統制が激しくなった。
これを変えるきっかけとなったもののひとつが公開鍵暗号である。&lt;/p&gt;

&lt;p&gt;詳しくは Steven Levy さんの『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;』をどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;aozora:6dd43dcd366428dd58640940df53736a&#34;&gt;出版社（者）としての青空文庫と aozorahack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ospn.jp/osc2016-spring/&#34; title=&#34;オープンソースカンファレンス2016 Tokyo/Spring - オープンソースの文化祭！&#34;&gt;OSC Tokyo 2016/Spring&lt;/a&gt; のときの発表資料だそうな。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/itRRJPdUruVE52&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://www.slideshare.net/takahashim/osc-2016-tokyospring-aozorahack&#34;&gt;aozorahackと青空文庫の現状とこれから (OSC 2016 Tokyo/Spring)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この中で青空文庫の出版社（者）的な機能に注目している。
つまり著作権の切れた書籍に対して入力・校正・公開を行うプロセスは出版（publishing）そのものではないかという指摘である。
で，青空文庫の「図書館」機能と「出版」機能を分離することでより多くの人を巻き込むことができるのではないかという提案のようだ。&lt;/p&gt;

&lt;p&gt;具体的には管理用の DB から公開可能なサブセットを公開 DB として使えるようにしたいらしい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://www.slideshare.net/takahashim/osc-2016-tokyospring-aozorahack&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1473/24920649843_83bff63a6e.jpg&#34; alt=&#34;aozorahackと青空文庫の現状とこれから (OSC 2016 Tokyo/Spring)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://www.slideshare.net/takahashim/osc-2016-tokyospring-aozorahack&#34;&gt;aozorahackと青空文庫の現状とこれから (OSC 2016 Tokyo/Spring)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;多分ファイルも公開可能なものを別にして切り出したほうがいいのだろう（公開していない校正中の作品にはまだ著作権が切れていないものもあるので）。
公開 DB およびファイルにアクセスする API を作れば様々な人が様々なシーンで公有作品を利用できる。
また翻訳作品以外の Free Culture Licenses&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6dd43dcd366428dd58640940df53736a:fcl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6dd43dcd366428dd58640940df53736a:fcl&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; の作品も多く含めることができれば青空文庫の幅が広がるかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;risk:6dd43dcd366428dd58640940df53736a&#34;&gt;避難訓練と 3.11&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://311walk.jp/&#34;&gt;3.11WALK - 3.11は、歩いて帰ろう。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大規模災害は滅多に起こらない。
だから，いざ起きた時，つまり「事後」にどう備えるか。
ただ単に情緒的に 3.11 を思い出すのではなく，これから起きる未来を想定して「避難訓練」をしていくことはとても重要だと思う。&lt;/p&gt;

&lt;p&gt;「想定外を想定する」のは結構難しいが必要なことである。
何事もね。&lt;/p&gt;

&lt;h2 id=&#34;ec:6dd43dcd366428dd58640940df53736a&#34;&gt;ユーザが EC に求めること&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078917/&#34;&gt;PayPalとJECCICAが「EC戦略白書」発表、EC企業と顧客の認識差が浮き彫り - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;ユーザーが中小ECサイトを利用しない理由として、（1）存在が知られていない（44.5%）、（2）会員登録が面倒（34.4％）、（3）商品数の少なさ（25.6％）、（4）セキュリティ面の不安（17.5%）--の順で回答が多かった。商品の少なさやセキュリティよりも、「会員登録が面倒」という理由の方が強いことは注目に値する。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078917/&#34;&gt;PayPalとJECCICAが「EC戦略白書」発表、EC企業と顧客の認識差が浮き彫り&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「会員登録が面倒」というのはよく分かる。
ユーザは「一見客」として来ているのに会員登録を要求されるのはウザいことこの上ない。
問題は，そういうユーザの心理をサービス・プロバイダ側が認識していなかったということだろう。
ユーザを囲い込むことに躍起になって，ユーザのことを全く考えていないという証拠でもある。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この調査結果を踏まえて川連氏は、中小EC企業はユーザーの「囲い込み戦略」を止めるべきだと断言した。国内ECサイトの売上トップ100社のうち会員登録を必須とするサイトは7割。それに対して、米国のECサイト売上トップ100社で会員登録が必須なのは2割程度だ。さらにトップ25社に絞ると、国内21社に対して米国は2社となる。「すでに、グローバルトレンドはゲスト購入に移行しつつある」（川連氏）。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078917/&#34;&gt;PayPalとJECCICAが「EC戦略白書」発表、EC企業と顧客の認識差が浮き彫り&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;似たような発想は実際の店舗でもあって&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/01/toreta-pos/&#34;&gt;飲食店の「常連作り」支援に向け、予約台帳のトレタがPOSシステム5社と連携へ | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もう「常連」を囲い込みの道具としか見なしていないことがミエミエの最低マーケティングである。&lt;/p&gt;

&lt;p&gt;POS などのシステムはユーザを「スマート・モブ（smart mob）」と見なし行動追跡しながら保険統計学的に評価する。
近年はやりの「ビッグ・データ（big data）」も同じである。
これはこれで大事な分析だが，そのような視点から「常連」が生まれることはない。&lt;/p&gt;

&lt;p&gt;「固定客」と「常連客」は全くベクトルが違う。
足繁く通っているからといって客側が自身常連とは認識してないこともあるし（毎朝マックでコーヒーを飲んでるからといって自分がその店の常連だとは思ってないだろう），逆に数年に1度しか来ない「常連客」だっているのだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6dd43dcd366428dd58640940df53736a:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6dd43dcd366428dd58640940df53736a:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;かつての「クーポン」戦略が失敗したのは，ユーザを囲い込んでいるつもりで実は「クーポン」という土俵ですべての店舗が相対評価されてしまっている点である。
ユーザは数多ある「クーポン」の中から一番お得なものを都度選択しているだけで，お店に対する愛着も敬意もない。
ただ「クーポンを使えばお得」という感想が残るだけだ。&lt;/p&gt;

&lt;p&gt;EC も同じこと。
ユーザから見てその店舗に惹きつけられる何かがあれば囲い込む必要はないし，そこで勝負していかなければ結局は「EC」という括りの中で相対評価されるだけで「固定客」にも「常連客」にもならない。&lt;/p&gt;

&lt;h2 id=&#34;other:6dd43dcd366428dd58640940df53736a&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;p&gt;あとで個別に記事にするかもしれないが，とりあえずブックマークのみ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/03/02/little-bookstore-in-northern-street/&#34;&gt;北海道のシャッター通りに本屋をつくる « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2016/02/the_importance_.html&#34;&gt;The Importance of Strong Encryption to Security - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20160229_745961.html&#34;&gt;「Ruby」をWindows環境へ簡単導入できる「Rumix 2」が更新。「Ruby 2.2」に対応 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160301_746190.html&#34;&gt;「丸善＆ジュンク堂ネットストア」がネット書店「honto」に統合、hontoでも店舗取り置きサービスが利用可能に -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/TakahikoKawasaki/items/f2a0d25a4f05790b3baa&#34;&gt;OAuth 2.0 + OpenID Connect のフルスクラッチ実装者が知見を語る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/TakahikoKawasaki/items/30fbd546935cea914e4f&#34;&gt;【第二弾】OAuth 2.0 + OpenID Connect のフルスクラッチ実装者が知見を語る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/A-I/items/49bcb56ed977b4fb36ff&#34;&gt;GoTTY 良さそう - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kooshin/items/8c7dbfc9c5e8a88d1705&#34;&gt;GoTTYでブラウザからルータを操作してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:6dd43dcd366428dd58640940df53736a&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6dd43dcd366428dd58640940df53736a:fcl&#34;&gt;&lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/deed.ja&#34;&gt;CC0&lt;/a&gt;, &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/deed.ja&#34;&gt;by&lt;/a&gt;, &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/deed.ja&#34;&gt;by-sa&lt;/a&gt; を合わせて Free Culture Licenses と呼ぶ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6dd43dcd366428dd58640940df53736a:fcl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6dd43dcd366428dd58640940df53736a:a&#34;&gt;広島市は「支店都市」なのでだいたい数年単位で人が入れ替わる。故にわざわざ遠方から来る「滅多に来ない常連客」だっているのである。でも「滅多に来ない常連客」がいるというのは，その店が長く続いている証でもある。繁華街では「2年保てば上出来，3年保てば老舗」と言われるくらいお店の入れ替わりも激しい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6dd43dcd366428dd58640940df53736a:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GOPATH 汚染問題 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/gopath-pollution/" />
		<id>tag:text.Baldanders.info,2015-09-29:/golang/gopath-pollution/</id>
		<published>2015-09-29T23:40:59+09:00</published>
		<updated>2016-02-01T09:29:53+09:00</updated>
		<summary>go get コマンドは外部パッケージの revision 等をコントロールできず，常に repository の最新コードを取ってこようとする。GOPATH 内に複数のプロジェクトが同居している場合は同じ外部パッケージでもプロジェクトごとに異なるリビジョンを要求する場合があり，管理が煩雑になってしまう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/73ebc684b5807277b7e2&#34;&gt;そろそろ真面目に Golang 開発環境について考える — GOPATH 汚染問題 - Qiita&lt;/a&gt;，&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/baa3671c7e1b8a6594a9&#34;&gt;そろそろ真面目に Golang 開発環境について考える — Internal Packages と Vendoring - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; コマンドはとても強力な機能で，私のように Windows と UNIX 系環境の間を渡り歩いてる身としては， make などの tool chain に大きく依存することなく， &lt;code&gt;go get&lt;/code&gt; コマンドだけで repository の fetch からビルド・インストールまで出来てしまうのは非常にありがたい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;しかし， &lt;code&gt;go get&lt;/code&gt; コマンドは外部パッケージの revision 等をコントロールできず，常に repository の最新コードを取ってこようとする。
ひとつの環境でひとつのプロジェクトを管理していくのならこれでも何とかならないこともないが， &lt;code&gt;GOPATH&lt;/code&gt; 内に複数のプロジェクトが同居している場合は同じ外部パッケージでもプロジェクトごとに異なるリビジョンを要求する可能性があり，管理が煩雑になってしまう。&lt;/p&gt;

&lt;p&gt;しかも困ったことに &lt;code&gt;GOPATH&lt;/code&gt; 環境変数は複数のプロジェクト管理を想定していないため，全てのパッケージをひとつのフォルダに入れようとする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;対策1-プロジェクトごとに-gopath-を設定し直す:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策1】 プロジェクトごとに GOPATH を設定し直す&lt;/h2&gt;

&lt;p&gt;この問題に対する一番安直な答えは「プロジェクトごとに &lt;code&gt;GOPATH&lt;/code&gt; を設定し直す」である。例えば&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; をビルドする場合は以下のようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;mkdir C:\workspace\gb

C:&amp;gt;SET GOPATH=C:\workspace\gb

C:&amp;gt;go get -v github.com/constabulary/gb/...
github.com/constabulary/gb (download)
github.com/constabulary/gb/log
github.com/constabulary/gb
github.com/constabulary/gb/vendor
github.com/constabulary/gb/cmd
github.com/constabulary/gb/cmd/gb
github.com/constabulary/gb/cmd/gb-vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは &lt;code&gt;GOPATH&lt;/code&gt; 直下の &lt;code&gt;bin&lt;/code&gt; フォルダにパスを通すか，パスの通ってるフォルダに実行ファイルをコピーすればよい。
実行履歴はバッチファイル（UNIX 系なら shell スクリプト）に保存しておけばいつでも復元できる。&lt;/p&gt;

&lt;p&gt;毎回環境をセットアップしないといけないのは面倒だが，プロジェクト管理のためのツールも必要なく， Go コンパイラの標準機能のみで管理できる。
標準機能のみで管理できるというのは結構重要で，たとえば CI ツールを使っている場合は，設定を単純にできるので管理しやすいといえる。&lt;/p&gt;

&lt;p&gt;UNIX 系の環境であれば &lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; を使う手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; は &lt;code&gt;cd&lt;/code&gt; をフックし，ディレクトリごとに環境変数を書き換えることができる。
この機能を使ってプロジェクト・フォルダごとに &lt;code&gt;GOPATH&lt;/code&gt; を設定できる。&lt;/p&gt;

&lt;h2 id=&#34;対策2-プロジェクト-ベースの管理ツールを使う:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策2】 プロジェクト・ベースの管理ツールを使う&lt;/h2&gt;

&lt;p&gt;もうひとつは &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; のようなプロジェクト・ベースでコード管理のできるツールを使う方法である。
&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; については&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;紹介したので，そちらを参照のこと。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; で作った開発環境はフォルダ構成を丸ごと開発メンバに配布・同期することが可能になるため，複数人で環境を合わせることが容易になる。&lt;/p&gt;

&lt;h2 id=&#34;対策3-go-1-5-の-vendoring-機能を使う:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;【対策3】 Go 1.5 の Vendoring 機能を使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のバージョン 1.5 から Vendoring 機能が使えるようになった。&lt;/p&gt;

&lt;p&gt;Vendoring 機能を使うと，外部パッケージを &lt;code&gt;GOPATH&lt;/code&gt; とは独立に管理できるようになる。
この機能を使うには環境変数 &lt;code&gt;GO15VENDOREXPERIMENT&lt;/code&gt; に 1 をセットする。&lt;/p&gt;

&lt;p&gt;（&lt;strong&gt;追記&lt;/strong&gt; 当初の予告通り Vendoring 機能は 1.6 から既定の機能になった。環境変数 &lt;code&gt;GO15VENDOREXPERIMENT&lt;/code&gt; をセットしなくても有効になる）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit&#34;&gt;Go 1.5 Vendor Experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vendoring 機能が有効な状態では &lt;code&gt;vendor&lt;/code&gt; フォルダが特別な意味を持つ。
たとえば &lt;code&gt;mypackage&lt;/code&gt; パッケージに対して &lt;code&gt;mypackage/vendor/vpackage&lt;/code&gt; と配置した場合， &lt;code&gt;import &amp;quot;vpackage&amp;quot;&lt;/code&gt; と記述すれば &lt;code&gt;mypackage/vendor&lt;/code&gt; フォルダ以下の &lt;code&gt;vpackage&lt;/code&gt; も探してくれる。&lt;/p&gt;

&lt;p&gt;では，&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34; title=&#34;プロジェクト・ベースの開発環境をつくる&#34;&gt;前回&lt;/a&gt;作ったコードを流用して確かめてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;SET GOPATH=C:\workspace\vdemo

C:\workspace\vdemo&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
            julian-day.go

C:\workspace\vdemo&amp;gt;go build ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)

C:\workspace\vdemo&amp;gt;mkdir src\julian-day\vendor

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor


C:\workspace\vdemo&amp;gt;go build ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\workspace\vdemo\src\julian-day\vendor\github.com\spiegel-im-spiegel\astrocalc\modjulian (vendor tree)
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダを追加したことで Go コンパイラの挙動が変わったことがお分かりだろうか。
目的のパッケージを vendor tree → &lt;code&gt;GOROOT&lt;/code&gt; → &lt;code&gt;GOPATH&lt;/code&gt; の順で捜索している。&lt;/p&gt;

&lt;p&gt;では &lt;code&gt;vendor&lt;/code&gt; フォルダに外部パッケージを導入してビルドしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;pushd src\julian-day\vendor

C:\workspace\vdemo\src\julian-day\vendor&amp;gt;git clone https://github.com/spiegel-im-spiegel/astrocalc.git github.com/spiegel-im-spiegel/astrocalc
Cloning into &#39;github.com/spiegel-im-spiegel/astrocalc&#39;...
remote: Counting objects: 43, done.
remote: Total 43 (delta 0), reused 0 (delta 0), pack-reused 43
Unpacking objects: 100% (43/43), done.
Checking connectivity... done.

C:\workspace\vdemo\src\julian-day\vendor&amp;gt;popd

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go

C:\workspace\vdemo&amp;gt;go install -v ./...
julian-day/vendor/github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
├─bin
│      julian-day.exe
│
├─pkg
│  └─windows_amd64
│      └─julian-day
│          └─vendor
│              └─github.com
│                  └─spiegel-im-spiegel
│                      └─astrocalc
│                              modjulian.a
│
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go

C:\workspace\vdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダ以下にパッケージがフルパスで入ってしまうため階層が深くなりがちなのが「玉に瑕」だが，それ以外は特に問題はない。
あるいは &lt;code&gt;vendor&lt;/code&gt; フォルダ以下のパッケージは &lt;code&gt;go get&lt;/code&gt; の制約から外れているので，呼び出し側を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;astrocalc/modjulian&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として以下のフォルダ構成にする手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo&amp;gt;tree /f .
C:\WORKSPACE\VDEMO
└─src
    └─julian-day
        │  julian-day.go
        │
        └─vendor
            └─astrocalc
                │  .editorconfig
                │  .gitignore
                │  .travis.yml
                │  LICENSE
                │  README.md
                │
                └─modjulian
                        example_test.go
                        LICENSE
                        modjulian.go
                        modjulian_test.go


C:\workspace\vdemo&amp;gt;go install -v ./...
julian-day/vendor/astrocalc/modjulian
julian-day

C:\workspace\vdemo&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意が必要なのは， &lt;code&gt;go get&lt;/code&gt; は git の submodule を上手く扱えないため， &lt;code&gt;vendor&lt;/code&gt; フォルダ以下のパッケージを submodule として配置している場合はビルドに失敗することだ。
この場合は &lt;code&gt;-d&lt;/code&gt; オプションで &lt;code&gt;go get&lt;/code&gt; がビルドまで行わないようにし，手動で submodule の &lt;code&gt;init&lt;/code&gt; と &lt;code&gt;update&lt;/code&gt; を行う必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go get -d project/...
C:&amp;gt;git submodule init
C:&amp;gt;git submodule update
C:&amp;gt;go install ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ブックマーク:46532c9bb82a65b77db26390e54aa6a3&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doloopwhile.hatenablog.com/entry/2014/06/18/010449&#34;&gt;direnvで解決するGOPATHの3つの問題点 - None is None is None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hde.co.jp/entry/2015/02/27/182117&#34;&gt;改めて、direnvを使いましょう！ - HDE BLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/aminamid/items/5a0e9461385c80d0c8a6&#34;&gt;さくら - homeにgolang, direnv とvirtualenvを入れて動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;それでも git などのコード管理ツールへの依存はどうしても残るのだけれど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;具体的には &lt;code&gt;GOPATH&lt;/code&gt; で列挙されるパスのリストのうち先頭のパスにインストールされる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の開発・管理主体は Google だが，こんな構成で Google は困らないのかと思ったのだが，実は Google は全てのコードを単一の repository で管理しているらしい。（参考： &lt;a href=&#34;http://www.publickey1.jp/blog/15/2045000google.html&#34;&gt;20億行のコードを保存し、毎日4万5000回のコミットを発行しているGoogleが、単一のリポジトリで全社のソースコードを管理している理由&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;a href=&#34;http://direnv.net/&#34; title=&#34;direnv - unclutter your .profile&#34;&gt;direnv&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で組まれている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;パッケージのパスが変わるとテストが通らなくなる場合があるので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46532c9bb82a65b77db26390e54aa6a3:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
