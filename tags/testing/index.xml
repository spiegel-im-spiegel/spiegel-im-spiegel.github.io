<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/testing/index.xml" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/testing/index.xml/index.xml" />
	<id>tag:text.Baldanders.info,0001-01-01:/</id>
	<updated>0001-01-01T00:00:00+00:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.17</generator>

	
	<entry>
		<title>Go 言語のテスト・フレームワーク - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/testing/" />
		<id>tag:text.Baldanders.info,2015-09-19:/golang/testing/</id>
		<published>2015-09-19T23:40:43+09:00</published>
		<updated>2016-10-29T23:44:09+09:00</updated>
		<summary>パッケージ化したのならテストをしましょう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/64224f22ef17d916dc2d&#34;&gt;はじめての Go 言語 (on Windows) その7 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34; title=&#34;機能のパッケージ化&#34;&gt;前回&lt;/a&gt;の続き。&lt;/p&gt;

&lt;h2 id=&#34;テストコードを書く&#34;&gt;テストコードを書く&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では最初からテスト・フレームワークが同梱されています。
いまどきの言語はみんなそうですよね。
テストコードを書くには対象のソースファイルと同じフォルダに &lt;code&gt;*_test.go&lt;/code&gt; という名前のファイルを用意します。
まぁ，説明するより書いた方が早いですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package modjulian

import (
	&amp;quot;os&amp;quot;
	&amp;quot;testing&amp;quot;
	&amp;quot;time&amp;quot;
)

type mjdnTest struct { //test case for DayNumber
	in time.Time //input data
	out int64 //expected result
}

var mjdnTests []mjdnTest  //test cases for DayNumber

func TestMain(m *testing.M) {
	//initialization
 	mjdnTests = []mjdnTest {  //test cases for DayNumber
		{time.Date(1969, 12, 31, 0, 0, 0, 0, time.UTC), int64(40586)},
		{time.Date(1970,  1,  1, 0, 0, 0, 0, time.UTC), int64(40587)},
		{time.Date(2015,  1,  1, 0, 0, 0, 0, time.UTC), int64(57023)},
	}

	//start test
    code := m.Run()

	//termination
    os.Exit(code)
}

func TestModifiedJulianDayNumber(t *testing.T) {
	for _, testCase := range mjdnTests {
		result := DayNumber(testCase.in)
		if result != testCase.out {
			t.Errorf(&amp;quot;DayNumber of \&amp;quot;%v\&amp;quot; = %d, want %d.&amp;quot;, testCase.in, result, testCase.out)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;package&lt;/code&gt; にはテスト対象のパッケージを指定します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt; には &lt;a href=&#34;http://golang.org/pkg/testing/&#34;&gt;&lt;code&gt;testing&lt;/code&gt;&lt;/a&gt; パッケージを含めます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Test...&lt;/code&gt; で始まる関数名がテスト実行用の関数です。引数には &lt;code&gt;t *testing.T&lt;/code&gt; を指定します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TestMain()&lt;/code&gt; は特別な関数です。テストの最初に呼び出され， &lt;code&gt;Run()&lt;/code&gt; で他のテスト関数群をキックします。引数には &lt;code&gt;m *testing.M&lt;/code&gt; を指定します。 &lt;code&gt;TestMain()&lt;/code&gt; 内で初期化や条件を変えたテストの繰り返しや後始末処理などを行うことができます。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/testing/&#34;&gt;&lt;code&gt;testing&lt;/code&gt;&lt;/a&gt; パッケージには，他の言語のテスト・フレームワークによくある &lt;a href=&#34;http://golang.jp/go_faq#assertions&#34;&gt;assertion 関数がありません&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。 &lt;a href=&#34;http://golang.jp/go_faq#testing_framework&#34;&gt;FAQ&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; によると&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一般的なテストフレームワークにおいて条件・制御・出力機構を持つ専用のミニ言語が用意される傾向がありますが、Go言語にはすでにこれらが備わっています。これらを再び作成するより、我々はGo言語のテストを進めたかったのです。このようにしたことで余計な言語を覚える必要がなくなり、テストを直接的かつ理解しやすくしています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあります。
テスト駆動型開発の場合，テストコードはそれ自体が設計書として機能しますので，この割り切りは妥当と言えます&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
その代わりテストコードを（ドキュメントとして）きちんと書くのは骨が折れますが（笑）&lt;/p&gt;

&lt;p&gt;テストコードが書けたので早速動かしてみましょう。
環境は&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34; title=&#34;機能のパッケージ化&#34;&gt;前回&lt;/a&gt;の最後の状態をそのまま引き継ぎます。&lt;/p&gt;

&lt;p&gt;テストを行うには &lt;code&gt;go test&lt;/code&gt; コマンドを使います。
以下の例ではパッケージを指定していますが， &lt;code&gt;./...&lt;/code&gt; と指定すれば全てのパッケージのテストが対象になります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\jd&amp;gt;go test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- PASS: TestDayNumber (0.00s)
PASS
ok      github.com/spiegel-im-spiegel/astrocalc/modjulian       0.229s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは成功例。じゃあ，&lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc/blob/master/modjulian/modjulian.go&#34;&gt;元のコード&lt;/a&gt;を少しいじってわざと失敗させてみましょうか（なんだかなぁ）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\jd&amp;gt;go test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- FAIL: TestDayNumber (0.00s)
        modjulian_test.go:35: DayNumber of &amp;quot;1969-12-31 00:00:00 +0000 UTC&amp;quot; = 40587, want 40586.
FAIL
exit status 1
FAIL    github.com/spiegel-im-spiegel/astrocalc/modjulian       1.566s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーレポートを吐く &lt;code&gt;Errorf()&lt;/code&gt; は内部で &lt;code&gt;Fail()&lt;/code&gt; を呼び出し，テスト自体は続行します。
一方 &lt;code&gt;Errorf()&lt;/code&gt; の代わりに &lt;code&gt;Fatalf()&lt;/code&gt; を使うと，内部で &lt;code&gt;FailNow()&lt;/code&gt; を呼び出しテストを中断します。&lt;/p&gt;

&lt;p&gt;Go 言語のテスト・フレームワークでは benchmark や coverage もサポートしてますが，今回は割愛します。&lt;/p&gt;

&lt;h2 id=&#34;テストの自動化-continuous-integration&#34;&gt;テストの自動化（Continuous Integration）&lt;/h2&gt;

&lt;p&gt;今回のコードは自動化するほどの規模でもないですが，話のついでに &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; で自動化しちゃいましょう。
えっと，今回は &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; の説明は割愛します。
興味のある方は「&lt;a href=&#34;#bookmark&#34;&gt;ブックマーク&lt;/a&gt;」の項を参考にして下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; でビルド・テストを行うためには &lt;code&gt;.travis.yml&lt;/code&gt; を書く必要がありますが，テストを行うだけなら &lt;code&gt;.travis.yml&lt;/code&gt; の記述は簡単です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: go

go:
  - 1.4
  - 1.5

script:
 - go test -v ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果は&lt;a href=&#34;https://travis-ci.org/spiegel-im-spiegel/astrocalc&#34;&gt;ここ&lt;/a&gt;を参照して下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/document/&#34; title=&#34;Go 言語のドキュメント・フレームワーク&#34;&gt;次回&lt;/a&gt;はドキュメントの話。&lt;/p&gt;

&lt;h2 id=&#34;bookmark&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/8717a5982547cfa54ebc&#34;&gt;Go の Test に対する考え方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://straitwalk.hatenablog.com/entry/2014/09/18/232810&#34;&gt;Goでテストを書く - 成らぬは人の為さぬなりけり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/umisama/items/0d589cca7e89b89c29a8&#34;&gt;golang 1.4で追加されたtestingの便利機能(テストの初期化とお片づけ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dmnlk/items/3fb4e0abb98e39fee275&#34;&gt;Go + Travis CI + Coveralls でCI環境を作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sue445.hatenablog.com/entry/2013/06/01/170607&#34;&gt;GithubにあるリポジトリをTravis CI連携する手順 #junitbook - くりにっき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/10/16/golang-in-ci-as-a-service/&#34;&gt;CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uchimanajet7.hatenablog.com/entry/2015/03/20/211352&#34;&gt;golangでTravis CIを使ってクロスコンパイルするときにハマったところ #golang #travisci - uchimanajet7のメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/atotto/items/b796c31c1755dbec13db&#34;&gt;Go言語のビルド生活を drone.ioで幸せに暮らす #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.eure.jp/tech/go1_7-subtests/&#34;&gt;Golang におけるサブテストの並行処理実装について | eureka tech blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;オリジナルは &lt;a href=&#34;http://golang-jp.org/doc/faq#assertions&#34;&gt;http://golang-jp.org/doc/faq#assertions&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;オリジナルは &lt;a href=&#34;http://golang-jp.org/doc/faq#testing_framework&#34;&gt;http://golang-jp.org/doc/faq#testing_framework&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;私は組み込みエンジニアなので，プログラミングで assert を多用するのは，エンジニアの怠慢だと思ってしまいます。まぁ，ベクタ・テーブルからゴリゴリ書くってのなら別ですが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
