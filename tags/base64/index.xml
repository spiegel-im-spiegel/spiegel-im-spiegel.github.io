<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of base64 - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/base64/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/base64/index.xml" />
	<id>tag:text.Baldanders.info,2020-10-14:/tags</id>
	<updated>2020-10-14T15:13:41+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>GNKF: NKF ぽいなにか の v0.2.0 をリリースした</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/10/gnkf-v0_2_0-is-released/" />
		<id>tag:text.Baldanders.info,2020-10-14:/release/2020/10/gnkf-v0_2_0-is-released/</id>
		<published>2020-10-14T06:13:41+00:00</published>
		<updated>2021-05-22T01:54:53+00:00</updated>
		<summary>このバージョンで BASE64 符号化の機能を追加した。これで base64 や openssl コマンドがない環境でも大丈夫。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;文字列処理の習作 &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34; title=&#34;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; の v0.2.0 をリリースした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf/releases/tag/v0.2.0&#34;&gt;Release v0.2.0 · spiegel-im-spiegel/gnkf · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このバージョンで BASE64 符号化の機能を追加した。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf base64 -h
Encode/Decode BASE64.

Usage:
  gnkf base64 [flags]

Aliases:
  base64, b64

Flags:
  -d, --decode          decode BASE64 string
  -f, --file string     path of input text file
  -u, --for-url         encoding/decoding defined in RFC 4648
  -h, --help            help for base64
  -p, --no-padding      no padding
  -o, --output string   path of output file

Global Flags:
      --debug   for debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;オリジナルの nkf はコマンドとオプションがごちゃごちゃしてて分かりにくいので &lt;code&gt;base64&lt;/code&gt; や &lt;code&gt;openssl base64&lt;/code&gt; のコマンドの形式に合わせることにした。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo Hello World | gnkf base64
SGVsbG8gV29ybGQK

$ echo SGVsbG8gV29ybGQK | gnkf base64 -d
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;base64&lt;/code&gt; や &lt;code&gt;openssl&lt;/code&gt; コマンドがない環境でも大丈夫（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/gnkf/&#34;&gt;GNKF: Network Kanji Filter by Golang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B094PRR7PZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/416Stewy0NS._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B094PRR7PZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20 (Release 2021-05-21)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B094PRR7PZ (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2016/07/go-programming-language/&#34; &gt;こちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-05-22&#34;&gt;2021-05-22&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>GNKF: Network Kanji Filter by Golang</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/gnkf/" />
		<id>tag:text.Baldanders.info,2020-07-30:/release/gnkf/</id>
		<published>2020-07-30T13:41:38+00:00</published>
		<updated>2021-05-22T01:54:53+00:00</updated>
		<summary>昔からある nkf コマンドの劣化コピー版と思っていただければ概ね間違いない（笑）</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34;&gt;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34; title=&#34;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; は，コマンドラインで動作する，特に日本語テキストを操作するためのフィルタプログラムである。
昔からある nkf コマンドの劣化コピー版と思っていただければ概ね間違いない（笑）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf/actions&#34;&gt;&lt;img src=&#34;https://github.com/spiegel-im-spiegel/gnkf/workflows/vulns/badge.svg&#34; alt=&#34;check vulns&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf/actions&#34;&gt;&lt;img src=&#34;https://github.com/spiegel-im-spiegel/gnkf/workflows/lint/badge.svg&#34; alt=&#34;lint status&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://raw.githubusercontent.com/spiegel-im-spiegel/gnkf/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-blue.svg&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/spiegel-im-spiegel/gnkf.svg&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34; title=&#34;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; には以下の機能を組み込んでいる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;guess&lt;/code&gt;: &lt;a href=&#34;#guess&#34;&gt;文字エンコーディングの推測&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enc&lt;/code&gt;: &lt;a href=&#34;#enc&#34;&gt;文字エンコーディング変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newline&lt;/code&gt;: &lt;a href=&#34;#newline&#34;&gt;改行コードの一括変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;norm&lt;/code&gt;: &lt;a href=&#34;#norm&#34;&gt;Unicode 正規化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;: &lt;a href=&#34;#width&#34;&gt;全角・半角変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kana&lt;/code&gt;: &lt;a href=&#34;#kana&#34;&gt;かなカナ変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base64&lt;/code&gt;; &lt;a href=&#34;#base64&#34;&gt;BASE64 符号化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove-bom&lt;/code&gt; : &lt;a href=&#34;#remove-bom&#34;&gt;BOM の除去&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dump&lt;/code&gt;: &lt;a href=&#34;#dump&#34;&gt;16進ダンプ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以降からもう少し詳しく紹介する。&lt;/p&gt;
&lt;h2 id=&#34;guess&#34;&gt;文字エンコーディングの推測&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf guess -h
Guess character encoding of the text

Usage:
  gnkf guess [flags]

Aliases:
  guess, g

Flags:
      --all           print all guesses
  -f, --file string   path of input text file
  -h, --help          help for guess

Global Flags:
      --debug   for debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;たとえば以下のように使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo こんにちは，世界 | gnkf g
UTF-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;元祖 nkf コマンドは改行コードの推測も行うが， &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gnkf&#34; title=&#34;spiegel-im-spiegel/gnkf: Network Kanji Filter by Golang&#34;&gt;gnkf&lt;/a&gt; では文字エンコーディングの推測のみ行う。
テキスト全文を一旦メモリ内に読み込むので，巨大ファイルを扱う場合はご注意を。&lt;/p&gt;
&lt;p&gt;文字エンコーディングの推測には &lt;a href=&#34;https://github.com/saintfish/chardet&#34; title=&#34;saintfish/chardet: Charset detector library for golang derived from ICU&#34;&gt;saintfish/chardet&lt;/a&gt; パッケージを使っているが，正直に言ってあまり精度がよくない（ただの plain text なら &lt;a href=&#34;https://pkg.go.dev/golang.org/x/net/html/charset&#34; title=&#34;charset package · pkg.go.dev&#34;&gt;golang.org/x/net/html/charset&lt;/a&gt; よりはイケてる感じだが）。&lt;/p&gt;
&lt;p&gt;そこで &lt;code&gt;--all&lt;/code&gt; オプションを使って複数の候補を表示できるようにしている。
こんな感じで蓋然性が高い順に表示している。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo こんにちは，世界 | gnkf g --all
UTF-8
windows-1255
windows-1253
Big5
GB-18030
Shift_JIS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;enc&#34;&gt;文字エンコーディング変換&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf enc -h
Convert character encoding of the text.
 Using MIME and IANA name as the character encoding name.
 Refer: http://www.iana.org/assignments/character-sets/character-sets.xhtml

Usage:
  gnkf enc [flags]

Aliases:
  enc, encoding, e

Flags:
  -d, --dst-encoding string   character encoding name of output text (default &amp;#34;utf-8&amp;#34;)
  -f, --file string           path of input text file
  -g, --guess                 guess character encoding of source text
  -h, --help                  help for enc
  -o, --output string         path of output file
  -b, --remove-bom            remove BOM character in source text (UTF-8 only)
  -s, --src-encoding string   character encoding name of source text (default &amp;#34;utf-8&amp;#34;)

Global Flags:
      --debug   for debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-s&lt;/code&gt; および &lt;code&gt;-d&lt;/code&gt; オプションで文字エンコーディング名を指定する際は &lt;a href=&#34;https://www.iana.org/assignments/character-sets/character-sets.xhtml&#34; title=&#34;Character Sets&#34;&gt;IANA の登録名称&lt;/a&gt;を使う（大文字・小文字は区別しない）。
たとえば，こんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo こんにちは，世界 | gnkf e -d shift_jis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし &lt;a href=&#34;https://pkg.go.dev/mod/golang.org/x/text&#34; title=&#34;golang.org/x/text module · pkg.go.dev&#34;&gt;golang.org/x/text&lt;/a&gt; 以下のサブパッケージで変換器が用意されていない文字エンコーディングについては変換できないのであしからず。&lt;/p&gt;
&lt;p&gt;日本語であれば &lt;a href=&#34;https://pkg.go.dev/golang.org/x/text@v0.3.3/encoding/japanese&#34; title=&#34;japanese package · pkg.go.dev&#34;&gt;&lt;code&gt;japanese&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.EUCJP&lt;/code&gt;, &lt;a href=&#34;https://pkg.go.dev/golang.org/x/text@v0.3.3/encoding/japanese&#34; title=&#34;japanese package · pkg.go.dev&#34;&gt;&lt;code&gt;japanese&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.ISO2022JP&lt;/code&gt;, &lt;a href=&#34;https://pkg.go.dev/golang.org/x/text@v0.3.3/encoding/japanese&#34; title=&#34;japanese package · pkg.go.dev&#34;&gt;&lt;code&gt;japanese&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.ShiftJIS&lt;/code&gt; 等が用意されているので，それぞれ &lt;code&gt;&amp;quot;euc-jp&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;iso-2022-jp&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;shift_jis&amp;quot;&lt;/code&gt; と指定すれば，いい感じに変換してくれる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-g&lt;/code&gt; オプションを付けると &lt;code&gt;gnkf guess&lt;/code&gt; コマンドと同じロジックで変換元テキストの文字エンコーディングを推測する。
が，前節で述べたように，よく間違うので過信は禁物である。&lt;/p&gt;
&lt;h2 id=&#34;newline&#34;&gt;改行コードの一括変換&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf newline -h
Convert newline form in the text.

Usage:
  gnkf newline [flags]

Aliases:
  newline, nwln, nl

Flags:
  -f, --file string           path of input text file
  -h, --help                  help for newline
  -n, --newline-form string   newline form: [lf|cr|crlf] (default &amp;#34;lf&amp;#34;)
  -o, --output string         path of output file

Global Flags:
      --debug   for debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな感じで使う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo こんにちは，世界 | gnkf nl -n crlf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;テキスト全文を一旦メモリ内に読み込んで一括変換するため，巨大ファイルを扱う場合はご注意を。
一応，複数の改行コードが混在している場合でも上手く処理してくれる（筈）&lt;/p&gt;
&lt;h2 id=&#34;norm&#34;&gt;Unicode 正規化&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf norm -h
Unicode normalization of the text (UTF-8 encoding only).

Usage:
  gnkf norm [flags]

Aliases:
  norm, normalize, nrm, nm

Flags:
  -f, --file string        path of input text file
  -h, --help               help for norm
  -k, --kangxi-radicals    normalize kangxi radicals only (with nfkc or nfkd form)
  -n, --norm-form string   Unicode normalization form: [nfc|nfd|nfkc|nfkd] (default &amp;#34;nfc&amp;#34;)
  -o, --output string      path of output file
  -b, --remove-bom         remove BOM character

Global Flags:
      --debug   for debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな感じで使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo ﾍﾟﾝｷﾞﾝ | gnkf nm -n nfkc
ペンギン
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/unicode-normalization/&#34; title=&#34;Go 言語と Unicode 正規化&#34;&gt;Unicode 正規化は色々と副作用&lt;/a&gt;があるのでご注意を。
全角・半角変換については&lt;a href=&#34;#width&#34;&gt;後述&lt;/a&gt;の &lt;code&gt;gnkf width&lt;/code&gt; コマンドを使うのがオススメである。&lt;/p&gt;
&lt;h3&gt;康熙部首の正規化&lt;/h3&gt;
&lt;p&gt;NFKC または NFKD 正規化を行う際に &lt;code&gt;-k&lt;/code&gt; オプションを付けることで康熙部首の正規化のみを行うようにした。&lt;/p&gt;
&lt;p&gt;たとえば「㈱埼⽟」の「⽟（U+2f5f）」のみを正規化したい場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo ㈱埼⽟ | gnkf nm -n nfkc -k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとすればよい。&lt;/p&gt;
&lt;h2 id=&#34;width&#34;&gt;全角・半角変換&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf width -h
Convert character width in the text (UTF-8 encoding only).

Usage:
  gnkf width [flags]

Aliases:
  width, wdth, w

Flags:
  -c, --conversion-form string   conversion form: [fold|narrow|widen] (default &amp;#34;fold&amp;#34;)
  -f, --file string              path of input text file
  -h, --help                     help for width
  -o, --output string            path of output file
  -b, --remove-bom               remove BOM character

Global Flags:
      --debug   for debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな感じで使う。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo ペンギン | gnkf w -c narrow
ﾍﾟﾝｷﾞﾝ
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;&amp;quot;fold&amp;quot;&lt;/code&gt; フォームを使うと，英数字は半角にカナは全角に，といい感じに変換してくれる。&lt;/p&gt;
&lt;p&gt;変換には &lt;a href=&#34;https://pkg.go.dev/golang.org/x/text/width&#34; title=&#34;width package · pkg.go.dev&#34;&gt;golang.org/x/text/width&lt;/a&gt; パッケージを使っているが，濁点・半濁点を含む文字や全角と半角で一対一に対応していない文字は上手く扱えないため，例外部分については内部で強制的に置換している。&lt;/p&gt;
&lt;p&gt;また，このためにテキスト全文を一旦メモリ内に読み込んでいる。
巨大ファイルを扱う場合はご注意を。&lt;/p&gt;
&lt;h2 id=&#34;kana&#34;&gt;かなカナ変換&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf kana -h
Convert kana characters in the text.
 UTF-8 encoding only.
 &amp;#34;hiragana&amp;#34; and &amp;#34;katakana&amp;#34; forms are valid only for full-width kana character.

Usage:
  gnkf kana [flags]

Aliases:
  kana, k

Flags:
  -c, --conversion-form string   conversion form: [hiragana|katakana|chokuon] (default &amp;#34;katakana&amp;#34;)
  -f, --file string              path of input text file
      --fold                     convert character width by fold form
  -h, --help                     help for kana
  -o, --output string            path of output file
  -b, --remove-bom               remove BOM character

Global Flags:
      --debug   for debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな感じで使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo こんにちは | gnkf k -c katakana
コンニチハ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;かなカナ変換は全角文字のみが対象だが &lt;code&gt;--fold&lt;/code&gt; オプションを付けることで全角・半角変換（&lt;code&gt;&amp;quot;fold&amp;quot;&lt;/code&gt; フォーム）も同時に行うことができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo 123 ｺﾝﾆﾁﾊ | gnkf k -c hiragana --fold
123 こんにちは
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;テキスト全文を一旦メモリ内に読み込むので，巨大ファイルを扱う場合はご注意を。&lt;/p&gt;
&lt;h3&gt;直音への変換&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;chokuon&amp;quot;&lt;/code&gt; フォームを指定して&lt;ruby&gt;&lt;rb&gt;拗音&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;ようおん&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;（小さい &lt;code&gt;&#39;ゃ&#39;&lt;/code&gt;, &lt;code&gt;&#39;ゅ&#39;&lt;/code&gt;, &lt;code&gt;&#39;ょ&#39;&lt;/code&gt; など）や促音（小さい &lt;code&gt;&#39;っ&#39;&lt;/code&gt;）を直音（&lt;code&gt;&#39;や&#39;&lt;/code&gt;, &lt;code&gt;&#39;ゆ&#39;&lt;/code&gt;, &lt;code&gt;&#39;よ&#39;&lt;/code&gt;, &lt;code&gt;&#39;つ&#39;&lt;/code&gt;）に変換する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo ニッポン | gnkf k -c chokuon
ニツポン
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;半角カナも変換可能。&lt;/p&gt;
&lt;h2 id=&#34;base64&#34;&gt;BASE64 符号化&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf base64 -h
Encode/Decode BASE64.

Usage:
  gnkf base64 [flags]

Aliases:
  base64, b64

Flags:
  -d, --decode          decode BASE64 string
  -f, --file string     path of input text file
  -u, --for-url         encoding/decoding defined in RFC 4648
  -h, --help            help for base64
  -p, --no-padding      no padding
  -o, --output string   path of output file

Global Flags:
      --debug   for debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;BASE64 符号化および復号機能。
Linux 系の &lt;code&gt;base64&lt;/code&gt; コマンドや &lt;code&gt;openssl base64&lt;/code&gt; コマンドの代わりに使える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo Hello World | gnkf b64
SGVsbG8gV29ybGQK

$ echo SGVsbG8gV29ybGQK | gnkf b64 -d
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;base64&lt;/code&gt; や &lt;code&gt;openssl&lt;/code&gt; コマンドがない環境でも大丈夫。&lt;/p&gt;
&lt;h2 id=&#34;remove-bom&#34;&gt;BOM の除去&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf remove-bom -h
Remove BOM character in UTF-8 string.

Usage:
  gnkf remove-bom [flags]

Aliases:
  remove-bom, rbom, rb

Flags:
  -f, --file string     path of input text file
  -h, --help            help for remove-bom
  -o, --output string   path of output file

Global Flags:
      --debug   for debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;UTF-8 テキストに BOM (Byte Order Mark; U+FEFF) が含まれている場合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo ﻿Hello | gnkf dump
0xef, 0xbb, 0xbf, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x0a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これを除去する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo ﻿Hello | gnkf remove-bom | gnkf dump
0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x0a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先頭だけでなく，文字列中の全ての BOM を除去する。
テキスト全文を一旦メモリ内に読み込むので，巨大ファイルを扱う場合はご注意を。&lt;/p&gt;
&lt;h2 id=&#34;dump&#34;&gt;16進ダンプ&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gnkf dump -h
Hexadecimal view of octet data stream with C language array style.

Usage:
  gnkf dump [flags]

Aliases:
  dump, hexdump, d, hd

Flags:
  -f, --file string   path of input text file
  -h, --help          help for dump
  -u, --unicode       print by Unicode code point (UTF-8 only)

Global Flags:
      --debug   for debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;デバッグ用に用意した機能（笑） 以下のようにオクテット単位でダンプ表示する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo ㈱埼⽟ | gnkf d
0xe3, 0x88, 0xb1, 0xe5, 0x9f, 0xbc, 0xe2, 0xbd, 0x9f, 0x0a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更に &lt;code&gt;-u&lt;/code&gt; オプションを付けると Unicode 符号点に変換して表示してくれる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo ㈱埼⽟ | gnkf d -u
0x3231, 0x57fc, 0x2f5f, 0x000a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これを使って，たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo ㈱埼⽟ | gnkf nm -n nfkc -k | gnkf d -u
0x3231, 0x57fc, 0x7389, 0x000a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じにパイプで繋いで動作確認できる。
我ながらありがたい機能だ（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/transform-character-encoding/&#34;&gt;文字エンコーディング変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/unicode-normalization/&#34;&gt;Go 言語と Unicode 正規化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/detecting-character-encoding/&#34;&gt;文字エンコーディングの検出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/character-width-for-unicode/&#34;&gt;Go 言語による Unicode 半角/全角変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/kana-conversion/&#34;&gt;かなカナ変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/unicode-kangxi-radical/&#34;&gt;こんな埼「玉」修正してやるぅ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B094PRR7PZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/416Stewy0NS._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/B094PRR7PZ?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20 (Release 2021-05-21)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B094PRR7PZ (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2016/07/go-programming-language/&#34; &gt;こちら&lt;/a&gt;。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2021-05-22&#34;&gt;2021-05-22&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry>
</feed>
