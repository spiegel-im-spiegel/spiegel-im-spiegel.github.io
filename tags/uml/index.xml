<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of uml - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/uml/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/uml/index.xml" />
	<id>tag:text.Baldanders.info,2018-12-29:/tags</id>
	<updated>2018-12-29T18:11:06+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>真面目に PlantUML (3) : クラス図</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/" />
		<id>tag:text.Baldanders.info,2018-12-29:/remark/2018/12/plantuml-3-class-diagrams/</id>
		<published>2018-12-29T09:11:06+00:00</published>
		<updated>2019-01-07T04:28:43+00:00</updated>
		<summary>今回はクラス図について。 オブジェクト図やパッケージ図までだどりつけなかった orz</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;今回はクラス図（class diagram）について。
クラス図はシステムの構成要素であるクラスを定義しクラス同士の関係を表現したものである。&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;PlantUML のインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/&#34;&gt;シーケンス図&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34;&gt;クラス図&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;クラスの定義&lt;/h2&gt;

&lt;p&gt;まずはクラスの定義から。&lt;/p&gt;

&lt;p&gt;クラスはひとつの「名前」，0個以上の「属性」，0個以上の「操作」で構成され，以下のように表す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle

class &amp;#34;Class Name&amp;#34; as Class {
  {field} Attributes
  {method} Operations
}

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./declare-class.puml&#34;&gt;&lt;img src=&#34;./declare-class.png&#34; srcset=&#34;./declare-class.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;抽象クラスの場合は「名前」をイタリック（または斜体）で表す。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;abstract&lt;/code&gt; を付けることで抽象クラスとして扱われる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle

abstract class &amp;#34;Abstract Class&amp;#34; as Class1
abstract class &amp;#34;Interface Class&amp;#34; as Class2  &amp;lt;&amp;lt;interface&amp;gt;&amp;gt;

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./declare-abstract-class.puml&#34;&gt;&lt;img src=&#34;./declare-abstract-class.png&#34; srcset=&#34;./declare-abstract-class.png 784w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;interface&amp;gt;&amp;gt;&lt;/code&gt; はステレオタイプ（stereotype）と呼ばれているもので，ここではクラスの種別を表している。&lt;/p&gt;

&lt;p&gt;なお &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; ではアイコンを使ってクラス種別を表現できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

show circle

class ImplementClass
abstract class AbstractClass
interface InterfaceClass
enum Enum {
  ONE
  TWO
  THREE
}
annotation Annotation
class CustomClass &amp;lt;&amp;lt; (S,orchid) custom &amp;gt;&amp;gt;

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./classes.puml&#34;&gt;&lt;img src=&#34;./classes.png&#34; srcset=&#34;./classes.png 1429w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;最後の CustomClass ではアイコンをカスタムで指定している。&lt;/p&gt;

&lt;!--
## 名前とパッケージ

UML ではクラスの「名前」を

```text
パッケージ名:クラス名
```

で表記する。
ただしパッケージ名は省略可能。

[PlantUML] では “`.`” をデリミタとしてパッケージとクラス名を分離することもできる。

```puml
@startuml

hide circle

Package2.Class1 -|&gt; Package1.BaseClass
Package2.Class1 *-- Package2.Class2

Package1.BaseClass &lt;|-- Package3.Class1
Package3.Class1 *- Package3.Class2

@enduml
```

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./package.puml&#34;&gt;&lt;img src=&#34;./package.png&#34; srcset=&#34;./package.png 1059w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
--&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;属性（attribute），操作（operation），可視性（Visibility）&lt;/h3&gt;

&lt;p&gt;UML ではクラス内の「属性」を以下のように表記する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;可視性 名前:型 [=初期値] {制約条件}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「操作」も同じように&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;可視性 名前([引数の名前:引数の型[, ...]]) : 戻り値の型&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と表記する。&lt;/p&gt;

&lt;p&gt;「可視性」は属性・操作にアクセスできるスコープを示し，以下の記号で表す。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;可視性&lt;/th&gt;
&lt;th&gt;スコープ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Private&lt;/strong&gt; 自クラスでのみアクセス可能&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Public&lt;/strong&gt; 全てのパッケージ・クラスでアクセス可能&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Protected&lt;/strong&gt; 自クラスとその派生クラスでアクセス可能&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Package Protected&lt;/strong&gt; 同じパッケージ内でアクセス可能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle
skinparam classAttributeIconSize 0

class ClassName {
  {field} + publicField : String = &amp;#34;string&amp;#34; {read only}
  {field} - privatefield : int
  {field} # protectedfield : double
  {field} ~ protectedfieldInPackage : Object

  {method} + publicMethod(s : String, v : int) : void
  {method} - privateMethod() : int
  {method} # protectedMethod() : double
  {method} ~ protectedMethodInPackage() : Object
}

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./members1.puml&#34;&gt;&lt;img src=&#34;./members1.png&#34; srcset=&#34;./members1.png 787w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;さらに &lt;code&gt;classAttributeIconSize&lt;/code&gt; を指定して可視性の部分をアイコン化することもできる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

show circle
&lt;span class=&#34;hl&#34;&gt;skinparam classAttributeIconSize 10
&lt;/span&gt;
class ClassName {
  {field} + publicField : String = &amp;#34;string&amp;#34; {read only}
  {field} - privatefield : int
  {field} # protectedfield : double
  {field} ~ protectedfieldInPackage : Object

  {method} + publicMethod(s : String, v : int) : void
  {method} - privateMethod() : int
  {method} # protectedMethod() : double
  {method} ~ protectedMethodInPackage() : Object
}

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./members2.puml&#34;&gt;&lt;img src=&#34;./members2.png&#34; srcset=&#34;./members2.png 806w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;クラス変数，クラス・メソッド&lt;/h3&gt;

&lt;p&gt;クラス変数やクラス・メソッドはアンダーラインで表す。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;static&lt;/code&gt; または &lt;code&gt;classifier&lt;/code&gt; を付けることでクラス変数やクラス・メソッドであることを示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle
skinparam classAttributeIconSize 0

class ClassName {
  {classifier} {field} + staticField : String = &amp;#34;string&amp;#34; {read only}
  {classifier} {method} + staticMethod() : void
}

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./members3.puml&#34;&gt;&lt;img src=&#34;./members3.png&#34; srcset=&#34;./members3.png 767w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;抽象メソッド&lt;/h3&gt;

&lt;p&gt;抽象メソッドはイタリック（または斜体）で表す。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;abstract&lt;/code&gt; を付けることで抽象メソッドであることを示す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle
skinparam classAttributeIconSize 0

class ClassName {
  {abstract} {method} + abstractMethod() : void
}

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./members4.puml&#34;&gt;&lt;img src=&#34;./members4.png&#34; srcset=&#34;./members4.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; はクラス・メンバについてかなりアドホックに記述できるため，とりあえずメモ書きを残しておいて，あとから厳密に決めていくのがいいかも知れない。&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;クラス間の関係&lt;/h2&gt;

&lt;p&gt;クラス間の関係はクラス同士を線で繋いで表すが，線（矢印）の種類によって関係の違いを表現できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle

Class01 &amp;lt;|-- Class02 : Generalization
Class03 &amp;lt;|.. Class04 : Realization
Class05 &amp;lt;.. Class06 : Dependency
Class07 -- Class08 : Association
Class09 o-- Class10 : Aggregation
Class11 *-- Class12 : Composition

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./relation.puml&#34;&gt;&lt;img src=&#34;./relation.png&#34; srcset=&#34;./relation.png 1982w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;それぞれの意味は以下の通り&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;種別&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Generalization&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;汎化&lt;/strong&gt; いわゆる is-a 関係がある&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Realization&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;実現&lt;/strong&gt; interface 型のような抽象クラスとの汎化関係がある&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Dependency&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;依存&lt;/strong&gt; 矢印の相手に対して依存関係がある&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Association&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;関連&lt;/strong&gt; クラス間で関連がある&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Aggregation&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;集約&lt;/strong&gt;  関連の一種で，全体-部分の関係がある&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Composition&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;コンポジション&lt;/strong&gt; 集約の一種だが片方のみでは成り立たないような強い関係を示す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;多重度（Multiplicity）&lt;/h3&gt;

&lt;p&gt;関連する2つのクラスについて多重度を設定する。
たとえば Class A と Class B の間に 1:多 の関係があるなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

hide circle
hide empty members

class &amp;#34;Class A&amp;#34; as A
class &amp;#34;Class B&amp;#34; as B

A &amp;#34;1&amp;#34; -- &amp;#34;*&amp;#34; B : Association

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./multi.puml&#34;&gt;&lt;img src=&#34;./multi.png&#34; srcset=&#34;./multi.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;などと記述する。
多重度表記とその意味は以下の通り。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;多重度&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1つのみ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0,1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ゼロまたは1つ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0..n&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ゼロ以上多数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1..n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1以上多数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;n&lt;/code&gt; と同じ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;クラス図を使った設計では多重度の決定が最優先&lt;/h3&gt;

&lt;p&gt;クラス図を使って設計を行う場合は多重度を最優先で考える。
すなわち&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;システムに必要なクラスを列挙する&lt;/li&gt;
&lt;li&gt;関連のあるクラスを線で繋ぐ&lt;/li&gt;
&lt;li&gt;繋がっているクラスについて多重度を決定する&lt;/li&gt;
&lt;li&gt;クラスの種別を決定する&lt;/li&gt;
&lt;li&gt;クラス・メンバを検討する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という順番で考えていくとよいだろう。&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/class-diagram&#34;&gt;Class Diagram syntax and features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://online.visual-paradigm.com/tutorials/class-diagram-tutorial/&#34;&gt;Class Diagram Tutorial&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/class.html&#34;&gt;クラス図(Class Diagram) - UML入門 - IT専科&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/plantuml-sample&#34;&gt;GitHub - spiegel-im-spiegel/plantuml-sample: Samples for PlantUML&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>真面目に PlantUML (2) : シーケンス図</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/" />
		<id>tag:text.Baldanders.info,2018-12-28:/remark/2018/12/plantuml-2-sequence-diagram/</id>
		<published>2018-12-28T09:18:03+00:00</published>
		<updated>2019-01-07T04:28:43+00:00</updated>
		<summary>さっそく今回はシーケンス図を PlantUML で書いてみようか。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34; title=&#34;真面目に PlantUML (1) : PlantUML のインストール&#34;&gt;前回&lt;/a&gt;でインストールまで終わったので，今回から各図の書き方について記しておく。
なお，今回から &lt;code&gt;skinparam&lt;/code&gt; 定義をまとめた &lt;a href=&#34;https://github.com/spiegel-im-spiegel/plantuml-sample/blob/master/skinparams.iuml&#34; title=&#34;plantuml-sample/skinparams.iuml at master · spiegel-im-spiegel/plantuml-sample&#34;&gt;&lt;code&gt;skinparams.iuml&lt;/code&gt;&lt;/a&gt; ファイルを用意し，このファイルを食わせることで見た目の調整を行うことにする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -Dfile.encoding=UTF-8 -jar plantuml.jar -nometadata -charset UTF-8 -config skinparams.iuml *.puml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さっそく今回はシーケンス図を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で書いてみようか。&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;PlantUML のインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/&#34;&gt;シーケンス図&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34;&gt;クラス図&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;オブジェクトとライフライン&lt;/h2&gt;

&lt;p&gt;UML のシーケンス図（sequence diagram）はオブジェクト同士のやり取り（相互作用）を時系列で表したものである。
オブジェクトの粒度は設計により様々で，人やシステムを表す場合もあればクラス単位の場合もある。
たとえば Alice と Bob が挨拶を交わす場合は&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello.puml&#34;&gt;&lt;img src=&#34;./hello.png&#34; srcset=&#34;./hello.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;と表す。
上の矩形がオブジェクトを表す。
そこから真下に伸びる点線は「ライフライン（lifeline）」と呼ばれているもので，上から下に時間が進行している。
横向きの矢印は「メッセージ（message）」と呼ばれていて，一方のオブジェクトからもう一方へ何らかのアクションを起こしたことを示している。&lt;/p&gt;

&lt;p&gt;上図の場合は，まず Alice から Bob へ “hello” を行い，その後に Bob から Alice へ “hello” を行ったことを表す。
ただし，この時点では2つの “hello” に関係があるかどうかは分からない。&lt;/p&gt;

&lt;p&gt;UML のシーケンス図ではオブジェクトは矩形で表されるが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; には以下の図形も用意されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:obj1&#34;&gt;&lt;a href=&#34;#fn:obj1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

actor Actor
participant Participant
boundary Boundary
control Control
entity Entity
database Database
collections Collections

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./objects.puml&#34;&gt;&lt;img src=&#34;./objects.png&#34; srcset=&#34;./objects.png 1950w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;メインフレーム&lt;/h2&gt;

&lt;p&gt;全体を囲むフレームを表示する場合には &lt;code&gt;mainframe&lt;/code&gt; で指定する。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;mainframe sd Hello World
&lt;/span&gt;
participant Alice
participant Bob

Alice-&amp;gt;&amp;gt;Bob : hello
Alice&amp;lt;&amp;lt;-Bob : hello

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./mainframe.puml&#34;&gt;&lt;img src=&#34;./mainframe.png&#34; srcset=&#34;./mainframe.png 684w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;メッセージ詳細&lt;/h2&gt;

&lt;p&gt;シーケンス図におけるメッセージのやりとりについて，いくつかパターンを書いてみる。&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;同期メッセージ（Synchronous Message）&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt; B : Synchronous Message
&lt;span class=&#34;hl&#34;&gt;activate B
&lt;/span&gt;
B -&amp;gt; B : Internal call

A &amp;lt;&amp;lt;-- B : Reply Message
&lt;span class=&#34;hl&#34;&gt;deactivate B
&lt;/span&gt;
@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./sync.puml&#34;&gt;&lt;img src=&#34;./sync.png&#34; srcset=&#34;./sync.png 857w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;矢印の種類に注意。&lt;/p&gt;

&lt;p&gt;「メッセージ」となっているが必ずしも通信を行っているわけではなく，相手オブジェクトのメソッドを呼び出す場合もこのような記述になる。&lt;/p&gt;

&lt;p&gt;Object B のライフラインにある縦長の矩形は「実行仕様（execution specification）」と呼ばれるもので，その期間中に何らかの処理を行っていることを示す。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;activate&lt;/code&gt;/&lt;code&gt;deactivate&lt;/code&gt; で指定可能（直前のメッセージがトリガとなる）。
Object B は Object A からのメッセージを受けて内部処理を行って結果を Object A に返しているわけやね。&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;非同期メッセージ（Asynchronous Message）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B
participant &amp;#34;Object C&amp;#34; as C

A -&amp;gt;&amp;gt; C : Asynchronous Message
activate C

A -&amp;gt;&amp;gt; B : Asynchronous Message
activate B

hnote over A : Waiting...

A &amp;lt;&amp;lt;-- B : Reply Message
deactivate B

A &amp;lt;&amp;lt;-- C : Reply Message
deactivate C

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./async.puml&#34;&gt;&lt;img src=&#34;./async.png&#34; srcset=&#34;./async.png 1181w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;矢印の種類，特に同期メッセージとの違いに注意。&lt;/p&gt;

&lt;p&gt;Object A と Object B の間，および Object A と Object C の間は同期していないため，処理の終了を待っているわけですね。
分かります。
ちなみに &lt;code&gt;hnote&lt;/code&gt; はコメントを表す。
&lt;code&gt;note&lt;/code&gt; だと付箋紙っぽい図形だが &lt;code&gt;hnote&lt;/code&gt; なら六角形（hexagon）になる。&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;メッセージの不達&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt;&amp;gt; B : Asynchronous Message
activate B

hnote over A : Waiting...

&lt;span class=&#34;hl&#34;&gt;A x&amp;lt;-- B : No Reply
&lt;/span&gt;deactivate B

hnote over A : Timeout

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./timeout.puml&#34;&gt;&lt;img src=&#34;./timeout.png&#34; srcset=&#34;./timeout.png 790w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;異常系シーケンスでよく見かけるやつ。
この例は Object B からの応答がなくてタイムアウトしちゃった状態を表す。&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;スコープ外からのメッセージ（Found/Lost Message）&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

&lt;span class=&#34;hl&#34;&gt;[o-&amp;gt;&amp;gt; A : Found Message
&lt;/span&gt;activate A

A -&amp;gt; B : Synchronous Message
activate B

B -&amp;gt; B : Internal call
activate B

&lt;span class=&#34;hl&#34;&gt;B -&amp;gt;&amp;gt;o] : Lost Message
&lt;/span&gt;deactivate B

A &amp;lt;&amp;lt;-- B : Reply Message
deactivate B

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./found-lost.puml&#34;&gt;&lt;img src=&#34;./found-lost.png&#34; srcset=&#34;./found-lost.png 1126w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;スコープ外のオブジェクトとのやり取りを表す。
メッセージがロストしているわけではない。
本当は黒丸なんだけど，何故か黒丸が使えない。&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;複合フラグメント（Combined Fragment）&lt;/h2&gt;

&lt;p&gt;シーケンス図で条件分岐やループなどの制御構造を表現するために以下のような「複合フラグメント」を記述できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

actor Alice
actor Bob

Alice -&amp;gt;&amp;gt; Bob: Hello

alt successful case
  Bob --&amp;gt;&amp;gt; Alice: Hello
else failure case
  Bob --&amp;gt;&amp;gt; Alice: Who?
  loop 3 times
    Alice -&amp;gt;&amp;gt; Bob: Hello again
  end loop
end alt

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./fragment.puml&#34;&gt;&lt;img src=&#34;./fragment.png&#34; srcset=&#34;./fragment.png 596w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;この例では &lt;code&gt;alt ... else ... end&lt;/code&gt;, &lt;code&gt;loop ... end&lt;/code&gt; で囲まれた部分が複合フラグメントに相当する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では複合フラグメントとして以下のものが使える（&lt;code&gt;group&lt;/code&gt; は汎用）。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;alt&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Alternative&lt;/strong&gt; 指定した条件下で分岐処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Option&lt;/strong&gt; 指定した条件下で行う処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Loop&lt;/strong&gt; 指定した条件下で繰り返し処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;break&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;break&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Break&lt;/strong&gt; 指定した条件下で中断処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;par&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;par&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Parallel&lt;/strong&gt; 並列処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;critical&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;critical&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Critical&lt;/strong&gt; クリティカル・セッション&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group ignore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Ignore&lt;/strong&gt; 無効な処理または重要でない処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;consider&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group consider&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Consider&lt;/strong&gt; 有効な処理または重要な処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Assert&lt;/strong&gt; 処理が成り立つために条件が必要なことを示す&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;neg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group neg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Negation&lt;/strong&gt; 本来起こりえない処理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;外部参照&lt;/h3&gt;

&lt;p&gt;複合フラグメントとはちょっと違うが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;ref&lt;/code&gt; を使ってシーケンスの一部を外部参照として表せる。
使い方は &lt;code&gt;note&lt;/code&gt;/&lt;code&gt;hnote&lt;/code&gt; と同じ。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt; B : Request

&lt;span class=&#34;hl&#34;&gt;ref over A,B
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Initialize
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;end ref
&lt;/span&gt;
A &amp;lt;&amp;lt;-- B : Complete

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./refer.puml&#34;&gt;&lt;img src=&#34;./refer.png&#34; srcset=&#34;./refer.png 1215w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;これでシーケンス図を機能ごとに分解することが可能になる。&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;オブジェクトの生成と消滅&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;create&lt;/code&gt;/&lt;code&gt;destroy&lt;/code&gt; を使って以下のようにオブジェクトの生成と消滅を記述できる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B
participant &amp;#34;Object C&amp;#34; as C

== Create Object ==

A -&amp;gt; B: Create Object C
activate B

&lt;span class=&#34;hl&#34;&gt;create C
&lt;/span&gt;B-&amp;gt;C: Create

ref over B, C : Initialize

A &amp;lt;&amp;lt;-- B: Success
deactivate B

|||
== Destroy Object ==

A -&amp;gt; B: Destroy Object C
activate B

B-&amp;gt;C: Destroy
activate C

B&amp;lt;&amp;lt;--C: Done
deactivate C
&lt;span class=&#34;hl&#34;&gt;destroy C
&lt;/span&gt;
A &amp;lt;&amp;lt;-- B: Success
deactivate B

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./create.puml&#34;&gt;&lt;img src=&#34;./create.png&#34; srcset=&#34;./create.png 1215w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;んー。
バツの付く位置が違うような気がするが，まぁいいか。&lt;/p&gt;

&lt;p&gt;今日のところはこれで。&lt;/p&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;Sequence Diagram syntax and features&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/sequence.html&#34;&gt;シーケンス図(Sequence Diagram) - UML入門 - IT専科&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/plantuml-sample&#34;&gt;GitHub - spiegel-im-spiegel/plantuml-sample: Samples for PlantUML&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:obj1&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では記述のかなりの部分を省略できるが，そのせいで文脈依存にならざるを得ない。たとえば &lt;code&gt;Alice-&amp;gt;Bob&lt;/code&gt; とだけ記述した場合，それがシーケンス図を表すのかクラス図なのか，あるいは他の図なのか分かりにくい（&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; はシーケンス図判定の優先度が高いようだが仕様として明記されていない）。そこで &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; でオブジェクトを定義する際は “&lt;code&gt;actor Alice&lt;/code&gt;” のように常に種別を明記する癖をつけておくと（後に再利用する上でも）いいだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:obj1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>真面目に PlantUML (1) : PlantUML のインストール</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2018/12/plantuml-1/" />
		<id>tag:text.Baldanders.info,2018-12-27:/remark/2018/12/plantuml-1/</id>
		<published>2018-12-27T10:55:14+00:00</published>
		<updated>2019-01-07T04:28:43+00:00</updated>
		<summary> せっかく時間ができたのだから PlantUML についてちゃんと調べてみることにした。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;1年ほど前に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタを使って &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; を使って UML で遊んだのだが， &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体は「とりあえず動かしてみた」というレベルできちんと調べていなかった。
せっかく時間ができたのだから，この機会にちゃんと調べてみることにした。&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;PlantUML のインストール&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/&#34;&gt;シーケンス図&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34;&gt;クラス図&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は UML (Unified Modeling Language; 統一モデリング言語) を記述するための DSL (Domain-Specific Language; ドメイン特化言語) と考えてよい。
UML の構文（に相当するもの）は図形で表されるが，それをテキストで記述できるようにしたのが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; である。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では UML 2.0 のうち以下の図（Diagrams）を作成できるようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;構造図（Structural Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/class-diagram&#34;&gt;クラス図（Class Diagram）&lt;/a&gt; ※同じ機能でパッケージ図も作成可能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/component-diagram&#34;&gt;コンポーネント図（Component Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/object-diagram&#34;&gt;オブジェクト図（Object Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/deployment-diagram&#34;&gt;配置図（Deployment Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;振る舞い図（Behavioral Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図（Sequence Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/use-case-diagram&#34;&gt;ユースケース図（Use Case Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図（Activity Diagram）&lt;/a&gt; ※ベータ版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/state-diagram&#34;&gt;状態遷移図（State Machine Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/timing-diagram&#34;&gt;タイミング図（Timing Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の実行モジュールは Java の jar ファイルで提供されているため，あらかじめ Java の実行環境を用意する必要がある（最新の &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; で問題ない）。
また&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図&lt;/a&gt;と&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図&lt;/a&gt;以外は &lt;a href=&#34;https://graphviz.gitlab.io/_pages/doc/info/lang.html&#34; title=&#34;The DOT Language&#34;&gt;DOT 言語&lt;/a&gt;にトランス・コンパイルされるため &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; もインストールする必要がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の実行モジュールは&lt;a href=&#34;http://plantuml.com/download&#34;&gt;ダウンロードページ&lt;/a&gt;から最新の &lt;code&gt;plantuml.jar&lt;/code&gt; ファイルをダウンロードすれば大丈夫。
&lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; も&lt;a href=&#34;http://graphviz.org/download/&#34;&gt;ダウンロードページ&lt;/a&gt;等から取得できる。
たとえば Windows であれば “Stable 2.38 Windows install packages” をダウンロードしてインストールすればよい。&lt;/p&gt;

&lt;p&gt;用意ができたら &lt;code&gt;plantuml.jar&lt;/code&gt; ファイルのあるフォルダで以下のコマンドを入力し動作確認する（以下は Windows 7 環境下での例）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -version
PlantUML version 1.2018.14 (Sat Dec 22 01:33:16 JST 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.1+13
Operating System: Windows 7
OS Version: 6.1
Default Encoding: MS932
Language: ja
Country: JP
Machine: ********
PLANTUML_LIMIT_SIZE: 4096
Processors: 4
Max Memory: 2,065,694,720
Total Memory: 130,023,424
Free Memory: 123,436,232
Used Memory: 6,587,192
Thread Active Count: 1

The environment variable GRAPHVIZ_DOT has not been set
Dot executable is C:\path\to\dot.exe
Dot version: dot - graphviz version 2.38.0 (20140413.2041)
Installation seems OK. File generation OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;GRAPHVIZ_DOT&lt;/code&gt; 環境変数がないよ，と言っているが &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の dot コマンドにパスが通っていれば無問題。
念のため dot コマンドとの連携を確認しておこう。
以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -testdot
The environment variable GRAPHVIZ_DOT has not been set
Dot executable is C:\path\to\dot.exe
Dot version: dot - graphviz version 2.38.0 (20140413.2041)
Installation seems OK. File generation OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;toc_2&#34;&gt;コマンドライン・オプション&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のコマンドライン・オプションは以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -h
Usage: java -jar plantuml.jar [options] -gui
        (to execute the GUI)
        or java -jar plantuml.jar [options] [file/dir] [file/dir] [file/dir]
        (to process files or directories)

You can use the following wildcards in files/dirs:
        *       means any characters but &amp;#39;\&amp;#39;
        ?       one and only one character but &amp;#39;\&amp;#39;
        **      means any characters (used to recurse through directories)

where options include:

        -gui                To run the graphical user interface
        -tpng               To generate images using PNG format (default)
        -tsvg               To generate images using SVG format
        -teps               To generate images using EPS format
        -tpdf               To generate images using PDF format
        -tvdx               To generate images using VDX format
        -txmi               To generate XMI file for class diagram
        -tscxml             To generate SCXML file for state diagram
        -thtml              To generate HTML file for class diagram
        -ttxt               To generate images with ASCII art
        -tutxt              To generate images with ASCII art using Unicode characters
        -tlatex             To generate images using LaTeX/Tikz format
        -tlatex:nopreamble  To generate images using LaTeX/Tikz format without preamble
        -o[utput] &amp;#34;dir&amp;#34;     To generate images in the specified directory
        -DVAR1=value        To set a preprocessing variable as if &amp;#39;!define VAR1 value&amp;#39; were used
        -Sparam1=value      To set a skin parameter as if &amp;#39;skinparam param1 value&amp;#39; were used
        -r[ecurse]          recurse through directories
        -I\path\to\file     To include file as if &amp;#39;!include file&amp;#39; were used
        -I\path\to\*.puml   To include files with pattern
        -charset xxx        To use a specific charset (default is windows-31j)
        -e[x]clude pattern  To exclude files that match the provided pattern
        -metadata           To retrieve PlantUML sources from PNG images
        -nometadata         To NOT export metadata in PNG/SVG generated files
        -checkmetadata      Skip PNG files that don&amp;#39;t need to be regenerated
        -version            To display information about PlantUML and Java versions
        -checkversion       To check if a newer version is available for download
        -v[erbose]          To have log information
        -quiet              To NOT print error message into the console
        -debugsvek          To generate intermediate svek files
        -h[elp]             To display this help message
        -testdot            To test the installation of graphviz
        -graphvizdot &amp;#34;exe&amp;#34;  To specify dot executable
        -p[ipe]             To use stdin for PlantUML source and stdout for PNG/SVG/EPS generation
        -encodesprite 4|8|16[z] &amp;#34;file&amp;#34;      To encode a sprite at gray level (z for compression) from an image
        -computeurl|-encodeurl      To compute the encoded URL of a PlantUML source file
        -decodeurl          To retrieve the PlantUML source from an encoded URL
        -syntax             To report any syntax error from standard input without generating images
        -language           To print the list of PlantUML keywords
        -checkonly          To check the syntax of files without generating images
        -failfast           To stop processing as soon as a syntax error in diagram occurs
        -failfast2          To do a first syntax check before processing files, to fail even faster
        -pattern            To print the list of Regular Expression used by PlantUML
        -duration           To print the duration of complete diagrams processing
        -nbthread N         To use (N) threads for processing
        -nbthread auto      To use 4 threads for processing
        -timeout N          Processing timeout in (N) seconds. Defaults to 15 minutes (900 seconds).
        -author[s]          To print information about PlantUML authors
        -overwrite          To allow to overwrite read only files
        -printfonts         To print fonts available on your system
        -enablestats        To enable statistics computation
        -disablestats       To disable statistics computation (default)
        -htmlstats          To output general statistics in file plantuml-stats.html
        -xmlstats           To output general statistics in file plantuml-stats.xml
        -realtimestats      To generate statistics on the fly rather than at the end
        -loopstats          To continuously print statistics about usage
        -splash             To display a splash screen with some progress bar
        -progress           To display a textual progress bar in console
        -pipeimageindex N   To generate the Nth image with pipe option
        -stdlib             To print standart library info
        -extractstdlib      To extract PlantUML Standard Library into stdlib folder
        -filename &amp;#34;example.puml&amp;#34;    To override %filename% variable
        -preproc            To output preprocessor text of diagrams
        -cypher             To cypher texts of diagrams so that you can share them

If needed, you can setup the environment variable GRAPHVIZ_DOT.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;かなりの数のオプションがあるが，よく使うのは以下のものだろうか。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tpng&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PNG 形式で出力（既定値）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tsvg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SVG 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-teps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EPS 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tpdf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PDF 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tlatex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LaTeX/Tikz 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tlatex:nopreamble&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LaTeX/Tikz 形式で出力（プリアンブルなし）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-o[utput] &amp;quot;dir&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したフォルダに出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-charset xxx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字エンコーディングの指定&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-nometadata&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PNG/SVG 出力にメタデータを含めない&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p[ipe]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力をパイプで行う&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;みんな大好き Hello World&lt;/h2&gt;

&lt;p&gt;では簡単なコードを処理してみよう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hello.puml&lt;/code&gt; という名前のファイルを用意して以下のように入力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; ではドキュメントの中にコードを埋め込むことを想定して &lt;code&gt;@startuml ... @enduml&lt;/code&gt; 内の記述のみが処理の対象となる。&lt;/p&gt;

&lt;p&gt;ではこのファイルを処理してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -charset UTF-8 hello.puml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;hello.puml&lt;/code&gt; と同じフォルダに &lt;code&gt;hello.png&lt;/code&gt; ファイルが出力される。
&lt;code&gt;hello.png&lt;/code&gt; ファイルの内容は以下の通り。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello.puml&#34;&gt;&lt;img src=&#34;./hello.png&#34; srcset=&#34;./hello.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;って，ちっちゃ！
じゃあ，解像度を調節してもう少し大きくしてみよう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;skinparam dpi 300
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これを処理するとこうなる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello2.puml&#34;&gt;&lt;img src=&#34;./hello2.png&#34; srcset=&#34;./hello2.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;おおっ。
おっきくなった。&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;見た目の調整&lt;/h2&gt;

&lt;p&gt;上の例で示したように &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;skinparam&lt;/code&gt; コマンドを使って見た目の調整ができる。
では，もう少し調整を入れて UML っぽい図にしてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;skinparam shadowing false
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam backgroundColor transparent
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam dpi 300
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam arrow {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName Noto Serif JP
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 10
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontStyle plain
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Color Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Thickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam participant {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName Noto Sans
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 14
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontStyle plain
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BackgroundColor WhiteSmoke
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BorderThickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Padding 20
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam sequence {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBackgroundColor transparent
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderThickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  MessageAlignment center
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;hide footbox
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam BoxPadding 10
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;フォントの変更と線の色と太さを調節してみた。
またライフラインの間隔も調整している。
以上を処理するとこんな図になる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello3.puml&#34;&gt;&lt;img src=&#34;./hello3.png&#34; srcset=&#34;./hello3.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;見た目の指定を別ファイルに分離する&lt;/h2&gt;

&lt;p&gt;見た目の指定は別ファイルにして再利用したいところである。
そこで &lt;code&gt;hello.iuml&lt;/code&gt; ファイルを作成して &lt;code&gt;skinparam&lt;/code&gt; コマンドの内容をまるっと移動してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;skinparam shadowing false
skinparam backgroundColor transparent
skinparam dpi 300

skinparam arrow {
  FontColor Black
  FontName Noto Serif JP
  FontSize 10
  FontStyle plain
  Color Black
  Thickness 1
}
skinparam participant {
  FontColor Black
  FontName Noto Sans
  FontSize 14
  FontStyle plain
  BackgroundColor WhiteSmoke
  BorderColor Black
  BorderThickness 1
  Padding 20
}
skinparam sequence {
  LifeLineBackgroundColor transparent
  LifeLineBorderColor Black
  LifeLineBorderThickness 1
  MessageAlignment center
}
hide footbox
skinparam BoxPadding 10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このファイルをインクルードする形でコードを修正する。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;!include hello.iuml
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これを処理すると&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello4.puml&#34;&gt;&lt;img src=&#34;./hello4.png&#34; srcset=&#34;./hello4.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;先程と全く同じ結果が得られる。&lt;/p&gt;

&lt;p&gt;また最初の&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;に対して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -charset UTF-8 -config hello.iuml hello.puml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と &lt;code&gt;-config&lt;/code&gt; オプションで &lt;code&gt;hello.iuml&lt;/code&gt; ファイルを指定しても同じ結果が得られる。
これで再利用しやすくなっただろう。&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;【追記】 &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のコメント&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の &lt;code&gt;@startuml ... @enduml&lt;/code&gt; 領域内にコメントを記述する際には以下の２通りの書き方がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&amp;#39; 一行コメント

/&amp;#39;
複数行に渡る
コメント
&amp;#39;/

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお，行の途中に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

skinparam dpi 300 &amp;#39;解像度の設定

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のような記述はできない（しかもエラーにもならない）のでご注意を。&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/&#34;&gt;UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/skinparam&#34;&gt;Changing colors and fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/command-line&#34;&gt;call it from your script using command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yohshiy.blog.fc2.com/blog-entry-152.html&#34;&gt;PlantUML の使い方 | プログラマーズ雑記帳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>ATOM エディタを使った作図（PlantUML 編）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2017/12/plantuml-with-atom/" />
		<id>tag:text.Baldanders.info,2017-12-17:/remark/2017/12/plantuml-with-atom/</id>
		<published>2017-12-17T12:56:39+00:00</published>
		<updated>2019-05-05T04:09:44+00:00</updated>
		<summary>おおっ。流石にクラス図は PlantUML の方がいいな。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34; title=&#34;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&#34;&gt;前回&lt;/a&gt;で &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの掃除も終わったので，以前から気になっていた「&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; を使った作図」について調べてみた。
ええ，分かってますとも。
&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34; title=&#34;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&#34;&gt;前回&lt;/a&gt;に引き続き「現実逃避」というやつです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/&#34;&gt;Open-source tool that uses simple textual descriptions to draw UML diagrams.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 関連パッケージを導入する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体は UML (Unified Modeling Language; 統一モデリング言語) を記述するための DSL (Domain-Specific Language; ドメイン特化言語) と考えてよい（実際には UML 以外のものも記述可能）。
UML の構文（に相当するもの）は図形で表されるが，それをテキストで記述できるようにしたのが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; である。
「UML って何？」って方もおられるだろうが，それは&lt;a href=&#34;#uml&#34;&gt;後ほど説明&lt;/a&gt;する。&lt;/p&gt;

&lt;p&gt;直前に述べたように &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体はテキストで記述するが，最終的には図（diagram）に落とし込むため &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; と Java の実行環境が必要となる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jar0&#34;&gt;&lt;a href=&#34;#fn:jar0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
これらをあらかじめ導入しておくこと（導入方法については割愛する）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で UML を書く（描く）ために以下の2つのパッケージを導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jar1&#34;&gt;&lt;a href=&#34;#fn:jar1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; は（今のところ）ハイライト機能しかないようなので無くても構わないが， &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; は描画に必要なので必ず導入すること。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; を導入したら Settings を開いて “Charset” および “Graphviz Dot Executable” 各項目の設定をしておく。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./38219245875_o.png&#34;&gt;&lt;img src=&#34;./38219245875_o.png&#34; srcset=&#34;./38219245875_o.png 847w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;settings of plantuml-viewer package&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;./38219245875_o.png&#34;&gt;settings of plantuml-viewer package&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;“Graphviz Dot Executable” 項目には &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の dot コマンドへのフルパスをセットする。
“Charset” 項目については， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で書くんだから UTF-8 にしておけばいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;最初はやっぱり Hello World でしょ&lt;/h2&gt;

&lt;p&gt;動作確認を兼ねて何か書いてみる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; では &lt;code&gt;.pu&lt;/code&gt;, &lt;code&gt;.puml&lt;/code&gt;, &lt;code&gt;.plantuml&lt;/code&gt; を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 用の拡張子と認識するようなので，まずは &lt;code&gt;hello.puml&lt;/code&gt; ファイルを作って以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Bob-&amp;gt;Alice : hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; で表示する（&lt;code&gt;ctrl-alt-p&lt;/code&gt; でビュアーが開く）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello1.puml&#34;&gt;&lt;img src=&#34;hello1.svg&#34; srcset=&#34;hello1.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;おおっ。
できたできた。
表示されている図は PNG, SVG, EPS のいずれかの形式で保存できる（コンテキスト・メニューから “Save As ...” を選択する）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は &lt;code&gt;@startuml ... @enduml&lt;/code&gt; の間を記述領域と見なすようで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;ほげほげ

@startuml
  Bob-&amp;gt;Alice : hello
@enduml

ほえほえ&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いても，全く同じ図が出力される。
他形式のドキュメントに埋め込むことを想定してのことだろうが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:embd1&#34;&gt;&lt;a href=&#34;#fn:embd1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，今回は単純に図が出力できればいいので，以降の記述では &lt;code&gt;@startuml&lt;/code&gt; および &lt;code&gt;@enduml&lt;/code&gt; を省くことにする。&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;見た目の調整&lt;/h2&gt;

&lt;p&gt;このままでもいいっちゃあいいのだが，もう少し見た目をどうにかしたい。
まずはモノクロ表示にしてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;skinparam monochrome true
&lt;/span&gt;Bob-&amp;gt;Alice : hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello2a.puml&#34;&gt;&lt;img src=&#34;hello2a.svg&#34; srcset=&#34;hello2a.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;という感じにモノクロになった。
調子に乗ってもう少し色々と弄ってみよう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;skinparam shadowing false
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam default{
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName &amp;#39;Noto Serif&amp;#39;, &amp;#39;Noto Serif JP&amp;#39;, serif
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 14
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam sequence {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontName &amp;#39;Noto Sans&amp;#39;, &amp;#39;Noto Sans JP&amp;#39;, sans-serif
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontColor black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontSize 10
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBackgroundColor White
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ActorBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ActorBackgroundColor White
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ParticipantBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ParticipantBackgroundColor LightGray
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  MessageAlign center
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;
actor ボブ
participant Alice

ボブ-&amp;gt;Alice : こんにちは
activate Alice

Alice--&amp;gt;ボブ : Hello
deactivate Alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;前半部分で線や背景色の色およびフォントについて指定し&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fnt1&#34;&gt;&lt;a href=&#34;#fn:fnt1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，後半部分で実際のシーケンスを記述している。
これを SVG に出力するとこんな感じになる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello2b.puml&#34;&gt;&lt;img src=&#34;hello2b.svg&#34; srcset=&#34;hello2b.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;見た目の記述に毎回あれだけの量を書くのはかったるいのでインクルードファイルとして別出ししてしまおう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;!include style.puml
&lt;/span&gt;
actor ボブ
participant Alice

ボブ-&amp;gt;Alice : こんにちは
activate Alice

Alice--&amp;gt;ボブ : Hello
deactivate Alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これでスッキリした。
&lt;a href=&#34;./style.puml&#34;&gt;&lt;code&gt;style.puml&lt;/code&gt;&lt;/a&gt; ファイルの中身はこんな感じで，記述をそのままコピっただけ。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;skinparam shadowing false
skinparam default{
  FontName &amp;#39;Noto Serif&amp;#39;, &amp;#39;Noto Serif JP&amp;#39;, serif
  FontColor black
  FontSize 14
}
skinparam sequence {
  ArrowColor Black
  ArrowFontName &amp;#39;Noto Sans&amp;#39;, &amp;#39;Noto Sans JP&amp;#39;, sans-serif
  ArrowFontColor black
  ArrowFontSize 10
  LifeLineBorderColor Black
  LifeLineBackgroundColor White
  ActorBorderColor Black
  ActorBackgroundColor White
  ParticipantBorderColor Black
  ParticipantBackgroundColor LightGray
  MessageAlign center
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;uml&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図可能な UML 図&lt;/h2&gt;

&lt;p&gt;現在 UML 2.0 では以下の図（Diagrams）が定義されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Diagrams

&lt;ul&gt;
&lt;li&gt;構造図（Structural Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/class-diagram&#34;&gt;クラス図（Class Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/object-diagram&#34;&gt;オブジェクト図（Object Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パッケージ図（Package Diagram）&lt;/li&gt;
&lt;li&gt;コンポジット構造図（Composite Structure Diagram）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/component-diagram&#34;&gt;コンポーネント図（Component Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/deployment-diagram&#34;&gt;配置図（Deployment Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;振る舞い図（Behavioral Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/use-case-diagram&#34;&gt;ユースケース図（Use Case Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図（Activity Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/state-diagram&#34;&gt;状態遷移図（State Machine Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図（Sequence Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コミュニケーション図（Communication Diagram）&lt;/li&gt;
&lt;li&gt;相互作用概要図（Interaction Overview Diagram）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/timing-diagram&#34;&gt;タイミング図（Timing Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;リンクがあるものが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 記述可能な図である。&lt;/p&gt;

&lt;p&gt;UML 各図の中の線や図形は全て「意味」が決められており，それらを組み合わせることでシステムの仕様や設計が表現できることを目指している。
名前が示す通りモデリングの設計手法と相性がいいため，オブジェクト指向設計においてよく使われる。&lt;/p&gt;

&lt;p&gt;実際には上で挙げた図を全て駆使するのではなく，システムの性格や規模に応じて幾つかの図を組み合わせて使うのが普通である。&lt;/p&gt;

&lt;p&gt;UML 図の中でもよく使われるシーケンス図とクラス図について &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; での記述を紹介しよう。
以前「&lt;a href=&#34;https://text.baldanders.info/remark/2017/09/sequence-diagram/&#34; title=&#34;そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ）&#34;&gt;そうだ，シーケンス図を描こう！&lt;/a&gt;」の中で， &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で書いたシーケンス図&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
sequenceDiagram
    カバ-&gt;&gt;+カバン: あなた，泳げまして？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: 空は飛べるんですの？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: じゃあ，足が速いとか？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;カバン: あなた，何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&gt;&gt;カバン: ううっ
    end
&lt;/div&gt;
&lt;figcaption&gt;カバとカバン&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図するとこんな感じだろうか（図のリンク先が &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; ソースコード）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;kaban.puml&#34;&gt;&lt;img src=&#34;kaban.svg&#34; srcset=&#34;kaban.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;カバとカバン&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;kaban.puml&#34;&gt;カバとカバン&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;じゃあ， &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で書いたクラス図&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
classDiagram
    friends&lt;|--serval
    friends&lt;|--raccoon
    friends&lt;|--fennec
    serval : +Waai()
    raccoon : +OmakaseNanoda()
    fennec : +Haiyo()
&lt;/div&gt;
&lt;figcaption&gt;フレンズ&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図するとこんな感じかな（コメントをちょろんと加えてみた）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;friends-class.puml&#34;&gt;&lt;img src=&#34;friends-class.svg&#34; srcset=&#34;friends-class.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;フレンズ&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;friends-class.puml&#34;&gt;フレンズ&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おおっ。
流石にクラス図は &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の方がいいな。
矢印は横向きにも出来るっぽい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;wiki.puml&#34;&gt;&lt;img src=&#34;wiki.svg&#34; srcset=&#34;wiki.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;今度からクラス図描くときは &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で描くようにしよう。&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;やっぱり考えながら描く&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;https://text.baldanders.info/remark/2017/09/sequence-diagram/&#34; title=&#34;そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ）&#34;&gt;そうだ，シーケンス図を描こう！&lt;/a&gt;」でも書いたんだけど，クラス図やシーケンス図といったものは試行錯誤しながら描いていくものなのよ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:case1&#34;&gt;&lt;a href=&#34;#fn:case1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
お客さんもマネージャもプログラマも UML 図を中心に議論を行っていく。
だから作成や修正が面倒なツールはダメなのだ。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は時々刻々と修正されることを前提にしたツールと言える。&lt;/p&gt;

&lt;p&gt;もうひとつ。&lt;/p&gt;

&lt;p&gt;要求定義を行っていくと「要求」やそれに伴う「仕様」が大きく変化することがある。
変化すること自体は（改善されてるってことだし）結構なのだが（予算規模が変わってアワアワする可能性はあるけど），あとからチームに参加する人たちは「結果」しか提示されないので「何故そのような「要求」に至ったか」が理解できないことが多い。
不完全な理解のまま作業をすすめると必ず何処かで不整合が起きる（つまり文脈（context）が大事ってこと）。&lt;/p&gt;

&lt;p&gt;だから議論の流れを後から追えるよう「履歴」をとっていく必要がある。
私が最近 UML 図に関して教わったのは&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;最初は不完全でも間違ってても構わない。まずは考えていることを図にぶちまけることが重要&lt;/li&gt;
&lt;li&gt;ただし，クラス図では多重度を記述すること（MUST）&lt;/li&gt;
&lt;li&gt;要求定義レベルの図と設計レベルの図は必要とされる詳細度や厳密度が異なる。最初から設計レベルの図を描こうとしないこと&lt;/li&gt;
&lt;li&gt;作成した図は（手書きのものも含めて）全て履歴として保管し，後から参照できるようにすること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;だったかな。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の利点は，テキストであるが故に修正・変更が容易で， git などのバージョン管理システムと組み合わせて履歴から差分情報を抽出しやすいことにある。
ぶっちゃけ，出力としての PNG や SVG 画像ファイルにはさしたる価値はなく， UML 用の DSL である &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の記述にこそ大きな価値があるということだ。&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/&#34;&gt;UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/skinparam&#34;&gt;Changing colors and fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yohshiy.blog.fc2.com/blog-entry-152.html&#34;&gt;PlantUML の使い方 | プログラマーズ雑記帳&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/ogomr/items/0b5c4de7f38fd1482a48&#34;&gt;PlantUML Cheat Sheet - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/nakahashi/items/3d88655f055ca6a2617c&#34;&gt;AtomとPlantUMLで爆速UMLモデリング - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/k_nakayama/items/77ca73753ebd049a66de&#34;&gt;Atom+PlantUMLで見た目もいい感じのシーケンス図を作成する - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/veltra-engineering/how-to-draw-er-diagram-with-plantuml-86ec2095645e&#34;&gt;PlantUMLでER図を描く！ – VELTRA Engineering – Medium&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:jar0&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の本体は &lt;code&gt;plantuml.jar&lt;/code&gt; で提供されている。このファイルを使って “&lt;code&gt;java -jar plantuml.jar -language&lt;/code&gt;” とコマンドを打つと &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で使われる全シンボルが表示される。シーケンス図以外は内部で DOT 言語に変換してから &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; を使って作図するようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jar0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:jar1&#34;&gt;Windows なら &lt;code&gt;%USERPROFILE%\.atom\packages\plantuml-viewer&lt;/code&gt; フォルダにインストールされるが，その中の &lt;code&gt;node_modules\node-plantuml&lt;/code&gt; フォルダに &lt;code&gt;plantuml.jar&lt;/code&gt; がある筈である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jar1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:embd1&#34;&gt;&lt;code&gt;@startuml&lt;/code&gt; の後ろに &lt;code&gt;images/hello.png&lt;/code&gt; などと指定すれば &lt;code&gt;plantuml.jar&lt;/code&gt; のほうで自動的に指定したパス名で画像ファイルを出力するらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:embd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fnt1&#34;&gt;フォント名については &lt;code&gt;font-family&lt;/code&gt; としてそのまま SVG に埋め込まれる。従って環境によって見え方が異なる筈である。どの環境でも同じような見え方にしたいなら PNG で保存するのが最も確実だろう。その場合は &lt;code&gt;xxxFontName&lt;/code&gt; に自マシンにインストールされている具体的なフォント名を指定する必要がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fnt1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:case1&#34;&gt;もちろん UML を CASE (Computer Aided Software Engineering) の入力手段として使う場合もある（つか UML ってそれを念頭に置いて開発されたものだからねぇ）。その場合は矛盾のない正確な記述が要求される。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:case1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2017/09/sequence-diagram/" />
		<id>tag:text.Baldanders.info,2017-09-21:/remark/2017/09/sequence-diagram/</id>
		<published>2017-09-21T07:54:32+00:00</published>
		<updated>2019-01-07T04:28:43+00:00</updated>
		<summary>久しぶりに本ブログをいじくって mermaid でシーケンス図を描けるようにしてみる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;久しぶりに&lt;a href=&#34;https://text.baldanders.info/&#34; title=&#34;text.Baldanders.info&#34;&gt;本ブログ&lt;/a&gt;をいじくって &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; でシーケンス図を描けるようにしてみる。&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;シーケンス図とは&lt;/h2&gt;

&lt;p&gt;一応説明しておくと，シーケンス図というのは複数の「もの」の間でのやり取りを時系列で表現したものである。
「もの」は相互作用するものなら何でもよく，以下のような会話も表現できる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
sequenceDiagram
    カバ-&gt;&gt;+カバン: あなた，泳げまして？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: 空は飛べるんですの？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: じゃあ，足が速いとか？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;カバン: あなた，何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&gt;&gt;カバン: ううっ
    end
&lt;/div&gt;
&lt;figcaption&gt;カバとカバン&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;縦のラインを「ライフライン&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ll&#34;&gt;&lt;a href=&#34;#fn:ll&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」と呼び（上から下に時間が流れる），横向きの矢印を「メッセージ」と呼ぶ。
“loop” で囲まれている部分は「複合フラグメント」と呼ばれるもので，シーケンス内の処理のかたまりを指す。
“loop” は文字通り繰り返し処理のこと。
カバンはカバに「何もできない」と言われて悶々としてしまったわけですね（笑）&lt;/p&gt;

&lt;p&gt;シーケンス図はオブジェクト指向設計ではとても重宝されている。
クラス間の相互作用を記述するだけじゃなくて，要件定義で「登場人物（人間とは限らない）」の関係を記述するのにも使われる（もちろん UML で使われる図はシーケンス図だけじゃないけどね）。&lt;/p&gt;

&lt;p&gt;ただ，これを手描きで作図するのは結構面倒くさい（図を描きながら試行錯誤するし）。
企業向けなら &lt;a href=&#34;http://astah.change-vision.com/&#34; title=&#34;astah システム設計、ソフトウェア開発支援ツール | Astah&#34;&gt;Astah*&lt;/a&gt; のような開発支援ツールを使う手もあるけれど，個人では手にあまるものだし，どうせ描くならテキスト入力でサクッとやりたいよね。&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Mermaid 記法と  mermaid.js&lt;/h2&gt;

&lt;p&gt;そうした需要に応えてくれるのが &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/knsv/mermaid&#34;&gt;knsv/mermaid: Generation of diagram and flowchart from text in a similar manner as markdown&lt;/a&gt; ： こちらのドキュメントのほうが詳しい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば，先程の「カバとカバン」のやり取りは  &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で以下のように表せる。
直感的で分かりやすいでしょ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:sd1&#34;&gt;&lt;a href=&#34;#fn:sd1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;sequenceDiagram
    カバ-&amp;gt;&amp;gt;+カバン: あなた、泳げまして？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: 空は飛べるんですの？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: じゃあ、足が速いとか？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;カバン: あなた、何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&amp;gt;&amp;gt;カバン: ううっ
    end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この記述をもとに Web ページ上で描画を行うには mermaid.js を使う。&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;mermaid.js の設定&lt;/h3&gt;

&lt;p&gt;まず mermaid.js のセットアップは以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://unpkg.com/mermaid/dist/mermaid.min.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;mermaid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;startOnLoad&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;neutral&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この記述を HTML の末尾（&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; タグの直前）に記述する。&lt;/p&gt;

&lt;p&gt;mermaid.js は &lt;a href=&#34;https://unpkg.com/mermaid/&#34;&gt;CDN (Content Delivery Network) が用意されている&lt;/a&gt;ので利用することをお勧めする。
バージョンを指定する場合は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://unpkg.com/mermaid@7.1.0/dist/mermaid.min.js&#34;&gt;https://unpkg.com/mermaid@7.1.0/dist/mermaid.min.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のように記述する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mermaid.initialize()&lt;/code&gt; 関数は初期化と描画を行う。
ページロード時に描画を行う場合は &lt;code&gt;startOnLoad&lt;/code&gt; を true にする。
また &lt;code&gt;theme&lt;/code&gt; は今（v7.1.0）のところ以下の4つが用意されている。
お好みでどうぞ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dark&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;neutral&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さらに mermaid.js に記述部分を認識させるために &lt;code&gt;&amp;lt;div class=&amp;quot;mermaid&amp;quot;&amp;gt; ... &amp;lt;/div&amp;gt;&lt;/code&gt; で囲む。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mermaid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
sequenceDiagram
    カバ-&amp;gt;&amp;gt;+カバン: あなた、泳げまして？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: 空は飛べるんですの？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: じゃあ、足が速いとか？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;カバン: あなた、何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&amp;gt;&amp;gt;カバン: ううっ
    end
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで最初に挙げたシーケンス図を描画してくれる。&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Hugo 用の shortcode&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; 用に &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/blob/master/layouts/shortcodes/fig-mermaid.html&#34;&gt;shortcode を作ってみた&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figure&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;margin:0 auto;text-align:center;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;mermaid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Inner }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
{{ if .Get &amp;#34;title&amp;#34;}}&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figcaption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ with .Get &amp;#34;link&amp;#34;}}&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{.}}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ end }}{{ .Get &amp;#34;title&amp;#34; }}{{ with .Get &amp;#34;link&amp;#34;}}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ end }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figcaption&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ end }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;figure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この shortcode を使うなら以下のように記述すればよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;{{&amp;lt; fig-mermaid title=&amp;#34;カバとカバン&amp;#34; &amp;gt;}}
sequenceDiagram
    カバ-&amp;gt;&amp;gt;+カバン: あなた，泳げまして？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: 空は飛べるんですの？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;+カバン: じゃあ，足が速いとか？
    カバン--&amp;gt;&amp;gt;-カバ: いえ
    カバ-&amp;gt;&amp;gt;カバン: あなた，何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&amp;gt;&amp;gt;カバン: ううっ
    end
{{&amp;lt; /fig-mermaid &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; を使っておられる方は参考にどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;複雑な関係を分かりやすくする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/&#34; title=&#34;text.Baldanders.info&#34;&gt;本ブログ&lt;/a&gt;にシーケンス図を組み込もうと思ったのは徳島県のチケット売買詐欺事件のシーケンスが分かりにくかったからだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20170910/1505065248&#34;&gt;徳島県警察の誤認逮捕事件についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で，リンク先の図を元にしてシーケンス図を起こしてみたのがこれ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
sequenceDiagram
    participant A as 愛知県女性A
    participant Tw as Twitter
    participant B as 京都女子中学生B
    participant C as 徳島県女子高生C
    participant D as 和歌山県女性D
    participant Tk as チケット売買サイト
    participant E as 関東女性E
    A-&gt;&gt;Tw: チケット売ります
    C-&gt;&gt;Tw: 購入希望
    D-&gt;&gt;Tw: 購入希望
    B-&gt;&gt;+Tw: 
    Tw--&gt;&gt;-B: A,B,Cのやり取りを発見
    B-&gt;&gt;+A: 売買交渉：8万円で購入希望
    B-&gt;&gt;+C: Aとして売買交渉：Aの口座に4万円送金指示
    B-&gt;&gt;+D: Aとして売買交渉：Aの口座に4万円送金指示
    B-&gt;&gt;+Tk: A名義でチケット出品
    C--&gt;&gt;-A: 4万円振込
    D--&gt;&gt;-A: 4万円振込
    E-&gt;&gt;Tk: 6万5千円で落札，送金
    B-&gt;&gt;A: 送付先をEの住所へ指示
    A--&gt;&gt;-E: チケット送付
    Tk--&gt;&gt;-B: 約6万円入金
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20170910/1505065248&#34;&gt;「[徳島県警察の誤認逮捕事件についてまとめてみた」より&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法ではこんな感じになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;sequenceDiagram
    participant A as 愛知県女性A
    participant Tw as Twitter
    participant B as 京都女子中学生B
    participant C as 徳島県女子高生C
    participant D as 和歌山県女性D
    participant Tk as チケット売買サイト
    participant E as 関東女性E
    A-&amp;gt;&amp;gt;Tw: チケット売ります
    C-&amp;gt;&amp;gt;Tw: 購入希望
    D-&amp;gt;&amp;gt;Tw: 購入希望
    B-&amp;gt;&amp;gt;+Tw: 
    Tw--&amp;gt;&amp;gt;-B: A,B,Cのやり取りを発見
    B-&amp;gt;&amp;gt;+A: 売買交渉：8万円で購入希望
    B-&amp;gt;&amp;gt;+C: Aとして売買交渉：Aの口座に4万円送金指示
    B-&amp;gt;&amp;gt;+D: Aとして売買交渉：Aの口座に4万円送金指示
    B-&amp;gt;&amp;gt;+Tk: A名義でチケット出品
    C--&amp;gt;&amp;gt;-A: 4万円振込
    D--&amp;gt;&amp;gt;-A: 4万円振込
    E-&amp;gt;&amp;gt;Tk: 6万5千円で落札，送金
    B-&amp;gt;&amp;gt;A: 送付先をEの住所へ指示
    A--&amp;gt;&amp;gt;-E: チケット送付
    Tk--&amp;gt;&amp;gt;-B: 約6万円入金&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし，改めて見るとホンマ凄いよねぇ。
これを本当に一人で考えて実行したのならちょとした天才かもしれん。&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;シーケンス図以外の図も描けるよ&lt;/h2&gt;

&lt;p&gt;さて，今（v7.1.0）のところ  &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法および mermaid.js は以下の図をサポートしている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フローチャート&lt;/li&gt;
&lt;li&gt;シーケンス図&lt;/li&gt;
&lt;li&gt;ガント図&lt;/li&gt;
&lt;li&gt;クラス図（experimental）&lt;/li&gt;
&lt;li&gt;Git グラフ（experimental）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば，クラス図は以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;classDiagram
    friends&amp;lt;|--serval
    friends&amp;lt;|--raccoon
    friends&amp;lt;|--fennec
    serval : +Waai()
    raccoon : +Omakase-nanoda()
    fennec : +Haiyo()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを mermaid.js で描画すると以下のようになる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
classDiagram
    friends&lt;|--serval
    friends&lt;|--raccoon
    friends&lt;|--fennec
    serval : +Waai()
    raccoon : +Omakase-nanoda()
    fennec : +Haiyo()
&lt;/div&gt;
&lt;figcaption&gt;フレンズ&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;んー。
クラス図を描くなら多重度は必須なんだがなぁ（たとえば多対多の関係は実装できないため「設計が間違っている」と断言できる）。
これに関しては「これからに期待」といったところか。&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;考えながら描く&lt;/h2&gt;

&lt;p&gt;クラス図やシーケンス図といったものは試行錯誤しながら描いていくものなので，切ったり貼ったりあるいは結合を変えたりといったことが簡単にできないと意味がない。
したがって，とにかく記述が簡単で見た目が直感的であるというのが大事になってくるわけだ，多少は機能を落としてでも。&lt;/p&gt;

&lt;p&gt;そういう意味で &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; はバランスのいい製品と言える。
まぁ，&lt;a href=&#34;https://text.baldanders.info/&#34; title=&#34;text.Baldanders.info&#34;&gt;本ブログ&lt;/a&gt;では頻繁に使うものではないかもしれないが，使える道具はあるに越したことはないだろう。&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/sequence.html&#34;&gt;シーケンス図(Sequence Diagram) - UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/class.html&#34;&gt;クラス図(Class Diagram) - UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/rana_kualu/items/da394fd33ce019bf0ba7&#34;&gt;簡単にガントチャートとかクラス図とか書けるやつ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ririli/items/64320ed2918b1982f89d&#34;&gt;ちょっとしたシーケンス図を書くのにatom-mermaidが便利すぎる話 - Qiita&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.tonyballantyne.com/graphs.html&#34;&gt;Drawing Graphs using Dot and Graphviz&lt;/a&gt; : 図にこだわるのであれば &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の DOT 言語を使う手もある&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/rubytomato@github/items/51779135bc4b77c8c20d&#34;&gt;Graphvizとdot言語でグラフを描く方法のまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/04/hackmd/&#34;&gt;エディタ以上ワープロ未満の HackMD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ll&#34;&gt;UML 的にはライフラインは破線じゃないといけないのだけど，どういうわけか &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; では実線になっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ll&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:sd1&#34;&gt;複合フラグメントは loop 以外には alt, opt, par のみサポートされているようだ。個人的には ref と  critical （par があるなら critical は必要）くらいは入れて欲しいところであるが...
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:sd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
</feed>
