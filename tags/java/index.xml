<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of Java - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/java/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/java/index.xml" />
	<id>tag:text.Baldanders.info,2019-03-20:/tags</id>
	<updated>2019-03-20T22:58:01+09:00</updated>
	<generator uri="https://gohugo.io/">Hugo 0.54.0</generator>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>Java 12 がリリース</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2019/03/java-12-is-released/" />
		<id>tag:text.Baldanders.info,2019-03-20:/release/2019/03/java-12-is-released/</id>
		<published>2019-03-20T13:58:01+00:00</published>
		<updated>2019-03-23T02:36:01+00:00</updated>
		<summary>Switch 文を式として評価できるのは羨ましい。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;予定通り Java 12 がリリースされた。
&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; および同系列の Java のみのショート・サイクルのバージョンアップである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mail.openjdk.java.net/pipermail/jdk-dev/2019-March/002718.html&#34;&gt;Java 12 / JDK 12: General Availability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/java_12switch.html&#34;&gt;Java 12正式版がリリース、大きな変更などはなし。新ガベージコレクタの実験的導入、Switch文の拡張がプレビューなど － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows 版だとこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java --version
openjdk 12 2019-03-19
OpenJDK Runtime Environment (build 12+33)
OpenJDK 64-Bit Server VM (build 12+33, mixed mode, sharing)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/kotlin-book/&#34;&gt;Kotlin の予備学習&lt;/a&gt;」をしているときに switch 文を式（expression）として評価できると書いてあって「なにそれ羨ましい」と思ったものだが Java 側も追従したようである。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;なんかは意図的に式として評価できる範囲を限定しているので，ちょっと羨ましいんだよなぁ。&lt;/p&gt;

&lt;p&gt;アップデートは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/dhirabayashi/items/2999b04a369379f41675&#34;&gt;Java12が出たので、とりあえずswitch式を試してみた - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/02/release-cycle-of-java-environment/&#34;&gt;Java 環境のリリースとサポートに関する覚え書き&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>真面目に PlantUML (1) : PlantUML のインストール</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2018/12/plantuml-1/" />
		<id>tag:text.Baldanders.info,2018-12-27:/remark/2018/12/plantuml-1/</id>
		<published>2018-12-27T10:55:14+00:00</published>
		<updated>2019-01-07T04:28:43+00:00</updated>
		<summary> せっかく時間ができたのだから PlantUML についてちゃんと調べてみることにした。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;1年ほど前に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタを使って &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; を使って UML で遊んだのだが， &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体は「とりあえず動かしてみた」というレベルできちんと調べていなかった。
せっかく時間ができたのだから，この機会にちゃんと調べてみることにした。&lt;/p&gt;

&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;PlantUML のインストール&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/&#34;&gt;シーケンス図&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34;&gt;クラス図&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;plantuml-のインストール&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は UML (Unified Modeling Language; 統一モデリング言語) を記述するための DSL (Domain-Specific Language; ドメイン特化言語) と考えてよい。
UML の構文（に相当するもの）は図形で表されるが，それをテキストで記述できるようにしたのが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; である。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では UML 2.0 のうち以下の図（Diagrams）を作成できるようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;構造図（Structural Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/class-diagram&#34;&gt;クラス図（Class Diagram）&lt;/a&gt; ※同じ機能でパッケージ図も作成可能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/component-diagram&#34;&gt;コンポーネント図（Component Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/object-diagram&#34;&gt;オブジェクト図（Object Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/deployment-diagram&#34;&gt;配置図（Deployment Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;振る舞い図（Behavioral Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図（Sequence Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/use-case-diagram&#34;&gt;ユースケース図（Use Case Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図（Activity Diagram）&lt;/a&gt; ※ベータ版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/state-diagram&#34;&gt;状態遷移図（State Machine Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/timing-diagram&#34;&gt;タイミング図（Timing Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の実行モジュールは Java の jar ファイルで提供されているため，あらかじめ Java の実行環境を用意する必要がある（最新の &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; で問題ない）。
また&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図&lt;/a&gt;と&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図&lt;/a&gt;以外は &lt;a href=&#34;https://graphviz.gitlab.io/_pages/doc/info/lang.html&#34; title=&#34;The DOT Language&#34;&gt;DOT 言語&lt;/a&gt;にトランス・コンパイルされるため &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; もインストールする必要がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の実行モジュールは&lt;a href=&#34;http://plantuml.com/download&#34;&gt;ダウンロードページ&lt;/a&gt;から最新の &lt;code&gt;plantuml.jar&lt;/code&gt; ファイルをダウンロードすれば大丈夫。
&lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; も&lt;a href=&#34;http://graphviz.org/download/&#34;&gt;ダウンロードページ&lt;/a&gt;等から取得できる。
たとえば Windows であれば “Stable 2.38 Windows install packages” をダウンロードしてインストールすればよい。&lt;/p&gt;

&lt;p&gt;用意ができたら &lt;code&gt;plantuml.jar&lt;/code&gt; ファイルのあるフォルダで以下のコマンドを入力し動作確認する（以下は Windows 7 環境下での例）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -version
PlantUML version 1.2018.14 (Sat Dec 22 01:33:16 JST 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.1+13
Operating System: Windows 7
OS Version: 6.1
Default Encoding: MS932
Language: ja
Country: JP
Machine: ********
PLANTUML_LIMIT_SIZE: 4096
Processors: 4
Max Memory: 2,065,694,720
Total Memory: 130,023,424
Free Memory: 123,436,232
Used Memory: 6,587,192
Thread Active Count: 1

The environment variable GRAPHVIZ_DOT has not been set
Dot executable is C:\path\to\dot.exe
Dot version: dot - graphviz version 2.38.0 (20140413.2041)
Installation seems OK. File generation OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;GRAPHVIZ_DOT&lt;/code&gt; 環境変数がないよ，と言っているが &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の dot コマンドにパスが通っていれば無問題。
念のため dot コマンドとの連携を確認しておこう。
以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -testdot
The environment variable GRAPHVIZ_DOT has not been set
Dot executable is C:\path\to\dot.exe
Dot version: dot - graphviz version 2.38.0 (20140413.2041)
Installation seems OK. File generation OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;コマンドライン-オプション&#34;&gt;コマンドライン・オプション&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のコマンドライン・オプションは以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -h
Usage: java -jar plantuml.jar [options] -gui
        (to execute the GUI)
        or java -jar plantuml.jar [options] [file/dir] [file/dir] [file/dir]
        (to process files or directories)

You can use the following wildcards in files/dirs:
        *       means any characters but &amp;#39;\&amp;#39;
        ?       one and only one character but &amp;#39;\&amp;#39;
        **      means any characters (used to recurse through directories)

where options include:

        -gui                To run the graphical user interface
        -tpng               To generate images using PNG format (default)
        -tsvg               To generate images using SVG format
        -teps               To generate images using EPS format
        -tpdf               To generate images using PDF format
        -tvdx               To generate images using VDX format
        -txmi               To generate XMI file for class diagram
        -tscxml             To generate SCXML file for state diagram
        -thtml              To generate HTML file for class diagram
        -ttxt               To generate images with ASCII art
        -tutxt              To generate images with ASCII art using Unicode characters
        -tlatex             To generate images using LaTeX/Tikz format
        -tlatex:nopreamble  To generate images using LaTeX/Tikz format without preamble
        -o[utput] &amp;#34;dir&amp;#34;     To generate images in the specified directory
        -DVAR1=value        To set a preprocessing variable as if &amp;#39;!define VAR1 value&amp;#39; were used
        -Sparam1=value      To set a skin parameter as if &amp;#39;skinparam param1 value&amp;#39; were used
        -r[ecurse]          recurse through directories
        -I\path\to\file     To include file as if &amp;#39;!include file&amp;#39; were used
        -I\path\to\*.puml   To include files with pattern
        -charset xxx        To use a specific charset (default is windows-31j)
        -e[x]clude pattern  To exclude files that match the provided pattern
        -metadata           To retrieve PlantUML sources from PNG images
        -nometadata         To NOT export metadata in PNG/SVG generated files
        -checkmetadata      Skip PNG files that don&amp;#39;t need to be regenerated
        -version            To display information about PlantUML and Java versions
        -checkversion       To check if a newer version is available for download
        -v[erbose]          To have log information
        -quiet              To NOT print error message into the console
        -debugsvek          To generate intermediate svek files
        -h[elp]             To display this help message
        -testdot            To test the installation of graphviz
        -graphvizdot &amp;#34;exe&amp;#34;  To specify dot executable
        -p[ipe]             To use stdin for PlantUML source and stdout for PNG/SVG/EPS generation
        -encodesprite 4|8|16[z] &amp;#34;file&amp;#34;      To encode a sprite at gray level (z for compression) from an image
        -computeurl|-encodeurl      To compute the encoded URL of a PlantUML source file
        -decodeurl          To retrieve the PlantUML source from an encoded URL
        -syntax             To report any syntax error from standard input without generating images
        -language           To print the list of PlantUML keywords
        -checkonly          To check the syntax of files without generating images
        -failfast           To stop processing as soon as a syntax error in diagram occurs
        -failfast2          To do a first syntax check before processing files, to fail even faster
        -pattern            To print the list of Regular Expression used by PlantUML
        -duration           To print the duration of complete diagrams processing
        -nbthread N         To use (N) threads for processing
        -nbthread auto      To use 4 threads for processing
        -timeout N          Processing timeout in (N) seconds. Defaults to 15 minutes (900 seconds).
        -author[s]          To print information about PlantUML authors
        -overwrite          To allow to overwrite read only files
        -printfonts         To print fonts available on your system
        -enablestats        To enable statistics computation
        -disablestats       To disable statistics computation (default)
        -htmlstats          To output general statistics in file plantuml-stats.html
        -xmlstats           To output general statistics in file plantuml-stats.xml
        -realtimestats      To generate statistics on the fly rather than at the end
        -loopstats          To continuously print statistics about usage
        -splash             To display a splash screen with some progress bar
        -progress           To display a textual progress bar in console
        -pipeimageindex N   To generate the Nth image with pipe option
        -stdlib             To print standart library info
        -extractstdlib      To extract PlantUML Standard Library into stdlib folder
        -filename &amp;#34;example.puml&amp;#34;    To override %filename% variable
        -preproc            To output preprocessor text of diagrams
        -cypher             To cypher texts of diagrams so that you can share them

If needed, you can setup the environment variable GRAPHVIZ_DOT.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;かなりの数のオプションがあるが，よく使うのは以下のものだろうか。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tpng&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PNG 形式で出力（既定値）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tsvg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SVG 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-teps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EPS 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tpdf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PDF 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tlatex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LaTeX/Tikz 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tlatex:nopreamble&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LaTeX/Tikz 形式で出力（プリアンブルなし）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-o[utput] &amp;quot;dir&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したフォルダに出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-charset xxx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字エンコーディングの指定&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-nometadata&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PNG/SVG 出力にメタデータを含めない&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p[ipe]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力をパイプで行う&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;みんな大好き-hello-world&#34;&gt;みんな大好き Hello World&lt;/h2&gt;

&lt;p&gt;では簡単なコードを処理してみよう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hello.puml&lt;/code&gt; という名前のファイルを用意して以下のように入力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; ではドキュメントの中にコードを埋め込むことを想定して &lt;code&gt;@startuml ... @enduml&lt;/code&gt; 内の記述のみが処理の対象となる。&lt;/p&gt;

&lt;p&gt;ではこのファイルを処理してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -charset UTF-8 hello.puml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;hello.puml&lt;/code&gt; と同じフォルダに &lt;code&gt;hello.png&lt;/code&gt; ファイルが出力される。
&lt;code&gt;hello.png&lt;/code&gt; ファイルの内容は以下の通り。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello.puml&#34;&gt;&lt;img src=&#34;./hello.png&#34; srcset=&#34;./hello.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;って，ちっちゃ！
じゃあ，解像度を調節してもう少し大きくしてみよう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;skinparam dpi 300
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これを処理するとこうなる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello2.puml&#34;&gt;&lt;img src=&#34;./hello2.png&#34; srcset=&#34;./hello2.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;おおっ。
おっきくなった。&lt;/p&gt;

&lt;h2 id=&#34;見た目の調整&#34;&gt;見た目の調整&lt;/h2&gt;

&lt;p&gt;上の例で示したように &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;skinparam&lt;/code&gt; コマンドを使って見た目の調整ができる。
では，もう少し調整を入れて UML っぽい図にしてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;skinparam shadowing false
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam backgroundColor transparent
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam dpi 300
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam arrow {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName Noto Serif JP
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 10
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontStyle plain
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Color Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Thickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam participant {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName Noto Sans
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 14
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontStyle plain
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BackgroundColor WhiteSmoke
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BorderThickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Padding 20
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam sequence {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBackgroundColor transparent
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderThickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  MessageAlignment center
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;hide footbox
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam BoxPadding 10
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;フォントの変更と線の色と太さを調節してみた。
またライフラインの間隔も調整している。
以上を処理するとこんな図になる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello3.puml&#34;&gt;&lt;img src=&#34;./hello3.png&#34; srcset=&#34;./hello3.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h2 id=&#34;見た目の指定を別ファイルに分離する&#34;&gt;見た目の指定を別ファイルに分離する&lt;/h2&gt;

&lt;p&gt;見た目の指定は別ファイルにして再利用したいところである。
そこで &lt;code&gt;hello.iuml&lt;/code&gt; ファイルを作成して &lt;code&gt;skinparam&lt;/code&gt; コマンドの内容をまるっと移動してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;skinparam shadowing false
skinparam backgroundColor transparent
skinparam dpi 300

skinparam arrow {
  FontColor Black
  FontName Noto Serif JP
  FontSize 10
  FontStyle plain
  Color Black
  Thickness 1
}
skinparam participant {
  FontColor Black
  FontName Noto Sans
  FontSize 14
  FontStyle plain
  BackgroundColor WhiteSmoke
  BorderColor Black
  BorderThickness 1
  Padding 20
}
skinparam sequence {
  LifeLineBackgroundColor transparent
  LifeLineBorderColor Black
  LifeLineBorderThickness 1
  MessageAlignment center
}
hide footbox
skinparam BoxPadding 10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このファイルをインクルードする形でコードを修正する。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;!include hello.iuml
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これを処理すると&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello4.puml&#34;&gt;&lt;img src=&#34;./hello4.png&#34; srcset=&#34;./hello4.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;先程と全く同じ結果が得られる。&lt;/p&gt;

&lt;p&gt;また最初の&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;に対して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -charset UTF-8 -config hello.iuml hello.puml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と &lt;code&gt;-config&lt;/code&gt; オプションで &lt;code&gt;hello.iuml&lt;/code&gt; ファイルを指定しても同じ結果が得られる。
これで再利用しやすくなっただろう。&lt;/p&gt;

&lt;h2 id=&#34;追記-plantuml-のコメント&#34;&gt;【追記】 &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のコメント&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の &lt;code&gt;@startuml ... @enduml&lt;/code&gt; 領域内にコメントを記述する際には以下の２通りの書き方がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&amp;#39; 一行コメント

/&amp;#39;
複数行に渡る
コメント
&amp;#39;/

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお，行の途中に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

skinparam dpi 300 &amp;#39;解像度の設定

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のような記述はできない（しかもエラーにもならない）のでご注意を。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/&#34;&gt;UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/skinparam&#34;&gt;Changing colors and fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/command-line&#34;&gt;call it from your script using command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yohshiy.blog.fc2.com/blog-entry-152.html&#34;&gt;PlantUML の使い方 | プログラマーズ雑記帳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>Java 11 がリリース</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2018/09/java-11-is-released/" />
		<id>tag:text.Baldanders.info,2018-09-27:/release/2018/09/java-11-is-released/</id>
		<published>2018-09-27T00:57:29+00:00</published>
		<updated>2019-03-20T13:59:05+00:00</updated>
		<summary>Oracle Java に関しては，予告どおり，有償の LTS (Long Term Support) としてのリリースとなる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;予定通り Java 11 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jdk.java.net/11/&#34;&gt;JDK 11 GA Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jdk.java.net/11/release-notes&#34;&gt;JDK 11 Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows 版だとこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java --version
openjdk 11 2018-09-25
OpenJDK Runtime Environment 18.9 (build 11+28)
OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oracle Java に関しては，予告どおり，有償の LTS (Long Term Support) としてのリリースとなる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.oracle.com/thejavatutorials/jdk-11-is-released&#34;&gt;JDK 11 Is Released! | Oracle The Java Tutorials Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/technetwork/java/javase/11-relnotes-5012447.html&#34;&gt;JDK 11 Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/technetwork/jp/java/eol-135779-ja.html&#34;&gt;Oracle Java SE サポート･ロードマップ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有償ではあるが2026年9月までの長期サポート&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:j11&#34;&gt;&lt;a href=&#34;#fn:j11&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; となるため， Java と共に滅びる勇気があるのであれば，そちらに乗り換えるのも手であろう。
なお Java 8 に関しては2019年1月までは無償でサポートされる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:j8p&#34;&gt;&lt;a href=&#34;#fn:j8p&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; が無償で LTS を行うのではないかという希望的観測もあったが，今のところそういう話は聞こえないようだ。
Red Hat など，ディストリビュータによっては独自の延長サポートもあるようなので調べてみるのもいいだろう。&lt;/p&gt;

&lt;p&gt;他には &lt;a href=&#34;https://adoptopenjdk.net/&#34; title=&#34;AdoptOpenJDK - Open source, prebuilt OpenJDK binaries&#34;&gt;AdoptOpenJDK&lt;/a&gt; あたりも良いらしい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:j8&#34;&gt;&lt;a href=&#34;#fn:j8&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;個人的な偏見で言わせてもらえば Java は1980年代から1990年代にかけて起こった UNIX 機メーカ間戦争の遺児みたいなもので，ライブラリやフレームワークを含めてバイナリ互換を目指すのであれば後方互換性は絶対条件である筈だったのだ。
Java 9 以降でそれを投げ捨ててしまった今， Java の優位性はないと声を大にして言いたい。
バイナリ互換を保証しなくていいのなら他に FOSS で優秀なプログラミング言語が幾らでもあるのだから。&lt;/p&gt;

&lt;p&gt;まぁ Java 8 互換バージョンを legacy Java としてできるだけ維持しつつ徐々に Java 縛りから脱却するのが中長期戦略として妥当だと思うのだけどねぇ。&lt;/p&gt;

&lt;h2 id=&#34;2018-10-21-追記-java-11-0-1-がリリース-セキュリティ-リリース&#34;&gt;【2018-10-21 追記】 Java 11.0.1 がリリース（セキュリティ・リリース）&lt;/h2&gt;

&lt;p&gt;2018年10月の定期アップデートに伴い脆弱性の報告が行われている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/20181017-jre.html&#34;&gt;Oracle Java の脆弱性対策について(CVE-2018-3183等)：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jpcert.or.jp/at/2018/at180042.html&#34;&gt;2018年10月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oracle Java だけでなく &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; も更新されているのでアップデートを行うこと。
以下は Windows 64bit 版の場合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java --version
openjdk 11.0.1 2018-10-16
OpenJDK Runtime Environment 18.9 (build 11.0.1+13)
OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13, mixed mode)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;アップデートは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/18/java_11oracle_jdkopenjdk.html&#34;&gt;Java 11正式版がリリース、本バージョンからOracle JDKのサポートは有償に。OpenJDKで無償の長期サポート提供は現時点で期待薄 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/18/microsoft_azurejavaltsmacwindowsokazul_systems.html&#34;&gt;Microsoft Azure上での実行目的ならJavaの長期サポート（LTS）を無料提供、MacやWindowsでの開発用途もOK。マイクロソフトとAzul Systemsが提携で － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gihyo.jp/news/report/2018/10/0501&#34;&gt;【GlassFish勉強会レポート】各JDKベンダの動向を知ってJava 11に備えよう：レポート｜gihyo.jp … 技術評論社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1nFGazvrCvHMZJgFstlbzoHjpAVwv5DEdnaBr_5pKuHo/edit#heading=h.p3qt2oh5eczi&#34;&gt;Java Is Still Free - Google Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1148283.html&#34;&gt;Oracle、「Java SE 11.0.1」「Java SE 8 Update 191」を公開 ～12件の脆弱性を修正 - 窓の杜&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1810/17/news074.html&#34;&gt;Oracle、Javaやデータベースなど301件の脆弱性を修正　速やかに適用を - ITmedia エンタープライズ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/02/release-cycle-of-java-environment/&#34;&gt;Java 環境のリリースとサポートに関する覚え書き&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:j11&#34;&gt;Extended Support の期限。 Sustaining Support であればバージョンに依らず無期限だがお高い。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:j11&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:j8p&#34;&gt;個人ユーザは2020年12月まで無償でサポートされる。ユーザ端末に JRE を入れさせる馬鹿な実装が今だに多いので仕方ないといったところだろうか。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:j8p&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:j8&#34;&gt;&lt;a href=&#34;https://adoptopenjdk.net/support.html&#34; title=&#34;Support | AdoptOpenJDK - Open source, prebuilt OpenJDK binaries&#34;&gt;Java 8 については少なくとも2023年9月まではサポートされる&lt;/a&gt;ようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:j8&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>Java 10.0.1 がリリース（セキュリティ・アップデート）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2018/04/java-10_0_1-is-released/" />
		<id>tag:text.Baldanders.info,2018-04-18:/release/2018/04/java-10_0_1-is-released/</id>
		<published>2018-04-18T12:50:09+00:00</published>
		<updated>2019-01-07T04:28:43+00:00</updated>
		<summary>脆弱性の深刻度が高いので早めのアップデートを推奨。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;Oracle Critical Patch Update が出た。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html&#34;&gt;Oracle Critical Patch Update - April 2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;対象となる製品は多岐にわたるが，今回は Java 10.0.1 について紹介する。&lt;/p&gt;

&lt;p&gt;Java の脆弱性については IPA および JPCERT/CC からもアラートが上がっている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/20180418-jre.html&#34;&gt;Oracle Java の脆弱性対策について(CVE-2018-2814等)：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2018/at180018.html&#34;&gt;2018年 4月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java 10 だけでなく Java 8 以下もアップデート対象になっているのでご注意を（Java 9 は2018年3月で無償サポートが終了している）。
脆弱性の内容によっては CVSSv3 の基本評価値が 7 から 8 程度（深刻度：重要）あるようなので早めのアップデートが推奨される。&lt;/p&gt;

&lt;p&gt;Oracle Java 10.0.1 の JDK は以下からダウンロードできる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html&#34;&gt;Java SE Development Kit 10- - Downloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; については以下から入手可能である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jdk.java.net/&#34;&gt;JDK Builds from Oracle&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jdk.java.net/10/&#34;&gt;JDK 10.0.1 GA Release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; 版を起動すると以下の表示になる（Windows の場合）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -version
openjdk version &amp;#34;10.0.1&amp;#34; 2018-04-17
OpenJDK Runtime Environment (build 10.0.1+10)
OpenJDK 64-Bit Server VM (build 10.0.1+10, mixed mode)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;quot;18.3” みたいなバージョン表記は完全になくなったんだね。
ふむむ。&lt;/p&gt;

&lt;p&gt;次回の Critical Patch Update は2018年7月の予定である（緊急リリース等がなければ）。
アップデートは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/02/release-cycle-of-java-environment/&#34;&gt;Java 環境のリリースとサポートに関する覚え書き&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- eof --&gt;
</content>
	</entry><entry>
		<title>Java 10 Released</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2018/03/java-10-released/" />
		<id>tag:text.Baldanders.info,2018-03-21:/release/2018/03/java-10-released/</id>
		<published>2018-03-21T06:33:51+00:00</published>
		<updated>2019-01-07T04:28:43+00:00</updated>
		<summary>時間はあまり残されていない。 まだ決めかねている方は早期の決断をオススメする。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;Java 10 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/corporate/pressrelease/Java-10-032018.html&#34;&gt;Oracle Java SE 10 Release Arrives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cr.openjdk.java.net/~iris/se/10/fr/java-se-10-fr-spec/&#34;&gt;Java SE 10 (18.3) ( JSR 383)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oracle Java の JDK は既に入手可能である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-4416644.html&#34;&gt;Java SE Development Kit 10- - Downloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; 版は以下から取得できるようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jdk.java.net/&#34;&gt;JDK Builds from Oracle&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jdk.java.net/10/&#34;&gt;JDK 10 GA Release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; 版を起動すると以下の表示になる（Windows の場合）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -version
openjdk version &amp;#34;10&amp;#34; 2018-03-20
OpenJDK Runtime Environment 18.3 (build 10+46)
OpenJDK 64-Bit Server VM 18.3 (build 10+46, mixed mode)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「&lt;a href=&#34;https://text.baldanders.info/remark/2018/02/release-cycle-of-java-environment/&#34;&gt;Java 環境のリリースとサポートに関する覚え書き&lt;/a&gt;」でも書いたが， Oracle が Java を無償サポートするのはこの Java 10 で最後である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:lcs1&#34;&gt;&lt;a href=&#34;#fn:lcs1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
2018年9月にリリースされる Java 11 を以って Java 10 の無償サポートは終了し， Java 11 以降は有償の LTS (Long Term Support) のみとなる。
なお Java 1.8 系（Java 8）の無償サポートも2019年1月で終了する（個人ユーザへの無償サポートは2020年12月まで）。
つまり，現時点では Java 環境に関する3つの選択肢がある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;2019年2月以降も Oracle にお金を払って Java 1.8 系を利用し続ける&lt;/li&gt;
&lt;li&gt;2018年9月から Oracle にお金を払って Java 11 の LTS を受ける&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; に乗り換え半年ごとの短期リリースに追従する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ちなみに Oracle Java の有償サポートはコア単位で数十万円の桁（ユーザ単位なら10万円ちょっと）なので中小企業以下では全く見合わないし，お役所が自身のサービスに Oracle Java を使うのは税金の無駄遣いであると断言する。
かといって &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; で半年ごとのリリースサイクルに追従するのはなかなか大変である（それで顧客からお金を取る手もあるけどね。 SIer さん，出番ですよ&lt;code&gt;w&lt;/code&gt;）。
Java 9 以降では，それ以前のバージョンとの後方互換性は失われている。
今後もそうならないとは限らない。
Java の特徴とされた &amp;quot;&lt;a href=&#34;https://en.wikipedia.org/wiki/Write_once,_run_anywhere&#34;&gt;Write once, run anywhere&lt;/a&gt;” はもはや存在しないのだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:wqda1&#34;&gt;&lt;a href=&#34;#fn:wqda1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;時間はあまり残されていない。
まだ決めかねている方は早期の決断をオススメする。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/18/java_10java_9.html&#34;&gt;Java 10が本日付で正式リリース。ローカル変数の型推論、ガベージコレクタが入れ替え可能、不揮発性メモリ対応など。Java 9は早くもサポート期間終了 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nowokay/items/d9bc4b3f715d17c2830d&#34;&gt;Java 10新機能まとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/18/eclipse_foundationjava_eejakarta_ee321.html&#34;&gt;Eclipse Foundationが、Java EEの新ブランドとなった「Jakarta EE」のロゴをコミュニティから募集中。締め切りは3月21日 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ykubota/items/582caa8621a5fc86d0a1&#34;&gt;OpenJDK入手先まとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/YujiSoftware/items/2c5a9117a577700ea540&#34;&gt;Java 10 で変わる Java のバージョン表記 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ukiuni@github/items/5bb523c31bb4b4f9a278&#34;&gt;2017年末において、Oracle JDK と OpenJDKに性能差はあるのか？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/02/release-cycle-of-java-environment/&#34;&gt;Java 環境のリリースとサポートに関する覚え書き&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2018/04/java-10_0_1-is-released/&#34;&gt;Java 10.0.1 がリリース（セキュリティ・アップデート）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:lcs1&#34;&gt;有償・無償というのはサポートに関するもので Java コンパイラおよび標準ライブラリは今のところ無償で入手可能である。 Oracle Java は &lt;a href=&#34;http://jdk.java.net/java-se-ri/10-bcl&#34;&gt;Oracle Binary Code License&lt;/a&gt;， &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; は &lt;a href=&#34;http://openjdk.java.net/legal/gplv2+ce.html&#34;&gt;GPLv2 w/ CE&lt;/a&gt; の下に提供されている。しかし Java のメンテナンスは事実上 Oracle が主導権を握っているため，今後 &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; がどこまでそれを肩代わりできるかがポイントとなる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:lcs1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:wqda1&#34;&gt;そういや昔， &amp;quot;Write once, debug anywhere” というネガティブキャンペーンがあったな（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:wqda1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>Java 環境のリリースとサポートに関する覚え書き</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2018/02/release-cycle-of-java-environment/" />
		<id>tag:text.Baldanders.info,2018-02-25:/remark/2018/02/release-cycle-of-java-environment/</id>
		<published>2018-02-25T10:31:42+00:00</published>
		<updated>2019-03-28T12:41:27+00:00</updated>
		<summary>特にこの記事では嘘や間違いがあればフィードバック等いただけると有り難い。随時加筆・修正する予定。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;先日 Java のリリースサイクルとサポートについて訊かれたのだが，1年半近く Java から離れていたこともあって，まったくノーチェックだった。
そこで，改めて Java 環境について調べてみることにした。&lt;/p&gt;

&lt;p&gt;この記事はその時の覚え書きとして残しておく。
なお，特にこの記事では嘘や間違いがあればフィードバック等いただけると有り難い。
Oracle の料金体系とかイマイチよく分かっていないのだ。&lt;/p&gt;

&lt;h2 id=&#34;java-9-は後方互換性がない&#34;&gt;Java 9 は後方互換性がない？&lt;/h2&gt;

&lt;p&gt;2017年9月にリリースされた Java 9 の最大の特徴は &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/&#34; title=&#34;Project Jigsaw&#34;&gt;Project Jigsaw&lt;/a&gt; の成果が取り込まれモジュール化に対応したことだが，他にも&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;一方でJava 9は日付や通貨のデフォルトフォーマットが変更され、いくつかの構文や演算子の変更や廃止が行われるなど、Java 8以前との互換性は保証されていません。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/17/java_9_release_project_jigsaw.html&#34;&gt;Java 9が正式リリース、Javaをモジュール化するProject Jigsawがついに実現。今後のJavaは6カ月ごとタイムベースのアップデートへ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ということで，これまで保証されていた後方互換性（backward compatibility）はなくなってしまった。
したがって Java 9 以降へのアップグレードについては十分な調査と場合によっては改修作業が必要になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/migrate/toc.htm&#34;&gt;Java Platform, Standard Edition Oracle JDK 9 Migration Guide, Release 9&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kasecato.github.io/migrating2Jdk9/&#34;&gt;The Hitchhiker&#39;s Migration Guide to JDK 9 新機能の影で消えた機能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yamadamn/items/bb813dccaa1dc5585c9b&#34;&gt;Oracle JDK 8にあってOpenJDKにない機能 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bufferings.hatenablog.com/entry/2018/11/11/114534&#34;&gt;Java 8でも安心。Dockerに対するCPU・メモリ対応。（2018年11月現在） - Mitsuyuki.Shiiba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;java-8-の無償サポートは2019年1月まで&#34;&gt;Java 8 の無償サポートは2019年1月まで&lt;/h3&gt;

&lt;p&gt;一方， Java 8 の無償サポート期間が2019年1月までとなっていて期限が迫っている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:java8-1&#34;&gt;&lt;a href=&#34;#fn:java8-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
有償サポートは Java SE Advanced の Named User Plus&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:nup1&#34;&gt;&lt;a href=&#34;#fn:nup1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; で2,460円/ユーザ， Processor License&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:pl1&#34;&gt;&lt;a href=&#34;#fn:pl1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; で132K円/コアとなる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.oracle.com/jp/corporate/pricing/e-pl101005-101005a-n-176288-ja.pdf&#34;&gt;Oracle Technology Global Price List &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1103999.html&#34;&gt;「Java SE 8」のパブリックアップデートが延長、新規提供は2019年1月まで継続される - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;java-のリリースサイクル&#34;&gt;Java のリリースサイクル&lt;/h2&gt;

&lt;p&gt;Java 9 以降は6ヶ月毎に機能の追加・変更を含むメジャー・バージョンアップが行われる。
また1月，4月，7月，10月にバグや脆弱性の修正を含むマイナー・バージョンアップが行われる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;月&lt;/th&gt;
&lt;th&gt;バージョンアップ・イベント&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1月&lt;/td&gt;
&lt;td&gt;マイナー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3月&lt;/td&gt;
&lt;td&gt;メジャー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4月&lt;/td&gt;
&lt;td&gt;マイナー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;6月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;7月&lt;/td&gt;
&lt;td&gt;マイナー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;8月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;9月&lt;/td&gt;
&lt;td&gt;メジャー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;10月&lt;/td&gt;
&lt;td&gt;マイナー・バージョンアップ&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;11月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;12月&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;マイナー・バージョンアップは基本的に現行メジャー・バージョンに対してのみ行われ，過去のバージョンについてはサポート外となる。
ただし LTS (Long Term Support) 対象のバージョンについては新バージョン・リリース後もサポートが行われる。
（LTS については次節で解説）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/17/java_9_release_project_jigsaw.html&#34;&gt;［速報］Java 9が正式リリース、Javaをモジュール化するProject Jigsawがついに実現。今後のJavaは6カ月ごとタイムベースのアップデートへ － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;oracle-java-と-openjdk&#34;&gt;Oracle Java と &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Java および JDK (Java Development Kit) の実装としては Oracle Java と &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; が双璧と言える。
また Oracle は JDK を GPL ライセンスでオープンソース化し &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; との統合を行っている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;商用ライセンスのOracle JDKには、無償版にはないJavaのプロファイラのFlight RecorderやMission Controlといったツールが提供されています。&lt;br&gt;
オラクルは現在、こうしたツールをオープンソースのJava実装であるOpenJDKにも含めるように作業を進めています。&lt;br&gt;
予定ではJava 11がリリースされる2018年9月にこの作業が完了し、商用ディストリビューションのOracle JDKとオープンソース実装のOpenJDKは機能、品質両面で同じものになる予定です。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/17/java_9_release_project_jigsaw.html&#34;&gt;来月にはJava 10が登場し、9月にはJava 11が登場予定。新しいリリースモデルを採用した今後のJava、入手方法やサポート期間はこう変わる&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;今のところ Oracle Java と &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; は協力関係にあり Java 9 以降の各バージョンのリリースを同時期に行うことになっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ocl1&#34;&gt;&lt;a href=&#34;#fn:ocl1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
リリース時期とサポート期間は以下の通り。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Oracle Java&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java 9&lt;/td&gt;
&lt;td&gt;2017年9月 - 2018年3月&lt;/td&gt;
&lt;td&gt;2017年9月 - 2018年3月&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Java 10&lt;/td&gt;
&lt;td&gt;2018年3月 - 2018年9月&lt;/td&gt;
&lt;td&gt;2018年3月 - 2018年9月&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Java 11&lt;/td&gt;
&lt;td&gt;2018年9月 - 2026年9月&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:s1&#34;&gt;&lt;a href=&#34;#fn:s1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;2018年9月 - 2019年3月&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Java 12&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2019年3月 - 2019年9月&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Java 13&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2019年9月 - 2020年3月&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Java 14&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2020年3月 - 2020年9月&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Java 15&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2020年9月 - 2021年3月&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Java 16&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2021年3月 - 2021年9月&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Java 17&lt;/td&gt;
&lt;td&gt;2021年9月 - 2029年9月&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:s1&#34;&gt;&lt;a href=&#34;#fn:s1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;2021年9月 - 2022年3月&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Oracle Java は Java 11 以降は有償の LTS のみとなる。
LTS 対象のバージョンは3年毎にリリースされるが，サポートは（メジャー・バージョンアップしなくてもお金さえ払えば）継続可能である。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; はオープンソース（&lt;a href=&#34;http://openjdk.java.net/legal/gplv2+ce.html&#34; title=&#34;OpenJDK: GPLv2 + Classpath Exception&#34;&gt;GPLv2 + Classpath Exception&lt;/a&gt;）なのでそれ自体にサポート料金は発生しないが（ディストリビュータ等が有償でサポートを請け負う場合は別），サポート期間が（次のメジャー・バージョンがリリースされるまでの）半年のみとなる。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;ただしOpenJDKがオープンソースプロジェクトの判断としてLTSを設定し、LTSに対するメンテナンスバージョンを継続してリリースする動きがあるとの指摘をいただきました。&lt;br&gt;
[...]&lt;br&gt;
これが実行されれば、Java 11、Java 17などLTSが設定されたバージョンのOpenJDKに対しては、数年間（スライドでは次のLTSのメジャーバージョンが登場するまでの3年間）、無償のOpenJDKでもメンテナンスパッチが提供されることになります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/17/java_9_release_project_jigsaw.html&#34;&gt;来月にはJava 10が登場し、9月にはJava 11が登場予定。新しいリリースモデルを採用した今後のJava、入手方法やサポート期間はこう変わる&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/jp/java/eol-135779-ja.html&#34;&gt;Oracle Java SE サポート･ロードマップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/jp/news/2017/11/javaone-opening&#34;&gt;OracleがJDKの全ての機能をオープンソース化し、Java EEの欠点に取り組む計画を発表した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/18/java_109java_11java.html&#34;&gt;来月にはJava 10が登場し、9月にはJava 11が登場予定。新しいリリースモデルを採用した今後のJava、入手方法やサポート期間はこう変わる（OpenJDKに関する追記あり） － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;java-関連のサービスやアプリケーション&#34;&gt;Java 関連のサービスやアプリケーション&lt;/h2&gt;

&lt;p&gt;Java 関連のサービスやアプリケーションについて以下にメモ書きしておく。
随時加筆・修正する予定。&lt;/p&gt;

&lt;h3 id=&#34;ide-integrated-development-environment&#34;&gt;IDE (Integrated Development Environment)&lt;/h3&gt;

&lt;p&gt;もっとも有名な IDE である &lt;a href=&#34;https://www.eclipse.org/&#34; title=&#34;Eclipse - The Eclipse Foundation open source community website.&#34;&gt;Eclipse&lt;/a&gt; については &lt;a href=&#34;http://www.eclipse.org/oxygen/&#34; title=&#34;Eclipse Oxygen&#34;&gt;Oxygen&lt;/a&gt;.1a で正式に Java 9 をサポートしているようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.eclipse.org/Configure_Eclipse_for_Java_9&#34;&gt;Configure Eclipse for Java 9 - Eclipsepedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaxenter.com/eclipse-oxygen-1a-java-9-junit-5-138113.html&#34;&gt;Eclipse Oxygen.1a is out — with support for Java 9 and JUnit 5 - JAXenter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/cypher256/items/e308d920dfaf15892baa&#34;&gt;Eclipse 4.7 Oxygen 新機能 30+ / Java 9 を試そう！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org/&#34; title=&#34;Eclipse - The Eclipse Foundation open source community website.&#34;&gt;Eclipse&lt;/a&gt; のプラグインが Java 9 に追従しているかどうかは調査する必要がある。
現在 &lt;a href=&#34;https://www.eclipse.org/&#34; title=&#34;Eclipse - The Eclipse Foundation open source community website.&#34;&gt;Eclipse&lt;/a&gt; のリリースサイクルは1年（毎年6月頃）であり，今後の Java のリリースサイクルに追従できない可能性もあるが，どうなっているのだろう。&lt;/p&gt;

&lt;p&gt;もうひとつの有名な IDE として &lt;a href=&#34;https://www.jetbrains.com/idea/&#34; title=&#34;IntelliJ IDEA: The Java IDE for Professional Developers by JetBrains&#34;&gt;IntelliJ IDEA&lt;/a&gt; があるが，こちらも Java 9 への対応はできているようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/idea/2017/09/java-9-and-intellij-idea/&#34;&gt;Java 9 and IntelliJ IDEA | IntelliJ IDEA Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;java-9-ready-な-foss&#34;&gt;Java 9 Ready な FOSS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.openjdk.java.net/display/quality/Quality+Outreach&#34; title=&#34;Quality Outreach - Quality - OpenJDK Wiki&#34;&gt;Quality Outreach&lt;/a&gt; より。
（自己申告らしいので他にもあるかもしれない）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Akka, Lightbend&lt;/li&gt;
&lt;li&gt;Apache Derby&lt;/li&gt;
&lt;li&gt;Apache Log4j&lt;/li&gt;
&lt;li&gt;Apache Lucene/SOLR&lt;/li&gt;
&lt;li&gt;Apache Maven&lt;/li&gt;
&lt;li&gt;Apache Kafka&lt;/li&gt;
&lt;li&gt;Apache PDFBox&lt;/li&gt;
&lt;li&gt;Apache POI&lt;/li&gt;
&lt;li&gt;BootstrapFX&lt;/li&gt;
&lt;li&gt;bt&lt;/li&gt;
&lt;li&gt;Byte Buddy&lt;/li&gt;
&lt;li&gt;CruiseControl&lt;/li&gt;
&lt;li&gt;Eclipse Collections&lt;/li&gt;
&lt;li&gt;EqualsVerifier&lt;/li&gt;
&lt;li&gt;GraphHopper&lt;/li&gt;
&lt;li&gt;HeapStats&lt;/li&gt;
&lt;li&gt;Hibernate&lt;/li&gt;
&lt;li&gt;Ikonli&lt;/li&gt;
&lt;li&gt;Jackson&lt;/li&gt;
&lt;li&gt;JaCoCo&lt;/li&gt;
&lt;li&gt;JITWatch&lt;/li&gt;
&lt;li&gt;jOOQ&lt;/li&gt;
&lt;li&gt;JOSM&lt;/li&gt;
&lt;li&gt;JSilhouette&lt;/li&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;li&gt;Lillith&lt;/li&gt;
&lt;li&gt;LWJGL&lt;/li&gt;
&lt;li&gt;Mockito&lt;/li&gt;
&lt;li&gt;Rapidoid&lt;/li&gt;
&lt;li&gt;RedHat Wildfly&lt;/li&gt;
&lt;li&gt;RxJava&lt;/li&gt;
&lt;li&gt;Spotbugs&lt;/li&gt;
&lt;li&gt;Spring Framework&lt;/li&gt;
&lt;li&gt;Woodstox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://tomcat.apache.org/&#34; title=&#34;Apache Tomcat® - Welcome!&#34;&gt;Apache Tomcat&lt;/a&gt; は Java 9 Ready じゃない？&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nulab-inc.com/ja/blog/nulab/java9-migration/&#34;&gt;ヌーラボのアカウント基盤を Java 9 にマイグレーションして起きた問題と解決法 | ヌーラボ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shiroma_yuki/items/8725a73493e3fe75155d&#34;&gt;Java9勘所集 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codezine.jp/article/detail/10524&#34;&gt;Java 9のモジュール機能「Project Jigsaw」の基本を紹介 (1/2)：CodeZine（コードジン）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/news/report/01/JavaOne2017/0002&#34;&gt;第2回　JDKの新しいリリースモデルに要注目 OpenJDKとOracle JDKの違いにも注意が必要［JavaOne 2017］：Java 9のその先へ～JavaOne Conference 2017レポート｜gihyo.jp … 技術評論社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/mao172/items/dbf41e7a246c3f87dcbe&#34;&gt;Javaエンジニアが Java 11 リリースに向けて備えておくべきこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/18/awsopenjdkamazon_correttoawsjavajava_82023java_112024lts.html&#34;&gt;AWSが独自のOpenJDK「Amazon Corretto」発表。AWS内部で使っていたJavaを外部提供へ。Java 8は2023年まで、Java 11は2024年まで無償でLTSを提供 － Publickey&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/awsopenjdkamazon_corretto_820236.html&#34;&gt;AWS版OpenJDKの「Amazon Corretto 8」正式版リリース。少なくとも2023年6月まで無償でアップデート提供 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/18/red_hatwindowsopenjdklts.html&#34;&gt;Red Hat、Windows版OpenJDKの長期商用サポート提供を発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/java_7java_8java_11java_12416.html&#34;&gt;Java 7、Java 8、Java 11、Java 12の新元号対応アップデートが4月16日に登場予定。オラクルが発表 － Publickey&lt;/a&gt; : &lt;code&gt;www&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:java8-1&#34;&gt;ただし「&lt;a href=&#34;http://www.oracle.com/technetwork/jp/java/eol-135779-ja.html&#34;&gt;個人で Java SE を利用する（non-corporate desktop use）場合、2020年12月末まで引き続きアップデートを受け取ることができます&lt;/a&gt;」。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:java8-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:nup1&#34;&gt;Named User Plus は利用するユーザ数に応じて料金がかかる。サポート料金とは別に12K円/ユーザ必要。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:nup1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:pl1&#34;&gt;Processor License は Web サービスなど不特定多数のユーザが利用する場合のライセンス。なお MPU 単位ではなくコア単位になるため，コア4つの MPU なら料金は4倍になる。サポート料金とは別に600K円/コア必要。単一コア単一プロセッサのみの構成ならユーザ数が50人を超えれば Processor License のほうが割安になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:pl1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ocl1&#34;&gt;ただし開発の主導権は Oracle 側が握ってる印象。 &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; では，メジャー・バージョンのアナウンスはあれど，不具合や脆弱性に関する周知プロセスが皆無なので，結局のところ Oracle の動向を見ないと何も分からない。これで Oracle が LTS に入ったらどうするつもりなのか...
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ocl1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:s1&#34;&gt;5年間の Premier Support および3年間の Extended Support を併せた期間。更に延長する場合は Sustaining Support の契約が必要。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:s1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>Java に関するブックマーク</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2018/01/java/" />
		<id>tag:text.Baldanders.info,2018-01-22:/remark/2018/01/java/</id>
		<published>2018-01-22T11:21:30+00:00</published>
		<updated>2019-01-26T09:45:22+00:00</updated>
		<summary>訳あって Java に関するブックマークを淡々と記述するページを作ってみた。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;訳あって Java に関するブックマークを淡々と記述するページを作ってみた。
Java の話はマジで仕事に絡むので（秘守義務に抵触しないよう）ブログでは慎重に避けていたのだが，ブックマーク程度ならいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;h3 id=&#34;maven&#34;&gt;&lt;a href=&#34;https://maven.apache.org/&#34; title=&#34;Maven – Welcome to Apache Maven&#34;&gt;Maven&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/daikuro/items/4d4d694ddb3cc620bee1&#34;&gt;Eclipse+Maven という便利な開発環境をインストールからプロジェクト作成まで - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/futo_creid/items/cfe730a4c35dd5f2be75&#34;&gt;Mavenで簡単ライブラリ導入！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stronger.hatenablog.com/entry/2016/11/19/003404&#34;&gt;EclipseでのMavenプロジェクトの作成、jarファイルの作り方 - k&#39;s diary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kuh96/items/a6a35f0cd0dd8ed82008&#34;&gt;Eclipse + Maven + Tomcat の開発環境を快速に!? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://progmemo.wp.xdomain.jp/archives/1094&#34;&gt;Mavenリポジトリにないライブラリをpom.xmlで指定する方法 - システム開発メモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tarosa0001/items/4254e83059c30d8c3ca3&#34;&gt;Mavenで依存関係などを含まないjarファイルを作る方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/k3286/items/1bc86cdbd58892d078a5&#34;&gt;pom.xmlではpackagingはjar指定なのに、failOnMissingWebXmlのエラーが表示され続けるときの対処 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/opengl-8080/items/f36c570032e1a7555ed2&#34;&gt;Maven2使い方メモ２（Tomcat で JAX-RS） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tarosa0001/items/4254e83059c30d8c3ca3&#34;&gt;Mavenで依存関係などを含まないjarファイルを作る方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nemuzuka.hatenablog.com/entry/20090109/1231486987&#34;&gt;Mavenでローカルに存在するjarをパッケージしてみる - nemuzukaの「明日から本気出す」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yoshi389111/items/34d1ceeff000d41ee44e&#34;&gt;&lt;a href=&#34;https://maven.apache.org/&#34; title=&#34;Maven – Welcome to Apache Maven&#34;&gt;Maven&lt;/a&gt; m2eでローカルリポジトリにライブラリをインストールする方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/tanamon/20080805/1217933963&#34;&gt;Maven2のpom.xmlの構成 - tanamonの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/taoyag/items/8b29c819e8430bca1c6b&#34;&gt;Eclipse + Maven(m2e)でライブラリが見つからない的なエラーが出たときの対応方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shuntaro_tamura/items/cefea651de7b6b5cd8b6&#34;&gt;Eclipse環境下でのエラー対処法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;その他&#34;&gt;その他&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.bitmeister.jp/?p=1486&#34;&gt;BASE64Encoderを使おうとしたら「rt.jarで制限されているためアクセスできません」と言われた件 – ビットログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://informationstudent.blog.fc2.com/blog-entry-20.html&#34;&gt;EclipseでJavaFXを使おうとするとアクセス制限とでる問題の解決方法 - (元)情報学科大学生のブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/lonerydeveloper/items/9f7c977c039ad4d24d30&#34;&gt;Java8での文字列連結 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/nowokay/20140409&#34;&gt;Java8時代の文字列連結まとめ - きしだのはてな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yoshi389111/items/67354ba33f9271ef2c68&#34;&gt;[Java] Stringの結合について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://brbranch.jp/blog/201510/java/javabeans/&#34;&gt;JavaBeansの使われ方がどうも納得いかないって話 | たそがれブランチ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ynxx/items/9ab3a51c04a4878c2dfa&#34;&gt;Tomcatをいれてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88-Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E3%83%9E%E3%83%AB%E3%83%81%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E7%B7%A8-%E7%B5%90%E5%9F%8E-%E6%B5%A9-ebook/dp/B00I8AT1BS?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B00I8AT1BS&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41uoMp5etSL._SL160_.jpg&#34; width=&#34;126&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88-Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E3%83%9E%E3%83%AB%E3%83%81%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E7%B7%A8-%E7%B5%90%E5%9F%8E-%E6%B5%A9-ebook/dp/B00I8AT1BS?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B00I8AT1BS&#34;&gt;増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2004-06-18 (Release 2014-03-12)&lt;/dd&gt;
    &lt;dd&gt;eBooks Kindle版&lt;/dd&gt;
    &lt;dd&gt;ASIN: B00I8AT1BS&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんによる通称「デザパタ本」の Kindle 版。マルチスレッド下のデザインパターン集。こちらも Java 以外でも応用できる優れもの。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-07&#34;&gt;2018-12-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://github.com/spiegel-im-spiegel/amazon-item&#34; &gt;amazon-item&lt;/a&gt; v0.2.0)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88-Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9-ebook/dp/B00I8ATHGW?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B00I8ATHGW&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41mh5r0NwLL._SL160_.jpg&#34; width=&#34;126&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88-Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9-ebook/dp/B00I8ATHGW?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B00I8ATHGW&#34;&gt;増補改訂版 Java言語で学ぶデザインパターン入門&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2004-06-18 (Release 2014-03-12)&lt;/dd&gt;
    &lt;dd&gt;eBooks Kindle版&lt;/dd&gt;
    &lt;dd&gt;ASIN: B00I8ATHGW&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんによる通称「デザパタ本」の Kindle 版。 Java 以外でも使える優れもの。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-05&#34;&gt;2016-01-05&lt;/abbr&gt; (powered by &lt;a href=&#34;https://github.com/spiegel-im-spiegel/amazon-item&#34; &gt;amazon-item&lt;/a&gt; v0.2.0)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9-ebook/dp/B00I8AT1EU?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B00I8AT1EU&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41GPVATQiZL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E7%B5%90%E5%9F%8E-%E6%B5%A9-ebook/dp/B00I8AT1EU?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=B00I8AT1EU&#34;&gt;Java言語で学ぶリファクタリング入門&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2007-01-26 (Release 2014-03-12)&lt;/dd&gt;
    &lt;dd&gt;eBooks Kindle版&lt;/dd&gt;
    &lt;dd&gt;ASIN: B00I8AT1EU&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-11&#34;&gt;2018-12-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://github.com/spiegel-im-spiegel/amazon-item&#34; &gt;amazon-item&lt;/a&gt; v0.2.0)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>ATOM エディタを使った作図（PlantUML 編）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2017/12/plantuml-with-atom/" />
		<id>tag:text.Baldanders.info,2017-12-17:/remark/2017/12/plantuml-with-atom/</id>
		<published>2017-12-17T12:56:39+00:00</published>
		<updated>2019-01-07T04:28:43+00:00</updated>
		<summary>おおっ。流石にクラス図は PlantUML の方がいいな。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34; title=&#34;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&#34;&gt;前回&lt;/a&gt;で &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの掃除も終わったので，以前から気になっていた「&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; を使った作図」について調べてみた。
ええ，分かってますとも。
&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34; title=&#34;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&#34;&gt;前回&lt;/a&gt;に引き続き「現実逃避」というやつです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/&#34;&gt;Open-source tool that uses simple textual descriptions to draw UML diagrams.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;atom-に-plantuml-関連パッケージを導入する&#34;&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 関連パッケージを導入する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体は UML (Unified Modeling Language; 統一モデリング言語) を記述するための DSL (Domain-Specific Language; ドメイン特化言語) と考えてよい（実際には UML 以外のものも記述可能）。
UML の構文（に相当するもの）は図形で表されるが，それをテキストで記述できるようにしたのが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; である。
「UML って何？」って方もおられるだろうが，それは&lt;a href=&#34;#uml&#34;&gt;後ほど説明&lt;/a&gt;する。&lt;/p&gt;

&lt;p&gt;直前に述べたように &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体はテキストで記述するが，最終的には図（diagram）に落とし込むため &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; と Java の実行環境が必要となる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jar0&#34;&gt;&lt;a href=&#34;#fn:jar0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
これらをあらかじめ導入しておくこと（導入方法については割愛する）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で UML を書く（描く）ために以下の2つのパッケージを導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jar1&#34;&gt;&lt;a href=&#34;#fn:jar1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; は（今のところ）ハイライト機能しかないようなので無くても構わないが， &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; は描画に必要なので必ず導入すること。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; を導入したら Settings を開いて “Charset” および “Graphviz Dot Executable” 各項目の設定をしておく。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./38219245875_o.png&#34;&gt;&lt;img src=&#34;./38219245875_o.png&#34; srcset=&#34;./38219245875_o.png 847w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;settings of plantuml-viewer package&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;./38219245875_o.png&#34;&gt;settings of plantuml-viewer package&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;“Graphviz Dot Executable” 項目には &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の dot コマンドへのフルパスをセットする。
“Charset” 項目については， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で書くんだから UTF-8 にしておけばいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;最初はやっぱり-hello-world-でしょ&#34;&gt;最初はやっぱり Hello World でしょ&lt;/h2&gt;

&lt;p&gt;動作確認を兼ねて何か書いてみる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; では &lt;code&gt;.pu&lt;/code&gt;, &lt;code&gt;.puml&lt;/code&gt;, &lt;code&gt;.plantuml&lt;/code&gt; を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 用の拡張子と認識するようなので，まずは &lt;code&gt;hello.puml&lt;/code&gt; ファイルを作って以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Bob-&amp;gt;Alice : hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; で表示する（&lt;code&gt;ctrl-alt-p&lt;/code&gt; でビュアーが開く）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello1.puml&#34;&gt;&lt;img src=&#34;hello1.svg&#34; srcset=&#34;hello1.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;おおっ。
できたできた。
表示されている図は PNG, SVG, EPS のいずれかの形式で保存できる（コンテキスト・メニューから “Save As ...” を選択する）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は &lt;code&gt;@startuml ... @enduml&lt;/code&gt; の間を記述領域と見なすようで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;ほげほげ

@startuml
  Bob-&amp;gt;Alice : hello
@enduml

ほえほえ&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いても，全く同じ図が出力される。
他形式のドキュメントに埋め込むことを想定してのことだろうが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:embd1&#34;&gt;&lt;a href=&#34;#fn:embd1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，今回は単純に図が出力できればいいので，以降の記述では &lt;code&gt;@startuml&lt;/code&gt; および &lt;code&gt;@enduml&lt;/code&gt; を省くことにする。&lt;/p&gt;

&lt;h2 id=&#34;見た目の調整&#34;&gt;見た目の調整&lt;/h2&gt;

&lt;p&gt;このままでもいいっちゃあいいのだが，もう少し見た目をどうにかしたい。
まずはモノクロ表示にしてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;skinparam monochrome true
&lt;/span&gt;Bob-&amp;gt;Alice : hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello2a.puml&#34;&gt;&lt;img src=&#34;hello2a.svg&#34; srcset=&#34;hello2a.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;という感じにモノクロになった。
調子に乗ってもう少し色々と弄ってみよう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;skinparam shadowing false
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam default{
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName &amp;#39;Noto Serif&amp;#39;, &amp;#39;Noto Serif JP&amp;#39;, serif
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 14
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam sequence {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontName &amp;#39;Noto Sans&amp;#39;, &amp;#39;Noto Sans JP&amp;#39;, sans-serif
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontColor black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontSize 10
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBackgroundColor White
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ActorBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ActorBackgroundColor White
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ParticipantBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ParticipantBackgroundColor LightGray
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  MessageAlign center
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;
actor ボブ
participant Alice

ボブ-&amp;gt;Alice : こんにちは
activate Alice

Alice--&amp;gt;ボブ : Hello
deactivate Alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;前半部分で線や背景色の色およびフォントについて指定し&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fnt1&#34;&gt;&lt;a href=&#34;#fn:fnt1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，後半部分で実際のシーケンスを記述している。
これを SVG に出力するとこんな感じになる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello2b.puml&#34;&gt;&lt;img src=&#34;hello2b.svg&#34; srcset=&#34;hello2b.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;見た目の記述に毎回あれだけの量を書くのはかったるいのでインクルードファイルとして別出ししてしまおう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;!include style.puml
&lt;/span&gt;
actor ボブ
participant Alice

ボブ-&amp;gt;Alice : こんにちは
activate Alice

Alice--&amp;gt;ボブ : Hello
deactivate Alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これでスッキリした。
&lt;a href=&#34;./style.puml&#34;&gt;&lt;code&gt;style.puml&lt;/code&gt;&lt;/a&gt; ファイルの中身はこんな感じで，記述をそのままコピっただけ。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;skinparam shadowing false
skinparam default{
  FontName &amp;#39;Noto Serif&amp;#39;, &amp;#39;Noto Serif JP&amp;#39;, serif
  FontColor black
  FontSize 14
}
skinparam sequence {
  ArrowColor Black
  ArrowFontName &amp;#39;Noto Sans&amp;#39;, &amp;#39;Noto Sans JP&amp;#39;, sans-serif
  ArrowFontColor black
  ArrowFontSize 10
  LifeLineBorderColor Black
  LifeLineBackgroundColor White
  ActorBorderColor Black
  ActorBackgroundColor White
  ParticipantBorderColor Black
  ParticipantBackgroundColor LightGray
  MessageAlign center
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;uml&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図可能な UML 図&lt;/h2&gt;

&lt;p&gt;現在 UML 2.0 では以下の図（Diagrams）が定義されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Diagrams

&lt;ul&gt;
&lt;li&gt;構造図（Structural Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/class-diagram&#34;&gt;クラス図（Class Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/object-diagram&#34;&gt;オブジェクト図（Object Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パッケージ図（Package Diagram）&lt;/li&gt;
&lt;li&gt;コンポジット構造図（Composite Structure Diagram）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/component-diagram&#34;&gt;コンポーネント図（Component Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/deployment-diagram&#34;&gt;配置図（Deployment Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;振る舞い図（Behavioral Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/use-case-diagram&#34;&gt;ユースケース図（Use Case Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図（Activity Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/state-diagram&#34;&gt;状態遷移図（State Machine Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図（Sequence Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コミュニケーション図（Communication Diagram）&lt;/li&gt;
&lt;li&gt;相互作用概要図（Interaction Overview Diagram）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/timing-diagram&#34;&gt;タイミング図（Timing Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;リンクがあるものが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 記述可能な図である。&lt;/p&gt;

&lt;p&gt;UML 各図の中の線や図形は全て「意味」が決められており，それらを組み合わせることでシステムの仕様や設計が表現できることを目指している。
名前が示す通りモデリングの設計手法と相性がいいため，オブジェクト指向設計においてよく使われる。&lt;/p&gt;

&lt;p&gt;実際には上で挙げた図を全て駆使するのではなく，システムの性格や規模に応じて幾つかの図を組み合わせて使うのが普通である。&lt;/p&gt;

&lt;p&gt;UML 図の中でもよく使われるシーケンス図とクラス図について &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; での記述を紹介しよう。
以前「&lt;a href=&#34;https://text.baldanders.info/remark/2017/09/sequence-diagram/&#34; title=&#34;そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ）&#34;&gt;そうだ，シーケンス図を描こう！&lt;/a&gt;」の中で， &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で書いたシーケンス図&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
sequenceDiagram
    カバ-&gt;&gt;+カバン: あなた，泳げまして？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: 空は飛べるんですの？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: じゃあ，足が速いとか？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;カバン: あなた，何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&gt;&gt;カバン: ううっ
    end
&lt;/div&gt;
&lt;figcaption&gt;カバとカバン&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図するとこんな感じだろうか（図のリンク先が &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; ソースコード）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;kaban.puml&#34;&gt;&lt;img src=&#34;kaban.svg&#34; srcset=&#34;kaban.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;カバとカバン&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;kaban.puml&#34;&gt;カバとカバン&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;じゃあ， &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で書いたクラス図&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
classDiagram
    friends&lt;|--serval
    friends&lt;|--raccoon
    friends&lt;|--fennec
    serval : +Waai()
    raccoon : +OmakaseNanoda()
    fennec : +Haiyo()
&lt;/div&gt;
&lt;figcaption&gt;フレンズ&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図するとこんな感じかな（コメントをちょろんと加えてみた）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;friends-class.puml&#34;&gt;&lt;img src=&#34;friends-class.svg&#34; srcset=&#34;friends-class.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;フレンズ&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;friends-class.puml&#34;&gt;フレンズ&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おおっ。
流石にクラス図は &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の方がいいな。
矢印は横向きにも出来るっぽい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;wiki.puml&#34;&gt;&lt;img src=&#34;wiki.svg&#34; srcset=&#34;wiki.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;今度からクラス図描くときは &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で描くようにしよう。&lt;/p&gt;

&lt;h2 id=&#34;やっぱり考えながら描く&#34;&gt;やっぱり考えながら描く&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;https://text.baldanders.info/remark/2017/09/sequence-diagram/&#34; title=&#34;そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ）&#34;&gt;そうだ，シーケンス図を描こう！&lt;/a&gt;」でも書いたんだけど，クラス図やシーケンス図といったものは試行錯誤しながら描いていくものなのよ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:case1&#34;&gt;&lt;a href=&#34;#fn:case1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
お客さんもマネージャもプログラマも UML 図を中心に議論を行っていく。
だから作成や修正が面倒なツールはダメなのだ。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は時々刻々と修正されることを前提にしたツールと言える。&lt;/p&gt;

&lt;p&gt;もうひとつ。&lt;/p&gt;

&lt;p&gt;要求定義を行っていくと「要求」やそれに伴う「仕様」が大きく変化することがある。
変化すること自体は（改善されてるってことだし）結構なのだが（予算規模が変わってアワアワする可能性はあるけど），あとからチームに参加する人たちは「結果」しか提示されないので「何故そのような「要求」に至ったか」が理解できないことが多い。
不完全な理解のまま作業をすすめると必ず何処かで不整合が起きる（つまり文脈（context）が大事ってこと）。&lt;/p&gt;

&lt;p&gt;だから議論の流れを後から追えるよう「履歴」をとっていく必要がある。
私が最近 UML 図に関して教わったのは&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;最初は不完全でも間違ってても構わない。まずは考えていることを図にぶちまけることが重要&lt;/li&gt;
&lt;li&gt;ただし，クラス図では多重度を記述すること（MUST）&lt;/li&gt;
&lt;li&gt;要求定義レベルの図と設計レベルの図は必要とされる詳細度や厳密度が異なる。最初から設計レベルの図を描こうとしないこと&lt;/li&gt;
&lt;li&gt;作成した図は（手書きのものも含めて）全て履歴として保管し，後から参照できるようにすること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;だったかな。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の利点は，テキストであるが故に修正・変更が容易で， git などのバージョン管理システムと組み合わせて履歴から差分情報を抽出しやすいことにある。
ぶっちゃけ，出力としての PNG や SVG 画像ファイルにはさしたる価値はなく， UML 用の DSL である &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の記述にこそ大きな価値があるということだ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/&#34;&gt;UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/skinparam&#34;&gt;Changing colors and fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yohshiy.blog.fc2.com/blog-entry-152.html&#34;&gt;PlantUML の使い方 | プログラマーズ雑記帳&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/ogomr/items/0b5c4de7f38fd1482a48&#34;&gt;PlantUML Cheat Sheet - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/nakahashi/items/3d88655f055ca6a2617c&#34;&gt;AtomとPlantUMLで爆速UMLモデリング - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/k_nakayama/items/77ca73753ebd049a66de&#34;&gt;Atom+PlantUMLで見た目もいい感じのシーケンス図を作成する - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:jar0&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の本体は &lt;code&gt;plantuml.jar&lt;/code&gt; で提供されている。このファイルを使って “&lt;code&gt;java -jar plantuml.jar -language&lt;/code&gt;” とコマンドを打つと &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で使われる全シンボルが表示される。シーケンス図以外は内部で DOT 言語に変換してから &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; を使って作図するようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jar0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:jar1&#34;&gt;Windows なら &lt;code&gt;%USERPROFILE%\.atom\packages\plantuml-viewer&lt;/code&gt; フォルダにインストールされるが，その中の &lt;code&gt;node_modules\node-plantuml&lt;/code&gt; フォルダに &lt;code&gt;plantuml.jar&lt;/code&gt; がある筈である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jar1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:embd1&#34;&gt;&lt;code&gt;@startuml&lt;/code&gt; の後ろに &lt;code&gt;images/hello.png&lt;/code&gt; などと指定すれば &lt;code&gt;plantuml.jar&lt;/code&gt; のほうで自動的に指定したパス名で画像ファイルを出力するらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:embd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fnt1&#34;&gt;フォント名については &lt;code&gt;font-family&lt;/code&gt; としてそのまま SVG に埋め込まれる。従って環境によって見え方が異なる筈である。どの環境でも同じような見え方にしたいなら PNG で保存するのが最も確実だろう。その場合は &lt;code&gt;xxxFontName&lt;/code&gt; に自マシンにインストールされている具体的なフォント名を指定する必要がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fnt1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:case1&#34;&gt;もちろん UML を CASE (Computer Aided Software Engineering) の入力手段として使う場合もある（つか UML ってそれを念頭に置いて開発されたものだからねぇ）。その場合は矛盾のない正確な記述が要求される。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:case1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>きみは Generics がとくいなフレンズなんだね，または「制約は構造を生む」</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2017/03/generics-vs-duck-typing/" />
		<id>tag:text.Baldanders.info,2017-03-11:/remark/2017/03/generics-vs-duck-typing/</id>
		<published>2017-03-11T05:55:06+00:00</published>
		<updated>2019-01-26T09:45:22+00:00</updated>
		<summary>これはどちらが正しいかという問題ではない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;公理によって与えられる暗黙の制約。この制約が集合の要素同士をしっかり結びつける。単純にしばるのではない、相互に秩序ある関係を結ぶ。言い換えれば――公理によって与えられる制約が構造を生み出しているのだ&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34;&gt;数学ガール／フェルマーの最終定理&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;今回は戯れ言モードなので「&lt;a href=&#34;https://text.baldanders.info/golang/&#34;&gt;プログラミング言語 Go&lt;/a&gt;」ではなくこちらで書いてみる。
コードは1行も書かないのでご安心を（笑）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20170309201506.htm&#34;&gt;Big Sky :: golang と Generics と私&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yuroyoro/items/6bf33f3cd4bb35469e0b&#34;&gt;golang と Generics と吾 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t2y/items/139c6a38173d7750ddfc&#34;&gt;Java の Generics にもの思い - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は出自が組込みエンジニアで（今は何でも屋），アセンブラや C/C++ から始まり Java などの制御に向いていると言われる言語を遍歴している（PHP を機器制御に使うとかいうこともやったが）。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;もその流れから興味を持っているが，あいにく私が住んでいる地方都市で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の出番はまだない。&lt;/p&gt;

&lt;p&gt;そういう経歴を持つ私から見て &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;が特異だと思ったのは以下の2点である。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;例外処理がない&lt;/li&gt;
&lt;li&gt;明示的なクラス定義構文がない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;私だけでなく C++ や Java などから来た人は大抵これで面食らうらしい。&lt;/p&gt;

&lt;p&gt;このうち1番目については「&lt;a href=&#34;https://text.baldanders.info/golang/&#34;&gt;プログラミング言語 Go&lt;/a&gt;」で&lt;a href=&#34;https://text.baldanders.info/golang/error-handling/&#34; title=&#34;エラー・ハンドリングについて&#34;&gt;記事にした&lt;/a&gt;ので割愛する。&lt;/p&gt;

&lt;p&gt;さて，2番目の「明示的なクラス定義構文がない」について。&lt;/p&gt;

&lt;p&gt;そもそも「クラス」とはなにか。
クラスとは以下の要素をひとまとめの「モノ（object）」として定義したものである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名前（必ず1個）&lt;/li&gt;
&lt;li&gt;属性（0個以上）&lt;/li&gt;
&lt;li&gt;操作（0個以上）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では明示的なクラス定義構文がない代わりに &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; と &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt;，およびメソッド・レシーバを組み合わせることでクラスの要素である名前，属性，操作を定義できる。&lt;/p&gt;

&lt;p&gt;そしてクラス定義で重要なのは「クラス間の関係」を定義することである。
クラス間の関係としては大雑把に以下の2つがある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;汎化・特化（継承 等）&lt;/li&gt;
&lt;li&gt;関連（集約，依存 等）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このうち2番目の関連は定義しやすい。
あるクラスの属性として別のクラスを定義するか，操作によって関連付けるかすればいいからだ。
問題は1番目の汎化・特化をどうやって定義するかである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は &lt;a href=&#34;https://golang.org/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; を使った「構造的部分型（structural subtyping）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dt&#34;&gt;&lt;a href=&#34;#fn:dt&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」を採用した。
構造的部分型とはクラスの振る舞いに注目してクラス間の汎化・特化関係を帰納法的に定義することである。
例を挙げると，それが「にゃーん」と鳴くのなら机器猫だろうが猫耳メイドだろうがサーバルキャットだろうが全部「猫」である，ということだ。&lt;/p&gt;

&lt;p&gt;クラス間の関係を定義するのは意外に大変である。
皆さんは「クラス設計」をどのように行っているだろうか。
まずは具体的なクラスを列挙していき，それらの関係を考察していくのではないだろうか（「ユーザ」や「管理者」を定義するのに 動物→人間→... と考えていく人はいないだろう）。
考察する過程で（クラスとクラスを繋ぐ）不可視のクラスを発見したり複数のクラスがひとつの概念で括れることに気づいたりすることもある。
つまり設計する過程では「具象→抽象」へと遡っていく。&lt;/p&gt;

&lt;p&gt;一方，実装する際には， C++ や Java では最初にテンプレート・クラスやインタフェース・クラスを作ってからインプリメント・クラスに落とし込む。&lt;/p&gt;

&lt;p&gt;たとえば，最初に「猫」という抽象クラスを作っておいて，それを継承する形で机器猫や猫耳メイドやサーバルキャットといった具体的なクラスを実装していく。
つまり「抽象→具象」へと作業していくわけだ。
そしてその過程において Generics&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:g1&#34;&gt;&lt;a href=&#34;#fn:g1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; は，ほとんど必須と言えるほど利用価値の高い機能と言える。&lt;/p&gt;

&lt;p&gt;これが &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;による実装ではひっくり返る。
たとえば，最初に机器猫や猫耳メイドやサーバルキャットといった具体的なクラスを作っていって「これってみんな『にゃーん』って鳴くじゃん」と気がつけば後付けで「猫」という抽象クラスを実装できるのである。&lt;/p&gt;

&lt;p&gt;どういうことかというと， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;においては設計と実装を同時進行で「具象→抽象」へと考察していくことができる，ということである。
このような思考過程においては Generics の有無はさして重要ではなくなる。
だって具象化されたオブジェクトから作り始めるのだから。&lt;/p&gt;

&lt;p&gt;「抽象→具象」へと実装する人にとっては Generics のない &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はとてもまだるこしく見えるかもしれない。
「なんで Generics がねーんだよ。いちいち全部書かせる気か。このポンコツ言語が！」となること請け合いである。
しかし一度構造的部分型に慣れた人にとっては抽象クラスから書かなければならない C++ や Java こそが面倒くさい。
何故なら，脳内では「具象→抽象」で思考していくのに実際に書くときには「考え終わらないと書けない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cd1&#34;&gt;&lt;a href=&#34;#fn:cd1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;」からである。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;なら「考えながら書ける」のに。&lt;/p&gt;

&lt;p&gt;これはどちらが正しいかという問題ではない。&lt;/p&gt;

&lt;p&gt;たとえばウォータフォール型&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:wf&#34;&gt;&lt;a href=&#34;#fn:wf&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; の開発スタイルでは実装を開始するまでに設計が終わることが（建前上は）保証されているため「抽象→具象」へと書き進めることが容易な言語が向いている。
一方，要件が絶えず変わったり実験的な製品の場合は設計が終わるまで待っていられないため &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のような言語が向いてるかもしれない。
まぁ設計と実装を同時にやろうとするとリファクタリングが頻繁に発生するのでコピペ・プログラマにはキツい作業になるかもしれないが。&lt;/p&gt;

&lt;p&gt;個人的には「プログラマは要件定義の段階から参加してコードを書くべき」と思ってるので，これを容易にするであろう &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;には注目している。&lt;/p&gt;

&lt;h2 id=&#34;2018-10-11-追記&#34;&gt;2018-10-11 追記&lt;/h2&gt;

&lt;p&gt;“&lt;a href=&#34;https://blog.golang.org/go2draft&#34;&gt;Go 2 Draft Designs&lt;/a&gt;” において将来バージョンにおける Generics 対応の言及がある。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/6wIP3rO6On8&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6wIP3rO6On8&#34;&gt;Go 2 Drafts Announcement - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/lufia/items/242d25e8c93d88e22a2e&#34;&gt;Go 2のgenerics/contract簡易まとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/generics-in-go-2/&#34;&gt;次期 Go 言語で導入される（かもしれない）総称型について予習する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;Why Everyone Hates Go · npf.io&#34;&gt;Why Everyone Hates Go · npf.io&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hirokidaichi/items/adccebb41f77eaa6132f&#34;&gt;[翻訳]なんでGoってみんなに嫌われてるの？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dave.cheney.net/2017/03/20/why-go&#34;&gt;Why Go? | Dave Cheney&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/methane/items/b627f20457873a504638&#34;&gt;[翻訳] Why Go? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsstudy.hatenablog.com/entry/2017/03/29/214931&#34;&gt;JavaScriptで継承を使わないプログラミングスタイル - JavaScript勉強会&lt;/a&gt; : オブジェクト指向設計について上手くまとめている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://methane.hatenablog.jp/entry/2017/09/19/Go_%E3%81%AB%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%82%AF%E3%82%B9%E3%81%8C%E3%81%AA%E3%81%8F%E3%81%A6%E3%82%82%E6%A7%8B%E3%82%8F%E3%81%AA%E3%81%84%E4%BA%BA%E3%81%9F%E3%81%A1%E3%81%AB%E5%AF%BE%E3%81%99&#34;&gt;Go にジェネリクスがなくても構わない人たちに対する批判について - methaneのブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9EGo-ADDISON-WESLEY-PROFESSIONAL-COMPUTING-Donovan/dp/4621300253?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=4621300253&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9EGo-ADDISON-WESLEY-PROFESSIONAL-COMPUTING-Donovan/dp/4621300253?SubscriptionId=AKIAJYVUJ3DMTLAECTHA&amp;tag=baldandersinf-22&amp;linkCode=xm2&amp;camp=2025&amp;creative=165953&amp;creativeASIN=4621300253&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
    &lt;dd&gt;柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;Book 単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;ASIN: 4621300253, EAN: 9784621300251&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-10-20&#34;&gt;2018-10-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://github.com/spiegel-im-spiegel/amazon-item&#34; &gt;amazon-item&lt;/a&gt; v0.2.0)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dt&#34;&gt;URL を見るとわかる通り最初は &lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_typing&#34; title=&#34;Duck typing - Wikipedia&#34;&gt;duck typing&lt;/a&gt; と表記していたが正しくは「構造的部分型」と言うらしい。 &lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_typing&#34; title=&#34;Duck typing - Wikipedia&#34;&gt;duck typing&lt;/a&gt; は主に動的型付け言語における型推論方式（のひとつ）で，クラス間の関係を記述するものではないようだ。ちなみに構造的部分型に対する言葉として「公称型（nominal subtyping）」というのがあって， C++ や Java におけるテンプレート・クラスやインタフェース・クラスを使った汎化・特化関係を指す場合に使うそうだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:g1&#34;&gt;知らない人のために Generics について簡単に説明しておくと，変数の型あるいはインスタンス（instance）に対するクラス（class）に関係なく単一の記述で変数ないしインスタンスを扱うことのできる仕組みである。汎化の一種と考えてもよい。いわゆる多態性（polymorphism）とは異なり，継承関係の異なるクラスでも一緒くたに扱うことが可能なかなり強力な仕組みである。 Generics は特にコンテナ（container; オブジェクトの集まりを表現するデータ構造，配列など）操作で威力を発揮する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:g1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cd1&#34;&gt;私はこれを「写経」と呼んでいる。はっきり言ってプログラミングでもっとも苦痛なのがコーディング＝写経だったりする。ちなみに一番好きなのはデバッグ。特に他人の書いたコードをデバッグするのは大好物。あれは極上の数理パズルである（締切さえなければね）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:wf&#34;&gt;「ウォータフォール型」とは滝の水が上から下へと落ちていくように 要件定義→設計→製造 と上流工程から下流工程へ順番にプロセスを進めていく開発スタイル。工程ごとにマイルストーンを設けてチェックを行い，各工程が完了しないと先に進めないようにする。まぁ実際にはスケジュールやらの関係でチェックを端折って先に進めてしまうことが多く，下流工程に入ってから致命的な欠陥に気づいて抜き差しならない状況に陥ることもしばしばある（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:wf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>Struts 2 の脆弱性について</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2017/03/struts-2-vulnerability/" />
		<id>tag:text.Baldanders.info,2017-03-09:/remark/2017/03/struts-2-vulnerability/</id>
		<published>2017-03-09T11:07:20+00:00</published>
		<updated>2019-01-07T04:28:43+00:00</updated>
		<summary>あちこちで騒がれてるみたいなので簡単に紹介する。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/spiegel/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;最近は Web や Java 絡みの仕事をしてないのでスルーしようかと思ったけど，あちこちで騒がれてるみたいなので簡単に紹介する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cwiki.apache.org/confluence/display/WW/S2-045&#34;&gt;S2-045 - Apache Struts 2 Documentation - Apache Software Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/ciadr/vul/20170308-struts.html&#34;&gt;更新：Apache Struts2 の脆弱性対策について(CVE-2017-5638)(S2-045)(S2-046)：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2017/at170009.html&#34;&gt;Apache Struts 2 の脆弱性 (S2-045) に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;脆弱性の内容&#34;&gt;脆弱性の内容&lt;/h2&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;Apache Struts 2 には、「Jakarta Multipart parser」のファイルアップロード処理に起因する、リモートで任意のコードが実行される脆弱性(CVE-2017-5638)が存在します。&lt;br&gt;
本脆弱性が悪用された場合、遠隔の第三者によって、サーバ上で任意のコードを実行される可能性があります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/ciadr/vul/20170308-struts.html&#34;&gt;Apache Struts2 の脆弱性対策について(CVE-2017-5638)(S2-045)&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;既に攻撃コード（Proof of Concept; PoC）が存在し実際に被害が出ているようだ。&lt;/p&gt;

&lt;h2 id=&#34;影響度-cvss&#34;&gt;影響度（CVSS）&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://jvn.jp/vu/JVNVU93610402/&#34;&gt;JVNVU#93610402: Apache Struts2 に任意のコードが実行可能な脆弱性&lt;/a&gt;」より&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CVSSv3 基本評価値 7.3 (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L)&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;必要な特権レベル（PR）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;ユーザ関与レベル（UI）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;スコープ（S）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;変更なし（U）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CVSS については&lt;a href=&#34;https://text.baldanders.info/remark/2015/cvss-v3-metrics-in-jvn/&#34;&gt;解説ページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;影響を受ける製品&#34;&gt;影響を受ける製品&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Apache Struts 2.3.5 から 2.3.31&lt;/li&gt;
&lt;li&gt;Apache Struts 2.5 から 2.5.10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Struts 1 に影響があるかどうかは不明（公開されている PoC では問題ないようだ？）。&lt;/p&gt;

&lt;h2 id=&#34;対策-回避策&#34;&gt;対策・回避策&lt;/h2&gt;

&lt;p&gt;対策としては以下のバージョンにアップデートする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apache Struts 2.3.32 以降&lt;/li&gt;
&lt;li&gt;Apache Struts 2.5.10.1 以降&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;回避策として以下も紹介されている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;ただちにアップグレードすることが困難である場合、「Content-Type」のバリデーションを行い、”multipart/form-data”と一致しないリクエストを破棄するサーブレットフィルターを実装することにより問題を回避することが可能です。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.softbanktech.jp/information/2017/20170308-01/&#34;&gt;CVE-2017-5638 - 脆弱性調査レポート&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;また、Apache Software Foundation は、パーサをデフォルトの Jakarta Multipart parser (JakartaMultiPartRequest) から変更することも対策として呼びかけています。速やかなアップデートが難しい場合は、本対策の適用をご検討ください。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2017/at170009.html&#34;&gt;Apache Struts 2 の脆弱性 (S2-045) に関する注意喚起&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;（追記）&lt;/strong&gt; 代替パーサもこの脆弱性の影響を受けることが判明している。
ただし &lt;a href=&#34;https://struts.apache.org/docs/s2-046.html&#34;&gt;S2-046&lt;/a&gt; で修正版が出ているようだ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.softbanktech.jp/information/2017/20170308-01/&#34;&gt;CVE-2017-5638 - 脆弱性調査レポート | ソフトバンク・テクノロジー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20170307/1488907259&#34;&gt;Struts2の脆弱性 CVE-2017-5638 (S2-045)についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35097780/&#34;&gt;Apache Struts 2に脆弱性報告--既に攻撃発生も - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tigerszk.hatenablog.com/entry/2017/03/08/063334&#34;&gt;Apache Struts2の脆弱性（CVE-2017-5638）を検証してみた - とある診断員の備忘録&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20170311/1489253880&#34;&gt;2017年3月に発生したApache Struts 2で稼働していたとみられるWebサイトへの不正アクセスについてまとめてみた - piyolog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/business/articles/1703/10/news133.html&#34;&gt;都税支払いサイトからカード情報6万件超が流出か - ITmedia ビジネスオンライン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takagi-hiromitsu.jp/diary/20170310.html&#34;&gt;高木浩光＠自宅の日記 - 「都税クレジットカードお支払サイト」流出事件の責任は誰がとるのか&lt;/a&gt; : 何気に最悪の事故に発展するかもしれない&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.okiden.co.jp/shared/pdf/news_release/2016/170315.pdf&#34;&gt;当社Webサイトへの不正アクセスによるコンテンツの改ざんおよびお客さまＥメールアドレス等の流出の可能性について &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/1051268.html&#34;&gt;「JINS」のオンラインショップに不正アクセス、「Apache Struts 2」の脆弱性を突かれる -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/gakuri/items/f70cf6c10fbb846335d5&#34;&gt;GMO社が被害を受けたStruts 2（CVE-2017-5638）問題で我々は何を学ぶべきか？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://itpro.nikkeibp.co.jp/atcl/column/14/346926/032100893/&#34;&gt;ニュース解説 - 猛威振るうStruts2脆弱性への攻撃、どうすれば防げたか：ITpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.scutum.jp/information/waf_tech_blog/2017/03/waf-blog-046.html&#34;&gt;Struts2が危険である理由 - WAF Tech Blog ｜ クラウド型 WAFサービス Scutum 【スキュータム】&lt;/a&gt; : 興味深い内容だが広告記事なので取り扱い注意&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35107320/&#34;&gt;Equifaxの情報流出、「Apache Struts」の脆弱性に起因--パッチ適用怠る？ - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
</feed>
