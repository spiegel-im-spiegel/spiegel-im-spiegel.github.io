<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Channel - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/channel/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/channel/index.xml" />
	<id>tag:text.Baldanders.info,2015-09-17T21:23:42+0900:/</id>
	<updated>2015-09-17T21:23:42+0900</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>素数探索アルゴリズムで遊ぶ - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/search-prime-numbers/" />
		<id>tag:text.Baldanders.info,2015-09-17T21:23:42+0900:/golang/search-prime-numbers/</id>
		<published>2015-09-17T21:23:42+0900</published>
		<updated>2015-09-18T15:06:00+0900</updated>
		<summary>これまた，みんな大好き素数探索アルゴリズム</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/047a9bd6436e6391ddd4&#34;&gt;はじめての Go 言語 (on Windows) その2 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は公式のドキュメントがとても充実していて（ただしほぼ英語だけど），私のような初学者に易しい環境といえる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/&#34;&gt;Documentation - The Go Programming Language&lt;/a&gt; : 言語仕様に関するドキュメントはこちら（&lt;a href=&#34;http://golang-jp.org/doc/&#34;&gt;一部日本語化&lt;/a&gt;されている）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/&#34;&gt;Packages - The Go Programming Language&lt;/a&gt; : 標準パッケージのドキュメントはこちら（&lt;a href=&#34;http://golang-jp.org/pkg/&#34;&gt;一部日本語化&lt;/a&gt;されている）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とはいえ，コードが実際にどのように機能するかは書いてみないと分からない部分もある。
なので，今回からは実際にコードを書きながら言語の癖のようなものを調べていくことにする。
仕事に使うなら厳密な評価が必要だけど，今のところはそんな予定もないし，まずはテキトーで（笑）&lt;/p&gt;

&lt;p&gt;早速，みんな大好き素数探索アルゴリズムで遊ぶ。&lt;/p&gt;

&lt;h2 id=&#34;素数の定義:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;素数の定義&lt;/h2&gt;

&lt;p&gt;一応，素数（prime number）の定義を以下に示す。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1 と自分自身以外に正の約数を持たない 1 より大きい自然数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ここで自然数（natural number）は「ペアノの公理」に従う（0 が自然数に含まれるかどうかについては色々あるみたいだが，素数の定義には影響がないので，ここでは無視する）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%9A%E3%82%A2%E3%83%8E%E3%81%AE%E5%85%AC%E7%90%86&#34;&gt;ペアノの公理 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taketo1024/items/2ab856d21bf9b9f30357&#34;&gt;Swiftで自然数を作ってみた（ペアノの公理） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみに結城浩さんの『数学ガール／ゲーデルの不完全性定理』にペアノの公理について分かりやすく解説した章がある。
お勧め。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1D6/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/415MuioBMJL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1D6/baldandersinf-22/&#34;&gt;数学ガール／ゲーデルの不完全性定理&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ株式会社 2014-02-14&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1FO/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1FO.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／乱択アルゴリズム&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1CM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／フェルマーの最終定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMK4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ガロア理論&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;結城浩さんの本はよく整備された遊歩道を散歩するような気楽さと安心感がある。だから「フェルマーの最終定理」とか「ゲーデルの不完全性定理」とかいった難解そうなテーマでも，迷うことなく，しかも一歩ずつ歩みを進めてゴールまで辿り着けるのかもしれない。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-16&#34;&gt;2015-09-16&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;alg1:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;素数探索アルゴリズム（その1）&lt;/h2&gt;

&lt;p&gt;素数の定義を愚直にコードで表すなら以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	max := 100
	fmt.Printf(&amp;quot;%v 以下の素数:&amp;quot;, max)

	start := time.Now() //Start
	for n := 2; n &amp;lt;= max; n++ {
		flag := true
		for m := 2; m &amp;lt; n; m++ {
			if (n % m) == 0 { // n が m で割り切れる → 素数ではない
				flag = false
				break
			}
		}
		if flag {
			fmt.Printf(&amp;quot; %v&amp;quot;, n)
		}
	}
	goal := time.Now()                     //Goal
	fmt.Printf(&amp;quot;\n%v 経過&amp;quot;, goal.Sub(start)) //経過時間を表示
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime01.go
100 以下の素数: 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97
5.0002ms 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この値を覚えておいてね。
検算に使うから。&lt;/p&gt;

&lt;h2 id=&#34;alg2:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;素数探索アルゴリズム（その2: エラトステネスの篩の変形）&lt;/h2&gt;

&lt;p&gt;もう少しだけ効率的に素数を探すアルゴリズムとして「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9&#34; title=&#34;エラトステネスの篩 - Wikipedia&#34;&gt;エラトステネスの篩&lt;/a&gt;」と呼ばれる方法がある。
ただし「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9&#34; title=&#34;エラトステネスの篩 - Wikipedia&#34;&gt;エラトステネスの篩&lt;/a&gt;」は決まった範囲を探索するものなので少々使いづらい。
そこで「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9&#34; title=&#34;エラトステネスの篩 - Wikipedia&#34;&gt;エラトステネスの篩&lt;/a&gt;」で使われている以下の素数の特徴を最初のアルゴリズムに加えてみる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;2 以上の全ての自然数はひとつ以上の素数の積で構成される（この素数の集合を素因数（prime factor）という）。したがってある数が素数か否かの判定は，その数より小さい素数のみで調べればよい&lt;/li&gt;
&lt;li&gt;更に，積の可換則（commutative property あるいは交換法則）により，自然数 $n$ が素数か否か判定する場合は $\sqrt{n}$ 以下の素数で調べればよい&lt;br /&gt;
（たとえば 35 の素因数は 5 と 7 だが， $5 \times 7 = 7 \times 5 = 35$ なので，直前の素数 31 まで回さずとも 3 および 5 ($\le \sqrt{35}$) まで調べれば判定できる）&lt;/li&gt;
&lt;li&gt;素数の定義から 2 が素数であることは自明なので（1 と 2 の間に自然数は存在しない）， 2 より大きい 2 の倍数（すなわち偶数）については判定しなくてもよく，対象となる自然数は 3 以上の奇数のみでいいことになる。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;では，この特徴を加えたコードを書いてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	primes := make([]int64, 1)     // 素数のリスト
	primes_f := make([]float64, 1) // 素数のリスト（浮動小数点へのキャスト）
	primes[0] = 2                  // 2 は素数
	primes_f[0] = 2.0              // 2 は素数（浮動小数点）
	var max int64 = 100

	start := time.Now() // Start
	var n int64 = 3
	for n = 3; n &amp;lt; max; n += 2 { // 3 から始まる奇数のみを探索
		flag := true
		f := float64(n)                    // 浮動小数点に cating
		rf := math.Sqrt(f)                 // n に対して √n をとる
		for i := 1; i &amp;lt; len(primes); i++ { // 2 より大きい既知の素数でチェックする
			if primes_f[i] &amp;gt; rf { // n に対して √n 以下の素数まで探索すればよい
				break
			} else if (n % primes[i]) == 0 { // n が既知の素数で割り切れる → 素数ではない
				flag = false
				break
			}
		}
		if flag {
			primes = append(primes, n)     // 素数を追加
			primes_f = append(primes_f, f) // 素数を追加（浮動小数点）
		}
	}
	goal := time.Now() // Goal
	fmt.Printf(&amp;quot;%v 以下の素数: %v\n&amp;quot;, max, primes)
	fmt.Printf(&amp;quot;%v 経過&amp;quot;, goal.Sub(start)) // 経過時間を表示
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime02.go
100 以下の素数: [2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97]
0 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;slice-と-make-と-append:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;slice と make() と append()&lt;/h3&gt;

&lt;p&gt;コード中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;primes := make([]int64, 1)     // 素数のリスト
primes_f := make([]float64, 1) // 素数のリスト（浮動小数点へのキャスト）
primes[0] = 2                  // 2 は素数
primes_f[0] = 2.0              // 2 は素数（浮動小数点）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の変数 &lt;code&gt;primes&lt;/code&gt; および &lt;code&gt;primes_f&lt;/code&gt; は &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; と呼ばれる可変長の配列型である。
更に組み込み関数 &lt;code&gt;make()&lt;/code&gt; は &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; のみ使用可能なメモリ割り当て関数である。
ちなみに &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; 以外は &lt;code&gt;new()&lt;/code&gt; を使う。
&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; のみ特別なのは，これらの型は初期値と内部状態を持つためである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; に要素を追加する場合は &lt;code&gt;append()&lt;/code&gt; 関数を使えばいいのだが，これが結構クセがある。
&lt;code&gt;append()&lt;/code&gt; 関数では &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; の容量（capacity）がいっぱいになると新たにメモリを確保してオリジナルの内容をコピーする。
つまりポインタが変わってしまうのだ。（メモリの割り当て方のパターンにも注目）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	a := make([]int, 0)                                         // 空の配列を用意
	fmt.Printf(&amp;quot;Slice(%02d) : %p : %v (%v)\n&amp;quot;, 0, a, a, cap(a)) // 配列の表示（初期状態）
	for num := 1; num &amp;lt;= 17; num++ {
		a = append(a, num)                                            //配列要素の追加
		fmt.Printf(&amp;quot;Slice(%02d) : %p : %v (%v)\n&amp;quot;, num, a, a, cap(a)) //配列の表示
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run slice.go
Slice(00) : 0x5cebb8 : [] (0)
Slice(01) : 0xc082002340 : [1] (1)
Slice(02) : 0xc082002380 : [1 2] (2)
Slice(03) : 0xc082006740 : [1 2 3] (4)
Slice(04) : 0xc082006740 : [1 2 3 4] (4)
Slice(05) : 0xc0820083c0 : [1 2 3 4 5] (8)
Slice(06) : 0xc0820083c0 : [1 2 3 4 5 6] (8)
Slice(07) : 0xc0820083c0 : [1 2 3 4 5 6 7] (8)
Slice(08) : 0xc0820083c0 : [1 2 3 4 5 6 7 8] (8)
Slice(09) : 0xc082050000 : [1 2 3 4 5 6 7 8 9] (16)
Slice(10) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10] (16)
Slice(11) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11] (16)
Slice(12) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12] (16)
Slice(13) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13] (16)
Slice(14) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14] (16)
Slice(15) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15] (16)
Slice(16) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16] (16)
Slice(17) : 0xc082056000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17] (32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;容量が変化するごとにポインタ値も変化していることがお分かりだろうか。&lt;/p&gt;

&lt;p&gt;ちなみに Go コンパイラは，返値を無視するコーディングに対してエラーを吐く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;a = append(a, num)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の部分を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;append(a, num)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime02.go
# command-line-arguments
.\slice.go:9: append(a, num) evaluated but not used
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とエラーになる。&lt;/p&gt;

&lt;p&gt;また，容量はあらかじめ指定できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;a := make([]int, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の部分を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;a := make([]int, 0, 32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run slice.go
Slice(00) : 0xc082050000 : [] (32)
Slice(01) : 0xc082050000 : [1] (32)
Slice(02) : 0xc082050000 : [1 2] (32)
Slice(03) : 0xc082050000 : [1 2 3] (32)
Slice(04) : 0xc082050000 : [1 2 3 4] (32)
Slice(05) : 0xc082050000 : [1 2 3 4 5] (32)
Slice(06) : 0xc082050000 : [1 2 3 4 5 6] (32)
Slice(07) : 0xc082050000 : [1 2 3 4 5 6 7] (32)
Slice(08) : 0xc082050000 : [1 2 3 4 5 6 7 8] (32)
Slice(09) : 0xc082050000 : [1 2 3 4 5 6 7 8 9] (32)
Slice(10) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10] (32)
Slice(11) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11] (32)
Slice(12) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12] (32)
Slice(13) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13] (32)
Slice(14) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14] (32)
Slice(15) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15] (32)
Slice(16) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16] (32)
Slice(17) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17] (32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
メモリ割り当ては意外に高コストの操作なので， &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; を扱う場合はこの辺がチューニング・ポイントになるだろう。&lt;/p&gt;

&lt;h2 id=&#34;100万個目の素数:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;100万個目の素数&lt;/h2&gt;

&lt;p&gt;上のコードを少し修正して $x$ 個目の素数を調べることにしよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	//コマンドライン引数の解析
	algno := flag.Int(&amp;quot;alg&amp;quot;, 0, &amp;quot;0: Basic algorithm , 1: Sieve of Eratosthenes&amp;quot;)
	flag.Parse()
	args := flag.Args()
	if *algno &amp;lt; 0 || *algno &amp;gt; 1 {
		fmt.Fprintln(os.Stderr, os.ErrInvalid)
		return
	}
	if len(args) != 1 {
		fmt.Fprintln(os.Stderr, os.ErrInvalid)
		return
	}
	max, err := strconv.ParseInt(args[0], 10, 64)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	if max &amp;lt;= 0 {
		max = 1
	}

	//素数探索
	prime := int64(0)
	start := time.Now() // Start
	switch *algno {
	case 1:
		prime = LastPrimeE(max)
	default:
		prime = LastPrimeB(max)
	}
	goal := time.Now()                       // Goal
	fmt.Printf(&amp;quot;%v 個目の素数: %v\n&amp;quot;, max, prime) // max 個目の素数
	fmt.Printf(&amp;quot;%v 経過\n&amp;quot;, goal.Sub(start))   // 経過時間を表示
}

func LastPrimeB(max int64) int64 {
	count := int64(0)

	for n := int64(2); ; n++ {
		flag := true
		for m := int64(2); m &amp;lt; n; m++ {
			if (n % m) == 0 { // n が m で割り切れる → 素数ではない
				flag = false
				break
			}
		}
		if flag {
			count++
			if count &amp;gt;= max {
				return n
			}
		}
	}
}

func LastPrimeE(max int64) int64 {
	if max &amp;lt;= 1 {
		return 2
	}
	primes := make([]int64, 1, max)     // 素数のリスト
	primes_f := make([]float64, 1, max) // 素数のリスト（浮動小数点へのキャスト）
	primes[0] = 2                       // 2 は素数
	primes_f[0] = 2.0                   // 2 は素数（浮動小数点）

	count := int64(1)
	for n := int64(3); ; n += 2 { // 3 から始まる奇数のみを探索
		flag := true
		f := float64(n)                    // 浮動小数点に cating
		rf := math.Sqrt(f)                 // n に対して √n をとる
		for i := 1; i &amp;lt; len(primes); i++ { // 2 より大きい既知の素数でチェックする
			if primes_f[i] &amp;gt; rf { // n に対して √n 以下の素数まで探索すればよい
				break
			} else if (n % primes[i]) == 0 { // n が既知の素数で割り切れる → 素数ではない
				flag = false
				break
			}
		}
		if flag {
			count++
			if count &amp;gt;= max {
				return n
			}
			primes = append(primes, n)     // 素数を追加
			primes_f = append(primes_f, f) // 素数を追加（浮動小数点）
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今後のためにコマンドライン解析の部分と実際の素数探索アルゴリズムを分けている。
まず検算。
25個目の素数が 97 なら OK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime03.go -alg=0 25
25 個目の素数: 97
0 経過

C:&amp;gt;go run prime03.go -alg=1 25
25 個目の素数: 97
0 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では実際に動かしてみよう。
まずは「&lt;a href=&#34;#alg1:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;その1&lt;/a&gt;」のアルゴリズムから。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime03.go -alg=0 100
100 個目の素数: 541
0 経過

C:&amp;gt;go run prime03.go -alg=0 10000
10000 個目の素数: 104729
4.4072521s 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;100万個目の素数は有意の時間で見つかりませんでした orz&lt;/p&gt;

&lt;p&gt;次に「&lt;a href=&#34;#alg2:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;その2&lt;/a&gt;」のアルゴリズムで。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime03.go --alg=1 100
100 個目の素数: 541
0 経過

C:&amp;gt;go run prime03.go --alg=1 10000
10000 個目の素数: 104729
7.0004ms 経過

C:&amp;gt;go run prime03.go --alg=1 1000000

1000000 個目の素数: 15485863
4.9042805s 経過

C:&amp;gt;go run prime03.go --alg=1 10000000
10000000 個目の素数: 179424673
2m13.8686568s 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というわけで，100万個目の素数探索に5秒弱，1000万個目の素数探索に2分ちょっとかかってしまった。
まぁ，でも，こんなもんか。&lt;/p&gt;

&lt;h2 id=&#34;alg3:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;素数探索アルゴリズム（その3: エラトステネスの篩を並行処理で）&lt;/h2&gt;

&lt;p&gt;これまでのアルゴリズムは基本的に2重のループで値を順番に付き合わせているだけだったが，この部分を並行処理で行えば速いんじゃね？ と思うよね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で並行処理を行うには &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt;（「ゴルーチン」と読むらしい）を使う。
また &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt; の worker 間ではメモリ共有ができないため， &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; を使い message-passing 方式&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ba5a2fe9dba0ce0dbb53ecd3120fd65e:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ba5a2fe9dba0ce0dbb53ecd3120fd65e:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;で通信を行う。&lt;/p&gt;

&lt;p&gt;で，実際に &lt;a href=&#34;http://golang.jp/go_tutorial#index12&#34;&gt;チュートリアルには並行処理を使った素数探索アルゴリズムが紹介&lt;/a&gt;されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ba5a2fe9dba0ce0dbb53ecd3120fd65e:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ba5a2fe9dba0ce0dbb53ecd3120fd65e:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
いくつかサイトを巡ったが，このやり方がもっとも素直なようだ（後述するが速いわけではない）。
そこで，このコードを流用させてもらうことにした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func LastPrimeE2(max int64) int64 {
	if max &amp;lt;= 1 {
		return 2 // 最初の素数は2
	}

	count := int64(1)
	primes := sieve()
	for {
		prime := &amp;lt;-primes
		count++
		if count &amp;gt;= max {
			return prime
		}
	}
}

// 素数候補の数を生成する
func generate() chan int64 {
	ch := make(chan int64)
	go func() {
		for n := int64(3); ; n += 2 { // 3 以降の奇数を送信（2 以外の偶数は素数ではない）
			ch &amp;lt;- n
		}
	}()
	return ch
}

// 素数 &#39;prime&#39; に対するフィルタ
// &#39;prime&#39; で割り切れない値のみ通過可能
func filter(in chan int64, prime int64) chan int64 {
	out := make(chan int64)
	go func() {
		for {
			n := &amp;lt;-in
			if (n % prime) != 0 {
				out &amp;lt;- n
			}
		}
	}()
	return out
}

// エラトステネスの篩
func sieve() chan int64 {
	out := make(chan int64)
	go func() {
		ch := generate()
		for {
			prime := &amp;lt;-ch
			out &amp;lt;- prime
			ch = filter(ch, prime)
		}
	}()
	return out
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そうそう。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では関数は全て関数閉包（closure）として機能する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 関数も少しいじって &lt;code&gt;-alg=2&lt;/code&gt; でこのアルゴリズムを起動するようにする。
まずは検算ね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime04.go -alg=2 25
25 個目の素数: 97
0 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;じゃあ，早速うごかしてみよっか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime04.go -alg=2 100
100 個目の素数: 541
2.0002ms 経過

C:&amp;gt;go run prime04.go -alg=2 10000
10000 個目の素数: 104729
4.2002402s 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;100万個目の素数は有意の時間で見つかりませんでした orz&lt;/p&gt;

&lt;p&gt;まぁアルゴリズム的に「篩」っぽくはあるんだけどね。&lt;/p&gt;

&lt;p&gt;ある値が素数であると判定されるためには，その値より小さい全ての素数フィルタを通過しなければならない（つまり「&lt;a href=&#34;#alg2:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;その2&lt;/a&gt;」で紹介した特徴の2番目を全く生かせていない）。
これが致命的。
しかもこのフィルタ処理 &lt;code&gt;filter()&lt;/code&gt; は素数フィルタの生成も兼ねていて，前の素数フィルタの出力を次の素数フィルタの入力として連結しているのでスキップできない。&lt;/p&gt;

&lt;p&gt;かなりインチキではあるけど，捜索範囲を「100万個目」までと限定し，「100万個目」の素数が 15,485,863 であると分かっているならもう少し速くできるかもしれない。
つまり以下のように改良する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func LastPrimeE2(max int64) int64 {
	if max &amp;lt;= 1 {
		return 2 // 最初の素数は2
	}

	count := int64(1)
	primes := sieve()
	for prime := range primes {
		count++
		if count &amp;gt;= max {
			return prime
		}
	}
	return count
}

// 素数候補の数を生成する
// ただし上限を 15485863 とする
func generate() chan int64 {
	ch := make(chan int64)
	go func() {
		for n := int64(3); n &amp;lt;= 15485863; n += 2 { // 3 以降の奇数を送信（2 以外の偶数は素数ではない）
			ch &amp;lt;- n
		}
		close(ch)
	}()
	return ch
}

// 素数 &#39;prime&#39; に対するフィルタ
func filter(in chan int64, prime int64) chan int64 {
	out := make(chan int64)
	go func() {
		for n := range in {
			if (n % prime) != 0 {
				out &amp;lt;- n
			}
		}
		close(out)
	}()
	return out
}

// エラトステネスの篩
func sieve() chan int64 {
	out := make(chan int64)
	go func() {
		ch := generate()
		fflag := true
		for {
			prime, ok := &amp;lt;-ch
			if !ok {
				break
			}
			out &amp;lt;- prime
			if fflag &amp;amp;&amp;amp; prime*prime &amp;lt;= 15485863 {
				ch = filter(ch, prime)
			} else { // 素数が最大値の平方根（√15485863）より大きい場合はフィルタを作らず無条件に通す
				fflag = false
			}
		}
		close(out)
	}()
	return out
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで実行してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime05.go -alg=2 100
100 個目の素数: 541
2.0001ms 経過

C:&amp;gt;go run prime05.go -alg=2 10000
10000 個目の素数: 104729
378.0216ms 経過

C:&amp;gt;go run prime05.go -alg=2 1000000
1000000 個目の素数: 15485863
39.4492564s 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おお。
ようやく有意の時間で探索できた。
それでも「&lt;a href=&#34;#alg2:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;その2&lt;/a&gt;」の10倍以上かかるけど。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; への送信データが有限個の場合は最後に &lt;code&gt;close(ch)&lt;/code&gt; でクローズする。
一方 &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; からの受信側は &lt;a href=&#34;http://golang.org/ref/spec#For_statements&#34;&gt;for range 構文&lt;/a&gt;を使うことで安全に扱うことができる。
ただし上述の &lt;code&gt;sieve()&lt;/code&gt; 関数では 変数 &lt;code&gt;ch&lt;/code&gt; が新しい素数フィルタの出力に上書きされていくので &lt;a href=&#34;http://golang.org/ref/spec#For_statements&#34;&gt;for range 構文&lt;/a&gt;は使えない。
その代わり以下の記述で &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; を安全に扱うことができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;prime, ok := &amp;lt;-ch
if !ok {
    break // channel が閉じられた
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はここまで。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/20130414/1365960707&#34;&gt;Go の並行処理 - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sudix/items/f95ef0e5bbd0cd3d4378&#34;&gt;(翻訳)Goでのパイプラインとキャンセル - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/eca21ed935115e5da2e8&#34;&gt;Go: 計算なしのFizzBuzz - Qiita&lt;/a&gt; : &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; の説明するのにいいかも&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yuki2006/items/3f90e53ce74c6cff1608&#34;&gt;Goのchannelの送受信用の型について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hondata/items/64776c79063e93bea9ed&#34;&gt;Go言語のChannelは送信時にもブロックする - Qiita&lt;/a&gt; : 意外と見落とす channel 送信時のブロック&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/da3ca2db58734a966cac&#34;&gt;Go - select loop の小ネタ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sudix/items/67d4cad08fe88dcb9a6d&#34;&gt;Goのforとgoroutineでやりがちなミスとたった一つの冴えたgo vetと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tutuming/items/c0ffdd28001ee0e9320d&#34;&gt;golang - x/net/context の実装パターン - Qiita&lt;/a&gt; : &lt;a href=&#34;https://godoc.org/golang.org/x/net/context&#34;&gt;golang.org/x/net/context&lt;/a&gt; を使って並行処理を細かく制御&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/07/30/golang-parallel-by-cpu/&#34;&gt;Go言語でCPU数に応じて並列処理数を制限する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ymko/items/554e3630fefdc29393a8&#34;&gt;やはり俺のgolangがCPUを一つしか使わないのはまちがっている。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ba5a2fe9dba0ce0dbb53ecd3120fd65e:1&#34;&gt;message-passing 方式は Erlang などで一躍有名になったやつ。ただし Erlang ではプロセス間通信の手段として  message-passing を使う。これは Actor と呼ばれている。 &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt; は「並行処理」であり「並列処理」ではない。また，いわゆる thread とも異なる。&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で並列処理を行うなら「&lt;a href=&#34;http://deeeet.com/writing/2014/07/30/golang-parallel-by-cpu/&#34;&gt;Go言語でCPU数に応じて並列処理数を制限する&lt;/a&gt;」あたりが参考になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ba5a2fe9dba0ce0dbb53ecd3120fd65e:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ba5a2fe9dba0ce0dbb53ecd3120fd65e:2&#34;&gt;ただし現在の&lt;a href=&#34;https://golang.org/doc/&#34;&gt;公式ドキュメント&lt;/a&gt;には存在しない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ba5a2fe9dba0ce0dbb53ecd3120fd65e:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
