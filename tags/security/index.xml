<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of security - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/security/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/security/index.xml" />
	<id>tag:text.Baldanders.info,2020-11-14:/tags</id>
	<updated>2020-11-14T12:24:32+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>Go 1.15.5 のリリース【セキュリティ・アップデート】</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/11/go-1_15_5-is-released/" />
		<id>tag:text.Baldanders.info,2020-11-14:/release/2020/11/go-1_15_5-is-released/</id>
		<published>2020-11-14T03:24:32+00:00</published>
		<updated>2020-11-14T03:24:49+00:00</updated>
		<summary>今回は複数の脆弱性について改修されている。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://groups.google.com/g/golang-announce/c/kMa3eup0qhU&#34; title=&#34;[security] Go 1.15.5 and Go 1.14.12 pre-announcement&#34;&gt;予告&lt;/a&gt;通り， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.15.5 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/golang-announce/c/NpBGTTmKzpM&#34;&gt;[security] Go 1.15.5 and Go 1.14.12 are released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は複数の脆弱性について改修されている。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://golang.org/pkg/math/big/&#34; title=&#34;big - The Go Programming Language&#34;&gt;math/big&lt;/a&gt;: panic during recursive division of very large numbers (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-28362&#34;&gt;CVE-2020-28362&lt;/a&gt;)&lt;/h2&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;A number of &lt;a href=&#34;https://pkg.go.dev/math/big#Int&#34;&gt;&lt;code&gt;math/big.Int&lt;/code&gt;&lt;/a&gt; methods (&lt;code&gt;Div&lt;/code&gt;, &lt;code&gt;Exp&lt;/code&gt;, &lt;code&gt;DivMod&lt;/code&gt;, &lt;code&gt;Quo&lt;/code&gt;, &lt;code&gt;Rem&lt;/code&gt;, &lt;code&gt;QuoRem&lt;/code&gt;, &lt;code&gt;Mod&lt;/code&gt;, &lt;code&gt;ModInverse&lt;/code&gt;, &lt;code&gt;ModSqrt&lt;/code&gt;, &lt;code&gt;Jacobi&lt;/code&gt;, and &lt;code&gt;GCD&lt;/code&gt;) can panic when provided crafted large inputs. For the panic to happen, the divisor or modulo argument must be larger than 3168 bits (on 32-bit architectures) or 6336 bits (on 64-bit architectures). Multiple &lt;a href=&#34;https://pkg.go.dev/math/big#Rat&#34;&gt;&lt;code&gt;math/big.Rat&lt;/code&gt;&lt;/a&gt; methods are similarly affected&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/g/golang-announce/c/NpBGTTmKzpM&#34;&gt;Go 1.15.5 and Go 1.14.12 are released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/math/big/&#34; title=&#34;big - The Go Programming Language&#34;&gt;&lt;code&gt;math/big&lt;/code&gt;&lt;/a&gt; パッケージは暗号関連のパッケージと密な関係にあるため，暗号関係の処理全般にインパクトがあると考えたほうがいいだろう。&lt;/p&gt;
&lt;p&gt;（以下未稿）&lt;/p&gt;
&lt;h2&gt;cmd/go: arbitrary code execution at build time through cgo (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-28366&#34;&gt;CVE-2020-28366&lt;/a&gt;, &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-28367&#34;&gt;CVE-2020-28367&lt;/a&gt;)&lt;/h2&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/g/golang-announce/c/NpBGTTmKzpM&#34;&gt;Go 1.15.5 and Go 1.14.12 are released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;うわっ，ヤベ！ 相変わらず cgo は（セキュリティ的に）鬼門だなぁ。&lt;/p&gt;
&lt;p&gt;（以下未稿）&lt;/p&gt;
&lt;h2&gt;例によって&amp;hellip;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; の APT で管理している &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラは古いので，&lt;a href=&#34;https://golang.org/dl/&#34; title=&#34;Downloads - The Go Programming Language&#34;&gt;ダウンロードページ&lt;/a&gt;からバイナリ（&lt;a href=&#34;https://golang.org/dl/go1.15.5.linux-amd64.tar.gz&#34;&gt;&lt;code&gt;go1.15.5.linux-amd64.tar.gz&lt;/code&gt;&lt;/a&gt;）を取ってきて手動でインストールすることを強く推奨する。
以下は手動での作業例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src
$ sudo curl -L &amp;#34;https://golang.org/dl/go1.15.5.linux-amd64.tar.gz&amp;#34; -O
$ cd ..
$ sudo unlink go # 以前の Go が入っている場合
$ sudo tar xvf src/go1.15.5.linux-amd64.tar.gz
$ sudo mv go go1.15.5
$ sudo ln -s go1.15.5 go
$ go version # /usr/local/go/bin にパスが通っている場合
go version go1.15.5 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;アップデートは計画的に。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>Git for Windows 2.29.2 (2) のリリース【セキュリテイ・アップデート】</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/11/git-for-windows-2_29_2-2-is-released/" />
		<id>tag:text.Baldanders.info,2020-11-06:/release/2020/11/git-for-windows-2_29_2-2-is-released/</id>
		<published>2020-11-06T11:14:33+00:00</published>
		<updated>2020-11-14T03:24:49+00:00</updated>
		<summary>これ Windows ユーザには結構ヤバい気がする。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;Windows 版 Git である &lt;a href=&#34;https://gitforwindows.org/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; の 2.29.2 (2) がリリースされたのだが，同梱されている &lt;a href=&#34;https://git-lfs.github.com/&#34; title=&#34;Git Large File Storage | Git Large File Storage (LFS) replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.&#34;&gt;Git LFS&lt;/a&gt; について脆弱性の改修が行われている。&lt;/p&gt;
&lt;p&gt;実は全く知らなかったのだが， &lt;a href=&#34;https://git-lfs.github.com/&#34; title=&#34;Git Large File Storage | Git Large File Storage (LFS) replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.&#34;&gt;Git LFS&lt;/a&gt; って &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; で書かれてるんだねぇ。
もの知らずでゴメン &lt;abbr class=&#34;emoji-chars&#34; title=&#34;ペコン&#34;&gt;&amp;#x1f647;&lt;/abbr&gt;&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;On Windows, if Git LFS operates on a malicious repository with a git.bat or git.exe file in the current directory, that program would be executed, permitting the attacker to execute arbitrary code. This does not affect Unix systems.&lt;/p&gt;
&lt;p&gt;This occurs because on Windows, Go includes (and prefers) the current directory when the name of a command run does not contain a directory separator.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://github.com/git-lfs/git-lfs/security/advisories/GHSA-4g4p-42wc-9f3m&#34;&gt;Git LFS can execute a Git binary from the current directory · Advisory · git-lfs/git-lfs · GitHub&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;あー，なるほど。&lt;/p&gt;
&lt;p&gt;カレント・ディレクトリにある実行モジュール（バッチを含む）を起動するのに，カレントであることを明示する &lt;code&gt;.\&lt;/code&gt; を省略できたり，拡張子を省略しても動いちゃうとか，イマドキではないわな。&lt;/p&gt;
&lt;p&gt;で，&lt;a href=&#34;https://git-lfs.github.com/&#34; title=&#34;Git Large File Storage | Git Large File Storage (LFS) replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.&#34;&gt;Git LFS&lt;/a&gt; がどうやって解決しているかというと，環境変数 PATH から該当のファイルを探して，フルパスで &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; の &lt;a href=&#34;https://golang.org/pkg/os/exec/&#34; title=&#34;exec - The Go Programming Language&#34;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Cmd&lt;/code&gt; インスタンスに渡ししているようだ。&lt;/p&gt;
&lt;p&gt;って，内部でコマンドを実行する場合には必ずこれをせんといかんということか。
これパクれないかなぁ。
&lt;a href=&#34;https://github.com/zetamatta/nyagos&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid Commandline Shell betweeeeeeen UNIX &amp;amp; DOS&#34;&gt;NYAGOS&lt;/a&gt; とかどうやってるんだろ。&lt;/p&gt;
&lt;p&gt;真面目に調べてみるか&amp;hellip;&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-27955&#34;&gt;CVE-2020-27955&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;深刻度: 緊急 (Score: 9.8)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基本評価基準&lt;/th&gt;
&lt;th&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;攻撃元区分&lt;/td&gt;
&lt;td&gt;ネットワーク&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;攻撃条件の複雑さ&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;必要な特権レベル&lt;/td&gt;
&lt;td&gt;不要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ユーザ関与レベル&lt;/td&gt;
&lt;td&gt;不要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;スコープ&lt;/td&gt;
&lt;td&gt;変更なし&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;機密性への影響&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;完全性への影響&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可用性への影響&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;アップデートは&lt;/h2&gt;
&lt;p&gt;アップデートは計画的に。&lt;/p&gt;
&lt;!-- eof --&gt;
</content>
	</entry><entry>
		<title>OpenJDK 15.0.1 のリリース【セキュリティ・アップデート】</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/10/openjdk-15_0_1-is-released/" />
		<id>tag:text.Baldanders.info,2020-10-21:/release/2020/10/openjdk-15_0_1-is-released/</id>
		<published>2020-10-21T10:52:56+00:00</published>
		<updated>2020-10-21T10:53:48+00:00</updated>
		<summary>幸いなことに今回は深刻度の高い脆弱性はないようなので，余裕を持ってアップデート作業を行える。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;定例の Java マイナー・バージョンアップが行われた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openjdk.java.net/groups/vulnerability/advisories/2020-10-20&#34;&gt;OpenJDK Vulnerability Advisory: 2020/10/20&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;幸いなことに今回は深刻度の高い脆弱性はないようだ。
ただし全てのバージョンに影響があるのでご注意を。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;
&lt;table class=&#34;risk-matrix center smaller&#34; summary=&#34;Risk matrix&#34;&gt;
&lt;tr&gt;
&lt;th rowspan=&#34;2&#34;&gt;CVE ID&lt;/th&gt;
&lt;th rowspan=&#34;2&#34;&gt;Component&lt;/th&gt;
&lt;th rowspan=&#34;2&#34;&gt;&lt;a href=&#34;https://www.first.org/cvss/&#34;&gt;CVSSv3.1&lt;/a&gt;&lt;br&gt;Score&lt;/th&gt;
&lt;th colspan=&#34;5&#34;&gt;Affects ...&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-14803&#34;&gt;CVE-2020-14803&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;code&gt;core-libs/java.io&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;5.3&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-14792&#34;&gt;CVE-2020-14792&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;code&gt;hotspot/compiler&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-14782&#34;&gt;CVE-2020-14782&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;code&gt;security-libs/java.security&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.7&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-14797&#34;&gt;CVE-2020-14797&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;code&gt;core-libs/java.nio&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.7&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-14781&#34;&gt;CVE-2020-14781&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;code&gt;core-libs/javax.naming&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.7&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-14779&#34;&gt;CVE-2020-14779&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;code&gt;core-libs/java.io:serialization&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.7&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-14796&#34;&gt;CVE-2020-14796&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;code&gt;core-libs/java.io&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2020-14798&#34;&gt;CVE-2020-14798&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;&lt;code&gt;core-libs/java.io&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;&lt;i class=&#34;fas fa-check&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://openjdk.java.net/groups/vulnerability/advisories/2020-10-20&#34;&gt;OpenJDK Vulnerability Advisory: 2020/10/20&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; を APT で管理するメリットはないので，実行バイナリを&lt;a href=&#34;https://jdk.java.net/15/&#34;&gt;リリースページ&lt;/a&gt;から直接ダウンロードして配置する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src
$ sudo curl &amp;#34;https://download.java.net/java/GA/jdk15.0.1/51f4f36ad4ef43e39d0dfdbaf6549e32/9/GPL/openjdk-15.0.1_linux-x64_bin.tar.gz&amp;#34; -O
$ cd ..
$ sudo unlink java # 以前のバージョンの Java 環境がある場合
$ sudo tar xvf src/openjdk-15.0.1_linux-x64_bin.tar.gz
$ sudo ln -s jdk-15.0.1 java
$ java -version # すでに PATH が通っている場合
openjdk version &amp;#34;15.0.1&amp;#34; 2020-10-20
OpenJDK Runtime Environment (build 15.0.1+9-18)
OpenJDK 64-Bit Server VM (build 15.0.1+9-18, mixed mode, sharing)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;私としては &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; が動けばいいので，試しておく&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./factory-method-pattern.puml&#34;&gt;&lt;img src=&#34;./factory-method-pattern.png&#34; srcset=&#34;./factory-method-pattern.png 1193w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Factory Method Pattern&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;./factory-method-pattern.puml&#34;&gt;Factory Method Pattern&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;うむうむ。
ちゃんと動くな。&lt;/p&gt;
&lt;p&gt;今回は余裕を持ってアップデート作業を行える。
アップデートは計画的に。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/security-alerts/cpuoct2020.html&#34;&gt;Oracle Critical Patch Update Advisory - October 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/20201021-jre.html&#34;&gt;Oracle Java の脆弱性対策について(CVE-2020-14803等)：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2020/at200040.html&#34;&gt;2020年10月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00I8AT1EU?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41GPVATQiZL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00I8AT1EU?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Java言語で学ぶリファクタリング入門&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2007-01-26 (Release 2014-03-12)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00I8AT1EU (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-11&#34;&gt;2018-12-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Java言語で学ぶリファクタリング入門 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00I8ATHGW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41mh5r0NwLL._SL160_.jpg&#34; width=&#34;126&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00I8ATHGW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;増補改訂版 Java言語で学ぶデザインパターン入門&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2004-06-18 (Release 2014-03-12)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00I8ATHGW (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-05&#34;&gt;2016-01-05&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 増補改訂版 Java言語で学ぶデザインパターン入門 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00I8AT1BS?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41uoMp5etSL._SL160_.jpg&#34; width=&#34;126&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00I8AT1BS?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2004-06-18 (Release 2014-03-12)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00I8AT1BS (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-07&#34;&gt;2018-12-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Java言語で学ぶデザインパターン入門 マルチスレッド編 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;2020-10-12 に &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; V1.2020.19 が&lt;a href=&#34;http://plantuml.com/ja/changes&#34;&gt;リリース&lt;/a&gt;されている。 &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の使い方等については拙文「&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;真面目に PlantUML&lt;/a&gt;」シリーズを参考にどうぞ。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Go のコードでも GitHub Code Scanning が使えるらしい</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/10/github-code-scanning-with-golang/" />
		<id>tag:text.Baldanders.info,2020-10-01:/remark/2020/10/github-code-scanning-with-golang/</id>
		<published>2020-10-01T09:03:46+00:00</published>
		<updated>2020-10-30T10:57:03+00:00</updated>
		<summary>うん。簡単！</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の Code Scanning 機能が全ユーザで有効になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://iamninad.com/github-code-scanning/&#34;&gt;Github Code Scanning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-09-30-code-scanning-is-now-available/&#34;&gt;Code scanning is now available! - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「えー。どうせ &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では使えないんでしょ？」と思ったが， C/C++, C#, &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt;, Java, JavaScript/TypeScript, Python で有効らしい。
というわけで，とりあえず手持ちの &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; パッケージのリポジトリで試してみた。&lt;/p&gt;
&lt;p&gt;Code Scanning は各リポジトリの “Security” で設定できる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./github-security-menu.png&#34;&gt;&lt;img src=&#34;./github-security-menu.png&#34; srcset=&#34;./github-security-menu.png 1284w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;一番下の “Code scanning alerts” の &lt;code&gt;[Set up code scanning]&lt;/code&gt; ボタンを押す。
次に表示される以下の画面で&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./code-scanning-setting.png&#34;&gt;&lt;img src=&#34;./code-scanning-setting.png&#34; srcset=&#34;./code-scanning-setting.png 682w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;[Set up this workflow]&lt;/code&gt; ボタンを押す。&lt;/p&gt;
&lt;p&gt;すると &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; Actions 用の YAML ファイル編集画面が表示される。
今回は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コードのリポジトリなので，こんな感じの内容になった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;# For most projects, this workflow file will not need changing; you simply need&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# to commit it to your repository.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# You may wish to alter this file to override the set of languages analyzed,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# or to provide custom queries or build logic.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;CodeQL&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;master]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pull_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# The branches below must be a subset of the branches above&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;master]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;schedule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;cron&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0 6 * * 4&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;analyze&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Analyze&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fail-fast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Override automatic language detection by changing the below list&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Supported options are [&amp;#39;csharp&amp;#39;, &amp;#39;cpp&amp;#39;, &amp;#39;go&amp;#39;, &amp;#39;java&amp;#39;, &amp;#39;javascript&amp;#39;, &amp;#39;python&amp;#39;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;go&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Learn more...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Checkout repository&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# We must fetch at least the immediate parents so that if this is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# a pull request then we can checkout the head.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# If this run was triggered by a pull request event, then checkout&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# the head of the pull request instead of the merge commit.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;git checkout HEAD^2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ github.event_name == &amp;#39;pull_request&amp;#39; }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Initializes the CodeQL tools for scanning.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Initialize CodeQL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;github/codeql-action/init@v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;languages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ matrix.language }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# If you wish to specify custom queries, you can do so here or in a config file.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# By default, queries listed here will override any specified in a config file. &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Prefix the list here with &amp;#34;+&amp;#34; to use these queries and those in the config file.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# queries: ./path/to/local/query, your-org/your-repo/queries@main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# If this step fails, then you should remove it and run the build manually (see below)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Autobuild&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;github/codeql-action/autobuild@v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ℹ️ Command-line programs to run using the OS shell.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 📚 https://git.io/JvXDl&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ✏️ If the Autobuild fails above, remove it and uncomment the following three lines&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#    and modify them (or add more) to build your code if your project&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#    uses a compiled language&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#- run: |&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   make bootstrap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   make release&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Perform CodeQL Analysis&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;github/codeql-action/analyze@v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コードの検査だけならこのままコミットしてしまって構わない。
ちなみにコミットする場合は &lt;code&gt;master&lt;/code&gt; ブランチ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; に対してではなく pull request 用のブランチを作ってそこにコミットしたほうがよい。
そうすれば PR 時に上記設定の action が走るので動作確認になるだろう。&lt;/p&gt;
&lt;p&gt;うん。
簡単！&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepsrun&#34;&gt;Workflow syntax for GitHub Actions - GitHub Docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35160321/&#34;&gt;GitHub、コードの脆弱性を検出する「Code Scanning」を全ユーザーに提供 - ZDNet Japan&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/githubgithub_code_scanning.html&#34;&gt;GitHub、コードの脆弱性などを発見してくれる「GitHub Code Scanning」正式版が提供開始。パブリックリポジトリには無料 － Publickey&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://news.mynavi.jp/article/20201002-1364892/&#34;&gt;GitHub、開発者がセキュリティ脆弱性を発見するための支援機能「Code Scanning」 | マイナビニュース&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-10-05-announcing-third-party-code-scanning-tools-static-analysis-and-developer-security-training/&#34;&gt;Announcing third-party code scanning tools: static analysis &amp;amp; developer security training - The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-10-27-code-scanning-a-github-repository-using-github-advanced-security-within-an-azure-devops-pipeline/&#34;&gt;Code Scanning a GitHub Repository using GitHub Advanced Security within an Azure DevOps Pipeline - The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/check-for-vulns-in-golang-dependencies/&#34;&gt;Go 依存パッケージの脆弱性検査&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;2020年10月から &lt;a href=&#34;https://text.baldanders.info/remark/2020/08/renaming-default-branch-name-in-github-repositries/&#34; title=&#34;GitHub リポジトリの既定ブランチ名が main になるらしい&#34;&gt;GitHub の新規リポジトリの既定ブランチ名が &lt;code&gt;main&lt;/code&gt; になるらしい&lt;/a&gt;。ご注意を。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>国勢調査の思ひ出</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/10/census/" />
		<id>tag:text.Baldanders.info,2020-10-01:/remark/2020/10/census/</id>
		<published>2020-10-01T03:09:11+00:00</published>
		<updated>2020-10-01T05:00:06+00:00</updated>
		<summary>まだ回答してない人でネット回答可能であれば，ネットのほうが断然楽。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;知り合いのブログ記事で&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.netandfield.com/shar/2020/09/post-3809.html&#34;&gt;国勢調査オンライン - 電気ウナギ的○○&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というのがあって「そういや前回はネットで回答したな」と思い出して&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env&#34; title=&#34;spiegel-im-spiegel/github-pages-env: Document Environment for spiegel-im-spiegel.github.io&#34;&gt;作業用リポジトリ&lt;/a&gt;に grep かけて探してみたらやっぱり書いてた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2015/0920-diary/#census&#34; title=&#34;今日の戯れ言：週末は掃除三昧&#34;&gt;国勢調査を片付けた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんでも記事にしておくものである。
5年前の私 good work!&lt;/p&gt;
&lt;h2&gt;あの会社は今&lt;/h2&gt;
&lt;p&gt;当時は「国勢調査オンライン」のサイト証明書は Symantec 社が発行していて，ページにデカデカとロゴが貼り付けてあって苦笑したものだが，当の Symantec 社は CA 事業の不祥事で Web ブラウザのベンダ企業から信用されなくなり，2017年に事業を手放している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://internet.watch.impress.co.jp/docs/news/1103161.html&#34;&gt;Symantec→DigiCertでSSL/TLS証明書はどうなる？　日本国内にも認証局構築へ、IoT機器市場も見据え - INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回はどうしてるんだろうと見てみたら DigiCert 社だったよ。
何も変わってないな（笑）&lt;/p&gt;
&lt;p&gt;そういや DigiCert 社のルート CA 証明書は RSA/2048 鍵で2031年まで有効なんだよな。
ちなみに &lt;a href=&#34;https://text.baldanders.info/remark/2017/10/key-parameters/&#34; title=&#34;暗号鍵関連の各種変数について&#34;&gt;RSA/2048 鍵が acceptable なのは2030年まで&lt;/a&gt;だ。
まぁ鼻の先は問題ないが，政府調達品でこの程度の認識しかない企業を使うのはどうなんだろう。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;strong&gt;【追記】&lt;/strong&gt;
Facebook で教えてもらったが DigiCert 社の CA 証明書はよりサイクルの短いものに順次切り替えていくそうだ。
Web 用のサーバ証明書は長くても1年程度のサイクルになる筈だし，数年かけて切り替えていくイメージだろうか。&lt;/div&gt;
&lt;h2&gt;なりすましと本人確認&lt;/h2&gt;
&lt;p&gt;そういや5年前はうっかり Phishing サイトを作って怒られた輩がいて話題になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1509/15/news083.html&#34;&gt;国勢調査の“偽サイト”作った意図は？　総務省から削除依頼……「騒ぎになり深く反省」と制作者 (1/3) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近の「ドコモロ系事案」を引くまでもなく，なりすましや本人確認は古くて新しい問題であり続ける。
このご時世に「オンライン推奨」とか現政権は勇気あるな（皮肉）&lt;/p&gt;
&lt;p&gt;国勢調査が面白いのは，基本的に「戸」単位であり，その枠組みの中で識別できていれば「本人確認」は必ずしも必要条件ではないということだ。
そして，その「戸」単位の確認を行うのが「国勢調査員」である。
これは紙でもネットでも同じこと。
ネットで回答するにしても，そのアカウント情報は国勢調査員から貰わなければならない。&lt;/p&gt;
&lt;p&gt;そもそも路上生活者とかにも国勢調査員が出向いて聞き取り調査するんだよ。
日本語が通じない人達だって相当数いるだろうに，ホンマ国勢調査員のご苦労は察するにあまりある。&lt;/p&gt;
&lt;p&gt;故に「『コロナ』だからオンライン推奨」というのは全く以って詭弁である。
ちなみに，今回うちで国勢調査の回答をしたのは親父殿だが，パソコンもスマホも持ってないので紙で回答したらしい。
私？ 私はただの居候ですから（笑）&lt;/p&gt;
&lt;h2&gt;「国勢調査オンライン」はダサいか&lt;/h2&gt;
&lt;p&gt;どうも「国勢調査オンライン」のサイトをダサいとか文句を言ってる人がいるらしい。
まぁ今風ではないな（笑）&lt;/p&gt;
&lt;p&gt;今回は私は回答してないのでどうだったかは知らないが，&lt;a href=&#34;https://text.baldanders.info/remark/2015/0920-diary/#census&#34; title=&#34;今日の戯れ言：週末は掃除三昧&#34;&gt;前回ネットで回答&lt;/a&gt;してめっさ楽だったのは覚えている。
ぶっちゃけて言うが&lt;/p&gt;
&lt;div class=&#34;center&#34;&gt;&lt;strong&gt;政府系サイトに &lt;ruby&gt;&lt;rb&gt;SEO&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;屁のつっぱり&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt; は要らんですよ&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;そもそも Web アクセシビリティってそんな簡単じゃない。
うちのサイトもそうだけど，本当に不特定に見易い使い易いサイトなんか無理である。
このブログサイトをダークモードにしてるのは，主に「私」のためだ。&lt;/p&gt;
&lt;p&gt;できるだけ多くの人に対応しようとして結果として今風じゃないデザインになったとしても，利用者が文句を言う筋合いじゃないのだ。
機能要件やセキュリティ要件を満たしていない部分があるのなら，文句を言って然るべきだけど（笑）&lt;/p&gt;
&lt;p&gt;というわけで，まだ回答してない人でネット回答可能であれば，ネットのほうが断然楽なので，お試しあれ。&lt;/p&gt;
&lt;h2&gt;いまさら思い出したが&amp;hellip;&lt;/h2&gt;
&lt;p&gt;このブログサイト，&lt;a href=&#34;https://text.baldanders.info/remark/2015/open-this-site/&#34; title=&#34;text.Baldanders.info 正式オープン&#34;&gt;正式オープン&lt;/a&gt;から5周年だわ。
何も考えてなかった。&lt;/p&gt;
&lt;p&gt;まぁ，&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/assemble-a-living-pc/&#34; title=&#34;整いました！&#34;&gt;この前買ったタブレット&lt;/a&gt;がご褒美ということで（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/nist-sp-800-207-zero-trust-architecture/&#34;&gt;NIST SP 800-207: “Zero Trust Architecture”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/authenticator-and-aal/&#34;&gt;Authenticator と AAL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- eof --&gt;
</content>
	</entry><entry>
		<title>Go 依存パッケージの脆弱性検査</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/check-for-vulns-in-golang-dependencies/" />
		<id>tag:text.Baldanders.info,2020-09-30:/golang/check-for-vulns-in-golang-dependencies/</id>
		<published>2020-09-30T03:49:21+00:00</published>
		<updated>2020-09-30T06:15:03+00:00</updated>
		<summary>nancy を使うのがよさげである。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どの言語でも同じだけど，インポートする外部パッケージが安全かどうかを調べるのはけっこう大変である。
で， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は &lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy&#34; title=&#34;sonatype-nexus-community/nancy: A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index&#34;&gt;nancy&lt;/a&gt; を使うのがよさげである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy&#34;&gt;sonatype-nexus-community/nancy: A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy&#34; title=&#34;sonatype-nexus-community/nancy: A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index&#34;&gt;nancy&lt;/a&gt; は “&lt;a href=&#34;https://ossindex.sonatype.org/&#34;&gt;Sonatype OSS Index&lt;/a&gt;” の情報を使って依存パッケージ／モジュールの検査をしてくれる。
ツール自体は Apache-2.0 でライセンスされている。
提供されているデータについては&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;OSS Index and the associated tools are and always will be free to the community. The data we gather is derived from public sources, and does not include human curated intelligence nor expert remediation guidance&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://ossindex.sonatype.org/&#34;&gt;Sonatype OSS Index&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とあるので，オープンな場で使うなら問題ないかな。&lt;/p&gt;
&lt;p&gt;使い方は簡単で，開発中のパッケージのリポジトリ上で&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go list -json -m all | nancy sleuth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすればよい。
問題なければ&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go list -json -m all | nancy sleuth -n
┏━━━━━━━━━━━━━━━┓
┃ Summary                      ┃
┣━━━━━━━━━━━━━┳━┫
┃ Audited Dependencies     ┃ 9┃
┣━━━━━━━━━━━━━╋━┫
┃ Vulnerable Dependencies  ┃ 0┃
┗━━━━━━━━━━━━━┻━┛
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;みたいな感じで結果を返してくれる。
問題のあるパッケージ／モジュールを含んでると，ものすごい勢いで叱られるけど（笑）&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; Actions でも使える&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy&#34; title=&#34;sonatype-nexus-community/nancy: A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index&#34;&gt;nancy&lt;/a&gt; には &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; Actions も用意されている。
ありがたや。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy-github-action&#34;&gt;sonatype-nexus-community/nancy-github-action: Sonatype Nancy for GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定は簡単。
リポジトリの &lt;code&gt;.github/workflows/&lt;/code&gt; ディレクトリに YAML ファイル（例えば &lt;code&gt;vulns.yml&lt;/code&gt;）を置き，以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vulns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;v*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pull_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vulns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Vulnerability scanner&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/setup-go@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;go-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;^1.13&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;WriteGoList&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;go list -json -m all &amp;gt; go.list&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Nancy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sonatype-nexus-community/nancy-github-action@main&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで pull request 時， &lt;code&gt;master&lt;/code&gt; ブランチ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; への push 時，およびバージョンタグを打った際に脆弱性検査が走る。&lt;/p&gt;
&lt;h2&gt;依存の依存パッケージに脆弱性がある&lt;/h2&gt;
&lt;p&gt;直接インポートするパッケージに脆弱性があるなら無害なバージョンに差し替えればいいけど，依存パッケージが依存しているパッケージに脆弱性がある場合はどうするか。&lt;/p&gt;
&lt;p&gt;とりあえず，そのパッケージ宛てには issue を投げておくとして，それまでの継ぎとしては &lt;code&gt;go.mod&lt;/code&gt; ファイルの &lt;code&gt;replace&lt;/code&gt; ディレクティブを使って凌ぐことができそうだ。&lt;/p&gt;
&lt;p&gt;たとえば，依存パッケージが &lt;a href=&#34;https://github.com/etcd-io/etcd&#34; title=&#34;etcd-io/etcd: Distributed reliable key-value store for the most critical data of a distributed system&#34;&gt;github.com/coreos/etcd&lt;/a&gt; v3.3.13 に依存してるんだけど v3.3.13 に脆弱性がある場合，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;replace (
	github.com/coreos/etcd v3.3.13+incompatible =&amp;gt; github.com/coreos/etcd v3.3.25+incompatible
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとして無害なバージョンに差し替えできる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;require&lt;/code&gt; ディレクティブで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;require (
	github.com/coreos/etcd v3.3.25+incompatible
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とか書いても同じ効果があるけど，名目だけの依存関係で実際にはインポートしないパッケージは &lt;code&gt;go mod tidy&lt;/code&gt; コマンドで記述が削除されちゃうのでオススメできない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go list -m all&lt;/code&gt; って，実際にはリンクしない名目上の依存関係も全部拾ってリストアップしちゃうので，凄い面倒くさいんだよねぇ。
実際にリンクするパッケージだけリストアップしてくれないものだろうか&amp;hellip;&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;2020年10月から &lt;a href=&#34;https://text.baldanders.info/remark/2020/08/renaming-default-branch-name-in-github-repositries/&#34; title=&#34;GitHub リポジトリの既定ブランチ名が main になるらしい&#34;&gt;GitHub の新規リポジトリの既定ブランチ名が &lt;code&gt;main&lt;/code&gt; になるらしい&lt;/a&gt;。ご注意を。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Authenticator と AAL</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/authenticator-and-aal/" />
		<id>tag:text.Baldanders.info,2020-09-27:/remark/2020/09/authenticator-and-aal/</id>
		<published>2020-09-27T10:45:38+00:00</published>
		<updated>2020-09-27T11:01:38+00:00</updated>
		<summary>どうも日本の金融界は「リスク感度が鈍い」そうなので，自衛のためにも2017年にリリースされた NIST SP 800-63-3 をベースに少しお勉強しておく。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どうも日本の金融界は「&lt;a href=&#34;https://japan.cnet.com/article/35160001/&#34; title=&#34;ゆうちょ池田社長「リスク感度が鈍かった」--被害は約6000万円に拡大、2017年から発生 - CNET Japan&#34;&gt;リスク感度が鈍い&lt;/a&gt;」そうなので，自衛のためにも2017年にリリースされた &lt;a href=&#34;https://pages.nist.gov/800-63-3/&#34; title=&#34;NIST SP 800-63 Digital Identity Guidelines&#34;&gt;NIST SP 800-63-3&lt;/a&gt; をベースに少しお勉強しておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63-3.html&#34;&gt;NIST Special Publication 800-63-3: Digital Identity Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63a.html&#34;&gt;NIST Special Publication 800-63A: Enrollment and Identity Proofing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34;&gt;NIST Special Publication 800-63B: Authentication and Lifecycle Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63c.html&#34;&gt;NIST Special Publication 800-63C: Federation and Assertions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/&#34; title=&#34;NIST SP 800-63 Digital Identity Guidelines&#34;&gt;SP 800-63-3&lt;/a&gt; といえばパスワード運用で当時は話題になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/10/changes-in-password-best-practices/&#34;&gt;「パスワードのベストプラクティス」が変わる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このパスワード話が出てくるのが &lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34; title=&#34;[NIST Special Publication 800-63B: Authentication and Lifecycle Management&#34;&gt;SP 800-63B&lt;/a&gt; だが，このドキュメントでは Authenticator 全体について色々と書かれている。&lt;/p&gt;
&lt;h2&gt;Authenticator&lt;/h2&gt;
&lt;p&gt;Authenticator について適切な日本語が見当たらないが，強いて言うなら「認証機能」あるいは「認証器」といったところだろうか。
たとえばパスワードも Authenticator だし，スマホにインストールした TOTP アプリも Authenticator だ。
Yubikey なんかの暗号デバイスも Authenticator に含まれる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34; title=&#34;[NIST Special Publication 800-63B: Authentication and Lifecycle Management&#34;&gt;SP 800-63B&lt;/a&gt; では Authenticator を以下の9つに分類している。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;種別名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;認証要素&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Memorized Secrets&lt;br&gt;記憶シークレット&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;知識&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Look-Up Secrets&lt;br&gt;ルックアップ・シークレット&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Out-of-Band Devices&lt;br&gt;経路外デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single-Factor OTP Device&lt;br&gt;単要素 OTP デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-Factor OTP Devices&lt;br&gt;多要素 OTP デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有＋知識／生体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single-Factor Cryptographic Software&lt;br&gt;単要素暗号ソフトウェア&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single-Factor Cryptographic Devices&lt;br&gt;単要素暗号デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-Factor Cryptographic Software&lt;br&gt;多要素暗号ソフトウェア&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有＋知識／生体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multi-Factor Cryptographic Devices&lt;br&gt;多要素暗号デバイス&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有＋知識／生体&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;また，各 Authenticator の例としては以下のものが挙げられる。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Authenticator&lt;/th&gt;
&lt;th&gt;具体例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;記憶シークレット&lt;/td&gt;
&lt;td&gt;パスワード，PINコード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ルックアップ・シークレット&lt;/td&gt;
&lt;td&gt;乱数表，認証失敗時のリカバリコード&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;経路外デバイス&lt;/td&gt;
&lt;td&gt;SMS によるコード送信， QR コード（電子メールや VoIP は認められない）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;単要素 OTP デバイス&lt;/td&gt;
&lt;td&gt;アクティベーションを必要としない OTP デバイスまたはソフトウェア&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多要素 OTP デバイス&lt;/td&gt;
&lt;td&gt;アクティベーションを行った上で利用可能な OTP デバイスまたはソフトウェア&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;単要素暗号ソフトウェア&lt;/td&gt;
&lt;td&gt;セキュアなストレージ上で保護されている暗号鍵&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;単要素暗号デバイス&lt;/td&gt;
&lt;td&gt;FIDO U2F の USB ドングル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多要素暗号ソフトウェア&lt;/td&gt;
&lt;td&gt;単要素暗号ソフトウェアに対して追加のアクティベーションを必要とするもの&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多要素暗号デバイス&lt;/td&gt;
&lt;td&gt;単要素暗号デバイスに対して追加のアクティベーションを必要とするもの&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Authenticator Assurance Level&lt;/h2&gt;
&lt;p&gt;さらに &lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html&#34; title=&#34;[NIST Special Publication 800-63B: Authentication and Lifecycle Management&#34;&gt;SP 800-63B&lt;/a&gt; では AAL (Authenticator Assurance Level) を定義している。
AAL は 1 〜 3 の3段階あり，それぞれ以下に示す  Authenticator の組み合わせを許容している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AAL 1 では9種の Authenticator 全て許容され，単要素の認証で OK&lt;/li&gt;
&lt;li&gt;AAL 2 では以下に示す通り複数の認証要素による多要素認証が必要：
&lt;ul&gt;
&lt;li&gt;多要素 OTP デバイス&lt;/li&gt;
&lt;li&gt;多要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;多要素暗号デバイス&lt;/li&gt;
&lt;li&gt;記憶シークレット＋以下
&lt;ul&gt;
&lt;li&gt;ルックアップ・シークレット&lt;/li&gt;
&lt;li&gt;経路外デバイス&lt;/li&gt;
&lt;li&gt;単要素 OTP デバイス&lt;/li&gt;
&lt;li&gt;単要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;単要素暗号デバイス&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AAL 3 では以下に示す通り，暗号鍵の所持証明要素とハードウェア関与を含む複数の認証要素による多要素認証が必要：
&lt;ul&gt;
&lt;li&gt;多要素暗号デバイス&lt;/li&gt;
&lt;li&gt;単要素暗号デバイス＋記憶シークレット&lt;/li&gt;
&lt;li&gt;多要素OTPデバイス(SW/HW)＋単要素暗号デバイス&lt;/li&gt;
&lt;li&gt;多要素OTPデバイス(HW)＋単要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;単要素OTPデバイス(HW)＋多要素暗号ソフトウェア&lt;/li&gt;
&lt;li&gt;単要素OTPデバイス(HW)＋単暗号ソフトウェア＋記憶シークレット&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AAL の各レベルごとに要求されるセキュリティ事項（一部）は以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;要求事項&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;AAL 1&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;AAL 2&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;AAL 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;中間者攻撃耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verifier なりすまし耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Verifier 改ざん耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;リプレイ耐性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;認証意図（AuthN Inbtent）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;推奨&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;レコード保持ポリシー&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;プライバシー統制&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必須&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;金融系サービスの subscriber 確認で乗っ取りやなりすましを防ぎたいなら AAL 3 で何らかの物理暗号デバイスが必要だと思うけどねー。&lt;/p&gt;
&lt;h2&gt;格子型の乱数表は NG&lt;/h2&gt;
&lt;p&gt;現在は使ってるところはないだろうが，かつてネットバンキングでよく見られた格子型の乱数表はルックアップ・シークレットとしても NG だそうだ。
まぁ，当然だよな。&lt;/p&gt;
&lt;h2&gt;SMS 認証は非推奨？&lt;/h2&gt;
&lt;p&gt;NIST は SMS によるコード送信について， &lt;a href=&#34;https://pages.nist.gov/800-63-3/&#34; title=&#34;NIST SP 800-63 Digital Identity Guidelines&#34;&gt;SP 800-63-3&lt;/a&gt; のドラフト段階では非推奨にするつもりだったらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/07/26/20160725nist-declares-the-age-of-sms-based-2-factor-authentication-over/&#34;&gt;SMSを使った二要素認証を非推奨〜禁止へ、米国立技術規格研究所NISTの新ガイダンス案 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかしその後，激しい議論があったようで，最終的には “&lt;a href=&#34;https://pages.nist.gov/800-63-3/sp800-63b.html#restricted&#34;&gt;Restricted Authenticator&lt;/a&gt;” という位置づけまで緩和されたようだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;Currently, authenticators leveraging the public switched telephone network, including phone- and Short Message Service (SMS)-based one-time passwords (OTPs) are restricted. Other authenticator types may be added as additional threats emerge. Note that, among other requirements, even when using phone- and SMS-based OTPs, the agency also has to verify that the OTP is being directed to a phone and not an IP address, such as with VoIP, as these accounts are not typically protected with multi-factor authentication&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-FAQ/#q-b01&#34;&gt;NIST SP 800-63 Digital Identity Guidelines-FAQ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;（スマホを含む）電話機に依存した認証は，プライバシーも絡めて考えると筋が悪い。
ぶっちゃけ SMS 認証を含む経路外デバイスを使った認証は排除するか（ルックアップ・シークレットのように）優先順位を下げて非常時のみ使えるようにするのがいいと思う。
もちろん&lt;a href=&#34;https://japan.cnet.com/article/35159898/&#34; title=&#34;Twitterに集団訴訟--電話番号がターゲティング広告に不正利用された可能性 - CNET Japan&#34;&gt;電話番号を広告に流用&lt;/a&gt;するなど以っての外である。&lt;/p&gt;
&lt;h2&gt;生体情報は Authenticator として使えるか&lt;/h2&gt;
&lt;p&gt;Authenticator の分類を見れば分かるように，生体情報は単独では認証手段としては使えないという認識のようだ。
そもそも&lt;strong&gt;生体情報は秘密情報ではない&lt;/strong&gt;のだから当たり前といえば当たり前かな。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/usnistgov/800-63-3&#34;&gt;usnistgov/800-63-3: Home to public development of NIST Special Publication 800-63-3: Digital Authentication Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/kthrtty/20171027-nist-sp80063bkthrtty-81333156&#34;&gt;NIST SP800-63-3翻訳版63-Bパートの紹介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://www.nic.ad.jp/sc-sendai/program/iwsc-sendai-d2-6.pdf&#34;&gt;認証にまつわるセキュリティの新常識 &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.trustlogin.com/hc/ja/articles/115004031154-%E4%B8%96%E7%95%8C%E3%81%AE%E9%9B%BB%E5%AD%90%E8%AA%8D%E8%A8%BC%E5%9F%BA%E6%BA%96%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8B-NIST-SP800-63-3%E3%82%92%E8%AA%AD%E3%81%BF%E8%A7%A3%E3%81%8F&#34;&gt;世界の電子認証基準が変わる：NIST SP800-63-3を読み解く – サポート − トラスト・ログイン byGMO【旧SKUID(スクイド)】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-09-25-phishing-resistant-sms-autofill/&#34;&gt;Phishing Resistant SMS Autofill - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;NTT出版 2013-12-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-28&#34;&gt;2015-11-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 信頼と裏切りの社会 --&gt;
</content>
	</entry><entry>
		<title>放火魔の消防士</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/firefighter-arsonist/" />
		<id>tag:text.Baldanders.info,2020-09-24:/remark/2020/09/firefighter-arsonist/</id>
		<published>2020-09-24T00:54:14+00:00</published>
		<updated>2020-09-24T03:16:11+00:00</updated>
		<summary>「定量評価」もなく特定の事例を論って脅威を煽るだけの言動は華麗にスルーである。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;日本語で言うと「マッチポンプ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」。&lt;/p&gt;
&lt;p&gt;いやぁ，自分で書いておいてすっかり忘れてたのだが，「放火魔の消防士」というフレーズを初めて見かけたのは，セキュリティ関係の本やネット記事ではなく， AI 関連哲学書だった。
しかも3年前。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/09/the-myth-of-the-singularity/&#34;&gt;『シンギュラリティの神話』を読む&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私の中で「AI」に関するポエムはあの年で完結していて，早々に「ひとり幻滅期」に入っていたのだ，と言い訳しておこう（笑）&lt;/p&gt;
&lt;p&gt;件のフレーズが出てくるのは第8章で，いわゆる GAFA について&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;これらの大企業は、自ら率先して情報技術の発展を推し進めているというのに、その情報技術こそが人間を破滅に追いやると自ら警告しているのだ。これではまるで「放火魔の消防士」ではないか。彼らは自分たちで望んで火をつけておきながら、その火を消すために先頭に立って奔走している&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;そろそろ、人工知能の真実を話そう&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と dis ってる部分（内容の妥当性は横に置いておく）。&lt;/p&gt;
&lt;p&gt;なんでこのフレーズを思い出したかというと，以下の記事を見かけたから。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.itmedia.co.jp/news/articles/2009/23/news073.html&#34;&gt;セキュリティ企業が描き出す「歪曲された」実態　大学研究者が検証 - ITmedia NEWS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ホンマ今更だよね（笑）&lt;/p&gt;
&lt;p&gt;私がセキュリティ管理者だった大昔から，セキュリティ関連のマッチポンプ記事（特に広告記事）には気をつけろ，と言われてたし，特に近年は（セキュリティ企業に限らず）あらゆる企業のあからさまなセキュリティ広告が鼻について真面目に読む気をなくすほどだ。&lt;/p&gt;
&lt;p&gt;脅威から守る立場の組織・企業・個人が自らの存在を誇示し続けるのに最も効果的なのは「脅威を創りだす」ことだ。
「需要は創るもの」あるいは「&lt;a href=&#34;https://magazine-k.jp/2016/01/25/spam-and-media/&#34; title=&#34;メディアは（常に）スパムか？ « マガジン航[kɔː]&#34;&gt;注目の搾取&lt;/a&gt;」である。
個人なら歪んだ英雄願望または承認欲求の暴走といったところか。&lt;/p&gt;
&lt;p&gt;セキュリティ管理においては分析の前段階である「インシデントの収集」は割と重要で（脅威を分析・分類し定量的なリスク評価へと繋げるため），それ故にマッチポンプ記事にハマりやすい。
だからこそ「マッチポンプ記事には気をつけろ」なのである。&lt;/p&gt;
&lt;p&gt;まぁ，でも，これってセキュリティに限る話じゃないよね。
「炭素ビジネス」とか「自然エネルギー（笑）」とか。
知財関連なら「知財トロル」とかも典型的だ。
最近なら「コロナ禍」だって大抵はマッチポンプ記事だ&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;「放火魔の消防士」の言動を忌避したいなら「定量評価」に徹するしかない。
「定量評価」もなく特定の事例を論って脅威を煽るだけの言動は華麗にスルーである。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51cD7DR87IL._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B071FHBGW8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;そろそろ、人工知能の真実を話そう (早川書房)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ジャン＝ガブリエル ガナシア (著), 小林 重裕・他 (翻訳), 伊藤 直子 (監修)&lt;/dd&gt;
    &lt;dd&gt;早川書房 2017-05-25 (Release 2017-05-31)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B071FHBGW8 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;シンギュラリティは起きない。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-02&#34;&gt;2016-07-02&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 人工知能の真実を話そう --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/430924744X?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51KtN0YwWcL._SL160_.jpg&#34; width=&#34;109&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/430924744X?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;スパム[spam]:インターネットのダークサイド&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;フィン・ブラントン (著), 生貝直人 (監修), 成原慧 (監修), 松浦俊輔 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;河出書房新社 2015-12-25&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;430924744X (ASIN), 9784309247441 (EAN), 430924744X (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;今読んでるけど読みづらい。修飾語が多すぎるよ。ギリシア神話かっての。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-12-10&#34;&gt;2016-12-10&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- スパム --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;当時は知らなかったのだが「マッチポンプ」って和製外来語なんだって。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;私は Twitter で「新型コロナ」と「GoTo」と「コロナ禍」のキーワードについて，フォローしているユーザ以外はミュート対象にしている。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>個人番号と個人番号カード</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/my-number-and-my-number-card/" />
		<id>tag:text.Baldanders.info,2020-09-21:/remark/2020/09/my-number-and-my-number-card/</id>
		<published>2020-09-21T10:30:40+00:00</published>
		<updated>2020-09-22T03:24:59+00:00</updated>
		<summary>「個人番号」と「個人番号カード」の問題は（関連してるけど）きちんと切り分けて考えないとワケワカメになる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どうしても TL に脊髄反射コメントを書いてしまう。&lt;/p&gt;
&lt;p&gt;というわけで。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.com/yoshiaono/n/n4cd37820faf0&#34;&gt;いろいろおかしいマイナンバーカード｜青野慶久@サイボウズ｜note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;気持ちは分かる。
共感できる。&lt;/p&gt;
&lt;p&gt;だが「個人番号」と「個人番号カード」の問題は（関連してるけど）きちんと切り分けて考えないとワケワカメになる。&lt;/p&gt;
&lt;h2&gt;「個人番号」の問題&lt;/h2&gt;
&lt;p&gt;「個人番号」の問題は，ひとことで言うなら（ゼロ年代に議論になった）&lt;a href=&#34;http://www.hyuki.com/techinfo/uniqid.html&#34; title=&#34;固有IDのシンプル・シナリオ&#34;&gt;固有 ID の問題&lt;/a&gt;である。&lt;/p&gt;
&lt;p&gt;ID (Identity) には有効な「目的」と「範囲」と「期間」が必ずある。
これを逸脱するとセキュリティおよびプライバシーの問題となる。&lt;/p&gt;
&lt;p&gt;ゼロ年代に批判された「住基番号」問題の核心は，目的と範囲と期間を超えて（認証および許可トークンとして）単一の ID を使いまわしていることだ。
そして個人番号でも，当時の批判から何も学ぶことなく同じ失敗を繰り返している。&lt;/p&gt;
&lt;p&gt;昨今あたり前になりつつある「&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/nist-sp-800-207-zero-trust-architecture/&#34; title=&#34;NIST SP 800-207: “Zero Trust Architecture”&#34;&gt;セロトラスト・セキュリティ&lt;/a&gt;」と照らし合わせても「個人番号」の設計が如何にダサいか分かるだろう。
ダメダメな設計を運用（マイナンバー関連法）でカバーするってのは「動かないシステム」の典型である。&lt;/p&gt;
&lt;h2&gt;「個人番号カード」の問題&lt;/h2&gt;
&lt;p&gt;「個人番号カード」の問題は「&lt;ruby&gt;&lt;rb&gt;情報格差&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;digital divide&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;」の拡大だ。&lt;/p&gt;
&lt;p&gt;5月の「特別定額給付金」でのドタバタを見れば分かるように，オンライン申請によって「できる人」と「できない人」で明確に色分けされてしまった。
もっと言うと現在稼働中の「マイナポイント」はキャッシュレス決済手段を持ってない人は（できるできない以前に）構造的に排除されている。
ぶっちゃけ，&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/bottleneck2/&#34; title=&#34;「特別定額給付金」申請のナニがダメだったのか（その2）&#34;&gt;お役所内部のお些末さ&lt;/a&gt;は枝葉末節に過ぎない。&lt;/p&gt;
&lt;p&gt;これで思い出すのが，最近見かけた以下の記事だ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35158575/&#34;&gt;アフターコロナの中国でネット弱者の老人にどう対応したのか - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この記事では「コロナ」と「老人」を切り口に語られているが，情報格差は&lt;a href=&#34;https://text.baldanders.info/remark/2016/05/its-complicated/&#34; title=&#34;『つながりっぱなしの日常を生きる』を読む&#34;&gt;世代格差よりも経済格差による影響が大きい&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;つまり，「個人番号カード」により拡大した情報格差は経済階級構造と結びつき「情報力」を背景にした階級社会を強化することになるだろう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.com/tsukamoto/n/n290aa887cb52&#34;&gt;マイナンバーそのものは知られても問題ない（はず）｜塚本 牧生｜note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/05/information-illiterate/&#34;&gt;「情報弱者」を再々定義する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.aozora.gr.jp/cards/000021/card4307.html&#34;&gt;&lt;img src=&#34;https://text.baldanders.info/images/aozora/card4307.svg&#34; width=&#34;110&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.aozora.gr.jp/cards/000021/card4307.html&#34;&gt;グリゴリの捕縛&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;白田 秀彰&lt;/dd&gt;
    &lt;dd&gt; 2001-11-26 (Release 2014-09-17)&lt;/dd&gt;
    &lt;dd&gt;青空文庫&lt;/dd&gt;
    &lt;dd&gt;4307 (図書カードNo.)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;白田秀彰さんの「&lt;a href=&#34;http://orion.mt.tama.hosei.ac.jp/hideaki/kenporon.htm&#34;&gt;グリゴリの捕縛&lt;/a&gt;」が青空文庫に収録されていた。
内容は &lt;strike&gt;怪獣大決戦&lt;/strike&gt; おっと憲法（基本法）についてのお話。
古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。
その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-03-30&#34;&gt;2019-03-30&lt;/abbr&gt; (powered by &lt;a href=&#34;https://aozorahack.org/&#34;&gt;aozorahack&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- グリゴリの捕縛 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B0125TZSZ0?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/616sjle5ITL._SL160_.jpg&#34; width=&#34;109&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B0125TZSZ0?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;つながりっぱなしの日常を生きる：ソーシャルメディアが若者にもたらしたもの&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ダナ・ボイド (著), 野中 モモ (翻訳)&lt;/dd&gt;
    &lt;dd&gt;草思社 2014-10-09 (Release 2015-07-21)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B0125TZSZ0 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;読むのに1年半以上かかってしまった。ネット，特に SNS 上で自身のアイデンティティやプライバシーを保つにはどうすればいいか。豊富な事例を交えて考察する。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-05-10&#34;&gt;2016-05-10&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- つながりっぱなしの日常を生きる --&gt;
</content>
	</entry><entry>
		<title>NIST SP 800-207: “Zero Trust Architecture”</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/nist-sp-800-207-zero-trust-architecture/" />
		<id>tag:text.Baldanders.info,2020-09-17:/remark/2020/09/nist-sp-800-207-zero-trust-architecture/</id>
		<published>2020-09-17T03:25:07+00:00</published>
		<updated>2020-11-08T09:18:51+00:00</updated>
		<summary>Refactoring することを前提としたシステム設計が大事。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;毎度の言い訳だが（笑），私がネットワーク管理者でセキュリティ管理者だったのは遥か昔の牧歌的な時代であり，現在時点で参加・所属する企業・組織のポリシーについてどうこう言う権限はないし，その気もない。
ただし，自衛のための知識を摂取し続けることは必要だと思っている。&lt;/p&gt;
&lt;p&gt;というわけで，今回は2020年8月に最終版が公開された NIST &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; の触りの部分を覚え書きとして記しておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207, Zero Trust Architecture | CSRC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Zero Trust および Zero Trust Architecture の定義&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では Zero Trust および Zero Trust Architecture は以下のように定義づけられている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;&lt;i&gt;Zero trust&lt;/i&gt; (ZT) provides a collection of concepts and ideas designed to minimize uncertainty in enforcing accurate, least privilege per-request access decisions in information systems and services in the face of a network viewed as compromised. &lt;i&gt;Zero trust architecture&lt;/i&gt; (ZTA) is an enterprise’s cybersecurity plan that utilizes zero trust concepts and encompasses component relationships, workflow planning, and access policies. Therefore, a zero trust enterpriseis the network infrastructure (physical and virtual) and operational policies that are in place for an enterprise as a product of a zero trust architecture plan&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;SP 800-207: Zero Trust Architecture&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ポイントは，アクセスを行うリソース，権限，期間が最小となるよう設計することだ。
これは，特定の安全地帯に入る許可さえあれば，内部のリソースにラフにアクセスできる従来の境界型セキュリティ設計とは大きく異なっている。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では，アクセスする対象を &lt;q lang=&#34;en&#34;&gt;resource&lt;/q&gt; と呼んでいる。
これは単なるデータだけではなく物理的なデバイスも対象となっていることを示す。
つまり (&lt;a href=&#34;https://www.gartner.com/jp/newsroom/press-releases/pr-20200910&#34; title=&#34;ガートナー、「日本における未来志向型インフラ・テクノロジのハイプ・サイクル：2020年」を発表&#34;&gt;日本では既に幻滅期に入っている&lt;/a&gt;) IoT も視野に入っているわけだ。&lt;/p&gt;
&lt;p&gt;さらに &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では，アクセスを行う主体を &lt;q lang=&#34;en&#34;&gt;subjects&lt;/q&gt; と呼んでいる。
そう呼ぶからには subjects が指すのは人間（ユーザ）だけではなく，アプリケーション，サービス，デバイス等も含まれる。
また subjects は &lt;q lang=&#34;en&#34;&gt;authorized and approved subjects&lt;/q&gt; と &lt;q lang=&#34;en&#34;&gt;all other subjects&lt;/q&gt; で色分けされている。
もちろん &lt;q lang=&#34;en&#34;&gt;all other subjects&lt;/q&gt; の代表は「攻撃者（attackers）」である。&lt;/p&gt;
&lt;p&gt;つまり，あるリソースに対して認証・承認されない actor は，システム上の役割に関わらず，&lt;strong&gt;全て敵&lt;/strong&gt;である（笑） この辺が「ゼロトラスト」と呼ばれる所以なのだろう。&lt;/p&gt;
&lt;p&gt;ZT/ZTA が重視される理由としては以下の2つが挙げられると思う。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;企業・組織への攻撃が巧妙化していて，セキュリティ管理の比重が防御から監視へシフトした&lt;/li&gt;
&lt;li&gt;クラウド上の XaaS リソースは「境界型」では管理できない&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;できれば安直にクラウドに繋がろうとするスマート家電もなんとかしてほしいのだが&amp;hellip;&lt;/p&gt;
&lt;h2&gt;Zero Trust Architecture の基本理念&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; title=&#34;SP 800-207, Zero Trust Architecture | CSRC&#34;&gt;SP 800-207&lt;/a&gt; では ZTA の基本理念として，以下の7つの項目を挙げている。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;All data sources and computing services are considered resources.&lt;/li&gt;
&lt;li&gt;All communication is secured regardless of network location.&lt;/li&gt;
&lt;li&gt;Access to individual enterprise resources is granted on a per-session basis.&lt;/li&gt;
&lt;li&gt;Access to resources is determined by dynamic policy—including the observable state of client identity, application/service, and the requesting asset—and may include other behavioral and environmental attributes.&lt;/li&gt;
&lt;li&gt;The enterprise monitors and measures the integrity and security posture of all owned and associated assets.&lt;/li&gt;
&lt;li&gt;All resource authentication and authorization are dynamic and strictly enforced before access is allowed.&lt;/li&gt;
&lt;li&gt;The enterprise collects as much information as possible about the current state of assets, network infrastructure and communications and uses it to improve its security posture.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;SP 800-207: Zero Trust Architecture&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;https://www.atmarkit.co.jp/ait/articles/2009/15/news007.html&#34; title=&#34;NISTによる「ゼロトラストにおける7つの基本原則」と従来の境界型防御との関係&#34;&gt;@IT の記事&lt;/a&gt;にこの7項目の抄訳が載ってたので以下に挙げておく（ちなみに私は @IT のアカウントを持ってないので記事自体は読んでない&lt;code&gt;w&lt;/code&gt;）。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;データソースとコンピュータサービスは、全てリソースと見なす&lt;/li&gt;
&lt;li&gt;「ネットワークの場所」に関係なく、通信は全て保護される&lt;/li&gt;
&lt;li&gt;組織のリソースへのアクセスは、全て個別のセッションごとに許可される&lt;/li&gt;
&lt;li&gt;リソースへのアクセスは動的なポリシーによって決定される&lt;/li&gt;
&lt;li&gt;組織が保有するデバイスは、全て正しくセキュリティが保たれているように継続的に監視する&lt;/li&gt;
&lt;li&gt;リソースの認証と認可は、全てアクセスが許可される前に動的かつ厳密に実施される&lt;/li&gt;
&lt;li&gt;資産・ネットワーク・通信の状態について可能な限り多くの情報を収集し、セキュリティを高めるために利用する&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.atmarkit.co.jp/ait/articles/2009/15/news007.html&#34;&gt;NISTによる「ゼロトラストにおける7つの基本原則」と従来の境界型防御との関係：働き方改革時代の「ゼロトラスト」セキュリティ（6） - ＠IT&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;面白いのは ZTA に最初から「監視」が組み込まれていること，常に状況をフィードバックして「改善」のサイクルを構築するところまでがセットになっていることだろう。&lt;/p&gt;
&lt;p&gt;セキュリティに於いても PDCA サイクル，いや今なら OODA ループか，が重要ということやね（笑）&lt;/p&gt;
&lt;h2&gt;大変なのは&amp;hellip;&lt;/h2&gt;
&lt;p&gt;ZT を組み込むこと自体は，そう難しくないだろう。
おそらくは既存のシステムに ZT の仕組みをラッピングすることで構成可能なはずだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;&lt;img src=&#34;./zero-trust-access.png&#34; srcset=&#34;./zero-trust-access.png 1183w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;SP 800-207: Zero Trust Architecture&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34;&gt;SP 800-207: Zero Trust Architecture&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;大変なのは ZTA におけるリソースとサブジェクト（の権限）の定義・運用・評価だろう。
これ，かなり細かい要求分析が必要だと思うよ。&lt;/p&gt;
&lt;p&gt;当然ながら人間組織の役職で権限を決めるわけにはいかない。
システム管理者やセキュリティ管理者（セキュリティ企業も含めて）であっても「アクセスしてはいけないリソース」はある。
サブジェクトやリソースの杜撰な管理で &lt;a href=&#34;https://text.baldanders.info/remark/2020/07/class-breaks-from-twitter/&#34; title=&#34;Twitter から始まる Class Break&#34;&gt;Class Break を引き起こした Twitter&lt;/a&gt; の事例は耳に新しいだろう。
日本での最近の Class Break 事例は「ドコモロ系事案&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」か（笑）&lt;/p&gt;
&lt;p&gt;だからこそループを回して「改善」していかなければならないんだろうけど。
Refactoring することを前提としたシステム設計が大事。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-09-24-lightning-qa-devsecops-in-five-with-maya-kaczorowski/&#34;&gt;Lightning Q&amp;amp;A: DevSecOps in five with Maya Kaczorowski - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jpn.nec.com/cybersecurity/blog/201016/index.html&#34;&gt;【超図解】ゼロトラスト: NECセキュリティブログ | NEC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;NTT出版 2013-12-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-28&#34;&gt;2015-11-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 信頼と裏切りの社会 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B07ND6QTN4?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51NHngUGOFL._SL160_.jpg&#34; width=&#34;103&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07ND6QTN4?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ＯＯＤＡ　ＬＯＯＰ（ウーダループ）―次世代の最強組織に進化する意思決定スキル&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;チェット リチャーズ (著), 原田 勉 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;東洋経済新報社 2019-02-22 (Release 2019-02-22)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B07ND6QTN4 (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;買ったはいいが，実はまだ読んでない。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-07-02&#34;&gt;2019-07-02&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- OODA LOOP --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/16/064653&#34; title=&#34;不正利用が発生した電子決済サービスについてまとめてみた - piyolog&#34;&gt;キャッシュレス決済を使った不正利用に関する一連のインシデント&lt;/a&gt;のこと。 Facebook の TL で見かけた「ドコモロ系事案」のフレーズが面白かったので使ってみた（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
</feed>
