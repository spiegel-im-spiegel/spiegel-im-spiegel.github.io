<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of gcc - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/gcc/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/gcc/index.xml" />
	<id>tag:text.Baldanders.info,2018-03-31:/tags</id>
	<updated>2018-03-31T21:12:23+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>Go 言語で SQLite を使う（Windows 向けの紹介）</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/sqlite-with-golang-in-windows/" />
		<id>tag:text.Baldanders.info,2018-03-31:/golang/sqlite-with-golang-in-windows/</id>
		<published>2018-03-31T12:12:23+00:00</published>
		<updated>2020-03-06T11:35:54+00:00</updated>
		<summary>今回はパッケージの紹介のみ。つか，Windows で cgo を使うための覚え書きのようなものか。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;今回はパッケージの紹介のみ。
つか， Windows で cgo を使うための覚え書きのようなものか。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; はアプリケーションに組み込み可能な簡易 RDBMS で，公有（public domain）のソフトウェアとして公開されている。
C 言語で書かれているため多くのプラットフォームまたは（C 言語とバインド可能な）多くのプログラミング言語で利用可能である。
コア部分のコードが（他の製品に比べて）小さいため組込みソフトウェアで使われることもある。&lt;/p&gt;
&lt;h2&gt;mattn/go-sqlite3&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で利用可能な &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; パッケージはいくつか存在するが，標準の database/&lt;a href=&#34;https://golang.org/pkg/database/sql/&#34; title=&#34;sql - The Go Programming Language&#34;&gt;sql&lt;/a&gt; に対応しているのは &lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34; title=&#34;mattn/go-sqlite3: sqlite3 driver for go using database/sql&#34;&gt;mattn/go-sqlite3&lt;/a&gt; のみのようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34;&gt;mattn/go-sqlite3: sqlite3 driver for go using database/sql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このパッケージを利用するには &lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; が必要である（内部で C 言語コードのコンパイルを行うため）。
&lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; がない状態で &lt;code&gt;go get&lt;/code&gt; しようとすると以下のようにエラーになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go get -v github.com/mattn/go-sqlite3
github.com/mattn/go-sqlite3
# github.com/mattn/go-sqlite3
exec: &amp;#34;gcc&amp;#34;: executable file not found in %PATH%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なお，必要なコードは &lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34; title=&#34;mattn/go-sqlite3: sqlite3 driver for go using database/sql&#34;&gt;mattn/go-sqlite3&lt;/a&gt; に組み込まれているため &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; サイトからソースコードや DLL などのバイナリを別途取ってくる必要はない&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3&gt;GCC の導入&lt;/h3&gt;
&lt;p&gt;Linux などのプラットフォームには最初から &lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; が入っているが， Windows 環境には残念ながら入ってないので別途用意する必要がある&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
Windows 環境で &lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; &lt;strong&gt;のみ&lt;/strong&gt; が必要なのであれば &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; から Windows 用のバイナリを取得するのがお勧めである&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/03/mingw-w64/&#34;&gt;Mingw-w64 を導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;サンプルをコンパイルしてみる&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34; title=&#34;mattn/go-sqlite3: sqlite3 driver for go using database/sql&#34;&gt;mattn/go-sqlite3&lt;/a&gt; に &lt;code&gt;_example/simple/simple.go&lt;/code&gt; というサンプルファイルがあるので，これを動かして動作確認してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run simple.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;foo.db&lt;/code&gt; ファイルができていたら成功だ。
適当なブラウザツールで中身を確認してみるといいだろう。&lt;/p&gt;
&lt;p&gt;あぁ &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; 用の SQL 方言を覚えないと。
なんで製品ごとに SQL の方言がこんなに微妙な感じなんだろうねぇ。
特定の製品にロックインさせるための陰謀なのだろうか（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sqlitebrowser.org/&#34;&gt;DB Browser for SQLite&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/library/software/sqldbbrowser/&#34;&gt;「DB Browser for SQLite」“SQLite”のデータベースを管理できるソフト - 窓の杜ライブラリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://siguniang.wordpress.com/2012/11/10/notes-on-sqlite-vacuum/&#34;&gt;SQLiteのVACUUMメモ | Siguniang&amp;rsquo;s Blog&lt;/a&gt; : pragma を使って自動で vacuum できるらしい&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34; title=&#34;mattn/go-sqlite3: sqlite3 driver for go using database/sql&#34;&gt;mattn/go-sqlite3&lt;/a&gt; に組み込まれている &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; のバージョンは 2018-03-31 時点で 3.22.0 のようだ。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Windows 10 用の Linux 系サブシステムになら入ってると思うが，私は Windows 10 を使ったことがないのでよく知らない。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; だけでなく autotools などの周辺ツールも必要なら &lt;a href=&#34;http://www.msys2.org/&#34;&gt;MSYS2&lt;/a&gt; を導入するほうがいいかもしれない（参考： &lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&lt;/a&gt;）。今回は &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; で全く問題ない。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>MinGW-w64 を導入する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2018/03/mingw-w64/" />
		<id>tag:text.Baldanders.info,2018-03-31:/remark/2018/03/mingw-w64/</id>
		<published>2018-03-31T08:40:56+00:00</published>
		<updated>2021-10-02T00:47:40+00:00</updated>
		<summary>MinGW-w64 は Windows 用のバイナリを出力可能な GCC を含む開発環境を提供している。もちろん Windows 用のバイナリも存在する。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; は &lt;a href=&#34;http://www.mingw.org/&#34;&gt;MinGW (Minimalist GNU for Windows)&lt;/a&gt; の後継とも言えるプロジェクトで Windows 用のバイナリを出力可能な &lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; を含む開発環境を提供している。
&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; も &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; の成果を取り込んでいるので馴染みのある人もいるだろう&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mingw.org/&#34; title=&#34;MinGW | Minimalist GNU for Windows&#34;&gt;MinGW&lt;/a&gt; および &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; はどちらかと言うと Linux 系のプラットフォームで Windows 向けのビルドを行うクロスコンパイラとしての側面が強いが，もちろん Windows 用のバイナリも存在する。
&lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; の Windows 用インストーラは以下で取得できる&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mingw-w64.org/downloads/#mingw-builds&#34;&gt;Downloads - Mingw-w64&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストーラを起動すると以下のウィザード画面になる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./mingw-w64-install-1.png&#34;&gt;&lt;img src=&#34;./mingw-w64-install-1.png&#34; srcset=&#34;./mingw-w64-install-1.png 527w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing Mingw-w64 (1)&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./mingw-w64-install-1.png&#34;&gt;Installing Mingw-w64 (1)&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;このまま &lt;code&gt;[Next &amp;gt;]&lt;/code&gt;。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./mingw-w64-install-2.png&#34;&gt;&lt;img src=&#34;./mingw-w64-install-2.png&#34; srcset=&#34;./mingw-w64-install-2.png 527w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing Mingw-w64 (2)&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./mingw-w64-install-2.png&#34;&gt;Installing Mingw-w64 (2)&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;この画面でインストールする &lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; の種別を指定する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Version&lt;/em&gt; : &lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; のバージョン。特に理由がない限り最新版でいいだろう（2021-10-01 時点の最新は 8.1.0）&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Architecture&lt;/em&gt; : ターゲットシステムのアーキテクチャ。 &lt;code&gt;i686&lt;/code&gt; か &lt;code&gt;x86_64&lt;/code&gt; のいずれかを選択する。 &lt;code&gt;x86_64&lt;/code&gt; が64ビット版なのでご注意を&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Thread&lt;/em&gt; : スレッドモデル。 &lt;code&gt;posix&lt;/code&gt; か &lt;code&gt;win32&lt;/code&gt; のいずれかを選択する。 &lt;code&gt;win32&lt;/code&gt; は Windows ネイティブ関数を使っていて速いのだが C++ 11 以降の thread, mutex, future が使えなくなる。特に理由がないのであれば &lt;code&gt;posix&lt;/code&gt; でいいだろう&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Exception&lt;/em&gt; : 例外処理ハンドリング。アーキテクチャによって以下を選択できる。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i686&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dwarf&lt;/code&gt; : &lt;a href=&#34;http://ja.wikipedia.org/wiki/DWARF&#34;&gt;DWARF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sjlj&lt;/code&gt; : SetJump/LongJump&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x86_64&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seh&lt;/code&gt; : Structured Exception Handling （Windows ネイティブ。おすすめ）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sjlj&lt;/code&gt; : SetJump/LongJump&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Build Version&lt;/em&gt; : ビルドバージョン。特に理由がなければ最新版でいいだろう&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;種別を指定したら &lt;code&gt;[Next &amp;gt;]&lt;/code&gt;。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./mingw-w64-install-4.png&#34;&gt;&lt;img src=&#34;./mingw-w64-install-4.png&#34; srcset=&#34;./mingw-w64-install-4.png 527w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing Mingw-w64 (3)&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./mingw-w64-install-4.png&#34;&gt;Installing Mingw-w64 (3)&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;インストール先のフォルダを指定する。
既定のままではめっさ長い名前になるので変更したほうがいいかも？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[Next &amp;gt;]&lt;/code&gt; でインストールを開始する。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./mingw-w64-install-6.png&#34;&gt;&lt;img src=&#34;./mingw-w64-install-6.png&#34; srcset=&#34;./mingw-w64-install-6.png 527w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing Mingw-w64 (4)&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./mingw-w64-install-6.png&#34;&gt;Installing Mingw-w64 (4)&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;どうもネットから指定した種別に対応する圧縮ファイルをダウンロードしてバイナリを展開しているようだ。
完了したら &lt;code&gt;[Next &amp;gt;]&lt;/code&gt;。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./mingw-w64-install-7.png&#34;&gt;&lt;img src=&#34;./mingw-w64-install-7.png&#34; srcset=&#34;./mingw-w64-install-7.png 527w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Installing Mingw-w64 (5)&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./mingw-w64-install-7.png&#34;&gt;Installing Mingw-w64 (5)&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これで完了。
お疲れ様でした。&lt;/p&gt;
&lt;p&gt;試しに gcc を起動してみる。
こんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=C:/Program\ Files/mingw-w64/latest/mingw64/bin/../libexec/gcc/x86_64-w64-mingw32/8.1.0/lto-wrapper.exe
Target: x86_64-w64-mingw32
Configured with: ../../../src/gcc-8.1.0/configure --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --prefix=/mingw64 --with-sysroot=/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64 --enable-shared --enable-static --disable-multilib --enable-languages=c,c++,fortran,lto --enable-libstdcxx-time=yes --enable-threads=posix --enable-libgomp --enable-libatomic --enable-lto --enable-graphite --enable-checking=release --enable-fully-dynamic-string --enable-version-specific-runtime-libs --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-bootstrap --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-gnu-as --with-gnu-ld --with-arch=nocona --with-tune=core2 --with-libiconv --with-system-zlib --with-gmp=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-mpfr=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-mpc=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-isl=/c/mingw810/prerequisites/x86_64-w64-mingw32-static --with-pkgversion=&amp;#39;x86_64-posix-seh-rev0, Built by MinGW-W64 project&amp;#39; --with-bugurl=https://sourceforge.net/projects/mingw-w64 CFLAGS=&amp;#39;-O2 -pipe -fno-ident -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&amp;#39; CXXFLAGS=&amp;#39;-O2 -pipe -fno-ident -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&amp;#39; CPPFLAGS=&amp;#39; -I/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/include -I/c/mingw810/prerequisites/x86_64-zlib-static/include -I/c/mingw810/prerequisites/x86_64-w64-mingw32-static/include&amp;#39; LDFLAGS=&amp;#39;-pipe -fno-ident -L/c/mingw810/x86_64-810-posix-seh-rt_v6-rev0/mingw64/opt/lib -L/c/mingw810/prerequisites/x86_64-zlib-static/lib -L/c/mingw810/prerequisites/x86_64-w64-mingw32-static/lib &amp;#39;
Thread model: posix
gcc version 8.1.0 (x86_64-posix-seh-rev0, Built by MinGW-W64 project)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;インストーラ自体は環境変数を変更しないのだがインストールしたフォルダに &lt;code&gt;mingw-w64.bat&lt;/code&gt; というのができていて，これを起動すると PATH を追加してコマンドプロンプトを起動する。
常用するのであれば自前で環境変数を変更すればよい。&lt;/p&gt;
&lt;p&gt;削除する際はコントロールパネルの「プログラムと機能」から可能だがメチャメチャ分かりにくい名前になっている。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/40235231465/&#34;&gt;&lt;img src=&#34;https://photo.baldanders.info/flickr/image/40235231465_m.png&#34; srcset=&#34;https://photo.baldanders.info/flickr/image/40235231465_m.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Uninstalling Mingw-w64&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/40235231465/&#34;&gt;Uninstalling Mingw-w64&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;「プログラムと機能」の右上に検索窓があるのでそこで「mingw」と入力すれば上の画面のようになるので，これで該当プログラムを選択して削除すればいいだろう。&lt;/p&gt;
&lt;h2&gt;みんな大好き Hello World&lt;/h2&gt;
&lt;p&gt;では動作確認。
以下のコードを用意する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これをコンパイルして実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gcc hello.c

$ a.exe
hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4320026926?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41W69WGATNL._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4320026926?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語C 第2版 ANSI規格準拠&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;B.W. カーニハン (著), D.M. リッチー (著), 石田 晴久 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;共立出版 1989-06-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4320026926 (ASIN), 9784320026926 (EAN), 4320026926 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;通称 “K&amp;amp;R”。その筋の人々には「バイブル」と呼ばれる名著（当時は）。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-07&#34;&gt;2018-12-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語C --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873117364?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ng4usMVYL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl&gt;
    &lt;dt class=&#34;item&#34;&gt;&lt;a class=&#34;fn url&#34; href=&#34;https://www.amazon.co.jp/dp/4873117364?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Effective Modern C&amp;#43;&amp;#43; ―C&amp;#43;&amp;#43;11/14プログラムを進化させる42項目&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Scott Meyers (著), 千住 治郎 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリージャパン 2015-09-18&lt;/dd&gt;
    &lt;dd&gt;大型本&lt;/dd&gt;
    &lt;dd&gt;4873117364 (ASIN), 9784873117362 (EAN), 4873117364 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;C++ 再勉強中。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-09-22&#34;&gt;2016-09-22&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Effective Modern C++ --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のインストールについては拙文「&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 による gcc 開発環境の構築 ― MSYS2 のインストールから初期化処理まで&lt;/a&gt;」を参照のこと。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;SourceForge からのダウンロードなので取扱いに注意。ページの余計なところを触らないこと（笑）&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2016/03/gcc-msys2-3/" />
		<id>tag:text.Baldanders.info,2016-03-01:/remark/2016/03/gcc-msys2-3/</id>
		<published>2016-03-01T13:02:47+00:00</published>
		<updated>2019-07-01T13:48:09+00:00</updated>
		<summary>前回で gcc を導入できたので，実際にビルドを試してみる。今回はターゲットとして pgpdump を用いる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 のインストールから初期化処理まで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;gcc パッケージ群の導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34;&gt;pgpdump をビルドする&lt;/a&gt; （← イマココ）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;前回&lt;/a&gt;で gcc を導入できたので，実際にビルドを試してみる。
今回はターゲットとして &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; を用いる。&lt;/p&gt;
&lt;h2&gt;pgpdump&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; は山本和彦さんによる &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; パケットの&lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/ja/&#34;&gt;視覚化ツール&lt;/a&gt;。
ソースコードは &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;GitHub で公開&lt;/a&gt;されているが， UNIX 系のプラットフォームを前提に作られているため &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 上でビルドを行う。&lt;/p&gt;
&lt;p&gt;まずは &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; のソースコードをダウンロードする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git clone https://github.com/kazu-yamamoto/pgpdump.git
Cloning into &amp;#39;pgpdump&amp;#39;...
remote: Counting objects: 492, done.
Receiving objects:  59% (291remote: Total 492 (delta 0), reused 0 (delta 0), pack-reused 492 92
Receiving objects: 100% (492/492), 180.29 KiB | 0 bytes/s, done.
Resolving deltas: 100% (320/320), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;32bit 版のビルド&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; のビルド手順は &lt;code&gt;configure&lt;/code&gt; を実行した後 make を実行する&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
まずは何も考えずに &lt;code&gt;configure&lt;/code&gt; の実行してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd pgpdump/

$ ./configure
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for inflate in -lz... yes
checking for BZ2_bzBuffToBuffDecompress in -lbz2... yes
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for unistd.h... (cached) yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking unixlib/local.h usability... no
checking unixlib/local.h presence... no
checking for unixlib/local.h... no
checking whether time.h and sys/time.h may both be included... yes
checking whether struct tm is in sys/time.h or time.h... time.h
checking for struct tm.tm_zone... no
checking whether tzname is declared... yes
checking for tzname... yes
configure: creating ./config.status
config.status: creating Makefile
config.status: WARNING:  &amp;#39;Makefile.in&amp;#39; seems to ignore the --datarootdir setting
config.status: creating config.h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; ではパケット内の圧縮データを扱うため &lt;code&gt;libz&lt;/code&gt; および &lt;code&gt;libbz2&lt;/code&gt; が必要となるが，ちゃんと認識しているようだ。
これによって作成された &lt;code&gt;Makefile&lt;/code&gt; がこれ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;nv&#34;&gt;prefix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; /usr/local
&lt;span class=&#34;nv&#34;&gt;exec_prefix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;bindir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;exec_prefix&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/bin
&lt;span class=&#34;nv&#34;&gt;mandir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/share/man
&lt;span class=&#34;nv&#34;&gt;LIBS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; -lbz2 -lz
&lt;span class=&#34;nv&#34;&gt;CFLAGS&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; -g -O2 -O -Wall
&lt;span class=&#34;nv&#34;&gt;LDFLAGS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;git tag &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tail -1 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/v//&amp;#39;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;RM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; rm -f
&lt;span class=&#34;nv&#34;&gt;INSTALL&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; install

&lt;span class=&#34;nv&#34;&gt;INCS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pgpdump.h
&lt;span class=&#34;nv&#34;&gt;SRCS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pgpdump.c types.c tagfuncs.c packet.c subfunc.c signature.c keys.c &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;       buffer.c uatfunc.c
&lt;span class=&#34;nv&#34;&gt;OBJS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;       buffer.o uatfunc.o
&lt;span class=&#34;nv&#34;&gt;PROG&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pgpdump

&lt;span class=&#34;nv&#34;&gt;MAN&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pgpdump.1

&lt;span class=&#34;nv&#34;&gt;CNF&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; config.h config.status config.cache config.log
&lt;span class=&#34;nv&#34;&gt;MKF&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Makefile

&lt;span class=&#34;nf&#34;&gt;.c.o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -c &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; $&amp;lt;

&lt;span class=&#34;nf&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PROG&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;$(PROG)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;OBJS&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -o &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;PROG&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OBJS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;LIBS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;LDFLAGS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;RM&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OBJS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;PROG&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;distclean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;RM&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OBJS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;PROG&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CNF&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;MKF&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;INSTALL&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -d &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)$(&lt;/span&gt;bindir&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;INSTALL&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -cp -pm755 &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;PROG&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)$(&lt;/span&gt;bindir&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;INSTALL&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -d &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)$(&lt;/span&gt;mandir&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/man1
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;INSTALL&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -cp -pm644 &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;MAN&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)$(&lt;/span&gt;mandir&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/man1

&lt;span class=&#34;nf&#34;&gt;archive&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    git archive master -o ~/pgpdump-&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;VERSION&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;.tar --prefix&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;pgpdump-&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;VERSION&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/
    gzip ~/pgpdump-&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;VERSION&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この時点での問題は以下のとおり。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; が &lt;code&gt;/usr/local&lt;/code&gt; になっている。このままでもエラーにはならないが，今回は 32bit 版と 64bit 版を分けたいので &lt;code&gt;/mingw32&lt;/code&gt; としたい&lt;/li&gt;
&lt;li&gt;リンク時のオプション（&lt;code&gt;LDFLAGS&lt;/code&gt;）に &lt;code&gt;-static&lt;/code&gt; がないため，このままビルドすると DLL に依存する構成になってしまう&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これらについては &lt;code&gt;configure&lt;/code&gt; に情報を渡せばよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ./configure --prefix=/mingw32 LDFLAGS=-static
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;Makefile&lt;/code&gt; は以下のようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;nv&#34;&gt;prefix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; /mingw32
&lt;span class=&#34;nv&#34;&gt;exec_prefix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;bindir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;exec_prefix&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/bin
&lt;span class=&#34;nv&#34;&gt;mandir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/share/man
&lt;span class=&#34;nv&#34;&gt;LIBS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; -lbz2 -lz
&lt;span class=&#34;nv&#34;&gt;CFLAGS&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; -g -O2 -O -Wall
&lt;span class=&#34;nv&#34;&gt;LDFLAGS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; -static
&lt;span class=&#34;nv&#34;&gt;VERSION&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;git tag &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tail -1 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/v//&amp;#39;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;RM&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; rm -f
&lt;span class=&#34;nv&#34;&gt;INSTALL&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; install

&lt;span class=&#34;nv&#34;&gt;INCS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pgpdump.h
&lt;span class=&#34;nv&#34;&gt;SRCS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pgpdump.c types.c tagfuncs.c packet.c subfunc.c signature.c keys.c &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;       buffer.c uatfunc.c
&lt;span class=&#34;nv&#34;&gt;OBJS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;       buffer.o uatfunc.o
&lt;span class=&#34;nv&#34;&gt;PROG&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pgpdump

&lt;span class=&#34;nv&#34;&gt;MAN&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; pgpdump.1

&lt;span class=&#34;nv&#34;&gt;CNF&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; config.h config.status config.cache config.log
&lt;span class=&#34;nv&#34;&gt;MKF&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Makefile

&lt;span class=&#34;nf&#34;&gt;.c.o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -c &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; $&amp;lt;

&lt;span class=&#34;nf&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PROG&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;$(PROG)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;OBJS&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -o &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;PROG&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OBJS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;LIBS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;LDFLAGS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;RM&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OBJS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;PROG&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;distclean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;RM&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OBJS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;PROG&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CNF&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;MKF&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;INSTALL&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -d &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)$(&lt;/span&gt;bindir&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;INSTALL&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -cp -pm755 &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;PROG&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)$(&lt;/span&gt;bindir&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;INSTALL&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -d &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)$(&lt;/span&gt;mandir&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/man1
    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;INSTALL&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -cp -pm644 &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;MAN&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;DESTDIR&lt;span class=&#34;k&#34;&gt;)$(&lt;/span&gt;mandir&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/man1

&lt;span class=&#34;nf&#34;&gt;archive&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    git archive master -o ~/pgpdump-&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;VERSION&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;.tar --prefix&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;pgpdump-&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;VERSION&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/
    gzip ~/pgpdump-&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;VERSION&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;では make を実行しよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ make
cc -c -g -O2 -O -Wall pgpdump.c
cc -c -g -O2 -O -Wall types.c
cc -c -g -O2 -O -Wall tagfuncs.c
cc -c -g -O2 -O -Wall packet.c
cc -c -g -O2 -O -Wall subfunc.c
cc -c -g -O2 -O -Wall signature.c
cc -c -g -O2 -O -Wall keys.c
cc -c -g -O2 -O -Wall buffer.c
cc -c -g -O2 -O -Wall uatfunc.c
cc -g -O2 -O -Wall -o pgpdump pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o buffer.o uatfunc.o -lbz2 -lz  -static

$ strip pgpdump.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;できた実行ファイルをコマンドプロンプトから起動してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;C:&amp;gt;pgpdump.exe -v
pgpdump.exe version 0.29, Copyright (C) 1998-2014 Kazu Yamamoto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;うまくいったようである。&lt;/p&gt;
&lt;h2&gt;64bit 版のビルド&lt;/h2&gt;
&lt;p&gt;32bit 版で要領は分かったので一気に終わらせてしまおう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git clone https://github.com/kazu-yamamoto/pgpdump.git
Cloning into &amp;#39;pgpdump&amp;#39;...
remote: Counting objects: 492, done.
Receiving objects:  62% (306remote: Total 492 (delta 0), reused 0 (delta 0), pack-reused 492/92
Receiving objects: 100% (492/492), 180.29 KiB | 0 bytes/s, done.
Resolving deltas: 100% (320/320), done.
Checking connectivity... done.

$ cd pgpdump/

$ ./configure --prefix=/mingw64 LDFLAGS=-static
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for inflate in -lz... yes
checking for BZ2_bzBuffToBuffDecompress in -lbz2... yes
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for unistd.h... (cached) yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking unixlib/local.h usability... no
checking unixlib/local.h presence... no
checking for unixlib/local.h... no
checking whether time.h and sys/time.h may both be included... yes
checking whether struct tm is in sys/time.h or time.h... time.h
checking for struct tm.tm_zone... no
checking whether tzname is declared... yes
checking for tzname... yes
configure: creating ./config.status
config.status: creating Makefile
config.status: WARNING:  &amp;#39;Makefile.in&amp;#39; seems to ignore the --datarootdir setting
config.status: creating config.h

$ make
cc -c -g -O2 -O -Wall pgpdump.c
cc -c -g -O2 -O -Wall types.c
cc -c -g -O2 -O -Wall tagfuncs.c
cc -c -g -O2 -O -Wall packet.c
cc -c -g -O2 -O -Wall subfunc.c
cc -c -g -O2 -O -Wall signature.c
cc -c -g -O2 -O -Wall keys.c
cc -c -g -O2 -O -Wall buffer.c
cc -c -g -O2 -O -Wall uatfunc.c
cc -g -O2 -O -Wall -o pgpdump pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o buffer.o uatfunc.o -lbz2 -lz  -static

$ strip pgpdump.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これもコマンドプロンプト上で起動してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;C:&amp;gt;pgpdump.exe -v
pgpdump.exe version 0.29, Copyright (C) 1998-2014 Kazu Yamamoto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;問題なし。&lt;/p&gt;
&lt;h2&gt;動作確認&lt;/h2&gt;
&lt;p&gt;実際にちゃんと動くかどうか &lt;a href=&#34;https://www.jpcert.or.jp/jpcert-pgp.html&#34; title=&#34;JPCERT コーディネーションセンター PGP公開鍵&#34;&gt;JPCERT/CC の公開鍵&lt;/a&gt;をを使って確認してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;C:&amp;gt;pgpdump.exe info-0x69ECE048.asc
Old: Public Key Packet(tag 6)(269 bytes)
        Ver 4 - new
        Public key creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Pub alg - RSA Encrypt or Sign(pub 1)
        RSA n(2048 bits) - ...
        RSA e(17 bits) - ...
Old: User ID Packet(tag 13)(29 bytes)
        User ID - JPCERT/CC &amp;lt;info@jpcert.or.jp&amp;gt;
Old: Signature Packet(tag 2)(316 bytes)
        Ver 4 - new
        Sig type - Generic certification of a User ID and Public Key packet(0x10).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: preferred symmetric algorithms(sub 11)(3 bytes)
                Sym alg - AES with 256-bit key(sym 9)
                Sym alg - CAST5(sym 3)
                Sym alg - Triple-DES(sym 2)
        Hashed Sub: key server preferences(sub 23)(4 bytes)
                Flag - No-modify
        Hashed Sub: key flags(sub 27)(4 bytes)
                Flag - This key may be used to certify other keys
                Flag - This key may be used to sign data
                Flag - This key may be used to encrypt communications
                Flag - This key may be used to encrypt storage
                Flag - The private component of this key may be in the possession of more than one person
        Hashed Sub: preferred compression algorithms(sub 22)(2 bytes)
                Comp alg - ZLIB &amp;lt;RFC1950&amp;gt;(comp 2)
                Comp alg - ZIP &amp;lt;RFC1951&amp;gt;(comp 1)
        Hashed Sub: features(sub 30)(4 bytes)
                Flag - Modification detection (packets 18 and 19)
        Hashed Sub: preferred hash algorithms(sub 21)(3 bytes)
                Hash alg - SHA256(hash 8)
                Hash alg - SHA384(hash 9)
                Hash alg - SHA512(hash 10)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 16 12:51:22 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x317D97A469ECE048
        Hash left 2 bytes - cd 79
        RSA m^d mod n(2047 bits) - ...
                -&amp;gt; PKCS-1
Old: Signature Packet(tag 2)(277 bytes)
        Ver 3 - old
        Hash material(5 bytes):
                Sig type - Generic certification of a User ID and Public Key packet(0x10).
                Creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Key ID - 0xE7734FA60C7BDE12
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hash left 2 bytes - e9 53
        RSA m^d mod n(2047 bits) - ...
                -&amp;gt; PKCS-1
Old: Signature Packet(tag 2)(156 bytes)
        Ver 4 - new
        Sig type - Generic certification of a User ID and Public Key packet(0x10).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Mon Jun 15 14:51:27 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x8C756B2E2C94D4ED
        Hash left 2 bytes - 35 fd
        RSA m^d mod n(1022 bits) - ...
                -&amp;gt; PKCS-1
Old: Public Subkey Packet(tag 14)(269 bytes)
        Ver 4 - new
        Public key creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Pub alg - RSA Encrypt or Sign(pub 1)
        RSA n(2048 bits) - ...
        RSA e(17 bits) - ...
Old: Signature Packet(tag 2)(577 bytes)
        Ver 4 - new
        Sig type - Subkey Binding Signature(0x18).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 02 14:43:58 東京 (標準時) 2009
        Hashed Sub: key flags(sub 27)(4 bytes)
                Flag - This key may be used to encrypt communications
                Flag - This key may be used to encrypt storage
        Hashed Sub: embedded signature(sub 32)(284 bytes)
        Ver 4 - new
        Sig type - Primary Key Binding Signature(0x19).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA256(hash 8)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x09D704B753BA1622
        Hash left 2 bytes - 71 2d
        RSA m^d mod n(2048 bits) - ...
                -&amp;gt; PKCS-1
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x317D97A469ECE048
        Hash left 2 bytes - 1d e2
        RSA m^d mod n(2046 bits) - ...
                -&amp;gt; PKCS-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;うむ，問題ないようだな。
ちなみに Windows バイナリは&lt;a href=&#34;https://baldanders.info/spiegel/pgpdump/&#34;&gt;うちのサイトでも公開&lt;/a&gt;しているのでご自由にどうぞ。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;前回&lt;/a&gt;インストールした &lt;code&gt;base-devel&lt;/code&gt; パッケージグループは今回の &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; ビルドには必要なく，インストールしなくても問題ない。まぁ今回は単純なビルドだし。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2016/03/gcc-msys2-2/" />
		<id>tag:text.Baldanders.info,2016-03-01:/remark/2016/03/gcc-msys2-2/</id>
		<published>2016-03-01T13:02:44+00:00</published>
		<updated>2019-07-01T13:48:09+00:00</updated>
		<summary>いよいよ gcc をインストールする。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 のインストールから初期化処理まで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;gcc パッケージ群の導入&lt;/a&gt; （← イマココ）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34;&gt;pgpdump をビルドする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;いよいよ gcc をインストールする。
その前に&amp;hellip;&lt;/p&gt;
&lt;h2&gt;pacman によるパッケージ管理&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;の初期化でもちょっとだけ出てきたが， &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のパッケージ管理には pacman コマンドを使う。
pacman は元々 Arch Linux のパッケージ管理ツールで，使い方もこれと同じようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://archlinuxjp.kusakata.com/wiki/Pacman&#34;&gt;pacman - ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;よく使うコマンドとしては&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;コマンドライン&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;処理内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pacman -S &amp;lt;package_name1&amp;gt; [package_name2...]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定したパッケージをインストールする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pacman -Sl [repository]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;パッケージを一覧表示する（リポジトリを指定可能）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pacman -Ss [regex...]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;パッケージを一覧・検索する（キーワードを指定可能）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pacman -Su&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;インストール済みのパッケージを更新する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pacman -Sy&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;パッケージのデータベースを更新する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pacman -Syu&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;-Su&lt;/code&gt;, &lt;code&gt;-Sy&lt;/code&gt; の同時指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pacman -Q [package_name...]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;インストール済みパッケージを一覧・検索する（パッケージを指定可能）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pacman -Qs [regex...]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;インストール済みパッケージを一覧・検索する（をキーワードを指定可能）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pacman -R &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定したパッケージを削除する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pacman -Rs &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;依存関係を含めて指定したパッケージを削除する（指定したパッケージにのみ依存するパッケージを削除）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;あたりか。&lt;/p&gt;
&lt;h3&gt;MSYS2 のリポジトリ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/etc/pacman.conf&lt;/code&gt; を見ると MSYS2 では &lt;code&gt;mingw32&lt;/code&gt;, &lt;code&gt;mingw64&lt;/code&gt;, &lt;code&gt;msys&lt;/code&gt; の3つのリポジトリを管理していることが分かる。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;リポジトリ名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;参照ファイル&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;mingw32&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.mingw32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;mingw64&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.mingw64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;msys&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.msys&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;実際には「参照ファイル」にリポジトリへの URI が書かれている。
たとえば &lt;code&gt;/etc/pacman.d/mirrorlist.mingw32&lt;/code&gt; ならこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;##
## 32-bit Mingw-w64 repository mirrorlist
##

## Primary
## msys2.org
Server = http://repo.msys2.org/mingw/i686
Server = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686
Server = http://www2.futureware.at/~nickoe/msys2-mirror/i686/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;では実際にリポジトリの中を覗いてみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ pacman -Sl | grep gcc
mingw32 mingw-w64-i686-gcc 7.3.0-1
mingw32 mingw-w64-i686-gcc-ada 7.3.0-1
mingw32 mingw-w64-i686-gcc-fortran 7.3.0-1
mingw32 mingw-w64-i686-gcc-libgfortran 7.3.0-1
mingw32 mingw-w64-i686-gcc-libs 7.3.0-1
mingw32 mingw-w64-i686-gcc-objc 7.3.0-1
mingw64 mingw-w64-x86_64-gcc 7.3.0-1
mingw64 mingw-w64-x86_64-gcc-ada 7.3.0-1
mingw64 mingw-w64-x86_64-gcc-fortran 7.3.0-1
mingw64 mingw-w64-x86_64-gcc-libgfortran 7.3.0-1
mingw64 mingw-w64-x86_64-gcc-libs 7.3.0-1
mingw64 mingw-w64-x86_64-gcc-objc 7.3.0-1
msys gcc 6.4.0-3
msys gcc-fortran 6.4.0-3
msys gcc-libs 6.4.0-3 [インストール済み]
msys mingw-w64-cross-gcc 6.4.0-2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;どれを使うかはユーザ次第だが，今回は &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 内ではなく Windows 環境で動作するアプリケーションを作りたいので， &lt;code&gt;mingw32&lt;/code&gt; および &lt;code&gt;mingw64&lt;/code&gt; リポジトリのものを導入する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chromabox/items/fd07bad3f426101fc4a6&#34;&gt;Windowsでgccなどを利用できるMSYS2の環境設定など - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;gcc のインストール&lt;/h2&gt;
&lt;p&gt;では gcc のインストールを始めよう。
今回は以下のパッケージグループを導入する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingw-w64-i686-toolchain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingw-w64-x86_64-toolchain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ものすごく分かりにくいが &lt;code&gt;mingw-w64-x86_64-toolchain&lt;/code&gt; が 64bit 用である。
コマンドラインは以下の通り（ログがかなり長くなるので省略）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ pacman -S base-devel mingw-w64-i686-toolchain mingw-w64-x86_64-toolchain
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;gcc の動作確認&lt;/h3&gt;
&lt;p&gt;まずは 32bit 版の動作確認。
&lt;code&gt;mingw32.exe&lt;/code&gt; を起動，または 環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; に &lt;code&gt;MINGW32&lt;/code&gt; をセットして shell を起動する。
&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; を使うのであれば以下のシーケンスで起動できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;set MSYSTEM=MINGW32 &amp;amp; chcp 65001 &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;gcc を起動して動作確認。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gcc -v
Using built-in specs.
COLLECT_GCC=C:\msys64\mingw32\bin\gcc.exe
COLLECT_LTO_WRAPPER=C:/msys64/mingw32/bin/../lib/gcc/i686-w64-mingw32/7.3.0/lto-wrapper.exe
Target: i686-w64-mingw32
Configured with: ../gcc-7.3.0/configure --prefix=/mingw32 --with-local-prefix=/mingw32/local --build=i686-w64-mingw32 --host=i686-w64-mingw32 --target=i686-w64-mingw32 --with-native-system-header-dir=/mingw32/i686-w64-mingw32/include --libexecdir=/mingw32/lib --enable-bootstrap --with-arch=i686 --with-tune=generic --enable-languages=c,lto,c++,objc,obj-c++,fortran,ada --enable-shared --enable-static --enable-libatomic --enable-threads=posix --enable-graphite --enable-fully-dynamic-string --enable-libstdcxx-time=yes --enable-libstdcxx-filesystem-ts=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --disable-isl-version-check --enable-lto --enable-libgomp --disable-multilib --enable-checking=release --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-libiconv --with-system-zlib --with-gmp=/mingw32 --with-mpfr=/mingw32 --with-mpc=/mingw32 --with-isl=/mingw32 --with-pkgversion=&amp;#39;Rev1, Built by MSYS2 project&amp;#39; --with-bugurl=https://sourceforge.net/projects/msys2 --with-gnu-as --with-gnu-ld --disable-sjlj-exceptions --with-dwarf2
Thread model: posix
gcc version 7.3.0 (Rev1, Built by MSYS2 project)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次に 64bit 版の動作確認。
動作確認には &lt;code&gt;mingw64.exe&lt;/code&gt; を起動，または 環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; に &lt;code&gt;MINGW64&lt;/code&gt; をセットして shell を起動する。
&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; を使うのであれば以下のシーケンスで起動できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;set MSYSTEM=MINGW64 &amp;amp; chcp 65001 &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;gcc を起動して動作確認。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gcc -v
Using built-in specs.
COLLECT_GCC=C:\msys64\mingw64\bin\gcc.exe
COLLECT_LTO_WRAPPER=C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/7.3.0/lto-wrapper.exe
Target: x86_64-w64-mingw32
Configured with: ../gcc-7.3.0/configure --prefix=/mingw64 --with-local-prefix=/mingw64/local --build=x86_64-w64-mingw32 --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --with-native-system-header-dir=/mingw64/x86_64-w64-mingw32/include --libexecdir=/mingw64/lib --enable-bootstrap --with-arch=x86-64 --with-tune=generic --enable-languages=c,lto,c++,objc,obj-c++,fortran,ada --enable-shared --enable-static --enable-libatomic --enable-threads=posix --enable-graphite --enable-fully-dynamic-string --enable-libstdcxx-time=yes --enable-libstdcxx-filesystem-ts=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --disable-isl-version-check --enable-lto --enable-libgomp --disable-multilib --enable-checking=release --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-libiconv --with-system-zlib --with-gmp=/mingw64 --with-mpfr=/mingw64 --with-mpc=/mingw64 --with-isl=/mingw64 --with-pkgversion=&amp;#39;Rev1, Built by MSYS2 project&amp;#39; --with-bugurl=https://sourceforge.net/projects/msys2 --with-gnu-as --with-gnu-ld
Thread model: posix
gcc version 7.3.0 (Rev1, Built by MSYS2 project)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ターゲット名が &lt;code&gt;x86_64-w64-mingw32&lt;/code&gt; となっていて非常に分かりにくいが， mingw32 版では &lt;code&gt;i686-w64-mingw32&lt;/code&gt; となっているので，なんとか区別して欲しい。&lt;/p&gt;
&lt;h2&gt;gcc のスレッドモデルと例外処理&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; で提供される gcc のスレッドモデルと例外処理は以下のようになっているらしい。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;On MSYS2 I maintain only one configuration:&lt;br&gt;
32-bit: threads=posix, exceptions=dwarf&lt;br&gt;
64-bit: threads=posix, exceptions=seh&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;http://sourceforge.net/p/msys2/tickets/24/&#34;&gt;MSYS2 / Tickets / #24 Mingw64 downloads through msys2?&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のベースになっている &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; のスレッドモデルには win32 と posix が提供されている。 win32 は Windows ネイティブなスレッド関連関数を使っているため速いが， C++11 の thread, mutex, future はサポートしていないらしい。
一方，例外処理には SJLJ（SetJump/LongJump）， &lt;a href=&#34;http://ja.wikipedia.org/wiki/DWARF&#34;&gt;DWARF&lt;/a&gt;2， SEH（Structured Exception Handling）があり，この中では Windows ネイティブな SEH が一番速い。ただし SEH は 64bit gcc でしか対応していないため 32bit 環境では使えない&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; のもうひとつの実装である &lt;a href=&#34;http://tdm-gcc.tdragon.net/&#34; title=&#34;TDM-GCC&#34;&gt;TDM-GCC&lt;/a&gt; では，スレッドモデルには posix，例外処理には SJLJ（32bit）または SEH（64bit）が設定されているようだ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;TDM-GCC includes a pthreads emulation layer for Microsoft Windows systems, called &#34;winpthreads&#34;. This lets you use std::thread and other C++11 concurrency features in your programs, out of the box.&lt;br&gt;
[...]&lt;br&gt;
64-bit binaries use &#34;SEH&#34;, which stands for &#34;Structured Exception Handling&#34;.&lt;br&gt;
[...]&lt;br&gt;
If you create a 32-bit binary with the TDM64 edition, it will use SJLJ exception handling. DW2 exception handling is not available in this edition.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;http://tdm-gcc.tdragon.net/quirks&#34;&gt;TDM-GCC : Quirks&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする&#34;&gt;次回&lt;/a&gt;は実際にビルドを行う。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ちなみにオリジナルの &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; ではインストール時にスレッドモデルと例外処理を選択できる。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>MSYS2 による gcc 開発環境の構築 ― MSYS2 のインストールから初期化処理まで</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2016/03/gcc-msys2-1/" />
		<id>tag:text.Baldanders.info,2016-03-01:/remark/2016/03/gcc-msys2-1/</id>
		<published>2016-03-01T13:02:41+00:00</published>
		<updated>2019-07-01T13:48:09+00:00</updated>
		<summary>MSYS の後継（？）とも言える MSYS2 では開発環境を 32bit と 64bit で併設できるらしい。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;これは Qiita の以下の記事からの再構成である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/ba4e8d2418bdfe0c8049&#34;&gt;MSYS2 による gcc 開発環境の構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/877cbfb970509b272fc1&#34;&gt;MSYS2 による gcc 開発環境の構築（2） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここでは以下の3部構成になっている。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 のインストールから初期化処理まで&lt;/a&gt; （← イマココ）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;gcc パッケージ群の導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34;&gt;pgpdump をビルドする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;gcc と MSYS2&lt;/h2&gt;
&lt;p&gt;MSYS の後継（？）とも言える &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; では gcc を含む開発環境を 32bit と 64bit で併設できるらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msys2.github.io/&#34;&gt;MSYS2 installer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/msys2&#34;&gt;msys2&lt;/a&gt; : GitHub ページ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; を使って gcc 開発環境を構築する。&lt;/p&gt;
&lt;p&gt;なお，単に gcc が欲しいのであれば &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; から Windows 用のバイナリを取得するほうがお勧めである&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/03/mingw-w64/&#34;&gt;MinGW-w64 を導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そうではなく autotools などを含む UNIX 互換の環境が必要なのであれば，今回紹介する &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; が適切と思われる（UNIX 系のコマンドを Windows にポーティングする場合など）。
また開発環境は要らないが UNIX 互換の動作環境が欲しいだけなら &lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; を導入する手もある&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2&gt;MSYS2 のインストール&lt;/h2&gt;
&lt;p&gt;では早速 64bit 版インストーラ（今回は &lt;code&gt;msys2-x86_64-20161025.exe&lt;/code&gt; を使用）でインストールを行ってみる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/25210363812/&#34;&gt;&lt;img src=&#34;https://photo.baldanders.info/flickr/image/25210363812_m.png&#34; srcset=&#34;https://photo.baldanders.info/flickr/image/25210363812_m.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;MSYS2 Installing (1)&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/25210363812/&#34;&gt;MSYS2 Installing (1)&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;わお！ 日本語だ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/25032985150/&#34;&gt;&lt;img src=&#34;https://photo.baldanders.info/flickr/image/25032985150_m.png&#34; srcset=&#34;https://photo.baldanders.info/flickr/image/25032985150_m.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;MSYS2 Installing (2)&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/25032985150/&#34;&gt;MSYS2 Installing (2)&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/24960938719/&#34;&gt;&lt;img src=&#34;https://photo.baldanders.info/flickr/image/24960938719_m.png&#34; srcset=&#34;https://photo.baldanders.info/flickr/image/24960938719_m.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;MSYS2 Installing (3)&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/24960938719/&#34;&gt;MSYS2 Installing (3)&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/25235500391/&#34;&gt;&lt;img src=&#34;https://photo.baldanders.info/flickr/image/25235500391_m.png&#34; srcset=&#34;https://photo.baldanders.info/flickr/image/25235500391_m.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;MSYS2 Installing (5)&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/25235500391/&#34;&gt;MSYS2 Installing (5)&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/25235500391/&#34;&gt;&lt;img src=&#34;https://photo.baldanders.info/flickr/image/25235500391_m.png&#34; srcset=&#34;https://photo.baldanders.info/flickr/image/25235500391_m.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;MSYS2 Installing (5)&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/25235500391/&#34;&gt;MSYS2 Installing (5)&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;このまま「完了」するとターミナル（&lt;a href=&#34;https://mintty.github.io/&#34; title=&#34;Mintty — Cygwin Terminal emulator&#34;&gt;mintty&lt;/a&gt;）が起動する。
のだが，ここでちょっと寄り道する。
「MSYS2 64bit を実行中」のチェックを外して「完了」しよう。&lt;/p&gt;
&lt;h3&gt;MSYS2 起動モード&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; には3つの起動モジュールがある（64bit 版をインストールした場合）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mingw32.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingw64.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;msys2.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;またそれぞれに ini ファイルが用意されている。
たとえば &lt;code&gt;msys2.exe&lt;/code&gt; であればこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#MSYS=winsymlinks:nativestrict&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#MSYS=error_start:mingw64/bin/qtcreator.exe|-debug|&amp;lt;process-id&amp;gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#CHERE_INVOKING=1&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#MSYS2_PATH_TYPE=inherit&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;MSYSTEM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;MSYS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;どうやら ini ファイルの内容をそのまま環境変数として渡しているようだ。
このうち &lt;code&gt;MSYSTEM&lt;/code&gt; に注目すると以下のようになっている。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;バッチファイル&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;セットする値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;mingw32.exe&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;MINGW32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;mingw64.exe&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;MINGW64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;msys2.exe&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;MSYS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;MSYSTEM&lt;/code&gt; は &lt;code&gt;/etc/profile&lt;/code&gt; 内で参照される。
以下に &lt;code&gt;/etc/profile&lt;/code&gt; の一部を引用する。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-test&#34; data-lang=&#34;test&#34;&gt;MSYS2_PATH=&amp;quot;/usr/local/bin:/usr/bin:/bin&amp;quot;
MANPATH=&#39;/usr/local/man:/usr/share/man:/usr/man:/share/man&#39;
INFOPATH=&#39;/usr/local/info:/usr/share/info:/usr/info:/share/info&#39;

case &amp;quot;${MSYS2_PATH_TYPE:-minimal}&amp;quot; in
  strict)
    # Do not inherit any path configuration, and allow for full customization
    # of external path. This is supposed to be used in special cases such as
    # debugging without need to change this file, but not daily usage.
    unset ORIGINAL_PATH
    ;;
  inherit)
    # Inherit previous path. Note that this will make all of the Windows path
    # available in current shell, with possible interference in project builds.
    ORIGINAL_PATH=&amp;quot;${ORIGINAL_PATH:-${PATH}}&amp;quot;
    ;;
  *)
    # Do not inherit any path configuration but configure a default Windows path
    # suitable for normal usage with minimal external interference.
    WIN_ROOT=&amp;quot;$(PATH=${MSYS2_PATH} cygpath -Wu)&amp;quot;
    ORIGINAL_PATH=&amp;quot;${WIN_ROOT}/System32:${WIN_ROOT}:${WIN_ROOT}/System32/Wbem:${WIN_ROOT}/System32/WindowsPowerShell/v1.0/&amp;quot;
esac

unset MINGW_MOUNT_POINT
source &#39;/etc/msystem&#39;
case &amp;quot;${MSYSTEM}&amp;quot; in
MINGW32)
  MINGW_MOUNT_POINT=&amp;quot;${MINGW_PREFIX}&amp;quot;
  PATH=&amp;quot;${MINGW_MOUNT_POINT}/bin:${MSYS2_PATH}${ORIGINAL_PATH:+:${ORIGINAL_PATH}}&amp;quot;
  PKG_CONFIG_PATH=&amp;quot;${MINGW_MOUNT_POINT}/lib/pkgconfig:${MINGW_MOUNT_POINT}/share/pkgconfig&amp;quot;
  ACLOCAL_PATH=&amp;quot;${MINGW_MOUNT_POINT}/share/aclocal:/usr/share/aclocal&amp;quot;
  MANPATH=&amp;quot;${MINGW_MOUNT_POINT}/share/man:${MANPATH}&amp;quot;
  ;;
MINGW64)
  MINGW_MOUNT_POINT=&amp;quot;${MINGW_PREFIX}&amp;quot;
  PATH=&amp;quot;${MINGW_MOUNT_POINT}/bin:${MSYS2_PATH}${ORIGINAL_PATH:+:${ORIGINAL_PATH}}&amp;quot;
  PKG_CONFIG_PATH=&amp;quot;${MINGW_MOUNT_POINT}/lib/pkgconfig:${MINGW_MOUNT_POINT}/share/pkgconfig&amp;quot;
  ACLOCAL_PATH=&amp;quot;${MINGW_MOUNT_POINT}/share/aclocal:/usr/share/aclocal&amp;quot;
  MANPATH=&amp;quot;${MINGW_MOUNT_POINT}/share/man:${MANPATH}&amp;quot;
  ;;
*)
  PATH=&amp;quot;${MSYS2_PATH}:/opt/bin${ORIGINAL_PATH:+:${ORIGINAL_PATH}}&amp;quot;
  PKG_CONFIG_PATH=&amp;quot;/usr/lib/pkgconfig:/usr/share/pkgconfig:/lib/pkgconfig&amp;quot;
esac
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;MINGW32&lt;/code&gt; または &lt;code&gt;MINGW64&lt;/code&gt; の場合は，新たに &lt;code&gt;/mingw32&lt;/code&gt; または &lt;code&gt;/mingw64&lt;/code&gt; がパス等に追加されているのがお分かりだろうか。&lt;/p&gt;
&lt;h3&gt;ConEmu から MSYS2 bash を起動する&lt;/h3&gt;
&lt;p&gt;以上から，環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; を適切に設定すれば &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の起動モジュールを介さずに shell を起動しても構わないことが分かる。
ここでは &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; から &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の bash を起動することを考える。
以下のように Tasks 設定で &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の bash を起動するシーケンスを設定すればよい。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/22388493089/&#34;&gt;&lt;img src=&#34;https://photo.baldanders.info/flickr/image/22388493089_m.png&#34; srcset=&#34;https://photo.baldanders.info/flickr/image/22388493089_m.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ConEmu Setting&#34; loading=&#34;lazy&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/22388493089/&#34;&gt;ConEmu Setting&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;起動シーケンスは以下のとおり。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;set MSYSTEM=MSYS &amp;amp; chcp 65001 &amp;amp; C:\msys64\usr\bin\bash.exe --login -i -new_console:C:&amp;#34;C:\msys64\msys2.ico&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;前半で環境変数とコードページ（65001 は UTF-8）を設定し，後半で実際に bash を呼び出している。&lt;/p&gt;
&lt;h2&gt;初期設定&lt;/h2&gt;
&lt;p&gt;では本題に戻ろう。
&lt;code&gt;msys2.exe&lt;/code&gt; または環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; に &lt;code&gt;MSYS&lt;/code&gt; をセットして shell を起動し，まずはコア・パッケージを最新のものに更新する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ pacman -Syu
:: パッケージデータベースの同期中...
 mingw32                                              232.6 KiB   720K/s 00:00 [##################] 100%
 mingw32.sig                                           96.0   B  93.8K/s 00:00 [##################] 100%
 mingw64                                              231.6 KiB   740K/s 00:00 [##################] 100%
 mingw64.sig                                           96.0   B  0.00B/s 00:00 [##################] 100%
 msys                                                 130.7 KiB   165K/s 00:01 [##################] 100%
 msys.sig                                              96.0   B  93.8K/s 00:00 [##################] 100%
==&amp;gt; Checking if there are critical packages to upgrade.
pacman 5.0.0.6348.cc5a8f1-1 -&amp;gt; 5.0.1.6388.dcb2397-1
==&amp;gt; Core packages require updating.
==&amp;gt; Please close all other MSYS2 derived windows (e.g. terminal
==&amp;gt; windows, Bash sessions, etc) before proceeding.
==&amp;gt; 警告: When the update has completed, you MUST close this MSYS2 window
==&amp;gt; 警告: (use Alt-F4 or red [ X ], etc.), rather than &amp;#39;exit&amp;#39;!!!
Press [Enter] key when ready to start update...
==&amp;gt; Updating core packages...
警告: bash-4.3.042-4 は最新です -- スキップ
警告: msys2-runtime-2.4.1.16860.40c26fc-1 は最新です -- スキップ
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (2) msys2-runtime-devel-2.4.1.16860.40c26fc-1  pacman-5.0.1.6388.dcb2397-1

合計ダウンロード容量:  10.34 MiB
合計インストール容量:  54.72 MiB
最終的なアップグレード容量:  21.12 MiB

:: インストールを行いますか？ [Y/n]
:: パッケージを取得します ...
 pacman-5.0.1.6388.dcb2397-1-x86_64                     6.8 MiB  1248K/s 00:06 [##################] 100%
 msys2-runtime-devel-2.4.1.16860.40c26fc-1-x86_64       3.5 MiB  1027K/s 00:04 [##################] 100%
(2/2) キーリングのキーを確認                                                   [##################] 100%
(2/2) パッケージの整合性をチェック                                             [##################] 100%
(2/2) パッケージファイルのロード                                               [##################] 100%
(2/2) ファイルの衝突をチェック                                                 [##################] 100%
(2/2) 空き容量を確認                                                           [##################] 100%
:: パッケージの変更を処理しています...
(1/2) 更新 pacman                                                              [##################] 100%
(2/2) インストール msys2-runtime-devel                                         [##################] 100%
Please close this window.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;おや。
ツールが更新された。
&lt;code&gt;pacman -Syu&lt;/code&gt; で更新があった場合，いったん shell を閉じて起動し直す。
このとき &lt;code&gt;exit&lt;/code&gt; コマンドで終了するのではなく，強制終了する。&lt;/p&gt;
&lt;p&gt;Shell を再起動したら他のインストール済みのパッケージを更新しよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ pacman -Su
:: システム全体の更新を開始...
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (7) curl-7.47.1-1  file-5.25-1  gnupg-1.4.20-1  libcurl-7.47.1-1  libopenssl-1.0.2.f-1
               mintty-1~2.2.3-1  openssl-1.0.2.f-1

合計ダウンロード容量:   4.40 MiB
合計インストール容量:  20.60 MiB
最終的なアップグレード容量:   0.12 MiB

:: インストールを行いますか？ [Y/n] y
:: パッケージを取得します...
 libopenssl-1.0.2.f-1-x86_64                          815.3 KiB   796K/s 00:01 [##################] 100%
 openssl-1.0.2.f-1-x86_64                            1336.9 KiB   977K/s 00:01 [##################] 100%
 libcurl-7.47.1-1-x86_64                              185.0 KiB   269K/s 00:01 [##################] 100%
 curl-7.47.1-1-x86_64                                 595.3 KiB   855K/s 00:01 [##################] 100%
 file-5.25-1-x86_64                                   396.5 KiB   767K/s 00:01 [##################] 100%
 gnupg-1.4.20-1-x86_64                               1026.9 KiB   672K/s 00:02 [##################] 100%
 mintty-1~2.2.3-1-x86_64                              147.2 KiB   436K/s 00:00 [##################] 100%
(7/7) キーリングのキーを確認                                                   [##################] 100%
(7/7) パッケージの整合性をチェック                                             [##################] 100%
(7/7) パッケージファイルのロード                                               [##################] 100%
(7/7) ファイルの衝突をチェック                                                 [##################] 100%
(7/7) 空き容量を確認                                                           [##################] 100%
:: パッケージの変更を処理しています...
(1/7) 更新 libopenssl                                                          [##################] 100%
(2/7) 更新 openssl                                                             [##################] 100%
(3/7) 更新 libcurl                                                             [##################] 100%
(4/7) 更新 curl                                                                [##################] 100%
(5/7) 更新 file                                                                [##################] 100%
(6/7) 更新 gnupg                                                               [##################] 100%
gpg: /etc/pacman.d/gnupg/trustdb.gpg: 信用データベースができました
gpg: 究極的に信用する鍵が見つかりません
gpg: Generating pacman keyring master key...
gpg: skipping control `%no-protection&amp;#39; ()
.+++++
+++++
gpg: 鍵CD81616Cを究極的に信用するよう記録しました
gpg: Done
==&amp;gt; 信用データベースを更新...
gpg: 最小の「ある程度の信用」3、最小の「全面的信用」1、PGP信用モデル
gpg: 深さ: 0  有効性:   1  署名:   0  信用: 0-, 0q, 0n, 0m, 0f, 1u
==&amp;gt; msys2.gpg からキーを追加...
gpg: 最小の「ある程度の信用」3、最小の「全面的信用」1、PGP信用モデル
gpg: 深さ: 0  有効性:   1  署名:   0  信用: 0-, 0q, 0n, 0m, 0f, 1u
==&amp;gt; キーリングの信頼されたキーに署名...
  -&amp;gt; キーに署名 D55E7A6D7CE9BA1587C0ACACF40D263ECA25678A...
  -&amp;gt; キーに署名 123D4D51A1793859C2BE916BBBE514E53E0D0813...
  -&amp;gt; キーに署名 B91BCF3303284BF90CC043CA9F418C233E652008...
  -&amp;gt; キーに署名 9DD0D4217D75A33B896159E6DA7EF2ABAEEA755C...
==&amp;gt; 所有者信頼値をインポート...
gpg: setting ownertrust to 4
gpg: setting ownertrust to 4
gpg: setting ownertrust to 4
gpg: inserting ownertrust of 4
==&amp;gt; 信用データベースを更新...
gpg: 最小の「ある程度の信用」3、最小の「全面的信用」1、PGP信用モデル
gpg: 深さ: 0  有効性:   1  署名:   4  信用: 0-, 0q, 0n, 0m, 0f, 1u
gpg: 深さ: 1  有効性:   4  署名:   3  信用: 0-, 0q, 0n, 4m, 0f, 0u
gpg: 深さ: 2  有効性:   3  署名:   0  信用: 3-, 0q, 0n, 0m, 0f, 0u
(7/7) 更新 mintty                                                              [##################] 100%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで初期化は終了。
&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;次回&lt;/a&gt;へ続く。&lt;/p&gt;
&lt;h2&gt;【おまけ1】 ホームディレクトリについて&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のホームディレクトリは，インストールフォルダ直下の &lt;code&gt;home\username&lt;/code&gt; フォルダになるが， Windows 上で自前のホームディレクトリを作っている場合は，その場所を &lt;code&gt;/etc/fstab&lt;/code&gt; でマウントする手もある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;C:/home	/home
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この場合，元のフォルダにある &lt;code&gt;.profile&lt;/code&gt; ファイル等の移動も忘れないこと。&lt;/p&gt;
&lt;h2&gt;【おまけ2】 Proxy サーバ越しのアクセス&lt;/h2&gt;
&lt;p&gt;Proxy サーバ越しに curl を使う場合は &lt;code&gt;~/.curlrc&lt;/code&gt; に以下の記述を追加する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;proxy-user = &amp;#34;username:password&amp;#34;
proxy = &amp;#34;http://proxy.example.com:8080&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;パッケージ管理コマンドである &lt;code&gt;pacman&lt;/code&gt; を Proxy サーバ越しに使う場合は，上述の通りに curl の設定をしたうえで &lt;code&gt;/etc/pacman.conf&lt;/code&gt; ファイルの以下の記述を探し，コメントを解除する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#XferCommand = /usr/bin/curl -C - -f %u &amp;gt; %o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;GnuPG で鍵サーバにアクセスする場合も， Proxy サーバ越しにアクセスするのであれば， &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt; に以下のオプションを追記する。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-text:gpg.conf&#34; data-lang=&#34;text:gpg.conf&#34;&gt;keyserver-options http-proxy=http://username:password@proxy.example.com:8080/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;実は &lt;code&gt;/etc/pacman.d/gnupg&lt;/code&gt; ディレクトリにも &lt;code&gt;gpg.conf&lt;/code&gt; ファイルがあって &lt;code&gt;pacman-key&lt;/code&gt; コマンドはこちらを見てるっぽい&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ pacman-key -l
/etc/pacman.d/gnupg/pubring.gpg
-------------------------------
pub   2048R/CD81616C 2016-03-01
uid                  Pacman Keyring Master Key &amp;lt;pacman@localhost&amp;gt;

pub   2048R/CA25678A 2014-09-28
uid                  Alexey Pavlov (Alexpux) &amp;lt;alexey.pawlow@gmail.com&amp;gt;
sub   2048R/2BBF340E 2014-09-28

pub   4096R/AEEA755C 2014-10-04
uid                  Martell Malone (martell) &amp;lt;martellmalone@gmail.com&amp;gt;
sub   4096R/2A292C03 2014-10-04

pub   4096R/3E0D0813 2014-09-28
uid                  Ray Donnelly (MSYS2 Developer - master key) &amp;lt;mingw.android@gmail.com&amp;gt;
sub   4096R/8603AA9D 2014-09-28

pub   2048R/3E652008 2014-09-29
uid                  Ignacio Casal Quinteiro &amp;lt;icquinteiro@gmail.com&amp;gt;
sub   2048R/64D62A76 2014-09-29

pub   2048D/A47D45A1 2013-11-11
uid                  Alexey Pavlov (Alexpux) &amp;lt;alexpux@gmail.com&amp;gt;
sub   2048g/31CF7700 2013-11-11

pub   4096R/2C51581E 2015-07-22
uid                  Martell Malone (MSYS2 Developer) &amp;lt;martellmalone@gmail.com&amp;gt;
sub   4096R/282D6707 2015-07-22

pub   4096R/4CA56930 2014-09-28
uid                  Ray Donnelly (MSYS2 Developer) &amp;lt;mingw.android@gmail.com&amp;gt;
sub   4096R/576CF231 2014-09-28
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;もしかしたらこちらの &lt;code&gt;gpg.conf&lt;/code&gt; ファイルも修正する必要があるかもしれない（未確認）。&lt;/p&gt;
&lt;h2&gt;関連するブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Ted-HM/items/4f2feb9fdacb6c72083c&#34;&gt;MSYS2で快適なターミナル生活 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;この記事では今まで &lt;a href=&#34;http://tdm-gcc.tdragon.net/&#34; title=&#34;TDM-GCC&#34;&gt;TDM-GCC&lt;/a&gt; を勧めてきたが，どうも何年もメンテナンスされていないようだ。したがって今後は &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; を推すことにする。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; には bash などの &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; サブセットを含んでいるため， &lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; の bash （通称 git bash）を起動することで UNIX 互換の動作環境を得られる。なお &lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; の環境は git を動かすための最小限のツールしか入っていないため， Git for Windows SDK も併せて導入し，その中の pacman コマンドで必要に応じてのツールを追加する。 pacman については&lt;a href=&#34;https://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;次回&lt;/a&gt;説明する。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ちなみに &lt;code&gt;/etc/pacman.d/gnupg&lt;/code&gt; ディレクトリにある鍵束を GnuPG から直接見る場合には &lt;code&gt;gpg --homedir /etc/pacman.d/gnupg --list-keys&lt;/code&gt; とする。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
</feed>
