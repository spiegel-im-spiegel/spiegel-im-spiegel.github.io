<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Versioning - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/versioning/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/versioning/index.xml" />
	<id>tag:text.Baldanders.info,2018-02-24:/tags</id>
	<updated>2018-02-24T16:10:44+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.40.3</generator>

	
	<entry>
		<title>vgo (Versioned Go) に関する覚え書き - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/go-and-versioning/" />
		<id>tag:text.Baldanders.info,2018-02-24:/golang/go-and-versioning/</id>
		<published>2018-02-24T16:10:44+09:00</published>
		<updated>2018-03-01T09:31:39+09:00</updated>
		<summary>Go 言語の次のバージョン（v1.11）から vgo (Versioned Go) を実装する計画があるようで， vgo 関連のドキュメントが公開されている。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の次のバージョン（v1.11）から vgo (Versioned Go) を実装する計画があるようで， vgo 関連のドキュメントが公開されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo&#34;&gt;research!rsc: Go &amp;amp; Versioning&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-intro&#34;&gt;research!rsc: Go += Package Versioning (Go &amp;amp; Versioning, Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-tour&#34;&gt;research!rsc: A Tour of Versioned Go (vgo) (Go &amp;amp; Versioning, Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-import&#34;&gt;research!rsc: Semantic Import Versioning (Go &amp;amp; Versioning, Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-mvs&#34;&gt;research!rsc: Minimal Version Selection (Go &amp;amp; Versioning, Part 4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-repro&#34;&gt;research!rsc: Reproducible, Verifiable, Verified Builds (Go &amp;amp; Versioning, Part 5)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-module&#34;&gt;research!rsc: Defining Go Modules (Go &amp;amp; Versioning, Part 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-cmd&#34;&gt;research!rsc: Versioned Go Commands (Go &amp;amp; Versioning, Part 7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vgo は新しいパッケージのバージョン管理機能で，vendoring 機能を使った &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; や &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; のような仕組みとは異なるアプローチらしい。
まず v1.11 で試験的に導入し， v1.12 で正式に導入することを目指しているようだ。
最終的に vgo が従来の go コマンドから完全に置き換えられることになれば &lt;code&gt;go get&lt;/code&gt; を削除することも考えてるみたい。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;I would like Go 1.11 to ship with preliminary support for Go modules, as a kind of technology preview, and then I&#39;d like Go 1.12 to ship with official support. In some later release, we&#39;ll remove support for the old, unversioned go get. That&#39;s an aggressive schedule, though, and if getting the functionality right means waiting for later releases, we will.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://research.swtch.com/vgo-intro&#34;&gt;Go &amp;#43;= Package Versioning&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;お試し-vgo&#34;&gt;お試し vgo&lt;/h2&gt;

&lt;p&gt;vgo のプロトタイプ版があるようなのでちょっとだけ試してみる。
なお，以下は “&lt;a href=&#34;https://research.swtch.com/vgo-tour&#34; title=&#34;research!rsc: A Tour of Versioned Go (vgo) (Go &amp;amp; Versioning, Part 2)&#34;&gt;A Tour of Versioned Go&lt;/a&gt;” からの拝借なのでご注意を。&lt;/p&gt;

&lt;p&gt;vgo のプロトタイプ版は &lt;code&gt;go get&lt;/code&gt; で取得できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go get -u golang.org/x/vgo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に以下のコードを用意する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:imp1&#34;&gt;&lt;a href=&#34;#fn:imp1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// import &amp;#34;github.com/spiegel-im-spiegel/hello&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;rsc.io/quote&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ファイル名は &lt;code&gt;hello.go&lt;/code&gt; とする。
次に &lt;code&gt;hello.go&lt;/code&gt; を置いているフォルダに空の &lt;code&gt;go.mod&lt;/code&gt; ファイルを作る。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo&amp;gt;go.mod&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで準備完了。
それじゃあ，いきなり &lt;code&gt;vgo build&lt;/code&gt; してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ vgo build
vgo: resolving import &amp;#34;rsc.io/quote&amp;#34;
vgo: finding rsc.io/quote (latest)
vgo: adding rsc.io/quote v1.5.2
vgo: finding rsc.io/quote v1.5.2
vgo: finding rsc.io/sampler v1.3.0
vgo: finding golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
vgo: downloading rsc.io/quote v1.5.2
vgo: downloading rsc.io/sampler v1.3.0
vgo: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;v1.5.2&lt;/code&gt; といったバージョンはパッケージのリポジトリのタグ情報から取得する。
バージョンを示すタグ情報がない場合は &lt;code&gt;v0.0.0-20170915032832-14c0d48ead0c&lt;/code&gt; のような感じで仮バージョンが付与される。&lt;/p&gt;

&lt;p&gt;では，作成した実行バイナリを動かしてみる（この記事では Windows 環境なので悪しからず）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ hello.exe
Hello, world.

$ SET LANG=ja

$ hello.exe
こんにちは世界。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;おおー。
ちゃんと動いてる。&lt;/p&gt;

&lt;p&gt;ビルド後，空の &lt;code&gt;go.mod&lt;/code&gt; ファイルに以下のように記述が加えられた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module &amp;#34;github.com/spiegel-im-spiegel/hello&amp;#34;

require &amp;#34;rsc.io/quote&amp;#34; v1.5.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;vgo-のパッケージ管理&#34;&gt;vgo のパッケージ管理&lt;/h3&gt;

&lt;p&gt;ビルドの様子を見ればわかると思うが，依存関係を調べて各パッケージを全てダウンロードしている。
実は &lt;code&gt;golang.org/x/text&lt;/code&gt; パッケージは &lt;code&gt;GOPATH&lt;/code&gt; 配下にダウンロード済みだったのだが，これを使ってはいないようだ。&lt;/p&gt;

&lt;p&gt;じゃあ，ダウンロードしたパッケージは何処にあるかというと &lt;code&gt;$GOPATH/src/v&lt;/code&gt; フォルダ以下に展開されていた&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gpth&#34;&gt;&lt;a href=&#34;#fn:gpth&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$GOPATH/src/v
├─cache
│  ├─golang.org
│  │  └─x
│  │      └─text
│  │          └─@v
│  └─rsc.io
│      ├─quote
│      │  └─@v
│      └─sampler
│          └─@v
├─golang.org
│  └─x
│      └─text@v0.0.0-20170915032832-14c0d48ead0c
└─rsc.io
    ├─quote@v1.5.2
    └─sampler@v1.3.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更に &lt;code&gt;quote@v1.5.2&lt;/code&gt; フォルダと &lt;code&gt;sampler@v1.3.0&lt;/code&gt; フォルダにもそれぞれ &lt;code&gt;go.mod&lt;/code&gt; ファイルがあって，以下のような記述になっている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module &amp;#34;rsc.io/quote&amp;#34;

require &amp;#34;rsc.io/sampler&amp;#34; v1.3.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;module &amp;#34;rsc.io/sampler&amp;#34;

require &amp;#34;golang.org/x/text&amp;#34; v0.0.0-20170915032832-14c0d48ead0c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように &lt;code&gt;go.mod&lt;/code&gt; ファイルの情報を元にして依存パッケージのバージョンを管理するわけだ。
ちなみに各パッケージの全てのバージョンを列挙するには以下のコマンドが使える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ vgo list -t rsc.io/sampler
rsc.io/sampler
        v1.0.0
        v1.2.0
        v1.2.1
        v1.3.0
        v1.3.1
        v1.99.99&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また &lt;code&gt;hello.go&lt;/code&gt; 以下の依存パッケージのバージョン情報は以下のコマンドで見ることができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ vgo list -m -u
MODULE                               VERSION                             LATEST
github.com/spiegel-im-spiegel/hello  -                                   -
golang.org/x/text                    v0.0.0-20170915032832-14c0d48ead0c  v0.0.0-20171214130843-f21a4dfb5e38
rsc.io/quote                         v1.5.2 (2018-02-15 00:44)           -
rsc.io/sampler                       v1.3.0 (2018-02-14 04:05)           v1.99.99 (2018-02-14 07:20)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; みたいに依存関係を可視化できるといいんだけどねえ。&lt;/p&gt;

&lt;h2 id=&#34;semantic-versioning-と後方互換性&#34;&gt;&lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; と後方互換性&lt;/h2&gt;

&lt;p&gt;vgo が管理するバージョンは &lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; に従うことが期待されている。
また同じ import パスで取得するパッケージは後方互換性を持つことも期待されている。&lt;/p&gt;

&lt;p&gt;たとえば， &lt;code&gt;my/thing&lt;/code&gt; パッケージの v2 が後方互換性のない構成になっていた場合は &lt;code&gt;my/thing/v2&lt;/code&gt; という感じに import パスを変えるわけだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gopkg1&#34;&gt;&lt;a href=&#34;#fn:gopkg1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://research.swtch.com/vgo-import&#34;&gt;&lt;img src=&#34;https://research.swtch.com/impver.png&#34; srcset=&#34;https://research.swtch.com/impver.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Semantic Import Versioning&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://research.swtch.com/vgo-import&#34;&gt;Semantic Import Versioning&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;現行の &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラはパッケージのバージョンを意識していないが（バージョン管理は &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; のような外部ツールが担っている）， vgo が正式に組み込まれればより厳密な（&lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; に基づいた）バージョン管理が要求されることになると思う。
なので，今からそれを意識した運用を考えておくべきかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;とはいえ-まだ先の話&#34;&gt;とはいえ，まだ先の話&lt;/h2&gt;

&lt;p&gt;とはいえ，次の v1.11 が出るのは早くても半年後（2018年8月頃）だし，正式対応するという v.1.12 など鬼が笑う話である。
今後 &lt;a href=&#34;http://semver.org/&#34; title=&#34;Semantic Versioning 2.0.0 | Semantic Versioning&#34;&gt;Semantic Versioning&lt;/a&gt; は意識したほうがいいかもしれないが，当面は &lt;a href=&#34;https://golang.github.io/dep/&#34; title=&#34;dep · Dependency management for Go&#34;&gt;dep&lt;/a&gt; などを用いた運用ができていればいいと思う。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/lufia/items/67701e2f927c77a75d6e&#34;&gt;Go &amp;amp; Versioning(vgo)を読んで大きな変更が入ったなと思った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nekketsuuu/items/36f00484ff7c30fd2007&#34;&gt;和訳: Go &amp;amp; Versioning - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nekketsuuu/items/60634417e6279ccfd95b&#34;&gt;和訳: Go += Package Versioning (Go &amp;amp; Versioning, Part 1) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nekketsuuu/items/589bc29f00b507492a96&#34;&gt;和訳: A Tour of Versioned Go (vgo) (Go &amp;amp; Versioning, Part 2) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nekketsuuu/items/2dcad7dde29171e1fe3f&#34;&gt;和訳: Semantic Import Versioning (Go &amp;amp; Versioning, Part 3) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:imp1&#34;&gt;ソースコードの先頭部分 &lt;code&gt;package main&lt;/code&gt; に続くコメント &lt;code&gt;// import ...&lt;/code&gt; を正しく書かないとビルド時にエラーになる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:imp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gpth&#34;&gt;このパスは正式版までに変更されると考えられる。 &lt;code&gt;go.mod&lt;/code&gt; ファイルにパッケージへのフルパスが記述されるため，わざわざ &lt;code&gt;GOPATH&lt;/code&gt; 配下にパス構成を統合する必要が無いからである。最終的には &lt;code&gt;GOPATH&lt;/code&gt; の削除も視野に入れているかもしれない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gpth&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gopkg1&#34;&gt;あるいは &lt;a href=&#34;http://labix.org/gopkg.in&#34; title=&#34;gopkg.in - Stable APIs for the Go language&#34;&gt;gopkg.in&lt;/a&gt; のような API を使う手もある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gopkg1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
