<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Bookmark - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/bookmark/index.xml" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/bookmark/index.xml/index.xml" />
	<id>tag:text.Baldanders.info,0001-01-01:/</id>
	<updated>0001-01-01T00:00:00+00:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.18.1</generator>

	
	<entry>
		<title>週末スペシャル： 自前でブックマークを運用することにしました - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/05/07-stories/" />
		<id>tag:text.Baldanders.info,2016-05-07:/remark/2016/05/07-stories/</id>
		<published>2016-05-07T20:36:22+09:00</published>
		<updated>2016-05-07T20:36:22+09:00</updated>
		<summary>自前でブックマークを運用することにしました / GnuPG 2.1.12 and Libgcrypt 1.7.0 released / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#bkmk&#34;&gt;自前でブックマークを運用することにしました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gpg&#34;&gt;GnuPG 2.1.12 and Libgcrypt 1.7.0 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;bkmk&#34;&gt;自前でブックマークを運用することにしました&lt;/h2&gt;

&lt;p&gt;先月&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/04/delicious-to-del_icio_us/&#34;&gt;delicious.com が del.icio.us に移行するらしい（出戻り？）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と書いたのだが，その後無事に移行が完了した。&lt;/p&gt;

&lt;p&gt;ただねぇ。
Markdown でリンクを列挙するのがメチャメチャ楽ちんなことに気づいてしまった。
もう folksonomy な時代じゃないだろうし，今年に入ってから &lt;a href=&#34;https://del.icio.us/&#34;&gt;del.icio.us&lt;/a&gt; のデザインが一新したけど，イマイチ使い勝手がよくないんだよな。&lt;/p&gt;

&lt;p&gt;というわけで &lt;a href=&#34;http://text.baldanders.info/bookmarks/&#34;&gt;Bookmarks&lt;/a&gt; セクションを追加して，そこにブックマークを蓄積していくことにした。
タグが使えなくなるけどソースコードの markdown ファイルを全文検索できるので，まぁ問題ないかと。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://del.icio.us/spiegel&#34;&gt;del.icio.us/spiegel&lt;/a&gt; にあるブックマークは「&lt;a href=&#34;http://text.baldanders.info/bookmarks/2016/04/export-from-delicious/&#34;&gt;Export from Delicious.com&lt;/a&gt;」に移した。
ただ &lt;a href=&#34;https://del.icio.us/&#34;&gt;del.icio.us&lt;/a&gt; の Export 機能がうまく動いてなくて古いブックマークが取れない。
あと「&lt;a href=&#34;http://text.baldanders.info/bookmarks/2016/04/export-from-delicious/&#34;&gt;Export from Delicious.com&lt;/a&gt;」にあるリンクが膨大で表示に結構時間がかかるので迂闊に開かないほうがいいようだ（笑）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/bookmarks/&#34;&gt;Bookmarks&lt;/a&gt; セクションの記事は&lt;a href=&#34;http://text.baldanders.info/index.xml&#34;&gt;メインの RSS&lt;/a&gt; に含めないことにした。
RSS を撮りたいという奇特な方は&lt;a href=&#34;http://text.baldanders.info/bookmarks/index.xml&#34;&gt;こちら&lt;/a&gt;からどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;gpg&#34;&gt;GnuPG 2.1.12 and Libgcrypt 1.7.0 released&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q2/000387.html&#34;&gt;[Announce] GnuPG 2.1.12 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q2/000386.html&#34;&gt;[Announce] Libgcrypt 1.7.0 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;セキュリティ・アップデートはなし。&lt;/p&gt;

&lt;p&gt;GnuPG 2.1.12 の変更点は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: New &lt;code&gt;--edit-key&lt;/code&gt; sub-command &amp;ldquo;&lt;code&gt;change-usage&lt;/code&gt;&amp;rdquo; for testing purposes.&lt;/li&gt;
&lt;li&gt;gpg: Out of order key-signatures are now systematically detected and fixed by &lt;code&gt;--edit-key&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;gpg: Improved detection of non-armored messages.&lt;/li&gt;
&lt;li&gt;gpg: Removed the extra prompt needed to create Curve25519 keys.&lt;/li&gt;
&lt;li&gt;gpg: Improved user ID selection for &lt;code&gt;--quick-sign-key&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;gpg: Use the root CAs provided by the system with &amp;ndash;fetch-key.&lt;/li&gt;
&lt;li&gt;gpg: Add support for the experimental Web Key Directory key location service.&lt;/li&gt;
&lt;li&gt;gpg: Improve formatting of Tofu messages and emit new Tofu specific status lines.&lt;/li&gt;
&lt;li&gt;gpgsm: Add option &lt;code&gt;--pinentry-mode&lt;/code&gt; to support a loopback pinentry.&lt;/li&gt;
&lt;li&gt;gpgsm: A new pubring.kbx is now created with the header blob so that gpg can detect that the keybox format needs to be used.&lt;/li&gt;
&lt;li&gt;agent: Add read support for the new private key protection format openpgp-s2k-ocb-aes.&lt;/li&gt;
&lt;li&gt;agent: Add read support for the new extended private key format.&lt;/li&gt;
&lt;li&gt;agent: Default to &lt;code&gt;--allow-loopback-pinentry&lt;/code&gt; and add option &lt;code&gt;--no-allow-loopback-pinentry&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;scd: Changed to use the new libusb 1.0 API for the internal CCID driver.&lt;/li&gt;
&lt;li&gt;dirmngr: The dirmngr-client does now auto-detect the PEM format.&lt;/li&gt;
&lt;li&gt;g13: Add experimental support for dm-crypt.&lt;/li&gt;
&lt;li&gt;w32: Tofu support is now available with the Speedo build method.&lt;/li&gt;
&lt;li&gt;w32: Removed the need for libiconv.dll.&lt;/li&gt;
&lt;li&gt;The man pages for gpg and gpgv are now installed under the correct name (gpg2 or gpg - depending on a configure option).&lt;/li&gt;
&lt;li&gt;Lots of internal cleanups and bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ふむ。
Windows 版では libiconv.dll は不要になったらしい。&lt;/p&gt;

&lt;p&gt;Libgcrypt 1.7.0 について 1.6 系からの変更点は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New algorithms and modes:

&lt;ul&gt;
&lt;li&gt;SHA3-224, SHA3-256, SHA3-384, SHA3-512, and MD2 hash algorithms.&lt;/li&gt;
&lt;li&gt;SHAKE128 and SHAKE256 extendable-output hash algorithms.&lt;/li&gt;
&lt;li&gt;ChaCha20 stream cipher.&lt;/li&gt;
&lt;li&gt;Poly1305 message authentication algorithm&lt;/li&gt;
&lt;li&gt;ChaCha20-Poly1305 Authenticated Encryption with Associated Data mode.&lt;/li&gt;
&lt;li&gt;OCB mode.&lt;/li&gt;
&lt;li&gt;HMAC-MD2 for use by legacy applications.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New curves for ECC:

&lt;ul&gt;
&lt;li&gt;Curve25519.&lt;/li&gt;
&lt;li&gt;sec256k1.&lt;/li&gt;
&lt;li&gt;GOST R 34.10-2001 and GOST R 34.10-2012.&lt;/li&gt;
&lt;li&gt;Performance:&lt;/li&gt;
&lt;li&gt;Improved performance of KDF functions.&lt;/li&gt;
&lt;li&gt;Assembler optimized implementations of Blowfish and Serpent on ARM.&lt;/li&gt;
&lt;li&gt;Assembler optimized implementation of 3DES on x86.&lt;/li&gt;
&lt;li&gt;Improved AES using the SSSE3 based vector permutation method by Mike Hamburg.&lt;/li&gt;
&lt;li&gt;AVX/BMI is used for SHA-1 and SHA-256 on x86.  This is for SHA-1 about 20% faster than SSSE3 and more than 100% faster than the generic C implementation.&lt;/li&gt;
&lt;li&gt;40% speedup for SHA-512 and 72% for SHA-1 on ARM Cortex-A8.&lt;/li&gt;
&lt;li&gt;60-90% speedup for Whirlpool on x86.&lt;/li&gt;
&lt;li&gt;300% speedup for RIPE MD-160.&lt;/li&gt;
&lt;li&gt;Up to 11 times speedup for CRC functions on x86.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Other features:

&lt;ul&gt;
&lt;li&gt;Improved ECDSA and FIPS 186-4 compliance.&lt;/li&gt;
&lt;li&gt;Support for Montgomery curves.&lt;/li&gt;
&lt;li&gt;gcry_cipher_set_sbox to tweak S-boxes of the gost28147 cipher algorithm.&lt;/li&gt;
&lt;li&gt;gcry_mpi_ec_sub to subtract two points on a curve.&lt;/li&gt;
&lt;li&gt;gcry_mpi_ec_decode_point to decode an MPI into a point object.&lt;/li&gt;
&lt;li&gt;Emulation for broken Whirlpool code prior to 1.6.0.  [from 1.6.1]&lt;/li&gt;
&lt;li&gt;Flag &amp;ldquo;pkcs1-raw&amp;rdquo; to enable PCKS#1 padding with a user supplied hash part.&lt;/li&gt;
&lt;li&gt;Parameter &amp;ldquo;saltlen&amp;rdquo; to set a non-default salt length for RSA PSS.&lt;/li&gt;
&lt;li&gt;A SP800-90A conforming DRNG replaces the former X9.31 alternative random number generator.&lt;/li&gt;
&lt;li&gt;Map deprecated RSA algo number to the RSA algo number for better backward compatibility. [from 1.6.2]&lt;/li&gt;
&lt;li&gt;Use ciphertext blinding for Elgamal decryption [CVE-2014-3591]. See &lt;a href=&#34;http://www.cs.tau.ac.il/~tromer/radioexp/&#34;&gt;http://www.cs.tau.ac.il/~tromer/radioexp/&lt;/a&gt; for details. [from 1.6.3]&lt;/li&gt;
&lt;li&gt;Fixed data-dependent timing variations in modular exponentiation [related to CVE-2015-0837, Last-Level Cache Side-Channel Attacks are Practical]. [from 1.6.3]&lt;/li&gt;
&lt;li&gt;Flag &amp;ldquo;no-keytest&amp;rdquo; for ECC key generation.  Due to a bug in the parser that flag will also be accepted but ignored by older version of Libgcrypt. [from 1.6.4]&lt;/li&gt;
&lt;li&gt;Speed up the random number generator by requiring less extra seeding. [from 1.6.4]&lt;/li&gt;
&lt;li&gt;Always verify a created RSA signature to avoid private key leaks due to hardware failures. [from 1.6.4]&lt;/li&gt;
&lt;li&gt;Mitigate side-channel attack on ECDH with Weierstrass curves [CVE-2015-7511].  See &lt;a href=&#34;http://www.cs.tau.ac.IL/~tromer/ecdh/&#34;&gt;http://www.cs.tau.ac.IL/~tromer/ecdh/&lt;/a&gt; for details. [from 1.6.5]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Internal changes:

&lt;ul&gt;
&lt;li&gt;Moved locking out to libgpg-error.&lt;/li&gt;
&lt;li&gt;Support of the SYSROOT envvar in the build system.&lt;/li&gt;
&lt;li&gt;Refactor some code.&lt;/li&gt;
&lt;li&gt;The availability of a 64 bit integer type is now mandatory.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bug fixes:

&lt;ul&gt;
&lt;li&gt;Fixed message digest lookup by OID (regression in 1.6.0).&lt;/li&gt;
&lt;li&gt;Fixed a build problem on NetBSD&lt;/li&gt;
&lt;li&gt;Fixed memory leaks in ECC code.&lt;/li&gt;
&lt;li&gt;Fixed some asm build problems and feature detection bugs.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インストール後はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.1.12
libgcrypt 1.7.0
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;other&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/05/01/editors-note-12/&#34;&gt;「出版不況論」をめぐる議論の混乱について « マガジン航[kɔː]&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/05/02/literature-in-2066/&#34;&gt;対談「50年後の文芸はどうなっているのか？」藤谷治✕藤井大洋 « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.wildhawkfield.com/2016/05/real-light-novel-market.html&#34;&gt;ライトノベル市場は衰退どころか拡大傾向にある ── 『ORICONエンタメ・マーケット白書2015』より:見て歩く者 by 鷹野凌&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bylines.news.yahoo.co.jp/hattamasayuki/20160430-00057230/&#34;&gt;やましくなければプライバシーは要らない？ nothing to hideを巡って(八田真行) - 個人 - Yahoo!ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://support.apple.com/ja-jp/HT206338&#34;&gt;About the security content of Xcode 7.3.1 - Apple サポート&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2315&#34;&gt;Vulnerability Summary for CVE-2016-2315&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2324&#34;&gt;Vulnerability Summary for CVE-2016-2324&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1605/06/news042.html&#34;&gt;AppleがXcodeの更新版を公開、Gitの脆弱性を修正 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2016/at160021.html&#34;&gt;ImageMagick の脆弱性 (CVE-2016-3714) に関する注意喚起&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20160504/1462352882&#34;&gt;ImageMagickの脆弱性(CVE-2016-3714他)についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sixapart.jp/movabletype/news/2016/05/06-1452.html&#34;&gt;[重要] ImageMagick の脆弱性 ImageTragick (CVE-2016-3714) への対応について | Movable Type ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20160506_756180.html&#34;&gt;「OpenSSL」に6件の脆弱性、修正を施した最新版v1.0.2h/v1.0.1tが公開 - 窓の杜&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1605/06/news046.html&#34;&gt;OpenSSLの更新版公開、複数の脆弱性を修正 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35082166/&#34;&gt;OpenSSLに2件の深刻な脆弱性&amp;ndash;早急にパッチの適用を - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v0.10.45/&#34;&gt;Node v0.10.45 (Maintenance) | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v0.12.14/&#34;&gt;Node v0.12.14 (Maintenance) | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v4.4.4/&#34;&gt;Node v4.4.4 (LTS) | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v5.11.1/&#34;&gt;Node v5.11.1 (Stable) | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v6.1.0/&#34;&gt;Node v6.1.0 (Current) | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/chrome-and-firefox-block-tpb-as-phishing-site-160507/&#34;&gt;Chrome, Firefox and Safari Block Pirate Bay as &amp;ldquo;Phishing&amp;rdquo; Site - TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bylines.news.yahoo.co.jp/kuriharakiyoshi/20160506-00057409/&#34;&gt;ローリングストーンズにはドナルドトランプ氏に楽曲の使用中止を命じる権利があるのか(栗原潔) - 個人 - Yahoo!ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>delicious.com が del.icio.us に移行するらしい（出戻り？） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/delicious-to-del_icio_us/" />
		<id>tag:text.Baldanders.info,2016-04-26:/remark/2016/04/delicious-to-del_icio_us/</id>
		<published>2016-04-26T22:29:08+09:00</published>
		<updated>2016-04-26T22:45:23+09:00</updated>
		<summary>昨日から delicious.com に繋がらねー！ と思ったら， del.icio.us に移行するというアナウンスが。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;昨日から &lt;a href=&#34;https://delicious.com/spiegel&#34;&gt;delicious.com&lt;/a&gt; に繋がらねー！ と思ったら， &lt;a href=&#34;http://del.icio.us/&#34;&gt;del.icio.us&lt;/a&gt; に移行するというアナウンスが。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.delicious.com/2016/04/transition-to-del-icio-us/&#34;&gt;Transition to del.icio.us | The Official Delicious Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いや，移行するのは結構だけど，現行のサービスを止めるのは止めてくれないかなぁ。
おかげで2日分のブックマークが溜まりまくってエラいことに。&lt;/p&gt;

&lt;p&gt;とりあえず，ここに退避させておく。&lt;/p&gt;

&lt;p&gt;（「&lt;a href=&#34;http://text.baldanders.info/bookmarks/2016/04/26-bookmarks/&#34;&gt;2016-04-26 のブックマーク&lt;/a&gt;」に移動しました）&lt;/p&gt;

&lt;p&gt;ブックマークも自前で管理したほうがいいかなぁ。
タグ管理なんかしないでひたすらリンクを収集するだけならここでもできそうだし。
（はてブは問題外）&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>TensorFlow に関するブックマーク - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/tensorflow/" />
		<id>tag:text.Baldanders.info,2016-02-18:/remark/2016/02/tensorflow/</id>
		<published>2016-02-18T12:55:42+09:00</published>
		<updated>2016-03-14T01:12:59+09:00</updated>
		<summary>TensorFlow は Google がオープンソースとして提供する多次元配列（tensor）演算（flow）ライブラリ。いわゆる「機械学習」で威力を発揮する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;（この記事は「&lt;a href=&#34;http://text.baldanders.info/remark/2015/programming-language/&#34;&gt;プログラミング言語との付き合い方&lt;/a&gt;」のおまけの項からの転載です）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tensorflow.org/&#34; title=&#34;TensorFlow is an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; は Google がオープンソースとして提供する多次元配列（tensor）&lt;a href=&#34;https://en.wikipedia.org/wiki/Flow_%28mathematics%29&#34;&gt;演算（flow）&lt;/a&gt;ライブラリ。
いわゆる「機械学習（machine learning）」で威力を発揮し， &lt;a href=&#34;http://tensorflow.org/&#34; title=&#34;TensorFlow is an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; の元となっている Google 内製のインフラ &lt;a href=&#34;http://research.google.com/pubs/pub40565.html&#34;&gt;DistBelief&lt;/a&gt; では既に実績がある。&lt;/p&gt;

&lt;p&gt;バックエンドは C++ で構築しているそうだが，フロントエンドでは Python が使える（将来的には他の言語にも対応するそうだ）。
携帯端末から GPU バリバリのワークステーションまでスケーラブルに対応し，簡易な記述で実装できるのが特徴。
可視化ツールもある。&lt;/p&gt;

&lt;p&gt;たしかに「&lt;a href=&#34;https://plus.google.com/+HidekiSaito/posts/EJZgMkANqou&#34;&gt;何か作れそうな気がする&lt;/a&gt;」感じではある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tensorflow.org/&#34;&gt;TensorFlow is an Open Source Software Library for Machine Intelligence&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt;tensorflow/tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/10/news055.html&#34;&gt;Google、機械学習システム「TensorFlow」をオープンソースで公開 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nextdeveloper.hatenablog.com/entry/2015/11/10/204609&#34;&gt;Googleの公開した人工知能ライブラリTensorFlowを触ってみた - 株式会社ネクスト　エンジニアBlog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/icoxfog417/items/fb5c24e35a849f8e2c5d&#34;&gt;TensorFlowを算数で理解する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/haminiku/items/36982ae65a770565458d&#34;&gt;TensorFlow 畳み込みニューラルネットワークで手書き認識率99.2%の分類器を構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kazuhirokomoda/items/a4cd0f6f42eb75c757e4&#34;&gt;自然言語処理をはじめたい人のためのゆるい記事 - Qiita&lt;/a&gt; : &lt;a href=&#34;http://tensorflow.org/&#34; title=&#34;TensorFlow is an Open Source Software Library for Machine Intelligence&#34;&gt;TensorFlow&lt;/a&gt; についても少しだけ言及&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/n_kats_/items/73538c7c66559d09f35d&#34;&gt;わざわざTensorFlowの機械学習で$\sqrt{2}$を計算する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/TomokIshii/items/f355d8e87d23ee8e0c7a&#34;&gt;Python - 初めてのTensorFlow - イントロダクションとしての線形回帰 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/KojiOhki/items/00ae0297f6809bdbc484&#34;&gt;TensorFlowチュートリアル - マンデルブロ集合（翻訳） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/02/17/20160216google-makes-it-easier-to-take-machine-learning-models-into-production/&#34;&gt;TensorFlowライブラリによる機械学習モデルの、本番アプリケーションへの実装を助けるAPI集TensorFlow ServingをGoogleがリリース | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/oZikw5k_2FM&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oZikw5k_2FM&#34;&gt;TensorFlow: Open source machine learning - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語に関するブックマーク - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/bookmark/" />
		<id>tag:text.Baldanders.info,2015-09-11:/golang/bookmark/</id>
		<published>2015-09-11T17:58:42+09:00</published>
		<updated>2017-01-20T13:09:18+09:00</updated>
		<summary>本業が忙しくて Go 言語をかまってあげる暇がないのだが，ブックマークばっかり溜まっていくので，定期的に吐き出しておく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;本業が忙しくて Go 言語をかまってあげる暇がないのだが，ブックマークばっかり溜まっていくので，定期的に吐き出しておく。なお，この記事は以下の2箇所にマルチポストでメンテしている。内容はほぼ同じなのでお好きな方でどうぞ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/98d49ac456485b007a15&#34;&gt;Go 言語に関するブックマーク - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク - プログラミング言語 Go | text.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;公式サイト&#34;&gt;公式サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;The Go Programming Language&lt;/a&gt; : 2016年12月2日時点での最新は 1.7.4

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go.googlesource.com/&#34;&gt;git repositories (Google)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang&#34;&gt;git repositories (GitHub)&lt;/a&gt; : mirror&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang-jp.org/&#34;&gt;golang-jp - The Go Programming Language&lt;/a&gt; : 本家の日本語訳サイト。（&lt;a href=&#34;http://golang.jp/&#34;&gt;golang.jp&lt;/a&gt; は内容が古いので参考にしない方がいい，らしい）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-1-5-released&#34;&gt;Go 1.5 Released.&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go1.5&#34;&gt;Go 1.5 is released - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.5&#34;&gt;Go 1.5 Release Notes - The Go Programming Language&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1e8kOo3r51b2BWtTs_1uADIA5djfXhPT36s6eHVRIvaU/edit&#34;&gt;Go 1.4 &amp;ldquo;Internal&amp;rdquo; Packages&lt;/a&gt; : Internal Packages は 1.5 で GOPATH まで拡張された&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit&#34;&gt;Go 1.5 Vendor Experiment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/83b53109f54f8fb62c1c&#34;&gt;[security] Go 1.5.3 is released - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-1-6-is-released&#34;&gt;Go 1.6 is released&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go1.6&#34;&gt;Go 1.6 is released - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.6&#34;&gt;Go 1.6 Release Notes - The Go Programming Language&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ksato9700/items/5505e506c20b6048c218&#34;&gt;Go1.6の新機能 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-1-7-is-released&#34;&gt;Go 1.7 is released&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/go1.7&#34;&gt;Go 1.7 is released - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/go1.7&#34;&gt;Go 1.7 Release Notes - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/12/security-release-golang-1_7_4-and-1_6_4/&#34;&gt;Security Release Go 1.7.4 and 1.6.4 — しっぽのさきっちょ | text.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shinpei.github.io/blog/2016/08/13/what-ssa-brings-to-go-17/&#34;&gt;Go1.7からSSAが導入された - flyhigh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;言語仕様に関すること&#34;&gt;言語仕様に関すること&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/dev/feature/01/go_4beginners&#34;&gt;はじめてのGo―シンプルな言語仕様，型システム，並行処理：特集｜gihyo.jp … 技術評論社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kazusa-qooq/items/40f9ea3e72406d845b10&#34;&gt;Golangの基本文法をおさえてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/makoto_kw/items/0638c0af1002647e3f7a&#34;&gt;忙しい人のためのA Tour of Go - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tanaka0325/items/9c61a022cd32be0c65a6&#34;&gt;Golang の 数値型 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/atsaki/items/3554f5a0609c59a3e10d&#34;&gt;Go言語の型とreflect - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/modal_soul/items/e49480e5692597fda975&#34;&gt;Goのfor rangeで思った値が取れなかった話 - Qiita&lt;/a&gt; : ちょっとしたミス&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kwi/items/185bb3fe0d60ca765ab0&#34;&gt;unsafe が unsafe なケース (1) - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kwi/items/d06f49c9cf7e5ace8692&#34;&gt;unsafe が unsafe なケース (2) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20130919023425.htm&#34;&gt;Big Sky :: Go言語でインタフェースの変更がそれ程問題にならない理由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taji-taji/items/5a4f17bcf5b819954cc1&#34;&gt;import 書き方まとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/soranoba/items/68d57b4635a2917f3c73&#34;&gt;ErlangとGolangを比較してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/awakia/items/c81c7816b9aea5422250&#34;&gt;GoのEnumイディオム - Qiita&lt;/a&gt; : あらかじめ Enum 用の type を作成し、その type に対する &lt;code&gt;String()&lt;/code&gt; メソッドを定義する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20151212021608.htm&#34;&gt;Big Sky :: golang では for ループの中で defer してはいけない。&lt;/a&gt; : ループ内で defer が必要になるということは refactoring のチャンス&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/16acb36e94cfe3b02aa1&#34;&gt;オブジェクト指向言語としてGolangをやろうとするとハマること - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sona-tar/items/2b4b70694fd680f6297c&#34;&gt;オブジェクト指向言語としてGolangをやろうとするとハマる点を整理してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://otiai10.hatenablog.com/entry/2014/01/15/220136&#34;&gt;Go言語に継承は無いんですか【golang】 - DRYな備忘録&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2015/02/23/165341&#34;&gt;Goで再帰使うと遅くなりますがそれが何だ - YAMAGUCHI::weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yunabe.jp/docs/golang_pitfall.html&#34;&gt;Go言語(Golang) はまりどころと解決策&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/stsn/items/73714caf8458b1d973f2&#34;&gt;Golang: nil Pointer Receiverの話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://skatsuta.github.io/2015/12/29/value-receiver-pointer-receiver/&#34;&gt;Go 言語の値レシーバとポインタレシーバ | Step by Step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20140501172821.htm&#34;&gt;Big Sky :: Golang のオフィシャルが提供するインタフェースまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://divan.github.io/posts/go_concurrency_visualize/&#34;&gt;Visualizing Concurrency in Go · divan&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ymotongpoo.github.io/goblog-ja/post/context/&#34;&gt;Goの並行パターン：コンテキスト (Go Concurrency Pattern: Context)&lt;/a&gt; : &lt;a href=&#34;https://tip.golang.org/doc/go1.7#context&#34;&gt;1.7 からは Context パッケージが標準ライブラリに組み込まれる&lt;/a&gt;らしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hkurokawa/items/a4d402d3182dff387674&#34;&gt;Go の定数の話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/22910a4bae6cb716a391&#34;&gt;Goにatexitやグローバルなデストラクタがない理由 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/7c70e3451ac783999b4f&#34;&gt;init関数のふしぎ #golang - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/astronoka/items/aa2f271d280863cedf5e&#34;&gt;packageに複数のinitがあるときの挙動 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;文字列操作または変換&#34;&gt;文字列操作または変換&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/strings&#34;&gt;Strings, bytes, runes and characters in Go - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://knightso.hateblo.jp/entry/2014/06/24/090719&#34;&gt;Go言語のstring, runeの正体とは？ - golang - The Round&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Sheile/items/ba51ac9091e09927b95c&#34;&gt;Go言語は空文字に対してstrings.splitを掛けると1要素の配列を返す - Qiita&lt;/a&gt; : コメントに別解あり&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hokaccha/items/3d3f45b5927b4584dbac&#34;&gt;golang - Goでマルチバイトが混在した文字列をtruncateする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://matope.hatenablog.com/entry/2014/04/22/101127&#34;&gt;Golangでの文字列・数値変換 - 小野マトペの納豆ペペロンチーノ日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uchiko/items/1810ddacd23fd4d3c934&#34;&gt;golang - Go言語で文字コード変換 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikawaha/items/540c2af34b1c381c37c1&#34;&gt;Go で euc-jp や sjis の csv ファイルを読み込むには変換用のリーダーを1つかませるだけでよかった - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/2bb83b29baeae2433a79&#34;&gt;Goでは文字列連結はコストの高い操作 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/d5e70d8a9ff2b54d5c37&#34;&gt;Goの文字列結合のパフォーマンス - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yoya/items/23ac2c490625c5d47ad9&#34;&gt;Go言語で SplitMultiSep (複数種の区切り文字列で分解) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masakielastic/items/01a4fb691c572dd71a19&#34;&gt;Go で UTF-8 の文字列を扱う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yyoshiki41/items/79882e269ca6af4c2236&#34;&gt;Go言語 Gmailのsubjectの日本語文字化けに対応する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/normalization&#34;&gt;Text normalization in Go - The Go Blog&lt;/a&gt; : Unicode 正規化について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.serendip.ws/archives/6307&#34;&gt;Go言語で文字列の変換(全角・半角、ひらがな・カタカナ)をする : Serendip - Webデザイン・プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ktashiro/items/da5cbee3129acc74e5d7&#34;&gt;Goで全角英数字を半角にする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/joniyjoniy/items/cbfb7d5c49aec5bf63c0&#34;&gt;uint64型を[]bytes型に変換する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34; title=&#34;プログラミング言語 Go — text.Baldanders.info&#34;&gt;本家ブログ&lt;/a&gt;でも以下の記事で解説している。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/string-and-rune/&#34;&gt;String と Rune&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/join-strings/&#34;&gt;文字列連結はどれが速い？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/unicode-normalization/&#34;&gt;Go 言語と Unicode 正規化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;配列&#34;&gt;配列&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, および後述の &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; は組み込みの型だが内部構造と状態を持つため， &lt;a href=&#34;http://golang.org/ref/spec#Allocation&#34;&gt;new&lt;/a&gt; ではなく &lt;a href=&#34;http://golang.org/ref/spec#Making_slices_maps_and_channels&#34;&gt;make&lt;/a&gt; を使う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/golang-slice-internals2&#34;&gt;Go のスライスでハマッたところ - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/egnr-in-6matroom/items/282aa2fd117aab9469bd&#34;&gt;golang - go言語のslice操作をまとめてみた（shiftしたりpushしたり） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hi-nakamura/items/5671eae147ffa68c4466&#34;&gt;sliceの重複チェックを高速化 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;並行処理と並列処理&#34;&gt;並行処理と並列処理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/20130414/1365960707&#34;&gt;Go の並行処理 - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/eca21ed935115e5da2e8&#34;&gt;Go: 計算なしのFizzBuzz - Qiita&lt;/a&gt; : channel の説明するのにいいかも&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yuki2006/items/3f90e53ce74c6cff1608&#34;&gt;Goのchannelの送受信用の型について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hondata/items/64776c79063e93bea9ed&#34;&gt;Go言語のChannelは送信時にもブロックする - Qiita&lt;/a&gt; : 意外と見落とす channel 送信時のブロック&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/da3ca2db58734a966cac&#34;&gt;select loop の小ネタ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sudix/items/67d4cad08fe88dcb9a6d&#34;&gt;Goのforとgoroutineでやりがちなミスとたった一つの冴えたgo vetと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tutuming/items/c0ffdd28001ee0e9320d&#34;&gt;x/net/context の実装パターン - Qiita&lt;/a&gt; : &lt;a href=&#34;https://godoc.org/golang.org/x/net/context&#34;&gt;golang.org/x/net/context&lt;/a&gt; を使って並行処理を細かく制御。 Domain-Driven あるいは Context-Driven な設計でも使えそう。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/najeira/items/71a0bcd079c9066347b4&#34;&gt;Go言語でチャネルとselect - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/arc279/items/c44d4a18a851ff454c64&#34;&gt;golangでシグナルを拾ってgracefulにgoroutineを停めたい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/arc279/items/bc55cdf436c544e91c05&#34;&gt;golang の channel のブロックがよくわからん - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/awakia/items/f8afa070c96d1c9a04c9&#34;&gt;GoのChannelを使いこなせるようになるための手引 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/54f0dbdec0d48082a5b1&#34;&gt;Goでスレッド（goroutine）セーフなプログラムを書くために必ず注意しなければいけない点 - Qiita&lt;/a&gt; : &lt;code&gt;sync.Mutex&lt;/code&gt; にも言及&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hogedigo/items/f0f409ee944c4b2107c3&#34;&gt;GAE/Goでもgoroutine使おうぜ！というハナシ - Qiita&lt;/a&gt; : GAE/Go の API には非同期版がないので積極的に goroutine 使おうよ，という話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shunsukeaihara/items/f9ef7c8d430f63d79d40&#34;&gt;複数のgroutineが生えてるStructの安全な終了方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/go_concurrency_visualize/&#34;&gt;Go言語の並行性を映像化する | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shanxia1218/items/7fb15f50ec645f114bc7&#34;&gt;Go言語でプロセス間同期処理 - Qiita&lt;/a&gt; : Windows の Mutex を使ってプロセス間通信を行う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hhatto/items/c8eb987b0516a45db754&#34;&gt;Goで並行処理のベンチマークをとる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Vermee81/items/88c9e28dec83d43e7883&#34;&gt;go言語初心者が図を書きながらgo routineやgo channelを理解する(Part 1) - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Vermee81/items/30ad42a7265375b1b7b1&#34;&gt;go言語初心者が図を書きながらgoroutineやgo channelを理解する(Part2) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/takuyaueda967/goroutine-channel-go&#34;&gt;Goroutineと channelから はじめるgo言語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tfutada/items/a289628d8b2d0af6152d&#34;&gt;Go言語の並行処理デザインパターン by Rob Pike 前編 - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tfutada/items/dc8db894ac270a79ef2b&#34;&gt;Go言語の並行処理デザインパターン by Rob Pike 後編 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160706165757.htm&#34;&gt;Big Sky :: golang の channel を使ったテクニックあれこれ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go 言語で複数 CPU を使った並列処理を行うには明示的な設定が必要。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/07/30/golang-parallel-by-cpu/&#34;&gt;Go言語でCPU数に応じて並列処理数を制限する | SOTA&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ymko/items/554e3630fefdc29393a8&#34;&gt;やはり俺のgolangがCPUを一つしか使わないのはまちがっている。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hama_du/items/fce4ee1e4b5c2c2d24df&#34;&gt;Goでお手軽に行列の積を爆速並列計算 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;struct-タグについて&#34;&gt;Struct タグについて&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/modal_soul/items/83b0930d90d44e006768&#34;&gt;Goのencoding/jsonでタグが反映されなくてハマったしょうもない話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hiyosi.tumblr.com/post/100922038678/go-%E3%81%A7-struct-%E3%81%AE%E3%82%BF%E3%82%B0%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B&#34;&gt;Go で struct のタグ情報を取得する - hiyosi&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.restartr.com/2014/08/13/golang-json-marshal-unmarshal/&#34;&gt;Goのjson.Marshal/Unmarshalの仕様を整理してみる - I Will Survive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/niiyz/items/3f522c0e5a32de916ec6&#34;&gt;GoでJsonファイルを読み込んで構造体として扱う。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/6556d4eba797329e9f51&#34;&gt;BurntSushi/tomlを使ってハマったこと - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;BurntSushi/toml&lt;/a&gt; にバグがあるという話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/ba363e82332d4dbdf34a&#34;&gt;GoでJSONの一部分を利用者が定義した構造体に読み込める便利な手法を見つけた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaoriya.net/blog/2016/06/25/&#34;&gt;golang は ゆるふわに JSON を扱えまぁす! — KaoriYa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/minagoro0522/items/dc524e38073ed8e3831b&#34;&gt;Go言語でJSONに泣かないためのコーディングパターン - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34; title=&#34;プログラミング言語 Go — text.Baldanders.info&#34;&gt;本家ブログ&lt;/a&gt;記事「&lt;a href=&#34;http://text.baldanders.info/golang/struct-tag/&#34;&gt;Struct タグについて&lt;/a&gt;」でも解説している。&lt;/p&gt;

&lt;h3 id=&#34;エラーハンドリング&#34;&gt;エラーハンドリング&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kaoriya.net/blog/2014/04/17/&#34;&gt;または私は如何にして例外するのを止めて golang を愛するようになったか — KaoriYa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20140416212413.htm&#34;&gt;Big Sky :: golang で複数のエラーをハンドリングする方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dsas.blog.klab.org/archives/go-errors.html&#34;&gt;DSAS開発者の部屋:Go ではエラーを文字列比較する？という話について&lt;/a&gt; : エラーハンドリングには，定数との比較， conversion 構文による型の比較，エラー文字列の比較がある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/ff98ded599d97cf6646e&#34;&gt;panicはともかくrecoverに使いどころはほとんどない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kyoh86/items/6cadd79de08cc597b65a&#34;&gt;go で AggregationException(.NET)的なことをする - Qiita&lt;/a&gt; : ループ等でエラーを集約してからまとめて処理する方法&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/5f2bcfe06eb83830ee55&#34;&gt;echoのAPIサーバ実装とエラーハンドリングの落とし穴 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2016/04/25/go-pkg-errors/&#34;&gt;Golangのエラー処理とpkg/errors | SOTA&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/deeeet/items/dacc71932393ab35d9f8&#34;&gt;Golangでエラー時にスタックトレースを表示する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34; title=&#34;プログラミング言語 Go — text.Baldanders.info&#34;&gt;本家ブログ&lt;/a&gt;でも以下の記事で解説している。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;スタック追跡とパニック・ハンドリング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;context-パッケージ&#34;&gt;context パッケージ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://tip.golang.org/doc/go1.7#context&#34;&gt;バージョン 1,7 から標準パッケージ&lt;/a&gt;に入った &lt;a href=&#34;https://golang.org/pkg/context/&#34;&gt;context&lt;/a&gt; パッケージについて。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ymotongpoo.github.io/goblog-ja/post/context/&#34;&gt;Goの並行パターン：コンテキスト (Go Concurrency Pattern: Context)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2016/07/22/context/&#34;&gt;Go1.7のcontextパッケージ | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taizo/items/69d3de8622eabe8da6a2&#34;&gt;contextの使い方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hogedigo/items/a26d816395b7545ce5f8&#34;&gt;context.Contextでリクエストスコープな値を持ち回す - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/context/&#34;&gt;context&lt;/a&gt; の使い方って（名前からいって）本来こっちだよね&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;開発ツールおよびパッケージ&#34;&gt;開発ツールおよびパッケージ&lt;/h2&gt;

&lt;h3 id=&#34;デバッガ&#34;&gt;デバッガ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tetsuok.hatenablog.com/entry/2012/07/01/062325&#34;&gt;golang でビルド時に最適化をオフにする - tetsuok の旅 blog&lt;/a&gt; : gdb でデバッグする際は最適化を off にするといいという話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/satorutakeuchi18/go-53685632&#34;&gt;Go言語のトラブルシューティング用機能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikawaha/items/e3b35f09fb49e9217924&#34;&gt;Go で利用できるプロファイリングツール pprof の読み方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sgykfjsm.github.io/blog/2016/01/20/golang-function-tracing/&#34;&gt;Goでfunctionが実行された順番を追いかける - sgykfjsm.github.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohac/items/0aa8eb6ff8ee5f599dcd&#34;&gt;Go言語でプリント文デバッグするときのTips - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-言語のテスト-フレームワーク&#34;&gt;Go 言語のテスト・フレームワーク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/8717a5982547cfa54ebc&#34;&gt;Go の Test に対する考え方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://straitwalk.hatenablog.com/entry/2014/09/18/232810&#34;&gt;Goでテストを書く - 成らぬは人の為さぬなりけり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/umisama/items/0d589cca7e89b89c29a8&#34;&gt;golang 1.4で追加されたtestingの便利機能(テストの初期化とお片づけ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taizo/items/11897f6284159919f65a&#34;&gt;gojiのレスポンス結果をテストする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/24fc34ec0c31f6474e6d&#34;&gt;Go Mockでインタフェースのモックを作ってテストする #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/20131123/1385189088&#34;&gt;Go でベンチマーク - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Mulyu/items/ed585f2777496f29a725&#34;&gt;go言語でベンチマーク - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/peroli-hirayama/items/f1419db7264fa9f9fe8f&#34;&gt;プロダクト開発でのGoのテストとモック活用事例 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/12/21/go-fuzz/&#34;&gt;Go言語でファジング | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yosukesuzuki/items/c9e5c19df97d2ad5595a&#34;&gt;GAE/GoとGojiの組み合わせでテストを書く - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/AkihiroSuda/items/0fd83df29182d4f5cdef&#34;&gt;&lt;code&gt;go test -count n -timeout t&lt;/code&gt; - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160328114637.htm&#34;&gt;Big Sky :: Re: golangでIOへのテストを行う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.eure.jp/tech/go1_7-subtests/&#34;&gt;Golang におけるサブテストの並行処理実装について | eureka tech blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ttyokoyama/items/5b99299ec112b580f03b&#34;&gt;GAE/Goのテストを実行するために必要なこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chisso/items/1dcc52f404b88d274f29&#34;&gt;Golangでテストしやすいコードをかく - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34; title=&#34;プログラミング言語 Go — text.Baldanders.info&#34;&gt;本家ブログ&lt;/a&gt;記事「&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;Go 言語のテスト・フレームワーク&lt;/a&gt;」でも解説している。&lt;/p&gt;

&lt;h3 id=&#34;go-言語のドキュメント-フレームワーク&#34;&gt;Go 言語のドキュメント・フレームワーク&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/megu_ma/items/2066aef2f8c7f0ce2cc3&#34;&gt;Go で godoc を使えるようにする〜godoc のインストール〜 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/05/26/go-code-review/&#34;&gt;Go言語のコードレビュー | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://papaeye.tumblr.com/post/92328649161/go&#34;&gt;Go コードのレビュー時によくされるコメント - build error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20131101/1383285018&#34;&gt;testingパッケージのExamplesについて - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swdyh.tumblr.com/post/55771477125/go-example&#34;&gt;GoのExampleテストが便利 : swdyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20140225/1393302743&#34;&gt;godoc.org への掲載方法を調べた - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34; title=&#34;プログラミング言語 Go — text.Baldanders.info&#34;&gt;本家ブログ&lt;/a&gt;記事「&lt;a href=&#34;http://text.baldanders.info/golang/document/&#34;&gt;Go 言語のドキュメント・フレームワーク&lt;/a&gt;」でも解説している。&lt;/p&gt;

&lt;h3 id=&#34;refactoring&#34;&gt;Refactoring&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/minodisk/items/d96a0673223f36315ce7&#34;&gt;ジェネレートしたコードを gofmt / goimports する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20150113141338.htm&#34;&gt;Big Sky :: golang のリファクタリングには gofmt ではなく、gorename を使おう。&lt;/a&gt; : リファクタリングには gofmt よりも gorename が使えるという話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/fcd25db64f341ad2471f&#34;&gt;struct にアノテーションつけてたら go vet . すべき - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/osamingo/items/d5ec42fb8587d857310a&#34;&gt;これからGo言語を書く人への三種の神器 - Qiita&lt;/a&gt; : &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;goimports&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt; で正しいコードを書きましょう。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kyoh86/items/1f2022b63372b84f1a27&#34;&gt;golintと闘いたいけど心の折れてしまった勇者のための隠しダンジョン - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/238f6f0ee27bdf1de2a0&#34;&gt;gometalinter で楽々 lint - Qiita&lt;/a&gt; : 各種 lint を統合的に扱える&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;クロス環境&#34;&gt;クロス環境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://unknownplace.org/archives/golang-cross-compiling.html&#34;&gt;Goはクロスコンパイルが簡単 - unknownplace.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/02185f51162e92759ebe&#34;&gt;Go のクロスコンパイル環境構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kaoriya.net/blog/2015/03/06/&#34;&gt;golang でのクロスコンパイルの留意事項 — KaoriYa&lt;/a&gt; : Windows 環境でクロス環境を構築する際の注意点。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yanolab/items/5a6dfb3c07c94f7c760d&#34;&gt;Golang + Raspberry Pi + LPS331AP で気圧・温度を測定してみた - Qiita&lt;/a&gt; : Raspberry Pi 用のクロス環境例。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gobot.io/&#34;&gt;Gobot - Golang framework for robotics, physical computing, and the Internet of Things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/05/19/gox/&#34;&gt;複数プラットフォームにGoアプリケーションを配布する | SOTA&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/07/22/go1_5-cross-compile/&#34;&gt;Go1.5はクロスコンパイルがより簡単 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ttsuzo/items/64e29dd7caa635ac7863&#34;&gt;MacOS X でGo言語のクロスコンパイルを試したらハマった - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/mitchellh/gox&#34;&gt;gox&lt;/a&gt; を使う方法&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/e44961a8bcbb2578cfe7&#34;&gt;Goで64bitと32bitの実行ファイルを同一Windows機で作成するために講じたこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/methane/items/f8c5a5f2209739daf44e&#34;&gt;Travis-CI で Go の Windows 用バイナリを Github release に登録する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shizu/items/c8a28e0d2299868dafa9&#34;&gt;gopherjs + electron テスト - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/gopherjs/gopherjs&#34;&gt;&lt;code&gt;gopherjs/gopherjs&lt;/code&gt;&lt;/a&gt; を使って Go のコードから javaScript コードを生成できるらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/rerofumi/items/d6a8ba08270acb61b31c&#34;&gt;Raspberry PI ２ 用の consul を作る (201512版 - Qiita&lt;/a&gt; : Raspberry PI 上でビルドするより Linux のクロス環境を使ったほうが速いらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/10/16/golang-in-ci-as-a-service/&#34;&gt;CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/m0a/items/d933982293dcadd4998c&#34;&gt;RaspberryPi1(2とzeroも)で動かすgolang製アプリをクロスコンパイル(onMac) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34; title=&#34;プログラミング言語 Go — text.Baldanders.info&#34;&gt;本家ブログ&lt;/a&gt;記事「&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;Travis CI でクロス・コンパイル&lt;/a&gt;」でも解説している。&lt;/p&gt;

&lt;h3 id=&#34;c-言語との連携&#34;&gt;C 言語との連携&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://1000ch.net/posts/2014/c-in-golang-with-cgo.html&#34;&gt;cgoでGoのコードからCの関数を利用する - 1000ch.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://beatsync.net/main/log20141022.html&#34;&gt;cgoでGolangとC++ライブラリをリンクするとき、何が起きているのか - beatsync.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Satachito/items/5a0d7dd228d3272e0780&#34;&gt;GO 1.5 と C++ を SWIG でブリッジさせる方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yugui/items/e71d3d0b3d654a110188&#34;&gt;cgoを使ったCとGoのリンクの裏側 (1) - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yugui/items/e71d3d0b3d654a110188#_reference-b69de9de7311c6e17e7f&#34;&gt;cgoを使ったCとGoのリンクの裏側 (1) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/flowtumn/items/2df066ca776023bcc687&#34;&gt;Golang で Static Library を作る際、stringをparameterで受け取るならコピーしよう。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nothingcosmos/items/b5dc76aa953222bbdb5c&#34;&gt;マルチプラットフォーム対応したライブラリ Golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;logging&#34;&gt;Logging&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kosuda/items/988c505c2abc5321aba8&#34;&gt;Golang logging library - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.satotaichi.info/logging-frameworks-for-go/&#34;&gt;go言語におけるロギングについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Ets/items/49e8f781990a3b0b3821&#34;&gt;Golangで簡単にログを吐くことを考える - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/cihub/seelog&#34;&gt;seelog&lt;/a&gt; について解説している。私は XML には全くアレルギーがないので無問題&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sbjib/items/2cef51e572eef0795bc2&#34;&gt;Go言語でdebugログの実現方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/methane/items/cedbf546ae2db8a63c3d&#34;&gt;loggingについて話そう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/74th/items/441ffcab80a6a28f7ee3&#34;&gt;golangでlogを標準出力とテキストファイルの2箇所の出力する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/303a0bfa9f0296eb544f&#34;&gt;gorpで実行されるSQLをログに出力する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ビルド時に情報を各種埋め込みたい&#34;&gt;ビルド時に情報を各種埋め込みたい&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/d643a0ccb6270e8e3734&#34;&gt;Go言語: ビルド時にバージョン情報を埋め込みたい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doloopwhile.hatenablog.com/entry/2014/09/08/211626&#34;&gt;Golangビルド時に、サブパッケージ内の変数をいじる - None is None is None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/6b32370532c3eafe1f0e&#34;&gt;Goでビルドバージョン情報を参照できるようにする(Go1.5) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikawaha/items/c02d84cfd00f8f442500&#34;&gt;go-bindata でコンパイル時にリソースを埋め込んじゃおう！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ymko/items/c2e3c8fe25bce425136d&#34;&gt;ソースを実行ファイルに埋め込む方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/konohazuku/items/131b251a5fa29213ac5e&#34;&gt;Golangで静的ファイルをバイナリに含めるライブラリを書いてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/wadahiro/items/4173788d54f028936723&#34;&gt;GolangのGin/bindataでシングルバイナリを試してみた(+React) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;integrated-development-environment&#34;&gt;Integrated Development Environment&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://codezine.jp/article/detail/8374&#34;&gt;EclipseでGoプログラミング！ GoClipseのインストールとGojiフレームワークを使ったWeb APIの作成 （1/6）：CodeZine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ngsm3/items/67620fc4e39219235a23&#34;&gt;WindowsでGolang開発環境構築　IntelliJ IDEA - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/dev/serial/01/android_studio/0001&#34;&gt;第1回　Android Studio，そしてベースとなる「IntelliJ IDEA」とは何か？：Android Studio最速入門～効率的にコーディングするための使い方｜gihyo.jp … 技術評論社&lt;/a&gt; : IntelliJ IDEA についての解説&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/makoto2468/items/3ced77de947ea997e72f&#34;&gt;Go入門@環境構築編(IntelliJ IDEA 14.1.4) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/peka2/items/cdc9d508dcbf4a131271&#34;&gt;WindowsにIntelliJ IDEAでgoの開発環境を作りましたよ　ついでにgit連携もいたしましたよ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ryo-endo/items/e8cb4987b4af9ddc24d5&#34;&gt;Cloud9にGo言語でHelloWorldを実装・実行してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;atom-で-go&#34;&gt;ATOM で Go&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://notchained.hatenablog.com/entry/2014/09/20/104829&#34;&gt;AtomでGoを書く環境を整える（Windows） - Technically, technophobic.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/MakoTano/items/3d807a96c3933ac8aa13&#34;&gt;AtomでのGo言語開発環境セットアップ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34; title=&#34;プログラミング言語 Go — text.Baldanders.info&#34;&gt;本家ブログ&lt;/a&gt;記事「&lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;ATOM で Go&lt;/a&gt;」でも解説している。&lt;/p&gt;

&lt;h3 id=&#34;visual-studio-code-で-go&#34;&gt;Visual Studio Code で Go&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/evalphobia/items/f68396d573c7caf2065b&#34;&gt;VisualStudioCode - Visual Studio CodeでGo言語の設定 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/llaughlin/16305f0b91356e93a1c4&#34;&gt;VSCode+Golang&lt;/a&gt; : task.json の設定&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/m0a/items/ebcf964effbc7d50a489&#34;&gt;VisualStudioCodeでGAE/Goの環境設定 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;emacs-で-go&#34;&gt;Emacs で Go&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/koki_cheese/items/2e2ead918a1f1ac5bf6e&#34;&gt;emacsでGoの環境構築をやる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vim-で-go&#34;&gt;Vim で Go&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masa23/items/db184871c78311566434&#34;&gt;Vim で golang を書く環境を整える - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;build-tool-for-golang&#34;&gt;Build Tool for Golang&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/constabulary/gb&#34;&gt;constabulary/gb&lt;/a&gt; を使ってプロジェクトベースの環境構築&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinofara/items/ac0591fef95c2c6e936e&#34;&gt;golang - gbを知ったのでgojiを使ったWEBアプリケーションプロジェクトを管理してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://walledcity.com/supermighty/building-go-projects-with-gb&#34;&gt;Building Go projects with gb - Supermighty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/FiloSottile/gvt&#34;&gt;FiloSottile/gvt&lt;/a&gt; というのがあるらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34;&gt;Masterminds/glide&lt;/a&gt; と Go 1.5 の Vendoring 機能を組み合わせてパッケージ管理できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/8e192e68d6b18bec3b4a&#34;&gt;glide - パッケージ管理のお困りの方へ - - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;direnv-で開発環境を切り替える&#34;&gt;direnv で開発環境を切り替える&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://direnv.net/&#34;&gt;direnv - unclutter your .profile&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv/direnv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doloopwhile.hatenablog.com/entry/2014/06/18/010449&#34;&gt;direnvで解決するGOPATHの3つの問題点 - None is None is None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.hde.co.jp/entry/2015/02/27/182117&#34;&gt;改めて、direnvを使いましょう！ - HDE BLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/aminamid/items/5a0e9461385c80d0c8a6&#34;&gt;さくら - homeにgolang, direnv とvirtualenvを入れて動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;continuous-integration&#34;&gt;Continuous Integration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dmnlk/items/3fb4e0abb98e39fee275&#34;&gt;Go + Travis CI + Coveralls でCI環境を作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sue445.hatenablog.com/entry/2013/06/01/170607&#34;&gt;GithubにあるリポジトリをTravis CI連携する手順 #junitbook - くりにっき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/10/16/golang-in-ci-as-a-service/&#34;&gt;CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uchimanajet7.hatenablog.com/entry/2015/03/20/211352&#34;&gt;golangでTravis CIを使ってクロスコンパイルするときにハマったところ #golang #travisci - uchimanajet7のメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/atotto/items/b796c31c1755dbec13db&#34;&gt;Go言語のビルド生活を drone.ioで幸せに暮らす #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kaneshin/items/163626c09c1ad9818c6c&#34;&gt;Go+Webアプリケーション+CircleCIで静的解析・テスト・バイナリリリースを効率良く行なう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;パッケージやサンプルコード&#34;&gt;パッケージやサンプルコード&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sago35/items/cc9ed3dc38d0b2f19bf9&#34;&gt;Go用のGoogle製のGUIツールキットgxuiのインストール(Windows版) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/bfc1eb6407cbdfebbd18&#34;&gt;goでLチカの練習　その２ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/rubytomato@github/items/638299aabb7922cbef59&#34;&gt;Revel templatesを使ったサンプルアプリケーション - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/20bc61175ce4a33b7365&#34;&gt;goでwindowsでwindow - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.daisukeyamashita.com/post/1209.html&#34;&gt;Go言語でパッケージを作成して世界に公開する方法 at ミネルヴァの梟は黄昏とともに飛び始める（山下 大介 公式ブログ）&lt;/a&gt; : パッケージの作り方なんだけど情報が古い。「昔はこうだった」くらいの感じで&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/9f05679f25cfc9c3ecfc&#34;&gt;goでwindowsでキースキャン - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mitsuse/items/8669bf54d2310b3e68a1&#34;&gt;gocron でジョブスケジューリング - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/carlescere/scheduler&#34;&gt;gcarlescere/scheduler&lt;/a&gt; のほうがおすすめらしいw&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/51b0f45496e5143e2e63&#34;&gt;Google ChromeのテキストエリアをEmacsで編集する&amp;rsquo;Edit with Emacs&amp;rsquo;から任意のエディタを起動するデーモンをGo 1.4 for Windowsで書いてみたわけだが、エディタがブラウザの後ろに出てしまってダメかもしれない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/9db22c9684cc0586b737&#34;&gt;golangでprivateなエイリアスのポインタを元の型に戻す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/methane/items/8f56f663d6da4dee9f64&#34;&gt;Go の expvar パッケージを使ってアプリケーションのメトリクスを公開する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/b9c0f92851454dc6d461&#34;&gt;Go言語: ファイルの存在をちゃんとチェックする実装? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinofara/items/e5e78e6864a60dc851a6&#34;&gt;Golangで、ファイル一覧取得（最新順出力） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tutuming/items/d8aaaf5442d84a7961e1&#34;&gt;Go小ネタ: 正規表現を全角半角問わずマッチするよう変換する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sudix/items/c542e1b59bc94dc741e3&#34;&gt;Goのバッチで統計を取得するAPIを用意しておくと便利 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masatsugumatsus/items/e28254ff52963705ce7f&#34;&gt;Mithril＋golang Gin を試す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/qube81/items/c47b9e3ea8d028e95588&#34;&gt;大学入試問題をGoで解いてみる - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/math/big/&#34;&gt;math/big&lt;/a&gt; パッケージを使って大きな数を計算する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/8845musign/items/5c4b32f82c2df08acd93&#34;&gt;cmd.Envを設定してexecしたらコケた - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/os/exec/&#34;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; パッケージを使う際には環境変数に注意&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ciruzzo/items/144bc1874947441f9fb8&#34;&gt;golangで数独を解いた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/najeira/items/8310fecf4b70c918f855&#34;&gt;Go言語でBigQueryのクエリを実行してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hachi8833/items/463264f531474a856064&#34;&gt;今後イケそうなデスクトップGUIフレームワーク - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/miketheprogrammer/go-thrust/&#34;&gt;go-thrust&lt;/a&gt; について言及&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/1l0/sumeragi&#34;&gt;1l0/sumeragi&lt;/a&gt; : 皇紀や元号を出力するパッケージ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/grj_achm/items/679b3f3af2cf377f0f02&#34;&gt;RubyからGoの関数をつかう → はやい - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/B73W56H84/items/20a67b74bb646d140f7d&#34;&gt;Perl6からGoの関数をつかう → はやい? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yujiorama_at_github/items/3f7cab906969764cc805&#34;&gt;GroovyからGoの関数を使う→はやい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/20151106194958.htm&#34;&gt;Big Sky :: RubyからGoの関数をつかわなくても再帰をやめる → はやい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/jyagaimo_qiita_/items/93d195ca65982b75e205&#34;&gt;Go ライブラリによる CGIプログラム内ルーチング - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/11/10/go-crypto/&#34;&gt;Go言語と暗号技術（AESからTLS） | SOTA&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tcnksm/go-crypto&#34;&gt;tcnksm/go-crypto&lt;/a&gt; : サンプルコード&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/qube81/items/f66a38b28ec58bc5c4da&#34;&gt;マイナンバーのチェックデジットをGoで計算する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/arc279/items/5f277aa5cce3de5247e5&#34;&gt;golangでImageMagickを触りたい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/otiai10/items/83b186596897705ce392&#34;&gt;Go言語でRedshiftとつなぐ（というかただのPostgreSQL） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/58f6a421462b93dec471&#34;&gt;GolangのOpenGL事情(WebGLも含むよ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/enokidoK/items/a3aff4c05e494b004ef8&#34;&gt;goのmgoでfindするときの処理 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/naoina/items/7966f73f3a807b3d25d6&#34;&gt;Go と reflect と generate - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mau4x/items/424fe7964e70a3a99965&#34;&gt;Windows+GoでNFC/Felicaにアクセスしてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/umisama/items/48ba74a58f1e6530e305&#34;&gt;GoでShared Libraryをビルドしてみた(簡単ドキュメント指向DB) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hogedigo/items/342217982f267ccd234d&#34;&gt;GAE/GoでCMSつくった - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tetuyoko/items/746599e36ca4985d9e1a&#34;&gt;Goで3Dモデル変換してプレビュー - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/cd8d122dfeb41e1608d1&#34;&gt;Go最後の秘宝「GUI」を探しに行く - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/miyabishi/items/09a55b10953c9dbe7ee3&#34;&gt;Go + QML + QChart.js で素敵なチャートを表示する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/06fff7b224d77517c08f&#34;&gt;golang で AB x CD / E - F * G * H = 2016 になる全パターン洗い出し - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yumura_s/items/68760d6b902aee9c78f0&#34;&gt;Go で 0 から始まる連続する n 個の整数を重複無く k 個選んだ時の組み合わせの列挙 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mikeshimura/items/d149bbd869683e820579&#34;&gt;Goで帳票をPDFに作成するライブラリ。 請求書などの複雑なフォーマットにも対応 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ushio_s/items/3e270933641710bbd88e&#34;&gt;golangのtime.Timeの当日00:00:00を取得する方法とベンチマーク - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mikeshimura/items/b60823e923fb6d0840c0&#34;&gt;Go で簡単に Excelを作成するライブラリ。 色、罫線、網掛けを事前定義済 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yyoshiki41/items/1159e1a70ffaa8fd84ed&#34;&gt;Gmail API for Goで、下書き生成ツールを作りました。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taksatou@github/items/d721a62158f554b8e399&#34;&gt;Goで関数型プログラミング - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/reflect/&#34; title=&#34;reflect - The Go Programming Language&#34;&gt;reflect&lt;/a&gt; パッケージを使って高階関数を表現できる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/morikuni/items/ad8d900f56ddeb223101&#34;&gt;GoでANSIエスケープコードを扱うライブラリを作った(色付け・カーソル移動等) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chimatter/items/b0879401d6666589ab71&#34;&gt;Go で interface {} の中身がポインタならその参照先を取得する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chimatter/items/1a5fb2f03477f2ada520&#34;&gt;Go の DB アクセス用のパッケージを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/walkers/items/e407386d7ef184ec830a&#34;&gt;Google App Engine SDK for Goを使ってGAE上でアプリを動かすまで - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Iwark/items/726dfb2d15a883e389b6&#34;&gt;GoでSpreadsheetを操作するパッケージを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/iktakahiro/items/2e240147ca3188948a17&#34;&gt;Go 言語 1つの構造体に複数の validation を適応する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/letusfly85/items/5f479e5b072a05dbcf53&#34;&gt;Golangでreduce関数を提供しているライブラリugoを眺めてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/b4b4r07/items/3a790fe7e925b4ba14f3&#34;&gt;Go 言語で rm 用ごみ箱ツール gomi を作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/lufia/items/8f3cc32f26168702e2f4&#34;&gt;パッケージのimport pathを好みのURLにする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/damele0n/items/92a9b845c991b1b29aea&#34;&gt;JSONSchemaからstructのようなコードを生成する&amp;rdquo;structr&amp;rdquo;というのを書いた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dbsparkle/items/72fc1ad50ba6000f2630&#34;&gt;Twilio使って、入力した電話番号をチェックする方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/bba69d84a1e0b67c4db8&#34;&gt;埋込みとインタフェース #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/4d3316490a571e5d79ed&#34;&gt;UnityのネイティブプラグインをGoで書く #golang #unity - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/asm/items/6184cf5dcca637670e0e&#34;&gt;Golang で過去の遺物的(cp932)DLLを利用する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yamamoto-febc/items/0ce30e2dba32c60bbf66&#34;&gt;Terraform for さくらのクラウド - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masa23/items/e781124a7e0305bc40c4&#34;&gt;Golang 日付のフォーマットでハマった話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nayuneko/items/ca2651e3a613c8e3256a&#34;&gt;Go言語で東京メトロAPIを叩く - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mako0715/items/259659e5e2935d2afc10&#34;&gt;GAE/Goで形態素解析してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/CST_negi/items/d79600c34191adb09c79&#34;&gt;MySQLでのトランザクション処理をGolang+dbrで実現してゆく話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ieee0824/items/13435fc6de5f22cdb2f4&#34;&gt;コマンドラインからググれてもいいと思ったので作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160804131744.htm&#34;&gt;Big Sky :: golang の遅いコードをたった1行で高速化するテクニック&lt;/a&gt; : 実際にはちょっと速くなるくらいらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160921010820.htm&#34;&gt;Big Sky :: Golang で Windows の DLL を作る方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160910001214.htm&#34;&gt;Big Sky :: golang で slim テンプレートエンジン書いてる。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/silverfox/items/81769425e51f24e676d2]&#34;&gt;Go+GAE+Cloud Datastoreで簡単なREST APIを構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/deeeet/items/1e2164f89ccfc29d7b11&#34;&gt;独自のfmt.Formatterを実装する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takatoshiono.hatenablog.com/entry/2016/09/22/024605&#34;&gt;Go 言語で wc を実装してみた - takatoshiono&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/32hiko/items/3be36dad2d651399ba1b&#34;&gt;【コンピュータ将棋】ゴルーチンでお手軽持ち時間管理＆並行探索 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kaorumori/items/fa37130065d0450d6342&#34;&gt;Go言語でエクセルファイル (.xlsx) を読み込む - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/tealeg/xlsx&#34;&gt;&lt;code&gt;github.com/tealeg/xlsx&lt;/code&gt;&lt;/a&gt; パッケージを使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tebakane/items/2f2ed2558357c274c478&#34;&gt;Go言語でExcel操作ライブラリを書いてみた - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/loadoff/excl&#34;&gt;&lt;code&gt;github.com/loadoff/excl&lt;/code&gt;&lt;/a&gt; パッケージの説明&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yyoshiki41/items/f81442d7dc2d0ddcf15b&#34;&gt;radikoの録音ツールをGoで書いた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/a312d2c5381e36cf4cd3&#34;&gt;簡単な式の評価機を作ってみる #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mackee_w/items/71d7685852bb5bdda465&#34;&gt;Goのコード生成のためのテンプレートエンジン seyfert を書いてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/bamchoh/items/49e230db51e7237b1ce9&#34;&gt;nagomeのplugin ngm-polly 作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yagitatsu/items/264aa3e167bf4650e705&#34;&gt;Go言語でコレクション処理のメソッドを作ってみた　#golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/13340f2845316532b55a&#34;&gt;ASTを取得する方法を調べる #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nirasan/items/69643d0ddf8a7345cf7c&#34;&gt;ピーマンとハトと数学を Go 言語で試す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20170111165324.htm&#34;&gt;Big Sky :: Windows からも ssh でリモートコマンド実行したい、それ golang で出来るよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20170112181052.htm&#34;&gt;Big Sky :: golang の http.Client を速くする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/868704380455c5090d4b&#34;&gt;goパッケージで簡単に静的解析して世界を広げよう #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20170119180147.htm&#34;&gt;Big Sky :: Re: Go でシングルバイナリな Web アプリを開発しているときに webpack &amp;ndash;watch をうまいところやる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;コマンドライン-ツール&#34;&gt;コマンドライン・ツール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yuuki.hatenablog.com/entry/go-cli-unix&#34;&gt;Go言語によるCLIツール開発とUNIX哲学について - ゆううきブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tellme.tokyo/post/2015/06/23/unix_cli_tool_go/&#34;&gt;開発者から見た UNIX 哲学とコマンドラインツールと Go言語 - TELLME.TOKYO&lt;/a&gt; （&lt;a href=&#34;http://qiita.com/b4b4r07/items/df660d82e2de715acda5&#34;&gt;Qiita 版&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uokada/items/f0e069a751679dcf616d&#34;&gt;コマンドライン引数 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ryochack.hatenablog.com/entry/2013/04/17/232753&#34;&gt;Go言語のflagパッケージを使う - uragami note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/flaflasun/items/df5ebb057697da062a08&#34;&gt;Go を使ってコマンドラインツール wordc を作ってみた - Qiita&lt;/a&gt; : &lt;a href=&#34;https://github.com/codegangsta/cli&#34;&gt;codegangsta/cli&lt;/a&gt; についての言及あり&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/isaoshimizu/items/71dd2ca2a08ddb607e31&#34;&gt;GoでCLIツール作るのに便利そうなパッケージを集めてみました - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ryochack.hatenablog.com/entry/2013/07/15/232207&#34;&gt;C言語とGo言語で標準出力が端末を参照しているかどうかを判定する - uragami note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/04/17/panicwrap/&#34;&gt;Go言語のCLIツールのpanicをラップしてクラッシュレポートをつくる | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kumatch/items/258d7984c0270f6dd73a&#34;&gt;flag 並にシンプルでより強力な CLI パーサ kingpin の紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yuroyoro/items/9358cd25b5f7fe9dd37f&#34;&gt;Goで外部コマンドをパイプして実行する - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20151030131242.htm&#34;&gt;Big Sky :: golang で UNIX コマンドパイプラインを扱う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tanksuzuki/items/9205ff70c57c4c03b5e5&#34;&gt;Golangで外部コマンドを実行する方法まとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;spf13/cobra: A Commander for modern Go CLI interactions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lab.flama.co.jp/archives/1536/&#34;&gt;GolangでCLIの場合にcobraを使うことにした件 | FLAMA技術Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/minamijoyo/items/cfd22e9e6d3581c5d81f&#34;&gt;GolangでwebサービスのAPIを叩くCLIツールを作ろう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Peranikov/items/4376633bb72492051336&#34;&gt;GoでMySQLにCA証明書を使ってアクセスする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;入出力処理&#34;&gt;入出力処理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/a53b701c8827fe4bfec7&#34;&gt;Go ファイルや標準入力から一行ずつ読み込む - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/5c8cfce81933c5eb9fd0&#34;&gt;Goでファイルを読んで別のgoroutineに渡す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kroton/items/431e6dad9e5e4dbc44cf&#34;&gt;「連結されたgzipを1行ずつ見る」をgolangでやったらハマった - Qiita&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/compress/gzip/&#34;&gt;compress/gzip&lt;/a&gt; と入出力処理の関係&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/curious-eyes/items/2d4b6c20ea47e3efc47b&#34;&gt;bufio.Scannerのend-of-line判断を変更してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kobegdg.blogspot.jp/2013/05/go.html&#34;&gt;KOBE GDG: Go言語　バイナリファイルを扱う&lt;/a&gt; : 任意のオブジェクトをバイト列に変換してファイルに格納&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/catatsuy/items/41d3c49248b517b5af96&#34;&gt;ファイル書き込みの度にファイルを開いたらどれくらい遅いのか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tanksuzuki/items/e712717675faf4efb07a&#34;&gt;Golangで標準入力がパイプで渡されたものか判定する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ソートアルゴリズムいろいろ&#34;&gt;ソートアルゴリズムいろいろ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sugyan/items/fd7138a756c1a409f5fd&#34;&gt;sliceのシャッフル - Qiita&lt;/a&gt; : &lt;a href=&#34;https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&#34;&gt;Fisher–Yates shuffle&lt;/a&gt; というアルゴリズムらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nyamadandan/items/2c82011801b148c98e52&#34;&gt;Go言語でバイトニックソート実装してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohkawa/items/269507985b3ae10cbff9&#34;&gt;Goでバケットソートアルゴリズム(ビット列を使用) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tchssk/items/b61f1f06d22a6232d4c8&#34;&gt;interface{} をソートする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;web-microframework-for-golang&#34;&gt;Web Microframework for Golang&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20141021134209.htm&#34;&gt;Big Sky :: golang で最近お気に入りの WAF「Goji」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/a038f1b99e0caee97d3e&#34;&gt;gojiのMiddlewareの使い方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sys_cat/items/1b8581de1344cc5db6bb&#34;&gt;Gojiを使ってWebビーコン作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taizo/items/845fcfc58cfd0b30020a&#34;&gt;Google App EngineでGoのウェブアプリケーションをまず動かしてみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/n0bisuke/items/45ab414fc11959fc27c7&#34;&gt;Go言語(Go-Json-Rest)でAPIサーバーを立てるときのCORS設定 (Basic認証機能付きも) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taizo/items/e6597c66c3494d545686&#34;&gt;Goでwebサーバー作るときに考えたこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tchssk/items/cb208f9ccd0a1819bbfa&#34;&gt;Golang の net/url で # を含む文字列を Parse() する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kkdd/items/bd653e3d02546d1aa340&#34;&gt;Golang で OpenStreetMap ファイル（osm.pbf）の読み込み（osmpbf 利用） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masahikoofjoyto/items/f60188f4252e455541d4&#34;&gt;GoのWEBアプリケーション運用について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hachi8833/items/315642ceecb378cabcb4&#34;&gt;go-qmlのWebViewでローカルWebサイトを表示するときの注意 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/eielh/items/2e5fabb707355253b187&#34;&gt;http.Clientのタイムアウトの時間を変更 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kenjiszk/items/7ae842415ec392822612&#34;&gt;golangでhttpを監視するscriptを書いて結果をslackにpostする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/n0bisuke/items/65c4a473a1fdbbf931f0&#34;&gt;Go言語(Go-Json-Rest)のCORSでのハマり。Safariだけでハマった話。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yodatomato/items/8013f728bbf4358e9425&#34;&gt;GoでGoogleCalendarAPIv3を叩く（APIキー） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/curious-eyes/items/3dae99e5e0feb6b9f642&#34;&gt;Golang で iso-2022-jp メールのデコード - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mpyw/items/cb0f824d618d8fed384e&#34;&gt;Go言語の練習用にTwitterのOAuth認証をフルスクラッチしてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/fumizp/items/63243cf418d27898f208&#34;&gt;Goとtesseractで簡易OCRサーバを作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikuwow/items/c8f494bbd16adf6db142&#34;&gt;Go言語で簡単にHTTPリクエストを送ってJSONをパースするサンプル - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hiratara/items/0f0b6103a0dc9280cea9&#34;&gt;UnixListener.Closeでソケットファイルが消えて困っている - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ToruFukui/items/eb0d3593b20a5e2f15c6&#34;&gt;Goフレームワークのパフォーマンス比較 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uokada/items/c30e26cd8bdee7dfe7eb&#34;&gt;一定時間だけ立ち上がるサーバーを書いた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20151120113437.htm&#34;&gt;Big Sky :: golang のミドルウェアとして組み込むだけでパフォーマンス改善が見込める「HTTP Coala」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/6c0de3e31642dfd17695&#34;&gt;Go付属のツールでオレオレ証明書を生成する - Qiita&lt;/a&gt; : なるほど（笑）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tutuming/items/6006e1d8cf94bc40f8e8&#34;&gt;Go http.RoundTripper 実装ガイド - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/skitaoka/items/a2b55cb08060aa8d6a52&#34;&gt;Go で静的 HTTP サーバを作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ponchi/items/7e474041484841ee1ce6&#34;&gt;[golang]RevelでCSRFの対策 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ryurock/items/f55db5944397619735bf&#34;&gt;net/httpでポート443のHTTPSサーバーを立ち上げるまで - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/jumbOS5/items/45f86db15a5a6c8a0622&#34;&gt;概観からGoのWebFrameworkを選ぶ（2016/02） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/jumbOS5/items/d817bc95279877e72b24&#34;&gt;Revel(Golang)でViewを理解する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160224103638.htm&#34;&gt;Big Sky :: golang で画像アップロードが簡単に出来る go-imageupload を使ってみた。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/okataitai/items/db6999ea1ab39ec0bd3e&#34;&gt;Go言語のスクレイピング系ライブラリまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/keika299/items/62e806ae42828bb3567a&#34;&gt;Go の echo ってWebサーバーでサクッと REST しちゃう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/795a008d1b12ee657d9a&#34;&gt;nginx+circus+gojiによるgolang webアプリケーションの動作環境構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160329094503.htm&#34;&gt;Big Sky :: golang で HTTP を使った処理を4倍速くする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/CST_negi/items/5ea3395b35e68fd0d3b3&#34;&gt;GolangのフレームワークEchoの話とHelloWorldサンプルを読み解くだけ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/CST_negi/items/5e276ddc0412cefef7e3&#34;&gt;Golang+Echo+dbrでMySQLのCRUDをする／JSONでDBの値を返却する話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/lanevok/items/dbf591a3916070fcba0d&#34;&gt;Gin(Golang)におけるHTMLテンプレート記述方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kent_ocean/items/45e153d2c5467501a20b&#34;&gt;GoLang で html/template を使っていて遭遇したエラーとその解決 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/naoki_koreeda/items/8c818a3e9f6138ddbb87&#34;&gt;GAE/Go (echoフレームワーク)で Line Message API 使って Bot を作る。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/qube81/items/701279c43b33ce923613&#34;&gt;Go製のフレームワークechoを使ってJSONを返すWebサーバーを作り、GoogleAppEngineで動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/CST_negi/items/bcb4730c6efeb838c4a7&#34;&gt;go+ginでローカルで作ったWebアプリをGoogleAppEngineに載せる時に注意することまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nozaq/items/9cd9bf7ee6118779bda9&#34;&gt;社内のバックエンド開発にgRPCを導入してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/85b06c0856c33e716c75&#34;&gt;Echoはver.3で結局のところ何が変わったのか？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/GushiSnow/items/97c1f64c003b27c6b98a&#34;&gt;Go言語のWEBフレームワークRevelを使用してセキュアなAPIを作成 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dtan4/items/8c417b629b6b2033a541&#34;&gt;Go でツール書くときの Makefile 晒す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ikawaha/items/6638ee8b6978aef50d65&#34;&gt;goa でデザイン・ファーストをシュッとする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Kei-Kamikawa/items/a6cb72251b95c8f5baa1&#34;&gt;echo 初心者でも簡単!! echo で扱うアセットファイル群を簡単にバイナリにまとめて使ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;組み込み開発&#34;&gt;組み込み開発&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/e6fa2bd1527c257bb9c9&#34;&gt;goでwindowsでRS232C - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohisama/serial&#34;&gt;ohisama/serial&lt;/a&gt; (forkd from &lt;a href=&#34;https://github.com/lnmx/serial&#34;&gt;lnmx/serial&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohisama@github/items/12dccdcdfc5082c22e72&#34;&gt;goでwindowsでRS232C その２ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tomoya0x00/items/d957dc00682c57f96771&#34;&gt;Goでのシリアル通信でハマった事 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://unokun.hatenablog.jp/entry/2015/08/01/150628&#34;&gt;go 1.5でgomobile(android) - unokun’s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.rdy.jp/2015/09/21/ios-gomobile/&#34;&gt;gomobileでiOSアプリをビルドする手順まとめ - GolangRdyJp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/bowz_standard/items/5a9c987f9242777fff30&#34;&gt;gomobileで日本語フォントを扱ってみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-言語で学ぶ-暗号技術入門&#34;&gt;Go 言語で学ぶ『暗号技術入門』&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/skatsuta&#34;&gt;Soshi Katsuta&lt;/a&gt; さんによるテキスト。
丁寧な内容でとても参考になる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://skatsuta.github.io/2016/01/02/hyuki-crypt-book-go-1/&#34;&gt;Go 言語で学ぶ『暗号技術入門』Part 1 -DES, Triple DES- | Step by Step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://skatsuta.github.io/2016/01/19/hyuki-crypt-book-go-2/&#34;&gt;Go 言語で学ぶ『暗号技術入門』Part 2 -AES- | Step by Step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://skatsuta.github.io/2016/03/06/hyuki-crypt-book-go-3/&#34;&gt;Go 言語で学ぶ『暗号技術入門』Part 3 -CBC Mode- | Step by Step&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;その他-四方山話&#34;&gt;その他 四方山話&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/22662f43b6a6e8728798&#34;&gt;動的言語だけやってた僕が、38日間Go言語を書いて学んだこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ksato9700/items/6228d4eb6d5b282f82f6&#34;&gt;Go言語で幸せになれる10のテクニック - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.wacul.co.jp/blog/2014/08/22/go/&#34;&gt;これからGoを始める人のためのTips集 | The Wacul Blog&lt;/a&gt; : ちゃんと開発環境を整備したい場合には参考になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mrpepper/items/95c428f2b3c25be6b3e2&#34;&gt;Golang ファーストインプレッション - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kayac.com/news/2014/07/golang&#34;&gt;2014年夏、カヤックは、Go言語を積極的に推進していきます。 ｜ニュース｜面白法人カヤック&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://akiradeveloper.hatenadiary.com/entry/2014/07/22/205515&#34;&gt;(go report) Goが本当はすごかったので, 謝罪する - テストステ論&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/TakaakiFuruse/items/0fec78e5ecbcbe4337e8&#34;&gt;Golang のインスコでハマった件 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/t-sato/items/a5d1a309733e765533ce&#34;&gt;Go Conference 2015 summer - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yamadagenki/items/5032cf853f6b136b533f&#34;&gt;最新versionのgolangをぶち込む方法について - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hostingadvice.com/how-to/install-golang-on-ubuntu/&#34;&gt;7 Easy Steps to Install Go (Golang) on Ubuntu - HostingAdvice.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/herokugo.html&#34;&gt;Heroku、Go言語の正式サポートを発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;最近ではGo言語の採用例が増えてきており、例えばDropboxは性能が重要な部分ではPythonに代わりGoで記述することを昨年11月に表明しており、オープンソースのPaaS基盤であるCloud Foundryも主要部分での開発でGo言語の採用を進めていると言われています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/google_app_enginego_1.html&#34;&gt;Google App Engineも「Go言語」の正式サポートを発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hiconyan/items/7656e9fb2d5bf5c794be&#34;&gt;Sensuでネットワーク監視やってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.ibm.com/open/i18n4go/&#34;&gt;i18n4go - developerWorks Open&lt;/a&gt; : IBM の &lt;a href=&#34;https://developer.ibm.com/open/&#34;&gt;developerWorks Open&lt;/a&gt; プロジェクトのひとつ。「&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1507/23/news058.html&#34;&gt;プログラムを国際化するための汎用ツール&lt;/a&gt;」らしい。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/why-go-is-a-poorly-designed-language/&#34;&gt;なぜGo言語は設計が悪いのか – Go愛好者の見地から | 未分類 | POSTD&lt;/a&gt; : 必見！ Go のイケてないところ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tenntenn/items/0e33a4959250d1a55045&#34;&gt;Go言語の初心者が見ると幸せになれる場所 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/20160126101358.htm&#34;&gt;Big Sky :: Names&lt;/a&gt; : Golang の開発者 Russ Cox 氏による記事の抄訳。「変数名の長さ」について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/circus/items/450254c59d194cbf22d7&#34;&gt;Go言語で作った実行ファイルを小さくしよう！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/jp/news/2016/03/go-patterns&#34;&gt;Goのプログラミングパターン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/an-introduction-to-llvm-in-go/&#34;&gt;Go言語で利用するLLVM入門 | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160405114638.htm&#34;&gt;Big Sky :: golang の Windows 版が buildmode=c-archive をサポートした。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/the-way-of-the-gopher/&#34;&gt;Gopherの道を歩む – Node.jsからGo言語への移行 | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/go-best-practices-2016/&#34;&gt;6年間におけるGoのベストプラクティス | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20160808013725.htm&#34;&gt;Big Sky :: 「みんなのGo言語」の執筆に参加させて頂きました。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/gos-march-to-low-latency-gc/&#34;&gt;Go言語の低レイテンシGC実現のための取り組み | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/why-go-is-not-good/&#34;&gt;Go言語がダメな理由 | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/235/1235262/&#34;&gt;ASCII.jp：Goならわかるシステムプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-1-5-に関する話題&#34;&gt;Go 1.5 に関する話題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/msaito3/items/3aef86e9864990b16b4c&#34;&gt;GVM で go1.5rc1 のインストール - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masahikoofjoyto/items/4ced298989e6ab346f15&#34;&gt;goを1.5にアップデートして1.4とベンチを取る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taji-taji/items/4c43e126e67d65a219e3&#34;&gt;Go 1.3 から 1.5 へのアップデートでエラー - Qiita&lt;/a&gt; : 古いバージョンからアップデートする際は，いったん 1.4 に上げてから 1.5 にアップデートするとよい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20150820102400.htm&#34;&gt;Big Sky :: golang 1.5 の internal パッケージの使い方。&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/qt-luigi/items/d0f52b3b0906b35e6027&#34;&gt;「golang 1.5 の internal パッケージの使い方。」を試してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-1-6-に関する話題&#34;&gt;Go 1.6 に関する話題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2015/12/22/000011&#34;&gt;Goで良い感じに日時をパースするライブラリdatemakiの話とGo 1.6 - YAMAGUCHI::weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/saturday06/items/84535c61a3328c02032c&#34;&gt;Go1.6でポインタをcgoの関数へ渡す際の注意点 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mattn/items/90c8558d5fff05a2ba0c&#34;&gt;Go1.6でポインタをcgoの関数へ渡す際に発生するcgoCheckPointerを回避する方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kanuma1984/items/245f7efafeaee5728523&#34;&gt;Goのバージョンを1.6rc2にアップデートしてみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hirocueki2/items/3ec4b409a3ed2cbea681&#34;&gt;Goのバージョンを1.4.3→1.6にアップグレードできなかった - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hoshi-k/items/f2eaff298f93f089e10d&#34;&gt;Go 1.6 templateパッケージ新機能 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/04/golang-1_6_1-released/&#34;&gt;Go 言語 1.6.1 および 1.5.4 のセキュリティ・アップデート — しっぽのさきっちょ | text.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-1-7-に関する話題&#34;&gt;Go 1.7 に関する話題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tutuming/items/16df6fc7bf82fb5d7eb0&#34;&gt;go1.7 の気になるところを試した - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/lufia/items/8a71a29fa6e1089735f2&#34;&gt;Sierraでgo1.7.3のコンパイル - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/143849cf34db4ffaad4b&#34;&gt;【作業メモ】さくらインターネットの標準CGIサーバでGoをビルド【古典的レンタル鯖】 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-1-8-に関する話題&#34;&gt;Go 1.8 に関する話題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://beta.golang.org/doc/go1.8&#34;&gt;Go 1.8 Release Notes - The Go Programming Language&lt;/a&gt; : 今のところはベータ版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/qt-luigi/items/47a7913145fc747da0c7&#34;&gt;Go 1.8のpluginパッケージを試してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;はじめての-go-言語-on-windows&#34;&gt;はじめての Go 言語 (on Windows)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/&#34;&gt;Qiita&lt;/a&gt; で書いてる拙文の目次。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/dca0df389df1470bdbfa&#34;&gt;はじめての Go 言語 (on Windows)&lt;/a&gt; : インストールと動作確認（“Hello World” まで）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/047a9bd6436e6391ddd4&#34;&gt;はじめての Go 言語 (on Windows) その2&lt;/a&gt; : 素数探索アルゴリズムで遊ぶ（slice, make, goroutine, channel）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/a52a47942fd3946bb583&#34;&gt;はじめての Go 言語 (on Windows) その3&lt;/a&gt; : get コマンドを使う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/556166b6631c0369754f&#34;&gt;はじめての Go 言語 (on Windows) その4&lt;/a&gt; : string と rune&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/e743d63ef5165d750eff&#34;&gt;はじめての Go 言語 (on Windows) その5&lt;/a&gt; : 暦で遊ぶ（math, time）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/404871d2bafd22bdbb90&#34;&gt;はじめての Go 言語 (on Windows) その6&lt;/a&gt; : パッケージ化について&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/64224f22ef17d916dc2d&#34;&gt;はじめての Go 言語 (on Windows) その7&lt;/a&gt; : テストを書く&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/5f9e96f226f46089388f&#34;&gt;はじめての Go 言語 (on Windows) その8&lt;/a&gt; : パッケージ化したのならドキュメントを書きましょう&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/ef15a48542e043b32c99&#34;&gt;はじめての Go 言語 (on Windows) その9&lt;/a&gt; : プロジェクト・ベースのビルド・ツールを使ってみる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/5d2878596360af8dd753&#34;&gt;はじめての Go 言語 (on Windows) その10&lt;/a&gt; : 最終回。コマンドライン・ツールを作ってみる。エラーハンドリングについてもちょっとだけ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ちなみに「はじめての&amp;hellip;」以降の Go 言語に関する拙文は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/69d1166225d88b1faf66&#34;&gt;tcnksm/gcli を使った golang によるコマンドライン・ツール開発について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/73ebc684b5807277b7e2&#34;&gt;そろそろ真面目に Golang 開発環境について考える — GOPATH 汚染問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/2e475b48226330aa5570&#34;&gt;Golang による文字エンコーディング変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/16ab7dabbd0749281227&#34;&gt;Golang の文字列連結はどちらが速い？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/baa3671c7e1b8a6594a9&#34;&gt;そろそろ真面目に Golang 開発環境について考える — Internal Packages と Vendoring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34; title=&#34;プログラミング言語 Go — text.Baldanders.info&#34;&gt;本家ブログ&lt;/a&gt;でも不定期連載しています（最近はこっちがメイン）。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Hugo に関するブックマーク - hugo</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/hugo/bookmark/" />
		<id>tag:text.Baldanders.info,2015-09-05:/hugo/bookmark/</id>
		<published>2015-09-05T00:00:00+09:00</published>
		<updated>2016-12-14T10:22:16+09:00</updated>
		<summary>当サイトを Hugo で構築するにあたって参考になったページを紹介する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="hugo" label="hugo" scheme="http://text.baldanders.info/hugo" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;当サイトを &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; で構築するにあたって参考になったページを紹介する。
日本語の情報が少ないのでホンマに感謝だよ。&lt;/p&gt;

&lt;h2 id=&#34;official&#34;&gt;公式サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo :: A fast and modern static website engine&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;spf13/hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;spf13/hugoThemes&lt;/a&gt; : &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; のテーマ集。スクリーンショットもあるよ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mostfav&#34;&gt;日本語によるもっとも丁寧な解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/lab/hugo/&#34;&gt;Hugoサイト構築 | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0714-hugo/&#34;&gt;静的サイトジェネレータHugoの導入 | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0715-hugo/&#34;&gt;Hugoのフォルダ構成 | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0731-hugo/&#34;&gt;Hugoでサイト構築(1) レイアウトことはじめ | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0807-hugo-config/&#34;&gt;Hugoでサイト構築(2) サイト全体の設定&amp;rsquo;config.toml&amp;rsquo; | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0808-hugo-partial/&#34;&gt;Hugoでサイト構築(3) partialで部品をつくる | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0817-hugo-markdown/&#34;&gt;Hugoでサイト構築(4) markdownで記事を書く | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0818-hugo-static/&#34;&gt;Hugoでサイト構築(5) そのままコピーする&amp;rsquo;static&amp;rsquo;フォルダ | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0824-hugo-public/&#34;&gt;Hugoでサイト構築(6) publicへの記事出力について | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0831-hugo-section/&#34;&gt;Hugoでサイト構築(7) Sectionで記事を分類する | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0914-hugo-section/&#34;&gt;Hugoでwebサイト構築(8) Sectionのリスト | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0915-hugo-pagination/&#34;&gt;Hugoでwebサイト構築(9) リストのページネーション(Pagination) | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/0917-hugo-datafile/&#34;&gt;Hugoでwebサイト構築(10) データファイル(パラメータを作る) | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/1030-hugo-tag/&#34;&gt;Hugoでwebサイト構築(11) タグ | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/note/2015/1112-hugo-tag-enum/&#34;&gt;Hugoでwebサイト構築(12) タグの列挙 | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;themes&#34;&gt;テーマなど&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rakuishi.com/archives/hugo-zen/&#34;&gt;Hugo Zen: これから Hugo を始める人向けのミニマムなテーマを作りました - rakuishi.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tanksuzuki.com/post/hugo-theme-angels-ladder/&#34;&gt;シンプルなHugoのテーマ「Angel&amp;rsquo;s Ladder」を作りました | TANKSUZUKI.COM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ci&#34;&gt;継続的インテグレーション&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yoheimuta/items/8a619cac356bed89a4c9&#34;&gt;Hugo + Github Pages + Wercker CI = ¥0（無料）でコマンド 1 発（自動化）でサイト・ブログを公開・運営・分析・収益化 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hori-ryota.com/blog/create-blog-with-hugo-and-circleci/&#34;&gt;HugoとCircleCIでGitHub PagesにBlogを公開してみたら超簡単だった · Hori Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rel&#34;&gt;関連ドキュメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/text/template/&#34;&gt;template - The Go Programming Language&lt;/a&gt; : &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; で使われているテンプレートパッケージ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/b4b4r07/items/77c327742fc2256d6cbe&#34;&gt;設定ファイル記述言語 TOML - Qiita&lt;/a&gt; : &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; の設定は TOML で記述するのがヨサゲ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hashrock/items/939684b9207dbab1d59e&#34;&gt;floatより辛くない「flexbox」でざっくりレイアウト - Qiita&lt;/a&gt; : flex は table より float より直感的で分かりやすい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fortawesome.github.io/Font-Awesome/&#34;&gt;Font Awesome, the iconic font and CSS toolkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://syncer.jp/how-to-use-highlightjs&#34;&gt;ソースコードをハイライトする軽量ライブラリ、Highlight.jsの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cc-icons.github.io/&#34;&gt;Creative Commons Icon Font&lt;/a&gt; : CC License 用のアイコン・フォント&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;others&#34;&gt;その他&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://t32k.me/mol/log/hugo/&#34;&gt;Jekyllが許されるのは小学生までだよね - MOL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/syui/items/869538099551f24acbbf&#34;&gt;CSS - HUGOを使ってサイトを立ち上げる方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://machortz.github.io/posts/usinghugo/&#34;&gt;Hugoを使ってみたときのメモ // machortz blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/12/25/hugo/&#34;&gt;OctopressからHugoへ移行した | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jigyakkuma.org/2015/02/11/hugo/&#34;&gt;blogをoctopressからHugoに乗り換えたメモ / 俺よりイケてないエンジニアはいない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keens.github.io/blog/2014/12/30/migration-from-octopress-to-hugo/&#34;&gt;OctopressからHugoに移行した | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kmry@github/items/01f68550880dcc6d01fe&#34;&gt;静的サイトジェネレーターHugoでgithubページ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yet.unresolved.xyz/blog/2015/01/04/migrate-blog-to-hugo-from-octopress/&#34;&gt;ブログをOctopressからHugoに移行した | Unresolved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yet.unresolved.xyz/blog/2015/01/07/how-to-use-multibyte-title-in-hugo/&#34;&gt;Hugoでマルチバイトのタイトルをスマートに使う方法 | Unresolved&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tamano/items/d3be25027c9b80bbfb7a&#34;&gt;metalsmith - 静的サイトジェネレータを比較してみた - Qiita&lt;/a&gt; : Hugo を含めた比較記事。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kakkyz81/items/75bcaace6bcaa38373ba&#34;&gt;Hugoではテーマを指定しないとindex.htmlのサイズがゼロで作成される - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/DQNEO/items/7c05252fa434c861d938&#34;&gt;MovableTypeからHugoにブログ記事を移管するために下調べしたのでまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ureta.net/2015/05/hugo-on-windows/&#34;&gt;WindowsでHugoを使う - ureta.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takunagai.github.io/post/hugo/template/&#34;&gt;Hugo のテンプレート 基本 | My Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/_shun_sato_/items/87888fa8425e55b1c758&#34;&gt;Hugoでタグやカテゴリのリンク切れが起こる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
</feed>
