<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Time - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/time/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/time/index.xml" />
	<id>tag:text.Baldanders.info,2017-03-04:/tags</id>
	<updated>2017-03-04T09:40:51+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.28</generator>

	
	<entry>
		<title>「プレミアムフライデー」を求めるパッケージを作ってみた - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/premium-friday/" />
		<id>tag:text.Baldanders.info,2017-03-04:/golang/premium-friday/</id>
		<published>2017-03-04T09:40:51+09:00</published>
		<updated>2017-03-07T09:38:50+09:00</updated>
		<summary>もちろん息抜きである。潤いは大事。でも実用性はないと思われ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;そういえば先月の「プレミアムフライデー」，皆様はいかがお過ごしでしたか。
私は3時間も残業してしまいましたよ（笑）&lt;/p&gt;

&lt;p&gt;ちうわけで，以下を真似して「プレミアムフライデー」を求めるパッケージを考えてみる。
もちろん息抜きである。
潤いは大事。
でも実用性はないと思われ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/neko_the_shadow/items/4ebf94a8a6d9282e7207&#34;&gt;プレミアムフライデーを求めるメソッドを作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/deaf_tadashi/items/963a62072338f09f12a5&#34;&gt;プレミアムフライデーを求めるメソッドを作った（Java8版） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まずはパッケージ分割しないでベタに書いてみる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:rf1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:rf1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;
)

//GetPremiumFriday returns day of premium friday
func GetPremiumFriday(y int, m time.Month) (int, error) {
	//引数のチェック
    if y &amp;lt; 2017 || m &amp;lt; time.January || m &amp;gt; time.December {
		return 0, os.ErrInvalid
	}
	if y == 2017 &amp;amp;&amp;amp; m &amp;lt; time.February { //2017年1月は実施前なのでエラー
		return 0, os.ErrInvalid
	}

	//指定月末（翌月0日）で初期化する
    tm := time.Date(y, m+1, 0, 0, 0, 0, 0, time.UTC) //時差は影響しないので，とりあえず UTC で

    w := tm.Weekday() - time.Friday
	if w &amp;lt; 0 {
		w += 7
	}
	return tm.Day() - (int)(w), nil
}

func main() {
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 2 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月を指定してください&amp;quot;)
		return
	}
	args := make([]int, 2)
	for i := 0; i &amp;lt; 2; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		}
		args[i] = num
	}
	d, err := GetPremiumFriday(args[0], time.Month(args[1]))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	fmt.Println(d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定月末を求めるのに「翌月0日」で初期化するのがポイント（つか，ここしかポイントになるものがない&lt;code&gt;w&lt;/code&gt;）。
実行結果は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run pf.go 2017 2
24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;期待通りの値が得られた。&lt;/p&gt;

&lt;p&gt;関数1個だけなんでパッケージにするのもどうかと思うけど折角なのでパッケージ化してみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/pf&#34;&gt;spiegel-im-spiegel/pf: Premium Friday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容は &lt;code&gt;GetPremiumFriday()&lt;/code&gt; 関数を切り出しただけ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package pf

import (
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

//GetPremiumFriday returns day of premium friday
func GetPremiumFriday(y int, m time.Month) (int, error) {
	//引数のチェック
    if y &amp;lt; 2017 || m &amp;lt; time.January || m &amp;gt; time.December {
		return 0, os.ErrInvalid
	}
	if y == 2017 &amp;amp;&amp;amp; m &amp;lt; time.February { //2017年1月は実施前なのでエラー
		return 0, os.ErrInvalid
	}

	//指定月末（翌月0日）で初期化する
    tm := time.Date(y, m+1, 0, 0, 0, 0, 0, time.UTC) //時差は影響しないので，とりあえず UTC で

    w := tm.Weekday() - time.Friday
	if w &amp;lt; 0 {
		w += 7
	}
	return tm.Day() - (int)(w), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;したがって &lt;code&gt;main()&lt;/code&gt; 関数はこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/pf&amp;quot;
)

func main() {
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 2 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月を指定してください&amp;quot;)
		return
	}
	args := make([]int, 2)
	for i := 0; i &amp;lt; 2; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		}
		args[i] = num
	}
	d, err := pf.GetPremiumFriday(args[0], time.Month(args[1]))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	fmt.Println(d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まぁこんなもんかな。
遊んだ遊んだ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/qube81/items/1e93c837c0a7e3d99a10&#34;&gt;Golangでプレミアムフライデーかどうか判定する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:rf1&#34;&gt;元記事のコードがループさせてたんでこっちもついループさせちゃったけど，考えてみれば（いや考えるまでもなく）ループを回す必要はなかった。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:rf1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 1.7.5 がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/01/go-1_7_5-released/" />
		<id>tag:text.Baldanders.info,2017-01-27:/remark/2017/01/go-1_7_5-released/</id>
		<published>2017-01-27T20:16:27+09:00</published>
		<updated>2017-01-27T20:16:27+09:00</updated>
		<summary>crypto/x509 および time パッケージを使っているプロジェクトは要対応である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;Go 1.7.5 がリリースされている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.7.minor&#34;&gt;Release History&lt;/a&gt; によると&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;go1.7.5 (released 2017/01/26) includes fixes to the compiler, runtime, and the &lt;code&gt;crypto/x509&lt;/code&gt; and &lt;code&gt;time&lt;/code&gt; packages. See the &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.7.5&#34;&gt;Go 1.7.5 milestone&lt;/a&gt; on our issue tracker for details. &lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.7.minor&#34;&gt;Release History&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ということなので，該当するパッケージを使っているプロジェクトは要対応である。&lt;/p&gt;

&lt;p&gt;なお，併せて Go 1.8 RC3 もリリースされている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://beta.golang.org/doc/go1.8&#34;&gt;Go 1.8 Release Notes - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語の日付処理 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/time-functions/" />
		<id>tag:text.Baldanders.info,2016-01-22:/golang/time-functions/</id>
		<published>2016-01-22T20:56:21+09:00</published>
		<updated>2016-05-21T10:27:41+09:00</updated>
		<summary>今回は日付処理の話。特にフォーマットの定義の仕方はよく忘れるので覚え書きとして記しておく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は日付処理の話。
特にフォーマットの定義の仕方はよく忘れるので覚え書きとして記しておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で日付処理を行うには &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージを使う。
よく使う型としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Time&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Duration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Location&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が挙げられるだろう。
&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Time&lt;/code&gt; は時刻を， &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Duration&lt;/code&gt; は2時点間の時間を，そして &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Location&lt;/code&gt; は地球上の時差を表す型である。
たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tz, err := time.LoadLocation(&amp;quot;Asia/Tokyo&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	tm := time.Date(2006, 1, 2, 15, 4, 5, 0, tz)
	fmt.Println(tm)
	now := time.Now()
	fmt.Println(now)
	d := now.Sub(tm)
	fmt.Println(d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書くと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2006-01-02 15:04:05 +0900 JST
2009-11-10 23:00:00 +0000 UTC
33808h55m55s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てな感じになる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:m&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:m&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;時刻を任意のフォーマットで表示する場合は少し特殊な方法を使う。
たとえば &lt;a href=&#34;https://tools.ietf.org/html/rfc3339&#34;&gt;RFC 3339&lt;/a&gt; フォーマットに出力するなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tz, err := time.LoadLocation(&amp;quot;Asia/Tokyo&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	tm := time.Date(2015, 12, 31, 23, 59, 59, 0, tz)
	fmt.Println(tm.Format(&amp;quot;2006-01-02T15:04:05Z07:00&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-12-31T23:59:59+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出力される。
テンプレート文字列が &lt;code&gt;%Y&lt;/code&gt; とか &lt;code&gt;YYYY&lt;/code&gt; のような形式ではないのだ。
これは適当な文字列ではなく一応法則があって&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;月は &lt;code&gt;1&lt;/code&gt; （または &lt;code&gt;01&lt;/code&gt;, &lt;code&gt;Jan&lt;/code&gt;, &lt;code&gt;January&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;日は &lt;code&gt;2&lt;/code&gt; （または &lt;code&gt;02&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;時は &lt;code&gt;3&lt;/code&gt; （または &lt;code&gt;03&lt;/code&gt;, &lt;code&gt;15&lt;/code&gt;） ※ 午後3時を指す&lt;/li&gt;
&lt;li&gt;分は &lt;code&gt;4&lt;/code&gt; （または &lt;code&gt;04&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;秒は &lt;code&gt;5&lt;/code&gt; （または &lt;code&gt;05&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;年は &lt;code&gt;06&lt;/code&gt; （または &lt;code&gt;2006&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;時差は &lt;code&gt;-07&lt;/code&gt; （または &lt;code&gt;-0700&lt;/code&gt;, &lt;code&gt;-07:00&lt;/code&gt;, &lt;code&gt;Z07:00&lt;/code&gt;, &lt;code&gt;MST&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tz&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:tz&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; など）&lt;/li&gt;
&lt;li&gt;曜日は &lt;code&gt;Mon&lt;/code&gt; （または &lt;code&gt;Monday&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;AM/PM は &lt;code&gt;PM&lt;/code&gt; （または &lt;code&gt;pm&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という感じに 1 からの連番になっている（曜日等は例外だけど）ので，まぁ覚えられるかな？ でもよく忘れるんだよなぁ。
&lt;code&gt;%Y&lt;/code&gt; みたいなのとどちらがいいかは微妙な気がするが，慣れの問題かもしれない。&lt;/p&gt;

&lt;p&gt;典型的なフォーマットは定数化されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
	ANSIC       = &amp;quot;Mon Jan _2 15:04:05 2006&amp;quot;
	UnixDate    = &amp;quot;Mon Jan _2 15:04:05 MST 2006&amp;quot;
	RubyDate    = &amp;quot;Mon Jan 02 15:04:05 -0700 2006&amp;quot;
	RFC822      = &amp;quot;02 Jan 06 15:04 MST&amp;quot;
	RFC822Z     = &amp;quot;02 Jan 06 15:04 -0700&amp;quot; // RFC822 with numeric zone
	RFC850      = &amp;quot;Monday, 02-Jan-06 15:04:05 MST&amp;quot;
	RFC1123     = &amp;quot;Mon, 02 Jan 2006 15:04:05 MST&amp;quot;
	RFC1123Z    = &amp;quot;Mon, 02 Jan 2006 15:04:05 -0700&amp;quot; // RFC1123 with numeric zone
	RFC3339     = &amp;quot;2006-01-02T15:04:05Z07:00&amp;quot;
	RFC3339Nano = &amp;quot;2006-01-02T15:04:05.999999999Z07:00&amp;quot;
	Kitchen     = &amp;quot;3:04PM&amp;quot;
	// Handy time stamps.
	Stamp      = &amp;quot;Jan _2 15:04:05&amp;quot;
	StampMilli = &amp;quot;Jan _2 15:04:05.000&amp;quot;
	StampMicro = &amp;quot;Jan _2 15:04:05.000000&amp;quot;
	StampNano  = &amp;quot;Jan _2 15:04:05.000000000&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので，先ほどのコードも出力部分を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Println(tm.Format(time.RFC3339))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば同じ結果が得られる。
時刻フォーマットは，いったんシステムの中で決めてしまえば同じものを使い回すことになると思うので，定数化してしまえば「フォーマットどうだっけ？」と煩わされることも少ないだろう。&lt;/p&gt;

&lt;p&gt;ところでバージョン 1.5 系の &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Parse()&lt;/code&gt; 関数は日付の解釈が寛容で，各月の末日を31日まで許容している。
たとえば閏年でない2月29日でも&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tm, err := time.Parse(time.RFC3339, &amp;quot;2015-02-29T23:59:59+09:00&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	fmt.Println(tm)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2015-03-01 23:59:59 +0900 +0900
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり，エラーとならずいい感じ（？）に加減してくれるのだが，バージョン 1.6 からは少し解釈が厳密になりエラーを返すようだ。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The &lt;a href=&#34;https://tip.golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; package&#39;s &lt;a href=&#34;https://tip.golang.org/pkg/time/#Parse&#34;&gt;&lt;code&gt;Parse&lt;/code&gt;&lt;/a&gt; function has always rejected any day of month larger than 31, such as January 32. In Go 1.6, Parse now also rejects February 29 in non-leap years, February 30, February 31, April 31, June 31, September 31, and November 31.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://tip.golang.org/doc/go1.6&#34;&gt;Go 1.6 Release Notes - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;実際に 1.6 で上のコードを実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parsing time &amp;quot;2015-02-29T23:59:59+09:00&amp;quot;: day out of range
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とエラーが返ってくる。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Date()&lt;/code&gt; 関数は更に寛容である。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tz, err := time.LoadLocation(&amp;quot;Asia/Tokyo&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	tm := time.Date(2015, 13, 32, 25, 60, 00, 0, tz)
	fmt.Println(tm)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2016-02-02 02:00:00 +0900 JST
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2015/12/22/000011&#34;&gt;Goで良い感じに日時をパースするライブラリdatemakiの話とGo 1.6 - YAMAGUCHI::weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ushio_s/items/3e270933641710bbd88e&#34;&gt;golangのtime.Timeの当日00:00:00を取得する方法とベンチマーク - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masa23/items/e781124a7e0305bc40c4&#34;&gt;Golang 日付のフォーマットでハマった話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:m&#34;&gt;厳密にいうと月の値は &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Month&lt;/code&gt; 型である。サンプル・コードのようにリテラルな数値なら気にする必要はないが，変数を &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Date()&lt;/code&gt; 関数にセットする場合は注意が必要である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:m&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:tz&#34;&gt;時差の MST は米国の山岳部時間（Mountain Standad Time）を指すらしい。ソルトレイクシティとかデンバーとかかな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tz&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「ユリウス日」で遊ぶ - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/julian-day-number/" />
		<id>tag:text.Baldanders.info,2015-09-19:/golang/julian-day-number/</id>
		<published>2015-09-19T21:23:33+09:00</published>
		<updated>2015-09-21T11:43:51+09:00</updated>
		<summary>今回は暦で遊びます。とりあえず，簡単なところで「ユリウス日」をいってみるか。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/e743d63ef5165d750eff&#34;&gt;はじめての Go 言語 (on Windows) その5 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;今回は暦で遊びます。
とりあえず，簡単なところで「ユリウス日（Julian Date または Julian Day Number&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;）」をいってみるか。&lt;/p&gt;

&lt;h2 id=&#34;ユリウス日の定義&#34;&gt;ユリウス日の定義&lt;/h2&gt;

&lt;p&gt;ユリウス日とは紀元前4713年1月1日正午&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; を起点とした通日のことです。
たとえば2015年1月1日零時はユリウス日では2,457,023.5日になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eco.mtk.nao.ac.jp/cgi-bin/koyomi/cande/date2jd.cgi&#34;&gt;ユリウス日&lt;/a&gt; （&lt;a href=&#34;http://eco.mtk.nao.ac.jp/koyomi/&#34;&gt;国立天文台暦計算室&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://homepage1.nifty.com/manome/astrology/julian.html&#34;&gt;ユリウス日(Julian Day)&lt;/a&gt; : 暦にまつわるエピソードを含めて参考になります&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tondering.dk/claus/cal/julperiod.php&#34;&gt;The Julian Period&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この際，いくつか気を付ける点があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;紀元前（BC）1年の翌年は紀元後（AD）1年。つまり AD1年を $1$ とするなら BC1年は $0$，BC2年は $-1$ となります。紀元前4713年は $-4712$ です。&lt;/li&gt;
&lt;li&gt;ユリウス暦は紀元前45年から開始されたと言われています。つまりそれ以前は異なる暦だったわけです。しかしユリウス日では紀元前45年より前の日付もユリウス暦と見なして取り扱います。&lt;/li&gt;
&lt;li&gt;欧州では西暦（紀元後）1582年に当時のローマ法王グレゴリオ13世によって（現在言われるところの）グレゴリオ暦が布告されましたが，この際に1582年10月4日の翌日を10月15日としたためギャップが生じました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;年月日から-修正-ユリウス日を求める&#34;&gt;年月日から（修正）ユリウス日を求める&lt;/h2&gt;

&lt;p&gt;というわけで大昔のユリウス日を求めるのは西暦を使う場合でもちょっと面倒くさいのですが，範囲をグレゴリオ暦に限るなら便利な式があります。&lt;/p&gt;

&lt;p&gt;グレゴリオ暦のある日を「$Y$ 年 $M$ 月 $D$ 日」で表せるとすると&lt;/p&gt;

&lt;blockquote&gt;
\begin{aligned}
    y   &amp; = Y + \left\lfloor \frac{M - 3}{12} \right\rfloor \\
    m   &amp; = \left( 12 + \left( M - 3 \right) \right) \bmod 12 \\
    d   &amp; = D - 1 \\
    MJD &amp; = \left\lfloor 365.25y \right\rfloor + \left\lfloor \frac{y}{400} \right\rfloor - \left\lfloor \frac{y}{100} \right\rfloor + \left\lfloor 30.60m + 0.5 \right\rfloor + d - 678881 \\
    JD  &amp; = MJD + 2400000.5
\end{aligned}
&lt;/blockquote&gt;

&lt;p&gt;でユリウス日 $JD $ を求めることができます&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ちなみに $MJD$ は修正ユリウス日（Modified Julian Date）と呼ばれるものです。
定義は上の式の通りで，ユリウス日から240万日分をカットして日付の起点を正午から（私たちになじみのある）正子&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; にずらしています。&lt;/p&gt;

&lt;p&gt;$ \left\lfloor x \right\rfloor $ は床関数と呼ばれるもので「実数 $x$ に対して $x$ 以下の最大の整数」と定義されます。
例えば&lt;/p&gt;

&lt;blockquote&gt;
\begin{aligned}
    \left\lfloor 1.0 \right\rfloor &amp; = 1 \\
    \left\lfloor 0.7 \right\rfloor &amp; = 0 \\
    \left\lfloor -0.5 \right\rfloor &amp; = -1 \\
    \left\lfloor -2.0 \right\rfloor &amp; = -2 \\
\end{aligned}
&lt;/blockquote&gt;

&lt;p&gt;となります。
単に小数点を取るだけではないということです。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の &lt;a href=&#34;http://golang.org/pkg/math/&#34;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt; パッケージには，そのものずばりの &lt;code&gt;math.Floor()&lt;/code&gt; 関数があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
)

func main() {
	fmt.Printf(&amp;quot;[1.0] = %v\n&amp;quot;, math.Floor(1.0))
	fmt.Printf(&amp;quot;[0.7] = %v\n&amp;quot;, math.Floor(0.7))
	fmt.Printf(&amp;quot;[-0.5] = %v\n&amp;quot;, math.Floor(-0.5))
	fmt.Printf(&amp;quot;[-2.0] = %v\n&amp;quot;, math.Floor(-2.0))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run floor.go
[1.0] = 1
[0.7] = 0
[-0.5] = -1
[-2.0] = -2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では換算式を &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で実装してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
)

func main() {
	year := 2015
	month := 1
	day := 1
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, year, month, day)

	mm := float64(month - 3)
	y := float64(year) + math.Floor(mm/12.0)
	m := math.Mod(12.0+mm, 12.0)
	d := float64(day - 1)
	fmt.Printf(&amp;quot;y = %f\n&amp;quot;, y)
	fmt.Printf(&amp;quot;m = %f\n&amp;quot;, m)
	fmt.Printf(&amp;quot;d = %f\n\n&amp;quot;, d)

	mjd := math.Floor(365.25*y) + math.Floor(y/400.0) - math.Floor(y/100.0) + math.Floor(30.60*m+0.5) + d - 678881.0
	fmt.Printf(&amp;quot;MJD = %f日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, mjd+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-1.go
2015年1月1日

y = 2014.000000
m = 10.000000
d = 0.000000

MJD = 57023.000000日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と，これではあまりにひどいので，少し変形。&lt;/p&gt;

&lt;p&gt;床関数は正の値に対しては小数点以下の切り捨てと同じ。
Go 言語では int 型の除算には int 型の結果が返り小数点以下が切り捨てられることを利用して&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	year := 2015
	month := 1
	day := 1
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, year, month, day)

	y := 1
	m := 1
	if month &amp;lt; 3 {
		y = year - 1
		m = month + 9
	} else {
		y = year
		m = month - 3
	}
	d := day - 1
	fmt.Printf(&amp;quot;y = %d\n&amp;quot;, y)
	fmt.Printf(&amp;quot;m = %d\n&amp;quot;, m)
	fmt.Printf(&amp;quot;d = %d\n\n&amp;quot;, d)

	mjd := (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, float64(mjd)+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-2.go
2015年1月1日

y = 2014
m = 10
d = 0

MJD = 57023日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これなら &lt;a href=&#34;http://golang.org/pkg/math/&#34;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt; パッケージ自体不要になります。グレゴリオ暦は1582年より前では適用できない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; のでこれで必要十分です。
以降で使いやすくするために，ここから更に変形して年月日を引数から取得するようにします（引数の Validation は省いています。ゴメンペコン）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int64, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.ParseInt(argsStr[i], 10, 64)
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		} else {
			args[i] = num
		}
	}
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, args[0], args[1], args[2])

	y := args[0]
	m := args[1]
	if m &amp;lt; 3 {
		y -= 1
		m += 9
	} else {
		m -= 3
	}
	d := args[2] - 1
	fmt.Printf(&amp;quot;y = %d\n&amp;quot;, y)
	fmt.Printf(&amp;quot;m = %d\n&amp;quot;, m)
	fmt.Printf(&amp;quot;d = %d\n\n&amp;quot;, d)

	mjd := (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, float64(mjd)+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run julian-day-2b.go 2015 1 1
2015年1月1日

y = 2014
m = 10
d = 0

MJD = 57023日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;unix-time-からユリウス日を求める&#34;&gt;UNIX Time からユリウス日を求める&lt;/h2&gt;

&lt;p&gt;さて，これでグレゴリオ暦の任意の日付からユリウス日を求めることができるようになりました。
これを踏まえて，もう少し簡単にユリウス日を得る方法を考えてみます。&lt;/p&gt;

&lt;p&gt;Go 言語で時刻情報を取得・操作するために &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージが用意されています。
&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージをつらつら眺めてみると &lt;code&gt;Unix()&lt;/code&gt; 関数を使って UNIX Time を得ることができるようです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unix returns t as a Unix time, the number of seconds elapsed since January 1, 1970 UTC.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということは，1970年1月1日零時 UTC のユリウス日が分かれば，そこを起点に UNIX Time を加算すればいいことになります。
簡単！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-2b.go 1970 1 1
1970年1月1日

y = 1969
m = 10
d = 0

MJD = 40587日
JD = 2440587.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので，こうなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	const onday = int64(86400)   //seconds
	const baseDay = int64(40587) //Modified Julian Date at January 1, 1970

	year := 2015
	month := 1
	day := 1
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, year, month, day)

	tm := time.Date(year, time.Month(month), day, 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	ut := tm.Unix()
	fmt.Printf(&amp;quot;UNIX Time = %v seconds = %v days and %v seconds\n\n&amp;quot;, ut, ut/onday, ut%onday)

	mjd := ut/onday + baseDay
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, float64(mjd)+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-3.go
2015年1月1日

2015-01-01 00:00:00 +0000 UTC
UNIX Time = 1420070400 seconds = 16436 days and 0 seconds

MJD = 57023日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;えーっと。
コードを見ればお分かりと思いますが，これだと1970年1月1日より前の日付では正しく動きません。
任意の日付&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; で正しく動かすには床関数を使う必要があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34;&gt;次回&lt;/a&gt;は，これをパッケージ化してみましょう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;ちなみに1日未満の端数を含む場合を「ユリウス日（Julian Date）」，端数を含まない場合を「ユリウス通日（Julian Day Number）」と呼び分けているようです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;もともと太陽暦は「子午線から太陽までの時角」が時刻のベースになってるため，ユリウス日を考えた人は正午を起点にすべきと考えたのでしょう。日常生活で昼に日付が変わったら色々面倒そうですが。あぁでも， B な企業に勤めている人には日付の起点とか関係ないかな（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;この式は「Fliegel の公式」などと呼ばれることがありますが，厳密には Fliegel の公式を電卓向けに分かりやすく展開したもので，初等天文学の教科書などでよく登場する式です。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;月の値から2を引くのは暦計算の基本的なテクニックだったります（今回の式では月を0基点にするために3を引いてますが）。現在の1月（Ianuarius または January）を年初としたのはユリウス暦以降からで，それまでは現在の3月（Martius または March）が年初でした。だから2月だけちょっと特殊なんですねぇ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;余談ですが365.25日を「ユリウス年」と呼びます。天文学では1年の長さが年によって変わるのは困るので，一様な長さの「年」を考えたわけです。つまりこの式はユリウス年にうるう年の補正をかけてるわけですね。ちなみに「ユリウス世紀」は36525日です。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;耳慣れないかもしれないですが，夜中の12時のことです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;もちろんこれはキリスト教圏の国や地域での話です。例えば，日本でグレゴリオ暦が適用されたのは1873年（明治6年）なので，1873年以前は別の暦になり換算方法も変わります。もっと言うと，日本の現行暦は厳密にはグレゴリオ暦ではなくグレゴリオ暦互換の独自の暦です（参考： &lt;a href=&#34;http://text.baldanders.info/remark/2015/japanese-koyomi/&#34;&gt;「暦」日本史&lt;/a&gt;）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8&#34;&gt;とはいえ UNIX Time の取りうる値の範囲内での話ですが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
