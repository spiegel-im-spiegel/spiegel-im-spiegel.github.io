<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of relation - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/relation/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/relation/index.xml" />
	<id>tag:text.Baldanders.info,2019-07-14:/tags</id>
	<updated>2019-07-14T16:28:21+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>真面目に PlantUML (4) : 実体関連図</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/07/plantuml-4-entity-relationship-diagrams/" />
		<id>tag:text.Baldanders.info,2019-07-14:/remark/2019/07/plantuml-4-entity-relationship-diagrams/</id>
		<published>2019-07-14T07:28:21+00:00</published>
		<updated>2019-07-14T12:26:36+00:00</updated>
		<summary>実は実体関連図は UML のクラス図を使って表すことができる。また IE 記法にも一部対応している。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">

&lt;p&gt;今回は実体関連図（entity-relationship diagram）について。&lt;/p&gt;

&lt;p&gt;実体関連モデル（entity-relationship model）は関係データベース（relational database）を抽象的に表現する手法のひとつで，実体関連モデルを図で表したものが実体関連図である。&lt;/p&gt;

&lt;p&gt;実体関連モデルのうち特に物理データモデルを表した実体関連図は関係データベースの実装とよくマッチしているため，関係データベースのスキーマ設計でよく使われ，逆に関係データベースのスキーマを実体関連図に逆コンパイルするリバースエンジニアリング・ツールもある。&lt;/p&gt;

&lt;p&gt;では実体関連図の記法について紹介してみよう。&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;PlantUML のインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/&#34;&gt;シーケンス図&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34;&gt;クラス図&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/07/plantuml-4-entity-relationship-diagrams/&#34;&gt;実体関連図&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;UML の&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34; title=&#34;真面目に PlantUML (3) : クラス図&#34;&gt;クラス図&lt;/a&gt;を使った記法&lt;/h2&gt;

&lt;p&gt;実体関連モデルは以下の3つの要素で表すことができる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;実体（entity）&lt;/li&gt;
&lt;li&gt;関連（relationship）&lt;/li&gt;
&lt;li&gt;属性（attribute）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「実体」同士の関係は「関連」で表すことができる。
また「実体」および「関連」はそれぞれ「属性」を持つことができる。&lt;/p&gt;

&lt;p&gt;これを見てピンとくる方もいるだろうが，実は実体関連図は UML の&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34; title=&#34;真面目に PlantUML (3) : クラス図&#34;&gt;クラス図&lt;/a&gt;を使って表すことができる。
「実体」を表すのがクラスであり，クラス同士を繋いだ関係線が「関連」に相当する。
たとえばこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;@startuml

class &amp;#34;Entity A&amp;#34; as A {
  {field} id : int &amp;lt;&amp;lt;PK&amp;gt;&amp;gt;
  {field} name : string
  {field} location : string
}
class &amp;#34;Entity B&amp;#34; as B {
  {field} subid : int &amp;lt;&amp;lt;PK&amp;gt;&amp;gt;
  {field} id : int &amp;lt;&amp;lt;PK,FK&amp;gt;&amp;gt;
  {field} subname : string
}

A &amp;#34;1&amp;#34; &amp;lt;.left. &amp;#34;0..n&amp;#34; B : more info &amp;gt;

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./entity-relationship-1.punl&#34;&gt;&lt;img src=&#34;./entity-relationship-1.png&#34; srcset=&#34;./entity-relationship-1.png 973w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;これで &lt;code&gt;Entity B&lt;/code&gt; が &lt;code&gt;Entity A&lt;/code&gt; の依存エンティティであることが分かる（これに対して外部キーを含まない &lt;code&gt;Entity A&lt;/code&gt; を独立エンティティと呼ぶ）。
またステレオタイプを使って &lt;code&gt;PK&lt;/code&gt; や &lt;code&gt;FK&lt;/code&gt; を表現している。
更に多重度をつかって関連の「濃度（cardinality）」も表現できる。
更に更に &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; におけるクラスの属性はかなりアドホックな記述ができるため初期値や &lt;code&gt;NOT NULL&lt;/code&gt; 制約のような付属情報も追記できるだろう。&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;IE (Information Engineering) 記法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は IE 記法にも一部対応している。
たとえばこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;@startuml

entity &amp;#34;Entity A&amp;#34; as A {
  id : int
  --
  name : string
  location : string
}
entity &amp;#34;Entity B&amp;#34; as B {
  subid : int
  id : int &amp;lt;&amp;lt;FK&amp;gt;&amp;gt;
  --
  subname : string
}

A ||.right.o{ B : more info &amp;gt;

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./entity-relationship-2.punl&#34;&gt;&lt;img src=&#34;./entity-relationship-2.png&#34; srcset=&#34;./entity-relationship-2.png 973w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;実体の属性は &lt;code&gt;--&lt;/code&gt; や &lt;code&gt;==&lt;/code&gt; や &lt;code&gt;..&lt;/code&gt; を使って任意に仕切ることができるが，通常は2つに分けて上半分を主キー属性，下半分を非キー属性とする。&lt;/p&gt;

&lt;p&gt;関連を示す線は “Crow&#39;s Foot” と呼ばれる記法で &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Entity01 }|..|| Entity02
Entity03 }o..o| Entity04
Entity05 ||--o{ Entity06
Entity07 |o--|| Entity08&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./crows-foot.punl&#34;&gt;&lt;img src=&#34;./crows-foot.png&#34; srcset=&#34;./crows-foot.png 1140w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;という感じに記述して濃度を表現する。
これは多重度表現の&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Entity01 &amp;#34;1..n&amp;#34; .. &amp;#34;1&amp;#34; Entity02
Entity03 &amp;#34;0..n&amp;#34; .. &amp;#34;0,1&amp;#34; Entity04
Entity05 &amp;#34;1&amp;#34; -- &amp;#34;0..n&amp;#34; Entity06
Entity07 &amp;#34;0,1&amp;#34; -- &amp;#34;1&amp;#34; Entity08&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./multiplicity.punl&#34;&gt;&lt;img src=&#34;./multiplicity.png&#34; srcset=&#34;./multiplicity.png 1140w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;と同等である。&lt;/p&gt;

&lt;p&gt;なお &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では IE 記法の依存エンティティを表現できない。
したがって先ほどの&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./entity-relationship-2.punl&#34;&gt;&lt;img src=&#34;./entity-relationship-2.png&#34; srcset=&#34;./entity-relationship-2.png 973w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;において &lt;code&gt;Entity A&lt;/code&gt; と &lt;code&gt;Entity B&lt;/code&gt; のどちらが依存エンティティなのか分かりにくい（まぁ属性を見れば分かるけど）。
独立エンティティと依存エンティティを明示的に区別したいのであれば，苦肉の策ではあるが UML の&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-3-class-diagrams/&#34; title=&#34;真面目に PlantUML (3) : クラス図&#34;&gt;クラス図&lt;/a&gt;と IE 記法を混ぜて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;@startuml

entity &amp;#34;Entity A&amp;#34; as A {
  id : int
  --
  name : string
  location : string
}
entity &amp;#34;Entity B&amp;#34; as B {
  subid : int
  id : int &amp;lt;&amp;lt;FK&amp;gt;&amp;gt;
  --
  subname : string
}

A &amp;#34;1&amp;#34; &amp;lt;.left. &amp;#34;0..n&amp;#34; B : more info &amp;gt;

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./entity-relationship-3.punl&#34;&gt;&lt;img src=&#34;./entity-relationship-3.png&#34; srcset=&#34;./entity-relationship-3.png 973w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;などとするのがいいかもしれない。
その辺はお好みで。&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/ie-diagram&#34;&gt;Entity Relationship diagram syntax and features&lt;/a&gt; : 公式ドキュメント&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/veltra-engineering/how-to-draw-er-diagram-with-plantuml-86ec2095645e&#34;&gt;PlantUMLでER図を描く！ - VELTRA Engineering - Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/genzouw/items/23cd0119715403e6e110&#34;&gt;ER図を書くのに疲れたら - Qiita&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/achiku/planter&#34;&gt;GitHub - achiku/planter: Generate PlantUML ER diagram textual description from PostgreSQL tables&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/plantuml-sample&#34;&gt;GitHub - spiegel-im-spiegel/plantuml-sample: Samples for PlantUML&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
</feed>
