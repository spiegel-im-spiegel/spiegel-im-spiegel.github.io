<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of install - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/install/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/install/index.xml" />
	<id>tag:text.Baldanders.info,2021-01-01:/tags</id>
	<updated>2021-01-01T13:18:27+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>最新版 GnuPG をビルドする： GnuPG in Ubuntu</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/openpgp/build-gnupg-in-ubuntu/" />
		<id>tag:text.Baldanders.info,2021-01-01:/openpgp/build-gnupg-in-ubuntu/</id>
		<published>2021-01-01T04:18:27+00:00</published>
		<updated>2021-01-10T07:15:53+00:00</updated>
		<summary>念のために警告しておくと，今回の自力ビルドは積極的にはお勧めしない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;Linux 環境では &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; は（ユーザは意識しないかもしれないが）セキュリティ中核部品のひとつだが， &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; はかなり保守的な運用をしているそうで，滅多なことでは &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; をアップデートしないようだ。
かといって CVE ID が割り振られるような脆弱性まで長期間放置するのはいかがなものかと思うが。&lt;/p&gt;
&lt;p&gt;そこで，かねてから懸案だった &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の自力ビルドを試してみることにした。&lt;/p&gt;
&lt;p&gt;念のために警告しておくと，今回の自力ビルドは積極的にはお勧めしない。
&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の最新機能を試したいとか，何がなんでも最新版が欲しいとかいうのでない限り APT で配布されるバージョンを使うほうがよい。
まぁ「最悪はこういう手段も取れるよ」という感じで記憶の片隅にでも置いていただければ（笑）&lt;/p&gt;
&lt;h2&gt;ビルド対象のパッケージ&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; は複数のパッケージで構成されていて，個別にビルド&amp;amp;インストールしていく必要がある。
今回ビルド対象となるパッケージは以下の通り。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;#&lt;/th&gt;
&lt;th&gt;パッケージ名&lt;/th&gt;
&lt;th&gt;バージョン&lt;/th&gt;
&lt;th&gt;公開日&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://gnupg.org/software/libgpg-error/&#34;&gt;Libgpg-error&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.41&lt;/td&gt;
&lt;td&gt;2020-12-21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://gnupg.org/software/libgcrypt/&#34;&gt;Libgcrypt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.8.7&lt;/td&gt;
&lt;td&gt;2020-10-23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://gnupg.org/software/libassuan/&#34;&gt;Libassuan&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2.5.4&lt;/td&gt;
&lt;td&gt;2020-10-23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://gnupg.org/software/libksba/&#34;&gt;Libksba&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.5.0&lt;/td&gt;
&lt;td&gt;2020-11-18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://gnupg.org/software/npth/&#34;&gt;nPth&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.6&lt;/td&gt;
&lt;td&gt;2018-07-16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://gnupg.org/software/ntbtls/&#34;&gt;ntbTLS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.2.0&lt;/td&gt;
&lt;td&gt;2020-08-27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://gnupg.org/software/&#34;&gt;GnuPG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2.2.26&lt;/td&gt;
&lt;td&gt;2020-12-21&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ビルド&amp;amp;インストールの順番は &lt;a href=&#34;https://gnupg.org/software/libgpg-error/&#34;&gt;Libgpg-error&lt;/a&gt; を最初にして &lt;a href=&#34;https://gnupg.org/software/&#34;&gt;GnuPG&lt;/a&gt; を最後にすることさえ気をつければいいと思うが，特にこだわりがないのであれば上の順番でビルドしていくのがいいだろう。&lt;/p&gt;
&lt;h2&gt;前準備&lt;/h2&gt;
&lt;p&gt;最初に，上に挙げた以外でビルドに必要なパッケージを APT でインストールしておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install libgnutls28-dev bzip2 make gettext texinfo gnutls-bin build-essential libbz2-dev zlib1g-dev libncurses5-dev libsqlite3-dev libldap2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;適当にググって見繕ったものなので，もしかしたらこんなに要らないかもしれないが，精査するのが面倒くさかったので今回はこれで（笑）&lt;/p&gt;
&lt;p&gt;ビルド用にダウンロードしたファイルの&lt;a href=&#34;https://gnupg.org/download/integrity_check.html&#34; title=&#34;GnuPG - Integrity Check&#34;&gt;完全性（integrity）をチェック&lt;/a&gt;するために電子署名を検証する。
たとえばこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;gpg --verify gnupg-2.2.26.tar.bz2.sig gnupg-2.2.26.tar.bz2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;署名チェックに必要な &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 公開鍵は以下のページにある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gnupg.org/signature_key.html&#34;&gt;GnuPG - Signature Key&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;クリップボード操作ができる xsel または xclip コマンドがあるなら，上のページに貼り付けられている公開鍵（ASCII armor 形式）をコピって&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ xsel | gpg --import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとすれば公開鍵を取り込める。&lt;/p&gt;
&lt;h2&gt;各パッケージのビルド&lt;/h2&gt;
&lt;p&gt;ではパッケージを順にビルドしていこう。
ビルド用に適当なディレクトリをあらかじめ掘っておくとよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo mkdir /var/local/gnupg-build
$ cd /var/local/gnupg-build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;a href=&#34;https://gnupg.org/software/libgpg-error/&#34;&gt;Libgpg-error&lt;/a&gt; のビルド&lt;/h3&gt;
&lt;p&gt;以下に手順だけ示しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo curl -L https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.41.tar.bz2 -O
$ sudo curl -L https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.41.tar.bz2.sig -O
$ gpg -d libgpg-error-1.41.tar.bz2.sig # integrity check
$ sudo tar xvf libgpg-error-1.41.tar.bz2
$ pushd libgpg-error-1.41/
$ ./configure 
$ make
$ sudo make install
$ popd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;/usr/local/&lt;/code&gt; ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。
&lt;code&gt;configure&lt;/code&gt; コマンドは引数なしでも問題なさそうだ。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://gnupg.org/software/libgcrypt/&#34;&gt;Libgcrypt&lt;/a&gt; のビルド&lt;/h3&gt;
&lt;p&gt;同様に手順を示しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo curl -L https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.7.tar.bz2 -O
$ sudo curl -L https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.7.tar.bz2.sig -O
$ gpg -d libgcrypt-1.8.7.tar.bz2.sig # integrity check
$ sudo tar xvf libgcrypt-1.8.7.tar.bz2
$ pushd libgcrypt-1.8.7/
$ ./configure 
$ make
$ sudo make install
$ popd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;/usr/local/&lt;/code&gt; ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://gnupg.org/software/libassuan/&#34;&gt;Libassuan&lt;/a&gt; のビルド&lt;/h3&gt;
&lt;p&gt;同様に手順を示しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo curl -L https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.4.tar.bz2 -O
$ sudo curl -L https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.4.tar.bz2.sig -O
$ gpg -d libassuan-2.5.4.tar.bz2.sig # integrity check
$ sudo tar xvf libassuan-2.5.4.tar.bz2
$ pushd libassuan-2.5.4
$ ./configure 
$ make
$ sudo make install
$ popd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;/usr/local/&lt;/code&gt; ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://gnupg.org/software/libksba/&#34;&gt;Libksba&lt;/a&gt; のビルド&lt;/h3&gt;
&lt;p&gt;同様に手順を示しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo curl -L https://gnupg.org/ftp/gcrypt/libksba/libksba-1.5.0.tar.bz2 -O
$ sudo curl -L https://gnupg.org/ftp/gcrypt/libksba/libksba-1.5.0.tar.bz2.sig -O
$ gpg -d libksba-1.5.0.tar.bz2.sig # integrity check
$ sudo tar xvf libksba-1.5.0.tar.bz2
$ pushd libksba-1.5.0
$ ./configure 
$ make
$ sudo make install
$ popd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;/usr/local/&lt;/code&gt; ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://gnupg.org/software/npth/&#34;&gt;nPth&lt;/a&gt; のビルド&lt;/h3&gt;
&lt;p&gt;同様に手順を示しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo curl -L https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2 -O
$ sudo curl -L https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2.sig -O
$ gpg -d npth-1.6.tar.bz2.sig # integrity check
$ sudo tar xvf npth-1.6.tar.bz2
$ pushd npth-1.6
$ ./configure 
$ make
$ sudo make install
$ popd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;/usr/local/&lt;/code&gt; ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://gnupg.org/software/ntbtls/&#34;&gt;ntbTLS&lt;/a&gt; のビルド&lt;/h3&gt;
&lt;p&gt;同様に手順を示しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo curl -L https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.2.0.tar.bz2 -O
$ sudo curl -L https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.2.0.tar.bz2.sig -O
$ gpg -d ntbtls-0.2.0.tar.bz2.sig # integrity check
$ sudo tar xvf ntbtls-0.2.0.tar.bz2
$ pushd ntbtls-0.2.0
$ ./configure 
$ make
$ sudo make install
$ popd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;/usr/local/&lt;/code&gt; ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://gnupg.org/software/&#34;&gt;GnuPG&lt;/a&gt; のビルド&lt;/h3&gt;
&lt;p&gt;ようやく本命。
今までと同様に手順を示しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo curl -L https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.26.tar.bz2 -O
$ sudo curl -L https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.26.tar.bz2.sig -O
$ gpg -d gnupg-2.2.26.tar.bz2.sig # integrity check
$ sudo tar xvf gnupg-2.2.26.tar.bz2
$ pushd gnupg-2.2.26
$ ./configure 
$ make
$ sudo make install
$ popd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;/usr/local/&lt;/code&gt; ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。
そうそう，最後に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;としておくのを忘れずに。
これで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.2.26
libgcrypt 1.8.7
Copyright (C) 2020 Free Software Foundation, Inc.
License GNU GPL-3.0-or-later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: /home/username/.gnupg
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,
      TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と最新版で起動できる。
念のため設定状況もチェックしておこう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpgconf --list-components
gpg:OpenPGP:/usr/local/bin/gpg
gpg-agent:プライベート鍵:/usr/local/bin/gpg-agent
scdaemon:スマートカード:/usr/local/libexec/scdaemon
gpgsm:S/MIME:/usr/local/bin/gpgsm
dirmngr:ネットワーク:/usr/local/bin/dirmngr
pinentry:パスフレーズ入力:/usr/local/bin/pinentry

$ gpgconf --list-dirs
sysconfdir:/usr/local/etc/gnupg
bindir:/usr/local/bin
libexecdir:/usr/local/libexec
libdir:/usr/local/lib/gnupg
datadir:/usr/local/share/gnupg
localedir:/usr/local/share/locale
socketdir:/run/user/1000/gnupg
dirmngr-socket:/run/user/1000/gnupg/S.dirmngr
agent-ssh-socket:/run/user/1000/gnupg/S.gpg-agent.ssh
agent-extra-socket:/run/user/1000/gnupg/S.gpg-agent.extra
agent-browser-socket:/run/user/1000/gnupg/S.gpg-agent.browser
agent-socket:/run/user/1000/gnupg/S.gpg-agent
homedir:/home/username/.gnupg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ふむむ。
上の設定に合わせて，もう少し弄っておこうか。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/bin/
$ sudo ln -s /etc/alternatives/pinentry pinentry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな感じかな。
Pinentry は下手に弄ると絶対にドツボにはまるので今回は既存のものを使う。&lt;/p&gt;
&lt;h2&gt;ソケットががが【2021-01-10 変更】&lt;/h2&gt;
&lt;p&gt;この節の内容は「&lt;a href=&#34;https://text.baldanders.info/openpgp/gpg-agent-in-ubuntu/&#34;&gt;gpg-agent の設定&lt;/a&gt;」に移動した。&lt;/p&gt;
&lt;!--
上の `gpgconf --list-dirs` で示されるソケットについて

```text
socketdir:/run/user/1000/gnupg
dirmngr-socket:/run/user/1000/gnupg/S.dirmngr
agent-ssh-socket:/run/user/1000/gnupg/S.gpg-agent.ssh
agent-extra-socket:/run/user/1000/gnupg/S.gpg-agent.extra
agent-browser-socket:/run/user/1000/gnupg/S.gpg-agent.browser
agent-socket:/run/user/1000/gnupg/S.gpg-agent
```

そもそも `/run/user/1000/` ディレクトリ[^uid1] はブート時（？）に毎回初期化されるのだが，どうやら `/usr/bin/` ディレクトリ以下のオリジナル・コンポーネントを使って初期化してるみたいで，そのままだと `/usr/bin/gpg-agent` のほうが常駐してしまう。

[^uid1]: ちなみに `1000` はユーザIDを指す。ログインしている自身のユーザIDを知るには `id -u` で調べられる。

これでは面白くないし `gpg-agent` 経由でなにか操作をする度に `gpg-agent` のバージョンが古いと怒られるので，以下のコマンドでソケットを再作成する。

```text
$ gpgconf --kill all
$ gpgconf --remove-socketdir
$ gpgconf --create-socketdir
$ gpg-connect-agent --quiet /bye
```

これで `/usr/local/` ディレクトリ以下のコンポーネントに対応したソケットを再作成してくれる。
下３行はまとめて `~/.bashrc` 等に書いておくといいかもしれない。
いずれにせよ，かなりダサいやり方という自覚はありますよ。

これ，最初のソケット初期化時にやってくれないかなぁ。
[GnuPG] のサイトにはそもそもあまり情報がないし，ググっても情報が上手く見つけられなくて困っている。

どなたか情報をご存知でしたら教えてください &lt;abbr class=&#34;emoji-chars&#34; title=&#34;ペコン&#34;&gt;&amp;#x1f647;&lt;/abbr&gt;
--&gt;
&lt;h2&gt;最後に動作確認&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ echo hello world | gpg -a -s -u mykey
-----BEGIN PGP MESSAGE-----

owGbwMvMwCG45Zb1ujqFHTKMp4WSGOLfTbPOSM3JyVcozy/KSeHqmMzCIMjBYC2m
yCIdxHTby+542ccHayVgeliZQBpkZYoLMlPTU3P0MnP1oEyH9NzEzBy95PxcBi5O
AZj6RwcY/scanE3cwbVrv0v/zA7njR1J8d7vTjwP28EmLvzWVuPhqnaG/4kBz24f
634aYBi/NW79/1WcDusyco91C7N6zWwVC114PRsA
=/6XI
-----END PGP MESSAGE-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;署名時に Pinentry が起動してパスフレーズが通ればOK。
よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Nitrokey/gnupg-docker&#34;&gt;Nitrokey/gnupg-docker: Build and use specific GnuPG version using Ubuntu image within Docker&amp;rsquo;s container&lt;/a&gt; : Docker 環境で &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; をビルド&amp;amp;セットアップする&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/gnupg-cheat-sheet/&#34;&gt;GnuPG チートシート（鍵作成から失効まで）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/10/windows-terminal-and-nyagos-and-scoop/&#34;&gt;Windows Terminal × NYAGOS × Scoop ＝ ♥&lt;/a&gt; : Windows 版 &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; は Scoop 経由でインストールするのがオススメ&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>Ubuntu に Docker を入れる</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/12/installing-docker-in-ubuntu/" />
		<id>tag:text.Baldanders.info,2020-12-20:/remark/2020/12/installing-docker-in-ubuntu/</id>
		<published>2020-12-20T12:55:25+00:00</published>
		<updated>2020-12-20T12:56:00+00:00</updated>
		<summary>なんか以前より面倒くさくなってないか？</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ちょっと思いついて &lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy&#34; title=&#34;sonatype-nexus-community/nancy: A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index&#34;&gt;onatype-nexus-community/nancy&lt;/a&gt; を &lt;a href=&#34;https://www.docker.com/&#34; title=&#34;Empowering App Development for Developers | Docker&#34;&gt;Docker&lt;/a&gt; で動かそうと思ったのだが，メイン・マシンに入れてないことに気がついた。
そういや&lt;a href=&#34;https://text.baldanders.info/remark/2019/12/install-ubuntu-to-second-hand-pc/&#34; title=&#34;中古 PC に Ubuntu 環境を導入する&#34;&gt;実験用のノートPC&lt;/a&gt;に入れただけでメイン・マシンには入れてなかったか。&lt;/p&gt;
&lt;p&gt;というわけで，改めて &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; に &lt;a href=&#34;https://www.docker.com/&#34; title=&#34;Empowering App Development for Developers | Docker&#34;&gt;Docker&lt;/a&gt; を入れようとしたのだが，なんか以前より面倒くさくなってないか？ 一応，覚え書きとして残しておこう。&lt;/p&gt;
&lt;p&gt;まず &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; の APT 標準リポジトリに入ってるものは微妙に古くてダメぽい感じ。
なので，既に入っている場合はいったん消しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt remove docker docker-engine docker.io containerd runc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まっさらになったらリポジトリの登録から始める。&lt;/p&gt;
&lt;p&gt;その前に以下のパッケージが未インストールなら先にインストールする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;sudo apt install apt-transport-https ca-certificates curl software-properties-common
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;インストールできたら &lt;a href=&#34;https://www.docker.com/&#34; title=&#34;Empowering App Development for Developers | Docker&#34;&gt;Docker&lt;/a&gt; インストール用の OpenPGP 公開鍵をインポートする&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一応，鍵指紋を確認しておくね。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt-key fingerprint 0EBFCD88
pub   rsa4096 2017-02-22 [SCEA]
      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid           [  不明  ] Docker Release (CE deb) &amp;lt;docker@docker.com&amp;gt;
sub   rsa4096 2017-02-22 [S]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;無駄にデカい鍵を使ってる気がするが，まぁいいや。
鍵指紋が &lt;code&gt;9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88&lt;/code&gt; なら無問題。&lt;/p&gt;
&lt;p&gt;そして，ようやくリポジトリの登録である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;sudo add-apt-repository &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;stable&lt;/code&gt; の他に &lt;code&gt;nightly&lt;/code&gt; と &lt;code&gt;test&lt;/code&gt; があるそうだが， &lt;a href=&#34;https://www.docker.com/&#34; title=&#34;Empowering App Development for Developers | Docker&#34;&gt;Docker&lt;/a&gt; 自体で遊ぶわけではないので &lt;code&gt;stable&lt;/code&gt; でええじゃろ。
&lt;code&gt;sudo apt update&lt;/code&gt; で最新化しておくのをお忘れなく。&lt;/p&gt;
&lt;p&gt;あとは普通にインストールすればよい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;sudo apt install docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.docker.com/&#34; title=&#34;Empowering App Development for Developers | Docker&#34;&gt;Docker&lt;/a&gt; のインストールが成功すると daemon として起動する。
状態を確認するには以下のコマンドでOK。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo systemctl status docker
● docker.service - Docker Application Container Engine
     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)
     Active: active (running) since Sun 2020-12-20 00:00:00 UTC; 21min ago
TriggeredBy: ● docker.socket
       Docs: https://docs.docker.com
   Main PID: 849 (dockerd)
      Tasks: 14
     Memory: 112.1M
     CGroup: /system.slice/docker.service
             └─849 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;うんうん，ちゃんと動いてるね。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.docker.com/&#34; title=&#34;Empowering App Development for Developers | Docker&#34;&gt;Docker&lt;/a&gt; を自身のアカウントで動かしたい場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo usermod -aG docker username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとして docker グループに組み入れる。
ログインし直さないと有効にならないので注意。&lt;/p&gt;
&lt;p&gt;ほんじゃあ，いよいよ &lt;a href=&#34;https://github.com/sonatype-nexus-community/nancy&#34; title=&#34;sonatype-nexus-community/nancy: A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index&#34;&gt;onatype-nexus-community/nancy&lt;/a&gt; を動かしてみますかね。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go list -json -m all | docker run --rm -i sonatypecommunity/nancy:latest sleuth -n
┏━━━━━━━━━━━━━━━┓
┃ Summary                      ┃
┣━━━━━━━━━━━━━┳━┫
┃ Audited Dependencies     ┃ 9┃
┣━━━━━━━━━━━━━╋━┫
┃ Vulnerable Dependencies  ┃ 0┃
┗━━━━━━━━━━━━━┻━┛
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;&gt;Install Docker Engine on Ubuntu | Docker Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04&#34;&gt;How To Install and Use Docker on Ubuntu 20.04 | DigitalOcean&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/tkyonezu/items/0f6da57eb2d823d2611d&#34;&gt;Ubuntuにdockerをインストールする - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://jaco.udcp.info/entry/2020/12/03/172843&#34;&gt;Dockerは非推奨じゃないし今すぐ騒ぐのをやめろ - Cloud Penguins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/check-for-vulns-in-golang-dependencies/&#34;&gt;Go 依存パッケージの脆弱性検査&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B08PNMRXKN?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41g&amp;#43;F7WohJL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B08PNMRXKN?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;イラストでわかるDockerとKubernetes Software Design plus&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;徳永 航平 (著)&lt;/dd&gt;
    &lt;dd&gt;技術評論社 2020-12-05 (Release 2020-12-05)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B08PNMRXKN (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;とりあえず Kindle 版を買ったがまだ読んでない。年末年始の課題図書にする予定。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-12-20&#34;&gt;2020-12-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- イラストでわかるDockerとKubernetes --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;インポートする前に公開鍵の中身を &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; で確認することができる。コマンドラインで &lt;code&gt;gpgpdump fetch https://download.docker.com/linux/ubuntu/gpg&lt;/code&gt; とすればよい。宣伝でした（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Ubuntu 20.10 のアップグレードに失敗していた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/11/upgrade-ubuntu-20_10/" />
		<id>tag:text.Baldanders.info,2020-11-23:/remark/2020/11/upgrade-ubuntu-20_10/</id>
		<published>2020-11-23T02:02:44+00:00</published>
		<updated>2020-11-23T02:03:41+00:00</updated>
		<summary>ま，まぁ，ともかく，アップグレードは完了した。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;2020年10月に &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 20.10 がリリースされたが，今回は日本語 Remix 版が出るまで呑気に待つつもりだった。
その後ちょっと忙しくなったので完全に忘れていたのだが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.ubuntu.com/archives/ubuntu-jp/2020-November/006372.html&#34;&gt;[ubuntu-jp:6373] Ubuntu 20.10 日本語 Remix リリース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/11/ubuntu-2010-50-ubuntu-2010-remix.html&#34;&gt;Ubuntu 20.10 その50 - Ubuntu 20.10 日本語 Remixがリリースされました・ディスクイメージのダウンロード - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2週間前に出てるぢゃん &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;あれ？ そういえば GUI の update が何も言ってこないな？ と思って少し調べてみた。
まず GUI 側の設定は問題ない（新バージョンの通知が「すべての新バージョン」になっていればOK）。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./settings-update.png&#34;&gt;&lt;img src=&#34;./settings-update.png&#34; srcset=&#34;./settings-update.png 1009w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;念のため &lt;code&gt;/etc/update-manager/release-upgrades&lt;/code&gt; ファイルも見てみるが&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DEFAULT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# Default prompting and upgrade behavior, valid options:&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#  never  - Never check for, or allow upgrading to, a new release.&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#  normal - Check to see if a new release is available.  If more than one new&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           release is found, the release upgrader will attempt to upgrade to&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           the supported release that immediately succeeds the&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           currently-running release.&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#  lts    - Check to see if a new LTS release is available.  The upgrader&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           will attempt to upgrade to the first LTS release available after&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           the currently-running one.  Note that if this option is used and&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           the currently-running release is not itself an LTS release the&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#           upgrader will assume prompt was meant to be normal.&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;Prompt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;normal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ってなってた。
これも問題ない。&lt;/p&gt;
&lt;p&gt;しょうがないので手動でターミナル・エミュレータから &lt;code&gt;do-release-upgrade&lt;/code&gt; を起動してみる。
したら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo do-release-upgrade
Checking for a new Ubuntu release
Failed to connect to https://changelogs.ubuntu.com/meta-release. Check your Internet connection or proxy settings
No new release found.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;は？ ネット接続設定に問題はねーよ。
どーりでアップグレードが動かないわけだよ。
ちなみにブラウザから上述の URL を叩いてみたがちゃんと開くし，末尾に Groovy Gorilla の項目もある。&lt;/p&gt;
&lt;p&gt;何じゃこりゃ，とググってみたら &lt;code&gt;/etc/update-manager/meta-release&lt;/code&gt; ファイル&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;METARELEASE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;URI&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changelogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ubuntu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;release&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;URI_LTS&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changelogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ubuntu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lts&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;URI_UNSTABLE_POSTFIX&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;development&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;URI_PROPOSED_POSTFIX&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proposed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;の &lt;code&gt;URI&lt;/code&gt; 項目を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;nx&#34;&gt;URI&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;://&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;changelogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ubuntu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;meta&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;release&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;に書き換えろ，とあった。
つまり HTTPS 接続できないらしい。
実際に書き換えたらようやくアップグレードが走り出した。&lt;/p&gt;
&lt;p&gt;これ，大丈夫か？&lt;/p&gt;
&lt;p&gt;ま，まぁ，ともかく，途中で &lt;code&gt;mozc&lt;/code&gt; や GNOME の日本語パッケージが勝手に消されるアクシデントもあったが設定の「地域と言語」から復元できたし，アップグレードは完了した。&lt;/p&gt;
&lt;h2&gt;個別のアプリケーションについて&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; および &lt;a href=&#34;https://gnupg.org/software/libgcrypt/&#34;&gt;Libgcrypt&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.2.20
libgcrypt 1.8.5
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: /home/username/.gnupg
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,
      TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の遅れっぷりは相変わらず。
ちなみに現時点（2020-11-23）の最新版は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
&lt;span class=&#34;hl&#34;&gt;gpg (GnuPG) 2.2.24
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;libgcrypt 1.8.7
&lt;/span&gt;Copyright (C) 2020 g10 Code GmbH
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;である。
おっ， 2.2.24 から著作権者表示が代わってるな。
いや，開発やメンテは一貫して “g10 Code GmbH” がやってるんだけど。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; および &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ssh -V
OpenSSH_8.3p1 Ubuntu-1, OpenSSL 1.1.1h  22 Sep 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; は 2020-09-27 に 8.4 が出てるのでこれも周回遅れ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; については APT では&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apt show openssl
Package: openssl
Version: 1.1.1f-1ubuntu4
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とバックポート・パッチのせいで相変わらずよく分からないのだが，私が&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/06/installing-openssl-in-ubuntu/&#34;&gt;Ubuntu に最新の OpenSSL を入れる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という感じに手動でアップデートを行っている。
ちなみに，現時点（2020-11-23）での &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; 1.1.1 系最新版は 2020-09-22 にリリースされた 1.1.1h である。&lt;/p&gt;
&lt;h3&gt;Libsecret のアップデート&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; credential helper である GNOME/libsecret もバージョンが上がってる？ のかな。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apt show libsecret-1-dev
Package: libsecret-1-dev
Version: 0.20.3-1
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というわけで，これも手動でビルドする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ mkdor ~/work
$ cd ~/work
$ cp -r /usr/share/doc/git/contrib/credential/libsecret .
$ cd libsecret
$ make
gcc -g -O2 -Wall  -pthread -I/usr/include/libsecret-1 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-libsecret.o -c git-credential-libsecret.c
gcc -o git-credential-libsecret  git-credential-libsecret.o -lsecret-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで生成した &lt;code&gt;git-credential-libsecret&lt;/code&gt; を &lt;code&gt;$PATH&lt;/code&gt; の通ったディレクトリに放り込んでおけばよい。
&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; の設定に組み込むには以下のコマンドでOK。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git config --global credential.helper libsecret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ubuntu-news.org/2020/10/22/ubuntu-20-10-groovy-gorilla-released/&#34;&gt;Ubuntu Fridge | Ubuntu 20.10 (Groovy Gorilla) released&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://discourse.ubuntu.com/t/groovy-gorilla-release-notes/15533&#34;&gt;Groovy Gorilla Release Notes - Release - Ubuntu Community Hub&lt;/a&gt; (&lt;a href=&#34;https://wiki.ubuntu.com/GroovyGorilla/ReleaseNotes/Ja&#34;&gt;日本語&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/news/secadv/20200909.txt&#34;&gt;OpenSSL Security Advisory [09 September 2020]&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ubuntuforums.org/showthread.php?t=2452515&amp;amp;s=b5cbbeb5143c46914981366cb0eec2ef&#34;&gt;[SOLVED] Cannot upgrade 20.10 Failed to connect to https://changelogs.ubuntu.com/meta-release&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/10/ubuntu-2010-12-ubuntu-2010.html&#34;&gt;Ubuntu 20.10 その12 - Ubuntu 20.10がリリースされました・ディスクイメージのダウンロード - kledgeb&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://net.youhei02.com/ubuntu13/&#34;&gt;Ubuntu20.04から20.10にアップグレードする方法 | ネットでお金を稼ぐ男のブログ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/bootable-usb/&#34;&gt;Ubuntu インストール用のブート可能 USB メモリを作成する&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-git-from-ppa/&#34;&gt;PPA から Git をインストールする&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/317fsDSqG8L._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;シリコンパワー USBメモリ 32GB USB3.1 / USB3.0 亜鉛合金ボディ 防水 防塵 耐衝撃 永久保証 PS4動作確認済 Jewel J80 SP032GBUF3J80V1TJA&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;シリコンパワー (Release 2017-02-01)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B01NBU1OS5 (ASIN), 4712702655292 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;OS 移行用に購入。ひたすらデザインで決めた（笑） よく考えたら32GBも要らなかった。まぁ，何か使い道があるだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-04-21&#34;&gt;2019-04-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- シリコンパワー USBメモリ 32GB USB3.1 --&gt;
</content>
	</entry><entry>
		<title>Windows Terminal × NYAGOS × Scoop ＝ ♥</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/10/windows-terminal-and-nyagos-and-scoop/" />
		<id>tag:text.Baldanders.info,2020-10-27:/remark/2020/10/windows-terminal-and-nyagos-and-scoop/</id>
		<published>2020-10-27T13:17:46+00:00</published>
		<updated>2020-12-03T11:36:02+00:00</updated>
		<summary>とりあえず ATOM エディタと NYAGOS を入れたい。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;アルファ・ベータ・オメガの割り振りはご想像にお任せします &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:smile:&#34;&gt;😄&lt;/abbr&gt; って，そういう話ではない。&lt;/p&gt;
&lt;p&gt;さて，職場で Windows 10 機を支給されたので，とりあえず &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタと &lt;a href=&#34;https://github.com/zetamatta/nyagos&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid Commandline Shell betweeeeeeen UNIX &amp;amp; DOS&#34;&gt;NYAGOS&lt;/a&gt; を入れたいわけですよ。&lt;/p&gt;
&lt;h2&gt;Windows 10 に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を入れる&lt;/h2&gt;
&lt;p&gt;まぁこちらはサラッと。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;公式ページ&lt;/a&gt;からインストーラを取ってきて普通にインストールすればいいだけ。
なのだが，何故か Windows 版はコマンドラインからの起動が冷遇されているのよ。
古いバージョンにはあった &lt;code&gt;atom.cmd&lt;/code&gt; がなくなっている。&lt;/p&gt;
&lt;p&gt;じゃあ，どうやって起動するのかというと “System Settings” で&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./atom-system-settings.png&#34;&gt;&lt;img src=&#34;./atom-system-settings.png&#34; srcset=&#34;./atom-system-settings.png 734w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;System Settings in ATOM&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./atom-system-settings.png&#34;&gt;System Settings in ATOM&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;てな感じにエクスプローラ等のコンテキストメニューから開けるように設定できる。
また &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; が起動している状態でタスクバーの &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; アイコンをピン留めしておけば&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./atom-in-task-bar.png&#34;&gt;&lt;img src=&#34;./atom-in-task-bar.png&#34; srcset=&#34;./atom-in-task-bar.png 525w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ATOM icon in task bar&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;./atom-in-task-bar.png&#34;&gt;ATOM icon in task bar&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;みたいな感じにコンテキストメニューを展開できる。&lt;/p&gt;
&lt;p&gt;困るのが &lt;code&gt;apm&lt;/code&gt; コマンドなのだが，これにはパスを通さずに直接カレントまで降りて操作するしかないだろう。
v1.52.0 なら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd C:\Users\username\AppData\Local\atom\app-1.52.0\resources\app\apm\bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まで降りる。
この場所で apm を使ってログインできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm login
Welcome to Atom!

Before you can publish packages, you&amp;#39;ll need an API token.

Visit your account page on Atom.io https://atom.io/account,
copy the token and paste it below when prompted.

Press [Enter] to open your account page on Atom.io.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここで &lt;code&gt;[Enter]&lt;/code&gt; キーを押すと Web ブラウザでアカウントページが開く（要 GitHub アカウント）。
開かない場合は Web ブラウザで直接 &lt;a href=&#34;https://atom.io/account&#34;&gt;&lt;code&gt;https://atom.io/account&lt;/code&gt;&lt;/a&gt; を開く。
アカウントページに表示されたアクセス・トークンを入力すればログイン完了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Token&amp;gt; ****************
Saving token to Keychain done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あとは&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm stars --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:star:&#34;&gt;⭐&lt;/abbr&gt; を付けたパッケージをまとめてインストールできる。
ちなみに，どのパッケージに &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:star:&#34;&gt;⭐&lt;/abbr&gt; を付けたかは&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm stars
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で確認できる。
その他の細々した設定は &lt;a href=&#34;https://gist.github.com/spiegel-im-spiegel/e6e9c7340987f1607b2c&#34; title=&#34;ATOM Editor の設定（カスタマイズ, Windows 環境用）&#34;&gt;Gist に貼り付けておいた&lt;/a&gt;のを流用した。
なんでも取っておくものである &lt;abbr class=&#34;emoji-chars&#34; title=&#34;:smile:&#34;&gt;😄&lt;/abbr&gt;&lt;/p&gt;
&lt;h2&gt;Windows Terminal のインストール&lt;/h2&gt;
&lt;p&gt;これでようやく「メモ帳」から脱することができたので，本格的に環境を作っていこう。&lt;/p&gt;
&lt;p&gt;かつて Windows 7 を使ってた頃はターミナル・エミュレータに ConEmu を使っていたが，本家 Microsoft からようやくまともなターミナル・エミュレータがリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/windows/terminal/&#34;&gt;Windows ターミナルの概要 | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows Terminal は Microsoft Store からインストールできる。
ひとまずこれをインストールして起動し，既定の PowerShell 上で作業する。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; のインストール&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; は Windows 用のパッケージ・マネージャである。
Windows 用のパッケージ・マネージャといえば &lt;a href=&#34;https://chocolatey.org/&#34; title=&#34;Chocolatey Software | Chocolatey - The package manager for Windows&#34;&gt;Chocolatey&lt;/a&gt; が有名だが，今回は &lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; で。
&lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; の特徴は以下の通り。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;利用に管理者権限は不要！&lt;/li&gt;
&lt;li&gt;実行ファイルは ~\scoop\shims に集約され、環境変数 PATH の肥大化が抑制される&lt;/li&gt;
&lt;li&gt;インストーラのセットアップが簡単&lt;/li&gt;
&lt;li&gt;nyagos が公式レポジトリにある (Chocolatey にもあるけど）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;&lt;q&gt;&lt;a href=&#34;https://zenn.dev/zetamatta/books/5ac80a9ddb35fef9a146&#34;&gt;scoop / nyagos で始めるコマンドライン生活&lt;/a&gt;&lt;/q&gt;より&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;では早速。&lt;/p&gt;
&lt;p&gt;まずは PowerShell でスクリプトを起動できるよう権限を取得する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;PS &amp;gt; Set-ExecutionPolicy RemoteSigned -scope CurrentUser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;既に許可を取得している場合はこの操作は不要である。
そうしておいて &lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; をインストールする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;PS &amp;gt; iwr -useb get.scoop.sh | iex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで OK。
簡単！&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/zetamatta/nyagos&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid Commandline Shell betweeeeeeen UNIX &amp;amp; DOS&#34;&gt;NYAGOS&lt;/a&gt; のインストール&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zetamatta/nyagos&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid Commandline Shell betweeeeeeen UNIX &amp;amp; DOS&#34;&gt;NYAGOS&lt;/a&gt; のインストールは &lt;code&gt;scoop install&lt;/code&gt; コマンドで一発 OK。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;PS &amp;gt; scoop install nyagos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h3&gt;Windows Terminal に &lt;a href=&#34;https://github.com/zetamatta/nyagos&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid Commandline Shell betweeeeeeen UNIX &amp;amp; DOS&#34;&gt;NYAGOS&lt;/a&gt; を登録する&lt;/h3&gt;
&lt;p&gt;Windows Terminal では PowerShell を含む複数の shell を登録できる。&lt;/p&gt;
&lt;p&gt;まずは &lt;code&gt;[Ctrl+,]&lt;/code&gt; で &lt;code&gt;config.json&lt;/code&gt; ファイル（のコピー）がメモ帳で表示される（コメントを端折っているので注意）。
これを編集して &lt;a href=&#34;https://github.com/zetamatta/nyagos&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid Commandline Shell betweeeeeeen UNIX &amp;amp; DOS&#34;&gt;NYAGOS&lt;/a&gt; を登録するのだ。
具体的には以下の部分を追記する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://aka.ms/terminal-profiles-schema&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;defaultProfile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;copyOnSelect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;copyFormatting&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;profiles&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;defaults&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;guid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Windows PowerShell&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;commandline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;powershell.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;guid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{0caa0dad-35be-5f56-a8ff-afceeeaa6101}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;コマンド プロンプト&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;commandline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;cmd.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;guid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{b453ae62-4e3d-5e58-b989-0a998ec441b8}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Azure Cloud Shell&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Windows.Terminal.Azure&amp;#34;&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;                &lt;span class=&#34;nt&#34;&gt;&amp;#34;guid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{19ddaf5e-e045-481a-bf88-37f7ebe66292}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;                &lt;span class=&#34;nt&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;                &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Nihongo Yet Another GOing Shell&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;                &lt;span class=&#34;nt&#34;&gt;&amp;#34;commandline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;%USERPROFILE%\\scoop\\apps\\nyagos\\current\\nyagos.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;                &lt;span class=&#34;nt&#34;&gt;&amp;#34;cursorShape&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;vintage&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;                &lt;span class=&#34;nt&#34;&gt;&amp;#34;startingDirectory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;%USERPROFILE%&amp;#34;&lt;/span&gt;
&lt;/span&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;schemes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;actions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;copy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;singleLine&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+c&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;paste&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+v&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;find&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ctrl+shift+f&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;splitPane&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;split&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;auto&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;splitMode&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;duplicate&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;alt+shift+d&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ちなみに &lt;code&gt;guid&lt;/code&gt; 項目はローカルマシン内で一意であればなんでもいいのだが（上の記述をそのままコピペしても無問題），気になるのであれば PowerShell の以下のコマンドで取得できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;PS &amp;gt; New-Guid

Guid
----
6c48ee13-e32b-4937-95a5-7e95a2e88613
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更に &lt;code&gt;config.json&lt;/code&gt; ファイル（のコピー）の&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;defaultProfile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;の部分を &lt;a href=&#34;https://github.com/zetamatta/nyagos&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid Commandline Shell betweeeeeeen UNIX &amp;amp; DOS&#34;&gt;NYAGOS&lt;/a&gt; の GUID に書き換えれば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;defaultProfile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{19ddaf5e-e045-481a-bf88-37f7ebe66292}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Windows Terminal の既定の shell を &lt;a href=&#34;https://github.com/zetamatta/nyagos&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid Commandline Shell betweeeeeeen UNIX &amp;amp; DOS&#34;&gt;NYAGOS&lt;/a&gt; にできる。&lt;/p&gt;
&lt;p&gt;編集した &lt;code&gt;config.json&lt;/code&gt; ファイル（のコピー）を保存すれば設定が反映される。
ふぃー，よーやくここまでたどり着いた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zetamatta/nyagos&#34; title=&#34;zetamatta/nyagos: NYAGOS - The hybrid Commandline Shell betweeeeeeen UNIX &amp;amp; DOS&#34;&gt;NYAGOS&lt;/a&gt; を使った楽しいアレコレは以下の Zenn 本に書かれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/zetamatta/books/5ac80a9ddb35fef9a146&#34;&gt;scoop / nyagos で始めるコマンドライン生活&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述のセットアップについても，もう少し丁寧に書かれているので，是非どうぞ。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; で GUID を取得する&lt;/h3&gt;
&lt;p&gt;そういや &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; の &lt;a href=&#34;https://pkg.go.dev/github.com/google/uuid&#34;&gt;&lt;code&gt;github.com/google/uuid&lt;/code&gt;&lt;/a&gt; パッケージを使えば &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc4122.html&#34; title=&#34;RFC 4122: A Universally Unique IDentifier (UUID) URN Namespace&#34;&gt;UUID&lt;/a&gt; を取得可能だが， UUID は実質 GUID と同じなので，これを利用して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/google/uuid&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば簡単に UUID/GUID が取れる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run sample.go 
f6bdc505-e417-4b7d-a247-a06504cf03a9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; を使うなら git は必須&lt;/h2&gt;
&lt;p&gt;これでインストールは全て完了だが，今後のためにもう少し &lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; で遊んでみよう。&lt;/p&gt;
&lt;p&gt;まず &lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; のバージョンを見ようとしたら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ scoop -v
Current Scoop version:
git : 用語 &amp;#39;git&amp;#39; は、コマンドレット、関数、スクリプト ファイル、または操作可能なプログラムの名前として認識されません。
名前が正しく記述されていることを確認し、パスが含まれている場合はそのパスが正しいことを確認してから、再試行してください
。
発生場所 行:1 文字:1
+ git --no-pager log --oneline HEAD -n 1
+ ~~~
    + CategoryInfo          : ObjectNotFound: (git:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;って，どエラ怒られた（笑） どうやら &lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; はパッケージ管理を git ベースで行っているらしく，ちゃんと使うなら git の導入が必須のようだ。
ほんじゃあ，まぁ&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ scoop install git
Scoop uses Git to update itself. Run &amp;#39;scoop install git&amp;#39; and try again.
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;おっ，アップデートした後にもっかいやれって言ってるな。
ならば，アップデートしよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ scoop update
Updating Scoop...
Updating &amp;#39;main&amp;#39; bucket...
Checking repo... ok
The main bucket was added successfully.
Scoop was updated successfully!
&amp;#39;itcode&amp;#34;&amp;#39; は、内部コマンドまたは外部コマンド、
操作可能なプログラムまたはバッチ ファイルとして認識されていません。
exit status 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;おりょ，また変なエラーが出たよ。
&lt;code&gt;itcode&amp;quot;&lt;/code&gt; 云々というのは PowerShell 絡みらしい。
なので，同じコマンドを PowerShell 上で走らせれば問題なく完了する。&lt;/p&gt;
&lt;p&gt;うむ，次回から気をつけよう。&lt;/p&gt;
&lt;p&gt;これでもっかい&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ scoop update git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば，最新版が取れるわけだ。&lt;/p&gt;
&lt;h2&gt;ついでに &lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; で &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; もインストールする&lt;/h2&gt;
&lt;p&gt;ついでに &lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; で &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; もインストールしてみよう。
あるかな？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ scoop search gnupg
&amp;#39;main&amp;#39; bucket:
    gnupg (2.2.23)
    gnupg1 (1.4.23)

$ scoop search gpg
&amp;#39;main&amp;#39; bucket:
    gnupg1 (1.4.23) --&amp;gt; includes &amp;#39;gpg.exe&amp;#39;
    gpg (2.2.23)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;どっちだよ（笑）&lt;/p&gt;
&lt;p&gt;実はこれ，中身は同じなのだが別々のパッケージとしてインストールされちゃうようだ。
ふむむー。&lt;/p&gt;
&lt;p&gt;まぁ，いいや。
今回は &lt;code&gt;gnupg&lt;/code&gt; で。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ scoop install gnupg
Installing &amp;#39;gnupg&amp;#39; (2.2.23) [64bit]

...

Linking ~\scoop\apps\gnupg\current =&amp;gt; ~\scoop\apps\gnupg\2.2.23
Persisting home
&amp;#39;gnupg&amp;#39; (2.2.23) was installed successfully!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://scoop.sh/&#34; title=&#34;Scoop&#34;&gt;Scoop&lt;/a&gt; で提供されるパッケージのうち，シングルバイナリのコマンドは &lt;code&gt;%USERPROFILE%\scoop\shims&lt;/code&gt; フォルダに集められるのだが， &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; のように複数のバイナリで構成されているものは専用のフォルダを作り環境変数 &lt;code&gt;PATH&lt;/code&gt; にインストールしたフォルダを追加するようだ。
その際に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Linking ~\scoop\apps\gnupg\current =&amp;gt; ~\scoop\apps\gnupg\2.2.23
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のように &lt;code&gt;current&lt;/code&gt; フォルダをシンボリックリンクとして設置することで複数のバージョンに対応できるようにしているみたい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の動作確認をしておこう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gpg --version
gpg (GnuPG) 2.2.23
libgcrypt 1.8.6
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: C:/Users/username/scoop/apps/gnupg/current/home
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述の &lt;code&gt;Home&lt;/code&gt; だが，これもシンボリックリンクが切られていて，実体は &lt;code&gt;%USERPROFILE%\scoop\persist\gnupg\home&lt;/code&gt; にある。&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2020-11-02 追記】&lt;/strong&gt;
&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; については以下の記事でもう少し掘り下げて紹介している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/gnupg-home-in-windows/&#34;&gt;GnuPG の HOME はどこにある？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2&gt;今回はここまで&lt;/h2&gt;
&lt;p&gt;おっと。
昼休憩が終わったようだ。
次回があれば，また今度。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lukesampson/scoop&#34;&gt;lukesampson/scoop: A command-line installer for Windows.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/iakio/items/78e7f098047ea0a47d70&#34;&gt;Windows用のコマンドラインインストーラScoop - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Dooteeen/items/12dc8fb14042888113d0&#34;&gt;Scoopを使ったWindows環境構築のススメ - Super!! - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hogehoge.tk/guid/&#34;&gt;GUID生成ツール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/zetamatta/books/c84cbe23093eee1b5830&#34;&gt;/bin/shに慣れた人に贈るバッチファイルの書き方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.satotaichi.info/scoop/index.html&#34;&gt;ScoopでWindowsにおける開発環境構築を最適化しよう | さにあらず&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/sozaiya/items/fd7ec3000939f0697939&#34;&gt;scoopを使ったwindows環境構築の実例 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.isonishi.com/posts/scoop-git-sourcetree/&#34;&gt;Scoop で Git と SourceTree をインストール - ありふれた備忘録&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
</content>
	</entry><entry>
		<title>Ubuntu に最新の OpenSSL を入れる</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/06/installing-openssl-in-ubuntu/" />
		<id>tag:text.Baldanders.info,2020-06-24:/remark/2020/06/installing-openssl-in-ubuntu/</id>
		<published>2020-06-24T11:37:29+00:00</published>
		<updated>2020-06-24T11:37:45+00:00</updated>
		<summary>セキュリティの中核部品なので手動で入れるのはどうかと思ったが，調べたところ簡単に行きそうだ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;最近ようやく &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 20.04 で &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; 8.3 に対応するバックポート・パッチが出たようだ？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ssh -V
OpenSSH_8.2p1 Ubuntu-4ubuntu0.1, OpenSSL 1.1.1f  31 Mar 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし，上に見るように &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; に関しては 1.1.1f のまま，&lt;a href=&#34;https://usn.ubuntu.com/&#34; title=&#34;Ubuntu security notices&#34;&gt;バックポート・パッチもなく&lt;/a&gt;，脆弱性が放置されている模様。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/alert20200423.html&#34;&gt;OpenSSL の脆弱性対策について(CVE-2020-1967) ：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2020/at200018.html&#34;&gt;OpenSSL の脆弱性 (CVE-2020-1967) に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私としてはそろそろ我慢の限界なので，手動で最新バージョンの &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; を入れることにした。
セキュリティの中核部品なので手動で入れるのはどうかと思ったが，調べたところ簡単に行きそうだ。&lt;/p&gt;
&lt;p&gt;自分で試す場合は自己責任でね☆&lt;/p&gt;
&lt;h2&gt;既定状態&lt;/h2&gt;
&lt;p&gt;まず &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; を手動インストールする前の状態をメモっておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ which openssl
/usr/bin/openssl

$ ldd /usr/bin/openssl
	linux-vdso.so.1 (0x00007ffe186db000)
	libssl.so.1.1 =&amp;gt; /usr/lib/x86_64-linux-gnu/libssl.so.1.1 (0x00007f5d77c11000)
	libcrypto.so.1.1 =&amp;gt; /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 (0x00007f5d7793b000)
	libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f5d77918000)
	libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f5d77726000)
	libdl.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f5d77720000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f5d77d7e000)

$ openssl version
OpenSSL 1.1.1f  31 Mar 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この状態を覚えておく。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; 最新版のダウンロード&lt;/h2&gt;
&lt;p&gt;2020-06-24 時点の最新バージョンは 1.1.1g なので，これを&lt;a href=&#34;https://www.openssl.org/source/&#34;&gt;ダウンロードする&lt;/a&gt;ところから始める。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src/
$ sudo wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz
$ sudo wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz.asc
$ gpg -d openssl-1.1.1g.tar.gz.asc
gpg: 署名されたデータが&amp;#39;openssl-1.1.1g.tar.gz&amp;#39;にあると想定します
gpg: 2020年04月21日 21時22分45秒 JSTに施された署名
gpg:                RSA鍵8657ABB260F056B1E5190839D9C4D26D0E604491を使用
gpg: &amp;#34;Matt Caswell &amp;lt;matt@openssl.org&amp;gt;&amp;#34;からの正しい署名 [不明の]
gpg:                 別名&amp;#34;Matt Caswell &amp;lt;frodo@baggins.org&amp;gt;&amp;#34; [不明の]
gpg: *警告*: この鍵は信用できる署名で証明されていません!
gpg:          この署名が所有者のものかどうかの検証手段がありません。
主鍵フィンガープリント: 8657 ABB2 60F0 56B1 E519  0839 D9C4 D26D 0E60 4491
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;openssl-1.1.1g.tar.gz.asc&lt;/code&gt; ファイルは &lt;code&gt;openssl-1.1.1g.tar.gz&lt;/code&gt; ファイルに対する &lt;a href=&#34;https://www.openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 電子署名ファイルで，上述の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; コマンドで検証できる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;ダウンロードしたファイルの検証は必ず行うこと。
検証用の公開鍵がない場合には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --recv-keys 0xD9C4D26D0E604491
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で鍵サーバからインポートできる。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; 最新版をビルド&amp;amp;インストールする&lt;/h2&gt;
&lt;p&gt;では，インストールの続きを。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ pwd
/usr/local/src

$ sudo tar xvf openssl-1.1.1g.tar.gz 
$ cd openssl-1.1.1g/
$ sudo ./config
$ sudo make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; コマンドが始まると長いため，あらかじめお茶菓子を用意しておきましょう（笑）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; により各ファイル（マニュアル以外）は以下のディレクトリに配置される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/usr/local/bin/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;openssl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/local/lib/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libcrypto.so.1.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libssl.so.1.1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/local/ssl/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;openssl.cnf&lt;/code&gt; 等&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ldconfig を忘れずに&lt;/h2&gt;
&lt;p&gt;ほんじゃあ動かしてみよっか。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ which openssl
/usr/local/bin/openssl

$ ldd /usr/local/bin/openssl
	linux-vdso.so.1 (0x00007ffcb01b7000)
	libssl.so.1.1 =&amp;gt; /usr/lib/x86_64-linux-gnu/libssl.so.1.1 (0x00007f1d88d55000)
	libcrypto.so.1.1 =&amp;gt; /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 (0x00007f1d88a7f000)
	libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f1d88a5c000)
	libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f1d8886a000)
	libdl.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f1d88864000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f1d88ec6000)

$ openssl version
openssl: symbol lookup error: openssl: undefined symbol: EVP_mdc2, version OPENSSL_1_1_0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;おっと。
&lt;code&gt;libssl.so.1.1&lt;/code&gt; と &lt;code&gt;libcrypto.so.1.1&lt;/code&gt; のリンク情報が古いままだったね。
ちうわけで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo ldconfig

$ ldd /usr/local/bin/openssl
	linux-vdso.so.1 (0x00007fff9e6f0000)
&lt;span class=&#34;hl&#34;&gt;	libssl.so.1.1 =&amp;gt; /usr/local/lib/libssl.so.1.1 (0x00007fcbf44ab000)
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;	libcrypto.so.1.1 =&amp;gt; /usr/local/lib/libcrypto.so.1.1 (0x00007fcbf41c1000)
&lt;/span&gt;	libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fcbf419e000)
	libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fcbf3fac000)
	libdl.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fcbf3fa6000)
	/lib64/ld-linux-x86-64.so.2 (0x00007fcbf4620000)

$ openssl version
OpenSSL 1.1.1g  21 Apr 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ldconfig&lt;/code&gt; コマンドでキャッシュを更新するのを忘れずに&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;（笑）
これで &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; も&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ssh -V
OpenSSH_8.2p1 Ubuntu-4ubuntu0.1, OpenSSL 1.1.1g  21 Apr 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と新しい方の &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; を見てくれる。&lt;/p&gt;
&lt;p&gt;ちなみにオリジナルの &lt;code&gt;/usr/bin/openssl&lt;/code&gt; はそのまま残ってて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ /usr/bin/openssl version
OpenSSL 1.1.1f  31 Mar 2020 (Library: OpenSSL 1.1.1g  21 Apr 2020)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じになる。
APT で &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; を更新する場合は注意すること。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.trusted-design.net/archives/933/&#34;&gt;UbuntuでOpenSSLを最新バージョンにする | Trusted Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kaworu.jpn.org/security/OpenSSL%E3%81%8C_error_while_loading_shared_libraries_libssl.so.1.1&#34;&gt;OpenSSLが error while loading shared libraries libssl.so.1.1 - セキュリティ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- eof --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;インポートした公開鍵を有効化してないと署名検証時に「この鍵は信用できる署名で証明されていません」と表示される。まぁ，有効化しなくても検証自体はできるけど。 &lt;a href=&#34;https://www.openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 鍵の操作については拙文「&lt;a href=&#34;https://text.baldanders.info/openpgp/gnupg-cheat-sheet/&#34;&gt;GnuPG チートシート（鍵作成から失効まで）&lt;/a&gt;」を参考にどうぞ。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;既定では &lt;code&gt;openssl.cnf&lt;/code&gt; ファイルは &lt;code&gt;/etc/ssl/&lt;/code&gt; ディレクトリに置かれているものを読む。環境変数 &lt;code&gt;OPENSSL_CONF&lt;/code&gt; で変更することも可能。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;万が一 &lt;code&gt;ldconfig&lt;/code&gt; で新しいファイルに切り替わらない場合は &lt;code&gt;/etc/ld.so.conf.d/&lt;/code&gt; ディレクトリにある &lt;code&gt;*.conf&lt;/code&gt; ファイルをチェックして &lt;code&gt;/usr/local/lib/&lt;/code&gt; ディレクトリもキャッシュの対象に含めるよう設定する。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>ついカッとなって機種変した，反省はしない</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/05/changing-smartphone/" />
		<id>tag:text.Baldanders.info,2020-05-15:/remark/2020/05/changing-smartphone/</id>
		<published>2020-05-14T15:02:50+00:00</published>
		<updated>2020-05-14T15:27:19+00:00</updated>
		<summary>もはやスマホにこれ以上パラダイム・シフトの夢を見ることはないし，スペックも最小限で無問題。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://baldanders.info/blog/000852/&#34; title=&#34;HTC J butterfly HTV31（もしくは最近のスマホ？）がなかなか酷い&#34;&gt;5年前に買ったスマートフォン&lt;/a&gt;なのだが，相変わらず&lt;a href=&#34;https://text.baldanders.info/remark/2016/10/new-phone/&#34; title=&#34;電話機を交換してもらったのですよ&#34;&gt;バッテリ周りが酷くて&lt;/a&gt;今のが3台目だったのですよ。
その3台目も2年と経たずにイカれてしまい（勝手に強制リブートを繰り返すようになった）ついカッとなって機種変更した。
失業して銭のないときになんちう迷惑な。&lt;/p&gt;
&lt;p&gt;近所（田舎の近所なので察してください）の au ショップに駆け込んで「テザリングが使えるいっちゃん安い機種を」と言ったら &lt;a href=&#34;https://www.galaxymobile.jp/galaxy-a20/&#34; title=&#34;Galaxy A20（ギャラクシーA20）- Galaxy公式（日本）&#34;&gt;Galaxy A20&lt;/a&gt; を勧められた。
端末代が税込で 33,000JPY とのことで即金で買いましたよ。
もはやスマホにこれ以上パラダイム・シフトの夢を見ることはないし，スマホでゲームはしないからスペックも最小限で無問題だよね。&lt;/p&gt;
&lt;h2&gt;2要素認証するならリカバリ・コードは控えておくこと&lt;/h2&gt;
&lt;p&gt;今までの反省から，旧端末から認証情報やデータを移行できない可能性を考慮して準備しておいたのは助かった。&lt;/p&gt;
&lt;p&gt;特に2要素認証&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; の2要素目で TOTP を使っている場合は認証不能になる場合があるので，サービス側が発行するリカバリ・コードを必ずダウンロードして控えておくこと。
なんなら紙に印刷して厳重にしまっておけば確実だろう。&lt;/p&gt;
&lt;p&gt;言い換えると2要素認証を推奨しているのにリカバリ・コードの提供すらしないサービスはダメなサービスだと断言していいだろう。
まぁ SMS に一時パスワードを垂れ流して「&lt;strong&gt;2段階&lt;/strong&gt; 認証だから安全」とか言ってくさるサービスとかあるけどな（笑）&lt;/p&gt;
&lt;p&gt;最近流行りの認証デバイスを使えばそんな面倒もないんだろうけど，個人的には紛失・盗難リスクが怖くてノートパソコンや携帯端末に認証デバイスを使う気にならないんだよねぇ。&lt;/p&gt;
&lt;h2 id=&#34;first&#34;&gt;最初にすること&lt;/h2&gt;
&lt;p&gt;まずは OS のアップデートを行うこと。
最近の端末は最初からストレージの暗号化がされてるんだね。
よーし，うむうむ，よーし。&lt;/p&gt;
&lt;p&gt;で，アプリのアップデートを行う前に既定で入ってるアプリで使わないものは削除する。
中には削除できないものもあるが，そういうのは，アップデート前であれば，見分けがつくので最初にやってしまおうってわけ。&lt;/p&gt;
&lt;p&gt;なんで LINE や Facebook や Twitter のアプリが最初から意味もなく入ってるんだろうねぇ。
ぜんぶ削除ですよ。
あと端末メーカー製やキャリア製のアプリで明らかに使わないものは可能な限り削除する。
ついでに Google 製の不要アプリもザクザク削除。&lt;/p&gt;
&lt;p&gt;これで，すっきり！&lt;/p&gt;
&lt;h2 id=&#34;misc&#34;&gt;雑多な作業&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&#34;#first&#34;&gt;最初にすること&lt;/a&gt;」が終わったらパスワード管理アプリを入れる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=keepass2android.keepass2android&#34;&gt;Keepass2Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私の場合，データベースファイルをクラウド・ストレージに置いているので，クラウド・ストレージにアクセスするアプリも併せて導入する。
暗号鍵は USB で PC に直結して端末にコピってしまう。
暗号鍵とパスワードでデータベースファイルを二重にロックしておけば大丈夫だろう。&lt;/p&gt;
&lt;p&gt;その後&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.skyjos.apps.fileexplorer&#34;&gt;File Explorer Pro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を導入して LAN 上の NAS に入れるよう設定すれば一段落。&lt;/p&gt;
&lt;p&gt;他にセキュリティ関連アプリとして&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&#34;&gt;Google 認証システム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.fsecure.freedome.vpn.security.privacy.android&#34;&gt;FREEDOME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.thoughtcrime.securesms&#34;&gt;Signal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を導入してセットアップする。
&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.thoughtcrime.securesms&#34;&gt;Signal&lt;/a&gt; は既定の SMS アプリとしても設定できるので置き換える。&lt;/p&gt;
&lt;p&gt;ブラウザは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.mozilla.focus&#34;&gt;Firefox Focus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.mozilla.firefox&#34;&gt;Firefox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を導入し &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.mozilla.focus&#34;&gt;Firefox Focus&lt;/a&gt; の方を既定のブラウザにする。
&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.mozilla.firefox&#34;&gt;Firefox&lt;/a&gt; は予備系とし Chrome や他のブラウザは使わないようにする。
もちろん検索サービスにはどちらも &lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt; を指定する。&lt;/p&gt;
&lt;p&gt;Input method は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.inputmethod.latin&#34;&gt;Gboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で無問題。
ていうか，これ以外使いたくない。&lt;/p&gt;
&lt;p&gt;あとは好みで&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.devhd.feedly&#34;&gt;Feedly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.ideashower.readitlater.pro&#34;&gt;Pocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.Slack&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.trello&#34;&gt;Trello&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.flickr.android&#34;&gt;Flickr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=uk.co.nickfines.RealCalcPlus&#34;&gt;RealCalc Plus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.automattic.simplenote&#34;&gt;Simplenote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.deskclock&#34;&gt;時計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.calendar&#34;&gt;Googleカレンダー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.flavionet.android.camera.pro&#34;&gt;Camera FV-5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=jwa.or.jp.tenkijp3&#34;&gt;tenki.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あたりを順次入れていく。
&lt;a href=&#34;https://baldanders.info/blog/000852/&#34; title=&#34;HTC J butterfly HTV31（もしくは最近のスマホ？）がなかなか酷い&#34;&gt;5年前&lt;/a&gt;に比べればだいぶ顔ぶれが変わったなぁ。&lt;/p&gt;
&lt;h2 id=&#34;launcher&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.microsoft.launcher&#34; title=&#34;Microsoft Launcher - Google Play&#34;&gt;Microsoft Launcher&lt;/a&gt; を導入してみた&lt;/h2&gt;
&lt;p&gt;各端末メーカーが既定で入れてるランチャってなんであんなにダサいのかね。
いや，デザイン・センス皆無の私に言われたくないだろうけど。&lt;/p&gt;
&lt;p&gt;今までは「どうせすぐ壊れるから」と手を付けなかったんだけど，今回は試しに &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.microsoft.launcher&#34; title=&#34;Microsoft Launcher - Google Play&#34;&gt;Microsoft Launcher&lt;/a&gt; を導入してみた。
セットアップ時に Microsoft account を要求するのだが，大昔に登録したのがまだ有効だったようで，問題なく行けた。
位置情報も要求されるが，許可しなくても無問題（もしくは後から許可を取り消せる）。&lt;/p&gt;
&lt;p&gt;ちなみに検索バーと連携する検索サービスに &lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt; を指定できる。
使わんけどね。&lt;/p&gt;
&lt;h2 id=&#34;drill&#34;&gt;「&lt;a href=&#34;https://www.google.com/android/find&#34;&gt;デバイスを探す&lt;/a&gt;」で避難訓練&lt;/h2&gt;
&lt;p&gt;ひととおり設定が終わったら「&lt;a href=&#34;https://www.google.com/android/find&#34;&gt;デバイスを探す&lt;/a&gt;」で一度は避難訓練をしておくとよいだろう。
携帯端末の捜索についてはキャリアも端末メーカーもサービスを提供しているが，キャリアはともかく，端末メーカーのサービスは無用である。&lt;/p&gt;
&lt;p&gt;「&lt;a href=&#34;https://www.google.com/android/find&#34;&gt;デバイスを探す&lt;/a&gt;」では検索対象の携帯端末に対して「音を鳴らす」「デバイスのロック」「データの消去」といった操作ができる。
「音を鳴らす」と「デバイスのロック」については一度は試してみることをお勧めする。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.adm&#34;&gt;端末を探す&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- eof --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;今だに「2段階認証」とかぬかす馬鹿メディアがあるみたいだが「2段階」では不十分だから「2要素」が要求されるのだ，ということを分かっているのだろうか。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Ubuntu 20.04 にアップグレードする</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/04/upgrade-ubuntu-20_04/" />
		<id>tag:text.Baldanders.info,2020-04-26:/release/2020/04/upgrade-ubuntu-20_04/</id>
		<published>2020-04-26T07:58:37+00:00</published>
		<updated>2020-11-23T02:03:41+00:00</updated>
		<summary>よーやく GnuPG/Libgcrypt のバージョンが上がったよ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 20.04 がリリースされた。
20.04 は長期サポート版で2025年4月までサポートが有効である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ubuntu.com/blog/ubuntu-20-04-lts-arrives&#34;&gt;Ubuntu 20.04 LTS arrives | Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.ubuntu.com/FocalFossa/ReleaseNotes&#34;&gt;FocalFossa/ReleaseNotes - Ubuntu Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;19.10 または長期サポート版の 18.04 から 20.04 へのアップグレードは&lt;a href=&#34;https://wiki.ubuntu.com/FocalFossa/ReleaseNotes&#34; title=&#34;FocalFossa/ReleaseNotes - Ubuntu Wiki&#34;&gt;リリースノート&lt;/a&gt;を参考にするとよい。
基本的には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ update-manager -c -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とアップグレード・モードで GUI を起動すれば，あとはよろしくやってくれる。
ただし 20.04 では32bitアーキテクチャをサポートしなくなったので，この場合は 18.04 からアップグレードしてはいけない&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;なお，アップグレード時にサードパーティの APT リポジトリ（&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-git-from-ppa/&#34; title=&#34;PPA から Git をインストールする&#34;&gt;git&lt;/a&gt; や &lt;a href=&#34;https://flight-manual.atom.io/getting-started/sections/installing-atom/&#34; title=&#34;Installing Atom&#34;&gt;ATOM&lt;/a&gt; など）が外れるので，必要ならアップグレード時に戻して更新すること。&lt;/p&gt;
&lt;h2&gt;個別のアプリケーションについて&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; および &lt;a href=&#34;https://gnupg.org/software/libgcrypt/&#34;&gt;Libgcrypt&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;よーやく &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt;/&lt;a href=&#34;https://gnupg.org/software/libgcrypt/&#34;&gt;Libgcrypt&lt;/a&gt; のバージョンが上がったよ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.2.19
libgcrypt 1.8.5
Copyright (C) 2019 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: /home/username/.gnupg
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,
      TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まぁ，現時点での&lt;a href=&#34;https://text.baldanders.info/release/2020/03/gnupg-2_2_20-is-released/&#34; title=&#34;GnuPG 2.2.20 がリリースされた&#34;&gt;最新版は 2.2.20&lt;/a&gt; だけどね。
ちなみに &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2.17 から SHA-1 電子署名の扱いが変わったのでご注意を。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2019/07/gnupg-2_2_17-is-released/&#34;&gt;GnuPG 2.2.17 リリース： 公開鍵サーバ・アクセスに関する過激な変更あり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2019/11/gnupg-2_2_18-is-released/&#34;&gt;GnuPG 2.2.18 リリース： さようなら SHA-1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; および &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;アップグレード直後の &lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; および &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; のバージョンは以下のとおりだった。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ ssh -V
OpenSSH_8.2p1 Ubuntu-4, OpenSSL 1.1.1f  31 Mar 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.openssh.com/&#34;&gt;OpenSSH&lt;/a&gt; は &lt;a href=&#34;https://www.openssh.com/txt/release-8.2&#34;&gt;2020-02-14 にリリースされた最新版&lt;/a&gt;が入っているようだ。
ただ &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; はこの前セキュリティ・アップデートがあったばかりなんだよねぇ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/alert20200423.html&#34;&gt;OpenSSL の脆弱性対策について(CVE-2020-1967) ：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2020/at200018.html&#34;&gt;OpenSSL の脆弱性 (CVE-2020-1967) に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁ，間に合わなかったんだろうけど。
&lt;a href=&#34;https://access.redhat.com/security/cve/CVE-2020-1967&#34;&gt;CVSSv3 のスコアが 7.5&lt;/a&gt; で深刻度が高いので早めの対応をお願いしたい。&lt;/p&gt;
&lt;h3&gt;保留されているパッケージ&lt;/h3&gt;
&lt;p&gt;アップグレード後に &lt;code&gt;libc++1&lt;/code&gt; が保留状態で残っていた。
保留状態のパッケージがある場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt full-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で保留分をまとめてアップグレードするか，個別に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install libc++1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとすればいいようだ。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; が消えとるがな&lt;/h3&gt;
&lt;p&gt;アップグレードしたら何故か &lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; が削除されてた &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;しょうがないので&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install build-essential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;したですよ。
&lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; のコンパイル・リンクも問題なく動くみたいだし，いっかな&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; は 9.3 が導入される。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; も削除される&lt;/h3&gt;
&lt;p&gt;サードパーティ・リポジトリから &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; をインストールしている場合，アップグレード時に APT のリストからリポジトリが外されるだけだが，今回の 20.04 へのアップグレードでは &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; 自体がまるっと削除される。&lt;/p&gt;
&lt;p&gt;ただし設定やパッケージはそのまま残っているので，リポジトリ設定を戻して &lt;code&gt;apt install&lt;/code&gt; し直せばおっけ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flight-manual.atom.io/getting-started/sections/installing-atom/&#34;&gt;Installing Atom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&#34;https://wiki.gnome.org/Apps/Lollypop?action=show&#34; title=&#34;Apps/Lollypop - GNOME Wiki!&#34;&gt;Lollypop&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;どうやら &lt;a href=&#34;https://wiki.gnome.org/Apps/Lollypop?action=show&#34; title=&#34;Apps/Lollypop - GNOME Wiki!&#34;&gt;Lollypop&lt;/a&gt; は標準の APT リポジトリに入ったらしい。
いつからだ？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apt show lollypop
Package: lollypop
Version: 1.2.35-1
Priority: optional
Section: universe/gnome
Origin: Ubuntu
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ちうわけで，もう &lt;a href=&#34;https://launchpad.net/~gnumdk/+archive/ubuntu/lollypop&#34; title=&#34;Lollypop : Cédric Bellegarde&#34;&gt;PPA リポジトリ&lt;/a&gt;を使わなくともよさそうである，多分。&lt;/p&gt;
&lt;h3&gt;【追記 2020-04-28】 Libsecret のアップデート&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; credential helper である GNOME/libsecret もバージョンが上がっているようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apt show libsecret-1-dev
Package: libsecret-1-dev
Version: 0.20.2-1
Priority: optional
Section: libdevel
Source: libsecret
Origin: Ubuntu
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;GNOME/libsecret は &lt;code&gt;apt upgrade&lt;/code&gt; しただけではダメで，手動でビルドする必要がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ mkdir ~/work
$ cd ~/work
$ cp -r /usr/share/doc/git/contrib/credential/libsecret .
$ cd libsecret
$ make
gcc -g -O2 -Wall  -pthread -I/usr/include/libsecret-1 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-libsecret.o -c git-credential-libsecret.c
gcc -o git-credential-libsecret  git-credential-libsecret.o -lsecret-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで生成した &lt;code&gt;git-credential-libsecret&lt;/code&gt; を &lt;code&gt;$PATH&lt;/code&gt; の通ったディレクトリに放り込んでおけばよい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-git-from-ppa/&#34;&gt;PPA から Git をインストールする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;【2020-05-15 追記】 日本語 Remix のリリースと Bootable USB メモリの作成&lt;/h2&gt;
&lt;p&gt;Japanese Team による &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 20.04 LTS 日本語 Remix がリリースされた。
感謝！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ubuntulinux.jp/News/ubuntu2004-ja-remix&#34;&gt;Ubuntu 20.04 LTS 日本語 Remix リリース | Ubuntu Japanese Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Japanese Team による追加パッケージのリポジトリを導入するには以下の手順を実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ wget -q https://www.ubuntulinux.jp/ubuntu-ja-archive-keyring.gpg -O- | sudo apt-key add -
$ wget -q https://www.ubuntulinux.jp/ubuntu-jp-ppa-keyring.gpg -O- | sudo apt-key add -
$ sudo wget https://www.ubuntulinux.jp/sources.list.d/focal.list -O /etc/apt/sources.list.d/ubuntu-ja.list
$ sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また ISO イメージ・ファイルも公開されているのでこれを使って bootable USB メモリを作成しておく。
詳しくは以下の拙文を参考にどうぞ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/bootable-usb/&#34;&gt;Ubuntu インストール用のブート可能 USB メモリを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-23-ubuntu-2004-lts.html&#34;&gt;Ubuntu 20.04 その23 - Ubuntu 20.04 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-24-ubuntu-2004-lts.html&#34;&gt;Ubuntu 20.04 その24 - Ubuntu 20.04 LTSの新機能と変更点 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-25-ubuntu-2004-lts.html&#34;&gt;Ubuntu 20.04 その25 - Ubuntu 20.04 LTSの既知の問題 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-26-ubuntu-20041-ltsubuntu.html&#34;&gt;Ubuntu 20.04 その26 - Ubuntu 20.04.1 LTSのリリーススケジュール・Ubuntu 18.04 LTSユーザーにアップグレードパスの提供 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-27-qt-5142qt-5128.html&#34;&gt;Ubuntu 20.04 その27 - Qt 5.14.2の採用見送りとQt 5.12.8の採用 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-28-ubuntu-desktop.html&#34;&gt;Ubuntu 20.04 その28 - Ubuntu Desktopの新機能と魅力・様々な新機能と改良点の紹介 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/04/ubuntu-2004-29-linux-kernel-54.html&#34;&gt;Ubuntu 20.04 その29 - Linux kernel 5.4の新機能 - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxfan.info/ubuntu-20-04-install-guide&#34;&gt;Ubuntu 20.04 LTSインストールガイド【スクリーンショットつき解説】 | LFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/mmns/items/eaf42dd3345a2285ff9e&#34;&gt;(今はまだ)WSL1にUbuntu 20.04を入れるな - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kledgeb.blogspot.com/2020/05/ubuntu-2004-48-ubuntu-2004-lts-remix.html&#34;&gt;Ubuntu 20.04 その48 - Ubuntu 20.04 LTS 日本語 Remixがリリースされました・ディスクイメージのダウンロード - kledgeb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/317fsDSqG8L._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;シリコンパワー USBメモリ 32GB USB3.1 / USB3.0 亜鉛合金ボディ 防水 防塵 耐衝撃 永久保証 PS4動作確認済 Jewel J80 SP032GBUF3J80V1TJA&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;シリコンパワー (Release 2017-02-01)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B01NBU1OS5 (ASIN), 4712702655292 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;OS 移行用に購入。ひたすらデザインで決めた（笑） よく考えたら32GBも要らなかった。まぁ，何か使い道があるだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-04-21&#34;&gt;2019-04-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- シリコンパワー USBメモリ 32GB USB3.1 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 18.04 のサポート期間は2023年4月まで。 18.04 サポート満了を以って32bit版 &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; のサポートは終了する。ので，早めに64bitアーキテクチャへのリプレースを検討しませう。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; も APT で導入できるようだが，バージョンが古いので，最新版が必要なら &lt;a href=&#34;https://text.baldanders.info/rust-lang/hello/&#34; title=&#34;みんな大好き Hello World&#34;&gt;APT は使わない&lt;/a&gt;ほうがよい。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>TeX Live 2020 へのアップグレード</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/04/upgrade-texlive-2020/" />
		<id>tag:text.Baldanders.info,2020-04-16:/remark/2020/04/upgrade-texlive-2020/</id>
		<published>2020-04-16T05:33:22+00:00</published>
		<updated>2020-04-16T08:00:10+00:00</updated>
		<summary>手元の環境では973個ほど更新されたよ…</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;どうやら &lt;a href=&#34;http://www.tug.org/texlive/&#34; title=&#34;TeX Live - TeX Users Group&#34;&gt;TeX Live&lt;/a&gt; 2020 がリリースされたようだ。
今年は早かったな（笑）&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;TeX Live 2020 is &lt;a href=&#34;http://www.tug.org/texlive/acquire.html&#34;&gt;available over the Internet&lt;/a&gt; and (after production) &lt;a href=&#34;http://www.tug.org/texlive/acquire-dvd.html&#34;&gt;on DVD&lt;/a&gt;. It was released on 10 April 2020, and &lt;a href=&#34;http://www.tug.org/texlive/pkginstall.html&#34;&gt;ongoing updates are available&lt;/a&gt;&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;div&gt;via &lt;q&gt;&lt;a href=&#34;http://www.tug.org/texlive/&#34;&gt;TeX Live - TeX Users Group&lt;/a&gt;&lt;/q&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ちうわけで，今年も &lt;a href=&#34;http://www.tug.org/texlive/&#34; title=&#34;TeX Live - TeX Users Group&#34;&gt;TeX Live&lt;/a&gt; のアップグレードを行おう。
あっ，念のために言うと，今回のアップグレードは APT を使わず &lt;code&gt;install-tl&lt;/code&gt; でインストールされていることが前提ね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-texlive-in-ubuntu/&#34;&gt;TeX Live を Ubuntu に（APT を使わずに）導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;前準備&lt;/h2&gt;
&lt;p&gt;まず &lt;code&gt;tlmgr path add&lt;/code&gt; コマンドでパス設定をしている場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo tlmgr path remove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で設定を消しておく。&lt;/p&gt;
&lt;p&gt;次に 2019 の環境を 2020 へコピーする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/texlive
$ sudo cp -a 2019 2020
$ sudo rm 2020/tlpkg/backups/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;update-tlmgr&lt;/code&gt; を使ってアップグレードを行う際に権限のコントロールが上手くないみたいなので &lt;code&gt;2020/&lt;/code&gt; フォルダ以下のオーナーを一時的に自ユーザに書き換えておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo chown -R username:username 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;~/.texlive2019/&lt;/code&gt; ディレクトリも &lt;code&gt;~/.texlive2020/&lt;/code&gt; にコピっとけばいいかな。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd ~
$ cp -a .texlive2019 .texlive2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後に環境変数 &lt;code&gt;PATH&lt;/code&gt; や &lt;code&gt;MANPATH&lt;/code&gt; 等を設定している場合はその設定を変更しておく。
たとえば  &lt;code&gt;/etc/profile.d/&lt;/code&gt; ディレクトリに以下の内容を書いたファイル &lt;code&gt;texlive-paths.sh&lt;/code&gt; を置いている場合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# shellcheck shell=sh&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Expand $PATH to include the directory where TeX Live applications go.&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;texlive_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/texlive/2019&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;texlive_bin_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/bin/x86_64-linux&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_bin_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -a -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_bin_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MANPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;MANPATH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/texmf-dist/doc/man
    &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;INFOPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;INFOPATH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/texmf-dist/doc/info
    &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_bin_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;2019&lt;/code&gt; の部分を &lt;code&gt;2020&lt;/code&gt; に置き換える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# shellcheck shell=sh&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Expand $PATH to include the directory where TeX Live applications go.&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;texlive_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/texlive/2020&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_bin_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/bin/x86_64-linux&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_bin_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -a -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_bin_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:*&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MANPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;MANPATH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/texmf-dist/doc/man
    &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;INFOPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;INFOPATH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/texmf-dist/doc/info
    &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;:&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;texlive_bin_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;2020年版へのアップグレード&lt;/h2&gt;
&lt;p&gt;ほいじゃまぁ，アップグレードしますかね。
まずは &lt;code&gt;update-tlmgr&lt;/code&gt; による &lt;code&gt;tlmgr&lt;/code&gt; のアップグレードから。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/texlive/2020
$ wget http://mirror.ctan.org/systems/texlive/tlnet/update-tlmgr-latest.sh
$ sh update-tlmgr-latest.sh -- --upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;tlmgr&lt;/code&gt; の動作確認をしておこう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ tlmgr version
tlmgr revision 54446 (2020-03-21 17:45:22 +0100)
tlmgr using installation: /usr/local/texlive/2020
TeX Live (https://tug.org/texlive) version 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よしよし。&lt;/p&gt;
&lt;p&gt;次はアップグレードした &lt;code&gt;tlmgr&lt;/code&gt; でアップデートを行う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet
tlmgr: setting default package repository to http://mirror.ctan.org/systems/texlive/tlnet
tlmgr: updating /usr/local/texlive/2020/tlpkg/texlive.tlpdb

$ tlmgr update --self --all
tlmgr: package repository http://ftp.yz.yamagata-u.ac.jp/pub/CTAN/systems/texlive/tlnet (verified)
tlmgr: saving backups to /usr/local/texlive/2020/tlpkg/backups
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;さて，お茶の時間にするか。&lt;/p&gt;
&lt;p&gt;&amp;hellip;手元の環境では973個ほど更新されたよ&amp;hellip;&lt;/p&gt;
&lt;p&gt;$\mathrm{Lua\TeX}$ を使う場合はフォントキャッシュのアップデートも忘れずに。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ luaotfload-tool -fu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後に &lt;code&gt;/usr/local/texlive/2020&lt;/code&gt; ディレクトリ以下のオーナーを &lt;code&gt;root&lt;/code&gt; に戻す。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/texlive
$ sudo chown -R root:root 2020
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更にパス設定（&lt;code&gt;/usr/local/bin/&lt;/code&gt; 等へシンボリック・リンクを張る）を行うなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo /usr/local/texlive/2020/bin/x86_64-linux/tlmgr path add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とする。&lt;/p&gt;
&lt;h2&gt;動作確認&lt;/h2&gt;
&lt;p&gt;ちょろんと動作確認しておこう。
$\mathrm{Lua\LaTeX}$ でね。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ lualatex -v
&lt;span class=&#34;hl&#34;&gt;This is LuaHBTeX, Version 1.12.0 (TeX Live 2020)
&lt;/span&gt;
Execute  &amp;#39;luahbtex --credits&amp;#39;  for credits and version details.

There is NO warranty. Redistribution of this software is covered by
the terms of the GNU General Public License, version 2 or (at your option)
any later version. For more information about these matters, see the file
named COPYING and the LuaTeX source.

LuaTeX is Copyright 2020 Taco Hoekwater and the LuaTeX Team.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;うお！ $\mathrm{LuaHB\TeX}$ ベースになってる。
どうやら $\mathrm{Lua\LaTeX}$ では $\mathrm{LuaHB\TeX}$ ベースになる模様。
$\mathrm{Lua\TeX}$ 自体はあるようで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ luatex -v
&lt;span class=&#34;hl&#34;&gt;This is LuaTeX, Version 1.12.0 (TeX Live 2020)
&lt;/span&gt;
Execute  &amp;#39;luatex --credits&amp;#39;  for credits and version details.

There is NO warranty. Redistribution of this software is covered by
the terms of the GNU General Public License, version 2 or (at your option)
any later version. For more information about these matters, see the file
named COPYING and the LuaTeX source.

LuaTeX is Copyright 2020 Taco Hoekwater and the LuaTeX Team.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;となる。&lt;/p&gt;
&lt;p&gt;以下のタイプセットも試してみるか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/10/writing-code-with-lualatex/&#34;&gt;LuaLaTeX でコードを書いてみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結果はこんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./sample.tex&#34;&gt;&lt;img src=&#34;./sample.jpg&#34; srcset=&#34;./sample.jpg 1183w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.preining.info/blog/2020/04/tex-live-2020-released/&#34;&gt;TeX Live 2020 released | There and back again&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trueroad/HaranoAjiFonts&#34;&gt;trueroad/HaranoAjiFonts: 原ノ味フォント&lt;/a&gt; : &lt;a href=&#34;http://www.tug.org/texlive/&#34; title=&#34;TeX Live - TeX Users Group&#34;&gt;TeX Live&lt;/a&gt; 2020 に組み込まれたそうな&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4774187054?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51E5K7B53aL._SL160_.jpg&#34; width=&#34;127&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4774187054?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;[改訂第7版]LaTeX2ε美文書作成入門&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;奥村 晴彦 (著), 黒木 裕介 (著)&lt;/dd&gt;
    &lt;dd&gt;技術評論社 2017-01-24&lt;/dd&gt;
    &lt;dd&gt;大型本&lt;/dd&gt;
    &lt;dd&gt;4774187054 (ASIN), 9784774187051 (EAN), 4774187054 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-09-27&#34;&gt;2017-09-27&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- [改訂第7版]LaTeX2ε美文書作成入門 --&gt;
</content>
	</entry><entry>
		<title>みんな大好き Hello World</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/rust-lang/hello/" />
		<id>tag:text.Baldanders.info,2020-02-26:/rust-lang/hello/</id>
		<published>2020-02-25T15:00:15+00:00</published>
		<updated>2020-02-26T11:36:30+00:00</updated>
		<summary>というわけで， Rust の勉強を始めることにしました。ゆっくりのんびりとね。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/02/hello-rust-world/&#34; title=&#34;Rust 勉強会，面白かった！&#34;&gt;というわけで&lt;/a&gt;， &lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; の勉強を始めることにしました。
どぞよろしく。
まぁ，仕事じゃないので，ゆっくりのんびりとね。&lt;/p&gt;
&lt;p&gt;余談だが，英語不得手な私は “&lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt;” を「ルスト」と読んでいた。
マジンガーZ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; か！&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; ツールチェーンのインストール&lt;/h2&gt;
&lt;p&gt;まずは &lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; ツールチェーンのインストールから。&lt;/p&gt;
&lt;p&gt;インストールの方法は&lt;a href=&#34;https://forge.rust-lang.org/infra/other-installation-methods.html&#34; title=&#34;Other Installation Methods - Rust Forge&#34;&gt;いくつかある&lt;/a&gt;が， &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 等の Linux プラットフォームであれば &lt;code&gt;rustup-init.sh&lt;/code&gt; をダウンロードして実行するのが手っ取り早い。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ curl https://sh.rustup.rs -sSf | sh
info: downloading installer

Welcome to Rust!

This will download and install the official compiler for the Rust
programming language, and its package manager, Cargo.

It will add the cargo, rustc, rustup and other commands to
Cargo&amp;#39;s bin directory, located at:

  /home/username/.cargo/bin

This can be modified with the CARGO_HOME environment variable.

Rustup metadata and toolchains will be installed into the Rustup
home directory, located at:

  /home/username/.rustup

This can be modified with the RUSTUP_HOME environment variable.

This path will then be added to your PATH environment variable by
modifying the profile file located at:

  /home/username/.profile

You can uninstall at any time with rustup self uninstall and
these changes will be reverted.

Current installation options:


   default host triple: x86_64-unknown-linux-gnu
     default toolchain: stable
               profile: default
  modify PATH variable: yes

1) Proceed with installation (default)
2) Customize installation
3) Cancel installation
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここで 1 を選択する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;info: profile set to &amp;#39;default&amp;#39;
info: default host triple is x86_64-unknown-linux-gnu
info: syncing channel updates for &amp;#39;stable-x86_64-unknown-linux-gnu&amp;#39;
info: latest update on 2020-01-30, rust version 1.41.0 (5e1a79984 2020-01-27)
info: downloading component &amp;#39;cargo&amp;#39;
info: downloading component &amp;#39;clippy&amp;#39;
info: downloading component &amp;#39;rust-docs&amp;#39;
 12.0 MiB /  12.0 MiB (100 %)   5.7 MiB/s in  2s ETA:  0s
info: downloading component &amp;#39;rust-std&amp;#39;
 17.5 MiB /  17.5 MiB (100 %)   7.2 MiB/s in  2s ETA:  0s
info: downloading component &amp;#39;rustc&amp;#39;
 57.9 MiB /  57.9 MiB (100 %)   6.5 MiB/s in  9s ETA:  0s
info: downloading component &amp;#39;rustfmt&amp;#39;
info: installing component &amp;#39;cargo&amp;#39;
info: installing component &amp;#39;clippy&amp;#39;
info: installing component &amp;#39;rust-docs&amp;#39;
 12.0 MiB /  12.0 MiB (100 %)  10.0 MiB/s in  1s ETA:  0s
info: installing component &amp;#39;rust-std&amp;#39;
info: installing component &amp;#39;rustc&amp;#39;
 57.9 MiB /  57.9 MiB (100 %)  11.6 MiB/s in  5s ETA:  0s
info: installing component &amp;#39;rustfmt&amp;#39;
info: default toolchain set to &amp;#39;stable&amp;#39;

  stable installed - rustc 1.41.0 (5e1a79984 2020-01-27)


Rust is installed now. Great!

To get started you need Cargo&amp;#39;s bin directory ($HOME/.cargo/bin) in your PATH
environment variable. Next time you log in this will be done
automatically.

To configure your current shell run source $HOME/.cargo/env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; のツールチェーン一式が &lt;code&gt;~/.cargo/&lt;/code&gt; および &lt;code&gt;~/.rustup/&lt;/code&gt; ディレクトリ以下にインストールされた。
いや，どうせなら &lt;a href=&#34;https://standards.freedesktop.org/basedir-spec/latest/&#34; title=&#34;XDG Base Directory Specification&#34;&gt;XDG Base Directory&lt;/a&gt; に対応してくれよ &lt;code&gt;orz&lt;/code&gt; &amp;hellip;まぁいいや。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;~/.profile&lt;/code&gt; ファイルの末尾に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.cargo/bin:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と追記されるが，私の好みで以下のように書き換えた。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# set PATH so it includes user&amp;#39;s private bin if it exists&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.cargo/bin&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.cargo/bin&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; ツールチェーンのうち主なコマンドを以下に挙げる。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド名&lt;/th&gt;
&lt;th&gt;機能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ツールチェーンの導入および更新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rustc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;コンパイラ本体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rustfmt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ソースコードのフォーマット&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;パッケージ管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rust Language Server&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ rustup update
info: syncing channel updates for &amp;#39;stable-x86_64-unknown-linux-gnu&amp;#39;
info: checking for self-updates

  stable-x86_64-unknown-linux-gnu unchanged - rustc 1.41.0 (5e1a79984 2020-01-27)

info: cleaning up downloads &amp;amp; tmp directories
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じにツールチェーンのアップデートも簡単にできる。&lt;/p&gt;
&lt;h3&gt;リンカに注意&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; ではリンカについては自前のものを持っていないようだ。
&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 等の Linux プラットフォームであれば &lt;a href=&#34;https://gcc.gnu.org/&#34; title=&#34;GCC, the GNU Compiler Collection - GNU Project - Free Software Foundation (FSF)&#34;&gt;GCC&lt;/a&gt; が標準で入っているため問題ないが， Windows の場合は Visual Studio 等の開発環境が必要になる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; ではクロスコンパイルも可能だが，リンカはプラットフォーム毎に用意する必要があるため注意が必要である。
まぁ Docker 等を使えばいいんだろうけど。&lt;/p&gt;
&lt;h3&gt;エディタ機能の拡張&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; の &lt;a href=&#34;https://www.rust-lang.org/tools&#34; title=&#34;Tools - Rust Programming Language&#34;&gt;Tools&lt;/a&gt; には各種エディタや IDE で使える拡張機能が紹介されている。
私は &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; を使うので &lt;a href=&#34;https://atom.io/packages/ide-rust&#34;&gt;ide-rust&lt;/a&gt; を使えばいいようだ。
&lt;code&gt;rls&lt;/code&gt; に対応してるぞ。&lt;/p&gt;
&lt;h2&gt;みんな大好き Hello World&lt;/h2&gt;
&lt;p&gt;適当なディレクトリに &lt;code&gt;hello.rs&lt;/code&gt; ファイルを作って，以下のコードを書く。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rs&#34; data-lang=&#34;rs&#34;&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これをコンパイル&amp;amp;実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ rustc hello.rs 
$ ./hello 
Hello, world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h3&gt;Cargo でプロジェクト・ベースの環境を作る&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cargo&lt;/code&gt; コマンドを使ってプロジェクト・ベースの環境の雛形を作ることができる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cargo new hello --vcs none
     Created binary (application) `hello` package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このコマンドにより &lt;code&gt;hello&lt;/code&gt; ディレクトリが作成され，以下のディレクトリ・ファイルが作成される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ tree hello
hello
├── Cargo.toml
└── src
    └── main.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;src/main.rs&lt;/code&gt; の中身は先程の &lt;code&gt;main()&lt;/code&gt; 関数と同じ内容である。
&lt;code&gt;Cargo.toml&lt;/code&gt; の中身は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;authors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;username &amp;lt;username@example.com&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;edition&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2018&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dependencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;どうも &lt;code&gt;authors&lt;/code&gt; の項目は &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; のグローバル設定を読み取ってるらしい。&lt;/p&gt;
&lt;p&gt;ちなみに，先程のコマンドの &lt;code&gt;--vcs none&lt;/code&gt; オプションを外すと &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; のリポジトリとして構築される。
また GitHub に空のリポジトリを作ってローカルに clone し&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git clone https://github.com/spiegel-im-spiegel/rust-hello.git hello
$ cargo init hello
     Created binary (application) package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じに初期化することもできる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cargo&lt;/code&gt; コマンドで作った環境下では &lt;code&gt;cargo&lt;/code&gt; コマンド経由でビルドやデバッグなどができる。&lt;/p&gt;
&lt;p&gt;たとえば &lt;code&gt;cargo run&lt;/code&gt; コマンドを使えば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd hello
$ cargo run
   Compiling hello v0.1.0 (/home/username/rust/hello)
    Finished dev [unoptimized + debuginfo] target(s) in 0.32s
     Running `target/debug/hello`
Hello, world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じにコンパイル&amp;amp;実行が一気にできる。
リリース用のビルドは&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cargo build --release
   Compiling hello v0.1.0 (/home/username/rust/hello)
    Finished release [optimized] target(s) in 0.18s

$ ./target/release/hello 
Hello, world!

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という感じ。&lt;/p&gt;
&lt;h3&gt;外部関数インターフェイス&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; は外部関数インターフェイス（Foreign Function Interface；FFI）の仕組みを持っていて，他言語の関数を呼び出したり，逆に &lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; の関数を他言語から呼び出したりすることができる。&lt;/p&gt;
&lt;p&gt;今回は詳細な説明は省いて &lt;a href=&#34;https://github.com/medimatrix/rust-plus-golang&#34; title=&#34;medimatrix/rust-plus-golang: Rust + Go&#34;&gt;medimatrix/rust-plus-golang&lt;/a&gt; リポジトリにあるサンプルコードを紹介するに留める。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git clone https://github.com/medimatrix/rust-plus-golang.git

$ tree rust-plus-golang/
rust-plus-golang/
├── LICENSE
├── Makefile
├── README.md
├── lib
│   ├── hello
│   │   ├── Cargo.toml
│   │   └── src
│   │       └── lib.rs
│   └── hello.h
└── main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;lib/hello/Cargo.toml&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;crate&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cdylib&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dependencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;libc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.2.2&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更に &lt;code&gt;lib/hello/src/lib.rs&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;crate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;ffi&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;CStr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#[no_mangle]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libc&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;c_char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CStr&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;from_ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;from_utf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unwrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello {}!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この &lt;code&gt;hello()&lt;/code&gt; 関数を呼び出す &lt;code&gt;main.go&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;#cgo LDFLAGS: -L./lib -lhello
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;#include &amp;#34;./lib/hello.h&amp;#34;
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;CString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;John Smith&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ほんじゃあ，まぁ，ビルドしてみよっか。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ make
cd lib/hello &amp;amp;&amp;amp; cargo build --release
    Updating crates.io index
  Downloaded libc v0.2.67
   Compiling libc v0.2.67
   Compiling hello v0.1.0 (/home/username/rust/rust-plus-golang/lib/hello)
    Finished release [optimized] target(s) in 27.05s
cp lib/hello/target/release/libhello.so lib/
go build -ldflags=&amp;#34;-r /home/username/rust/rust-plus-golang/lib&amp;#34; main.go

$ ./main
Hello John Smith!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よしよし。&lt;/p&gt;
&lt;p&gt;今回は C 言語のインタフェースを使って &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; から &lt;a href=&#34;https://www.rust-lang.org/&#34; title=&#34;Rust Programming Language&#34;&gt;Rust&lt;/a&gt; の関数を呼び出していたが，他にも Ruby や Python などとも連携可能らしい。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://media.itkaikei.com/2019/01/24/rust-cross-compile/&#34;&gt;Rustのクロスコンパイル（Linux, MacOSで作ったものをWindowsで動かす）｜IT会計キャリア&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.varwww.com/201703-rust-cross-compile.html&#34;&gt;Rustでクロスコンパイルしてみた | 思案試行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4048930702?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51YLqKD4N5L._SL160_.jpg&#34; width=&#34;124&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4048930702?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Rust 公式ガイド&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Steve Klabnik (著), Carol Nichols (著), 尾崎 亮太 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;KADOKAWA 2019-06-28 (Release 2019-06-28)&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4048930702 (ASIN), 9784048930703 (EAN), 4048930702 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://doc.rust-lang.org/book/&#34;&gt;公式ドキュメント&lt;/a&gt;の日本語版。索引がちゃんとしているので，紙の本を買っておいて手元に置いておくのが吉。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-02-24&#34;&gt;2020-02-24&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Rust 公式ガイド --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;マジンガーZの「ルスト・ハリケーン」は “rust hurricane”  という説があるらしい。しかも “rust” を「ラスト」と読むと “last” と勘違いするからわざと「ルスト」と読んでいるという説まであるそうな。まぁ，真実は命名者に聞かないと分からないが（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>中古 PC に Ubuntu 環境を導入する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/12/install-ubuntu-to-second-hand-pc/" />
		<id>tag:text.Baldanders.info,2019-12-01:/remark/2019/12/install-ubuntu-to-second-hand-pc/</id>
		<published>2019-11-30T17:22:24+00:00</published>
		<updated>2021-01-10T02:49:53+00:00</updated>
		<summary>ついカッとなってやった。反省はしない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ついカッとなってやった。
反省はしない。&lt;/p&gt;
&lt;p&gt;久しぶりの衝動買いですよ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/49144529442/&#34;&gt;&lt;img src=&#34;./49144529442_3655cab86e_e.jpg&#34; srcset=&#34;./49144529442_3655cab86e_e.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;玩具が来た！ 早速 Ubuntu をぶち込んで遊ぶナリ&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;div&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/49144529442/&#34;&gt;玩具が来た！ 早速 Ubuntu をぶち込んで遊ぶナリ&lt;/a&gt;&lt;/div&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;一応，理由はあって&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;システムが壊れても日常生活でダメージにならない余剰パソコンが欲しかった&lt;/li&gt;
&lt;li&gt;技術系のイベントに参加するのにそろそろ Andorid タブレットではキツくなってきた&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;といったところ。&lt;/p&gt;
&lt;p&gt;最初の理由に関しては，最初は来年あたりにラズパイのキットでも買って遊ぼうかとも思っていたのだが，一通り揃ってるキットを買うと数千円はするみたいだし，それなら1万円前後の中古 PC でもいいんじゃないかって感じ。&lt;/p&gt;
&lt;p&gt;今回は&lt;a href=&#34;https://www.dospara.co.jp/&#34;&gt;ドスパラ&lt;/a&gt;で中古の DELL Lititude E5540 を購入した。
送料やら消費税やら全部込み込みで13K円ほど。
OS は入っていない。
もっと安いものもあったが，動作保証しないとか怖いことが書いてあったので止めた。
あーゆーのって部品取りするためのものなのかねぇ。&lt;/p&gt;
&lt;p&gt;今回は &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; を導入して &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタ上で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コードをコンパイル&amp;amp;テストできるところまでが目標。
メインの PC に &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 環境が既にあって，そこから設定をコピーする。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; のインストール&lt;/h2&gt;
&lt;p&gt;いざというときのために &lt;a href=&#34;https://text.baldanders.info/remark/2019/04/bootable-usb/&#34; title=&#34;Ubuntu インストール用のブート可能 USB メモリを作成する&#34;&gt;USB メモリでブータブル・メディアを作成済み&lt;/a&gt;なので，これを使って &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; をインストールする。&lt;/p&gt;
&lt;p&gt;DELL パソコンの BIOS 画面がなかなか出なくて往生したが，電源投入直後に表示される「DELL」ロゴ画面で F2 キーを連打すればいいらしい。
なんじゃそら（笑）&lt;/p&gt;
&lt;p&gt;BIOS 画面で USB からのブートを最優先にし，改めてブータブル・メディアを指してインストールを開始する&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://www.ubuntulinux.jp/japanese&#34;&gt;日本語 Remix&lt;/a&gt; 版を使えばインストーラも日本語だし悩むところはないのだが，ノート PC なので（紛失・盗難のリスクを考慮して）ストレージの暗号化を忘れないこと。&lt;/p&gt;
&lt;p&gt;私の場合はセットアップに必要なファイルを NAS に置いているので，インストールが完了したら NAS への接続設定をしておく。
前のときは「&lt;a href=&#34;https://text.baldanders.info/remark/2019/03/common-internet-file-system/&#34;&gt;CIFS 経由で NAS に接続&lt;/a&gt;」していたが，今回は（外に持ち出すことも考慮して）ファイルマネージャ Nautilus 上で動的に接続できるよう構成してみた。&lt;/p&gt;
&lt;h2&gt;KeePassXC のインストール&lt;/h2&gt;
&lt;p&gt;パスワード・マネージャ &lt;a href=&#34;https://keepassxc.org/&#34; title=&#34;KeePassXC Password Manager&#34;&gt;KeePassXC&lt;/a&gt; のインストールについては以下を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/08/installing-keepassxc-in-ubuntu/&#34;&gt;Ubuntu に KeePassXC を導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これでようやく無線 LAN に繋げられる。
有線からの解放。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 環境の移行&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 環境の移行および &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; との連携については以下を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/move-gpg-keyring/&#34;&gt;Windows 環境で作った GnuPG の鍵束を Ubuntu に移行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;つっても，今回は &lt;code&gt;~/.gnupg&lt;/code&gt; ディレクトリの中身をまるっとコピればいいだけなんだけど。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; と連携するなら以下を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/gpg-agent-in-ubuntu/&#34;&gt;gpg-agent の設定： GnuPG in Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;基本ツールのインストール&lt;/h2&gt;
&lt;p&gt;APT で基本ツールをインストールしておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install net-tools curl kdiff3 graphviz vim xsel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタで使いたいので &lt;a href=&#34;https://www.levien.com/type/myfonts/inconsolata.html&#34;&gt;Inconsolata&lt;/a&gt; フォントも入れておく。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Inconsolata.otf&lt;/code&gt; ファイルを取ってきて &lt;code&gt;/usr/local/share/fonts&lt;/code&gt; ディレクトリに入れてキャッシュを更新する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ fc-cache -fv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新されたかどうかは以下で確認できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ fc-list | grep Inconsolata
/usr/local/share/fonts/Inconsolata.otf: Inconsolata:style=Medium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; のインストール&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; をインストールする前に &lt;code&gt;~/.config/git/config&lt;/code&gt; ファイルをコピっておく。
既に &lt;code&gt;~/.gitconfig&lt;/code&gt; ファイルがあるなら &lt;code&gt;~/.config/git/config&lt;/code&gt; へ &lt;code&gt;mv&lt;/code&gt; する。&lt;/p&gt;
&lt;p&gt;インストールは以下を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-git-from-ppa/&#34;&gt;PPA から Git をインストールする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラのインストール&lt;/h2&gt;
&lt;p&gt;APT で管理される &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラはバージョンが古すぎるので公式サイトの&lt;a href=&#34;https://golang.org/dl/&#34; title=&#34;Downloads - The Go Programming Language&#34;&gt;ダウンロードページ&lt;/a&gt;から直接バイナリを取ってきて展開する。&lt;/p&gt;
&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.13.4 をインストールしたいなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src
$ sudo curl &amp;#34;https://dl.google.com/go/go1.13.4.linux-amd64.tar.gz&amp;#34; -O
$ cd ..
$ sudo unlink go # 以前の Go が入っている場合
$ sudo tar xvf src/go1.13.4.linux-amd64.tar.gz
$ sudo mv go go1.13.4
$ sudo ln -s go1.13.4 go
$ go version # /usr/local/go/bin にパスが通っている場合
go version go1.13.4 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとする。&lt;/p&gt;
&lt;p&gt;これでようやく &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt;, &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt;, &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラと必要なツールのセットアップが完了した。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタのインストール&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタは公式の APT リポジトリが用意されているので，そちらを利用する。&lt;/p&gt;
&lt;p&gt;まずはリポジトリの登録。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ wget -qO - https://packagecloud.io/AtomEditor/atom/gpgkey | sudo apt-key add -
$ sudo sh -c &amp;#39;echo &amp;#34;deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main&amp;#34; &amp;gt; /etc/apt/sources.list.d/atom.list&amp;#39;
$ sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これであとは&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ sudo apt install atom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば，インストール完了。&lt;/p&gt;
&lt;h3&gt;パッケージをまとめてインストールする&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタのサード・パーティ・パッケージにあらかじめ star (☆) を付けておくことでまとめてインストールすることができる。&lt;/p&gt;
&lt;p&gt;まずはログインから&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm login
Welcome to Atom!

Before you can publish packages, you&amp;#39;ll need an API token.

Visit your account page on Atom.io https://atom.io/account,
copy the token and paste it below when prompted.

Press [Enter] to open your account page on Atom.io.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここで &lt;code&gt;[Enter]&lt;/code&gt; キーを押すと Web ブラウザでアカウントページが開く。
開かない場合は Web ブラウザで直接 &lt;a href=&#34;https://atom.io/account&#34;&gt;https://atom.io/account&lt;/a&gt; を開く。
アカウントページに表示されたアクセス・トークンを入力すればログイン完了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Token&amp;gt; ****************
Saving token to Keychain done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Star を付けたパッケージは以下のコマンドで見れる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm stars
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Star を付けたパッケージをまとめてインストールするなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm stars --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;でOK。&lt;/p&gt;
&lt;h3&gt;設定ファイルの移行&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~/.atom&lt;/code&gt; ディレクトリ直下にある以下のファイルをコピれば簡単に設定を移行できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.cson&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init.coffee&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keymap.cson&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;styles.less&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snipets.cson&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これで完了！&lt;/p&gt;
&lt;h2&gt;その他お好みで&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/mono-in-ubuntu/&#34;&gt;Ubuntu に Mono を導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/install-texlive-in-ubuntu/&#34;&gt;TeX Live を Ubuntu に（APT を使わずに）導入する&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/upgrade-texlive-from-2018-to-2019/&#34;&gt;TeX Live 2018 から 2019 へのアップグレード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/04/academic-distributed-computing-projects-by-boinc/&#34;&gt;BOINC による学術分散コンピューティング・プロジェクトでの活動を再開した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/clamav-for-ubuntu/&#34;&gt;Ununtu に ClamAV を導入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/installing-libreoffice-in-ubuntu/&#34;&gt;Ubuntu に LibreOffice をインストールする3つの方法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2019/08/upgrade-libreoffice-6_3/&#34;&gt;LibreOffice 6.3 へのアップグレード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/kindle-for-wine/&#34;&gt;Ubuntu でも Kindle 本が読みたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/send-mail-without-mail-service/&#34;&gt;メール・サービスを立てずにコマンドラインでメールを送信する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/cast-vuls/&#34;&gt;そろそろ Vuls を唱えるか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/ripping-cd-music-in-ubuntu/&#34;&gt;Ubuntu で音楽 CD のリッピング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/lollypop-music-player/&#34;&gt;音楽プレイヤー Lollypop を試す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/07/reinstalling-openjdk/&#34;&gt;結局 OpenJDK をインストールし直すことにした&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/11/reinstalling-thunderbird/&#34;&gt;結局 Thunderbird もインストールし直すことにした&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/using-gnupg-for-windows-2/&#34;&gt;GnuPG for Windows : gpg-agent について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/gnupg-cheat-sheet/&#34;&gt;GnuPG チートシート（鍵作成から失効まで）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/advanced-package-tool/&#34;&gt;Advanced Package Tool に関する覚え書き&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/vuln-list/&#34;&gt;Ubuntu アプリケーションにおけるセキュリティ・アップデート一覧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/317fsDSqG8L._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01NBU1OS5?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;シリコンパワー USBメモリ 32GB USB3.1 / USB3.0 亜鉛合金ボディ 防水 防塵 耐衝撃 永久保証 PS4動作確認済 Jewel J80 SP032GBUF3J80V1TJA&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;シリコンパワー (Release 2017-02-01)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B01NBU1OS5 (ASIN), 4712702655292 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;OS 移行用に購入。ひたすらデザインで決めた（笑） よく考えたら32GBも要らなかった。まぁ，何か使い道があるだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-04-21&#34;&gt;2019-04-21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- シリコンパワー USBメモリ 32GB USB3.1 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00G9NIL7G?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41uU9SMEAyL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00G9NIL7G?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;エレコム マウス Bluetooth (iOS対応) Sサイズ 小型 3ボタン IRセンサー 省電力 シルバー M-BT12BRSV&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;エレコム (Release 2013-11-09)&lt;/dd&gt;
    &lt;dd&gt;Personal Computers&lt;/dd&gt;
    &lt;dd&gt;B00G9NIL7G (ASIN), 4953103501997 (EAN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;まぁ，マウスは消耗品だから（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-12-01&#34;&gt;2019-12-01&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- エレコム マウス Bluetooth --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;BIOS 設定はあとで戻しておくこと。ついでに BIOS を&lt;a href=&#34;https://www.dell.com/community/%E4%B8%80%E8%88%AC-%E3%83%8E%E3%83%BC%E3%83%88%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3/BIOS%E3%81%A7%E8%A8%AD%E5%AE%9A%E3%81%A7%E3%81%8D%E3%82%8B%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/td-p/6225663&#34; title=&#34;BIOSで設定できるパスワードについて - Dell Community&#34;&gt;パスワードロック&lt;/a&gt;しておかないと。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
</feed>
