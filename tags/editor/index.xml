<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Editor - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/editor/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/editor/index.xml" />
	<id>tag:text.Baldanders.info,2018-12-17:/tags</id>
	<updated>2018-12-17T22:45:24+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.52</generator>

	
	<entry>
		<title>2018年お気に入り ATOM パッケージ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/12/favorite-atom-packages-2018/" />
		<id>tag:text.Baldanders.info,2018-12-17:/remark/2018/12/favorite-atom-packages-2018/</id>
		<published>2018-12-17T22:45:24+09:00</published>
		<updated>2018-12-18T08:08:33+09:00</updated>
		<summary>年末なので ATOM エディタの整理を。 </summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;年末なので &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの整理を。
といっても最近はあまりいじるところがないけど。&lt;/p&gt;

&lt;h2 id=&#34;gocode-を巡るあれこれ&#34;&gt;gocode を巡るあれこれ&lt;/h2&gt;

&lt;p&gt;本当のことを言うと &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援パッケージを LSP (Language Server Protocol) ベースにしたいんだけど，最近流行りの &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/golsp&#34; title=&#34;golsp - GoDoc&#34;&gt;golsp&lt;/a&gt; や &lt;a href=&#34;https://github.com/saibing/bingo&#34; title=&#34;saibing/bingo: Bingo is a Go language server that speaks Language Server Protocol.&#34;&gt;bingo&lt;/a&gt; を扱えるパッケージはなさそう。&lt;/p&gt;

&lt;p&gt;以前からある &lt;a href=&#34;https://github.com/sourcegraph/go-langserver&#34; title=&#34;sourcegraph/go-langserver: Go language server to add Go support to editors and other tools that use the Language Server Protocol (LSP)&#34;&gt;go-langserver&lt;/a&gt; はバックエンドに gocode を利用しているのだが（今は違う？），本家の &lt;a href=&#34;https://github.com/nsf/gocode&#34; title=&#34;nsf/gocode: An autocompletion daemon for the Go programming language&#34;&gt;nsf/gocode&lt;/a&gt; が &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.10 以降で組み込まれたビルドキャッシュ機能に追従できず fork が乱立して混沌としている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gc1&#34;&gt;&lt;a href=&#34;#fn:gc1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;結局 &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援パッケージを利用するなら &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; 一択で&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; をインストール，またはインストール済みであることを確認する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; をインストールする。この際，サブパッケージおよび各種支援ツールが自動インストールされるのを確認する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stamblerre/gocode&#34; title=&#34;stamblerre/gocode: An autocompletion daemon for the Go programming language&#34;&gt;stamblerre/gocode&lt;/a&gt; を &lt;code&gt;go get&lt;/code&gt; コマンドで上書きインストールする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gp1&#34;&gt;&lt;a href=&#34;#fn:gp1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という手順になるだろう。
&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/golsp&#34; title=&#34;golsp - GoDoc&#34;&gt;golsp&lt;/a&gt; や &lt;a href=&#34;https://github.com/saibing/bingo&#34; title=&#34;saibing/bingo: Bingo is a Go language server that speaks Language Server Protocol.&#34;&gt;bingo&lt;/a&gt; が使えれば将来的に楽なんだけどねぇ。&lt;/p&gt;

&lt;p&gt;それ以前に 1.12 で&lt;a href=&#34;http://text.baldanders.info/golang/go-module-aware-mode/&#34; title=&#34;モジュール対応モードへの移行を検討する&#34;&gt;モジュール対応モード&lt;/a&gt;に本格的に移行した場合に &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; が追従できるかどうかなんだけど。
最悪の場合は &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt; に乗り換えるか（vim は若い頃のデスマーチなトラウマがフラッシュバックするので使いたくない）。&lt;/p&gt;

&lt;h2 id=&#34;atom-ide-ui-と連携する-document-outline&#34;&gt;&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; と連携する &lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;今まで markdown テキストのアウトライン表示は &lt;a href=&#34;https://atom.io/packages/nav-panel-plus&#34;&gt;nav-panel-plus&lt;/a&gt; を使ってたんだけど &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; に対応していないのが欠点だった。
で，色々探してみたら &lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt; が良さげである。
&lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt; の設定で “show by default” 項目を無効にしておけば &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; のアウトライン表示のタブだけが表示される。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt; は以下の構造化テキストに対応している&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markdown (Commonmark)&lt;/li&gt;
&lt;li&gt;LaTeX&lt;/li&gt;
&lt;li&gt;ReStructuredText&lt;/li&gt;
&lt;li&gt;AsciiDoc&lt;/li&gt;
&lt;li&gt;Knitr&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;らしいんだけど LaTeX ファイルのアウトラインが上手く表示されないんだよなぁ。
うーむ。&lt;/p&gt;

&lt;p&gt;他にも &lt;a href=&#34;https://atom.io/packages/ide-html&#34;&gt;ide-html&lt;/a&gt; で HTML を，&lt;a href=&#34;https://atom.io/packages/ide-css&#34;&gt;ide-css&lt;/a&gt; で CSS を，&lt;a href=&#34;https://atom.io/packages/ide-yaml&#34;&gt;ide-yaml&lt;/a&gt; で YAML を，&lt;a href=&#34;https://atom.io/packages/ide-json&#34;&gt;ide-json&lt;/a&gt; で JSON を扱える。
これでメジャーな構造化テキストは大体扱えるかな&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:om1&#34;&gt;&lt;a href=&#34;#fn:om1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34;&gt;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/plantuml-with-atom/&#34;&gt;ATOM エディタを使った作図（PlantUML 編）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:gc1&#34;&gt;gocode を巡るゴタゴタについては「&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20181217000056.htm&#34;&gt;gocode やめます(そして Language Server へ)&lt;/a&gt;」が参考になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gc1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gp1&#34;&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; では &lt;a href=&#34;https://github.com/mdempsky/gocode&#34; title=&#34;mdempsky/gocode: An autocompletion daemon for the Go programming language&#34;&gt;mdempsky/gocode&lt;/a&gt; が自動インストールされるが， &lt;a href=&#34;https://github.com/mdempsky/gocode&#34; title=&#34;mdempsky/gocode: An autocompletion daemon for the Go programming language&#34;&gt;mdempsky/gocode&lt;/a&gt; は&lt;a href=&#34;http://text.baldanders.info/golang/go-module-aware-mode/&#34; title=&#34;モジュール対応モードへの移行を検討する&#34;&gt;モジュール対応モード&lt;/a&gt;に対応していないらしいので &lt;a href=&#34;https://github.com/stamblerre/gocode&#34; title=&#34;stamblerre/gocode: An autocompletion daemon for the Go programming language&#34;&gt;stamblerre/gocode&lt;/a&gt; を手動でインストールする必要がある。実は &lt;a href=&#34;https://atom.io/packages/ide-go&#34;&gt;ide-go&lt;/a&gt; で &lt;a href=&#34;https://github.com/sourcegraph/go-langserver&#34; title=&#34;sourcegraph/go-langserver: Go language server to add Go support to editors and other tools that use the Language Server Protocol (LSP)&#34;&gt;go-langserver&lt;/a&gt; を駆動させていたのだが &lt;a href=&#34;https://atom.io/packages/ide-go&#34;&gt;ide-go&lt;/a&gt; 自体が &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; を要求するので意味がなかったっぽい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:om1&#34;&gt;私は使わないが &lt;a href=&#34;https://atom.io/packages/org-mode&#34;&gt;org-mode&lt;/a&gt; パッケージもあるらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:om1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM エディタを使った作図（PlantUML 編） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/12/plantuml-with-atom/" />
		<id>tag:text.Baldanders.info,2017-12-17:/remark/2017/12/plantuml-with-atom/</id>
		<published>2017-12-17T21:56:39+09:00</published>
		<updated>2018-03-06T11:00:35+09:00</updated>
		<summary>おおっ。流石にクラス図は PlantUML の方がいいな。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34; title=&#34;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&#34;&gt;前回&lt;/a&gt;で &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの掃除も終わったので，以前から気になっていた「&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; を使った作図」について調べてみた。
ええ，分かってますとも。
&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34; title=&#34;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&#34;&gt;前回&lt;/a&gt;に引き続き「現実逃避」というやつです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/&#34;&gt;Open-source tool that uses simple textual descriptions to draw UML diagrams.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;atom-に-plantuml-関連パッケージを導入する&#34;&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 関連パッケージを導入する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体は UML (Unified Modeling Language; 統一モデリング言語) を記述するための DSL (Domain-Specific Language; ドメイン特化言語) と考えてよい（実際には UML 以外のものも記述可能）。
UML の構文（に相当するもの）は図形で表されるが，それをテキストで記述できるようにしたのが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; である。
「UML って何？」って方もおられるだろうが，それは&lt;a href=&#34;#uml&#34;&gt;後ほど説明&lt;/a&gt;する。&lt;/p&gt;

&lt;p&gt;直前に述べたように &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体はテキストで記述するが，最終的には図（diagram）に落とし込むため &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; と Java の実行環境が必要となる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jar0&#34;&gt;&lt;a href=&#34;#fn:jar0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
これらをあらかじめ導入しておくこと（導入方法については割愛する）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で UML を書く（描く）ために以下の2つのパッケージを導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jar1&#34;&gt;&lt;a href=&#34;#fn:jar1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; は（今のところ）ハイライト機能しかないようなので無くても構わないが， &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; は描画に必要なので必ず導入すること。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; を導入したら Settings を開いて “Charset” および “Graphviz Dot Executable” 各項目の設定をしておく。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/38219245875/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4736/38219245875_7b15a4bf02.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4736/38219245875_7b15a4bf02.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;settings of plantuml-viewer package&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/38219245875/&#34;&gt;settings of plantuml-viewer package&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;“Graphviz Dot Executable” 項目には &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の dot コマンドへのフルパスをセットする。
“Charset” 項目については， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で書くんだから UTF-8 にしておけばいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;最初はやっぱり-hello-world-でしょ&#34;&gt;最初はやっぱり Hello World でしょ&lt;/h2&gt;

&lt;p&gt;動作確認を兼ねて何か書いてみる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; では &lt;code&gt;.pu&lt;/code&gt;, &lt;code&gt;.puml&lt;/code&gt;, &lt;code&gt;.plantuml&lt;/code&gt; を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 用の拡張子と認識するようなので，まずは &lt;code&gt;hello.puml&lt;/code&gt; ファイルを作って以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Bob-&amp;gt;Alice : hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt; で表示する（&lt;code&gt;ctrl-alt-p&lt;/code&gt; でビュアーが開く）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello1.puml&#34;&gt;&lt;img src=&#34;hello1.svg&#34; srcset=&#34;hello1.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;おおっ。
できたできた。
表示されている図は PNG, SVG, EPS のいずれかの形式で保存できる（コンテキスト・メニューから “Save As ...” を選択する）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は &lt;code&gt;@startuml ... @enduml&lt;/code&gt; の間を記述領域と見なすようで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;ほげほげ

@startuml
  Bob-&amp;gt;Alice : hello
@enduml

ほえほえ&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いても，全く同じ図が出力される。
他形式のドキュメントに埋め込むことを想定してのことだろうが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:embd1&#34;&gt;&lt;a href=&#34;#fn:embd1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，今回は単純に図が出力できればいいので，以降の記述では &lt;code&gt;@startuml&lt;/code&gt; および &lt;code&gt;@enduml&lt;/code&gt; を省くことにする。&lt;/p&gt;

&lt;h2 id=&#34;見た目の調整&#34;&gt;見た目の調整&lt;/h2&gt;

&lt;p&gt;このままでもいいっちゃあいいのだが，もう少し見た目をどうにかしたい。
まずはモノクロ表示にしてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;skinparam monochrome true
&lt;/span&gt;Bob-&amp;gt;Alice : hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello2a.puml&#34;&gt;&lt;img src=&#34;hello2a.svg&#34; srcset=&#34;hello2a.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;という感じにモノクロになった。
調子に乗ってもう少し色々と弄ってみよう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;skinparam shadowing false
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam default{
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName &amp;#39;Noto Serif&amp;#39;, &amp;#39;Noto Serif JP&amp;#39;, serif
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 14
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam sequence {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontName &amp;#39;Noto Sans&amp;#39;, &amp;#39;Noto Sans JP&amp;#39;, sans-serif
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontColor black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ArrowFontSize 10
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBackgroundColor White
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ActorBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ActorBackgroundColor White
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ParticipantBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  ParticipantBackgroundColor LightGray
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  MessageAlign center
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;
actor ボブ
participant Alice

ボブ-&amp;gt;Alice : こんにちは
activate Alice

Alice--&amp;gt;ボブ : Hello
deactivate Alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;前半部分で線や背景色の色およびフォントについて指定し&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fnt1&#34;&gt;&lt;a href=&#34;#fn:fnt1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，後半部分で実際のシーケンスを記述している。
これを SVG に出力するとこんな感じになる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;hello2b.puml&#34;&gt;&lt;img src=&#34;hello2b.svg&#34; srcset=&#34;hello2b.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;見た目の記述に毎回あれだけの量を書くのはかったるいのでインクルードファイルとして別出ししてしまおう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;&lt;span class=&#34;hl&#34;&gt;!include style.puml
&lt;/span&gt;
actor ボブ
participant Alice

ボブ-&amp;gt;Alice : こんにちは
activate Alice

Alice--&amp;gt;ボブ : Hello
deactivate Alice&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これでスッキリした。
&lt;a href=&#34;./style.puml&#34;&gt;&lt;code&gt;style.puml&lt;/code&gt;&lt;/a&gt; ファイルの中身はこんな感じで，記述をそのままコピっただけ。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;skinparam shadowing false
skinparam default{
  FontName &amp;#39;Noto Serif&amp;#39;, &amp;#39;Noto Serif JP&amp;#39;, serif
  FontColor black
  FontSize 14
}
skinparam sequence {
  ArrowColor Black
  ArrowFontName &amp;#39;Noto Sans&amp;#39;, &amp;#39;Noto Sans JP&amp;#39;, sans-serif
  ArrowFontColor black
  ArrowFontSize 10
  LifeLineBorderColor Black
  LifeLineBackgroundColor White
  ActorBorderColor Black
  ActorBackgroundColor White
  ParticipantBorderColor Black
  ParticipantBackgroundColor LightGray
  MessageAlign center
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;uml&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図可能な UML 図&lt;/h2&gt;

&lt;p&gt;現在 UML 2.0 では以下の図（Diagrams）が定義されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Diagrams

&lt;ul&gt;
&lt;li&gt;構造図（Structural Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/class-diagram&#34;&gt;クラス図（Class Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/object-diagram&#34;&gt;オブジェクト図（Object Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;パッケージ図（Package Diagram）&lt;/li&gt;
&lt;li&gt;コンポジット構造図（Composite Structure Diagram）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/component-diagram&#34;&gt;コンポーネント図（Component Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/deployment-diagram&#34;&gt;配置図（Deployment Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;振る舞い図（Behavioral Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/use-case-diagram&#34;&gt;ユースケース図（Use Case Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図（Activity Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/state-diagram&#34;&gt;状態遷移図（State Machine Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図（Sequence Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コミュニケーション図（Communication Diagram）&lt;/li&gt;
&lt;li&gt;相互作用概要図（Interaction Overview Diagram）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/timing-diagram&#34;&gt;タイミング図（Timing Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;リンクがあるものが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 記述可能な図である。&lt;/p&gt;

&lt;p&gt;UML 各図の中の線や図形は全て「意味」が決められており，それらを組み合わせることでシステムの仕様や設計が表現できることを目指している。
名前が示す通りモデリングの設計手法と相性がいいため，オブジェクト指向設計においてよく使われる。&lt;/p&gt;

&lt;p&gt;実際には上で挙げた図を全て駆使するのではなく，システムの性格や規模に応じて幾つかの図を組み合わせて使うのが普通である。&lt;/p&gt;

&lt;p&gt;UML 図の中でもよく使われるシーケンス図とクラス図について &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; での記述を紹介しよう。
以前「&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/sequence-diagram/&#34; title=&#34;そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ）&#34;&gt;そうだ，シーケンス図を描こう！&lt;/a&gt;」の中で， &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で書いたシーケンス図&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
sequenceDiagram
    カバ-&gt;&gt;+カバン: あなた，泳げまして？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: 空は飛べるんですの？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;+カバン: じゃあ，足が速いとか？
    カバン--&gt;&gt;-カバ: いえ
    カバ-&gt;&gt;カバン: あなた，何にもできないのねぇ
    loop ひとりヘコむ
        カバン-&gt;&gt;カバン: ううっ
    end
&lt;/div&gt;
&lt;figcaption&gt;カバとカバン&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図するとこんな感じだろうか（図のリンク先が &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; ソースコード）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;kaban.puml&#34;&gt;&lt;img src=&#34;kaban.svg&#34; srcset=&#34;kaban.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;カバとカバン&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;kaban.puml&#34;&gt;カバとカバン&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;じゃあ， &lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;mermaid&lt;/a&gt; 記法で書いたクラス図&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div class=&#34;mermaid&#34;&gt;
classDiagram
    friends&lt;|--serval
    friends&lt;|--raccoon
    friends&lt;|--fennec
    serval : +Waai()
    raccoon : +OmakaseNanoda()
    fennec : +Haiyo()
&lt;/div&gt;
&lt;figcaption&gt;フレンズ&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で作図するとこんな感じかな（コメントをちょろんと加えてみた）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;friends-class.puml&#34;&gt;&lt;img src=&#34;friends-class.svg&#34; srcset=&#34;friends-class.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;フレンズ&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;friends-class.puml&#34;&gt;フレンズ&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おおっ。
流石にクラス図は &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の方がいいな。
矢印は横向きにも出来るっぽい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;wiki.puml&#34;&gt;&lt;img src=&#34;wiki.svg&#34; srcset=&#34;wiki.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;今度からクラス図描くときは &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で描くようにしよう。&lt;/p&gt;

&lt;h2 id=&#34;やっぱり考えながら描く&#34;&gt;やっぱり考えながら描く&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/sequence-diagram/&#34; title=&#34;そうだ，シーケンス図を描こう！ （一応クラス図も描けるよ）&#34;&gt;そうだ，シーケンス図を描こう！&lt;/a&gt;」でも書いたんだけど，クラス図やシーケンス図といったものは試行錯誤しながら描いていくものなのよ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:case1&#34;&gt;&lt;a href=&#34;#fn:case1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
お客さんもマネージャもプログラマも UML 図を中心に議論を行っていく。
だから作成や修正が面倒なツールはダメなのだ。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は時々刻々と修正されることを前提にしたツールと言える。&lt;/p&gt;

&lt;p&gt;もうひとつ。&lt;/p&gt;

&lt;p&gt;要求定義を行っていくと「要求」やそれに伴う「仕様」が大きく変化することがある。
変化すること自体は（改善されてるってことだし）結構なのだが（予算規模が変わってアワアワする可能性はあるけど），あとからチームに参加する人たちは「結果」しか提示されないので「何故そのような「要求」に至ったか」が理解できないことが多い。
不完全な理解のまま作業をすすめると必ず何処かで不整合が起きる（つまり文脈（context）が大事ってこと）。&lt;/p&gt;

&lt;p&gt;だから議論の流れを後から追えるよう「履歴」をとっていく必要がある。
私が最近 UML 図に関して教わったのは&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;最初は不完全でも間違ってても構わない。まずは考えていることを図にぶちまけることが重要&lt;/li&gt;
&lt;li&gt;ただし，クラス図では多重度を記述すること（MUST）&lt;/li&gt;
&lt;li&gt;要求定義レベルの図と設計レベルの図は必要とされる詳細度や厳密度が異なる。最初から設計レベルの図を描こうとしないこと&lt;/li&gt;
&lt;li&gt;作成した図は（手書きのものも含めて）全て履歴として保管し，後から参照できるようにすること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;だったかな。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の利点は，テキストであるが故に修正・変更が容易で， git などのバージョン管理システムと組み合わせて履歴から差分情報を抽出しやすいことにある。
ぶっちゃけ，出力としての PNG や SVG 画像ファイルにはさしたる価値はなく， UML 用の DSL である &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の記述にこそ大きな価値があるということだ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/&#34;&gt;UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/skinparam&#34;&gt;Changing colors and fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yohshiy.blog.fc2.com/blog-category-22.html&#34;&gt;PlantUML の使い方 | プログラマーズ雑記帳&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/ogomr/items/0b5c4de7f38fd1482a48&#34;&gt;PlantUML Cheat Sheet - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/nakahashi/items/3d88655f055ca6a2617c&#34;&gt;AtomとPlantUMLで爆速UMLモデリング - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/k_nakayama/items/77ca73753ebd049a66de&#34;&gt;Atom+PlantUMLで見た目もいい感じのシーケンス図を作成する - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:jar0&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の本体は &lt;code&gt;plantuml.jar&lt;/code&gt; で提供されている。このファイルを使って “&lt;code&gt;java -jar plantuml.jar -language&lt;/code&gt;” とコマンドを打つと &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で使われる全シンボルが表示される。シーケンス図以外は内部で DOT 言語に変換してから &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; を使って作図するようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jar0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:jar1&#34;&gt;Windows なら &lt;code&gt;%USERPROFILE%\.atom\packages\plantuml-viewer&lt;/code&gt; フォルダにインストールされるが，その中の &lt;code&gt;node_modules\node-plantuml&lt;/code&gt; フォルダに &lt;code&gt;plantuml.jar&lt;/code&gt; がある筈である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jar1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:embd1&#34;&gt;&lt;code&gt;@startuml&lt;/code&gt; の後ろに &lt;code&gt;images/hello.png&lt;/code&gt; などと指定すれば &lt;code&gt;plantuml.jar&lt;/code&gt; のほうで自動的に指定したパス名で画像ファイルを出力するらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:embd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fnt1&#34;&gt;フォント名については &lt;code&gt;font-family&lt;/code&gt; としてそのまま SVG に埋め込まれる。従って環境によって見え方が異なる筈である。どの環境でも同じような見え方にしたいなら PNG で保存するのが最も確実だろう。その場合は &lt;code&gt;xxxFontName&lt;/code&gt; に自マシンにインストールされている具体的なフォント名を指定する必要がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fnt1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:case1&#34;&gt;もちろん UML を CASE (Computer Aided Software Engineering) の入力手段として使う場合もある（つか UML ってそれを念頭に置いて開発されたものだからねぇ）。その場合は矛盾のない正確な記述が要求される。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:case1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/" />
		<id>tag:text.Baldanders.info,2017-12-16:/remark/2017/12/favorite-atom-packages-2017/</id>
		<published>2017-12-16T18:16:31+09:00</published>
		<updated>2018-03-06T11:00:35+09:00</updated>
		<summary>というわけで，唐突に ATOM エディタの掃除とか始めてしまう。ついでに最近のお気に入りパッケージとか紹介してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;なんで日本人はクソ忙しい年末に「大掃除」とかするんでしょうねぇ。
普段からやっとけっての，自分。
分かってます。
現実逃避ってやつですね（笑）&lt;/p&gt;

&lt;p&gt;というわけで，唐突に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの掃除とか始めてしまう。
ついでに最近のお気に入りパッケージとか紹介してみる。&lt;/p&gt;

&lt;h2 id=&#34;atom-のいいところ-悪いところ&#34;&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; のいいところ，悪いところ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; のいいところって何だろう。
私の場合，あるエディタが気に入る理由はひとつしかない。
それは&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;手に馴染むかどうか&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;である。
これは極めて感覚的かつ主観的なので説明しづらい。
でも，これって殆どの人がそうじゃないだろうか。&lt;/p&gt;

&lt;p&gt;たとえば私が「&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の◯◯機能がチョー便利！」とか「◯◯パッケージが素敵！」とか言ったところで「それ◯◯で出来るよ」と返されるのがオチである。
「好き」という感情は感覚的なものなので合理的に説明するのは難しいし，好悪を評価軸に他人を説得するのは更に無理筋というものである。&lt;/p&gt;

&lt;p&gt;逆に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の悪いところは幾らでも挙げられる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tsundere1&#34;&gt;&lt;a href=&#34;#fn:tsundere1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
すぐ思いつくところでは&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;起動が遅い&lt;/li&gt;
&lt;li&gt;全体的に動きがモッサリしている&lt;/li&gt;
&lt;li&gt;巨大ファイルを（事実上）扱えない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;といった感じ。
これのせいで私はテキスト・エディタを「&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34;&gt;秀丸&lt;/a&gt;」から完全に乗り換えることができないでいる。
今のところ &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; での作業はテキスト表示・入力・編集作業全体の9割5分といったところ。
ちょこっとだけファイルの中身を覗いてみたいとか，10万行くらいの巨大 CSV ファイル（しかも Shift-JIS）を開きたいとかいったことには  &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; は向かない。&lt;/p&gt;

&lt;p&gt;まぁ，でも，私がよく使うパッケージ等を紹介することで「&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタってこんな感じ」くらいのことは分かってもらえるのではないかと淡い期待を寄せてみる。&lt;/p&gt;

&lt;h2 id=&#34;インストールしたパッケージを整理する&#34;&gt;インストールしたパッケージを整理する&lt;/h2&gt;

&lt;p&gt;さて，前口上はこのくらいにして，タイトル通り &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの掃除を始めよう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; は多様なパッケージ群が特徴でインストールも非常に簡単なのはいいのだが &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を長く使っているとインストールしたまま忘れ去ってしまったパッケージのひとつやふたつはあるものだ。
自分の環境にどんなパッケージが入っているか調べるには以下のコマンドを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm list -i -b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみにパッケージだけを見る場合には &lt;code&gt;-p&lt;/code&gt; オプションを付けて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm list -i -b -p&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすればよい（テーマのみなら &lt;code&gt;-t&lt;/code&gt; オプションを付ける）。
表示される一覧を見て「何だっけ？ これ」っていうのがあったなら削除してしまって構わない。
ただし，パッケージ同士が依存関係にある場合は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を再起動した際に再インストールを要求されることがある。&lt;/p&gt;

&lt;p&gt;パッケージの削除は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の Setting で行うかコマンドラインで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm delete package-name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすればいい。&lt;/p&gt;

&lt;p&gt;お気に入りのパッケージについては，各パッケージの Web ページで ☆ (star) を付けることをお勧めする。
Star を付けたパッケージは初期インストール時に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ apm stars --install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で一気にインストールすることが可能になる。
詳しくは「&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;」を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;2017年のお気に入りパッケージ&#34;&gt;2017年のお気に入りパッケージ&lt;/h2&gt;

&lt;p&gt;それでは以下に2017年末時点でよく使うパッケージを紹介する。&lt;/p&gt;

&lt;h3 id=&#34;テーマ&#34;&gt;テーマ&lt;/h3&gt;

&lt;p&gt;最近は &lt;a href=&#34;https://atom.io/themes/atom-material-syntax-dark&#34;&gt;atom-material-syntax-dark&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;本当はライト・テーマにしたいのだが，いいのがないんだよねぇ。
何だってみんなライト・テーマの背景を真っ白にするんだろう。
ちょっとベージュっぽい背景色にすれば，それで充分眼に優しい配色になるのに。&lt;/p&gt;

&lt;p&gt;黒背景もそれはそれで視覚的にキツいんだけど，真っ白背景よりはマシなので仕方なくダーク・テーマを使っている。&lt;/p&gt;

&lt;p&gt;選択するテーマによるのだが &lt;a href=&#34;https://atom.io/packages/highlight-line&#34;&gt;highlight-line&lt;/a&gt; でカーソル行にアンダーラインを表示させている。
&lt;code&gt;styles.less&lt;/code&gt; ファイルで簡単に色などを調整できるのがよい。&lt;/p&gt;

&lt;h3 id=&#34;git-関連&#34;&gt;Git 関連&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 1.18 でコア・パッケージに &lt;a href=&#34;https://atom.io/packages/github&#34;&gt;github&lt;/a&gt; が導入され，ようやく GUI で git の基本操作が出来るようになった。
ただし，キーボード・ベースの操作では &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; の方が使いやすい。
てか，私は主に &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; のほうを使っている。&lt;/p&gt;

&lt;p&gt;他には， commit 履歴を視覚的に見るために &lt;a href=&#34;https://atom.io/packages/git-time-machine&#34;&gt;git-time-machine&lt;/a&gt; を使うことがある。
ちょっと癖が強いのが難点なのだが。&lt;/p&gt;

&lt;h3 id=&#34;自動保存&#34;&gt;自動保存&lt;/h3&gt;

&lt;p&gt;ファイルの自動保存機能として，コア・パッケージに &lt;a href=&#34;https://atom.io/packages/autosave&#34;&gt;autosave&lt;/a&gt; というのがあるのだが，ファイル保存をトリガにして動く機能もあるので（&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; の commit コメントとか），使い所が微妙である。&lt;/p&gt;

&lt;p&gt;ちなみに，かつての &lt;a href=&#34;https://atom.io/packages/save-session&#34;&gt;save-session&lt;/a&gt; 機能は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 本体に取り込まれているそうで，保存を忘れて &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を閉じても，次に開くときは未保存状態のまま復元されるようだ。
よしよし。&lt;/p&gt;

&lt;h3 id=&#34;go-plus-と-atom-ide&#34;&gt;go-plus と atom-ide&lt;/h3&gt;

&lt;p&gt;はっきり言おう。
私が &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にロックインされている最大の理由が &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージである。
コードの入力補完と整形，lint，テスト，カバレッジ 等々... これがなかったらコーディング効率半減どころか 70% 減かも。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージを入れると副パッケージとして，以下も併せてインストールされる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-debug&#34;&gt;go-debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-signature-statusbar&#34;&gt;go-signature-statusbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/hyperclick&#34;&gt;hyperclick&lt;/a&gt; （&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; が入ってる場合は不要？）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また &lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34; title=&#34;GitHub - alecthomas/gometalinter: Concurrently run Go lint tools and normalise their output&#34;&gt;alecthomas/gometalinter&lt;/a&gt; をはじめとする大量のツールがインストールされるため &lt;code&gt;GOPATH&lt;/code&gt; および &lt;code&gt;PATH&lt;/code&gt; 環境変数の設定をしておくこと。&lt;/p&gt;

&lt;p&gt;最近の &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; は &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; を導入するよう勧めてくる。
&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; は最近発表された &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 用の IDE (Integrated Development Environment; 統合開発環境) パッケージで &lt;a href=&#34;http://langserver.org/&#34;&gt;LSP (Language Server Protocol)&lt;/a&gt; に対応しているのが売りである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ide.atom.io/&#34;&gt;Atom IDE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どうも &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; は &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; とも両立するようになったらしい。
&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; は言語ごとのサブパッケージと組み合わせるようになっていて， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に対応しているものとしては &lt;a href=&#34;https://atom.io/packages/ide-go&#34;&gt;ide-go&lt;/a&gt; というパッケージがあるのだが，これがウチの環境では動いてくれんのよ。
&lt;a href=&#34;https://atom.io/packages/ide-go&#34;&gt;ide-go&lt;/a&gt; のバックエンドには &lt;a href=&#34;https://github.com/sourcegraph/go-langserver&#34; title=&#34;GitHub - sourcegraph/go-langserver: Go language server to add Go support to editors and other tools that use the Language Server Protocol (LSP)&#34;&gt;sourcegraph/go-langserver&lt;/a&gt; が動いているのだが，こいつが Windows と相性が悪い気がする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に関しては &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; があれば &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; は全く必要ないのだが，他の言語（たとえば &lt;a href=&#34;https://atom.io/packages/ide-typescript&#34;&gt;ide-typescript&lt;/a&gt; とか）用に入れてある。
そのうち統合されることがあるのだろうか。&lt;/p&gt;

&lt;h3 id=&#34;editorconfig&#34;&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;コード書きで &lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; を使わないやつは，もはや evil と言っていいだろう。
チームでソースコードのフォーマットを合わせるなら &lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; は必須だし，ひとりで作業するときもリポジトリに必ず &lt;code&gt;.editorconfig&lt;/code&gt; を含める習慣をつけていきたいものである。&lt;/p&gt;

&lt;h3 id=&#34;機能を直接埋め込む&#34;&gt;機能を直接埋め込む&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; では &lt;code&gt;init.coffee&lt;/code&gt; ファイルで機能を記述し組み込むことが出来る。
パッケージにするまでもない小さな処理などで重宝する。&lt;/p&gt;

&lt;p&gt;私が組み込んでいるのは以下の機能。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/&#34;&gt;ATOM Editor で現在日時を挿入する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-amazon-url-with-associate-id-in-atom-editor/&#34;&gt;ATOM Editor で Amazon Associate ID を含んだ商品 URL を生成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;日本語関連のパッケージ&#34;&gt;日本語関連のパッケージ&lt;/h3&gt;

&lt;p&gt;以降は簡単に箇条書きで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/auto-encoding&#34;&gt;auto-encoding&lt;/a&gt;&lt;/em&gt; ： 文字エンコーディングを自動で判定してくれる。 Shift-JIS や EUC-JP なファイルを開く時に重宝する。たまに間違うのがご愛嬌&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/japan-util&#34;&gt;japan-util&lt;/a&gt;&lt;/em&gt; ： 日本語用の文字変換パッケージ半角/全角変換や平仮名/片仮名変換とかしてくれる&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/show-ideographic-space&#34;&gt;show-ideographic-space&lt;/a&gt;&lt;/em&gt; ： いわゆる全角空白文字を視覚化してくれる。これがないとコンパイルエラー時にパニクるハメになる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:zs1&#34;&gt;&lt;a href=&#34;#fn:zs1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。見せ方は &lt;code&gt;styles.less&lt;/code&gt; ファイルでカスタマイズ可能&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;その他のお気に入りパッケージ&#34;&gt;その他のお気に入りパッケージ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/autoclose-html&#34;&gt;autoclose-html&lt;/a&gt;&lt;/em&gt; ： HTML 入力でタグを入力すると自動的に閉じタグを補完してくれる。便利なのだが HTML を直に弄ることが少なくなったので削除した&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/file-icons&#34;&gt;file-icons&lt;/a&gt;&lt;/em&gt; ： Tree View やタブのアイコン表示を見やすくしてくれる&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/language-lua&#34;&gt;language-lua&lt;/a&gt;&lt;/em&gt; ： Lua 言語用のパッケージ。 &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; に対応するものがないっぽいので。 &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; 用のバッチ処理等を書くのに Lua 言語を使うのよ&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/markdown-table-editor&#34;&gt;markdown-table-editor&lt;/a&gt;&lt;/em&gt; ： Markdown のテーブル作成支援パッケージ。めっさ便利&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/nav-panel-plus&#34;&gt;nav-panel-plus&lt;/a&gt;&lt;/em&gt; ： アウトライン表示。 &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; のアウトラインで表示できない言語（markdown 等）はこちらで。以前は &lt;a href=&#34;https://atom.io/packages/symbols-tree-view&#34;&gt;symbols-tree-view&lt;/a&gt; を使っていたが，こちらに乗り換えた&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/open-recent&#34;&gt;open-recent&lt;/a&gt;&lt;/em&gt; ： File メニューに “Open Recent” 項目を追加し，最近開いたファイルやプロジェクトを表示してくれる&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt;&lt;/em&gt; ： &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 内でターミナルを起動する。 shell  や環境変数を指定できるのが素敵。私は shell として &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; を指定している&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;未インストールだけど気になってるパッケージ&#34;&gt;未インストールだけど気になってるパッケージ&lt;/h2&gt;

&lt;p&gt;こちらも簡単に箇条書きで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/docblockr&#34;&gt;fdocblockr&lt;/a&gt;&lt;/em&gt; ： &lt;code&gt;/** */&lt;/code&gt; みたいなブロックコメントを生成してくれる。 Java とかならありがたいが &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は微妙&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/language-plantuml&#34;&gt;language-plantuml&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://atom.io/packages/plantuml-viewer&#34;&gt;plantuml-viewer&lt;/a&gt;&lt;/em&gt; ： PlantUML 用の言語パッケージと画像表示パッケージ。 SVG や PNG といった画像データとして保存できるのが素敵。 DOT 言語に変換されるので， &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; を用意する必要がある

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nakahashi/items/3d88655f055ca6a2617c&#34;&gt;AtomとPlantUMLで爆速UMLモデリング - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/k_nakayama/items/77ca73753ebd049a66de&#34;&gt;Atom+PlantUMLで見た目もいい感じのシーケンス図を作成する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/linter&#34;&gt;linter&lt;/a&gt;&lt;/em&gt; ： これ単独では使えなくて，言語ごとに lint パッケージを用意する必要がある。 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; が独自の強力な lint 機能を持っているため不要

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/pechefamille/items/40966a0c78846f4053c9&#34;&gt;AtomにESLint導入した - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://atom.io/packages/tablr&#34;&gt;tablr&lt;/a&gt;&lt;/em&gt; ： CSV ファイルをスプレッドシート風に表示・編集できる。小さいファイルならいいんだけど， CSV ファイルって大抵が巨大ファイルだからなぁ。結局 Office ツール使ったほうがよかったり&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://texwiki.texjp.org/?Atom&#34;&gt;Atom - TeX Wiki&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://employment.en-japan.com/engineerhub/entry/2017/08/10/110000&#34;&gt;［保存版］Atomエディタ 便利なパッケージ一覧！ 全23社のWebエンジニア・デザイナーがおすすめを紹介 - エンジニアHub｜若手Webエンジニアのキャリアを考える！&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/11/nyagos-with-atom/&#34;&gt;ATOM × NYAGOS ＝ ♥&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;ATOM で Go&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:tsundere1&#34;&gt;あっ，私ツンデレ属性とかないですから（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tsundere1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:zs1&#34;&gt;Windows 環境なら，全角空白文字の誤入力は IME のプロパティでスペース・キー押下で常に「半角空白」を入力するように設定すればほとんど防げるんだどね（全角空白を入力する場合は &lt;code&gt;shift-space&lt;/code&gt; 押下）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:zs1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM 1.18 stable リリースで公式に Git 機能に対応 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/06/atom-1_18/" />
		<id>tag:text.Baldanders.info,2017-06-21:/remark/2017/06/atom-1_18/</id>
		<published>2017-06-21T12:59:52+09:00</published>
		<updated>2017-06-21T12:59:52+09:00</updated>
		<summary>よーやくですよ！</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;先週 &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 1.18 の stable 版がリリースされたが，公式に &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; 機能が組み込まれたようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.atom.io/2017/06/13/atom-1-18.html&#34;&gt;Atom 1.18 | Atom Blog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://githubengineering.com/integrating-git-in-atom/&#34;&gt;Integrating Git in Atom | GitHub Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.atom.io/2017/05/16/git-and-github-integration-comes-to-atom.html&#34;&gt;Git and GitHub Integration comes to Atom | Atom Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://forest.watch.impress.co.jp/docs/news/1065638.html&#34;&gt;「Git」と“GitHub”を統合した「Atom」v1.18が正式版に ～GitHub製の無償エディター - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もともと core package として &lt;a href=&#34;https://atom.io/packages/git-diff&#34;&gt;git-diff&lt;/a&gt; は組み込まれていたのだが，実際のリポジトリ操作には &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; 等の外部パッケージを使わざるを得なかった。
これが &lt;a href=&#34;https://atom.io/packages/github&#34;&gt;github&lt;/a&gt; として core package に組み込まれ，リポジトリ操作が GUI で提供されることになったわけだ。
よーやくですよ！&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://blog.atom.io/2017/06/13/atom-1-18.html&#34;&gt;&lt;img src=&#34;http://blog.atom.io/img/posts/github-package-git.png&#34; srcset=&#34;http://blog.atom.io/img/posts/github-package-git.png 1560w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Atom 1.18&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://blog.atom.io/2017/06/13/atom-1-18.html&#34;&gt;Atom 1.18&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Stage や commit/amend や fetch/pull/push といった基本操作はもちろん，hunk&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:h&#34;&gt;&lt;a href=&#34;#fn:h&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; を選択して stage すること（&lt;code&gt;git add -p&lt;/code&gt; 相当）も GUI で可能なようだ。
よしよし。
ただし stash や cherry-pick といった細かい操作はできなさそうっぽい？&lt;/p&gt;

&lt;p&gt;ただ，良くも悪くも GUI なので「マウスやトラックパッドなんて飾りです。偉い人には...」な方々には従来通り &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; のほうがお勧めである。
余談だが，私は command palette を F1 キーに割り当てているが（秀丸を使っていた頃の名残）， &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; 専用のメニューは shift-F1 キーに割り当てている。
こんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cson&#34; data-lang=&#34;cson&#34;&gt;&amp;#39;.platform-win32&amp;#39;:
  &amp;#39;shift-f1&amp;#39;: &amp;#39;git-plus:menu&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もうひとつの機能である &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; との連携（今のところ pull request の表示のみ？）であるが，これを使うためには access token を取得して &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に登録する必要がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kz800/items/497ec70bff3e555dacd0&#34;&gt;GitHub「Personal access tokens」の設定方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では，たのしくお仕事しましょう！&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/git-commands/&#34;&gt;あまり使わないけど，たまに使おうとすると忘れてる Git コマンド集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:h&#34;&gt;変更箇所のひとかたまりを &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; では hunk と呼ぶ。 Hunk の概念は cherry-pick 時にも出てくるので覚えておくとお得。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:h&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>エディタ以上ワープロ未満の HackMD - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/04/hackmd/" />
		<id>tag:text.Baldanders.info,2017-04-06:/remark/2017/04/hackmd/</id>
		<published>2017-04-06T22:25:55+09:00</published>
		<updated>2018-03-06T11:00:35+09:00</updated>
		<summary>もうしばらく遊んでみて，よさげなら常用してみようかな，と。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;たとえばちょっとしたメモを取るとき。&lt;/p&gt;

&lt;p&gt;仕事なら紙のノートで手書きで書く。
「ちょっとしたメモ」なら手書きで走り書きの方がまだ速い（キーボード打ちながらメモを書けるし）。
その代り私の走り書きは酷い悪筆で私自身も読めないことがあるのが玉に瑕である（笑）&lt;/p&gt;

&lt;p&gt;仕事以外のことで目の前に紙のノートも PC もない場合は &lt;a href=&#34;https://simplenote.com/&#34;&gt;Simplenote&lt;/a&gt; を愛用するようになった。
&lt;a href=&#34;https://simplenote.com/&#34;&gt;Simplenote&lt;/a&gt; は SaaS 型のテキストエディタである。
Web 版のほか各種携帯端末用のアプリが揃っていて使い勝手がいい。&lt;/p&gt;

&lt;p&gt;ただ， &lt;a href=&#34;https://simplenote.com/&#34;&gt;Simplenote&lt;/a&gt; は良くも悪くもプレーンテキストのエディタで，まとまった情報を整理して書こうとするとイマイチである。
しかし仕事でもないのにワープロなんか使いたくないし，簡単な構造化テキストであれば markdown で書けた方がいい。&lt;/p&gt;

&lt;p&gt;で， markdown なテキストが書ける SaaS 型のエディタツールがないかなぁ，と思っていたのだが，どうも &lt;a href=&#34;https://hackmd.io/&#34; title=&#34;HackMD - 共同編集できるMarkdownノート&#34;&gt;HackMD&lt;/a&gt; が良さげな感じである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/&#34;&gt;HackMD - 共同編集できるMarkdownノート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hackmdio/hackmd/&#34;&gt;hackmdio/hackmd: Realtime collaborative markdown notes on all platforms.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://hackmd.io/&#34; title=&#34;HackMD - 共同編集できるMarkdownノート&#34;&gt;HackMD&lt;/a&gt; の特徴を以下に列挙してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT ライセンス。 Docker イメージも用意されていてオンプレミスな運用もできる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/&#34; title=&#34;HackMD - 共同編集できるMarkdownノート&#34;&gt;hackmd.io&lt;/a&gt; で提供される SaaS 版は以下の通り

&lt;ol&gt;
&lt;li&gt;自身はアカウント管理を行ってない。サインインは Facebook, Twitter, GitHub, Dropbox, Google のアカウントを利用できる。ちなみにサインインしなくても「ゲスト」として利用することも可能&lt;/li&gt;
&lt;li&gt;Markdown 記法で記述するが，かなり強力にカスタマイズされている

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/yaml-metadata&#34; title=&#34;Supported YAML metadata - HackMD&#34;&gt;YAML 形式によるページ制御&lt;/a&gt;ができる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;www.mathjax.org&#34;&gt;MathJax&lt;/a&gt; による数式表現が可能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;graphviz&lt;/a&gt;（DOT 言語）, &lt;a href=&#34;http://knsv.github.io/mermaid/&#34; title=&#34;mermaid - Generation of diagrams and flowcharts from text in a similar manner as markdown.&#34;&gt;mermaid&lt;/a&gt;，&lt;a href=&#34;https://bramp.github.io/js-sequence-diagrams/&#34; title=&#34;js-sequence-diagrams by bramp&#34;&gt;js-sequence-diagrams&lt;/a&gt;，&lt;a href=&#34;http://flowchart.js.org/&#34;&gt;flowchart.js&lt;/a&gt; の記法で作図ができる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://abcnotation.com/&#34;&gt;abc&lt;/a&gt; 記法で楽譜が書ける&lt;/li&gt;
&lt;li&gt;簡単な記述により YouTube, Vimeo, Gist, SlideShare, Speakerdeck のコンテンツを埋め込める&lt;/li&gt;
&lt;li&gt;タグを設定できる。タグをキーにした検索が可能&lt;/li&gt;
&lt;li&gt;その他，詳しくは「&lt;a href=&#34;https://hackmd.io/s/4JbKDCN1hx&#34; title=&#34;機能紹介 - HackMD&#34;&gt;機能紹介&lt;/a&gt;」で&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ed1&#34;&gt;&lt;a href=&#34;#fn:ed1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://imgur.com/&#34; title=&#34;Imgur: The most awesome images on the Internet&#34;&gt;imgur&lt;/a&gt; と連動している。アップロードした画像は自動的に &lt;a href=&#34;http://imgur.com/&#34; title=&#34;Imgur: The most awesome images on the Internet&#34;&gt;imgur&lt;/a&gt; に格納される&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ig&#34;&gt;&lt;a href=&#34;#fn:ig&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Dropbox, Google Drive, Gist へエクスポート可能&lt;/li&gt;
&lt;li&gt;Dropbox, Google Drive, Gist およびクリップボードからインポート可能&lt;/li&gt;
&lt;li&gt;markdown または HTML 形式でローカルにダウンロード可能&lt;/li&gt;
&lt;li&gt;基本的に誰でも編集でき誰でも閲覧できる。なお，編集・閲覧許可範囲を「サインイン・ユーザのみ」「オーナーのみ」に絞ることはできる。許可するユーザを指定したりはできないようだ（まぁアカウント管理をしてないからね）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:pv&#34;&gt;&lt;a href=&#34;#fn:pv&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;試しにちょろんと落書きしてみた。
（楽譜は無理。復活の呪文を唱えているようにしか見えん）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/s/S1thQI76e&#34;&gt;MathJax による数式表現。 - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/s/ByuxOLQag&#34;&gt;シーケンス図を描こう - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/s/S19e0LXTe&#34;&gt;クラス図を描こう - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/s/H1iq2i76e#&#34;&gt;フローチャートを描こう - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/s/Hkrec_Nae&#34;&gt;Go 言語で Hello World - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もうしばらく遊んでみて，よさげなら常用してみようかな，と。&lt;/p&gt;

&lt;h2 id=&#34;追記-メタデータについて&#34;&gt;【追記】 メタデータについて&lt;/h2&gt;

&lt;p&gt;上で述べたように &lt;a href=&#34;https://hackmd.io/&#34; title=&#34;HackMD - 共同編集できるMarkdownノート&#34;&gt;HackMD&lt;/a&gt; では YAML 形式によるページ制御ができる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/yaml-metadata&#34;&gt;Supported YAML metadata - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的には先頭行に以下の記述を加える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;YAML&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;metas&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;設定項目は色々あるが，私は必ず以下の設定をするようにしている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;robots&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;noindex&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;nofollow&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;lang&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ja&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;dir&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;ltr&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;breaks&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;robots&lt;/code&gt; 項目は &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 要素に robots を設定する。
検索エンジンや他ページの referer に拾われたくない場合は &lt;code&gt;noindex, nofollow&lt;/code&gt; をセットしておけばいい。
ただし行儀のいい crawler や Web サイトばかりではないので，その辺はあしからず。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lang&lt;/code&gt; 項目はページに国・言語情報を設定する，筈なのだが利いてないようである（既定の &lt;code&gt;en&lt;/code&gt; のまま）。
まぁそのうち有効になると信じて。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dir&lt;/code&gt; 項目は文字の向き（右向き・左向き）を指定する。
既定は &lt;code&gt;ltr&lt;/code&gt; （左→右向き）なのでなくてもいいのだが，一応設定しておく。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;breaks&lt;/code&gt; 項目は markdown 入力の改行をそのまま HTML 表示に反映（hard break）させるかどうか指定する。
既定は &lt;code&gt;true&lt;/code&gt;。
この辺は好みで。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nulab-inc.com/ja/blog/nulab/hackmd-hack/&#34;&gt;リアルタイム共同編集可能なMarkdownエディタ「HackMD」をハックしてみた| Nulab (Japanese)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.share-wis.com/esa-and-hackmd&#34;&gt;esa.ioと HackMDでつくるいい感じの議事録&amp;amp;ドキュメント管理 | ShareWis Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nelog.jp/hackmd&#34;&gt;クラウド上にMarkdownで手軽にメモを残せる無料ツール「HackMD」が便利&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ed1&#34;&gt;編集画面で見出し単位で表示の畳み込みができるのが地味に便利。アウトライン編集に使える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ed1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ig&#34;&gt;&lt;a href=&#34;http://imgur.com/&#34; title=&#34;Imgur: The most awesome images on the Internet&#34;&gt;imgur&lt;/a&gt; への画像の登録は匿名アカウントで行われ後から削除できない。したがって間違ってアップロードしても取り消せないし，ましてや公開できない画像をアップロードするのは以っての外である。ご注意を。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ig&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:pv&#34;&gt;言うまでもないが，パスワード等の秘密情報，プライバシーに関わる情報（個人情報を含む），その他公開できない情報をこのサービスに載せないこと。一応 private モードにすればオーナー以外は編集・閲覧できないが，この手のサービスは信用しすぎないのが肝要である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:pv&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM 1.14 stable がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/02/atom-1_14-stable-released/" />
		<id>tag:text.Baldanders.info,2017-02-09:/remark/2017/02/atom-1_14-stable-released/</id>
		<published>2017-02-09T21:01:02+09:00</published>
		<updated>2017-02-15T10:04:51+09:00</updated>
		<summary>今回の目玉は，なんといっても Windows 版において64ビット版が登場したこと。ぶらぼー！</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 1.14 の stable がリリースされている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/atom/atom/releases/tag/v1.14.0&#34;&gt;Release 1.14.0 · atom/atom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.atom.io/2017/02/08/atom-1-14.html&#34;&gt;Atom 1.14 - Atom Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回の目玉は，なんといっても Windows 版において64ビット版が登場したこと。
ぶらぼー！&lt;/p&gt;

&lt;p&gt;これまでの32ビット版から64ビット版に換装するには上書きインストールでよさげ。
Portable 版を使っている人はインストール先を分けて「とりあえず試してみる」でもいいかもしれない。&lt;/p&gt;

&lt;p&gt;（最初 &lt;code&gt;AtomSetup-x64.msi&lt;/code&gt; ファイルでインストールしようとしたのだがうまくいかなかった。 &lt;code&gt;AtomSetup-x64.exe&lt;/code&gt; ファイルならうまくいく）&lt;/p&gt;

&lt;p&gt;そしてもうひとつの目玉は，巨大ファイルのパフォーマンス向上だ。
基本コンポーネントを C++ で実装し直したようだ。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;A fundamental component of the text editor called the display layer has been redesigned to rely on a new data structure that is implemented in C++. These changes enable Atom to open larger files more quickly while using much less memory. Improvements in this area are ongoing, so expect more in upcoming releases.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://blog.atom.io/2017/02/08/atom-1-14.html&#34;&gt;Atom 1.14&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ちうことで，以降のバージョンでは更によくなるらしい。
期待しましょう。&lt;/p&gt;

&lt;h2 id=&#34;platformio-ide-terminal-が動かない&#34;&gt;&lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt; が動かない&lt;/h2&gt;

&lt;p&gt;ところで Windows 64ビット版に換装したら &lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt; が動かなくなった。
ターミナル・ウィンドウは開くけど shell が立ち上がってこない。
困るなぁ。
まぁ，最悪ターミナルは別に &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; を使うからいいんだけど...&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;https://github.com/platformio/platformio-atom-ide-terminal/issues/155&#34; title=&#34;Not working with Atom 1.14 · Issue #155 · platformio/platformio-atom-ide-terminal&#34;&gt;Issue&lt;/a&gt; として既に上がっているようだ。はやく直ってぇ）&lt;/p&gt;

&lt;p&gt;（追記）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt; 2.2.3 で修正された。
ありがとう！&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM × NYAGOS ＝ ♥ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/11/nyagos-with-atom/" />
		<id>tag:text.Baldanders.info,2016-11-20:/remark/2016/11/nyagos-with-atom/</id>
		<published>2016-11-20T16:29:24+09:00</published>
		<updated>2016-11-20T16:29:24+09:00</updated>
		<summary>やっとこれで Windows 環境でも ATOM にターミナル・エミュレータが導入できるようになった。しかも NYAGOS が動く。素晴らしい！</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 上で動くターミナル・エミュレータはいくつかあるが，大抵は UNIX 互換環境を前提としたもので Windows では動かなかったり特別なインストール手順を要するものが殆どで使う気にならなかったりする。
そんな中で &lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt; は Windows 環境でも簡単に導入できる優れもののようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://labs.spiffield.net/archives/508&#34;&gt;Atomのterminal-plusが動かないのでplatformio-ide-terminalを入れてみた | spiffieldLabs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kmry2045/items/b61a000ff257c01720e4&#34;&gt;ATOMエディタではじめるマイナー言語探訪(あんま怖くないNim②) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インストールは，他のパッケージと同じように， Settings の Install から選択してインストールすれば OK。
マジ簡単。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552246/&#34;&gt;&lt;img src=&#34;https://c7.staticflickr.com/6/5820/31089552246_cc66a5a325.jpg&#34; srcset=&#34;https://c7.staticflickr.com/6/5820/31089552246_cc66a5a325.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;platformio-ide-terminal (1)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552246/&#34;&gt;platformio-ide-terminal (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ふむむ。
どうやら既定では PawerShell が立ち上がるようだ。
ってことは他の shell でもいけるんじゃね？&lt;/p&gt;

&lt;p&gt;ということで Settings を見ると&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552576/&#34;&gt;&lt;img src=&#34;https://c1.staticflickr.com/6/5339/31089552576_cfa8e26522.jpg&#34; srcset=&#34;https://c1.staticflickr.com/6/5339/31089552576_cfa8e26522.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;platformio-ide-terminal (2)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552576/&#34;&gt;platformio-ide-terminal (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おおっ。
やっぱり shell を変えられるんだ。
ほんじゃあ &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; を入れてみよっか。
「Shell Override」の項目に &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; をフルパスで指定して  &lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt; を起動する。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552456/&#34;&gt;&lt;img src=&#34;https://c1.staticflickr.com/6/5615/31089552456_609a1b8c62.jpg&#34; srcset=&#34;https://c1.staticflickr.com/6/5615/31089552456_609a1b8c62.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;platformio-ide-terminal (3)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552456/&#34;&gt;platformio-ide-terminal (3)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おおおおっ！ なにこれ素敵。
&lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; であれば UTF-8 を受け入れるので文字コードがどうとかあまり考えなくてよい。&lt;/p&gt;

&lt;p&gt;ん？ 待てよ。
ってことは git bash もいけるのか？ では同じように「Shell Override」の項目に git bash をフルパスで指定指定して  &lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt; を起動してみる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552546/&#34;&gt;&lt;img src=&#34;https://c3.staticflickr.com/6/5745/31089552546_7a38f046da.jpg&#34; srcset=&#34;https://c3.staticflickr.com/6/5745/31089552546_7a38f046da.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;platformio-ide-terminal (4)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/31089552546/&#34;&gt;platformio-ide-terminal (4)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;よいではないか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/platformio-ide-terminal&#34;&gt;platformio-ide-terminal&lt;/a&gt; を起動する際は， Windows では， &lt;code&gt;alt-shift-T&lt;/code&gt; を押下すればいいのだが，キーを3つ押さえるのは得意ではないので &lt;code&gt;ctrl-f1&lt;/code&gt; に振り直した。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cson&#34; data-lang=&#34;cson&#34;&gt;&amp;#39;.platform-win32 atom-workspace&amp;#39;:
  &amp;#39;ctrl-f1&amp;#39;: &amp;#39;platformio-ide-terminal:new&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あぁ。
やっとこれで Windows 環境でも &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にターミナル・エミュレータが導入できるようになった。
しかも &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; が動く。
素晴らしい！&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>【ATOM Editor】 EditorConfig を使うなら Whitespace は不要 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/10/warnig-from-editorconfig-at-atom/" />
		<id>tag:text.Baldanders.info,2016-10-29:/remark/2016/10/warnig-from-editorconfig-at-atom/</id>
		<published>2016-10-29T22:27:00+09:00</published>
		<updated>2016-10-29T22:27:00+09:00</updated>
		<summary>EditorConfig と Whitespace のどちらを優先するかは人によって違うだろうが，少なくともコード書きなら EditorConfig を優先することを強くお勧めする。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;日本シリーズ楽しんでますか？ やっぱ日ハムは強いねぇ。
指揮官が無能で選手の勢いだけで優勝したどこぞのチームとは格が違う。
まぁ，最初の2連勝で夢を見させていただいただけでもよしとしましょう。&lt;/p&gt;

&lt;p&gt;ところで &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の &lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; が 1.7 になって面白いワーニングを吐くようになった。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/30550165591/&#34;&gt;&lt;img src=&#34;https://c2.staticflickr.com/6/5761/30550165591_c0ca944e12_o.png&#34; srcset=&#34;https://c2.staticflickr.com/6/5761/30550165591_c0ca944e12_o.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;warning from editorconfig @atom&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/30550165591/&#34;&gt;warning from editorconfig @atom&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;どうやら &lt;code&gt;trim_trailing_whitespace&lt;/code&gt; と &lt;code&gt;insert_final_newline&lt;/code&gt; に対応したらしいんだけど， Core Package の &lt;a href=&#34;https://atom.io/packages/whitespace&#34;&gt;whitespace&lt;/a&gt; と conflict しているようだ。
この場合は &lt;a href=&#34;https://atom.io/packages/whitespace&#34;&gt;whitespace&lt;/a&gt; を Disable にすれば解消する（&lt;a href=&#34;https://atom.io/packages/whitespace&#34;&gt;whitespace&lt;/a&gt; は Core Package なので削除できない）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; と &lt;a href=&#34;https://atom.io/packages/whitespace&#34;&gt;whitespace&lt;/a&gt; のどちらを優先するかは人によって違うだろうが，少なくともコード書きなら &lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; を優先することを強くお勧めする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; は入力テキストの文字エンコーディングや改行コードなどを設定する機能で，プロジェクトのルート・フォルダに &lt;code&gt;.editorconfig&lt;/code&gt; ファイルを設置しておけば &lt;strong&gt;利用環境に関係なく&lt;/strong&gt; 設定を統一できる。
対応しているエディタも多く， Vim や Emacs や Notepad++, Sublime Text といった定番のテキストエディタはもちろん， Eclipse, Visual Studio (Code), IntelliJ IDEA, WebStorm といった IDE (Integrated Development Environment) でも対応している。
もちろん &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; も&lt;a href=&#34;https://atom.io/packages/editorconfig&#34; title=&#34;editorconfig&#34;&gt;対応している&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;設定可能な項目は以下の6つ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;indent_style&lt;/code&gt; はインデントのスタイルを指定する。 &lt;code&gt;tab&lt;/code&gt; または &lt;code&gt;space&lt;/code&gt; を指定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indent_size&lt;/code&gt; はインデントの幅を指定する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end_of_line&lt;/code&gt; は改行コードを指定する。 &lt;code&gt;lf&lt;/code&gt;, &lt;code&gt;cr&lt;/code&gt;, &lt;code&gt;crlf&lt;/code&gt; から選択できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chaset&lt;/code&gt; は文字エンコーディングを指定する。 &lt;code&gt;latin1&lt;/code&gt;, &lt;code&gt;utf-8&lt;/code&gt;, &lt;code&gt;utf-8-bom&lt;/code&gt;, &lt;code&gt;utf-16be&lt;/code&gt; or &lt;code&gt;utf-16le&lt;/code&gt; から選択できる。残念ながらこれ以外の文字エンコーディングについては動作不定（エディタ側の実装による）である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:u&#34;&gt;&lt;a href=&#34;#fn:u&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trim_trailing_whitespace&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にすると行末の空白文字を削除してくれる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert_final_newline&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にするとファイルの末尾が改行文字ではない場合に補完してくれる&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらの項目をファイルの種別ごとに設定できる。
ちなみに私が仕事以外でよく使う設定はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;nx&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;end_of_line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lf&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;charset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;utf&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;-8&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;indent_style&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tab&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;indent_size&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;trim_trailing_whitespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;insert_final_newline&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;insert_final_newline&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;md&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;indent_style&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;space&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;indent_size&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;trim_trailing_whitespace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;チームでこうした設定を決めてプロジェクトに組み込んでおけば文字エンコーディングや改行コードやインデント幅といった馬鹿らしいことで悩むことなく作業に専念できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:u&#34;&gt;まぁ Unicode が使えない国と地域以外で今更 Unicode を使わない手はないと思うけどね。&lt;a href=&#34;http://qiita.com/kawasima/items/41632dbd423dc0445e14&#34; title=&#34;Shift_JIS文化からUTF-8への移行ガイド - Qiita&#34;&gt;面倒なことも多い&lt;/a&gt;けど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:u&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Android で使えるテキストエディタ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/05/text-editor-for-android/" />
		<id>tag:text.Baldanders.info,2016-05-05:/remark/2016/05/text-editor-for-android/</id>
		<published>2016-05-05T00:35:18+09:00</published>
		<updated>2016-05-05T00:35:18+09:00</updated>
		<summary>どうも Jota&#43; ってのがいいらしい。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;わけあって Android で使えるテキストエディタを物色中。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/column/ide/151/&#34;&gt;イマドキのIDE事情 (151) メモからプログラミングまで!? Android上で動作するテキストエディタたち | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どうも &lt;a href=&#34;https://play.google.com/store/apps/details?id=jp.sblo.pandora.jota.plus&#34; title=&#34;Jota+ (Text Editor) - Google Play&#34;&gt;Jota+&lt;/a&gt; ってのがいいらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=jp.sblo.pandora.jota.plus&#34; title=&#34;Jota+ (Text Editor) - Google Play&#34;&gt;Jota+&lt;/a&gt; 自身は無料だが &lt;a href=&#34;https://play.google.com/store/apps/details?id=jp.sblo.pandora.jota.plus.prokey&#34;&gt;PRO-KEY&lt;/a&gt; を購入して activation すると色々いいことがある。
まず広告表示を無効にできる。
あとストレージのアクセスに &lt;a href=&#34;http://developer.android.com/intl/ja/guide/topics/providers/document-provider.html&#34;&gt;Storage Access Framework&lt;/a&gt; が使えるようになる。
これは特にクラウド・ストレージを利用する際に便利だ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=jp.sblo.pandora.jota.plus&#34; title=&#34;Jota+ (Text Editor) - Google Play&#34;&gt;Jota+&lt;/a&gt; 自身も内臓機能でクラウド・ストレージにアクセスできるのだが，サービスごとに connector アプリを入れる必要がある。
SAF を有効にしておけばバックグラウンドで &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.box.android&#34;&gt;Box&lt;/a&gt; や &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dropbox.android&#34;&gt;Dropbox&lt;/a&gt; を起動した上で SAF 経由で各サービスにアクセスできる。&lt;/p&gt;

&lt;p&gt;って，これって少なくともテキスト情報に限れば &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.evernote&#34;&gt;Evernote&lt;/a&gt; や &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.keep&#34;&gt;Google Keep&lt;/a&gt; は要らないってことか。
善き哉。&lt;/p&gt;

&lt;p&gt;そうそう。
&lt;a href=&#34;https://play.google.com/store/apps/details?id=jp.sblo.pandora.jota.plus&#34; title=&#34;Jota+ (Text Editor) - Google Play&#34;&gt;Jota+&lt;/a&gt; は既定で &lt;a href=&#34;https://sites.google.com/site/aquamarinepandora/jotaplusja/privacypolicyja&#34;&gt;Google Analysis による情報収集&lt;/a&gt;を行っている。
これは設定で無効にできるので，気に入らないのであれば無効にすることをお薦めする。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 2016年熊本地震 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/17-stories/" />
		<id>tag:text.Baldanders.info,2016-04-17:/remark/2016/04/17-stories/</id>
		<published>2016-04-17T15:38:38+09:00</published>
		<updated>2016-05-06T21:58:47+09:00</updated>
		<summary>2016年熊本地震 / 三半規管に異常あり / ATOM 1.7 と Visual Studio Code 1.0 が登場 / Windows 版 QuickTime がようやく終了 / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;疲れが溜まってるのか，ここのところ自宅帰って飯食ったらそのまま寝落ちしていることが多い。
妙に怒りっぽくなってるし（路面電車で隣に人が座っただけでイラッとする）気をつけないとなぁ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#eq&#34;&gt;2016年熊本地震&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#astro&#34;&gt;三半規管に異常あり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#edit&#34;&gt;ATOM 1.7 と Visual Studio Code 1.0 が登場&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#qt&#34;&gt;Windows 版 QuickTime がようやく終了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;eq&#34;&gt;2016年熊本地震&lt;/h2&gt;

&lt;p&gt;まずは被災された方々にはお見舞い申し上げます。
地震関連 tweets をチェックしてたけど直下型のせいか M4, M5 クラスの余震でも震度5とか結構あって，これはちょっとキツいよね。
特に夜中の地震はトラウマで不眠症になったりするのでホンマに大変だと思います。
私自身は今は自分のことで手一杯なので何もできないのですが，まずは事態が落ち着いてくれることを祈ります。&lt;/p&gt;

&lt;p&gt;大きな災害なので流石にテレビ報道も見たんだけど，やっぱテレビはクズだね。
ヘリで上空から中継してる映像とかあるんだけど，あれ地上から「ウザい」と思われてるの知っててやってるのかね。
様々な映像を見るだに「日本のマスコミはクソ」としか言いようがない。&lt;/p&gt;

&lt;p&gt;でも国土地理院の &lt;a href=&#34;http://psgsv2.gsi.go.jp/koukyou/public/uav/&#34;&gt;UAV (Unmanned Aerial Vehicle)&lt;/a&gt; で空撮した映像はいいね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gsi.go.jp/BOUSAI/H27-kumamoto-earthquake-index.html&#34;&gt;平成２８年熊本地震に関する情報｜国土地理院&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/DXTAAvVB2M8&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DXTAAvVB2M8&#34;&gt;【国土地理院】　南阿蘇村河陽周辺の断層 - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;人が容易に入れないようなところでも drone なら入れるし，軽い荷物なら配送できる drone とかもあると聞くので，もっとこういう技術を活用したらいいと思うよ。&lt;/p&gt;

&lt;p&gt;危機状態に求められるリーダーと平時のリーダーとでは要件が異なる。
「政治判断」しかできない官僚・政治家や官僚的体質の企業・組織は危機状態に機能しないどころか障害になる。
彼らをバイパスして必要な情報や判断を必要な人に行き渡らせ有機的に連携できるか。
Crisis Management って結局はそういうことなんだよね。&lt;/p&gt;

&lt;p&gt;小川一水さんの『復活の地』でも読んで勉強しなはれ（笑）&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;【拡散希望】『阪神大震災被災者からのお願い』　嬉しいんです！嬉しいんですけどその援助、もうちょっとだけ待って下さい！ &lt;a href=&#34;https://t.co/2BgwW00mRx&#34;&gt;pic.twitter.com/2BgwW00mRx&lt;/a&gt;&lt;/p&gt;&amp;mdash; 澤田 圭 ｷｬﾗｸﾀｰﾃﾞｻﾞｲﾅｰ (@keisawada) &lt;a href=&#34;https://twitter.com/keisawada/status/721306607389253632&#34;&gt;2016年4月16日&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;関連ブックマーク-随時追記予定&#34;&gt;関連ブックマーク（随時追記予定）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eri.u-tokyo.ac.jp/?page_id=183&amp;amp;id=12595&#34;&gt;平成28年（2016年）熊本地震（M6.5）の地学的背景と布田川断層帯・日奈久断層帯について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.mext.go.jp/component/a_menu/other/detail/__icsFiles/afieldfile/2016/04/17/1369832_002.pdf&#34;&gt;2016年4月17日地震調査委員会評価文（熊本地方地震） &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.mext.go.jp/component/a_menu/other/detail/__icsFiles/afieldfile/2016/04/17/1369832_003.pdf&#34;&gt;平成28 年4 月17日地震調査委員会図表（熊本地方地震） &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kumamoto-jishin.info/map.html&#34;&gt;避難所、給水、配給、空いているスーパーなどについてgooglemapまとめ | 熊本地震 情報掲示板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/news/archive/gsi_kumamoto_160418.html&#34;&gt;熊本地震で観測した電子基準点の変位を、国土地理院がいち早く公表｜ニュース/アーカイブ｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hiroshima-u.ac.jp/news/show/id/25510&#34;&gt;広島大学　熊本県熊本地方を震源とする地震に関する記者説明会を開催しました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160415_01.html&#34;&gt;2016年4月15日ニュース「熊本の大地震は横ずれ断層型 震源浅く揺れ大きく」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160418_01.html&#34;&gt;2016年4月18日ニュース「本震と余震は別の断層帯で発生 地震調査委と気象庁が見解」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160418_02.html&#34;&gt;2016年4月18日ニュース「被害状況を動画で公開 国土地理院がドローンで調査」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pref.kumamoto.jp/kiji_15425.html?type=top&#34;&gt;平成28年熊本地震に伴う被災地救援等のために使用する車両の取り扱いについて / 熊本県&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/usage/userreport/hinanpass_160420.html&#34;&gt;オープンデータで避難所地図を表示する「ヒナンパス」が、熊本地震に暫定対応｜利用者向け情報｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qzss.go.jp/news/archive/its-jp_160419.html&#34;&gt;熊本地震で、ITSJapanが乗用車・トラックの通行実績情報を提供｜ニュース/アーカイブ｜準天頂衛星システム（QZSS）公式サイト - 内閣府&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openstreetmap.jp/node/779&#34;&gt;熊本地震への対応について | OpenStreetMap Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.city.kumamoto.jp/hpkiji/pub/detail.aspx?c_id=5&amp;amp;type=top&amp;amp;id=12541&#34;&gt;災害ボランティアの受入について / 熊本市ホームページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pref.hiroshima.lg.jp/soshiki/4/kumamoto-kiki02.html&#34;&gt;平成２８年熊本地震に伴う被災地救援などのために使用する車両の取扱について - 広島県ホームページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;astro&#34;&gt;三半規管に異常あり&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://fanfun.jaxa.jp/jaxatv/files/20160415_hitomi.pdf&#34;&gt;Ｘ線天文衛星「ひとみ」（ASTRO-H）の状況について &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/space/2016_04_15_asrtoh.html&#34;&gt;X線天文衛星「ひとみ」、2重のトラブルで「自分で回った」と推定 | Sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2016/04/20160419_hitomi_j.html&#34;&gt;JAXA | X線天文衛星「ひとみ」（ASTRO-H）の状況について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/04/20160420_01.html&#34;&gt;2016年4月20日ニュース「姿勢制御装置が誤作動 通信途絶えた天文衛星『ひとみ』」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/02/2016_04_26_astroh.html&#34;&gt;X線天文衛星「ひとみ」、浮かび上がった3つの問題点 | sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;小天体かデブリにでもぶち当たったのかと思ったが，擬人化するなら三半規管の異常で「ピヨった」状態らしい。
太陽電池パネルの一部が千切れるほどの高速回転って相当だと思うけど。&lt;/p&gt;

&lt;p&gt;JAXA は通信が回復する可能性を期待して受信体制を続けるようだが，これは難しいんじゃないかなぁ。
宇宙じゃ「ちょいと行ってきて直す」とかできないからねぇ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ht&#34;&gt;&lt;a href=&#34;#fn:ht&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;edit&#34;&gt;ATOM 1.7 と Visual Studio Code 1.0 が登場&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20160414_753303.html&#34;&gt;GitHub、オープンソースのテキストエディター「Atom」の最新正式版v1.7を公開 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20160415_753468.html&#34;&gt;Microsoft製の無償コードエディター「Visual Studio Code」がv1.0.0に - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/visual_studio_code10.html&#34;&gt;オープンソースの開発ツール「Visual Studio Code」が正式版となるバージョン1.0に到達 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/74th/items/12521790a1c680af934c&#34;&gt;1.0になったVisualStudioCodeの強みと弱点 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は Windows 版の &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を使ってるんだけど， tree view からのファイル削除をしくじるんだよなぁ（&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; というより &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にインストールしているパッケージのせいかもしれんけど）。
多分あれって Windows のファイルシステムのせいだよなぁ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/why-i-use-cmd-on-windows.htm&#34;&gt;Big Sky :: Windows ユーザは cmd.exe で生きるべき。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt; はいい製品に育ったねぇ。
私は既に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; をメインに使ってるけど，これは「ちょっと使ってみようかな」と思わせる製品になった。&lt;/p&gt;

&lt;p&gt;最近の Microsoft は .NET Core と &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt; がいい感じである。
逆に Windows 10 は過剰なコントロールでどんどんダメな OS になっていく。
もう Microsoft も Windows は事実上見捨ててるのだろう。&lt;/p&gt;

&lt;h2 id=&#34;qt&#34;&gt;Windows 版 QuickTime がようやく終了&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.us-cert.gov/ncas/alerts/TA16-105A&#34;&gt;Apple Ends Support for QuickTime for Windows; New Vulnerabilities Announced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/ta/JVNTA92371676/&#34;&gt;JVNTA#92371676: QuickTime for Windows に複数のヒープバッファオーバフローの脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mac 版とかはどうか知らないが， Windows 版の QuickTime は最初からクソッタレな実装だった。
しかも当時は iTunes と抱き合わせでインストールされるので容易に捨てられず往生した覚えがある。&lt;/p&gt;

&lt;p&gt;CVSSv3 基本値は 6.3 なので「要注意」レベルだが，サポートされない製品を入れておく理由はない。
危険物はとっとと捨てましょう。&lt;/p&gt;

&lt;h2 id=&#34;other&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/linking-to-pirated-content-is-not-copyright-infringement-160407/&#34;&gt;Linking to Pirated Content Is Not Copyright Infringement, Says EU Court Adviser - TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35081244/&#34;&gt;カナダ警察、「BlackBerry」のマスター暗号化キーを入手していた--メッセージの解読に利用 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eff.org/deeplinks/2016/04/white-house-source-code-policy-big-win-open-government&#34;&gt;White House Source Code Policy a Big Win for Open Government | Electronic Frontier Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/topics/alert280413.html&#34;&gt;【注意喚起】ランサムウェア感染を狙った攻撃に注意：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/blog/2016/04/working-on-html5-1/&#34;&gt;Working on HTML5.1 | W3C Blog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/w3c/html&#34;&gt;w3c/html: Working Draft of the HTML specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/16/w3chtml519github.html&#34;&gt;W3C、「HTML5.1」を今年9月に勧告とする計画。仕様はGitHubで公開 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.globalvoices.org/2016/04/13/40418/&#34;&gt;中国は「オーウェル風ディストピア」？「社会信用制度」とは · Global Voices 日本語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.creativecommons.org/2016/04/14/japanese-beatmaking-event-producers-create-cc-remixes-just-four-hours/&#34;&gt;At Japanese Beatmaking Event, Producers Create CC Remixes in Just Four Hours - Creative Commons blog - Creative Commons&lt;/a&gt; : 日本のイベントに本家 CC が反応していることに驚いた。昨年のソウルのイベントでは CCjp はほぼ無視してたのにね&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q2/000386.html&#34;&gt;[Announce] Libgcrypt 1.7.0 released&lt;/a&gt; : SHA-3 や ChaCha など新しいアルゴリズムが登場&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJOESS6/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ymtvyHUmL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJOESS6/baldandersinf-22/&#34;&gt;復活の地１&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;小川一水 &lt;/dd&gt;&lt;dd&gt;早川書房 2012-09-15&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKEY/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKEY.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;復活の地２&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKG2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKG2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;復活の地３&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKDK/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKDK.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;第六大陸２&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKDU/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKDU.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;第六大陸1&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00GJMUKYO/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00GJMUKYO.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天涯の砦&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;コミカライズ版もある。てか，コミカライズ版を最初に読んだ（笑） 大きな災害がある度にこの作品を思い出す。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-04-17&#34;&gt;2016-04-17&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ht&#34;&gt;ハッブル望遠鏡の時はスペースシャトルが運用されていた時代なので，望遠鏡のところまで行って修理したけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ht&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
