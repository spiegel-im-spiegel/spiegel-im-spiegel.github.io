<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Unix Time - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/unix-time/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/unix-time/index.xml" />
	<id>tag:text.Baldanders.info,2018-10-07:/tags</id>
	<updated>2018-10-07T21:48:19+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.49.1</generator>

	
	<entry>
		<title>UNIX 時刻に関する四方山話 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/10/unix-time/" />
		<id>tag:text.Baldanders.info,2018-10-07:/remark/2018/10/unix-time/</id>
		<published>2018-10-07T21:48:19+09:00</published>
		<updated>2018-10-11T12:44:21+09:00</updated>
		<summary>UNIX 時刻について色々と補足を交えながら簡単に紹介してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Nimimal/items/8b2de87a6870707ba60a&#34;&gt;（Tips）これから100年のunix時間は10桁数字。５桁の固定長文字列でも表現できる。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事はなかなか面白かったが UNIX 時刻&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c1&#34;&gt;&lt;a href=&#34;#fn:c1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;  に関する説明がざっくりしすぎているので，補足を交えながら簡単に紹介してみる。&lt;/p&gt;

&lt;h2 id=&#34;時刻系に関するおさらい&#34;&gt;時刻系に関するおさらい&lt;/h2&gt;

&lt;p&gt;UNIX 時刻の説明に入る前に，前提となる時刻系についておさらいしておこう。&lt;/p&gt;

&lt;p&gt;時刻系というのは，時間および時刻を測るために地球人類が考えた「決まりごと」である。
「決まりごと」なので「正しい時刻系」というのは存在しない。
強いて言うなら「考えた人の数だけ時刻系が存在する」。
とはいえ，やたら滅多に林立しても困るので，ある程度の統一を図る必要がある。&lt;/p&gt;

&lt;p&gt;時刻系の歴史について語ると長くなるので，ここでは現代の日常生活に関係の深い2つの時刻系のみ紹介する。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;世界時系&lt;/strong&gt; : 私達は太陽の日周運動&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:s1&#34;&gt;&lt;a href=&#34;#fn:s1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; を基準に生活している。
そこで昔の人は，この日周運動を時刻の基準にすればいいと考えた。
つまり天球&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cs1&#34;&gt;&lt;a href=&#34;#fn:cs1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; 上の平均太陽 (mean solar)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ms1&#34;&gt;&lt;a href=&#34;#fn:ms1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; と子午線との時角を &lt;strong&gt;観測&lt;/strong&gt; し，そこから基準となる時間（の長さ）を決めればいいわけだ。
こうして決めた時刻系を世界時系と呼ぶ。
世界時系の代表が UT (世界時; universal time)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ut1&#34;&gt;&lt;a href=&#34;#fn:ut1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; である。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原子時系&lt;/strong&gt; : いわゆる原子時計のこと。
最初の原子時計の &lt;strong&gt;定義&lt;/strong&gt; は「セシウム133原子の基底状態における2つの超微細準位（$F=4, M=0$ および $F=3, M=0$）の間の遷移に対応する放射の周期の9,192,631,770倍を1秒とする」というもので，基本的に現在でもこの定義が踏襲されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:si1&#34;&gt;&lt;a href=&#34;#fn:si1&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
この原子時計に対して1958年1月1日0時0分0秒 UT2 を原点とした経過時間を TAI (国際原子時; international atomic time) と呼ぶ。
ちなみに GPS の時計も原子時系の一種である。&lt;/p&gt;

&lt;p&gt;世界時系は私達の日常生活にマッチしているが観測値であり一定の時間を刻まない。
原子時系は定義された一定の時間を刻む&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:at1&#34;&gt;&lt;a href=&#34;#fn:at1&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; が日常生活の基準である世界時系から僅かずつ乖離していく。&lt;/p&gt;

&lt;p&gt;UT と TAI を整合させるために考えられたのが UTC (協定世界時; coordinated universal time) である。
UTC は原子時系の一種だが， UT1 との差が1秒未満になるよう閏秒による調整が行われる。
閏秒による調整は不定期だが，遅くとも半年前には告知される。&lt;/p&gt;

&lt;p&gt;現在の UTC は1972年1月1日から運用を開始している。
運用開始時点では $TAI - UTC = 10\,\mathrm{sec}$ だったが，2017年1月1日時点では37秒まで拡大している&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ls1&#34;&gt;&lt;a href=&#34;#fn:ls1&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;unix-時刻-unix-time-とは&#34;&gt;UNIX 時刻（UNIX Time）とは&lt;/h2&gt;

&lt;p&gt;いよいよ本題へ。&lt;/p&gt;

&lt;p&gt;大抵の文献では， POSIX 標準の UNIX 時刻の定義は「1970年1月1日0時0分0秒 UTC からの経過秒数」となっていて，かつては32ビット符号付き整数値で表されていた。
32ビットつまり4オクテット固定長データで表現できるためとても重宝されたが，2,147,483,647秒までしか表現できないため，2038年1月19日3時14分7秒より以降は桁あふれをおこしてしまう。
これがいわゆる「2038年問題」である。&lt;/p&gt;

&lt;h3 id=&#34;2038年問題-の回避策&#34;&gt;「2038年問題」の回避策&lt;/h3&gt;

&lt;p&gt;「2038年問題」の回避方法としては以下の2つがある。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UNIX 時刻を32ビット符号なし整数で表す&lt;/strong&gt; : 場当たり的な対処だが時刻を表すデータの長さを変更することなく移行できるため，古いデータ・フォーマットをそのまま流用できる利点がある。
ただし1970年1月1日0時0分0秒より前の時刻は取り扱えなくなる。
これにより UNIX 時刻は4,294,967,295秒（2106年2月7日6時28分15秒）まで拡張される。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UNIX 時刻を64ビット符号付き整数で表す&lt;/strong&gt; : データ長が倍の8オクテットになるが，抜本的に対応するのであればこちらを選択すべきだろう。
多くの現行システムはこちらでの対応になっている筈である。
これなら9,223,372,036,854,775,807秒（約3000億年）まで表現できる。
ビッグバンからビッグクランチまで（笑）&lt;/p&gt;

&lt;p&gt;もっとも時刻情報については UNIX 時刻以外にも様々な形式が存在するため，あえて UNIX 時刻に拘る必要はないかもしれない。
そもそも1秒未満の桁を表現できない UNIX 時刻はタイムスタンプとしてはもはや機能不足と言える。&lt;/p&gt;

&lt;h3 id=&#34;実装例1-openpgp-における時刻情報&#34;&gt;【実装例1】 OpenPGP における時刻情報&lt;/h3&gt;

&lt;p&gt;OpenPGP (&lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;RFC 4880&lt;/a&gt;) パケットにおける時刻情報は，古い仕様を踏襲する形で，4オクテット固定長で定義されている。
現在，次期仕様（&lt;a href=&#34;https://datatracker.ietf.org/doc/draft-ietf-openpgp-rfc4880bis/&#34; title=&#34;draft-ietf-openpgp-rfc4880bis - OpenPGP Message Format&#34;&gt;RFC 4880bis&lt;/a&gt;）で V5 パケットの仕様が検討されているが，時刻情報に関しては4オクテットのままでいくようだ。&lt;/p&gt;

&lt;h3 id=&#34;実装例2-go-言語-の-time-パッケージ&#34;&gt;【実装例2】 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の time パッケージ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;には標準ライブラリとして &lt;a href=&#34;https://golang.org/pkg/time/&#34; title=&#34;time - The Go Programming Language&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージが用意されているが，時刻を表す &lt;a href=&#34;https://golang.org/pkg/time/&#34; title=&#34;time - The Go Programming Language&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Time&lt;/code&gt; 型は西暦元年1月1日0時を原点としナノ秒単位まで対応している。
また UNIX 時刻を返す関数も用意されているが，この関数の返り値は int64 (64ビット符号付き整数) の値を返す。&lt;/p&gt;

&lt;p&gt;このように最近のシステムやプログラミング言語は時刻に関する独自のクラス・オブジェクトを用意し，後方互換性を保つために UNIX 時刻を扱うメソッドが用意されていることが多い。&lt;/p&gt;

&lt;h2 id=&#34;unix-時刻と-utc&#34;&gt;UNIX 時刻と UTC&lt;/h2&gt;

&lt;p&gt;ところで，前述した UNIX 時刻の定義を見ておかしいとは思わなかっただろうか。&lt;/p&gt;

&lt;p&gt;現在の UTC の運用が始まったのは1972年からである。
なのに UNIX 時刻の原点は「1970年1月1日0時0分0秒 UTC」となっているのだ。
存在しない時刻&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:utc2&#34;&gt;&lt;a href=&#34;#fn:utc2&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; を原点にするなんて，おかしいよね！&lt;/p&gt;

&lt;p&gt;つまり実際の UNIX 時刻は「1970年1月1日0時0分0秒 UTC からの経過秒数」ではなく，グレゴリオ暦と現在の時制のルールに基づいて，2時点間の差分を単純計算しているだけなのである。
このことが最も顕著に現れるのが UTC における閏秒の扱いである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で簡単なコードを書いてみよう。&lt;/p&gt;

&lt;p&gt;かつて2017年1月1日0時0分0秒 UTC の直前に&lt;a href=&#34;http://text.baldanders.info/remark/2016/11/leap-second-2017/&#34; title=&#34;2017年直前の閏秒について&#34;&gt;閏秒が挿入&lt;/a&gt;された。
したがって&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2016&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;December&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;59&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;59&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UTC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2017&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;January&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UTC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;t1 = %v (%v)\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;t2 = %v (%v)\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;t2 - t1 = %v sec\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というコードを書いたとき，もし UNIX 時刻が閏秒を考慮しているのであれば，2時点の UNIX 時刻の差は2になる筈である。
しかし実際に実行してみると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run unix-time.go
t1 = 2016-12-31 23:59:59 +0000 UTC (1483228799)
t2 = 2017-01-01 00:00:00 +0000 UTC (1483228800)
t2 - t1 = 1 sec&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となる。
これは他の言語でも（独自に閏秒に対応していないのであれば）同じようになる筈である。&lt;/p&gt;

&lt;p&gt;まぁ，しかし，これは UNIX 時刻を設計した人を責めるべきではないだろう。&lt;/p&gt;

&lt;p&gt;そもそも UT と UTC の違いを意識してる人なんて殆どいない。
閏秒がネット上で騒がれるようになったのは2012年頃からである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ls2&#34;&gt;&lt;a href=&#34;#fn:ls2&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;。
今さら UNIX 時刻の仕様を変えようものなら逆に大変な騒ぎになりそうである（UNIX 時刻で格納している過去の時刻データが全てオシャカになる）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/leap-second/&#34;&gt;うるう秒は当分存続らしい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/japanese-koyomi/&#34;&gt;「暦」日本史 （再掲載）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B079YJS1J1/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51CPvtuv%2BwL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B079YJS1J1/baldandersinf-22/&#34;&gt;［試して理解］Linuxのしくみ ～実験と図解で学ぶOSとハードウェアの基礎知識&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;武内 覚 &lt;/dd&gt;&lt;dd&gt;技術評論社 2018-02-23&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B079TLW41L/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B079TLW41L.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07C3JFK3V/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07C3JFK3V.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;前処理大全［データ分析のためのSQL/R/Python実践テクニック］&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07BKVP9QY/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07BKVP9QY.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;独学プログラマー Python言語の基本から仕事のやり方まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B078J4TNT1/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B078J4TNT1.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;低レベルプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07CM2YNVD/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07CM2YNVD.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;まんがでわかるLinux シス管系女子3&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07B8T1F4R/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07B8T1F4R.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;江添亮の詳説C++17 (アスキードワンゴ)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B075ST51Y5/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B075ST51Y5.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ふつうのLinuxプログラミング 第2版　Linuxの仕組みから学べるgccプログラミングの王道&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B079Q6S12G/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B079Q6S12G.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;コンテナ・ベース・オーケストレーション Docker/Kubernetesで作るクラウド時代のシステム基盤&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07BBTSX65/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07BBTSX65.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;クラウドエンジニア養成読本［クラウドを武器にするための知識＆実例満載！］ Software Design plus&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B07B8GH29F/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B07B8GH29F.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C言語本格入門 ～基礎知識からコンピュータの本質まで&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;コンテナ全盛のこの時代にかなり硬派な内容の Linux 解説書。コンピュータの教科書としても使えそう。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-04-30&#34;&gt;2018-04-30&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805202254/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51mQCyP04rL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805202254/baldandersinf-22/&#34;&gt;天体の位置計算&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;長沢 工 &lt;/dd&gt;&lt;dd&gt;地人書館 1985-09&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805206349/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4805206349.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;日の出・日の入りの計算―天体の出没時刻の求め方&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4769908180/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4769908180.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文計算入門―一球面三角から軌道計算まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805204141/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4805204141.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;パソコンで見る天体の動き&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416114710/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4416114710.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文年鑑2015年版&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00R4X7R0M/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00R4X7R0M.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;月刊 星ナビ 2015年 02月号 [雑誌]&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-01-11&#34;&gt;2015/01/11&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01JFLCW5K/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51EnYDL31WL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01JFLCW5K/baldandersinf-22/&#34;&gt;猫暦 ねこよみ コミック 1-3巻セット (ねこぱんちコミックス)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ねこしみず 美濃 &lt;/dd&gt;&lt;dd&gt;少年画報社 2016-07-11&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「寛政の改暦」のころの伊能勘解由（忠敬）とその妻とされる「おえい」の物語。感想は&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/nekoyomi/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-11-29&#34;&gt;2016-11-29&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c1&#34;&gt;この記事では時刻とはある時点からの経過時間を指すものとして書き分けている。時刻を表すには原点となる時点が必須である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:s1&#34;&gt;もちろん地球を中心とした見かけ上の話。正しくは地球の自転運動および太陽を中心とした公転運動を基準にしている，というべきだろう。ちなみに地球の自転運動を基にした時刻系を恒星時系と呼ぶ。世界時系は恒星時系の一種と言える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:s1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cs1&#34;&gt;天球とは地球を中心とした無限遠の仮想球面である。地球から見える月や惑星や太陽などの星々は天球への写像と見做すわけですね。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cs1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ms1&#34;&gt;太陽に対する地球の公転軌道は（ほぼ円に近い）楕円なので，天球上を移動する太陽（真太陽）の移動速度は季節によって僅かに進み遅れが発生する。これに対し，天球上の移動速度が年間で一定となるような仮想的な太陽を平均太陽と呼ぶ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ms1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ut1&#34;&gt;厳密には UT には UT0 から UT2 まである。 UT0 はほぼ生の観測値で，観測地点ごとの UT0 を集計し極運動等の補正をかけたものを UT1 と呼ぶ。 UT2 は UT1 から更に自転速度の年間の進み遅れを補正したものである。現在では UT2 は使われていないようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ut1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:si1&#34;&gt;SI 単位系の「秒」の定義。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:si1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:at1&#34;&gt;「原子時系は一定の時間を刻む」というのは相対論的効果を除外した場合の話。実は，厳密に言うと現在の TAI は相対論的効果などを加味した座標時系として再定義されている。だが日常生活でそれを意識することはないだろう。更に余談だが，座標時系のひとつに TT (地球時; terrestrial time) というのがあって天体力学や位置天文学の分野で使われている。 TAI と TT の間には $TT = TAI + 32.184\,\mathrm{sec}$ という関係がある（したがって，ある時点の UTC が分かれば TT も自動的に求められる）。何故こんな事になっているかについては聞くも涙の歴史物語があったりする（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:at1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ls1&#34;&gt;閏秒に関する議論については「&lt;a href=&#34;http://text.baldanders.info/remark/2016/11/leap-second-2017/&#34;&gt;2017年直前の閏秒について&lt;/a&gt;」あたりを参考にどうぞ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ls1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:utc2&#34;&gt;厳密に言うと1972年以前にも UTC と呼ばれる時刻系は存在していたが，現在の UTC とは全く異なり，どちらかというと UT に近いルールだった。このため管理が煩雑になりすぎて破綻してしまったのだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:utc2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ls2&#34;&gt;情報処理の高速化により秒単位ではギャップが大きくなりすぎるため。またサービスの可用性（availability）に対する要求が高くなったという点も挙げられるだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ls2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
