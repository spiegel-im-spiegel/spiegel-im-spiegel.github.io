<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>List of github - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/tags/github/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/tags/github/index.xml" />
	<id>tag:text.Baldanders.info,2020-09-29:/tags</id>
	<updated>2020-09-29T11:20:19+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>golangci-lint を GitHub Actions で使う</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/using-golangci-lint-action/" />
		<id>tag:text.Baldanders.info,2020-09-29:/golang/using-golangci-lint-action/</id>
		<published>2020-09-29T02:20:19+00:00</published>
		<updated>2020-09-29T02:32:45+00:00</updated>
		<summary>これで pull request 時に golangci-lint が走る。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://golangci-lint.run/&#34;&gt;golangci-lint&lt;/a&gt; は &lt;code&gt;go vet&lt;/code&gt; をはじめ複数の lint を集約して結果を表示してくれる優れものである。
かつては GolangCI.com で GitHub と連携できていたのだが，&lt;a href=&#34;https://medium.com/golangci/golangci-com-is-closing-d1fc1bd30e0e&#34; title=&#34;GolangCI.com is closing. Dear customers of GolangCI.com, | by Denis Isaev | golangci | Medium&#34;&gt;2020年4月でサービスが停止&lt;/a&gt;してしまい，寂しい限り。&lt;/p&gt;
&lt;p&gt;と思っていたのだが，いつの間にか公式の GitHub Actions が用意されていた。
気付かなんだよ。
不覚。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golangci/golangci-lint-action&#34;&gt;golangci/golangci-lint-action: Official GitHub action for golangci-lint from it&amp;rsquo;s authors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使い方は簡単。
リポジトリの &lt;code&gt;.github/workflows/&lt;/code&gt; ディレクトリに YAML ファイル（例えば &lt;code&gt;golangci-lint.yml&lt;/code&gt;）を置き，以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;golangci-lint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;v*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;branches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pull_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;golangci&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;go-version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.15&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;.x]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest, macos-latest, windows-latest]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;lint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ matrix.os }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;golangci-lint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;golangci/golangci-lint-action@v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1.31&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Optional: working directory, useful for monorepos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# working-directory: somedir&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Optional: golangci-lint command line arguments.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# args: --issues-exit-code=0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Optional: show only new issues if it&amp;#39;s a pull request. The default value is `false`.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# only-new-issues: true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;また，リポジトリ直下の &lt;code&gt;.gitattributes&lt;/code&gt; ファイルに以下の記述を追加する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;*.go text eol=lf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで pull request 時と &lt;code&gt;master&lt;/code&gt; ブランチ&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; にバージョンタグを打った際に &lt;a href=&#34;https://golangci-lint.run/&#34;&gt;golangci-lint&lt;/a&gt; が走る。
&lt;a href=&#34;https://golangci-lint.run/&#34;&gt;golangci-lint&lt;/a&gt; は &lt;code&gt;matrix&lt;/code&gt; の組み合わせで並列処理されるようだ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./reviews-in-pr.png&#34;&gt;&lt;img src=&#34;./reviews-in-pr.png&#34; srcset=&#34;./reviews-in-pr.png 867w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;p&gt;まぁ，プラットフォーム依存のコードでもない限り &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 最新バージョンの &lt;code&gt;ubuntu-latest&lt;/code&gt; だけでいいと思うけどね。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golangci/golangci-lint&#34;&gt;golangci/golangci-lint: Fast linters Runner for Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/donot-sleep-through-life/&#34;&gt;golangci-lint に叱られる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;2020年10月から &lt;a href=&#34;https://text.baldanders.info/remark/2020/08/renaming-default-branch-name-in-github-repositries/&#34; title=&#34;GitHub リポジトリの既定ブランチ名が main になるらしい&#34;&gt;GitHub の新規リポジトリの既定ブランチ名が &lt;code&gt;main&lt;/code&gt; になるらしい&lt;/a&gt;。ご注意を。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>ブログのネタをカンバン方式で管理する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/github-issues-milestones-and-projects/" />
		<id>tag:text.Baldanders.info,2020-09-22:/remark/2020/09/github-issues-milestones-and-projects/</id>
		<published>2020-09-22T10:32:40+00:00</published>
		<updated>2020-09-22T20:47:46+00:00</updated>
		<summary>これで塩漬け案件が無闇に増えるのを防ぐわけ。このまましばらく運用してみよう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ここのブログ記事は，大体は思い付きで書いているのだが，ネタとして溜め込んでいるものもそこそこある。
今まではテキストファイルでフラットに管理していたのだが「そういや &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; って Projects 機能があるぢゃん♡」と気がついた。&lt;/p&gt;
&lt;p&gt;そこで溜め込んでるネタを &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects にいったん吐き出してみる&lt;/a&gt;ことにした。
まずはネタを全部 &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; に書き出すところから。
書き出したらそれを &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects&lt;/a&gt; で整理していく。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の Projects 機能は，いわゆる「カンバン方式」で &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; を管理できる。
こんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34;&gt;&lt;img src=&#34;./kanban.png&#34; srcset=&#34;./kanban.png 1477w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ブログのネタ帳&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34;&gt;ブログのネタ帳&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とりあえず &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; に上げたものは全部 “Materials” に寄せておいて，その中で着手予定のものを “Issues” へ。
実際に着手を始めたものを “WIP (Work In Progress)” へ移動し，完了したら案件を Close (自動で “Done” に移動) する。&lt;/p&gt;
&lt;p&gt;単純工程なこともあり WIP と Done はひと組しかないが，チームでやるシステム開発じゃないんだからこれで必要十分だろう。&lt;/p&gt;
&lt;p&gt;ただし &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/issues&#34; title=&#34;Issues · spiegel-im-spiegel/github-pages-env&#34;&gt;Issues&lt;/a&gt; も &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/projects/1&#34; title=&#34;ブログのネタ帳&#34;&gt;Projects&lt;/a&gt; も期限を管理できないので &lt;a href=&#34;https://github.com/spiegel-im-spiegel/github-pages-env/milestones&#34; title=&#34;Milestones - spiegel-im-spiegel/github-pages-env&#34;&gt;Milestones&lt;/a&gt; を設定する。
ここで言う期限はいわゆる「締切」ではない。
文字通りの一里塚。つまり，あるマイルストーンの期限が来たら終了してない案件を次のマイルストーンに回すか止めるか判断するわけだ。&lt;/p&gt;
&lt;p&gt;これで塩漬け案件が無闇に増えるのを防げる（筈）。
まぁ，このまましばらく運用してみよう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/srggrs/assign-one-project-github-action&#34;&gt;srggrs/assign-one-project-github-action: Automatically add an issue or pull request to specific GitHub Project(s) when you create and/or label them.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/move-with-trello/&#34;&gt;Trello で引っ越し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01IGW5IIW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51gC8Tmq1kL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01IGW5IIW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;リーン開発の現場 カンバンによる大規模プロジェクトの運営&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ＨｅｎｒｉｋＫｎｉｂｅｒｇ (著), 角谷信太郎 (著), 市谷聡啓 (翻訳), 藤原大 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オーム社 2013-10-25 (Release 2017-07-15)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01IGW5IIW (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私はこれで勉強しました。もう一回読み直すかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-02-17&#34;&gt;2015-02-17&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- リーン開発の現場 --&gt;
</content>
	</entry><entry>
		<title>近ごろ流行りらしい “Zenn” のアカウントを作ってみた</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/using-zenn-with-github/" />
		<id>tag:text.Baldanders.info,2020-09-19:/remark/2020/09/using-zenn-with-github/</id>
		<published>2020-09-19T08:09:47+00:00</published>
		<updated>2020-09-22T02:03:47+00:00</updated>
		<summary>とりあえず私も Qiita に置いてる記事の一部を移行してみるか。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;きっかけは &lt;a href=&#34;https://qiita.com/tsuyoshi_cho&#34; title=&#34;tsuyoshi_cho - Qiita&#34;&gt;@tsuyoshi_cho&lt;/a&gt; さんの&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tsuyoshi_cho/items/f615dbd4631957334ef3&#34;&gt;Gitのaliasを晒す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で，最近の更新に&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;Zennへ移植改訂しました。&lt;br&gt;
&lt;a href=&#34;https://zenn.dev/tsuyoshicho/articles/git-aliases-revised&#34;&gt;https://zenn.dev/tsuyoshicho/articles/git-aliases-revised&lt;/a&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://qiita.com/tsuyoshi_cho/items/f615dbd4631957334ef3&#34;&gt;Gitのaliasを晒す - Qiita&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とあって「&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; ってなんじゃら？」と調べてみた。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;プログラマーのための新しい情報共有サービス「Zenn」をリリースしました🎉&lt;br&gt;&lt;br&gt;コンセプトは、有益な情報を共有する人がもっと対価を得られること。&lt;br&gt;noteのようにお互いを金銭的にサポートしたり、知見を本にまとめて販売したりできるプラットフォームです。&lt;a href=&#34;https://t.co/l0lxlW24Ug&#34;&gt;https://t.co/l0lxlW24Ug&lt;/a&gt; &lt;a href=&#34;https://t.co/qrddHoCWsr&#34;&gt;pic.twitter.com/qrddHoCWsr&lt;/a&gt;&lt;/p&gt;&amp;mdash; catnose (@catnose99) &lt;a href=&#34;https://twitter.com/catnose99/status/1306160371468627968?ref_src=twsrc%5Etfw&#34;&gt;September 16, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;おおっ！ 最近 launch したサービスだったのか。&lt;/p&gt;
&lt;p&gt;パッと見の印象は「Qiita ＋ note」という感じ。
今や &lt;a href=&#34;https://yamdas.hatenablog.com/entry/20200914/publishers-note&#34; title=&#34;出版社のnote活用事例まとめ完全版（2020年9月時点） - YAMDAS現更新履歴&#34;&gt;note が出版社御用達のプラットフォームになっている&lt;/a&gt;ように &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; は（決済可能な）エンジニア御用達のプラットフォームになれればいいねぇ。&lt;/p&gt;
&lt;p&gt;というわけで，とりあえずアカウントを作ってみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel&#34;&gt;Spiegel | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日本のサービスは &lt;code&gt;spiegel&lt;/code&gt; 名義でアカウントが取れるのが素敵♡&lt;/p&gt;
&lt;p&gt;ただ，決済情報は未入力のままにしてある。
できればクレカや銀行口座より PayPal 決済に対応して欲しい。
&lt;a href=&#34;https://tatsu-zine.com/&#34;&gt;達人出版会&lt;/a&gt;も PayPal 決済だし，技術系のサービスなんだからその方がいいと思うのだが&amp;hellip;&lt;/p&gt;
&lt;h2&gt;“Tech” と “Idea” という色分け&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; では “Tech” と “Idea” の2つの固定カテゴリが用意されていて，投稿する記事は必ずどちらかのカテゴリに含まれる。
&lt;a href=&#34;https://zenn.dev/tech-or-idea&#34; title=&#34;投稿カテゴリー「Tech」「Idea」の選び方 | Zenn&#34;&gt;説明&lt;/a&gt;によると&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;dl&gt;
&lt;dt&gt;Tech&lt;/dt&gt;
&lt;dd&gt;&lt;q&gt;プログラミングやソフトフェア開発、インフラなどに関する技術記事ならTechを選びます&lt;/q&gt;&lt;/dd&gt;
&lt;dt&gt;Idea&lt;/dt&gt;
&lt;dd&gt;&lt;q&gt;個人的な意見やポエム、キャリアについての記事、キュレーション記事ならIdeaを選びます&lt;/q&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://zenn.dev/tech-or-idea&#34;&gt;投稿カテゴリー「Tech」「Idea」の選び方 | Zenn&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なんだそうだ。
Qiita で技術記事と所謂「ポエム」が入り混じって出てくる状況を見れば妥当な措置だろう。
まぁ，悩んだら “Idea” にするのがいいんだろうねぇ。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; との連携&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; では &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; リポジトリから記事を deploy することができる。
具体的な手順は以下の記事を参照のこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/connect-to-github&#34;&gt;GitHubリポジトリでZennのコンテンツを管理する | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただし，いくつか制限があって&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リポジトリ上の記事を削除しても &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; に反映されない&lt;/li&gt;
&lt;li&gt;一度 &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; に deploy された記事の slug は変更できない（別の記事として扱われる）&lt;/li&gt;
&lt;li&gt;既に &lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; でオン書きしたコンテンツは &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; に反映されない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ようだ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; でリポジトリを作る際は，リポジトリ名は任意だが， &lt;code&gt;.gitignore&lt;/code&gt; や &lt;code&gt;README.md&lt;/code&gt; は作成しなくてよい。
これらは後述する &lt;code&gt;zenn-cli&lt;/code&gt; ツールで作成される。&lt;/p&gt;
&lt;h2&gt;zenn-cli ツールの導入&lt;/h2&gt;
&lt;p&gt;まずは &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; 環境に node.js をインストールしてしまおう（まだ導入していない場合）。
こんな感じでいいだろう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;curl -sL https://deb.nodesource.com/setup_current.x | sudo -E bash -
sudo apt install -y nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次に，作成した &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; リポジトリを適当な場所に &lt;code&gt;git clone&lt;/code&gt; し，リポジトリのあるディレクトリに移動する。
まずは npm の初期化から。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd ~/workspace
$ gh repo clone spiegel-im-spiegel/zenn-docs
$ cd zenn-docs
$ npm init --yes
Wrote to /home/username/workspace/zenn-docs/package.json:

{
  &amp;#34;name&amp;#34;: &amp;#34;zenn-docs&amp;#34;,
  &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;,
  &amp;#34;description&amp;#34;: &amp;#34;## Links&amp;#34;,
  &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;,
  &amp;#34;scripts&amp;#34;: {
    &amp;#34;test&amp;#34;: &amp;#34;echo \&amp;#34;Error: no test specified\&amp;#34; &amp;amp;&amp;amp; exit 1&amp;#34;
  },
  &amp;#34;repository&amp;#34;: {
    &amp;#34;type&amp;#34;: &amp;#34;git&amp;#34;,
    &amp;#34;url&amp;#34;: &amp;#34;git+https://github.com/spiegel-im-spiegel/zenn-docs.git&amp;#34;
  },
  &amp;#34;keywords&amp;#34;: [],
  &amp;#34;author&amp;#34;: &amp;#34;&amp;#34;,
  &amp;#34;license&amp;#34;: &amp;#34;ISC&amp;#34;,
  &amp;#34;bugs&amp;#34;: {
    &amp;#34;url&amp;#34;: &amp;#34;https://github.com/spiegel-im-spiegel/zenn-docs/issues&amp;#34;
  },
  &amp;#34;homepage&amp;#34;: &amp;#34;https://github.com/spiegel-im-spiegel/zenn-docs#readme&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; は弄らなくて大丈夫。
続けて &lt;code&gt;zenn-cli&lt;/code&gt; ツールをインストールする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npm install zenn-cli
...
+ zenn-cli@0.1.29
added 5 packages from 3 contributors, removed 3 packages, updated 3 packages, moved 1 package and audited 905 packages in 42.516s
found 5 low severity vulnerabilities
  run `npm audit fix` to fix them, or `npm audit` for details
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なんか不穏なメッセージが見えるが大丈夫か，これ。 &amp;hellip;まぁいいや&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
次いってみよう。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;zenn-cli&lt;/code&gt; ツールがインストールできたらリポジトリ内を初期化する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn init

  🎉Done!
  早速コンテンツを作成しましょう

  👇新しい記事を作成する
  $ zenn new:article

  👇新しい本を作成する
  $ zenn new:book

  👇表示をプレビューする
  $ zenn preview
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでリポジトリ内に &lt;code&gt;articles/&lt;/code&gt; および &lt;code&gt;books/&lt;/code&gt; ディレクトリが作成され，さらに &lt;code&gt;.gitignore&lt;/code&gt; および &lt;code&gt;README.md&lt;/code&gt; ファイルも作成される。
ちなみに &lt;code&gt;.gitignore&lt;/code&gt; の中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;node_modules
.DS_Store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;何ともシンプルだが，これで &lt;code&gt;zenn-cli&lt;/code&gt; インストール時に作成される &lt;code&gt;node_modules/&lt;/code&gt; ディレクトリはリポジトリから除外される。&lt;/p&gt;
&lt;p&gt;ここまで出来たら一度コミットしておいたほうがいいだろう。&lt;/p&gt;
&lt;h2&gt;記事の作成&lt;/h2&gt;
&lt;p&gt;入力ファイルの作成には以下のコマンドを打つ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn new:article
📄d309af5057a827deda35.md created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このファイル名がそのまま slug として URL のパスになる。
Slug は &lt;code&gt;zenn-cli&lt;/code&gt; ツールが適当に生成するのでユーザは考えなくともよい。&lt;/p&gt;
&lt;p&gt;もし slug を指定したいのであれば &lt;code&gt;--slug&lt;/code&gt; オプションを使う。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn new:article --slug hello-zenn-world
📄hello-zenn-world.md created.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし slug 文字列には以下の制限がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;半角英数字（a-z, 0-9）とハイフン（-）の 12〜50 字の組み合わせのみ有効&lt;/li&gt;
&lt;li&gt;&lt;code&gt;articles&lt;/code&gt; 以下のファイルはディレクトリ階層に出来ない（フラットな構成）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;books&lt;/code&gt; の場合は「本」ごとに slug を指定できる。本の slug 以下はフラットな構成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slug 文字列が短いとエラーになるのでご注意を。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn new:article --slug hello
エラー：slugの値（hello）が不正です。半角英数字（a-z0-9）とハイフン（-）の12〜50字の組み合わせにしてください
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;作成したファイルの中身は，以下のように front matter のひな型のみが書き込まれている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emoji&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;🎉&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tech&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# tech: 技術記事 / idea: アイデア&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;topics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;published&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;emoji&lt;/code&gt; 項目は，記事のアテンションに使われるのだが，毎回ランダムな文字で初期化されるようだ。
絵文字を直接入力することはないのだが &lt;a href=&#34;https://www.webfx.com/tools/emoji-cheat-sheet/&#34; title=&#34;🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more&#34;&gt;GitHub markdown&lt;/a&gt; のように文字列で指定できないものかねぇ。&lt;/p&gt;
&lt;h2&gt;プレビューが素敵！&lt;/h2&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【2020-09-20 更新】&lt;/strong&gt;
以前プレビュー機能が動かないと書いたが，他でも &lt;a href=&#34;https://github.com/zenn-dev/zenn-roadmap/issues/37&#34; title=&#34;npx zenn preview でエラーが大量に吐き出される · Issue #37 · zenn-dev/zenn-roadmap&#34;&gt;Issue が上がっていた&lt;/a&gt;らしく，対応されていた。
感謝！&lt;/p&gt;
&lt;p&gt;この節は，以前の内容から差し替えている。
なお，障害報告は &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の &lt;a href=&#34;https://github.com/zenn-dev/zenn-roadmap/issues&#34;&gt;zenn-dev/zenn-roadmap/issues&lt;/a&gt; に上げてほしいとのこと。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;以下のコマンドでプレビュー用のローカルサーバが起動する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ npx zenn preview
👀Preview on http://localhost:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;画面はこんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./preview.png&#34;&gt;&lt;img src=&#34;./preview.png&#34; srcset=&#34;./preview.png 1181w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;おおっ！ 間違いまで指摘してくれるのか。
こりゃあ，ええ。&lt;/p&gt;
&lt;p&gt;エディタの markdown プレビュー機能でもある程度は見れるけど，やっぱサービス立ち上げてブラウザで確認できるのがいいよね。&lt;/p&gt;
&lt;p&gt;うんうん。&lt;/p&gt;
&lt;!--
プレビュー用のローカルサーバを起動しようとしたら

```text
$ npx zenn preview
(node:126485) UnhandledPromiseRejectionWarning: Error: Could not find a valid build in the &#39;/home/username/workspace/zenn-docs/.next&#39; directory! Try building your app with &#39;next build&#39; before starting the server.
    at Server.readBuildId (/home/username/workspace/zenn-docs/node_modules/next/dist/next-server/server/next-server.js:113:355)
    at new Server (/home/username/workspace/zenn-docs/node_modules/next/dist/next-server/server/next-server.js:3:120)
    at Object.createServer [as default] (/home/username/workspace/zenn-docs/node_modules/next/dist/server/next.js:2:638)
    at /home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:53:41
    at step (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:33:23)
    at Object.next (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:14:53)
    at /home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:8:71
    at new Promise (&lt;anonymous&gt;)
    at __awaiter (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:4:12)
    at Object.exports.build (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:48:12)
(Use `node --trace-warnings ...` to show where the warning was created)
(node:126485) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 3)
(node:126485) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

てな感じに例外を吐いて落っこちた。

まぁ，プレビューなくても問題はないのだが...
--&gt;
&lt;h2&gt;とりあえず私も&amp;hellip;&lt;/h2&gt;
&lt;p&gt;まずは Qiita に置いてる記事の一部を移行してみるか。
古すぎて使えない記事はダメだけど（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/connect-to-github&#34;&gt;GitHubリポジトリでZennのコンテンツを管理する | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/install-zenn-cli&#34;&gt;Zenn CLIをインストールする | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/zenn-cli-guide&#34;&gt;Zenn CLIを使ってコンテンツを作成する | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/zenn/articles/markdown-guide&#34;&gt;ZennのMarkdown記法 | Zenn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2020-09-17-github-cli-1-0-is-now-available/&#34;&gt;GitHub CLI 1.0 is now available - The GitHub Blog&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/morinokami/articles/hello-github-cli&#34;&gt;GitHub CLI 1.0 がリリースされたので使ってみた | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://linuxfan.info/install_nodejs_on_ubuntu_debian&#34;&gt;Ubuntu/Debianに最新のNode.jsをインストールする一番良い方法 | LFI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.webfx.com/tools/emoji-cheat-sheet/&#34;&gt;🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/&#34; title=&#34;Zenn｜プログラマーのための情報共有コミュニティ&#34;&gt;Zenn&lt;/a&gt; 側に問い合わせてみたが，セキュリティ上の問題はないらしい。「あまり精神的に良いものではないのでそのうちなんとかしようと思っています」とのこと（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>GitHub プロファイルを（ちょっとだけ）カッコよくしてみる</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/using-github-profile-readme/" />
		<id>tag:text.Baldanders.info,2020-09-12:/remark/2020/09/using-github-profile-readme/</id>
		<published>2020-09-12T12:17:02+00:00</published>
		<updated>2020-09-22T07:06:48+00:00</updated>
		<summary>自前でポートフォリオを構成できる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;何となく他所様の &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; プロファイルを眺めてたら既定の表示と違うものがチラホラと見受けられる。&lt;/p&gt;
&lt;p&gt;どうやら，自分のユーザ名（私の場合は &lt;code&gt;spiegel-im-spiegel&lt;/code&gt;）のリポジトリを作って中の &lt;code&gt;README.md&lt;/code&gt; をプロファイルページの Overview タブに表示できるらしい。&lt;/p&gt;
&lt;p&gt;たとえばこんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;&lt;img src=&#34;./github-profile-readme.png&#34; srcset=&#34;./github-profile-readme.png 896w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;GitHub Profile Overview&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;GitHub Profile Overview&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Markdown や HTML のほか，拡張子を変えれば AsciiDoc とかも使えるみたいなので，割と自由に記述できる。
要するに，自前でポートフォリオを構成できるわけだ。&lt;/p&gt;
&lt;p&gt;取り敢えず，それなりの画面を作りたいなら以下のサービスを利用するのがお勧め。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rahuldkjain.github.io/gh-profile-readme-generator/&#34;&gt;GitHub Profile Readme Generator | GitHub Profile Readme Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rahuldkjain/github-profile-readme-generator&#34;&gt;rahuldkjain/github-profile-readme-generator: Generate github profile README easily with latest add-ons like visitors count, github stats, etc using minimal UI.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;項目を適当に埋めていって，アイコンやアドオンを選択して &lt;em&gt;[Generate README]&lt;/em&gt; ボタンを押せば雛形となる Markdown コード（中身はほぼ HTML だけど&lt;code&gt;w&lt;/code&gt;）を出力してくれるので，そのまま使うもよし，アレンジして使うもよしである。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/explore-new-github-readme-feature-7d5cc21bf02f?gi=eb8dd4afb703&#34;&gt;How to create Github Profile-README | by Pratik Kumar | Jul, 2020 | Towards Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shields.io/&#34;&gt;Shields.io: Quality metadata badges for open source projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alexandresanlim/Badges4-README.md-Profile&#34;&gt;alexandresanlim/Badges4-README.md-Profile: Improve your README.md profile with these amazing badges.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/anuraghazra/github-readme-stats&#34;&gt;anuraghazra/github-readme-stats: Dynamically generated stats for your github readmes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/blog-post-workflow&#34;&gt;Blog Post Workflow · Actions · GitHub Marketplace · GitHub&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gautamkrishnar/blog-post-workflow&#34;&gt;gautamkrishnar/blog-post-workflow: Show your latest blog posts from any sources or StackOverflow activity or Youtube Videos on your GitHub profile/project readme automatically using the RSS feed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/zizi4n5/items/f8076cb25bbf64a9bc1c&#34;&gt;GitHub Readme Stats を利用してGitHubプロフィールをカッコよくする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zenn.dev/spiegel/articles/20200922-blog-post-workflow&#34;&gt;GitHub の Profile Readme に Feed を表示する | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>GitHub リポジトリの既定ブランチ名が main になるらしい</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/08/renaming-default-branch-name-in-github-repositries/" />
		<id>tag:text.Baldanders.info,2020-08-27:/remark/2020/08/renaming-default-branch-name-in-github-repositries/</id>
		<published>2020-08-27T08:53:37+00:00</published>
		<updated>2020-08-27T11:56:57+00:00</updated>
		<summary>サービス・プロバイダやオープンソースな人たちが挙ってやってるやつね。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;Twitter の TL で見かけたんだけどさ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;デフォルトブランチを変更していない場合は 2020/10/1 から自動的に新規プロジェクトのデフォルトブランチが master から main に変更されるとのこと。 / “Set the default branch for newly-created repositories - GitHub Changelog” &lt;a href=&#34;https://t.co/zkXPp43aRd&#34;&gt;https://t.co/zkXPp43aRd&lt;/a&gt;&lt;/p&gt;&amp;mdash; mattn (@mattn_jp) &lt;a href=&#34;https://twitter.com/mattn_jp/status/1298803432984207360?ref_src=twsrc%5Etfw&#34;&gt;August 27, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;/figure&gt;
&lt;p&gt;不覚にも3秒位「？？？」ってなっちゃったYO。&lt;/p&gt;
&lt;p&gt;あ゙ー，あれね。
サービス・プロバイダやオープンソースな人たちが挙って「差別用語を狩ろう」っちう “&lt;a href=&#34;https://text.baldanders.info/remark/2020/07/virtue-signaling/&#34; title=&#34;Virtue Signaling という広告&#34;&gt;Virtue Signaling&lt;/a&gt;” なやつの一環ね。&lt;/p&gt;
&lt;p&gt;なんでも&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;On &lt;strong&gt;October 1, 2020&lt;/strong&gt;, if you haven’t changed the default branch for new repositories for your user, organization, or enterprise, it will automatically change from &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://github.blog/changelog/2020-08-26-set-the-default-branch-for-newly-created-repositories/&#34;&gt;Set the default branch for newly-created repositories - GitHub Changelog&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;だそうで，何もしなかったら 2020-10-01 以降の新規作成リポジトリの既定ブランチが &lt;code&gt;main&lt;/code&gt; になるらしい。
既存のリポジトリには影響しないし&lt;a href=&#34;https://github.com/settings/repositories&#34; title=&#34;Repositories&#34;&gt;設定画面&lt;/a&gt;で既定ブランチをあらかじめ指定しておくことで回避することも可能である（リポジトリ毎に既定ブランチを指定することもできるみたい）。&lt;/p&gt;
&lt;p&gt;個人的にはこういう政治広告に巻き込まれたくないんだけど，名前を変えること自体はさしたる手間ではないし，吝かではないといったところか。
強いていうなら CI サービス周りの対応次第かな。&lt;/p&gt;
&lt;h2&gt;Git リポジトリの既定ブランチ名を指定するには&lt;/h2&gt;
&lt;p&gt;Git の設定で既定ブランチ名を変更するには，以下のコマンドラインで無問題。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git config --global init.defaultBranch foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;$HOME/.config/git/config&lt;/code&gt; (または &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;) ファイルに&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;defaultBranch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;が追加される。&lt;/p&gt;
&lt;p&gt;また &lt;code&gt;git init&lt;/code&gt; コマンドで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git init --initial-branch=foo myrepo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすれば &lt;code&gt;foo&lt;/code&gt; ブランチで初期化してくれるので，そのまま既定ブランチとして使えばよい。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/github/renaming&#34;&gt;github/renaming: Guidance for changing the default branch name for GitHub repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35156317/&#34;&gt;「ブラックハット」も差別連想？&amp;ndash;用語変更についてセキュリティコミュニティで議論に - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/twitterwhitelistblacklistmasterslavedummy_value.html&#34;&gt;Twitter、コードやドキュメント内の用語「Whitelist/Blacklist」「Master/Slave」「Dummy value」などを好ましい用語へ置き換え、具体例も発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20200713-linux-replace-master-slave/&#34;&gt;Linuxで「マスター／スレイブ」「ブラックリスト／ホワイトリスト」の語句置き換えが決定 - GIGAZINE&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.itmedia.co.jp/news/articles/2007/13/news058.html&#34;&gt;Linuxカーネルでの「master/slave」と「blacklist」禁止、トーバルズ氏が承認 - ITmedia NEWS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35156986/&#34;&gt;アップルも「マスター」「スレーブ」などの用語置き換え&amp;ndash;スタイルガイド更新 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/article/35158622/&#34;&gt;差別的な用語を排除へ&amp;ndash;IBMとマイクロソフトの自発的な取り組み - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B07Y29NV9P?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51v&amp;#43;HI-Sh-L._SL160_.jpg&#34; width=&#34;100&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07Y29NV9P?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Virtue Signaling: Essays on Darwinian Politics &amp;amp; Free Speech (English Edition)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Miller, Geoffrey (著)&lt;/dd&gt;
    &lt;dd&gt;Cambrian Moon 2019-09-17 (Release 2019-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B07Y29NV9P (ASIN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://shorebird.hatenablog.com/entry/2020/04/29/093951&#34;&gt;shorebird さんによる書評はこちら&lt;/a&gt;。邦訳版があるなら読んでみたい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-07&#34;&gt;2020-07-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Virtue Signaling (洋書) --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4770501994?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41-vH-XzwbL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4770501994?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;ちびくろサンボ&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ヘレン・バナーマン (著), フランク・ドビアス (イラスト)&lt;/dd&gt;
    &lt;dd&gt;径書房 2008-06-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4770501994 (ASIN), 9784770501998 (EAN), 4770501994 (ISBN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;イラスト等原書に近い内容らしい。これは紙のほうがいいかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-07&#34;&gt;2020-07-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- ちびくろサンボ --&gt;
</content>
	</entry><entry>
		<title>私的コード黒歴史が北極に千年封印される</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/07/github-archive-program-2020/" />
		<id>tag:text.Baldanders.info,2020-07-18:/remark/2020/07/github-archive-program-2020/</id>
		<published>2020-07-18T01:36:42+00:00</published>
		<updated>2020-07-20T23:49:06+00:00</updated>
		<summary>千年後の地球上に知的文明があるとは限らないけどね。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;本気なのかジョークなのか分からないが GitHub が自身のサービス上にあるオープンソース・コードを北極に千年封印するという企画があって&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/github1000github_archive_program250m.html&#34;&gt;GitHub、オープンソースのコードを1000年以上にわたって保存する「GitHub Archive Program」発表。北極圏の非武装地帯永久凍土層地下250mに保管庫を設置 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実際に21TBものデータが北極に封印されたらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-07-16-github-archive-program-the-journey-of-the-worlds-open-source-code-to-the-arctic/&#34;&gt;GitHub Archive Program: the journey of the world&amp;rsquo;s open source code to the Arctic - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/250github.html&#34;&gt;永久凍土層地下250メートルでソースコードを保存するGitHubのプロジェクト、無事に保管が開始されたことを発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gigazine.net/news/20200717-github-archive-program-arctic/&#34;&gt;1000年後にデータを残すための「GitHub Archive Program」で21TBのリポジトリの北極圏への保管が完了 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Twitter の私の TL 上でも自分の&lt;ruby&gt;&lt;rb&gt;貢献&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;contribution&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;が含まれてるみたいな記述をチラホラ見かけて「やっぱ偉い人はちゃうなぁ」と他人事に思ってたのだが，どういうわけか私のリポジトリも対象になってるらしい。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;&lt;img src=&#34;./github-archive-program-2020.png&#34; srcset=&#34;./github-archive-program-2020.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Arctic Code Vault Contributor&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;Arctic Code Vault Contributor&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;いやいやいや（笑）&lt;/p&gt;
&lt;p&gt;おそらく&lt;ruby&gt;&lt;rb&gt;☆&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;star&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;が付いてるオープンソース・ライセンス下のリポジトリは軒並み対象になってる感じかな。
なんか GitHub Archive Program の価値がガッツリ下がった気がするよ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;&lt;strong&gt;【追記 2020-07-21】&lt;/strong&gt;
やはり GitHub 上で公開されているアクティブでオープンソースなコードを片っ端から集めたらしい。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;The 02/02/2020 snapshot archived in the GitHub Arctic Code Vault will sweep up every active public GitHub repository, in addition to significant dormant repos. The snapshot will include every repo with any commits between the announcement at GitHub Universe on November 13th and 02/02/2020, every repo with at least 1 star and any commits from the year before the snapshot (02/03/2019 - 02/02/2020), and every repo with at least 250 stars&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://archiveprogram.github.com/&#34;&gt;GitHub Archive Program&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これって，2019年2月以降に作ったオープンソースなリポジトリに少なくとも自分で☆を付ければアーカイブに含まれてしまったわけだ（笑）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;まぁ，何にどういう価値を認めるかは人それぞれだし，既に公開している情報だから私の主観が消失した後にどう扱われようと（文字通り）知ったことではないのだが，なんか自身の黒歴史を無理やり封印されてる気分になってしまう（笑）&lt;/p&gt;
&lt;p&gt;ちうわけで，かのラノベ作品の主人公の台詞を思い出した。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;異世界転移系作品全主人公の気持ちを俺が代弁してやろう。せめて&lt;ruby&gt;&lt;rb&gt;HDD&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;ハードディスク&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;の整理をしてからにしてくれよ！&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07V1T8JMG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;魔王様、リトライ！&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;まぁ，千年後の地球上に（少なくとも現代のプログラム・コードを理解できるような）知的文明があるとは限らないけどね。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/1000github_archive_program.html&#34;&gt;北極圏の永久凍土下でオープンソースのコードを1000年保存する「GitHub Archive Program」。本日、保存すべきプロジェクトの締め切り日 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00MTQ1ICM?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZHLJWUO&amp;#43;L._SL160_.jpg&#34; width=&#34;120&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00MTQ1ICM?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;猿の惑星 (吹替版)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;チャールトン ヘストン (出演), ロディ マクドウォール (出演), モーリス エバンス (出演), キム ハンター (出演), フランクリン・J・シャフナー (監督)&lt;/dd&gt;
    &lt;dd&gt; (Release 2014-09-01)&lt;/dd&gt;
    &lt;dd&gt;Prime Video&lt;/dd&gt;
    &lt;dd&gt;B00MTQ1ICM (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;当時，子供心に『&lt;a href=&#34;https://dic.pixiv.net/a/%E7%8C%BF%E3%81%AE%E8%BB%8D%E5%9B%A3&#34;&gt;猿の軍団&lt;/a&gt;』の方が面白いと思ったのは内緒である（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-19&#34;&gt;2020-07-19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 猿の惑星 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B07V1T8JMG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51J02ViCgJL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B07V1T8JMG?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;魔王様、リトライ！&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;木村寛　 (監督), 木村寛　 (プロデュース)&lt;/dd&gt;
    &lt;dd&gt;&lt;/dd&gt;
    &lt;dd&gt;Prime Video&lt;/dd&gt;
    &lt;dd&gt;B07V1T8JMG (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;アクちゃんが可愛い。これ見て書籍版を途中までしか読んでないことに気がついた。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-07-19&#34;&gt;2020-07-19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 魔王様、リトライ！ --&gt;
</content>
	</entry><entry>
		<title>GitHub に登録されている OpenPGP 公開鍵の情報を取得する</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/10/openpgp-public-keys-in-github/" />
		<id>tag:text.Baldanders.info,2019-10-21:/remark/2019/10/openpgp-public-keys-in-github/</id>
		<published>2019-10-21T08:29:15+00:00</published>
		<updated>2020-01-05T11:59:50+00:00</updated>
		<summary>公開鍵パケットデータを base64 コマンドで復号し，更に拙作の gpgpdump で可視化すれば中身を見ることができる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ネットで見かけた小ネタで（笑）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; の git リポジトリにアクセスする際に使う &lt;a href=&#34;https://qiita.com/zackey2/items/429c77e5780ba8bc1bf9&#34; title=&#34;もう「公開鍵送ってください」というやり取りは不要だった - Qiita&#34;&gt;SSH 公開鍵を取得する方法&lt;/a&gt;は割と知られているようだが&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ curl -s https://github.com/spiegel-im-spiegel.keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;似た感じで登録している &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 公開鍵も取得できる。
ただし出力は JSON 形式で，こんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ curl -s https://api.github.com/users/spiegel-im-spiegel/gpg_keys
[
  {
    &amp;#34;id&amp;#34;: 305745,
    &amp;#34;primary_key_id&amp;#34;: null,
    &amp;#34;key_id&amp;#34;: &amp;#34;2287557885231C76&amp;#34;,
    &amp;#34;raw_key&amp;#34;: &amp;#34;-----BEGIN PGP PUBLIC KEY BLOCK-----\r\n\r\n ... \r\n-----END PGP PUBLIC KEY BLOCK-----&amp;#34;,
    &amp;#34;public_key&amp;#34;: &amp;#34;...&amp;#34;,
    &amp;#34;emails&amp;#34;: [
      {
        &amp;#34;email&amp;#34;: &amp;#34;...&amp;#34;,
        &amp;#34;verified&amp;#34;: true
      }
    ],
    &amp;#34;subkeys&amp;#34;: [
      {
        &amp;#34;id&amp;#34;: 305746,
        &amp;#34;primary_key_id&amp;#34;: 305745,
        &amp;#34;key_id&amp;#34;: &amp;#34;5B07C6DBBBDAB020&amp;#34;,
        &amp;#34;raw_key&amp;#34;: null,
        &amp;#34;public_key&amp;#34;: &amp;#34;...&amp;#34;,
        &amp;#34;emails&amp;#34;: [
        ],
        &amp;#34;subkeys&amp;#34;: [
        ],
        &amp;#34;can_sign&amp;#34;: false,
        &amp;#34;can_encrypt_comms&amp;#34;: true,
        &amp;#34;can_encrypt_storage&amp;#34;: true,
        &amp;#34;can_certify&amp;#34;: false,
        &amp;#34;created_at&amp;#34;: &amp;#34;2018-02-15T11:34:33.000Z&amp;#34;,
        &amp;#34;expires_at&amp;#34;: null
      }
    ],
    &amp;#34;can_sign&amp;#34;: true,
    &amp;#34;can_encrypt_comms&amp;#34;: false,
    &amp;#34;can_encrypt_storage&amp;#34;: false,
    &amp;#34;can_certify&amp;#34;: true,
    &amp;#34;created_at&amp;#34;: &amp;#34;2018-02-15T11:34:33.000Z&amp;#34;,
    &amp;#34;expires_at&amp;#34;: &amp;#34;2020-02-15T00:22:09.000Z&amp;#34;
  },
  {
    ...
  },
  ...
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;いろいろ端折ってるが，あしからず。&lt;/p&gt;
&lt;p&gt;この中で &lt;code&gt;raw_key&lt;/code&gt; 項目に GitHub へ登録した ASCII armor 形式の公開鍵がそのまま入っている。
取り出しは &lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; コマンドを使って以下のようにできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ curl -s https://api.github.com/users/spiegel-im-spiegel/gpg_keys | jq -r .[0].raw_key
-----BEGIN PGP PUBLIC KEY BLOCK-----

mFIEWoTPwRMIKoZIzj0DAQcCAwRBr6HVaUrhEBxBcty/ToFv3aJyC+yojwVG84CL
...
JgA=
=gjzz
-----END PGP PUBLIC KEY BLOCK-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ただし &lt;code&gt;raw_key&lt;/code&gt; 項目は登録した公開鍵によっては &lt;code&gt;null&lt;/code&gt; になっているようだ。
なんでだろう。&lt;/p&gt;
&lt;p&gt;登録した鍵の公開鍵パケットのみであれば &lt;code&gt;public_key&lt;/code&gt; 項目にセットされている&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ curl -s https://api.github.com/users/spiegel-im-spiegel/gpg_keys | jq -r .[0].public_key
xlIEWoTPwRMIKoZIzj0DAQcCAwRBr6HVaUrhEBxBcty/ToFv3aJyC+yojwVG84CLs/XUsT7TUUxrrME+RrzbCs4PMYjdZ9B9nCcD1ni2Bjk+GI9/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これはバイナリデータを Base64 形式で符号化したもののようだ。
なので base64 コマンドで復号し，更に拙作の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; で可視化すれば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ curl -s https://api.github.com/users/spiegel-im-spiegel/gpg_keys | jq -r .[0].public_key | base64 -d | gpgpdump 
Public-Key Packet (tag 6) (82 bytes)
    Version: 4 (current)
    Public key creation time: 2018-02-15T09:09:37+09:00
        5a 84 cf c1
    Public-key Algorithm: ECDSA public key algorithm (pub 19)
    ECC Curve OID: nistp256 (256bits key size)
        2a 86 48 ce 3d 03 01 07
    ECDSA EC point (uncompressed format) (515 bits)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という感じに中身を見ることができる。&lt;/p&gt;
&lt;p&gt;以上，広告記事でした（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;GitHub API v3 | GitHub Developer Guide&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.github.com/v3/users/gpg_keys/&#34;&gt;User GPG Keys | GitHub Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/zackey2/items/429c77e5780ba8bc1bf9&#34;&gt;もう「公開鍵送ってください」というやり取りは不要だった - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/git-commit-with-openpgp-signature/&#34;&gt;Git Commit で OpenPGP 署名を行う&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/release/gpgpdump/&#34;&gt;OpenPGP パケットを可視化する gpgpdump&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;ちなみに公開鍵パケットのみで自己署名もない状態では暗号化も署名検証もできない。少なくとも &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; はそうなっている。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>絶対インターネットになんか負けたりしない!!</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/08/against-the-internet/" />
		<id>tag:text.Baldanders.info,2019-08-01:/remark/2019/08/against-the-internet/</id>
		<published>2019-08-01T13:28:11+00:00</published>
		<updated>2020-01-05T11:59:50+00:00</updated>
		<summary>アメリカには勝てなかったよ orz</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/githubceo.html&#34;&gt;GitHubがイランなどからアクセス不可に、米国の経済制裁により。CEOのフリードマン氏「望んでやっているのではない」 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この記事を見て GitHub の CEO がレイプ目で「アメリカには勝てなかったよ」とか言ってるシーンを妄想してしまった私は薄汚れてますね，すみません。&lt;/p&gt;
&lt;p&gt;今回の記事に関して&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;多くの場合「マスターリポジトリ」はGitHubにあったりする。社内の開発であってもGitHubのプライベートサービスを使って行なわれたりする(今回アクセスが遮断されたのはそこである。OSSな公開リポジトリは関係ない)。開発の中心にGitHubがあるために、GitHubにアクセス出来ないと協調が出来なくなってしまう。元々、そういったことがないように分散リポジトリを提供していたはずのgitが、GitHubを使うことによって「ちょっと便利なcvs」くらいになってしまった&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;http://www.nurs.or.jp/~ogochan/essay/archives/5487&#34;&gt;「インターノット」の敗北 | おごちゃんの雑文&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とかいった話も聞かれるが，はっきり言って git には「マスターリポジトリ」などというものは存在しない。
上流にあるリポジトリも下流にあるリポジトリも実質的に等価であり，入れ替えも分岐も簡単にできるし上流リポジトリを分散させることも可能だ。
これがそれまで主流だった CVS や Subversion などといったものとは異なる部分である。&lt;/p&gt;
&lt;p&gt;もし GitHub に BAN されたら開発体制が決定的に破綻してしまうというのなら，この機会に見直しを行ったほうがいいだろう。
職業エンジニアなら特定のサービスにロックインしてしまうことの危うさは身に沁みているはずである。&lt;/p&gt;
&lt;p&gt;商用利用が解禁されて以降，つまり20年以上前からインターネットは「分散ネットワーク」でも「非中央集権ネットワーク」でもなくなった。
これを印象づけたのが2010年末から始まった「アラブの春」である。
市民運動で揺れるエジプトではたった5本の電話で8000万人のインターネット・アクセスが遮断された。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;インターネットが当初の学術目的から踏み出して現在のような誰でも使える商業サービスになってから20年以上が経つうちに，そうした蓄積伝送の原理が果たす役割は，一貫して縮小していった。&lt;br /&gt;
　この間，ネットワークに加わる新たなノードの圧倒的多数はISPを介してネットに接続する家庭や企業のコンピューターだった。
ISPの接続モデルでは，利用者のコンピューターはデータの中継はしない。
それはネットワークの端末，つまりデータの送受信だけを，常にISPのコンピューターを介して行うターミナル・ノードだ。
言い換えれば，インターネットの爆発的な成長はネットワーク地図に行き止まりのルートを増やしただけで，新たなルートを加えることはほとんどなかった。&lt;br /&gt;
　そしてISPなど大量の情報ルートを持つ者は，彼らがルートを提供している何百万ものノードを支配下におくこととなった。
これらのノードは，もしISPがダウンしたり，ネットから遮断されたりすると，その障害を回避する方法がない。
ISPはインターネットが停止しないようにするどころか，実効上は停止スイッチになってしまった。&lt;/q&gt;
（p.77）
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;http://www.nikkei-science.com/201206_074.html&#34;&gt;介入されないもうひとつのウェブ&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;つまり GitHub も「停止スイッチ」を持っていて，国家はそのスイッチを押させることができるということだ。&lt;/p&gt;
&lt;p&gt;これから本気で「分散ネットワーク」とか「非中央集権ネットワーク」とかいったものを構築したいのなら，それは最低でも「インターネットがなくとも機能する」ことが要件となるだろう。
インターネットは（国家や社会や企業といったものの思惑に）敗北したのだから。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/post_274.html&#34;&gt;アドビ、ベネズエラの全アカウントを無効にすると発表。米政府による対ベネズエラ制裁に従い － Publickey&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/11/the-shadow-web/&#34;&gt;“The Shadow Web” （再掲載）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4532512123?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51gurnOqhiL._SL160_.jpg&#34; width=&#34;120&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4532512123?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;サイバーセキュリティ (別冊日経サイエンス)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;日経サイエンス編集部 (編集)&lt;/dd&gt;
    &lt;dd&gt;日本経済新聞出版社 2016-04-22 (Release 2016-04-22)&lt;/dd&gt;
    &lt;dd&gt;ムック&lt;/dd&gt;
    &lt;dd&gt;4532512123 (ASIN), 9784532512125 (EAN), 4532512123 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;『日経サイエンス』2012年6月号の「介入されないもうひとつのウェブ」が収録されている。その他にも2010年代前半におけるセキュリティ問題についてよくまとめられている。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-11-05&#34;&gt;2016-11-05&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- サイバーセキュリティ (別冊日経サイエンス) --&gt;
</content>
	</entry><entry>
		<title>OpenPGP の電子署名は「ユーザーの身元を保証し」ない</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/openpgp/web-of-trust/" />
		<id>tag:text.Baldanders.info,2019-03-21:/openpgp/web-of-trust/</id>
		<published>2019-03-20T15:28:40+00:00</published>
		<updated>2020-01-05T11:59:50+00:00</updated>
		<summary>つまり公開鍵や電子署名で「ユーザーの身元を保証」するのではなく「身元の保証されたユーザ」同士で鍵と電子署名を運用するのである。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;重箱の隅を突っつくような内容で申し訳ないのだが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1175019.html&#34;&gt;「GitKraken 5.0」がリリース ～GPGコミットや“Interactive Rebase”をサポート - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という記事で&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;メジャーアップデートとなる本バージョンでは、“GNU Privacy Guard (GPG)”による署名付きのコミットがサポートされた。ユーザーの身元を保証し、他のユーザーによるなりすましを防止することができる。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1175019.html&#34;&gt;「GitKraken 5.0」がリリース ～GPGコミットや“Interactive Rebase”をサポート&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;などと書いてあって「それはちゃうやろ」という話。&lt;/p&gt;
&lt;h2&gt;暗号機能の4要素&lt;/h2&gt;
&lt;p&gt;昔からよく言われる暗号機能の4要件は以下の通り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;機密性（Confidentiality）&lt;/li&gt;
&lt;li&gt;完全性（Integrity）&lt;/li&gt;
&lt;li&gt;認証（Authentication）&lt;/li&gt;
&lt;li&gt;否認防止（Non-repudiation）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このうちデータへの電子署名では主に完全性と否認防止を行う。
否認防止という言葉はちょっと耳慣れないかもしれないが，要するに「あなたはこのデータに署名した」という事実を否認することが出来ない，という意味である&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;これらを達成するためには電子署名に使う公開鍵が鍵オーナーと正しく紐付いている必要がある&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
おそらく最初の記事は「公開鍵が鍵オーナーと正しく紐付いている」という前提で「ユーザーの身元を保証」などと書いているのかもしれないが，話はそう簡単ではないのだ。&lt;/p&gt;
&lt;h2&gt;公開鍵基盤&lt;/h2&gt;
&lt;h3&gt;X.509&lt;/h3&gt;
&lt;p&gt;「公開鍵が鍵オーナーと正しく紐付いている」ことを証明するために必要なのが「公開鍵基盤（Public-Key Infrastructure; PKI）」である。
公開鍵基盤として最も有名なのは HTTPS 接続で使われている X.509 であろう。
X.509 の「信用モデル（trust model）」では hierarchical な「認証局（Certification Authority; CA）」を構成し，その認証局が公開鍵を証明することで成り立っている。&lt;/p&gt;
&lt;p&gt;でも実は認証局が証明しているのは「公開鍵が鍵オーナーと正しく紐付いている」ことだけで，鍵オーナーの「身元を保証」しているわけではない。&lt;/p&gt;
&lt;p&gt;そこで HTTPS には &lt;a href=&#34;https://baldanders.info/blog/000277/&#34; title=&#34;Extended Validation SSL — Baldanders.info&#34;&gt;EV SSL (Extended Validation SSL) なる奇っ怪な仕組み&lt;/a&gt;が組み込まれた。
これは鍵オーナーの「身元を保証」するための仕組みで，鍵オーナーは認証局に対して自身の身元を証明するものを提出し認証局は公開鍵の管理をより厳格に行う，ということらしい。&lt;/p&gt;
&lt;p&gt;正直に言って「屋上屋を架す」仕組みであり認証局の責務を逸脱していると思うのだが，まぁ深くは突っ込むまい。&lt;/p&gt;
&lt;h3&gt;Web of Trust&lt;/h3&gt;
&lt;p&gt;これに対して PGP/&lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; が伝統的に執っている信用モデルは「信用の輪（web of trust）」と呼ばれている。&lt;/p&gt;
&lt;p&gt;これは要するに「友達の友達は友達」というやつで，ユーザ同士がお互いの鍵を相互に認証することで信用を構成する仕組みである。&lt;/p&gt;
&lt;p&gt;何故 PGP/&lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; が X.509 のような「権威による認証」を採用しなかったかというと，それは PGP の出自に関係がある。
PGP の作者である Phil Zimmermann は，当時は反核運動家であり国家等の「権威」に依らない信用モデルを必要としていたと言われている&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;OpenPGP は名前だけならどんな鍵でも作れる。
たとえば Bitcoin の作者と言われる Satoshi Nakamoto の公開鍵は&lt;a href=&#34;https://text.baldanders.info/remark/2016/05/openpgp-key-of-satoshi-nakamoto/&#34;&gt;公開鍵サーバを探せば簡単に見つかる&lt;/a&gt;が，それが「あの」 Satoshi Nakamoto 本人であると示す証拠は（少なくとも公開鍵自体には）存在しない。
OpenPGP 公開鍵やその電子署名で赤の他人の「身元を保証」することは出来ないのだ。&lt;/p&gt;
&lt;h2&gt;Git を中心としたチーム運営に &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; を利用する&lt;/h2&gt;
&lt;p&gt;じゃあ git commit で OpenPGP 署名を付与することにどんな意義があるかというと，それはチーム運営で威力を発揮する。
つまり公開鍵や電子署名で「ユーザーの身元を保証」するのではなく「身元の保証されたユーザ」同士で鍵と電子署名を運用するのである。
これでチーム以外からのなりすまし commit を検知（防止ではない&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;）しやすくなる。&lt;/p&gt;
&lt;p&gt;この辺について詳しくは，拙文「&lt;a href=&#34;https://text.baldanders.info/openpgp/openpgp-key-management/&#34;&gt;OpenPGP 鍵管理に関する考察&lt;/a&gt;」を書いたので興味があれば参照してほしい。&lt;/p&gt;
&lt;p&gt;また GitHub のようにアカウントと公開鍵を紐つけることによってサービス内における強力なポートフォリオとして機能している点は見逃せないだろう。
GitHub 上の&lt;ruby&gt;&lt;rb&gt;活動&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;contribution&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;がそのまま「エンジニアとしてのユーザ」の身元を保証しているわけだ。&lt;/p&gt;
&lt;p&gt;ホンマ git ってよく出来たシステムだよなぁ。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/openpgp/git-commit-with-openpgp-signature/&#34;&gt;Git Commit で OpenPGP 署名を行う&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://baldanders.info/spiegel/cc-license/&#34;&gt;わかる！ OpenPGP 暗号 — Baldanders.info&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34;&gt;spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer&lt;/a&gt; : OpenPGP 鍵や電子署名のダンプには拙作をどうぞ（宣伝&lt;code&gt;w&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4314009071?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;スティーブン・レビー (著), 斉藤 隆央 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015-03-09&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号化 プライバシーを救った反乱者たち --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4900900028?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/5132396FFQL._SL160_.jpg&#34; width=&#34;124&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4900900028?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;PGP―暗号メールと電子署名&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;シムソン ガーフィンケル (著), Garfinkel,Simson (原著), ユニテック (翻訳)&lt;/dd&gt;
    &lt;dd&gt;オライリー・ジャパン 1996-04-01&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4900900028 (ASIN), 9784900900028 (EAN), 4900900028 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;良書なのだが，残念ながら内容が古すぎた。 PGP の歴史資料として読むならいいかもしれない。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-10-16&#34;&gt;2014-10-16&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- PGP―暗号メールと電子署名 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B015643CPE?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2015-08-25 (Release 2015-09-17)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B015643CPE (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 暗号技術入門 第3版 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;メッセージング・システムを含む暗号通信においては「否認防止」よりむしろ「否認可能 (Deniability)」が要求される場合がある。詳しくは拙文「&lt;a href=&#34;https://baldanders.info/blog/000787/&#34; title=&#34;OTR over XMPP — Baldanders.info&#34;&gt;OTR over XMPP&lt;/a&gt;」を参考にどうぞ。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;たとえば Bitcoin/Blockchain は公開鍵と鍵オーナーとの紐づけを行わない。元帳である Blockchain に記載された取引自体は改竄もなく正しいとしても誰がそれを行ったかを証明する術がない。証明するためには別の仕組みが必要となる。あるいは Bitcoin/Blockchain は「信用」を極力排除することでシステム自体の「正しさ」を担保しているとも言える。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;本当のことろ，作者である Phil Zimmermann がどこまで企図していたのかは知らないが， PGP の登場によって暗号は初めて（国家や大企業のものではなく）一般の人も「使える」ものになったことは確かである。なお &lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; 実装のひとつである &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; では伝統的な「信用の輪」以外にも X.509 の信用モデルや &lt;a href=&#34;https://en.wikipedia.org/wiki/Trust_on_first_use&#34;&gt;TOFU (Trust On First Use)&lt;/a&gt; と呼ばれる信用モデルもサポートしている。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;なりすましの防止はできなくとも，きちんと鍵と電子署名を運用しているのであれば，抑止にはなるだろう。 &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Git Commit で OpenPGP 署名を行う</title>
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/openpgp/git-commit-with-openpgp-signature/" />
		<id>tag:text.Baldanders.info,2017-12-01:/openpgp/git-commit-with-openpgp-signature/</id>
		<published>2017-12-01T08:51:38+00:00</published>
		<updated>2019-07-03T11:55:57+00:00</updated>
		<summary>Git で commit する際に OpenPGP 署名を付加できるらしい。いやぁ，今まで知らなかったよ。物知らずでごめん。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;Git&lt;/a&gt; で commit する際に OpenPGP 署名を付加できるらしい。
いやぁ，今まで知らなかったよ。
物知らずでごめん。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/uz/v2/Git-Tools-Signing-Your-Work&#34;&gt;Git - Signing Your Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/prince_0203/items/ef0e12f2f6d150ff0485&#34;&gt;GitHubでGPGにより署名されたコミットにバッジが表示されるようになったので設定してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OpenPGP 鍵の登録&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;Git&lt;/a&gt; に OpenPGP 鍵を設定するには以下のコマンドでいいようだ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git config --global user.signingkey 7E20B81C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;“&lt;code&gt;7E20B81C&lt;/code&gt;” は OpenPGP 鍵の鍵 ID である。
鍵ごとに異なる値になるので注意。
今回は「&lt;a href=&#34;https://baldanders.info/pubkeys/&#34;&gt;OpenPGP 公開鍵リスト&lt;/a&gt;」で公開している鍵の鍵 ID を登録している。
この設定で &lt;code&gt;.gitconfig&lt;/code&gt; ファイルに以下の記述が追加される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;k&#34;&gt;[user]&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;signingkey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;7E20B81C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;Gpg を直接指定する場合&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; の場合， &lt;code&gt;git bash&lt;/code&gt; に同梱されている &lt;code&gt;gpg.exe&lt;/code&gt; を使うのだが，困ったことにこれが classic version なのである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
gpg (GnuPG) 1.4.20
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
Supported algorithms:
Pubkey: RSA, RSA-E, RSA-S, ELG-E, DSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: MD5, SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;既に &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の Windows 版をインストールしているのであれば，以下の設定で &lt;code&gt;gpg.exe&lt;/code&gt; をフルパス指定できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git config --global gpg.program C:/path/to/GnuPG/bin/gpg.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ちなみに &lt;code&gt;.gitconfig&lt;/code&gt; ファイルには以下の記述が追加される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;k&#34;&gt;[gpg]&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;program&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;C:/path/to/GnuPG/bin/gpg.exe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なお Windows 環境であれば，特に理由がないかぎり， stable/modern version を使うことをお薦めする。
Windows 環境以外でも &lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を classic version と stable/modern version で使い分けている場合は，この設定が役に立つだろう。&lt;/p&gt;
&lt;h2&gt;Commit に OpenPGP 署名を付加する&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; 時に OpenPGP 署名を付加したい場合は， version 2 以降なら，以下の設定で常時署名を行うようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git config --global commit.gpgsign true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;.gitconfig&lt;/code&gt; ファイルには以下の記述が追加される。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;k&#34;&gt;[commit]&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;gpgsign&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この状態で逆に commit 時に署名を付加してほしくない場合は &lt;code&gt;--no-gpg-sign&lt;/code&gt; オプションを付加すればいいようだ。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの &lt;a href=&#34;https://atom.io/packages/git-plus&#34; title=&#34;git-plus&#34;&gt;git-plus&lt;/a&gt; パッケージで commit してみたが，きちんと署名もできていた。
&lt;a href=&#34;http://gitextensions.github.io/&#34; title=&#34;Git Extensions&#34;&gt;Git Extensions&lt;/a&gt; でも問題ないようだ。
「&lt;a href=&#34;http://qiita.com/prince_0203/items/ef0e12f2f6d150ff0485&#34;&gt;GitHubでGPGにより署名されたコミットにバッジが表示されるようになったので設定してみる&lt;/a&gt;」には「GitHub DesktopはGPGによる署名をサポートしていません」とあるが， Facebook で教えてもらった話によれば， &lt;code&gt;gpg-agent&lt;/code&gt; と Pinentry が正しく設定されていれば使えるそうだ。&lt;/p&gt;
&lt;p&gt;きちんと署名されているか確認するには &lt;code&gt;git log&lt;/code&gt; コマンドに &lt;code&gt;--show-signature&lt;/code&gt; オプションを付けるとよい。&lt;/p&gt;
&lt;h3&gt;Tag にも Merge にも署名できる&lt;/h3&gt;
&lt;p&gt;タグに署名を付加する場合は &lt;code&gt;-s&lt;/code&gt; オプションを付けて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git tag -s -a v0.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすればいい。
同様に merge でも &lt;code&gt;-S&lt;/code&gt; オプションを付けて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git merge -S branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;でいいようだ。&lt;/p&gt;
&lt;h2&gt;GitHub が OpenPGP 署名に対応した&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; で commit や tag に対する署名を表示できるようになったらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/2144-gpg-signature-verification&#34;&gt;GPG signature verification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;たとえばこんな感じに表示される。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/26315000570/&#34;&gt;&lt;img src=&#34;https://photo.baldanders.info/flickr/image/26315000570_m.png&#34; srcset=&#34;https://photo.baldanders.info/flickr/image/26315000570_m.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;OpenPGP Key in GitHub (4)&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/26315000570/&#34;&gt;OpenPGP Key in GitHub (4)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これを有効にするには &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; に OpenPGP 公開鍵を登録して署名検証可能にしなければならない。
公開鍵の登録は設定画面で行う。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/26494073882/&#34;&gt;&lt;img src=&#34;https://photo.baldanders.info/flickr/image/26494073882_m.png&#34; srcset=&#34;https://photo.baldanders.info/flickr/image/26494073882_m.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;OpenPGP Key in GitHub (1)&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/26494073882/&#34;&gt;OpenPGP Key in GitHub (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;この画面で「New GPG key」ボタンを押すと以下の入力画面になる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/26520705641/&#34;&gt;&lt;img src=&#34;https://photo.baldanders.info/flickr/image/26520705641_m.png&#34; srcset=&#34;https://photo.baldanders.info/flickr/image/26520705641_m.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;OpenPGP Key in GitHub (2)&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/26520705641/&#34;&gt;OpenPGP Key in GitHub (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ここに公開鍵の armor テキストを貼り付けて「Add GPG key」ボタンを押せばよい。
これで OpenPGP 公開鍵の登録は完了である。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/26586667165/&#34;&gt;&lt;img src=&#34;https://photo.baldanders.info/flickr/image/26586667165_m.png&#34; srcset=&#34;https://photo.baldanders.info/flickr/image/26586667165_m.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;OpenPGP Key in GitHub (3)&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://photo.baldanders.info/flickr/26586667165/&#34;&gt;OpenPGP Key in GitHub (3)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なお公開鍵の armor テキストは以下のコマンドで取得できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --armor --export 7E20B81C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;“&lt;code&gt;7E20B81C&lt;/code&gt;” は先ほど説明した鍵 ID である。&lt;/p&gt;
&lt;p&gt;Tag や commit に署名することで「なりすまし」に対する抑止になる。
これは特にチームで開発を行う場合に威力を発揮するだろう。
ぜひ習慣付けていきたいものである。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/pontago/items/5867b6492e09c34084fe&#34;&gt;git(GitHub)でGPGを使った署名をおこなう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/akashima/items/4b40ccb13ad13dee5cdb&#34;&gt;Yubikeyを使って、Githubのcommitをverifyする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/wktk/items/acf641bbbf2b82ff7275&#34;&gt;Git のタグやコミットを (PGP ではなく) S/MIME で署名する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/batch9703/items/f6959ba51bb9bb32ef93&#34;&gt;git cryptを導入する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
</feed>
