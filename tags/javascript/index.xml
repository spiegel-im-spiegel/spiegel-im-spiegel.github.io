<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>Javascript - text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/tags/javascript/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/tags/javascript/index.xml" />
	<id>tag:text.Baldanders.info,2016-04-29:/tags</id>
	<updated>2016-04-29T19:49:40+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.28</generator>

	
	<entry>
		<title>JavaScipt の演算誤差 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/04/arithmetic-error-by-javascript/" />
		<id>tag:text.Baldanders.info,2016-04-29:/remark/2016/04/arithmetic-error-by-javascript/</id>
		<published>2016-04-29T19:49:40+09:00</published>
		<updated>2016-04-29T19:49:40+09:00</updated>
		<summary>今回は小ネタ。JavaScript の数値演算における演算誤差の話。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;今回は小ネタ。
実は最近の JavaScript についてはよく知らなかったりするので（勉強中），間違いとか「最近はもっと簡単にできるよ」とかいった点があったら指摘していただけると助かります。&lt;/p&gt;

&lt;p&gt;（そうそう。
&lt;a href=&#34;https://nodejs.org/en/blog/announcements/v6-release/&#34;&gt;node.js v6 のリリース&lt;/a&gt;おめでとうございます）&lt;/p&gt;

&lt;p&gt;JavaScript の数値（Number）型の実体は IEEE754 浮動小数点形式である。
他の言語でよく見るような整数型や decimal/currency 型というのは存在しない。
たとえばある値の百分率を取ろうとして，うっかり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function percent(rate) {
	let pc = 100.0 * rate;
	console.log(&amp;quot;rate: &amp;quot; + pc + &amp;quot;%&amp;quot;);
}

percent(0.0112);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんてなコードを書くと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rate: 1.1199999999999999%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと表示され「はうーん」な感じになってしまう。
これは浮動小数点形式特有の演算誤差で，数値の符号化を2進数を基数として行っているためにどうしてもそうなってしまう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fp&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;表示の上でこれを回避する方法はいくつかある。
よくあるのは以下の2つ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;演算部分を他の言語（Java や SQL など）で行う。&lt;/li&gt;
&lt;li&gt;有効桁数以下を丸める&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ビジネスロジックを実装する Entity 以下のクラスを JavaScript 以外の言語で記述している場合は最初のやり方で問題ないだろう。
これができない場合でも，大抵の数値計算は「有効桁数」が仕様として決められている筈なので，2番目のやり方で &lt;code&gt;Math.round()&lt;/code&gt;, &lt;code&gt;Math.ceil()&lt;/code&gt;, &lt;code&gt;Math.floor()&lt;/code&gt; といった関数を組み合わせて表示桁数を調整できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cf&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
たとえば先程の &lt;code&gt;percent()&lt;/code&gt; 関数を小数点以下3位で四捨五入するように変更すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function percent(rate) {
	let pc = Math.round(100000.0 * rate) / 1000.0;
	console.log(&amp;quot;rate: &amp;quot; + pc + &amp;quot;%&amp;quot;);
}

percent(0.0112);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;rate: 1.12%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示される。&lt;/p&gt;

&lt;p&gt;しかし他システムと連携していて有効桁が決まらないとか，要求として値を丸められては困る場合もある。
こういう場合は以下のようにするとよい。
（型を意識してもらうため冗長な書き方になっているがご容赦）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function percent(rate) {
	let sRate = rate.toString();
	let digits = sRate.indexOf(&amp;quot;.&amp;quot;);
	if (digits &amp;lt; 0) {
		digits = 0;
	} else {
		digits = sRate.length - (digits + 1);
	}
	let pc = (100 * sRate.replace(&amp;quot;.&amp;quot;, &amp;quot;&amp;quot;).valueOf()) / Math.pow(10, digits);
	console.log(&amp;quot;rate: &amp;quot; + pc + &amp;quot;%&amp;quot;);
}

percent(0.0112);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで表示結果は &lt;code&gt;1.12%&lt;/code&gt; になる（ちなみに入力値が &lt;code&gt;1&lt;/code&gt; ならちゃんと &lt;code&gt;100%&lt;/code&gt; になる）。
つまり 0.0112 は $0.0112 = 112 \times 10^{-4}$ と整数部分と小数点以下の桁数に分解できるので，演算は整数部分で行い，最後に小数点以下の桁数分だけ割り算をすればよい。&lt;/p&gt;

&lt;p&gt;これは固定小数点形式の数値演算によく似ている。
ポイントは整数同士の演算に変換し最後に桁を揃えることである。
これなら演算誤差は生じない（ただし桁あふれに注意）。&lt;/p&gt;

&lt;p&gt;余談だが &lt;code&gt;percent()&lt;/code&gt; 関数では &lt;code&gt;100&lt;/code&gt; は固定値なので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function percent(rate) {
	let sRate = rate.toString();
	let digits = sRate.indexOf(&amp;quot;.&amp;quot;);
	if (digits &amp;lt; 0) {
		digits = 0;
	} else {
		digits = sRate.length - (digits + 1);
	}
	let pc = (sRate.replace(&amp;quot;.&amp;quot;, &amp;quot;&amp;quot;)+&amp;quot;00&amp;quot;).valueOf() / (&amp;quot;1&amp;quot;+&amp;quot;0&amp;quot;.repeat(digits)).valueOf();
	console.log(&amp;quot;rate: &amp;quot; + pc + &amp;quot;%&amp;quot;);
}

percent(0.0112);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば割り算1回で済む（数学関数と文字列操作のどちらがコストが高いかは微妙な気もするが）。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fp&#34;&gt;最近の IEEE754-2008 では10進数を基数とした符号化も標準化されている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cf&#34;&gt;ググってみると &lt;code&gt;Math.ceil()&lt;/code&gt; を切り上げ， &lt;code&gt;Math.floor()&lt;/code&gt; を切り捨てと紹介している記事を見かけるが厳密には間違いである。正しくは &lt;code&gt;Math.ceil()&lt;/code&gt; は天井関数（ceiling function）で &lt;code&gt;Math.floor()&lt;/code&gt; は床関数（floor function）である。切り上げや切り捨てとは負値の扱いで挙動が異なるので注意が必要。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
