{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "ついに apt-key コマンドに「非推奨」のワーニングが",
      "section": "remark",
      "description": "しょうがない。 この機会に対応するか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/apt-key-is-deprecated/",
      "published": "2022-05-06T09:10:02+00:00",
      "update": "2022-05-06T09:10:37+00:00",
      "content": "前回の続き。 Docker を Ubuntu にインストールするには以下の拙文が参考になる。\n Ubuntu に Docker を入れる  簡単に説明すると\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - と電子署名検証用の OpenPGP 鍵をインポートした上で\n$ sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; とすれば (Ubuntu 22.04 LTS であれば) jammy 用のリポジトリが追加される。 実際には /etc/apt/sources.list.d/ ディレクトリにある archive_uri-https_download_docker_com_linux_ubuntu-jammy.list ファイルに\ndeb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable という内容が書かれている（筈）。\nところが今回 Ubuntu 22.04 LTS では，この状態で apt update すると\n$ sudo apt update ... ヒット:5 https://download.docker.com/linux/ubuntu jammy InRelease ... パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています... 完了 状態情報を読み取っています... 完了 パッケージはすべて最新です。 W: https://download.docker.com/linux/ubuntu/dists/jammy/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details. とワーニングが出る。 あぁ，ついに Ubuntu でもこのワーニングが出るようになったか。 今まで先延ばしにしてたからなぁ。 しょうがない。 この機会に対応するか。\nちなみに apt-key(8) のマニュアルには\nExcept for using apt-key del in maintainer scripts, the use of apt-key is deprecated. This section shows how to replace existing use of apt-key.\nIf your existing use of apt-key add looks like this:\nwget -qO- https://myrepo.example/myrepo.asc | sudo apt-key add - Then you can directly replace this with (though note the recommendation below):\nwget -qO- https://myrepo.example/myrepo.asc | sudo tee /etc/apt/trusted.gpg.d/myrepo.asc Make sure to use the \u0026ldquo;asc\u0026rdquo; extension for ASCII armored keys and the \u0026ldquo;gpg\u0026rdquo; extension for the binary OpenPGP format (also known as \u0026ldquo;GPG key public ring\u0026rdquo;). The binary OpenPGP format works for all apt versions, while the ASCII armored format works for apt version \u0026gt;= 1.4.\nRecommended: Instead of placing keys into the /etc/apt/trusted.gpg.d directory, you can place them anywhere on your filesystem by using the Signed-By option in your sources.list and pointing to the filename of the key. See sources.list(5) for details. Since APT 2.4, /etc/apt/keyrings is provided as the recommended location for keys not managed by packages. When using a deb822-style sources.list, and with apt version \u0026gt;= 2.4, the Signed-By option can also be used to include the full ASCII armored keyring directly in the sources.list without an additional file.\n via apt-key(8)  などと書かれている。 要するに /etc/apt/keyrings ディレクトリに公開鍵を ASCII Armor 形式のまま放り込んでしまえばいいのか？\nんー。 こんな感じかな。\n$ cd /etc/apt/keyrings $ sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o docker-key.asc ファイル名は適当。 念のため出力した docker-key.asc ファイルの中身を拙作 gpgpdump で覗いてみよう。\n$ gpgpdump -u -f docker-key.asc Public-Key Packet (tag 6) (525 bytes) Version: 4 (current) Public key creation time: 2017-02-22T18:36:26Z Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (4096 bits) RSA public encryption exponent e (17 bits) User ID Packet (tag 13) (43 bytes) User ID: Docker Release (CE deb) \u0026lt;docker@docker.com\u0026gt; Signature Packet (tag 2) (567 bytes) Version: 4 (current) Signiture Type: Positive certification of a User ID and Public-Key packet (0x13) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-512 (hash 10) Hashed Subpacket (33 bytes) Signature Creation Time (sub 2): 2017-02-22T19:34:24Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to certify other keys. Flag: This key may be used to sign data. Flag: This key may be used to encrypt communications. Flag: This key may be used to encrypt storage. Flag: This key may be used for authentication. Preferred Symmetric Algorithms (sub 11) (4 bytes) Symmetric Algorithm: AES with 256-bit key (sym 9) Symmetric Algorithm: AES with 192-bit key (sym 8) Symmetric Algorithm: AES with 128-bit key (sym 7) Symmetric Algorithm: CAST5 (128 bit key, as per) (sym 3) Preferred Hash Algorithms (sub 21) (4 bytes) Hash Algorithm: SHA2-512 (hash 10) Hash Algorithm: SHA2-384 (hash 9) Hash Algorithm: SHA2-256 (hash 8) Hash Algorithm: SHA2-224 (hash 11) Preferred Compression Algorithms (sub 22) (4 bytes) Compression Algorithm: ZLIB \u0026lt;RFC1950\u0026gt; (comp 2) Compression Algorithm: BZip2 (comp 3) Compression Algorithm: ZIP \u0026lt;RFC1951\u0026gt; (comp 1) Compression Algorithm: Uncompressed (comp 0) Features (sub 30) (1 bytes) Flag: Modification Detection (packets 18 and 19) Key Server Preferences (sub 23) (1 bytes) Flag: No-modify Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x8d81803c0ebfcd88 Hash left 2 bytes b2 c9 RSA signature value m^d mod n (4094 bits) Public-Subkey Packet (tag 14) (525 bytes) Version: 4 (current) Public key creation time: 2017-02-22T18:36:26Z Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (4096 bits) RSA public encryption exponent e (17 bits) Signature Packet (tag 2) (1086 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (9 bytes) Signature Creation Time (sub 2): 2017-02-22T18:36:26Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to sign data. Unhashed Subpacket (553 bytes) Issuer (sub 16): 0x8d81803c0ebfcd88 Embedded Signature (sub 32) (540 bytes) Signature Packet (tag 2) (540 bytes) Version: 4 (current) Signiture Type: Primary Key Binding Signature (0x19) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2017-02-22T18:36:26Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x7ea0a9c3f273fcd8 Hash left 2 bytes d5 60 RSA signature value m^d mod n (4095 bits) Hash left 2 bytes f2 b8 RSA signature value m^d mod n (4095 bits) もともと /etc/apt/trusted.gpg ファイルに入ってる公開鍵は\n$ apt-key list Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)). /etc/apt/trusted.gpg -------------------- pub rsa4096 2017-02-22 [SCEA] 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid [ 不明 ] Docker Release (CE deb) \u0026lt;docker@docker.com\u0026gt; sub rsa4096 2017-02-22 [S] ... となっているので，同じ鍵ということでいいよね。\nここで /etc/apt/sources.list.d/ ディレクトリにある archive_uri-https_download_docker_com_linux_ubuntu-jammy.list ファイルの中身を以下のように書き換える。\ndeb [arch=amd64 signed-by=/etc/apt/keyrings/docker-key.asc] https://download.docker.com/linux/ubuntu jammy stable ポイントは signed-by オプション。 このオプションに先程の公開鍵ファイルをフルパスで指定する。 add-apt-repository コマンドを使うなら\nsudo add-apt-repository \u0026#34;deb [arch=amd64 signed-by=/etc/apt/keyrings/docker-key.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; という感じだろうか。これでもう一度 apt update すると\n$ sudo apt update ... ヒット:5 https://download.docker.com/linux/ubuntu jammy InRelease ... パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています... 完了 状態情報を読み取っています... 完了 パッケージはすべて最新です。 よし。 ワーニングは出なくなったな。\nなんでこんな面倒くさいことをするかと言うと，もし秘密鍵が漏洩したサードパーティの公開鍵がひとつでも APT の鍵束に入っていると，その鍵を使って malware 入れ放題になる可能性があるからだ1。 今回の措置によって，サードパーティの公開鍵が作用するパッケージを限定することができる。 まぁ，苦肉の策って感じだけどね（笑）\n最後に /etc/apt/trusted.gpg ファイルを削除するか他所に退避させておけば問題ないであろう。\nブックマーク  Ubuntu Manpage: apt-key - APT キー管理ユーティリティ 非推奨となったapt-keyの代わりにsigned-byとgnupgを使う方法 - 2021-05-05 - ククログ  参考図書   暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n   PGP―暗号メールと電子署名 シムソン ガーフィンケル (著), Garfinkel,Simson (原著), ユニテック (翻訳) オライリー・ジャパン 1996-04-01 単行本 4900900028 (ASIN), 9784900900028 (EAN), 4900900028 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  良書なのだが，残念ながら内容が古すぎた。 PGP の歴史資料として読むならいいかもしれない。\nreviewed by Spiegel on 2014-10-16 (powered by PA-APIv5)\n   暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n   OpenPGP 鍵の信用モデルは「信用の輪（web of trust）」と呼ばれるもので，ユーザ同士の peer で直接的な関係が鍵管理の前提になっている。このため不特定のユーザの間ではどうしても鍵管理が緩くなってしまう。この辺は不特定多数のユーザを前提にした X.509 とは思想が異なる。 OpenPGP 鍵の信用モデルについては拙文「OpenPGP の電子署名は「ユーザーの身元を保証し」ない」あたりを参考にしていただけるとありがたい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Ubuntu 22.04 LTS へのアップグレード",
      "section": "remark",
      "description": "今回は特に大きな問題はなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/upgrade-ubuntu-22_04-lts/",
      "published": "2022-05-06T09:07:48+00:00",
      "update": "2022-05-06T21:30:37+00:00",
      "content": "Ubuntu が「22.04 LTS にアップグレードせんのん？（← 超意訳）」と煩いので GW で余裕のある間にアップグレードすることにした。 今回は特に（少なくとも最近の機械では）日本語周りで不具合の話も聞かなかったし。\nUbuntu 22.04 リリースノート  今回は特に大きな問題はなし。\n 日本語入力周りは問題なく動いている。 Ubuntu コミュニティのご尽力に感謝 21.10 から Firefox は Snap 版になっているのに何故か言語パッケージが APT で提供されているというチグハグな状態だったが，今回で統一された？ Thunderbird は相変わらず GnuPG の鍵束を認識してくれない。そろそろ捨てようか LibreOffice は 7.3 系。 OpenPGP 鍵で暗号化したファイルもちゃんと開けるし，問題ないだろう。 Snap 版は相変わらず評判が悪いようだ（笑） KeePassXC は既に jammy リポジトリがある。依存ライブラリのバージョンが違うらしい pgAdmin4 は jammy リポジトリがまだ用意されてない模様。こちらはしばらく様子見か Node.js は NodeSource で v18 系をインストールしてみた。今のところは問題なし。なにかあれば v16 (LTS) に戻すつもり  いつものように GnuPG が古い $ gpg --version gpg (GnuPG) 2.2.27 libgcrypt 1.9.4 Copyright (C) 2021 Free Software Foundation, Inc. License GNU GPL-3.0-or-later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 まぁ v2.3 系でないのはしょうがないにしても，せめて今の LTS 最新版（v2.2.34）にしてくれよ orz\nOpenSSH と OpenSSL $ ssh -V OpenSSH_8.9p1 Ubuntu-3, OpenSSL 3.0.2 15 Mar 2022 OpenSSL は v3.0.3 のセキュリティ・アップデートに対応したバックポート・パッチが出ているようだ。 相変わらず分かりにくい。 普通にバージョンを上げてくれんもんかねぇ。\nちなみに GnuPG の gpg-agent との連携は問題なかった。\n OpenSSH の認証鍵を GunPG で作成・管理する gpg-agent の設定： GnuPG in Ubuntu  Docker と apt-key これに関しては記事を分けた。 後半へ続く（笑）\nブックマーク  Ubuntu 22.04 その58 - Ubuntu 22.04 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 22.04 その59 - Ubuntu 22.04 LTSの新機能と変更点 - kledgeb Ubuntu 22.04 その60 - Ubuntu 22.04 LTSの既知の問題 - kledgeb Ubuntu 21.10 その89 - Ubuntu 22.04 LTSへのアップグレードは数日中に提供予定 - kledgeb Ubuntu 20.04 その240 - Ubuntu 22.04 LTSへのアップグレード提供時期について - kledgeb Canonical、「Ubuntu 22.04 LTS」の提供を開始 ～WSLパッケージもストアに登場 - 窓の杜 Ubuntu 22.04 をインストールしたら設定すること 10 ヶ条 Ubuntu 20.04にNode.jsをインストールする方法 | DigitalOcean  "
    },
    {
      "title": "波乗りプログラマ",
      "section": "remark",
      "description": "競馬の予想屋に現金を預けてはいけない（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/programmer-the-surfer/",
      "published": "2022-05-05T01:49:50+00:00",
      "update": "2022-05-05T01:52:43+00:00",
      "content": "（この記事は Twitter に書き散らしたものを再構成したものです）\n起点はここから。\n 最近のプログラミング言語はなんだかファッションみたくトレンド指向が強い気がしてる。先日の飽きたの記事の人もそうだけど、皆トレンドに遅れを取られまいと必死になってしまってるんじゃなかろうか。\n\u0026mdash; mattn (@mattn_jp) May 3, 2022  この tweet からの一連は実際に Twitter で見ていただくとして，プログラミング言語の「トレンド」はだいたい2,3年おきに入れ替わる。 学生にとって3年は長い時間かもしれないが，仕事してる人にとって3年は短い。 このタイムスケールで「トレンド」を追いかけることに意味は殆どないと断言してしまおう（笑）\nネットでも「COBOL は終わった」「まだだ！まだ終わらんよ」みたいな話はしょっちゅう聞くし，私自身「Java はやめておけ」と言って憚らない人間だが，実際の世の中は汎用機は捨てても COBOL は捨てられないシステムも多いし，私も今だに Java コードで四苦八苦している。 こういった仕事がなくなることは短期的にはないだろう。 だからといってそれらの言語を若い人に勧めるかというと，それは別の話。\nyomoyomo さんの翻訳記事に「プログラミングを独習するには10年かかる」というのがある。 20年以上前の Java に関する記事だが主な主張に関しては他の言語どころか他の業界に置き換えても同じだろう。\n 研究者 (Hayes, Bloom) によると、チェス、作曲、絵画、ピアノ演奏、水泳、テニス、そして神経心理学や位相幾何学の研究を含む、広範な分野のいずれについても、専門技術を身につけるにはおよそ10年かかるそうだ。近道など実在しないようなのだ。4歳にして音楽の神童だったモーツァルトでさえ、超一流の楽曲を作り出すまでに13年以上を要している。別のジャンルになるが、ビートルズが突如現れナンバーワンヒットを連発し、エド・サリバン・ショーに出演したのは1964年だった。しかし、彼らは1957年からリバプールやハンブルグの小さなクラブで演奏していたわけで、また彼らは初期から大衆の支持を獲得したが、彼らがはじめて批評的にも大きな成功を得た『サージェント・ペパーズ』がリリースされたのは1967年である。サミュエル・ジョンソンは、「どんな分野であれ、生涯にわたる努力なくして優れたものには達し得ない。それよりも安い代償で手に入れることはできないのだ」と、それには十年以上かかると考えた。またチョーサーも「人生はとても短く、技を習得するにはとても時間がかかる」と嘆いている。 プログラミングを独習するには10年かかるより  この記事を勝手に読み替えるなら「仕事でプログラミング言語を習得し使いこなすにはそのくらいのタイムスケールで考えなければならない」ということだろう。 言い方を変えるなら，たかが2,3年の「トレンド」で言語を評価するなどナンセンスである。\n10年というのは人生の「就労時代」の1/4から1/3の期間に相当する。 でも「トレンド」で考えるならその10年の間に最低でも2回は入れ替わりがあるということになる。 如何に刹那的か分かるだろう。\nもちろん，どの業界でも「波の最先端」は常に意識して情報を仕入れていく必要がある。 でもその最先端に立っている人を羨み波の尻尾を必死に追いかけるだけでは何も身につかない。 「鶏口となるも牛後となるなかれ」とはよく言ったものである（笑）\n「推測するな計測せよ」の IT 業界では広く集めた「情報」を実際に試して「技能（スキル）」として深堀りし「技術」として昇華していかなければならない。\n技能はモノに付くが技術はヒトに付く これは私がペーペーの新人の頃に当時のボスに叩き込まれた言葉だ。 企業は技能を求めるが，最終的に「個人」に残るのは技術だけだ。 当然ながら辿り着くまでには時間がかかるし，明確なゴールもない。\n某恋愛ラノベ作品に「お金がなければ浮気もできない」というフレーズがあって思わず笑ってしまったが，お金で買える最も価値あるものは自由と時間である。 職業ソフトウェア・エンジニアはプログラミングを「技術」として身に付けるために時間をかけるし，その時間を稼ぐために少なくないお金を使う1。\nメディアは「波」のさきっちょしか見ないし，さらにその先は語れない。 たかが3年先の予測さえ外すのがメディアである。 競馬の予想屋に現金を預けてはいけない（笑）\n  桑田佳祐 – 波乗りジョニー（Full ver.） - YouTube  ブックマーク  プログラミング言語との付き合い方  参考図書   アプレンティスシップ・パターン　―徒弟制度に学ぶ熟練技術者の技と心得 (THEORY/IN/PRACTICE) Dave H. Hoover (著), Adewale Oshineye (著), 柴田 芳樹 (翻訳) オライリージャパン 2010-07-08 単行本（ソフトカバー） 4873114608 (ASIN), 9784873114606 (EAN), 4873114608 (ISBN)  出版元でデジタル版を購入可能。いわゆる「徒弟制度」を参考に「技術」を習得するための考え方を示す本。なんだけど，まだ読み終わってない。\nreviewed by Spiegel on 2022-05-05 (powered by PA-APIv5)\n   ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 Jonathan Rasmusson (著), 島田 浩二 (翻訳), 角谷 信太郎 (翻訳) オライリージャパン 2021-04-26 単行本（ソフトカバー） 4873119464 (ASIN), 9784873119465 (EAN), 4873119464 (ISBN)  出版元でデジタル版を購入可能。今度の読書会の教科書。\nreviewed by Spiegel on 2022-05-05 (powered by PA-APIv5)\n   波乗りジョニー 桑田佳祐 (メインアーティスト) TAISHITA 2001-07-04 (Release 2019-12-20) MP3 ダウンロード B082FWNFPG (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  個人的にカラオケ定番曲のひとつ。桑田佳祐さんの曲は音域が合ってるみたいで歌いやすくてよい。\nreviewed by Spiegel on 2022-05-05 (powered by PA-APIv5)\n   考えてみたら，自由と時間を買うためにお金を稼ぐのに，お金を得るために自分の時間を売り飛ばすのは本末転倒だよな（笑） まぁ，私達ビンボー人はお金がないと死んじゃうからな。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "TechCrunch Japan 終了後の後始末",
      "section": "remark",
      "description": "翻訳記事 URL を可能な限り原文記事 URL に書き換えてみる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/garbage-collection/",
      "published": "2022-05-04T07:03:59+00:00",
      "update": "2022-05-04T07:04:24+00:00",
      "content": "2月に TechCrunch Japan が終了してバックナンバーも残さず消滅する話を書いた。 んで，実際に GW 中にサイトが消滅したわけだが，以前の URL を叩いてみたところ 404 ではなく本家 TechCrunch にリダイレクトされるようだ。\nいや，そこまでしてくれるなら，せめて翻訳記事は本家の原文記事にリダイレクトしてくれよ orz\nまぁ，愚痴ってもしょうがない。 こちらで可能な限り URL の書き換えを試みることにしよう。\nまずこのブログ・サイトの作業リポジトリ上で TechCrunch Japan の URL がどのくらいあるか軽く grep してみる1。\n$ grep -c \u0026#34;jp\\.techcrunch\\.com\u0026#34; \u0026#34;content/**/*.md\u0026#34; 1121 おぅふ。 アホほどあるがな orz\nTechCrunch Japan 記事の URL を機械的に変換できるか たとえば TechCrunch Japan 記事の URL を\n https://jp.techcrunch.com/2020/08/14/2020-08-13-instagram-delete-photos-messages-servers/\n とする。 この記事に対する原文記事の URL は\n https://techcrunch.com/2020/08/13/instagram-delete-photos-messages-servers/\n である。 ドメインが jp.techcrunch.com → techcrunch.com なのは当然として\n 翻訳記事と原文記事では URL パスの日付部分が違う 原文記事の日付は翻訳記事の slug に含まれている 日付部分を除く slug の文字列は翻訳記事と原文記事で同じ  これくらいなら正規表現を使った置換処理で何とかなりそうだ。 最近のテキスト・エディタは置換処理で正規表現が使えるものが多いが，私が愛用している VS Code でも正規表現を使った一括置換が可能である。\n Visual Studio Codeを用いた簡単な正規表現検索 - Qiita  例外 (AMP) を潰す 私の作業環境で2箇所ほど例外というか間違いがあって\n https://jp.techcrunch.com/2017/12/12/2017-12-11-some-hp-laptops-are-hiding-a-deactivated-keylogger/amp/ https://jp.techcrunch.com/2020/01/03/2020-01-02-ex-google-policy-chief-dumps-on-the-tech-giant-for-dodging-human-rights/amp/?__twitter_impression=true  などと，うっかり AMP 用の URL を載せちゃったみたいで，しかも片方は変なパラメータがくっついている。 これらも機械的に置換できなくはないのだが，2箇所だけだし，手作業で原文記事の URL に書き換えた。\nAMP ページはマジで滅びて欲しい。 なんでこんな下らないことで Google に気を使わにゃならんの。 メディアが気を遣うべき相手は私ら閲覧者だろうが。 本末転倒だよ。\nあと，古い URL でスキーマが HTTP のままになってるのが結構あったので，これは http://jp.techcrunch.com → https://jp.techcrunch.com に一括置換した。\nSlug パターン 前節の例外を排除したことで TechCrunch Japan 記事のURL\n https://jp.techcrunch.com/yyyy/mm/dd/slug/\n のうち slug 部分にのみ注目すればよくなった。 この Slug 部分も複数のパターンが見受けられるので整理しておく\nパターン1: 日付情報 yyyy-mm-dd を含む Slug 最初に挙げた例の通り yyyy-mm-dd-originalslug に要素分解できるパターン。 このパターンには別のバリエーションがあって\n https://jp.techcrunch.com/2020/07/15/x2020-07-14-harvard-mit-sue-ice-student-visas-rule/ https://jp.techcrunch.com/2020/11/21/https-techcrunch-com-2020-11-20-google-facebook-and-twitter-threaten-to-leave-pakistan-over-censorship-law/  のように日付情報の前に余分な文字列がくっついている。 2番目のとか原文記事の URL そのままぢゃん。 「なにすんねん」ってツッコんじゃったよ（笑）\nパターン2: 日付情報 yyyymmdd を含む Slug 以下のような URL パターン：\n https://jp.techcrunch.com/2017/09/13/20170912new-bluetooth-vulnerability-can-hack-a-phone-in-ten-seconds/ https://jp.techcrunch.com/2016/07/08/automotive-fortune-tesla20160706tesla-says-drivers-using-autopilot-remain-safer-than-regular-drivers/  パターン1のハイフンが抜けた状態。\nパターン3: Slug に日付情報がない  https://jp.techcrunch.com/2021/06/10/netflix-cowboy-bebop-streaming-this-fall/  jp.techcrunch.com → techcrunch.com と置換するだけで行けるかなぁと思ったが駄目だった（本家サイトが404になる）。 原文記事の日付情報が得られないので置換不可。\nパターン4: Slug がパーセント・エンコーディングされている  https://jp.techcrunch.com/2017/03/13/%e3%80%8c%e6%b3%95%e4%bb%a4%e4%b8%8a%e9%81%95%e5%8f%8d%e3%81%ae%e5%8f%af%e8%83%bd%e6%80%a7%e3%80%81%e5%80%ab%e7%90%86%e7%9a%84%e3%81%ab%e3%82%82%e5%95%8f%e9%a1%8c%e3%80%8ddena%e3%81%8cwelq%e5%95%8f/  多分，というか間違いなく日本版オリジナル記事だよね。 これは置換対象外とした。\n置換用正規表現 というわけで，今回はパターン1と2のみが対象となる。 置換処理は VS Code を使っている。\nパターン1の検索・置換正規表現は以下の通り。\n    正規表現     検索 https://jp\\.techcrunch\\.com/\\d{4}/\\d{2}/\\d{2}/.*(\\d{4})-(\\d{2})-(\\d{2})-(.+)/   置換 https://techcrunch.com/$1/$2/$3/$4/   対象ファイル *.md    パターン2の検索・置換正規表現は以下の通り。\n    正規表現     検索 https://jp\\.techcrunch\\.com/\\d{4}/\\d{2}/\\d{2}/.*(\\d{4})(\\d{2})(\\d{2})(.+)/   置換 https://techcrunch.com/$1/$2/$3/$4/   対象ファイル *.md    もう少し頑張ればひとつにまとめられたかもしれないが，副作用が出るのが嫌だったので分けた。 これで未変換の TechCrunch Japan 記事の URL は118個まで減ったが，今のところ，これ以上は無理なので，放置ということで。\nどっとはらい\nブックマーク  基本的な正規表現一覧 | murashun.jp    私の環境では mattn/jvgrep を grep に alias して使っている。ファイル指定を \u0026quot;content/**/*.md\u0026quot; などと再帰的に指定できるのが嬉しい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ユリウス日が2,460,000日を超える日",
      "section": "remark",
      "description": "2023年にはユリウス日が2,460,000日を超えるそうな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/julian-day-number/",
      "published": "2022-05-02T11:38:59+00:00",
      "update": "2022-05-03T02:07:00+00:00",
      "content": "国立天文台から面白い記事が出ている。\n ユリウス日について - 国立天文台暦計算室  この記事によると\n 令和5年(2023)にはついに246 ****日となる ユリウス日についてより  のだそうだ。 また，この記事にグレゴリオ暦とユリウス日を相互変換するアルゴリズムも書かれている（ちなみにこのアルゴリズムは『天文年鑑』にも載っている）。\n実は Go 言語を覚え始めた頃に練習でユリウス日を求める処理を書いたことがあるのだが，アレとは若干アルゴリズムが違うので，拙作 github.com/goark/koyomi のサブパッケージとして追加してみた。 洒落で有理数を扱える big.Rat 型を使っていることを除けば大したアルゴリズムではないので，中身については割愛する1。 興味のある方はリポジトリをご覧ください。\nというわけで，記事に書かれているアルゴリズムを使ってユリウス日が2,460,000日を超えるのはいつか調べてみる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/goark/koyomi\u0026#34; \u0026#34;github.com/goark/koyomi/jdn\u0026#34; ) func main() { num := 2460000.0 dt := jdn.FromJD(num) mjd := jdn.GetMJD(dt) fmt.Printf(\u0026#34;Julian Day Number: %.3f (%v)\\n\u0026#34;, num, mjd.FloatString(3)) fmt.Printf(\u0026#34;Gregorian: %v (%v)\\n\u0026#34;, dt, dt.In(koyomi.JST)) } これを実行すると\n$ go run sample.go Julian Day Number: 2460000.000 (59999.500) Gregorian: 2023-02-24 12:00:00 +0000 UTC (2023-02-24 21:00:00 +0900 JST) となる。 国立天文台のページで検算してみると\n   ユリウス日 - 国立天文台暦計算室より  と同じ値が出たので，たぶん問題ないだろう2。\n参考図書   天文年鑑 2022年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2021-11-22 単行本 441662140X (ASIN), 9784416621400 (EAN), 441662140X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2022年版。\nreviewed by Spiegel on 2021-11-22 (powered by PA-APIv5)\n   天体の位置計算 長沢 工 (著) 地人書館 1985-09-01 単行本 4805202254 (ASIN), 9784805202258 (EAN), 4805202254 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。\nreviewed by Spiegel on 2015-01-11 (powered by PA-APIv5)\n   新こよみ便利帳―天文現象・暦計算のすべて 暦計算研究会 (編集) 恒星社厚生閣 1991-05-01 単行本 4769907001 (ASIN), 9784769907008 (EAN), 4769907001 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  今となっては古い内容だが，暦や天体位置の一覧表が載っていて当時はそれなりに役に立った。\nreviewed by Spiegel on 2021-07-31 (powered by PA-APIv5)\n   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   ユリウス日の計算程度であれば float64 を使っても全く問題ない。ユリウス日の起点は紀元前4713年1月1日正午（12時）とされているが，もちろんその時代に（グレゴリオ暦はおろか）ユリウス暦があったわけではないし時刻系も今とは異なる。あくまでも現在の暦・時刻系の（過去方向への）延長線上にある仮想的起点と捉えるべきだろう。ユリウス日は日付（整数部）のみを扱う場合は Julian Day Number，時刻（小数部）を含める場合は Julian Date と呼び分けることが多い。今はあまり聞かないが Julian Day Number を日本語でユリウス通日と言う人もいる。時刻を含める場合は UT または UTC で計算する。ちなみに座表時系のひとつである TT (Terrestrial Time; 地球時) への拡張もあるらしい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 拙作の github.com/goark/koyomi/jdn パッケージではグレゴリオ暦しか対応していない。これは time.Time 型がグレゴリオ暦を前提に実装されているため。グレゴリオ暦以外の暦に対応するなら time.Time 型は使えないだろう。グレゴリオ暦の導入時期は国によってかなり違うが，欧州では17世紀には概ねグレゴリオ暦に移行したと言われている。日本は1873年（明治6年）のいわゆる「明治の改暦」でグレゴリオ暦互換の暦に移行した（厳密にはグレゴリオ暦ではない）。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "CI 用の GitHub Actions が諸々アップデートされていた",
      "section": "golang",
      "description": "GitHub Actions アップデートまつりw",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/update-github-actions/",
      "published": "2022-04-24T09:41:02+00:00",
      "update": "2022-04-24T09:41:24+00:00",
      "content": "Go で Excel ファイルを扱う Excelize パッケージがバージョンアップしていた。\n Go 言語スプレッドシートライブラリ：Excelize 2.6.0 がリリースされました  なので，このパッケージを使っている拙作の goark/csvdata パッケージもバージョンを上げた。\n Release v0.5.1 · goark/csvdata · GitHub  ぶっちゃけ go.mod ファイルだけ更新してもよかったのだが，少し前に公式の GitHub Actions である actions/setup-go や actions/checkout が v3 系に上がっているのに気付いたこともあり，諸々更新することにした。\n Release v3.0.0 · actions/setup-go · GitHub Release v3.0.2 · actions/checkout · GitHub  github/codeql-action GitHub が買収して手に入れたコードチェッカの GitHub Actions。 Workflow の設定例はこんな感じらしい。\nname:\u0026#34;Code Scanning - Action\u0026#34;on:push:branches:[main]pull_request:branches:[main]schedule:# ┌───────────── minute (0 - 59)# │ ┌───────────── hour (0 - 23)# │ │ ┌───────────── day of the month (1 - 31)# │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)# │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)# │ │ │ │ │# │ │ │ │ │# │ │ │ │ │# * * * * *- cron:\u0026#39;30 1 * * 0\u0026#39;jobs:CodeQL-Build:# CodeQL runs on ubuntu-latest, windows-latest, and macos-latestruns-on:ubuntu-latestpermissions:# required for all workflowssecurity-events:write# only required for workflows in private repositoriesactions:readcontents:readsteps:- name:Checkout repositoryuses:actions/checkout@v3# Initializes the CodeQL tools for scanning.- name:Initialize CodeQLuses:github/codeql-action/init@v2# Override language selection by uncommenting this and choosing your languages# with:# languages: go, javascript, csharp, python, cpp, java# Autobuild attempts to build any compiled languages (C/C++, C#, or Java).# If this step fails, then you should remove it and run the build manually (see below).- name:Autobuilduses:github/codeql-action/autobuild@v2# ℹ️ Command-line programs to run using the OS shell.# 📚 https://git.io/JvXDl# ✏️ If the Autobuild fails above, remove it and uncomment the following# three lines and modify them (or add more) to build your code if your# project uses a compiled language#- run: |# make bootstrap# make release- name:Perform CodeQL Analysisuses:github/codeql-action/analyze@v2 via github/codeql-action: Actions for running CodeQL analysis  Go コードのチェックをするなら “Initialize CodeQL” のコメント部分を解除して\n# Initializes the CodeQL tools for scanning.- name:Initialize CodeQLuses:github/codeql-action/init@v2# Override language selection by uncommenting this and choosing your languageswith:languages:goとすればよい。\nCodeQL は v2 系に上がったことでかなり深いところまでチェックするようになったようだ。 たとえば今回の goark/csvdata パッケージにはカラムの値を sql.NullByte 型に変換して返す\nfunc (r *Rows) ColumnNullByte(s string, base int) (sql.NullByte, error) { res, err := r.ColumnNullInt64(s, base) if err != nil { return sql.NullByte{Valid: false}, errs.Wrap(err) } return sql.NullByte{Byte: byte(res.Int64), Valid: true}, nil } というメソッドがあるのだが，最後の\nreturn sql.NullByte{Byte: byte(res.Int64), Valid: true}, nil で「範囲チェックなしで素のまま型変換すんな，ゴラァ（←超意訳）」と怒られてしまった。 素直な私は「なるほど」と納得して\nfunc (r *Rows) ColumnNullByte(s string, base int) (sql.NullByte, error) { res, err := r.ColumnNullInt64(s, base) if err != nil { return sql.NullByte{Valid: false}, errs.Wrap(err) } if res.Valid \u0026amp;\u0026amp; (res.Int64 \u0026lt; 0 || res.Int64 \u0026gt; math.MaxUint8) { return sql.NullByte{Valid: false}, errs.Wrap(strconv.ErrRange) } return sql.NullByte{Byte: byte(res.Int64 \u0026amp; 0xff), Valid: true}, nil } と修正しましたとさ。 今までは何も言われなかったのに。 とほほ\ngolangci/golangci-lint-action golangci-lint は Go 用の複合 linter。 Workflow の設定例はこんな感じ。\nname:golangci-linton:push:tags:- v*branches:- master- mainpull_request:permissions:contents:read# Optional: allow read access to pull request. Use with `only-new-issues` option.# pull-requests: readjobs:golangci:name:lintruns-on:ubuntu-lateststeps:- uses:actions/setup-go@v3with:go-version:1.17- uses:actions/checkout@v3- name:golangci-lintuses:golangci/golangci-lint-action@v3with:# Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest versionversion:v1.29# Optional: working directory, useful for monorepos# working-directory: somedir# Optional: golangci-lint command line arguments.# args: --issues-exit-code=0# Optional: show only new issues if it\u0026#39;s a pull request. The default value is `false`.# only-new-issues: true# Optional: if set to true then the all caching functionality will be complete disabled,# takes precedence over all other caching options.# skip-cache: true# Optional: if set to true then the action don\u0026#39;t cache or restore ~/go/pkg.# skip-pkg-cache: true# Optional: if set to true then the action don\u0026#39;t cache or restore ~/.cache/go-build.# skip-build-cache: true via golangci/golangci-lint-action: Official GitHub action for golangci-lint from its authors  こっちも v3 系に上がっているが， lint は日常的に使ってる（ていうか VS Code ならリアルタイムで走るようにできる）ので特に問題なし。 よかったよかった。\nsonatype-nexus-community/nancy-github-action Sonatype Nancy は Go の依存パッケージについて既知の脆弱性をチェックしてくれるツール。 こちらは特に変わってなかった。 Workflow の設定例はこんな感じ。\nname:Go Nancyon:[push]jobs:build:runs-on:ubuntu-lateststeps:- name:Check out code into the Go module directoryuses:actions/checkout@v2- name:Set up Go 1.x in order to write go.list fileuses:actions/setup-go@v2with:go-version:^1.13- name:WriteGoListrun:go list -json -m all \u0026gt; go.list- name:Nancyuses:sonatype-nexus-community/nancy-github-action@main via sonatype-nexus-community/nancy-github-action: Sonatype Nancy for GitHub Actions  これも個人的に常用しているので無問題。\ngoreleaser/goreleaser-action みんな大好き，複数プラットフォームの実行バイナリを同時生成して GitHub のリリースページまで作ってくれる GoReleaser の GitHub Actions。 こちらも Workflow の設定は今のところ変更なしでいいようだ。\nname:goreleaseron:pull_request:push:jobs:goreleaser:runs-on:ubuntu-lateststeps:-name:Checkoutuses:actions/checkout@v2with:fetch-depth:0-name:Set up Gouses:actions/setup-go@v2-name:Run GoReleaseruses:goreleaser/goreleaser-action@v2with:# either \u0026#39;goreleaser\u0026#39; (default) or \u0026#39;goreleaser-pro\u0026#39;distribution:goreleaserversion:latestargs:release --rm-distenv:GITHUB_TOKEN:${{ secrets.GITHUB_TOKEN }}# Your GoReleaser Pro key, if you are using the \u0026#39;goreleaser-pro\u0026#39; distribution# GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }} via goreleaser/goreleaser-action: GitHub Action for GoReleaser  この記事を書くのに goreleaser/goreleaser-action のページを眺めてて気がついたのだが， OpenPGP 電子署名も生成してくれるんだね。 Secret として隠蔽してくれるとはいえ， OpenPGP の秘密鍵やパスフレーズを GitHub 側に預託（escrow ← 言い方！）するのは抵抗があるなぁ。 まぁ，これは保留ということで。\nブックマーク  golangci-lint を GitHub Actions で使う Go 依存パッケージの脆弱性検査 GitHub Actions でクロス・コンパイル（GoReleaser 編） Go のコードでも GitHub Code Scanning が使えるらしい  参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   デベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n "
    },
    {
      "title": "2022-04-24 のブックマーク",
      "section": "bookmarks",
      "description": "「Ubuntu 22.04 LTSがリリースされました」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/04/24-bookmarks/",
      "published": "2022-04-24T03:15:44+00:00",
      "update": "2022-04-24T03:16:38+00:00",
      "content": "リリース情報  Release v1.2022.4 · plantuml/plantuml · GitHub Release v0.35.3: Release notes and version bumps for 0.35.3. (#4014) · bytecodealliance/wasmtime · GitHub Release Git for Windows 2.35.2 · git-for-windows/git · GitHub  Git security vulnerability announced | The GitHub Blog 「Git 2.35.2」が公開 ～2件の脆弱性を修正【4月14日追記】 - 窓の杜   Release gopls/v0.8.3 · golang/tools · GitHub Release v0.97.0 · gohugoio/hugo · GitHub Release Git for Windows 2.35.3 · git-for-windows/git · GitHub Release v0.97.1 · gohugoio/hugo · GitHub Release v0.97.2 · gohugoio/hugo · GitHub Release v0.97.3 · gohugoio/hugo · GitHub Release Notes for DSM | Synology Inc. Release Windows Terminal v1.12.1098 · microsoft/terminal · GitHub Release v0.36.0: Release Wasmtime 0.36.0 (#4058) · bytecodealliance/wasmtime · GitHub Highlights from Git 2.36 | The GitHub Blog  Release Git for Windows 2.36.0 · git-for-windows/git · GitHub 「Git for Windows」v2.36.0が公開 ～「Git LFS」の脆弱性に対処 - 窓の杜 「Cygwin 3.5」はWindows 7/8をサポートせず ～32bit対応も間もなく終了 - 窓の杜   Release 9.0.1 · mermaid-js/mermaid · GitHub Release v2.6.7 · spring-projects/spring-boot · GitHub  Release v2.5.13 · spring-projects/spring-boot · GitHub   Release v1.24.0 · tailscale/tailscale · GitHub 「Firefox」v99.0.1が公開 ～Windows/Intel環境の一部で動画のハードウェアデコードが効かない問題などを解決 - 窓の杜 KeePassXC 2.7.1 released - KeePassXC 「LibreOffice 7.3.2」が公開 ～テクノロジー愛好家やパワーユーザー向け無償オフィス環境 - 窓の杜 Go 言語スプレッドシートライブラリ：Excelize 2.6.0 がリリースされました  セキュリティ＆プライバシー関連  Apache Struts 2の脆弱性（S2-062）に関する注意喚起 Russian Cyberattack against Ukrainian Power Grid Prevented - Schneier on Security  Industroyer2: Industroyer reloaded | WeLiveSecurity   GitHub - kagancapar/CVE-2022-29072: 7-Zip through 21.07 on Windows allows privilege escalation and command execution when a file with the .7z extension is dragged to the Help\u0026gt;Contents area.  解凍・圧縮ソフト「7-Zip」に未修正の脆弱性 ～セキュリティ研究者が明らかに - 窓の杜   [openpgp] SHA1 collision detection in OpenPGP : 次期 OpenPGP RFC の内容について [2204.06974] Planting Undetectable Backdoors in Machine Learning Models  Undetectable Backdoors in Machine-Learning Models - Schneier on Security   Inside the Bitcoin Bust That Took Down the Web’s Biggest Child Abuse Site | WIRED  De-anonymizing Bitcoin - Schneier on Security   「GitHub」から非公開リポジトリなどのデータが流出 ～「npm」にも被害 - 窓の杜 「Ruby」にセキュリティアップデート ～「Ruby 2.6」系列はサポートを終了【4月21日追記】 - 窓の杜 「Docker Engine」の脆弱性に対処した「Docker Desktop 4.7.0」 - 窓の杜 「OpenSSH 9.0」、量子コンピューターを使った攻撃からの保護をデフォルトに - ZDNet Japan  Linux または Ubuntu に関する話題  Ubuntu 22.04 その58 - Ubuntu 22.04 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 22.04 その59 - Ubuntu 22.04 LTSの新機能と変更点 - kledgeb Ubuntu 22.04 その60 - Ubuntu 22.04 LTSの既知の問題 - kledgeb Ubuntu 21.10 その89 - Ubuntu 22.04 LTSへのアップグレードは数日中に提供予定 - kledgeb Ubuntu 20.04 その240 - Ubuntu 22.04 LTSへのアップグレード提供時期について - kledgeb Canonical、「Ubuntu 22.04 LTS」の提供を開始 ～WSLパッケージもストアに登場 - 窓の杜 Ubuntu 22.04 をインストールしたら設定すること 10 ヶ条  Go 言語関連  go/cobraでコマンド作りたいんだけど、最近の記事だと出来ない件 Goで時刻を扱うチートシート When To Use Generics - The Go Programming Language [2201.06753v2] BinGo: Pinpointing Concurrency Bugs in Go via Binary Analysis Go Developer Survey 2021 Results - The Go Programming Language Generate PostgreSQL credentials with Hashicorp Vault and Go – Split mind blog Go言語でワークフローエンジンを作った話 : JP1 もどきw Go: Understand and Mitigate Slowloris Attack | by Vincent Blanchon | A Journey With Go | Apr, 2022 | Medium  Go: How to Mitigate RUDY DoS Attack | by Vincent Blanchon | A Journey With Go | Apr, 2022 | Medium   Go言語製Let\u0026rsquo;s Encryptクライアントlegoをライブラリとして使う - Qiita Goの共通モジュール管理の方法をまとめてみた（Go1.18で導入されたWorkspaceも） Goのプログラム内でjqを使ってJSONを加工する - Qiita GitHub - taichi/kra: relational database access helper library GitHub - mururu/gshogi : gshogi is a shogi library wrtten in Go. O\u0026rsquo;Reilly Japan - 実用 Go言語  その他  SESTA/FOSTAから4年：議会は“セックスワーカー検閲法”がもたらした致命的な被害を直視せよ | P2Pとかその辺のお話R エンジニアはもっと図を書こう - 生涯未熟 : リアルタイムで図が描ければそうするんだけどねぇ\u0026hellip; 4 ways we use GitHub Actions to build GitHub | The GitHub Blog Mini Metro - Dinosaur Polo Club  Mini Metro（結城浩のゲーム紹介）｜結城浩   お客さまと共にサービス35周年 ｜ @nifty AWS Lambda が HTTPS エンドポイントをサポートしたので試してみた。 Git Extensionsのインストールと日本語化【環境構築編】 | trelab PostgreSQL：複数行の結果をまとめて１行として表示する - ぷちWiki - Lightly and Leniently Docker創始者らが開発、ビルド／テスト／デプロイの自動化をポータブルにするツール「Dagger」登場。そのままローカルでもGitHubでもCircleCIでも実行可能に － Publickey あまり知られていないPostgreSQLの機能 | POSTD DBMSの市場規模、DBaaSがオンプレミスに並ぶ。シェア1位はマイクロソフト、AWSがオラクルを抜いて2位に。ガートナーによる2021年の調査結果 － Publickey JavaScript/TypeScriptの高速フォーマッター「Rome Formatter」リリース。Rust製でPrettierより約10倍高速と － Publickey Meta（旧Facebook）、テキストエディタ用のUIコンポーネント「Lexical」をオープンソースで公開。Reactなどフレームワークの依存性なく軽量で高速、機能拡張も容易に － Publickey Rustを組込みソフトウェア開発で使う【前編】- 入門｜リアルタイムOS – 応用編 第2回 | APS｜半導体技術コンテンツ・メディア Ebook Services Are Bringing Unhinged Conspiracy Books into Public Libraries Zoom、新しいホワイトボード機能「Zoom Whiteboard」を発表 ～v5.10.3以降で利用可能 - 窓の杜  "
    },
    {
      "title": "やっと Codespaces が使える",
      "section": "remark",
      "description": "Go が動くぞ！",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/04/codespaces/",
      "published": "2022-04-23T13:45:12+00:00",
      "update": "2022-04-23T14:00:19+00:00",
      "content": " パソコンに Visual Studio Code を導入する（再チャレンジ） Go と VS Code Markdown と VS Code Java と VS Code やっと Codespaces が使える ← イマココ  さて，独り GitHub Team も契約したし，よーやく Codespaces が使えるようになったよ。\n今のところ Codespaces は GitHub Team または GitHub Enterprise Cloud のメンバで利用できる。 2022-04-23 時点の料金（米ドル建て）は以下の通り。\n  via About billing for Codespaces - GitHub Docs  ちなみに，使いすぎないよう上限を設定することも可能。\nCodespaces クラウドに立つ Codespaces の起動にはまず，ブラウザでリポジトリ・ページを開き，[Code] ボタンを押下する。\nCreate codespace on master  [Create codespace on master] ボタン押下で Codespaces のインスタンス生成が始まる。 上手く起動すればこんな感じに表示される。\nCreate codespace on master  拡張機能も普通に入れられる。\nExtensions  設定はユーザごとに保持して同期させることもできるようだ。\nGo が動くぞ！ Codespaces 上のターミナルで試しに Go コンパイラを動かしてみたら普通に動いた。\nこいつ・・・動くぞ！  GitHub Codespaces 拡張機能 VS Code の拡張機能に GitHub Codespaces というのがあって，これを使うとローカルの VS Code 上で Codespaces のリソースにアクセスできる。 コマンドパレットから Codespaces: Connect to Codespace を選択すると生成済みのインスタンスの一覧が表示されるので，選択して接続すると Codespaces に接続した VS Code が起動する。\nCodespace on the VS Code  パソコンで作業する場合はこっちのほうがいいかもねぇ。\nAndorid タブレットでも動いた Codespace on the Android Browser  おわ。 ターミナルの状態も共有できるのか。 凄いな。\nちなみに Android の Firefox では Codespaces を起動できなかった。 冷遇されてるなぁ（笑）\n後始末 Codespaces を終了する場合はコマンドパレットから Codespaces: Stop Current Codespace を選択して明示的に停止させること。 まぁ，最悪でも30分非活性状態なら自動的に停止するらしいけど。\nCodespaces のインスタンスはリポジトリごとに生成されるのでご注意を。 また，使わなくなったインスタンスはマメに削除することをお勧めする。 インスタンスの削除は “Your codespaces” でできる。\nYour codespaces  ブックマーク  GitHub開発チームでのCodespacesの利用 - GitHubブログ GitHub Codespaces · GitHub GitHub Codespaces Documentation - GitHub Docs Codespaces の支払いについて - GitHub Docs Github CodeSpace 触ってみた - Qiita GitHub Codespaces をつかって 3分で始めるサービス開発 | Wantedly, Inc. GitHub Codespaces で開発する - Wantedly Engineering Handbook  "
    },
    {
      "title": "GnuPG 2.3.5 のリリース",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/04/gnupg-2_3_5-is-released/",
      "published": "2022-04-23T04:03:03+00:00",
      "update": "2022-04-23T04:04:28+00:00",
      "content": "毎度遅まきながらで申し訳ないが GnuPG 2.3.5 がリリースされている。\n [Announce] GnuPG 2.3.5 released  セキュリティ・アップデートはなし。 詳細はこちら。\n gpg: Up to five times faster verification of detached signatures. Doubled detached signing speed. [T5826,rG4e27b9defc,rGf8943ce098] gpg: Threefold decryption speedup for large files. [T5820,rGab177eed51] gpg: Nearly double the AES256.OCB encryption speed. [rG99e2c178c7] gpg: Removed EAX from the preference list. [rG253fcb9777] gpg: Allow --dearmor to decode all kinds of armor files. [rG34ea19aff9] gpg: Remove restrictions for the name part of a user-id. [rG8945f1aedf] gpg: Allow decryption of symmetric encrypted data even for non-compliant cipher. [rG8631d4cfe2] gpg,gpgsm: New option --require-compliance. [rGee013c5350] gpgsm: New option --ignore-cert-with-oid. [rGe23dc755fa] gpgtar: Create and handle extended headers to support long file names. [T5754] gpgtar: Support file names longer than MAX_PATH on Windows. [rG70b738f93f] gpgtar: Use a pipe for decryption and thus avoid memory exhaustion. [rGe5ef5e3b91] gpgtar: New option --with-log. [rGed53d41b4c] agent: New flag \u0026ldquo;qual\u0026rdquo; for the trustlist.txt. [rG7c8c606061] scdaemon: Add support for GeNUA cards. [rG0dcc249852] scdaemon: Add --challenge-response option to PK_AUTH for OpenPGP cards. [T5862] dirmngr: Support the use of ECDSA for CRLs and OCSP. [rGde87c8e1ea,rG890e9849b5] dirmngr: Map all gnupg.net addresses to the Ubuntu keyserver. [T5751] ssh: Return a faked response for the new session-bind extension. [T5931] gpgconf: Add command aliases -L -K -R. [rGec4a1cffb8] gpg: Request keygrip of key to add via command interface. [T5771] gpg: Print Yubikey version correctly. [T5787] gpg: Always use version \u0026gt;= 4 to generate key signature. [T5809] gpg: Fix generating AEAD packet. [T5853] gpg: Fix version on symmetric encrypted AEAD files if the force option is used. [T5856] gpg: Fix adding the list of ultimate trusted keys. [T5742] gpgsm: Fix parsing of certain PKCS#12 files. [T5793] gpgsm: Print diagnostic about CRL problems due to Tor mode. [rG137e59a6a5] agent: Use \u0026ldquo;Created:\u0026rdquo; field for creation time. [T5538] scdaemon Fix error handling for a PC/SC reader selected with reader-port. [T5758] scdaemon: Fix DEVINFO with no --watch. [rGc6dd9ff929] scdaemon: Fix socket resource leak on Windwos. [T5029] scdaemon: Use extended mode for pkcs#15 already for rsa2048. [rG597253ca17] scdaemon: Enhance PASSWD command to accept KEYGRIP optionally. [T5862] scdaemon: Fix memory leak in ccid-driver. [rG8ac92f0e80] tpm: Always use hexgrip when storing a key password. [rGaf2fbd9b01] dirmngr: Make WKD lookups work for resolvers not handling SRV records. [T4729] dirmngr: Avoid initial delay on the first keyserver access in presence of --no-use-tor. [rG57d546674d] dirmngr: Workaround for a certain broken LDAP URL. [rG90caa7ad59] dirmngr: Escape more characters in WKD requests. [T5902] dirmngr: Suppress error message on trial reading as PEM format. [T5531] gpgconf: Fix component table when not building without TPM support. [T5701] gpgconf: Silence warnings from parsing the option files. [T5874] gpgconf: Do not list ignored options and mark forced options as read-only. [rG42785d7c8a] gpgconf: Tweak the use of the ldapserver option. [T5801] ssh: Fix adding an ed25519 key with a zero length comment. [T5794] kbx: Fix searching for FPR20 in version 2 blob. [T5888] Fix early homedir creation. [T5895] Improve removing of stale lockfiles under Unix. [T5884]  Release-info: https://dev.gnupg.org/T5743 via GnuPG 2.3.5 released  GnuPG 関連の各パッケージのバージョンは以下の通り（数字は大体のビルド順）。\n   # パッケージ名 バージョン 公開日 更新     1 Libgpg-error 1.45 2022-04-21    2 Libgcrypt 1.8.9 (LTS) 2022-02-07     Libgcrypt 1.10.1 2022-03-28    3 Libassuan 2.5.5 2021-03-22    4 Libksba 1.6.0 2021-06-10    5 nPth 1.6 2018-07-16    6 ntbTLS 0.3.1 2022-04-07    7 GnuPG 2.2.34 (LTS) 2022-02-07     GnuPG 2.3.5 2022-04-21     現在 GnuPG には2.2系と2.3系があり1，2.2系は LTS 版に位置付けられている。 2.3系では AEAD (Authenticated Encryption with Associated Data) 等 RFC 4880bis で検討されている機能が実装されているので，最新機能を試したいのであればこちらを入れるとよいだろう。 なお2.2系は少なくとも2024年末まではサポートが続けられる予定である。 通常運用であれば，当面は2.2系でも問題ない（ECC も対応してるよ）。\nアップデートは計画的に。\nブックマーク  OpenPGP の実装  参考図書   暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n   暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n   厳密には1.4系もあるが，これは legacy 版と位置付けられており，よほどのバグか脆弱性がない限りは更新されない。もし今だに1.4系（あるいは既にサポートされていない2.0/2.1系）を使っているのなら2.2系以降にアップグレードすることを強くお勧めする。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "OpenJDK のセキュリティ・アップデート",
      "section": "release",
      "description": "影響を受けるバージョンは 18, 17.0.2, 15.0.6, 13.0.10, 11.0.14, 8u322, 7u331 およびそれ以前。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/04/openjdks-has-been-updated/",
      "published": "2022-04-23T03:34:49+00:00",
      "update": "2022-04-24T03:16:38+00:00",
      "content": "定例の Java マイナー・バージョンアップが行われた。\n OpenJDK Vulnerability Advisory: 2022/04/19  CVE ID ベースで16個の脆弱性修正がある。 影響を受けるバージョンは 18, 17.0.2, 15.0.6, 13.0.10, 11.0.14, 8u322, 7u331 およびそれ以前。\n CVE ID Component CVSSv3.1\nScore Affects ...   7 8 11 13 15 17 18   CVE-2022-21476 security-libs/java.security 7.5          CVE-2022-21449 security-libs/java.security 7.5          CVE-2022-21496 core-libs/javax.naming 5.3          CVE-2022-21434 core-libs/java.lang 5.3          CVE-2022-21426 xml/jaxp 5.3          CVE-2022-21443 security-libs/java.security 3.7           via OpenJDK Vulnerability Advisory: 2022/04/19  このうち，2番目の CVE-2022-21449 は ECDSA に関するヤバいやつで Bruce Schneier 先生もこの脆弱性について言及されている。 元ネタの記事によると\nThe vulnerability, which Oracle patched on Tuesday, affects the company’s implementation of the Elliptic Curve Digital Signature Algorithm in Java versions 15 and above. ECDSA is an algorithm that uses the principles of elliptic curve cryptography to authenticate messages digitally. A key advantage of ECDSA is the smaller size of the keys it generates, compared to RSA or other crypto algorithms, making it ideal for use in standards including FIDO-based 2FA, the Security Assertion Markup Language, OpenID, and JSON. via Major cryptography blunder in Java enables “psychic paper” forgeries | Ars Technica  だそうな。 もう少し詳細を抜き出すと\nECDSA signatures rely on a pseudo-random number, typically notated as K, that’s used to derive two additional numbers, R and S. To verify a signature as valid, a party must check the equation involving R and S, the signer’s public key, and a cryptographic hash of the message. When both sides of the equation are equal, the signature is valid. via Major cryptography blunder in Java enables “psychic paper” forgeries | Ars Technica  For the process to work correctly, neither R nor S can ever be a zero. That’s because one side of the equation is R, and the other is multiplied by R and a value from S. If the values are both 0, the verification check translates to 0 = 0 X (other values from the private key and hash), which will be true regardless of the additional values. That means an adversary only needs to submit a blank signature to pass the verification check successfully. via Major cryptography blunder in Java enables “psychic paper” forgeries | Ars Technica  Guess which check Java forgot?\nThat’s right. Java’s implementation of ECDSA signature verification didn’t check if R or S were zero, so you could produce a signature value in which they are both 0 (appropriately encoded) and Java would accept it as a valid signature for any message and for any public key. The digital equivalent of a blank ID card.\n via Major cryptography blunder in Java enables “psychic paper” forgeries | Ars Technica  いやいやいや。 なんだその間抜けなバグ。\nOpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。 以下は完全手動でのインストール（笑）\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://download.java.net/java/GA/jdk18.0.1/3f48cabb83014f9fab465e280ccf630b/10/GPL/openjdk-18.0.1_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-18.0.1_linux-x64_bin.tar.gz $ sudo ln -s jdk-18.0.1 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;18.0.1\u0026#34; 2022-04-19 OpenJDK Runtime Environment (build 18.0.1+10-24) OpenJDK 64-Bit Server VM (build 18.0.1+10-24, mixed mode, sharing) LTS 版 Java バイナリが欲しいなら Adoptium で取得できる。\n私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern  よーし，うむうむ，よーし。\nブックマーク  Oracle Critical Patch Update Advisory - April 2022 Critical cryptographic Java security blunder patched – update now! – Naked Security 2022年4月Oracle製品のクリティカルパッチアップデートに関する注意喚起 「Java」に署名検証がフリーパスになってしまう危険な脆弱性 ～影響は計り知れず - 窓の杜  参考図書   Spring Data JPAプログラミング入門 溝口賢司 (著) 秀和システム 2017-08-03 (Release 2018-04-23) Kindle版 B07CKHR8C1 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  JPA のお勉強用に購入。紙のほうはプレミアが付いてるっぽいが Kindle で買えるよ。固定レイアウトだからブラウザの Kindle Cloud Reader で読めるし。真面目に基本を押さえて書いていて分かりやすい。\nreviewed by Spiegel on 2021-08-26 (powered by PA-APIv5)\n   Effective Java 第3版 Joshua Bloch (著), 柴田 芳樹 (翻訳) 丸善出版 2018-10-30 単行本（ソフトカバー） 4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。\nreviewed by Spiegel on 2021-03-17 (powered by PA-APIv5)\n   Spring Boot 2 入門: 基礎から実演まで Webアプリ開発入門 原田 けいと (著), 竹田 甘地 (著), Robert Segawa (著)  2020-05-22 (Release 2020-05-22) Kindle版 B0893LQ5KY (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Spring Boot を勉強することになって急遽買った本。めっさ分かりやすかった。 PDF 版が欲しいくらい（笑）\nreviewed by Spiegel on 2021-06-13 (powered by PA-APIv5)\n   2021-04-09 に PlantUML V1.2022.4 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
