{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "「門番」としての VPN",
      "section": "remark",
      "description": "専用 IP アドレスによる利便性を得る引き換えとして匿名性をある程度手放さざるを得ないわけやね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/vpn-as-a-gatekeeper/",
      "published": "2020-07-20T09:28:17+00:00",
      "update": "2020-07-20T11:27:16+00:00",
      "content": "VPN とは まずは VPN についておさらい。\nVPN（Virtual Private Network）とは，物理的な回線・ネットワークの上に構築された「実質的な網 (virtual Network) 」である。 この記事では VPN の機能として大まかに\n カプセル化とトンネリング 経路の暗号化 認証とアクセス制御  を挙げ，これらの要件を満たした製品・サービスを VPN と呼ぶことにする。\nVPN は目的別に以下の3つに分類できるだろう。\n 拠点間 VPN リモートアクセス バイパス型 VPN  「拠点間 VPN」は昔でいうところの「専用線」の代わりになるものだ。 「リモートアクセス」は企業イントラネットやプライベート・ネットワーク内部に外からアクセスするもので，近年では BYOD (Bring Your Own Device) とも呼ばれている。\n「バイパス型 VPN」は6年前に私が勝手につけた名前だが，他の2つと異なり，アクセスを行う利用者から見て，出口ノードがインターネットになっている点が特徴である。\n 「IPAテクニカルウォッチ「公衆無線LAN利用に係る脅威と対策」」より  たとえば，上の図のように，公衆無線 LAN などの信用度の低いネットワークを経由してインターネットに接続したい場合に「バイパス型 VPN」が使える。 また異なるリージョンのコンテンツにアクセスするために使われることもある1。\n「門番」としての VPN 先程の図を見ると分かるように「バイパス型 VPN」は利用者とインターネット上のコンテンツとを仕切る「門番」として機能していることが分かる。 したがって「バイパス型 VPN」を運営するサービス・プロバイダが「門番」として信用できるか否かがとても重要である。\nログ収集ポリシー 技術的な観点はひとまず置いておいて，「バイパス型 VPN」サービス・プロバイダの信用度を計る目安としてよく引き合いに出されるのが「ログ収集ポリシー」である。\nたとえばサービス・プロバイダが収集した利用者のアクセスログを第三者に売ったり，あるいは公的機関から提出を求められる（大抵は拒否できない）場合がある。 なので，サービス・プロバイダが利用者に関するどのような情報を持っていてそれらをどのようにして管理しているか，を知ることが大事である。 そしてその最善は「ログ収集しない」ことである。\nTorrentFreak では以下の質問を「バイパス型 VPN」のサービス・プロバイダ各社に送って\n Do you keep (or share with third parties) ANY data that would allow you to match an IP-address and a timestamp to a current or former user of your service? If so, exactly what information do you hold/share and for how long? What is the name under which your company is incorporated (+ parent companies, if applicable) and under which jurisdiction does your company operate? What tools are used to monitor and mitigate abuse of your service, including limits on concurrent connections if these are enforced? Do you use any external email providers (e.g. Google Apps), analytics, or support tools ( e.g Live support, Zendesk) that hold information provided by users? In the event you receive a DMCA takedown notice or a non-US equivalent, how are these handled? What steps would be taken in the event a court orders your company to identify an active or former user of your service? How would your company respond to a court order that requires you to log activity for a user going forward? Have these scenarios ever played out in the past? Is BitTorrent and other file-sharing traffic allowed on all servers? If not, why? Do you provide port forwarding services? Are any ports blocked? Which payment systems/providers do you use? Do you take any measures to ensure that payment details can’t be linked to account usage or IP-assignments? What is the most secure VPN connection and encryption algorithm you would recommend to your users? Do you provide tools such as “kill switches” if a connection drops and DNS/IPv6 leak protection? Do you support Dual Stack IPv4/IPv6 functionality? Are any of your VPN servers hosted by third parties? If so, what measures do you take to prevent those partners from snooping on any inbound and/or outbound traffic? Do you use your own DNS servers? In which countries are your servers physically located? Do you offer virtual locations?   via Which VPN Providers Really Take Anonymity Seriously in 2020?  その結果を公開している。\n Which VPN Providers Really Take Anonymity Seriously in 2020? * TorrentFreak  まぁ，結果はリンク先を見ていただくとして，実はこの話には続きがある。\n Most Dedicated VPN IP-addresses Are Not Anonymous * TorrentFreak  「バイパス型 VPN」で「ログ収集しない」と謳うサービス・プロバイダは，匿名性を高めるために，接続ごとに共有 IP アドレスを割り当てるのだが，どうも拡張サービスとして専用あるいは固定の IP アドレスを付与することができるそうで，この場合は（当たり前だが）完全に「収集しない」とは行かないらしい。\nBroadly speaking, we would say that the “no logs” policies of VPN providers don’t apply to dedicated IPs. That conclusion is backed up by several VPN providers we reached out to, which include VPNArea, NordVPN, CyberGhost, and Torguard.\nThese providers all have a no-logging policy for their regular VPN service, which relies on shared IP-addresses. However, they see dedicated IP-addresses as a separate and different service, which is treated differently anonymity-wise.\n via Most Dedicated VPN IP-addresses Are Not Anonymous  By connecting through a single IP-address, monitoring outfits can build up a profile of the user’s online activity. The real anonymity tradeoff, however, is that the VPN provider knows the user’s IP-address and can connect it to other account information it has on record. This sometimes includes an email address. via Most Dedicated VPN IP-addresses Are Not Anonymous  いくつかのインターネット・サービスでは，リージョンを跨いでアクセスされないよう VPN 接続の ブラックリスト おっと拒否リストを持っているそうだが，専用 IP アドレスのオプションを利用することによりこれらを回避できるようだ。\nWith a dedicated IP-address, which is often sold as an add-on, users get a unique IP-address as opposed to a shared one. This can be very convenient as it reduces annoying captchas and can bypass regular VPN blacklists. via Most Dedicated VPN IP-addresses Are Not Anonymous  こうした利便性を得る引き換え (tradeoff) として匿名性をある程度手放さざるを得ないわけやね。\nF-Secure FREEDOME は止めとけ？ ところで，先程の Which VPN Providers Really Take Anonymity Seriously in 2020? の中に私が Android 端末で愛用している F-Secure 社の FREEDOME が見当たらなかったので軽くググってみたが，どうも最近は FREEDOME は忌避されているらしい。\n Read This F-Secure Freedome Review and Test Before You Buy It!  FREEDOME はログ収集を行ってると言われていて，そこが嫌われている原因のひとつかも（笑）\nこれについては，一応 F-Secure 社側の釈明もあるようで\n ほとんどのVPNと同様に、FREEDOMEは接続ログを作成します。これらのログは、サービスの提供と改善のために使用されます。当社のプライバシーポリシーに記載されているように、サービスを提供し、データ転送をクリーンな状態に保つだけの目的で通信トラフィックを分析します。トラフィックは仮名化されていますので、私たちにはどれがあなたのトラフィックかを知ることはできません。FREEDOMEはトラフィックログを作成しません。 VPNサービス:プロバイダのログ収集以外に考えるべきことより  というわけで，接続ログはあるけどトラフィックログは作らないので，ログから（閲覧・購入履歴，メッセージなどの）センシティブ・データを抜いたりできないよー，ということらしい。\nとは言え，昔に比べて FREEDOME の優位性が薄れているのも確かなんだよなぁ。 まぁ，来年3月まで FREEDOME の契約が残ってるので，それまでに NordVPN とか他のサービスに乗り換えるべきかじっくり考えてみるとしよう。\n【おまけ】 NSA による VPN セキュリティ管理の5箇条 米国 NSA から VPN セキュリティに関する以下のドキュメントが公開されている。 どちらかと言うと組織内のネットワーク管理者あるいはサービス・プロバイダ側の話かな。\n ConfiguringIPsecVirtual Private Networ  ConfiguringIPsecVirtual Private Networ  （要約）  これによると，ネットワーク管理者は VPN の運営について以下の5つを定期的に確認・実行する必要がある，と謳っている。\n Reduce the VPN gateway attack surface Verify that cryptographic algorithms are Committee on National Security Systems Policy (CNSSP) 15-compliant Avoid using default VPN settings Remove unused or non-compliant cryptography suites Apply vendor-provided updates (i.e. patches) for VPN gateways and client   via ConfiguringIPsecVirtual Private Networ  詳しい内容はドキュメントを参照のこと。\nまぁ，当たり前の話なんだけど Avoid using default VPN settings はちょっと面白かったので。 そんなに既定の設定はあかんのか？\nブックマーク   Best VPN Services For Anonymous Torrenting? * TorrentFreak\n  Mozilla’s VPN launches out of beta on Windows and Android - The Verge\n  NSA on Securing VPNs - Schneier on Security\n  テレワークを行う際のセキュリティ上の注意事項：IPA 独立行政法人 情報処理推進機構\n  監視をコントロールする\n  参考図書  超監視社会 ブルース・シュナイアー (著), 池村 千秋 (翻訳) 草思社 2016-12-13 (Release 2017-02-03) Kindle版 B01MZGVHOA (ASIN)  実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。\nreviewed by Spiegel on 2019-03-23 (powered by PA-APIv5)\n   つか，元々の「バイパス型 VPN」の動機は他リージョンのコンテンツにアクセスするためなのだが（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-07-19 のブックマーク",
      "section": "bookmarks",
      "description": "「はやぶさ2、12月6日に地球帰還 『りゅうぐう』の試料を豪へ落下」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/07/19-bookmarks/",
      "published": "2020-07-19T03:13:45+00:00",
      "update": "2020-07-19T03:14:34+00:00",
      "content": "リリース情報  Native JS Bundler, Open API Support, Inline Partials | Hugo : Hugo 0.74 リリース  Release v0.74.0 · gohugoio/hugo · GitHub Release v0.74.1 · gohugoio/hugo · GitHub Release v0.74.2 · gohugoio/hugo · GitHub Hugo 0.74.2: A couple of Bug Fixes | Hugo   Release June 2020 Recovery · microsoft/vscode · GitHub  Release June 2020 Recovery 2 · microsoft/vscode · GitHub   Release 1.49.0 · atom/atom · GitHub Announcing Rust 1.45.0 | Rust Blog 「Thunderbird 78」が正式リリース ～v68系統に代わる新版、アドオン互換性に注意 - 窓の杜  バベルのインターネット  MIT Tech Review: 「インターネットを作り直す」ディフィニティが掲げる理想と野望  セキュリティ＆プライバシー関連  Web会議サービスを使用する際のセキュリティ上の注意事項：IPA 独立行政法人 情報処理推進機構 米国が国家安全リスクを理由にTikTokに続きWeChatの使用禁止を検討 | TechCrunch Japan crates.io security advisory | Rust Blog Google、データを暗号化したまま処理する仮想マシン「Confidentail VM」発表。Google Cloud Next \u0026lsquo;20:OnAir － Publickey NSA on Securing VPNs - Schneier on Security Mozilla’s VPN launches out of beta on Windows and Android - The Verge  Mozilla、VPNサービスを正式提供\u0026ndash;有料サービスで収益の確保を狙う - ZDNet Japan   Hackers Convinced Twitter Employee to Help Them Hijack Accounts  AppleやマスクCEOなど多数のセレブTwitterアカウントが乗っ取られ、暗号通貨詐欺に悪用される - ITmedia NEWS Twitterの暗号通貨詐欺の元凶は内部ツールに不正アクセスした一人のハッカー | TechCrunch Japan Hackers Convinced Twitter Employee to Help Them Hijack Accounts  Twitter Hackers May Have Bribed an Insider - Schneier on Security     徳丸浩氏監修の「ウェブ・セキュリティ基礎試験」が開始：CodeZine（コードジン） Android security vulnerabilities differ by country, say researchers 日本郵便のe転居を悪用したストーカー事件についてまとめてみた - piyolog CloudflareのDNSがダウンし、多くのウェブサイトが一時接続不能に | TechCrunch Japan  天文関連  京大せいめい望遠鏡でスーパーフレアの検出に成功―生命居住可能な惑星への影響の理解に向けて― | 国立天文台(NAOJ) Parker Solar Probe Prepares for Third Venus Flyby – Parker Solar Probe JAXA | 小惑星探査機「はやぶさ２」のカプセル帰還に関する豪州宇宙庁（ASA）との共同声明の発表について  2020年7月16日ニュース「はやぶさ2、12月6日に地球帰還 『りゅうぐう』の試料を豪へ落下」 | SciencePortal   すばる望遠鏡と「ニュー・ホライズンズ」の共同観測で探る太陽系外縁部 | トピックス・お知らせ | すばる望遠鏡  知財関連  Crunchyroll Downloader Tool Nuked Following Copyright Complaint * TorrentFreak  その他  Announcing Creative Commons’ New CEO, Catherine Stihler - Creative Commons ASCII.jp：Windows 10のWSL2からGPUが使えるようになった (1/2) Microsoftが「PHP」サポートを縮小 ～「PHP 8.0」バイナリは公式提供せず - 窓の杜 マイクロソフトが「りんな」を含む中国製チャットボットXiaoiceをスピンアウト | TechCrunch Japan 「Couchbase Cloud」正式リリース、AWS上でDBaaSとして利用可能に。AzureやGCP上でも提供予定 － Publickey 【プレスリリース】相変化材料ゲルマニウム・アンチモン・テルル(GeSb2Te4)化合物中に、質量ゼロの電子(ディラック電子)を世界で初めて発見～グラフェンに代わる次世代デバイス材料として期待～ | 日本の研究.com 米国防省、KubernetesをF-16ジェット戦闘機に載せてみた － Publickey Google、BigQueryをAWSやAzureなどマルチクラウド展開へ、「BigQuery Omni」発表。Google Cloud Next \u0026lsquo;20:OnAir － Publickey Google Chromeに挑戦するThe Browser Companyはブラウザー界のテスラを目指す | TechCrunch Japan AFKアリーナ攻略wiki | AppMedia Googleが「Open Usage Commons」設立。オープンソースの商標を自由かつ公正に使用するための支援団体 － Publickey トヨタ自動車がCloud Native Computing Foundationに加盟 － Publickey 米国の大多数のゲーム開発者はリモートワークに移行中 | TechCrunch Japan マイクロソフト、「WinUI 3 Preview 2」発表\u0026ndash;ロードマップもアップデート - ZDNet Japan レーザー照射による水中Wi-Fiシステムをサウジの研究チームが開発 | TechCrunch Japan Slack、管理者向けに複数の新ツール\u0026ndash;認定プログラムなど - ZDNet Japan Amazon Comprehend を用いて本を読まずに読書感想文を書いてみる - builders.flash☆ - 変化を求めるデベロッパーを応援するウェブマガジン | AWS Red Hat、Kubernetesの拡張ディストリビューション「OKD 4」正式版リリースを発表 － Publickey Creating a Wireshark dissector in Lua - part 1 (the basics) | Mika’s tech blog  ブログ: Luaで、Wiresharkのディセクタを作成する - パート1(基本)   2020年7月17日ニュース「英語のLとR、聞き分け能力は瞳孔反応で分かる」 | SciencePortal  "
    },
    {
      "title": "私的コード黒歴史が北極に千年封印される",
      "section": "remark",
      "description": "千年後の地球上に知的文明があるとは限らないけどね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/github-archive-program-2020/",
      "published": "2020-07-18T01:36:42+00:00",
      "update": "2020-07-18T07:57:45+00:00",
      "content": "本気なのかジョークなのか分からないが GitHub が自身のサービス上にあるオープンソース・コードを北極に千年封印するという企画があって\n GitHub、オープンソースのコードを1000年以上にわたって保存する「GitHub Archive Program」発表。北極圏の非武装地帯永久凍土層地下250mに保管庫を設置 － Publickey  実際に21TBものデータが北極に封印されたらしい。\n GitHub Archive Program: the journey of the world\u0026rsquo;s open source code to the Arctic - The GitHub Blog 1000年後にデータを残すための「GitHub Archive Program」で21TBのリポジトリの北極圏への保管が完了 - GIGAZINE  Twitter の私の TL 上でも自分の貢献 (contribution) が含まれてるみたいな記述をチラホラ見かけて「やっぱ偉い人はちゃうなぁ」と他人事に思ってたのだが，どういうわけか私のリポジトリも対象になってるらしい。\n Arctic Code Vault Contributor  いやいやいや（笑）\nおそらく☆ (star) が付いてるオープンソース・ライセンス下のリポジトリは軒並み対象になってる感じかな。 なんか GitHub Archive Program の価値がガッツリ下がった気がするよ orz\nまぁ，何にどういう価値を認めるかは人それぞれだし，既に公開している情報だから私の主観が消失した後にどう扱われようと（文字通り）知ったことではないのだが，なんか自身の黒歴史を無理やり封印されてる気分になってしまう（笑）\nちうわけで，かのラノベ作品の主人公の台詞を思い出した。\n 異世界転移系作品全主人公の気持ちを俺が代弁してやろう。せめてHDD (ハードディスク) の整理をしてからにしてくれよ！ 魔王様、リトライ！より  まぁ，千年後の地球上に（少なくとも現代のプログラム・コードを理解できるような）知的文明があるとは限らないけどね。\n参考図書  猿の惑星 (吹替版) チャールトン ヘストン (出演), ロディ マクドウォール (出演), モーリス エバンス (出演), キム ハンター (出演), フランクリン・J・シャフナー (監督)  (Release 2014-09-01) Prime Video B00MTQ1ICM (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  当時，子供心に『猿の軍団』の方が面白いと思ったのは内緒である（笑）\nreviewed by Spiegel on 2020-07-19 (powered by PA-APIv5)\n  魔王様、リトライ！ 木村寛　(監督), 木村寛　(プロデュース)  Prime Video B07V1T8JMG (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  アクちゃんが可愛い。これ見て書籍版を途中までしか読んでないことに気がついた。\nreviewed by Spiegel on 2020-07-19 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 1.14.6 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/07/go-1_14_6-is-released/",
      "published": "2020-07-17T23:57:01+00:00",
      "update": "2020-07-17T23:57:26+00:00",
      "content": "Go 1.14.6 がリリースされた。\n Go 1.14.6 and Go 1.13.14 are released  セキュリティ・アップデートはなし。\ngo1.14.6 (released 2020/07/16) includes fixes to the go command, the compiler, the linker, vet, and the database/sql, encoding/json, net/http, reflect, and testing packages. See the Go 1.14.6 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.14.6.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.14.6.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.14.6.linux-amd64.tar.gz $ sudo mv go go1.14.6 $ sudo ln -s go1.14.6 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.14.6 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "アイコン化されたプログラミング言語",
      "section": "remark",
      "description": "おまけ「人気（？）のプログラミング言語」も追記した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/iconizing-programming-language/",
      "published": "2020-07-16T02:43:19+00:00",
      "update": "2020-07-16T02:44:43+00:00",
      "content": "Font Awesome を倩 (つらつら) と眺めていたらプログラミング言語のアイコンとかもあるんだねぇ。 多分ファイル種別と関連させて使うんだろうけど。\n面白いのでプログラミング言語を示す Font Awesome アイコンを拾ってみた。 色は気にしないように。\n   Icon Code      \u0026lt;i class=\u0026quot;fab fa-css3\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-erlang\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-html5\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-java\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-node-js\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-php\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-python\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-rust\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-swift\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;     HTML5 や CSS3 をプログラミング言語と言っていいか微妙だが，ついでということで（笑）\n今回は 2020-07-16 時点の Font Awesome 5.13.1 で提供されるフリー・アイコンの中から目視で探してみた。 見落とし等あれば指摘していただくと主に私が喜びます。\nアイコン・デザインは商標権とか絡んでくるから難しいかもしれないけど，こういうブランド化も面白いかもね。\n【おまけ】 人気（？）のプログラミング言語 今回は TIOBE ランキング50位内にあるメジャーな言語で浚ってみたのだが，このランキングはいつも C と Java が2強で，あとはどんぐりの背比べと代わり映えがない。 強いて言うなら，以前は C++ が3位に絡んでたけど今は Python かな，やっぱり。\nまぁ，保守的といえば保守的なんだろうけど\u0026hellip;\n何故か初夏の季節はプログラミング言語のランキング記事が増えるのだが，その中で個人的なイメージに近いのが以下の記事。\n The State of Developer Ecosystem in 2020 Infographic | JetBrains: Developer Tools for Professionals and Teams どのプログラミング言語が使われているのか、JetBrainsが調査レポートを発表：移行先はGo、Kotlin、Python - ＠IT  これは JetBrains 社によるアンケート結果だそうで，なかなか面白い内容である。\nたとえば，いわゆる「第1言語」としてよく使われているのが\n JavaScript Java Python HTML/CSS SQL PHP C++ C# TypeScript Go Kotlin  らしい。 まぁ HTML/CSS は洒落だと思うが。 そんで，これらの中で移行を検討している言語が以下の表になっている。\n via “The State of Developer Ecosystem in 2020 Infographic”  まぁ，そもそも「移行したい」と考えるほうが少数派なのだが，その少数派の動向を見ると， Java や Python などから Go へ移行したいと考えている人が意外にいる一方で Go から Rust へ移行したいと考える人も多いことに気づく。\nこれって，この数年くらいのトレンドに合ってるような気がするのだが，どうだろう。\nちなみに，上の人気（？）プログラミング言語の用途は以下のようになっている。\n via “The State of Developer Ecosystem in 2020 Infographic”  ブックマーク  Googleが「Open Usage Commons」設立。オープンソースの商標を自由かつ公正に使用するための支援団体 － Publickey Font Awesome 5.0.11 で Creative Commons アイコンに完全対応した Font Awesome 5.13 に COVID-19 関連アイコンが登場  "
    },
    {
      "title": "OpenJDK 14.0.2 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "深刻度が高いセキュリティ・アップデートも含まれているので必ず対応すること。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/07/openjdk-14_0_2-is-released/",
      "published": "2020-07-15T02:58:14+00:00",
      "update": "2020-07-17T02:26:27+00:00",
      "content": "予定通り Java 14 および LTS である Java 11 のマイナー・バージョンアップが行われた。 深刻度が高い脆弱性も含まれているので必ず対応すること。\n OpenJDK Vulnerability Advisory: 2020/07/14  以下に脆弱性の一覧を挙げておく。 今回は脆弱性が少なめでよかったね（笑）\n CVE ID Component CVSSv3.1\nScore Affects ...   7 8 11 13 14   CVE-2020-14583 core-libs/java.io 8.3       CVE-2020-14593 client-libs/2d 7.4       CVE-2020-14562 client-libs/javax.imageio 5.3 \u0026nbsp; \u0026nbsp;     CVE-2020-14621 xml/jaxp 5.3       CVE-2020-14556 core-libs/java.util.concurrent 4.8 \u0026nbsp;      CVE-2020-14573 hotspot/compiler 3.7 \u0026nbsp; \u0026nbsp;     CVE-2020-14578 security-libs/java.security 3.7   \u0026nbsp; \u0026nbsp; \u0026nbsp;  CVE-2020-14579 security-libs/java.security 3.7   \u0026nbsp; \u0026nbsp; \u0026nbsp;  CVE-2020-14581 client-libs/2d 3.7       CVE-2020-14577 security-libs/javax.net.ssl 3.7        CVE-2020-14664 javafx/graphics 8.3 \u0026nbsp;       via “OpenJDK Vulnerability Advisory: 2020/07/14”  Java 10 以下 および 12, 13 は基本的にサポート期間が切れている。 Java 11 または 14 へアップグレードするか Amazon Corretto のようなディストリビューションを利用することを強く推奨する。\nOpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk14.0.2/205943a0976c4ed48cb16f1043c5c647/12/GPL/openjdk-14.0.2_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-14.0.2_linux-x64_bin.tar.gz $ sudo ln -s jdk-14.0.2 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;14.0.2\u0026#34; 2020-07-14 OpenJDK Runtime Environment (build 14.0.2+12-46) OpenJDK 64-Bit Server VM (build 14.0.2+12-46, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\n Factory Method Pattern  うむうむ。 ちゃんと動くな。\nブックマーク  Oracle Critical Patch Update Advisory - July 2020  JDK 14.0.2, 11.0.8, 8u261, and 7u271 Have Been Released! | Oracle The Java Tutorials Blog Oracle Java の脆弱性対策について(CVE-2020-14664等)：IPA 独立行政法人 情報処理推進機構 2020年7月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起   AdoptOpenJDKプロジェクトがEclipse Foundationへの合流を発表。合流後の新プロジェクト名は「Eclipse Adoptium」に － Publickey Java 環境のリリースとサポートに関する覚え書き  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n   2020-06-28 に PlantUML Version 1.2020.15 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.14.5 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は2件のセキュリティ・アップデートを含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/07/go-1_14_5-is-released/",
      "published": "2020-07-15T00:47:40+00:00",
      "update": "2020-07-15T00:49:25+00:00",
      "content": "先週予告されていたとおり， Go 1.14.5 がリリースされた。\n [security] Go 1.14.5 and Go 1.13.13 are released  2件のセキュリティ・アップデートを含んでいる。\n【CVE-2020-15586】 Data race in certain net/http servers including ReverseProxy Servers where the Handler concurrently reads the request body and writes a response can encounter a data race and crash. The httputil.ReverseProxy Handler is affected.\nThanks to Mikael Manukyan, Andrew Kutz, Dave McClure, Tim Downey, Clay Kauzlaric, and Gabe Rosenhouse for reporting this issue. This issue is CVE-2020-15586 and Go issue golang.org/issue/34902. via [security] Go 1.14.5 and Go 1.13.13 are released  以下，未稿。\n【CVE-2020-14039】 X.509 verification ignores provided EKUs on Windows On Windows, if VerifyOptions.Roots is nil, Certificate.Verify does not check the EKU requirements specified in VerifyOptions.KeyUsages. Thanks to Niall Newman for reporting this issue. This issue is CVE-2020-14039 and Go issue golang.org/issue/39360. via [security] Go 1.14.5 and Go 1.13.13 are released  以下，未稿。\n例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.14.5.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する（もしくは自力でコンパイルするか）。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.14.5.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.14.5.linux-amd64.tar.gz $ sudo mv go go1.14.5 $ sudo ln -s go1.14.5 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.14.5 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "こんな埼「玉」修正してやるぅ",
      "section": "golang",
      "description": "問題となっているのは「康熙部首（kangxi radicals）」と呼ばれる漢字の部首を集めた以下の Unicode 符号点領域である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/unicode-kangxi-radical/",
      "published": "2020-07-14T04:12:59+00:00",
      "update": "2020-07-14T04:37:49+00:00",
      "content": "Twitter を眺めていたら\n総務省のマイナンバーカード交付状況をデータ化していて、データの結合がうまくいかないなーと思ったら、なんと、同じ埼玉でも文字コードが違うという落とし穴が・・\n3月8日では \\u2f5f が使われていて、それ以降では\\u7389…https://t.co/AOkV3iojaz pic.twitter.com/jU4P583Ad5\n\u0026mdash; Hal Seki (@hal_sk) July 11, 2020  という tweet を見かけた。 これは Adobe Acrobat Distiller の不具合なんだそうで，2019年9月には既に話題に登っているのだが，2020年7月の時点でも修正されていないようだ。\n Create PDF, why KANJI 9AD8(高) will be changed to 2\u0026hellip; - Adobe Support Community - 10625575  Adobe Acrobat Distiller が見捨てられてるのか，それとも「日本語」が見捨てられているのか\u0026hellip;\n閑話休題 (それはさておき) 。 問題となっているのは「康熙部首（kangxi radicals）」と呼ばれる漢字の部首を集めた以下の Unicode 符号点領域である。\n “Kangxi radical - Wikipedia” より抜粋  要するに，これらの領域の文字を本来の符号点に変換してやればいいわけだ。 件の tweet のスレッドを見ると，幸いにも Unicode の NFKC 正規化で変換可能らしい。\n試しに以下のコードを組んで\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;golang.org/x/text/unicode/norm\u0026#34; ) func main() { for r := rune(0x2f00); r \u0026lt;= 0x2fd5; r++ { rr := []rune(norm.NFKC.String(string([]rune{r}))) if r != rr[0] { fmt.Printf(\u0026#34;%#U -(NFKC)-\u0026gt; %#U\\n\u0026#34;, r, rr[0]) } } } 実行してみると\n$ go run sample1.go U+2F00 \u0026#39;⼀\u0026#39; -(NFKC)-\u0026gt; U+4E00 \u0026#39;一\u0026#39; U+2F01 \u0026#39;⼁\u0026#39; -(NFKC)-\u0026gt; U+4E28 \u0026#39;丨\u0026#39; U+2F02 \u0026#39;⼂\u0026#39; -(NFKC)-\u0026gt; U+4E36 \u0026#39;丶\u0026#39; ... U+2F5F \u0026#39;⽟\u0026#39; -(NFKC)-\u0026gt; U+7389 \u0026#39;玉\u0026#39; ... U+2FD4 \u0026#39;⿔\u0026#39; -(NFKC)-\u0026gt; U+9F9C \u0026#39;龜\u0026#39; U+2FD5 \u0026#39;⿕\u0026#39; -(NFKC)-\u0026gt; U+9FA0 \u0026#39;龠\u0026#39; てな出力（一部割愛）になって，ちゃんと変換されていることが分かる。\nただし Unicode 正規化は副作用があるので安直には使えない。 となると，前回の「かなカナ変換」で紹介した方法が使えるかな。\n変換後の符号点の値は散らばっていて且つ数も多く手作業でコードを書くのは不毛なので，まずは unicode.SpecialCase を生成するコードを書いてみよう（笑）\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;golang.org/x/text/unicode/norm\u0026#34; ) func main() { fmt.Println(\u0026#34;var KangxiRadicals = unicode.SpecialCase{\u0026#34;) for kr := rune(0x2f00); kr \u0026lt;= 0x2fd5; kr++ { rr := []rune(norm.NFKC.String(string([]rune{kr}))) if kr != rr[0] { fmt.Printf(\u0026#34;\\tunicode.CaseRange{%#[1]x, %#[1]x, [unicode.MaxCase]rune{%#[2]x - %#[1]x, 0, 0}}, // %#[1]U -\u0026gt; %#[2]U\\n\u0026#34;, kr, rr[0]) } } fmt.Println(\u0026#34;}\u0026#34;) } これを実行するとこんなコードが得られる（一部割愛）。\n$ go run sample1b.go var KangxiRadicals = unicode.SpecialCase{ unicode.CaseRange{0x2f00, 0x2f00, [unicode.MaxCase]rune{0x4e00 - 0x2f00, 0, 0}}, // U+2F00 \u0026#39;⼀\u0026#39; -\u0026gt; U+4E00 \u0026#39;一\u0026#39; unicode.CaseRange{0x2f01, 0x2f01, [unicode.MaxCase]rune{0x4e28 - 0x2f01, 0, 0}}, // U+2F01 \u0026#39;⼁\u0026#39; -\u0026gt; U+4E28 \u0026#39;丨\u0026#39; unicode.CaseRange{0x2f02, 0x2f02, [unicode.MaxCase]rune{0x4e36 - 0x2f02, 0, 0}}, // U+2F02 \u0026#39;⼂\u0026#39; -\u0026gt; U+4E36 \u0026#39;丶\u0026#39; ... unicode.CaseRange{0x2f5f, 0x2f5f, [unicode.MaxCase]rune{0x7389 - 0x2f5f, 0, 0}}, // U+2F5F \u0026#39;⽟\u0026#39; -\u0026gt; U+7389 \u0026#39;玉\u0026#39; ... unicode.CaseRange{0x2fd4, 0x2fd4, [unicode.MaxCase]rune{0x9f9c - 0x2fd4, 0, 0}}, // U+2FD4 \u0026#39;⿔\u0026#39; -\u0026gt; U+9F9C \u0026#39;龜\u0026#39; unicode.CaseRange{0x2fd5, 0x2fd5, [unicode.MaxCase]rune{0x9fa0 - 0x2fd5, 0, 0}}, // U+2FD5 \u0026#39;⿕\u0026#39; -\u0026gt; U+9FA0 \u0026#39;龠\u0026#39; } あとはこれを組み込んで使えばいいだけ。 たとえばこんな感じに使える。\nfunc unicodePrint(s string) { ss := []string{} for _, r := range s { ss = append(ss, fmt.Sprintf(\u0026#34;{%#U}\u0026#34;, r)) } fmt.Println(strings.Join(ss, \u0026#34; \u0026#34;)) } func main() { saitama := \u0026#34;埼⽟\u0026#34; unicodePrint(saitama) unicodePrint(strings.ToUpperSpecial(KangxiRadicals, saitama)) } これを実行すると\ngo run sample2.go {U+57FC \u0026#39;埼\u0026#39;} {U+2F5F \u0026#39;⽟\u0026#39;} {U+57FC \u0026#39;埼\u0026#39;} {U+7389 \u0026#39;玉\u0026#39;} となる。 よーし，うむうむ，よーし。\nブックマーク  [BOD供養寺] スクレイピングしてきたデータの文字コードがおかしかったので修正した - Qiita Go 言語と Unicode 正規化  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "かなカナ変換",
      "section": "golang",
      "description": "全角⇔半角 / ひらがな⇔カタカナ / 拗音・促音⇔直音 各種変換",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/kana-conversion/",
      "published": "2020-07-13T09:45:08+00:00",
      "update": "2020-07-14T04:22:38+00:00",
      "content": "今回は仮名文字を色々と変換することを考えてみる。\n全角⇔半角 変換 いわゆる全角文字と半角文字の変換は golang.org/x/text/width パッケージを使えばいいのだが，仮名文字の場合は少しクセがある。 たとえば以下のように「ペンギン」を半角カナに変換しようとすると\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;golang.org/x/text/width\u0026#34; ) func unicodePrint(s string) { sep := \u0026#34;\u0026#34; for _, r := range s { fmt.Printf(\u0026#34;%s{%#U}\u0026#34;, sep, r) sep = \u0026#34; \u0026#34; } fmt.Println() } func main() { fullwidth := \u0026#34;ペンギン\u0026#34; unicodePrint(fullwidth) unicodePrint(width.Narrow.String(fullwidth)) } 実行結果は\n$ go run sample1.go {U+30DA \u0026#39;ペ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30DA \u0026#39;ペ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} のように濁点・半濁点を上手く処理できないようだ。\nこれを解消するには，安直な手段だが，いったん NFD 正規化で合成列に変換してから変換するとよい。\nfunc main() { fullwidth := \u0026#34;ペンギン\u0026#34; unicodePrint(fullwidth) unicodePrint(width.Narrow.String(norm.NFD.String(fullwidth))) } これで実行すると\n$ go run sample1b.go {U+30DA \u0026#39;ペ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+FF8D \u0026#39;ﾍ\u0026#39;} {U+FF9F \u0026#39;ﾟ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+FF77 \u0026#39;ｷ\u0026#39;} {U+FF9E \u0026#39;ﾞ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} と，綺麗に変換してくれる1。\n逆に golang.org/x/text/width パッケージで半角カナから全角カナに変換しようとすると\nfunc main() { fullwidth := \u0026#34;ペンギン\u0026#34; halfwidth := width.Narrow.String(norm.NFD.String(fullwidth)) unicodePrint(fullwidth) unicodePrint(halfwidth) unicodePrint(width.Widen.String(halfwidth)) } 実行結果は当然ながら\n$ go run sample1c.go {U+30DA \u0026#39;ペ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+FF8D \u0026#39;ﾍ\u0026#39;} {U+FF9F \u0026#39;ﾟ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+FF77 \u0026#39;ｷ\u0026#39;} {U+FF9E \u0026#39;ﾞ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+30D8 \u0026#39;ヘ\u0026#39;} {U+309A \u0026#39;゚\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AD \u0026#39;キ\u0026#39;} {U+3099 \u0026#39;゙\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} 合成列となる。 これを事前合成形にするのであれば\nfunc main() { fullwidth := \u0026#34;ペンギン\u0026#34; halfwidth := width.Narrow.String(norm.NFD.String(fullwidth)) unicodePrint(fullwidth) unicodePrint(halfwidth) unicodePrint(norm.NFC.String(width.Widen.String(halfwidth))) } と NFC 正規化をすることで\n$ go run sample1c.go {U+30DA \u0026#39;ペ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+FF8D \u0026#39;ﾍ\u0026#39;} {U+FF9F \u0026#39;ﾟ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+FF77 \u0026#39;ｷ\u0026#39;} {U+FF9E \u0026#39;ﾞ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+30DA \u0026#39;ペ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} とできる1。\nついでに， 'ヰ', 'ヱ' 文字， 'ヽ', 'ヾ' といった繰り返し記号，あるいは 'ヵ', 'ヶ' といった拗音の一部は半角カナにはないので，これらを含む文字列の変換には注意が必要である。\nひらがな⇔カタカナ 変換 Go 言語では，ひらがなとカタカナを相互変換するパッケージは標準では用意されていないので自作する必要がある。\nまずは，ひらがなとカタカナの Unicode 符号点を眺めてみる2。\n    +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +E     U+3040  ぁ あ ぃ い ぅ う ぇ え ぉ お か が き ぎ く   U+3050 ぐ け げ こ ご さ ざ し じ す ず せ ぜ そ ぞ た   U+3060 だ ち ぢ っ つ づ て で と ど な に ぬ ね の は   U+3070 ば ぱ ひ び ぴ ふ ぶ ぷ へ べ ぺ ほ ぼ ぽ ま み   U+3080 む め も ゃ や ゅ ゆ ょ よ ら り る れ ろ ゎ わ   U+3090 ゐ ゑ を ん ゔ ゕ ゖ   ゙ ゚ ゛ ゜ ゝ ゞ      Unicode 符号点：ひらがな      +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +E     U+30A0  ァ ア ィ イ ゥ ウ ェ エ ォ オ カ ガ キ ギ ク   U+30B0 グ ケ ゲ コ ゴ サ ザ シ ジ ス ズ セ ゼ ソ ゾ タ   U+30C0 ダ チ ヂ ッ ツ ヅ テ デ ト ド ナ ニ ヌ ネ ノ ハ   U+30D0 バ パ ヒ ビ ピ フ ブ プ ヘ ベ ペ ホ ボ ポ マ ミ   U+30E0 ム メ モ ャ ヤ ュ ユ ョ ヨ ラ リ ル レ ロ ヮ ワ   U+30F0 ヰ ヱ ヲ ン ヴ ヵ ヶ ヷ ヸ ヹ ヺ ・ ー ヽ ヾ      Unicode 符号点：カタカナ      +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +E     U+FF60      ･ ｦ ｧ ｨ ｩ ｪ ｫ ｬ ｭ ｮ ｯ   U+FF70 ｰ ｱ ｲ ｳ ｴ ｵ ｶ ｷ ｸ ｹ ｺ ｻ ｼ ｽ ｾ ｿ   U+FF80 ﾀ ﾁ ﾂ ﾃ ﾄ ﾅ ﾆ ﾇ ﾈ ﾉ ﾊ ﾋ ﾌ ﾍ ﾎ ﾏ   U+FF90 ﾐ ﾑ ﾒ ﾓ ﾔ ﾕ ﾖ ﾗ ﾘ ﾙ ﾚ ﾛ ﾜ ﾝ ﾞ ﾟ     Unicode 符号点：半角カナ  -- これを見るとひらがなの U+3041 〜 U+3096 と片仮名の U+30A1 〜 U+30F6 の領域が1対1で対応していることが分かる。 繰り返し記号の 'ゝ', 'ゞ', 'ヽ', 'ヾ' も同様。 これなら標準の strings パッケージを使って変換できそうだ。\nたとえば strings.ToUpperSpecial() 関数でひらがな→カタカナ変換を， strings.ToLowerSpecial() 関数でカタカナ→ひらがな変換を行うように unicode.SpecialCase の値を設定すればよい。\nunicode.SpecialCase 構造体の定義はこうなっている。\n// CaseRange represents a range of Unicode code points for simple (one // code point to one code point) case conversion. // The range runs from Lo to Hi inclusive, with a fixed stride of 1. Deltas // are the number to add to the code point to reach the code point for a // different case for that character. They may be negative. If zero, it // means the character is in the corresponding case. There is a special // case representing sequences of alternating corresponding Upper and Lower // pairs. It appears with a fixed Delta of // {UpperLower, UpperLower, UpperLower} // The constant UpperLower has an otherwise impossible delta value. type CaseRange struct { Lo uint32 Hi uint32 Delta d } // SpecialCase represents language-specific case mappings such as Turkish. // Methods of SpecialCase customize (by overriding) the standard mappings. type SpecialCase []CaseRange // BUG(r): There is no mechanism for full case folding, that is, for // characters that involve multiple runes in the input or output.  // Indices into the Delta arrays inside CaseRanges for case mapping. const ( UpperCase = iota LowerCase TitleCase MaxCase ) type d [MaxCase]rune // to make the CaseRanges text shorter ほんじゃあ，さくっとコードを書いてみよう。 こんな感じかな。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;unicode\u0026#34; ) var kanaCase = unicode.SpecialCase{ unicode.CaseRange{\u0026#39;ぁ\u0026#39;, \u0026#39;ゖ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ァ\u0026#39; - \u0026#39;ぁ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゝ\u0026#39;, \u0026#39;ゞ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ヽ\u0026#39; - \u0026#39;ゝ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ァ\u0026#39;, \u0026#39;ヶ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぁ\u0026#39; - \u0026#39;ァ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ヽ\u0026#39;, \u0026#39;ヾ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゝ\u0026#39; - \u0026#39;ヽ\u0026#39;, 0}}, } func main() { kana := \u0026#34;あいうえおわゐゑをんゔゕゖゝゞアイウエオワヰヱヲンヴヵヶヽヾ\u0026#34; fmt.Println(strings.ToUpperSpecial(kanaCase, kana)) fmt.Println(strings.ToLowerSpecial(kanaCase, kana)) } この実行結果は\n$ go run sample2.go アイウエオワヰヱヲンヴヵヶヽヾアイウエオワヰヱヲンヴヵヶヽヾ あいうえおわゐゑをんゔゕゖゝゞあいうえおわゐゑをんゔゕゖゝゞ となる。 よーし，うむうむ，よーし。\nなお，カタカナの 'ヷ', 'ヸ', 'ヹ', 'ヺ' 文字は対応する事前合成形のひらがな文字がないため，必要なら個別に処理する必要がある。\n拗音・促音⇔直音 変換 拗音 (ようおん) （小さい 'ゃ', 'ゅ', 'ょ' など）や促音（小さい 'っ'）と直音（'や', 'ゆ', 'よ', 'つ'）とを相互変換することを考える。 この機能も標準では用意されてないけど，前節と同じように unicode.SpecialCase の値を決めればいいかな。\n長いコードだけど，ご容赦。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sort\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;unicode\u0026#34; ) var kanaCase2 = unicode.SpecialCase{ unicode.CaseRange{\u0026#39;あ\u0026#39;, \u0026#39;あ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぁ\u0026#39; - \u0026#39;あ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;い\u0026#39;, \u0026#39;い\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぃ\u0026#39; - \u0026#39;い\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;う\u0026#39;, \u0026#39;う\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぅ\u0026#39; - \u0026#39;う\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;え\u0026#39;, \u0026#39;え\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぇ\u0026#39; - \u0026#39;え\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;お\u0026#39;, \u0026#39;お\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぉ\u0026#39; - \u0026#39;お\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;か\u0026#39;, \u0026#39;か\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゕ\u0026#39; - \u0026#39;か\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;け\u0026#39;, \u0026#39;け\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゖ\u0026#39; - \u0026#39;け\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;つ\u0026#39;, \u0026#39;つ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;っ\u0026#39; - \u0026#39;つ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;や\u0026#39;, \u0026#39;や\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゃ\u0026#39; - \u0026#39;や\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ゆ\u0026#39;, \u0026#39;ゆ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゅ\u0026#39; - \u0026#39;ゆ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;よ\u0026#39;, \u0026#39;よ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ょ\u0026#39; - \u0026#39;よ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;わ\u0026#39;, \u0026#39;わ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゎ\u0026#39; - \u0026#39;わ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ぁ\u0026#39;, \u0026#39;ぁ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;あ\u0026#39; - \u0026#39;ぁ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ぃ\u0026#39;, \u0026#39;ぃ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;い\u0026#39; - \u0026#39;ぃ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ぅ\u0026#39;, \u0026#39;ぅ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;う\u0026#39; - \u0026#39;ぅ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ぇ\u0026#39;, \u0026#39;ぇ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;え\u0026#39; - \u0026#39;ぇ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ぉ\u0026#39;, \u0026#39;ぉ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;お\u0026#39; - \u0026#39;ぉ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゕ\u0026#39;, \u0026#39;ゕ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;か\u0026#39; - \u0026#39;ゕ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゖ\u0026#39;, \u0026#39;ゖ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;け\u0026#39; - \u0026#39;ゖ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;っ\u0026#39;, \u0026#39;っ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;つ\u0026#39; - \u0026#39;っ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゃ\u0026#39;, \u0026#39;ゃ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;や\u0026#39; - \u0026#39;ゃ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゅ\u0026#39;, \u0026#39;ゅ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ゆ\u0026#39; - \u0026#39;ゅ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ょ\u0026#39;, \u0026#39;ょ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;よ\u0026#39; - \u0026#39;ょ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゎ\u0026#39;, \u0026#39;ゎ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;わ\u0026#39; - \u0026#39;ゎ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ア\u0026#39;, \u0026#39;ア\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ァ\u0026#39; - \u0026#39;ア\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;イ\u0026#39;, \u0026#39;イ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ィ\u0026#39; - \u0026#39;イ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ウ\u0026#39;, \u0026#39;ウ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゥ\u0026#39; - \u0026#39;ウ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;エ\u0026#39;, \u0026#39;エ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ェ\u0026#39; - \u0026#39;エ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;オ\u0026#39;, \u0026#39;オ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ォ\u0026#39; - \u0026#39;オ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;カ\u0026#39;, \u0026#39;カ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ヵ\u0026#39; - \u0026#39;カ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ケ\u0026#39;, \u0026#39;ケ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ヶ\u0026#39; - \u0026#39;ケ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ツ\u0026#39;, \u0026#39;ツ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ッ\u0026#39; - \u0026#39;ツ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ヤ\u0026#39;, \u0026#39;ヤ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ャ\u0026#39; - \u0026#39;ヤ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ユ\u0026#39;, \u0026#39;ユ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ュ\u0026#39; - \u0026#39;ユ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ヨ\u0026#39;, \u0026#39;ヨ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ョ\u0026#39; - \u0026#39;ヨ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ワ\u0026#39;, \u0026#39;ワ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ヮ\u0026#39; - \u0026#39;ワ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ァ\u0026#39;, \u0026#39;ァ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ア\u0026#39; - \u0026#39;ァ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ィ\u0026#39;, \u0026#39;ィ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;イ\u0026#39; - \u0026#39;ィ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゥ\u0026#39;, \u0026#39;ゥ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ウ\u0026#39; - \u0026#39;ゥ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ェ\u0026#39;, \u0026#39;ェ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;エ\u0026#39; - \u0026#39;ェ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ォ\u0026#39;, \u0026#39;ォ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;オ\u0026#39; - \u0026#39;ォ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ヵ\u0026#39;, \u0026#39;ヵ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;カ\u0026#39; - \u0026#39;ヵ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ヶ\u0026#39;, \u0026#39;ヶ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ケ\u0026#39; - \u0026#39;ヶ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ッ\u0026#39;, \u0026#39;ッ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ツ\u0026#39; - \u0026#39;ッ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ャ\u0026#39;, \u0026#39;ャ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ヤ\u0026#39; - \u0026#39;ャ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ュ\u0026#39;, \u0026#39;ュ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ユ\u0026#39; - \u0026#39;ュ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ョ\u0026#39;, \u0026#39;ョ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ヨ\u0026#39; - \u0026#39;ョ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ヮ\u0026#39;, \u0026#39;ヮ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ワ\u0026#39; - \u0026#39;ヮ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｱ\u0026#39;, \u0026#39;ｱ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｧ\u0026#39; - \u0026#39;ｱ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ｲ\u0026#39;, \u0026#39;ｲ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｨ\u0026#39; - \u0026#39;ｲ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ｳ\u0026#39;, \u0026#39;ｳ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｩ\u0026#39; - \u0026#39;ｳ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ｴ\u0026#39;, \u0026#39;ｴ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｪ\u0026#39; - \u0026#39;ｴ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ｵ\u0026#39;, \u0026#39;ｵ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｫ\u0026#39; - \u0026#39;ｵ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ﾂ\u0026#39;, \u0026#39;ﾂ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｯ\u0026#39; - \u0026#39;ﾂ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ﾔ\u0026#39;, \u0026#39;ﾔ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｬ\u0026#39; - \u0026#39;ﾔ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ﾕ\u0026#39;, \u0026#39;ﾕ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｭ\u0026#39; - \u0026#39;ﾕ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ﾖ\u0026#39;, \u0026#39;ﾖ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｮ\u0026#39; - \u0026#39;ﾖ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ｧ\u0026#39;, \u0026#39;ｧ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ｱ\u0026#39; - \u0026#39;ｧ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｨ\u0026#39;, \u0026#39;ｨ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ｲ\u0026#39; - \u0026#39;ｨ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｩ\u0026#39;, \u0026#39;ｩ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ｳ\u0026#39; - \u0026#39;ｩ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｪ\u0026#39;, \u0026#39;ｪ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ｴ\u0026#39; - \u0026#39;ｪ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｫ\u0026#39;, \u0026#39;ｫ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ｵ\u0026#39; - \u0026#39;ｫ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｯ\u0026#39;, \u0026#39;ｯ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ﾂ\u0026#39; - \u0026#39;ｯ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｬ\u0026#39;, \u0026#39;ｬ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ﾔ\u0026#39; - \u0026#39;ｬ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｭ\u0026#39;, \u0026#39;ｭ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ﾕ\u0026#39; - \u0026#39;ｭ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｮ\u0026#39;, \u0026#39;ｮ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ﾖ\u0026#39; - \u0026#39;ｮ\u0026#39;, 0, 0}}, } func init() { sort.Slice(kanaCase2, func(i, j int) bool { return kanaCase2[i].Lo \u0026lt; kanaCase2[j].Lo }) } func main() { kanaLower := \u0026#34;ぁぃぅぇぉゕゖっゃゅょゎ ァィゥェォヵヶッャュョヮ ｧｨｩｪｫｯｬｭｮ\u0026#34; kanaUpper := strings.ToUpperSpecial(kanaCase2, kanaLower) fmt.Println(kanaLower) fmt.Println(kanaUpper) fmt.Println(strings.ToLowerSpecial(kanaCase2, kanaUpper)) } これを実行すると\n$ go run sample3.go ぁぃぅぇぉゕゖっゃゅょゎ ァィゥェォヵヶッャュョヮ ｧｨｩｪｫｯｬｭｮ あいうえおかけつやゆよわ アイウエオカケツヤユヨワ ｱｲｳｴｵﾂﾔﾕﾖ ぁぃぅぇぉゕゖっゃゅょゎ ァィゥェォヵヶッャュョヮ ｧｨｩｪｫｯｬｭｮ となる。\nブックマーク  Go言語で文字列の変換(全角・半角、ひらがな・カタカナ)をする : Serendip – Webデザイン・プログラミング Go 言語と Unicode 正規化 Go 言語による Unicode 半角/全角変換  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   Unicode 正規化には副作用があり，実際のところコード変換用途にはお勧めできない。詳しくは拙文「Go 言語と Unicode 正規化」を参照のこと。 \u0026#x21a9;\u0026#xfe0e;\n 'ゟ' や 'ヿ' といった合略仮名文字については，今回は無視する。片仮名拡張や仮名補助も同様に扱わない。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "簡単な算数をしませう：場合の数と確率",
      "section": "remark",
      "description": "「場合の数」は小学6年生で習うらしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/math-game/",
      "published": "2020-07-12T06:11:28+00:00",
      "update": "2020-07-12T06:12:39+00:00",
      "content": "最近の義務教育のカリキュラムを知らないのだが，「場合の数」は小学6年生で習うらしい。 だから簡単だよね！\n問題 架空の《〇〇ウイルス》に関する問題。\n 《〇〇ウイルス》に感染している人は《全人口の $0.001=1\\,\\tcperthousand$》である 《〇〇ウイルス》に感染しているか否かを調べる《判定キット》がある  《判定キット》は感染しているか否かを《$0.999=99.9\\,\\%$ の確率》で正しく判定する 感染している という判定のことを《陽性》と呼ぶ 感染していない という判定のことを《陰性》と呼ぶ     この条件の下，無作為に選んだ 人を《判定キット》で調べたら《陽性》だった。この人が《〇〇ウイルス》に実際に感染している確率を求めよ。\n解答 まずは場合の数を求める。 被験者について以下の4つの場合が考えられるだろう。\n   場合 全人口に対する割合     感染者で《陽性》 $0.001 \\times 0.999 = 0.000999$   感染者で《陰性》 $0.001 \\times 0.001 = 0.000001$   非感染者で《陽性》 $0.999 \\times 0.001 = 0.000999$   非感染者で《陰性》 $0.999 \\times 0.999 = 0.998001$    この場合分けを使って《陽性》反応が出る人のうち「実際に感染している割合」を求めると以下のようになる。\n\\[ \\frac{感染者で《陽性》}{感染者で《陽性》+非感染者で《陽性》} = \\frac{0.000999}{0.000999+0.000999} = 0.500 = 50.0\\,\\% \\]  やったね！ 半々の確率で当たりだよ☆ ポイントは母集団中の感染者の割合と《判定キット》の正答率の2つの変数を合わせて考える必要がある，ということだろう。\n実際には，その辺の人を無作為に捕まえて検査を行うなどという馬鹿なことはしない（筈）。 「疑わしい人」を対象に検査を実施するのだから，母集団の構成は，当然ながら，大幅に感染者に偏っている筈である。\n余談だが\u0026hellip; 現在の日本の人口は130M人弱。 このうち COVID-2019 発症者の累計は（WHO の situation report によると） 2020-07-11 時点で21K人ほどである。 これを単純に割り算すると，国内人口の $0.16\\,\\tcperthousand$ ほどが発症した（している）ことになる。\n感染しても無症状のままというケースが多いという話も聞くので，実際の感染者の割合はもっと上がるだろうけど，10倍を上回るということはないだろう（希望的観測）。\n軽くググってみると SARS-CoV-2 向けの PCR (Polymerase Chain Reaction) 検査の感度は $97\\,\\%$ ほどらしい。 ただ技術的な巧拙によって $70\\,\\%$ 程度まで下がるとかいう話も聞くのだが，実質はどうなんだろう。\nなお「感度」は「感染者を検査して陽性になる確率」で「特異度」は「非感染者を検査して陰性になる確率」なんだそうだ。 問題の《判定キット》では感度と特異度を同じ値とみなしているが，実際には異なるらしい。\nブックマーク  「《命》に関わる確率」を疑似乱数を使って解いてみる  参考図書  数学ガールの秘密ノート／やさしい統計 結城 浩 (著) SBクリエイティブ 2016-10-28 (Release 2016-11-10) Kindle版 B01MSJMKMW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  統計の本当に基礎の部分から。学業成績でよく聞く「偏差値」とは何を表していて何を意味しているのか。なんてなあたりから。\nreviewed by Spiegel on 2016-12-11 (powered by PA-APIv5)\n  プログラマの数学 第2版 結城 浩 (著) SBクリエイティブ 2018-01-16 (Release 2018-02-08) Kindle版 B079JLW5YN (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  タイトル通りプログラマ必読書。第2版では機械学習に関する章が付録に追加された。\nreviewed by Spiegel on 2018-03-19 (powered by PA-APIv5)\n "
    }
  ]
}
