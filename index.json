{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "個人番号カードの電子証明書を更新した",
      "section": "remark",
      "description": "オンラインでの更新は出来ない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/update-my-number-card/",
      "published": "2020-10-13T06:49:24+00:00",
      "update": "2020-10-13T06:52:26+00:00",
      "content": "5年前に広島市で個人番号カードを発行してもらったときに「電子証明書の利用期限前にアナウンスすることはない」と言われたのだが「あれはウソだ」ったらしい（笑）\n松江市からきっちり「有効期限通知書」が来たので，いそいそと出掛けたですよ（オンラインでの更新は出来ない）。\n松江市役所 | Flickr  更新の際には「有効期限通知書」が必要（「有効期限通知書」に裏書きして代理人に依頼することも可能）。 もちろん個人番号カードも忘れないこと。 電子証明書の更新だけなら顔写真は不要。 何故か最近また話題（笑）のハンコも不要。\n私は住基ネット用の電子証明書も登録している。 併せて更新するか尋ねられたので，肯定。 手順としては，職員さんの指示の下，タッチパネルで\n 住基用の暗証番号を入力 （住基用の）署名用電子証明書のパスワードを入力 利用者証明用電子証明書の暗証番号を入力  で完了。 券面事項入力補助の暗証番号は使わなかった。 簡単！\n次回はまた5年後。 5年後は個人番号カード自体も更新しないといけないので顔写真がいるな。\n"
    },
    {
      "title": "キャラクタの権利",
      "section": "remark",
      "description": "これからこういった「言いがかり」は増えてくるだろうし，その中には本当に非親告罪として訴訟の対象になることもあるだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/rights-of-narrative-characters/",
      "published": "2020-10-12T02:17:49+00:00",
      "update": "2020-10-12T02:48:03+00:00",
      "content": "先週の話題だが，興味深い記事があるので紹介しておく。\n 知財高裁でBL同人作品の無断コピーは著作権侵害という当たり前の判決(栗原潔) - 個人 - Yahoo!ニュース  前半の猥褻云々については何となく触りたくないのでスルーするとして（興味のある方はリンク先の記事をどうぞ），個人的に面白いと思ったのは以下の判決文に絡む後半の話。\n したがって、本件各漫画のキャラクターが原著作物のそれと同一あるいは類似であるからといって，これによって著作権侵害の問題が生じるものではない 『令和２年(ネ)第１００１８号損害賠償請求控訴事件』判決文より   仮に著作権侵害の問題が生ずる余地があるとしても，それは，主人公等の容姿や服装など基本的設定に関わる部分の複製権侵害に限られるものであって，その他の部分については，二次的著作権が成立し得るものというべきである（なお，本件各漫画の内容に照らしてみれば，主人公等の容姿や服装など基本的設定に関わる部分以外の部分について，オリジナリティを認めることは十分に可能というべきである。） 『令和２年(ネ)第１００１８号損害賠償請求控訴事件』判決文より  私はその筋の専門家ではないので不正確かもしれないが，いわゆる知的財産権（等）については以下のように分類している。\n 「表現」に関する権利は著作権 「アイデア」に関する権利は特許権 「キャラクタ」等に関する権利は商標権または意匠権 実在の人物に関する権利は肖像権（パブリシティ権）  実際，商業作品では作品のロゴやキャラクタを商標登録することは普通に行われている1。 今回対象となっている同人作品が本当に「キャラクタの権利」を侵害しているか否かは別のチャネルで争われるべきものである。\nもっとも，原著作（権）者がそれを言うならまだしも，原作の関係者でも件の同人作品の関係者でもない第三者がそれをゆーな，って感じではあるが（笑）\n実は「改訂3版： CC Licenses について」セクションの「人格権と CC Licenses」で「キャラクタの権利」について言及しているのだが，これは「同一性保持権」の文脈だったので（実際，件の判決文  でも同一性保持権について言及がある）二次的著作物つまり翻案権について原著作（権）者でもない第三者があれこれ言うシチュエーションは考えてなかった。\nこれって2018年末施行の改正著作権法の影響だよね。 非親告罪の一部適用ってやつ。\nおそらくこれからこういった「言いがかり」は増えてくるだろうし，その中には本当に非親告罪として訴訟の対象になることもあるだろう。 ホンマに面倒臭い世の中になったものである。\n参考図書  著作権法 第3版 中山 信弘 (著) 有斐閣 2020-09-04 単行本 4641243336 (ASIN), 9784641243330 (EAN), 4641243336 (ISBN)  第3版が出てた。第2版は図書館で借りて読んだが，途中でギブアップした。個人が興味本位で読める本ではないらしい（笑）\nreviewed by Spiegel on 2020-10-12 (powered by PA-APIv5)\n  性表現規制の文化史 白田 秀彰 (著) 亜紀書房 2017-07-20 (Release 2017-07-20) 単行本（ソフトカバー） 4750515183 (ASIN), 9784750515182 (EAN), 4750515183 (ISBN)  しまった！積ん読状態のまま引っ越しのドサクサで処分しちゃってるよ。読み直さないと。図書館に置いてないかな。\nreviewed by Spiegel on 2017-10-13 (powered by PA-APIv5)\n   「キャラクタ」そのものに著作権は関与しないとしても「キャラクタを使った表現」には当然ながら著作権が適用される。それが二次的著作物にあたるかどうかの線引きは割と微妙らしい。その辺を考えているかは知らないが，作家さん同士で「キャラクタの貸し借り」のやりとりは（口頭レベルでも）割とあると聞く。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-10-11 のブックマーク",
      "section": "bookmarks",
      "description": "「グーグルとオラクルとの「Android」関連訴訟、米最高裁での審理始まる」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/10/11-bookmarks/",
      "published": "2020-10-11T02:52:12+00:00",
      "update": "2020-10-11T02:58:32+00:00",
      "content": "リリース情報  Multiple Cascades With Page Filters | Hugo  Release v0.76.0 · gohugoio/hugo · GitHub   Thunderbird — Release Notes (78.3.2) — Thunderbird Hugo 0.76.1: One Bug Fix | Hugo  Release v0.76.1 · gohugoio/hugo · GitHub   Release v0.76.2 · gohugoio/hugo · GitHub Announcement of LibreOffice 7.0.2 - The Document Foundation Blog Hugo 0.76.3: A couple of Bug Fixes | Hugo  Release v0.76.3 · gohugoio/hugo · GitHub   Release September 2020 · microsoft/vscode · GitHub Release 8.8.2 · mermaid-js/mermaid · GitHub  バベルのインターネット セキュリティ＆プライバシー関連  「セキュリティ事故発生。そのときどうする」\u0026ndash;ラックの模擬訓練を体験 - ZDNet Japan グーグル、機密データ扱う「Android」アプリの脆弱性を検出するチームを新設へ - ZDNet Japan Dropbox Japan、電子署名サービス「HelloSign」を提供\u0026ndash;ストレージとの連携で利用を円滑化 - ZDNet Japan ゆうちょ銀行のmijica Webへの不正ログインについてまとめてみた - piyolog 車載制御およびセキュリティ向けFPGA - EDN Japan 名古屋大発スタートアップAcompanyが暗号化したままの計算処理が可能なMPC秘密計算エンジンを独自開発 | TechCrunch Japan ヴイエムウェアに見るゼロトラストセキュリティの方向性 - ZDNet Japan On Risk-Based Authentication - Schneier on Security Why Your iPhone Has So Many New Privacy Alerts in iOS 14 | Wirecutter Slackが企業間メッセージングを容易にするセキュリティ機能を新導入、ビデオ・音声埋め込み機能も実験中 | TechCrunch Japan ゆうちょ銀の「mijica」で新たな不正か　カードが届く前に番号を盗み商品購入 - ITmedia NEWS セキュリティ上の脆弱性により永久股間ロックの危険にさらされた「スマートな」貞操玩具 | TechCrunch Japan アップル独自のセキュリティチップ「T2」に潜む、修正できない脆弱性の深刻度 | WIRED.jp  天文関連  MIT Tech Review: ISSで再び原因不明の空気漏れ、乗組員が発生場所を調査中 遠い銀河で一際明るい超新星爆発の減光過程をハッブル宇宙望遠鏡が観測 - Engadget 日本版 惑星状星雲の観測が描き出した楕円銀河形成過程の痕跡 | 観測成果 | すばる望遠鏡  惑星状星雲の複雑な構造は恒星を巡る伴天体の影響が大きい、アルマ望遠鏡 | マイナビニュース   2020年10月6日ニュース「今年のノーベル物理学賞はブラックホール研究の3氏に」 | SciencePortal リチウムの極端な増加を示す赤色巨星の進化段階を解明 | 観測成果 | すばる望遠鏡 Sublimation as an effective mechanism for flattened lobes of (486958) Arrokoth | Nature Astronomy : カイパーベルト天体(486958)アロコスが平べったい理由: 太陽系外縁天体アロコスが平たい雪だるまみたいな形状をしているのは太陽系の初期に物質が昇華したことで説明がつくとのこと 遠くの恒星のように太陽を研究 | 国立天文台(NAOJ) 太陽系外惑星の材料を特定する新しい観測手法の提案 壊れゆく惑星から流れ出る塵の色を宇宙望遠鏡の組み合わせで観る | 東工大ニュース | 東京工業大学  知財関連  知財高裁でBL同人作品の無断コピーは著作権侵害という当たり前の判決(栗原潔) - 個人 - Yahoo!ニュース グーグルとオラクルとの「Android」関連訴訟、米最高裁での審理始まる - CNET Japan  Go 言語関連  Go の CI を Github Actions に移行した The Go error printing catastrophe - The CockroachDB errors library, part 3/ · dr knz @ work  Rust 言語関連  Announcing Rust 1.47.0 | Rust Blog  その他  年末調整の電子化進展で手続きが簡単に ～国税庁、申告書作成アプリを公開 - 窓の杜 NVIDIAが価格59ドルの2GBメモリー版「Jetson Nano 2GB Developer Kit」を発表 | TechCrunch Japan 2020年10月5日ニュース「C型肝炎ウイルスを発見、ノーベル医学生理学賞に米・カナダ3氏」 | SciencePortal 「Edge」の開発ツールを統合し「Visual Studio Code」でWebアプリの開発を完結 - 窓の杜 Dart 2.10: Unified dart tool, null safety update. | Dart アマゾンの認可で加速、ドローン活用への要請強まる - ZDNet Japan 2020/10/26までにAzure Database for MySQL/MariaDBのサーバ証明書を更新しないと死 「G Suite」が新ブランド「Google Workspace」に、新機能も続々 - ケータイ Watch アドオンサイト“addons.mozilla.org”に3つのバッジ ～安心して利用できる品質を証明 - 窓の杜 : Mozilla はどんどんダメな方向に進んでる気がするなぁ\u0026hellip; 倒産寸前だった「Linux Journal」、スラッシュドットメディア傘下で何度目かの復活 － Publickey 「PHP 8」リリース候補版が登場、JITコンパイラによる高速化など。11月に正式版を予定 － Publickey 【さくらのレンタルサーバ/マネージドサーバ】WebP対応のお知らせ | さくらインターネット 「Python 3.9」が正式リリース ～次期バージョンは「Python 4」ではなく「Python 3.10」 - 窓の杜 ドコモ、「iモード公式サイト」を2021年11月末に終了へ - CNET Japan Hacktoberfestの炎上＆感動：１０月でなんでくそプルリクエストそんなに多いの？ - Qiita  「プログラムの修正を送るとTシャツがもらえる」キャンペーンが開発者に迷惑がられる理由とは？ - GIGAZINE   grep の「バイナリファイル (標準入力) に一致しました」が出る条件を調べていたらそれは長い旅路の始まりだった。 「Ruby 2.7.2」がリリース ～「WEBrick」の更新でHTTP Request Smugglingの脆弱性を解消【10月7日追記】 - 窓の杜 2020年ノーベル物理学賞をブラックホール研究の3氏が受賞 | 国立天文台(NAOJ) 2020年10月7日ニュース「効率的なゲノム編集技術を開発 ノーベル化学賞に欧米2氏」 | SciencePortal 米IBM、クラウド部門などを分社化し新会社を設立へ。新会社はマネージドインフラに注力 － Publickey VMwareがRaspberry Pi 4対応の「ESXi-Arm」を実験的リリース。vSphere 7相当の仮想化ハイパーバイザ － Publickey 奈良県民の自虐が詰まったRPG「ファイ奈良ファンタジー」、絶賛テストプレイ中！ - やじうまの杜 - 窓の杜 科学や学問の「ありがたみ」 – mhatta\u0026rsquo;s mumbo jumbo ShellHub 本のチャプターファイルの作成方法が変わりました Qiitaの記事をZenn形式のMarkdownで保存して管理する  "
    },
    {
      "title": "絵文字と異体字と Markdown",
      "section": "remark",
      "description": "Hugo の markdown で絵文字を簡単に表示する。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/emoji-variation-and-markdown/",
      "published": "2020-10-08T07:22:55+00:00",
      "update": "2020-10-09T02:42:09+00:00",
      "content": "絵文字ってある意味で漢字より難解なので，なるべく使わないようにしてきたのだが，文章に混ぜたり emoticon 代わりに使ったりするだけでなく Zenn みたいにページのアテンションに使ってる例もあるわけで「もう少し積極的に使ってもいいかなぁ」という気になってきた。\nとはいえ input method から延々と探したりその辺のページから絵文字をコピペするのも馬鹿らしいし，折角 markdown で書いてるんだから意味のあるコードで書きたい。\nHugo なら config.toml 等の設定ファイルで\nenableEmoji = true とすれば markdown テキスト内の :heart: 等を ❤️ 等に変換してくれる。 あるいはテンプレートや shortcodes で\n{{ emojify \u0026#34;:heart:\u0026#34; }} などとしてもよい。\n変換可能な絵文字の一覧は以下を参照のこと。\n 🎁 Emoji cheat sheet for GitHub, Basecamp, Slack \u0026amp; more  ただしリンク先にある全部の文字が Hugo で使えるわけではないらしい。 私がよく使いそうな絵文字を挙げておくか。\n   字形 Markdown コード CLDR Short Name     😄 :smile: grinning face with smiling eyes   😴 :sleeping: sleeping face   😔 :pensive: pensive face   🙇‍♂️ :bow: person bowing ???   💤 :zzz: zzz   💢 :anger: anger symbol   💦 :sweat_drops: sweat droplets   ⭐ :star: star   💡 :bulb: light bulb   🎵 :musical_note: musical note   🔑 :key: key   🔒 :lock: locked   🔓 :unlock: unlocked   🔐 :closed_lock_with_key: locked with key    さて，皆さんの環境ではどう見えているでしょうか。 人によって見え方が異なると思います（絵文字のフォント指定については後述）。\nところで，上に挙げた :bow: ってどう見えてます？ 実は \u0026#x1f647;\u0026#x2642; ってな感じの2文字に見えてません？ うちでは :bow: から変換した絵文字をターミナル・エミュレータとかにコピペすると，こうなるんですよ。\nというわけでコードを見てみると\n$ echo 🙇‍♂️ | gnkf dump --unicode 0x0001f647, 0x200d, 0x2642, 0xfe0f, 0x000a おいおい。 本来のコードの後ろに何か付いとるやないかいっ 💢 （← 早速）\n実はこれ，絵文字の異体字なんだよ。 内訳はこんな感じ。\n   Unicode Point 字形 Unicode 名称     U+1F647 \u0026#x1f647; PERSON BOWING DEEPLY   U+200D  ZERO WIDTH JOINER   U+2642 \u0026#x2642; MALE SIGN   U+FE0F  VARIATION SELECTOR-16    ZERO WIDTH JOINER (ゼロ幅接合子; ZWJ) はアラビア文字なんかで複数の文字を結合してひとつの文字にするための制御文字。 さらに VARIATION SELECTOR-16 は “Emoji Variation Selector” とも呼ばれ，絵文字の異体字であることを示す異体字セレクタである1。\nつまり :bow: で表示されるのは「土下座する男性」を意味する絵文字（の異体字）なわけだ。 処理系によって異体字を上手く表示できない場合は \u0026#x1f647;\u0026#x2642; のように2つの文字が並んでいるように見えたりするようだ。\n\u0026hellip;なんで男性なんだろうね。 GitHub の既定ブランチ名を弄るとかするくらいなら，こういうのを真っ先に改善すべきなんじゃないの？\nというわけで Hugo 環境全体の設定は変えずに，絵文字表示用の shortcode を作って対応することにした。 こんな感じ。\n{{- range $i, $s := .Params -}} {{- if gt $i 0 -}}\u0026amp;nbsp;{{- end -}}\u0026lt;abbr title=\u0026#34;{{ $s }}\u0026#34;\u0026gt; {{- if eq $s \u0026#34;ゴメン\u0026#34; -}}\u0026amp;#x1f647; {{- else if eq $s \u0026#34;ふむむ\u0026#34; -}}\u0026amp;#x1f914; {{- else if eq $s \u0026#34;はぁと\u0026#34; -}}\u0026amp;#x1f49b; {{- else if eq $s \u0026#34;キーボード\u0026#34; -}}\u0026amp;#x2328; {{- else if eq $s \u0026#34;はなまる\u0026#34; -}}\u0026amp;#x1f4ae; {{- else if eq $s \u0026#34;錠前と鍵\u0026#34; -}}{{- emojify \u0026#34;:closed_lock_with_key:\u0026#34; -}} {{- else -}}{{ emojify $s }}{{- end -}} \u0026lt;/abbr\u0026gt;{{- end -}} これで {{\u0026lt; emoji \u0026quot;:zzz:\u0026quot; \u0026gt;}} などとすれば\n\u0026lt;abbr title=\u0026#34;:zzz:\u0026#34;\u0026gt;💤\u0026lt;/abbr\u0026gt; という感じに展開してくれる。 あとは自分で定義名を作れば別名定義もできるし対応する絵文字を増やすこともできる。 上の shortcode だと\n   字形 shortcode CLDR Short Name     \u0026#x1f647; {{\u0026lt; emoji \u0026quot;ゴメン\u0026quot; \u0026gt;}} person bowing   \u0026#x1f914; {{\u0026lt; emoji \u0026quot;ふむむ\u0026quot; \u0026gt;}} thinking face   \u0026#x1f49b; {{\u0026lt; emoji \u0026quot;はぁと\u0026quot; \u0026gt;}} yellow heart   \u0026#x2328; {{\u0026lt; emoji \u0026quot;キーボード\u0026quot; \u0026gt;}} keyboard   \u0026#x1f4ae; {{\u0026lt; emoji \u0026quot;はなまる\u0026quot; \u0026gt;}} white flower   🔐 {{\u0026lt; emoji \u0026quot;錠前と鍵\u0026quot; \u0026gt;}} locked with key    てな感じで定義している。\n【2020-10-09 追記】 絵文字のフォント指定 絵文字に関しては Google Fonts みたいなメジャーな Web フォントはないっぽいので各自ローカル環境のフォントをあてにするしかないんだけど（もう自前で Web フォントを用意したくない），これに関して Unicode 本家サイトで\n.chars, .charsSmall { text-decoration: none; color: #ccc; font-family: \u0026#34;Noto Color Emoji\u0026#34;, \u0026#34;Apple Color Emoji\u0026#34;, \u0026#34;Segoe UI Emoji\u0026#34;, Times, Symbola, Aegyptus, Code2000, Code2001, Code2002, Musica, serif, LastResort; font-variant-emoji: emoji; } みたいな記述があったので，ありがたくパクらせていただくことにした（笑） すなわち\nabbr.emoji-chars { text-decoration: none; font-family: \u0026#34;Noto Color Emoji\u0026#34;, \u0026#34;Apple Color Emoji\u0026#34;, \u0026#34;Segoe UI Emoji\u0026#34;, Times, Symbola, Aegyptus, Code2000, Code2001, Code2002, Musica, serif, LastResort; font-variant-emoji: emoji; } と定義して\n\u0026lt;abbr class=\u0026#34;emoji-chars\u0026#34; title=\u0026#34;:zzz:\u0026#34;\u0026gt;💤\u0026lt;/abbr\u0026gt; となるよう shortcode を書き直せばいいわけだ。 当面はこれで。\nブックマーク  Full Emoji List : based on Unicode CLDR data emojify | Hugo 絵文字一覧 🤣 | Let\u0026rsquo;s EMOJI UnicodeのEmojiの一覧 - Wikipedia twitter/twemoji: Emoji for everyone. https://twemoji.twitter.com/ googlefonts/noto-emoji: Noto Emoji fonts    異体字セレクタのコードポイントは通常のものと区別するために E+FE0Fと表記する場合もあるらしい。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "えんやらやっと go-cvss パッケージ v0.4.0 をリリースした",
      "section": "release",
      "description": "PR もらっていったんリリースしたのだが，アレなコードでマジすんません，ということで書き直した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/10/go-cvss-package-v0_4_0-is-released/",
      "published": "2020-10-07T07:48:21+00:00",
      "update": "2020-10-08T07:23:05+00:00",
      "content": "絶賛放置プレイ中の spiegel-im-spiegel/go-cvss パッケージだが，どうも使っていただいてる方がいて「Temporal Metrics は実装しないの？」と言われ「PR くれるならマージするよ」と下手くそな英語で返したのだが，本当に PR をくださって恐縮です。\nで，まぁ，ありがたくマージしていったん v0.3.0 をリリースしたのだが，なんせベースのコードが場当たりなやっつけコードなので，マジすんません 🙇 て感じ。\nそこで，一念発起してちゃんと書き直すことにした。 もっとも，コード自体はほとんど使いまわしで構成を変えただけなんだけどね。\nというわけで v0.4.0 をリリースしました。\n Release v0.4.0 · spiegel-im-spiegel/go-cvss · GitHub  以前のコードは残してあるが deprecated なコードとしていずれ削除する予定。 書き直したコードはこんな風に使う。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/go-cvss/v3/metric\u0026#34; ) func main() { bm, err := metric.NewBase().Decode(\u0026#34;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H\u0026#34;) //CVE-2020-1472: ZeroLogon  if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Printf(\u0026#34;Severity: %v (%v)\\n\u0026#34;, bm.Severity(), bm.Score()) // Output:  // Severity: Critical (10) } metric.NewBase() の部分を metric.NewTemporal() に変えれば Temporal Metrics として処理できる。\nfunc main() { tm, err := metric.NewTemporal().Decode(\u0026#34;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H/E:F/RL:W/RC:R\u0026#34;) //CVE-2020-1472: ZeroLogon  if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Printf(\u0026#34;Base Severity: %v (%v)\\n\u0026#34;, tm.BaseMetrics().Severity(), tm.BaseMetrics().Score()) fmt.Printf(\u0026#34;Temporal Severity: %v (%v)\\n\u0026#34;, tm.Severity(), tm.Score())  // Output:  // Base Severity: Critical (10)  // Temporal Severity: Critical (9.1) } 評価の内容をテンプレートを使って吐き出す処理は別のサブパッケージに分離した（上の PR くれた方はこの機能を全く使ってないみたいなので）。\nたとえば\nvar template = `| {{.BaseMetrics}}| {{.BaseMetricValue}}| |--------|-------| | {{.AVName}}| {{.AVValue}}| | {{.ACName}}| {{.ACValue}}| | {{.PRName}}| {{.PRValue}}| | {{.UIName}}| {{.UIValue}}| | {{.SName}}| {{.SValue}}| | {{.CName}}| {{.CValue}}| | {{.IName}}| {{.IValue}}| | {{.AName}}| {{.AValue}}| ` みたいに markdown の表形式でテンプレートを作って\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/go-cvss/v3/metric\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/go-cvss/v3/report\u0026#34; \u0026#34;golang.org/x/text/language\u0026#34; ) var template = ` ... ` func main() { bm, err := metric.NewBase().Decode(\u0026#34;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H\u0026#34;) //CVE-2020-1472: ZeroLogon \tif err != nil { fmt.Fprintln(os.Stderr, err) return } r, err := report.NewBase(bm, report.WithOptionsLanguage(language.Japanese)).ExportWithString(template) if err != nil { fmt.Fprintln(os.Stderr, err) return } if _, err := io.Copy(os.Stdout, r); err != nil { fmt.Fprintln(os.Stderr, err) } } てな感じに書けば\n$ go run main.go | 基本評価基準 | 評価値 | |--------|-------| | 攻撃元区分 | ネットワーク | | 攻撃条件の複雑さ | 低 | | 必要な特権レベル | 不要 | | ユーザ関与レベル | 不要 | | スコープ | 変更あり | | 機密性への影響 | 高 | | 完全性への影響 | 高 | | 可用性への影響 | 高 | のように出力してくれる（ちなみに英語と日本語にしか対応してませんw）。\nさて。 Environmental Metrics に対応するかどうか。 やるなら今のうちなんだよなぁ\u0026hellip;\nブックマーク  CVSS v3.0 Specification Document CVSS v3.1 Specification Document 共通脆弱性評価システムCVSS v3概説：IPA 独立行政法人 情報処理推進機構 CVSS v3.1  "
    },
    {
      "title": "AI はコピペ・プログラマを救うか",
      "section": "remark",
      "description": "2年前に「AI 時代に真っ先に駆逐される職業は（コピペ）プログラマなんじゃないだろうか」と書いたが，考え直すべき時かもしれない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/programming-with-artificial-intelligence/",
      "published": "2020-10-05T06:39:17+00:00",
      "update": "2020-10-05T22:53:08+00:00",
      "content": "ガートナーが発表するハイプ・サイクルによると日本でも「人工知能」そのものはとっくに幻滅期に入っているわけだが，最近いくつか面白い記事を見かけたので，覚え書きとしてちょろんと書いておく。\n「AI がしたこと」の責任は誰が取るのか まずはこれ。\n リツイートしただけで著作者人格権を侵害し得るという判決が最高裁で確定(栗原潔) - 個人 - Yahoo!ニュース  微妙に釣りタイトルだが（笑），かいつまんで書くとこんな感じ。\n 「無断転載禁止」の写真を無断で tweet した馬鹿がいた さらにその「無断 tweet」を retweet した人がいた（意図は不明） Retweet のプレビューは自動でトリミング表示され写真端のクレジット表記が隠される 写真の著作者側は，プレビューのトリミング表示は著作者人格権の侵害である，として retweet したユーザの情報開示を Twitter に求める Twitter 側は「プレビューのトリミングは表示上だけの問題だからいんじゃね？」と拒否したため訴訟に発展 知財高裁で Twitter 側が負けたので最高裁へ上告 最高裁は「プレビューのトリミング表示でも著作者人格権の侵害になりうる」と判断し上告を棄却  実際に侵害となるかどうかは別の事案になるだろう。\n日本における強すぎる著作者人格権や最高裁の判断については色々思うところがあるだろうが，それについては今は置いておいて，この結果 Twitter 側がどうしたか，である。 それがおそらくこの記事になるんだと思う。\n Twitterは投稿時の画像プレビューのトリミング方法をユーザーに委ねる方針へ | TechCrunch Japan  元が米国の記事なので人種差別に絡めて書いてあるが，日本人から見れば上の判決の直後だけに，この影響がないとは思わないだろう（笑）\nまぁ人種差別に絡めた話でも同じ結論だと思うが，要するに「『AI がしたこと』の責任は誰が取るのか」ってことだよね。\nAI に「製造物責任」は問えないんだから，その「責任」の所在は人間側にシフトせざるを得ない。 でもサービス・プロバイダはそんな「責任」は取りたくないので「じゃあユーザに押し付けちゃえばいいぢゃん」となる，当然ながら。\nその結果「プレビューのトリミングは君らが決めてくれ」となったわけだ。 その判断のフィードバックは当然行うんだろうけど。 監視資本主義社会だからね（笑）\n実に分かりやすい。\n「AI が書いたコード」の責任は誰が取るのか 同じことはプログラム・コードにも言えるだろう。\nライセンスでコード自体を「無保証」としても，そのコードで損害が発生したら誰かがそのペナルティを払わなくちゃいけない。 「AI が書いたコード」だから誰もペナルティを払わなくていい，とはならないはずだ。\nであれば，現在および現在の延長線上の未来において「AI がコードを書く」ことはないんじゃないだろうか。 技術的な可能性の有無は別として。\nAI はコピペ・プログラマを救うか というわけで次の記事。\n Pair Programming with AI – O’Reilly AIとのペアプログラミングは可能だろうか？ - YAMDAS現更新履歴  この中の以下の部分（引用の引用でゴメンペコン）\n そのソリューションはおそらく IDE に組み込まれるだろう。プログラマがやりたいことを、不正確で曖昧な英語でざっと記述することで始める。AI はその解決策がどんなものになるか、おそらくは疑似コードみたいなスケッチでそれに応える。それを受けてプログラマは、豊富なコード補完機能（つまりそう、GitHub とかそうしたものにあるすべてのコードを学習したモデルに基づく）を使って実際のコードを埋めて書き継ぐわけだ。 AIとのペアプログラミングは可能だろうか？より  を見て「それなんてエキスパートシステム？」って思ってしまったのだが（笑）\nもう少し踏み込んで考えると，現在でも「インプットしたコードに対して何らかのアウトプットを返す」仕組みはあるわけだ。 それこそ上の記事でも紹介されている Visual Studio IntelliCode とか。 最近話題の GitHub Code Scanning の中核である CodeQL も確か AI ベースである。\nしかし，今だに「コードでないところからコードを生み出す」ことはできてない。 「ノーコード」だって「ロジックの表現がコードではない」というだけで，ロジック自体は人間が考えなきゃならないし，そのロジックを動かすためのコードは（別の）人間が書かなきゃならない。\n「プログラマがやりたいことを、不正確で曖昧な英語でざっと記述」したものをコードに「翻訳」してくれる AI が登場するとして，それで誰が一番得をするか考えたら，それはコピペ・プログラマじゃないだろうか。\nだってコピペ・プログラミングで一番苦労するのは「コピー元」を探すことだから。 それを AI が肩代わりしてくれるんだよ。 コピペ・コード同士の整合性も AI が指摘してくれるだろう。 スキルも不要。 何故ならスキルの蓄積は人間ではなく AI の仕事になるから。\nAI がコードを書くことは（主に人間側の都合で）ない。 だがプログラミングに必要な道具（ロジックやコード）や提案は AI が用意してくれる。\nこうなると「よいプログラマ」の条件は「AI への質問が上手い人」になるかもしれない。 件の記事は機械が人間に寄り添うことを期待しているようにも読めるが，相手に合わせるのが得意なのは人間のほうだからね（笑）\n2年前に「AI 時代に真っ先に駆逐される職業は（コピペ）プログラマなんじゃないだろうか」と書いたが，考え直すべき時かもしれない。\n参考図書  いかにして問題をとくか G. ポリア (著), Polya,G. (原著), 賢信, 柿内 (翻訳) 丸善 1975-04-01 単行本 4621045938 (ASIN), 9784621045930 (EAN), 4621045938 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。\nreviewed by Spiegel on 2014-09-26 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-10-05 のブックマーク",
      "section": "bookmarks",
      "description": "「Webアクション「部屋裏のバイテン」第６話」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/10/05-bookmarks/",
      "published": "2020-10-05T02:29:20+00:00",
      "update": "2020-10-05T02:32:11+00:00",
      "content": "リリース情報  Release 8.8.1 · mermaid-js/mermaid · GitHub OpenSSH 8.4 was released on 2020-09-27 Release August 2020 Recovery 3 · microsoft/vscode · GitHub  バベルのインターネット  アップルが中国App StoreからRSSリーダーのReederとFiery Feedsを削除 | TechCrunch Japan Facebookは米国選挙結果の「非合法性を主張する」広告を受け付けない | TechCrunch Japan  セキュリティ＆プライバシー関連  耐量子コンピュータ暗号の概要 | Zenn TwitterのAPIキーが漏えいした可能性\u0026ndash;開発者に警告 - ZDNet Japan 米警察当局はアマゾンの顧客データを情報要求ポータルから入手している | TechCrunch Japan When coffee makers are demanding a ransom, you know IoT is screwed | Ars Technica  Hacking a Coffee Maker - Schneier on Security Wi-Fi接続対応のコーヒーメーカーは「ランサムウェアに感染して身代金を要求される」可能性がある - GIGAZINE   GPSとGPS信号に対する攻撃｜ラック・セキュリティごった煮ブログ編集部｜note Negotiating with Ransomware Gangs - Schneier on Security 旧「Microsoft Edge」「Internet Explorer」の「TLS 1.0/1.1」対応は来年春にも削除へ - 窓の杜 2020年10月に発生した東京証券取引所のシステム障害についてまとめてみた - piyolog マイナンバーカードのセキュリティ向上へ　生体認証追加し多要素化検討 - ITmedia NEWS : セキュリティ劇場 Intezer - IPStorm Now Has a Linux Malware : Go のせいで malware がマルチプラットフォーム対応になったという言いがかり（笑） Paper Backup - KeePassXC : KeePassXC データベースの内容を紙に打ち出す方法 ある日突然、自社ドメインが乗っ取られた――“原因も手口も不明”の攻撃に、セキュリティチームはどう立ち向かったか - ITmedia エンタープライズ Microsoft 365の大規模障害、原因は未検証アップデートがデプロイシステムのバグにより通常のプロセスをバイパスして本番環境へ直接デプロイされたこと － Publickey  天文関連  長周期彗星が作るもう一つの黄道面 | 国立天文台(NAOJ) MIT Tech Review: 火星の南極に新たな地下湖、生命体が見つかる可能性も 火星最接近2020 | 国立天文台(NAOJ)  火星が地球に最接近（2020年10月） | 国立天文台(NAOJ)   JAXA | 過酷な月の宇宙放射線被ばく線量を縦孔利用で月表面の10%以下に Join Planet Patrol and Help TESS Hunt Exoplanets | SETI Institute サイエンスクリップ「8億年前、地球に起きた天体衝突に迫る 手がかりは月のクレーター」| SciencePortal ニュース - アルマ望遠鏡の運用再開に向けた準備について - アルマ望遠鏡 ニュース - アルマ望遠鏡、最期を迎える星が噴き出すガスを克明にとらえる - アルマ望遠鏡  知財関連  リツイートしただけで著作者人格権を侵害し得るという判決が最高裁で確定(栗原潔) - 個人 - Yahoo!ニュース 「アマビエ」の商標登録出願に拒絶理由通知(栗原潔) - 個人 - Yahoo!ニュース  Linux または Ubuntu に関する話題  電子辞書は組み込みLinuxの夢を見るか？ - Zopfcode Linux その71 - GNOME 40のリリーススケジュール（ドラフト） - kledgeb Ubuntu 20.04 その195 - Dellから第11世代のIntel CPUを搭載した新XPS 13 Developer Edition登場 - kledgeb Ubuntu 20.10 その9 - Ubuntu 20.10 β版がリリースされました・ディスクイメージのダウンロード - kledgeb  Go 言語関連  Amazon CloudWatch Agentのソースコードが公開されたのでナナメ読み - @netmarkjp GitHub - mercari/testdeck: Testdeck is a framework for integration, end-to-end (E2E), and security testing of gRPC microservices written in Golang. elsaland/elsa: ❄️ Elsa is a minimal, fast and secure runtime for Javascript and Typescript written in Go Microservices Deserve Modern Programming Platforms: Java May Not be the Best Option | Hacker Noon シェルスクリプトで作る Twitter bot 作成入門 | Zenn : 中核部分を Go で書く slack-go/slack v0.7.0 をリリースしました | Zenn Go言語で非同期処理の結果を受け取る | Zenn Go: How Does a Program Recover?. Panics in Go are triggered when the… | by Vincent Blanchon | A Journey With Go | Oct, 2020 | Medium Go, WebAssembly, HTTP requests and Promises | With Blue Ink Golang Weekly GitHub - cockroachdb/apd: Arbitrary-precision decimals for Go : いわゆる Decimal 型  Rust 言語関連  Rust ではじめる Twitter API | Zenn  その他  【連載】計算の歴史学とジェンダー―誰が計算をしていたのか？（前山和喜） - 文学通信 レッシグ新刊で知ったアメリカ政治二極化の力学 - 山形浩生の「経済のトリセツ」 C/C++言語のVisual Studio Code拡張機能がv1.0に到達、初の一般リリース - 窓の杜 PostgreSQL 13正式版リリース。B-Treeインデックスの重複排除、同一テーブル内でのVacuum並列処理など新機能 － Publickey Swift言語がWindowsのサポートを開始。コンパイラやライブラリなどWindows対応に － Publickey EUがアップルに対する1.5兆円超の罰金命令を棄却した判決を上訴 | TechCrunch Japan zenn-cli + reviewdog + textlint + GitHub Actions で執筆体験を最高にする | Zenn Androidデバイス上のウェブブラウザに向けたフォント設定を考える。 - freefielder.jp : だから Web フォントを OFF るとおかしいことになるのか Google、プロジェクト管理のための新ノーコードツール「Tables」発表。リスト／カンバン／チケット管理／マップなど柔軟なビュー、Botによる作業自動化など － Publickey  Googleのプロジェクト管理のためのノーコードツール「Tables」を使ってみた | Zenn   古いテレビの発するSHINE電波で村全体のネットがダウン | ギズモード・ジャパン How to Add a GitHub Actions Badge to Your Project - DEV 2020年9月29日ニュース「名大など、新型コロナの人工抗体を作製 治療や検査、感染防止薬に期待」 | SciencePortal ZennをRSSフィードで購読する | Zenn IBM Cloud大阪リージョンが稼働開始。東京リージョンと同じく3つのゾーンで構成。リージョン間の通信費無料 － Publickey ホテルのレビューで「星1」をつけた男性が逮捕され投獄される事態が発生 - GIGAZINE Raspberry Pi 4で仮想化ハイパーバイザが実行可能に。Xenハイパーバイザが移植完了を発表 － Publickey Token authentication requirements for API and Git operations - The GitHub Blog 「韓国民間人」射殺で文在寅「威信失墜」金正恩「謝罪」の波紋（上）：平井久志 | 記事 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト  「韓国民間人」射殺で文在寅「威信失墜」金正恩「謝罪」の波紋（下）：平井久志 | 記事 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト   2020年10月1日ニュース「高温ほど熱伝導率が大きくなる現象を観測 東大、窒化ケイ素薄膜で」 | SciencePortal Arm版「Windows 10」、x64エミュレーションに対応へ - ZDNet Japan Facebookの「監査審査会」に対抗し活動家による「真の監査審査会」が発足 | TechCrunch Japan Detecting Deep Fakes with a Heartbeat - Schneier on Security 7月に深刻なハッキングを受けたTwitterに新たな最高情報セキュリティ責任者が就任 | TechCrunch Japan 軽量か防水か遊び心か 『モバイルキーボード』スマホやタブレット用おすすめ5選｜TIME＆SPACE by KDDI BitTorrentを買収した中国の億万長者に対し元従業員たちが猛反発、一体何が起きているのか？ - GIGAZINE 郵便投票のデジタル申請は殆どの州でアクセシビリティーがない | TechCrunch Japan グーグルがDaydreamのサポートを打ち切りへ、VR白昼夢から完全覚醒か | TechCrunch Japan Webアクション「部屋裏のバイテン」第６話 : ぽじとろんの竹本泉観察記 COVID-19 and Acedia - Schneier on Security Twitterは投稿時の画像プレビューのトリミング方法をユーザーに委ねる方針へ | TechCrunch Japan インフラ構成図をReactで描けるツールを作った | Zenn Amazonの「沈黙で始まる会議」と「PowerPoint禁止」の密接な関係｜塚本 牧生｜note 『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』の（今度こそおそらく）最終版を公開 - YAMDAS現更新履歴 データ第一な世界を疑う技術を説く『Calling Bullshit』がタイムリーで面白そうだ - YAMDAS現更新履歴  "
    },
    {
      "title": "本当は怖い Blockchain",
      "section": "remark",
      "description": "Blockchain による不正と腐敗",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/blockchain-horror/",
      "published": "2020-10-04T01:21:50+00:00",
      "update": "2020-10-04T01:46:00+00:00",
      "content": "なんか Twitter の TL を眺めていると不穏な話ばかり流れてくるのだが，そもそも「デジタル庁」なるものは最初の1フィートで間違えている印象である。 その中でも気になるのが Blockchain が云々とかいう話で，老婆心ながらこの記事でも言及しておく。\nそもそも Blockchain は「通貨」の性質を持つデジタル・トークンの「取引」を扱うための仕組みで，本来は他に転用できない。 トークンが「通貨」の性質を持つことに意味があるからだ。\nでは，それ以外の部分で Blockchain の特徴と言えるものをいくつか挙げると\n 追記型データベースで，追記されたデータについて完全性（integrity）を保証する PoW (Proof-of-Work) によって追記するデータが正しい（誤りがない）ことを保証する1  PoW の対価として「通貨」の性質を持つデジタル・トークンを振り出す（または手数料を払う） PoW の結果の正しさは多数決で保証する   非中央集権型（decentralization）かつ peer-to-peer なシステム構成を前提とする 不特定多数が参加することを前提とする データベースのコピーは自由だが分岐（fork）は無用 公開鍵を ID としてそのまま用い，鍵の証明（certification）を行わない  といったところだろうか。\nなお，3番目から5番目までは2番目の PoW を達成するための要件である点に注意。 まぁ Blockchain 本家である Bitcoin は既に3番目と5番目の要件が瓦解しているのだが（笑）\n6番目についてもう少し詳しく書くと Blockchain は ID となる公開鍵が誰に帰属するかについて全く関知しない。 Blockchain が気にするのは取引履歴の一貫性と無矛盾性であり，この要件が達成されているなら取引を行ったのが「誰か」なんてどうでもいいのだ2。\nしかし実際には取引の主体となる「誰か」という情報は最重要であると言っていい。 したがって ID と「誰か」を関連付ける別の仕掛けが必要となる。 たとえば「ウォレット・サービス」とか「交換所」とか。\nBlockchain で「取引」を追記するためには当事者の秘密鍵で電子署名する必要があり，もし「交換所」等でそれを肩代わりしてもらうなら秘密鍵を預けなければならない（key escrow）。 まぁ銀行に通帳とキャッシュカードを預けるみたいなもんだね。 鬼畜（笑）\nさて，ここで問題。\n 中央集権的またはアクターが構造化されたシステム 特定の「誰か」のみシステム内部にコミットできる データの分岐（fork）を許容する  という3条件のいずれかの下で Blockchain を応用したシステムを導入したら何が起きるか。\n\u0026hellip;\u0026hellip;\n正解は「不正」と「腐敗（不正の常態化）」。 何故なら PoW 達成要件を満たさないから。\n行政システムなんてまさに上の3条件に当てはまるよね。 それで Blockchain を導入するとか，システムとして「不正」と「腐敗」を許容する，と言っているに等しい。\nあー，コワイコワイ。\nブックマーク  “Blockchain and Trust” by Bruce Schneier 公開鍵暗号の秘密鍵は絶対に渡してはならない（フリじゃないよ） | Zenn  参考図書  信頼と裏切りの社会 ブルース・シュナイアー (著), 山形 浩生 (翻訳) NTT出版 2013-12-24 単行本（ソフトカバー） 4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  社会における「信頼」とは。\nreviewed by Spiegel on 2015-11-28 (powered by PA-APIv5)\n   PoW の代替となる PoS (Proof-of-Stake) というのもあるが，ここでは割愛する。 PoS をザクッと説明すると「金持ち（の行動）は信用できる」とする仕組みだ。その通貨システムの「金持ち」なら不正をしてまで信用を破壊しないだろうという，ある意味で性善説（笑） \u0026#x21a9;\u0026#xfe0e;\n Bitcoin/Blockchain の「公開鍵が誰に帰属するかについては全く関知しない」という特徴を以って，これを匿名的なサービスと言っていた人も昔はいたが， Blockchain の外側で ID (＝公開鍵) とそれが帰属する「誰か」を紐付けることができるなら， Blockchain を解析してその「誰か」がしたことは分かるわけだ。実際にそういう調査を行う会社とかも存在する。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "バイト列の同値性（『プログラミング言語 Go』読書会より）",
      "section": "golang",
      "description": "色んな方法で比較してみる",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/equality-of-byte-arrays/",
      "published": "2020-10-03T10:27:34+00:00",
      "update": "2020-10-09T22:47:11+00:00",
      "content": "「第5回『プログラミング言語Go』オンライン読書会」に参加してみたです。\n以前 Discord で某エベントに参加したことがあったけど，やっぱオンラインイベントはしんどい。 それでもメインで喋る人が決まってるから，今回は楽なほうだったかな。 Discord にしろ Zoom にしろ，オンラインでフリートーク・イベントはかなり難しいと思うのだが，みんなどうしてるんだろう。\n閑話休題 (それはさておき) 。\n今回，のっけから面白い話を聞いた。 『プログラミング言語 Go』4.2章「スライス」に書かれている\n 配列と異なりスライスは比較可能ではありませんので，二つのスライスが同じ要素で構成されているかを検査するために == は使えません。標準ライブラリは二つのバイトスライス（[]byte）を比較するために高度に最適化された bytes.Equal 関数を提供しています。しかし… プログラミング言語 Goより  という部分（強調は私がやりました）。 実際にコードを見てみると\n// Equal reports whether a and b // are the same length and contain the same bytes. // A nil argument is equivalent to an empty slice. func Equal(a, b []byte) bool { // Neither cmd/compile nor gccgo allocates for these string conversions. \treturn string(a) == string(b) } てなことになっている。 で，「これのどこが『高度に最適化』なん？」という話があったらしい。\nバージョンを遡ってみると 1.12.7 までは\n// Equal returns a boolean reporting whether a and b // are the same length and contain the same bytes. // A nil argument is equivalent to an empty slice. func Equal(a, b []byte) bool { return bytealg.Equal(a, b) } となっていた。 ちなみに internal/bytealg は内部パッケージで，中身はほぼ（アーキテクチャ毎に）アセンブラで記述されている。 実は Go 1.13 では string 周りが大幅に強化されていて，その辺の影響が出ているのかもしれない。\nそれなら，どの程度のパフォーマンスか気になるよね。 というわけで，こんなコードを用意してみた1。\npackage eq import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;testing\u0026#34; ) var ( hello1 = \u0026#34;I could tell you my pass phrase, but then I would have to kill you.\u0026#34; hello2 = \u0026#34;I could tell you my pass phrase, but then I would have to kill you.\u0026#34; helloA1 = [67]byte{0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x79, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x20, 0x79, 0x6f, 0x75, 0x2e} helloA2 = [67]byte{0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x79, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x20, 0x79, 0x6f, 0x75, 0x2e} helloS1 = []byte{0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x79, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x20, 0x79, 0x6f, 0x75, 0x2e} helloS2 = []byte{0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x79, 0x20, 0x70, 0x61, 0x73, 0x73, 0x20, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x20, 0x79, 0x6f, 0x75, 0x2e} ) func BenchmarkByteEqual1(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { if hello1 != hello2 { fmt.Printf(\u0026#34;false\u0026#34;) } } } func BenchmarkByteEqual2(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { if !bytes.Equal([]byte(hello1), []byte(hello2)) { fmt.Printf(\u0026#34;false\u0026#34;) } } } func BenchmarkByteEqual3(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { if helloA1 != helloA2 { fmt.Printf(\u0026#34;false\u0026#34;) } } } func BenchmarkByteEqual4(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { if string(helloA1[:]) != string(helloA2[:]) { fmt.Printf(\u0026#34;false\u0026#34;) } } } func BenchmarkByteEqual5(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { if !bytes.Equal(helloA1[:], helloA2[:]) { fmt.Printf(\u0026#34;false\u0026#34;) } } } func BenchmarkByteEqual6(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { if string(helloS1) != string(helloS2) { fmt.Printf(\u0026#34;false\u0026#34;) } } } func BenchmarkByteEqual7(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { if !bytes.Equal(helloS1, helloS2) { fmt.Printf(\u0026#34;false\u0026#34;) } } } hello1, hello2 は string 型，helloA1, helloA2 は byte 配列，helloS1, helloS2 は []byte 型で中身はみんな同じ。 これらを使って同値性（equallity）をチェックするのだが，内訳はこんな感じ。\n   関数名 比較手順     BenchmarkByteEqual1 string == string   BenchmarkByteEqual2 bytes.Equal([]byte(string), []byte(string))   BenchmarkByteEqual3 \u0026lt;byte array\u0026gt; == \u0026lt;byte array\u0026gt;   BenchmarkByteEqual4 string(\u0026lt;array\u0026gt;[:]) == string(\u0026lt;array\u0026gt;[:])   BenchmarkByteEqual5 bytes.Equal(\u0026lt;array\u0026gt;[:], \u0026lt;array\u0026gt;[:])   BenchmarkByteEqual6 string([]byte) == string([]byte)   BenchmarkByteEqual7 bytes.Equal([]byte, []byte)    では，実際に動かしてみようか。\n$ go test -bench ByteEqual -benchmem goos: linux goarch: amd64 pkg: sample BenchmarkByteEqual1-4 301173402\t4.04 ns/op\t0 B/op\t0 allocs/op BenchmarkByteEqual2-4 8552673\t122 ns/op\t160 B/op\t2 allocs/op BenchmarkByteEqual3-4 182939372\t6.27 ns/op\t0 B/op\t0 allocs/op BenchmarkByteEqual4-4 191359716\t6.29 ns/op\t0 B/op\t0 allocs/op BenchmarkByteEqual5-4 191511163\t6.27 ns/op\t0 B/op\t0 allocs/op BenchmarkByteEqual6-4 168382664\t7.16 ns/op\t0 B/op\t0 allocs/op BenchmarkByteEqual7-4 167058468\t7.06 ns/op\t0 B/op\t0 allocs/op PASS ok sample\t12.140s 分かりやすく表にしておく。 ちなみに私の環境では 1ns 未満は誤差の範囲なのであしからず。\n   比較手順 処理時間 (ns/op) Alloc 回数     string == string 4.04 0   bytes.Equal([]byte(string), []byte(string)) 122.00 2   \u0026lt;byte array\u0026gt; == \u0026lt;byte array\u0026gt; 6.27 0   string(\u0026lt;array\u0026gt;[:]) == string(array\u0026gt;[:]) 6.29 0   bytes.Equal(array\u0026gt;[:], \u0026lt;array\u0026gt;[:]) 6.27 0   string([]byte) == string([]byte) 7.16 0   bytes.Equal([]byte, []byte) 7.06 0    string → []byte へのキャスト時にアロケーションが発生している点に注意。\nつか string 同士の比較処理が速いな！ 配列と slice で若干差が出るのは仕方ないが，元が同じ型なら殆ど差がないようだ。 まぁ，これなら確かに\nfunc Equal(a, b []byte) bool { return string(a) == string(b) } でもいっか，って気になるよな。\nブックマーク   第５回「プログラミング言語Go」オンライン読書会 - Mikke\u0026rsquo;s blog\n  【改訂版】文字列連結はどれが速い？\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   ちなみに “I could tell you my pass phrase, but then I would have to kill you.” という物騒なフレーズは Simson Garfinkel 氏の『PGP』に載っていたパスフレーズの事例である（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 製のツールとパッケージをまとめてアップデートした",
      "section": "release",
      "description": "Update gpgpdump, books-data, gnkf, pa-api, aozora-api, openbd-api, gocli, and errs packages",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/10/released-tools-and-packages-by-golang/",
      "published": "2020-10-02T07:40:54+00:00",
      "update": "2020-10-02T07:43:41+00:00",
      "content": "GitHub リポジトリにある Go 言語製のツールやパッケージについて GitHub Actions で CI (Continuous Integration) を回す目処が立ったので，設定を変更しリリースし直すことにした。 今回リリースしたツール・パッケージのうち主なものは以下の通り。\n Release v0.9.1 · spiegel-im-spiegel/gpgpdump · GitHub Release v0.5.8 · spiegel-im-spiegel/books-data · GitHub Release v0.1.3 · spiegel-im-spiegel/gnkf · GitHub Release v0.7.2 · spiegel-im-spiegel/pa-api · GitHub Release v0.2.6 · spiegel-im-spiegel/aozora-api · GitHub Release v0.2.6 · spiegel-im-spiegel/openbd-api · GitHub Release v0.10.3 · spiegel-im-spiegel/gocli · GitHub Release v1.0.2 · spiegel-im-spiegel/errs · GitHub  若干 lint に叱られたり軽微なバグを指摘されたりしたものもあるが，機能上の追加・変更はない。\nそれじゃあ，次のステージに行きましょう♪\nブックマーク   OpenPGP パケットを可視化する gpgpdump\n  書籍データ取得ツール books-data\n  GNKF: Network Kanji Filter by Golang\n  Go 言語用 PA-API v5 クライアント・パッケージ\n  Go 言語用青空文庫 API クライアント・パッケージ\n  Go 言語用 openBD クライアント・パッケージ\n  Go 言語用 CLI プログラミング支援パッケージ\n  Go 言語用エラーハンドリング・パッケージ\n  golangci-lint を GitHub Actions で使う\n  Go 依存パッケージの脆弱性検査\n  GitHub Actions でクロス・コンパイル（GoReleaser 編）\n  Go のコードでも GitHub Code Scanning が使えるらしい\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n  射手座☆午後九時Don\u0026#39;t be late シェリル・ノーム starring May\u0026#39;n (メインアーティスト) FlyingDog 2008-05-08 (Release 2017-01-16) MP3 ダウンロード B01MZ8UA8O (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  移動中に聴くとノリノリになれる（笑）\nreviewed by Spiegel on 2020-10-02 (powered by PA-APIv5)\n "
    }
  ]
}
