{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "GnuPG 2.3.8 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "1件の脆弱性が修正されている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/11/gnupg-2_3_8-is-released/",
      "published": "2022-11-04T01:12:53+00:00",
      "update": "2022-11-04T01:13:12+00:00",
      "content": "毎度遅まきながらで申し訳ないが GnuPG 2.3.8 がリリースされている。\n[Announce] [CVE-2022-3515] GnuPG / Libksba Security Advisory [Announce] GnuPG 2.3.8 released 今回は1件の脆弱性修正を含んでいる。\nCVE-2022-3515 A severe bug has been found in [Libksba] , the library used by GnuPG for parsing the ASN.1 structures as used by S/MIME. The bug affects all versions of [Libksba] before 1.6.2 and may be used for remote code execution. via [CVE-2022-3515] GnuPG / Libksba Security Advisory The major user of Libksba is /gpgsm/, the S/MIME cousin of /gpg/. There it is used to parse all kind of input data, in particular signed or encrypted data in files or in mails. Feeding a user with malicious data can thus be easily achieved.\nA second user of Libksba is /dirmngr/, which is responsible for loading and parsing Certificate Revocation Lists (CRLs) and for verifying certificates used by TLS (i.e. https connections). Mounting an attack is a bit more complex but can anyway be easily done using a rogue web server to serve a Web Key Directory, certificates, or CRLs.\nAn exploit is not yet publicly known but very straightforward to create for experienced crooks.\nvia [CVE-2022-3515] GnuPG / Libksba Security Advisory 今回の脆弱性について GnuPG 側は以下のように見積もっている。\nCVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H 深刻度: 重要 (Score: 8.1) 基本評価基準 評価値 攻撃元区分 ネットワーク 攻撃条件の複雑さ 高 必要な特権レベル 不要 ユーザ関与レベル 不要 スコープ 変更なし 機密性への影響 高 完全性への影響 高 可用性への影響 高 GnuPG 関連パッケージ GnuPG 関連の各パッケージのバージョンは以下の通り（数字は大体のビルド順）。\n# パッケージ名 バージョン 公開日 更新 1 Libgpg-error 1.45 2022-10-07 2 Libgcrypt 1.8.9 (LTS) 2022-02-07 Libgcrypt 1.10.1 2022-03-28 3 Libassuan 2.5.5 2021-03-22 4 Libksba 1.6.2 2021-10-07 5 nPth 1.6 2018-07-16 6 ntbTLS 0.3.1 2022-04-07 7 GnuPG 2.2.40 (LTS) 2022-10-10 GnuPG 2.3.8 2022-10-13 現在 GnuPG には2.2系と2.3系があり1，2.2系は LTS 版に位置付けられている。 2.3系では AEAD (Authenticated Encryption with Associated Data) 等 RFC 4880bis で検討されている機能が実装されているので，最新機能を試したいのであればこちらを入れるとよいだろう。 なお2.2系は少なくとも2024年末まではサポートが続けられる予定である。 通常運用であれば，当面は2.2系でも問題ない（ECC も対応してるよ）。\nアップデートは計画的に。\nブックマーク OpenPGP の実装 参考図書 暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n厳密には1.4系もあるが，これは legacy 版と位置付けられており，よほどのバグか脆弱性がない限りは更新されない。もし今だに1.4系（あるいは既にサポートされていない2.0/2.1系）を使っているのなら2.2系以降にアップグレードすることを強くお勧めする。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Go 1.19.3 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は1件の脆弱性修正を含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/11/go-1_19_3-is-released/",
      "published": "2022-11-04T00:40:28+00:00",
      "update": "2022-11-04T00:41:21+00:00",
      "content": "予告通り 2022-11-01 (現地時間) に Go 1.19.3 がリリースされた。\n[security] Go 1.19.3 and Go 1.18.8 are released 今回は1件の脆弱性修正を含んでいる。\ngo1.19.3 (released 2022-11-01) includes security fixes to the os/exec and syscall packages, as well as bug fixes to the compiler and the runtime. See the Go 1.19.3 milestone on our issue tracker for details. via Release History - The Go Programming Language CVE-2022-41716 syscall, os/exec: unsanitized NUL in environment variables On Windows, syscall.StartProcess and os/exec.Cmd did not properly check for invalid environment variable values. A malicious environment variable value could exploit this behavior to set a value for a different environment variable. For example, the environment variable string \u0026quot;A=B\\x00C=D\u0026quot; set the variables \u0026quot;A=B\u0026quot; and \u0026quot;C=D\u0026quot;. via Go 1.19.3 and Go 1.18.8 are released （以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.19.3.linux-amd64.tar.gz）を取ってきてインストールすることを推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.19.3.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.19.3.linux-amd64.tar.gz $ sudo mv go go1.19.3 $ sudo ln -s go1.19.3 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.19.3 linux/amd64 Windows は Scoop 経由で OK\nアップデートは計画的に。\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n"
    },
    {
      "title": "自転車の初期点検とお買い物",
      "section": "remark",
      "description": "自転車って乗ってる人間側の熱設計が結構大事だと改めて認識した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/11/initial-maintenance-of-my-bike/",
      "published": "2022-11-03T12:37:04+00:00",
      "update": "2022-11-04T02:30:11+00:00",
      "content": "自転車購入から2ヵ月経ちまして。 納車時のアドバイスに従って購入店で初期点検をお願いした。\n購入した車体ならライトメンテナンスが無料になるということで，有り難く利用した。 時間にして15分から30分ということで，そのまま待っててもよかったのだが，お店の人にことわって時間まで近所をブラブラお散歩カメラ。\nおおっ。 松江城のお堀（京橋川）でボートしてはる。\nお堀 de ボート | Flickr 時間になったので戻って精算。\n前後の変速機のワイヤ調整のみで1，他は問題なし。 ちなみに，このあと自転車に乗ったらギアチェンジがスムーズになってた。 定期点検大事。 機械が苦手なので自分じゃ（掃除するくらいで）メンテ出来ないんだよなぁ。\nついでというか，かねてから懸案だったヘルメットとグローブを購入した。\nメットとグローブ買うた | Flickr 一応 GIANT 純正品。 どっかのサイトで「自転車用のアクセサリを買うなら購入店で買って利益に貢献しなはれ」とあったので（うろ覚え），実行してみた（笑）\nメットは色気のないデザインで視認性が（多分）高い白で。 グローブはちゃんと手のひら部分にパッドが入ってるやつね。 実は若い頃にロードバイクでコケたときにグローブしてたおかげで軽傷で済んだ経験があるのよ。 グローブはズタボロになって買い替えたけど。\n最近，ようやく車体のコントロールが（それなりに）できるようになって，ゆっくり走ってるつもりでも気がついたら結構スピードが出てたりするので「そろそろちゃんとしよう」ということで。 たしか今年（2022年公布，施行はまだ？）の道路交通法改正で全ての自転車利用者に対してヘルメット着用の努力義務が課せられるようになると聞いている。 気ぃつけなはれや。\n自転車の安全利用の促進について - 内閣府（PDF） そういや，昔から「なんで自転車のメットってスカスカ穴が開いてるんだろう」と思ってたが，かぶって自転車こいでみて分かったわ。 穴がなかったら熱がこもって死ぬ。\nさて。 自転車を受け取った後はあちこちをフラフラと。 久しぶりに松江駅の蕎麦屋で山かけ蕎麦を食った。\nやっぱり山かけ蕎麦が好き | Flickr そしてユニクロでインナー代わりの白い長袖Tシャツ（勤務先でも着れるやつ）と通勤用ソックスの補充。 なんかスポーツサイクルにヒートテックは向かないらしいので，普通にコットンで（笑）\n【危険】サイクリストはヒートテックを着てはいけない - YouTube 本当に久しぶりにユニクロ行ったけど，今時はセルフレジなんだね。 しかも RFID で自動精算。\nユニクロの商品タグ（RFID） | Flickr 上の写真の商品タグの左側に見える模様が RFID。\n本格的に寒くなる前にパーカかジャケットも用意しないとなぁ。 自転車って乗ってる人間側の熱設計が結構大事だと改めて認識した。\nブックマーク 外出先でのヘルメットはどうしていますか？ – CyclingEX CLASSIC ユニクロ ブロックテックパーカ（2022年購入モデル）を雨と雪の中で着てみた結果… - I AM A DOG 自転車を安全に乗ろう！街中に潜む危険箇所をご紹介！ - YouTube 新車のチェーンやワイヤは延びやすいと事前に言われてたので，想定通り。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "2022-10-30 のブックマーク",
      "section": "bookmarks",
      "description": "「メイカーの“名もなき仕事”とレイバーの時間」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/10/30-bookmarks/",
      "published": "2022-10-30T11:14:46+00:00",
      "update": "2022-10-30T11:14:53+00:00",
      "content": "リリース情報 [Announce] GnuPG 2.3.8 released [Announce] [CVE-2022-3515] GnuPG / Libksba Security Advisory Release v3.3.0 · golangci/golangci-lint-action · GitHub Release Release Wasmtime 2.0.0 · bytecodealliance/wasmtime · GitHub 過去のタブ・他端末のタブを一覧する「Firefox View」を搭載した「Firefox 106」が安定版に - 窓の杜 Release v1.6.1 · spf13/cobra · GitHub Release v1.2022.12 · plantuml/plantuml · GitHub Release 1.32.2 · tailscale/tailscale · GitHub Release v0.105.0 · gohugoio/hugo · GitHub Release Release 2.7.4 · keepassxreboot/keepassxc · GitHub PuTTY: a free SSH and Telnet client 0.78 がリリースされている Release v0.78 (2022-10-30) · ranvis/putty · GitHub セキュリティ＆プライバシー関連 Chromeのシークレットブラウジングは「まったくシークレットじゃない」とGoogle社内でも信頼されていなかった - GIGAZINE How a Microsoft blunder opened millions of PCs to potent malware attacks | Ars Technica Microsoft’s out-of-date driver list left Windows PCs open to malware attacks for years - The Verge Microsoftの古いドライバーリストのせいで何百万台ものWindows PCが何年もの間マルウェア攻撃にさらされていたことが発覚 - GIGAZINE Why Signal won’t compromise on encryption, with president Meredith Whittaker - The Verge Interview with Signal’s New President - Schneier on Security 米国立研究所が描く人間とAIのディストピアな「バディ・コップ」ファンタジー | p2ptk[.]org 広告ブロッカーの99.99％が使っているフィルター「EasyList」がDDoS攻撃を受けて配信不能に - GIGAZINE 「AVG」「アバスト」アンチウイルスが「Thunderbird」のアップデートを妨げる問題 - 窓の杜 Git security vulnerabilities announced | The GitHub Blog 「Git」に任意コード実行などへつながるおそれのある脆弱性が2件 - 窓の杜 欧州委員会は「AIによるプライベート・コミュニケーションの監視」が何を引き起こすかを理解していない、欧州議会議員は提案を否決せよ | p2ptk[.]org Release v1.50.1 · golangci/golangci-lint · GitHub EUに暗号化を破壊させてはならない――我々の自由と権利を奪う暗号化の破壊 | p2ptk[.]org 「Text4Shell」の影響が「Docker」にも拡大 ～悪用が容易な任意コード実行の脆弱性 - 窓の杜 GitHubでホストされていた「Windowsのロゴ画像」にマルウェアを隠して感染させるという恐るべき手口が発覚 - GIGAZINE 安全なデータ移転にデータ・ミニマイゼーションが不可欠な理由 | p2ptk[.]org 暗号化とはなにか、なぜケニア人は暗号化を使い続けねばならないのか | p2ptk[.]org OpenSSL warns of critical security vulnerability with upcoming patch | ZDNET Critical Vulnerability in Open SSL - Schneier on Security 知財関連 著作権（資産）から得られる利益を最大化するための「盗作」訴訟 | p2ptk[.]org 英国オンライン安全法は“公序良俗”に反する表現を検閲する？ | p2ptk[.]org 著作権侵害の嵐に翻弄されるストームチェイサー：いかにして独立系クリエイターの権利・収益は“大手”に盗まれているのか | p2ptk[.]org アップロードフィルター：不当な削除、不公正な異議申し立て手続、ビッグコンテンツを優遇するシステム | p2ptk[.]org Netflixがパスワード共有にメス。サブアカウントを作れる｢共有プラン｣を来年にも開始する方針 | ギズモード・ジャパン ついにJASRAC・音楽教室が最高裁決着 論点と、判決の影響をもう一度駆け足で考えてみる　福井健策｜コラム | 骨董通り法律事務所 For the Arts 「生徒の演奏に著作権料は不要」最高裁が判決も、JASRACの営業ぶりに「権利の逸脱」「銭ゲバ」の声 | 週刊女性PRIME AI-OCRで国立国会図書館の資料をテキスト化　約1300万文字のデータセットから開発　その舞台裏に迫る - ITmedia NEWS 独最高裁：Sci-hubのブロッキングは「（文字通り）最後の手段」でなければならない | p2ptk[.]org Linux または Ubuntu に関する話題 「Linuxゲーマーのバグ報告率は平均の6倍以上」とゲーム開発者が明かす - GIGAZINE : www Azure や Windows に関する話題 「Windows 10 2022 Update」（バージョン 22H2）の一般提供が開始 - 窓の杜 「Windows 11 バージョン 22H2」は色表現でも大きく進歩 ～新API「ACM」の導入で - 窓の杜 同じディレクトリ内のタブまたはペインを開く | Microsoft Learn Go 言語関連 Go Conference mini 2022 Autumn IN SENDAI - connpass Deep dive into Vulnerability Management for Go - Google スライド Goのnet/httpのtimeoutについて - Carpe Diem CSV処理における共通処理をDecoratorパターンで実現する | フューチャー技術ブログ : 一見よさげだが gocsv は CSV データ全体を構造体配列としてメモリに読み込んでしまうのが致命的なんだよなぁ\u0026hellip; GoのTyped-nilの扱い GoでCUE言語(cuelang)使ってみた Go言語でポータブルなCI/CDパイプラインが定義可能に。「Dagger」がGo SDKを発表 － Publickey KAUCHE Loves Go - Speaker Deck Goで作ったロジックにWebUIをつけてGitHubページに公開する | フューチャー技術ブログ Java 言語関連 ［速報］オラクル、OpenJDKコミュニティにGraalVM CEのJava関連コードを寄贈すると発表。JavaOne 2022 － Publickey Release v2.7.5 · spring-projects/spring-boot · GitHub Release v3.0.0-RC1 · spring-projects/spring-boot · GitHub 天文関連 秋の夜長に考える、私たちのまわりの光のこと | 国立天文台(NAOJ) その他 ウィキペディア的に信頼できる／信頼できない情報源一覧が壮観だ - YAMDAS現更新履歴 GitHub - hymkor/smake: SMake (Make by S-expression) メイカーの“名もなき仕事”とレイバーの時間｜塚本 牧生｜note Uber Eatsが大麻の配達をカナダで開始、その他のビジネス拡大策も - GIGAZINE オラクル、PostgreSQLデータベースに最適化した専用ストレージ「Aries」を用いた、高性能なマネージドサービス「PostgreSQL Aries」を提供予定と発表。Oracle CloudWorld 2022 － Publickey YouuTubeのアルゴリズムに「やや右派推し」のバイアス、ユーザーが気付かぬその仕組みとは？ | 新聞紙学的 プラン説明 | データ便 ｜無料無制限の大容量ファイル送信サービス : 大容量のデータの受け渡しが要るようになったら試してみようかと Wasm Labsが「Wasm Worker Server」をオープンソースで公開。Node.jsやDenoのようにWebAssemblyのWorkerをイベントドリブンに実行 － Publickey グーグル、Rustで書かれたセキュアなOS「KataOS」を発表 - ZDNet Japan インターネットはFacebookではない：なぜインフラは“内容”の取り締まりに関わるべきでないのか | p2ptk[.]org DevBizOpsとCPU増強の費用対効果｜塚本 牧生｜note Unboxing fork improvements | The GitHub Blog Googleのモバイル向けNoSQL「Firestore」が秒間1万回の書き込み制限を撤廃、事実上無制限のスケーラビリティを提供。Firebase Summit 2022 － Publickey Bluesky Social : waitlist に申し込んだ。まぁ，ドーシー君はどうでもいいw Twitter創業者の立ち上げた分散型SNSプロトコル開発団体が新SNS「Bluesky」を発表 - GIGAZINE ゼロから学ぶRust システムプログラミングの基礎から線形型システムまで (KS情報科学専門書) | 高野 祐輝 |本 | 通販 | Amazon Docker DesktopがWebAssemblyランタイムを統合。コンテナと同様にWebAssemblyイメージを実行可能に － Publickey Making an SSH client the hard way · Tailscale PlantUMLをReact上でレンダリングする | フューチャー技術ブログ "
    },
    {
      "title": "Linux 版 Pinta は Snap でインストールしろ！",
      "section": "remark",
      "description": "別途 Mono 入れなくても動いた！",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/10/pinta-by-snap/",
      "published": "2022-10-30T09:22:06+00:00",
      "update": "2022-10-30T09:29:46+00:00",
      "content": "Windows の「ペイント」みたいな，機能はそんなに要らないけど簡単に描ける Ubuntu で動くお絵かきソフトが欲しい！ と常々思ってたけど Pinta ってのがいいらしい。\nLinuxでもペイントは使えるんやで - Qiita この記事に従って PPA から apt install しようとしたんだけど\n$ sudo add-apt-repository ppa:pinta-maintainers/pinta-stable リポジトリ: \u0026#39;deb https://ppa.launchpadcontent.net/pinta-maintainers/pinta-stable/ubuntu/ kinetic main\u0026#39; 概要： Note: this PPA only provides GTK2 builds of Pinta (1.7.x) and is no longer updated for Pinta 2.0 and later. Installing the flatpak or snap package is recommended instead. It is strongly recommended to also ensure that Mono 6.10 or higher is installed on your system (run `mono --version` to check), as earlier 6.x versions can produce random crashes. You can install the latest Mono version from https://www.mono-project.com/download/stable/#download-lin より詳しい情報: https://launchpad.net/~pinta-maintainers/+archive/ubuntu/pinta-stable リポジトリを追加しています。 続けるには「Enter」キーを、中止するにはCtrl-cを押してください。 とりあえず Ctrl+C で中止（笑）\nなるほど，最新バージョンは apt じゃなくて snap から入れろと。 ほんで Mono 6 が要るのか。 ふむむー。\nもう少しググってみたら，こんな記事を見つけた。\nPinta 2.0 Released, Completes Port to GTK3 \u0026amp; .NET 6 - OMG! Ubuntu! And on Windows and macOS (Pinta is cross-platform, remember) the installers now bundle all of the necessary dependencies meaning users no longer need to head off to hunt down installers for GTK or .NET/Mono themselves. The app is now notarised on macOS too. via Pinta 2.0 Released, Completes Port to GTK3 \u0026amp; .NET 6 んー？ ひょっとして Linux 版も Mono を別途入れなくても大丈夫とか？ 試してみるか。\n$ snap install pinta pinta 2.0.2 from James Carroll✪ installed おっ，普通にインストールできた（ちなみに，今の私の環境に Mono は入れてない）。\nPinta 2.0.2 こいつ，動くぞ！\nちょっと触ってみたが，日本語入力に若干難はあるものの，問題なく動いてる。 凄いな .NET 6。 別途 devel とか runtime とか入れなくていいんだ。 仕事でも .NET 6 へのリプレイス案件とかチラホラ聞くようになったし，そろそろ真面目に勉強したほうがいいか知らん。\n画面のスナップショットに印をつけたりコメントを入れたりする程度で GIMP 起動するのもなぁ，と思ってたので，これから便利に使わせていただきます。\n"
    },
    {
      "title": "Ubuntu 22.10 へのアップグレード",
      "section": "remark",
      "description": "サードパーティ・パッケージの管理に注意",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/10/upgrade-ubuntu-22_10/",
      "published": "2022-10-30T07:08:08+00:00",
      "update": "2022-10-30T11:14:53+00:00",
      "content": "Ubuntu 22.10 がリリースされた。 約半年の短期サポート。\nKinetic Kudu Release Notes - Release - Ubuntu Community Hub LTS 版ではないので，長期運用を望む場合は 22.04 LTS のままでOK。\n22.04 LTS を入れていると「Ubuntuの新バージョンの通知」が「長期サポート(LTS)版」になっているので，これを「すべての新バージョン」に変更する。\nソフトウェアとアップデート これで「ソフトウェアの更新」を開くと（最新パッケージへの更新の後） [アップグレード...] ボタンが表示される。\nソフトウェアの更新 このボタンを押下するとアップグレードが始まる1。\nアップグレードの開始 今回も特に大きな問題はなかった。\nいつものように GnuPG が古い $ gpg --version gpg (GnuPG) 2.2.35 libgcrypt 1.10.1 Copyright (C) 2022 g10 Code GmbH License GNU GPL-3.0-or-later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 ちなみに 2022-10-30 時点で GnuPG v2.2 系の最新は 2.2.40 である。 相変わらずだなぁ。 まぁ Libgcrypt が 1.10 系になっているだけマシと思うことにしよう。\nはやく 2.3 系にアップグレードしてくれよ。\nOpenSSH と OpenSSL $ ssh -V OpenSSH_9.0p1 Ubuntu-1ubuntu7, OpenSSL 3.0.5 5 Jul 2022 んー。 ちょっと古い気がするが，バックポートパッチがあたっていると信じよう（笑）\nところで OpenSSL は v3.0.6 がリリースされたあと一度引っ込めている。 どうも 2022-11-01 UTC に改めてセキュリティ・アップデートを出すようだが，今回の脆弱性はちょっとヤバいかも？ みたいな話もある。 ご注意を。\nOpenSSL Security Advisory [11 October 2022] OpenSSL warns of critical security vulnerability with upcoming patch | ZDNET ちなみに GnuPG の gpg-agent との連携は問題なかった。 よーし，うむうむ，よーし。\nOpenSSH の認証鍵を GunPG で作成・管理する gpg-agent の設定： GnuPG in Ubuntu Ubuntu で OpenSSH の鍵管理を gpg-agent に委譲する【たぶん決定版】 APT でインストールされているサードパーティ・パッケージの管理に注意 今回のアップグレードで何がありがたいって /etc/apt/sources.list.d/ ディレクトリで管理されるサードパーティ・パッケージでも可能な限り kinetic リポジトリに対応してくれるみたい。 特に PPA (Personal Package Archives) で提供されるパッケージについては全く問題なく移行できていた。 素晴らしい。\nでも，もちろん上手くいかないパッケージもあるわけで，そういうのはちまちまと手動で書き換える必要がある。\n注意しないといけないのは「ソフトウェアとアップデート」の「他のソフトウェア」で表示されなくなったサードパーティ・パッケージである。 どうも APT の標準で管理されていない電子署名鍵を使うパッケージは「他のソフトウェア」の一覧に表示されないようだ。\n「APT の標準で管理されていない電子署名鍵」については以下の拙文を参考にどうぞ。\nついに apt-key コマンドに「非推奨」のワーニングが apt-key が非推奨になったので というわけで，この機会に /etc/apt/sources.list.d/ ディレクトリの中身を棚卸しして整理することをお勧めする。\nちなみに「他のソフトウェア」の管理外になった pgAdmin4 は 2022-10-30 時点で kinetic リポジトリがまだ用意されていない orz\nブックマーク Ubuntu 22.10 日本語 Remix リリース | Ubuntu Japanese Team Ubuntu 22.04 その331 - Ubuntu 22.10へアップグレードするには・アップグレードの注意事項 - kledgeb 参考図書 スーパーユーザーなら知っておくべきLinuxシステムの仕組み Brian Ward (著), 柴田 芳樹 (翻訳) インプレス 2022-03-08 (Release 2022-03-08) 単行本（ソフトカバー） 4295013498 (ASIN), 9784295013495 (EAN), 4295013498 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元で PDF 版が買えるが，今回はセキュリティ・エリアにも持ち込めるよう紙の本を買った。Linux システムの扱い方に関するリファレンス本として優れている。最初に軽く流し読みして，必要に応じて該当項目を拾い読みしていけばいいだろう。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\n［試して理解］Linuxのしくみ　―実験と図解で学ぶOS、仮想マシン、コンテナの基礎知識【増補改訂版】 武内 覚 (著) 技術評論社 2022-10-14 (Release 2022-10-14) Kindle版 B0BG8J5QJ1 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 『Linuxのしくみ』の増補改訂版。今回は版元で PDF 版を購入した。なんと Go と Python のサンプルコードが追加されている。\nreviewed by Spiegel on 2022-10-23 (powered by PA-APIv5)\nシリコンパワー USBメモリ 32GB USB3.1 / USB3.0 亜鉛合金ボディ 防水 防塵 耐衝撃 永久保証 PS4動作確認済 Jewel J80 SP032GBUF3J80V1TJA シリコンパワー (Release 2017-02-01) Personal Computers B01NBU1OS5 (ASIN), 4712702655292 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; OS 移行用に購入。ひたすらデザインで決めた（笑） よく考えたら32GBも要らなかった。まぁ，何か使い道があるだろう。\nreviewed by Spiegel on 2019-04-21 (powered by PA-APIv5)\nコマンドラインでアップグレードする場合は sudo apt dist-upgrade でアップグレードが開始される。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "メガドライブミニ2買うた",
      "section": "remark",
      "description": "「ゆみみみっくす」は収録されませんでした。されませんでした。されませんでした",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/10/megadrive-mini-2/",
      "published": "2022-10-28T11:25:19+00:00",
      "update": "2022-10-28T11:33:53+00:00",
      "content": "メガドラミニ2の予約が始まったと聞いて Amazon のページで10秒ほど悩んで「まぁいっか」とポチったのが 2022年7月ごろ。\nよーやく来たですよ。\nメガドライブミニ２来た！ | Flickr ちっさ！ 比較対象となるものが思い浮かばず，つい机上のマウスと比べてしまいました。 ちっさ！\nHDMI 接続なので，とりあえずパソコン・モニタに仮接続。\nメガドライブミニ２接続完了 | Flickr 写真には卓上スピーカーが写ってるけど，音声はモニタから出ている（笑） やっぱ「アウトラン」の音楽は名作だよね！\n2011年のアナログ停波でテレビを捨てて以来，コンシューマ・ゲーム機で遊ぶこともなくなった。 これからもコンシューマ・ゲーム機で新作ゲームをすることはないと思うが，折角買ったんだし，メガドラミニ2でレトロゲームをちまちまやりながら昔を懐かしむとしましょうか。\n願わくば，もし「次」がありましたら「ゆみみみっくす」か「だいなあいらん」を収録してください 🙇\nブックマーク 『Beep21』メガドライブミニ２臨時増刊号 目次 (もくじ) ～Published September 30, 2022～｜Beep21｜note 『Beep21』「いろいろたぶれ22」(竹本泉)・第5回 ｜Beep21｜note : ゆみみみっくす特集！ 『Beep21』「いろいろたぶれ22」(竹本泉)・第6回｜Beep21｜note : 今回も2本立て 参考 メガドライブミニ2【Amazon.co.jp限定】ACアダプター 同梱 セガ (Release 2022-10-27) － B0B2S113PQ (ASIN), 4974365737207 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ちっさ！ 収録タイトル60本！ 当分遊べる。メガドラのカセットは挿さらない。ネットワーク機能もなし（笑） ゆっくり遊びますかねぇ\nreviewed by Spiegel on 2022-10-27 (powered by PA-APIv5)\n竹本泉・WORLD―竹本泉画集 竹本 泉 (著) 竹書房 1994-09-01 大型本 4884759222 (ASIN), 9784884759223 (EAN), 4884759222 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 竹本泉さん初のカラー画集。「なかよし」時代最初期の作品から『ねこめ〜わく』『さよりなパラレル』まで。他，小説の挿絵やゲーム「ゆみみみっくす」も収録。なんと，故和田慎二さんとの対談もあるぞ！\nreviewed by Spiegel on 2022-10-28 (powered by PA-APIv5)\nMega Drive Mini 2 - Celebration Album - 古代祐三 (アーティスト), 高西圭 (アーティスト), SEGA Sound Team (アーティスト), 古代祐三 (作曲), SEGA Sound Team (作曲), Hiro師匠 (作曲), NON (作曲), Sizlla/Megumi M./Masaki Kase (作曲), 村崎弘史 (作曲), 青木実 (作曲), 秋山守彦 (作曲), M.Shinoda (作曲), Dolphin (作曲), 上保徳彦 (作曲), Technosoft (作曲), 高西圭 (演奏) 株式会社ウェーブマスター/SOUND! SHOCK SERIES (Release 2022-10-27) CD B0BB232TSR (ASIN), 4571164386737 (EAN) MP3 で出るなら買いたい。\nreviewed by Spiegel on 2022-10-28 (powered by PA-APIv5)\n"
    },
    {
      "title": "AI は「創作者様」を引きずり下ろすか — 『人権と文化コモンズ』を流し読む",
      "section": "remark",
      "description": "この記事を含めて，ブログではこの本の感想を細切れで書いていくことになると思う。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/10/cultural-commons/",
      "published": "2022-10-23T06:06:30+00:00",
      "update": "2022-10-25T22:48:25+00:00",
      "content": "ここのところ図書館で読んでたのは山田奨治さんの『著作権は文化を発展させるのか: 人権と文化コモンズ』だったり。\n著作権は文化を発展させるのか: 人権と文化コモンズ 山田 奨治 (著) 人文書院 2021-07-29 (Release 2021-07-29) Kindle版 B099RTG3J7 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 著作権を「ユーザーの人権」という観点から捉え直す。その後 文化→コモンズ→文化コモンズ と進み，本当の意味で「文化の発展に寄与する」とはどういうことか考察していく。 reviewed by Spiegel on 2022-10-23 (powered by PA-APIv5)\nまたかとお思いでしょうが，またなんです。 だってまとまった時間をとって読書をするのに図書館は最適の空間（affordance）なんだもの。\nで，まぁ，読みながら思ったのは「これ，一回読んだだけじゃ分からんわ」だったり。 なので今のところ「完全に理解した」は諦めて「最後まで読み通す」ことに注力することにした。 なので今後は，何度か読み直すことになるだろう。\nこの記事を含めて，ブログではこの本の感想を細切れで書いていくことになると思う。 理解の不備の訂正も同様。\nユーザの「表現」 『人権と文化コモンズ』で提示されている内容は私が著作権に対して抱いている問題意識と似ている，と感じている。\n7年前に書き始めた「改訂3版： CC Licenses について」で私はこう書いている。\n著作者や出版社にとっての著作権システムとは，著作物の「独占」状態を如何にコントロールするかであった。 しかし，ユーザの場合は行動原理が異なる。それはひとことで言うなら「共有」である。 何故ならユーザはコミュニケーションの手段（メディア）として著作物（＝表現）を利用するからだ。 著作権と著作権法より 一方で『人権と文化コモンズ』では表現を行使する全ての人の「人権」という観点から著作権を捉え直すところからスタートしている。 つまり\n人間の内面は、幾多の著作物でできている（p.64） 著作権は文化を発展させるのか: 人権と文化コモンズより ユーザーの人権は、受け取った作品が身体化していることにその根拠がある（p.81） 著作権は文化を発展させるのか: 人権と文化コモンズより 著作者とユーザーの、両方の身体の中間に作品は立ち現れるのだ（p.89） 著作権は文化を発展させるのか: 人権と文化コモンズより ときて\nいま文化産業を名乗る彼らは、「文化」の「創り手＝送り手」を特権化して強力な保護を求め、ユーザーを消費者の位置に押し込めて、その自由を奪おうとしてきた。彼らのいう「文化」とは、その本質的な意味からは程遠い「消費財」でしかない。（p.153） 著作権は文化を発展させるのか: 人権と文化コモンズより とまで書いている。 私は不覚にも図書館内で笑いそうになった。\nプログラム・コードという表現 ところで『人権と文化コモンズ』ではプログラム・コードについての言及がない（読み落としがなければ）。\n現代はプログラム・コードも表現のひとつとみなされ著作権システムに組み入れられている。 「著作物」という観点でプログラム・コードが小説・音楽・絵画等と違うのは「作家性」の強度だろうか。\nたとえば「Linux は Linus Torvalds 作」みたいな感じで製品と作者がダイレクトに繋がっている場合もあるが，実際には一から十まで彼が全部プログラム・コードを書いているわけではなく，多数の参加者による製品に対する貢献（contribution）の上に成り立っている。 この辺の話は，今や古典となった「伽藍とバザール」あたりを読むのが手っ取り早いだろう。 FOSS は「バザール型」を積極的に受け入れ，ひいては IT 産業全体の構造をも変えたわけだ。\n2022年に入って AI によるコード生成支援サービスである GitHub Copilot が騒がしいが\nGive Up GitHub: The Time Has Come! - Conservancy Blog - Software Freedom Conservancy 「GitHubの利用を中止しよう」 SFCが提言、AI開発ツールに疑念 | TECH+ ソースコードの続きを自動補完するGitHub Copilotに「著作権で保護されたコードを出力している」という指摘が寄せられる - GIGAZINE GitHub Copilot の問題は「コードをパクっている」ことではなく FOSS を支える「自由のライセンス」まで洗い流され「ボクが考えたコード」みたいな顔をして何の前提もなく提示してしまうことにある（GitHub Copilot が知識ソースとしているのは GitHub 上の公開された FOSS コードである）。 こうした「どんぶり勘定」を放っておくなら Microsoft/GitHub はいずれ困った事態に直面すると思うのだが，どうだろう1。\nAI は「創作者様」を引きずり下ろすか もうひとつ AI 界隈で騒がしいのは「AI 絵画」だろうか。 こうした話は突然出てきたように思えるかもしれないが，楽曲の世界では以前からあったし，文章を書く AI みたいな製品も存在する。\nただ「AI 絵画」を含む一連が象徴するのは「機械学習技術の民主化」であろう。\nmimicのような物議然り、このフィールドはそれなりに仕組みを応用できる人がPCでも実現できる世界にすでになっているため、恐らく今後もこういうケースは続出するし、多分もう流れをせき止めることはできないと思う。良くも悪くも機械学習技術が民主化されてしまった影響。\n\u0026mdash; Hideki Saito @ メタバース技術者＆Vtuber (@hideki) August 30, 2022 例を挙げると Microsoft は GitHub Copilot と同じ技術基盤を用いて Azure 上で Dall·E 2 の提供を開始した。\n［速報］マイクロソフト、Azure OpenAI Serviceで「Dall·E 2」の提供を開始、テキストから画像を生成可能。Ignite 2022 － Publickey こうした動きは加速することはあっても巻き戻すことはもはや不可能だ。\n『人権と文化コモンズ』で著者が指摘している通りに，特権者たる「創り手＝送り手」が生み出しているものが文化とは名ばかりの「その本質的な意味からは程遠い「消費財」でしかない」のであれば，この「機械学習技術の民主化」がもたらす 改変の大量生産 は「来たるべき未来」と言うほかない。 私が連想するのはスープ缶の絵を並べたあのポップアートだが，「AI 絵画」はアレの延長線上にあるように見える。\n今まで「創作者様」として特権的な位置から生み出していた「創作物」が実は機械によって大量生産可能な「消費財」に過ぎなかったと， AI によって気付かされるわけだ。\n人が「汗をかいて」成し遂げてきたことが機械に取って代わられるなんてことは過去に幾度も繰り返されてきたし，それによって失職する人が出たり新たな職業が生まれたりするのも歴史の必然だろう。 大昔にあった「コーダー」という職業がコンピュータとソフトウェア開発環境の劇的な向上に伴って消え失せたように，将来「プログラマ」という職業もなくなるかもしれない。\n情報のデジタル符号化とインターネットの台頭は，間違いなく現代におけるパラダイムシフトと言える。 今ですら著作権システムはこれに適応できていないのに，さらに「機械学習技術の民主化」が進めばどうなってしまうのか。\n\u0026hellip;今回はこの辺で。\n参考文献 〈海賊版〉の思想‐18世紀英国の永久コピーライト闘争 山田 奨治 (著) みすず書房 2007-12-20 単行本 4622073455 (ASIN), 9784622073451 (EAN), 4622073455 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「コピーライト永久独占を目論む大書店主に挑む〈海賊出版者〉ドナルドソンの肖像。法廷闘争を軸に著作権を史的に考察する。」（帯文より）\nreviewed by Spiegel on 2018-11-13 (powered by PA-APIv5)\n伽藍とバザール 原題: The Cathedral and the Bazaar レイモンド エリック, 山形 浩生 (翻訳) 1999-04-16 (Release 2014-09-17) 青空文庫 227 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; プロジェクト杉田玄白 正式参加作品。翻訳者のページも参照のこと。今となっては古典だけどねぇ。\nreviewed by Spiegel on 2022-10-18 (powered by aozorahack)\n私個人としては GitHub Copilot 問題の関心領域は少しずれたところにある。詳しくは拙文「GitHub Copilot は貢献者から貢献を奪うか？」をどうぞ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "紙芝居用の簡易 Web サーバを Go 言語で書く【叱られ編】",
      "section": "golang",
      "description": "またまた lint に叱られる",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/simple-web-server-with-golang-3/",
      "published": "2022-10-17T13:28:28+00:00",
      "update": "2022-10-17T13:28:47+00:00",
      "content": "このネタも3回目なので強引にシリーズ化（笑）\n紙芝居用の簡易 Web サーバを Go 言語で書く 紙芝居用の簡易サーバを書く【Go 1.16 版】 紙芝居用の簡易 Web サーバを Go 言語で書く【叱られ編】 ←イマココ net.JoinHostPort 関数を使え！ これまでの2回の記事を受けて，今回はこのコードからスタート。\npackage main import ( \u0026#34;embed\u0026#34; \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io/fs\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; ) //go:embed html var assets embed.FS func main() { port := flag.Int(\u0026#34;p\u0026#34;, 3000, \u0026#34;port number\u0026#34;) host := flag.String(\u0026#34;host\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;hostname\u0026#34;) flag.Parse() addr := fmt.Sprintf(\u0026#34;%s:%d\u0026#34;, *host, *port) if len(*host) == 0 { fmt.Printf(\u0026#34;Open http://localhost%s/\\n\u0026#34;, addr) } else { fmt.Printf(\u0026#34;Open http://%s/\\n\u0026#34;, addr) } fmt.Println(\u0026#34;Press ctrl+c to stop\u0026#34;) root, err := fs.Sub(assets, \u0026#34;html\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } http.Handle(\u0026#34;/\u0026#34;, http.FileServer(http.FS(root))) if err := http.ListenAndServe(addr, nil); err != nil { fmt.Fprintln(os.Stderr, err) } } このうち，色付きの行に関連する以下の tweet を見かけた。\nGoで、pathの結合はfilepath.Joinを使えというのは広まっている気がしているけど、同様にホストとポートを:で結合するのはnet.JoinHostPortを使ってほしい。fmt.Sprintfの場合、IPv6アドレスには:が含まれるので困ることになる。\n\u0026mdash; kadota (@plan9user) October 17, 2022 なるほど。 というわけで，先程の部分を\naddr := net.JoinHostPort(*host, strconv.Itoa(*port)) に置き換えた。 これを実行すると\n$ go run main.go -host \u0026#34;127.0.0.1\u0026#34; -p 8080 Open http://127.0.0.1:8080/ Press ctrl+c to stop うんうん。 ちゃんと動くな。\nまたまた lint に叱られる 今回のコードに対して念のため lint をかけてみる。\n$ golangci-lint run --enable gosec main.go:35:12: G114: Use of net/http serve function that has no support for setting timeouts (gosec) if err := http.ListenAndServe(addr, nil); err != nil { ^ おぅふ。 そっちかよ orz\nhttp.ListenAndServe() 関数の中身を見ると\n// ListenAndServe listens on the TCP network address addr and then calls // Serve with handler to handle requests on incoming connections. // Accepted connections are configured to enable TCP keep-alives. // // The handler is typically nil, in which case the DefaultServeMux is used. // // ListenAndServe always returns a non-nil error. func ListenAndServe(addr string, handler Handler) error { server := \u0026amp;Server{Addr: addr, Handler: handler} return server.ListenAndServe() } となっている。 たしかにタイムアウト関連のフィールドがまるっと無視（つまりゼロ値が設定）されてるな。\n試しに\nif err := http.ListenAndServe(addr, nil); err != nil { fmt.Fprintln(os.Stderr, err) } を以下に置き換えてみる。\nserver := \u0026amp;http.Server{ Addr: addr, Handler: nil, } if err := server.ListenAndServe(); err != nil { fmt.Fprintln(os.Stderr, err) } これで機能は全く同じになる。 これを lint にかけてみる。\n$ golangci-lint run --enable gosec main.go:35:13: G112: Potential Slowloris Attack because ReadHeaderTimeout is not configured in the http.Server (gosec) server := \u0026amp;http.Server{ Addr: addr, Handler: nil, } おおっ。 内容が変わった。 ふむふむ。 http.Server.ReadHeaderTimeout フィールドに値を設定しろということか。\nちなみに ReadHeaderTimeout は，名前の通り，リクエストヘッダ読み込み時のタイムアウト時間を指定する time.Duration 型のフィールドで，ゼロ値がセットされているとタイムアウトが設定されないらしい。 つまり ReadHeaderTimeout フィールドは，悪意を持った巨大リクエストヘッダを読み込まされることで処理全体が stall しないようにするための措置のようだ。\nというわけで書き直す。\nserver := \u0026amp;http.Server{ Addr: addr, Handler: nil, ReadHeaderTimeout: 3 * time.Second, } if err := server.ListenAndServe(); err != nil { fmt.Fprintln(os.Stderr, err) } 3秒という値には特に意味はない。 どのくらいが適当なのかねぇ。\nとにかく，これで問題なく動作することを確認した後，3たび lint をかけてみる。\n$ golangci-lint run --enable gosec なんとか lint は通ったようだ。\n余談だが http.Server.Handler フィールドにゼロ値（＝nil）がセットされていると http.DefaultServeMux が既定のハンドラとして使われる。 また http.Handle() 関数の中身は\n// Handle registers the handler for the given pattern // in the DefaultServeMux. // The documentation for ServeMux explains how patterns are matched. func Handle(pattern string, handler Handler) { DefaultServeMux.Handle(pattern, handler) } となっていて http.DefaultServeMux にハンドラを登録していることが分かる。 さらに http.DefaultServeMux は\n// DefaultServeMux is the default ServeMux used by Serve. var DefaultServeMux = \u0026amp;defaultServeMux var defaultServeMux ServeMux と定義されている。 なので，先程のコードは\nserverMux := http.NewServeMux() serverMux.Handle(\u0026#34;/\u0026#34;, http.FileServer(http.FS(root))) server := \u0026amp;http.Server{ Addr: addr, Handler: serverMux, ReadHeaderTimeout: 3 * time.Second, } if err := server.ListenAndServe(); err != nil { fmt.Fprintln(os.Stderr, err) } と等価だ。 こちらのほうが却って分かりやすいかもしれない。\nCtrl+C でサーバを Graceful にシャットダウンする http.Server のドキュメントに Ctrl+C の SIGNAL を受信したら Shutdown() メソッドを走らせて graceful にシャットダウンするサンプルが載っていたので，それを参考に組み込んで今回の最終コードとしてみた。 全体としてはこんな感じでどうだろう。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;embed\u0026#34; \u0026#34;errors\u0026#34; \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io/fs\u0026#34; \u0026#34;net\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/signal\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;time\u0026#34; ) //go:embed html var assets embed.FS func main() { port := flag.Int(\u0026#34;p\u0026#34;, 3000, \u0026#34;port number\u0026#34;) host := flag.String(\u0026#34;host\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;hostname\u0026#34;) flag.Parse() addr := net.JoinHostPort(*host, strconv.Itoa(*port)) if len(*host) == 0 { fmt.Printf(\u0026#34;Open http://localhost%s/\\n\u0026#34;, addr) } else { fmt.Printf(\u0026#34;Open http://%s/\\n\u0026#34;, addr) } fmt.Println(\u0026#34;Press ctrl+c to stop\u0026#34;) root, err := fs.Sub(assets, \u0026#34;html\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } serverMux := http.NewServeMux() serverMux.Handle(\u0026#34;/\u0026#34;, http.FileServer(http.FS(root))) server := \u0026amp;http.Server{ Addr: addr, Handler: serverMux, ReadHeaderTimeout: 3 * time.Second, } idleConnsClosed := make(chan struct{}) go func() { defer close(idleConnsClosed) sigint := make(chan os.Signal, 1) signal.Notify(sigint, os.Interrupt) \u0026lt;-sigint if err := server.Shutdown(context.Background()); err != nil { fmt.Fprintln(os.Stderr, \u0026#34;shutdown error:\u0026#34;, err) return } fmt.Println(\u0026#34;\\ngraceful shutdown\u0026#34;) }() if err := server.ListenAndServe(); !errors.Is(err, http.ErrServerClosed) { if err != nil { fmt.Fprintln(os.Stderr, \u0026#34;server error:\u0026#34;, err) } return } \u0026lt;-idleConnsClosed } これを実行する。\n$ go run main.go -host \u0026#34;127.0.0.1\u0026#34; -p 8080 Open http://127.0.0.1:8080/ Press ctrl+c to stop ^C graceful shutdown Ctrl+C でちゃんとシャットダウンしてるかな。 よしよし。\nブックマーク Goのnet/httpのtimeoutについて - Carpe Diem 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n"
    },
    {
      "title": "Android 版 Signal が SMS 対応を取りやめる話",
      "section": "remark",
      "description": "まぁ，これはしょうがない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/10/signal-will-remove-support-for-sms-text-messages-on-android/",
      "published": "2022-10-16T12:51:56+00:00",
      "update": "2022-10-16T12:52:58+00:00",
      "content": "先日 Signal が Android 版の SMS 対応を取りやめる旨の記事を公開した。\nSignal \u0026raquo; Blog \u0026raquo; Removing SMS support from Signal Android (soon) 私も TextSecure の頃から SMS の既定アプリを切り替えて運用してる。 確かに SMS の通信経路にはセキュリティ・リスクがあるが，メッセージング・アプリは相手がいてはじめて成立するものだし， SMS の通信内容をローカルでは暗号化して保存してくれるので「素の SMS アプリよりはマシ」程度で使っていた。\nしかし，ここに来て Signal をして We have now reached the point where SMS support no longer makes sense とまで言わしめている。\nSignal が SMS への対応を取りやめる理由として3つ挙げている。 まずひとつめ。\nThe most important reason for us to remove SMS support from Android is that plaintext SMS messages are inherently insecure. They leak sensitive metadata and place your data in the hands of telecommunications companies. With privacy and security at the heart of what we do, letting a deeply insecure messaging protocol have a place in the Signal interface is inconsistent with our values and with what people expect when they open Signal. via Removing SMS support from Signal Android (soon) まぁ，これはそうだよねって話。\nふたつめはコスト。\nBack when we started supporting plaintext SMS messaging things were different. Data plans were much more expensive generally, and were totally inaccessible in many parts of the world. Now, data plans are cheaper and far more ubiquitous than they were nearly a decade ago. In a reversal, the cost of sending SMS is now prohibitively high in many parts of the world. This brings us to our second reason: we’ve heard repeatedly from people who’ve been hit with high messaging fees after assuming that the SMS messages they were sending were Signal messages, only to find out that they were using SMS, and being charged by their telecom provider. This is a terrible experience with real consequences. via Removing SMS support from Signal Android (soon) まじか。 そりゃあ，アカンね。\nみっつめは UX の観点から。\nThird, there are serious UX and design implications to inviting SMS messages to live beside Signal messages in the Signal interface. It’s important that people don’t mistake SMS messages sent or received via the Signal interface as secure and private when in fact they are not. And while we flag the difference between them in the app, we can only do so much on the design side to prevent such misunderstandings. via Removing SMS support from Signal Android (soon) というわけで\nAfter much discussion, we determined that we can no longer continue to invest in accommodating SMS in the Android app while also dedicating the resources we need to make Signal the best messenger out there. via Removing SMS support from Signal Android (soon) という結論に至ったそうな。 まぁ，これはしょうがない。 SMS アプリはキャリアが用意しているものに戻すか。\nところで最初の理由で SMS が inherently insecure であるとはどういうことか。 これに関しては以下の記事が参考になる。\nUsing Your Phone in Times of Crisis | Electronic Frontier Foundation 危機的状況下でのモバイルネットワークの使用がもたらすセキュリティリスク | p2ptk[.]org 原文は2022年3月に公開されたものだが，今回の Signal の発表を受けて p2ptk.org の中の人が翻訳記事を公開してくださった。 ありがたや 🙇\nぶっちゃけていうと SMS というのは 2G 時代の遺物を継承したもので「個人のセキュリティやプライバシーなんか知ったことか」というつくりになっている。\n特に、最古の携帯電話ネットワークの2G通信では、通話やテキストメッセージは簡単に傍受されてしまう。そのため、我々はAppleとGoogleに対し、ユーザが（訳注：AndroidやiOSで）2Gをオフにできる機能を提供するよう要請してきた。Googleは最新の端末にこのオプションを導入したが、ロシアとウクライナではほぼ利用できない。またAppleは未だに対応していない。\n我々は可能な限り2Gの利用をやめるよう促してきたが、3G、4G、5Gだからセキュアだというわけではない。とりわけ、音声とテキスト通信にとってはセキュアなオプションとは言えない。これらのネットワークでは、通信がエンドツーエンドで暗号化されていないため、通信事業者を含め、通信の傍受者が通信内容を見聞きできてしまう。\n危機的状況下でのモバイルネットワークの使用がもたらすセキュリティリスクより えー。 Apple って未だにそんなんなの？ まぁ，そういうわけで\nあなたがどこに住んでいようと、特にロシアとウクライナにおいては、政府当局からあなたの通信のプライバシーを守るために、電話やSMSに依存してはならない。 危機的状況下でのモバイルネットワークの使用がもたらすセキュリティリスクより となるわけだ。 これって必然的に\n2要素認証（2FA：アカウントにログインする際に取得するコード）については、できる限りSMSではなくアプリを使用することを推奨する。 危機的状況下でのモバイルネットワークの使用がもたらすセキュリティリスクより という話になるのだが，今だに SMS でシークレットを送りつけるあのサービスやあのサービスは個人のセキュリティやプライバシーについてどう考えているか知りたいものである。 あとは SP 800-63-3 を改訂して，はっきり SMS は Authenticator としては deprecated だと言ってもらえるとみんな諦めがつくと思うのだが（笑）\nブックマーク Signal will remove support for SMS text messages on Android Authenticator と AAL 参考文献 情報セキュリティ技術大全―信頼できる分散システム構築のために ロス アンダーソン (著), Anderson,Ross J. (原著), トップスタジオ (翻訳) 日経BP 2002-09-07 単行本 4822281426 (ASIN), 9784822281427 (EAN), 4822281426 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; セキュリティ管理者をやってた頃は，これで勉強しました。絶版だよなぁ，これ。名著なのに。時事的な情報は古いが，今でも十分通用する内容だと思う。誰か（日経BP以外）電子化して！\nreviewed by Spiegel on 2020-01-18 (powered by PA-APIv5)\n"
    }
  ]
}
