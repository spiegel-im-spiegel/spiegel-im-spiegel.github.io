{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "io/ioutil の非推奨化について",
      "section": "golang",
      "description": "Refactoring は計画的に。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/deprecation-of-ioutil/",
      "published": "2021-02-21T03:06:59+00:00",
      "update": "2021-02-21T03:08:48+00:00",
      "content": "先日リリースされた Go 1.16 リリースにおける大きな変更のひとつとして io/ioutil パッケージの非推奨化（deprecation）が挙げられる。 Deprecation といっても近い将来に（少なくともバージョン 1.x の間は）廃止されるわけではないのだが， io/ioutil パッケージは徐々にメンテナンスされなくなる可能性があるため，互換関数（または変数）へ置き換えていくことが推奨されている。\n対象となる変数・関数は以下の通り。\n   1.16 以降 非推奨 1.16 以降 推奨     ioutil.Discard io.Discard   ioutil.NopCloser() io.NopCloser()   ioutil.ReadAll() io.ReadAll()   ioutil.ReadDir() os.ReadDir()   ioutil.ReadFile() os.ReadFile()   ioutil.TempDir() os.MkdirTemp()   ioutil.TempFile() os.CreateTemp()   ioutil.WriteFile() os.WriteFile()    このうち ioutil.Discard, ioutil.NopCloser(), ioutil.ReadAll(), ioutil.ReadFile(), ioutil.WriteFile() については置き換え後の変数・関数のラッパーとして再実装されているので，特に気にする必要はないだろう。 何かのついでに refactoring していけばよい。\npackage ioutil import ( \u0026#34;io\u0026#34; \u0026#34;io/fs\u0026#34; \u0026#34;os\u0026#34; \u0026#34;sort\u0026#34; ) // ReadAll reads from r until an error or EOF and returns the data it read. // A successful call returns err == nil, not err == EOF. Because ReadAll is // defined to read from src until EOF, it does not treat an EOF from Read // as an error to be reported. // // As of Go 1.16, this function simply calls io.ReadAll. func ReadAll(r io.Reader) ([]byte, error) { return io.ReadAll(r) } // ReadFile reads the file named by filename and returns the contents. // A successful call returns err == nil, not err == EOF. Because ReadFile // reads the whole file, it does not treat an EOF from Read as an error // to be reported. // // As of Go 1.16, this function simply calls os.ReadFile. func ReadFile(filename string) ([]byte, error) { return os.ReadFile(filename) } // WriteFile writes data to a file named by filename. // If the file does not exist, WriteFile creates it with permissions perm // (before umask); otherwise WriteFile truncates it before writing, without changing permissions. // // As of Go 1.16, this function simply calls os.WriteFile. func WriteFile(filename string, data []byte, perm fs.FileMode) error { return os.WriteFile(filename, data, perm) } // NopCloser returns a ReadCloser with a no-op Close method wrapping // the provided Reader r. // // As of Go 1.16, this function simply calls io.NopCloser. func NopCloser(r io.Reader) io.ReadCloser { return io.NopCloser(r) } // Discard is an io.Writer on which all Write calls succeed // without doing anything. // // As of Go 1.16, this value is simply io.Discard. var Discard io.Writer = io.Discard ioutil.TempDir() と ioutil.TempFile() においては，入出力のインタフェースは os.MkdirTemp(), os.CreateTemp() と完全互換と言えるが，内部のロジックが微妙に異なる。 もしかしたら（並行処理下で使う場合など）何らかの検証が必要かもしれない。\nまぁ os.MkdirTemp(), os.CreateTemp() のほうが出来がいいと思うけど。 可能なら早めに置き換えたほうがいいだろう。\n問題は ioutil.ReadDir() と os.ReadDir() の差異だ。\nGo 1.16 ioutil.ReadDir() は以下のように実装されている。\n// ReadDir reads the directory named by dirname and returns // a list of fs.FileInfo for the directory\u0026#39;s contents, // sorted by filename. If an error occurs reading the directory, // ReadDir returns no directory entries along with the error. // // As of Go 1.16, os.ReadDir is a more efficient and correct choice: // it returns a list of fs.DirEntry instead of fs.FileInfo, // and it returns partial results in the case of an error // midway through reading a directory. func ReadDir(dirname string) ([]fs.FileInfo, error) { f, err := os.Open(dirname) if err != nil { return nil, err } list, err := f.Readdir(-1) f.Close() if err != nil { return nil, err } sort.Slice(list, func(i, j int) bool { return list[i].Name() \u0026lt; list[j].Name() }) return list, nil } ここで fs.FileInfo 型は Go 1.16 で追加された io/fs パッケージで定義されているが，中身は 1.15 までの os.FileInfo 型と全く同じである。\n// A FileInfo describes a file and is returned by Stat. type FileInfo interface { Name() string // base name of the file  Size() int64 // length in bytes for regular files; system-dependent for others  Mode() FileMode // file mode bits  ModTime() time.Time // modification time  IsDir() bool // abbreviation for Mode().IsDir()  Sys() interface{} // underlying data source (can return nil) } // A FileMode represents a file\u0026#39;s mode and permission bits. // The bits have the same definition on all systems, so that // information about files can be moved from one system // to another portably. Not all bits apply to all systems. // The only required bit is ModeDir for directories. type FileMode uint32 なお Go 1.16 の os.FileInfo 型は fs.FileInfo の type alias として再定義されている。\npackage os import ( \u0026#34;io/fs\u0026#34; \u0026#34;syscall\u0026#34; ) // A FileInfo describes a file and is returned by Stat and Lstat. type FileInfo = fs.FileInfo 一方 os.ReadDir() は以下のように実装されている。\n// A DirEntry is an entry read from a directory // (using the ReadDir function or a File\u0026#39;s ReadDir method). type DirEntry = fs.DirEntry // ReadDir reads the named directory, // returning all its directory entries sorted by filename. // If an error occurs reading the directory, // ReadDir returns the entries it was able to read before the error, // along with the error. func ReadDir(name string) ([]DirEntry, error) { f, err := Open(name) if err != nil { return nil, err } defer f.Close() dirs, err := f.ReadDir(-1) sort.Slice(dirs, func(i, j int) bool { return dirs[i].Name() \u0026lt; dirs[j].Name() }) return dirs, err } ここで fs.DirEntry 型は以下のように定義されている。\n// A DirEntry is an entry read from a directory // (using the ReadDir function or a ReadDirFile\u0026#39;s ReadDir method). type DirEntry interface { // Name returns the name of the file (or subdirectory) described by the entry.  // This name is only the final element of the path (the base name), not the entire path.  // For example, Name would return \u0026#34;hello.go\u0026#34; not \u0026#34;/home/gopher/hello.go\u0026#34;.  Name() string // IsDir reports whether the entry describes a directory.  IsDir() bool // Type returns the type bits for the entry.  // The type bits are a subset of the usual FileMode bits, those returned by the FileMode.Type method.  Type() FileMode // Info returns the FileInfo for the file or subdirectory described by the entry.  // The returned FileInfo may be from the time of the original directory read  // or from the time of the call to Info. If the file has been removed or renamed  // since the directory read, Info may return an error satisfying errors.Is(err, ErrNotExist).  // If the entry denotes a symbolic link, Info reports the information about the link itself,  // not the link\u0026#39;s target.  Info() (FileInfo, error) } つまり返り値から fs.FileInfo の情報を取り出すには fs.DirEntry.Info() 関数を使い，さらに返り値の error を評価する必要がある。\nこのように ioutil.ReadDir() と os.ReadDir() では返り値とその評価方法が異なるため，単純な置き換えではなく，若干のコードの書き換えが必要となる。\nRefactoring は計画的に。\nブックマーク  #golang io/ioutil の非推奨化（deprecation）について  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "2021-02-21 のブックマーク",
      "section": "bookmarks",
      "description": "「アメリカでもプログラミングスクールに通ったがうまくいかなかった話があった」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/02/21-bookmarks/",
      "published": "2021-02-21T01:47:36+00:00",
      "update": "2021-02-21T01:48:12+00:00",
      "content": "リリース情報  Release Git for Windows 2.30.1 · git-for-windows/git · GitHub Release v1.1.2 · spf13/cobra · GitHub Release v1.1.3 · spf13/cobra · GitHub Release v1.0.12 · sonatype-nexus-community/nancy · GitHub Release v0.4.0 · zetamatta/go-readline-ny · GitHub SmartGit 20.2.3 – syntevo blog Release v1.0.15 · sonatype-nexus-community/nancy · GitHub Release v0.4.1 · zetamatta/go-readline-ny · GitHub Release v0.4.2 · zetamatta/go-readline-ny · GitHub Release Release v5.8.9 · mattn/jvgrep · GitHub Release v0.4.3 · zetamatta/go-readline-ny · GitHub Release v1.37.0 · golangci/golangci-lint · GitHub Release 8.9.1 · mermaid-js/mermaid · GitHub Release 4.4.9_3 · zetamatta/nyagos · GitHub Hugo 0.81.0: The Smorgasbord Edition | Hugo  Release v0.81.0 · gohugoio/hugo · GitHub   Release v1.37.1 · golangci/golangci-lint · GitHub  バベルのインターネット  問題はビッグテックが免責されていることじゃあない、寡占こそが問題なんだ | P2Pとかその辺のお話R Twitterがインド当局のさらなる警告を受け500以上のアカウントを停止 | TechCrunch Japan  セキュリティ＆プライバシー関連  SonicWall Zero-Day - Schneier on Security Malicious script steals credit card info stolen by other hackers  Web Credit Card Skimmer Steals Data from Another Credit Card Skimmer - Schneier on Security   米国で発生した浄水システムの不正操作についてまとめてみた - piyolog Bloomberg - Are you a robot? Chinese Supply-Chain Attack on Computer Systems - Schneier on Security Attack against Florida Water Treatment Facility - Schneier on Security PostgreSQL 13.2、12.6、11.11、10.16、9.6.21、9.5.25公開 | TECH+ 「Clubhouse」の音声データが中国当局に漏れる可能性が浮上、開発元はセキュリティ強化を実施 | TechCrunch Japan FileZenの脆弱性（CVE-2021-20655）に関する注意喚起 Barcode Scanner Android App Pushed Malware Onto Millions  Malicious Barcode Scanner App - Schneier on Security   Browser Tracking Using Favicons - Schneier on Security AWSアカウント攻撃ツールをSalesforceがリリースするも速攻で削除される - GIGAZINE 危険なバッファオーバーフロー脆弱性に対処した「Python 3.6.13/3.7.10」が公開 - 窓の杜 ISC BIND 9の脆弱性（CVE-2020-8625）に関する注意喚起 なぜ拡張機能にマルウェアが仕込まれる問題が後を絶たないのか？ - GIGAZINE  知財関連  MP3・海賊版・アップルはいかにして音楽業界を変えてきたのか | P2Pとかその辺のお話R  Linux または Ubuntu に関する話題  Ubuntu 20.04 その220 - Ubuntu 20.04.2.0 LTSがリリースされました・Linux kernelがインストールされない不具合の修正 - kledgeb Ubuntu 20.04 その219 - Thunderbird 78の採用へ・Thunderbirdのメジャーアップデート - kledgeb : 結局 PGP/MIME を使いたいなら Thunderbird しか選択肢がなさそうなんだけど， Thunderbird はクソみたいな独自ライブラリで鍵管理していて GnuPG では上手く動かないんだよなぁ  Windows に関する話題  Windows Terminal で現在のディレクトリを引き継いでペインやタブを複製する : Windows Terminal 1.6 からの機能  Go 言語関連  Go 1.16 is released - The Go Blog Go言語 ハンズオン | 掌田津耶乃 |本 | 通販 | Amazon GitHub - pbnjay/grate: A Go native tabular data extraction package. Currently supports .xls, .xlsx, .csv, .tsv formats. Go言語 (Golang) でintのスタックとキューを実装してみる : 記事では slice を使っているが，ぶっちゃけヤバいので container/list パッケージを使いましょう Go+WebAssemblyで時刻表示を実装してみた New module changes in Go 1.16 - The Go Blog  Rust 言語関連  Rust言語を推進する「Rust Foundation」設立。AWS、Google、マイクロソフト、モジラ、ファーウェイらが設立メンバー － Publickey Rustを使って円周率1億桁計算したお話 Announcing Rust 1.50.0 | Rust Blog RustでTOTP(Time-based One-Time Password)を、RFCだけ見て原理原則から実装する  その他  Google、オープンソースソフトウェアの脆弱性をバージョンごとにデータベース化する「OSV」（Open Source Vulnerabilities）プロジェクトを開始 － Publickey 📙 Emojipedia — 😃 Home of Emoji Meanings 💁👌🎍😍 Slack、1月の大規模障害の原因を説明。「AWS Transit Gateway」がトラフィックの急上昇に対応できず、AWSはアルゴリズムを見直すと － Publickey 満足して使っている有料サービスの一覧 VSCodeとDockerでMacにGolangの開発環境を作成する | DevelopersIO Raspberry Pi Pico で独自学習した TensorFlow Lite のモデルを使う Excelの新機能「Lambda関数」によって「Excelの数式がチューリング完全になった」とナデラCEO。プログラミング言語としてのExcel数式であらゆる計算が可能に － Publickey ウィキペディアにはバイアスの問題がある（Wikipedia Has a Bias Problem 日本語訳）  『Wikipedia @ 20』の第21章「ウィキペディアにはバイアスの問題がある」も訳してみた - YAMDAS現更新履歴   アメリカでもプログラミングスクールに通ったがうまくいかなかった話があった - YAMDAS現更新履歴 偏向した言論や陰謀論など現在の汚染されたインターネットのフィールドガイド『You Are Here』が面白そうだ - YAMDAS現更新履歴 GoogleがPython Software Foundationへの支援を強化「ビジョナリースポンサー」に。CPython実装のための常駐開発者を雇用へ － Publickey 「AI」と呼ばれなくなる日も近い？\u0026ndash;あらゆる現場に浸透が進む - ZDNet Japan : 幻滅期から普及期へってところかねぇ Amazon RDSのMySQL/MariaDBがレプリケーションフィルターをサポート。特定のテーブルだけを選んでレプリカを作成 － Publickey markdown-itでURLにアンダースコアが含まれていると自動リンク（linkify）がおかしくなる件 Apple M1チップ対応のDocker Desktop、同梱のKubernetesも実行可能に － Publickey 【取材メモ】島根県知事、五輪開催に反対の会見・質疑、書き起こし | COVID-19 | OSHIDORI Mako\u0026amp;Ken Portal / おしどりポータルサイト 【Chrome】textareaの改行時にカーソル位置がガタっとずれる問題の対処法  "
    },
    {
      "title": "time.Ticker で遊ぶ【Go 1.16 バージョン】",
      "section": "golang",
      "description": "素敵なキャンセルライフを（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/ticker-2/",
      "published": "2021-02-18T12:34:25+00:00",
      "update": "2021-02-21T01:48:12+00:00",
      "content": "ずいぶん前に「time.Ticker で遊ぶ」と言う記事を書いたのだが，先日リリースされた Go 1.16 で signal.NotifyContext() 関数が追加された記念に，これを使った改訂版の記事を書いてみたいと思う。\n前回と同じくお題は以下の通り。\n 一定周期ごとの処理を行う Ctrl+C 等の割り込み処理を行う  一定周期ごとの処理を行う これは前回の記事をほぼそのまま使いまわそう。\n// +build run  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func ticker() { t := time.NewTicker(1 * time.Second) //1秒周期の ticker  defer func() { fmt.Println(\u0026#34;Stopping ticker...\u0026#34;) t.Stop() }() for { select { case now := \u0026lt;-t.C: fmt.Println(now.Format(time.RFC3339)) } } } func main() { ticker() } 前回でも説明した通り， defer 構文を使って終了時に time.Ticker.Stop() 関数で周期イベントを止めようとしているが，実際には無限ループなので return まで到達しない（笑）\nNotifyContext 関数で SIGNAL を捕まえる Go では SIGINT や SIGTERM といった OS から送信される SIGNAL をイベントとして channel に送り込む仕掛けがある（ちなみに Ctrl+C は SIGINT として送られる）。 さらに Go 1.16 では SIGNAL イベントを context.Context のキャンセル・イベントとして実装できるようになった。\nたとえば，こんな感じに書ける。\n// +build run  package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/signal\u0026#34; \u0026#34;time\u0026#34; ) func ticker(ctx context.Context) {  t := time.NewTicker(1 * time.Second) //1秒周期の ticker  defer func() { fmt.Println(\u0026#34;Stopping ticker...\u0026#34;) t.Stop() }() for { select { case now := \u0026lt;-t.C: fmt.Println(now.Format(time.RFC3339)) case \u0026lt;-ctx.Done(): fmt.Println(\u0026#34;cancellation from context:\u0026#34;, ctx.Err()) return  } } } func run() { ctx, _ := signal.NotifyContext(context.Background(), os.Interrupt) ticker(ctx) }  func main() { run() } context パッケージは並行処理下で使うことが多いだろう。 たとえば run() 関数をこんな感じに書き換えてみるか。\nfunc run() { ctx, _ := signal.NotifyContext(context.Background(), os.Interrupt) var wg sync.WaitGroup for i := 0; i \u0026lt; 3; i++ { n := i + 1 wg.Add(1) go func() { defer wg.Done() ticker(ctx, n) }() } wg.Wait() } これで平行に動作している全ての ticker() に対してキャンセルを送り込むことができる。\n上のコード例ではひとつの context.Context インスタンスを複数の goroutine で使いまわしているが，以下のように\nfunc run() { var wg sync.WaitGroup for i := 0; i \u0026lt; 3; i++ { n := i + 1 wg.Add(1) go func() { defer wg.Done() ctx, _ := signal.NotifyContext(context.Background(), os.Interrupt) ticker(ctx, n) }() } wg.Wait() } 各 goroutine ごとに context.Context インスタンスを生成してセットしても全ての ticker() を Ctrl+C で問題なく止めることができた。\nキャンセル・イベントの伝搬 context パッケージは，名前の通り，異なるレイヤやドメイン間でコンテキスト情報を受け渡しするためのパッケージだが，親から子にキャンセルイベントが伝搬する性質がある（逆向きには伝搬しない）。 たとえば\nfunc run() { parent, _ := signal.NotifyContext(context.Background(), os.Interrupt) var wg sync.WaitGroup for i := 0; i \u0026lt; 3; i++ { n := i + 1 wg.Add(1) go func() { defer wg.Done() child, _ := context.WithTimeout(parent, time.Duration(n)*5*time.Second) ticker(child, n) }() } wg.Wait() } などとすれば各 goroutine の ticker() 関数に SIGNAL イベントとタイムアウト・イベントの両方を仕込むことができる。\nまた\nctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt) とした場合の返り値の cancel は関数値になっていて，これをキックすることでペアとなっている context.Context インスタンス（上のコードなら ctx）にキャンセル・イベントを発生させることができる。 実際の使い方として signal.NotifyContext() 関数は main goroutine に近いところで context.WithCancel() 関数と置き換えることが多いのではないだろうか。\ncontext について詳しくは『Go 言語による並行処理』の 4.12 章が参考になる。 素敵なキャンセル・ライフを（笑）\nブックマーク  Big Sky :: os/signal に NotifyContext が入った。  参考図書  Go言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Eブック版もある。感想はこちら。 Go 言語で並行処理を書くならこの本は必読書になるだろう。\nreviewed by Spiegel on 2020-01-13 (powered by PA-APIv5)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "DSA は NIST 電子署名標準から外れるようだ",
      "section": "remark",
      "description": "ドラフト版 FIPS 186-5 の DSA の節の内容がまるっと削られている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/02/dsa-deprecation/",
      "published": "2021-02-17T11:53:55+00:00",
      "update": "2021-02-17T12:01:33+00:00",
      "content": "Go 1.16 のリリースノートを眺めていて今さら気付いたのだが，いまだドラフト中の FIPS 186-5 によると， DSA を「電子署名生成用途としては」電子署名標準（Digital Signature Standard; DSS）から外すつもりのようだ。 ドラフト版 FIPS 186-5 の DSA の節はまるっと削られて以下の文章のみ掲載されている。\nPrior versions of this standard specified the DSA. This standard no longer approves DSA for digital signature generation. DSA may be used to verify signatures generated prior to the implementation date of this standard. See FIPS 186-4 [20] for the specifications for DSA. via FIPS 186-5 (Draft), Digital Signature Standard (DSS)  鍵長の問題（現在は鍵長を変数化することで対処している）以外はアルゴリズム自体に危殆化問題があるわけではないと思うが，出自がアレだし実装面の複雑さ1 もあって評判がよろしくないのは聞いていた。 まぁ「設計限界」というやつなんだろう。\nその代わりといってはナニだが楕円曲線暗号のひとつである EdDSA (楕円曲線 ed25519/ed488) が FIPS 186-5 から電子署名標準のひとつとして加わることになっている。 これについては以前に記事を書いた（なんでそのときに DSA に気がつかなかったのか）。\n Edwards-curve Digital Signature Algorithm  まぁ，時代は楕円曲線暗号ということなのだろう。 次期 OpenPGP である RFC 4880bis が正式にリリースされるタイミングでメインの鍵を替えようかと目論んでいるのだが，前倒ししたほうがいいのかねぇ。\nブックマーク  crypto/dsa: deprecate and remove from crypto/x509 and x/crypto/ssh · Issue #40337 · golang/go · GitHub Cryptography Dispatches: DSA Is Past Its Prime そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな Go 1.16 がリリースされた： Go 1.16 では crypto/dsa パッケージが非推奨になった。  参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n   DSA は実装に必要な要素技術が多く，そのうちのひとつでも瑕疵があれば全体のセキュリティ強度が下がってしまう。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.16 がリリースされた",
      "section": "release",
      "description": "毎度のごとく多岐にわたる変更あり。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/02/go-1_16-is-released/",
      "published": "2021-02-17T10:16:04+00:00",
      "update": "2021-02-21T03:10:34+00:00",
      "content": "Go 1.16 がリリースされた。\n Go 1.16 is released  毎度のごとく変更は多岐にわたるが，個人的に気になった部分を挙げておく。\n macOS の 64bit ARM アーキテクチャをサポート。 darwin/arm64 で指定可能。またこれにより iOS ポートが ios/arm64 または ios/amd64 にリネームされた（後者は iOS シミュレータ用） GO111MODULE 環境変数の既定値が on になった。以前の状態に戻すには auto を指定すること go install コマンドの引数がバージョン番号サフィックスを受け入れるようになった  例： go install example.com/cmd@v1.0.0   go build や go test などのビルド系コマンド実行時に go.mod や go.sum ファイルの変更を行わなくなった go.mod によるモジュール設定で retract ディレクティブが追加された ラベルのない for ループ，メソッド値，型スイッチのある関数をインライン化できるようになった embed パッケージおよび //go:embed ディレクティブの追加 io/fs パッケージの追加によりファイルシステムの汎化が容易になった io/ioutil パッケージの非推奨化 crypto/dsa パッケージの非推奨化。これに伴い crypto/x509 で DSA による電子署名検証機能がドロップされた（電子署名生成は以前からないらしい） os/signal.NotifyContext() 関数の追加。これにより SIGNAL 到着時に context.Context によるキャンセルを容易に実装できる strconv のパフォーマンス改善（最大で2倍らしい）  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.16.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.16.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.16.linux-amd64.tar.gz $ sudo mv go go1.16 $ sudo ln -s go1.16 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.16 linux/amd64 アップデートは計画的に。\nブックマーク   Go 1.16 is released - The Go Blog\n  Go 1.16 Release Notes - The Go Programming Language\n  Go 1.16 リリースノート 日本語訳 - Qiita\n  DSA は NIST 電子署名標準から外れるようだ\n  time.Ticker で遊ぶ【Go 1.16 バージョン】\n  io/ioutil の非推奨化について\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "手遊びで日本版 Google COVID-19 Forecast データを取得するツールを作ってみた",
      "section": "release",
      "description": "大した機能はないが，よろしければどうぞ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/02/cov19jpn/",
      "published": "2021-02-14T10:38:03+00:00",
      "update": "2021-02-14T10:39:14+00:00",
      "content": "天下無敵の無職の頃は自分の住んでる地域以外はあまり気にする必要がなかったが，仕事をするようになれば客先地域の感染状況とかも気にしないといけない。 ただ，公表されている情報に関しては自治体によってバラバラで統一性がなく，国レベルで整理して公表しているというわけでもないっぽい？\nで，軽くググってみたが Google が公開している日本版 COVID-19 Forecast データが使いやすいようだ。\n 日本版 Google COVID-19 Forecast データを眺める  予測値はともかく，実績値だけでもこのレベルで国が取り扱ってくれんもんかねぇ。\n愚痴はともかく，このデータを使って簡単なツールを作ってみた。\n spiegel-im-spiegel/cov19jpn: COVID-2019 in Japan; Importing Google COVID-19 Public Forecasts  たとえばコマンドラインで\n$ cov19jpn plot tokyo とかやれば\ntokyo-cov19-chart.png  てな感じに棒グラフを出力してくれる。 ちなみに7日単位の集計で，過去4週間分の実績値と，それに続く1週間分の予測値を表示している。 個人的には AI 予測は「当たるも八卦」とあまり信用してないが，1週間分なら多少は参考になるかもしれない。\nなお，コマンドラインの都道府県名を省略すると47都道府県のグラフをそれぞれ出力するのでご注意を（笑）\nあと，\n$ cov19jpn csv tokyo japan_prefecture_code,prefecture_name,target_prediction_date,cumulative_confirmed,cumulative_confirmed_q0025,cumulative_confirmed_q0975,cumulative_deaths,cumulative_deaths_q0025,cumulative_deaths_q0975,hospitalized_patients,hospitalized_patients_q0025,hospitalized_patients_q0975,recovered,recovered_q0025,recovered_q0975,cumulative_confirmed_ground_truth,cumulative_deaths_ground_truth,hospitalized_patients_ground_truth,recovered_ground_truth,forecast_date,new_deaths,new_confirmed,new_deaths_ground_truth,new_confirmed_ground_truth,prefecture_name_kanji JP-13,TOKYO,2021-01-15,,,,,,,,,,,,,82069,717,19797,61555,2021-02-11,,,,,東京都 JP-13,TOKYO,2021-01-16,,,,,,,,,,,,,83878,720,19879,63279,2021-02-11,,,3,1809,東京都 JP-13,TOKYO,2021-01-17,,,,,,,,,,,,,85470,725,20646,64099,2021-02-11,,,5,1592,東京都 JP-13,TOKYO,2021-01-18,,,,,,,,,,,,,86674,728,20777,65169,2021-02-11,,,3,1204,東京都 JP-13,TOKYO,2021-01-19,,,,,,,,,,,,,87914,744,20289,66881,2021-02-11,,,16,1240,東京都 ... などと都道府県単位で絞って CSV 出力することも可能。\n手遊びで作ったものなので大した機能はないが，よろしければどうぞ。\nブックマーク  WHO COVID-2019 データを取得するパッケージを作ってみた  "
    },
    {
      "title": "Libgcrypt 1.9 系へのアップグレードはちょっと待ちなはれ",
      "section": "release",
      "description": "GnuPG 2.2 系のみに Libgcrypt を使っているのなら今すぐ 1.9 系にアップグレードする必要はない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/02/libgcrypt-1_9-series/",
      "published": "2021-02-11T02:24:15+00:00",
      "update": "2021-02-11T02:51:23+00:00",
      "content": "なんかメチャメチャ忙しい。 この前うっかり休日出勤したら，その後の体調が急落してしまった。 他のプロジェクトメンバにはホンマに申し訳ないが，祝日と休日（と土曜日）はカレンダー通り休ませてもらうことにした。 歳をとるとあちこちガタが来るのよ。 マジすんません \u0026#x1f647;\n閑話休題 (それはさておき) 。\n先月の話で恐縮だが，ついに 1.9 系の Libgcrypt が安定版としてリリースされた。\n [Announce] Libgcrypt 1.9.0 relased  これによると\nWe are pleased to announce the availability of Libgcrypt version 1.9.0. This release starts a new stable branch of Libgcrypt with full API and ABI compatibility to the 1.8 series. Over the last 3 or 4 years Jussi Kivilinna put a lot of work into speeding up the algorithms for the most commonly used CPUs. via Libgcrypt 1.9.0 relased  とのことで，現行の 1.8 系との後方互換性を図りつつ，パフォーマンス改善やアルゴリズム追加等が行われているようだ。 詳しくは以下の通り。\n  New and extended interfaces:\n New curves Ed448, X448, and SM2. New cipher mode EAX. New cipher algo SM4. New hash algo SM3. New hash algo variants SHA512/224 and SHA512/256. New MAC algos for Blake-2 algorithms, the new SHA512 variants, SM3, SM4 and for a GOST variant. New convenience function gcry_mpi_get_ui. gcry_sexp_extract_param understands new format specifiers to directly store to integers and strings. New function gcry_ecc_mul_point and curve constants for Curve448 and Curve25519. [#4293] New function gcry_ecc_get_algo_keylen. New control code GCRYCTL_AUTO_EXPAND_SECMEM to allow growing the secure memory area. Also in 1.8.2 as an undocumented feature.    Performance:\n Optimized implementations for Aarch64. Faster implementations for Poly1305 and ChaCha. Also for PowerPC. [b9a471ccf5,172ad09cbe,#4460] Optimized implementations of AES and SHA-256 on PowerPC. [#4529,#4530] Improved use of AES-NI to speed up AES-XTS (6 times faster). [a00c5b2988] Improved use of AES-NI for OCB. [eacbd59b13,e924ce456d] Speedup AES-XTS on ARMv8/CE (2.5 times faster). [93503c127a] New AVX and AVX2 implementations for Blake-2 (1.3/1.4 times faster). [af7fc732f9, da58a62ac1] Use Intel SHA extension for SHA-1 and SHA-256 (4.0/3.7 times faster). [d02958bd30, 0b3ec359e2] Use ARMv7/NEON accelerated GCM implementation (3 times faster). [2445cf7431] Use of i386/SSSE3 for SHA-512 (4.5 times faster on Ryzen 7). [b52dde8609] Use 64 bit ARMv8/CE PMULL for CRC (7 times faster). [14c8a593ed] Improve CAST5 (40% to 70% faster). [4ec566b368] Improve Blowfish (60% to 80% faster). [ced7508c85]     via Libgcrypt 1.9.0 relased  現行の 1.8 系は LTS バージョンという位置付けで今後もサポートされるようだ。 また GnuPG 2.2 系も併せて LTS の位置付けになっている。 おそらく 2.3 系の一般リリースが近いのであろう。\nLibgcrypt は汎用の暗号ライブラリだが GnuPG 以外で使っている事例を寡聞にして知らない。 ほとんどのユーザはそうだと思うが GnuPG 2.2 系のみに Libgcrypt を使っているのなら今すぐ 1.9 系にアップグレードする必要はない。 しばらくは推移を見守っていたほうがいいだろう。 当分は頻繁なアップデートが行われるだろうし，重大なバグや脆弱性については 1.8 系にもフィードバックされる筈である1。\nなお Libgcrypt 1.9.0 でさっそく脆弱性が見つかって 1.9.1 がリリースされている。\nThere is a heap buffer overflow in libgcrypt due to an incorrect assumption in the block buffer management code. Just decrypting some data can overflow a heap buffer with attacker controlled data, no verification or signature is validated before the vulnerability occurs. via [Announce] [Security fix] Libgcrypt 1.9.1 relased  既に Libgcrypt 1.9.0 を運用している場合はアップデートしませう。\nアップデートは計画的に 最近の GnuPG 関連のアップデート状況は以下の通り。\n   # パッケージ名 バージョン 公開日 更新     1 Libgpg-error 1.41 2020-12-21    2a Libgcrypt (LTS) 1.8.7 2020-10-23    2b Libgcrypt 1.9.1 2021-01-29    3 Libassuan 2.5.4 2020-10-23    4 Libksba 1.5.0 2020-11-18    5 nPth 1.6 2018-07-16    6 ntbTLS 0.2.0 2020-08-27    7 GnuPG (LTS) 2.2.27 2021-01-11     脆弱性が公表されると碌に中身も見ずに「すぐにアップデートしろ」みたいなことを言う馬鹿メディアもあるようだが，20年前の牧歌的な時代ならともかく今は可用性（availability）も明確にセキュリティ・リスクとして認知されているんだから，考えなしにアップデートできるわけ無いだろ！ セキュリティ部品はシステム規模が大きくなる程いざというときの影響が大きい。 勿論いつまでも放置するのは論外だが。\nというわけで，アップデートは計画的に。\nブックマーク  OpenPGP の実装  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n   Libgcrypt 1.8 系がいつまでサポートされるかは明示されていないが， 1.7 系のときは1年前には予告があったので，それまでは気にしなくてもいいと思う。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2022年の暦",
      "section": "remark",
      "description": "今年も国立天文台より翌年（2022年）の暦要項が公開された。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/02/ephemeris-in-2022/",
      "published": "2021-02-07T08:48:03+00:00",
      "update": "2021-02-07T09:00:17+00:00",
      "content": "先日の話だが，今年も国立天文台より翌年（2022年）の暦要項が公開された。\n 暦要項 - 国立天文台暦計算室 令和4（2022）年暦要項の発表 | 国立天文台(NAOJ)  以降，いくつか抜粋してみる。\n祝日・休日1 2022年は振替休日なし。 今年みたいに急に変更されなければ，だけど（笑）\n   日付 曜日 内容     2022-01-01 土 元日   2022-01-10 月 成人の日   2022-02-11 金 建国記念の日   2022-02-23 水 天皇誕生日   2022-03-21 月 春分の日   2022-04-29 金 昭和の日   2022-05-03 火 憲法記念日   2022-05-04 水 みどりの日   2022-05-05 木 こどもの日   2022-07-18 月 海の日   2022-08-11 木 山の日   2022-09-19 月 敬老の日   2022-09-23 金 秋分の日   2022-10-10 月 スポーツの日   2022-11-03 木 文化の日   2022-11-23 水 勤労感謝の日    2022年の暦象 2022年には日食2回と月食2回がある。 ただし日本で見られるのは 2022-11-08 の皆既月食のみらしい。\n   日付 曜日 内容     2022-05-01 日 部分日食   2022-05-16 月 皆既月食   2022-10-25 火 部分日食   2022-11-08 火 皆既月食      5月1日には部分日食がありますが、日本では見ることができません。 5月16日には皆既月食がありますが、日本では見ることができません。 10月25日には部分日食がありますが、日本では見ることができません。 11月8日には皆既月食があり、日本では全国で皆既食を見ることができます。   令和4（2022）年暦要項の発表 | 国立天文台(NAOJ)より  他にはこんな感じ。\n   日付 曜日 内容     2022-02-04 金 立春   2022-03-21 月 春分   2022-05-05 木 立夏   2022-06-21 火 夏至   2022-08-07 日 立秋   2022-09-23 金 秋分   2022-11-07 月 立冬   2022-12-22 木 冬至    ちなみに2022年の「伝統的七夕」は8月4日である。\nブックマーク  カレンダーに祝日を入れたいなら国立天文台へ行けばいいじゃない 国立天文台から最新の暦情報を取ってくる【広告記事】  参考図書  天文年鑑 2021年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2020-11-24 単行本 4416620616 (ASIN), 9784416620618 (EAN), 4416620616 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2021年版。なお，記載されている祝日・休日は改正前のものなのでご注意を。\nreviewed by Spiegel on 2020-11-25 (powered by PA-APIv5)\n   「国民の祝日」は休日となる。また「「国民の祝日」が日曜日に当たるときは、その日後においてその日に最も近い「国民の祝日」でない日を休日とする」（「国民の祝日に関する法律」より）。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "LibreOffice 7.1 へのアップグレード",
      "section": "release",
      "description": "いつもどおり，手動でアップグレード。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/02/upgrade-libreoffice-7_1/",
      "published": "2021-02-07T07:48:31+00:00",
      "update": "2021-02-07T07:51:31+00:00",
      "content": "LibreOffice 7.1 がリリースされた。\n LibreOffice 7.1 Community released by The Document Foundation - The Document Foundation Blog 無償のオフィス総合ソフト「LibreOffice 7.1 Community」がリリース - 窓の杜  Ubuntu で LibreOffice を導入する方法はいくつかあるが，前回と同じく今回も公式サイトから *.deb ファイルを取ってきてインストールした。 細かくチェックしたわけではないが 7.0 でも OpenPGP 鍵で暗号化したファイルが開けたので，まぁ問題なかろう。\nLibreOffice は異なるバージョンと共存できてしまうので 7.1 系のみを使うのであれば以前のバージョンは削除する。\n$ sudo apt purge libreoffice7.0* libobasis7.0* 7.1 系を削除する場合も\n$ sudo apt purge libreoffice7.1* libobasis7.1* でよい。\nもし上の APT コマンドで上手く行かない場合は\n$ dpkg -l | grep libreoffice あるいは\n$ dpkg -l | grep libobasis で一覧を出してひとつづつ sudo pkg -r コマンドで削除していくしかない（依存関係に注意）。\nブックマーク  Ubuntu に LibreOffice をインストールする3つの方法  "
    },
    {
      "title": "2021-02-07 のブックマーク",
      "section": "bookmarks",
      "description": "「オンライン表現の自由のチョークポイント――なぜインフラの検閲はプラットフォームの検閲よりも深刻なのか」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/02/07-bookmarks/",
      "published": "2021-02-07T07:48:20+00:00",
      "update": "2021-02-07T07:51:31+00:00",
      "content": "リリース情報  Release 4.4.9_2 · zetamatta/nyagos · GitHub Release v0.3.0 · zetamatta/go-readline-ny · GitHub Release 1.54.0 · atom/atom · GitHub KeePassXC 2.6.3 released - KeePassXC Release 8.9.0 · mermaid-js/mermaid · GitHub Release v1.36.0 · golangci/golangci-lint · GitHub 「Windows Terminal」に待望の設定GUI ～v1.6プレビュー版で先行導入 - 窓の杜 Release Release 2.6.4 · keepassxreboot/keepassxc · GitHub Release gopls/v0.6.5 · golang/tools · GitHub LibreOffice 7.1 Community released by The Document Foundation - The Document Foundation Blog  Announcing LibreOffice New Generation - The Document Foundation Blog 無償のオフィス総合ソフト「LibreOffice 7.1 Community」がリリース - 窓の杜   Release v1.0.11 · sonatype-nexus-community/nancy · GitHub  バベルのインターネット  権力者の\u0026quot;特別扱い\u0026quot;を止めよ：ソーシャルメディアによるトランプ大統領アカウントの遮断・凍結についてのEFFの考え方 | P2Pとかその辺のお話R ウガンダ共和国、大統領がインターネットとの切断を命令、大統領選投票日の前日に － Publickey オンライン表現の自由のチョークポイント――なぜインフラの検閲はプラットフォームの検閲よりも深刻なのか | P2Pとかその辺のお話R  セキュリティ＆プライバシー関連  Hackers can clone Google Titan 2FA keys using a side channel in NXP chips | Ars Technica  Cloning Google Titan 2FA keys - Schneier on Security   Red HatがKubernetesネイティブなセキュリティベンダ「StackRox」を買収、OpenShiftへ統合。クラウドネイティブ環境のセキュリティ強化へ － Publickey 楽天モバイルへ転職したソフトバンク元社員の社外秘情報持ち出しについてまとめてみた - piyolog グーグルが「Windows」と「Android」を標的とした高度なハッキング事例のレポート公開 - ZDNet Japan 2021年1月マイクロソフトセキュリティ更新プログラムに関する注意喚起 マイクロソフト、Linux用マルウェア対策ツールの強化版「Microsoft Defender for Linux EDR」正式版リリース。Linuxサーバ上の怪しい動作などを検出可能に － Publickey GitHub - anmitsu/goful: Goful is a CUI file manager written in Go. Apache Tomcatの脆弱性（CVE-2021-24122）に関する注意喚起 プライバシーポリシーへの懸念で欧米で人気のSignalとTelegramは中国国内でも（いまのところ）拡大中 | TechCrunch Japan NSAが社内ネットワークでのDoHの利用に警告 - ZDNet Japan NECのWi-Fiルータ「Aterm」シリーズに複数の脆弱性 | TECH+ Kindle端末にクレジットカードを悪用される脆弱性 - PC Watch  Kindle、攻撃者に乗っ取られる危険性のある脆弱性が発覚 | TECH+   sudoの脆弱性（CVE-2021-3156）に関する注意喚起 最恐ウイルスEmotetをテイクダウンしたOperation Ladybirdについてまとめてみた - piyolog サイバートラスト社SSLサーバー証明書の再発行対応について | さくらインターネット 中国で盗聴器の仕込まれたモバイルバッテリーが騒動に - ZDNet Japan 久しぶりに使うレポジトリの脆弱性報告が有りまくったので npm package をアップデートをしてスッキリする SonicWall製SMA100シリーズの脆弱性（CVE-2021-20016）に関する注意喚起 draft-ietf-openpgp-crypto-refresh-01 - OpenPGP Message Format  Linux または Ubuntu に関する話題  CloudLinux、「CentOS」の代替OSは「AlmaLinux」\u0026ndash;今四半期リリースへ - ZDNet Japan Ubuntu 21.04 その12 - Ubuntu on Waylandをデフォルトにする提案 - kledgeb  Ubuntuのあれどうなった③ Waylandセッションでのリモートデスクトップ   Ubuntu 20.04 その218 - Ubuntu 20.04.2 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 21.10 その1 - 新しいUbuntu Desktopインストーラーの開発・Flutterベースのインストーラーへ - kledgeb  Windows に関する話題  Nyagosの補完まとめ - tomato3713’s blog windows10 defender フルスキャン中にブルースクリーンになってしまう - マイクロソフト コミュニティ Win10にWSL2とUbuntu 20.04をインストールする | AsTechLog  Windows10 WSL2にLinux居城を爆誕させる - Qiita   My WSL2 and Windows Terminal setup | Garry Trinder  Go 言語関連  [Go] testing.Mオブジェクトを引数にとる関数をつくるアイデア - My External Storage Goのnet/httpのkeep-aliveで気をつけること - Carpe Diem Golangでのstreamの扱い方を学ぶ - Carpe Diem その文字が JIS X 0208 に含まれるか？ あるいは unicode.RangeTable の使い方 GoのHTTP実装を読んだ知見をまとめる~FIFOを5通りで実装する~ - Qiita GoのアプリにNew Relic APMを導入する時とても便利なCLIを作った - My External Storage GoでGraphQL: gqlgen + gorm x/sys/windows: use win32metadata? · Issue #43838 · golang/go · GitHub  C#やRustからWin32 APIをもっと簡単に呼び出せるように ～Microsoftが「win32metadata」プロジェクトを発表 - 窓の杜   AWS Translateを使ってGo言語で翻訳するサンプル - Qiita Go言語でPCとUSB接続のデバイス間でシリアル通信する 【Go】tviewによるTUIツール作成 Developing and publishing modules - The Go Programming Language GoでSQLにトレーシングコメントを埋め込んで実行する | おそらくはそれさえも平凡な日々  Google、ORMが生成するSQLが遅いときの調査を容易にする「sqlcommenter」をオープンソースで公開。Rails、Spring、Djangoなど主要なフレームワークに対応 － Publickey   Gopls on by default in the VS Code Go extension - The Go Blog インタフェースの型リストを用いた列挙型の考察 - tenntenn.dev 第10回『プログラミング言語Go』オンライン読書会 - connpass  その他  Go製のtcardgenでHugoで作ったブログのOGPを自動生成してみた - Qiita Convert cURL command syntax to Python requests, Ansible URI, browser fetch, MATLAB, Node.js, R, PHP, Strest, Go, Dart, JSON, Elixir, and Rust code  GitHub - NickCarneiro/curlconverter: convert curl commands to Python, JavaScript, PHP, R, Go, Rust, Dart, JSON, Ansible, Elixir   .NET 5やBlazor WebAssemblyに対応する表形式のグリッドやチャートなどのコンポーネントを揃えた「ComponentOne」最新版が登場 － Publickey WebAssemblyをブラウザの外で動かすWasmerを触ってみた goでN+1問題を検出する静的解析ツールを作った Amazon LightsailがIPv6サポートを開始、仮想プライベートサーバ（VPS）として手軽にIPv6を利用可能に － Publickey 2021年のPHS Google Cloud FunctionsがRubyのサポートを発表。ローカル環境での開発やテストを可能にするフレームワークも － Publickey State of JavaScript 2020：いちばん利用率の高いJSフレームワーク、フロントエンドがReact、バックエンドはExpress、テストにはJest。2万4000人の調査結果 － Publickey 日本語 LaTeX の新常識 2021 - Qiita Jeffrey Paul: Your Computer Isn\u0026rsquo;t Yours  多くの人、特にMacユーザに読んでほしい「Your Computer Isn\u0026rsquo;t Yours」日本語訳 - YAMDAS現更新履歴   個人開発者はRed Hat Enterprise Linuxを無料で最大16システムまで利用可能に、本番環境もOK。Red Hatが開発者向けプログラムの拡大を発表 － Publickey AWSをElasticが名指しで非難。ElasticsearchとKibanaのライセンスを、AWSが勝手にマネージドサービスで提供できないように変更へ － Publickey W3CとIETF、「WebRTC」が正式な標準仕様に到達したと発表 － Publickey Google、マイクロソフトらが設立、「Open Web Docs」を発表。MDNなど支援、Web技術のドキュメント化を推進 － Publickey 2021年にサポート終了を迎えるMicrosoft製品は？ ～早めに移行の準備を進めよう - やじうまの杜 - 窓の杜 ZennとClassmethod | Cat Knows 実は2020年は大久保ゆうさんの年だった - YAMDAS現更新履歴 ロールプレイングゲームとしてのウィキペディア、もしくは一部の大学人がウィキペディアを好きではない理由（Wikipedia as a Role-Playing Game, or Why Some Academics Do Not Like Wikipedia 日本語訳） 「GitHubなどクラウドサービス利用の萎縮につながらないように」、一般社団法人コンピュータソフトウェア協会が「GitHubに関する対応とお願い」を企業に向け発表 － Publickey RISC-V isn\u0026rsquo;t as interesting as you think - the sporks space  ブログ: RISC-Vはあなたが思っているほど面白くない   COVID-19 rarely spreads through surfaces. So why are we still deep cleaning?  ブログ: COVID-19が表面に広がることはほとんどない。では、なぜ私たちはまだディープクリーニングをしているのか?   Box、電子署名のSignRequest買収を発表\u0026ndash;「Box Sign」を今夏リリースへ - ZDNet Japan 「秀丸エディタ」v8.96で代替フォントを5つまで登録可能に ～数字・英字・漢字に異なるフォントを指定できる - 窓の杜 Windows と Unicode とボク  "
    }
  ]
}
