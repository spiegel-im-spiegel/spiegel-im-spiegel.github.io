{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "お散歩カメラ 2023-06-03",
      "section": "remark",
      "description": "千本ダムと日野目天神社 / 今日も7%勾配を越えて松江城へ / 久しぶりのお好み焼 / さぁ，帰りませう",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/06/03-osanpo-camera/",
      "published": "2023-06-03T11:10:48+00:00",
      "update": "2023-06-03T11:21:28+00:00",
      "content": "今回の台風，本州直撃こそなかったけど四国から紀伊半島・東海・関東と前線の雨雲が居座って大変だったみたいですねぇ。 お見舞い申し上げます。\n私の居る松江市は防災無線が鳴ることもなく夕方には晴れ上がっていました。\n台風一過 | Flickr というわけで，今日は自転車でお出かけするしかない！\n千本ダムと日野目天神社 とりあえず忌部 (いんべ) の千本ダムに行くべ。 というわけで，行ってきた。\n松江 千本ダム | Flickr 周辺を歩いて散策しようと思ったが，草刈りとか側溝の掃除とかされてる方々が沢山いたので，遠慮して千本水神社のお参りだけしておいた。\n松江 千本水神社 | Flickr おおっ！ ちゃんと周辺の草刈りがされている。 お疲れ様です。\n折角なのでもう少し足を延ばして「日野目天神社 (ひのめてんじんじゃ) 」まで行ってみた。\n松江 日野目天神社 | Flickr 本殿？ ていうか祠？ はこんな感じ。\n松江 日野目天神社 | Flickr 今日も7%勾配を越えて松江城へ 神社巡りに満足したので取って返してコメダで休憩。\nコメダで休憩中 | Flickr やっぱコメダは小倉トーストだよね。\n充分身体を休めたら，今回も7%勾配の陸橋を登るです。\n行くぜ！ 7%勾配 | Flickr そのまま宍道湖沿いをゆっくり流す。 おっ，釣り船が出てるな。\n今日の宍道湖 釣り人の人 | Flickr そのまま島根県立図書館まで行き，駐輪場に自転車を止めて松江城に登ってみる。\n今日の松江城 | Flickr ついでに大山も撮ってみたが写真じゃほぼ分からんな（笑）\n今日の大山 from 松江城 | Flickr そうそう。 今日のバードウォッチング。\n今日のバードウォッチング | Flickr セグロセキレイかな。 この辺の野鳥ってあんまり人を恐れないよね。 走ってる自転車の前を平気で横切ったりするし。 私のほうがビビるっての。\nこのあとは周辺をウロウロしたり図書館で和んだり。\n久しぶりのお好み焼 昼になったのでなに食おうか考えて「ラーメンでも食いに行くか」と思ったのだが，そういえば職場の人が「島根大学の近くに広島のお好み焼のお店ができた」と言っていたのを思い出した。 ちょろんと行ってみるべ。 混んでたら諦める。 ここかな？\nお好み焼 | Flickr 運良く席が空いてた。 「広島焼き」でも「広島風」でも「お好み焼き1」でもなく「お好み焼」のお店。 さっそく肉玉そばを注文する。\n久しぶり、肉玉そば | Flickr というわけで，今日のメシ活でした。\nさぁ，帰りませう このあとは，楽山公園経由で図書館に戻り，夕方まで読書。 時間が来たのでまた宍道湖沿いをのんびり帰った。\n今日の宍道湖 | Flickr 今日もたくさん動いた。 Fitbit の報告によると18K歩以上歩いたことになっている（自転車での移動も含む）。\n明日はのんびりしよう。\nそうそう。 日焼け止めを塗り忘れて腕とか真っ赤になってしまった。 次回は忘れないようにしないと。 これからは通勤時も日焼け止めがいるかな。\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\n[FAIRWEATHER(フェアウェザー)] stem bag x-pac/coyote FAIRWEATHER(フェアウェザー) B08K34WLXD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; スポーツサイクルのステム部分に取り付けられる小物入れ。防水仕様。底に小さなハトメ穴が空いていて，万一水が入った場合でも排出できるようになっている。\nreviewed by Spiegel on 2023-05-03 (powered by PA-APIv5)\nFitbit Inspire2 フィットネストラッカー Black ブラック L/Sサイズ [日本正規品] Fitbit (Release 2020-10-02) エレクトロニクス B08FSBNJG8 (ASIN), 0810038852805 (EAN), 810038852805 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 私の場合，心拍数がモニタできればいいので充分な性能。\nreviewed by Spiegel on 2022-12-26 (powered by PA-APIv5)\n明治 ヴァーム(VAAM) アスリート 顆粒 栄養ドリンク風味 4.7g×10袋 明治 (Release 2021-03-16) ヘルスケア\u0026amp;ケア用品 B08VMWL13F (ASIN), 4902705035614 (EAN) 運動時に脂肪をエネルギーに変えやすくする働きがあるらしい。お試しで買ってみた。とりあえず1時間以上自転車に乗る場合に服用している。水に溶かさず飲むと書いてあるが，水と一緒に飲まないと大変なことになるので注意（経験済み）\nreviewed by Spiegel on 2022-11-04 (powered by PA-APIv5)\nビオレUＶ アクアリッチ アクアプロテクトミスト 60ミリリットル (x 1) 花王 (Release 2023-02-08) ヘルスケア\u0026amp;ケア用品 B0BT1X9H7B (ASIN), 4901301416438 (EAN) 同じメーカーの日焼け止め（乳液タイプ）をドラッグストアで買ったのだが，自転車に乗るならこっちのほうがいいかなぁ。次に買うときはこれを試してみよう。\nreviewed by Spiegel on 2018-06-03 (powered by PA-APIv5)\n広島の「お好み焼」は後ろに送り仮名がつかないのよ。細かい話だけど，こだわる人もおるけぇね。気ぃつけなはれや！\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "2023-05-28 のブックマーク",
      "section": "bookmarks",
      "description": "「ウォーホル作品に米最高裁が著作権侵害の判断。「裁判官は美術評論家ではない」」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2023/05/28-bookmarks/",
      "published": "2023-05-28T00:23:06+00:00",
      "update": "2023-05-28T00:23:26+00:00",
      "content": "リリース情報 Release v1.2023.8 · plantuml/plantuml · GitHub Release v9.0.0: Release Wasmtime 9.0.0 (#6418) · bytecodealliance/wasmtime · GitHub Release v9.0.1: Release Wasmtime 9.0.1 (#6436) · bytecodealliance/wasmtime · GitHub Release v9.0.2: Release Wasmtime 9.0.2 (#6475) · bytecodealliance/wasmtime · GitHub Release v0.81.0 · anchore/syft · GitHub Release v0.82.0 · anchore/syft · GitHub Release v0.112.0 · gohugoio/hugo · GitHub Release v0.112.1 · gohugoio/hugo · GitHub Release v0.112.2 · gohugoio/hugo · GitHub Release v0.112.3 · gohugoio/hugo · GitHub Release v3.25.0 · go-task/task · GitHub Release Windows Terminal v1.17.11391.0 · microsoft/terminal · GitHub Mozillaが「Firefox 113.0.2」を公開 - 窓の杜 Release 10.2.0 · mermaid-js/mermaid · GitHub Release 1.42.0 · tailscale/tailscale · GitHub 「Thunderbird 102.11.1」が公開 ～IMAP関連の処理でフリーズする不具合などを修正 - 窓の杜 セキュリティ＆プライバシー関連 富士通JapanのMICJETで相次ぎ発生した証明書誤交付についてまとめてみた - piyolog Twitterで削除したはずのツイートとリツイートが勝手に復元されてしまうバグが発覚、自分の過去の削除ツイートが本当に消えているかどうか要確認 - GIGAZINE Proton launches family subscription plan for privacy app suite starting at $20 per month | TechCrunch 知財関連 「他人のツイートをスクショして投稿」を違法とした判決、なぜ知財高裁で覆ったのか？ - 弁護士ドットコム ウォーホル作品に米最高裁が著作権侵害の判断。「裁判官は美術評論家ではない」｜ARTnews JAPAN 応用美術の著作権をめぐる議論への更なる一石。 - 企業法務戦士の雑感 ～Season2～ Linux または Ubuntu に関する話題 Ubuntu 23.10 その5 - PPAの認証鍵とセキュリティーの向上 - kledgeb Ubuntu 23.10 その4 - OpenSSLの採用バージョン検討 - kledgeb RHELクローンOSのAlmaLinuxにMIRACLE LINUXが合流を発表。国内でAlmaLinuxのサポートも提供開始 － Publickey Microsoft 製品（Azure や Windows 等） に関する話題 Bringing the power of AI to Windows 11 - unlocking a new era of productivity for customers and developers with Windows Copilot and Dev Home - Windows Developer Blog ［速報］WindowsにチャットAIを搭載「Windows Copilot」発表、サイドバーから利用可能。6月にプレビュー版が登場予定。Build 2023 － Publickey ［速報］開発環境を丸ごとクラウドPC化する「Microsoft Dev Box」、7月に正式リリースと発表。Build 2023 － Publickey ［速報］マイクロソフト、開発環境向けにビルド高速化を実現する「Dev Drive」発表、新ファイルシステムなど採用。Build 2023 － Publickey RAR圧縮形式が誕生から30年を経てWindowsでネイティブサポートされることに、7z・tar・gzも追加 - GIGAZINE 「Windows 11 バージョン22H2」環境の日本語音声認識の問題は解決 ～Microsoftが公表 - 窓の杜 Windows 10/11でファイルの保存やコピーが断続的に失敗する現象 ～Microsoftが認める - 窓の杜 「Windows 11 バージョン 22H2」が「Bluetooth LE Audio」に対応 ～来月実装予定の機能が先行公開 - 窓の杜 「Windows Terminal」がようやくD＆Dによるタブの分離に対応、v1.18でプレビュー - 窓の杜 Go 言語関連 GitHub - bep/simplecobra: A simpler API for the popular Cobra CLI. : 実装上の使い勝手が Cobra と変わらないなら試す価値あり 天文関連 APOD: 2023 May 22 – Supernova Discovered in Nearby Spiral Galaxy M101 Generative AI ASCII.jp：画像生成AIに2度目の革命を起こした「ControlNet」 (1/4) 社内プロンプトインジェクションという生成系AIリスク｜塚本 牧生 ［速報］マイクロソフト、ChatGPTとCopilotのプラグイン共通化を発表。プラットフォーム化とエコシステムを促進。Build 2023 － Publickey その他 IBM、G7で東大らと10万量子ビットコンピューター開発に向け合意 - ZDNET Japan ai | manga レガシーコードとどう付き合うか | めもりー | 工学 | Kindleストア | Amazon 人工知能規制、資本主義批判、民主主義再考 – WirelessWire News WirelessWire News連載更新（人工知能規制、資本主義批判、民主主義再考） - YAMDAS現更新履歴 ライアン・ノースのポピュラーサイエンス本『キミにもできる世界征服』が7月に出るぞ - YAMDAS現更新履歴 : 面白そう Intel、新「X86-S」アーキテクチャで8086互換を切り捨て - PC Watch O\u0026rsquo;Reilly Japan - ソフトウェア設計のトレードオフと誤り : PDF 版を購入 毎月変わるTwitterアイコン制作について - cuco(o0ω0o)log : 今でも毎月アイコンを更新されているそうな。凄いな さくらインターネット、会員登録不要で無償利用可能なオンラインシェル環境 「さくらのクラウドシェル」を2023年5月25日より提供開始 | さくらインターネット IIJ、社内開発した文書共有アプリをOSSとして無償公開 - ZDNET Japan 「Thunderbird」のロゴが新しくなる ～初期リリース以来の大刷新 - やじうまの杜 - 窓の杜 "
    },
    {
      "title": "お散歩カメラ 2023-05-27",
      "section": "remark",
      "description": "今日の実績解除： コメダ ブラックモンブラン コラボメニュー制覇 / 松江市役所 新庁舎見学",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/05/26-osanpo-camera/",
      "published": "2023-05-27T11:03:36+00:00",
      "update": "2023-05-27T11:04:23+00:00",
      "content": "今日の目標は2つ。\nコメダの「シロノワール×ブラックモンブラン」をいただく 松江市役所の新庁舎を見学する めがっさ暑かったっス。 なので今日は Go 言語Tシャツでサイクリングしてました。\n今日はGo言語Tシャツを着てサイクリングしてます | Flickr シロノワール×ブラックモンブラン 記事にはしてないが，実は以前にコメダで「クロネージュ×ブラックモンブラン」はいただいてたのよ。 冷たいのと温かいのの組み合わせサイコー！ ということで「シロノワール×ブラックモンブラン」も機会を狙ってたのだが，今日決行することにした。\nシロノワール×ブラックモンブラン | Flickr ちょっとチョコかかり過ぎやろ！と思ったが，美味かったっス。 満足した。 これで思い残しはない。 次回から小倉トーストに戻ろう。 やっぱアンコが一番（笑）\nただ，ここで問題が。 コメダを出て自転車で走ってる間に微妙に胃もたれががが。 あれしきのスイーツで胃もたれするとか，どんだけ少食になってしまったのか。 おかげで今回は昼食を抜きました。 まぁ，カロリー的には全然問題なかったし（低血糖もなかった）。\n楽山公園チャレンジ 2 GW以来行ってない楽山公園に行くことを思いつく。 キツい坂はないし，腹ごなしには丁度いいだろう。\nさらっと坂を登ってお池の写真を撮る。\n松江 楽山公園 | Flickr 楽山公園の池は蓮の花で有名なのだがまだ葉っぱも出てないな（てか，蓮あるのか？）。 夏頃にまた行ってみよう。\n今日の松江城 楽山公園から移動して県立図書館の駐輪場に自転車を停める。 ついでに松江城に登ってみるか。\n今日の松江城 | Flickr 大山もギリギリ見えた。\n今日の大山 from 松江城 | Flickr おっ。 アオサギの巣が賑やかになってるな。\n今日のバードウォッチング | Flickr 松江市役所 新庁舎 では，いよいよ松江市役所の新庁舎へ行ってみますか。\n新庁舎を対岸から見るとこんな感じ。\n松江市役所 新庁舎 | Flickr けっこう人が居るな。 2階のテラスへは外階段から行ける。\n松江市役所 新庁舎 外階段 | Flickr 2階テラスからの眺めはこんな感じ。\n松江市役所 新庁舎 2階テラスより | Flickr 3階と4階のテラスに行くには一度庁舎の中に入らなくてはいけないらしい（休日限定？）。 上階のテラスに行ってもよかったのだが，5階にある市議会の議場が見学できるらしい。\n松江市役所 新庁舎 2階から5階の議場まで行ってみる | Flickr というわけで，5階に行ってみた。 おおっ。 議会図書館がある。\n松江市役所 新庁舎 議会図書館 | Flickr 係の人に一般の人も議会図書館を利用できるか訊いてみたが，分からないと言われた。\nそうそう。休日なのに庁舎内のいたるところに案内（？）の人が立ってるのよ。 え？ もしかして職員？ それともパートタイムで雇われてるとか？ どっちにしても休日に大変だよなぁ。 いや，私みたいに呑気に見学に来てる人が多いし（要らん所に入られんよう）必要なことなんだろうけど。\n気を取り直して。 議場へ。\n松江市議会 議場 | Flickr おー。 こんな感じなんだ。 傍聴席はこんな感じ。\n松江市議会 議場 傍聴席 | Flickr なかなか楽しかった。 普通，用もないのに市役所内をウロウロすることなんてないので，いい機会に恵まれました。\nさて帰るべ 市役所見学の後は図書館でしばらく引きこもり，気が済んだら帰り支度。 最後はいつもどおり宍道湖の写真で。\n今日の宍道湖 | Flickr 今日もたくさん動いた。 Fitbit の報告によると15K歩以上歩いたことになっている（自転車での移動も含む）。\n明日はのんびりしよう。\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\n[FAIRWEATHER(フェアウェザー)] stem bag x-pac/coyote FAIRWEATHER(フェアウェザー) B08K34WLXD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; スポーツサイクルのステム部分に取り付けられる小物入れ。防水仕様。底に小さなハトメ穴が空いていて，万一水が入った場合でも排出できるようになっている。\nreviewed by Spiegel on 2023-05-03 (powered by PA-APIv5)\nFitbit Inspire2 フィットネストラッカー Black ブラック L/Sサイズ [日本正規品] Fitbit (Release 2020-10-02) エレクトロニクス B08FSBNJG8 (ASIN), 0810038852805 (EAN), 810038852805 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 私の場合，心拍数がモニタできればいいので充分な性能。\nreviewed by Spiegel on 2022-12-26 (powered by PA-APIv5)\n明治 ヴァーム(VAAM) アスリート 顆粒 栄養ドリンク風味 4.7g×10袋 明治 (Release 2021-03-16) ヘルスケア\u0026amp;ケア用品 B08VMWL13F (ASIN), 4902705035614 (EAN) 運動時に脂肪をエネルギーに変えやすくする働きがあるらしい。お試しで買ってみた。とりあえず1時間以上自転車に乗る場合に服用している。水に溶かさず飲むと書いてあるが，水と一緒に飲まないと大変なことになるので注意（経験済み）\nreviewed by Spiegel on 2022-11-04 (powered by PA-APIv5)\n"
    },
    {
      "title": "2023-05-21 のブックマーク",
      "section": "bookmarks",
      "description": "「チャットGPTは ロビー活動をどう変えるか」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2023/05/21-bookmarks/",
      "published": "2023-05-21T01:13:22+00:00",
      "update": "2023-05-21T01:15:08+00:00",
      "content": "リリース情報 「Thunderbird 102.11.0」がリリース ～脆弱性の修正は8件 - 窓の杜 Release Release 2.7.5 · keepassxreboot/keepassxc · GitHub KeePassXC 2.7.5 released – KeePassXC Release v0.12.1 · nyaosorg/go-readline-ny · GitHub Release v0.12.2 · nyaosorg/go-readline-ny · GitHub Release v0.12.3 · nyaosorg/go-readline-ny · GitHub Release v0.13.0 · nyaosorg/go-readline-ny · GitHub Release v0.8.0 · hymkor/sqlbless · GitHub リリースされたばかりの「Firefox 113」に複数の表示関係の不具合 - 窓の杜 Release v0.9.1 · hymkor/go-multiline-ny · GitHub Release v0.10.0 · hymkor/go-multiline-ny · GitHub Release v0.11.0 · hymkor/go-multiline-ny · GitHub セキュリティ＆プライバシー関連 ヤフオク「中古スマホ出品時、マイナ証明書失効を」初期化だけでは消えない - ITmedia NEWS : 個人番号に限らず NFC 絡みは要注意だな Googleが「Google Drive」にスパムフォルダーを導入へ ～悪意あるファイルの混入を抑制 - 窓の杜 : 覗き魔 Google ウィズセキュア、富士通Japanを通じて医療機関向けにセキュリティソリューション提供 - ZDNET Japan Malware turns home routers into proxies for Chinese state-sponsored hackers | Ars Technica 中国政府の支援を受けたサイバー攻撃グループ「カマロドラゴン」がルーターにバックドアを設けネットワーク侵害を行っている - GIGAZINE New ZIP domains spark debate among cybersecurity experts Security Risks of New .zip and .mov Domains - Schneier on Security Googleの「.zip」ドメインに懸念の声 ～フィッシングに悪用されかねない問題 - やじうまの杜 - 窓の杜 フリーのパスワード管理ツール「KeePass」に脆弱性、マスターパスワードを復元される - 窓の杜 : KeePassXC にはとりあえず影響はないらしい 知財関連 無形文化遺産を祝うWiki Loves Living Heritage（がもうすぐ終わる） - YAMDAS現更新履歴 「Steam Deck」開発元のValveが特許権侵害で訴えられる - GIGAZINE Helping Flickr members understand what Flickr is for with refreshed community guidelines. | Flickr Blog : CC Licenses 絡みの言及あり Linux または Ubuntu に関する話題 Ubuntu 24.04 その1 - Ubuntu 24.04 LTSのリリーススケジュール - kledgeb Microsoft 製品（Azure や Windows 等） に関する話題 Microsoft will take nearly a year to finish patching new 0-day Secure Boot bug | Ars Technica Microsoft Secure Boot Bug - Schneier on Security Go 言語関連 TIL: Go Response Body MUST be closed, even if you don’t read it - Manish R Jain ソケット通信の仕組みをスライド図解と Go 実装でまとめてみる Python/Rust/Go/JavascriptでGmailを自動送信 - Qiita ついに TinyGo で enconding/json が使えるようになったので試してみた - sago35の日記 Goとエラーハンドリング慣習について Java 言語関連 Release v3.1.0 · spring-projects/spring-boot · GitHub Release v3.0.7 · spring-projects/spring-boot · GitHub Release v2.7.12 · spring-projects/spring-boot · GitHub Release v2.6.15 · spring-projects/spring-boot · GitHub Release v2.5.15 · spring-projects/spring-boot · GitHub 天文関連 NASA’s Webb Finds Water, and a New Mystery, in Rare Main Belt Comet | NASA MIT Tech Review: 巨大ブラックホールを取り巻く降着円盤とジェットを初めて撮影 Generative AI Pale Blue Dot continues investing in its climate vision, with a second $100M fund | TechCrunch Toyota Japan exposed millions of vehicles\u0026rsquo; location data for a decade | TechCrunch Thunderbird for Android / K-9 Mail: April Progress Report MIT Tech Review: カゴメ格子を持つ超伝導体の電子の直接観測に初成功＝東大 「Microsoft 365 Copilot」が「Microsoft Whiteboard」や「OneNote」に拡大 - 窓の杜 ［速報］Android StudioもチャットAIを搭載へ「Android Studio Bot」発表。コードの自動生成、クラッシュしたログの解析、自然言語での質問など。Google I/O 2023 － Publickey MIT Tech Review: チャットGPTは ロビー活動をどう変えるか 「ChatGPT」がWeb上の情報を使った回答に対応 ～ベータ版としてリリース - 窓の杜 GoogleのAIチャット「Bard」、要約機能を強化。回答にはソースへのリンクも - 窓の杜 グーグルの新たな大規模言語モデル「PaLM 2」は何が変わったか - ZDNET Japan 「ChatGPT Plus」、ウェブブラウジングと70種類以上のプラグインを追加へ - ZDNET Japan 画像生成AI「Stable Diffusion」の公式有料アプリ「DreamStudio」の無料版「StableStudio」がオープンソースで公開される - GIGAZINE オモシロ捏造から見える生成系AIの真価｜塚本 牧生 OpenAI launches an official ChatGPT app for iOS | TechCrunch その他 開発並びにデプロイにドキュメンテーションを統合するEtsyのDocs-as-codeの取り組み - YAMDAS現更新履歴 京セラ、個人向け携帯端末事業から撤退。日本メーカーはわずか3社に : ありゃりゃーん。次買うときは京セラって思ってたのに MIT Tech Review: 使用済み風力タービンの羽根がゴミの山に？ 再生可能にする新手法 プッシュ保護の一般提供(GA)を開始、すべてのパブリックリポジトリで無料利用が可能に - GitHubブログ GitHub、コード検索とコードビューの一般提供(GA)を開始 - GitHubブログ スマートウォッチの先駆者「Pebble」の創設者がBlackberryライクな物理キーボード付きポケットコンピューター「Beepberry」を発表 - GIGAZINE 「惰性でやっている」「ビジョンはない」 30年続くソフトウェア稼業「秀丸」がいまも最前線に立ち続ける理由 | Coral Capital 「もしマイクロソフトから買収提案があったら？」 人気テキストエディタ「秀丸」開発者に聞く“スタートアップ観” | Coral Capital 猫がキーボードを踏む問題 – Jun Mukai\u0026rsquo;s blog : ノートPCスタンドってのがあるのか 素粒子物理学に必須級のソフトウェア「FORM」の保守はたった1人の老科学者が担っている、新しい機器では使えなくなり研究が停滞する危険性 - GIGAZINE Envisioning a Simplified Intel Architecture for the Future "
    },
    {
      "title": "Zap と go-log を試す",
      "section": "golang",
      "description": "Bluesky の公式 Go パッケージで go-log が使われてるので試してみる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/zap-and-golog/",
      "published": "2023-05-20T09:14:08+00:00",
      "update": "2023-05-21T01:36:26+00:00",
      "content": "最近 Bluesky で遊んでいるのだが，これの公式 Go パッケージってのがあって\nbluesky-social/indigo: Go source code for Bluesky\u0026rsquo;s atproto services. NOT STABLE (yet) 中を見ると logger として ipfs/go-log パッケージを使ってるみたいなのね。 ipfs/go-log パッケージは zap のラッパーになっていて，特にログ出力周りの取り回しが楽になるよう設計されているっぽい。\nzap は高速な構造化ロギングを謳っている人気のログ・パッケージである。 といっても，ベンチマークを見る限り\nPackage Time Time % to zap Objects Allocated zap 1744 ns/op +0% 5 allocs/op zap (sugared) 2483 ns/op +42% 10 allocs/op zerolog 918 ns/op -47% 1 allocs/op go-kit 5590 ns/op +221% 57 allocs/op slog 5640 ns/op +223% 40 allocs/op apex/log 21184 ns/op +1115% 63 allocs/op logrus 24338 ns/op +1296% 79 allocs/op log15 26054 ns/op +1394% 74 allocs/op via uber-go/zap: Blazing fast, structured, leveled logging in Go. スピードだけなら rs/zerolog のほうがだいぶ速いように見えるのだが\u0026hellip; まぁ，でも， gRPC や分散システムなんかでは事実上の標準みたいな感じになってるし，柔軟なカスタマイズができるためクラウドのログ管理サービスとかとも相性がいいらしい。\n私個人は rs/zerolog 推しだが indigo を使うなら zap \u0026amp; go-log も使えるようになっておこうというわけで試してみることにした。 今回は特に拙作の goark/errs との相性という観点で評価してみる。\nZap を試してみる いきなりサンプルコードから。\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;github.com/goark/errs\u0026#34; \u0026#34;go.uber.org/zap\u0026#34; ) func checkFileOpen(path string) error { file, err := os.Open(path) if err != nil { return errs.New( \u0026#34;file open error\u0026#34;, errs.WithCause(err), errs.WithContext(\u0026#34;path\u0026#34;, path), ) } defer file.Close() return nil } func main() { logger := zap.NewExample() defer logger.Sync() path := \u0026#34;not-exist.txt\u0026#34; if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { logger.Error(\u0026#34;error in checkFileOpen function\u0026#34;, zap.Error(err), zap.String(\u0026#34;file\u0026#34;, path)) } } これを実行すると\n$ go run sample1.go | jq . { \u0026#34;level\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;error in checkFileOpen function\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;errorVerbose\u0026#34;: \u0026#34;{\\\u0026#34;Type\\\u0026#34;:\\\u0026#34;*errs.Error\\\u0026#34;,\\\u0026#34;Err\\\u0026#34;:{\\\u0026#34;Type\\\u0026#34;:\\\u0026#34;*errors.errorString\\\u0026#34;,\\\u0026#34;Msg\\\u0026#34;:\\\u0026#34;file open error\\\u0026#34;},\\\u0026#34;Context\\\u0026#34;:{\\\u0026#34;function\\\u0026#34;:\\\u0026#34;main.checkFileOpen\\\u0026#34;,\\\u0026#34;path\\\u0026#34;:\\\u0026#34;not-exist.txt\\\u0026#34;},\\\u0026#34;Cause\\\u0026#34;:{\\\u0026#34;Type\\\u0026#34;:\\\u0026#34;*fs.PathError\\\u0026#34;,\\\u0026#34;Msg\\\u0026#34;:\\\u0026#34;open not-exist.txt: no such file or directory\\\u0026#34;,\\\u0026#34;Cause\\\u0026#34;:{\\\u0026#34;Type\\\u0026#34;:\\\u0026#34;syscall.Errno\\\u0026#34;,\\\u0026#34;Msg\\\u0026#34;:\\\u0026#34;no such file or directory\\\u0026#34;}}}\u0026#34;, \u0026#34;file\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } 案の定 zap.Error() ではエラーメッセージを吐き出すだけのようだ。 errorVerbose 項目は Error() メソッドを %+v 書式で出力してる感じなのだろうか。 でも，テキストとして出力してるんじゃ「構造化」とは言えない。 困ったね。\nzapcore.ObjectMarshaler Zap には zap.Object() 関数があって，これを使えば内部構造を出力することができるのだが，そのためには対象のオブジェクトが zapcore.ObjectMarshaler 型の interface を満たす必要がある。\ntype ObjectMarshaler interface { MarshalLogObject(ObjectEncoder) error } 一瞬 errs.Error 型にこのメソッドを生やすことも考えたのだが，汎用エラー構造体が特定のサードパーティ・パッケージに依存するのは面白くない。\nzapobject モジュールを作った というわけで，新たに goark/errs/zapobject モジュールを作った。\nzapobject.New(err) という感じにエラーインスタンスをラップして使う。\nちなみに errs と zapobject は同一リポジトリにあるが，モジュールを分けている。 errs は zapobject に依存しないため errs の依存関係を汚さずに zap.Object() 関数に対応できる。 ついでに言うと， errs.Error 型以外の error 型についても zapobject.New() でラップすれば Unknown() メソッドの挙動に従って可能な限り構造化して出力できるようにしている。\nでは，先程のコードを書き換えよう（一部省略している）。\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;github.com/goark/errs\u0026#34; \u0026#34;github.com/goark/errs/zapobject\u0026#34; \u0026#34;go.uber.org/zap\u0026#34; ) func checkFileOpen(path string) error { ... } func main() { logger := zap.NewExample() defer logger.Sync() path := \u0026#34;not-exist.txt\u0026#34; if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { logger.Error(\u0026#34;error in checkFileOpen function\u0026#34;, zap.Object(\u0026#34;error\u0026#34;, zapobject.New(err)), zap.String(\u0026#34;file\u0026#34;, path)) } } これを実行すると\n$ go run sample2.go | jq . { \u0026#34;level\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;error in checkFileOpen function\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errs.Error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errors.errorString\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error\u0026#34; }, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*fs.PathError\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;syscall.Errno\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;no such file or directory\u0026#34; } }, \u0026#34;context\u0026#34;: { \u0026#34;function\u0026#34;: \u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } }, \u0026#34;file\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } となった。 うんうん。 ちゃんとエラー構造が出力されているね。\nipfs/go-log を試してみる Zap で拙作の errs.Error 型の構造を出力できるようになったので，次は ipfs/go-log を試してみる。 こちらもいきなりサンプルコードから。\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;github.com/goark/errs\u0026#34; \u0026#34;github.com/goark/errs/zapobject\u0026#34; \u0026#34;github.com/ipfs/go-log/v2\u0026#34; ) func checkFileOpen(path string) error { ... } func main() { logger := log.Logger(\u0026#34;sample\u0026#34;) path := \u0026#34;not-exist.txt\u0026#34; if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { logger.Errorw(\u0026#34;error in checkFileOpen function\u0026#34;, \u0026#34;error\u0026#34;, zapobject.New(err), \u0026#34;file\u0026#34;, path) } } log.Logger() 関数で生成される logger の中身はは以下のようになっている。\n// ZapEventLogger implements the EventLogger and wraps a go-logging Logger type ZapEventLogger struct { zap.SugaredLogger // used to fix the caller location when calling Warning and Warningf. skipLogger zap.SugaredLogger system string } 見ての通り中身は zap.SugaredLogger 型になっている。 このため構造化ログを出力する場合は Errorw() などのメソッドを使う必要がある。 zap.SugaredLogger はちょっと\u0026hellip; というのであれば Deshugar() すればよい。\nlogger.Desugar().Error(\u0026#34;error in checkFileOpen function\u0026#34;, zap.Object(\u0026#34;error\u0026#34;, zapobject.New(err)), zap.String(\u0026#34;file\u0026#34;, path)) さて，これを実行してみる。\n$ go run sample3.go | jq . 2023-05-20T17:04:40.794+0900 ERROR sample sample3/sample3.go:30 error in checkFileOpen function {\u0026#34;error\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;*errs.Error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;error\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;*errors.errorString\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error\u0026#34;}, \u0026#34;cause\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;*fs.PathError\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;cause\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;syscall.Errno\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;no such file or directory\u0026#34;}}, \u0026#34;context\u0026#34;: {\u0026#34;function\u0026#34;: \u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;not-exist.txt\u0026#34;}}, \u0026#34;file\u0026#34;: \u0026#34;not-exist.txt\u0026#34;} おぅふ orz\nipfs/go-log は出力先や出力フォーマットを環境変数で制御する。 主な環境変数は以下の通り\n環境変数 値 GOLOG_LOG_LEVEL debug, info, warn, error, dpanic, panic, fatal GOLOG_FILE ファイルに出力する場合はパスをセットする GOLOG_OUTPUT stdout, stderr, file GOLOG_LOG_FMT color, nocolor, json GOLOG_LOG_LEVEL はシステムごとに指定できる。\nexport GOLOG_LOG_LEVEL=\u0026#34;error,subsystem1=info,subsystem2=debug\u0026#34; GOLOG_OUTPUT は複数の出力先を指定できる。 + で区切って指定すればよい。\nexport GOLOG_FILE=\u0026#34;/path/to/my/file.log\u0026#34; export GOLOG_OUTPUT=\u0026#34;stderr+file\u0026#34; というわけで，環境変数を指定して改めて起動してみる。\n$ export GOLOG_LOG_FMT=\u0026#34;json\u0026#34; $ export GOLOG_OUTPUT=\u0026#34;stdout\u0026#34; $ go run sample3.go | jq . {\u0026#34;level\u0026#34;:\u0026#34;error\u0026#34;,\u0026#34;ts\u0026#34;:\u0026#34;2023-05-20T17:35:29.669+0900\u0026#34;,\u0026#34;logger\u0026#34;:\u0026#34;sample\u0026#34;,\u0026#34;caller\u0026#34;:\u0026#34;sample3/sample3.go:30\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;error in checkFileOpen function\u0026#34;,\u0026#34;error\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;*errs.Error\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;,\u0026#34;error\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;*errors.errorString\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;file open error\u0026#34;},\u0026#34;cause\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;*fs.PathError\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;open not-exist.txt: no such file or directory\u0026#34;,\u0026#34;cause\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;syscall.Errno\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;no such file or directory\u0026#34;}},\u0026#34;context\u0026#34;:{\u0026#34;function\u0026#34;:\u0026#34;main.checkFileOpen\u0026#34;,\u0026#34;path\u0026#34;:\u0026#34;not-exist.txt\u0026#34;}},\u0026#34;file\u0026#34;:\u0026#34;not-exist.txt\u0026#34;} { \u0026#34;level\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;ts\u0026#34;: \u0026#34;2023-05-20T17:35:29.669+0900\u0026#34;, \u0026#34;logger\u0026#34;: \u0026#34;sample\u0026#34;, \u0026#34;caller\u0026#34;: \u0026#34;sample3/sample3.go:30\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;error in checkFileOpen function\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errs.Error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errors.errorString\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error\u0026#34; }, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*fs.PathError\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;syscall.Errno\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;no such file or directory\u0026#34; } }, \u0026#34;context\u0026#34;: { \u0026#34;function\u0026#34;: \u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } }, \u0026#34;file\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } んー。 何故か標準エラー出力にも出るなぁ。 まぁ，とりあえず標準出力に JSON 形式で出力できた。\n環境変数ではなくコードで設定したい場合もあるだろう。 この場合は\nfunc main() { cfg := log.GetConfig() cfg.Format = log.JSONOutput cfg.Stderr = false cfg.Stdout = true cfg.Level = log.LevelDebug log.SetupLogging(cfg) logger := log.Logger(\u0026#34;sample\u0026#34;) path := \u0026#34;not-exist.txt\u0026#34; if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { logger.Desugar().Error(\u0026#34;error in checkFileOpen function\u0026#34;, zap.Object(\u0026#34;error\u0026#34;, zapobject.New(err)), zap.String(\u0026#34;file\u0026#34;, path)) } } という感じに設定できる。\n\u0026ldquo;caller\u0026rdquo; は要らん zap.NewExample() で logger を生成したときには気づかなかったが，実際にはログ出力に既定で \u0026quot;caller\u0026quot; 項目が付くんだねぇ。 ファイル名と行番号が付くのはちょっと\u0026hellip; と思って外し方を探してみたが\nlogger := log.Logger(\u0026#34;sample\u0026#34;).Desugar().WithOptions(zap.WithCaller(false)) という感じに Desugar() した上で WithOptions() を使って明示的に外さないといけないみたい。 んー。 そこまでするのはなぁ。 logger の型が変わっちゃうし。\nいや\nlogger := log.Logger(\u0026#34;sample\u0026#34;) logger.SugaredLogger = *(logger.Desugar().WithOptions(zap.WithCaller(false)).Sugar()) って感じにすればいいのかな。 これで動かしてみよう。\n$ go run sample3b.go | jq . { \u0026#34;level\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;ts\u0026#34;: \u0026#34;2023-05-20T18:01:52.106+0900\u0026#34;, \u0026#34;logger\u0026#34;: \u0026#34;sample\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;error in checkFileOpen function\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errs.Error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errors.errorString\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error\u0026#34; }, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*fs.PathError\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;syscall.Errno\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;no such file or directory\u0026#34; } }, \u0026#34;context\u0026#34;: { \u0026#34;function\u0026#34;: \u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } }, \u0026#34;file\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } おー。 消えた消えた。\nまぁ，既に zap をバリバリにカスタマイズして使ってる人には ipfs/go-log はあまりメリットなさそうだけど，これから zap を簡易に使いたいって人にはアリな選択肢かも知れない。\nじゃぁ，自作ツールの logger を載せ換えますかね。\nブックマーク GoのロギングライブラリzapのTips - Carpe Diem\nGo のロギングライブラリ zap について\ngolangの高速な構造化ログライブラリ「zap」の使い方 - Qiita\nGo 言語用エラーハンドリング・パッケージ\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n"
    },
    {
      "title": "コマンドラインで Mastodon に投稿する",
      "section": "remark",
      "description": "これで出力の基本機能はできたので，今後は入力側の設計と実装だな。先は長い。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/05/toot-to-mastodon/",
      "published": "2023-05-14T04:20:56+00:00",
      "update": "2023-05-14T04:21:10+00:00",
      "content": "今年の GW は（色々と大人の事情で）遠くに遊びに行くこともなく，ときどき自転車を乗り回す以外はおうちでコードを書くか，その辺に寝転がってラノベか Web 小説を読み耽るという，自堕落な生活を送っていた。\nで，まぁ，その成果として以下の CLI ツールをリリースした。\ngoark/toolbox: A collection of miscellaneous commands 今のところ Mastodon と Bluesky への投稿機能のみ実装している。 最終的には自コンテンツ（主にブログ記事と Flickr 写真）の更新情報の投稿を自動化できればと思っているが，先は長い。\nこのうち今回は Mastodon への投稿機能について，覚え書きを兼ねて，記しておく。\n今どきの流行りは Bluesky のほうぢゃねーのかとお思いでしょうが，利用している公式の Go 用パッケージの作りが微妙で，ちょっとしたことでエラーを吐くためイマイチな出来。 みんな，あんな雑なエラーハンドリングでよく使えてるよなぁ。 とりあえず 400 を返せばいいみたいなのはどうにかしてほしい。 大きな画像ファイルをアップロードしてエラーを返さないのはもっと困るけど。\n話がそれた。 では本題へ。\nアプリケーションの登録 Mastodon のハンドリングには以下のパッケージを使わせてもらっている。 ありがたや 🙇\nmattn/go-mastodon: mastodon client for golang だがしかし，最初の「認証」部分でいきなり躓く。 あちこちの解説ページを覗いてみるに，どうやら Mastodon の認証は2段階あるらしい。\nサーバに対してアプリケーション登録を行う ユーザ認証を行い，アカウントに対してアプリケーションを認証する 1 を行うとクライアントIDとそのシークレットがもらえる。 1 でもらった情報を使って 2 を行うとアクセストークンがもらえる。 さらに 2 の認証にはパスワード認証と OAuth 認証の2つが用意されていて，後者についてはブラウザ操作が必要（？） アクセストークンは永続的に有効らしい。 1 と 2 で取得した情報を使って Mastodon サーバに対して各種操作を行える。 \u0026hellip;という感じ。\nここまで辿り着くのにかなり試行錯誤してしまった。\n拙作 toolbox では mastodon register コマンドで 1, 2 の処理をまとめて行う。\n$ toolbox mastodon register -h Register Mastodon application. Usage: toolbox mastodon register [flags] Aliases: register, reg Flags: -h, --help help for register Global Flags: --bluesky-config string Config file for Bluesky (default \u0026#34;/home/username/.config/toolbox/bluesky.json\u0026#34;) --cache-dir string Directory for cache files (default \u0026#34;/home/username/.cache/toolbox\u0026#34;) --config string Config file (default \u0026#34;/home/username/.config/toolbox/config.yaml\u0026#34;) --debug for debug --log-dir string Directory for log files (default \u0026#34;/home/username/.cache/toolbox\u0026#34;) --log-level string Log level [nop|error|warn|info|debug|trace] (default \u0026#34;nop\u0026#34;) --mastodon-config string Config file for Mastodon (default \u0026#34;/home/username/.config/toolbox/mastodon.json\u0026#34;) 取得したアクセストークンは --mastodon-config オプションで指定したファイルに JSON 形式で保存される。 具体的には以下のように，サーバ名，ユーザID，パスワードを尋ねるプロンプトが表示されるので入力していけば OK。\n$ toolbox mastodon register Server (e.g. mastodon.social) \u0026gt; fedibird.com User (email address) \u0026gt; jphn.do@exsample.com Password \u0026gt; your_password server: https://fedibird.com application name: github.com/goark/toolbox website: https://github.com/goark/toolbox scopes: read write follow output: /home/username/.config/toolbox/mastodon.json 成功すれば 設定＞アカウント＞認証済みアプリ に認証されたアプリケーションが表示される（表示の仕方はサーバによって違うかも）。\n認証済みアプリ 動作確認のために自身の profile を表示してみる。\n$ toolbox mastodon profile Username: spiegel User ID (full): @spiegel@fedibird.com URL: https://fedibird.com/@spiegel Display name: Spiegel@がんばらない Created at: 2022-11-25 00:00:00 +0000 UTC Posts: 2289 Follows: 46 Followers: 98 \u0026lt;p\u0026gt;mstdn.jp から移住。職業プログラマ。\u0026lt;a href=\u0026#34;https://fedibird.com/tags/golang\u0026#34; class=\u0026#34;mention hashtag\u0026#34; rel=\u0026#34;tag\u0026#34;\u0026gt;#\u0026lt;span\u0026gt;golang\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; と \u0026lt;a href=\u0026#34;https://fedibird.com/tags/flickr\u0026#34; class=\u0026#34;mention hashtag\u0026#34; rel=\u0026#34;tag\u0026#34;\u0026gt;#\u0026lt;span\u0026gt;flickr\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; で遊んでいる人。暖かくなったので自転車で「お散歩カメラ」再開。\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;情報収集がメインだが最近は胡乱な発言もチラホラあるので，そこは許して（フォローの付け外しはご自由に）。フォローは特に意味なく頻繁に入れ換えますのであしからず。\u0026lt;/p\u0026gt; よーし，うむうむ，よーし。\nMastodon に投稿する 以上で対象のサーバに toolbox でアクセスできるようになったので，さっそく何か投稿してみる。 Mastodon への投稿は mastodon post でできる。\n$ toolbox mastodon post -h Post message to Mastodon. Usage: toolbox mastodon post [flags] Aliases: post, pst, p, toot, tt, t Flags: --edit Edit message -h, --help help for post -i, --image-file strings Image file -m, --message string Message --pipe Input from standard-input -s, --spoiler-text string Spoiler text -v, --visibility string Visibility [public|unlisted|private|direct] (default \u0026#34;public\u0026#34;) Global Flags: --bluesky-config string Config file for Bluesky (default \u0026#34;/home/username/.config/toolbox/bluesky.json\u0026#34;) --cache-dir string Directory for cache files (default \u0026#34;/home/username/.cache/toolbox\u0026#34;) --config string Config file (default \u0026#34;/home/username/.config/toolbox/config.yaml\u0026#34;) --debug for debug --log-dir string Directory for log files (default \u0026#34;/home/username/.cache/toolbox\u0026#34;) --log-level string Log level [nop|error|warn|info|debug|trace] (default \u0026#34;nop\u0026#34;) --mastodon-config string Config file for Mastodon (default \u0026#34;/home/username/.config/toolbox/mastodon.json\u0026#34;) -m はコマンドライン上で1行メッセージを投稿するのに使うオプション --pipe は標準入力からの入力を投稿するオプション --edit は CUI で複数行編集ができるオプション -m, --pipe, --edit は排他オプションで同時に指定できない -i は画像ファイルをアップローするのに使うオプション。複数指定可能 -v は表示範囲を指定するオプション たとえばこんな感じで投稿する。\n$ toolbox mastodon post --edit -i lake-shinjiko.jpg -v direct Input \u0026#39;Ctrl+J\u0026#39; or \u0026#39;Ctrl+Enter\u0026#39; to submit message Input \u0026#39;Ctrl+D\u0026#39; with no chars to stop 1\u0026gt;はろー，ふぇでぃばーす！ 2\u0026gt;https://flic.kr/p/2nSUmaa 3\u0026gt; https://fedibird.com/@spiegel/110364957384850439 するとこんな感じに表示される。\nMastodon へ投稿 よしよし。 ちなみに複数行編集には以下のパッケージを利用している。\nhymkor/go-multiline-ny: Readline package supporting multi-lines マジ便利。 ありがたや 🙇\nMastodon は表示範囲を指定できるのがいいよね。 とりあえず試し撃ちなら DM で投げればいい。 Bluesky は（多分まだ）表示範囲を指定できないのでテスト用のゴミ投稿も全部 TL に表示されてしまう。 しょうがないから招待コード使ってデバッグ用のアカウントをひとつ確保する羽目になった。\nさて，これで出力の基本機能はできたので，今後は入力側の設計と実装だな。 先は長い。\nブックマーク マストドンのタイムラインをgo-mastodon のWebSocketを使用し取得する - Qiita\nmastodonのaccess tokenをauthorization_codeで取得する例 - Qiita\nMastodon API の叩き方 · GitHub\nmastodonのtootを原始人くんが喋ってくれるbot作った - Qiita\nFediverse 関連のブックマーク\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n"
    },
    {
      "title": "2023-05-14 のブックマーク",
      "section": "bookmarks",
      "description": "「マイクロソフト、Rust言語による開発を含む初めてのWindowsカーネルをInsiderプログラム参加者向けに提供開始」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2023/05/14-bookmarks/",
      "published": "2023-05-14T01:56:20+00:00",
      "update": "2023-05-21T01:15:08+00:00",
      "content": "リリース情報 Release v0.11.6 · nyaosorg/go-readline-ny · GitHub Release v0.11.7 · nyaosorg/go-readline-ny · GitHub Release v0.12.0 · nyaosorg/go-readline-ny · GitHub : 補完機能が入った！ The Document Foundation releases LibreOffice 7.5.3 Community - The Document Foundation Blog Announcement of LibreOffice 7.4.7 Community - The Document Foundation Blog 「LibreOffice 7.4」系の最終バージョン「LibreOffice 7.4.7 Community」が公開 - 窓の杜 「LibreOffice 7.5.3 Community」が公開 ～フリーのオフィス統合環境の最新版 - 窓の杜 ピクチャーインピクチャーを強化した「Firefox 113」が公開 ～アニメAVIF画像にも対応 - 窓の杜 Release v1.9.4 · sashabaranov/go-openai · GitHub Release 1.40.1 · tailscale/tailscale · GitHub Release April 2023 Recovery 1 · microsoft/vscode · GitHub Release April 2023 Recovery 2 · microsoft/vscode · GitHub Release v0.8.0 · hymkor/go-multiline-ny · GitHub Release v4.1 · gitextensions/gitextensions · GitHub Release v1.2023.7 · plantuml/plantuml · GitHub セキュリティ＆プライバシー関連 5分でできる。Windowsの脆弱性を「Vuls」で今すぐチェック！ | フューチャー技術ブログ Microsoft、PCを乗っ取り秘密裏に操る「BlackLotus」ブートキットへの対策を順次展開 - 窓の杜 Milestone for Nitrokey 3 Achieved: OpenPGP Card, One-Time Passwords and USB-C Availability! | Nitrokey SIMスワップ詐欺による暗号資産口座への不正送金事案についてまとめてみた - piyolog 著名人を狙った金銭目的のSNS公式アカウントののっとりについてまとめてみた - piyolog 知財関連 DLARC Radio Library Surpasses 75,000 Items of Ham Radio, Shortwave History | Internet Archive Blogs Court Sentences Man for Selling Pirated Textbook PDFs * TorrentFreak 学術出版社エルゼビアが掲載料引き下げを拒否したため学術委員会の全科学者が辞任 - GIGAZINE 画像生成AIの「悪用」に絵師たちが反発、pixiv上でイラスト非公開に…福井健策弁護士に聞く - 弁護士ドットコム Linux または Ubuntu に関する話題 Ubuntu 23.04 日本語 Remix リリース | Ubuntu Japanese Team Ubuntu 23.04 その29 - Ubuntu 23.04 日本語 Remixがリリースされました・ディスクイメージのダウンロード - kledgeb Microsoft 製品（Azure や Windows 等） に関する話題 Microsoftクラウドサービスのドメインが大規模引っ越し ～「cloud.microsoft」へ集約 - 窓の杜 日本語入力に問題、「Windows 11 バージョン22H2」で音声認識などが途切れる - 窓の杜 Windows 11 で画面分割を実施する方法とは！？詳しい使い方を徹底解説 | Windows 11 関連 |【NECフィールディング】 VPNの速度が異常に遅い不具合。Windows11 22H2にて発生。KB5026372 / KB5025305に起因 | ニッチなPCゲーマーの環境構築Z マイクロソフト、Rust言語による開発を含む初めてのWindowsカーネルをInsiderプログラム参加者向けに提供開始 － Publickey Go 言語関連 Go 言語を使って Azure Blob Storage にコンテナーを作成する Goのビルドタグの書き方が// +buildから//go:buildに変わった理由 【Vue】×【Go】×【Firebase】ログイン機能の実装例 - Qiita GitHub - SherClockHolmes/webpush-go: Web Push API Encryption with VAPID support. Building Go applications with the Microsoft Graph Go SDK, now generally available SemanticDiff 0.8.3: Support For Go And More Go Developer Survey 2023 Q1 Results - The Go Programming Language 天文関連 APOD: 2023 May 11 - Fomalhaut\u0026rsquo;s Dusty Debris Disk フォーマルハウトを囲むデブリ円盤の全体像　ウェッブ宇宙望遠鏡の観測で明らかに | sorae 宇宙へのポータルサイト : 相変わらず広告塗れで読む気が失せるサイト\u0026hellip; 日本の暦と国の重要文化財『星学手簡』 - 国立天文台暦計算室 Generative AI Azure.AI.OpenAI パッケージで OpenAI と Azure OpenAI Service に繋ぐときの違い : .NET だれでもAIメーカー | だれでもAIメーカー ChatGPTは文字コードをどのように解釈しているか　Unicodeの「日本語認識」「括弧の抽出」「旧字体と新字体の変換」を実験してみた - ログミーTech ［速報］Google、自然言語でAIと対話するだけで誰でもアプリが作れる「Duet AI for AppSheet」発表。Google I/O 2023 － Publickey ［速報］Google Cloudでのシステム開発について何でもAIが教えてくれる「Duet AI for Google Cloud」発表。Google I/O 2023 － Publickey ［速報］Googleの生成的AI「Bard」が日本語に対応。ウェイトリストもなくなり、すぐに利用できるように。Google I/O 2023 － Publickey GitLabがGoogle CloudとAI分野で提携、AIをGitLabツール群に統合。コードの自動生成、コードにある脆弱性の説明、コードレビュアーの推薦など実現 － Publickey ［速報］Google、責任あるAIを実現するとして、画像にウォーターマークとメタデータの埋め込みを進めると発表。Google I/O 2023 － Publickey Will A.I. Become the New McKinsey? | The New Yorker ChatGPT Is a Blurry JPEG of the Web | The New Yorker Ted Chiang on the Risks of AI - Schneier on Security Please don\u0026rsquo;t upload my code on GitHub その他 ジョブを細かく分けてGitHub Actionsのテストを効率化する Microsoft (有志) | Zenn ヴィタリック・ブテリン『イーサリアム　若き天才が示す暗号資産の真実と未来』を恵贈いただいた - YAMDAS現更新履歴 アメリカでもコンピュータ雑誌は終焉を迎えようとしている - YAMDAS現更新履歴 ダグラス・ラシュコフの新刊『デジタル生存競争』が来月出るぞ！ - YAMDAS現更新履歴 SOQLのクエリをER図として可視化するツールを作ってみた Deno、JavaScript/TypeScriptのためのデータストア「Deno KV」発表。Deno本体にSQLiteを統合、分散環境では強い一貫性も提供 － Publickey Webブラウザ上でNode.js環境を実現する「WebContainer」、iOS/iPadOS版Safariに対応。iPhone/iPadでWeb開発環境が起動 － Publickey CGI からメール送信するときのエンベロープ From の変更 - 電気ウナギ的○○ 【VRChatワールド用】青空文庫システム - スズ製作所 - BOOTH VR空間に“自分の書斎”が持てる 「青空文庫システム」誕生 1万6000冊以上から読書が可能｜よろず〜ニュース メタバースで図書館体験「NDC Library」　青空文庫活用で1万6377冊: J-CAST トレンド あなたは全部知っていますか？プログラミングの業界用語30選 | POSTD : 用語つか隠語 RustでWasm Runtimeを実装してみた GitHub code search is generally available | The GitHub Blog トゥギャッターがTwitter APIのエンタープライズプラン利用契約を正式に締結、さらに「Twilog」を買収し統合へ｜トゥギャッター株式会社のプレスリリース 「Dart 3」が正式リリース。100％Nullセーフティな言語に、ペイメント、ロケーションなどのAPIも直接呼び出し可能に。Google I/O 2023 － Publickey 「Flutter 3.10」正式リリース。カラースキームの自動生成などMaterial 3対応強化、新レンダリングエンジン、WebAssembly対応など。Google I/O 2023 － Publickey Developer eXperience Day 2023 日本CTO協会主催 | Developer eXperience Day 2023 - connpass トルコ・シリア地震後の中東情勢 | 東京大学 "
    },
    {
      "title": "田んぼの生態系",
      "section": "remark",
      "description": "最近のお散歩カメラの成果",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/05/ecosystem-of-rice-paddies/",
      "published": "2023-05-13T12:45:09+00:00",
      "update": "2023-05-13T12:53:23+00:00",
      "content": "私の周辺では GW 前からようやく田起こしが始まって，水を入れて代掻きまで終わってるところもチラホラ，という感じ。 これに伴って田んぼ周辺の鳥たちの活動も活発になり，最近は鳥を撮って遊んでいる。\nというわけで，この頃のお散歩カメラの成果をいくつか紹介してみる。\n今日のバードウォッチング | Flickr たぶんイソヒヨドリのオス。 逆光で真っ黒になるかなと思ったがカメラの性能がよかったらしい（笑） 結構お気に入りの構図。\n紅花詰草 (crimson clover) | Flickr 子供の頃には見かけなかった花なので何だろうと撮ってみたが紅花詰草 (crimson clover) というらしい。 マメ科特有の地中（根）に窒素を固定できる植物で緑肥植物として重宝されているそうな。\n今日のバードウォッチング | Flickr たぶんイソヒヨドリのメス。 シャッターを押した瞬間に飛び立った偶然の産物。 下手の横好きも数撃ちゃ当たるという見本ですな。 最近のお気に入りの1枚。\n今日のバードウォッチング | Flickr トンビがくるりと輪を描いた。 某ラピュタに出てくるかわいそうなロボットではない（笑）\n今日のカエルウォッチング | Flickr 田んぼに水を入れれば当然カエルも出てくるわけさ。\n今日のバードウォッチング | Flickr そしてカエルが出てくればそれを食べるやつも出てくる。 たぶんアオサギ，かな。 残念ながらカエルを咥えているシーンはシャッターのタイミングが合わず撮れなかった。\n今日のバードウォッチング | Flickr たぶんセグロセキレイ。\n今日のバードウォッチング | Flickr そんでムクドリ，かな。\n今どきのトラクターって吊り目だよね | Flickr 今どきのトラクターって吊り目だよね。 ウルトラマンオーブに出てくるサンダーブレスターみたいな 目つきの悪い おっと切れ長の吊り目は個人的に萌え要素である。 闇を抱いて光となる！\n今日のバードウォッチング | Flickr 排気口の上にツバメの巣（食べられないほう）。 巣の中にツバメが居るのがお分かりだろうか。 もう卵を温めてるのかな？ ストレスにならんよう近寄らんとこ。\n今日のバードウォッチング | Flickr これは私にも分かる。 スズメだな。 スズメのお宿は竹林にて。 いや，笹だけど。\n今日のバードウォッチング | Flickr よく見たらカルガモ。 なんちうか，露天風呂につかってるおっさんに見える（笑）\n\u0026hellip;というわけで，田んぼの周りは今日も賑やかである。\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nウルトラマンオーブ ボイジャー (アーティスト) 円谷プロダクション 2016-07-09 (Release 2016-07-10) CD B01I4WR6B6 (ASIN), 4562293991923 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 平成ウルトラマンではティガとオーブが名作だと思う。\nreviewed by Spiegel on 2018-05-20 (powered by PA-APIv5)\n"
    },
    {
      "title": "2023-05-07 のブックマーク",
      "section": "bookmarks",
      "description": "「Git security vulnerabilities announced」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2023/05/07-bookmarks/",
      "published": "2023-05-07T03:37:57+00:00",
      "update": "2023-05-07T03:41:32+00:00",
      "content": "リリース情報 Release 4.4.13_2 · nyaosorg/nyagos · GitHub Release 4.4.13_3 · nyaosorg/nyagos · GitHub Release v0.7.0 · hymkor/sqlbless · GitHub Release v0.7.1 · hymkor/sqlbless · GitHub 「Thunderbird 102.10.1」がリリース ～4件の不具合を修正 - 窓の杜 [ANNOUNCE] Git v2.40.1 and friends [LWN.net] Git security vulnerabilities announced | The GitHub Blog 「Git」に脆弱性 ～対処した「Git for Windows 2.40.1」が公開 - 窓の杜 Release v0.11.0 · nyaosorg/go-readline-ny · GitHub Release v0.11.2 · nyaosorg/go-readline-ny · GitHub Release v0.11.3 · nyaosorg/go-readline-ny · GitHub Release v0.11.4 · nyaosorg/go-readline-ny · GitHub Release v0.11.5 · nyaosorg/go-readline-ny · GitHub 「Firefox 112.0.2」が公開 ～先週に続く不具合修正 - 窓の杜 Release 1.40.0 · tailscale/tailscale · GitHub Release v6.0.2: Release Wasmtime 6.0.2 (#6274) · bytecodealliance/wasmtime · GitHub Release v7.0.1: Release Wasmtime 7.0.1 (#6275) · bytecodealliance/wasmtime · GitHub Release v8.0.1: Release Wasmtime 8.0.1 (#6276) · bytecodealliance/wasmtime · GitHub Release v0.7.0 · hymkor/go-multiline-ny · GitHub Release v0.7.1 · hymkor/go-multiline-ny · GitHub Release v0.7.2 · hymkor/go-multiline-ny · GitHub Release v1.9.1 · sashabaranov/go-openai · GitHub Release v1.9.2 · sashabaranov/go-openai · GitHub Release April 2023 · microsoft/vscode · GitHub Release v0.8.2 · koki-develop/gat · GitHub Release v1.18.0 · goreleaser/goreleaser · GitHub Release v1.18.1 · goreleaser/goreleaser · GitHub Release v1.18.2 · goreleaser/goreleaser · GitHub Release v0.80.0 · anchore/syft · GitHub セキュリティ＆プライバシー関連 Google Online Security Blog: Google Authenticator now supports Google Account synchronization : これをどうにかしないと\u0026hellip; 米国：セキュリティと言論・表現の自由を脅かすSTOP CSAM法案 | p2ptk[.]org Your Messaging Service Should Not Be a DEA Informant | Electronic Frontier Foundation The EARN IT Bill Is Back, Seeking To Scan Our Messages and Photos | Electronic Frontier Foundation フレッツ光の大規模障害、発端は普通のマルチキャストパケットだった──NTT東西（1/2 ページ） - ITmedia NEWS EFF Now Has Tor Onions | Electronic Frontier Foundation メルペイを不正使用した詐欺事件についてまとめてみた - piyolog 攻撃キャンペーンDangerousPasswordに関連する攻撃動向 - JPCERT/CC Eyes | JPCERTコーディネーションセンター公式ブログ SP 1800-38 (Draft), Migration to Post-Quantum Cryptography (Prelim Draft) | CSRC NIST Draft Document on Post-Quantum Cryptography Guidance - Schneier on Security iPhone、iPad、Macに「緊急セキュリティ対応」、Appleがリリース - 窓の杜 公文書管理システムの大量ファイル消失事故についてまとめてみた - piyolog 知財関連 国立国会図書館（NDL）、「フロッピーディスクの長期保存対策に関する調査報告書」を公開 | カレントアウェアネス・ポータル オードリー・タンが自身の肖像権や著作権を放棄する深い理由 | THE OWNER Linux または Ubuntu に関する話題 まったく新しい特徴を備えたLinuxデスクトップ「Universal Blue」 - ZDNET Japan 「Linux 6.3」がリリース\u0026ndash;より安全、高速に - ZDNET Japan Ubuntu 22.04 その360 - Ubuntu 22.04.3 LTSのリリーススケジュール - kledgeb 信頼性とスピードを兼ね備えた「CachyOS」\u0026ndash;「Arch Linux」を試したい人向け - ZDNET Japan Microsoft 製品（Azure や Windows 等） に関する話題 Download a Windows virtual machine - Windows app development | Microsoft Developer Microsoft is rewriting core Windows libraries in Rust • The Register Windows client roadmap update - Microsoft Community Hub 「Windows 10」の最終バージョンは「バージョン 22H2」 ～2025年10月14日でサポート終了 - 窓の杜 Microsoft広告がTwitterを今後サポートしないと発表してイーロン・マスクが「訴訟の時間だ」と怒りのツイート - GIGAZINE Go 言語関連 それでも僕はGoで最速のJSONデコーダーを作りたかった Golang crypto/ecdh and the TPM GitHub - go-co-op/gocron: Easy and fluent Go cron scheduling. This is a fork from https://github.com/jasonlvhit/gocron GitHub - gogap/aop: Aspect Oriented Programming For Golang GitHub - hymkor/cure: CURE.exe - Color-Unicoded moRE.exe Writing an OS in Go: The Bootloader urfave/cliで選択型の引数解析を実現する How we Integrated a React App into a GO CLI Java 言語関連 JavaでKubernetesを拡張できる「Java Operator SDK」が、Operator Frameworkの正式なサブプロジェクトに － Publickey Seasar2入門メモ＠SAStruts(Super Agile Struts) · 学習B5デスノート 【超初心者向け】Struts2超入門 - 2018年版 - Qiita java、SAStruts、二度押し防止（トークンでのチェック）｜マコトのおもちゃ箱　～ぼへぼへ自営業者の技術メモ～ トランザクショントークン メモ(Hishidama\u0026rsquo;s struts transaction token Memo) Web API の CSRF 対策まとめ【追記あり】 - Qiita 【Struts入門】今さらStruts1.3.10を勉強したのでまとめてみた【初心者向け】 - Qiita Seasar2によるスーパーアジャイルなWeb開発：書籍案内｜技術評論社 : 買うた 天文関連 APOD: 2023 April 21 - Solar Eclipse from Western Australia ニュース - アルマ2計画の実施が始まりました - アルマ望遠鏡 APOD: 2023 April 29 - Solar Eclipse from a Ship SolarWinds Detected Six Months Earlier - Schneier on Security Generative AI Google\u0026rsquo;s Bard AI chatbot can now generate and debug code | TechCrunch ChatGPT で PTA会長あいさつを作った - 電気ウナギ的○○ 【2023年版】OpenAIのAPIキー発行手順！ChatGPTや文章生成AI、画像生成AIを利用可能 | AutoWorker〜Google Apps Script(GAS)とSikuliで始める業務改善入門 Best Practices for API Key Safety | OpenAI Help Center 未ログインでも叩けるAPIエンドポイントにレートリミットを導入する GitHub - modernice/jotbot: JotBot generates the missing documentation for your Go and TypeScript codebase. Powered by AI. 生成AIの法的・倫理的な論点｜水野祐（Tasuku Mizuno）｜note ASCII.jp：画像生成AI「Midjourney」でアニメ絵の似顔絵やアバターを作る方法 (1/3) 無課金のChatGPTを日本語で試してわかった気になるのをやめろ - 西尾泰和のScrapbox MIT Tech Review: チャットGPT、「質問付き」回答で騙される人が減ることが判明 連休こそはじめたい好み丸出しAI画像生成の保存版手順書 - いまからでも遅くない！ツールとして使うAI画像生成 - 窓の杜 ChatGPTには感情があるかも？ - きしだのHatena その他 「ポートピア連続殺人事件」を題材にしたAI技術デモが無料公開されるも…… - 窓の杜 Announcing Rustup 1.26.0 | Rust Blog Webブラウザ上で3D/2Dモデルをぬるぬる動かせる「Babylon.js 6」正式版に。レンダリング性能が最大50倍、WASM化した物理演算エンジン搭載、液体のレンダリングも － Publickey AWS上で開発環境一式、コードリポジトリからテンプレートコード、IDE、CI/CDパイプラインまでを丸ごと提供する「Amazon CodeCatalyst」が正式サービスに － Publickey Creating a multi-user tailnet with GitHub organizations TypeScriptをコンパイルしてWebAssemblyバイナリに、実現を目指す「TypeScript Compilation SIG」をByteCode Allianceが発表 － Publickey GitHub - bitair-org/linker.js: Access Python \u0026amp; C-shared libraries from Node.js g10 Code Becomes a KDE Patron | KDE.news Log into Tailscale with any OIDC-enabled identity provider · Tailscale Box、仮想ホワイトボードツール「Box Canvas」を正式リリース - ZDNET Japan Dropbox lays off 500 employees, 16% of staff, CEO says due to slowing growth and \u0026rsquo;the era of AI\u0026rsquo; | TechCrunch ADSK: The Additional Decryption Subkey sudoとsuがRustで書き直される。メモリ安全性向上へ - PC Watch MIT Tech Review: 蓄電池だけじゃない、送電網向けエネルギー貯蔵の選択肢 Charm 平安堂梅坪 ｜ 新発売「ぷよぷよまんじゅう」のご案内 "
    },
    {
      "title": "Go 1.20.4 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は3件の脆弱性修正を含んでいる。今回は html/template の不具合ばっかりだな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2023/05/go-1_20_4-is-released/",
      "published": "2023-05-03T03:44:26+00:00",
      "update": "2023-05-03T03:44:45+00:00",
      "content": "予告通り Go 1.20.4 がリリースされた。\n[security] Go 1.20.4 and Go 1.19.9 are released 今回は3件の脆弱性修正を含んでいる。 今回は html/template の不具合ばっかりだな。 Web アプリケーションを組んでいる方は特に気をつけましょう。\nCVE-2023-24539 html/template: improper sanitization of CSS values Angle brackets (\u0026lt;\u0026gt;) were not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a \u0026lsquo;/\u0026rsquo; character could result in unexpectedly closing the CSS context and allowing for injection of unexpected HMTL, if executed with untrusted input. via Go 1.20.4 and Go 1.19.9 are released （以下未稿）\nCVE-2023-24540 html/template: improper handling of JavaScript whitespace Not all valid JavaScript whitespace characters were considered to be whitespace. Templates containing whitespace characters outside of the character set \u0026quot;\\t\\n\\f\\r\\u0020\\u2028\\u2029\u0026quot; in JavaScript contexts that also contain actions may not be properly sanitized during execution. via Go 1.20.4 and Go 1.19.9 are released うわぁ，面倒くさい。\n（以下未稿）\nCVE-2023-29400 html/template: improper handling of empty HTML attributes Templates containing actions in unquoted HTML attributes (e.g. \u0026quot;attr={{.}}\u0026quot;) executed with empty input could result in output that would have unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags. via Go 1.20.4 and Go 1.19.9 are released （以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.20.4.linux-amd64.tar.gz）を取ってきてインストールすることを推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.20.4.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.20.4.linux-amd64.tar.gz $ sudo mv go go1.20.4 $ sudo ln -s go1.20.4 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.20.4 linux/amd64 Windows はインストールパッケージを取ってきて直接インストールする。 Scoop 経由でも OK\n複数バージョンの Go コンパイラを扱いたい場合は\n$ go install golang.org/dl/go1.20.4@latest $ go1.20.4 download $ go1.20.4 version go version go1.20.4 linux/amd64 てな感じで導入できる。\nアップデートは計画的に。\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n"
    }
  ]
}
