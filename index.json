{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Go モジュールのバージョン管理",
      "section": "golang",
      "description": "試して壊して試して壊して... を繰り返した成果が今回の記事である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/versioning-of-go-modules/",
      "published": "2019-05-04T04:08:19+00:00",
      "update": "2019-05-04T04:10:27+00:00",
      "content": " 今回の長期休暇を利用して今まで公開したツールやパッケージ類をチューニングしているのだが， Go 1.11 以降から実装されているモジュール対応モード（module-aware mode）のバージョン管理の挙動が（ドキュメントを読んだだけでは）ピンとこなかったので，この際いろいろと試してみることにした。\n試して壊して試して壊して... を繰り返した成果が今回の記事である1。 まとめは最後に書いておくのであしからず。\nみんな大好き Hello World まずは以下の簡単なパッケージを作ってみる。\nhello/ ├── go.mod └── hello.go go.mod ファイルの内容は以下の通り。\nmodule github.com/spiegel-im-spiegel/hello go 1.12 hello.go ファイルの内容は以下の通り。\npackage hello import \u0026#34;fmt\u0026#34; func Hello() { fmt.Println(\u0026#34;Hello World\u0026#34;) } これをリポジトリに push してバージョンタグ v1.0.0 を付ける。\nこのパッケージを使うコードも書いてみよう。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; func main() { hello.Hello() } これを実行すると以下のようになる。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello v1.0.0 go: downloading github.com/spiegel-im-spiegel/hello v1.0.0 go: extracting github.com/spiegel-im-spiegel/hello v1.0.0 Hello World このときの go.mod は以下のようになっているはずである。\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello v1.0.0 前準備はこれで OK\nパッケージのバージョンを v2 にアップグレードする ではこの hello パッケージを少し弄ってみよう。 まずは安直に hello.go 関数を以下のように変更する。\npackage hello import \u0026#34;fmt\u0026#34; func Hello(name string) { fmt.Println(\u0026#34;Hello\u0026#34;, name, \u0026#34;by v2\u0026#34;) } Hello() 関数の後方互換性が失われたためメジャーバージョンを上げることにする。 このコードを push してバージョンタグ v2.0.0 を付ける。\nこの新しいパッケージを使って先程のコードを修正してみる。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; func main() { hello.Hello(\u0026#34;Golang\u0026#34;) } go.mod ファイルも直さないとね。\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello v2.0.0 これを実行すると以下のようになる。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello v2.0.0 go: downloading github.com/spiegel-im-spiegel/hello v0.0.0-20190503134808-f31e6a72de0f go: extracting github.com/spiegel-im-spiegel/hello v0.0.0-20190503134808-f31e6a72de0f Hello Golang by v2 v2.0.0 のモジュールを見つけたまではよかったが，ダウンロード時にバージョンタグを認識していない？\nここで思い出したのが Semantic Versioning のルールである。\n Semantic Import Versioning  ひょっとして v2 ディレクトリを切ったらいいのか？ 試してみよう2。\nv2 ディレクトリによる分離 先ほどのコミットはなかったことにして以下のような構成にする。\nhello/ ├── go.mod ├── hello.go └── v2/ └── hello.go hello.go が v1 のコードで v2/hello.go が新しいコードである。\nこのパッケージを使うコードを書いてみる。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello/v2\u0026#34; func main() { hello.Hello(\u0026#34;Golang\u0026#34;) } go.mod はこんな感じ？\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello/v2 v2.0.0 これで実行してみる。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.0 go: github.com/spiegel-im-spiegel/hello/v2@v2.0.0: go.mod has non-.../v2 module path \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; (and .../v2/go.mod does not exist) at revision v2.0.0 go: error loading module requirements ええつと？ あぁ，そうか。 パッケージ側のv2/ ディレクトリにも go.mod ファイルがいるのか。\nんじゃあ，以下の内容の v2/go.mod ファイルを追加して v2.0.1 タグを付ける。\nmodule github.com/spiegel-im-spiegel/hello/v2 go 1.12 これでパッケージの構成は以下のようになった。\nhello/ ├── go.mod ├── hello.go └── v2/ ├── go.mod └── hello.go では，このパッケージを使って先ほどのコードを動かしてみよう。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: downloading github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: extracting github.com/spiegel-im-spiegel/hello/v2 v2.0.1 Hello Golang by v2 ようやく動いたよ... orz\nインポートパスをリダイレクトしたい パッケージ側の構成はこれでいいとして，パッケージをインポートする側は\nimport \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; で v2 のコードを動かしたいよね。 というわけで go.mod を以下のように書いてみる。\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello/v2 v2.0.1 replace github.com/spiegel-im-spiegel/hello v2.0.1 =\u0026gt; github.com/spiegel-im-spiegel/hello/v2 v2.0.1 これで動かすとどうなるか。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello v2.0.1 go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: downloading github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: extracting github.com/spiegel-im-spiegel/hello/v2 v2.0.1 Hello Golang by v2 おっ，うまくいったっぽい？ でも go.mod ファイルを見てみると\nmodule work go 1.12 require ( github.com/spiegel-im-spiegel/hello v0.0.0-20190503144136-a8f02ef988d2 // indirect github.com/spiegel-im-spiegel/hello/v2 v2.0.1 ) replace github.com/spiegel-im-spiegel/hello v0.0.0-20190503144136-a8f02ef988d2 =\u0026gt; github.com/spiegel-im-spiegel/hello/v2 v2.0.1 てな感じに書き換えられてしまった。 ふむむむむ？\nどうもパッケージ内のディレクトリ名とバージョンタグを暗黙的に関連付けているようだ。 なので v2.x タグは hello/v2/ ディレクトリに関連付けられてしまう。\n たとえば同じリビジョンに v1.0.1 タグを付ければ\n という感じで hello/ ディレクトリにもバージョンタグが割り当てられる。 もっともそれで\nmodule work go 1.12 require ( github.com/spiegel-im-spiegel/hello v1.0.1 github.com/spiegel-im-spiegel/hello/v2 v2.0.1 ) replace github.com/spiegel-im-spiegel/hello v1.0.1 =\u0026gt; github.com/spiegel-im-spiegel/hello/v2 v2.0.1 としたところで更なる混乱を招くだけだけどね。\n結局，モジュール対応モード下でメジャー・バージョンを上げたならインポート・パスも変えるしかない，といういうことらしい。\n“Malformed Module Path” ならば，旧い v1 の方を別ディレクトリに移動すればいんじゃね？ って思うよね。 私は思った。\nで，パッケージ側を\nhello/ ├── go.mod ├── hello.go └── v1/ ├── go.mod └── hello.go という構成にし，呼び出す側の go.mod ファイルを\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello v1.0.1 replace github.com/spiegel-im-spiegel/hello v1.0.1 =\u0026gt; github.com/spiegel-im-spiegel/hello/v1 v1.0.1 とかやってみたんだけど\ninvalid module version github.com/spiegel-im-spiegel/hello/v1: malformed module path: github.com/spiegel-im-spiegel/hello/v1 とか言われたですよ。 いや “malformed module path” て。\nとほほ orz\nv2 ブランチを切って運用する とはいえバージョンごとに物理的にディレクトリを切って運用するというのは今時ありえないダサさである。 そこで物理的にディレクトリを切るのではなくリポジトリ上でブランチを切って運用することを考える。\nパッケージのディレクトリ構成は v1 と同じ。\nhello/ ├── go.mod └── hello.go これに対して v2 ブランチを切り， v2 ブランチ上で go.mod を以下のように変更する。\nmodule github.com/spiegel-im-spiegel/hello2/v2 go 1.12 モジュールのパスと物理パスが異なっている が気にしないで先に進む。 hello.go を\npackage hello import \u0026#34;fmt\u0026#34; func Hello(name string) { fmt.Println(\u0026#34;Hello\u0026#34;, name, \u0026#34;by v2\u0026#34;) } に変更して go.mod とともに v2 ブランチに commit \u0026amp; push し，バージョンタグ v2.0.0 を付与する。\nパッケージを使用する側のコードは以下の通り。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello/v2\u0026#34; func main() { hello2.Hello(\u0026#34;Golang\u0026#34;) } これを実行すると\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.0 go: downloading github.com/spiegel-im-spiegel/hello/v2 v2.0.0 go: extracting github.com/spiegel-im-spiegel/hello/v2 v2.0.0 Hello Golang by v2 という感じでうまく動いたようだ。 go.mod の内容も\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello/v2 v2.0.0 // indirect となっていた。 よーし，うむうむ，よーし。\nブランチとモジュール・パスの関係は以下のような感じだろうか。\n まとめると...  v1 以降，メジャーバージョンを上げる度にモジュール・パスを変更して管理を分ける  v2.x なら path/to/module/v2 などとする。最後の v2 がポイント パスの最後がバージョン番号（v2 など）になっていれば，暗黙的にバージョンタグが対応する  モジュール・パスを変更するには go.mod ファイルの module ディレクティブを変更する  物理的にディレクトリを切るのであれば go.mod ファイルも含める バージョンごとにブランチを切って管理するのであれば，それぞれの go.mod ファイルで指定するモジュール・パスに注意する  パッケージを利用する側はリポジトリの物理パスとモジュール・パスが異なる場合があるため go.mod ファイルに記述されているモジュール・パスを確認する 同一パッケージの異なるメジャー・バージョンのモジュール・パスを replace で繋がないこと。更に分かりにくくなるか指定によってはエラーになる  といったところだろうか。\nバージョンごとにパッケージのパスを分けるため gopkg.in といったサービスが使われることがあるが，リポジトリの物理パスとモジュール・パスが異なる場合は注意が必要である。 うまくパッケージをダウンロードできない場合は go.mod ファイル内に\nreplace gopkg.in/russross/blackfriday.v2 v2.0.1 =\u0026gt; github.com/russross/blackfriday/v2 v2.0.1 といった記述が必要になるかもしれない（というかそれが元々の replace ディレクティブの機能）。\nブックマーク  モジュール対応モードへの移行を検討する  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  実際にはこの記事で書いた量の三倍くらいは試して壊して... を繰り返している。 [return] ちなみに v0 から v1 へのアップグレード時にはこのようなことは起きない。一般的に v0 系はベータ版と認識されていて後方互換性については煩くない。 Go 言語のモジュール対応モードでもチェックが入らないようだ。言い方を変えると v1 以降は（Semantic Versioning に従うなら）後方互換性についてちゃんと考えないといけないってこともであるのだが。バージョン設計と運用は意外と難しい？ [return]   "
    },
    {
      "title": "「人生はスタートの繰り返し」",
      "section": "remark",
      "description": "「頑張ること」を頑張るなど「頑張る」の無駄遣いである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/endless-starting/",
      "published": "2019-05-03T00:54:37+00:00",
      "update": "2019-05-03T01:23:45+00:00",
      "content": "「人生はスタートの繰り返し」と言ったのは長田佳奈さんの『2KZ』だったかな。 「数学ガールの秘密ノート」の最近の連載「確率の冒険」を読む度に連想するのはこのフレーズである。\nところで Facebook の TL で\n 頑張れなかった人達の増加スピードが人の寿命を上回っている｜Yasunori Okajima｜note  という記事が紹介されていて， TL 上の（紹介された方の）コメントも合わせて面白くはあるのだが，私はむしろこの記事自体に「もやつく」ので脊髄反射的にこの記事を書いてみる。\n私は三十歳代半ばでちょっと死にかけてそれまでの生活を変えざるを得なくなった。 思考スピードと記憶力の低下を明確に感じるようになったのは四十歳代半ば頃である。 諸々の事情で「職業エンジニア」を諦めたのは五十歳代半ばの現在である。\n歳をとれば肉体的に衰えるのは当然で，しかも「自分は自分が考えるようには考えない」ことに気がつくのもけっこう歳いってからだったりする。 その度にひとつづつ何かを諦めるのだが，それは「頑張れなかった」からではない。\n上で示した記事を見ても思うのだが，みんな「頑張ること」を頑張ってないかい？ それは間違い。 「仕事を頑張ってる自分」に耽溺するのは workaholic といって嗜癖問題の一種である。\n若いうちは無茶もできるし何でもできる気分に浸れるが，肉体的に衰え脳の働きも衰えれば必然的に「頑張る」という希少リソースをどう配分するかが問題になる。 「頑張ること」を頑張るなど「頑張る」の無駄遣いである。\n役割が異なれば使うツールも異なって当たり前。 管理職になったんならドキュメントなんか部下に書かせろよ。 そしてドキュメントを書いた部下とその成果を正しく評価すればよい。 メールや Slack 等のチャットに時間を使うのも無駄。 それならば，そうしたコミュニケーション・ツールで交わされる会話を要約するコードを書かせて普段はそれを使うべき。 これからは AI の時代なんだろ。 AI にメールやチャットを任せればくだらない時候の挨拶とかもなくなるだろう（笑）\n「降りる」ことは悪いことではない。 むしろ降りたほうが賢明なこともある。 「頑張る」は希少リソースなのだから。 そして「次」を希望するならまたスタートし直せばいいのだ。\n「人生はスタートの繰り返し」である。 人生のあらゆる局面が「一発勝負」なら人類は永遠に進化できない。 繰り返すからこそ確率と統計に意味があるのである。\nどんな境遇でも「またスタートすればいい」と期待できるうちは人生はそれほど悪いものではないし，そう思えるよう「社会」を設計すべきである。\n 2KZ (ぶんか社コミックス) 長田佳奈 ぶんか社 (Release 2015-06-22) eBooks Kindle版 ASIN: B0105ZQSEQ 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  名作。私も座敷わらしになりたい（笑） 連載はちゃんと完結したのに単行本は最後まで収録されなかったのが悔やまれる。2巻を出すか長田佳奈さんの他の作品に入れてほしい。\nreviewed by Spiegel on 2019-05-03 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "Go モジュールの依存関係を可視化するツールを作った",
      "section": "release",
      "description": "main.go いっこだけの簡単なお仕事（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/05/ggm/",
      "published": "2019-05-02T09:33:20+00:00",
      "update": "2019-05-02T09:34:02+00:00",
      "content": " Ubuntu に graphviz をインストールしたので「何か動作確認できるものはないかなぁ」と思い Go モジュールの依存関係を可視化するツールを作ってみた。\n spiegel-im-spiegel/ggm: Graph of Go Modules  main.go いっこだけの簡単なお仕事（笑）\nダウンロードとインストールは以下の通りでよい（モジュール・モードがオンの場合）。\n$ go get github.com/spiegel-im-spiegel/ggm@latest これで作成される ggm コマンドへ go mod graph の結果を流し込む。\n$ go mod graph | ggm digraph gomod { N1-\u0026gt;N2; N1 [ label=\u0026#34;github.com/spiegel-im-spiegel/ggm\u0026#34; ]; N2 [ label=\u0026#34;github.com/awalterschulze/gographviz\\nv0.0.0-20190221210632-1e9ccb565bca\u0026#34; ]; } これを更に dot コマンドに流し込んで画像ファイルを出力する。\n$ go mod graph | ggm | dot -Tpng -o ggm.png 結果は以下の通り。\n ggm.png  DOT 言語への変換は簡単なので直接書いてもよかったが，今回は awalterschulze/gographviz パッケージを使ってみた。 これ，色々と応用できるかもねぇ。\nちなみに Go のソースコードから UML 図（PlantUML）を生成するツールは以下の方が公開しておられる。\n kazukousen/gouml: Automatically generate PlantUML from Go Code. GoのコードからPlantUMLコードを生成する静的解析ツールを作っている - 日記マン  感謝！\nブックマーク  Graphvizとdot言語でグラフを描く方法のまとめ - Qiita\n “go mod graph” を視覚化する : 今回のツールの元ネタ。\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "ビンボー人は TODO をやってはいけない",
      "section": "remark",
      "description": "富裕層は経済力でリスクを回避し経済力で「時間」を買う。ビンボー人はそれ以外の方法でリスクを回避し時間を作り出すしかない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/no-todo-no-life/",
      "published": "2019-05-02T06:07:38+00:00",
      "update": "2019-05-02T06:07:54+00:00",
      "content": "タイトルは釣りです，もちろん。\n富裕層は経済力でリスクを回避し経済力で「時間」を買う。 ビンボー人はそれ以外の方法でリスクを回避し時間を作り出すしかない。\n昨年末の引っ越しを Trollo で管理してみて痛感したが， TODO 管理の目的は「TODO をなくす」ことである。\nTODO 管理を行うにあたって最初にやることは TODO を列挙しトリアージしていくことだが，大雑把に以下の3つに分類できるだろう。\n 必ずやらなければならないこと いつかやらなければならないが優先順位の低いこと やりたいこと  これを縦軸として，横軸に時間（有効期限）を加えたものが TODO 全体の分布になる（縦横の向きはどっちでもいいけど）。\nで，この中に「毎日必ずやらなければならないこと」が存在する筈である。 例えば日常の家事など。 そういったものに時間を割り当てていくと「毎日必ずやらなければならないこと」に殆ど「時間」が奪われてしまうか，場合にとっては「時間」が足りないことに気がつくだろう。 いわゆる「日常に忙殺される」ってやつで「やりたいこと」ができる未来など何処にも見えないのである。\nこれを改善しないまま TODO 管理を続けていくと，それがどんなに優れたワークフローであっても，必ず破綻する。 しかし改善するには「必ずやらなければならないこと」を減らすしかないのだ。\n最初に述べたように，富裕層は「毎日必ずやらなければならないこと」を減らすために経済力を使う。 たとえば，家事はヘルパーさんを雇う，仕事上の雑事も秘書を雇う，移動に時間がかかるなら自家用飛行機を買う，といった感じに。\nじゃあ経済力が使えないビンボー人はどうするか。 「毎日必ずやらなければならないこと」を複数人で分け合うか，それもできないならオミットするしかない！\nポイントは TODO を遂行するために自身やその時間を売り渡すのではなく TODO のほうを削り落とすことである。 ほんでもって，これこそが「断・捨・離」の本質だと私は思う。 「本棚にあふれる本を捨ててスッキリ」なんてのはただの気分の問題であり，何の解決にもなっていないのだ。\n「持たざる人」が唯一所有できるのが自分自身とその時間であるなら，それを搾取する存在（TODO）を近づけてはいけない。\n モモ (岩波少年文庫) ミヒャエル・エンデ, 大島 かおり 岩波書店 2005-06-16 (Release 2017-07-20) eBooks Kindle版 ASIN: B073PPWX7L 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  そういえばこの作品を紹介してくれたのは同じ学科の先輩だった。それからハマってミヒャエル・エンデの作品を買いまくったんだよなぁ。あの頃は若かった。まぁ当時の本は殆ど処分したけど。\nreviewed by Spiegel on 2019-05-02 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "gpgpdump v0.5.1 をリリースした（v0.5.2 もリリースした）",
      "section": "release",
      "description": "リテラルパケットのファイル名に含まれる改行コードなどの制御コードを符号点表示に展開するようにした。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/05/gpgpdump-v0_5_1-is-released/",
      "published": "2019-05-01T04:37:53+00:00",
      "update": "2019-05-01T08:39:43+00:00",
      "content": " OpenPGP パケットの内容を視覚化する gpgpdump の v0.5.1 をリリースした。\n Release v0.5.1 · spiegel-im-spiegel/gpgpdump · GitHub  今回はバグ修正（？）版。\nいや OpenPGP のメーリングリストで以下の記事が流れてきたのだが\n Spoofing OpenPGP and S/MIME Signatures in Emails  GnuPG の脆弱性の話なんて昨年のことだし他の問題にしたって MUA の実装上の不具合ではあろうけど脆弱性とは言い難いし「なんだかなぁ」という感じで眺めていたのだが，「リテラルパケット（tag11）については gpgpdump も対処しておいたほうがいいかな」と思い立ち修正してみた。\n具体的にはリテラルパケットのファイル名に含まれる改行コードなどの制御コードを (U+000A) のように符号点表示に展開するようにした。 制御コードの判定には Go 言語標準の unicode.IsControl() 関数を使っている（手抜き実装w）。\n他にも UTF-8 以外の文字エンコーディングの場合は \u0026quot;invalid text string\u0026quot; と表記するようにした。 まぁ Shift-JIS とか EUC とか軒並み引っかかっちゃうんだけど，もう気にしないことにした（今までだって文字化けしてまともに表示できなかった筈）。\nそれにしても Ubuntu は快適だね。 今まで Windows で作業してたのが馬鹿みたいだよ。 Microsoft が今後 PWA (Progressive Web Apps) へのシフトを進めていくと Windows はどんどん「コントローラ (Progammable Controller) 」になっていくだろうし，そうなると「パソコン (Personal Computer) 」と言えるのは macOS や Ubuntu のような UNIX 系のデスクトップ OS だけになるかもしれないねぇ1。\n【追記】 gpgpdump v0.5.2 をリリースした v0.5.1 をリリースしたばっかだが v0.5.2 を出した。\n Release v0.5.2 · spiegel-im-spiegel/gpgpdump · GitHub  いやぁ，よく考えたらリテラルのテキストを扱うのはリテラルパケットだけじゃなかった。 ちうわけでコード内を浚って生データをそのまま string にキャストして出力してる部分を修正した。 アホだなぁ，私。\nこれで大丈夫なはず。\n参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) eBooks Kindle版 ASIN: B015643CPE 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by amazon-item v0.2.0)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  と考えると Windows のサブシステムに Linux を入れたのは本当にお馬鹿な選択だったと言わざるを得ない。包含関係が逆だよ。 Linux 環境下で Windows がサブシステムとして動作できるようにしないと。 [return]   "
    },
    {
      "title": "BOINC による学術分散コンピューティング・プロジェクトでの活動を再開した",
      "section": "remark",
      "description": "「計算機・ネットワークは有益な目的に使おう」",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/academic-distributed-computing-projects-by-boinc/",
      "published": "2019-04-30T11:13:42+00:00",
      "update": "2019-04-30T11:14:08+00:00",
      "content": "OS 移行の準備のためにこの一ヶ月ほど BOINC (Berkeley Open Infrastructure for Network Computing) での活動を中断していたのだが，換装した Ubuntu も安定的に稼働しているようだし，再開することにした。\n OS 移行のため中断していたが BOINC による学術分散コンピューティング・プロジェクトの活動を再開した  Linux 版の BOINC クライアントのインストールはパッケージ管理ツールを使うことを推奨しているようで Ubuntu でも APT (Advanced Package Tool) を使うのがいいようだ。\n$ apt show boinc-client Package: boinc-client Version: 7.14.2+dfsg-3 Priority: optional Section: universe/net Source: boinc Origin: Ubuntu というわけで早速インストール。\n$ sudo apt install boinc-client boinc-manager パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の追加パッケージがインストールされます: libboinc7 libwxbase3.0-0v5 libwxgtk-webview3.0-gtk3-0v5 libwxgtk3.0-gtk3-0v5 提案パッケージ: boinc-client-opencl boinc-client-nvidia-cuda libgl1-mesa-glx 以下のパッケージが新たにインストールされます: boinc-client boinc-manager libboinc7 libwxbase3.0-0v5 libwxgtk-webview3.0-gtk3-0v5 libwxgtk3.0-gtk3-0v5 アップグレード: 0 個、新規インストール: 6 個、削除: 0 個、保留: 0 個。 7,421 kB のアーカイブを取得する必要があります。 この操作後に追加で 29.5 MB のディスク容量が消費されます。 まずは計算リソースの割り当てを少なめにして様子を見る予定だ。\n私としては SETI@home を通じて学んだ\n「計算機・ネットワークは有益な目的に使おう」\nという教えを胸に刻みつつ，今後も活動を継続していく所存である。\n SETI@homeファンブック―おうちのパソコンで宇宙人探し 野尻 抱介 ローカス 2000-01 Book 単行本 ASIN: 4898140866, EAN: 9784898140864 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  内容は古いけど当時の「熱」を伝えた名著だと思うけどなぁ。著者の方が自己出版で Kindle で出してくれたらいいのに。\nreviewed by Spiegel on 2019-03-28 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "TeX Live を Ubuntu に（APT を使わずに）導入する",
      "section": "remark",
      "description": "Windows と異なり，設定用の各コマンドは管理者権限（sudo）で起動する点に気をつける必要がある。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/install-texlive-in-ubuntu/",
      "published": "2019-04-30T08:49:27+00:00",
      "update": "2019-04-30T09:09:17+00:00",
      "content": " Ubuntu 環境に TeX Live を導入するには APT (Advanced Package Tool) を使う方法と TeX Live が提供する install-tl を使う方法がある。\n  前者の場合は，他のパッケージと同様に統一的な管理ができますが，ディストリビューションによっては提供されているパッケージのバージョンが古いことがあります．後者の場合は，パッケージ管理システムによる管理からは外れてしまいますが，tlmgr を使って最新の状態にアップデートし続けることが可能です．  via Linux - TeX Wiki  なかなか悩ましい選択だが，今回は install-tl を使って導入と運用をしてみよう。 なお，対象は TeX Live 2018 で（2019 はまだリリースされていない）。\nTeX Live 2018 のインストール 今回は初めてのインストールなので関係ないが，以前の環境があれば削除しておく。\n$ rm -rf /usr/local/texlive/2018 $ rm -rf ~/.texlive2018 ダウンロードページから install-tl-unx.tar.gz をダウンロードし中身を展開する。 その後 install-tl を管理者権限で起動する。\n$ tar xvf install-tl-unx.tar.gz $ ls install-tl* install-tl-unx.tar.gz install-tl-20190227: LICENSE.CTAN LICENSE.TL install-tl release-texlive.txt texmf-dist tlpkg $ cd install-tl-20190227 $ sudo ./install-tl ミラーサイトのリポジトリを使うなら\n$ sudo ./install-tl --repository http://mirror.ctan.org/systems/texlive/tlnet/ とするらしい（後で気がついた）。\n起動直後の画面はこんな感じ。\n======================\u0026gt; TeX Live installation procedure \u0026lt;===================== ======\u0026gt; Letters/digits in \u0026lt;angle brackets\u0026gt; indicate \u0026lt;======= ======\u0026gt; menu items for actions or customizations \u0026lt;======= Detected platform: GNU/Linux on x86_64 \u0026lt;B\u0026gt; set binary platforms: 1 out of 17 \u0026lt;S\u0026gt; set installation scheme: scheme-full \u0026lt;C\u0026gt; set installation collections: 40 collections out of 41, disk space required: 5806 MB \u0026lt;D\u0026gt; set directories: TEXDIR (the main TeX directory): !! default location: /usr/local/texlive/2018 !! is not writable or not allowed, please select a different one! TEXMFLOCAL (directory for site-wide local files): /usr/local/texlive/texmf-local TEXMFSYSVAR (directory for variable and automatically generated data): /usr/local/texlive/2018/texmf-var TEXMFSYSCONFIG (directory for local config): /usr/local/texlive/2018/texmf-config TEXMFVAR (personal directory for variable and automatically generated data): ~/.texlive2018/texmf-var TEXMFCONFIG (personal directory for local config): ~/.texlive2018/texmf-config TEXMFHOME (directory for user-specific files): ~/texmf \u0026lt;O\u0026gt; options: [ ] use letter size instead of A4 by default [X] allow execution of restricted list of programs via \\write18 [X] create all format files [X] install macro/font doc tree [X] install macro/font source tree [ ] create symlinks to standard directories \u0026lt;V\u0026gt; set up for portable installation Actions: \u0026lt;I\u0026gt; start installation to hard disk \u0026lt;P\u0026gt; save installation profile to \u0026#39;texlive.profile\u0026#39; and exit \u0026lt;H\u0026gt; help \u0026lt;Q\u0026gt; quit Enter command:  オプション等を見て問題なければ I を入力してインストールを開始する。 おそらく既定のままで大丈夫。\nさてここからは長いのでしばらく放置で大丈夫だろう。 今回は（前回の経験を活かし）寝る直前にインストーラを仕掛けた。 私はやればできる子なのだ（自画自賛）。\nインストールが無事に完了すれば最後に以下のメッセージが表示される。\nWelcome to TeX Live! See /usr/local/texlive/2018/index.html for links to documentation. The TeX Live web site (https://tug.org/texlive/) contains any updates and corrections. TeX Live is a joint project of the TeX user groups around the world; please consider supporting it by joining the group best for you. The list of groups is available on the web at https://tug.org/usergroups.html. Add /usr/local/texlive/2018/texmf-dist/doc/man to MANPATH. Add /usr/local/texlive/2018/texmf-dist/doc/info to INFOPATH. Most importantly, add /usr/local/texlive/2018/bin/x86_64-linux to your PATH for current and future sessions. Logfile: /usr/local/texlive/2018/install-tl.log パス設定 パス設定については手動で行ってもいいのだが tlmgr コマンドを使うほうが簡単である。\n$ sudo /usr/local/texlive/2018/bin/x86_64-linux/tlmgr path add 具体的には /usr/local/texlive/2018/ 以下の各種ファイルに対して /usr/local/bin/ 等へシンボリック・リンクを張っているらしい。 逆にリンクを削除する場合は\n$ sudo tlmgr path remove とすれば安全に処理できる。\n環境変数の指定 TeX Live は1年毎にアップグレードされるし，その度にリンクを切った張ったは微妙に嫌だったので， /etc/profile.d/ ディレクトリに以下の内容を書いたファイル texlive-paths.sh を置いてみた（ファイル名は適当）。\n# shellcheck shell=sh # Expand $PATH to include the directory where TeX Live applications go. texlive_path=\u0026#34;/usr/local/texlive/2018\u0026#34; texlive_bin_path=\u0026#34;${texlive_path}/bin/x86_64-linux\u0026#34; if [ -n \u0026#34;${PATH##*${texlive_bin_path}}\u0026#34; -a -n \u0026#34;${PATH##*${texlive_bin_path}:*}\u0026#34; ]; then export MANPATH=${MANPATH}:${texlive_path}/texmf-dist/doc/man export INFOPATH=${INFOPATH}:${texlive_path}/texmf-dist/doc/info export PATH=${PATH}:${texlive_bin_path} fi ログイン時にこのファイルが実行され環境変数がセットされる。 この方法の欠点は管理者権限での実行時にはパスが通らないため\n$ sudo tlmgr version sudo: tlmgr: コマンドが見つかりません と言われてしまう点だろう。 普段使いなら問題ないんだけどね。 結局，シンボリック・リンクを張ったほうがいいみたい。\nTeX Live を削除する際は tlmgr path remove でリンクを削除するのを忘れずに。\n TeX Live をアップデートしようとしたが... まずは参照するリポジトリを指定をしておこう。\n$ sudo tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet tlmgr: setting default package repository to http://mirror.ctan.org/systems/texlive/tlnet このあと tlmgr でアップデートを行おうとしたが\n$ sudo tlmgr update --self --all TeX Live 2018 is frozen forever and will no longer be updated. This happens in preparation for a new release. If you\u0026#39;re interested in helping to pretest the new release (when pretests are available), please read https://tug.org/texlive/pretest.html. Otherwise, just wait, and the new release will be ready in due time. tlmgr: package repository http://ctan.math.washington.edu/tex-archive/systems/texlive/tlnet (verified) tlmgr: saving backups to /usr/local/texlive/2018/tlpkg/backups と言われてしまった。 そうか。 夏には 2019 が出るから現行版の更新は既に凍結されているのか。 迂闊だった orz\n各種設定変更 Windows と異なり，設定用の各コマンドは管理者権限（sudo）で起動する点に気をつける必要がある。\n自動実行可能な外部コマンドの指定 まずは shell_escape_commands の値を変更する。 インストール直後は\n$ kpsewhich -var-value=shell_escape_commands bibtex,bibtex8,extractbb,gregorio,kpsewhich,makeindex,repstopdf,texosquery-jre8, となっているので /usr/ocal/texlive/texmf-local/web2c/texmf.cnf ファイルを作成し以下を記述する。\nshell_escape_commands = \\ bibtex,bibtex8,pbibtex,jbibtex,\\ extractbb,\\ gregorio,\\ kpsewhich,\\ makeindex,mendex,\\ repstopdf,epspdf,\\ texosquery-jre8,\\ これで shell_escape_commands の値が上書きされて\n$ kpsewhich -var-value=shell_escape_commands bibtex,bibtex8,pbibtex,jbibtex,extractbb,gregorio,kpsewhich,makeindex,mendex,repstopdf,epspdf,texosquery-jre8, となる。\n設定を変更したら mktexlsr で状態を更新しておくこと。\n$ sudo mktexlsr mktexlsr: Updating /usr/local/texlive/2018/texmf-config/ls-R... mktexlsr: Updating /usr/local/texlive/2018/texmf-dist/ls-R... mktexlsr: Updating /usr/local/texlive/2018/texmf-var/ls-R... mktexlsr: Updating /usr/local/texlive/texmf-local/ls-R... mktexlsr: Done. 日本語フォントの埋め込み設定 日本語フォントの埋め込み設定はどうなってるんだろうと思ったが\n$ kanji-config-updmap status CURRENT family for ja: ipaex Standby family : ipa ありゃりゃ， IPA フォントしかないのか。 そりゃそうか。 Linux だもんな。\nちなみに日本語フォントの埋め込みを行わない（非推奨）場合は\n$ kanji-config-updmap --user nofont とする。 変更結果は ~/.texlive2018/ ディレクトリに反映される。\n--user ではなく --sys オプションをつけてシステム全体の設定を変更する場合は管理者権限で起動すること1。\nそういえば IPAex フォントの Ver.004.01 がリリースされている。 あの負の遺産のひとつ「元号の合成文字」である「令和（U+32FF “SQUARE ERA NAME REIWA”）」が追加されている。\n リリースノート(Release Note) | IPAexフォント/IPAフォント 情報処理推進機構、新元号“令和”の合字に対応した「IPAexフォント」v004.01を公開 - 窓の杜  とりあえず /usr/local/texlive/2018/texmf-dist/fonts/truetype/public/ipaex ディレクトリにあるフォントファイルを差し替えればいいかな。 たぶん 2019 かその次の 2020 あたりで正式にアップデートされるだろう。\nその他フォントの設定については以下の拙文を参照のこと。\n TeX 日本語環境で「源ノ」フォントを使ってみた 数式用フォントで遊ぶ  試しに何かタイプセットしてみる ちうわけでいつものあの文書ですね。 20世紀な内容でゴメン。\n spiegel-im-spiegel/charset_document: 「文字コードとその実装」 upLaTeX ドキュメント\n$ latexmk charset.tex ... Latexmk: All targets (charset.pdf charset.dvi) are up-to-date   よし。 ちゃんと動いた。 Lunux 環境でも問題なさそうだな。 ついでに PDF/A への変換もやっておこう。\n$ ps2pdf14 -dPDFA -dPDFACompatibilityPolicy=1 -sProcessColorModel=DeviceCMYK charset.pdf charset-pdfa.pdf これもちゃんと動いた。 フォントも正しく埋め込まれているようだ。\n もうひとつ， $\\mathrm{Lua\\LaTeX}$ で以下のタイプセットも試してみる。\n LuaLaTeX でコードを書いてみる  結果はこんな感じ。\n よーし，うむうむ，よーし。\nブックマーク  Quick install - TeX Live - TeX Users Group Ubuntu 16.04 に TeX Live を入れる - 毎日もくもく\n そうだ， TeX Live 2017 (for Windows) をインストールしよう！\n  参考図書  [改訂第7版]LaTeX2ε美文書作成入門 奥村 晴彦, 黒木 裕介 技術評論社 2017-01-24 Book 大型本 ASIN: 4774187054, EAN: 9784774187051 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。\nreviewed by Spiegel on 2017-09-27 (powered by amazon-item v0.2.0)\n  kanji-config-updmap-sys コマンドでも同様。つか kanji-config-updmap-sys コマンドは内部で kanji-config-updmap --sys を起動しているだけなんだけど。 [return]   "
    },
    {
      "title": "2019-04-29 のブックマーク",
      "section": "bookmarks",
      "description": "「Node.js 12正式版が登場、1年ぶりのLTS対象バージョン。起動高速化、TLS1.3対応、ES6モジュールの実験的サポートなど」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/04/29-bookmarks/",
      "published": "2019-04-29T06:54:28+00:00",
      "update": "2019-04-29T06:59:48+00:00",
      "content": " リリース情報  Node.js 12正式版が登場、1年ぶりのLTS対象バージョン。起動高速化、TLS1.3対応、ES6モジュールの実験的サポートなど － Publickey アプリフレームワーク「Electron 5.0.0」が公開 - 窓の杜  Age of Trump  オープンに議論が出来る場所としてのTED~FacebookとBrexit｜市川裕康 (メディアコンサルタント）｜note 英国「ポルノ鎖国」が海賊版ブロッキングの抜け道を広げる – P2Pとかその辺のお話R  セキュリティ＆プライバシー関連  MIT Tech Review: 大統領選で「ブロックチェーン投票」一部導入へ、ウェストバージニア州 Excellent Analysis of the Boeing 737 Max Software Problems - Schneier on Security グーグル、組み込みブラウザーフレームワークからのサインインをブロックへ--中間者攻撃対策を強化 - ZDNet Japan MIT Tech Review: 暗号通貨の不正採掘、総額5000万ドル超で「ぼろ儲け」か  MIT Tech Review: 崩れ始めた安全神話、ブロックチェーンの「乗っ取り」が現実に : 邦訳タイトルが頭悪すぎて読む気をなくす（笑）  事前準備 - それは最先端の攻撃者が常に怠らないこと。迫り来るサイバー攻撃へのあなたの会社の準備は十分ですか? - F-Secure 海外のIT大手などを狙ったフィッシング活動についてまとめてみた - piyolog 「お金を払ってセキュリティを学ぶ」のは平成で終わり？　ある無料教本が神レベルで優れている件 (1/3) - ITmedia エンタープライズ EUの巨大バイオメトリクスデータベース構築法案が議会を通過 - ZDNet Japan カードの有効性確認が発覚した情報漏えいについてまとめてみた - piyolog G7 Comes Out in Favor of Encryption Backdoors - Schneier on Security ISC BIND 9 に対する複数の脆弱性に関する注意喚起 3 things Tinder knows about you - F-Secure Blog マイクロソフト、パスワードの定期的な変更は無駄と認める - ZDNet Japan プライバシーは市民的自由であり、公民権でもある – P2Pとかその辺のお話R Oracle Security Alert CVE-2019-2725  Oracle WebLogic Server の脆弱性（CVE-2019-2725）について：IPA 独立行政法人 情報処理推進機構 Oracle WebLogic Server の脆弱性 (CVE-2019-2725) に関する注意喚起  MIT Tech Review: カラープリントした紙で「AIの監視」から逃れる方法  天文関連  MIT Tech Review: 太陽系外から恒星間天体が5年前にも飛来、大気圏で焼失か？ 太陽系の果てに小天体の影を発見したのは、宮古島の小さな望遠鏡だった – 半径約1.3kmのカイパーベルト天体を初観測 | academist Journal MIT Tech Review: 深刻化する宇宙空間の環境問題、新たな学問分野を天文学者が提唱 水星と地球のコアの大きさはだいたいおんなじ | ギズモード・ジャパン 「ブラックホールの一部しか映ってないじゃん！」→実は「映ってない部分」がすごいんだよ、というお話 - ねとらぼ アルマ望遠鏡、惑星の素材となる一酸化アルミニウムを観測 | 国立天文台(NAOJ)  知財関連  Openload、アップローダー向けアフィリエイトプログラムを終了 – P2Pとかその辺のお話R 米政府、「悪名高き市場」リストで海賊版/ストリームリップ/チートサイト、防弾ホストに圧力 – P2Pとかその辺のお話R  その他  選挙に行ってきたけど - 18 til i die (another phase) EFF’s Tweet About an Overzealous DMCA Takedown Is Now Subject to an Overzealous Takedown | Electronic Frontier Foundation  Warner Bros. Takes Down TorrentFreak Tweet Over Software Piracy? (Updated) - TorrentFreak  ところで筒井康隆の最高傑作って何なのだろう？ - YAMDAS現更新履歴 今年ローレンス・レッシグの本が2冊も出る - YAMDAS現更新履歴 マイクロソフト、リアルタイムOS大手の「Express Logic」を買収。IoTデバイス用のOSとして展開へ － Publickey DockerとArmが戦略的提携--ArmプラットフォームでDocker開発者のアプリ構築を効率化 - ZDNet Japan レビュー「がん生存率は着実に上昇しているが、それはがんと闘うための一指標 余命は最善を尽くす治療と患者自身の闘病の仕方で大きく変わる」 | SciencePortal Ubuntu Studio 16.04 その1 - Ubuntu Studio 16.04 LTSサポート終了のお知らせ - kledgeb 10連休にならない会社とモデル就業規則問題｜塚本 牧生｜note 「Apache NetBeans」が“インキュベーター”を卒業 - 窓の杜 Cinnamon その24 - Ubuntu 19.04にCinnamon 3.8.8をインストールするには - kledgeb ファイルホスティング大手のZippyShare、英独からのアクセスに“403 forbidden”を返す – P2Pとかその辺のお話R  "
    },
    {
      "title": "Windows とともに平成は去り Ubuntu とともに令和を迎える",
      "section": "remark",
      "description": "めっさ快適なのですよ。 喩えるなら重いコートを脱いででかけてみたい気分（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/hello-ubuntu/",
      "published": "2019-04-29T05:36:53+00:00",
      "update": "2019-04-30T08:50:34+00:00",
      "content": "この前 Facebook の TL で「平成最後のプレミアムフライデー」というフレーズを見かけて「もしかして『平成』を最も象徴するのは二千円札とプレミアムフライデーなんじゃないだろうか」と思ったり。 そのココロは「失われた30年」もしくは「斜陽国家ニッポン」。\nおあとがよろしいようで。\nじゃなくて，予告どおり自宅マシンを Ubuntu に換装したですよ。 事前調査のおかげで特にトラブルもなく順調に作業を進めている。 ようやくブログ記事が書ける程度にまで環境が整ったので試運転を兼ねて戯れ言を書いている。\nつかね。 めっさ快適なのですよ。 喩えるなら重いコートを脱いで出掛けてみたい気分（笑）\nたとえば ATOM エディタ。 OS を換えるだけで「もっさり」感がかなり軽減してしまった。 まぁ起動は相変わらず遅いけど，最初に起動させてしまえば後は快適1。\nあと Hugo。 こちらは処理時間がはっきり数値で出る。 5分の1以下に一気に短縮ですよ。 今までは何だったのか。\n本当はこんなに急いでやるつもりはなくて2019年内に移行できればよかったんだけど，前にも書いたとおり Microsoft は随分前から Windows 7 を見捨てている（考えてみれば4年前から Win7 ユーザを脅してた）し，個人的にもこの GW を逃せば当分の間まとまった休みはとれそうもなかったので（ビンボー暇なし），丁度いい機会だったのだろう。\n脅しをかけてくれた Microsoft にはお礼を言わなきゃ。 ありがとうございます（笑）\n GOLDEN☆BEST キャンディーズ コンプリート・シングルコレクション キャンディーズ (メインアーティスト) Sony Music Direct(Japan)Inc. 2011-06-08 (Release 2015-11-04) Digital Music Album MP3 ダウンロード ASIN: B01721ECA8 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  今さら昭和時代のアイドルを美化するつもりはないけれど，あのとき（生物年齢的にも）子供だった私にとって彼女らは間違いなく憧れのアイドルだったのですよ。\nreviewed by Spiegel on 2019-04-29 (powered by amazon-item 0.2.1)\n  ちょっと開いてちょちょっと弄る程度であれば vi で十分だしね。実は vi/vim は若い頃のトラウマ（現地調整で部屋の隅っこで VT 端末でデバッグさせられたとか）がフラッシュバックするのであまり使いたくないのだけど，位置付け的には Windows で言うところの notepad みたいなもんだし，これから長い付き合いになるのだろう。ちなみに vim は既定で入ってなかったので後で入れる予定。 [return]   "
    },
    {
      "title": "「《命》に関わる確率」を疑似乱数を使って解いてみる",
      "section": "remark",
      "description": "結果だけを見れば直感に反するかも知れないが，こうやって実際にコードを書いてみると納得感が強まる。 やっぱプログラマはコードを書いてナンボだよね（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/mathgirl-note257/",
      "published": "2019-04-23T12:06:30+00:00",
      "update": "2019-04-29T06:59:48+00:00",
      "content": " cakes で連載中の「数学ガールの秘密ノート」。 今回の「確率の冒険：《命》に関わる確率（前編）」はなかなか面白かった。 確率や統計は直感に反する場合があって，そういう事例を考えるのは本当に楽しい。\n今回のプロブレムを整理してみよう。\n  《○○菌》に感染している人は《全人口の1%》である ○○菌に感染しているか否かを調べる《判定キット》がある。判定キットは感染しているか否かを《90%の確率》で正しく判定する  《感染している》という判定のことを《陽性》と呼ぶ 《感染していない》という判定のことを《陰性》と呼ぶ  ある人を判定キットで調べたら《陽性》だった。この人が○○菌に実際に感染している確率を求めよ  via 確率の冒険：《命》に関わる確率（前編）  きちんとした解法は本編を読んでいただくとして，この記事では疑似乱数を用いたシミュレーションで解いてみる。\n指定した確率で真偽を出力するクラス まずは指定した確率で真偽を出力するクラスを考えてみる。 Go 言語でね（笑）\nこんな感じでどうだろう。\npackage prob import ( \u0026#34;math\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) func New(p float64) \u0026lt;-chan bool { ch := make(chan bool) go func() { defer close(ch) max := 1000000 limit := percent(p, max) rnd := rand.New(rand.NewSource(time.Now().UnixNano())) for { n := rnd.Intn(max) + 1 ch \u0026lt;- n \u0026lt; limit } }() return ch } func percent(f float64, max int) int { if f \u0026lt; 0 { return 0 } if f \u0026gt; 1.0 { return max } return int(math.Floor(f*float64(max) + 0.5)) } これで\nch := prob.New(0.1) とすれば channel ch から10%の確率で true が出力される筈である。 サンプル・コードを書いて試してみよう。\nfunc probability(try int, ch \u0026lt;-chan bool) int { count := 0 for i := 0; i \u0026lt; try; i++ { if \u0026lt;-ch { count++ } } return count } func main() { ch := prob.New(0.1) min := float64(1) max := float64(0) sum := float64(0) sum2 := float64(0) try := 10000 tryf := float64(try) ps := make([]float64, 0, try) for i := 0; i \u0026lt; try; i++ { count := probability(try, ch) p := float64(count) / tryf ps = append(ps, p) if p \u0026lt; min { min = p } if p \u0026gt; max { max = p } sum += p sum2 += p * p } fmt.Printf(\u0026#34;minimum value: %7.5f\\n\u0026#34;, min) fmt.Printf(\u0026#34;maximum value: %7.5f\\n\u0026#34;, max) ave := sum / tryf fmt.Printf(\u0026#34;average: %7.5f\\n\u0026#34;, ave) devi := math.Sqrt(sum2/tryf - ave*ave) //standard deviation \tct := 0 for _, p := range ps { if ave-devi \u0026lt;= p \u0026amp;\u0026amp; p \u0026lt;= ave+devi { ct++ } } fmt.Printf(\u0026#34;standard deviation: %7.5f (%4.1f%%)\\n\u0026#34;, devi, float64(ct)*100.0/tryf) } 10,000回の試行で割合を求める処理をワンセットとしてこれを10,000セット繰り返し，最小値・最大値・平均値・標準偏差を求めている。\nこれを実行するとこんな感じになる。\n$ go run prob/sample/sample.go minimum value: 0.08930 maximum value: 0.11160 average: 0.09999 standard deviation: 0.00299 (67.9%) まぁこんなもんかな（笑）\n感染者と検査キットを定義する。 ではこの prob パッケージを使って感染者と検査キットを定義してみる。\nこんな感じでどうだろう。\npackage note257 import ( \u0026#34;github.com/spiegel-im-spiegel/mathgirl-problem/prob\u0026#34; ) type People struct { infect \u0026lt;-chan bool } type Person bool func NewPeople() *People { return \u0026amp;People{infect: prob.New(0.01)} } func (ppl *People) SelectPersion() Person { return Person(\u0026lt;-ppl.infect) } func (psn Person) Infection() bool { return bool(psn) } type TestKit struct { probability \u0026lt;-chan bool } func NewTestKit() *TestKit { return \u0026amp;TestKit{probability: prob.New(0.9)} } func (tk *TestKit) Inspect(psn Person) bool { if psn.Infection() { return \u0026lt;-tk.probability } return !\u0026lt;-tk.probability } まず People を定義し，この中から People.SelectPersion() でサンプル Person を選び出す。 このサンプルは1%の確率で感染している。 感染しているかどうかは Person.Infection() 関数で分かる。\n判定キットは TestKit で定義され TestKit.Inspect() 関数で検査結果が出る。 このとき\n （全体の1%存在する）感染者は90%の確率で陽性（true）になる （全体の99%存在する）非感染者は10%の確率で陽性（true）になる  のがポイントである。\nこのパッケージを使って実際に検査を行ってみる。\nfunc probability(ppl *note257.People, tk *note257.TestKit, try int) float64 { total := 0 count := 0 for i := 0; i \u0026lt; try; i++ { psn := ppl.SelectPersion() if tk.Inspect(psn) { total++ if psn.Infection() { count++ } } } return float64(count) / float64(total) } func main() { flag.Parse() try, err := strconv.Atoi(flag.Arg(0)) if err != nil { fmt.Fprintln(os.Stderr, err) return } ppl := note257.NewPeople() tk := note257.NewTestKit() min := float64(1) max := float64(0) sum := float64(0) sum2 := float64(0) tryf := float64(try) ps := make([]float64, 0, try) for i := 0; i \u0026lt; try; i++ { p := probability(ppl, tk, try*10) ps = append(ps, p) if p \u0026lt; min { min = p } if p \u0026gt; max { max = p } sum += p sum2 += p * p } fmt.Printf(\u0026#34;minimum value: %7.5f\\n\u0026#34;, min) fmt.Printf(\u0026#34;maximum value: %7.5f\\n\u0026#34;, max) ave := sum / tryf fmt.Printf(\u0026#34;average: %7.5f\\n\u0026#34;, ave) devi := math.Sqrt(sum2/tryf - ave*ave) //standard deviation \tct := 0 for _, p := range ps { if ave-devi \u0026lt;= p \u0026amp;\u0026amp; p \u0026lt;= ave+devi { ct++ } } fmt.Printf(\u0026#34;standard deviation: %7.5f (%4.1f%%)\\n\u0026#34;, devi, float64(ct)*100.0/tryf) } probability() 関数で判定キットの結果が陽性だった人の中で実際に感染している人の割合を返している。\nたとえば\n$ go run note257/sample/sample.go 10000 とすれば probability() 関数による試行を10,000回繰り返すわけだ。 私のマシンは遅いので，これを実行するとめっさ時間がかかるのだが，まぁやってみよう。\n$ go run note257/sample/sample.go 10000 minimum value: 0.08061 maximum value: 0.10279 average: 0.09092 standard deviation: 0.00272 (68.5%) 平均値が少し高めに出たけど，こんなものかな。\n結果だけを見れば直感に反するかも知れないが，こうやって実際にコードを書いてみると納得感が強まる。 やっぱプログラマはコードを書いてナンボだよね（笑）\nブックマーク  第257回　確率の冒険：《命》に関わる確率（前編）｜数学ガールの秘密ノート｜結城浩｜cakes（ケイクス）\n 第258回　確率の冒険：《命》に関わる確率（後編）｜数学ガールの秘密ノート｜結城浩｜cakes（ケイクス）  モンテカルロ法による円周率の推定（その3 Gaussian）\n モンティ・ホール問題で遊ぶ\n  参考図書  プログラマの数学 第2版 結城 浩 SBクリエイティブ 2018-01-16 (Release 2018-02-08) eBooks Kindle版 ASIN: B079JLW5YN 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  タイトル通りプログラマ必読書。第2版では機械学習に関する章が付録に追加された。\nreviewed by Spiegel on 2018-03-19 (powered by amazon-item v0.2.0)\n  いかにして問題をとくか G. ポリア G. Polya (原著), 柿内 賢信 (翻訳) 丸善 1975-04-01 Book 単行本 ASIN: 4621045938, EAN: 9784621045930 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    }
  ]
}
