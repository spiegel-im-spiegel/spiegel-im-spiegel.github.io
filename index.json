{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "github.com/goark/mt/v2 をリリースした",
      "section": "release",
      "description": " Mersenne Twister 疑似乱数生成器を実装した拙作のパッケージを math/rand/v2 に対応することにした",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2024/03/goark-mt-v2/",
      "published": "2024-03-09T11:45:42+00:00",
      "update": "2024-03-09T11:45:46+00:00",
      "content": "Go 1.22 で math/rand/v2 パッケージが登場したため， Mersenne Twister 疑似乱数生成器を実装した拙作の github.com/goark/mt パッケージも math/rand/v2 に対応することにした。\nまずはバージョンを v2 に上げて，以下のインポート・パスに変更した。\nimport \u0026#34;github.com/goark/mt/v2\u0026#34; また go.mod も同様に\nrequire github.com/goark/mt/v2 v2.0.1 とする。\n例として github.com/goark/mt/v2 パッケージと math/rand/v2 パッケージを組み合わせて標準正規分布する値を1万個生成してみる。 こんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;math\u0026#34; \u0026#34;math/rand/v2\u0026#34; \u0026#34;github.com/goark/mt/v2/mt19937\u0026#34; ) func main() { rnd := rand.New(mt19937.New(rand.Int64())) points := []float64{} max := 0.0 min := 1.0 sum := 0.0 for range 10000 { point := rnd.NormFloat64() points = append(points, point) min = math.Min(min, point) max = math.Max(max, point) sum += point } n := float64(len(points)) ave := sum / n d2 := 0.0 for _, p := range points { d2 += (p - ave) * (p - ave) } fmt.Println(\u0026#34; minimum: \u0026#34;, min) fmt.Println(\u0026#34; maximum: \u0026#34;, max) fmt.Println(\u0026#34; average: \u0026#34;, ave) fmt.Println(\u0026#34;standard deviation: \u0026#34;, math.Sqrt(d2/n)) } これを実行するとこんな感じになる。\n$ go run sample.go minimum: -4.465497509270884 maximum: 4.409945906326592 average: 0.010399867661332784 standard deviation: 1.0027323703801945 まぁまぁ妥当な感じ？\nmath/rand および math/rand/v2 パッケージのトップレベル関数群の疑似乱数生成器が ChaCha8 になったおかげで seed を与えるのがめっちゃ楽になった。 これだけでもありがたい。 ともかくこれで，乱数生成周りの調査と対応は一通り完了かな。\nブックマーク 疑似乱数生成器 goark/mt Go 1.22 における疑似乱数生成器 Go 1.22 の math/rand/v2 を使ってみる 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nGo言語 100Tips ありがちなミスを把握し、実装を最適化する impress top gearシリーズ Teiva Harsanyi (著), 柴田 芳樹 (著) インプレス 2023-08-18 (Release 2023-08-18) Kindle版 B0CFL1DK8Q (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元で PDF 版を購入可能。事実上の Effective Go とも言える充実の内容。オリジナルは敢えてタイトルに “tips” という単語を入れるのを避けたのに邦題が「100 Tips」とかなっていて，原作者がお怒りとの噂（あくまで噂）\nreviewed by Spiegel on 2023-08-18 (powered by PA-APIv5)\n効率的なGo ―データ指向によるGoアプリケーションの性能最適化 Bartłomiej Płotka (著), 山口 能迪 (翻訳) オライリー・ジャパン 2024-02-24 単行本（ソフトカバー） 4814400535 (ASIN), 9784814400539 (EAN), 4814400535 (ISBN) ついに Effective Go のタイトルを冠した本の邦訳が出た。版元で Ebook を買える。\nreviewed by Spiegel on 2024-02-22 (powered by PA-APIv5)\n暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n数学ガール／乱択アルゴリズム 結城 浩 (著) SBクリエイティブ 2011-02-25 (Release 2014-03-12) Kindle版 B00I8AT1FO (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 工学ガール，リサちゃん登場！\nreviewed by Spiegel on 2015-04-19 (powered by PA-APIv5)\n"
    },
    {
      "title": "Go 1.22 における疑似乱数生成器",
      "section": "golang",
      "description": "時代は math/rand/v2 かな",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/pseudo-random-number-generator-v2/",
      "published": "2024-03-07T13:20:40+00:00",
      "update": "2024-03-09T06:48:01+00:00",
      "content": "Go 1.22 の math/rand パッケージと追加された math/rand/v2 パッケージを眺めている。\nおそらく Go 1.22 における疑似乱数関連の最大のトピックは ChaCha8 がランタイムに組み込まれ，疑似乱数生成器の既定アルゴリズムになったことだろう。\nThe Salsa20 family of stream ciphers : これがベースになる論文かな Salsa20 - Wikipedia C2SP/chacha8rand.md at main · C2SP/C2SP · GitHub つくって理解するストリーム暗号 ChaCha20 - ちりもつもればミルキーウェイ : Go でサンプルコードを書いておられる。ありがたや ChaCha はストリーム暗号の一種で，簡単に言うと，疑似乱数を生成してそれを平文と XOR するというものらしい。 このうちの疑似乱数を生成する部分を切り出しているようだ。 ストリーム暗号に使うものなので，暗号技術的にセキュアでかつ速いというのが特徴になるだろうか。 ちなみに ChaCha の後ろについている 20 とか 8 とかはラウンド数を示しているそうな。\nChaCha は OpenSSL だか OpenSSH だかでも見かけたような（うろ覚え）。 もし結城浩さんが『暗号技術入門』の第4版を出される機会があれば，付録でいいので是非 ChaCha にも言及して欲しい。\nランタイムに ChaCha8 疑似乱数生成器を組み込む ChaCha8 疑似乱数生成器のアルゴリズムは internal/chacha8rand パッケージに実装されている。 中身については割愛させてもらう。 Internal パッケージなので，サードパーティのパッケージからは直接参照できない。\nまずは runtime パッケージに組み込んでいる部分を見てみる。 ちょっと長いけどご容赦。\n// OS-specific startup can set startupRand if the OS passes // random data to the process at startup time. // For example Linux passes 16 bytes in the auxv vector. var startupRand []byte // globalRand holds the global random state. // It is only used at startup and for creating new m\u0026#39;s. // Otherwise the per-m random state should be used // by calling goodrand. var globalRand struct { lock mutex seed [32]byte state chacha8rand.State init bool } var readRandomFailed bool // randinit initializes the global random state. // It must be called before any use of grand. func randinit() { lock(\u0026amp;globalRand.lock) if globalRand.init { fatal(\u0026#34;randinit twice\u0026#34;) } seed := \u0026amp;globalRand.seed if startupRand != nil { for i, c := range startupRand { seed[i%len(seed)] ^= c } clear(startupRand) startupRand = nil } else { if readRandom(seed[:]) != len(seed) { // readRandom should never fail, but if it does we\u0026#39;d rather // not make Go binaries completely unusable, so make up // some random data based on the current time. readRandomFailed = true readTimeRandom(seed[:]) } } globalRand.state.Init(*seed) clear(seed[:]) globalRand.init = true unlock(\u0026amp;globalRand.lock) } // readTimeRandom stretches any entropy in the current time // into entropy the length of r and XORs it into r. // This is a fallback for when readRandom does not read // the full requested amount. // Whatever entropy r already contained is preserved. func readTimeRandom(r []byte) { // Inspired by wyrand. // An earlier version of this code used getg().m.procid as well, // but note that this is called so early in startup that procid // is not initialized yet. v := uint64(nanotime()) for len(r) \u0026gt; 0 { v ^= 0xa0761d6478bd642f v *= 0xe7037ed1a0b428db size := 8 if len(r) \u0026lt; 8 { size = len(r) } for i := 0; i \u0026lt; size; i++ { r[i] ^= byte(v \u0026gt;\u0026gt; (8 * i)) } r = r[size:] v = v\u0026gt;\u0026gt;32 | v\u0026lt;\u0026lt;32 } } via runtime/rand.go これは疑似乱数生成器の状態（主に seed）を管理してる部分かな。 最初の seed は乱数デバイスから取ってるんだね。 これに失敗すると時刻から生成する，と。 ユーザ側は明示的に seed を指定する必要がなくなるということやね。\n// readTimeRandom stretches any entropy in the current time // into entropy the length of r and XORs it into r. // This is a fallback for when readRandom does not read // the full requested amount. // Whatever entropy r already contained is preserved. func readTimeRandom(r []byte) { // Inspired by wyrand. // An earlier version of this code used getg().m.procid as well, // but note that this is called so early in startup that procid // is not initialized yet. v := uint64(nanotime()) for len(r) \u0026gt; 0 { v ^= 0xa0761d6478bd642f v *= 0xe7037ed1a0b428db size := 8 if len(r) \u0026lt; 8 { size = len(r) } for i := 0; i \u0026lt; size; i++ { r[i] ^= byte(v \u0026gt;\u0026gt; (8 * i)) } r = r[size:] v = v\u0026gt;\u0026gt;32 | v\u0026lt;\u0026lt;32 } } // bootstrapRand returns a random uint64 from the global random generator. func bootstrapRand() uint64 { lock(\u0026amp;globalRand.lock) if !globalRand.init { fatal(\u0026#34;randinit missed\u0026#34;) } for { if x, ok := globalRand.state.Next(); ok { unlock(\u0026amp;globalRand.lock) return x } globalRand.state.Refill() } } // bootstrapRandReseed reseeds the bootstrap random number generator, // clearing from memory any trace of previously returned random numbers. func bootstrapRandReseed() { lock(\u0026amp;globalRand.lock) if !globalRand.init { fatal(\u0026#34;randinit missed\u0026#34;) } globalRand.state.Reseed() unlock(\u0026amp;globalRand.lock) } // rand32 is uint32(rand()), called from compiler-generated code. //go:nosplit func rand32() uint32 { return uint32(rand()) } // rand returns a random uint64 from the per-m chacha8 state. // Do not change signature: used via linkname from other packages. //go:nosplit //go:linkname rand func rand() uint64 { // Note: We avoid acquirem here so that in the fast path // there is just a getg, an inlined c.Next, and a return. // The performance difference on a 16-core AMD is // 3.7ns/call this way versus 4.3ns/call with acquirem (+16%). mp := getg().m c := \u0026amp;mp.chacha8 for { // Note: c.Next is marked nosplit, // so we don\u0026#39;t need to use mp.locks // on the fast path, which is that the // first attempt succeeds. x, ok := c.Next() if ok { return x } mp.locks++ // hold m even though c.Refill may do stack split checks c.Refill() mp.locks-- } } // mrandinit initializes the random state of an m. func mrandinit(mp *m) { var seed [4]uint64 for i := range seed { seed[i] = bootstrapRand() } bootstrapRandReseed() // erase key we just extracted mp.chacha8.Init64(seed) mp.cheaprand = rand() } via runtime/rand.go mrandinit() 関数でランタイムを初期化して，それを使って実際に乱数を取得してるのが rand() 関数だね。 ふむふむ。\nmath/rand パッケージのトップレベル関数群にランタイムの ChaCha8 を組み込む それじゃあ math/rand パッケージの方を見てみよう。\n//go:linkname runtime_rand runtime.rand func runtime_rand() uint64 via math/rand/rand.go go:linkname ディレクティブの説明は割愛する。 こうやってリンクしてるということで飲み込んでいただければ（笑） そうそう。 go:linkname ディレクティブは unsafe パッケージを要求するので，真似するときは要注意だよ。\nともかく，この runtime_rand() 関数を使って rand.Source インタフェース互換の構造体 runtimeSource を定義している。\n// runtimeSource is an implementation of Source64 that uses the runtime // fastrand functions. type runtimeSource struct { // The mutex is used to avoid race conditions in Read. mu sync.Mutex } func (*runtimeSource) Int63() int64 { return int64(runtime_rand() \u0026amp; rngMask) } func (*runtimeSource) Seed(int64) { panic(\u0026#34;internal error: call to runtimeSource.Seed\u0026#34;) } func (*runtimeSource) Uint64() uint64 { return runtime_rand() } via math/rand/rand.go Seed() メソッドを呼び出したら panic 吐くとか容赦ないな（笑） runtimeSource はこんな風に使う。\n// globalRandGenerator is the source of random numbers for the top-level // convenience functions. When possible it uses the runtime fastrand64 // function to avoid locking. This is not possible if the user called Seed, // either explicitly or implicitly via GODEBUG=randautoseed=0. var globalRandGenerator atomic.Pointer[Rand] var randautoseed = godebug.New(\u0026#34;randautoseed\u0026#34;) // globalRand returns the generator to use for the top-level convenience // functions. func globalRand() *Rand { if r := globalRandGenerator.Load(); r != nil { return r } // This is the first call. Initialize based on GODEBUG. var r *Rand if randautoseed.Value() == \u0026#34;0\u0026#34; { randautoseed.IncNonDefault() r = New(new(lockedSource)) r.Seed(1) } else { r = \u0026amp;Rand{ src: \u0026amp;runtimeSource{}, s64: \u0026amp;runtimeSource{}, } } if !globalRandGenerator.CompareAndSwap(nil, r) { // Two different goroutines called some top-level // function at the same time. While the results in // that case are unpredictable, if we just use r here, // and we are using a seed, we will most likely return // the same value for both calls. That doesn\u0026#39;t seem ideal. // Just use the first one to get in. return globalRandGenerator.Load() } return r } via math/rand/rand.go // Seed uses the provided seed value to initialize the default Source to a // deterministic state. Seed values that have the same remainder when // divided by 2³¹-1 generate the same pseudo-random sequence. // Seed, unlike the [Rand.Seed] method, is safe for concurrent use. // // If Seed is not called, the generator is seeded randomly at program startup. // // Prior to Go 1.20, the generator was seeded like Seed(1) at program startup. // To force the old behavior, call Seed(1) at program startup. // Alternately, set GODEBUG=randautoseed=0 in the environment // before making any calls to functions in this package. // // Deprecated: As of Go 1.20 there is no reason to call Seed with // a random value. Programs that call Seed with a known value to get // a specific sequence of results should use New(NewSource(seed)) to // obtain a local random generator. func Seed(seed int64) { orig := globalRandGenerator.Load() // If we are already using a lockedSource, we can just re-seed it. if orig != nil { if _, ok := orig.src.(*lockedSource); ok { orig.Seed(seed) return } } // Otherwise either // 1) orig == nil, which is the normal case when Seed is the first // top-level function to be called, or // 2) orig is already a runtimeSource, in which case we need to change // to a lockedSource. // Either way we do the same thing. r := New(new(lockedSource)) r.Seed(seed) if !globalRandGenerator.CompareAndSwap(orig, r) { // Something changed underfoot. Retry to be safe. Seed(seed) } } via math/rand/rand.go つまり，環境変数 GODEBUG で明示的に指定（randautoseed=0）するか最初に rand.Seed() 関数を呼び出すかしない限りランタイムに組み込んだ ChaCha8 疑似乱数生成器が有効になるっちうわけだ。 ちなみに lockedSource は math/rand パッケージに従来からある疑似乱数生成器で，名前の通り，ちゃんと mutex で排他処理している。\nmath/rand/v2 パッケージにおける Source インタフェースの定義 では，いよいよ Go 1.22 で追加された math/rand/v2 パッケージを見てみよう。\nmath/rand パッケージと math/rand/v2 パッケージとの大きな違いは rand.Source インタフェースが非互換になっていることだろう。\nmath/rand パッケージの Source インタフェースの定義は以下の通り。\n// A Source represents a source of uniformly-distributed // pseudo-random int64 values in the range [0, 1\u0026lt;\u0026lt;63). // // A Source is not safe for concurrent use by multiple goroutines. type Source interface { Int63() int64 Seed(seed int64) } // A Source64 is a [Source] that can also generate // uniformly-distributed pseudo-random uint64 values in // the range [0, 1\u0026lt;\u0026lt;64) directly. // If a [Rand] r\u0026#39;s underlying [Source] s implements Source64, // then r.Uint64 returns the result of one call to s.Uint64 // instead of making two calls to s.Int63. type Source64 interface { Source Uint64() uint64 } via math/rand/rand.go これに対して math/rand/v2 ではこう定義されている。\n// A Source is a source of uniformly-distributed // pseudo-random uint64 values in the range [0, 1\u0026lt;\u0026lt;64). // // A Source is not safe for concurrent use by multiple goroutines. type Source interface { Uint64() uint64 } via math/rand/v2/rand.go どえらシンプル！ Seed() メソッドがなくなったのは大きいね。 これによって runtimeSource やトップレベル関数群が参照する globalRand の定義もめっさシンプルになった。\n// globalRand is the source of random numbers for the top-level // convenience functions. var globalRand = \u0026amp;Rand{src: \u0026amp;runtimeSource{}} //go:linkname runtime_rand runtime.rand func runtime_rand() uint64 // runtimeSource is a Source that uses the runtime fastrand functions. type runtimeSource struct{} func (*runtimeSource) Uint64() uint64 { return runtime_rand() } via math/rand/v2/rand.go うんうん。 シンプルが一番だね。\nChaCha8 を rand.Source にする ChaCha8 疑似乱数生成器を疑似乱数の Source として明示的に組み込む場合は， rand.NewChaCha8() 関数を使って生成する。\nimport \u0026#34;internal/chacha8rand\u0026#34; // A ChaCha8 is a ChaCha8-based cryptographically strong // random number generator. type ChaCha8 struct { state chacha8rand.State } // NewChaCha8 returns a new ChaCha8 seeded with the given seed. func NewChaCha8(seed [32]byte) *ChaCha8 { c := new(ChaCha8) c.state.Init(seed) return c } // Seed resets the ChaCha8 to behave the same way as NewChaCha8(seed). func (c *ChaCha8) Seed(seed [32]byte) { c.state.Init(seed) } // Uint64 returns a uniformly distributed random uint64 value. func (c *ChaCha8) Uint64() uint64 { for { x, ok := c.state.Next() if ok { return x } c.state.Refill() } } via math/rand/v2/chacha8.go ランタイムに組み込まれているものと違って，こちらは排他処理を行っていない。 並行的に安全（concurrency safe）ではないわけだ。 なので平行処理下で math/rand/v2 の ChaCha8 を扱う場合は要注意である。 つか，平行処理下で ChaCha8 疑似乱数生成器を使うならトップレベル関数群を使うべきだろう。\nPCG を rand.Source にする math/rand/v2 にはもうひとつ疑似乱数生成器が用意されている。 PCG (Permuted Congruential Generator) というそうな。\n// A PCG is a PCG generator with 128 bits of internal state. // A zero PCG is equivalent to NewPCG(0, 0). type PCG struct { hi uint64 lo uint64 } // NewPCG returns a new PCG seeded with the given values. func NewPCG(seed1, seed2 uint64) *PCG { return \u0026amp;PCG{seed1, seed2} } via math/rand/v2/pcg.go PCG は線形合同法（LCG）のバリエーションなんだそうで， LCG の統計学上の欠点を改善したものらしい。 2014年に発表された比較的新しいアルゴリズムのようだが，今のところは欠点のようなものは特に指摘されてないとか。 当然ながら暗号技術分野では使えない。\nPCG, A Family of Better Random Number Generators | PCG, A Better Random Number Generator Permuted congruential generator - Wikipedia Permuted congruential generator - Wikipedia : 日本語 こちらも並行的に安全ではないのでご注意を。\nこれから math/rand を使う理由はないかな 今までは math/rand で用意されている疑似乱数生成器は暗号技術的にセキュアではない（要件である「予測困難性」を満たさない）ため使いどころを考えなければならなかったが Go 1.22 から math/rand, math/rand/v2 ともに ChaCha8 が既定の疑似乱数生成器なったため用途を選ばずカジュアルに使えるようになるだろう。 そうなると，これから疑似乱数生成器を使おうというとききに，わざわざ math/rand を使う理由はないかな。 math/rand って無駄に複雑になってる感じだもんなぁ。\nちなみに math/rand/v2 では Read() 関数もなくなっているが， math/rand でも rand.Read() 関数は Deprecated になってるし，リリースノートを見ると， Read() 関数が使いたきゃ crypto/rand パッケージを使え，みたいなことが書いてあるので，まぁそういうことなんだろう。\nブックマーク Go 1.22 Release Notes - The Go Programming Language RFC 4086 - Randomness Requirements for Security （日本語訳） Go の疑似乱数生成器は並行的に安全ではないらしい（追記あり） Go 1.22 の math/rand/v2 を使ってみる 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nGo言語 100Tips ありがちなミスを把握し、実装を最適化する impress top gearシリーズ Teiva Harsanyi (著), 柴田 芳樹 (著) インプレス 2023-08-18 (Release 2023-08-18) Kindle版 B0CFL1DK8Q (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元で PDF 版を購入可能。事実上の Effective Go とも言える充実の内容。オリジナルは敢えてタイトルに “tips” という単語を入れるのを避けたのに邦題が「100 Tips」とかなっていて，原作者がお怒りとの噂（あくまで噂）\nreviewed by Spiegel on 2023-08-18 (powered by PA-APIv5)\nGo言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Eブック版もある。感想はこちら。 Go 言語で並行処理を書くならこの本は必読書になるだろう。\nreviewed by Spiegel on 2020-01-13 (powered by PA-APIv5)\n効率的なGo ―データ指向によるGoアプリケーションの性能最適化 Bartłomiej Płotka (著), 山口 能迪 (翻訳) オライリー・ジャパン 2024-02-24 単行本（ソフトカバー） 4814400535 (ASIN), 9784814400539 (EAN), 4814400535 (ISBN) ついに Effective Go のタイトルを冠した本の邦訳が出た。版元で Ebook を買える。\nreviewed by Spiegel on 2024-02-22 (powered by PA-APIv5)\n暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n赤ずきんチャチャ 1 (りぼんマスコットコミックスDIGITAL) 彩花みん (著) 集英社 1993-02-15 (Release 2014-02-25) Kindle版 B00I8ETG96 (ASIN) そういえばコミックは読んでないかな。「リボン」は読まなかったからなぁ...\nreviewed by Spiegel on 2024-03-07 (powered by PA-APIv5)\n"
    },
    {
      "title": "スマホで高解像度音楽ファイルを鳴らしてみる",
      "section": "remark",
      "description": "違いが分からん orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2024/03/high-resolution-audio/",
      "published": "2024-03-05T03:46:15+00:00",
      "update": "2024-03-05T09:31:44+00:00",
      "content": "前回の続き。\nスマホの Onkyo HF Player アプリと USB-DAC + BOSE 卓上スピーカーの構成で高解像度版の音楽ファイルを鳴らしたらどうなるか気になったので，以下の2つの方法を試してみた。\nmora で購入した音楽ファイルと Amazon で購入した MP3 のファイルを比較してみる mora で購入した音楽ファイルと CD からリッピングしたファイルを比較してみる 高解像度版（High Resolution）音楽ファイル 知ってる人には今更な話だが，音楽データの場合 CD が基準になっていて，それ以上の解像度のデータを「ハイレゾ（High Resolution）」と呼んでいるらしい。 解像度を示すパラメータは2つあって，ひとつはサンプリングレート，もうひとつは量子化ビット数である1。 ものすごく端折って言うと，サンプリングレートは時間に対する分解能で，量子化ビット数はダイナミックレンジを決める値と考えてよい。 CD の場合は $44.1\\,\\mathrm{kHz}$ / $16\\,\\mathrm{bits}$ の解像度である2。 そして，サンプリングレートまたは量子化ビット数がCDより大きければ「ハイレゾ」なんだそうな。\n「ハイレゾ」か否かの指標にはもうひとつあって，それがデータの圧縮方法である。 MP3 ファイルは非可逆圧縮方式なので元に戻した際にどうしても情報落ちが発生する。 このため MP3 ファイルは数値上の解像度に関わらず「ハイレゾ」とは見なされないようだ。\n一方，可逆圧縮方式で普及している（大抵のメジャーな音楽配信サービスで対応している）のが FLAC (Free Lossless Audio Codec) である。 つまり FLAC ファイルで $44.1\\,\\mathrm{kHz}$ / $16\\,\\mathrm{bits}$ 以上の解像度であれば「ハイレゾ」と言えるわけだ。\nとまぁ，話を単純化したところで早速比べてみよう。\nアップサンプリング 少し前に MindaRyn さんの「HIBANA」を Amazon で購入したので，同じタイトルを mora でも購入してみた。\nHIBANA／MindaRyn｜音楽ダウンロード・音楽配信サイト　mora ～WALKMAN®公式ミュージックストア～ ここで買える音楽ファイルは FLAC で解像度は $96.0\\,\\mathrm{kHz}$ / $24\\,\\mathrm{bits}$ である。 さっそく聴き比べてみたのだが\u0026hellip; 違いが分からん orz\n実は Onkyo HF Player 有料版の機能に「アップサンプリング機能」ってのがあって USB-DAC を繋いだ状態だと最大で $384\\,\\mathrm{kHz}$までレートを上げてくれる（レートの最大値は USB-DAC の性能による。意図的に低めに設定することも可能）。 実際に Amazon で買った MP3 版は $352.8\\,\\mathrm{kHz}$， mora で買った FLAC 版は $384\\,\\mathrm{kHz}$ になっていた。 ここまでくると私ごときの耳では聴き分けられないわけだ。\n「組曲 惑星」をリッピングしてみる 今度は，以前に CD で買った「組曲 惑星（小澤征爾さんの指揮）」をリッピングして FLAC ファイルに落としてみる。 Ubuntu では昔に紹介した Asunder が FLAC に対応している。\nAsunder settings 早速これを使って FLAC ファイルを作成してみる。 でも，これって CD 以上の解像度にはならないよね，多分。\nmora でも「組曲 惑星」を探してみたのだが，こちらは小澤征爾さんの指揮によるものはなくて，以下のものを購入した。\nホルスト: 組曲「惑星」/神秘のトランペッター Op. 18(スコティッシュ・ナショナル管/ロイド=ジョーンズ)／ロイヤル・スコティッシュ・ナショナル管弦楽団/デイヴィッド・ロイド=ジョーンズ(指揮)｜音楽ダウンロード・音楽配信サイト　mora ～WALKMAN®公式ミュージックストア～ こちらは $44.1\\,\\mathrm{kHz}$ / $24\\,\\mathrm{bits}$ の解像度。 トータルで1GBもあるよ。 ファイルサイズがデカくなるから意図的にサンプリングレートを落としてるのか？ まぁいいや。\nOnkyo HF Player で聴くと，両者とも $352.8\\,\\mathrm{kHz}$ にアップサンプリングされた。 やっぱり違いは分からず。\nアップサンプリング機能を外して比較することも考えたが，わざとスペックを落として比較することに意義を感じなかったので止めた。 要するに MP3 だろうが FLAC だろうが Onkyo HF Player から USB-DAC 経由で BOSE の卓上スピーカーで聴く限り，少なくとも私の耳では，違いは分からんということだ。\nまぁ，でも，折角 mora にサインアップしたし，可逆圧縮の FLAC で曲が手に入るなら，これからは FLAC を優先して調達してもいいかなぁ。\nブックマーク 「ハイレゾ」の基本をおさらい。DSDやFLAC、MQAなどの違いとは? - AV Watch 【Ubuntu日和】【第23回】ハイレゾは？Spotifyは？LDACは？Ubuntuで音楽を聴くあれこれ - PC Watch Bluetooth SBCコーデックは本当に音質が悪いのか - 謝花ミカ - Medium 参考 Bose Companion 2 Series III multimedia speaker system [並行輸入品] BOSE(ボーズ) エレクトロニクス B00CD1PTF0 (ASIN), 7123290434782 (EAN), 0017817602853 (EAN), 4969929233370 (EAN), 0667562762502 (EAN), 7887117126884 (EAN), 017817602853 (UPC), 667562762502 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 頑張ったご褒美に購入。特に低音が素晴らしい。流石 BOSE といったところか。卓上スピーカーとしては上々。\nreviewed by Spiegel on 2024-03-02 (powered by PA-APIv5)\n【VGP2023SUMMER金賞】iBasso Audio DC03PRO アイバッソ Type C タイプC USB DAC ポータブル 小型 アンプ 3.5mm ケーブル着脱式 ハイレゾ HD ロスレス android ゲーム 音楽【国内正規品】 (ブルー) iBasso Audio B0BL76SJL6 (ASIN), 6971585541216 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; スマホや PC の USB から入力する Digital Analog Converter。低音から高音までくっきりはっきり。PCM なら 384kHz/32bits， DSD なら 11.2MHz/1bit までのネイティブ再生に対応している。\nreviewed by Spiegel on 2024-03-02 (powered by PA-APIv5)\nミニサイズ Shokz OpenRun Mini 骨伝導イヤホン 公式ストア正規品 ワイヤレス 急速充電 驚きの通話品質 IP67防塵防水 bluetooth5.1 2 30日間返品無料 コズミックブラック Shenzhen Shokz Co., Ltd. エレクトロニクス B09TVLHJ1X (ASIN), 4512223694288 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 以前のものはマルチファンクションキーが利かなくなったので Black Friday の安売りのタイミングで買い替え。私のように頭の小さい人向け（笑） 値段並みの音質はある，と思う。耳が自由って素晴らしい。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nHIBANA MindaRyn (メインアーティスト) Lantis 2024-01-11 (Release 2024-01-11) MP3 ダウンロード B0CPM8V21D (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; アニメ「戦国妖狐 世直し姉弟編」の OP 曲。 MindaRyn さんはよい。 mora で FLAC ファイルも購入。\nreviewed by Spiegel on 2024-02-23 (powered by PA-APIv5)\nホルスト:組曲(惑星) 小澤征爾 (アーティスト) Universal Music 2005-06-21 (Release 2005-06-22) CD B0009N2VDM (ASIN), 4988005392589 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 衝動買いしたネックスピーカーの評価用音源として購入。以前持ってたのは引越し時に処分してしまったので実質的には買い戻しになるのかな。\nreviewed by Spiegel on 2022-08-12 (powered by PA-APIv5)\nビッグブリッヂの死闘(FFPR Ver.) 植松 伸夫 (メインアーティスト) スクウェア・エニックス ミュージック 2022-03-17 (Release 2022-03-17) MP3 ダウンロード B09V3D51LF (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 神曲。実際には mora で購入。\nreviewed by Spiegel on 2024-03-05 (powered by PA-APIv5)\nこの記事では PCM (Pulse Code Modulation) を前提に書いている。これとは別に DSD (Direct Stream Digial) というのもあるのだが，仕組みが全然違うので割愛する。 DSD の音楽ファイルは .dff とか .dsf とかいった拡張子になることが多い。また，音楽配信サービスで売っている DSD ファイルは最初から高解像度になるようパラメータが選ばれているため，無条件で「ハイレゾ」だと思っていいだろう。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nアナログレコードのダイナミックレンジが概ね $65\\,\\mathrm{dB}$ ほどで CD は計算から $16\\,\\mathrm{bits}\\times6=96\\,\\mathrm{dB}$ と言われている。人間の耳で苦痛なく知覚できるダイナミックレンジは $120\\,\\mathrm{dB}$ 程度と言われているが，音の感受性についてはリニアではなく，実際には量子化ビット数は $16\\,\\mathrm{bits}$ もあれば十分という主張もある。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "もうすぐ春ですね（お散歩カメラ 2024-03-04）",
      "section": "remark",
      "description": "いつものように八雲温泉 / 定点観測→帰宅 / 【おまけ】ハッシュタグ名は重要？",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2024/03/04-osanpo-camera/",
      "published": "2024-03-04T11:00:17+00:00",
      "update": "2024-03-04T11:58:45+00:00",
      "content": "いや，暦上は既に春なんだけどね（笑）\nいつものように八雲温泉 折角の5連休なのだが，日中確実に晴れると予報している日が今日しかなくて。 温泉行くなら今日しかない！ というわけで，いつものように八雲温泉へ。 今回は低血糖にならないよう，こまめに栄養補給したり。\nようやく周りの景色を楽しむ余裕ができたというか。 目には映ってるのに視認してないものもあって，たとえば熊野大社の鳥居の横にある水車小屋とか。\n水車 | Flickr そんなことより，お風呂行こうお風呂。\n風呂上がりの一杯 | Flickr 温泉のある熊野館は火曜日が定休日だそうで。そのせいなのか，自販機のコーヒー牛乳が売り切れてたですよ。 いや，普通の牛乳も好きなのでいいけどね。 木次乳業の牛乳は美味い。\n食堂も月曜がお休みなので（田舎はねー）食べるところもないのだが，昼食のために市内にとって返す前に熊野大社に詣でておこう。\n熊野大社 | Flickr おみくじ in 熊野大社 | Flickr 餌くれ | Flickr 梛の木 | Flickr 梛 (なぎ) の木は縁結びの御利益のある木なんだってさ。 境内にポツンとあって目立ってたので，つい撮ってしまった。 まぁ，いまさら縁結びとか興味ないね（by クラウド）。\nもうすぐ春ですね | Flickr だんだん景色に色が付いてくるというか春が近づいてる感じ。\n定点観測→帰宅 では昼飯を食いに市内に移動しますかね。\n意宇川 | Flickr 本当は JR 松江駅付近で昼食を食べるつもりだったけど，途中でギブアップしてコメダで飯を食いました。\nコメダで昼食 | Flickr では，移動していつもの定点観測でもするか。\n今日の宍道湖 | Flickr 今日の松江城 | Flickr うう。 だんだん曇ってきた。 今日は松江城から大山は見えず。\n今日は県立図書館も休館日なので，そのまま松江駅付近に移動して用事を済ませる。 用事が済んだら，天気も悪くなってるみたいだし，帰ろうかね。\n今日の宍道湖（夕景） | Flickr 一度衰えた筋力と体力はなかなか元に戻らない。 まぁ，地道にフィットネスバイクから始めよう。\n【おまけ】ハッシュタグ名は重要？ 最近 Bluesky がハッシュタグに対応したようで，早速自作ツールでも対応して1，写真ボット投稿に #photography のタグを追加した。 したら，ちょっとリアクションが増えたのね。 ハッシュタグで追跡してる人が結構いるということなのかねぇ。\n個人的にはハッシュタグがずらずら並んでる投稿は鬱陶しいと感じてしまうので，自投稿でもあまり付けないようにしてるのだが「注目の搾取」という意味ではちゃんと意味があるんだなぁと思った。 勉強になりました。\nだからといってハッシュタグをずらずら並べるような真似は，これからもしないけどね。\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nVAAM(ヴァーム) 明治 ヴァーム(VAAM) アスリート 顆粒 栄養ドリンク風味 4.7g×10袋 明治 (Release 2021-03-16) ヘルスケア\u0026amp;ケア用品 B08VMWL13F (ASIN), 4902705035614 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 運動時に脂肪をエネルギーに変えやすくする働きがあるらしい。お試しで買ってみた。とりあえず1時間以上自転車に乗る場合に服用している。水に溶かさず飲むと書いてあるが，水と一緒に飲まないと大変なことになるので注意（経験済み）\nreviewed by Spiegel on 2022-11-04 (powered by PA-APIv5)\nPOW BAR パウバー お試し4味4本セット 【トレイルランニング トレラン ランニング 補給食 ビーガン オーガニック エナジーバー 砂糖不使用】 Camcom B09JNPGVVZ (ASIN), 4580623990620 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; しっとり食感で旨し。口の中の水分をもっていかれないのは素晴らしい。腹持ちもいいので1本で当分保つ。\nreviewed by Spiegel on 2023-10-28 (powered by PA-APIv5)\nGOLDEN☆BEST キャンディーズ コンプリート・シングルコレクション キャンディーズ (メインアーティスト) Sony Music Direct(Japan)Inc. 2011-06-08 (Release 2015-11-04) MP3 ダウンロード B01721ECA8 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 今さら昭和時代のアイドルを美化するつもりはないけれど，あのとき（生物年齢的にも）子供だった私にとって彼女らは間違いなく憧れのアイドルだったのですよ。\nreviewed by Spiegel on 2019-04-29 (powered by PA-APIv5)\nハッシュタグ対応の実装は github.com/mattn/bsky がとても参考になった。つか，ほぼ丸写し（笑） ありがたや。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "スマホと音楽",
      "section": "remark",
      "description": "何事も身の丈に合わせた「ほどほど」が大事ってことか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2024/03/ktai-and-music/",
      "published": "2024-03-04T00:43:38+00:00",
      "update": "2024-03-05T03:56:54+00:00",
      "content": "学生時代にオーディオ小僧だった黒歴史の反動かオーディオ環境にはあまりこだわらないようにしている。 スマホで聴く音楽だって Amazon MP3 で購入してるものだしプレイヤーも少し前まで Amazon 製のアプリで聴いていた。 アプリの方はあまりの使い勝手の悪さに ONKYO のアプリに入れ替えたけど 。\nオーディオ\u0026amp;ビジュアル製品情報：Onkyo HF Player そこから前回の「頑張ったご褒美に BOSE の卓上スピーカー買うたった」の話である。 やっぱスマホからの音がどう聴こえるか気になるよね。 というわけで USB-DAC をもうひとつ購入して繋いでみた。\nOnkyo HF Player で USB-DAC を認識させると以下の表示が出る。\nOnkyo HF Player おー。 384kHz まで行けるのか。 でも聴いてるのは Amazon で買った MP3 ファイルだけどね。 それでも USB-DAC 経由で BOSE の卓上スピーカーから音を出すと低音から高音まで綺麗に出る。 今までスマホの音楽は Shokz の骨伝導スピーカーで聴いてたのでとても新鮮である。 「この曲ってこういう音だったんだ！」って感じ。 デジタル音源を聴く際には DAC の性能が決定的に重要だというのはよく分かった。\nこうなると高解像度の音源ファイルを鳴らすとどう聴こえるか，めがっさ気になる。 と思って e-onkyo music のサイトに行ってみたのだが\n現在e-onkyo musicは、新サービス「Qobuz（コバズ）」へのサービス切り替えの準備を進めております。\n[...]\nなおe-onkyo musicにてご購入いただいた作品、並びに4/25をもって配信終了となる一部音源フォーマットにつきましては、e-onkyo music上での再ダウンロードが可能ですが、「Qobuz」へのサービス移行後は、販売が終了した作品、並びに販売が終了した音源フォーマットは再ダウンロードいただけません。\n【重要なお知らせ】一部音源フォーマットの配信終了につきまして - ハイレゾ音源配信サイト【e-onkyo music】より とか書いてある。 えー。 じゃあ，サービス移行までは下手に近寄らないほうがいいか？ 保留だな，これ。\nもし私がオーディオ小僧のまま大人になってたら絶対に ONKYO か YAMAHA あたりのプリメインアンプのカタログをかき集めるところから初めてたな。 そもそもオーディオ小僧が卓上スピーカーで満足する筈がないけど（笑）\nカメラも沼1 だけどオーディオも沼だよなぁ。 何事も身の丈に合わせた「ほどほど」が大事ってことか。\n参考 Bose Companion 2 Series III multimedia speaker system [並行輸入品] BOSE(ボーズ) エレクトロニクス B00CD1PTF0 (ASIN), 7123290434782 (EAN), 0017817602853 (EAN), 4969929233370 (EAN), 0667562762502 (EAN), 7887117126884 (EAN), 017817602853 (UPC), 667562762502 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 頑張ったご褒美に購入。特に低音が素晴らしい。流石 BOSE といったところか。卓上スピーカーとしては上々。\nreviewed by Spiegel on 2024-03-02 (powered by PA-APIv5)\n【VGP2023SUMMER金賞】iBasso Audio DC03PRO アイバッソ Type C タイプC USB DAC ポータブル 小型 アンプ 3.5mm ケーブル着脱式 ハイレゾ HD ロスレス android ゲーム 音楽【国内正規品】 (ブルー) iBasso Audio B0BL76SJL6 (ASIN), 6971585541216 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; スマホや PC の USB から入力する Digital Analog Converter。低音から高音までくっきりはっきり。PCM なら 384kHz/32bits， DSD なら 11.2MHz/1bit までのネイティブ再生に対応している。\nreviewed by Spiegel on 2024-03-02 (powered by PA-APIv5)\nミニサイズ Shokz OpenRun Mini 骨伝導イヤホン 公式ストア正規品 ワイヤレス 急速充電 驚きの通話品質 IP67防塵防水 bluetooth5.1 2 30日間返品無料 コズミックブラック Shenzhen Shokz Co., Ltd. エレクトロニクス B09TVLHJ1X (ASIN), 4512223694288 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 以前のものはマルチファンクションキーが利かなくなったので Black Friday の安売りのタイミングで買い替え。私のように頭の小さい人向け（笑） 値段並みの音質はある，と思う。耳が自由って素晴らしい。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nAnything Goes!（『仮面ライダーオーズ／OOO』挿入歌） 大黒摩季 (メインアーティスト) avex trax 2019-05-01 (Release 2019-04-26) MP3 ダウンロード B07QH9YVZ3 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2022年は大黒摩季30周年だったんだそうで。でも私が知ってて唄える曲ってこれしかないんだよな（笑） 仕事中に聴くとテンションが上がる。\nreviewed by Spiegel on 2022-03-29 (powered by PA-APIv5)\nカメラも銀塩一眼レフを数台所持（主に天体写真用）するくらいにはハマってたが，すっぱり捨てて，今はトイカメラ以上のものはものは持たないことにしている。ちなみにスマホのカメラ機能もコンデジも，私から見ればトイカメラの範疇である。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Go 1.22 にアップデートする（セキュリティ・アップデートの追記あり）",
      "section": "release",
      "description": "仕事の忙しさにかまけて色々と放っぽり出してたので，少しずつ回復中。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2024/03/go-1_22_0-is-released/",
      "published": "2024-03-03T02:25:30+00:00",
      "update": "2024-03-07T13:20:46+00:00",
      "content": "仕事の忙しさにかまけて色々と放っぽり出してたので，少しずつ回復中。\nさて今更だが，先月 2024-02 に Go 1.22.0 が予定通りリリースされた。\nGo 1.22.0 is released Go 1.22 is released! - The Go Programming Language Go 1.22 Release Notes - The Go Programming Language 変化点の解説はページ末のブックマークを参照してもらうとして，とりあえず自機の環境をアップデートしてしまおうそうしよう。\nUbuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.22.1.linux-amd64.tar.gz）を取ってきてインストールすることを推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.22.1.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.22.1.linux-amd64.tar.gz $ sudo mv go go1.22.1 $ sudo ln -s go1.22.1 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.22.1 linux/amd64 Windows はインストールパッケージを取ってきて直接インストールする。 Scoop 経由でも OK\n複数バージョンの Go コンパイラを扱いたい場合は\n$ go install golang.org/dl/go1.22.1@latest $ go1.22.1 download $ go1.22.1 version go version go1.22.1 linux/amd64 てな感じに導入できる。\n【2024-03-06 追記】Go 1.22.1 のリリース【セキュリティ・アップデート】 予定通り Go 1.22.1 がリリースされた。 ついでに google.golang.org/protobuf パッケージにもアップデートのアナウンスがあった。 gRPC などを操ってる方は要注意である。\n[security] Go 1.22.1 and Go 1.21.8 are released [security] Vulnerability in google.golang.org/protobuf 脆弱性の内容は以下の通り（面倒になったので CVSS 評価は端折る）。\nCVE-2024-24783 crypto/x509: Verify panics on certificates with an unknown public key algorithm\nCVE-2023-45290 net/http: memory exhaustion in Request.ParseMultipartForm\nCVE-2023-45289 net/http, net/http/cookiejar: incorrect forwarding of sensitive headers and cookies on HTTP redirect\nCVE-2024-24785 html/template: errors returned from MarshalJSON methods may break template escaping\nCVE-2024-24784 net/mail: comments in display names are incorrectly handled\nCVE-2024-24786 Version v1.33.0 of the google.golang.org/protobuf module fixes a bug in the google.golang.org/protobuf/encoding/protojson package which could cause the Unmarshal function to enter an infinite loop when handling some invalid inputs.\nブックマーク Go 1.22リリース連載始まります \u0026amp; ループの変化とTinyGo 0.31 | フューチャー技術ブログ Go 1.22 リリース連載 slicesのマイナーアップデート | フューチャー技術ブログ Go 1.22リリース連載 archive/tar, archive/zip, bufio, io | フューチャー技術ブログ Go 1.22 リリース連載 encoding, encoding/json | フューチャー技術ブログ Go1.22 リリース連載 HTTPルーティングの強化 | フューチャー技術ブログ Go 1.22リリース連載 vet, log/slog, testing/slogtest | フューチャー技術ブログ 30種類のプログラミング言語で、ループ処理を書いてみた | フューチャー技術ブログ Go 1.22リリース連載 net, net/http, net/netip | フューチャー技術ブログ Go 1.22 でも残る、\u0026ldquo;syscall\u0026rdquo; を使わないといけないケース（ソース付き） - 標準愚痴出力 既存パッケージ(uncozip) を Go1.22 の rangefunc 対応に - 標準愚痴出力 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\nGo言語 100Tips ありがちなミスを把握し、実装を最適化する impress top gearシリーズ Teiva Harsanyi (著), 柴田 芳樹 (著) インプレス 2023-08-18 (Release 2023-08-18) Kindle版 B0CFL1DK8Q (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元で PDF 版を購入可能。事実上の Effective Go とも言える充実の内容。オリジナルは敢えてタイトルに “tips” という単語を入れるのを避けたのに邦題が「100 Tips」とかなっていて，原作者がお怒りとの噂（あくまで噂）\nreviewed by Spiegel on 2023-08-18 (powered by PA-APIv5)\n効率的なGo ―データ指向によるGoアプリケーションの性能最適化 Bartłomiej Płotka (著), 山口 能迪 (翻訳) オライリー・ジャパン 2024-02-24 単行本（ソフトカバー） 4814400535 (ASIN), 9784814400539 (EAN), 4814400535 (ISBN) ついに Effective Go のタイトルを冠した本の邦訳が出た。版元で Ebook を買える。\nreviewed by Spiegel on 2024-02-22 (powered by PA-APIv5)\n"
    },
    {
      "title": "頑張ったご褒美に BOSE の卓上スピーカー買うたった",
      "section": "remark",
      "description": "USB-DAC との組み合わせは最高！",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2024/03/tabletop-speaker/",
      "published": "2024-03-02T05:49:38+00:00",
      "update": "2024-03-04T00:49:59+00:00",
      "content": "いやぁ，今回はしんどかった。 三六協定ぶっちぎる勢いで残業やら休日出勤やらしまくりで，こんなの三十路の頃以来だよ。 というわけで何とか終わらせたので，今日から週末を含め5連休をいただくことになった。\n実は私は BOSE スピーカーのファンでして。 貧乏学生時代にバイトで稼いだお金で組んだオーディオコンポのスピーカーが BOSE の 101MMG だったのよ。 以来，アンプやプレイヤーは買い替えながらもスピーカーは 101MMG を使い続けていた。 それも広島を離れる際に一切合切処分してしまったのだけど。\nそれからはなるべくコンパクトな生活を心がけてきたけれど，少しずつ安定してくると気になってくる。\n音がしょぼい！！ 分かってますよ。 PC 用の卓上スピーカーや骨伝導ヘッドセットなんてそんなもんだから諦めろ，と。 でも，見ちゃったんスよ。 Amazon で BOSE の卓上スピーカー売ってるの。 値段も今回稼いだ残業代で軽く買えるぢゃん。\nこれって「頑張った自分へのご褒美」として買えっちうことなんちゃうん？ というわけで，無事に到着した。\n頑張ったご褒美 | Flickr 早速開けてみる。\nこれどうやって取り出すの？ | Flickr これ，どうやって開けたらいいんだ？ 15秒位悩んだよ。\n開梱してみた | Flickr ようやく開梱できた。\n背面を見ると，入力用のオーディオ端子が2系統ある。 ACアダプタが同梱されていて電源はそこからとるようだ。\nまずは PC の LINE OUT から直接繋いで音を出してみる。 うんうん。 ちゃんと聴こえるな。\n聞くところによると USB-DAC を間に咬ませると音が格段に良くなるらしい。 というわけで，今回はスマホ用の USB-DAC も買ってみた。\nUSB-DACも買うた | Flickr サバ缶じゃないっスよ（笑） Ubuntu の設定で見ると，こんな感じで認識するようだ。\nUSB-DACも買うた | Flickr これを咬ませて聴いてみると，なるほど全然違う。 下から上まで音がクリアに聴こえる。 私のようなシロートでも分かる変化だよ。 ガチのアンプは置く場所がなかったので安く上げてしまったが，十分な性能だろう。\nうし！ じゃあなんか音楽をかけてみよう。\n【北斗の拳 OP Full】愛をとりもどせ!!／クリスタルキング【ベースカバー】【Hokuto No Ken OP】Ai wo torimodose／Crystal King【Bass Cover】 - YouTube おー。 ベースがくっきりはっきり聴こえる。 素晴らしい！\nそだ。 これでゴジラのテーマ聴いたらええんちゃうん？\n【 シンゴジラ 】よりゴジラのテーマ/悲劇 Shin Godzilla エレクトーン演奏 - YouTube おー。 ゴジラが泣いている。\nそれにしても USB-DAC の威力凄いな。 オーディオ入力がもう1系統使えるし，スマホ用にもうひとつ買うかな。\nというわけで本棚から CD を引っ張り出して，小澤征爾さんの指揮による「惑星」を聴きながら，この記事を書いてみたり。 小澤征爾さんって先月亡くなられたんだよね。 合掌\u0026hellip;\n今回の買い物は当たりだった。 うんうん\n参考 Bose 101MMG スピーカーシステム BOSE(ボーズ) エレクトロニクス B00016AWEC (ASIN), 4969929000057 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 大昔，オーディオ小僧だった頃から愛用していた。帰郷する際に処分してしまったけど。いいスピーカーでした。\nreviewed by Spiegel on 2024-03-02 (powered by PA-APIv5)\nBose Companion 2 Series III multimedia speaker system [並行輸入品] BOSE(ボーズ) エレクトロニクス B00CD1PTF0 (ASIN), 7123290434782 (EAN), 0017817602853 (EAN), 4969929233370 (EAN), 0667562762502 (EAN), 7887117126884 (EAN), 017817602853 (UPC), 667562762502 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 頑張ったご褒美に購入。特に低音が素晴らしい。流石 BOSE といったところか。卓上スピーカーとしては上々。\nreviewed by Spiegel on 2024-03-02 (powered by PA-APIv5)\n【VGP2023SUMMER金賞】iBasso Audio DC03PRO アイバッソ Type C タイプC USB DAC ポータブル 小型 アンプ 3.5mm ケーブル着脱式 ハイレゾ HD ロスレス android ゲーム 音楽【国内正規品】 (ブルー) iBasso Audio B0BL76SJL6 (ASIN), 6971585541216 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; スマホや PC の USB から入力する Digital Analog Converter。低音から高音までくっきりはっきり。PCM なら 384kHz/32bits， DSD なら 11.2MHz/1bit までのネイティブ再生に対応している。\nreviewed by Spiegel on 2024-03-02 (powered by PA-APIv5)\nホルスト:組曲(惑星) 小澤征爾 (アーティスト) Universal Music 2005-06-21 (Release 2005-06-22) CD B0009N2VDM (ASIN), 4988005392589 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 衝動買いしたネックスピーカーの評価用音源として購入。以前持ってたのは引越し時に処分してしまったので実質的には買い戻しになるのかな。\nreviewed by Spiegel on 2022-08-12 (powered by PA-APIv5)\n"
    },
    {
      "title": "個人用 Mastodon サーバに活動拠点を移す",
      "section": "remark",
      "description": "できれば新しい方もよろしくお願いします 🙇",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2024/03/moving-to-personal-mastodon-server/",
      "published": "2024-03-02T00:05:00+00:00",
      "update": "2024-03-03T01:21:52+00:00",
      "content": "いやぁ，今回の仕事は辛かった。 今は解放感でいっぱいです。\n突然だが Mastodon サーバの活動拠点を fedibird.com アカウントから個人用に運用している goark.fedicity.net アカウントに移すことにした。\nいや，当初から思ってたのよ。 goark.fedicity.net は5K文字書けるんだよ。 なのにボット運用にしか使ってないのは勿体ねーって。 まだ特に使い途を思いついたわけじゃないけど，まとまった時間がとれてる今のうちに拠点を移しちゃおうかと。\nMastodon の「引っ越し」機能は使わず fedibird.com アカウントは予備系として残しておくことにした。 お世話になってる身分でナニだが Hostodon はたまに微妙なところがあって，昨夜も証明書の期限が切れて Web ページが開けなくなったし（すぐに更新されたけど。ひょっとして期限が切れてから更新してるのか？）。 技術的・財政的・政治的な理由で goark.fedicity.net が維持できなくなったときの帰る場所は確保しておかないと，と思って。\nというわけで fedibird.com アカウント をフォローしてくださってる方は，できれば新しい方もよろしくお願いします 🙇\nFedibird への寄付は継続するつもり。 大した金額じゃないし。 単純に情報収集するだけなら fedibird.com のほうが都合がいいんだけどね。 Mastodon ではユーザ数が多くて活動が活発なところほど情報収集には有利だし，なにより全文検索をサポートしてる Mastodon サーバなんて他にはそうそうないだろう。\nおそらくだけど goark.fedicity.net のほうは「日記」的な使い方になるんじゃないかなぁ。 脊髄反射で胡乱なことを口走りそうな気がするので気をつけないとな（笑）\nブックマーク 個人用 Mastodon サーバを立てた Mastodon と Bluesky でボット運用はじめました "
    },
    {
      "title": "お散歩カメラ 2024-02-24",
      "section": "remark",
      "description": "温泉と低血糖 / 猪が食べたい / 定点観測からの読書タイム",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2024/02/24-osanpo-camera/",
      "published": "2024-02-24T09:48:07+00:00",
      "update": "2024-02-24T10:04:38+00:00",
      "content": "3連休2日目。 そろそろ自転車で温泉に行きたい！\n温泉と低血糖 というわけで，今日も八雲温泉へ。 途中，梅の花を眺めながらノンビリ移動。\n白梅 | Flickr いや，今週は雨続きで全く自転車に乗れず，かつ連日の残業でフィットネスバイクにも乗れないという悪循環。 股関節付近の筋力が落ちてるのが分かる。 いつものように走れないからギアを落として（でもケイデンスはなるべく落とさないように）ノンビリ走るしかない。 早く通常勤務に戻りたい\u0026hellip;\nそういえば前回八雲温泉に行ったときに初めて気付いたのだが，熊野大社の駐車場の隅に駐輪場があった。 なんで今まで気づかなかったのか orz\n熊野大社の駐輪場 | Flickr どなたか，このタイプのスタンドの正しい使い方を教えてください。 他の人がやってるのを見様見真似で停めてるんだけど，これで正しいのか分からん。\n熊野館に入るとでっかい雛飾りが鎮座していた。\n雛飾り in 熊野館 | Flickr そういやそろそろ桃の節句か。 私が子供の頃は松江は月遅れで祝ってたのだが，今は普通に3月らしい。 時代の流れというやつである。\n早速温泉に浸かろうとしたのだが，なんかクラクラする。 この症状には覚えがあるぞ。 低血糖だわ。 脱衣所で服を脱ぎかけているところで行儀が悪かったのだが，慌ててブドウ糖を摂取した。 低血糖とか広島に居たとき以来だな。 念のため水も飲んでおく。\n私は糖尿病で医者に薬を処方してもらっている。 軽または中症状なら今どきはいい薬があって血液検査では正常値なのだが，低血糖になるリスクがあるんだよね。 糖尿病ってのは要するに糖代謝不全なので，薬が効きすぎたりとか体調によっては低血糖になることもある。 広島時代に1回なって懲りたので普段から鞄にブドウ糖を忍ばせている。 でも松江に帰ってからは症状が出なかったので油断していたよ。 自転車に乗る際の糖管理はもう少し考えたほうがいいか。 なんにせよ，お風呂に入ってる最中でなくてよかった。\n症状が落ち着いてから改めて入浴。 でも今回は身体に負担がかからないよう早めに上がったのだった。\n風呂上がりのコーヒー牛乳 | Flickr 猪が食べたい 今日こそは猪が食べたい！ というわけで安分亭へ。\n今日はここで昼飯 | Flickr 「猪コロッケ」なるものもあって，ちょっと心が揺らいだが，今回は見送って生姜焼き定食のみを注文した。\n猪焼肉（生姜焼き）定食 | Flickr このあとは腹ごなしに熊野大社に詣でて前半の予定は終了。\n定点観測からの読書タイム お腹がこなれたところで市内にとって返す。 用事を済ませつつ，いつもの定点観測。\n今日の宍道湖 | Flickr 今日の松江城 | Flickr 今日の大山 from 松江城 | Flickr 今日は曇りで大山は諦めていたのだが，見れたねぇ。 透明度は高かったということだろうか。\nそうそう。 今日の宍道湖はなんか鳥がアホほどいたのよ。\n鳥だまり | Flickr なんなんだろうね，あれ。\n最後は図書館で夕方まで読書。 なのだが，居眠りしてしまって進まず。 2日じゃ疲れは取れんか。\nホンマ，3連休でよかった。 明日は完全オフにする！\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nアークレイ株式会社 グルコレスキュー (ブドウ糖補給ゼリー) 25g×5包 2箱セット アークレイ株式会社 B06XDPTLDD (ASIN), 4573189972315 (EAN), 4987486118541 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 低血糖になった場合の緊急措置用に購入。仕事用鞄とプライベート用鞄に忍ばせている。ちょっとお世話になった。ゼリー状で摂りやすい。転ばぬ先の杖。\nreviewed by Spiegel on 2024-02-24 (powered by PA-APIv5)\nハッキング思考　強者はいかにしてルールを歪めるのか、それを正すにはどうしたらいいのか ブルース・シュナイアー (著), 高橋 聡 (翻訳) 日経BP 2023-10-12 (Release 2023-10-12) Kindle版 B0CK19L1HC (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版が出てた！\nreviewed by Spiegel on 2023-11-21 (powered by PA-APIv5)\n君と世界の終わりに 森羅万象 (メインアーティスト) Shinra Records 2022-10-30 (Release 2022-12-31) MP3 ダウンロード B0BQDD5J4H (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; YouTube アニメ（？）「世界の終わりに柴犬と」の主題歌「君と世界の終わりに」を含むアルバム。聴くほどにじわじわ来る。\nreviewed by Spiegel on 2024-02-04 (powered by PA-APIv5)\n"
    },
    {
      "title": "『「はやぶさ2」は何を持ち帰ったのか』を読む",
      "section": "remark",
      "description": "これを題材にオンラインで読書会とかしたら面白いかもねぇ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2024/02/the-return-of-hayabusa2/",
      "published": "2024-02-23T10:30:20+00:00",
      "update": "2024-02-24T09:51:42+00:00",
      "content": "Spiegel さんはぐだふわしたい いやぁ，休日出勤を繰り返してたら36協定に引っかかりそうになって上司からストップがかかったり。 それ以前に疲労とストレスで倒れそうっス。\nこの週末は何とか3連休をもぎ取って溜まりまくってる用事を済ませ，ついでに心身をリフレッシュすることにした。 今日も生憎の雨だったので自転車は諦めて，久しぶりに公共交通機関\u0026amp;徒歩で市内を歩き回る。\nんで，スキマ時間を使って昨日届いた『「はやぶさ2」は何を持ち帰ったのか』を読んでいた。\n結局、紙の本買うた | Flickr そのうち待っていれば Kindle 版が出るんだろうけど，何となく待ちきれず。 多分 Kindle 版が出たらそれはそれで買いそうな気がする（笑）\nというわけで，久しぶりの読書感想文ですよ。\n『「はやぶさ2」は何を持ち帰ったのか』を読む 奥付を見ると著者の橘省吾さんの専門は「宇宙化学」となっている。\n宇宙探査機「はやぶさ」および「はやぶさ2」は工学や製造現場における組織統制の実例としてよく挙がる。 たしかに最初の「はやぶさ」は，どちらかというと宇宙規模の「とってこい」もしくは「はじめてのおつかい」といった側面が強い1。 工学実証でもあるわけだ。 だから満身創痍で帰ってきた姿を見て（私も含めて）みんな感動したんだろうし，映画にもなったんだろうけど。\nでも「はやぶさ2」は「はやぶさ」の成功を受け，科学的意義を第一として立ち上がったミッションである。 なれば「はやぶさ2」が持ち帰った「石」こそが主役と言える。 というわけでタイトルの『「はやぶさ2」は何を持ち帰ったのか』になるわけだ。\n最近の学校教育のカリキュラムは知らないが，たぶん高校生レベルの科学（化学）知識があれば楽しく読める。 縦書きの本で「モル（mol）」なんて単位が出てくるの久々に見たよ（笑）\nでも，化学の知識に疎くても（多分）大丈夫。 文章中の用語については平易かつ簡潔な解説があるし，なにより原初太陽系の姿を紐解く謎解きのような構成になっていて，ついつい読んでしまった。 この辺は著者の方の文章が上手いんだろう。\n頁数も本文は134頁ほどだし，軽い読み物として読める。 これを題材にオンラインで読書会とかしたら面白いかもねぇ。\n読んでいて思ったが，人生はスタートの連続である。 「エルの唄」の歌詞にもあるじゃないか。 「人は皆 終わりと始まりの狭間」にいるんだよ。 ソフトウェア開発においては「ミッション」の遂行とはイテレーションを重ねることであり，その中で製品の価値を高め変化に適応していくのである。\nというわけで宇宙の「とってこい」はこれからも続くし，それによって科学的知見も深まっていくだろう。 そしていつかの未来に人類が本格的に地球の外に飛び出すとしても，こうした知見は役に立つに違いない。\nブックマーク 「はやぶさ2」は何を持ち帰ったのか - 岩波書店 20年ぶりに買った「理科年表」は「けもフレ」とコラボしていた 参考 「はやぶさ２」は何を持ち帰ったのか　リュウグウの石の声を聴く (岩波科学ライブラリー 324) 橘　省吾 (著) 岩波書店 2024-02-22 (Release 2024-02-22) 単行本（ソフトカバー） 4000297244 (ASIN), 9784000297240 (EAN), 4000297244 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「はやぶさ2」が無事に持ち帰った「リュウグウ」の石を調べて原初の太陽系を解き明かす。\nreviewed by Spiegel on 2024-02-23 (powered by PA-APIv5)\nはやぶさ―不死身の探査機と宇宙研の物語 (幻冬舎新書) 吉田 武 (著) 幻冬舎 2006-11-01 新書 4344980158 (ASIN), 9784344980150 (EAN), 4344980158 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 宇宙研（ISAS）の歴史とともに日本の宇宙開発について解説する。\nreviewed by Spiegel on 2014-09-27 (powered by PA-APIv5)\n天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいたが，やっぱり手元に置いておきたいのでエイヤで買った。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\nユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 Jonathan Rasmusson (著), 島田 浩二 (翻訳), 角谷 信太郎 (翻訳) オライリージャパン 2021-04-26 単行本（ソフトカバー） 4873119464 (ASIN), 9784873119465 (EAN), 4873119464 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元より電子版も出ている。 Google や Spotify のような「ユニコーン企業」はどのようにして「ミッション」を遂行しているのか。\nreviewed by Spiegel on 2022-05-21 (powered by PA-APIv5)\nぐだふわエブリデー 悠木碧 (メインアーティスト) Nippon Columbia Co., Ltd. 2021-04-07 (Release 2021-04-07) MP3 ダウンロード B08XQGKL6G (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 夢のぐだふわ生活！\nreviewed by Spiegel on 2021-06-24 (powered by PA-APIv5)\nエルの唄～メリナ Full ver.～ 村川梨衣 (メインアーティスト) WFRecords 2021-06-23 (Release 2021-06-23) MP3 ダウンロード B0964KPJ24 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ゲーム「アナザーエデン」の挿入歌。「アナザーエデン」の中でも好きなエピソード。\nreviewed by Spiegel on 2022-08-22 (powered by PA-APIv5)\nもちろん「はやぶさ」が持ち帰ったものは科学的知見に大きく貢献している。どういう貢献があったかは『「はやぶさ2」は何を持ち帰ったのか』に書かれている。改めて「はやぶさスゲー！」って思ったっスよ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    }
  ]
}
