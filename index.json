{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Git v2.26.2 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": " 前回の CVE-2020-5260 が直りきってなかったってことでいいのかな？",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/04/git-2_26_2-is-released/",
      "published": "2020-04-21T00:12:19+00:00",
      "update": "2020-04-21T00:15:40+00:00",
      "content": "Git v2.26.2 を含む複数のバージョンがリリースされた。\n [Announce] Git v2.26.2 and others  対象となるのは 2.17.x から 2.26.x までの各マイナーバージョン。 前回の CVE-2020-5260 が直りきってなかったってことでいいのかな？\nThese releases address the security issue CVE-2020-11008, which is similar to the recently addressed CVE-2020-5260. via Git v2.26.2 and others  CVE-2020-5260 と同様ということは深刻度も「緊急」ちうことかな。 CVE-2020-5260 については，前のリリース記事を参考にどうぞ。\nCVE-2020-11008 未稿\nアップデートは\u0026hellip; アップデートは計画的に。\n"
    },
    {
      "title": "2020-04-18 のブックマーク",
      "section": "bookmarks",
      "description": "「GitHub、チームでの利用も無料に。プライベートリポジトリ数も制限なく、チームディスカッション、ActionsによるCI/CDも可能」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/04/18-bookmarks/",
      "published": "2020-04-18T01:28:48+00:00",
      "update": "2020-04-18T01:29:14+00:00",
      "content": "リリース情報  Hugo 0.69.0 allows you to delay resource processing to after the build, the prime use case being removal of unused CSS. | Hugo LibreOffice 6.4.3 available for download - The Document Foundation Blog  セキュリティ＆プライバシー関連  Contact Tracing COVID-19 Infections via Smartphone Apps - Schneier on Security 国内高校の半数が利用するClassiの不正アクセスについてまとめてみた - piyolog Intel、2020年4月のセキュリティアドバイザリを公開 ～NUCのファームフェアなどに問題 - 窓の杜  天文関連  肉眼で見える可能性のアトラス彗星、核の崩壊が確認される | sorae 宇宙へのポータルサイト  知財関連  COVID-19 \u0026lsquo;Lockdowns\u0026rsquo; Directly Impacted Torrent Download Numbers in Several Countries * TorrentFreak 「Instagramの埋め込みは著作権侵害に当たらない」という判決が下る - GIGAZINE  Linux または Ubuntu に関する話題  Ubuntu 19.10 その165 - Snap Storeからインストール可能なアプリ5選 - kledgeb  その他  Google、SRE本の第三弾「Building Secure and Reliable Systems」を無料公開 － Publickey Status of LibreOffice for Android and iOS - The Document Foundation Blog jQueryが久しぶりにバージョンアップ、「jQuery 3.5.0」に。セキュリティフィクスによる破壊的変更あり － Publickey IBMら、不足するCOBOLプログラマーの確保を支援\u0026ndash;米失業保険申請の急増で - ZDNet Japan パンデミックから命を救う「修理する権利」 | P2Pとかその辺のお話R この困難な時期に文化を共有するということ | P2Pとかその辺のお話R KubernetesのノードとしてWebAssemblyランタイムを用いる「Krustlet」、マイクロソフトが公開 － Publickey 最近知ったこと(Amazon RDS Proxy編) - gitkadoの日記 GitHub、チームでの利用も無料に。プライベートリポジトリ数も制限なく、チームディスカッション、ActionsによるCI/CDも可能 － Publickey 「Unicode 14.0」のリリースは6カ月延期 ～新型コロナウイルスの影響がボランティアを直撃 - 窓の杜  "
    },
    {
      "title": "TeX Live 2020 で原ノ味フォントを使う",
      "section": "remark",
      "description": "TeX Live 2020 で原ノ味フォントが正式に組み込まれ日本語の既定フォントになったようだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/04/haranoaji-fonts-with-texlive-2020/",
      "published": "2020-04-17T05:34:30+00:00",
      "update": "2020-04-17T05:36:48+00:00",
      "content": "原ノ味フォントは Adobe と Google が共同開発している「源ノ」フォントからの派生フォントで， $\\mathrm{\\TeX}$/$\\mathrm{\\LaTeX}$ において日本語を扱いやすいようチューニングされているらしい。 ちなみに「源ノ」フォントと同じく SIL Open Font License 1.1 で提供されている。 ありがたや。\nTeX Live 2020 で原ノ味フォントが正式に組み込まれ日本語の既定フォントになったようだ。 ただし 2019 およびそれ以前からアップグレードした場合は\n$ kanji-config-updmap status CURRENT family for ja: ipaex (variant: \u0026lt;empty\u0026gt;) Standby family : haranoaji Standby family : ipa のように以前の設定を引き継いでいるため，原ノ味フォントを使うなら手動で設定変更する必要がある1。\n$ kanji-config-updmap-sys --jis2004 haranoaji これで設定が\n$ kanji-config-updmap status CURRENT family for ja: haranoaji (variant: -04) Standby family : haranoaji Standby family : ipa Standby family : ipaex となった。\nupLaTeX による組版 まずは $\\mathrm{up\\LaTeX}$ で組版を行い，フォントの違いを調べてみる。\n入力テキスト $\\mathrm{up\\LaTeX}$ 用に入力テキストを用意する。 こんな感じ。\n\\documentclass[uplatex,a4paper]{jsarticle} \\usepackage[deluxe]{otf} \\begin{document} {\\mcfamily\\ltseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（明朝体・細字）}\\par {\\mcfamily ☂ は夜更け過ぎに ☃ へとかわるだろう。（明朝体・中字）}\\par {\\mcfamily\\bfseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（明朝体・太字）}\\par {\\gtfamily ☂ は夜更け過ぎに ☃ へとかわるだろう。（ゴシック体・中字）}\\par {\\gtfamily\\bfseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（ゴシック体・太字）}\\par {\\gtfamily\\ebseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（ゴシック体・極太）} \\end{document} これを uplatex コマンドで処理する。\n組版結果（IPAex フォント使用） まずは IPAex フォントで組版した結果がこちら。\n upLaTeX 出力結果（IPAex フォント使用）  IPAex フォントはウェイトのバリエーションがないためこんな感じになる。\n組版結果（原ノ味フォント使用） 原ノ味フォントを使った組版結果がこちら。\n upLaTeX 出力結果（原ノ味フォント使用）  各ウェイト毎にフォントが対応しているのが分かるだろうか。 あと，絵文字の字形が違うんだけど，いいのか？\nLuaLaTeX による組版 今度は $\\mathrm{Lua\\LaTeX}$ で試してみる。\n入力テキスト \\documentclass{ltjsarticle} \\usepackage[haranoaji,deluxe]{luatexja-preset} \\usepackage{luatexja-otf} \\begin{document} {\\mcfamily\\ltseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（明朝体・細字）}\\par {\\mcfamily ☂ は夜更け過ぎに ☃ へとかわるだろう。（明朝体・中字）}\\par {\\mcfamily\\bfseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（明朝体・太字）}\\par {\\gtfamily ☂ は夜更け過ぎに ☃ へとかわるだろう。（ゴシック体・中字）}\\par {\\gtfamily\\bfseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（ゴシック体・太字）}\\par {\\gtfamily\\ebseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（ゴシック体・極太）} \\end{document} 2行目の luatexja-preset パッケージの指定で原ノ味フォントを指定してるのがお分かりだろうか2。 これを lualatex コマンドで処理する。\n組版結果（原ノ味フォント使用） 組版結果はこちら。\n LuaLaTeX 出力結果（原ノ味フォント使用）  $\\mathrm{up\\LaTeX}$ と同等の出力になっている。 よーし，うむうむ，よーし。\nブックマーク  TeX Live 2020 released | There and back again TeX 日本語環境で「源ノ」フォントを使ってみた LuaTeX-ja に関する覚え書き  参考図書  [改訂第7版]LaTeX2ε美文書作成入門 奥村 晴彦 (著), 黒木 裕介 (著) 技術評論社 2017-01-24 大型本 4774187054 (ASIN), 9784774187051 (EAN), 4774187054 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。\nreviewed by Spiegel on 2017-09-27 (powered by PA-APIv5)\n   全体設定では kanji-config-updmap-sys コマンドを，ユーザ毎の設定では kanji-config-updmap-user コマンドで使い分ける。当然ながらユーザ毎の設定のほうが優先されるのでご注意を。 \u0026#x21a9;\u0026#xfe0e;\n TeX Live 2020 の $\\mathrm{Lua\\LaTeX}$ では luatexja-preset パッケージの既定が原ノ味フォントになっているようで，フォントを指定しない場合は原ノ味フォントで組版される。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "TeX Live 2020 へのアップグレード",
      "section": "remark",
      "description": "手元の環境では973個ほど更新されたよ…",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/04/upgrade-texlive-2020/",
      "published": "2020-04-16T05:33:22+00:00",
      "update": "2020-04-16T08:00:10+00:00",
      "content": "どうやら TeX Live 2020 がリリースされたようだ。 今年は早かったな（笑）\nTeX Live 2020 is available over the Internet and (after production) on DVD. It was released on 10 April 2020, and ongoing updates are available. via TeX Live - TeX Users Group  ちうわけで，今年も TeX Live のアップグレードを行おう。 あっ，念のために言うと，今回のアップグレードは APT を使わず install-tl でインストールされていることが前提ね。\n TeX Live を Ubuntu に（APT を使わずに）導入する  前準備 まず tlmgr path add コマンドでパス設定をしている場合は\n$ sudo tlmgr path remove で設定を消しておく。\n次に 2019 の環境を 2020 へコピーする。\n$ cd /usr/local/texlive $ sudo cp -a 2019 2020 $ sudo rm 2020/tlpkg/backups/* update-tlmgr を使ってアップグレードを行う際に権限のコントロールが上手くないみたいなので 2020/ フォルダ以下のオーナーを一時的に自ユーザに書き換えておく。\n$ sudo chown -R username:username 2020 ~/.texlive2019/ ディレクトリも ~/.texlive2020/ にコピっとけばいいかな。\n$ cd ~ $ cp -a .texlive2019 .texlive2020 最後に環境変数 PATH や MANPATH 等を設定している場合はその設定を変更しておく。 たとえば /etc/profile.d/ ディレクトリに以下の内容を書いたファイル texlive-paths.sh を置いている場合\n# shellcheck shell=sh # Expand $PATH to include the directory where TeX Live applications go. texlive_path=\u0026#34;/usr/local/texlive/2019\u0026#34; texlive_bin_path=\u0026#34;${texlive_path}/bin/x86_64-linux\u0026#34; if [ -n \u0026#34;${PATH##*${texlive_bin_path}}\u0026#34; -a -n \u0026#34;${PATH##*${texlive_bin_path}:*}\u0026#34; ]; then export MANPATH=${MANPATH}:${texlive_path}/texmf-dist/doc/man export INFOPATH=${INFOPATH}:${texlive_path}/texmf-dist/doc/info export PATH=${PATH}:${texlive_bin_path} fi 2019 の部分を 2020 に置き換える。\n# shellcheck shell=sh # Expand $PATH to include the directory where TeX Live applications go. texlive_path=\u0026#34;/usr/local/texlive/2020\u0026#34; texlive_bin_path=\u0026#34;${texlive_path}/bin/x86_64-linux\u0026#34; if [ -n \u0026#34;${PATH##*${texlive_bin_path}}\u0026#34; -a -n \u0026#34;${PATH##*${texlive_bin_path}:*}\u0026#34; ]; then export MANPATH=${MANPATH}:${texlive_path}/texmf-dist/doc/man export INFOPATH=${INFOPATH}:${texlive_path}/texmf-dist/doc/info export PATH=${PATH}:${texlive_bin_path} fi 2020年版へのアップグレード ほいじゃまぁ，アップグレードしますかね。 まずは update-tlmgr による tlmgr のアップグレードから。\n$ cd /usr/local/texlive/2020 $ wget http://mirror.ctan.org/systems/texlive/tlnet/update-tlmgr-latest.sh $ sh update-tlmgr-latest.sh -- --upgrade tlmgr の動作確認をしておこう。\n$ tlmgr version tlmgr revision 54446 (2020-03-21 17:45:22 +0100) tlmgr using installation: /usr/local/texlive/2020 TeX Live (https://tug.org/texlive) version 2020 よしよし。\n次はアップグレードした tlmgr でアップデートを行う。\n$ tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet tlmgr: setting default package repository to http://mirror.ctan.org/systems/texlive/tlnet tlmgr: updating /usr/local/texlive/2020/tlpkg/texlive.tlpdb $ tlmgr update --self --all tlmgr: package repository http://ftp.yz.yamagata-u.ac.jp/pub/CTAN/systems/texlive/tlnet (verified) tlmgr: saving backups to /usr/local/texlive/2020/tlpkg/backups ... さて，お茶の時間にするか。\n\u0026hellip;手元の環境では973個ほど更新されたよ\u0026hellip;\n$\\mathrm{Lua\\TeX}$ を使う場合はフォントキャッシュのアップデートも忘れずに。\n$ luaotfload-tool -fu 最後に /usr/local/texlive/2020 ディレクトリ以下のオーナーを root に戻す。\n$ cd /usr/local/texlive $ sudo chown -R root:root 2020 更にパス設定（/usr/local/bin/ 等へシンボリック・リンクを張る）を行うなら\n$ sudo /usr/local/texlive/2020/bin/x86_64-linux/tlmgr path add とする。\n動作確認 ちょろんと動作確認しておこう。 $\\mathrm{Lua\\LaTeX}$ でね。\n$ lualatex -v This is LuaHBTeX, Version 1.12.0 (TeX Live 2020)  Execute \u0026#39;luahbtex --credits\u0026#39; for credits and version details. There is NO warranty. Redistribution of this software is covered by the terms of the GNU General Public License, version 2 or (at your option) any later version. For more information about these matters, see the file named COPYING and the LuaTeX source. LuaTeX is Copyright 2020 Taco Hoekwater and the LuaTeX Team. うお！ $\\mathrm{LuaHB\\TeX}$ ベースになってる。 どうやら $\\mathrm{Lua\\LaTeX}$ では $\\mathrm{LuaHB\\TeX}$ ベースになる模様。 $\\mathrm{Lua\\TeX}$ 自体はあるようで\n$ luatex -v This is LuaTeX, Version 1.12.0 (TeX Live 2020)  Execute \u0026#39;luatex --credits\u0026#39; for credits and version details. There is NO warranty. Redistribution of this software is covered by the terms of the GNU General Public License, version 2 or (at your option) any later version. For more information about these matters, see the file named COPYING and the LuaTeX source. LuaTeX is Copyright 2020 Taco Hoekwater and the LuaTeX Team. となる。\n以下のタイプセットも試してみるか。\n LuaLaTeX でコードを書いてみる  結果はこんな感じ。\n よーし，うむうむ，よーし。\nブックマーク  TeX Live 2020 released | There and back again trueroad/HaranoAjiFonts: 原ノ味フォント : TeX Live 2020 に組み込まれたそうな  参考図書  [改訂第7版]LaTeX2ε美文書作成入門 奥村 晴彦 (著), 黒木 裕介 (著) 技術評論社 2017-01-24 大型本 4774187054 (ASIN), 9784774187051 (EAN), 4774187054 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。\nreviewed by Spiegel on 2017-09-27 (powered by PA-APIv5)\n "
    },
    {
      "title": "OpenJDK 14.0.1 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "深刻度が高いセキュリティ・アップデートも含まれているので必ず対応すること。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/04/openjdk-14_0_1-is-released/",
      "published": "2020-04-16T03:21:08+00:00",
      "update": "2020-04-16T03:50:45+00:00",
      "content": "予定通り Java 14 および LTS である Java 11 のマイナー・バージョンアップが行われた。 深刻度が高い脆弱性も含まれているので必ず対応すること。\n OpenJDK Vulnerability Advisory: 2020/04/14  以下に脆弱性の一覧を挙げておく。\n  CVE ID Component CVSSv3\nScore Affects ...   7 8 11 13 14   CVE-2020-2803 core-libs/java.nio 8.3 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2805 core-libs/java.io 8.3 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2816 security-libs/javax.net.ssl 7.5 \u0026nbsp; \u0026nbsp; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2781 security-libs/java.security 5.3 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2830 core-libs/java.util 5.3 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2767 security-libs/javax.net.ssl 4.8 \u0026nbsp; \u0026nbsp; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2800 core-libs/java.net 4.8 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2778 security-libs/javax.net.ssl 3.7 \u0026nbsp; \u0026nbsp; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2754 core-libs/javax.script 3.7 \u0026nbsp; \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2755 core-libs/javax.script 3.7 \u0026nbsp; \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2773 security-libs/javax.xml.crypto 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2756 core-libs/java.io:serialization 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2757 core-libs/java.io:serialization 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-18197 javafx/web 8.1 \u0026nbsp; \u0026#8226; \u0026#8226; \u0026nbsp; \u0026#8226;    via OpenJDK Vulnerability Advisory: 2020/04/14  Java 10 以下 および 12, 13 は基本的にサポート期間が切れてる。 Java 11 または 14 へアップグレードするか Amazon Corretto のようなディストリビューションを利用すること。\nOpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk14.0.1/664493ef4a6946b186ff29eb326336a2/7/GPL/openjdk-14.0.1_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-14.0.1_linux-x64_bin.tar.gz $ sudo ln -s jdk-14.0.1 java $ java -version # すでに PATH が通っている場合 openjdk 14.0.1 2020-04-14 OpenJDK Runtime Environment (build 14.0.1+7) OpenJDK 64-Bit Server VM (build 14.0.1+7, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\n Factory Method Pattern  うむうむ。 ちゃんと動くな。\nブックマーク  Oracle Critical Patch Update Advisory - April 2020  Oracle Java の脆弱性対策について(CVE-2020-2803等)：IPA 独立行政法人 情報処理推進機構 2020年4月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起   Java 環境のリリースとサポートに関する覚え書き  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n   2020-04-05 に PlantUML V1.2020.6 がリリースされている。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ハロワとコロナ",
      "section": "remark",
      "description": "この時期にお金の心配をしないで引きこもれるとか。 運がいいのか悪いのか（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/04/hello-unemployed/",
      "published": "2020-04-15T09:46:10+00:00",
      "update": "2020-04-15T10:44:06+00:00",
      "content": "さて，「天下無敵のプー太郎」としては何はともあれ年金\u0026amp;健康保険の切り替えと失業認定を受けるための諸々の手続きをしないといけないわけで，お役所巡りしましたよ。 つっかれた！\n窓口がどこも透明ビニールシートで仕切られてて，まずそこで笑っちゃったよ。 いや，笑いごっちゃないけどね。 ホンマ，このご時世に対面で働かされるお役所の職員さんには頭が下がるよ。\nちなみに待ち合いのシートも間隔があけられていて，詰め詰めにならないように調整されていた。\n今回の退職は所謂「会社都合」なのでタイムラグなしで給付が受けられる。 しかも件の感染症流行のせいで対象者への説明会も失くなったので，何にもしないで1回目の給付認定を受けられることになってしまった（通常は説明会に参加することで1回目の求職活動実績と見なされる）。\n他にも個人的な都合で色々と優遇措置を受けられることになった。 この時期にお金の心配をしないで引きこもれるとか。 運がいいのか悪いのか。 人間万事塞翁が丙午（違う）\nレッツ！ 引きこもり\nそうそう。 今回の一連の手続きでハンコは一切使いませんでした。 ハンコなんて飾りですよ，偉い人には分からんのです（笑） マイナンバーカードがあれば顔写真の提出も不要（そのためのマイナンバーカードだからね）。\nあと（昨年末のインフルエンザ流行時に買い置きしておいた）マスクの在庫が尽きそう。 まぁ，マスクこそ「健康劇場」だけどね。 マスクより手洗い励行。 タブレット共有で接触感染とか笑えん。\n"
    },
    {
      "title": "Git v2.26.1 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "対象となるのは 2.17.x から 2.26.x までの各マイナーバージョン (CVE-2020-5260)",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/04/git-2_26_1-is-released/",
      "published": "2020-04-15T01:18:03+00:00",
      "update": "2020-04-15T02:12:21+00:00",
      "content": "Git v2.26.1 を含む複数のバージョンがリリースされた。\n [Announce] Git v2.26.1 and others  対象となるのは 2.17.x から 2.26.x までの各マイナーバージョン。 今回はセキュリティ・アップデートを含むため必ず対応すること。\nThese releases address the security issue CVE-2020-5260, which allowed a crafted URL to trick a Git client to send credential information for a wrong host to the attacker\u0026rsquo;s site. via Git v2.26.1 and others  Ubuntu の APT の標準リポジトリは最新版を提供してないが， USN-4329-1 によると各バージョンの git でアップデートを行っているようだ。 なお PPA 版リポジトリでは既に v2.26.1 がリリースされている。\nCVE-2020-5260 Affected versions of Git have a vulnerability whereby Git can be tricked into sending private credentials to a host controlled by an attacker. Git uses external \u0026ldquo;credential helper\u0026rdquo; programs to store and retrieve passwords or other credentials from secure storage provided by the operating system. Specially-crafted URLs that contain an encoded newline can inject unintended values into the credential helper protocol stream, causing the credential helper to retrieve the password for one server (e.g., good.example.com) for an HTTP request being made to another server (e.g., evil.example.com), resulting in credentials for the former being sent to the latter. There are no restrictions on the relationship between the two, meaning that an attacker can craft a URL that will present stored credentials for any host to a host of their choosing. The vulnerability can be triggered by feeding a malicious URL to git clone. However, the affected URLs look rather suspicious; the likely vector would be through systems which automatically clone URLs not visible to the user, such as Git submodules, or package systems built around Git. via CVE-2020-5260  説明がなげーよ orz\n要するに an attacker can craft a URL that will present stored credentials for any host to a host of their choosing ってところが重要。\n CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N (GitHub, Inc.) 深刻度: 緊急 (9.3)     基本評価基準 評価値     攻撃元区分 ネットワーク   攻撃条件の複雑さ 低   必要な特権レベル 不要   ユーザ関与レベル 要   スコープ 変更あり   機密性への影響 高   完全性への影響 高   可用性への影響 なし    Git Credential Helper ちなみに credential helper のひとつ GNOME/libsecret だが， Ubuntu 19.10 で用意されている APT 最新版は\n$ sudo apt show libsecret-1-dev Package: libsecret-1-dev Version: 0.18.8-2 Priority: optional Section: libdevel Source: libsecret Origin: Ubuntu ... だった。 ちょっと古いっぽい（？）気もするが\u0026hellip; Linux 系独特の意味不明な backport patch はどうにかならないのだろうか。\nまぁ，いいや。 以前も書いたがインストール手順は以下の通り（/usr/share/... 以下を汚したくなかったので）。\n$ sudo apt install libsecret-1-dev $ mkdir ~/work $ cp -r /usr/share/doc/git/contrib/credential/libsecret ~/work $ cd ~/work/libsecret $ make gcc -g -O2 -Wall -pthread -I/usr/include/libsecret-1 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-libsecret.o -c git-credential-libsecret.c gcc -o git-credential-libsecret git-credential-libsecret.o -lsecret-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0 これでビルドした git-credential-libsecret を $PATH の通ったディレクトリに放り込んでおけばよい。 確認は以下の通り。\n$ git help -a | grep credential- credential-cache Helper to temporarily store passwords in memory credential-store Helper to store credentials on disk credential-libsecret よーし，うむうむ，よーし。\nGit 設定は以下の通り。\n$ git config --global credential.helper libsecret アップデートは\u0026hellip; アップデートは計画的に。\nブックマーク  malicious URLs may cause Git to present stored credentials to the wrong server · Advisory · git/git · GitHub PPA から Git をインストールする  "
    },
    {
      "title": "2020-04-12 のブックマーク",
      "section": "bookmarks",
      "description": "「MathJax v3.0.5 now available」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/04/12-bookmarks/",
      "published": "2020-04-12T00:28:03+00:00",
      "update": "2020-04-12T00:30:26+00:00",
      "content": "リリース情報  Release Release 2.5.4 · keepassxreboot/keepassxc · GitHub Release v0.69.0 · gohugoio/hugo · GitHub MathJax v3.0.5 now available | MathJax  バベルのインターネット  Cloudflareが無料の新DNSサービス「1.1.1.1 for Families」発表。DNSのレベルでアダルトコンテンツやマルウェアをブロック － Publickey 中国提案\u0026quot;New IP\u0026quot;をIETFが蹴る、インターネット分断を懸念〜インターネットと人権｜星 暁雄｜note  セキュリティ＆プライバシー関連  マイクロソフト、「Emotet」感染による顧客ネットワークの停止事例を公開 - ZDNet Japan 「Firefox」のキャッシュからTwitterデータが漏洩 ～MozillaはTwitterの非標準実装を批難 - 窓の杜 危機的状況にこそ「政府への批判」が必要である | P2Pとかその辺のお話R How to Protect Privacy When Aggregating Location Data to Fight COVID-19 | Electronic Frontier Foundation Twitterアカウントの名前が意図せずメールアドレスになる理由について調べてみた - piyolog Google Cloudの主要サービスが10時間ものあいだ障害発生。原因は分散アクセスコントロールへの大量の変更要求が引き起こしたメモリ不足 － Publickey Attack matrix for Kubernetes  Kubernetes Security - Schneier on Security    天文関連  2020年4月7日ニュース「持ち運べる光格子時計を開発、性能初確認 スカイツリーで高低差計測 東京大学など」 | SciencePortal  知財関連  Piracy and File-Sharing Traffic Surges Amidst Covid-19 Crisis * TorrentFreak  その他  We\u0026rsquo;re in for 2 months - foobuzz  ブログ: 私たちには2ヶ月必要です   Mathematical proof that rocked number theory will be published  ブログ: 数論を揺り動かす数学的証明が出版へ   Mysterious Heart Damage, Not Just Lung Troubles, Befalling COVID-19 Patients | Kaiser Health News  ブログ: COVID-19患者に降りかかる不思議な心臓の損傷   プログラミングなしで業務自動化を実現するTonkeanが約26億円調達 | TechCrunch Japan ラズパイ4にはやっぱりメタル調ケースが発熱低くて安心  "
    },
    {
      "title": "それは Duck Typing ぢゃない（らしい）",
      "section": "remark",
      "description": "今回は Go と Rust との比較をちょっとポエミーに語ってみる（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/04/subtyping/",
      "published": "2020-04-10T10:37:23+00:00",
      "update": "2020-04-10T10:55:30+00:00",
      "content": "今回は Go と Rust との比較をちょっとポエミーに語ってみる（笑）\nそもそも duck typing は Ruby のような動的型付け言語における型推論の手法（のひとつ）である。 その由来は duck test から来ていて\nIf it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck. via Duck test - Wikipedia  というフレーズに集約されている。\n静的型付け言語である Go や Rust における抽象型を使った型推論を duck typing と呼ぶのは厳密には正しくない，らしい。 Go や Rust における interface や trait といった抽象型を用いた型推論は「部分型付け（subtyping）」と呼ばれる。 ただし Go と Rust では全く異なる戦略をとる。\nCat コマンドもどき（Go 版） ここで簡単なプログラムを書いてみよう。 UNIX 系のプラットフォームではおなじみの cat コマンドの「もどき」を書いてみる。\n本来の cat コマンドは複数の入力を結合（concatenate）して出力するものだが，真面目な実装をし始めるとキリがないので，今回は以下の2つの機能のみ実装する。\n コマンドライン引数で指定したファイルを1つのみ標準出力に出力する ファイルの指定がない場合は標準入力をそのまま標準出力に出力する  ぶっちゃけ，ただの「土管」である（笑） これを Go で書いたのが以下のコードだ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; ) func concatenate(w io.Writer, r io.Reader) error { _, err := io.Copy(w, r) return err } func main() { if len(os.Args) \u0026gt; 1 { file, err := os.Open(os.Args[1]) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer file.Close() if err := concatenate(os.Stdout, file); err != nil { fmt.Fprintln(os.Stderr, err) return } } else { if err := concatenate(os.Stdout, os.Stdin); err != nil { fmt.Fprintln(os.Stderr, err) return } } } concatenate() 関数がメインのロジックで，引数の io.Writer, io.Reader および返り値の error は全て interface 型である。 まぁ concatenate() 関数を括り出す必然性は全くないのだが，後述の Rust のコードと比較しやすいよう敢えて分けている。\nconcatenate() 関数の呼び出しで，最初の\nif err := concatenate(os.Stdout, file); err != nil { fmt.Fprintln(os.Stderr, err) return } と次の\nif err := concatenate(os.Stdout, os.Stdin); err != nil { fmt.Fprintln(os.Stderr, err) return } は（当然ながら）同じ関数で，引数や返り値にどのようなインスタンスが入るかは実行時に決まる。 コンパイル時に決まるのは注入するインスタンスの構造が受け入れる interface 型の構造と合致していることだけだ（合致しなければコンパイル・エラー）。\nすンごい簡単に書かれているけど，これは「依存の注入（depencency injection）」の典型例であり「Go では duck typing ができる」とか言われる所以である。\nでは，これをリファレンスとして，今度は Rust を使って書いてみる。\nCat コマンドもどき（Rust 版，総称型編） とりあえず，えいやっで書いたコードがこちら。\nfn concatenate\u0026lt;W,R\u0026gt;(w: \u0026amp;mutW,r: \u0026amp;mutR)-\u0026gt; Result\u0026lt;(),std::io::Error\u0026gt;whereW: std::io::Write,R: std::io::Read,{letmutbuf=Vec::new();r.read_to_end(\u0026amp;mutbuf)?;w.write_all(\u0026amp;buf)?;Ok(())}fn main()-\u0026gt; Result\u0026lt;(),std::io::Error\u0026gt;{letargs=std::env::args();ifargs.len()\u0026gt;1{forsinargs.skip(1).take(1){concatenate(\u0026amp;mutstd::io::stdout(),\u0026amp;mutstd::io::BufReader::new(std::fs::File::open(s)?),)?;}}else{concatenate(\u0026amp;mutstd::io::stdout(),\u0026amp;mutstd::io::stdin())?;}Ok(())}std::io::Write と std::io::Read が trait 型なのだが，各 trait は総称型 W, R の制約条件として書かれているだけで実行時に機能するわけではない。 つまり最初の\nconcatenate(\u0026amp;mutstd::io::stdout(),\u0026amp;mutstd::io::BufReader::new(std::fs::File::open(s)?),)?;と次の\nconcatenate(\u0026amp;mutstd::io::stdout(),\u0026amp;mutstd::io::stdin())?;はコンパイル時に別の関数として展開される1。 これを（多態化（polymorphization）に対する）単態化（monomorphization）と呼ぶ。\nじゃあ Rust では依存の注入は書けないのかというと，勿論そんなことはない。\nCat コマンドもどき（Rust 版，依存注入編） 依存の注入ができるように書き換えたバージョンがこれ。\nfn concatenate(w: \u0026amp;mutBox\u0026lt;dynstd::io::Write\u0026gt;,r: \u0026amp;mutBox\u0026lt;dynstd::io::Read\u0026gt;,)-\u0026gt; Result\u0026lt;(),Box\u0026lt;dynstd::error::Error\u0026gt;\u0026gt;{letmutbuf=Vec::new();r.read_to_end(\u0026amp;mutbuf)?;w.write_all(\u0026amp;buf)?;Ok(())}fn main()-\u0026gt; Result\u0026lt;(),Box\u0026lt;dynstd::error::Error\u0026gt;\u0026gt;{letargs=std::env::args();letmutr: Box\u0026lt;dynstd::io::Read\u0026gt;=ifargs.len()\u0026gt;1{letfnam=matchargs.skip(1).next(){Some(s)=\u0026gt;s,_=\u0026gt;\u0026#34;\u0026#34;.to_string(),};Box::new(std::io::BufReader::new(std::fs::File::open(fnam)?))}else{Box::new(std::io::stdin())};letmutw: Box\u0026lt;dynstd::io::Write\u0026gt;=Box::new(std::io::stdout());concatenate(\u0026amp;mutw,\u0026amp;mutr)?;Ok(())}concatenate() 関数が同一のものであることを強調するために呼び出しをひとつに纏めているので少しまだるこしい書き方になっているが，ご容赦。 このように Rust では trait 型を Box\u0026lt;dyn Trait\u0026gt; の形式に落とし込むことで実行時の動的ディスパッチを可能にしている。\nAccept Interfaces, Return Structs Go の設計指針で有名な言葉に accept interfaces, return structs というのがある。 私自身は必ずしもこれに賛同しないが（システム内部のコンテキスト境界は interface にすべき），この指針は Go の特徴をよく表している。\nたとえば io.Reader と os.File は同じ Read() 関数を持つという点で関連しているけど，両者の間に明示された記述は存在しない。 それでも，その関係を以って io.Reader に os.File インスタンスを注入可能である。 Go プログラマは息をするように依存を注入するのだ。\nこのような関係を構造型の部分型付け（structural subtyping）と呼ぶそうな。\n構造型と公称型 Go の interface 型が構造型の部分型付けであるのに対し Rust の trait 型は公称型の部分型付け（nominal subtyping）に分類されるだろう。 たとえば std::io::Read と std::fs::File との間にはコード上で明示された関係がある。 その「明示された関係」がなければ，たとえ同じ構造を持っていたとしても，両者の間に関係があるとは見なされないのだ。\nRust の言語仕様がこのような制約を構成しているのには，勿論ちゃんとした理由がある。\nGo においてはメモリ管理や並列処理2 をランタイム・モジュールに「丸投げ」している。 なので，プログラマは富豪的な記述に専念できるが，バイナリは肥大化してしまうしコンパイル時の最適化にも限度がある3。\nRust はリソース管理等についてプログラマ側でかなり面倒を見なければならないが（それでも C/C++ などに比べれば全然楽だし安全），言い換えればコード上でのコントロールがし易くコンパイル時の最適化についてもかなり期待できる。 上述の cat コマンドもどきでも，コンパイル時の単態化を避けるコードをわざわざ書く理由はないだろう。\nこれはプログラム設計時の重要なトレードオフとなる。 まぁ「Go か Rust か」みたいな究極の選択をする状況はないと思うが，複数のプログラミング言語からどれかを選ぶ際にはこういったことも考慮していくべきだ（選ぶ余裕もない事案のほうが多いだろうけどw）。\n前にも書いたが，「それができる」ことと「そのように作られている」ことには天と地ほどの違いがある。 どうせ「書く」なら無茶せず楽しく書きたいものである。\nブックマーク   Rustでファイルの入出力 - Qiita\n  RustのファイルI/OにはBufReader, BufWriterを使いましょう、という話 - Qiita\n  Go言語のInterfaceの考え方、Accept interfaces,return structs - Qiita\n  継承できないなら注入すればいいじゃない！ : Go のイベント用に作ったスライド\n  参考図書  プログラミング言語Rust 公式ガイド Steve Klabnik (著), Carol Nichols (著), 尾崎 亮太 (翻訳) KADOKAWA 2019-06-28 (Release 2019-06-28) 単行本 4048930702 (ASIN), 9784048930703 (EAN), 4048930702 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  公式ドキュメントの日本語版。索引がちゃんとしているので，紙の本を買っておいて手元に置いておくのが吉。\nreviewed by Spiegel on 2020-02-24 (powered by PA-APIv5)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n  Go言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Eブック版もある。感想はこちら。 Go 言語で並行処理を書くならこの本は必読書になるだろう。\nreviewed by Spiegel on 2020-01-13 (powered by PA-APIv5)\n   余談だが Rust では「ファイルを閉じる」操作は変数の生存期間満了時に暗黙的に行われるようだ。明示的に閉じるには drop 関数を使う。 \u0026#x21a9;\u0026#xfe0e;\n Go における並行処理と並列処理の違いについては『Go言語による並行処理』を読むことを強くおすすめする。 \u0026#x21a9;\u0026#xfe0e;\n 近年，特に組込み用途で注目されている TinyGo は LLVM 上で動作することを前提としていて，本家 Go に比べてかなり小さい実行バイナリを吐けるらしい。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "RSA-250 解読完了！",
      "section": "remark",
      "description": "実際には何万ものマシンを使って数ヶ月で解読したらしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/04/rsa-250-factored/",
      "published": "2020-04-09T01:45:03+00:00",
      "update": "2020-04-09T02:09:57+00:00",
      "content": "2月末の話で申し訳ないが（Bruce Schneier 先生の記事でさっき知ったのだ）， RSA-250 鍵が因数分解され解読完了したらしい。\n [Cado-nfs-discuss] Factorization of RSA-250 RSA-250 Factored - Schneier on Security  The total computation time was roughly 2700 core-years, using Intel Xeon Gold 6130 CPUs as a reference (2.1GHz):\nRSA-250 sieving: 2450 physical core-years RSA-250 matrix: 250 physical core-years  via Factorization of RSA-250  実際には何万ものマシンを使って数ヶ月で解読したらしい。\nThe computation involved tens of thousands of machines worldwide, and was completed in a few months. via RSA-250 Factored  RSA-240 が解けたのって，つい昨年末なんだけどねぇ（笑） RSA は近い将来，量子コンピュータの一般化を待たずにお払い箱になるんだろうね。\n参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    }
  ]
}
