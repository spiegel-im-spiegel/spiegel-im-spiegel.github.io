{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "円周率の日の皆既月食",
      "section": "remark",
      "description": "正直「ヤラレタ」と思ったね。こんな見事な駄洒落に気が付かないとか orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/total-lunar-eclipse-on-pi-day/",
      "published": "2025-03-14T11:25:21+00:00",
      "update": "2025-03-14T11:25:45+00:00",
      "content": "今日 2025-03-14 は望（満月）で皆既月食があった。 関東以東なら月の出直後に終わりかけの部分日食が見れたそうだが，残念ながら西日本ではギリギリ半影食が見れるかどうかのタイミングだった。 まぁ，半影食を肉眼で確認するのはほぼ無理だと思うけど。\nありがたいことに YouTube のすばる望遠鏡チャネルで皆既月食ライブをやっておられた。 アーカイブも見れる。\n皆既月食ライブ / Total Lunar Eclipse Live from Maunakea, Hawai‘i - YouTube ありがたや 🙇\nFlickr にもたくさんの写真が上がっている。 とりあえずひとつ挙げておく。\nvia “Full Blood Worm Moon” by Thomas Cizauskas (CC-BY-NC-ND) もうひとつ。 今日は3月14日。 ということは円周率の日で数学の日でアインシュタインの誕生日なのよ。\nPi Day Activities for the Classroom – Collection | NASA JPL Education で，今日の APOD (Astronomy Picture of the Day) がこれ。\nAPOD: 2025 March 14 - Moon Pi and Mountain Shadow 写真だけ見てもピンとこなかったが，説明文に\nWhat phase of the Moon is 3.14 radians from the Sun? The Full Moon, of course. Even though the Moon might look full for several days, the Moon is truly at its full phase when it is Pi radians (aka 180 degrees) from the Sun in ecliptic longitude. That\u0026rsquo;s opposite the Sun in planet Earth\u0026rsquo;s sky. [\u0026hellip;] March 14 2025, the moon is Pi radians from the Sun at exactly 06:55 UTC. That\u0026rsquo;s about three minutes before the midpoint of the March Full Moon\u0026rsquo;s total lunar eclipse. via APOD: 2025 March 14 - Moon Pi and Mountain Shadow とか書いてあって，正直「ヤラレタ」と思ったね。 こんな見事な駄洒落に気が付かないとか orz\nvia 日食・月食時の「太陽-月-地球」関係図。 黒色の範囲が日食・月食を観察できる範囲である。 そう。 皆既月食は地球から見て太陽と月が $\\pi\\,\\mathrm{rad.}$ の位置関係になるのよ。 偶然とはいえ，なんという見事な駄洒落（大事なことなので2回言いました）。\nちなみに今年はもう1回，9月8日（月）早朝に皆既月食があり，これは日本全国で見られる。 早朝というか日曜深夜というべきか。 1時28分頃から食が始まり2時30分から皆既食になる。 皆既食は3時53分頃まで続き，食が終わるのが4時56分頃。 しかもこのときは皆既食中に6等〜7等の星の星食（月没帯食）が3つくらい見れるらしい。 望遠鏡を持ってる方は必見ですな。\n晴れたらいいねぇ。\nブックマーク π は間違ってる？ 参考図書 天文年鑑 2024年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2023-11-24 (Release 2023-11-24) 単行本 4416623410 (ASIN), 9784416623411 (EAN), 4416623410 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 天文ファン必携。2024年版。これが届くと年末って感じ。\nreviewed by Spiegel on 2023-11-25 (powered by PA-APIv5)\n天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいたが，やっぱり手元に置いておきたいのでエイヤで買った。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\n数学ガールの秘密ノート／丸い三角関数 結城 浩 (著) SBクリエイティブ 2014-04-23 (Release 2015-04-18) Kindle版 B00W6NCLJM (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 丸と三角の楽しい関係。頑張れば小学生高学年でも大丈夫。\nreviewed by Spiegel on 2014-11-30 (powered by PA-APIv5)\n数学ガール 結城 浩 (著) SBクリエイティブ 2007-06-26 (Release 2014-03-12) Kindle版 B00EYXMA9I (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ミルカさんとの衝撃の encounter。数学ガールがワルツを踊る。\nreviewed by Spiegel on 2014-02-14 (powered by PA-APIv5)\n"
    },
    {
      "title": "React のお勉強",
      "section": "remark",
      "description": "もう本当に基礎の基礎。 JSX から始めよう",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/a-study-in-react/",
      "published": "2025-03-14T09:44:25+00:00",
      "update": "2025-03-14T09:44:29+00:00",
      "content": "React について勉強中。\nいや，今までにも React / TypeScript なプロジェクトに参加したことはあるんだけど，ある程度お膳立てされた状態での join だったので，正直 React や TypeScript を知らなくても（やっつけの知識で）コードは書けるしテストも出来るわけよ。 知らない言語でもコードなんて見れば分かるし。 でも，それってプロジェクトが終われば忘れるぢゃん，身に付いてないんだから。\nというわけで，ちょうど新しいプロジェクトのための事前学習を始めたタイミングということもあり，勤務先の有識者に最初から教えてもらえることになった。 ただし，その前に公式サイトの学習ページ（日本語があるのか）は読んでおいてね，と言われ，スキマ時間で勉強を始めたのだが\u0026hellip; JSX から始めるのか。 よしやってみよう。\nJSX で簡単なコードを書くだけなら特別な開発環境も要らないしフレームワークも要らないらしい。 準備として HTML の \u0026lt;head\u0026gt; 要素に以下の記述を加えればよい。\n\u0026lt;script src=\u0026#34;https://unpkg.com/@babel/standalone/babel.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script async src=\u0026#34;https://ga.jspm.io/npm:es-module-shims@1.7.0/dist/es-module-shims.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;importmap\u0026#34;\u0026gt; { \u0026#34;imports\u0026#34;: { \u0026#34;react\u0026#34;: \u0026#34;https://esm.sh/react?dev\u0026#34;, \u0026#34;react-dom/client\u0026#34;: \u0026#34;https://esm.sh/react-dom/client?dev\u0026#34; } } \u0026lt;/script\u0026gt; @babel/standalone は JSX から JavaScript (React.createElement の式) への変換を行うものらしい。 コードはこんな感じに記述する。\n\u0026lt;div id=\u0026#34;root1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/babel\u0026#34; data-type=\u0026#34;module\u0026#34;\u0026gt; import React from \u0026#39;react\u0026#39;; import { createRoot } from \u0026#39;react-dom/client\u0026#39;; const MyApp = function() { return \u0026lt;strong\u0026gt;Hello, world!\u0026lt;/strong\u0026gt;; } const container = document.getElementById(\u0026#39;root1\u0026#39;); const root = createRoot(container); root.render(\u0026lt;MyApp /\u0026gt;); \u0026lt;/script\u0026gt; 強調している部分が JSX の特徴的な部分で HTML タグ風の記述（JSX 要素）が使えるため Web デザイナーでもとっつきやすいというのが売りなんだそうな。 ユーザが定義した MyApp() 関数の名前をタグのように使えるのがポイント。 タグは XML と同じ仕様なので void タグについては \u0026lt;MyApp /\u0026gt; のように明示する必要がある。\nこのコードを含む HTML ファイルをブラウザで表示すると以下のような表示になる。\nHello, World by React/JSX うんうん。 ちゃんと動いてるな。\nHTML タグ記法を JSX の記法に変換する “HTML to JSX” というツールもある。\nチュートリアルのコードをローカルで試したい場合。\nまずは node.js のインストールを済ませておくこと。 私は NodeSource から v22 LTS 版を入れている。 最近は Bun の話もよく聞くようになった。\nチュートリアル：三目並べ – Reactより 右上にある Fork を押下すると CodeSandbox のページが開く。\nvia Preview - nodebox - CodeSandbox 左上にある □ を押下して表示されるメニューから “Download Sandbox” を選択してコードをまるごと（zip 形式）ダウンロードし，ローカルの適当なディレクトリに展開する。\nnpm install を実行して依存ライブラリをインストールしようとしたのだがエラーになって怒られたので --legacy-peer-deps オプションを付けてやり直す。 今度はうまく行ったが deprecated の嵐（笑）\nいよいよ npm start でローカルサーバを起動しようとしたのだが，またしてもエラーで起動せず orz どうも npm audit fix --force で依存関係を更新しないといけないらしい。 しかもこれを実行するたびに状況が変わるってどうなってるの？？？\nホンマ，この辺のテキトーさが node.js 開発系が嫌な理由なんだよな。 しかも依存が深すぎて？ 何をどうしていいのか分からない。 みんなこれちゃんとメンテ出来てるの？\nぶちぶちと愚痴を垂れつつ npm start を再実行。 とりあえず動いたかな。\nvia npm start 三目並べ 実行結果より 動いてるっぽいな。\nさて，お勉強を続けますか。\nブックマーク @babel/standalone · Babel\nbabel/standaloneの使い方(文字列に格納したjavascriptソースをブラウザ内でトランスパイルする) #React - Qiita es-module-shims - npm\n新・日本一わかりやすいReact入門【基礎編】 - YouTube\nHugo で React + TypeScript を利用してサクッとウェブサイトに RSS リーダーを追加する\nBunでReact関連の開発環境を構築する\nReactをBunで使用する方法 - Web開発における知見共有系ページ\npackage.jsonで時々見かけるbrowserslistとは\n参考文献 TypeScriptとReact/Next.jsでつくる実践Webアプリケーション開発 手島 拓也 (著), 吉田 健人 (著), 高林 佳稀 (著) 技術評論社 2022-07-25 (Release 2022-07-25) 単行本（ソフトカバー） 4297129167 (ASIN), 9784297129163 (EAN), 4297129167 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 仕事用に購入。版元で電子版が買える。必要なところだけつまみ食い的に参照している。\nreviewed by Spiegel on 2023-11-26 (powered by PA-APIv5)\n"
    },
    {
      "title": "OpenPGP で利用可能なアルゴリズム（RFC 9580 対応版）",
      "section": "openpgp",
      "description": "2024年7月に RFC 9580 が発行された。この記事では最新の OpenPGP で利用可能なアルゴリズムを列挙していく。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/openpgp/algorithms-for-openpgp-rfc9580/",
      "published": "2025-03-12T08:04:54+00:00",
      "update": "2025-03-12T08:23:07+00:00",
      "content": "OpenPGP の標準化について2024年7月に RFC 9580 が発行された。 この記事では拙作 gpgpdump の改定作業の目的のため OpenPGP で利用可能なアルゴリズムを列挙していく。\nなお RFC 9580 の発行に伴い，以前の RFC 4880, RFC 5581, RFC 6637 は obsolete になった。 このブログでも前の「OpenPGP で利用可能なアルゴリズム（RFC 4880bis 対応版）」は obsolete とする。 また各アルゴリズムの横に \u0026#x2705; が付いているものは RFC 9580 で新たに追加されたものである。\nパケットバージョン アルゴリズムとは直接関係ないが OpenPGP では暗号文や鍵や署名といったデータのかたまりを「パケット」と呼んでいる。 パケットは PGP/OpenPGP によって幾つかのバージョンがある。\n現在有効なパケットバージョンの組み合わせは以下の通り。\nVersion of Encrypted Data Payload Version of Preceding Symmetric Key ESK (If Any) Version of Preceding Public Key ESK (If Any) Generate? SED - v2 PKESK (RFC 2440) No SED v4 SKESK v3 PKESK No v1 SEIPD v4 SKESK v3 PKESK Yes v2 SEIPD ✅ v4 SKESK v3 PKESK Yes OpenPGP 暗号化メッセージのバージョン v2 SEIPD は RFC 9580 で加わったもので認証付き暗号（AEAD）をサポートしている。\nRFC 9580 では “Generate?” が Yes のパケット組み合わせのみ生成が許容される（MUST）。 それ以外は後方互換性のために残される。\nSigning Key Version Signature Packet Version One-Pass Signature Packet Version Generate? v3 v3 v3 No v4 v3 v3 No v4 v4 v3 Yes v6 ✅ v6 ✅ v6 ✅ Yes OpenPGP 鍵および署名のバージョン ここにない v1 や v2 は最初期の PGP (RFC 1991) の頃のもの。 さらに，ここにない v5 は RFC 4880bis の議論の頃にあったもので RFC 9580 ではなくなってしまったようだ。 おそらく GnuPG には残ってると思うけど\u0026hellip; 困ったね（笑）\nv3 は RFC 2440 で， v4 は RFC 4880 で登場したもの。 さらに v6 は RFC 9580 で新たに加わったものである。\nRFC 9580 では “Generate?” が Yes のパケット組み合わせのみ生成が許容される（MUST）。 それ以外は後方互換性のために残される。\n共通鍵暗号アルゴリズム（Symmetric-Key Algorithms） OpenPGP で利用可能な共通鍵暗号は以下の通り。 RFC 9580 で新たに追加されたアルゴリズムはない。 なお「鍵長」項目の括弧内はブロック長を指す。 いずれも単位は “bit” である。\nIDアルゴリズム鍵長参考文献 0 Plaintext or unencrypted data 1 IDEA 128 (64) Narrow-Bicliques: Cryptanalysis of Full IDEA 2 TripleDES (or DES-EDE) with 168-bit key derived from 192 168 (64) SP800-67 Rev.2 3 CAST5 with 128-bit key 128 (64) RFC2144 4 Blowfish with 128-bit key, 16 rounds 128 (64) Description of a New Variable-Length Key, 64-Bit Block Cipher (Blowfish) 5,6 (Reserved) 7 AES with 128-bit key 128 (128) FIPS PUB 197 8 AES with 192-bit key 192 (128) 9 AES with 256-bit key 256 (128) 10 Twofish with 256-bit key 256 (128) 11 Camellia with 128-bit key 128 (128) RFC3713 12 Camellia with 192-bit key 192 (128) 13 Camellia with 256-bit key 256 (128) 100-110 Private/Experimental algorithm 253-255 (Reserved to avoid collision with Secret Key Encryption) OpenPGP で使用可能な共通鍵暗号アルゴリズム一覧 ID は OpenPGP で定義されるもので “sym 1” のように表記する。\nAES-128 (sym 7) が “MUST implement” で AES-256 (sym 9) が “SHOULD implement” となった 後方互換性のために IDEA, TripleDES, CAST5 による復号を行ってもよい（MAY）が機密性の漏洩が疑われる非推奨のアルゴリズムであることを警告すべき（SHOULD） ちなみに sym 11 から sym 13 の Camellia 暗号は日本製である。\nRFC 9580 では共通鍵暗号を使った暗号化について，従来からある CFB モード1 に加えて認証付き暗号の暗号モードを使用できる。\n認証付き暗号の暗号モード（AEAD Algorithms） RFC 9580 で追加された認証付き暗号（Authenticated Encryption with Associated Data; AEAD）について利用可能な暗号モードは以下の通り。\nID暗号モード参考文献 1 EAX \u0026#x2705; EAX: A Conventional Authenticated-Encryption Mode 2 OCB \u0026#x2705; RFC 7253 3 GCM \u0026#x2705; SP800-38D 100-110 Private/Experimental algorithm OpenPGP で使用可能な認証付き暗号アルゴリズム一覧 RFC 9580 では OCB が “MUST implement” となる。\n公開鍵暗号・署名アルゴリズム（Public-Key Algorithms） OpenPGP で利用可能な公開鍵暗号・署名は以下の通り。\nIDアルゴリズム参考文献 1 RSA (Encrypt or Sign) FIPS PUB 186-5 2 RSA Encrypt-Only 3 RSA Sign-Only 4-15 (Reserved) 16 Elgamal\n(Encrypt-Only) A public key cryptosystem and a signature scheme based on discrete logarithms 17 DSA FIPS PUB 186-4 18 ECDH public key algorithm SP800-56A Revision 3 19 ECDSA public key algorithm RFC 6090, FIPS PUB 186-5, SEC 1: Elliptic Curve Cryptography 20 (Reserved; formerly Elgamal Encrypt or Sign) 21 (Reserved for Diffie-Hellman (X9.42, as defined for IETF-S/MIME)) 22 EdDSALegacy (deprecated) \u0026#x2705; (Ed25519 を参照のこと) 23 (Reserved for AEDH) 24 (Reserved for AEDSA) 25 X25519 \u0026#x2705; RFC 7748, FIPS PUB 186-5 26 X448 \u0026#x2705; 27 Ed25519 \u0026#x2705; RFC 8032, FIPS PUB 186-5 28 Ed448 \u0026#x2705; 100-110 Private/Experimental algorithm OpenPGP で使用可能な公開鍵暗号・署名アルゴリズム一覧 ID は OpenPGP で定義されるもので “pub 1” のように表記する。\nRSA (pub 1,2,3), Elgamal (16), DSA (17) は非推奨 (deprecated) となった。更に暗号化専用および署名専用の RSA (pub 2,3) と Elgamal (16), DSA (17) の鍵は新たな生成が禁止になった（MUST NOT）。ただし RFC 4880 では Elgamal (16) と DSA (17) の実装が MUST なので，後方互換性を確保するのであれば，これらを実装する必要がある X25519 (pub 25) および Ed25519 (pub 27) の実装が MUST になった X448 (pub 26) および Ed448 (pub 28) の実装が MUST になった EdDSALegacy (pub 22) は RFC 4880bis の頃に定義されたが，最終的に Ed25519 (pub 27) に置き換えられた。おそらく v4 鍵および署名パケットに対応するために残されているが非推奨（deprecated）になっている。新たに EdDSA 鍵を生成するなら Ed25519 (pub 27) または Ed448 (pub 28) を選択すべき ElGamal Encrypt or Sign (pub 20) は，元々暗号化と署名の両方できるものだったが，脆弱性が見つかったため OpenPGP では使用禁止になった2 余談だが，現在対量子コンピュータ暗号を OpenPGP に組み込む議論が行われている。 興味がある方はそちらもどうぞ。\n楕円曲線（ECC Curves for OpenPGP） 前節で挙げた楕円曲線暗号（Elliptic Curve Cryptography; ECC）アルゴリズムに対して RFC 9580 で利用可能な楕円曲線（Elliptic Curve）は以下の通り。 なお「鍵長」の単位はオクテット（byte）である。\n楕円曲線名適用アルゴリズム鍵長 NIST P-256 ECDSA, ECDH 32 SP800-56A Revision 3, FIPS PUB 186-5 NIST P-384 ECDSA, ECDH 48 NIST P-521 ECDSA, ECDH 66 brainpoolP256r1 \u0026#x2705; ECDSA, ECDH 32 RFC 5639 brainpoolP384r1 \u0026#x2705; ECDSA, ECDH 48 brainpoolP512r1 \u0026#x2705; ECDSA, ECDH 64 Ed25519Legacy \u0026#x2705; EdDSALegacy (EdDSA) 32 RFC8032, FIPS PUB 186-5 Ed25519 \u0026#x2705; Ed25519 (EdDSA) 32 Ed448 \u0026#x2705; Ed448 (EdDSA) 57 Curve25519Legacy \u0026#x2705; ECDH 32 RFC7748 X25519 \u0026#x2705; X25519 (ECDH) 32 X448 \u0026#x2705; X448 (ECDH) 56 OpenPGP で使用可能な楕円曲線一覧 Ed25519Legacy と Ed25519 は同じ楕円曲線で Ed448 と併せて RFC 8032 EdDSA アルゴリズムで用いる（ECDSA では使えない） Curve25519Legacy と X25519 は同じ楕円曲線で X448 と併せて RFC 7748 で規定されている。これらの楕円曲線を使った ECDH 鍵は同じサイズの EdDSA 鍵と組み合わせて使う Ed25519, Ed448, X25519, X448 以外の楕円曲線は Curve OID で管理される。 Ed25519, Ed448, X25519, X448 については同名のアルゴリズム ID と紐付いているため Curve OID による管理外となる Ed25519Legacy は同名のアルゴリズム ID で用いる。また v4 鍵および署名パケットでのみ使用可能。 v6 パケットの場合は Ed25519 を用いる Curve25519Legacy は ECDH アルゴリズムかつ v4 鍵および署名パケットでのみ使用可能。 v6 パケットの場合は X25519 を用いる 具体的な実装例については「そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな」で紹介している\nECDH 鍵導出のパラメータ（ECDH Parameters） ECDH (pub 18) では鍵導出のためのハッシュアルゴリズムと鍵カプセル化のための共通鍵暗号アルゴリズムをパラメータとして持つ。 各アルゴリズムの組み合わせは以下の通り。\nCurve Hash Algorithm symmetric Algorithm NIST P-256 SHA2-256 AES-128 NIST P-384 SHA2-384 AES-192 NIST P-521 SHA2-512 AES-256 brainpoolP256r1 SHA2-256 AES-128 brainpoolP384r1 SHA2-384 AES-192 brainpoolP512r1 SHA2-512 AES-256 Curve25519Legacy SHA2-256 AES-128 ECDH KDF/KEK パラメータ v6 鍵パケットの場合，上のアルゴリズムの組み合わせを使用しなければならない（MUST） v4 鍵パケットの場合，上のアルゴリズムの組み合わせを使用すべき（SHOULD） 一方向ハッシュ関数アルゴリズム（Hash Algorithms） OpenPGP で利用可能なハッシュ関数は以下の通り。 RFC 9580 で新たに追加されたアルゴリズムはない。\nIDアルゴリズム参考文献 1 MD5 RFC1321 2 SHA-1 FIPS PUB 180-4 3 RIPE-MD/160 The hash function RIPEMD-160 4-7 (Reserved) 8 SHA2-256 FIPS PUB 180-4 9 SHA2-384 10 SHA2-512 11 SHA2-224 12 SHA3-256 FIPS PUB 202 13 (Reserved) 14 SHA3-512 100-110 Private/Experimental algorithm OpenPGP で使用可能な一方向ハッシュ関数一覧 ID は OpenPGP で定義されるもので “hash 1” のように表記する。\nSHA2-256 (hash 8) が “MUST implement” となった。また SHA2-384 (hash 9), SHA2-512 (hash 10) の実装が推奨される（SHOULD） v4 鍵および署名パケットのの鍵指紋や MDC (Modification Detection Code) を除き SHA-1 (hash 2) を必要とするメッセージを作成してはならない（SHOULD NOT） MD5 (hash 1), SHA-1 (hash 2), RIPE-MD/160 (hash 3) を用いて署名を作成してはならない（MUST NOT） ECDH KDF および S2K KDF のハッシュ関数として MD5 (hash 1), SHA-1 (hash 2), RIPE-MD/160 (hash 3) を用いてパケットを生成してはならない（MUST NOT） v6 以降のパケットで S2K KDF のハッシュ関数として MD5 (hash 1), SHA-1 (hash 2), RIPE-MD/160 (hash 3) を用いて秘密鍵を復号してはならない（MUST NOT） MD5 (hash 1), SHA-1 (hash 2), RIPE-MD/160 (hash 3) に依存する最近の署名を検証してはならない（MUST NOT） MD5 (hash 1), SHA-1 (hash 2), RIPE-MD/160 (hash 3) に依存する古い署名を検証してはならない（SHOULD NOT） 署名の作成日が使用されたアルゴリズムの既知の脆弱性が発見された日より前で，メッセージが常に安全な管理下にあったと確信できる場合は除く 鍵指紋作成で使われるハッシュ関数アルゴリズム（Fingerprints） 鍵指紋作成で使われるハッシュ関数アルゴリズムは以下の通り。\nKey Version Fingerprint Algorithm v3 MD5 v4 SHA1 v6 ✅ SHA256 鍵指紋作成で使われるハッシュ関数アルゴリズム その他のアルゴリズム S2K (String-to-Key) S2K はパスフレーズからセッション鍵を生成するためのハッシュ化の手順である。\nIDS2K タイプ参考文献 0 Simple S2K 1 Salted S2K 2 Reserved value 3 Iterated and Salted S2K 4 Argon2 \u0026#x2705; RFC 9106 100-110 Private/Experimental S2K OpenPGP で使用可能な S2K アルゴリズム一覧 ID は OpenPGP で定義されるもので “s2k 1” のように表記する。 Simple S2K (s2k 0) と Reserved value (s2k 2) は下位互換のために残されているもので，新たに暗号データや電子署名を作成する際に使用すべきではない。\nOpenPGP では，パスフレーズ自体はいかなる形（ハッシュ値を含む）でも保存しない。 このため，パスフレーズを紛失してしまった場合は復元できない3。\nデータ圧縮（Compression Algorithms） 暗号化メッセージや電子署名を圧縮するためのアルゴリズムである。 RFC 9580 で新たに追加されたアルゴリズムはない。\nIDアルゴリズム参考文献 0 Uncompressed \u0026nbsp; 1 ZIP RFC1951 2 ZLIB RFC1950 3 BZip2 bzip2 100-110 Private/Experimental algorithm OpenPGP で使用可能なデータ圧縮アルゴリズム一覧 ID は OpenPGP で定義されるもので “comp 1” のように表記する。\n非圧縮（comp 0）は “MUST implement” である ZLIB (comp 2) は “SHOULD implement” となっていて， ZIP (comp 1) については “SHOULD be able to decompress using” と復号時の後方互換性のみ確保されていればいいようだ 乱数生成器（Random Number Generator） 基本的に getrandom() システムコールのような OS が標準で提供している暗号学的に安全な疑似乱数生成器（CSPRNG）を使うべき，とある。 もしそれらが使えない（信用できない）場合でも，新しいものを自作するのではなく RFC 4086 を参照して実装すべきと書かれている。\nブックマーク Edwards-curve Digital Signature Algorithm NIST FIPS 186-5 および SP 800-186 正式版がリリースされた 参考図書 暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\nPGP―暗号メールと電子署名 シムソン ガーフィンケル (著), Garfinkel,Simson (原著), ユニテック (翻訳) オライリー・ジャパン 1996-04-01 単行本 4900900028 (ASIN), 9784900900028 (EAN), 4900900028 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 良書なのだが，残念ながら内容が古すぎた。 PGP の歴史資料として読むならいいかもしれない。\nreviewed by Spiegel on 2014-10-16 (powered by PA-APIv5)\n暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n厳密には CFB モードの変形である。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\npub 20 が禁止になった経緯については “GnuPG\u0026rsquo;s ElGamal signing keys compromised” を参照のこと。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nただし OpenPGP では試行回数によるロックアウトは定義されないため，無限にパスフレーズ解読を試みることができる。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Web のコストは誰が支払うのか",
      "section": "remark",
      "description": "改めて思うのだが Web 2.0 最大の罪はそのコストを安易に他者へ「転嫁」してしまったことだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/who-pays-for-web-costs/",
      "published": "2025-03-11T05:39:34+00:00",
      "update": "2025-03-11T23:04:14+00:00",
      "content": "今月（2025-03）に入り Chrome 系のブラウザ拡張機能について Manifest-V2 廃止に基づく粛清がいよいよ始まるようだ？\nGoogle’s Chrome extension cull hits more uBlock Origin users | The Verge Google Chrome Disables uBlock Origin and Other Extensions | Extremetech 実際には Manifest-V2 の廃止までにはまだ猶予があり，どうやら Google 側が姑息な排除をしようとしているんじゃないかという話もある。\nGoogleが「uBlock Originのサポートは終了しました」とウソをついているとネットが騒然、広告ブロッカーを使い続ける方法はコレ - GIGAZINE 本当のところは分からないが（Chrome 使ってないので），今回の V2 から V3 への移行で（利用者から見て）最もインパクトがある拡張機能のひとつが uBlock Origin だろう。 uBlock Origin は Manifest-V2 の webRequest API 仕様に大きく依存していて，新しい Manifest-V3 の API では機能が制限されるらしい。\nuBlock Origin relies heavily on the webRequest API to block unwanted content before it loads. Under MV3, the webRequest API is limited, and extensions are encouraged to use the new declarativeNetRequest API instead. This new API allows for predefined rules but lacks some of the dynamic capabilities that uBlock Origin utilizes for advanced content blocking. via uBlock Origin - Free, open-source ad content blocker. Manifest-V3 でこの制限をうまく回避するる方法はないようで，以下の代替案が提案されている。\nContinue Using uBlock Origin on Firefox Use uBlock Origin Lite Switch to Browsers Committed to MV2 Support Explore Other Content Blocking Methods via uBlock Origin - Free, open-source ad content blocker. uBlock Origin Lite であれば Manifest-V3 ベースらしいので Chrome ユーザは取り敢えずこちらに移行する手はある。\n一方 Firefox は Manifest-V2 と Manifest-V3 の両方をサポートすると明言しているので，いっそ Firefox に乗り換える手もある。\nMozilla’s approach to Manifest V3: What’s different and why it matters for extension users | The Mozilla Blog ブラウザを乗り換えていいのであれば，もうひとつ Orion ブラウザに乗り換える手もある。 有料検索サービスの Kagi が提供している Orion ブラウザは広告ブロッキング機能を既定で備えていて，他にもプライバシー保護の観点から他のブラウザより有利であると主張している。\nPrivacy comparison Orion Safari Firefox Brave Chrome Zero telemetry by default ✅ ❎ ❎ ❎ ❎ Blocking 1st party ads by default ✅ ❎ ❎ ❎ ❎ Blocking 1st party trackers by default ✅ ❎ ❎ ❎ ❎ Blocking 3rd party ads by default ✅ ❎ ❎ ✅ ❎ Blocking 3rd party trackers by default ✅ ✅ ✅ ✅ ❎ via Orion Browser by Kagi 残念ながら Orion ブラウザは WebKit ベースのため，今のところ macOS および iOS/iPadOS しか対応していない。 しかし，昨今の情勢を見て Linux 版の開発に着手したようだ。\nWe\u0026rsquo;re thrilled to announce that development of Orion Browser for Linux has officially started! Our team is working hard to bring the same speed, privacy, and innovation that Mac users love to the Linux platform.\nThis is an ambitious project that we expect will take approximately one year to complete. Our target is to achieve feature parity with the current macOS version by March 2026.\nvia March 6th, 2025 - Orion Embarks on Linux Journey \u0026amp; Kagi Doggo Art Celebration 手元にある MacBook Air には既に導入しているが，今のところ不都合はない。 まぁ macOS のアプリケーションはあまり使わず Linux 環境での作業が殆どなのだが。 私は Linux 版を待ってます。\nOrion ブラウザには Orion+ ってのがあるそうで，一括で150USD払うか月5USD（年50USD）のサブスクリプションに加入することで RC 版の利用が可能になる他，フィードバックにも優先的に対応してもらえるらしい。 Kagi は有料検索サービスとこの Orion+ の収益で開発・運用を行っているようだ。\nその Kagi の検索サービスだが，現在は Professional プランを月ごとの支払いで運用している。 もうガッツリ使ってるよ。 検索周りの UX が優秀なのは言うまでもないが AI 絡みの機能（Translate, FastGPT1, Universal Summarizer）も便利に使っている。 なので，年単位の契約に切り替えてもいいかなぁ，と考え中ではある。 もしくは Assistant が使える Ultimate プランにするか。 いやでも私の場合 AI アシスタントは GitHub Copilot で足りてるからなぁ。\nKagi の中の人が Bluesky で書いていたが，ネット上で享受しているサービスなりプラットフォームなりのコストは誰が支払っているのか，って話だ。\n改めて思うのだが Web 2.0 最大の罪はそのコストを安易に（本来の利用者ではない）他者へ「転嫁」してしまったことだろう。\nそして今になって私達は「メタクソ化 (enshittification) 」という形で（文字通りの）ツケを支払っているわけだ。 広告モデルで実際にコストを支払ってるのは広告主なんだから，サービス側プラットフォーム側が広告主の利益を最大化するよう調整するのは当然と言える。\nかくしてGoogleはスパマーに敗北した » p2ptk[.]org Google検索を殺した男――Googleはいつ、どこでメタクソ化に舵を切ったのか » p2ptk[.]org だからといって「それ」を許容できるかと問われたら否と答えるけど。\n特に Web 上の広告はもはや好悪の問題ではなくセキュリティやプライバシーのリスクの問題になっている。\n広告ブロッカーは「嫌ならどうする？」の表明である » p2ptk[.]org 米国 FBI は広告ブロッカーを推奨している？ 「Google広告からの誘導が6割」との分析結果。より巧妙化し、高齢者を狙う「サポート詐欺」に注意！【被害事例に学ぶ、高齢者のためのデジタルリテラシー】 - INTERNET Watch たとえば Publickey のように，ポリシーを持って広告を管理しているサイトは少なく，大抵は Google 等の広告サービスが提供しているものを垂れ流してるだけの脆弱なサイトに見える。 まぁ，一番ダークなのは間違いなく Google 検索サービスのページだけど（笑）\nuBlock Origin などのツールは単に広告をブロックするツールというだけではなく，そのサイトの広告を許容できるか否かの決定権を，見ているユーザ側に取り返すという大切な手段である。 その上で私達は（広告モデルを含む）他者にコストを転嫁する仕組みから距離を置く必要があると思う。 タダならば何でもいいという世の中じゃなくなったってことかねぇ。\nそのビジネスモデルで本当に利用者は幸せになれるのか。 よくよく考えてリソース（お金とは限らない）を投入しないといけないし，私のようなビンボー人は幾つかサービスを諦めることも視野に入れないといけないかもしれない。\nブックマーク Kagi is Bringing the Orion Web Browser to Linux - OMG! Ubuntu アドテクによるターゲティングは「存亡に関わる脅威」である » p2ptk[.]org 大いなる力には何の責任も伴わなかった » p2ptk[.]org Chromeの変更にともない、グーグルが「すべてのデバイスを追跡」開始 | Forbes JAPAN 公式サイト（フォーブス ジャパン） Kagi for Teams - Bring Kagi to work for your team 参考図書 はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX） セリア ホデント (著), 山根 信二（監修） (著), 山根 信二 (翻訳), 成田 啓行 (翻訳) 福村出版 2022-12-15 (Release 2023-07-03) Kindle版 B0C9Z7KGRN (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版が出ている。ゲームデザイナやゲームエンジニアだけでなく，ソフトウェア・エンジニアは全員読むべき。あと，ゲーマーな人も読むといいよ。感想はこちら。\nreviewed by Spiegel on 2023-11-21 (powered by PA-APIv5)\nハッキング思考　強者はいかにしてルールを歪めるのか、それを正すにはどうしたらいいのか ブルース・シュナイアー (著), 高橋 聡 (翻訳) 日経BP 2023-10-12 (Release 2023-10-12) Kindle版 B0CK19L1HC (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版が出てた！\nreviewed by Spiegel on 2023-11-21 (powered by PA-APIv5)\nスパム[spam]:インターネットのダークサイド フィン・ブラントン (著), 生貝直人 (監修), 成原慧 (監修), 松浦俊輔 (翻訳) 河出書房新社 2015-12-25 単行本 430924744X (ASIN), 9784309247441 (EAN), 430924744X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; とりあえず読みづらい。修飾語が多すぎるよ。ギリシア神話かっての。\nreviewed by Spiegel on 2016-12-10 (powered by PA-APIv5)\nFastGPT は本当に簡易的な機能のみの提供で，単一の応答しか出来ないし LLM モデルの選択もできない。連続的な「会話」や LLM モデルの切り替え機能が欲しいのであれば Ultimate プラン（月25USD）に加入した上で Assistant 機能を利用する必要がある。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "春の海（お散歩カメラ 2025-03-09）",
      "section": "remark",
      "description": "終日のたりのたり哉",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/09-osanpo-camera/",
      "published": "2025-03-09T09:48:07+00:00",
      "update": "2025-03-09T09:48:39+00:00",
      "content": "いや，今日は近所を軽く1時間ほど走って終わらせる気だったのよ。 でも外に出たらピーカンに晴れてるの。 今朝の松江の最低気温はギリギリ氷点下。 最高気温が14℃と寒暖差が激しい。 しかもほぼ無風。 空を眺めながらちょっと考えて，午後から春の海を見に行くことにした。\nというわけで，私が自転車で行ける唯一の海水浴場である古浦海水浴場に到着。 春先なので殆ど人がいない。\n春の海 終日のたりのたりかな（古浦海水浴場） | Flickr 古浦海水浴場 | Flickr 海水は綺麗だった。 まだ海水浴客がいないからかな。 でも冬の間の漂着物が結構あって\n漂着物 | Flickr これは海開きの前の掃除が大変なんだろうなぁ，と思ったり（他人事）。\n海を見ながら少し休憩して\n休憩中 | Flickr 市内へ戻る。 久しぶりに松江城に行ってみようかと。 もしかしたら今日は大山が見れるかもしれない。\n大山 from 松江城 | Flickr おー。 見えるぞ。 写真だと分かりにくいが（これでも結構補正をかけている）肉眼だともう少しはっきり見える感じ。\n松江城定点観測はこんな感じ。\n今日の松江城 | Flickr このあと県立図書館へでも行こうと思ったのだが 2025-03-12 まで特別整理休館だった orz\nしょうがないので宍道湖を眺めながら帰宅した。\n今日の宍道湖 | Flickr 明日は楽しい月曜日！\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nENEMOTI(エネモチ) お試し6本セット(クルミ餅×2・塩餅×2・甘酒餅×2) 【sotoasoオリジナルセット トレイルランニング ランニング 自転車 ロードバイク エンデュランススポーツ 登山 お餅 補給食 おいしい】 Enemoti B08DFNBWBM (ASIN), 4589880507619 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 糖質補給をメインにしたエナジーバー。三種入ったお試し用。 ACTIVIKE の中の人がオススメしていたので買ってみた。吸収がゆっくりなパラチノース配合。オブラートで包んであるので直接手に持って食べれる。私の好みとしては クルミ餅＞塩餅＞甘酒餅 かな。甘酒餅は粘りが強くて顎が鍛えられる（笑）\nreviewed by Spiegel on 2025-01-16 (powered by PA-APIv5)\n与謝蕪村: 郷愁の詩人 (岩波文庫 緑 62-2) 萩原 朔太郎 (著) 岩波書店 1988-11-16 文庫 4003106229 (ASIN), 9784003106228 (EAN), 4003106229 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 萩原朔太郎による与謝蕪村研究。1933年から1936年に書かれたものをまとめたもので，同じものが青空文庫に収録されている。\nreviewed by Spiegel on 2025-03-09 (powered by PA-APIv5)\n晴る ヨルシカ (メインアーティスト) Universal Music LLC (Release 2024-01-05) MP3 ダウンロード B0CQS23YMR (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; アニメ「葬送のフリーレン」OP曲。 mora で高解像度版が買える。 YouTube の「歌ってみた」をいくつか聴いてオリジナルを買っておこうかなと。移動中にヘヴィローテーションしてる。\nreviewed by Spiegel on 2025-02-09 (powered by PA-APIv5)\n春の海〜宮城道雄作品集〜 砂崎知子、藤原道山 (メインアーティスト) Nippon Columbia Co., Ltd./NIPPONOPHONE 2007-12-19 (Release 2024-08-06) MP3 ダウンロード B0D9X16QY6 (ASIN) 今やお正月の定番曲「春の海」を含む箏の名曲が収録されている。 mora でロスレス版（CD相当の音質）が買える。\nreviewed by Spiegel on 2025-03-09 (powered by PA-APIv5)\n"
    },
    {
      "title": "浮世絵コレクション展に行ってきた（お散歩カメラ 2025-03-08）",
      "section": "remark",
      "description": "八雲温泉へ行こう / 浮世絵コレクション展に行ってきた / 久しぶりに宍道湖の夕日が見れた",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/08-osanpo-camera/",
      "published": "2025-03-08T13:32:18+00:00",
      "update": "2025-03-08T13:32:24+00:00",
      "content": "今日の松江市の最低気温は約2℃。 最高気温は約11℃で，お天気もよく風も弱め。 凍えるほど寒くはなく，暑くもなく，サイクリング日和。\nいや，今週\n【VTuber＆漫画家】儒烏風亭らでん、憧れのヤマザキマリ先生と対談する会（前編）【儒烏風亭らでん #ReGLOSS 】 - YouTube ってのが配信されてたんだけど，あんなん見たら温泉行きたくなるやろ！ まぁ，もとより天気がよければ温泉に行くつもりだったけどね。 それにしてもヤマザキマリさんってイケボなんですなー。\nちうわけで，今日もチャリンコでお出かけしましょう。\n八雲温泉へ行こう いつものように日吉の切通し経由で八雲温泉へ。 途中でバードウォッチングなどしながらのんびり移動。\n今日のバードウォッチング（日吉の切通し） | Flickr 早春の意宇川 | Flickr いつものように露天風呂にゆっくり浸かり\n八雲温泉上がりのコーヒー牛乳 | Flickr 木次乳業さん，いつもお世話になっています。 そのまま昼食。\nお昼は割子蕎麦（八雲温泉） | Flickr さて，お腹も落ち着いたことだし，市内へ移動しますか。\n浮世絵コレクション展に行ってきた 宍道湖を眺めながら島根県立美術館へ。\n今日の宍道湖（袖師地蔵） | Flickr 島根県立美術館 駐輪場 | Flickr 県立美術館は現在「平山郁夫展」をやっているが，そちらは1月に観に行ったので，今回はコレクション展を観に行った。今やってるのは\n水辺の展示室 第7期（2月 5日(水) ～ 3月17日(月) 展示室１） 西洋絵画・洋画 第3期 島根ゆかりの洋画家たち（1月15日(水) ～ 5月12日(月) 展示室１） 近世絵画・日本画 第7期（2月 5日(水) ～ 3月17日(月) 展示室１） 北斎コレクション 第10期（2月19日(水) ～ 3月24日(月) 展示室２） 原清の陶芸（11月20日(水) ～ 3月17日(月) 展示室３） 島根県立美術館 写真コレクションの30年（1月16日(木) ～ 4月14日(月) 展示室４） 木の魅力（1月23日(木) ～ 4月21日(月) 展示室５） の7つ。 これ全部見れて大人300円とか！\nお目当ては「北斎コレクション 第10期」。\n浮世絵コレクション展行ってきた | Flickr （コレクション展は写真撮影が許可されていなかったので，無料の戦利品を撮ってみた）\n一応展示室1から順番に観て回る。\nここのところ春先の水辺の風景が気になっている。 なんでかなぁ\u0026hellip; と「水辺の展示室」の作品を観ながら思ったのだが，春先って川の水量も多いし日差しも少しずつ強くなってるので妙にキラキラしいんだよな。 だから気になるのかもしれない。 「水辺の展示室」には近代の印象派の作品が多く展示されていてキラキラしい作品が多い（笑） あと昨年観た新版画展で初めて知った川瀬巴水さんの作品もあった。 思わず拝む。\n浮世絵に関しては，県立美術館には島根県購入分以外に新庄コレクションや永田コレクションといった多くの寄贈品がある。 作品保存の観点から年中展示されているわけではないが，今回は有名な「冨嶽三十六景 凱風快晴」（通称「赤富士」）が展示されているというので，ぜひ生で観たかったのだ。\nvia Red Fuji southern wind clear morning - 凱風快晴 - Wikipedia （こんな真っ赤っ赤じゃなかった。発行時期によって色合いが違うらしい）\n陶芸の原清さんって島根県の出身なんだな。 いわゆる人間国宝。 展示されている作品は全てご本人寄贈だった。 凄いなぁ\u0026hellip;\n「写真コレクション」で改めて森山大道さんの作品を眺める。 モノクロ写真って説得力が半端ないよなぁ。 カラー以上にごまかしが効かないし。 まぁ，私は下手の横好きのお散歩カメラの人なのでゆる〜く活動していきましょう。\nここまで展示室4で力尽きた。 「木の魅力」は今回はパスで。 4月の中頃まではやってるみたいなので，また行こう。\n久しぶりに宍道湖の夕日が見れた 一通り作品を眺めて気がついたら16時になっていた。\n今日は幸いなことに西の空が晴れている。 こりゃあ久しぶりに夕日が見れるかも。\nというわけで，いったんコメダ喫茶店まで退却し\n日没まで休憩 | Flickr 日の入り（18:09）30分前まで時間を潰す。\nその後撮影スポットに移動するとギャラリーが沢山いた。 アイドル？ アニメキャラ？ のアクスタと一緒に撮ってる人もいたり。\nアイドルと一緒 | Flickr アクスタってそうやって使うのかー\n以下がスマホ（Galaxy 端末）で撮った写真（トリミングしている）。\n今日の宍道湖（夕景） | Flickr こっちは Canon の望遠鏡コンデジで撮った写真。\n今日の宍道湖（夕景） | Flickr スマホのカメラって何故か異様に青が強調されるんよね。 たぶんアプリ側で補正をかけてるんだろうけど。 一方 Canon のコンデジは赤が綺麗。 というわけで，こんな感じの写真になった。\n私はスマホのカメラもコンデジもトイカメラのカテゴリだと思ってる。 トイカメラって面白いよね。\nでは続きをどうぞ。\n今日の宍道湖（日没） | Flickr 今日の宍道湖（日没） | Flickr 今日の宍道湖（日没） | Flickr 堪能した。 帰りますかね。 明日も晴れだ！\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nテルマエ・ロマエI (ビームコミックス) ヤマザキ マリ (著) KADOKAWA 2010-12-01 (Release 2012-09-01) Kindle版 B009727M6M (ASIN) 実はまだ読んでないんだよなー ポチっとくか\nreviewed by Spiegel on 2025-03-08 (powered by PA-APIv5)\n晴る ヨルシカ (メインアーティスト) Universal Music LLC (Release 2024-01-05) MP3 ダウンロード B0CQS23YMR (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; アニメ「葬送のフリーレン」OP曲。 mora で高解像度版が買える。 YouTube の「歌ってみた」をいくつか聴いてオリジナルを買っておこうかなと。移動中にヘヴィローテーションしてる。\nreviewed by Spiegel on 2025-02-09 (powered by PA-APIv5)\n"
    },
    {
      "title": "Typst における関数とルール",
      "section": "typst",
      "description": "関数の定義と呼び出し / 名前付き引数 / Show ルール / Set ルール / 文書ファイルを分割した際のルール設定",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/typst/7-function-and-rules/",
      "published": "2025-03-07T10:16:25+00:00",
      "update": "2025-03-07T11:31:08+00:00",
      "content": "そろそろ Typst の関数とルール設定について，そろそろちゃんと調べようと思って。 本当は「Typst に関する雑多な話」で軽く触れるだけにするつもりだったが，思ったより量があったので記事を立てることにした。\n関数の定義と呼び出し まずは一番簡単な関数を考えてみる。\n#let fnc(it) = { it }; これは引数をそのまま返すだけの関数である。 この関数の引数に \u0026quot;Hello\u0026quot; を渡して呼び出すと\n#fnc(\u0026#34;Hello\u0026#34;) 引数の内容がそのまま出力される。\n関数の定義と呼び出し (1) 引数には（出力可能なものであれば）なんでも渡せる。 数値を入れることもできるし，何なら関数を入れ子にしてもよい。\n#fnc(fnc(\u0026#34;Hello\u0026#34;)) もうひとつ。 Typst の関数呼び出しではコンテントブロック（角括弧 [ ... ] で囲まれる領域）を関数呼び出しの後ろに付けることができる。 これをコンテント引数（content argument）と呼ぶ。\n#fnc[Hello] コンテント引数（content argument）は呼び出された側では content 型の引数としてセットされる。 つまり #fnc(\u0026quot;Hello\u0026quot;) と #fnc[Hello] は（str と content の型の違い以外は）ほぼ同じ機能である。\nついでの話として，呼び出す側はコンテント引数を複数並べることができる。\n#fnc2[Hello][world] この場合，呼び出される側は以下のように定義する。\n#let fnc2(..it) = { it } #fnc2[Hello][world] このときの出力結果は以下の通り。\n関数の定義と呼び出し (2) it に arguments 型で受けているのが分かる。 arguments 型は pos メソッドで array 型に変換できる。\n名前付き引数 次は文字列を色付きで出力することを考えてみる。 関数定義は以下の通り。\n#let colorText(color: red, it) = { text(fill: color)[#it] } color: red は名前付き引数（named parameter）と呼ばれる。 名前付き引数には既定値がつく（上述のコードでは red が既定値）。 この関数の呼び出しは以下のように書く。\n#colorText[Hello] #colorText(color: blue)[world] 名前付き引数は省略可能で省略した場合は既定値になる。 もちろん\n#colorText(\u0026#34;Hello\u0026#34;) #colorText(color: blue, \u0026#34;world\u0026#34;) などと書くこともできる。 出力結果は同じで以下の通り：\n関数の定義と呼び出し (2) Show ルール show キーワードを使って指定した対象に対し show ルールを設定できる。\n#let colorText(color: red, it) = { text(fill: color)[#it] } #show heading: it =\u0026gt; colorText(color: blue, it) = Heading 1 == Heading 1.1 上のコードの it は show キーワードで指定した対象を無名関数のコンテント引数として渡したもの。 全ての関数で共通に用意されている with メソッドを使うことで以下のようにコンテント引数を省略できる。\n#let colorText(color: red, it) = { text(fill: color)[#it] } #show heading: colorText.with(color: blue) = Heading 1 == Heading 1.1 出力結果はいずれも同じでこんな感じ。\nShow ルール設定 (1) Show ルールの対象は（出力可能なものなら）なんでもよくて，たとえば\n#let colorText(color: red, it) = { text(fill: color)[#it] } #show \u0026#34;Hello\u0026#34;: colorText Hello World みたいな記述もできる。 なお，コンテント引数以外に引数がない（または省略できる）場合は，上のように関数名だけを指定できる。\nこのコードの出力結果は以下の通り：\nShow ルール設定 (2) Show ルールの対象には selector も指定できる。 たとえば where メソッドを使って以下のように記述できる。\n#let colorText(color: red, it) = { text(fill: color)[#it] } #show heading.where(level: 1).or(heading.where(level: 2)): colorText = Heading 1 == Heading 1.1 === Heading 1.1.1 出力結果は以下の通り：\nShow ルール設定 (3) Show ルールの対象がない場合，文書全体が対象となる。\n#let colorText(color: red, it) = { text(fill: color)[#it] } #show: colorText.with(color: blue) #lorem(40) ちなみに lorem は指定した単語数のランダムな文章（欧文1）を生成する関数である。\n出力結果は以下の通り：\nShow ルール設定 (4) Show ルールは逐次処理されるのか Show ルールがどのように効いてくるか試してみた。\nまずはこれ。\n#let colorText(color: red, it) = { text(fill: color)[#it] } = Heading 1 == Heading 1.1 #show heading: colorText = Heading 2 == Heading 2.1 出力結果は以下の通り：\nShow ルール設定 (1b) まぁ，これは予想通り。\n次はこれ。\n#let colorText(color: red, it) = { text(fill: color)[#it] } = Heading 1 == Heading 1.1 #show heading: colorText = Heading 2 == Heading 2.1 #show heading: it =\u0026gt; colorText(color: blue, it) = Heading 3 == Heading 3.1 希望としては 黒 → 赤 → 青 の順で変わってほしいのだが\u0026hellip;\nShow ルール設定 (1c) んー。 ひょっとして show ルールって遡って適用されるのだろうか。 外部パッケージを import したときに show ルールが衝突したら面倒なことになりそう。\nShow ルールの設計はちょっと気をつけないといけないかもしれない。\nSet ルール text や image あるいは heading や par などドキュメント要素に紐づく組込み関数は「要素関数（element function）」と言うそうな。 要素関数は set キーワードを使い set ルールで名前付き引数の既定値を変更することができる。\nSome functions are associated with elements like headings or tables. When called, these create an element of their respective kind. In contrast to normal functions, they can further be used in set rules, show rules, and selectors. via Function Type – Typst Documentation ドキュメントのルートで set ルールを指定すると，逐次処理で指定位置以降に適用される。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) 明朝体 #set text(font: \u0026#34;Noto Sans CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) ゴシック体 出力結果は以下の通り：\nSet ルール設定 (1) Show ルールの中で set ルールを指定した場合，その show ルールの中でのみ set ルールが適用される。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #show heading: it =\u0026gt; { set text(font: \u0026#34;Noto Sans CJK JP\u0026#34;) it } = ゴシック体 明朝体 set キーワードのみの記述ならコンテント引数を省略して\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #show heading: set text(font: \u0026#34;Noto Sans CJK JP\u0026#34;) = ゴシック体 明朝体 などと記述することもできる。\n出力結果はいずれも同じでこんな感じ。\nSet ルール設定 (2) なお let キーワードで定義したユーザ関数は要素関数ではないので set ルールは使えない。\n文書ファイルを分割した際のルール設定 文書ファイルを分割して import や include で読み込む場合，子ドキュメントで設定した set および show ルールは親ドキュメントには適用されないので注意（親ドキュメントから子ドキュメントへはルールが継承される）。 子ドキュメントで記述した set および show ルールを親ドキュメントに適用させるには（テンプレートで使う手法）ルールを記述した関数を import で読み込み，親ドキュメントの show ルールを使って関数を呼び出す。\n#let initFonts(font-name: \u0026#34;New Computer Modern\u0026#34;, body) = { set text( lang: \u0026#34;ja\u0026#34;, font: font-name, size: 10pt, ) body } 子ドキュメント #import \u0026#34;child.typ\u0026#34;: initFonts #show: it =\u0026gt; initFonts( font-name: \u0026#34;Noto Sans CJK JP\u0026#34;, it ) こんにちわ、世界！ 親ドキュメント (1) または with メソッドを使って\n#import \u0026#34;child.typ\u0026#34;: initFonts #show: initFonts.with( font-name: \u0026#34;Noto Sans CJK JP\u0026#34;, ) こんにちわ、世界！ 親ドキュメント (2) などとコンテント引数を省略できる。\nブックマーク ブックマークは「Typst に関するブックマーク」にてまとめています。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\n日本語の文を生成する roremu パッケージを公開されている方もいる。感謝！\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "もはや紙の本は贅沢品である",
      "section": "remark",
      "description": "今の本には2つの方向がある。ひとつは「読む本」でもうひとつは「遺す本」。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/paper-books-are-an-extravagance/",
      "published": "2025-03-04T03:56:18+00:00",
      "update": "2025-03-05T06:54:07+00:00",
      "content": "例によって Bluesky の TL を眺めてたら面白い記事を見かけた。\n本屋より大切なもの - by yu koseki - たよりない話 自身の話で恐縮だが，私は本屋が好きだった。 それはもう，大昔の履歴書の趣味の欄に「本屋巡り」と書くくらいには好きだった（今でもプロフィールにちょっと名残がある）。 過去形で書くということは，今はそうでもないということ。 ここ2,3年ではトイレ以外で本屋を利用してない気がする。 いや，職場用に本を買おうとして本屋に行ったんだけど，あまりのクズなラインナップに絶望したんだっけ。 以来，職場で買う本も Amazon で（会社のアカウントで）買ってもらっている。\n私が長く暮らしていた広島市は本屋天国みたいなところがあって，バブルの頃までは大小含めて様々な本屋が林立していた。 週末とか一日かけて10軒以上本屋さんをハシゴしてたりしてたよ。 バブルが弾けて小さい本屋はほぼ消滅したけど，それでも大型書店は（地方都市にしては）そこそこ残っている。\n松江市に帰郷 (かえ) って驚いたことのひとつは，子供の頃に通ってた本屋が根こそぎなくなってて，ほぼ今井書店一択になってたこと。 これで「本屋で本を買わない」ことに全く罪悪感がなくなった。 存在しないお店で本は買えない。\n7年前の引っ越しで大量の本を処分したのだが\n売却・廃棄予定の本。これで半分ほど。残りの半分の半分くらいは残したいと思ってるけど、まだ踏ん切りがつかない。ヘタレの自覚はある このときに痛烈に思ったのが「本は墓場に持っていけない」である。\nマンガやラノベは（竹本泉さんの作品以外は）紙の本を買わなくなった。 最近買った紙の本は『古代出雲の氏族と社会』だけど，これを買うのは勇気がいった（笑） つか，これくらいの本じゃないと紙では買わないし，紙の本自体めったに買わなくなった。 技術参考書は版元で PDF で買うし（Kindle ですらない）。\n本の関連で近年衝撃的だったのは yomoyomo さんの『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』が国会図書館に納本されたという2019年の記事。 私はあまりの衝撃にこんな記事を残した。\n少し前に「『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』が国会図書館に納本された」話があったが，残念ながら慧眼だったと言わざるを得ない。 まぁ「情報共有の未来」が「国会図書館に納本」とか皮肉 (スパイス) が効きすぎて目から汗が出てしまうが。 本の「史料」的価値より 今の本には2つの方向がある。 ひとつは「読む本」でもうひとつは「遺す本」。 オタクならそこに「布教する本」を加えるべきかもしれないが，きょうび「アルゴリズム」が個人の嗜好を支配する時代に於いて人による「布教」は効果が薄いかもしれない。\n「本の「史料」的価値」でも書いたが（特にネットにある）デジタル情報は失われやすい。 100年どころか10年だって保持できるか怪しいものである。 青空文庫（再来年で30周年か）や Flickr Foundation のような取り組みのほうが特殊なのである。 長く保存したいなら結局「紙の本」の形にするのが最も確実ということになる。 まぁ，アクセス性を無視するなら北極に埋める手もあるが（笑）\n「遺す本」ってのは出版社や作家あるいは文化政策の為政者が考えるべきことで，嗜好品・贅沢品として買うか私設図書館でも作るのなら別だが，その辺の個人がどうにかするような話ではない。\n一方で「読む本」に関しては，もう「本」の体裁をとる必然性すらなくなっている。 マンガだってケータイに特化した「タテ読み」が普通になってきてるし，小説サイトには書籍未満の作品が大量に溢れているし，今や大量になった Zenn 本にもお世話になっている。 VTuber が Minecraft で同人誌を売る時代だし1（笑）\n\u0026hellip;という状況になったとき「本屋」の立ち位置や意義って何？ というお気持ちで冒頭に紹介した記事に戻るわけだ。\nでもほぼ全ての本屋は、出版・取次と密接に結びつき、再販制度によって維持された、日本の出版システムの一端である。そして、そのシステムはもう誰が見てもうまくいっていない。だから結果として本屋が減っている。本屋を守れというのは、言い換えれば現在の出版システムを（多少の手直しはあったとしても）守れという話に聞こえるわけで、さて、本当にそれに意義があるのか、そもそもそんなことが可能なのか。 本屋より大切なものより だから、本屋活性化というのは問題の立てかたとして何重にもおかしくて、少なくとも出版システムをどう抜本的に改善するかという話をすべきだし、あるいは本屋のなくなっていく時代にどう本と出会うべきかという話をすべきだし、そもそもは人は情報とどう向き合うべきかという話をすべきである。 本屋より大切なものより 政治に疎い私は経産省による書店活性化なるものを初めて知ったのだが\n今回の課題の整理は、地方公共団体、出版業界、そして書店に足を運び、本を購入される国民の皆様が、こうした書店をめぐる課題を認識をしていただくことで、文化の接点、ひいては国力の拠点としての書店の新規出店や事業継続に繋がることを期待しています。\nまた、今回、書店振興プロジェクトチームが中心となって実施したヒアリング等により、書店をめぐる課題の整理を進めていますが、パブリックコメントを通じて改めて、国民の皆様の御意見を頂いたうえで、反映していきたいと考えています。\n「関係者から指摘された書店活性化のための課題（案）」を公表します （METI/経済産業省）より 昨年のカオスな総選挙のドサクサでそんなことしてたのか。 やりたい放題だな，経産省。\n「多様なコンテンツに触れる」とか「文化創造基盤」とか考えるなら，公共図書館とか博物館とか，それこそ青空文庫みたいなサービスとか色々と考えることがあるだろ。\nぶっちゃけこれって潰れつつある（営利企業としての）「本屋」を救済してくださいって話であって，本当は「本」の文化的側面など1ミリも考えてないよね。 まぁ，経産省らしいっちゃあらしいけど（笑）\nこういうピントの外れたことをねちねち捏ねくり回してるから出版社も取次も本屋も衰退してるんじゃないの？\n参考文献 古代出雲の氏族と社会 (47) (同成社古代史選書 47) 武廣 亮平 (著) 同成社 2024-03-11 単行本 4886219454 (ASIN), 9784886219459 (EAN), 4886219454 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「島根の歴史文化講座 2024」で講師をされた武廣亮平さんの著作。興味本位で買うには躊躇するお値段だし地元の県立図書館でも借りれるが，じっくり読みたいので買ってみた。著者の過去の論文を再構成した内容。記紀などの史料や過去の研究者の膨大な文献を整理した上で古代出雲についての考察を行う。\nreviewed by Spiegel on 2024-11-26 (powered by PA-APIv5)\n犬とハサミは使いよう (ファミ通文庫) 更伊 俊介 (著), 鍋島 テツヒロ (イラスト) KADOKAWA 2011-08-25 (Release 2012-09-07) Kindle版 B009IMAGYQ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 犬になっても本を読む！\nreviewed by Spiegel on 2015-04-26 (powered by PA-APIv5)\nもうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo (著) 達人出版会 2017-12-25 (Release 2019-03-02) デジタル書籍 infoshare2 (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; WirelessWire News 連載の書籍化。感想はこちら。祝 Kindle 化！\nreviewed by Spiegel on 2018-12-31\nブック・ウォーズ――デジタル革命と本の未来 ジョン・B・トンプソン (著), 久保美代子 (翻訳) みすず書房 2025-01-27 (Release 2025-01-27) Kindle版 B0DTK2DNXF (ASIN) Bluesky で版元が紹介されているのを見て衝動買いした。こちらの紹介記事も参考にどうぞ。これから読む。\nreviewed by Spiegel on 2025-03-05 (powered by PA-APIv5)\nそもそも日本の「同人市場」という特殊商慣行自体が日本の出版システムが壊れていることの傍証だよな。「VTuber が Minecraft で同人誌を売る話」を見て「そもそも同人活動ってこういうノリだったよなぁ」と遥か昔の学生時代を思い出していた。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Typst 練習用のリポジトリを作った，他",
      "section": "remark",
      "description": "Typst 練習用のリポジトリを作った / GitHub Copilot Pro に加入した",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/repository-for-practices-typst/",
      "published": "2025-03-03T11:52:58+00:00",
      "update": "2025-03-04T03:56:58+00:00",
      "content": "Typst 練習用のリポジトリを作った Typst のお勉強用に書いたコードをまとめたリポジトリを作った。\nGitHub - spiegel-im-spiegel/practices-typst: Typst による組版の練習 MIT-0 ライセンスで公開しているので，再利用等ご自由にどうぞ（再利用する価値があるかどうかは別として）。\n今後も思いついたことをチマチマ残していく予定。 ブログのほうは「Typst に関する雑多な話」を随時更新で書き足していくつもり。 これで Typst については一区切り付いたかな。\nGitHub Copilot Pro に加入した 今回 Typst で遊んでたら GitHub Copilot Free 版の制限いっぱいになってしまいまして。 10秒くらい考えて Pro 版に入ることにした。 とりあえず様子見で月 10USD ずつ払う。\nやっぱ本格的に使うならお金を払わんとダメか。\n主に VS Code でコーディング支援をしてもらってるが Typst と TypeScript で混乱してるのか，ウソの提案が多い。 大抵はコンパイルエラーになるので致命的ではないが。 ちゃんと統計をとってないけど体感で3割くらいしか正しくない感じ。 プロ野球選手なら打率3割でエース級だが，提案が7割使えないのはちょっと困る。 Go のコードならそんなに外れはないんだけどねぇ。\nCopilot に関してはローンチ当初から色々言われているが，最近でも\nThousands of exposed GitHub repositories, now private, can still be accessed through Copilot | TechCrunch GitHubで非公開にされたはずのリポジトリがMicrosoftのAIアシスタント「Copilot」を通じて公開されていたという指摘 - GIGAZINE みたいな話があって正直いまでもビミョーな気分なんだけど，なんだかんだと便利に使っている自分がいる。 生成 AI 周りはホンマ（かつての FinTech 流行時のように）山師みたいなのが多いのであまり深入りしないようにしているが，若い人が会議のテキスト起こしと議事録を作成するのに生成 AI を便利に使ってる話とか聞くと「もうそういう時代なんだなぁ」としみじみする。\nまぁ，年寄りの冷水なので聞き流してください（笑）\nブックマーク GitHub、あらゆるエディタやIDEとGitHub Copilotとの統合を可能にする「Copilot Language Server SDK」を一般公開|CodeZine（コードジン） GitHub for Beginners: How to get started with GitHub Copilot - The GitHub Blog 参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\n"
    },
    {
      "title": "Typst に関する雑多な話",
      "section": "typst",
      "description": "ここでは Typst に関する小ネタをまとめて挙げておく（随時更新）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/typst/x-miscellaneous/",
      "published": "2025-03-02T12:55:38+00:00",
      "update": "2025-03-07T10:16:41+00:00",
      "content": "ここでは Typst に関する小ネタをまとめて挙げておく（随時更新）。\nTypst をビルドする Typst は Windows であれば Winget， macOS なら Homebrew， Linux なら Snap または “Versions for typst” から直接取得できるが，これらの方法でインストールできない場合は Rust のビルド環境を導入して Typst をビルドする。\nとりあえず Linux プラットフォームで Rust ビルド環境をインストールするには以下のコマンドでいける1。\n$ curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh これで PATH の設定までやってくれる。 その後，以下のコマンドで Typst のビルドを行う。\n$ cargo install --locked typst-cli Rust ビルド環境を標準設定でインストールしているなら ~/.cargo/bin/ ディレクトリ（Linux の場合）に typst コマンドが出来ているはずである。 cargo コマンドが起動しているならこのディレクトリに PATH が通ってるはずなので，そのまま typst コマンドを実行できる。\n変数をコマンドライン引数で指定する Typst は compile 時に --input オプションでキーと値を与えることができる。 --input オプションは複数指定できる。\n$ typst compile --input key1=value1 --input key2=value2 sys-inputs.typ 設定したキー・値のペアは sys.inputs から取得することができる。\n#show raw: body =\u0026gt; { set text(font: ( ( name: \u0026#34;Inconsolata\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Sans CJK JP\u0026#34; )) body } #sys.inputs このコードに対し --input key1=value1 --input key2=value2 オプションを付けて compile すると。\n変数をコマンドライン引数で指定する などと連想配列（dictionary）の形で格納されていることが分かる。 なので，上の例であれば sys.inputs.key1 または sys.inputs.at(\u0026quot;key1\u0026quot;) で値 \u0026quot;value1\u0026quot; を取得できる（値は必ず文字列に解釈される）。 ただし sys.inputs.key3 のように --input オプションで指定していないキーを読もうとすると\n$ typst compile --input key1=value1 --input key2=value2 sys-inputs-1b.typ error: dictionary does not contain key \u0026#34;key3\u0026#34; ┌─ sys-inputs-1b.typ:12:12 │ 12 │ #sys.inputs.key3 │ ^^^^ という感じにコンパイルエラーになる。 厄介なことに VS Code の Tinymist Typst 拡張機能は，このような immediate なキーの記述に対してエラーを吐いてくれて，けっこう鬱陶しい。 回避策としては\n#let key3 = \u0026#34;\u0026#34; #if \u0026#34;key3\u0026#34; in sys.inputs { key3 = sys.inputs.at(\u0026#34;key3\u0026#34;) } #key3 などと記述すればいいようだ。 この場合 compile 処理自体は「正常終了」してしまうのがデメリットかな2。\nブックマーク ブックマークは「Typst に関するブックマーク」にてまとめています。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\nLinux の Rust ビルド環境には GCC も必要。 Ubuntu は GCC が既定で入ってないので， sudo apt build-essential で GCC を導入する。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n軽く調べてみたが Typst には exit や panic のようなプロセスを強制終了させる仕組みがない。 try-catch の例外処理もなく，当然 throw のようなものもない。たとえば処理中に（文法エラーや言語仕様上の致命的エラーではなく）ビジネスロジック上の問題があったときに，その問題をドキュメントとして出力することは可能だが，処理自体は「正常終了」してしまうため，プロセスを監視する側はエラーを感知できず出力結果を目視してはじめてエラーが起きていることが分かることになる。これはちょっと面白くない。【2025-03-07 追記】あれから少し勉強して assert 関数を使えばロジカルなエラーを検出したときに指定したメッセージを吐いてエラー終了できることが分かった。まじすんません 🙇 ただし，今回の例では assert 関数を使ってエラーハンドリングしようとしても，結局は Tinymist Typst 拡張機能がエラーを吐くので鬱陶しいことには変わりない。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    }
  ]
}
