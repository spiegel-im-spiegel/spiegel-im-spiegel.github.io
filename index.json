{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Go 1.12.7 がリリースされた",
      "section": "release",
      "description": "今回もセキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/07/go-1_12_7-is-released/",
      "published": "2019-07-09T11:23:45+00:00",
      "update": "2019-07-09T11:24:18+00:00",
      "content": " Go 1.12.7 がリリースされた。 セキュリティ・アップデートはなし。\nGo 1.12.7 and Go 1.11.12 are released - Google Group\ngo1.12.7 (released 2019/07/08) includes fixes to cgo, the compiler, and the linker. See the Go 1.12.7 milestone on our issue tracker for details. via Release History - The Go Programming Language  さらっと書いてるがマイルストーンを見ると結構ヤバげな内容なのだが。\n例によって Ubuntu の APT が提供する Go コンパイラは2世代も古くて使いものにならないため1，ダウンロードページから go1.12.7.linux-amd64.tar.gz を取ってきて任意の場所に展開する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.12.7.linux-amd64.tar.gz $ sudo mv go go1.12.7 $ sudo ln -s go1.12.7 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.12.7 linux/amd64 ほい。 ひと仕事終わり。\nアップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  提供される Go コンパイラのサポートは1世代前まで。 [return]   "
    },
    {
      "title": "7iD リスク",
      "section": "remark",
      "description": "現金決済であれキャッシュレス決済であれ，基盤となるシステムを信用するからこそ成り立つものであり，信用がなくなれば「そこで試合終了」なんだけど。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/07/7id-risk/",
      "published": "2019-07-07T07:26:46+00:00",
      "update": "2019-07-07T07:45:03+00:00",
      "content": " 7pay の件は Twitter の TL に流れてくる情報を中心に眺めていたが，2010年代も終わろうかという頃に「サイバーノーガード戦法」とかあまりに馬鹿すぎて他山の石にもならないようだ。 リンクは以下の2つだけ張っておけば十分だろう。\n 7payの不正利用についてまとめてみた - piyolog 7payを使った不正購入事案についてまとめてみた - piyolog  被害にあった方々にはお見舞い申し上げるとともに（被害額の返金だけではなく）賠償請求を行ってきちんとペナルティを支払わせることを強くお勧めする。 向こうは「謝罪して返金すりゃいいんだろ」って感じだし。 バブル崩壊以降，ホンマに「謝罪」が安くなったよなぁ。 まぁお金が絡む話に謝罪とか，それこそ一銭の価値もない。\n今回の件は脆弱性（vulnerability）というより設計上の欠陥（defect）と位置づけるのが適切だろう。 そうなると，その認証基盤である 7iD（旧 omni7）ってどうなん？ という話になる。\nで，サイトを覗いてみたら提携企業の多さに「これヤバくね？」って感じなのだが，それらの企業は今回の件をどう思っているのかね。 現金決済であれキャッシュレス決済であれ，基盤となるシステムを信用するからこそ成り立つものであり，信用がなくなれば「そこで試合終了」なんだけど。\n今後も情報を集めるとしたら，その辺を重点的に見る必要があるかもなぁ。\nそもそも「QR決済」以前に「QRコード」そのものを信用していないので1，「QRコード」が絡むサービスは極力使わないようにしているのだが，今後もしばらくその状態は続きそうである。\nあと Twitter 眺めてて気になったのだが「2段階認証（2-step authentication）」と「2要素認証（2-factor authentication）」は意味が違うし，昔は「2段階認証」と称してパスワードを2つ登録させる馬鹿なサービスもあって安全性に対する印象が悪いのだけど，みんながみんな「2段階認証」を連呼するのはその辺も踏まえての話なのかね。\nブックマーク  ひさしぶり「サイバーノーガード戦法」 | Baldanders.info  参考図書  信頼と裏切りの社会 ブルース・シュナイアー 山形 浩生 (翻訳) エヌティティ出版 2013-12-24 Book 単行本（ソフトカバー） ASIN: 4757143044, EAN: 9784757143043 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  社会における「信頼」とは。\nreviewed by Spiegel on 2019-03-23 (powered by amazon-item 0.2.1)\n  だってQRコードのあの図形を見ても何についての情報かすら分からないし（human-readable でない），汎用のスキャナを使って復号した情報を確認してから使うのならまだしも，最近のQRコードを使ったサービスはそれすら省いてる感じだし，使いたくない。 [return]   "
    },
    {
      "title": "2019-07-07 のブックマーク",
      "section": "bookmarks",
      "description": "「The Document Foundation announces LibreOffice 6.2.5」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/07/07-bookmarks/",
      "published": "2019-07-07T05:31:35+00:00",
      "update": "2019-07-07T05:34:23+00:00",
      "content": " リリース情報  The Document Foundation announces LibreOffice 6.2.5 - The Document Foundation Blog  セキュリティ＆プライバシー関連  日本旅行の内々定通知誤送信についてまとめてみた - piyolog 警察用ボディーカメラのメーカーが顔認識を「使用しない」ことを決断 | TechCrunch Japan Yubico Security Keys with a Crypto Flaw - Schneier on Security 米政府高官ら、エンドツーエンド暗号化の禁止を検討か - CNET Japan Google Releases Basic Homomorphic Encryption Tool - Schneier on Security 7payの不正利用についてまとめてみた - piyolog  7payを使った不正購入事案についてまとめてみた - piyolog 「脆弱性は見つからなかった」　セブン・ペイ緊急会見の“甘すぎる認識” (1/2) - ITmedia NEWS 【更新あり】7pay以外は大丈夫か？主要Payログイン時の安全性まとめ | TechCrunch Japan 「7pay」不正利用は全額補償へ　全チャージ＆新規登録停止も、サービス自体は継続 - ITmedia Mobile 7Payの失態で露呈した本当は怖いIDの話｜楠 正憲（国際大学GLOCOM 客員研究員） 「ガイドラインを遵守していない」--経産省、7pay問題でセキュリティ強化を事業者に要請 - CNET Japan  MIT Tech Review: 新疆の旅行客に中国官製スパイウェア、日本のバンドも監視対象に Alexaの音声記録は無期限に保存するとアマゾンが米議員に回答 | TechCrunch Japan Amazonの偽SMSに注意--フィッシングサイトへ誘導 - ZDNet Japan DNS・SNIの暗号化が海賊版サイトブロッキングを\u0026quot;ますます\u0026quot;困難にする | P2Pとかその辺のお話R  プロバイダーの業界団体がMozillaをインターネットの悪党と非難 | TechCrunch Japan  Applied Cryptography is Banned in Oregon Prisons - Schneier on Security  天文関連  MIT Tech Review: 火星で高濃度メタン検出、生命存在の可能性は？ MIT Tech Review: 2020年に火星を目指す、探査ミッション4つ NASAのDragonflyが海のある土星の月「タイタン」の探査に向かう | TechCrunch Japan LightSail 2 Mission Control | The Planetary Society  太陽帆走に挑戦中のLightSail 2が見られるダッシュボード | TechCrunch Japan  Solar eclipse in the Southern Hemisphere « CIMSS Satellite Blog すばる望遠鏡20年の観測成果｜イントロダクション  知財関連  中国で放映延期となったゲーム・オブ・スローンズ最終話、「無検閲」の海賊版が広まる | P2Pとかその辺のお話R 購入した電子書籍が“消滅”する：マイクロソフトの撤退で、再び「DRM」の問題点が浮き彫りに｜WIRED.jp \u0026quot;Stranger Things\u0026quot; Leaks Suggest Netflix 4K May Have Been Breached - TorrentFreak チェコ海賊党議員、欧州議会の副議長に選出される | P2Pとかその辺のお話R MPAA Wants U.S. Govt. to Prosecute Streaming Piracy Operations - TorrentFreak  その他  5G待ち？最近はスマホをあまり買い替えないという調査結果 | TechCrunch Japan 第41話｜OODAは先進的で、PDCAサイクルは遅れている？　と聞かれ違うんだけど…… と思ったわけ – セールスアナリティクス  Amazon.co.jp： ＯＯＤＡ　ＬＯＯＰ（ウーダループ）―次世代の最強組織に進化する意思決定スキル eBook: チェット リチャーズ, 原田 勉: Kindleストア  プライド月間もそうでないときも、プラットフォームは自社ポリシーがLGBTQ+ユーザに及ぼす影響を考えねばならない | P2Pとかその辺のお話R 経産省がスマホやチップ製造に必要な材料の対韓輸出を規制へ | TechCrunch Japan 残業に積極的な中国ネット業界の新卒社員--長時間勤務「996問題」の実態とは - ZDNet Japan Raspberry Pi財団、Webサイトを「Raspberry Pi 4クラスタ」で運用中 － Publickey ランサムウェアに屈した地方自治体がIT担当職員を解雇--フロリダ州レイク・シティ - ZDNet Japan 「なんで設計段階で考えなかったの？」と言われるのは、いつだって完成後 (1/3) - ITmedia エンタープライズ クリーンなはずの「電気バス」は、なぜ世界を席巻しないのか？ その理由を考える｜WIRED.jp 【永久保存版】Gitのあらゆるトラブルが解決する神ノウハウ集を翻訳した - LABOT 機械学習ブログ MIT Tech Review: 気候変動対策のカギ 「炭素の社会的費用」が浮き彫りにする不都合な真実 カセットプレーヤーがついにBluetoothになった | TechCrunch Japan Mozillaがニュース購読サービスを準備中 | TechCrunch Japan  "
    },
    {
      "title": "gpgpdump v0.6.0 をリリースした",
      "section": "release",
      "description": "このバージョンから OpenPGP 公開鍵サーバ上の公開鍵を直接検査できるよう HKP モードを作った。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/07/gpgpdump-v0_6_0-is-released/",
      "published": "2019-07-06T12:41:07+00:00",
      "update": "2019-07-06T12:49:03+00:00",
      "content": " OpenPGP パケットの内容を視覚化する gpgpdump の v0.6.0 をリリースした。\n Release v0.6.0 · spiegel-im-spiegel/gpgpdump · GitHub  「OpenPGP 公開鍵サーバにおける公開鍵の汚染問題」を受け， OpenPGP 公開鍵サーバ上の公開鍵を直接検査できるよう HKP アクセスモードを作った。\n$ gpgpdump hkp -h Dumps from OpenPGP key server Usage: gpgpdump hkp [flags] \u0026lt;user id\u0026gt; Flags: -h, --help help for hkp --keyserver string OpenPGP key server (default \u0026#34;keys.gnupg.net\u0026#34;) --port int port number of OpenPGP key server (default 11371) --proxy string URL of proxy server --raw output raw text from OpenPGP key server --secure enable HKP over HTTPS Global Flags: -a, --armor accepts ASCII input only --debug for debug --indent int indent size for output string -i, --int dumps multi-precision integers -j, --json output with JSON format -l, --literal dumps literal packets (tag 11) -m, --marker dumps marker packets (tag 10) -p, --private dumps private packets (tag 60-63) -t, --toml output with TOML format -u, --utc output with UTC time HKP (HTTP Keyserver Protocol) に対応する公開鍵サーバであれば公開鍵パケットをダウンロードして解析できる。 たとえば 0x491F9BDF0F7BD4AD の鍵を調べたいなら\n$ gpgpdump hkp 0x491F9BDF0F7BD4AD Public-Key Packet (tag 6) (397 bytes) Version: 4 (current) Public key creation time: 2008-10-30T02:50:43Z 49 09 21 03 Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (3072 bits) RSA public encryption exponent e (17 bits) User ID Packet (tag 13) (41 bytes) User ID: BuZz spacedout \u0026lt;satoshin@vistomail.com\u0026gt; Signature Packet (tag 2) (447 bytes) Version: 4 (current) Signiture Type: Positive certification of a User ID and Public-Key packet (0x13) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (41 bytes) Signature Creation Time (sub 2): 2008-10-30T02:50:43Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to certify other keys. Flag: This key may be used to sign data. Key Expiration Time (sub 9): 4016.9231134259257 days after (2019-10-30T01:00:00Z) Preferred Symmetric Algorithms (sub 11) (6 bytes) Symmetric Algorithm: AES with 256-bit key (sym 9) Symmetric Algorithm: AES with 192-bit key (sym 8) Symmetric Algorithm: AES with 128-bit key (sym 7) Symmetric Algorithm: CAST5 (128 bit key, as per) (sym 3) Symmetric Algorithm: TripleDES (168 bit key derived from 192) (sym 2) Symmetric Algorithm: IDEA (sym 1) Preferred Hash Algorithms (sub 21) (5 bytes) Hash Algorithm: SHA2-256 (hash 8) Hash Algorithm: SHA-1 (hash 2) Hash Algorithm: SHA2-384 (hash 9) Hash Algorithm: SHA2-512 (hash 10) Hash Algorithm: SHA2-224 (hash 11) Preferred Compression Algorithms (sub 22) (3 bytes) Compression Algorithm: ZLIB \u0026lt;RFC1950\u0026gt; (comp 2) Compression Algorithm: BZip2 (comp 3) Compression Algorithm: ZIP \u0026lt;RFC1951\u0026gt; (comp 1) Features (sub 30) (1 bytes) Flag: Modification Detection (packets 18 and 19) Key Server Preferences (sub 23) (1 bytes) Flag: No-modify Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x491f9bdf0f7bd4ad Hash left 2 bytes f5 97 RSA signature value m^d mod n (3071 bits) User ID Packet (tag 13) (41 bytes) User ID: Satoshi Nakamoto \u0026lt;satoshin@vistomail.com\u0026gt; Signature Packet (tag 2) (447 bytes) Version: 4 (current) Signiture Type: Positive certification of a User ID and Public-Key packet (0x13) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (41 bytes) Signature Creation Time (sub 2): 2008-10-30T02:50:43Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to certify other keys. Flag: This key may be used to sign data. Key Expiration Time (sub 9): 4016.9231134259257 days after Preferred Symmetric Algorithms (sub 11) (6 bytes) Symmetric Algorithm: AES with 256-bit key (sym 9) Symmetric Algorithm: AES with 192-bit key (sym 8) Symmetric Algorithm: AES with 128-bit key (sym 7) Symmetric Algorithm: CAST5 (128 bit key, as per) (sym 3) Symmetric Algorithm: TripleDES (168 bit key derived from 192) (sym 2) Symmetric Algorithm: IDEA (sym 1) Preferred Hash Algorithms (sub 21) (5 bytes) Hash Algorithm: SHA2-256 (hash 8) Hash Algorithm: SHA-1 (hash 2) Hash Algorithm: SHA2-384 (hash 9) Hash Algorithm: SHA2-512 (hash 10) Hash Algorithm: SHA2-224 (hash 11) Preferred Compression Algorithms (sub 22) (3 bytes) Compression Algorithm: ZLIB \u0026lt;RFC1950\u0026gt; (comp 2) Compression Algorithm: BZip2 (comp 3) Compression Algorithm: ZIP \u0026lt;RFC1951\u0026gt; (comp 1) Features (sub 30) (1 bytes) Flag: Modification Detection (packets 18 and 19) Key Server Preferences (sub 23) (1 bytes) Flag: No-modify Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x491f9bdf0f7bd4ad Hash left 2 bytes f5 97 RSA signature value m^d mod n (3071 bits) Public-Subkey Packet (tag 14) (397 bytes) Version: 4 (current) Public key creation time: 2008-10-30T02:50:43Z 49 09 21 03 Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (3072 bits) RSA public encryption exponent e (17 bits) Signature Packet (tag 2) (421 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (15 bytes) Signature Creation Time (sub 2): 2008-10-30T02:50:43Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to encrypt communications. Flag: This key may be used to encrypt storage. Key Expiration Time (sub 9): 4016.9231134259257 days after (2019-10-30T01:00:00Z) Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x491f9bdf0f7bd4ad Hash left 2 bytes 57 48 RSA signature value m^d mod n (3072 bits) てな感じにできる。\nちなみに --raw オプションを付けるとダウンロードしたテキストをそのまま表示する。\n$ gpgpdump hkp 0x491F9BDF0F7BD4AD --raw \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD XHTML 1.0 Strict//EN\u0026#34; \u0026#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\u0026#34; \u0026gt; \u0026lt;html xmlns=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Public Key Server -- Get \u0026#34;0x491f9bdf0f7bd4ad \u0026#34;\u0026lt;/title\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html;charset=utf-8\u0026#34; /\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; /*\u0026lt;![CDATA[*/ .uid { color: green; text-decoration: underline; } .warn { color: red; font-weight: bold; } /*]]\u0026gt;*/ \u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt;Public Key Server -- Get \u0026#34;0x491f9bdf0f7bd4ad \u0026#34;\u0026lt;/h1\u0026gt; \u0026lt;pre\u0026gt; -----BEGIN PGP PUBLIC KEY BLOCK----- Version: SKS 1.1.6 Comment: Hostname: pgpkeys.uk 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 =LSEt -----END PGP PUBLIC KEY BLOCK----- \u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; これで OpenPGP 公開鍵サーバ上の公開鍵の事前チェックがしやすくなるだろう。\nなお，今回の機能追加により既存の機能を若干変更した。 以前ならファイルを指定して調べる場合は\n$ gpgpdump sig.asc Signature Packet (tag 2) (63 bytes) Version: 3 (old) Hashed material (5 bytes) Signiture Type: Signature of a binary document (0x00) Signature creation time: 1998-11-27T09:35:42Z Key ID: 0xa79778e247b63037 Public-key Algorithm: DSA (Digital Signature Algorithm) (pub 17) Hash Algorithm: SHA-1 (hash 2) Hash left 2 bytes 27 ae DSA value r (159 bits) DSA value s (159 bits) Literal Data Packet (tag 11) (45 bytes) Literal data format: b (binary) File name: hoge Modification time of a file: 1975-04-26T19:41:04Z Literal data (35 bytes) でよかったが，このバージョンからは -f オプションでファイルを指定する必要がある。\n$ gpgpdump -f sig.asc Signature Packet (tag 2) (63 bytes) Version: 3 (old) Hashed material (5 bytes) Signiture Type: Signature of a binary document (0x00) Signature creation time: 1998-11-27T09:35:42Z Key ID: 0xa79778e247b63037 Public-key Algorithm: DSA (Digital Signature Algorithm) (pub 17) Hash Algorithm: SHA-1 (hash 2) Hash left 2 bytes 27 ae DSA value r (159 bits) DSA value s (159 bits) Literal Data Packet (tag 11) (45 bytes) Literal data format: b (binary) File name: hoge Modification time of a file: 1975-04-26T19:41:04Z Literal data (35 bytes) いや，マジすんません。\nパイプを使う場合は今までどおり\n$ cat sig.asc | gpgpdump Signature Packet (tag 2) (63 bytes) Version: 3 (old) Hashed material (5 bytes) Signiture Type: Signature of a binary document (0x00) Signature creation time: 1998-11-27T09:35:42Z Key ID: 0xa79778e247b63037 Public-key Algorithm: DSA (Digital Signature Algorithm) (pub 17) Hash Algorithm: SHA-1 (hash 2) Hash left 2 bytes 27 ae DSA value r (159 bits) DSA value s (159 bits) Literal Data Packet (tag 11) (45 bytes) Literal data format: b (binary) File name: hoge Modification time of a file: 1975-04-26T19:41:04Z Literal data (35 bytes) でオッケ。\nブックマーク  The OpenPGP HTTP Keyserver Protocol (HKP) draft-shaw-openpgp-hkp-00.txt : HKP の元ネタになっている（らしい）ドラフト案 PGP HKP Keyservers HKPプロトコル cURL as DSL — cURL as DSL 1.0 documentation  参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) eBooks Kindle版 ASIN: B015643CPE 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "OpenPGP 公開鍵サーバにおける公開鍵の汚染問題",
      "section": "remark",
      "description": "新しい OpenPGP 公開鍵サーバや Autocrypt について調査したほうがいいかしらん。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/07/openpgp-certificate-flooding/",
      "published": "2019-07-05T14:46:33+00:00",
      "update": "2019-07-06T12:41:36+00:00",
      "content": " 7pay のセキュリティ事故があまりにバカすぎるのでブログネタにしてやろうかと思っていたが，個人的にもっと重大な案件が出てきたので，先にこちらの話を書くことにする。\n PGPのSKSキーサーバーネットワークへの証明書ポイズニング--攻撃を受け開発者らが警鐘 - ZDNet Japan  かなりヤバいというか「ついにやっちゃったか」って感じの話なのだが，記事の後半に書かれている\n  キーサーバーはPGPと、PGPプロトコルにおけるユーザー認証の要となるコンポーネントだ  via PGPのSKSキーサーバーネットワークへの証明書ポイズニング--攻撃を受け開発者らが警鐘  というのはかなり言い過ぎである。\nというのも，そもそも OpenPGP の元祖である PGP は必ずしも公開鍵サーバを要件としていたわけではなく（PGP 本を読めば分かるが，当時はフロッピー運用とか当たり前の時代だった），後継である OpenPGP においてもそのコンセプトが踏襲されているからだ。 OpenPGP の信用モデル（web of trust; 信用の輪）については拙文ながら以下を参考にしてほしい。\n OpenPGP 鍵管理に関する考察 — OpenPGP の実装 | text.Baldanders.info  この信用モデルの下では\n 多くの電子署名が集まっていること 同じ鍵が永続的に使われ続けていること  が鍵の信用を高める条件となっている1。 OpenPGP 公開鍵サーバにおいて鍵や署名の追記しかできないのにはちゃんと理由があるのだ。\nとは言え OpenPGP 公開鍵サーバが鍵運用において大きなウエイトを占めているのは間違いないことで，鍵の所有者が（電子署名や鍵そのものの削除を含めて）制御できないというのはちょっと，いやだいぶ困った事態となっているのも確かである。\nたとえば APT などのパッケージ管理ツールでは，パッケージへの電子署名に OpenPGP 公開鍵を使うが，鍵のインポートの際に公開鍵サーバを利用するようだ。\nこの前紹介した Mono のインストールでも\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF といった感じで鍵サーバから公開鍵をインポートしている2。\nなので，鍵サーバに登録されている公開鍵が汚染されている（可能性がある）というのは拙いのである。\n回避策1： OpenPGP 公開鍵サーバを使わない 今回のリスクを確実に回避したいのであれば OpenPGP 公開鍵サーバを使わないのが手っ取り早い。 以下のように，いったんテキストデータとして吐き出して\n$ gpg -a --export alice@example.com -----BEGIN PGP PUBLIC KEY BLOCK----- mQENBFofiskBCADjUvPHA3PNscg0K74/Uwxj46+oLsyIy7fYIp/4C4dHejcbbPjx VFeic9wQ4aQFp3VKjYgONgQrRo/9p40Ei1+PtMAV7D6Oy6dxlV8zyCJcSf74ahpB B15GyA7v4uvTf0Py+Ujyt241ik0fXeLEuwt7p4SIbgJnQs1Fb+61wo8UcCFOLJO5 An6HjXNgNs6fFoiTad+T4PfaTbRHLfFPkoqmDUKWy40hjWl+Ui0QborXH+PUeUm9 vgHbqZzS0QRDGI7rO9AeJ6LweBkP1A2qbDLyexS/F+WUEcY0b76IQM5XH0txwnnl uCPYcQfIGWce3US1GWJhChF9s/bMGVXOEJbvABEBAAG0GUFsaWNlIDxhbGljZUBl eGFtcGxlLmNvbT6JAVQEEwEIAD4CGwMFCwkIBwIGFQgJCgsCBBYCAwECHgECF4AW IQR5/SuZ88YtLTuFC7yTs1CUdYINXQUCWh+LMAUJA8JnZwAKCRCTs1CUdYINXcKT B/4tLFaPRe289GcX91yLJ/yPS0JvvJKyZzjpNqLbKHuQHPEqGromMGlP4LcaGdFL rVZ36W3kVk+75q8JFkld0eRS22vftjz6lA9lyb3W9lU1CayF5s3IsC/Ehj55uaHc OHnp6rl7zEeIdvca6yV0gwySs3j9VPHy58zNrpN/clHoB4Zozy6vCXFMShyLc/wF brPySf/5LP/642Uro92M2lbkIvZpDhZCVG7s7Ilz3BzsTTNMPkPd5yvdGa5lHQzK OmXHaxydOYbEWBgqRGqzEIIoLbEd8KHxJVIVDfcAQCjSWRUjAUSDLpBokGsKoQfp 41NjWwjkIsfyJ2tDUeRPGYRbuQENBFofiskBCACzyYfIB+/ZwJBJXw7WMDlEKdnz L4abwVpw9rBGAWGXjaC/cu7l0svNilXyTgZNq4uKddJ6aYjs7of0SaBl20I8aj5G nbw0pG+KkoYhfpZaAZc+bcb+6SprSbAsRhrZ810XNIBUMa8XWsUDn1uv70vGBWBv keKZZ7FJ4kuQe0nTONmvQ4EwFekV+IXT5LwdgmPWF0QR7cO8jqeb6psHYauktuzZ 2ul4nMLmLLf/m4DwiCAbEdToBXqRA30KshtgBYYQwL1YkWYgknnAdhHyeu6ybJvv Y57JYzotjFOlnFhtcGITESEWv+pnj0RJUUrlVwLkJhUOKMwL+sbhw0s5+m27ABEB AAGJATwEGAEIACYCGwwWIQR5/SuZ88YtLTuFC7yTs1CUdYINXQUCWh+LhAUJA8Jn uwAKCRCTs1CUdYINXXuvB/9IKK3SLgJ6lOc2Vq73rGYsrDqfjYt5rCDXhjIaFRE7 LYmFJcGL5CHJTae438XtAixa+mu6PYG28eknjZs58Cx/bSj9uS6NiLAPCgyTAtvg ao6usECOm9Y0xf2+ZcZ9Uji+wsCAFmxRC9je0yUErVyuyQRqzNtdqytnszoTzvb9 iOP8sX/YNrjC83BtZ4Vg3fzAu8qvwbObgSbws5M8TBwIKd4WFTjOtSU6F8aioJ1g mpfd8KGljHkzC0oG8l8fZiTNYqkIMbfyfPpVwsSqsysLKofifFT+mNs79DJdqNFO HA2W4WzekYmWWmgK7J8kXHYkxUJA6VpSmNAKwUKqXbNV =hneF -----END PGP PUBLIC KEY BLOCK----- このテキストデータで運用すればいいのだ。\nたとえば私の公開鍵は本家サイトで公開しているが\n$ gpg --fetch-keys https://baldanders.info/pubkeys/spiegel.asc とすれば簡単に鍵束にインポートできる。\nメールの暗号化や署名検証については Autocrypt のような仕組みを使えば鍵サーバを経由せずに鍵のやりとりができるらしい（実はよく知らない）。 ちなみに Thunderbird の Enigmail は Autocrypt に対応している。\nAutocrypt についてはちゃんと調べていつか記事にする予定である。\n回避策2： OpenPGP 公開鍵サーバ上の公開鍵をいきなりインポートしない APT のように OpenPGP 公開鍵サーバを使った鍵運用が必須の場合でも，いきなり鍵束にインポートするのではなく，事前に公開鍵をチェックして問題がないか調べたほうがよさそうである。\n公開鍵をチェックするのであれば pgpdump か（手前味噌でナニだが）その Go 言語版である gpgpdump を使うことをオススメする。\n先ほどの\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF であれば\n$ wget -O - \u0026#34;http://keyserver.ubuntu.com/pks/lookup?search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\u0026amp;op=get\u0026#34; などとすればとすれば Armor テキストでダウンロードできる。 汚染されている公開鍵であればかなり巨大になっているだろうから，ある程度の判断はできそうである。\n【追記 2019-07-06】 gpgpdump に HKP アクセスモードを追加した gpgpdump の v0.6.0 をリリースしたが，このバージョンから HKP アクセスモードを追加した。\n gpgpdump v0.6.0 をリリースした  この機能を使えば\n$ gpgpdump hkp --keyserver keyserver.ubuntu.com --port 80 0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF Public-Key Packet (tag 6) (269 bytes) Version: 4 (current) Public key creation time: 2014-08-04T15:35:03Z 53 df a8 27 Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (2048 bits) RSA public encryption exponent e (17 bits) User ID Packet (tag 13) (58 bytes) User ID: Xamarin Public Jenkins (auto-signing) \u0026lt;releng@xamarin.com\u0026gt; Signature Packet (tag 2) (284 bytes) Version: 4 (current) Signiture Type: Generic certification of a User ID and Public-Key packet (0x10) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2014-09-04T15:26:28Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0xc90f9cb90e1fad0c Hash left 2 bytes 9c d7 RSA signature value m^d mod n (2046 bits) Signature Packet (tag 2) (284 bytes) Version: 4 (current) Signiture Type: Generic certification of a User ID and Public-Key packet (0x10) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2016-12-11T01:14:48Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x01150a655bbd8102 Hash left 2 bytes 7f cf RSA signature value m^d mod n (2048 bits) Signature Packet (tag 2) (312 bytes) Version: 4 (current) Signiture Type: Positive certification of a User ID and Public-Key packet (0x13) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (34 bytes) Signature Creation Time (sub 2): 2014-08-04T15:35:03Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to certify other keys. Flag: This key may be used to sign data. Preferred Symmetric Algorithms (sub 11) (5 bytes) Symmetric Algorithm: AES with 256-bit key (sym 9) Symmetric Algorithm: AES with 192-bit key (sym 8) Symmetric Algorithm: AES with 128-bit key (sym 7) Symmetric Algorithm: CAST5 (128 bit key, as per) (sym 3) Symmetric Algorithm: TripleDES (168 bit key derived from 192) (sym 2) Preferred Hash Algorithms (sub 21) (5 bytes) Hash Algorithm: SHA2-256 (hash 8) Hash Algorithm: SHA-1 (hash 2) Hash Algorithm: SHA2-384 (hash 9) Hash Algorithm: SHA2-512 (hash 10) Hash Algorithm: SHA2-224 (hash 11) Preferred Compression Algorithms (sub 22) (3 bytes) Compression Algorithm: ZLIB \u0026lt;RFC1950\u0026gt; (comp 2) Compression Algorithm: BZip2 (comp 3) Compression Algorithm: ZIP \u0026lt;RFC1951\u0026gt; (comp 1) Features (sub 30) (1 bytes) Flag: Modification Detection (packets 18 and 19) Key Server Preferences (sub 23) (1 bytes) Flag: No-modify Unhashed Subpacket (10 bytes) Issuer (sub 16): 0xa6a19b38d3d831ef Hash left 2 bytes 90 e8 RSA signature value m^d mod n (2047 bits) Public-Subkey Packet (tag 14) (269 bytes) Version: 4 (current) Public key creation time: 2014-08-04T15:35:03Z 53 df a8 27 Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (2048 bits) RSA public encryption exponent e (17 bits) Signature Packet (tag 2) (287 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (9 bytes) Signature Creation Time (sub 2): 2014-08-04T15:35:03Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to encrypt communications. Flag: This key may be used to encrypt storage. Unhashed Subpacket (10 bytes) Issuer (sub 16): 0xa6a19b38d3d831ef Hash left 2 bytes ac 35 RSA signature value m^d mod n (2048 bits) といった感じに OpenPGP 公開鍵サーバ上の公開鍵を直接検査できる。 これなら最悪でも gpgpdump がコケるだけなので OpenPGP の鍵束にはダメージがいかないだろう。\n新しい keys.openpgp.org を使う 今後の話になるだろうが，新しい OpenPGP 公開鍵サーバが登場したので，公開鍵の運用をそちらに移行する手もある。\n 新しい OpenPGP 鍵サーバが Launch したらしい  「まだベータ運用だし，しばらくは様子見かなぁ」と思っていたが，ちょっと前倒しして調査したほうがいいかしらん。 先ほどの Autocrypt の調査も併せて色々調べてみるつもりである。\nブックマーク  Someone Is Spamming and Breaking a Core Component of PGP’s Ecosystem - VICE SKS Keyserver Network Under Attack · GitHub dkg's blog - OpenPGP Certificate Flooding Impact of SKS keyserver poisoning on Gentoo – Gentoo Linux\n GnuPG チートシート（鍵作成から失効まで）\n  参考図書  PGP―暗号メールと電子署名 シムソン ガーフィンケル Simson Garfinkel (原著), ユニテック (翻訳) オライリー・ジャパン 1996-04 Book 単行本 ASIN: 4900900028, EAN: 9784900900028 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  良書なのだが，残念ながら内容が古すぎた。 PGP の歴史資料として読むならいいかもしれない。\nreviewed by Spiegel on 2014-10-16 (powered by amazon-item v0.2.0)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) eBooks Kindle版 ASIN: B015643CPE 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by amazon-item v0.2.0)\n  暗号化 プライバシーを救った反乱者たち スティーブン・レビー 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 Book 単行本 ASIN: 4314009071, EAN: 9784314009072 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2018-12-16 (powered by amazon-item v0.2.0)\n  そういう意味で OpenPGP 公開鍵への電子署名は厳密な「証明（certification）」というよりは小切手の裏書きのようなものを連想してもらうのがいいだろう。つまり今回の「公開鍵の汚染問題」は「裏書き spam」と考えると分かりやすい。 [return] ちなみに --keyserver とか --recv-keys とかは GnuPG のオプションである。おそらくこれらのオプションをそのまま GnuPG に引き渡しているのだろう。 [return]   "
    },
    {
      "title": "本家サイトをリニューアルしました",
      "section": "remark",
      "description": "さて，今年の目標は粗かた達成しちゃったな。後半はもう少しノンビリするか。 ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/07/site-renewal/",
      "published": "2019-07-04T13:35:58+00:00",
      "update": "2019-07-04T13:50:49+00:00",
      "content": " リニューアルした本家サイトの公開を行った。\n サイトをリニューアルしました — お知らせ | Baldanders.info  最初はできるだけ URL を変えないようにと思っていたが，そもそも本家サイトを開設した理由はあちこちのサイト・サービスに書き散らしたコンテンツを集約するためだったので，ひとつの CMS に統合するのは無理だと分かった。 分かってしまった。\nそこで無理に URL を旧版に合わせることはせず Hugo で組みやすいよう再構成することにした。 実は知らなかったのだが（もの知らずでゴメン）さくらのレンサバでは .htaccess を使ったリダイレクトに正規表現が使えるそうなので\nRedirectMatch permanent /spiegel/log2/(\\d{6}?).shtml /blog/$1/ 旧 URL の多くは自動でリダイレクトしてくれるはずである。 できなかったらゴメンペコン。\nあと Hugo セクションは本家サイトに移転させた。 内容が古すぎて手のつけようがないので本家サイトのアーカイブとして余生を送らせることにする。 Hugo の最新情報については引き続きこちらでフォローする予定なので，今後ともよろしく！\nさて，今年の目標は粗かた達成しちゃったな。 本家サイトのリニューアルはもっとかかると思っていたが goquery パッケージを使ったページデータの scraping が思ったより簡単にできてしまったので，あとは Go で変換ツールを組んで shell スクリプトでバッチ化すれば完了という（笑）\n後半はもう少しノンビリするか。 実は今年の隠れ目標は「政治的無関心を装う」なので参院選も（投票には行くが）知らん顔する予定である。 せっかく田舎に帰郷ったんだから，溢れかえる政治広告に振り回されることなく心静かに生きたいものである。\nブックマーク  rinopo/sakura-init: さくらのレンタルサーバを借りたとき最初にすること\n （不完全ながら） HTTPS 接続に対応した\n さくらのレンタルサーバ上で Hugo によるサイト管理を行う\n さくらのレンタルサーバの Git が「使える！」ようになっていた\n  参考図書  フルスクラッチから1日でCMSを作る_シェルスクリプト高速開発手法入門 改訂2版 (アスキードワンゴ) 上田 隆一, 後藤 大地 ＵＳＰ研究所 (監修) ドワンゴ 2019-07-05 (Release 2019-07-05) eBooks Kindle版 ASIN: B07TSZZPWN 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  既存の常識に凝り固まったソフトウェア・エンジニアに「痛恨の一撃」を加える快書もしくは怪書。\nreviewed by Spiegel on 2014-09-21 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "Go 1.13 と 1.14 （Go 2 へ向けて）",
      "section": "release",
      "description": "Go 1.13 のベータ版が登場したようだ。リリースノートも併せて公開されている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/06/next-steps-toward-go-2/",
      "published": "2019-06-29T07:50:58+00:00",
      "update": "2019-06-29T08:30:08+00:00",
      "content": " 8月に正式リリースされる Go 1.13 の主な機能 Go 1.13 のベータ版が登場したようだ。 リリースノートも併せて公開されている。\n Go 1.13 Beta 1 is released - Google Group Go 1.13 Release Notes - The Go Programming Language  Go 1.13 では数値のリテラル表現（2進数表現や浮動小数点数の16進数表現）など色々と重要な機能追加があるが，主なものは以下の通り。\nerrors パッケージへの機能追加 以前に紹介した golang.org/x/xerrors の機能が正式に errors パッケージに組み込まれるようだ。\n 階層化 Error パッケージ “xerrors” を試してみる  golang.org/x/xerrors の機能をほぼ踏襲しているみたいなので，既に golang.org/x/xerrors を使っている人は僅かな変更で対応できるだろう。\n エラー・ハンドリング再考  環境変数 GO111MODULE の変更 環境変数 GO111MODULE の値が auto の際の挙動が変わるようだ。 具体的には\nThe GO111MODULE environment variable continues to default to auto, but the auto setting now activates the module-aware mode of the go command whenever the current working directory contains, or is below a directory containing, a go.mod file — even if the current directory is within GOPATH/src. via Go 1.13 Release Notes  ということで GOPATH 以下にあるソースコードでも go.mod ファイルがあればモジュール対応モードで管理が可能なようだ。\n モジュール対応モードへの移行を検討する  GOPRIVATE, GOPROXY/GONOPROXY および GOSUMDB/GONOSUMDB 以前\n Go モジュールのミラーリングとインデックス化  を紹介したが，この機能を制御するために GOPRIVATE, GOPROXY/GONOPROXY および GOSUMDB/GONOSUMDB 各環境変数が追加される。\nGOPROXY の既定値は https://proxy.golang.org,direct となっている。 これを無効にする場合は direct のみをセットすればよい。\nちなみに 1.13 からは go env コマンドが拡張され\n$ go env -w GOPROXY=direct という感じに設定できるらしい。 これでシステムの環境変数を汚さずに済む（笑）\nGOSUMDB については\nThe new GOSUMDB environment variable identifies the name, and optionally the public key and server URL, of the database to consult for checksums of modules that are not yet listed in the main module's go.sum file. If GOSUMDB does not include an explicit URL, the URL is chosen by probing the GOPROXY URLs for an endpoint indicating support for the checksum database, falling back to a direct connection to the named database if it is not supported by any proxy. via Go 1.13 Release Notes  ということらしい。\nまた GOPRIVATE 環境変数を使えばミラーリングやチェックサム・データベースの対象から外すモジュールを指定できるようだ。\nThe new GOPRIVATE environment variable indicates module paths that are not publicly available. It serves as the default value for the lower-level GONOPROXY and GONOSUMDB variables, which provide finer-grained control over which modules are fetched via proxy and verified using the checksum database. via Go 1.13 Release Notes  Google はミラーリング・サービスとして proxy.golang.org を，データベース・サービスとして sum.golang.org を提供しているが，個人的には\n プライバシーに敵対的な企業のサービスだと思うとあまり利用したくない気分 via Go モジュールのミラーリングとインデックス化  なので\n$ go env -w GOPROXY=direct $ go env -w GOSUMDB=off として無効にするのがいいかな。 まぁ，8月に正式版が出てから様子を見て方針を決めればいいか。\nGo 1.14 へ向けて： try() 組み込み関数によるエラー検査 以下のブログ記事では Go 1.14 および最終的な Go 2 へ向けての方針が書かれている。\n Next steps toward Go 2 - The Go Blog  この中で注目したいのは Go 1.14 で追加されるというエラー検査機能だ。\nエラーの検査については以前\n 次期 Go 言語で導入される（かもしれない）新しいエラー・ハンドリングについて予習する  において check 式（check expression）と handle 構文（handle statement）の提案を紹介したが，最終的には try() 組み込み関数を導入することにしたようだ。\n Proposal: A built-in Go error check function,  具体的には\nfunc foo() (T1, T2, ..., Tn, error) { ... } という関数に対して\nv1, v2, ..., vn := try(foo()) のように記述できる。 try() 組み込み関数は foo() 関数の返り値の error 値を見て nil でなければ値をセットして return する。 概念的にはこんな感じ\nvar err error v1, v2, ..., vn, te := foo() if te != nil { err = te return } セットされた error は defer 構文で捕まえてまとめて処理できる。\nfunc bar() (err error) { defer func() { if err != nil { fmt.Fprintln(os.Stderr, err) } }() v1, v2, ..., vn, := try(foo()) ... return } 実際のコードで考えてみよう。 たとえばファイルのコピーを行う関数 copyFile() は\nfunc copyFile(src, dst string) error { r, err := os.Open(src) if err != nil { return err } defer r.Close() w, err := os.Create(dst) if err != nil { return err } defer w.Close() if _, err := io.Copy(w, r); err != nil { return err } return nil } try() 組み込み関数と defer 構文を使って以下のように書き直せる。\nfunc copyFile(src, dst string) (err error) { defer func() { if err != nil { err = fmt.Errorf(\u0026#34;copyFile %s %s: %v\u0026#34;, src, dst, err) } }() r := try(os.Open(src)) defer r.Close() w := try(os.Create(dst)) defer w.Close() try(io.Copy(w, r)) return nil } try() 組み込み関数を導入することにより，演算子や構文を追加することなく後方互換性を確保しつつ仕様を拡張できるというのは大きい。 来年の冬が楽しみだなぁ。\nブックマーク  try - Go の新しいエラーハンドリング (Go 1.14で導入予定) - Qiita  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "2019-06-29 のブックマーク",
      "section": "bookmarks",
      "description": "「太陽系外惑星命名キャンペーン〜IAU100 Name ExoWorlds」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/06/29-bookmarks/",
      "published": "2019-06-29T03:03:12+00:00",
      "update": "2019-06-29T03:54:59+00:00",
      "content": " バベルのインターネット  ソーシャルメディアの「政治的偏向」を政府に判断させてはならない | P2Pとかその辺のお話R  セキュリティ＆プライバシー関連  オリンピックの偽メール・類似ドメインをめぐる報道についてまとめてみた - piyolog 再起動せずにLinuxカーネルへの脆弱性パッチを適用するソフト「KernelCare」、GDEP Solutions | IT Leaders OpenSSH、サイドチャネル攻撃に対する防御策を実装 - ZDNet Japan Stanford Cyber Policy Center - Securing American Elections - June 6 2019   Election Security Is Still Hurting at Every Level | WIRED Election Security - Schneier on Security  Cloudflareが一時ダウン、多数のサイトに影響を与える | TechCrunch Japan Apple promises privacy, but iPhone apps share your data with trackers, ad companies and research firms - The Washington Post  It’s the middle of the night. Do you know who your iPhone is talking to? iPhone Apps Surreptitiously Communicated with Unknown Servers - Schneier on Security  Florida City Pays Ransomware - Schneier on Security A Plan to Stop Breaches With Dead Simple Database Encryption | WIRED  MongoDB Offers Field Level Encryption - Schneier on Security  LaLiga’s app listened in on fans to catch bars illegally streaming soccer - The Verge  Spanish Soccer League App Spies on Fans - Schneier on Security  ゲームアプリのキャンペーンを装ったフィッシングと保証金詐欺メールについてまとめてみた - piyolog Googleが「Gmail」のセキュリティ機能を強化、特徴は3点：サンドボックスや情報保護モードを提供 - ＠IT : ビジネス用の G Suite 向けの Gmail 強化らしい。個人ユーザは放置かな（笑） Cellebrite Claims It Can Unlock Any iPhone - Schneier on Security  天文関連  NASA探索車が火星にて生命存在の可能性を示すガスレベルを検知 | TechCrunch Japan MIT Tech Review: 太陽系外からやって来る彗星を「迎え撃ち」、ESAの新計画 SpaceXの大型ロケットFalcon Heavyが初の夜間打ち上げ | TechCrunch Japan MIT Tech Review: 2次元宇宙で生命は存在するか？ 米物理学者が示した意外な可能性 太陽系外惑星命名キャンペーン〜IAU100 Name ExoWorlds  IAU100年記念 太陽系外惑星命名キャンペーン、日本での名前募集始まる | 国立天文台(NAOJ) 命名する恒星・惑星について | 太陽系外惑星命名キャンペーン〜IAU100 Name ExoWorlds  プレスリリース - 冷たい輝きを放つ天王星の環 - アルマ望遠鏡  知財関連  大手ストリームリッピングサイト「Convert2MP3」が音楽業界団体と和解、サービス終了へ | P2Pとかその辺のお話R キム・カーダシアンはKIMONOを商標登録できるか？(栗原潔) - 個人 - Yahoo!ニュース ‘Copyright Troll’ Lawyer Appeals 14 Year Prison Sentence - TorrentFreak  Linux または Ubuntu に関する話題  Ubuntu 19.10 その14 - Ubuntu 19.10/20.04 LTS向け32bit版パッケージに関する公式声明・一部の32bit版パッケージの提供継続へ - kledgeb  Ubuntu 19.10 その15 - Ubuntu Studioにおける32bit版パッケージの必要性 - kledgeb   その他  新しいターミナルアプリ「Windows Terminal」が“Microsoft Store”でプレビュー公開 - 窓の杜 米国によるイランへのサイバー攻撃報道についてまとめてみた - piyolog AWS、言語やプロトコルに依存しないインターフェイス定義言語（IDL）「Smithy」をオープンソースで公開 － Publickey モーション解析、PCB設計、ARとポートフォリオを拡大した「Solid Edge」 | マイナビニュース 「GitLab 12.0」リリース、1年ぶりのメジャーアップデート。レビュー中のアプリからフィードバックを書き込める「Visual Reviews」、IPアドレス制限など新機能 － Publickey MIT Tech Review: ネット広告の根幹技術に違法の疑い、英規制当局が指摘 九州北部から近畿　最も遅い梅雨入りの発表(日直予報士 2019年06月26日) - 日本気象協会 tenki.jp MIT Tech Review: まるで昆虫、太陽光で動く超小型ワイヤレス・ドローン 任天堂、マイクロソフト、ソニーが3社連名でトランプ関税の「害」を訴える | TechCrunch Japan 日本はレガシーシステムの保守で身動きとれず--ガートナー調査 - ZDNet Japan 2019年6月27日ニュース「怖いスーパー爆弾低気圧ができる要因を世界で初めて解明した『地球シミュレータ』使い立正大など」 | SciencePortal 小型商用核融合炉を開発するボストンのスタートアップが約54億円を調達 | TechCrunch Japan 広島県庁、職員向けに「Box」導入--働き方改革とBCPの一環で - ZDNet Japan 超小型6インチでWindows 10 Proを搭載したモバイルビジネスパソコン「GPD MicroPC」発売 - ニュース ―MdN Design Interactive edition― - 窓の杜  "
    },
    {
      "title": "Firefox Preview を試してみた",
      "section": "remark",
      "description": "ここは生暖かく「今後に期待」と見守っておこう。 ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/firefox-preview-with-android/",
      "published": "2019-06-28T13:07:04+00:00",
      "update": "2019-06-28T13:10:19+00:00",
      "content": "Android に Firefox Preview なるものが登場したらしい。\n Android版「Firefox」のテスト用プレビューが公開--高速化、プライバシー強化 - ZDNet Japan Mozillaが最大2倍高速なAndroid版Firefoxをプレビュー | TechCrunch Japan  さっそく導入してみた。 こんな感じ。\n 他の普段使いのブラウザと区別するためにダークモードにしている。 設定画面はこんな感じ。\n 「トラッキング防止」は最初からオンになっているが検索エンジンを DuckDuckGo にできないという相変わらずのクソ野郎ぶりである。\nちなみにパソコン用の Firefox Quantum ではトラッキング防止機能は2段階あって\n Firefox 67 がリリースされた  レベル2に設定するとこのページのフィードバックに使っている Disqus もブロックされるくらい強力に効くのだが Firefox Preview ではそこまでに至らないないようだ。 この辺り，何とも中途半端な感じで Mozilla はユーザのプライバシーを重視していないということが今回の出来を見ても分かろうというものである（それでも Chrome よりはマシというのがにんともかんとも）。\nはっきり言って GeckoView を使ったプライバシー重視のブラウザを使いたいなら Firefox Focus を使うことを強くお勧めする1。 一般のユーザが Firefox Preview を使うメリットは（現時点では）万にひとつもない。\n文字通りの preview 版だとしても，同じブラウザエンジンを使った先行アプリがあるのだから，せめて同程度のセキュリティ・プライバシー設定が可能な程度の機能は実装してほしかった。 どうせ iOS/iPadOS 版は出ない（出せない）だろうから Android 特化でチューニングすればいい。\nまぁ，ここは生暖かく「今後に期待」と見守っておこう。 とりあえずアプリは削除だな。\n Firefox Focus の検索エンジンにも DuckDuckGo は入っていないが，追加して切り換えることはできる。 [return]   "
    },
    {
      "title": "情報の熱的死",
      "section": "remark",
      "description": "つまり「ペーパーレス」ってのは単に物理的な「紙」を排除することではなく「紙」の概念をシステムから捨て去ることにある。そうすることで初めて情報は循環を始め「生き」てくるのである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/heat-death-of-information/",
      "published": "2019-06-26T10:42:38+00:00",
      "update": "2019-06-29T11:51:58+00:00",
      "content": " 昨日，仕事帰りのバスの中でいつものようにネットサーフィン（古語）してたら\nプロのライターは、みんなエディターで原稿を書いてるのだと思ってたら、Word派が主流で、むしろテキストで送ると編集者に「チッ、老害が！」と舌打ちされながらWordにコピペされているのだと知ったのが昨夜のハイライト。\nまぁ、でも、おれはTeraPad使い続けるけどな！\n\u0026mdash; 安田理央＠新刊「日本エロ本全史」7/2発売 (@rioysd) 2019年6月22日  とかいう文章が目に入って，久しぶりに「とひょーん！」ってなった（笑） だって私，少し前のブログ記事で\n  もはや Microsoft Office は個人ユーザが使うものではないだろう。あれはお役所や企業等のレガシー環境で仕方なく使う道具である。  via スプレッド・シートでフィボナッチ数列を列挙する  って書いちまったのですよ。 出版業界こえー。 まぁ私が知ってる職場なんてごく狭い範囲なので「想像力の地平線」の向こう側のことなどまさに「想像を絶する」わけだけど。\n私が若い頃は「完成図書」という概念があって，仕様書とか設計書とか議事録とか場合によってはソースコードとかも全部「紙」に打ち出して客先に提出していた。 「完成図書」の提出を以って「納品」と見なすわけだ。 だから仕様書や設計書をワープロやスプレッドシートといった Office ツールで作成することは当たり前だった。 何故なら「紙に出力する」ことが最終目的なのだから。\nでもその「完成図書」はプロジェクトが終われば顧みられることはない。 文字通りの「紙くず」として法令で決められた期間まで死蔵され，期間が終われば廃棄される。\n昔，あるプロジェクトで要件定義のドキュメンテーションを全て Word 上でやらされたことがあるが，ドキュメントのレビューも Word の校正機能を使うんだよね。 あれは酷い作業だった。 Word の校正機能は殆ど完成した文書に対して行うなら効果的だが，要件定義の議論中に，内容が drastic に変わっていく状況で校正機能を使うと本当にカオスになってしまう。\nで，ワケワカメになった Word 文書をどうするのかというと，いったん校正機能を切って真っサラな状態にしてしまう。 はい，これで今までの作業はなかったことにされました。 何のためにレビュー情報を埋め込んだのやら。 これなら手書きで書くのと何ら変わらないではないか。\n「ペーパーレス」を実現しようとして単に「紙」をエミュレーションするだけのシステムとか，どんだけ間抜けなのか。 バージョン管理ツールや Wiki や Issue Tracker を使い慣れている身としては果てしなく無駄な作業にしか見えなかった。\nなんでこんなことを長々と書いているかというと，まさに今の私の仕事が「紙」をベースにしたワークフローだからだ。\nもうちょびっとだけ具体的に言うと，まずワークフローの起点が「紙の出力」になっている。 そして作業を進めるごとにその「紙」に手書きで書き込みして次の作業者に渡していく。 作業が完了したら，その「紙」は一定期間保管した後に廃棄（溶解処分）される，書かれている貴重な情報ごと。\n最初このワークフローを目の当たりにしたときは目が点になった。 なんでこんな非効率なことをしてるんだろう，と。 でもよく聞くと，このワークフローはシステムの「例外処理」らしい。 自動化できない部分は人力で行わざるを得ないのだが，その際の Issue Ticket が「紙」になっているわけだ。\nでも「紙」の上の情報は最終的に捨てられる1。 ワークフローの実行によって蓄積される知見は作業者の頭の中にだけ残るので共有もメイン・システムへのフィードバックもし辛い状態になっている。 つまり作業者個人の「職人技」になってしまうのだ。\nゲーム理論の命題のひとつに「囚人のジレンマ」というのがある。 内容は適当にググっていただくとして「囚人のジレンマ」は「1回きりのゲーム」と「繰り返しのあるゲーム」では戦略が異なっていて，「繰り返しのあるゲーム」では以前のゲームの結果を学習して利用したほうがゲーム全体としては（学習しない）相手より優位に立てることが分かっている。\nビジネスで言うところの「PDCA サイクル」というのはまさに「繰り返しのある『囚人のジレンマ』ゲーム」である。 そのためには「ゲーム」で得られた情報を最大限に利用しなければならない。 捨てていい情報なんかないのだ。\n「紙」の上の情報ってのは，そこから先のない「行き止まり」であり，使い道のない情報が充填されるだけの「情報の熱的死」とでも言うべき状態である（喩えが雑だなぁ）。 つまり「ペーパーレス」ってのは単に物理的な「紙」を排除することではなく「紙」の概念をシステムから捨て去ることにある。 そうすることで初めて情報は循環を始め「生き」てくるのである。\nブックマーク  プロのライターの原稿執筆環境、秀丸エディタ、GitHub、そしてHagexさん - YAMDAS現更新履歴 : 今回の記事の元ネタ  参考図書  執筆を効率化したい人のための秀丸エディタ実践入門 吉良野すた  2019-04-26 (Release 2019-04-26) eBooks Kindle版 ASIN: B07R6FTSMT  私が今も Windows ユーザだったら間違いなく買ってた。いや，実際のところ秀丸は名作だと思う。私が Vz エディタから乗り換えるきっかけになったエディタだし。\nreviewed by Spiegel on 2019-06-29 (powered by amazon-item 0.2.1)\n  紙に書かれた情報ならスキャンすればいいぢゃんと言う人もいるかもしれないが，手書きの情報は文字そのものではなく書かれた位置や筆跡やペンの色などによって「文脈」を構成しているため， OCR 等で文字情報だけを符号化しても本当に欲しい情報は取れないのだ。かといって画像を残しても，それは単に「紙」のエミュレーションでしかなく，再利用できない。 [return]   "
    }
  ]
}
