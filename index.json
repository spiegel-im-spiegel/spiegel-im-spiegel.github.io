{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Go 1.13.2 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回のはちょーっとヤバめかも。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/go-1_13_2-is-released/",
      "published": "2019-10-17T20:00:51+00:00",
      "update": "2019-10-17T20:01:39+00:00",
      "content": " Go 1.13.2 がリリースされた。\n [security] Go 1.13.2 and Go 1.12.11 are released - Google Group  今回のはちょーっとヤバめかも。\n CVE-2019-17596  HTTPS サーバを構成している場合は要注意。\nInvalid DSA public keys can cause a panic in dsa.Verify. In particular, using crypto/x509.Verify on a crafted X.509 certificate chain can lead to a panic, even if the certificates don’t chain to a trusted root. The chain can be delivered via a crypto/tls connection to a client, or to a server that accepts and verifies client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected. via Go 1.13.2 and Go 1.12.11 are released  他にも OpenPGP, OTR, SSH あたりも影響を受けるそうな。\nMoreover, an application might crash invoking crypto/x509.(*CertificateRequest).CheckSignature on an X.509 certificate request, parsing a golang.org/x/crypto/openpgp Entity, or during a golang.org/x/crypto/otr conversation. Finally, a golang.org/x/crypto/ssh client can panic due to a malformed host key, while a server could panic if either PublicKeyCallback accepts a malformed public key, or if IsUserAuthority accepts a certificate with a malformed public key. via Go 1.13.2 and Go 1.12.11 are released  更に更に slice に関して\nThe Go 1.13.2 release also includes a fix to the compiler that prevents improper access to negative slice indexes in rare cases. Affected code, in which the compiler can prove that the index is zero or negative, would have resulted in a panic in Go 1.12, but could have led to arbitrary memory read and writes in Go 1.13 and Go 1.13.1. via Go 1.13.2 and Go 1.12.11 are released  とあり， Go 1.13.x でバイナリを提供している場合はもれなくリコンパイルする必要があるかもねぇ。\nUbuntu の APT は相変わらずサポートから外れた 1.10.x しか対応していないのでダウンロードページからバイナリ（go1.13.2.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.13.2.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.13.2.linux-amd64.tar.gz $ sudo mv go go1.13.2 $ sudo ln -s go1.13.2 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.13.2 linux/amd64 アップデートは計画的に。\nブックマーク  crypto/dsa: invalid public key causes panic in dsa.Verify · Issue #34960 · golang/go · GitHub cmd/compile: access to negative slice indices improperly permitted · Issue #34802 · golang/go · GitHub  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Sudo コマンドの脆弱性に関する覚え書き",
      "section": "remark",
      "description": "いやぁ，この手のうっかりバグは他人事じゃないよね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/10/vulnerability-of-sudo/",
      "published": "2019-10-16T08:21:23+00:00",
      "update": "2019-10-16T08:21:44+00:00",
      "content": " 今回の sudo の脆弱性は Ubuntu が迅速に対応してくれたおかげであまり気にしてなかったんだけど，以下の記事を見て\n Big Sky :: sudo の特権昇格バグはなぜ起こったのか  ちょっと面白かったので覚え書きとして残しておくことにした1。 いやぁ，この手のうっかりバグは他人事じゃないよね。 上の記事の最後の\n  境界値チェックを行わないと、死ぬ  via sudo の特権昇格バグはなぜ起こったのか  は本当に教訓として心に留めておかないと。 って，もう私は職業エンジニアじゃないけど。\nCVE ID は CVE-2019-14287。 各ディストリビュータの評価は以下の通り。\n Red Hat Customer Portal  CVSSv3 Vector: CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H CVSSv3 Base Score: 7.8 CVSSv3 Severity: High      基本評価基準 評価値     攻撃元区分 ローカル   攻撃条件の複雑さ 低   必要な特権レベル 低   ユーザ関与レベル 不要   スコープ 変更なし   機密性への影響 高   完全性への影響 高   可用性への影響 高     CVE-2019-14287 | SUSE  CVSSv3 Vector: CVSS:3.0/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H CVSSv3 Base Score: 7.0 CVSSv3 Severity: High      基本評価基準 評価値     攻撃元区分 ローカル   攻撃条件の複雑さ 高   必要な特権レベル 低   ユーザ関与レベル 不要   スコープ 変更なし   機密性への影響 高   完全性への影響 高   可用性への影響 高    深刻度（Severity）が高いので早めのアップデートを。 アップデートは計画的に。\nブックマーク  Linuxの「sudo」コマンドにroot権限奪取の脆弱性。ユーザーID処理のバグで制限無効化 - Engadget 日本版 Sudoコマンドの脆弱性報告--root権限でコマンド実行可能に - ZDNet Japan USN-4154-1: Sudo vulnerability | Ubuntu security notices SUSE-SU-2019:2656-1 | SUSE\n spiegel-im-spiegel/go-cvss: Common Vulnerability Scoring System (CVSS) Version 3 : 久しぶりに使ったけど，1年近くメンテしてないな\n  参考図書  私はどのようにしてLinuxカーネルを学んだかゆたかさんの技術書 平田豊 (著), MBビジネス研究班 (著), MBビジネス研究班 (編集) まんがびと 2019-07-26 (Release 2019-07-26) Kindle版 B07VJKJY7M (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  読み物として面白かった。ペーペーの新人の頃を思い出しながら読んでたり。\nreviewed by Spiegel on 2019-10-16 (powered by PA-APIv5)\n  念の為に言うと 4294967295 という数字は16進数なら 0xffffffff である。10進数だとピンとこないよね。 [return]   "
    },
    {
      "title": "Java 13.0.1 がリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "予定通り Java 13 のマイナー・バージョンアップが行われた。脆弱性の修正がてんこ盛りである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/java-13_0_1-is-released/",
      "published": "2019-10-16T00:39:08+00:00",
      "update": "2019-10-16T00:40:01+00:00",
      "content": " 予定通り Java 13 のマイナー・バージョンアップが行われた。 緊急性が高いものはないようだが，脆弱性の修正がてんこ盛りである。\n OpenJDK Vulnerability Advisory: 2019/10/15  以下に一覧を挙げておく。 なお Java 9, 10 および 12 は既にサポート外なので注意すること。\n  CVE ID Component CVSSv3\nScore Affects ...   7 8 11 13   CVE-2019-2949 security-libs/javax.net.ssl 6.8  \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2989 core-libs/java.net 6.8 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2958 core-libs/java.lang 5.9 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2975 core-libs/javax.script 4.8  \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2977 hotspot/compiler 4.8   \u0026#8226; \u0026#8226;   CVE-2019-2999 tools/javadoc(tool) 4.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2981 xml/jaxp 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2973 xml/jaxp 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2983 client-libs/2d 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2988 client-libs/2d 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2978 core-libs/java.net 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2964 core-libs/java.util.regex 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2992 client-libs/2d 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2962 client-libs/2d 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2987 client-libs/2d 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2894 security-libs/javax.net.ssl 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2933 core-libs 3.1 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;    via OpenJDK Vulnerability Advisory: 2019/10/15  OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk13.0.1/cec27d702aa74d5a8630c65ae61e4305/9/GPL/openjdk-13.0.1_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-13.0.1_linux-x64_bin.tar.gz $ sudo ln -s jdk-13.0.1 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;13.0.1\u0026#34; 2019-10-15 OpenJDK Runtime Environment (build 13.0.1+9) OpenJDK 64-Bit Server VM (build 13.0.1+9, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\n    via Go 言語で Factory Method Pattern を構成できるか  うむうむ。 ちゃんと動くな。\nブックマーク  Oracle Critical Patch Update - October 2019\n Java 環境のリリースとサポートに関する覚え書き\n 結局 OpenJDK をインストールし直すことにした\n  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n  2019-09-22 に PlantUML Version 1.2019.11 がリリースされている。 [return]   "
    },
    {
      "title": "PA-API v5 クライアント・パッケージ v0.4.0 をリリースした",
      "section": "release",
      "description": "暇にちょっとずつコードもコメント・ドキュメントも整理していく予定である。なので長い目で見てやってください。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/pa-api-v5-package-v0_4_0-is-released/",
      "published": "2019-10-15T12:52:44+00:00",
      "update": "2019-10-15T18:09:38+00:00",
      "content": " いや， Go 言語用の PA-API v5 クライアント・パッケージなんか私以外に需要はないと思ってたのよ。 したら pull request 貰っちゃって大慌て（笑）\n貰った PR を受け入れた後，コメント・ドキュメントの整理と若干の機能追加をした v0.4.0 をリリースした。\n Release v0.4.0 · spiegel-im-spiegel/pa-api · GitHub  まずは，アイテム検索用の query 構造体を作ってもらっちゃった。 これを使って，こんな感じにアイテムの検索ができる。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; paapi5 \u0026#34;github.com/spiegel-im-spiegel/pa-api\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/pa-api/entity\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/pa-api/query\u0026#34; ) func main() { //Create client  client := paapi5.New( paapi5.WithMarketplace(paapi5.LocaleJapan), ).CreateClient( \u0026#34;mytag-20\u0026#34;, //Amazon associate tag  \u0026#34;AKIAIOSFODNN7EXAMPLE\u0026#34;, //access key for PA-API  \u0026#34;1234567890\u0026#34;, //secret key for PA-API  paapi5.WithContext(context.Background()), paapi5.WithHttpClient(http.DefaultClient), ) //Make query  q := query.NewSearchItems( client.Marketplace(), client.PartnerTag(), client.PartnerType(), ).Search(\u0026#34;数学ガール\u0026#34;, query.Keywords)  //Requet and response  body, err := client.Request(q) if err != nil { fmt.Printf(\u0026#34;%+v\\n\u0026#34;, err) return } //io.Copy(os.Stdout, bytes.NewReader(body))  //Decode JSON  res, err := entity.DecodeResponse(body) if err != nil { fmt.Printf(\u0026#34;%+v\\n\u0026#34;, err) return } fmt.Println(res.String()) } あっ，もちろんアクセス・キー等は自分のを使ってね。\nサーバ側の情報を格納する paapi5.Server インスタンスを生成しているのが以下の部分だが\npaapi5.New( paapi5.WithMarketplace(paapi5.LocaleJapan), ) 引数の関数オプションの仕様を変更した。 以下のシンボルをマーケットプレイスとしてセットできる。\n//Marketplace is enumeration of locale information type Marketplace int const ( LocaleUnknown Marketplace = iota //Unknown local  LocaleAustralia //Australia  LocaleBrazil //Brazil  LocaleCanada //Canada  LocaleFrance //France  LocaleGermany //Germany  LocaleIndia //India  LocaleItaly //Italy  LocaleJapan //Japan  LocaleMexico //Mexico  LocaleSpain //Spain  LocaleTurkey //Turkey  LocaleUnitedArabEmirates //United Arab Emirates  LocaleUnitedKingdom //United Kingdom  LocaleUnitedStates //United States ) これらのシンボルからマーケットプレイス名，サービスサーバ名，リージョン，言語の情報を取得できる。 既定値は paapi5.LocaleUnitedStates とした。\n他の人が使うとか勘定に入れてなかったので相当にやっつけコードだったが，余暇にちょっとずつコードもコメント・ドキュメントも整理していく予定である。 なので長い目で見てやってください。 あっ pull request はいつでも歓迎です。\nブックマーク  PA-API v5 への移行 Go 言語用 PA-API v5 クライアント・パッケージ  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "【改訂版】文字列連結はどれが速い？",
      "section": "golang",
      "description": "つまり []byte 配列への append() と strings.Builder への追記と strings.Join() は実質的に同じ処理と言える。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/join-strings-2/",
      "published": "2019-10-13T08:15:36+00:00",
      "update": "2019-10-15T18:09:38+00:00",
      "content": " 今回も小ネタでお送りしております。\n2015年に「文字列連結はどれが速い？」という記事を書いた。 あれから文字連結に関してどう変わったのか。 特に Go 1.10 で strings.Builder が追加されているので，その辺も含めて再検証してみる。\n今回検証するコードは以下の通り。\npackage join import ( \u0026#34;bytes\u0026#34; \u0026#34;strings\u0026#34; ) var sz8k = 8 * 1024 func JoinStringPlus(ss []string) { var str string for _, s := range ss { str += s + \u0026#34;\\n\u0026#34; } } func JoinStringJoin(ss []string) { strings.Join(ss, \u0026#34;\\n\u0026#34;) } func JoinStringByteAppend(ss []string) { b := []byte{} for _, s := range ss { b = append(b, s...) b = append(b, \u0026#34;\\n\u0026#34;...) } } func JoinStringByteAppend8K(ss []string) { b := make([]byte, 0, sz8k) for _, s := range ss { b = append(b, s...) b = append(b, \u0026#34;\\n\u0026#34;...) } } func JoinStringBuilder(ss []string) { b := \u0026amp;strings.Builder{} for _, s := range ss { b.WriteString(s) b.WriteString(\u0026#34;\\n\u0026#34;) } } func JoinStringBuilder8K(ss []string) { b := \u0026amp;strings.Builder{} b.Grow(sz8k) for _, s := range ss { b.WriteString(s) b.WriteString(\u0026#34;\\n\u0026#34;) } } func JoinStringBuffer(ss []string) { b := \u0026amp;bytes.Buffer{} for _, s := range ss { b.WriteString(s) b.WriteString(\u0026#34;\\n\u0026#34;) } } func JoinStringBuffer8K(ss []string) { b := bytes.NewBuffer(make([]byte, 0, sz8k)) for _, s := range ss { b.WriteString(s) b.WriteString(\u0026#34;\\n\u0026#34;) } } 各関数の内容は以下の通り。\n   関数名 内容     JoinStringPlus + 演算子で連結する   JoinStringJoin strings.Join 関数で連結する   JoinStringByteAppend []byte 配列に追記する   JoinStringByteAppend8K []byte 配列に追記する（8KB アロケーション）   JoinStringBuilder strings.Builder に追記する   JoinStringBuilder8K strings.Builder に追記する（8KB アロケーション）   JoinStringBuffer bytes.Buffer に追記する   JoinStringBuffer8K bytes.Buffer に追記する（8KB アロケーション）    使うメソッドによって出力する型が異なるが（string or []byte），今回は無視することにした1。\nベンチマーク用のコードは以下の通り。\npackage join import ( \u0026#34;bufio\u0026#34; \u0026#34;os\u0026#34; \u0026#34;testing\u0026#34; ) func ReadAll(path string) []string { file, err := os.Open(path) //maybe file path  if err != nil { return nil } defer file.Close() scanner := bufio.NewScanner(file) list := []string{} for scanner.Scan() { list = append(list, scanner.Text()) } if err := scanner.Err(); err != nil { return nil } return list } var content = ReadAll(\u0026#34;CollisionsForHashFunctions.txt\u0026#34;) func BenchmarkJoinStringPlus(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringPlus(content) } } func BenchmarkJoinStringJoin(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringJoin(content) } } func BenchmarkJoinStringByteAppend(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringByteAppend(content) } } func BenchmarkJoinStringByteAppend8K(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringByteAppend8K(content) } } func BenchmarkJoinStringBuilder(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringBuilder(content) } } func BenchmarkJoinStringBuilder8K(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringBuilder8K(content) } } func BenchmarkJoinStringBuffer(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringBuffer(content) } } func BenchmarkJoinStringBuffer8K(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringBuffer8K(content) } } 入力テキストは前回と同じ CollisionsForHashFunctions.txt を使用した。 8KB ほどのサイズがある。 つまりコピー先バッファに 8KB の容量があれば追加のアロケーションは発生しないことになる。\nでは，さっそく実行してみる。\n$ go test -bench JoinString -benchmem goos: linux goarch: amd64 pkg: join BenchmarkJoinStringPlus-4 19484 65256 ns/op 272160 B/op 69 allocs/op BenchmarkJoinStringJoin-4 371649 3087 ns/op 8192 B/op 1 allocs/op BenchmarkJoinStringByteAppend-4 151417 8339 ns/op 35376 B/op 12 allocs/op BenchmarkJoinStringByteAppend8K-4 502942 2544 ns/op 8192 B/op 1 allocs/op BenchmarkJoinStringBuilder-4 130408 8434 ns/op 35376 B/op 12 allocs/op BenchmarkJoinStringBuilder8K-4 418900 2781 ns/op 8192 B/op 1 allocs/op BenchmarkJoinStringBuffer-4 133052 9545 ns/op 32240 B/op 8 allocs/op BenchmarkJoinStringBuffer8K-4 351681 3526 ns/op 8192 B/op 1 allocs/op PASS ok join 12.695s 結果を表にまとめておこう。\n   関数名 実行時間 Alloc サイズ Alloc 回数     JoinStringPlus 65,256 ns 2,702,160 bytes 69   JoinStringJoin 3,087 ns 8,192 bytes 1   JoinStringByteAppend 8,339 ns 35,376 bytes 12   JoinStringByteAppend8K 2,544 ns 8192 bytes 1   JoinStringBuilder 8,434 ns 35,376 bytes 12   JoinStringBuilder8K 2,781 ns 8,192 bytes 1   JoinStringBuffer 9,545 ns 32,240 bytes 8   JoinStringBuffer8K 3,526 ns 8192 bytes 1    まず strings.Join() 関数を使った連結がめっさ速くなってアロケーション回数も1回のみになっていることにビックリした。 ソースコードを見てみたら，やっぱり strings.Join() 関数内部で strings.Builder を使っていた。\n// Join concatenates the elements of a to create a single string. The separator string // sep is placed between elements in the resulting string. func Join(a []string, sep string) string { switch len(a) { case 0: return \u0026#34;\u0026#34; case 1: return a[0] } n := len(sep) * (len(a) - 1) for i := 0; i \u0026lt; len(a); i++ { n += len(a[i]) } var b Builder b.Grow(n) b.WriteString(a[0]) for _, s := range a[1:] { b.WriteString(sep) b.WriteString(s) } return b.String() } ちなみに strings.Builder への追記処理は以下のようになっている。\n// WriteString appends the contents of s to b\u0026#39;s buffer. // It returns the length of s and a nil error. func (b *Builder) WriteString(s string) (int, error) { b.copyCheck() b.buf = append(b.buf, s...) return len(s), nil } つまり []byte 配列への append() と strings.Builder への追記と strings.Join() は実質的に同じ処理で，それぞれの前処理分だけ差が出ているということになる。\n今回の検証では\n やっぱり + 演算子による連結はダメダメ2 よほどの最適化が要求されない限り []byte 配列への append() は strings.Builder へ代替可能3 strings.Join() 関数のパフォーマンスは十分なので気軽に使ってよい 文字列連結に限るなら，もはや bytes.Buffer は有利とは言えない  といったところだろうか。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n  string 型は不変オブジェクトなので，通常は []byte 型との相互変換の際にメモリ・アロケーションとデータ・コピーが発生する。ちなみに strings.Builder の String() メソッドでは unsafe パッケージを使って無理やりキャスティングしている。 [return] リテラル文字列同士の連結はコンパイラが処理するので + 演算子で無問題。 [return] 内部で append() 関数を使っていることから分かる通り strings.Builder のインスタンスはコピーして使えないので注意が必要である（インスタンスのポインタを渡せばOK）。当然ながら goroutine-safe ではないので複数の goroutine 間で共有できない。 [return]   "
    },
    {
      "title": "2019-10-12 のブックマーク",
      "section": "bookmarks",
      "description": "「Wi-Fi Hotspot Tracking」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/10/12-bookmarks/",
      "published": "2019-10-12T11:27:01+00:00",
      "update": "2019-10-12T11:28:03+00:00",
      "content": " リリース情報  PostgreSQL 12が正式リリース。Bツリー周りの改善による性能向上、JSONパスによる抽出可能など － Publickey Thunderbird, Enigmail and OpenPGP | The Mozilla Thunderbird Blog OpenSSH 8.1 was released on 2019-10-09.  バベルのインターネット  アドビ、ベネズエラの全アカウントを無効にすると発表。米政府による対ベネズエラ制裁に従い － Publickey  セキュリティ＆プライバシー関連  Edward Snowden's Memoirs - Schneier on Security MIT Tech Review: 「トラベル・ルール」導入で暗号通貨は生まれ変わるか？ Developer of Checkm8 explains why iDevice jailbreak exploit is a game changer | Ars Technica  ‘Unpatchable’ iOS exploit may bring permanent iPhone jailbreak - 9to5Mac New Unpatchable iPhone Exploit Allows Jailbreaking - Schneier on Security  Microsoft 製品の脆弱性対策について(2019年10月) ：IPA 独立行政法人 情報処理推進機構  2019年10月マイクロソフトセキュリティ更新プログラムに関する注意喚起  Germany shuts down illegal data center in former NATO bunker  Illegal Data Center Hidden in Former NATO Bunker - Schneier on Security  利用省庁ゼロで廃止された政府共通プラットフォームのセキュリティ機能についてまとめてみた - piyolog オフィスの防犯とサイバーセキュリティの隙間が狙われる危険性 - ZDNet Japan Twitterがターゲット広告に2段階認証の電話番号とメールアドレスが使われていたと認める | TechCrunch Japan : ダメすぎる MIT Tech Review: 米司法長官、フェイスブックのE2E暗号化に「待った」 「Thunderbird」がメール暗号化・デジタル署名「OpenPGP」を標準サポートへ - 窓の杜 Cheating at Professional Poker - Schneier on Security 米国土安全保障省が脆弱システムの利用者開示をISPに義務づけへ、法改正を準備中 | TechCrunch Japan How 'free' Wi-Fi hotspots can track your location even when you aren't connected | PCWorld  Wi-Fi Hotspot Tracking - Schneier on Security  COMpfun successor Reductor infects files on the fly to compromise TLS traffic | Securelist  New Reductor Nation-State Malware Compromises TLS - Schneier on Security  セキュリティの世界からファーウェイを排除すれば、「安全性の低下」という“代償”が待ち受ける？｜WIRED.jp Oracle Critical Patch Update Pre-Release Announcement - October 2019 Researchers Say They Uncovered Uzbekistan Hacking Operations Due to Spectacularly Bad OPSEC - VICE Details on Uzbekistan Government Malware: SandCat - Schneier on Security アップルはSiriの音声録音のグレーディングのオプトインと履歴の削除をベータ化 | TechCrunch Japan  天文関連  MIT Tech Review: NASA、探査機インサイトが観測した火星の地震の「音」を公開 NASAが月面の3DデータをCGアーティストとクリエイター向けに公開 | TechCrunch Japan 誕生したばかりの星々を取り巻く木星80個分の「プレッツェル」 - sorae 宇宙へのポータルサイト すばる望遠鏡が土星の衛星を新たに20天体「発見」 | 国立天文台(NAOJ) 2019年ノーベル物理学賞を宇宙物理学の3氏が受賞 | 国立天文台(NAOJ)  2019年ノーベル物理学賞は，物理的宇宙論における数々の理論的発見に対してジェームズ・ピーブルズ教授に、 また太陽と似た恒星の周りを公転する太陽系外の惑星の発見に対してミシェル・マイヨール教授とディディエ・ケロー教授の3名が受賞した。 | お知らせ一覧 | 一般社団法人　日本物理学会 MIT Tech Review: ノーベル物理学賞、系外惑星の発見などで3氏が受賞 ノーベル物理学賞受賞「太陽系外惑星の発見」をもたらした発想の転換(秋山文野) - 個人 - Yahoo!ニュース  MIT Tech Review: 謎の「第9惑星」の正体は原始ブラックホールか？ 英天文学者が提唱 Not long ago, the center of the Milky Way exploded  ブログ: さほど遠くない昔、天の川の中心が爆発していた  次期太陽観測衛星「Solar-C_EUVST」 数値シミュレーションにより地球型惑星の形成を再現　水星・金星・地球・火星の軌道、質量と水の起源の解明への第一歩｜学校法人近畿大学のニュースリリース 新着情報: NASAの観測ロケットを用いた微小重力実験に成功～国際共同研究により宇宙ダストの生成を再現～（低温科学研究所　准教授　木村勇気） 東京大学木曽観測所トモエゴゼンによる地球接近小惑星2019 SU10の発見について  知財関連  Popular IPTV Smarters App Removed From Google Play Following Complaint - TorrentFreak イーロン・マスクが「NASAはSpaceXの知財権を自由に配布OK」と発言 | TechCrunch Japan 機械学習に使うデータセットの著作権について - Qiita  Linux または Ubuntu に関する話題  Ubuntu 19.10 その25 - deb版Chromiumの提供終了とSnap版Chromiumへの移行・将来的に既存のUbuntuでも移行 - kledgeb  その他  サイエンスクリップ「小さなロボットが命を救うか 分子ロボットがもつ無限の可能性」| SciencePortal HTCの新しいCEOはスマートフォンの革新を怠っていたことを認めた | TechCrunch Japan 2019年10月9日ニュース「リチウムイオン電池開発の旭化成・吉野彰氏ら3人にノーベル化学賞」 | SciencePortal 一般化テンパズルを解くコードをC++で書いてみた - Qiita MIT Tech Review: ディープフェイクは「ほぼポルノ」、フェイクニュースとは無関係 Big Sky :: Microsoft Word を Markdown に変換するコマンド「docx2md」を作った。 : 朗報！ 商業衛星の寿命を伸ばす初の宇宙船の打ち上げに成功 | TechCrunch Japan プログラミング問題「4クイーン方陣」 - Qiita マイクロソフトのナデラCEOが「信用を裏切ってはならない」と政府関係者に講演 | TechCrunch Japan サルでもわかるカリー化とそのメリット - Qiita : マジでよく分かる（笑） ダイソンが電気自動車の開発を断念、全固体バッテリー製造に方向転換 | TechCrunch Japan MS傘下GitHubのCEOが米移民当局との契約更新について説明--従業員は抗議 - ZDNet Japan 祝・ノーベル化学賞受賞--リチウムイオン電池関連を見直す？ - ZDNet Japan hugoでaliasを設定する - Qiita ESLint 7.0.0 の開発が始まる - Qiita Dark Traffic  ブログ: ダーク・トラフィック   "
    },
    {
      "title": "Baldanders.info 開設15周年記念に骨伝導スピーカーを買うたった！",
      "section": "remark",
      "description": "いやぁ，音楽聞いてるのに耳が自由って素晴らしいですね。こりゃあ，イヤフォンには戻れんわ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/10/15th-anniversary-of-baldandersinfo/",
      "published": "2019-10-10T12:29:18+00:00",
      "update": "2019-10-10T12:38:28+00:00",
      "content": " 2019年10月で Baldanders.info サイト開設15周年になる。\n特にネタが思い浮かばなかったので，記念品として骨伝導スピーカーを買うたった。 「自分にご褒美」というやつである（笑）\n 買うたった  実は，通勤のお供として4年前に買ったスポーツタイプのヘッドセットを愛用していたのだが\n 今のイヤフォンがボロボロなので新しいのを購入。今回はスポーツタイプを買ってみた。安かったし  流石にバッテリーがヘタり始めていて，買い替えを検討していたのだ。\n最初は au がくれたクーポン券で買った無線イヤフォンを使っていたのだが，耳栓タイプは駄目。 周囲の音が聞き取りにくくて通勤に使えないのよ。 上のヘッドセットはオープンタイプで適度に周囲の音も聞こえてよかったんだけどなぁ。\nちうわけで何かないかとネットを漁ってたら「ネックスピーカー」と「骨伝導スピーカー」が目に入った。\nネックスピーカーはかなり魅力的だったんだけど，公共交通機関で移動している身としては音漏れが気になって躊躇するところだ（どなたか使い心地を教えてください）。\n骨伝導スピーカーはまだお値段高めなんじゃないかと思っていたが，どうもピンキリみたいで，3千円くらいのものから2万円くらいまで結構幅があるようだ。 今回は Amazon 価格で5千円弱の廉価版を選んだ。 こういうのって消耗品だしね（バッテリーがヘタれれば試合終了）。\n使い心地はめちゃくちゃいい！ スピーカー部分をこめかみに当てるので窮屈になるかと思ってたが，全くそんなこともない。 いやぁ，音楽聞いてるのに耳が自由って素晴らしいですね。 こりゃあ，イヤフォンには戻れんわ。\nというわけで，確かに「自分にご褒美」いただきました。\nそうそう。 これからも「書きたくないときには書かない」「他人の評価など気にしない」というスタンスで飽きるまでは続けていく所存であります。\nブックマーク  Baldanders.info 正式オープン Baldanders.info 10周年だった！ 20周年記念！  参考  【2019最新版 Bluetooth5.0】Bluetooth イヤホン 骨伝導 ヘッドホン 高音質 自動ペアリング スポーツ IP56防水 耳が疲れない 超軽量 完全ワイヤレス イヤホン マイク内蔵 Siri対応 ノイズキャンセル ハンズフリー通話 ブルートゥース ヘッドホン iPhone\u0026Android適用 (ブラック) Bearoam エレクトロニクス B07QJB7R13 (ASIN), 0694090550660 (EAN), 694090550660 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  廉価版だし音質には目を瞑るとして（特に低音がねー），骨伝導スピーカー最高！ もうイヤフォンには戻れない。\nreviewed by Spiegel on 2019-10-10 (powered by PA-APIv5)\n  TEMPEST 石原夏織 (メインアーティスト) ポニーキャニオン 2019-07-17 (Release 2019-07-17) MP3 ダウンロード B07TVGXD2P (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  アニメ版「魔王様、リトライ！」のOP曲。\nreviewed by Spiegel on 2019-10-10 (powered by PA-APIv5)\n "
    },
    {
      "title": "バベルのインターネットと FOSS",
      "section": "remark",
      "description": "老人のひとりである私から言わせてもらうなら，私達はあの “9.11” 以後に起こったことを忘れるべきではない，ということだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/10/the-internet-of-babel/",
      "published": "2019-10-09T02:39:52+00:00",
      "update": "2019-10-09T02:40:08+00:00",
      "content": " 月末月初のドタバタがようやく終わって少し落ち着いてネットを見回してたら，いろいろ見落としていたようだ。 そのうちのひとつ。\n 我々はフリーソフトウェアの定義を再考すべきなのだろうか？ - YAMDAS現更新履歴  最近 Facebook とかの TL でもこの手の話題が散見され気にはなっていたのだが，その辺の状況をこの記事は上手くまとめている。 分断されるインターネットでは必然となる議論なのだろう。\nこのブログではちょいちょい紹介しているが，昔読んだ本の一節をもう一度紹介しよう。\n  理学は、真理の探究であり、工学は善の実現である。そして、藝術は美の表現である－－これで所謂「真美善」が揃う  via はやぶさ―不死身の探査機と宇宙研の物語  では工学が実現すべき「善」とは何なのか。 「孤独な正義」は「善」と言えるのか。\n善と悪を定義するのは難しいというか不可能だと思うのだが，両者の関係をいくつか記述することはできるだろう。 そのひとつは「善も悪もお互いのルールの外側にいる」ということだ。 というか，ルールの外側にいるからこそ善悪の色分けが可能なんだろうけど。\nルールの外側にいる相手をルールで規制することには殆ど意味がない。 規制や罰則を強化したところでルールの内側にいる人たちがとばっちりを食うだけで，ルールの外側にいる相手にとってはむしろ自身の大義名分を強化することになる。\nことほど左様にルール・メイキングというのは難しいし，ルールで全てをコントロールできるわけでもない。\n故にルールの外側にいる「善」または「悪」から守るための「セキュリティ」が重要だし，その中でも「教育」が特に重要だと私は思っている。 何故なら相手を自分たちのルールに包摂できるのは「教育」しかないからだ。\n最初に挙げた記事にある懸念はもっともだけれど，昨今の醜聞で「無邪気な老人」達が退場しつつある今こそ議論の好機であるとも言える。\n老人のひとりである私から言わせてもらうなら，私達はあの “9.11” 以後に起こったことを忘れるべきではない，ということだ。\nあとは，お若い方同士で（笑）\nブックマーク  孵卵器の中のインターネット 今こそ「グリゴリの捕縛」を読め！ または遍在する草薙素子 エンジニアこそ「狂狷の徒」たれ 日本版「グレート・ファイアウォール」に関するブックマーク集 GDPR で加速するインターネット分断 絶対インターネットになんか負けたりしない!!  参考図書  イノベーション 悪意なき嘘 (双書 時代のカルテ) 名和 小太郎 (著) 岩波書店 2007-01-11 単行本 4000280872 (ASIN), 9784000280877 (EAN), 4000280872 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「両用技術とはどのようなものか。その核心には「矛と楯の論理」がある」（まえがき「予断・診断・独断 そんなばかな」より）\nreviewed by Spiegel on 2018-12-31 (powered by PA-APIv5)\n  グリゴリの捕縛 白田 秀彰  2001-11-26 (Release 2014-09-17) 青空文庫 4307 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30 (powered by aozorahack)\n  セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n  はやぶさ―不死身の探査機と宇宙研の物語 (幻冬舎新書) 吉田 武 (著) 幻冬舎 2006-11-01 新書 4344980158 (ASIN), 9784344980150 (EAN), 4344980158 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  宇宙研（ISAS）の歴史とともに日本の宇宙開発について解説する。\nreviewed by Spiegel on 2018-12-31 (powered by PA-APIv5)\n  Another colony TRUE (メインアーティスト) Lantis 2018-11-07 (Release 2018-11-07) MP3 ダウンロード B07K33158N (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  アニメ「転生したらスライムだった件」のED曲。\nreviewed by Spiegel on 2019-10-09 (powered by PA-APIv5)\n "
    },
    {
      "title": "2019-10-06 のブックマーク",
      "section": "bookmarks",
      "description": "「東京大学木曽観測所トモエゴゼンの観測運用の開始について」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/10/06-bookmarks/",
      "published": "2019-10-06T07:56:21+00:00",
      "update": "2019-10-06T07:57:39+00:00",
      "content": " リリース情報  スクリプト言語「Ruby」に4件の脆弱性 ～v2.4.8/v2.6.5が公開（20:30追記） - 窓の杜  セキュリティ＆プライバシー関連  iPhoneなどの旧モデルに「修正不能」な脆弱性、それがセキュリティ研究者にとっては“福音”となる｜WIRED.jp スマートロックは電動ドリルでこじ開けることができるのか - GIGAZINE 大きな変態スパムメールについてまとめてみた - piyolog Adobeのオープンリダイレクタを悪用したフィッシング詐欺についてまとめてみた - piyolog ASCII.jp：ヴイエムウェアが狙うネットワークとセキュリティ領域の刷新 (1/2) NSA on the Future of National Cybersecurity - Schneier on Security Supply-Chain Security and Trust - Schneier on Security  ブログ: サプライチェーンのセキュリティと信頼  増税に伴うシステムトラブルをまとめてみた - piyolog FONルーター「FON2601E」にオープンリゾルバの脆弱性、意図せずDDoS攻撃に加担してしまう可能性も - INTERNET Watch : FON ってまだ生きてたんだねぇ ふくおかFG、次世代バンキングシステムをGCPで構築へ--デジタル技術で銀行を“再定義” - ZDNet Japan PDFファイルを開くだけで暗号化された内容が流出する脆弱性「PDFex」が発見される - GIGAZINE Measuring the Security of IoT Devices - Schneier on Security Tracking by Smart TVs - Schneier on Security GoogleがマップとYouTube、そしてアシスタント向けにプライバシー強化機能を追加 | TechCrunch Japan マイクロソフトは2020年の大統領選候補を狙ったイランのハッカーの攻撃を発見 | TechCrunch Japan  天文関連  APOD: 2019 September 28 - An Analemma of the Sun エイリアンは｢最近｣来ていないだけかも…新研究で指摘 | BUSINESS INSIDER JAPAN Ishizawa, Sasaki \u0026amp; Hosono, ApJ (2019) – Sasaki Takanori Online : 「天王星衛星の形成に関する論文が ApJ に accept されました」とのこと MINERVA-II2（ローバ２）分離運用 | トピックス | JAXA はやぶさ２プロジェクト : 2019-10-03 より分離運用開始 APOD: 2019 October 1 - Black Hole Safety Video NASAの惑星探査用の新望遠鏡は気球に乗って大気圏の外縁に浮かぶ | TechCrunch Japan 東京大学木曽観測所トモエゴゼンの観測運用の開始について 初期宇宙で見つかった宇宙網 －銀河とブラックホールに恵みをもたらす宇宙の清流－ | 国立天文台(NAOJ) 大型低温重力波望遠鏡KAGRAが完成、重力波望遠鏡3者による研究協定を締結 | 国立天文台(NAOJ)  知財関連  Netflix has Dwarfed BitTorrent Traffic, South African ISPs say - TorrentFreak DMCA Notice Confirms Trump Tweet Was Taken Down By Warner Music - TorrentFreak Gaming Giants Highlight the Latest Piracy Threats - TorrentFreak  Linux または Ubuntu に関する話題  Ubuntu 19.10 その24 - Linux kernel 5.3の採用・Python 3.7.3/OpenJDK 11などツールチェインのアップデート - kledgeb Ubuntu 19.10 その24 - Linux kernel 5.3の採用・Python 3.7.3/OpenJDK 11などツールチェインのアップデート - kledgeb Ubuntu 19.10 その23 - Ubuntu 19.10 β版がリリースされました・ディスクイメージのダウンロード - kledgeb Linuxにカーネル「ロックダウン」セキュリティ機能追加へ - ZDNet Japan  その他  Facebook Takes Down TorrentFreak Post Over 'Infringing' Meme - TorrentFreak Chrome 78ベータに「Native File System API」搭載。Webブラウザからローカルファイルを読み書き可能に － Publickey : えー もう「公開鍵送ってください」というやり取りは不要だった - Qiita Looking back at the Snowden revelations – A Few Thoughts on Cryptographic Engineering  ブログ: スノーデンの暴露を振り返る  ブログ: リークされたザッカーバーグの音声は、エリザベス・ウォーレンがビッグテックを解体しようとするなら、米国政府を訴えるというFacebookの計画を明らかにする : 通用するかどうかはともかく，そうすること自体は企業としては間違ってないよな Google Cloud、コンテナネイティブなロードバランス機能を正式版に。Kuberntesとの統合など強化 － Publickey マイクロソフトが方針転換。Windows 7の2023年までの延長サポート、あらゆる企業が購入可能に － Publickey : いや，もう Windows 捨てたから Go言語からシェルスクリプトが実行できない(シェバングの必要性) - Qiita : 考えてみれば当たり前なんだが，とっさに思いつかなかったりするよねぇ（笑） DNAにSQL実行--\u0026quot;DNAストレージ\u0026quot;でRDBの限界が突破される日 - ZDNet Japan Facebookでニュースを読む人は多いが内容を信用する人は少ない | TechCrunch Japan スーパーメジャー「シェル」が真剣議論している「温暖化対策」経営とは：岩瀬昇 | エネルギーの部屋 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト PayPalがFacebook率いるLibra Associationから撤退する最初の企業に | TechCrunch Japan GitHub - ikunya/libo-writer: LibreOffice Writerで書籍制作　〜（紙）書籍と電子書籍両対応版〜  "
    },
    {
      "title": "Go 言語用 PA-API v5 クライアント・パッケージ",
      "section": "release",
      "description": "本パッケージは Amazon Product Advertising API v5 へアクセスできる Go 言語用クライアント・パッケージだ。 API を通じて Ammazon で取り扱っている商品の情報を取得できる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/pa-api-v5/",
      "published": "2019-10-06T06:46:03+00:00",
      "update": "2019-10-15T12:53:38+00:00",
      "content": "  spiegel-im-spiegel/pa-api: APIs for Amazon Product Advertising API v5 by Golang  本パッケージは Amazon Product Advertising API v5 へアクセスできる Go 言語用クライアント・パッケージだ。 API を通じて Amazon で取り扱っている商品の情報を取得できる。\nなお spiegel-im-spiegel/pa-api パッケージは Go 1.13 以上を要求する。 ご注意を。\n  \nインポート import \u0026#34;github.com/spiegel-im-spiegel/pa-api\u0026#34; 簡単な使い方 PA-API アクセス用のパラメータ 使い方の前に，この記事で使用する PA-API アクセス用のパラメータを以下に例示しておく。\n   パラメータ名 値     マーケットプレイス www.amazon.co.jp   アソシエイト・タグ mytag-20   アクセス・キー AKIAIOSFODNN7EXAMPLE   シークレット・キー 1234567890    もちろん実際には使えないのでご安心を（笑）\nサンプル・コード 以下に簡単なコード例を示す。\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; paapi5 \u0026#34;github.com/spiegel-im-spiegel/pa-api\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/pa-api/query\u0026#34; ) func main() { //Create client  client := paapi5.New( paapi5.WithMarketplace(paapi5.LocaleJapan), ).CreateClient( \u0026#34;mytag-20\u0026#34;, \u0026#34;AKIAIOSFODNN7EXAMPLE\u0026#34;, \u0026#34;1234567890\u0026#34;, paapi5.WithContext(context.Background()), paapi5.WithHttpClient(http.DefaultClient), ) //Make query  q := query.NewGetItems(client.Marketplace(), client.PartnerTag(), client.PartnerType()) q.ASINs([]string{\u0026#34;B07YCM5K55\u0026#34;}).EnableImages(true).EnableParentASIN(true) //Requet and response  body, err := client.Request(q) if err != nil { fmt.Printf(\u0026#34;%+v\\n\u0026#34;, err) return } io.Copy(os.Stdout, bytes.NewReader(body)) } このコードの実行結果はこんな感じ。\n$ go run sample.go | jq . { \u0026#34;ItemsResult\u0026#34;: { \u0026#34;Items\u0026#34;: [ { \u0026#34;ASIN\u0026#34;: \u0026#34;B07YCM5K55\u0026#34;, \u0026#34;DetailPageURL\u0026#34;: \u0026#34;https://www.amazon.co.jp/dp/B07YCM5K55?tag=mytag-20\u0026amp;linkCode=ogi\u0026amp;th=1\u0026amp;psc=1\u0026#34;, \u0026#34;Images\u0026#34;: { \u0026#34;Primary\u0026#34;: { \u0026#34;Large\u0026#34;: { \u0026#34;Height\u0026#34;: 500, \u0026#34;URL\u0026#34;: \u0026#34;https://m.media-amazon.com/images/I/51Ef9EF+HaL.jpg\u0026#34;, \u0026#34;Width\u0026#34;: 352 }, \u0026#34;Medium\u0026#34;: { \u0026#34;Height\u0026#34;: 160, \u0026#34;URL\u0026#34;: \u0026#34;https://m.media-amazon.com/images/I/51Ef9EF+HaL._SL160_.jpg\u0026#34;, \u0026#34;Width\u0026#34;: 113 }, \u0026#34;Small\u0026#34;: { \u0026#34;Height\u0026#34;: 75, \u0026#34;URL\u0026#34;: \u0026#34;https://m.media-amazon.com/images/I/51Ef9EF+HaL._SL75_.jpg\u0026#34;, \u0026#34;Width\u0026#34;: 53 } } }, \u0026#34;ItemInfo\u0026#34;: { \u0026#34;ByLineInfo\u0026#34;: { \u0026#34;Contributors\u0026#34;: [ { \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34;, \u0026#34;Name\u0026#34;: \u0026#34;宮成楽\u0026#34;, \u0026#34;Role\u0026#34;: \u0026#34;著\u0026#34; } ], \u0026#34;Manufacturer\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;竹書房\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Manufacturer\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; } }, \u0026#34;Classifications\u0026#34;: { \u0026#34;Binding\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;Kindle版\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Binding\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; }, \u0026#34;ProductGroup\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;Digital Ebook Purchas\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;ProductGroup\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; } }, \u0026#34;ContentInfo\u0026#34;: { \u0026#34;Languages\u0026#34;: { \u0026#34;DisplayValues\u0026#34;: [ { \u0026#34;DisplayValue\u0026#34;: \u0026#34;日本語\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;発行済み\u0026#34; } ], \u0026#34;Label\u0026#34;: \u0026#34;Language\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; }, \u0026#34;PagesCount\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: 116, \u0026#34;Label\u0026#34;: \u0026#34;NumberOfPages\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; }, \u0026#34;PublicationDate\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;2019-09-27T00:00:00.000Z\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;PublicationDate\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; } }, \u0026#34;ProductInfo\u0026#34;: { \u0026#34;IsAdultProduct\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: false, \u0026#34;Label\u0026#34;: \u0026#34;IsAdultProduct\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; }, \u0026#34;ReleaseDate\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;2019-09-27T00:00:00.000Z\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;ReleaseDate\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; } }, \u0026#34;TechnicalInfo\u0026#34;: { \u0026#34;Formats\u0026#34;: { \u0026#34;DisplayValues\u0026#34;: [ \u0026#34;Kindle本\u0026#34; ], \u0026#34;Label\u0026#34;: \u0026#34;Format\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; } }, \u0026#34;Title\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;晴れのちシンデレラ　（１２） (バンブーコミックス MOMOセレクション)\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; } } } ] } } リクエスト実行インスタンスの生成 上のコード例の\nclient := paapi5.New( paapi5.WithMarketplace(paapi5.LocaleJapan), ).CreateClient( \u0026#34;mytag-20\u0026#34;, \u0026#34;AKIAIOSFODNN7EXAMPLE\u0026#34;, \u0026#34;1234567890\u0026#34;, paapi5.WithContext(context.Background()), paapi5.WithHttpClient(http.DefaultClient), ) がリクエストを実行する paapi5.Client 型のインスタンスを生成している部分である。 ちなみに\nclient := paapi5.DefaultClient(\u0026#34;mytag-20\u0026#34;, \u0026#34;AKIAIOSFODNN7EXAMPLE\u0026#34;, \u0026#34;1234567890\u0026#34;) //Create default client と既定値で簡単に paapi5.Client インスタンスを生成することもできるが，マーケットプレイスが米国（www.amazon.com）になるのでご注意を。\nクエリの生成とリクエストの実行 リクエストを実行する関数\nfunc (c *Client) Request(q Query) ([]byte, error) { ... } の引数 paapi5.Query は interface 型で以下のように定義している。\ntype Query interface { Operation() Operation Payload() ([]byte, error) } paapi5.Query.Operation() 関数の返り値の paapi5.Operation 型は以下のように定義している。\ntype Operation int const ( NullOperation Operation = iota GetVariations GetItems SearchItems ) paapi5.Query.Payload() 関数はリクエストのペイロードにセットする JSON データを返す。 JSON データの内容は，例えばこんな感じ。\n{ \u0026#34;ItemIds\u0026#34;: [ \u0026#34;B07YCM5K55\u0026#34; ], \u0026#34;Resources\u0026#34;: [ \u0026#34;Images.Primary.Small\u0026#34;, \u0026#34;Images.Primary.Medium\u0026#34;, \u0026#34;Images.Primary.Large\u0026#34;, \u0026#34;ItemInfo.ByLineInfo\u0026#34;, \u0026#34;ItemInfo.ContentInfo\u0026#34;, \u0026#34;ItemInfo.Classifications\u0026#34;, \u0026#34;ItemInfo.ExternalIds\u0026#34;, \u0026#34;ItemInfo.ProductInfo\u0026#34;, \u0026#34;ItemInfo.Title\u0026#34; ], \u0026#34;PartnerTag\u0026#34;: \u0026#34;mytag-20\u0026#34;, \u0026#34;PartnerType\u0026#34;: \u0026#34;Associates\u0026#34;, \u0026#34;Marketplace\u0026#34;: \u0026#34;www.amazon.co.jp\u0026#34;, \u0026#34;Operation\u0026#34;: \u0026#34;GetItems\u0026#34; } 適切な paapi5.Operation 値と JSON データを出力できるのであれば，利用者側でクエリ・オブジェクトを自由に設計できる。\n余談だが... ある型が特定の interface 型に適合するかコンパイル時点でチェックするには以下の記述を加えるとよい。\nvar _ paapi5.Query = (*CustomQuery)(nil) クエリの実例とレスポンスの取り込み例 spiegel-im-spiegel/pa-api パッケージではクエリ用のサンプルとして paapi5.query サブパッケージを用意している。 最初のコード例の\nq := query.NewGetItems(client.Marketplace(), client.PartnerTag(), client.PartnerType()) q.ASINs([]string{\u0026#34;B07YCM5K55\u0026#34;}).EnableImages(true).EnableParentASIN(true) の部分がそれである。 また paapi5.Client.Request() 関数の出力結果を構造体に落とし込むための paapi5.entity サブパッケージも用意した。 どちらもそのままではあまり使い勝手がいいとは言えないが，コード例として自由に利用していただいて構わない。\nなお spiegel-im-spiegel/pa-api パッケージは Apache License, Version 2.0 でライセンスしている。\nブックマーク  Product Advertising API 5.0 Documentation PA-API V5 への移行  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n "
    }
  ]
}
