{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "2019-06-16 のブックマーク",
      "section": "bookmarks",
      "description": "「惑星協会、宇宙ヨットLightSail 2を24日打上げへ。周回軌道上で管制制御に挑戦」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/06/16-bookmarks/",
      "published": "2019-06-16T11:05:36+00:00",
      "update": "2019-06-16T11:07:34+00:00",
      "content": " リリース情報  「Firefox」v67.0.2が公開 ～「macOS 10.15 Catalina」でクラッシュする問題などを修正（6月13日追記） - 窓の杜 無料メールソフト「Thunderbird」v60.7.1が公開 ～4件の脆弱性を修正 - 窓の杜  バベルのインターネット  セールスフォース・ドットコム、同社のSaaSを用いた銃や火器の販売を全世界的に禁止 － Publickey デイヴィッド・ケイ著『言論警察』：「誰が・何を発言してよいか」の判断をテクノロジー企業に委ねてしまってよいのか – P2Pとかその辺のお話R MIT Tech Review: ロシア当局がVPNプロバイダーに接続要請、9社が「ブラリ入り」か : ユーザから見れば Kaspersky こそ「ブラリ入り」 MIT Tech Review: GAFAは分割より共有を——オックスフォード大教授が主張する理由 MIT Tech Review: 自社CEOのフェイク映像も削除せず フェイスブックが新方針  セキュリティ＆プライバシー関連  クレジットカードの偽決済画面が稼働していたサーバーについて調べてみた - piyolog グーグル、大規模クラウド障害に関する詳細な情報を明らかに - ZDNet Japan 「SHA-1証明書」の無効化を表明、Apple - ITmedia エンタープライズ Intel製品に複数の脆弱性、セキュリティアドバイザリが公開 - 窓の杜 GoogleがAndroidのセキュリティキー技術をiPhoneやiPadに開放 | TechCrunch Japan グーグル研究者が「Windows」で使われる「SymCrypt」のバグについて情報公開 - ZDNet Japan The Predator in Your Pocket: A Multidisciplinary Assessment of the Stalkerware Application Industry - The Citizen Lab  A deep dive into stalkerware's creepy marketing, illegal privacy invasions, and terrible security / Boing Boing Report on the Stalkerware Industry - Schneier on Security  リスト型攻撃を通じたイオンカードの不正利用についてまとめてみた - piyolog YubicoがFIPS対応セキュリティキーのリコールを発表 - Engadget 日本版  天文関連  IAU戦略計画 2020–2030  惑星協会、宇宙ヨットLightSail 2を24日打上げへ。周回軌道上で管制制御に挑戦 - Engadget 日本版 APOD: 2019 May 16 - Dark Skies: Turn on the Night NASA探査機OSIRIX-RExが小惑星ベンヌで接近軌道の宇宙新記録を達成 | TechCrunch Japan  知財関連  オープンソースのCockroachDBも大手クラウドに反発してライセンスを変更、商用サービスでの利用を制限。ただし3年後にオープンソースに戻る期限付き － Publickey ^ 'Copyright Troll' Lawyer Sentenced to 14 Years in Prison - TorrentFreak  Linux または Ubuntu に関する話題  Ubuntu 19.10 その10 - deb版ChromiumからSnap版Chromiumへの移行・移行テストの呼び掛け - kledgeb 2019年6月14日号　Ubuntuにおける「バージョンによる脆弱性判定」の正しいアプローチ，WSL2のプレビュー開始：Ubuntu Weekly Topics｜gihyo.jp … 技術評論社  その他  MIT Tech Review: 1泊3万5000ドル、NASAがISSの商業利用受け入れへ MIT Tech Review: トランプ支持者にも変化あり 米国の「保守」が気候変動を認め始めた理由 spf13/cobraで作ったCLIツールのbash/zsh補完スクリプトを自動生成する - Qiita さまざまな個人化用機械学習モデル構築APIがAWSから提供開始 | TechCrunch Japan MIT Tech Review: 世界最大規模のCO2大気回収プラント計画が抱える根本的な矛盾 富士フイルム、一度は販売終了した「黒白フィルム」を立体的な階調再現などの高性能にして再販 - ニュース ―MdN Design Interactive edition― - 窓の杜 モジラがFirefoxの新ロゴを発表、ブラウザーだけではないことを強調 | TechCrunch Japan Google検索に表示されない古いサイトを見つける方法 | ライフハッカー［日本版］ \u0026gt;森口 博子「GUNDAM SONG COVERS　LPサイズ盤」特設サイト ER図を書くのに疲れたら - Qiita 機械学習アルゴリズムではなく顧客体験からスタート--アマゾンではいかにAIが利用されているか - ZDNet Japan Visual Studio CodeでJava開発がしやすくなるJDKインストーラー | TechCrunch Japan  "
    },
    {
      "title": "Satellite Constellations : 「光害」問題は新たなステージへ",
      "section": "remark",
      "description": "各団体の声明には激しく同意するところではあるが，一方で「これが宇宙時代のさきがけか」と感慨深い。今後の展開に注目しておこう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/starlink-satellite-constellations/",
      "published": "2019-06-15T04:43:24+00:00",
      "update": "2019-06-15T05:52:00+00:00",
      "content": " まぁ，前々から ISS を始めとする低軌道人工衛星が撒き散らす「光害」を苦々しく思う人はいたわけよ（せっかく撮った天体写真に人工衛星の光跡が写り込んでいた日にはもう...）。 でも，人工衛星の軌道は予測可能でさほど実害があるわけでもなかったため愚痴程度で済んでいたのだけど，流石に今回は規模が違う。\nSatellite Constellations 2019年5月に SpaceX 社によって “Starlink” と呼ばれる60基の低軌道人工衛星群（satellite constellations）が打ち上げられた。\n MIT Tech Review: スペースX、インターネット衛星60基を打ち上げ  人工衛星群を使った通信網の構想は昔から考えられ実際に稼働しているものもあるが，今回は夥しい数の人工衛星（SpaceX 社は最終的に1万2千基もの人工衛星を打ち上げる予定らしい）を低軌道（高度2千キロメートル未満）に打ち上げて網を構成する点が画期的である。 また SpaceX 社以外にも同様の低軌道人工衛星通信網の構築を目論んでいる企業があるらしい。\n大抵の人工衛星の表面は反射率の高い金属製で太陽電池パネルも搭載されており，これらに太陽光が反射して明るく光ることがある。 これは俗に「人工衛星フレア」と呼ばれており，人工衛星オタクの観測対象となっている。 また通信衛星ということで，最終的にはたくさんの人工衛星によって常時空から通信電波が降り注ぐことになる1。\nというわけで，打ち上げ直後から批判が起きている。\n Lights in the sky from Elon Musk's new satellite network have stargazers worried SpaceXのインターネット衛星群「夜空に明るすぎる」と苦情。マスクCEOは対応を約束 - Engadget 日本版 MIT Tech Review: 「明るすぎる」スペースXの人工衛星群、天文学者から批判  そして遂に IAU (International Astronomical Union; 国際天文学連合) から声明が出された。\n IAU Statement on Satellite Constellations | IAU  The scientific concerns are twofold. Firstly, the surfaces of these satellites are often made of highly reflective metal, and reflections from the Sun in the hours after sunset and before sunrise make them appear as slow-moving dots in the night sky. Although most of these reflections may be so faint that they are hard to pick out with the naked eye, they can be detrimental to the sensitive capabilities of large ground-based astronomical telescopes, including the extreme wide-angle survey telescopes currently under construction. Secondly, despite notable efforts to avoid interfering with radio astronomy frequencies, aggregate radio signals emitted from the satellite constellations can still threaten astronomical observations at radio wavelengths. Recent advances in radio astronomy, such as producing the first image of a black hole or understanding more about the formation of planetary systems, were only possible through concerted efforts in safeguarding the radio sky from interference. via IAU Statement on Satellite Constellations  さらに RAS (Royal Astronomical Society; 王立天文学会) や AAS (American Astronomical Society; アメリカ天文学会) も声明を出した。\n RAS statement on Starlink satellite constellation | The Royal Astronomical Society AAS Issues Position Statement on Satellite Constellations | American Astronomical Society  これらの声明は IAU のものより踏み込んだ内容になっていて\nGiven the scale of these projects, there is also the prospect of a significant and lasting change to the views of the night sky until now enjoyed throughout human history and pre-history. The night sky is part of the cultural heritage of humanity, and the Society believes that it deserves protection. via RAS statement on Starlink satellite constellation  \u0026quot;The natural night sky is a resource not just for astronomers but for all who look upward to understand and enjoy the splendor of the universe, and its degradation has many negative impacts beyond the astronomical,\u0026quot; says Jeffrey C. Hall (Lowell Observatory), Chair of the AAS Committee on Light Pollution, Radio Interference, and Space Debris. \u0026quot;I appreciate the initial conversation we have already had with SpaceX, and I look forward to working with my AAS colleagues and with all stakeholders to understand and mitigate the effects of the rapidly increasing numbers of satellites in near-Earth orbit.\u0026quot; via AAS Issues Position Statement on Satellite Constellations  と述べている。\n個人的には人工流星の商業イベントの利用すらよく思ってないので各団体の声明には激しく同意するところではあるが，一方で「これが宇宙時代のさきがけか」と感慨深い。 今後の展開に注目しておこう。\n【おまけの再掲載】 天文学と光害 この文章は2003年に公開したブログ記事の再掲載だ。 古い記事だが「光害問題」について考える際の参考になれば幸い。\n 回転サーチライト等禁止の法制化についての要望書 回転サーチライト等禁止の法制化、日本天文学会が環境省へ要望  私の感じでは光害の問題は1980年代あたりから特に問題視されてきたように思います。 しかし当時は光害自体が世論を呼ぶ状態ではありませんでした。 逆に1980年代後半から脹れ上がるバブル景気とともに日本国各地における「ライトアップ運動」が非常に盛んになっていったのを憶えています。\n日本で光害が問題視されるようになってきたのは，ようやく1990年代の終わり頃です。 それも天文学等の学術領域が受ける被害としてではなく，無節操な夜間照明による野生動物の生態系への影響すなわち「環境問題」としてクローズアップされてきています。\n天文学にとって光害の何が問題かというと，夜間照明が空に向けられる「ライトアップ」の問題です。 従ってこれに対する解決策は照明による光を空に漏らさないようにすることです。 （街灯を含め）既にそのような照明器具は市場に出まわっています。 光を空に漏らさないということは，それだけエネルギー効率の良い照明であるとも言えます。\nもちろん天文観測施設のある地域では条例や付近住民との取り決め等で光害を減らす努力が行われています。 しかし狭い日本列島ではもはや光害の影響を全く受けない場所など「ない」といっても過言ではないと思います。 たとえ近所の明かりを落としても，何百キロ先の都会の明かりが夜空を照らしていたのでは何にもなりません。\n近年（2003年当時）では目に見える「光」以外にも電波による光害も問題視されるようになってきました。 一応国際協定で電波天文学用にリザーブされている電波領域というのはあるのですが， それを破る人（？）がいるということや，商業サイドからの圧力により観測用の電波領域を確保するのが難しくなりつつあります。\n電波天文観測の対象となる電波は非常に微弱なものです。 例えば今あなたが持っているケータイを月に置き，それを電波望遠鏡で受信してしまったら「針が飛ぶほどの大音量」になってしまいます。 電波天文観測というのはそれほどデリケートなものなのです。\n光および電波による光害は今後も続くでしょう。 でも，ここに書いたようなことも頭の隅に入れていただけると嬉しいです\n 参考図書  [まとめ買い] うちの居候が世界を掌握している！（GA文庫） 七条 剛 希望 つばめ (イラスト)  Ebook Bundle Kindle版 ASIN: B06WD5SGXL 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  宇宙開発事業で世界を掌握する高校生の話（笑） 個人的にはルファさんには幸せになってほしい。\nreviewed by Spiegel on 2019-06-15 (powered by amazon-item 0.2.1)\n  念の為に言っておくが，私は携帯電話等の通信電波による人体への影響に関しては懐疑的である。ここではむしろ電波望遠鏡等を使った天文観測への影響を懸念している。先日，電波望遠鏡網をつかったブラックホールの直接観測に成功したってニュースになったばかりなのにねぇ。 [return]   "
    },
    {
      "title": "新しい OpenPGP 鍵サーバが Launch したらしい",
      "section": "remark",
      "description": "これで思い出すのが，かつての OpenPKSD だが，今回の keys.openpgp.org がその二の舞にならないことを祈るばかりである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/launching-a-new-openpgp-key-server/",
      "published": "2019-06-13T13:19:09+00:00",
      "update": "2019-06-13T13:19:45+00:00",
      "content": " OpenPGP のメーリングリストより。\n Launching a new keyserver on keys.openpgp.org! Launching a new keyserver! - keys.openpgp.org sequoia-pgp / hagrid · GitLab   Fast and reliable. No wait times, no downtimes, no inconsistencies. Precise. Searches return only a single key, which allows for easy key discovery. Validating. Identities are only published with consent, while non-identity information is freely distributed. Deletable. Users can delete personal information with a simple e-mail confirmation. Built on Rust, powered by Sequoia PGP - free and open source, running AGPLv3.  via Launching a new keyserver!  ほほう。 Rust ベースなのか。 面白いな。\n現行の OpenPGP 鍵サーバ同士は peer-to-peer で同期しているが，新しい keys.openpgp.org はこれらとは別のネットワークを形成するようだ。\n We created keys.openpgp.org to provide an alternative to the SKS Keyserver pool, which is the default in many applications today. This distributed network of keyservers has been struggling with abuse, performance, as well as privacy issues, and more recently also GDPR compliance questions. Kristian Fiskerstrand has done a stellar job maintaining the pool for more than ten years, but at this point development activity seems to have mostly ceased.\nWe thought it time to consider a fresh approach to solve these problems.  via Launching a new keyserver!  さらに\n The keys.openpgp.org keysever will receive first-party support in upcoming releases of Enigmail for Thunderbird, as well as OpenKeychain on Android. This means users of those implementations will benefit from the faster response times, and improved key discovery by e-mail address. We hope that this will also give us some momentum to build this project into a bigger community effort.   via Launching a new keyserver!  ということで Enigmail や OpenKeychain と連携するのであれば期待できそうな感じである。 ただし，いまのところ GnuPG との相性がイマイチのようなので，もう少し様子を見たいところではある。\nこれで思い出すのが，かつての OpenPKSD だが，日本主導でフル Ruby で組まれていて割と期待してたんだが，世界的にはあまり注目されないまま閉鎖されたんだよなぁ。 今回の keys.openpgp.org がそうならないことを祈るばかりである。\n参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) eBooks Kindle版 ASIN: B015643CPE 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "搾取と狂狷",
      "section": "remark",
      "description": "自由に生きるというのは本当に大変である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/kyoken/",
      "published": "2019-06-13T12:13:30+00:00",
      "update": "2019-06-13T12:14:16+00:00",
      "content": " 最近，東京大学の研究者による面白い論文が発表されたらしい。\n 囚人のジレンマゲームでの読み合いによる搾取の安定的発生  これをもう少し噛み砕いて説明した記事が MIT Technology Review によるこれ。\n MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明  この記事からちょっと多めに引用してみよう。\n  もう1つ未解決の問題は、搾取が社会でいかに発展してきたかだ。社会的生物の間で、どのようにして個人が他者を利用して自分の利益を増やすようになったのだろうか。\n明白な答えの1つは、力のある人はその力を使って力の弱い人を利用できるということだ。この答えは同時に、力が拮抗する個人間では搾取的行動が起こりえないことを示唆する。それでもなお、広い規模で頻繁に搾取が見られる現状は、搾取は起こるべくして起こっているということを示唆している。搾取は一体どのように起こるのだろうか。  via なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明  もともと「繰り返しゲームとしての囚人のジレンマ」では\n  これが起こり得る具体的な状況は、アリスが以前のゲームから学習するのに対し、ボブは学習せず同じ戦略を使うときだ。その場合、アリスはボブを利用して、徐々に自分にとってより良い結果を確保できるようになる  via なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明  ことは知られていた。 しかし今回「東京大学の大学院生である藤本悠雅と金子邦彦教授」は\n  両方のプレイヤーが以前の経験から学び、それに応じて自分の戦略を適応させる繰り返しゲームとしての囚人のジレンマを研究した。そして、このような状況においても、1人のプレイヤーが他のプレイヤーを利用してより良い結果を得られるという画期的な結果を出したのだ。  via なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明  内容はこうだ。\n  答えは、ゲームの初期条件にある。アリスがボブの戦略を知った場合に、ボブの行動を利用し、アリス自身の結果をより良くできることを、藤本と金子教授は示している。\nしかし、この戦略がボブにとってより良い結果を約束するとアリスが保証すれば、アリスはボブの協力を確実なものにできる。たとえばある状況では、両方のプレイヤーが裏切る場合の結果よりも、ボブが犠牲になった方がボブにとって良い結果になるとアリスが保証できるのだ。\nこのため、たとえアリスがより有利になったとしても、ボブには搾取を受け入れる動機がある。  via なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明  これってさ。 GAFA に象徴される「監視資本主義」そのものぢゃん。 論文の著者はむしろ「監視資本主義」の構造から今回の着想を得たのではないかとさえ思ってしまう（本当のところは知らない）。\n「監視資本主義」の本質が「合意の上の搾取」にあるのだとしたら，これに抗うのはかなり難しそうである。 と，ここまで考えて思い浮かんだのは「狂狷の徒」というフレーズである。\n以前にも紹介したが， 「狂狷 (きょうけん) 」というのは論語の中に出てくる言葉らしい。\n  孔子様はこう言っとる。「人間というものは中庸を得たものが一番よろしい」と。まあいわゆる聖人ですわな。しかし、「現実にはそんな中庸の人間がおるものではない」と。\nそれでは中庸の人の次にどういう人がいいかというと、孔子は「狂狷の徒がよろしい」と言うておる。「狂狷は進みて取る」、進取の気性です。世間を変えるには「狂」がなければならない。\nそして「狷者は為さざるところあるなり」と。たとえ一億円の金を積まれても、わしは嫌じゃということは断じてせんという、それが「狷」です。  via 学び続ける「狂狷（きょうけん）の徒」たれ : 超健康が夢 院長日記  「監視資本主義」による「合意の上の搾取」に抗いたいのなら狂狷の徒たるべきなのだろう。 自由に生きるというのは本当に大変である。\nブックマーク  エンジニアこそ「狂狷の徒」たれ  参考図書  もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo 達人出版会 2017-12-25 評価\u0026nbsp;       WirelessWire News 連載の書籍化。感想はこちら\nreviewed by Spiegel on 2018-12-31\n "
    },
    {
      "title": "Go 1.12.6 がリリースされた",
      "section": "release",
      "description": "今回もセキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/06/go-1_12_6-is-released/",
      "published": "2019-06-12T13:01:59+00:00",
      "update": "2019-06-12T13:09:18+00:00",
      "content": " Go 1.12.6 がリリースされた。 セキュリティ・アップデートはなし。\n Go 1.12.6 and Go 1.11.11 are released - Google Group  go1.12.6 (released 2019/06/11) includes fixes to the compiler, the linker, the go command, and the crypto/x509, net/http, and os packages. See the Go 1.12.6 milestone on our issue tracker for details. via Release History - The Go Programming Language  Ubuntu の場合は（APT で提供される Go コンパイラは古すぎるので）ダウンロードページから go1.12.6.linux-amd64.tar.gz を取ってきて任意の場所に手動で展開するほうがお勧めである。\nたとえば，こんな感じ。\n$ cd /usr/local/src $ sudo curl https://dl.google.com/go/go1.12.6.linux-amd64.tar.gz -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.12.6.linux-amd64.tar.gz $ sudo mv go go1.12.6 $ sudo ln -s go1.12.6 go $ ./go/bin/go version go version go1.12.6 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "Ubuntu で音楽 CD のリッピング",
      "section": "remark",
      "description": "Windows のときは文字エンコーディングで苦労したからねぇ。 UNIX 系は楽でいいわ（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/ripping-cd-music-in-ubuntu/",
      "published": "2019-06-10T13:59:23+00:00",
      "update": "2019-06-10T14:03:34+00:00",
      "content": " いやぁ，ひーさしぶりに音楽 CD 買ったですよ。 最近はストリーミング・サービスか MP3 で買うかだったもんねぇ。\nちうわけで Ubuntu でリッピング・ツールを探したら Asunder というのがいいらしい。 インストールは APT でできる。\n$ sudo apt install asunder lame lame は MP3 エンコーディングを扱うのに必要らしい。\n起動したらちゃんと日本語で表示できてた。 えらいえらい！\n CDDB のプロキシ・サーバに freedbtest.dyndns.org:80 を指定すれば日本の CD 情報もちゃんと取れるようだ。\nWindows のときは文字エンコーディングで苦労したからねぇ。 UNIX 系は楽でいいわ（笑）\nブックマーク  UbuntuやArch Linuxで音楽CDの取り込み Asunderの紹介!! - BobbyQuineのブログ(備忘録)  参考図書  アルティメット☆MAGIC *CD エイベックス・ピクチャーズ株式会社(Music) 2019-05-21 (Release 2019-05-22) Music CD ASIN: B07PBB8W1X, EAN: 4562475295115 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  アニメ「賢者の孫」の OP 曲を収録。 CD 版で購入したのだが MP3 版もあった orz 通勤時に聴くと気合が入る（笑）\nreviewed by Spiegel on 2019-06-10 (powered by amazon-item 0.2.1)\n  魔法の天使 クリィミーマミ 公式トリビュート・アルバム Various artists (メインアーティスト) P-VINE (Release 2012-04-01) Digital Music Album MP3 ダウンロード ASIN: B007EEGL58 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  往年のクリィミーマミ・ファンが泣いて喜ぶアルバム。 CD 版もあるが MP3 でも買える。\nreviewed by Spiegel on 2019-06-10 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "TeX Live 2018 から 2019 へのアップグレード",
      "section": "remark",
      "description": " 以前に Windows で2018年版にアップグレードしたが，やり方はだいたい同じ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/upgrade-texlive-from-2018-to-2019/",
      "published": "2019-06-09T05:58:35+00:00",
      "update": "2019-06-09T10:40:04+00:00",
      "content": " そろそろ2019年版のアナウンスが出てるかなぁ，と思って TeX Live のサイトへ見に行ったら\n Current release: TeX Live 2019 is available over the Internet and on DVD. It was released on 29 April 2019, and ongoing updates are available.  via TeX Live - TeX Users Group  とか書いてくさるですよ。\nはっ？ 私が2018年版をインストールしたのって4月末なんだけど。\n試しに tlmgr update してみたら\n$ sudo tlmgr update --self --all tlmgr: Remote repository is newer than local (2018 \u0026lt; 2019) Cross release updates are only supported with update-tlmgr-latest(.sh/.exe) --update Please see https://tug.org/texlive/upgrade.html for details.  とか言われた。 以前と表示が変わっている。 タッチの差でアップグレードされたということか orz\nしょうがない。 アップグレードを行おう。 以前に Windows で2018年版にアップグレードしたが，やり方はだいたい同じ。\nそうそう。 今回のアップグレードは APT を使わず install-tl でインストールされていることが前提ね。\n TeX Live を Ubuntu に（APT を使わずに）導入する  前準備 まず TeX Live のインストール先ディレクトリを /usr/local/texlive として話を進める（普通にインストールすればそうなってる筈）。 このディレクトリの中身はこんな感じになっているだろう。\n$ ls -F /usr/local/texlive 2018/ texmf-local/ 最初に 2018/ ディレクトリをコピーしよう。\n$ cd /usr/local/texlive $ sudo cp -a 2018 2019 $ sudo rm 2019/tlpkg/backups/* このあと update-tlmgr を使ってアップグレードを行うのだが，権限のコントロールが上手くないみたいなので 2019/ フォルダ以下のオーナーを一時的に自ユーザに書き換えておく。\n$ sudo chown -R username:username 2019 次にパス設定の削除を行う。 tlmgr path add コマンドでパス設定をしている場合は\n$ sudo tlmgr path remove で設定を消しておく。\n環境変数 PATH や MANPATH 等を設定している場合はその設定を変更しておく。 たとえば /etc/profile.d/ ディレクトリに以下の内容を書いたファイル texlive-paths.sh を置いている場合\n# shellcheck shell=sh # Expand $PATH to include the directory where TeX Live applications go. texlive_path=\u0026#34;/usr/local/texlive/2018\u0026#34; texlive_bin_path=\u0026#34;${texlive_path}/bin/x86_64-linux\u0026#34; if [ -n \u0026#34;${PATH##*${texlive_bin_path}}\u0026#34; -a -n \u0026#34;${PATH##*${texlive_bin_path}:*}\u0026#34; ]; then export MANPATH=${MANPATH}:${texlive_path}/texmf-dist/doc/man export INFOPATH=${INFOPATH}:${texlive_path}/texmf-dist/doc/info export PATH=${PATH}:${texlive_bin_path} fi 2018 の部分を 2019 に置き換える。\n# shellcheck shell=sh # Expand $PATH to include the directory where TeX Live applications go. texlive_path=\u0026#34;/usr/local/texlive/2019\u0026#34; texlive_bin_path=\u0026#34;${texlive_path}/bin/x86_64-linux\u0026#34; if [ -n \u0026#34;${PATH##*${texlive_bin_path}}\u0026#34; -a -n \u0026#34;${PATH##*${texlive_bin_path}:* }\u0026#34; ]; then export MANPATH=${MANPATH}:${texlive_path}/texmf-dist/doc/man export INFOPATH=${INFOPATH}:${texlive_path}/texmf-dist/doc/info export PATH=${PATH}:${texlive_bin_path} fi 最後に ~/.texlive2018/ ディレクトリがあれば ~/.texlive2019/ にコピーすればいいかな。\n% cd ~ $ cp -a .texlive2018 .texlive2019 2019年版へのアップグレード ほいじゃまぁ，アップグレードしますかね。\nまずは update-tlmgr による tlmgr のアップグレードから\n$ cd /usr/local/texlive/2019 $ wget http://mirror.ctan.org/systems/texlive/tlnet/update-tlmgr-latest.sh $ sh update-tlmgr-latest.sh -- --upgrade tlmgr の動作確認をしておこう。\n$ tlmgr version tlmgr revision 51217 (2019-05-24 23:47:41 +0200) tlmgr using installation: /usr/local/texlive/2019 TeX Live (http://tug.org/texlive) version 2019 よしよし。\n次はアップグレードした tlmgr でアップデートを行う。\n$ tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet tlmgr: setting default package repository to http://mirror.ctan.org/systems/texlive/tlnet $ tlmgr update --self --all tlmgr: package repository http://ftp.jaist.ac.jp/pub/CTAN/systems/texlive/tlnet (verified) tlmgr: saving backups to /usr/local/texlive/2019/tlpkg/backups ... 手元の環境では520個ほど更新された。\n$\\mathrm{Lua\\TeX}$ を使う場合はフォントキャッシュのアップデートも忘れずに。\n$ luaotfload-tool -fu 最後に /usr/local/texlive/2019 ディレクトリ以下のオーナーを root に戻す。\n$ cd /usr/local/texlive $ sudo chown -R root:root 2019 更にパス設定（/usr/local/bin/ 等へシンボリック・リンクを張る）を行うなら\n$ sudo /usr/local/texlive/2019/bin/x86_64-linux/tlmgr path add とする。\n動作確認 ちょろんと動作確認しておこう。 $\\mathrm{Lua\\LaTeX}$ でね。\n$ lualatex -v This is LuaTeX, Version 1.10.0 (TeX Live 2019) Execute \u0026#39;luatex --credits\u0026#39; for credits and version details. There is NO warranty. Redistribution of this software is covered by the terms of the GNU General Public License, version 2 or (at your option) any later version. For more information about these matters, see the file named COPYING and the LuaTeX source. LuaTeX is Copyright 2019 Taco Hoekwater and the LuaTeX Team. 以下のタイプセットも試してみる。\n LuaLaTeX でコードを書いてみる  結果はこんな感じ。\n よーし，うむうむ，よーし。\nブックマーク  TeX Live 2019 注目ポイントまとめ (1) - Acetaminophen’s diary TeX Live 2019 注目ポイントまとめ (2) - Acetaminophen’s diary  参考図書  [改訂第7版]LaTeX2ε美文書作成入門 奥村 晴彦, 黒木 裕介 技術評論社 2017-01-24 Book 大型本 ASIN: 4774187054, EAN: 9784774187051 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。\nreviewed by Spiegel on 2017-09-27 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "2019-06-09 のブックマーク",
      "section": "bookmarks",
      "description": "「なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/06/09-bookmarks/",
      "published": "2019-06-09T05:14:07+00:00",
      "update": "2019-06-09T05:17:29+00:00",
      "content": " リリース情報  Highlights from Git 2.22 - The GitHub Blog  バベルのインターネット  オンライン上のテロリズムと暴力的過激主義に対して行動するためのクライストチャーチ・コール（和訳） – P2Pとかその辺のお話R : うわぁ  セキュリティ＆プライバシー関連  Effective Cybersecurity and Data Protection Legislation Should Protect Whistleblowers | Compliance and Enforcement  The Importance of Protecting Cybersecurity Whistleblowers - Schneier on Security  米国務省は入国ビザ申請にSNSアカウントまで求めはじめた | TechCrunch Japan The Cost of Cybercrime - Schneier on Security MIT Tech Review: 2048ビットRSA暗号は量子コンピューターでいつ破られるか？ Firefoxがユーザーを追跡から護る機能を強化しパスワードマネージャーをデスクトップに導入 | TechCrunch Japan  「Firefox」がサードパーティー製Cookieをデフォルトブロックへ ～v67.0.1をリリース - 窓の杜 Mozilla、「Firefox Lockwise」を発表 ～パスワードをよりスマートに管理 - 窓の杜  MIT Tech Review: 相次ぐ半導体の脆弱性で 明るみになった パッチ「遅すぎる」問題 Chinese Military Wants to Develop Custom OS - Schneier on Security 「プライバシー」について企業が押さえるべきポイント--ガートナーが解説 - ZDNet Japan マルウェア感染によるPayPayアカウントの不正利用についてまとめてみた - piyolog アップルは子ども向けのiPhoneアプリの広告とサードパーティ製トラッカーを規制 | TechCrunch Japan インド最大のビデオストリーミングサービスがセキュリティ欠陥のためSafariのサポートを停止 | TechCrunch Japan iOS 12 Shortcut uses iPhone to record police during traffic stop - Business Insider  iOS Shortcut for Recording the Police - Schneier on Security   天文関連  NASAは月に機材を運ぶ初めての民間企業を選出 | TechCrunch Japan  知財関連  Napster公開から20年、いまなお残るその影響 – P2Pとかその辺のお話R RapidVideo、著作権リスク軽減のため海賊版サイトからのアクセスを遮断 – P2Pとかその辺のお話R 脅し気味の公共広告に海賊版を抑止する効果はあるのだろうか – P2Pとかその辺のお話R 小学館がDMCA召喚令状を取得、YouTubeに海賊版マンガ動画アップローダーの情報開示を求める – P2Pとかその辺のお話R  Linux または Ubuntu に関する話題  LibreOffice 6.3 on Linux, a statement - The Document Foundation Blog  その他  台湾フォックスコンが中国ファーウェイ端末の生産ラインを一部停止 | TechCrunch Japan Pivotal、OpenJDKディストリビューションやSpring Frameworkの商用サポートを含む「Pivotal Spring Runtime」リリース － Publickey NTPサーバと同期する「NTPクロック」に無線LAN＆電池駆動の新モデルが登場。配線不要で普通の掛け時計のように設置可能 － Publickey 「予想を超えて売れている」　超小型スマホ「Palm Phone」投入の背景をFOXに聞く (1/2) - ITmedia Mobile Angular 8正式版リリース。高速レンダリングエンジン「Ivy」、モダンブラウザ用と非モダンブラウザ用のJSコードを動的に使い分ける「Differential Loading」など － Publickey メーリングリストの老舗「freeml」終了　22年の歴史に幕 - ITmedia NEWS 劉慈欣の話題の『三体』と「暗い森」になりつつあるインターネット - YAMDAS現更新履歴 MIT Tech Review: その統計に疑念あり、米ネット中立性規則巡るFCCの主張に批判 Apple、「macOS Catalina」「iOS 13」を発表 ～新OS「iPadOS」もお披露目 - 窓の杜 Apple、新フレームワーク「Swift UI」発表。簡潔なコードとドラッグ＆ドロップでUIを構築、デバイスでの即時プレビュー。WWDC19 － Publickey MIT Tech Review: 自動化が生む新たな貧困 「ゴーストワーク」は 他人事ではない MIT Tech Review: 「全廃」のはずのフロンが中国で増加、国際協定の限界露呈 MIT Tech Review: 唐突な「北京AI原則」発表は何を意味するのか？ MIT Tech Review: 伊藤穰⼀、レッシグらとデータ活用の未来を考えるカンファレンス ［速報］マイクロソフトとオラクル、クラウドの相互接続で合意。クロスクラウドのシングルサインオン、AzureからOracle Cloud Databaseへの接続などが可能に － Publickey Google CloudやYouTubeの障害は「数台のサーバへの設定変更のつもりが、誤って複数リージョンの多数のサーバに適用されてしまった」。Googleが説明 － Publickey MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明  囚人のジレンマゲームでの読み合いによる搾取の安定的発生  オープンなプロセッサやハードウェアの開発を促進する「OpenHW」グループ発足。RISC-VベースのSoC対応「CORE-Vファミリー」発表 － Publickey Bringing TLS 1.3 to Haskell - あどけない話 スタンディングデスクには意味がない？ 座りすぎと健康の関係を研究してわかった「もっと重要なこと」｜WIRED.jp 偉大なる変人アラン・チューリング、死後半世紀を経てついに訃報記事が掲載される | ナゾロジー  "
    },
    {
      "title": "「新暦七夕」なるものは存在しない",
      "section": "remark",
      "description": "2019年の伝統的七夕は8月7日。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/traditional-tanabata/",
      "published": "2019-06-09T03:24:09+00:00",
      "update": "2019-06-09T05:22:53+00:00",
      "content": "そろそろ七夕について言及される季節ですかねぇ。\n 【特集】七夕／伝統的七夕（2019年） - アストロアーツ  この記事を見て「新暦七夕」なる単語が気になった。 きっと「伝統的七夕」の対義語として考えた造語だろうが「なんだかなぁ」というセンスである。\nいわゆる「五節句（人日 (じんじつ) ，上巳 (じょうし) ，端午 (たんご) ，七夕 (しちせき) ，重陽 (ちょうよう) ）」は江戸幕府によって定められたそうだが「明治の改暦」で廃止された。 なので現行暦には七夕を含む五節句は，公式には，存在しない。\nただし，盂蘭盆と同じく五節句も民間信仰として深く浸透していたため改暦後も廃れることなく残っている。 もっとも現行暦に無理やり日付を合わせて祝ったり「月遅れ」で祝ったりと地域によって差異があるが1。\nちなみに私は田舎の子なので，正月の「人日（七草）」以外は月遅れで祝っていた。 今はメディアの発達のせいか田舎のそういった風習は塗り潰されてしまっているらしく「月遅れ」はなくなっているっぽい。\n七夕に関して言うと現行暦の7月7日は日本の多くの地域で梅雨 (雨期) まっ盛りだったりするので，いわゆる「織姫・彦星伝説」にそぐわない天候である。 そこで国立天文台では夏（休み）にもっと星に親しんでもらうため「伝統的七夕」を定義した。 内容は以下の通り。\n  二十四節気の処暑（しょしょ＝太陽黄経が150度になる瞬間）を含む日かそれよりも前で、処暑に最も近い朔（さく＝新月）の瞬間を含む日から数えて7日目が「伝統的七夕」の日です。  via 質問3-10）伝統的七夕について教えて | 国立天文台(NAOJ)  この定義は，なるべく明治の改暦以前の暦（太陰太陽暦）の七夕に近い日が伝統的七夕となるよう調整されている2。 たとえば2019年の処暑は8月23日で「処暑に最も近い朔」は8月1日なので伝統的七夕は8月7日ということになる3。\nなお伝統的七夕とは別に毎年8月最初の1週間は「スター・ウィーク」として日本各地で星に関するイベントが行われている。 2019年のキャッチフレーズは\n「好きな星を 見つけませんか」\nだそうだ。 上手い具合に日程が伝統的七夕と被るので，併せて楽しんでいただければと思う。 スター・ウィークの後はペルセウス座流星群が待ってるぞ！\n 天文年鑑 2019年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2018-11-21 Book 単行本 ASIN: 4416718020, EAN: 9784416718025 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2019年版。\nreviewed by Spiegel on 2018-11-23 (powered by amazon-item 0.2.1)\n  猫暦 ねこしみず美濃  Collections Kindle版 ASIN: B07BNZQSZZ 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「寛政の改暦」のころの伊能勘解由（忠敬）とその妻とされる「おえい」の物語。感想はこちら。\nreviewed by Spiegel on 2019-01-07 (powered by amazon-item v0.2.0)\n  7月7日、晴れ DREAMS COME TRUE (メインアーティスト) Sony Music Labels Inc. 1996-04-01 (Release 2014-04-01) Digital Music Track MP3 ダウンロード ASIN: B00FXUQGN2 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ドリカムで唯一持ってる楽曲。大きな声では言えないが，個人的には失恋ソングである（笑）\nreviewed by Spiegel on 2019-06-09 (powered by amazon-item 0.2.1)\n  明治の改暦以前は民間歴を含めて様々な暦が乱立していたそうなので，この程度の差異は差異に入らないかもしれないが（笑） [return] 現在「旧暦」と呼ばれているものは江戸時代の「天保暦」がベースになっていると言われているが，当時と今では天文観測基準が異なるため，厳密には「天保暦」を再現できているとは言えない。実際の「旧暦」の運用は現行暦の暦象（朔望月や二十四節気等）を元に「天保暦」のルールを当てはめて運用しているらしい。なので「旧暦2033年問題」みたいなことも起こったりする。 [return] 日本では国立天文台が毎年2月1日に翌年の暦要項を公表する。なお伝統的七夕は雑節にも入らないので暦要項には載っていない。キャンペーン・イベントみたいなものだからね。 [return]   "
    },
    {
      "title": "Map は連想配列ではなく連想配列への「参照」である",
      "section": "golang",
      "description": "いかに参照っぽく振る舞っていようとも Go 言語でやり取りできるのはあくまでも「値」であり，その「値」が何を指しているかを考えながらコードを書いていく必要がある。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/map-as-a-associative-array/",
      "published": "2019-06-07T14:07:39+00:00",
      "update": "2019-06-07T14:09:41+00:00",
      "content": " 今回は小ネタで。 つか，だいぶフワッとした話になるので，その辺は割引いて読んでいただけるとありがたい。\nいやね。\n Goのスコープに苦しんだ事例集 - Qiita  の「事例その１」で\ntype hogehoge map[string]string func (h *hogehoge) Seter(p string) { h = \u0026amp;hogehoge{ \u0026#34;key\u0026#34;: p, } } func main() { var f hogehoge f.Seter(\u0026#34;ddd\u0026#34;) fmt.Println(f) // \u0026lt;- nil } というコードを書いておられて，言わんとすることは分かるけど事例に map を使うのは混乱を助長しないかなぁ，と思ってしまったのだ。 そこでこの記事では主に map の振る舞いにピントを合わせて説明していこう。\nMap は連想配列ではなく連想配列への「参照」である のっけからぶっちゃけるが，要するにそういうことである。 もう少し厳密に言うと「Map は連想配列への「参照」のように振る舞う」といったところか。\nこれを端的に表すコードがこれ。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func main() { kv := KeyValues{\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } これを実行すると\n0x40c128: 0x43e260: map[foo:bar] などと表示される。\n最初の値がインスタンス kv のポインタ値，次の値が kv が参照する連想配列のポインタ値，最後が kv の内容と考えれば分かりやすいだろう。\nGo 言語において関数の引数は「値渡し」なので... 型 KeyValues にひとつ関数を追加してみよう。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func (kv KeyValues) Set(k, v string) { kv[k] = v fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } func main() { kv := KeyValues{} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) kv.Set(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;) fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } これを実行すると\n0x40c128: 0x43e260: map[] 0x40c138: 0x43e260: map[foo:bar] 0x40c128: 0x43e260: map[foo:bar] となる。\nポイントは2行目で main() 関数内のインスタンス kv と KeyValues.Set() 関数のメソッド・レシーバの kv は異なるポインタ値になっているので異なるインスタンスだと分かるが，参照している連想配列（へのポインタ）は同一である。\nもっと簡単なコードで示そうか。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func main() { kv := KeyValues{\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) cpy := KeyValues{} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;cpy, cpy, cpy) cpy = kv fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;cpy, cpy, cpy) } これを実行すると\n0x40c128: 0x43e260: map[foo:bar] 0x40c148: 0x43e2a0: map[] 0x40c148: 0x43e260: map[foo:bar] となる。 つまり map は連想配列への参照なので，連想配列そのものは宣言構文（:=）や代入構文（=）では複製できない，ということである1。\nそれでもポインタは「参照」ではない じゃあ，先ほどの KeyValues.Set() 関数のメソッド・レシーバをポインタ型にするとどうなるか，やってみよう。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func (kv *KeyValues) Set(k, v string) { (*kv)[k] = v fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, kv, *kv, *kv) } func main() { kv := KeyValues{} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) kv.Set(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;) fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } これを実行すると\n0x40c128: 0x43e260: map[] 0x40c128: 0x43e260: map[foo:bar] 0x40c128: 0x43e260: map[foo:bar] となる。\nmain() 内のインスタンス kv はポインタ型ではないが KeyValues.Set() 関数呼び出し時に暗黙的な変換が行われる。 このため KeyValues.Set() 関数のメソッド・レシーバの kv は main() 内のインスタンス kv と同一のインスタンスになるわけだ。\nでは調子に乗ってこんな関数を作ってみよう。\nfunc (kv *KeyValues) Initialize(k, v string) { kv = \u0026amp;KeyValues{k: v} } KeyValues.Initialize() 関数のメソッド・レシーバは呼び出し元のインスタンスと同一なんだから，これで初期化できるんじゃね？ というわけだ。\nプログラム全体はこんな感じ。 これでようやく最初に紹介したコードにほぼ近い形になっただろう。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func (kv *KeyValues) Initialize(k, v string) { kv = \u0026amp;KeyValues{k: v} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, kv, *kv, *kv) } func main() { kv := KeyValues{} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) kv.Initialize(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;) fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } まぁ動かしてみよう（笑）\n0x40c128: 0x43e260: map[] 0x40c138: 0x43e2a0: map[foo:bar] 0x40c128: 0x43e260: map[] ちょっと考えれば分かるのだが， KeyValues.Initialize() 関数のメソッド・レシーバに渡されるのはポインタ「値」なので，それを関数内で上書きしたところで呼び出し元の main() 関数には全く影響ないのである。\nこれが「Go 言語に『参照』は存在しない」ということの意味である。 いかに参照っぽく振る舞っていようとも Go 言語でやり取りできるのはあくまでも「値」であり，その「値」が何を指しているかを考えながらコードを書いていく必要がある。\nたとえば先ほどの KeyValues.Initialize() 関数を以下のように書き換えればまた挙動が変わる。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func (kv * KeyValues) Initialize(k, v string) { * kv = KeyValues{k: v} \tfmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, kv, * kv, * kv) } func main() { kv := KeyValues{} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) kv.Initialize(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;) fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } これを実行すると\n0x40c128: 0x43e260: map[] 0x40c128: 0x43e2a0: map[foo:bar] 0x40c128: 0x43e2a0: map[foo:bar] となる。 なにがどう違うのか考えてみよう。 ここまでくれば簡単だよね（笑）\nブックマーク  Map の話  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  Go 言語においては宣言や代入は式（expression）ではなく構文（statement）であり := や = は演算子ではなく構文を構成する（var とかと同じ）トークンに過ぎない。ちなみに ++ や -- も演算子ではなく代入構文のトークンである。 [return]   "
    }
  ]
}
