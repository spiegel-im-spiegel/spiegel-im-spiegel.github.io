{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Hugo でスライド・サイトを立てる実験",
      "section": "remark",
      "description": "ちょろんとググってみたら reveal-hugo なる Hugo テーマがあって，内部では reveal.js を使ってスライドを制御しているらしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/12/slide-site-by-hugo/",
      "published": "2019-12-21T13:38:36+00:00",
      "update": "2019-12-21T13:44:40+00:00",
      "content": "来月のイベント用に資料をスライド形式で作ろうと思うのだが， MS Office は大昔に捨ててしまったし LibreOffice の Impress で書くというのも今更だしなぁ。\nできれば markdown で書いて VCS でドキュメント管理したい。\nで，ちょろんとググってみたら reveal-hugo なる Hugo テーマがあって，内部では reveal.js を使ってスライドを制御しているらしい。 これだよ，これ。\nHugo は静的サイト・ジェネレータなのでデプロイ先の自由度が高い。 さくらのレンタルサーバみたいな老舗でも GitHub Page や最近流行り（？）の Netlify でも大丈夫。 しかも Hugo にはサーバ・モードがあるのでローカル環境で試すこともできる。\nReveal.js テーマを自作するのでなければ通常版の Hugo で問題ない。 また reveal-hugo には reveal.js 一式がまるっと含まれているので別途のインストールは不要。 Node.js をインストールする必要もない。 簡単！\nでは，さっそく試してみよう。\nHugo 環境の構築 まずは適当なディレクトリで Hugo 環境を作成する。\n$ hugo new site hugo-slide Congratulations! Your new Hugo site is created in /home/username/hugo-env/hugo-slide. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. これで hugo-slide ディレクトリが作成される。 このディレクトリに入り git リポジトリとして初期化する。\n$ cd hugo-slide $ git init この時点でコミットしておけばいつでも元に戻せるので安心である。\n次に reveal-hugo を git のサブモジュールとして導入する。\n$ git submodule add git@github.com:dzello/reveal-hugo.git themes/reveal-hugo Cloning into \u0026#39;/home/username/hugo-env/hugo-slide/themes/reveal-hugo\u0026#39;... remote: Enumerating objects: 1713, done. remote: Total 1713 (delta 0), reused 0 (delta 0), pack-reused 1713 Receiving objects: 100% (1713/1713), 6.61 MiB | 1.83 MiB/s, done. Resolving deltas: 100% (848/848), done. マジ簡単。 Reveal-hugo をアップデートする場合は\n$ git submodule update --init でよい。 以降 reveal-hugo の中身は弄らない方針で作業を進める。\nconfig.toml の設定 Hugo 環境作成直後の config.toml の中身はこんな感じになっている。\nbaseURL = \u0026#34;http://example.org/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;My New Hugo Site\u0026#34; これを以下のように書き換える。\nbaseURL = \u0026#34;http://example.org/\u0026#34; languageCode = \u0026#34;ja_JP\u0026#34; title = \u0026#34;スライド用デモ・サイト\u0026#34; theme = \u0026#34;reveal-hugo\u0026#34; [outputFormats.Reveal] baseName = \u0026#34;index\u0026#34; mediaType = \u0026#34;text/html\u0026#34; isHTML = true [markup] defaultMarkdownHandler = \u0026#34;blackfriday\u0026#34; [markup.highlight] codeFences = false Hugo で作成したサイトをデプロイするなら baseURL にデプロイ先の URL を設定する。\n[outputFormats.Reveal] 項目は reveal.js 用の出力設定で，取り敢えずおまじないのようなものだと思っておけばよい。\n最後の4行は Hugo 0.60 以降では必須の設定である。 これも取り敢えずおまじないとして唱えておく（笑）\nスライド用のドキュメントを作成・表示する hugo-slide/content ディレクトリに _index.md ファイルを作成する。 お試しなので，中身はこんな感じ。\n+++ title = \u0026#34;Hello world!\u0026#34; outputs = [\u0026#34;Reveal\u0026#34;] +++ # Hello world!  This is my first slide. --- # Hello Mars!  This is my second slide. これで2ページ分のスライドができた。\n早速 Hugo をサーバモードで起動して表示してみよう。\n$ hugo server この状態でブラウザで http://localhost:1313/ にアクセスすれば\n おおっ，できたできた。 ちなみに [F] キー押下で全画面表示になる（元に戻すには [ESC] キー押下）。 [Page Down] キーを押すか右下の \u0026gt; をクリックすれば次ページに遷移する。\n よーし，うむうむ，よーし。\nセクションでスライドを分ける 来月のイベントは技術系なのでコードも書けるようにしておきたい。\nでは hugo-slide/content ディレクトリに hello ディレクトリを切ってその中に _index.md ファイルを作成してみよう。 中身はこんな感じ。\n+++ title = \u0026#34;みんな大好き Hello World\u0026#34; outputs = [\u0026#34;Reveal\u0026#34;] +++ # みんな大好き Hello World  ```gopackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello World!\u0026#34;) } ``` これで http://localhost:1313/hello/ にアクセスすれば\n と表示される。 このようにディレクトリを切ってセクション毎に分けることで複数のスライドを置くことができる。\nただし Hugo はセクションの階層化はできない。 更にいうと reveal-hugo ではひとつのセクションに複数の原稿ファイルをおいてもひとつのスライドにまとめられてしまうようだ。 ご注意を。\nさて，次は見た目をちょっと弄ってみようか。\nスライドテーマの指定 Reveal-hugo ではサイト単位，あるいは front matter 単位で reveal.js テーマを指定できる。 config.toml でサイト単位で指定する場合は\n[params.reveal_hugo] theme = \u0026#34;sky\u0026#34; という感じに， front matter で指定するなら\n[reveal_hugo] theme = \u0026#34;sky\u0026#34; てな感じに指定できる。\nReveal.js が用意しているテーマには以下のものがある。\n   Name Description     black Black background, white text, blue links (default theme)   white White background, black text, blue links   league Gray background, white text, blue links (default theme for reveal.js \u0026lt; 3.0.0)   beige Beige background, dark text, brown links   sky Blue background, thin dark text, blue links   night Black background, thick white text, orange links   serif Cappuccino background, gray text, brown links   simple White background, black text, blue links   solarized Cream-colored background, dark green text, blue links    ちなみに sky だとこんな感じ。\n 更に reveal-hugo ではカスタム・テーマとして robot-lung と sunblind が用意されている。 カスタム・テーマは\n[params.reveal_hugo] custom_theme = \u0026#34;reveal-hugo/themes/robot-lung.css\u0026#34; という感じに指定できる。 もちろん自作のテーマを組み込むことも可能である。\nSyntax Highlight の指定 コード部分の Syntax Highlight には highlight.js が使われている。 Highlight.js は reveal.js のプラグインとして既定で組み込まれている。\nHighlight.js のスタイルは\n[params.reveal_hugo] highlight_theme = \u0026#34;github\u0026#34; てな感じで指定できる。 highlight.js で指定可能なスタイルはデモ・ページで確認できる。\nHugo の Syntax Highlight を使う ところで Hugo は自前で Syntax Highlight の機能を持っている。 これを使わない手はない。\nまず highlight.js プラグインを無効にするのだが，個別にプラグインを無効化する方法がないため，config.toml で\n[params.reveal_hugo] load_default_plugins = false plugins = [ \u0026#34;reveal-js/plugin/zoom-js/zoom.js\u0026#34;, \u0026#34;reveal-js/plugin/notes/notes.js\u0026#34;, ] という感じに，いったん既定のプラグインを全て無効にしてから必要なものを個別に組み込む。\nHugo 側の Syntax Highlight の設定は\n[markup.highlight] codeFences = true hl_Lines = \u0026#34;\u0026#34; lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true style = \u0026#34;tango\u0026#34; tabWidth = 4 などとすればよいだろう。 codeFences が true になっている点に注意。\nstyle のサンプルは以下を参考にどうぞ。\n Short snippets Long snippets  たとえば tango スタイルを使えば\n てな感じになる。\nWeb フォントを使いたい！ Web で公開することを考えるのなら Web フォントを使いたいところである。 それにタイトルがちょいとデカすぎるしコードは小さすぎるよね。\nReveal-hugo では layouts/partials/reveal-hugo/head.html を使ってページの \u0026lt;head\u0026gt; 要素に任意の記述を割り込ませることができる。 これを使ってフォントの調整をしよう。\nたとえばこんな記述を割り込ませてみる。\n\u0026lt;link rel=\u0026#39;stylesheet\u0026#39; href=\u0026#39;//fonts.googleapis.com/css?family=Noto+Sans%7cNoto+Sans+JP%3a400,700%7cInconsolata%3a400,700\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#39;stylesheet\u0026#39; href=\u0026#39;/css/font-family.css\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; ちなみに font-family.css はこんな内容にしてみた1。\n.reveal { font-family: \u0026#39;Noto Sans\u0026#39;, \u0026#39;Noto Sans JP\u0026#39;, sans-serif; } .reveal h1, .reveal h2, .reveal h3, .reveal h4, .reveal h5, .reveal h6 { font-family: \u0026#39;Noto Sans\u0026#39;, \u0026#39;Noto Sans JP\u0026#39;, sans-serif; } .reveal code { font-family: \u0026#39;Inconsolata\u0026#39;, \u0026#39;Noto Sans JP\u0026#39;, monospace; } .reveal h1 { font-size: 1.6em; } .reveal h2 { font-size: 1.3em; } .reveal h3 { font-size: 1em; } .reveal h4 { font-size: 1em; } .reveal pre { font-size: 0.8em; } これで実際の表示は\n てな感じになった。 こんなもんかな。\nReveal-hugo では他にも fragment など reveal.js のギミックが利用可能だが，今回は割愛する。\nブックマーク   hakimel/reveal.js: The HTML Presentation Framework\n  dzello/reveal-hugo: 📽️ Create rich HTML-based presentations with Hugo and Reveal.js\n Reveal Hugo | Hugo Themes    さくらのレンタルサーバ上で Hugo によるサイト管理を行う\n  Hugo v0.60 から既定の Markdown パーサが Goldmark になったようだ\n    font-family.css ファイルは static/css/ ディレクトリに置くこと。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2019-12-21 のブックマーク",
      "section": "bookmarks",
      "description": "「The RCS Texting Protocol Is Way Too Easy to Hack」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/12/21-bookmarks/",
      "published": "2019-12-21T02:40:41+00:00",
      "update": "2019-12-21T02:43:33+00:00",
      "content": "バベルのインターネット  インド政府が再びインターネットを遮断、今回はアッサム州とメガラヤ州 | TechCrunch Japan Mozillaら、ネット中立性規則の復活を目指し再審理を請求 - ZDNet Japan 「.org」ドメイン管理団体の売却は世界に何をもたらすのか | P2Pとかその辺のお話R  セキュリティ＆プライバシー関連  実名入りで届く象印を騙ったQUOカード当選詐欺について調べてみた - piyolog デンソーとNTTコミュニケーションズ、車両向けセキュリティオペレーションセンター（車両SOC）の実現に必要な技術検証を開始｜株式会社デンソー　NTTコミュニケーションズ株式会社のプレスリリース  デンソー、NTT コミュニケーションズ：車両向けセキュリティオペレーションセンターの実現に必要な技術検証を開始｜MotorFanTECH[モーターファンテック]   GitHubが脆弱性ワークフローを改善してCVE採番機関に The RCS Texting Protocol Is Way Too Easy to Hack | WIRED  Security Vulnerabilities in the RCS Texting Protocol - Schneier on Security   「33自治体のデータがIaaSから消失」、日本電子計算がシステム障害の詳細明かす | 日経 xTECH（クロステック） Iranian Attacks on Industrial Control Systems - Schneier on Security 「npm」由来の脆弱性を修正した「Node.js」が公開 - 窓の杜 Attacker Causes Epileptic Seizure over the Internet - Schneier on Security Google、クラウドネイティブ向けセキュリティの枠組みを示す「BeyondProd」発表。ホワイトペーパーを公開 － Publickey 年末年始における情報セキュリティに関する注意喚起：IPA 独立行政法人 情報処理推進機構 Lousy IoT Security - Schneier on Security クラウドにおける安全なデータの廃棄 | Amazon Web Services ブログ クラウドは、データを完全削除したくてもハードディスクを物理破壊してくれない。どうする？ AWSが説明 － Publickey オープンソースの暗号化ドライブ作成ツール「VeraCrypt」v1.24に脆弱性 - 窓の杜 : Android 版とかあるんだねぇ 1500個以上のRingのパスワードがダークウェブ上で発見 | TechCrunch Japan 数百万人のスマートウォッチから位置情報が漏れている事実 | TechCrunch Japan  天文関連  プレスリリース - 宇宙初期に予想外の巨大炭素ガス雲を発見 －アルマ望遠鏡がとらえた宇宙最初の環境汚染－ - アルマ望遠鏡 MIT Tech Review: 人工衛星「数」競争、大量の打ち上げは本当に必要か？ 観測成果 - 巨大銀河の核は 120 億年前にはすでにできていた - すばる望遠鏡 星の文化史事典[増補新版] | 出雲 晶子 |本 | 通販 | Amazon  知財関連  NGINX、モスクワオフィスへの強制捜査の状況を説明。創業者Igor Sysoev氏への尋問はあったものの、現時点で逮捕者や拘束者はなしと － Publickey Twitterへの著作権削除要請、半年で倍増 | P2Pとかその辺のお話R : 「こうした著作権通知の半数以上は、不適切なものや虚偽、あるいは対応不能なものが占めていたため、同プラットフォームからは削除されてはいない」  その他  ポルシェとルーカスフィルムが共同制作したスターウォーズの戦闘機 | TechCrunch Japan どうしてこうなった？　Outlook系メールサービスで発見された不思議な不具合が話題に - やじうまの杜 - 窓の杜 Kubernetes 1.17正式版が登場。クラウドプロバイダーを示すラベルが正式版、ボリュームスナップショットがベータ版に － Publickey Electronフレームワーク、Node.jsなどの開発をホストする「OpenJS Foundation」に合流 － Publickey セックスワーカーへの暴力を終わらせる国際デー：FOSTAがもたらした悪影響を直視せよ | P2Pとかその辺のお話R すべてのチューリップはいずれ枯れる、2020年に差し迫る仮想通貨の価値半減のウワサ | TechCrunch Japan Challenging projects every programmer should try - Austin Z. Henley  ブログ: すべてのプログラマーが試すべき挑戦的なプロジェクト   Facebookが脱Googleへ、ハードウェアのソーシャル化に向けて新OSを開発中 | TechCrunch Japan 東大とIBM、量子コンピューター「Q」を日本で運用 - ZDNet Japan  "
    },
    {
      "title": "パッケージの管理（モジュール対応版）",
      "section": "golang",
      "description": "モジュール対応モードでは $GOPATH/src 下にある外部パッケージのコードは参照しない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/manage-packages/",
      "published": "2019-12-20T09:01:26+00:00",
      "update": "2019-12-20T09:06:47+00:00",
      "content": "随分前に「go get コマンドでパッケージを管理する」を書いたのだが，内容が古すぎて使い物にならなくなっている。 この記事を全面改訂してもいいのだが，個人的には当時の試行錯誤っぷりに懐かしい気分になったので，これはそのまま手を加えず新たに記事を起こすことにした。 特にパッケージとモジュールの関係に注意して読んでいただければ幸いである。\n前提条件 作業プラットフォームは Ubuntu で Go コンパイラのバージョンは 1.13.x (またはそれ以上) とする。 環境構築手順は以下を参考にどうぞ。\n 中古 PC に Ubuntu 環境を導入する  各環境変数の値（一部）は以下の通り。\n$ go env GOPATH GO111MODULE=\u0026#34;\u0026#34; GOARCH=\u0026#34;amd64\u0026#34; GOCACHE=\u0026#34;/home/username/.cache/go-build\u0026#34; GOENV=\u0026#34;/home/username/.config/go/env\u0026#34; GOHOSTARCH=\u0026#34;amd64\u0026#34; GOHOSTOS=\u0026#34;linux\u0026#34; GOOS=\u0026#34;linux\u0026#34; GOPATH=\u0026#34;/home/username/go\u0026#34; ... プラットフォームによって環境変数の値は異なるが凡その振る舞いは同じなので，適当に読み替えていただきたい。\nちなみに GO111MODULE の値として以下を設定できる。\n   値 内容     on 常にモジュール対応モードで動作する   off 常に GOPATH モードで動作する   auto $GOPATH 以下のディレクトリにあるパッケージは GOPATH モードで，それ以外はモジュール対応モードで動作する    GO111MODULE 未定義時の既定は auto。 なお，バージョン 1.13 からは auto で $GOPATH 以下のディレクトリで作業していても go.mod によるモジュール定義がされている場合はモジュール対応モードで動作するようになった。\nありのまま今おこった事を話すぜ！ パッケージ hello を作って実行してみる まずは $GOPATH/src/hello ディレクトリを作成し，以下のソースコード hello.go を記述する。\npackage hello import \u0026#34;fmt\u0026#34; func Hello(s string) { if s == \u0026#34;\u0026#34; { s = \u0026#34;there\u0026#34; } fmt.Println(\u0026#34;Hello\u0026#34;, s) } ついでに動作確認を兼ねてテスト用に example_test.go ファイルも作っておこう。 中身はこんな感じ。\npackage hello_test import \u0026#34;hello\u0026#34; func ExampleHello() { hello.Hello(\u0026#34;World\u0026#34;) //Output: \t//Hello World } これで\n$ go test ./... ok hello\t0.001s とかなればパッケージ hello の完成である。\n次にパッケージ hello を使うコードを書いてみる。 $GOPATH/src/sample ディレクトリを作成し，以下のソースコード sample.go を記述する。\npackage main import \u0026#34;hello\u0026#34; func main() { hello.Hello(\u0026#34;World\u0026#34;) } 先程のサンプル関数 ExampleHello() と同じ内容なので出力結果は同じになる筈である。 このコードをコンパイル\u0026amp;実行してみる。\n$ go run sample.go Hello World うんうん。 ここまでは問題なし。\nパッケージをモジュール化する では，パッケージ hello と sample をモジュール化してみよう。\nまずはパッケージ hello から。\n$ go mod init hello go: creating new go.mod: module hello $ go test ./... ok hello\t(cached) よーし，うむうむ，よーし。\nつぎはパッケージ sample。\n$ go mod init sample go: creating new go.mod: module sample $ go run sample.go build command-line-arguments: cannot load hello: cannot find module providing package hello ありゃりゃーん。 コンパイルに失敗しちゃったよ。 パッケージ hello をロードできないと言っている。 ロード？\nここで $GOPATH/pkg/linux_amd64 ディレクトリを見るも hello に対応するコンパイル済みバイナリは存在しない。 それもその筈で，最近の Go コンパイラは外部パッケージのロードとコンパイルをモジュール毎に $GOPATH/pkg/mod および $GOCACHE ディレクトリ下で行っている1。 したがってモジュール対応モードでは $GOPATH/src 下にある外部パッケージのコードは参照しないのだ。\nさて，困ったね。\n解決法1： 強制的に GOPATH モードにする 環境変数 GO111MODULE の値を off にすることにより， go.mod の有無に依らず強制的に GOPATH モードでビルドすることができる。 上述の例であれば\n$ go env -w GO111MODULE=off $ go run sample.go Hello World とすればよい2。\nただし Go コンパイラの開発側は GOPATH を将来的に無くす方向で議論および開発を進めているため（後方互換性の観点からバージョン 1.x のうちは大丈夫だろうが）このやり方はあまりオススメできない。 暫定措置というやつである。\n解決法2： replace ディレクティブを使う sample パッケージの go.mod に以下のディレクティブを追記することで，ローカルにある hello パッケージのコードを参照するようになる。\nreplace hello =\u0026gt; ../hello replace ディレクティブは非常に便利なのだが，どうしても環境依存の記述になってしまうのが欠点である。 たとえば外部の CI/CD サービスと組み合わせる場合はローカルの環境と同じになるように設定をチューニングする必要があるかもしれない。 これも暫定措置だよね。\n解決法3： モジュール・パッケージ構成を再設計する まぁ，身も蓋もない話だが，最終的にはモジュールおよびパッケージの構成を再設計するしかないだろう。\n今回の例で言えば sample パッケージの構成を\n$ tree sample sample ├── go.mod ├── hello │ ├── example_test.go │ └── hello.go └── sample.go 1 directory, 4 files として sample.go を\npackage main import \u0026#34;sample/hello\u0026#34;  func main() { hello.Hello(\u0026#34;World\u0026#34;) } と書き換えればいい。 hello パッケージを sample モジュール内のサブ・パッケージとして再構成するのである。\nGo 言語における「モジュール」は「パッケージ（群）＋バージョン」であり，しかもバージョン管理は git 等 VCS の機能に依るところが大きい。 故に「1モジュール＝1リポジトリ」を目安にすべきだろう（でないとバージョン管理が煩雑になる）。 その上で「モジュール＝リポジトリ」内に関係の密なパッケージ（群）を組み込んでいくというのが Go 言語プログラミング設計の基本的な進め方になると思うのだが，どうだろう。\nブックマーク   Goモジュールモードでモジュール内に作ったモジュールを扱う - Qiita : モジュール内にサブ・モジュールを構成すること自体は可能である\n  モジュール対応モードへの移行を検討する\n  Go モジュールのバージョン管理\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n   古いバージョンの Go コンパイラでは環境変数 GOCACHE に off をセットすることでキャッシュ利用を無効化することができたが，最近のバージョンでは off は設定できなくなっている。 \u0026#x21a9;\u0026#xfe0e;\n コマンド go env -w で設定した環境変数の値を削除するには -u オプションを使う。例えば go env -u GO111MODULE のように使う。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "strings.EqualFold 関数を使え",
      "section": "golang",
      "description": "大文字小文字を無視した文字列比較では素直に strings.EqualFold() 関数を使いましょう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/use-equalfold-function/",
      "published": "2019-12-15T09:01:19+00:00",
      "update": "2019-12-15T09:06:48+00:00",
      "content": "GolangCI が吐くレビュー結果を基にチマチマとコードを直していたのだが，その中で\nSA6005: should use strings.EqualFold(a, b) instead of strings.ToLower(a) == strings.ToLower(b) if strings.ToLower(left) == strings.ToLower(right) { という指摘があった。 いや，もの知らずでゴメンペコン。\nstrings.EqualFold() 関数ってなんじゃら？ と思ってソースコードを見たら\n// EqualFold reports whether s and t, interpreted as UTF-8 strings, // are equal under Unicode case-folding. func EqualFold(s, t string) bool { ... } と書かれている。\nふむふむ。 では試してみよう。 こんな感じのコードを書いて\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; ) func main() { lefts := []string{\u0026#34;go\u0026#34;, \u0026#34;ｇｏ\u0026#34;} rights := []string{\u0026#34;Go\u0026#34;, \u0026#34;GO\u0026#34;, \u0026#34;go\u0026#34;, \u0026#34;Ｇｏ\u0026#34;, \u0026#34;ＧＯ\u0026#34;, \u0026#34;ｇｏ\u0026#34;} for _, left := range lefts { for _, right := range rights { fmt.Printf(\u0026#34;%s == %s : %v\\n\u0026#34;, left, right, strings.EqualFold(left, right)) } } } 実行してみると\n$ go run sample1.go go == Go : true go == GO : true go == go : true go == Ｇｏ : false go == ＧＯ : false go == ｇｏ : false ｇｏ == Go : false ｇｏ == GO : false ｇｏ == go : false ｇｏ == Ｇｏ : true ｇｏ == ＧＯ : true ｇｏ == ｇｏ : true ってな感じになった。 全角と半角は区別してくれるらしい。 Unicode の文字種をきちんと判別しているということだ。\nちなみに strings.ToLower() 関数を使って\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; ) func main() { lefts := []string{\u0026#34;go\u0026#34;, \u0026#34;ｇｏ\u0026#34;} rights := []string{\u0026#34;Go\u0026#34;, \u0026#34;GO\u0026#34;, \u0026#34;go\u0026#34;, \u0026#34;Ｇｏ\u0026#34;, \u0026#34;ＧＯ\u0026#34;, \u0026#34;ｇｏ\u0026#34;} for _, left := range lefts { for _, right := range rights { fmt.Printf(\u0026#34;%s == %s : %v\\n\u0026#34;, left, right, (left == strings.ToLower(right))) \t} } } とやっても同じ結果になる。\nstrings.EqualFold() 関数と strings.ToLower() 関数でどっちが速いかなんてのは考えるまでもないのだが，いちおう試しておこう。 こんな感じのコードでいいかな。\npackage equalfold import ( \u0026#34;strings\u0026#34; \u0026#34;testing\u0026#34; ) var ( lefts = []string{\u0026#34;go\u0026#34;, \u0026#34;ｇｏ\u0026#34;} rights = []string{\u0026#34;Go\u0026#34;, \u0026#34;GO\u0026#34;, \u0026#34;go\u0026#34;, \u0026#34;Ｇｏ\u0026#34;, \u0026#34;ＧＯ\u0026#34;, \u0026#34;ｇｏ\u0026#34;} rights2 = []string{\u0026#34;go\u0026#34;, \u0026#34;go\u0026#34;, \u0026#34;go\u0026#34;, \u0026#34;ｇｏ\u0026#34;, \u0026#34;ｇｏ\u0026#34;, \u0026#34;ｇｏ\u0026#34;} ) func BenchmarkEqualCase(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { for _, left := range lefts { for _, right := range rights2 { if left == right { \t_ = left } else { _ = right } } } } } func BenchmarkEqualLower(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { for _, left := range lefts { for _, right := range rights { if left == strings.ToLower(right) { \t_ = left } else { _ = right } } } } } func BenchmarkEqualFold(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { for _, left := range lefts { for _, right := range rights { if strings.EqualFold(left, right) { \t_ = left } else { _ = right } } } } } BenchmarkEqualCase は他の2つのコードとの比較用に書いてみた。 実行結果はこんな感じ。\n$ go test -bench Equal -benchmem goos: linux goarch: amd64 pkg: sample BenchmarkEqualCase-4 32061360\t36.2 ns/op\t0 B/op\t0 allocs/op BenchmarkEqualLower-4 1367802\t869 ns/op\t64 B/op\t8 allocs/op BenchmarkEqualFold-4 3149362\t378 ns/op\t0 B/op\t0 allocs/op PASS ok sample\t4.748s 表にまとめておこう。\n   関数名 実行時間 Alloc サイズ Alloc 回数     BenchmarkEqualCase 36.2 ns 0 bytes 0   BenchmarkEqualLower 869 ns 64 bytes 8   BenchmarkEqualFold 378 ns 0 bytes 0    BenchmarkEqualCase と BenchmarkEqualFold の比較では BenchmarkEqualFold のほうが10倍の時間がかかっているが，それよりも BenchmarkEqualLower の処理のほうが圧倒的に遅いことが分かる。 まぁメモリ・アロケーションが絡むとねぇ。\nというわけで，大文字小文字を無視した文字列比較では素直に strings.EqualFold() 関数を使いましょう，という話でした。\n【付録】 “NUL” 文字の比較 まるきし余談ではあるが\n Big Sky :: Go で大文字小文字無視の文字列比較ベンチマーク  この記事にある isDevNull3 関数について\nfunc isDevNull3(name string) bool { return strings.ToLower(name) == \u0026#34;nul\u0026#34; } strings.EqualFold() 関数を使うよう書き換えてみる。\nfunc isDevNull3(name string) bool { return strings.EqualFold(name, \u0026#34;nul\u0026#34;) } これでベンチマークテストを実行すると\ngoos: linux goarch: amd64 pkg: sample/lowercase BenchmarkS1-4 41640913\t27.2 ns/op\t0 B/op\t0 allocs/op BenchmarkS2-4 35464141\t30.7 ns/op\t0 B/op\t0 allocs/op BenchmarkS3-4 12628962\t94.4 ns/op\t0 B/op\t0 allocs/op PASS ok sample/lowercase\t3.578s メモリ・アロケーションが発生しなくなり，かなり速くなる。 まぁ，それでもいっちゃん遅いのだが（笑）\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "GolangCI でコード・レビューを自動化する",
      "section": "golang",
      "description": "リポジトリ全体をチェックしてくれるレビュー・サービスの存在はありがたい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/code-review-with-golangci/",
      "published": "2019-12-15T05:05:25+00:00",
      "update": "2019-12-15T05:05:43+00:00",
      "content": "以前「golangci-lint に叱られる」で\n GolangCI も気になるが，それはまたいつか\n と書いたが，今回はその話。\nGolangCI は GitHub と連携して機能するコード・レビュー・サービスで， GitHub 上のリポジトリにある Go 言語コードに lint をかけて結果を報告してくれる。 Pull request とも連携してレビュー結果を上げてくれるので，レビューにかかる労力をかなり引き下げることができる1。\nサインアップは GitHub アカウントで行うことができる。 サインアップに成功したらリポジトリ一覧画面に行けるようになる2。\n 連携したいリポジトリに [Connect] するとレビューを開始するのだが，レビュー結果が表示されるまで結構時間がかかるみたい。 実は随分前に GolangCI に登録していくつかのパッケージと連携させていたのだが，なかなか処理が終わらないので，そのまま綺麗サッパリ忘れ去っていたのだった（笑）\nレビューが終わったリポジトリの [Report] を開くとこんな感じの画面になる。 これは問題がなかったリポジトリの場合：\n こっちは問題が発見されたリポジトリ：\n このレポート結果を基にコードを修正する。 当然ながら master ブランチ上で作業をしないこと。\n修正を commit \u0026amp; push し，修正を行ったブランチから pull request をかける。 GitHub 側は pull request したコードに対して連携しているサービスを呼び出して事前チェックを行う。 チェックにパスすればこんな感じになる。\n 問題があれば “Details” で問題箇所が示されるので，修正を行って再度 commit \u0026amp; push する。\nGolangCI にはコマンドライン・ツールも用意されていて IDE やテキストエディタなどとも連携可能なのだが3，どうしても見落としがあるみたいで，リポジトリ全体をチェックしてくれるレビュー・サービスの存在はありがたい。\nさて，他のパッケージも修正するか。\nブックマーク  無料で使える Go 言語の CI サービス『GolangCI』を使ってみる ｜ Developers.IO  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n  組込み開発者におくるMISRA‐C:2004―C言語利用の高信頼化ガイド MISRA‐C研究会 (編集) 日本規格協会 2006-10-01 単行本 4542503461 (ASIN), 9784542503465 (EAN), 4542503461 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  私が持っているのはこれよりひとつ古い版だが，まぁいいか。むかし，車載用の組み込みエンジニアをやっていた頃は必読書として読まされました。今はもっと包括的な内容のものがあるはず。\nreviewed by Spiegel on 2019-02-06 (powered by PA-APIv5)\n   とはいえ GolangCI がチェックしてくれるのは lint レベルのコード・チェックなので，ビジネスロジック等の妥当性は人間が判断する必要がある。言い方を変えれば GolangCI で lint レベルのチェックを事前に行っておけば，人間はビジネスロジック等のチェックに専念することができる。 \u0026#x21a9;\u0026#xfe0e;\n 既定では公開リポジトリのみが対象となる。お金を払えばプライベート・リポジトリもチェックできるらしいが試していない。 \u0026#x21a9;\u0026#xfe0e;\n ATOM エディタの場合は go-plus パッケージで Linter に golangci-lint を指定できる。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2019-12-14 のブックマーク",
      "section": "bookmarks",
      "description": "「WebAssemblyがW3Cの勧告に到達。「WebAssembly Core Specification 」「WebAssembly Web API」「WebAssembly JavaScript Interface 」の3つ」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/12/14-bookmarks/",
      "published": "2019-12-14T12:28:46+00:00",
      "update": "2019-12-14T12:30:52+00:00",
      "content": "リリース情報  Windowsデスクトップアプリ開発にも対応した「.NET Core 3.1」が正式リリース。LTS版として3年間の長期サポート対象 － Publickey  .NET Core その89 - Snap版 .NET Core 3.1.0をインストールするには - kledgeb   WebAssemblyがW3Cの勧告に到達。「WebAssembly Core Specification 」「WebAssembly Web API」「WebAssembly JavaScript Interface 」の3つ － Publickey 40K GitHub Stars Edition | Hugo  セキュリティ＆プライバシー関連  「世界最悪級の流出」と報じられた廃棄ハードディスク転売事案についてまとめてみた - piyolog 自治体IaaS「Jip-Base」、いまだ全面復旧できず\u0026ndash;データ処理の不具合で目途立たず - ZDNet Japan  類例報告過去4件の不具合で発生した自治体専用IaaSのシステム障害についてまとめてみた - piyolog   トレンドマイクロを騙るフィッシング詐欺サイトについて調べてみた - piyolog 「OpenSSL 1.1.1、1.0.2」にバッファオーバーフローの危険がある脆弱性 | Think IT（シンクイット） Reforming CDA 230 - Schneier on Security AWSの多要素認証に1passwordが使えたけど使っちゃダメだと思った話 - Qiita Extracting Data from Smartphones - Schneier on Security Scaring People into Supporting Backdoors - Schneier on Security  Computer Crime Hype - Schneier on Security   「Node.js」に「npm」由来の脆弱性、修正版のリリースを予告 - 窓の杜 スマート家電メーカーは見聞きした情報を政府に開示するのか？ | TechCrunch Japan  天文関連  MIT Tech Review: 微小重力環境で火はどう燃えるのか？ISSで着火実験へ NRL-camera aboard NASA spacecraft confirms asteroid phenomenon | News X Marks the Spot: NASA Selects Site for Asteroid Sample Collection - OSIRIS-REx Mission 銀河の「電波指紋認証」の試み　〜銀河系近くにある3つの銀河における分子のカタログが完成！〜  知財関連  Our Book, “Creative Commons for Educators and Librarians,” Is Now Available - Creative Commons Creative Commons Receives an AWS Imagine Grant to Improve CC Search - Creative Commons \u0026lsquo;Copyright Troll\u0026rsquo; Bypasses Federal Court To Get \u0026lsquo;Cheap\u0026rsquo; Piracy Settlements - TorrentFreak Fake: DMCA Notice Targeting Apple Jailbreaks on Reddit Was Fraudulent - TorrentFreak WinRAR「海賊版は使わないでほしい。というかそもそも実質無料で使い続けられるはずですが……」 | P2Pとかその辺のお話R 全世界で使われるWebサーバーの開発元「NGINX」にロシア警察の強制捜査、従業員拘束＆機器押収へ - GIGAZINE  その他  「JavaScript」を主要言語として最も使っているのはフルスタックエンジニア - ZDNet Japan Uberの致命的な事故に関する集計結果は低い値を示しているが、重要な数字が除外されている | TechCrunch Japan 関数型プログラミングへの移行進む「Excel」\u0026ndash;重要な「動的配列」 - ZDNet Japan SpaceはSlackを超える開発者向け新プロジェクト管理プラットフォームになるか | TechCrunch Japan Yubikeyでもろもろ検証してみました話 - Qiita Failure Modes in Machine Learning - Schneier on Security Kubernetesベースのコンテナー基盤「HPE Container Platform」\u0026ndash;ステートフルなアプリをそのまま稼働 - ZDNet Japan ゼロトラスト：10年の年月を経て実現するセキュリティコンセプト Chris Hines: Product Marketing - ZDNet Japan ネガフィルムにスマホをかざすとプリント写真のように見えるアプリ「NEGAVIEW PRO」 - デザインってオモシロイ -MdN Design Interactive- Webで縦書きなどを実現する「CSS Writing Modes Level 3」、ついにW3Cの「勧告」に － Publickey Netflixの「Metaflow」 Pythonライブラリーがオープンソースに - ZDNet Japan ヘリコプターシェアのAirXが広島エリアに進出、ヘリコプタークルージングプランを販売開始 | TechCrunch Japan ウェブ上の情報を記録・保存する「インターネット・アーカイブ」の存続をひっそりと脅かしているものとは？ - GIGAZINE Making LibreOffice a Friendly Platform for Indigenous People in Taiwan - The Document Foundation Blog MIT Tech Review: 未公表論文を独占入手：中国・遺伝子編集ベビー問題、専門家が語る13の疑問 MIT Tech Review: 完全電気商用飛行機が初飛行に成功、電化への一歩踏み出す ISP Column - December 2019  ブログ: バッファの大きさ   O'Reilly Japan - Real World HTTP ミニ版 Behind the One-Way Mirror: A Deep Dive Into the Technology of Corporate Surveillance | Electronic Frontier Foundation  EFF on the Mechanics of Corporate Surveillance - Schneier on Security   ナイジェリア：政権批判が「大統領へのサイバーストーキング」にあたるとしてジャーナリストが逮捕、起訴される | P2Pとかその辺のお話R The LibreOffice Documentation Team Announces the LibreOffice Online Guide - The Document Foundation Blog Huluが「広告なし」で視聴できる新広告フォーマットを導入 | TechCrunch Japan 「Python 3」移行で検討すべき対策\u0026ndash;「Python 2」サポート終了が目前 - ZDNet Japan  "
    },
    {
      "title": "#shimanego より： Docker 上で Go 言語コードを実行する",
      "section": "remark",
      "description": "いちから Docker を勉強してみるかな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/12/golang-on-docker/",
      "published": "2019-12-12T13:56:50+00:00",
      "update": "2019-12-12T14:16:07+00:00",
      "content": "Shimane.go#02 に参加してきた。 年末でめっさ忙しく，参加できないんじゃないかと思ったよ。 辿り着けてよかった。\nShimane.go#02 では「go-lang on docker」というタイトルで LT が行われた。 まぁ Go 言語未経験の人も多いし，本格的な活動は年が明けてからということなので，今回は軽いジャブというところだろうか。\nそういや，玩具用のパソコン買ったら Docker で遊ぼうと思ってたっけ。 ちょうどいいや。\nDocker のインストール LT では Docker が使える前提で解説されていたが，私はまずインストールするところから。 Ubuntu へのインストールは以下が参考になる。\n Get Docker Engine - Community for Ubuntu | Docker Documentation  まずはインストールに必要なパッケージを APT でインストールする。\n$ sudo apt install apt-transport-https ca-certificates curl software-properties-common 既にインストール済みのパッケージについてはちゃんとスキップしてくれるので大丈夫。\n次に Docker インストール用のリポジトリと署名検証用の OpenPGP 公開鍵を追加する。\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - $ sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; ただし，現時点（2019-12-12）では Ubuntu 19.10 用のリポジトリは用意されていないので， ひとつ前（19.04）のリポジトリを強制的に追加してお茶を濁しておく。\n$ sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu disco stable\u0026#34; Ubuntu 19.10 用のリポジトリが出たら入れ替えないと。\nここまでくれば，あとは普通に apt install すればよい。\n$ sudo apt update $ sudo apt install docker-ce docker-ce-cli containerd.io ここで動作確認しておこう。 みんな大好き “Hello World” （笑）\n$ sudo docker run hello-world Unable to find image \u0026#39;hello-world:latest\u0026#39; locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:4fe721ccc2e8dc7362278a29dc660d833570ec2682f4e4194f4ee23e415e1064 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \u0026#34;hello-world\u0026#34; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ おおっ，動いた！\ndocker グループを追加する。 上の実行例を見れば分かるが，インストール直後は root 以外のユーザには docker コマンドを動かす権限がない。 ユーザ username に権限を付与するには docker グループを追加すればよい。 こんな感じ。\n$ sudo usermod -aG docker username これでログインし直せば1\n$ docker run hello-world としても “permission denied” と怒られることはなくなる。\nDocker 上で Go 言語コードを実行する LT ではサンプルコードとして以下のリポジトリを紹介された。\n gitkado/docker-run-go-sample  このリポジトリを取ってきて\n$ docker run --rm -v $PWD:/go golang:latest go run sample.go ... HelloWorld! となれば成功！\n思ったより取っつきやすいな，Docker。 もっと面倒くさいのかと思ってた。 まぁ，ネットワーク周りを弄りだすと面倒なんだろうけど。\nいちからちゃんと勉強してみるかな。\nブックマーク  DockerをLinux(Ubuntu 14.04 LTS)にインストールする方法と解説 | tracpath:Works Ubuntu 19.10にDockerをインストールする - Qiita  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n   何故か私の環境ではログインし直しただけではダメで再起動する必要があった。なんで？ これのせいでしばらくハマっちゃったよ。今日のイベントで私の周囲の人はブツブツ独り言をいうおっさんがいてさぞ気持ち悪かったことだろう。ゴメンペコン \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "警察にできることは犯罪者にもできる",
      "section": "remark",
      "description": "暗号が国家や軍の所有物だったのは四半世紀以上も前の話である。いい加減目を覚ましていただきたい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/12/cypherpunk/",
      "published": "2019-12-11T12:07:02+00:00",
      "update": "2019-12-14T12:26:25+00:00",
      "content": "ホント，懲りないよなぁ。\n AppleやFacebookが法執行機関向けバックドアを作らないなら暗号化を法律で規制する――米上院議員 - ITmedia NEWS   Facebookは今回の公聴会の前に、ウィリアム・バー米司法長官宛の公開書簡で、「あなたが要求する“バックドア”は、犯罪者、ハッカー、抑圧的な政権へのプレゼントになってしまう。バックドアはそうした人々がわれわれのシステムに侵入することを許し、プラットフォーム上の人々を危険にさらす。バックドアを1つの目的のためだけに作成し、他の目的で開けないようにすることは技術的に不可能だ」と説明した。 via AppleやFacebookが法執行機関向けバックドアを作らないなら暗号化を法律で規制する  警察や軍といったいわゆる「暴力装置」は「暴力」を背景に国民・市民・人民を統制するもので，前提としてそれが圧倒的な power を有している必要がある。 これは純然たる「暴力」であれば通用するかもしれないが「情報力」に関しては前提が崩れてしまう。 理由は単純で\n警察にできることは犯罪者にもできる からだ。\nこの問題に対して，世の為政者達は「暴力装置」の「情報力」不足を相手側を（法によって）弱めることで補おうとしているようだが，法から逸脱している犯罪者には効果がない。 況んや国家に敵対する存在においてをや，である。 結果，国家や法に従順な私達「羊」だけが馬鹿を見ることになる。 こうなると負のスパイラルだ。 セキュリティ・リスク管理の観点からは最悪の展開と言える1。\n暗号が国家や軍の所有物だったのは四半世紀以上も前の話である。 「イミテーション・ゲーム」はとうに終わっているのだ。 いい加減目を覚ましていただきたい。\nそういう意味で，スティーブン・レビーの『暗号化』はマジで必読書だと思うのだが，事実上の絶版だよねぇ。 せめて Kindle 化してくれんものか。\nブックマーク  MIT Tech Review: 米議会がアップル・FBにバックドア設置を要求、「法制化」脅しも  Beware the Four Horsemen of the Information Apocalypse: terrorists, drug dealers, kidnappers, and child pornographers. Seems like you can scare any public into allowing the government to do anything with those four. via Computer Crime Hype - Schneier on Security  Since the terrorist attacks of 9/11, the US government has been pushing the terrorist scare story. Recently, it seems to have switched to pedophiles and child exploitation. via Scaring People into Supporting Backdoors - Schneier on Security  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2018-12-16 (powered by PA-APIv5)\n  グリゴリの捕縛 白田 秀彰  2001-11-26 (Release 2014-09-17) 青空文庫 4307 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30 (powered by aozorahack)\n  イミテーション・ゲーム／エニグマと天才数学者の秘密(字幕版) ベネディクト・カンバーバッチ (出演), キーラ・ナイトレイ (出演), マシュー・グード (出演), ロリー・キニア (出演), モルテン・ティルドゥム (監督), グラハム・ムーア (Writer)  (Release 2015-10-02) Prime Video B015SAFU42 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  主人公であるアラン・チューリングは今もなお「天才」と称される数学者であり，「コンピュータの父」と呼ばれるほどの偉人である。そしてチューリングの偉業のひとつが，旧ナチス・ドイツの暗号機械「エニグマ」の解読である。作品はそのエニグマの解読を主軸に物語を展開していく。感想はこちら。\nreviewed by Spiegel on 2019-12-11 (powered by PA-APIv5)\n   もちろんこれは「暗号」に限る話ではない。セキュリティ・リスク管理というのは（たとえそれが「ゼロ・トラスト」と呼ばれるものであっても）何らかの「信用」をベースに回っているわけで，そのベースが崩れれば試合終了である。最近の例では「PC 廃棄業者（の従業員）がストレージを転売してた」話とか典型的だろう。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Git v2.24.1 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は多くのセキュリティ・アップデートを含むため，必ず対応すること。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/12/git-2_24_1-is-released/",
      "published": "2019-12-11T01:25:03+00:00",
      "update": "2019-12-11T13:21:28+00:00",
      "content": "Git v2.24.1 を含む複数のバージョンがリリースされた。 今回は多くのセキュリティ・アップデートを含むため，必ず対応すること。\n [ANNOUNCE] Git v2.24.1 and others  対象となるバージョンは v2.14.x から v2.24.x までの各マイナーバージョン。 改修対象となる脆弱性の CVE ID はバージョンごとに異なるが v2.24.1 の場合は以下の通り（Git v2.24.1 and others より抜粋）。\n CVE-2019-1348: The --export-marks option of git fast-import is exposed also via the in-stream command feature export-marks=... and it allows overwriting arbitrary paths. CVE-2019-1349: When submodules are cloned recursively, under certain circumstances Git could be fooled into using the same Git directory twice. We now require the directory to be empty. CVE-2019-1350: Incorrect quoting of command-line arguments allowed remote code execution during a recursive clone in conjunction with SSH URLs. CVE-2019-1351: While the only permitted drive letters for physical drives on Windows are letters of the US-English alphabet, this restriction does not apply to virtual drives assigned via subst \u0026lt;letter\u0026gt;: \u0026lt;path\u0026gt;. Git mistook such paths for relative paths, allowing writing outside of the worktree while cloning. CVE-2019-1352: Git was unaware of NTFS Alternate Data Streams, allowing files inside the .git/ directory to be overwritten during a clone. CVE-2019-1353: When running Git in the Windows Subsystem for Linux (also known as \u0026ldquo;WSL\u0026rdquo;) while accessing a working directory on a regular Windows drive, none of the NTFS protections were active. CVE-2019-1354: Filenames on Linux/Unix can contain backslashes. On Windows, backslashes are directory separators. Git did not use to refuse to write out tracked files with such filenames. CVE-2019-1387: Recursive clones are currently affected by a vulnerability that is caused by too-lax validation of submodule names, allowing very targeted attacks via remote code execution in recursive clones. CVE-2019-19604: The change to disallow submodule.\u0026lt;name\u0026gt;.update=!command entries in .gitmodules which was introduced v2.15.4 (and for which v2.17.3 added explicit fsck checks) fixes the vulnerability in v2.24.x1 where a recursive clone followed by a submodule update could execute code contained within the repository without the user explicitly having asked for that.  Git for Windows は既に v2.24.1.windows.2 をリリースしている。\n Release Git for Windows 2.24.1(2) · git-for-windows/git · GitHub  Ubuntu の APT の標準リポジトリは最新版を提供してないが， USN-4220-1 によると各バージョンの git でアップデートを行っているようだ。 なお Ubuntu Git Maintainers が提供している PPA 版では v2.24.1 がリリースされている（2019-12-11 追記）。\n Git stable releases : “Ubuntu Git Maintainers” team  アップデートは計画的に。\n以下は愚痴： やっぱ Windows のサブシステムに Linux を入れるってのは筋が悪いよな。 ライセンス云々を抜きにしてもファイルシステムの根底が違うんだから両者は相容れないだろう。 Windows が心を入れ替えてファイルシステムを UNIX 互換に履き替えるってのならともかく，サブシステムでお茶を濁そうとする WSL は（Windows Vista 以来の）最大の失敗作な気がする。そもそも文字エンコードディングからして今だに DBCS の呪いから抜け出せないようだし2。\nブックマーク   「Git」に複数の脆弱性、Windowsユーザーはとくに注意 - 窓の杜\n  PPA から Git をインストールする\n  Ubuntu アプリケーションにおけるセキュリティ・アップデート一覧\n    CVE-2019-19604 の説明文の v2.24.x は 2.20.x 以降の各バージョンに適宜読み替えていただきたい。 \u0026#x21a9;\u0026#xfe0e;\n 文字集合および文字エンコーディングの歴史については拙文を参考にどうぞ。ただし原文（非公開）は20年以上前に書かれたもので既に内容が古いのはあしからずご了承の程を。つまり文字エンコーディングの問題はそれだけ根深いってことなんだけど。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "20年ぶりに買った「理科年表」は「けもフレ」とコラボしていた",
      "section": "remark",
      "description": "要するに丸善出版のロゴマークが「みみずく」なので博士と助手が抜擢されたらしい（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/12/chronological-scientific-tables-2020-and-kemono-friends/",
      "published": "2019-12-08T05:21:25+00:00",
      "update": "2019-12-08T05:21:38+00:00",
      "content": "先日来た国立天文台メールニュースに『理科年表 2020』刊行の案内が載っていて\n 暦部のトピックスは、新元号「令和」にちなんだ話題を集めた「時には昔の 話を」と、例年とがらりと変わった「令和元年・令和2年の祝日と休日につい て」の2本立てで、令和時代の始まりを特集しています。\n[\u0026hellip;]\n物理／化学部は、2019年5月に施行された国際単位系 (SI) の定義の改定を受 けて内容の大改訂を実施しました。トピックス「SI基本4単位の定義改定」で は改訂の内容を詳細に解説しています。\n via 国立天文台 メールニュース　No.211 (2019年12月5日発行)  と書かれていたので，20年ぶり1 に「理科年表」を買うことにしたのだが\n 「理科年表」に博士と助手ががが  なぜ「けもフレ」とコラボ？ いろいろ御託が書いてあったが，要するに丸善出版のロゴマークが「みみずく」なので博士と助手が抜擢されたらしい（笑） コラボでは特定の本屋で買うとグッズが貰えるそうだが，島根には対象書店がない！ 島根県は丸善の商圏外ってか，ちっくしょー！ \u0026hellip;まぁ，いいや（どうでも）。 どっちみち本屋で買うつもりなど微塵もなかったし。\n気を取り直して\u0026hellip;\n「時には昔の話を」は改元時に Web 上に掲載された\n 時には昔の話を - 国立天文台暦計算室  を収録したもののようだ。\n2019年5月に施行された新しい国際単位系（SI）では遂にキログラム原器が廃止になった。 代わりにプランク定数，素電荷，アボガドロ定数，ボルツマン定数を定義値として SI 基本4単位（キログラム，アンペア，モル，ケルビン）を再定義している2。 これでようやく人工物による「原器」が単位系から完全に排除されたわけだ。\n2020年版「理科年表」は保存用に買っておくべきだろう。\n参考図書  理科年表 2020 国立天文台 (編集) 丸善出版 2019-11-20 文庫 4621304259 (ASIN), 9784621304259 (EAN), 4621304259 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  日本における令和への改元や国際単位系（SI）の定義改定などに関するトピックを多く掲載。2020年版は（保存用として）買いかも。\nreviewed by Spiegel on 2019-12-08 (powered by PA-APIv5)\n  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n  天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいる。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\n  気象がわかる数式入門 二宮 洸三 (著) オーム社 2006-07-01 単行本 4274202712 (ASIN), 9784274202711 (EAN), 4274202712 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  気象に入る前に「次元」や「単位系」といった基本中の基本の話から始まり，そこから誤差論（の最初のほう）とかだんだんと核心に入っていく。順番に読んでいけば無理なく「気象」を始めとする物理学の初歩が理解できるよう構成されている教科書的な内容。これが私の子供の頃にあったらなぁ。\nreviewed by Spiegel on 2019-05-04 (powered by PA-APIv5)\n   学生時代は毎年のように「理科年表」を買っていたが，天文学に限れば「天文年鑑」で事足りるし，2000年版を最後に買わなくなっていた。今回も2020年版を買ったら当分買わないだろう（笑） \u0026#x21a9;\u0026#xfe0e;\n もちろん定義しただけではダメで，定義に基づいて対象物を精度よく測定できなければならない。キログラム原器を廃止するという方向性は2011年の第24回 CGPM で承認されたが，定義に基づく（特にプランク定数の）測定が精度よく決まらず，改定が先送りになっていた経緯がある。 \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
