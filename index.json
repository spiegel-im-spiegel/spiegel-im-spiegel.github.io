{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Go 1.18 がリリースされた",
      "section": "release",
      "description": "個人的には workspace mode についてはちゃんと調べて使えるようにしたい",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/03/go-1_18-is-released/",
      "published": "2022-03-19T04:38:06+00:00",
      "update": "2022-03-19T04:41:38+00:00",
      "content": "既に Gopher たちの間では話題沸騰ですが（笑）， Go 1.18 がリリースされました。\n Go 1.18 is released Go 1.18 is released! - The Go Programming Language Go 1.18 Release Notes - The Go Programming Language  ブログ記事を参考にポイントを紹介すると\n Generics Fuzzing Workspaces 20% Performance Improvements  といったところか。 個人的には workspace mode についてはちゃんと調べて使えるようにしたいと考えている。\nGo modules have been almost universally adopted, and Go users have reported very high satisfaction scores in our annual surveys. In our 2021 user survey, the most common challenge users identified with modules was working across multiple modules. In Go 1.18, we’ve addressed this with a new Go workspace mode, which makes it simple to work with multiple modules. via Go 1.18 is released!  Generics は自分では積極的に使おうという気は起きないので，他の人のパッケージに含まれていればお世話になる感じかなぁ。 とりあえず，この辺はいじってみたい。\n GavinClarke0/lockless-generic-ring-buffer: Single producer and multi-reader lockless ring buffer in go using generics from the go 1.18beta release. It is significantly faster than channels with the added type safety of generics compared to ring buffers using interfaces.  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.18.linux-amd64.tar.gz）を取ってきてインストールすることを強く推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.18.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.18.linux-amd64.tar.gz $ sudo mv go go1.18 $ sudo ln -s go1.18 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.18 linux/amd64 アップデートは計画的に。\nブックマーク  Big Sky :: Go の http パッケージに MaxBytesHandler が入った。 go1.18で入ったhttp.MaxBytesHandlerの中身を見てみた Go1.18から導入されるnetip package/netip-package - Speaker Deck What\u0026rsquo;s new in Go 1.18? - Speaker Deck What Is the Go Workspace Mode - Speaker Deck [shared] 20220218 Go 1.18 Fuzzing - Google スライド Go 1.18で追加されるstrings/bytes.Cutとsync.Mutex.TryLockについて - Google スライド Go言語のジェネリクス入門(1)  Go言語のジェネリクス入門(2) インスタンス化と型推論   strings.Cut と strings.SplitN はどっちが速いか Big Sky :: text/template と html/template に continue/break が入った。 Go言語がGenericsを導入、過去最大の変更となる「Go 1.18」正式版リリース － Publickey Go 1.18で導入されたnet/netip package  参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n "
    },
    {
      "title": "379年前のアルゴリズムを使って RSA 暗号鍵を破った話",
      "section": "remark",
      "description": "例によって Bruce Schneier さんの記事より",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/03/using-379-year-old-algorithm-to-crack-crypto-keys/",
      "published": "2022-03-19T03:20:03+00:00",
      "update": "2022-03-19T04:09:38+00:00",
      "content": "例によって Bruce Schneier さんの記事経由：\n Fermat Attack on RSA Researcher uses 379-year-old algorithm to crack crypto keys found in the wild | Ars Technica  RSA 公開鍵暗号の仕組みについては結城浩さんの『暗号技術入門』の第5章に分かりやすく解説されているので，まずはそちらを参照のこと。\n今回のポイントとなる部分だけ紹介すると RSA 公開鍵暗号の鍵ペアを生成する際には最初に2つの大きな素数 $(p,q)$ を用意する。 $(p,q)$ を掛け合わせた $N=p \\times q$ は公開鍵にも秘密鍵にも使われる値だが「2つの大きな素数を合成した値を（元の素数を知らずに）因数分解するのは難しい」ため $N$ から秘密鍵を推測するのは難しいとされている。 当然ながら素数 $(p,q)$ の組み合わせは第三者に知られないよう管理する必要がある。\nThe security of RSA keys depends on the difficulty of factoring a key\u0026rsquo;s large composite number (usually denoted as N) to derive its two factors (usually denoted as P and Q). When P and Q are known publicly, the key they make up is broken, meaning anyone can decrypt data protected by the key or use the key to authenticate messages. via Researcher uses 379-year-old algorithm to crack crypto keys found in the wild  ただし，素数 $(p,q)$ が互いに近い値の場合は容易に因数分解できることも大昔から知られている。\nCryptographers have long known that RSA keys that are generated with primes that are too close together can be trivially broken with Fermat\u0026rsquo;s factorization method. French mathematician Pierre de Fermat first described this method in 1643.\nFermat\u0026rsquo;s algorithm was based on the fact that any odd number can be expressed as the difference between two squares. When the factors are near the root of the number, they can be calculated easily and quickly. The method isn\u0026rsquo;t feasible when factors are truly random and hence far apart.\n via Researcher uses 379-year-old algorithm to crack crypto keys found in the wild  で，実際に一部の暗号製品で「鍵サイズは大きいけど容易に破られる暗号鍵」を生成してしまうものがあったそうで，これは CVE-2022-26320 として詳細が公開されている。\nThe Rambus SafeZone Basic Crypto Module before 10.4.0, as used in certain Fujifilm (formerly Fuji Xerox) devices before 2022-03-01, Canon imagePROGRAF and imageRUNNER devices through 2022-03-14, and potentially many other devices, generates RSA keys that can be broken with Fermat’s factorization method. This allows efficient calculation of private RSA keys from the public key of a TLS certificate. via CVE-2022-26320  この脆弱性を報告した Hanno Böck さんは自身の記事の中で，更に SKS PGP 鍵サーバにも今回のような脆弱な RSA 公開鍵があったと言っている（実際に運用している鍵ではなさそうだが）。\nIs PGP/GnuPG/OpenPGP affected?\nI applied the algorithm to a dump of the SKS PGP key servers. I found four vulnerable keys. However all these keys had a user ID that did imply they were created for testing.\nIt is plausible that these keys were not generated by vulnerable implementations, but were manually crafted, possibly by people aware of this attack creating test data.\n via Fermat Attack on RSA  また，破られやすい素数の組み合わせとして\nHow \u0026ldquo;close\u0026rdquo; do primes need to be in order to be vulnerable?\nWith common RSA key sizes (2048 bit) in our tests the Fermat algorithm with 100 rounds reliably factors numbers where p and q differ up to 2^517. In other words it can be said that primes that only differ within the lower 64 bytes (or around half their size) will be vulnerable.\nUp to 2^514 it almost always finds the factorization in the first round of the algorithm. It could be argued that the 100 rounds is therefore excessive, however the algorithm is so fast that it practically does not matter much.\n via Fermat Attack on RSA  と見積もっている。 ちなみに SSH で生成する RSA 鍵については\nIs SSH affected?\nThere are probably no vulnerable SSH implementations creating such keys, though I obviously cannot proove that.\nI checked multiple large collections of both SSH host and user keys. I did not find any vulnerable keys.\n via Fermat Attack on RSA  なんだそうな。 よかったね。\nなお，記事の最後では\nWhat do you recommend?\nIf you are running one of the affected devices you should make sure that you update the devices and regenerate the keys.\nIf you are in a position where external users will supply public RSA keys to you then you might want to implement checks for this vulnerability. A typical case for this are certificate authorities. I shared the exploit code with certificate authorities and are aware that some have implemented checks in their certificate issuance process to avoid accepting keys vulnerable to this attack.\nYou can find Let\u0026rsquo;s Encrypt\u0026rsquo;s implementation of the check in their Boulder software in this pull request.\n via Fermat Attack on RSA  と締めている。 今回のケースは暗号製品や CA など暗号鍵を提供・運用する側の問題でユーザ側でできることは殆どないだろうが，とりあえず怪しげな暗号製品は使うなっちうことやね（笑）\n参考図書   暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n   暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n "
    },
    {
      "title": "お彼岸",
      "section": "remark",
      "description": "宣明暦・貞享暦は「どうしてそうなった」って感じ（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/03/ohigan/",
      "published": "2022-03-18T11:31:47+00:00",
      "update": "2022-03-18T11:32:59+00:00",
      "content": "（2年前に書いた記事から抜粋して再構成した）\n現在の定義では「春分の日」の定義は「太陽黄経が0°になる瞬間を含む日」で「秋分の日」は「太陽黄経が180°になる瞬間を含む日」である。 そして春分・秋分の日を挟む前後3日が「お彼岸」となる。\n  via Explanation about a celestial sphere in Japanese  実は近年まで知らなかったのだが，春分・秋分を「彼岸の中日」と定めたのは天保暦以後のことらしい。 国立天文台の解説によると，天保暦以前はこんな感じだそうな。\n   暦法 -5 -4 -3 -2 -1 春秋分 +1 +2 +3 +4 +5 +6 +7 +8 宣明暦\n貞享暦        入り   中日   明け  宝暦暦\n寛政暦 入り   中日  （春分） 明け             入り （秋分）  中日   明け     天保暦\n現在   入り   中日   明け         暦Wiki/季節/雑節とは？ - 国立天文台暦計算室より  宣明暦・貞享暦は「どうしてそうなった」って感じ（笑）\n\u0026hellip;あー，ぼた餅食べたい。\nブックマーク  2022年の暦  参考図書   天文年鑑 2022年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2021-11-22 単行本 441662140X (ASIN), 9784416621400 (EAN), 441662140X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2022年版。\nreviewed by Spiegel on 2021-11-22 (powered by PA-APIv5)\n "
    },
    {
      "title": "独り GitHub Team を作ってみた",
      "section": "remark",
      "description": "ついカッとなってやった。今はちょっとだけ反省している。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/03/github-team/",
      "published": "2022-03-13T11:31:26+00:00",
      "update": "2022-03-19T01:37:29+00:00",
      "content": "GitHub のリポジトリで諸々を公開するようになって後悔（駄洒落だよ）してるのは「ユーザ名が長すぎる」ことである。 ユーザ名は（名前が被らなければ）後から変更することもできるのだが（新しい方の URL にリダイレクトされる）， Go の場合はリポジトリの URI がそのままモジュール・パッケージのパスになるので移行が面倒そうだし，このブログ（GitHub Page）の CNAME 変更も面倒が起きそうな気がしたので諦めていた。\nでも，半年ほど前に\nnyaosorg という organization を作って、そちらへ nyagos のレポジトリを引っ越しました。nyagos が依存するパッケージも順次そちらへ移動する予定ですhttps://t.co/yFwrGxdHiP\n\u0026mdash; 𝒏𝒚𝒂𝒐𝒔.𝒐𝒓𝒈 (@NyaosOrg) September 12, 2021  という tweet を見て「なるほど！」と思ったわけよ。 もっとも本業がだんだん忙しくなって何となく先延ばしにしてたのだが，昨日ついカッとなってやってもうた。\n github.com/goark Playing with Go Language  忙しいときほど要らんことをしたくなるよね（部屋の掃除とか）。 今はちょっとだけ反省している。\n“ark” は archive の駄洒落である1。 なので「ごーあーく」とでも呼んでいただければ幸いである。 もしくは更に縮めて「ごらく」とか（読めねーよ）\n用途としては，タイトル通り，個人的な「Go の遊び場」として利用することを考えとりやす。 元の github.com/spiegel-im-spiegel から Go パッケージを徐々に移行する予定。 とりあえず gpgpdump と depm は個人的に使うので（依存パッケージと併せて）真っ先に移行した。 他のアクティブなパッケージもそのうち移行するつもりである。\n移行自体は簡単で，リポジトリの Settings ページの下の方に “Danger Zone” てのがあるのだが\nDanger Zone  その中の “Transfer ownership” で移行先のユーザ名（または組織名）を指定すればよい。\nTransfer ownership  移行するためには移行先にリポジトリの作成権限があることが必要。\n更に Go パッケージについてはソースコード内のインポート・パスを書き換えないといけないのだが，実際にやってみると思ったほど大変ではなかった。 go.mod ファイルに依存パッケージが列挙されているので，これを見ながら一括置換してしまえばいいのだ。\n注意する点としては移行後にバージョンタグを付けてバージョンを上げておくこと。 そうしないと，ひとつのバージョンに対して複数のパスが存在することになり go mod tidy とかでがっつり怒られる。\nそうそう。 今回は Free ではなく，有料の Team にした。 だって Codespace が使いたかったんじゃもん。\n  via Pricing · Plans for every developer  今や IDE やエディタも XaaS の時代ですよ。 まぁ，飽きたらフリーに戻すかも知れんけど。\nブックマーク  GitHub のアカウントの名前を変更したら起きること - 標準愚痴出力  続・GitHub のアカウントの名前を変更したら起きること 〈AppVeyor編〉 - 標準愚痴出力 : 結局 GitHub のユーザ名を変えて一番面倒くさいのは OAuth 周りなんだな。やっぱ下手に変えないほうがいいか   パッケージ引っ越し大作戦 GitHubセキュリティ Organization運用のベストプラクティス GitHub開発チームでのCodespacesの利用 - GitHubブログ GitHub Codespaces · GitHub GitHub Codespaces Documentation - GitHub Docs Github CodeSpace 触ってみた - Qiita GitHub Codespaces をつかって 3分で始めるサービス開発 | Wantedly, Inc.  参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   エンジニアに必要なのはダジャレ力だって Go の偉い人が言ってた（笑）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2022-03-13 のブックマーク",
      "section": "bookmarks",
      "description": "「インターネットへの干渉を「戦時下」の名のもとに正当化させてはならない」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/03/13-bookmarks/",
      "published": "2022-03-13T03:53:43+00:00",
      "update": "2022-03-13T03:54:30+00:00",
      "content": "リリース情報  Release v1.2022.2 · plantuml/plantuml · GitHub Release v0.35.0: Bump Wasmtime to 0.35.0 (#3885) · bytecodealliance/wasmtime · GitHub 「Firefox」に致命的な脆弱性、攻撃が野放しに ～Mozilla、修正版のv97.0.2をリリース - 窓の杜 すでに攻撃が開始されている致命的な脆弱性を修正した「Thunderbird 91.6.2」が公開 - 窓の杜 戻る・進む処理を一から作り直した「Visual Studio Code」2022年2月更新（v1.65） - 窓の杜 Release v0.93.3 · gohugoio/hugo · GitHub Release February 2022 Recovery 1 · microsoft/vscode · GitHub Release 1.22.1 · tailscale/tailscale · GitHub Release v0.35.1: Bump Wasmtime to 0.35.1 (#3911) · bytecodealliance/wasmtime · GitHub Release v0.94.0 · gohugoio/hugo · GitHub Release v1.4.0 · spf13/cobra · GitHub Release February 2022 Recovery 2 · microsoft/vscode · GitHub Release v0.94.1 · gohugoio/hugo · GitHub Announcement of LibreOffice 7.2.6 Community - The Document Foundation Blog  「LibreOffice 7.2.6 Community」が公開、安定性とパフォーマンスが向上 - 窓の杜   「Thunderbird 91.7.0」が公開 ～ここ1週間で2回目のバージョンアップ - 窓の杜 Release v0.94.2 · gohugoio/hugo · GitHub  セキュリティ＆プライバシー関連  NSA Releases Network Infrastructure Security Guidance | CISA  米NSA、ネットワークインフラのための新しいセキュリティガイダンスを公開 | TECH+   US-CERT、Ciscoの複数のプロダクトに発見された脆弱性について注意喚起 | Think IT（シンクイット） Attackers can force Amazon Echos to hack themselves with self-issued commands | Ars Technica  Hacking Alexa through Alexa’s Speech - Schneier on Security   Security advisory for the regex crate (CVE-2022-24713) | Rust Blog : Rust Using Radar to Read Body Language - Schneier on Security Microsoft 社 Internet Explorer のサポート終了について：IPA 独立行政法人 情報処理推進機構 Where’s the Russia-Ukraine Cyberwar? - Schneier on Security Intel、一部プロセッサで情報漏洩の恐れがある脆弱性 - PC Watch 「秀丸メール」に添付ファイルを「Windows サンドボックス」で開く機能が追加 - 窓の杜  Linux または Ubuntu に関する話題  RTL8761B搭載Bluetooth 5.0 USBドングルをUbuntuで動かす – Boot macOS : 21.10 には既に入ってた。 hciconfig -a で状態を確認できる  Azure や Windows に関する話題  マイクロソフト「Azure」がAWSしのぐ側面も\u0026ndash;Flexeraのクラウドレポート - ZDNet Japan : 売上の話らしいw  Go 言語関連  Scripting with Go — Bitfield Consulting : あとで遊ぶ Better Go Playground  天文関連  A rogue rocket will crash into the Moon this week, shedding light on cosmic crashes | Astronomy.com Astronomers discover largest molecule yet in a planet-forming disc | ESO  その他  GitHubセキュリティ Organization運用のベストプラクティス CypressでRSSなどのXMLをテストする Perl の Twitter API v2 対応 - 電気ウナギ的○○ Gitコマンド sparse-checkout使ってみた - Qiita The Cyber Social Contract | Foreign Affairs  A New Cybersecurity “Social Contract” - Schneier on Security デジタル世界における信頼構築のために今考えるべき「新たなサイバー社会契約」 - YAMDAS現更新履歴 : 日本語要約ありがたい   GNOMEとMonoとXamarinの開発者Miguel de Icaza（ミゲル・デ・イカザ）氏がマイクロソフト退職を発表 － Publickey PostgreSQL | 取得した別のテーブルのデータをテーブルに追加する(INSERT \u0026hellip; SELECT) スティーブン・ウォルト『同盟の起源』邦訳刊行記念ウェビナー | Peatix インターネットへの干渉を「戦時下」の名のもとに正当化させてはならない | P2Pとかその辺のお話R  「ロシアのインターネットからの排除」要請に関するICANNからウクライナ副首相への回答 | P2Pとかその辺のお話R   マイクロソフト、JavaScriptに型宣言を追加しつつトランスパイラ不要の「Types as Comments」をJavaScript仕様策定会議のTC39に提案へ － Publickey  JavaScriptに「型」を ～Microsoftが新構文を提案へ - 窓の杜   「テキスト校正くん」に「Figma」版が登場 ～「VS Code」で人気の文章校正支援ツール - 窓の杜 時系列ツイート表示にした「Twitter」にスワイプで［ホーム］と［最新］で切り替える機能 - 窓の杜 奈良文化財研究所、文化財データの保管と活用に「Box」採用 - ZDNet Japan Chrome99でshowPickerが使えるようになったので、ブラウザごとのpickerを比べてみた  "
    },
    {
      "title": "リモート会議用 Web カメラを買い替えた",
      "section": "remark",
      "description": "マイクなんて飾りですよ。エラい人には分からんのです",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/03/web-camera/",
      "published": "2022-03-06T09:06:07+00:00",
      "update": "2022-03-06T09:06:22+00:00",
      "content": "先月（2022-02）の話なのだが，仕事が佳境に入り始め，さらに引っ越しでプライベートも忙しくなったというのに，例の感染症絡みで自宅待機する羽目になりまして。 かといって仕事を休むわけにもいかないので，急遽リモートワークとなった。\nまぁ，1日程度なら社内のリソースにアクセスする必要もなくセキュリティ的にもシビアな状況ではなかったので仕事自体は何とかなったんだけどね。 打ち合わせのために自宅機に Teams を入れてセットアップしたんだけど，カメラをONにすると音声がうまく入らない（またはノイズが酷い）。 結局，画面共有ができて音声がやり取りできればよかったので打ち合わせ自体は無問題だったのだが，どうも Web カメラが駄目ぽいことに気がついた。 そういえば読書会とかのオンラインイベントでも似たような現象が起きてたな。 Zoom でも Teams でも駄目ってなると1 やっぱ Web カメラだよなぁ\u0026hellip;\n手持ちの Web カメラのスペックをよく見たらマイク内蔵ぢゃん。お前かお前かお前か！ 全く気が付かなかったよ orz\nというわけで，マイクが付属しない Web カメラを物色し始めた。 最近の Web カメラって大抵マイクが付いてるんだな。 要らんじゃろ！\n最終的に以下の Web カメラを発注\n  サンワダイレクト WEBカメラ マイクなし 画角60度 フルHD 1080P 200万画素 三脚対応 Zoom/Teams対応 ケーブル3m 400-CAM086 サンワダイレクト エレクトロニクス B08TC3NR9L (ASIN), 4969887781586 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  マイクなんて飾りですよ。エラい人には分からんのです（笑） リモート会議で使うのなら必要十分な性能。\nreviewed by Spiegel on 2022-02-05 (powered by PA-APIv5)\n したのだが，自宅待機は（対象者の検査結果がシロだったため）一日で解除となり，以後は試す機会もなく昨日（2022-03-05）の読書会に臨んだのだが，他の人からは「聞こえにくい」とか「ノイズが酷い」といった苦情もなく上手くいったようだ。 よーし，うむうむ，よーし。\nただし，画角が狭いせいか顔がどアップになるんだよね。 自分で自分の映像を見て仰け反ってしまったよ。 雰囲気を和らげようとバーチャル背景を（私が普段壁紙で使ってる）天体写真にしたら絵面が宇宙猫みたいになってしまったので断念した（笑）\n  via Boris in space by Andrew | Flickr (licensed CC-BY)  以前からネットメディアの記事とか動画とか見て思っているのだが，自分の顔のどアップなんてキツいと思わないのだろうか。 いや，まぁ，人それぞれか。\n今の勤務先は様々な勤務形態に柔軟に対応できる職場で在宅勤務者も多いのだが，今回のように短期的にリモートワークにする想定はさすがになかったようで，今後をにらんでルール化しワークフローに落とし込んだ。 今回はいいテストケースになったのだろう。\nブックマーク  また散財してしまった\u0026hellip;  参考   AfterShokz Aeropex 骨伝導ワイヤレスヘッドホン 防水bluetooth5.0 コズミックブラック SHENZHEN VOXTECH CO.,LTD エレクトロニクス B07RRQ59JR (ASIN), 0811071032209 (EAN), 811071032209 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Amazon Prime Day にそそのかされて買った。反省はしない。値段並みの音質はある，と思う。耳が自由って素晴らしい。\nreviewed by Spiegel on 2021-06-24 (powered by PA-APIv5)\n   骨伝導 通話専用 OpenComm Light Grey AfterShokz 骨伝導イヤホン ワイヤ レスヘッドホン テレワーク在宅ワークに最適 最強ノイズキャンセリングマイク運転中の通話でもきちんと相手に届きます SHENZHEN VOXTECH CO.,LTD エレクトロニクス B08ND2M821 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  新春初売りで衝動買い。性能的には文句なしだが Windows と微妙に相性が悪い？\nreviewed by Spiegel on 2022-01-12 (powered by PA-APIv5)\n   Daylight MindaRyn (メインアーティスト) Lantis 2022-02-23 (Release 2022-02-23) MP3 ダウンロード B09NRQNJ6R (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  アニメ「ありふれた職業で世界最強」第2期のOP曲。最近のヘヴィローテーション。\nreviewed by Spiegel on 2022-02-05 (powered by PA-APIv5)\n   Teams はネット越しに音声をエコーバックして状態をテストする機能があって，そこで初めて自分の状態に気がついた。 Zoom はデバイスチェックはできるけどネット越しにエコーバック試験する機能はないよね？ この機能があったらもっと早く分かったのに\u0026hellip;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Hugo で Markdeep な記述ができるようになった",
      "section": "remark",
      "description": "レンダー・フックを使って Mermaid にも対応できる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/03/markdeep-with-hugo/",
      "published": "2022-03-06T01:53:56+00:00",
      "update": "2022-03-06T05:01:01+00:00",
      "content": "先日 Hugo v0.93 がリリースされたが，このバージョンで Markdeep な記述にネイティブ対応したそうだ。\nMarkdown diagrams and code block render hooks. Now it\u0026rsquo;s possible create custom templates for Markdown code blocks, either for all or just for specific programming languages. This can also be used to render diagrams from Markdown code blocks. We provide GoAT (Go ASCII Tool) natively from Hugo, but you can also add your own template to get Mermaid support. The implementation of GoAT is a Go implementation by @blampe of markdeep.mini.js\u0026rsquo; diagrams. See the diagram documentation for details. via Release v0.93.0 · gohugoio/hugo  GoAT (Go ASCII Tool) は Markdeep を Go で実装し直したものだそうで，たとえば\n```goat +-------------------+ ^ .---. | A Box |__.--.__ __.--\u0026gt; | .-. | | | | \u0026#39;--\u0026#39; v | * |\u0026lt;--- | | +-------------------+ \u0026#39;-\u0026#39; | | Round *---(-. | .-----------------. .-------. .----------. .-------. | | | | Mixed Rounded | | | / Diagonals \\ | | | | | | | \u0026amp; Square Corners | \u0026#39;--. .--\u0026#39; / \\ |---+---| \u0026#39;-)-\u0026#39; .--------. \u0026#39;--+------------+-\u0026#39; .--. | \u0026#39;-------+--------\u0026#39; | | | | / Search / | | | | \u0026#39;---. | \u0026#39;-------\u0026#39; | \u0026#39;-+------\u0026#39; |\u0026lt;----------\u0026gt;| | | | v Interior | ^ \u0026#39; \u0026lt;---\u0026#39; \u0026#39;----\u0026#39; .-----------. ---. .--- v | .------------------. Diag line | .-------. +---. \\ / . | | if (a \u0026gt; b) +---. .---\u0026gt;| | | | | Curved line \\ / / \\ | | obj-\u0026gt;fcn() | \\ / | \u0026#39;-------\u0026#39; |\u0026lt;--\u0026#39; + / \\ | \u0026#39;------------------\u0026#39; \u0026#39;--\u0026#39; \u0026#39;--+--------\u0026#39; .--. .--. | .-. +Done?+-\u0026#39; .---+-----. | ^ |\\ | | /| .--+ | | \\ / | | | Join \\|/ | | Curved | \\| |/ | | \\ | \\ / | | +----\u0026gt; o --o-- \u0026#39;-\u0026#39; Vertical \u0026#39;--\u0026#39; \u0026#39;--\u0026#39; \u0026#39;-- \u0026#39;--\u0026#39; + .---. \u0026lt;--+---+-----\u0026#39; | /|\\ | | 3 | v not:line \u0026#39;quotes\u0026#39; .-\u0026#39; \u0026#39;---\u0026#39; .-. .---+--------. / A || B *bold* | ^ | | | Not a dot | \u0026lt;---+---\u0026lt;-- A dash--is not a line v | \u0026#39;-\u0026#39; \u0026#39;---------+--\u0026#39; / Nor/is this. --- ``` てな感じにコード・ブロックで囲って goat キーワードを付ければ\n                                                                                                                                                                                                                                          \u0026amp; A M S i o i q f b B x u j o e a ( - x d r a \u0026gt; e f R \u0026gt; c o C n u o b ( n r ) ) d n e e J d r o s i n N o R D t o i u a a n g d d l o i t n e D i a g o n a l s C V u e r r v t e i d c a l n o t A N C : o u l d r r i A a / I v n s i n e e h s t d - e - t r l B i h i i s i o n ' s r e q n . u * o o b t t o e l a s d ' * l i n e D o n S e e ? a r c 3 h     と SVG 画像に変換してくれる。 ページのスタイルに合わせてくれるのも嬉しい。\nまた Hugo のレンダー・フックを使って Mermaid にも対応できる。\nまず，各 Web ページの \u0026lt;body\u0026gt; 要素内にあらかじめ\n\u0026lt;body\u0026gt; ... \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; mermaid.initialize({startOnLoad: true, fontFamily: \u0026#34;sans-serif\u0026#34;, theme: \u0026#34;dark\u0026#34;, sequence: {height: 40, mirrorActors: false}}); \u0026lt;/script\u0026gt; \u0026lt;body\u0026gt; と記述し Mermaid を有効にしておくこと。 次に Hugo 環境の layouts/_default/_markup/ フォルダ（ない場合は作成）に render-codeblock-mermaid.html というファイルを作って\n\u0026lt;div class=\u0026#34;mermaid\u0026#34;\u0026gt; {{- .Inner | safeHTML }} \u0026lt;/div\u0026gt; と定義しておく。 これでコード・ブロックを使って\n```mermaid sequenceDiagram カバ-\u0026gt;\u0026gt;+カバン: あなた，泳げまして？ カバン--\u0026gt;\u0026gt;-カバ: いえ カバ-\u0026gt;\u0026gt;+カバン: 空は飛べるんですの？ カバン--\u0026gt;\u0026gt;-カバ: いえ カバ-\u0026gt;\u0026gt;+カバン: じゃあ，足が速いとか？ カバン--\u0026gt;\u0026gt;-カバ: いえ カバ-\u0026gt;\u0026gt;カバン: あなた，何にもできないのねぇ loop カバン-\u0026gt;\u0026gt;カバン: ううっ end ``` などと記述すれば\nsequenceDiagram カバ-+カバン: あなた，泳げまして？ カバン---カバ: いえ カバ-+カバン: 空は飛べるんですの？ カバン---カバ: いえ カバ-+カバン: じゃあ，足が速いとか？ カバン---カバ: いえ カバ-カバン: あなた，何にもできないのねぇ loop カバン-カバン: ううっ end  と展開される。 Hugo ドキュメントの Diagrams の項にもう少し賢い記述が載ってるので参考にどうぞ。\nMermaid 記法は自作の shortcode で対応していたが，コード・ブロックで書けるなら今後はそっちにするかな。\nブックマーク  Release v0.93.1 · gohugoio/hugo · GitHub Release v0.93.2 · gohugoio/hugo · GitHub  "
    },
    {
      "title": "2022-03-06 のブックマーク",
      "section": "bookmarks",
      "description": "「トーバルズ氏、Linuxカーネルを「C89」から「C11」コードに移行する準備」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/03/06-bookmarks/",
      "published": "2022-03-06T01:32:55+00:00",
      "update": "2022-03-06T01:33:33+00:00",
      "content": "リリース情報  Release v0.20.0 · sharkdp/bat · GitHub Announcing Rust 1.59.0 | Rust Blog Release v2.2.9 · kyokomi/emoji · GitHub Release v0.93.1 · gohugoio/hugo · GitHub Release gopls/v0.8.0 · golang/tools · GitHub LibreOffice 7.3.1 Community available for download - The Document Foundation Blog  「LibreOffice 7.3.」シリーズに初のマイナー更新、リグレやクラッシュを解決 - 窓の杜   Release v0.93.2 · gohugoio/hugo · GitHub Release v0.10.1 · ent/ent · GitHub  セキュリティ＆プライバシー関連  クラウドを脅威から守る「Microsoft Defender for Cloud」、AWSに続いてGoogle Cloudもサポート。マルチクラウド対応を強化 － Publickey ロシアのウクライナ侵攻でセキュリティ最強の暗号化メッセンジャーアプリ「Signal」の需要が急増 - GIGAZINE Microsoft Office、IE、Windowsの古い脆弱性狙う攻撃確認、更新を | TECH+ サプライヤーのシステム障害によるトヨタ自動車の国内全工場停止についてまとめてみた - piyolog Vulnerability in Stalkerware Apps - Schneier on Security  Behind the stalkerware network spilling the private phone data of hundreds of thousands – TechCrunch   メタップスペイメントの情報流出についてまとめてみた - piyolog The Bvp47 - a Top-tier Backdoor of US NSA Equation Group | Beijing Qi an Pangu Laboratory Technology Co., Ltd  Details of an NSA Hacking Operation - Schneier on Security   Which VPN Providers Really Take Privacy Seriously in 2021? * TorrentFreak  Linux または Ubuntu に関する話題  Linus Torvalds prepares to move the Linux kernel to modern C | ZDNet  トーバルズ氏、Linuxカーネルを「C89」から「C11」コードに移行する準備 - ZDNet Japan   Linux その102 - VodafoneがCanonicalと連携し、クラウドスマートフォンの開発へ - kledgeb  Azure や Windows に関する話題  【Azure認定】非エンジニアがAZ-900（Azure Fundamentals）に合格した話 | DevelopersIO  Microsoft Training Days: Azureの基礎 (AZ-900対応) - connpass   書式なし（プレーン）テキストとして貼り付けたい場合は［Windows］＋［V］がお勧め - やじうまの杜 - 窓の杜 : そーだったのか  Go 言語関連  Added reproduction for https://github.com/go-gorm/gorm/issues/5101 by tfonfara · Pull Request #438 · go-gorm/playground · GitHub Release v0.93.0 · gohugoio/hugo · GitHub プログラミング言語Go コミュニティ / Twitter Module release and versioning workflow - The Go Programming Language Module version numbering - The Go Programming Language numpy より速い？Go の行列演算ライブラリ nune refactortools/gormcheck at main · sharefull/refactortools · GitHub : GORM の脆弱性チェック Go: A Documentary  Java 言語関連  JavaでbytesからInpiutStreamに変換する方法 | ハックノート  天文関連  Russia halts rocket engine sales to US, suggests flying to space on ‘their broomsticks’ – TechCrunch エクソマーズ、ウクライナへの軍事侵攻の影響で今年の打ち上げは困難 – ヨーロッパ宇宙機関発表 | 月探査情報ステーション  その他  Enough with the Zero Sum Game of Rust vs. Go – The New Stack AWS Lambdaが「.NET 6」正式サポート開始 － Publickey カンムにおけるGitHub Projects Beta活用方法 - カンムテックブログ 【さくらのレンタルサーバ / マネージドサーバ】転送量の無制限化実施のお知らせ | さくらインターネット ダイソー商品で撮影ボックスを作ってみました | Usquebaugh山下克美Blog Pull-Requestにファイルツリーついたぞ！！ Amazon Prime Videoが動画再生にWebAssemblyを採用。再生デバイス上にWasm VMをデプロイ、高フレームレートなど実現 － Publickey WebAssemblyのパッケージマネジメントとレジストリ「WAPM」がリニューアルして登場 － Publickey インテル、AMD、Arm、MS、グーグルらがチップレット新規格「UCIe」のコンソーシアム立ち上げへ - ZDNet Japan GitHub、Wikiページにも画像をドラッグ＆ドロップで追加可能に － Publickey 無料で商用利用もできるAI音声読み上げツール「VOICEVOX」に4人のキャラクターが追加 - 窓の杜 第12世代Coreベースでセキュリティ性が向上した「vPro」、Chromebookにも展開 - PC Watch  "
    },
    {
      "title": "マジで恥ずかしいミス",
      "section": "remark",
      "description": "鍵管理は難しいやね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/03/really-embarrassing-mistake/",
      "published": "2022-03-05T00:58:12+00:00",
      "update": "2022-03-05T00:58:43+00:00",
      "content": "ハードウェアに暗号システムを乗っけるというと，どうしても1990年代の「クリッパーチップ」を思い起こさるが1，時代を経た今でも鍵管理はなかなか大変なようだ。\nというわけで， Bruce Schneier 先生をして really embarrassing mistake と言わしめた Samsung 社製 Android 機のハードウェア・キーストアの欠陥について指摘した論文がこれ：\n Trust Dies in Darkness: Shedding Light on Samsung’s TrustZone Keymaster Design   引用の引用で申し訳ないが，論文の概要（Abstract）はこう。\nARM-based Android smartphones rely on the TrustZone hardware support for a Trusted Execution Environment (TEE) to implement security-sensitive functions. The TEE runs a separate, isolated, TrustZone Operating System (TZOS), in parallel to Android. The implementation of the cryptographic functions within the TZOS is left to the device vendors, who create proprietary undocumented designs.\nIn this work, we expose the cryptographic design and implementation of Android’s Hardware-Backed Keystore in Samsung’s Galaxy S8, S9, S10, S20, and S21 flagship devices. We reversed-engineered and provide a detailed description of the cryptographic design and code structure, and we unveil severe design flaws. We present an IV reuse attack on AES-GCM that allows an attacker to extract hardware-protected key material, and a downgrade attack that makes even the latest Samsung devices vulnerable to the IV reuse attack. We demonstrate working key extraction attacks on the latest devices. We also show the implications of our attacks on two higher-level cryptographic protocols between the TrustZone and a remote server: we demonstrate a working FIDO2 WebAuthn login bypass and a compromise of Google’s Secure Key Import.\nWe discuss multiple flaws in the design flow of TrustZone based protocols. Although our specific attacks only apply to the ≈100 million devices made by Samsung, it raises the much more general requirement for open and proven standards for critical cryptographic and security designs. via Trust Dies in Darkness: Shedding Light on Samsung’s TrustZone Keymaster Design  ポイントのひとつは，この欠陥をリバース・エンジニアリングで発見したことかね。 もう少し詳しく紹介すると，4.1章の冒頭にこう書かれている。\nAs we discussed in Section 3, the wrapping key used to encrypt the key blobs (HDK) is derived using a salt value computed by the Keymaster TA. In v15 and v20-s9 blobs, the salt is a deterministic function that depends only on the application ID and application data (and constant strings), which the Normal World client fully controls. This means that for a given application, all key blobs will be encrypted using the same key. As the blobs are encrypted in AES-GCM mode-of-operation, the security of the resulting encryption scheme depends on its IV values never being reused. via Trust Dies in Darkness: Shedding Light on Samsung’s TrustZone Keymaster Design  （強調は私がやりました）\nマジですか。 これは恥ずかしいわ（笑）\nこの論文はたまたまシェアの大きい Galaxy 端末を調べたのだろうが，他の携帯端末や暗号デバイスなんかでも評価していかないとマズいかもねぇ。 鍵管理は難しいやね。\n参考文献   暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n   暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n   当時のクリッパーチップが問題視されたのは「鍵預託（key escrow）」の観点からであるが，クリッパーチップが幕引きとなった直接のトリガーは鍵預託のシステムに欠陥が見つかったからとされている。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.17.8 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は1件の脆弱性修正を含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/03/go-1_17_8-is-released/",
      "published": "2022-03-04T11:20:52+00:00",
      "update": "2022-03-04T11:21:33+00:00",
      "content": "Go 1.17.8 がリリースされた。\n [security] Go 1.17.8 and Go 1.16.15 are released  今回は1件の脆弱性修正を含んでいる。\ngo1.17.8 (released 2022-03-03) includes a security fix to the regexp/syntax package, as well as bug fixes to the compiler, runtime, the go command, and the crypto/x509, and net packages. See the Go 1.17.8 milestone on our issue tracker for details. via Release History - The Go Programming Language  CVE-2022-24921: regexp: stack exhaustion compiling deeply nested expressions On 64-bit platforms, an extremely deeply nested expression can cause regexp.Compile to cause goroutine stack exhaustion, forcing the program to exit. Note this applies to very large expressions, on the order of 2MB. via Go 1.17.7 and Go 1.16.14 are released  2MBの式とか（笑） まぁ，でも， SQL 文とかでも，とてつもなくデカイ式を書く奴とかいるからなぁ。\n（以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.17.8.linux-amd64.tar.gz）を取ってきてインストールすることを強く推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.17.8.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.17.8.linux-amd64.tar.gz $ sudo mv go go1.17.8 $ sudo ln -s go1.17.8 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.17.8 linux/amd64 アップデートは計画的に。\n参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n "
    }
  ]
}
