{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Go 言語用 openBD クライアント・パッケージ",
      "section": "release",
      "description": "本パッケージは openBD が提供する書籍情報を取得できる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/openbd-api-package-for-golang/",
      "published": "2019-09-07T13:10:02+00:00",
      "update": "2019-09-07T13:11:13+00:00",
      "content": "  spiegel-im-spiegel/openbd-api: APIs for openBD by Golang  本パッケージは openBD へアクセスできる Go 言語用クライアント・パッケージだ。 openBD が提供する書籍情報を取得できる。\nなお spiegel-im-spiegel/openbd-api パッケージは Go 1.13 以上を要求する。 ご注意を。\n  \nインポート import \u0026#34;github.com/spiegel-im-spiegel/openbd-api\u0026#34; 書籍情報の取得 openBD は ISBN をキーとして書籍情報の検索ができる。 spiegel-im-spiegel/openbd-api パッケージでは以下のように記述する。\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/openbd-api\u0026#34; ) func main() { b, err := openbd.DefaultClient().LookupBooksRaw([]string{\u0026#34;9784274069321\u0026#34;}) if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } openbd.Client.LookupBooksRaw() 関数は，引数に複数の ISBN を指定することが可能で openBD から取得した結果（JSON 形式）をそのまま返す。\n$ go run sample.go | jq . [ { \u0026#34;onix\u0026#34;: { \u0026#34;RecordReference\u0026#34;: \u0026#34;9784274069321\u0026#34;, \u0026#34;NotificationType\u0026#34;: \u0026#34;03\u0026#34;, \u0026#34;ProductIdentifier\u0026#34;: { \u0026#34;ProductIDType\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;IDValue\u0026#34;: \u0026#34;9784274069321\u0026#34; }, \u0026#34;DescriptiveDetail\u0026#34;: { \u0026#34;ProductComposition\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;ProductForm\u0026#34;: \u0026#34;BZ\u0026#34;, \u0026#34;Measure\u0026#34;: [ { \u0026#34;MeasureType\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;Measurement\u0026#34;: \u0026#34;210\u0026#34;, \u0026#34;MeasureUnitCode\u0026#34;: \u0026#34;mm\u0026#34; }, { \u0026#34;MeasureType\u0026#34;: \u0026#34;02\u0026#34;, \u0026#34;Measurement\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MeasureUnitCode\u0026#34;: \u0026#34;mm\u0026#34; } ], \u0026#34;TitleDetail\u0026#34;: { \u0026#34;TitleType\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;TitleElement\u0026#34;: { \u0026#34;TitleElementLevel\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;TitleText\u0026#34;: { \u0026#34;collationkey\u0026#34;: \u0026#34;リーン カイハツ ノ ゲンバ : カンバン ニ ヨル ダイキボ プロジェクト ノ ウンエイ\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;リーン開発の現場 : カンバンによる大規模プロジェクトの運営\u0026#34; } } }, \u0026#34;Contributor\u0026#34;: [ { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;A01\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;Kniberg, Henrik\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;A01\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;オーム社\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;A01\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;オーム社開発局\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;4\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;B06\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;市谷 聡啓\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;5\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;B06\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;藤原 大\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;B06\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;角谷 信太郎\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;7\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;A01\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;クニバーグ ヘンリック\u0026#34; } } ], \u0026#34;Language\u0026#34;: [ { \u0026#34;LanguageRole\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;LanguageCode\u0026#34;: \u0026#34;jpn\u0026#34;, \u0026#34;CountryCode\u0026#34;: \u0026#34;JP\u0026#34; } ], \u0026#34;Extent\u0026#34;: [ { \u0026#34;ExtentType\u0026#34;: \u0026#34;11\u0026#34;, \u0026#34;ExtentValue\u0026#34;: \u0026#34;190\u0026#34;, \u0026#34;ExtentUnit\u0026#34;: \u0026#34;03\u0026#34; } ] }, \u0026#34;CollateralDetail\u0026#34;: { \u0026#34;TextContent\u0026#34;: [ { \u0026#34;TextType\u0026#34;: \u0026#34;03\u0026#34;, \u0026#34;ContentAudience\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;Text\u0026#34;: \u0026#34;官公庁の大規模システム開発における、カンバンシステムを軸にしたプロジェクト進行の様子を、著者の経験に基づいて描写。「リーンソフトウェア開発」を現場でどのように適用するかを直裁的に解説しています。\u0026#34; }, { \u0026#34;TextType\u0026#34;: \u0026#34;04\u0026#34;, \u0026#34;ContentAudience\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;Text\u0026#34;: \u0026#34;第1部 僕らのやり方を伝えよう(プロジェクトについて\\nチーム編成\\nデイリーカクテルパーティーに参加しよう\\nプロジェクトボード\\nカンバンボードをスケールさせる ほか)\\n第2部 テクニックを詳しく見る(アジャイルとリーンの概要\\nテスト自動化の戦略\\nプランニングポーカーによる見積り\\n因果関係図\\n最後に伝えたいこと)\u0026#34; } ], \u0026#34;SupportingResource\u0026#34;: [ { \u0026#34;ResourceContentType\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;ContentAudience\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;ResourceMode\u0026#34;: \u0026#34;03\u0026#34;, \u0026#34;ResourceVersion\u0026#34;: [ { \u0026#34;ResourceForm\u0026#34;: \u0026#34;02\u0026#34;, \u0026#34;ResourceVersionFeature\u0026#34;: [ { \u0026#34;ResourceVersionFeatureType\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;FeatureValue\u0026#34;: \u0026#34;D502\u0026#34; }, { \u0026#34;ResourceVersionFeatureType\u0026#34;: \u0026#34;04\u0026#34;, \u0026#34;FeatureValue\u0026#34;: \u0026#34;9784274069321.jpg\u0026#34; } ], \u0026#34;ResourceLink\u0026#34;: \u0026#34;https://cover.openbd.jp/9784274069321.jpg\u0026#34; } ] } ] }, \u0026#34;PublishingDetail\u0026#34;: { \u0026#34;Imprint\u0026#34;: { \u0026#34;ImprintIdentifier\u0026#34;: [ { \u0026#34;ImprintIDType\u0026#34;: \u0026#34;19\u0026#34;, \u0026#34;IDValue\u0026#34;: \u0026#34;274\u0026#34; } ], \u0026#34;ImprintName\u0026#34;: \u0026#34;オーム社\u0026#34; }, \u0026#34;PublishingDate\u0026#34;: [ { \u0026#34;PublishingDateRole\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;Date\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;ProductSupply\u0026#34;: { \u0026#34;SupplyDetail\u0026#34;: { \u0026#34;ReturnsConditions\u0026#34;: { \u0026#34;ReturnsCodeType\u0026#34;: \u0026#34;04\u0026#34;, \u0026#34;ReturnsCode\u0026#34;: \u0026#34;02\u0026#34; }, \u0026#34;ProductAvailability\u0026#34;: \u0026#34;99\u0026#34; } } }, \u0026#34;hanmoto\u0026#34;: { \u0026#34;datecreated\u0026#34;: \u0026#34;2016-08-24 22:49:25\u0026#34;, \u0026#34;dateshuppan\u0026#34;: \u0026#34;2013-10\u0026#34;, \u0026#34;datemodified\u0026#34;: \u0026#34;2016-08-24 22:49:25\u0026#34; }, \u0026#34;summary\u0026#34;: { \u0026#34;isbn\u0026#34;: \u0026#34;9784274069321\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;リーン開発の現場 : カンバンによる大規模プロジェクトの運営\u0026#34;, \u0026#34;volume\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;series\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;publisher\u0026#34;: \u0026#34;オーム社\u0026#34;, \u0026#34;pubdate\u0026#34;: \u0026#34;2013-10\u0026#34;, \u0026#34;cover\u0026#34;: \u0026#34;https://cover.openbd.jp/9784274069321.jpg\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;Kniberg,Henrik／著 オーム社／著 オーム社開発局／著 市谷聡啓／翻訳 ほか\u0026#34; } } ] openbd.Client.LookupBooks() 関数を使うと結果を openbd.Book 構造体の配列で返す。\nbooks, err := openbd.DefaultClient().LookupBooks([]string{\u0026#34;9784274069321\u0026#34;}) openbd.Book 構造体の構成は以下の通り。\n//Book is entity class of book info. type Book struct { Onix Onix `json:\u0026#34;onix\u0026#34;` Hanmoto Hanmoto `json:\u0026#34;hanmoto\u0026#34;` Summary Summary `json:\u0026#34;summary\u0026#34;` } //Onix is entity class of JPRO-onix items type Onix struct { RecordReference string //ISBN code (key code) \tNotificationType string ProductIdentifier struct { ProductIDType string IDValue string //ISBN ? \t} DescriptiveDetail struct { ProductComposition string ProductForm string Measure []struct { MeasureType string Measurement string MeasureUnitCode string } `json:\u0026#34;,omitempty\u0026#34;` Collection struct { CollectionType string CollectionSequence *struct { CollectionSequenceType string `json:\u0026#34;,omitempty\u0026#34;` CollectionSequenceTypeName string `json:\u0026#34;,omitempty\u0026#34;` CollectionSequenceNumber string `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` TitleDetail *struct { TitleType string `json:\u0026#34;,omitempty\u0026#34;` TitleElement []struct { TitleElementLevel string TitleText struct { Content string `json:\u0026#34;content\u0026#34;` CollationKey string `json:\u0026#34;collationkey,omitempty\u0026#34;` } } `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` } TitleDetail struct { TitleType string TitleElement struct { TitleElementLevel string TitleText struct { Content string `json:\u0026#34;content\u0026#34;` Collationkey string `json:\u0026#34;collationkey,omitempty\u0026#34;` } } } Contributor []struct { SequenceNumber string ContributorRole []string `json:\u0026#34;,omitempty\u0026#34;` PersonName struct { Content string `json:\u0026#34;content\u0026#34;` Collationkey string `json:\u0026#34;collationkey,omitempty\u0026#34;` } BiographicalNote string `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` Language []struct { LanguageRole string LanguageCode string CountryCode string } `json:\u0026#34;,omitempty\u0026#34;` Extent []struct { ExtentType string ExtentValue string ExtentUnit string } `json:\u0026#34;,omitempty\u0026#34;` Subject []struct { SubjectSchemeIdentifier string SubjectCode string SubjectHeadingText string `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` Audience []struct { AudienceCodeType string AudienceCodeValue string } `json:\u0026#34;,omitempty\u0026#34;` } CollateralDetail *struct { TextContent []struct { TextType string ContentAudience string Text string } `json:\u0026#34;,omitempty\u0026#34;` SupportingResource []struct { ResourceContentType string ContentAudience string ResourceMode string ResourceVersion []struct { ResourceForm string ResourceVersionFeature []struct { ResourceVersionFeatureType string FeatureValue string } `json:\u0026#34;,omitempty\u0026#34;` ResourceLink string } `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` PublishingDetail struct { Imprint struct { ImprintIdentifier []struct { ImprintIDType string IDValue string } `json:\u0026#34;,omitempty\u0026#34;` ImprintName string } Publisher struct { PublisherIdentifier []struct { PublisherIDType string IDValue string } `json:\u0026#34;,omitempty\u0026#34;` PublishingRole string PublisherName string } PublishingDate []struct { Date Date PublishingDateRole string } `json:\u0026#34;,omitempty\u0026#34;` } ProductSupply struct { SupplyDetail struct { ReturnsConditions struct { ReturnsCodeType string ReturnsCode string } ProductAvailability string Price []struct { PriceType string CurrencyCode string PriceAmount string } `json:\u0026#34;,omitempty\u0026#34;` } } } //Hanmoto is entity class of Hanmoto dot com items type Hanmoto struct { DatePublished Date `json:\u0026#34;dateshuppan\u0026#34;` DateModified Date `json:\u0026#34;datemodified\u0026#34;` DateCreated Date `json:\u0026#34;datecreated\u0026#34;` DateReleased Date `json:\u0026#34;datekoukai\u0026#34;` IsLightNovel bool `json:\u0026#34;lanove,omitempty\u0026#34;` HasReview bool `json:\u0026#34;hasshohyo,omitempty\u0026#34;` Reviews []struct { Reviewer string `json:\u0026#34;reviewer\u0026#34;` Link string `json:\u0026#34;link\u0026#34;` DateAppearance Date `json:\u0026#34;appearance\u0026#34;` SourceKindID int `json:\u0026#34;kubun_id\u0026#34;` SourceID int `json:\u0026#34;source_id\u0026#34;` Source string `json:\u0026#34;source\u0026#34;` PaperType string `json:\u0026#34;choyukan\u0026#34;` PostUser string `json:\u0026#34;post_user\u0026#34;` Han string `json:\u0026#34;han\u0026#34;` Gou string `json:\u0026#34;gou\u0026#34;` } `json:\u0026#34;reviews,omitempty\u0026#34;` HasSample bool `json:\u0026#34;hastameshiyomi,omitempty\u0026#34;` } //Summary is entity class of summary data type Summary struct { ISBN string `json:\u0026#34;isbn\u0026#34;` Title string `json:\u0026#34;title\u0026#34;` Volume string `json:\u0026#34;volume\u0026#34;` Series string `json:\u0026#34;series\u0026#34;` Publisher string `json:\u0026#34;publisher\u0026#34;` PubDate Date `json:\u0026#34;pubdate\u0026#34;` Author string `json:\u0026#34;author\u0026#34;` Cover string `json:\u0026#34;cover\u0026#34;` } openbd.Book 構造体はこのままでは使い辛いので以下のヘルパ関数を用意した。\n Book.Valid() bool Book.Id() string Book.ISBN() string Book.Title() string Book.SubTitle() string : 現在は空文字列のみ返す Book.SeriesTitle() string Book.Label() string Book.ImageURL() string Book.Authors() []string Book.Publisher() string Book.PublicationDate() openbd.Date Book.Id() Description  Server および Client インスタンスの生成 openbd.Client インスタンスの生成は openbd.DefaultClient() 関数で簡単に行えるが，もう少し細かい制御もできる。\nopenBD サーバを指定する openbd.New() 関数で openbd.Server インスタンスを生成できるが，引数としてサーバを指定できる。\nserver := openbd.New( openbd.WithScheme(\u0026#34;https\u0026#34;), openbd.WithServerName(\u0026#34;api.example.com\u0026#34;), ) これで openBD サーバとして https://api.example.com を指定できた（実在しない URL なので注意）。\ncontext.Context および http.Client を指定する openbd.Server.CreateClient() 関数により openbd.Client インスタンスを生成できるが，引数として context.Context および http.Client インスタンスを指定する。\nclient := openbd.New( openbd.WithScheme(\u0026#34;https\u0026#34;), openbd.WithServerName(\u0026#34;api.example.com\u0026#34;), ).CreateClient( context.Background(), \u0026amp;http.Client{}, ) ちなみに openbd.DefaultClient() 関数は以下の記述と同等である。\nclient := openbd.New( openbd.WithScheme(\u0026#34;https\u0026#34;), openbd.WithServerName(\u0026#34;api.openbd.jp\u0026#34;), ).CreateClient( context.Background(), http.DefaultClient, ) 参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "Go 言語用青空文庫 API クライアント・パッケージ",
      "section": "release",
      "description": "本パッケージは青空文庫 API を通じて青空文庫に収録されている作品情報等を取得できる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/aozora-api-package-for-golang/",
      "published": "2019-09-07T13:10:02+00:00",
      "update": "2019-09-07T13:11:13+00:00",
      "content": "  spiegel-im-spiegel/aozora-api: APIs for Aozora-bunko RESTful Service by Golang  本パッケージは青空文庫 API へアクセスできる Go 言語用クライアント・パッケージだ。 API を通じて青空文庫に収録されている作品情報等を取得できる。\nなお spiegel-im-spiegel/aozora-api パッケージは Go 1.13 以上を要求する。 ご注意を。\n  \nインポート import \u0026#34;github.com/spiegel-im-spiegel/aozora-api\u0026#34; 簡単な使い方 作品情報の取得 たとえばタイトル名「天に積む宝」著者名「富田倫生」を検索キーとして青空文庫 API から作品情報を取得してみる。\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/aozora-api\u0026#34; ) func main() { b, err := aozora.DefaultClient().SearchBooksRaw( aozora.WithBookTitle(\u0026#34;/天に積む宝/\u0026#34;), aozora.WithBookAuthor(\u0026#34;富田倫生\u0026#34;), ) if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } 検索オプションは以下の関数と連動している。 これらの関数をaozora.Client.SearchBooksRaw() 関数の引数に指定する。\n   オプション名 対応する関数     title aozora.WithBookTitle(string)   author aozora.WithBookAuthor(string)   fields aozora.WithBookFields(string)1   limit aozora.WithBookLimit(int)   skip aozora.WithBookSkip(int)   after aozora.WithBookAfter(time.Time)    aozora.Client.SearchBooksRaw() 関数は API を通じて取得した結果（JSON 形式）をそのまま返す。\n$ go run sample.go | jq . [ { \u0026#34;book_id\u0026#34;: 59489, \u0026#34;title\u0026#34;: \u0026#34;「天に積む宝」のふやし方、へらし方\u0026#34;, \u0026#34;title_yomi\u0026#34;: \u0026#34;「てんにつむたから」のふやしかた、へらしかた\u0026#34;, \u0026#34;title_sort\u0026#34;: \u0026#34;てんにつむたからのふやしかたへらしかた\u0026#34;, \u0026#34;subtitle\u0026#34;: \u0026#34;著作権保護期間延長が青空文庫にもたらすもの\u0026#34;, \u0026#34;subtitle_yomi\u0026#34;: \u0026#34;ちょさくけんほごきかんえんちょうがあおぞらぶんこにもたらすもの\u0026#34;, \u0026#34;original_title\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;first_appearance\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ndc_code\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;font_kana_type\u0026#34;: \u0026#34;新字新仮名\u0026#34;, \u0026#34;copyright\u0026#34;: true, \u0026#34;release_date\u0026#34;: \u0026#34;2019-01-01T00:00:00.000Z\u0026#34;, \u0026#34;last_modified\u0026#34;: \u0026#34;2018-12-24T00:00:00.000Z\u0026#34;, \u0026#34;card_url\u0026#34;: \u0026#34;https://www.aozora.gr.jp/cards/000055/card59489.html\u0026#34;, \u0026#34;base_book_1\u0026#34;: \u0026#34;インターネット図書館　青空文庫\u0026#34;, \u0026#34;base_book_1_publisher\u0026#34;: \u0026#34;はる書房\u0026#34;, \u0026#34;base_book_1_1st_edition\u0026#34;: \u0026#34;2005（平成17）年11月15日\u0026#34;, \u0026#34;base_book_1_edition_input\u0026#34;: \u0026#34;2005（平成17）年11月15日初版第1刷\u0026#34;, \u0026#34;base_book_1_edition_proofing\u0026#34;: \u0026#34;2005（平成17）年11月15日初版第1刷\u0026#34;, \u0026#34;base_book_1_parent\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_1_parent_publisher\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_1_parent_1st_edition\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_publisher\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_1st_edition\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_edition_input\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_edition_proofing\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_parent\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_parent_publisher\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_parent_1st_edition\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;input\u0026#34;: \u0026#34;富田晶子\u0026#34;, \u0026#34;proofing\u0026#34;: \u0026#34;雪森\u0026#34;, \u0026#34;text_url\u0026#34;: \u0026#34;https://www.aozora.gr.jp/cards/000055/files/59489_txt_66663.zip\u0026#34;, \u0026#34;text_last_modified\u0026#34;: \u0026#34;2018-12-24T00:00:00.000Z\u0026#34;, \u0026#34;text_encoding\u0026#34;: \u0026#34;ShiftJIS\u0026#34;, \u0026#34;text_charset\u0026#34;: \u0026#34;JIS X 0208\u0026#34;, \u0026#34;text_updated\u0026#34;: 0, \u0026#34;html_url\u0026#34;: \u0026#34;https://www.aozora.gr.jp/cards/000055/files/59489_66714.html\u0026#34;, \u0026#34;html_last_modified\u0026#34;: \u0026#34;2018-12-24T00:00:00.000Z\u0026#34;, \u0026#34;html_encoding\u0026#34;: \u0026#34;ShiftJIS\u0026#34;, \u0026#34;html_charset\u0026#34;: \u0026#34;JIS X 0208\u0026#34;, \u0026#34;html_updated\u0026#34;: 0, \u0026#34;authors\u0026#34;: [ { \u0026#34;person_id\u0026#34;: 55, \u0026#34;last_name\u0026#34;: \u0026#34;富田\u0026#34;, \u0026#34;first_name\u0026#34;: \u0026#34;倫生\u0026#34; } ] } ] 図書カード No. が分かっている場合は aozora.Client.LookupBookRaw() 関数で作品情報を取得できる。\nfunc main() { b, err := aozora.DefaultClient().LookupBookRaw(59489)  if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } aozora.Client.SearchBooks() または aozora.Client.LookupBook() 関数を使うと結果を aozora.Book 構造体で返す。\nbook, err := aozora.DefaultClient().LookupBook(59489) aozora.Book 構造体の構成は以下の通り。\n//Author is entity class of author and translator info. type Author struct { PersonID int `json:\u0026#34;person_id\u0026#34;` LastName string `json:\u0026#34;last_name\u0026#34;` FirstName string `json:\u0026#34;first_name\u0026#34;` } //Book is entity class of book info. type Book struct { BookID int `json:\u0026#34;book_id\u0026#34;` Title string `json:\u0026#34;title\u0026#34;` TitleYomi string `json:\u0026#34;title_yomi\u0026#34;` TitleSort string `json:\u0026#34;title_sort\u0026#34;` Subtitle string `json:\u0026#34;subtitle\u0026#34;` SubtitleYomi string `json:\u0026#34;subtitle_yomi\u0026#34;` OriginalTitle string `json:\u0026#34;original_title\u0026#34;` FirstAppearance string `json:\u0026#34;first_appearance\u0026#34;` NDCCode string `json:\u0026#34;ndc_code\u0026#34;` FontKanaType string `json:\u0026#34;font_kana_type\u0026#34;` Copyright bool `json:\u0026#34;copyright\u0026#34;` ReleaseDate Date `json:\u0026#34;release_date\u0026#34;` LastModified Date `json:\u0026#34;last_modified\u0026#34;` CardURL string `json:\u0026#34;card_url\u0026#34;` BaseBook1 string `json:\u0026#34;base_book_1\u0026#34;` BaseBookPublisher1 string `json:\u0026#34;base_book_1_publisher\u0026#34;` BaseBookFirstEdition1 string `json:\u0026#34;base_book_1_1st_edition\u0026#34;` BaseBookEditionInput1 string `json:\u0026#34;base_book_1_edition_input\u0026#34;` BaseBookEditionProofing1 string `json:\u0026#34;base_book_1_edition_proofing\u0026#34;` BaseBookParent1 string `json:\u0026#34;base_book_1_parent\u0026#34;` BaseBookParentPublisher1 string `json:\u0026#34;base_book_1_parent_publisher\u0026#34;` BaseBookParentFirstEdition1 string `json:\u0026#34;base_book_1_parent_1st_edition\u0026#34;` BaseBook2 string `json:\u0026#34;base_book_2\u0026#34;` BaseBookPublisher2 string `json:\u0026#34;base_book_2_publisher\u0026#34;` BaseBookFirstEdition2 string `json:\u0026#34;base_book_2_1st_edition\u0026#34;` BaseBookEditionInput2 string `json:\u0026#34;base_book_2_edition_input\u0026#34;` BaseBookEditionProofing2 string `json:\u0026#34;base_book_2_edition_proofing\u0026#34;` BaseBookParent2 string `json:\u0026#34;base_book_2_parent\u0026#34;` BaseBookParentPublisher2 string `json:\u0026#34;base_book_2_parent_publisher\u0026#34;` BaseBookParentFirstEdition2 string `json:\u0026#34;base_book_2_parent_1st_edition\u0026#34;` Input string `json:\u0026#34;input\u0026#34;` Proofing string `json:\u0026#34;proofing\u0026#34;` TextURL string `json:\u0026#34;text_url\u0026#34;` TextLastModified Date `json:\u0026#34;text_last_modified\u0026#34;` TextEncoding string `json:\u0026#34;text_encoding\u0026#34;` TextCharset string `json:\u0026#34;text_charset\u0026#34;` TextUpdated int `json:\u0026#34;text_updated\u0026#34;` HTMLURL string `json:\u0026#34;html_url\u0026#34;` HTMLLastModified Date `json:\u0026#34;html_last_modified\u0026#34;` HTMLEncoding string `json:\u0026#34;html_encoding\u0026#34;` HTMLCharset string `json:\u0026#34;html_charset\u0026#34;` HTMLUpdated int `json:\u0026#34;html_updated\u0026#34;` Translators []Author `json:\u0026#34;translators\u0026#34;` Authors []Author `json:\u0026#34;authors\u0026#34;` } 作家情報の取得 今度は作家名「富田倫生」を検索キーとして青空文庫 API から作家情報を取得してみる。\nfunc main() { b, err := aozora.DefaultClient().SearchPersonsRaw( aozora.WithPersonName(\u0026#34;富田倫生\u0026#34;), ) if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } 実行結果は以下の通り。\n$ go run sample.go | jq . [ { \u0026#34;person_id\u0026#34;: 55, \u0026#34;last_name\u0026#34;: \u0026#34;富田\u0026#34;, \u0026#34;first_name\u0026#34;: \u0026#34;倫生\u0026#34;, \u0026#34;last_name_yomi\u0026#34;: \u0026#34;とみた\u0026#34;, \u0026#34;first_name_yomi\u0026#34;: \u0026#34;みちお\u0026#34;, \u0026#34;last_name_sort\u0026#34;: \u0026#34;とみた\u0026#34;, \u0026#34;first_name_sort\u0026#34;: \u0026#34;みちお\u0026#34;, \u0026#34;last_name_roman\u0026#34;: \u0026#34;Tomita\u0026#34;, \u0026#34;first_name_roman\u0026#34;: \u0026#34;Michio\u0026#34;, \u0026#34;date_of_birth\u0026#34;: \u0026#34;1952-04-20\u0026#34;, \u0026#34;date_of_death\u0026#34;: \u0026#34;2013-08-16\u0026#34;, \u0026#34;author_copyright\u0026#34;: true } ] 作家 No. が分かっている場合は aozora.Client.LookupPersonRaw() 関数で作品情報を取得できる。\nfunc main() { b, err := aozora.DefaultClient().LookupPersonRaw(55)  if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } aozora.Client.SearchPersons() または aozora.Client.LookupPerson() 関数を使うと結果を aozora.Person 構造体で返す。\nperson, err := aozora.DefaultClient().LookupPerson(55) aozora.Person 構造体の構成は以下の通り。\n//Person is entity class of person info. type Person struct { PersonID int `json:\u0026#34;person_id\u0026#34;` LastName string `json:\u0026#34;last_name\u0026#34;` FirstName string `json:\u0026#34;first_name\u0026#34;` LastNameYomi string `json:\u0026#34;last_name_yomi\u0026#34;` FirstNameYomi string `json:\u0026#34;first_name_yomi\u0026#34;` LastNameSort string `json:\u0026#34;last_name_sort\u0026#34;` FirstNameSort string `json:\u0026#34;first_name_sort\u0026#34;` LastNameRoman string `json:\u0026#34;last_name_roman\u0026#34;` FirstNameRoman string `json:\u0026#34;first_name_roman\u0026#34;` DateOfBirth Date `json:\u0026#34;date_of_birth\u0026#34;` DateOfDeath Date `json:\u0026#34;date_of_death\u0026#34;` AuthorCopyright bool `json:\u0026#34;author_copyright\u0026#34;` } 工作員情報の取得 更に更に工作員名「雪森」を検索キーとして青空文庫 API から工作員情報を取得してみる。\nfunc main() { b, err := aozora.DefaultClient().SearchWorkersRaw( aozora.WithWorkerName(\u0026#34;é›ªæ£®\u0026#34;), ) if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } 実行結果は以下の通り。\n$ go run sample.go | jq . [ { \u0026#34;id\u0026#34;: 845, \u0026#34;name\u0026#34;: \u0026#34;雪森\u0026#34; } ] 工作員 No. が分かっている場合は aozora.Client.LookupWorkerRaw() 関数で作品情報を取得できる。\nfunc main() { b, err := aozora.DefaultClient().LookupWorkerRaw(845)  if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } aozora.Client.SearchWorkers() または aozora.Client.LookupWorker() 関数を使うと結果を aozora.Worker 構造体で返す。\nperson, err := aozora.DefaultClient().LookupWorker(845) aozora.Worker 構造体の構成は以下の通り。\n//Worker is entity class of worker info. type Worker struct { WorkerID int `json:\u0026#34;id\u0026#34;` Name string `json:\u0026#34;name\u0026#34;` } Server および Client インスタンスの生成 aozora.Client インスタンスの生成は aozora.DefaultClient() 関数で簡単に行えるが，もう少し細かい制御もできる。\n青空文庫 API サーバを指定する aozora.New() 関数で aozora.Server インスタンスを生成できるが，引数としてサーバを指定できる。\nserver := aozora.New( aozora.WithScheme(\u0026#34;http\u0026#34;), aozora.WithServerName(\u0026#34;pubserver2.herokuapp.com\u0026#34;), ) これで青空文庫 API サーバとして http://pubserver2.herokuapp.com を指定できた。\ncontext.Context および http.Client を指定する aozora.Server.CreateClient() 関数により aozora.Client インスタンスを生成できるが，引数として context.Context および http.Client インスタンスを指定する。\nclient := aozora.New( aozora.WithScheme(\u0026#34;http\u0026#34;), aozora.WithServerName(\u0026#34;pubserver2.herokuapp.com\u0026#34;), ).CreateClient( context.Background(), \u0026amp;http.Client{}, ) ちなみに aozora.DefaultClient() 関数は以下の記述と同等である。\nclient := aozora.New( aozora.WithScheme(\u0026#34;http\u0026#34;), aozora.WithServerName(\u0026#34;www.aozorahack.net\u0026#34;), ).CreateClient( context.Background(), http.DefaultClient, ) ブックマーク  #aozorahack に関する覚え書き  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  インターネット図書館 青空文庫 野口 英司 はる書房 2005-11-01 単行本 4899840721 (ASIN), 9784899840725 (EAN) Rating\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  青空文庫の活動について紹介。作品を収録した DVD も付いてる！ 巻末に載っている富田倫生さんの文章は青空文庫に収録されている。\nreviewed by Spiegel on 2019-01-02 (powered by PA-API)\n  本の未来 (Ascii books) 富田 倫生 アスキー 単行本 4756117074 (ASIN), 9784756117076 (EAN) Rating\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  e-book の未来を予見する試みの書。あるいは本とコンピュータの関係について。青空文庫にも収録されている。\nreviewed by Spiegel on 2019-01-02 (powered by PA-API)\n  fields オプションは効いてない感じ？ [return]   "
    },
    {
      "title": "Go 言語用 CLI プログラミング支援パッケージ",
      "section": "release",
      "description": "このパッケージをそのまま使うことは想定しておらず，何らかのアレンジを加えた上で，それぞれの CLI ツール用に組み込むことを念頭に置いている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/gocli-package-for-golang/",
      "published": "2019-09-07T02:55:58+00:00",
      "update": "2019-09-07T03:43:51+00:00",
      "content": "  spiegel-im-spiegel/gocli: Minimal Packages for Command-Line Interface  本パッケージ gocli は Go 言語 で CLI (Command-Line Interface) を構成する際に必要になるであろう細々とした機能をまとめたライブラリである。 ただし，このパッケージをそのまま使うことは想定しておらず（そのまま使ってもいいけど）何らかのアレンジを加えた上で，それぞれの CLI ツール用に組み込むことを念頭に置いている。\nこのため gocli では Go コンパイラが提供する標準パッケージ以外の外部パッケージはなるべく使わないようにし，ライセンスも，あらゆる権利を放棄した CC0 を設定している。\nなお gocli パッケージは Go 1.13 以上を要求する。 ご注意を。\n  \n標準入出力と終了コード gocli/rwi パッケージは標準入出力をコンテキスト情報として格納する構造体を提供する。 また gocli/exitcode パッケージは CLI 終了時の終了コードを定義する。\n両者は以下のように使う。\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/exitcode\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/rwi\u0026#34; ) func run(ui *rwi.RWI) exitcode.ExitCode { ui.Outputln(\u0026#34;Hello world\u0026#34;) return exitcode.Normal } func main() { run(rwi.New( rwi.WithReader(os.Stdin), rwi.WithWriter(os.Stdout), rwi.WithErrorWriter(os.Stderr), )).Exit() } gocli/rwi パッケージを使うメリットはテストで発揮される。 たとえば上述の run() 関数をテストするのであれば\noutBuf := new(bytes.Buffer) outErrBuf := new(bytes.Buffer) code := run(rwi.New( rwi.WithWriter(outBuf), rwi.WithErrorWriter(outErrBuf), )) として実行結果を code, outBuf および outErrBuf から取り出し評価することができる。\nSIGNAL をハンドリングする gocli/signal パッケージは標準の context パッケージと組み合わせて SIGNAL のハンドリングを行う。 たとえば，こんな感じ\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/signal\u0026#34; ) func ticker(ctx context.Context) error { t := time.NewTicker(1 * time.Second) // 1 second cycle  defer t.Stop() for { select { case now := \u0026lt;-t.C: // ticker event  fmt.Println(now.Format(time.RFC3339)) case \u0026lt;-ctx.Done(): // cancel event from context  fmt.Println(\u0026#34;Stop ticker\u0026#34;) return ctx.Err() } } } func Run() error { errCh := make(chan error, 1) defer close(errCh) go func() { child, cancelChild := context.WithTimeout( signal.Context(context.Background(), os.Interrupt), // cancel event by SIGNAL  10*time.Second, // timeout after 10 seconds  ) defer cancelChild() errCh \u0026lt;- ticker(child) }() err := \u0026lt;-errCh fmt.Println(\u0026#34;Done\u0026#34;) return err } func main() { if err := Run(); err != nil { fmt.Fprintln(os.Stderr, err) return } } このコードでは signal.Context() 関数で指定した SIGNAL 用の context.Context インスタンスを生成している。 SIGNAL または親 context.Context インスタンスによるキャンセルイベントを受信した場合は，子 context.Context インスタンスにキャンセルが伝搬する。\ncontext パッケージを使ったキャンセルの伝搬については以下を参照のこと。\n time.Ticker で遊ぶ  ワイルドカードを含むファイルの検索 gocli/file パッケージを使ったファイル検索は標準の filepath.Glob() 関数を拡張する形で実装している。 こんな感じに使える。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/file\u0026#34; ) func main() { result := file.Glob(\u0026#34;**/*.[ch]\u0026#34;, nil) fmt.Println(result) // Output: \t// [testdata/include/source.h testdata/source.c] } file.Glob() 関数の第2引数には検索時の条件を設定できる。 こんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/file\u0026#34; ) func main() { result := file.Glob( \u0026#34;**/*.[ch]\u0026#34;, file.NewGlobOption(file.WithFlags(file.GlobStdFlags|file.GlobAbsolutePath))) fmt.Println(result) // Output: \t// [/home/username/work/gocli/file/testdata/include/source.h /home/username/work/gocli/file/testdata/source.c] } 指定できるフラグは以下の通り。\n//Operation flag in Glob() function. const ( GlobContainsFile GlobFlag = 1 \u0026lt;\u0026lt; iota GlobContainsDir GlobSeparatorSlash GlobAbsolutePath GlobStdFlags = GlobContainsFile | GlobContainsDir ) file.Glob() 関数の第2引数に nil をセットするか file.NewGlobOption() を引数なしで呼び出した場合は file.GlobStdFlags のみがセットされる。\ngocli/file パッケージはファイル操作の練習用に作ったもので，それなりには使えるとは思うが，正直に言って素朴すぎて効率はよくない。 実際に使うにはもう少しアレンジが必要になるだろう。\n設定ファイルのパスを取得する Go 1.13 から os.UserConfigDir() 関数が追加されたので，これを使って設定ファイルのパスを取得するパッケージ gocli/config を作ってみた。 こんな感じで使う。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/config\u0026#34; ) func main() { path := config.Path(\u0026#34;app\u0026#34;, \u0026#34;config.json\u0026#34;) fmt.Println(path) // Output: \t// /home/username/.config/app/config.json } アプリケーション名を指定して設定用ディレクトリのパスを取得する config.Dir(appName string) 関数も用意した。\nos.UserConfigDir() 関数で取得したパスにアプリケーション名と設定ファイル名をくっ付けただけの簡単なお仕事である。 Go 1.13 では os.UserConfigDir() 関数は以下のように記述されている。\n// UserConfigDir returns the default root directory to use for user-specific // configuration data. Users should create their own application-specific // subdirectory within this one and use that. // // On Unix systems, it returns $XDG_CONFIG_HOME as specified by // https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html if // non-empty, else $HOME/.config. // On Darwin, it returns $HOME/Library/Application Support. // On Windows, it returns %AppData%. // On Plan 9, it returns $home/lib. // // If the location cannot be determined (for example, $HOME is not defined), // then it will return an error. func UserConfigDir() (string, error) { var dir string switch runtime.GOOS { case \u0026#34;windows\u0026#34;: dir = Getenv(\u0026#34;AppData\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;%AppData% is not defined\u0026#34;) } case \u0026#34;darwin\u0026#34;: dir = Getenv(\u0026#34;HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;$HOME is not defined\u0026#34;) } dir += \u0026#34;/Library/Application Support\u0026#34; case \u0026#34;plan9\u0026#34;: dir = Getenv(\u0026#34;home\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;$home is not defined\u0026#34;) } dir += \u0026#34;/lib\u0026#34; default: // Unix \tdir = Getenv(\u0026#34;XDG_CONFIG_HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { dir = Getenv(\u0026#34;HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;neither $XDG_CONFIG_HOME nor $HOME are defined\u0026#34;) } dir += \u0026#34;/.config\u0026#34; } } return dir, nil } 参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "spiegel-im-spiegel/gocli v0.10.1 のリリース",
      "section": "release",
      "description": "書き直した結果 os.UserConfigDir() 関数で取得したパスにアプリケーション名と設定ファイル名をくっ付けただけの簡単なお仕事になった（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/gocli-v0_10_1-is-released/",
      "published": "2019-09-07T02:55:58+00:00",
      "update": "2019-09-07T03:43:51+00:00",
      "content": " Go 言語用 CLI プログラミング支援パッケージ gocli v0.10.1 をリリースした。\n Release v0.10.1 · spiegel-im-spiegel/gocli · GitHub  実は『改訂2版 みんなのGo言語』を読んで「そろそろ設定ファイルの置き場所を何とかしなくちゃ」と思ってこっそり v0.10.0 をリリースしたのだが， Go 1.13 で os.UserConfigDir() 関数が用意されているのを知って「もうこれでいいぢゃん」てな感じになり，書き直した。こんな感じに使える。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/config\u0026#34; ) func main() { path := config.Path(\u0026#34;app\u0026#34;, \u0026#34;config.json\u0026#34;) fmt.Println(path) // Output: \t// /home/username/.config/app/config.json } 書き直した結果 os.UserConfigDir() 関数で取得したパスにアプリケーション名と設定ファイル名をくっ付けただけの簡単なお仕事になった（笑） 私は設定ファイルと CLI との連携に spf13/viper を使っているので，これで必要十分。\ngocli の使い方について詳しくは以下を参照のこと。\n Go 言語用 CLI プログラミング支援パッケージ  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  改訂2版 みんなのGo言語 松木 雅幸, mattn, 藤原 俊一郎, 中島 大一, 上田 拓也, 牧 大輔, 鈴木 健太 技術評論社 2019-08-01 (Release 2019-08-01) Kindle版 B07VPSXF6N (ASIN), 9784297107284 (EISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  改訂2版の目玉は7章の「データベースの扱い方」が追加されたことだろう。他の章では，大まかな構成は1版と同じだが細かい部分が変わっていて Go 1.12 への言及まであるのには驚いた。\nreviewed by Spiegel on 2019-08-12 (powered by PA-API)\n "
    },
    {
      "title": "Go 言語用エラーハンドリング・パッケージ",
      "section": "release",
      "description": "標準の errors パッケージと組み合わせてエラーハンドリングの助けとなれば幸いである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/errs-package-for-golang/",
      "published": "2019-09-05T14:54:45+00:00",
      "update": "2019-09-07T03:43:51+00:00",
      "content": "  spiegel-im-spiegel/errs: Error handling for Golang  本パッケージは Go 言語によるプログラミングに於いて標準の errors パッケージを補完しエラーハンドリングを行うことができる。\nなお errs パッケージは Go 1.13 以上を要求する。 ご注意を。\n  \nインポート import \u0026#34;github.com/spiegel-im-spiegel/errs\u0026#34; 簡単な使い方 たとえば，以下のようなファイルをオープンするだけの関数を考えてみる。\nfunc checkFileOpen(path string) error { file, err := os.Open(path) if err != nil { return err } defer file.Close() return nil } os.Open() 関数の実行時に吐き出されるエラー・インスタンス err を errs.Wrap() 関数でラッピングする。 こんな感じ。\nfunc checkFileOpen(path string) error { file, err := os.Open(path) if err != nil { return errs.Wrap( err, \u0026#34;file open error\u0026#34;, errs.WithParam(\u0026#34;path\u0026#34;, path), )  } defer file.Close() return nil } errs.Wrap() 関数では元になる error インスタンスと追加のメッセージ，および errs.WithParam(name, value string) 関数で指定する任意のパラメータ（0個以上複数指定可能）を引数とする。\nでは実際に checkFileOpen() 関数を動かしてみよう。\nfunc main() { if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { fmt.Printf(\u0026#34;%v\\n\u0026#34;, err) } } この場合の実行結果は以下の通り。\n$ go run sample.go file open error: open not-exist.txt: no such file or directory まぁ Go 言語ではありふれた出力形式だ。\nここで fmt.Printf() の書式を %v から %#v に変えてみる。\nfunc main() { if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { fmt.Printf(\u0026#34;%#v\\n\u0026#34;, err)  } } すると実行結果は\n$ go run sample.go \u0026amp;errs.Error{Msg:\u0026#34;file open error\u0026#34;, Params:map[string]string{\u0026#34;function\u0026#34;:\u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;not-exist.txt\u0026#34;}, Cause:\u0026amp;os.PathError{Op:\u0026#34;open\u0026#34;, Path:\u0026#34;not-exist.txt\u0026#34;, Err:0x2}} という感じに構造体のダンプ表示ぽい出力になる。\nちなみに errs.Error.Params 要素は map[string]string 型の連想配列になっているが，既定でエラーが発生した関数名を格納している。 これでエラーを追いやすくなるだろう。\n更に書式を %+v に変える。\nfunc main() { if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { fmt.Printf(\u0026#34;%+v\\n\u0026#34;, err)  } } この場合の実行結果は\n$ go run sample.go {\u0026#34;Type\u0026#34;:\u0026#34;*errs.Error\u0026#34;,\u0026#34;Msg\u0026#34;:\u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;,\u0026#34;Params\u0026#34;:{\u0026#34;function\u0026#34;:\u0026#34;main.checkFileOpen\u0026#34;,\u0026#34;path\u0026#34;:\u0026#34;not-exist.txt\u0026#34;},\u0026#34;Cause\u0026#34;:{\u0026#34;Type\u0026#34;:\u0026#34;*os.PathError\u0026#34;,\u0026#34;Msg\u0026#34;:\u0026#34;open not-exist.txt: no such file or directory\u0026#34;,\u0026#34;Cause\u0026#34;:{\u0026#34;Type\u0026#34;:\u0026#34;syscall.Errno\u0026#34;,\u0026#34;Msg\u0026#34;:\u0026#34;no such file or directory\u0026#34;}}} と JSON フォーマットで出力される。 これなら\n$ go run sample.go | jq . { \u0026#34;Type\u0026#34;: \u0026#34;*errs.Error\u0026#34;, \u0026#34;Msg\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;Params\u0026#34;: { \u0026#34;function\u0026#34;: \u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;not-exist.txt\u0026#34; }, \u0026#34;Cause\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;*os.PathError\u0026#34;, \u0026#34;Msg\u0026#34;: \u0026#34;open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;Cause\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;syscall.Errno\u0026#34;, \u0026#34;Msg\u0026#34;: \u0026#34;no such file or directory\u0026#34; } } } といった感じに他ツールと組み合わせて errs.Error インスタンスの中身を検証することができる。\nおまけの機能として errs.Cause() 関数も用意してみた。\nfunc main() { if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { fmt.Printf(\u0026#34;%v\\n\u0026#34;, errs.Cause(err)) } // Output:  // no such file or directory } このように errs.Cause() 関数では階層化 error を遡って大元の error インスタンスを抽出することができる。\nerrs パッケージと標準の errors パッケージを組み合わせることでエラーハンドリングの助けとなれば幸いである。\nブックマーク  Go 1.13 のエラー・ハンドリング  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "Go 言語用エラーハンドリング・パッケージをリリースした",
      "section": "release",
      "description": "実は以前にこっそり v0.1.0 をリリースして自作ツールのエラーハンドリングに用いていたのだが， Go 1.13 のリリースに合わせて中身を作り直した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/errs-package-is-released/",
      "published": "2019-09-05T14:54:45+00:00",
      "update": "2019-09-07T03:43:51+00:00",
      "content": " Go 言語用エラーハンドリング・パッケージ errs の v0.2.0 をリリースした。\n Release v0.2.0 · spiegel-im-spiegel/errs · GitHub  実は以前にこっそり v0.1.0 をリリースして自作ツールのエラーハンドリングに用いていたのだが， Go 1.13 のリリースに合わせて中身を作り直した。\n使い方は以下を参照のこと。\n Go 言語用エラーハンドリング・パッケージ  これで先に進めるな。\n【2019-09-06 追記】 v0.2.1 をリリースした  Release v0.2.1 · spiegel-im-spiegel/errs · GitHub  つか，実はバージョンタグを付け間違えただけなのだが，バージョンタグを付け換えるとチェックサム・データベース sum.golang.org が怒って\nSECURITY ERROR This download does NOT match the one reported by the checksum server. The bits may have been replaced on the origin server, or an attacker may have intercepted the download attempt. For more information, see \u0026#39;go help module-auth\u0026#39;. とか言ってくさるので，しょうが無しにバージョン番号を上げることにした。 やれやれ。\nバージョンタグの管理は慎重に。\nブックマーク  Go 1.13 のエラー・ハンドリング  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "Go 1.13 がリリースされた",
      "section": "release",
      "description": "9月にずれ込んでしまったが，ようやくリリースされた。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/go-1_13-is-released/",
      "published": "2019-09-04T13:34:29+00:00",
      "update": "2019-09-04T13:34:43+00:00",
      "content": " 9月にずれ込んでしまったが，ようやく Go 1.13 がリリースされた1。\n Go 1.13 is released - Google Group Go 1.13 Release Notes - The Go Programming Language Go 1.13 is released - The Go Blog  主な変更点は以下の通り。\n The go command now downloads and authenticates modules using the Go module mirror and Go checksum database by default Improvements to number literals Error wrapping TLS 1.3 on by default Improved modules support  via Go 1.13 is released  この内のいくつかはこのブログでも既に紹介しているので，参考にどうぞ。\n Go 1.13 のエラー・ハンドリング Go 言語の環境変数管理 Go モジュールのミラーリング・サービス【正式版】  そろそろ WebAssembly にも手を出す季節だろうか。\n例によって Ubuntu の APT が提供する Go コンパイラは3世代も古くて使いものにならないため2，ダウンロードページから go1.13.linux-amd64.tar.gz を取ってきて任意の場所に展開する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.13.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.13.linux-amd64.tar.gz $ sudo mv go go1.13 $ sudo ln -s go1.13 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.13 linux/amd64 ほい。 ひと仕事終わり。\nアップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  同じタイミングで Android 10 がリリースされていたので関連を疑ったが（笑），どうやら関係ないらしい。 Twitter で教えてもらいました。まぁ Android のバージョンアップスケジュールに付き合わされてはたまらんしねぇ。 [return] 提供される Go コンパイラのサポートは1世代前まで。 [return]   "
    },
    {
      "title": "Go モジュールのミラーリング・サービス【正式版】",
      "section": "golang",
      "description": "Google による Go モジュールの公式ミラーリング・サービスが正式リリースした。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/mirror-index-and-checksum-database-for-go-module/",
      "published": "2019-09-01T10:39:57+00:00",
      "update": "2019-09-06T11:40:07+00:00",
      "content": " （この記事は「Go モジュールのミラーリングとインデックス化」を全面改訂したものです）\nGoogle による Go モジュールの公式ミラーリング・サービスが正式リリースした。\n Module Mirror and Checksum Database Launched - The Go Blog  proxy.golang.org sum.golang.org index.golang.org   モジュール・ミラー ミラー・サーバ proxy.golang.org は Go 言語のモジュールをミラーリングする一種のプロキシ・サーバとして機能する。 ただし，単純な透過プロキシではなく必要なバージョンのみ取ってこれるようになっているようだ。\n Module Mirror and Checksum Database Launched  ミラー・サーバは環境変数 GOPROXY で URL を指定する。 GOPROXY の既定値は Go 1.13 では以下のようになっている。\n$ go env | grep GOPROXY GOPROXY=\u0026#34;https://proxy.golang.org,direct\u0026#34; ミラー・サーバは複数指定できる（指定する場合はカンマで区切る）。 ミラーリングを無効にする場合は GOPROXY に direct のみを指定する。\ngo env -w GOPROXY=direct ミラーリングが有効な状態で特定の非公開モジュールを使う場合は GOPRIVATE に非公開モジュールのパスを指定する。\nチェックサム・データベース Go 言語では利用するモジュールの完全性（integrity）を担保するために go.sum ファイルにモジュールの SHA-256 チェックサム値を格納しているが，最初にモジュールをフェッチする場合はチェックサム値が分からないため無条件に信頼せざるを得ない。\n公開されているモジュールのチェックサム値がデータベース化されていれば未知のモジュールに対しても（チェックサム・データベースを参照することで）ある程度の信頼性を確保できるだろう。\nチェックサム・データベースは環境変数 GOSUMDB で指定する。 GOSUMDB の既定値は Go 1.13 では以下のようになっている。\n$ go env | grep GOSUMDB GOSUMDB=\u0026#34;sum.golang.org\u0026#34; チェックサム・データベースを無効にする場合は GOSUMDB に off をセットする。\ngo env -w GOSUMDB=off また特定のモジュールを検索対象から除外する場合は，ミラーリング除外のときと同じく GOPRIVATE が使える。\n公式チェックサム・データベース sum.golang.org は Trillian による透過ログ（追記型データベース）で改竄に強いという特徴がある。\nまぁ，最初から悪意のあるモジュールは排除しようがないが malicious code 混入は検知しやすくなるかも知れない。\n【2019-09-06 追記】 バージョンタグの管理に注意 上で述べたように標準の sum.golang.org は追記型のデータベースで，既存データの変更はできない仕様になっている。\nたとえばパッケージ/モジュールのリポジトリにバージョンタグ（v0.1.0 など）を付ける際に，うっかり間違ったコミットにタグを付けたとしても，一度 sum.golang.org に登録されると取り消すことができない。 手動でタグの位置を変えても，モジュール読み込み時に\nSECURITY ERROR This download does NOT match the one reported by the checksum server. The bits may have been replaced on the origin server, or an attacker may have intercepted the download attempt. For more information, see \u0026#39;go help module-auth\u0026#39;. などと表示されビルドに失敗する。\n少なくとも公開されているパッケージ/モジュールでは迂闊にバージョンタグを付け換えないよう，管理は慎重に行う必要がある。\nミラーリング・サービスのプライバシー・ポリシー 今回，正式稼働したミラーリング・サービスのプライバシー・ポリシーは以下のページある。\n Privacy: Go modules services  以前はいきなり Google のページに飛ばされて「なんだかなぁ」という感じだったが，多少マシになったようである（笑）\nこれによると公式サービスでは以下の情報を収集しているようだ。\n Request timestamp Client IP address Full request URL, including:  service domain, e.g. proxy.golang.org URI path being requested  Response latency Response bytes sent Response code sent The response returned by the go command when it runs in our systems Whether the request hit our frontend cache Whether the request hit a cache elsewhere in the system (but not the frontend) Name of the Google machine that processed this request, e.g. machine101  via Privacy: Go modules services  取得した情報については\nWe do not store logged personally identifiable information such as IP addresses for more than 30 days. We also do not correlate or combine information from our request logs with any personal information that you have provided Google for other services. via Privacy: Go modules services  ということらしいが，最後の\nWe intend to aggregate and anonymize usage metrics to measure popularity for Go modules and share this popularity data with the Go community. via Privacy: Go modules services  てのがねぇ。 プライバシーに敵対的な企業のサービスだと思うとあまり利用したくない気分なのだが（もちろん偏見），はてさて1。\nブックマーク  Go 1.13 と 1.14 （Go 2 へ向けて） Go 言語の環境変数管理  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  Go 言語にしろ（最近ブームが再燃している） Dart 言語にしろ，言語系のプロダクトやサービスは Google から切り離してほしいよなぁ。 Alphabet の傘下から外れろとまでは言わないから。 [return]   "
    },
    {
      "title": "Go 言語の環境変数管理",
      "section": "golang",
      "description": "Go 1.13 からは go env コマンドに -w オプションを付けて環境変数を設定できる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/go-env/",
      "published": "2019-09-01T06:31:18+00:00",
      "update": "2019-09-01T06:34:53+00:00",
      "content": " Go 1.13 より環境変数の管理の仕方が変わった。\n環境変数の設定・削除 まずは go env コマンドで Go 言語関連の環境変数を表示してみる（一部だけね）。 ちなみに私の作業環境は Linux/Ubuntu である。\n$ go env GO111MODULE=\u0026#34;\u0026#34; GOARCH=\u0026#34;amd64\u0026#34; GOBIN=\u0026#34;\u0026#34; GOCACHE=\u0026#34;/home/username/.cache/go-build\u0026#34; GOENV=\u0026#34;/home/username/.config/go/env\u0026#34; GOEXE=\u0026#34;\u0026#34; GOFLAGS=\u0026#34;\u0026#34; GOHOSTARCH=\u0026#34;amd64\u0026#34; GOHOSTOS=\u0026#34;linux\u0026#34; GONOPROXY=\u0026#34;\u0026#34; GONOSUMDB=\u0026#34;\u0026#34; GOOS=\u0026#34;linux\u0026#34; GOPATH=\u0026#34;/home/username/go\u0026#34; GOPRIVATE=\u0026#34;\u0026#34; GOPROXY=\u0026#34;https://proxy.golang.org,direct\u0026#34; GOROOT=\u0026#34;/usr/local/go\u0026#34; GOSUMDB=\u0026#34;sum.golang.org\u0026#34; GOTMPDIR=\u0026#34;\u0026#34; ... たとえば GO111MODULE の値を on にしたければ\n$ export GO111MODULE=on $ go env GO111MODULE on などとする。 Go 1.12 まではこれで OK。\nGo 1.13 からは go env コマンドに -w オプションを付けて環境変数を設定できる。\n$ export -n GO111MODULE $ go env -w GO111MODULE=auto $ go env GO111MODULE auto また -u オプションで設定を削除できる。\n$ go env -u GO111MODULE $ go env | grep GO111MODULE GO111MODULE=\u0026#34;\u0026#34; ちなみに shell で設定している環境変数と go env -w コマンドで設定する環境変数が被る場合\n$ export GO111MODULE=on $ go env -w GO111MODULE=auto warning: go env -w GO111MODULE=... does not override conflicting OS environment variable $ go env | grep GO111MODULE GO111MODULE=\u0026#34;on\u0026#34; となり shell 側の設定のほうが優先されるようだ。 一時的な変更の場合は shell 側の環境変数を使えということやね。\n環境変数設定の置き場所 go env -w コマンドで設定した環境変数の値は GOENV で指示されるファイルに格納される。 GOENV の既定値は以下の通り（Linux/Ubuntu の場合）。\n$ go env GOENV /home/username/.config/go/env ちなみに $HOME/.config/ ディレクトリは XDG Base Directory でユーザごとにアプリケーション設定を格納するディレクトリとして規定されている。 また XDG_CONFIG_HOME 環境変数が定義されている場合は，こちらの値が設定ディレクトリとして優先される。\nGo 1.13 からは os.UserConfigDir() 関数で XDG Base Directory に対応した設定ディレクトリを取得できる。 os.UserConfigDir() 関数は他のプラットフォームにも対応していて，プラットフォームごとに適切なパスを返すようだ。\n// UserConfigDir returns the default root directory to use for user-specific // configuration data. Users should create their own application-specific // subdirectory within this one and use that. // // On Unix systems, it returns $XDG_CONFIG_HOME as specified by // https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html if // non-empty, else $HOME/.config. // On Darwin, it returns $HOME/Library/Application Support. // On Windows, it returns %AppData%. // On Plan 9, it returns $home/lib. // // If the location cannot be determined (for example, $HOME is not defined), // then it will return an error. func UserConfigDir() (string, error) { var dir string switch runtime.GOOS { case \u0026#34;windows\u0026#34;: dir = Getenv(\u0026#34;AppData\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;%AppData% is not defined\u0026#34;) } case \u0026#34;darwin\u0026#34;: dir = Getenv(\u0026#34;HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;$HOME is not defined\u0026#34;) } dir += \u0026#34;/Library/Application Support\u0026#34; case \u0026#34;plan9\u0026#34;: dir = Getenv(\u0026#34;home\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;$home is not defined\u0026#34;) } dir += \u0026#34;/lib\u0026#34; default: // Unix \tdir = Getenv(\u0026#34;XDG_CONFIG_HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { dir = Getenv(\u0026#34;HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;neither $XDG_CONFIG_HOME nor $HOME are defined\u0026#34;) } dir += \u0026#34;/.config\u0026#34; } } return dir, nil } 以前から os.UserCacheDir() 関数で XDG Base Directory 対応のキャッシュ・ディレクトリは取得可能だったが，これでまたひとつ対応が進んだわけだ。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "2019-09-01 のブックマーク",
      "section": "bookmarks",
      "description": "「AWS 東京リージョンで発生した大規模障害についてまとめてみた」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/09/01-bookmarks/",
      "published": "2019-09-01T02:06:58+00:00",
      "update": "2019-09-01T02:09:37+00:00",
      "content": " リリース情報  Thunderbird — Release Notes (68.0) — Mozilla  What’s New in Thunderbird 68 | The Mozilla Thunderbird Blog 「Thunderbird 68」を正式公開 ～「Thunderbird 60」系統からのメジャーバージョンアップ - 窓の杜  スクリプト言語「Ruby」v2.4.7/2.5.6/2.6.4が公開 - 窓の杜 「Linux 5.2.11」リリース | Think IT（シンクイット）  バベルのインターネット  インターネット・アーカイブがロシアで永久ブロッキングの危機に直面 | P2Pとかその辺のお話R ISPs Block BitTorrent Traffic Despite EU Net Neutrality Regulation - TorrentFreak  セキュリティ＆プライバシー関連  Boxがセキュリティ強化ツールの「Box Shield」を発表 | TechCrunch Japan カザフスタン政府の侵入的インターネット監視に立ち上がった主要ブラウザベンダー | P2Pとかその辺のお話R 国際宇宙ステーションで発生した不正アクセス疑惑についてまとめてみた - piyolog AWS 東京リージョンで発生した大規模障害についてまとめてみた - piyolog  AWS、東京リージョン23日午後の大規模障害について詳細を報告。冷却システムにバグ、フェイルセーフに失敗、手動操作に切り替えるも反応せず － Publickey AWS、複数のアベイラビリティゾーンで稼働していたアプリケーションでも大規模障害の影響があったと説明を修正。東京リージョンの大規模障害で追加報告 － Publickey  あなたの行動データと広告のリンクをコントロールできるフェイスブックの新機能 | TechCrunch Japan : これから開発するんかい！ 「Webmin」の脆弱性を標的としたアクセスを警察庁が観測 - INTERNET Watch When Fake News Comes to Academia - Lawfare Detecting Credit Card Skimmers - Schneier on Security 一部のWindows 7ユーザーにセキュリティアップデートを1年間無料提供へ | TechCrunch Japan : XP のときと同じ展開になったな（笑） それでも Win7 以下を使い続ける人はいるだろうけど 暗号化をめぐる攻防、解決策を見出せるか - ZDNet Japan Googleはウェブのプライバシーとフィンガープリントの新たな対策を提案 | TechCrunch Japan Impervaの顧客情報流出についてまとめてみた - piyolog Want a security starter pack? | Surveillance Self-Defense Windows Updateに起因した国内の通信障害についてまとめてみた - piyolog キャッシュレス決済サービスの補償制度の状況についてまとめてみた - piyolog 転職サイトのビズリーチ、OSSの脆弱性管理ツールを開発　きっかけは「社内の悩み」 (1/2) - ITmedia NEWS 「つながるクルマ」はなぜ危ないのか、セキュリティを確保するために必要なもの - MONOist（モノイスト） AI Emotion-Detection Arms Race - Schneier on Security Attacking the Intel Secure Enclave - Schneier on Security 悪質ウェブサイトを利用して数年間もiPhoneが秘かにハックされていたことが判明 | TechCrunch Japan  天文関連  ニュース - 木星の巨大な嵐の内側をアルマ望遠鏡で探る - アルマ望遠鏡 ひらめき☆ときめきサイエンス「美ら星研究体験隊」 高校生による新しい電波星（水メーザー天体）の発見について | 国立天文台 水沢 MIT Tech Review: NASAが深宇宙原子時計を起動、人類の火星到達の強力な助っ人に  知財関連  Cloudflareによる8chan追放の判断、海賊版サイトに影響は？ | P2Pとかその辺のお話R Now You Can Watch the Keynotes from CC’s 2019 Global Summit - Creative Commons YouTube Sued For $720K Over Alleged Copyright Strike \u0026quot;Retaliation\u0026quot; - TorrentFreak Linux その44 - MicrosoftがexFATの仕様を公開・Linux kernelでのサポートを後押し - kledgeb : exFAT は特許が絡むので，その辺が自由にならない限りは安心して利用できない 論文の海賊版対策を続けてもSci-Hubには勝てない | P2Pとかその辺のお話R  Linux または Ubuntu に関する話題  Ubuntu 18.04 その354 - Ubuntu 18.04.3 LTS 日本語 Remixがリリースされました・ディスクイメージのダウンロード - kledgeb  その他  ［速報］KubernetesをvSphereに統合した「Project Pacific」を発表、vSphere上でKuberenetesクラスタなど運用可能に。VMWorld 2019 US － Publickey 「VMware Tanzu」（箪笥、たんす）発表。Kubernetes対応ソフトウェアの開発支援ツールおよびサービス群。VMworld 2019 US － Publickey MIT Tech Review: CO2排出量は車の5倍、力任せの深層学習は環境に悪すぎる 衛星インターネットスタートアップのAstranis、Falcon 9ロケットによる初打ち上げを契約 | TechCrunch Japan VMware Cloudをオンプレミスで利用可能な「VMware Cloud on Dell EMC」正式リリース。VMworld 2019 US － Publickey 自律運転車の寿命はわずか4年というフォードの目算の真実 | TechCrunch Japan スマートフォンの売上がまた減ったけどもう誰も驚かない | TechCrunch Japan : まぁ驚かんよね（笑） VMwareのクラウド基盤がAzure東京リージョンで利用可能に。「Azure VMware Solutions」を2020年第一四半期に東京リージョンで提供と発表。VMworld 2019 US － Publickey アスパラ収穫ロボは量産体制へ、開発元のinahoが資金調達 | TechCrunch Japan C言語でニューラルネットワークの実装（１）〜多層パーセプトロンの構造と活性化関数〜 - Qiita  C言語でニューラルネットワークの実装（２）〜順伝播と損失関数〜 - Qiita C言語でニューラルネットワークの実装（３）〜誤差逆伝播法〜 - Qiita C言語でニューラルネットワークの実装（４）〜データの準備〜 - Qiita C言語でニューラルネットワークの実装（５）〜モデルの構造と順伝播の実装〜 - Qiita C言語でニューラルネットワークの実装（６）〜逆伝播の実装〜 - Qiita C言語でニューラルネットワークの実装（７）〜オンライン学習と重みの初期値〜 - Qiita  東工大、スパコン「TSUBAME3.0」にNVIDIA仮想GPUを活用 - ZDNet Japan 米企業130社以上のファーウェイへの販売申請がすべて却下 | TechCrunch Japan MozillaのビアードCEO、年内に辞任へ - ZDNet Japan 2019年のロードマップに見るプログラミング言語「Rust」のこれから - ZDNet Japan Big Sky :: mongoose ウェブサーバと TensorFlow Lite を使った Object Detection API サーバを書いた。  "
    }
  ]
}
