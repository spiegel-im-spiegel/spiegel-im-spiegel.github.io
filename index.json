{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "2019-04-29 のブックマーク",
      "section": "bookmarks",
      "description": "「Node.js 12正式版が登場、1年ぶりのLTS対象バージョン。起動高速化、TLS1.3対応、ES6モジュールの実験的サポートなど」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/04/29-bookmarks/",
      "published": "2019-04-29T06:54:28+00:00",
      "update": "2019-04-29T06:59:48+00:00",
      "content": " リリース情報  Node.js 12正式版が登場、1年ぶりのLTS対象バージョン。起動高速化、TLS1.3対応、ES6モジュールの実験的サポートなど － Publickey アプリフレームワーク「Electron 5.0.0」が公開 - 窓の杜  Age of Trump  オープンに議論が出来る場所としてのTED~FacebookとBrexit｜市川裕康 (メディアコンサルタント）｜note 英国「ポルノ鎖国」が海賊版ブロッキングの抜け道を広げる – P2Pとかその辺のお話R  セキュリティ＆プライバシー関連  MIT Tech Review: 大統領選で「ブロックチェーン投票」一部導入へ、ウェストバージニア州 Excellent Analysis of the Boeing 737 Max Software Problems - Schneier on Security グーグル、組み込みブラウザーフレームワークからのサインインをブロックへ--中間者攻撃対策を強化 - ZDNet Japan MIT Tech Review: 暗号通貨の不正採掘、総額5000万ドル超で「ぼろ儲け」か  MIT Tech Review: 崩れ始めた安全神話、ブロックチェーンの「乗っ取り」が現実に : 邦訳タイトルが頭悪すぎて読む気をなくす（笑）  事前準備 - それは最先端の攻撃者が常に怠らないこと。迫り来るサイバー攻撃へのあなたの会社の準備は十分ですか? - F-Secure 海外のIT大手などを狙ったフィッシング活動についてまとめてみた - piyolog 「お金を払ってセキュリティを学ぶ」のは平成で終わり？　ある無料教本が神レベルで優れている件 (1/3) - ITmedia エンタープライズ EUの巨大バイオメトリクスデータベース構築法案が議会を通過 - ZDNet Japan カードの有効性確認が発覚した情報漏えいについてまとめてみた - piyolog G7 Comes Out in Favor of Encryption Backdoors - Schneier on Security ISC BIND 9 に対する複数の脆弱性に関する注意喚起 3 things Tinder knows about you - F-Secure Blog マイクロソフト、パスワードの定期的な変更は無駄と認める - ZDNet Japan プライバシーは市民的自由であり、公民権でもある – P2Pとかその辺のお話R Oracle Security Alert CVE-2019-2725  Oracle WebLogic Server の脆弱性（CVE-2019-2725）について：IPA 独立行政法人 情報処理推進機構 Oracle WebLogic Server の脆弱性 (CVE-2019-2725) に関する注意喚起  MIT Tech Review: カラープリントした紙で「AIの監視」から逃れる方法  天文関連  MIT Tech Review: 太陽系外から恒星間天体が5年前にも飛来、大気圏で焼失か？ 太陽系の果てに小天体の影を発見したのは、宮古島の小さな望遠鏡だった – 半径約1.3kmのカイパーベルト天体を初観測 | academist Journal MIT Tech Review: 深刻化する宇宙空間の環境問題、新たな学問分野を天文学者が提唱 水星と地球のコアの大きさはだいたいおんなじ | ギズモード・ジャパン 「ブラックホールの一部しか映ってないじゃん！」→実は「映ってない部分」がすごいんだよ、というお話 - ねとらぼ アルマ望遠鏡、惑星の素材となる一酸化アルミニウムを観測 | 国立天文台(NAOJ)  知財関連  Openload、アップローダー向けアフィリエイトプログラムを終了 – P2Pとかその辺のお話R 米政府、「悪名高き市場」リストで海賊版/ストリームリップ/チートサイト、防弾ホストに圧力 – P2Pとかその辺のお話R  その他  選挙に行ってきたけど - 18 til i die (another phase) EFF’s Tweet About an Overzealous DMCA Takedown Is Now Subject to an Overzealous Takedown | Electronic Frontier Foundation  Warner Bros. Takes Down TorrentFreak Tweet Over Software Piracy? (Updated) - TorrentFreak  ところで筒井康隆の最高傑作って何なのだろう？ - YAMDAS現更新履歴 今年ローレンス・レッシグの本が2冊も出る - YAMDAS現更新履歴 マイクロソフト、リアルタイムOS大手の「Express Logic」を買収。IoTデバイス用のOSとして展開へ － Publickey DockerとArmが戦略的提携--ArmプラットフォームでDocker開発者のアプリ構築を効率化 - ZDNet Japan レビュー「がん生存率は着実に上昇しているが、それはがんと闘うための一指標 余命は最善を尽くす治療と患者自身の闘病の仕方で大きく変わる」 | SciencePortal Ubuntu Studio 16.04 その1 - Ubuntu Studio 16.04 LTSサポート終了のお知らせ - kledgeb 10連休にならない会社とモデル就業規則問題｜塚本 牧生｜note 「Apache NetBeans」が“インキュベーター”を卒業 - 窓の杜 Cinnamon その24 - Ubuntu 19.04にCinnamon 3.8.8をインストールするには - kledgeb ファイルホスティング大手のZippyShare、英独からのアクセスに“403 forbidden”を返す – P2Pとかその辺のお話R  "
    },
    {
      "title": "Windows とともに平成は去り Ubuntu とともに令和を迎える",
      "section": "remark",
      "description": "めっさ快適なのですよ。 喩えるなら重いコートを脱いででかけてみたい気分（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/hello-ubuntu/",
      "published": "2019-04-29T05:36:53+00:00",
      "update": "2019-04-29T05:43:01+00:00",
      "content": "この前 Facebook の TL で「平成最後のプレミアムフライデー」というフレーズを見かけて「もしかして『平成』を最も象徴するのは二千円札とプレミアムフライデーなんじゃないだろうか」と思ったり。 そのココロは「失われた30年」もしくは「斜陽国家ニッポン」。\nおあとがよろしいようで。\nじゃなくて，予告どおり自宅マシンを Ubuntu に換装したですよ。 事前調査のおかげで特にトラブルもなく順調に作業を進めている。 ようやくブログ記事がかける程度にまで環境が整ったので試運転を兼ねて戯れ言を書いている。\nつかね。 めっさ快適なのですよ。 喩えるなら重いコートを脱いで出掛けてみたい気分（笑）\nたとえば ATOM エディタ。 OS を換えるだけで「もっさり」感がかなり軽減してしまった。 まぁ起動は相変わらず遅いけど，最初に起動させてしまえば後は快適1。\nあと Hugo。 こちらは処理時間がはっきり数値で出る。 5分の1以下に一気に短縮ですよ。 今までは何だったのか。\n本当はこんなに急いでやるつもりはなくて2019年内に移行できればよかったんだけど，前にも書いたとおり Microsoft は随分前から Windows 7 を見捨てている（考えてみれば4年前から Win7 ユーザを脅してた）し，個人的にもこの GW を逃せば当分の間まとまった休みはとれそうもなかったので（ビンボー暇なし），丁度いい機会だったのだろう。\n脅しをかけてくれた Microsoft にはお礼を言わなきゃ。 ありがとうございます（笑）\n GOLDEN☆BEST キャンディーズ コンプリート・シングルコレクション キャンディーズ (メインアーティスト) Sony Music Direct(Japan)Inc. 2011-06-08 (Release 2015-11-04) Digital Music Album MP3 ダウンロード ASIN: B01721ECA8 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  今さら昭和時代のアイドルを美化するつもりはないけれど，あのとき（生物年齢的にも）子供だった私にとって彼女らは間違いなく憧れのアイドルだったのですよ。\nreviewed by Spiegel on 2019-04-29 (powered by amazon-item 0.2.1)\n  ちょっと開いてちょちょっと弄る程度であれば vi で十分だしね。実は vi/vim は若い頃のトラウマ（現地調整で部屋の隅っこで VT 端末でデバッグさせられたとか）がフラッシュバックするのであまり使いたくないのだけど，位置付け的には Windows で言うところの notepad みたいなもんだし，これから長い付き合いになるのだろう。ちなみに vim は既定で入ってなかったので後で入れる予定。 [return]   "
    },
    {
      "title": "「《命》に関わる確率」を疑似乱数を使って解いてみる",
      "section": "remark",
      "description": "結果だけを見れば直感に反するかも知れないが，こうやって実際にコードを書いてみると納得感が強まる。 やっぱプログラマはコードを書いてナンボだよね（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/mathgirl-note257/",
      "published": "2019-04-23T12:06:30+00:00",
      "update": "2019-04-29T06:59:48+00:00",
      "content": " cakes で連載中の「数学ガールの秘密ノート」。 今回の「確率の冒険：《命》に関わる確率（前編）」はなかなか面白かった。 確率や統計は直感に反する場合があって，そういう事例を考えるのは本当に楽しい。\n今回のプロブレムを整理してみよう。\n  《○○菌》に感染している人は《全人口の1%》である ○○菌に感染しているか否かを調べる《判定キット》がある。判定キットは感染しているか否かを《90%の確率》で正しく判定する  《感染している》という判定のことを《陽性》と呼ぶ 《感染していない》という判定のことを《陰性》と呼ぶ  ある人を判定キットで調べたら《陽性》だった。この人が○○菌に実際に感染している確率を求めよ  via 確率の冒険：《命》に関わる確率（前編）  きちんとした解法は本編を読んでいただくとして，この記事では疑似乱数を用いたシミュレーションで解いてみる。\n指定した確率で真偽を出力するクラス まずは指定した確率で真偽を出力するクラスを考えてみる。 Go 言語でね（笑）\nこんな感じでどうだろう。\npackage prob import ( \u0026#34;math\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) func New(p float64) \u0026lt;-chan bool { ch := make(chan bool) go func() { defer close(ch) max := 1000000 limit := percent(p, max) rnd := rand.New(rand.NewSource(time.Now().UnixNano())) for { n := rnd.Intn(max) + 1 ch \u0026lt;- n \u0026lt; limit } }() return ch } func percent(f float64, max int) int { if f \u0026lt; 0 { return 0 } if f \u0026gt; 1.0 { return max } return int(math.Floor(f*float64(max) + 0.5)) } これで\nch := prob.New(0.1) とすれば channel ch から10%の確率で true が出力される筈である。 サンプル・コードを書いて試してみよう。\nfunc probability(try int, ch \u0026lt;-chan bool) int { count := 0 for i := 0; i \u0026lt; try; i++ { if \u0026lt;-ch { count++ } } return count } func main() { ch := prob.New(0.1) min := float64(1) max := float64(0) sum := float64(0) sum2 := float64(0) try := 10000 tryf := float64(try) ps := make([]float64, 0, try) for i := 0; i \u0026lt; try; i++ { count := probability(try, ch) p := float64(count) / tryf ps = append(ps, p) if p \u0026lt; min { min = p } if p \u0026gt; max { max = p } sum += p sum2 += p * p } fmt.Printf(\u0026#34;minimum value: %7.5f\\n\u0026#34;, min) fmt.Printf(\u0026#34;maximum value: %7.5f\\n\u0026#34;, max) ave := sum / tryf fmt.Printf(\u0026#34;average: %7.5f\\n\u0026#34;, ave) devi := math.Sqrt(sum2/tryf - ave*ave) //standard deviation \tct := 0 for _, p := range ps { if ave-devi \u0026lt;= p \u0026amp;\u0026amp; p \u0026lt;= ave+devi { ct++ } } fmt.Printf(\u0026#34;standard deviation: %7.5f (%4.1f%%)\\n\u0026#34;, devi, float64(ct)*100.0/tryf) } 10,000回の試行で割合を求める処理をワンセットとしてこれを10,000セット繰り返し，最小値・最大値・平均値・標準偏差を求めている。\nこれを実行するとこんな感じになる。\n$ go run prob/sample/sample.go minimum value: 0.08930 maximum value: 0.11160 average: 0.09999 standard deviation: 0.00299 (67.9%) まぁこんなもんかな（笑）\n感染者と検査キットを定義する。 ではこの prob パッケージを使って感染者と検査キットを定義してみる。\nこんな感じでどうだろう。\npackage note257 import ( \u0026#34;github.com/spiegel-im-spiegel/mathgirl-problem/prob\u0026#34; ) type People struct { infect \u0026lt;-chan bool } type Person bool func NewPeople() *People { return \u0026amp;People{infect: prob.New(0.01)} } func (ppl *People) SelectPersion() Person { return Person(\u0026lt;-ppl.infect) } func (psn Person) Infection() bool { return bool(psn) } type TestKit struct { probability \u0026lt;-chan bool } func NewTestKit() *TestKit { return \u0026amp;TestKit{probability: prob.New(0.9)} } func (tk *TestKit) Inspect(psn Person) bool { if psn.Infection() { return \u0026lt;-tk.probability } return !\u0026lt;-tk.probability } まず People を定義し，この中から People.SelectPersion() でサンプル Person を選び出す。 このサンプルは1%の確率で感染している。 感染しているかどうかは Person.Infection() 関数で分かる。\n判定キットは TestKit で定義され TestKit.Inspect() 関数で検査結果が出る。 このとき\n （全体の1%存在する）感染者は90%の確率で陽性（true）になる （全体の99%存在する）非感染者は10%の確率で陽性（true）になる  のがポイントである。\nこのパッケージを使って実際に検査を行ってみる。\nfunc probability(ppl *note257.People, tk *note257.TestKit, try int) float64 { total := 0 count := 0 for i := 0; i \u0026lt; try; i++ { psn := ppl.SelectPersion() if tk.Inspect(psn) { total++ if psn.Infection() { count++ } } } return float64(count) / float64(total) } func main() { flag.Parse() try, err := strconv.Atoi(flag.Arg(0)) if err != nil { fmt.Fprintln(os.Stderr, err) return } ppl := note257.NewPeople() tk := note257.NewTestKit() min := float64(1) max := float64(0) sum := float64(0) sum2 := float64(0) tryf := float64(try) ps := make([]float64, 0, try) for i := 0; i \u0026lt; try; i++ { p := probability(ppl, tk, try*10) ps = append(ps, p) if p \u0026lt; min { min = p } if p \u0026gt; max { max = p } sum += p sum2 += p * p } fmt.Printf(\u0026#34;minimum value: %7.5f\\n\u0026#34;, min) fmt.Printf(\u0026#34;maximum value: %7.5f\\n\u0026#34;, max) ave := sum / tryf fmt.Printf(\u0026#34;average: %7.5f\\n\u0026#34;, ave) devi := math.Sqrt(sum2/tryf - ave*ave) //standard deviation \tct := 0 for _, p := range ps { if ave-devi \u0026lt;= p \u0026amp;\u0026amp; p \u0026lt;= ave+devi { ct++ } } fmt.Printf(\u0026#34;standard deviation: %7.5f (%4.1f%%)\\n\u0026#34;, devi, float64(ct)*100.0/tryf) } probability() 関数で判定キットの結果が陽性だった人の中で実際に感染している人の割合を返している。\nたとえば\n$ go run note257/sample/sample.go 10000 とすれば probability() 関数による試行を10,000回繰り返すわけだ。 私のマシンは遅いので，これを実行するとめっさ時間がかかるのだが，まぁやってみよう。\n$ go run note257/sample/sample.go 10000 minimum value: 0.08061 maximum value: 0.10279 average: 0.09092 standard deviation: 0.00272 (68.5%) 平均値が少し高めに出たけど，こんなものかな。\n結果だけを見れば直感に反するかも知れないが，こうやって実際にコードを書いてみると納得感が強まる。 やっぱプログラマはコードを書いてナンボだよね（笑）\nブックマーク  第257回　確率の冒険：《命》に関わる確率（前編）｜数学ガールの秘密ノート｜結城浩｜cakes（ケイクス）\n 第258回　確率の冒険：《命》に関わる確率（後編）｜数学ガールの秘密ノート｜結城浩｜cakes（ケイクス）  モンテカルロ法による円周率の推定（その3 Gaussian）\n モンティ・ホール問題で遊ぶ\n  参考図書  プログラマの数学 第2版 結城 浩 SBクリエイティブ 2018-01-16 (Release 2018-02-08) eBooks Kindle版 ASIN: B079JLW5YN 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  タイトル通りプログラマ必読書。第2版では機械学習に関する章が付録に追加された。\nreviewed by Spiegel on 2018-03-19 (powered by amazon-item v0.2.0)\n  いかにして問題をとくか G. ポリア G. Polya (原著), 柿内 賢信 (翻訳) 丸善 1975-04-01 Book 単行本 ASIN: 4621045938, EAN: 9784621045930 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "図書館で書棚へのドキワクを思い出す",
      "section": "remark",
      "description": "今の本屋は私から見て「コンビニ」であって「本屋」ではない。カップラーメンのコーナーのようにその時々の流行りを映しては消える泡沫の夢の世界。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/welcome-to-the-shimane-prefectural-library/",
      "published": "2019-04-23T06:50:31+00:00",
      "update": "2019-04-23T07:20:10+00:00",
      "content": " その土地に長く住んでいる（または住む気でいる）のなら，その土地の図書館のアカウントを持つことが文明人として最低限の証だと思うのですよ（もちろん偏見）。\nというわけで，引っ越し後の役所手続きに不備があって松江市役所に行ったついでに島根県立図書館にも寄ってきた。\n県立図書館は県庁の裏手にある。\n 島根県庁と松江城。子供の頃からの馴染みのある風景。  いやぁ，子供の頃のことなのに道順とか覚えてるもんだねぇ。\n 子供の頃は週一で通ってた島根県立図書館  つか，あれから40年は経ってるのに今も変わらず「そこ」にあるって結構凄いことだよなぁ。\n建物の外観とかはもはやうろ覚えだったが，林立する書棚を眺めていたら子供の頃のことを色々と思い出した。 バスや自転車で県立図書館に通ってたこととか，市内中の本屋を巡って本屋ごとのラインナップをほぼ把握してたこととか。\n同時に「今の本屋」が私のようなタイプの本好きにとって如何につまらない存在になり果てたか実感できた気がする。\nたとえば。\n今回は特に目当ての本もなく「下見を兼ねて館内を廻って面白そうな本を借りれればラッキー」くらいの感覚だったので，とりあえずパソコン端末で「スウガクガール」をキーワードに本を検索してみる。 すると「第2一般資料室へ行け」と案内された。\n第2一般資料室の「スウガクガール」を目指す間にも色々と目移りしそうな本が書棚に並んでいる。\n 天文学コーナー発見 in 県立図書館  そんで遂に「数学ガール」を発見するのだが\n 「数学ガール」発見 in 県立図書館。でもその隣の「「3」の発想」がちょー気になる。  実はその隣の『「3」の発想』に強く興味を惹かれたりするわけだ。 結果としてこの本を「衝動借り」しましたよ（笑）\n以上の出来事の中で「スウガクガール」がアンカーとなり次々と視覚的な「誤配」が起こっていることがお分かりだろうか。 これが「書棚へのドキワク」の本質だと思うのだ。\nこういった「誤配」は Amazon のようなEコマースでは絶対に起きない。 いわんやEブックをや。 たとえば Amazon の「お気に入り」機能はよく出来ていると思うが，その時点で「流行ってる本」が対象であるため私個人に刺さりにくい（かといって過去の私の読書傾向を暴かれても困るわけだが）。 もちろん流行を追うだけの人ならそれでも構わないのだろうが，私が読みたいのは「（私にとって）面白そうな本」であって「流行りの本」ではないのだ。\n今の本屋は私から見て「コンビニ」であって「本屋」ではない。 何でも揃ってるかも知れないが（どの店も）同じものしか揃えてない。 カップラーメンのコーナーのようにその時々の流行りを映しては消える泡沫の夢の世界。 そこに「ノイズ」はあっても「誤配」はない。 それならもっとも便利でノイズの少ない Amazon で買って何が悪い，という話である。\nブックマーク  ブックオフは公共圏の夢を見るか « マガジン航[kɔː] 闘う図書館と情報の自由――ライブラリー・フリーダム・プロジェクト « マガジン航[kɔː] なぜ書店にヘイト本があふれるのか。理不尽な仕組みに声をあげた1人の書店主 | BUSINESS INSIDER JAPAN  参考図書  新潮選書 「3」の発想 数学教育に欠けているもの 芳沢 光雄 新潮社 2009-10-24 Book 単行本 ASIN: 4106036517, EAN: 9784106036514 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  図書館で借りて読んだ。数学書の棚にあったが，中身は数学エッセイ？ 読み物としては面白かった。\nreviewed by Spiegel on 2019-04-23 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "ようやく縁が切れました（もしくは Web 2.0 終焉の象徴としての Yahoo!）",
      "section": "remark",
      "description": "あれから私はこの時を心待ちにしていたのだ。めでたしめでたし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/goodbye-yahoo/",
      "published": "2019-04-22T13:49:02+00:00",
      "update": "2019-04-23T04:52:17+00:00",
      "content": " 先週の話でナニだが Flickr サイトを訪ねたところアカウントを（Yahoo! から）移行するよう言われた。\n【2019-04-23 追記】 実は2019年3月初めの時点でアナウンスが出ていたのだがすっかり忘れきっていた。 テヘペロ :-P\n Flickr login freedom is here. | Flickr Blog    Flickr login freedom is here. - YouTube  よーやく Yahoo! からオサラバできるぜ！ 思えば Verizon/Oath (旧 Yahoo! の身売り先) が Flickr を SmugMug に売り飛ばしたのはもう1年も前の話である。\n ようやく Yahoo! の呪いから抜け出せる Flickr  あれから私はこの時を心待ちにしていたのだ。 これでようやく Yahoo! アカウントは「要らない子」になった。 めでたしめでたし。\nWeb 2.0 終焉の象徴としての Yahoo! あの当時， Yahoo! に買収された Flickr がアカウントを Yahoo! アカウントに統合するとアナウンスしたときは，そりゃあもう大炎上だった。 でも私自身は当時の Yahoo! はそれほど嫌いじゃなかったのだ。 今でこそ GAFA だが，当時の Facebook はまだ米国学生向けのオタク・サービスだったし Apple は（米国と日本以外は）死に体だった。 つまりあの時のネットにおける覇者は GAY であり GAY に買収されることが “Web 2.0” における「あがり」だったのだ。\nいつから Yahoo! はあんなに「駄目な子」になってしまったのだろう。 「駄目な子ほど可愛い」というが Yahoo! に対しては全くそんな気分にはなれず，特に2010年代に入ってからは Flickr や del.ico.us に対して「早くニゲテー」と言いたい気持ちでいっぱいだった。 彼らが Yahoo! と共に沈没しなかったのは幸運としか言いようがない。\nネットにおける「勝者」は話題にも分析の対象にもなるが Yahoo! のような「敗者」こそ “Web 2.0” を象徴するものとしてもっと分析されるべきだと思うんだよねぇ。\nしかし，つくづく “Web 2.0” は古語になり果ててしまったなぁ。 諸行無常。\n参考図書  グーグル　ネット覇者の真実 スティーブン・レヴィ 仲達志；池村千秋 (翻訳) CCCメディアハウス 2011-12-16 (Release 2012-08-31) eBooks Kindle版 ASIN: B009LFBL4Y 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  そういえばこれ Kindle で買い直したのに途中ま読んでそのまま積ん読だったよ。ゼロ年代の Google を中心とした話なのでちょっと古びた感はあるが歴史書としては今でも通用するだろう。書評はこちらが参考になる。\nreviewed by Spiegel on 2018-12-11 (powered by amazon-item v0.2.0)\n  もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo 達人出版会 2017-12-25 評価\u0026nbsp;       WirelessWire News 連載の書籍化。感想はこちら\nreviewed by Spiegel on 2018-12-31\n  情報共有の未来 yomoyomo 達人出版会 2011-12-30 評価\u0026nbsp;       同名ブログの書籍化。感想はこちら。\nreviewed by Spiegel on 2018-12-31\n "
    },
    {
      "title": "Ubuntu インストール用のブート可能 USB メモリを作成する",
      "section": "remark",
      "description": "まずは USB メモリを買うところから（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/bootable-usb/",
      "published": "2019-04-21T13:20:33+00:00",
      "update": "2019-04-21T13:23:26+00:00",
      "content": " 自宅 PC を Ubuntu に換装するためにインストール用の DVD を作ったのだが絶望的に遅いので USB メモリを使おうと思ったのだが，ここ10年くらい USB メモリなんか使ったことがなかったので，まずは USB メモリを買うところから（笑）\n OS 移行用に購入。  ブート可能な USB メモリってどうやって作ろうかと思ってたら Ubuntu にツールがあった。\nUSB メモリを挿してメニューから「ブータブルUSBの作成」を起動する。\n 「書き込み元のディスクイメージ」に ISO イメージファイルを指定して「ブータブルUSBの作成」ボタンを押す。 確認プロンプトが出るので「はい」で書き込みを開始する。\n 書き込みが完了したら以下のプロンプトが出ておしまい。\n VirtualBox を使って USB メモリからのインストールを試す とりあえず VirtualBox で USB メモリからのインストールを試そうと思ったが， USB からの仮想ブートの仕方が分からない。 どうやらちょっと特殊な方法があるようだ。\n Boot your USB Drive in VirtualBox - AgniPulse Windows版VirtualBoxでUSBブートをする方法 - Qiita  この記事のとおりに USB ドライブに接続する vmdk ファイルを作って仮想ディスクとして追加すれば，この仮想ディスクからブートできる。\nで，実際に試してみたら上手く行ったんだけどインストールの最後の最後で失敗するんだよなぁ。 まぁ DVD よりはアクセスが速いし本番で使えればいいか。\nさて， GW に入ったらいよいよ OS を換装するんだ（フラグ）\n シリコンパワー USBメモリ 32GB USB3.0 亜鉛合金ボディ 防水 防塵 耐衝撃 永久保証 PS4動作確認済 Jewel J80 SP032GBUF3J80V1TJA シリコンパワー (Release 2017-02-01) Personal Computer Personal Computers ASIN: B01NBU1OS5, EAN: 4712702655292 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  OS 移行用に購入。ひたすらデザインで決めた（笑） よく考えたら32GBも要らなかった。まぁ，何か使い道があるだろう。\nreviewed by Spiegel on 2019-04-21 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "Git GUI フロントエンドをたずねて三千里",
      "section": "remark",
      "description": "ブランチやタグや履歴を見ながらちょっと込み入った処理をする際はやはり GUI があるといいよねってことで。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/searching-for-git-gui-front-end/",
      "published": "2019-04-21T05:37:37+00:00",
      "update": "2019-04-21T06:05:36+00:00",
      "content": " 私は Git の GUI フロントエンドに Git Extensions を使っている。 個人的には FOSS の GUI フロントエンドではこれ以上のものはないと思っているが，残念なことに .NET Framework 上で動く製品なのである。 Windows プラットフォームではこれで何の問題もなかったが，どうにも（.NET Framework の別実装である） Mono と相性が悪いようで，メジャーバージョンは上げられないしチョットしたことで落っこちてしまう。\nというわけで Linux/Ubuntu で動作する GUI フロントエンドを探してみることした。 今回の評価ポイントは以下の通り。\n コミット履歴をブランチ込みでツリー表示でき，簡単に操作できること コミットやタグに対して電子署名を付与でき，かつ署名の検証ができること GnuPG や OpenSSH を適切に扱えること サブモジュールを簡単に扱えること できれば FOSS 製品であること  VS Code や ATOM など最近はテキストエディタや IDE でグラフィカルに git を扱える製品も多く commit, push, fetch, pull といった基本機能を扱うだけなら GUI フロントエンドを別途用意する必要はないのだが，ブランチやタグや履歴を見ながらちょっと込み入った処理をする際はやはり GUI があるといいよねってことで。\nGUI フロントエンドいろいろ Git-gui Git の公式フロントエンドらしい。 APT でインストールできる。\nLook\u0026amp;Feel は微妙だが機能的には悪くない。 ただ，タグへの署名と署名検証ができないっぽいんだよなぁ。\nGiggle APT でインストールできる。\nGNOME 用ということで Look\u0026amp;Feel は悪くないが，あまり複雑なことはできないようだ。 残念。\nGitg APT でインストールできる。\nこれも GNOME 用の製品だが，やっぱり複雑なことはできない感じ。 GNOME 用の製品ってみんなこんな感じなのか？\nGitHub Desktop あまり複雑なことはできなくて残念という意味では GitHub Desktop もそうか。 元々は Windows および macOS 用だが Linux 向けの fork を公開している方がいるようだ。\n shiftkey/desktop: Simple collaboration from your desktop  GitHub Desktop は GitHub 上の Issue や pull request が使いやすくなるよう設計されている。 なので git 機能自体のサポートについてはイマイチな感じである。 「初心者向け」と言われるのも宜なるかなというところであろうか。\nGitHub Desktop の今後には期待している。\nGitEye FOSS ではないが「無料」で利用できる。 動作には別途 Java ランタイム（JRE）を用意する必要がある1。\nEclipse を連想させるプロジェクトベースの構成。 でも，これならいっそ Eclipse もしくは IntelliJ IDEA を使ったほうがいいんじゃないのか。\nGitKraken プロプライエタリ・ライセンスで非商用のみ「無料」で利用できる。 Pro 版であれば4.08USD/月のサブスクリプション制で利用できる。\nGit の GUI フロントエンドといえば大抵これが挙がるくらい有名。 てことは皆これにお金払ってるってことか？\nLook\u0026amp;Feel は好みがあるので言及しないとして，機能自体は悪くないのだが GnuPG の扱いが雑。 なんでパスフレーズを入力させるのに自前の入力窓を使うかな。 独自の Pinentry を使ってるってわけでもないようだし，まさかパスフレーズをメモリ上に保持ってないよね？\nあと，私の環境ではコミットやタグの署名検証ができなかった。 購入すれば見れるのかな？\nSmartGit こちらもプロプライエタリ・ライセンスで非商用のみ「無料」で利用できる。 フルサポートで買うとかなり高い。 サブスクリプションを利用するなら5.99USD/月。\nLook\u0026amp;Feel や機能は申し分ないのだが，一点だけ OpenSSH の扱いが駄目すぎる。 あと署名検証ができないぽい？\nSmartGit では内臓の SSH クライアントを使うか OpenSSH を使うか選択できる。 内臓の SSH クライアントを使う場合は自前で秘密鍵を管理しようとするが，どういうロジックで管理しているか不明。 OpenSSH を使う場合は更に駄目で，勝手に ssh-agent を起動してくれやがるのだ（無効にするオプションが見当たらない）。 ちゃんと SSH_AUTH_SOCK 環境変数でソケットを指定してるだろ。 見ろよ！\n私は SSH 鍵の管理を GnuPG で行ってる。 SmartGit は OpenSSH をまともに扱えないという理由で却下2。 残念！\nというわけで どれもイマイチな出来。 それなら曲がりなりにも機能が揃っていて FOSS な Git Extensions のほうがマシだな。 Linux ってホンマに GUI が弱いよな。 文化的なものかも知れないが。\nというわけで，もうしばらくは Git Extensions を騙し騙し使うか。\n【おまけ】 CUI な Tig GUI ではないがキャラクタベースの tig というのがあるらしい。 あちこちページを眺めていると，これを推す記事が結構多い。\nサーバ等のリモートホストに対してキャラクタ端末でリポジトリにアクセスする場合は便利かもしれない。\nブックマーク  Git - GUI Clients Interfaces, frontends, and tools - Git SCM Wiki Linuxで使えるGitクライアントを集めてみた Ubuntu/Linuxで使えるGitのGUIクライアント(無料)まとめ - Qiita\n Git Commit で OpenPGP 署名を行う\n   JRE のインストールについては「Ubuntu で遊ぶ」の OpenJDK インストールの項を参照のこと。 [return] そもそも git で署名を行うということは GnuPG とセットで使うということなんだから ssh-agent なんか使う選択肢はないと思うのだが。鍵管理は GnuPG に任せて git や OpenSSH は本来の機能に集中するのが吉である。 [return]   "
    },
    {
      "title": "2019-04-21 のブックマーク",
      "section": "bookmarks",
      "description": "「Oracle、「Java SE 12.0.1」「Java SE 8 Update 211」を公開 ～新元号“令和”に対応」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/04/21-bookmarks/",
      "published": "2019-04-21T00:57:35+00:00",
      "update": "2019-04-21T01:08:33+00:00",
      "content": " リリース情報  Oracle、「Java SE 12.0.1」「Java SE 8 Update 211」を公開 ～新元号“令和”に対応 - 窓の杜 新元号“令和”をサポートした「Ruby 2.6.3」がリリース - 窓の杜 The Document Foundation releases LibreOffice 6.2.3 - The Document Foundation Blog  セキュリティ＆プライバシー関連  マンガワンのチート事案についてまとめてみた - piyolog VU#192371 - VPN applications insecurely store session cookies  米国土安全保障省が企業用VPNアプリケーションのセキュリティの欠陥を警告 | TechCrunch Japan  FBI関連ウェブサイトがハッキングされ警察や連邦機関に属する数千人分の個人情報が流出 - GIGAZINE ブログ: スマートフォンアプリは、あなたが知らないトラッカーでいっぱいです MIT Tech Review: アマゾンがAIスピーカーの音声に「聞き耳」、社内に専任チーム  Alexaの音声を聞いてテキスト化するスタッフ、日本のAmazonも募集中　在宅勤務、時給1300円 - ITmedia NEWS  Internet Explorer 11の脆弱性でWindows PCからローカルファイルを盗まれる可能性 - Engadget 日本版 China Spying on Undersea Internet Cables - Schneier on Security Dragonblood: Analysing WPA3's Dragonfly Handshake  Vulnerabilities in the WPA3 Wi-Fi Security Protocol - Schneier on Security 「WPA3」に脆弱性、最新のWi-Fiセキュリティプロトコルにもパスワード盗難の恐れあり：実行のハードルが低い - ＠IT  A Guide to Common Types of Two-Factor Authentication on the Web | Electronic Frontier Foundation USN-3949-1: OpenJDK 11 vulnerability | Ubuntu security notices パスワードを盗みYouTubeのクリック数を稼ぐ新しいマルウェア | TechCrunch Japan Confluence Server および Confluence Data Center における複数の脆弱性に関する注意喚起 2019年 4月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起  Oracle Java の脆弱性対策について(CVE-2019-2699等)：IPA 独立行政法人 情報処理推進機構  WordPressプラグインを狙う攻撃が活発化している件をまとめてみた - piyolog Cyberspies Hijacked the Internet Domains of Entire Countries | WIRED  New DNS Hijacking Attacks - Schneier on Security  「ITサプライチェーンにおける情報セキュリティの責任範囲に関する調査」報告書について：IPA 独立行政法人 情報処理推進機構  天文関連  半分以上が宇宙へ。流星の衝突によって月面の「水」が散逸していることをNASAの探査機がキャッチ | sorae：宇宙へのポータルサイト サイエンス誌に論文が掲載されました | トピックス | JAXA はやぶさ２プロジェクト  知財関連  米国政府と権利者団体、海賊版・ネット犯罪対策のためにWHOIS情報へのアクセス再開を要望 – P2Pとかその辺のお話R ツイートの不当なDMCA削除を批判する記事に言及するツイートが不当にDMCA削除される – P2Pとかその辺のお話R ブラックホール画像の販売も--中国で問題視される素材販売サイトの実態 - ZDNet Japan 鬼才ヴェルナー・ヘルツォーク監督「海賊版は（好ましくないが）最も成功した配給形態」 – P2Pとかその辺のお話R The Mueller Report Can’t Be Copyrighted, Is Flagged by Copyright Bots Anyway | Electronic Frontier Foundation  その他  Markdownをpandocでwordへ変換するためのテンプレート作成 - Qiita Starz Goes on Twitter Meta-Censorship Spree to Cover Up TV-Show Leaks (Updated) - TorrentFreak MIT Tech Review: パンチカードで人類初の月面着陸を支えた、最後の数学者の物語 ブロックチェーンは「過度な期待」のピーク期から幻滅期へ--ガートナー調査 - ZDNet Japan EU、新たな著作権指令を正式承認--ネット企業の責任が拡大へ - ZDNet Japan 「2040年も8割弱は化石燃料」「再生エネの限界」大前提のエネルギー政策を！：岩瀬昇 | エネルギーの部屋 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト GNU AWK 5.0がリリース。8年ぶりのメジャーバージョンアップ。正規表現ライブラリがGLIBCからGNULIBへ移行、名前空間が実装 － Publickey インテル、5Gスマホ向けモデム事業から撤退へ - CNET Japan MIT Tech Review: 医療用AI普及へブレークスルー「協調機械学習」は何が画期的か？ 大手トレントサイトDemonoid、失踪していた創設者の死を伝える – P2Pとかその辺のお話R MIT Tech Review: 揺らぐ死の定義、「死んだブタ」の脳の一部機能が回復 Big Sky :: 1つの横着から隠しファイルが生まれた瞬間 PythonインタプリタをWebAssemblyへコンパイル、Webブラウザで稼働するPython環境「Pyodide」。Mozillaが開発中 － Publickey マイクロソフト、リアルタイムOSベンダーExpress Logic買収 - ZDNet Japan オープンソースとなった「PowerShell」の覚えておきたい基本コマンド10選 - ZDNet Japan  "
    },
    {
      "title": "Ubuntu 19.04 へのアップグレードを試す",
      "section": "remark",
      "description": "こういうアップグレードとかやると，いかに Windows がシステムとして駄目か分かるよな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/upgrade-ubuntu-19_04/",
      "published": "2019-04-20T10:14:30+00:00",
      "update": "2019-04-25T13:18:49+00:00",
      "content": " Ubuntu 19.04 がリリースされたようだ。\nUbuntu 19.04 その15 - Ubuntu 19.04がリリースされました・ディスクイメージのダウンロード - kledgeb\n私が検証中の仮想環境1 でもソフトウェアの更新2 後に以下のメッセージが出た。\n 折角なのでアップグレードを試してみるとするか（仕事用のマシンじゃないので LTS バージョンを使う気は更々ない）。\nUbuntu のアップグレード 「アップグレード」ボタンを押すとリリースノートが表示される。\n 文章中の空白文字が詰められていて「なんじゃこりゃ」な画面だが（何かの署名かと思ったぜw），気にせず「アップグレード」ボタンを押す。\n これでしばらく経過を眺めていると以下のワーニングが出る。\n どうも Ubuntu Japanese Team や他のサードパーティのリポジトリは外されてしまうらしい。 まぁ，これはしょうがない。 あとで繋げばいいし。\n処理を続けると確認画面が表示されるので追加・変更・削除されるソフトウェアを確認しておく。 どうやら GnuPG, OpenSSL, OpenSSH といったセキュリティ関連のツールもアップグレードされるようだ。\n  確認して問題ないようなら「アップグレードを開始」ボタンを押して処理を続行する。 アップグレードは時間がかかるのでお茶でも淹れてこよう。\n途中でワーニングが出たりもしたが3\n 気にせず最後まで終わらせる。 終わったら（再起動しろとは言われなかったが）一応再起動しておく。\n再起動後，気になっていたセキュリティ・ツールのバージョンをチェックしてみた。\n$ gpg --version gpg (GnuPG) 2.2.12 libgcrypt 1.8.4 Copyright (C) 2018 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 $ openssl version OpenSSL 1.1.1b 26 Feb 2019 $ ssh -V OpenSSH_7.9p1 Ubuntu-10, OpenSSL 1.1.1b 26 Feb 2019 おおっ。 GnuPG はまだちょっと古いが OpenSSL と OpenSSH は最新になっている。 まぁこのくらいなら許容範囲だろう4。\nサードパーティのリポジトリを再び有効にする アップグレード時に外されたサードパーティのリポジトリをチェックしておく。 「ソフトウェアとアップデート」を開いて「他のソフトウェア」タブを見てみる。\n うん，外れてるね。 Git と Mono のリポジトリは有効にしておく。 Ubuntu Japanese Team のリポジトリも有効にしておけばいいかな。\nこれで apt update と，必要に応じて apt upgrade や apt autoremove を行えば OK。\nしかし，なんだな。 こういうアップグレードとかやると，いかに Windows がシステムとして駄目か分かるよな。 パソコンでもスマホのような携帯端末でも定期的にアップデートされることを前提にハードウェアもソフトウェアも構成しないと駄目だということだよねぇ。\nいまや Office ツールは Microsoft の独占というほどでもないし，大抵のことは Web インタフェースがあるのでブラウザがあればなんとかなる。 と考えるとやはり Windows を捨てる選択は正解だなと改めて思う。 他人に薦められるかと言えば，それは別問題だが（笑）\nブックマーク  Ubuntu 18.10 その172 - Ubuntu 19.04へアップグレードするには・アップグレードの注意事項 - kledgeb\n PPA から Git をインストールする\n Ubuntu に Mono を導入する\n  既に Ubuntu 19.10 の話題が  Ubuntu 19.10 その2 - LibreOfficeをSnapで提供する提案 - kledgeb Ubuntu 19.10 その3 - デフォルトのメールクライアントをGearyに変更する提案 - kledgeb   余談だが VirtualBox でも 6.0.6 がリリースされている。アップデートは計画的に。 [return] Ubuntu では「ソフトウェアの更新」で GUI によるソフトウェアのアップデートが可能である。また「ソフトウェアとアップデート」を使って更新の自動化や LivePatch の設定も可能だ。 [return] あとで確認したが，ちゃんと最新版が入ってるっぽい。 [return] OpenSSL は 1.1.1 系の最新， OpenSSH は 7.9 系の最新になっていた。 Facebook の TL で教えてもらったが， GnuPG はパッケージマネージャでパッケージの完全性検証に使われるため特に保守的な管理になっているらしい。まぁ脆弱性や不具合等は随時バックポートされているそうなので，バージョン番号であまり神経質にならないほうがいいのかも知れない。ただ GnuPG の動向を追いかけている身としては何とか改善したい。でもそれは後々のお楽しみということで。 [return]   "
    },
    {
      "title": "まだ改元で消耗してるの？",
      "section": "remark",
      "description": "もう役所の書類で元号使うのやめようや。今回の改元は絶好の機会だったのに，これを逃したらまた数十年も「令和」に付き合わされるわけだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/troubles-of-the-japanese-new-era/",
      "published": "2019-04-17T04:47:50+00:00",
      "update": "2019-04-29T06:59:48+00:00",
      "content": " 全国の職業エンジニアの皆さん，改元に伴うあれこれでお疲れ様でした。 もうとっくに改修作業は終わって5月の改元をドキワクで待っていることと思います。\nと思ってたらこの期に及んで「テスト」と称して本番環境を弄って案の定トラブらせている自治体があったらしい。 他でもない，我が故郷の松江市だよ（日本の新聞サイトにはリンクしないようにしてるので元記事は省略）。\nなんでも本番環境でテストするのにコンビニに通達するのを忘れていて「令和」の元号で証明書類を出力させちゃったらしい。 松江市は回収しようとしているようだが，そんなレアなエラーを手放すわけないぢゃん（笑）\n金払ってでもコンビニで証明書を出すべきだったか。 いや，よく考えたら私はマイナンバーカードで手続きしてるから，そもそも紙の証明書は不要だった。\nていうか改元まであと2週間というタイミングで何でテストなんかしてるかなぁ。 しかも改元前の日付で「令和」で出てしまうというのはバグなのか仕様なのか。\nもしかして松江市は改元のタイミングでプログラムを入れ替えるつもりなのだろうか。 それって絶対にトラブルの元だよな。\nあー，ツッコミが止まんねー！\nもう役所の書類で元号使うのやめようや。 これから先，改元の度にこんな馬鹿騒ぎをするつもりなのだろうか。 今回の改元は（期間的な余裕もあったし）ドキュメントに記載する年号を和暦から西暦に切り替える絶好の機会だったのに，これを逃したらまた数十年も「令和」に付き合わされるわけだ。\n元号で遊ぶ ところで\n 令和へ対応せよ！元号のアルゴリズム - Qiita  という記事を見かけたのだが，みんなそんな難しいことをしているのだろうか。 つか年月日で桁を揃えて比較するってのは汎用機時代の発想だよな。 そういうのって脈々と受け継がれるものなのかねぇ。\n今どきは大抵の言語で時間クラスないしは時間関数を標準ライブラリで持ってるんだから，それを使えば簡単にできるぢゃん。\nまずは各元号の起点を調べておく。\n   元号 起点     明治の改暦 1873年1月1日   大正 1912年7月30日   昭和 1926年12月25日   平成 1989年1月8日   令和 2019年5月1日    なんで明治は「元年」を起点にしないかというと，明治6年（1873年）より前は暦が異なるため現行暦1 の加減算が使えないからである。\nじゃあ，この情報を元に西暦を和暦に変換する簡単なコードを書いてみよう。 Go 言語でね。\nこんな感じかな。\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;time\u0026#34; ) type EraName int const ( Unknown EraName = iota Meiji Taisho Showa Heisei Reiwa ) var ( eraString = map[EraName]string{ Unknown: \u0026#34;\u0026#34;, Meiji: \u0026#34;明治\u0026#34;, Taisho: \u0026#34;大正\u0026#34;, Showa: \u0026#34;昭和\u0026#34;, Heisei: \u0026#34;平成\u0026#34;, Reiwa: \u0026#34;令和\u0026#34;, } locJST = time.FixedZone(\u0026#34;JST\u0026#34;, 9*60*60) eraTrigger = map[EraName]time.Time{ Meiji: time.Date(1873, time.January, 1, 0, 0, 0, 0, locJST), Taisho: time.Date(1912, time.July, 30, 0, 0, 0, 0, locJST), Showa: time.Date(1926, time.December, 25, 0, 0, 0, 0, locJST), Heisei: time.Date(1989, time.January, 8, 0, 0, 0, 0, locJST), Reiwa: time.Date(2019, time.May, 1, 0, 0, 0, 0, locJST), } eraSorted = []EraName{Reiwa, Heisei, Showa, Taisho, Meiji} ) func (e EraName) String() string { if s, ok := eraString[e]; ok { return s } return \u0026#34;\u0026#34; } type JapaneseEra struct { time.Time } func New(t time.Time) JapaneseEra { return JapaneseEra{t.In(locJST)} } func (e JapaneseEra) Era() EraName { for _, es := range eraSorted { if !e.Before(eraTrigger[es]) { return es } } return Unknown } func (e JapaneseEra) YearEra() (EraName, int) { era := e.Era() if era == Unknown { return Unknown, 0 } year := e.Year() - eraTrigger[era].Year() + 1 if era == Meiji { return era, year + 5 } return era, year } func (e JapaneseEra) YearEraString() (string, error) { era, year := e.YearEra() if era == Unknown { return \u0026#34;\u0026#34;, fmt.Errorf(\u0026#34;out of range: %v\u0026#34;, e) } if year == 1 { return fmt.Sprintf(\u0026#34;%v元年\u0026#34;, era), nil } return fmt.Sprintf(\u0026#34;%v%d年\u0026#34;, era, year), nil } func main() { flag.Parse() argsStr := flag.Args() tm := time.Now() if len(argsStr) \u0026gt; 0 { if len(argsStr) \u0026lt; 3 { fmt.Fprintln(os.Stderr, \u0026#34;年月日を指定してください\u0026#34;) return } args := make([]int, 3) for i := 0; i \u0026lt; 3; i++ { num, err := strconv.Atoi(argsStr[i]) if err != nil { fmt.Fprintln(os.Stderr, err) return } args[i] = num } tm = time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.Local) } ye := New(tm) ys, err := ye.YearEraString() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Printf(\u0026#34;%s%d月%d日\\n\u0026#34;, ys, ye.Month(), ye.Day()) } さっそく動かしてみる。\n$ go run main.go 平成31年4月17日 $ go run main.go 2019 4 30 平成31年4月30日 $ go run main.go 2019 5 1 令和元年5月1日 ほら，簡単でしょ。 余暇のやっつけコードでもこの程度は書けるってことだね。\nやぁ，遊んだ遊んだ。\nブックマーク  1l0/sumeragi : 皇紀や元号を出力するパッケージ 新元号「文字」という技術的負債 Windows で、とりあえず「令和」対応をする - 電気ウナギ的○○   ちなみに日本の現行暦は「グレゴリオ暦と同じ」だがグレゴリオ暦ではない。暦の原点が異なるからだ。詳しくは拙文「「暦」日本史」を参考にどうぞ。 [return]   "
    }
  ]
}
