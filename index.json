{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "整いました！",
      "section": "remark",
      "description": "これで新しいリビング PC の完成である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/assemble-a-living-pc/",
      "published": "2020-09-24T12:55:47+00:00",
      "update": "2020-09-24T12:56:57+00:00",
      "content": "久しぶりに Go 言語関連のイベントに参加しようとエントリしたのだが，このご時世でオンラインイベントなのですよ。\nそんで Zoom 環境を用意しなければならないんだけど，ぶっちゃけ自分のパソコンは使いたくない。 なので昨年買った中古ノートに入れようと久〜しぶりに電源を入れたら OS が起動しない！？ どうやら内蔵ストレージが完全にお亡くなりになっているらしい orz\n参加をキャンセルすることも考えたが，地元でもオンラインもくもく会やるみたいな話も聞こえてくるし（まだアナウンスがないし立ち消えかな？），諦めて新しいマシンを買うことにした。 失業してるのにお金が出ていくばっかりだよ\u0026hellip;\nあまり選択肢はないらしい 取り敢えず今回は予算を「3万円」に決めて，最初に中古ノート PC を物色してみたのだが，今回の反省を踏まえて考えると，1年位で故障しそうなのばかり（笑） 多分この価格帯のマシンは「部品取り」用なのだろう。 ホンマ，昨年のアレは「安物買いの銭失い」だったんだなぁ\u0026hellip;\nとなるとタブレットか Chromebook か，それともラズパイで自作するか。\n自作は興味あるけど絶対にドツボに嵌まるから今回はパス。 Chromebook も同じく興味はあるが「できること」の範囲がよく分からないので，これもパス。 となるとタブレットか。\nタブレットの選択肢は3つ。 Android 機か iPad か Windows 機か。 と思ったのだが，予算的に Android 機以外は無理，と判明した（笑）\nそこで Android タブレットに絞って探してみたのだが\u0026hellip; ぶっちゃけ HUAWEI 社以外の製品は「なし」だわ。 でも HUAWEI 社はなー。 米国大統領が再選したらいよいよヤバいんじゃね？ なんでこんなに選択肢がないのだろう。 しゃーない。 HUAWEI 社にするか。 いいたかねえけどめんどうみよう（あわれ仁吉よ，どこへ行く）\nさんざん悩んだ末に HUAWEI MediaPad M5 lite 10 に決めた。 タブレットが決まれば，あとは五月雨式に決まっていく。\n整いました！ というわけで\n整いました！ | Spiegel | Flickr  Bluetooth 接続のキーボードとマウスと骨伝導ヘッドセットは既存のものがちゃんと繋がった。 スタンドは今回新たに購入（今まで使ってたスマホスタンドは100円のやっすいやつだった）。 スマホと兼用だが，10インチのタブレットでも問題なく支えられるようだ。 よしよし。 これで新しいリビング PC の完成である。\nタブレットを起動してみて思ったのだが，多分 Android OS ってスマホに特化されすぎてタブレットを構成するのはもはや無理筋なんじゃないのかな。 まぁ 11 が出るってご時世に Andorid 8 な時点でそんな気がしてたけど。\nおそらく Google 的には「タブレット買うくらいなら Chromebook にしろよ」ってとこなのだろう。\nAndorid タブレットでコードが書けるか ところで，折角なので今回はタブレット上でコードが書ける環境を作ろうと思っている。\nまずは上の写真のように Termux を導入してみた。 Termux って Windows でいうところの MSYS2 みたいな位置づけなのかな。 Linux ぽい作りでパッケージ管理に APT が使える優れものだが WSL2 みたいなサブシステムというわけではなさそうだ。 この辺はいつか記事にしよう。\nほんで，テキストエディタ。 軽くググってみたが，以下の4つがよさげ。\n DroidEdit Pro (code editor) - Apps on Google Play anWriter text editor - Apps on Google Play QuickEdit Text Editor Pro - Writer \u0026amp; Code Editor - Apps on Google Play Turbo Editor PRO | Text Editor - Apps on Google Play  無料版でそれぞれ試してみたところ QuickEdit がもっとも手に馴染んだので，君に決めた！ テキストエディタは機能以前に手に馴染むかが最優先事項よ！\nブックマーク  Termux - Apps on Google Play How to install Git on Android - TechRepublic Termux on AndroidのSSHサーバに接続する方法 | LFI 6 Best Android Text Editor for Programming | TechWiser いつでもLinuxコマンドが使える！Androidで動くLinux端末「Termux」【Root化不要】 | LFI web帳 | Androidに Linuxを簡単にインストールするアプリ「UserLAnd」 耳のためにできること。1万円を切る骨伝導ヘッドセットAfterShokz OpenMoveを見てきた。｜塚本 牧生｜note 【特集】5万円以下のChromebookは仕事に使えるのか? ～Chromebook活用術【ビジネス編】 - PC Watch 「Zoom」v5.3.0が公開 ～ユーザー側から参加するブレイクアウトルームを選択可能に - 窓の杜  参考  HUAWEI MediaPad M5 lite 10 タブレット 10.1インチ W-Fiモデル RAM4GB/ROM64GB タッチペン\u0026amp;オリジナルカバー同梱 【日本正規代理店品】 HUAWEI(ファーウェイ) (Release 2018-11-30) Personal Computers B07KJ5S7FS (ASIN), 9760054766192 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この値段で RAM 4GB が決め手。ベンダ企業がどこかは考えない（笑）\nreviewed by Spiegel on 2020-09-24 (powered by PA-APIv5)\n  Glazata アルミ製スマホ/タブレット用スタンド 折り畳み式 270°自由調整可能 デスクトップスタンド スマホ タブレット (グレー) Glazata エレクトロニクス B07HWSDG97 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  10インチタブレットでも安定して支えてくれる。折りたためばコンパクトになるが，持ち運ぶ際は注意。箱は捨てないで使いましょう（笑）\nreviewed by Spiegel on 2020-09-24 (powered by PA-APIv5)\n  iClever Bluetooth キーボード 折りたたみ式 薄型 スマホ タブレット 専用 無線 ワイヤレス コンパクトキーボード ポータブル iPhone/iPad/Andriod 対応 ブラック シルバー IC-BK03 iClever エレクトロニクス B00ZP3503O (ASIN), 6958446327516 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  携帯用と割り切れば特に問題なし。ふとした拍子に Bluetooth 接続が切れるのが玉に瑕。\nreviewed by Spiegel on 2017-04-11 (powered by PA-APIv5)\n  エレコム マウス Bluetooth (iOS対応) Sサイズ 小型 3ボタン IRセンサー 省電力 シルバー M-BT12BRSV エレコム (Release 2013-11-09) Personal Computers B00G9NIL7G (ASIN), 4953103501997 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  まぁ，マウスは消耗品だから（笑）\nreviewed by Spiegel on 2019-12-01 (powered by PA-APIv5)\n  【2019最新版 Bluetooth5.0】Bluetooth イヤホン 骨伝導 ヘッドホン 高音質 自動ペアリング スポーツ IP56防水 耳が疲れない 超軽量 完全ワイヤレス イヤホン マイク内蔵 Siri対応 ノイズキャンセル ハンズフリー通話 ブルートゥース ヘッドホン iPhone\u0026amp;Android適用 (ブラック) Bearoam エレクトロニクス B07QJB7R13 (ASIN), 0694090550660 (EAN), 694090550660 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  廉価版だし音質には目を瞑るとして（特に低音がねー），骨伝導スピーカー最高！ もうイヤフォンには戻れない。\nreviewed by Spiegel on 2019-10-10 (powered by PA-APIv5)\n  めんどうみたョ 植木 等 (メインアーティスト) EMIミュージック・ジャパン (Release 2015-07-22) MP3 ダウンロード B011LC4LY6 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  あわれ仁吉よ，どこへ行く（笑）\nreviewed by Spiegel on 2020-09-24 (powered by PA-APIv5)\n "
    },
    {
      "title": "放火魔の消防士",
      "section": "remark",
      "description": "「定量評価」もなく特定の事例を論って脅威を煽るだけの言動は華麗にスルーである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/firefighter-arsonist/",
      "published": "2020-09-24T00:54:14+00:00",
      "update": "2020-09-24T03:16:11+00:00",
      "content": "日本語で言うと「マッチポンプ1」。\nいやぁ，自分で書いておいてすっかり忘れてたのだが，「放火魔の消防士」というフレーズを初めて見かけたのは，セキュリティ関係の本やネット記事ではなく， AI 関連哲学書だった。 しかも3年前。\n 『シンギュラリティの神話』を読む  私の中で「AI」に関するポエムはあの年で完結していて，早々に「ひとり幻滅期」に入っていたのだ，と言い訳しておこう（笑）\n件のフレーズが出てくるのは第8章で，いわゆる GAFA について\n これらの大企業は、自ら率先して情報技術の発展を推し進めているというのに、その情報技術こそが人間を破滅に追いやると自ら警告しているのだ。これではまるで「放火魔の消防士」ではないか。彼らは自分たちで望んで火をつけておきながら、その火を消すために先頭に立って奔走している そろそろ、人工知能の真実を話そうより  と dis ってる部分（内容の妥当性は横に置いておく）。\nなんでこのフレーズを思い出したかというと，以下の記事を見かけたから。\n セキュリティ企業が描き出す「歪曲された」実態　大学研究者が検証 - ITmedia NEWS  ホンマ今更だよね（笑）\n私がセキュリティ管理者だった大昔から，セキュリティ関連のマッチポンプ記事（特に広告記事）には気をつけろ，と言われてたし，特に近年は（セキュリティ企業に限らず）あらゆる企業のあからさまなセキュリティ広告が鼻について真面目に読む気をなくすほどだ。\n脅威から守る立場の組織・企業・個人が自らの存在を誇示し続けるのに最も効果的なのは「脅威を創りだす」ことだ。 「需要は創るもの」あるいは「注目の搾取」である。 個人なら歪んだ英雄願望または承認欲求の暴走といったところか。\nセキュリティ管理においては分析の前段階である「インシデントの収集」は割と重要で（脅威を分析・分類し定量的なリスク評価へと繋げるため），それ故にマッチポンプ記事にハマりやすい。 だからこそ「マッチポンプ記事には気をつけろ」なのである。\nまぁ，でも，これってセキュリティに限る話じゃないよね。 「炭素ビジネス」とか「自然エネルギー（笑）」とか。 知財関連なら「知財トロル」とかも典型的だ。 最近なら「コロナ禍」だって大抵はマッチポンプ記事だ2。\n「放火魔の消防士」の言動を忌避したいなら「定量評価」に徹するしかない。 「定量評価」もなく特定の事例を論って脅威を煽るだけの言動は華麗にスルーである。\n参考図書  そろそろ、人工知能の真実を話そう (早川書房) ジャン＝ガブリエル ガナシア (著), 小林 重裕・他 (翻訳), 伊藤 直子 (監修) 早川書房 2017-05-25 (Release 2017-05-31) Kindle版 B071FHBGW8 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  シンギュラリティは起きない。\nreviewed by Spiegel on 2016-07-02 (powered by PA-APIv5)\n  スパム[spam]:インターネットのダークサイド フィン・ブラントン (著), 生貝直人 (監修), 成原慧 (監修), 松浦俊輔 (翻訳) 河出書房新社 2015-12-25 単行本 430924744X (ASIN), 9784309247441 (EAN), 430924744X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  今読んでるけど読みづらい。修飾語が多すぎるよ。ギリシア神話かっての。\nreviewed by Spiegel on 2016-12-10 (powered by PA-APIv5)\n   当時は知らなかったのだが「マッチポンプ」って和製外来語なんだって。 \u0026#x21a9;\u0026#xfe0e;\n 私は Twitter で「新型コロナ」と「GoTo」と「コロナ禍」のキーワードについて，フォローしているユーザ以外はミュート対象にしている。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ブログのネタをカンバン方式で管理する",
      "section": "remark",
      "description": "これで塩漬け案件が無闇に増えるのを防ぐわけ。このまましばらく運用してみよう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/github-issues-milestones-and-projects/",
      "published": "2020-09-22T10:32:40+00:00",
      "update": "2020-09-22T20:47:46+00:00",
      "content": "ここのブログ記事は，大体は思い付きで書いているのだが，ネタとして溜め込んでいるものもそこそこある。 今まではテキストファイルでフラットに管理していたのだが「そういや GitHub って Projects 機能があるぢゃん♡」と気がついた。\nそこで溜め込んでるネタを Projects にいったん吐き出してみることにした。 まずはネタを全部 Issues に書き出すところから。 書き出したらそれを Projects で整理していく。\nGitHub の Projects 機能は，いわゆる「カンバン方式」で Issues を管理できる。 こんな感じ。\nブログのネタ帳  とりあえず Issues に上げたものは全部 “Materials” に寄せておいて，その中で着手予定のものを “Issues” へ。 実際に着手を始めたものを “WIP (Work In Progress)” へ移動し，完了したら案件を Close (自動で “Done” に移動) する。\n単純工程なこともあり WIP と Done はひと組しかないが，チームでやるシステム開発じゃないんだからこれで必要十分だろう。\nただし Issues も Projects も期限を管理できないので Milestones を設定する。 ここで言う期限はいわゆる「締切」ではない。 文字通りの一里塚。つまり，あるマイルストーンの期限が来たら終了してない案件を次のマイルストーンに回すか止めるか判断するわけだ。\nこれで塩漬け案件が無闇に増えるのを防げる（筈）。 まぁ，このまましばらく運用してみよう。\nブックマーク  srggrs/assign-one-project-github-action: Automatically add an issue or pull request to specific GitHub Project(s) when you create and/or label them. Trello で引っ越し  参考図書  リーン開発の現場 カンバンによる大規模プロジェクトの運営 ＨｅｎｒｉｋＫｎｉｂｅｒｇ (著), 角谷信太郎 (著), 市谷聡啓 (翻訳), 藤原大 (翻訳) オーム社 2013-10-25 (Release 2017-07-15) Kindle版 B01IGW5IIW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  私はこれで勉強しました。もう一回読み直すかな。\nreviewed by Spiegel on 2015-02-17 (powered by PA-APIv5)\n "
    },
    {
      "title": "個人番号と個人番号カード",
      "section": "remark",
      "description": "「個人番号」と「個人番号カード」の問題は（関連してるけど）きちんと切り分けて考えないとワケワカメになる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/my-number-and-my-number-card/",
      "published": "2020-09-21T10:30:40+00:00",
      "update": "2020-09-22T03:24:59+00:00",
      "content": "どうしても TL に脊髄反射コメントを書いてしまう。\nというわけで。\n いろいろおかしいマイナンバーカード｜青野慶久@サイボウズ｜note  気持ちは分かる。 共感できる。\nだが「個人番号」と「個人番号カード」の問題は（関連してるけど）きちんと切り分けて考えないとワケワカメになる。\n「個人番号」の問題 「個人番号」の問題は，ひとことで言うなら（ゼロ年代に議論になった）固有 ID の問題である。\nID (Identity) には有効な「目的」と「範囲」と「期間」が必ずある。 これを逸脱するとセキュリティおよびプライバシーの問題となる。\nゼロ年代に批判された「住基番号」問題の核心は，目的と範囲と期間を超えて（認証および許可トークンとして）単一の ID を使いまわしていることだ。 そして個人番号でも，当時の批判から何も学ぶことなく同じ失敗を繰り返している。\n昨今あたり前になりつつある「セロトラスト・セキュリティ」と照らし合わせても「個人番号」の設計が如何にダサいか分かるだろう。 ダメダメな設計を運用（マイナンバー関連法）でカバーするってのは「動かないシステム」の典型である。\n「個人番号カード」の問題 「個人番号カード」の問題は「情報格差 (digital divide) 」の拡大だ。\n5月の「特別定額給付金」でのドタバタを見れば分かるように，オンライン申請によって「できる人」と「できない人」で明確に色分けされてしまった。 もっと言うと現在稼働中の「マイナポイント」はキャッシュレス決済手段を持ってない人は（できるできない以前に）構造的に排除されている。 ぶっちゃけ，お役所内部のお些末さは枝葉末節に過ぎない。\nこれで思い出すのが，最近見かけた以下の記事だ。\n アフターコロナの中国でネット弱者の老人にどう対応したのか - ZDNet Japan  この記事では「コロナ」と「老人」を切り口に語られているが，情報格差は世代格差よりも経済格差による影響が大きい。\nつまり，「個人番号カード」により拡大した情報格差は経済階級構造と結びつき「情報力」を背景にした階級社会を強化することになるだろう。\nブックマーク  マイナンバーそのものは知られても問題ない（はず）｜塚本 牧生｜note 「情報弱者」を再々定義する  参考文献  グリゴリの捕縛 白田 秀彰  2001-11-26 (Release 2014-09-17) 青空文庫 4307 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30 (powered by aozorahack)\n  つながりっぱなしの日常を生きる：ソーシャルメディアが若者にもたらしたもの ダナ・ボイド (著), 野中 モモ (翻訳) 草思社 2014-10-09 (Release 2015-07-21) Kindle版 B0125TZSZ0 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  読むのに1年半以上かかってしまった。ネット，特に SNS 上で自身のアイデンティティやプライバシーを保つにはどうすればいいか。豊富な事例を交えて考察する。\nreviewed by Spiegel on 2016-05-10 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-09-20 のブックマーク",
      "section": "bookmarks",
      "description": "「欧州司法裁、ネット中立性規則支持示す」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/09/20-bookmarks/",
      "published": "2020-09-20T02:37:21+00:00",
      "update": "2020-09-22T02:03:47+00:00",
      "content": "リリース情報  NPM Pack | Hugo : Hugo 0.75 リリース  Release v0.75.0 · gohugoio/hugo · GitHub   Hugo 0.75.1: A couple of Bug Fixes | Hugo  Release v0.75.1 · gohugoio/hugo · GitHub   Release August 2020 Recovery · microsoft/vscode · GitHub  バベルのインターネット  欧州司法裁、ネット中立性規則支持示す - ZDNet Japan WeChatとTikTokのダウンロードが9月20日から不可に、米商務省が発表 | TechCrunch Japan  TikTok米事業、オラクルによる提携をトランプ大統領が暫定承認。なぜオラクルはTikTok事業を取りに行ったのか？ － Publickey    セキュリティ＆プライバシー関連  “LINE”に約7万件の不正ログイン ～一部ユーザーにパスワードの強制初期化を実施 - 窓の杜 Interesting Attack on the EMV Smartcard Payment Standard - Schneier on Security 複数の MobileIron 製品の脆弱性に関する注意喚起 Privacy Analysis of Ambient Light Sensors - Schneier on Security NISTによる「ゼロトラストにおける7つの基本原則」と従来の境界型防御との関係：働き方改革時代の「ゼロトラスト」セキュリティ（6） - ＠IT 日本マイクロソフト、Active Directory管理者に脆弱性対策を勧告 - ZDNet Japan  MS、Netlogonプロトコル実装の特権昇格脆弱性に対するガイダンスを管理者向けに公開 - 窓の杜 米国土安全保障省がWindowsの「緊急」レベル脆弱性に異例警告、深刻度最大のZerologon攻撃を受ける可能性 | TechCrunch Japan   エフセキュア、企業向けフィッシング攻撃の模擬演習サービスを提供 - ZDNet Japan 「Node.js」の2020年9月セキュリティ更新 ～“Critical”1件を含む3件の脆弱性に対処 - 窓の杜 中国のハッカーがMicrosoft Exchange Serverなどの脆弱性を利用してアメリカ政府を攻撃していたことが判明 - GIGAZINE なりすまし口座に約1億円が流出したSBI証券の不正ログインについてまとめたみた - piyolog マイクロソフト、バグや脆弱性の検出を自動化する「Project OneFuzz」をオープンソース公開。すでに同社内でWindowsやMicorosoft Edgeのデバッグに利用中 － Publickey BLURtooth vulnerability lets attackers overwrite Bluetooth authentication keys | ZDNet  Bluetooth Unveils Security Issue, With No Security Solution New Bluetooth Vulnerability - Schneier on Security   掲載一時停止となった気象庁サイトの広告掲載についてまとめてみた - piyolog WordPress 用プラグイン「File Manager」の脆弱性対策について(CVE-2020-25213) ：IPA 独立行政法人 情報処理推進機構  天文関連  ロケット打ち上げスタートアップAstraの最初の打ち上げは第一段階の燃焼失敗、あと2回のテスト飛行で軌道上を目指す | TechCrunch Japan 火星探査機MMXにNHKと共同開発の4K・8Kカメラ搭載へ | 月探査情報ステーション : また NHK か\u0026hellip; 天文学の技術と私たちの生活　医療からWi-Fiまで」（日本語版） | 一般社団法人日本天文教育普及研究会 「日清スペースカップヌードル」に続き、宇宙日本食認証を取得! 「日清スペースチキンラーメン」「スペース日清焼そばU.F.O.」「日清スペースキーマカレーメシ」「日清スペースハヤシメシ」が誕生 | 日清食品グループ NASA、民間企業から月資源を購入へ | 月探査情報ステーション プレスリリース - 金星にリン化水素分子を検出 ～生命の指標となる分子の研究に新たな一歩～ - アルマ望遠鏡  金星にリン化水素分子を検出―生命の指標となる分子の研究に新たな一歩 | 国立天文台(NAOJ) 英国王立天文学会が金星の大気に生命の存在を示す気体を検知 | TechCrunch Japan   終焉期の大質量連星系がつくり出す大量の塵～赤外線観測が描き出した渦巻状の放出流 | 観測成果 | すばる望遠鏡 2020年9月17日ニュース「過去最大『あり得ない』ブラックホール衝突を観測 米欧の研究グループ」 | SciencePortal APOD: 2020 September 17 - Solar Cycle 25 Begins 終焉期の大質量連星系がつくり出す大量の塵～赤外線観測が描き出した渦巻状の放出流 | 観測成果 | すばる望遠鏡  Linux または Ubuntu に関する話題  Ubuntu/Debianに最新のNode.jsをインストールする一番良い方法 | LFI CanonicalのシャトルワースCEO、「Ubuntu」コミュニティーに歩み寄り - ZDNet Japan Linux その67 - GNOME 3.38がリリースされました・GNOME 3.38の新機能と変更点 - kledgeb  Ubuntu 20.10 その8 - GNOME 3.38の採用とUbuntu 20.10のリリーススケジュール - kledgeb    その他  欧州「グリーン成長戦略」日本「長期戦略」かくも大きすぎる違い：岩瀬昇 | 岩瀬昇のエネルギー通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト Libtorrent Adds Support for BitTorrent v2, a Potential Game-Changer * TorrentFreak 出版社のnote活用事例まとめ完全版（2020年9月時点） - YAMDAS現更新履歴 ケンブリッジ・アナリティカ告発本の真打クリストファー・ワイリー『マインドハッキング』と「監視資本主義」の行方 - YAMDAS現更新履歴 シヴァ・ヴァイディアナサンの反Facebook本『アンチソーシャルメディア』も出る - YAMDAS現更新履歴 日本において、5Gやエッジコンピューティングは過度な期待、DevOpsは幻滅期。ガートナー「日本における未来志向型インフラ・テクノロジのハイプ・サイクル：2020年」を発表 － Publickey emirpasic/gods: GoDS (Go Data Structures). Containers (Sets, Lists, Stacks, Maps, Trees), Sets (HashSet, TreeSet, LinkedHashSet), Lists (ArrayList, SinglyLinkedList, DoublyLinkedList), Stacks (LinkedListStack, ArrayStack), Maps (HashMap, TreeMap, HashBidiMap, TreeBidiMap, LinkedHashMap), Trees (RedBlackTree, AVLTree, BTree, BinaryHeap), Comparators, Iterators, Enumerables, Sort, JSON ISOの委員会がC++20の標準を承認、年内に正式公開へ - ZDNet Japan マイクロソフトもオラクルもTikTokを買収することはないと中国の国家メディアが報道 | TechCrunch Japan トランプはノーベル賞を貰えるか：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト Save Arm : 署名した  NVIDIAがArmをソフトバンクグループから4.2兆円超で買収、半導体大手2社が一体に | TechCrunch Japan Arm共同創業者が4.2兆円でのNVIDIAからの買収に反対、独立性確保のため「Save Arm」キャンペーンを開始 | TechCrunch Japan   PayPay銀行、2021年4月5日に誕生へ\u0026ndash;ジャパンネット銀行から商号変更 - CNET Japan Mac向けに個人向け無償版を追加 ～「VMware Workstation 16」「VMware Fusion 12」が正式公開 - 窓の杜 vSphereにKubernetesを統合した「vSphere with Tanzu」、VMwareが発表 － Publickey MSの「水中データセンターの信頼性は地上の8倍」が示すニューノーマル｜塚本 牧生｜note Improving QUIC APIs of the TLS library in Haskell - あどけない話 AWS、独自ARMプロセッサ「Graviton 2」を用いたバースト可能な「Amazon EC2 T4g」インスタンス提供開始。評価用に年内は実質無料で利用可能に － Publickey ZenHubの新しい自動化ツールはGitHub上での開発者間の連携を改善する | TechCrunch Japan 音声を文字起こししてくれる「Amazon Transcribe」、言語の種類を自動識別する新機能。人間によるタグ付けが不要に － Publickey アップルはiOS 14のサプライズリリースで開発者の怒りをさらに買ってしまう | TechCrunch Japan GitHubがMicrosoft Teamsと連携可能に。Teamsのチャットからリポジトリのアクティビティ参照やコメント返信など実現 － Publickey GitHub CLI 1.0 is now available - The GitHub Blog  「GitHub CLI」がベータ版を卒業、一般公開 ～“GitHub”のタスクをスクリプトで自動化 - 窓の杜   2020年9月18日ニュース「北半球はこの夏、史上最も暑かった WMOとNOAAが発表」 | SciencePortal AfterShokz、9,090円の骨伝導ワイヤレスイヤフォン「OpenMove」 - AV Watch : おおっ，廉価版！ MITの技術者チームが完全にフラットな魚眼レンズを開発、広角レンズの製造が容易になる可能性 | TechCrunch Japan 日本語音声合成向けに東京式アクセントを自動推定する自然言語処理ソフト「tdmelodic」がオープンソース化 | TechCrunch Japan  "
    },
    {
      "title": "近ごろ流行りらしい “Zenn” のアカウントを作ってみた",
      "section": "remark",
      "description": "とりあえず私も Qiita に置いてる記事の一部を移行してみるか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/using-zenn-with-github/",
      "published": "2020-09-19T08:09:47+00:00",
      "update": "2020-09-22T02:03:47+00:00",
      "content": "きっかけは @tsuyoshi_cho さんの\n Gitのaliasを晒す - Qiita  で，最近の更新に\n Zennへ移植改訂しました。\nhttps://zenn.dev/tsuyoshicho/articles/git-aliases-revised Gitのaliasを晒す - Qiitaより  とあって「Zenn ってなんじゃら？」と調べてみた。\nプログラマーのための新しい情報共有サービス「Zenn」をリリースしました🎉\nコンセプトは、有益な情報を共有する人がもっと対価を得られること。\nnoteのようにお互いを金銭的にサポートしたり、知見を本にまとめて販売したりできるプラットフォームです。https://t.co/l0lxlW24Ug pic.twitter.com/qrddHoCWsr\n\u0026mdash; catnose (@catnose99) September 16, 2020  おおっ！ 最近 launch したサービスだったのか。\nパッと見の印象は「Qiita ＋ note」という感じ。 今や note が出版社御用達のプラットフォームになっているように Zenn は（決済可能な）エンジニア御用達のプラットフォームになれればいいねぇ。\nというわけで，とりあえずアカウントを作ってみた。\n Spiegel | Zenn  日本のサービスは spiegel 名義でアカウントが取れるのが素敵♡\nただ，決済情報は未入力のままにしてある。 できればクレカや銀行口座より PayPal 決済に対応して欲しい。 達人出版会も PayPal 決済だし，技術系のサービスなんだからその方がいいと思うのだが\u0026hellip;\n“Tech” と “Idea” という色分け Zenn では “Tech” と “Idea” の2つの固定カテゴリが用意されていて，投稿する記事は必ずどちらかのカテゴリに含まれる。 説明によると\n  Tech プログラミングやソフトフェア開発、インフラなどに関する技術記事ならTechを選びます Idea 個人的な意見やポエム、キャリアについての記事、キュレーション記事ならIdeaを選びます   投稿カテゴリー「Tech」「Idea」の選び方 | Zennより  なんだそうだ。 Qiita で技術記事と所謂「ポエム」が入り混じって出てくる状況を見れば妥当な措置だろう。 まぁ，悩んだら “Idea” にするのがいいんだろうねぇ。\nGitHub との連携 Zenn では GitHub リポジトリから記事を deploy することができる。 具体的な手順は以下の記事を参照のこと。\n GitHubリポジトリでZennのコンテンツを管理する | Zenn  ただし，いくつか制限があって\n リポジトリ上の記事を削除しても Zenn に反映されない 一度 Zenn に deploy された記事の slug は変更できない（別の記事として扱われる） 既に Zenn でオン書きしたコンテンツは GitHub に反映されない  ようだ。\nGitHub でリポジトリを作る際は，リポジトリ名は任意だが， .gitignore や README.md は作成しなくてよい。 これらは後述する zenn-cli ツールで作成される。\nzenn-cli ツールの導入 まずは Ubuntu 環境に node.js をインストールしてしまおう（まだ導入していない場合）。 こんな感じでいいだろう。\ncurl -sL https://deb.nodesource.com/setup_current.x | sudo -E bash - sudo apt install -y nodejs 次に，作成した GitHub リポジトリを適当な場所に git clone し，リポジトリのあるディレクトリに移動する。 まずは npm の初期化から。\n$ cd ~/workspace $ gh repo clone spiegel-im-spiegel/zenn-docs $ cd zenn-docs $ npm init --yes Wrote to /home/username/workspace/zenn-docs/package.json: { \u0026#34;name\u0026#34;: \u0026#34;zenn-docs\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;## Links\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;repository\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;git\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;git+https://github.com/spiegel-im-spiegel/zenn-docs.git\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;bugs\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://github.com/spiegel-im-spiegel/zenn-docs/issues\u0026#34; }, \u0026#34;homepage\u0026#34;: \u0026#34;https://github.com/spiegel-im-spiegel/zenn-docs#readme\u0026#34; } package.json は弄らなくて大丈夫。 続けて zenn-cli ツールをインストールする。\n$ npm install zenn-cli ... + zenn-cli@0.1.29 added 5 packages from 3 contributors, removed 3 packages, updated 3 packages, moved 1 package and audited 905 packages in 42.516s found 5 low severity vulnerabilities run `npm audit fix` to fix them, or `npm audit` for details なんか不穏なメッセージが見えるが大丈夫か，これ。 \u0026hellip;まぁいいや1。 次いってみよう。\nzenn-cli ツールがインストールできたらリポジトリ内を初期化する。\n$ npx zenn init 🎉Done! 早速コンテンツを作成しましょう 👇新しい記事を作成する $ zenn new:article 👇新しい本を作成する $ zenn new:book 👇表示をプレビューする $ zenn preview これでリポジトリ内に articles/ および books/ ディレクトリが作成され，さらに .gitignore および README.md ファイルも作成される。 ちなみに .gitignore の中身はこんな感じ。\nnode_modules .DS_Store 何ともシンプルだが，これで zenn-cli インストール時に作成される node_modules/ ディレクトリはリポジトリから除外される。\nここまで出来たら一度コミットしておいたほうがいいだろう。\n記事の作成 入力ファイルの作成には以下のコマンドを打つ。\n$ npx zenn new:article 📄d309af5057a827deda35.md created. このファイル名がそのまま slug として URL のパスになる。 Slug は zenn-cli ツールが適当に生成するのでユーザは考えなくともよい。\nもし slug を指定したいのであれば --slug オプションを使う。\n$ npx zenn new:article --slug hello-zenn-world 📄hello-zenn-world.md created. ただし slug 文字列には以下の制限がある。\n 半角英数字（a-z, 0-9）とハイフン（-）の 12〜50 字の組み合わせのみ有効 articles 以下のファイルはディレクトリ階層に出来ない（フラットな構成） books の場合は「本」ごとに slug を指定できる。本の slug 以下はフラットな構成  Slug 文字列が短いとエラーになるのでご注意を。\n$ npx zenn new:article --slug hello エラー：slugの値（hello）が不正です。半角英数字（a-z0-9）とハイフン（-）の12〜50字の組み合わせにしてください 作成したファイルの中身は，以下のように front matter のひな型のみが書き込まれている。\n---title:\u0026#34;\u0026#34;emoji:\u0026#34;🎉\u0026#34;type:\u0026#34;tech\u0026#34;# tech: 技術記事 / idea: アイデアtopics:[]published:true---emoji 項目は，記事のアテンションに使われるのだが，毎回ランダムな文字で初期化されるようだ。 絵文字を直接入力することはないのだが GitHub markdown のように文字列で指定できないものかねぇ。\nプレビューが素敵！ 【2020-09-20 更新】 以前プレビュー機能が動かないと書いたが，他でも Issue が上がっていたらしく，対応されていた。 感謝！\nこの節は，以前の内容から差し替えている。 なお，障害報告は GitHub の zenn-dev/zenn-roadmap/issues に上げてほしいとのこと。\n 以下のコマンドでプレビュー用のローカルサーバが起動する。\n$ npx zenn preview 👀Preview on http://localhost:8000 画面はこんな感じ。\n おおっ！ 間違いまで指摘してくれるのか。 こりゃあ，ええ。\nエディタの markdown プレビュー機能でもある程度は見れるけど，やっぱサービス立ち上げてブラウザで確認できるのがいいよね。\nうんうん。\n) at __awaiter (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:4:12) at Object.exports.build (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:48:12) (Use `node --trace-warnings ...` to show where the warning was created) (node:126485) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 3) (node:126485) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code. ``` てな感じに例外を吐いて落っこちた。 まぁ，プレビューなくても問題はないのだが... -- とりあえず私も\u0026hellip; まずは Qiita に置いてる記事の一部を移行してみるか。 古すぎて使えない記事はダメだけど（笑）\nブックマーク   GitHubリポジトリでZennのコンテンツを管理する | Zenn\n  Zenn CLIをインストールする | Zenn\n  Zenn CLIを使ってコンテンツを作成する | Zenn\n  ZennのMarkdown記法 | Zenn\n  GitHub CLI 1.0 is now available - The GitHub Blog\n GitHub CLI 1.0 がリリースされたので使ってみた | Zenn    Ubuntu/Debianに最新のNode.jsをインストールする一番良い方法 | LFI\n  🎁 Emoji cheat sheet for GitHub, Basecamp, Slack \u0026amp; more\n    Zenn 側に問い合わせてみたが，セキュリティ上の問題はないらしい。「あまり精神的に良いものではないのでそのうちなんとかしようと思っています」とのこと（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "NIST SP 800-207: “Zero Trust Architecture”",
      "section": "remark",
      "description": "Refactoring することを前提としたシステム設計が大事。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/nist-sp-800-207-zero-trust-architecture/",
      "published": "2020-09-17T03:25:07+00:00",
      "update": "2020-09-17T03:34:57+00:00",
      "content": "毎度の言い訳だが（笑），私がネットワーク管理者でセキュリティ管理者だったのは遥か昔の牧歌的な時代であり，現在時点で参加・所属する企業・組織のポリシーについてどうこう言う権限はないし，その気もない。 ただし，自衛のための知識を摂取し続けることは必要だと思っている。\nというわけで，今回は2020年8月に最終版が公開された NIST SP 800-207 の触りの部分を覚え書きとして記しておく。\n SP 800-207, Zero Trust Architecture | CSRC  Zero Trust および Zero Trust Architecture の定義 SP 800-207 では Zero Trust および Zero Trust Architecture は以下のように定義づけられている。\nZero trust (ZT) provides a collection of concepts and ideas designed to minimize uncertainty in enforcing accurate, least privilege per-request access decisions in information systems and services in the face of a network viewed as compromised. Zero trust architecture (ZTA) is an enterprise’s cybersecurity plan that utilizes zero trust concepts and encompasses component relationships, workflow planning, and access policies. Therefore, a zero trust enterpriseis the network infrastructure (physical and virtual) and operational policies that are in place for an enterprise as a product of a zero trust architecture plan. via SP 800-207: Zero Trust Architecture  ポイントは，アクセスを行うリソース，権限，期間が最小となるよう設計することだ。 これは，特定の安全地帯に入る許可さえあれば，内部のリソースにラフにアクセスできる従来の境界型セキュリティ設計とは大きく異なっている。\nちなみに SP 800-207 では，アクセスする対象を resource と呼んでいる。 これは単なるデータだけではなく物理的なデバイスも対象となっていることを示す。 つまり (日本では既に幻滅期に入っている) IoT も視野に入っているわけだ。\nさらに SP 800-207 では，アクセスを行う主体を subjects と呼んでいる。 そう呼ぶからには subjects が指すのは人間（ユーザ）だけではなく，アプリケーション，サービス，デバイス等も含まれる。 また subjects は authorized and approved subjects と all other subjects で色分けされている。 もちろん all other subjects の代表は「攻撃者（attackers）」である。\nつまり，あるリソースに対して認証・承認されない actor は，システム上の役割に関わらず，全て敵である（笑） この辺が「ゼロトラスト」と呼ばれる所以なのだろう。\nZT/ZTA が重視される理由としては以下の2つが挙げられると思う。\n 企業・組織への攻撃が巧妙化していて，セキュリティ管理の比重が防御から監視へシフトした クラウド上の XaaS リソースは「境界型」では管理できない  できれば安直にクラウドに繋がろうとするスマート家電もなんとかしてほしいのだが\u0026hellip;\nZero Trust Architecture の基本理念 SP 800-207 では ZTA の基本理念として，以下の7つの項目を挙げている。\n All data sources and computing services are considered resources. All communication is secured regardless of network location. Access to individual enterprise resources is granted on a per-session basis. Access to resources is determined by dynamic policy—including the observable state of client identity, application/service, and the requesting asset—and may include other behavioral and environmental attributes. The enterprise monitors and measures the integrity and security posture of all owned and associated assets. All resource authentication and authorization are dynamic and strictly enforced before access is allowed. The enterprise collects as much information as possible about the current state of assets, network infrastructure and communications and uses it to improve its security posture.   via SP 800-207: Zero Trust Architecture  @IT の記事にこの7項目の抄訳が載ってたので以下に挙げておく（ちなみに私は @IT のアカウントを持ってないので記事自体は読んでないw）。\n  データソースとコンピュータサービスは、全てリソースと見なす 「ネットワークの場所」に関係なく、通信は全て保護される 組織のリソースへのアクセスは、全て個別のセッションごとに許可される リソースへのアクセスは動的なポリシーによって決定される 組織が保有するデバイスは、全て正しくセキュリティが保たれているように継続的に監視する リソースの認証と認可は、全てアクセスが許可される前に動的かつ厳密に実施される 資産・ネットワーク・通信の状態について可能な限り多くの情報を収集し、セキュリティを高めるために利用する   NISTによる「ゼロトラストにおける7つの基本原則」と従来の境界型防御との関係：働き方改革時代の「ゼロトラスト」セキュリティ（6） - ＠ITより  面白いのは ZTA に最初から「監視」が組み込まれていること，常に状況をフィードバックして「改善」のサイクルを構築するところまでがセットになっていることだろう。\nセキュリティに於いても PDCA サイクル，いや今なら OODA ループか，が重要ということやね（笑）\n大変なのは\u0026hellip; ZT を組み込むこと自体は，そう難しくないだろう。 おそらくは既存のシステムに ZT の仕組みをラッピングすることで構成可能なはずだ。\n  via SP 800-207: Zero Trust Architecture  大変なのは ZTA におけるリソースとサブジェクト（の権限）の定義・運用・評価だろう。 これ，かなり細かい要求分析が必要だと思うよ。\n当然ながら人間組織の役職で権限を決めるわけにはいかない。 システム管理者やセキュリティ管理者（セキュリティ企業も含めて）であっても「アクセスしてはいけないリソース」はある。 サブジェクトやリソースの杜撰な管理で Class Break を引き起こした Twitter の事例は耳に新しいだろう。 日本での最近の Class Break 事例は「ドコモロ系事案1」か（笑）\nだからこそループを回して「改善」していかなければならないんだろうけど。 Refactoring することを前提としたシステム設計が大事。\n参考図書  セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n  信頼と裏切りの社会 ブルース・シュナイアー (著), 山形 浩生 (翻訳) NTT出版 2013-12-24 単行本（ソフトカバー） 4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  社会における「信頼」とは。\nreviewed by Spiegel on 2015-11-28 (powered by PA-APIv5)\n  ＯＯＤＡ　ＬＯＯＰ（ウーダループ）―次世代の最強組織に進化する意思決定スキル チェット リチャーズ (著), 原田 勉 (翻訳) 東洋経済新報社 2019-02-22 (Release 2019-02-22) Kindle版 B07ND6QTN4 (ASIN)  買ったはいいが，実はまだ読んでない。\nreviewed by Spiegel on 2019-07-02 (powered by PA-APIv5)\n   キャッシュレス決済を使った不正利用に関する一連のインシデントのこと。 Facebook の TL で見かけた「ドコモロ系事案」のフレーズが面白かったので使ってみた（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Java 15 がリリースされた",
      "section": "release",
      "description": "OpenJDK および同系列の Java のみのショート・サイクルのバージョンアップ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/09/java-15-is-released/",
      "published": "2020-09-16T01:22:49+00:00",
      "update": "2020-09-16T03:15:36+00:00",
      "content": "予定通り Java 15 がリリースされた。 OpenJDK および同系列の Java のみのショート・サイクルのバージョンアップである。\n JDK 15 JDK 15 GA Release JDK 15 Release Notes  OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://download.java.net/java/GA/jdk15/779bf45e88a44cbd9ea6621d33e33db1/36/GPL/openjdk-15_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-15_linux-x64_bin.tar.gz $ sudo ln -s jdk-15 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;15\u0026#34; 2020-09-15 OpenJDK Runtime Environment (build 15+36-1562) OpenJDK 64-Bit Server VM (build 15+36-1562, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern  うむうむ。 ちゃんと動くな。\nOpenJDK のリポジトリが GitHub に移行 OpenJDK のリポジトリが GitHub に移行したそうだ。\n openjdk/jdk: JDK main-line development  コード管理について，2019年の段階で Mercurial から git への移行が提案されていたらしい。 その上で，自前での管理ではなく，外部のサービスを使うことにしたようだ。\n外部サービスとして GitHub を選択した理由は\n GitHub\u0026rsquo;s performance is as good as or superior to other providers, it is the world\u0026rsquo;s largest source-code hosting service (50 million users as of May 2020), and it has one of the most extensive APIs.\nGitHubのパフォーマンスは他のプロバイダと同等かそれ以上であり、世界最大のソースコードホスティングサービス（2020年5月時点で5000万人のユーザー）でもあり、最も豊富なAPIを備えています。\nGitHub\u0026rsquo;s extensive API has enabled support for GitHub in many tools including text editors, IDEs, command-line tools, and graphical desktop clients.\nGitHubの豊富なAPIは、テキストエディタ、IDE、コマンドラインツール、グラフィカルなデスクトップクライアントなど、多くのツールでのサポートを実現しています。\n OpenJDKのソースコード、GitHubへの移行を完了 － Publickeyより  とのこと。 さもありなん。\nところで GitHub Discussions はいつ一般に開放されるのだろう。 開放されるなら，Disqus なんか捨てて，フィードバックはそっちに移行したいんだけどなぁ。 それとも個人ユーザには開放されないとか？\nブックアーク  Java 15正式版が登場。スケーラブルかつ低レイテンシなガベージコレクタ「ZGC」が正式版に － Publickey  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n   2020-08-23 に PlantUML Version 1.2020.16 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "「Web 口振受付サービス」ってなんぞ？",
      "section": "remark",
      "description": "オンライン上で識別・認証するためのデジタル・トークンを持っていない場合は「Web 口振受付サービス」で暗証番号やらの危なっかしい情報を使わざるを得ない，ということだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/web-account-transfer/",
      "published": "2020-09-15T08:59:10+00:00",
      "update": "2020-09-16T03:15:36+00:00",
      "content": "さて，先週から各メディアは嬉々として「ドコモ口座」を叩いてるわけだが（まぁ「ドコモ口座」による「セキュリティ劇場 (security theater) 」がお粗末すぎるのは否めないが），問題の核心はそこじゃないだろうと思っていたら，やはり「ドコモ口座」だけじゃなかったようだ。\n 不正利用が発生した電子決済サービスについてまとめてみた - piyolog  まずはおさらいから。\npiyokango さんによる「ドコモ口座を悪用した不正送金についてまとめてみた」を参照して，今回の「関係者」を挙げてみる。\n   ドコモ口座を悪用した不正送金についてまとめてみた - piyologより  ここで気になるのはやはり「Web 口振受付サービス」だろう。 某国営放送風テレビが「暗証番号を定期的に変える」とか頭の悪すぎることを言ったそうだし，「Web 口振受付サービス」が今回のセキュリティ最弱点であることは（たぶん）間違いないだろう。\nじゃあ「Web 口振受付サービス」ってなんぞ？\nゴメンペコン。 ここからはかなり推測を含んでいる。 何故かというと，現時点で「Web 口振受付サービス」が使えるサービスを持ってないから。\nというわけで，続きをどうぞ。\n まず，今回正直（？）に申告したゆうちょ銀行を見てみる。 ゆうちょ銀行では「口座振替受付サービス」として以下の3つの手段を提供している。\n  収納機関のWebサイトからのお申込み（Web 受付方式） 携帯電話会社やクレジットカード会社など（収納機関）のWebサイトからゆうちょ銀行を選択し、インターネット経由で即時に自動払込みのお申込みができます 収納機関のWebサイトからのお申込み（金融機関受付方式） 携帯電話会社やクレジットカード会社など（収納機関）のWebサイトからゆうちょ銀行を選択し、ゆうちょダイレクトから自動払込みのお申込みができます ゆうちょ銀行のキャッシュカードでのお申込み（収納機関受付方式） ゆうちょ銀行の通常貯金口座のキャッシュカードを、携帯電話会社やクレジットカード会社など（収納機関）に設置された端末機に読み込ませ、暗証番号を入力することで自動払込みのお申込みができます   口座振替受付サービス－ゆうちょ銀行より  ただし，これら3つの手段を使うにはそれぞれ条件がある。 以下に表にしてみる。\n   申し込み方法 サービス名 登録方法 ゆうちょダイレクト     Web 受付方式 Web 口振受付サービス Web ブラウザ 不要   金融機関受付方式 Pay-easy Web ブラウザ 要   収納機関受付方式 Pay-easy 専用端末 不要    そういや，こっちに帰郷ったときに市役所で引き落とししてもらう銀行を登録する際に Pay-easy の専用端末らしきものを使ったわ（今メインで利用してる銀行は Pay-easy に対応してる）。\nおそらく Web での登録であっても「ゆうちょダイレクト」のアカウントを持っていれば，そのアカウントの認証トークンを使って Pay-easy 経由で識別（identification）や認証（authentication）は可能なのだろう。\n言い方を変えると，オンライン上で識別・認証するためのデジタル・トークンを持っていない場合は「Web 口振受付サービス」で暗証番号やらの危なっかしい情報を使わざるを得ない，ということだ。\nこれ結構マズいよねぇ。 個人的には「Web 口振受付サービス」を使う銀行さんはあまり利用したくない気分である。 既に口座があって公共料金の引き落とし等に使ってるならどうしようもないけど（マメに残高履歴をチェックするしかない）。\nたとえばダイレクトバンキング等のアカウントを持っていて Web で Pay-easy が利用可能なら「Web 口振受付サービス」での登録を全て無効にするとかできないのだろうか。\nまぁ，身元の曖昧なユーザを抱えるサービスに対して口座振替を設定するようなシチュエーションは今までなかったんだろう。 おそらく銀行ごとに「Web 口振受付サービス」で対応可能な収納機関がかなり絞り込まれると思う。 今後の動向に注目である。\nブックマーク  「ドコモ口座」以外5社の決済サービスでも不正利用、高市総務相が明らかに - ケータイ Watch  ゆうちょ銀、2要素認証未導入の8事業者の登録とチャージを順次停止へ - ケータイ Watch    "
    },
    {
      "title": "FOSS とジョナサン",
      "section": "remark",
      "description": "そして Open Source は「強者の武器」となる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/foss-and-jonathan/",
      "published": "2020-09-14T12:06:21+00:00",
      "update": "2020-09-15T00:15:38+00:00",
      "content": "最近 Facebook や Twitter の TL で FOSS (Free/Open Source Software) に関する総括みたいな記事をよく見かけるのだが，気のせいだろうか。 まぁ TL って自身の性癖の暴露だから，そういう風に見えてしまうこともあるのだろう。\n「自由」は主張である 人とは本来，不自由な存在である。 何故なら，人は独りでは自身を証明できないから。 故に人が「自由」を求めるのなら「対象」が必ずあるし，求めるからには「対価」が必要である。\nFree Software は以下の4つの自由を求めている。\n  どんな目的に対しても、プログラムを望むままに実行する自由 (第零の自由)。 プログラムがどのように動作しているか研究し、必要に応じて改造する自由 (第一の自由)。 ほかの人を助けられるよう、コピーを再配布する自由 (第二の自由)。 改変した版を他に配布する自由 (第三の自由)。   自由ソフトウェアとは? - GNUプロジェクト - フリーソフトウェアファウンデーションより  物凄く簡単に言うと Free Software は「『政治から自由である』という政治主張」を持つソフトウェア（活動）なのである。 そして「政治主張」を実践するからには，責任やら義務やらが発生する。 その実装例が GNU GPL (General Public License; 一般公衆ライセンス) における “copyleft” という法的 hack である，と考えれば分かりやすいだろう。\nつまり Free Software は「政治から自由である」ために政治的な責任・義務を負うという Anarchism 特有のレトリックを抱えているわけだ。\nOpen Source as a Jonathan インターネットの老害達（笑）が懐かしむ「インターネットの黄金時代」をヒッピー文化に擬えることがある。 で，私の中でヒッピー文化の典型は『かもめのジョナサン』だったりする。\nかの作品に対する感想や評価は色々あるだろうが，私の中でジョナサンは「『飛ぶ』ために全てから逃げた存在」だ。 まぁ，かつてのオウム信者にはアレを読んで入信した人とかもいるそうなので，それほど的はずれではないだろう（笑）\n（最初からそう呼ばれていたわけではないが） Open Source は Free Software 運動から「政治主張」を洗い落としたものである。 Open Source の枠組みでは “copyleft” もオプションのひとつに過ぎない。 おおっ！ これぞまさしくポリシー・ロンダリング（違う1）。\nOpen Source がそうした理由は単純だ。 「自由」の対価を払いたくなかったから。 だから「自由を得る」のではなく「不自由から逃げる」のだ，ジョナサンのように，「それがぼくには楽しかったから」。\n囚人のジレンマと搾取 すずきひろのぶさんが最近「フリーソフトウェアと それを取巻く世界の状況 」という2007年当時のスライドを公開されていて，この中に「囚人のジレンマ」についての言及がある。\n一応「囚人のジレンマ」について簡単に解説しておこう。\nある犯罪を行った囚人 A, B に対し\n If A and B each betray the other, each of them serves two years in prison If A betrays B but B remains silent, A will be set free and B will serve three years in prison If A remains silent but B betrays A, A will serve three years in prison and B will be set free If A and B both remain silent, both of them will serve only one year in prison (on the lesser charge)   via Prisoner\u0026#39;s dilemma - Wikipedia  と持ちかける。 表にするとこんな感じ。\n   Prisoner B stays silent\n(cooperates) Prisoner B betrays\n(defects)  Prisoner A stays silent\n(cooperates) Each serves 1 year Prisoner A: 3 years\nPrisoner B: goes free  Prisoner A betrays\n(defects) Prisoner A: goes free\nPrisoner B: 3 years Each serves 2 years\n(lesser charge)    via Prisoner\u0026#39;s dilemma - Wikipedia  このとき囚人 A, B はそれぞれ黙秘するか裏切るか？ という「非協力ゲーム」の一種である。 この条件下では「両者とも黙秘（協力）する」がパレート効率的であるにも関わらず，「単独のゲーム」または「有限繰り返しゲーム」においては「両者とも裏切る」がナッシュ均衡となることが分かっている。\nでは「無期限繰り返しゲーム」による囚人のジレンマはどうなるのか。 これについては様々なモデルで研究が行われている。 たとえば\n  明白な答えの1つは、力のある人はその力を使って力の弱い人を利用できるということだ  MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明より  は典型的な「搾取」のパターンだ。\nさらに最近では「戦略的力関係とゲームのルールが両者に対称的である場合」でも\n アリスがボブの戦略を知った場合に、ボブの行動を利用し、アリス自身の結果をより良くできることを、藤本と金子教授は示している。\nしかし、この戦略がボブにとってより良い結果を約束するとアリスが保証すれば、アリスはボブの協力を確実なものにできる。たとえばある状況では、両方のプレイヤーが裏切る場合の結果よりも、ボブが犠牲になった方がボブにとって良い結果になるとアリスが保証できるのだ。\nこのため、たとえアリスがより有利になったとしても、ボブには搾取を受け入れる動機がある。「このように、両方のプレイヤーが搾取関係を安定にしています」。\n MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明より  といった「搾取」のパターンも発表されている。\nそして Open Source は「強者の武器」となる 「フリーソフトウェアと それを取巻く世界の状況 」では， GPL 下でソフトウェア開発を行うことでパレート効率的である「両者とも協力する」関係に固定できると主張している（もちろん喩え話として語られている）。\nしかし GPLv3 アップデートを巡る騒動を見る限り，誰もがパレート効率的な「両者とも協力する」関係を望んでいるわけではないように見える。\nthe GPLv2 was pretty popular at the time, but there were a couple notable loopholes some big corporations had been taking advantage of, which the free software people wanted to close. a whole bunch of people thought the GPLv2 was fine the way it was, though - closing the loopholes as aggressively as the GPLv3 did cut off some justifiable security measures, and some people said that it could do more harm than good. the linux kernel, along with a lot more stuff, declared it was sticking with the GPLv2 and not moving to the GPLv3. via Post-Open Source | boringcactus  and LLVM became at least as good as GCC, and a less risky decision for big companies, and easier to use to build new languages. so the free software movement’s last technical advantage was gone. its social advantages also kinda went up in flames with the GPLv3, too: the software that was the foundation for the GPL enforcement lawsuits stuck with the GPLv2. via Post-Open Source | boringcactus  「自由を得る」 Free Software (運動) より「不自由から逃げる」 Open Source を選好することによって何が起きるか。 「戦略的力関係とゲームのルールが両者に対称的である場合でも、搾取的な関係が構築できる」のであれば，それはどのような形を取るのか。\nジョナサンは「ここではない」世界へと逃げ込めたが，かもめならぬ我が身では何があろうとこの世界この社会で生きていかなければならない。\nOpen Source に関する批判は色々見受けるが，要するに Open Source が「強者の武器」となり，情報力を背景にした搾取の構造を構成していることが問題なのだと思う。 しかし Free Software ではその非対称性を壊せない。\n故に\ntl;dr: say no to licenses, say yes to norms. via Post-Open Source | boringcactus  なんてな話も出るのかもしれない。 個人的には（日本の法運用を見ても分かる通り）規範だのガイドラインだのをベースにした運用は腐敗や搾取の温床にしかならないと思うが（笑）\nブックマーク  クーリエ連載；エコノミスト紹介、自由のためなら人が死んでもいい フリーソフトウェアとそれを取巻く世界の状況 (2007) – とりあえずノートがわりに書いてます Post-Open Source | boringcactus  ブログ: ポスト・オープンソース   孵卵器の中のインターネット 搾取と狂狷  参考図書  かもめのジョナサン【完成版】（新潮文庫） リチャード・バック (著), 五木 寛之 (翻訳) 新潮社 2015-07-01 (Release 2015-12-18) Kindle版 B01916B8V8 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「まぼろしの4章」を加えた完成版。私の中でヒッピー文化のイメージは子どものときに読んだ『かもめのジョナサン』であり，初期のインターネットも『かもめのジョナサン』の延長線上にあると理解している。\nreviewed by Spiegel on 2017-01-23 (powered by PA-APIv5)\n  グリゴリの捕縛 白田 秀彰  2001-11-26 (Release 2014-09-17) 青空文庫 4307 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30 (powered by aozorahack)\n  もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo (著) 達人出版会 2017-12-25 (Release 2019-03-02) デジタル書籍 infoshare2 (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  WirelessWire News 連載の書籍化。感想はこちら。祝 Kindle 化！\nreviewed by Spiegel on 2018-12-31\n  それがぼくには楽しかったから 全世界を巻き込んだリナックス革命の真実 (小プロ・ブックス) リーナス トーバルズ (著), デビッド ダイヤモンド (著), 風見 潤 (翻訳), 中島 洋 (監修) 小学館プロダクション 2001-05-10 単行本 4796880011 (ASIN), 9784796880015 (EAN), 4796880011 (ISBN)  Linux の作者 Linus Torvalds の自伝的作品。\nreviewed by Spiegel on 2017-01-23 (powered by PA-APIv5)\n  かもめが翔んだ日 渡辺真知子 (メインアーティスト) Sony Music Direct(Japan)Inc. 1978-05-02 (Release 2014-04-04) MP3 ダウンロード B00FU3P37W (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  そらで唄えます。つか，今でもカラオケでよく唄います（笑）\nreviewed by Spiegel on 2020-09-14 (powered by PA-APIv5)\n   本当の policy laundering は国際的な議論や規制を都合よく利用して国内での立法プロセスを迂回することをさす： In their review of global business regulation, Braithwaite and Drahos find that some countries (notably the U.S. and the UK) push for certain regulatory standards in international bodies and then bring those regulations home under the requirement of harmonization and the guise of multilateralism; this is what we refer to as policy laundering. (via Policy laundering - Wikipedia) \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
