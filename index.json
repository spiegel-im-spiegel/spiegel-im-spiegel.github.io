{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "gpgpdump v0.6.5 をリリースした",
      "section": "release",
      "description": "ドラフト版の仕様に追随できてない部分があったので，署名サブパケットの解析処理をいくつか修正した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/11/gpgpdump-v0_6_5-is-released/",
      "published": "2019-11-07T12:06:11+00:00",
      "update": "2019-11-07T12:21:31+00:00",
      "content": " OpenPGP パケットの内容を可視化する gpgpdump の v0.6.5 をリリースした。\n Release v0.6.5 · spiegel-im-spiegel/gpgpdump · GitHub  ドラフト版 RFC 4880bis の仕様に追随できてない部分があったので，署名パケット（Tag 2）内のサブパケットの解析処理をいくつか修正した。\nそろそろちゃんとテストを書かないとなぁ。 一応 RFC 4880bis が正式版になるまでには何とかしようという気はある。\nまぁ鼻の先は動いているので気長にお付き合いください。\nブックマーク  GitHub に登録されている OpenPGP 公開鍵の情報を取得する  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2018-12-16 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 1.13.4 がリリースされた",
      "section": "release",
      "description": "今回はセキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/11/go-1_13_4-is-released/",
      "published": "2019-11-02T02:50:28+00:00",
      "update": "2019-11-02T03:01:07+00:00",
      "content": " Go 1.13.4 がリリースされた。\n Go 1.13.4 and Go 1.12.13 are released - Google Group  今回はセキュリティ・アップデートはなし。\ngo1.13.4 (released 2019/10/31) includes fixes to the net/http and syscall packages. It also fixes an issue on macOS 10.15 Catalina where the non-notarized installer and binaries were being rejected by Gatekeeper. See the Go 1.13.4 milestone on our issue tracker for details. via Release History - The Go Programming Language  Ubuntu 19.10 からは 1.12 をサポートし始めたようだが（セキュリティ・アップデートを含め）どこまで追従しているか分からない（なんであんな分かりにくいバージョニングをするのかねぇ， Linux は）。 なのでダウンロードページからバイナリ（go1.13.4.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.13.4.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.13.4.linux-amd64.tar.gz $ sudo mv go go1.13.4 $ sudo ln -s go1.13.4 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.13.4 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "2019-11-02 のブックマーク",
      "section": "bookmarks",
      "description": "「抑止効果が期待できない「違法ダウンロード対象範囲拡大」へのパブリックコメント」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/11/02-bookmarks/",
      "published": "2019-11-02T02:12:35+00:00",
      "update": "2019-11-02T02:12:57+00:00",
      "content": " リリース情報  KeePassXC 2.5.0 released - KeePassXC Hugo 0.59.1: A couple of Bug Fixes | Hugo  セキュリティ＆プライバシー関連  Rethinking Encryption - Lawfare  Former FBI General Counsel Jim Baker Chooses Encryption Over Backdoors - Schneier on Security  三菱UFJ銀行が不正アクセスを受けた通信暗号化装置について調べてみた - piyolog ICT Supply Chain Integrity: Principles for Governmental and Corporate Policies - Carnegie Endowment for International Peace  ICT Supply-Chain Security - Schneier on Security  生体認証の情報を量子暗号や秘密分散で保管するシステム--NICTとNECが開発 - ZDNet Japan DNS over HTTPS Will Give You Back Privacy that Big ISPs Fought to Take Away | Electronic Frontier Foundation 「変なホテル舞浜」卵型ロボの脆弱性報告、なぜ「不審扱い」された？　不幸なすれ違いの背景 (1/3) - ITmedia NEWS ジョージア国内1万5千サイトの一斉改ざんについてまとめてみた - piyolog How a months-old AMD microcode bug destroyed my weekend [UPDATED] | Ars Technica  A Broken Random Number Generator in AMD Microcode - Schneier on Security  ﻿インドの原子力発電所ネットワークでマルウェアが検出される - ZDNet Japan 40もの主要音楽フェスが顔認識技術を採用しないことを誓約 - YAMDAS現更新履歴 Resources for Measuring Cybersecurity - Schneier on Security  天文関連  APOD: 2019 October 26 - Gravity s Grin NASAが月の南極の地表下で結氷水を探すVIPER探査車を2022年に打ち上げ | TechCrunch Japan ESO Telescope Reveals What Could be the Smallest Dwarf Planet yet in the Solar System | ESO ニュース - アルマ望遠鏡の科学観測再開について - アルマ望遠鏡 アマチュア天文家が発見した最近傍の重力レンズ系外惑星 | 国立天文台(NAOJ)  知財関連  MPA's Piracy Claims Caused Financial Damage, VOD Site Says - TorrentFreak RapidVideoが映画業界の圧力、広告収入の減少をうけて閉鎖 | P2Pとかその辺のお話R US Court Shields Internet Subscribers From Futile Piracy Complaints - TorrentFreak 行政機関による著作権侵害の少額裁定制度、賛成多数で米下院を通過 | P2Pとかその辺のお話R 抑止効果が期待できない「違法ダウンロード対象範囲拡大」へのパブリックコメント【本日10月30日〆切】 | P2Pとかその辺のお話R  第４１４回：侵害コンテンツのダウンロード違法化等に関するパブリックコメント（１０月３０日〆切）への提出意見: 無名の一知財政策ウォッチャーの独言 インターネットをウソツキの天国にしないため、ダウンロード違法化に反対する。: 弁護士山口貴士大いに語る 2019年10月9日 侵害コンテンツのダウンロード違法化等に関するパブリックコメントの提出  Openload and Streamango Shut Down by Anti-Piracy Alliance ACE (Updated) - TorrentFreak Global Anti-Piracy Coalition Takes On Password Sharing - TorrentFreak TuneIn Radio Infringed Sony \u0026amp; Warner's Copyrights, High Court Rules - TorrentFreak Twitter Copyright Notices Have Doubled in Half a Year - TorrentFreak もしも「セサミストリート」がオープンアクセスだったなら | P2Pとかその辺のお話R  Linux または Ubuntu に関する話題  Ubuntu 19.10 その35 - GNOMEのパフォーマンスを改善する取り組み・さらなるパフォーマンスの向上を目指して - kledgeb Clonezilla その32 - Clonezilla live 2.6.4-10がリリースされました - kledgeb Ubuntu 20.04 その4 - Ubuntu 20.04 LTSの開発始まる - kledgeb Ubuntu 19.10 その43 - 4GBのメモリーを搭載したRaspberry Pi 4でUSBハブが動作しない不具合 - kledgeb  その他  5年後にユーザーは機械学習を意識しなくなる--SAPに聞く戦略やRPAとの関係 - ZDNet Japan JavaScriptは改名すべきなのだろうか？ - YAMDAS現更新履歴 MIT Tech Review: AIの次なる挑戦は「サッカー」、グーグルがシミュレーターを公開 AmazonがJava Community Process（JCP）に参加を発表 － Publickey Amazon RDS on VMwareが正式サービス開始。オンプレミスのvSphere上でAWSのマネージドデータベースが稼働 － Publickey MIT Tech Review: 米通信品位法230条、 現代ネット社会を作った 法律の光と陰 その他のレポート イベントレポート「《JST共催》その『リアルタイム』は本当にリアルタイム？～5G時代の情報の鮮度について考えた～」| SciencePortal 大分、広島で黄砂観測　秋の黄砂は6年ぶり(日直予報士 2019年10月30日) - 日本気象協会 tenki.jp Pixelbook GoはChromebookの存在意義を拡張する | TechCrunch Japan The 50th anniversary of ARPANET, the internet’s predecessor Google’s Network Congestion Algorithm Isn’t Fair, Researchers Say - VICE  ブログ: Googleのネットワーク輻輳アルゴリズムは公平ではない、と研究者は言う  Pythonの生みの親グイド・ヴァンロッサム氏が職業プログラマから引退を表明。昨年Pythonの優しい独裁者からも引退 － Publickey \u0026quot;Linuxの生みの親\u0026quot;トーバルズ氏：「私はもうプログラマーではない」 - ZDNet Japan Shimane.go#01 - connpass GoogleがFitbitを約2300億円で買収 | TechCrunch Japan Is Death Reversible? - Scientific American  ブログ: 死は元に戻せますか?  科学的根拠のない表現規制議論はもう止めよう | P2Pとかその辺のお話R  "
    },
    {
      "title": "時刻の「時」以下を切り捨てる処理",
      "section": "golang",
      "description": "無責任なこと言って，マジすんません。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/trancate-time/",
      "published": "2019-10-31T14:06:37+00:00",
      "update": "2019-10-31T18:22:48+00:00",
      "content": " 昔 Qiita で\n golangのtime.Timeの当日00:00:00を取得する方法とベンチマーク - Qiita  という記事があって，無責任にも「Unix-Time を使えばいいんじゃないの？」みたいなコメントを残した後にすっかり忘れていたのだが，ありがたくもバグの報告を頂いた。\n最初に提案したコードは\nnow := time.Now() ut := now.Unix() _, offset := now.Zone() day := time.Unix((ut/86400)*86400-int64(offset), 0) だったのだが，見ての通り，時差の考慮が不完全である。 したがって最後の行を\nday := time.Unix(((ut+int64(offset))/86400)*86400-int64(offset), 0).In(now.Location()) とする必要がある。 いや，マジすんません m(_ _)m\nついでなので，この記事でもベンチマークテストをしておこう。 対象コードは以下の5つ。\npackage zerotime import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) //fmt パッケージを使って文字列整形する func TrancateByFmt(t time.Time) time.Time { day, _ := time.Parse( \u0026#34;2006-01-02 15:04:05 -0700\u0026#34;, fmt.Sprintf(\u0026#34;%s 00:00:00 %s\u0026#34;, t.Format(\u0026#34;2006-01-02\u0026#34;), t.Format(\u0026#34;-0700\u0026#34;)), ) return day } //time.Formatを使って文字列整形する func TrancateByFormat(t time.Time) time.Time { day, _ := time.Parse( \u0026#34;2006-01-02 15:04:05 -0700 MST\u0026#34;, t.Format(\u0026#34;2006-01-02 00:00:00 -0700 MST\u0026#34;), ) return day } //差分を計算してtime.Time.Add関数を使う func TrancateByCalc(t time.Time) time.Time { nanosecond := time.Duration(t.Nanosecond()) second := time.Duration(t.Second()) minute := time.Duration(t.Minute()) hour := time.Duration(t.Hour()) dur := -1 * (nanosecond + second*time.Second + minute*time.Minute + hour*time.Hour) return t.Add(dur) } //time.Date関数で0時0分を再設定する func TrancateByDate(t time.Time) time.Time { return time.Date(t.Year(), t.Month(), t.Day(), 0, 0, 0, 0, t.Location()) } //Unix-Timeを使う func TrancateByUnixTime(t time.Time) time.Time { _, offset := t.Zone() return time.Unix(((t.Unix()+int64(offset))/86400)*86400-int64(offset), 0).In(t.Location()) } これらに対応するベンチマークテストは以下の通り。\nfunc BenchmarkTrancateByFmt(b *testing.B) { loc, _ := time.LoadLocation(\u0026#34;America/New_York\u0026#34;) t := time.Now().In(loc) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = zerotime.TrancateByFmt(t) } } func BenchmarkTrancateByFormat(b *testing.B) { loc, _ := time.LoadLocation(\u0026#34;America/New_York\u0026#34;) t := time.Now().In(loc) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = zerotime.TrancateByFormat(t) } } func BenchmarkTrancateByCalc(b *testing.B) { loc, _ := time.LoadLocation(\u0026#34;America/New_York\u0026#34;) t := time.Now().In(loc) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = zerotime.TrancateByCalc(t) } } func BenchmarkTrancateBydate(b *testing.B) { loc, _ := time.LoadLocation(\u0026#34;America/New_York\u0026#34;) t := time.Now().In(loc) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = zerotime.TrancateByDate(t) } } func BenchmarkTrancateByUnixTime(b *testing.B) { loc, _ := time.LoadLocation(\u0026#34;America/New_York\u0026#34;) t := time.Now().In(loc) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = zerotime.TrancateByUnixTime(t) } } ほんで，実行結果は以下の通り。\n$ go test -bench Trancate -benchmem goos: linux goarch: amd64 pkg: zerotime BenchmarkTrancateByFmt-4 987878\t1096 ns/op\t224 B/op\t8 allocs/op BenchmarkTrancateByFormat-4 1233117\t953 ns/op\t176 B/op\t4 allocs/op BenchmarkTrancateByCalc-4 33584716\t31.0 ns/op\t0 B/op\t0 allocs/op BenchmarkTrancateBydate-4 11734460\t99.7 ns/op\t0 B/op\t0 allocs/op BenchmarkTrancateByUnixTime-4 77463438\t15.5 ns/op\t0 B/op\t0 allocs/op PASS ok zerotime\t7.601s 分かりやすく表にしておこう。\n   関数名 実行時間 Alloc サイズ Alloc 回数     TrancateByFmt 1,096 ns 224 bytes 8   TrancateByFormat 953 ns 176 bytes 4   TrancateByCalc 31.0 ns 0 bytes 0   TrancateByDate 99.7 ns 0 bytes 0   TrancateByUnixTime 15.5 ns 0 bytes 0    まぁ，文字列を介した処理が遅いのは当然として， time.Date() を使った処理が意外に遅いな。 いや，内部で暦計算をしてるならこんなもんか？\n改めて\n  境界値チェックを行わないと、死ぬ  via sudo の特権昇格バグはなぜ起こったのか  お後がよろしいようで。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "訃報： 長沢工先生逝去",
      "section": "remark",
      "description": "長沢工先生は私にとって位置天文学の心の師匠です。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/10/kou-nagawasa/",
      "published": "2019-10-29T14:42:29+00:00",
      "update": "2019-11-02T02:09:20+00:00",
      "content": " 合掌。\n訃報…流星界の重鎮・長沢工さんが今日の夕方、亡くなられたそうです。ここ何年お会いしていなかったか…。非常に残念です。謹んでご冥福をお祈りいたします。\n\u0026mdash; TSUKADA Ken (@tsuka_ken) October 28, 2019  仕事上の利害関係以外で「先生」と呼ぶ人は本当に少なくて，特に2016年に亡くなられた長谷川一郎先生と長沢工先生は私にとって位置天文学の心の師匠です。\n学生の頃はおふた方の著書にとてもお世話になった。 学生のときにポケコンにぶち込んで使ってた北極星の時角計算プログラムも『天体の位置計算』を読んで組んだものだったりする。\n直筆論文（のコピー）も持ってるし1。 実家に置きっぱだったのだが，捨てられてなくて本当によかった。\n 長沢工先生の直筆論文（のコピー）  まぁ私も五十路の真ん中あたりをウロウロする歳になったし，そりゃあみんな歳とるわな。\n私は無宗教な人なので，ひたすら哀悼の意を表すことにします。\nブックマーク  【訃報】流星天文学の発展や天文普及に貢献、長沢工さん - アストロアーツ  参考図書  天体の位置計算 長沢 工 (著) 地人書館 1985-09-01 単行本 4805202254 (ASIN), 9784805202258 (EAN), 4805202254 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n  天体軌道論 長谷川 一郎 (著) 恒星社厚生閣 1983-01-01 単行本 4769903251 (ASIN), 9784769903253 (EAN), 4769903251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  学生の頃はめっさお世話になりました。私にとって大事な教科書のひとつです。\nreviewed by Spiegel on 2019-10-29 (powered by PA-APIv5)\n  猫暦 ねこしみず美濃 (著)  Kindle版 B07BNZQSZZ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「寛政の改暦」のころの伊能勘解由（忠敬）とその妻とされる「おえい」の物語。感想はこちら。\nreviewed by Spiegel on 2019-01-07 (powered by PA-APIv5)\n  たぶん学生のときに参加した流星会議のものじゃないかなぁ。うろ覚え。 [return]   "
    },
    {
      "title": "2019-10-27 のブックマーク",
      "section": "bookmarks",
      "description": "「GNOME files defense against patent troll」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/10/27-bookmarks/",
      "published": "2019-10-27T11:47:57+00:00",
      "update": "2019-11-02T02:09:20+00:00",
      "content": " リリース情報  Hugo 0.59.0 | Hugo Electron v7.0.0 リリースノート[和訳] - Qiita  アプリフレームワーク「Electron 7.0.0」が公開 ～64bit版Windows on Arm対応を追加 - 窓の杜   セキュリティ＆プライバシー関連  Details of the Olympic Destroyer APT - Schneier on Security Inside Olympic Destroyer, the Most Deceptive Hack in History | WIRED Calculating the Benefits of the Advanced Encryption Standard - Schneier on Security Facebookは言論の自由ではない、暴言に最適化された増幅アルゴリズムだ | TechCrunch Japan NordVPN Had Private Keys Stolen after Server Breach - TorrentFreak  NordVPN Breached - Schneier on Security  MIT Tech Review: スマート・スピーカー向け「盗聴」アプリ、審査を通過していた Mapping Security and Privacy Research across the Decades - Schneier on Security Share and accept documents securely - SecureDrop グーグル、「Google Cloud Platform」「G Suite」に対する政府の情報開示要請について公開へ - ZDNet Japan アドウェア感染した多数のAndroidアプリが数百万回ダウンロードされる | TechCrunch Japan Dark Web Site Taken Down without Breaking Encryption - Schneier on Security ブログ: 4つの主要な通信事業者が最終的にSMSを新しいRCS標準に置き換えることに合意 嵐のコンサートで摘発されたチケット不正転売と身分証偽造についてまとめてみた - piyolog  天文関連  Behold Our Dazzling Night Sky When the Milky Way Collides with Andromeda in 4 Billion Years  ブログ: 天の川銀河が40億年後にアンドロメダと衝突するときの眩しい夜空を見よ  APOD: 2019 October 20 - Pluto at Night ニュース - アルマ望遠鏡運用の一時縮小について - アルマ望遠鏡 超高速で回転する超大型渦巻銀河 - アストロアーツ 重力波天体が放つ光を初観測：日本の望遠鏡群が捉えた重元素の誕生の現場 ―重力波を追いかけた天文学者たちは宝物を見つけた― | 国立天文台(NAOJ)  Nature ハイライト：GW170817のデブリに見つかったストロンチウム | Nature | Nature Research  やはり巨大衝突の痕跡か。300光年先の温かい塵をNASAの成層圏天文台が観測 - sorae 宇宙へのポータルサイト The Universe Is Made of Tiny Bubbles Containing Mini-Universes, Scientists Say - VICE  ブログ: 宇宙はミニ宇宙を含む小さな泡でできている   知財関連  U.S. House Passes Copyright \u0026quot;Small Claims\u0026quot; Bill with Overwhelming Majority - TorrentFreak GNOME files defense against patent troll – GNOME  The Document Foundation supports GNOME Foundation fight against a patent troll - The Document Foundation Blog The Document FoundationはGNOME Foundationのパテントトロールとの戦いを支援します - LibreOffice日本語チームBlog   その他  Scientists 'may have crossed ethical line' in growing human brains | Science | The Guardian ニオイ可視化センサーのアロマビットが日本たばこ産業、East Venturesから資金調達 | TechCrunch Japan クルドの砂上の楼閣とトランプの不評だが不可避の決断：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト  トルコのシリア侵攻――誤算と打算（間 寧） - ジェトロ・アジア経済研究所  IIJがデータセンターにTeslaのリチウムイオン蓄電池を導入した理由 - ZDNet Japan MIT Tech Review: グーグル「量子超越性」実証 IBMの研究者が反論  グーグル、量子コンピューターで「量子超越性」を実証--スパコンを超える - ZDNet Japan  MIT Tech Review: 「ワインの涙」現象はなぜ起こる？衝撃波による新理論 テスラがソーラー屋根タイルの第3世代を発表 | TechCrunch Japan ヤフーも採用した地図サービス「mapbox」とは何か？ OSMの中に生き続ける旧アルプス社の地図データの行方は？【地図と位置情報】 - INTERNET Watch A Brief History of Russian Hackers' Evolving False Flags | WIRED  ブログ: ロシアのハッカーの進化する偽旗作戦の略歴  J.S. Bach the Rebel | Lapham’s Quarterly  ブログ: 反逆者J・S・バッハ  Amazon CloudWatch、機械学習により異常値（アノマリー）を自動検出できる新機能 － Publickey 電話番号をハイフン区切りに変換する - Qiita デジタル変革の推進状況を自己診断をした企業に分析結果を提供--IPA - ZDNet Japan SpaceXは衛星ブロードバンドサービスStarlinkの供用を2020年内に開始 | TechCrunch Japan GitHub スポンサーについて - GitHub ヘルプ nodejs, npm, nパッケージ構築備忘録【Ubuntu18.04 LTS】 - Qiita  "
    },
    {
      "title": "拡張版 Glob 関数を書いてみた",
      "section": "golang",
      "description": "ディレクトリを再帰的に検索するワイルドカードが使えるのが特徴で，内部で saracen/walker パッケージを使っている。とはいえ，全体的に素朴な作りになっているため，スピードは期待しないで欲しい（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/globbing-file-and-directory/",
      "published": "2019-10-27T09:08:38+00:00",
      "update": "2019-10-27T11:54:41+00:00",
      "content": " 前回の記事を書いたあと，ちょっと思いついたので手遊びに filepath.Glob() 関数の拡張版を書いてみた。\n spiegel-im-spiegel/file: Extend filepath.Glob function  ディレクトリを再帰的に検索する **/ ワイルドカードが使えるのが特徴で，内部で件の saracen/walker パッケージを使っている。 とはいえ，全体的に素朴な作りになっているため，スピードは期待しないで欲しい（笑）\nたとえば以下のようなコードを書いてみる。\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/file\u0026#34; ) func main() { fs := flag.NewFlagSet(os.Args[0], flag.ExitOnError) if err := fs.Parse(os.Args); err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\\n\u0026#34;, err) return } if fs.NArg() \u0026lt; 2 { fmt.Fprintln(os.Stderr, os.ErrInvalid) return } matches, err := file.Glob(fs.Arg(1), file.WithFlags(file.ContainsFile)) \tif err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\\n\u0026#34;, err) return } fmt.Println(\u0026#34;Count:\u0026#34;, len(matches)) for _ , path := range matches { fmt.Println(path) } } これに対して /usr/local/go/src/ ディレクトリ以下のファイルを取得したいなら，コマンドラインの引数に /usr/local/go/src/**/* を指定すればよい。 結果は以下の通り。\n$ go run work/sample.go \u0026#34;/usr/local/go/src/**/*\u0026#34; Count: 6008 /usr/local/go/src/Make.dist /usr/local/go/src/README.vendor /usr/local/go/src/all.bash /usr/local/go/src/all.bat /usr/local/go/src/all.rc /usr/local/go/src/archive/tar/common.go /usr/local/go/src/archive/tar/example_test.go /usr/local/go/src/archive/tar/format.go /usr/local/go/src/archive/tar/reader.go /usr/local/go/src/archive/tar/reader_test.go /usr/local/go/src/archive/tar/stat_actime1.go /usr/local/go/src/archive/tar/stat_actime2.go ... もちろんオリジナルの filepath.Glob() 関数の syntax も使える。\n$ go run work/sample.go \u0026#34;/usr/local/go/src/**/*.[ch]\u0026#34; Count: 77 /usr/local/go/src/cmd/go/testdata/src/badc/x.c /usr/local/go/src/cmd/internal/goobj/testdata/mycgo/c1.c /usr/local/go/src/cmd/internal/goobj/testdata/mycgo/c2.c /usr/local/go/src/cmd/vendor/golang.org/x/sys/unix/gccgo_c.c /usr/local/go/src/debug/dwarf/testdata/cycle.c /usr/local/go/src/debug/dwarf/testdata/line1.c /usr/local/go/src/debug/dwarf/testdata/line1.h /usr/local/go/src/debug/dwarf/testdata/line2.c /usr/local/go/src/debug/dwarf/testdata/ranges.c /usr/local/go/src/debug/dwarf/testdata/split.c /usr/local/go/src/debug/dwarf/testdata/typedef.c /usr/local/go/src/debug/elf/testdata/hello.c ... まぁ，私自身が趣味で書くのはフィルタ・プログラムが殆どで，ファイル検索機能にはあまりお世話にならないのだが（普段は shell スクリプト任せ），使えそうならご自由にどうぞ。 そうそう，「こうすれば効率よくなるよ」みたいな PR は大歓迎である。\nブックマーク  singleton method Dir.[] (Ruby 2.6.0)  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n  Go言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この本を読んで「よっしゃ，明日から立派な goroutine 使いだ！」とはならないと思うけど，有象無象なコピペ・プログラマじゃなく，きちんと Go 言語のプログラミングを勉強したいのであれば，この本は必読書になると思う。\nreviewed by Spiegel on 2018-11-03 (powered by PA-APIv5)\n "
    },
    {
      "title": "saracen/walker で歩いてみる",
      "section": "golang",
      "description": "saracen/walker を使うと filepath.Walk() 関数を置き換えることができる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/walking-with-multi-core/",
      "published": "2019-10-26T13:25:35+00:00",
      "update": "2019-10-26T17:19:25+00:00",
      "content": " 日頃から mattn/jvgrep には大変お世話になっているので常時 watch しているのだが，最近組み込まれたらしい saracen/walker が良さげである。\n指定したパス以下のファイル・ディレクトリを探索する機能としては標準の filepath.Walk() 関数がある。 たとえば，こんな感じで使う。\nfunc WalkWithSingle(rootPath string) (int64, error) { count := int64(0) lastErr := filepath.Walk(rootPath, func(path string, info os.FileInfo, err error) error { if err != nil { return err } if !info.IsDir() { count++ } return nil }) return count, lastErr } ちなみにこれは，指定したパス以下に存在する（ディレクトリ以外の）ファイルの数を数える関数である。\nsaracen/walker の walker.Walk() 関数を使って filepath.Walk() 関数を置き換えることができる。 walker.Walk() 関数の特徴は，ファイル・ディレクトリの探索を並行処理で行うことである。 したがってマルチコアの環境下（最近のパソコンや携帯端末は皆そうだが）ではコア数に応じた高速処理が期待できる。\nwalker.Walk() 関数を使う際にはひとつだけ注意点があって，それは walker.Walk() 関数の引数で指定する関数は goroutine-safe でなければならないということだ。\nたとえば関数閉包 (closure) を使って，ついうっかり\nfunc WalkWithMultiple(rootPath string) (int64, error) { count := int64(0) err := walker.Walk(rootPath, func(path string, info os.FileInfo) error { if !info.IsDir() { count++  } return nil }) return count, err } なんてなコード書くと，返ってくるファイル数の値は不定になってしまう（どうしてそうなるかは自分で考えよう）。 まぁ，これに限っては sync/atomic パッケージを使って\nfunc WalkWithMultiple(rootPath string) (int64, error) { count := int64(0) err := walker.Walk(rootPath, func(path string, info os.FileInfo) error { if !info.IsDir() { atomic.AddInt64(\u0026amp;count, 1)  } return nil }) return count, err } とすれば無問題 (no problem) である。\nsaracen/walker の性能評価についてはリポジトリのドキュメントを見てもらうとして，ここではもっとふわっとしたコードで性能差を体感してみよう。 用意したコードは上述した関数をちょっと弄ってこんな感じにしてみた。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;path/filepath\u0026#34; \u0026#34;sync/atomic\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/saracen/walker\u0026#34; ) func WalkWithSingle(rootPath string) (int64, time.Duration, error) { count := int64(0) start := time.Now() lastErr := filepath.Walk(rootPath, func(path string, info os.FileInfo, err error) error { if err != nil { return err } if !info.IsDir() { count++ } return nil }) return count, time.Since(start), lastErr } func WalkWithMultiple(rootPath string) (int64, time.Duration, error) { count := int64(0) start := time.Now() err := walker.Walk(rootPath, func(path string, info os.FileInfo) error { if !info.IsDir() { atomic.AddInt64(\u0026amp;count, 1) } return nil }) return count, time.Since(start), err } func main() { rootPath := \u0026#34;/usr/local/go/src\u0026#34; ct, dt, err := WalkWithSingle(rootPath) if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;WalkWithSingle\u0026#34;) fmt.Println(\u0026#34;\\tDuration:\u0026#34;, dt) fmt.Println(\u0026#34;\\t Count:\u0026#34;, ct) ct, dt, err = WalkWithMultiple(rootPath) if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;WalkWithMultiple\u0026#34;) fmt.Println(\u0026#34;\\tDuration:\u0026#34;, dt) fmt.Println(\u0026#34;\\t Count:\u0026#34;, ct) } これを実行するとこんな感じになった。\n$ go run sample1.go WalkWithSingle Duration: 38.305071ms Count: 6008 WalkWithMultiple Duration: 9.328229ms Count: 6008 私のマシンは10年前に買った4コアのパソコンなので，まぁ妥当な値だろう。\n数を数えるだけでは芸がないのでファイルの一覧を取得してみようか。 たとえば，以下のような walking.PathList 型を用意する1。\npackage walking import ( \u0026#34;sync\u0026#34; ) type PathList struct { mutex *sync.Mutex list []string } func New() *PathList { return \u0026amp;PathList{mutex: \u0026amp;sync.Mutex{}, list: make([]string, 0, 10240)} } func (p *PathList) Init() { p.mutex.Lock() p.list = p.list[:0] p.mutex.Unlock() } func (p *PathList) Append(path string) { p.mutex.Lock() p.list = append(p.list, path) p.mutex.Unlock() } func (p *PathList) List() []string { p.mutex.Lock() list := make([]string, len(p.list)) copy(list, p.list) p.mutex.Unlock() return list } これを使って先程の WalkWithMultiple() 関数を以下のように書き直してみる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;sort\u0026#34; \u0026#34;walking\u0026#34; \u0026#34;github.com/saracen/walker\u0026#34; ) func WalkWithMultiple(rootPath string) ([]string, error) { list := walking.New() err := walker.Walk(rootPath, func(path string, info os.FileInfo) error { if !info.IsDir() { list.Append(path) } return nil }) return list.List(), err } func main() { rootPath := \u0026#34;/usr/local/go/src\u0026#34; list, err := WalkWithMultiple(rootPath) if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;WalkWithMultiple ( Count =\u0026#34;, len(list), \u0026#34;):\u0026#34;) sort.Strings(list) for _, path := range list { fmt.Println(\u0026#34;\\t\u0026#34;, path) } } これを実行すると以下のような結果になる。\n$ go run sample1/sample1.go WalkWithMultiple ( Count = 6008 ): /usr/local/go/src/Make.dist /usr/local/go/src/README.vendor /usr/local/go/src/all.bash /usr/local/go/src/all.bat /usr/local/go/src/all.rc /usr/local/go/src/archive/tar/common.go /usr/local/go/src/archive/tar/example_test.go /usr/local/go/src/archive/tar/format.go /usr/local/go/src/archive/tar/reader.go /usr/local/go/src/archive/tar/reader_test.go /usr/local/go/src/archive/tar/stat_actime1.go /usr/local/go/src/archive/tar/stat_actime2.go ... よーし，うむうむ，よーし。\nブックマーク  Windows でも Grep したい  参考図書  Go言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この本を読んで「よっしゃ，明日から立派な goroutine 使いだ！」とはならないと思うけど，有象無象なコピペ・プログラマじゃなく，きちんと Go 言語のプログラミングを勉強したいのであれば，この本は必読書になると思う。\nreviewed by Spiegel on 2018-11-03 (powered by PA-APIv5)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n  配列ではなく連想配列を使うなら標準の sync.Map 型を使うのがいいだろう。 [return]   "
    },
    {
      "title": "ATOM 1.41 にアップデートしたら platformio-ide-terminal が動かねー！ と思ったら",
      "section": "remark",
      "description": "色々と試行錯誤してみたが，どうやら Ubuntu の APT でインストールしている node.js と ATOM 内部の node.js が衝突しているらしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/10/platformio-ide-terminal-in-atom/",
      "published": "2019-10-25T13:33:09+00:00",
      "update": "2019-10-25T13:34:17+00:00",
      "content": " 最近は猫も杓子も Vim か VSCode で寂しい限りだが， ATOM 1.41 がリリースされ，ようやく Electron 4 ベースの構成になった。\n Release 1.41.0 · atom/atom · GitHub  それはいいのだが，また platformio-ide-terminal が動かなくなった。 しかも 1.39 のときとは様子が異なるようだ。\n色々と試行錯誤してみたが，どうやら Ubuntu の APT でインストールしている node.js と ATOM 内部の node.js が衝突しているらしい。\n$ sudo apt purge nodejs で Ubuntu 側の node.js をいったん削除した上で platformio-ide-terminal を入れ直したら問題なく動いた。\nちなみに APT で管理されている node.js は素の設定で\n$ apt show nodejs Package: nodejs Version: 10.15.2~dfsg-2ubuntu1 Priority: extra Section: universe/web Origin: Ubuntu ... だった。 一方 ATOM 1.41 の構成は\n$ atom -v Atom : 1.41.0 Electron: 4.2.7 Chrome : 69.0.3497.128 Node : 10.11.0 $ apm -v apm 2.4.3 npm 6.2.0 node 10.2.1 x64 atom 1.41.0 ... と何とも微妙な感じである。 大丈夫か，これ。\n更に更に余談だが Ubuntu の APT に最新の node.js を組み込むには，以下のようにスクリプトを取ってきて実行すればいいらしい（以下は LTS 版の node.js 12 を組み込む場合）。\n$ curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - ただし現時点（2019-10-25）で Ubuntu 19.10 には対応してなかった orz\nブックマーク  nodesource/distributions: NodeSource Node.js Binary Distributions  参考（にならない）図書  PLUTO 豪華版 コミック 全8巻完結セット (ビッグコミックススペシャル) 浦沢 直樹 (著) 小学館 2009-06-20 コミック B00B47FIDC (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「鉄腕アトム」のスピンオフ作品の中では一番面白かった。やっぱ鉄腕アトムは「残酷」じゃないとね（笑） 浦沢直樹さんはオリジナル・シナリオよりこういうタイプの作品のほうがダントツに面白いな。\nreviewed by Spiegel on 2019-10-25 (powered by PA-APIv5)\n  アトム ザ・ビギニング1(ヒーローズコミックス) 手塚治虫 (著), ゆうきまさみ (著), カサハラテツロー (著) ヒーローズ 2015-06-05 (Release 2015-06-05) Kindle版 B00YRVO8EC (ASIN)  あれ。4年前に買ったけど全く読んでない。 Kindle の肥やしになってるな（笑）\nreviewed by Spiegel on 2019-10-25 (powered by PA-APIv5)\n "
    },
    {
      "title": "「今あなた以外に○○人が見ています」デモ",
      "section": "remark",
      "description": "これ最初に考えた奴は天才だろ（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/10/javascript-random/",
      "published": "2019-10-21T13:58:57+00:00",
      "update": "2019-10-21T13:59:28+00:00",
      "content": "ぶちウケた！\n 旅行予約サイトの「今あなた以外に○○人が見ています」はウソだったことが判明 - GIGAZINE  この記事によると\n JavaScriptで以下のような部分を発見。完全に28から44までの数字がランダムに生成され、それが表示されているだけだったことが判明しました。つまり、One Travelの「○○人がこの搭乗券をチェックしています」という部分は全くのウソであり、ユーザーにフライトの予約を急がせるためのものだったというわけです。 via 旅行予約サイトの「今あなた以外に○○人が見ています」はウソだったことが判明  なんだって。\nちうわけで，戯れにデモ・コードを書いてみた。 こんな感じでどうだろう。\n\u0026lt;div id=\u0026#39;demo\u0026#39; class=\u0026#39;box\u0026#39;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; let rn = Math.floor( Math.random() * 17 ) + 28; let p = document.createElement(\u0026#39;p\u0026#39;); p.appendChild(document.createTextNode(\u0026#39;今あなた以外に\u0026#39;+rn+\u0026#39;人が見ています\u0026#39;)); p.setAttribute(\u0026#39;class\u0026#39;, \u0026#39;center\u0026#39;); document.getElementById(\u0026#39;demo\u0026#39;).appendChild(p); \u0026lt;/script\u0026gt; 実際に試してみよう。\n  let rn = Math.floor( Math.random() * 17 ) + 28; let p = document.createElement('p'); p.appendChild(document.createTextNode('今あなた以外に'+rn+'人が見ています')); p.setAttribute('class', 'center'); document.getElementById('demo').appendChild(p);  「今あなた以外に○○人が見ています」デモ  おー。 できたできた。\n最小の労力で最大の効果。 これ最初に考えた奴は天才だろ（笑）\n JavaScriptリファレンス 第6版 David Flanagan (著), 木下 哲也 (翻訳) オライリージャパン 2012-08-10 単行本（ソフトカバー） 4873115531 (ASIN), 9784873115535 (EAN), 4873115531 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  最初に私が JavaScript を勉強したのって，これよりも更に古い版だったんだよなぁ。この版でも今となっては古すぎて使い物にならないけど（笑）\nreviewed by Spiegel on 2019-10-21 (powered by PA-APIv5)\n "
    }
  ]
}
