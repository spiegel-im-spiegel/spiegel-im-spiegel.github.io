{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "SSH, MySQL, Zerolog, そして Kra",
      "section": "golang",
      "description": "LOAD DATA INFILE 文を駆動させるところまで。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/ssh-mysql-zerolog-and-kra/",
      "published": "2022-09-22T14:05:54+00:00",
      "update": "2022-09-23T04:11:04+00:00",
      "content": "SSH, MySQL, Zerolog VPS 上に構築された MySQL サービスに大量のデータを送り込む必要がありまして。 Go でバッチ処理を組もうと考えたわけだ。 当然 MySQL サービスは VPS の外から直接アクセスできないので SSH トンネルをくぐる必要がある。\nというわけで最初に作ったのが github.com/goark/sshql だった。\nSSH 越しに DB サーバにアクセスする 再掲載すると，こんな感じに書ける。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/mysqldrv\u0026#34; ) func main() { dialer := \u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, } mysqldrv.New(dialer).RegisterDial(\u0026#34;ssh+tcp\u0026#34;) db, err := sql.Open(\u0026#34;mysql\u0026#34;, \u0026#34;dbuser:dbpassword@ssh+tcp(localhost:3306)/dbname\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer dialer.Close() defer db.Close() rows, err := db.Query(\u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } for rows.Next() { var id int64 var name string if err := rows.Scan(\u0026amp;id, \u0026amp;name); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;ID: %d Name: %s\\n\u0026#34;, id, name) } rows.Close() } ssh+tcp という名前で dialer を登録し，この名前を使って DSN (Data Source Name) を構成するというのがポイント。 Dialer のクローズを忘れずに（笑）\nただ，これだとログが取れない。 んで，どうせログを取るなら github.com/rs/zerolog パッケージを使いたいわけですよ。\nそこで登場するのが github.com/simukti/sqldb-logger パッケージ。 これを使えば標準の sql.DB に zerolog などのサードパーティ製 logger を仕込むことができる。 こんな感じ。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/mysqldrv\u0026#34; \u0026#34;github.com/rs/zerolog\u0026#34; sqldblogger \u0026#34;github.com/simukti/sqldb-logger\u0026#34; \u0026#34;github.com/simukti/sqldb-logger/logadapter/zerologadapter\u0026#34; ) func main() { dialer := \u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, } mysqldrv.New(dialer).RegisterDial(\u0026#34;ssh+tcp\u0026#34;) dsn := \u0026#34;dbuser:dbpassword@ssh+tcp(localhost:3306)/dbname\u0026#34; mysqlDb, err := sql.Open(\u0026#34;mysql\u0026#34;, dsn) if err != nil { fmt.Fprintln(os.Stderr, err) return } db := sqldblogger.OpenDriver( dsn, mysqlDb.Driver(), zerologadapter.New(zerolog.New(os.Stderr)), sqldblogger.WithMinimumLevel(sqldblogger.LevelDebug), ) defer dialer.Close() defer db.Close() rows, err := db.Query(\u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } for rows.Next() { var id int64 var name string if err := rows.Scan(\u0026amp;id, \u0026amp;name); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;ID: %d Name: %s\\n\u0026#34;, id, name) } rows.Close() } DSN を2回指定しないといけないのが若干鬱陶しいが，ともかくこれで zerolog による構造化ログが出るようになった。\nさらに Kra を仕込む 2022年春の Go Conference でとても感銘を受けたのが github.com/taichi/kra パッケージ。\nDBアクセスライブラリ Kra いや ent とかってデータ構造とその関係を最初から構築するならいい道具だと思うけど（コードで設計できるのは素晴らしい！），既にある RDBMS 環境を使う場合には必ずしもマッチしないのよね。 更に言うと，既存 ORM やクエリビルダとかの中途半端な SQL 抽象化・隠蔽にはウンザリしてるのよ（この辺は Go に限らないけど）。 それなら最初からガチで SQL 文を書いて，クエリプランをチェックしつつ評価・最適化して，それから実装を進めるべきだと常々思っていた1。\nというわけで github.com/taichi/kra を使うチャンスを伺っていたのだが，今回はお試しにはちょうどいいサイズだったので採用した。 とはいえ，今回のような構成ではどうすればいいのか分からなくて kra パッケージのソースコードやサンプルコードを眺めながら，まずは以下のように書いてみる。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/mysqldrv\u0026#34; \u0026#34;github.com/rs/zerolog\u0026#34; sqldblogger \u0026#34;github.com/simukti/sqldb-logger\u0026#34; \u0026#34;github.com/simukti/sqldb-logger/logadapter/zerologadapter\u0026#34; \u0026#34;github.com/taichi/kra\u0026#34; kraSql \u0026#34;github.com/taichi/kra/sql\u0026#34; ) func main() { dialer := \u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, } mysqldrv.New(dialer).RegisterDial(\u0026#34;ssh+tcp\u0026#34;) dsn := \u0026#34;dbuser:dbpassword@ssh+tcp(localhost:3306)/dbname\u0026#34; mysqlDb, err := sql.Open(\u0026#34;mysql\u0026#34;, dsn) if err != nil { fmt.Fprintln(os.Stderr, err) return } db := kraSql.NewDB( sqldblogger.OpenDriver( dsn, mysqlDb.Driver(), zerologadapter.New(zerolog.New(os.Stderr)), sqldblogger.WithMinimumLevel(sqldblogger.LevelDebug), ), kraSql.NewCore(kra.NewCore(kra.MySQL)), ) defer dialer.Close() defer db.Close() rs, err := db.Query(context.TODO(), \u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } rows := rs.Rows() for rows.Next() { rec := struct { Id int64 `db:\u0026#34;id\u0026#34;` Name string `db:\u0026#34;name\u0026#34;` }{} if err := kraSql.NewRows(kraSql.NewCore(kra.NewCore(kra.MySQL)), rows).Scan(\u0026amp;rec); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;%#v\\n\u0026#34;, rec) } rows.Close() } クエリ結果の取り出しが若干まどろこしいが，これは kra/sql.Rows には何故か Next() メソッドがないため2。 しょうがないので 標準の sql.Rows を取り出して，そちらの Next() メソッドで回している。\nこれでちゃんと動いてログも取れているのを確認できた。\nトランザクション制御 トランザクション制御用に以下のような関数を用意する。\nfunc Transaction(ctx context.Context, db *kraSql.DB, opts *sql.TxOptions, fn func(tx *kraSql.Tx) error) error { tx, err := db.BeginTx(ctx, opts) if err != nil { return errs.Wrap(err) } defer func() { if v := recover(); v != nil { _ = tx.Rollback() panic(v) } }() if err := fn(tx); err != nil { if rErr := tx.Rollback(); rErr != nil { return errs.Wrap(rErr, errs.WithCause(err)) } return errs.Wrap(err) } if err := tx.Commit(); err != nil { return errs.Wrap(err) } return nil } なお，エラーハンドリングには自作の github.com/goark/errs パッケージを使っている。 zerolog と組み合わせてエラーを構造化してログに吐けるのが利点。\n実際にトランザクション処理を行う場合は，たとえば\n// logger := zerolog.New(os.Stderr) // ctx := context.TODO() values := struct { Id int64 `db:\u0026#34;id\u0026#34;` Name string `db:\u0026#34;name\u0026#34;` }{ Id: 100, Name: \u0026#34;Alice\u0026#34;, } if err := Transaction(ctx, db, \u0026amp;sql.TxOptions{}, func(tx *kraSql.Tx) error { stmt, err := tx.Prepare(ctx, \u0026#34;INSERT INTO example(id,name) VALUES (:id,:name)\u0026#34;) if err != nil { return errs.Wrap(err) } defer stmt.Close() res, err := stmt.Exec(ctx, \u0026amp;values) if err != nil { return errs.Wrap(err) } count, err := res.RowsAffected() if err != nil { return errs.Wrap(err) } logger.Info().Int64(\u0026#34;affected\u0026#34;, count).Send() return nil }); err != nil { logger.Error().Interface(\u0026#34;error\u0026#34;, err).Send() ... } てな感じに書ける。 こういうのが kra にあるとめがっさ便利なんだけどねぇ（それを言い出すとパッケージがどんどん膨れてしまうのだがw）。\nLOAD DATA INFILE 文で大量のデータを突っ込む さて，いよいよ MySQL の テーブルに大量のデータを突っ込むのだが， INSERT 文でちまちまやってたら日が暮れてしまうので（実際に試して日が暮れた） LOAD DATA INFILE 文を使うことにする。\nMySQL :: MySQL 5.6 リファレンスマニュアル :: 13.2.6 LOAD DATA INFILE 構文 こんな感じの SQL 文。\nLOAD DATA LOCAL INFILE \u0026#39;input.file\u0026#39; INTO TABLE exsample_table CHARACTER SET utf8mb4 FIELDS TERMINATED BY \u0026#39;\\t\u0026#39; LINES TERMINATED BY \u0026#39;\\n\u0026#39; ( field1, field2, ... ) これでローカルにある input.file ファイルの内容をリモートの MySQL の exsample_table テーブルに送り込める。 (field1, field2, ...) の並びと入力ファイルの要素の並びが同じであることが前提。 またサーバ側の MySQL サービスが --local_infile オプション付きで起動されていること。\nCHARACTER SET 句はファイルの文字エンコードディングがDBサービスのデフォルトと異なる場合に設定する。 FIELDS 句および LINES を省略した場合のデフォルト値はこうなっているそうな。\nFIELDS TERMINATED BY \u0026#39;\\t\u0026#39; ENCLOSED BY \u0026#39;\u0026#39; ESCAPED BY \u0026#39;\\\\\u0026#39; LINES TERMINATED BY \u0026#39;\\n\u0026#39; STARTING BY \u0026#39;\u0026#39; いわゆる TSV (Tab Separated Value) 形式のレコードだね。 これ以外の形式なら明示的に設定する必要がある。\nで，これを github.com/go-sql-driver/mysql パッケージで実装するには，3つのステップが必要。\nひとつ目はデータ読み込みハンドラを登録する。 こんな感じ3。\nfile, err := os.Open(\u0026#34;input.file\u0026#34;) if err != nil { return err } defer file.Close() mysql.RegisterReaderHandler(\u0026#34;data\u0026#34;, func() io.Reader { return file }) 次に実際の SQL 文を発行する。\n// logger := zerolog.New(os.Stderr) // ctx := context.TODO() if err := Transaction(ctx, db, \u0026amp;sql.TxOptions{}, func(tx *kraSql.Tx) error { res, err := tx.Exec(ctx, `LOAD DATA LOCAL INFILE \u0026#39;Reader::data\u0026#39; INTO TABLE exsample_table (field1, field2, ...)`) if err != nil { return errs.Wrap(err) } count, err := res.RowsAffected() if err != nil { return errs.Wrap(err) } logger.Info().Int64(\u0026#34;affected\u0026#34;, count).Send() return nil }); err != nil { logger.Error().Interface(\u0026#34;error\u0026#34;, err).Send() ... } ファイルを指定する部分に先ほど登録したハンドラの名前を使って 'Reader::data' と指定する。 爆速でした。\nちなみに，うっかり tx.Prepare() で前準備しようとすると「そんな構文はサポートしてない」（←超意訳）と怒られる。 PREPARE で対応している構文は以下のページが参考になる。\nMySQL :: MySQL 8.0 リファレンスマニュアル :: 13.5 プリペアドステートメント 最後に mysql.DeregisterReaderHandler() 関数で登録を解除する。 後始末はきちんとね。\nブックマーク 【自分用のメモ】MySQL8でインポート・エクスポート - Qiita 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nデベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\nSQL はひとつの独立した言語で（チューリング完全），宣言型プログラミング言語と考えるのが分かりやすい（異論は認めるw）。宣言型で分かりやすいのは正規表現だろう（関数型言語には宣言型が多い。 Lisp とか Haskell とか）。特に Go は宣言型の言語とはあまり相性がよくない。たとえば，正規表現の（構文解析やコンパイラではなく）ビルダを作ろうと考える人は少ないだろう（労力に見合わない）。どの言語・フレームワークでも同じことだが ORM やクエリビルダを使って頑張って抽象化や隠蔽をしても上手くマッチしない局面が多く，結局は「ガチの SQL でいいぢゃん。 PREPARE 構文で事前準備して変数部分はプレースホルダ経由で渡せば安全は確保される」となる。そういう意味じゃ Go 標準の database/sql パッケージは，かなり妥当な割り切りをしてると思う。まぁ，後方互換性を保つためにちょっとアレな感じになっているのは否めないけど（笑）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\ngithub.com/jackc/pgx 専用の kra/pgx.Rows にはちゃんと Next() メソッドが付いている。提供されているメソッドが微妙に違う理由はよく分からないが，ソースコードを眺めるに，何となく意図的にそうなってる気がする。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n実は mysql.RegisterLocalFile() 関数を使えば直接ファイルパスを登録することができる。ハンドラ登録で io.Reader interface 型で渡すほうが応用が効きやすいので，今回はこちら。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Java 19 がリリースされた",
      "section": "release",
      "description": "2023-03 までの短期サポート・バージョン",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/09/java-19-is-released/",
      "published": "2022-09-20T20:13:14+00:00",
      "update": "2022-09-20T20:21:23+00:00",
      "content": "予定通り Java 19 がリリースされた。 2023-03 までの短期サポート・バージョンである。\nOpenJDK JDK 19 GA Release JDK 19 JDK 19 Release Notes Overview (Java SE 19 \u0026amp; JDK 19) 主な内容は以下の通り。\n405: Record Patterns (Preview) 422: Linux/RISC-V Port 424: Foreign Function \u0026amp; Memory API (Preview) 425: Virtual Threads (Preview) 426: Vector API (Fourth Incubator) 427: Pattern Matching for switch (Third Preview) 428: Structured Concurrency (Incubator) via JDK 19 OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。 以下は完全手動でのインストール（笑）\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://download.java.net/java/GA/jdk19/877d6127e982470ba2a7faa31cc93d04/36/GPL/openjdk-19_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-19_linux-x64_bin.tar.gz $ sudo ln -s jdk-19 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;19\u0026#34; 2022-09-20 OpenJDK Runtime Environment (build 19+36-2238) OpenJDK 64-Bit Server VM (build 19+36-2238, mixed mode, sharing) LTS 版 Java バイナリが欲しいなら Adoptium で取得できる。\n私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern Oracle Java のサポート期間 “Oracle Java SE Support Roadmap” より。\nRelease GA Date Premier Support Extended Support 11 (LTS) 2018-09 2023-09 2026-09 17 (LTS) 2021-09 2026-09 2029-09 18 2022-03 2022-09 - 19 2022-09 2023-03 - 20 2023-03 2023-09 - 21 (LTS) 2023-09 2028-09 2031-09 2022-09 時点で Premier Support が終了しているものは除いている。 Java 8 については Adoptium などで最新バイナリを取得可能。\nぶっちゃけ Java 17 の Premier Support が2026年まであるので，少なくとも LTS に関しては 17→21 への換装は進まないと思うなぁ。 11→21 はあるかもしれんけど。 Azure の Web Apps とか今年に入ってようやく Java 17 に対応したんだぜ。 そんで来年は21とか LTS の意味がねー！ 多分その次に出るであろう 25? まで保留だよな。\nブックマーク Java 19が正式リリース。より軽量な仮想スレッド、RISC-Vへの移植など新機能。1年後のJava 21が次のLTS版に － Publickey 参考図書 Spring Data JPAプログラミング入門 溝口賢司 (著) 秀和システム 2017-08-03 (Release 2018-04-23) Kindle版 B07CKHR8C1 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; JPA のお勉強用に購入。紙のほうはプレミアが付いてるっぽいが Kindle で買えるよ。固定レイアウトだからブラウザの Kindle Cloud Reader で読めるし。真面目に基本を押さえて書いていて分かりやすい。\nreviewed by Spiegel on 2021-08-26 (powered by PA-APIv5)\nEffective Java 第3版 Joshua Bloch (著), 柴田 芳樹 (翻訳) 丸善出版 2018-10-30 単行本（ソフトカバー） 4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。\nreviewed by Spiegel on 2021-03-17 (powered by PA-APIv5)\nSpring Boot 2 入門: 基礎から実演まで 原田 けいと (著), 竹田 甘地 (著), Robert Segawa (著) 2020-05-22 (Release 2020-05-22) Kindle版 B0893LQ5KY (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Spring Boot を勉強することになって急遽買った本。めっさ分かりやすかった。 PDF 版が欲しいくらい（笑） Spring Boot 2.7 対応にアップデートされていた。素敵！\nreviewed by Spiegel on 2022-08-14 (powered by PA-APIv5)\n2021-08-22 に PlantUML v1.2022.7 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "CC と NFT に関する FAQ を翻訳してみた",
      "section": "remark",
      "description": "なんたる蛮勇（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/nfts-and-cc/",
      "published": "2022-09-19T08:44:04+00:00",
      "update": "2022-09-20T20:21:23+00:00",
      "content": "いやぁ，ン年振りに cc-licenses セクションに記事を追加したぜ（笑）\n発端は yomoyomo さんの記事。\na16zが提唱するNFT向け「Can’t Be Evil」ライセンスとクリエイティブ・コモンズのNFTに対する見解 - YAMDAS現更新履歴 恥ずかしながら，この記事を読んではじめて Creative Commons が CC と NFT に関する FAQ を公開しているのを知ったですよ。\nFAQ: CC and NFTs - Creative Commons で，一念発起いたしまして，この FAQ の翻訳を敢行した。 やっちまったんだよ！\nNFT と CC Licenses なんたる蛮勇（笑）\nいやね，この前読んだ本で思ったわけさ。\n苦手・不得手は言い訳にならない！ ちなみに翻訳の内容については 全く自信がありません \u0026#x1f647;\nいや，ホンマにちょいちょい怪しい部分があるのよ。 もし「わしが見ちゃる！」という奇特な方がおられましたら，添削して頂けると助かります。 フィードバックはこちら（Twitter でも OK）。\n（訳文が正しいなら）けっこう読み応えのある FAQ だと思う。 上から順に全文読むことをお勧めします。 「NFT って何？」って方も一度読んでみたらいいと思うよ。\nその上で\nCC’s mission is not just sharing but better sharing—sharing in a way that promotes a more vibrant commons and generates more support for the creators of freely reusable works. via FAQ: CC and NFTs - Creative Commons という部分に軽く感動してしまった。 そうだよな。 これこそが Creative Commons の意義だよね。\nとりあえず\u0026hellip; もうしばらく英語はいいです。\nブックマーク New FAQ on NFTs and CC0 - Creative Commons a16z/a16z-contracts: a16z Contracts is a library for solidity contracts, including licenses 参考図書 クリエイティブ・コモンズ―デジタル時代の知的財産権 レッシグ,ローレンス (著), 敬士, 椙山 (著), 圭介, 上村 (著), 紘一郎, 林 (著), 絵美, 若槻 (著), 大洋, 土屋 (著), クリエイティブコモンズジャパン (編集), Lessig,Lawrence (原著) NTT出版 2005-03-01 単行本 475710152X (ASIN), 9784757101524 (EAN), 475710152X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 残念ながら紙の本は実質的に絶版なんですよねぇ。是非デジタル化を希望します。\nreviewed by Spiegel on 2014-08-02 (powered by PA-APIv5)\n著作権は文化を発展させるのか: 人権と文化コモンズ 山田 奨治 (著) 人文書院 2021-07-29 (Release 2021-07-29) Kindle版 B099RTG3J7 (ASIN) 2021年夏に出てたのだが，仕事が忙しくなってすっかり忘れていた。これから読みます。\nreviewed by Spiegel on 2021-12-06 (powered by PA-APIv5)\n著作権法 第3版 中山 信弘 (著) 有斐閣 2020-09-04 単行本 4641243336 (ASIN), 9784641243330 (EAN), 4641243336 (ISBN) 第3版が出てた。第2版は図書館で借りて読んだが，途中でギブアップした。個人が興味本位で読める本ではないらしい（笑）\nreviewed by Spiegel on 2020-10-12 (powered by PA-APIv5)\n"
    },
    {
      "title": "NFT と CC Licenses",
      "section": "cc-licenses",
      "description": "この記事は Creative Commons が FAQ (よくある質問) として公開している “FAQ: CC and NFTs” を試みに翻訳したものです。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/cc-licenses/06-nfts-and-cc/",
      "published": "2022-09-19T08:07:21+00:00",
      "update": "2022-09-19T08:07:47+00:00",
      "content": "この記事は Creative Commons が FAQ (よくある質問) として公開している FAQ: CC and NFTs を試みに翻訳したものです。 原文の FAQ: CC and NFTs は Creative Commons により CC-BY \u0026nbsp; ライセンスの下で公開されています。\nなお，翻訳に関する間違いは全て翻訳者である Spiegel に帰します。 もし間違いがあればフィードバックして頂けると助かります。\nFAQ： CC と NFT 我々は多くの人が CC0 (パブリック・ドメインへの献呈) および CC ライセンスを代替不可トークン（Non-Fungible Token; NFT）とともに使用しているのを見てきました。 CC0 や CC ライセンスと NFT を組み合わせる方法には多くの混乱があります。 そこでよく目にする質問を明らかにするために，この基本的なガイダンスをまとめました。\nこれらの技術，およびその説明となる慣行（practices），ポリシー，用語は継続的に進化しています。 この FAQ は NFT が CC オープンライセンスやパブリック・ドメイン・ツールとどのように関係しているかについて CC 最新の理解と解釈を提供しますが，包括的なガイドでも特定の法的助言でもありません。理解と解釈が進むにつれて，この FAQ を更新し続けます。\n最終更新日： 2022-09-09\nNFT とはなんですか， CC ライセンスと組み合わせて使えますか？ NFT は芸術作品やその他の著作物を含む電子ファイルにリンクできる一意に識別可能なデータ単位です。 作品に紐付けられた NFT が「ミント1（mint）」されると，その NFT の売却がブロックチェーン2（blockchain） 上にデジタルで記録され， NFT の購入者は作品に紐付けられた固有のトークンを所有することになります。\nただし NFT の購入者は，明示的に著作権を譲渡する別の法的契約を結んでない限り，紐付いている作品の著作権を自動的に取得することはありません。 芸術作品の番号付きプリントを所有するようなもので， NFT の所有者は所有する特定のトークンに対してなにが起きるかを制御します。 別途の委譲がない限り，トークンの基となる作品の権利は保有されず，作品をコピーまたはリミックスする他者を規制できません（これらの権利は基となる作品の権利者が独占的に保有します）。\nCC 法的ツールはクリエイターが自分の作品を一般に向けてコピー，共有，および再利用できるようにするための標準化された方法で，本来は，権利者の特別な許可がない限り，著作権法で禁じられていたものです。 NFT の所有権と基となる作品の著作権の保有は分離できるため， NFT の基となる作品に CC ライセンスを適用することは可能ですし，既にそうしているクリエイターもいます。\nCC0 とはなんですか？ どのように機能しますか？ それはライセンスですか？ CC0 はパブリック・ドメインへの作品の献呈です。 作品の著作権に影響を与えるためライセンスと誤って呼ばれることがよくあります。 しかし，しかしライセンスは権利者があなたに許可することを記述しますが， CC0 献呈は全ての権利を解放するため，誰も権利を保有せず，作品は公衆に帰属します。 CC0 を使用すると著作権に基づく全ての権利を解放し作品に対する権利を管理したくない（つまり誰でも自由に利用できる）ことを表明することになります。\nCC0 は（全ての CC ライセンスとそのツールも同様ですが）著作権に基づく権利にのみ適用されます。人格権，商標権，プライバシー権といった他の権利は，他の何かの仕組みで明示的に放棄されない限り，依然として講師される可能性があります。 作品に紐付いている NFT の所有権は著作権下で保有される権利ではないため，基となる作品が CC0 の下にリリースされているとしても， NFT は引き続き保有・移転することが出来ます。\n一部の法域では完全なパブリック・ドメインへのリリースが不可能なため， CC0 ではこれに備えて権利保有者が可能な全ての許諾を付与する予備（fallback）ライセンスを含んでいます。 法律上の技術的な問題は異なりますが結果は同じです：誰もがどんな目的でも CC0 の作品を利用できます。\nNFT で CC0 を使用することは意味はありますか？ もしあるならどんな意味ですか？ NFT に紐付かれた作品が CC0 でパブリック・ドメイン下にリリースされると，トークン自体は一度にひとりの所有者しか持てませんが，基となる作品は誰でも自由に共有したりリミックスしたりできます。\nCC0 パブリック・ドメインへの献呈は基となる作品に適用され，その利用は，商業目的だろうが非商業目的だろうが作品をコピーおよびリミックスする権利を， NFT の所有者でもなく元の権利者でもなく，誰も独占的に保有しないことを意味します。 作品を利用する権利の保有者は，その作品に紐付けられたトークンの所有者とは別のものです。\n誰でも CC0 を使用してパブリック・ドメイン下にリリースされた作品のコピーを自由に作成できますが，紐付いている NFT の購入は購入者にとって依然として意味がある場合があります。 たとえば， NFT を発行するクリエイターや機関を財政的に支援したい， NFT 保有に関連する排他的なクラブやフォーラムの会員になりたい，あるいは単に NFT の所有者であることを主張できるという社会的利益を得たい，とか。\nNFT に紐づく作品をパブリック・ドメインにするために CC0 を使用する際，別のライセンス条項を提示することはできますか？ たとえば，商用利用のために別のライセンス条項を設定することはできますか？ CC0 は全てのユーザと全ての利用に対するパブリック・ドメインへのリリースです。 したがって他のライセンス条項を提示しても，誰でも CC0 作品の無制限な利用を選択できます。\nたとえば，ある作品を非商用利用には CC0 としてリリースし商用利用にはより厳しいライセンス・スキームを使用することは意味がありません（商用利用者も CC0 条件下で作品を利用する資格があるため意図通りには機能しません）。\n（これは CC ライセンスにも当てはまります。 付与された全ての許可は全ての人に適用されます。 しかし，ライセンスが制限していることを行う許可を個別に付与することを選択することは出来ます： たとえば，作品を CC BY-NC として提供し，お金を払うユーザには商用でのコピーができるようにします）\nCC ライセンスは全ての人が作品を利用できるようにするためのものですが NFT の所有者はひとりしかいません。これは矛盾していますか？ ある作品の NFT がミントされると，その作品に紐づく一意のトークンが作成され，そのトークンが売りに出されます。 NFT の購入者はその固有のデジタル・データに対する排他的権利を有し，所有に伴う特権，利益，社会的名声を手に入れます。 しかし， NFT の購入に権利譲渡の追加契約が含まれていない限り，紐付いている作品の著作権の独占的な保有者にはなっていません。\n物理的メディアを作成するアーティストについて考えてみるといいかもしれません： アーティストが物理的な作品を販売するとき，それが一点ものの収集品であろうとコピーであろうと，根底にある著作権の販売と結び付けられることは殆どありません。 アーティストは通常，自身の作品の複製に対する排他的権利を保持し，物理メディアの所有者または一般大衆に対して権利の一部または全部をライセンスしたり，あるいは全くライセンスを付与しないこともできます。\n多くの場合， NFT の所有者は紐付いている作品自体に対するコピーやリミックスの排他的な支配を特に望んでいないかもしれません。 たとえばクリエイターを経済的に支援する手段として NFT を購入する人は通常，そのクリエイターに著作権を保持させ，その作品を別の方法でライセンスすることで引き続き利益を得られるようにしたいと考えるでしょう。\n作品が CC ライセンスされている場合，作品の NFT が販売されてもライセンス条項は引き続き適用されます； NFT の所有者がひとりであっても，作品自体は付与されている CC ライセンス条項の下に誰もが自由に利用できることに変わりありません。 作品がパブリック・ドメインにある場合や CC0 リリースの場合は誰も排他的権利を有していないため，権利を売買することができなくなります。 一般の人は自由に作品をコピーしたりリミックスしたりできます。 トークンの所有は，これらの条項と矛盾しません。\n他人の CC ライセンス作品の NFT をミントできますか？ 技術的には CC ライセンスで付与された権利の使用（全体または一部のコピー，または作品のリミックスなど）を伴わない方法でこれを行っている場合，ライセンスはあなたの行為を抑えず，あなたはライセンスの条件に従う必要はありません。 創造的な作品に対して NFT をミントするだけならこれらの権利は必ずしも必要ではありませんが，多くの NFT 関連の利用では恐らく必要です。 NFT のミントおよび販売の際に著作権の許可が必要となる方法で作品のコピーを行う場合は，そのライセンスの要求に従わなければなりません（たとえば NC ライセンスの作品を商業利用目的でコピーすることは出来ません）。\nただし，既に作品がパブリック・ドメインにある場合を除き， CC は通常，クリエイターの同意なしに他人の作品をミントすること支援していません。 CC のミッションは，単に共有することではなく，より良い共有—より活発なコモンズを促進し，自由に再利用可能な作品のクリエイターへの支援を生み出す方法で共有することです。\n他人の CC ライセンス作品の NFT を同意なしにミントした場合，いくつかの異なるネガティブな結果を生む可能性があります。 ひとつは，クリエイターが与えるべきと思っているある種の公式な所有権を他の誰かが与え，その作品からお金を稼いでいるとき，クリエイターはしばしば不当に搾取されていると感じる可能性です。 もうひとつは，元のクリエイターが自身の作品が NFT に紐付かれたりその NFT が使われることを全く望んでおらず，たとえその使用に対して報酬やクレジットが支払われたとしても，自分の作品がこのような方法で利用されると自身の評判が損なわれ修復も困難だと考えている可能性です。\nCC クリエイターが自身の作品の再利用についてこのようなネガティブな経験をすると作品を自由に公開することを躊躇してしまいます 彼らの寛容さにつけ込んでいると感じる利用を阻止するため，より制限的な条件あるいはデフォルトの “All Rights Reserved” に切り替えるかもしれません。\n他人の作品の NFT をミントする場合は搾取されていると感じさせるような方法で作品を利用するのではなく，クリエイターに尋ね，彼らと一緒に作業することをお勧めします。 ライセンスの法的要件を満たすことは著作権侵害を回避するために最低限しなければならないことであり，何をすべきかという倫理基準ではありません。\nCC は NFT に特化したライセンスをリリースしましたか？ CC は NFT に特化したライセンスを公開していませんが，既存ライセンスと法的ツールが NFT に紐づく作品に適用される可能性があります。 コモンズにある他のマテリアル3 と互換性のある方法で他の人があなたの作品を自由にコピーおよびリミックスができるようにしたい場合は CC ライセンスまたは CC0 パブリック・ドメイン献呈を使用することをお勧めします。 他の NFT ライセンスが CC ライセンス作品と互換性があるかどうか判断するための分析は行っていませんが，トークン自体の売買に関する追加条項を主に設計し，紐付いている作品については CC0 を使用するか CC ライセンスと互換性のあるいくつかのプロジェクトについては承知しています。 ただし，他のいくつかのライセンスには紐づく作品に対して許可される利用を制限する追加の条件が記述されているものがあります。 これらの多くは CC ライセンス作品と互換性がありません。 NFT ライセンスに CC0 献呈または CC ライセンスが含まれるあるいは参照する場合は，それらがどのように結びつき， NFT およびその関連作業が何を意味するかを理解するように注意する必要があります。\nCC はクリエイティブな作品に NFT を使用することを推奨していますか？ CC は自由に再利用やリミックスができる文化的な作品の創造と共有を支援しており，これらの作品の創造とデジタル化を支援するために独占的な著作権以外のものを利用する資金調達モデルを支援しています。 多くのクリエイターや文化機関がその精神で NFT を使用しているのを見てきました。\nNFT の中にはクリエイターの同意なしにミントされたもの，トークンの価値や潜在的な投資家に販売されているものについて誤解を招くあるいは虚偽の約束をしているもの，他の不正な手段で NFT 発行者に資金を誘導するものがある（他にも多くの非論理的な利用がある）ことを認識しており，たとえ CC ライセンスや法的ツールが使われている場合でも，こうした行為を支援しません。\nNFT の環境への影響4 を含め，考慮に値する他の批判もあります。 NFT をミントする際，新しい強力なツールで作業する場合と同じように，クリエイターは選択肢と目標を慎重に検討することが推奨されます。\n私達のコミュニティではクリエイティブな作品に NFT を使用することを推奨すべきかどうかについて，様々な意見があることを承知しています。 一方で，多くの人が NFT を受け入れ，コモンズで作品を共有する一環としてそれらを使用する方法についてのガイダンスを求めていることも承知しています。 このドキュメントは使用を推奨するものでも問題を深く掘り下げるものでもありません。 代わりに CC ライセンスがこれらの新しいツールや慣行とどのように相互作用するかを既に調査を行っている人々に向けてガイダンスを提供することを狙いとしています。\n訳注：「ミント」は NFT を作成してブロックチェーンに組み込むことを指すらしい。「鋳造（minting）」が由来。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n訳注：「ブロックチェーン」は簡単に言うと NFT システムにおける販売台帳のようなものだと考えていただければ。システムで唯一のデータでありながら不特定のコピーを許容する中核技術と言ってよい。元々は Bitcoin で使われている同名の技術を応用したもの。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n訳注：「マテリアル（material）」は CC ライセンスでの独自の言い回しで，ライセンスの対象となるものをまとめてマテリアルと呼んでいる。詳しくは拙文「Creative Commons Licenses」を参照のこと。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n訳注：ブロックチェーン要素技術である PoW (Proof of Work) は計算資源（と電力）を激しく消費するため批判が多い。このため NFT のプラットフォームでもある Ethereum では PoW を PoS (Proof of Stake) へ置き換えようとしている。詳しくは次の記事を参照のこと： MIT Tech Review: イーサリアムの「ザ・マージ」が完了、6年越しでPoSへ移行\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "結局 Google Fonts に巻き戻した。そしてモリサワ BIZ UD フォント採用へ",
      "section": "remark",
      "description": "とほほ orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/rollback-web-fonts/",
      "published": "2022-09-18T12:31:41+00:00",
      "update": "2022-09-19T08:49:02+00:00",
      "content": "実はさっき2022年3月に公開された\n「BIZ UD」フォントが「Google Fonts」へ ～モリサワのユニバーサルフォント - 窓の杜 という記事を見つけたのだが，この中で\nTrueType版に関しては教育現場で利用されることを考慮し、「IPAフォント」v003（最新）に収録されている全文字をカバーしているという 「BIZ UD」フォントが「Google Fonts」へより という記述1 を見て「え？ じゃあ 神（U+FA19）とか ㈱（U+3231）とかが表示できないのおかしくね？」と思い，もう少し真面目に調べてみた。\nしたら，収録文字を制限してるのはどうやら Bunny Fonts 側のようなのだ。 Google Fonts で BIZ UD フォントを検索したら「神」も「㈱」も「①」もちゃんと表示してくれた。\nたぶん Bunny Fonts は文字数を抑えるためにわざと JIS X 0208 の範囲しか収録してないんだろうね（邪推）。 でも異体字セレクタで指示する「葛󠄀（U+845B U+E0100）」なんかは Bunny Fonts でも表示できるっぽいんだよなぁ。 基準が分からん。\nとりあえず BIZ UD フォント側を疑ってまじすんません \u0026#x1f647;\n正直このブログでは機種依存文字（古語）や異体字等は割と使うので削られると困るし Bunny Fonts を使う限り NOTO JP フォントでも同じようになるみたいなので，泣く泣く Google Fonts に戻すことにした。 そんで，どうせ Google Fonts に戻すならモリサワ BIZ UD フォントで全然問題ないやろ，ということで最終的に以下の指定で Web フォントを読み込んでいる。\n\u0026lt;link rel=\u0026#34;preconnect\u0026#34; href=\u0026#34;https://fonts.googleapis.com\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;preconnect\u0026#34; href=\u0026#34;https://fonts.gstatic.com\u0026#34; crossorigin\u0026gt; \u0026lt;link href=\u0026#34;https://fonts.googleapis.com/css2?family=BIZ+UDGothic:wght@400;700\u0026amp;family=BIZ+UDMincho\u0026amp;family=Inconsolata:wght@400;700\u0026amp;family=Noto+Color+Emoji\u0026amp;family=Noto+Sans:wght@400;700\u0026amp;family=Noto+Serif\u0026amp;display=swap\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; 簡単に言うと日本語部分のみ BIZ UD ゴシック/明朝フォントを使い，それ以外は従来の NOTO フォント及び Inconsolata フォントを使う感じ。 これで英文の引用や\nAs a best practice, remember to consume software from the official project repos and watch out for potential typosquats or repository forks/clones that may appear identical to the original project but hide malware. via 35,000 code repos not hacked—but clones flood GitHub to serve malware プログラム・コードは\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) } 従来どおりに表示するようにしている。\nほんじゃあ，まぁ，これからこれで行きますかね。 モリサワ BIZ UD フォントで表示できない文字が出てきたら最終的に NOTO JP フォントにまで巻き戻すかも知れんけど（笑）\nブックマーク Google Fonts が日本語に対応してた Google Fonts から Bunny Fonts に乗り換える IPAex フォントのほうは2019年に Ver.004.01 が出ている。例の令和の合字「㋿（U+32FF）」への対応である。ただ BIZ UD フォントはこの字もちゃんと含んでいるように見える。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "2022-09-18 のブックマーク",
      "section": "bookmarks",
      "description": "「『シン・ウルトラマン』の宇宙「プランクブレーン」は現実にあるのか」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/09/18-bookmarks/",
      "published": "2022-09-18T03:33:43+00:00",
      "update": "2022-09-18T12:34:15+00:00",
      "content": "リリース情報 Release 9.1.7 · mermaid-js/mermaid · GitHub Release August 2022 Recovery 2 · microsoft/vscode · GitHub Release v0.103.0 · gohugoio/hugo · GitHub 「Thunderbird 102.2.2」が公開 ～先週に続くアップデート - 窓の杜 LibreOffice 7.3.6 Community has been released - The Document Foundation Blog LibreOffice 7.4.1 Community available for download - The Document Foundation Blog セキュリティ＆プライバシー関連 What we learned (and can share) from passing our SOC 2 Type II audit · Tailscale 英国：あなたのポケットにスパイを送る「オンライン安全法案」のCSAM対策 | p2ptk[.]org GIFShell attack creates reverse shell using Microsoft Teams GIFs Facebook login button disappearing from websites on privacy concerns : 企業サイトなどが Facebook アカウントとの連携機能を外す傾向にあるらしい。別に閲覧者のプライバシーに配慮しているわけではなく，単にネットにおける Facebook のプレゼンスが低下してるってだけみたいだが（笑） インシデント発生時のチーム対応を支援する「Grafana Incident」、無料でGrafana Cloudが提供。SlackやGitHubなどと連携 － Publickey チョークポイント資本主義 「ブロックチェーン・バーチャル搾取工場」の怖い話 | p2ptk[.]org 『チョークポイント資本主義』：クリエイターを搾取し続けるテック業界とコンテンツ業界の独占的支配 | p2ptk[.]org 知財関連 Denoのライアン・ダール氏「親愛なるオラクル殿、どうかJavaScriptの商標を手放して」と呼びかけ － Publickey LINE、国⽴国会図書館のデジタル化資料247万点をテキストデータ化 - ケータイ Watch Azure や Windows に関する話題 「Windows 10 バージョン 21H1」のサービス終了まであと3カ月 ～Microsoftが注意喚起 - 窓の杜 Go 言語関連 Goでのスクレイピングに使っていたgoqueryをcollyに置き換えてみた - Qiita Big Sky :: unsafe.StringData、unsafe.String、unsafe.SliceData が入った。 actions/setup-goでgo.modを参照してGoのバージョン利用する Golangでssh Proxy経由でのssh接続を行わせる(多段プロキシ) | 俺的備忘録 〜なんかいろいろ〜 OPA/Regoによる汎用的なGo言語の静的解析 Goコンパイラディレクティブのgo:linknameとtime.Now()のモック : テストで使える？ 天文関連 MIT Tech Review: NASAより安くて早い民間初の金星探査ミッション、23年打ち上げへ その他 《自分の理解に関心を持つ》（前編・後編）（結城浩ミニ文庫）｜結城浩 : 買った 「部屋で服を着替えるとPCがスリープから復帰する」という謎の現象が報告される、一体なぜ？ - GIGAZINE Signal \u0026raquo; Blog \u0026raquo; A Message from Signal\u0026rsquo;s New President Flutter 3.3がリリース。パフォーマンスの改善、テキスト周りの改善、iOS向け高速な描画レイヤ「Impeller」を試験的実装 － Publickey AIで音楽をボーカル・ドラム・ベース・その他に分離できる「Demucs」【レビュー】 - 窓の杜 伸ばすのが難しい能力：柴田 芳樹 (Yoshiki Shibata)：SSブログ : これらの能力を伸ばすのが難しいのは主に組織開発で要求される能力だからじゃないかと邪推している Deno、早くもnpm対応と3倍高速化したHTTPサーバAPIなどを実装した「Deno 1.25」をリリース － Publickey 『シン・ウルトラマン』の宇宙「プランクブレーン」は現実にあるのか｜物理の4大定数｜小谷太郎 - 幻冬舎plus マイクロソフト、Linux版SQL Server 2022のリリース候補版を公開。Azure Active Directory対応など － Publickey 「連邦取引委員会はAmazonのiRobot買収を阻止せよ」――20を超える市民社会団体がFTCにオープンレターを送付 | p2ptk[.]org マイクロソフトの調査にみるコードのオーナーシップと品質の関係 - mtx2s’s blog Kiwi Farms問題とインターネット・キュレーションの滑り坂――インフラはコンテンツに責任を負うべきか | p2ptk[.]org Scaling Git’s garbage collection | The GitHub Blog 言語間の整数型範囲まとめ · GitHub : ありがたや Google cancels half the projects at its internal R\u0026amp;D group Area 120 • TechCrunch Gartner Says Banking-as-a-Service Will Hit Mainstream Adoption Within Two Years Docker Desktop 4.12登場。ターミナル機能の統合、containerdによるイメージ管理、Dockerボリュームのバックアップなど新機能 － Publickey 「今こそ反SLAPP法の制定を」：米議会にスラップ訴訟規制法案が提出される | p2ptk[.]org 技術書典13の執筆環境にVivliostyleを採用しました a16zが提唱するNFT向け「Can’t Be Evil」ライセンスとクリエイティブ・コモンズのNFTに対する見解 - YAMDAS現更新履歴 マイクロソフト、「.NET 7」にDockerコンテナイメージ生成機能を搭載、Dockerファイル不要に － Publickey 日本語の指示に特化した画像生成AI「Stable Diffusion」の派生版をrinnaが開発 - 窓の杜 「WebView2」がUWP開発でも利用可能に ～古いアプリのChromium/Blink移行に期待 - 窓の杜 Ethereum switches to proof-of-stake consensus after completing The Merge • TechCrunch MIT Tech Review: イーサリアムの「ザ・マージ」が完了、6年越しでPoSへ移行 「Unicode 15.0」が公開 ～新しい絵文字20種を含む4,489の新たな文字が追加 - 窓の杜 1.1.1.1：パブリックDNSへのブロッキング命令に抗うCloudflare | p2ptk[.]org モリサワの「UD書体」が「Google Workspace」「ChromeOS」「Android」で利用可能に - 窓の杜 "
    },
    {
      "title": "はじめての空気圧チェック",
      "section": "remark",
      "description": "おぅふ！ 思ったより抜けている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/pound-force-per-square-inch/",
      "published": "2022-09-17T01:28:18+00:00",
      "update": "2022-09-18T03:34:34+00:00",
      "content": "先週，自転車を受け取った際に色々とアドバイスを頂いたのだが（専門店はこういうところがありがたい），そのひとつが「通勤で毎日乗るのなら週に1度は空気圧チェックをすること」だった。\nというわけで，はじめての空気圧チェック（笑）\n空気圧チェック | Flickr おぅふ！ 思ったより抜けている。 確かにこれなら毎週チェックせんとあかんな。\nちなみに今回買った自転車はオフロード寄りのクロスバイクで太いタイヤで空気圧指定も高めになっているそうな。 タイヤの刻印をみると 50-85 psi (pound-force per square inch) とあるが，店員さんには「上限ギリギリまで入れてはいけない」とも言われているので 75 psi で調整1（これも指導してもらった）。\nちなみに\n$$ 1\\,\\mathrm{atm} = 1.01325\\,\\mathrm{bar} = 101,325\\,\\mathrm{Pa} $$ で2，さらに\n$$ 7\\,\\mathrm{bar} = 101.526\\,\\mathrm{psi} $$ なんだそうな（空気入れのメータを見てもそんな感じ）。 つまり $75\\,\\mathrm{psi}$ は概ね $5.2\\,\\mathrm{bar}=5.2\\times10^2\\,\\mathrm{kPa}$ ($5.1\\,\\mathrm{atm}$) ってところか。\n実はフレンチ・バルブ自体がはじめての経験で，空気入れも専用のものを購入している。 店頭ハンズオンでも一度試させてもらっているのだが，結構気を使うのな（乱暴に扱うとバルブが折れるらしい。バルブが折れたら全取っ替え）。 これも慣れないとなー。\nブックマーク 自転車タイヤの空気圧単位 最も使われている単位と変換方法について解説します | CBN Blog 参考図書 理科年表 2020 国立天文台 (編集) 丸善出版 2019-11-20 文庫 4621304259 (ASIN), 9784621304259 (EAN), 4621304259 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 日本における令和への改元や国際単位系（SI）の定義改定などに関するトピックを多く掲載。2020年版は（保存用として）買いかも。\nreviewed by Spiegel on 2019-12-08 (powered by PA-APIv5)\n“psi” は「ぴーえすあい」呼びでいいらしい。「ぷさい」と呼ぶ人もいるそうだがギリシャ文字の $\\psi$ とは関係ないようだ（笑）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n“atm” は標準大気圧（standard atmosphere）を 1 とした単位。 SI 単位系では $1\\,\\mathrm{atm}=101,325\\,\\mathrm{Pa}$ と定義されている。“bar” は「ばーる」と読む。大昔の天気予報で気圧を mb (ミリバール) で表記していたあの「バール」である。本文を見れば分かる通り SI 単位系では $1\\,\\mathrm{bar}=100,000\\,\\mathrm{Pa}$ で換算できる。ちなみに $\\mathrm{Pa}$ は $\\mathrm{N}/\\mathrm{m}^2$ または $\\mathrm{kg}\\,\\mathrm{m}^{-1}\\,\\mathrm{s}^{-2}$ と等価。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "図書館に行きたくなる本？",
      "section": "remark",
      "description": "「逃げ道」としての図書館や青空文庫",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/library/",
      "published": "2022-09-16T09:34:22+00:00",
      "update": "2022-09-16T10:02:54+00:00",
      "content": "こんにちは。 今週から自転車通勤を始めて，お尻が痛いのにも少し慣れてきた今日この頃です。\n今日は午後から半休取って4回目の予防接種をキメてきた（笑） 自転車置き場の場所が分かりにくくて往生したよ。\nヤクをキメてきたぜ（4回目） | Flickr 予約時間の30分以上前に到着して（計画通り）かねてからスキマ時間に読む予定だった本をパラパラと。\nトップランナーの図書館活用術 才能を引き出した情報空間 (ライブラリーぶっくす) 晋典, 岡部 (著) 勉誠出版 2017-07-31 単行本 458520055X (ASIN), 9784585200550 (EAN), 458520055X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; まだ大久保ゆうさんのインタビューしか読んでないが，なかなか面白かった。他の人も読んでみよう。\nreviewed by Spiegel on 2022-09-16 (powered by PA-APIv5)\nこの本は Twitter の TL で流れているのを見かけたのだが，メイン著者の方には申し訳ないけど一昔前の自己啓発本みたいな煽りコピーで購買意欲が減退してしまう。 それでもンタビュイーのラインナップを見ると（敬称略）\n落合陽一 清水亮 前野ウルド浩太郎 三上延 竹内洋 谷口忠大 結城浩 荻上チキ 大久保ゆう 大場利康 花井裕一郎 原田隆史 とあり，中でも結城浩さんと大久保ゆうさんは是非とも読んでみたいと思いポチったのだった。 とりあえず，予防接種までの待ち時間で大久保ゆうさんへのインタビューだけ読んだ。\n私の中で大久保ゆうさんといえば，青空文庫での「シャーロック・ホームズ」シリーズや「不思議の国のアリス」の翻訳のイメージが強い。 近年だと，それこそ図書館で借りて読んだ『ヒトラーと哲学』が面白かった。 特に訳者あとがきの\n〈本を読んだ〉とは〈本を読むのをやめた〉と同義である 『ヒトラーと哲学者』訳者あとがきより にはしびれた（そういやこの本はまだ買ってないな。この際だしポチっておこうか）。\nインタビューを読むと，高校生時代から青空文庫に翻訳を提供されているのに「英語の成績全然駄目です。本当に駄目でした」だったそうな。 それで「翻訳をしたら俺も英語力つくかなみたいな下心もあって」でも翻訳を始めるのは凄い。 私なんか中学時代に絶望して英語の成績を上げようとか思わなくなってたよ（結構後悔している）。\n最後の方で「逃げ道」としての図書館や青空文庫について言及がある。\nあと、本が買ってもらえなかった子っているんです。「勉強しなさい」って言われて。でも電子辞書だけは買ってもらえた。そこで電子辞書を開いて青空文庫を一生懸命読んでいたっていうんですよ。だからある種のコンテンツがあることで逃げ道になっていたようで。そういう避難所はどこかに設置できたほうがいいと思ってます。 トップランナーの図書館活用術より もうすぐ二学期。学校が始まるのが死ぬほどつらい子は、学校を休んで図書館へいらっしゃい。マンガもライトノベルもあるよ。一日いても誰も何も言わないよ。９月から学校へ行くくらいなら死んじゃおうと思ったら、逃げ場所に図書館も思い出してね。\n\u0026mdash; 鎌倉市図書館 (@kamakura_tosyok) August 26, 2015 読書環境が「逃げ道」になるというのは思いつかなかったが，自身の子供時代を思い返してみれば確かにそういう側面はあったかもな，と思わなくもない。 そして，これらを踏まえて最後の\n青空文庫は自由に使える、水増しの水でいい。あとの生かし方はみんなが見つけてくれればそれでいいと思っています。 トップランナーの図書館活用術より というセリフにまたもやしびれた！\nなお，私の中で久美沙織さんといえば『MOTHER』がダントツです。 エンディングまで泣くんじゃない！ あと『ドグラ・マグラ』は友人に勧められて手に取った記憶はあるのですが SAN 値が下がるので最後まで読めませんでした（ウソ。夢野久作は難解すぎて私には無理でした）\n参考図書 ヒトラーと哲学者: 哲学はナチズムとどう関わったか イヴォンヌ シェラット (著), 三ッ木 道夫 (翻訳), 大久保 友博 (翻訳) 白水社 2015-01-22 単行本 4560084122 (ASIN), 9784560084120 (EAN), 4560084122 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ナチス・ドイツ時代の哲学史物語という感じ。哲学（者）がヒトラーおよびナチス・ドイツにどのような影響を与えたか，またヒトラーおよびナチス・ドイツが哲学（者）にどのような影響を与えたかを物語風に編み上げていく。\nreviewed by Spiegel on 2019-06-05 (powered by PA-APIv5)\n本の未来 (Ascii books) 富田 倫生 (著) アスキー 1997-02-01 単行本 4756117074 (ASIN), 9784756117076 (EAN), 4756117074 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; e-book の未来を予見する試みの書。あるいは本とコンピュータの関係について。青空文庫にも収録されている。\nreviewed by Spiegel on 2019-01-02 (powered by PA-APIv5)\nインターネット図書館 青空文庫 野口 英司 (著) はる書房 2005-11-01 単行本 4899840721 (ASIN), 9784899840725 (EAN), 4899840721 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 青空文庫の活動について紹介。作品を収録した DVD も付いてる！ 巻末に載っている富田倫生さんの文章は青空文庫に収録されている。\nreviewed by Spiegel on 2019-01-02 (powered by PA-APIv5)\nシャーロック・ホームズ「赤毛連盟」 アーサー コナン・ドイル (著), Arthur Conan Doyle (著), 三上 於菟吉 (翻訳), 大久保 ゆう (翻訳) でじじ発行/パンローリング発売 2007-05-01 CD 4775929259 (ASIN), 9784775929254 (EAN), 4775929259 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 青空文庫に収録されているシャーロック・ホームズ・シリーズの翻訳を朗読する。第一弾は「赤毛連盟（Red-Headed League）」で佐々木健さんによる朗読。一人で何役もこなす佐々木健さんがかっこいい！\nreviewed by Spiegel on 2019-01-04 (powered by PA-APIv5)\nボヘミアの醜聞 原題: A Scandal in Bohemia ドイル アーサー・コナン, 大久保 ゆう (翻訳) 1998-12-28 (Release 2014-09-17) 青空文庫 226 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 『シャーロック・ホームズの冒険』に収録された作品のひとつ。「あの女」アイリーン・アドラー登場。\nreviewed by Spiegel on 2019-09-21 (powered by aozorahack)\nグリゴリの捕縛 白田 秀彰 2001-11-26 (Release 2014-09-17) 青空文庫 4307 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30 (powered by aozorahack)\nクリトン 原題: CRITO プラトン , sogo (翻訳) 2000-12-20 (Release 2014-09-17) 青空文庫 4333 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「ソクラテスの弁明」そのものには必ずしも賛同しないが，繰り広げられる対話は「個」と「公」の関係を考える上で面白い作品だと思う。\nreviewed by Spiegel on 2020-05-11 (powered by aozorahack)\n陰翳礼讃 （初出: 「経済往来」1933（昭和8）年12月号、1934（昭和9）年1月号） 谷崎 潤一郎 2016-08-23 (Release 2016-06-10) 青空文庫 (Public Domain) 56642 (図書カードNo.) 実はちゃんと読んでない（笑） 学生時代に読んでおけばよかった。\nreviewed by Spiegel on 2019-07-14 (powered by aozorahack)\nニャルラトホテプ 原題: NYARLATHOTEP ラヴクラフト ハワード・フィリップス, 大久保 ゆう (翻訳) 2014-04-04 (Release 2015-08-19) 青空文庫 56839 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SAN 値が下がる。\nreviewed by Spiegel on 2019-03-28 (powered by aozorahack)\nアリスはふしぎの国で 原題: ALICE IN WONDERLAND キャロル ルイス, 大久保 ゆう (翻訳) 2015-07-04 (Release 2015-07-16) 青空文庫 57320 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「不思議の国のアリス」の大久保ゆうさんによるオリジナル翻訳。 「不思議の国のアリス」の草稿版とされる「アリスの地底めぐり（ALICE'S ADVENTURES UNDER GROUND）」も公開されている。 さらにアーサー・ラッカム挿絵版も公開された。\nreviewed by Spiegel on 2020-08-10 (powered by aozorahack)\n戦争と平和 （初出: 「青年界」1904（明治37）年4月） 丘 浅次郎 2017-01-09 (Release 2016-12-09) 青空文庫 (Public Domain) 57423 (図書カードNo.) トルストイじゃないほう（笑） 日露戦争の頃に出版されたテキストです。著者の丘浅次郎さんは生物学者で，進化論や遺伝学で貢献された方だそうです。\nreviewed by Spiegel on 2020-08-05 (powered by aozorahack)\n「天に積む宝」のふやし方、へらし方 著作権保護期間延長が青空文庫にもたらすもの 富田 倫生 2019-01-01 (Release 2018-12-24) 青空文庫 59489 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 『インターネット図書館 青空文庫』の巻末に寄せられた文章。著作権期限の延長を受けて青空文庫に収録された。\nreviewed by Spiegel on 2020-08-09 (powered by aozorahack)\n"
    },
    {
      "title": "チャリンコ買うた",
      "section": "remark",
      "description": "松江の田舎道をおっかなびっくり走り回る五十路のおぢさんを見かけるかもしれないけど，生暖かい目で見守って頂けると幸いです（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/x-road-bike/",
      "published": "2022-09-11T04:59:27+00:00",
      "update": "2022-09-21T09:56:53+00:00",
      "content": "引っ越し以来，片道30分かけて毎日てくてく歩いて通勤しているのだが，そろそろ飽きてきまして（笑） 実は先月（2022-08）の上旬に某自転車屋さんで通勤用のクロスバイクを発注したのだった。\n確かに20代前半くらいまではイキってロードバイクとか乗ってましたよ。 でも社会人になったら外で遊ぶことも減って，なにより IT 業界に入ってからは結構な出不精体質になってしまったのよ（仕事以外でお出かけしたくない）。 だから実質30年ぶりくらいなのね，自転車に乗るのって。 私としては大決断でした（お値段的にも）。\nで，納車が1ヵ月後と言われ，予定通りに納車準備完了と連絡が来たのが金曜日。 翌日はオンライン読書会だったので諦めて，今日の午前中にお店に行って受け取りました。\nチャリンコ買うた | Flickr ちなみにカタログ・スペックはこんな感じ。\n2022 GIANT Bicycles | GRAVIER DISC 若い頃に欲しかった夢の油圧ディスク・ブレーキっすよ。\n脚が短いのでサドルは低めだけど，それでもお尻を乗っけた状態では微妙に脚が地面に届かない（そういう風にチューニングされている）。 乗り降りの感覚を取り戻さないと。 以下はロードバイクの例だがクロスバイクでも基本的に同じらしい（自転車屋の店員さんに教えてもらった）。\nロードバイクの上手な乗り降り方法 - YouTube 納車してもらってそのまま自宅まで乗って帰ったのだが，脚ではなく腕にダメージが来てる。 そういや私，スマホより重たいものは滅多に持たないからなぁ。\n一番困惑しているのは「スピードが出る」こと。\nいや，徒歩でも自転車でも自動車でも，路上を移動しているときって（無意識にでも）周囲に気を配って先読みをしていくわけじゃない。 あと20秒で交差点とか，Majiですれ違う5秒前とか，死角で誰か辻占してる気配がするとか（ねーよ）。\n長年の徒歩感覚に慣れすぎてしまったせいか，自転車に乗ってると先読みの感覚が狂うのよ。 これで思い出したのだが，自転車に乗らなくなった当時ってスピード感覚が変わってしまって「歩いても歩いても前に進まない」ように感じたんだよな。 あの時の逆パターンかと妙に納得してしまった。\nというわけで，しばらく松江の田舎道をおっかなびっくり走り回る五十路のおぢさんを見かけるかもしれないけど，生暖かい目で見守って頂けると幸いです（笑）\nブックマーク 自転車の灯火についての決まりを全都道府県調べてみた – CyclingEX CLASSIC 自宅＆ジムでおすすめの体幹トレーニング15選！鍛えるメリットや効果を高めるポイントも解説 – uFit ONLINE SHOP : 自転車に乗るために体幹筋肉を多少は鍛える必要があるかなぁ，と。特に背筋。まっちょになる気はない "
    },
    {
      "title": "SSH 越しに DB サーバにアクセスする",
      "section": "release",
      "description": "mattn さんが公開されているパッケージを参考に組んでみた",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/09/sql-over-ssh/",
      "published": "2022-09-10T09:04:56+00:00",
      "update": "2022-09-22T23:57:32+00:00",
      "content": "PostgreSQL や MySQL などの RDBMS サービスにアクセスするために Go では標準で database/sql パッケージを用意している （実際にサービスにアクセスするためには github.com/lib/pq や github.com/go-sql-driver/mysql といったドライバ・パッケージを使う必要がある）。 たとえばこんな感じ。\ndb, err := sql.Open(\u0026#34;postgres\u0026#34;, \u0026#34;postgres://dbuser:dbpassword@dbserver:5432/example?sslmode=require\u0026#34;) ただし，これはクライアントからサービスに直結する場合で，たとえば VPS 内の RDBMS サービスに SSH 経由でアクセスする必要がある場合は少し工夫が必要である。 ありがたいことに PostgreSQL サービスに SSH 経由でアクセスするためのパッケージを mattn さんが公開して下さっている。\nmattn/pqssh Go で SSH 超しに PostgreSQL に接続できる database/sql ドライバを作った。 ありがたや \u0026#x1f647;\nで，実は MySQL サービスに SSH 経由でアクセスする必要ができたので，上のパッケージを参考に自作してみた。\ngoark/sshql: Go SQL drivers over SSH このパッケージを使ってこんな感じに書ける。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/mysqldrv\u0026#34; ) func main() { dialer := \u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, } mysqldrv.New(dialer).RegisterDial(\u0026#34;ssh+tcp\u0026#34;) db, err := sql.Open(\u0026#34;mysql\u0026#34;, \u0026#34;dbuser:dbpassword@ssh+tcp(localhost:3306)/dbname\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer dialer.Close() defer db.Close() rows, err := db.Query(\u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } for rows.Next() { var id int64 var name string if err := rows.Scan(\u0026amp;id, \u0026amp;name); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;ID: %d Name: %s\\n\u0026#34;, id, name) } rows.Close() } MySQL の場合 SSH でアクセスするための Dialer を登録して，登録文字列を DSN に含める必要がある。\nさらに，このパッケージを使った PostgreSQL への SSH 越しのアクセスはこんな感じに書ける。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/pgdrv\u0026#34; ) func main() { dialer := \u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, } pgdrv.New(dialer).Register(\u0026#34;postgres+ssh\u0026#34;) db, err := sql.Open(\u0026#34;postgres+ssh\u0026#34;, \u0026#34;postgres://dbuser:dbpassword@localhost:5432/example?sslmode=disable\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer dialer.Close() defer db.Close() rows, err := db.Query(\u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } for rows.Next() { var id int64 var name string if err := rows.Scan(\u0026amp;id, \u0026amp;name); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;ID: %d Name: %s\\n\u0026#34;, id, name) } rows.Close() } やっぱ sql.Open() 関数の第1引数で専用ドライバを指定するほうがシンプルだよなぁ。 DSN 文字列をいじらなくて済むし。\nここでごめんペコン \u0026#x1f647;\nSSH 越しにアクセスできる適当な PostgreSQL 環境を持ってなくて，上のコードはテストしてません。 「あんだ，動かねーよ！」とかありましたら pull request 頂けるとありがたいです。\npgx ドライバでも SSH 越しにアクセスしたいのだが\u0026hellip; PostgreSQL にアクセスするなら github.com/jackc/pgx パッケージを使いたいところだが github.com/lib/pq のように専用の Dialer を登録できるインタフェースはないっぽい？ 「◯◯すればできるよ」という情報がありましたら是非教えてください。 まぁ，試す環境がないんだけどね。\nInsecureIgnoreHostKey() 関数で叱られる mattn さんの github.com/mattn/pqssh パッケージの中で\nsshConfig := \u0026amp;ssh.ClientConfig{ User: d.Username, Auth: []ssh.AuthMethod{}, HostKeyCallback: ssh.InsecureIgnoreHostKey(), } という記述があり，最初はそのまま真似してたのだが，例によって lint に「あかんがな！」と叱られた。\nHostKeyCallback 項目は SSH ログイン時のホスト認証の動作をするもので， ssh.InsecureIgnoreHostKey() は何もせず nil を返却するだけの関数を渡している。\n// InsecureIgnoreHostKey returns a function that can be used for // ClientConfig.HostKeyCallback to accept any host key. It should // not be used for production code. func InsecureIgnoreHostKey() HostKeyCallback { return func(hostname string, remote net.Addr, key PublicKey) error { return nil } } こりゃあ，確かにあかんわ（笑）\n最終的に今回の github.com/goark/sshql パッケージでは一応ホスト認証を行っているが ~/.ssh/known_hosts ファイルに登録されていないホストや登録されている鍵が異なる場合は問答無用でエラーを返すようにした。\n$ go run sample.go ssh: handshake failed: knownhosts: key is unknown まぁ，こういうパッケージはバッチ処理とかにしか使わないだろうし，ええじゃろう。\nなお sshql.Dialer 構造体は\n// Dialer is authentication provider information. type Dialer struct { Hostname string `json:\u0026#34;hostname\u0026#34;` Port int `json:\u0026#34;port\u0026#34;` Username string `json:\u0026#34;username\u0026#34;` Password string `json:\u0026#34;password\u0026#34;` PrivateKey string `json:\u0026#34;privateKey\u0026#34;` IgnoreHostKey bool `json:\u0026#34;IgnoreHostKey\u0026#34;` client *ssh.Client } と定義しているけど IgnoreHostKey 要素に true をセットするとホスト認証をすっ飛ばしてくれる。\nブックマーク Using MySQL / MariaDB via SSH in Golang · GitHub Golang – How to write ssh.HostKeyCallback – cyruslab simukti/sqldb-logger: A logger for Go SQL database driver without modifying existing *sql.DB stdlib usage. 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nGo言語による分散サービス ―信頼性、拡張性、保守性の高いシステムの構築 Travis Jeffery (著), 柴田 芳樹 (翻訳) オライリージャパン 2022-08-03 単行本（ソフトカバー） 4873119979 (ASIN), 9784873119977 (EAN), 4873119979 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元でデジタル版を購入。読書会の課題図書。ハンズオンぽい構成でコードがたくさん書かれているのがよい。\nreviewed by Spiegel on 2022-08-03 (powered by PA-APIv5)\nデベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n"
    }
  ]
}
