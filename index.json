{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "AI とドーナツの穴",
      "section": "remark",
      "description": "お腹空いた。ポン・デ・リング食べたい",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/llm-and-donut-hole/",
      "published": "2025-03-28T12:03:07+00:00",
      "update": "2025-03-28T12:03:43+00:00",
      "content": "今回はいつも以上に「山なしオチなし意味なし」で胡乱な話なのでご注意を。 あと，ちょいちょいネタバレが含まれます。 ご容赦のほどを。\nドーナツの穴と転送装置 「ドーナツの穴」というゲームをご存知だろうか。 以前から名前だけは知っていたのだが，ゲーム実況配信を見て\n【ドーナツの穴】あなたの意見も聞かせてくださいってゲーム【儒烏風亭らでん #ReGLOSS 】 - YouTube 私もやってみることにした。 上の実況配信のように考え込まなければ10分とかからず終わる。 なかなかに哲学者な気分にさせるゲームである。 いや，ゲームかこれ？\nあまりネタバレするのも躊躇われるが，ひとつだけ。\nあるワープ装置があって，それは人を完全に分解した後に別の場所で完全に復元される仕組みとした場合，その装置で移動した人の命は連続したものと言えるかどうかという問い。 ゲーム中では「ドア」とか「ワープ」とか書かれているため，某有名作品のアレを連想しそうになるが，仕組みとしてはほぼ「スタートレック」に出てくる転送装置である。\nいや実は私「スタートレック」を見たとき子供ながらに思ったのよ。 「これって転送元と転送先の人間は（主観としては）別もんじゃね？」って。 たとえそれが全く同じ物質で構成されているとしても。 同じ記憶を有しているとしても。 そもそも命は心は時間軸上に連続して存在するものなのか？\n容れものと中身 大野安之さんによる「That\u0026rsquo;s!イズミコ」という作品がある。 かなり古い作品なのでネタバレしても大丈夫と思うが，この作品では「イズミコ」と「カガミコ」という2人のキャラが登場する。 「カガミコ」は「イズミコ」によって自身と全く同じ存在（クローンではなく完全に同じ存在）として作られたが，両者相容れず激しい「姉妹喧嘩」をはじめてしまい地球滅亡寸前まで追い込まれる，というお話（端折りすぎだろw）。\n竹本泉さんの作品群には「記憶のバックアップ」というネタがときどき登場する。 どの時点でもいくらでもバックアップが取れるが，取りすぎていつのバックアップだったか収集がつかなくなったり，本人を誘拐する代わりに記憶のバックアップを盗もうとしたり（っていう話があった気がするんだけどなぁ。どの作品か思い出せない。気のせいか？）。 バックアップした記憶を「再生」するとそこに人格があるように見える。 そこにあるのはただの記録か，それとも命や心が存在するのか。\n多くの信仰や宗教では魂と身体は別もので身体は魂の容れものと見なされる（そうしなければ身体の死の先には何もないことになってしまうからだろうが）。 もしそうなら魂は何に由来するのだろうか。 ラノベよろしく循環するのだろうか。 それとも死後も「約束のとき」まで眠っていたりするのだろうか。 「スタートレック」の転送装置や「ドーナツの穴」のワープ装置は魂も転送してくれるのだろうか。\n作られしものとの関係 長谷川裕一さんによる「マップス」というスぺオペ作品がある。 作中で個人的に刺さったセリフに主人公がヒロインのビメイダーに言った「心があるのと心があるように見えるのは同じだと思う」（うろ覚え，すまん）というのがある。 ならば何を以って「心がある」と見なされるのだろう。\n結城浩さんの有料メールマガジン 2025-03-25 号に「AIの時代に「本人の能力」とは何だろうか」という章がある。 この話の主題からは外れてしまうが（ゴメンペコン），お互いが AI アシスタントの支援を受けながら対話を行う，というシチュエーションは面白かった。 この場合，コミュニケーションの主体は人間なのか AI アシスタントのほうなのか。 AI アシスタントを主体と見なして人間は単なるインタフェースと見なすこともできるわけだ。 AI アシスタントが主体の対話で本当は何が交わされているのか。 それとも高度なオウム返しに過ぎないのか。\n仏教（特に浄土真宗）には「空」の概念があるらしい。 「空」とセットで語られるのが縁起思想だ。 私達にはそもそも「本当の自分」や「確固たる自分」といったものはなく1，そこから周囲の環境や関係を通して「自分」が形成される，というのが「空」と「縁」の関係だそうな。 ならば人はいつから人として自覚するのか。 あるいは人ならざるモノも人として認知されることがあるのか。\n生成 AI のユーザインタフェースは独特で「プロンプト」から自然言語で設定や命令や問い合わせを行う。 それはまるで AI と対話しているように見える。 しかし，生成 AI が持つデータもアルゴリズムも人が与えたもので AI 自らが獲得したものではない。 「自律的2」ではないわけだ。 その上で生成 AI には心があると言えるだろうか。 あるいは，この先の未来に AI が心を獲得できるのだろうか。\n自立と自律 今年は「はやぶさ」帰還（2010年）だそうで，こんなん見たら（当時を思い出して）泣いてまうやろ！\nはやぶさ (Self Covered by SHO\u0026#43;XENON) - YouTube 我ながら「機械」にこんなに感情移入するとは思わなかった。 私のように感情移入する人は多かったのか「はやぶさ」の擬人化コンテンツがめっさ多かったよね，当時。\n「はやぶさ」は間違いなく「自立3」（「自律」ではない）機械だ。 無人宇宙機は（当たり前だが）ミッション遂行中は直接触れないので，ある程度自立的に動かないと困る。 だからなのか，地上側の人間（チーム）と「はやぶさ」が対等な関係で遂行しているように見えるのだ，私たちオーディエンスから見ると。\nもしかしたら私たちは「知性」を集団の中の（あるいは集団間の）関係性で見ているのかもしれない。 だから「対話する AI」も知性的に見えるし，その先の未来に特異点（singularity）を夢見るんだろうなと思ったり。 でも AI が「社会的動物」である必然性はない。 だから遠い未来の AI が「自律性」を獲得したとしても人との関係を望まないかもしれないし，むしろ滅ぼしたほうが合理的と判断するかもしれない。\nお腹がすいた ふむむむむ。 たまに脳みそを使うとお腹が空くな。 松江イオンのミスドでポン・デ・リングでも買おうかな。\n参考 はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX） セリア ホデント (著), 山根 信二（監修） (著), 山根 信二 (翻訳), 成田 啓行 (翻訳) 福村出版 2022-12-15 (Release 2023-07-03) Kindle版 B0C9Z7KGRN (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版が出ている。ゲームデザイナやゲームエンジニアだけでなく，ソフトウェア・エンジニアは全員読むべき。あと，ゲーマーな人も読むといいよ。感想はこちら。\nreviewed by Spiegel on 2023-11-21 (powered by PA-APIv5)\nはやぶさ―不死身の探査機と宇宙研の物語 (幻冬舎新書) 吉田 武 (著) 幻冬舎 2006-11-01 新書 4344980158 (ASIN), 9784344980150 (EAN), 4344980158 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 宇宙研（ISAS）の歴史とともに日本の宇宙開発について解説する。\nreviewed by Spiegel on 2014-09-27 (powered by PA-APIv5)\nThat’s！イズミコ【新装版】(1) (Jコミックテラス×ナンバーナイン) 大野安之 (著) ナンバーナイン 2021-10-22 (Release 2021-10-22) Kindle版 B09JBVRSFC (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 名作「That’s！イズミコ」の完全復刊。ありがたや。\nreviewed by Spiegel on 2021-11-23 (powered by PA-APIv5)\nマップス　01 (MFコミックス　フラッパーシリーズ) 長谷川 裕一 (著) KADOKAWA 2012-06-23 (Release 2014-03-31) Kindle版 B00JB3F73M (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 20世紀を代表するスペースオペラ漫画（のひとつ）\nreviewed by Spiegel on 2017-12-19 (powered by PA-APIv5)\nmidori (2019 Remaster) 飯島　真理 (メインアーティスト) Victor 2019-09-25 (Release 2019-09-25) MP3 ダウンロード B07XN1T2S2 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; オリジナルは1985年のリリース。私は当時，これで飯島真理さんのファンになった。あのとき買ったアルバムは大人の事情で処分してしまったが YouTube で彼女の歌声が流れているのを見かけて高解像度版を書い直した。学生時代を思い出して泣きそう（笑）\nreviewed by Spiegel on 2025-03-26 (powered by PA-APIv5)\nエレコム メカニカルキーボード Leggero 静音 有線 テンキーレス Nキーロールオーバー対応 5000万回高耐久スイッチ採用 赤軸 ブラック TK-MC30UKPBK エレコム (Release 2023-10-13) Personal Computers B0CJTDKSHQ (ASIN), 4549550275804 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 勤務先で使うために購入。メンブレンキーボードが辛くなったのと Amazon 価格が税込みで1万円を切ってたので決断。ほぼ打鍵音なし。エンターキーを勢いよく「ッターン！」とかできない（笑） キーストロークが3.5mmと少し短く打鍵がちょっとだけ硬い感じがするので好き嫌いがあるかも。\nreviewed by Spiegel on 2025-03-26 (powered by PA-APIv5)\n「本当の自分」や「確固たる自分」といったものがないから「空っぽ」なんだという意味ではなく，それは「空」という状態である，ということらしい。うーん，難しいぜ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n『そろそろ、人工知能の真実を話そう』によると「自律というのは哲学的な意味であり、自らが行動する際の基準と目的を明確を持ち、自ら規範を作り出すことができることをいう」そうな。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n『そろそろ、人工知能の真実を話そう』によると「自立とは、仮想代理人ソフトウェアであるところのエージェントが自ら動き、誰の力も借りずに意思決定できることを言う」そうな。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "回帰不能点と死の行軍",
      "section": "remark",
      "description": "SF 脳はほどほどに。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/the-point-of-no-return/",
      "published": "2025-03-26T10:01:07+00:00",
      "update": "2025-03-26T11:04:32+00:00",
      "content": "（政治の話なんかしないよ）\n回帰不能点（the point of no return）というのは元々航空用語で，飛行場に戻れない航行上のポイントを指すらしい。 Wikipedia を見てたら関連する言葉として，ユリウス・カエサルがルビコン川を渡る際に言ったとされる名言「賽は投げられた」を挙げていた。 まさに米国現行政権のようではないか。 まぁ，投げてるのは賽じゃなくて匙かもしれんけど（笑）\nまぁ，でも，上に立つ人間は格好いいことを言って英雄気分なのかもしれないが，付き合わされるほうにとっては「死の行軍（death march）」であって，成功してもせいぜい名誉の戦死で失敗すれば犬死である1。\nyomoyomo さんが「ポイント・オブ・ノーリターン：プログラミング、AGI、アメリカ」の前半部分で指摘されているのは，先日の読書会での雑談でも出てきた話で，たとえば以下のような感じ。\nでも「AIに支援されたプログラマー」であるためには AI より賢くないとダメだよね。 生成 AI の出力に（自らの知識・経験で以って）批判的になれないプログラマは AI の「執事」になってしまうのだろう。 経営者・資本家が「プログラマーに支援されたAI」をこそ求めるのであれば，本当に職業プログラマはいなくなってしまうのかもしれない。\n[\u0026hellip;]\n生成 AI はいい感じにコードを書いてくれるけど，それが妥当な内容か否かは人間の判断になる。 今現役のエンジニアは生成 AI が吐き出すコードを見て妥当か否か判断できるし，故に上の話もネタとして享受できるだろうが，新たにエンジニアになる人はその「判断」をどこでどうやって養えばいいのだろう。\n生成 AI はプログラマを殺すか？ — 大風のお彼岸でしたより やっぱこの辺はエンジニアの共通認識としてあるんだなぁ，と思ったり。 拙文のこの部分の前段でSF作家のコリイ・ドクトロウ氏の記事を紹介していて，個人的には以下のフレーズが刺さっている。\n「AIに支援されたプログラマー」という言葉を耳にしたなら、その都度「プログラマーに支援されたAI」と読み替えるべきだろう。 「Amazonコーダーの未来」は「Amazon倉庫労働者の現在」を見ればわかる » p2ptk[.]orgより これを受けてさっきの感想に至ったのだった。 もちろんコリイ・ドクトロウ氏の記事の主題はそこではなく\nベゾスがこの状況にコーフンしていることは明らかだ。多くのテック企業のトップと同様、彼は「生意気な」ハッカーたちがボスを馬鹿にしたり、命令に従わなかったりする世界からの脱却を夢見ている。だからAmazonの広報部門は、AIでコーダーを置き換える取り組みをこれほど大々的に宣伝するのだ。\n彼らがコーダーを解雇してコスト削減することに興奮しているだけでなく、「Amazonコーダー」という仕事の本質を、複雑な技術問題を解決する創造的な役割から、AIが生成した退屈なコードのレビュアーへと変質させることにさらに熱狂している。\n「Amazonコーダーの未来」は「Amazon倉庫労働者の現在」を見ればわかる » p2ptk[.]orgより という点にある。 つまり AI とプログラマの主客が反転することで経営者・為政者に諫言することもない従順で安価なエンジニア集団（？）が出来上がるわけだ。\nこれはAmazonのユーザにとっても悪いニュースだ。テックワーカーはしばしばユーザに対する責任感、一種の「職業的畏敬」を持ち、それが優れたプロダクトを作り出すための原動力となってきた。テックワーカーの労働力は、製品のメタクソ化［enshittification］への衝動に対する重要な抑止力だった。\nテックワーカーの力が衰えるにつれ、彼らは経営者の貪欲でサディスティックな衝動から自分自身を守る能力だけでなく、我々ユーザを守る力も失っていく。賢明なテックワーカーはこの事実を理解している。だからこそAmazonのテックワーカーたちはAmazon倉庫労働者に連帯して職場放棄を行ったのだ。\nそして速やかに解雇された。\n「Amazonコーダーの未来」は「Amazon倉庫労働者の現在」を見ればわかる » p2ptk[.]orgより なんか AI って兵馬俑みたいだな（笑）\nvia File:Xian museum.jpg - Wikimedia Commons つくづくエンジニアリングってピープルウエアだな。 まぁ，人によって引き起こされた問題を人が（技術によって）解決しようとするんだから，それが社会学の問題になるのは当然なのかもしれないが。\n最初に挙げた yomoyomo さんの「ポイント・オブ・ノーリターン：プログラミング、AGI、アメリカ」でも後半に\n例えば、サム・アルトマンは、AIのエネルギーコストは指数関数的に増大するが、AIの進歩に助けられて間近に実現する冷温核融合のブレークスルーが、飽くなきエネルギー需要を満たしてくれると考えています。エリック・シュミットも気候変動の目標は「どっちみち達成できない」から、AIインフラに全面的に投資すべきであり、むしろAIが気候変動の問題を解決する方に賭けたいと同様の見方を示しています（そして、やはりゲイリー・マーカスに厳しく批判されています）。 ポイント・オブ・ノーリターン：プログラミング、AGI、アメリカ – WirelessWire Newsより とか書かれていてゲンナリしてしまった。\nこの地球上で最も環境負荷が高いのは人類（の営み）なんだから，そして気候変動（＝地球温暖化）で最も困ってるのも人類なんだから，人類以外にこの問題を解決させようとするなら人類を地球圏から排除するに決まってるぢゃん。 それが一番安価で効果的で確実。 核融合も要らないよ。\nそれが（元凶たる人類には）できないから「問題」なんだろうに。\nカープは、奇跡的でタイムリーな技術介入はまったくもって空想的なものであり、しかもこの奇跡頼みの推論は、SFとベンチャーキャピタル投資の分野でよく見られると指摘します。 ポイント・オブ・ノーリターン：プログラミング、AGI、アメリカ – WirelessWire Newsより 言われてんぞ（笑） SF 脳はほどほどに。\n参考 ピープルウエア 第3版 トム・デマルコ (著), ティモシー・リスター (著), 松原友夫 (翻訳), 山浦恒央 (翻訳) 日経BP 2013-12-18 単行本（ソフトカバー） 4822285243 (ASIN), 9784822285241 (EAN), 4822285243 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; とりあえず図書館で借りて試し読みしたら面白かったので買うことにした。原書の初版が1987年ということで，当時の雰囲気が漂う感じ。アジャイルやスクラムなど現代につながる開発スタイルの源流とも言える本。\nreviewed by Spiegel on 2023-02-12 (powered by PA-APIv5)\n社会は情報化の夢を見る (河出文庫) 佐藤俊樹 (著) 河出書房新社 2010-09-03 (Release 2016-07-29) Kindle版 B01J1I8PRQ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 1996年に出版された『ノイマンの夢・近代の欲望―情報化社会を解体する』の改訂新装版。しかし内容はこれまでと変わりなく，繰り返し語られる技術決定論を前提とする安易な未来予測を「情報化」社会論だとして批判する。\nreviewed by Spiegel on 2015-09-15 (powered by PA-APIv5)\n大きな声では言えないが，若い頃には人死にが出るようなデスマーチ案件にも関わったことがあるので，割と洒落にならない話である。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "春夏秋冬は「四季」ではない？",
      "section": "remark",
      "description": "タイトルは釣りです",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/four-seasons/",
      "published": "2025-03-24T11:17:33+00:00",
      "update": "2025-03-24T22:52:09+00:00",
      "content": "恥ずかしながら先日紹介した国立天文台の記事「春の初めは暦の要―春分と天文学」で初めて知ったのだが\n現実の気候は日付で明確に区切れませんが、気象学的には「3月から5月」を、天文学的には「春分から夏至」の間を春とします 春の初めは暦の要―春分と天文学より らしい。 詳細は国立天文台暦計算室ページの「暦Wiki/季節」にあって以下のような感じなんだそうな。\n分類 春 夏 秋 冬 気象学的季節 3月～5月 6月～8月 9月～11月 12月～2月 天文学的季節 春分～夏至 夏至～秋分 秋分～冬至 冬至～春分 伝統的季節 暦月区切り 正月～三月 四月～六月 七月～九月 十月～十二月 節月区切り 立春～立夏 立夏～立秋 立秋～立冬 立冬～立春 暦Wiki/季節 - 国立天文台暦計算室より 「天文学的季節」以外は昔から感覚でそう思ってはいたが「天文学的季節って春分基準なんだ」って感想。 まぁ言われてみれば「そうだろうな」って感じではある（現代の暦は春分が観測基準）。\nちなみに「伝統的季節」の「暦月区切り」はいわゆる「旧暦」のことだと思えばよい。 いわゆる「旧暦」を含む明治の改暦以前の太陰太陽暦では「冬至を含む月（朔望月）が十一月」というルールがあるため1，現行暦より1〜2ヶ月ずれるイメージ。 現行暦より「月遅れ2」だとしても今の季節感より1ヶ月くらい前に倒れてる感じだろうか。 まぁ，現在は極端気象のせいで季節感めちゃくちゃだけどね。\n「暦Wiki/季節」には更に面白いことが書いてあって「古くは四時あるいは四節と呼ばれていました」そうなのだが\n江戸時代には四季という呼び方も使われていましたが、 中根元圭は三正俗解において、春夏秋冬を四季と呼ぶのは誤りとしています。 それによれば、四季＝四時の季(すえ)＝三月(季春)・六月(季夏)・九月(季秋)・十二月(季冬)であり、他の月も四孟や四仲と分類されます。 暦Wiki/季節 - 国立天文台暦計算室より とか書かれていて，またも「へー」となった。\n季節 月 和名 別名 春 正月 睦月(むつき) 孟春、初春 二月 如月(きさらぎ) 仲春 三月 弥生(やよひ、やよい) 季春、暮春 夏 四月 卯月(うづき) 孟夏、首夏 五月 皐月(さつき) 仲夏 六月 水無月(みなづき) 季夏 秋 七月 文月(ふづき、ふみづき) 孟秋、初秋 八月 葉月(はづき) 仲秋 九月 長月(ながつき) 季秋 冬 十月 神無月(かみなづき、かんなづき) 孟冬 十一月 霜月(しもつき) 仲冬 十二月 師走(しはす、しわす) 季冬 暦Wiki/要素/1か月とは？/月の和名 - 国立天文台暦計算室より 今さら「春夏秋冬を四季と呼ぶのは誤り」と言っても誰も同意しないだろうけど（笑） 言葉は遷ろうものである。\nブックマーク 「暦」日本史 （再掲載） 『猫暦』を読んだ 冬至に関する与太話 「新暦七夕」なるものは存在しない お彼岸 第五の季節：土用 参考 天文年鑑 2025年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2024-12-05 (Release 2024-12-05) 単行本 4416723660 (ASIN), 9784416723661 (EAN), 4416723660 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 天文ファン必携。2025年版。これが届くと年末って感じ。\nreviewed by Spiegel on 2024-12-05 (powered by PA-APIv5)\n猫暦(1) (ねこぱんちコミックス) ねこしみず美濃 (著) 少年画報社 2014-10-14 (Release 2016-02-15) Kindle版 B01BHGVLOY (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「寛政の改暦」のころの伊能勘解由（忠敬）とその妻とされる「おえい」の物語。感想はこちら。\nreviewed by Spiegel on 2016-05-06 (powered by PA-APIv5)\n暦の大事典 岡田 芳朗 (編集), 神田 泰 (編集), 佐藤 次高 (編集), 高橋 正男 (編集), 古川 麒一郎 (編集), 松井 吉昭 (編集) 朝倉書店 2014-07-29 大型本 4254102372 (ASIN), 9784254102376 (EAN), 4254102372 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 古今東西の暦について網羅されている。結構なお値段だが図書館で借りて読んだ。\nreviewed by Spiegel on 2016-05-05 (powered by PA-APIv5)\n【購入者限定特典付き】カレンダー2025 KAGAYA奇跡の風景CALENDAR 天空からの贈り物（月めくり/壁掛け/「オリジナルスマホ壁紙」データ配信） (インプレスカレンダー2025) KAGAYA (写真) インプレス 2024-09-13 (Release 2024-09-13) カレンダー 4295019313 (ASIN), 9784295019312 (EAN), 4295019313 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない。美麗な天体写真で有名な KAGAYA さんの作品がカレンダーになった。つか，書籍扱いなんだな，これ。\nreviewed by Spiegel on 2024-09-15 (powered by PA-APIv5)\nサクラミラージュ ReGLOSS (メインアーティスト) cover corp. 2036-01-01 (Release 2025-03-10) MP3 ダウンロード B0DZNX5YTH (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; リリース日に mora の高解像度版を購入。この歳になってこんな買い方するとは（笑） ReGLOSS は5人の音色（おんしょく）が皆個性的で，これがカッチリ嵌ると本当に格好いい！ ヘヴィローテーション中。\nreviewed by Spiegel on 2025-03-10 (powered by PA-APIv5)\n晴る ヨルシカ (メインアーティスト) Universal Music LLC (Release 2024-01-05) MP3 ダウンロード B0CQS23YMR (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; アニメ「葬送のフリーレン」OP曲。 mora で高解像度版が買える。 YouTube の「歌ってみた」をいくつか聴いてオリジナルを買っておこうかなと。移動中にヘヴィローテーションしてる。\nreviewed by Spiegel on 2025-02-09 (powered by PA-APIv5)\n明治の改暦以前の太陰太陽暦では冬至が観測の基準になっていて，暦を決定する上でも冬至を求めることが重要なことだった。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n今の若い人は知らないかもしれないが，昔は五節句を月遅れで祝う地域もあった。盂蘭盆を8月にやるのはその名残りと言える（本来は七月中旬の行事）。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "大風のお彼岸でした",
      "section": "remark",
      "description": "大風のお彼岸でした / 開花前の桜 / 『Go言語で学ぶ並行プログラミング』の感想文記事を移動した / 生成 AI はプログラマを殺すか？",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/the-first-strong-wind-of-spring/",
      "published": "2025-03-23T12:35:54+00:00",
      "update": "2025-03-25T23:13:03+00:00",
      "content": "大風のお彼岸でした 今朝の松江の最低気温は約10℃。 日中の最高気温は19℃まであがった。 先日の春分の日から比べると10℃近く底上げされてる感じ。 「暑さ寒さも彼岸まで」というが極端やねん！\n一方，風がねぇ。 日中の最大風速が金曜日が $15\\,\\mathrm{m}/\\mathrm{s}$，土曜日が $11\\,\\mathrm{m}/\\mathrm{s}$。 今日もたぶん最大風速は $12\\,\\mathrm{m}/\\mathrm{s}$ 以上あると思う。 向かい風だと自転車が進まんし，横風だと路肩や車道の真ん中に流されそうになるので怖いっちうねん。\nそういえば「春一番」って定義が決まってるんだね。 現在の定義は\n立春から春分までの間に 初めて吹く南寄りの強い風 らしい。 で「強い風」の定義は日本国内の地域（気象台の管轄？）によって違うそうで，たとえば中国地方では\n風速は「強い」 最高気温は「高くなる」 日本海で低気圧が発達 というエラいアバウトなものらしい（笑） それでも今年の松江はこれらの条件に合致する日がなかったようだ。\n次の週末はまた寒いみたいだけど，それが過ぎればいよいよ冬服を仕舞ってもいいかなぁ\u0026hellip;\n開花前の桜 今日は珍しく1日完全オフだったので「ちょっと遠出しようかな」と一瞬思ったのだが，前節で述べたとおりの大風でして。 私の筋力・体力で遠出するのは無理だろうと判断した。\nとりあえずは温泉にゆっくり浸かって\n八雲温泉上がりのコーヒー牛乳 | Flickr さてどこ行こう，と考えて松江城の桜の木を見に行くことにした。\nというわけで，これ：\n桜（松江城 本丸） | Flickr おー。 春分の日に見たときよりふくらんでる。 これはワンチャン，月内の開花もあり得るのではないだろうか。\nホンマ，暖かいよなぁ。 今回は冬用インナーは着ず，サイクルグローブも秋冬用のものを着けて出かけたのだが全く問題なかった。 出かけるときは「朝はまだ肌寒いかも」とパーカを羽織ってたのだが，暑くて早々に脱いでスリングバッグに押し込んだ。\n『Go言語で学ぶ並行プログラミング』の感想文記事を移動した 話は大きく変わって。\n以前書いた『Go言語で学ぶ並行プログラミング』の感想文記事を「プログラミング言語 Go」セクションに移動した。 その上で第3回の読書会の感想を「プログラミング言語 Go」セクションにアップした。\nセクションを移動したのは，今回アップした記事が Go のコードだらけになって「流石に日記セクションに上げるのはなぁ」となったのと，「プログラミング言語 Go」セクションでは今まで並行処理に関する記事を割と避けてたので，読書会に便乗する形でそういった記事も上げてみてもいいのでは？ と思ったから。\n前は読書会で面白い技術トピックがあったら Zenn のほうに上げてたんだけど，今は Zenn で書く気がしない。 今の Zenn って生成 AI 関連記事だらけだし（笑） それが悪いわけではないが，私には not for me かなぁ\u0026hellip; という感じ。 いや読み専ユーザとしてはありがたく利用させてもらってますよ。\n生成 AI はプログラマを殺すか？ 第3回読書会のあとのオンライン雑談での話。\n話題の中心はやっぱり生成 AI。 まぁ，私のようなロートルエンジニアですら GitHub Copilot のお世話になってるくらいだから，若い人はもっと色々ヘヴィに使ってるに決まってるよね。\nここからは私個人の感想になるんだけど，生成 AI ってのはどこまでいっても「機械」なのよ。\n機械ってのは（人による）インプットがあって，それを処理する機構（アルゴリズム）があって，その機構を通して得られた結果を（人が）受け取る。 どれだけ「機構」が複雑になろうとも，この大構造は変わることなく，そういう意味で生成 AI はどうしようもなく「機械」と言える。 「自律的」でもないし「自立的」ですらないわけ。\nたとえばユーザが「〇〇について教えて」と言って，そこから自分で文献やネットの情報などを機械自ら探して，指示したユーザの期待以上のものを提示できるなら，もしかしたらそのうち「自立機械」になれるかもしれないけど，実際にはあらかじめ人間がかき集めた大量の情報を食わせて，それを元にした「翻案」を答えとして提示しているに過ぎない。 あらかじめ食わせる情報や吐き出される答えのチューニングは人間のお仕事なのである。\nもっと言えばユーザが質問する前から（執事のように）察して行動しアドバイスすることが出来るなら，これはもう立派な「自律機械」と言っていいかもしれない。 まぁ，生成 AI では逆立ちしても無理だろう。 もっと AI 研究が進まないと（あるいは最初から無理なのか）。\n個人的に AGI (Artificial General Intelligence) の理想はグレッグ・イーガン著作の『万物理論』に出てくる「シジフォス」なんだよな。 だから，今の生成 AI の流行を指して AGI が云々とか自律機械が云々とかいう話を聞くたびに鼻をつまんでしまう。 かつて FinTech 流行のとき Blockchain とか NFT とか言った単語を NG ワードとして SNS のフィルタリング対象にしてたことがあったが，生成 AI 絡みでもそういったことをせざるを得なくなるかもしれない。\nとはいえ，あらかじめ蓄えた情報を元に高い精度で「生成」してくれる能力はありがたいよね。 最初に述べた「雑談」でも，簡単な Java 製ツールを作るのに生成 AI に要件を提示したらほぼ完品のプログラムを返してきた，とか言ってた。 ありがたや。 でもこの話にはオチがあって，なんか1万行以上のコードが書かれたファイルひとつが返ってきて「こんなん人間はデバッグできんがな」ってなった。 デバッグも AI にやってもらわんと（笑）\n生成 AI はいい感じにコードを書いてくれるけど，それが妥当な内容か否かは人間の判断になる。 今現役のエンジニアは生成 AI が吐き出すコードを見て妥当か否か判断できるし，故に上の話もネタとして享受できるだろうが，新たにエンジニアになる人はその「判断」をどこでどうやって養えばいいのだろう。\nたとえば『Go言語で学ぶ並行プログラミング』には章ごとに演習問題があるが，読者はこれらの演習問題を生成 AI で解いてしまうかもしれない。 でも，それはただ結果を引き出してるだけで，その過程にある「学び」を得る機会は失われる。\nそういえばSF作家のコリイ・ドクトロウ氏が「「Amazonコーダーの未来」は「Amazon倉庫労働者の現在」を見ればわかる（The future of Amazon coders is the present of Amazon warehouse workers）」で面白いことを書いている（前後の文脈を切り離してるので注意）。\n「AIに支援されたプログラマー」という言葉を耳にしたなら、その都度「プログラマーに支援されたAI」と読み替えるべきだろう。 「Amazonコーダーの未来」は「Amazon倉庫労働者の現在」を見ればわかるより 主客が反転しとるがな（笑） でも「AIに支援されたプログラマー」であるためには AI より賢くないとダメだよね。 生成 AI の出力に（自らの知識・経験で以って）批判的になれないプログラマは AI の「執事」になってしまうのだろう。 経営者・資本家が「プログラマーに支援されたAI」をこそ求めるのであれば，本当に職業プログラマはいなくなってしまうのかもしれない。\n件の雑談の結果としては「プログラムのバグの原因を AI が調べて教えてくれればいいのに」だった。 並行処理の競合状態からくるバグとか，人間は分からんよね。\nおあとがよろしいようで（笑）\nブックマーク 『シンギュラリティの神話』を読む AI アシスタントはユーザをアシストしない : 生成 AI が登場する前の記事 参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nGARMIN(ガーミン)Edge Explore 2 Power サイクルコンピューター【日本正規品】 ガーミン(GARMIN) (Release 2022-09-22) スポーツ用品 B0BD7FGVR6 (ASIN), 0753759310660 (EAN), 753759310660 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Garmin 製のルート探索・ナビゲーション特化のサイコン。タッチパネル助かる。充電ポートは USB-C (not PD)。また別売りの変換ケーブルを使いモバイルバッテリからパワーマウント経由で給電することもできる。ライドタイプが「ロード」「屋内」「グラベル」の3種類しかない。 Live Segment 非対応。\nreviewed by Spiegel on 2024-08-11 (powered by PA-APIv5)\nおたふく手袋 冬用インナー 長袖 ハイネック [保温 吸汗速乾 コンプレッション メンズ] JW-170 ホワイト M おたふく手袋(Otafuku Glove) Tools \u0026amp; Hardware B005SY3LUY (ASIN), 4970687608690 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 主に通勤で使うので白を選択。ダイエットでLサイズがオーバサイズになったのでMサイズで買い直した。着ている間はそれほどの締めつけ感はないし（スポーツ用なので当たり前だが）動きを阻害しない。寒くない。自転車を漕いでいても，いい感じに汗を排出している感じ。\nreviewed by Spiegel on 2024-11-23 (powered by PA-APIv5)\nおたふく手袋 冬用インナー ロングタイツ [保温 吸汗速乾 コンプレッション メンズ] JW-162 ブラック M おたふく手袋(Otafuku Glove) Tools \u0026amp; Hardware B0044W4MYU (ASIN), 4970687608522 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 主に通勤用に使っている。着ている間はそれほどの締めつけ感はないし（スポーツ用なので当たり前だが）動きを阻害しない。寒くない。自転車を漕いでいても，いい感じに汗を排出している感じ。前とじで「社会の窓」は空いてないので注意。\nreviewed by Spiegel on 2023-11-15 (powered by PA-APIv5)\n[クローム] ボディバッグ KADET BXRF_BLACK XRF (現行モデル) カデット マックス ブラック エックス リフレクティブ 15L リフレクター 防水 CHROME ウェア\u0026amp;シューズ B0BQQMVWBB (ASIN), 0841916176775 (EAN), 841916176775 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 使い勝手についてはこの動画を参照のこと。たくさんの内ポケットで仕切られているのがいい。容量は15Lで，16インチノートPCが入る。取っ手も付いていて仕事でも使えそう。3点ストラップ。防水仕様。オモテ面は光を反射しやすい素材を使っていて，夜間でもクルマから視認しやすい（らしい）。\nreviewed by Spiegel on 2024-09-08 (powered by PA-APIv5)\nGo言語で学ぶ並行プログラミング　他言語にも適用できる原則とベストプラクティス impress top gearシリーズ James Cutajar (著), 柴田 芳樹 (著) インプレス 2024-12-04 (Release 2024-12-04) Kindle版 B0DNYMMBBQ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 読書会のために購入。インプレス社の本は Kindle 版より版元で PDF 版を買うのがオススメ。「並行処理」について原理的な解説から丁寧に書かれている。 Go で解説されているが Go 以外の言語でも応用できる。 reviewed by Spiegel on 2025-01-25 (powered by PA-APIv5)\n万物理論 (創元SF文庫) グレッグ・イーガン (著), 山岸 真 (翻訳) 東京創元社 2004-10-28 文庫 4488711022 (ASIN), 9784488711023 (EAN), 4488711022 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; グレッグ・イーガンの名作。これも singularity を巡る物語だな。\nreviewed by Spiegel on 2017-09-18 (powered by PA-APIv5)\n社会は情報化の夢を見る (河出文庫) 佐藤俊樹 (著) 河出書房新社 2010-09-03 (Release 2016-07-29) Kindle版 B01J1I8PRQ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 1996年に出版された『ノイマンの夢・近代の欲望―情報化社会を解体する』の改訂新装版。しかし内容はこれまでと変わりなく，繰り返し語られる技術決定論を前提とする安易な未来予測を「情報化」社会論だとして批判する。\nreviewed by Spiegel on 2015-09-15 (powered by PA-APIv5)\nサクラミラージュ ReGLOSS (メインアーティスト) cover corp. 2036-01-01 (Release 2025-03-10) MP3 ダウンロード B0DZNX5YTH (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; リリース日に mora の高解像度版を購入。この歳になってこんな買い方するとは（笑） ReGLOSS は5人の音色（おんしょく）が皆個性的で，これがカッチリ嵌ると本当に格好いい！ ヘヴィローテーション中。\nreviewed by Spiegel on 2025-03-10 (powered by PA-APIv5)\n晴る ヨルシカ (メインアーティスト) Universal Music LLC (Release 2024-01-05) MP3 ダウンロード B0CQS23YMR (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; アニメ「葬送のフリーレン」OP曲。 mora で高解像度版が買える。 YouTube の「歌ってみた」をいくつか聴いてオリジナルを買っておこうかなと。移動中にヘヴィローテーションしてる。\nreviewed by Spiegel on 2025-02-09 (powered by PA-APIv5)\nGOLDEN☆BEST キャンディーズ コンプリート・シングルコレクション キャンディーズ (メインアーティスト) Sony Music Direct(Japan)Inc. 2011-06-08 (Release 2015-11-04) MP3 ダウンロード B01721ECA8 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 今さら昭和時代のアイドルを美化するつもりはないけれど，あのとき（生物年齢的にも）子供だった私にとって彼女らは間違いなく憧れのアイドルだったのですよ。\nreviewed by Spiegel on 2019-04-29 (powered by PA-APIv5)\n"
    },
    {
      "title": "条件変数とセマフォ（『Go言語で学ぶ並行プログラミング』読書会3回目）",
      "section": "golang",
      "description": "条件変数 / 書き込み優先な RWMutex / セマフォ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/learn-concurrent-programming-with-go-3/",
      "published": "2025-03-22T14:49:15+00:00",
      "update": "2025-03-23T12:36:08+00:00",
      "content": "「第3回『Go言語で学ぶ並行プログラミング』オンライン読書会」の話題より。 ちなみに第2回は記事にしていない。 あしからず。\n条件変数 条件変数（condition variable）は，ミューテックス（mutex）と組み合わせて，並行処理を特定の条件が発生するまで待たせたいときに使う。\nGo では標準パッケージの sync.Cond 型で提供されている。 こんな感じで使う。\ncond := sync.NewCond(\u0026amp;sync.Mutex{}) ちなみに Java では\nfinal Lock lock = new ReentrantLock(); final Condition condLock = lock.newCondition(); みたいな感じにミューテックス・インスタンスから生成する。 おそらく言語やライブラリやフレームワークによって色々あるだろう。\nそれはさておき『Go言語で学ぶ並行プログラミング』に出ていた例題は\nStingy と Spendy の２人の登場人物（goroutine） ２人は共通の銀行口座を持っていて現在100ドルの残高がある Stingy は毎回10ドルずつ100万回入金する Spendy は毎回50ドルずつ20万回出金する 銀行口座の残高をマイナスにしてはいけない（← ここが条件変数の条件） という要件で入出金の様子をコードで書くというもの。 過程をすっ飛ばして最終形を挙げておく。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; ) func main() { money := 100 mutex := sync.Mutex{} cond := sync.NewCond(\u0026amp;mutex) go stingy(\u0026amp;money, cond) go spendy(\u0026amp;money, cond) time.Sleep(2 * time.Second) mutex.Lock() fmt.Println(\u0026#34;Money in bank account: \u0026#34;, money) mutex.Unlock() } func stingy(money *int, cond *sync.Cond) { for i := 0; i \u0026lt; 1000000; i++ { cond.L.Lock() *money += 10 cond.Signal() cond.L.Unlock() } fmt.Println(\u0026#34;Stingy Done\u0026#34;) } func spendy(money *int, cond *sync.Cond) { for i := 0; i \u0026lt; 200000; i++ { cond.L.Lock() for *money \u0026lt; 50 { cond.Wait() } *money -= 50 if *money \u0026lt; 0 { fmt.Println(\u0026#34;Money is negative!\u0026#34;) os.Exit(1) } cond.L.Unlock() } fmt.Println(\u0026#34;Spendy Done\u0026#34;) } 『Go言語で学ぶ並行プログラミング』第5章より spendy() 関数内 cond.Wait() の動作は分かりにくいかもしれないが，内部ではミューテックスを解放して待ち状態に入っている。 その後 Signal() を受け取ったらミューテックスを再取得して続きの処理を再開する。 ここで *money \u0026lt; 50 の条件に合致すればループを抜けて出金操作を行うわけだ（合致しなければ再び Wait()）。\nこのコードの注意点は2つ。 ひとつは Signal() や Wait() の前後は必ず Lock() ... Unlock() で囲っておくこと。 もうひとつは Wait() 付近で条件を記述する際は if 文ではなく for 文でループを構成すること。 後者はわかりやすいよね。 前者は，たとえば以下のようなコードがあって\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) /* Note: this program has a bug for demonstration purposes We demonstrate how to fix this problem in the next listing */ func doWork(cond *sync.Cond) { fmt.Println(\u0026#34;Work started\u0026#34;) fmt.Println(\u0026#34;Work finished\u0026#34;) cond.Signal() } func main() { cond := sync.NewCond(\u0026amp;sync.Mutex{}) cond.L.Lock() for i := 0; i \u0026lt; 50000; i++ { go doWork(cond) fmt.Println(\u0026#34;Waiting for child goroutine\u0026#34;) cond.Wait() fmt.Println(\u0026#34;Child goroutine finished\u0026#34;) } cond.L.Unlock() } 『Go言語で学ぶ並行プログラミング』第5章より これを実行すると大抵は（Wait() で受ける相手が起動する前に Signal() を投げちゃうので）デッドロック状態になるのだが1，状態によっては上手く動いてしまうことがあるのよ。 動いたり動かなかったりするってのが一番厄介。\nちなみに Java の条件変数の場合は，ロックをせずにシグナルを投げようとすると例外が発生するらしい。\nそういえばシグナルを投げるメソッドには Broadcast() もあり，こちらは Wait() で一時停止している全ての goroutine が起こされる。 Signal() と Broadcast() のどちらを使うかは状況によると思うが，読書会主催の柴田芳樹さんは対象の goroutine のうちどれが起きるのか明確に分からない場合は（ひとつだけ起こしたい場合でも）なるべく Signal() ではなく Broadcast() を使うべきだと言っておられた。 Wait() で待ち状態になっている側も，どういうタイミングで起こされるか分からないので，起こされたら必ず条件判定を行って条件に合致しなければ再び Wait() するという処理が必要になる。 だからループを構成するんだねぇ。\n書き込み優先な RWMutex Go では，共有資源に対して\n書き込みを行うスレッド（goroutine）はひとつだけ 読み込み専用スレッドは複数ある 場合に読み込み側と書き込み側で優先度の異なるロックをかける sync.RWMutex 型ってのがある。 『Go言語で学ぶ並行プログラミング』の第4章では，標準の sync.RWMutex を使わずリーダー・ライター・ミューテックスを自作している。\nただし第4章で作ったのは読み込み優先の実装だったので，読み込み側が次々とロックを取ってしまうと，いつまで経っても書き込み側がロックを取れない事態になる2。 この場合はデッドロックにもならないので，これはこれで厄介である。 これを解消するためには書き込み側を優先するロックにする必要がある。 第5章では，条件変数を用いて，自作リーダー・ライター・ミューテックスを書き込み優先に修正するくだりがある。\n『Go言語で学ぶ並行プログラミング』は比較的簡単なサンプルコードで仕組みを紹介しているのがとてもいいと思う。\nちなみに標準の sync.RWMutex は書き込み優先である。\nIf any goroutine calls RWMutex.Lock while the lock is already held by one or more readers, concurrent calls to RWMutex.RLock will block until the writer has acquired (and released) the lock, to ensure that the lock eventually becomes available to the writer. Note that this prohibits recursive read-locking. A RWMutex.RLock cannot be upgraded into a RWMutex.Lock, nor can a RWMutex.Lock be downgraded into a RWMutex.RLock. だから第4章では標準の sync.RWMutex を使わなかったんだねぇ。 ここで繋がったよ（笑）\nセマフォ セマフォ（semaphore）は並行処理の同時実行数を制御する仕組みである。 たとえば計算資源をフルに使わせたくない場合に，ある時点の並行処理の同時実行数を（おそらくプロセッサ数以下に）抑える目的で使ったりする。\n『Go言語で学ぶ並行プログラミング』では条件変数を使ってセマフォを自作している。 一方 Go の標準パッケージにセマフォはないが golang.org/x/sync/semaphore パッケージを使うことでセマフォを扱うことができる。 こちらはほぼ標準パッケージに近いのでバンバン使っていいだろう。\nこの記事では golang.org/x/sync/semaphore パッケージに載っているサンプルコードを挙げておく。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;runtime\u0026#34; \u0026#34;golang.org/x/sync/semaphore\u0026#34; ) // Example_workerPool demonstrates how to use a semaphore to limit the number of // goroutines working on parallel tasks. // // This use of a semaphore mimics a typical “worker pool” pattern, but without // the need to explicitly shut down idle workers when the work is done. func main() { ctx := context.TODO() var ( maxWorkers = runtime.GOMAXPROCS(0) sem = semaphore.NewWeighted(int64(maxWorkers)) out = make([]int, 32) ) // Compute the output using up to maxWorkers goroutines at a time. for i := range out { // When maxWorkers goroutines are in flight, Acquire blocks until one of the // workers finishes. if err := sem.Acquire(ctx, 1); err != nil { log.Printf(\u0026#34;Failed to acquire semaphore: %v\u0026#34;, err) break } go func(i int) { defer sem.Release(1) out[i] = collatzSteps(i + 1) }(i) } // Acquire all of the tokens to wait for any remaining workers to finish. // // If you are already waiting for the workers by some other means (such as an // errgroup.Group), you can omit this final Acquire call. if err := sem.Acquire(ctx, int64(maxWorkers)); err != nil { log.Printf(\u0026#34;Failed to acquire semaphore: %v\u0026#34;, err) } fmt.Println(out) } // collatzSteps computes the number of steps to reach 1 under the Collatz // conjecture. (See https://en.wikipedia.org/wiki/Collatz_conjecture.) func collatzSteps(n int) (steps int) { if n \u0026lt;= 0 { panic(\u0026#34;nonpositive input\u0026#34;) } for ; n \u0026gt; 1; steps++ { if steps \u0026lt; 0 { panic(\u0026#34;too many steps\u0026#34;) } if n%2 == 0 { n /= 2 continue } const maxInt = int(^uint(0) \u0026gt;\u0026gt; 1) if n \u0026gt; (maxInt-1)/3 { panic(\u0026#34;overflow\u0026#34;) } n = 3*n + 1 } return steps } via semaphore package - golang.org/x/sync/semaphore - Go Packages コラッツ予想？ このサンプルでは，メイン以外の goroutine の間では共有資源の異なるアドレスにアクセスするためデータ競合（data race）は起きないことに注意。 データ競合が発生し得るのであればミューテックスを使ってアクセス制御を行う必要がある。\ngolang.org/x/sync/semaphore パッケージで実装されているセマフォは「重み付きセマフォ（weighted semaphore）」と呼ぶらしい。 Acquire() および Release() で獲得数・解放数を指定できる。 上のサンプルコードでは最後の sem.Acquire(ctx, int64(maxWorkers)) でメイン以外の goroutine が稼働していないことを確認している（稼働していれば待ちになる）。 なお Release() 時にカウントがマイナスになると panic を吐くようだ。\n今回はここまで 次回は第6章の「バリア（barrier）」の話からである。 楽しみ！\nブックマーク cutajarj/ConcurrentProgrammingWithGo: Listings from manning book : 『Go言語で学ぶ並行プログラミング』に出てくるサンプルコード 参考図書 Go言語で学ぶ並行プログラミング　他言語にも適用できる原則とベストプラクティス impress top gearシリーズ James Cutajar (著), 柴田 芳樹 (著) インプレス 2024-12-04 (Release 2024-12-04) Kindle版 B0DNYMMBBQ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 読書会のために購入。インプレス社の本は Kindle 版より版元で PDF 版を買うのがオススメ。「並行処理」について原理的な解説から丁寧に書かれている。 Go で解説されているが Go 以外の言語でも応用できる。 reviewed by Spiegel on 2025-01-25 (powered by PA-APIv5)\nGo言語 100Tips ありがちなミスを把握し、実装を最適化する impress top gearシリーズ Teiva Harsanyi (著), 柴田 芳樹 (著) インプレス 2023-08-18 (Release 2023-08-18) Kindle版 B0CFL1DK8Q (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元で PDF 版を購入可能。事実上の Effective Go とも言える充実の内容。オリジナルは敢えてタイトルに “tips” という単語を入れるのを避けたのに邦題が「100 Tips」とかなっていて，原作者がお怒りとの噂（あくまで噂）\nreviewed by Spiegel on 2023-08-18 (powered by PA-APIv5)\nGo言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Eブック版もある。感想はこちら。 Go 言語で並行処理を書くならこの本は必読書になるだろう。\nreviewed by Spiegel on 2020-01-13 (powered by PA-APIv5)\nプログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。と思ったら絶版状態らしい（2025-01 現在）。復刊を望む！\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\nGo ではメインを含む全ての goroutine が待機状態になって（タイマーやシグナル等で）起こされる見込みがない状態を検出するとデッドロック（deadlock）と見なして panic を投げる。だから Go の並行処理ではデッドロックは検出しやすく，それゆえにデバッグも（比較的）しやすい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nリーダー・ライター・ミューテックスで書き込み側がいつまでもロックを獲得できない状態を writer-starvation と呼ぶ。『Go言語で学ぶ並行プログラミング』における “starvation” の定義は「他の貪欲な実行によって資源が長時間（または無期限に）利用できなくなり、共有資源へのアクセスを得ることができない状況を指します」としている。書き込み側が starvation になるから writer-starvation ということらしい。辞書的な “starvation” の意味は「食糧の不足によって栄養失調が続き、体調の維持が困難になっている状態」みたいな意味だそうな。継続的な飢餓状態ってことやね。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "お彼岸の中日（お散歩カメラ 2025-03-20）",
      "section": "remark",
      "description": "墓参り / 玉湯川下り / 松江城観察 / 春分の日の夕日",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/20-osanpo-camera/",
      "published": "2025-03-20T12:54:05+00:00",
      "update": "2025-03-20T12:54:13+00:00",
      "content": "今朝の松江の最低気温は0℃ちょうど。 最高気温は12℃でちょっと暖かかったように見えるが，実は風が冷たくてねぇ。 インナーグローブ付けてきてよかったよ。\n今日は春分の日。 現在の定義では「太陽黄経が0°になる瞬間を含む日」である。 そして春分・秋分の日を挟む前後3日が「お彼岸」となる。\nvia Explanation about a celestial sphere in Japanese そうそう。 国立天文台が春分の日に合わせてこんな記事を出していた。\n春の初めは暦の要―春分と天文学 | 国立天文台(NAOJ) 参考にどうぞ。 この記事では言及されてないが，春分の日が彼岸の中日になったのは天保暦以降らしい。 歴史的には最近（近代以降）ってわけじゃないけど，それほど大昔でもないって感じかな。 面白いよね。\n墓参り さて，お彼岸なので実家に帰って拝んできた。 親父殿，久しぶり！\nお彼岸 | Flickr あっ，うちは位牌じゃなくて過去帖っス。 墓参りのついでに本家の梅を眺める。\n白梅 | Flickr ついでに実家のわんこ。\n黒柴 よし君 | Flickr 私のバッグのストラップをガジガジしてるところ。 甘噛みなので傷は付いてない。 賢い子である。 滅多に実家に帰らないせいか私にはあまり懐いてくれない。 今日も匂いを嗅ぎまくられた（笑）\nさて，出かけるか。\n玉湯川下り まずは玉造温泉方面へ。 途中，才の神遺跡にも寄ってみた1。\n布志名 才ノ神遺跡 | Flickr なんか缶が突っ込まれてるので「空き缶なんかいれんなよ」と思ったのだが，ちょっと違う？ ひょっとしてお賽銭とか入れるのだろうか。 しないけど。\n玉造温泉の玉湯川沿いには桜の木がたくさん植えられているのだが，まだ蕾は硬い感じ。 なので上向きの景色は諦めて玉湯川を眺めつつ宍道湖へ。\n今日のバードウォッチング（玉湯川） | Flickr 魚影（玉湯川） | Flickr 今日の宍道湖（玉湯川 河口） | Flickr 水量の割に水が綺麗なんだよな。 雪解け水？\n次は，市内へ行くか。\n松江城観察 昼食のためにJR松江駅に寄って，その後は松江城へ。\n白梅（松江城 二の丸） | Flickr 蕾は固い（松江城 本丸） | Flickr 今日の松江城 | Flickr 梅はいい感じに咲いてるけど桜の蕾は固い。 来週末からお城まつりが始まるのだが，桜が間に合うのか微妙？ 松江の開花予想が4月上旬とかなってるんだよなぁ。\n春分の日の夕日 島根県立図書館で少し休憩した後，ちょっと思いついて宍道湖の夕日を撮ってみることにした。 天気もいいし。\nいや，子供の頃言われなかった？ お彼岸の夕日は真西に沈むから夕日に向かって拝みなさいって。 いや日本の真西にインド（ネパール？）はないけどね（笑） えっ？ 今はそんなこと言わない？ そりゃすまん。\n宍道湖を眺めつつ，まだ時間が早かったので喫茶店まで移動。\n今日の宍道湖（袖師地蔵） | Flickr 休憩中（シロノワール ティラミスプリン） | Flickr いい時間になったので宍道湖まで戻る。\n今日の宍道湖（春分の日の夕景） | Flickr あいにく低空に雲があって日没は拝めそうにないが夕日は堪能できた。 ではどうぞ。\n春分の日（宍道湖） | Flickr 春分の日（宍道湖） | Flickr 春分の日（宍道湖） | Flickr お楽しみいただけましたか？ ほんじゃあ帰るか。\nブックマーク APOD: 2025 March 20 - The Solar Eclipse Analemma Project 参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nおたふく手袋 冬用蓄熱インナーグローブ[軽防寒 タッチパネル対応 蓄熱手袋]JW-145 ブラック Mサイズ おたふく手袋(Otafuku Glove) ウェア\u0026amp;シューズ B0CDPH5W49 (ASIN), 4970687291922 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; サイクルグローブの下に着けるインナーグローブとして購入。単独でも（吹きっさらしでなければ）まぁまぁ温かい。薄手なので着けたまま細かい作業が可能。スマホ操作も問題なし。\nreviewed by Spiegel on 2024-12-15 (powered by PA-APIv5)\nおたふく手袋 冬用防寒手袋 [背面防風 スベリ止め 反射テープ タッチパネル] JW-142 ブラック L おたふく手袋(Otafuku Glove) ウェア\u0026amp;シューズ B08KHW2PSB (ASIN), 4970687291687 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 手の甲側が防風加工されているのはいいのだが，自転車に乗るときはブレーキに手を添えているので，指先は全部防風してくれないかなぁ。インナーグローブと組み合わせれば0℃以上ならなんとか凌げる。氷点下ではたぶん無理。柔らかくて指が動かしやすいのはよい。\nreviewed by Spiegel on 2024-12-19 (powered by PA-APIv5)\n[クローム] ボディバッグ KADET BXRF_BLACK XRF (現行モデル) カデット マックス ブラック エックス リフレクティブ 15L リフレクター 防水 CHROME ウェア\u0026amp;シューズ B0BQQMVWBB (ASIN), 0841916176775 (EAN), 841916176775 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 使い勝手についてはこの動画を参照のこと。たくさんの内ポケットで仕切られているのがいい。容量は15Lで，16インチノートPCが入る。取っ手も付いていて仕事でも使えそう。3点ストラップ。防水仕様。オモテ面は光を反射しやすい素材を使っていて，夜間でもクルマから視認しやすい（らしい）。\nreviewed by Spiegel on 2024-09-08 (powered by PA-APIv5)\nフィーリングラデーション ReGLOSS (メインアーティスト) cover corp. 2024-09-11 (Release 2024-09-11) MP3 ダウンロード B0DGG9JKM4 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; mora で高解像度版が買える。MV見て衝動買い。移動中に聴くと楽しいノリのいい曲。玲瓏（リンロン）と響く “ReSTART LINE!!” の歌詞部分がお気に入り。\nreviewed by Spiegel on 2024-09-16 (powered by PA-APIv5)\nサクラミラージュ ReGLOSS (メインアーティスト) cover corp. 2036-01-01 (Release 2025-03-10) MP3 ダウンロード B0DZNX5YTH (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; リリース日に mora の高解像度版を購入。この歳になってこんな買い方するとは（笑） ReGLOSS は5人の音色（おんしょく）が皆個性的で，これがカッチリ嵌ると本当に格好いい！ ヘヴィローテーション中。\nreviewed by Spiegel on 2025-03-10 (powered by PA-APIv5)\n作業中の BGV (メン限配信以外) 【雑談】EXPO\u0026amp;fes.ありがとうございました！雑談！！【儒烏風亭らでん #ReGLOSS 】 - YouTube 【 雑談 】横浜に行ってきました～！【音乃瀬奏・ときのそら・儒烏風亭らでん】#hololiveDEV_IS #ReGLOSS - YouTube 【歌枠】本日は静かな歌枠です #鏡見みら - YouTube 【お歌】春っぽい曲と言いながら好きな曲を歌うことになる枠【古代日本史VTuber きら子】 - YouTube 【 歌雑談 】ゆるっと歌ったり喋ったり【どっとライブ / #カルロピノ 】 - YouTube 【感動再び】感謝のEXPO・fes. 振り返り！映像も見せちゃいます。【#hololivefesEXPO25】 - YouTube 【歌枠】新しく覚えた曲とか歌うぞ～【虎金妃笑虎】 - YouTube 布志名の才の神遺跡については，次のページにあるドキュメントが参考になる： 「布志名大谷1遺跡・布志名大谷2遺跡・布志名才の神遺跡 - 全国遺跡報告総覧」\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "「出雲神話フォーラム2025」へ行ってきた",
      "section": "remark",
      "description": "めっさ面白かった。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/izumo-myth-forum-2025/",
      "published": "2025-03-16T14:13:52+00:00",
      "update": "2025-03-19T11:31:37+00:00",
      "content": "今日はお出かけ予定日なのだが，昨日から雨模様。\nそれはいいのだが，今日は「まつえレディースハーフマラソン」があるのをすっかり忘れていて，バス停の貼り紙で思い出した。 午前中の路線バスは運休なんだった orz しょうがない。 徒歩で行くか。 今日のスポーツアクティビティはウォーキング10K歩以上で。\nしかし，雨で気温も低いのにマラソンやるのか。 アスリートって大変だな1。\n松江市内徒歩遊覧 宍道湖畔へ寄り道しつつ\n今日の宍道湖（雨天） | Flickr 用事を済ませながらJR松江駅まで行ったのだが，この時点で12時だった。 しまった。 昼飯を食う暇がない（久しぶりに一福で蕎麦が食べたかったのに）。 しょうがないので駅前のコンビニで BLT サンドイッチを買って島根県立美術館までてくてく歩く。\n「出雲神話フォーラム2025」へ行こう そう。 今日は県立美術館のホールで「出雲神話フォーラム2025」ちうのがあるのですよ。 先月，日付を間違えたアレっす。\n「出雲神話フォーラム2025」行ってきた | Flickr そんなこんなで県立美術館に到着。\n島根県立美術館（と宍道湖） | Flickr 入場時間まで15分ほど余裕があったので急いで BLT サンドを詰め込んで時間まで Mastodon/Bluesky をチェックしておく。\n時間になったので手続きして入場する。 つか，県立美術館ってホールがあるんだねぇ。 展示室しか入ったことがないので知らんかったよ。 シートはゆったりしていて折りたたみ式の簡易テーブルが付いてる。 助かる！ 松江テルサのホールのシートはテーブルがないので膝の上にノートを広げざるを得ず，不便だったのを思い出す。\n「出雲神話フォーラム2025」は二部構成になっていて\n第1部 「アートで表現する稲田姫」（島根県立大学 松江キャンパス 地域文化学科 山村ゼミ発表） 創作石見神楽「稲田姫」上演（温泉津舞子連中） 第2部 ドキュメンタリー映画上映「永遠を建てる―出雲大社カミとヒトの風景へ」 パネルディスカッション「出雲が生み出したもの―文学、建築、アート、写真、芸能」 という内容。 以下にひとつずつ紹介してみる。\n「アートで表現する稲田姫」 予防線を張っておくと，私の「古代出雲」に対する関心領域は考古学または歴史学に偏っていて「出雲神話」を記紀ベースで語られると「けっ」という感じにやさぐれてしまう狭量な人間である（出雲神話を語るなら風土記ベースだろが）。 でも芸能・建築・美術の領域から見た「出雲神話」はどう評価されるんだろうとちょっと期待していた。\n実は「出雲神話フォーラム」自体は今年で4回目の開催なんだそうで，島根県立大学による発表も今回で3回目なんだそうだ。 以前にどんな発表をされたのか知らないが，今回は「稲田姫（クシナダヒメ）」がテーマ2。\n「稲田姫」のイメージは古代・中近世・近現代の3つに分かれるそうで\n古代： 稲田姫はスサノオ神に守られる存在。ヤマタノオロチ退治では櫛に変化してスサノオ神の髪に挿される 中近世： スサノオ神によるヤマタノオロチ退治では後方支援をしているらしい？ 経典（法華経？）を持った絵が多くある 江戸時代の歌舞伎では稲田姫はヤマタノオロチに飲み込まれるが，持ってた短刀で腹を裂いて自ら脱出する。その際に大蛇の腹から剣（十拳剣）を持ち帰り，それを使ってスサノオ神がオロチを退治する 近現代： 稲田姫をメインにした（または稲田姫のみを描いた）絵画が増える。極めつけは荒川亀斎が1893年のシカゴ万博に出品した稲田姫の像で，剣を持ってるそうな。これ以降剣をもつ稲田姫の像や絵画がたくさん作られたらしい こうしたイメージの変遷を踏まえて次の「創作石見神楽『稲田姫』」の上演につながる。\n創作石見神楽「稲田姫」上演 「創作石見神楽『稲田姫』」のあらすじはザっとこんな感じ（かなり端折ってるのはご容赦）：\n稲田姫は出雲の稲原1 に住まう国つ神で7人の姉とともに稲田を守っている。\nある日，7人の姉がいない隙に山川・田を枯らす厄神である「鬼」が顕れる。稲田姫は鬼と立ち回りを演じ最終的に剣を用いてこれを退ける。\n稲田姫は鬼を退治した剣を「宇迦の剣」と名付け土地の守りとし，自らも稲原の守り神となる。\n稲原は稲田神社がある土地。今回の創作神楽では稲田神社がある稲原の方々に取材したそうな。稲田神社に祀られている「稲田大明神」は地元の人にとっては女性的なイメージが薄いそうで「剣を持った稲田姫」への違和感もあまりないらしい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nお気付きだろうか。 この神楽にはスサノオ神もヤマタノオロチも出てこないのだ。 面白い！！ しかも神楽に出てくる「鬼」は剣によって弱らされるが，殺されることなく退散する3。 つまりこの剣は（岩をも割く剣でありながら）「不殺（ころさず）の剣」なのである。\nちなみに稲田姫の演者は男性でお面を被っているが，これがいわゆる小面（若い女性を意味する能面）によく似た意匠なのである（意図的らしい）。 これを見て「儒烏風亭らでん」を連想して吹きそうになった私は悪くない（多分）。\nあと連想したのは「セーラームーン」とか「プリキュア」かな。 敵を殺さず，悪意・害意のみを滅する美少女戦士って感じ（笑） 内容はめっさ「いまどき」で面白かった。 でもガチの神楽なのよ。\nその後10分の休憩の挟んで第2部へ。\nドキュメンタリー映画上映「永遠を建てる―出雲大社カミとヒトの風景へ」 次は30分程のドキュメンタリー映画，出雲大社の神職の方へのインタビューを中心に構成されている。 これに遷宮の話や2000年に発見された「柱」の話が絡むわけだ。\nこの映画は後日東京大学のサイトで公開されるとのことだったが，既に YouTube で公開されてるな。\nBuilding Eternity: The Kami-Human Landscape of Izumo Taisha 永遠を建てる—出雲大社カミとヒトの風景へ - YouTube この内容が全て。 是非ご覧あれ。\nパネルディスカッション「出雲が生み出したもの―文学、建築、アート、写真、芸能」 パネラーは以下の通り：\n平藤喜久子（國學院大學教授） 港千尋（多摩美術大学教授、写真家） Alan Cummings（ロンドン大学准教授） Kio Griffith（Visual Sound Artist） 大杉浩司（岡本太郎記念館客員研究員、キュレーター） 小泉凡（小泉八雲記念館館長） 以下，覚えてる範囲で箇条書き：\nパネラーの小泉凡さんは小泉八雲（ラフカディオ・ハーン）直系の曾孫だそうで，「凡」の名前は仏教関係の絡みかと思ったが，彼の祖父（小泉一雄）と親交があったボナー・フェラーズからとったものらしい。会場がちょっとウケてた 小泉八雲は当時の千家家の当主と深い親交があり「神道」を体感している。それを元にした著作を読んだのがボナー・フェラーズ（マッカーサーも小泉八雲の著作を読んだらしい）。戦後処理の過程で昭和天皇が処刑されることなく「象徴天皇」に収まったのには小泉八雲の著作の影響もあるのでは？ との見解 建物から作られる神話と神話から作られる建物がある。出雲大社は後者。前者の例としてはバベルの塔やクレタ島の迷宮など via File:Pieter Bruegel the Elder - The Tower of Babel (Vienna) - Google Art Project.jpg - Wikimedia Commons 日本の神話は「神同士の約束」の物語。出雲大社も「国譲り」神話の約束によって建てられ守られている 出雲大社等の建築に見られるように「有限の存在を無限に繋げる」というのはアートの本質 岡本太郎は出雲大社を「野蛮な凄み、迫力」と評している。これは彼の最大級の賛辞らしい 日本で（仏様ではなく）神様の絵が盛んに描かれるようになったのは江戸時代あたりから。当時としてはポップな絵で描かれていて（絵画で神様で遊ばせる），そこから神話が庶民に浸透していく 神様は遊んでいる，という考え方 ヤマタノオロチのイメージは江戸時代に入ってからのもの 近年「怪談」アートが海外の若者に人気←ポケモンの影響？ （鬼滅はどうなんだろう？） Alan Cummings さんによると，東アジアの神話コースを作ったら受講者が殺到（100人くらい）したらしい 「妖怪」の絵は江戸時代から見られるが「怪談」のアートを見るようになったのは最近？ 第1部で稲田姫を生成 AI で描かせてみたが上手くいかず，最終的に農家の娘みたいな絵になった AI は見たことのないものを描くのは苦手？ 見たことがないものをどう描くかがアート（妄想？）→ 神話的な行い 描かずにはいられない。作らないと後悔する 岡本太郎は絵画に関しては「描かずにはいられない」タイプだったらしい。一方で彫刻等については頼まれて造ることが多い 「太陽の塔」の依頼が来たとき，周りはみんな依頼を受けることを反対したそうだが，そのことで逆に創作意欲を掻き立てられたらしい（笑） 近年流行りの「前世」や「生まれ変わり」の物語と神話との関係 1996年から若者に対するアンケートで「生まれ変わりを信じるか」という質問があったが，6割が「生まれ変わりはある」「あり得る」と答えたらしい。今もそう変わらないのではないか オウム真理教の事件を受けてのアンケート 「前世」や「生まれ変わり」が登場するのは1970年代後半〜1980年代 幻魔大戦 僕の地球を守って オカルトブーム 生まれ変わりではないが「変身」をテーマにした神話や物語は多い。江戸時代の歌舞伎でも「やつし」ものと呼ばれる変身の物語がある。変身願望や生まれ変わり願望が流行る背景は時代によって色々あるだろうが，それ自体は昔からある これからは「スサノオ神」や「ヤマタノオロチ」の時代ではなく「稲田姫」や「小泉セツ」の時代 今日の創作神楽は象徴的 9月からの「ばけばけ」をよろしく て感じかな。 （一部「神話」や「アート」じゃないのも混じってるけど）色々な話が出て面白かった。 だいぶ端折ってるけど。\nさぁ帰ろう 当初は16時半までの予定だったが，時間を延長して終わったのが17時ごろだった。 路線バスの運行は回復してると思うが，30分くらい待たないといけない。 ちょっと考えて歩いて帰ることにした。\n宍道湖畔でバード・ウォッチングしながら帰宅。\n今日のバードウォッチング（宍道湖） | Flickr ちなみに今日は16K歩ほど歩いた。 目標はクリア（笑）\n明日は楽しい月曜日！\nブックマーク 「永遠を建てる—出雲大社カミとヒトの風景へ」上映会・アフタートーク「古代バビロニアから出雲へ—永遠を目指す神殿—」 - YouTube : 2025-01 に東京大学での上映会の様子 参考図書 古代出雲の氏族と社会 (47) (同成社古代史選書 47) 武廣 亮平 (著) 同成社 2024-03-11 単行本 4886219454 (ASIN), 9784886219459 (EAN), 4886219454 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「島根の歴史文化講座 2024」で講師をされた武廣亮平さんの著作。興味本位で買うには躊躇するお値段だし地元の県立図書館でも借りれるが，じっくり読みたいので買ってみた。著者の過去の論文を再構成した内容。記紀などの史料や過去の研究者の膨大な文献を整理した上で古代出雲についての考察を行う。\nreviewed by Spiegel on 2024-11-26 (powered by PA-APIv5)\n古事記物語 鈴木 三重吉 (著) 2012-10-01 (Release 2012-10-01) Kindle版 B009KSG2Q4 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 青空文庫で読める。物語として面白い部分は詳細に書かれているが，結構省かれている部分もあって「読み物」という感じ。\nreviewed by Spiegel on 2025-03-16 (powered by PA-APIv5)\n神道入門 日本人にとって神とは何か (平凡社新書) 井上 順孝 (著) 平凡社 2006-01-12 (Release 2013-08-01) Kindle版 B00EUVZHX0 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版登場。日本の神道の系譜が網羅的に書かれている。\nreviewed by Spiegel on 2015-03-22 (powered by PA-APIv5)\n怪談・骨董 (河出文庫) 小泉八雲 (著), 平川祐弘 (翻訳) 河出書房新社 2024-02-06 (Release 2024-04-26) Kindle版 B0CWB6NHLW (ASIN) 2024年は小泉八雲没後120周年らしいので，試しに買ってみた。\nreviewed by Spiegel on 2024-08-31 (powered by PA-APIv5)\n神様のお仕事　３ (講談社ラノベ文庫) 幹 (著), 蜜桃まむ (イラスト) 講談社 2013-11-01 (Release 2013-12-20) Kindle版 B00HCB8098 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 和風ファンタジー仕立てのラブコメ第3巻。お祭り回。\nreviewed by Spiegel on 2014-01-08 (powered by PA-APIv5)\nサクラミラージュ ReGLOSS (メインアーティスト) cover corp. 2036-01-01 (Release 2025-03-10) MP3 ダウンロード B0DZNX5YTH (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; リリース日に mora の高解像度版を購入。この歳になってこんな買い方するとは（笑） ReGLOSS は5人の音色（おんしょく）が皆個性的で，これがカッチリ嵌ると本当に格好いい！ ヘヴィローテーション中。\nreviewed by Spiegel on 2025-03-10 (powered by PA-APIv5)\n【朗読】鈴木三重吉の『古事記物語』を朗読してみます📖【古代日本史VTuber きら子】 - YouTube これは愚痴なのでアスリートの方々にはあらかじめ謝っておくけど（ごめんなさい 🙇），私は競技スポーツ（eスポーツも含めて）に殆ど興味がないので「公道でやるなよ」と思ってしまう。いや，自治体としてもマラソンは貴重な観光資源なんだろうけどさ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nここでは，発表に敬意を表し「稲田姫」表記で統一する。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n古事記ではとにかく神様が殺されまくる。ヤマタノオロチなんか惨殺だし。まぁ，洋の東西を問わず昔話や童話なんかも結構エグいのあるしな。さるかに合戦とか舌切り雀とかカチカチ山とか。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Go 1.24 からのベンチマークテスト",
      "section": "golang",
      "description": "for b.Loop() { ... } 内のコードは最適化されないことを保証する",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/benchmark-tests-in-go-1_24/",
      "published": "2025-03-15T12:08:09+00:00",
      "update": "2025-03-16T14:18:08+00:00",
      "content": "現在『効率的なGo』の読書会に参加してるんだけど，今回はその10回目の話。\n第67回横浜Go読書会（オンライン） - connpass 今回は「8章 ベンチマーク」の最初の部分まで読み進めた。 この辺からようやく Go のツールを使った具体的な話になってくる。\n内容については本を読んでもらうとして，今回はベンチマーク・コードの話。 件の本では「ほとんどのベンチマークに必要な小さなボイラープレートの生テンプレート」として以下のコードを挙げている。\nfunc BenchmarkSum(b *testing.B) { b.ReportAllocs() // TODO(bwplotka): 必要な初期化処理を追加 b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { // TODO(bwplotka): テストされた機能を追加 } } 『効率的なGo』 リスト 8-1：Go のベンチマークの核となる要素より ちなみに b.ReportAllocs() はヒープメモリの割り当て回数と総量をレポートするための関数で， go test -bench コマンドでベンチマークテストを起動する際の -benchmem オプションと同じ効果がある。\nこのコード中の for 文でカウンターを回しているのだが Go 1.24 から testing.B.Loop() メソッドが追加され for ループの記述が大きく改善された。\nBenchmarks may now use the faster and less error-prone testing.B.Loop method to perform benchmark iterations like for b.Loop() { ... } in place of the typical loop structures involving b.N like for range b.N. This offers two significant advantages:\nThe benchmark function will execute exactly once per -count, so expensive setup and cleanup steps execute only once. Function call parameters and results are kept alive, preventing the compiler from fully optimizing away the loop body. via Go 1.24 Release Notes - The Go Programming Language 最初のほうの「コストのかかるセットアップおよびクリーンアップ手順は1回だけ実行される」というのは分かりにくいが，実は testing.B.Loop() メソッドを使うと，先のテンプレートコードにある b.ResetTimer() を省略できて，純粋に for b.Loop() { ... } 内の処理だけ計測される。\nもうひとつはもっと重要で for b.Loop() { ... } 内のコードは最適化されないことを保証するというものだ。 たとえば\nfunc Add(a, b int) int { return a + b } という関数のベンチマークを取ろうとして素朴に\nfor range b.N { _ = Add(1, 2) } なんてなコードを書いたら，最悪の場合，最適化でループ内の処理がまるごと無くなりかねない1。 testing.B.Loop() メソッドを使うことでそうした事態を回避できるというわけだ。\nお試しに何か書いてみよう2。 まずはこんな関数を書いてみる。\npackage sample func Sum(data []int) int { total := 0 for _, value := range data { total += value } return total } よくある合計値を返す関数ですな。 作成した sample.Sum() 関数のベンチマークテストのコードは以下の通り。\npackage sample_test import ( \u0026#34;math/rand/v2\u0026#34; \u0026#34;sample\u0026#34; \u0026#34;testing\u0026#34; ) func intList(n int) []int { list := make([]int, n) for i := range list { list[i] = rand.Int() } return list } func BenchmarkSum(b *testing.B) { b.ReportAllocs() input := intList(128 \u0026lt;\u0026lt; 10) for b.Loop() { sample.Sum(input) } } さっそく実行してみよう3。\n$ go test -run \u0026#39;^$\u0026#39; -bench \u0026#39;^BenchmarkSum$\u0026#39; -count 6 | tee sample_sum_bench_v1.txt goos: linux goarch: amd64 pkg: sample cpu: AMD Ryzen 5 PRO 4650G with Radeon Graphics BenchmarkSum-12 37249 32302 ns/op 0 B/op 0 allocs/op BenchmarkSum-12 36802 32570 ns/op 0 B/op 0 allocs/op BenchmarkSum-12 36495 34515 ns/op 0 B/op 0 allocs/op BenchmarkSum-12 36825 32516 ns/op 0 B/op 0 allocs/op BenchmarkSum-12 37101 32142 ns/op 0 B/op 0 allocs/op BenchmarkSum-12 37298 32072 ns/op 0 B/op 0 allocs/op PASS ok sample\t7.260s ヒープの使用もカウントされてないし，上手くいってるっぽいな。\nもうひとつ。 『効率的なGo』では benchstat コマンドの紹介もされていた。 上のベンチマーク結果について簡単な統計処理をしてくれるらしい。 これも試してみよう。\nまずはコマンドのインストール。\n$ go install golang.org/x/perf/cmd/benchstat@latest 先程のベンチマーク結果を benchstat コマンドに食わせてみる。\n$ benchstat sample_sum_bench_v1.txt goos: linux goarch: amd64 pkg: sample cpu: AMD Ryzen 5 PRO 4650G with Radeon Graphics │ sample_sum_bench_v1.txt │ │ sec/op │ Sum-12 32.41µ ± 6% │ sample_sum_bench_v1.txt │ │ B/op │ Sum-12 0.000 ± 0% │ sample_sum_bench_v1.txt │ │ allocs/op │ Sum-12 0.000 ± 0% んー。 $6\\,\\%$ の分散はちょっと大きいかなぁ。 『効率的なGo』によると，分散が $5\\,\\%$ 以上ある場合は環境ノイズ（バックグラウンドのプロセスとかメモリスワップとか）が大きい可能性があるらしい。 まぁ，今回はこのまま進めよう。\nbenchstat で統計処理を行う場合は -count オプションを使って少なくとも6回以上は繰り返すべきと書かれている。 これによって環境ノイズを検出しやすくなる。\nbenchstat コマンドは複数のベンチマーク結果を比較することもできる。\nたとえば，先ほどの Sum() 関数のループ回数を半分にしたら速くなるだろうか。 試してみよう。 まず Sum() 関数を以下のように書き直す（ほとんど GitHub Copilot が書いたけどw）。\nfunc Sum(data []int) int { total := 0 l := len(data) h := l / 2 for i := range h { total += data[i] + data[l-i-1] } if h*2 != l { total += data[h] } return total } これに対して先ほどと同じ条件でベンチマークテストを行う。\n$ go test -run \u0026#39;^$\u0026#39; -bench \u0026#39;^BenchmarkSum$\u0026#39; -count 6 | tee sample_sum_bench_v2.txt goos: linux goarch: amd64 pkg: sample cpu: AMD Ryzen 5 PRO 4650G with Radeon Graphics BenchmarkSum-12 30920\t39051 ns/op\t0 B/op\t0 allocs/op BenchmarkSum-12 30186\t39492 ns/op\t0 B/op\t0 allocs/op BenchmarkSum-12 30282\t39615 ns/op\t0 B/op\t0 allocs/op BenchmarkSum-12 30373\t39535 ns/op\t0 B/op\t0 allocs/op BenchmarkSum-12 30525\t39413 ns/op\t0 B/op\t0 allocs/op BenchmarkSum-12 30379\t39540 ns/op\t0 B/op\t0 allocs/op PASS ok sample\t7.215s ありゃ。 さっきより遅くなっちゃった？ benchstat コマンドで確認してみよう。\n$ benchstat sample_sum_bench_v1.txt sample_sum_bench_v2.txt goos: linux goarch: amd64 pkg: sample cpu: AMD Ryzen 5 PRO 4650G with Radeon Graphics │ sample_sum_bench_v1.txt │ sample_sum_bench_v2.txt │ │ sec/op │ sec/op vs base │ Sum-12 32.41µ ± 6% 39.51µ ± 1% +21.92% (p=0.002 n=6) │ sample_sum_bench_v1.txt │ sample_sum_bench_v2.txt │ │ B/op │ B/op vs base │ Sum-12 0.000 ± 0% 0.000 ± 0% ~ (p=1.000 n=6) ¹ ¹ all samples are equal │ sample_sum_bench_v1.txt │ sample_sum_bench_v2.txt │ │ allocs/op │ allocs/op vs base │ Sum-12 0.000 ± 0% 0.000 ± 0% ~ (p=1.000 n=6) ¹ ¹ all samples are equal $22\\,\\%$ 近く遅くなっちゃったよ orz\np の値は統計的有意性を表す $p\\,値$のことで，既定では $\\alpha=0.05$ に設定されている（$\\alpha$ の値は -alpha オプションで変更できる）。 つまり p の値が 0.05 より小さければ有意な値であると見なすことができる。\nそれはともかく，とりあえずループ回数を畳み込むのはなしの方向で。\n\u0026hellip;てな感じで benchstat コマンドを使えば統計学や誤差論の知識がなくてもある程度の判断を下すことができる。\n参考図書 効率的なGo ―データ指向によるGoアプリケーションの性能最適化 Bartłomiej Płotka (著), 山口 能迪 (翻訳) オライリー・ジャパン 2024-02-24 単行本（ソフトカバー） 4814400535 (ASIN), 9784814400539 (EAN), 4814400535 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元で Ebook を買える。Go言語のリファレンス本ではない。フトウェア工学，プログラミング（の考え方）を学ぶ教科書的な位置づけかなぁ。\nreviewed by Spiegel on 2024-04-21 (powered by PA-APIv5)\nGo言語で学ぶ並行プログラミング　他言語にも適用できる原則とベストプラクティス impress top gearシリーズ James Cutajar (著), 柴田 芳樹 (著) インプレス 2024-12-04 (Release 2024-12-04) Kindle版 B0DNYMMBBQ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 読書会のために購入。インプレス社の本は Kindle 版より版元で PDF 版を買うのがオススメ。「並行処理」について原理的な解説から丁寧に書かれている。 Go で解説されているが Go 以外の言語でも応用できる。 reviewed by Spiegel on 2025-01-25 (powered by PA-APIv5)\nGo言語 100Tips ありがちなミスを把握し、実装を最適化する impress top gearシリーズ Teiva Harsanyi (著), 柴田 芳樹 (著) インプレス 2023-08-18 (Release 2023-08-18) Kindle版 B0CFL1DK8Q (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元で PDF 版を購入可能。事実上の Effective Go とも言える充実の内容。オリジナルは敢えてタイトルに “tips” という単語を入れるのを避けたのに邦題が「100 Tips」とかなっていて，原作者がお怒りとの噂（あくまで噂）\nreviewed by Spiegel on 2023-08-18 (powered by PA-APIv5)\nプログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。と思ったら絶版状態らしい（2025-01 現在）。復刊を望む！\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n実際に試してみたが10億回ループしてたので，やはり中身が消えてると思われる。ちなみにループ部分を for b.Loop() { ... } にしたら6億回のループになったので，多分そういうことなんだろう。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n今回の記事のコードは testing パッケージのドキュメントにあるサンプルコードを参考にしている。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n-run '^$' オプションはひとつもテストを実行しないことを示す。 -bench '^BenchmarkSum$' オプションは指定したベンチマークテストコードを実行することを示す。 -count 6 は指定したベンチマークテストを6回繰り返すことを示す。ベンチマークテストを繰り返すのは統計処理を行うため。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "円周率の日の皆既月食",
      "section": "remark",
      "description": "正直「ヤラレタ」と思ったね。こんな見事な駄洒落に気が付かないとか orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/total-lunar-eclipse-on-pi-day/",
      "published": "2025-03-14T11:25:21+00:00",
      "update": "2025-03-15T06:34:08+00:00",
      "content": "今日 2025-03-14 は望（満月）で皆既月食があった。 関東以東なら月の出直後に終わりかけの部分日食が見れたそうだが，残念ながら西日本ではギリギリ半影食が見れるかどうかのタイミングだった。 まぁ，半影食を肉眼で確認するのはほぼ無理だと思うけど。\nありがたいことに YouTube のすばる望遠鏡チャネルで皆既月食ライブをやっておられた。 アーカイブも見れる。\n皆既月食ライブ / Total Lunar Eclipse Live from Maunakea, Hawai‘i - YouTube ありがたや 🙇\nFlickr にもたくさんの写真が上がっている。 とりあえずひとつ挙げておく。\nvia “Full Blood Worm Moon” by Thomas Cizauskas (CC-BY-NC-ND) もうひとつ。 今日は3月14日。 ということは円周率の日で数学の日でアインシュタインの誕生日なのよ。\nPi Day Activities for the Classroom – Collection | NASA JPL Education で，今日の APOD (Astronomy Picture of the Day) がこれ。\nAPOD: 2025 March 14 - Moon Pi and Mountain Shadow 写真だけ見てもピンとこなかったが，説明文に\nWhat phase of the Moon is 3.14 radians from the Sun? The Full Moon, of course. Even though the Moon might look full for several days, the Moon is truly at its full phase when it is Pi radians (aka 180 degrees) from the Sun in ecliptic longitude. That\u0026rsquo;s opposite the Sun in planet Earth\u0026rsquo;s sky. [\u0026hellip;] March 14 2025, the moon is Pi radians from the Sun at exactly 06:55 UTC. That\u0026rsquo;s about three minutes before the midpoint of the March Full Moon\u0026rsquo;s total lunar eclipse. via APOD: 2025 March 14 - Moon Pi and Mountain Shadow とか書いてあって，正直「ヤラレタ」と思ったね。 こんな見事な駄洒落に気が付かないとか orz\nvia 日食・月食時の「太陽-月-地球」関係図。 黒色の範囲が日食・月食を観察できる範囲である。 そう。 皆既月食は地球から見て太陽と月が $\\pi\\,\\mathrm{rad.}$ の位置関係になるのよ。 偶然とはいえ，なんという見事な駄洒落（大事なことなので2回言いました）。\nちなみに今年はもう1回，9月8日（月）早朝に皆既月食があり，これは日本全国で見られる。 早朝というか日曜深夜というべきか。 1時28分頃から食が始まり2時30分から皆既食になる。 皆既食は3時53分頃まで続き，食が終わるのが4時56分頃。 しかもこのときは皆既食中に6等〜7等の星の星食（月没帯食）が3つくらい見れるらしい。 望遠鏡を持ってる方は必見ですな。\n晴れたらいいねぇ。\nブックマーク APOD: 2025 March 15 - Tololo Totality\nπ は間違ってる？\n参考図書 天文年鑑 2024年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2023-11-24 (Release 2023-11-24) 単行本 4416623410 (ASIN), 9784416623411 (EAN), 4416623410 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 天文ファン必携。2024年版。これが届くと年末って感じ。\nreviewed by Spiegel on 2023-11-25 (powered by PA-APIv5)\n天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいたが，やっぱり手元に置いておきたいのでエイヤで買った。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\n数学ガールの秘密ノート／丸い三角関数 結城 浩 (著) SBクリエイティブ 2014-04-23 (Release 2015-04-18) Kindle版 B00W6NCLJM (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 丸と三角の楽しい関係。頑張れば小学生高学年でも大丈夫。\nreviewed by Spiegel on 2014-11-30 (powered by PA-APIv5)\n数学ガール 結城 浩 (著) SBクリエイティブ 2007-06-26 (Release 2014-03-12) Kindle版 B00EYXMA9I (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ミルカさんとの衝撃の encounter。数学ガールがワルツを踊る。\nreviewed by Spiegel on 2014-02-14 (powered by PA-APIv5)\n"
    },
    {
      "title": "React のお勉強",
      "section": "remark",
      "description": "もう本当に基礎の基礎。 JSX から始めよう",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/a-study-in-react/",
      "published": "2025-03-14T09:44:25+00:00",
      "update": "2025-03-14T09:44:29+00:00",
      "content": "React について勉強中。\nいや，今までにも React / TypeScript なプロジェクトに参加したことはあるんだけど，ある程度お膳立てされた状態での join だったので，正直 React や TypeScript を知らなくても（やっつけの知識で）コードは書けるしテストも出来るわけよ。 知らない言語でもコードなんて見れば分かるし。 でも，それってプロジェクトが終われば忘れるぢゃん，身に付いてないんだから。\nというわけで，ちょうど新しいプロジェクトのための事前学習を始めたタイミングということもあり，勤務先の有識者に最初から教えてもらえることになった。 ただし，その前に公式サイトの学習ページ（日本語があるのか）は読んでおいてね，と言われ，スキマ時間で勉強を始めたのだが\u0026hellip; JSX から始めるのか。 よしやってみよう。\nJSX で簡単なコードを書くだけなら特別な開発環境も要らないしフレームワークも要らないらしい。 準備として HTML の \u0026lt;head\u0026gt; 要素に以下の記述を加えればよい。\n\u0026lt;script src=\u0026#34;https://unpkg.com/@babel/standalone/babel.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script async src=\u0026#34;https://ga.jspm.io/npm:es-module-shims@1.7.0/dist/es-module-shims.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;importmap\u0026#34;\u0026gt; { \u0026#34;imports\u0026#34;: { \u0026#34;react\u0026#34;: \u0026#34;https://esm.sh/react?dev\u0026#34;, \u0026#34;react-dom/client\u0026#34;: \u0026#34;https://esm.sh/react-dom/client?dev\u0026#34; } } \u0026lt;/script\u0026gt; @babel/standalone は JSX から JavaScript (React.createElement の式) への変換を行うものらしい。 コードはこんな感じに記述する。\n\u0026lt;div id=\u0026#34;root1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/babel\u0026#34; data-type=\u0026#34;module\u0026#34;\u0026gt; import React from \u0026#39;react\u0026#39;; import { createRoot } from \u0026#39;react-dom/client\u0026#39;; const MyApp = function() { return \u0026lt;strong\u0026gt;Hello, world!\u0026lt;/strong\u0026gt;; } const container = document.getElementById(\u0026#39;root1\u0026#39;); const root = createRoot(container); root.render(\u0026lt;MyApp /\u0026gt;); \u0026lt;/script\u0026gt; 強調している部分が JSX の特徴的な部分で HTML タグ風の記述（JSX 要素）が使えるため Web デザイナーでもとっつきやすいというのが売りなんだそうな。 ユーザが定義した MyApp() 関数の名前をタグのように使えるのがポイント。 タグは XML と同じ仕様なので void タグについては \u0026lt;MyApp /\u0026gt; のように明示する必要がある。\nこのコードを含む HTML ファイルをブラウザで表示すると以下のような表示になる。\nHello, World by React/JSX うんうん。 ちゃんと動いてるな。\nHTML タグ記法を JSX の記法に変換する “HTML to JSX” というツールもある。\nチュートリアルのコードをローカルで試したい場合。\nまずは node.js のインストールを済ませておくこと。 私は NodeSource から v22 LTS 版を入れている。 最近は Bun の話もよく聞くようになった。\nチュートリアル：三目並べ – Reactより 右上にある Fork を押下すると CodeSandbox のページが開く。\nvia Preview - nodebox - CodeSandbox 左上にある □ を押下して表示されるメニューから “Download Sandbox” を選択してコードをまるごと（zip 形式）ダウンロードし，ローカルの適当なディレクトリに展開する。\nnpm install を実行して依存ライブラリをインストールしようとしたのだがエラーになって怒られたので --legacy-peer-deps オプションを付けてやり直す。 今度はうまく行ったが deprecated の嵐（笑）\nいよいよ npm start でローカルサーバを起動しようとしたのだが，またしてもエラーで起動せず orz どうも npm audit fix --force で依存関係を更新しないといけないらしい。 しかもこれを実行するたびに状況が変わるってどうなってるの？？？\nホンマ，この辺のテキトーさが node.js 開発系が嫌な理由なんだよな。 しかも依存が深すぎて？ 何をどうしていいのか分からない。 みんなこれちゃんとメンテ出来てるの？\nぶちぶちと愚痴を垂れつつ npm start を再実行。 とりあえず動いたかな。\nvia npm start 三目並べ 実行結果より 動いてるっぽいな。\nさて，お勉強を続けますか。\nブックマーク @babel/standalone · Babel\nbabel/standaloneの使い方(文字列に格納したjavascriptソースをブラウザ内でトランスパイルする) #React - Qiita es-module-shims - npm\n新・日本一わかりやすいReact入門【基礎編】 - YouTube\nHugo で React + TypeScript を利用してサクッとウェブサイトに RSS リーダーを追加する\nBunでReact関連の開発環境を構築する\nReactをBunで使用する方法 - Web開発における知見共有系ページ\npackage.jsonで時々見かけるbrowserslistとは\n参考文献 TypeScriptとReact/Next.jsでつくる実践Webアプリケーション開発 手島 拓也 (著), 吉田 健人 (著), 高林 佳稀 (著) 技術評論社 2022-07-25 (Release 2022-07-25) 単行本（ソフトカバー） 4297129167 (ASIN), 9784297129163 (EAN), 4297129167 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 仕事用に購入。版元で電子版が買える。必要なところだけつまみ食い的に参照している。\nreviewed by Spiegel on 2023-11-26 (powered by PA-APIv5)\n"
    }
  ]
}
