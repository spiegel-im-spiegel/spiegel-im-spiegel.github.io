{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "LibreOffice 7.1 へのアップグレード",
      "section": "release",
      "description": "いつもどおり，手動でアップグレード。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/02/upgrade-libreoffice-7_1/",
      "published": "2021-02-07T07:48:31+00:00",
      "update": "2021-02-07T07:51:31+00:00",
      "content": "LibreOffice 7.1 がリリースされた。\n LibreOffice 7.1 Community released by The Document Foundation - The Document Foundation Blog 無償のオフィス総合ソフト「LibreOffice 7.1 Community」がリリース - 窓の杜  Ubuntu で LibreOffice を導入する方法はいくつかあるが，前回と同じく今回も公式サイトから *.deb ファイルを取ってきてインストールした。 細かくチェックしたわけではないが 7.0 でも OpenPGP 鍵で暗号化したファイルが開けたので，まぁ問題なかろう。\nLibreOffice は異なるバージョンと共存できてしまうので 7.1 系のみを使うのであれば以前のバージョンは削除する。\n$ sudo apt purge libreoffice7.0* libobasis7.0* 7.1 系を削除する場合も\n$ sudo apt purge libreoffice7.1* libobasis7.1* でよい。\nもし上の APT コマンドで上手く行かない場合は\n$ dpkg -l | grep libreoffice あるいは\n$ dpkg -l | grep libobasis で一覧を出してひとつづつ sudo pkg -r コマンドで削除していくしかない（依存関係に注意）。\nブックマーク  Ubuntu に LibreOffice をインストールする3つの方法  "
    },
    {
      "title": "2021-02-07 のブックマーク",
      "section": "bookmarks",
      "description": "「オンライン表現の自由のチョークポイント――なぜインフラの検閲はプラットフォームの検閲よりも深刻なのか」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/02/07-bookmarks/",
      "published": "2021-02-07T07:48:20+00:00",
      "update": "2021-02-07T07:51:31+00:00",
      "content": "リリース情報  Release 4.4.9_2 · zetamatta/nyagos · GitHub Release v0.3.0 · zetamatta/go-readline-ny · GitHub Release 1.54.0 · atom/atom · GitHub KeePassXC 2.6.3 released - KeePassXC Release 8.9.0 · mermaid-js/mermaid · GitHub Release v1.36.0 · golangci/golangci-lint · GitHub 「Windows Terminal」に待望の設定GUI ～v1.6プレビュー版で先行導入 - 窓の杜 Release Release 2.6.4 · keepassxreboot/keepassxc · GitHub Release gopls/v0.6.5 · golang/tools · GitHub LibreOffice 7.1 Community released by The Document Foundation - The Document Foundation Blog  Announcing LibreOffice New Generation - The Document Foundation Blog 無償のオフィス総合ソフト「LibreOffice 7.1 Community」がリリース - 窓の杜   Release v1.0.11 · sonatype-nexus-community/nancy · GitHub  バベルのインターネット  権力者の\u0026quot;特別扱い\u0026quot;を止めよ：ソーシャルメディアによるトランプ大統領アカウントの遮断・凍結についてのEFFの考え方 | P2Pとかその辺のお話R ウガンダ共和国、大統領がインターネットとの切断を命令、大統領選投票日の前日に － Publickey オンライン表現の自由のチョークポイント――なぜインフラの検閲はプラットフォームの検閲よりも深刻なのか | P2Pとかその辺のお話R  セキュリティ＆プライバシー関連  Hackers can clone Google Titan 2FA keys using a side channel in NXP chips | Ars Technica  Cloning Google Titan 2FA keys - Schneier on Security   Red HatがKubernetesネイティブなセキュリティベンダ「StackRox」を買収、OpenShiftへ統合。クラウドネイティブ環境のセキュリティ強化へ － Publickey 楽天モバイルへ転職したソフトバンク元社員の社外秘情報持ち出しについてまとめてみた - piyolog グーグルが「Windows」と「Android」を標的とした高度なハッキング事例のレポート公開 - ZDNet Japan 2021年1月マイクロソフトセキュリティ更新プログラムに関する注意喚起 マイクロソフト、Linux用マルウェア対策ツールの強化版「Microsoft Defender for Linux EDR」正式版リリース。Linuxサーバ上の怪しい動作などを検出可能に － Publickey GitHub - anmitsu/goful: Goful is a CUI file manager written in Go. Apache Tomcatの脆弱性（CVE-2021-24122）に関する注意喚起 プライバシーポリシーへの懸念で欧米で人気のSignalとTelegramは中国国内でも（いまのところ）拡大中 | TechCrunch Japan NSAが社内ネットワークでのDoHの利用に警告 - ZDNet Japan NECのWi-Fiルータ「Aterm」シリーズに複数の脆弱性 | TECH+ Kindle端末にクレジットカードを悪用される脆弱性 - PC Watch  Kindle、攻撃者に乗っ取られる危険性のある脆弱性が発覚 | TECH+   sudoの脆弱性（CVE-2021-3156）に関する注意喚起 最恐ウイルスEmotetをテイクダウンしたOperation Ladybirdについてまとめてみた - piyolog サイバートラスト社SSLサーバー証明書の再発行対応について | さくらインターネット 中国で盗聴器の仕込まれたモバイルバッテリーが騒動に - ZDNet Japan 久しぶりに使うレポジトリの脆弱性報告が有りまくったので npm package をアップデートをしてスッキリする SonicWall製SMA100シリーズの脆弱性（CVE-2021-20016）に関する注意喚起 draft-ietf-openpgp-crypto-refresh-01 - OpenPGP Message Format  Linux または Ubuntu に関する話題  CloudLinux、「CentOS」の代替OSは「AlmaLinux」\u0026ndash;今四半期リリースへ - ZDNet Japan Ubuntu 21.04 その12 - Ubuntu on Waylandをデフォルトにする提案 - kledgeb  Ubuntuのあれどうなった③ Waylandセッションでのリモートデスクトップ   Ubuntu 20.04 その218 - Ubuntu 20.04.2 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 21.10 その1 - 新しいUbuntu Desktopインストーラーの開発・Flutterベースのインストーラーへ - kledgeb  Windows に関する話題  Nyagosの補完まとめ - tomato3713’s blog windows10 defender フルスキャン中にブルースクリーンになってしまう - マイクロソフト コミュニティ Win10にWSL2とUbuntu 20.04をインストールする | AsTechLog  Windows10 WSL2にLinux居城を爆誕させる - Qiita   My WSL2 and Windows Terminal setup | Garry Trinder  Go 言語関連  [Go] testing.Mオブジェクトを引数にとる関数をつくるアイデア - My External Storage Goのnet/httpのkeep-aliveで気をつけること - Carpe Diem Golangでのstreamの扱い方を学ぶ - Carpe Diem その文字が JIS X 0208 に含まれるか？ あるいは unicode.RangeTable の使い方 GoのHTTP実装を読んだ知見をまとめる~FIFOを5通りで実装する~ - Qiita GoのアプリにNew Relic APMを導入する時とても便利なCLIを作った - My External Storage GoでGraphQL: gqlgen + gorm x/sys/windows: use win32metadata? · Issue #43838 · golang/go · GitHub  C#やRustからWin32 APIをもっと簡単に呼び出せるように ～Microsoftが「win32metadata」プロジェクトを発表 - 窓の杜   AWS Translateを使ってGo言語で翻訳するサンプル - Qiita Go言語でPCとUSB接続のデバイス間でシリアル通信する 【Go】tviewによるTUIツール作成 Developing and publishing modules - The Go Programming Language GoでSQLにトレーシングコメントを埋め込んで実行する | おそらくはそれさえも平凡な日々  Google、ORMが生成するSQLが遅いときの調査を容易にする「sqlcommenter」をオープンソースで公開。Rails、Spring、Djangoなど主要なフレームワークに対応 － Publickey   Gopls on by default in the VS Code Go extension - The Go Blog インタフェースの型リストを用いた列挙型の考察 - tenntenn.dev 第10回『プログラミング言語Go』オンライン読書会 - connpass  その他  Go製のtcardgenでHugoで作ったブログのOGPを自動生成してみた - Qiita Convert cURL command syntax to Python requests, Ansible URI, browser fetch, MATLAB, Node.js, R, PHP, Strest, Go, Dart, JSON, Elixir, and Rust code  GitHub - NickCarneiro/curlconverter: convert curl commands to Python, JavaScript, PHP, R, Go, Rust, Dart, JSON, Ansible, Elixir   .NET 5やBlazor WebAssemblyに対応する表形式のグリッドやチャートなどのコンポーネントを揃えた「ComponentOne」最新版が登場 － Publickey WebAssemblyをブラウザの外で動かすWasmerを触ってみた goでN+1問題を検出する静的解析ツールを作った Amazon LightsailがIPv6サポートを開始、仮想プライベートサーバ（VPS）として手軽にIPv6を利用可能に － Publickey 2021年のPHS Google Cloud FunctionsがRubyのサポートを発表。ローカル環境での開発やテストを可能にするフレームワークも － Publickey State of JavaScript 2020：いちばん利用率の高いJSフレームワーク、フロントエンドがReact、バックエンドはExpress、テストにはJest。2万4000人の調査結果 － Publickey 日本語 LaTeX の新常識 2021 - Qiita Jeffrey Paul: Your Computer Isn\u0026rsquo;t Yours  多くの人、特にMacユーザに読んでほしい「Your Computer Isn\u0026rsquo;t Yours」日本語訳 - YAMDAS現更新履歴   個人開発者はRed Hat Enterprise Linuxを無料で最大16システムまで利用可能に、本番環境もOK。Red Hatが開発者向けプログラムの拡大を発表 － Publickey AWSをElasticが名指しで非難。ElasticsearchとKibanaのライセンスを、AWSが勝手にマネージドサービスで提供できないように変更へ － Publickey W3CとIETF、「WebRTC」が正式な標準仕様に到達したと発表 － Publickey Google、マイクロソフトらが設立、「Open Web Docs」を発表。MDNなど支援、Web技術のドキュメント化を推進 － Publickey 2021年にサポート終了を迎えるMicrosoft製品は？ ～早めに移行の準備を進めよう - やじうまの杜 - 窓の杜 ZennとClassmethod | Cat Knows 実は2020年は大久保ゆうさんの年だった - YAMDAS現更新履歴 ロールプレイングゲームとしてのウィキペディア、もしくは一部の大学人がウィキペディアを好きではない理由（Wikipedia as a Role-Playing Game, or Why Some Academics Do Not Like Wikipedia 日本語訳） 「GitHubなどクラウドサービス利用の萎縮につながらないように」、一般社団法人コンピュータソフトウェア協会が「GitHubに関する対応とお願い」を企業に向け発表 － Publickey RISC-V isn\u0026rsquo;t as interesting as you think - the sporks space  ブログ: RISC-Vはあなたが思っているほど面白くない   COVID-19 rarely spreads through surfaces. So why are we still deep cleaning?  ブログ: COVID-19が表面に広がることはほとんどない。では、なぜ私たちはまだディープクリーニングをしているのか?   Box、電子署名のSignRequest買収を発表\u0026ndash;「Box Sign」を今夏リリースへ - ZDNet Japan 「秀丸エディタ」v8.96で代替フォントを5つまで登録可能に ～数字・英字・漢字に異なるフォントを指定できる - 窓の杜 Windows と Unicode とボク  "
    },
    {
      "title": "Go 1.15.8 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/02/go-1_15_8-is-released/",
      "published": "2021-02-05T10:33:55+00:00",
      "update": "2021-02-05T10:34:16+00:00",
      "content": "Go 1.15.8 がリリースされた。\n Go 1.15.8 and Go 1.14.15 are released  セキュリティ・アップデートはなし。\ngo1.15.8 (released 2021/02/04) includes fixes to the compiler, linker, runtime, the go command, and the net/http package. See the Go 1.15.8 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.15.8.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.15.8.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.15.8.linux-amd64.tar.gz $ sudo mv go go1.15.8 $ sudo ln -s go1.15.8 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.15.8 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "立春も動き出す",
      "section": "remark",
      "description": "時事ネタとして何故か最近よく聞こえてくるので，このブログでも便乗しておく（笑） ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/01/the-beginning-of-spring/",
      "published": "2021-01-28T10:49:44+00:00",
      "update": "2021-01-28T10:51:09+00:00",
      "content": "時事ネタとして何故か最近よく聞こえてくるので，このブログでも便乗しておく（笑） ちなみに，国立天文台による解説はこちら。\n 節分の日が動き出す - 国立天文台暦計算室  念のために言うと，現行の二十四節気は天球上1 の真太陽2 の位置（太陽黄経）が基準になっている。\n  via Explanation about a celestial sphere in Japanese  立春の場合は「太陽黄経が315度になる瞬間を含む日」である。 これを踏まえて過去の「「太陽黄経が315度になる瞬間」をプロットしたのが以下の図だ。\n   節分の日が動き出す - 国立天文台暦計算室より  なんでこんなジグザグになっているかというと，グレゴリオ暦3 の1年は「地球の公転周期とだいたい同じ」なだけで，実際の太陽の公転運動と紐づいているわけではないから。\n平年では年ごとに2月5日側にずれていくが，4年ごとの閏年（の翌年）で一気に2月3日側に巻き戻されるのでこんなジグザグになっているわけだ。 しかもジグザグの下限は少しずつ2月3日側にずれていく4。\nグレゴリオ暦には「100で割り切れる西暦年のうち400で割り切れない年は（閏年ではなく）平年」というルールがある。 これにより1701年5，1801年，1901年では巻き戻しがなくなり，全体としてジグザグのラインが2月5日側に大きく跳ね上がっているように見えるのである。\n一方，2000年は普通に閏年だったので，翌年にジグザグのラインが折り返されている。 それでも2020年までは2月4日の範囲に収まっていたが，閏年を経るたびにジグザグの下限が前日側にシフトしていくため，いよいよ2021年は2月3日にかかってしまった，ということになる。\nこれからは徐々に2月3日のほうが当たり前になっていくだろう（笑）\nもちろんこれは立春だけじゃなくて太陽黄経が基準となる二十四節気全般に言える話で，たとえば秋分についても，2012年（1896年以来）に9月22日になって以降，9月22日になる年が増えていく。\n   秋分の日が動き出す - 国立天文台暦計算室より  まぁ，簡単に言うと「騒ぐようなこっちゃない」ってことですよ（笑）\nブックマーク  今年の節分が2月2日なのは2000年に原因が！？…“子午線のまち”明石・天文科学館の館長が徹底解説｜まいどなニュース 「暦」日本史 （再掲載） 冬至に関する与太話 2021年の暦 2021年の祝日・休日に関する注意喚起  参考図書  天文年鑑 2021年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2020-11-24 単行本 4416620616 (ASIN), 9784416620618 (EAN), 4416620616 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2021年版。なお，記載されている祝日・休日は改正前のものなのでご注意を。\nreviewed by Spiegel on 2020-11-25 (powered by PA-APIv5)\n  天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいる。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\n  天体の位置計算 長沢 工 (著) 地人書館 1985-09-01 単行本 4805202254 (ASIN), 9784805202258 (EAN), 4805202254 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。\nreviewed by Spiegel on 2015-01-11 (powered by PA-APIv5)\n   地球を中心とした無限遠の仮想球面を「天球」と呼ぶ。 \u0026#x21a9;\u0026#xfe0e;\n 地球の公転軌道は僅かに楕円軌道であるため天球上の（見かけの）太陽の移動速度は季節によって異なる。実際の公転運動に則した天球上の太陽を「真太陽」と呼ぶ。これに対して一定の速度で移動する仮想太陽を「平均太陽」と呼ぶ。 \u0026#x21a9;\u0026#xfe0e;\n 厳密にいうと日本の現行暦は「グレゴリオ暦互換」であって「グレゴリオ暦」ではない。「グレゴリオ暦」は西暦ベースだが，日本の現行暦は「神武天皇即位紀元」が基点になっている。まぁ運用上の差異はないので，政治的・宗教的な意図がない限り，両者を区別する必要はないけど。 \u0026#x21a9;\u0026#xfe0e;\n 4年ごとの閏年だけでは4年が1,461日となり実際の4年（＝地球公転周期×4）に対して45分ほど過剰補正になる。 \u0026#x21a9;\u0026#xfe0e;\n 日本の暦がグレゴリオ暦互換になったのは明治の改暦（1873年，明治6年）からなので，それ以前は意味がない。ちなみに本家グレゴリオ暦は1582年からの運用とされているが，キリスト教圏内でも国や地域によってばらつきがあるらしい。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "gpgpdump v0.12.0 をリリースした",
      "section": "release",
      "description": "各 shell 用の自動補完スクリプトを吐き出せるようにした。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/01/gpgpdump-v0_12_0-is-released/",
      "published": "2021-01-23T02:14:29+00:00",
      "update": "2021-01-23T02:22:55+00:00",
      "content": "OpenPGP パケットの内容を可視化する gpgpdump の v0.12.0 をリリースした。\n Release v0.12.0 · spiegel-im-spiegel/gpgpdump · GitHub  今回は，お試し機能として completion サブコマンドを追加して各 shell 用の自動補完スクリプトを吐き出せるようにした。 つっても spf13/cobra の機能を使ってるだけだけどね。\nBash, Zsh, Fish, PowerShell の自動補完機能に対応している。 本当は NYAGOS でも使えるようにしたかったんだけど， cobra も NYAGOS も双方カスタマイズの仕方がよく分からなくて，今回は諦めた。 今後の課題としておこう。\nたとえば Linux 上の bash であれば\n$ source \u0026lt;(gpgpdump completion bash) で取り敢えず試すことができる。 また\nsudo sh -c \u0026#34;gpgpdump completion bash \u0026gt; /usr/share/bash-completion/completions/gpgpdump\u0026#34; とかすればシステム全体に設定可能である。\n他の shell については\n$ gpgpdump completion -h とすれば簡単な使い方が表示されるので参考にして欲しい。\nブックマーク  OpenPGP の実装 OpenPGP パケットを可視化する gpgpdump  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Unicode 文字種の判別",
      "section": "golang",
      "description": "Unicode 文字種を判別するには unicode 標準パッケージが使える。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/unicode-rangetables/",
      "published": "2021-01-22T11:26:18+00:00",
      "update": "2021-02-07T07:51:31+00:00",
      "content": "Zenn で「やっかいな日本語」なる記事 (ポエム) を書いたが，このブログでは Go における Unicode 文字種の判別に話題を絞って紹介してみる。\nUnicode 文字種を判別するには unicode 標準パッケージが使える。\n判別用の unicode.RangeTable を用意し，これを参照することで文字種を判別することができる。 このパッケージの中身を見ると分かるが，かなりの数の定義済み unicode.RangeTable テーブルが取り揃えられている。 今回はこの定義済みテーブルのみ使うことにしよう。\n図形文字と制御文字 まずは大雑把に「図形文字」と「制御文字」を判別してみよう。\n図形文字の判別には unicode.IsGraphic() 関数が，制御文字の判別には unicode.IsControl() 関数が使える。\nただし unicode.IsControl() 関数では U+00FF 以下の ISO 88591 で定義されている制御文字領域しか判別してくれないようで BOM (U+FEFF) などの Unicode 独自の制御文字も含めて判別するのであれば unicode.C テーブルを使う必要がある。\nそこで，こんな関数を考えてみる。\nimport \u0026#34;unicode\u0026#34; func check(r rune) string { switch { case unicode.IsGraphic(r): return \u0026#34;Graphic\u0026#34; case unicode.IsControl(r): return \u0026#34;Latin1 Control\u0026#34; case unicode.Is(unicode.C, r): return \u0026#34;Unicode Control\u0026#34; } return \u0026#34;Unknown\u0026#34; } これを使って実際に文字列をチェックしてみよう。\nfunc main() { text := string([]byte{0xef, 0xbb, 0xbf, 0xe3, 0x82, 0x84, 0x09, 0xe3, 0x81, 0x82}) fmt.Println(text) for _, c := range text { fmt.Printf(\u0026#34;%#U (%v)\\n\u0026#34;, c, check(c)) } } これを実行すると\n$ go run sample1.go ﻿や あ U+FEFF (Unicode Control) U+3084 \u0026#39;や\u0026#39; (Graphic) U+0009 (Latin1 Control) U+3042 \u0026#39;あ\u0026#39; (Graphic) となった。うんうん。\n結合子と異体字セレクタ 上述の check() 関数を使って，今度は絵文字の中身を見てみる。\nfunc main() { text := \u0026#34;🙇‍♂️\u0026#34; for _, c := range text { fmt.Printf(\u0026#34;%#U (%v)\\n\u0026#34;, c, check(c)) } } これを実行すると\n$ go run sample2.go U+1F647 \u0026#39;🙇\u0026#39; (Graphic) U+200D (Unicode Control) U+2642 \u0026#39;♂\u0026#39; (Graphic) U+FE0F \u0026#39;️\u0026#39; (Graphic) となった。\nありゃ。 ZWJ はともかく異体字セレクタって図形文字あつかいなんだ。\nこれでは大雑把すぎるので check() 関数にいくつか条件を足して\nfunc check(r rune) string { switch { case unicode.Is(unicode.Sc, r): return \u0026#34;Symbol/currency\u0026#34; case unicode.Is(unicode.Sk, r): return \u0026#34;Symbol/modifier\u0026#34; case unicode.Is(unicode.Sm, r): return \u0026#34;Symbol/math\u0026#34; case unicode.Is(unicode.So, r): return \u0026#34;Symbol/other\u0026#34; case unicode.Is(unicode.Variation_Selector, r): return \u0026#34;Variation Selector\u0026#34; case unicode.Is(unicode.Join_Control, r): return \u0026#34;Join Control\u0026#34;  case unicode.IsGraphic(r): return \u0026#34;Graphic\u0026#34; case unicode.IsControl(r): return \u0026#34;Latin1 Control\u0026#34; case unicode.Is(unicode.C, r): return \u0026#34;Unicode Control\u0026#34; } return \u0026#34;Unknown\u0026#34; } と書き換えてみる。 これを使ってもう一度実行してみると\n$ go run sample2.go U+1F647 \u0026#39;🙇\u0026#39; (Symbol/other) U+200D (Join Control) U+2642 \u0026#39;♂\u0026#39; (Symbol/other) U+FE0F \u0026#39;️\u0026#39; (Variation Selector) となった。これで結合子や異体字セレクタをきちんと判別できる。 なお，シンボルについて細かく区別しなくていいのなら unicode.IsSymbol() 関数を使う手もある。\n漢字と部首 以前「こんな埼「玉」修正してやるぅ」でも書いたが， Unicode では漢字の部首にもコードポイントが割り当てられている。 しかし，幸いなことに unicode 標準パッケージの定義済み unicode.RangeTable テーブルで部首を判別可能である。\n具体的には check() 関数を以下のように書き換える。\nfunc check(r rune) string { switch { case unicode.Is(unicode.Radical, r): return \u0026#34;Radical\u0026#34; case unicode.Is(unicode.Ideographic, r): return \u0026#34;Ideographic\u0026#34;  case unicode.IsGraphic(r): return \u0026#34;Graphic\u0026#34; case unicode.IsControl(r): return \u0026#34;Latin1 Control\u0026#34; case unicode.Is(unicode.C, r): return \u0026#34;Unicode Control\u0026#34; } return \u0026#34;Unknown\u0026#34; } これを使えば\nfunc main() { text := \u0026#34;⽟玉\u0026#34; for _, c := range text { fmt.Printf(\u0026#34;%#U (%v)\\n\u0026#34;, c, check(c)) } } の実行結果が\n$ go run sample3.go U+2F5F \u0026#39;⽟\u0026#39; (Radical) U+7389 \u0026#39;玉\u0026#39; (Ideographic) となる。\nなお， unicode.Ideographic テーブルで判別できるのは本当に漢字だけなので，全角の英数字・かな文字・記号は，これにかからない。 ちなみに，部首は絵文字と同じくシンボル扱いなので unicode.IsSymbol() 関数でも一応は区別できる。\n3羽の「ペンギン」 次は check() 関数をかな文字を判別するよう書き換える。 こんな感じ。\nfunc check(r rune) string { switch { case unicode.Is(unicode.Katakana, r): return \u0026#34;Katakana\u0026#34; case unicode.Is(unicode.Hiragana, r): return \u0026#34;Hiragana\u0026#34; case unicode.Is(unicode.Lm, r): return \u0026#34;Letter/modifier\u0026#34; case unicode.Is(unicode.Lo, r): return \u0026#34;Letter\u0026#34; case unicode.Is(unicode.Mc, r): return \u0026#34;Mark/spacing combining\u0026#34; case unicode.Is(unicode.Me, r): return \u0026#34;Mark/enclosing\u0026#34; case unicode.Is(unicode.Mn, r): return \u0026#34;Mark/nonspacing\u0026#34;  case unicode.IsGraphic(r): return \u0026#34;Graphic\u0026#34; case unicode.IsControl(r): return \u0026#34;Latin1 Control\u0026#34; case unicode.Is(unicode.C, r): return \u0026#34;Unicode Control\u0026#34; } return \u0026#34;Unknown\u0026#34; } これを使って以下の文字列を判別してみる。\nfunc main() { text := \u0026#34;ペンギンペンギンﾍﾟﾝｷﾞﾝ\u0026#34; for _, c := range text { fmt.Printf(\u0026#34;%#U (%v)\\n\u0026#34;, c, check(c)) } } 実行結果は以下の通り。\n$ go run sample4.go U+30DA \u0026#39;ペ\u0026#39; (Katakana) U+30F3 \u0026#39;ン\u0026#39; (Katakana) U+30AE \u0026#39;ギ\u0026#39; (Katakana) U+30F3 \u0026#39;ン\u0026#39; (Katakana) U+30D8 \u0026#39;ヘ\u0026#39; (Katakana) U+309A \u0026#39;゚\u0026#39; (Mark/nonspacing) U+30F3 \u0026#39;ン\u0026#39; (Katakana) U+30AD \u0026#39;キ\u0026#39; (Katakana) U+3099 \u0026#39;゙\u0026#39; (Mark/nonspacing) U+30F3 \u0026#39;ン\u0026#39; (Katakana) U+FF8D \u0026#39;ﾍ\u0026#39; (Katakana) U+FF9F \u0026#39;ﾟ\u0026#39; (Letter/modifier) U+FF9D \u0026#39;ﾝ\u0026#39; (Katakana) U+FF77 \u0026#39;ｷ\u0026#39; (Katakana) U+FF9E \u0026#39;ﾞ\u0026#39; (Letter/modifier) U+FF9D \u0026#39;ﾝ\u0026#39; (Katakana) 濁点や半濁点の文字種が全角と半角で異なっている点に注意。 ホンマ，面倒くさいったら。\n面倒な Unicode unicode 標準パッケージにある定義済み unicode.RangeTable テーブルはよくできてるし，ある程度は日本語も考慮されているけど，細かい制御を行うのであれば用途に応じて専用の unicode.RangeTable テーブルを用意したほうがいいだろう。 量が多くて面倒くさいけどね。\nブックマーク   その文字が JIS X 0208 に含まれるか？ あるいは unicode.RangeTable の使い方\n  Golangでひらがな、カタカナ、漢字を判定する - Qiita\n  かなカナ変換\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   8ビット空間の符号化文字集合および文字エンコーディング。国や言語ごとにいくつかのバリエーションがある。最も有名なのはドイツ語やフランス語の文字を含む ISO 8859-1，通称 Latin-1 だろう。日本の JIS X 0201 も ISO 8859 のバリエーションと言える。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "OpenJDK 15.0.2 がリリースされた",
      "section": "release",
      "description": "今回は OpenJDK に関しては脆弱性の修正がない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/01/openjdk-15_0_2-is-released/",
      "published": "2021-01-21T11:32:19+00:00",
      "update": "2021-01-21T11:33:38+00:00",
      "content": "定例の Java マイナー・バージョンアップが行われた。 なんとビックリなことに今回は OpenJDK に関しては脆弱性の修正がない。\n OpenJDK Vulnerability Advisory: 2021/01/19  ただし Oracle Java については Java 8 以下で脆弱性の修正があるらしい。\n Oracle Java の脆弱性対策について(CVE-2020-14803)：IPA 独立行政法人 情報処理推進機構  これって OpenJDK には影響ないのか？ ホンマに？ \u0026hellip;まぁ，いいや。\nOpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk15.0.2/0d1cfde4252546c6931946de8db48ee2/7/GPL/openjdk-15.0.2_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-15.0.2_linux-x64_bin.tar.gz $ sudo ln -s jdk-15.0.2 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;15.0.2\u0026#34; 2021-01-19 OpenJDK Runtime Environment (build 15.0.2+7-27) OpenJDK 64-Bit Server VM (build 15.0.2+7-27, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern  うむうむ。 ちゃんと動くな。\nブックマーク  2021年1月Oracle製品のクリティカルパッチアップデートに関する注意喚起  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n   2021-01-10 に PlantUML V1.2021.0 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.15.7 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は複数の脆弱性について改修されている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/01/go-1_15_7-is-released/",
      "published": "2021-01-21T10:45:21+00:00",
      "update": "2021-01-21T10:45:46+00:00",
      "content": "予告通り， Go 1.15.7 がリリースされた。\n [security] Go 1.15.7 and Go 1.14.14 are released  今回は複数の脆弱性について改修されている。\ncmd/go: packages using cgo can cause arbitrary code execution at build time (CVE-2021-3115) The go command may execute arbitrary code at build time when cgo is in use on Windows. This may occur when running “go get”, or any other command that builds code. Only users who build untrusted code (and don’t execute it) are affected.\nIn addition to Windows users, this can also affect Unix users who have “.” listed explicitly in their PATH and are running “go get” or build commands outside of a module or with module mode disabled.\n via Go 1.15.7 and Go 1.14.14 are released  というわけで， Windows だけでなく UNIX 系のプラットフォームでも環境変数 PATH にカレントディレクトリ “.” が設定されているとヤバいので（そんなヤツおらんやろけど），きちんと対処すること。\n（以下未稿）\ncrypto/elliptic: incorrect operations on the P-224 curve (CVE-2021-3114) The P224() Curve implementation can in rare circumstances generate incorrect outputs, including returning invalid points from ScalarMult. via Go 1.15.7 and Go 1.14.14 are released  ただし\nThe crypto/x509 and golang.org/x/crypto/ocsp (but not crypto/tls) packages support P-224 ECDSA keys, but they are not supported by publicly trusted certificate authorities. No other standard library or golang.org/x/crypto package supports or uses the P-224 curve.. via Go 1.15.7 and Go 1.14.14 are released  ということなので，実質的なインパクトは小さい？\n（以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.15.7.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.15.7.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.15.7.linux-amd64.tar.gz $ sudo mv go go1.15.7 $ sudo ln -s go1.15.7 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.15.7 linux/amd64 アップデートは計画的に。\nブックマーク  Command PATH security in Go - The Go Blog Go でサブプロセスを起動する際は LookPath に気をつけろ！  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "spiegel-im-spiegel/ml v0.4.1 をリリースした",
      "section": "release",
      "description": "ヒストリ機能を簡易リングバッファに切り替えた。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/01/makelink-0_4_1-is-released/",
      "published": "2021-01-17T04:32:11+00:00",
      "update": "2021-01-17T04:33:09+00:00",
      "content": "Markdown 形式のリンクを生成する spiegel-im-spiegel/ml v0.4.0 および v0.4.1 をリリースした。\n Release v0.4.0 · spiegel-im-spiegel/ml · GitHub Release v0.4.1 · spiegel-im-spiegel/ml · GitHub  いや， v0.4.0 をリリースした後にエラーハンドリングをしくじってるのに気が付いて出し直し（笑）\n対話モード（-i オプション）のヒストリ機能を簡易リングバッファに切り替えた。 あと -l オプションでヒストリ数を指定できる。 既定は 0，つまりヒストリ機能を無効にしている。 またヒストリ情報を $XDG_CONFIG_HOME/ml/history ファイルに保存して再利用できるようにした。 ちなみに Windows 版では %APPDATA%\\ml\\hisotry ファイル， macOS では /Library/Application Support/ml/history ファイルとなる（筈）。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "GnuPG 2.2.27 がリリースされた",
      "section": "release",
      "description": "主に Windows 環境における不具合の修正のようだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/01/gnupg-2_2_27-is-released/",
      "published": "2021-01-13T09:41:38+00:00",
      "update": "2021-01-13T09:41:48+00:00",
      "content": "GnuPG 2.2.27 がリリースされた。\n [Announce] GnuPG 2.2.27 released  このバージョンは主に Windows 環境における不具合の修正のようだ。 併せて Gpg4win 3.1.15 もリリースされている。\n [Gpg4win-users-en] [Gpg4win-announce] Gpg4win 3.1.15 released  詳細はこちら。\n gpg: Fix regression in 2.2.24 for gnupg_remove function under Windows. [#5230] gpgconf: Fix case with neither local nor global gpg.conf. [9f37d3e6f3] gpgconf: Fix description of two new options. [#5221] Build Windows installer without timestamps. Note that the Authenticode signatures still carry a timestamp.  Release-info: https://dev.gnupg.org/T5234 via GnuPG 2.2.27 released  自前でビルドする際の対象パッケージは以下の通り。\n   # パッケージ名 バージョン 公開日 更新     1 Libgpg-error 1.41 2020-12-21    2 Libgcrypt 1.8.7 2020-10-23    3 Libassuan 2.5.4 2020-10-23    4 Libksba 1.5.0 2020-11-18    5 nPth 1.6 2018-07-16    6 ntbTLS 0.2.0 2020-08-27    7 GnuPG 2.2.27 2021-01-11     gpg-agent を Linux のサービスで起動している場合は\n$ systemctl --user restart gpg-agent とサービスを再起動するのを忘れずに。 これで\n$ gpg --version gpg (GnuPG) 2.2.27 libgcrypt 1.8.7 Copyright (C) 2021 Free Software Foundation, Inc. License GNU GPL-3.0-or-later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 となる。\nアップデートは計画的に。\nブックマーク  OpenPGP の実装  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    }
  ]
}
