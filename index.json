{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "まだ改元で消耗してるの？",
      "section": "remark",
      "description": "もう役所の書類で元号使うのやめようや。今回の改元は絶好の機会だったのに，これを逃したらまた数十年も「令和」に付き合わされるわけだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/troubles-of-the-japanese-new-era/",
      "published": "2019-04-17T04:47:50+00:00",
      "update": "2019-04-17T05:02:45+00:00",
      "content": " 全国の職業エンジニアの皆さん，改元に伴うあれこれでお疲れ様でした。 もうとっくに改修作業は終わって5月の改元をドキワクで待っていることと思います。\nと思ってたらこの期に及んで「テスト」と称して本番環境を弄って案の定トラブらせている自治体があったらしい。 他でもない，我が故郷の松江市だよ（日本の新聞サイトにはリンクしないようにしてるので元記事は省略）。\nなんでも本番環境でテストするのにコンビニに通達するのを忘れていて「令和」の元号で証明書類を出力させちゃったらしい。 松江市は回収しようとしているようだが，そんなレアなエラーを手放すわけないぢゃん（笑）\n金払ってでもコンビニで証明書を出すべきだったか。 いや，よく考えたら私はマイナンバーカードで手続きしてるから，そもそも紙の証明書は不要だった。\nていうか改元まであと2週間というタイミングで何でテストなんかしてるかなぁ。 しかも改元前の日付で「令和」で出てしまうというのはバグなのか仕様なのか。\nもしかして松江市は改元のタイミングでプログラムを入れ替えるつもりなのだろうか。 それって絶対にトラブルの元だよな。\nあー，ツッコミが止まんねー！\nもう役所の書類で元号使うのやめようや。 これから先，改元の度にこんな馬鹿騒ぎをするつもりなのだろうか。 今回の改元は（期間的な余裕もあったし）ドキュメントに記載する年号を和暦から西暦に切り替える絶好の機会だったのに，これを逃したらまた数十年も「令和」に付き合わされるわけだ。\n元号で遊ぶ ところで\n 令和へ対応せよ！元号のアルゴリズム - Qiita  という記事を見かけたのだが，みんなそんな難しいことをしているのだろうか。 つか年月日で桁を揃えて比較するってのは汎用機時代の発想だよな。 そういうのって脈々と受け継がれるものなのかねぇ。\n今どきは大抵の言語で時間クラスないしは時間関数を標準ライブラリで持ってるんだから，それを使えば簡単にできるぢゃん。\nまずは各元号の起点を調べておく。\n   元号 起点     明治の改暦 1873年1月1日   大正 1912年7月30日   昭和 1926年12月25日   平成 1989年1月8日   令和 2019年5月1日    なんで明治は「元年」を起点にしないかというと，明治6年（1873年）より前は暦が異なるため現行暦1 の加減算が使えないからである。\nじゃあ，この情報を元に西暦を和暦に変換する簡単なコードを書いてみよう。 Go 言語でね。\nこんな感じかな。\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;time\u0026#34; ) type EraName int const ( Unknown EraName = iota Meiji Taisho Showa Heisei Reiwa ) var ( eraString = map[EraName]string{ Unknown: \u0026#34;\u0026#34;, Meiji: \u0026#34;明治\u0026#34;, Taisho: \u0026#34;大正\u0026#34;, Showa: \u0026#34;昭和\u0026#34;, Heisei: \u0026#34;平成\u0026#34;, Reiwa: \u0026#34;令和\u0026#34;, } locJST = time.FixedZone(\u0026#34;JST\u0026#34;, 9*60*60) eraTrigger = map[EraName]time.Time{ Meiji: time.Date(1873, time.January, 1, 0, 0, 0, 0, locJST), Taisho: time.Date(1912, time.July, 30, 0, 0, 0, 0, locJST), Showa: time.Date(1926, time.December, 25, 0, 0, 0, 0, locJST), Heisei: time.Date(1989, time.January, 8, 0, 0, 0, 0, locJST), Reiwa: time.Date(2019, time.May, 1, 0, 0, 0, 0, locJST), } eraSorted = []EraName{Reiwa, Heisei, Showa, Taisho, Meiji} ) func (e EraName) String() string { if s, ok := eraString[e]; ok { return s } return \u0026#34;\u0026#34; } type JapaneseEra struct { time.Time } func New(t time.Time) JapaneseEra { return JapaneseEra{t.In(locJST)} } func (e JapaneseEra) Era() EraName { for _, es := range eraSorted { if !e.Before(eraTrigger[es]) { return es } } return Unknown } func (e JapaneseEra) YearEra() (EraName, int) { era := e.Era() if era == Unknown { return Unknown, 0 } year := e.Year() - eraTrigger[era].Year() + 1 if era == Meiji { return era, year + 5 } return era, year } func (e JapaneseEra) YearEraString() (string, error) { era, year := e.YearEra() if era == Unknown { return \u0026#34;\u0026#34;, fmt.Errorf(\u0026#34;out of range: %v\u0026#34;, e) } if year == 1 { return fmt.Sprintf(\u0026#34;%v元年\u0026#34;, era), nil } return fmt.Sprintf(\u0026#34;%v%d年\u0026#34;, era, year), nil } func main() { flag.Parse() argsStr := flag.Args() tm := time.Now() if len(argsStr) \u0026gt; 0 { if len(argsStr) \u0026lt; 3 { fmt.Fprintln(os.Stderr, \u0026#34;年月日を指定してください\u0026#34;) return } args := make([]int, 3) for i := 0; i \u0026lt; 3; i++ { num, err := strconv.Atoi(argsStr[i]) if err != nil { fmt.Fprintln(os.Stderr, err) return } args[i] = num } tm = time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.Local) } ye := New(tm) ys, err := ye.YearEraString() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Printf(\u0026#34;%s%d月%d日\\n\u0026#34;, ys, ye.Month(), ye.Day()) } さっそく動かしてみる。\n$ go run main.go 平成31年4月17日 $ go run main.go 2019 4 30 平成31年4月30日 $ go run main.go 2019 5 1 令和元年5月1日 ほら，簡単でしょ。 余暇のやっつけコードでもこの程度は書けるってことだね。\nやぁ，遊んだ遊んだ。\nブックマーク  1l0/sumeragi : 皇紀や元号を出力するパッケージ 新元号「文字」という技術的負債   ちなみに日本の現行暦は「グレゴリオ暦と同じ」だがグレゴリオ暦ではない。暦の原点が異なるからだ。詳しくは拙文「「暦」日本史」を参考にどうぞ。 [return]   "
    },
    {
      "title": "Ubuntu に ATOM エディタを導入する",
      "section": "remark",
      "description": "この記事は随時更新します。 悪しからずご了承の程を。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/atom-in-ubuntu/",
      "published": "2019-04-15T14:32:39+00:00",
      "update": "2019-04-17T00:50:02+00:00",
      "content": " さて，そろそろ ATOM を Ubuntu に入れようか。\nなお，この記事は随時更新します。 悪しからずご了承の程を。\n前準備 ATOM のリポジトリに各バージョンの atom-amd64.deb ファイルが公開されているので，これを使う。\ndeb ファイルを使ってインストールを行うには gdebi というコマンドを使うらしい。 これは ATP で取得可能だ。\n$ sudo apt show gdebi-core Package: gdebi-core Version: 0.9.5.7+nmu2 Priority: optional Section: universe/admin Source: gdebi Origin: Ubuntu Maintainer: Ubuntu Developers \u0026lt;ubuntu-devel-discuss@lists.ubuntu.com\u0026gt; Original-Maintainer: Ubuntu Developers \u0026lt;ubuntu-dev-team@lists.alioth.debian.org\u0026gt; Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 876 kB Depends: python3:any (\u0026gt;= 3.3.2-2~), python3-apt, python3-debian, file Suggests: xz-utils | xz-lzma Task: ubuntu-mate-core, ubuntu-mate-desktop Download-Size: 116 kB APT-Sources: http://jp.archive.ubuntu.com/ubuntu cosmic/universe amd64 Packages Description: simple tool to install deb files gdebi を使うと、ローカルの deb パッケージをその依存関係を解決しながらインス トールできます。apt は同じ動作をしますが、インストールできるのはリモート (http, ftp) にあるパッケージのみです。 . It can also resolve build-depends of local debian/control files. . This package contains the libraries and command-line utility. ふむむ。 なるほど。\nではインストールしてしまおう。\n$ sudo apt install gdebi-core インストールできたら動作確認しておく。\n$ gdebi --version 0.9.5.7+nmu2 よしよし。\nATOM の導入 リリースページ から最新版の atom-amd64.deb ファイルをダウンロードし gdebi コマンドでインストールする。\n$ sudo gdebi atom-amd64.deb Reading package lists... Done Building dependency tree Reading state information... Done Reading state information... Done 以下のパッケージのインストールが必要です: gconf-service gconf-service-backend gconf2 gconf2-common libgconf-2-4 libpython-stdlib libpython2-stdlib python python-minimal python2 python2-minimal python2.7 python2.7-minimal A hackable text editor for the 21st Century. Atom is a free and open source text editor that is modern, approachable, and hackable to the core. ソフトウェアパッケージをインストールしますか? [y/N]:y [...snip...] atom-amd64.deb を展開する準備をしています ... atom (1.36.0) を展開しています... atom (1.36.0) を設定しています ... desktop-file-utils (0.23-3ubuntu3) のトリガを処理しています ... gnome-menus (3.13.3-11ubuntu2) のトリガを処理しています ... mime-support (3.60ubuntu1) のトリガを処理しています ... インストールが完了するとドックのアプリボタンで表示されるアプリ一覧にアイコンが追加される。 もちろんターミナルからも起動できる。 1.36 から単一のファイルのみを指定して起動することが可能になった。\n$ atom ~/work/foo.txt   善き哉。\nATOM 用にフォントを導入する。 個人的にテキストエディタのフォントは Inconsolata，そして日本語は明朝体に限る。 日本語は標準の NOTO フォントを使うとして Inconsolata はネットから取ってこないと。\nUbuntu ではフォントの置き場所は以下の3箇所になるようだ。\n /usr/share/fonts : システムフォント /usr/local/share/fonts : 追加フォントをマシンで共有する場合 ~/.fonts : 個人で導入する場合  これらのディレクトリのいずれかに入れたらキャッシュを更新しておく。\n$ fc-cache -fv ちゃんと導入できたか確認しておこう。\n$ fc-list | grep Inconsolata /home/username/.fonts/Inconsolata.otf: Inconsolata:style=Medium よーし，うむうむ，よーし。\nATOM でフォントを指定する場合には Settings → Editor Settings の Font Family の項目で\nInconsolata, Noto Serif CJK JP  などと指定しておけばよい。 ちなみに NOTO フォントは以下のように配置されている。\n$ fc-list | grep Noto | grep JP /usr/share/fonts/opentype/noto/NotoSansCJK-Bold.ttc: Noto Sans CJK JP,Noto Sans CJK JP Bold:style=Bold,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-Bold.ttc: Noto Serif CJK JP:style=Bold /usr/share/fonts/opentype/noto/NotoSansCJK-Bold.ttc: Noto Sans Mono CJK JP,Noto Sans Mono CJK JP Bold:style=Bold,Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Medium.ttc: Noto Sans CJK JP,Noto Sans CJK JP Medium:style=Medium,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-Black.ttc: Noto Serif CJK JP,Noto Serif CJK JP Black:style=Black,Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc: Noto Sans CJK JP,Noto Sans CJK JP Regular:style=Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-Light.ttc: Noto Serif CJK JP,Noto Serif CJK JP Light:style=Light,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-Regular.ttc: Noto Serif CJK JP:style=Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc: Noto Sans Mono CJK JP,Noto Sans Mono CJK JP Regular:style=Regular /usr/share/fonts/opentype/noto/NotoSansCJK-DemiLight.ttc: Noto Sans CJK JP,Noto Sans CJK JP DemiLight:style=DemiLight,Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Thin.ttc: Noto Sans CJK JP,Noto Sans CJK JP Thin:style=Thin,Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Light.ttc: Noto Sans CJK JP,Noto Sans CJK JP Light:style=Light,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-SemiBold.ttc: Noto Serif CJK JP,Noto Serif CJK JP SemiBold:style=SemiBold,Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Black.ttc: Noto Sans CJK JP,Noto Sans CJK JP Black:style=Black,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-ExtraLight.ttc: Noto Serif CJK JP,Noto Serif CJK JP ExtraLight:style=ExtraLight,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-Medium.ttc: Noto Serif CJK JP,Noto Serif CJK JP Medium:style=Medium,Regular ブックマーク  Install Atom on Ubuntu 18.04 Bionic Beaver Linux - LinuxConfig.org ubuntu18.04にAtomをインストール – v0.0.1 Ubuntu 18.04 LTSの日本語フォントを変更する！【詳細解説】 | LFI UbuntuTips/Desktop/InstallFont - Ubuntu Japanese Wiki CentOS/Ubuntuでフォントを追加する方法 | 俺的備忘録 〜なんかいろいろ〜 GitHub、フリーのコードエディター「Atom 1.36」を正式公開 - 窓の杜 Items in the Menu Bar are invisible on Ubuntu 18.10 when atom window is focused. · Issue #18535 · atom/atom · GitHub\n ATOM Editor に関するメモ\n  "
    },
    {
      "title": "Ubuntu に Mono を導入する",
      "section": "remark",
      "description": "今回は Mono および Mono で動くアプリケーションを導入する。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/mono-in-ubuntu/",
      "published": "2019-04-14T10:36:23+00:00",
      "update": "2019-04-14T10:36:43+00:00",
      "content": " 今回は Mono および Mono で動くアプリケーションを導入する。\nMono の導入 Mono を導入するにはリポジトリの登録から始める必要がある。 gnupg と ca-certificates は既に入ってるみたいなので公開鍵のインポートとソースリストの追加から。\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF $ echo \u0026#34;deb https://download.mono-project.com/repo/ubuntu stable-bionic main\u0026#34; | sudo tee /etc/apt/sources.list.d/mono-official-stable.list $ sudo apt update 続いて mono-devel を導入する。\n$ sudo apt install mono-devel インストール処理が完了したら念のため動作確認をしておこう。\n$ mono -V Mono JIT compiler version 5.20.1.19 (tarball Thu Apr 11 09:02:17 UTC 2019) Copyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com TLS: __thread SIGSEGV: altstack Notifications: epoll Architecture: amd64 Disabled: none Misc: softdebug Interpreter: yes LLVM: yes(600) Suspend: hybrid GC: sgen (concurrent by default) よーし，うむうむ，よーし。\nKeePass の導入 KeePass は OSS のパスワード管理ツールで，基本的には Windows 用だが各種プラットフォーム用のバージョンが公開されている。 Ubuntu では APT で導入可能である。\n$ sudo apt show keepass2 Package: keepass2 Version: 2.39.1+dfsg-1 Priority: optional Section: universe/utils Origin: Ubuntu ... ちょっとバージョンが古いがプラットフォームが違うし，まぁいいだろう。 インストールしてしまおう。\n$ sudo apt install keepass2 インストールが完了するとドックのアプリボタンで表示されるアプリ一覧にアイコンが追加される。 あとは Windows 版と同じように使える。\nパスワードを覚えるなんて脳みその無駄遣い。 適切な管理ツールでパスワード管理を行いましょう。\nGit Extensions の導入 Git Extensions は .NET Framework 上で動く git 用の GUI ツールだが， Mono 版もあって他プラットフォームでも利用できる。 ただし Mono 版はバージョン 2 系までしか対応していないので注意が必要である。\nダウンロードページから Mono 版の最新バージョンをダウンロードする。\n適当なディレクトリにダウンロードした zip ファイルを unzip コマンドで展開する。 GitExtensions ディレクトリが作成されてファイルが展開されている筈である。\n展開されたファイルの中に gitext.sh があるので，これに実行権限を付与して起動する。 今後のためにパスを通しておいたほうがいいだろう。\n最初に Git Extensions を起動すると言語の選択ウィンドウが表示される。\n 日本語があってよかったね。 あとは Windows 版と同じ。\nけど Windows 版と比べて操作感がイマイチなんだよなぁ。 まぁ Git Extensions をメインに作業するわけではないので，これでもいいか。\n.NET Framework と Mono と .NET Core .NET Framework と Mono と .NET Core の関係がいまひとつ分からなかったのでちょろんと調べてみた。 かなり大雑把な説明なのはご容赦。\n.NET Framework .NET Framework が最初に公開されたのは2001年。 基盤となる CLI (Common Language Infrastructure) や CLR (Common Language Runtime) は標準化され Windows 以外のプラットフォームでも実装可能となるよう設計されたが，実際にはリファレンス実装である .NET Framework は Windows 以外には対応しなかった。 まぁ，当時の Microsoft は FOSS に敵対的だったし，それもやむなしというところだろうか。\nMono と Xamarin 当然ながら，.NET Framework に対抗する OSS 製品を作ろうという動きがあり，そのうちのひとつが Mono Project であった。 Mono はマルチプラットフォームで動作するアプリケーション基盤として実装されているのが特徴である。\nMono を巡っては紆余曲折があったが（生臭い話は省略），最終的に Xamarin が開発母体となった。\nXamarin は Mono Project のオーナー企業であると同時に Mono を基盤とした製品群を指すようだ。 なので今後は Mono/Xamarin と一括りにしてしまおう。\n企業としての Xamarin は後に Microsoft に買収され Mono/Xamarin は Microsoft 傘下である .NET Foundation において今も開発が続けられている。\n.NET Core 一方，実質 Windows でしか動作しない .NET Framework の派生として .NET Core が Microsoft からリリースされた。 .NET Core はマルチプラットフォームで動作する OSS 製品として，こちらも .NET Foundation で開発が行われている。\nここに於いて Microsoft は経営方針の大転換を果たしたわけだ。\n.NET Core と Mono/Xamarin 現在 Microsoft は OSS の .NET シリーズとして .NET Core と Mono/Xamarin の2系統の製品を持っている。 両者の棲み分けは以下のような感じらしい。\n    via ASCII.jp：.NET Core / .NET Framework / Xamarin / Monoの関係を整理する  つまり Linux や macOS，あるいは iOS や Android の GUI アプリケーションとしては Mono/Xamarin，サーバ・サイドあるいはクラウド向けには .NET Core ということのようだ。 さらに将来的には Windows アプリケーション向けの .NET Framework，マルチプラットフォーム向けの .NET Core と Mono/Xamarin の基盤を共通化すると表明されている。\n    via ASCII.jp：.NET Core / .NET Framework / Xamarin / Monoの関係を整理する  そうなったら Mono も役目を終える感じになるのかねぇ。\nブックマーク  C#7に完全対応した「Mono 5.0」が公開 | OSDN Magazine ASCII.jp：.NET Core / .NET Framework / Xamarin / Monoの関係を整理する (1/3) .NET Core について | Microsoft Docs .NETの派生を理解する オープンソースのMonoと.NET Coreを比較\n How To: run Git Extensions on Linux · gitextensions/gitextensions Wiki\n  "
    },
    {
      "title": "SNS は他者を差別するシステムか",
      "section": "remark",
      "description": "利用者側は SNS が「選別装置」であることを認識した上で「社交の場」としてサービスとの間に程よい距離感を保つのが賢明なのだと思う。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/sns/",
      "published": "2019-04-14T04:38:20+00:00",
      "update": "2019-04-14T04:40:53+00:00",
      "content": " 最近 Linus Torvalds 氏へのインタビュー記事を見つけて\n 「馬鹿げたたわ言も言えなくなった」--復帰後のトーバルズ氏が自己評価 - ZDNet Japan  「馬鹿げたたわ言も言えなくなった」と言いつつ Facebook を始めとする SNS を思いっきり dis ってる発言を見て笑ってしまったのだが\n  「わたしは最近の『ソーシャルメディア』を憎んでいる。Twitter、Facebook、Instagram。あれは社会の病癖だ。悪い振る舞いを助長している」\n[...]\n「『いいね』と『共有』のモデルそのものがガラクタだ。そこには努力も品質管理もない」とTorvalds氏は述べている。  via 「馬鹿げたたわ言も言えなくなった」--復帰後のトーバルズ氏が自己評価  という意見には全面的に同意するしかない。\nこれで思い出したのが2011年に公開された映画「ソーシャル・ネットワーク」である。 当時私は Facebook の利用について友人と議論や実践を模索していて，この映画も観に行った。\n  「ソーシャル・ネットワーク」の前半では学生たちが集まる社交クラブについての描写がいくつかある。それは社交クラブというよりは友愛結社というべきもので，初期の “The Facebook” はまさにリアルの友愛結社の仕組みを取り込み，そして友愛結社そのものを取り込んで急成長していく（映画の内容がどこまで事実に即しているかは分からないが）  via 「ソーシャル・ネットワーク」と Facebook  「社交クラブ」と「友愛結社」の違いについて，10年以上前に読んだ『秘密結社の世界史』ではこう説明されていた。\n  社交クラブと友愛結社がちがうのは、後者が儀礼を第一義と見て、それに多くの時間をかけ、社交の時間を犠牲にしていることだ  via 秘密結社の世界史  「『いいね』と『共有』のモデル」に耽溺する Facebook 等の SNS はまさに友愛結社的な側面を強めていると言えるかも知れない。\n友愛結社は「友愛」の名の下に他者を選別（包摂\u0026amp;排除）するシステムである。 「入社式（initiation）」はその典型だろう。 ここからの連想で考えるなら Facebook 等の SNS に政治広告や欺瞞記事が溢れるのはむしろ当然の帰結に思える。 出稿者はそれらにどう反応 (engagement) するかで他者を選別しているのだから。\n最近\n MIT Tech Review: フェイスブック広告が 「差別」を排除できない 根本的な理由 フェイスブック、広告主が意図しないユーザー選別による「差別」 | 新聞紙学的  といった記事を見かけるが， SNS そのものが「選別装置」であるなら，そこに「差別」が生まれるのはむしろ必然なんじゃないか。 もし SNS から「差別」をなくしたいなら「SNS でないもの」になるしかない。 それはサービス自体を否定することでありプロバイダ側は絶対に許容できないだろうが（と考えるなら最近の Mark Zuckerberg 氏の奇天烈な発言にも納得がいく）。\nそして利用者側は SNS が「選別装置」であることを認識した上で「社交の場」としてサービスとの間に程よい距離感を保つのが賢明なのだと思う。 まぁ，私は既に Facebook からの撤退戦を始めてるけどね（笑）\n参考図書  ソーシャル・ネットワーク (字幕版) Scott Rudin (プロデュース), Dana Brunetti (プロデュース), Michael De Luca (プロデュース), Cean Chaffin (プロデュース)  (Release 2013-11-26) Movie Prime Video ASIN: B00FW5SSCK 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この映画が公開された当時（2011年）は日本でも Facebook が一般（特に年配層）に浸透し始めていたときで，スクリーン上の狂騒に苦笑したものだが，その Facebook が広告まみれの駄システムに堕ちてしまうとは誰も思わなかっただろうな（笑）\nreviewed by Spiegel on 2019-04-14 (powered by amazon-item 0.2.1)\n  秘密結社の世界史　フリーメーソンからトランプまで、その謎と陰謀 (朝日文庫) 海野　弘 朝日新聞出版 2017-06-07 (Release 2017-07-07) eBooks Kindle版 ASIN: B073PT6WDB 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  文庫本版がでてたのか。古代から現代にかけての「結社」の系譜を俯瞰的に解説している。読み物として面白かった。\nreviewed by Spiegel on 2019-04-14 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "2019-04-14 のブックマーク",
      "section": "bookmarks",
      "description": "「史上初、ブラックホールの撮影に成功 ― 地球サイズの電波望遠鏡で、楕円銀河M87に潜む巨大ブラックホールに迫る」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/04/14-bookmarks/",
      "published": "2019-04-14T01:30:56+00:00",
      "update": "2019-04-14T01:35:09+00:00",
      "content": " リリース情報  Mozilla、「Firefox」v66.0.3をリリース - 窓の杜 Atom 1.36 | Atom Blog  セキュリティ＆プライバシー関連  トレンドマイクロ、キー操作自動化ツール「AutoHotkey」を悪用した攻撃を確認・警告 - 窓の杜 フェイスブック、広告主が意図しないユーザー選別による「差別」 | 新聞紙学的 不正移管によるドメイン名ハイジャックについてまとめてみた - piyolog iPhoneを狙う強力なスパイウェアが登場 | TechCrunch Japan MIT Tech Review: ニューヨークの顔認識実験が大失敗、成功率はまさかのゼロ Firefoxにフィンガープリンティングと仮想通貨発掘プログラムへのプロテクションを追加 | TechCrunch Japan  「Firefox」が暗号通貨の採掘とフィンガープリンティングを防止する機能を導入へ - 窓の杜  嫌がらせに利用された出会い系アプリは嫌がらせの責任を負うべきなのか – P2Pとかその辺のお話R 2019年 4月 Intel 製品の脆弱性に関する注意喚起 Microsoft 製品の脆弱性対策について(2019年4月) ：IPA 独立行政法人 情報処理推進機構  2019年 4月マイクロソフトセキュリティ更新プログラムに関する注意喚起  Adobe Flash Player の脆弱性対策について(APSB19-19)(CVE-2019-7096等)：IPA 独立行政法人 情報処理推進機構  Adobe Flash Player の脆弱性 (APSB19-19) に関する注意喚起  Adobe Acrobat および Reader の脆弱性対策について(APSB19-17)(CVE-2019-7111等)：IPA 独立行政法人 情報処理推進機構  Adobe Acrobat および Reader の脆弱性 (APSB19-17) に関する注意喚起  グーグル、Androidスマホに組み込みのセキュリティキーを使った2段階認証を可能に - ZDNet Japan 危険物が製造された複数の事件についてまとめてみた - piyolog  天文関連  MIT Tech Review: 「太陽嵐」の脅威に備えよ、 ESAが計画する宇宙天気観測ミッション MIT Tech Review: 動物園仮説：コンピューターモデルで地球人類が無視されている可能性は低いと判明 The Drake Equation: Revisiting a Classic Tool to Estimate the Odds of Contact 史上初、ブラックホールの撮影に成功 ― 地球サイズの電波望遠鏡で、楕円銀河M87に潜む巨大ブラックホールに迫る | 国立天文台(NAOJ)  史上初、ブラックホールの撮影に成功！8つの電波望遠鏡束ねた「イベント･ホライズン･テレスコープ」で画像化 - Engadget 日本版 2019年4月11日ニュース「5500万光年離れたブラックホールの影の撮影に成功 史上初の成果と日本の国立天文台など国際チーム」 | SciencePortal 史上初めて捉えられたブラックホールの画像、地球から5500万光年 | TechCrunch Japan MIT Tech Review: これが「ブラックホール」だ！国際チームが初の撮影に成功 初めてのブラックホールの画像を作ったアルゴリズムはMITの院生Katie Boumanの指揮で開発された | TechCrunch Japan 映像 | 国立天文台(NAOJ)   その他  機械学習の関数「ボルツマンマシン」を用いて、量子多体系という難問に挑む | academist Journal サイバーロッカーのRapidVideo、広告モデルに依存した無料ストリーミングからプレミアムプランへの移行方針を明らかに – P2Pとかその辺のお話R MIT Tech Review: フェイスブック広告が 「差別」を排除できない 根本的な理由 「馬鹿げたたわ言も言えなくなった」--復帰後のトーバルズ氏が自己評価 - ZDNet Japan GPSの「2000年問題」が終了、週番号ロールオーバーを迎えた | TechCrunch Japan ブログ: Internet RFCが50周年 「ハロー・ワールド」やっと登場したそうでない人たちに手渡すことができるわれわれの物語 #151冊目 #1000冊紹介する #ハロワ Microsoft、「Chromium」ベースの新しい「Microsoft Edge」をプレビュー公開 - 窓の杜 ［速報］Google、大手クラウドに不満を表明していたMongoDB、RedisらOSSベンダと戦略的提携。Google CloudにOSSベンダのマネージドサービスを統合。Google Cloud Next '19 － Publickey 人手不足は本当に「悪」なのか　騙され続ける日本人 (1/6) - ITmedia ビジネスオンライン Githubにdeploy用の鍵を追加する - Qiita 全社的に会社用GitHubアカウントを廃止した件 - ZOZO Technologies TECH BLOG Amazonプライム、日本で初の値上げ　年会費4900円に - ITmedia NEWS EFF Statement on Assange Indictment and Arrest | Electronic Frontier Foundation 「ユーザーデータはユーザーのもの」--グーグルが語るプライバシーへの取り組み - ZDNet Japan 初めて Scratch に触れた - 電気ウナギ的○○ PHP 8でのJIT採用が可決、賛成50反対2。PHP 7.4への試験的採用は否決 － Publickey  "
    },
    {
      "title": "Go 1.12.4 がリリースされた",
      "section": "release",
      "description": "なんか 1.12.3 がちゃんと直ってなかったみたい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/04/go-1_12_4-is-released/",
      "published": "2019-04-13T10:25:08+00:00",
      "update": "2019-04-13T10:31:24+00:00",
      "content": " なんか 1.12.3 がちゃんと直ってなかったみたい。\n Go 1.12.4 and Go 1.11.9 are released - Google Group   go1.12.3 (released 2019/04/08) was accidentally released without its intended fix. It is identical to go1.12.2, except for its version number. The intended fix is in go1.12.4.  via Release History - The Go Programming Language  というわけで Linux 環境の方は 1.12.4 にアップデートしましょう。\nアップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "Hugo 0.55 リリースでまた後方互換性が壊れた",
      "section": "hugo",
      "description": "しょうがないので shortcode を設計し直したですよ orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/hugo/broken-backward-compatibility-by-hugo-0_55/",
      "published": "2019-04-13T10:05:15+00:00",
      "update": "2019-04-14T01:30:04+00:00",
      "content": " Shortcode の仕様変更 Hugo 0.45 のときは組み込み shortcode である ref/relref の仕様変更だったが，今回は shortcode そのものの仕様が変更になった。\n Hugo 0.55.0: The early Easter Egg Edition! | Hugo  Shortcodes using the {{% %}} as the outer-most delimiter will now be fully rendered when sent to the content renderer (e.g. Blackfriday for Markdown), meaning they can be part of the generated table of contents, footnotes, etc. via Hugo 0.55.0: The early Easter Egg Edition!  具体的な例を挙げたほうが分かりやすいだろう。\nたとえば記述内容を \u0026lt;div\u0026gt; 要素で囲むだけの簡単な shortcode “div-box” を作ってみる。 コードはこんな感じ。\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;{{ .Inner }}\u0026lt;/div\u0026gt; この div-box を使って\n{{\u0026lt; div-box \u0026gt;}}**Hello world!**{{\u0026lt; /div-box \u0026gt;}} と書けば .Inner 変数の内容がそのまま展開されて\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;**Hello world!**\u0026lt;/div\u0026gt; となる。 ここで\n{{% div-box %}}**Hello world!**{{% /div-box %}} と書き換えると，以前のバージョンでは\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;strong\u0026gt;Hello world!\u0026lt;/strong\u0026gt;\u0026lt;/div\u0026gt; のように .Inner 変数の内容が markdown の文法に従って変換されていたのが， 0.55 からは {{\u0026lt; \u0026gt;}} と同じように\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;**Hello world!**\u0026lt;/div\u0026gt; と素通ししてしまうのだ。 もし markdown として処理したければ shortcode 側で\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;{{ .Inner | markdownify }}\u0026lt;/div\u0026gt; と .Inner 変数の内容を markdownify 関数に渡して明示的に変換する必要がある1。\nなんでこんなことになったかというと {{% %}} での処理は地の記述と連動しているらしい。 たとえば span という名前で以下の内容の shortcode をつくり\n\u0026lt;span\u0026gt;{{ .Inner }}\u0026lt;/span\u0026gt; これを markdown の表の中で使うと\n| 強調したい | | ---------- | | {{\u0026lt; span \u0026gt;}}**強調**{{\u0026lt; /span \u0026gt;}} | | {{% span %}}**強調**{{% /span %}} |    強調したい     **強調**   強調    という感じに {{\u0026lt; \u0026gt;}} と {{% %}} で違いが生じる。\nHugo のテンプレート処理は文脈依存になっていて，同じ記述でもどの要素の中で書かれるか（\u0026lt;head\u0026gt; 要素か \u0026lt;body\u0026gt; 要素か，あるいは JavaScript か CSS か）で出力が違ったりする。 おそらく shortcode の {{% %}} 記述でも同じように文脈依存で出力が変わるようにしたかったのだろう。\nでも，私は .Inner 変数の展開を {{\u0026lt; \u0026gt;}} か {{% %}} かで使い分けていたので，今回のアップデートで大ダメージを食らってしまったですよ。 しょうがないので shortcode を設計し直したけどね orz\n今後の shortcode の運用方針は以下のような感じだろうか。\n .Inner の内容を markdown ドキュメントとして処理するかどうか明示的に制御する場合は {{\u0026lt; \u0026gt;}} を使う .Inner の処理を文脈依存で行う（shortcode を入れ子にするなどの）場合は {{% %}} を使う  後方互換性が壊れる変更は，少なくとも最初はオプトアウトではなくオプトインで組み込めるようにして欲しい。\nShortcode の入れ子ができてる 今回いろいろ弄っていて気がついたのだが，いつの間にか shortcode の入れ子ができるようになってたんだね。 いつのバージョンからだろう。\nたとえば\n{{% div-box %}}{{% ruby \u0026#34;Hello world!\u0026#34; %}}こんにちは世界{{% /ruby %}}{{% /div-box %}} と書くと\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;ruby\u0026gt;\u0026lt;rb\u0026gt;こんにちは世界\u0026lt;/rb\u0026gt;\u0026lt;rp\u0026gt; (\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;Hello world!\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;) \u0026lt;/rp\u0026gt;\u0026lt;/ruby\u0026gt;\u0026lt;/div\u0026gt; こんにちは世界 (Hello world!)  などとできるようになっていた。 入れ子記述は {{\u0026lt; \u0026gt;}} でも {{% %}} でもできる。 {{\u0026lt; \u0026gt;}} と {{% %}} 混在でもOK。\nちなみに ruby は自作の shortcode で中身はこんな感じ。\n\u0026lt;ruby\u0026gt;\u0026lt;rb\u0026gt;{{ .Inner }}\u0026lt;/rb\u0026gt;\u0026lt;rp\u0026gt; (\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;{{ index .Params 0 }}\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;) \u0026lt;/rp\u0026gt;\u0026lt;/ruby\u0026gt; 特に権利は主張しないので（するほどの内容じゃないし）自由に使ってください。\nDeprecated な変数・関数 Hugo 0.55 を起動すると以下のワーニングが出るようになった。\n$ hugo WARN 2019/04/13 09:00:00 Page\u0026#39;s .Hugo is deprecated and will be removed in a future release. Use the global hugo function. WARN 2019/04/13 09:00:00 Page\u0026#39;s .RSSLink is deprecated and will be removed in a future release. Use the Output Format\u0026#39;s link, e.g. something like: {{ with .OutputFormats.Get \u0026#34;RSS\u0026#34; }}{{ .RelPermalink }}{{ end }}. WARN 2019/04/13 09:00:00 Page\u0026#39;s .GetParam is deprecated and will be removed in a future release. Use .Param or .Params.myParam. テンプレート内で .Hugo, .RSSLink 変数および .GetParam 関数が使われていると上記ワーニングが出る。\n.Hugo の廃止と代替手段 （以前の内容を書き換えた）\n.Hugo 変数は将来バージョンで削除されるようだ。 代替として（変数ではなく） hugo 関数が用意されている（Thanx @peaceiris）。 出力例は以下の通り。\n  テンプレート 出力内容  {{ hugo.Generator }} \u0026lt;meta name=\u0026#34;generator\u0026#34; content=\u0026#34;Hugo 0.55.1\u0026#34; /\u0026gt;  {{ hugo.Version }} 0.55.1  {{ hugo.CommitHash }} 223b3c2e  {{ hugo.BuildDate }} 2019-04-12T09:56:45Z  {{ hugo.Environment }} production   この手が使えるなら .Site 変数も関数で用意してほしいものである。\n.RSSLink の廃止と代替手段 .RSSLink 変数も将来バージョンで削除されるようだ。 代替として .AlternativeOutputFormats および .OutputFormats 変数が使える。 たとえば \u0026lt;head\u0026gt; 要素内なら\n{{ with .Site.Home.AlternativeOutputFormats.Get \u0026#34;RSS\u0026#34; }} \u0026lt;link rel=\u0026#34;alternate\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; type=\u0026#34;application/rss+xml\u0026#34; title=\u0026#34;{{ $.Site.Title | plainify }}\u0026#34;\u0026gt; {{ end }} と書けばいいし \u0026lt;head\u0026gt; 要素以外なら\n{{ with .OutputFormats.Get \u0026#34;RSS\u0026#34; }} \u0026lt;a href=\u0026#39;{{ .RelPermalink }}\u0026#39; title=\u0026#39;Feed\u0026#39;\u0026gt;Feed\u0026lt;/a\u0026gt; {{ end }} などと書ける。 .AlternativeOutputFormats および .OutputFormats 変数はかなり応用範囲が広くて，たとえば私はフィードを JSON 形式でも用意しているが，\n{{ with .Site.Home.AlternativeOutputFormats.Get \u0026#34;JSON\u0026#34; }} \u0026lt;link rel=\u0026#34;alternate\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; type=\u0026#34;application/json\u0026#34; title=\u0026#34;{{ $.Site.Title | plainify }}\u0026#34;\u0026gt; {{ end }} と書けば簡単に \u0026lt;head\u0026gt; 要素に組み込める。\n.GetParam の廃止と代替手段 .GetParam 関数については随分前からアナウンスがあったので使っている人はいないと思うが .Param 関数で代替できる。\nブックマーク  0.55.1: 3 Bug Fixes | Hugo .Hugo.Generator は廃止されるので hugo.Generator を使おう - Qiita\n Shortcodes で HTML コードを埋め込む\n   もうひとつの方法としてはテンプレート・ファイルの先頭で {{ $_hugo_config := `{ \u0026quot;version\u0026quot;: 1 }` }} と呪文を唱えることで 0.55 以前の動作に戻る。が，これ将来バージョンで無効になるよなぁ，多分。 [return]   "
    },
    {
      "title": "Go 1.12.3 がリリースされた",
      "section": "release",
      "description": "この前 1.12.2 が出たばかりなんだけどね。 Linux 環境の方は要アップデート。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/04/go-1_12_3-is-released/",
      "published": "2019-04-09T12:32:01+00:00",
      "update": "2019-04-09T12:49:03+00:00",
      "content": " この前 1.12.2 が出たばかりだが Go 1.12.3 リリースされた。 セキュリティ・アップデートはなし。\n Go 1.12.3 and Go 1.11.8 are released - Google Group   go1.12.3 (released 2019/04/08) fixes an issue where using the prebuilt binary releases on older versions of GNU/Linux led to failures when linking programs that used cgo. Only Linux users who hit this issue need to update.   via Release History - The Go Programming Language  というわけで Linux 環境の方はアップデートしたほうがいいだろう。\nアップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "指紋認証と FaceID は解除せよ",
      "section": "remark",
      "description": " セキュリティのために「個人の自由」を売り渡してはいけないのだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/remove-fingerprint-unlock-and-faceid/",
      "published": "2019-04-08T13:54:17+00:00",
      "update": "2019-04-08T13:57:02+00:00",
      "content": " タイトルは釣りです，もちろん。\nEFF から面白い記事が出てた。\n Attending a Protest | Surveillance Self-Defense  この記事は抗議行動を含む市民活動においてセキュリティないしはプライバシーのリスクとなりうるものを軽減するためのアドバイスである。 日付が4月1日になってたのでエイプリルフールネタかと思ったのだが，どうもマジ話らしい。\n英語不得手なので記事の全部を紹介することは出来ないが “Before the Protest” の節だけちょろんと紹介しよう（だれか翻訳しないかな。ちなみに原文は CC BY で公開されている）。\nEnable full-disk encryption on your device まぁ，これは当然だよね。\n抗議活動以前に携帯端末は紛失・盗難のリスクが高い。 （犯罪者だろうが国家だろうが）データを盗もうとする側は「貴方」の携帯端末に気を遣ったりしない。 最悪の場合，端末をぶっ壊してでもデータを吸い上げようとするだろう。\n注意しないといけないのは外部ストレージ（SD カードなど）の暗号化は別途行わなければならないということ。 あるいはそういったものの暗号化が出来ないかもしれない。\nもっと言うとストレージの暗号化が出来るデジカメはあまりないらしい。\n In addition, many digital cameras lack the ability to encrypt. It is safe to assume that photos and videos taken with digital cameras will be stored unencrypted, unless explicitly stated otherwise.  本気で携帯端末を暗号化するのはけっこう大変かもしれない。\nRemove fingerprint unlock and FaceID つい先日も Twitter か Facebook の TL で書いたような気がするが，いわゆる生体情報（biometric）は秘密情報ではない。 故に生体情報を認証に使うべきではない。\n生体情報を認証に使うのなら相手（犯罪者かもしれないし国家かもしれない）はそれを取得するために躊躇なく物理的手段を講じるだろう1。 グミで指紋のコピーを作ったりどっかから顔写真を入手する必要はない。 本人を連れてきて無理やり認証してしまえばいいのだ。 本人が抵抗するなら首か手首を切り取ってしまえばいいのだ2。\n In the U.S., using a biometric—like your face scan or fingerprint—to unlock your phone compromises protections for the contents of your phone afforded to you under the Fifth Amendment privilege against compelled incrimination. A police officer may try to intimidate you into “consenting” to unlock your phone, whether you use a biometric or a memorized passcode. But if you exercise your right to refuse and biometric unlocking functionality is turned on, an officer may physically force you to biometrically unlock your device.  アメリカめっさ怖いな！ いや，日本でも（昨今のケーサツの暴走っぷりから考えると）ありうる話かもしれないが。\nInstall Signal 「信号」じゃなくてセキュリティ・ツールの Signal ね。\n Signal · GitHub  最近のバージョンではグループチャットも出来るようになったらしい。\nSignal の利点は会話履歴をネット上のどこにも残さない点である。 存在しないデータは取得しようがない。\n In 2016, a grand jury in the Eastern District of Virginia issued a subpoena to Open Whisper Systems, the developers of Signal. Because of the architecture of Signal, which limits the user metadata stored on the company’s servers, the only data they were able to provide was \"the date and time a user registered with Signal and the last date of a user's connectivity to the Signal service.\"  つまり，ユーザが「Signal を使った」という履歴は残るけど，会話の内容は一切記録されないというわけだ。\n私も Signal をメインのメッセージング・アプリとして使っている。 Facebook の Messenger は削除した。 スマホ標準の SMS アプリと置き換えることもできるので，まずはそこから始めてみてもいいだろう。\nBack up your data まぁこれも当たり前。 バックアップ先が商用のクラウドストレージでは意味がないからね（国家はサービス・プロバイダに命令できる）。\nBuy a prepaid, disposable phone アメリカではプリペイド SIM を買うのに ID を提示しなくていいらしい。 なんと羨ましい。\n In the United States, at the time this guide was written, current federal regulation does not require you to show your ID to purchase a prepaid SIM card (but your state might). Most countries require you to provide a form of ID to purchase a prepaid SIM card, thus linking the card to your identity and removing the possibility of anonymity.  しかし，そうするといわゆる「プリペイド携帯」を買えって話になるけど，日本ではプリペイド携帯も身分の提示が必要になるんじゃなかったっけ。 つか，そもそもプリペイド携帯って今も売ってるのか？ 最近の状況を知らないのでよく分からない。\n“Attending a Protest” には「機内モードを有効にしろ（Enable airplane mode）」とも書かれていて，普段はケータイを機内モードにしておけば少なくとも行動追跡のリスクは減るかも知れない。\n国家は国家のためにしか駆動しない 「自分の身は自分で守れ」というのはいかにもアメリカらしいなぁ，と思ったりする。\nしかし結局のところ，国家は国家のためにしか駆動しない。 個人である私達を守れるのは最終的に私達自身しかいないのだ。\nそういう意味で「プライバシー」は「個人の自由」を守るための大切な権利である，という点は忘れてはいけないと思う。 セキュリティや利便性のために「個人の自由」を売り渡してはいけないのだ。 「それは、ぜったいに、ぜったいです」。\nブックマーク  クーリエ連載；エコノミスト紹介、自由のためなら人が死んでもいい  参考図書  もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo 達人出版会 2017-12-25 評価\u0026nbsp;       WirelessWire News 連載の書籍化。感想はこちら\nreviewed by Spiegel on 2018-12-31\n  グリゴリの捕縛 白田 秀彰 青空文庫 2001-11-26 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30\n  セキュリティはなぜやぶられたのか ブルース・シュナイアー 井口 耕二 (翻訳) 日経BP社 2007-02-15 Book 単行本 ASIN: 4822283100, EAN: 9784822283100 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by amazon-item 0.2.1)\n  もちろん，そうするだけのインセンティブがあればの話だよ。鵜呑みにしないように（笑） [return] 海外では実際にそういう事例があった。指紋認証が使える高級車を盗むためにオーナーの指を切り取ったそうだ。 [return]   "
    },
    {
      "title": "PPA から Git をインストールする",
      "section": "remark",
      "description": "Git に関しては PPA (Personal Package Archive) で最新版のビルドを提供されている方がいるらしい。ありがたや。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/install-git-from-ppa/",
      "published": "2019-04-07T15:12:49+00:00",
      "update": "2019-04-07T15:13:02+00:00",
      "content": " 前回で OpenSSH と GnuPG を連携させたのでようやく git で遊べるようになった。\nしかし，実際にコマンドを叩いてみたら\n$ git version Command \u0026#39;git\u0026#39; not found, but can be installed with: sudo apt install git またかよ。 嫌な予感しかしない。\n$ sudo apt show git Package: git Version: 1:2.19.1-1ubuntu1.1 Priority: optional Section: vcs Origin: Ubuntu ... やっぱり。 2.21.0 が出たのってだいぶ前だよな。\nいろいろ調べてみたら git に関しては PPA (Personal Package Archive) で最新版のビルドを提供されている方がいるらしい。 ありがたや。\n Git stable releases : “Ubuntu Git Maintainers” team  何故か add-apt-repository は既に入ってるぽかったので，まずはリポジトリを導入しよう。\n$ sudo add-apt-repository ppa:git-core/ppa The most current stable version of Git for Ubuntu. For release candidates, go to https://launchpad.net/~git-core/+archive/candidate . 詳しい情報: https://launchpad.net/~git-core/+archive/ubuntu/ppa [ENTER] を押すと続行します。Ctrl-c で追加をキャンセルできます。 ヒット:1 http://jp.archive.ubuntu.com/ubuntu cosmic InRelease 取得:2 http://jp.archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB] ヒット:3 http://archive.ubuntulinux.jp/ubuntu cosmic InRelease 取得:4 http://jp.archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB] ヒット:5 http://archive.ubuntulinux.jp/ubuntu-ja-non-free cosmic InRelease 取得:6 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB] 取得:7 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic InRelease [20.7 kB] 取得:8 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic/main i386 Packages [3,032 B] 取得:9 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic/main amd64 Packages [3,032 B] 取得:10 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic/main Translation-en [2,248 B] 281 kB を 3秒 で取得しました (81.9 kB/s) パッケージリストを読み込んでいます... 完了 $ sudo apt update ヒット:1 http://archive.ubuntulinux.jp/ubuntu cosmic InRelease ヒット:2 http://jp.archive.ubuntu.com/ubuntu cosmic InRelease ヒット:3 http://archive.ubuntulinux.jp/ubuntu-ja-non-free cosmic InRelease 取得:4 http://jp.archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB] 取得:5 http://jp.archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB] 取得:6 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB] ヒット:7 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic InRelease 252 kB を 2秒 で取得しました (155 kB/s) パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 パッケージはすべて最新です。 $ sudo apt upgrade パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 アップグレードパッケージを検出しています... 完了 アップグレード: 0 個、新規インストール: 0 個、削除: 0 個、保留: 0 個。 $ sudo apt show git Package: git Version: 1:2.21.0-0ppa1~ubuntu18.10.1 Priority: optional Section: vcs よし。 最新版が入ってるな。 インストールっと。\n$ sudo apt install git これでインストール完了。 動作確認してみる。\n$ git version git version 2.21.0 よしよし。 おっと，初期設定しないと。\n$ git config --global user.name \u0026#34;Alice\u0026#34; $ git config --global user.email \u0026#34;alice@example.com\u0026#34; $ git config --global user.signingkey 697CDD8A $ git config --global commit.gpgsign true SSH 経由で git clone する まずは適当なリポジトリを SSH 経由で git clone してみる。\n$ git clone git@github.com:spiegel-im-spiegel/gocli.git github.com/spiegel-im-spiegel/gocli Cloning into \u0026#39;github.com/spiegel-im-spiegel/gocli\u0026#39;... The authenticity of host \u0026#39;github.com (192.30.255.112)\u0026#39; can\u0026#39;t be established. RSA key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added \u0026#39;github.com,192.30.255.112\u0026#39; (RSA) to the list of known hosts. remote: Enumerating objects: 71, done. remote: Counting objects: 100% (71/71), done. remote: Compressing objects: 100% (52/52), done. remote: Total 246 (delta 31), reused 53 (delta 16), pack-reused 175 Receiving objects: 100% (246/246), 53.99 KiB | 431.00 KiB/s, done. Resolving deltas: 100% (107/107), done. 前回で OpenSSH と GnuPG を連携させたので認証時に Pinentry が起動する。\n よーし，うむうむ，よーし。\ngit-credential による認証管理 SSH 経由でリポジトリにアクセスする場合はこれでいいのだが HTTPS 経由でアクセスする場合はアクセスするたびに毎回パスワードを訊かれるため鬱陶しい。 この場合は git-credential による認証管理を行うのがいいようだ。\nUbuntu では gnome-keyring を使った認証管理が使える。\n shugo/git-credential-gnomekeyring: A git credential helper for GNOME keyring  これによると\n There is a git package that includes all of contrib sources in /usr/share/doc/git/contrib/. Users who want to use git-credential-gnomekeyring should copy source from /usr/share/doc/git/contrib/credential/gnome-keyring to their working directory, then users can make and install it.  via shugo/git-credential-gnomekeyring  ということらしい。 さっそくやってみよう。\n$ cp -r /usr/share/doc/git/contrib/credential/gnome-keyring ~/work $ cd ~/work/gnome-keyring $ make gcc -c -g -O2 -Wall -o git-credential-gnome-keyring.o git-credential-gnome-keyring.c git-credential-gnome-keyring.c:28:10: fatal error: glib.h: そのようなファイルやディレクトリはありません まじすか。 まぁ，入れればいいか。\n$ sudo apt install libglib2.0-dev では再開。\n$ make gcc -c -g -O2 -Wall -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-gnome-keyring.o git-credential-gnome-keyring.c git-credential-gnome-keyring.c:29:10: fatal error: gnome-keyring.h: そのようなファイルやディレクトリはありません ええい。 これも入れればいいのね。\n$ sudo apt install libgnome-keyring-dev$ make gcc -g -O2 -Wall -I/usr/include/gnome-keyring-1 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-gnome-keyring.o -c git-credential-gnome-keyring.c ワーニングいっぱい出たけどようやく通ったよ。 これで作成された git-credential-gnome-keyring をパスの通ったディレクトリに入れれば完了。 git 側が認識しているか確認してみよう。\n$ git help -a | grep credential- credential-cache Helper to temporarily store passwords in memory credential-store Helper to store credentials on disk credential-gnome-keyring よしよし。 認識しているな。\nこれで git 設定に以下を加えれば完了となる。\n$ git config --global credential.helper gnome-keyring 適当なリポジトリで確かめてみよう。\n$ git clone https://github.com/spiegel-im-spiegel/private-repos.git aaa Cloning into \u0026#39;aaa\u0026#39;... Username for \u0026#39;https://github.com\u0026#39;: alice@example.com Password for \u0026#39;https://alice@example.com@github.com\u0026#39;: remote: Enumerating objects: 51, done. remote: Counting objects: 100% (51/51), done. remote: Compressing objects: 100% (41/41), done. remote: Total 51 (delta 8), reused 47 (delta 8), pack-reused 0 Unpacking objects: 100% (51/51), done. $ git clone https://github.com/spiegel-im-spiegel/private-repos.git bbb Cloning into \u0026#39;bbb\u0026#39;... remote: Enumerating objects: 51, done. remote: Counting objects: 100% (51/51), done. remote: Compressing objects: 100% (41/41), done. remote: Total 51 (delta 8), reused 47 (delta 8), pack-reused 0 Unpacking objects: 100% (51/51), done. よし。 2回目からは訊いてこないな。\nちなみにこのときのパスワードは Web ページにサインインするときのパスワードじゃなくて，設定画面で振り出した personal access token を使うのでご注意を（つか，私がすっかり忘れててハマったのだがw）。\nブックマーク  UbuntuのPPAて何？ [Linuxの使い方] All About ubuntuのapt-getで最新版のgitをインストールする方法 - spangled shalalala blog Git - Gitのインストール Git Commit で OpenPGP 署名を行う  "
    }
  ]
}
