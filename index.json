{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "「特別定額給付金」申請のナニがダメだったのか",
      "section": "remark",
      "description": "日本というのは本当に本当におバカな国である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/05/bottleneck/",
      "published": "2020-05-21T01:49:31+00:00",
      "update": "2020-05-21T01:53:13+00:00",
      "content": "「ダメだったのか」って過去形にしちゃったけど別にいいよね，もう今更だし。\nいやね\n 特別定額給付金のオンライン申請で起きた問題についてまとめてみた - piyolog  を見て笑っちまったのよ。 特に\n この問題を受け、郵送方式での申請を一部の自治体では推奨しています。 via 特別定額給付金のオンライン申請で起きた問題についてまとめてみた  の部分。 それってただの「先延ばし」なんだけど（笑）\n今回の「特別定額給付金」申請の最大の障害（ボトルネック）は申請受理の作業が「人力」である点だろう。 世帯単位での申請とはいえ人口の多い都会ほど世帯ごとの人数が少なくなるんだから，申請受理の「人力」作業でパンクしてしまうのは火を見るよりも明らか。 その上に個人番号カード発行や関連トラブルで混乱に拍車がかかっているのだから，ニンともカンとも。\nオンライン申請で「おや？」と思った人も多いと思うが，申請時に提出する「添付書類1」って「目視」による確認らしいんだよね（そう明記されていた）。 しかも「特別定額給付金のオンライン申請で起きた問題についてまとめてみた」によると，そもそも申請データと住基データを「人力」で照合するなどという無駄な作業をしているらしい。 ホンマ，馬鹿だよねぇ。\nこれも住基ネットの呪いだよなぁ。 いや，むしろ個人情報保護法の呪いか（笑）\n前にもどっかで書いたような気がするが，システムのセキュリティを考える際のポイントは「識別」と「認証」と「許可」の3つであり，これらをいかに上手く分離し組み合わせるかにかかっている。\nかつての住基ネットや現在の個人番号システムの何が下手糞かって，この識別・認証・許可の混同によりサービス・ドメイン毎の適切な運用が阻害されていることだ。 更にこの無能なシステムを「個人情報保護法」なる悪法で無理やり規制しようとするから「特別定額給付金」のような子供の思い付きみたいな政策ですら実装困難になってしまうのだ。\nけど，まぁ，前回も書いたけど，お祭り騒ぎが終われば忘れきって次回以降もまた同じことを繰り返すのだろう。\n日本というのは本当に本当におバカな国である。\nブックマーク  固有IDのシンプル・シナリオ  参考図書  セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n   添付書類は「振込先講座の確認書類（写し）申請者名義の通帳やキャッシュカード、インターネットバンキングの画面等の写し又は画像（口座番号、カナ氏名等が分かるもの）」とのこと。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "引っ越ししたら個人番号カードを更新しましょう",
      "section": "remark",
      "description": "とほほ… orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/05/my-number-card/",
      "published": "2020-05-15T07:56:29+00:00",
      "update": "2020-05-20T10:21:48+00:00",
      "content": "いや，私も「特別定額給付金」をオンラインで申請しようと思ったわけですよ。 個人番号カードは5年前に取得して，今年の誕生日までは有効な筈なので安心しきって手続きを進めてたんだけど，最後の電子署名で証明書が失効してるって言ってくさるのよ。 しょうがないから再発行してもらうために市役所へ行きましたよ。 とほほ\u0026hellip;\n市役所で話を聞くに，引っ越しで住所が変わったら電子証明書を再発行してもらわないといけないらしい。 うーん，そういえば引っ越ししたときにそんな話があったような，なかったような。 うろ覚え。\nというわけで早速手続きしたのだが，ここでもトラブル。 私が5年前に個人番号カードを取得したときには\n 住基関連の事務に必要な暗証番号 電子申請等において個人番号や氏名等の情報をカード（の IC チップ）から読み出すための暗証番号 利用者証明用電子証明書を利用するための暗証番号 署名用電子証明書を利用するためのパスワード  を全て違うコードにしたほうがいいと言われたが（それぞれ使用するドメインが異なるため），松江市では3つの暗証番号を同じにするよう住民に勧めていたらしく，受付のおねーさんとの話が噛み合わないままロックアウトされてしまった。 そこでロックアウトの解除（上の3つの暗証番号を再設定する）からやり直す羽目に（笑）\nちなみに電子証明書のパスワードを再設定する際には住基用の暗証番号が必要。 ここで住基ネットの怨霊が出てくるのか。 呪いのようだな。\nこれで無事に手続きは終了した。 ちなみに暗証番号やパスワードは外部に漏洩しているのでなければ同じものを再設定して構わないそうだ。 その後「特別定額給付金」のオンライン申請も滞りなく完了。\nなお「特別定額給付金」の申請をスマホで行う場合にはスマホ側に NFC インタフェースが必要。 年寄り向けのいわゆる「簡単スマホ」や古い機種には付いてない可能性があるので事前に確認すること。 また申請は Web ブラウザ上で行うが Android 機の場合は Chrome ブラウザ以外は受け付けないようなので注意。 更に後半で必要となる「添付書類1」は（作業が面倒になるので）あらかじめ用意しておくことを強くお勧めする。\n政府は個人番号カードを義務化しようとしているそうだが，悪手だろう。 市役所に行ったら個人番号カード関連のエリアはカード発行の問い合わせと手続きで（この時期にも関わらず）受付が大混乱していた。 しかも電子証明書は5年毎に更新しないといけないし，引っ越しの度に（私のように）再発行してもらわないといけない。\nそして今回の「特別定額給付金」の騒ぎが終わればみんな忘れるよね。 確定申告等で使い慣れてる人もいるだろうけど，大抵の人は日常生活でカードどころか個人番号自体をそもそも使わないし，個人番号カードで気まぐれに何かやるたびに混乱が発生する未来が見える。\nブックマーク  特別定額給付金の申請をオンラインで済ませた｜塚本 牧生｜note 特別定額給付金のオンライン申請で起きた問題についてまとめてみた - piyolog    添付書類は「振込先講座の確認書類（写し）申請者名義の通帳やキャッシュカード、インターネットバンキングの画面等の写し又は画像（口座番号、カナ氏名等が分かるもの）」とのこと。キャッシュカードをカメラで撮って送ればいいだろう。なんだかなぁ，であるが。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.14.3 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/05/go-1_14_3-is-released/",
      "published": "2020-05-14T23:55:24+00:00",
      "update": "2020-05-15T00:03:23+00:00",
      "content": "Go 1.14.3 がリリースされた。\n Subject: Go 1.14.3 and Go 1.13.11 are released - Google group  セキュリティ・アップデートはなし。\ngo1.14.3 (released 2020/05/14) includes fixes to cgo, the compiler, the runtime, and the go/doc and math/big packages. See the Go 1.14.3 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.14.3.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.14.3.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.14.3.linux-amd64.tar.gz $ sudo mv go go1.14.3 $ sudo ln -s go1.14.3 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.14.3 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "ついカッとなって機種変した，反省はしない",
      "section": "remark",
      "description": "もはやスマホにこれ以上パラダイム・シフトの夢を見ることはないし，スペックも最小限で無問題。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/05/changing-smartphone/",
      "published": "2020-05-14T15:02:50+00:00",
      "update": "2020-05-14T15:27:19+00:00",
      "content": "5年前に買ったスマートフォンなのだが，相変わらずバッテリ周りが酷くて今のが3台目だったのですよ。 その3台目も2年と経たずにイカれてしまい（勝手に強制リブートを繰り返すようになった）ついカッとなって機種変更した。 失業して銭のないときになんちう迷惑な。\n近所（田舎の近所なので察してください）の au ショップに駆け込んで「テザリングが使えるいっちゃん安い機種を」と言ったら Galaxy A20 を勧められた。 端末代が税込で 33,000JPY とのことで即金で買いましたよ。 もはやスマホにこれ以上パラダイム・シフトの夢を見ることはないし，スマホでゲームはしないからスペックも最小限で無問題だよね。\n2要素認証するならリカバリ・コードは控えておくこと 今までの反省から，旧端末から認証情報やデータを移行できない可能性を考慮して準備しておいたのは助かった。\n特に2要素認証1 の2要素目で TOTP を使っている場合は認証不能になる場合があるので，サービス側が発行するリカバリ・コードを必ずダウンロードして控えておくこと。 なんなら紙に印刷して厳重にしまっておけば確実だろう。\n言い換えると2要素認証を推奨しているのにリカバリ・コードの提供すらしないサービスはダメなサービスだと断言していいだろう。 まぁ SMS に一時パスワードを垂れ流して「2段階 認証だから安全」とか言ってくさるサービスとかあるけどな（笑）\n最近流行りの認証デバイスを使えばそんな面倒もないんだろうけど，個人的には紛失・盗難リスクが怖くてノートパソコンや携帯端末に認証デバイスを使う気にならないんだよねぇ。\n最初にすること まずは OS のアップデートを行うこと。 最近の端末は最初からストレージの暗号化がされてるんだね。 よーし，うむうむ，よーし。\nで，アプリのアップデートを行う前に既定で入ってるアプリで使わないものは削除する。 中には削除できないものもあるが，そういうのは，アップデート前であれば，見分けがつくので最初にやってしまおうってわけ。\nなんで LINE や Facebook や Twitter のアプリが最初から意味もなく入ってるんだろうねぇ。 ぜんぶ削除ですよ。 あと端末メーカー製やキャリア製のアプリで明らかに使わないものは可能な限り削除する。 ついでに Google 製の不要アプリもザクザク削除。\nこれで，すっきり！\n雑多な作業 「最初にすること」が終わったらパスワード管理アプリを入れる。\n Keepass2Android  私の場合，データベースファイルをクラウド・ストレージに置いているので，クラウド・ストレージにアクセスするアプリも併せて導入する。 暗号鍵は USB で PC に直結して端末にコピってしまう。 暗号鍵とパスワードでデータベースファイルを二重にロックしておけば大丈夫だろう。\nその後\n File Explorer Pro  を導入して LAN 上の NAS に入れるよう設定すれば一段落。\n他にセキュリティ関連アプリとして\n Google 認証システム FREEDOME Signal  を導入してセットアップする。 Signal は既定の SMS アプリとしても設定できるので置き換える。\nブラウザは\n Firefox Focus Firefox  を導入し Firefox Focus の方を既定のブラウザにする。 Firefox は予備系とし Chrome や他のブラウザは使わないようにする。 もちろん検索サービスにはどちらも DuckDuckGo を指定する。\nInput method は\n Gboard  で無問題。 ていうか，これ以外使いたくない。\nあとは好みで\n Feedly Pocket Slack Trello Flickr RealCalc Plus Simplenote 時計 Googleカレンダー Camera FV-5 tenki.jp  あたりを順次入れていく。 5年前に比べればだいぶ顔ぶれが変わったなぁ。\nMicrosoft Launcher を導入してみた 各端末メーカーが既定で入れてるランチャってなんであんなにダサいのかね。 いや，デザイン・センス皆無の私に言われたくないだろうけど。\n今までは「どうせすぐ壊れるから」と手を付けなかったんだけど，今回は試しに Microsoft Launcher を導入してみた。 セットアップ時に Microsoft account を要求するのだが，大昔に登録したのがまだ有効だったようで，問題なく行けた。 位置情報も要求されるが，許可しなくても無問題（もしくは後から許可を取り消せる）。\nちなみに検索バーと連携する検索サービスに DuckDuckGo を指定できる。 使わんけどね。\n「デバイスを探す」で避難訓練 ひととおり設定が終わったら「デバイスを探す」で一度は避難訓練をしておくとよいだろう。 携帯端末の捜索についてはキャリアも端末メーカーもサービスを提供しているが，キャリアはともかく，端末メーカーのサービスは無用である。\n「デバイスを探す」では検索対象の携帯端末に対して「音を鳴らす」「デバイスのロック」「データの消去」といった操作ができる。 「音を鳴らす」と「デバイスのロック」については一度は試してみることをお勧めする。\n 端末を探す    今だに「2段階認証」とかぬかす馬鹿メディアがあるみたいだが「2段階」では不十分だから「2要素」が要求されるのだ，ということを分かっているのだろうか。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "「他者を理解」できるわけがない",
      "section": "remark",
      "description": "垂直方向の「説教」と水平方向の「対話」",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/05/communications/",
      "published": "2020-05-11T03:25:02+00:00",
      "update": "2020-05-11T04:01:16+00:00",
      "content": "みなさん GW いかがでしたか。 私は某ウイルスに絡む非常事態を言い訳にがっつり引き篭もってました。 ハロワの失業認定でも物理的な求職活動は免除されているので，もっぱらネットで。 安◯先生，仕事がしたいです\u0026hellip;\n閑話休題 (それはさておき) ， Facebook の TL で面白いネタを見つけたので久しぶりに胡乱なことを書いてみる（笑）\n 平田オリザ氏炎上にみる、コミュニケーション教育は「他者と相互理解する能力」を害しているという現実｜ヒラヤマ　タカシ｜note  ちなみに記事の内容に関しては微塵も興味がないのであしからず。 ただし「他者」や「理解」や「コミュニケーション」というキーワードから色々と連想することはある。\nどこで見かけたのかうろ覚えで申し訳ないが「『◯◯を理解した』というのは『◯◯を理解するのを止めた』と同義」みたいな記述があったのを思い出した。 ましてや「他者」などという宗教的にも哲学的にも科学的にも解決されざる命題に対して「理解した」などと言える筈もないのだ。\nもうひとつ連想したのは「リスク・コミュニケーション」。 知らなかったり忘れてる人も多いだろうが，20年ほど前に BSE (Bovine Spongiform Encephalopathy; 通称「狂牛病」) を巡る騒動があって，私はこれをきっかけに「リスク・コミュニケーション」について勉強し始めたのだが，どっかのドキュメント（これもうろ覚え，ゴメン）で「リスク・コミュニケーションとは説得すること」みたいなことが書かれているのを見て「だめだこりゃ」と思ったことがある1。\nもっと言うと日本における「説得」は「説教」もしくは「折伏」に近い。 つまりコミュニケーションが水平方向ではなく垂直方向なのだ。 これに関して私は「説教番組」という造語を考えたことがある。\nそして「説教」で思い出すのは，あの名作である。\n PowerPoint 絶対主義  「理解」とは結果や成果ではなく「プロセス」である。 故に他者への理解を継続するための「コミュニケーション」は垂直方向の説教ではなく水平方向の「対話」であるべきだろう。\nと思うのだが，いかがだろうか。 ◯西先生，「他者を理解」したいです\u0026hellip;\n参考図書  数学ガールの誕生　理想の数学対話を求めて 結城 浩 (著) SBクリエイティブ 2013-09-13 (Release 2014-09-13) Kindle版 B00NAQA33A (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんの講演集。こういう場所に立ち会える今の学生さんは羨ましい。\nreviewed by Spiegel on 2013-09-21 (powered by PA-APIv5)\n  クリトン 原題: CRITO プラトン , sogo (翻訳)  2000-12-20 (Release 2014-09-17) 青空文庫 4333 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「ソクラテスの弁明」そのものには必ずしも賛同しないが，繰り広げられる対話は「個」と「公」の関係を考える上で面白い作品だと思う。\nreviewed by Spiegel on 2020-05-11 (powered by aozorahack)\n  リスクとつきあう―危険な時代のコミュニケーション (有斐閣選書) 吉川 肇子 (著) 有斐閣 2000-03-01 単行本 4641280304 (ASIN), 9784641280304 (EAN), 4641280304 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  リスク・コミュニケーションについて。内容は古いがまだまだ使える。\nreviewed by Spiegel on 2016-02-03 (powered by PA-APIv5)\n  セブン (字幕版) ブラッド・ピット (出演), モーガン・フリーマン (出演), グウィネス・パルトロー (出演), ケビン・スペイシー (出演), デビッド・フィンチャー (監督), アンドリュー・ケビン・ウォーカー (Writer), アーノルド・コペルソン (プロデュース), フィリス・カーライル (プロデュース)  (Release 2013-11-26) Prime Video B00FIWCVFM (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  説教こわい。夜見ると眠れなくなる（笑）\nreviewed by Spiegel on 2020-05-11 (powered by PA-APIv5)\n  あなたの人生の物語 テッド チャン (著), 浅倉久志 (翻訳) 早川書房 2012-08-25 (Release 2014-09-30) Kindle版 B00O2O7JEA (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  短編集。同名の短編が映画になったが，個人的に一番好きなのは「理解」だったり。\nreviewed by Spiegel on 2020-05-11 (powered by PA-APIv5)\n   リスク・コミュニケーション手法のひとつとして「説得」があるのは確か。ただし「説得」を使うには幾つか前提条件がある。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-05-10 のブックマーク",
      "section": "bookmarks",
      "description": "「部屋裏のバイテン - 竹本泉」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/05/10-bookmarks/",
      "published": "2020-05-10T01:30:34+00:00",
      "update": "2020-05-15T00:28:38+00:00",
      "content": "リリース情報  JavaScript Transpiler | Hugo : Hugo 0.70.0  セキュリティ＆プライバシー関連  【注意喚起】偽口座への送金を促す“ビジネスメール詐欺”の手口（第三報）：IPA 独立行政法人 情報処理推進機構 NSA、ウェブシェルの危険性を警告\u0026ndash;悪用されやすい脆弱性のリストも - ZDNet Japan ほぼすべてのウイルス対策ソフトにOSを破壊可能な脆弱性 ～現在は多くのソフトで修正済み - PC Watch Twitterが「SMSによる通知サービス」をほぼすべての国で終了すると発表 - GIGAZINE COVID-19とテクノロジー：接触トレーシング、位置情報追跡、近接追跡 | P2Pとかその辺のお話R 非公開会議の内容を無許可参加した記者がツイートした件についてまとめてみた - piyolog ハッキングフォーラムに投稿された複数の国内サイトリークについてまとめてみた - piyolog  天文関連  特集 - 視力6000で見る宇宙【vol.4】「化学」を道具にして星の誕生を探る - アルマ望遠鏡 すばる望遠鏡、銀河同士の衝突でできたジェットを撮影 | 観測成果 | すばる望遠鏡 TAMA300で実証した量子雑音を抑える新技術 | 国立天文台(NAOJ)  Linux または Ubuntu に関する話題  Ubuntu 20.10 その1 - Ubuntu 20.10の開発コードとリリーススケジュール - kledgeb  その他  LibreOfficeでドキュメントコンバータを作ろう - Qiita 「LibreOffice」は次期バージョン「LibreOffice 7.0」でFlashのサポートを廃止 - 窓の杜 第1話 / 部屋裏のバイテン - 竹本泉 | webアクション  webアクション「屋根裏のバイテン」第1話 : ぽじとろんの竹本泉観察記   総務省｜特別定額給付金  特別定額給付金の申請をオンラインで済ませた｜塚本 牧生｜note   Showcase: Digital.gov : Hugo theme GitLabが日本法人を設立、国内で本格展開へ。ロゴが「タヌキ」なのは、スーパーマリオの大ファンだから － Publickey GitHub、WebIDEの「Codespaces」を発表。GitHubからワンクリックで開発環境へ － Publickey  "
    },
    {
      "title": "画像データを連結してみる",
      "section": "golang",
      "description": "Go 言語っぽいトピックはなし。今回もお遊びの小ネタで。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/concatenate-images/",
      "published": "2020-05-04T04:20:55+00:00",
      "update": "2020-05-04T04:22:47+00:00",
      "content": "今回もお遊びの小ネタで。 複数の画像データを連結してひとつの画像データにすることを考えてみる。\n具体的には image-1.png と image-2.png の2つの画像データを使って\n 元の画像データから各々 image.Image を取得する 各 image.Image から矩形情報を抽出し，空の結合 image.Image を生成する 空の結合 image.Image に元の image.Image を貼り付ける 結合 image.Image を PNG データとして出力する  といった手順。 図にすると\n といった感じか。\nそれでは順にコードを書いてみよう。\n画像データから image.Image を取得する ファイルから image.Image を取得する関数はこんな感じでどうだろう。\nimport ( \u0026#34;image\u0026#34; _ \u0026#34;image/png\u0026#34; \u0026#34;os\u0026#34; ) func imageFrom(path string) (image.Image, error) { file, err := os.Open(path) if err != nil { return nil, err } defer file.Close() img, _, err := image.Decode(file) if err != nil { return nil, err } return img, nil } 今回は PNG データのみ取り扱うので image/png パッケージのみインポートしているが，他の形式も取り扱うのであれば各形式のパッケージを（暗黙的に）インポートして「依存の注入」を行えばよい。\nちなみに image.Image は interface 型で\n// Image is a finite rectangular grid of color.Color values taken from a color // model. type Image interface { // ColorModel returns the Image\u0026#39;s color model. \tColorModel() color.Model // Bounds returns the domain for which At can return non-zero color. \t// The bounds do not necessarily contain the point (0, 0). \tBounds() Rectangle // At returns the color of the pixel at (x, y). \t// At(Bounds().Min.X, Bounds().Min.Y) returns the upper-left pixel of the grid. \t// At(Bounds().Max.X-1, Bounds().Max.Y-1) returns the lower-right one. \tAt(x, y int) color.Color } と定義されている。 ここで定義される image.Image.Bounds() メソッドを使えば矩形情報 image.Rectangle が取れるので，ここから画像の幅や高さも分かるというわけ。\nfunc main() { img, err := imageFrom(\u0026#34;image-1.png\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } rct := img.Bounds() fmt.Println(\u0026#34;Width:\u0026#34;, rct.Dx(), \u0026#34;, height:\u0026#34;, rct.Dy()) \t//Output: \t//Width: 352 , height: 219 } 空の結合 image.Image を生成する まずは元の画像データの image.Image を保持っておくところから始めよう。 こんな感じ。\nsrcImages := make([]image.Image, 0, len(srcPaths)) for _, path := range srcPaths { img, err := imageFrom(path) if err != nil { return err } srcImages = append(srcImages, img) } このタイミングで結合 image.Image の幅と高さも計算してしまおう。\nsrcImages := make([]image.Image, 0, len(srcPaths)) width, height := 0, 0 for _, path := range srcPaths { img, err := imageFrom(path) if err != nil { return err } rct := img.Bounds() width = max(width, rct.Dx()) height += rct.Dy()  srcImages = append(srcImages, img) } ちなみに max() 関数は\nfunc max(x, y int) int { if x \u0026gt; y { return x } return y } と定義している1。\nこれで，算出した width, height を使って，空の image.Image を生成できる。 こんな感じ。\ndstImage := image.NewRGBA(image.Rect(0, 0, width, height)) 空の結合 image.Image に元の image.Image を貼り付ける ここまでくれば，あとは機械的な繰り返し作業。\noffset := 0 for _, img := range srcImages { srcRect := img.Bounds() draw.Draw( dstImage, image.Rect(0, offset, srcRect.Dx(), offset+srcRect.Dy()), img, image.Point{0, 0}, draw.Over, ) offset += srcRect.Dy() } 結合 image.Image を PNG データとして出力する 結合 image.Image をファイルに出力するにはこんな感じにすればよい。\nfile, err := os.Create(dstPath) if err != nil { return err } defer file.Close() if err := png.Encode(file, dstImage); err != nil { return err } 上のコードは PNG 形式で出力する場合。 各形式へのエンコーディングは（image.Decode() 関数のように）抽象化されていないので，それぞれの形式のパッケージが提供しているエンコーダを使う必要がある（image パッケージに準拠していれば自作も可能）。\n実行結果 一連の手順を関数化してみる。 こんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;image\u0026#34; \u0026#34;image/draw\u0026#34; \u0026#34;image/png\u0026#34; \u0026#34;os\u0026#34; ) func imageFrom(path string) (image.Image, error) { file, err := os.Open(path) if err != nil { return nil, err } defer file.Close() img, _, err := image.Decode(file) if err != nil { return nil, err } return img, nil } func max(x, y int) int { if x \u0026gt; y { return x } return y } func concatImageFiles(dstPath string, srcPaths ...string) error { srcImages := make([]image.Image, 0, len(srcPaths)) width, height := 0, 0 for _, path := range srcPaths { img, err := imageFrom(path) if err != nil { return err } rct := img.Bounds() width = max(width, rct.Dx()) height += rct.Dy() srcImages = append(srcImages, img) } dstImage := image.NewRGBA(image.Rect(0, 0, width, height)) offset := 0 for _, img := range srcImages { srcRect := img.Bounds() draw.Draw( dstImage, image.Rect(0, offset, srcRect.Dx(), offset+srcRect.Dy()), img, image.Point{0, 0}, draw.Over, ) offset += srcRect.Dy() } file, err := os.Create(dstPath) if err != nil { return err } defer file.Close() if err := png.Encode(file, dstImage); err != nil { return err } return nil }  func main() { if err := concatImageFiles(\u0026#34;out.png\u0026#34;, \u0026#34;image-1.png\u0026#34;, \u0026#34;image-2.png\u0026#34;); err != nil { fmt.Fprintln(os.Stderr, err) return } } これを実行すると以下の画像データが出力される。\n out.png  よーし，うむうむ，よーし。\nブックマーク  Go言語で複数の画像を縦に連結する - Qiita Go 言語で画像のサイズを変更する  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   Go の標準ライブラリには整数型の Min/Max 関数は用意されていないので，必要に応じて自前で用意する必要がある。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "日本の暦情報を取得するパッケージを作ってみた",
      "section": "release",
      "description": "「国立天文台 天文情報センター 暦計算室」より日本の暦情報を取得する Go 言語用パッケージです。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/05/koyomi/",
      "published": "2020-04-30T20:52:53+00:00",
      "update": "2020-05-01T00:21:52+00:00",
      "content": "いやね。\n 国立天文台の暦要項データを取得する - Qiita  ちう記事を見かけて「Go 言語でも似たようなコードを書けばいいぢゃん」と軽く考えたわけですよ。\n実は Google Calendar を操作する Go 言語用パッケージとしては Google 公式の\n google.golang.org/api/calendar/v3  ってのがあるのだが，これって認証とか含めたガチなやつなのよ。 でも欲しいのは国立天文台から「公開」されているただの暦情報なので，こんなガチなやつは（面倒くさいだけだし）要らないわけ。\nもっとお気楽に使える iCal パーサがないかなぁ，と思ったらありました。\n PuloV/ics-golang: Golang ics parser  ありがたや。\n早速，これを使って日本の暦情報を取得するパッケージを作ってみた。\n spiegel-im-spiegel/koyomi: 日本のこよみ  これを使った以下のコードは，2020年5月の祝日・休日と二十四節気・雑節を CSV 形式で出力するもの。\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/koyomi\u0026#34; ) func main() { start, _ := koyomi.DateFrom(\u0026#34;2020-05-01\u0026#34;) end, _ := koyomi.DateFrom(\u0026#34;2020-05-31\u0026#34;) k, err := koyomi.NewSource( koyomi.WithCalendarID(koyomi.Holiday, koyomi.SolarTerm), koyomi.WithStartDate(start), koyomi.WithEndDate(end), ).Get() if err != nil { fmt.Fprintln(os.Stderr, err) return } b, err := k.EncodeCSV() if err != nil { fmt.Fprintln(os.Stderr, err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } これを実行すると\n$ go run sample.go \u0026#34;Date\u0026#34;,\u0026#34;Title\u0026#34; \u0026#34;2020-05-01\u0026#34;,\u0026#34;八十八夜\u0026#34; \u0026#34;2020-05-03\u0026#34;,\u0026#34;憲法記念日\u0026#34; \u0026#34;2020-05-04\u0026#34;,\u0026#34;みどりの日\u0026#34; \u0026#34;2020-05-05\u0026#34;,\u0026#34;こどもの日\u0026#34; \u0026#34;2020-05-05\u0026#34;,\u0026#34;立夏\u0026#34; \u0026#34;2020-05-06\u0026#34;,\u0026#34;休日\u0026#34; \u0026#34;2020-05-20\u0026#34;,\u0026#34;小満\u0026#34; てな感じになる。 また\nb, err := k.EncodeCSV() の部分を\nb, err := k.EncodeJSON() と書き換えれば\n$ go run sample.go | jq . [ { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-01\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;八十八夜\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-03\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;憲法記念日\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-04\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;みどりの日\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-05\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;こどもの日\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-05\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;立夏\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-06\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;休日\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-20\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;小満\u0026#34; } ] てな感じに JSON 形式でも出力できる。\nkoyomi.WithCalendarID(), koyomi.WithStartDate(), koyomi.WithEndDate() 各関数は Functional Option なので省略可能である。 まぁ，全部省略したら何も取れないけど（笑）\nkoyomi.WithCalendarID() 関数には1個以上の koyomi.CalendarID を指定できる。 指定できる koyomi.CalendarID は以下の通り。\nconst ( Holiday CalendarID = iota + 1 //国民の祝日および休日  MoonPhase //朔弦望  SolarTerm //二十四節気・雑節  Eclipse //日食・月食・日面経過  Planet //惑星現象 ) 取得できるイベントは日本時間がベースになっていて，しかも（終日イベントなので）日付のみ有効である。 時刻情報はカットされているのであしからず。\nあと PuloV/ics-golang パッケージの仕様の問題で，リモートにある iCal ファイルを一時ファイルに落とし込むようだ。 落とし込み先ディレクトリの既定がカレントの tmp/ になっている（ない場合は tmp/ ディレクトリを作成しようとする）。 このディレクトリを指定するのであれば\nk, err := koyomi.NewSource( koyomi.WithCalendarID(koyomi.Holiday, koyomi.SolarTerm), koyomi.WithStartDate(start), koyomi.WithEndDate(end), koyomi.WithTempDir(\u0026#34;/home/username/.cache/\u0026#34;), ).Get() などとすればよい。\nぶっちゃけ遅いです。 まぁ Google Calndar から iCal ファイルをフィルタリングなしでまるっと取ってくるのだから遅いに決まってるのだけど。 実務で使うならバッチ処理でデータベース等に保持っておくのがよろしいかと思われ。\nブックマーク  暦要項 - 国立天文台暦計算室 暦Wiki - 国立天文台暦計算室  暦Wiki/月の満ち欠け/いろいろな月たち - 国立天文台暦計算室 暦Wiki/季節/二十四節気とは？ - 国立天文台暦計算室 暦Wiki/季節/雑節とは？ - 国立天文台暦計算室 暦Wiki/日面経過 - 国立天文台暦計算室   こよみ用語解説 天象 - 国立天文台暦計算室 カレンダーに祝日を入れたいなら国立天文台へ行けばいいじゃない  "
    },
    {
      "title": "2020-04-26 のブックマーク",
      "section": "bookmarks",
      "description": "「Announcing Rust 1.43.0」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/04/26-bookmarks/",
      "published": "2020-04-26T08:07:27+00:00",
      "update": "2020-04-26T08:07:41+00:00",
      "content": "リリース情報  Release v3.000 · googlefonts/Inconsolata · GitHub Announcing Rust 1.43.0 | Rust Blog Hugo 0.69.1: A couple of Bug Fixes | Hugo Hugo 0.69.2: A couple of Bug Fixes | Hugo  セキュリティ＆プライバシー関連  Zoom、中国を経由しないルーティングを実装。有償ユーザーは地域設定可能に - PC Watch California Needlessly Reduces Privacy During COVID-19 Pandemic - Schneier on Security 表現の自由に不可欠な「匿名でいる権利」 | P2Pとかその辺のお話R RemoteWorksのシステム障害をまとめてみた - piyolog テレワークを行う際のセキュリティ上の注意事項：IPA 独立行政法人 情報処理推進機構 Nintendo Switchに必須の「ニンテンドーアカウント」で不正ログイン被害が続発、任天堂は二段階認証を有効にすることを公式に推奨 - GIGAZINE OpenSSL の脆弱性対策について(CVE-2020-1967) ：IPA 独立行政法人 情報処理推進機構  OpenSSL の脆弱性 (CVE-2020-1967) に関する注意喚起   Another Story of Bad 1970s Encryption - Schneier on Security iPhoneのメールアプリの脆弱性を狙うゼロクリック攻撃についてまとめてみた - piyolog Global Surveillance in the Wake of COVID-19 - Schneier on Security ニンテンドーアカウントを狙った不正ログインについてまとめてみた - piyolog  天文関連  「オウムアムア」は破壊された天体の破片だったとする研究成果が発表される | sorae 宇宙へのポータルサイト  その他  Newsboat, an RSS reader 「Python 2.7.18」がリリース ～「Python 2」シリーズの最終版 - 窓の杜 GitLab、有償版の機能をオープンソースへ移植すると発表。カンバン表示やカナリーデプロイ、複数のKubenretesクラスタの使い分けなど18機能 － Publickey パッチ盤からケーブルを引っこ抜いてしまいCloudflareに障害発生。ケーブルにラベリングされておらずどれを戻すべきかすぐに分からず － Publickey GitHub、npmの買収完了を発表。npmレジストリ基盤とプラットフォームへの投資など強化 － Publickey 最近知ったこと(AWS FireLens編) - gitkadoの日記 好みの言語でIaCできるPulumでGoや.NETが使えるように、構成対象も拡張 | TechCrunch Japan  "
    },
    {
      "title": "Ubuntu 20.04 にアップグレードする",
      "section": "release",
      "description": "よーやく GnuPG/Libgcrypt のバージョンが上がったよ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/04/upgrade-ubuntu-20_04/",
      "published": "2020-04-26T07:58:37+00:00",
      "update": "2020-05-15T01:10:24+00:00",
      "content": "Ubuntu 20.04 がリリースされた。 20.04 は長期サポート版で2025年4月までサポートが有効である。\n Ubuntu 20.04 LTS arrives | Ubuntu FocalFossa/ReleaseNotes - Ubuntu Wiki  19.10 または長期サポート版の 18.04 から 20.04 へのアップグレードはリリースノートを参考にするとよい。 基本的には\n$ update-manager -c -d とアップグレード・モードで GUI を起動すれば，あとはよろしくやってくれる。 ただし 20.04 では32bitアーキテクチャをサポートしなくなったので，この場合は 18.04 からアップグレードしてはいけない1。\nなお，アップグレード時にサードパーティの APT リポジトリ（git や ATOM など）が外れるので，必要ならアップグレード時に戻して更新すること。\n個別のアプリケーションについて GnuPG および Libgcrypt よーやく GnuPG/Libgcrypt のバージョンが上がったよ。\n$ gpg --version gpg (GnuPG) 2.2.19 libgcrypt 1.8.5 Copyright (C) 2019 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 まぁ，現時点での最新版は 2.2.20 だけどね。 ちなみに GnuPG 2.2.18 から SHA-1 電子署名の扱いが変わったのでご注意を。\n GnuPG 2.2.18 リリース： さようなら SHA-1  OpenSSH および OpenSSL アップグレード直後の OpenSSH および OpenSSL のバージョンは以下のとおりだった。\n$ ssh -V OpenSSH_8.2p1 Ubuntu-4, OpenSSL 1.1.1f 31 Mar 2020 OpenSSH は 2020-02-14 にリリースされた最新版が入っているようだ。 ただ OpenSSL はこの前セキュリティ・アップデートがあったばかりなんだよねぇ。\n OpenSSL の脆弱性対策について(CVE-2020-1967) ：IPA 独立行政法人 情報処理推進機構 OpenSSL の脆弱性 (CVE-2020-1967) に関する注意喚起  まぁ，間に合わなかったんだろうけど。 CVSSv3 のスコアが 7.5 で深刻度が高いので早めの対応をお願いしたい。\n保留されているパッケージ アップグレード後に libc++1 が保留状態で残っていた。 保留状態のパッケージがある場合は\n$ sudo apt full-upgrade で保留分をまとめてアップグレードするか，個別に\n$ sudo apt install libc++1 などとすればいいようだ。\nGCC が消えとるがな アップグレードしたら何故か GCC が削除されてた orz\nしょうがないので\n$ sudo apt install build-essential したですよ。 Rust のコンパイル・リンクも問題なく動くみたいだし，いっかな2。\nちなみに GCC は 9.3 が導入される。\nATOM も削除される サードパーティ・リポジトリから ATOM をインストールしている場合，アップグレード時に APT のリストからリポジトリが外されるだけだが，今回の 20.04 へのアップグレードでは ATOM 自体がまるっと削除される。\nただし設定やパッケージはそのまま残っているので，リポジトリ設定を戻して apt install し直せばおっけ。\n Installing Atom  Lollypop どうやら Lollypop は標準の APT リポジトリに入ったらしい。 いつからだ？\n$ apt show lollypop Package: lollypop Version: 1.2.35-1 Priority: optional Section: universe/gnome Origin: Ubuntu ... ちうわけで，もう PPA リポジトリを使わなくともよさそうである，多分。\n【追記 2020-04-28】 Libsecret のアップデート Git credential helper である GNOME/libsecret もバージョンが上がっているようだ。\n$ apt show libsecret-1-dev Package: libsecret-1-dev Version: 0.20.2-1 Priority: optional Section: libdevel Source: libsecret Origin: Ubuntu ... GNOME/libsecret は apt upgrade しただけではダメで，手動でビルドする必要がある。\n$ mkdor ~/work $ cd ~/work $ cp -r /usr/share/doc/git/contrib/credential/libsecret . $ cd libsecret $ make gcc -g -O2 -Wall -pthread -I/usr/include/libsecret-1 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-libsecret.o -c git-credential-libsecret.c gcc -o git-credential-libsecret git-credential-libsecret.o -lsecret-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0 これで生成した git-credential-libsecret を $PATH の通ったディレクトリに放り込んでおけばよい。\n PPA から Git をインストールする  【2020-05-15 追記】 日本語 Remix のリリースと Bootable USB メモリの作成 Japanese Team による Ubuntu 20.04 LTS 日本語 Remix がリリースされた。 感謝！\n Ubuntu 20.04 LTS 日本語 Remix リリース | Ubuntu Japanese Team  Japanese Team による追加パッケージのリポジトリを導入するには以下の手順を実行する。\n$ wget -q https://www.ubuntulinux.jp/ubuntu-ja-archive-keyring.gpg -O- | sudo apt-key add - $ wget -q https://www.ubuntulinux.jp/ubuntu-jp-ppa-keyring.gpg -O- | sudo apt-key add - $ sudo wget https://www.ubuntulinux.jp/sources.list.d/focal.list -O /etc/apt/sources.list.d/ubuntu-ja.list $ sudo apt update また ISO イメージ・ファイルも公開されているのでこれを使って bootable USB メモリを作成しておく。 詳しくは以下の拙文を参考にどうぞ。\n Ubuntu インストール用のブート可能 USB メモリを作成する  ブックマーク  Ubuntu 20.04 その23 - Ubuntu 20.04 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 20.04 その24 - Ubuntu 20.04 LTSの新機能と変更点 - kledgeb Ubuntu 20.04 その25 - Ubuntu 20.04 LTSの既知の問題 - kledgeb Ubuntu 20.04 その26 - Ubuntu 20.04.1 LTSのリリーススケジュール・Ubuntu 18.04 LTSユーザーにアップグレードパスの提供 - kledgeb Ubuntu 20.04 その27 - Qt 5.14.2の採用見送りとQt 5.12.8の採用 - kledgeb Ubuntu 20.04 その28 - Ubuntu Desktopの新機能と魅力・様々な新機能と改良点の紹介 - kledgeb Ubuntu 20.04 その29 - Linux kernel 5.4の新機能 - kledgeb Ubuntu 20.04 LTSインストールガイド【スクリーンショットつき解説】 | LFI (今はまだ)WSL1にUbuntu 20.04を入れるな - Qiita Ubuntu 20.04 その48 - Ubuntu 20.04 LTS 日本語 Remixがリリースされました・ディスクイメージのダウンロード - kledgeb  参考  シリコンパワー USBメモリ 32GB USB3.1 / USB3.0 亜鉛合金ボディ 防水 防塵 耐衝撃 永久保証 PS4動作確認済 Jewel J80 SP032GBUF3J80V1TJA シリコンパワー (Release 2017-02-01) Personal Computers B01NBU1OS5 (ASIN), 4712702655292 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  OS 移行用に購入。ひたすらデザインで決めた（笑） よく考えたら32GBも要らなかった。まぁ，何か使い道があるだろう。\nreviewed by Spiegel on 2019-04-21 (powered by PA-APIv5)\n   Ubuntu 18.04 のサポート期間は2023年4月まで。 18.04 サポート満了を以って32bit版 Ubuntu のサポートは終了する。ので，早めに64bitアーキテクチャへのリプレースを検討しませう。 \u0026#x21a9;\u0026#xfe0e;\n Rust も APT で導入できるようだが，バージョンが古いので，最新版が必要なら APT は使わないほうがよい。 \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
