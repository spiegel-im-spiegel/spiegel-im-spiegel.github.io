{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "ユリウス日が2,460,000日を超える日",
      "section": "remark",
      "description": "2023年にはユリウス日が2,460,000日を超えるそうな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/julian-day-number/",
      "published": "2022-05-02T11:38:59+00:00",
      "update": "2022-05-03T02:07:00+00:00",
      "content": "国立天文台から面白い記事が出ている。\n ユリウス日について - 国立天文台暦計算室  この記事によると\n 令和5年(2023)にはついに246 ****日となる ユリウス日についてより  のだそうだ。 また，この記事にグレゴリオ暦とユリウス日を相互変換するアルゴリズムも書かれている（ちなみにこのアルゴリズムは『天文年鑑』にも載っている）。\n実は Go 言語を覚え始めた頃に練習でユリウス日を求める処理を書いたことがあるのだが，アレとは若干アルゴリズムが違うので，拙作 github.com/goark/koyomi のサブパッケージとして追加してみた。 洒落で有理数を扱える big.Rat 型を使っていることを除けば大したアルゴリズムではないので，中身については割愛する1。 興味のある方はリポジトリをご覧ください。\nというわけで，記事に書かれているアルゴリズムを使ってユリウス日が2,460,000日を超えるのはいつか調べてみる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/goark/koyomi\u0026#34; \u0026#34;github.com/goark/koyomi/jdn\u0026#34; ) func main() { num := 2460000.0 dt := jdn.FromJD(num) mjd := jdn.GetMJD(dt) fmt.Printf(\u0026#34;Julian Day Number: %.3f (%v)\\n\u0026#34;, num, mjd.FloatString(3)) fmt.Printf(\u0026#34;Gregorian: %v (%v)\\n\u0026#34;, dt, dt.In(koyomi.JST)) } これを実行すると\n$ go run sample.go Julian Day Number: 2460000.000 (59999.500) Gregorian: 2023-02-24 12:00:00 +0000 UTC (2023-02-24 21:00:00 +0900 JST) となる。 国立天文台のページで検算してみると\n   ユリウス日 - 国立天文台暦計算室より  と同じ値が出たので，たぶん問題ないだろう2。\n参考図書   天文年鑑 2022年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2021-11-22 単行本 441662140X (ASIN), 9784416621400 (EAN), 441662140X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2022年版。\nreviewed by Spiegel on 2021-11-22 (powered by PA-APIv5)\n   天体の位置計算 長沢 工 (著) 地人書館 1985-09-01 単行本 4805202254 (ASIN), 9784805202258 (EAN), 4805202254 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。\nreviewed by Spiegel on 2015-01-11 (powered by PA-APIv5)\n   新こよみ便利帳―天文現象・暦計算のすべて 暦計算研究会 (編集) 恒星社厚生閣 1991-05-01 単行本 4769907001 (ASIN), 9784769907008 (EAN), 4769907001 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  今となっては古い内容だが，暦や天体位置の一覧表が載っていて当時はそれなりに役に立った。\nreviewed by Spiegel on 2021-07-31 (powered by PA-APIv5)\n   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   ユリウス日の計算程度であれば float64 を使っても全く問題ない。ユリウス日の起点は紀元前4713年1月1日正午（12時）とされているが，もちろんその時代に（グレゴリオ暦はおろか）ユリウス暦があったわけではないし時刻系も今とは異なる。あくまでも現在の暦・時刻系の（過去方向への）延長線上にある仮想的起点と捉えるべきだろう。ユリウス日は日付（整数部）のみを扱う場合は Julian Day Number，時刻（小数部）を含める場合は Julian Date と呼び分けることが多い。今はあまり聞かないが Julian Day Number を日本語でユリウス通日と言う人もいる。時刻を含める場合は UT または UTC で計算する。ちなみに座表時系のひとつである TT (Terrestrial Time; 地球時) への拡張もあるらしい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 拙作の github.com/goark/koyomi/jdn パッケージではグレゴリオ暦しか対応していない。これは time.Time 型がグレゴリオ暦を前提に実装されているため。グレゴリオ暦以外の暦に対応するなら time.Time 型は使えないだろう。グレゴリオ暦の導入時期は国によってかなり違うが，欧州では17世紀には概ねグレゴリオ暦に移行したと言われている。日本は1873年（明治6年）のいわゆる「明治の改暦」でグレゴリオ暦互換の暦に移行した（厳密にはグレゴリオ暦ではない）。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "CI 用の GitHub Actions が諸々アップデートされていた",
      "section": "golang",
      "description": "GitHub Actions アップデートまつりw",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/update-github-actions/",
      "published": "2022-04-24T09:41:02+00:00",
      "update": "2022-04-24T09:41:24+00:00",
      "content": "Go で Excel ファイルを扱う Excelize パッケージがバージョンアップしていた。\n Go 言語スプレッドシートライブラリ：Excelize 2.6.0 がリリースされました  なので，このパッケージを使っている拙作の goark/csvdata パッケージもバージョンを上げた。\n Release v0.5.1 · goark/csvdata · GitHub  ぶっちゃけ go.mod ファイルだけ更新してもよかったのだが，少し前に公式の GitHub Actions である actions/setup-go や actions/checkout が v3 系に上がっているのに気付いたこともあり，諸々更新することにした。\n Release v3.0.0 · actions/setup-go · GitHub Release v3.0.2 · actions/checkout · GitHub  github/codeql-action GitHub が買収して手に入れたコードチェッカの GitHub Actions。 Workflow の設定例はこんな感じらしい。\nname:\u0026#34;Code Scanning - Action\u0026#34;on:push:branches:[main]pull_request:branches:[main]schedule:# ┌───────────── minute (0 - 59)# │ ┌───────────── hour (0 - 23)# │ │ ┌───────────── day of the month (1 - 31)# │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)# │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)# │ │ │ │ │# │ │ │ │ │# │ │ │ │ │# * * * * *- cron:\u0026#39;30 1 * * 0\u0026#39;jobs:CodeQL-Build:# CodeQL runs on ubuntu-latest, windows-latest, and macos-latestruns-on:ubuntu-latestpermissions:# required for all workflowssecurity-events:write# only required for workflows in private repositoriesactions:readcontents:readsteps:- name:Checkout repositoryuses:actions/checkout@v3# Initializes the CodeQL tools for scanning.- name:Initialize CodeQLuses:github/codeql-action/init@v2# Override language selection by uncommenting this and choosing your languages# with:# languages: go, javascript, csharp, python, cpp, java# Autobuild attempts to build any compiled languages (C/C++, C#, or Java).# If this step fails, then you should remove it and run the build manually (see below).- name:Autobuilduses:github/codeql-action/autobuild@v2# ℹ️ Command-line programs to run using the OS shell.# 📚 https://git.io/JvXDl# ✏️ If the Autobuild fails above, remove it and uncomment the following# three lines and modify them (or add more) to build your code if your# project uses a compiled language#- run: |# make bootstrap# make release- name:Perform CodeQL Analysisuses:github/codeql-action/analyze@v2 via github/codeql-action: Actions for running CodeQL analysis  Go コードのチェックをするなら “Initialize CodeQL” のコメント部分を解除して\n# Initializes the CodeQL tools for scanning.- name:Initialize CodeQLuses:github/codeql-action/init@v2# Override language selection by uncommenting this and choosing your languageswith:languages:goとすればよい。\nCodeQL は v2 系に上がったことでかなり深いところまでチェックするようになったようだ。 たとえば今回の goark/csvdata パッケージにはカラムの値を sql.NullByte 型に変換して返す\nfunc (r *Rows) ColumnNullByte(s string, base int) (sql.NullByte, error) { res, err := r.ColumnNullInt64(s, base) if err != nil { return sql.NullByte{Valid: false}, errs.Wrap(err) } return sql.NullByte{Byte: byte(res.Int64), Valid: true}, nil } というメソッドがあるのだが，最後の\nreturn sql.NullByte{Byte: byte(res.Int64), Valid: true}, nil で「範囲チェックなしで素のまま型変換すんな，ゴラァ（←超意訳）」と怒られてしまった。 素直な私は「なるほど」と納得して\nfunc (r *Rows) ColumnNullByte(s string, base int) (sql.NullByte, error) { res, err := r.ColumnNullInt64(s, base) if err != nil { return sql.NullByte{Valid: false}, errs.Wrap(err) } if res.Valid \u0026amp;\u0026amp; (res.Int64 \u0026lt; 0 || res.Int64 \u0026gt; math.MaxUint8) { return sql.NullByte{Valid: false}, errs.Wrap(strconv.ErrRange) } return sql.NullByte{Byte: byte(res.Int64 \u0026amp; 0xff), Valid: true}, nil } と修正しましたとさ。 今までは何も言われなかったのに。 とほほ\ngolangci/golangci-lint-action golangci-lint は Go 用の複合 linter。 Workflow の設定例はこんな感じ。\nname:golangci-linton:push:tags:- v*branches:- master- mainpull_request:permissions:contents:read# Optional: allow read access to pull request. Use with `only-new-issues` option.# pull-requests: readjobs:golangci:name:lintruns-on:ubuntu-lateststeps:- uses:actions/setup-go@v3with:go-version:1.17- uses:actions/checkout@v3- name:golangci-lintuses:golangci/golangci-lint-action@v3with:# Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest versionversion:v1.29# Optional: working directory, useful for monorepos# working-directory: somedir# Optional: golangci-lint command line arguments.# args: --issues-exit-code=0# Optional: show only new issues if it\u0026#39;s a pull request. The default value is `false`.# only-new-issues: true# Optional: if set to true then the all caching functionality will be complete disabled,# takes precedence over all other caching options.# skip-cache: true# Optional: if set to true then the action don\u0026#39;t cache or restore ~/go/pkg.# skip-pkg-cache: true# Optional: if set to true then the action don\u0026#39;t cache or restore ~/.cache/go-build.# skip-build-cache: true via golangci/golangci-lint-action: Official GitHub action for golangci-lint from its authors  こっちも v3 系に上がっているが， lint は日常的に使ってる（ていうか VS Code ならリアルタイムで走るようにできる）ので特に問題なし。 よかったよかった。\nsonatype-nexus-community/nancy-github-action Sonatype Nancy は Go の依存パッケージについて既知の脆弱性をチェックしてくれるツール。 こちらは特に変わってなかった。 Workflow の設定例はこんな感じ。\nname:Go Nancyon:[push]jobs:build:runs-on:ubuntu-lateststeps:- name:Check out code into the Go module directoryuses:actions/checkout@v2- name:Set up Go 1.x in order to write go.list fileuses:actions/setup-go@v2with:go-version:^1.13- name:WriteGoListrun:go list -json -m all \u0026gt; go.list- name:Nancyuses:sonatype-nexus-community/nancy-github-action@main via sonatype-nexus-community/nancy-github-action: Sonatype Nancy for GitHub Actions  これも個人的に常用しているので無問題。\ngoreleaser/goreleaser-action みんな大好き，複数プラットフォームの実行バイナリを同時生成して GitHub のリリースページまで作ってくれる GoReleaser の GitHub Actions。 こちらも Workflow の設定は今のところ変更なしでいいようだ。\nname:goreleaseron:pull_request:push:jobs:goreleaser:runs-on:ubuntu-lateststeps:-name:Checkoutuses:actions/checkout@v2with:fetch-depth:0-name:Set up Gouses:actions/setup-go@v2-name:Run GoReleaseruses:goreleaser/goreleaser-action@v2with:# either \u0026#39;goreleaser\u0026#39; (default) or \u0026#39;goreleaser-pro\u0026#39;distribution:goreleaserversion:latestargs:release --rm-distenv:GITHUB_TOKEN:${{ secrets.GITHUB_TOKEN }}# Your GoReleaser Pro key, if you are using the \u0026#39;goreleaser-pro\u0026#39; distribution# GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }} via goreleaser/goreleaser-action: GitHub Action for GoReleaser  この記事を書くのに goreleaser/goreleaser-action のページを眺めてて気がついたのだが， OpenPGP 電子署名も生成してくれるんだね。 Secret として隠蔽してくれるとはいえ， OpenPGP の秘密鍵やパスフレーズを GitHub 側に預託（escrow ← 言い方！）するのは抵抗があるなぁ。 まぁ，これは保留ということで。\nブックマーク  golangci-lint を GitHub Actions で使う Go 依存パッケージの脆弱性検査 GitHub Actions でクロス・コンパイル（GoReleaser 編） Go のコードでも GitHub Code Scanning が使えるらしい  参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   デベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n "
    },
    {
      "title": "2022-04-24 のブックマーク",
      "section": "bookmarks",
      "description": "「Ubuntu 22.04 LTSがリリースされました」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/04/24-bookmarks/",
      "published": "2022-04-24T03:15:44+00:00",
      "update": "2022-04-24T03:16:38+00:00",
      "content": "リリース情報  Release v1.2022.4 · plantuml/plantuml · GitHub Release v0.35.3: Release notes and version bumps for 0.35.3. (#4014) · bytecodealliance/wasmtime · GitHub Release Git for Windows 2.35.2 · git-for-windows/git · GitHub  Git security vulnerability announced | The GitHub Blog 「Git 2.35.2」が公開 ～2件の脆弱性を修正【4月14日追記】 - 窓の杜   Release gopls/v0.8.3 · golang/tools · GitHub Release v0.97.0 · gohugoio/hugo · GitHub Release Git for Windows 2.35.3 · git-for-windows/git · GitHub Release v0.97.1 · gohugoio/hugo · GitHub Release v0.97.2 · gohugoio/hugo · GitHub Release v0.97.3 · gohugoio/hugo · GitHub Release Notes for DSM | Synology Inc. Release Windows Terminal v1.12.1098 · microsoft/terminal · GitHub Release v0.36.0: Release Wasmtime 0.36.0 (#4058) · bytecodealliance/wasmtime · GitHub Highlights from Git 2.36 | The GitHub Blog  Release Git for Windows 2.36.0 · git-for-windows/git · GitHub 「Git for Windows」v2.36.0が公開 ～「Git LFS」の脆弱性に対処 - 窓の杜 「Cygwin 3.5」はWindows 7/8をサポートせず ～32bit対応も間もなく終了 - 窓の杜   Release 9.0.1 · mermaid-js/mermaid · GitHub Release v2.6.7 · spring-projects/spring-boot · GitHub  Release v2.5.13 · spring-projects/spring-boot · GitHub   Release v1.24.0 · tailscale/tailscale · GitHub 「Firefox」v99.0.1が公開 ～Windows/Intel環境の一部で動画のハードウェアデコードが効かない問題などを解決 - 窓の杜 KeePassXC 2.7.1 released - KeePassXC 「LibreOffice 7.3.2」が公開 ～テクノロジー愛好家やパワーユーザー向け無償オフィス環境 - 窓の杜 Go 言語スプレッドシートライブラリ：Excelize 2.6.0 がリリースされました  セキュリティ＆プライバシー関連  Apache Struts 2の脆弱性（S2-062）に関する注意喚起 Russian Cyberattack against Ukrainian Power Grid Prevented - Schneier on Security  Industroyer2: Industroyer reloaded | WeLiveSecurity   GitHub - kagancapar/CVE-2022-29072: 7-Zip through 21.07 on Windows allows privilege escalation and command execution when a file with the .7z extension is dragged to the Help\u0026gt;Contents area.  解凍・圧縮ソフト「7-Zip」に未修正の脆弱性 ～セキュリティ研究者が明らかに - 窓の杜   [openpgp] SHA1 collision detection in OpenPGP : 次期 OpenPGP RFC の内容について [2204.06974] Planting Undetectable Backdoors in Machine Learning Models  Undetectable Backdoors in Machine-Learning Models - Schneier on Security   Inside the Bitcoin Bust That Took Down the Web’s Biggest Child Abuse Site | WIRED  De-anonymizing Bitcoin - Schneier on Security   「GitHub」から非公開リポジトリなどのデータが流出 ～「npm」にも被害 - 窓の杜 「Ruby」にセキュリティアップデート ～「Ruby 2.6」系列はサポートを終了【4月21日追記】 - 窓の杜 「Docker Engine」の脆弱性に対処した「Docker Desktop 4.7.0」 - 窓の杜 「OpenSSH 9.0」、量子コンピューターを使った攻撃からの保護をデフォルトに - ZDNet Japan  Linux または Ubuntu に関する話題  Ubuntu 22.04 その58 - Ubuntu 22.04 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 22.04 その59 - Ubuntu 22.04 LTSの新機能と変更点 - kledgeb Ubuntu 22.04 その60 - Ubuntu 22.04 LTSの既知の問題 - kledgeb Ubuntu 21.10 その89 - Ubuntu 22.04 LTSへのアップグレードは数日中に提供予定 - kledgeb Ubuntu 20.04 その240 - Ubuntu 22.04 LTSへのアップグレード提供時期について - kledgeb Canonical、「Ubuntu 22.04 LTS」の提供を開始 ～WSLパッケージもストアに登場 - 窓の杜 Ubuntu 22.04 をインストールしたら設定すること 10 ヶ条  Go 言語関連  go/cobraでコマンド作りたいんだけど、最近の記事だと出来ない件 Goで時刻を扱うチートシート When To Use Generics - The Go Programming Language [2201.06753v2] BinGo: Pinpointing Concurrency Bugs in Go via Binary Analysis Go Developer Survey 2021 Results - The Go Programming Language Generate PostgreSQL credentials with Hashicorp Vault and Go – Split mind blog Go言語でワークフローエンジンを作った話 : JP1 もどきw Go: Understand and Mitigate Slowloris Attack | by Vincent Blanchon | A Journey With Go | Apr, 2022 | Medium  Go: How to Mitigate RUDY DoS Attack | by Vincent Blanchon | A Journey With Go | Apr, 2022 | Medium   Go言語製Let\u0026rsquo;s Encryptクライアントlegoをライブラリとして使う - Qiita Goの共通モジュール管理の方法をまとめてみた（Go1.18で導入されたWorkspaceも） Goのプログラム内でjqを使ってJSONを加工する - Qiita GitHub - taichi/kra: relational database access helper library GitHub - mururu/gshogi : gshogi is a shogi library wrtten in Go. O\u0026rsquo;Reilly Japan - 実用 Go言語  その他  SESTA/FOSTAから4年：議会は“セックスワーカー検閲法”がもたらした致命的な被害を直視せよ | P2Pとかその辺のお話R エンジニアはもっと図を書こう - 生涯未熟 : リアルタイムで図が描ければそうするんだけどねぇ\u0026hellip; 4 ways we use GitHub Actions to build GitHub | The GitHub Blog Mini Metro - Dinosaur Polo Club  Mini Metro（結城浩のゲーム紹介）｜結城浩   お客さまと共にサービス35周年 ｜ @nifty AWS Lambda が HTTPS エンドポイントをサポートしたので試してみた。 Git Extensionsのインストールと日本語化【環境構築編】 | trelab PostgreSQL：複数行の結果をまとめて１行として表示する - ぷちWiki - Lightly and Leniently Docker創始者らが開発、ビルド／テスト／デプロイの自動化をポータブルにするツール「Dagger」登場。そのままローカルでもGitHubでもCircleCIでも実行可能に － Publickey あまり知られていないPostgreSQLの機能 | POSTD DBMSの市場規模、DBaaSがオンプレミスに並ぶ。シェア1位はマイクロソフト、AWSがオラクルを抜いて2位に。ガートナーによる2021年の調査結果 － Publickey JavaScript/TypeScriptの高速フォーマッター「Rome Formatter」リリース。Rust製でPrettierより約10倍高速と － Publickey Meta（旧Facebook）、テキストエディタ用のUIコンポーネント「Lexical」をオープンソースで公開。Reactなどフレームワークの依存性なく軽量で高速、機能拡張も容易に － Publickey Rustを組込みソフトウェア開発で使う【前編】- 入門｜リアルタイムOS – 応用編 第2回 | APS｜半導体技術コンテンツ・メディア Ebook Services Are Bringing Unhinged Conspiracy Books into Public Libraries Zoom、新しいホワイトボード機能「Zoom Whiteboard」を発表 ～v5.10.3以降で利用可能 - 窓の杜  "
    },
    {
      "title": "やっと Codespaces が使える",
      "section": "remark",
      "description": "Go が動くぞ！",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/04/codespaces/",
      "published": "2022-04-23T13:45:12+00:00",
      "update": "2022-04-23T14:00:19+00:00",
      "content": " パソコンに Visual Studio Code を導入する（再チャレンジ） Go と VS Code Markdown と VS Code Java と VS Code やっと Codespaces が使える ← イマココ  さて，独り GitHub Team も契約したし，よーやく Codespaces が使えるようになったよ。\n今のところ Codespaces は GitHub Team または GitHub Enterprise Cloud のメンバで利用できる。 2022-04-23 時点の料金（米ドル建て）は以下の通り。\n  via About billing for Codespaces - GitHub Docs  ちなみに，使いすぎないよう上限を設定することも可能。\nCodespaces クラウドに立つ Codespaces の起動にはまず，ブラウザでリポジトリ・ページを開き，[Code] ボタンを押下する。\nCreate codespace on master  [Create codespace on master] ボタン押下で Codespaces のインスタンス生成が始まる。 上手く起動すればこんな感じに表示される。\nCreate codespace on master  拡張機能も普通に入れられる。\nExtensions  設定はユーザごとに保持して同期させることもできるようだ。\nGo が動くぞ！ Codespaces 上のターミナルで試しに Go コンパイラを動かしてみたら普通に動いた。\nこいつ・・・動くぞ！  GitHub Codespaces 拡張機能 VS Code の拡張機能に GitHub Codespaces というのがあって，これを使うとローカルの VS Code 上で Codespaces のリソースにアクセスできる。 コマンドパレットから Codespaces: Connect to Codespace を選択すると生成済みのインスタンスの一覧が表示されるので，選択して接続すると Codespaces に接続した VS Code が起動する。\nCodespace on the VS Code  パソコンで作業する場合はこっちのほうがいいかもねぇ。\nAndorid タブレットでも動いた Codespace on the Android Browser  おわ。 ターミナルの状態も共有できるのか。 凄いな。\nちなみに Android の Firefox では Codespaces を起動できなかった。 冷遇されてるなぁ（笑）\n後始末 Codespaces を終了する場合はコマンドパレットから Codespaces: Stop Current Codespace を選択して明示的に停止させること。 まぁ，最悪でも30分非活性状態なら自動的に停止するらしいけど。\nCodespaces のインスタンスはリポジトリごとに生成されるのでご注意を。 また，使わなくなったインスタンスはマメに削除することをお勧めする。 インスタンスの削除は “Your codespaces” でできる。\nYour codespaces  ブックマーク  GitHub開発チームでのCodespacesの利用 - GitHubブログ GitHub Codespaces · GitHub GitHub Codespaces Documentation - GitHub Docs Codespaces の支払いについて - GitHub Docs Github CodeSpace 触ってみた - Qiita GitHub Codespaces をつかって 3分で始めるサービス開発 | Wantedly, Inc. GitHub Codespaces で開発する - Wantedly Engineering Handbook  "
    },
    {
      "title": "GnuPG 2.3.5 のリリース",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/04/gnupg-2_3_5-is-released/",
      "published": "2022-04-23T04:03:03+00:00",
      "update": "2022-04-23T04:04:28+00:00",
      "content": "毎度遅まきながらで申し訳ないが GnuPG 2.3.5 がリリースされている。\n [Announce] GnuPG 2.3.5 released  セキュリティ・アップデートはなし。 詳細はこちら。\n gpg: Up to five times faster verification of detached signatures. Doubled detached signing speed. [T5826,rG4e27b9defc,rGf8943ce098] gpg: Threefold decryption speedup for large files. [T5820,rGab177eed51] gpg: Nearly double the AES256.OCB encryption speed. [rG99e2c178c7] gpg: Removed EAX from the preference list. [rG253fcb9777] gpg: Allow --dearmor to decode all kinds of armor files. [rG34ea19aff9] gpg: Remove restrictions for the name part of a user-id. [rG8945f1aedf] gpg: Allow decryption of symmetric encrypted data even for non-compliant cipher. [rG8631d4cfe2] gpg,gpgsm: New option --require-compliance. [rGee013c5350] gpgsm: New option --ignore-cert-with-oid. [rGe23dc755fa] gpgtar: Create and handle extended headers to support long file names. [T5754] gpgtar: Support file names longer than MAX_PATH on Windows. [rG70b738f93f] gpgtar: Use a pipe for decryption and thus avoid memory exhaustion. [rGe5ef5e3b91] gpgtar: New option --with-log. [rGed53d41b4c] agent: New flag \u0026ldquo;qual\u0026rdquo; for the trustlist.txt. [rG7c8c606061] scdaemon: Add support for GeNUA cards. [rG0dcc249852] scdaemon: Add --challenge-response option to PK_AUTH for OpenPGP cards. [T5862] dirmngr: Support the use of ECDSA for CRLs and OCSP. [rGde87c8e1ea,rG890e9849b5] dirmngr: Map all gnupg.net addresses to the Ubuntu keyserver. [T5751] ssh: Return a faked response for the new session-bind extension. [T5931] gpgconf: Add command aliases -L -K -R. [rGec4a1cffb8] gpg: Request keygrip of key to add via command interface. [T5771] gpg: Print Yubikey version correctly. [T5787] gpg: Always use version \u0026gt;= 4 to generate key signature. [T5809] gpg: Fix generating AEAD packet. [T5853] gpg: Fix version on symmetric encrypted AEAD files if the force option is used. [T5856] gpg: Fix adding the list of ultimate trusted keys. [T5742] gpgsm: Fix parsing of certain PKCS#12 files. [T5793] gpgsm: Print diagnostic about CRL problems due to Tor mode. [rG137e59a6a5] agent: Use \u0026ldquo;Created:\u0026rdquo; field for creation time. [T5538] scdaemon Fix error handling for a PC/SC reader selected with reader-port. [T5758] scdaemon: Fix DEVINFO with no --watch. [rGc6dd9ff929] scdaemon: Fix socket resource leak on Windwos. [T5029] scdaemon: Use extended mode for pkcs#15 already for rsa2048. [rG597253ca17] scdaemon: Enhance PASSWD command to accept KEYGRIP optionally. [T5862] scdaemon: Fix memory leak in ccid-driver. [rG8ac92f0e80] tpm: Always use hexgrip when storing a key password. [rGaf2fbd9b01] dirmngr: Make WKD lookups work for resolvers not handling SRV records. [T4729] dirmngr: Avoid initial delay on the first keyserver access in presence of --no-use-tor. [rG57d546674d] dirmngr: Workaround for a certain broken LDAP URL. [rG90caa7ad59] dirmngr: Escape more characters in WKD requests. [T5902] dirmngr: Suppress error message on trial reading as PEM format. [T5531] gpgconf: Fix component table when not building without TPM support. [T5701] gpgconf: Silence warnings from parsing the option files. [T5874] gpgconf: Do not list ignored options and mark forced options as read-only. [rG42785d7c8a] gpgconf: Tweak the use of the ldapserver option. [T5801] ssh: Fix adding an ed25519 key with a zero length comment. [T5794] kbx: Fix searching for FPR20 in version 2 blob. [T5888] Fix early homedir creation. [T5895] Improve removing of stale lockfiles under Unix. [T5884]  Release-info: https://dev.gnupg.org/T5743 via GnuPG 2.3.5 released  GnuPG 関連の各パッケージのバージョンは以下の通り（数字は大体のビルド順）。\n   # パッケージ名 バージョン 公開日 更新     1 Libgpg-error 1.45 2022-04-21    2 Libgcrypt 1.8.9 (LTS) 2022-02-07     Libgcrypt 1.10.1 2022-03-28    3 Libassuan 2.5.5 2021-03-22    4 Libksba 1.6.0 2021-06-10    5 nPth 1.6 2018-07-16    6 ntbTLS 0.3.1 2022-04-07    7 GnuPG 2.2.34 (LTS) 2022-02-07     GnuPG 2.3.5 2022-04-21     現在 GnuPG には2.2系と2.3系があり1，2.2系は LTS 版に位置付けられている。 2.3系では AEAD (Authenticated Encryption with Associated Data) 等 RFC 4880bis で検討されている機能が実装されているので，最新機能を試したいのであればこちらを入れるとよいだろう。 なお2.2系は少なくとも2024年末まではサポートが続けられる予定である。 通常運用であれば，当面は2.2系でも問題ない（ECC も対応してるよ）。\nアップデートは計画的に。\nブックマーク  OpenPGP の実装  参考図書   暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n   暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n   厳密には1.4系もあるが，これは legacy 版と位置付けられており，よほどのバグか脆弱性がない限りは更新されない。もし今だに1.4系（あるいは既にサポートされていない2.0/2.1系）を使っているのなら2.2系以降にアップグレードすることを強くお勧めする。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "OpenJDK のセキュリティ・アップデート",
      "section": "release",
      "description": "影響を受けるバージョンは 18, 17.0.2, 15.0.6, 13.0.10, 11.0.14, 8u322, 7u331 およびそれ以前。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/04/openjdks-has-been-updated/",
      "published": "2022-04-23T03:34:49+00:00",
      "update": "2022-04-24T03:16:38+00:00",
      "content": "定例の Java マイナー・バージョンアップが行われた。\n OpenJDK Vulnerability Advisory: 2022/04/19  CVE ID ベースで16個の脆弱性修正がある。 影響を受けるバージョンは 18, 17.0.2, 15.0.6, 13.0.10, 11.0.14, 8u322, 7u331 およびそれ以前。\n CVE ID Component CVSSv3.1\nScore Affects ...   7 8 11 13 15 17 18   CVE-2022-21476 security-libs/java.security 7.5          CVE-2022-21449 security-libs/java.security 7.5          CVE-2022-21496 core-libs/javax.naming 5.3          CVE-2022-21434 core-libs/java.lang 5.3          CVE-2022-21426 xml/jaxp 5.3          CVE-2022-21443 security-libs/java.security 3.7           via OpenJDK Vulnerability Advisory: 2022/04/19  このうち，2番目の CVE-2022-21449 は ECDSA に関するヤバいやつで Bruce Schneier 先生もこの脆弱性について言及されている。 元ネタの記事によると\nThe vulnerability, which Oracle patched on Tuesday, affects the company’s implementation of the Elliptic Curve Digital Signature Algorithm in Java versions 15 and above. ECDSA is an algorithm that uses the principles of elliptic curve cryptography to authenticate messages digitally. A key advantage of ECDSA is the smaller size of the keys it generates, compared to RSA or other crypto algorithms, making it ideal for use in standards including FIDO-based 2FA, the Security Assertion Markup Language, OpenID, and JSON. via Major cryptography blunder in Java enables “psychic paper” forgeries | Ars Technica  だそうな。 もう少し詳細を抜き出すと\nECDSA signatures rely on a pseudo-random number, typically notated as K, that’s used to derive two additional numbers, R and S. To verify a signature as valid, a party must check the equation involving R and S, the signer’s public key, and a cryptographic hash of the message. When both sides of the equation are equal, the signature is valid. via Major cryptography blunder in Java enables “psychic paper” forgeries | Ars Technica  For the process to work correctly, neither R nor S can ever be a zero. That’s because one side of the equation is R, and the other is multiplied by R and a value from S. If the values are both 0, the verification check translates to 0 = 0 X (other values from the private key and hash), which will be true regardless of the additional values. That means an adversary only needs to submit a blank signature to pass the verification check successfully. via Major cryptography blunder in Java enables “psychic paper” forgeries | Ars Technica  Guess which check Java forgot?\nThat’s right. Java’s implementation of ECDSA signature verification didn’t check if R or S were zero, so you could produce a signature value in which they are both 0 (appropriately encoded) and Java would accept it as a valid signature for any message and for any public key. The digital equivalent of a blank ID card.\n via Major cryptography blunder in Java enables “psychic paper” forgeries | Ars Technica  いやいやいや。 なんだその間抜けなバグ。\nOpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。 以下は完全手動でのインストール（笑）\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://download.java.net/java/GA/jdk18.0.1/3f48cabb83014f9fab465e280ccf630b/10/GPL/openjdk-18.0.1_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-18.0.1_linux-x64_bin.tar.gz $ sudo ln -s jdk-18.0.1 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;18.0.1\u0026#34; 2022-04-19 OpenJDK Runtime Environment (build 18.0.1+10-24) OpenJDK 64-Bit Server VM (build 18.0.1+10-24, mixed mode, sharing) LTS 版 Java バイナリが欲しいなら Adoptium で取得できる。\n私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern  よーし，うむうむ，よーし。\nブックマーク  Oracle Critical Patch Update Advisory - April 2022 Critical cryptographic Java security blunder patched – update now! – Naked Security 2022年4月Oracle製品のクリティカルパッチアップデートに関する注意喚起 「Java」に署名検証がフリーパスになってしまう危険な脆弱性 ～影響は計り知れず - 窓の杜  参考図書   Spring Data JPAプログラミング入門 溝口賢司 (著) 秀和システム 2017-08-03 (Release 2018-04-23) Kindle版 B07CKHR8C1 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  JPA のお勉強用に購入。紙のほうはプレミアが付いてるっぽいが Kindle で買えるよ。固定レイアウトだからブラウザの Kindle Cloud Reader で読めるし。真面目に基本を押さえて書いていて分かりやすい。\nreviewed by Spiegel on 2021-08-26 (powered by PA-APIv5)\n   Effective Java 第3版 Joshua Bloch (著), 柴田 芳樹 (翻訳) 丸善出版 2018-10-30 単行本（ソフトカバー） 4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。\nreviewed by Spiegel on 2021-03-17 (powered by PA-APIv5)\n   Spring Boot 2 入門: 基礎から実演まで Webアプリ開発入門 原田 けいと (著), 竹田 甘地 (著), Robert Segawa (著)  2020-05-22 (Release 2020-05-22) Kindle版 B0893LQ5KY (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Spring Boot を勉強することになって急遽買った本。めっさ分かりやすかった。 PDF 版が欲しいくらい（笑）\nreviewed by Spiegel on 2021-06-13 (powered by PA-APIv5)\n   2021-04-09 に PlantUML V1.2022.4 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "第五の季節：土用",
      "section": "remark",
      "description": "今回は「土用」に関する小咄などを。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/04/doyo-period/",
      "published": "2022-04-17T06:37:40+00:00",
      "update": "2022-04-17T08:50:07+00:00",
      "content": "（この記事は2021年7月頃にあちこちで書いたものを抜粋して再構成したものです）\n2022-04-17 は望（満月）で「土用の入り」である。 というわけで今回は「土用」に関する小咄などを。\n土用の入り 「土用」は四季を無理くり五行説に当てはめた弊害（笑）でできた，第五の季節とでも言うべきものだ。 春＝木，夏＝火，秋＝金，冬＝水とすると「土」が余ってしまうので，各季節から $1/5$ ずつ拝借して作ったのが「土用」の元々の起源らしい。\n  via File:Wuxing fr 2.svg - Wikimedia Commons (CC-BY-SA 3.0)  いわゆる「平気法（または恒気法）1」では没日を除いた1年の長さは360日なので，各季節の $1/5$ は $(360 \\div 4) \\div 5 = 18\\mathrm{日}$ となる。 これが「土用は各季節の最後の18日間」などと言われる所以である。\n現在の「土用の入り」は雑節のひとつとして残っている。 定義は\n 現在では土用の入りは太陽黄経が297°、27°、117°、207°となる日として定義されます 暦Wiki/季節/雑節とは？ - 国立天文台暦計算室より  である。 目安としては\n    土用 太陽黄経 月日     冬 297° 1月17日ごろ   春 27° 4月17日ごろ   夏 117° 7月19日ごろ   秋 207° 10月20日ごろ     暦Wiki/季節/雑節とは？ - 国立天文台暦計算室より  となるようだ。 ちなみに「土用の明け」は各季節が始まる立春（315°），立夏（45°），立秋（135°），立冬（225°）の前日である。 2022年は\n   日付 曜日 内容     2022-01-17 月 土用の入り   2022-02-04 金 立春   2022-04-17 日 土用の入り   2022-05-05 木 立夏   2022-07-20 水 土用の入り   2022-08-07 日 立秋   2022-10-20 木 土用の入り   2022-11-07 月 立冬    という関係になる。 1年は360°なので，各季節の「土用」の期間は，先程の計算式と同じく $(360 \\div 4) \\div 5 = 18°$ となる。 というわけで，さきほどの「土用の入り」の定義となるわけだ。\n土用の丑の日 「土用の丑の日」は江戸時代の有名なプロモーションのおかげなのか夏の土用が有名だが，「土用」は各季節ごとにあるし，その中で「丑の日」は最低1日（最大2日）はあることになる。 ウナギ好きの方，よかったですねぇ。 各季節ごとにウナギを喰い散らかす口実ができたっスよ（笑）\n以前「十干十二支を数え上げるパッケージを作ってみた」で自作パッケージを紹介したが，その後，パッケージの移行に伴い goark/koyomi パッケージに統合した。 これを使って2022年春の土用期間の干支を数えてみよう。 コードはこんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/goark/koyomi\u0026#34; \u0026#34;github.com/goark/koyomi/zodiac\u0026#34; ) func main() { start, _ := koyomi.DateFrom(\u0026#34;2022-04-17\u0026#34;) end, _ := koyomi.DateFrom(\u0026#34;2022-05-05\u0026#34;) for d := start; d.Before(end); d = d.AddDay(1) { 干, 支 := zodiac.ZodiacDayNumber(d) fmt.Printf(\u0026#34;Day %v is %v%v\\n\u0026#34;, d, 干, 支) } } これを実行すると\n$ go run sample.go Day 2022-04-17 is 庚子 Day 2022-04-18 is 辛丑 Day 2022-04-19 is 壬寅 Day 2022-04-20 is 癸卯 Day 2022-04-21 is 甲辰 Day 2022-04-22 is 乙巳 Day 2022-04-23 is 丙午 Day 2022-04-24 is 丁未 Day 2022-04-25 is 戊申 Day 2022-04-26 is 己酉 Day 2022-04-27 is 庚戌 Day 2022-04-28 is 辛亥 Day 2022-04-29 is 壬子 Day 2022-04-30 is 癸丑 Day 2022-05-01 is 甲寅 Day 2022-05-02 is 乙卯 Day 2022-05-03 is 丙辰 Day 2022-05-04 is 丁巳 となった。 これによると 2022-04-18 と 2022-04-30 が丑の日のようだ。 おー，2回もある。\nブックマーク  日本の暦情報を取得するパッケージを作ってみた 日本語は公開できない #golang 2022年の主な暦象  参考図書   天文年鑑 2022年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2021-11-22 単行本 441662140X (ASIN), 9784416621400 (EAN), 441662140X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2022年版。\nreviewed by Spiegel on 2021-11-22 (powered by PA-APIv5)\n   新こよみ便利帳―天文現象・暦計算のすべて 暦計算研究会 (編集) 恒星社厚生閣 1991-05-01 単行本 4769907001 (ASIN), 9784769907008 (EAN), 4769907001 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  今となっては古い内容だが，暦や天体位置の一覧表が載っていて当時はそれなりに役に立った。\nreviewed by Spiegel on 2021-07-31 (powered by PA-APIv5)\n   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   デベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n   「平気法」は天球上の太陽の運行速度を一定とみなして（平均太陽）1年を均等に24等分する方法。これにより一気の長さは $365 \\div 24 = 15.2\\mathrm{日}$ で一定となる。没日を除けばちょうど15日。ちなみに現行暦は「定気法」がベースになっている。定気法は太陽の視黄経を角度で24等分（各15°）する方法で「太陽黄経」が定義の基準となる。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "折りたたみキーボードを新調した",
      "section": "remark",
      "description": "出先でちょっとした入力に使うだけし何とかなるだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/04/portable-keyboard/",
      "published": "2022-04-16T03:00:21+00:00",
      "update": "2022-04-16T03:38:38+00:00",
      "content": "思うところあって，持ち運び用の折りたたみキーボードを新調することにした。\n IC-BK26 | iClever (アイクレバー)  とりあえずこんな感じ。\nお出かけ用に折りたたみキーボードを新調した | Flickr  US 配列が駄目な方はご注意を（私はどちらでも無問題）。 思ったよりは小さい。 タブレットの Input Method は Gboard を使っているのだが，入力モードの切り替えが [Shift+Space] であることに気づくまでにしばらくかかった。\n個人的にはストロークの浅い薄型キーボードは長時間入力すると指が痛くなるので駄目なのだが，これなら柔らかめのタッチで指への負担も少ないし，出先でちょっとした入力に使うだけし，何とかなるだろう。 他は特に問題なし。\nこれで今年の GW を乗り切るゾ。\n  iCleverキーボード Bluetooth 折りたたみ式 キーボードマルチペアリング 丸いボタン 軽量 スマホ用 iPad用iPhone用ブルートゥースキーボード 充電式 Android/Windows/iOS対応 財布型 日本語説明書 ブラック IC-BK26 IC-BK26  B094HVD8SD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  お出かけ用に購入。思ったよりはコンパクトだが窮屈な感じではない。 Andorid タブレットと繋いで問題なく使えている。\nreviewed by Spiegel on 2022-04-16 (powered by PA-APIv5)\n "
    },
    {
      "title": "pgpdump 0.35 がリリースされていた",
      "section": "release",
      "description": "気が付かなかったよ orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/04/pgpdump-v0.35-was-released/",
      "published": "2022-04-14T10:42:39+00:00",
      "update": "2022-04-14T10:45:34+00:00",
      "content": "2022-02-28 に本家 pgpdump の v0.35 がリリースされていた。 気が付かなかったよ orz\n0.34 からの変更点は以下の通り。\n0.35 2022/02/28 * Adding BrainPool-384/512 curve definitions. https://github.com/kazu-yamamoto/pgpdump/pull/33  via pgpdump/CHANGES  例によってソースコードのみの提供だが Linux 環境ならビルドは簡単である。\n$ ./configure ... $ make gcc -c -g -O2 -O -Wall pgpdump.c gcc -c -g -O2 -O -Wall types.c gcc -c -g -O2 -O -Wall tagfuncs.c gcc -c -g -O2 -O -Wall packet.c gcc -c -g -O2 -O -Wall subfunc.c gcc -c -g -O2 -O -Wall signature.c gcc -c -g -O2 -O -Wall keys.c gcc -c -g -O2 -O -Wall buffer.c gcc -c -g -O2 -O -Wall uatfunc.c gcc -g -O2 -O -Wall -o pgpdump pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o buffer.o uatfunc.o -lbz2 -lz 作者の方は既に Haskell の人で pgpdump のメンテナンスは積極的には行っていないみたいだが pull request は歓迎のようだ。\n拙作の gpgpdump は本家 pgpdump をリファレンス実装とみなして参考にさせてもらってる。 こちらもよろしく【広告】\n参考図書   暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n   暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 1.18.1 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は3件の脆弱性修正を含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/04/go-1_18_1-is-released/",
      "published": "2022-04-13T11:54:58+00:00",
      "update": "2022-04-13T11:55:21+00:00",
      "content": "Go 1.18.1 がリリースされた。\n [security] Go 1.18.1 and Go 1.17.9 are released  今回は3件の脆弱性修正を含んでいる。\ngo1.18.1 (released 2022-04-12) includes security fixes to the crypto/elliptic, crypto/x509, and encoding/pem packages, as well as bug fixes to the compiler, linker, runtime, the go command, vet, and the bytes, crypto/x509, and go/types packages. See the Go 1.18.1 milestone on our issue tracker for details. via Release History - The Go Programming Language  CVE-2022-24675: encoding/pem: fix stack overflow in Decode A large (more than 5 MB) PEM input can cause a stack overflow in Decode, leading the program to crash. via Go 1.18.1 and Go 1.17.9 are released  （以下未稿）\nCVE-2022-28327: crypto/elliptic: tolerate all oversized scalars in generic P-256 A crafted scalar input longer than 32 bytes can cause P256().ScalarMult or P256().ScalarBaseMult to panic. Indirect uses through crypto/ecdsa and crypto/tls are unaffected. amd64, arm64, ppc64le, and s390x are unaffected. via Go 1.18.1 and Go 1.17.9 are released  （以下未稿）\nCVE-2022-27536: crypto/x509: non-compliant certificates can cause a panic in Verify on macOS in Go 1.18 Verifying certificate chains containing certificates which are not compliant with RFC 5280 causes Certificate.Verify to panic on macOS.\nThese chains can be delivered through TLS and can cause a crypto/tls or net/http client to crash.\n via Go 1.18.1 and Go 1.17.9 are released  （以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.18.1.linux-amd64.tar.gz）を取ってきてインストールすることを強く推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.18.1.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.18.1.linux-amd64.tar.gz $ sudo mv go go1.18.1 $ sudo ln -s go1.18.1 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.18.1 linux/amd64 Windows は Scoop 経由で OK\nアップデートは計画的に。\n参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   デベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n "
    }
  ]
}
