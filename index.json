{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "疑似乱数生成器 spiegel-im-spiegel/mt",
      "section": "release",
      "description": "spiegel-im-spiegel/mt は64bit版 Mersenne Twister を元に pure Go で書き直したものである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/mersenne-twister-by-golang/",
      "published": "2019-09-22T08:37:19+00:00",
      "update": "2019-09-22T23:00:23+00:00",
      "content": " Mersenne Twister とは松本眞・西村拓士両氏によって1996年に発表された擬似乱数生成アルゴリズムである。 他の擬似乱数生成アルゴリズムと比べて以下の特徴があるそうだ。\n  従来の様々な生成法の欠点を考慮して設計されています 従来にない長周期, 高次元均等分布を持ちます（周期が $2^{19937}-1$ で、623次元超立方体の中に 均等に分布することが証明されています） 生成速度がかなり速い メモリ効率が良い  via Mersenne Twister とは?  特に2番目が重要で，モンテカルロ法などの科学技術計算に向いている。 Ruby などの一部のプログラミング言語では標準の疑似乱数生成器として組み込まれているらしい。\nspiegel-im-spiegel/mt は64bit版 Mersenne Twister を元に pure Go で書き直したものである。\n  \nspiegel-im-spiegel/mt の特徴は以下の通り。\n math/rand 互換で rand.Rand のソースとして利用できる goroutine-safe な構成にできる（mt.PRNG 型を利用した場合）  mt/mt19937.Source の機能 mt/mt19937.Source はそのまま疑似乱数生成器として使える。 たとえば以下のように記述する。\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) fmt.Println(mt19937.NewSource(19650218).Uint64()) //Output: //13735441942630277712 提供するメソッドは以下の通り。\n   メソッド 機能     Source.Seed(int64) 乱数のシードをセットする   Source.SeedArray([]uint64) 乱数のシード（配列）をセットする   Source.Uint64() uint64 乱数として範囲 $[0, 2^{64}-1]$ の整数値を生成する   Source.Uint64() uint64 乱数として範囲 $[0, 2^{63}-1]$ の整数値を生成する   Source.Real(int) float64 乱数として浮動小数点数値を生成する    Source.Real() 関数の引数による乱数の出力範囲は以下の通り。\n   引数 生成範囲     1 範囲 $[0, 1)$ の浮動小数点数値   2 範囲 $(0, 1)$ の浮動小数点数値   上記以外 範囲 $[0, 1]$ の浮動小数点数値    なお mt/mt19937.Source は goroutine-safe ではないので goroutine 間でインスタンスを共有できない。\nmath/rand と組み合わせる mt/mt19937.Source を rand.Rand のソースとして利用するには以下のように記述すればよい。\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) fmt.Println(rand.New(mt19937.NewSource(19650218)).Uint64()) //Output: //13735441942630277712 これで rand.Rand が提供するメソッドはすべて使える。 ただし rand.Rand も goroutine-safe ではないので，取り扱いにはやはり注意が必要である。\nmt.PRNG と組み合わせる mt/mt19937.Source 型を mt.PRNG 型と組み合わせることで goroutine-safe な構成にできる。 たとえばこんな感じに記述できる。\npackage main import ( \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) func main() { wg := sync.WaitGroup{} prng := mt.New(mt19937.NewSource(time.Now().UnixNano())) \tfor i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { defer wg.Done() for i := 0; i \u0026lt; 10000; i++ { prng.Uint64() \t} }() } wg.Wait() } mt.PRNG 型は mt/mt19937.Source のラッパーになっていて rand.Rand と組み合わせることも可能だが， rand.Rand の内部構造の問題で goroutine-safe にならない。 ご注意を。\nio.Reader 互換の疑似乱数生成器 mt.PRNG のインスタンスから mt.Reader 型のインスタンスを生成できる。 こんな感じに記述できる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) func main() { wg := sync.WaitGroup{} prng := mt.New(mt19937.NewSource(time.Now().UnixNano())) \tfor i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { defer wg.Done() r := prng.NewReader() \tbuf := [8]byte{} for i := 0; i \u0026lt; 10000; i++ { ct , err := r.Read(buf[:]) \tif err != nil { return } fmt.Println(binary.LittleEndian.Uint64(buf[:ct])) } }() } wg.Wait() } mt.Reader 型は io.Reader インタフェースと互換性がある。 また mt.Reader インスタンスも goroutine-safe なので goroutine 間で共有可能である。\nライセンスについて spiegel-im-spiegel/mt は MIT ライセンスで提供している。\nオリジナルの Mersenne Twister コードは GPL または BSD ライセンスで提供されているが MIT ライセンスに書き換えてもいいらしい。\n Mersenne Twisterの商業利用について  というわけで spiegel-im-spiegel/mt は MIT ライセンスで提供することにした。 ご利用はお気軽に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  数学ガール／乱択アルゴリズム 結城 浩 SBクリエイティブ 2011-02-25 (Release 2014-03-12) Kindle版 B00I8AT1FO (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  工学ガール，リサちゃん登場！\nreviewed by Spiegel on 2015-04-19 (powered by PA-API)\n "
    },
    {
      "title": "疑似乱数生成器 spiegel-im-spiegel/mt をリリースした",
      "section": "release",
      "description": "ついカッとなって書いた。反省はしていない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/mersenne-twister-package-is-released/",
      "published": "2019-09-22T08:37:19+00:00",
      "update": "2019-09-22T09:18:55+00:00",
      "content": " ついカッとなって書いた。 反省はしていない。\n spiegel-im-spiegel/mt: Mersenne Twister; Pseudo Random Number Generator, Implemented by Golang  Mersenne Twister の Go 言語実装はいくつかあるのだが，やっぱ他人が作る道具は使いにくいよね，というわけで自分で書いてしまった（笑） spiegel-im-spiegel/mt の特徴は以下の通り。\n math/rand 互換で rand.Rand のソースとして利用できる goroutine-safe な構成にできる（mt.PRNG 型を利用した場合）  使い方は以下を参照のこと。\n 疑似乱数生成器 spiegel-im-spiegel/mt  一応，ベンチマークテストもしてみた。\npackage main import ( \u0026#34;math/rand\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) const count = 10000000 func BenchmarkRandomALFG(b *testing.B) { rnd := rand.NewSource(time.Now().UnixNano()).(rand.Source64) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomMT19917(b *testing.B) { rnd := mt19937.NewSource(time.Now().UnixNano()) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomALFGRand(b *testing.B) { rnd := rand.New(rand.NewSource(time.Now().UnixNano())) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomMT19917Rand(b *testing.B) { rnd := rand.New(mt19937.NewSource(time.Now().UnixNano())) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomALFGLocked(b *testing.B) { b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rand.Uint64() } } func BenchmarkRandomMT19917Locked(b *testing.B) { rnd := mt.New(mt19937.NewSource(time.Now().UnixNano())) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } テスト対象は以下の通り。\n   テスト名 対象     BenchmarkRandomALFG math/rand 標準アルゴリズム1   BenchmarkRandomMT19917 mt/mt19937 パッケージ   BenchmarkRandomALFGRand math/rand （rand.Rand ラッパ）   BenchmarkRandomMT19917Rand mt/mt19937 （rand.Rand ラッパ）   BenchmarkRandomALFGLocked math/rand Sync バージョン   BenchmarkRandomMT19917Locked mt/mt19937 ＋ mt.PRNG    このベンチマークテストの実行結果は以下の通り。\n$ go test -bench Random -benchmem goos: linux goarch: amd64 pkg: github.com/spiegel-im-spiegel/mt/benchmark BenchmarkRandomALFG-4 1000000000\t0.0492 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomMT19917-4 1000000000\t0.0651 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomALFGRand-4 1000000000\t0.0749 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomMT19917Rand-4 1000000000\t0.0846 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomALFGLocked-4 1000000000\t0.176 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomMT19917Locked-4 1000000000\t0.192 ns/op\t0 B/op\t0 allocs/op PASS ok github.com/spiegel-im-spiegel/mt/benchmark\t7.081s というわけで math/rand のほうが若干速いかな。 乱数としての性能は別の機会に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  数学ガール／乱択アルゴリズム 結城 浩 SBクリエイティブ 2011-02-25 (Release 2014-03-12) Kindle版 B00I8AT1FO (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  工学ガール，リサちゃん登場！\nreviewed by Spiegel on 2015-04-19 (powered by PA-API)\n  math/rand パッケージに実装されている擬似乱数生成器はラグ付フィボナッチ法（Lagged Fibonacci Generator）のバリエーションらしい。 [return]   "
    },
    {
      "title": "2019-09-21 のブックマーク",
      "section": "bookmarks",
      "description": "「数式言語を使って、インタプリタとコンパイラの違いを説明してみる」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/09/21-bookmarks/",
      "published": "2019-09-21T06:23:03+00:00",
      "update": "2019-09-21T06:28:29+00:00",
      "content": " リリース情報  Google、「Flutter 1.9」リリース、Webアプリ生成機能を統合。Flutterは単一コードでネイティブアプリとWebアプリを開発できるフレームワークに － Publickey 「Dart 2.5」が登場。GitHubのコードから機械学習させた賢いコード補完をVSCodeなどに提供 － Publickey Firefox 69.0.1, See All New Features, Updates and Fixes  「Firefox」v69.0.1が公開 ～不具合や脆弱性の修正が中心 - 窓の杜 Mozilla、「Firefox」のリリースサイクルを短縮 ～4週間ごとのメジャー更新へ - 窓の杜  Inkscape 1.0 beta1 available for testing | Inkscape Hugo 0.58.3: A couple of Bug Fixes | Hugo  バベルのインターネット  GitHub、米経済制裁によるアクセス制限について考え示す - ZDNet Japan  セキュリティ＆プライバシー関連  When Biology Becomes Software - Schneier on Security Pythonに電子メール取り扱い時の挙動に関する脆弱性 | Think IT（シンクイット） Another Side Channel in Intel Chips - Schneier on Security 「OpenSSL」に複数の脆弱性、アップデートリリース | Think IT（シンクイット）  OpenSSLに複数の脆弱性、アップデートを | マイナビニュース  キヤノン 一眼レフ6機種が外部から攻撃される可能性のある脆弱性を改善 | CAPA CAMERA WEB Cracking Forgotten Passwords - Schneier on Security Revisiting Software Vulnerabilities in the Boeing 787 - Schneier on Security New Biometrics - Schneier on Security  天文関連  ターゲットマーカ分離運用 | トピックス | JAXA はやぶさ２プロジェクト 2019年9月18日ニュース「宇宙観測史上最古の銀河形成の痕跡見つけた 東大、早大などのグループ」 | SciencePortal MIT Tech Review: 顔認識アルゴリズムでダークマター探し、チューリッヒ工科大 New observations help explain the dimming of Tabby's Star From clouds to craters / Mars Express / Space Science / Our Activities / ESA  壁紙にいかが？　火星の表面を北から南まで見渡せる縦長画像が公開 - sorae 宇宙へのポータルサイト   知財関連  The Xtream Codes IPTV Takedown is Complex and Confused - TorrentFreak Piracy Boosts Sales of Some Manga Comics, Research Shows - TorrentFreak  海賊版マンガは連載中の作品の売上にネガティブ、完結した作品にポジティブな効果をもたらすとの研究 | P2Pとかその辺のお話R   Linux または Ubuntu に関する話題  ［速報］Oracle Autonomous Linuxリリース。ダウンタイムなしで自律的にパッチ適用、チューニング実行、RHELと100％互換など。Oracle OpenWorld 2019 － Publickey Ubuntu 19.10 その21 - Ubuntu 20.04 LTSまで継続的に提供する32bit版パッケージとフィードバックの募集 - kledgeb Ubuntu 19.10 その22 - Mesa 19.2.0のテスト呼び掛け - kledgeb  その他  VScode+pandoc+Lualatexで日本語pdfをMarkdownから出力する - Qiita “メディア嫌い”がフェイクを支える、その処方箋と2029年の「人工メディア」：#ONA19 報告 | 新聞紙学的 SSH CA認証まとめ 米財務省、北朝鮮のハッカー集団を制裁対象に--「WannaCry」などに関与 - ZDNet Japan ブログ: 米国がエドワード・スノーデンに対して民事訴訟を起こす GitHub、Rails 6がリリースされてからわずか9日で移行を完了。短期間で問題なく移行できた理由とは？ － Publickey なぜ昨今のJavaScriptではイミュータブルであるべきと言えるのか歴史的背景を踏まえて言語化する - Qiita GitHubがセキュリティのためのコード分析ツールSemmleを買収 | TechCrunch Japan IT産業はタダ働きのエンジニアに依存しすぎている - GIGAZINE 少女人身売買のエプスタイン事件、テック業界の関わりは？ | ギズモード・ジャパン Stallman's final interview as FSF president: Last week we quizzed him over Microsoft visit. Now he quits top roles amid rape remarks outcry • The Register  ブログ: FSF理事としてのストールマンの最後のインタビュー: 先週、マイクロソフトの訪問について彼に質問しました。 今、彼はエプスタインの電子メールの嵐の中でトップの役割を辞めます  数式言語を使って、インタプリタとコンパイラの違いを説明してみる - Qiita インドが電子たばこを禁止、若者の健康への懸念を理由に | TechCrunch Japan 2019年9月20日ニュース「砂糖の取り過ぎがメタボになる原因が分かった 名大グループが解明」 | SciencePortal  "
    },
    {
      "title": "IT 業界の醜聞",
      "section": "remark",
      "description": "対岸の火事ほど面白い見世物はない。日本にも延焼すればいいのに。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/scandal/",
      "published": "2019-09-21T04:38:47+00:00",
      "update": "2019-09-21T04:54:48+00:00",
      "content": " この手の醜聞には全く興味がないのだが， Creative Commons の言い訳じみた記事を見て「これは面白いことになるか？」と思ってたらホンマに面白いことになっているようだ。\n対岸の火事ほど面白い見世物はない。 日本にも延焼すればいいのに。 せいぜいメディアの前で踊ってください（笑）\nちうわけでブックマークとしてまとめておく。\n How an Élite University Research Center Concealed Its Relationship with Jeffrey Epstein | The New Yorker  ブログ: どのように、エリート大学の研究センターがジェフリー・エプスタインとの関係を隠したか  Message to the Creative Commons Community Regarding Joi Ito - Creative Commons In 2011, Jeffrey Epstein Was A Known Sex Offender. Jeff Bezos, Elon Musk, And Sergey Brin Shared A Meal With Him Anyway  ブログ: 2011年、ジェフリー・エプスタインは周知の性犯罪者だったにも関わらず、Amazon、Google、Teslaの創設者たちは彼と食事を共にした  少女人身売買のエプスタイン事件、テック業界の関わりは？ | ギズモード・ジャパン Stallman's final interview as FSF president: Last week we quizzed him over Microsoft visit. Now he quits top roles amid rape remarks outcry • The Register  ブログ: FSF理事としてのストールマンの最後のインタビュー: 先週、マイクロソフトの訪問について彼に質問しました。 今、彼はエプスタインの電子メールの嵐の中でトップの役割を辞めます   （本記事とはなんの関係もない）参考図書  ボヘミアの醜聞 原題: A Scandal in Bohemia ドイル アーサー・コナン 大久保 ゆう (翻訳)  1998-12-28 (Release 2014-09-17) 青空文庫 226 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  『シャーロック・ホームズの冒険』に収録された作品のひとつ。「あの女」アイリーン・アドラー登場。\nreviewed by Spiegel on 2019-09-21 (powered by aozorahack)\n  シャーロック・ホームズの冒険 (シャーロック・ホームズ全集 3) アーサー・コナン ドイル Arthur Conan Doyle (原著), Richard Lancelyn Green (原著), 小林 司 (翻訳), 東山 あかね (翻訳), 高田 寛 (翻訳) 河出書房新社 単行本 4309610439 (ASIN), 9784309610436 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「シャーロック・ホームズ」シリーズの邦訳はいくつかあるが，これはオックスフォード大学版の注釈や解説まで完備された濃い内容である。さすがシャーロッキアンは業が深い（笑）\nreviewed by Spiegel on 2019-09-21 (powered by PA-API)\n "
    },
    {
      "title": "Java 13 がリリース",
      "section": "release",
      "description": "個人的に注目点はなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/java-13-is-released/",
      "published": "2019-09-18T12:42:42+00:00",
      "update": "2019-09-18T12:43:23+00:00",
      "content": " 予定通り Java 13 がリリースされた。 OpenJDK および同系列の Java のみのショート・サイクルのバージョンアップである。\n Java 13 / JDK 13: General Availability  個人的に注目点はなし。 ミリ秒オーダーの GC とか今どきの処理系では遅すぎるだろう。\nそういえば，自宅マシンを Ubuntu に換装して以降，初めてのメジャーバージョンアップか。 結局，仕事以外で Java でプログラミングを行うことは殆どなかったし，これからもしないと思う1。\nOpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk13/5b8a42f3905b406298b72d750b6919f6/33/GPL/openjdk-13_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-13_linux-x64_bin.tar.gz $ sudo ln -s jdk-13 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;13\u0026#34; 2019-09-17 OpenJDK Runtime Environment (build 13+33) OpenJDK 64-Bit Server VM (build 13+33, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく2。\n    via Go 言語で Factory Method Pattern を構成できるか  うむうむ。 ちゃんと動くな。\nブックマーク  ［速報］Java 13が登場。ZGCの改善やSwitch式の実現など新機能。 Oracle Code One 2019 － Publickey Oracle、「Java 13」を発表 ～GCの改良やテキストブロック構文の追加などの機能改善 - 窓の杜\n Java 環境のリリースとサポートに関する覚え書き\n 結局 OpenJDK をインストールし直すことにした\n  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-API)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-API)\n  仕事以外で Java コードを書かなかったのは，うっかり守秘義務に抵触するコードを公開するのを避けるため。 Java 言語自身の問題ではない。これからも書かないというのは，今となっては「Java はやめておけ」と思うから（笑） [return] 2019-09-14 に PlantUML V1.2019.10 がリリースされている。 [return]   "
    },
    {
      "title": "Go の疑似乱数生成器は Goroutine-Safe ではないらしい（追記あり）",
      "section": "golang",
      "description": "件の記事では解決方法が（具体的には）示されていないので，いくつか対策を考えてみよう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/pseudo-random-number-generator/",
      "published": "2019-09-17T14:27:18+00:00",
      "update": "2019-09-19T16:33:14+00:00",
      "content": " 面白い記事みっけ！\n 【Go】rand.Sourceを並列で使いまわすなんて何事だ - Qiita  折角なので便乗記事を書いてみる。\nまぁ，内部状態を持つオブジェクトは，状態が変わらない（immutable）か操作が goroutine-safe であることが仕様・設計として明確であるものでない限り，複数の goroutine 間でインスタンスを共有してはいけない，というのは基本中の基本である。\nましてや標準の math/rand パッケージは rand.Source インタフェースを満たすのであればユーザ側で任意のアルゴリズムを用意することもできるので， goroutine-safe であることを期待するほうが間違っているとも言える。\nまずは，件の記事で書かれているコードを挙げておこう。 ただし動作に直接関係ないコードは極力省いている。\npackage main import ( \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; ) var randSource = NewRandSource() func NewRandSource() *rand.Rand { return rand.New(rand.NewSource(time.Now().UnixNano())) } func calcRand() { for i := 0; i \u0026lt; 10000; i++ { randSource.Intn(1000) } } func main() { wg := sync.WaitGroup{} for i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { calcRand() wg.Done() }() } wg.Wait() } ポイントは rand.Rand インスタンスを初期化時にひとつだけ生成し，複数の goroutine で使い回している点である。 これを実行すると以下のように panic を吐く。\n$ go run -trimpath sample.go panic: runtime error: index out of range [-1] goroutine 94 [running]: math/rand.(*rngSource).Uint64(...) math/rand/rng.go:249 math/rand.(*rngSource).Int63(0xc000083500, 0x50321535775976c1) math/rand/rng.go:234 +0x93 math/rand.(*Rand).Int63(...) math/rand/rand.go:85 math/rand.(*Rand).Int31(...) math/rand/rand.go:99 math/rand.(*Rand).Int31n(0xc000088090, 0x3e8, 0x1fd) math/rand/rand.go:134 +0x5f math/rand.(*Rand).Intn(0xc000088090, 0x3e8, 0x1fd) math/rand/rand.go:172 +0x45 main.calcRand() sample@/sample.go:17 +0x3f main.main.func1(0xc000098000) sample@/sample.go:26 +0x22 created by main.main sample@/sample.go:25 +0x78 exit status 2 panic が発生する仕組みは件の記事に分かりやすく解説されているので参照のこと。\ngoroutine ごとにインスタンスを生成する 件の記事では解決方法が（具体的には）示されていないので，こちらでいくつか考えてみよう。\n一番簡単なのは goroutine ごとに rand.Rand インスタンスを生成することだ。 こんな感じに変えたらどうだろう。\nfunc calcRand(rnd* rand.Rand) {  for i := 0; i \u0026lt; 10000; i++ { rnd.Intn(1000)  } } func main() { wg := sync.WaitGroup{} for i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { calcRand(NewRandSource())  wg.Done() }() } wg.Wait() } これで必要十分に機能するし，少なくとも panic は起こらない。 このやり方の欠点は（goroutine ごとに rand.Rand インスタンスが生成されるため）元のコードより（僅かだが）高コストになることと，疑似乱数生成器の性能がアルゴリズムだけでなく seed の選び方にも依存する，というあたりだろうか。\nまぁ math/rand の標準アルゴリズム1 であれば性能に関してはさしたる問題にはならないだろう。\nGenerator Pattern を使う 今回の例ではあまりオススメではないのだが，並行処理の Generator Pattern を使う手もある。\nまず NewRandSource() 関数を以下の関数で置き換える。\nfunc NewGenerator() \u0026lt;-chan int { rnd := rand.New(rand.NewSource(time.Now().UnixNano())) ch := make(chan int) go func() { defer close(ch) for { ch \u0026lt;- rnd.Intn(1000) } }() return ch } こうすれば rand.Rand インスタンスはひとつで済むし（seed もひとつ），持ち回すインスタンスは channel のみなので goroutine-safe にできる。 乱数の取り出し側はこう書き換えればよい。\nfunc calcRand(gen \u0026lt;-chan int) {  for i := 0; i \u0026lt; 10000; i++ { if _ , ok := \u0026lt;-gen; !ok { return }  } } func main() { wg := sync.WaitGroup{} gen := NewGenerator()  for i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { calcRand(gen)  wg.Done() }() } wg.Wait() } このコードの欠点は「遅い」ことに尽きる。 まぁ channel の読み書きで同期を取る必要があるから遅くなって当たり前だけど。\n今回のようなケースではなく，例えば generator がハードウェア制御を伴うものだったり singleton を含む処理だったり channel の読み書きにかかるコストに対して他の処理が相対的に大きくなったり ...などなど，状況によっては Generator Pattern のほうが有利になる場合もあるだろう。\nGenerator Pattern は平行処理のデザインパターンの中では比較的単純なものだが応用範囲が広い。 Go 言語の goroutine 自体は（OS スレッドなどと比べて）かなり安価で手軽に構成できるので，積極的に試してみるといいと思う。\nおまけの追記 そうそう。 上の NewGenerator() 関数で生成・駆動される goroutine は自力で終了できない。 なので，以下のように\nfunc NewGenerator(ctx context.Context) \u0026lt;-chan int { rnd := rand.New(rand.NewSource(time.Now().UnixNano())) ch := make(chan int) go func() { defer close(ch) for { select { case \u0026lt;-ctx.Done(): return default: ch \u0026lt;- rnd.Intn(1000) } } }() return ch } 外部からキャンセルイベントを流し込めるようにするといいかもしれない。\n【2019-09-20 追記】 実は標準で Goroutine-Safe な疑似乱数生成器が用意されていた あれから math/rand のソースコードを眺めてて気がついたのだが，実は goroutine-safe な疑似乱数生成器が標準で用意されていた。\nたとえば rand.Intn() 関数を見ると\n// Intn returns, as an int, a non-negative pseudo-random number in [0,n) // from the default Source. // It panics if n \u0026lt;= 0. func Intn(n int) int { return globalRand.Intn(n) } とか書かれていて，じゃあ globalRand って何なん？ と思って見てみたら\ntype lockedSource struct { lk sync.Mutex src Source64 } func (r *lockedSource) Int63() (n int64) { r.lk.Lock() n = r.src.Int63() r.lk.Unlock() return } func (r *lockedSource) Uint64() (n uint64) { r.lk.Lock() n = r.src.Uint64() r.lk.Unlock() return } func (r *lockedSource) Seed(seed int64) { r.lk.Lock() r.src.Seed(seed) r.lk.Unlock() } ... var globalRand = New(\u0026amp;lockedSource{src: NewSource(1).(Source64)}) とか書かれているわけですよ。 なんだ，ちゃんと sync.Mutex で排他制御してるんぢゃん。\nというわけで，最初のコードは\npackage main import ( \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; ) func calcRnad() { for i := 0; i \u0026lt; 10000; i++ { rand.Intn(1000) } } func main() { rand.Seed(time.Now().UnixNano()) wg := sync.WaitGroup{} for i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { calcRnad() wg.Done() }() } wg.Wait() } と書けば panic を吐くことなくちゃんと終了する。 若干遅くはなるけど，それでも Generator Pattern を使うよりは全然速い。\nブックマーク  Go の channel 処理パターン集\n モンテカルロ法による円周率の推定（その4 PRNG）\n  参考図書  Go言語による並行処理 Katherine Cox-Buday 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この本を読んで「よっしゃ，明日から立派な goroutine 使いだ！」とはならないと思うけど，有象無象なコピペ・プログラマじゃなく，きちんと Go 言語のプログラミングを勉強したいのであれば，この本は必読書になると思う。\nreviewed by Spiegel on 2018-11-03 (powered by PA-API)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  math/rand パッケージに実装されている擬似乱数生成器はラグ付フィボナッチ法（Lagged Fibonacci Generator）のバリエーションらしい。 [return]   "
    },
    {
      "title": "rakyll/statik でシングルバイナリにまとめる",
      "section": "golang",
      "description": "ずいぶん前に紹介した jessevdk/go-assets はもうメンテされてないらしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/using-statik-package/",
      "published": "2019-09-15T10:51:22+00:00",
      "update": "2019-09-15T10:52:15+00:00",
      "content": " 以前紹介した『改訂2版 みんなのGo言語』を読んで知ったのだが，これまたずいぶん前に紹介した jessevdk/go-assets はもうメンテされてないらしい。 確かにリポジトリを見ると3年前（2016年）から更新されてないな。\nというわけで『改訂2版 みんなのGo言語』を見ながら rakyll/statik を試してみるとしよう。\nrakyll/statik のダウンロードとビルド rakyll/statik のダウンロードとビルドは以下の通り。\n$ go get github.com/rakyll/statik@latest go: finding github.com/rakyll/statik v0.1.6 go: downloading github.com/rakyll/statik v0.1.6 go: extracting github.com/rakyll/statik v0.1.6 おー。 外部パッケージは使わないのか。 善き哉。\nビルドが成功すれば $GOPATH/bin ディレクトリに statik コマンドがインストールされる。\n$ statik -h Usage of statik: -Z\tDo not use compression to shrink the files. -c string The package comment. An empty value disables this comment. (default \u0026#34;Package statik contains static assets.\u0026#34;) -dest string The destination path of the generated package. (default \u0026#34;.\u0026#34;) -f\tOverwrite destination file if it already exists. -m\tIgnore modification times on files. -p string Name of the generated package (default \u0026#34;statik\u0026#34;) -src string The path of the source directory. (default \u0026#34;public\u0026#34;) -tags string Write build constraint tags rakyll/statik によるソース・コードの生成と組み込み 今回の構成は以下の通り（ちなみにモジュール名は sample で）。\n$ tree . . ├── go.mod ├── html │ └── index.html └── sample.go このうち html ディレクトリ以下のファイルを実行バイナリに組み込む。\n$ statik -src html これで statik/statik.go が生成される。 中身はこんな感じ。\n// Code generated by statik. DO NOT EDIT.  // Package statik contains static assets. package statik import ( \u0026#34;github.com/rakyll/statik/fs\u0026#34; ) func init() { data := \u0026#34;PK\\x03\\x04\\x14\\x00\\x08\\x00\\x08\\x00\\x92=/O\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\n\\x00\t\\x00index.htmlUT\\x05\\x00\\x01\\xe5\\xeb}]\\\\\\x8e1\\xcb\\xc2@\\x0c@\\xe7\\xaf\\xbf\\xe2z\\xf3W\\x8a\\x9bC\\xae\\x8b\\nn:\\x08\\xe2\\x18\\xef\\\u0026#34;\\x0d\\xa4w\\xa5\\x8d-\\xfe{i\\x0f\\x1d\\x9cB^\\x1e\\xe1A\\xb9?\\xed.\\xb7\\xf3\\xc1\\xb4\\xdaIS\\xc0g\\x10\\x86\\xa6\\xf8\\x83\\x8e\\x14\\x8doq\\x18I\\x9d}\\xea\\xa3\\xda\\xda/\\x8f\\xd8\\x91\\xb3\\x13\\xd3\\xdc\\xa7A\\xad\\xf1)*Euv\\xe6\\xa0\\xad\\x0b4\\xb1\\xa7j]\\xfe\\x0dGVF\\xa9F\\x8fBn\\xb3~QV\\xa1\\xe6H\\\u0026#34;\\xc9\\\\\\xd3 \\xa1\\x84:\\xb3\\x02\\xea\\x9c\\x00\\xf7\\x14^\\x8b\\xdb\\xffx\\xfd\\xe2\\xe4#\\xd4k\\xf5;\\x00\\x00\\xff\\xffPK\\x07\\x08\\x13\\xf25U\\x97\\x00\\x00\\x00\\xcc\\x00\\x00\\x00PK\\x01\\x02\\x14\\x03\\x14\\x00\\x08\\x00\\x08\\x00\\x92=/O\\x13\\xf25U\\x97\\x00\\x00\\x00\\xcc\\x00\\x00\\x00\\n\\x00\t\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xa4\\x81\\x00\\x00\\x00\\x00index.htmlUT\\x05\\x00\\x01\\xe5\\xeb}]PK\\x05\\x06\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x00A\\x00\\x00\\x00\\xd8\\x00\\x00\\x00\\x00\\x00\u0026#34; fs.Register(data) } html/index.html ファイルの中身は圧縮されて格納されるようだ。 -Z オプションで圧縮を解除できるが，まぁ普通は圧縮するだろう（笑）\n生成された statik サブパッケージを使って以下のように HTTP サーバを構成してみる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; _ \u0026#34;sample/statik\u0026#34; \u0026#34;github.com/rakyll/statik/fs\u0026#34; ) func main() { fmt.Println(\u0026#34;Open http://localhost:3000/\u0026#34;) fmt.Println(\u0026#34;Press ctrl+c to stop\u0026#34;) statikFs, err := fs.New() if err != nil { fmt.Fprintln(os.Stderr, err) return } http.Handle(\u0026#34;/\u0026#34;, http.FileServer(statikFs)) if err := http.ListenAndServe(\u0026#34;:3000\u0026#34;, nil); err != nil { fmt.Fprintln(os.Stderr, err) } } これで\n$ go run sample.go Open http://localhost:3000/ Press ctrl+c to stop としてサーバを起動しブラウザで http://localhost:3000/ にアクセスすれば html/index.html ファイルの内容が表示される。\nstatik/fs.New() 関数は http.FileSystem インスタンスを返す。 http.FileSystem は interface 型で，以下のように定義されている。\n// A FileSystem implements access to a collection of named files. // The elements in a file path are separated by slash (\u0026#39;/\u0026#39;, U+002F) // characters, regardless of host operating system convention. type FileSystem interface { Open(name string) (File, error) } http.File も interface 型で，以下のように定義されている。\n// A File is returned by a FileSystem\u0026#39;s Open method and can be // served by the FileServer implementation. // // The methods should behave the same as those on an *os.File. type File interface { io.Closer io.Reader io.Seeker Readdir(count int) ([]os.FileInfo, error) Stat() (os.FileInfo, error) } つまり rakyll/statik パッケージで生成されるファイルシステムを使えばこれだけの操作ができるということだ。 上手く使っていきたい。\ngo generate コマンドによるソース・コードの生成 // コメントに go:generate マーカを使うことにより go generate コマンドで statik コマンドを呼び出せる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; _ \u0026#34;sample/statik\u0026#34; \u0026#34;github.com/rakyll/statik/fs\u0026#34; ) //go:generate statik -src html  func main() { fmt.Println(\u0026#34;Open http://localhost:3000/\u0026#34;) fmt.Println(\u0026#34;Press ctrl+c to stop\u0026#34;) statikFs, err := fs.New() if err != nil { fmt.Fprintln(os.Stderr, err) return } http.Handle(\u0026#34;/\u0026#34;, http.FileServer(statikFs)) if err := http.ListenAndServe(\u0026#34;:3000\u0026#34;, nil); err != nil { fmt.Fprintln(os.Stderr, err) } }  $ go generate $ go run sample.go Open http://localhost:3000/ Press ctrl+c to stop go generate コマンドは明示的に行う必要があるので注意。\nブックマーク  Goのバイナリに静的ファイルを埋め込むツール assets-life を書いた : 自コードを Quine として埋め込むらしい。面白い！  参考図書  改訂2版 みんなのGo言語 松木 雅幸, mattn, 藤原 俊一郎, 中島 大一, 上田 拓也, 牧 大輔, 鈴木 健太 技術評論社 2019-08-01 (Release 2019-08-01) Kindle版 B07VPSXF6N (ASIN), 9784297107284 (EISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  改訂2版の目玉は7章の「データベースの扱い方」が追加されたことだろう。他の章では，大まかな構成は1版と同じだが細かい部分が変わっていて Go 1.12 への言及まであるのには驚いた。\nreviewed by Spiegel on 2019-08-12 (powered by PA-API)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "Firefox の DoH は無効にすべきか（もしくは水売りと水道局）",
      "section": "remark",
      "description": "これは ISPA の言いがかりみたいな話ではなく，現在のインターネットの構造，ひいては社会システムに連動する問題提起だ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/should-disable-doh-in-firefox/",
      "published": "2019-09-15T01:31:39+00:00",
      "update": "2019-09-21T03:45:13+00:00",
      "content": " 先日 Mozilla が DoH (DNS-over-HTTPS) を Firefox に正式に実装するとアナウンスがあったが\n What’s next in making Encrypted DNS-over-HTTPS the Default - Future Releases Mozilla Firefox to begin slow rollout of DNS-over-HTTPS by default at the end of the month • The Register FirefoxがDNSとの通信を暗号化する「DNS over HTTPS(DoH)」を正式に実装すると発表 - GIGAZINE  これに懸念を呈する面白い記事がある。\n ungleich blog - Turn off DoH, Firefox. Now. （邦訳版）  これは ISPA の言いがかりみたいな話ではなく，現在のインターネットの構造，ひいては社会システムに連動する問題提起だ。\nそもそも件のブログ記事は DoH 自体には反対していない。\nDoH and DoT (DNS over TLS) are in general good technologies as they add encryption to an important process of daily life. However the approach Mozilla takes is simply wrong. The correct way would be to standardise DoH and DoT and add support into it into automatic address configurations and operating systems. Not in applications! via Turn off DoH, Firefox. Now.  そして，問題は DoH が組み込まれる Firefox がアプリケーションに過ぎないこと， DoH のホストとして米国の Cloudflare を利用していることだと主張している。\nIt means people outside the US can now be fully tracked by US government via Turn off DoH, Firefox. Now.  whether you trust Cloudflare or not, you'll end up directly supporting centralisation by using DoH in Firefox. Centralisation makes us depend on one big player, which results in fewer choices and less innovation. Centralisation affects everybody by creating a dangerous power and resource imbalance between the center and the rest. via Turn off DoH, Firefox. Now.  これで思い出すのが，かつて言われた「水のような音楽」というやつだ。\nもともと「水のような音楽」は DRM (Digital Right Management) で貞操帯のごとくがんじ搦めにされたコンテンツに対するアンチテーゼのようなものだった。\n もう一つは既存のサービスを残したままで、新しい DRM フリーの高品質サービスが提供されること。手軽にアクセスできる安価な水道水がある一方で、より質を重視する人にはそれより値がはるミネラルウォーターも提供されるという「水のような音楽」モデルじゃないですか。 via EMIのDRMとの決別は「水のような音楽」への大きな一歩か - YAMDAS現更新履歴  しかし，音楽にしろ映像にしろ，無料または定額制のストリーミングサービスが一般化し「水のような音楽」が合法的に利用できるようになって分かったことは 「水道水はミネラルウォーターより統制しやすい」 といういうことだった。\n言ってみれば「水」を売るのが「水売り」から「水道局」に代わっただけで，むしろ「水道局」のほうが中央集権的で統制に向いているのは明らかである。 いずれにしろ利用者に自由なんてものはないのだ。\nこれは音楽や映像といったコンテンツに限らず電子メール等のメッセージング・サービスや（マイクロ）ブログにも言えることで，今回の Firefox への DoH 実装は インターネットによる統制 を更に更に推し進めていくだろう，というわけだ。\nそういう意味でも ISPA の言いがかりはホンマに言いがかりなんだなぁ，と思ってしまう。\nちなみに件のブログでは\nIt is clear what Mozilla needs to do: Mozilla can and should revert the change and allow users to easily opt-in. And to select or enter the DoH provider instead of defaulting to Cloudflare. Also Mozilla can take real responsibility and work together with the Internet community and create RFCs to make DHCPv4, DHCPv6 and Router Advertisements support DNS URLs instead of just IP addresses. via Turn off DoH, Firefox. Now.  と書かれていて，これに関しては激しく同意する。\nそういえば最近 Firefox 69 がリリースされて\n Today’s Firefox Blocks Third-Party Tracking Cookies and Cryptomining by Default - The Mozilla Blog  一瞬喜んだが，私のケータイは 68.x から一向にアップグレードされる気配がない。\nはっきり言おう。\nMozilla がユーザのプライバシーを重視しているというのは嘘っぱちである 本当に Mozilla がユーザのプライバシーを重視しているというのなら，検索サービスの既定を DuckDuckGo にすべき。 話はそれからだ。\nブックマーク  Blocking Firefox DoH with Bind - SANS Internet Storm Center Encrypted DNS Could Help Close the Biggest Privacy Gap on the Internet. Why Are Some Groups Fighting Against It? | Electronic Frontier Foundation\n DNS暗号化はプライバシーギャップの克服にきわめて有効……なのになぜ反対の声が上がっているのか？ | P2Pとかその辺のお話R  監視をコントロールする\n  参考文献  超監視社会 ブルース・シュナイアー 池村 千秋 (翻訳) 草思社 2016-12-13 (Release 2017-02-03) Kindle版 B01MZGVHOA (ASIN)  実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。\nreviewed by Spiegel on 2019-03-23 (powered by PA-API)\n  デジタル音楽の行方 David Kusek, Gerd Leonhard, yomoyomo yomoyomo (翻訳), 津田 大介 (翻訳) 翔泳社 2005-12-06 単行本 4798110035 (ASIN), 9784798110035 (EAN)  読んでない。絶賛絶版中？ もはや歴史的価値の有無さえ不明。「デジタル」とタイトルに冠されているにも関わらず Kindle 化すらされてないことに出版側のやる気を感じる（笑）\nreviewed by Spiegel on 2017-07-30 (powered by PA-API)\n "
    },
    {
      "title": "星間天体 Borisov に関するブックマーク",
      "section": "remark",
      "description": "2017年の 1I/2017 U1 (ʻOumuamua) に続いて2つ目の観測例となる（であろう）星間天体 C/2019 Q4 (Borisov) に関するメモ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/interstellar-object-borisov/",
      "published": "2019-09-14T22:50:40+00:00",
      "update": "2019-09-14T23:58:43+00:00",
      "content": " 2017年の 1I/2017 U1 (ʻOumuamua) に続いて2つ目の観測例となる（であろう）星間天体 C/2019 Q4 (Borisov) に関するメモ。 なお，正式に星間天体（interstellar object）として認められれば新しいコードが割り振られると思われ。\n Gemini Observatory Captures Multicolor Image of First-ever Interstellar Comet | Gemini Observatory Newly Discovered Comet Is Likely Interstellar Visitor | NASA オウムアムアに次ぐ恒星間天体らしき彗星が接近中。その大きさはキロメートル級？ | sorae 宇宙へのポータルサイト C/2019 Q4 (Borisov) 彗星の動き - StellaCloud   彗星活動を初めて示すインターステラ天体 C/2019 Q4 (Borisov)の2色カラー画像(ハワイ8.2m Gemini望遠鏡)。g\u0026#39;-r\u0026#39;=0.63 ± 0.03は、太陽系起源の彗星に類似。エアマス2以上の悪条件だが、今後好条件になるので、インターステラ物質についての研究が進むものと期待。 ghttps://www.gemini.edu/node/21240 pic.twitter.com/4Aw7gMi6h6\n\u0026mdash; Abe S. 阿部新之助 (@AvellSky) September 14, 2019  ちなみに2017年の 1I/2017 U1 (ʻOumuamua) のときはこんな感じで話題になった。 当時は何故か記事にまとめてなかったのでこの記事で挙げておく。\n MPEC 2017-V17 : NEW DESIGNATION SCHEME FOR INTERSTELLAR OBJECTS : A/2017 U1に新たな番号「1I」、「'Oumuamua」と命名 観測史上初の恒星間天体、名前は「'Oumuamua」 - アストロアーツ 恒星間天体「オウムウムア」、観察結果から人工的信号の証拠は見つからず | TechCrunch Japan All news | Alien object ‘Oumuamua was a natural body visiting from another solar system | News | Queen's University Belfast ‘Oumuamua likely came from a binary star system  参考図書  天体の位置計算 長沢 工 地人書館 1985-09-01 単行本 4805202254 (ASIN), 9784805202258 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "2019-09-14 のブックマーク",
      "section": "bookmarks",
      "description": "「Newly Discovered Comet Is Likely Interstellar Visitor」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/09/14-bookmarks/",
      "published": "2019-09-14T11:24:22+00:00",
      "update": "2019-09-21T03:45:13+00:00",
      "content": " リリース情報  TDF、「LibreOffice 6.3.1」「LibreOffice 6.2.7」を公開 ～2件の脆弱性を修正 - 窓の杜 「Google Chrome 77」が正式公開 ～アドレスバーのEV証明書発行元表示は廃止 - 窓の杜 「Thunderbird」v68.1.0が公開 ～“Office365”のExchangeアカウントの登録処理を改善 - 窓の杜 : 「「Thunderbird 60」系統へのアップグレード提供は、次期バージョンのv68.2からになる予定」とのこと。ホンマかなぁ。もう少し待ってみるか  「Thunderbird 60.9」「Thunderbird 68.1」で修正された脆弱性はCVE番号ベースで7件 - 窓の杜  Hugo 0.58.2: A couple of Bug Fixes | Hugo ESLint v6.4.0 - Qiita  バベルのインターネット セキュリティ＆プライバシー関連  draft-ietf-openpgp-rfc4880bis-08 - OpenPGP Message Format 悪意あるDDoS攻撃を受けWikipediaが欧州の広範囲と中東の一部でダウン | TechCrunch Japan  WikipediaへのDDoS攻撃とSNSへ投稿された「IoTのテスト」についてまとめてみた - piyolog  MIT Tech Review: ストーカーウェア被害撲滅へ、ニューヨーク市が独自の取り組み Twitterも影響を受けたSSL VPN製品の脆弱性についてまとめてみた - piyolog トヨタ紡織で発生した虚偽の指示による資金流出事案についてまとめてみた - piyolog 複数の国内サイトで発生したiPhoneウイルス検出の偽画面表示についてまとめてみた - piyolog PayPayを騙るスミッシングについてまとめてみた - piyolog ウイルスバスターコーポレートエディションの脆弱性(CVE-2019-9489) について：IPA 独立行政法人 情報処理推進機構  ウイルスバスター コーポレートエディションの脆弱性 (CVE-2019-9489) に関する注意喚起  On Cybersecurity Insurance - Schneier on Security Facebookの\u0026quot;出会い系\u0026quot;サービスに警戒せよ | P2Pとかその辺のお話R 「Firefox」、プライバシー高めるVPNサービスをベータ提供 - ZDNet Japan  Mozilla、復活「Test Pilot」でプライバシー保護拡張機能「Firefox Private Network」のβ版公開 - ITmedia NEWS  Intel、2019年9月のセキュリティアドバイザリを公開 ～2製品が対象 - 窓の杜 More on Law Enforcement Backdoor Demands - Schneier on Security FirefoxがDNSとの通信を暗号化する「DNS over HTTPS(DoH)」を正式に実装すると発表 - GIGAZINE リコーのプリンタと複合機にバッファオーバーフローの脆弱性 | マイナビニュース SMSを密かに送信し、位置情報を追跡するエクスプロイト「Simjacker」が発見される - ITmedia NEWS Smart Watches and Cheating on Tests - Schneier on Security  天文関連  MIT Tech Review: 小型衛星向け、新世代の液体燃料プラズマ推進装置 135億年前の星形成の痕跡を発見！〜最遠の「老けた銀河」探査〜 | 国立天文台(NAOJ) 双子原始星からのふぞろいな分子流から連星系形成の謎に迫る | 国立天文台(NAOJ) APOD: 2019 September 9 - M31: The Andromeda Galaxy APOD: 2019 September 10 - Pluto in True Color 地球から110光年先のスーパーアースに液状の水 | TechCrunch Japan MPEC 2019-R113 : COMET C/2019 Q4 (Borisov)  Gemini Observatory Captures Multicolor Image of First-ever Interstellar Comet | Gemini Observatory Newly Discovered Comet Is Likely Interstellar Visitor | NASA オウムアムアに次ぐ恒星間天体らしき彗星が接近中。その大きさはキロメートル級？ | sorae 宇宙へのポータルサイト   知財関連  hentaiサイトを狙う虚偽のDMCA削除通知爆撃、被害サイト運営者はGoogleへの集団訴訟を検討 | P2Pとかその辺のお話R Cox Attacks 'Proof' in Piracy Liability Case, Requests Summary Judgment - TorrentFreak Nintendo Wins Blocking Injunction Against Four Piracy-Enabling Sites - TorrentFreak 米議員、YouTubeにコンテンツIDの開放を求める | P2Pとかその辺のお話R  Linux または Ubuntu に関する話題  メールサーバ「Exim」に複数の脆弱性、アップデートを | マイナビニュース  その他  2019年、人気のプログラミング言語トップはPython。Java、Cが続く。IEEE Spectrumによる調査 － Publickey 9月13日はプログラマの日なのである - 現場からの「協働革新」 - ZDNet Japan グーグルとFTCの和解で示された子供のプライバシーの価値はわずか181億円 | TechCrunch Japan 半世紀前のアメリカで女性ができなかった9つのこと - YAMDAS現更新履歴 Googleがコードレビューのガイドラインなど、ソフトウェアエンジニアリング実践のためのドキュメント「Google Engineering Practices Documentation」を公開 － Publickey IntelliCodeがプログラマのリファクタリング作業を自動的に学習。学習内容からリファクタリング箇所を提案するように － Publickey MIT Tech Review: 「環境にやさしいクルマ」が独禁法違反？米司法省が調査へ 全米50の州と領域の司法長官がGoogleに対する反トラスト法違反の捜査で合意 | TechCrunch Japan GitHub Actions による GitHub Pages への自動デプロイ - Qiita MIT Tech Review: 足裏の感覚を再現、歩行を楽にする新しい義足 ファーウェイが米政府が押収した機器への訴訟取り下げ | TechCrunch Japan ブログ: どのように、エリート大学の研究センターがジェフリー・エプスタインとの関係を隠したか  Message to the Creative Commons Community Regarding Joi Ito - Creative Commons ブログ: 2011年、ジェフリー・エプスタインは周知の性犯罪者だったにも関わらず、Amazon、Google、Teslaの創設者たちは彼と食事を共にした  「Pulumi」がバージョン1.0に到達、正式版に。インフラの状態をJavaScript、Python、Goなどで記述可能。個人向けサービスは無料で提供 － Publickey Rustで実装したアルゴリズムをUnityから使う - Qiita Googleが検索で「オリジナル記事」を優先するアルゴリズム変更を実施 | TechCrunch Japan メインフレーム「IBM z15」、日本でも発表 - ZDNet Japan New CC T-Shirt! (Inspired by a Letter from a 5th Grader) - Creative Commons : www 月と地球を結ぶエレベーター「スペースライン」を科学者が提唱 | TechCrunch Japan IBMのメインフレーム事業は健在、新機種z15を発表 | TechCrunch Japan  "
    }
  ]
}
