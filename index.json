{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Go による Token Bucket 実装",
      "section": "golang",
      "description": "golang.org/x/time/rate パッケージを使う。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/token-bucket/",
      "published": "2021-06-03T11:44:50+00:00",
      "update": "2021-06-03T11:45:07+00:00",
      "content": "Qiita で\n golang.org/x/time/rate でレイトリミット - Qiita  という記事を見かける。\ngolang.org/x/time/rate は，いわゆる「トークンバケット（token bucket）」アルゴリズムを実装するためのパッケージのようだ。 トークンバケット・アルゴリズムとは\n A token is added to the bucket every $1/r$ seconds. The bucket can hold at the most $b$ tokens. If a token arrives when the bucket is full, it is discarded. When a packet (network layer PDU) of $n$ bytes arrives,  if at least $n$ tokens are in the bucket, $n$ tokens are removed from the bucket, and the packet is sent to the network. if fewer than $n$ tokens are available, no tokens are removed from the bucket, and the packet is considered to be non-conformant.     via Token bucket - Wikipedia  といったものらしい。 具体的には\nfunc NewLimiter(r Limit, b int) *Limiter  via rate · pkg.go.dev  で生成される rate.Limiter 型のインスタンスが上の説明の「バケット」に相当するようだ。 引数の r と b も同じ意味かな。\nこれを並行処理のジェネレータ・パターンと組み合わせると面白そうである。\nというわけで，まずは以下のコードを起点としてみよう。\n// +build run  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func generater(wg *sync.WaitGroup, ch chan\u0026lt;- int) { defer func() { close(ch) wg.Done() }() for i := 0; i \u0026lt; 10; i++ { ch \u0026lt;- i + 1 } } func output(wg *sync.WaitGroup, num int, ch \u0026lt;-chan int) { for n := range ch { fmt.Printf(\u0026#34;Worker %d: %v\\n\u0026#34;, num, n) } wg.Done() } func main() { var wg sync.WaitGroup ch := make(chan int, 1) wg.Add(1) go generater(\u0026amp;wg, ch) for i := 0; i \u0026lt; 2; i++ { wg.Add(1) go output(\u0026amp;wg, i+1, ch) } wg.Wait() } generater() 関数はチャネルに対して 1 から 10 までの値を吐き出す。 output() 関数はチャネルから値を取り出して表示するという簡単なお仕事である。 ただし output() 関数は2つの goroutine で起動している。\nこれを実行すると\n$ go run sample1.go Worker 2: 1 Worker 2: 2 Worker 2: 3 Worker 1: 5 Worker 1: 6 Worker 1: 7 Worker 1: 8 Worker 1: 9 Worker 1: 10 Worker 2: 4 という出力になった。 2つの goroutine は並行に走ってるので出力順は不定となる。\nこのコードに golang.org/x/time/rate パッケージを加えて流量の制御を行う。 こんな感じでどうだろう。\n// +build run  package main import ( \u0026#34;context\u0026#34;  \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34;  \u0026#34;time\u0026#34; \u0026#34;golang.org/x/time/rate\u0026#34; ) func generater(wg *sync.WaitGroup, ch chan\u0026lt;- int) { defer func() { close(ch) wg.Done() }() l := rate.NewLimiter(rate.Every(time.Second*2), 1)  for i := 0; i \u0026lt; 10; i++ { if err := l.Wait(context.Background()); err != nil { fmt.Printf(\u0026#34;generater: %v\\n\u0026#34;, err) return }  ch \u0026lt;- i + 1 } } func output(wg *sync.WaitGroup, num int, ch \u0026lt;-chan int) { for n := range ch { fmt.Printf(\u0026#34;Worker %d: %v\\n\u0026#34;, num, n) } wg.Done() } func main() { var wg sync.WaitGroup ch := make(chan int, 1) wg.Add(1) go generater(\u0026amp;wg, ch) for i := 0; i \u0026lt; 2; i++ { wg.Add(1) go output(\u0026amp;wg, i+1, ch) } wg.Wait() } これでサイズ 1 のバケットに２秒毎にトークンが挿入される。 トークを取り出すタイミングでチャネルに値を入れるわけだ。 これを実行すると\n$ go run sample2.go Worker 2: 1 Worker 1: 2 Worker 2: 3 Worker 1: 4 Worker 2: 5 Worker 1: 6 Worker 2: 7 Worker 1: 8 Worker 2: 9 Worker 1: 10 という感じに２秒毎に結果が出力される。\nバケットサイズをプロセッサ数と同数にしてみよう。 こんな感じかな。\n// +build run  package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;runtime\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; \u0026#34;golang.org/x/time/rate\u0026#34; ) func generater(wg *sync.WaitGroup, ch chan\u0026lt;- int, max int) {  defer func() { close(ch) wg.Done() }() l := rate.NewLimiter(rate.Every(time.Second*2), max)  for i := 0; i \u0026lt; 10; i++ { if err := l.Wait(context.Background()); err != nil { fmt.Printf(\u0026#34;generater: %v\\n\u0026#34;, err) return } ch \u0026lt;- i + 1 } } func output(wg *sync.WaitGroup, num int, ch \u0026lt;-chan int) { for n := range ch { fmt.Printf(\u0026#34;Worker %d: %v\\n\u0026#34;, num, n) } wg.Done() } func main() { max := runtime.GOMAXPROCS(0)  var wg sync.WaitGroup ch := make(chan int, max) wg.Add(1) go generater(\u0026amp;wg, ch, max) for i := 0; i \u0026lt; max; i++ {  wg.Add(1) go output(\u0026amp;wg, i+1, ch) } wg.Wait() } これを実行すると（プロセッサ数：4）以下のようになった。\n$ go run sample3.go Worker 3: 3 Worker 3: 4 Worker 2: 2 Worker 4: 1 Worker 1: 5 Worker 3: 6 Worker 2: 7 Worker 4: 8 Worker 1: 9 Worker 3: 10 最初の4つは一気に出力されて，以降は2秒ずつの出力。\nといった感じで，処理の制限をワーカ側ではなくジェネレータ側で行うのが特徴と言えるだろうか。 Web クローラとか使い道は色々あるかもしれない。\n参考図書   Go言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Eブック版もある。感想はこちら。 Go 言語で並行処理を書くならこの本は必読書になるだろう。\nreviewed by Spiegel on 2020-01-13 (powered by PA-APIv5)\n   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-05-21) Kindle版 B094PRR7PZ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n "
    },
    {
      "title": "2021-05-30 のブックマーク",
      "section": "bookmarks",
      "description": "「QUIC is now RFC 9000」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/05/30-bookmarks/",
      "published": "2021-05-30T00:46:27+00:00",
      "update": "2021-05-30T00:46:53+00:00",
      "content": "リリース情報  Release Windows Terminal v1.8.1444.0 · microsoft/terminal · GitHub  セキュリティ＆プライバシー関連  富士通のプロジェクト情報共有ツール「ProjectWEB」への不正アクセスについてまとめてみた - piyolog マッチングアプリ「Omiai」会員情報管理サーバーへの不正アクセスについてまとめてみた - piyolog  婚活アプリ「Omiai」のネットマーケティングがコーポレートサイト「お問い合わせフォーム」で個人情報を閲覧できる状態になっていたと報告 | TechCrunch Japan   Bluetoothになりすましの脆弱性、多くの製品に影響する可能性 | Think IT（シンクイット） VMware vCenter Serverの複数の脆弱性（CVE-2021-21985、CVE-2021-21986）に関する注意喚起 M1RACLES: M1ssing Register Access Controls Leak EL0 State  Apple M1チップに脆弱性「M1RACLES」発見、Linuxの移植中に見つかる | TECH+    Windows に関する話題  できた！うかつにもしゃべってしまう nyagos が 「Visual Studio 2019」v16.10が正式公開 ～コンパイラーとSTLライブラリがC++20に対応 - 窓の杜 「Windows Terminal Preview 1.9」はWindows既定のターミナルエミュレーターとして動作可能 ～「Quake」モードも追加 - 窓の杜  その他  アドビがマイクロソフトの「Microsoft Teams」に「Adobe Document Cloud」を統合 - 窓の杜 旧「Edge」、「IE11」、wmicコマンド……「Windows 10 バージョン 21H1」で削除・非推奨となる機能たち - 窓の杜 「第4次ガザ戦争」が短期間で停戦に向かった背景：バイデン政権の静かな変化とイスラエルの苦い経験：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト 半導体不足がさらに深刻化し「危険水域」に突入か、MacやiPadの製造にも影響する可能性も | TechCrunch Japan デジタルの世界は人々を傷つけない - 井出草平の研究ノート どうしてもvimを勉強したくない人のための最低限コマンド集 「Microsoft Build of OpenJDK」が一般公開 ～無償で「Java」の長期サポートを提供 - 窓の杜 田んぼの自動抑草ロボットを開発する有機米デザインが2億円を調達し実用化を加速 | TechCrunch Japan Android IDEの最新版「Android Studio Arctic Fox (2020.3.1)」ベータ公開。Wear OS対応では心拍数のエミュレートが可能に － Publickey PoE+に対応した「Raspberry Pi PoE+ HAT」登場、スイッチサイエンスより税込3180円で近日発売 | TechCrunch Japan Ankerが小型AC充電器の新世代モデル「Nano II」シリーズ発表、USB-C端子1ポート設計で30W・45W・65Wの3種類 | TechCrunch Japan QUIC is now RFC 9000 | Fastly  RFC 9000: QUIC: A UDP-Based Multiplexed and Secure Transport    "
    },
    {
      "title": "CAVOC Web API で遊ぶ",
      "section": "remark",
      "description": "CVO 情報を取得する Web API があるみたいなので，これを検証するためのコマンドライン・ツールを作ってみた。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/05/cavoc-api-client/",
      "published": "2021-05-29T07:58:27+00:00",
      "update": "2021-05-29T08:00:45+00:00",
      "content": "突然だが「共通農業語彙（Common Agricaulturel VOcabulary; CAVOC）」というサイトがあるのだが，この中に農作物の語彙体系を整理したデータベースがある。\n 農作物語彙体系(CVO, Crop VOcabulary)  この CVO 情報を取得する Web API があるみたいなので，これを検証するためのコマンドライン・ツールを作ってみた。\n spiegel-im-spiegel/gcavoc: Common Agricaulturel Vocabulary API Client by Golang  動作例を挙げると「せろり」の標準名は\n$ gcavoc std せろり {\u0026#34;term\u0026#34;:\u0026#34;セロリ\u0026#34;} てな感じに取得できる。 また，セロリの Wikipedia ページを取得したいなら\n$ gcavoc wikipedia セロリ https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%AB%E3%83%AA%E3%82%A2%E3%83%83%E3%82%AF という感じ。 いや，なんで「セルリアック」のページなんだ？\nとまぁ微妙なんだよな。\nたとえば，同じ「セロリ」にしても収穫・出荷する部位によって異なる「農作物」になるのだが Web API ではそこまで細かく制御できない感じ。 元データはオープンデータで公開されているので，真面目にやりたいなら自前で何とかしろってことかもしれない。\n"
    },
    {
      "title": "2021-05-23 のブックマーク",
      "section": "bookmarks",
      "description": "「FragAttacks: Security flaws in all Wi-Fi devices」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/05/23-bookmarks/",
      "published": "2021-05-23T05:24:39+00:00",
      "update": "2021-05-30T00:46:53+00:00",
      "content": "リリース情報  Release v1.40.0 · golangci/golangci-lint · GitHub Release 8.10.1 · mermaid-js/mermaid · GitHub Release 1.57.0 · atom/atom · GitHub Release April 2021 Recovery · microsoft/vscode · GitHub Release 0.18.0 · tinygo-org/tinygo · GitHub Firefox 88.0.1, See All New Features, Updates and Fixes Release April 2021 Recovery 2 · microsoft/vscode · GitHub LibreOffice 7.0.6 has been released - The Document Foundation Blog  「LibreOffice 7.0.6」が公開 ～「LibreOffice 7.0」系のリリースはこれが最後 - 窓の杜   Release v1.40.1 · golangci/golangci-lint · GitHub Release v1.0.21 · sonatype-nexus-community/nancy · GitHub Thunderbird — Release Notes (78.10.2) — Thunderbird Release v0.26.1: Update CI on the stable-v0.26 branch (#2921) · bytecodealliance/wasmtime · GitHub Release v0.27.0: Merge pull request #2924 from cfallin/remove-readme-wasi-tokio · bytecodealliance/wasmtime · GitHub Release 4.4.9_7 · zetamatta/nyagos · GitHub  セキュリティ＆プライバシー関連  EC-CUBEのクロスサイトスクリプティングの脆弱性（CVE-2021-20717）に関する注意喚起 The Coming AI Hackers | Belfer Center for Science and International Affairs ブルース・シュナイアーが予言する「AIがハッカーになり人間社会を攻撃する日」 - YAMDAS現更新履歴 米石油パイプライン企業へのサイバー攻撃についてまとめてみた - piyolog SSH越しでのGitHub操作にセキュリティキーが利用可能に\u0026ndash;2021年中にパスワードを廃止へ - ZDNet Japan Microsoft Releases May 2021 Security Updates | CISA  緊急の脆弱性あり、Windows Updateの適用を - 攻撃での悪用確認 | TECH+   FragAttacks: Security flaws in all Wi-Fi devices  事実上ほぼ全てのWi-Fiデバイスに内在する脆弱性「FragAttacks」が公開される、ユーザー名やパスワードの流出、PCの乗っ取りも可能 - GIGAZINE すべてのWi-Fi製品に影響及ぼす可能性ある脆弱性、再び発見 | TECH+   「お前の自慰姿を撮ったぞ」というメールは無視で（笑） - 電気ウナギ的○○ ワクチン予約システムで話題の「SQLインジェクション」って何？　試すと法律違反？　専門家に聞く - ITmedia NEWS macOS版「LibreOffice」に脆弱性 ～修正版のv7.0.6/7.1.3への更新を - 窓の杜 Ransomware’s Dangerous New Trick Is Double-Encrypting Your Data | WIRED  Double-Encrypting Ransomware - Schneier on Security   Inside Apple’s Compromises in China: A Times Investigation - The New York Times  Apple Censorship and Surveillance in China - Schneier on Security    Linux または Ubuntu に関する話題  Ubuntu 21.04 その25 - Ubuntu 21.04 日本語 Remixがリリースされました・ディスクイメージのダウンロード - kledgeb 「Vine Linux」のリリースが終了、国内のLinux普及に大きく貢献 - 窓の杜 Ubuntu 20.10 その98 - Ubuntu 21.04へアップグレードするには・アップグレードの注意事項 - kledgeb  Windows に関する話題  WindowsがまたLinuxを取り込む。マイクロソフト、Linuxカーネルが備える拡張機能「eBPF」互換機能をWindowsにもオープンソースで実装へ － Publickey 「Windows 10 バージョン 2004/20H2」に残された最後の非互換性問題が解決 - 窓の杜 「Windows 10 バージョン 21H1」の一般提供が開始 ～年2回の大規模アップデート - 窓の杜 The future of Internet Explorer on Windows 10 is in Microsoft Edge | Windows Experience Blog  Internet Explorerが2022年6月15日にサポート終了、ただしEdgeのIEモードは2029年までを予定 | TechCrunch Japan 新EdgeでIEモードを有効化: Jacket Blog ブログシステム「WordPress」でも7月の「WordPress 5.8」から「IE 11」対応が終了 - 窓の杜    Go 言語関連  Go公式のlinter、Golintが非推奨になった How do I disable GoLang\u0026rsquo;s auto-formatting on file save in VSCode? - DEV Community 『プログラミング言語Go』のKindle版が出ました：柴田 芳樹 (Yoshiki Shibata)：SSブログ Graceful Shutdowns in Golang with signal.NotifyContext · Taliesin Millhouse Go 1.17(?)で入るFuzzingについて調べるぞ！  その他  我々の脳はコンピュータよりもインターネットに近い？ 脳の働きの新しいパラダイムをもたらす新刊 - YAMDAS現更新履歴 電子だけ売れてるマンガなんてもうないよ｜竹村響　Hibiki Takemura｜note ラズパイを使って、iPadをスワイプするよ git gc の仕組みを原理から理解してサイズを 136MB → 7.2MB(95%減)まで削減した時の勉強メモ Zennで途中からGitHubリポジトリ連携をはじめるときの手順 マイクロソフト、「Azure Blockchain Service」を2021年9月に終了 - ZDNet Japan PDFやWord、Excelファイルを読み込み、レイアウトなどはそのまま内容だけを翻訳。Google Translation APIに新機能 － Publickey マイクロソフト「Teams」、ウェビナー機能の提供を開始 - ZDNet Japan jQuery依存を脱した「Bootstrap 5」正式リリース、IEもついにサポート対象外に。右からの横書き「RTL」など新機能 － Publickey COVID-19 Was \u0026lsquo;A Preventable Disaster,\u0026rsquo; WHO-Ordered Report Says : Coronavirus Updates : NPR  ブログ: COVID-19は「予防可能な災害」だった、WHOが報告書を提出   絵文字をファビコンとして表示する簡単な方法 Notion APIのLimit（リクエスト制限）で気になったことまとめ ブラウザ定規,単位測定ツール,実寸WEB定規（物差し） Excelから発展\u0026ndash;「Power Fx」から見えるローコード開発環境の未来 - ZDNet Japan 私的 goawk リポート - 標準愚痴出力 ワクチン予約接種関連のシステムトラブルについてまとめてみた - piyolog ［速報］Google、新デザインフレームワーク「Material You」発表。デバイスからアプリケーションまでGoogleの製品すべてに適用へ。Google I/O 2021 － Publickey ［速報］Google、目の前に相手が実在するかのような「Project Starline」発表。精細な3Dモデルのリアルタイム伝送と裸眼立体視で、Google I/O 2021 － Publickey GitHub Artifact Exporter open source release | The GitHub Blog ［速報］Google、1エクサフロップを超える性能を持つ「TPU v4」発表、Google史上最高性能のシステム。Google I/O 2021 － Publickey グーグルがRSSを復活させる | TechCrunch Japan : 不要w Introducing Site Isolation in Firefox - Mozilla Security Blog  「Firefox」にも新しいサイト分離アーキテクチャー「Fission」が導入へ - 窓の杜   グーグルのアプリ開発プラットフォーム「Firebase」に多数のアップデート - ZDNet Japan グーグル、クロスプラットフォームフレームワーク「Flutter 2.2」発表 - ZDNet Japan Excelの表をパワポにひたすらコピペするだけのマクロ組んだ まつもと泉先生原作の大ブームを巻き起こした人気作！「きまぐれオレンジ☆ロード」より、鮎川まどか、檜山ひかるをイメージした香水が発売です。２人のヒロインの香りは「Like or Love？」｜フェアリーテイル株式会社のプレスリリース GitHub - go-flutter-desktop/go-flutter: Flutter on Windows, MacOS and Linux - based on Flutter Embedding, Go and GLFW. Microsoft Teamsの個人向け無償提供が正式にスタート。友人や家族とのチャット、ToDoリストの共有、当面は300人24時間まで無料のビデオ会議など提供 － Publickey GitHubが動画のアップロード機能に正式対応。バグの再現手順や機能のデモなどの説明が動画で容易に － Publickey 組み込みで般若心経を扱う際の効率的なメモリ配置方法の検討 Go言語でゲームボーイアドバンスのエミュレータを作った話  "
    },
    {
      "title": "GNKF: NKF ぽいなにか の v0.5.0 をリリースした",
      "section": "release",
      "description": "データのハッシュ値を取得・検証する機能を追加した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/05/gnkf-v0_5_0-is-released/",
      "published": "2021-05-23T05:11:55+00:00",
      "update": "2021-05-23T05:12:31+00:00",
      "content": "Go 言語における文字列処理の習作 gnkf の v0.5.0 をリリースした。\n Release v0.5.0 · spiegel-im-spiegel/gnkf · GitHub  このバージョンでデータのハッシュ値を取得・検証する機能を追加した。\n$ gnkf hash -h Print or check hash value. Support algorithm: MD5, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256 Usage: gnkf hash [flags] [file] Aliases: hash, h Flags: -a, --algorithm string hash algorithm (default \u0026#34;SHA-256\u0026#34;) -c, --check don\u0026#39;t fail or report status for missing files -h, --help help for hash --ignore-missing don\u0026#39;t fail or report status for missing files (with check option) --quiet don\u0026#39;t print OK for each successfully verified file (with check option) Global Flags: --debug for debug MD5, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, および SHA-512/256 各アルゴリズムに対応している1。 既定のアルゴリズムは SHA-256 で，それ以外を使う場合は\n$ echo Hello World | gnkf h -a md5 e59ff97941044f85df5297e1c302d260 - などとアルゴリズム名を指定する。\nまた，リリースファイルに対して gnkf_0.5.0_checksums.txt のようなハッシュ値の情報があれば， -c オプションを使って\n$ curl -L https://github.com/spiegel-im-spiegel/gnkf/releases/download/v0.5.0/gnkf_0.5.0_checksums.txt -O $ curl -L https://github.com/spiegel-im-spiegel/gnkf/releases/download/v0.5.0/gnkf_0.5.0_Linux_64bit.tar.gz -O $ gnkf h --ignore-missing -c gnkf_0.5.0_checksums.txt gnkf_0.5.0_Linux_64bit.tar.gz: OK WARNING in 9 items: no such file or directory といった感じにダウンロードしたファイルの検証を行うことができる。\nまぁ Linux とかなら sha256sum コマンド等を使えばいいのだけど， Windows 環境で互換性のあるコマンドが見当たらなかったので gnkf に組み込んでみたのだった。 以前に BASE64 符号化のサブコマンドを組み込んだことがあったので，これもありかなと（笑）\n余談だが Go で MD5 や SHA-1 アルゴリズムを使うと gosec に叱られる。 これを回避するには G501 および G505 のワーニングを除外すればよい。\nたとえば\n$ golangci-lint run --enable gosec --exclude \u0026#34;G501|G505\u0026#34; みたいな感じ。\nブックマーク  GNKF: Network Kanji Filter by Golang  参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-05-21) Kindle版 B094PRR7PZ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   SHA-3 は標準パッケージにないので今回は見送った。ちなみに golang.org/x/crypto/sha3 パッケージを使えば SHA-3 アルゴリズムも簡単に組み込める。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "golang.org/x/net/html パッケージの脆弱性報告",
      "section": "release",
      "description": "アップデートは計画的に",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/05/vulnerability-in-go-external-package/",
      "published": "2021-05-22T01:51:21+00:00",
      "update": "2021-05-22T01:54:53+00:00",
      "content": "標準ではないが公式の golang.org/x/net パッケージに脆弱性が見つかったそうで，更新を呼びかけている。\nVersion v0.0.0-20210520170846-37e1c6afe023 of golang.org/x/net fixes a vulnerability in the golang.org/x/net/html package which could cause a denial of service.\nAn attacker can craft an input to ParseFragment that would cause it to enter an infinite loop and never return.\n via Vulnerability in golang.org/x/net/html  CVE-2021-33194 （未稿）\nアップデートは計画的に。\n余談だが 『プログラミング言語Go』の Kindle 版がリリースされたそうだ。\n 『プログラミング言語Go』のKindle版が出ました：柴田 芳樹 (Yoshiki Shibata)：SSブログ  もちろん紙の本も持っているが Kindle 版もソッコーでポチった。 この手の本は使い倒してナンボだと思うので，使いやすいほうでどうぞ。 紙の本を買った当時の感想はこちら。\n参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-05-21) Kindle版 B094PRR7PZ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n "
    },
    {
      "title": "Excel → CSV 変換ツールを作ってみた",
      "section": "release",
      "description": "CLI ツールで，機能としては Excel データを CSV 形式に変換するだけの簡単なお仕事。 ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/05/xls2csv/",
      "published": "2021-05-17T10:16:06+00:00",
      "update": "2021-05-22T01:54:53+00:00",
      "content": "先日 Zenn に\n Go で簡単 Excel → CSV 変換  という記事を書いたが，同等の機能の汎用ツールを作ってみた。\n spiegel-im-spiegel/xls2csv: Export CSV Text from Excel Data  CLI ツールで，機能としては Excel データの行・列の情報を単純に読み込んで CSV 形式に変換するだけの簡単なお仕事。 Pure Go で書かれているので Excel がない環境（たとえば Linux）でも問題なく動く。\n$ xls2csv -h Export CSV text from Excel data. Usage: xls2csv [flags] \u0026lt;Excel file\u0026gt; Flags: --debug for debug -h, --help help for xls2csv -o, --output string path of output CSV file -p, --password string password in Excel file -s, --sheet string sheet name in Excel file -t, --tsv output with TSV format -v, --version output version of xls2csv -w, --win-newline output with CRLF newline $ xls2csv conv/testdata/test-pw.xlsx -p passwd 名前,年齢 Alice,18 Bob,19 太郎,20 花子,21 このようにパスワードロックされている Excel ファイルも読み込める1。\nなお Excelize パッケージを使っているので Excel 2007 までの古い形式（拡張子が .xls のファイル）には対応していない。 あしからず。\n文字エンコードは UTF-8 で改行コードは LF の CSV 形式のテキストを標準出力に返す。 先頭の BOM は付かない（付ける気もない）。 なお改行コードは -w オプションで CRLF に変更可能である。 文字エンコードを変える機能はないので， Shift-JIS とかにする必要があるなら拙作の gnkf との組み合わせでどうぞ。\n機能がニッチ過ぎるので需要はないだろうけど，まっ，自分用ということで（笑）\nExcelize パッケージのドキュメントって日本語版もあるんだねぇ。\n Excelize ドキュメンテーション  いろいろと遊べそうである。\n参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-05-21) Kindle版 B094PRR7PZ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   Shell のプロンプトやバッチファイルに直接パスワードを記述するのはオススメできないが， Excel のパスワード・ロックなんてザルだからなぁ\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "AI がハッキングを始める日",
      "section": "remark",
      "description": "日本語翻訳および解説。ありがたや",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/05/when-ais-start-hacking/",
      "published": "2021-05-15T08:12:16+00:00",
      "update": "2021-05-15T09:57:51+00:00",
      "content": "Bruce Schneier 先生の AI ハッキングに関する一連の記事をブックマークとして挙げておく。\n The Coming AI Hackers | Belfer Center for Science and International Affairs  ブルース・シュナイアーが予言する「AIがハッカーになり人間社会を攻撃する日」 - YAMDAS現更新履歴   Hackers Used to Be Humans. Soon, AIs Will Hack Humanity | WIRED  When AIs Start Hacking - Schneier on Security ブログ: AIがハッキングを始めるとき (ブルース・シュナイアー)    私は所謂「シンギュラリティ」にはもはや微塵も関心がないが，道具・手段としての「AI 技術」についてリスク・ベネフィットをきちんと評価して規制すべきところは規制すべき，とは考えている。\n「理学」が「真理の追求」なら「工学」は「善の実装」である。 何を以って「善」とするかは議論の余地があるだろうが，エンジニアが自らの首を絞めることにならないよう気をつけなければ。\n人と機械の責務分担 （これで思い出したが，以前に Facebook の TL に書きなぐった戯れ言を以下に記しておく）\n 自立とは、仮想代理人ソフトウェアであるところのエージェントが自ら動き、誰の力も借りずに意思決定できることを言う。 […] 一方、自律というのは哲学的な意味であり、自らが行動する際の基準と目的を明確を持ち、自ら規範を作り出すことができることをいう そろそろ、人工知能の真実を話そうより  この定義で考えると，今の世の中に「自律」機械はまだ登場していないことになる。 もしそのようなものが登場すればシンギュラリティ（特異点）到達ということになるのだろう。 まっ（少なくとも「現在」からの延長線上の未来では）ありえへんけど（笑）\nもう少し踏み込んで考えるなら，機械に「自らが行動する際の基準と目的を明確を持ち、自ら規範を作り出すことができる」ことを期待してはいけないし，そのような期待を前提としたルール・メイキングは意味がない，と思っている。\nであるならルールの適用と運用は人間側に任せるべきで，機械はあくまで運用補佐として振る舞うに留める。 つまり機械に「最終判断」させるべきではない，ということだ。\nハードでもソフトでもこうした「人と道具・機械との責務分担」をどう設計するかというのはかなり重要で，現状として人の側が最終判断を行うのであれば，システム上のルール設定も（もっと広く）法規制も人の側に寄せた設計をすべきと思っている。\n参考図書   社会は情報化の夢を見る (河出文庫) 佐藤俊樹 (著) 河出書房新社 2010-09-03 (Release 2016-07-29) Kindle版 B01J1I8PRQ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  1996年に出版された『ノイマンの夢・近代の欲望―情報化社会を解体する』の改訂新装版。しかし内容はこれまでと変わりなく，繰り返し語られる技術決定論を前提とする安易な未来予測を「情報化」社会論だとして批判する。\nreviewed by Spiegel on 2015-09-15 (powered by PA-APIv5)\n   マップス　01 (MFコミックス　フラッパーシリーズ) 長谷川 裕一 (著) KADOKAWA 2012-06-23 (Release 2014-03-31) Kindle版 B00JB3F73M (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀を代表するスペースオペラ漫画（のひとつ）\nreviewed by Spiegel on 2017-12-19 (powered by PA-APIv5)\n   キカイダー02(1) (角川コミックス・エース) ＭＥＩＭＵ (著), 石ノ森 章太郎 (その他) KADOKAWA 2013-09-17 (Release 2013-10-17) Kindle版 B00F5P454W (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「キカイダー」を神秘学的視点で再解釈する（笑）\nreviewed by Spiegel on 2016-08-18 (powered by PA-APIv5)\n "
    },
    {
      "title": "call と start",
      "section": "remark",
      "description": "先日書いた Zenn Scrap の内容。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/05/call-and-start-in-windows/",
      "published": "2021-05-15T05:49:33+00:00",
      "update": "2021-05-15T05:49:52+00:00",
      "content": "先日 Zenn の Scrap に書いた記事だが， Scrap は基本的に書き捨てで最終的にはアーカイブ（非表示）化する予定なので，改めてこちらのブログに覚え書きとして記しておく。\nいやね。 バッチファイルって使い方を忘れちゃうのよ。 たとえば「コマンドプロンプトのウィンドウを非表示（または最小化）の状態でコマンド実行するのってどうすんだっけ？」って感じ。\n起動するコマンドを細かく制御したいならコマンドプロンプト（cmd.exe）の内蔵コマンド start を使う。\n\u0026gt; start /? 指定されたプログラムまたはコマンドを実行するためにウィンドウを開きます。 START [\u0026#34;タイトル\u0026#34;] [/D パス] [/I] [/MIN] [/MAX] [/SEPARATE | /SHARED] [/LOW | /NORMAL | /HIGH | /REALTIME | /ABOVENORMAL | /BELOWNORMAL] [/NODE \u0026lt;NUMA ノード\u0026gt;] [/AFFINITY \u0026lt;16 進数の関係マスク\u0026gt;] [/WAIT] [/B] [コマンド/プログラム] [パラメーター] \u0026#34;タイトル\u0026#34; ウィンドウのタイトル バーに表示するタイトル。 パス 開始するディレクトリ。 B 新しいウィンドウを作成せずにアプリケーションを起動します。 アプリケーションは Ctrl + C を無視します。 アプリケーションで Ctr l+ C を有効にしていない場合、 Ctrl + Break がアプリケーションを中断する唯一の方法です。 I 新しい環境は、現在の環境ではなく、cmd.exe に渡された元の環境に なります。 MIN ウィンドウを最小化の状態で起動します。 MAX ウィンドウを最大表示の状態で起動します。 SEPARATE 16 ビットの Windows プログラムを別メモリ領域で起動します。 SHARED 16 ビットの Windows プログラムを共有メモリ領域で起動します。 LOW IDLE 優先度クラスでアプリケーションを起動します。 NORMAL NORMAL 優先度クラスでアプリケーションを起動します。 HIGH HIGH 優先度クラスでアプリケーションを起動します。 REALTIME REALTIME 優先度クラスでアプリケーションを起動します。 ABOVENORMAL ABOVENORMAL 優先度クラスでアプリケーションを起動します。 BELOWNORMAL BELOWNORMAL 優先度クラスでアプリケーションを起動します。 NODE 優先 NUMA (Non-Uniform Memory Architecture) ノードを 10 進の 整数で指定します。 AFFINITY プロセッサの関係マスクを 16 進数で指定します。 プロセスはこれらのプロセッサで実行されるように制限されます。 /AFFINITY と /NODE を組み合わせると、関係マスクは異なって 解釈されます。NUMA ノードのプロセッサ マスクを右にシフトして ビット 0 で始まるかのように関係マスクを指定します。 プロセスは、指定した関係マスクと NUMA ノードの間で共通する プロセッサ上で実行されるように制限されます。共通するプロセッサ がない場合は、プロセスは指定した NUMA ノード上で実行される ように制限されます。 WAIT アプリケーションを起動し、終了するまで待ちます。 コマンド/プログラム 内部コマンドまたはバッチ ファイルの場合、コマンド プロセッサ は cmd.exe の /K オプションを使用して実行されます。 これはコマンドの後でもウィンドウが残ることを意味 します。 内部コマンドまたはバッチ ファイルではない場合、そのプログラム はウィンドウ モードのアプリケーションまたはコンソール アプリケーションとして動作します。 パラメーター コマンド/プログラムに渡すパラメーターです。 注意: SEPARATE および SHARED オプションは 64 ビット プラットフォームでは サポートされません。 ... このように start コマンドではウィンドウの表示状態や優先順位等の制御ができる。 たとえば Windows ログオン時に，コマンドプロンプトのウィンドウを最小化した状態で gpg-agent を起動させたい場合は\n@echo off start /min gpg-connect-agent.exe /bye という内容のバッチファイルを作ってスタートアップ・フォルダ1 に放り込んでおけばよい。\n/wait オプションを付けるとコマンド終了まで待機してくれる。 start /wait と call コマンド（call も内蔵コマンド）は似ているようで異なった動作をする。 これはバッチ処理をファイル単位で入れ子の構造にするとよく分かる。 簡単な実験をしてみよう。\nまず，以下の内容で alice.cmd というバッチファイルを作る。\n@echo off call bob.cmd echo Hello, Alice! exit /b alice.cmd の中で呼び出している bob.cmd の内容は以下の通り。\n@echo off echo Hello, Bob! exit /b alice.cmd も bob.cmd も最終行が exit /b になっているのがポイント。 /b オプションを付けることでバッチ処理の終了であることを明示し，バッチファイルをモジュール化できる。\nこれで alice.cmd を実行すると\n\u0026gt; alice.cmd Hello, Bob! Hello, Alice! となった。 bob.cmd がサブルーチンのように機能しているのが分かると思う。\nこのように Windows バッチ処理では call と exit /b を組み合わせてバッチ処理をモジュール化し再利用可能とすることができる2。\n次に alice.cmd の内容を\n@echo off start /b /wait bob.cmd echo Hello, Alice! exit /b とし， call コマンドを start コマンドに置き換える。 これを実行すると\n\u0026gt; alice.cmd Hello, Bob! と bob.cmd バッチ終了のタイミングでバッチ処理全体が終了してしまう。 start コマンドを使うと cmd.exe /k bob.cmd 相当のプロセスが走る筈なのだが，子バッチを /b /wait オプション付きで呼び出した場合は，親子全体でひとつのバッチ処理として解釈されるのか，子バッチ処理が終了した時点で親バッチ処理もろともプロセスが終了してしまうらしい3。 これを回避するための call コマンドというわけだ。\nちなみに\n@echo off start /b bob.cmd echo Hello, Alice! exit /b と /wait オプションを外すと，同じコマンドプロンプト・ウィンドウ上で別プロセスとして駆動するため，出力順が不定になる。 たとえば\n\u0026gt; alice.cmd Hello, Alice! Hello, Bob! てな感じ。\nNYAGOS の start まるっきり余談だが， NYAGOS では start コマンドは独自内蔵コマンドとして定義されている4。 いや，うっかり NYAGOS 上で start /? ってやったら， \u0026lsquo;?\u0026rsquo; なんてコマンド知らん（←超意訳）と怒られてしまったのだ（笑）\nあぁ，でも，バッチファイルは NYAGOS から起動しても cmd.exe 上のプロセスとして走るのでご心配なく。\nブックマーク  /bin/shに慣れた人に贈るバッチファイルの書き方 : バッチ処理を組む際に参考になる。オススメ GnuPG for Windows : gpg-agent について    ユーザごとのスタートアップフォルダの位置例： %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n call と exit /b の組み合わせは同一ファイル内でも可能。この場合 call :label のようにラベルで飛び先を指定する。ラベルをアンカーにしたジャンプなので，どうしても記述がアセンブラっぽくなってしまうのがにんともかんとも。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 件の Scrap で教えてもらったが，おそらく DOS 時代のバッチ処理との互換性を維持するためだろう，とのこと。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n NYAGOS の start コマンドは nyagos.d\\start.lua で定義されている。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.16.4 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "脆弱性 CVE-2021-31525 の修正",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/05/go-1_16_4-is-released/",
      "published": "2021-05-09T04:52:11+00:00",
      "update": "2021-05-22T01:54:53+00:00",
      "content": "Go 1.16.4 がリリースされた。\n Go 1.16.4 and Go 1.15.12 are released  今回は1件の脆弱性修正を含んでいる。\ngo1.16.4 (released 2021/05/06) includes a security fix to the net/http package, as well as bug fixes to the runtime, the compiler, and the archive/zip, time, and syscall packages. See the Go 1.16.4 milestone on our issue tracker for details. via Release History - The Go Programming Language  CVE-2021-31525 ReadRequest and ReadResponse in net/http can hit an unrecoverable panic when reading a very large header (over 7MB on 64-bit architectures, or over 4MB on 32-bit ones). Transport and Client are vulnerable and the program can be made to crash by a malicious server. Server is not vulnerable by default, but can be if the default max header of 1MB is overridden by setting Server.MaxHeaderBytes to a higher value, in which case the program can be made to crash by a malicious client. via Go 1.16.4 and Go 1.15.12 are released  この脆弱性は\n golang.org/x/net/http2/h2c HeaderValuesContainsToken in golang.org/x/net/http/httpguts  にも影響するらしい。 該当のパッケージを利用している場合は最新リビジョンにアップデートすること。\n（以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.16.4.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.16.4.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.16.4.linux-amd64.tar.gz $ sudo mv go go1.16.4 $ sudo ln -s go1.16.4 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.16.1 linux/amd64 アップデートは計画的に。\n参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-05-21) Kindle版 B094PRR7PZ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n "
    }
  ]
}
