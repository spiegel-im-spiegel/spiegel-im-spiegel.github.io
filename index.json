{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Go 言語用エラーハンドリング・パッケージ",
      "section": "release",
      "description": "標準の errors パッケージと組み合わせてエラーハンドリングの助けとなれば幸いである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/errs-package-for-golang/",
      "published": "2019-09-05T14:54:45+00:00",
      "update": "2019-09-06T17:19:55+00:00",
      "content": "  spiegel-im-spiegel/errs: Error handling for Golang  本パッケージは Go 言語によるプログラミングに於いて標準の errors パッケージを補完しエラーハンドリングを行うことができる。\nなお errs パッケージは Go 1.13 以上を要求する。 ご注意を。\n  \nインポート import \u0026#34;github.com/spiegel-im-spiegel/errs\u0026#34; 簡単な使い方 たとえば，以下のようなファイルをオープンするだけの関数を考えてみる。\nfunc checkFileOpen(path string) error { file, err := os.Open(path) if err != nil { return err } defer file.Close() return nil } os.Open() 関数の実行時に吐き出されるエラー・インスタンス err を errs.Wrap() 関数でラッピングする。 こんな感じ。\nfunc checkFileOpen(path string) error { file, err := os.Open(path) if err != nil { return errs.Wrap( err, \u0026#34;file open error\u0026#34;, errs.WithParam(\u0026#34;path\u0026#34;, path), )  } defer file.Close() return nil } errs.Wrap() 関数では元になる error インスタンスと追加のメッセージ，および errs.WithParam(name, value string) 関数で指定する任意のパラメータ（0個以上複数指定可能）を引数とする。\nでは実際に checkFileOpen() 関数を動かしてみよう。\nfunc main() { if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { fmt.Printf(\u0026#34;%v\\n\u0026#34;, err) } } この場合の実行結果は以下の通り。\n$ go run sample.go file open error: open not-exist.txt: no such file or directory まぁ Go 言語ではありふれた出力形式だ。\nここで fmt.Printf() の書式を %v から %#v に変えてみる。\nfunc main() { if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { fmt.Printf(\u0026#34;%#v\\n\u0026#34;, err)  } } すると実行結果は\n$ go run sample.go \u0026amp;errs.Error{Msg:\u0026#34;file open error\u0026#34;, Params:map[string]string{\u0026#34;function\u0026#34;:\u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;not-exist.txt\u0026#34;}, Cause:\u0026amp;os.PathError{Op:\u0026#34;open\u0026#34;, Path:\u0026#34;not-exist.txt\u0026#34;, Err:0x2}} という感じに構造体のダンプ表示ぽい出力になる。\nちなみに errs.Error.Params 要素は map[string]string 型の連想配列になっているが，既定でエラーが発生した関数名を格納している。 これでエラーを追いやすくなるだろう。\n更に書式を %+v に変える。\nfunc main() { if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { fmt.Printf(\u0026#34;%+v\\n\u0026#34;, err)  } } この場合の実行結果は\n$ go run sample.go {\u0026#34;Type\u0026#34;:\u0026#34;*errs.Error\u0026#34;,\u0026#34;Msg\u0026#34;:\u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;,\u0026#34;Params\u0026#34;:{\u0026#34;function\u0026#34;:\u0026#34;main.checkFileOpen\u0026#34;,\u0026#34;path\u0026#34;:\u0026#34;not-exist.txt\u0026#34;},\u0026#34;Cause\u0026#34;:{\u0026#34;Type\u0026#34;:\u0026#34;*os.PathError\u0026#34;,\u0026#34;Msg\u0026#34;:\u0026#34;open not-exist.txt: no such file or directory\u0026#34;,\u0026#34;Cause\u0026#34;:{\u0026#34;Type\u0026#34;:\u0026#34;syscall.Errno\u0026#34;,\u0026#34;Msg\u0026#34;:\u0026#34;no such file or directory\u0026#34;}}} と JSON フォーマットで出力される。 これなら\n$ go run sample.go | jq . { \u0026#34;Type\u0026#34;: \u0026#34;*errs.Error\u0026#34;, \u0026#34;Msg\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;Params\u0026#34;: { \u0026#34;function\u0026#34;: \u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;not-exist.txt\u0026#34; }, \u0026#34;Cause\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;*os.PathError\u0026#34;, \u0026#34;Msg\u0026#34;: \u0026#34;open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;Cause\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;syscall.Errno\u0026#34;, \u0026#34;Msg\u0026#34;: \u0026#34;no such file or directory\u0026#34; } } } といった感じに他ツールと組み合わせて errs.Error インスタンスの中身を検証することができる。\nおまけの機能として errs.Cause() 関数も用意してみた。\nfunc main() { if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { fmt.Printf(\u0026#34;%v\\n\u0026#34;, errs.Cause(err)) } // Output:  // no such file or directory } このように errs.Cause() 関数では階層化 error を遡って大元の error インスタンスを抽出することができる。\nerrs パッケージと標準の errors パッケージを組み合わせることでエラーハンドリングの助けとなれば幸いである。\nブックマーク  Go 1.13 のエラー・ハンドリング  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "Go 言語用エラーハンドリング・パッケージをリリースした",
      "section": "release",
      "description": "実は以前にこっそり v0.1.0 をリリースして自作ツールのエラーハンドリングに用いていたのだが， Go 1.13 のリリースに合わせて中身を作り直した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/errs-package-is-released/",
      "published": "2019-09-05T14:54:45+00:00",
      "update": "2019-09-06T14:28:18+00:00",
      "content": " Go 言語用エラーハンドリング・パッケージ errs の v0.2.0 をリリースした。\n Release v0.2.0 · spiegel-im-spiegel/errs · GitHub  実は以前にこっそり v0.1.0 をリリースして自作ツールのエラーハンドリングに用いていたのだが， Go 1.13 のリリースに合わせて中身を作り直した。\n使い方は以下を参照のこと。\n Go 言語用エラーハンドリング・パッケージ  これで先に進めるな。\n【2019-09-06 追記】 v0.2.1 をリリースした  Release v0.2.1 · spiegel-im-spiegel/errs · GitHub  つか，実はバージョンタグを付け間違えただけなのだが，バージョンタグを付け換えるとチェックサム・データベース sum.golang.org が怒って\nSECURITY ERROR This download does NOT match the one reported by the checksum server. The bits may have been replaced on the origin server, or an attacker may have intercepted the download attempt. For more information, see \u0026#39;go help module-auth\u0026#39;. とか言ってくさるので，しょうが無しにバージョン番号を上げることにした。 やれやれ。\nバージョンタグの管理は慎重に。\nブックマーク  Go 1.13 のエラー・ハンドリング  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "Go 1.13 がリリースされた",
      "section": "release",
      "description": "9月にずれ込んでしまったが，ようやくリリースされた。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/go-1_13-is-released/",
      "published": "2019-09-04T13:34:29+00:00",
      "update": "2019-09-04T13:34:43+00:00",
      "content": " 9月にずれ込んでしまったが，ようやく Go 1.13 がリリースされた1。\n Go 1.13 is released - Google Group Go 1.13 Release Notes - The Go Programming Language Go 1.13 is released - The Go Blog  主な変更点は以下の通り。\n The go command now downloads and authenticates modules using the Go module mirror and Go checksum database by default Improvements to number literals Error wrapping TLS 1.3 on by default Improved modules support  via Go 1.13 is released  この内のいくつかはこのブログでも既に紹介しているので，参考にどうぞ。\n Go 1.13 のエラー・ハンドリング Go 言語の環境変数管理 Go モジュールのミラーリング・サービス【正式版】  そろそろ WebAssembly にも手を出す季節だろうか。\n例によって Ubuntu の APT が提供する Go コンパイラは3世代も古くて使いものにならないため2，ダウンロードページから go1.13.linux-amd64.tar.gz を取ってきて任意の場所に展開する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.13.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.13.linux-amd64.tar.gz $ sudo mv go go1.13 $ sudo ln -s go1.13 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.13 linux/amd64 ほい。 ひと仕事終わり。\nアップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  同じタイミングで Android 10 がリリースされていたので関連を疑ったが（笑），どうやら関係ないらしい。 Twitter で教えてもらいました。まぁ Android のバージョンアップスケジュールに付き合わされてはたまらんしねぇ。 [return] 提供される Go コンパイラのサポートは1世代前まで。 [return]   "
    },
    {
      "title": "Go モジュールのミラーリング・サービス【正式版】",
      "section": "golang",
      "description": "Google による Go モジュールの公式ミラーリング・サービスが正式リリースした。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/mirror-index-and-checksum-database-for-go-module/",
      "published": "2019-09-01T10:39:57+00:00",
      "update": "2019-09-06T11:40:07+00:00",
      "content": " （この記事は「Go モジュールのミラーリングとインデックス化」を全面改訂したものです）\nGoogle による Go モジュールの公式ミラーリング・サービスが正式リリースした。\n Module Mirror and Checksum Database Launched - The Go Blog  proxy.golang.org sum.golang.org index.golang.org   モジュール・ミラー ミラー・サーバ proxy.golang.org は Go 言語のモジュールをミラーリングする一種のプロキシ・サーバとして機能する。 ただし，単純な透過プロキシではなく必要なバージョンのみ取ってこれるようになっているようだ。\n Module Mirror and Checksum Database Launched  ミラー・サーバは環境変数 GOPROXY で URL を指定する。 GOPROXY の既定値は Go 1.13 では以下のようになっている。\n$ go env | grep GOPROXY GOPROXY=\u0026#34;https://proxy.golang.org,direct\u0026#34; ミラー・サーバは複数指定できる（指定する場合はカンマで区切る）。 ミラーリングを無効にする場合は GOPROXY に direct のみを指定する。\ngo env -w GOPROXY=direct ミラーリングが有効な状態で特定の非公開モジュールを使う場合は GOPRIVATE に非公開モジュールのパスを指定する。\nチェックサム・データベース Go 言語では利用するモジュールの完全性（integrity）を担保するために go.sum ファイルにモジュールの SHA-256 チェックサム値を格納しているが，最初にモジュールをフェッチする場合はチェックサム値が分からないため無条件に信頼せざるを得ない。\n公開されているモジュールのチェックサム値がデータベース化されていれば未知のモジュールに対しても（チェックサム・データベースを参照することで）ある程度の信頼性を確保できるだろう。\nチェックサム・データベースは環境変数 GOSUMDB で指定する。 GOSUMDB の既定値は Go 1.13 では以下のようになっている。\n$ go env | grep GOSUMDB GOSUMDB=\u0026#34;sum.golang.org\u0026#34; チェックサム・データベースを無効にする場合は GOSUMDB に off をセットする。\ngo env -w GOSUMDB=off また特定のモジュールを検索対象から除外する場合は，ミラーリング除外のときと同じく GOPRIVATE が使える。\n公式チェックサム・データベース sum.golang.org は Trillian による透過ログ（追記型データベース）で改竄に強いという特徴がある。\nまぁ，最初から悪意のあるモジュールは排除しようがないが malicious code 混入は検知しやすくなるかも知れない。\n【2019-09-06 追記】 バージョンタグの管理に注意 上で述べたように標準の sum.golang.org は追記型のデータベースで，既存データの変更はできない仕様になっている。\nたとえばパッケージ/モジュールのリポジトリにバージョンタグ（v0.1.0 など）を付ける際に，うっかり間違ったコミットにタグを付けたとしても，一度 sum.golang.org に登録されると取り消すことができない。 手動でタグの位置を変えても，モジュール読み込み時に\nSECURITY ERROR This download does NOT match the one reported by the checksum server. The bits may have been replaced on the origin server, or an attacker may have intercepted the download attempt. For more information, see \u0026#39;go help module-auth\u0026#39;. などと表示されビルドに失敗する。\n少なくとも公開されているパッケージ/モジュールでは迂闊にバージョンタグを付け換えないよう，管理は慎重に行う必要がある。\nミラーリング・サービスのプライバシー・ポリシー 今回，正式稼働したミラーリング・サービスのプライバシー・ポリシーは以下のページある。\n Privacy: Go modules services  以前はいきなり Google のページに飛ばされて「なんだかなぁ」という感じだったが，多少マシになったようである（笑）\nこれによると公式サービスでは以下の情報を収集しているようだ。\n Request timestamp Client IP address Full request URL, including:  service domain, e.g. proxy.golang.org URI path being requested  Response latency Response bytes sent Response code sent The response returned by the go command when it runs in our systems Whether the request hit our frontend cache Whether the request hit a cache elsewhere in the system (but not the frontend) Name of the Google machine that processed this request, e.g. machine101  via Privacy: Go modules services  取得した情報については\nWe do not store logged personally identifiable information such as IP addresses for more than 30 days. We also do not correlate or combine information from our request logs with any personal information that you have provided Google for other services. via Privacy: Go modules services  ということらしいが，最後の\nWe intend to aggregate and anonymize usage metrics to measure popularity for Go modules and share this popularity data with the Go community. via Privacy: Go modules services  てのがねぇ。 プライバシーに敵対的な企業のサービスだと思うとあまり利用したくない気分なのだが（もちろん偏見），はてさて1。\nブックマーク  Go 1.13 と 1.14 （Go 2 へ向けて） Go 言語の環境変数管理  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  Go 言語にしろ（最近ブームが再燃している） Dart 言語にしろ，言語系のプロダクトやサービスは Google から切り離してほしいよなぁ。 Alphabet の傘下から外れろとまでは言わないから。 [return]   "
    },
    {
      "title": "Go 言語の環境変数管理",
      "section": "golang",
      "description": "Go 1.13 からは go env コマンドに -w オプションを付けて環境変数を設定できる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/go-env/",
      "published": "2019-09-01T06:31:18+00:00",
      "update": "2019-09-01T06:34:53+00:00",
      "content": " Go 1.13 より環境変数の管理の仕方が変わった。\n環境変数の設定・削除 まずは go env コマンドで Go 言語関連の環境変数を表示してみる（一部だけね）。 ちなみに私の作業環境は Linux/Ubuntu である。\n$ go env GO111MODULE=\u0026#34;\u0026#34; GOARCH=\u0026#34;amd64\u0026#34; GOBIN=\u0026#34;\u0026#34; GOCACHE=\u0026#34;/home/username/.cache/go-build\u0026#34; GOENV=\u0026#34;/home/username/.config/go/env\u0026#34; GOEXE=\u0026#34;\u0026#34; GOFLAGS=\u0026#34;\u0026#34; GOHOSTARCH=\u0026#34;amd64\u0026#34; GOHOSTOS=\u0026#34;linux\u0026#34; GONOPROXY=\u0026#34;\u0026#34; GONOSUMDB=\u0026#34;\u0026#34; GOOS=\u0026#34;linux\u0026#34; GOPATH=\u0026#34;/home/username/go\u0026#34; GOPRIVATE=\u0026#34;\u0026#34; GOPROXY=\u0026#34;https://proxy.golang.org,direct\u0026#34; GOROOT=\u0026#34;/usr/local/go\u0026#34; GOSUMDB=\u0026#34;sum.golang.org\u0026#34; GOTMPDIR=\u0026#34;\u0026#34; ... たとえば GO111MODULE の値を on にしたければ\n$ export GO111MODULE=on $ go env GO111MODULE on などとする。 Go 1.12 まではこれで OK。\nGo 1.13 からは go env コマンドに -w オプションを付けて環境変数を設定できる。\n$ export -n GO111MODULE $ go env -w GO111MODULE=auto $ go env GO111MODULE auto また -u オプションで設定を削除できる。\n$ go env -u GO111MODULE $ go env | grep GO111MODULE GO111MODULE=\u0026#34;\u0026#34; ちなみに shell で設定している環境変数と go env -w コマンドで設定する環境変数が被る場合\n$ export GO111MODULE=on $ go env -w GO111MODULE=auto warning: go env -w GO111MODULE=... does not override conflicting OS environment variable $ go env | grep GO111MODULE GO111MODULE=\u0026#34;on\u0026#34; となり shell 側の設定のほうが優先されるようだ。 一時的な変更の場合は shell 側の環境変数を使えということやね。\n環境変数設定の置き場所 go env -w コマンドで設定した環境変数の値は GOENV で指示されるファイルに格納される。 GOENV の既定値は以下の通り（Linux/Ubuntu の場合）。\n$ go env GOENV /home/username/.config/go/env ちなみに $HOME/.config/ ディレクトリは XDG Base Directory でユーザごとにアプリケーション設定を格納するディレクトリとして規定されている。 また XDG_CONFIG_HOME 環境変数が定義されている場合は，こちらの値が設定ディレクトリとして優先される。\nGo 1.13 からは os.UserConfigDir() 関数で XDG Base Directory に対応した設定ディレクトリを取得できる。 os.UserConfigDir() 関数は他のプラットフォームにも対応していて，プラットフォームごとに適切なパスを返すようだ。\n// UserConfigDir returns the default root directory to use for user-specific // configuration data. Users should create their own application-specific // subdirectory within this one and use that. // // On Unix systems, it returns $XDG_CONFIG_HOME as specified by // https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html if // non-empty, else $HOME/.config. // On Darwin, it returns $HOME/Library/Application Support. // On Windows, it returns %AppData%. // On Plan 9, it returns $home/lib. // // If the location cannot be determined (for example, $HOME is not defined), // then it will return an error. func UserConfigDir() (string, error) { var dir string switch runtime.GOOS { case \u0026#34;windows\u0026#34;: dir = Getenv(\u0026#34;AppData\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;%AppData% is not defined\u0026#34;) } case \u0026#34;darwin\u0026#34;: dir = Getenv(\u0026#34;HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;$HOME is not defined\u0026#34;) } dir += \u0026#34;/Library/Application Support\u0026#34; case \u0026#34;plan9\u0026#34;: dir = Getenv(\u0026#34;home\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;$home is not defined\u0026#34;) } dir += \u0026#34;/lib\u0026#34; default: // Unix \tdir = Getenv(\u0026#34;XDG_CONFIG_HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { dir = Getenv(\u0026#34;HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;neither $XDG_CONFIG_HOME nor $HOME are defined\u0026#34;) } dir += \u0026#34;/.config\u0026#34; } } return dir, nil } 以前から os.UserCacheDir() 関数で XDG Base Directory 対応のキャッシュ・ディレクトリは取得可能だったが，これでまたひとつ対応が進んだわけだ。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "2019-09-01 のブックマーク",
      "section": "bookmarks",
      "description": "「AWS 東京リージョンで発生した大規模障害についてまとめてみた」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/09/01-bookmarks/",
      "published": "2019-09-01T02:06:58+00:00",
      "update": "2019-09-01T02:09:37+00:00",
      "content": " リリース情報  Thunderbird — Release Notes (68.0) — Mozilla  What’s New in Thunderbird 68 | The Mozilla Thunderbird Blog 「Thunderbird 68」を正式公開 ～「Thunderbird 60」系統からのメジャーバージョンアップ - 窓の杜  スクリプト言語「Ruby」v2.4.7/2.5.6/2.6.4が公開 - 窓の杜 「Linux 5.2.11」リリース | Think IT（シンクイット）  バベルのインターネット  インターネット・アーカイブがロシアで永久ブロッキングの危機に直面 | P2Pとかその辺のお話R ISPs Block BitTorrent Traffic Despite EU Net Neutrality Regulation - TorrentFreak  セキュリティ＆プライバシー関連  Boxがセキュリティ強化ツールの「Box Shield」を発表 | TechCrunch Japan カザフスタン政府の侵入的インターネット監視に立ち上がった主要ブラウザベンダー | P2Pとかその辺のお話R 国際宇宙ステーションで発生した不正アクセス疑惑についてまとめてみた - piyolog AWS 東京リージョンで発生した大規模障害についてまとめてみた - piyolog  AWS、東京リージョン23日午後の大規模障害について詳細を報告。冷却システムにバグ、フェイルセーフに失敗、手動操作に切り替えるも反応せず － Publickey AWS、複数のアベイラビリティゾーンで稼働していたアプリケーションでも大規模障害の影響があったと説明を修正。東京リージョンの大規模障害で追加報告 － Publickey  あなたの行動データと広告のリンクをコントロールできるフェイスブックの新機能 | TechCrunch Japan : これから開発するんかい！ 「Webmin」の脆弱性を標的としたアクセスを警察庁が観測 - INTERNET Watch When Fake News Comes to Academia - Lawfare Detecting Credit Card Skimmers - Schneier on Security 一部のWindows 7ユーザーにセキュリティアップデートを1年間無料提供へ | TechCrunch Japan : XP のときと同じ展開になったな（笑） それでも Win7 以下を使い続ける人はいるだろうけど 暗号化をめぐる攻防、解決策を見出せるか - ZDNet Japan Googleはウェブのプライバシーとフィンガープリントの新たな対策を提案 | TechCrunch Japan Impervaの顧客情報流出についてまとめてみた - piyolog Want a security starter pack? | Surveillance Self-Defense Windows Updateに起因した国内の通信障害についてまとめてみた - piyolog キャッシュレス決済サービスの補償制度の状況についてまとめてみた - piyolog 転職サイトのビズリーチ、OSSの脆弱性管理ツールを開発　きっかけは「社内の悩み」 (1/2) - ITmedia NEWS 「つながるクルマ」はなぜ危ないのか、セキュリティを確保するために必要なもの - MONOist（モノイスト） AI Emotion-Detection Arms Race - Schneier on Security Attacking the Intel Secure Enclave - Schneier on Security 悪質ウェブサイトを利用して数年間もiPhoneが秘かにハックされていたことが判明 | TechCrunch Japan  天文関連  ニュース - 木星の巨大な嵐の内側をアルマ望遠鏡で探る - アルマ望遠鏡 ひらめき☆ときめきサイエンス「美ら星研究体験隊」 高校生による新しい電波星（水メーザー天体）の発見について | 国立天文台 水沢 MIT Tech Review: NASAが深宇宙原子時計を起動、人類の火星到達の強力な助っ人に  知財関連  Cloudflareによる8chan追放の判断、海賊版サイトに影響は？ | P2Pとかその辺のお話R Now You Can Watch the Keynotes from CC’s 2019 Global Summit - Creative Commons YouTube Sued For $720K Over Alleged Copyright Strike \u0026quot;Retaliation\u0026quot; - TorrentFreak Linux その44 - MicrosoftがexFATの仕様を公開・Linux kernelでのサポートを後押し - kledgeb : exFAT は特許が絡むので，その辺が自由にならない限りは安心して利用できない 論文の海賊版対策を続けてもSci-Hubには勝てない | P2Pとかその辺のお話R  Linux または Ubuntu に関する話題  Ubuntu 18.04 その354 - Ubuntu 18.04.3 LTS 日本語 Remixがリリースされました・ディスクイメージのダウンロード - kledgeb  その他  ［速報］KubernetesをvSphereに統合した「Project Pacific」を発表、vSphere上でKuberenetesクラスタなど運用可能に。VMWorld 2019 US － Publickey 「VMware Tanzu」（箪笥、たんす）発表。Kubernetes対応ソフトウェアの開発支援ツールおよびサービス群。VMworld 2019 US － Publickey MIT Tech Review: CO2排出量は車の5倍、力任せの深層学習は環境に悪すぎる 衛星インターネットスタートアップのAstranis、Falcon 9ロケットによる初打ち上げを契約 | TechCrunch Japan VMware Cloudをオンプレミスで利用可能な「VMware Cloud on Dell EMC」正式リリース。VMworld 2019 US － Publickey 自律運転車の寿命はわずか4年というフォードの目算の真実 | TechCrunch Japan スマートフォンの売上がまた減ったけどもう誰も驚かない | TechCrunch Japan : まぁ驚かんよね（笑） VMwareのクラウド基盤がAzure東京リージョンで利用可能に。「Azure VMware Solutions」を2020年第一四半期に東京リージョンで提供と発表。VMworld 2019 US － Publickey アスパラ収穫ロボは量産体制へ、開発元のinahoが資金調達 | TechCrunch Japan C言語でニューラルネットワークの実装（１）〜多層パーセプトロンの構造と活性化関数〜 - Qiita  C言語でニューラルネットワークの実装（２）〜順伝播と損失関数〜 - Qiita C言語でニューラルネットワークの実装（３）〜誤差逆伝播法〜 - Qiita C言語でニューラルネットワークの実装（４）〜データの準備〜 - Qiita C言語でニューラルネットワークの実装（５）〜モデルの構造と順伝播の実装〜 - Qiita C言語でニューラルネットワークの実装（６）〜逆伝播の実装〜 - Qiita C言語でニューラルネットワークの実装（７）〜オンライン学習と重みの初期値〜 - Qiita  東工大、スパコン「TSUBAME3.0」にNVIDIA仮想GPUを活用 - ZDNet Japan 米企業130社以上のファーウェイへの販売申請がすべて却下 | TechCrunch Japan MozillaのビアードCEO、年内に辞任へ - ZDNet Japan 2019年のロードマップに見るプログラミング言語「Rust」のこれから - ZDNet Japan Big Sky :: mongoose ウェブサーバと TensorFlow Lite を使った Object Detection API サーバを書いた。  "
    },
    {
      "title": "列挙型での遊び方",
      "section": "golang",
      "description": "実際に Go 言語で列挙を記述する場合は列挙専用の型を定義するのが定石である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/enumeration/",
      "published": "2019-08-31T14:49:53+00:00",
      "update": "2019-08-31T21:28:33+00:00",
      "content": " どうも Go 1.13 は8月中には出なさそうなので，軽く小話を。\n列挙型と定数生成器 Go 言語にはいわゆる「列挙型」や「列挙クラス」といったものは存在しない。 シンボルの定義には const を使えばいいので敢えて「列挙型」のようなものを考える必要はないわけだ。 それでも\nconst ( ONE = 1 TWO = 2 THREE = 3 ) などといちいち書いていくのは面倒である。 そこで Go 言語には iota と呼ばれる定数生成器が用意されている。\n先ほどのコードであれば\npackage main import \u0026#34;fmt\u0026#34; const ( ONE = iota + 1 TWO THREE )  func main() { fmt.Println(ONE, TWO, THREE) //Output:  //1 2 3 } と記述できる。 整数値に限れば iota の応用範囲は結構広くて\nconst ( BIT0 = 1 \u0026lt;\u0026lt; iota BIT1 BIT2 BIT3 ) てな感じにビットフラグのシンボルを定義することもできる。\n列挙専用の型を定義する 実際に Go 言語で列挙を記述する場合は列挙専用の型を定義するのが定石である。 たとえば\ntype BitFlag uint という型を定義して\nconst ( BIT0 BitFlag = 1 \u0026lt;\u0026lt; iota BIT1 BIT2 BIT3 ) という感じに書ける。 型にはメソッドを関連付けられるので，上の BitFlag 型に対して\nfunc (f BitFlag) String() string { return fmt.Sprintf(\u0026#34;%#02x\u0026#34;, uint(f)) } のような Stringer を用意すると\nfunc main() { fmt.Println(BIT0, BIT1, BIT2, BIT3) //Output:  //0x01 0x02 0x04 0x08 } てな感じに使える。\n列挙シンボルに「値」を関連付ける ここまで説明すれば列挙シンボルに「値」を関連付けるのはそんなに難しくないと気づくだろう。\n以下のような列挙シンボルを考える。\ntype CharEncoding int const ( Unknown CharEncoding = iota UTF8 ShiftJIS EUCJP ISO2022JP ) これらの列挙シンボルに対応する文字列を定義する。 こんな感じ。\nvar encodingNameMap = map[CharEncoding]string{ UTF8: \u0026#34;UTF-8\u0026#34;, ShiftJIS: \u0026#34;Shift_JIS\u0026#34;, EUCJP: \u0026#34;EUC-JP\u0026#34;, ISO2022JP: \u0026#34;ISO-2022-JP\u0026#34;, } これで Stringer を\nfunc (c CharEncoding) String() string { if s, ok := encodingNameMap[c]; ok { return s } return \u0026#34;Unknown\u0026#34; } と書けば\nfunc main() { fmt.Println(UTF8) //Output:  //UTF-8 } てな感じにできる。\nあるいは文字列から列挙シンボルに変換する\nfunc GetCharEncoding(s string) CharEncoding { for key, value := range encodingNameMap { if strings.ToLower(value) == strings.ToLower(s) { return key } } return Unknown } という関数を作れば\nfunc main() { fmt.Println(GetCharEncoding(\u0026#34;utf-8\u0026#34;)) //Output:  //UTF-8 } といった感じで簡易バリデーションみたいなこともできるだろう。\nもちろん「値」との関連付けは文字列に限るわけではなく，たとえば\nimport ( \u0026#34;golang.org/x/text/encoding\u0026#34; \u0026#34;golang.org/x/text/encoding/japanese\u0026#34; \u0026#34;golang.org/x/text/encoding/unicode\u0026#34; ) var encodingMap = map[CharEncoding]encoding.Encoding{ UTF8: unicode.UTF8, ShiftJIS: japanese.ShiftJIS, EUCJP: japanese.EUCJP, ISO2022JP: japanese.ISO2022JP, } func (c CharEncoding) Encoding() encoding.Encoding { if e, ok := encodingMap[c]; ok { return e } return nil } などと幾らでも追加できる。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "Libgcrypt 1.8.5 がリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "一般的にサイドチャネル攻撃は成立条件が複雑になることが多いので深刻度は高くならないのだが，計画的にアップデートを行ってほしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/08/libgcrypt-1_8_5-is-released/",
      "published": "2019-08-30T12:16:14+00:00",
      "update": "2019-08-30T12:16:45+00:00",
      "content": " GnuPG でも使われている GNU の暗号ライブラリ Libgcrypt の 1.8.5 がリリースされた。\n [Announce] Libgcrypt 1.8.5 released  今回はセキュリティ・アップデートとなる。\n CVE-2019-13627  This release fixes an ECDSA side-channel attack. via Libgcrypt 1.8.5 released  以上を含む主な変更点は以下のとおりだ。\n Bug fixes:  Add mitigation against an ECDSA timing attack. [T4626,CVE-2019-13627] Improve ECDSA unblinding.  Other features:  Provide a pkg-config file for libgcrypt.   Release-info: https://dev.gnupg.org/T4683 via Libgcrypt 1.8.5 released  一般的にサイドチャネル攻撃は成立条件が複雑になることが多いので深刻度は高くならないのだが，計画的にアップデートを行ってほしい。\nLinux 等では Libgcrypt のみを入れ替えれば済む（筈）なのだが， Windows 版の GnuPG などはパッケージに Libgcrypt のバイナリが含まれているので，今後のリリース情報に注意すること。\nさて Ubuntu はどうするんだろうねぇ。 GnuPG 2.2.17 のセキュリティ・アップデートに関してもまるっと無視している。 ホンマ Ubuntu ってセキュリティに無頓着だよなぁ。\nGnuPG や Libgcrypt をビルドする環境を早急に整える必要があるのだが，今はちょっと無理なんだよね。 もうしばらくは我慢我慢我慢。\n参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2018-12-16 (powered by PA-API)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-API)\n "
    },
    {
      "title": "パズル好きこそプログラマに向いている",
      "section": "remark",
      "description": "与えられたルールに沿って問題を作ること，あるいはルールそのものを作ること，これはまさに「プログラミング」である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/08/puzzle-for-programmer/",
      "published": "2019-08-29T13:29:01+00:00",
      "update": "2019-08-29T13:37:47+00:00",
      "content": " Twitter で\n先日、某講演を聞きに言った時に某大の講師の方が「世の中にはパズルが得意な人とレゴが得意な人がいる。パズルが得意な人は完成形にまでしか仕上げられない事が多い。我々はレゴが得意な人が欲しい。｣と言ってて分かりやすい例えだなと思った。プログラマにも言えそう。\n\u0026mdash; mattn＠有益情報 (@mattn_jp) July 25, 2019 という tweet を見かけたので脊髄反射してみる。\n私はレゴが嫌いである。\nブロック玩具が嫌いなわけではない。 ナノブロックとかビンボー人に優しいし面白いと思う。 でもレゴはダメだ！ あれは「資本主義」の象徴である。 「持たざるもの」はスタートラインにすら立てないし，持っていてもその優劣は持っているレゴの「量」で決まるからだ。 ビンボー人のルサンチマンを煽る玩具。 それがレゴである。\nTweet された方や「某大の講師の方」がどのようなつもりで言ったのかは知らないが，パズルの本当の面白さはパズルを「解く」ことではなく「作る」ことにある。 これは12ピースのジグソーパズルから難解な数理パズルまで一貫して言えることだ。\n私（の実家）はビンボーでジグソーパズルもめったに買ってもらえなかったが，パズル雑誌は少ない小遣いの中から自力で買って楽しんでいた。 私が学生時代の1980年代にめちゃめちゃ流行ったパズル雑誌に「ニコリ」というのがある（いや，今もあるけど）。 当時の「ニコリ」が他のパズル雑誌と一線を画していたのは読者が「問題」を投稿できることだった（現在はどうなっているか知らない）。\n 発掘品。ニコリ便箋。1回だけ懸賞に当たったのよ。  特に「数独（数字は独身に限る）」は本当に面白かった。 商標の関係で日本では「ナンバープレイス」の本名のほうが有名だが，海外では “sudoku” という単語があり，数学論文のネタにさえなっている。\n与えられたルールに沿って問題を作ること，あるいはルールそのものを作ること，これはまさに「プログラミング」である。 「問題を解く」なんてのは，ただプログラムを実行しているだけに過ぎない1。\nというわけで私は\nパズル好きこそプログラマに向いている と声高に主張しよう（笑）\n余談だが... 私は（設計を除く）プログラミング作業の中で「デバッグ」が一番好きだ。 特に他人の書いたコードのデバッグは極上の数理パズルである。 他人のコードを読むのは勉強になるしね。\nデバッグに比べればコーディングなんて脳内のコードを書き写すだけの「写経」に過ぎない。 最も退屈で苦痛な時間。\nブックマーク  「イミテーション・ゲーム」が面白かった。 Project Euler で遊ぶ  参考図書  STARTSIDE 数独 すうどく 脳トレ 卓上 ボード ゲーム 9ブロックパズル (ブラック) STARTSIDE おもちゃ＆ホビー B077PDFQ4S (ASIN), 4562440102073 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「数独」がボードゲームに（笑）\nreviewed by Spiegel on 2018-12-02 (powered by PA-API)\n  ちなみに数独を自動で解くプログラムは既に存在している。解くことができるということは作ることもできるということだ。でも機械が作った「問題」って 美しくない んだよなぁ（笑） [return]   "
    },
    {
      "title": "Ubuntu に KeePassXC を導入する",
      "section": "remark",
      "description": "APT または Snap から導入できるのだが Snap 版を利用したほうがいいみたい。 ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/08/installing-keepassxc-in-ubuntu/",
      "published": "2019-08-25T03:05:20+00:00",
      "update": "2019-09-01T02:09:37+00:00",
      "content": " 以前に Mono 版の KeePass を導入する手順を紹介したが Linux 用であればサードパーティの KeePassXC がよさげである。\nKeePassXC は KeePass のサードパーティ版である KeePassX の fork でマルチプラットフォームに対応している。 Windows や macOS の他，各種 Linux ディストリビューションにも対応しているようだ。\nUbuntu では APT または Snap から導入できるのだが1\n$ apt show keepassxc Package: keepassxc Version: 2.3.4+dfsg.1-1 Priority: optional Section: universe/utils Origin: Ubuntu Maintainer: Ubuntu Developers \u0026lt;ubuntu-devel-discuss@lists.ubuntu.com\u0026gt; Original-Maintainer: Julian Andres Klode \u0026lt;jak@debian.org\u0026gt; ...$ snap find keepassxc Name Version Publisher Notes Summary keepassxc 2.4.3 keepassxreboot - community driven port of the windows application “Keepass Password Safe” keepassx-elopio 2.0.2 elopio - KeePassX is a cross platform password safe ということで Snap 版を利用したほうがいいみたい。 というわけで，早速！\n$ sudo snap install keepassxc keepassxc 2.4.3 from Jonathan White (keepassxreboot) installed  これで Ubuntu のメニューから KeePassXC を起動できる。\n おおっ，日本語だ（笑）\n使い方は本家の KeePass とだいたい同じようだ。 ブラウザ連携は今のところ怖くて使う気にならない。 まぁ，そのうち気が向いたらね。\n削除する場合は\n$ sudo snap remove keepassxc  でおｋ。 ちなみにアップグレードは\n$ sudo snap refresh  で Snap 管理下にある全てのパッケージを一括でアップグレードできる。\nSnap はローカルにリポジトリ・データベースを持たないので（APT に比べて）扱いが簡単なのはいいのだが，こういうアプリ・ストア型のパッケージ管理システムは，どうしてもサービス提供者側の統制が強くなるので，好かんのだよなぁ。 一応 PPA にもリポジトリがあるみたいなのだが，うーん...\nブックマーク  GitHub - keepassxreboot/keepassxc: KeePassXC is a cross-platform community-driven port of the Windows application “Keepass Password Safe”. Ubuntu 19.04 その146 - Snap Storeからインストール可能なセキュリティーアプリ5選 - kledgeb Snapから使いやすいセキュリティソフトウェア5選 | マイナビニュース   Ubuntu 18.04 以降は標準で Snap が入ってるらしい。 [return]   "
    }
  ]
}
