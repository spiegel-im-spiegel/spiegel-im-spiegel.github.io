{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "SSH 越しに DB サーバにアクセスする",
      "section": "release",
      "description": "mattn さんが公開されているパッケージを参考に組んでみた",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/09/sql-over-ssh/",
      "published": "2022-09-10T09:04:56+00:00",
      "update": "2022-09-10T10:02:28+00:00",
      "content": "PostgreSQL や MySQL などの RDBMS サービスにアクセスするために Go では標準で database/sql パッケージを用意している （実際にサービスにアクセスするためには github.com/lib/pq や github.com/go-sql-driver/mysql といったドライバ・パッケージを使う必要がある）。 たとえばこんな感じ。\ndb, err := sql.Open(\u0026#34;postgres\u0026#34;, \u0026#34;postgres://dbuser:dbpassword@dbserver:5432/example?sslmode=require\u0026#34;) ただし，これはクライアントからサービスに直結する場合で，たとえば VPS 内の RDBMS サービスに SSH 経由でアクセスする必要がある場合は少し工夫が必要である。 ありがたいことに PostgreSQL サービスに SSH 経由でアクセスするためのパッケージを mattn さんが公開して下さっている。\nmattn/pqssh Go で SSH 超しに PostgreSQL に接続できる database/sql ドライバを作った。 ありがたや \u0026#x1f647;\nで，実は MySQL サービスに SSH 経由でアクセスする必要ができたので，上のパッケージを参考に自作してみた。\ngoark/sshql: Go SQL drivers over SSH このパッケージを使ってこんな感じに書ける。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/mysqldrv\u0026#34; ) func main() { mysqldrv.New(\u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, }).RegisterDial() db, err := sql.Open(\u0026#34;mysql\u0026#34;, fmt.Sprintf(\u0026#34;dbuser:dbpassword@%s(localhost:3306)/dbname\u0026#34;, mysqldrv.DialName)) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer db.Close() rows, err := db.Query(\u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } for rows.Next() { var id int64 var name string if err := rows.Scan(\u0026amp;id, \u0026amp;name); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;ID: %d Name: %s\\n\u0026#34;, id, name) } rows.Close() } MySQL の場合 SSH でアクセスするための Dialer を登録して，登録文字列を DSN に含める必要がある。\nさらに，このパッケージを使った PostgreSQL への SSH 越しのアクセスはこんな感じに書ける。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/pgdrv\u0026#34; ) func main() { pgdrv.New(\u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, }).Register() db, err := sql.Open(pgdrv.DriverName, \u0026#34;postgres://dbuser:dbpassword@localhost:5432/example?sslmode=disable\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer db.Close() rows, err := db.Query(\u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } for rows.Next() { var id int64 var name string if err := rows.Scan(\u0026amp;id, \u0026amp;name); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;ID: %d Name: %s\\n\u0026#34;, id, name) } rows.Close() } やっぱ sql.Open() 関数の第1引数で専用ドライバを指定するほうがシンプルだよなぁ。 DSN 文字列をいじらなくて済むし。\nここでごめんペコン \u0026#x1f647;\nSSH 越しにアクセスできる適当な PostgreSQL 環境を持ってなくて，上のコードはテストしてません。 「あんだ，動かねーよ！」とかありましたら pull request 頂けるとありがたいです。\npgx ドライバでも SSH 越しにアクセスしたいのだが\u0026hellip; PostgreSQL にアクセスするなら github.com/jackc/pgx パッケージを使いたいところだが github.com/lib/pq のように専用の Dialer を登録できるインタフェースはないっぽい？ 「◯◯すればできるよ」という情報がありましたら是非教えてください。 まぁ，試す環境がないんだけどね。\nInsecureIgnoreHostKey() 関数で叱られる mattn さんの github.com/mattn/pqssh パッケージの中で\nsshConfig := \u0026amp;ssh.ClientConfig{ User: d.Username, Auth: []ssh.AuthMethod{}, HostKeyCallback: ssh.InsecureIgnoreHostKey(), } という記述があり，最初はそのまま真似してたのだが，例によって lint に「あかんがな！」と叱られた。\nHostKeyCallback 項目は SSH ログイン時のホスト認証の動作をするもので， ssh.InsecureIgnoreHostKey() は何もせず nil を返却するだけの関数を渡している。\n// InsecureIgnoreHostKey returns a function that can be used for // ClientConfig.HostKeyCallback to accept any host key. It should // not be used for production code. func InsecureIgnoreHostKey() HostKeyCallback { return func(hostname string, remote net.Addr, key PublicKey) error { return nil } } こりゃあ，確かにあかんわ（笑）\n最終的に今回の github.com/goark/sshql パッケージでは一応ホスト認証を行っているが ~/.ssh/known_hosts ファイルに登録されていないホストや登録されている鍵が異なる場合は問答無用でエラーを返すようにした。\n$ go run sample.go ssh: handshake failed: knownhosts: key is unknown まぁ，こういうパッケージはバッチ処理とかにしか使わないだろうし，ええじゃろう。\nなお sshql.Dialer 構造体は\n// Dialer is authentication provider information. type Dialer struct { Hostname string `json:\u0026#34;hostname\u0026#34;` Port int `json:\u0026#34;port\u0026#34;` Username string `json:\u0026#34;username\u0026#34;` Password string `json:\u0026#34;password\u0026#34;` PrivateKey string `json:\u0026#34;privateKey\u0026#34;` IgnoreHostKey bool `json:\u0026#34;IgnoreHostKey\u0026#34;` client *ssh.Client } と定義しているけど IgnoreHostKey 要素に true をセットするとホスト認証をすっ飛ばしてくれる。\nブックマーク Using MySQL / MariaDB via SSH in Golang · GitHub Golang – How to write ssh.HostKeyCallback – cyruslab simukti/sqldb-logger: A logger for Go SQL database driver without modifying existing *sql.DB stdlib usage. 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nGo言語による分散サービス ―信頼性、拡張性、保守性の高いシステムの構築 Travis Jeffery (著), 柴田 芳樹 (翻訳) オライリージャパン 2022-08-03 単行本（ソフトカバー） 4873119979 (ASIN), 9784873119977 (EAN), 4873119979 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元でデジタル版を購入。読書会の課題図書。ハンズオンぽい構成でコードがたくさん書かれているのがよい。\nreviewed by Spiegel on 2022-08-03 (powered by PA-APIv5)\nデベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n"
    },
    {
      "title": "命のリスク・トレードオフ",
      "section": "remark",
      "description": "大抵は自分の主張に都合のいいリスクに対しては声高に叫ぶが，リスク間のトレードオフについては口を閉ざす",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/risk-management/",
      "published": "2022-09-10T00:40:40+00:00",
      "update": "2022-09-10T02:08:36+00:00",
      "content": "久しぶりに11年前に書いてた自ブログ記事を眺めていたが「日本学術学会は原発に批判的？」に\nリスクにおける「基準値」はリスク評価に対して特定の条件を加えたもので，その条件は政治的な判断にならざるをえない場合が多い。 放射線量の基準値が平時と有事で異なるのはそのためだ。 リスクは系全体で最小となるようにマネジメントされなければならない。 だから「条件」を巡って議論が起きるのは不思議なことではない。 ただ傍で見てて「それって科学なの？」という思いはあるけど 日本学術学会は原発に批判的？より という記述を見つけて「日本てば10年経っても何も進歩しなかったんだな」と暗澹たる気持ちになった。 もちろん「コロナ」の話だよ。\nリスクに関して細かい話は色々あるが，大雑把には\nリスクは定量評価である リスクはリスクとしかトレードオフできない リスクは系全体で最小（ゼロではない）となるようマネジメントされなければならない といった辺りが重要である。\nたとえば疾病関連のリスクは基本的には「損失余命リスク」で評価する。 これ自体は妥当だと思う。 問題は疾病関連リスクしか見ないことにある。 たとえば社会的な経済活動が減退して困窮したり絶望したりする人が増えれば，これまもた「損失余命リスク」と言える。 つまり，感染症の大規模感染を抑える行動とそれによる経済活動の減退とのトレードオフは「損失余命リスク」評価の下に議論することもできる。\nでも実際には，あるリスクを減らすための行動を他のリスクと絡めて考えている人は（専門家も含めて）少ないように見える。 大抵は自分の主張に都合のいいリスクに対しては声高に叫ぶが，リスク間のトレードオフについては口を閉ざす。 これでは正しい「政治判断」はできないのではないか。 浪花節で社会は回らない。\nお金は大事だし，実のところリスクはお金（の量）に換算できる。 身も蓋もないことを言えば感染症リスクも不況の影響もお金持ちなら解決できる。 でも，政治決断としてリスクに対してお金を出すのなら（社会全体で）きちんと抑制効果が出るものでなければ意味がない。 考えなしにお金やポイント・クーポン券をばら撒くのはただの政治腐敗である。\nそれとも「不況だからマイナポイントをばら撒く」というのが令和時代のトレンドなのだろうか。\n"
    },
    {
      "title": "Go 1.19.1 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は2件の脆弱性修正を含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/09/go-1_19_1-is-released/",
      "published": "2022-09-06T23:08:38+00:00",
      "update": "2022-09-07T11:06:19+00:00",
      "content": "予告通り Go 1.19.1 がリリースされた。\n[security] Go 1.19.1 and Go 1.18.6 are released 今回は2件の脆弱性修正を含んでいる。\ngo1.19.1 (released 2022-09-06) includes security fixes to the net/http and net/url packages, as well as bug fixes to the compiler, the go command, the pprof command, the linker, the runtime, and the crypto/tls and crypto/x509 packages. See the Go 1.19.1 milestone on our issue tracker for details. via Release History - The Go Programming Language CVE-2022-27664 net/http: handle server errors after sending GOAWAY A closing HTTP/2 server connection could hang forever waiting for a clean shutdown that was preempted by a subsequent fatal error. This failure mode could be exploited to cause a denial of service. via Go 1.19.1 and Go 1.18.6 are released （以下未稿）\nCVE-2022-32190 net/url: JoinPath does not strip relative path components in all circumstances JoinPath and URL.JoinPath would not remove ../ path components appended to a relative path. For example, JoinPath(\u0026quot;https://go.dev\u0026quot;, \u0026quot;../go\u0026quot;) returned the URL https://go.dev/../go, despite the JoinPath documentation stating that ../ path elements are cleaned from the result. via Go 1.19.1 and Go 1.18.6 are released えっ，これヤバくね？\n（以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.19.1.linux-amd64.tar.gz）を取ってきてインストールすることを強く推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.19.1.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.19.1.linux-amd64.tar.gz $ sudo mv go go1.19.1 $ sudo ln -s go1.19.1 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.19.1 linux/amd64 Windows は Scoop 経由で OK\nアップデートは計画的に。\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n"
    },
    {
      "title": "2022-09-04 のブックマーク",
      "section": "bookmarks",
      "description": "「Git's database internals」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/09/04-bookmarks/",
      "published": "2022-09-04T10:16:35+00:00",
      "update": "2022-09-04T10:16:46+00:00",
      "content": "リリース情報 「Thunderbird 91.13.0/102.2.0」が公開 ～v91系は最終リリース - 窓の杜 「Thunderbird」に「影響大」の脆弱性、v102.2.1への更新を - 窓の杜 Release v0.102.3 · gohugoio/hugo · GitHub Release v3.15.0 · go-task/task · GitHub セキュリティ＆プライバシー関連 DEF CONから永久的に締め出されたソーシャルエンジニアリングのスター - YAMDAS現更新履歴 JPCERT/CCが確認したフィッシングサイトのURLを公開 - JPCERT/CC Eyes | JPCERTコーディネーションセンター公式ブログ Phishing URL Data Statistic GitHub - JPCERTCC/phishurl-list: Phishing URL dataset from JPCERT/CC Google Launches New Open Source Bug Bounty to Tackle Supply Chain Attacks クソテクノロジー導入曲線：労働者監視システムが“あなた”に向けられるまで | p2ptk[.]org [security] Go 1.19.1 and Go 1.18.6 pre-announcement : 2022-09-06 (現地時間) にリリース予定 知財関連 ベストセラー教科書の無料化・オープンソース化のニュースに「オープン教育リソース」の歴史を思う - YAMDAS現更新履歴 なぜ私の本は1冊もAudibleで聞けないのか――あるいは、なぜAmazonは私に3,218.55ドルの借りがあるのか | p2ptk[.]org コリイ・ドクトロウの新刊はビッグテックや巨大メディアの権力へのクリエイターの対抗を呼びかける「チョークポイント資本主義」 - YAMDAS現更新履歴 Linux または Ubuntu に関する話題 Ubuntu 22.10 その15 - sshd（OpenSSH）が接続を要求されるまで起動しないように変更・変更によるユーザーへの影響 - kledgeb Go 言語関連 至高のGoプラグイン用ツールを作った - knqyf263\u0026rsquo;s blog\nこれまでとこれからのGo | gihyo.jp\nAPIを作りながら進むGo中級者への道：さきさん文庫 : 欲しい物リスト\nJava 言語関連 Open Session in Viewは使用すべきなのか？ その他 「辞めた社員を訴えたい」こんな経営者の訴えは通るのか？　よくある誤解を解説 - 弁護士ドットコム 農家が作った農家のためのアプリAGRIHUBアグリハブ アジャイルマニフェストはいまだに重要性を持つか | Atlassian AWSが主導するElasticsearchのフォーク「OpenSearch」にCanonicalが参加へ － Publickey 作業手順書にmermaidを使ったら便利だったメモ - Qiita Serverless | Cockroach Labs Go言語のバージョン通知アプリをHerokuから移行する : CockroachDB Serverless を使った実装例 Git\u0026rsquo;s database internals I: packed object store | The GitHub Blog Git\u0026rsquo;s database internals II: commit history queries | The GitHub Blog Git\u0026rsquo;s database internals III: file history queries | The GitHub Blog Git\u0026rsquo;s database internals IV: distributed synchronization | The GitHub Blog Git\u0026rsquo;s database internals V: scalability | The GitHub Blog デジ庁が取り組むラストワンマイル｜塚本 牧生｜note 九州大学がリアルな「3Dデジタル生物標本」を1,400点以上公開。誰でも自由にダウンロードでき、ゲームエンジンやDCCツールで活用可能 | ゲームメーカーズ UTF-8で動くRailsがShift_JISな外部システムと通信する方法 - BOOK☆WALKER Tech Blog 特集 - ソフトウェア開発者／有限会社サイトー企画代表 秀まるお氏 インタビュー | REALFORCE | 日本製プレミアムキーボードの最高峰 Stable Diffusionをローカルマシンで実行する(VSCodeとDevcontainerを使用) "
    },
    {
      "title": "モリサワ BIZ UD 明朝/ゴシック Web フォント",
      "section": "remark",
      "description": "これって JIS X 0208 にない文字は収録されてない？",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/morisawa-biz-ud-fonts/",
      "published": "2022-09-03T10:39:48+00:00",
      "update": "2022-09-03T11:39:47+00:00",
      "content": "Twitter 経由で知ったのだが Google Fonts にモリサワ BIZ UD 明朝/ゴシック フォントってのがあるらしい。\nMorisawa BIZ UDMincho Morisawa BIZ UDGothic 2022年春に公開されたのか。 それなら Bunny Fonts にもあるかなぁ，と検索してみたら\nBunny Fonts | Explore Faster \u0026amp; GDPR friendly Fonts おー，あるやないかい！ というわけで，手元の環境でさっそく試してみた。\nこっちは従来の NOTO フォント（クリックで拡大）\nこっちが モリサワ BIZ UD 明朝 フォント（クリックで拡大）\nんー，やっぱモリサワのほうが見やすいかなぁ。 全体的に詰まってる感じだが窮屈には見えない。 Web ブラウザで見やすいようにチューニングされている？ 役物はモリサワのほうはプロポーショナルフォントっぽく詰めているようだ。\n英文でも試してみよう。\nこっちは従来の NOTO フォント（クリックで拡大）\nこっちが モリサワ BIZ UD 明朝 フォント（クリックで拡大）\n英字だとモリサワのほうが幅広に見えるんだな。 日本語フォントとのバランスを取ってるからか？ この辺は好みだろうな。\nというわけでモリサワ BIZ UD 明朝/ゴシックにしようかな，と一瞬思ったのだが，どうも一部表示できない文字があるらしい。 「神（U+FA19）」とか「㈱（U+3231）」とか。 これって JIS X 0208 にない文字は収録されてないってことかな。 ひょっとして収録グリフ数を制限することで有料ライセンス版1 との差別化を図ってる？ うーむ。\nこのブログは Unicode の変わった文字もたまに使うのでモリサワ BIZ UD 明朝/ゴシックは向かないか。 というわけで，今回は諦めた。 「機種依存文字（古語）なんか使わないぜ」という方は検討してみてもいいだろう。\nブックマーク Google Fonts から Bunny Fonts に乗り換える モリサワ BIZ UD 明朝/ゴシックは SIL Open Font License, Version 1.1 でライセンスされている。このライセンス下のフォントは販売目的でなければ自由に再配布できる（ただし Attribution \u0026amp; Share Alike 条件がつく）。なお，ソフトウェアにバンドルするのであれば販売も許可される。ドキュメントへの埋め込みもOK。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "SETI と私",
      "section": "remark",
      "description": "大きな功績を遺された Frank Drake 博士に哀悼の意を表します",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/seti/",
      "published": "2022-09-03T03:35:07+00:00",
      "update": "2022-09-03T05:45:00+00:00",
      "content": "大きな功績を遺された Frank Drake 博士に哀悼の意を表します He was there when I entered this world, and I was there when he left:\nFrank D Drake, May 28, 1930 - September 2, 2022.\nRest among the stars, my sweetest Papa D. You will always be my brightest star.\nMore info here: https://t.co/Bt60VCfrxa pic.twitter.com/vyo7ZQq5G4\n\u0026mdash; Dr. Nadia Drake (@nadiamdrake) September 2, 2022 「宇宙人探し（SETI; Search for Extra-Terrestrial Intelligence）」でおなじみ Frank Drake 博士が 2022-09-02 にお亡くなりになったそうです。\nFrank Drake died peacefully at home in Aptos, California on September 2, of natural causes. He was 92. via Nadia Drake | Science Journalist 日本語で言うなら「大往生」ってやつですかね。\n科学 SETI を拓いた人 彼の娘で科学ジャーナリストの Nadia Drake さんが National Geographic に寄稿された記事がある。\nWhy alien hunters have spent 60 years finding new solutions for the Drake Equation この中に出てくる「ドレイク方程式」というのがこれ：\n$$ N = R_* \\times f_p \\times n_e \\times f_l \\times f_i \\times f_c \\times L $$ via Drake Equation このうち\n$N$ は私達の銀河系に存在する文明の数 $R_*$ は年間に私達の銀河系で誕生する恒星の数 $f_p$ は $R_*$ のうち惑星を持つようになる割合 $n_e$ は生命が発生し得る条件を持った惑星の数 $f_l$ は $n_e$ のうち実際に生命が発生し得る割合 $f_i$ は $n_e \\times f_l$ のうちその生命が知性を持つに至る割合 $f_c$ は $n_e \\times f_l \\times f_i$ のうち（電波等による）通信技術を持つまでに発達する割合 $L$ は $n_e \\times f_l \\times f_i \\times f_c$ で示される文明の平均寿命 である。 単なる「生命」ではなく「文明」であること，その文明が星系外から観測可能であることが条件である。\nそして最重要で厄介なのは $L$ の項。 文明が発生し得る割合がいくら大きくても $L$ 項が小さいならそれは泡沫の夢。 そして $L$ 項として実証できるのは，今のところ，私達の地球人類文明しかないのである。 私達人類が光よりも波長の大きい「電波」の存在を証明したのが19世紀後半。 それを使った通信が一般化するのは20世紀に入ってから1。 つまり地球外文明が発見されない限り $L$ 項として証明できたのは未だ100年ほどなのだ。\nまぁ $L$ 項については「そんなわけないやろ」と様々な見積もりは行われているが証明する術はない。 でも私達人類が文明を保っていられる期間が長いほど $L$ 項を大きく見積もることができる。 頑張れ人類（笑）\n恐らく、どんな技術文明も、それが未熟な段階では、高度なテクノロジーの扱いを謝って自滅する可能性をはらんだ時期があるのではなかろうか。この時期をどう乗り越えるかが、Lを決定する決め手となる。そして、もしこれをうまく乗り越えることさえできれば、技術文明はそう簡単に滅び去るものではなくなるはずだ。われわれだって、そう遠くない将来、火星あたりへ移民して、人類文明の分散・継承の手段を確保できるようになれば、文明が内的・外的要因によって消滅する確率は大きく低下するだろう。 ファースト・コンタクト―地球外知性体と出会う日より さて，「私達以外に『宇宙人』はいるか？」という素朴な命題について，想像や妄想ではなく，科学的アプローチで以って挑んだ最初の事例が1960年の「オズマ計画」で，この計画の中心人物のひとりが Frank Drake 博士である。\nこうして、一九六〇年四月八日午前四時、世界のマスコミが注目する中、二六メートル電波望遠鏡は、最初の目標であるくじら座タウ星へと向けられたのである。\nこうして、それから約二ヵ月、計四〇〇時間にわたって、二つの恒星を狙った電波の受信実験は続けられた。しかし、残念ながらこれ以上、彼らには電波望遠鏡を専有する時間は与えられず、「オズマ計画」はこれという成果をあげないままに終了した。\nだが、もちろん、たった四〇〇時間で地球外文明を発見できると信ずるほどSETI研究も甘くはない。何はともあれ、こうして実際にSETI計画が実施に移され、マスコミも科学界もそれに反対を表明しなかったという事実は、それ以降のSETI研究の展開に大きなはずみとなった。\nファースト・コンタクト―地球外知性体と出会う日より いやぁ，いい時代だったんだねぇ。 「成果主義」の仮面を被りつつ「望む結果」しか受け入れられない今の社会風潮から見ると羨ましい限りだよ（笑）\nSETI@home と私 時は流れ1999年，画期的なプロジェクトが正式稼働した。 これが UC Berkeley が中心となって実施されたあの SETI@home である。\n当時の私は自宅回線を ADSL に切り替えて「テレホーダイ」から解放されたばっかりだったと思う（うろ覚え）。 SETI@home と（当時山根信二さんが主催されていた）日本語メーリングリストに飛びついた。 というか私の Web 上での活動は実質的に SETI@home 参加がトリガーになっているといっても過言ではない。\n日本語メーリングリストのおかげか SETI@home は日本国内でもかなり盛り上がり，SF作家の野尻抱介さんがファンブックまで出すありさま（笑） いやぁ，楽しかったねぇ。\nSETI@home が（当時）優れていた点は大きく2つ。\nひとつは観測のための電波望遠鏡を専有するのではなく，パラボラアンテナの焦点部分に SETI 専用の受信機を取りつけて誰かのプロジェクトで望遠鏡が稼働している時に便乗してデータを収集する「ピギーバック方式」であったこと。 もうひとつは解析のための分散コンピューティング・システムを構築し一般ユーザに広く協力を求めたこと。\n「解析のための分散コンピューティング・システム」そのものについては既に暗号解読コンテストなどでも用いられていたけど，こういったコンテストは賞金ありきである。 でも SETI@home では賞金とかいった「にんじん」はなく，せいぜい「本当に宇宙人を示す電波が見つかったら発見者として論文に名前を載せるよ」といった程度。 しかも最終的に「宇宙人を示す電波」は見つかってないのだ。\nでも「宇宙人探しに貢献できる」という点が多くの人を惹きつけ，肯定的に受け入れられた。 私はこのことがとても重要だと思っている。 実際に SETI@home のプロジェクト運営の成功を受けて多くの学術系分散コンピューティング・プロジェクトが立ち上がった。 2005年の「国際物理年」に正式稼働した Einstein@Home もそのひとつだ。\n残念ながら SETI@home 自体は2020年に活動を停止したが，基盤としての BOINC は残り，多くのプロジェクトで利用されている。\nSETI 研究は凄く大変である。 なにが大変って時間や資金をいかにして調達するかが大変なのである。 普通に考えて本当に成果が得られるか分からないプロジェクトにリソースを提供する人は多くない。 実際に SETI@home は常に資金繰りに苦労してたみたいだし，主催する研究者も派生プロジェクトである Astropulse や基盤技術である BOINC を成果として上手く使って論文を発表していたようである。 それでも20年続いた SETI@home はかなり幸運な部類だったのでは，と現時点では思う。\n私達以外に「宇宙人」はいるか？ 「私達以外に『宇宙人』はいるか？」という素朴な命題の答えは未だ得られていない。 「宇宙人はいる」とも「宇宙人はいない」とも証明されていないのだ2。\nFrank Drake 博士の功績が「過去の功績」とならぬよう何らかの形で研究は続けていくべきだと思うし，また SETI@home のような面白いプロジェクトを開催するなら乗るよ，私は。\nブックマーク Frank D. Drake 1930 – 2022 In Memoriam: Frank Drake | News | Astrobiology Are we alone in the universe? Revisiting the Drake equation – Exoplanet Exploration: Planets Beyond our Solar System Pioneering radio astronomer Frank Drake dies at 92 Frank Drake, pioneer in the search for alien life, dies at 92 SETI pioneer Frank Drake, of \u0026lsquo;Drake Equation\u0026rsquo; fame, dies at 92 | Space Frank Drake, astronomer famed for contributions to SETI, has died | Ars Technica Drake wants off-world listening post for alien messages | New Scientist Frank Drake, astronomer and SETI pioneer, RIP | Boing Boing The Future’s Most Important Possibility — Contact With Extraterrestrial Life | by Dr. Lisa Galarneau | We Are Not Alone - The Disclosure Activists | Medium In addition to the well-known sounds on my Golden Record, images like these were included as a beacon of humanity to those I might encounter on my journey. I carry this message into the cosmos thanks to astronomy pioneers like Dr. Frank Drake (1930-2022). pic.twitter.com/zeHwD8k5AC\n\u0026mdash; NASA Voyager (@NASAVoyager) September 3, 2022 We are saddened by the passing of Dr. Frank Drake.\nDrake was driven by the question of whether we are alone in the universe. His work, including the famous Drake Equation, has shaped the search for life for decades.\nOur CEO @BillNye shares his thoughts on Drake\u0026#39;s passing here. pic.twitter.com/8YfioNqImQ\n\u0026mdash; Planetary Society (@exploreplanets) September 2, 2022 SETI@home日本語情報ページ (Internet Archive) SETI@home とその技術的解説風解説 参考図書 ファースト・コンタクト―地球外知性体と出会う日 (文春新書) 金子 隆一 (著) 文藝春秋 1998-10-01 新書 4166600044 (ASIN), 9784166600045 (EAN), 4166600044 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 地球外文明探査の歴史を俯瞰する良書。是非ともデジタル化を希望する！\nreviewed by Spiegel on 2016-01-30 (powered by PA-APIv5)\nSETI@homeファンブック―おうちのパソコンで宇宙人探し 野尻 抱介 (著) ローカス 2000-01-01 単行本 4898140866 (ASIN), 9784898140864 (EAN), 4898140866 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 内容は古いけど当時の「熱」を伝えた名著だと思うけどなぁ。著者の方が自己出版で Kindle で出してくれたらいいのに。\nreviewed by Spiegel on 2019-03-28 (powered by PA-APIv5)\nニャルラトホテプ 原題: NYARLATHOTEP ラヴクラフト ハワード・フィリップス, 大久保 ゆう (翻訳) 2014-04-04 (Release 2015-08-19) 青空文庫 56839 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SAN 値が下がる。\nreviewed by Spiegel on 2019-03-28 (powered by aozorahack)\n［合本版］這いよれ！ニャル子さん　全１２巻 (GA文庫) 逢空 万太 (著), 狐印 (イラスト) SBクリエイティブ 2017-06-08 (Release 2017-06-08) Kindle版 B072ML1SB2 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ニャル子さん合本版が半額セールしてたので衝動買いした。紙の本に換算して3327ページ（笑） こういう無茶が出来るのがEブックのいいところだよね。でも，ニャル子さんを読む（観る）と仮面ライダーが見たくなるんだよなぁ。\nreviewed by Spiegel on 2019-03-27 (powered by PA-APIv5)\nちなみに日本語の「電波」が公用語として認知されたのは1950年頃らしい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nとはいえ，少なくとも太陽系を中心とした半径100光年以内に私達が観測可能な「文明」はないだろうとは言われている。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "「機械学習技術の民主化」",
      "section": "remark",
      "description": "こういうのは「文化」が重要なんだよね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/08/ai-drawing/",
      "published": "2022-08-30T10:37:50+00:00",
      "update": "2022-09-03T07:41:00+00:00",
      "content": "AI は「人」ではない まず大前提として，そもそも著作権というのは他者の「表現」を規制することを意図し「作られた権利」であるということ，さらに「表現」と「意匠」は各種知財権の観点では異なるドメインであることは頭に入れておいて欲しい。\nもうひとつの前提として，アウトプットする機械に「権利」は発生しない。\nもう1つの論点が「AI生成物は著作物なのか？」である。著作物であれば、作成者がAIであっても第三者は勝手に利用できない。仮に著作物であるとすると、自動作曲サービスで作成された楽曲の第三者による利用や流通は大幅に制限される。\nこれに対する国際的な通説は「人がコンピューターを道具として使えば著作物」。ただ、創作の主体はあくまで人でなければならない。これは、人がカメラ（という道具）を使って撮影した作品を著作物として扱う考えと近い。逆に、人が主体とならず、ボタン1個で生成されるような楽曲は、著作物ではないとされてきた。\nAIが作ったコンテンツの著作権はどうなる？--福井弁護士が解説する知財戦略 - CNET Japanより 「権利」というのは「（法的な意味での）人」に対して発生するものであり，機械は「人」と認められていない。 ゆえに機械がアウトプットする「著作物」の権利はインプットする（それが著作物なら）著作物の権利者とアウトプットさせる人との関係で発生する，ということになる。\nたとえば美術館に飾ってある絵画をカメラで撮ったら，その写真の権利は絵画の著作（権）者に帰属する（逐次的コピーというやつだ）。 一方，絵画の著作権が期限切れなら写真を撮った人に権利が帰属するかもしれない。\nその上で「〇〇風のデザイン」というときに，それが「〇〇」の翻案と言えるのか，それとも（「表現」ではなく）「意匠」という別ドメインの問題なのか，あるいは全然まったく無問題なのか，といった議論はあっていいと思う。 ちなみに，日本の著作権法に「公正な利用（fair use）」という考え方はないし「権利の制限」は使いどころも制限されている。\nまぁ，実際には（問題・実害があるなら）何らかの訴訟を起こして司法の判断を仰ぐべきだろうけど。 自称専門家の戯言や官僚のご都合主義なガイドラインや合理性に欠く政令に振り回されるべきではない（本来なら）。\nAI を巡る情報の非対称性 以前の「GitHub Copilot は貢献者から貢献を奪うか？」でも少し書いたが， Copilot の問題は学習データのインプットが不透明な点にあると思う。 AI という機械を挟んで情報が非対称になっているわけだ。 コードを AI にぶち込むことで，付随するライセンスやコード貢献1 といった諸々が「洗浄」されてしまう。\nでもこれはプログラム・コードに限った話ではないし，文章や映像・絵画・イラストや音楽などは関係するアクターが分かりやすいので余計に面倒くさくなる。\n出自が不透明な「AI 作品」は，喩えが悪くて申し訳ないが，よく分からない食材で作られた料理みたいなものだ。 個人では食材など気にせず美味ければ食うという人もいるだろうし「無理！」という人もいるだろう。 でも食材の traceability が重視される昨今に於いて「よく分からない食材で作られた料理」というのは社会的には NG だと思う。\n「AI 作品」もそろそろそういうフェーズに入ったのではないか，と私は思うのだがどうだろう。 餓鬼のごとく何でも食わせて「AI ならこんなこともできます」とかいった物言いは通用しなくなってくると思う。\n【2022-09-01 追記】 バイオ氏に協力したウィリソン氏は自身のブログで、「トレーニングに用いられた画像がブラックボックスではなくなることで、AIの倫理問題が難しくなると思います」と語っています。ウィリソン氏によると、トレーニングセット内の各画像が自動生成される画像に対して提供する部分はごくわずかであり、ネットワーク全体に広がる数値の比重を微調整するにすぎません。しかし、データセットとして抽出された元の画像を作成した人は、AIを自身の生活に対する直接的な脅威とみなすことがあるとのこと。ウィリソン氏はそのような感覚の人を「AIヴィーガン」と表現し、ヴィーガンの人を尊重しつつも自身は肉を摂取するように、画像生成AIの価値観を受け入れられない人を尊重しつつも、画像生成AIの素晴らしい可能性を試していきたいという姿勢を示しています 23億枚もの画像で構成された画像生成AI「Stable Diffusion」のデータセットのうち1200万枚がどこから入手した画像かを調査した結果が公開される - GIGAZINEより 結局そこだよなぁ。 なりすましとか絵柄パクとか言い募るほど「要するに『AIに仕事やアイデンティティが奪われる』ことへの恐怖だろう」という感想にしかならない。 まぁ，軽い話ではないが時代の転換点ではよくある話でもある。\n「機械学習技術の民主化」 面白い tweet を見かけた。\nmimicのような物議然り、このフィールドはそれなりに仕組みを応用できる人がPCでも実現できる世界にすでになっているため、恐らく今後もこういうケースは続出するし、多分もう流れをせき止めることはできないと思う。良くも悪くも機械学習技術が民主化されてしまった影響。\n\u0026mdash; Hideki Saito @ メタバース技術者＆Vtuber (@hideki) August 30, 2022 なるほど。 まぁ，悪意や害意を持つ人ならわざわざ mimic のようなサービスを使わなくても自家発電できるよね。\nそう考えると mimic のような事例 は，学習データのインプットを（サービスではなく）ユーザがコントロールでき，かつそれを他者（サービス？）が監視可能という点でまだマシという気がする。 あとは系（システム）全体の透明度をどの程度上げれるかだろう。 透明度を上げていけば周囲が懸念する「絵柄パク」のようなケースも自然に析出される筈。\nでも，こういうのは「文化」が重要なんだよね。 サービスやコミュニティ内で「パクリ上等」みたいな雰囲気が醸成されてしまうと本当にカオスになるし，「パクリ，ダメ，絶対」みたいな規範が育つと（良くも悪くも）同調圧力がかかったりする。\n何度でも言うけど，社会を変えるのはそれを構成する「人」なのよ。 AI お絵描きの明日はどっちだ（笑）\n【2022-08-31 追記】\nmimic はどうやらサービスを停止したらしい。\nStable Diffusion や midjourney に参考画像を渡して生成してもらう機能が炎上しなくて、それらよりも規約で絵師に配慮した mimic が炎上（濡れ衣）した事実、「あえて英語対応Onlyにする事で一定以下の知識階級は切り捨てた方がいい」という前例になってしまわないか？私はそんな世界は嫌だけど。\n\u0026mdash; SUKANEKI／公共政策 (@SUKANEKI_VRC) August 30, 2022 まぁ，日本リージョンではこの話は試合終了ってことで（笑）\n「工学は善の実現」 リスクだけを論って dis ったり禁止しようとするのは野蛮人の所業だ。 かといってベネフィットだけを見てリスクに目を向けないのはお馬鹿だろう。 道具・手段は上手に使ってこそである。 そして「上手に使う」ことを助けるための実装を行うのがエンジニアの仕事である。\n理学は、真理の探究であり、工学は善の実現である。そして、藝術は美の表現である－－これで所謂「真美善」が揃う はやぶさ―不死身の探査機と宇宙研の物語より ブックマーク 画像生成AI「Midjourney」の描いた絵が美術品評会で1位を取ってしまい人間のアーティストが激怒 - GIGAZINE AI自動お絵描き「Stable Diffusion」でゲーム開発用画像の制作に挑戦 - 石田賀津男の『酒の肴にPCゲーム』 - 窓の杜 FOSS プロダクトに参加している人たちには「コードへの貢献」こそを報酬としている人も多い。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "2022-08-28 のブックマーク",
      "section": "bookmarks",
      "description": "「Signal Phone Numbers Exposed in Twilio Hack」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/08/28-bookmarks/",
      "published": "2022-08-28T00:23:23+00:00",
      "update": "2022-09-03T07:41:00+00:00",
      "content": "リリース情報 Release v1.49.0 · golangci/golangci-lint · GitHub Go 言語スプレッドシートライブラリ：Excelize 2.6.1 がリリースされました セキュリティ＆プライバシー関連 車から収集したデータはどこに送られているのか？ - YAMDAS現更新履歴 Twilio Incident: What Signal Users Need to Know – Signal Support Signal says 1,900 users’ phone numbers exposed by Twilio breach – TechCrunch Signal Phone Numbers Exposed in Twilio Hack - Schneier on Security Twilioへのフィッシング攻撃は、多くの二次被害を生む可能性がある | WIRED.jp Ongoing phishing campaign can hack you even when you’re protected with MFA | Ars Technica Man-in-the-Middle Phishing Attack - Schneier on Security ツイッターの内部告発に潜む「セキュリティの深刻な問題」の中身 | WIRED.jp TechCrunch Launches Lookup Tool to Help Android Users Know if Their Device Was Compromised by a Family of Stalkerware Apps | Electronic Frontier Foundation LastPass source code, blueprints stolen by intruder • The Register パスワード管理ツール「LastPass」がハッキングの被害、ソースコードと独自技術が漏洩 - 窓の杜 知財関連 復刻できないあのゲームを合法的にプレイするためのセッションをレポート【CEDEC 2022】 美術と著作権について知っておきたいこと｜美術史（しか勝）たん｜note Azure や Windows に関する話題 Ubuntu20.04にWindows11仮想環境をつくる。Microsoftが無償提供する仮想マシンを使ってみたらこうなった | しずかなかずし Go 言語関連 GitHub - valasek/golang-pwa: Progressive Web App example written in JS with Golang as web server Go Secure Coding Practice の日本語翻訳を公開します - Techtouch Developers Blog GitHub - techtouch-inc/Go-SCP-jaJP: Japanese translated https://github.com/OWASP/Go-SCP/ その他 インターネット・アーカイブのLive Music Archiveが開始20周年とな - YAMDAS現更新履歴 わたしとクレヨン社の32年｜髙橋晃浩｜note パブリケーション機能をクローズドβでリリースします | What\u0026rsquo;s New in Zenn 静かに広がる機械学習の誤用が、科学に「再現性の危機」をもたらしている | WIRED.jp Top Programming Languages 2022 - IEEE Spectrum : IEEE では Python がダントツ？ 求人サイトやソーシャルサイトで人気の高いプログラミング言語がわかる「人気プログラミング言語2022」が発表される - GIGAZINE Xamarin のサポート終了と .NET 統合の話 Xamarinのサポートは2024年5月1日で終了。マイクロソフトが.NET MAUI関連のロードマップを示す － Publickey MySQL互換のスケーラブルな分散DB「TiDB」、スマレジや＠cosmeによる評価は本番環境のDBから移行可能、性能も十分高いと［PR］ － Publickey TexTra、日本語・英語間の翻訳に関してはDeepLと同程度の翻訳精度がある： 無料の国産「TexTra」がスゴイ | ビジネスジャーナル ソフトウェアテスト講義ノオト: ASTERセミナー標準テキストを読み解く | 秋山 浩一 |本 | 通販 | Amazon 金融の基幹システムを1年半かけて.NET 6に移行した話 "
    },
    {
      "title": "インターネット・キルスイッチ",
      "section": "remark",
      "description": "「リヴァイアサン」と「ビヒーモス」の脅威",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/08/kill-switch/",
      "published": "2022-08-25T19:52:14+00:00",
      "update": "2022-08-25T20:05:52+00:00",
      "content": "皆さんは2010年代初頭に起こった「アラブの春」を覚えておいでだろうか。 チュニジアの「ジャスミン革命」に端を発し中東を中心に起こった一連の政変である。\n「アラブの春」では SNS などを使った情報拡散が功を奏したと言われ何故か好意的な評価を受けているが，実際のところ「アラブの春」の一連で政治的に成功したと言えるのは最初のチュニジアの事例だけで，他の国は内戦もしくは内戦一歩手前の状態まで悪化し欧州に多くの難民が押し寄せる事態にまでなった。 更に言えば SNS などのメディアを使えば容易に情報操作と民衆の動員が可能であることが知られてしまい，今現在もインターネットは情報戦の泥沼の中にいる。\n更に更に，別の面でもインターネットの脆弱性が浮き彫りになった。\nもし今日のインターネットが実際にこの理論に近い状態であれば，メッシュネットワークは余計ものだったろう。 だがインターネットが当初の学術目的から踏み出して現在のような誰でも使える商業サービスになってから20年以上が経つうちに，そうした蓄積伝送の原理が果たす役割は，一貫して縮小していった。\nこの間，ネットワークに加わる新たなノードの圧倒的多数はISPを介してネットに接続する家庭や企業のコンピューターだった。 ISPの接続モデルでは，利用者のコンピューターはデータの中継はしない。 それはネットワークの端末，つまりデータの送受信だけを，常にISPのコンピューターを介して行うターミナル・ノードだ。 言い換えれば，インターネットの爆発的な成長はネットワーク地図に行き止まりのルートを増やしただけで，新たなルートを加えることはほとんどなかった。\nそしてISPなど大量の情報ルートを持つ者は，彼らがルートを提供している何百万ものノードを支配下におくこととなった。 これらのノードは，もしISPがダウンしたり，ネットから遮断されたりすると，その障害を回避する方法がない。 ISPはインターネットが停止しないようにするどころか，実効上は停止スイッチになってしまった。 （p.77） 介入されないもうひとつのウェブより というわけで長々と前説を述べたが，今回のケースも「インターネット・キルスイッチ」として深刻な話だと思う。\nプライベートを詮索し、冤罪で通報し、疑いが晴れてなおユーザを罰するGoogle――それを後押しする世界的潮流 | p2ptk[.]org Googleの冤罪通報問題から考える「ビッグテック解体への道筋」 | p2ptk[.]org 最初に挙げた「アラブの春」の例はどちらかと言うと国家が絡んでいるが，今回のケースは私企業が重要なライフラインを握ってしまい，カジュアルに「キルスイッチ」を入れてしまったのが問題と言える。\nつまり、ビッグテックは電気や水道のように、あなたの生活に不可欠な公共事業になることを目指し、そして成功したのだ。だが、彼らはまるで自分たちが単なる一企業であるかのように振る舞い続け、その不可欠さにもかかわらず、紛争（たとえば、異議申立の機会を与えることなくサービスを一方的にキャンセルするなど）は当事者間の問題に過ぎないという態度を取り続けている Googleの冤罪通報問題から考える「ビッグテック解体への道筋」より じゃあ ISP や Google のような企業から「公共事業」的な部分を取り上げてしまえばいいじゃないかと短絡的に考えてしまうが，そう簡単ではなさそうだ。\nたとえば、Facebookの問題は、ザックが30億人のデジタルライフを支配する自称独裁者にふさわしくないから引き起こされているわけではない。問題は、誰であろうとそのような仕事は任せられないということだ。我々は、そのような仕事をなくさねばならないのだ Googleの冤罪通報問題から考える「ビッグテック解体への道筋」より 国家権力によってオンラインプラットフォームの行為に制限を設け（たとえば私訴権を与える強力なプライバシー法を可決することで）、ユーザがどのような選択をするにしても、オンライン企業に搾取されないようにする。そして、国家権力によって相互運用性を保護し、オンラインホストの裁量を気に入らないユーザが、データや社会的つながりを犠牲にすることなく、簡単に離脱できるようにする Googleの冤罪通報問題から考える「ビッグテック解体への道筋」より 最後の「データや社会的つながりを犠牲にすることなく、簡単に離脱できるようにする」ってのが最重要ポイントなんだろう。\n私達庶民から見れば「国家」も「市場」もプライバシーを含めた日常生活を脅かし得る脅威だ。 かといって私達には「リヴァイアサン」や「ビヒーモス」に立ち向かう力（power）は持っていない。 ならば「三十六計逃げるに如かず」あるいは「戦略的撤退」しかない。 そうしたリスクを見込んで「逃げ道」を用意しておくのが肝要だろう。\nまぁ，簡単じゃないというか個人でどうにかなるとは思えないけどね。 やはり「怪獣大決戦」しかないのか。 それとも崑崙山で仙人にでもなるか（笑）\nブックマーク オンライン上のゲートキーピングの歴史(1) : HUSCAP\nオンライン上のゲートキーピングの歴史（2） : HUSCAP\nオンライン上のゲートキーピングの歴史（3・完） : HUSCAP\n“The Shadow Web” （再掲載）\n「情報弱者」を再々定義する\n参考図書 サイバーセキュリティ (別冊日経サイエンス) 日経サイエンス編集部 (編集) 日本経済新聞出版社 2016-04-22 (Release 2016-04-22) ムック 4532512123 (ASIN), 9784532512125 (EAN), 4532512123 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 『日経サイエンス』2012年6月号の「介入されないもうひとつのウェブ」が収録されている。その他にも2010年代前半におけるセキュリティ問題についてよくまとめられている。\nreviewed by Spiegel on 2016-11-05 (powered by PA-APIv5)\nグリゴリの捕縛 白田 秀彰 2001-11-26 (Release 2014-09-17) 青空文庫 4307 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30 (powered by aozorahack)\n【中東大混迷を解く】 サイクス=ピコ協定 百年の呪縛 (新潮選書) 恵, 池内 (著) 新潮社 2016-05-27 単行本（ソフトカバー） 4106037866 (ASIN), 9784106037863 (EAN), 4106037866 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 欧州および中東の近代および現代を「サイクス=ピコ協定」を特異点として網羅的に解説していいる。\nreviewed by Spiegel on 2016-07-02 (powered by PA-APIv5)\nCODE VERSION 2.0 ローレンス・レッシグ (著), 山形浩生 (翻訳) 翔泳社 2007-12-19 (Release 2016-03-14) Kindle版 B01CYDGUV8 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 前著『CODE』改訂版。\nreviewed by Spiegel on 2018-11-17 (powered by PA-APIv5)\n"
    },
    {
      "title": "DRM 制限されているメディアから銭を巻き上げようとする文化庁",
      "section": "remark",
      "description": "「我こそは！」という方は是非パブコメでぶっちゃけちゃってください。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/08/bad-copyright/",
      "published": "2022-08-24T11:17:59+00:00",
      "update": "2022-08-31T08:55:38+00:00",
      "content": "また始まったよ，文化庁。\n「著作権法施行令の一部を改正する政令案」に関する意見募集の実施について｜e-Govパブリック・コメント 唐突すぎるブルーレイへの補償金課金 | YamadaShoji.net で，これ関して電子情報技術産業協会（JEITA）が早速反応している（PDF 注意）。\n意見概要：合理的な理由のない政令案に反対 私的録音録画補償金制度の対象機器にブルーレイレコーダー等を追加指定する政令案に対する JEITA の見解 「見解 」の方には経緯も含めて詳しく解説されているので是非ご覧あれ。\n個人的には\n録画補償金制度の開始から約 10 年で機能停止、それから 10 年が経過しコンテンツ流通形態の多様化など社会環境も大きく変化した現在、あえて 1990 年代の社会環境を背景に制度設計された 20 年以上前の仕組みをそのままに、今回対象の機器追加を行うことの必要性や合理性が、何も示されていない 私的録音録画補償金制度の対象機器にブルーレイレコーダー等を追加指定する政令案に対する JEITA の見解より 判決で「著作権保護技術が伴っているか否かは、補償金の対象とするか否かにおいて大きな要素」と判示されたにも関わらず、「ブルーレイレコーダー」に DRM 技術が搭載されていることが要素として全く考慮されていない 私的録音録画補償金制度の対象機器にブルーレイレコーダー等を追加指定する政令案に対する JEITA の見解より というのは全く以ってそのとおりだと思う。 つか，今更ブルーレイかよって感じなのだが。 テレビ番組なんか「録画」しなくてもネットで合法的に見れるだろ。 パソコン買ったときも BDD は意図的に避けたし。 Mac とかそもそもディスク・ドライブがない。 ストレージとしては「円盤」はもうオワコンだよ。 それとも文化庁は BD を市場から駆逐したいのかな。 漢は黙って外付け SSD（笑）\nもしかしたら私のように思ってる人が多いと見込んで「今ならゴリ押しできる」とでも考えているのかね。\n今からブルーレイレコーダーは買わないからいいや、と思われるかもしれないが、対象の指定に関係各所の合意形成は不要ということになれば、今後どう拡大されるか分からない。「実はハンドルもブレーキもいらなかったです」という話だからである 「ブルーレイに補償金」の筋が悪い理由　“中の人”が解説（1/3 ページ） - ITmedia NEWSより 私は3年前から「政治的無関心」を年間目標にしているのでこれ以上ツッコまないが「我こそは！」という方は是非パブコメでぶっちゃけちゃってください（締切は 2022-09-21）。 まぁ，文化庁が「関係各所の合意形成は不要」と考えているならどんなパブコメを書いても無視される可能性が高いけど。 つくづく日本は法治国家じゃないんだねぇ。\nブックマーク JEITA「強く反対する」。BDレコーダ私的録音録画補償金制度対象化 - AV Watch 参考図書 著作権は文化を発展させるのか: 人権と文化コモンズ 山田 奨治 (著) 人文書院 2021-07-29 (Release 2021-07-29) Kindle版 B099RTG3J7 (ASIN) 2021年夏に出てたのだが，仕事が忙しくなってすっかり忘れていた。これから読みます。\nreviewed by Spiegel on 2021-12-06 (powered by PA-APIv5)\n〈海賊版〉の思想‐18世紀英国の永久コピーライト闘争 山田 奨治 (著) みすず書房 2007-12-20 単行本 4622073455 (ASIN), 9784622073451 (EAN), 4622073455 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「コピーライト永久独占を目論む大書店主に挑む〈海賊出版者〉ドナルドソンの肖像。法廷闘争を軸に著作権を史的に考察する。」（帯文より）\nreviewed by Spiegel on 2018-11-13 (powered by PA-APIv5)\n〈反〉知的独占　―特許と著作権の経済学 ミケーレ・ボルドリン (著), デイヴィッド・Ｋ・レヴァイン (著), 山形浩生 (翻訳), 守岡桜　(翻訳) NTT出版 2010-10-22 単行本 4757122349 (ASIN), 9784757122345 (EAN), 4757122349 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「知的財産権は、人類進歩を阻害する！」（帯文より）\nreviewed by Spiegel on 2018-11-17 (powered by PA-APIv5)\n"
    }
  ]
}
