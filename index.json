{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "2019-06-09 のブックマーク",
      "section": "bookmarks",
      "description": "「なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/06/09-bookmarks/",
      "published": "2019-06-09T05:14:07+00:00",
      "update": "2019-06-09T05:17:29+00:00",
      "content": " リリース情報  Highlights from Git 2.22 - The GitHub Blog  バベルのインターネット  オンライン上のテロリズムと暴力的過激主義に対して行動するためのクライストチャーチ・コール（和訳） – P2Pとかその辺のお話R : うわぁ  セキュリティ＆プライバシー関連  Effective Cybersecurity and Data Protection Legislation Should Protect Whistleblowers | Compliance and Enforcement  The Importance of Protecting Cybersecurity Whistleblowers - Schneier on Security  米国務省は入国ビザ申請にSNSアカウントまで求めはじめた | TechCrunch Japan The Cost of Cybercrime - Schneier on Security MIT Tech Review: 2048ビットRSA暗号は量子コンピューターでいつ破られるか？ Firefoxがユーザーを追跡から護る機能を強化しパスワードマネージャーをデスクトップに導入 | TechCrunch Japan  「Firefox」がサードパーティー製Cookieをデフォルトブロックへ ～v67.0.1をリリース - 窓の杜 Mozilla、「Firefox Lockwise」を発表 ～パスワードをよりスマートに管理 - 窓の杜  MIT Tech Review: 相次ぐ半導体の脆弱性で 明るみになった パッチ「遅すぎる」問題 Chinese Military Wants to Develop Custom OS - Schneier on Security 「プライバシー」について企業が押さえるべきポイント--ガートナーが解説 - ZDNet Japan マルウェア感染によるPayPayアカウントの不正利用についてまとめてみた - piyolog アップルは子ども向けのiPhoneアプリの広告とサードパーティ製トラッカーを規制 | TechCrunch Japan インド最大のビデオストリーミングサービスがセキュリティ欠陥のためSafariのサポートを停止 | TechCrunch Japan iOS 12 Shortcut uses iPhone to record police during traffic stop - Business Insider  iOS Shortcut for Recording the Police - Schneier on Security   天文関連  NASAは月に機材を運ぶ初めての民間企業を選出 | TechCrunch Japan  知財関連  Napster公開から20年、いまなお残るその影響 – P2Pとかその辺のお話R RapidVideo、著作権リスク軽減のため海賊版サイトからのアクセスを遮断 – P2Pとかその辺のお話R 脅し気味の公共広告に海賊版を抑止する効果はあるのだろうか – P2Pとかその辺のお話R 小学館がDMCA召喚令状を取得、YouTubeに海賊版マンガ動画アップローダーの情報開示を求める – P2Pとかその辺のお話R  Linux または Ubuntu に関する話題  LibreOffice 6.3 on Linux, a statement - The Document Foundation Blog  その他  台湾フォックスコンが中国ファーウェイ端末の生産ラインを一部停止 | TechCrunch Japan Pivotal、OpenJDKディストリビューションやSpring Frameworkの商用サポートを含む「Pivotal Spring Runtime」リリース － Publickey NTPサーバと同期する「NTPクロック」に無線LAN＆電池駆動の新モデルが登場。配線不要で普通の掛け時計のように設置可能 － Publickey 「予想を超えて売れている」　超小型スマホ「Palm Phone」投入の背景をFOXに聞く (1/2) - ITmedia Mobile Angular 8正式版リリース。高速レンダリングエンジン「Ivy」、モダンブラウザ用と非モダンブラウザ用のJSコードを動的に使い分ける「Differential Loading」など － Publickey メーリングリストの老舗「freeml」終了　22年の歴史に幕 - ITmedia NEWS 劉慈欣の話題の『三体』と「暗い森」になりつつあるインターネット - YAMDAS現更新履歴 MIT Tech Review: その統計に疑念あり、米ネット中立性規則巡るFCCの主張に批判 Apple、「macOS Catalina」「iOS 13」を発表 ～新OS「iPadOS」もお披露目 - 窓の杜 Apple、新フレームワーク「Swift UI」発表。簡潔なコードとドラッグ＆ドロップでUIを構築、デバイスでの即時プレビュー。WWDC19 － Publickey MIT Tech Review: 自動化が生む新たな貧困 「ゴーストワーク」は 他人事ではない MIT Tech Review: 「全廃」のはずのフロンが中国で増加、国際協定の限界露呈 MIT Tech Review: 唐突な「北京AI原則」発表は何を意味するのか？ MIT Tech Review: 伊藤穰⼀、レッシグらとデータ活用の未来を考えるカンファレンス ［速報］マイクロソフトとオラクル、クラウドの相互接続で合意。クロスクラウドのシングルサインオン、AzureからOracle Cloud Databaseへの接続などが可能に － Publickey Google CloudやYouTubeの障害は「数台のサーバへの設定変更のつもりが、誤って複数リージョンの多数のサーバに適用されてしまった」。Googleが説明 － Publickey MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明  囚人のジレンマゲームでの読み合いによる搾取の安定的発生  オープンなプロセッサやハードウェアの開発を促進する「OpenHW」グループ発足。RISC-VベースのSoC対応「CORE-Vファミリー」発表 － Publickey Bringing TLS 1.3 to Haskell - あどけない話 スタンディングデスクには意味がない？ 座りすぎと健康の関係を研究してわかった「もっと重要なこと」｜WIRED.jp 偉大なる変人アラン・チューリング、死後半世紀を経てついに訃報記事が掲載される | ナゾロジー  "
    },
    {
      "title": "「新暦七夕」なるものは存在しない",
      "section": "remark",
      "description": "2019年の伝統的七夕は8月7日。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/traditional-tanabata/",
      "published": "2019-06-09T03:24:09+00:00",
      "update": "2019-06-09T05:21:33+00:00",
      "content": "そろそろ七夕について言及される季節ですかねぇ。\n 【特集】七夕／伝統的七夕（2019年） - アストロアーツ  この記事を見て「新暦七夕」なる単語が気になった。 きっと「伝統的七夕」の対義語として考えた造語だろうが「なんだかなぁ」というセンスである。\nいわゆる「五節句（人日 (じんじつ) ，上巳 (じょうし) ，端午 (たんご) ，七夕 (しちせき) ，重陽 (ちょうよう) ）」は江戸幕府によって定められたそうだが「明治の改暦」で廃止された。 なので現行歴には七夕を含む五節句は，公式には，存在しない。\nただし，盂蘭盆と同じく五節句も民間信仰として深く浸透していたため改暦後も廃れることなく残っている。 もっとも現行歴に無理やり日付を合わせて祝ったり「月遅れ」で祝ったりと地域によって差異があるが1。\nちなみに私は田舎の子なので，正月の「人日（七草）」以外は月遅れで祝っていた。 今はメディアの発達のせいか田舎のそういった風習は塗り潰されてしまっているらしく「月遅れ」はなくなっているっぽい。\n七夕に関して言うと現行歴の7月7日は日本の多くの地域で梅雨 (雨期) まっ盛りだったりするので，いわゆる「織姫・彦星伝説」にそぐわない天候である。 そこで国立天文台では夏（休み）にもっと星に親しんでもらうため「伝統的七夕」を定義した。 内容は以下の通り。\n  二十四節気の処暑（しょしょ＝太陽黄経が150度になる瞬間）を含む日かそれよりも前で、処暑に最も近い朔（さく＝新月）の瞬間を含む日から数えて7日目が「伝統的七夕」の日です。  via 質問3-10）伝統的七夕について教えて | 国立天文台(NAOJ)  この定義は，なるべく明治の改暦以前の暦（太陰太陽暦）の七夕に近い日が伝統的七夕となるよう調整されている2。 たとえば2019年の処暑は8月23日で「処暑に最も近い朔」は8月1日なので伝統的七夕は8月7日ということになる3。\nなお伝統的七夕とは別に毎年8月最初の1週間は「スター・ウィーク」として日本各地で星に関するイベントが行われている。 2019年のキャッチフレーズは\n「好きな星を 見つけませんか」\nだそうだ。 上手い具合に日程が伝統的七夕と被るので，併せて楽しんでいただければと思う。 スター・ウィークの後はペルセウス座流星群が待ってるぞ！\n 天文年鑑 2019年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2018-11-21 Book 単行本 ASIN: 4416718020, EAN: 9784416718025 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2019年版。\nreviewed by Spiegel on 2018-11-23 (powered by amazon-item 0.2.1)\n  猫暦 ねこしみず美濃  Collections Kindle版 ASIN: B07BNZQSZZ 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「寛政の改暦」のころの伊能勘解由（忠敬）とその妻とされる「おえい」の物語。感想はこちら。\nreviewed by Spiegel on 2019-01-07 (powered by amazon-item v0.2.0)\n  7月7日、晴れ DREAMS COME TRUE (メインアーティスト) Sony Music Labels Inc. 1996-04-01 (Release 2014-04-01) Digital Music Track MP3 ダウンロード ASIN: B00FXUQGN2 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ドリカムで唯一持ってる楽曲。大きな声では言えないが，個人的には失恋ソングである（笑）\nreviewed by Spiegel on 2019-06-09 (powered by amazon-item 0.2.1)\n  明治の改暦以前は民間歴を含めて様々な暦が乱立していたそうなので，この程度の差異は差異に入らないかもしれないが（笑） [return] 現在「旧暦」と呼ばれているものは江戸時代の「天保暦」がベースになっていると言われているが，当時と今では天文観測基準が異なるため，厳密には「天保暦」を再現できているとは言えない。実際の「旧暦」の運用は現行歴の暦象（朔望月や二十四節気等）を元に「天保暦」のルールを当てはめて運用しているらしい。なので「旧暦2033年問題」みたいなことも起こったりする。 [return] 日本では国立天文台が毎年2月1日に翌年の暦要項を公表する。なお伝統的七夕は雑節にも入らないので暦要項には載っていない。キャンペーン・イベントみたいなものだからね。 [return]   "
    },
    {
      "title": "Map は連想配列ではなく連想配列への「参照」である",
      "section": "golang",
      "description": "いかに参照っぽく振る舞っていようとも Go 言語でやり取りできるのはあくまでも「値」であり，その「値」が何を指しているかを考えながらコードを書いていく必要がある。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/map-as-a-associative-array/",
      "published": "2019-06-07T14:07:39+00:00",
      "update": "2019-06-07T14:09:41+00:00",
      "content": " 今回は小ネタで。 つか，だいぶフワッとした話になるので，その辺は割引いて読んでいただけるとありがたい。\nいやね。\n Goのスコープに苦しんだ事例集 - Qiita  の「事例その１」で\ntype hogehoge map[string]string func (h *hogehoge) Seter(p string) { h = \u0026amp;hogehoge{ \u0026#34;key\u0026#34;: p, } } func main() { var f hogehoge f.Seter(\u0026#34;ddd\u0026#34;) fmt.Println(f) // \u0026lt;- nil } というコードを書いておられて，言わんとすることは分かるけど事例に map を使うのは混乱を助長しないかなぁ，と思ってしまったのだ。 そこでこの記事では主に map の振る舞いにピントを合わせて説明していこう。\nMap は連想配列ではなく連想配列への「参照」である のっけからぶっちゃけるが，要するにそういうことである。 もう少し厳密に言うと「Map は連想配列への「参照」のように振る舞う」といったところか。\nこれを端的に表すコードがこれ。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func main() { kv := KeyValues{\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } これを実行すると\n0x40c128: 0x43e260: map[foo:bar] などと表示される。\n最初の値がインスタンス kv のポインタ値，次の値が kv が参照する連想配列のポインタ値，最後が kv の内容と考えれば分かりやすいだろう。\nGo 言語において関数の引数は「値渡し」なので... 型 KeyValues にひとつ関数を追加してみよう。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func (kv KeyValues) Set(k, v string) { kv[k] = v fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } func main() { kv := KeyValues{} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) kv.Set(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;) fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } これを実行すると\n0x40c128: 0x43e260: map[] 0x40c138: 0x43e260: map[foo:bar] 0x40c128: 0x43e260: map[foo:bar] となる。\nポイントは2行目で main() 関数内のインスタンス kv と KeyValues.Set() 関数のメソッド・レシーバの kv は異なるポインタ値になっているので異なるインスタンスだと分かるが，参照している連想配列（へのポインタ）は同一である。\nもっと簡単なコードで示そうか。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func main() { kv := KeyValues{\u0026#34;foo\u0026#34;: \u0026#34;bar\u0026#34;} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) cpy := KeyValues{} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;cpy, cpy, cpy) cpy = kv fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;cpy, cpy, cpy) } これを実行すると\n0x40c128: 0x43e260: map[foo:bar] 0x40c148: 0x43e2a0: map[] 0x40c148: 0x43e260: map[foo:bar] となる。 つまり map は連想配列への参照なので，連想配列そのものは宣言構文（:=）や代入構文（=）では複製できない，ということである1。\nそれでもポインタは「参照」ではない じゃあ，先ほどの KeyValues.Set() 関数のメソッド・レシーバをポインタ型にするとどうなるか，やってみよう。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func (kv *KeyValues) Set(k, v string) { (*kv)[k] = v fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, kv, *kv, *kv) } func main() { kv := KeyValues{} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) kv.Set(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;) fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } これを実行すると\n0x40c128: 0x43e260: map[] 0x40c128: 0x43e260: map[foo:bar] 0x40c128: 0x43e260: map[foo:bar] となる。\nmain() 内のインスタンス kv はポインタ型ではないが KeyValues.Set() 関数呼び出し時に暗黙的な変換が行われる。 このため KeyValues.Set() 関数のメソッド・レシーバの kv は main() 内のインスタンス kv と同一のインスタンスになるわけだ。\nでは調子に乗ってこんな関数を作ってみよう。\nfunc (kv *KeyValues) Initialize(k, v string) { kv = \u0026amp;KeyValues{k: v} } KeyValues.Initialize() 関数のメソッド・レシーバは呼び出し元のインスタンスと同一なんだから，これで初期化できるんじゃね？ というわけだ。\nプログラム全体はこんな感じ。 これでようやく最初に紹介したコードにほぼ近い形になっただろう。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func (kv *KeyValues) Initialize(k, v string) { kv = \u0026amp;KeyValues{k: v} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, kv, *kv, *kv) } func main() { kv := KeyValues{} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) kv.Initialize(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;) fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } まぁ動かしてみよう（笑）\n0x40c128: 0x43e260: map[] 0x40c138: 0x43e2a0: map[foo:bar] 0x40c128: 0x43e260: map[] ちょっと考えれば分かるのだが， KeyValues.Initialize() 関数のメソッド・レシーバに渡されるのはポインタ「値」なので，それを関数内で上書きしたところで呼び出し元の main() 関数には全く影響ないのである。\nこれが「Go 言語に『参照』は存在しない」ということの意味である。 いかに参照っぽく振る舞っていようとも Go 言語でやり取りできるのはあくまでも「値」であり，その「値」が何を指しているかを考えながらコードを書いていく必要がある。\nたとえば先ほどの KeyValues.Initialize() 関数を以下のように書き換えればまた挙動が変わる。\npackage main import \u0026#34;fmt\u0026#34; type KeyValues map[string]string func (kv * KeyValues) Initialize(k, v string) { * kv = KeyValues{k: v} \tfmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, kv, * kv, * kv) } func main() { kv := KeyValues{} fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) kv.Initialize(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;) fmt.Printf(\u0026#34;%p: %p: %v\\n\u0026#34;, \u0026amp;kv, kv, kv) } これを実行すると\n0x40c128: 0x43e260: map[] 0x40c128: 0x43e2a0: map[foo:bar] 0x40c128: 0x43e2a0: map[foo:bar] となる。 なにがどう違うのか考えてみよう。 ここまでくれば簡単だよね（笑）\nブックマーク  Map の話  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  Go 言語においては宣言や代入は式（expression）ではなく構文（statement）であり := や = は演算子ではなく構文を構成する（var とかと同じ）トークンに過ぎない。ちなみに ++ や -- も演算子ではなく代入構文のトークンである。 [return]   "
    },
    {
      "title": "「のぼる ほし」",
      "section": "remark",
      "description": "「なぜなら そういう思いまで失くしてしまったら その子の人生が否定されてしまうと考えるからだ」",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/rising-star/",
      "published": "2019-06-05T09:48:35+00:00",
      "update": "2019-06-05T09:49:17+00:00",
      "content": " 日本の年金制度は「積立貯金」ではない。 そして「児童世代」「就労世代」「高齢者（リタイア）世代」がバランスよく構成される，詳しく言うと「合計特殊出生率が人口置換水準付近で長期安定している」ことが制度を維持する大前提である。 もちろん今は合計特殊出生率が人口置換水準を大きく下回っている状態で，今から頑張ってもおそらく数十年単位で人口置換水準まで復帰することはないだろう。 つまり年金制度の破綻は（制度設計を全く別のものに入れ替えない限り）確定事項なのだ。\nそういう意味で「人生100年時代」は（語られる内容の是非はともかく）めがっさリアルな話であり，それを受け入れられないというのならこの国から逃げるしかない。 できれば就労世代に達する前に。\nとまぁ暗い話ばかりしていても仕方ないので，ポジティブ思考に切り替えよう。\n 転職1年目の僕から、就職1年目の君へ｜塚本 牧生｜note  この記事の最後の方を引用するのはネタバレちっくで気が引けるが，でもやはり重要な部分なので引用してしまおう。\n  君もいずれ突入する「人生100年時代」に生涯現役であるということは、つまり100歳まで若くあること、学ぶことをやめない者であることだ。それを働き方にあてはめれば、学びをやめても食べていける100年雇用を得ることより、学びなおしを続けられる100年人材であることのを目指すことなんじゃないかな。  via 転職1年目の僕から、就職1年目の君へ  この記事を読んで思い出したのは，最近読んだ『ヒトラーと哲学者』である。 といっても本編ではなく「訳者あとがき」に書かれていた以下のフレーズだ。\n  〈本を読んだ〉とは〈本を読むのをやめた〉と同義である  via 『ヒトラーと哲学者』訳者あとがき  「本を読む」を「理解する」とか「学ぶ」とかに置き換えて読むと最初の引用とよく似ていることが分かるだろう。 これに結城浩さんの『数学ガール』に出てくるあの名台詞\n  僕たちは好きで学んでいる。 先生を待つ必要はない。授業を待つ必要はない。 本を探せばいい。本を読めばいい。 広く、深く、ずっと先まで勉強すればいい  via 数学ガール  を組み合わせれば最強の呪文になる（笑）\nしかし私達が持ち合わせている時間は有限で，しかもその多くは「日常生活」に塗り潰されている。\n  それでもそういう願いだけは持っているんだ\nなぜなら\nそういう思いまで失くしてしまったら\nその子の人生が否定されてしまうと考えるからだ  via 『That\u0026#39;s! イズミコ』 4 「のぼる ほし」  だから，周りが変わっても自分が変わっても，学ぶこと理解を進めることをやめてはいけない。\n参考図書  ヒトラーと哲学者: 哲学はナチズムとどう関わったか イヴォンヌ シェラット 三ッ木 道夫 (翻訳), 大久保 友博 (翻訳) 白水社 2015-01-22 Book 単行本 ASIN: 4560084122, EAN: 9784560084120 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ナチス・ドイツ時代の哲学史物語という感じ。哲学（者）がヒトラーおよびナチス・ドイツにどのような影響を与えたか，またヒトラーおよびナチス・ドイツが哲学（者）にどのような影響を与えたかを物語風に編み上げていく。\nreviewed by Spiegel on 2019-06-05 (powered by amazon-item 0.2.1)\n  数学ガール 結城 浩 SBクリエイティブ 2007-06-26 (Release 2014-03-12) eBooks Kindle版 ASIN: B00EYXMA9I 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ミルカさんとの衝撃の encounter。数学ガールがワルツを踊る。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  That's! イズミコ ベスト (Fukkan.com) 大野安之 復刊ドットコム 2013-06-18 Book コミック ASIN: 4835449517, EAN: 9784835449517 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  これには「バイ・ポーラー」は収録されてないんだよなぁ。でも「のぼる ほし」とか「CONFUSION」とか好きな作品も入ってるので無問題。\nreviewed by Spiegel on 2014-12-01 (powered by amazon-item 0.2.1)\n  少年の夢は生きている’89 ダブリューイーエー・ジャパン (Release 1992-04-25) Music CD ASIN: B00005HFJQ, EAN: 4988014706469 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  お気に入りのアルバムのひとつ。残念ながら引っ越しで処分しちゃったけど。\nreviewed by Spiegel on 2019-06-05 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "そろそろ Vuls を唱えるか",
      "section": "remark",
      "description": "セットアップ自体はうまく行ったが，このままでは使えないなぁ。しょうがない。少しずつ調べてみるか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/cast-vuls/",
      "published": "2019-06-02T13:22:06+00:00",
      "update": "2019-06-02T13:22:42+00:00",
      "content": " Ubuntu 関連の脆弱性情報は以下のサイトで収集できる。\n Debian -- Security Information Ubuntu security notices  これらのサイトの脆弱性情報はとても有用なのだが，パッケージ単位の情報なのでパッケージ間の依存関係が分かってないと何がどう影響するか分かりにくい。 更に上のサイトを見ただけでは深刻度が分からない（CVE 番号から調べることは可能）。 更に更に言うと Ubuntu の各パッケージは古いバージョンに対してバックポートティングをかけて脆弱性を手当している場合もあり，パッケージのバージョン番号を見ただけでは分かりにくかったりする。\nつまり CVE や OVAL や各ディストリビューションが提供する情報を統合管理する必要があるのだが，手動でこれをやるのは骨が折れる。 今回は個人のデスクトップ PC だけだから管理も比較的楽だけど，複数のサーバ（クラウド環境も併せて）を管理するとか気が遠くなる。 つか，もはや手動で管理とかあり得ないだろう。\nというわけで，そろそろ Vuls を唱えてみるか。\nVuls とは  Vuls · Agentless Vulnerability Scanner for Linux/FreeBSD  Vuls は脆弱性の検知を行うツールで，ほぼ Go 言語で組まれているのが特徴である。 複数のサーバに対して脆弱性の有無を一括スキャンすることが可能という実にサーバ管理者に優しいつくりになっている。\n future-architect/vuls: Agent-less vulnerability scanner for Linux/FreeBSD/WordPress/Programming language libraries/Network devices  Vuls 本体はシングル・バイナリだが CVE や OVAL などの脆弱性情報を収集するツール群と組み合わせて使うことを前提としている。 また最近では Vuls を含むツール群を SaaS 化した FutureVuls なる商用サービスも登場している。\n FutureVuls - Vulsクラウドサービス [Vuls SaaS]  今回は Vuls の基本機能でローカル PC の脆弱性管理を行ってみたいと思う。\n【前準備】 ディレクトリの作成 まず前準備として Vuls を含むツール群が出力するデータベースを置くディレクトリ ~/vuls を作成しておく。\n$ mkdir ~/vuls 次に各ツールが吐き出すログの出力先ディレクトリを作っておく。\n$ sudo mkdir /var/log/vuls $ sudo chown username:username /var/log/vuls $ sudo chmod 700 /var/log/vuls$ sudo mkdir /var/log/gost $ sudo chown username:username /var/log/gost $ sudo chmod 700 /var/log/gost$ sudo mkdir /var/log/go-exploitdb $ sudo chown username:username /var/log/go-exploitdb $ sudo chmod 700 /var/log/go-exploitdb CVE 情報の収集 CVE 情報の収集には go-cve-dictionary を使う。\ngo-cve-dictionary のセットアップ ソースコードからのインストール方法については色々説明があるが，最近のバージョンはバイナリも提供しているようである。\n Releases · kotakanbe/go-cve-dictionary · GitHub  これをありがたく使わせてもらおう。 いやぁ Go 言語のツールは取り回しが楽でいいね。\ngo-cve-dictionary による CVE 情報の収集 たとえば2002年以降の CVE 情報を収集し SQLite のデータベースファイル ~/vuls/cve.sqlite3 へ格納するには以下の一行スクリプトを実行する。\n$ for i in `seq 2002 $(date +\u0026#34;%Y\u0026#34;)`; do go-cve-dictionary fetchnvd -dbpath ~/vuls/cve.sqlite3 -years $i; done ものごっつ時間がかかるので，ここらでお茶の時間にしよう。\nOVAL 情報の収集 OVAL 情報の収集には goval-dictionary を使う。\ngoval-dictionary のセットアップ goval-dictionary もバイナリがリリースされているのだが，バイナリ・リリースされているバージョンでは Ubuntu 19 に対応していないようなので，最新ソースを取ってきてビルドする必要がある。\n$ cd $GOPATH/src/github.com/kotakanbe $ git clone https://github.com/kotakanbe/goval-dictionary.git $ cd gost/ $ make install 実行モジュールは $GOPATH/bin ディレクトリにインストールされる。\ngoval-dictionary による OVAL 情報の収集 ディストリビューションおよびそのバージョンごとに OVAL 情報を収集する。 たとえば Ubuntu なら\n$ goval-dictionary fetch-ubuntu -dbpath ~/vuls/oval.sqlite3 12 14 16 18 19 などとする。 他にも fetch-alpine, fetch-amazon, fetch-debian, fetch-oracle, fetch-redhat, fetch-suse といったディストリビューションに対応している。\nディストリビューション別セキュリティ情報の収集 ディストリビューション毎のセキュリティ情報の収集には gost (go-security-tracker) を使う。\ngost のセットアップ gost はソースコードのみのリリースなのでビルドを行う。\n$ cd $GOPATH/src/github.com/knqyf263 $ git clone https://github.com/knqyf263/gost.git $ cd gost/ $ make install 実行モジュールは GOPATH/bin ディレクトリにインストールされる。\ngost によるセキュリティ情報の収集 gost では redhat, debian, microsoft のセキュリティ情報の収集を行う。\n$ gost fetch debian --dbpath ~/vuls/gost.sqlite3 Ubuntu のセキュリティ情報収集については TODO 扱いになっているようだ。 今後に期待しよう。\nExploit 情報の収集 Exploit 情報の収集には go-exploitdb を使う。\ngo-exploitdb のセットアップ go-exploitdb はソースコードのみのリリースなのでビルドを行う。\n$ cd $GOPATH/src/github.com/mozqnet $ git clone https://github.com/mozqnet/go-exploitdb.git $ cd go-exploitdb/ $ make install 実行モジュールは GOPATH/bin ディレクトリにインストールされる。\ngo-exploitdb によるセキュリティ情報の収集 go-exploitdb では awesomepoc, exploitdb, githubrepos を対象に Exploit 情報の収集を行う。\n$ go-exploitdb fetch exploitdb --dbpath ~/vuls/go-exploitdb.sqlite3 Vuls でローカル PC をスキャンする さて，いよいよ Vuls を唱えるときが来た（笑）\nVuls のセットアップ Vuls はバイナリがリリースされている。\n Releases · future-architect/vuls  ありがたや。\n次にスキャン対象のマシンへのアクセスを定義する ~/vuls/config.toml 設定ファイルを作成する。 今回はローカル PC のみのスキャンなので以下のような記述にする。\n[servers] [servers.localhost] host = \u0026#34;localhost\u0026#34; port = \u0026#34;local\u0026#34; スキャン対象は複数指定可能で，たとえば対象に ssh 接続する場合は以下のような内容になるようだ。\n[servers.remotehost] host = \u0026#34;remotehost\u0026#34; port = \u0026#34;22\u0026#34; user = \u0026#34;username\u0026#34; keyPath = \u0026#34;/home/username/.ssh/id_rsa\u0026#34; 設定が正しいかどうかチェックしておこう。\n$ cd ~/vuls $ vuls configtest [Jun 2 18:07:05] INFO [localhost] Validating config... [Jun 2 18:07:05] INFO [localhost] Detecting Server/Container OS... [Jun 2 18:07:05] INFO [localhost] Detecting OS of servers... [Jun 2 18:07:05] INFO [localhost] (1/1) Detected: localhost: ubuntu 19.04 [Jun 2 18:07:05] INFO [localhost] Detecting OS of containers... [Jun 2 18:07:05] INFO [localhost] Checking Scan Modes... [Jun 2 18:07:05] INFO [localhost] Checking dependencies... [Jun 2 18:07:05] INFO [localhost] Dependencies... Pass [Jun 2 18:07:05] INFO [localhost] Checking sudo settings... [Jun 2 18:07:05] INFO [localhost] sudo ... No need [Jun 2 18:07:05] INFO [localhost] It can be scanned with fast scan mode even if warn or err messages are displayed due to lack of dependent packages or sudo settings in fast-root or deep scan mode [Jun 2 18:07:05] INFO [localhost] Scannable servers are below... localhost  んー，エラーにはなっていないみたいだし，こんな感じでいいのかな。\nVuls でローカル PC をスキャンする configtest も問題なさそうだし，実際にスキャンをかけてみよう。\n$ cd ~/vuls $ vuls scan [Jun 2 20:24:26] INFO [localhost] Start scanning [Jun 2 20:24:26] INFO [localhost] config: /home/username/vuls/config.toml [Jun 2 20:24:26] INFO [localhost] Validating config... [Jun 2 20:24:26] INFO [localhost] Detecting Server/Container OS... [Jun 2 20:24:26] INFO [localhost] Detecting OS of servers... [Jun 2 20:24:26] INFO [localhost] (1/1) Detected: localhost: ubuntu 19.04 [Jun 2 20:24:26] INFO [localhost] Detecting OS of containers... [Jun 2 20:24:26] INFO [localhost] Checking Scan Modes... [Jun 2 20:24:26] INFO [localhost] Detecting Platforms... [Jun 2 20:24:27] INFO [localhost] (1/1) localhost is running on other [Jun 2 20:24:27] INFO [localhost] Scanning vulnerabilities... [Jun 2 20:24:27] INFO [localhost] Scanning vulnerable OS packages... [Jun 2 20:24:27] INFO [localhost] Scanning in fast mode One Line Summary ================ localhost\tubuntu19.04\t2173 installed To view the detail, vuls tui is useful. To send a report, run vuls report -h. よしよし。 うまく行ったようである。\nスキャン結果を簡易表示してみよう。\n$ cd ~/vuls $ vuls report -format-one-line-text [Jun 2 20:30:18] INFO [localhost] Validating config... [Jun 2 20:30:18] INFO [localhost] Loaded: /home/username/vuls/results/2019-06-02T20:30:15+09:00 [Jun 2 20:30:18] INFO [localhost] Validating db config... INFO[0000] -cvedb-type: sqlite3, -cvedb-url: , -cvedb-path: /home/username/vuls/cve.sqlite3 INFO[0000] -ovaldb-type: sqlite3, -ovaldb-url: , -ovaldb-path: /home/username/vuls/oval.sqlite3 INFO[0000] -gostdb-type: sqlite3, -gostdb-url: , -gostdb-path: /home/username/vuls/gost.sqlite3 INFO[0000] -exploitdb-type: sqlite3, -exploitdb-url: , -exploitdb-path: /home/username/vuls/go-exploitdb.sqlite3 INFO[06-02|20:30:18] Opening DB. db=sqlite3 INFO[06-02|20:30:18] Migrating DB. db=sqlite3 INFO[06-02|20:30:18] Opening Database. db=sqlite3 INFO[06-02|20:30:18] Migrating DB. db=sqlite3 [Jun 2 20:30:18] INFO [localhost] OVAL is fresh: ubuntu 19.04 [Jun 2 20:30:26] INFO [localhost] localhost: 220 CVEs are detected with OVAL [Jun 2 20:30:26] INFO [localhost] localhost: 0 CVEs are detected with CPE [Jun 2 20:30:26] INFO [localhost] localhost: 0 CVEs are detected with GitHub Security Alerts [Jun 2 20:30:26] INFO [localhost] localhost: 0 unfixed CVEs are detected with gost [Jun 2 20:30:26] INFO [localhost] Fill CVE detailed information with CVE-DB [Jun 2 20:30:27] INFO [localhost] Fill exploit information with Exploit-DB [Jun 2 20:30:27] INFO [localhost] localhost: 13 exploits are detected [Jun 2 20:30:27] INFO [localhost] localhost: en: 0, ja: 0 alerts are detected One Line Summary ================ localhost\tTotal: 220 (High:26 Medium:172 Low:22 ?:0)\t0/220 Fixed\t2173 installed\t13 exploits\ten: 0, ja: 0 alerts ありゃりゃ。 最新状態にしているにも関わらず220もひっかかるとか。\nもう少し詳細に見るには TUI モードにするとよい1。\n$ cd ~/vuls $ vuls tui  うーむ。 どうも report がまともに機能してないっぽい？ これってやっぱ gost が Ubuntu に対応してないせいなのかな（状態のほぼ全てが unfixed になっている）。\nこのままではちょっと使えないなぁ。 しょうがない。 少しずつ調べてみるか。\n今回はここまで。\nブックマーク  あなたのサーバは本当に安全ですか？今もっともイケてる脆弱性検知ツールVulsを使ってみた - Qiita FutureVuls(脆弱性管理サービス) Advent Calendar 2018 - Qiita Tutorial - Local Scan Mode · Vuls   TUI モードを終了するには ctrl+c を入力すれば良い。 [return]   "
    },
    {
      "title": "2019-06-02 のブックマーク",
      "section": "bookmarks",
      "description": "「脆弱性を修正した「OpenSSL 1.1.1c、1.1.0k、1.0.2s」リリース」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/06/02-bookmarks/",
      "published": "2019-06-02T01:50:00+00:00",
      "update": "2019-06-02T01:53:04+00:00",
      "content": " リリース情報  脆弱性を修正した「OpenSSL 1.1.1c、1.1.0k、1.0.2s」リリース | Think IT（シンクイット） Linuxカーネル「Linux 5.1.5」リリース | Think IT（シンクイット）  セキュリティ＆プライバシー関連  全国で発生した電子マネーやギフトカードのシステム障害についてまとめてみた - piyolog 秘密鍵・公開鍵ペアの意図的な重複生成が発覚 コールドウォレット作成サービス「ウォレットジェネレーター」を利用しないよう呼びかけ Macのネットワーク共有に脆弱性の報告。ZIPファイル組み合わせマルウェア感染の危険 - Engadget 日本版 GDPR施行から1年、世界のプライバシーとデータ保護を巡る状況をどう変えたか - ZDNet Japan First American Financial Corp. Leaked Hundreds of Millions of Title Insurance Records — Krebs on Security  First American Financial Corp. Data Records Leak - Schneier on Security  Amazon株主が政府への顔認識技術提供の禁止を求める提案を否決 | TechCrunch Japan  Amazonに顔認証技術の政府提供禁止を求める案は大差で否決されていた | TechCrunch Japan  依然として100万台弱のWindowsシステムに「BlueKeep」の脆弱性 - CNET Japan 全国で発生した電子マネーやギフトカードのシステム障害についてまとめてみた - piyolog MIT Tech Review: 流出NSA製ハッキングツールが米国を標的に、市システムがダウン 生体認証データの収集に関する法規制の動き、その影響を探る - ZDNet Japan Alex Stamos on Content Moderation and Security - Schneier on Security 情報セキュリティ早期警戒パートナーシップガイドライン-2019年版   JPCERT/CCとIPA、脆弱性情報の取り扱いに関するガイドラインの2019年版を公開 - クラウド Watch  macOSのアプリインストール保護機能の脆弱性、研究者が報告 | ギズモード・ジャパン Killswitch functionality in F-Secure FREEDOME - F-Secure Community : そんな機能があったのか。気がつかなかった Potential human costs of cyber operations—Key ICRC takeaways from discussion with tech experts - Humanitarian Law \u0026amp; Policy Blog | Humanitarian Law \u0026amp; Policy Blog  The Human Cost of Cyberattacks - Schneier on Security  佐世保共済病院のマルウェア感染についてまとめてみた - piyolog Ghidra - Java 11上で動作するNSAのリバースエンジニアリングツール Windowsのメモ帳にバグ、任意のコマンド実行可能か | マイナビニュース マイクロソフトは伝染性BlueKeepバグへのパッチ適用を勧告 | TechCrunch Japan  天文関連  MIT Tech Review: アポロ計画から50年 月軌道ランデブーを支えた 技術者は今もNASAにいた 【転載】VSOLJニュース No.355 さそり座に新星が出現 MIT Tech Review: スペースX、インターネット衛星60基を打ち上げ  MIT Tech Review: 「明るすぎる」スペースXの人工衛星群、天文学者から批判  MIT Tech Review: 太陽系外惑星に生命は存在するか？MITの「形状可変鏡」年内試験へ 「はやぶさ2」のミッション | Nature Astronomy | Nature Research アポロ11号の50周年記念にレゴで作る月着陸船 | TechCrunch Japan  知財関連  DRMを利用して「オープンソース」ブラウザを支配下におさめるGoogle – P2Pとかその辺のお話R  Linux または Ubuntu に関する話題  Ubuntu 19.10 その7 - sudo実行時に$HOMEを引き継ぐか、それとも引き継ぎをやめるか - kledgeb Linux その41 - アプリのテーマとアイコンのカスタマイズはやめて・アプリの開発者がコミュニティーに公開状 - kledgeb Ubuntu 18.04 その334 - DellからUbuntuをプリインストールした3つの新モデル、近々登場・Dell Precision 5540/7540/7740 - kledgeb Ubuntu 19.10 その9 - mlocateをすべてのUbuntuユーザーに提供したほうが良いか・フィードバックの募集 - kledgeb  その他  データセンターの冷やし方も“デル流”--冷却システムの取り組み - ZDNet Japan HTML標準仕様の策定についてW3CとWHATWGが合意発表。今後はWHATWGのリビングスタンダードが唯一のHTML標準仕様に － Publickey あなたの知らない「詐欺グラフ」の世界（随時更新中）｜けんけん｜note NHKのネット同時配信、受信料「PC・スマホからも請求」は間違い - 弁護士ドットコム MIT Tech Review: 暗号通貨に春の兆し？ブロックチェーン・ウィークで感じた変化 MIT Tech Review: AI利用のルールづくり目指す、世界経済フォーラムが評議会設立へ 「Cloudflare Workers KV」正式版がリリース。約180個所のグローバルなCDNエッジで提供される大規模分散キーバリューストア － Publickey 2019年5月30日ニュース「基礎研究の成果は将来の社会発展の基盤 令和元年版の科学技術白書」 | SciencePortal Amazonが5.5インチ画面のスマートディスプレイ「Echo Show 5」を1万円で発売 | TechCrunch Japan Uberの性差別的男子文化を暴いたスーザン・ファウラーの回想録 | TechCrunch Japan  "
    },
    {
      "title": "メール・サービスを立てずにコマンドラインでメールを送信する",
      "section": "remark",
      "description": "調べてみたら msmtp なるツールが良さげである。今回は msmtp を構成してメールを送信してみる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/06/send-mail-without-mail-service/",
      "published": "2019-06-01T14:45:58+00:00",
      "update": "2019-06-02T01:15:17+00:00",
      "content": " cron で回したプロセスの実行結果をメールで送信することを考える。\nUbuntu はインストール直後の既定状態ではメール・サービスは入ってない。 したがって cron の実行結果（標準出力等に吐き出されるもの）は何処にも通知されない。 これはこれで合理的な設計なのだが（cron の実行結果でメールボックスが溢れたりすることもないし），やはり結果をメールで通知したいこともある。 かといって，そのためにわざわざデスクトップ・パソコンにメール・サービスを入れるのはナンセンスであろう。\n自前でメール・サービスを立てずに外部のメール・サーバにメールを流す送信専用の簡易 MUA があれば便利である。 そこで調べてみたら msmtp なるツールが良さげである1。 今回は msmtp を構成してコマンドラインでメールを送信するところまでやってみよう。\nmsmtp のインストール msmtp は APT で導入可能である。\n$ apt show msmtp Package: msmtp Version: 1.8.3-1 Priority: extra Section: universe/mail Origin: Ubuntu Maintainer: Ubuntu Developers \u0026lt;ubuntu-devel-discuss@lists.ubuntu.com\u0026gt; Original-Maintainer: Emmanuel Bouthenot \u0026lt;kolter@debian.org\u0026gt; ... なので早速インストールする。\n$ sudo apt install msmtp msmtp-mta msmtp-mta パッケージは cron から msmtp を利用するのに必要なので併せてインストールしておく。 一応，動作確認しておこう。\n$ msmtp --version msmtp version 1.8.3 Platform: x86_64-pc-linux-gnu TLS/SSL library: GnuTLS Authentication library: GNU SASL Supported authentication methods: plain scram-sha-1 external gssapi cram-md5 digest-md5 login ntlm IDN support: enabled NLS: enabled, LOCALEDIR is /usr/share/locale Keyring support: none System configuration file name: /etc/msmtprc User configuration file name: /home/username/.msmtprc Copyright (C) 2019 Martin Lambers and others. This is free software. You may redistribute copies of it under the terms of the GNU General Public License \u0026lt;http://www.gnu.org/licenses/gpl.html\u0026gt;. There is NO WARRANTY, to the extent permitted by law. よしよし。\nmsmtp の設定 まずは ~/.msmtprc ファイルを作成して外部のメール・サーバを定義する2。 ~/.msmtprc の雛形ファイルは以下にあるので参考になるだろう。\n /usr/share/doc/msmtp/examples/msmtprc-user.example  このファイルを元にして Gmail のメール・サーバにアクセスする設定を記述してみる。 こんな感じ3。\n# Set default values for all following accounts. defaults # Use the mail submission port 587 instead of the SMTP port 25. port 587 # Always use TLS. tls on # Gmail service account gmail # Host name of the SMTP server host smtp.gmail.com # Envelope-from address from username@gmail.com # Authentication. The password is given using one of five methods, see below. auth on user username@gmail.com # Password method 2: Store the password in an encrypted file, and tell msmtp # which command to use to decrypt it. This is usually used with GnuPG, as in # this example. Usually gpg-agent will ask once for the decryption password. #passwordeval gpg2 --no-tty -q -d ~/.msmtp-password.gpg # Password method 3: Store the password directly in this file. Usually it is not # a good idea to store passwords in plain text files. If you do it anyway, at # least make sure that this file can only be read by yourself. password password_string # Set a default account account default : gmail ~/.msmtprc ファイルの権限を変更するのも忘れずに。\n$ chmod 0600 ~/.msmtprc これで準備 OK。 試しにコマンドラインでメールを送信してみよう。\n$ echo \u0026#34;hello there.\u0026#34; | msmtp -a gmail username@gmail.com これで username@gmail.com 宛に “hello there.” という内容でメールが届けば成功である。 ちなみに -a オプションは省略できる。 この場合 account default で指定されたアカウント情報で送信される。\ncron との連携 では cron との連携を試してみよう。 cron の設定方法については割愛する。 ググればいくらでも出てくるし。\nまずはパソコンのユーザ・アカウントとメールアドレスを連携させるために /etc/aliases ファイルを作成する（これがないと username@hostname 宛にメールを送ろうとする）。 内容はこんな感じ。\nusername: username@gmail.com root: username@gmail.com default: username@gmail.com さらに ~/.msmtprc ファイルに以下の記述を追加する。\n# aliases file aliases /etc/aliases これで msmtp 側の準備は完了。\nテスト用のプロセスを crontab で定義する。\n$ crontab -e  内容は例えばこんな感じ。\n*/5 * * * * MAILTO=username ls これで username のメールアドレス宛に5分おきに ls コマンドの実行結果をメール送信する。 かなりウザいので動作確認できたらソッコーで削除しないと（笑）\nうまくいかない場合は /var/log/syslog を見てみるとヒントになるかもしれない。\n$ cat /var/log/syslog | grep sendmail パスワード情報の暗号化 外部メール・サーバへの送信で認証を行う場合は ~/.msmtprc ファイルに認証用のパスワードを設定する必要があるが，平文で保存されるため，いかにも不用心である。 そこでパスワード情報を暗号化することを考える。\n具体的には ~/.msmtprc ファイルの password 項目を以下の記述で置き換える。\npasswordeval gpg --no-tty -q -d ~/.msmtp-password.gpg ~/.msmtp-password.gpg が暗号化されたパスワード情報を格納するファイルで GnuPG で暗号化されている。 ~/.msmtp-password.gpg ファイルを作成するには以下のコマンドラインを実行する。\ngpg --encrypt -o ~/.msmtp-gmail.gpg -r username@gmail.com - 最後のハイフン（-）を忘れずに。 これで標準入力からパスワードを入力し改行コードを入力した後 ctrl-d で処理を抜ければ完了である4。\nメール送信時には復号のために GnuPG がパスフレーズを要求するのでご注意を5。\nブックマーク  msmtp - Debian Wiki msmtp - ArchWiki\n 各ユーザのcrontabファイルの場所について - Qiita\n 初心者向けcronの使い方 - Qiita\n crontab使い方まとめ。 - ばくのエンジニア日誌\n Cronの使い方とテクニックと詰まったところ - Qiita\n   ググってみると sSMTP に関する記事が頻出したが，残念なことに sSMTP はもはやメンテナンスされていないようである。 [return] マシン全体で設定する場合は /etc/msmtprc ファイルに設定を記述する。 [return] password の項目にはパスワードを記述するが， Google サインイン用のパスワードではなく「アプリ・パスワード」をセットする（Googleへのサインインに2要素認証を使っていることが前提）。アプリ・パスワードは「Google アカウント」のページで設定できる。アプリやプラットフォームごとに異なるアプリ・パスワードを設定するのがコツである。 [return] もちろんパイプを使ってパスワードを入力することも可能だが，コマンドラインに履歴が残ってしまうので絶対にやらないこと。 [return] GnuPG の鍵を作成する際にパスフレーズの入力を省略すれば復号処理を自動化できるが秘密鍵の中身が丸見えになってしまうので取り扱いには注意が必要である。パスワード暗号化用の専用鍵を作って運用するのが無難だろう。 [return]   "
    },
    {
      "title": "Go モジュールのミラーリングとインデックス化",
      "section": "golang",
      "description": "モジュールのミラーリング・サービスは各所で公開されているモジュールのミラーリングを行うためのプロキシ・サーバの一種で，現在ベータ版である Go 1.13 では既定で有効になっているそうだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/mirror-index-and-checksum-database-for-go-module/",
      "published": "2019-05-31T14:15:13+00:00",
      "update": "2019-05-31T14:15:46+00:00",
      "content": " Go モジュールのミラーリングとインデックス化を行うためのサービスがベータ・リリースされたようだ。\n Go Module Mirror and Checksum Database in Beta! - Google Group  これは “Go Modules in 2019” で予告されていたものだ。\n We are planning to launch a mirror service for publicly-available modules in 2019.  via Go Modules in 2019  モジュールのミラー・サービスは各所で公開されているモジュールのミラーリングを行うためのプロキシ・サーバの一種で，現在ベータ版である Go 1.13 では既定で有効になっているそうだ。 それ以前のバージョン（1.12 ?）では環境変数 GOPROXY に https://proxy.golang.org をセットすることで有効になるらしい（試してない）。\n更に，モジュールのインデックス・サービスも開始される。\n index.golang.org  クエリに対して JSON データを返す仕様なのかな。\n更に更に，モジュールのチェックサム値をデータベース化してモジュールの検証に使えるようにするようだ。\n sum.golang.org  チェックサム値をデータベースとして保持っておくことでモジュールの完全性を担保し，コードの改竄を検知しやすくする目的があると思われる1。 チェックサム・データベースの利用については gosumcheck というツールが提供されている。\n$ go get golang.org/x/exp/sumdb/gosumcheck $ gosumcheck /path/to/go.sum これらのサービスのプライバシー・ポリシーについては proxy.golang.org/privacy を参照しろとあるが，この URL を叩くと Google のプライバシー・ポリシーのページに飛ばされる。 まぁ Google のサービスなんだから当然だろうけど，プライバシーに敵対的な企業のサービスだと思うとあまり利用したくない気分2。\nモジュールのミラーリングやインデックス化はそれぞれ単体のサービスではなく，モジュールを中心とした生態系（module ecosystem）を構築するための部品と考えるのがいいだろう。 Go 1.13 以降からはモジュール周りが更に大きく変わりそうである。\nブックマーク  Proposal: Secure the Public Go Module Ecosystem  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  [まとめ買い] 超人ロック　ミラーリング（コミックフラッパー） 聖 悠紀  Ebook Bundle Kindle版 ASIN: B013URFRLQ 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「エレナ」続編。分散 AI といえばこれだよね。\nreviewed by Spiegel on 2017-12-28 (powered by amazon-item 0.2.1)\n  本当に完全性を担保したいなら電子署名と組み合わせるべきだと思うけどね。まぁ，そこまで厳密な管理は（今のところ）要らないと考えているのだろう。今や GnuPG と OpenSSH と Git はワンセットなので（OpenSSH の鍵は GnuPG で管理可能） OpenPGP で電子署名すればいいじゃない，と思うのだが。 [return] Go 言語にしろ（最近ブームが再燃している） Dart 言語にしろ，言語系のプロダクトやサービスは Google から切り離してほしいよなぁ。 Alphabet の傘下から外れろとまでは言わないから。 [return]   "
    },
    {
      "title": "「ヒト」こそがセキュリティの最強点",
      "section": "remark",
      "description": "こんな15年くらい前の腐ったセキュリティ事例を目の当たりにできるとは思わなかったが，「他山の石」とでも思って今後の私達の活動に活かしていきたいものである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/incident-response/",
      "published": "2019-05-30T12:51:57+00:00",
      "update": "2019-05-30T12:52:53+00:00",
      "content": " 今夜はリリースされたばかりの『賢者の弟子を名乗る賢者 11』でも読んでのんびり過ごそうと思っていたのだが，面白そうな話が上がっているので便乗してみる。\n ヤマダ電機通販サイトの不正アクセスについてまとめてみた - piyolog  さすが piyolog さんは早いなぁ。\nこの記事を見かけたのが朝の忙しい時間帯だったこともあり，タイトルだけを見て「やらかしてら」くらいの感想しかなかったのだが，どうも「ヤマダ電機はクレカのセキュリティ・コードまで保持っていて丸ごとそれらを抜かれたらしい」という噂になっていたようだ。\nが，実際にはこれはマスメディアの報道からくる誤解らしい。\n ヤマダ電機のクレジットカード情報流出事件、「セキュリティコードを保存」の誤解広がる(篠原修司) - 個人 - Yahoo!ニュース  例によってマスメディアの中途半端で杜撰な報道をネットメディア（Twitter 等を含む）が増幅しフェイク化するといういつもの展開なわけだが，語るのも面倒なので，こちらは無視する。\n問題はヤマダ電機側がインシデントを認知してから実際にクレカ運用を止めるまでに10日かかっていること，そこから警察に届けるまで（例の10連休を挟んで）10日，そこからユーザに告知するまでに20日以上もかかっていることだ。\n    日時 出来事     2019年3月18日までに ヤマダウェブコム・ヤマダモールが不正アクセスを受け、ペイメントアプリケーションが改ざんされる。   ： カード情報流出の可能性がある対象期間   2019年4月16日 クレジットカード会社より情報流出の疑義について連絡   同日 ヤマダ電機が情報漏えいの可能性を把握。   ： カード情報流出の可能性がある対象期間   2019年4月26日 ヤマダウェブコム・ヤマダモールでシステムメンテナンス。カード登録を休止する措置。   同日 ヤマダ電機がP.C.F.FRONTEOへ不正アクセスの調査を依頼。   2019年5月7日 ヤマダ電機が警察へ被害相談。   2019年5月20日 P.C.F.FRONTEOによる調査が完了。   2019年5月22日 ヤマダ電機が警察へ被害届を提出。   2019年5月28日 ヤマダ電機が個人情報保護委員会へ不正アクセス被害を報告。   2019年5月29日 ヤマダ電機が不正アクセス被害とクレジットカード情報流出の可能性を発表。    via ヤマダ電機通販サイトの不正アクセスについてまとめてみた  いやいやいや。 あり得ない愚鈍さである。 今時こんなテキトーなインシデント・レスポンスをかます企業があるとは思わざりき。\n上のタイムラインを見れば分かるが，情報漏洩の可能性を認知した4月16日の時点でサービスを止めユーザに告知した上で警察と調査会社との三者で事に当たれば被害（の可能性）を抑え少なくとも10連休前には解決できただろう。 しかも10連休直前にえんやらやっと調査を依頼して自分たちは10連休を楽しんだ後に警察へ通報かい？ 安倍政権の中の人たち，あなた達の進める「働き方改革」は順調なようですよ（笑）\n「ヒトはセキュリティの最弱点である」とはよく言われることだが，まさに今回のケースはヤマダ電機側の怠慢による「人災」だろう（もちろんクレカ情報を盗んだ犯罪者が一番悪いのは言うまでもないが）。\nしかし本当は「ヒトはセキュリティの最強点になり得る」のである（「である」ではなく「なり得る」のがポイント）。 何故なら，予期しないイレギュラーが起きた時，危機的状況に見舞われた時，そういったときにこそ「ヒト」の真価が問われるからだ。\nこんな15年くらい前の腐ったセキュリティ事例を目の当たりにできるとは思わなかったが，「他山の石」とでも思って今後の私達の活動に活かしていきたいものである。\n参考図書  セキュリティはなぜやぶられたのか ブルース・シュナイアー 井口 耕二 (翻訳) 日経BP社 2007-02-15 Book 単行本 ASIN: 4822283100, EAN: 9784822283100 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by amazon-item 0.2.1)\n  復活の地１ 小川一水 早川書房 2012-09-15 (Release 2013-11-15) eBooks Kindle版 ASIN: B00GJOESS6 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  コミカライズ版もある。てか，コミカライズ版を最初に読んだ（笑） 大きな災害がある度にこの作品を思い出す。\nreviewed by Spiegel on 2016-04-17 (powered by amazon-item 0.2.1)\n  ソーシャルシフト　これからの企業にとって一番大切なこと 斉藤 徹 日本経済新聞出版社 2011-11-11 (Release 2012-10-18) eBooks Kindle版 ASIN: B009S7CDP6 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  随分前に出版された本だが，企業がソーシャル・メディアと付き合うための基本的な事柄が載っている。これ読んで出直してきなはれ。ちなみに巻末の spesial thanks に私の名前が載っているのは密かな自慢である（笑）\nreviewed by Spiegel on 2019-05-30 (powered by amazon-item 0.2.1)\n  賢者の弟子を名乗る賢者 11 (GCノベルズ) りゅうせんひろつぐ, 藤ちょこ マイクロマガジン社 2019-05-30 (Release 2019-05-30) eBooks Kindle版 ASIN: B07RWSCKKG 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ソウルハウル編のクライマックス。今度はレイドボスだ！\nreviewed by Spiegel on 2019-05-30 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "GnuPG 2.2.16 がリリースされた",
      "section": "release",
      "description": "今回もセキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/05/gnupg-2_2_16-is-released/",
      "published": "2019-05-29T10:11:01+00:00",
      "update": "2019-05-29T10:12:29+00:00",
      "content": " GnuPG 2.2.16 がリリースされた。\n [Announce] GnuPG 2.2.16 released  今回もセキュリティ・アップデートはなし。 主な機能追加・修正点は以下の通り。\n gpg,gpgsm: Fix deadlock on Windows due to a keybox sharing violation. [#4505] gpg: Allow deletion of subkeys with --delete-key. This finally makes the bang-suffix work as expected for that command. [#4457] gpg: Replace SHA-1 by SHA-256 in self-signatures when updating them with --quick-set-expire or --quick-set-primary-uid. [#4508] gpg: Improve the photo image viewer selection. [#4334] gpg: Fix decryption with --use-embedded-filename. [#4500] gpg: Remove hints on using the --keyserver option. [#4512] gpg: Fix export of certain secret keys with comments. [#4490] gpg: Reject too long user-ids in --quick-gen-key. [#4532] gpg: Fix a double free in the best key selection code. [#4462] gpg: Fix the key generation dialog for switching back from EdDSA to ECDSA. gpg: Use AES-192 with SHA-384 to comply with RFC-6637. gpg: Use only the addrspec from the Signer's UID subpacket to mitigate a problem with another implementation. gpg: Skip invalid packets during a keyring listing and sync diagnostics with the output. gpgsm: Avoid confusing diagnostic when signing with the default key. [#4535] agent: Do not delete any secret key in --dry-run mode. agent: Fix failures on 64 bit big-endian boxes related to URIs in a keyfile. [#4501] agent: Stop scdaemon after a reload with disable-scdaemon newly configured. [#4326] dirmngr: Improve caching algorithm for WKD domains. dirmngr: Support other hash algorithms than SHA-1 for OCSP. [#3966] gpgconf: Make --homedir work for --launch. [#4496] gpgconf: Before --launch check for a valid config file. [#4497] wkd: Do not import more than 5 keys from one WKD address. wkd: Accept keys which are stored in armored format in the directory. The installer for Windows now comes with signed binaries.  Release-info: https://dev.gnupg.org/T4509 via GnuPG 2.2.16 released  着々と SHA-1 からの置き換えが進んでる感じだねぇ。\nUbuntu で最新版バイナリを入手する方法を考えないと。 やっぱ自前でビルドするしかないのかなぁ。\nアップデートは計画的に。\nブックマーク  OpenPGP の実装  参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) eBooks Kindle版 ASIN: B015643CPE 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by amazon-item v0.2.0)\n "
    }
  ]
}
