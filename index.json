{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "OpenSSH 完全に理解した（笑）",
      "section": "remark",
      "description": "どうやら OpenSSH に対する理解が足りないと気付いたので，知ってること気付いたこと等を書き出してみる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/01/openssh-mystery/",
      "published": "2021-01-11T07:31:17+00:00",
      "update": "2021-01-11T07:31:32+00:00",
      "content": "使ってみたかったんだ，このフレーズ（笑）\nめでたくもフィードバック先移行後，はじめてのフィードバックを頂いた。 どうやら OpenSSH に対する理解が足りないと気付いたので，知ってること気付いたこと等を書き出してみる。\n「ここ違うよ」とかいうのがありましたらフィードバックにてご指摘いただけると有り難いです。\nOpenSSH に関する本とかあればよかったんだけどねぇ。 日本語の本はみんな出版年がエラく古いし，しかも「使い方」は書いてあっても中で何してるかについてはあまり言及されてない感じ？ とっかに「Inside OpenSSH」みたいな本があればいいのに（笑）\nOpenSSH 暗号化通信の手順 OpenSSH におけるサーバ-クライアント間の暗号化通信の手順は大雑把に\n サーバ-クライアント間で使える暗号スイートの確認 鍵交換アルゴリズムによるシークレットの導出とセッション鍵の生成 セッション鍵による暗号化通信の開始 クライアント認証  となっているようだ。 以降でひとつづつ見ていこう。\n鍵交換アルゴリズムとハッシュ・アルゴリズム 暗号化通信を行うためにはサーバ-クライアント間でセッション鍵（共通鍵）を共有する必要がある。 （昔はともかく）今の OpenSSH ではセッション鍵の取得に Diffie-Hellman 鍵交換アルゴリズムまたはそのバリエーションを使う。 Diffie-Hellman 鍵交換アルゴリズムは公開鍵暗号の一種だがセッションの開始ごとに使い捨ての鍵ペアを生成する（筈）ので，ユーザがそれを意識することはないだろう。\n鍵交換アルゴリズムで得られる共有データを「シークレット」と呼ぶことがある。 OpenSSH ではシークレットをハッシュ化した値をセンション鍵として使っているようだ。\nしたがってセッション鍵の共有には鍵交換アルゴリズムとハッシュ・アルゴリズムの2つが必要となる。 OpenSSH でサポートしてる暗号スイートは以下の通り。\n   名称 鍵交換 ハッシュ 推奨 備考     curve25519-sha256 ECDH (curve25519) SHA2-256  OpenSSH 7.4 以降   diffie-hellman-group1-sha1 DH (1024 bits) SHA1     diffie-hellman-group14-sha1 DH (2048 bits) SHA1     diffie-hellman-group14-sha256 DH (2048 bits) SHA2-256  OpenSSH 7.3 以降   diffie-hellman-group16-sha512 DH (4096 bits) SHA2-512  OpenSSH 7.3 以降   diffie-hellman-group18-sha512 DH (8192 bits) SHA2-512  OpenSSH 7.3 以降   diffie-hellman-group-exchange-sha1 Custom DH (?) SHA1     diffie-hellman-group-exchange-sha256 Custom DH (?) SHA2-256  OpenSSH 5.4 以降   ecdh-sha2-nistp256 ECDH (NIST curve P-256) SHA2-256  OpenSSH 5.7 以降   ecdh-sha2-nistp384 ECDH (NIST curve P-384) SHA2-256  OpenSSH 5.7 以降   ecdh-sha2-nistp521 ECDH (NIST curve P-521) SHA2-256  OpenSSH 5.7 以降    SHA-1 は危殆化が叫ばれて久しく，既に推奨されていない。 このブログでもあちこちで書いているが Zenn の以下の記事でまとめているので興味のある人はどうぞ。\n さようなら SHA-1  ECDH (Elliptic Curve Diffie–Hellman) は Diffie-Hellman 鍵交換アルゴリズムの楕円曲線版と考えてもらって構わない。\nECDH で使用する楕円曲線のうち NIST 推奨パラメータ（curve P-256/384/521）は微妙に評判が悪いようで，推奨しないところがあった。 どうも NIST 発のアルゴリズムは使いたくないということのようだ。 まぁ NSA 絡みで度々やらかしてるから信用がないんだろうな（笑）\nこれらの暗号スイートの選択と優先順位はサーバ側で設定するのでユーザが意識することはない。 強いて言うなら古いバージョンは使うなってことくらいか。\n共通鍵暗号アルゴリズムと暗号モード 実際の暗号化通信はセッション鍵を使った共通鍵暗号アルゴリズムで行う。 AE (Authenticated Encryption) が有効な場合は AE が優先される\nOpenSSH でサポートしてる共通鍵暗号アルゴリズムと暗号モードは以下の通り。\n   名称 共通鍵暗号 暗号モード 推奨 備考     3des-cbc TripleDES CBC     aes128-cbc AES-128 CBC     aes192-cbc AES-192 CBC     aes256-cbc AES-256 CBC     aes128-ctr AES-128 CTR     aes192-ctr AES-192 CTR     aes256-ctr AES-256 CTR     aes128-gcm@openssh.com AES-128 GCM  OpenSSH 6.2 以降   aes256-gcm@openssh.com AES-256 GCM  OpenSSH 6.2 以降   arcfour ARCFOUR (40?) —     arcfour128 ARCFOUR (128) —     arcfour256 ARCFOUR (256) —     blowfish-cbc Blowfish (64) CBC     cast128-cbc CAST (128) CBC     chacha20-poly1305@openssh.com ChaCha20 Poly1305  OpenSSH 6.5 以降    ARCFOUR ってのはいわゆる RC4 ストリーム暗号のこと。 RC4 は公式にはアルゴリズムを公開していないため “Alleged RC FOUR” の意味で ARCFOUR という名称が使われているようだ。\nRC4 および CBC モードは危殆化が報告されて久しく，推奨されない。 また TripleDES, Blowfish, CAST は暗号強度不足のため，これも推奨されない。\nこれらの暗号スイートの選択と優先順位はサーバ側で設定するのでユーザが意識することはない。 ただし，優先順位としては AEAD (Authenticated Encryption with Associated Data; 認証付き暗号) として機能する GCM や ChaCha20-Poly1305 がより推奨されているらしい。\nメッセージ認証符号 GCM や ChaCha20-Poly1305 以外の AEAD として機能しない暗号モードの場合は MAC (Message Authentication Code; メッセージ認証符号) を組み合わせる。 組み合わせ方としては\n Encrypt-then-MAC (OpenSSH 6.2 以降) MAC-then-encrypt Encrypt-and-MAC  のいずれかを選択できるらしい。 Encrypt-then-MAC であれば AEAD として機能する。 OpenSSH でサポートしてる MAC アルゴリズムとハッシュ・アルゴリズムの組み合わせは以下の通り。\n   名称 MAC ハッシュ 推奨 備考     hmac-md5 HMAC MD5     hmac-md5-96 HMAC MD5     hmac-sha1 HMAC SHA1     hmac-sha1-96 HMAC SHA1     hmac-sha2-256 HMAC SHA2-256  OpenSSH 5.9 以降   hmac-sha2-512 HMAC SHA2-512  OpenSSH 5.9 以降   umac-64 UMAC-64 (Universal Hash)  OpenSSH 4.7 以降   umac-128 UMAC-128 (Universal Hash)  OpenSSH 6.2 以降    それぞれの名称の後ろに -etm@openssh.com と付くと Encrypt-then-MAC で動作する。\nMD5 は危殆化が報告されて久しく，推奨されない。 SHA1 は HMAC に関しては2031年以降も “Acceptable” であるとされているが，他の暗号スイートとの組み合わせで考えると避けたほうがいいかもしれない。\nUMAC は RFC 4418 で規定されている。 この中で\nLikewise, 32-, 96-, and 128-bit tags cannot be forged with more than 1/2^30, 1/2^90, and 1/2^120 probability plus the probability of a successful attack against AES as a pseudorandom permutation. via UMAC: Message Authentication Code using Universal Hashing  とあるので UMAC-64 や UMAC-128 はセキュリティ強度不足なんじゃないかと思うのだが，どうだろう。\nこれらの暗号スイートの選択と優先順位はサーバ側で設定するのでユーザが意識することはない。\n電子署名アルゴリズムとハッシュ・アルゴリズム クライアント認証で公開鍵暗号を用いる場合は，ユーザ側で認証鍵ペアを生成し，公開鍵をあらかじめサーバ側と共有する必要がある。 また公開鍵暗号を用いたクライアント認証ではハッシュ・アルゴリズムも用いる。 OpenSSH でサポートしてるクライアント認証の暗号スイートは以下の通り。\n   名称（サーバ側） 電子署名 ハッシュ 推奨 備考     ssh-ed25519 EdDSA (edwards25519) SHA2-256     sk-ssh-ed25519@openssh.com EdDSA (edwards25519) SHA2-256  OpenSSH 8.2 以降   ssh-rsa RSA SHA1  廃止予定   rsa-sha2-256 RSA SHA2-256  OpenSSH 7.2 以降   rsa-sha2-512 RSA SHA2-512  OpenSSH 7.2 以降   ssh-dss DSA SHA1     ecdsa-sha2-nistp256 ECDSA (NIST curve P-256) SHA2-256     ecdsa-sha2-nistp384 ECDSA (NIST curve P-384) SHA2-384     ecdsa-sha2-nistp521 ECDSA (NIST curve P-521) SHA2-512     sk-ecdsa-sha2-nistp256@openssh.com ECDSA (NIST curve P-256) SHA2-256  OpenSSH 8.2 以降    頭に sk- が付いているものは暗号デバイスに対応している。\nssh-rsa は将来バージョンで廃止が決まっている。\nOpenSSH では FIPS 186-3 以降の DSA に対応してないようで，鍵長が1024ビットしか対応してない（これも NIST 嫌悪か？）。 もちろん推奨できない。\nNIST 推奨パラメータを使った ECDSA も（ECDH と同じく）微妙に評判が悪い。 あと ECDSA は電子署名時に乱数を使うのだが，この実装をサボると脆弱性の元となる。 実際に，2013年に発覚した疑似乱数生成器 Dual EC DRBG の脆弱性では， NSA が絡んでいたこともあって，一気に ECDSA 忌避が強まったらしい。\n以上はサーバ側の設定の話だが，ユーザ側では ssh-keygen コマンドを使って認証鍵を生成する必要がある。\n認証鍵の生成では鍵種別（-t オプション）と鍵長（-b オプション）を指定する。 組み合わせは以下の通り。\n   鍵種別 鍵長 アルゴリズム 推奨 備考     rsa 1024以上\n（既定3072） RSA  3072ビット以上推奨   dsa 1024 DSA     ed25519 — EdDSA (edwards25519)     ed25519-sk — EdDSA (edwards25519)  OpenSSH 8.2 以降   ecdsa 256（既定） ECDSA (NIST curve P-256)     ecdsa 384 ECDSA (NIST curve P-384)     ecdsa 521 ECDSA (NIST curve P-521)     ecdsa-sk — ECDSA (NIST curve P-256)  OpenSSH 8.2 以降    これは私が盛大に勘違いしていたのだが，たとえば\n$ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/home/username/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/username/.ssh/id_rsa Your public key has been saved in /home/username/.ssh/id_rsa.pub The key fingerprint is: SHA256:qufsNjgco3QZNjE4eupwQiT6mD8fr2a7nXmU3ybxFHo username@hostname The key\u0026#39;s randomart image is: +---[RSA 3072]----+ | . | |..o o | |+. . o | |o.. + . | |.* . + S. . . | |* + = .o o E | |o= +.+.. . * | | .+ **+o. o + | | =*XOo o | +----[SHA256]-----+ てな感じに鍵を作ったときに表示される SHA256 は署名時ではなく，鍵指紋のハッシュ・アルゴリズムを指しているらしい。 実際の電子署名でどのハッシュ・アルゴリズムを使うのかはサーバ-クライアント間のネゴシエーションで決まるのかな（？）\n【おまけ】 各種アルゴリズムのセキュリティ強度 （「暗号鍵関連の各種変数について」より抜粋）\nおまけとして各種アルゴリズムのセキュリティ強度を挙げておく。\n各種暗号アルゴリズムとセキュリティ強度の関係 最初は種暗号アルゴリズムの鍵長とセキュリティ強度の関係を示す表。 単位は全てビットである。\n main table.nist2 th { vertical-align:middle; text-align: center; } main table.nist2 td { vertical-align:middle; text-align: center; }    Security\nStrength Symmetric\nkey\nalgorithms FFC\n(DSA, DH,\nMQV) IFC\n(RSA) ECC\n(ECDSA,\nEdDSA, DH,\nMQV)     $\\le 80$ 2TDEA $L=1024$ $N=160$  $k=1024$   $f = 160\\text{ - }223$   $112$ 3TDEA $L=2048$ $N=224$ $k=2048$ $f = 224\\text{ - }255$  $128$ AES-128 $L=3072$ $N=256$ $k=3072$ $f = 256\\text{ - }383$  $192$ AES-192 $L=7680$ $N=384$ $k=7680$ $f = 384\\text{ - }511$  $256$ AES-256 $L=15360$ $N=512$ $k=15360$$f=512+$   Comparable security strengths of symmetric block cipher and asymmetric-key algorithms (via SP 800-57 Part 1 Revision 5  5.6.1.1)  ハッシュ・アルゴリズムとセキュリティ強度の関係 次はハッシュ・アルゴリズムとセキュリティ強度の関係を示す表。\n main table.nist3 th { vertical-align:middle; text-align: center; } main table.nist3 td { text-align: center; }    Security Strength Digital Signatures and Other\nApplications Requiring Collision\nResistance HMAC, KMAC,\nKey Derivation Functions,\nRandom Bit Generation      $\\le 8$0 SHA-1 \u0026nbsp;  $112$ SHA-224, SHA-512/224, SHA3-224 \u0026nbsp;  $128$ SHA-256, SHA-512/256, SHA3-256 SHA-1, KMAC128  $192$ SHA-384, SHA3-384 SHA-224, SHA-512/224, SHA3-224  $\\ge 256$ SHA-512, SHA3-512 SHA-256, SHA-512/256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, KMAC256    Maximum security strengths for hash and hash-based functions (via SP 800-57 Part 1 Revision 5  5.6.1.2)  セキュリティ強度と有効期限 こちらはセキュリティ強度の有効期限を表したものだ。\n main table.nist4 th { vertical-align:middle; text-align: center; } main table.nist4 td { vertical-align:middle; text-align: center; }    Security Strength Through\n2030 2031 and\nBeyond    $\\lt 112$Applying Disallowed  Processing Legacy use $112$ Applying AcceptableDisallowed  Processing Legacy use $128$ Applying/ProcessingAcceptableAcceptable $192$ AcceptableAcceptable $256$ AcceptableAcceptable   Security-strength time frames (via SP 800-57 Part 1 Revision 5  5.6.3)  各用語はそれぞれ\n   用語 意味     Applying 適用   Processing 処理   Acceptable 許容   Legacy use 許容（レガシー使用のみ）   Disallowed 禁止    という意味だ。 例を挙げると，セキュリティ強度112ビットの暗号スイート（Cipher Suites）を適用する場合は2030年までは許容するけど2031年以降は禁止。 すでに暗号化されているデータを復号したい場合でも2031年以降はレガシー・システムしか許容しない，ということになる。\nブックマーク  ChaCha20-Poly1305の解説と実装 | 晴耕雨読 OpenSSHの認証に証明書を使う方法｜ConoHa VPSサポート  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "2021-01-10 のブックマーク",
      "section": "bookmarks",
      "description": "「アカリク、自社サービスCloud LaTeX（クラウドラテフ）との同期を可能にするVisual Studio Code拡張機能（プラグイン）ベータ版を公式OSSとして公開」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/01/10-bookmarks/",
      "published": "2021-01-10T04:34:41+00:00",
      "update": "2021-01-10T04:36:41+00:00",
      "content": "リリース情報  Release v1.33.1 · golangci/golangci-lint · GitHub Release v1.34.0 · golangci/golangci-lint · GitHub Release v1.34.1 · golangci/golangci-lint · GitHub Hugo 0.80: Last Release of 2020! | Hugo Release gopls/v0.6.2 · golang/tools · GitHub Release v1.35.0 · golangci/golangci-lint · GitHub Release v1.0.6 · sonatype-nexus-community/nancy · GitHub  バベルのインターネット  米政府がTikTok禁止の差止命令を不服として上訴 | TechCrunch Japan 暴動関連  イーロン・マスク氏が米議会議事堂での暴動受けてFacebookの代わりにセキュリティ重視のSignalを推薦 | TechCrunch Japan : 意味不明w ミシェル・オバマ氏がトランプ氏アカウントの永久停止と未来のリーダーによるプラットフォーム乱用防止策をシリコンバレーに要求 | TechCrunch Japan FacebookとInstagramがトランプ大統領のアカウントを「少なくとも政権交代が完了」までブロック | TechCrunch Japan TikTokが暴動を扇動したトランプ大統領の演説動画を削除、#stormthecapitalなどのハッシュタグをブロック | TechCrunch Japan   GitHub、イランからの利用制限を解除へ。政府と交渉の末 － Publickey  セキュリティ＆プライバシー関連   On the Evolution of Ransomware - Schneier on Security\n  Salesforceの設定不備に起因した外部からのアクセス事案についてまとめてみた - piyolog\n Latest on the SVR’s SolarWinds Hack - Schneier on Security Russia’s SolarWinds Attack and Software Security - Schneier on Security  ブログ: ロシアのSolarWinds攻撃とソフトウェア・セキュリティ   SolarWinds製品に認証回避の脆弱性、アップデートを | マイナビニュース    Brexit Deal Mandates Old Insecure Crypto Algorithms - Schneier on Security\n  「Node.js」の2021年1月セキュリティ更新 ～CVE番号ベースで3件の脆弱性に対処 - 窓の杜\n  福岡県の新型コロナ陽性者情報流出についてまとめてみた - piyolog\n  Backdoor account discovered in more than 100,000 Zyxel firewalls, VPN gateways | ZDNet\n Backdoor in Zyxel Firewalls and Gateways - Schneier on Security    トランプ氏に更迭された元サイバーセキュリティ高官と元Facebook幹部がサイバーコンサルティング会社設立 | TechCrunch Japan\n  Ubuntu 20.10 その76 - セキュリティーアップデート（2021/1/1 〜 2021/1/8） - kledgeb : 年始明けのセキュリティ・アップデートをまとめて\n  天文関連  APOD: 2020 December 29 - Earth During a Total Solar Eclipse APOD: 2020 December 27 - Cosmic Latte: The Average Color of the Universe APOD: 2020 December 30 - Jupiter and Saturn Great Conjunction: The Movie APOD: 2020 December 31 - Trail of the Returner : おかえり，はたぶさ2 崩壊のアレシボ天文台、プエルトリコ知事が再建に向け予算800万ドルを承認 - Engadget 日本版 APOD: 2021 January 7 - Total Solar Eclipse 2020 ティコの超新星残骸の衝撃波の急激な減速を発見 －Ia型超新星の爆発メカニズムに迫る－ | 京都大学  Ia型超新星が白色矮星と恒星の連星系で起こされる強い証拠を京大などが観測 | マイナビニュース    知財関連  Judge: Sci-Hub Blocking Case \u0026ldquo;Important\u0026rdquo; For Science, Community Representations Will Be Heard * TorrentFreak  Linux または Ubuntu に関する話題  Linux起動の仕組みを理解しよう［init/inittab編］ (1/2)：Windowsユーザーに教えるLinuxの常識（10） - ＠IT Ubuntu 20.04 LTS をインストールした後やること13選 - Qiita Ubuntu 20.04 その217 - Ubuntu 20.04.2 LTSのリリース日変更 - kledgeb  Windows に関する話題  Release v0.1.1 · zetamatta/binview · GitHub WindowsでもサクサクDocker (Docker Desktop with WSL2)  Go 言語関連  ヘキサゴナルアーキテクチャをgo言語で書いてみた - Qiita Go製全文検索エンジンBlugeで日本語形態素解析をおこなう 【Go】ginを使った一連の認証実装をまとめる 【Go言語】OpenWeatherMapとTwitterAPIを使ってお天気情報をラズパイから定期的にツイートさせる - Qiita GoのRDBアクセスライブラリ（go-pg/pg）の紹介 - Qiita VSCode devcontainerでローカルを汚さずに、快適なGo言語の開発環境を整える Go 言語スプレッドシートライブラリ：Excelize 2.3.2 がリリースされました - Qiita go2cs | Golang to C# Converter : 面白そう！ 【Golang】Unicode上複数コードからなる文字をruneで扱う場合の挙動 - Ren\u0026rsquo;s blog  Unicodeとの異体字バトルがはじまったぜ    Rust 言語関連  Announcing Rust 1.49.0 | Rust Blog  その他  個人からチームまで、Notion での情報・タスク管理一元化完全解説 Google App Engineのスタンダード/フレキシブル環境を選ぶときのヒントと設定の注意点 アカリク、自社サービスCloud LaTeX（クラウドラテフ）との同期を可能にするVisual Studio Code拡張機能（プラグイン）ベータ版を公式OSSとして公開｜株式会社アカリクのプレスリリース Next.jsのFont Optimizations（Webフォントの最適化）を試してみる : セキュリティ・プライバシー上の配慮で Web フォントのキャッシュを複数ドメインで共有されなくなったらしい CSS カスタムプロパティ (変数) の使用 - CSS: カスケーディングスタイルシート | MDN  CSS変数の命名規則について考える   2020年は大麻にとって決定的な年だった、今後の展開は | TechCrunch Japan [DB接続クライアント]mycliを導入してターミナルで気楽にMariaDB/MySQLを触る Flashの最後の日、Adobe自身がサポートを停止 | TechCrunch Japan 視覚障がい者がバーチャルイベントに参加することを想像し、あなたが主催する次のイベントでその想像を実践しよう | TechCrunch Japan An Online Visual Collaboration Platform for Teamwork | Miro 無料でURLから余計なゴミを自動削除してリダイレクトやトラッキングを防止してくれるFirefox用拡張機能「Link Cleaner+」 - GIGAZINE Ruby 3.0正式版リリース。「Ruby 2の3倍速」到達、型の記述、スレッドセーフな並列処理など新機能 － Publickey 「CentOS」に代わる「Rocky Linux」、2021年第2四半期に最初のリリース登場の可能性 - ZDNet Japan HTTP/3はどうやってWebを加速するか？ TCP、TLS、HTTP/2の問題とHTTP/3での解決策～Fastly奥氏が解説（前編） － Publickey  HTTP/3はどうやってWebを加速するか？ TCP、TLS、HTTP/2の問題とHTTP/3での解決策～Fastly奥氏が解説（後編） － Publickey   The Conspiracy Theory Handbook | Center For Climate Change Communication  ブログ: 陰謀論ハンドブック   Yubikey5を手に入れたのでGPGを使ってみる(1/2)(GPG key作成編) - akashisnの日記 Forwarding gpg-agent to a remote system over SSH - GnuPG wiki gpg-agentをforwardingしてホスト上で署名する - Qiita Securing SSH with the YubiKey Securing SSH with OpenPGP or PIV セキュリティキー「YubiKey」でEC2へのSSHを2段階認証にしてみた | Developers.IO SSHのCA認証 - Qiita OpenSSHの認証に証明書を使う方法｜ConoHa VPSサポート 絵文字からZennの記事をみつける拡張機能「Zenn Feel Lucky」を作った Moving users to Microsoft Edge from Internet Explorer - Microsoft Edge Development | Microsoft Docs  Microsoft will forcibly open some websites in Edge instead of Internet Explorer | ZDNet Microsoft、IE終了に本腰。特定のWEBサイトをEdgeにリダイレクト - Engadget 日本版 IE11からEdgeにリダイレクトするためにIE互換性リストに登録する方法 │ Webty Staff Blog   WebAssemblyをWin/Mac/Linuxで実行可能なランタイム「Wasmer 1.0」正式リリース。事前コンパイルによる高速起動やクロスコンパイルなどにも対応 － Publickey PythonやR対応の統合開発環境「JupyterLab 3.0」正式リリース。ビジュアルデバッガー搭載、レスポンシブ対応でモバイルデバイスの狭い画面でも使いやすく － Publickey terminal pagerをclient/server化してtmuxを組み合わせたら最強のSQLクライアントになった \u0026ldquo;Linuxの父\u0026quot;トーバルズ氏が評価するAMD、そしてインテル - ZDNet Japan  "
    },
    {
      "title": "gpg-agent の設定： GnuPG in Ubuntu",
      "section": "openpgp",
      "description": "Zenn で書いた「Ubuntu で OpenSSH の鍵管理を gpg-agent に委譲する」をこのブログの「最新版 GnuPG をビルドする」の続編として再構成した",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/openpgp/gpg-agent-in-ubuntu/",
      "published": "2021-01-10T02:53:13+00:00",
      "update": "2021-01-10T02:56:17+00:00",
      "content": "この記事は Zenn で書いた「Ubuntu で OpenSSH の鍵管理を gpg-agent に委譲する」をこのブログの「最新版 GnuPG をビルドする」の続編として再構成したものである。\nなお Windows 版 gpg-agent の設定については，古い記事で恐縮だが\n GnuPG for Windows : gpg-agent について  が参考になる。\nビルドした gpg-agent をサービスとして登録する 前回ビルドした GnuPG を使って処理を行おうとすると gpg-agent が古い旨の警告が出る。 ps コマンドでチェックすると，どうやらオリジナルの /usr/bin/gpg-agent が稼働しているようだ。\n稼働している /usr/bin/gpg-agent を一旦落として gpg-connect-agent コマンドで再起動すれば /usr/local/bin/gpg-agent が起動するのだが，ログインし直すと元に戻ってしまう。\nいろいろググってみたのだが， gpg-agent の制御は /usr/lib/systemd/user/gpg-agent.service ファイルでサービスとして行っているようだ。 内容はこんな感じ。\n[Unit] Description=GnuPG cryptographic agent and passphrase cache Documentation=man:gpg-agent(1) Requires=gpg-agent.socket [Service] ExecStart=/usr/bin/gpg-agent --supervised ExecReload=/usr/bin/gpgconf --reload gpg-agent そこで，最後の2行を\nExecStart=/usr/local/bin/gpg-agent --supervised ExecReload=/usr/local/bin/gpgconf --reload gpg-agent と変更しサービスを restart したら /usr/local/bin/gpg-agent のほうで稼働してくれるようになった。\n$ systemctl --user status gpg-agent ● gpg-agent.service - GnuPG cryptographic agent and passphrase cache Loaded: loaded (/usr/lib/systemd/user/gpg-agent.service; static) Active: active (running) since Sat 2021-01-09 09:38:33 JST; 9min ago TriggeredBy: ● gpg-agent.socket ● gpg-agent-ssh.socket ● gpg-agent-extra.socket ● gpg-agent-browser.socket Docs: man:gpg-agent(1) Main PID: 18913 (gpg-agent) CGroup: /user.slice/user-1000.slice/user@1000.service/gpg-agent.service ├─18913 /usr/local/bin/gpg-agent --supervised └─19398 scdaemon --multi-server Jan 09 09:38:33 mocona6 systemd[1616]: Started GnuPG cryptographic agent and passphrase cache. Jan 09 09:38:33 mocona6 gpg-agent[18913]: gpg-agent (GnuPG) 2.2.26 starting in supervised mode. Jan 09 09:38:33 mocona6 gpg-agent[18913]: using fd 3 for std socket (/run/user/1000/gnupg/S.gpg-agent) Jan 09 09:38:33 mocona6 gpg-agent[18913]: using fd 4 for ssh socket (/run/user/1000/gnupg/S.gpg-agent.ssh) Jan 09 09:38:33 mocona6 gpg-agent[18913]: using fd 5 for extra socket (/run/user/1000/gnupg/S.gpg-agent.extra) Jan 09 09:38:33 mocona6 gpg-agent[18913]: using fd 6 for browser socket (/run/user/1000/gnupg/S.gpg-agent.browser) Jan 09 09:38:33 mocona6 gpg-agent[18913]: listening on: std=3 extra=5 browser=6 ssh=4 ... よーし，うむうむ，よーし。\nOpenSSH の鍵管理を gpg-agent に委譲する 上述の話を調べてて初めて知ったのだが，どうも Ubuntu を含む Debian 系のディストリビューションでは OpenSSH の認証鍵を ssh-agent 固定で管理するよう構成されていて， gpg-agent と設定が競合してしまうらしい。 OpenSSH の鍵管理を gpg-agent に委譲するよう構成するには gpg-agent.conf ファイル以外にもいくつか設定が必要なようだ。\nXsession.options の変更 まずは /etc/X11/Xsession.options ファイルの内容を変更する。 元々の内容は以下の通り。\n# $Id: Xsession.options 189 2005-06-11 00:04:27Z branden $ # # configuration options for /etc/X11/Xsession # See Xsession.options(5) for an explanation of the available options. allow-failsafe allow-user-resources allow-user-xsession use-ssh-agent use-session-dbus この中の use-ssh-agent の記述を no-use-ssh-agent に差し替える。 当然ながら変更には管理者権限が必要なのでご注意を。 バックアップを取りながら作業すること。\nautostart/gnome-keyring-ssh.desktop の変更 次に /etc/xdg/autostart/gnome-keyring-ssh.desktop の内容を変更するのだが，このファイルを直接変更するのではなく，いったん ~/.config/autostart/ ディレクトリにコピーしてから，コピーしたファイルに対して変更をかける（autostart ディレクトリがない場合は先に作成する）。\n$ cp /etc/xdg/autostart/gnome-keyring-ssh.desktop ~/.config/autostart/ これでユーザ単位で設定を弄ることができる。 といっても最終行に\nHidden=true を追記するだけだが。\ngpg-agent.conf の設定 最後に ~/.gnupg/gpg-agent.conf ファイルに以下の内容を書き込む。\nenable-ssh-support default-cache-ttl-ssh 1800 max-cache-ttl-ssh 7200 gpg-agent.conf ファイルがない場合は作成すること。 下2行のオプションは任意で，以下の意味を持つ。\n   オプション名 内容     default-cache-ttl-ssh 直前にアクセスしたキャッシュ・エントリの有効期間を秒単位で指定する。 既定値は 1800   max-cache-ttl-ssh キャッシュ・エントリの有効期間の最大値を秒単位で指定する。 アクセスの有無にかかわらずこの期間が過ぎるとキャッシュがクリアされる。 既定値は 7200    有効期間は大きすぎると漏洩リスクが高まるのでほどほどに（笑）\nこれで設定は完了。念のためログインし直しておこう。\n環境変数の確認 ログインし直したら環境変数を確認しておく。\n$ env | grep SSH SSH_AUTH_SOCK=/run/user/1000/gnupg/S.gpg-agent.ssh てな感じに SSH_AUTH_SOCK 環境変数の値が gpg-agent のソケットになっていれば OK である。 これで ~/.bashrc とかに要らん記述をしなくてもよくなった。 ブラボー！\nGnuPG による鍵管理 既存の OpenSSH 認証鍵を GnuPG に登録する 上述の設定が完了していれば，既存の OpenSSH 認証鍵を GnuPG の鍵束に登録するのは ssh-add コマンドで簡単にできる。\n$ ssh-add ./id_ecdsa Enter passphrase for ./id_ecdsa: Identity added: ./id_ecdsa (alice@example.com) この時 ssh-add コマンドによるパスフレーズ入力とは別に GnuPG の Pinentry によるパスフレーズの設定が行われるので注意。 確認を含めて2箇所入力する必要がある。\npinentry  GnuPG の鍵束に登録される認証鍵はこのパスフレーズで保護される。 登録した秘密鍵は ~/.gnupg/private-keys-v1.d/ ディレクトリ）に入る。 また ~/.gnupg/sshcontrol ファイルに\n# ECDSA key added on: 2020-06-01 14:05:35 # Fingerprints: MD5:e4:5b:66:a6:03:9a:a4:0e:f2:1b:a5:04:72:93:f3:f0 # SHA256:DtXgQm9rz7Dc5M5yWu/CNVo341o1rcfN9UCyYu+SZU4 A5353D587000D820669B0BD55A0B4AD6897458DB 0 という感じに追加した鍵の情報が入る。\nちなみに A5353D587000D820669B0BD55A0B4AD6897458DB は keygrip と呼ばれる値で，鍵の種類に関係なく統一的に表される ID である。 また ~/.gnupg/private-keys-v1.d/ ディレクトリに入っている鍵は A5353D587000D820669B0BD55A0B4AD6897458DB.key のように keygrip に紐付いたファイル名で格納されている。\nさらに，末尾の 0 はキャッシュ期間（秒）を指すらしい。 0 より大きければ gpg-agent.conf ファイルの指定より優先されるってことかな。\nさらにさらに，行頭に ! マークを付けると鍵の使用を無効化できる。\nGnuPG 鍵を OpenSSH 認証鍵として設定する GnuPG 鍵を OpenSSH 認証鍵として設定することもできる。 ただし専用の認証鍵を作る必要がある。 詳しくは\n SSH の認証鍵を GunPG で作成・管理する  を参照のこと。 最終的には全部 GnuPG で管理するのがいいんだろうな。\nブックマーク   Configuring gpg-agent for SSH Authentication on Ubuntu\n  GnuPG チートシート（鍵作成から失効まで）\n  OpenSSH 鍵をアップグレードする（さようなら SHA-1）\n  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "SSH の認証鍵を GunPG で作成・管理する",
      "section": "openpgp",
      "description": "新たに鍵を作成する場合や今までの鍵を破棄して作り直す場合などの状況があれば検討してもいいだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/openpgp/ssh-key-management-with-gnupg/",
      "published": "2021-01-06T14:06:57+00:00",
      "update": "2021-01-10T02:49:53+00:00",
      "content": "今回は GnuPG で作成した鍵を OpenSSH の認証鍵として使う方法について覚え書きとして記しておく。 現時点で運用できている認証鍵を置き換えるメリットはないが，新たに鍵を作成する場合や今までの鍵を破棄して作り直す場合などの状況があれば検討してもいいだろう。\nまず GnuPG で作成する鍵は機能別に以下の4種類に分類される（ひとつの鍵で複数の機能を持たせることもできる）。\n   機能 略称     署名 S   証明 C   認証 A   暗号化 E    このうち OpenSSH の認証鍵として使えるのは「認証」機能をもった鍵のみである。 認証機能は電子署名用の鍵であれば任意に付与することができるが，専用の副鍵を追加するのがセオリーらしい。\n認証用の副鍵を追加する まず以下の OpenPGP 鍵があるとする（主鍵には SC，副鍵には E の機能が付いてる点に注目）。\n$ gpg --list-keys alice pub ed25519 2021-01-06 [SC] [有効期限: 2021-01-13] 011C720B03D2E1D6BCFA98391DFF44901121B61D uid [ 究極 ] Alice \u0026lt;alice@example.com\u0026gt; sub cv25519 2021-01-06 [E] この鍵に認証用の副鍵を追加する。 鍵の追加には --edit コマンドを使う。 なお --expert オプションと一緒に使うと幸せになれる。\n$ gpg --expert --edit-key alice gpg (GnuPG) 2.2.26; Copyright (C) 2020 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. 秘密鍵が利用できます。 sec ed25519/1DFF44901121B61D 作成: 2021-01-06 有効期限: 2021-01-13 利用法: SC 信用: 究極 有効性: 究極 ssb cv25519/4FECD03BE5BE4454 作成: 2021-01-06 有効期限: 無期限 利用法: E [ 究極 ] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; ここで addkey コマンドを入力する。\ngpg\u0026gt; addkey ご希望の鍵の種類を選択してください: (3) DSA (署名のみ) (4) RSA (署名のみ) (5) Elgamal (暗号化のみ) (6) RSA (暗号化のみ) (7) DSA (機能をあなた自身で設定) (8) RSA (機能をあなた自身で設定) (10) ECC (署名のみ) (11) ECC (機能をあなた自身で設定)  (12) ECC (暗号化のみ) (13) 既存の鍵 (14) カードに存在する鍵 あなたの選択は? 今回は認証用の鍵の追加なので 7, 8, 11 のいずれかを選択する。 ここは個人的な好みで ECC 鍵を選択しよう。\nあなたの選択は? 11 鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 現在の認められた操作: Sign  (S) 署名機能を反転する (A) 認証機能を反転する (Q) 完了 あなたの選択は? 現在は署名機能（Sign）のみ有効になっているが，欲しいのは認証機能のみなので S と A を一回づつ入力する。\nあなたの選択は? s 鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 現在の認められた操作:  (S) 署名機能を反転する (A) 認証機能を反転する (Q) 完了 あなたの選択は? a 鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 現在の認められた操作: Authenticate  (S) 署名機能を反転する (A) 認証機能を反転する (Q) 完了 あなたの選択は? これで認証機能（Authenticate）のみ有効になった。 Q を入力して次に進もう。\nあなたの選択は? q ご希望の楕円曲線を選択してください: (1) Curve 25519  (3) NIST P-256 (4) NIST P-384 (5) NIST P-521 (6) Brainpool P-256 (7) Brainpool P-384 (8) Brainpool P-512 (9) secp256k1 あなたの選択は? OpenSSH の認証用には 1 から 5 の楕円曲線のいずれかを選択する。 個人的なお勧めは 1 の “Curve 25519” である。 理由は以下の記事を参考のこと。\n Edwards-curve Digital Signature Algorithm  では 1 を入力して先に進む。\nあなたの選択は? 1 鍵の有効期限を指定してください。 0 = 鍵は無期限  \u0026lt;n\u0026gt; = 鍵は n 日間で期限切れ \u0026lt;n\u0026gt;w = 鍵は n 週間で期限切れ \u0026lt;n\u0026gt;m = 鍵は n か月間で期限切れ \u0026lt;n\u0026gt;y = 鍵は n 年間で期限切れ 鍵の有効期間は? (0)0 鍵は無期限です 有効期限は意味がないので無期限（0）を選択する。 理由は後述するのでちょっと待ってね。\n最終確認をして鍵を生成する。\nこれで正しいですか? (y/N) y 本当に作成しますか? (y/N) y たくさんのランダム・バイトの生成が必要です。キーボードを打つ、マウスを動か す、ディスクにアクセスするなどの他の操作を素数生成の間に行うことで、乱数生 成器に十分なエントロピーを供給する機会を与えることができます。 sec ed25519/1DFF44901121B61D 作成: 2021-01-06 有効期限: 2021-01-13 利用法: SC 信用: 究極 有効性: 究極 ssb cv25519/4FECD03BE5BE4454 作成: 2021-01-06 有効期限: 無期限 利用法: E ssb ed25519/230D446E390C3E49 作成: 2021-01-06 有効期限: 無期限 利用法: A [ 究極 ] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; save 最後は save コマンドを入力して結果を鍵束に保存する。 これで\n$ gpg --list-keys alice pub ed25519 2021-01-06 [SC] [有効期限: 2021-01-13] 011C720B03D2E1D6BCFA98391DFF44901121B61D uid [ 究極 ] Alice \u0026lt;alice@example.com\u0026gt; sub cv25519 2021-01-06 [E] sub ed25519 2021-01-06 [A] 認証用の鍵が追加できた。\nOpenSSH フォーマットの公開鍵を出力する。 OpenSSH フォーマットの公開鍵は --export-ssh-key コマンドで出力できる。\n$ gpg --export-ssh-key alice ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFfjejx/Saej929myfZoBQAKgusPi2iiOxdZZfpCLxh5 openpgp:0x390C3E49 このテキストをホスト機の ~/.ssh/authorized_keys ファイルに追記すれば仕込みは完了である。 パーミッションの変更を忘れずに（笑）\nこの操作で分かると思うが OpenSSH フォーマットで出力する時点で OpenPGP 鍵の情報はほぼ脱落している。 だから「有効期限は意味がない」のよ。\nちなみにこの操作は公開鍵に対して行われる。 たとえば，認証用の鍵を付加した OpenPGP 公開鍵をサーバ管理者に渡せば，サーバ管理者は集めた OpenPGP 公開鍵に署名して完全性を確保した後， OpenSSH 認証用公開鍵を抽出して各ユーザのディレクトリにまとめてセットする，といったこともできるだろう。\nローカル側の設定 【2021-01-09 変更・追記あり】 念のためローカル側の設定についても記しておく。\nssh-agent を gpg-agent に置き換える OpenSSH では ssh-agent を GnuPG の gpg-agent に置き換えることで鍵の管理を GnuPG 側に委譲できる。\nUbuntu の設定手順については以下の記事でまとめている。\n gpg-agent の設定： GnuPG in Ubuntu  Windows については，古い内容で恐縮だが，以下の記事を参考にして欲しい。\n GnuPG for Windows : gpg-agent について  OpenSSH 認証鍵の登録 GnuPG の鍵束の鍵を OpenSSH の認証鍵として使うには ~/.gnupg/sshcontrol ファイルへの登録が必要である。 先ほど作成した鍵であれば，まず以下のコマンドで\n$ gpg --list-keys --with-keygrip alice pub ed25519 2021-01-06 [SC] [有効期限: 2021-01-13] 011C720B03D2E1D6BCFA98391DFF44901121B61D Keygrip = 97249ABEB2A2FD9E88F6723BB19D4F84B90E261A uid [ 究極 ] Alice \u0026lt;alice@example.com\u0026gt; sub cv25519 2021-01-06 [E] Keygrip = 96CB831965E1A7EB4705577D6A7CB7F9E05C8192 sub ed25519 2021-01-06 [A] Keygrip = F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E 該当する鍵の keygrip 値を調べる。 今回の例なら “F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E” が該当する keygrip 値である。 これを ~/.gnupg/sshcontrol ファイルに追記する。\n$ echo F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E 0 \u0026gt;\u0026gt; ~/.gnupg/sshcontrol これで ssh-add -L コマンドでこの鍵の内容が表示されればOK。\nちなみに keygrip 値の後ろの 0 はキャッシュ期間（秒）を指すらしい。 0 より大きければ gpg-agent.conf ファイルの指定より優先されるってことかな。 また行頭に ! マークを付けると鍵の使用を無効化できる。\n念のため sshcontrol ファイルも不用意に書き込みできないよう制限をかけておくとよいだろう。\nブックマーク  GnuPG チートシート（鍵作成から失効まで） そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな OpenSSH 鍵をアップグレードする（さようなら SHA-1）  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "2021年の祝日・休日に関する注意喚起",
      "section": "remark",
      "description": "職場で知らなかった人が割とおられたので改めて。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/01/holiday-in-2021/",
      "published": "2021-01-05T09:46:07+00:00",
      "update": "2021-01-05T10:24:21+00:00",
      "content": "総務の方が職場中のカレンダーを修正しておられた。 組織内で正式に発行するカレンダーならいつでも差し替え可能だが，壁に貼ってある頂き物や市販のカレンダーは（当然ながら）古い祝日のまま。 マジでお疲れ様です。\nそれはともかく，2021年の祝日・休日1 の改正（改悪だろ！）について，職場で知らなかった人が割とおられたので，改めて注意喚起しておく。\n 具体的には，令和2年12月4日 法律第68号「平成三十二年東京オリンピック競技大会・東京パラリンピック競技大会特別措置法等の一部を改正する法律」により，令和3年に限り，海の日は東京オリンピック開会式前日の7月22日，スポーツの日は開会式当日の7月23日，山の日は閉会式当日の8月8日となった．なお，8月8日は日曜日にあたるため，翌8月9日は休日となる 令和3年の祝日と休日について - 国立天文台暦計算室より  この結果，2021年の祝日・休日は以下の通りとなった。\n   日付 曜日 内容 備考     2021-01-01 金 元日    2021-01-11 月 成人の日    2021-02-11 木 建国記念の日    2021-02-23 火 天皇誕生日    2021-03-20 土 春分の日    2021-04-29 木 昭和の日    2021-05-03 月 憲法記念日    2021-05-04 火 みどりの日    2021-05-05 水 こどもの日    2021-07-22 木 海の日 7月19日から移動   2021-07-23 金 スポーツの日 10月11日から移動   2021-08-08 日 山の日 8月11日から移動   2021-08-09 月 休日 振替休日   2021-09-20 月 敬老の日    2021-09-23 木 秋分の日    2021-11-03 水 文化の日    2021-11-23 火 勤労感謝の日     「出勤したら祝日でした」ってのならまだ笑い話で済むが，「祝日と思って休んだら平日で欠勤になっちゃいました」は割とシャレにならないと思うのだが，どうだろう。 特に10月は（予定通りならオリンピックも終わってるし）間違えて休んじゃう人が続出しそうな気が\u0026hellip;\nこんな全く間に合わない決定をするくらいなら，ハナからしないほうがマシだと思う（子供は夏休みだし大人は自力で休みにすればいい）。 してみると，何もしなかった前政権はまだマシだったか（笑）\nブックマーク  2021年の主な暦 国立天文台から最新の暦情報を取ってくる【広告記事】  参考図書  天文年鑑 2021年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2020-11-24 単行本 4416620616 (ASIN), 9784416620618 (EAN), 4416620616 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2021年版。なお，記載されている祝日・休日は改正前のものなのでご注意を。\nreviewed by Spiegel on 2020-11-25 (powered by PA-APIv5)\n   「国民の祝日」は休日となる。また『「国民の祝日」が日曜日に当たるときは、その日後においてその日に最も近い「国民の祝日」でない日を休日とする』（「国民の祝日に関する法律」より）。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "spiegel-im-spiegel/ml v0.3.0 をリリースした",
      "section": "release",
      "description": "ひょっとして zetamatta/go-readline-ny パッケージ使ったら CUI の簡易プロンプトがもっと簡単に実装できるんちゃうん？",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/01/makelink-0_3_0-is-released/",
      "published": "2021-01-03T07:12:38+00:00",
      "update": "2021-01-03T08:13:27+00:00",
      "content": "\u0026hellip;ついカッとなってやった。 反省はしない\u0026hellip;\nみなさま，あけましておめでとうございます。 本年も「書きたくないときには書かない」「他人の評価など気にしない」をモットーに，ゆるゆるとやっていく所存です。\n閑話休題 (それはさておき) ，正月早々 Zenn で\n 「コマンドラインシェル？？？　誰でも作れますよ」  という記事を眺めてて\n「あれ？ ひょっとして zetamatta/go-readline-ny パッケージ使ったら CUI の簡易プロンプトがもっと簡単に実装できるんちゃうん？」 と思いついてしまい，（たぶん私しか使ってないであろう）Markdown 形式のリンクを生成するツールに手を入れることにした。 その結果を v0.3.0 としてリリースしている。\n Release v0.3.0 · spiegel-im-spiegel/ml · GitHub  今回の変更は以下の3つ。\n リポジトリ名を mklink から ml に変更する spiegel-im-spiegel/ml リポジトリ直下に main.go を移動し，コマンドライン・ツールとして構成し直す 対話モードでの入力を zetamatta/go-readline-ny パッケージで書き直す  最初のはメインマシンを Ubuntu に換装した関係で先延ばしにしていたやつ。 Windows の内部コマンドに mklink てのがあって（シンボリックリンク操作のコマンド），それと名前が被ってたのだ。 実際には GitHub のリポジトリ設定から簡単にリネームできた（簡単ならとっととやれってば）。 旧 URL からのリダイレクトもやってくれている。 感謝。\n2番めは，近年私がよくやる変更。 昔は「Go コード用の外部パッケージとして書いて，その実装例としてコマンドラインツールも書く」というスタンスで構成していたが，機能がニッチ過ぎて汎用で再利用しづらいため「じゃあ最初からコマンドラインツールとして構成すればいいぢゃん」と考えを改めた。\n一応\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/ml/makelink\u0026#34; ) func main() { lnk, err := makelink.New(context.Background(), \u0026#34;https://git.io/vFR5M\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } _, _ = io.Copy(os.Stdout, lnk.Encode(makelink.StyleMarkdown)) // Output:  // [GitHub - spiegel-im-spiegel/ml: Make Link with Markdown Format](https://github.com/spiegel-im-spiegel/ml) } のように Go のコードに組み込むことも可能。\n3番目の zetamatta/go-readline-ny パッケージの組み込みはマジでやってよかった。 ざっと見た感じ，このパッケージの特徴は以下の通り。\n エコーバック（？）の Writer を指定できる 簡易ヒストリ機能を付けられる Ctrl+C および Ctrl+D を正しく拾ってエラー（readline.CtrlC および io.EOF）として返してくれる（上位レイヤでの SIGNAL 操作が不要）  たとえばこんな感じに書けるらしい。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;github.com/mattn/go-colorable\u0026#34; \u0026#34;github.com/zetamatta/go-readline-ny\u0026#34; \u0026#34;github.com/zetamatta/go-readline-ny/simplehistory\u0026#34; ) func main() { history := simplehistory.New() editor := readline.Editor{ Prompt: func() (int, error) { return fmt.Print(\u0026#34;$ \u0026#34;) }, Writer: colorable.NewColorableStdout(), History: history, } fmt.Println(\u0026#34;Tiny Shell. Type Ctrl-D to quit.\u0026#34;) for { text, err := editor.ReadLine(context.Background()) if err != nil { fmt.Printf(\u0026#34;ERR=%s\\n\u0026#34;, err.Error()) return } fields := strings.Fields(text) if len(fields) \u0026lt;= 0 { continue } cmd := exec.Command(fields[0], fields[1:]...) cmd.Stdout = os.Stdout cmd.Stderr = os.Stderr cmd.Stdin = os.Stdin cmd.Run() history.Add(text) } }  via zetamatta/go-readline-ny: Readline library for golang , used in nyagos  というわけで，拙作の spiegel-im-spiegel/ml でも対話モードのプロンプトに簡易ヒストリが使えるようにした。 めっさ便利！\nzetamatta/go-readline-ny パッケージは元々 NYAGOS をターゲットに書かれたもののようだが，私の Ubuntu 環境でも問題なく動作している。\nうんうん。 よかったよかった。\nブックマーク  Markdown 形式のリンクを生成するツールを作ってみた  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "最新版 GnuPG をビルドする： GnuPG in Ubuntu",
      "section": "openpgp",
      "description": "念のために警告しておくと，今回の自力ビルドは積極的にはお勧めしない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/openpgp/build-gnupg-in-ubuntu/",
      "published": "2021-01-01T04:18:27+00:00",
      "update": "2021-01-10T07:15:53+00:00",
      "content": "Linux 環境では GnuPG は（ユーザは意識しないかもしれないが）セキュリティ中核部品のひとつだが， Ubuntu はかなり保守的な運用をしているそうで，滅多なことでは GnuPG をアップデートしないようだ。 かといって CVE ID が割り振られるような脆弱性まで長期間放置するのはいかがなものかと思うが。\nそこで，かねてから懸案だった GnuPG の自力ビルドを試してみることにした。\n念のために警告しておくと，今回の自力ビルドは積極的にはお勧めしない。 GnuPG の最新機能を試したいとか，何がなんでも最新版が欲しいとかいうのでない限り APT で配布されるバージョンを使うほうがよい。 まぁ「最悪はこういう手段も取れるよ」という感じで記憶の片隅にでも置いていただければ（笑）\nビルド対象のパッケージ GnuPG は複数のパッケージで構成されていて，個別にビルド\u0026amp;インストールしていく必要がある。 今回ビルド対象となるパッケージは以下の通り。\n   # パッケージ名 バージョン 公開日     1 Libgpg-error 1.41 2020-12-21   2 Libgcrypt 1.8.7 2020-10-23   3 Libassuan 2.5.4 2020-10-23   4 Libksba 1.5.0 2020-11-18   5 nPth 1.6 2018-07-16   6 ntbTLS 0.2.0 2020-08-27   7 GnuPG 2.2.26 2020-12-21    ビルド\u0026amp;インストールの順番は Libgpg-error を最初にして GnuPG を最後にすることさえ気をつければいいと思うが，特にこだわりがないのであれば上の順番でビルドしていくのがいいだろう。\n前準備 最初に，上に挙げた以外でビルドに必要なパッケージを APT でインストールしておく。\n$ sudo apt install libgnutls28-dev bzip2 make gettext texinfo gnutls-bin build-essential libbz2-dev zlib1g-dev libncurses5-dev libsqlite3-dev libldap2-dev 適当にググって見繕ったものなので，もしかしたらこんなに要らないかもしれないが，精査するのが面倒くさかったので今回はこれで（笑）\nビルド用にダウンロードしたファイルの完全性（integrity）をチェックするために電子署名を検証する。 たとえばこんな感じ。\ngpg --verify gnupg-2.2.26.tar.bz2.sig gnupg-2.2.26.tar.bz2 署名チェックに必要な OpenPGP 公開鍵は以下のページにある。\n GnuPG - Signature Key  クリップボード操作ができる xsel または xclip コマンドがあるなら，上のページに貼り付けられている公開鍵（ASCII armor 形式）をコピって\n$ xsel | gpg --import などとすれば公開鍵を取り込める。\n各パッケージのビルド ではパッケージを順にビルドしていこう。 ビルド用に適当なディレクトリをあらかじめ掘っておくとよい。\n$ sudo mkdir /var/local/gnupg-build $ cd /var/local/gnupg-build Libgpg-error のビルド 以下に手順だけ示しておく。\n$ sudo curl -L https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.41.tar.bz2 -O $ sudo curl -L https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.41.tar.bz2.sig -O $ gpg -d libgpg-error-1.41.tar.bz2.sig # integrity check $ sudo tar xvf libgpg-error-1.41.tar.bz2 $ pushd libgpg-error-1.41/ $ ./configure $ make $ sudo make install $ popd これで /usr/local/ ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。 configure コマンドは引数なしでも問題なさそうだ。\nLibgcrypt のビルド 同様に手順を示しておく。\n$ sudo curl -L https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.7.tar.bz2 -O $ sudo curl -L https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.7.tar.bz2.sig -O $ gpg -d libgcrypt-1.8.7.tar.bz2.sig # integrity check $ sudo tar xvf libgcrypt-1.8.7.tar.bz2 $ pushd libgcrypt-1.8.7/ $ ./configure $ make $ sudo make install $ popd これで /usr/local/ ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。\nLibassuan のビルド 同様に手順を示しておく。\n$ sudo curl -L https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.4.tar.bz2 -O $ sudo curl -L https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.4.tar.bz2.sig -O $ gpg -d libassuan-2.5.4.tar.bz2.sig # integrity check $ sudo tar xvf libassuan-2.5.4.tar.bz2 $ pushd libassuan-2.5.4 $ ./configure $ make $ sudo make install $ popd これで /usr/local/ ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。\nLibksba のビルド 同様に手順を示しておく。\n$ sudo curl -L https://gnupg.org/ftp/gcrypt/libksba/libksba-1.5.0.tar.bz2 -O $ sudo curl -L https://gnupg.org/ftp/gcrypt/libksba/libksba-1.5.0.tar.bz2.sig -O $ gpg -d libksba-1.5.0.tar.bz2.sig # integrity check $ sudo tar xvf libksba-1.5.0.tar.bz2 $ pushd libksba-1.5.0 $ ./configure $ make $ sudo make install $ popd これで /usr/local/ ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。\nnPth のビルド 同様に手順を示しておく。\n$ sudo curl -L https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2 -O $ sudo curl -L https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2.sig -O $ gpg -d npth-1.6.tar.bz2.sig # integrity check $ sudo tar xvf npth-1.6.tar.bz2 $ pushd npth-1.6 $ ./configure $ make $ sudo make install $ popd これで /usr/local/ ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。\nntbTLS のビルド 同様に手順を示しておく。\n$ sudo curl -L https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.2.0.tar.bz2 -O $ sudo curl -L https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.2.0.tar.bz2.sig -O $ gpg -d ntbtls-0.2.0.tar.bz2.sig # integrity check $ sudo tar xvf ntbtls-0.2.0.tar.bz2 $ pushd ntbtls-0.2.0 $ ./configure $ make $ sudo make install $ popd これで /usr/local/ ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。\nGnuPG のビルド ようやく本命。 今までと同様に手順を示しておく。\n$ sudo curl -L https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.26.tar.bz2 -O $ sudo curl -L https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.26.tar.bz2.sig -O $ gpg -d gnupg-2.2.26.tar.bz2.sig # integrity check $ sudo tar xvf gnupg-2.2.26.tar.bz2 $ pushd gnupg-2.2.26 $ ./configure $ make $ sudo make install $ popd これで /usr/local/ ディレクトリ以下の各ディレクトリにビルド結果がインストールされる。 そうそう，最後に\n$ sudo ldconfig としておくのを忘れずに。 これで\n$ gpg --version gpg (GnuPG) 2.2.26 libgcrypt 1.8.7 Copyright (C) 2020 Free Software Foundation, Inc. License GNU GPL-3.0-or-later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 と最新版で起動できる。 念のため設定状況もチェックしておこう。\n$ gpgconf --list-components gpg:OpenPGP:/usr/local/bin/gpg gpg-agent:プライベート鍵:/usr/local/bin/gpg-agent scdaemon:スマートカード:/usr/local/libexec/scdaemon gpgsm:S/MIME:/usr/local/bin/gpgsm dirmngr:ネットワーク:/usr/local/bin/dirmngr pinentry:パスフレーズ入力:/usr/local/bin/pinentry $ gpgconf --list-dirs sysconfdir:/usr/local/etc/gnupg bindir:/usr/local/bin libexecdir:/usr/local/libexec libdir:/usr/local/lib/gnupg datadir:/usr/local/share/gnupg localedir:/usr/local/share/locale socketdir:/run/user/1000/gnupg dirmngr-socket:/run/user/1000/gnupg/S.dirmngr agent-ssh-socket:/run/user/1000/gnupg/S.gpg-agent.ssh agent-extra-socket:/run/user/1000/gnupg/S.gpg-agent.extra agent-browser-socket:/run/user/1000/gnupg/S.gpg-agent.browser agent-socket:/run/user/1000/gnupg/S.gpg-agent homedir:/home/username/.gnupg ふむむ。 上の設定に合わせて，もう少し弄っておこうか。\n$ cd /usr/local/bin/ $ sudo ln -s /etc/alternatives/pinentry pinentry こんな感じかな。 Pinentry は下手に弄ると絶対にドツボにはまるので今回は既存のものを使う。\nソケットががが【2021-01-10 変更】 この節の内容は「gpg-agent の設定」に移動した。\n\u0026#x1f647; -- 最後に動作確認 $ echo hello world | gpg -a -s -u mykey -----BEGIN PGP MESSAGE----- owGbwMvMwCG45Zb1ujqFHTKMp4WSGOLfTbPOSM3JyVcozy/KSeHqmMzCIMjBYC2m yCIdxHTby+542ccHayVgeliZQBpkZYoLMlPTU3P0MnP1oEyH9NzEzBy95PxcBi5O AZj6RwcY/scanE3cwbVrv0v/zA7njR1J8d7vTjwP28EmLvzWVuPhqnaG/4kBz24f 634aYBi/NW79/1WcDusyco91C7N6zWwVC114PRsA =/6XI -----END PGP MESSAGE----- 署名時に Pinentry が起動してパスフレーズが通ればOK。 よーし，うむうむ，よーし。\nブックマーク   Nitrokey/gnupg-docker: Build and use specific GnuPG version using Ubuntu image within Docker\u0026rsquo;s container : Docker 環境で GnuPG をビルド\u0026amp;セットアップする\n  GnuPG チートシート（鍵作成から失効まで）\n  Windows Terminal × NYAGOS × Scoop ＝ ♥ : Windows 版 GnuPG は Scoop 経由でインストールするのがオススメ\n  "
    },
    {
      "title": "宇宙は何色？",
      "section": "remark",
      "description": "Cosmic Latte というのは2002年に修正論文が発表された全宇宙の色の平均値のこと。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/12/cosmic-latte/",
      "published": "2020-12-30T04:56:08+00:00",
      "update": "2020-12-30T04:58:56+00:00",
      "content": "2020-12-27 の “Astronomy Picture of the Day” が “Cosmic Latte” でちょっとびっくりした（笑）\nCosmic Latte というのは2002年に修正論文1 が発表された全宇宙の色の平均値のこと。 当時のページはもう残ってないみたいなので Internet Archive から。\n The Cosmic Spectrum and the Color of the Universe By Karl Glazebrook \u0026amp; Ivan Baldry  WIRED の記事は残ってるみたい。 流石！\n Universe: Beige, not Turquoise | WIRED  実際にはこんな色。 Color-hex は #fff8e7。\n  via Cosmic Latte: The Average Color of the Universe  私も日記ページの背景色にしていたことがある。\nなんか懐かしいなぁ。\nブックマーク  APOD: 2002 July 2 - The Average Color of the Universe 再び発表された宇宙の色：「初期の宇宙は青かった」 宇宙の色は何色？ — 旧メイン・ブログ | Baldanders.info  参考図書  天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいる。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\n   2001年に発表された論文では宇宙の平均色はトルコ石のような緑色とされていたが，その後，計算アルゴリズムにバグが見つかったとかで翌年2002年に修正論文が発表された。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ルールを解釈で捻じ曲げる",
      "section": "remark",
      "description": "“People don't want to be educated, they want to be entertained”",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/12/rules-and-interpretations/",
      "published": "2020-12-29T07:06:27+00:00",
      "update": "2020-12-30T00:16:22+00:00",
      "content": "「数学ガール」シリーズでおなじみの結城浩さんが Twitter でゼロの偶奇を問うアンケートをされていて，その結果について\n「0は偶数です」を正しいとした方は58%で、驚くほどの低正解率でした。\n「0は偶数でも奇数でもありません」を正しいとした方が41%もいらっしゃいました。この回答をした方の理由をお聞きしたいです。https://t.co/reMDPiPM9f\n\u0026mdash; 結城浩 (@hyuki) December 28, 2020  と感想を tweet しておられた。\n実はこのアンケートには元ネタがあるそうで，それがこれ。\n The Parity Of Zero 「0は偶数ではない」と多くの人が信じているのは教育に問題があるという指摘 - GIGAZINE  わざわざこんな辺境の記事を読むような人には自明だろうが，念のためにいうと，偶数とは「2の整数倍数」あるいは「2で割り切れる整数」として 定義 されるものである。 プログラマ風に言うなら「2進数に展開した際に最下位ビットが0になる整数値」または「n\u0026amp;1==0 が true となる int n」でもいいだろう（笑） いずれにしてもゼロは偶数と言える，議論の余地なく。\nこの話のポイントは，偶奇の色分けは「定義」であるということだ。 言い方を変えるなら「2で割り切れる整数を偶数としましょう」という「ルール」である。 つまり「0は偶数でも奇数でもありません」と考えた人は，思い込みの解釈で偶奇のルールを捻じ曲げてしまったわけだ。\nこれで思い出したのが数年前に話題になった「掛け算は順序が大事」という話である。 もちろん掛け算に順序に関するルールはない。 その上で数の掛け算には「交換法則」が成り立つという点が算数の算数たる所以なのだが，そういうのを全部チャイして「順序が大事」と言っちゃってるわけだ。\n当時はこの話を聞いて「日本の学校教育 ＼(^o^)／ｵﾜﾀ」と思ったものだが，似たような話は世界中どこにでも転がっているということなのかもしれない。 これに関して，最初に挙げた記事の\nIt doesn’t necessarily need to be made “relevant.” Yes, for some people you can create the motivation that way, but for others, they will engage purely for the pleasure of finding things out, and the satisfaction in being able to see a reason behind things that were previously stated without justification. via The Parity Of Zero  という部分は結構重要なポイントに見える。 ものに喩えるのは私もよくやるが，喩えを行う場合はその「差異」を常に意識しないと，分かりやすい喩えの方に意識が引きずられてしまう。\nまぁ，日本の，いや世界の数学教育の話はここまでにしておいて，注目したい点は「ルールを解釈で捻じ曲げる」人が一定数いるということだろう。\n典型例は日本の「憲法九条」かな。 「解釈」で捻れまくっているよね。 あるいは知財やプライバシー・セキュリティ関連の法律など「ガイドライン」という名の解釈によって為政者に都合よく運用される風景が当たり前になっている。\nBruce Schneier 先生原著の『セキュリティはなぜやぶられたのか』では「抑止1」における教育の必要性を説く。\n 抑止が効果を持つためには、「教育」が必要だ。社会が犯罪から守られているのは、基本的に、攻撃に対する直接的な防御があるからではない。人々が法律を守るからだ。ほとんどの人は倫理や道徳を重んじる。倫理は人が生まれながらに持つ性質で、これがなかったら人は文明化できなかっただろう。道徳は、何が道徳的で善良な市民とはどういうものかという教育によって身につけるものだ セキュリティはなぜやぶられたのかより  倫理や道徳はともかく，ルールを作ってそれを守ってもらいたいなら，教える側にしても教わる側にしても，それをどのように解釈するか（あるいはされるか）については常に注意を払うべきかもしれない。 なにせ偶数の定義すら捻じ曲げて解釈してしまうのが人間なのだから（笑）\nあちこちの職場を渡り歩いて，その度に「セキュリテイ研修」を受けるが，ぶっちゃけルールを押し付けるだけのところが多く「何故」がないんだよね（まぁ「傭兵」相手に時間をかける気はないってことなんだろうけど）。 特にセキュリティ管理はルールの根拠をきちんと示さなければ守ろうとは思わないし，しぶしぶ守るとしても「解釈で捻じ曲げる」余地を与えてしまう。\nPeople don’t want to be educated, they want to be entertained. via The Parity Of Zero  私は「守られないルールは，ルール自体に問題がある」と考えるが「ルールを解釈で捻じ曲げる」事態が常態化するなら（教育を含めて）マネジメント全体を見直す最初のアラームとなるだろう。\n参考図書  数学ガールの誕生　理想の数学対話を求めて 結城 浩 (著) SBクリエイティブ 2013-09-13 (Release 2014-09-13) Kindle版 B00NAQA33A (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんの講演集。こういう場所に立ち会える今の学生さんは羨ましい。\nreviewed by Spiegel on 2013-09-21 (powered by PA-APIv5)\n  いかにして問題をとくか G. ポリア (著), Polya,G. (原著), 賢信, 柿内 (翻訳) 丸善 1975-04-01 単行本 4621045938 (ASIN), 9784621045930 (EAN), 4621045938 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。\nreviewed by Spiegel on 2014-09-26 (powered by PA-APIv5)\n  セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n   『セキュリティはなぜやぶられたのか』では「抑止」を「将来の攻撃をセキュリティシステムが防止するやり方」と定義している。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "「無人化システム」とメンタル・モデル",
      "section": "remark",
      "description": "20世紀なコードはもうケッコウ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/12/mental-model/",
      "published": "2020-12-28T12:31:19+00:00",
      "update": "2020-12-28T21:55:14+00:00",
      "content": "先週のことで恐縮だが\n COBOLのコードは未だに我々の金を握っており、バリバリ現役である - YAMDAS現更新履歴  という記事が公開されていて，これを読んで思い出したのが20世紀に参加した某プロジェクトでの世間話。\nもう四半世紀前のうろ覚えでしかも人伝 (ひとづて) に聞いた内容だが，当時は意図的に難読化コードを書くプログラマも多かったらしい。 理由は単純で，コードを「属人化」してしまえば少なくともそのプロジェクトに関してはクビにならないから。\nというわけで COBOL プログラマはきっと「まだだ！ まだ終わらんよ！」と思っているだろう（笑）\n「無人化システム」 一方，上の記事が出る少し前に\n 「無人化システム」を駆逐する組織マネジメントとエンジニアリング  というのが Zenn で公開されていて，あまりの納得感に投げ銭 (サポート) してしまったのだが（笑），記事では「無人化システム」を\n システム運用が属人化し、かつその運用者が退職するとシステムが無人化します。我々の会社ではこのようなシステムを『無人化システム』と呼んでいます。\n無人化システムは「誰も詳細は知らないが、なぜか動いているシステム」です。\n 「無人化システム」を駆逐する組織マネジメントとエンジニアリングより  と定義しているようだ。\n「傭兵」時代は「汎用機＋COBOL」からのリプレイス案件を時々受けていたが，何が困るって，ドキュメント化されない「誰も知らないコード」が平気で紛れ込んでいて1，しかもそのコードに手を出すとどんな影響が出るか予測できないという事態にホンマに困っていた（あと，どうやっても正規化できないデータベースとかw）。\nまっ，要するに，時代や言語に関係なく，この手の話は割と普遍的に観測できるということなんだろう。\nメンタル・モデル 2017年に公開された記事だが\n Design Philosophy On Data And Semantics  というのを最近読んだ。 特に Go でコードを書く人はこの記事は必読だろう。\nいくつか拾い読みしてみる。\nA consistent use of value/pointer semantics, for a given type of data, is critical if you want to maintain integrity and readability throughout your software. Why? Because, if you are changing the semantics for a piece of data as it is passed between functions, you are making it difficult to maintain a clear and consistent mental model of the code. The larger the code base and the team becomes, the more bugs, data races and side effects will creep unseen into the code base. via Design Philosophy On Data And Semantics  Tom has also mentioned that a box of copy paper can hold 100k lines of code. Take a second to let that sink in. For what percentage of the code in that box could you maintain a mental model of? via Design Philosophy On Data And Semantics  “The hardest bugs are those where your mental model of the situation is just wrong, so you can’t see the problem at all” - Brian Kernighan via Design Philosophy On Data And Semantics  これ以降は Go をターゲットにした具体的な話に入っていくのだが，これが Go に限る話ではないということはお分かりいただけるだろう。\nプログラマにとって最も信頼できるドキュメントは動いているプログラムコードである。 だからこそコードは「文芸的2」であるべきだし，プログラマは要件定義の段階から積極的にコードを書くべきだと思う。 リファクタリングは何時でもできるのだから3。\n書いた人にしか分からない20世紀なコードはもうケッコウである。\nブックマーク  技術的負債とハッカー    勿論ちゃんとしてる企業もあるよ。コードを1行修正するのにも2重3重のレビューを行って，変更申請書が受理されないと変更できない，みたいなガチガチの企業もあったな。 \u0026#x21a9;\u0026#xfe0e;\n 「コードはもっと文芸的であるべき」というのはクヌース博士のいわゆる「文芸的プログラミング（literate programming）」とはちょっと違う。ごめんペコン。 \u0026#x21a9;\u0026#xfe0e;\n というか，これからの時代はリファクタリングに厚い言語を選択すべき。 \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
