{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Ununtu に ClamAV 導入する",
      "section": "remark",
      "description": "こんなに面倒臭いとは思わなかった。もうしばらく運用してから評価してみるですよ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/clamav-for-ubuntu/",
      "published": "2019-05-06T08:39:20+00:00",
      "update": "2019-05-06T08:40:56+00:00",
      "content": " ClamAV を Ubuntu に導入したのだが，思いのほか面倒臭かったので，覚え書きとして記しておく。\nClamAV をインストールする ClamAV のインストール自体は APT (Advanced Package Tool) で簡単にできる。\n$ sudo apt install clamav clamav-daemon なお clamav-daemon は ClamAV をサービス化するためのパッケージである。\n現時点（2019年5月）で ClamAV の最新は 0.101.x なのだが APT で提供されているバージョンは 0.100.x の古いバージョンのようだ。 一応，以下の脆弱性への対応はしてあるみたいだが\n ClamAV® blog: ClamAV 0.101.2 and 0.100.3 patches have been released!  このバージョンの古さは後々に影響を及ぼすかもしれない。 Debian には最新のソースパッケージがあるようだが，セキュリティ製品だしソースコードからビルドするのは流石に...\nデータベースを更新する まずは手動でデータベースを更新する。\n設定ファイル /etc/clamav/freshclam.conf から NotifyClamd の行をコメントアウトした上で freshclam コマンドを実行する。 コマンドラインで書くとこんな感じ。\n$ sudo systemctl stop clamav-freshclam $ sudo sed -i -e \u0026#34;s/^NotifyClamd/#NotifyClamd/g\u0026#34; /etc/clamav/freshclam.conf $ sudo freshclam Sun May 5 13:36:34 2019 -\u0026gt; ClamAV update process started at Sun May 5 13:36:34 2019 Sun May 5 13:36:34 2019 -\u0026gt; ^Your ClamAV installation is OUTDATED! Sun May 5 13:36:34 2019 -\u0026gt; ^Local version: 0.100.3 Recommended version: 0.101.2 Sun May 5 13:36:34 2019 -\u0026gt; DON\u0026#39;T PANIC! Read https://www.clamav.net/documents/upgrading-clamav Sun May 5 13:36:34 2019 -\u0026gt; main.cvd is up to date (version: 58, sigs: 4566249, f-level: 60, builder: sigmgr) Sun May 5 13:36:34 2019 -\u0026gt; daily.cvd is up to date (version: 25439, sigs: 1562310, f-level: 63, builder: raynman) Sun May 5 13:36:34 2019 -\u0026gt; bytecode.cvd is up to date (version: 328, sigs: 94, f-level: 63, builder: neo) $ sudo sed -i -e \u0026#34;s/^#NotifyClamd/NotifyClamd/g\u0026#34; /etc/clamav/freshclam.conf $ sudo systemctl start clamav-freshclam データベースの更新自体はうまく行ってるようだが OUTDATED とか言われてるよ orz\n...見なかったことにしよう。\nなお clamav-freshclam.service の状態を確認するには以下のコマンドを起動すればよい。\n$ sudo systemctl status clamav-freshclam.service 手動で動作確認 Malware 対策ソフト用の無害なウイルス（笑）があるので，これを使って clamscan コマンドで動作確認する。\n$ curl http://www.eicar.org/download/eicar.com -O $ clamscan --infected --remove ./eicar.com ./eicar.com: Eicar-Test-Signature FOUND ./eicar.com: Removed. ----------- SCAN SUMMARY ----------- Known viruses: 6120222 Engine version: 0.100.3 Scanned directories: 0 Scanned files: 1 Infected files: 1 Data scanned: 0.00 MB Data read: 0.00 MB (ratio 0.00:1) Time: 20.181 sec (0 m 20 s) よーし，うむうむ，よーし。\nScan On-Access の設定 ファイルアクセスへの常時監視を行う Scan On-Access を有効にするために /etc/clamav/clamd.conf ファイルを修正する。 本当は ScanOnAccess を true にするだけでいい筈なのだが1，以下のコマンドで\n$ sudo systemctl status clamav-daemon.service サービスの状態を確認すると以下のログを吐いて停止していた。\nERROR: ScanOnAccess: fanotify_init failed: Operation not permitted ScanOnAccess: clamd must be started by root /etc/clamav/clamd.conf ファイルの他の部分にも手を入れる必要があるようだ。 以下に変更・追記が必要な項目を挙げておく。\nLocalSocketGroup root User root ScanOnAccess true OnAccessMountPath /home/username OnAccessExcludePath /home/username/nocheck # VirusEvent /usr/local/bin/clamd-response OnAccessPrevention false OnAccessExtraScanning true OnAccessExcludeUID 0 最初の3行が変更が必要な項目，以降が追加項目である。 OnAccessMountPath でスキャン対象のディレクトリを OnAccessExcludePath で除外対象を指定する。 どちらも複数指定できる。\nVirusEvent が効かない！？ 上の設定で VirusEvent をコメントアウトしているが，どうやら 0.100 では Scan On-Access を有効にしても VirusEvent の設定が効かないようなのだ（0.101 はどうなんだろう）。\nVirusEvent には malware を発見した際に起動するコマンドを指定するのだが，これが動かないってかなり致命的じゃないのか？\n次善の策として以下のスクリプトを書いて cron で回すことにした。 Malware を検出すれば画面に通知が表示されるはずである。 cron で回してるだけなのでタイムラグが発生する。\n#!/bin/bash  logfile=\u0026#34;/home/username/.local/log/clamd-found.log\u0026#34; if [ -r $logfile ]; then PRV_CNT=`cat $logfile | wc -l` else PRV_CNT=0 fi CNT=`grep ScanOnAccess /var/log/syslog | grep FOUND | grep -v \u0026#34;(null)\u0026#34; | tee $logfile | wc -l` if [ $CNT != $PRV_CNT ]; then DATESTR=`date` sudo -u username DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus /usr/bin/notify-send -t 10000 \u0026#34;$DATESTRVirus Found $CNT\u0026#34; fi ダサいけどしょうがない。 ちなみに username の部分には cron を回すログインユーザ名を， 1000 の部分にはそのユーザ ID をセットする2。\nもう一度，動作確認 clamav-daemon.service がうまく機能するか試してみよう。\n先ほどの無害なウイルス（笑）をダウンロードする。\n$ curl http://www.eicar.org/download/eicar.com -O これでログ等を見て検知しているか確認する（上の通知も出れば完璧）。 確認できたらとっとと削除すること。\n今回は clamdscan のほうを使ってみよう。\n$ clamdscan --infected --remove ./eicar.com /home/spiegel/work/./eicar.com: Eicar-Test-Signature FOUND /home/spiegel/work/./eicar.com: Removed. ----------- SCAN SUMMARY ----------- Infected files: 1 Time: 0.365 sec (0 m 0 s) 圧倒的に速くなった。 まぁ，バックグラウンドにサービスがいるんだから当たり前だが（笑）\nThunderbird と連携したかったが... MUA である Thunderbird と連携できるアドオンがあると聞いたのだが\n clamdrib LIN :: Thunderbird 向けアドオン  うまくインストールできない。\nclamdrib LIN の最新バージョンは2017年のもので最近のバージョン 60 以降には対応してないっぽい（互換性チェック回避のオプションも試したがうまく行かなかった）。 諦めるしかないようだ。\nこんなんばっかだな ＞ ClamAV\n「ウイルス対策ソフト」は必要か？ なんだか知らないが「Linux にウイルス対策ソフトは必要か？」などという頭の悪い議論があるそうで，しかも「必要ない」という人の主張は「Linux ユーザは Windows や macOS に比べて規模が小さいから狙われにくい」という，これまた頭が悪いとしか言いようがないものらしい。\n「ウイルス」という表現は古臭くて的を得ていないので，この記事では色々ひっくるめて malware (malicious software) という表現に統一させてもらうが，ぶっちゃけて言うなら使っている OS にかかわらず「ユーザレベルでは malware 対策はセキュリティ管理の中核ではない」というのが多分正しい。\nじゃあ malware 対策は必要ないのかと言えば「さにあらず」で，しかしそういったものは外部化され不可視になっている。 今どきの言葉で言うなら “Security as a Service” とでもいうような状況である。 そしてそのプラットフォーム OS として Linux 等のセキュリティ要件はむしろ高まっていると言えるだろう。 今回 ClamAV を触ってみて感じたことだが，一般ユーザにとって ClamAV がちょっと残念な感じになっているのはサーバ用途に最適化されつつあるからではないかと思うのだ。\nセキュリティのトレンドは「防衛」中心から「監視」中心にシフトしていて，単純に malware をバラ撒いただけではすぐに検知され対策されてしまう。 故に攻撃側も時間をかけてでも密やかに確実にターゲットを追い詰める social engineering を駆使した各種ターゲティング攻撃へとシフトしている。\nPhishing メールやそれに含まれる malware 検知などはサービスプロバイダが（有料のものも含めて）やってくれるし， Web についても Phishing サイトやマイニング・コード等を含んだサイトはブラウザレベルでかなりいい感じにブロックできるようになりつつある3。 そういう意味で私にとって malware 対策ソフトは「うっかり転んだときのための少額保険」みたいなもので，それ以外ではあまり出しゃばって欲しくなかったりする。\n実際にそれまで使ってた Windows 7 でも “Microsoft Security Essentials” で必要十分な性能だったし ClamAV でも同程度の性能を満たしていれば，今回はそれでよかったのだ。 それがこんなに面倒臭いとは思わなかった。\nかといって malware 対策ソフトそのものに金銭は払いたくないし4，もうしばらく運用してから評価してみるですよ。\nブックマーク  The 8 Best Free Anti-Virus Programs for Linux  Linux向けアンチウイルスソフト8選 | マイナビニュース  Clam Antivirusに関するメモ ClamAV - Community Help Wiki ClamAVをUbuntu MATE 18.04 LTSにセットアップ Ubuntu 18.04 LTS DesktopでClamAVによるウィルスチェックを実行 – LAB4ICT ClamAV - ArchWiki\n Ubuntu16.04(さくらVPS)で１からcronの設定をし、pythonプログラムを定期実行する - Qiita\n   サービスのリスタートには sudo systemctl restart clamav-daemon.service とすればよい。 [return] ユーザ ID が分からない場合は id username とコマンドを打てば分かるだろう。 [return] はっきり言ってフェイク・ニュースなんかより Phishing ページなどセキュリティ・リスクの高いコンテンツに対する監視の方にもっとリソースを割いてほしいのだけど。かといって中間車攻撃で暗号通信を覗き見るなんてのは論外だが。 [return] Android 端末には F-Secure 社の FREEDOME を入れている FREEDOME 自体は VPN ソフトだが malware 対策機能も付いていて追跡コードもある程度ブロックしてくれる優れもの。実はこれの Linux 版があれば買ってもよかったのだがなかったのだ。仮想ネットワークについては I2P を試してみるか，と思っていたりする。 [return]   "
    },
    {
      "title": "2019-05-05 のブックマーク",
      "section": "bookmarks",
      "description": "「MOMO3号機の打ち上げは成功! 日本初の民間宇宙ロケットが誕生」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/05/05-bookmarks/",
      "published": "2019-05-05T04:06:16+00:00",
      "update": "2019-05-05T04:09:44+00:00",
      "content": " リリース情報  News: KeePass 2.42 available! - KeePass  セキュリティ＆プライバシー関連  A 'Blockchain Bandit' Is Guessing Private Keys and Scoring Millions | WIRED  Stealing Ethereum by Guessing Weak Private Keys - Schneier on Security  Docker Hubの不正アクセスについてまとめてみた - piyolog マイクロソフトはパスワードを期限切れにするポリシーの廃止を検討 | TechCrunch Japan アップルがスクリーンタイム監視アプリ削除の正当性を主張 | TechCrunch Japan A hotspot finder app exposed 2 million Wi-Fi network passwords – TechCrunch TVerの改ざんについてまとめてみた - piyolog あやしいソフトも安全・気軽に試せる「Windows サンドボックス」 - 窓の杜 3 reasons Google and Facebook may listen to you (and what you can do about it) - F-Secure Blog 「ac.jp」ドメインの審査不備問題についてまとめてみた - piyolog 「Google Chrome 74」に2件の脆弱性 - 窓の杜 There Used to Be An App For That – OurPact – Medium  Appleのペアレンタルコントロール機能を持つアプリ削除の説明はおかしい？ - iPhone Mania  Public-Interest Technology Resources  Cybersecurity for the Public Interest - Schneier on Security  アップルはプライバシーを重視しているが、iPhoneはそうでもない事実 | TechCrunch Japan : iPhone に限らず重視はしてないと思うぞ。 Apple の技術的・インフラ的にできないだけで，それを「プライバシー重視」などと言い換えているだけ 「Firefox」でインストール済みアドオンが利用不能になる問題が発生中 - 窓の杜  To re-enable all disabled non-system addons you can do the following. I am not r... | Hacker News : とりあえずの対応策  リレーアタック盗難から愛車を守る！自動車セキュリティの名門が開発したキーケース | AUTO MESSE WEB  天文関連  ブラックホールが放つ弾丸のようなプラズマから歳差運動の周期を解析 | sorae：宇宙へのポータルサイト MIT Tech Review: 巨大衝突による月の誕生に新説、地球はマグマで覆われていた？ 時には昔の話を - 国立天文台暦計算室 First Analysis of Asteroid Water Reveals Earth-Like Makeup - Eos MIT Tech Review: 小惑星が地球に衝突しそうになったらどうする？NASAなど模擬訓練 MOMO3号機現地取材(6) MOMO3号機の打ち上げは成功! 日本初の民間宇宙ロケットが誕生 | マイナビニュース  知財関連  オープンソース海賊版アドオンの「撲滅」は難しい、が…… – P2Pとかその辺のお話R CC Search is out of beta with 300M images and easier attribution - Creative Commons  その他  改元特番でＮＨＫだけが伝えた”不都合な真実”(水島宏明) - 個人 - Yahoo!ニュース Nature ハイライト：暑さの感受性：海生動物は陸生動物よりも気候温暖化に対して脆弱であることが示された | Nature | Nature Research Ubuntu 18.04 その328 - DellからUbuntu 18.04をプリインストールしたDell Precision 3540/3541登場 - kledgeb 英裁判所がウィキリークス創設者に50週の禁固刑 | TechCrunch Japan 高次元科学への誘い:Hiroshi Maruyama's Blog - CNET Japan Sass基礎 - Qiita Ubuntu 19.04 その30 - Snapストアからインストール可能なゲーム6選 - kledgeb : 微妙...  "
    },
    {
      "title": "「令」のゲシュタルト崩壊",
      "section": "remark",
      "description": "デザインの一部として書く（描く）なら，せめて楷書体にしてくれないだろうか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/gestaltzerfall-of-reiwa/",
      "published": "2019-05-05T02:49:46+00:00",
      "update": "2019-05-05T02:50:26+00:00",
      "content": "自慢じゃないけど，こちとら中3まで習字教室（書道ではないw）に通ってたですよ。 今回は「だからどうした」という話。\nいやね。 改元のお祭り騒ぎは（消費税増税前の一時的個人消費拡大という意味でも）結構なんだけどさ。 こうもアチコチで「令和」が連呼されるとゲシュタルト崩壊を起こしそうになるのよ。 特に「令」の字。\n元々の来歴はともかく，私達がふだん目にしている明朝体やゴシック体は活字印刷された文章で使うことを想定した書体なのですよ。 それに「領」とか「玲」とか「零」とかいった画数の多い字の一部としてみれば明朝体の「令」はよくできたデザインだと思う。 でもこの字だけを取り出すと「これじゃない」感が半端ないわけさ。\nデザインの一部として書く（描く）なら，せめて楷書体にしてくれないだろうか。\nと思ってフリーの楷書体フォントを探してみるも，なかなかないものだね。 近いもので以下のサイトを見つけた。\n 白舟書体 伝統的書体から遊び心溢れるデザイン筆文字のフォントまで  「使用許諾」によると個人サイトでデザインの一部として使うなら「追加契約・追加料金なしで可能」らしい。 というわけで，「白舟楷書教漢」書体と先日公開した「青空文庫」用の書影と組み合わせてみよう1。\n どや，楷書体かっこええやろ！ （CV 久川綾）\n カードキャプターさくら 1期+2期+3期 コンプリート DVD-BOX [Import] IDP DVD DVD ASIN: B004JSTW5S, EAN: 3760000568838 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  3期分合わせて4千円弱とか太っ腹！ まぁ私は Hulu で観るけどね。たまに観たくなるのよ。\nreviewed by Spiegel on 2019-05-05 (powered by amazon-item 0.2.1)\n  [改訂第7版]LaTeX2ε美文書作成入門 奥村 晴彦, 黒木 裕介 技術評論社 2017-01-24 Book 大型本 ASIN: 4774187054, EAN: 9784774187051 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。\nreviewed by Spiegel on 2017-09-27 (powered by amazon-item v0.2.0)\n  このブログは基本的に BY-SA ライセンスで公開しているが，この画像に関しては適用外とする。「白舟楷書教漢」書体の翻案扱いになりそうだし。フォントの利用については該当サイトへどうぞ。 [return]   "
    },
    {
      "title": "『気象がわかる数式入門』を立ち読みした",
      "section": "remark",
      "description": "こういう本は是非本棚に置いていつでも引っ張り出せるようにしておきたいものである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/meteorology-and-math/",
      "published": "2019-05-04T10:11:39+00:00",
      "update": "2019-05-04T10:20:16+00:00",
      "content": "長いお休みももう少しで終わり。 みなさん GW はいかがお過ごしですか。\nこの GW は天気がよかったので散歩がてら県立図書館へ行ってまったりとしていたのだが，また面白い本を見つけてしまったのですよ。\n なにこれ。面白そう！  その場でパラパラとページをめくって中身を確認し，ケータイを取り出して Amazon でポチりました（笑）\n最近はいい本がいっぱいあるんだなぁ。 これを子供の頃に読んでいれば...\n前にもどこかで書いたような気がするが，独学というのはどうしても「つまみ食い」になりがちで，ひとつのジャンルを体系的に学ぶのが難しい。\n私は科学と数学は相補的な関係にあると思っているが『気象がわかる数式入門』は数学と科学の間にある本という感じだろうか。 内容的には高校生物理くらいのレベルだと思うが基本的なことをきちんと押さえているので読んでても迷いにくい。 たぶん中学生くらいでも理解できるんじゃないかな。\nこの本と何か適当な数学書があれば完璧じゃないだろうか。 たとえば「数学ガール」シリーズ（微積分あたりの巻）とか（笑） こういう本は是非本棚に置いていつでも引っ張り出せるようにしておきたいものである。\nというわけで，今回は借りずに買ったのであった（ちなみに別の本を借りたのだが，それはまた後日）。\n 気象がわかる数式入門 二宮 洸三 オーム社 2006-07-01 Book 単行本 ASIN: 4274202712, EAN: 9784274202711 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  気象に入る前に「次元」や「単位系」といった基本中の基本の話から始まり，そこから誤差論（の最初のほう）とかだんだんと核心に入っていく。順番に読んでいけば無理なく「気象」を始めとする物理学の初歩が理解できるよう構成されている教科書的な内容。これが私の子供の頃にあったらなぁ。\nreviewed by Spiegel on 2019-05-04 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "Go モジュールの依存関係を可視化するツール ggm v0.2.0 をリリースした",
      "section": "release",
      "description": "前回作ったツールが思ったより有用なことに気がついて「これはちゃんとコードを書こう」と思い立った。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/05/ggm-0_2_0-is-released/",
      "published": "2019-05-04T09:09:55+00:00",
      "update": "2019-05-04T09:11:20+00:00",
      "content": " 前回「Go モジュールの依存関係を可視化するツールを作った」のだが，思ったより有用なことに気がついて「これはちゃんとコードを書こう」と思い立った。\nちうわけで，リリースしました。\n Release v0.2.0 · spiegel-im-spiegel/ggm  今回はちゃんとバイナリも用意しているぞ（笑）\n使い方はこんな感じ。\n$ ggm -h Usage: ggm [flags] [input file] Flags: -c, --config string Configuration file --debug Debug flag -h, --help help for ggm -v, --version Output version of ggm 前回と異なるのは -c オプションを付けたことか。 たとえば以下の内容で ggm.toml というファイルを作って\n[node] fontname = \u0026#34;Inconsolata\u0026#34; 以下のコマンドラインで DOT ファイルを生成すると\n$ go mod graph | ggm -c ggm.toml digraph G { ID = \u0026#34;G\u0026#34;; n1[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/spiegel-im-spiegel/ggm\u0026#34;]; n2[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/BurntSushi/toml\\nv0.3.1\u0026#34;]; n3[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/emicklei/dot\\nv0.9.3\u0026#34;]; n4[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/spf13/cobra\\nv0.0.3\u0026#34;]; n5[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/spf13/pflag\\nv1.0.3\u0026#34;]; n6[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/spiegel-im-spiegel/gocli\\nv0.9.5\u0026#34;]; n7[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;golang.org/x/xerrors\\nv0.0.0-20190410155217-1f06c39b4373\u0026#34;]; n1-\u0026gt;n2; n1-\u0026gt;n3; n1-\u0026gt;n4; n1-\u0026gt;n5; n1-\u0026gt;n6; n1-\u0026gt;n7; } てな感じで fontname 属性を仕込むことができる。 これを dot コマンドに流し込むと\n$ go mod graph | ggm -c ggm.toml | dot -Tpng -o ggm.png  ggm.png  てな風にフォントを Inconsolata にすることができるのですよ（勿論あらかじめフォントがインストールされていることが条件ね）。\n-c オプションで指定するファイルは TOML 形式で node と edge の属性を設定することができる。 ただし手抜き実装で属性名やその値の正しさについてはノーチェックなのでご注意を（つまり key=value で表されるものなら何でも入るw）。\n今回 DOT 言語用のビルダ・パッケージには github.com/emicklei/dot を利用している。 シンプルな設計で（簡単な図であれば）使い勝手がよい。\n本当は本家の Go コンパイラが DOT 言語で吐いてくれればこんなの要らないんだけどねぇ。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "Go モジュールのバージョン管理",
      "section": "golang",
      "description": "試して壊して試して壊して... を繰り返した成果が今回の記事である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/versioning-of-go-modules/",
      "published": "2019-05-04T04:08:19+00:00",
      "update": "2019-05-05T01:17:07+00:00",
      "content": " 今回の長期休暇を利用して今まで公開したツールやパッケージ類をチューニングしているのだが， Go 1.11 以降から実装されているモジュール対応モード（module-aware mode）のバージョン管理の挙動が（ドキュメントを読んだだけでは）ピンとこなかったので，この際いろいろと試してみることにした。\n試して壊して試して壊して... を繰り返した成果が今回の記事である1。 まとめは最後に書いておくのであしからず。\nみんな大好き Hello World まずは以下の簡単なパッケージを作ってみる。\nhello/ ├── go.mod └── hello.go go.mod ファイルの内容は以下の通り。 今回の記事では先頭行の module ディレクティブに注目する。 module ディレクティブはパッケージのモジュール・パスを定義するもので，このモジュールパスとバージョンのセットがモジュールの IDentity となる。\nmodule github.com/spiegel-im-spiegel/hello go 1.12 hello.go ファイルの内容は以下の通り。\npackage hello import \u0026#34;fmt\u0026#34; func Hello() { fmt.Println(\u0026#34;Hello World\u0026#34;) } このパッケージをリポジトリに push してバージョンタグ v1.0.0 を付ける。\nパッケージを使う側のコードも書いておこう。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; func main() { hello.Hello() } これを実行すると以下のようになる。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello v1.0.0 go: downloading github.com/spiegel-im-spiegel/hello v1.0.0 go: extracting github.com/spiegel-im-spiegel/hello v1.0.0 Hello World このとき，パッケージを使う側の go.mod は以下のようになっているはずである（モジュール名は適当）。\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello v1.0.0 前準備はこれで OK\nパッケージのバージョンを v2 にアップグレードする ではこの hello パッケージを少し弄ってみよう。 まずは安直に hello.go 関数を以下のように変更する。\npackage hello import \u0026#34;fmt\u0026#34; func Hello(name string) { fmt.Println(\u0026#34;Hello\u0026#34;, name, \u0026#34;by v2\u0026#34;) } Hello() 関数の後方互換性が失われたのでメジャーバージョンを上げることにしよう。 このコードを push してバージョンタグ v2.0.0 を付ける。\nこの新しいパッケージで使う側のコードを修正してみる。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; func main() { hello.Hello(\u0026#34;Golang\u0026#34;) } go.mod ファイルも直さないとね。\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello v2.0.0 これを実行すると以下のようになる。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello v2.0.0 go: downloading github.com/spiegel-im-spiegel/hello v0.0.0-20190503134808-f31e6a72de0f go: extracting github.com/spiegel-im-spiegel/hello v0.0.0-20190503134808-f31e6a72de0f Hello Golang by v2 ありゃりゃ。 v2.0.0 のモジュールを見つけたまではよかったが，ダウンロード時にバージョンタグを認識していない？\nここで思い出したのが Semantic Versioning のルールである。\n Semantic Import Versioning  ひょっとして v2 ディレクトリを切ったらいいのか？ 試してみよう2。\nv2 ディレクトリによる分離 先ほどのコミットはなかったことにして， hello パッケージの構成を以下のように変える。\nhello/ ├── go.mod ├── hello.go └── v2/ └── hello.go hello.go が v1 のコードで v2/hello.go が v2 のコードである。\nこのパッケージを使う側のコードも以下のように変える。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello/v2\u0026#34;  func main() { hello.Hello(\u0026#34;Golang\u0026#34;) } go.mod はこんな感じ？\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello/v2 v2.0.0 これで実行してみよう。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.0 go: github.com/spiegel-im-spiegel/hello/v2@v2.0.0: go.mod has non-.../v2 module path \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; (and .../v2/go.mod does not exist) at revision v2.0.0 go: error loading module requirements ええつと？ あぁ，そうか。 パッケージ側のv2/ ディレクトリにも go.mod ファイルがいるのか。\nんじゃあ，以下の内容の v2/go.mod ファイルを追加して v2.0.1 タグを付ける。\nmodule github.com/spiegel-im-spiegel/hello/v2 go 1.12 これでパッケージの構成は以下のようになった。\nhello/ ├── go.mod ├── hello.go └── v2/ ├── go.mod └── hello.go では，このパッケージを使って先ほどのコードを動かしてみよう。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: downloading github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: extracting github.com/spiegel-im-spiegel/hello/v2 v2.0.1 Hello Golang by v2 ようやく動いたよ... orz\nインポートパスをリダイレクトしたかったのだが... パッケージ側の構成はこれでいいとして，パッケージをインポートする側は\nimport \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; で v2 のコードを動かしたいよね。 というわけで go.mod を以下のように書いてみる。\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello/v2 v2.0.1 replace github.com/spiegel-im-spiegel/hello v2.0.1 =\u0026gt; github.com/spiegel-im-spiegel/hello/v2 v2.0.1 これで動かすとどうなるか。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello v2.0.1 go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: downloading github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: extracting github.com/spiegel-im-spiegel/hello/v2 v2.0.1 Hello Golang by v2 おっ，うまくいったっぽい？ でも go.mod ファイルを見てみると\nmodule work go 1.12 require ( github.com/spiegel-im-spiegel/hello v0.0.0-20190503144136-a8f02ef988d2 // indirect github.com/spiegel-im-spiegel/hello/v2 v2.0.1 ) replace github.com/spiegel-im-spiegel/hello v0.0.0-20190503144136-a8f02ef988d2 =\u0026gt; github.com/spiegel-im-spiegel/hello/v2 v2.0.1 てな感じに書き換えられてしまった。 ふむむむむ？\nどうもパッケージ内のディレクトリ名とバージョンタグを暗黙的に関連付けているようだ。 なので v2.x タグは hello/v2/ ディレクトリに関連付けられてしまう。\n たとえば同じリビジョンに v1.0.1 タグを付ければ\n という感じで hello/ ディレクトリにもバージョンタグが割り当てられる。 もっともそれで\nmodule work go 1.12 require ( github.com/spiegel-im-spiegel/hello v1.0.1 github.com/spiegel-im-spiegel/hello/v2 v2.0.1 ) replace github.com/spiegel-im-spiegel/hello v1.0.1 =\u0026gt; github.com/spiegel-im-spiegel/hello/v2 v2.0.1 としたところで更なる混乱を招くだけだけどね。\n“Malformed Module Path” ならば，旧い v1 の方を別ディレクトリに移動すればいんじゃね？ って思うよね。 私は思った。\nで，パッケージ側を\nhello/ ├── go.mod ├── hello.go └── v1/ ├── go.mod └── hello.go という構成にし，呼び出す側の go.mod ファイルを\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello v1.0.1 replace github.com/spiegel-im-spiegel/hello v1.0.1 =\u0026gt; github.com/spiegel-im-spiegel/hello/v1 v1.0.1 とかやってみたんだけど\ninvalid module version github.com/spiegel-im-spiegel/hello/v1: malformed module path: github.com/spiegel-im-spiegel/hello/v1 とか言われたですよ。 いや “malformed module path” て orz\n結局 モジュール対応モード下でメジャー・バージョンを上げたならモジュール・パスも変えるしかない ということらしい。\nv2 ブランチを切って運用する とはいえバージョンごとに物理的にディレクトリを切って運用するというのは今時ありえないダサさである。 そこで物理的にディレクトリを切るのではなくリポジトリ上でブランチを切って運用することを考える。\nパッケージのディレクトリ構成は v1 と同じ。\nhello/ ├── go.mod └── hello.go これに対して v2 ブランチを切り， v2 ブランチ上で go.mod を以下のように変更する。\nmodule github.com/spiegel-im-spiegel/hello2/v2  go 1.12 モジュールのパスと物理パスが異なっている が気にしないで先に進む。 hello.go を\npackage hello import \u0026#34;fmt\u0026#34; func Hello(name string) { fmt.Println(\u0026#34;Hello\u0026#34;, name, \u0026#34;by v2\u0026#34;) } として go.mod とともに v2 ブランチに commit \u0026amp; push し，バージョンタグ v2.0.0 を付与する。\nパッケージを使用する側のコードは以下の通り。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello/v2\u0026#34; func main() { hello2.Hello(\u0026#34;Golang\u0026#34;) } これを実行すると\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.0 go: downloading github.com/spiegel-im-spiegel/hello/v2 v2.0.0 go: extracting github.com/spiegel-im-spiegel/hello/v2 v2.0.0 Hello Golang by v2 という感じでうまく動いたようだ。 go.mod の内容も\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello/v2 v2.0.0 // indirect となっていた。 よーし，うむうむ，よーし。\nブランチとモジュール・パスの関係は以下のような感じだろうか。\n まとめると...  v1 以降，メジャーバージョンを上げる度にモジュール・パスを変更して管理を分ける  v2.x なら path/to/module/v2 などとする。最後の v2 がポイント パスの最後がバージョン番号（v2 など）になっていれば，暗黙的にバージョンタグが対応する  モジュール・パスを変更するには go.mod ファイルの module ディレクティブを変更する  物理的にディレクトリを切るのであれば go.mod ファイルも含める バージョンごとにブランチを切って管理するのであれば，各ブランチの go.mod ファイルで指定するモジュール・パスに注意する  パッケージを利用する側はリポジトリの物理パスとモジュール・パスが異なる場合があるため go.mod ファイルに記述されているモジュール・パスを確認する 同一パッケージの異なるメジャー・バージョンのモジュール・パスを replace で繋がないこと。更に分かりにくくなるか指定によってはエラーになる  といったところだろうか。\nバージョンごとにパッケージのパスを分けるため gopkg.in といったサービスが使われることがあるが，リポジトリの物理パスとモジュール・パスが異なる場合は注意が必要である。 うまくパッケージをダウンロードできない場合は go.mod ファイル内に\nreplace gopkg.in/russross/blackfriday.v2 v2.0.1 =\u0026gt; github.com/russross/blackfriday/v2 v2.0.1 といった記述が必要になるかもしれない（というかそれが元々の replace ディレクティブの機能）。\nブックマーク  モジュール対応モードへの移行を検討する  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  実際にはこの記事で書いた量の三倍くらいは試して壊して... を繰り返している。 [return] ちなみに v0 から v1 へのアップグレード時にはこのようなことは起きない。一般的に v0 系はベータ版と認識されていて後方互換性については煩くない。 Go 言語のモジュール対応モードでもチェックが入らないようだ。言い方を変えると v1 以降は（Semantic Versioning に従うなら）後方互換性についてちゃんと考えないといけないってこともであるのだが。バージョン設計と運用は意外と難しい？ [return]   "
    },
    {
      "title": "「人生はスタートの繰り返し」",
      "section": "remark",
      "description": "「頑張ること」を頑張るなど「頑張る」の無駄遣いである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/endless-starting/",
      "published": "2019-05-03T00:54:37+00:00",
      "update": "2019-05-03T01:23:45+00:00",
      "content": "「人生はスタートの繰り返し」と言ったのは長田佳奈さんの『2KZ』だったかな。 「数学ガールの秘密ノート」の最近の連載「確率の冒険」を読む度に連想するのはこのフレーズである。\nところで Facebook の TL で\n 頑張れなかった人達の増加スピードが人の寿命を上回っている｜Yasunori Okajima｜note  という記事が紹介されていて， TL 上の（紹介された方の）コメントも合わせて面白くはあるのだが，私はむしろこの記事自体に「もやつく」ので脊髄反射的にこの記事を書いてみる。\n私は三十歳代半ばでちょっと死にかけてそれまでの生活を変えざるを得なくなった。 思考スピードと記憶力の低下を明確に感じるようになったのは四十歳代半ば頃である。 諸々の事情で「職業エンジニア」を諦めたのは五十歳代半ばの現在である。\n歳をとれば肉体的に衰えるのは当然で，しかも「自分は自分が考えるようには考えない」ことに気がつくのもけっこう歳いってからだったりする。 その度にひとつづつ何かを諦めるのだが，それは「頑張れなかった」からではない。\n上で示した記事を見ても思うのだが，みんな「頑張ること」を頑張ってないかい？ それは間違い。 「仕事を頑張ってる自分」に耽溺するのは workaholic といって嗜癖問題の一種である。\n若いうちは無茶もできるし何でもできる気分に浸れるが，肉体的に衰え脳の働きも衰えれば必然的に「頑張る」という希少リソースをどう配分するかが問題になる。 「頑張ること」を頑張るなど「頑張る」の無駄遣いである。\n役割が異なれば使うツールも異なって当たり前。 管理職になったんならドキュメントなんか部下に書かせろよ。 そしてドキュメントを書いた部下とその成果を正しく評価すればよい。 メールや Slack 等のチャットに時間を使うのも無駄。 それならば，そうしたコミュニケーション・ツールで交わされる会話を要約するコードを書かせて普段はそれを使うべき。 これからは AI の時代なんだろ。 AI にメールやチャットを任せればくだらない時候の挨拶とかもなくなるだろう（笑）\n「降りる」ことは悪いことではない。 むしろ降りたほうが賢明なこともある。 「頑張る」は希少リソースなのだから。 そして「次」を希望するならまたスタートし直せばいいのだ。\n「人生はスタートの繰り返し」である。 人生のあらゆる局面が「一発勝負」なら人類は永遠に進化できない。 繰り返すからこそ確率と統計に意味があるのである。\nどんな境遇でも「またスタートすればいい」と期待できるうちは人生はそれほど悪いものではないし，そう思えるよう「社会」を設計すべきである。\n 2KZ (ぶんか社コミックス) 長田佳奈 ぶんか社 (Release 2015-06-22) eBooks Kindle版 ASIN: B0105ZQSEQ 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  名作。私も座敷わらしになりたい（笑） 連載はちゃんと完結したのに単行本は最後まで収録されなかったのが悔やまれる。2巻を出すか長田佳奈さんの他の作品に入れてほしい。\nreviewed by Spiegel on 2019-05-03 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "Go モジュールの依存関係を可視化するツールを作った",
      "section": "release",
      "description": "main.go いっこだけの簡単なお仕事（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/05/ggm/",
      "published": "2019-05-02T09:33:20+00:00",
      "update": "2019-05-02T09:34:02+00:00",
      "content": " Ubuntu に graphviz をインストールしたので「何か動作確認できるものはないかなぁ」と思い Go モジュールの依存関係を可視化するツールを作ってみた。\n spiegel-im-spiegel/ggm: Graph of Go Modules  main.go いっこだけの簡単なお仕事（笑）\nダウンロードとインストールは以下の通りでよい（モジュール・モードがオンの場合）。\n$ go get github.com/spiegel-im-spiegel/ggm@latest これで作成される ggm コマンドへ go mod graph の結果を流し込む。\n$ go mod graph | ggm digraph gomod { N1-\u0026gt;N2; N1 [ label=\u0026#34;github.com/spiegel-im-spiegel/ggm\u0026#34; ]; N2 [ label=\u0026#34;github.com/awalterschulze/gographviz\\nv0.0.0-20190221210632-1e9ccb565bca\u0026#34; ]; } これを更に dot コマンドに流し込んで画像ファイルを出力する。\n$ go mod graph | ggm | dot -Tpng -o ggm.png 結果は以下の通り。\n ggm.png  DOT 言語への変換は簡単なので直接書いてもよかったが，今回は awalterschulze/gographviz パッケージを使ってみた。 これ，色々と応用できるかもねぇ。\nちなみに Go のソースコードから UML 図（PlantUML）を生成するツールは以下の方が公開しておられる。\n kazukousen/gouml: Automatically generate PlantUML from Go Code. GoのコードからPlantUMLコードを生成する静的解析ツールを作っている - 日記マン  感謝！\nブックマーク  Graphvizとdot言語でグラフを描く方法のまとめ - Qiita\n “go mod graph” を視覚化する : 今回のツールの元ネタ。\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "ビンボー人は TODO をやってはいけない",
      "section": "remark",
      "description": "富裕層は経済力でリスクを回避し経済力で「時間」を買う。ビンボー人はそれ以外の方法でリスクを回避し時間を作り出すしかない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/no-todo-no-life/",
      "published": "2019-05-02T06:07:38+00:00",
      "update": "2019-05-02T06:07:54+00:00",
      "content": "タイトルは釣りです，もちろん。\n富裕層は経済力でリスクを回避し経済力で「時間」を買う。 ビンボー人はそれ以外の方法でリスクを回避し時間を作り出すしかない。\n昨年末の引っ越しを Trollo で管理してみて痛感したが， TODO 管理の目的は「TODO をなくす」ことである。\nTODO 管理を行うにあたって最初にやることは TODO を列挙しトリアージしていくことだが，大雑把に以下の3つに分類できるだろう。\n 必ずやらなければならないこと いつかやらなければならないが優先順位の低いこと やりたいこと  これを縦軸として，横軸に時間（有効期限）を加えたものが TODO 全体の分布になる（縦横の向きはどっちでもいいけど）。\nで，この中に「毎日必ずやらなければならないこと」が存在する筈である。 例えば日常の家事など。 そういったものに時間を割り当てていくと「毎日必ずやらなければならないこと」に殆ど「時間」が奪われてしまうか，場合にとっては「時間」が足りないことに気がつくだろう。 いわゆる「日常に忙殺される」ってやつで「やりたいこと」ができる未来など何処にも見えないのである。\nこれを改善しないまま TODO 管理を続けていくと，それがどんなに優れたワークフローであっても，必ず破綻する。 しかし改善するには「必ずやらなければならないこと」を減らすしかないのだ。\n最初に述べたように，富裕層は「毎日必ずやらなければならないこと」を減らすために経済力を使う。 たとえば，家事はヘルパーさんを雇う，仕事上の雑事も秘書を雇う，移動に時間がかかるなら自家用飛行機を買う，といった感じに。\nじゃあ経済力が使えないビンボー人はどうするか。 「毎日必ずやらなければならないこと」を複数人で分け合うか，それもできないならオミットするしかない！\nポイントは TODO を遂行するために自身やその時間を売り渡すのではなく TODO のほうを削り落とすことである。 ほんでもって，これこそが「断・捨・離」の本質だと私は思う。 「本棚にあふれる本を捨ててスッキリ」なんてのはただの気分の問題であり，何の解決にもなっていないのだ。\n「持たざる人」が唯一所有できるのが自分自身とその時間であるなら，それを搾取する存在（TODO）を近づけてはいけない。\n モモ (岩波少年文庫) ミヒャエル・エンデ, 大島 かおり 岩波書店 2005-06-16 (Release 2017-07-20) eBooks Kindle版 ASIN: B073PPWX7L 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  そういえばこの作品を紹介してくれたのは同じ学科の先輩だった。それからハマってミヒャエル・エンデの作品を買いまくったんだよなぁ。あの頃は若かった。まぁ当時の本は殆ど処分したけど。\nreviewed by Spiegel on 2019-05-02 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "gpgpdump v0.5.1 をリリースした（v0.5.2 もリリースした）",
      "section": "release",
      "description": "リテラルパケットのファイル名に含まれる改行コードなどの制御コードを符号点表示に展開するようにした。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/05/gpgpdump-v0_5_1-is-released/",
      "published": "2019-05-01T04:37:53+00:00",
      "update": "2019-05-01T08:39:43+00:00",
      "content": " OpenPGP パケットの内容を視覚化する gpgpdump の v0.5.1 をリリースした。\n Release v0.5.1 · spiegel-im-spiegel/gpgpdump · GitHub  今回はバグ修正（？）版。\nいや OpenPGP のメーリングリストで以下の記事が流れてきたのだが\n Spoofing OpenPGP and S/MIME Signatures in Emails  GnuPG の脆弱性の話なんて昨年のことだし他の問題にしたって MUA の実装上の不具合ではあろうけど脆弱性とは言い難いし「なんだかなぁ」という感じで眺めていたのだが，「リテラルパケット（tag11）については gpgpdump も対処しておいたほうがいいかな」と思い立ち修正してみた。\n具体的にはリテラルパケットのファイル名に含まれる改行コードなどの制御コードを (U+000A) のように符号点表示に展開するようにした。 制御コードの判定には Go 言語標準の unicode.IsControl() 関数を使っている（手抜き実装w）。\n他にも UTF-8 以外の文字エンコーディングの場合は \u0026quot;invalid text string\u0026quot; と表記するようにした。 まぁ Shift-JIS とか EUC とか軒並み引っかかっちゃうんだけど，もう気にしないことにした（今までだって文字化けしてまともに表示できなかった筈）。\nそれにしても Ubuntu は快適だね。 今まで Windows で作業してたのが馬鹿みたいだよ。 Microsoft が今後 PWA (Progressive Web Apps) へのシフトを進めていくと Windows はどんどん「コントローラ (Progammable Controller) 」になっていくだろうし，そうなると「パソコン (Personal Computer) 」と言えるのは macOS や Ubuntu のような UNIX 系のデスクトップ OS だけになるかもしれないねぇ1。\n【追記】 gpgpdump v0.5.2 をリリースした v0.5.1 をリリースしたばっかだが v0.5.2 を出した。\n Release v0.5.2 · spiegel-im-spiegel/gpgpdump · GitHub  いやぁ，よく考えたらリテラルのテキストを扱うのはリテラルパケットだけじゃなかった。 ちうわけでコード内を浚って生データをそのまま string にキャストして出力してる部分を修正した。 アホだなぁ，私。\nこれで大丈夫なはず。\n参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) eBooks Kindle版 ASIN: B015643CPE 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by amazon-item v0.2.0)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  と考えると Windows のサブシステムに Linux を入れたのは本当にお馬鹿な選択だったと言わざるを得ない。包含関係が逆だよ。 Linux 環境下で Windows がサブシステムとして動作できるようにしないと。 [return]   "
    }
  ]
}
