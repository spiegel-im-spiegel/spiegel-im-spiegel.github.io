{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "time.Time の比較が覚えれん！",
      "section": "golang",
      "description": "一覧表にしておこう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/order-by-time/",
      "published": "2020-09-07T02:16:53+00:00",
      "update": "2020-09-07T02:28:00+00:00",
      "content": "時刻を表す time.Time 型は比較演算子（==, \u0026gt;, \u0026lt; 等）が使えないので Equal(), Before(), After() 各メソッドが用意されているのだけど， Equal() メソッドはともかく Before() や After() は覚えれんっちうの！\nまぁドキュメントを見れば済む話なのだが，毎回「どうだっけ？」と探すのもナニなので，この際，記事として纏めておくことにした。\nまずはコードを書いてみる。 これ基本。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { year2000 := time.Date(2000, 1, 1, 0, 0, 0, 0, time.UTC) year3000 := time.Date(3000, 1, 1, 0, 0, 0, 0, time.UTC) fmt.Printf(\u0026#34;year3000.After(year2000) = %v\\n\u0026#34;, year3000.After(year2000)) fmt.Printf(\u0026#34;year3000.Before(year2000) = %v\\n\u0026#34;, year3000.Before(year2000)) fmt.Printf(\u0026#34;year2000.After(year3000) = %v\\n\u0026#34;, year2000.After(year3000)) fmt.Printf(\u0026#34;year2000.Before(year3000) = %v\\n\u0026#34;, year2000.Before(year3000)) } これの実行結果は\n$ go run sample1.go year3000.After(year2000) = true year3000.Before(year2000) = false year2000.After(year3000) = false year2000.Before(year3000) = true となる。 a.After(b) は「a は b の後か？」と覚えればいいかな。\nやっぱ面倒くさい。 一覧表にしておこう。\n 関係 メソッド 返り値   $a = b$ a.Equal(b)true a.Before(b)false a.After(b)false $a \\lt b$ a.Equal(b)false a.Before(b)true a.After(b)false $a \\gt b$ a.Equal(b)false a.Before(b)false a.After(b)true    【サンプル】時刻のソート もう少し「ありそう」なサンプルを考えてみよう。 たとえば，以下のようなデータセット eraList があるとする。\ntype Era struct { Name string Start time.Time } var ( jst = time.FixedZone(\u0026#34;JST\u0026#34;, 9*60*60) eraList = []Era{ {Name: \u0026#34;令和\u0026#34;, Start: time.Date(2019, time.May, 1, 0, 0, 0, 0, jst)}, {Name: \u0026#34;平成\u0026#34;, Start: time.Date(1989, time.January, 8, 0, 0, 0, 0, jst)}, {Name: \u0026#34;昭和\u0026#34;, Start: time.Date(1926, time.December, 25, 0, 0, 0, 0, jst)}, {Name: \u0026#34;大正\u0026#34;, Start: time.Date(1912, time.July, 30, 0, 0, 0, 0, jst)}, } ) この eraList を時刻の昇順で並べ替えてみる。 こんな感じかな。\nfunc (e Era) String() string { return fmt.Sprintf(\u0026#34;%s (from %s)\u0026#34;, e.Name, e.Start.Format(\u0026#34;2006-01-02\u0026#34;)) } func main() { fmt.Println(eraList) sort.Slice(eraList, func(i, j int) bool { return eraList[i].Start.Before(eraList[j].Start) \t}) fmt.Println(eraList) } 結果は以下の通り。\n$ go run sample2.go [令和 (from 2019-05-01) 平成 (from 1989-01-08) 昭和 (from 1926-12-25) 大正 (from 1912-07-30)] [大正 (from 1912-07-30) 昭和 (from 1926-12-25) 平成 (from 1989-01-08) 令和 (from 2019-05-01)] よーし，うむうむ，よーし。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "次期 Go 言語で導入される（かもしれない） io/fs パッケージについて予習する",
      "section": "golang",
      "description": "ツリー型のディレクトリ・ファイル構成のファイルシステムを操作するパッケージに対して統一した interface 型を提供して互換性を高めようというわけだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/file-system-interface-in-go-2/",
      "published": "2020-09-06T07:18:45+00:00",
      "update": "2020-09-06T07:22:09+00:00",
      "content": "先日行われた “Go 1.15 Release Party in Japan” で紹介されていた File System Interfaces のドラフト案について予習がてら覚え書きとして記しておく。\n File System Interfaces for Go — Draft Design    io/fs draft design - YouTube  たとえば /path/to/filename.txt のようにツリー型のディレクトリ・ファイル構成のファイルシステムは多い。 メジャーな OS のファイルシステムは大抵そうだし Web のパスや書庫ファイル（*.tar や *.zip など）もツリー型のディレクトリ・ファイル構成になっている。\nたとえば Go の標準パッケージ\n archive/zip html/template net/http os text/template  などは（ほぼ）同じツリー型だが使い方やメソッド名などが微妙に異なっている。 またサードパーティ製のパッケージでは， rakyll/statik のように，実行モジュールにディレクトリ・ファイルをまるっと埋め込めるものもあったりする1。\nこういったパッケージに対して統一した interface 型を提供して互換性を高めようというわけだ。 したら，テストとかもやり易くなるしね（笑）\nfs.FS 型と fs.File 型 ドラフト案では io/fs パッケージを新たに作ってファイルシステムの汎化を定義するようだ。\nまず，ファイルシステムの汎化型 fs.FS は以下のように定義するらしい。\ntype FS interface { Open(name string) (File, error) } また fs.FS.Open() メソッドの返り値になっている fs.File 型は\ntype File interface { Stat() (os.FileInfo, error) Read([]byte) (int, error) Close() error } と定義される。\nたとえば，通常のファイルの読み書きについて\ntype myFS struct{} func NewFS() fs.FS { return \u0026amp;myFS{} } func (fsys *myFS) Open(name string) (fs.File, error) { return os.Open(name) } みたいに定義すれば\nfunc main() { f, err := NewFS().Open(\u0026#34;no-exist.txt\u0026#34;) if err != nil { fmt.Println(err) return } defer f.Close() //Output:  //open no-exist.txt: no such file or directory } てな感じに書ける。 どやさ！\nちなみにディレクトリ区切り文字はスラッシュ “/” で（実際のファイルシステムに関わらず）統一するらしい。 また相対パス指定で “.” や “..” は使えないようにするようだ。 まぁ，実際にはパス変換関数とか必要になるかもしれないね。\nファイルシステム・インタフェースの拡張 上述の説明だと「http.FileSystem 型を使えばええんちゃうん？」となる。 実際 http.FileSystem 型は\ntype File interface { io.Closer io.Reader io.Seeker Readdir(count int) ([]os.FileInfo, error) Stat() (os.FileInfo, error) } type FileSystem interface { Open(name string) (File, error) } と定義されているため fs.FS / fs.File 型とほぼ変わらない2。\n駄菓子菓子。\nio/fs パッケージでは拡張機能を定義した型も用意するらしい。\nたとえばファイル情報を取得する Stat() メソッドを含む\ntype StatFS interface { FS Stat(name string) (os.FileInfo, error) } や，ディレクトリエントリを読む機能を含む\ntype ReadDirFS interface { FS ReadDir(name string) ([]os.FileInfo, error) } といった interface 型も用意されている。\n他にもファイルの内容を一括で読み込める\ntype ReadFileFS interface { FS ReadFile(name string) ([]byte, error) } や Glob() メソッドが使える\ntype GlobFS interface { FS Glob(pattern string) ([]string, error) } も用意するようだ。 実際にはこれらの interface 型を組み合わせて使うことになると思われる。\nブックマーク  Draft designを読む · GitHub rakyll/statik でシングルバイナリにまとめる  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   実行モジュールにディレクトリ・ファイルを埋め込めるパッケージとしては jteeuwen/go-bindata や jessevdk/go-assets が有名だが，これらは最早メンテナンスされていないので使わないほうがいい。 \u0026#x21a9;\u0026#xfe0e;\n たとえば rakyll/statik パッケージではファイルシステムの生成・初期化関数 fs.New() の返り値は http.FileSystem 型である。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-09-06 のブックマーク",
      "section": "bookmarks",
      "description": "「AWSが「Bottlerocket」を一般提供--Rust指向のコンテナー向けLinux」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/09/06-bookmarks/",
      "published": "2020-09-06T01:42:48+00:00",
      "update": "2020-09-06T01:44:33+00:00",
      "content": "リリース情報  LibreOffice 7.0.1 available for download - The Document Foundation Blog Release 8.8.0 · mermaid-js/mermaid · GitHub  バベルのインターネット  インド政府、中国製アプリの取り締まり強化\u0026ndash;新たに118種類を禁止に - ZDNet Japan  セキュリティ＆プライバシー関連  従業員へ賄賂を渡し脅迫目的で不正アクセスを企んだ米国の事件についてまとめてみた - piyolog AWS、「Java 8」を2026年まで、「Java 11」は2027年まで、現行より3年サポート期間延長を発表。独自JavaディストリビューションのCorretto 8とCorretto 11で － Publickey テスラの車にはネット経由で一斉にリモート操作できる脆弱性があった - GIGAZINE Zoomがブラウザに保存されたCookieをアンインストール時に操作していることが判明 - GIGAZINE FASTCash 2.0: North Korea\u0026rsquo;s BeagleBoyz Robbing Banks | CISA  North Korea ATM Hack - Schneier on Security   noteのIPアドレス漏洩と同様のリスクを持つSNS ID漏洩が修正されたので、何が起きてたかをまとめます。｜榊原昌彦｜note NSAによる大規模な通話記録の収集は「違法」\u0026ndash;裁判所が判断 - ZDNet Japan 「OpenSSL」の脆弱性、その存在すら気付かれないまま放置されている可能性も？【海外セキュリティ】 - INTERNET Watch 情報セキュリティ白書2020：IPA 独立行政法人 情報処理推進機構 Insider Attack on the Carnegie Library - Schneier on Security Safariで｢ファイルを勝手に共有してしまう｣脆弱性が発覚。被害を防ぐには？ | ライフハッカー［日本版］ Hacking AI-Graded Tests - Schneier on Security  天文関連  News | A “bang” in LIGO and Virgo detectors signals most massive gravitational-wave source yet | LIGO Lab | Caltech 若い惑星の公転面は傾いていない？：惑星系の進化に新知見 | 観測成果 | すばる望遠鏡 プレスリリース - 三つ子星のまわりで見つかった、互い違いの原始惑星系円盤 - アルマ望遠鏡  知財関連    フリーソフトウェアとそれを取巻く世界の状況 (2007) – とりあえずノートがわりに書いてます   Download Shepard Fairey\u0026rsquo;s Creative Commons Logo Remix - Creative Commons  その他  Android向けホーム画面アプリ「Microsoft Launcher 6.2」が配信開始 - 窓の杜 「Internet Explorer」来年終了は誤解です！ でももう削除しちゃってもいいんじゃない？ - 高橋忍のにゃんともWindows - 窓の杜 constant package · pkg.go.dev 2020年8月31日ニュース「新型コロナ患者で起きる免疫暴走の引き金物質を発見 阪大グループ」 | SciencePortal Bootstrap Icons · Official open source SVG icon library for Bootstrap  Bootstrapにとって初めての独自アイコン集「Bootstrap Icons」バージョン1.0が初公開 － Publickey   Optimal Management of a Pandemic in the Short Run and the Long Run  長期および短期のパンデミックの最適管理 - himaginary’s diary   GoogleがBigQueryを安価に提供できる理由は、Borgによる大規模分散コンテナ環境があるから － Publickey cocoa-mhlw/cocoa  Covid-19Radar/Covid19Radar: Open Source / Internationalization/ iOS Android Cross Platform Contact Tracing App by exposure notification framework Xamarin App and Server Side Code   New Case Studies About Google’s Use of Go | Google Open Source Blog liamg/furious: Golang IP/port scanner with SYN (stealth) scanning and device manufacturer identification Linuxカーネル、29年の歴史を振り返るレポート\u0026ndash;コミット数は100万超 - ZDNet Japan AWS、コンテナ実行に最適化したLinux OS「Bottlerocket」正式版リリース － Publickey  AWSが「Bottlerocket」を一般提供\u0026ndash;Rust指向のコンテナー向けLinux - ZDNet Japan   Googleアカウントを持たないユーザーとも、G Suiteのドキュメントやスプレッドシートを共有、編集可能に － Publickey 『サクラ大戦』新作アプリ『サクラ革命』事前登録開始！ 開発・運営はディライトワークス、時代は太正100年、ジャンルはRPG - ファミ通.com 2020年9月3日ニュース「日本の南近海の海面水温上昇で台風勢力強まる恐れ 8月は3海域で最高水温と気象庁」 | SciencePortal 2020年9月2日ニュース「イネの根の張り方を制御する遺伝子発見 塩害対策に期待」 | SciencePortal 「GitHub Container Registry」パブリックベータとしてサービス開始。無料でコンテナのパブリックイメージ公開可能 － Publickey Kubernetes 1.19正式版がリリース。Ingress APIが正式版に、サポート期間は9カ月を1年に延長 － Publickey If everyone hates it, why is OOP still so widely spread? - Stack Overflow Blog  ブログ: 皆が嫌っているのに、なぜOOPが未だに広く普及しているのか?   The database I wish I had  ブログ: 私が欲しいと思うデータベース   Planning the 2021 Roadmap | Rust Blog マイクロソフト、次期Windows ServerでHTTP/3のベースとなるQUICプロトコル搭載、UDPやTCP性能も向上へ － Publickey 任天堂が往年のゲーム＆ウォッチをマリオ版としてカラー画面・USB-C化でリメイク、11月13日に5478円で発売 | TechCrunch Japan 2020年9月4日ニュース「再生可能エネルギー時代に電気の品質を安定させる制御法を開発 慶大など」 | SciencePortal IIJ、「Windows Virtual Desktop」のフルマネージドサービスを提供 - ZDNet Japan : 企業向け，個人では無理かな Webアクション「部屋裏のバイテン」第5話 : ぽじとろんの竹本泉観察記  "
    },
    {
      "title": "GnuPG 2.2.23 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "知らない人の鍵はインポートしないように（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/09/gnupg-2_2_23-is-released/",
      "published": "2020-09-04T03:45:27+00:00",
      "update": "2020-09-04T03:45:51+00:00",
      "content": "GnuPG 2.2.23 がリリースされた。\n [Announce] [security fix] GnuPG 2.2.23 released  以下の脆弱性の改修を含む。\n Importing an OpenPGP key having a preference list for AEAD algorithms will lead to an array overflow and thus often to a crash or other undefined behaviour. via GnuPG 2.2.23 released  CVE ID は（まだ？）割り振られていないようだ。 ちなみに 2.2.20 以下のバージョンには影響しない。\nAEAD (Authenticated Encryption with Associated Data; 認証付き暗号) は次期 OpenPGP (RFC 4880bis) で導入予定の暗号モードで，先行して GnuPG に組み込まれている。 インパクトも可用性リスクのみと思われる。\nなので，殆どの人には影響はないと思うが，実験的に最新 GnuPG を試しておられる人はご注意を。 また，知らない人の鍵はインポートしないように（笑）\nアップデートは計画的に。\nブックマーク  OpenPGP の実装  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "それはコミュニケーションぢゃない，グルーミングだ！",
      "section": "remark",
      "description": "コミュニケーションの巧拙が問題なのではなく，そもそもコミュニケーションを始めるに至ってないということだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/affordance-dependent-context/",
      "published": "2020-09-03T03:27:26+00:00",
      "update": "2020-09-03T03:27:54+00:00",
      "content": "最近チラホラと「ハイコンテキスト文化」「ローコンテキスト文化」みたいなフレーズを聞くので「？？？」と思っていたが，いわゆる「リモートワーク」が日本で上手く行かない言い訳として使われているようだ。\n 「在宅勤務は生産性ダウン」と感じる人、日本はトップ　10カ国平均大きく上回る　レノボ調査で明らかに - ITmedia NEWS 日本人が「在宅勤務は生産性ダウン」と感じる理由 - hogehoge, world.  最初に「ハイコンテキスト文化／ローコンテキスト文化」なるフレーズを唱えた人の意図は知らないが（興味ない），そもそも「文脈」のない対話や集団間コミュニケーションは存在しない。 とすれば，そのコミュニケーションに横たわる「文脈」はどこに存在するのか，という話になる。\nところで，私が実家に帰郷って一番イライラするのは家族と「文脈」を共有できないことである。 まぁ，30年以上も離れて暮らしてたのだから当たり前っちゃあ当たり前なのだが。\n駄菓子菓子！\n！主語を省くな！目的語を省くな！述語を省くな！ あー，イライラする（笑）\n\u0026hellip;気を取り直して。\n日本語は構造上「文脈」を言外に置かざるを得ない。 たとえば年寄りの話す出雲弁では一人称も二人称も「わー」である。 「わー」が誰を指すのかは言外の文脈に依存する。 日本語におけるこの手の話は，それこそゴマンと存在している。\nそれじゃあ，継続的なコミュニケーションにおいて言外の「文脈」はどこに置かれるかというと，空間的・心理的な「場」である。 そして「文脈」が共有される「場」は「意味」を得てアフォーダンス（affordance）となる。\nだから「ハイコンテキスト」というフレーズは恐らく適当ではなくて，むしろ「アフォーダンス依存コンテキスト」とでも言うべきだろう。 アフォーダンスは境界が明確であるほど，そして内部に横たわる文脈が曖昧であるほど同調圧力も依存性も強くなる。 秘密結社的（笑）\nしかし，インターネットのようなフラットな空間ではアフォーダンスを形成しにくい。 このような状況で人が執る行動は概ね以下の2つだ。\n 「文脈」をコード化・明文化して共有する 擬似的なアフォーダンスを形成して内外を区別（包摂と排除）する  まぁ，大抵の集団は後者を選択するのだろう。 そもそも SNS 等のサービスはそのために存在するんだし。 その様子は例えば『つながりっぱなしの日常を生きる』あたりを読むと分かりやすいかもしれない。\nで，日本のビジネスでは，アフォーダンスを形成するためにまず「電子メールに時候の挨拶を書く」「Zoom 画面の上座を決める」等々のグルーミングから始めるらしい1。\nそんな茶番 (グルーミング) を見せられれば「在宅勤務は生産性ダウン」と感じてもしょうがないよね。 オフラインでは「何となく」行われているグルーミングがオンラインで「見える化」しちゃうわけだから。 つまり，コミュニケーションの巧拙が問題なのではなく，そもそもコミュニケーションを始めるに至ってないということだ。\n一方，インターネットはそもそも前者の「『文脈』をコード化・明文化して共有する」ことを前提に設計されている。\nそういえばシステム・プログラミング設計の「オブジェクト指向」の派生に「コンテキスト指向」というのがある。 簡単に言うと，オブジェクト間・ドメイン間・レイヤ間を跨ぐコンテキストを明文化・コード化する設計指針だ。 コンテキストを明示することでオブジェクト・ドメイン・レイヤといった境界を定義し，それぞれの独立性を担保できる。\n逆に言うとコンテキストが曖昧な設計は「境界」も「関係」も曖昧になり，最悪「動かないシステム」になりかねない。 まぁ，設計の初歩だよね（笑）\nてな風に考えると「アフォーダンス依存コンテキスト」に慣れすぎている日本人ってめっさ不利なんじゃないだろうか。 前々から「プログラミング教育よりもっとすることがあるだろう」と思っていたが，今回のような観点からも考えてみるべきかもしれない。\n参考文献  つながりっぱなしの日常を生きる：ソーシャルメディアが若者にもたらしたもの ダナ・ボイド (著), 野中 モモ (翻訳) 草思社 2014-10-09 (Release 2015-07-21) Kindle版 B0125TZSZ0 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  読むのに1年半以上かかってしまった。ネット，特に SNS 上で自身のアイデンティティやプライバシーを保つにはどうすればいいか。豊富な事例を交えて考察する。\nreviewed by Spiegel on 2016-05-10 (powered by PA-APIv5)\n  ソーシャル・ネットワーク (字幕版) ジェシー・アイゼンバーグ (出演), アンドリュー・ガーフィールド (出演), ジャスティン・ティンバーレイク (出演), アーミー・ハマー (出演), マックス・ミンゲラ (出演), David Fincher (監督), Scott Rudin (プロデュース), Dana Brunetti (プロデュース), Michael De Luca (プロデュース), Cean Chaffin (プロデュース)  (Release 2013-11-26) Prime Video B00FW5SSCK (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この映画が公開された当時（2011年）は日本でも Facebook が一般（特に年配層）に浸透し始めていたときで，スクリーン上の狂騒に苦笑したものだが，その Facebook が広告まみれの駄システムに堕ちてしまうとは誰も思わなかっただろうな（笑）\nreviewed by Spiegel on 2019-04-14 (powered by PA-APIv5)\n  秘密結社の世界史　フリーメーソンからトランプまで、その謎と陰謀 (朝日文庫) 海野　弘 (著) 朝日新聞出版 2017-06-07 (Release 2017-07-07) Kindle版 B073PT6WDB (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  文庫本版がでてたのか。古代から現代にかけての「結社」の系譜を俯瞰的に解説している。読み物として面白かった。\nreviewed by Spiegel on 2019-04-14 (powered by PA-APIv5)\n   日本ではこうしたグルーミングを「マナー」と呼んでる（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "「EightKnot:8の字結び」いただきます",
      "section": "remark",
      "description": " 私としては「お彼岸までに届けばいいな」くらいに軽く考えていたが，早速今日 JP の冷蔵便で届いたですよ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/eight-knot/",
      "published": "2020-09-02T12:47:04+00:00",
      "update": "2020-09-02T13:41:52+00:00",
      "content": "島根にも美味しいお酒は色々あるのだけど，やっぱ広島に30年以上もいると山陽（岡山・広島・山口）側のお酒が恋しくなるのよ。\nそういう状態で岩国の村重酒造さんがクラウド・ファンディングを募ってると聞いて知らぬ顔ができようか（いや，ない！：反語）\n 昨年の2019年から新体制となり若手蔵人達だけでの醸造が始まりましたが、この度の新型ウイルスの影響で幸先が悪いスタートとなり、売上げが著しく激減し経営に甚大な損害をもたらしております。\n[\u0026hellip;]\nそこで、新商品『eight knot エイトノット』の販促活動の一環としてクラウドファンディングを活用させていただき、新商品の周知徹底と来期酒米の購入代金を確保し、商品に対するユーザー様の反応を伺いながら今後の商品開発やマーケティングへと繋げ、蔵の危機を脱することを目的として考えております。\n Makuake｜若手蔵人達の挑戦！幻のきょうかい8号酵母を使用した日本酒『eight knot』｜マクアケ - クラウドファンディングより  なんと！ 目標額（20万円）に対して1300%以上の出資をかき集めたそうで，9月に入って早速「リターン」の配送が始まったようだ。 私としては「お彼岸までに届けばいいな」くらいに軽く考えていたが，早速今日 JP の冷蔵便で届いたですよ。 ソッコーでビックリ！\nといっても，五十路にしてパラサイト・シングルまっしぐらで，4月から絶賛失業中の私には最低ラインの出資額が精一杯でして，リターンは以下の2本。\n岩国の村重酒造さんによるクラウドファンディングの成果キター | Flickr  説明によると\n 「白練」 は、ほのかなストロベリー系の香りと爽やかな酸味が特徴でスルスルと飲みやすい酒質に仕上げました。蔵人のオススメ温度帯は10℃〜15℃です。白ワイングラスでもお楽しみいただけます。\n「藤黄」 は、ほのかなストロベリー系・ショコラ系の香りと柔らかな酸味が特徴で「白練」よりもややコクがあるのが特徴です。蔵人のオススメ温度帯は15℃〜20℃です。火入れは人肌燗〜ぬる燗にしてもお楽しみいただけます。\n Makuake｜若手蔵人達の挑戦！幻のきょうかい8号酵母を使用した日本酒『eight knot』｜マクアケ - クラウドファンディングより  とのこと。 早速「藤黄」からいただきました。\nEight Knot 早速いただきました | Flickr  まず香りが凄い！ 「藤黄」は生酛造りと書いてあったのでもっと濃厚なイメージだったのだが，確かにフルーティかつコクのある味だけど，酸味のせいか飲み口がスッキリしていて，和食に合う感じ。 これだけのものを出せる「きょうかい8号酵母」がマイナーとか勿体ないよなぁ。\nあぁ，やっぱ日本酒はいいわ。 日本生まれで普通に日本酒が飲める幸せ。\nそうそう。 「白練」は冷蔵庫に置いておいてお彼岸にいただきます。 楽しみ！\n"
    },
    {
      "title": "Go 1.15.1 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "CVE-2020-24553 の改修を含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/09/go-1_15_1-is-released/",
      "published": "2020-09-02T03:58:47+00:00",
      "update": "2020-09-02T03:59:14+00:00",
      "content": "先週の予告通り， Go 1.15.1 がリリースされた。\n [security] Go 1.15.1 and Go 1.14.8 are released  以下の脆弱性の改修を含んでいる。\nCVE-2020-24553  When a Handler does not explicitly set the Content-Type header, the net/http/cgi and net/http/fcgi packages would default to “text/html”, which could cause a Cross-Site Scripting vulnerability if an attacker can control any part of the contents of a response. via [security] Go 1.15.1 and Go 1.14.8 are released  以下未稿。\n例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.15.1.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する（もしくは自力でコンパイルするか）。\nhttps://golang.org/dl/go1.15.1.linux-amd64.tar.gz\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.15.1.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.15.1.linux-amd64.tar.gz $ sudo mv go go1.15.1 $ sudo ln -s go1.15.1 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.15.1 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020年9月の暦",
      "section": "remark",
      "description": "来月は火星最接近。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/ephemeris/",
      "published": "2020-09-01T13:54:19+00:00",
      "update": "2020-09-01T13:54:52+00:00",
      "content": "2020年9月も spiegel-im-spiegel/koyomi パッケージを作って暦を浚ってみる。 なお spiegel-im-spiegel/koyomi パッケージは v0.1.4 をリリースしている。 まぁ，外部パッケージのバージョンを上げただけだけど。\n国立天文台のデータを使っているため，暦象の基準が日本の暦になっている点に注意。\n   日付 内容     2020-09-02 望(満月)   2020-09-07 白露   2020-09-10 下弦   2020-09-10 火星が留   2020-09-12 海王星が衝   2020-09-13 木星が留   2020-09-17 朔(新月)   2020-09-19 彼岸の入り   2020-09-21 敬老の日   2020-09-22 秋分の日   2020-09-22 秋分   2020-09-24 上弦   2020-09-29 土星が留    天象 各用語の意味は以下の通り。\n   天象 - 国立天文台暦計算室より  「留」とは「惑星の地心視赤経の時間変化が0、すなわち赤経方向の動きが止まる瞬間」，もっと簡単に言うと天球上の（見かけの）惑星の動きが反転する瞬間を指す。\n火星が見頃（10月に最接近） 地球から見て火星は2年2ヶ月毎に接近する。 今年は火星が 2020-10-06 が最接近日となる。 つっても中接近くらいだけど。\n8月くらいから見頃になっていて，あちこちの天文系サイトで映像等が上がっている。 探してみるのも面白いだろう。\n秋分とお彼岸 現在の定義では「秋分の日」の定義は「太陽黄経が180°になる瞬間を含む日」である。\n   暦Wiki/季節/二十四節気の定め方 - 国立天文台暦計算室より  そして秋分の日を挟む前後3日が「お彼岸」となる。 ちなみに今年の「彼岸の入り」は 2020-09-22 である。\n実は最近まで知らなかったのだが，春分・秋分を「彼岸の中日」と定めたのは天保暦以後のことらしい。 天保暦以前はこんな感じ。\n   暦法 -5 -4 -3 -2 -1 春秋分 +1 +2 +3 +4 +5 +6 +7 +8 宣明暦\n貞享暦        入り   中日   明け  宝暦暦\n寛政暦 入り   中日  （春分） 明け             入り （秋分）  中日   明け     天保暦\n現在   入り   中日   明け         暦Wiki/季節/雑節とは？ - 国立天文台暦計算室より  宣明暦・貞享暦は「どうしてそうなった」って感じ（笑）\nコード 今回使用したコードは以下の通り。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/koyomi\u0026#34; ) func main() { start, _ := koyomi.DateFrom(\u0026#34;2020-09-01\u0026#34;) end, _ := koyomi.DateFrom(\u0026#34;2020-09-30\u0026#34;) k, err := koyomi.NewSource( koyomi.WithCalendarID( koyomi.Holiday, koyomi.MoonPhase, koyomi.SolarTerm, koyomi.Eclipse, koyomi.Planet, ), koyomi.WithStartDate(start), koyomi.WithEndDate(end), ).Get() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;| 日付 | 内容 |\u0026#34;) fmt.Println(\u0026#34;| ---- | ---- |\u0026#34;) for _, e := range k.Events() { fmt.Printf(\u0026#34;| %v | %v |\\n\u0026#34;, e.Date, e.Title) } } ブックマーク   暦Wiki/季節/雑節とは？ - 国立天文台暦計算室\n  2020年の主な暦象\n  日本の暦情報を取得するパッケージを作ってみた\n  参考図書  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n "
    },
    {
      "title": "Thunderbird 78 系で GnuPG を使う【ただし不完全】",
      "section": "remark",
      "description": "GnuPG を使えるように設定した場合は公開鍵も秘密鍵も GnuPG の鍵束から取るようにしてよ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/using-gnupg-in-thunderbird-78/",
      "published": "2020-09-01T12:16:51+00:00",
      "update": "2020-09-01T12:30:45+00:00",
      "content": "以前に「Thunderbird 78 で OpenPGP 署名・暗号化を行うのは 78.2 まで待て」とアナウンスがあったので大人しく待ってたわけさ。 んで，満を持して 78.2 がリリースされたので試してみたのだが GnuPG の鍵束を認識しないのよ。\n「あれー？」と思っていたのだが，どうやら Thunderbird は既定で GnuPG をサポートしないことにしたらしい。\n Thunderbird no longer uses the external GnuPG software. Previously, all your own keys and the keys of other people were managed by GnuPG, and Enigmail offered you to view, use and manage them. Now that Thunderbird uses a different technology, it’s necessary to perform a migration of your existing keys from GnuPG into Thunderbird’s own storage (inside the Thunderbird profile directory). Thunderbird will uses its own copy of the keys, sharing your keys between Thunderbird 78 and GnuPG currently isn’t supported. via Thunderbird:OpenPGP:Migration-From-Enigmail - MozillaWiki  しかも Autocrypt も p≡p もサポートしないようだ。\nまじすか orz それなら Enigmail は残しておいてほしかった\u0026hellip;\nThunderbird で GnuPG を有効にする \u0026hellip;気を取り直して。 Thunderbird でも GnuPG が使えるように一応の救済措置はある1。\nまずは「設定エディタ」で\n mail.openpgp.allow_external_gnupg  項目を探す。\n これを true に反転させれば GnuPG の鍵束も見てくれるようだ。 ここまでは簡単。\nアカウントに GnuPG 秘密鍵を登録する ではメール・アカウント毎に GnuPG 秘密鍵を登録しよう。 図中の個人情報部分はマスクしてるけど，あしからず。\nまず「アカウントの設定」の「エンドツーエンド暗号」を開く。 すると\n てな感じになってるので，この状態で「鍵を追加\u0026hellip;」ボタンを押す。 すると\n こんなダイアログが開くので「GnuPG 経由で外部の鍵を利用」をチェックして「続ける」ボタンを押す。 すると\n てな画面になる。 ここでアカウントに対応する鍵の鍵 ID をセットして「鍵 ID を保存」ボタンを押す（ユーザ ID ではなく必ず鍵 ID をセットすること）。\nこれで\n てな感じに GnuPG 秘密鍵を登録することができた。\nThunderbird からは GnuPG 鍵束の公開鍵は参照できない 上述の方法で登録できるのは秘密鍵機能（復号および電子署名）のみで，公開鍵機能（暗号化および署名検証）を使うには Thunderbird 側の鍵ストレージに登録するしかないようだ。 しかも Thunderbird 側の鍵ストレージに同じ鍵 ID で公開鍵を登録しておかないと GnuPG 側の秘密鍵も使えないという頭の悪さ。\nThunderbird 側の鍵ストレージに公開鍵を登録するには「OpenPGP 鍵マネージャー」を開いて\n 「鍵サーバー」からインポートするか「ファイル」メニューから公開鍵ファイルをインポートすればよい。 あるいは Web ページ上に直接公開鍵を置いてある場合は「編集」メニューの「URL から鍵をインポート」でもインポートできる。\nDRY 原則 いやさ。 GnuPG を使えるように設定した場合は公開鍵も秘密鍵も GnuPG の鍵束から取るようにしてよ。 同じ鍵なのにアプリケーションによって置き場所が異なるというのは DRY 原則2 に反すると思うのだが\u0026hellip;\nGnuPG はメール暗号化の専用ツールじゃないんだよ。 Linux 系のパッケージ・マネージャでも使われてるし git や LibreOffice でも連携して使う。 Peer-to-peer でフリーな暗号基盤として広く使われてるものなのだから，もっとちゃんとしようよ。\nそれでもまだ使えない 以上で概ね OpenPGP 署名・暗号化機能が使えるようになったのだが，何故か私の Gmail アカウントだと上手く行かないんだよなぁ。 具体的には Thunderbird の鍵ストレージに公開鍵を流し込んでも認識してくれず，暗号化や署名検証ができない。 Thunderbird 上で新規に鍵を作ってもダメ。\nまぁ，最近は電子署名だけでメールの暗号化は滅多に使わないので，鼻の先は困らないのだが\u0026hellip; 先は長い。 sigh\u0026hellip;\nブックマーク  Thunderbird:OpenPGP:Migration-From-Enigmail - MozillaWiki Thunderbird:OpenPGP:Smartcards - MozillaWiki 「OpenPGP」がデフォルトで有効化された「Thunderbird 78.2.1」がリリース - 窓の杜 : OpenPGP 鍵の生成から暗号メールの作成まで簡単に解説している。 GnuPG がなくても問題ない OpenPGP の実装  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n   Thunderbird で GnuPG が使えるように機能を残しておいたのは，暗号化機能をドライブする RNP ライブラリでは OpenPGP スマートカードを上手く扱えないからのようだ。 \u0026#x21a9;\u0026#xfe0e;\n 念のために説明すると DRY (Don\u0026rsquo;t Repeat Yourself) 原則というのは，同じ意味を持つ情報やデータを複数に散らばせないというシステム設計や開発環境の指針を指すものである。よくコーディングで同じ記述を繰り返すのを避ける意味で DRY 原則を持ち出す人がいるが，あちらには OAOO (Once And Only Once) 原則という名前が付いている。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "gpgpdump v0.9.0 をリリースした",
      "section": "release",
      "description": "draft-ietf-openpgp-rfc4880bis-10 がリリースされたので，その反映。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/09/gpgpdump-v0_9_0-is-released/",
      "published": "2020-09-01T04:35:34+00:00",
      "update": "2020-09-01T04:36:10+00:00",
      "content": "OpenPGP パケットの内容を可視化する gpgpdump の v0.9.0 をリリースした。\n Release v0.9.0 · spiegel-im-spiegel/gpgpdump · GitHub  使い方は以下を参照のこと。\n OpenPGP パケットを可視化する gpgpdump  今回の主な変更は， draft-ietf-openpgp-rfc4880bis-10 がリリースされたので，その反映。\n大きい変更としては “Key Block” サブパケットの追加があるのだが\n This subpacket MAY be used to convey key data along with a signature of class 0x00, 0x01, or 0x02. It MUST contain the key used to create the signature; either as the primary key or as a subkey. The key SHOULD contain a primary or subkey capable of encryption and the entire key must be a valid OpenPGP key including at least one User ID packet and the corresponding self-signatures. via draft-ietf-openpgp-rfc4880bis-10  例によってサンプルがないので「こんな感じかなぁ」と適当に実装している。 再帰処理になるので，もしかしたらパニクるかもしれない。 あらかじめゴメンペコン。\nブックマーク  OpenPGP の実装  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    }
  ]
}
