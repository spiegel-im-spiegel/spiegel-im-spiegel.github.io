{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Hugo 0.55 リリースでまた後方互換性が壊れた",
      "section": "hugo",
      "description": "しょうがないので shortcode を設計し直したですよ orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/hugo/broken-backward-compatibility-by-hugo-0_55/",
      "published": "2019-04-13T10:05:15+00:00",
      "update": "2019-04-13T10:13:31+00:00",
      "content": " Shortcode の仕様変更 Hugo 0.45 のときは組み込み shortcode である ref/relref の仕様変更だったが，今回は shortcode そのものの仕様が変更になった。\n Hugo 0.55.0: The early Easter Egg Edition! | Hugo  Shortcodes using the {{% %}} as the outer-most delimiter will now be fully rendered when sent to the content renderer (e.g. Blackfriday for Markdown), meaning they can be part of the generated table of contents, footnotes, etc. via Hugo 0.55.0: The early Easter Egg Edition!  具体的な例を挙げたほうが分かりやすいだろう。\nたとえば文章を \u0026lt;div\u0026gt; 要素で囲むだけの簡単な shortcode “div-box” を作ってみる。 コードはこんな感じ。\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;{{ .Inner }}\u0026lt;/div\u0026gt; この div-box を使って\n{{\u0026lt; div-box \u0026gt;}}**Hello world!**{{\u0026lt; /div-box \u0026gt;}} と書けば .Inner 変数の内容がそのまま展開されて\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;**Hello world!**\u0026lt;/div\u0026gt; となる。 ここで\n{{% div-box %}}**Hello world!**{{% /div-box %}} と書き換えると，以前のバージョンでは\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;strong\u0026gt;Hello world!\u0026lt;/strong\u0026gt;\u0026lt;/div\u0026gt; のように .Inner 変数の内容が markdown の文法に従って変換されていたのが， 0.55 からは {{\u0026lt; \u0026gt;}} と同じように\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;**Hello world!**\u0026lt;/div\u0026gt; と素通ししてしまうのだ。 もし markdown として処理したければ shortcode 側で\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;{{ .Inner | markdownify }}\u0026lt;/div\u0026gt; と .Inner 変数の内容を markdownify 関数に渡して明示的に変換する必要がある1。\nなんでこんなことになったかというと，地の記述と連動しているらしい。 たとえば span という名前で以下の内容の shortcode をつくる。\n\u0026lt;span\u0026gt;{{ .Inner }}\u0026lt;/span\u0026gt; 表の中でこの span を使うと\n| 強調したい | | ---------- | | {{\u0026lt; span \u0026gt;}}**強調**{{\u0026lt; /span \u0026gt;}} | | {{% span %}}**強調**{{% /span %}} |    強調したい     **強調**   強調    という感じに {{\u0026lt; \u0026gt;}} と {{% %}} で違いが生じる。\nHugo のテンプレート処理は内部で文脈情報を持っているようで，同じ記述でもどの要素の中で書かれるか（\u0026lt;head\u0026gt; 要素か \u0026lt;body\u0026gt; 要素か，あるいは JavaScript か CSS か）で出力が違ったりする。 おそらく shortcode の {{% %}} 記述でも同じように文脈依存で出力が変わるようにしたかったのだろう。\nでも，私は .Inner 変数の展開を {{\u0026lt; \u0026gt;}} か {{% %}} かで使い分けていたので，今回のアップデートで大ダメージを食らってしまったですよ。 しょうがないので shortcode を設計し直したけどね orz\n後方互換性が壊れる変更は（少なくとも最初は）オプトインで組み込めるようにして欲しい。\nShortcode の入れ子ができてる 今回いろいろ弄っていて気がついたのだが，いつの間にか shortcode の入れ子ができるようになってたんだね。 いつのバージョンからだろう。\nたとえば\n{{% div-box %}}{{% ruby \u0026#34;Hello world!\u0026#34; %}}こんにちは世界{{% /ruby %}}{{% /div-box %}} と書くと\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;ruby\u0026gt;\u0026lt;rb\u0026gt;こんにちは世界\u0026lt;/rb\u0026gt;\u0026lt;rp\u0026gt; (\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;Hello world!\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;) \u0026lt;/rp\u0026gt;\u0026lt;/ruby\u0026gt;\u0026lt;/div\u0026gt; こんにちは世界 (Hello world!)  などとできるようになっていた。 入れ子記述は {{\u0026lt; \u0026gt;}} でも {{% %}} でもできる。 {{\u0026lt; \u0026gt;}} と {{% %}} 混在でもOK。\nちなみに ruby は自作の shortcode で中身はこんな感じ。\n\u0026lt;ruby\u0026gt;\u0026lt;rb\u0026gt;{{ .Inner }}\u0026lt;/rb\u0026gt;\u0026lt;rp\u0026gt; (\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;{{ index .Params 0 }}\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;) \u0026lt;/rp\u0026gt;\u0026lt;/ruby\u0026gt; 特に権利は主張しないので（するほどの内容じゃないし）自由に使ってください。\nDeprecated な変数・関数 Hugo 0.55 を起動すると以下のワーニングが出るようになった。\n$ hugo WARN 2019/04/13 09:00:00 Page\u0026#39;s .Hugo is deprecated and will be removed in a future release. Use the global hugo function. WARN 2019/04/13 09:00:00 Page\u0026#39;s .RSSLink is deprecated and will be removed in a future release. Use the Output Format\u0026#39;s link, e.g. something like: {{ with .OutputFormats.Get \u0026#34;RSS\u0026#34; }}{{ .RelPermalink }}{{ end }}. WARN 2019/04/13 09:00:00 Page\u0026#39;s .GetParam is deprecated and will be removed in a future release. Use .Param or .Params.myParam. テンプレート内で .Hugo, .RSSLink 変数および .GetParam 関数が使われていると上記ワーニングが出る。\n.Hugo 変数では Hugo のバージョン情報や \u0026lt;head\u0026gt; 要素に埋め込む generator メタデータなどを取得できるが，今のところ代替手段が提供されてないっぽい。 ので，バッサリ削除することにした。 ドキュメントに\nWe highly recommend using .Hugo.Generator in your website’s \u0026lt;head\u0026gt;. .Hugo.Generator is included by default in all themes hosted on themes.gohugo.io. The generator tag allows the Hugo team to track the usage and popularity of Hugo. via Hugo-specific Variables | Hugo  って書いてあるんだけどねぇ。\n.RSSLink 変数は既に代替手段が用意されている。 たとえば \u0026lt;head\u0026gt; 要素内なら\n{{ with .Site.Home.AlternativeOutputFormats.Get \u0026#34;RSS\u0026#34; }} \u0026lt;link rel=\u0026#34;alternate\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; type=\u0026#34;application/rss+xml\u0026#34; title=\u0026#34;{{ $.Site.Title | plainify }}\u0026#34;\u0026gt; {{ end }} と書けばいいし \u0026lt;head\u0026gt; 要素以外なら\n{{ with .OutputFormats.Get \u0026#34;RSS\u0026#34; }} \u0026lt;a href=\u0026#39;{{ .RelPermalink }}\u0026#39; title=\u0026#39;Feed\u0026#39;\u0026gt;Feed\u0026lt;/a\u0026gt; {{ end }} などと書けばいいようだ。\n.AlternativeOutputFormats および .OutputFormats 変数はかなり応用範囲が広くて，たとえば私はフィードを JSON 形式でも用意しているが，\n{{ with .Site.Home.AlternativeOutputFormats.Get \u0026#34;JSON\u0026#34; }} \u0026lt;link rel=\u0026#34;alternate\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; type=\u0026#34;application/json\u0026#34; title=\u0026#34;{{ $.Site.Title | plainify }}\u0026#34;\u0026gt; {{ end }} などと書けば簡単に \u0026lt;head\u0026gt; 要素に組み込める。\n.GetParam 関数については随分前からアナウンスがあったので使っている人はいないと思うが .Param 関数で代替できる。\nブックマーク  Shortcodes で HTML コードを埋め込む   もうひとつの方法としてはテンプレート・ファイルの先頭で {{ $_hugo_config :={ \u0026quot;version\u0026quot;: 1 }}} と呪文を唱えることで 0.55 以前の動作に戻る。が，これ将来バージョンで無効になるよなぁ，多分。 [return]   "
    },
    {
      "title": "Go 1.12.3 がリリースされた",
      "section": "release",
      "description": "この前 1.12.2 が出たばかりなんだけどね。 Linux 環境の方は要アップデート。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/04/go-1_12_3-is-released/",
      "published": "2019-04-09T12:32:01+00:00",
      "update": "2019-04-09T12:49:03+00:00",
      "content": " この前 1.12.2 が出たばかりだが Go 1.12.3 リリースされた。 セキュリティ・アップデートはなし。\n Go 1.12.3 and Go 1.11.8 are released - Google Group   go1.12.3 (released 2019/04/08) fixes an issue where using the prebuilt binary releases on older versions of GNU/Linux led to failures when linking programs that used cgo. Only Linux users who hit this issue need to update.   via Release History - The Go Programming Language  というわけで Linux 環境の方はアップデートしたほうがいいだろう。\nアップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "指紋認証と FaceID は解除せよ",
      "section": "remark",
      "description": " セキュリティのために「個人の自由」を売り渡してはいけないのだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/remove-fingerprint-unlock-and-faceid/",
      "published": "2019-04-08T13:54:17+00:00",
      "update": "2019-04-08T13:57:02+00:00",
      "content": " タイトルは釣りです，もちろん。\nEFF から面白い記事が出てた。\n Attending a Protest | Surveillance Self-Defense  この記事は抗議行動を含む市民活動においてセキュリティないしはプライバシーのリスクとなりうるものを軽減するためのアドバイスである。 日付が4月1日になってたのでエイプリルフールネタかと思ったのだが，どうもマジ話らしい。\n英語不得手なので記事の全部を紹介することは出来ないが “Before the Protest” の節だけちょろんと紹介しよう（だれか翻訳しないかな。ちなみに原文は CC BY で公開されている）。\nEnable full-disk encryption on your device まぁ，これは当然だよね。\n抗議活動以前に携帯端末は紛失・盗難のリスクが高い。 （犯罪者だろうが国家だろうが）データを盗もうとする側は「貴方」の携帯端末に気を遣ったりしない。 最悪の場合，端末をぶっ壊してでもデータを吸い上げようとするだろう。\n注意しないといけないのは外部ストレージ（SD カードなど）の暗号化は別途行わなければならないということ。 あるいはそういったものの暗号化が出来ないかもしれない。\nもっと言うとストレージの暗号化が出来るデジカメはあまりないらしい。\n In addition, many digital cameras lack the ability to encrypt. It is safe to assume that photos and videos taken with digital cameras will be stored unencrypted, unless explicitly stated otherwise.  本気で携帯端末を暗号化するのはけっこう大変かもしれない。\nRemove fingerprint unlock and FaceID つい先日も Twitter か Facebook の TL で書いたような気がするが，いわゆる生体情報（biometric）は秘密情報ではない。 故に生体情報を認証に使うべきではない。\n生体情報を認証に使うのなら相手（犯罪者かもしれないし国家かもしれない）はそれを取得するために躊躇なく物理的手段を講じるだろう1。 グミで指紋のコピーを作ったりどっかから顔写真を入手する必要はない。 本人を連れてきて無理やり認証してしまえばいいのだ。 本人が抵抗するなら首か手首を切り取ってしまえばいいのだ2。\n In the U.S., using a biometric—like your face scan or fingerprint—to unlock your phone compromises protections for the contents of your phone afforded to you under the Fifth Amendment privilege against compelled incrimination. A police officer may try to intimidate you into “consenting” to unlock your phone, whether you use a biometric or a memorized passcode. But if you exercise your right to refuse and biometric unlocking functionality is turned on, an officer may physically force you to biometrically unlock your device.  アメリカめっさ怖いな！ いや，日本でも（昨今のケーサツの暴走っぷりから考えると）ありうる話かもしれないが。\nInstall Signal 「信号」じゃなくてセキュリティ・ツールの Signal ね。\n Signal · GitHub  最近のバージョンではグループチャットも出来るようになったらしい。\nSignal の利点は会話履歴をネット上のどこにも残さない点である。 存在しないデータは取得しようがない。\n In 2016, a grand jury in the Eastern District of Virginia issued a subpoena to Open Whisper Systems, the developers of Signal. Because of the architecture of Signal, which limits the user metadata stored on the company’s servers, the only data they were able to provide was \"the date and time a user registered with Signal and the last date of a user's connectivity to the Signal service.\"  つまり，ユーザが「Signal を使った」という履歴は残るけど，会話の内容は一切記録されないというわけだ。\n私も Signal をメインのメッセージング・アプリとして使っている。 Facebook の Messenger は削除した。 スマホ標準の SMS アプリと置き換えることもできるので，まずはそこから始めてみてもいいだろう。\nBack up your data まぁこれも当たり前。 バックアップ先が商用のクラウドストレージでは意味がないからね（国家はサービス・プロバイダに命令できる）。\nBuy a prepaid, disposable phone アメリカではプリペイド SIM を買うのに ID を提示しなくていいらしい。 なんと羨ましい。\n In the United States, at the time this guide was written, current federal regulation does not require you to show your ID to purchase a prepaid SIM card (but your state might). Most countries require you to provide a form of ID to purchase a prepaid SIM card, thus linking the card to your identity and removing the possibility of anonymity.  しかし，そうするといわゆる「プリペイド携帯」を買えって話になるけど，日本ではプリペイド携帯も身分の提示が必要になるんじゃなかったっけ。 つか，そもそもプリペイド携帯って今も売ってるのか？ 最近の状況を知らないのでよく分からない。\n“Attending a Protest” には「機内モードを有効にしろ（Enable airplane mode）」とも書かれていて，普段はケータイを機内モードにしておけば少なくとも行動追跡のリスクは減るかも知れない。\n国家は国家のためにしか駆動しない 「自分の身は自分で守れ」というのはいかにもアメリカらしいなぁ，と思ったりする。\nしかし結局のところ，国家は国家のためにしか駆動しない。 個人である私達を守れるのは最終的に私達自身しかいないのだ。\nそういう意味で「プライバシー」は「個人の自由」を守るための大切な権利である，という点は忘れてはいけないと思う。 セキュリティや利便性のために「個人の自由」を売り渡してはいけないのだ。 「それは、ぜったいに、ぜったいです」。\nブックマーク  クーリエ連載；エコノミスト紹介、自由のためなら人が死んでもいい  参考図書  もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo 達人出版会 2017-12-25 評価\u0026nbsp;       WirelessWire News 連載の書籍化。感想はこちら\nreviewed by Spiegel on 2018-12-31\n  グリゴリの捕縛 白田 秀彰 青空文庫 2001-11-26 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30\n  セキュリティはなぜやぶられたのか ブルース・シュナイアー 井口 耕二 (翻訳) 日経BP社 2007-02-15 Book 単行本 ASIN: 4822283100, EAN: 9784822283100 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by amazon-item 0.2.1)\n  もちろん，そうするだけのインセンティブがあればの話だよ。鵜呑みにしないように（笑） [return] 海外では実際にそういう事例があった。指紋認証が使える高級車を盗むためにオーナーの指を切り取ったそうだ。 [return]   "
    },
    {
      "title": "PPA から Git をインストールする",
      "section": "remark",
      "description": "Git に関しては PPA (Personal Package Archive) で最新版のビルドを提供されている方がいるらしい。ありがたや。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/install-git-from-ppa/",
      "published": "2019-04-07T15:12:49+00:00",
      "update": "2019-04-07T15:13:02+00:00",
      "content": " 前回で OpenSSH と GnuPG を連携させたのでようやく git で遊べるようになった。\nしかし，実際にコマンドを叩いてみたら\n$ git version Command \u0026#39;git\u0026#39; not found, but can be installed with: sudo apt install git またかよ。 嫌な予感しかしない。\n$ sudo apt show git Package: git Version: 1:2.19.1-1ubuntu1.1 Priority: optional Section: vcs Origin: Ubuntu ... やっぱり。 2.21.0 が出たのってだいぶ前だよな。\nいろいろ調べてみたら git に関しては PPA (Personal Package Archive) で最新版のビルドを提供されている方がいるらしい。 ありがたや。\n Git stable releases : “Ubuntu Git Maintainers” team  何故か add-apt-repository は既に入ってるぽかったので，まずはリポジトリを導入しよう。\n$ sudo add-apt-repository ppa:git-core/ppa The most current stable version of Git for Ubuntu. For release candidates, go to https://launchpad.net/~git-core/+archive/candidate . 詳しい情報: https://launchpad.net/~git-core/+archive/ubuntu/ppa [ENTER] を押すと続行します。Ctrl-c で追加をキャンセルできます。 ヒット:1 http://jp.archive.ubuntu.com/ubuntu cosmic InRelease 取得:2 http://jp.archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB] ヒット:3 http://archive.ubuntulinux.jp/ubuntu cosmic InRelease 取得:4 http://jp.archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB] ヒット:5 http://archive.ubuntulinux.jp/ubuntu-ja-non-free cosmic InRelease 取得:6 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB] 取得:7 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic InRelease [20.7 kB] 取得:8 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic/main i386 Packages [3,032 B] 取得:9 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic/main amd64 Packages [3,032 B] 取得:10 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic/main Translation-en [2,248 B] 281 kB を 3秒 で取得しました (81.9 kB/s) パッケージリストを読み込んでいます... 完了 $ sudo apt update ヒット:1 http://archive.ubuntulinux.jp/ubuntu cosmic InRelease ヒット:2 http://jp.archive.ubuntu.com/ubuntu cosmic InRelease ヒット:3 http://archive.ubuntulinux.jp/ubuntu-ja-non-free cosmic InRelease 取得:4 http://jp.archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB] 取得:5 http://jp.archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB] 取得:6 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB] ヒット:7 http://ppa.launchpad.net/git-core/ppa/ubuntu cosmic InRelease 252 kB を 2秒 で取得しました (155 kB/s) パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 パッケージはすべて最新です。 $ sudo apt upgrade パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 アップグレードパッケージを検出しています... 完了 アップグレード: 0 個、新規インストール: 0 個、削除: 0 個、保留: 0 個。 $ sudo apt show git Package: git Version: 1:2.21.0-0ppa1~ubuntu18.10.1 Priority: optional Section: vcs よし。 最新版が入ってるな。 インストールっと。\n$ sudo apt install git これでインストール完了。 動作確認してみる。\n$ git version git version 2.21.0 よしよし。 おっと，初期設定しないと。\n$ git config --global user.name \u0026#34;Alice\u0026#34; $ git config --global user.email \u0026#34;alice@example.com\u0026#34; $ git config --global user.signingkey 697CDD8A $ git config --global commit.gpgsign true SSH 経由で git clone する まずは適当なリポジトリを SSH 経由で git clone してみる。\n$ git clone git@github.com:spiegel-im-spiegel/gocli.git github.com/spiegel-im-spiegel/gocli Cloning into \u0026#39;github.com/spiegel-im-spiegel/gocli\u0026#39;... The authenticity of host \u0026#39;github.com (192.30.255.112)\u0026#39; can\u0026#39;t be established. RSA key fingerprint is SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added \u0026#39;github.com,192.30.255.112\u0026#39; (RSA) to the list of known hosts. remote: Enumerating objects: 71, done. remote: Counting objects: 100% (71/71), done. remote: Compressing objects: 100% (52/52), done. remote: Total 246 (delta 31), reused 53 (delta 16), pack-reused 175 Receiving objects: 100% (246/246), 53.99 KiB | 431.00 KiB/s, done. Resolving deltas: 100% (107/107), done. 前回で OpenSSH と GnuPG を連携させたので認証時に Pinentry が起動する。\n よーし，うむうむ，よーし。\ngit-credential による認証管理 SSH 経由でリポジトリにアクセスする場合はこれでいいのだが HTTPS 経由でアクセスする場合はアクセスするたびに毎回パスワードを訊かれるため鬱陶しい。 この場合は git-credential による認証管理を行うのがいいようだ。\nUbuntu では gnome-keyring を使った認証管理が使える。\n shugo/git-credential-gnomekeyring: A git credential helper for GNOME keyring  これによると\n There is a git package that includes all of contrib sources in /usr/share/doc/git/contrib/. Users who want to use git-credential-gnomekeyring should copy source from /usr/share/doc/git/contrib/credential/gnome-keyring to their working directory, then users can make and install it.  via shugo/git-credential-gnomekeyring  ということらしい。 さっそくやってみよう。\n$ cp -r /usr/share/doc/git/contrib/credential/gnome-keyring ~/work $ cd ~/work/gnome-keyring $ make gcc -c -g -O2 -Wall -o git-credential-gnome-keyring.o git-credential-gnome-keyring.c git-credential-gnome-keyring.c:28:10: fatal error: glib.h: そのようなファイルやディレクトリはありません まじすか。 まぁ，入れればいいか。\n$ sudo apt install libglib2.0-dev では再開。\n$ make gcc -c -g -O2 -Wall -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-gnome-keyring.o git-credential-gnome-keyring.c git-credential-gnome-keyring.c:29:10: fatal error: gnome-keyring.h: そのようなファイルやディレクトリはありません ええい。 これも入れればいいのね。\n$ sudo apt install libgnome-keyring-dev$ make gcc -g -O2 -Wall -I/usr/include/gnome-keyring-1 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-gnome-keyring.o -c git-credential-gnome-keyring.c ワーニングいっぱい出たけどようやく通ったよ。 これで作成された git-credential-gnome-keyring をパスの通ったディレクトリに入れれば完了。 git 側が認識しているか確認してみよう。\n$ git help -a | grep credential- credential-cache Helper to temporarily store passwords in memory credential-store Helper to store credentials on disk credential-gnome-keyring よしよし。 認識しているな。\nこれで git 設定に以下を加えれば完了となる。\n$ git config --global credential.helper gnome-keyring 適当なリポジトリで確かめてみよう。\n$ git clone https://github.com/spiegel-im-spiegel/private-repos.git aaa Cloning into \u0026#39;aaa\u0026#39;... Username for \u0026#39;https://github.com\u0026#39;: alice@example.com Password for \u0026#39;https://alice@example.com@github.com\u0026#39;: remote: Enumerating objects: 51, done. remote: Counting objects: 100% (51/51), done. remote: Compressing objects: 100% (41/41), done. remote: Total 51 (delta 8), reused 47 (delta 8), pack-reused 0 Unpacking objects: 100% (51/51), done. $ git clone https://github.com/spiegel-im-spiegel/private-repos.git bbb Cloning into \u0026#39;bbb\u0026#39;... remote: Enumerating objects: 51, done. remote: Counting objects: 100% (51/51), done. remote: Compressing objects: 100% (41/41), done. remote: Total 51 (delta 8), reused 47 (delta 8), pack-reused 0 Unpacking objects: 100% (51/51), done. よし。 2回目からは訊いてこないな。\nちなみにこのときのパスワードは Web ページにサインインするときのパスワードじゃなくて，設定画面で振り出した personal access token を使うのでご注意を（つか，私がすっかり忘れててハマったのだがw）。\nブックマーク  UbuntuのPPAて何？ [Linuxの使い方] All About ubuntuのapt-getで最新版のgitをインストールする方法 - spangled shalalala blog Git - Gitのインストール Git Commit で OpenPGP 署名を行う  "
    },
    {
      "title": "2019-04-07 のブックマーク",
      "section": "bookmarks",
      "description": "「はやぶさ2が衝突装置の作動に成功 小惑星りゅうぐうの人工クレーター実験で世界初の岩石採取目指す」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/04/07-bookmarks/",
      "published": "2019-04-07T06:01:16+00:00",
      "update": "2019-04-07T06:02:54+00:00",
      "content": " リリース情報  「RubyGems」の脆弱性に対処した「Ruby」v2.4.6が公開 - 窓の杜 Visual Studio 2019正式版リリース。メモリ使用量が4分の1以下に激減、リモートペアプロ機能のLive Share、AIによる支援機能IntelliCodeも正式機能に。Mac版も同時リリース － Publickey  Age of Trump  ソーシャルメディアに暴力コンテンツの責任を問う法案が豪議会を通過 | TechCrunch Japan Mark Zuckerberg Does Not Speak for the Internet | Electronic Frontier Foundation Attending a Protest | Surveillance Self-Defense  セキュリティ＆プライバシー関連  Kaspersky、「WinRAR」で発覚した19年来の脆弱性を警告 ～関連マルウェアは今も増加中 - 窓の杜 VMware、セキュリティコンテスト“Pwn2Own 2019”で報告された脆弱性に対策 - 窓の杜 トヨタ関連会社への不正アクセスについてまとめてみた - piyolog MIT Tech Review: 欧州連合の改正著作権法は何が問題なのか？ MIT Tech Review: 「殺人犯逮捕のために協力を」米DNA検査会社が批判逆手にテレビCM 神奈川県警職員が10年以上行っていた不正アクセス事案についてまとめてみた - piyolog 新元号発表に乗じたスパムメールや政府の情報漏れ対策をまとめてみた - piyolog QEMU脆弱性を利用したVM ESCAPE攻撃の検証：概要＆テスト環境構築編 (1/2)：OSS脆弱性ウォッチ（12） - ＠IT ゴールデンウィークにおける情報セキュリティに関する注意喚起：IPA 独立行政法人 情報処理推進機構 現行版の「Microsoft Edge」「Internet Explorer」にゼロデイ脆弱性 - 窓の杜 ライブ配信を悪用したポイント詐取事件についてまとめてみた - piyolog ラブライブ！公式サイトの改ざんについてまとめてみた - piyolog Former Mozilla CTO Harassed at the US Border - Schneier on Security Apache HTTP Serverに脆弱性、アップデートを | マイナビニュース  天文関連  MIT Tech Review: NASA長官がインドの衛星撃墜実験を非難、デブリ問題が深刻化 MEF 小天体探査フォーラム - Minorbody Exploration Forum | The Planetary Society of Japan - 日本惑星協会 MIT Tech Review: 天文学者が見落とした太陽系外惑星、深層学習で発見 JAXA | 小惑星探査機「はやぶさ２」衝突装置の運用状況について  JAXA | 小惑星探査機「はやぶさ２」衝突装置の作動の確認について 2019年4月5日ニュース「はやぶさ2が衝突装置の作動に成功 小惑星りゅうぐうの人工クレーター実験で世界初の岩石採取目指す」 | SciencePortal 日本の「はやぶさ2」が小惑星を銃撃して穴を掘る | TechCrunch Japan   知財関連  European Commission adopts CC BY and CC0 for sharing information - Creative Commons 'YouTube's Copyright Mess Is Stifling Music Education' - TorrentFreak  収益をかすめ取られても泣き寝入りを強いられる音楽教則ビデオのクリエイターたち – P2Pとかその辺のお話R   その他  ファーウェイの通信機器を巡る「疑惑」は、実は悪用可能なバグだった？ 英政府機関が指摘｜WIRED.jp Firefoxのための無料パスワードマネジャー「Lockbox」がAndroidでも使えるように! | Techable(テッカブル) MIT Tech Review: ビットコイン取引の95％が「ウソ」、取引所が人気装う 現在、Netscapeを所有しているのはFacebookだって？ - YAMDAS現更新履歴 Apacheソフトウェア財団設立20周年を祝して、Apacheソフトウェア財団が手がけるイノベーティブなプロジェクトを20個選んでみた - YAMDAS現更新履歴 MIT Tech Review: 客観的実在は存在せず？量子力学の逆説「ウィグナーの友人」を初実験 Your Fourth Amendment Rights Should Not be Limited by Terms of Service | Electronic Frontier Foundation モジラ、「Firefox」でスパムのようなプッシュ通知の許可プロンプト低減に向け取り組み - CNET Japan 蜜月の終わり。世界各国の美術館が関係解消を急ぐ「サックラー・ファミリー」とオピオイド中毒問題｜MAGAZINE | 美術手帖 MIT Tech Review: 訓練データ作成を刑務所に委託も、AIが生む「つまらない仕事」 Amazonサードパーティいじめをやめる、検索結果で自社ブランド商品を目立たせる宣伝廃止 | TechCrunch Japan MySpaceの大規模データ喪失の前に集めた45万曲をInternet Archiveがアップロード | TechCrunch Japan MIT Tech Review: グーグルが新設した「AI倫理委員会」に社員が猛反発した理由 人間の作業を手伝うCMUのバックパック型ロボットアーム | TechCrunch Japan  "
    },
    {
      "title": "Go 1.12.2 がリリースされた",
      "section": "release",
      "description": "コンパイラ本体は通常のアップデート。外部パッケージで脆弱性の情報あり。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/04/go-1_12_2-is-released/",
      "published": "2019-04-07T05:15:13+00:00",
      "update": "2019-04-09T12:49:03+00:00",
      "content": " [Go] 1.12.2 がリリースされた。 セキュリティ・アップデートはなし。\n Go 1.12.2 and Go 1.11.7 are released - Google Group   go1.12.2 (released 2019/04/05) includes fixes to the compiler, the go command, the runtime, and the doc, net, net/http/httputil, and os packages. See the Go 1.12.2 milestone on our issue tracker for details.  via Release History - The Go Programming Language  また，このリリースより少し前に golang.org/x/crypto/salsa20 パッケージに関する脆弱性情報がアナウンスされている。\n [security] Vulnerability in golang.org/x/crypto/salsa20 - Google Group   If more than 256 GiB of keystream is generated, or if the counter otherwise grows greater than 32 bits, the amd64 implementation will first generate incorrect output, and then cycle back to previously generated keystream. Repeated keystream bytes can lead to loss of confidentiality in encryption applications, or to predictability in CSPRNG applications.  via Vulnerability in golang.org/x/crypto/salsa20  けっこうヤバい脆弱性なので，ご利用の方はアップデートを。 それ以外にも（メール本文にも目を通して）必要な措置があれば行うこと。\nアップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "「ボーっと生きてんじゃねーよ！」",
      "section": "remark",
      "description": "エロとウンチクとグルメは3日見たら飽きる（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/donot-sleep-through-life/",
      "published": "2019-04-07T03:13:52+00:00",
      "update": "2019-04-07T04:22:07+00:00",
      "content": " まさか，このブログで特定のテレビ番組について語る日が来るとは（笑）\n 「夜はなぜ暗い？」 #チコちゃんに叱られる の解答に「誤解を招く表現があった」と出演依頼された先生が解説 - Togetter  これって実は宇宙論を習うときに最初に出てくる「問い」なんだよね。 私も学生時代に宇宙論の授業（広大の牟田先生の授業）で習ったよ。\n厳密には\n 地球から見てあらゆる方向に星があると仮定するなら，それらの光が集積されて夜空はもっと明るくなる筈なのに，実際には夜は昼より暗いのは何故か？\n だったかな。 つまり，この「問い」について考えることで宇宙論的な時間と空間の概念を学ぶわけですな。 懐かしいなぁ。\n「チコちゃんに叱られる」はテレビ番組をほとんど見ない私が唯一積極的に見てる番組。 まぁ土曜朝の再放送しか見れないんだけど（だって平日の夜は僅かな憩いの時間なのに，その時間をテレビ如きに取られたくないぢゃん）。 しかも，ここのところ土曜の朝は忙しくてテレビを見てる暇もない（だから今回の件も見ていない）。 たぶん来週も見れないだろう。\n正しい「問い」を立てるのは正しい「答え」を導くよりも難しい。\n「チコちゃんに叱られる」では「答え」そのものは大して重要ではなくて「問いを立てる」「問いについて考える」ことがメインディッシュになっている。 だから最後に提示される「答え」に「えー？」ってなるのも含めてワンセットなわけだ。 だって「えー？」ってなれば更にその続きを考え（あるいは調べ）ようとするでしょ。 故に「ボーっと生きてんじゃねーよ！」になるわけよ。 上手くできてるよね。\nこの一連の「対話」が面白くてつい見ちゃうんだよなぁ。\n私も昔は押し付けがましい教養番組や情報番組を「説教番組」と呼んで毛嫌いしてたけど1，もうテレビは（ラジオと同じく）万人のメディアではないし，ソーシャル・メディアとの不気味な共生（共依存？）関係は気になるけど，基本的には「押し付けられた答え」に対しては「何も思わない」ことにしている。 「思う」こと自体が非生産的行為。 もしムカついて我慢できなくなったらテレビから離れればいい（そして忘れる）だけだ。\n最後にまとめると，エロとウンチクとグルメは3日見たら飽きる，ということで。 「チコちゃん」は飽きずに見れるといいねぇ（笑）\nブックマーク  「テレビという共同体」 — Baldanders.info STAP 教と「説教サイト」  参考図書  いかにして問題をとくか G. ポリア G. Polya (原著), 柿内 賢信 (翻訳) 丸善 1975-04-01 Book 単行本 ASIN: 4621045938, EAN: 9784621045930 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  数学ガールの誕生　理想の数学対話を求めて 結城 浩 SBクリエイティブ 2013-09-13 (Release 2014-09-13) eBooks Kindle版 ASIN: B00NAQA33A 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんの講演集。こういう場所に立ち会える今の学生さんは羨ましい。\nreviewed by Spiegel on 2018-12-21 (powered by amazon-item v0.2.0)\n  今でもみ◯某とかさ◯い某が出てくる番組は見ない。誤解のないように言っておくとこれは彼ら本人に対する好悪には関係ない。そもそもお会いしたことないし（笑） 芸能人ってのはテレビ越しでは「記号」だからね。 [return]   "
    },
    {
      "title": "NYAGOS 4.4.2 がリリースされた",
      "section": "release",
      "description": "今回は盛り沢山だぞ！",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/04/nyagos-4_4_2-is-released/",
      "published": "2019-04-07T00:16:12+00:00",
      "update": "2019-04-13T05:11:15+00:00",
      "content": "NYAGOS 4.4.2_0 がリリースされた。 つか，もたもたしてたら 4.4.2_1 も出てたよ。\n Release 4.4.2_0 · zetamatta/nyagos · GitHub Release 4.4.2_1 · zetamatta/nyagos · GitHub  変更点は以下の通り。 盛り沢山だぞ！\n Fix converting OLE-Object to Lua-Object causes panic on VT_DATE and some types. Fix: lua.LNumber was treated as integer. It should be as float64 Lua: add function: nyagos.to_ole_integer(n) for nyagos.d/trash.lua Lua: support for p in OLEObject:_iter() do ... end Lua: add function: OLEObject:_release() Fix: trash.lua COM leak Fix: IUnknown instance created by create_object was not released. Implemented: expanding ~username Fix: exit status of executables (not batchfile) was not printed Fix: aliases using CMD.EXE (ren,mklink,dir...) did not work when %COMSPEC% is not defined. Fix: %U+3000% was regarded as a charactor of parameter separators (#359) -c and -k option can received multi arguments like CMD.EXE vFix: (not exist dir)\\something [TAB] -\u0026gt; The system cannot find the path specified.(Thx! tsuyoshicho) (#360) Draw zero-width or surrogate paired characters as \u0026lt;NNNNN\u0026gt; (Thx! tsuyoshicho) Add the option --output-surrogate-pair to output them as it is (not \u0026lt;NNNNN\u0026gt;) su: network drives is not lost now after UNC-dialog (#197) ln makes Junction when the source-path is directory and -s is not given) Implemented built-in mklink command and remove the alias mklink as CMD.exe /c mklink Remove zero-bytes Lua files (cdlnk.lua, open.lua, su.lua, swapstdfunc.lua ) (#262) diskfree shows volume label and filesystem Enabled to execute batch file even if UNC path is current directory. Fix rename,assoc,dir \u0026amp; for did not run when the current directory is UNC-path Fix (#363) Fix backquote did not work in nyagos.alias.COMMAND=\u0026quot;string\u0026quot; (Thx! tostos5963 \u0026amp; sambatriste ) (#259) Implemented select command to open a file with dialog to select application. Fix the format of diskfree's output   OLEオブジェクトからLuaオブジェクトへの変換が日付型などでパニックを起こす不具合を修正 Luaの数値が実数として OLE に渡されるべきだったのに、整数として渡されていた。 Lua: 関数: nyagos.to_ole_integer(n) (数値を OLE 向けの整数に変換)を追加(trash.lua用) Lua: OLEObject に列挙用オブジェクトを得るメソッド _iter() を追加 Lua: OLEObject を開放するメソッド OLEObject:_release() を追加 trash.lua が COM の解放漏れを起こしていた問題を修正 Lua: create_object生成された IUnkown インスタンスが解放されていなかった不具合を修正 「~ユーザ名」の展開を実装 バッチファイル以外の実行ファイルの exit status が表示されなくなっていた不具合を修正 %COMSPEC% が未定義の時に CMD.EXE を用いるエイリアス(ren,mklink,dir,...)が動かなくなっていた不具合を修正 全角空白(%U+3000%)がパラメータの区切り文字と認識されていた点を修正 (#359) -c,-k オプションで CMD.EXE のように複数の引数をとれるようにした 「存在しないディレクトリ\\何か」を補完しようとすると「The system cannot find the path specified.」と表示される不具合を修正 (Thx! tsuyoshicho) (#360) 幅ゼロやサロゲートペアな Unicode は\u0026lt;NNNNN\u0026gt; と表示するようにした (Thx! tsuyoshicho) サロゲートペアな Unicode をそのまま出力するオプション --output-surrogate-pair を追加 suコマンドで、ネットワークドライブが失なわれないようにした (#197) ソースがディレクトリで -s がない時、ln はジャンクションを作成するようにした 内蔵の mklink コマンドを実装し、CMD.exe /c mklink のエイリアス mklink を削除 ゼロバイトの Lua ファイルを削除(cdlnk.lua, open.lua, su.lua, swapstdfunc.lua ) (#262) diskfree でボリュームラベルとファイルシステムを表示するようにした UNCパスがカレントディレクトリでもバッチファイルを実行できるようにした。 UNCパスがカレントディレクトリの時、ren,assoc,dir,for が動作しない不具合を修正 (#363) nyagos.alias.COMMAND=\u0026quot;string\u0026quot; 中では逆クォート置換が機能しない問題を修正 (Thx! tostos5963 \u0026amp; sambatriste ) (#259) アプリケーションをダイアログで選んでファイルを開くコマンド select を実装 diskfree の出力フォーマットを修正  via Release 4.4.2_0   diskfree: trim spaces from the end of line Fix: on ~\u0026quot;\\Program Files\u0026quot;, the first quotation disappeared and Files was not contained in the argument.   diskfree: 行末の空白を削除 ~\u0026quot;\\Program Files\u0026quot; の最初の引用符が消えて、Files が引数に含まれない不具合を修正  via Release 4.4.2_1  新たに追加された select コマンドはエクスプローラのコンテキストメニュー「プログラムから開く」に近い機能を提供していて，たとえば\n$ select index.html とか打てば\n てな感じでファイルを開くプログラムの選択ダイアログが開く。 なにそれ素敵！\nまるきし余談だが，先々月に NYAGOS 4.4.1 が出てて，私も Issue 上げてたのに記事にしてなかった。 1月2月はホンマに余裕がなかったからなぁ。 まぁ今は余裕があるかと言われればそうでもないんだけど...\nアップデートは計画的に。\n"
    },
    {
      "title": "Windows 環境で作った GnuPG の鍵束を Ubuntu に移行する",
      "section": "remark",
      "description": "鍵束を Ubuntu 環境にコピーして OpenSSH 連携を確認するところまで。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/move-gpg-keyring/",
      "published": "2019-04-06T15:01:53+00:00",
      "update": "2019-04-07T09:49:46+00:00",
      "content": " さて NAS に接続できてファイルのバックアップや移動が楽にできるようになった。 次は GnuPG で遊んでみよう。\nなんぼなんでも古すぎるじゃろ Ubuntu のディストリビューションには最初から GnuPG が入っているのだが\n$ gpg --version gpg (GnuPG) 2.2.8 libgcrypt 1.8.3 Copyright (C) 2018 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 いやいや。 なんぼなんでも古すぎるじゃろ。 確かに最後にセキュリティアップデートが行われたのは2018年の 2.2.8 のときだけどさ。 あれから不具合の修正とかも結構あったのよ。\n調べてみたら Ubuntu や Debian では GnuPG のアップデートに積極的ではない様子。 まぁ使えないことはないので，最新版の導入は諦めてもとい後々のお楽しみにとっておいて，今回はこの 2.2.8 を使っていろいろやってみることにする。\nなにはともあれ鍵を作らないと GnuPG の使い方の概要は拙文「GnuPG チートシート」を参考にどうぞ。 さっそく鍵を作ってみる。\n$ gpg --quick-gen-key \u0026#34;Alice \u0026lt;alice@example.com\u0026gt;\u0026#34; future-default - 1w gpg: ディレクトリ\u0026#39;/home/username/.gnupg\u0026#39;が作成されました gpg: keybox\u0026#39;/home/username/.gnupg/pubring.kbx\u0026#39;が作成されました たくさんのランダム・バイトの生成が必要です。キーボードを打つ、マウスを動か す、ディスクにアクセスするなどの他の操作を素数生成の間に行うことで、乱数生 成器に十分なエントロピーを供給する機会を与えることができます。 gpg: /home/username/.gnupg/trustdb.gpg: 信用データベースができました gpg: 鍵7979662E697CDD8Aを究極的に信用するよう記録しました gpg: ディレクトリ\u0026#39;/home/username/.gnupg/openpgp-revocs.d\u0026#39;が作成されました gpg: 失効証明書を \u0026#39;/home/username/.gnupg/openpgp-revocs.d/E23197776C20290F831D97747979662E697CDD8A.rev\u0026#39; に保管しました。 公開鍵と秘密鍵を作成し、署名しました。 pub ed25519 2019-04-04 [SC] [有効期限: 2019-04-11] E23197776C20290F831D97747979662E697CDD8A uid Alice \u0026lt;alice@example.com\u0026gt; 途中でパスフレーズを定義するために Pinentry が起動する。\n おおっ。 これが Ubuntu の Pinentry か。 シンプルでよろしい。\n鍵作成後の ~/.gnupg ディレクトリの中身はこうなっている。\n$ ls -al .gnupg/ 合計 28 drwx------ 4 username users 4096 4月 4 21:23 . drwxr-xr-x 16 username users 4096 4月 4 21:23 .. drwx------ 2 username users 4096 4月 4 21:23 openpgp-revocs.d drwx------ 2 username users 4096 4月 4 21:23 private-keys-v1.d -rw-r--r-- 1 username users 634 4月 4 21:23 pubring.kbx -rw------- 1 username users 32 4月 4 21:23 pubring.kbx~ -rw------- 1 username users 1240 4月 4 21:23 trustdb.gpg $ ls -al .gnupg/private-keys-v1.d/ 合計 16 drwx------ 2 username users 4096 4月 4 21:23 . drwx------ 4 username users 4096 4月 4 21:23 .. -rw------- 1 username users 340 4月 4 21:23 6103D260692806ECD8FF194DD5A42A166ECFCA7C.key -rw------- 1 username users 332 4月 4 21:23 D08B6C062AC8FA95D4526EDADBDA906A74D26D77.key $ ls -al .gnupg/openpgp-revocs.d/ 合計 12 drwx------ 2 username users 4096 4月 4 21:23 . drwx------ 4 username users 4096 4月 4 21:23 .. -rw------- 1 username users 1401 4月 4 21:23 E23197776C20290F831D97747979662E697CDD8A.rev ちなみに openpgp-revocs.d ディレクトリには秘密鍵が， openpgp-revocs.d ディレクトリには鍵の失効証明書が入っている。 失効証明書は作った鍵を執行させるために使うもので，重要なデータなので取り扱いは慎重に。\nこれを見ると ~/.gnupg ディレクトリ以下のファイル・ディレクトリは他ユーザから見えないようにするのがいいみたいだね。\n作った鍵を使って試しに適当なテキストを署名してみよう。\n$ echo Hello world | gpg -u alice --clear-sign -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA256 Hello world -----BEGIN PGP SIGNATURE----- iIgEARYIADAWIQTiMZd3bCApD4Mdl3R5eWYuaXzdigUCXKX4dBIcYWxpY2VAZXhh bXBsZS5jb20ACgkQeXlmLml83YogagD6A6tRm+uEgphlYrORJBZ9oRmFpRzImXO6 22I/HeiXTGkBALU1QLnv/xcPf1pMQRjpxM9SO/IupO/Zt9lryx4lFOAC =8DRi -----END PGP SIGNATURE----- このときも Pinentry が起動する。\n よーし，うむうむ，よーし。\nGnuPG の環境変数 GnuPG の環境変数は以下のコマンドで取得できるようだ。\n$ gpgconf --list-dirs sysconfdir:/etc/gnupg bindir:/usr/bin libexecdir:/usr/lib/gnupg libdir:/usr/lib/x86_64-linux-gnu/gnupg datadir:/usr/share/gnupg localedir:/usr/share/locale socketdir:/run/user/1000/gnupg dirmngr-socket:/run/user/1000/gnupg/S.dirmngr agent-ssh-socket:/run/user/1000/gnupg/S.gpg-agent.ssh agent-extra-socket:/run/user/1000/gnupg/S.gpg-agent.extra agent-browser-socket:/run/user/1000/gnupg/S.gpg-agent.browser agent-socket:/run/user/1000/gnupg/S.gpg-agent homedir:/home/username/.gnupg また shell 側の環境変数は\n$ env | grep GPG GPG_AGENT_INFO=/run/user/1000/gnupg/S.gpg-agent:0:1 となっていて GPG_AGENT_INFO に agent-socket の値がセットされているのが分かる。 古いバージョンで要ると言われた GPG_TTY 環境変数は要らなそうである。\nもし GPG_AGENT_INFO に手動で値をセットするなら\n$ export GPG_AGENT_INFO=$(gpgconf --list-dirs agent-socket):0:1 って感じでいいかな。\n通信ソケットが置かれている /run/user/1000/gnupg/ ディレクトリはどうやら XDG Base Directory Specification に準拠したディレクトリらしい。 XDG_RUNTIME_DIR 環境変数が\n$ env | grep XDG_RUNTIME_DIR XDG_RUNTIME_DIR=/run/user/1000 と定義されているので多分そうだろう（1000 は username ユーザの UID）。 環境変数 XDG_RUNTIME_DIR で示されるディレクトリはユーザがログインしている間のみ存在が保証されているそうだ。\nPinentry の定義 Ubuntu では Pinentry として pinentry-gnome3 と pinentry-curses が組み込まれているようだ。 Ubuntu インストール直後の既定は pinentry-gnome3 のようだが，これを切り替えるには\n$ sudo update-alternatives --config pinentry alternative pinentry (/usr/bin/pinentry を提供) には 2 個の選択肢があります。 選択肢 パス 優先度 状態 ------------------------------------------------------------ * 0 /usr/bin/pinentry-gnome3 90 自動モード 1 /usr/bin/pinentry-curses 50 手動モード 2 /usr/bin/pinentry-gnome3 90 手動モード 現在の選択 [*] を保持するには \u0026lt;Enter\u0026gt;、さもなければ選択肢の番号のキーを押してください:  とすればいいらしい。 実際には\n$ ls -lF /usr/bin/pinentry* lrwxrwxrwx 1 root root 26 4月 2 21:13 /usr/bin/pinentry -\u0026gt; /etc/alternatives/pinentry* -rwxr-xr-x 1 root root 63992 7月 6 2018 /usr/bin/pinentry-curses* -rwxr-xr-x 1 root root 72184 7月 6 2018 /usr/bin/pinentry-gnome3* lrwxrwxrwx 1 root root 30 4月 2 21:13 /usr/bin/pinentry-x11 -\u0026gt; /etc/alternatives/pinentry-x11* $ ls -lF /etc/alternatives/pinentry* lrwxrwxrwx 1 root root 24 4月 2 21:13 /etc/alternatives/pinentry -\u0026gt; /usr/bin/pinentry-gnome3* lrwxrwxrwx 1 root root 24 4月 2 21:13 /etc/alternatives/pinentry-x11 -\u0026gt; /usr/bin/pinentry-gnome3* lrwxrwxrwx 1 root root 40 4月 2 21:13 /etc/alternatives/pinentry-x11.1.gz -\u0026gt; /usr/share/man/man1/pinentry-gnome3.1.gz lrwxrwxrwx 1 root root 40 4月 2 21:13 /etc/alternatives/pinentry.1.gz -\u0026gt; /usr/share/man/man1/pinentry-gnome3.1.gz てな構成になっているみたい。\nWindows 環境で作った GnuPG の鍵束を Ubuntu にコピーする では Windows 環境で作成・運用している GnuPG の鍵束を Unintu にコピーしてみよう。\n必要なファイルは以下の通り。\n pubring.kbx： 公開鍵の鍵束 trustdb.gpg： OpenPGP 用の信用データベース・ファイル private-keys-v1.d/*.rev： 秘密鍵ファイル openpgp-revocs.d/*.key： 失効証明書 tofu.db： TOFU 用の信用データベース・ファイル（もしあれば） gpg.conf： GnuPG 用の設定ファイル（もしあれば） gpg-agent.conf： gpg-agent 用の設定ファイル（もしあれば） sshcontrol： OpenSSH 認証用鍵の定義ファイル（もしあれば）  これらのファイルを ~/.gnupg ディレクトリにディレクトリ構造ごとコピーする（以前のファイルは削除しておいてね）。 chmod コマンドでアクセス権を設定するのも忘れずに。\ngpg.conf, gpg-agent.conf, sshcontrol 各ファイルの中身はテキストなのだが，改行コードが CRLF になっているかもしれないのであらかじめ始末しておくこと1。\nこれで完了。 試しに私の鍵束に入っている JPCERT/CC の公開鍵を表示してみた。\n$ gpg --list-keys jpcert pub rsa2048 2009-06-02 [SCE] FC8953BBDC65BD974BDAD1BD317D97A469ECE048 uid [ 充分 ] JPCERT/CC \u0026lt;info@jpcert.or.jp\u0026gt; sub rsa2048 2009-06-02 [E] よーし，うむうむ，よーし。\nOpenSSH との連携 Windows 環境では OpenSSH の認証用鍵を GnuPG にインポートして PuTTY と連携させていたが，もちろん Ubuntu の OpenSSH とも連携できる。\nOpenSSH と連携させるには gpg-agent.conf ファイルに enable-ssh-support オプションをセットすればいいのだが，これだけでは上手くいかないようだ。\nいろいろ試行錯誤した挙げ句，なんの気なしに環境変数を見てみたら\n$ env | grep SSH_AUTH_SOCK SSH_AUTH_SOCK=/run/user/1000/keyring/ssh と定義されていた。 原因はお前かよ！ もっと早く気付け，自分 orz\n環境変数 SSH_AUTH_SOCK を gpg-agent のソケットに置き換えるには以下のコマンドラインを叩く。\n$ export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket) これで SSH_AUTH_SOCK の値は\n$ env | grep SSH_AUTH_SOCK SSH_AUTH_SOCK=/run/user/1000/gnupg/S.gpg-agent.ssh となった。\nこの状態でリモートホストに ssh 接続してみよう。\n$ ssh username@remotehost これで Pinentry が起動して\n パスフレーズを入力後ログインできれば成功。 SSH_AUTH_SOCK 値の書き換えコマンドは ~/.bashrc ファイルにでも書いておけばいいだろうか。\nちなみに gpg-agent.conf ファイルに設定できる OpenSSH 連携関連のオプションは以下の通り。\n   オプション名 既定値 内容     enable-ssh-support ― ssh-agent 互換プロトコルを有効にする   default-cache-ttl-ssh 1800 直前にアクセスしたキャッシュ・エントリの有効期間を秒単位で指定する   max-cache-ttl-ssh 7200 キャッシュ・エントリの有効期間の最大値を秒単位で指定する。 アクセスの有無にかかわらずこの期間が過ぎるとキャッシュがクリアされる    OpenSSH との連携を調べ始め，試行錯誤してここまでたどり着くまでに3時間くらいかかっちまったよ。 GnuPG の公式サイトも含めて資料がなさすぎるんだよ。 特に日本語の記事は内容が古すぎて壊滅状態。 いかに GnuPG が使われてないか分かるよなぁ。\nまっ，とにかく， Ubuntu でも（バージョンの問題に目をつぶれば）普通に GnuPG が使えることが分かったので今回はよしとする。\nこれでようやく git を使う準備ができた。 まだまだ道のりは遠い。\nブックマーク  Ubuntu フォルダー構造 その10 - XDG Base Directory Specificationについて - kledgeb\n Change pinentry program temporarily with gpg-agent - Unix \u0026amp; Linux Stack Exchange\n Using GnuPG (2.1) for SSH authentication\n GnuPG for Windows インストール編\n GnuPG for Windows : gpg-agent について\n GnuPG チートシート（鍵作成から失効まで）\n  参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) eBooks Kindle版 ASIN: B015643CPE 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by amazon-item v0.2.0)\n  改行コードを始末するなら拙作の「nkf っぽいなにか」をどうぞ。コマンドラインで gonkf nwline gpg.conf とすれば改行コードを LF に変換してくれる。以上宣伝でした（笑） [return]   "
    },
    {
      "title": "CIFS 経由で NAS に接続する",
      "section": "remark",
      "description": "今回は CIFS (Common Internet File System) クライアントを使って NAS に接続を試みる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/03/common-internet-file-system/",
      "published": "2019-03-31T11:24:45+00:00",
      "update": "2019-04-03T13:45:11+00:00",
      "content": " Ubuntu から自宅の簡易 NAS に接続することを考える。\n相手の NAS には Samba サーバとして接続できることは分かっているので，こちらは対応するクライアント・ツールを用意すればいいわけだ。\nというわけで今回は CIFS (Common Internet File System) クライアントを使って接続を試みる。\nCIFS クライアントの導入 Ubuntu であれば APT (Advanced Package Tool) で導入できる。\n$ sudo apt install cifs-utils パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 提案パッケージ: keyutils smbclient winbind 以下のパッケージが新たにインストールされます: cifs-utils アップグレード: 0 個、新規インストール: 1 個、削除: 0 個、保留: 0 個。 71.5 kB のアーカイブを取得する必要があります。 この操作後に追加で 231 kB のディスク容量が消費されます。 取得:1 http://jp.archive.ubuntu.com/ubuntu cosmic/main amd64 cifs-utils amd64 2:6.8-2 [71.5 kB] 71.5 kB を 1秒 で取得しました (104 kB/s) 以前に未選択のパッケージ cifs-utils を選択しています。 (データベースを読み込んでいます ... 現在 167532 個のファイルとディレクトリがインストールされています。) .../cifs-utils_2%3a6.8-2_amd64.deb を展開する準備をしています ... cifs-utils (2:6.8-2) を展開しています... cifs-utils (2:6.8-2) を設定しています ... update-alternatives: /etc/cifs-utils/idmap-plugin (idmap-plugin) を提供するために自動モードで /usr/lib/x86_64-linux-gnu/cifs-utils/idmapwb.so を使います man-db (2.8.4-2) のトリガを処理しています ... $ mount.cifs -V mount.cifs version: 6.8 バージョンは 6.8 か。\n事前準備（2019-04-03 追記） 実際に作業に入る前にいくつか事前設定をしておく。\nホスト名の解決 IP アドレス指定のままでもいいのだが，もし LAN 内で NAS の名前解決が出来ないなら /etc/hosts ファイルで名前を定義しておくといいだろう。\n10.0.0.100 nas01 Samba グループを作成する 共有ディレクトリをマウントできるグループを作成する。\n$ sudo groupadd samba さらに\n$ sudo visudo で sudo 用の設定ファイルを開き以下の行を追加する。\n%samba ALL=(ALL) /bin/mount,/bin/umount,/sbin/mount.cifs,/sbin/umount.cifs これで samba グループに追加したユーザは自身のホーム・ディレクトリ以下に NAS の共有ディレクトリをマウントできる。 さっそく追加しておこう。\n$ sudo adduser username samba これで準備完了。\n一時的な接続 まずマウント先のディレクトリを作成する（ディレクトリの場所や名前は他と被らなければなんでもいい）。\n$ mkdir ~/nas この ~/nas ディレクトリに対して以下のコマンドを実行する。\nsudo mount -t cifs //nas01/shared ~/nas -o username=sambauser,noexec,nosuid,nodev [sudo] username のパスワード: Password for sambauser@//nas01/shared: ******** これで ~/nas ディレクトリに対して共有ディレクトリ //nas01/shared を一時的にマウントできる。 マウント時に指定できる主なパラメータ（値がある場合は param=value 形式で指定）は以下の通り1。\n   パラメータ名 既定値 内容     username root 接続先のユーザ名   password  接続先ユーザのパスワード。指定しない場合は接続時に訊いてくる   domain  接続先のドメイン名またはワークグループ名（必要な場合のみ）   credentials  接続情報が書かれたファイル（詳しくは後述する）   uid root 共有ディレクトリ・ファイルの（見かけの）オーナー名   gid root 共有ディレクトリ・ファイルの（見かけの）グループ名   file_mode 0755 共有ファイルの（見かけの）ファイルモード   dir_mode 0755 共有ディレクトリの（見かけの）ディレクトリモード   vers 3.0 SMB プロトコル・バージョン（1.0/2.0/3.0/3.1.1）   sec ntlmssp セキュリティ・モード (none/krb5/krb5i/ntlm/ntlmi/ntlmv2/ntlmv2i/ntlmssp/ntlmsspi)   noexec ― 共有ディレクトリ上のファイルの実行をさせない   nosuid ― 共有ディレクトリ・ファイルの SUID ビットを認識しない   nodev ― 共有ディレクトリ上のデバイスファイルを作用させない   ro ― 読み込み専用でマウントする   rw ― 読み書き可でマウントする    コマンドラインでマウントする際は絶対に password オプションを付けないこと（履歴に残っちゃうからね）。 あるいは以下の内容の接続情報ファイル ~/.nascred を作って（ファイル名は適当）\nusername=sambauser password=password_string domain=domainname ファイルモードを 0400 に設定して他ユーザから見られないようにし\n$ sudo chamod 0400 ~/.nascred credentials オプションで指定してマウントする。\nsudo mount -t cifs //nas01/shared ~/nas -o credentials=~/.nascred,noexec,nosuid,nodev 他ユーザから見えなくてもパスワードを平文で保存するのはちょっと... という人は password の指定行を外してしまえばコマンド実行時にパスワードを訊いてくる。\nマウントを解除するには\n$ sudo umount ~/nas で OK。\n/etc/fstab を使って起動時にマウントする /etc/fstab ファイルに以下の行を追加することで起動時に共有ファイルをマウントできる。\n# \u0026lt;file system\u0026gt; \u0026lt;mount point\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; //nas01/shared /home/username/nas cifs _netdev,credentials=/home/username/.nascred,noexec,nosuid 0 0 ちなみに _netdev はネットワークの設定が終わったあとにマウントするよう指示するオプションである（先頭のアンダーバーを忘れずに）。\n起動時のマウントではないが以下の2つのオプションを追加する手もある。\n   パラメータ名 内容     noauto 起動時にはマウントを行わない   user 一般ユーザもマウントできる    # \u0026lt;file system\u0026gt; \u0026lt;mount point\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; //nas01/shared /home/username/nas cifs noauto,user,credentials=/home/username/.nascred,noexec,nosuid 0 0 これなら管理者モードでなくともログイン後に任意のタイミングで\n$ mount ~/nas という感じにコマンドラインを少し簡略化してマウントできる（umount も同様）。\nよし。 これで次に進める。 次は GnuPG かな。\nブックマーク  mount.cifs Samba/SambaClientGuide - Community Help Wiki mountコマンドでCIFSをファイル共有 - profaim.jp mount.cifsに付けるオプション - Qiita Ubuntu から Windows の共有フォルダをマウントして利用する - Qiita samba-client／cifs-utilsを使ってWindowsの共有フォルダをマウントする - Qiita Windows 10 に cifs 接続する - Qiita Linuxはサンバ（Samba）で踊る――WindowsとLinuxのファイル共有のいま (1/2)：その知識、ホントに正しい？ Windowsにまつわる都市伝説（25） - ＠IT fstab - ArchWiki  参考図書  【改訂新版】サーバ構築の実例がわかるSamba［実践］入門 髙橋基信 技術評論社 2016-03-04 (Release 2016-03-04) eBooks Kindle版 ASIN: B01CXL8NL6  Samba4/Windows10 対応。昔に比べたら Samba もずいぶん変わったんだねぇ。\nreviewed by Spiegel on 2019-03-31 (powered by amazon-item 0.2.1)\n  オプションの詳細は man mount.cifs でマニュアルを参照するとよい。 [return]   "
    }
  ]
}
