{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "2020-02-16 のブックマーク",
      "section": "bookmarks",
      "description": "「Web 3.0がもたらす3つの革命」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/02/16-bookmarks/",
      "published": "2020-02-16T00:45:14+00:00",
      "update": "2020-02-16T00:47:03+00:00",
      "content": "リリース情報  Hugo 0.64.1: A couple of Bug Fixes | Hugo Java 14新機能まとめ - Qiita  セキュリティ＆プライバシー関連  Apple\u0026rsquo;s Tracking-Prevention Feature in Safari has a Privacy Bug - Schneier on Security サブスクのパスワードを友人と安全に共有するJamのニーズと合法性 | TechCrunch Japan Crypto AG Was Owned by the CIA - Schneier on Security シスコのネットワーク機器に見つかった脆弱性は、多くの企業に深刻な影響を及ぼしかねない｜WIRED.jp New Ransomware Targets Industrial Control Systems - Schneier on Security Security in 2020: Revisited - Schneier on Security  ブログ: 2020年のセキュリティ: 再考   システムバグ以外の問題もあった米民主党アイオワ州党員集会の集計トラブルをまとめてみた - piyolog  モバイル投票アプリ「Voatz」の脆弱性を研究者らが指摘、開発元は猛反論 - ZDNet Japan 米民主党アイオワ州党員集会の混乱招いたシステム不具合、問題の所在は？ - ZDNet Japan   ニュース - アルマ望遠鏡がとらえた、連星系を成す星の最期 - アルマ望遠鏡 How Big Companies Spy on Your Emails - VICE  Companies that Scrape Your Email - Schneier on Security   投稿と削除が繰り返されたFacebookの公式SNSアカウント侵害についてまとめてみた - piyolog 米国土安全保障省が不法移民の特定にアプリの位置情報を利用、自由人権協会が反発 | TechCrunch Japan Internet\u0026rsquo;s safe-keepers forced to postpone crucial DNSSEC root key signing ceremony – no, not a hacker attack, but because they can\u0026rsquo;t open a safe • The Register  DNSSEC Keysigning Ceremony Postponed Because of Locked Safe - Schneier on Security    天文関連  MIT Tech Review: 史上初、5億光年彼方の電波バーストに16日の周期性を発見 https://apod.nasa.gov/apod/ap200210.html ESA Science \u0026amp; Technology - Liftoff for Solar Orbiter, ESA\u0026rsquo;s mission to face the Sun up close  Solar Orbiter Launch Takes Solar Science to New Heights | NASA 2020年2月12日ニュース「太陽フレアを観測する探査機を欧米宇宙機関が打ち上げ」 | SciencePortal   宇宙産業スタートアップAstroscaleがJAXAと共同でスペースデブリ処理へ | TechCrunch Japan 地上大型電波望遠鏡により、土星の衛星タイタンの大気成分の詳細な観測に成功 ～太陽系外からの放射線が大気成分に与える影響を明らかに～ | 国立天文台(NAOJ)  プレスリリース - 地上大型電波望遠鏡により、土星の衛星タイタンの大気成分の詳細な観測に成功 ～太陽系外からの放射線が大気成分に与える影響を明らかに～ - アルマ望遠鏡   APOD: 2020 February 14 - The Pale Blue Dot ESO Telescope Sees Surface of Dim Betelgeuse | ESO  Is Betelgeuse Approaching a Crossroads? - Sky \u0026amp; Telescope 減光し続ける「ベテルギウス」の最新画像が公開。2月下旬から増光に転じる様子 - sorae 宇宙へのポータルサイト    Linux または Ubuntu に関する話題  Ubuntu 18.04 その378 - Ubuntu 18.04.4 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb  その他  未来のプログラミングについて再考（機械学習とソフトウェア2.0、配管工プログラマ、オープンソースでは十分でない？） - YAMDAS現更新履歴 Web 3.0がもたらす3つの革命 - YAMDAS現更新履歴 Apple、パスワードを不要にするFIDO Allianceへの加盟が明らかに － Publickey オープンソースのグラフデータベース「Neo4j 4.0」正式版リリース。リアクティブアーキテクチャを新採用 － Publickey Coronavirus disease 2019 Angular 9正式版リリース。高速かつ軽量なレンダリングエンジン「Ivy」がデフォルトに － Publickey イランとイラクを結ぶ「命綱」の石油・ガス・電力輸出入がかろうじて続く：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト GitHubがコマンドラインツール「GitHub CLI」公開。コマンドラインからIssueやプルリクなど実行可能に。Windows、Mac、Linux対応 － Publickey スケールする組織を支えるドキュメンテーションの技術を”GitLab Handbook”から学ぶ｜Anno Takahiro｜note  "
    },
    {
      "title": "リスクは事前と事後をセットで考える",
      "section": "remark",
      "description": "感染者と死人を数え上げて脅威を煽るだけのメディア報道は無視して，ハザードからリスクへ頭を切り換えよう。。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/02/risk-of-infection/",
      "published": "2020-02-15T11:15:03+00:00",
      "update": "2020-02-16T00:44:40+00:00",
      "content": "今日は通院日。\n数年かけて体重を70kg未満まで落としたが，かかりつけ医は65kgまで落とせという。 しかも「筋肉は落とさないように」と釘を刺された（笑） 身体を動かすのって苦手なんだよなぁ。\nかかりつけ医に「新型コロナウイルスが流行ってるみたいですが，疑わしい症状が出たらどうすればいいですか？」と訊いてみた。 すると「まずは保健所へ連絡」とのこと。 そういや SARS (Severe Acute Respiratory Syndrome) のときもそうだったな。 基本は同じということだろう。\n私のかかりつけのクリニックは循環器科なので風邪やインフルエンザに対して重症化リスクの高い人が集まりやすい（当然ながら年寄りが多い，土地柄もあるけどw）。 私もその高リスク群に入るんだけど（笑） そんなところに，新型コロナウイルスに感染したかもしれない，などとノコノコ行けるわけがない。\nWHO の situation report を見ると中国国内の感染者数に対して（日本を含め）国外の感染者数が桁違いに少ないのが分かる。 これは各国の防疫対策がきちんと機能していると評価すべきだ。 そこに政治宣伝を挟み込む余地はない。\nでも，たとえば日本でも数ヶ月単位で渡航歴のない人から感染者が出た時点でハザードのみで対処するフェーズは終わっているのだ。 感染者と死人を数え上げて脅威を煽るだけのメディア報道は無視して，ハザードからリスクへ頭を切り換えよう。 そしてリスク管理は事前と事後をセットで考えないと意味がない。\n事前の予防は（正しく情報を伝えた (リスク・コミュニケーション) 上で）最終的には個人の行動に委ねるしかないが，事後の対応は政府・自治体の仕事である。\n今だに対策に「早めの受診」とか言ってるところがあるようだが，声を大にして「馬鹿か！」と言いたい。 まぁ，かかりつけ医も「まずは保健所へ連絡」と言ってたし，政府・自治体・保健所・医療機関等の連携は完了してるんだよね？\nところで，そろそろ「新型コロナウイルス」って言うの止めない？ それ言ったら SARS だって当時は新型のコロナウイルスだったんだよ。 だからといって 2019-nCoV とか COVID-19 とかってのは記号に過ぎないので日常会話には使えないだろうけど。\nブックマーク  Coronavirus disease 2019 新型コロナウイルス（2019-nCoV）関連情報について  新型コロナウイルス（2019-nCoV）関連情報ページ    "
    },
    {
      "title": "#shimanego より： 配列とスライスとソート",
      "section": "remark",
      "description": "Slice 周りで「あれ？」と思ったらこのスライドのことも思い出してあげてください。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/02/array-slice-sort/",
      "published": "2020-02-13T13:43:11+00:00",
      "update": "2020-02-13T13:44:45+00:00",
      "content": "今月も Shimane.go#04 に参加して図々しくもまた喋ってきた。 以下にそのとき使ったスライドを公開しておく。\n 配列とスライスとソート | slide.Baldanders.info  ターゲットとしては “A Tour of Go” をひととおり終わらせて「なんとなく」 Go が分かってきたかなぁ，という感じの人。 さすが松江は「お膝元」なので Ruby 経験者は多いが Go には馴染みのない人が多いようなので。\n実はソートの速度とかベンチマークを取ってやろうかとも考えたのだが，いい感じのデータが作れず（ただのランダムなデータ列ならいくらでも作れるけど，多分そうじゃない），諦めた。 いい方法を考えたらそのうちブログ記事にするかも。\nたぶん Go 言語で引っかかりやすいのは interface と slice だと思う。 “interface の slice” とか最凶ダッグである（笑） ちうわけで slice 周りで「あれ？」と思ったらこのスライドのことも思い出してあげてください。\nまぁでも，やっぱ座学は退屈だよねぇ。 プログラムは書いてナンボだし。 なんか面白い遊びを提示できればいいんだけど。\nブックマーク  配列と Slice ソートを使う インスタンスの比較可能性  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 1.13.8 がリリースされた",
      "section": "release",
      "description": "今回はセキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/02/go-1_13_8-is-released/",
      "published": "2020-02-13T13:42:59+00:00",
      "update": "2020-02-13T13:44:45+00:00",
      "content": "Go 1.13.8 がリリースされた。\n Go 1.13.8 and Go 1.12.17 are released - Google Group  今回はセキュリティ・アップデートはなし。\ngo1.13.8 (released 2020/02/12) includes fixes to the runtime, the crypto/x509, and net/http packages. See the Go 1.13.8 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.13.8.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.13.8.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.13.8.linux-amd64.tar.gz $ sudo mv go go1.13.8 $ sudo ln -s go1.13.8 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.13.8 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "人を憎んで罪を憎まず",
      "section": "remark",
      "description": "またもや日本は下らないことで足踏みして周回遅れを重ねるわけだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/02/ye-not-guilty/",
      "published": "2020-02-09T05:56:08+00:00",
      "update": "2020-02-09T11:07:21+00:00",
      "content": "次回イベントのスライドを練っている途中だが，愚痴としてちょろんと書いておく。\n 逆転有罪のコインハイブ事件、判決詳報　弁護側は「不当判決」と憤りあらわ - 弁護士ドットコム  この判決について思うところはあるが，基本的に「政治的無関心」を貫くつもりなので，私は判決の是非についてはどちらも支持しない。\n日本は，法運用に関しては，法治国家ではない。 日本の警察は基本的に「見せしめ」主義で「罪人」を決めている。\nそれって要するに「人を憎んで罪を憎まず」ってことだ。 このメンタリティは日本中に蔓延していると言っていいだろう。 今回も件の被告人が本当に（警察が主張する）罪を犯しているかどうかは（多分）どうでもよくて「罪を付ける」ことに全力を挙げている様子が滑稽で恐ろしい。 とんだB級ホラーだ。\nたとえば，今回の判決の反応として「マイニング・コードが有罪ならアクセス解析コードも有罪だろう（だからマイニング・コードの埋め込みは罪とは言えない）」とかいうのを見かけたが，日本の警察はそれが必要だと考えるなら法解釈を捻じ曲げてでも有罪にするよ，多分。 つか，監視資本主義の被搾取者である私は Web ページのアクセス解析コードは滅びて欲しいと思ってるよ？\n「正しい問いを立てる」ことは「正しい答えを解く」ことより何倍も難しい。 私は今回の件に関して知らんぷりするが（もう職業エンジニアじゃないし），もし真面目に議論する気があるというのなら，まずは「正しい問いを立てる」ところから始めるべきだろう。\nもちろんこれは今回の件に限らない。 またもや日本は下らないことで足踏みして周回遅れを重ねるわけだ。\n以上，愚痴終わり。 作業に戻るか。\nブックマーク  サイトオーナーがページの広告掲載の代わりにマイニング・コードを仕込むのはヤクザの「みかじめ料」と同じ 鬼ごっこと責任転嫁と人身御供 「計算機・ネットワークは有益な目的に使おう」  参考図書  いかにして問題をとくか G. ポリア (著), Polya,G. (原著), 賢信, 柿内 (翻訳) 丸善 1975-04-01 単行本 4621045938 (ASIN), 9784621045930 (EAN), 4621045938 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。\nreviewed by Spiegel on 2014-09-26 (powered by PA-APIv5)\n  THE ビッグオー  Prime Video B0732279VT (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  名作。絵のテイストも好みだし，ハイライトのない瞳の表現とかも素敵。汝ら罪なし！\nreviewed by Spiegel on 2019-03-17 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-02-08 のブックマーク",
      "section": "bookmarks",
      "description": "「新型コロナウイルスに関連したサイバー犯罪、誤情報などをまとめてみた」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/02/08-bookmarks/",
      "published": "2020-02-08T11:44:29+00:00",
      "update": "2020-02-08T11:48:48+00:00",
      "content": "リリース情報  Mostly bugfixes … | Hugo  セキュリティ＆プライバシー関連  NSA Security Awareness Posters - Schneier on Security アップルが「SMS認証」の標準化を提案。Googleはすでに受け入れ - Engadget 日本版 Attacking Driverless Cars with Projected Images - Schneier on Security マイクロソフトのクラウドサービス「Microsoft Teams」がサーバ証明書を更新し忘れ。2時間のあいだユーザーからアクセスできなくなる障害発生 － Publickey 新型コロナウイルスに関連したサイバー犯罪、誤情報などをまとめてみた - piyolog A New Clue for the Kryptos Sculpture - Schneier on Security グーグル「Chrome」、HTTPSページでの安全ではないダウンロードを段階的にブロックへ - ZDNet Japan 中国製ネットワークカメラに管理者権限を奪取できるバックドアの存在が報告される - GIGAZINE  天文関連  これが太陽の表面。ハワイの太陽望遠鏡が高解像度画像と動画を公開 - sorae 宇宙へのポータルサイト 132億年前の宇宙に存在した大量の塵 ～宇宙初期の星形成史をさかのぼる～ | 国立天文台(NAOJ) Could a habitable planet orbit a black hole? | Science | AAAS  ブログ: 居住可能な惑星がブラックホールの軌道を回ることができるか?    Linux または Ubuntu に関する話題  Ubuntu 19.10 その113 - コーディングをもっと効果的に・Snap Storeからインストール可能なIDEと開発ツール6選 - kledgeb  その他  ネガフィルムを鑑賞アプリ『NEGAVIEW PRO』Android版の配信を開始 2019年3月22日ニュース「世界最長の多関節ロボットアームの保持性能を確認 構造物点検のほか廃炉作業への応用も期待」 | SciencePortal 北極圏の永久凍土下でオープンソースのコードを1000年保存する「GitHub Archive Program」。本日、保存すべきプロジェクトの締め切り日 － Publickey ブログ: 99台の携帯電話でGoogleマップに偽の交通渋滞を生み出す Google Kubernetes EngineがWindows Serverコンテナをサポート。同一クラスタ内でLinuxコンテナとWindows Serverコンテナが共存可能 － Publickey “江頭2:50”を「Google Chrome」のアドレスバーからググると……？ - やじうまの杜 - 窓の杜 2020年2月5日ニュース「クルーズ船の10人が新型コロナウイルス陽性 国内報告感染者は33人で中国以外の国で最多に」 | SciencePortal LibreOffice, OpenOffice(.org) and Go-OO timeline of major releases - The Document Foundation Blog aozorablog » タロットの絵解キ／杯の組（Ａ・Ｅ・ウェイト／大久保ゆう訳） SAM使って文字起こし＆言語分析してみた - gitkadoの日記 マイクロソフト、新しいEdgeでDevToolsの日本語化実現。Chromiumのソースコードにもコントリビュート － Publickey 逆転有罪のコインハイブ事件、判決詳報　弁護側は「不当判決」と憤りあらわ - 弁護士ドットコム 2020年2月7日ニュース「『国内で散発的流行起きていてもおかしくない』 新型肺炎で感染症学会が見解」 | SciencePortal GitHub - bep/golibsass: Work in progress. Forging SWIFT MT Payment Messages for fun and pr\u0026hellip; research! 「香川県ネット・ゲーム依存症対策条例（仮称）素案に対するパブリックコメント」に意見を提出しました - MIAU  "
    },
    {
      "title": "Go 1.14 リリース候補版",
      "section": "release",
      "description": "この記事では個人的に気になった点をかいつまんで紹介する。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/02/go1_14-rc/",
      "published": "2020-02-08T06:33:22+00:00",
      "update": "2020-02-08T06:34:52+00:00",
      "content": "Go 1.14 のリリース候補版が出た。 これに伴ってリリースノートのドラフト版も更新されたようだ。\n Go 1.14 Release Candidate 1 is released - Google group Go 1.14 Release Notes - The Go Programming Language  更にブログでは以下の記事で 1.15 についても言及されている。\n Proposals for Go 1.15 - The Go Blog  詳しくはそれぞれの記事を読んでもらうとして，この記事では個人的に気になった点をかいつまんで紹介する。\nTry 終了のお知らせ 「Go 1.13 と 1.14」で紹介した try() 組み込み関数の導入は見送られたらしい。\nOur attempt seven months ago at providing a better error handling mechanism, the try proposal, met good support but also strong opposition and we decided to abandon it. In its aftermath there were many follow-up proposals, but none of them seemed convincing enough, clearly superior to the try proposal, or less likely to cause similar controversy. via Proposals for Go 1.15  というわけで，エラー・ハンドリング周りはこれ以上の仕様追加・変更は（1.x の間は）なさそうである。\n埋め込み Interface の改善 Go 1.14 では埋め込み interface の仕様が一部変更になる。\nPer the overlapping interfaces proposal, Go 1.14 now permits embedding of interfaces with overlapping method sets: methods from an embedded interface may have the same names and identical signatures as methods already present in the (embedding) interface. This solves problems that typically (but not exclusively) occur with diamond-shaped embedding graphs. Explicitly declared methods in an interface must remain unique, as before. via Go 1.14 Release Notes (draft)  Go では interface は振る舞いのみを定義する型だが，入れ子にすることができる。 こんな感じ。\ntype Person interface { Name() string Age() int } type Employee interface { Person Level() int String() string } この例では Employee interface 型に Person interface 型が埋め込まれている。 つまり Employee 型では Name(), Age(), Level(), String() 各メソッドを要求しているわけだ。\nここで Person 型に String() メソッドを付けることを考える。\ntype Person interface { Name() string Age() int String() string } 修正された Person 型を使って Employee 型を定義しようとしても duplicate method String とコンパイルエラーになる。 Interface 型の間で定義するメソッドを調整すればいいのだが，他パッケージの interface 型を埋め込む場合は，そのパッケージの仕様変更の影響をモロに受けることになる。\n更に\n のようなひし形構造になっている場合はより複雑になる。\nGo 1.14 では（関数型の同一性も含めて）同じメソッドについては重複を許容する。 上述のコード例でもコンパイル・エラーにならないわけだ。\nただし\ntype E1 interface{ M(x int) bool } type E2 interface{ M(x float32) bool } type I interface { E1 E2 } では（メソッド M() の型が同一ではないので）相変わらずコンパイル・エラーになるようだ。\nPreemptive なスケジューリング これは Shimane.go の Slack で教えてもらったのだが， Go 1.14 では preemptive (非協調的) なスケジューリング実装になるようだ。\nGoroutines are now asynchronously preemptible. As a result, loops without function calls no longer potentially deadlock the scheduler or significantly delay garbage collection. via Go 1.14 Release Notes (draft)  もともと Go 言語には，ランタイムによって並列処理の実装詳細を隠蔽することにより，コード記述としての平行処理に注力できるというメリットがあるが preemptive なスケジューリングによって強化されることになる。\nただし全てのプラットフォームで有効になるのではなく\n windows/arm darwin/arm js/wasm plan9/*  は例外となるらしい。 WebAssembly や Plan 9 が non-preemptive になるのは分かるが， ARM アーキテクチャって実装が難しいのか？\nモジュール対応モード モジュール対応モード（module-aware mode）も色々と機能追加されるようだ。 特に vendor ディレクトリとの組み合わせは色々とできそうだ。\nWhen the main module contains a top-level vendor directory and its go.mod file specifies go 1.14 or higher, the go command now defaults to -mod=vendor for operations that accept that flag. A new value for that flag, -mod=mod, causes the go command to instead load modules from the module cache (as when no vendor directory is present). via Go 1.14 Release Notes (draft)  この辺は Go 1.14 正式版がリリースされてから試してみよう。\nLaunched pkg.go.dev  Next steps for pkg.go.dev - The Go Blog  pkg.go.dev は従来の godoc.org から置き換えることができる。\nLike godoc.org, pkg.go.dev serves Go documentation. However, it also understands modules and has information about past versions of a package! via Next steps for pkg.go.dev  実際に2020年後半には godoc.org へのリクエストを pkg.go.dev にリダイレクトする計画があるらしい。\nTo minimize confusion about which site to use, later this year we are planning to redirect traffic from godoc.org to the corresponding page on pkg.go.dev. via Next steps for pkg.go.dev  標準パッケージもサードパーティのパッケージも同等に扱えるので，今後は pkg.go.dev を参照するのがいいかもしれない。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n  Go言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Eブック版もある。感想はこちら。 Go 言語で並行処理を書くならこの本は必読書になるだろう。\nreviewed by Spiegel on 2020-01-13 (powered by PA-APIv5)\n  Goならわかるシステムプログラミング 渋川 よしき (著), ごっちん (イラスト) ラムダノート 2017-10-23 単行本（ソフトカバー） 4908686033 (ASIN), 9784908686030 (EAN), 4908686033 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ファイルやソケットなどに代表される順次アクセスの汎化である io.Reader / io.Writer およびその派生・特化クラス，またプロセスやスレッドに関する解説が秀逸だと思う。さらに Docker コアの libcontainer についても解説がある。\nreviewed by Spiegel on 2018-10-19 (powered by PA-APIv5)\n "
    },
    {
      "title": "2021年の暦",
      "section": "remark",
      "description": "今年も国立天文台より翌年の暦要項が公開された。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/02/calendar-2021/",
      "published": "2020-02-03T11:15:16+00:00",
      "update": "2020-02-04T11:57:27+00:00",
      "content": "今年も国立天文台より翌年の暦要項が公開された。\n 令和3（2021）年暦要項の発表 | 国立天文台(NAOJ)  以降，いくつか抜粋してみる。\n祝日・休日1 2021年は振替休日なしか！\n   祝日休日名 日付     元日 2021-01-01 (金)   成人の日 2021-01-11 (月)   建国記念の日 2021-02-11 (木)   天皇誕生日 2021-02-23 (火)   春分の日 2021-03-20 (土)   昭和の日 2021-04-29 (木)   憲法記念日 2021-05-03 (月)   みどりの日 2021-05-04 (火)   こどもの日 2021-05-05 (水)   海の日 2021-07-19 (月)   山の日 2021-08-11 (水)   敬老の日 2021-09-20 (月)   秋分の日 2021-09-23 (木)   スポーツの日 2021-10-11 (月)   文化の日 2021-11-03 (水)   勤労感謝の日 2021-11-23 (火)    2021年の暦象 2021年は日食が2回，月食が2回ある。\n 2021-05-26 に皆既月食がある。日本でも見られる 2021-06-10 （時の記念日！）に金環日食がある。日本では見られない 2021-11-19 に部分月食がある。日本でも見られる 2021-12-04 に皆既日食がある。日本では見られない  ちなみに2021年の立春は2月3日だが，立春が2月4日から動くのは 1984年  ぶりで，しかも2月3日になるのは1897年ぶりらしい。 二十四節気は太陽黄経で決まるので割と動くイメージだったのだが，そうでもないようだ。 以前に「秋分の日が動き出す」とか話題になったな。\nそういえば\u0026hellip; 昨年はこの時期にこの手の記事を書かなかったな。 私生活がそれどころじゃなかったし。 だいぶ余裕が出てきたということか。\n2年前に書いた記事に「インフルエンザ過敏症とトリアージ」というのも書いたが，ぜひ今のタイミングで読んでいただきたいものである（笑）\nブックマーク  カレンダーに祝日を入れたいなら国立天文台へ行けばいいじゃない 2020年の主な暦象 2020年の祝日休日  参考図書  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n   「国民の祝日」は休日となる。また「「国民の祝日」が日曜日に当たるときは、その日後においてその日に最も近い「国民の祝日」でない日を休日とする」（「国民の祝日に関する法律」より）。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "インスタンスの比較可能性",
      "section": "golang",
      "description": "少なくとも == および != 演算子が使えることを「比較可能」であると言う。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/comparability/",
      "published": "2020-02-02T08:52:58+00:00",
      "update": "2020-02-02T09:18:28+00:00",
      "content": "次のイベントに向けてネタの整理をしているところだが，その中でインスタンスの比較可能性 (comparability) についてきちんと整理したほうがよさそうな気がしたので，小ネタ記事として公開する。\n用語の定義（暫定） 本題に入る前に，以下の2つの単語を，この記事限りの用語として定義する。 他所で使わないように（笑）\n   用語 意味     等値 インスタンスの値が等しい（equal）こと   等価 インスタンスの型が同一（identical）であること    プログラミングの世界で等値と等価に関して議論があることは知っているが，今回はまるっと無視する。 だって鬱陶しいんだもん。\n比較演算子 Go 言語ではインスタンス同士の比較演算子として\n   演算子 名称     == equal   != not equal   \u0026lt; less   \u0026lt;= less or equal   \u0026gt; greater   \u0026gt;= greater or equal    の5つが定義されている。 このうち少なくとも == および != が使えることを「比較可能（comparable）」であると言う。\n型の比較可能性 インスタンス同士が比較可能であるためには以下の2つの条件がが必要である。\n インスタンスの型が同一（等価）であること インスタンスの型が比較可能であること  たとえばある型を別の型に再定義しただけの場合でも等価とは見なされず，コンパイルエラーになる。\npackage main import \u0026#34;fmt\u0026#34; type Number int func main() { var c1 int = 1 var c2 Number = 1 fmt.Println(c1 == c2) //compile error: mismatched types int and Number } ただし，等価な型にキャスト可能であれば\npackage main import \u0026#34;fmt\u0026#34; type Number int func main() { var c1 int = 1 var c2 Number = 1 fmt.Println(c1 == int(c2)) //true } などとできる。 また type alias であれば等価とみなされる。\npackage main import \u0026#34;fmt\u0026#34; type Number = int  func main() { var c1 int = 1 var c2 Number = 1 fmt.Println(c1 == c2) //true } 型の比較可能性については以下の通り。\n   型 等値比較 大小比較     整数型 可 可   浮動小数点数型 可 可   複素数型 可 不可   真偽型 可 不可   構造体 可 不可   配列 可 不可   文字列 可 可   Slice 型 不可 不可   Map 型 不可 不可   関数型 不可 不可   Channel 型 可 不可   Interface 型 可 不可   ポインタ 可 不可    以下，補足。\nNaN は比較可能だが比較できない NaN (Not a Number) は浮動小数点数型における（ゼロ除算などの）特別な状態を示す。 NaN 自体は比較可能なのだが，常に同じ結果を返すので，比較演算子は使えない。 浮動小数点数の値が NaN かどうか調べるには math.IsNaN() 関数を使う。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;math\u0026#34; ) func main() { var z float64 nan := z / z fmt.Println(nan) //NaN \tfmt.Println(\u0026#34;NaN == NaN -\u0026gt;\u0026#34;, nan == math.NaN()) //false \tfmt.Println(\u0026#34;NaN != NaN -\u0026gt;\u0026#34;, nan != math.NaN()) //true \tfmt.Println(\u0026#34;NaN \u0026gt; NaN -\u0026gt;\u0026#34;, nan \u0026gt; math.NaN()) //false \tfmt.Println(\u0026#34;NaN \u0026lt; NaN -\u0026gt;\u0026#34;, nan \u0026lt; math.NaN()) //false \tfmt.Println(\u0026#34;math.IsNaN(NaN) -\u0026gt;\u0026#34;, math.IsNaN(nan)) //true  } 構造体要素の型 構造体は，要素の型が全て比較可能であれば，比較可能である。\npackage main import \u0026#34;fmt\u0026#34; type Number struct{ num int } func main() { c1 := Number{num: 1} c2 := Number{num: 1} fmt.Println(c1 == c2) //true } 配列要素の型 配列は，要素の型が比較可能であれば，比較可能である。\npackage main import \u0026#34;fmt\u0026#34; func main() { b1 := [1]byte{1} b2 := b1 fmt.Println(b1 == b2) //true  b3 := [2]byte{1, 2} fmt.Println(b1 == b3) //compile error: mismatched types [1]byte and [2]byte } ちなみに上のコードの [1]byte と [2]byte は等価ではないのでご注意を。 配列と Slice の関係については拙文「配列と Slice」を参考にどうぞ。\nポインタの型 ポインタはインスタンスのアドレッシングを指すものだが，等価なインスタンスのポインタであれば比較可能である。\npackage main import \u0026#34;fmt\u0026#34; type Number int func main() { var c1 int = 1 fmt.Println(\u0026amp;c1 == \u0026amp;c1) //true  var c2 Number = 1 fmt.Println(\u0026amp;c1 == \u0026amp;c2) //compile error: mismatched types *int and *Number } たとえば Slice 型や Map 型は比較可能ではないがポインタは比較できる（内容を比較しているわけではない）。\npackage main import \u0026#34;fmt\u0026#34; func main() { c1 := []int{1} c2 := []int{1} fmt.Println(c1 == c2) //compile error: slice can only be compared to nil \tfmt.Println(\u0026amp;c1 == \u0026amp;c2) //false } nil と比較可能な型 nil は（null 参照など）ポインタ値の特別な状態を示す。 なので nil はポインタと比較可能である。 他に nil と比較可能な型は以下の通り。\n Slice 型 Map 型 関数型 Channel 型 Interface 型  Slice 型, Map 型, 関数型は比較可能ではないが nil とは比較可能である。\nInterface 型の比較可能性 Interface 型は型情報と値への参照を属性として持っている。 Interface 型が参照している型を動的な型（dynamic type），参照値を動的な値（dynamic value）と呼ぶ。 動的な型も値も実行時に決まるからだ。\nたとえば\ntype Binary uint64 func (i Binary) String() string { return strconv.FormatUint(uint64(i), 2) } という型の定義に対して fmt.Stringer インタフェースを適用してみる。\nfunc main() { b := Binary(200) s := fmt.Stringer(b) fmt.Println(s.String()) // Output: \t// 11001000 } このときの fmt.Stringer インタフェースは以下のような構造になっている。\n via Go Data Structures: Interfaces  Interface 型は，動的な型が比較可能であれば，比較可能である。\nInterface 型の比較 Interface 型インスタンスの動的な型が等価で比較可能あれば値の等値性を調べられる。 更に Interface 型インスタンスの動的な型と等価な型のインスタンスとも（比較可能な型であれば）比較できる。\npackage main import \u0026#34;fmt\u0026#34; func main() { c1 := (interface{})(1) c2 := (interface{})(1) c3 := 1 fmt.Println(c1 == c2) //true \tfmt.Println(c1 == c3) //true } 通常の型では等価でない型同士の比較はコンパイルエラーになるが Interface 型同士であれば単に false なるだけである。\npackage main import \u0026#34;fmt\u0026#34; func main() { c1 := (interface{})(int(1)) c2 := (interface{})(byte(1)) c3 := (interface{})([]int{1}) fmt.Println(c1 == c2) //false \tfmt.Println(c1 == c3) //false } ただし動的な型が等価でも比較可能ではない場合には（コンパイルは通るが）実行時 panic になる。\npackage main import \u0026#34;fmt\u0026#34; func main() { c1 := (interface{})([]int{1}) c2 := (interface{})([]int{1}) fmt.Println(c1 == c2) //panic: runtime error: comparing uncomparable type []int } Interface 型インスタンスが比較可能か検証する 比較結果が false になるのはまだしも，実行時 panic はいただけない。 Panic を回避するには比較する前に動的な型が比較可能かどうか調べる必要がある。\n動的な型が比較可能かどうか調べるには reflect パッケージが使える。 たとえば，こんな感じでどうだろう。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;reflect\u0026#34; ) func Compare(left, right interface{}) bool { if !reflect.TypeOf(left).Comparable() \u0026amp;\u0026amp; !reflect.TypeOf(right).Comparable() { return false } \treturn left == right } func main() { c1 := (interface{})([]int{1}) c2 := (interface{})([]int{1}) fmt.Println(Compare(c1, c2)) //false } まぁ，実際に組み込むには（動的な型がポインタの際の処理など）もう少し工夫がいるだろう。 また，一般的に reflect は遅いと言われてるので，他の手段も考える必要があるかもしれない。\nたとえば標準の errors.Is() 関数は\n// Is reports whether any error in err\u0026#39;s chain matches target. func Is(err, target error) bool { if target == nil { return err == target } isComparable := reflectlite.TypeOf(target).Comparable() \tfor { if isComparable \u0026amp;\u0026amp; err == target { return true } if x, ok := err.(interface{ Is(error) bool }); ok \u0026amp;\u0026amp; x.Is(target) { return true } // TODO: consider supporing target.Is(err). This would allow \t// user-definable predicates, but also may allow for coping with sloppy \t// APIs, thereby making it easier to get away with them. \tif err = Unwrap(err); err == nil { return false } } } となっていて，独自の internal package を使っているようだ。\nブックマーク   Go で interface {} の中身がポインタならその参照先を取得する - Qiita\n  Sliceを含んだ構造体が等値演算子（==）でpanicを引き起こすのを回避する #golang - My External Storage\n  nil は nil\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-02-01 のブックマーク",
      "section": "bookmarks",
      "description": "「Performance-focused LibreOffice 6.4 is available for download」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/02/01-bookmarks/",
      "published": "2020-02-01T11:56:33+00:00",
      "update": "2020-02-01T11:59:00+00:00",
      "content": "リリース情報  Hugo 0.63.2: A couple of Bug Fixes | Hugo Performance-focused LibreOffice 6.4 is available for download - The Document Foundation Blog  セキュリティ＆プライバシー関連  ロシア職員関与と報じられたソフトバンク元社員の社外秘情報持ち出しについてまとめてみた - piyolog Modern Mass Surveillance: Identify, Correlate, Discriminate - Schneier on Security Leaked Documents Expose the Secretive Market for Your Web Browsing Data - VICE Google Receives Geofence Warrants - Schneier on Security Intel製CPUに投機的実行機能にまたサイドチャネル脆弱性、機密データを外部から推測されてしまう可能性 - 窓の杜 「Facebook外のアクティビティ」が全ユーザーに公開、広告ターゲティングの管理が容易に | TechCrunch Japan Customer Tracking at Ralphs Grocery Store - Schneier on Security Emotet感染メールに「新型コロナウイルス」、流行便乗攻撃に警戒を - ZDNet Japan MIT Tech Review: 顔認識にさらなる逆風、米プライバシー団体などが一時禁止を訴え 防衛装備品情報も影響を受けたNECへの不正アクセスについてまとめてみた - piyolog  天文関連  ブログ: 重力: 私たちは、この間ずっと間違っていたかも知れない 宇宙で最も明るい爆発現象の謎を解明 －超高輝度超新星「SN2006gy」の正体はIa型超新星だった－ — 京都大学 『はやぶさ２』の偉業「七つの世界初」！ - ちゅうおうくらしねっと NASAは天文学とエンジニアリングでのVRとARの本当の使い道を発見 | TechCrunch Japan News | Voyager 2 Engineers Working to Restore Normal Operations  ボイジャー2号で一時的に電力が不足、科学観測の再開に向け復旧作業中 - sorae 宇宙へのポータルサイト    Linux または Ubuntu に関する話題  Linuxカーネル「Linux 5.4.14」リリース | Think IT（シンクイット）  その他  中国コロナウイルスでフェイク拡散：それは“ビル・ゲイツの陰謀”ではない | 新聞紙学的  コロナウイルス特許の陰謀論について(栗原潔) - 個人 - Yahoo!ニュース   Linuxとオープンソースのこれまでと展望\u0026ndash;5つの要素にみる - ZDNet Japan LibreOffice Calc Guide 6.2 is now available - The Document Foundation Blog MIT Tech Review: FB研究所、微積分を数式のまま高速で解けるニューラルネット開発 「Thunderbird 78」への対応がキビしい！ アドオン開発者が“Kickstarter”で支援を呼びかける - やじうまの杜 - 窓の杜 If in について - 日本語 - Hugo Pandoc + minted でソースコード入りのきれいなPDFを作成した話 - Qiita Googleはなぜノーコード開発ツールのAppSheetを買収し、1年半前に正式版になったばかりのApp Makerを終了させるのか？ － Publickey ［ゲーム＆モダン JavaScript文法で2倍楽しい］グラフィックスプログラミング入門 ——リアルタイムに動く画面を描く。プログラマー直伝の基本：書籍案内｜技術評論社 ジャーナリストを黙らせるために悪用される\u0026quot;曖昧な\u0026quot;コンピュータ犯罪法 | P2Pとかその辺のお話R 2020年1月29日ニュース「フィリピンで雷を観測して極端気象を予測 超小型衛星と地上局を連動、北大など」 | SciencePortal もう不要ならWindows 7をオープンソース化しろ！ ～フリーソフトウェア財団の募る署名が目標を達成 - やじうまの杜 - 窓の杜 Thunderbird’s New Home | The Thunderbird Blog  「Thunderbird」プロジェクトがMozilla財団の完全子会社MZLA Technologiesへ移管される - 窓の杜   2020年1月31日ニュース「『新型肺炎は世界的な緊急事態』とWHO 日本では無症状感染者の出現で新たな局面に」 | SciencePortal Googleがセキュリティキーを自作可能になるオープンソースプロジェクト「OpenSK」を開始 - GIGAZINE  "
    }
  ]
}
