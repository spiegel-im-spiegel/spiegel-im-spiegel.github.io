{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "CVSS v3.1",
      "section": "remark",
      "description": "調べてみたら 3.1 って2019年6月にリリースされてたんだねぇ。 半年以上前の話だよ。 感度低いなぁ orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/cvss-v3_1/",
      "published": "2020-01-26T08:20:03+00:00",
      "update": "2020-01-26T08:21:08+00:00",
      "content": "前回の記事を書いてて気がついたのだが CVSSv3 のバージョンが 3.1 に上がってるぢゃん。\nたとえば CVE-2020-0601 の CVSS ベクタは\n CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N  の2つが用意されている。\n調べてみたら 3.1 って2019年6月にリリースされてたんだねぇ。 半年以上前の話だよ。 感度低いなぁ，私 orz\n3.0 と 3.1 の仕様は以下のリンクから見れる。\n CVSS v3.0 Specification Document CVSS v3.1 Specification Document  差分情報がないのでひっじょーに分かりにくいのだが1，各評価基準の項目と値に変更はなく，スコア算出式のみ変更になっているようだ。 しかも変更されているのは環境評価基準（Environmental Metrics）だけのようなので，私達がよく見る基本評価基準（Base Metrics）は変更なしと見てよさそうだ。\nなので上述の CVSS ベクタのスコアはいずれも 8.1 で深刻度（Severity Rating）も「重要（High）」となる。\n実は Go 言語で CVSS のパッケージを作って公開しているのだが\n spiegel-im-spiegel/go-cvss: Common Vulnerability Scoring System (CVSS) Version 3  基本評価基準しか実装してないんで大っぴらにしていない。 仕事で使いそうなら続きを作り込もうかと思っていたのだが，職業エンジニア自体が無期休業中だからねぇ（笑）\nなお spiegel-im-spiegel/go-cvss については，一応 v3.1 のベクタも受け入れるようにした。\nブックマーク   共通脆弱性評価システムCVSS v3概説：IPA 独立行政法人 情報処理推進機構 : v3.1 に対応していないように見えるのだが，やる気がないのかな？\n  JVN が CVSSv3 による脆弱性評価を開始\n    少なくとも技術文書をワープロで書くのは止めてほしいのだが。最終出力は PDF でも構わないが（PDF で出力するなら PDF/A で）， Markdown でも AsciiDoc でも Org-mode でもいいから，入力はプレイン・テキストで管理して欲しい。したら簡単に差分が取れるでしょ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.13.7 リリース予告と CVE-2020-0601",
      "section": "remark",
      "description": "来週1月28日（日本時間では1月29日かな）に Go 1.13.7 のリリースがあるようだ（予定は未定）。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/pre-announcement-of-go-1_13_7/",
      "published": "2020-01-25T07:46:13+00:00",
      "update": "2020-01-25T07:52:06+00:00",
      "content": "来週1月28日（日本時間では1月29日かな）に Go 1.13.7 のリリースがあるようだ（予定は未定）。\n [security] Go 1.12.16 and Go 1.13.7 pre-announcement - Google group  Go 1.13.7 にはセキュリティ・アップデートが含まれる。\nThese are minor releases that include two security fixes. One mitigates the CVE-2020-0601 certificate verification bypass on Windows. The other affects only 32-bit architectures. via Go 1.12.16 and Go 1.13.7 pre-announcement  CVE-2020-0601 は Windows CryptoAPI の不備で楕円曲線暗号（ECC）を使った証明書の検証がバイパスされてしまうというもの。 これによって証明書の偽装ができてしまう。 あとは分かるね。\n CVE-2020-0601 | Windows CryptoAPI Spoofing Vulnerability  CVSSv3 の評価は以下の通り。\n   基本評価基準 評価値     攻撃元区分 ネットワーク   攻撃条件の複雑さ 低   必要な特権レベル 不要   ユーザ関与レベル 要   スコープ 変更なし   機密性への影響 高   完全性への影響 高   可用性への影響 なし    CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N  深刻度は 8.1 (重要)1。\nただし，この脆弱性は1月の Windows Update で修正されている筈である。 つか，私はもう関係ないので完全にスルーしていた（笑）\n January 2020 Security Updates: CVE-2020-0601 - Microsoft Security Response Center  今回の CVE-2020-0601 の特徴は NSA が絡んでいる点である。\n Patch Critical Cryptographic Vulnerability in Microsoft Windows Clients and Servers   NSA の思惑は分からない。 しかし\nShe did not answer when asked how long ago the NSA discovered the vulnerability. She said that this is not the first time the NSA sent Microsoft a vulnerability to fix, but it was the first time it has publicly taken credit for the discovery. via Critical Windows Vulnerability Discovered by NSA - Schneier on Security  とある通り（どこぞの馬鹿メディアが言ってたみたいな）別に NSA の「お手柄」でもなんでもなく，政治的な思惑があって色々と天秤にかけた結果「公表」したということだろう。 まっ，国家の諜報機関なのだから当たり前だが（笑）\nというわけで，自前で防衛手段を持つというのは悪い話ではない。\nブックマーク  Critical Windows Vulnerability Discovered by NSA - Schneier on Security Windowsの暗号化機能に致命的な脆弱性、証明書偽装の恐れ ～米国家安全保障局が警告 - 窓の杜  参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  イミテーション・ゲーム／エニグマと天才数学者の秘密(字幕版) ベネディクト・カンバーバッチ (出演), キーラ・ナイトレイ (出演), マシュー・グード (出演), ロリー・キニア (出演), モルテン・ティルドゥム (監督), グラハム・ムーア (Writer)  (Release 2015-10-02) Prime Video B015SAFU42 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  主人公であるアラン・チューリングは今もなお「天才」と称される数学者であり，「コンピュータの父」と呼ばれるほどの偉人である。そしてチューリングの偉業のひとつが，旧ナチス・ドイツの暗号機械「エニグマ」の解読である。作品はそのエニグマの解読を主軸に物語を展開していく。感想はこちら。\nreviewed by Spiegel on 2015-04-19 (powered by PA-APIv5)\n   CVSSv3 では深刻度7.0以上なら速やかな対応が求められる。アップデートは計画的に（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ベテルギウスの息継ぎ",
      "section": "remark",
      "description": "もうしばらくは注視したほうがいいだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/betelgeuse/",
      "published": "2020-01-25T05:00:08+00:00",
      "update": "2020-01-25T05:19:38+00:00",
      "content": "昨年末から「ベテルギウス暗くね？」という話題を私の TL でも時々見かけるようになった。\n 暗いベテルギウス - 星のつぶやき  一応の解説をしておくと，ベテルギウスは冬の代表的な星座であるオリオン座の肩のあたりにある赤くて明るい星で，分類としては「赤色巨星」と呼ばれる終末期の恒星だ。 先日買った『理科年表 2020』によると（早速役に立ったw）地球からは約500光年離れている1。\nベテルギウスは脈動変光星としても知られている。 「脈動変光星」というのは星自体が膨張・収縮したり表面の形状が変わることで明るさが変化する恒星のことである。 ベテルギウスは星自体が膨張・収縮する「動径脈動」と呼ばれるものの一種だそうだ。\n「動径脈動」は変光範囲や周期がだいたい決まっている。 で，今回のベテルギウスは従来の規則性を超えて大きく減光したため「何かあった（またはある）んじゃねーの？」という話になったわけだ。\nもっとも，最新情報としては，ベテルギウスの減光は既に底を打って増光に転じているらしい，との話もある。\nベテルギウス　AAVSOのCCD測光のグラフです。\nどうやら底を打って増光に転じたようです。 pic.twitter.com/G5tZkSgG03\n\u0026mdash; 大島　修 (@osm2osm) January 22, 2020  更に別の記事では\nHowever, as pointed out by others, the current fainting episode could also arise from expelled, cooling gas/dust partially obscuring the star. The recent changes defined by our V-band/Wing photometry seem best explained from changes in the envelop-outer convection atmosphere of this pulsating, unstable supergiant. If these recent light changes are due to an extra-large amplitude light pulse on the ~420-day period, then the next mid-light minimum is expected during late January/early February, 2020. If Betelgeuse continues to dim after that time then other possibilities will have to be considered. The unusual behavior of Betelgeuse should be closely watched. via ATel #13410: The Continued Unprecedented Fading of Betelgeuse  とある。 息継ぎみたいなものかねぇ（笑） もうしばらくは注視したほうがいいか。\nしかし，まぁ，ぶっちゃけた結論を言うと「まだあわてるような時間じゃない」ということだ。\nここ1週間くらいのメディア報道を見かけるに，今にも超新星爆発が起きるみたいな言いかたをしているが，そんなこと言い出したらどれだけの星が候補に上がることやら。 ちなみに2020年版の「天文年鑑」に2018年7月から2019年7月までに観測された超新星の一覧が載っているが，全部で1,988個もある。 どう？ 一気にレアリティが下がったでしょ（笑）\n確かに500光年という「ご近所2」で超新星爆発が見られて，その過程において新しい知見が得られるかもしれないというのは，私も天文ファンの端くれとしてワクワクする。 それが明日か百年後か十万年後かは分からないけど，気なが〜に期待しましょう。\nブックマーク  MIT Tech Review: オリオン座のベテルギウスが急速に減光、超新星爆発の兆候か : この手の報道が急速に増えてねぇ。やっぱ MIT Tech Review はダメダメか？ ニュース - アルマ望遠鏡がとらえたベテルギウス - アルマ望遠鏡 : 2018年の過去記事なのでご注意を  参考図書  理科年表 2020 国立天文台 (編集) 丸善出版 2019-11-20 文庫 4621304259 (ASIN), 9784621304259 (EAN), 4621304259 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  日本における令和への改元や国際単位系（SI）の定義改定などに関するトピックを多く掲載。2020年版は（保存用として）買いかも。\nreviewed by Spiegel on 2019-12-08 (powered by PA-APIv5)\n  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n  天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいる。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\n   『理科年表 2020』に書かれている厳密な数値は498光年だが10%以上の誤差を含むとの注釈が付けられている。「理科年表」に掲載されている恒星のスペックは2007年の改訂ヒッパルコス星表をベースにしているそうで，距離に関しては年周視差から算出している。 \u0026#x21a9;\u0026#xfe0e;\n たとえば，カミオカンデによってニュートリノが検出された最初の例となったマゼラン星雲の SN 1987A は168k光年離れている。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "#shimanego より： 継承できないなら注入すればいいじゃない！",
      "section": "remark",
      "description": "今回は僭越ながら LT のひとつをやることになったので，ちょっとだけ頑張ったですよ（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/dependency-injection-by-golang/",
      "published": "2020-01-23T13:49:25+00:00",
      "update": "2020-01-25T01:57:19+00:00",
      "content": "Shimane.go#03 に参加してきた。 今回は僭越ながら LT (Lightning Talk) のひとつをやることになったので，ちょっとだけ頑張ったですよ（笑）\nLT のスライドは以下に置いてある。\n slide.Baldanders.info  継承できないなら注入すればいいじゃない！ | slide.Baldanders.info    サイト全体がスライドになっている。 右下の矢印をクリックするか [Page Up]/[page Down] または矢印キーの左右でページ送りできる。 スライド自体は CC BY で公開しているので，再利用は（条件の範囲内で）ご自由にどうぞ。\n本当はスライドを書いた Hugo 環境も GitHub あたりに公開したかったが，デプロイ用スクリプトとかもリポジトリに含まれているので，公開は見送ることにした。 ゴメンペコン。\nまぁ，私のはポエムみたいなものだが，他の方のは面白かった。 やっぱ Go をちゃんと仕事で使っている人は要所をキッチリ押さえた内容で，とても勉強になった。\nあと，やっぱ「独り遊び」には限界があることを思い知らされた。 たとえ仕事で使ってなくとも，こうやって興味のあるイベントに参加して他の方の「仕事」を見るのはためになるし，インスピレーションも湧いてくる。 「参加することに意義がある」って，多分こういうときに使う言葉なんだろう。\nちうわけで，今後も可処分時間の許す限り参加していこうと思っております，はい。\n 以降，追加のポエム。\n私は「数学ガール」シリーズの中の「制約が構造を生む」というフレーズが大好きだ。\n 公理によって与えられる暗黙の制約。この制約が集合の要素同士をしっかり結びつける。単純にしばるのではない、相互に秩序ある関係を結ぶ。言い換えれば――公理によって与えられる制約が構造を生み出しているのだ via 数学ガール／フェルマーの最終定理  プログラミング言語としての Go で気に入ってることのひとつは，まさに Go という制約が興味深い構造を生み出している点である。 いつだって新しい言語は面白いのだ（まぁ Go 言語はそろそろ中堅に入るのかもしれないがw）。\nいや，世の中「構造を守るために制約を課す」ケースが多すぎると思わない？ 逆だろ，ふつう。 少なくとも「開発」においては「構造を守るために制約を課」してはならないと思っている。 それは「停滞」と同義である。\nブックマーク   第3回 Shimane.go の様子 - Togetter\n  Hugo でスライド・サイトを立てる実験\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "JSON の操作",
      "section": "golang",
      "description": "某所であった JSON データの操作に関するやり取りが面白かったのでネタにしてみる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/operate-json/",
      "published": "2020-01-22T08:51:01+00:00",
      "update": "2020-01-22T08:58:07+00:00",
      "content": "某所であった JSON データの操作に関するやり取りが面白かったのでネタにしてみる。\nまず，サンプルの JSON データとして以下のデータを使う。\nvar sampleJSON = `{\u0026#34;books\u0026#34;: [ {\u0026#34;Type\u0026#34;: \u0026#34;aozora\u0026#34;, \u0026#34;ID\u0026#34;: \u0026#34;56839\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;ニャルラトホテプ\u0026#34;, \u0026#34;OriginalTitle\u0026#34;: \u0026#34;NYARLATHOTEP\u0026#34;, \u0026#34;URL\u0026#34;: \u0026#34;https://www.aozora.gr.jp/cards/001699/card56839.html\u0026#34;, \u0026#34;ProductType\u0026#34;: \u0026#34;青空文庫\u0026#34;, \u0026#34;Creators\u0026#34;: [ {\u0026#34;Name\u0026#34;: \u0026#34;ラヴクラフト ハワード・フィリップス\u0026#34; }, {\u0026#34;Name\u0026#34;: \u0026#34;大久保 ゆう\u0026#34;, \u0026#34;Role\u0026#34;: \u0026#34;翻訳\u0026#34; } ], \u0026#34;PublicationDate\u0026#34;: \u0026#34;2014-04-04\u0026#34;, \u0026#34;LastRelease\u0026#34;: \u0026#34;2015-08-19\u0026#34; }, {\u0026#34;Type\u0026#34;: \u0026#34;aozora\u0026#34;, \u0026#34;ID\u0026#34;: \u0026#34;4307\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;グリゴリの捕縛\u0026#34;, \u0026#34;URL\u0026#34;: \u0026#34;https://www.aozora.gr.jp/cards/000021/card4307.html\u0026#34;, \u0026#34;ProductType\u0026#34;: \u0026#34;青空文庫\u0026#34;, \u0026#34;Creators\u0026#34;: [ {\u0026#34;Name\u0026#34;: \u0026#34;白田 秀彰\u0026#34; } ], \u0026#34;PublicationDate\u0026#34;: \u0026#34;2001-11-26\u0026#34;, \u0026#34;LastRelease\u0026#34;: \u0026#34;2014-09-17\u0026#34; } ] }` このデータを簡単に扱う方法を考える。\nとりあえず map にデコードする お手軽なのは JSON オブジェクトを map[string]interface に，配列を []interface にデコードすることである。 たとえばこんな感じ。\nfunc main() { var decodeData map[string]interface{} if err := json.Unmarshal([]byte(sampleJSON), \u0026amp;decodeData); err != nil { fmt.Fprintln(os.Stderr, err) return } book0 := decodeData[\u0026#34;books\u0026#34;].([]interface{})[0] creators := book0.(map[string]interface{})[\u0026#34;Creators\u0026#34;].([]interface{}) fmt.Println(creators) // Output:  // [map[Name:ラヴクラフト ハワード・フィリップス] map[Name:大久保 ゆう Role:翻訳]] } ただ，このやり方では map や interface にデコードしたデータを取り出す際にキャストの嵐になるので，どうしても記述が煩雑になる。\nkoron/go-dproxy パッケージを使う 上述のデコードしたデータをもう少し簡単に扱うために koron/go-dproxy パッケージを利用する。 こんな感じ。\nfunc main() { var decodeData map[string]interface{} if err := json.Unmarshal([]byte(sampleJSON), \u0026amp;decodeData); err != nil { fmt.Fprintln(os.Stderr, err) return } a, err := dproxy.New(decodeData).M(\u0026#34;books\u0026#34;).A(0).M(\u0026#34;Creators\u0026#34;).Array() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(a)  // Output:  // [map[Name:ラヴクラフト ハワード・フィリップス] map[Name:大久保 ゆう Role:翻訳]] } エラーハンドリングも含めてかなりスッキリ書ける。 更に koron/go-dproxy パッケージは JSON Pointer (RFC 6901) にも対応しているそうで\nfunc main() { var decodeData map[string]interface{} if err := json.Unmarshal([]byte(sampleJSON), \u0026amp;decodeData); err != nil { fmt.Fprintln(os.Stderr, err) return } a, err := dproxy.New(decodeData).P(\u0026#34;/books/0/Creators\u0026#34;).Array()  if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(a) // Output:  // [map[Name:ラヴクラフト ハワード・フィリップス] map[Name:大久保 ゆう Role:翻訳]] } といった書き方もできる。 便利！\nJSON デコード用構造体を生成するツールを利用する 利用する JSON データの構成があらかじめ分かっているのなら yudppp/json2struct を使って JSON データから構造体を生成することができる。\nyudppp/json2struct はコマンドラインツールとして利用する。 こんな感じ。\n$ cat sample.json | json2struct -name=Booksdata type Booksdata struct { Books []BooksdataBook `json:\u0026#34;books\u0026#34;` } type BooksdataBook struct { Creators []BooksdataBookCreator `json:\u0026#34;Creators\u0026#34;` ID string `json:\u0026#34;ID\u0026#34;` LastRelease string `json:\u0026#34;LastRelease\u0026#34;` OriginalTitle string `json:\u0026#34;OriginalTitle\u0026#34;` ProductType string `json:\u0026#34;ProductType\u0026#34;` PublicationDate string `json:\u0026#34;PublicationDate\u0026#34;` Title string `json:\u0026#34;Title\u0026#34;` Type string `json:\u0026#34;Type\u0026#34;` URL string `json:\u0026#34;URL\u0026#34;` } type BooksdataBookCreator struct { Name string `json:\u0026#34;Name\u0026#34;` Role string `json:\u0026#34;Role\u0026#34;` } このコードを組み込んで使えばよい。 こんな感じ。\nfunc main() { var decodeData Booksdata \tif err := json.Unmarshal([]byte(sampleJSON), \u0026amp;decodeData); err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(decodeData.Books[0].Creators) \t// Output: \t// [{ラヴクラフト ハワード・フィリップス } {大久保 ゆう 翻訳}] } jq ぽい操作が欲しい もっとラフに jq ぽく JSON データを扱えないか。 たとえば savaki/jq を使えばできる。\nfunc main() { op, _ := jq.Parse(\u0026#34;.books.[0].Creators\u0026#34;) v, _ := op.Apply([]byte(sampleJSON)) fmt.Println(string(v)) // Output:  // [{\u0026#34;Name\u0026#34;:\u0026#34;ラヴクラフト ハワード・フィリップス\u0026#34;},{\u0026#34;Name\u0026#34;:\u0026#34;大久保 ゆう\u0026#34;,\u0026#34;Role\u0026#34;:\u0026#34;翻訳\u0026#34;}] } savaki/jq は JSON データのフィルタとして機能する。 操作としては savaki/jq で必要な部分を抽出した後，これまで述べた方法で操作する，といった感じに組み合わせて使うといいかもしれない。\nブックマーク   golang は ゆるふわに JSON を扱えまぁす! — KaoriYa\n  JSONをGolangのstructに変換する - ○△□ - yudppp techblog\n  jq ぽい何か を書いてみた\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "Flickr Pro が値上がりしてた",
      "section": "remark",
      "description": "2022年3月までは Pro ユーザらしいので，今後ともよろしく。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/flickr-pro/",
      "published": "2020-01-22T05:36:10+00:00",
      "update": "2020-01-22T05:39:37+00:00",
      "content": "どうも，天下無敵の貧困者 Spiegel だよ。 派遣会社から送られてきた源泉徴収書を見て軽く絶望中です。\n閑話休題 (それはさておき) 。\n今朝 Flickr からメールが来てて，どうやら Flickr Pro の料金を値上げするらしい。 こんな感じ。\n1 month: $7.99, tax inclusive 3 month: $21.99, tax inclusive 1 year: $71.88, tax inclusive 2 year: $139.88, tax inclusive  これは安易に Pro ユーザをお奨めできなくなったなぁ。\nただし現時点で Pro ユーザで2年分一括で払ってくれるなら今までと同じ値段にしてやると言われ，払い込みましたよ，さっき。\nまぁ Flickr 側の苦しい台所事情も分かるし，私自身も確かに\n 私のささやかな財力と残り少ない寿命が続く限り Pro ユーザを継続する via Flickr は監視資本主義に向かわない  と言ったし，払えない金額でもないので払うけどさ。 なんちうかこう，喫煙嗜癖者に対して煙草代をちまちま値上げして真綿で絞め殺す，みたいなやり口は尺然としない。\nとにかく，2022年3月までは Pro ユーザらしいので，今後ともよろしく。\nブックマーク  Flickr は監視資本主義に向かわない ようやく縁が切れました（もしくは Web 2.0 終焉の象徴としての Yahoo!）  参考図書  CODE VERSION 2.0 ローレンス・レッシグ (著), 山形浩生 (翻訳) 翔泳社 2007-12-19 (Release 2016-03-14) Kindle版 B01CYDGUV8 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  前著『CODE』改訂版。\nreviewed by Spiegel on 2018-11-17 (powered by PA-APIv5)\n  もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo (著) 達人出版会 2017-12-25 (Release 2019-03-02) デジタル書籍 infoshare2 (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  WirelessWire News 連載の書籍化。感想はこちら\nreviewed by Spiegel on 2018-12-31\n "
    },
    {
      "title": "Hugo 0.60+ 向けに reveal-hugo がアップデートされたようだ",
      "section": "remark",
      "description": "ただし markdown パーサが変わることで shortcodes の挙動が変わるので注意が必要である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/update-reveal-hugo-theme/",
      "published": "2020-01-19T12:48:34+00:00",
      "update": "2020-01-19T12:50:20+00:00",
      "content": "Hugo 用のスライド・テーマ reveal-hugo を Hugo 0.60+ でも使えるように修正した pull request が受理 (マージ) されたようだ。\n Hugo 0.60 compatibility by chatziko · Pull Request #69 · dzello/reveal-hugo · GitHub  これまでは markdown パーサとして russross/blackfriday にのみ最適化されていたが，今回のマージで既定の yuin/goldmark パーサが使えるようになった。 したがって，Hugo 環境の設定ファイル（config.toml）でも\n[markup] defaultMarkdownHandler = \u0026#34;blackfriday\u0026#34; の指定が不要になる。\nなお yuin/goldmark パーサのオプションとして\n[markup.goldmark.renderer] unsafe = true の指定はしておいたほうがいいだろう（既定の false のままだと本文中の HTML 記述が排除されてしまうため）。\nただし markdown パーサが変わることで shortcodes の挙動が変わるので注意が必要である。 挙動が変わりすぎて問題になるようなら russross/blackfriday パーサに戻すのも手である。\nShortcodes の挙動については，たとえば “fragment” なら，今までの russross/blackfriday パーサであれば\n{{% fragment %}}foo{{% /fragment %}} {{% fragment %}}bar{{% /fragment %}} と記述すれば\n\u0026lt;p\u0026gt;\u0026lt;span class=\u0026#39;fragment\u0026#39;\u0026gt;foo\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;span class=\u0026#39;fragment\u0026#39;\u0026gt;bar\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; と展開されるが， yuin/goldmark パーサでは\n\u0026lt;span class=\u0026#39;fragment\u0026#39;\u0026gt;foo\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#39;fragment\u0026#39;\u0026gt;bar\u0026lt;/span\u0026gt; てな感じになり \u0026lt;p\u0026gt; タグが付加されない。 ちなみに\n\u0026lt;p\u0026gt;{{% fragment %}}foo{{% /fragment %}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{% fragment %}}bar{{% /fragment %}}\u0026lt;/p\u0026gt; のように強制的に \u0026lt;p\u0026gt; タグを付けても，どこかに吸い込まれてしまい，同じ結果になる。\n更に行間を空けずに\n{{% fragment %}}foo{{% /fragment %}} {{% fragment %}}bar{{% /fragment %}} とすると，合わせてひとつの段落とみなされるため\n\u0026lt;p\u0026gt;\u0026lt;span class=\u0026#39;fragment\u0026#39;\u0026gt;foo\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#39;fragment\u0026#39;\u0026gt;bar\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; のように全体が \u0026lt;p\u0026gt; タグで囲まれる。 正しいけど，それがしたいんじゃないんだって！ どうにも shortcodes は挙動が謎だよなぁ。\n“fragment” の中身を見ると\n{{/* Render .Inner before processing the shortcode. */}} {{ $_hugo_config := `{ \u0026#34;version\u0026#34;: 1 }` }} \u0026lt;span class=\u0026#39;fragment {{ .Get \u0026#34;class\u0026#34; }}\u0026#39; {{ with .Get \u0026#34;index\u0026#34; }}data-fragment-index=\u0026#39;{{ . }}\u0026#39;{{ end }}\u0026gt; {{ .Inner }} \u0026lt;/span\u0026gt; とかなっていて，どうやら 0.55 以降にすら対応していないようだ1。\nとりあえず要らないものは取って\n\u0026lt;span class=\u0026#39;fragment{{ with .Get \u0026#34;class\u0026#34; }} {{ . }}{{ end }}\u0026#39;{{ with .Get \u0026#34;index\u0026#34; }} data-fragment-index=\u0026#39;{{ . }}\u0026#39;{{ end }}\u0026gt;{{ .Inner }}\u0026lt;/span\u0026gt; てな感じに1行にしてしまえば Hugo 0.60 以降にも対応する気がするが，どういう副作用があるか分からないので，今回は放っておく。 でもこのままでは困るので，私の方で “paragraph” shortcode を作ってみた。 中身はこんな感じ。\n\u0026lt;p{{ with .Get \u0026#34;class\u0026#34; }} class=\u0026#39;{{ . }}\u0026#39;{{ end }}{{ with .Get \u0026#34;lang\u0026#34; }} lang=\u0026#39;{{ . }}\u0026#39;{{ end }}\u0026gt;{{ .Inner }}\u0026lt;/p\u0026gt; これを使って\n{{\u0026lt; paragraph \u0026gt;}}{{% fragment %}}foo{{% /fragment %}}{{\u0026lt; /paragraph \u0026gt;}} {{\u0026lt; paragraph \u0026gt;}}{{% fragment %}}bar{{% /fragment %}}{{\u0026lt; /paragraph \u0026gt;}} とすれば意図通り\n\u0026lt;p\u0026gt;\u0026lt;span class=\u0026#39;fragment\u0026#39;\u0026gt;foo\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;span class=\u0026#39;fragment\u0026#39;\u0026gt;bar\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt; と展開される。\n今回はこれで凌ぐか。 準備完了っと。\nブックマーク  Hugo でスライド・サイトを立てる実験 ぼくがかんがえたさいきょうの Hugo Shortcodes    この {{ $_hugo_config := `{ \u0026quot;version\u0026quot;: 1 }` }} は Hugo 0.55 より前のバージョンの shortcodes の互換性を確保するための設定である。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-01-18 のブックマーク",
      "section": "bookmarks",
      "description": "「『現時点の情報では流行の可能性は低いがなお警戒を』新型肺炎、国内初確認で当局者」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/01/18-bookmarks/",
      "published": "2020-01-18T12:29:33+00:00",
      "update": "2020-01-18T12:35:40+00:00",
      "content": "リリース情報  Release 1.43.0 · atom/atom · GitHub Highlights from Git 2.25 - The GitHub Blog  セキュリティ＆プライバシー関連  10億件を超える患者の画像が米国の医療機関からオンラインに流出 | TechCrunch Japan 5G Security - Schneier on Security From a conversation with Thomas Pornin, a plausible explanation given the detail\u0026hellip; | Hacker News : ちょっと面白いかも Intel、2020年1月のセキュリティアドバイザリを公開 ～グラフィックスやチップセットが対象 - 窓の杜 Critical Windows Vulnerability Discovered by NSA - Schneier on Security  Windowsの暗号化機能に致命的な脆弱性、証明書偽装の恐れ ～米国家安全保障局が警告 - 窓の杜   メール内容から利用サービスを割り出しするリスト型攻撃についてまとめてみた - piyolog グーグルはChromeでのサードパーティCookieのサポートを2年以内に段階的に廃止 | TechCrunch Japan : とりあえず遅い！ 後払いサービスとフリマサイトを悪用した売上金詐取についてまとめてみた - piyolog 複数の Microsoft 社製品のサポート終了に伴う注意喚起：IPA 独立行政法人 情報処理推進機構  天文関連  新彗星を日本人天体捜索者が発見 | 国立天文台(NAOJ) 小惑星から飛来した火球 | 国立天文台(NAOJ)  知財関連  Paris Musées embraces open access | Europeana Pro W3CがDRM規格を認め3年経ち、もはや独立系ウェブブラウザが生き残る余地はない？ - YAMDAS現更新履歴 豪州：海賊版サイトブロッキング後に海賊ユーザが激減、さらに音楽・映画・ゲームへの支出も減少 | P2Pとかその辺のお話R Thoughts on \u0026ldquo;Non-Amicable\u0026rdquo; Enforcement of CC Licenses - Creative Commons  その他  ブログ: 仕事をしない将来の可能性に関する考え Why I quit using Google – Kyle Piira Chromium版Microsoft Edge、明日1月15日に予定通り正式公開の見通し － Publickey The GitHub for Android beta is here - The GitHub Blog インド最高裁がカシミールのインターネット遮断は不当で「権力の乱用」と裁定 | TechCrunch Japan LibreOffice Calc のボタン押下でのマクロ実行 - 電気ウナギ的○○ コミット前後でベンチマークが悪化していたらテストを落とすGoのCI用ツール - knqyf263\u0026rsquo;s blog : 面白いが，怖くて使えない（笑） 「邦訳の刊行が期待される洋書を紹介しまくることにする（2019年版）」で紹介した本のうち更に三冊の邦訳が出た（出る） - YAMDAS現更新履歴 : 一冊ポチった Haters  アンチとの向き合い方｜Jack / マイクロ起業家｜note ポール・グレアムの「アンチとの向き合い方」指南の納得と違和感 - YAMDAS現更新履歴   Y2Kから20年、\u0026ldquo;2020年問題\u0026quot;が再び開発者の頭痛の種に？ - ZDNet Japan : Y2K で場当たりな処理をして20年後にぶり返すとかバカすぎる orz BlazorでiOS/Androidネイティブアプリケーションを開発可能にする「Mobile Blazor Bindings」、マイクロソフトが発表 － Publickey  マイクロソフト、「Blazor WebAssembly」正式版を5月にリリース。BlazorでPWAやデスクトップアプリも開発へ － Publickey   Instagramがウェブ版ダイレクトメッセージを近く公開、暗号化には懸念の声 | TechCrunch Japan 2020年1月16日ニュース「大腸菌の代謝系を改変し、ナイロン原料の生産性8倍 神戸大など」 | SciencePortal JetBrains Mono: A free and open source typeface for developers | JetBrains: Developer Tools for Professionals and Teams マイクロソフト、「確定申告への影響を考慮し、Windows Updateを通じた新しいMicrosoft Edgeの配信は令和２年４月１日以降」と発表 － Publickey 2020年1月17日ニュース「『現時点の情報では流行の可能性は低いがなお警戒を』新型肺炎、国内初確認で当局者」 | SciencePortal Boseが日本を含む世界119カ所の直営店を閉鎖へ | TechCrunch Japan アプリケーションにおける権限設計の課題 - kenfdev’s blog  "
    },
    {
      "title": "5G セキュリティ・リスク",
      "section": "remark",
      "description": "歴史は繰り返す。 ハムスターの回し車のように…",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/5g-security-risk/",
      "published": "2020-01-18T12:26:35+00:00",
      "update": "2020-01-18T12:43:33+00:00",
      "content": "とても残念な話だが，大国間の極めて政治的なやり取りによって 5G のセキュリティ・リスクについて本当のところの議論がなおざりになっている感がある。\nというわけで Schneier 先生のエッセイを紹介する。\n 5G Security - Schneier on Security  詳しくはリンク先を見てもらうとして，この記事では Bruce Schneier さんが挙げる3つのセキュリティ問題を挙げておく。\nFirst, the standards are simply too complex to implement securely. This is true for all software, but the 5G protocols offer particular difficulties. Because of how it is designed, the system blurs the wireless portion of the network connecting phones with base stations and the core portion that routes data around the world. Additionally, much of the network is virtualized, meaning that it will rely on software running on dynamically configurable hardware. This design dramatically increases the points vulnerable to attack, as does the expected massive increase in both things connected to the network and the data flying about it. via 5G Security  Second, there’s so much backward compatibility built into the 5G network that older vulnerabilities remain. 5G is an evolution of the decade-old 4G network, and most networks will mix generations. Without the ability to do a clean break from 4G to 5G, it will simply be impossible to improve security in some areas. Attackers may be able to force 5G systems to use more vulnerable 4G protocols, for example, and 5G networks will inherit many existing problems. via 5G Security  いや，そんな継承いらんですよ orz\nThird, the 5G standards committees missed many opportunities to improve security. Many of the new security features in 5G are optional, and network operators can choose not to implement them. The same happened with 4G; operators even ignored security features defined as mandatory in the standard because implementing them was expensive. But even worse, for 5G, development, performance, cost, and time to market were all prioritized over security, which was treated as an afterthought. via 5G Security  これで思い出したのは，本家旧ブログで10年以上前（！）に書いた「GSM の暗号の解読」である。 その中で紹介している『情報セキュリティ技術大全』の中身を少し紹介しよう。\n 電話会社の観点からいえば、 GSM は成功だった。 Vodafone などの GSM 通信事業者の株主は莫大な利益を得た。その（ほんの）一部は、 GSM のチャレンジレスポンスメカニズムによってクローニングに歯止めがかかったおかげである。暗号の弱点など大した問題ではなかった。それらが悪用されたことはまったく（少なくとも、通信料収入を大きく損なうような形では）なかったからである。\n（中略）\n犯罪者の観点からも、 GSM は申し分なかった。 GSM は、電話サービスの盗聴に対する歯止めにはならなかった。単に犯罪の手口が変わっただけで、そのつけはクレジットカード会社や、アイデンティティ窃盗や路上での強盗に遭った被害者個人に回された。\n（中略）\n顧客の観点から見れば、 GSM は本来完全に安全なものとして販売されていた。これは正しかったのだろうか。確かに基地局までの通信の暗号化によって、アナログ電話でよく悩まされていた日常生活の盗聴はなくなった （有名人が被害を受け、 世間の注目を集めた事件がいくつかあった。たとえば，チャールズ英皇太子が離婚前に愛人との会話を盗聴された英国での事件や、 ニュート・ギングリッジ元米下院議長が絡んだ米国での事件などである）。しかし、世界中のほぼすべての電話盗聴は巨大な諜報機関によって行われており、彼等にとって暗号はほとんど問題にならない。\n via 『情報セキュリティ技術大全』（p.355-356）  “5G Security” に於いても，以下のように指摘されている。\nChinese, Iranians, North Koreans, and Russians have been breaking into U.S. networks for years without having any control over the hardware, the software, or the companies that produce the devices. (And the U.S. National Security Agency, or NSA, has been breaking into foreign networks for years without having to coerce companies into deliberately adding backdoors.) Nothing in 5G prevents these activities from continuing, even increasing, in the future. via 5G Security  歴史は繰り返す。 ハムスターの回し車のように\u0026hellip;\n 情報セキュリティ技術大全―信頼できる分散システム構築のために ロス アンダーソン (著), Anderson,Ross J. (原著), トップスタジオ (翻訳) 日経BP 2002-09-07 単行本 4822281426 (ASIN), 9784822281427 (EAN), 4822281426 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  セキュリティ管理者をやってた頃は，これで勉強しました。絶版だよなぁ，これ。名著なのに。時事的な情報は古いが，今でも十分通用する内容だと思う。誰か（日経BP以外）電子化して！\nreviewed by Spiegel on 2020-01-18 (powered by PA-APIv5)\n  【Momugs Akira】ハムスター回し車 サイレントホイール ハムスター おもちゃ ストレス解消 静か プラスチック ブルー bidear01 その他 B07925HGCX (ASIN), 0759981407536 (EAN), 759981407536 (UPC)  そういえば，うちは母親がネズミが嫌いだった。\nreviewed by Spiegel on 2020-01-18 (powered by PA-APIv5)\n "
    },
    {
      "title": "OpenJDK 13.0.2 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は深刻度が高いセキュリティ・アップデートを含んでいるようだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/01/java-13_0_2-is-released/",
      "published": "2020-01-15T00:11:22+00:00",
      "update": "2020-01-15T05:28:49+00:00",
      "content": "予定通り Java 13 のマイナー・バージョンアップが行われた。 今回は深刻度が高いセキュリティ・アップデートを含んでいるようだ。\n OpenJDK Vulnerability Advisory: 2020/01/14  以下に一覧を挙げておく。 なお Java 9, 10 および 12 は既にサポート外なので注意すること。\n  CVE ID Component CVSSv3\nScore Affects ...   7 8 11 13   CVE-2020-2604 core-libs/java.io:serialization 8.1 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2601 security-libs/java.security 6.8 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2655 security-libs/javax.net.ssl 4.8   \u0026#8226; \u0026#8226;   CVE-2020-2593 core-libs/java.net 4.8 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2654 security-libs/java.security 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2590 security-libs/org.ietf.jgss 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2020-2659 core-libs/java.nio 3.7 \u0026#8226; \u0026#8226;     CVE-2020-2583 client-libs/java.beans 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;    via OpenJDK Vulnerability Advisory: 2019/10/15  相変わらず溜め込んでるなぁ（笑）\nOpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk13.0.2/d4173c853231432d94f001e99d882ca7/8/GPL/openjdk-13.0.2_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-13.0.2_linux-x64_bin.tar.gz $ sudo ln -s jdk-13.0.2 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;13.0.2\u0026#34; 2020-01-14 OpenJDK Runtime Environment (build 13.0.2+8) OpenJDK 64-Bit Server VM (build 13.0.2+8, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\n    via Go 言語で Factory Method Pattern を構成できるか  うむうむ。 ちゃんと動くな。\nブックマーク   2020年1月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起 : Oracle Java を含む Oracle 製品のアップデート情報\n  Java 環境のリリースとサポートに関する覚え書き\n  結局 OpenJDK をインストールし直すことにした\n  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n   2020-01-12 に PlantUML VV1.2020.0 がリリースされている。 \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
