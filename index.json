{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "キーボード掃除機 買うた",
      "section": "remark",
      "description": "はりきってお掃除しませう！",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/08/keyboard-cleaner/",
      "published": "2022-08-15T06:21:47+00:00",
      "update": "2022-08-15T07:47:22+00:00",
      "content": "Facebook でこの記事を教えてもらった。\n掃除機を変えた、私が変わった《週刊READING LIFE Vol.180 変わること・変わらないこと》 | 天狼院書店 後半の\n世の中が変わって新しい物が出てきても、中々手を出せなくて様子見をすることが私は多い。世の中がその新しいものにシフトしていっても、今あるもので足りるからと取り入れるのに時間がかかる。でも新しいものを受け入れられると、生活に便利になるし、物事にかかる時間が短くなる。今回、新しいものを取り入れるために「何を変えたくないか」「何なら変えてもいいか」を考える時間を設けたことで、自分にとって何が大事かが分かった。1つの物に固執しすぎず、適度に新しいものを受け入れるためには、その都度自分にとっての大事かそうでないかを選択していくことが重要だった。 掃除機を変えた、私が変わったより というのは，なかなかに深い文章だ。 つか，要件設計そのものだよな，これ（笑）\nまぁ，難しい話はともかく，私も今年の引っ越しで新しく掃除機を買ったのだが，私の場合はバッテリー式のスティック・タイプであることともうひとつ，重心が低くて自立型であること。 「重心が低い」という条件が意外に難しくて，最終的にこの製品に決めた。\nエレクトロラックス コードレス 掃除機 エルゴラピード・リチウム スタンダートモデル サイクロン ハイパワー 軽量 アイロングレー ZB3502IGA エレクトロラックス (Release 2021-06-11) ホーム\u0026amp;キッチン B096ZBTTP7 (ASIN), 7332543819294 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 連続稼働時間が30分ほどしかないので，部屋数が多い家は無理かも。スティックを捻るとヘッドも追随して回るので取り回しは楽。自立型で壁とかに立て掛ける必要がない。一人暮らしに丁度いいサイズだな（笑）\nreviewed by Spiegel on 2022-02-05 (powered by PA-APIv5)\nたとえば Amazon が買収したというロボット掃除機を欲しがる人はまた別の要件を持っているだろう。 ホンマ掃除機って好みが出るよねぇ。\n掃除機については，もうひとつ。 キーボード掃除機を買った。\n勤務先で9月に大掃除をやるってんでパソコン掃除用に愛用のエアダスターを補充しておこうと思ったのだが，キーボード掃除機とかええかもしらんと思いついてポチった。\nキーボード掃除にエアダスターを使っていたが卓上掃除機買った | Flickr 性能は，まぁお値段なり（笑） でもコンパクトに持ち歩けるのは気に入った。 これなら職場に持っていってもいいだろう。\nはりきってお掃除しませう！\n参考 キーボード掃除 ミニ PCキーボード掃除機 ハンディークリーナー コードレス 卓上クリーナー 超 エアダスター USB充電式 LED 軽量 小型 OA掃除機 家/オフィス/車用 日本語説明書付き Trustnice B08Z7CWX2H (ASIN), 0740030425229 (EAN), 740030425229 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; コンパクトに収納できるのがよい。卓上掃除機としても使える。性能は値段なり。\nreviewed by Spiegel on 2022-08-15 (powered by PA-APIv5)\nHAKUBA エアダスター ノンフロン クリーンエースNFN350 逆さ使用OKタイプ KMC-NFN350 ハクバ (Release 2018-11-08) Camera B07H6FLS3N (ASIN), 4977187329414 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; カメラをやってた頃から愛用している。現在はキーボード掃除とかに使ったり（笑）\nreviewed by Spiegel on 2022-08-15 (powered by PA-APIv5)\n"
    },
    {
      "title": "GnuPG 2.3.7 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "1件の脆弱性が修正されている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/07/gnupg-2_3_7-is-released/",
      "published": "2022-08-14T01:10:01+00:00",
      "update": "2022-08-14T01:12:06+00:00",
      "content": "サボってました。 まじすんません。\n毎度遅まきながらで申し訳ないが GnuPG 2.3.6 および 2.3.7 がリリースされている。\n[Announce] GnuPG 2.3.6 released [Announce] GnuPG 2.3.7 released GnuPG 2.3.7 については1件の脆弱性が修正されている。\nThis release fixes CVE-2022-34903 which could be used to inject wrong status information in signatures. The status information could then be abused to display a wrong validity in Kleopatra and other users of GPGME. via GnuPG 2.3.7 released CVE-2022-34903 Fix possibly garbled status messages in NOTATION_DATA. This bug could trick GPGME and other parsers to accept faked status lines. via GnuPG 2.3.7 released CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N 深刻度: 警告 (Score: 6.5) 基本評価基準 評価値 攻撃元区分 ネットワーク 攻撃条件の複雑さ 高 必要な特権レベル 不要 ユーザ関与レベル 不要 スコープ 変更なし 機密性への影響 高 完全性への影響 低 可用性への影響 なし GnuPG 関連パッケージ GnuPG 関連の各パッケージのバージョンは以下の通り（数字は大体のビルド順）。\n# パッケージ名 バージョン 公開日 更新 1 Libgpg-error 1.45 2022-04-21 2 Libgcrypt 1.8.9 (LTS) 2022-02-07 Libgcrypt 1.10.1 2022-03-28 3 Libassuan 2.5.5 2021-03-22 4 Libksba 1.6.0 2021-06-10 5 nPth 1.6 2018-07-16 6 ntbTLS 0.3.1 2022-04-07 7 GnuPG 2.2.36 (LTS) 2022-07-06 GnuPG 2.3.7 2022-07-11 うわっ！ 2.2系もバージョンが上がってるぢゃん。 アナウンスがないぞ。\n現在 GnuPG には2.2系と2.3系があり1，2.2系は LTS 版に位置付けられている。 2.3系では AEAD (Authenticated Encryption with Associated Data) 等 RFC 4880bis で検討されている機能が実装されているので，最新機能を試したいのであればこちらを入れるとよいだろう。 なお2.2系は少なくとも2024年末まではサポートが続けられる予定である。 通常運用であれば，当面は2.2系でも問題ない（ECC も対応してるよ）。\nアップデートは計画的に。\nブックマーク OpenPGP の実装 参考図書 暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n厳密には1.4系もあるが，これは legacy 版と位置付けられており，よほどのバグか脆弱性がない限りは更新されない。もし今だに1.4系（あるいは既にサポートされていない2.0/2.1系）を使っているのなら2.2系以降にアップグレードすることを強くお勧めする。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "OpenJDK のセキュリティ・アップデート（2022-07）",
      "section": "release",
      "description": "影響を受けるバージョンは 18.0.1, 17.0.3, 15.0.7, 13.0.11, 11.0.15, 8u332, 7u341 およびそれ以前。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/07/openjdks-has-been-updated/",
      "published": "2022-08-14T00:43:22+00:00",
      "update": "2022-08-14T00:43:30+00:00",
      "content": "サボってました。 まじすんません。\n今更だけど，2022年7月に定例の Java マイナー・バージョンアップが行われた。\nOpenJDK Vulnerability Advisory: 2022/07/19 CVE ID ベースで4個の脆弱性修正がある。 影響を受けるバージョンは 18.0.1, 17.0.3, 15.0.7, 13.0.11, 11.0.15, 8u332, 7u341 およびそれ以前。\nCVE ID Component CVSSv3.1\nScore Affects ... 7 8 11 13 15 17 18 CVE-2022-34169 xml/jaxp 7.5 CVE-2022-21541 hotspot/runtime 5.9 CVE-2022-21549 core-libs/java.util 5.3 CVE-2022-21540 hotspot/compiler 5.3 via OpenJDK Vulnerability Advisory: 2022/07/19 OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。 以下は完全手動でのインストール（笑）\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://download.java.net/java/GA/jdk18.0.2/f6ad4b4450fd4d298113270ec84f30ee/9/GPL/openjdk-18.0.2_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-18.0.2_linux-x64_bin.tar.gz $ sudo ln -s jdk-18.0.2 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;18.0.2\u0026#34; 2022-07-19 OpenJDK Runtime Environment (build 18.0.2+9-61) OpenJDK 64-Bit Server VM (build 18.0.2+9-61, mixed mode, sharing) LTS 版 Java バイナリが欲しいなら Adoptium で取得できる。\n私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern よーし，うむうむ，よーし。\n参考図書 Spring Data JPAプログラミング入門 溝口賢司 (著) 秀和システム 2017-08-03 (Release 2018-04-23) Kindle版 B07CKHR8C1 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; JPA のお勉強用に購入。紙のほうはプレミアが付いてるっぽいが Kindle で買えるよ。固定レイアウトだからブラウザの Kindle Cloud Reader で読めるし。真面目に基本を押さえて書いていて分かりやすい。\nreviewed by Spiegel on 2021-08-26 (powered by PA-APIv5)\nEffective Java 第3版 Joshua Bloch (著), 柴田 芳樹 (翻訳) 丸善出版 2018-10-30 単行本（ソフトカバー） 4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。\nreviewed by Spiegel on 2021-03-17 (powered by PA-APIv5)\nSpring Boot 2 入門: 基礎から実演まで 原田 けいと (著), 竹田 甘地 (著), Robert Segawa (著) 2020-05-22 (Release 2020-05-22) Kindle版 B0893LQ5KY (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Spring Boot を勉強することになって急遽買った本。めっさ分かりやすかった。 PDF 版が欲しいくらい（笑） Spring Boot 2.7 対応にアップデートされていた。素敵！\nreviewed by Spiegel on 2022-08-14 (powered by PA-APIv5)\n2021-06-22 に PlantUML V1.2022.6 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "2022-08-11 のブックマーク",
      "section": "bookmarks",
      "description": "「NIST’s Post-Quantum Cryptography Standards」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/08/11-bookmarks/",
      "published": "2022-08-11T04:06:20+00:00",
      "update": "2022-08-11T04:06:27+00:00",
      "content": "リリース情報 Release v0.77 (2022-06-20) · ranvis/putty · GitHub Release v0.101.0 · gohugoio/hugo · GitHub Release v1.5.0 · spf13/cobra · GitHub Release v1.0.37 · sonatype-nexus-community/nancy · GitHub Visual Studio Code June 2022 Release v1.28.0 · tailscale/tailscale · GitHub Release v0.5.1 · geolonia/japanese-addresses · GitHub Release 0.25.0 · tinygo-org/tinygo · GitHub TinyGo 0.25 で遊べるマイコンボード一覧 - sago35の日記 Release v3.14.1 · go-task/task · GitHub Visual Studio Code July 2022 Release v1.48.0 · golangci/golangci-lint · GitHub Release 9.1.4 · mermaid-js/mermaid · GitHub Release gopls/v0.9.2 · golang/tools · GitHub Release Version 0.2.4 · ScoopInstaller/Scoop · GitHub セキュリティ＆プライバシー関連 プログラム言語のPythonとPHPのライブラリが乗っ取られて悪意のあるバージョンが公開、開発者の情報が収集される - GIGAZINE 監視のために「Signal」禁止へと突き進むベルギー政府――欧州の政策転換の前触れか | p2ptk[.]org プライバシー・セキュリティ・表現の自由を守るために、欧州委員会は規則案を撤回せよ | p2ptk[.]org RyzenのfTPMの不具合を修正。AGESA 1.2.0.7 BIOS公開。各マザーボードメーカーよりダウンロードが可能に | ニッチなPCゲーマーの環境構築Z A new vulnerability in Intel and AMD CPUs lets hackers steal encryption keys | Ars Technica Hertzbleed: A New Side-Channel Attack - Schneier on Security 中国政府は国民を監視するため大量の顔認識カメラを導入したりDNAデータベースを構築したりしていると入札文書から発覚 - GIGAZINE On the Subversion of NIST by the NSA - Schneier on Security Spurred by Roe overturn, senators seek FTC probe of iOS and Android tracking | Ars Technica 個人の音声データを“匿名化”せよ：認識技術の普及で高まるプライバシー保護の重要性 | WIRED.jp KDDIの通信障害についてまとめてみた - piyolog SP 800-219, Automated Secure Configuration Guidance from the mSCP | CSRC FTC cracking down on medical and location data sharing after abortion privacy concerns - The Verge Amazonの監視カメラRing、令状なし・所有者に無断で警察に映像を提供していたことが発覚 | p2ptk[.]org Pegasus：なぜ監視スパイウェアは万人の“表現の自由”を脅かすのか | p2ptk[.]org NIST’s Post-Quantum Cryptography Standards - Schneier on Security 表現の自由と暗号化を脅かす英国の“オンライン安全法案” | p2ptk[.]org 知財関連 著作権法は憲法修正第1条「匿名での言論保護」を覆すことはないと裁判所の判決が下る - GIGAZINE Linux または Ubuntu に関する話題 Ubuntu Linuxでapt upgradeで保留されたパッケージがあった場合に、アップデートするには？ - CLOVER🍀 : apt dist-upgrade が効かない場合。 apt install で上書きインストールすればいいらしい Azure や Windows に関する話題 Using Tailscale on Azure App Services · Tailscale Go 言語関連 What Made GoLang So Popular? The Language’s Creators Look Back – The New Stack 逆引き Goによる静的解析 Goのgenericsの型制約を一覧で表示できるコマンドを実装しました Custom GitHub Action with Go - TheDeveloperCafe loov/lensm: Go assembly and source viewer A Guide to the Go Garbage Collector - The Go Programming Language Go製の全文検索エンジンOmochiを作った. Go製ミドルウェアのメモリリークを解決した話 - Mirrativ Tech Blog : 解決までのプロセスは参考になる Go Vulnerability Management - The Go Programming Language Java 言語関連 はじめてのSpringBoot3　～ログイン機能:デフォルト～ Spring Security 5.7でセキュリティ設定の書き方が大幅に変わる件 - Qiita 天文関連 Famous \u0026lsquo;alien\u0026rsquo; Wow! signal may have come from distant, sunlike star | Space Meteor shower outburst from new tau Herculids possible May 30 | Space 天の川銀河中心のブラックホールの撮影に初めて成功 | 国立天文台(NAOJ) It’s time to leave the leap second in the past - Engineering at Meta ブログ: うるう秒を過去のものにする時が来た その他 スマートフォンにまつわる10の神話（ただし真実ではない） - YAMDAS現更新履歴 WirelessWire Newsブログの連載を約5年半ぶりに再開します - YAMDAS現更新履歴 プラットフォームの責任をめぐるグローバル・トレンド：セーフハーバーから責任強化へ | p2ptk[.]org wasmCloud Documentation API仕様を書く（まとめ）：柴田 芳樹 (Yoshiki Shibata)：SSブログ [初・中級者向け]Railsに関わる技術の体系化を目指した本 gRPCのGo実装の新星、Connect | フューチャー技術ブログ Introducing Tailscale SSH · Tailscale 西 和彦氏が「次世代MSX」採用の「1chip MSX 3」を公開。D4エンタープライズとの販売合意も発表 Azure Database for PostgreSQLでバックアップ、リストアを試してみた | Li-akb-branch-office 米国：Google、Facebook、Amazonにアドテク部門の分離・分割をせまる「デジタル広告法」案 | p2ptk[.]org 遂にLinuxカーネルにRust言語のコードが取り込まれるとな - YAMDAS現更新履歴 プログラミングRust 第2版 | Jim Blandy, Jason Orendorff, Leonora F. S. Tindall, 中田 秀基 |本 | 通販 | Amazon SSDの耐久寿命を伸ばすための技術「ウェアレベリング」に有効性はないという研究結果 - GIGAZINE 新機能盛りだくさんの「Thunderbird 102」が公開 ～「Thunderbird 91」系統も引き続き提供 - 窓の杜 「Vim」がスクリプト言語を一新 ～約6年ぶりのメジャーバージョンアップv9.0が公開 - 窓の杜 「AppleのiOSでのWebKit強制はウェブブラウザの将来性を奪うものだ」という主張 - GIGAZINE 中絶を必要とする人のためのセキュリティ・プライバシーガイド | p2ptk[.]org 生理管理アプリは今すぐ削除すべき？ | p2ptk[.]org ソーシャルメディアから削除される中絶の情報――何が起こっているのか、これからどうなるのか | p2ptk[.]org PostgreSQLでのバックスラッシュ文字の扱い - Qiita Azure said to be having capacity issues, supply chain blamed • The Register ゼロで割ってはいけない理由｜結城浩 【さくらのレンタルサーバ 】2022年2月15日以前にご契約されたサーバーのストレージ容量増量について | さくらインターネット 「VSCode」を縦書きビューや文字数カウントを備えた原稿エディターにする拡張機能「novel-writer」【レビュー】 - 窓の杜 「VS Code Server」が登場 ～VS Codeのバックエンドを単体CLIに、フロントエンドにはWeb版が使える - 窓の杜 シャノン・マターン『都市はコンピュータではない』はやはり邦訳が出るべきではないか - YAMDAS現更新履歴 Let’s Encryptでワイルドカード証明書を取得する話 | IIJ Engineers Blog 書籍『Googleのソフトウェアエンジニアリング』：柴田 芳樹 (Yoshiki Shibata)：SSブログ 数学ガールの物理ノート／波の重ね合わせ | 結城 浩 | 数学 | Kindleストア | Amazon : 発注済み PC 版または Mac 版 ChromeOS Flex を入手 - Chrome Enterprise : Linux 環境では USB インストーラを作成できないことが判明 orz 書籍『Docker Deep Dive』：柴田 芳樹 (Yoshiki Shibata)：SSブログ ゲームのプレイ時間はメンタルヘルスとは無関係だと判明、ただし「ゲームをやりたくてやっている」かどうかによる - GIGAZINE 【React/Vue.js】コンポーネント指向と好相性なCSS Modulesを用いたCSS設計について｜Offers Tech Blog なぜ“アダルト産業”はテクノロジーの最先端を行くのか | p2ptk[.]org 手動テストだけのソフトウェアは腐っていく：柴田 芳樹 (Yoshiki Shibata)：SSブログ GitHub Copilot は”gender”など特定用語を含むコードで動かなくなる – 秋元@サイボウズラボ・プログラマー・ブログ All You Need to Know about EdgeDB | AppSignal Blog 著書54冊!? エンジニアかつ「数学ガール」著者の結城さんが語る、エンジニアのメンタルマネジメントのすゝめ | アンドエンジニア Why scientists are turning to Rust "
    },
    {
      "title": "オープンソース製品とソフトウェア部品表",
      "section": "remark",
      "description": "ブログってのはこういう粗結合連鎖が面白いと思うのだけどねぇ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/08/software-bills-of-materials/",
      "published": "2022-08-09T11:31:46+00:00",
      "update": "2022-08-11T04:06:27+00:00",
      "content": "拙作の depm で利用している github.com/google/licenseclassifier パッケージの v2 系モジュールがいい感じにバージョンが上がってきたので，どのくらい使えるようになったのか試してみた記事がこれ。\nライセンスファイルからライセンスを推定する で，この記事について有り難くも「SPDX License identifier にも触れて欲しい」というリクエストを頂いたので SPDX (Software Package Data Exchange) についてちょろんと紹介する文章を追記した。 これを書くためにサイトを眺めて初めて気がついたのだが SPDX が ISO/IEC 5962:2021 として標準化されていたらしい。\nSPDX Becomes Internationally Recognized Standard for Software Bill of Materials - Linux Foundation Between eighty and ninety percent (80%-90%) of a modern application is assembled from open source software components. An SBOM accounts for the software components contained in an application — open source, proprietary, or third-party — and details their provenance, license, and security attributes. SBOMs are used as a part of a foundational practice to track and trace components across software supply chains. SBOMs also help to proactively identify software issues and risks and establish a starting point for their remediation. via SPDX Becomes Internationally Recognized Standard for Software Bill of Materials ISO/IEC 5962:2021 がリリースされたのが2021年8月。 その年の年末に例の Apache Log4j の脆弱性に端を発したソフトウェア・サプライチェーン脆弱性の問題が大きく取り上げられることになった。\nApache Log4jの脆弱性とともに浮かび上がったオープンソースのメンテナの責任範囲の問題 - YAMDAS現更新履歴 どーりで今年（2022年）に入ってやたらと「ソフトウェア部品表（Software Bill of Materials; SBOM）」の話を聞くようになったわけだ。\n更にタイミングのいいことに7月下旬に以下の記事が公開されていたのを yomoyomo さんの記事で知った。\nOpen-Source Security: How Digital Infrastructure Is Built on a House of Cards - Lawfare Securing Open-Source Software - Schneier on Security オープンソースのセキュリティ：デジタルインフラは砂上の楼閣に築かれている？ - YAMDAS現更新履歴 Importantly, the culprit was not the developers of the code but the company that failed to implement a patch that promised to prevent the very thing that happened. Many observers complain that Equifax has suffered little consequence for its negligence, highlighting weak oversight and accountability structures. via Open-Source Security: How Digital Infrastructure Is Built on a House of Cards これに対し、最近では連邦取引委員会が Log4Shell の対応パッチの適用が遅い企業を強制措置をかますなど、政府がオープンソースのセキュリティ問題に介入する姿勢を見せつつある。著者はその一環としての SBOM（Software Bill Of Materials：ソフトウェア部品表）を評価するが、それだけでは不十分と断じる。 オープンソースのセキュリティ：デジタルインフラは砂上の楼閣に築かれている？より An SBOM is simply a list of the ingredients, or codebases, that comprise software you purchased. It does not provide a list of vulnerabilities nor does it impose any minimum security requirements on the vendor generating the SBOM. Comparable to a list of ingredients on a snack or medication you purchase, the information is only as useful as your ability to parse it.\nTo operationalize an SBOM, a company must be able to read it, which is a challenge as there is no mandated standard format for an SBOM, and actually use it to check databases such as the National Vulnerability Database (NVD) for new vulnerabilities found in the software components the SBOM lists. These activities are costly and cumbersome. While Google and Intel might have the resources and security maturity to demand machine-readable SBOMs and regularly scan databases for new vulnerabilities that impact their systems, there are countless small businesses using open source that cannot.\nvia Open-Source Security: How Digital Infrastructure Is Built on a House of Cards 著者は、もはや公共財の性質を持つオープンソースを維持する制度的構造を構築する必要があると訴える。そして、それ自体は目新しい主張ではない。それには効率的な資源配分を確保し、最低基準を課すことが必要になるが、果たしてそれをオープンソースプロジェクトに適用するのはうまくいくかねというのがワタシの感想になる。 オープンソースのセキュリティ：デジタルインフラは砂上の楼閣に築かれている？より 個人的には FOSS 製品を「公共財」と見なす向きには違和感や危うさを感じてしまうのだが，もはや四の五の言ってられねー，って感じなのだろう。 せめて SPDX が SBOM の標準としてセキュリティ・リスク管理に上手く組み込まれることを期待したい。\n報告される脆弱性の量的評価としての CVSS，ソフトウェア・サプライチェーンの構成を可視化する SPDX/SBOM，脆弱性が報告された際のアクションを支援する SSVC1 といった道具・手段を組み合わせて，脆弱性報告から対応までのワークフローがスムーズに流れるようになるといいなぁ，と思ったり。 まぁ，そのワークフロー自体がソフトウェア・サプライチェーンだったりするのだが（笑）\nしかし，ブログってのはこういう粗結合連鎖が面白いと思うのだが「ブログの退潮」はもはや避けられぬか（笑）\nSynk と SBOM 開発者向けのセキュリティ関連サービスを提供している Synk は SPDX/SBOM について以下のように述べている。\nSnyk integrates with a wide range of different package managers and developer tools to help identify vulnerabilities in the software components used. In doing that we need to build up a SBOM under the hood, normalising the list of software and augmenting that list with additional metadata from other sources. The Snyk tooling mainly focuses on presenting that information alongside information about vulnerabilities, but Snyk customers can access that raw SBOM via our built-in reporting or powerful API.\nIn fact, you can think of Snyk client tools like the CLI and CI/CD plugins as generating an SBOM, while Snyk’s backend takes an SBOM and returns vulnerability data, or provides automation around that data to help you fix issues. It’s this extensive experience that leads to our interest in emerging standards in this space.\nvia Advancing SBOM standards: Snyk and SPDX | Snyk Microsoft と SBOM 忘れていたが Microsoft も SBOM を自動生成するツールを OSS で出してたんだっけ。\nMicrosoft open sources its software bill of materials (SBOM) generation tool - Engineering@Microsoft マイクロソフト、ビルド時にソフトウェアの部品表（SBOM）を自動生成する「SBOM Tool」、オープンソースで公開 － Publickey 具体的には、ソフトウェア名やライセンス、作成者、バージョン、個々のファイルのハッシュ値などの情報を、SBOMのフォーマットとしての標準の1つである「SPDX」（Software Package Data Exchange）形式で出力してくれます。\nまた、ビルドの対象となるソフトウェアにSBOMが用意されている場合、新たに生成されるSBOMにはそのSBOMの情報をきちんととりまとめて生成することが可能。\nマイクロソフト、ビルド時にソフトウェアの部品表（SBOM）を自動生成する「SBOM Tool」、オープンソースで公開より まぁ，メインの文章でも紹介したように「SBOM をどう使うか」が重要なんだけどね。\nブックマーク SSVC（Stakeholder-Specific Vulnerability Categorization）を活用した脆弱性管理 | PwC Japanグループ\nGo はどのようにしてサプライチェーン攻撃を低減しているか\n「ブログはやはり『死に続けている』」\n参考図書 セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\nSSVC (Stakeholder-Specific Vulnerability Categorization) については “Prioritizing Vulnerability Response: A Stakeholder-Specific Vulnerability Categorization (Version 2.0) ” あたりを参照のこと。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "悪意のコードを含む多数の分岐リポジトリが見つかった話",
      "section": "remark",
      "description": "今回の件は spam の一種とみなすこともできる",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/08/malicious-code-in-many-forked-repositories/",
      "published": "2022-08-03T23:12:52+00:00",
      "update": "2022-08-04T10:37:19+00:00",
      "content": "2022-08-03 頃の Twitter TL でちょっとした騒ぎを見かけたのだが，詳細記事が出たらしい。\n35,000 code repos not hacked—but clones flood GitHub to serve malware 最初は各リポジトリに悪意のコードがねじ込まれたのか？ とリポジトリ・アクセスの認証周りを疑ったが，実はそうではなく\nRather, the thousands of backdoored projects are copies (forks or clones) of legitimate projects purportedly made by threat actors to push malware. via 35,000 code repos not hacked—but clones flood GitHub to serve malware ということらしい。 GitHub の公式 tweet にも\nGitHub is investigating the Tweet published Wed, Aug. 3, 2022:\n* No repositories were compromised\n* Malicious code was posted to cloned repositories, not the repositories themselves\n* The clones were quarantined and there was no evident compromise of GitHub or maintainer accounts\n\u0026mdash; GitHub Security (@GitHubSecurity) August 3, 2022 とあり，ひと安心といったところ。\n知らない人のために一応解説しておくと GitHub には pull request という仕組みがあり，他者のリポジトリにコードを貢献したい場合に自身のリポジトリに分岐（fork）させた上でコードを変更・追加し，そのコードを対象のリポジトリにマージするよう提案を行うことができる。 提案を受けた側は，そのコードのレビューを行った上で明示的な操作でコードを受け入れることができる。 もちろんダメなら拒否もできる。\nPull request は GitHub アカウントを持つユーザなら誰でも可能であり，その過程で悪意のコードを忍ばせることは形式上は可能である。 まぁ，普通は「そういう PR はレビューで拒否しましょうね」となるだろうし，一度そんなコードを送りつけた相手を二度と信用することはないだろう。 なので今回の件は spam の一種とみなすこともできる。 実際，アホみたいな数だしね。\n気をつける点があるとすれば「悪意の PR」を送りつけるために作った分岐リポジトリのコードをうっかり取り込んでしまう場合だろう。 最初に紹介した記事では\nAs a best practice, remember to consume software from the official project repos and watch out for potential typosquats or repository forks/clones that may appear identical to the original project but hide malware. via 35,000 code repos not hacked—but clones flood GitHub to serve malware と述べている。 言われんでも（笑）\nそれに続けて\nOpen source code commits signed with GPG keys of authentic project authors are one way of verifying the authenticity of code. via 35,000 code repos not hacked—but clones flood GitHub to serve malware と書かれているが，ぶっちゃけプロジェクトの外側にいる人から見てコミットに OpenPGP 署名があることは大した保証にはならない。 この辺は以前書いた拙文を参考にしてほしい。\nじゃあ git commit で OpenPGP 署名を付与することにどんな意義があるかというと，それはチーム運営で威力を発揮する。 つまり公開鍵や電子署名で「ユーザーの身元を保証」するのではなく「身元の保証されたユーザ」同士で鍵と電子署名を運用するのである。 これでチーム以外からのなりすまし commit を検知（防止ではない）しやすくなる。 OpenPGP の電子署名は「ユーザーの身元を保証し」ないより オープンソース・プロジェクトであれば pull request を受け付けるメンテナの技量と判断が試されるところだろう。\n参考図書 セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n信頼と裏切りの社会 ブルース・シュナイアー (著), 山形 浩生 (翻訳) NTT出版 2013-12-24 単行本（ソフトカバー） 4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 社会における「信頼」とは。\nreviewed by Spiegel on 2015-11-28 (powered by PA-APIv5)\n"
    },
    {
      "title": "Go 1.19 で os/exec パッケージの挙動が変わった話",
      "section": "golang",
      "description": "Windows 環境でコマンドを起動する際の脆弱性の回避",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/exec-package-in-go119/",
      "published": "2022-08-03T12:28:36+00:00",
      "update": "2022-08-04T22:02:12+00:00",
      "content": "Go 1.19 のリリースノートを眺めてみると\nCommand and LookPath no longer allow results from a PATH search to be found relative to the current directory. This removes a common source of security problems but may also break existing programs that depend on using, say, exec.Command(\u0026quot;prog\u0026quot;) to run a binary named prog (or, on Windows, prog.exe) in the current directory. See the os/exec package documentation for information about how best to update such programs. via Go 1.19 Release Notes - The Go Programming Language とある。 さっそく試してみよう。\nまず Windows 環境で gpgpdump.exe コマンドを PATH で指定されたフォルダ以外，具体的には以下のソースファイルと同じフォルダに置く。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os/exec\u0026#34; ) func main() { cmd := \u0026#34;gpgpdump.exe\u0026#34; out, err := exec.Command(cmd, \u0026#34;version\u0026#34;).CombinedOutput() if err != nil { fmt.Println(err) return } fmt.Printf(\u0026#34;output by %v:\\n%v\\n\u0026#34;, cmd, string(out)) } これを Go 1.19 コンパイル環境下で実行すると\n\u0026gt; go run sample.go exec: \u0026#34;gpgpdump.exe\u0026#34;: cannot run executable found relative to current directory 「カレントディレクトリに指定の実行ファイルあるけど起動しちゃらん（←超意訳，出雲弁）」とエラーになった。\nWindows ではパス指定なしでコマンドを起動する際に，カレントフォルダに同名の実行ファイルが存在すると優先的にそれを起動してしまう。 Go 標準の os/exec パッケージもこの挙動に合わせていたのだが，2020年の CVE-2020-27955 で問題になった。 この挙動を悪用して悪意のコマンドを実行される可能性があるというわけだ。\nこの脆弱性を回避するために，様々な試行錯誤が行われたが Go 1.19 の改修が決定打になるだろう。 カレントフォルダにある同名の実行ファイルを無視するのではなく，エラーとして「起動させない」というのがポイント。\nなお，今まで通りパスなしのコマンド指定時にカレントフォルダの実行ファイルを起動したいなら exec.ErrDot エラーを明示的に潰すことで実現できる。 こんな感じ。\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os/exec\u0026#34; ) func main() { cmd := exec.Command(\u0026#34;gpgpdump.exe\u0026#34;, \u0026#34;version\u0026#34;) if cmd.Err != nil { fmt.Println(cmd.Err) if !errors.Is(cmd.Err, exec.ErrDot) { return } cmd.Err = nil } out, err := cmd.CombinedOutput() if err != nil { fmt.Println(err) return } fmt.Printf(\u0026#34;output by %v:\\n%v\\n\u0026#34;, cmd, string(out)) } これを実行すると\n\u0026gt; go run sample2.go exec: \u0026#34;gpgpdump.exe\u0026#34;: cannot run executable found relative to current directory output by .\\gpgpdump.exe version: gpgpdump v0.14.0 repository: https://github.com/goark/gpgpdump となる。 エラーを無視してカレントディレクトリ . を付加した状態で実行されているのがお分かりだろうか。\nちなみに，同じコードを Windows 以外の環境で実行すると（.exe の拡張子は外してね）\n$ go run sample2b.go exec: \u0026#34;gpgpdump\u0026#34;: executable file not found in $PATH と PATH 上に実行ファイルが見つからない旨の普通のエラーが表示される。 これでアプリケーション側は OS ごとに処理を分ける必要がなくなったわけだ。 めでたい！\nところで Windows には NoDefaultCurrentDirectoryInExePath なる環境変数があるそうで，これが有効になっているとパスなしのコマンド指定時にカレントフォルダの同名実行ファイルを無視するらしい。\nで os/exec パッケージは律儀にこの環境変数にも対応している。\nOn Windows, Command and LookPath now respect the NoDefaultCurrentDirectoryInExePath environment variable, making it possible to disable the default implicit search of “.” in PATH lookups on Windows systems. via Go 1.19 Release Notes - The Go Programming Language 標準パッケージのソースコード os/exec/lp_windows.go を眺めると\n// LookPath searches for an executable named file in the // directories named by the PATH environment variable. // LookPath also uses PATHEXT environment variable to match // a suitable candidate. // If file contains a slash, it is tried directly and the PATH is not consulted. // Otherwise, on success, the result is an absolute path. // // In older versions of Go, LookPath could return a path relative to the current directory. // As of Go 1.19, LookPath will instead return that path along with an error satisfying // errors.Is(err, ErrDot). See the package documentation for more details. func LookPath(file string) (string, error) { var exts []string x := os.Getenv(`PATHEXT`) if x != \u0026#34;\u0026#34; { for _, e := range strings.Split(strings.ToLower(x), `;`) { if e == \u0026#34;\u0026#34; { continue } if e[0] != \u0026#39;.\u0026#39; { e = \u0026#34;.\u0026#34; + e } exts = append(exts, e) } } else { exts = []string{\u0026#34;.com\u0026#34;, \u0026#34;.exe\u0026#34;, \u0026#34;.bat\u0026#34;, \u0026#34;.cmd\u0026#34;} } if strings.ContainsAny(file, `:\\/`) { f, err := findExecutable(file, exts) if err == nil { return f, nil } return \u0026#34;\u0026#34;, \u0026amp;Error{file, err} } // On Windows, creating the NoDefaultCurrentDirectoryInExePath // environment variable (with any value or no value!) signals that // path lookups should skip the current directory. // In theory we are supposed to call NeedCurrentDirectoryForExePathW // \u0026#34;as the registry location of this environment variable can change\u0026#34; // but that seems exceedingly unlikely: it would break all users who // have configured their environment this way! // https://docs.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-needcurrentdirectoryforexepathw // See also go.dev/issue/43947. var ( dotf string dotErr error ) if _, found := syscall.Getenv(\u0026#34;NoDefaultCurrentDirectoryInExePath\u0026#34;); !found { if f, err := findExecutable(filepath.Join(\u0026#34;.\u0026#34;, file), exts); err == nil { if godebug.Get(\u0026#34;execerrdot\u0026#34;) == \u0026#34;0\u0026#34; { return f, nil } dotf, dotErr = f, \u0026amp;Error{file, ErrDot} } } path := os.Getenv(\u0026#34;path\u0026#34;) for _, dir := range filepath.SplitList(path) { if f, err := findExecutable(filepath.Join(dir, file), exts); err == nil { if dotErr != nil { // https://go.dev/issue/53536: if we resolved a relative path implicitly, // and it is the same executable that would be resolved from the explicit %PATH%, // prefer the explicit name for the executable (and, likely, no error) instead // of the equivalent implicit name with ErrDot. // // Otherwise, return the ErrDot for the implicit path as soon as we find // out that the explicit one doesn\u0026#39;t match. dotfi, dotfiErr := os.Lstat(dotf) fi, fiErr := os.Lstat(f) if dotfiErr != nil || fiErr != nil || !os.SameFile(dotfi, fi) { return dotf, dotErr } } if !filepath.IsAbs(f) \u0026amp;\u0026amp; godebug.Get(\u0026#34;execerrdot\u0026#34;) != \u0026#34;0\u0026#34; { return f, \u0026amp;Error{file, ErrDot} } return f, nil } } if dotErr != nil { return dotf, dotErr } return \u0026#34;\u0026#34;, \u0026amp;Error{file, ErrNotFound} } と NoDefaultCurrentDirectoryInExePath 環境変数がない場合だけカレントフォルダ . を付加してチェックしているのが分かる。 ご苦労さんなことである。\n少々姑息ではあるが，これを利用してカレントフォルダの同名実行ファイルを無視するよう構成することもできる。 こんな感じ。\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; ) func main() { os.Setenv(\u0026#34;NoDefaultCurrentDirectoryInExePath\u0026#34;, \u0026#34;1\u0026#34;) cmd := exec.Command(\u0026#34;gpgpdump.exe\u0026#34;, \u0026#34;version\u0026#34;) if cmd.Err != nil { fmt.Println(cmd.Err) if !errors.Is(cmd.Err, exec.ErrDot) { return } cmd.Err = nil } out, err := cmd.CombinedOutput() if err != nil { fmt.Println(err) return } fmt.Printf(\u0026#34;output by %v:\\n%v\\n\u0026#34;, cmd, string(out)) } これを実行すると\n\u0026gt; go run sample3.go exec: \u0026#34;gpgpdump.exe\u0026#34;: executable file not found in %PATH% となる。 前のコードの実行結果で出力されるエラーメッセージの違いを確かめてほしい。 Windows 以外でこの環境変数が悪さをすることはないだろうから Linux 等と挙動を合わせたいなら，おまじない的にセットしておくのもいいかもしれない。\nやっぱ Windows は面倒くさいな（笑）\nブックマーク Go でサブプロセスを起動する際は LookPath に気をつけろ！ github.com/cli/safeexec パッケージを使った外部コマンドの安全な起動 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n"
    },
    {
      "title": "Go 1.19 がリリースされた",
      "section": "release",
      "description": "お盆過ぎに出ればいいかと油断してた（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/08/go-1_19-is-released/",
      "published": "2022-08-02T23:11:29+00:00",
      "update": "2022-08-11T04:06:27+00:00",
      "content": "続いて Go 1.19 リリースの話。 いや，マジで「お盆過ぎに出ればいいか」と完全に油断してたよ（笑）\nGo 1.19 is released Go 1.19 is released! - The Go Programming Language Go 1.19 Release Notes - The Go Programming Language ここ半年ほど Go から離れ気味だったので 1.19 については全く情報収集してなかった。 なので，後日追記することになるだろう。 とりあえずリリパには間に合ってよかったね。\nGo 1.19 リリースパーティ - connpass 例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.19.linux-amd64.tar.gz）を取ってきてインストールすることを強く推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.19.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.19.linux-amd64.tar.gz $ sudo mv go go1.19 $ sudo ln -s go1.19 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.19 linux/amd64 Windows は Scoop 経由で OK\nアップデートは計画的に。\nブックマーク The Go Memory Model - The Go Programming Language\nGo 1.19リリース連載始まります GoDoc/ツール周りのアップデート | フューチャー技術ブログ\nGo1.19 encoding/csv のアップデート | フューチャー技術ブログ Go1.19で追加されたAppend系メソッド | フューチャー技術ブログ Go1.19 net/http のアップデート | フューチャー技術ブログ Go 1.19 Genericsのアップデート | フューチャー技術ブログ Go 1.19のメモリ周りの更新 | フューチャー技術ブログ Go 1.19 で os/exec パッケージの挙動が変わった話\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nエキスパートたちのGo言語　一流のコードから応用力を学ぶ Software Design plus 上田 拓也 (著), 青木 太郎 (著), 石山 将来 (著), 伊藤 雄貴 (著), 生沼 一公 (著), 鎌田 健史 (著), 上川 慶 (著), 狩野 達也 (著), 五嶋 壮晃 (著), 杉田 寿憲 (著), 田村 弘 (著), 十枝内 直樹 (著), 主森 理 (著), 福岡 秀一郎 (著), 三木 英斗 (著), 森 健太 (著), 森國 泰平 (著), 森本 望 (著), 山下 慶将 (著), 渡辺 雄也 (著) 技術評論社 2021-12-27 (Release 2021-12-27) Kindle版 B09P4PH63R (ASIN) 版元のデジタル版を購入。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 版元のデジタル版を購入。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\n詳解Go言語Webアプリケーション開発 清水陽一郎 (著) シーアンドアール研究所 2022-07-22 (Release 2022-07-22) Kindle版 B0B62K55SL (ASIN) 本の森.jp で PDF 版が買える。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-27 (powered by PA-APIv5)\nGo言語による分散サービス ―信頼性、拡張性、保守性の高いシステムの構築 Travis Jeffery (著), 柴田 芳樹 (翻訳) オライリージャパン 2022-08-03 単行本（ソフトカバー） 4873119979 (ASIN), 9784873119977 (EAN), 4873119979 (ISBN) 版元でデジタル版購入予定。読書会の課題図書。\nreviewed by Spiegel on 2022-07-27 (powered by PA-APIv5)\nデベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n"
    },
    {
      "title": "Go 1.18.5 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は1件の脆弱性修正を含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/08/go-1_18_5-is-released/",
      "published": "2022-08-02T22:57:41+00:00",
      "update": "2022-08-02T22:57:46+00:00",
      "content": "まだ先だろうと高をくくって更新をサボってたら Go 1.19 が出てるよ。 というわけで，まずは 1.18 系のセキュリティ・アップデートの記事からやっつける。\n[security] Go 1.18.5 and Go 1.17.13 are released 今回は1件の脆弱性修正を含んでいる。\ngo1.18.5 (released 2022-08-01) includes security fixes to the encoding/gob and math/big packages, as well as bug fixes to the compiler, the go command, the runtime, and the testing package. See the Go 1.18.5 milestone on our issue tracker for details. via Release History - The Go Programming Language CVE-2022-32189 encoding/gob \u0026amp; math/big: decoding big.Float and big.Rat can panic Decoding big.Float and big.Rat types can panic if the encoded message is too short. via Go 1.18.5 and Go 1.17.13 are released （以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.18.5.linux-amd64.tar.gz）を取ってきてインストールすることを強く推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.18.5.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.18.5.linux-amd64.tar.gz $ sudo mv go go1.18.5 $ sudo ln -s go1.18.5 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.18.5 linux/amd64 Windows は Scoop 経由で OK\nアップデートは計画的に。\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n"
    },
    {
      "title": "クラウドストレージのアカウント情報がクラウドストレージにある罠",
      "section": "remark",
      "description": "真夏のホラー",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/midsummer-horror/",
      "published": "2022-07-29T11:41:52+00:00",
      "update": "2022-08-08T10:41:06+00:00",
      "content": "久しぶりにぞんぞがさばる（出雲弁）記事を見た。\nある「パソコンの大先生」の死 – WirelessWire News 今回のお題 今回の条件は割とありがちではないだろうか。\nWindows パソコン1台のみ パスワード管理ツールあり ただし Windows 専用プロプライエタリ・ツール パスワード情報はクラウド・ストレージにバックアップあり ローカル NAS はなし この唯一のパソコンが故障して復旧不能となった場合にどうなるかという話。\nしかし、そのフリーウェアはWindows用のプロプライエタリソフトウエアのため、ワタシのスマホではデータを閲覧できません。それに気付いたのは、スマホで新しいPCを購入する手続きを進め、最後にクレジットカードの会員向けサービスのパスワードを聞かれ、途方に暮れたときです。これでは新しいPCが調達できないじゃないか！ ある「パソコンの大先生」の死より ぞんぞがさばる！\nNAS とクラウドストレージ 最近は「クラウドストレージがあるならローカルの NAS とかいらなくね？」という向きも多いようだ。\nでもクラウドストレージにアクセスするためにはアカウント情報が必要で，更に多要素認証を使うのであればその分だけ認証手段を確保しておく必要がある。 それをどこに保持しておくか。\n個人的にはローカルに NAS を置いておくのはまだ意味があると思う。 もっと言えばローカル NAS とクラウドストレージを連携できるならなおよし。\n秋 NAS は俺に喰わせろ！ 私もクラウドストレージは機密保持の観点からはあまり信用してない。 個人向けのクラウドストレージ・サービスの多くは他者と情報共有しやすいよう設計されているため「うっかり漏洩」してしまう可能性も排除できない。 法人向けならユーザごとに細かく権限を設定できるので逆に安心なんだけどね。\nそういう意味じゃ信用してないのはクラウドサービスではなくて自分自身か（笑）\nまぁ，クラウドストレージは「バックアップ用」と割り切って sensitive な情報については置かないようにするか暗号化するのがいいんだろうね。\nマルチプラットフォームは重要 今回のもうひとつのポイントはパスワード管理ツールが Windows 専用だったことだろう。 プロプライエタリなツールであることは今回のケースでは問題ではない。\n最近はセキュリティ企業も独自のパスワード管理ツールを出しているが，これがもし特定 OS 専用なら考え直したほうがいいかもしれない（実際のところは知らない）。\n私は昔から KeePass 派なのだが，最近は派生ツールである KeePassXC および Android 版の Keepass2Android を愛用している。\nKeePassXC Password Manager GitHub - keepassxreboot/keepassxc: KeePassXC is a cross-platform community-driven port of the Windows application “Keepass Password Safe”. Keepass2Android Password Safe - Apps on Google Play パスワードを紙に書くのは案外悪くない （特に同居人が居る場合は）管理に気を使う必要はあるが，パスワード情報を紙に書き出すというのは案外悪くないと思っている。 もちろん全て書き出す必要はなくて，いざというときに最低限必要な情報のみに厳選する。\n私の自宅環境はパソコン（Linux 機），NAS，スマホの3機構成でこれらが同時に使えなくなる事態は真面目に考えてなかったのだが，今回の記事を読んで，考えを改めた。\n起こる可能性のあることは，いつか実際に起こる（If it can happen, it will happen） マーフィーの法則より 作業記録は大事 上述のようにパスワードを紙に書き出すとしても，どのアカウント情報を書き出すべきかはよくよく検討しないといけない。 その一環としてスマホやパソコンのセットアップ時の作業記録を録っておくことをおすすめする。\n以下はスマホの機種変更した際の作業記録の概要。\nついカッとなって機種変した，反省はしない それを見れば必要な情報が分かるはず。 Android 機のセットアップには Google アカウントが絶対に必要とか。\n今回の記事を書かれた yomoyomo さんにはご愁傷さまとしか言いようがないが，私としてはこれを好機として自宅環境を見直すとしようか。\nブックマーク 恥さらし文章「ある「パソコンの大先生」の死」に寄せられたありがたいコメントの数々 - YAMDAS現更新履歴 : ブログの退潮\u0026hellip; 参考 Synology NASキット 2ベイ DS220j クアッドコアCPU 512MBメモリ搭載 ライトユーザー向け 国内正規代理店品 電話サポート対応品 DiskStation Synology (Release 2020-03-12) Personal Computers B0855LMP81 (ASIN), 4537694279369 (EAN), 0846504003440 (EAN), 846504003440 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ドスパラで HDD 2基と3点セットで購入。家庭内 LAN で使うなら必要十分な性能。各種クラウド・ストレージ・サービスと連携可能。 Tailscale を含む各種 VPN と組み合わせることも可能。\nreviewed by Spiegel on 2021-10-26 (powered by PA-APIv5)\nWestern Digital ウエスタンデジタル 内蔵 HDD WD Red Plus NAS RAID (CMR) 3.5インチ WD40EFZX-EC 【国内正規代理店品】 ウエスタンデジタル(Western Digital) (Release 2021-02-05) Personal Computers B08V8LNR2H (ASIN), 4988755057738 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Synology DS220j と併せて購入。\nreviewed by Spiegel on 2021-10-26 (powered by PA-APIv5)\n"
    }
  ]
}
