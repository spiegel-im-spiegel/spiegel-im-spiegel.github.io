{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Git GUI フロントエンドをたずねて三千里",
      "section": "remark",
      "description": "ブランチやタグや履歴を見ながらちょっと込み入った処理をする際はやはり GUI があるといいよねってことで。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/searching-for-git-gui-front-end/",
      "published": "2019-04-21T05:37:37+00:00",
      "update": "2019-04-21T06:05:36+00:00",
      "content": " 私は Git の GUI フロントエンドに Git Extensions を使っている。 個人的には FOSS の GUI フロントエンドではこれ以上のものはないと思っているが，残念なことに .NET Framework 上で動く製品なのである。 Windows プラットフォームではこれで何の問題もなかったが，どうにも（.NET Framework の別実装である） Mono と相性が悪いようで，メジャーバージョンは上げられないしチョットしたことで落っこちてしまう。\nというわけで Linux/Ubuntu で動作する GUI フロントエンドを探してみることした。 今回の評価ポイントは以下の通り。\n コミット履歴をブランチ込みでツリー表示でき，簡単に操作できること コミットやタグに対して電子署名を付与でき，かつ署名の検証ができること GnuPG や OpenSSH を適切に扱えること サブモジュールを簡単に扱えること できれば FOSS 製品であること  VS Code や ATOM など最近はテキストエディタや IDE でグラフィカルに git を扱える製品も多く commit, push, fetch, pull といった基本機能を扱うだけなら GUI フロントエンドを別途用意する必要はないのだが，ブランチやタグや履歴を見ながらちょっと込み入った処理をする際はやはり GUI があるといいよねってことで。\nGUI フロントエンドいろいろ Git-gui Git の公式フロントエンドらしい。 APT でインストールできる。\nLook\u0026amp;Feel は微妙だが機能的には悪くない。 ただ，タグへの署名と署名検証ができないっぽいんだよなぁ。\nGiggle APT でインストールできる。\nGNOME 用ということで Look\u0026amp;Feel は悪くないが，あまり複雑なことはできないようだ。 残念。\nGitg APT でインストールできる。\nこれも GNOME 用の製品だが，やっぱり複雑なことはできない感じ。 GNOME 用の製品ってみんなこんな感じなのか？\nGitHub Desktop あまり複雑なことはできなくて残念という意味では GitHub Desktop もそうか。 元々は Windows および macOS 用だが Linux 向けの fork を公開している方がいるようだ。\n shiftkey/desktop: Simple collaboration from your desktop  GitHub Desktop は GitHub 上の Issue や pull request が使いやすくなるよう設計されている。 なので git 機能自体のサポートについてはイマイチな感じである。 「初心者向け」と言われるのも宜なるかなというところであろうか。\nGitHub Desktop の今後には期待している。\nGitEye FOSS ではないが「無料」で利用できる。 動作には別途 Java ランタイム（JRE）を用意する必要がある1。\nEclipse を連想させるプロジェクトベースの構成。 でも，これならいっそ Eclipse もしくは IntelliJ IDEA を使ったほうがいいんじゃないのか。\nGitKraken プロプライエタリ・ライセンスで非商用のみ「無料」で利用できる。 Pro 版であれば4.08USD/月のサブスクリプション制で利用できる。\nGit の GUI フロントエンドといえば大抵これが挙がるくらい有名。 てことは皆これにお金払ってるってことか？\nLook\u0026amp;Feel は好みがあるので言及しないとして，機能自体は悪くないのだが GnuPG の扱いが雑。 なんでパスフレーズを入力させるのに自前の入力窓を使うかな。 独自の Pinentry を使ってるってわけでもないようだし，まさかパスフレーズをメモリ上に保持ってないよね？\nあと，私の環境ではコミットやタグの署名検証ができなかった。 購入すれば見れるのかな？\nSmartGit こちらもプロプライエタリ・ライセンスで非商用のみ「無料」で利用できる。 フルサポートで買うとかなり高い。 サブスクリプションを利用するなら5.99USD/月。\nLook\u0026amp;Feel や機能は申し分ないのだが，一点だけ OpenSSH の扱いが駄目すぎる。 あと署名検証ができないぽい？\nSmartGit では内臓の SSH クライアントを使うか OpenSSH を使うか選択できる。 内臓の SSH クライアントを使う場合は自前で秘密鍵を管理しようとするが，どういうロジックで管理しているか不明。 OpenSSH を使う場合は更に駄目で，勝手に ssh-agent を起動してくれやがるのだ（無効にするオプションが見当たらない）。 ちゃんと SSH_AUTH_SOCK 環境変数でソケットを指定してるだろ。 見ろよ！\n私は SSH 鍵の管理を GnuPG で行ってる。 SmartGit は OpenSSH をまともに扱えないという理由で却下2。 残念！\nというわけで どれもイマイチな出来。 それなら曲がりなりにも機能が揃っていて FOSS な Git Extensions のほうがマシだな。 Linux ってホンマに GUI が弱いよな。 文化的なものかも知れないが。\nというわけで，もうしばらくは Git Extensions を騙し騙し使うか。\n【おまけ】 CUI な Tig GUI ではないがキャラクタベースの tig というのがあるらしい。 あちこちページを眺めていると，これを推す記事が結構多い。\nサーバ等のリモートホストに対してキャラクタ端末でリポジトリにアクセスする場合は便利かもしれない。\nブックマーク  Git - GUI Clients Interfaces, frontends, and tools - Git SCM Wiki Linuxで使えるGitクライアントを集めてみた Ubuntu/Linuxで使えるGitのGUIクライアント(無料)まとめ - Qiita\n Git Commit で OpenPGP 署名を行う\n   JRE のインストールについては「Ubuntu で遊ぶ」の OpenJDK インストールの項を参照のこと。 [return] そもそも git で署名を行うということは GnuPG とセットで使うということなんだから ssh-agent なんか使う選択肢はないと思うのだが。鍵管理は GnuPG に任せて git や OpenSSH は本来の機能に集中するのが吉である。 [return]   "
    },
    {
      "title": "2019-04-21 のブックマーク",
      "section": "bookmarks",
      "description": "「Oracle、「Java SE 12.0.1」「Java SE 8 Update 211」を公開 ～新元号“令和”に対応」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/04/21-bookmarks/",
      "published": "2019-04-21T00:57:35+00:00",
      "update": "2019-04-21T01:08:33+00:00",
      "content": " リリース情報  Oracle、「Java SE 12.0.1」「Java SE 8 Update 211」を公開 ～新元号“令和”に対応 - 窓の杜 新元号“令和”をサポートした「Ruby 2.6.3」がリリース - 窓の杜 The Document Foundation releases LibreOffice 6.2.3 - The Document Foundation Blog  セキュリティ＆プライバシー関連  マンガワンのチート事案についてまとめてみた - piyolog VU#192371 - VPN applications insecurely store session cookies  米国土安全保障省が企業用VPNアプリケーションのセキュリティの欠陥を警告 | TechCrunch Japan  FBI関連ウェブサイトがハッキングされ警察や連邦機関に属する数千人分の個人情報が流出 - GIGAZINE ブログ: スマートフォンアプリは、あなたが知らないトラッカーでいっぱいです MIT Tech Review: アマゾンがAIスピーカーの音声に「聞き耳」、社内に専任チーム  Alexaの音声を聞いてテキスト化するスタッフ、日本のAmazonも募集中　在宅勤務、時給1300円 - ITmedia NEWS  Internet Explorer 11の脆弱性でWindows PCからローカルファイルを盗まれる可能性 - Engadget 日本版 China Spying on Undersea Internet Cables - Schneier on Security Dragonblood: Analysing WPA3's Dragonfly Handshake  Vulnerabilities in the WPA3 Wi-Fi Security Protocol - Schneier on Security 「WPA3」に脆弱性、最新のWi-Fiセキュリティプロトコルにもパスワード盗難の恐れあり：実行のハードルが低い - ＠IT  A Guide to Common Types of Two-Factor Authentication on the Web | Electronic Frontier Foundation USN-3949-1: OpenJDK 11 vulnerability | Ubuntu security notices パスワードを盗みYouTubeのクリック数を稼ぐ新しいマルウェア | TechCrunch Japan Confluence Server および Confluence Data Center における複数の脆弱性に関する注意喚起 2019年 4月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起  Oracle Java の脆弱性対策について(CVE-2019-2699等)：IPA 独立行政法人 情報処理推進機構  WordPressプラグインを狙う攻撃が活発化している件をまとめてみた - piyolog Cyberspies Hijacked the Internet Domains of Entire Countries | WIRED  New DNS Hijacking Attacks - Schneier on Security  「ITサプライチェーンにおける情報セキュリティの責任範囲に関する調査」報告書について：IPA 独立行政法人 情報処理推進機構  天文関連  半分以上が宇宙へ。流星の衝突によって月面の「水」が散逸していることをNASAの探査機がキャッチ | sorae：宇宙へのポータルサイト サイエンス誌に論文が掲載されました | トピックス | JAXA はやぶさ２プロジェクト  知財関連  米国政府と権利者団体、海賊版・ネット犯罪対策のためにWHOIS情報へのアクセス再開を要望 – P2Pとかその辺のお話R ツイートの不当なDMCA削除を批判する記事に言及するツイートが不当にDMCA削除される – P2Pとかその辺のお話R ブラックホール画像の販売も--中国で問題視される素材販売サイトの実態 - ZDNet Japan 鬼才ヴェルナー・ヘルツォーク監督「海賊版は（好ましくないが）最も成功した配給形態」 – P2Pとかその辺のお話R The Mueller Report Can’t Be Copyrighted, Is Flagged by Copyright Bots Anyway | Electronic Frontier Foundation  その他  Markdownをpandocでwordへ変換するためのテンプレート作成 - Qiita Starz Goes on Twitter Meta-Censorship Spree to Cover Up TV-Show Leaks (Updated) - TorrentFreak MIT Tech Review: パンチカードで人類初の月面着陸を支えた、最後の数学者の物語 ブロックチェーンは「過度な期待」のピーク期から幻滅期へ--ガートナー調査 - ZDNet Japan EU、新たな著作権指令を正式承認--ネット企業の責任が拡大へ - ZDNet Japan 「2040年も8割弱は化石燃料」「再生エネの限界」大前提のエネルギー政策を！：岩瀬昇 | エネルギーの部屋 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト GNU AWK 5.0がリリース。8年ぶりのメジャーバージョンアップ。正規表現ライブラリがGLIBCからGNULIBへ移行、名前空間が実装 － Publickey インテル、5Gスマホ向けモデム事業から撤退へ - CNET Japan MIT Tech Review: 医療用AI普及へブレークスルー「協調機械学習」は何が画期的か？ 大手トレントサイトDemonoid、失踪していた創設者の死を伝える – P2Pとかその辺のお話R MIT Tech Review: 揺らぐ死の定義、「死んだブタ」の脳の一部機能が回復 Big Sky :: 1つの横着から隠しファイルが生まれた瞬間 PythonインタプリタをWebAssemblyへコンパイル、Webブラウザで稼働するPython環境「Pyodide」。Mozillaが開発中 － Publickey マイクロソフト、リアルタイムOSベンダーExpress Logic買収 - ZDNet Japan オープンソースとなった「PowerShell」の覚えておきたい基本コマンド10選 - ZDNet Japan  "
    },
    {
      "title": "Ubuntu 19.04 へのアップグレードを試す",
      "section": "remark",
      "description": "こういうアップグレードとかやると，いかに Windows がシステムとして駄目か分かるよな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/upgrade-ubuntu-19_04/",
      "published": "2019-04-20T10:14:30+00:00",
      "update": "2019-04-21T01:08:33+00:00",
      "content": " Ubuntu 19.04 がリリースされたようだ。\nUbuntu 19.04 その15 - Ubuntu 19.04がリリースされました・ディスクイメージのダウンロード - kledgeb\n私が検証中の仮想環境1 でもソフトウェアの更新2 後に以下のメッセージが出た。\n 折角なのでアップグレードを試してみるとするか（仕事用のマシンじゃないので LTS バージョンを使う気は更々ない）。\nUbuntu のアップグレード 「アップグレード」ボタンを押すとリリースノートが表示される。\n 文章中の空白文字が詰められていて「なんじゃこりゃ」な画面だが（何かの署名かと思ったぜw），気にせず「アップグレード」ボタンを押す。\n これでしばらく経過を眺めていると以下のワーニングが出る。\n どうも Ubuntu Japanese Team や他のサードパーティのリポジトリは外されてしまうらしい。 まぁ，これはしょうがない。 あとで繋げばいいし。\n処理を続けると確認画面が表示されるので追加・変更・削除されるソフトウェアを確認しておく。 どうやら GnuPG, OpenSSL, OpenSSH といったセキュリティ関連のツールもアップグレードされるようだ。\n  確認して問題ないようなら「アップグレードを開始」ボタンを押して処理を続行する。 アップグレードは時間がかかるのでお茶でも淹れてこよう。\n途中でワーニングが出たりもしたが3\n 気にせず最後まで終わらせる。 終わったら（再起動しろとは言われなかったが）一応再起動しておく。\n再起動後，気になっていたセキュリティ・ツールのバージョンをチェックしてみた。\n$ gpg --version gpg (GnuPG) 2.2.12 libgcrypt 1.8.4 Copyright (C) 2018 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 $ openssl version OpenSSL 1.1.1b 26 Feb 2019 $ ssh -V OpenSSH_7.9p1 Ubuntu-10, OpenSSL 1.1.1b 26 Feb 2019 おおっ。 GnuPG はまだちょっと古いが OpenSSL と OpenSSH は最新になっている。 まぁこのくらいなら許容範囲だろう4。\nサードパーティのリポジトリを再び有効にする アップグレード時に外されたサードパーティのリポジトリをチェックしておく。 「ソフトウェアとアップデート」を開いて「他のソフトウェア」タブを見てみる。\n うん，外れてるね。 Git と Mono のリポジトリは有効にしておく。 Ubuntu Japanese Team のリポジトリも有効にしておけばいいかな。\nこれで apt update と，必要に応じて apt upgrade や apt autoremove を行えば OK。\nしかし，なんだな。 こういうアップグレードとかやると，いかに Windows がシステムとして駄目か分かるよな。 パソコンでもスマホのような携帯端末でも定期的にアップデートされることを前提にハードウェアもソフトウェアも構成しないと駄目だということだよねぇ。\nいまや Office ツールは Microsoft の独占というほどでもないし，大抵のことは Web インタフェースがあるのでブラウザがあればなんとかなる。 と考えるとやはり Windows を捨てる選択は正解だなと改めて思う。 他人に薦められるかと言えば，それは別問題だが（笑）\nブックマーク  Ubuntu 18.10 その172 - Ubuntu 19.04へアップグレードするには・アップグレードの注意事項 - kledgeb\n PPA から Git をインストールする\n Ubuntu に Mono を導入する\n   余談だが VirtualBox でも 6.0.6 がリリースされている。アップデートは計画的に。 [return] Ubuntu では「ソフトウェアの更新」で GUI によるソフトウェアのアップデートが可能である。また「ソフトウェアとアップデート」を使って更新の自動化や LivePatch の設定も可能だ。 [return] あとで確認したが，ちゃんと最新版が入ってるっぽい。 [return] OpenSSL は 1.1.1 系の最新， OpenSSH は 7.9 系の最新になっていた。 Facebook の TL で教えてもらったが， GnuPG はパッケージマネージャでパッケージの完全性検証に使われるため特に保守的な管理になっているらしい。まぁ脆弱性や不具合等は随時バックポートされているそうなので，バージョン番号であまり神経質にならないほうがいいのかも知れない。ただ GnuPG の動向を追いかけている身としては何とか改善したい。でもそれは後々のお楽しみということで。 [return]   "
    },
    {
      "title": "まだ改元で消耗してるの？",
      "section": "remark",
      "description": "もう役所の書類で元号使うのやめようや。今回の改元は絶好の機会だったのに，これを逃したらまた数十年も「令和」に付き合わされるわけだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/troubles-of-the-japanese-new-era/",
      "published": "2019-04-17T04:47:50+00:00",
      "update": "2019-04-17T05:02:45+00:00",
      "content": " 全国の職業エンジニアの皆さん，改元に伴うあれこれでお疲れ様でした。 もうとっくに改修作業は終わって5月の改元をドキワクで待っていることと思います。\nと思ってたらこの期に及んで「テスト」と称して本番環境を弄って案の定トラブらせている自治体があったらしい。 他でもない，我が故郷の松江市だよ（日本の新聞サイトにはリンクしないようにしてるので元記事は省略）。\nなんでも本番環境でテストするのにコンビニに通達するのを忘れていて「令和」の元号で証明書類を出力させちゃったらしい。 松江市は回収しようとしているようだが，そんなレアなエラーを手放すわけないぢゃん（笑）\n金払ってでもコンビニで証明書を出すべきだったか。 いや，よく考えたら私はマイナンバーカードで手続きしてるから，そもそも紙の証明書は不要だった。\nていうか改元まであと2週間というタイミングで何でテストなんかしてるかなぁ。 しかも改元前の日付で「令和」で出てしまうというのはバグなのか仕様なのか。\nもしかして松江市は改元のタイミングでプログラムを入れ替えるつもりなのだろうか。 それって絶対にトラブルの元だよな。\nあー，ツッコミが止まんねー！\nもう役所の書類で元号使うのやめようや。 これから先，改元の度にこんな馬鹿騒ぎをするつもりなのだろうか。 今回の改元は（期間的な余裕もあったし）ドキュメントに記載する年号を和暦から西暦に切り替える絶好の機会だったのに，これを逃したらまた数十年も「令和」に付き合わされるわけだ。\n元号で遊ぶ ところで\n 令和へ対応せよ！元号のアルゴリズム - Qiita  という記事を見かけたのだが，みんなそんな難しいことをしているのだろうか。 つか年月日で桁を揃えて比較するってのは汎用機時代の発想だよな。 そういうのって脈々と受け継がれるものなのかねぇ。\n今どきは大抵の言語で時間クラスないしは時間関数を標準ライブラリで持ってるんだから，それを使えば簡単にできるぢゃん。\nまずは各元号の起点を調べておく。\n   元号 起点     明治の改暦 1873年1月1日   大正 1912年7月30日   昭和 1926年12月25日   平成 1989年1月8日   令和 2019年5月1日    なんで明治は「元年」を起点にしないかというと，明治6年（1873年）より前は暦が異なるため現行暦1 の加減算が使えないからである。\nじゃあ，この情報を元に西暦を和暦に変換する簡単なコードを書いてみよう。 Go 言語でね。\nこんな感じかな。\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;time\u0026#34; ) type EraName int const ( Unknown EraName = iota Meiji Taisho Showa Heisei Reiwa ) var ( eraString = map[EraName]string{ Unknown: \u0026#34;\u0026#34;, Meiji: \u0026#34;明治\u0026#34;, Taisho: \u0026#34;大正\u0026#34;, Showa: \u0026#34;昭和\u0026#34;, Heisei: \u0026#34;平成\u0026#34;, Reiwa: \u0026#34;令和\u0026#34;, } locJST = time.FixedZone(\u0026#34;JST\u0026#34;, 9*60*60) eraTrigger = map[EraName]time.Time{ Meiji: time.Date(1873, time.January, 1, 0, 0, 0, 0, locJST), Taisho: time.Date(1912, time.July, 30, 0, 0, 0, 0, locJST), Showa: time.Date(1926, time.December, 25, 0, 0, 0, 0, locJST), Heisei: time.Date(1989, time.January, 8, 0, 0, 0, 0, locJST), Reiwa: time.Date(2019, time.May, 1, 0, 0, 0, 0, locJST), } eraSorted = []EraName{Reiwa, Heisei, Showa, Taisho, Meiji} ) func (e EraName) String() string { if s, ok := eraString[e]; ok { return s } return \u0026#34;\u0026#34; } type JapaneseEra struct { time.Time } func New(t time.Time) JapaneseEra { return JapaneseEra{t.In(locJST)} } func (e JapaneseEra) Era() EraName { for _, es := range eraSorted { if !e.Before(eraTrigger[es]) { return es } } return Unknown } func (e JapaneseEra) YearEra() (EraName, int) { era := e.Era() if era == Unknown { return Unknown, 0 } year := e.Year() - eraTrigger[era].Year() + 1 if era == Meiji { return era, year + 5 } return era, year } func (e JapaneseEra) YearEraString() (string, error) { era, year := e.YearEra() if era == Unknown { return \u0026#34;\u0026#34;, fmt.Errorf(\u0026#34;out of range: %v\u0026#34;, e) } if year == 1 { return fmt.Sprintf(\u0026#34;%v元年\u0026#34;, era), nil } return fmt.Sprintf(\u0026#34;%v%d年\u0026#34;, era, year), nil } func main() { flag.Parse() argsStr := flag.Args() tm := time.Now() if len(argsStr) \u0026gt; 0 { if len(argsStr) \u0026lt; 3 { fmt.Fprintln(os.Stderr, \u0026#34;年月日を指定してください\u0026#34;) return } args := make([]int, 3) for i := 0; i \u0026lt; 3; i++ { num, err := strconv.Atoi(argsStr[i]) if err != nil { fmt.Fprintln(os.Stderr, err) return } args[i] = num } tm = time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.Local) } ye := New(tm) ys, err := ye.YearEraString() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Printf(\u0026#34;%s%d月%d日\\n\u0026#34;, ys, ye.Month(), ye.Day()) } さっそく動かしてみる。\n$ go run main.go 平成31年4月17日 $ go run main.go 2019 4 30 平成31年4月30日 $ go run main.go 2019 5 1 令和元年5月1日 ほら，簡単でしょ。 余暇のやっつけコードでもこの程度は書けるってことだね。\nやぁ，遊んだ遊んだ。\nブックマーク  1l0/sumeragi : 皇紀や元号を出力するパッケージ 新元号「文字」という技術的負債   ちなみに日本の現行暦は「グレゴリオ暦と同じ」だがグレゴリオ暦ではない。暦の原点が異なるからだ。詳しくは拙文「「暦」日本史」を参考にどうぞ。 [return]   "
    },
    {
      "title": "Ubuntu に ATOM エディタを導入する",
      "section": "remark",
      "description": "この記事は随時更新します。 悪しからずご了承の程を。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/atom-in-ubuntu/",
      "published": "2019-04-15T14:32:39+00:00",
      "update": "2019-04-20T10:04:28+00:00",
      "content": " さて，そろそろ ATOM を Ubuntu に入れようか。\nなお，この記事は随時更新します。 悪しからずご了承の程を。\n前準備 ATOM のリポジトリに各バージョンの atom-amd64.deb ファイルが公開されているので，これを使う。\ndeb ファイルを使ってインストールを行うには gdebi というコマンドを使うらしい。 これは APT で取得可能だ。\n$ sudo apt show gdebi-core Package: gdebi-core Version: 0.9.5.7+nmu2 Priority: optional Section: universe/admin Source: gdebi Origin: Ubuntu Maintainer: Ubuntu Developers \u0026lt;ubuntu-devel-discuss@lists.ubuntu.com\u0026gt; Original-Maintainer: Ubuntu Developers \u0026lt;ubuntu-dev-team@lists.alioth.debian.org\u0026gt; Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 876 kB Depends: python3:any (\u0026gt;= 3.3.2-2~), python3-apt, python3-debian, file Suggests: xz-utils | xz-lzma Task: ubuntu-mate-core, ubuntu-mate-desktop Download-Size: 116 kB APT-Sources: http://jp.archive.ubuntu.com/ubuntu cosmic/universe amd64 Packages Description: simple tool to install deb files gdebi を使うと、ローカルの deb パッケージをその依存関係を解決しながらインス トールできます。apt は同じ動作をしますが、インストールできるのはリモート (http, ftp) にあるパッケージのみです。 . It can also resolve build-depends of local debian/control files. . This package contains the libraries and command-line utility. ふむむ。 なるほど。\nではインストールしてしまおう。\n$ sudo apt install gdebi-core インストールできたら動作確認しておく。\n$ gdebi --version 0.9.5.7+nmu2 よしよし。\nATOM の導入 リリースページ から最新版の atom-amd64.deb ファイルをダウンロードし gdebi コマンドでインストールする。\n$ sudo gdebi atom-amd64.deb Reading package lists... Done Building dependency tree Reading state information... Done Reading state information... Done 以下のパッケージのインストールが必要です: gconf-service gconf-service-backend gconf2 gconf2-common libgconf-2-4 libpython-stdlib libpython2-stdlib python python-minimal python2 python2-minimal python2.7 python2.7-minimal A hackable text editor for the 21st Century. Atom is a free and open source text editor that is modern, approachable, and hackable to the core. ソフトウェアパッケージをインストールしますか? [y/N]:y [...snip...] atom-amd64.deb を展開する準備をしています ... atom (1.36.0) を展開しています... atom (1.36.0) を設定しています ... desktop-file-utils (0.23-3ubuntu3) のトリガを処理しています ... gnome-menus (3.13.3-11ubuntu2) のトリガを処理しています ... mime-support (3.60ubuntu1) のトリガを処理しています ... インストールが完了するとドックのアプリボタンで表示されるアプリ一覧にアイコンが追加される。 もちろんターミナルからも起動できる。 1.36 から単一のファイルのみを指定して起動することが可能になった。\n$ atom ~/work/foo.txt   善き哉。\nATOM 用にフォントを導入する。 個人的にテキストエディタのフォントは Inconsolata，そして日本語は明朝体に限る。 日本語は標準の NOTO フォントを使うとして Inconsolata はネットから取ってこないと。\nUbuntu ではフォントの置き場所は以下の3箇所になるようだ。\n /usr/share/fonts : システムフォント /usr/local/share/fonts : 追加フォントをマシンで共有する場合 ~/.fonts : 個人で導入する場合  これらのディレクトリのいずれかに入れたらキャッシュを更新しておく。\n$ fc-cache -fv ちゃんと導入できたか確認しておこう。\n$ fc-list | grep Inconsolata /home/username/.fonts/Inconsolata.otf: Inconsolata:style=Medium よーし，うむうむ，よーし。\nATOM でフォントを指定する場合には Settings → Editor Settings の Font Family の項目で\nInconsolata, Noto Serif CJK JP  などと指定しておけばよい。 ちなみに NOTO フォントは以下のように配置されている。\n$ fc-list | grep Noto | grep JP /usr/share/fonts/opentype/noto/NotoSansCJK-Bold.ttc: Noto Sans CJK JP,Noto Sans CJK JP Bold:style=Bold,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-Bold.ttc: Noto Serif CJK JP:style=Bold /usr/share/fonts/opentype/noto/NotoSansCJK-Bold.ttc: Noto Sans Mono CJK JP,Noto Sans Mono CJK JP Bold:style=Bold,Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Medium.ttc: Noto Sans CJK JP,Noto Sans CJK JP Medium:style=Medium,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-Black.ttc: Noto Serif CJK JP,Noto Serif CJK JP Black:style=Black,Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc: Noto Sans CJK JP,Noto Sans CJK JP Regular:style=Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-Light.ttc: Noto Serif CJK JP,Noto Serif CJK JP Light:style=Light,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-Regular.ttc: Noto Serif CJK JP:style=Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc: Noto Sans Mono CJK JP,Noto Sans Mono CJK JP Regular:style=Regular /usr/share/fonts/opentype/noto/NotoSansCJK-DemiLight.ttc: Noto Sans CJK JP,Noto Sans CJK JP DemiLight:style=DemiLight,Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Thin.ttc: Noto Sans CJK JP,Noto Sans CJK JP Thin:style=Thin,Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Light.ttc: Noto Sans CJK JP,Noto Sans CJK JP Light:style=Light,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-SemiBold.ttc: Noto Serif CJK JP,Noto Serif CJK JP SemiBold:style=SemiBold,Regular /usr/share/fonts/opentype/noto/NotoSansCJK-Black.ttc: Noto Sans CJK JP,Noto Sans CJK JP Black:style=Black,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-ExtraLight.ttc: Noto Serif CJK JP,Noto Serif CJK JP ExtraLight:style=ExtraLight,Regular /usr/share/fonts/opentype/noto/NotoSerifCJK-Medium.ttc: Noto Serif CJK JP,Noto Serif CJK JP Medium:style=Medium,Regular ブックマーク  Install Atom on Ubuntu 18.04 Bionic Beaver Linux - LinuxConfig.org ubuntu18.04にAtomをインストール – v0.0.1 Ubuntu 18.04 LTSの日本語フォントを変更する！【詳細解説】 | LFI UbuntuTips/Desktop/InstallFont - Ubuntu Japanese Wiki CentOS/Ubuntuでフォントを追加する方法 | 俺的備忘録 〜なんかいろいろ〜 GitHub、フリーのコードエディター「Atom 1.36」を正式公開 - 窓の杜 Items in the Menu Bar are invisible on Ubuntu 18.10 when atom window is focused. · Issue #18535 · atom/atom · GitHub\n ATOM Editor に関するメモ\n  "
    },
    {
      "title": "Ubuntu に Mono を導入する",
      "section": "remark",
      "description": "今回は Mono および Mono で動くアプリケーションを導入する。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/mono-in-ubuntu/",
      "published": "2019-04-14T10:36:23+00:00",
      "update": "2019-04-20T10:04:28+00:00",
      "content": " 今回は Mono および Mono で動くアプリケーションを導入する。\nMono の導入 Mono を導入するにはリポジトリの登録から始める必要がある。 gnupg と ca-certificates は既に入ってるみたいなので公開鍵のインポートとソースリストの追加から。\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF $ echo \u0026#34;deb https://download.mono-project.com/repo/ubuntu stable-bionic main\u0026#34; | sudo tee /etc/apt/sources.list.d/mono-official-stable.list $ sudo apt update 続いて mono-devel を導入する。\n$ sudo apt install mono-devel インストール処理が完了したら念のため動作確認をしておこう。\n$ mono -V Mono JIT compiler version 5.20.1.19 (tarball Thu Apr 11 09:02:17 UTC 2019) Copyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com TLS: __thread SIGSEGV: altstack Notifications: epoll Architecture: amd64 Disabled: none Misc: softdebug Interpreter: yes LLVM: yes(600) Suspend: hybrid GC: sgen (concurrent by default) よーし，うむうむ，よーし。\nKeePass の導入 KeePass は OSS のパスワード管理ツールで，基本的には Windows 用だが各種プラットフォーム用のバージョンが公開されている。 Ubuntu では APT で導入可能である。\n$ sudo apt show keepass2 Package: keepass2 Version: 2.39.1+dfsg-1 Priority: optional Section: universe/utils Origin: Ubuntu ... ちょっとバージョンが古いがプラットフォームが違うし，まぁいいだろう。 インストールしてしまおう。\n$ sudo apt install keepass2 インストールが完了するとドックのアプリボタンで表示されるアプリ一覧にアイコンが追加される。 あとは Windows 版と同じように使える。\nパスワードを覚えるなんて脳みその無駄遣い。 適切な管理ツールでパスワード管理を行いましょう。\nGit Extensions の導入 Git Extensions は .NET Framework 上で動く git 用の GUI フロントエンドだが， Mono 版もあって他プラットフォームでも利用できる。 ただし Mono 版はバージョン 2 系までしか対応していないので注意が必要である。\nダウンロードページから Mono 版の最新バージョンをダウンロードする。\n適当なディレクトリにダウンロードした zip ファイルを unzip コマンドで展開する。 GitExtensions ディレクトリが作成されてファイルが展開されている筈である。\n展開されたファイルの中に gitext.sh があるので，これに実行権限を付与して起動する。 今後のためにパスを通しておいたほうがいいだろう。\n最初に Git Extensions を起動すると言語の選択ウィンドウが表示される。\n 日本語があってよかったね。 あとは Windows 版と同じ。\nけど Windows 版と比べて操作感がイマイチなんだよなぁ。 まぁ Git Extensions をメインに作業するわけではないので，これでもいいか。\n【追記 2019-04-20】 Git Extensions が落ちる Ubuntu を 19.04 にアップグレードしたら Git Extensions が落ちるようになってしまった。 似た事例がないかと探してみたら GitExtensions/Plugins/Bitbucket.dll を削除したら行けるみたいな記述を見かけたので試してみたら上手く行ったっぽい？\n How to install GitExtensions in Ubuntu  やれやれだぜ。\nGit Extensions の代わりになるような GUI フロントエンドを探しているのだがいいのがない。 コミットやタギングで電子署名を付与できて結果を検証できればいいのだが，特にタギングに署名できる製品がない。 GitKraken v5.0 ならいけると思ったのだが設定画面が分かりにくい上にフリー版だと署名の検証ができないっぽい？\n.NET Framework と Mono と .NET Core .NET Framework と Mono と .NET Core の関係がいまひとつ分からなかったのでちょろんと調べてみた。 かなり大雑把な説明なのはご容赦。\n.NET Framework .NET Framework が最初に公開されたのは2001年。 基盤となる CLI (Common Language Infrastructure) や CLR (Common Language Runtime) は標準化され Windows 以外のプラットフォームでも実装可能となるよう設計されたが，実際にはリファレンス実装である .NET Framework は Windows 以外には対応しなかった。 まぁ，当時の Microsoft は FOSS に敵対的だったし，それもやむなしというところだろうか。\nMono と Xamarin 当然ながら，.NET Framework に対抗する OSS 製品を作ろうという動きがあり，そのうちのひとつが Mono Project であった。 Mono はマルチプラットフォームで動作するアプリケーション基盤として実装されているのが特徴である。\nMono を巡っては紆余曲折があったが（生臭い話は省略），最終的に Xamarin が開発母体となった。\nXamarin は Mono Project のオーナー企業であると同時に Mono を基盤とした製品群を指すようだ。 なので今後は Mono/Xamarin と一括りにしてしまおう。\n企業としての Xamarin は後に Microsoft に買収され Mono/Xamarin は Microsoft 傘下である .NET Foundation において今も開発が続けられている。\n.NET Core 一方，実質 Windows でしか動作しない .NET Framework の派生として .NET Core が Microsoft からリリースされた。 .NET Core はマルチプラットフォームで動作する OSS 製品として，こちらも .NET Foundation で開発が行われている。\nここに於いて Microsoft は経営方針の大転換を果たしたわけだ。\n.NET Core と Mono/Xamarin 現在 Microsoft は OSS の .NET シリーズとして .NET Core と Mono/Xamarin の2系統の製品を持っている。 両者の棲み分けは以下のような感じらしい。\n    via ASCII.jp：.NET Core / .NET Framework / Xamarin / Monoの関係を整理する  つまり Linux や macOS，あるいは iOS や Android の GUI アプリケーションとしては Mono/Xamarin，サーバ・サイドあるいはクラウド向けには .NET Core ということのようだ。 さらに将来的には Windows アプリケーション向けの .NET Framework，マルチプラットフォーム向けの .NET Core と Mono/Xamarin の基盤を共通化すると表明されている。\n    via ASCII.jp：.NET Core / .NET Framework / Xamarin / Monoの関係を整理する  そうなったら Mono も役目を終える感じになるのかねぇ。\nブックマーク  C#7に完全対応した「Mono 5.0」が公開 | OSDN Magazine ASCII.jp：.NET Core / .NET Framework / Xamarin / Monoの関係を整理する (1/3) .NET Core について | Microsoft Docs .NETの派生を理解する オープンソースのMonoと.NET Coreを比較 Xamarin 最近どうよ？ - Qiita\n How To: run Git Extensions on Linux · gitextensions/gitextensions Wiki\n  "
    },
    {
      "title": "SNS は他者を差別するシステムか",
      "section": "remark",
      "description": "利用者側は SNS が「選別装置」であることを認識した上で「社交の場」としてサービスとの間に程よい距離感を保つのが賢明なのだと思う。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/04/sns/",
      "published": "2019-04-14T04:38:20+00:00",
      "update": "2019-04-18T12:41:40+00:00",
      "content": " 最近 Linus Torvalds 氏へのインタビュー記事を見つけて\n 「馬鹿げたたわ言も言えなくなった」--復帰後のトーバルズ氏が自己評価 - ZDNet Japan  「馬鹿げたたわ言も言えなくなった」と言いつつ Facebook を始めとする SNS を思いっきり dis ってる発言を見て笑ってしまったのだが\n  「わたしは最近の『ソーシャルメディア』を憎んでいる。Twitter、Facebook、Instagram。あれは社会の病癖だ。悪い振る舞いを助長している」\n[...]\n「『いいね』と『共有』のモデルそのものがガラクタだ。そこには努力も品質管理もない」とTorvalds氏は述べている。  via 「馬鹿げたたわ言も言えなくなった」--復帰後のトーバルズ氏が自己評価  という意見には全面的に同意するしかない。\nこれで思い出したのが2011年に公開された映画「ソーシャル・ネットワーク」である。 当時私は Facebook の利用について友人と議論や実践を模索していて，この映画も観に行った。\n  「ソーシャル・ネットワーク」の前半では学生たちが集まる社交クラブについての描写がいくつかある。それは社交クラブというよりは友愛結社というべきもので，初期の “The Facebook” はまさにリアルの友愛結社の仕組みを取り込み，そして友愛結社そのものを取り込んで急成長していく（映画の内容がどこまで事実に即しているかは分からないが）  via 「ソーシャル・ネットワーク」と Facebook  「社交クラブ」と「友愛結社」の違いについて，10年以上前に読んだ『秘密結社の世界史』ではこう説明されていた。\n  社交クラブと友愛結社がちがうのは、後者が儀礼を第一義と見て、それに多くの時間をかけ、社交の時間を犠牲にしていることだ  via 秘密結社の世界史  「『いいね』と『共有』のモデル」に耽溺する Facebook 等の SNS はまさに友愛結社的な側面を強めていると言えるかも知れない。\n友愛結社は「友愛」の名の下に他者を選別（包摂\u0026amp;排除）するシステムである。 「入社式（initiation）」はその典型だろう。 ここからの連想で考えるなら Facebook 等の SNS に政治広告や欺瞞記事が溢れるのはむしろ当然の帰結に思える。 出稿者はそれらにどう反応 (engagement) するかで他者を選別しているのだから。\n最近\n MIT Tech Review: フェイスブック広告が 「差別」を排除できない 根本的な理由 フェイスブック、広告主が意図しないユーザー選別による「差別」 | 新聞紙学的 フェイスブックの広告プラットフォームは、根幹から「差別的」かもしれない｜WIRED.jp : 考えるこたぁ皆同じ（笑）  といった記事を見かけるが， SNS そのものが「選別装置」であるなら，そこに「差別」が生まれるのはむしろ必然なんじゃないか。 もし SNS から「差別」をなくしたいなら「SNS でないもの」になるしかない。 それはサービス自体を否定することでありプロバイダ側は絶対に許容できないだろうが（と考えるなら最近の Mark Zuckerberg 氏の奇天烈な発言にも納得がいく）。\nそして利用者側は SNS が「選別装置」であることを認識した上で「社交の場」としてサービスとの間に程よい距離感を保つのが賢明なのだと思う。 まぁ，私は既に Facebook からの撤退戦を始めてるけどね（笑）\n参考図書  ソーシャル・ネットワーク (字幕版) Scott Rudin (プロデュース), Dana Brunetti (プロデュース), Michael De Luca (プロデュース), Cean Chaffin (プロデュース)  (Release 2013-11-26) Movie Prime Video ASIN: B00FW5SSCK 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この映画が公開された当時（2011年）は日本でも Facebook が一般（特に年配層）に浸透し始めていたときで，スクリーン上の狂騒に苦笑したものだが，その Facebook が広告まみれの駄システムに堕ちてしまうとは誰も思わなかっただろうな（笑）\nreviewed by Spiegel on 2019-04-14 (powered by amazon-item 0.2.1)\n  秘密結社の世界史　フリーメーソンからトランプまで、その謎と陰謀 (朝日文庫) 海野　弘 朝日新聞出版 2017-06-07 (Release 2017-07-07) eBooks Kindle版 ASIN: B073PT6WDB 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  文庫本版がでてたのか。古代から現代にかけての「結社」の系譜を俯瞰的に解説している。読み物として面白かった。\nreviewed by Spiegel on 2019-04-14 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "2019-04-14 のブックマーク",
      "section": "bookmarks",
      "description": "「史上初、ブラックホールの撮影に成功 ― 地球サイズの電波望遠鏡で、楕円銀河M87に潜む巨大ブラックホールに迫る」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/04/14-bookmarks/",
      "published": "2019-04-14T01:30:56+00:00",
      "update": "2019-04-14T01:35:09+00:00",
      "content": " リリース情報  Mozilla、「Firefox」v66.0.3をリリース - 窓の杜 Atom 1.36 | Atom Blog  セキュリティ＆プライバシー関連  トレンドマイクロ、キー操作自動化ツール「AutoHotkey」を悪用した攻撃を確認・警告 - 窓の杜 フェイスブック、広告主が意図しないユーザー選別による「差別」 | 新聞紙学的 不正移管によるドメイン名ハイジャックについてまとめてみた - piyolog iPhoneを狙う強力なスパイウェアが登場 | TechCrunch Japan MIT Tech Review: ニューヨークの顔認識実験が大失敗、成功率はまさかのゼロ Firefoxにフィンガープリンティングと仮想通貨発掘プログラムへのプロテクションを追加 | TechCrunch Japan  「Firefox」が暗号通貨の採掘とフィンガープリンティングを防止する機能を導入へ - 窓の杜  嫌がらせに利用された出会い系アプリは嫌がらせの責任を負うべきなのか – P2Pとかその辺のお話R 2019年 4月 Intel 製品の脆弱性に関する注意喚起 Microsoft 製品の脆弱性対策について(2019年4月) ：IPA 独立行政法人 情報処理推進機構  2019年 4月マイクロソフトセキュリティ更新プログラムに関する注意喚起  Adobe Flash Player の脆弱性対策について(APSB19-19)(CVE-2019-7096等)：IPA 独立行政法人 情報処理推進機構  Adobe Flash Player の脆弱性 (APSB19-19) に関する注意喚起  Adobe Acrobat および Reader の脆弱性対策について(APSB19-17)(CVE-2019-7111等)：IPA 独立行政法人 情報処理推進機構  Adobe Acrobat および Reader の脆弱性 (APSB19-17) に関する注意喚起  グーグル、Androidスマホに組み込みのセキュリティキーを使った2段階認証を可能に - ZDNet Japan 危険物が製造された複数の事件についてまとめてみた - piyolog  天文関連  MIT Tech Review: 「太陽嵐」の脅威に備えよ、 ESAが計画する宇宙天気観測ミッション MIT Tech Review: 動物園仮説：コンピューターモデルで地球人類が無視されている可能性は低いと判明 The Drake Equation: Revisiting a Classic Tool to Estimate the Odds of Contact 史上初、ブラックホールの撮影に成功 ― 地球サイズの電波望遠鏡で、楕円銀河M87に潜む巨大ブラックホールに迫る | 国立天文台(NAOJ)  史上初、ブラックホールの撮影に成功！8つの電波望遠鏡束ねた「イベント･ホライズン･テレスコープ」で画像化 - Engadget 日本版 2019年4月11日ニュース「5500万光年離れたブラックホールの影の撮影に成功 史上初の成果と日本の国立天文台など国際チーム」 | SciencePortal 史上初めて捉えられたブラックホールの画像、地球から5500万光年 | TechCrunch Japan MIT Tech Review: これが「ブラックホール」だ！国際チームが初の撮影に成功 初めてのブラックホールの画像を作ったアルゴリズムはMITの院生Katie Boumanの指揮で開発された | TechCrunch Japan 映像 | 国立天文台(NAOJ)   その他  機械学習の関数「ボルツマンマシン」を用いて、量子多体系という難問に挑む | academist Journal サイバーロッカーのRapidVideo、広告モデルに依存した無料ストリーミングからプレミアムプランへの移行方針を明らかに – P2Pとかその辺のお話R MIT Tech Review: フェイスブック広告が 「差別」を排除できない 根本的な理由 「馬鹿げたたわ言も言えなくなった」--復帰後のトーバルズ氏が自己評価 - ZDNet Japan GPSの「2000年問題」が終了、週番号ロールオーバーを迎えた | TechCrunch Japan ブログ: Internet RFCが50周年 「ハロー・ワールド」やっと登場したそうでない人たちに手渡すことができるわれわれの物語 #151冊目 #1000冊紹介する #ハロワ Microsoft、「Chromium」ベースの新しい「Microsoft Edge」をプレビュー公開 - 窓の杜 ［速報］Google、大手クラウドに不満を表明していたMongoDB、RedisらOSSベンダと戦略的提携。Google CloudにOSSベンダのマネージドサービスを統合。Google Cloud Next '19 － Publickey 人手不足は本当に「悪」なのか　騙され続ける日本人 (1/6) - ITmedia ビジネスオンライン Githubにdeploy用の鍵を追加する - Qiita 全社的に会社用GitHubアカウントを廃止した件 - ZOZO Technologies TECH BLOG Amazonプライム、日本で初の値上げ　年会費4900円に - ITmedia NEWS EFF Statement on Assange Indictment and Arrest | Electronic Frontier Foundation 「ユーザーデータはユーザーのもの」--グーグルが語るプライバシーへの取り組み - ZDNet Japan 初めて Scratch に触れた - 電気ウナギ的○○ PHP 8でのJIT採用が可決、賛成50反対2。PHP 7.4への試験的採用は否決 － Publickey  "
    },
    {
      "title": "Go 1.12.4 がリリースされた",
      "section": "release",
      "description": "なんか 1.12.3 がちゃんと直ってなかったみたい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/04/go-1_12_4-is-released/",
      "published": "2019-04-13T10:25:08+00:00",
      "update": "2019-04-13T10:31:24+00:00",
      "content": " なんか 1.12.3 がちゃんと直ってなかったみたい。\n Go 1.12.4 and Go 1.11.9 are released - Google Group   go1.12.3 (released 2019/04/08) was accidentally released without its intended fix. It is identical to go1.12.2, except for its version number. The intended fix is in go1.12.4.  via Release History - The Go Programming Language  というわけで Linux 環境の方は 1.12.4 にアップデートしましょう。\nアップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "Hugo 0.55 リリースでまた後方互換性が壊れた",
      "section": "hugo",
      "description": "しょうがないので shortcode を設計し直したですよ orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/hugo/broken-backward-compatibility-by-hugo-0_55/",
      "published": "2019-04-13T10:05:15+00:00",
      "update": "2019-04-21T01:08:33+00:00",
      "content": " Shortcode の仕様変更 Hugo 0.45 のときは組み込み shortcode である ref/relref の仕様変更だったが，今回は shortcode そのものの仕様が変更になった。\n Hugo 0.55.0: The early Easter Egg Edition! | Hugo  Shortcodes using the {{% %}} as the outer-most delimiter will now be fully rendered when sent to the content renderer (e.g. Blackfriday for Markdown), meaning they can be part of the generated table of contents, footnotes, etc. via Hugo 0.55.0: The early Easter Egg Edition!  具体的な例を挙げたほうが分かりやすいだろう。\nたとえば記述内容を \u0026lt;div\u0026gt; 要素で囲むだけの簡単な shortcode “div-box” を作ってみる。 コードはこんな感じ。\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;{{ .Inner }}\u0026lt;/div\u0026gt; この div-box を使って\n{{\u0026lt; div-box \u0026gt;}}**Hello world!**{{\u0026lt; /div-box \u0026gt;}} と書けば .Inner 変数の内容がそのまま展開されて\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;**Hello world!**\u0026lt;/div\u0026gt; となる。 ここで\n{{% div-box %}}**Hello world!**{{% /div-box %}} と書き換えると，以前のバージョンでは\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;strong\u0026gt;Hello world!\u0026lt;/strong\u0026gt;\u0026lt;/div\u0026gt; のように .Inner 変数の内容が markdown の文法に従って変換されていたのが， 0.55 からは {{\u0026lt; \u0026gt;}} と同じように\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;**Hello world!**\u0026lt;/div\u0026gt; と素通ししてしまうのだ。 もし markdown として処理したければ shortcode 側で\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;{{ .Inner | markdownify }}\u0026lt;/div\u0026gt; と .Inner 変数の内容を markdownify 関数に渡して明示的に変換する必要がある1。\nなんでこんなことになったかというと {{% %}} での処理は地の記述と連動しているらしい。 たとえば span という名前で以下の内容の shortcode をつくり\n\u0026lt;span\u0026gt;{{ .Inner }}\u0026lt;/span\u0026gt; これを markdown の表の中で使うと\n| 強調したい | | ---------- | | {{\u0026lt; span \u0026gt;}}**強調**{{\u0026lt; /span \u0026gt;}} | | {{% span %}}**強調**{{% /span %}} |    強調したい     **強調**   強調    という感じに {{\u0026lt; \u0026gt;}} と {{% %}} で違いが生じる。\nHugo のテンプレート処理は文脈依存になっていて，同じ記述でもどの要素の中で書かれるか（\u0026lt;head\u0026gt; 要素か \u0026lt;body\u0026gt; 要素か，あるいは JavaScript か CSS か）で出力が違ったりする。 おそらく shortcode の {{% %}} 記述でも同じように文脈依存で出力が変わるようにしたかったのだろう。\nでも，私は .Inner 変数の展開を {{\u0026lt; \u0026gt;}} か {{% %}} かで使い分けていたので，今回のアップデートで大ダメージを食らってしまったですよ。 しょうがないので shortcode を設計し直したけどね orz\n今後の shortcode の運用方針は以下のような感じだろうか。\n .Inner の内容を markdown ドキュメントとして処理するかどうか明示的に制御する場合は {{\u0026lt; \u0026gt;}} を使う .Inner の処理を文脈依存で行う（shortcode を入れ子にするなどの）場合は {{% %}} を使う  後方互換性が壊れる変更は，少なくとも最初はオプトアウトではなくオプトインで組み込めるようにして欲しい。\nShortcode の入れ子ができてる 今回いろいろ弄っていて気がついたのだが，いつの間にか shortcode の入れ子ができるようになってたんだね。 いつのバージョンからだろう。\nたとえば\n{{% div-box %}}{{% ruby \u0026#34;Hello world!\u0026#34; %}}こんにちは世界{{% /ruby %}}{{% /div-box %}} と書くと\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;ruby\u0026gt;\u0026lt;rb\u0026gt;こんにちは世界\u0026lt;/rb\u0026gt;\u0026lt;rp\u0026gt; (\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;Hello world!\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;) \u0026lt;/rp\u0026gt;\u0026lt;/ruby\u0026gt;\u0026lt;/div\u0026gt; こんにちは世界 (Hello world!)  などとできるようになっていた。 入れ子記述は {{\u0026lt; \u0026gt;}} でも {{% %}} でもできる。 {{\u0026lt; \u0026gt;}} と {{% %}} 混在でもOK。\nちなみに ruby は自作の shortcode で中身はこんな感じ。\n\u0026lt;ruby\u0026gt;\u0026lt;rb\u0026gt;{{ .Inner }}\u0026lt;/rb\u0026gt;\u0026lt;rp\u0026gt; (\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;{{ index .Params 0 }}\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;) \u0026lt;/rp\u0026gt;\u0026lt;/ruby\u0026gt; 特に権利は主張しないので（するほどの内容じゃないし）自由に使ってください。\nDeprecated な変数・関数 Hugo 0.55 を起動すると以下のワーニングが出るようになった。\n$ hugo WARN 2019/04/13 09:00:00 Page\u0026#39;s .Hugo is deprecated and will be removed in a future release. Use the global hugo function. WARN 2019/04/13 09:00:00 Page\u0026#39;s .RSSLink is deprecated and will be removed in a future release. Use the Output Format\u0026#39;s link, e.g. something like: {{ with .OutputFormats.Get \u0026#34;RSS\u0026#34; }}{{ .RelPermalink }}{{ end }}. WARN 2019/04/13 09:00:00 Page\u0026#39;s .GetParam is deprecated and will be removed in a future release. Use .Param or .Params.myParam. テンプレート内で .Hugo, .RSSLink 変数および .GetParam 関数が使われていると上記ワーニングが出る。\n.Hugo の廃止と代替手段 （以前の内容を書き換えた）\n.Hugo 変数は将来バージョンで削除されるようだ。 代替として（変数ではなく） hugo 関数が用意されている（Thanx @peaceiris）。 出力例は以下の通り。\n  テンプレート 出力内容  {{ hugo.Generator }} \u0026lt;meta name=\u0026#34;generator\u0026#34; content=\u0026#34;Hugo 0.55.3\u0026#34; /\u0026gt;  {{ hugo.Version }} 0.55.3  {{ hugo.CommitHash }} 993b8433  {{ hugo.BuildDate }} 2019-04-20T14:24:07Z  {{ hugo.Environment }} production   この手が使えるなら .Site 変数も関数で用意してほしいものである。\n.RSSLink の廃止と代替手段 .RSSLink 変数も将来バージョンで削除されるようだ。 代替として .AlternativeOutputFormats および .OutputFormats 変数が使える。 たとえば \u0026lt;head\u0026gt; 要素内なら\n{{ with .Site.Home.AlternativeOutputFormats.Get \u0026#34;RSS\u0026#34; }} \u0026lt;link rel=\u0026#34;alternate\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; type=\u0026#34;application/rss+xml\u0026#34; title=\u0026#34;{{ $.Site.Title | plainify }}\u0026#34;\u0026gt; {{ end }} と書けばいいし \u0026lt;head\u0026gt; 要素以外なら\n{{ with .OutputFormats.Get \u0026#34;RSS\u0026#34; }} \u0026lt;a href=\u0026#39;{{ .RelPermalink }}\u0026#39; title=\u0026#39;Feed\u0026#39;\u0026gt;Feed\u0026lt;/a\u0026gt; {{ end }} などと書ける。 .AlternativeOutputFormats および .OutputFormats 変数はかなり応用範囲が広くて，たとえば私はフィードを JSON 形式でも用意しているが，\n{{ with .Site.Home.AlternativeOutputFormats.Get \u0026#34;JSON\u0026#34; }} \u0026lt;link rel=\u0026#34;alternate\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34; type=\u0026#34;application/json\u0026#34; title=\u0026#34;{{ $.Site.Title | plainify }}\u0026#34;\u0026gt; {{ end }} と書けば簡単に \u0026lt;head\u0026gt; 要素に組み込める。\n.GetParam の廃止と代替手段 .GetParam 関数については随分前からアナウンスがあったので使っている人はいないと思うが .Param 関数で代替できる。\nブックマーク  0.55.1: 3 Bug Fixes | Hugo Hugo 0.55.2: Some Important Bug Fixes | Hugo Hugo 0.55.3: A Few More Bug Fixes! | Hugo\n .Hugo.Generator は廃止されるので hugo.Generator を使おう - Qiita\n Shortcodes で HTML コードを埋め込む\n   もうひとつの方法としてはテンプレート・ファイルの先頭で {{ $_hugo_config := `{ \u0026quot;version\u0026quot;: 1 }` }} と呪文を唱えることで 0.55 以前の動作に戻る。が，これ将来バージョンで無効になるよなぁ，多分。 [return]   "
    }
  ]
}
