{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Ubuntu に Visual Studio Code を導入する",
      "section": "remark",
      "description": "継続的に使うなら今後も追記するつもり。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/05/installing-vscode-in-ubuntu/",
      "published": "2020-05-28T03:31:57+00:00",
      "update": "2020-05-28T13:44:36+00:00",
      "content": "ちうわけで Visual Studio Codeを導入して試してみることにした。\n継続的に使うなら今後も追記するつもり。\nVS Code のインストール Ubuntu に VS Code をインストールするのであれば Snap を使うのが一番簡単なのだが，うちの環境では何故か Snap 版で日本語入力ができないという致命的な問題があるため，今回は公式サイトから deb ファイルをダウンロードして直接 apt install した。\n$ sudo apt install ./code_1.45.1-1589445302_amd64.deb インストールに成功すれば以下のコマンドでバージョンが取得できるはず。\n$ code -v 1.45.1 5763d909d5f12fe19f215cbfdd29a91c0fa9208a x64 よしよし。 ちゃんと最新バージョンだな。\n実際に VS Code を起動してアプリケーション情報（メニューの Help → About を選択）も確認してみる。\n うむうむ。\nVS Code のカスタマイズ カスタマイズはメニューの File → Preferences から選択できる。\n File → Preferences → Settings で設定画面が開く（または Ctrl+, キー押下） File → Preferences → Keyboard Shortcuts でキー割当の確認・変更ができる  既定のキー割当は ATOM とほとんど同じなので悩むところは少なかった File → Preferences → Keymaps で他エディタの割当を導入することもできる   f1 キー押下でもコマンド・パレット（Show All Commands）が開く  設定の行方 VS Code は $HOME ディレクトリに以下の設定ディレクトリを作成する。\n ~/.vscode/ ~/.config/Code/  このうち，ユーザ設定は ~/.config/Code/User/ ディレクトリ直下の以下のファイルに書き込まれる。\n settings.json keybindings.json  最低でもこれらのファイルを保持っておけば再現しやすくなるだろう。\nとりあえず導入してみた拡張機能 ATOM エディタみたいに印を付けておいて纏めてインストールできるといいんだけどねぇ。\n EditorConfig for VS Code - Visual Studio Marketplace : EditorConfig zenkaku - Visual Studio Marketplace : 全角空白文字を色付きで表示できる Zenkaku-Hankaku - Visual Studio Marketplace : 全角⇔半角文字変換 vscode-icons - Visual Studio Marketplace : file icon theme Insert Date String - Visual Studio Marketplace  ブックマーク  Running Visual Studio Code on Linux UbuntuにVSCodeをインストールする3つの方法 - Qiita VS Code でドキュメントの空白文字を見やすくしてみる - Qiita  "
    },
    {
      "title": "とりあえず ATOM エディタ内ターミナルを x-terminal に乗り換えた",
      "section": "remark",
      "description": "ATOM における Electron の外れっぷりはどうにかならないのかなぁ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/05/x-terminal-with-atom/",
      "published": "2020-05-28T02:23:04+00:00",
      "update": "2020-05-28T02:30:42+00:00",
      "content": "先週， ATOM エディタの 1.47 がリリースされ Electron も v5 ベースに上がったのだが，またもや platformio-ide-terminal が動かなくなった。 今回はちゃんとリビルドできてるのに。\n一週間待ったが platformio-ide-terminal がアップデートされる気配がないので，諦めて他のパッケージを物色することにした。 まぁ，今は Linux/Ubuntu なので Windows の頃よりは選択肢が多いだろう。\nちうわけで幾つか試した結果，以下のパッケージに乗り換えた。\n x-terminal  このパッケージは atom-xterm からの fork らしいのだが，本家はメンテされなくなって久しいようだ。 x-terminal の方はマメにアップデートされているようなので，しばらくはこちらを使ってみることにする。\nしかし ATOM における Electron の外れっぷりはどうにかならないのかなぁ。 v5 なんかとっくの昔にサポートから外れてるっちうねん。 この機会に真剣に VS Code への乗り換えを検討したほうがええかもしらん1。\nブックマーク  アプリフレームワーク「Electron 9」が公開 ～「PDFium」ベースのPDFリーダーが有効化 - 窓の杜    5年前に秀丸から ATOM に乗り換えたのだが，当時 VS Code は登場したばかりでチューニングの仕方とかよく分からなかったのだ。まぁ GitHub は Microsoft に買収されちゃったし ATOM はそのうちなくなって VS Code に一本化されちゃうのかもねぇ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-05-24 のブックマーク",
      "section": "bookmarks",
      "description": "「ISC BIND 9 の脆弱性」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/05/24-bookmarks/",
      "published": "2020-05-24T01:30:25+00:00",
      "update": "2020-05-28T00:12:35+00:00",
      "content": "リリース情報  Announcing Rust 1.43.1 | Rust Blog Markdown Render Hooks for Headings | Hugo : Hugo 0.71.0 Release 4.0.0 · hakimel/reveal.js · GitHub LibreOffice 6.4.4 available for download - The Document Foundation Blog  セキュリティ＆プライバシー関連  マルウェア感染による日経新聞社員らの情報流出についてまとめてみた - piyolog 米国がファーウェイ製品の使用禁止を1年延長 | TechCrunch Japan Samsung Androidに任意コード実行の脆弱性、アップデートを | マイナビニュース : 2020-05-01 版に要更新 欧州で多数のスパコンが乗っ取り、暗号資産マイニングに利用される - ZDNet Japan 「LibreOffice 6.4.3」「LibreOffice 6.3.6」で1件のセキュリティ改善 - 窓の杜 DNS サーバ BIND の脆弱性対策について(CVE-2020-8616)(CVE-2020-8617) ：IPA 独立行政法人 情報処理推進機構  ISC BIND 9 の脆弱性 (CVE-2020-8616, CVE-2020-8617) に関する注意喚起   VU#647177 - Bluetooth devices supporting BR/EDR are vulnerable to impersonation attacks : Bluetooth Impersonation AttackS (BIAS)  Bluetoothでペアリング済み機器になりすませる脆弱性 - PC Watch Bluetooth Vulnerability: BIAS - Schneier on Security    天文関連  「第二の地球」の公転軌道面は傾いていない | 国立天文台(NAOJ) 2020年4月28日ニュース「金星の大気高速周回、原因は熱が生む波 探査機あかつきで解明」 | SciencePortal 2020年4月21日ニュース「ニュートリノ、反粒子と性質異なる可能性高まる T2K実験」 | SciencePortal 天の川銀河中心の超巨大ブラックホール「いて座A*」の「瞬き」を検出 ―ブラックホールごく近傍からの放射か― | 国立天文台(NAOJ) APOD: 2020 May 14 - Comet Halley vs Comet SWAN  知財関連  GitHub Reinstates Popcorn Time Code Despite MPA \u0026lsquo;Threat\u0026rsquo; * TorrentFreak  Linux または Ubuntu に関する話題  Ubuntu 20.04 その42 - Canonicalが取り組んできたGNOME Shellのパフォーマンス改良作業 - kledgeb Ubuntu 20.04 その44 - QEMU 4.2とlibvirt 6.0による優れた仮想環境のサポート - kledgeb Ubuntu 20.04 その45 - FIDO及びU2FデバイスによるSSH認証のサポート - kledgeb Ubuntu 20.04 その47 - Ubuntu 20.04 LTSがRaspberry Piを完全にサポート・イメージのダウンロードとインストールガイド - kledgeb  その他  ＰＣＲ検査は必要か？ ずっと無料で使えるクラウドの「Free Tier」主要サービスまとめ。2020年版 － Publickey 【やじうまミニレビュー】テレワークの2画面は、サブPCと「Mouse Without Borders」の組み合わせがベストだ! - PC Watch Google Kubernetes EngineがWindows Serverコンテナを正式サポート。KuberntesでWindowsの本番用アプリケーションを実行可能に － Publickey Raspberry Piと400円のUSBマイクで作れるボイスチェンジャーで子供と遊ぶ - Qiita DNS over HTTPSを初期サポート ～プレビュー版「Windows 10」Build 19628がFastリングに - 窓の杜 グーグル、「Dart 2.8」と「Flutter 1.17」をリリース\u0026ndash;iOS関連機能を大幅強化 - ZDNet Japan レビュー「新型コロナ検査、新段階に 厚労省、抗原検査キットを13日に承認」 | SciencePortal − AtlassianがHalpを買収、JiraやConfluenceとの統合を進める | TechCrunch Japan 「Chrome」、過剰に「重い」広告をブロックへ\u0026ndash;8月から - ZDNet Japan 「Google Cloud VMware Engine」発表。Google自身がVMware環境をGoogle Cloud上に構築、マネージドサービスとして提供 － Publickey HPEがKubernetes対応のコンテナプラットフォーム「HPE Container Platform」を国内で提供開始。大規模なデータ統合基盤の構築が狙い － Publickey Five Years of Rust | Rust Blog Denoの登場でNode.jsの時代は終わるのか？ - Qiita VSCodeでDraw.ioが使えるようになったらしい！ - Qiita ［速報］Windows用パッケージマネージャ「winget」がプレビューリリース。コマンドラインからアプリケーションをインストール。Microsoft Build 2020 － Publickey ［速報］WSL 2が正式版に到達。今後はLinuxのGUIアプリへも対応すると。Microsoft Build 2020 － Publickey ［速報］Windows Terminal 1.0正式リリース。7月からは毎月アップデートへ。Microsoft Build 2020 － Publickey ［速報」Blazor WebAssemblyが正式リリース。C#/.NETでWebアプリケーションを開発可能に。Microsoft Build 2020 － Publickey ［速報］マイクロソフト、新UIフレームワーク「.NET Multi-platform App UI」（.NET MAUI）発表。単一コードでマルチプラットフォーム対応。Microsoft Build 2020 － Publickey Gmailに追加されたGoogle Meetの開始・参加リンク、非表示にするオプションが追加 - 窓の杜 フリーのネットワーク解析ツール「Wireshark」v3.2.4/v3.0.11/v2.6.17が公開 - 窓の杜 わずか1万円のLinux搭載2-in-1タブレットPC「PineTab」まもなく登場！ Microsoft、37年前の「GW-BASIC」をオープンソース化 - 窓の杜 Linuxが主流のカオスエンジニアリングをWindowsで実現するGremlin | TechCrunch Japan 「Google Chrome 83」は“DNS-over-HTTPS”に対応、セキュリティ設定も刷新され使いやすく - 窓の杜  "
    },
    {
      "title": "「特別定額給付金」申請のナニがダメだったのか",
      "section": "remark",
      "description": "日本というのは本当に本当におバカな国である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/05/bottleneck/",
      "published": "2020-05-21T01:49:31+00:00",
      "update": "2020-05-21T03:53:45+00:00",
      "content": "「ダメだったのか」って過去形にしちゃったけど別にいいよね，もう今更だし。\nいやね\n 特別定額給付金のオンライン申請で起きた問題についてまとめてみた - piyolog  を見て笑っちまったのよ。 特に\n この問題を受け、郵送方式での申請を一部の自治体では推奨しています。 via 特別定額給付金のオンライン申請で起きた問題についてまとめてみた  の部分。 それってただの「先延ばし」なんだけど（笑）\n今回の「特別定額給付金」申請の最大の障害（ボトルネック）は申請受理の作業が「人力」である点だろう。 世帯単位での申請とはいえ人口の多い都会ほど世帯ごとの人数が少なくなるんだから，申請受理の「人力」作業でパンクしてしまうのは火を見るよりも明らか。 その上に個人番号カード発行や関連トラブルで混乱に拍車がかかっているのだから，ニンともカンとも。\nオンライン申請で「おや？」と思った人も多いと思うが，申請時に提出する「添付書類1」って「目視」による確認らしいんだよね（そう明記されていた）。 しかも「特別定額給付金のオンライン申請で起きた問題についてまとめてみた」によると，そもそも申請データと住基データを「人力」で照合するなどという無駄な作業をしているらしい。 ホンマ，馬鹿だよねぇ。\nこれも住基ネットの呪いだよなぁ。 いや，むしろ個人情報保護法の呪いか（笑）\n前にもどっかで書いたような気がするが，システムのセキュリティを考える際のポイントは「識別」と「認証」と「許可」の3つであり，これらをいかに上手く分離し組み合わせるかにかかっている。\nかつての住基ネットや現在の個人番号システムの何が下手糞かって，この識別・認証・許可の混同によりサービス・ドメイン毎の適切な運用が阻害されていることだ。 更にこの無能なシステムを「個人情報保護法」なる悪法で無理やり規制しようとする2 から「特別定額給付金」のような子供の思い付きみたいな政策ですら実装困難になってしまうのだ。\nけど，まぁ，前回も書いたけど，お祭り騒ぎが終われば忘れきって次回以降もまた同じことを繰り返すのだろう。\n日本というのは本当に本当におバカな国である。\nブックマーク  固有IDのシンプル・シナリオ  参考図書  セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n   添付書類は「振込先講座の確認書類（写し）申請者名義の通帳やキャッシュカード、インターネットバンキングの画面等の写し又は画像（口座番号、カナ氏名等が分かるもの）」とのこと。 \u0026#x21a9;\u0026#xfe0e;\n お忘れの方も多いかもしれないが，個人情報保護法はもともと「住基ネットを規制する」ために（住基法とセットで）考えられたものだ。これに様々な政治的思惑が重なったキメラみたいな法律が現在の個人情報保護法である。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "引っ越ししたら個人番号カードを更新しましょう",
      "section": "remark",
      "description": "とほほ… orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/05/my-number-card/",
      "published": "2020-05-15T07:56:29+00:00",
      "update": "2020-05-20T10:21:48+00:00",
      "content": "いや，私も「特別定額給付金」をオンラインで申請しようと思ったわけですよ。 個人番号カードは5年前に取得して，今年の誕生日までは有効な筈なので安心しきって手続きを進めてたんだけど，最後の電子署名で証明書が失効してるって言ってくさるのよ。 しょうがないから再発行してもらうために市役所へ行きましたよ。 とほほ\u0026hellip;\n市役所で話を聞くに，引っ越しで住所が変わったら電子証明書を再発行してもらわないといけないらしい。 うーん，そういえば引っ越ししたときにそんな話があったような，なかったような。 うろ覚え。\nというわけで早速手続きしたのだが，ここでもトラブル。 私が5年前に個人番号カードを取得したときには\n 住基関連の事務に必要な暗証番号 電子申請等において個人番号や氏名等の情報をカード（の IC チップ）から読み出すための暗証番号 利用者証明用電子証明書を利用するための暗証番号 署名用電子証明書を利用するためのパスワード  を全て違うコードにしたほうがいいと言われたが（それぞれ使用するドメインが異なるため），松江市では3つの暗証番号を同じにするよう住民に勧めていたらしく，受付のおねーさんとの話が噛み合わないままロックアウトされてしまった。 そこでロックアウトの解除（上の3つの暗証番号を再設定する）からやり直す羽目に（笑）\nちなみに電子証明書のパスワードを再設定する際には住基用の暗証番号が必要。 ここで住基ネットの怨霊が出てくるのか。 呪いのようだな。\nこれで無事に手続きは終了した。 ちなみに暗証番号やパスワードは外部に漏洩しているのでなければ同じものを再設定して構わないそうだ。 その後「特別定額給付金」のオンライン申請も滞りなく完了。\nなお「特別定額給付金」の申請をスマホで行う場合にはスマホ側に NFC インタフェースが必要。 年寄り向けのいわゆる「簡単スマホ」や古い機種には付いてない可能性があるので事前に確認すること。 また申請は Web ブラウザ上で行うが Android 機の場合は Chrome ブラウザ以外は受け付けないようなので注意。 更に後半で必要となる「添付書類1」は（作業が面倒になるので）あらかじめ用意しておくことを強くお勧めする。\n政府は個人番号カードを義務化しようとしているそうだが，悪手だろう。 市役所に行ったら個人番号カード関連のエリアはカード発行の問い合わせと手続きで（この時期にも関わらず）受付が大混乱していた。 しかも電子証明書は5年毎に更新しないといけないし，引っ越しの度に（私のように）再発行してもらわないといけない。\nそして今回の「特別定額給付金」の騒ぎが終わればみんな忘れるよね。 確定申告等で使い慣れてる人もいるだろうけど，大抵の人は日常生活でカードどころか個人番号自体をそもそも使わないし，個人番号カードで気まぐれに何かやるたびに混乱が発生する未来が見える。\nブックマーク  特別定額給付金の申請をオンラインで済ませた｜塚本 牧生｜note 特別定額給付金のオンライン申請で起きた問題についてまとめてみた - piyolog    添付書類は「振込先講座の確認書類（写し）申請者名義の通帳やキャッシュカード、インターネットバンキングの画面等の写し又は画像（口座番号、カナ氏名等が分かるもの）」とのこと。キャッシュカードをカメラで撮って送ればいいだろう。なんだかなぁ，であるが。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.14.3 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/05/go-1_14_3-is-released/",
      "published": "2020-05-14T23:55:24+00:00",
      "update": "2020-05-15T00:03:23+00:00",
      "content": "Go 1.14.3 がリリースされた。\n Subject: Go 1.14.3 and Go 1.13.11 are released - Google group  セキュリティ・アップデートはなし。\ngo1.14.3 (released 2020/05/14) includes fixes to cgo, the compiler, the runtime, and the go/doc and math/big packages. See the Go 1.14.3 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.14.3.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.14.3.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.14.3.linux-amd64.tar.gz $ sudo mv go go1.14.3 $ sudo ln -s go1.14.3 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.14.3 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "ついカッとなって機種変した，反省はしない",
      "section": "remark",
      "description": "もはやスマホにこれ以上パラダイム・シフトの夢を見ることはないし，スペックも最小限で無問題。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/05/changing-smartphone/",
      "published": "2020-05-14T15:02:50+00:00",
      "update": "2020-05-14T15:27:19+00:00",
      "content": "5年前に買ったスマートフォンなのだが，相変わらずバッテリ周りが酷くて今のが3台目だったのですよ。 その3台目も2年と経たずにイカれてしまい（勝手に強制リブートを繰り返すようになった）ついカッとなって機種変更した。 失業して銭のないときになんちう迷惑な。\n近所（田舎の近所なので察してください）の au ショップに駆け込んで「テザリングが使えるいっちゃん安い機種を」と言ったら Galaxy A20 を勧められた。 端末代が税込で 33,000JPY とのことで即金で買いましたよ。 もはやスマホにこれ以上パラダイム・シフトの夢を見ることはないし，スマホでゲームはしないからスペックも最小限で無問題だよね。\n2要素認証するならリカバリ・コードは控えておくこと 今までの反省から，旧端末から認証情報やデータを移行できない可能性を考慮して準備しておいたのは助かった。\n特に2要素認証1 の2要素目で TOTP を使っている場合は認証不能になる場合があるので，サービス側が発行するリカバリ・コードを必ずダウンロードして控えておくこと。 なんなら紙に印刷して厳重にしまっておけば確実だろう。\n言い換えると2要素認証を推奨しているのにリカバリ・コードの提供すらしないサービスはダメなサービスだと断言していいだろう。 まぁ SMS に一時パスワードを垂れ流して「2段階 認証だから安全」とか言ってくさるサービスとかあるけどな（笑）\n最近流行りの認証デバイスを使えばそんな面倒もないんだろうけど，個人的には紛失・盗難リスクが怖くてノートパソコンや携帯端末に認証デバイスを使う気にならないんだよねぇ。\n最初にすること まずは OS のアップデートを行うこと。 最近の端末は最初からストレージの暗号化がされてるんだね。 よーし，うむうむ，よーし。\nで，アプリのアップデートを行う前に既定で入ってるアプリで使わないものは削除する。 中には削除できないものもあるが，そういうのは，アップデート前であれば，見分けがつくので最初にやってしまおうってわけ。\nなんで LINE や Facebook や Twitter のアプリが最初から意味もなく入ってるんだろうねぇ。 ぜんぶ削除ですよ。 あと端末メーカー製やキャリア製のアプリで明らかに使わないものは可能な限り削除する。 ついでに Google 製の不要アプリもザクザク削除。\nこれで，すっきり！\n雑多な作業 「最初にすること」が終わったらパスワード管理アプリを入れる。\n Keepass2Android  私の場合，データベースファイルをクラウド・ストレージに置いているので，クラウド・ストレージにアクセスするアプリも併せて導入する。 暗号鍵は USB で PC に直結して端末にコピってしまう。 暗号鍵とパスワードでデータベースファイルを二重にロックしておけば大丈夫だろう。\nその後\n File Explorer Pro  を導入して LAN 上の NAS に入れるよう設定すれば一段落。\n他にセキュリティ関連アプリとして\n Google 認証システム FREEDOME Signal  を導入してセットアップする。 Signal は既定の SMS アプリとしても設定できるので置き換える。\nブラウザは\n Firefox Focus Firefox  を導入し Firefox Focus の方を既定のブラウザにする。 Firefox は予備系とし Chrome や他のブラウザは使わないようにする。 もちろん検索サービスにはどちらも DuckDuckGo を指定する。\nInput method は\n Gboard  で無問題。 ていうか，これ以外使いたくない。\nあとは好みで\n Feedly Pocket Slack Trello Flickr RealCalc Plus Simplenote 時計 Googleカレンダー Camera FV-5 tenki.jp  あたりを順次入れていく。 5年前に比べればだいぶ顔ぶれが変わったなぁ。\nMicrosoft Launcher を導入してみた 各端末メーカーが既定で入れてるランチャってなんであんなにダサいのかね。 いや，デザイン・センス皆無の私に言われたくないだろうけど。\n今までは「どうせすぐ壊れるから」と手を付けなかったんだけど，今回は試しに Microsoft Launcher を導入してみた。 セットアップ時に Microsoft account を要求するのだが，大昔に登録したのがまだ有効だったようで，問題なく行けた。 位置情報も要求されるが，許可しなくても無問題（もしくは後から許可を取り消せる）。\nちなみに検索バーと連携する検索サービスに DuckDuckGo を指定できる。 使わんけどね。\n「デバイスを探す」で避難訓練 ひととおり設定が終わったら「デバイスを探す」で一度は避難訓練をしておくとよいだろう。 携帯端末の捜索についてはキャリアも端末メーカーもサービスを提供しているが，キャリアはともかく，端末メーカーのサービスは無用である。\n「デバイスを探す」では検索対象の携帯端末に対して「音を鳴らす」「デバイスのロック」「データの消去」といった操作ができる。 「音を鳴らす」と「デバイスのロック」については一度は試してみることをお勧めする。\n 端末を探す    今だに「2段階認証」とかぬかす馬鹿メディアがあるみたいだが「2段階」では不十分だから「2要素」が要求されるのだ，ということを分かっているのだろうか。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "「他者を理解」できるわけがない",
      "section": "remark",
      "description": "垂直方向の「説教」と水平方向の「対話」",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/05/communications/",
      "published": "2020-05-11T03:25:02+00:00",
      "update": "2020-05-11T04:01:16+00:00",
      "content": "みなさん GW いかがでしたか。 私は某ウイルスに絡む非常事態を言い訳にがっつり引き篭もってました。 ハロワの失業認定でも物理的な求職活動は免除されているので，もっぱらネットで。 安◯先生，仕事がしたいです\u0026hellip;\n閑話休題 (それはさておき) ， Facebook の TL で面白いネタを見つけたので久しぶりに胡乱なことを書いてみる（笑）\n 平田オリザ氏炎上にみる、コミュニケーション教育は「他者と相互理解する能力」を害しているという現実｜ヒラヤマ　タカシ｜note  ちなみに記事の内容に関しては微塵も興味がないのであしからず。 ただし「他者」や「理解」や「コミュニケーション」というキーワードから色々と連想することはある。\nどこで見かけたのかうろ覚えで申し訳ないが「『◯◯を理解した』というのは『◯◯を理解するのを止めた』と同義」みたいな記述があったのを思い出した。 ましてや「他者」などという宗教的にも哲学的にも科学的にも解決されざる命題に対して「理解した」などと言える筈もないのだ。\nもうひとつ連想したのは「リスク・コミュニケーション」。 知らなかったり忘れてる人も多いだろうが，20年ほど前に BSE (Bovine Spongiform Encephalopathy; 通称「狂牛病」) を巡る騒動があって，私はこれをきっかけに「リスク・コミュニケーション」について勉強し始めたのだが，どっかのドキュメント（これもうろ覚え，ゴメン）で「リスク・コミュニケーションとは説得すること」みたいなことが書かれているのを見て「だめだこりゃ」と思ったことがある1。\nもっと言うと日本における「説得」は「説教」もしくは「折伏」に近い。 つまりコミュニケーションが水平方向ではなく垂直方向なのだ。 これに関して私は「説教番組」という造語を考えたことがある。\nそして「説教」で思い出すのは，あの名作である。\n PowerPoint 絶対主義  「理解」とは結果や成果ではなく「プロセス」である。 故に他者への理解を継続するための「コミュニケーション」は垂直方向の説教ではなく水平方向の「対話」であるべきだろう。\nと思うのだが，いかがだろうか。 ◯西先生，「他者を理解」したいです\u0026hellip;\n参考図書  数学ガールの誕生　理想の数学対話を求めて 結城 浩 (著) SBクリエイティブ 2013-09-13 (Release 2014-09-13) Kindle版 B00NAQA33A (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんの講演集。こういう場所に立ち会える今の学生さんは羨ましい。\nreviewed by Spiegel on 2013-09-21 (powered by PA-APIv5)\n  クリトン 原題: CRITO プラトン , sogo (翻訳)  2000-12-20 (Release 2014-09-17) 青空文庫 4333 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「ソクラテスの弁明」そのものには必ずしも賛同しないが，繰り広げられる対話は「個」と「公」の関係を考える上で面白い作品だと思う。\nreviewed by Spiegel on 2020-05-11 (powered by aozorahack)\n  リスクとつきあう―危険な時代のコミュニケーション (有斐閣選書) 吉川 肇子 (著) 有斐閣 2000-03-01 単行本 4641280304 (ASIN), 9784641280304 (EAN), 4641280304 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  リスク・コミュニケーションについて。内容は古いがまだまだ使える。\nreviewed by Spiegel on 2016-02-03 (powered by PA-APIv5)\n  セブン (字幕版) ブラッド・ピット (出演), モーガン・フリーマン (出演), グウィネス・パルトロー (出演), ケビン・スペイシー (出演), デビッド・フィンチャー (監督), アンドリュー・ケビン・ウォーカー (Writer), アーノルド・コペルソン (プロデュース), フィリス・カーライル (プロデュース)  (Release 2013-11-26) Prime Video B00FIWCVFM (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  説教こわい。夜見ると眠れなくなる（笑）\nreviewed by Spiegel on 2020-05-11 (powered by PA-APIv5)\n  あなたの人生の物語 テッド チャン (著), 浅倉久志 (翻訳) 早川書房 2012-08-25 (Release 2014-09-30) Kindle版 B00O2O7JEA (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  短編集。同名の短編が映画になったが，個人的に一番好きなのは「理解」だったり。\nreviewed by Spiegel on 2020-05-11 (powered by PA-APIv5)\n   リスク・コミュニケーション手法のひとつとして「説得」があるのは確か。ただし「説得」を使うには幾つか前提条件がある。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-05-10 のブックマーク",
      "section": "bookmarks",
      "description": "「部屋裏のバイテン - 竹本泉」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/05/10-bookmarks/",
      "published": "2020-05-10T01:30:34+00:00",
      "update": "2020-05-15T00:28:38+00:00",
      "content": "リリース情報  JavaScript Transpiler | Hugo : Hugo 0.70.0  セキュリティ＆プライバシー関連  【注意喚起】偽口座への送金を促す“ビジネスメール詐欺”の手口（第三報）：IPA 独立行政法人 情報処理推進機構 NSA、ウェブシェルの危険性を警告\u0026ndash;悪用されやすい脆弱性のリストも - ZDNet Japan ほぼすべてのウイルス対策ソフトにOSを破壊可能な脆弱性 ～現在は多くのソフトで修正済み - PC Watch Twitterが「SMSによる通知サービス」をほぼすべての国で終了すると発表 - GIGAZINE COVID-19とテクノロジー：接触トレーシング、位置情報追跡、近接追跡 | P2Pとかその辺のお話R 非公開会議の内容を無許可参加した記者がツイートした件についてまとめてみた - piyolog ハッキングフォーラムに投稿された複数の国内サイトリークについてまとめてみた - piyolog  天文関連  特集 - 視力6000で見る宇宙【vol.4】「化学」を道具にして星の誕生を探る - アルマ望遠鏡 すばる望遠鏡、銀河同士の衝突でできたジェットを撮影 | 観測成果 | すばる望遠鏡 TAMA300で実証した量子雑音を抑える新技術 | 国立天文台(NAOJ)  Linux または Ubuntu に関する話題  Ubuntu 20.10 その1 - Ubuntu 20.10の開発コードとリリーススケジュール - kledgeb  その他  LibreOfficeでドキュメントコンバータを作ろう - Qiita 「LibreOffice」は次期バージョン「LibreOffice 7.0」でFlashのサポートを廃止 - 窓の杜 第1話 / 部屋裏のバイテン - 竹本泉 | webアクション  webアクション「屋根裏のバイテン」第1話 : ぽじとろんの竹本泉観察記   総務省｜特別定額給付金  特別定額給付金の申請をオンラインで済ませた｜塚本 牧生｜note   Showcase: Digital.gov : Hugo theme GitLabが日本法人を設立、国内で本格展開へ。ロゴが「タヌキ」なのは、スーパーマリオの大ファンだから － Publickey GitHub、WebIDEの「Codespaces」を発表。GitHubからワンクリックで開発環境へ － Publickey  "
    },
    {
      "title": "画像データを連結してみる",
      "section": "golang",
      "description": "Go 言語っぽいトピックはなし。今回もお遊びの小ネタで。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/concatenate-images/",
      "published": "2020-05-04T04:20:55+00:00",
      "update": "2020-05-04T04:22:47+00:00",
      "content": "今回もお遊びの小ネタで。 複数の画像データを連結してひとつの画像データにすることを考えてみる。\n具体的には image-1.png と image-2.png の2つの画像データを使って\n 元の画像データから各々 image.Image を取得する 各 image.Image から矩形情報を抽出し，空の結合 image.Image を生成する 空の結合 image.Image に元の image.Image を貼り付ける 結合 image.Image を PNG データとして出力する  といった手順。 図にすると\n といった感じか。\nそれでは順にコードを書いてみよう。\n画像データから image.Image を取得する ファイルから image.Image を取得する関数はこんな感じでどうだろう。\nimport ( \u0026#34;image\u0026#34; _ \u0026#34;image/png\u0026#34; \u0026#34;os\u0026#34; ) func imageFrom(path string) (image.Image, error) { file, err := os.Open(path) if err != nil { return nil, err } defer file.Close() img, _, err := image.Decode(file) if err != nil { return nil, err } return img, nil } 今回は PNG データのみ取り扱うので image/png パッケージのみインポートしているが，他の形式も取り扱うのであれば各形式のパッケージを（暗黙的に）インポートして「依存の注入」を行えばよい。\nちなみに image.Image は interface 型で\n// Image is a finite rectangular grid of color.Color values taken from a color // model. type Image interface { // ColorModel returns the Image\u0026#39;s color model. \tColorModel() color.Model // Bounds returns the domain for which At can return non-zero color. \t// The bounds do not necessarily contain the point (0, 0). \tBounds() Rectangle // At returns the color of the pixel at (x, y). \t// At(Bounds().Min.X, Bounds().Min.Y) returns the upper-left pixel of the grid. \t// At(Bounds().Max.X-1, Bounds().Max.Y-1) returns the lower-right one. \tAt(x, y int) color.Color } と定義されている。 ここで定義される image.Image.Bounds() メソッドを使えば矩形情報 image.Rectangle が取れるので，ここから画像の幅や高さも分かるというわけ。\nfunc main() { img, err := imageFrom(\u0026#34;image-1.png\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } rct := img.Bounds() fmt.Println(\u0026#34;Width:\u0026#34;, rct.Dx(), \u0026#34;, height:\u0026#34;, rct.Dy()) \t//Output: \t//Width: 352 , height: 219 } 空の結合 image.Image を生成する まずは元の画像データの image.Image を保持っておくところから始めよう。 こんな感じ。\nsrcImages := make([]image.Image, 0, len(srcPaths)) for _, path := range srcPaths { img, err := imageFrom(path) if err != nil { return err } srcImages = append(srcImages, img) } このタイミングで結合 image.Image の幅と高さも計算してしまおう。\nsrcImages := make([]image.Image, 0, len(srcPaths)) width, height := 0, 0 for _, path := range srcPaths { img, err := imageFrom(path) if err != nil { return err } rct := img.Bounds() width = max(width, rct.Dx()) height += rct.Dy()  srcImages = append(srcImages, img) } ちなみに max() 関数は\nfunc max(x, y int) int { if x \u0026gt; y { return x } return y } と定義している1。\nこれで，算出した width, height を使って，空の image.Image を生成できる。 こんな感じ。\ndstImage := image.NewRGBA(image.Rect(0, 0, width, height)) 空の結合 image.Image に元の image.Image を貼り付ける ここまでくれば，あとは機械的な繰り返し作業。\noffset := 0 for _, img := range srcImages { srcRect := img.Bounds() draw.Draw( dstImage, image.Rect(0, offset, srcRect.Dx(), offset+srcRect.Dy()), img, image.Point{0, 0}, draw.Over, ) offset += srcRect.Dy() } 結合 image.Image を PNG データとして出力する 結合 image.Image をファイルに出力するにはこんな感じにすればよい。\nfile, err := os.Create(dstPath) if err != nil { return err } defer file.Close() if err := png.Encode(file, dstImage); err != nil { return err } 上のコードは PNG 形式で出力する場合。 各形式へのエンコーディングは（image.Decode() 関数のように）抽象化されていないので，それぞれの形式のパッケージが提供しているエンコーダを使う必要がある（image パッケージに準拠していれば自作も可能）。\n実行結果 一連の手順を関数化してみる。 こんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;image\u0026#34; \u0026#34;image/draw\u0026#34; \u0026#34;image/png\u0026#34; \u0026#34;os\u0026#34; ) func imageFrom(path string) (image.Image, error) { file, err := os.Open(path) if err != nil { return nil, err } defer file.Close() img, _, err := image.Decode(file) if err != nil { return nil, err } return img, nil } func max(x, y int) int { if x \u0026gt; y { return x } return y } func concatImageFiles(dstPath string, srcPaths ...string) error { srcImages := make([]image.Image, 0, len(srcPaths)) width, height := 0, 0 for _, path := range srcPaths { img, err := imageFrom(path) if err != nil { return err } rct := img.Bounds() width = max(width, rct.Dx()) height += rct.Dy() srcImages = append(srcImages, img) } dstImage := image.NewRGBA(image.Rect(0, 0, width, height)) offset := 0 for _, img := range srcImages { srcRect := img.Bounds() draw.Draw( dstImage, image.Rect(0, offset, srcRect.Dx(), offset+srcRect.Dy()), img, image.Point{0, 0}, draw.Over, ) offset += srcRect.Dy() } file, err := os.Create(dstPath) if err != nil { return err } defer file.Close() if err := png.Encode(file, dstImage); err != nil { return err } return nil }  func main() { if err := concatImageFiles(\u0026#34;out.png\u0026#34;, \u0026#34;image-1.png\u0026#34;, \u0026#34;image-2.png\u0026#34;); err != nil { fmt.Fprintln(os.Stderr, err) return } } これを実行すると以下の画像データが出力される。\n out.png  よーし，うむうむ，よーし。\nブックマーク  Go言語で複数の画像を縦に連結する - Qiita Go 言語で画像のサイズを変更する  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   Go の標準ライブラリには整数型の Min/Max 関数は用意されていないので，必要に応じて自前で用意する必要がある。 \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
