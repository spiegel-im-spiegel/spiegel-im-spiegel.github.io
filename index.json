{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "（何度目かの）さようなら SHA-1",
      "section": "remark",
      "description": "思ったより騒がれてる感じなので記事を立ててみた。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/sayonara-sha-1/",
      "published": "2020-01-09T14:02:25+00:00",
      "update": "2020-01-09T14:03:15+00:00",
      "content": "2019年11月に書いた「GnuPG 2.2.18 リリース： さようなら SHA-1」に追記してお終いにしようかと思ったが，思ったより騒がれてる感じなので記事を立ててみた。\nというわけで：\n Cryptology ePrint Archive: Report 2020/014 - SHA-1 is a Shambles - First Chosen-Prefix Collision on SHA-1 and Application to the PGP Web of Trust SHA-1 is a Shambles PGP keys, software security, and much more threatened by new SHA1 exploit | Ars Technica New SHA-1 Attack - Schneier on Security  要約としては Bruce Schneier さんの記事が分かりやすいので，これを起点に紹介していく。\nハッシュ値の衝突問題 （「SHA-1 衝突問題： 廃止の前倒し」からの抜粋）\n暗号技術におけるハッシュ関数とは，以下の機能を持ったアルゴリズムである\n 任意のデータ列を一定の長さのデータ列（ハッシュ値）に「要約」する ハッシュ値から元のデータ列を推測できない ひとつのハッシュ値に対して複数のデータ列が（実時間で）見つからない  ハッシュ関数はメッセージ認証符号（Message Authentication Code; MAC）や電子署名（digital signature）の中核技術のひとつであり，データの「完全性（Integrity）」を担保する重要な要素である。 特に3番目の「ひとつのハッシュ値に対して複数のデータ列が（実時間で）見つからない」という機能が破られると，そのハッシュ関数では完全性を担保できなくなってしまう。 これを「ハッシュ値の衝突問題」という。\nSHA-1 ハッシュ値を力づくで攻略してみる SHA-1 における「ハッシュ値の衝突問題」は2004年まで遡るが，当時の攻略法は SHA-1 アルゴリズムの危殆化を狙ったもので，しかもその後の進展は殆どなかった。\nこの状況が変わったのが2015年の “freestart collisions for SHA-1” 論文である。\n SHA-1 衝突問題： 廃止の前倒し  ここで初めて「SHA-1 ハッシュ値を力づくで攻略」できる可能性が示された。 さらに2017年には Google によって最初の SHA-1 衝突例が公表された。\n 最初の SHA-1 衝突例  今回の “SHA-1 is a Shambles” の注目点は\n “chosen-prefix collision for SHA-1” なる手法により，衝突可能なデータを用意する際の自由度が高い ハッシュ値を攻略する際の計算機パワーの調達コストが比較的実用的なレベルまで下がった  の2つである。 特に2番目が重要で， “Nvidia GTX 1060GPU” × 900 の構成で2ヶ月ほどで攻略できたらしい。 コストにして 45k USD だそうだ1。\nOpenPGP / GnuPG は既に SHA-1 を捨てつつある “SHA-1 is a Shambles” では GnuPG が生成する公開鍵への電子署名をターゲットにしているが，実は現行の GnuPG 2.2 系は既に SHA-1 を捨てつつあり，電子署名に使うハッシュ関数の既定は SHA256 である（“SHA-1 is a Shambles” で指摘されているのはレガシー・バージョンの 1.4 系のほう）。\nたとえば私が git コミットへの署名などで普段遣いしている OpenPGP 鍵は2013年に作ったものだが，鍵への署名は SHA256 で行っている。 私の公開鍵をチェックするには以下のコマンドを実行すればよい（何気に拙作の gpgpdump を宣伝しておくw）。\n$ wget https://baldanders.info/pubkeys/spiegel.asc -O - | gpgpdump また，次期 OpenPGP 標準となる RFC 4880bis では新しい V5 パケットを策定中だが，鍵指紋（key fingerprint）に使うハッシュ関数の既定が SHA256 になるようだ。 RFC 4880bis が正式に RFC 標準として公開されれば，かつての MD5 と同じく， SHA-1 は後方互換性のためだけに残されることになるだろう2。\nOpenPGP の実装は GnuPG だけではなく，今やシマンテック社のおまけプロダクトに成り下がった PGP をはじめ JsvaScript や Rust などによる実装がある。 これらの実装が SHA-1 をどのように取り扱っているかは分からない。 どなたか教えて！\nGit のコミット・ハッシュはどうなるのか おそらく今回の件でもっとも議論を呼ぶのは git なんじゃないだろうか。 Git のコミット・ハッシュは SHA-1 を使って行われるが，ハッシュ値の衝突が比較的簡単にできるようになれば，ひとつのコミット・ハッシュに対して複数のコミットが重複してしまうという問題が現実的になるかもしれない（ならないかもしれない）。\nただ，コミットへの電子署名が正しく運用されているなら，なりすましに対してはある程度は抑止（防止ではない）できるだろう。\nなので，個人的にはあまり心配はしていない。 Git の今後の活躍にご期待ください，といったところだろうか（笑）\nブックマーク  OpenPGP で利用可能なアルゴリズム（RFC 4880bis 対応版）  参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n   単純に 1 USD = 110 JPY とするなら 45k USD = 4.95M JPY ほど。まぁ五百万円以下で攻略できてしまうわけですな。 \u0026#x21a9;\u0026#xfe0e;\n RFC 4880bis では SHA-1 は “SHOULD NOT create messages” となる。GnuPG 2.2.18 以降では，これが前倒しで実装されたわけだ。ちなみに GnuPG 2.2 系では MD5 は既にサポートされていない（1.4 系があるため）。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-01-05 のブックマーク",
      "section": "bookmarks",
      "description": "「APOD: 2019 December 28 - A Distorted Sunrise Eclipse」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/01/05-bookmarks/",
      "published": "2020-01-05T12:12:36+00:00",
      "update": "2020-01-05T12:13:09+00:00",
      "content": "リリース情報  Hugo 0.62.1: A couple of Bug Fixes | Hugo  セキュリティ＆プライバシー関連  数多くのRuckus製Wi-Fiルーターに脆弱性の報告 | TechCrunch Japan 合法だからといって適正だとは限らない | TechCrunch Japan あの「たまごっち」をヒントに開発されたWi-Fiハッキングが可能な電子ペット「Pwnagotchi」 - GIGAZINE 2019年末に起きた複数の観光協会サイト改ざんについてまとめてみた - piyolog Chrome extension caught stealing crypto-wallet private keys | ZDNet  Chrome Extension Stealing Cryptocurrency Keys and Passwords - Schneier on Security    天文関連  APOD: 2019 December 28 - A Distorted Sunrise Eclipse Alone in a Crowded Milky Way - Scientific American  ブログ: 天の川銀河にある文明は私たちだけか    知財関連  All DMCA Notices Filed Against TorrentFreak in 2019 Were Bogus - TorrentFreak  その他  圏論と学びをめぐる往復書簡 | talk.hyuki.net How an Alzheimer’s ‘cabal’ thwarted progress toward a cure - STAT  ブログ: アルツハイマー病の「陰謀」が何十年もの間治療法の進歩を妨げたという悲惨な物語   元Googleのポリシー責任者が人権を軽視した社内事情を揶揄 – TechCrunch Japan Hugo Modulesとは | Hugo 入門 / 解説 | nasust dev blog インターネット分断時代にあってGoogleの影響力は急速に失われつつある | TechCrunch Japan アイザック・アシモフ生誕100年を迎えて | TechCrunch Japan  "
    },
    {
      "title": "Hugo で簡易データベースを構成する",
      "section": "remark",
      "description": "拙作 books-data にはレビュー結果を JSON 形式のログファイルに出力する機能があるので，そのファイルを Hugo の data ディレクトリに置いて Hugo 環境で利用する。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/review-database-with-hugo/",
      "published": "2020-01-04T13:53:33+00:00",
      "update": "2020-01-04T13:54:33+00:00",
      "content": "Hugo と拙作「書籍データ取得ツール books-data」を組み合わせて書籍等のレビュー・データを格納する簡易データベースを構成することを考える。\nつっても難しい話じゃ全然なくて， books-data にはレビュー結果を JSON 形式のログファイルに出力する機能があるので，そのファイルを Hugo の data ディレクトリに置いて Hugo 環境で利用するだけの話。 随分前からそうしようと思ってたんだけど，一度構築した環境を変えるのはなかなかに面倒な気がして踏ん切りがつかなかったのよ。\nbooks-data のレビュー結果を data ディレクトリに格納する 拙作 books-data の review コマンドの使い方は以下の通り（books-data の詳しい使い方は「書籍データ取得ツール books-data」を参考にどうぞ）。\n$ books-data review -h Make review data Usage: books-data review [flags] [description] Flags: --bookpage-url string URL of book page -h, --help help for review --image-url string URL of book cover image --pipe Import description from Stdin -r, --rating int Rating of product --review-date string Date of review Global Flags: --access-key string Config: PA-API Access Key ID -c, --aozora-card string Aozora-bunko card no. -a, --asin string Amazon ASIN code --associate-tag string Config: PA-API Associate Tag --config string Config file (default /home/spiegel/.config/books-data/config.yaml) --debug for debug -i, --isbn string ISBN code --marketplace string Config: PA-API Marketplace (default \u0026#34;www.amazon.co.jp\u0026#34;) -l, --review-log string Config: Review log file (JSON format) --secret-key string Config: PA-API Secret Access Key -t, --template-file string Template file for formatted output review コマンドに -l オプションを付けるか設定ファイルに以下のように review-log を設定することでレビュー結果をファイルに格納できる。\nmarketplace:www.amazon.co.jpassociate-tag:mytag-20access-key:AKIAIOSFODNN7EXAMPLEsecret-key:1234567890review-log:/home/username/hugo-work/data/reviews.jsonここでは Hugo 環境の data ディレクトリに reviews.json のファイル名でレビュー結果を格納している。\nちなみに reviews.json ファイルの中身は，例えばこんな感じになる。\n[ { \u0026#34;Book\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;paapi\u0026#34;, \u0026#34;ID\u0026#34;: \u0026#34;4621300253\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)\u0026#34;, \u0026#34;URL\u0026#34;: \u0026#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22\\u0026linkCode=ogi\\u0026th=1\\u0026psc=1\u0026#34;, \u0026#34;Image\u0026#34;: { \u0026#34;URL\u0026#34;: \u0026#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg\u0026#34;, \u0026#34;Height\u0026#34;: 160, \u0026#34;Width\u0026#34;: 123 }, \u0026#34;ProductType\u0026#34;: \u0026#34;単行本（ソフトカバー）\u0026#34;, \u0026#34;Creators\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Alan A.A. Donovan\u0026#34;, \u0026#34;Role\u0026#34;: \u0026#34;著\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;Brian W. Kernighan\u0026#34;, \u0026#34;Role\u0026#34;: \u0026#34;著\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;柴田 芳樹\u0026#34;, \u0026#34;Role\u0026#34;: \u0026#34;翻訳\u0026#34; } ], \u0026#34;Publisher\u0026#34;: \u0026#34;丸善出版\u0026#34;, \u0026#34;Codes\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;ASIN\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;4621300253\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;EAN\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;9784621300251\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;ISBN\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;4621300253\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;ISBN\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;9784621300251\u0026#34; } ], \u0026#34;PublicationDate\u0026#34;: \u0026#34;2016-06-20\u0026#34;, \u0026#34;LastRelease\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Service\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;PA-APIv5\u0026#34;, \u0026#34;URL\u0026#34;: \u0026#34;https://affiliate.amazon.co.jp/assoc_credentials/home\u0026#34; } }, \u0026#34;Date\u0026#34;: \u0026#34;2018-10-20\u0026#34;, \u0026#34;Rating\u0026#34;: 5, \u0026#34;Star\u0026#34;: [ true, true, true, true, true ], \u0026#34;Description\u0026#34;: \u0026#34;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\u0026#34; } ] レビュー結果の一覧を表示する たとえば Hugo のテンプレートファイルでアイテムの名前の一覧を表示したいのであれば，こんな感じに記述すれば\n\u0026lt;ul\u0026gt;{{ range .Site.Data.reviews }} \u0026lt;li\u0026gt;{{ .Book.Title }}\u0026lt;/li\u0026gt; {{ end }}\u0026lt;/ul\u0026gt; 以下のような出力を得られる。\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 更に\n{{ range .Site.Data.reviews }} {{ partial \u0026#34;review-box.html\u0026#34; . }} {{ end }} として，テンプレート・ファイル layouts/partials/review-box.html の中身を\n\u0026lt;div class=\u0026#34;hreview\u0026#34;\u0026gt;{{ if .Book.Image.URL }} \u0026lt;div class=\u0026#34;photo\u0026#34;\u0026gt;{{ if .Book.URL }}\u0026lt;a class=\u0026#34;item url\u0026#34; href=\u0026#34;{{ .Book.URL }}\u0026#34;\u0026gt;{{ end }}\u0026lt;img src=\u0026#34;{{ .Book.Image.URL }}\u0026#34; width=\u0026#34;{{ with .Book.Image.Width }}{{ . }}{{ else }}110{{ end }}\u0026#34; alt=\u0026#34;photo\u0026#34;\u0026gt;{{ if .Book.URL }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/div\u0026gt;{{ end }} \u0026lt;dl class=\u0026#34;fn\u0026#34;\u0026gt; \u0026lt;dt\u0026gt;{{ if .Book.URL }}\u0026lt;a href=\u0026#34;{{ .Book.URL }}\u0026#34;\u0026gt;{{ end }}{{ .Book.Title }}{{ with .Book.SubTitle }} {{ . }}{{ end }}{{ with .Book.SeriesTitle }} ({{ . }}){{ end }}{{ if .Book.URL }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/dt\u0026gt;{{ if .Book.OriginalTitle }} \u0026lt;dd\u0026gt;原題: {{ .Book.OriginalTitle }}\u0026lt;/dd\u0026gt;{{ end }}{{ if .Book.FirstAppearance }} \u0026lt;dd\u0026gt;（初出: {{ .Book.FirstAppearance }}）\u0026lt;/dd\u0026gt;{{ end }}{{ if .Book.Creators }} \u0026lt;dd\u0026gt;{{ range $i, $v := .Book.Creators }}{{ if ne $i 0 }}, {{ end }}{{ $v.Name }} ({{ $v.Role }}){{ end }}\u0026lt;/dd\u0026gt;{{ end }} \u0026lt;dd\u0026gt;{{ if .Book.Publisher }}{{ .Book.Publisher }}{{ end }}{{ if .Book.PublicationDate }} {{ .Book.PublicationDate }}{{ end }}{{ if .Book.LastRelease }} (Release {{ .Book.LastRelease }}){{ end }}\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;{{ .Book.ProductType }}{{ if .Book.PublicDomain }} (Public Domain){{ end }}\u0026lt;/dd\u0026gt;{{ if .Book.Codes }} \u0026lt;dd\u0026gt;{{ range $i, $v := .Book.Codes }}{{ if ne $i 0 }}, {{ end }}{{ $v.Value }} ({{ $v.Name }}){{ end }}\u0026lt;/dd\u0026gt;{{ end }}{{ if gt .Rating 0 }} \u0026lt;dd\u0026gt;評価\u0026lt;abbr class=\u0026#34;rating fa-sm\u0026#34; title=\u0026#34;{{ .Rating }}\u0026#34;\u0026gt;{{ range .Star }}\u0026amp;nbsp;{{ if . }}\u0026lt;i class=\u0026#34;fas fa-star\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;{{ else }}\u0026lt;i class=\u0026#34;far fa-star\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;{{ end }}{{ end }}\u0026lt;/abbr\u0026gt;\u0026lt;/dd\u0026gt;{{ end }} \u0026lt;/dl\u0026gt; \u0026lt;p class=\u0026#34;description\u0026#34;\u0026gt;{{ .Description | safeHTML }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;powered-by\u0026#34;\u0026gt;reviewed by \u0026lt;a href=\u0026#39;#maker\u0026#39; class=\u0026#39;reviewer\u0026#39;\u0026gt;Spiegel\u0026lt;/a\u0026gt; on \u0026lt;abbr class=\u0026#34;dtreviewed\u0026#34; title=\u0026#34;{{ .Date }}\u0026#34;\u0026gt;{{ .Date }}\u0026lt;/abbr\u0026gt; (powered by {{ if .Book.Service.URL }}\u0026lt;a href=\u0026#34;{{ .Book.Service.URL }}\u0026#34;\u0026gt;{{ end }}{{ .Book.Service.Name }}{{ if .Book.Service.URL }}\u0026lt;/a\u0026gt;{{ end }})\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; とすればレビュー・カードの一覧ができる。\nアイテムを指定してレビュー結果を表示する books-data の review コマンドで出力されたレビュー結果データは .Book.Type および .Book.ID 要素で一意に識別できる。 そこで，\n{{ range where (where $.Site.Data.reviews \u0026#34;Book.ID\u0026#34; \u0026#34;4621300253\u0026#34;) \u0026#34;Book.Type\u0026#34; \u0026#34;paapi\u0026#34; }} {{ partial \u0026#34;review-box.html\u0026#34; . }} {{ end }} とすれば\n\u0026lt;div class=\u0026#34;hreview\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;photo\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;item url\u0026#34; href=\u0026#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22\u0026amp;amp;linkCode=ogi\u0026amp;amp;th=1\u0026amp;amp;psc=1\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg\u0026#34; width=\u0026#34;123\u0026#34; alt=\u0026#34;photo\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;dl class=\u0026#34;fn\u0026#34;\u0026gt; \u0026lt;dt\u0026gt;\u0026lt;a href=\u0026#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22\u0026amp;amp;linkCode=ogi\u0026amp;amp;th=1\u0026amp;amp;psc=1\u0026#34;\u0026gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)\u0026lt;/a\u0026gt;\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;丸善出版 2016-06-20\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;単行本（ソフトカバー）\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;評価\u0026lt;abbr class=\u0026#34;rating fa-sm\u0026#34; title=\u0026#34;5\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026lt;i class=\u0026#34;fas fa-star\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026amp;nbsp;\u0026lt;i class=\u0026#34;fas fa-star\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026amp;nbsp;\u0026lt;i class=\u0026#34;fas fa-star\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026amp;nbsp;\u0026lt;i class=\u0026#34;fas fa-star\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026amp;nbsp;\u0026lt;i class=\u0026#34;fas fa-star\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/abbr\u0026gt;\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;p class=\u0026#34;description\u0026#34;\u0026gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;powered-by\u0026#34;\u0026gt;reviewed by \u0026lt;a href=\u0026#39;#maker\u0026#39; class=\u0026#39;reviewer\u0026#39;\u0026gt;Spiegel\u0026lt;/a\u0026gt; on \u0026lt;abbr class=\u0026#34;dtreviewed\u0026#34; title=\u0026#34;2018-10-20\u0026#34;\u0026gt;2018-10-20\u0026lt;/abbr\u0026gt; (powered by \u0026lt;a href=\u0026#34;https://affiliate.amazon.co.jp/assoc_credentials/home\u0026#34;\u0026gt;PA-APIv5\u0026lt;/a\u0026gt;)\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n のようにアイテムを指定して表示することができる。\nこれをもう少し一般化して shortcode として layouts/shortcodes/review-paapi.html を\n{{ $id := index .Params 0 }} {{ range where (where $.Site.Data.reviews \u0026#34;Book.ID\u0026#34; $id) \u0026#34;Book.Type\u0026#34; \u0026#34;paapi\u0026#34; }} {{ partial \u0026#34;review-box.html\u0026#34; . }} {{else}}\u0026lt;p\u0026gt;No data (paapi:{{ $id }})\u0026lt;/p\u0026gt;{{ end }} と定義すれば\n{{% review-paapi \u0026#34;4621300253\u0026#34; %}} \u0026lt;!-- プログラミング言語Go --\u0026gt; で全く同じ結果を得られる。\nリモートの JSON データを利用する 今回は data ディレクトリ上に JSON ファイルを置いて利用する方法を紹介したが，リモートにある JSON データを直接利用することもできる。 こんな感じで JSON データを取得できるようだ。\n{{ $dataJ := getJSON \u0026#34;url\u0026#34; }} ビルドする際にリモートサーバとのやり取りがボトルネックになる気がするが，色々と使い道はあるだろう。\n"
    },
    {
      "title": "ぼくがかんがえたさいきょうの Hugo Shortcodes",
      "section": "remark",
      "description": "Hugo 0.62 用に自作 shortcode を整理した。以下にいくつか紹介しておこう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/my-hugo-shortcodes/",
      "published": "2020-01-03T06:02:51+00:00",
      "update": "2020-01-03T12:58:37+00:00",
      "content": "今回は Hugo に関する小ネタをいくつかお送りする。\nHugo v0.60 から markdown パーサの既定が yuin/goldmark になった。\n Hugo v0.60 から既定の Markdown パーサが Goldmark になったようだ  yuin/goldmark はきちんと CommonMark に準拠していて，そこには好感が持てるのだが，見方を変えるとあまり融通の効かないパーサであるとも言える。 たとえば russross/blackfriday では設定で target=\u0026quot;_blank\u0026quot; や rel=\u0026quot;nofollow\u0026quot; といった属性値を \u0026lt;a\u0026gt; 要素に付与できたが， yuin/goldmark にはこれに対応するオプションがない。\nMarkdown Render Hooks そこで Hugo v0.62 で “Markdown Render Hooks” という仕組みが用意された（yuin/goldmark パーサ使用時のみ有効）。 これは，簡単にいうと画像やリンクの HTML レンダリングを横取りして自前のテンプレートを差し込むものである。\n例を挙げて説明しよう。\nたとえば以下のような markdown 記述がある。\n[Hugo](https://gohugo.io/ \u0026#34;The world’s fastest framework for building websites\u0026#34;) はチョー簡単！ これに対して yuin/goldmark パーサを使って HTML レンダリングを行うと以下のようになる。\n\u0026lt;a href=\u0026#34;https://gohugo.io/\u0026#34; title=\u0026#34;The world’s fastest framework for building websites\u0026#34;\u0026gt;Hugo\u0026lt;/a\u0026gt; はチョー簡単！ この \u0026lt;a\u0026gt; 要素に属性値 target=\u0026quot;_blank\u0026quot; を付加することを考える。\nまずは Hugo の環境で layouts/_default/_markup ディレクトリを作成し，その中に render-link.html ファイルを置く。 render-link.html ファイルの中身はこんな感じでどうだろう。\n\u0026lt;a href=\u0026#34;{{ .Destination | safeURL }}\u0026#34; target=\u0026#34;_blank\u0026#34;{{ with .Title }} title=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt;{{ .Text | safeHTML }}\u0026lt;/a\u0026gt; これで先程の markdown 記述は\n\u0026lt;a href=\u0026#34;https://gohugo.io/\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;The world’s fastest framework for building websites\u0026#34;\u0026gt;Hugo\u0026lt;/a\u0026gt; はチョー簡単！ となった。 ちゃんと target=\u0026quot;_blank\u0026quot; が付加されているのがお分かりだろうか。\n画像も同様にカスタマイズできる。 たとえば layouts/_default/_markup/render-image.html ファイルを用意して\n\u0026lt;img src=\u0026#34;{{ .Destination | safeURL }}\u0026#34; alt=\u0026#34;{{ .PlainText }}\u0026#34;{{ with .PlainText }} title=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt; としておけば\n![avatar](/images/avatar.jpg) という記述に対して\n\u0026lt;img src=\u0026#34;/images/avatar.jpg\u0026#34; alt=\u0026#34;avatar\u0026#34; title=\u0026#34;avatar\u0026#34;\u0026gt; と title 属性を付加することができる。\nなお render-link.html および render-image.html テンプレートファイルは1つのサイトについて（今のところ）ひとつずつしか定義でず，サイト全体に適用されてしまうので注意が必要だ（テンプレートの条件分け等の機能を使うことはできる）。\n.RenderString 関数 任意の文字列を markdown テキストとして HTML 形式へレンダリングする関数としては markdownify があったが，新たに Hugo 0.62 で .RenderString 関数が追加された。 これまでの markdownify 関数との違いは以下の通り。\n .RenderString 関数は Page 変数のメソッドとして実装されている パーサを指定できる（既定値はそのページの形式とパーサ）  パーサが yuin/goldmark であれば Markdown Render Hooks が適用される   入力テキストを強制的にブロック要素として展開することができる  たとえば Org-mode 形式による\n{{ \u0026#34;/italic org mode/\u0026#34; | $.Page.RenderString (dict \u0026#34;display\u0026#34; \u0026#34;block\u0026#34; \u0026#34;markup\u0026#34; \u0026#34;org\u0026#34;) }} という記述に対して\n\u0026lt;p\u0026gt; \u0026lt;em\u0026gt;italic org mode\u0026lt;/em\u0026gt; \u0026lt;/p\u0026gt; などと展開される。\n上の例のように，パラメータには display と markup があり（dict 関数を使って）連想配列にして渡す。\ndisplay が取り得る値は以下の通り。\n   display 値 内容     inline 既定値   block インライン・テキストと推定される場合でも強制的に \u0026lt;p\u0026gt; などのブロック要素として展開する    markup が取り得る値は以下の通り。\n   markup 値 内容     markdown 既定の markdown パーサ1   goldmark Markdown として yuin/goldmark パーサを使用   blackfriday Markdown として russross/blackfriday パーサを使用   org Org-mode として niklasfasching/go-org パーサを使用   asciidoc AsciiDoc として処理（要 AsciiDoc 環境）   rst reStructuredText として処理（要 RST 環境）   pandoc Pandoc として処理（要 Pandoc 環境）   html 素通し    ぼくがかんがえたさいきょうの Hugo Shortcodes 以上を踏まえて自作 shortcode を整理した。 以下にいくつか紹介しておこう。\nルビを振る まずは軽くルビを振るところから。\nshortcodes/ruby.html:\n\u0026lt;ruby\u0026gt;\u0026lt;rb\u0026gt;{{ .Inner }}\u0026lt;/rb\u0026gt;\u0026lt;rp\u0026gt; (\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;{{ index .Params 0 }}\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;) \u0026lt;/rp\u0026gt;\u0026lt;/ruby\u0026gt; 入力：\n{{\u0026lt; ruby \u0026#34;それはさておき\u0026#34; \u0026gt;}}閑話休題{{\u0026lt; /ruby \u0026gt;}} 出力：\n\u0026lt;ruby\u0026gt;\u0026lt;rb\u0026gt;閑話休題\u0026lt;/rb\u0026gt;\u0026lt;rp\u0026gt; (\u0026lt;/rp\u0026gt;\u0026lt;rt\u0026gt;それはさておき\u0026lt;/rt\u0026gt;\u0026lt;rp\u0026gt;) \u0026lt;/rp\u0026gt;\u0026lt;/ruby\u0026gt; 閑話休題 (それはさておき)  図を figure 要素で囲む 実は Hugo の組み込み shortcode に figure というのがあって図を \u0026lt;figure\u0026gt; 要素で囲んでキャプションを付けれるようになってるんだけど，作りが気に食わないので自作したのだった。\nshortcodes/fig-img.html:\n\u0026lt;figure style=\u0026#39;margin:0 auto;text-align:center;\u0026#39;\u0026gt; {{ with .Get \u0026#34;link\u0026#34; }}\u0026lt;a href=\u0026#34;{{ . }}\u0026#34;\u0026gt;{{ end }}\u0026lt;img src=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}\u0026#34; srcset=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}{{ with .Get \u0026#34;width\u0026#34; }}{{ . }}{{ else }}500{{ end }}w\u0026#34; sizes=\u0026#34;(min-width:600px) 500px, 80vw\u0026#34;{{ if .Get \u0026#34;title\u0026#34; }} alt=\u0026#34;{{ .Get \u0026#34;title\u0026#34; }}\u0026#34;{{ else if .Get \u0026#34;alt\u0026#34; }} alt=\u0026#34;{{ .Get \u0026#34;alt\u0026#34; }}\u0026#34;{{ else }} alt=\u0026#34;\u0026#34;{{ end }}\u0026gt;{{ with .Get \u0026#34;link\u0026#34; }}\u0026lt;/a\u0026gt;{{ end }}{{ if .Get \u0026#34;title\u0026#34; }} \u0026lt;figcaption\u0026gt;{{ with .Get \u0026#34;link\u0026#34; }}\u0026lt;a href=\u0026#34;{{ . }}\u0026#34;\u0026gt;{{ end }}{{ .Get \u0026#34;title\u0026#34; }}{{ with .Get \u0026#34;link\u0026#34; }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/figcaption\u0026gt; {{ end }}\u0026lt;/figure\u0026gt; 入力：\n{{\u0026lt; fig-img src=\u0026#34;https://photo.baldanders.info/flickr/image/8113077_o.png\u0026#34; title=\u0026#34;SHIMENAWA\u0026#34; link=\u0026#34;https://photo.baldanders.info/flickr/8113077/\u0026#34; width=\u0026#34;768\u0026#34; \u0026gt;}} 出力：\n\u0026lt;figure style=\u0026#39;margin:0 auto;text-align:center;\u0026#39;\u0026gt; \u0026lt;a href=\u0026#34;https://photo.baldanders.info/flickr/8113077/\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://photo.baldanders.info/flickr/image/8113077_o.png\u0026#34; srcset=\u0026#34;https://photo.baldanders.info/flickr/image/8113077_o.png 768w\u0026#34; sizes=\u0026#34;(min-width:600px) 500px, 80vw\u0026#34; alt=\u0026#34;SHIMENAWA\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;figcaption\u0026gt;\u0026lt;a href=\u0026#34;https://photo.baldanders.info/flickr/8113077/\u0026#34;\u0026gt;SHIMENAWA\u0026lt;/a\u0026gt;\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt;  SHIMENAWA  \u0026lt;img\u0026gt; 要素の各属性値はこのブログのレイアウトに合わせてチューニングしているので，そのままでは（多分）使えない。 あしからず。\n引用を figure 要素で囲んで引用元を指示する 引用ブロックは \u0026lt;blockquote\u0026gt; 要素で囲めば「意味」は通るし，実際に markdown の引用（\u0026gt;）も \u0026lt;blockquote\u0026gt; 要素内に展開するようになっている。 しかしこれでは「引用元」の指示が曖昧になってしまう。\nそこで \u0026lt;blockquote\u0026gt; 要素を更に \u0026lt;figure\u0026gt; 要素で囲んでキャプションを付加することで引用元を指示できるようにした。\nshortcodes/fig-quote.html:\n{{ with .Get \u0026#34;lang\u0026#34; }}\u0026lt;figure lang=\u0026#34;{{ . }}\u0026#34;\u0026gt;{{ else }}\u0026lt;figure\u0026gt;{{ end }} \u0026lt;blockquote\u0026gt;{{ with .Get \u0026#34;type\u0026#34; }}{{ $.Inner | $.Page.RenderString (dict \u0026#34;markup\u0026#34; .) }}{{ else }}{{ .Inner }}{{ end }}\u0026lt;/blockquote\u0026gt;{{ if .Get \u0026#34;title\u0026#34;}} \u0026lt;figcaption\u0026gt;via \u0026lt;q\u0026gt;{{ with .Get \u0026#34;link\u0026#34;}}\u0026lt;a href=\u0026#34;{{.}}\u0026#34;\u0026gt;{{ end }}{{ .Get \u0026#34;title\u0026#34; }}{{ with .Get \u0026#34;link\u0026#34;}}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/q\u0026gt;\u0026lt;/figcaption\u0026gt; {{ end }}\u0026lt;/figure\u0026gt; 入力：\n{{\u0026lt; fig-quote title=\u0026#34;The Two Myths of the Internet | WIRED\u0026#34; link=\u0026#34;https://www.wired.com/story/the-two-myths-of-the-internet/\u0026#34; lang=\u0026#34;en\u0026#34; \u0026gt;}} \u0026lt;q\u0026gt;Technologies determine nothing. Technologies influence everything\u0026lt;/q\u0026gt;. {{\u0026lt; /fig-quote \u0026gt;}} 出力：\n\u0026lt;figure lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;blockquote\u0026gt; \u0026lt;q\u0026gt;Technologies determine nothing. Technologies influence everything\u0026lt;/q\u0026gt;. \u0026lt;/blockquote\u0026gt; \u0026lt;figcaption\u0026gt;via \u0026lt;q\u0026gt;\u0026lt;a href=\u0026#34;https://www.wired.com/story/the-two-myths-of-the-internet/\u0026#34;\u0026gt;The Two Myths of the Internet | WIRED\u0026lt;/a\u0026gt;\u0026lt;/q\u0026gt;\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt;  Technologies determine nothing. Technologies influence everything.  via The Two Myths of the Internet | WIRED  これで「引用」の最低要件は満たせるかな。\n汎用 figure 環境 上記以外に汎用的に \u0026lt;figure\u0026gt; 環境を使うための shortcode。\nshortcodes/fig-gen.html:\n\u0026lt;figure style=\u0026#39;margin:0 auto;text-align:center;\u0026#39;\u0026gt;{{ with .Get \u0026#34;type\u0026#34; }}{{ $.Inner | $.Page.RenderString (dict \u0026#34;markup\u0026#34; .) }}{{ else }}{{ .Inner }}{{ end }}{{ if .Get \u0026#34;title\u0026#34;}} \u0026lt;figcaption\u0026gt;{{ with .Get \u0026#34;link\u0026#34;}}\u0026lt;a href=\u0026#34;{{.}}\u0026#34;\u0026gt;{{ end }}{{ .Get \u0026#34;title\u0026#34; }}{{ with .Get \u0026#34;link\u0026#34;}}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/figcaption\u0026gt; {{ end }}\u0026lt;/figure\u0026gt; 入出力例は割愛する。\n汎用 div 環境 これはもっと素朴に \u0026lt;div\u0026gt; で囲むだけの shortcode。\nshortcodes/div-gen.html:\n\u0026lt;div{{ with .Get \u0026#34;class\u0026#34; }} class=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ with .Get \u0026#34;height\u0026#34; }} style=\u0026#34;height:{{ . }};\u0026#34;{{ end }}{{ with .Get \u0026#34;lang\u0026#34; }} lang=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt;{{ with .Get \u0026#34;type\u0026#34; }}{{ $.Inner | $.Page.RenderString (dict \u0026#34;markup\u0026#34; .) }}{{ else }}{{ .Inner }}{{ end }}\u0026lt;/div\u0026gt; class を指定できる他， height で高さを指定できる。 ネタバレ防止の行間稼ぎでよく使う手ですな（笑）\nこれも入出力例は割愛する。\nブックマーク  Hugo Christmas Edition! | Hugo Markdown Render Hooks - リンクや画像のテンプレートを作成する仕組み | Hugo 入門 / 解説 | nasust dev blog .RenderString | Markdownの文字列をHTMLに変換する | Hugo 入門 / 解説 | nasust dev blog    既定の markdown パーサは yuin/goldmark だが config.toml 等の設定で変更することができる。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "私達の10年",
      "section": "remark",
      "description": "考えるまでもなく今年は2020年で，この10年を振り返る節目の年である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/our-decade/",
      "published": "2020-01-01T11:20:37+00:00",
      "update": "2020-01-03T12:54:27+00:00",
      "content": "なんとなく予感がしてたけど，やはり風邪を引いてしまった。 昨夜に前回の記事を書いて以降，飯時以外はずっと寝ている。 おかげで年末年始のテレビから完全に解脱（笑）できました。 ケータイから元日の Twitter や Facebook の TL を見ても「みんなテレビで消耗してるんだなぁ」という感想しか浮かばない。\n昨年痛感したのが「日常に忙殺されることの恐ろしさ」で，これはほとんど思考停止に近い状況だった。 そんな状況を予想し，安易に知ったかぶりしないで「政治的無関心」を年次目標に掲げた昨年初の私を誰か褒めてくれ（笑）\n故に「今年の目標も『政治的無関心』でいっか」と思ったのだが，以下の記事を読んで今年は少し考え方を変えることにした。\n The Two Myths of the Internet | WIRED ブログ: 2つのインターネットの神話  相変わらず WIRED.jp はこういう重要な記事の翻訳はしないのな。 どのみち WIRED.jp は全く参照しなくなったので別にいいんだけど。\n考えてみれば，いや考えるまでもなく今年は2020年で，この10年を振り返る節目の年である。 そしてネット関連でこの10年最大のトピックは上の記事でも挙げられているように\n アラブの春（から続く中東の混乱） スノーデンによる NSA 内部告発 監視資本主義による個人の搾取  の3つだろう。\n白田秀彰さんの「グリゴリの捕縛」に引きつけて考えるなら「アラブの春」は暴力，「スノーデンによる NSA 内部告発」は情報力，「監視資本主義による個人の搾取」は経済力に対して，ネットや技術がどのような役割を演じたかを端的に物語っている。\n私は上の記事の内容全てに同意するわけではないが，少なくとも Technologies determine nothing. Technologies influence everything というフレーズについてはそのとおりだと思う。\nこの10年を振り返る上で日本語圏には優れた文献がある。 yomoyomo さんによる『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』だ。 分厚い内容で一気に読むと頭がクラクラするが，必読書であることは間違いないだろう。\nというわけで，私の今年の目標は少し上方修正して\n お祭り騒ぎ (東京オリンピック) で消耗しない これからの10年を見据えた考察（と行動）を行う  とする。 まぁ，その前に日常に忙殺される現在の状況を何とかしないといけないのだが，これが一番難しい。\n参考図書  OUR DECADE Godiego (メインアーティスト) COLUMBIA (Release 2013-08-07) MP3 ダウンロード B00E6NPCBO (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  私が10代の頃にもっとも影響を受けたアルバムのひとつ。生物年齢的にも中二病まっしぐらだった私に深く刺さった「かっこいい」アルバムだったのだ。\nreviewed by Spiegel on 2020-01-01 (powered by PA-APIv5)\n  仮面ライダーディケイド 梶淳 (プロデュース), 白倉伸一郎 (プロデュース), 武部直美 (プロデュース), 和佐野健一 (プロデュース)  Prime Video B012DZ1NUA (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  今見ても謎の作品。井上正大の出世作（？）であの二眼レフ・トイカメラの出世作でもある（笑）\nreviewed by Spiegel on 2020-01-01 (powered by PA-APIv5)\n  もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo (著) 達人出版会 2017-12-25 (Release 2019-03-02) デジタル書籍 infoshare2 (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  WirelessWire News 連載の書籍化。感想はこちら\nreviewed by Spiegel on 2018-12-31\n  情報共有の未来 yomoyomo (著) 達人出版会 2011-12-30 (Release 2012-02-19) デジタル書籍 infoshare (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  同名ブログの書籍化。感想はこちら。\nreviewed by Spiegel on 2012-11-03\n  グリゴリの捕縛 白田 秀彰 ()  2001-11-26 (Release 2014-09-17) 青空文庫 4307 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30 (powered by aozorahack)\n "
    },
    {
      "title": "2020年の祝日休日",
      "section": "remark",
      "description": "今年はオリンピックのせいで祝日が変則になっている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/2020-holidays/",
      "published": "2019-12-31T21:51:58+00:00",
      "update": "2020-01-03T12:54:27+00:00",
      "content": "みなさま，あけましておめでとうございます。 年末ギリギリまでドタバタしてたので全然「明けた」気がしないけど，まぁ今年もよろしくお願いします。\n今年はオリンピックのク◯野郎のせいで祝日が変則になっている。 そこで，覚え書きとして2020年の祝日休日について記しておく。 ホンマ，面倒くさいったら\u0026hellip;\n2020年の「国民の祝日」およびその他の休日は以下の通り1。\n   祝日休日名 日付     元日 2020-01-01 (水)   成人の日 2020-01-13 (月)   建国記念の日 2020-02-11 (火)   天皇誕生日 2020-02-23 (日)   休日 2020-02-24 (月)   春分の日 2020-03-20 (金)   昭和の日 2020-04-29 (水)   憲法記念日 2020-05-03 (日)   みどりの日 2020-05-04 (月)   こどもの日 2020-05-05 (火)   休日 2020-05-06 (水)   海の日 2020-07-23 (木)   スポーツの日 2020-07-24 (金)   山の日 2020-08-10 (月)   敬老の日 2020-09-21 (月)   秋分の日 2020-09-22 (火)   文化の日 2020-11-03 (火)   勤労感謝の日 2020-11-23 (月)    つまりオリンピック期間に寄せて海の日，山の日，スポーツの日が変更になっているわけやね2。\n 「国民の祝日に関する法律」が改正され、平成32年から「体育の日」は「スポーツの日」となります。また、平成32年に限り、「海の日」は7月23日に、「スポーツの日」は7月24日に、「山の日」は8月10日となります via 平成32（2020）年暦要項の発表 | 国立天文台(NAOJ)  おかげで10月は祝日がない orz\nちなみに日本の祝日休日は毎年2月1日に国立天文台から翌年のものが発表される。 したがって国立天文台の発表内容が正式である。 ついでに言うと，祝日を含む暦象について国立天文台から Google カレンダーのデータも公開されているので，インポートしておくとよいだろう。\nブックマーク  カレンダーに祝日を入れたいなら国立天文台へ行けばいいじゃない 2020年の主な暦象  参考図書  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n   「国民の祝日」は休日となる。また「「国民の祝日」が日曜日に当たるときは、その日後においてその日に最も近い「国民の祝日」でない日を休日とする」（「国民の祝日に関する法律」より）。 \u0026#x21a9;\u0026#xfe0e;\n 海の日は7月第3月曜日，山の日は8月11日，スポーツの日は10月第2月曜日が本来の日付。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ATOM エディタでリモートのディレクトリ・ファイルを同期する",
      "section": "remark",
      "description": "remote-sync が設定や操作がシンプルなので，これを使うことにした。 ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/12/remote-sync-with-atom/",
      "published": "2019-12-31T10:13:34+00:00",
      "update": "2019-12-31T10:14:55+00:00",
      "content": "まぁ，独りで作業するなら git で管理するほうが安全なのだが，リモートのサーバとちょっとしたファイルのやり取りをするために FileZilla を起動して接続するのは大袈裟でかったるいなぁ思い始め「そういや ATOM のパッケージでリモートのファイルを直接編集できるパッケージがなかったっけ？」と探してみた。\nremote-ftp を推す記事が多かったので最初はこれを導入してみたが，何故か sftp で接続できんのよ。 しょうがないので他のパッケージを漁ってみたのだが remote-sync が設定や操作がシンプルなので，これを使うことにした。 厳密にはリモートのファイルを直接編集するわけではないのだが，まぁいいや。\nまずはローカル側とリモート側で同期するディレクトリを作成する。\nローカル側で作成したディレクトリをプロジェクトのルートとして ATOM を起動し，コマンドパレットから “Remote Sync: Configure” を選択するか Tree View のコンテキストメニューから “Remote Sync” → “Configure” と選択する。\n すると以下の設定画面が表示されるので必要な情報を設定して [Save] する。\n これで準備完了。 “uploadOnSave” にチェックが入っていればセーブするたびにリモートのファイルを更新してくれる。 その他の機能についてはコマンドパレットまたはコンテキストメニューから起動できる1。\nちなみに設定内容はロカール側のプロジェクト・ディレクトリ直下の .remote-sync.json に格納されている。 中身はこんな感じ。\n{ \u0026#34;logger\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Remote Sync\u0026#34; }, \u0026#34;uploadOnSave\u0026#34;: true, \u0026#34;useAtomicWrites\u0026#34;: true, \u0026#34;deleteLocal\u0026#34;: true, \u0026#34;hostname\u0026#34;: \u0026#34;example.com\u0026#34;, \u0026#34;port\u0026#34;: \u0026#34;2222\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;/home/username/docs/sync\u0026#34;, \u0026#34;ignore\u0026#34;: [ \u0026#34;.remote-sync.json\u0026#34;, \u0026#34;.git/**\u0026#34; ], \u0026#34;username\u0026#34;: \u0026#34;username\u0026#34;, \u0026#34;watch\u0026#34;: [], \u0026#34;useAgent\u0026#34;: true, \u0026#34;transport\u0026#34;: \u0026#34;scp\u0026#34; } このファイルさえあれば任意のディレクトリを同期ディレクトリにできるわけだ。\nとりあえず，こんなもんかな。\n  Diff ツールについては初期状態では何も指定されていないので remote-sync の設定で任意のツールを指定する。個人的には KDiff3 がオススメ。 Ubuntu なら apt コマンドで導入できる。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2019-12-28 のブックマーク",
      "section": "bookmarks",
      "description": "「ロシア、インターネットからの自国切り離し実験に成功」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/12/28-bookmarks/",
      "published": "2019-12-28T10:29:55+00:00",
      "update": "2019-12-28T10:31:41+00:00",
      "content": "リリース情報  Hugo Christmas Edition! | Hugo  Markdown Render Hooks - リンクや画像のテンプレートを作成する仕組み | Hugo 入門 / 解説 | nasust dev blog .RenderString | Markdownの文字列をHTMLに変換する | Hugo 入門 / 解説 | nasust dev blog    バベルのインターネット  ﻿ロシア、インターネットからの自国切り離し実験に成功 - ZDNet Japan ウィキペディア禁止は違憲とトルコ憲法裁判所が裁定 | TechCrunch Japan 「和製プラットフォーマー」を「誤爆」する「GAFA」規制案：大西康之 | 記事 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト ウィキメディア財団がインドが提案する仲介者責任規則に深い懸念を表明 | TechCrunch Japan  セキュリティ＆プライバシー関連  Hugo's Security Model | Hugo 2億6,700万ユーザーの名前と電話番号がFacebookから流出 ～SMSスパムなどに使われる可能性 - PC Watch MIT Tech Review: ハッキングされた「ハッキング・チーム」 崩壊と再建のシナリオ オープンソースのSSOソフト最新版「OpenAM14」が公開\u0026ndash;パスワードレス化に対応 - ZDNet Japan ECサイト構築で多く利用されている「EC-CUBE」を用いたウェブサイトでの情報漏えい被害の増加について：IPA 独立行政法人 情報処理推進機構 Chinese hacker group caught bypassing 2FA | ZDNet  Chinese Hackers Bypassing Two-Factor Authentication - Schneier on Security    天文関連  暗いベテルギウス - 星のつぶやき 星食観測ハンドブック2020 発刊のお知らせ ニュース - アルマ望遠鏡、重力レンズ効果を受けない最遠の星形成銀河を発見 - アルマ望遠鏡  知財関連  EU調査：海賊版サイトの利用が大幅減少、ただし全容把握は難しく | P2Pとかその辺のお話R 人文・社会科学の学術図書のオープンアクセスを推進し、CCライセンスの出版物をダウンロードできるOAPENコンソーシアムを今さら知る - YAMDAS現更新履歴  その他  テックワーカーと消費者がテクノロジーを悪用した人権侵害を防ぐためにできること | P2Pとかその辺のお話R 強まるトルコ＝カタールの紐帯：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト 電子たばこによる肺疾患が減少傾向、原因はビタミンEアセテートか | TechCrunch Japan Lawrence Lessig: Being a Citizen is a Public Office, too | Internet Archive Blogs  ブログ: ローレンス・レッシグ: 市民であることも公職である   AWS、オープンソースベンダのライセンス変更による商用サービスの制限は「顧客を見ていない」と反論 － Publickey さよならFTP ～「Google Chrome 80」でFTP接続は非推奨に - 窓の杜 マイクロソフト、Rustベースのセキュアなプログラミング言語を探求中 - ZDNet Japan Predicting When P=NP is Resolved | Gödel's Lost Letter and P=NP  ブログ: P=NPがいつ解決されるかを予測する   WebAssembly版のTensorFlow.jsが登場、Webブラウザでの推論処理を10倍以上高速に実行 － Publickey ブログ: 非常に多くの日本人の子どもたちが学校に行くことを拒否する理由 Where Is My Mind? - Issue 79: Catalysts - Nautilus  ブログ: 心はどこにあるのか?   aozorablog » タロットの絵解キ／杖の組（Ａ・Ｅ・ウェイト／大久保ゆう訳） MIT Tech Review: 暗号通貨の電力消費問題、光コンピューティングは解決策になるか？ ビッグデータやAI倫理の問題を訴えてきたケイト・クロフォードの初の単著『Atlas of AI』が出る - YAMDAS現更新履歴 Why I love Coding in C // December 2019  ブログ: 私がCのコーディングを好きな理由   AIによる分散システム「Ray」を開発するAnyscaleが22億円超を調達 | TechCrunch Japan  "
    },
    {
      "title": "Google Fonts が日本語に対応してた",
      "section": "remark",
      "description": "これで日本語 Web フォントを指定するのに Early Access 版を使ったり，自前で巨大フォントファイルを用意しなくてもよくなったんだね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/12/japanese-fonts-by-google-cdn/",
      "published": "2019-12-21T23:03:36+00:00",
      "update": "2020-01-06T12:24:09+00:00",
      "content": "前回の記事を書いてて気付いたのだが， Google Fonts が正式に日本語に対応してるぢゃん！ おじさん気がつかなかったよ orz\n Google Fonts  これで日本語 Web フォントを指定するのに Early Access 版を使ったり，自前で巨大フォントファイルを用意しなくてもよくなったんだね。\nたとえば Web フォントを NOTO フォントで統一するなら \u0026lt;head\u0026gt; 要素内に\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;//fonts.googleapis.com/css?family=Noto+Sans+JP|Noto+Sans|Noto+Serif|Noto+Serif+JP\u0026amp;display=swap\u0026#34;\u0026gt; と記述すればよい1。 NOTO Sans の太字もご所望なら\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;//fonts.googleapis.com/css?family=Noto+Sans+JP:400,700|Noto+Sans:400,700|Noto+Serif|Noto+Serif+JP\u0026amp;display=swap\u0026#34;\u0026gt; という感じにウェイトを指定できる2。\nWeb ページ側のスタイルは，たとえば\nbody { font-family: \u0026#39;Noto Serif\u0026#39;, \u0026#39;Noto Serif JP\u0026#39;, serif; font-weight: 400; /* normal */ } h1, h2, h3, h4, h5, h6 { font-family: \u0026#39;Noto Sans\u0026#39;, \u0026#39;Noto Sans JP\u0026#39;, sans-serif; font-weight: 700; /* bold */ } こんな感じで記述していけばいいだろう。\nちなみにブラウザの設定によっては Google Fonts を追跡コードとみなしてブロックする場合があるので既定値（serif や sans-serif）の指定を忘れないこと。\nよしよし。 これでよーやくフォント周りの懸念がなくなった。\n【付録】 Google Fonts スタイルの中身 たとえば NOTO Sans のみを指定する場合は，スタイルシートの指定は以下のようになるが\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;//fonts.googleapis.com/css?family=Noto+Sans\u0026amp;display=swap\u0026#34;\u0026gt; 中身を見るとこんな感じになっている（一部のみ）。\n/* latin-ext */ @font-face { font-family: \u0026#39;Noto Sans\u0026#39;; font-style: normal; font-weight: 400; font-display: swap; src: local(\u0026#39;Noto Sans\u0026#39;), local(\u0026#39;NotoSans\u0026#39;), url(https://fonts.gstatic.com/s/notosans/v9/o-0IIpQlx3QUlC5A4PNr6zRAW_0.woff2) format(\u0026#39;woff2\u0026#39;); unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; } /* latin */ @font-face { font-family: \u0026#39;Noto Sans\u0026#39;; font-style: normal; font-weight: 400; font-display: swap; src: local(\u0026#39;Noto Sans\u0026#39;), local(\u0026#39;NotoSans\u0026#39;), url(https://fonts.gstatic.com/s/notosans/v9/o-0IIpQlx3QUlC5A4PNr5TRA.woff2) format(\u0026#39;woff2\u0026#39;); unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; } このように単一のフォント・データではなく，いくつかのサブセットに分けてダウンロードさせているようだ。 NOTO Sans のラテン文字は上の2つのようだが（他の文字のサブセットもある），日本語の NOTO Sans JP では，なんと！ 120に分割されていた。\n更に言うと， href 属性で指定される URL のクエリ部に display=swap がくっ付いているのに気づかれただろうが，これを指定すると @font-face ルールのプロパティとして font-display: swap; がセットされるようだ。\n不勉強で font-display については知らなかったのだが，このプロパティに swap がセットされていると Web フォントがロードされるまでの間，代替フォント（sans-serif など）で表示されるらしい。\nfont-display の仕様は割と最近にできたものらしく，対応していないブラウザも一部あるようだ（ここで対応ブラウザを確認できる）。\nちなみに Android 版 Firefox も font-display に対応しているのだが，フォントが入れ替わるたびに画面がちらつくのが鬱陶しい。 この辺は要改良ってところなんだろう。\n日本語フォントは巨大だが，このような仕組みを使って，できるだけストレスのないよう工夫されているわけだ。\nありがとう！\nブックマーク   日本語Webフォントを使用する際のアプローチについて | フロントエンドBlog | ミツエーリンクス : Web フォントで日本語を設定する際に参考になる\n  Web フォントに関する覚え書き\n  Web フォントに関する覚え書き（明朝体編）\n  結局 Noto Serif JP を Web フォントとして導入した : 自前で Web フォントをインストールしたときの話\n  Font Awesome 5.0.11 で Creative Commons アイコンに完全対応した\n    URL のクエリー部（? 以降の文字列）に | や : の文字を使うと W3C の Validator に怒られるのでご注意を。大抵はブラウザが上手く解釈してくれるので問題ないのだが。気になるなら %7c や %3a といったパーセント・エンコーディングに置き換えればよい。 \u0026#x21a9;\u0026#xfe0e;\n 400 とか 700 とかの値は CSS の font-weight に設定する数値。 font-weight の normal が 400 に相当する。ちなみに bold は 700。 bolder で 400 → 700 → 900 と太くなる。 lighter だと 400 → 100 と細くなる。普通の文章であれば 400 のみで十分だし，太字が必要な場合でも追加で 700 を用意しておけば問題ないだろう。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Hugo でスライド・サイトを立てる実験",
      "section": "remark",
      "description": "ちょろんとググってみたら reveal-hugo なる Hugo テーマがあって，内部では reveal.js を使ってスライドを制御しているらしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/12/slide-site-by-hugo/",
      "published": "2019-12-21T13:38:36+00:00",
      "update": "2019-12-21T13:44:40+00:00",
      "content": "来月のイベント用に資料をスライド形式で作ろうと思うのだが， MS Office は大昔に捨ててしまったし LibreOffice の Impress で書くというのも今更だしなぁ。\nできれば markdown で書いて VCS でドキュメント管理したい。\nで，ちょろんとググってみたら reveal-hugo なる Hugo テーマがあって，内部では reveal.js を使ってスライドを制御しているらしい。 これだよ，これ。\nHugo は静的サイト・ジェネレータなのでデプロイ先の自由度が高い。 さくらのレンタルサーバみたいな老舗でも GitHub Page や最近流行り（？）の Netlify でも大丈夫。 しかも Hugo にはサーバ・モードがあるのでローカル環境で試すこともできる。\nReveal.js テーマを自作するのでなければ通常版の Hugo で問題ない。 また reveal-hugo には reveal.js 一式がまるっと含まれているので別途のインストールは不要。 Node.js をインストールする必要もない。 簡単！\nでは，さっそく試してみよう。\nHugo 環境の構築 まずは適当なディレクトリで Hugo 環境を作成する。\n$ hugo new site hugo-slide Congratulations! Your new Hugo site is created in /home/username/hugo-env/hugo-slide. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. これで hugo-slide ディレクトリが作成される。 このディレクトリに入り git リポジトリとして初期化する。\n$ cd hugo-slide $ git init この時点でコミットしておけばいつでも元に戻せるので安心である。\n次に reveal-hugo を git のサブモジュールとして導入する。\n$ git submodule add git@github.com:dzello/reveal-hugo.git themes/reveal-hugo Cloning into \u0026#39;/home/username/hugo-env/hugo-slide/themes/reveal-hugo\u0026#39;... remote: Enumerating objects: 1713, done. remote: Total 1713 (delta 0), reused 0 (delta 0), pack-reused 1713 Receiving objects: 100% (1713/1713), 6.61 MiB | 1.83 MiB/s, done. Resolving deltas: 100% (848/848), done. マジ簡単。 Reveal-hugo をアップデートする場合は\n$ git submodule update --init でよい。 以降 reveal-hugo の中身は弄らない方針で作業を進める。\nconfig.toml の設定 Hugo 環境作成直後の config.toml の中身はこんな感じになっている。\nbaseURL = \u0026#34;http://example.org/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;My New Hugo Site\u0026#34; これを以下のように書き換える。\nbaseURL = \u0026#34;http://example.org/\u0026#34; languageCode = \u0026#34;ja_JP\u0026#34; title = \u0026#34;スライド用デモ・サイト\u0026#34; theme = \u0026#34;reveal-hugo\u0026#34; [outputFormats.Reveal] baseName = \u0026#34;index\u0026#34; mediaType = \u0026#34;text/html\u0026#34; isHTML = true [markup] defaultMarkdownHandler = \u0026#34;blackfriday\u0026#34; [markup.highlight] codeFences = false Hugo で作成したサイトをデプロイするなら baseURL にデプロイ先の URL を設定する。\n[outputFormats.Reveal] 項目は reveal.js 用の出力設定で，取り敢えずおまじないのようなものだと思っておけばよい。\n最後の4行は Hugo 0.60 以降では必須の設定である。 これも取り敢えずおまじないとして唱えておく（笑）\nスライド用のドキュメントを作成・表示する hugo-slide/content ディレクトリに _index.md ファイルを作成する。 お試しなので，中身はこんな感じ。\n+++ title = \u0026#34;Hello world!\u0026#34; outputs = [\u0026#34;Reveal\u0026#34;] +++ # Hello world!  This is my first slide. --- # Hello Mars!  This is my second slide. これで2ページ分のスライドができた。\n早速 Hugo をサーバモードで起動して表示してみよう。\n$ hugo server この状態でブラウザで http://localhost:1313/ にアクセスすれば\n おおっ，できたできた。 ちなみに [F] キー押下で全画面表示になる（元に戻すには [ESC] キー押下）。 [Page Down] キーを押すか右下の \u0026gt; をクリックすれば次ページに遷移する。\n よーし，うむうむ，よーし。\nセクションでスライドを分ける 来月のイベントは技術系なのでコードも書けるようにしておきたい。\nでは hugo-slide/content ディレクトリに hello ディレクトリを切ってその中に _index.md ファイルを作成してみよう。 中身はこんな感じ。\n+++ title = \u0026#34;みんな大好き Hello World\u0026#34; outputs = [\u0026#34;Reveal\u0026#34;] +++ # みんな大好き Hello World  ```gopackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello World!\u0026#34;) } ``` これで http://localhost:1313/hello/ にアクセスすれば\n と表示される。 このようにディレクトリを切ってセクション毎に分けることで複数のスライドを置くことができる。\nただし Hugo はセクションの階層化はできない。 更にいうと reveal-hugo ではひとつのセクションに複数の原稿ファイルをおいてもひとつのスライドにまとめられてしまうようだ。 ご注意を。\nさて，次は見た目をちょっと弄ってみようか。\nスライドテーマの指定 Reveal-hugo ではサイト単位，あるいは front matter 単位で reveal.js テーマを指定できる。 config.toml でサイト単位で指定する場合は\n[params.reveal_hugo] theme = \u0026#34;sky\u0026#34; という感じに， front matter で指定するなら\n[reveal_hugo] theme = \u0026#34;sky\u0026#34; てな感じに指定できる。\nReveal.js が用意しているテーマには以下のものがある。\n   Name Description     black Black background, white text, blue links (default theme)   white White background, black text, blue links   league Gray background, white text, blue links (default theme for reveal.js \u0026lt; 3.0.0)   beige Beige background, dark text, brown links   sky Blue background, thin dark text, blue links   night Black background, thick white text, orange links   serif Cappuccino background, gray text, brown links   simple White background, black text, blue links   solarized Cream-colored background, dark green text, blue links    ちなみに sky だとこんな感じ。\n 更に reveal-hugo ではカスタム・テーマとして robot-lung と sunblind が用意されている。 カスタム・テーマは\n[params.reveal_hugo] custom_theme = \u0026#34;reveal-hugo/themes/robot-lung.css\u0026#34; という感じに指定できる。 もちろん自作のテーマを組み込むことも可能である。\nSyntax Highlight の指定 コード部分の Syntax Highlight には highlight.js が使われている。 Highlight.js は reveal.js のプラグインとして既定で組み込まれている。\nHighlight.js のスタイルは\n[params.reveal_hugo] highlight_theme = \u0026#34;github\u0026#34; てな感じで指定できる。 highlight.js で指定可能なスタイルはデモ・ページで確認できる。\nHugo の Syntax Highlight を使う ところで Hugo は自前で Syntax Highlight の機能を持っている。 これを使わない手はない。\nまず highlight.js プラグインを無効にするのだが，個別にプラグインを無効化する方法がないため，config.toml で\n[params.reveal_hugo] load_default_plugins = false plugins = [ \u0026#34;reveal-js/plugin/zoom-js/zoom.js\u0026#34;, \u0026#34;reveal-js/plugin/notes/notes.js\u0026#34;, ] という感じに，いったん既定のプラグインを全て無効にしてから必要なものを個別に組み込む。\nHugo 側の Syntax Highlight の設定は\n[markup.highlight] codeFences = true hl_Lines = \u0026#34;\u0026#34; lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true style = \u0026#34;tango\u0026#34; tabWidth = 4 などとすればよいだろう。 codeFences が true になっている点に注意。\nstyle のサンプルは以下を参考にどうぞ。\n Short snippets Long snippets  たとえば tango スタイルを使えば\n てな感じになる。\nWeb フォントを使いたい！ Web で公開することを考えるのなら Web フォントを使いたいところである。 それにタイトルがちょいとデカすぎるしコードは小さすぎるよね。\nReveal-hugo では layouts/partials/reveal-hugo/head.html を使ってページの \u0026lt;head\u0026gt; 要素に任意の記述を割り込ませることができる。 これを使ってフォントの調整をしよう。\nたとえばこんな記述を割り込ませてみる。\n\u0026lt;link rel=\u0026#39;stylesheet\u0026#39; href=\u0026#39;//fonts.googleapis.com/css?family=Noto+Sans%7cNoto+Sans+JP%3a400,700%7cInconsolata%3a400,700\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#39;stylesheet\u0026#39; href=\u0026#39;/css/font-family.css\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; ちなみに font-family.css はこんな内容にしてみた1。\n.reveal { font-family: \u0026#39;Noto Sans\u0026#39;, \u0026#39;Noto Sans JP\u0026#39;, sans-serif; } .reveal h1, .reveal h2, .reveal h3, .reveal h4, .reveal h5, .reveal h6 { font-family: \u0026#39;Noto Sans\u0026#39;, \u0026#39;Noto Sans JP\u0026#39;, sans-serif; } .reveal code { font-family: \u0026#39;Inconsolata\u0026#39;, \u0026#39;Noto Sans JP\u0026#39;, monospace; } .reveal h1 { font-size: 1.6em; } .reveal h2 { font-size: 1.3em; } .reveal h3 { font-size: 1em; } .reveal h4 { font-size: 1em; } .reveal pre { font-size: 0.8em; } これで実際の表示は\n てな感じになった。 こんなもんかな。\nReveal-hugo では他にも fragment など reveal.js のギミックが利用可能だが，今回は割愛する。\nブックマーク   hakimel/reveal.js: The HTML Presentation Framework\n  dzello/reveal-hugo: 📽️ Create rich HTML-based presentations with Hugo and Reveal.js\n Reveal Hugo | Hugo Themes    さくらのレンタルサーバ上で Hugo によるサイト管理を行う\n  Hugo v0.60 から既定の Markdown パーサが Goldmark になったようだ\n    font-family.css ファイルは static/css/ ディレクトリに置くこと。 \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
