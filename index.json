{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "2019-09-28 のブックマーク",
      "section": "bookmarks",
      "description": "「PA-API v5移行のご案内」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/09/28-bookmarks/",
      "published": "2019-09-28T11:42:15+00:00",
      "update": "2019-09-28T11:44:00+00:00",
      "content": " リリース情報  WebIDE「Eclipse Che 7」正式リリース。VSCodeの拡張機能に対応、開発環境asコードの実現、Kubernetesへのデプロイ対応など － Publickey 「.NET Core 3.0」正式版が登場。Windowsデスクトップアプリ開発可能、exeファイルを生成、マイクロサービス対応など － Publickey  Microsoft、「.NET Core 3.0」を正式リリース ～オープンソース化されたWPF/WinForms開発をサポート - 窓の杜 Big Sky :: .NET Core 3.0 が gRPC をサポートした。  「Thunderbird 68.1.1」が公開 ～10件の問題を修正したメンテナンス更新（9月27日更新） - 窓の杜 The Document Foundation announces LibreOffice 6.3.2 - The Document Foundation Blog  バベルのインターネット  ISP Column - September 2019  ブログ: なぜ、BGPをセキュア化するのは、そんなに難しいのか?  開発ツール会社ChefのCEOが態度を急変、移民・関税執行局の契約を更新しないと発表 | TechCrunch Japan  セキュリティ＆プライバシー関連  ダークウェブ上で取引される脆弱性情報について注意喚起――キヤノンが2019年上半期のマルウェアレポートを公開：EnterpriseZine（エンタープライズジン） 「ドローン黙示録」の到来を阻止するために | TechCrunch Japan  サウジ石油施設への攻撃はGCC諸国の脆弱性を露呈：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト  脆弱な設定のElasticsearchによるエクアドル全国民情報流出の可能性についてまとめてみた - piyolog 「銀行はパスワードの文字数制限を撤廃すべき」という主張を専門家はどう見ているのか？ - GIGAZINE 脆弱な設定のElasticsearchによるエクアドル全国民情報流出の可能性についてまとめてみた - piyolog Microsoft Internet Explorer の脆弱性 (CVE-2019-1367) に関する注意喚起  Microsoft Internet Explorer の脆弱性対策について(CVE-2019-1367)：IPA 独立行政法人 情報処理推進機構  ローソン公式サイト・アプリ管理サーバーへの不正アクセスについてまとめてみた - piyolog How Trump’s Ukraine Mess Entangled CrowdStrike | WIRED  ブログ: どのように、トランプのウクライナの窮地がCrowdStrikeを巻き込んだか?  MIT Tech Review: ユーチューブに大規模な乗っ取り攻撃、インフルエンサーが被害 悪名高いボットを疲弊させ活動意欲をくじくCloudflareの新プラン | TechCrunch Japan Facebookの最新のフェイク、監督委員会を民主的な独立機関と思うなかれ | TechCrunch Japan GitHub、ソースコードの脆弱性解析ツールを展開するSemmle買収を発表 － Publickey Amazonで発生した注文履歴の誤表示についてまとめてみた - piyolog On Chinese \u0026quot;Spy Trains\u0026quot; - Schneier on Security  ブログ: 中国の「スパイ列車」について   天文関連  2019年の10月りゅう座流星群（ジャコビニ群）の情報 すばる望遠鏡、130億光年かなたの宇宙に銀河団を発見 | 国立天文台(NAOJ)  その他  Rasberry Pi は Android 9 Pie の夢を見るか？（速報：動画あり） - Qiita  ラズパイでアンドロイド9動作するのですね。 - Qiita  Raspberry Pi競合--インテル「Atom」搭載の「Atomic Pi」を見る - ZDNet Japan PA-API v5移行のご案内 ［速報］AWS、.NET Foundationのコーポレートスポンサーに参加 － Publickey ブログ: 原子力エネルギーは遅すぎる、温暖化を救うには高価過ぎる MIT Tech Review: 新発見：量子アルゴリズム「グローバー探索」は自然現象だった？ Kafka開発元のConfluentに聞いた。エンタープライズ市場への道筋、大手クラウドとの現在の関係について － Publickey 最大32コアのAMD EPYCプロセッサを搭載、コストパフォーマンスを高めたハイパーコンバージドインフラ「HPE SimpliVity 325 Gen 10」、HPEが発表 － Publickey モンテカルロ法における境界条件の扱いについて - Qiita 屋内外のあらゆる物を低帯域長距離無線で結ぶAmazon Sidewalkプロトコル | TechCrunch Japan Google’s ‘Quantum Supremacy’ Isn’t the End of Encryption | WIRED  ブログ: Googleの「量子超越性」は暗号の終わりではない  Cloudflareと「Chrome Canary」がHTTP/3に対応--「Firefox」も間もなく - ZDNet Japan Happy 9th Anniversary, LibreOffice - The Document Foundation Blog  "
    },
    {
      "title": "MathJax v3 がリリースされていた",
      "section": "release",
      "description": "v2.7.x までとはだいぶ変わったので注意。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/mathjax-v3-is-released/",
      "published": "2019-09-28T09:29:26+00:00",
      "update": "2019-09-28T13:21:42+00:00",
      "content": " いや，確かに8月末にはリリースするって予告されてたけどさ。 その後のアナウンスがないから気づかなかったよ。\nちうわけで MathJax v3.0.0 がリリースされていた。 よーやくベータが取れたよ（笑）\nドキュメントも v3 に対応しているようだ。\n MathJax Documentation — MathJax 3.0 documentation  Web ページで MathJax を使えるようにするには以下のコードを記述する。\n\u0026lt;script\u0026gt; MathJax = { ... }; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=es6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; MathJax v3 の特定のバージョンを指定するには\n\u0026lt;script\u0026gt; MathJax = { ... }; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=es6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3.0.0/es5/tex-mml-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; などとする。\nちなみに IE (Internet Explorer) はサポートから外れるようだ。 まぁ IE は Web ではもう「要らない子」だからね。\nMathJax v3 の設定 MathJax = { ... }; の部分には MathJax の設定を記述する。 v2.7.x までとはフォーマットが異なるので注意。\n主な設定項目は以下の通り。\nTeX Input Processor Options 設定項目と既定値は以下の通り。\nMathJax = { tex: { packages: [\u0026#39;base\u0026#39;], // extensions to use  inlineMath: [ // start/end delimiter pairs for in-line math  [\u0026#39;\\\\(\u0026#39;, \u0026#39;\\\\)\u0026#39;] ], displayMath: [ // start/end delimiter pairs for display math  [\u0026#39;$$\u0026#39;, \u0026#39;$$\u0026#39;], [\u0026#39;\\\\[\u0026#39;, \u0026#39;\\\\]\u0026#39;] ], processEscapes: true, // use \\$ to produce a literal dollar sign  processEnvironments: true, // process \\begin{xxx}...\\end{xxx} outside math mode  processRefs: true, // process \\ref{...} outside of math mode  digits: /^(?:[0-9]+(?:\\{,\\}[0-9]{3})*(?:\\.[0-9]*)?|\\.[0-9]+)/, // pattern for recognizing numbers  tags: \u0026#39;none\u0026#39;, // or \u0026#39;ams\u0026#39; or \u0026#39;all\u0026#39;  tagSide: \u0026#39;right\u0026#39;, // side for \\tag macros  tagIndent: \u0026#39;0.8em\u0026#39;, // amount to indent tags  useLabelIds: true, // use label name rather than tag for ids  multlineWidth: \u0026#39;85%\u0026#39;, // width of multline environment  maxMacros: 1000, // maximum number of macro substitutions per expression  maxBuffer: 5 * 1024, // maximum size for the internal TeX string (5K)  baseURL: // URL for use with links to tags (when there is a \u0026lt;base\u0026gt; tag in effect)  (document.getElementsByTagName(\u0026#39;base\u0026#39;).length === 0) ? \u0026#39;\u0026#39; : String(document.location).replace(/#.*$/, \u0026#39;\u0026#39;)) } };  インライン数式を囲む記号として $ .. $ を有効にするには inlineMath 項目を以下のように変更する。\ninlineMath: [[\u0026#39;$\u0026#39;, \u0026#39;$\u0026#39;], [\u0026#39;\\\\(\u0026#39;, \u0026#39;\\\\)\u0026#39;]]  別行立て数式に対して自動採番を行うには tags 項目に ams または all をセットする。\n自作のマクロを組み込む際には macro 項目をセットする。\nmacros: { ssqrt: [\u0026#39;\\\\sqrt{\\\\smash[b]{\\\\mathstrut #1}}\u0026#39;, 1] }  CommonHTML Output Processor Options 設定項目と既定値は以下の通り。\nMathJax = { chtml: { scale: 1, // global scaling factor for all expressions  minScale: .5, // smallest scaling factor to use  matchFontHeight: true, // true to match ex-height of surrounding font  mtextInheritFont: false, // true to make mtext elements use surrounding font  merrorInheritFont: true, // true to make merror text use surrounding font  mathmlSpacing: false, // true for MathML spacing rules, false for TeX rules  skipAttributes: {}, // RFDa and other attributes NOT to copy to the output  exFactor: .5, // default size of ex in em units  displayAlign: \u0026#39;center\u0026#39;, // default for indentalign when set to \u0026#39;auto\u0026#39;  displayIndent: \u0026#39;0\u0026#39; // default for indentshift when set to \u0026#39;auto\u0026#39;  } };  日本語の文章に数式を埋め込む場合，文字サイズのバランスがよくないので matchFontHeight 項目を false にする。\n別行立て数式を左寄せで表示するには displayAlign 項目を left にする。 併せて displayIndent 項目でインデント幅もセットするとよい。\n拡張パッケージを組み込む たとえば color という拡張パッケージを組み込むには以下のように記述する。\nMathJax = { loader: { load: [\u0026#39;[tex]/color\u0026#39;] }, tex: { packages: {\u0026#39;[+]\u0026#39;: [\u0026#39;color\u0026#39;]} } };  ただし現時点で使えそうなパッケージはなさそう。 mathcomp があるといいのに。\nv2.7.x で外部パッケージだったものの一部は標準で組み込まれているようだ。 たとえば mhchem.js は明示的に組み込まなくても\n経済成長と $\\ce{CO2}$ 排出量は比例しなくなっている。  経済成長と $\\ce{CO2}$ 排出量は比例しなくなっている1。\n てな感じに書くことができる。\nこのサイトの設定内容 このサイトの設定内容は今のところ以下の通り。\nMathJax = { tex: { inlineMath: [[\u0026#39;$\u0026#39;, \u0026#39;$\u0026#39;], [\u0026#39;\\\\(\u0026#39;, \u0026#39;\\\\)\u0026#39;]], processEscapes: true, tags: \u0026#39;ams\u0026#39;, macros: { ssqrt: [\u0026#39;\\\\sqrt{\\\\smash[b]{\\\\mathstrut #1}}\u0026#39;, 1], tcdegree: [\u0026#39;\\\\unicode{xb0}\u0026#39;], tccelsius: [\u0026#39;\\\\unicode{x2103}\u0026#39;], tcperthousand: [\u0026#39;\\\\unicode{x2030}\u0026#39;], tcmu: [\u0026#39;\\\\unicode{x3bc}\u0026#39;], tcohm: [\u0026#39;\\\\unicode{x3a9}\u0026#39;] } }, chtml: { matchFontHeight: false, displayAlign: \u0026#34;left\u0026#34;, displayIndent: \u0026#34;2em\u0026#34; } };  MathJax v3 では利用できる Web フォントは1種類のみで他のフォントを選択することができない。 これは将来バージョンで改善するらしい。 Web フォントのサポートが組み込まればまた紹介することもあるだろう。\nブックマーク  ちょこっと MathJax  参考図書  [改訂第7版]LaTeX2ε美文書作成入門 奥村 晴彦, 黒木 裕介 技術評論社 2017-01-24 大型本 4774187054 (ASIN), 9784774187051 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。\nreviewed by Spiegel on 2017-09-27 (powered by PA-API)\n  「経済成長とCO2排出量は「比例しなくなっている」：IEA報告書」より。 [return]   "
    },
    {
      "title": "Go 言語で浮動小数点数をいろいろな書式で表示してみる",
      "section": "golang",
      "description": "Go 1.13 で浮動小数点数の内部構造が簡単に見れるようになって，より理解が進むというものである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/floating-point-number/",
      "published": "2019-09-27T16:27:23+00:00",
      "update": "2019-10-03T11:53:03+00:00",
      "content": " 今日も面白い記事を見つけた。\n go で float32 を JSON にするとちょっと意外なことになる - Qiita  今回は Go 1.13 になった記念として 浮動小数点数をいろいろな書式で表示してみることにする。\nその前に... 上の記事について補足をしておくが1， 0xa0000000 をいわゆる倍精度浮動小数点数（Go 言語で言うところの float64）にキャストした場合と，いったん単精度浮動小数点数（Go 言語で言うところの float32）にキャストした後に倍精度で再度キャストした場合で結果は同じ値になるが，これは倍精度へのキャストで精度が復元しているわけではない点に注意が必要である。\nこのことは 0xa0000000 を2進数に展開するとよく分かる。 Go 1.13 から %b で整数値を2進数で表現できるようになったので試してみよう。\nfmt.Printf(\u0026#34;%b\\n\u0026#34;, int64(0xa0000000)) //Output //10100000000000000000000000000000 このとおり 0xa0000000 の実質的な有効桁数は3ビットしかない。 なので，単精度と倍精度の間でキャストを繰り返しても実質的な精度に影響はないのである。\nもし有効桁数の違いを見たいのであればサンプルの値を 0xa0000001 に変えてみるといいだろう。 たとえば件の記事に出てくる JavaScript コード\no = { foo: new Float32Array([0xa0000000]), bar: new Float64Array([0xa0000000]) } process.stdout.write(JSON.stringify(o));  を\no = { foo: new Float32Array([0xa0000001]), bar: new Float64Array([0xa0000001]) } process.stdout.write(JSON.stringify(o));  に書き換えて実行してみると\n$ node json.js {\u0026#34;foo\u0026#34;:{\u0026#34;0\u0026#34;:2684354560},\u0026#34;bar\u0026#34;:{\u0026#34;0\u0026#34;:2684354561}} という感じに異なる値で表示される。 これで JavaScript コードでも明示的に単精度浮動小数点数にすれば，ちゃんと精度が削られること（情報落ち）が分かるだろう。\nJSON (RFC 7159) における数値（numbers）の内部表現は倍精度浮動小数点数のみだが JavaScript の仕様に合わせて整数で表現可能な場合はできるだけ整数で表そうとする。 故に無理やり単精度浮動小数点数に押し込めばこんな妙ちきりんなことも起きる。 幸い JSON は 1.23E+4 みたいな表現も許容するので，有効桁数を明示したいならこの表記がいいだろう。\nちなみに Go 言語で float32 を JSON 形式に展開する際に 1.23E+4 のような表記にしたければ float32 を wrap する型を作って\ntype Float32 float32 func (f Float32) MarshalJSON() ([]byte, error) { return []byte(fmt.Sprintf(\u0026#34;%v\u0026#34;, f)), nil } などとすればよい。\n0xa0000001 を様々な書式で表記してみる ようやく本題（笑）\nあらかじめ 0xa0000001 を\nconst value = 0xa0000001 var ( i64 = int64(value) f64 = float64(value) f32 = float32(value) ) と定義して fmt.Printf() 関数の各書式（verb）を使って表記してみよう。 こんな感じ。\n   Format Expression     fmt.Printf(\u0026quot;%d\u0026quot;, i64) 2684354561   fmt.Printf(\u0026quot;%b\u0026quot;, i64) 10100000000000000000000000000001   fmt.Printf(\u0026quot;%f\u0026quot;, f64) 2684354561.000000   fmt.Printf(\u0026quot;%f\u0026quot;, f32) 2684354560.000000   fmt.Printf(\u0026quot;%e\u0026quot;, f64) 2.684355e+09   fmt.Printf(\u0026quot;%e\u0026quot;, f32) 2.684355e+09   fmt.Printf(\u0026quot;%g\u0026quot;, f64) 2.684354561e+09   fmt.Printf(\u0026quot;%g\u0026quot;, f32) 2.6843546e+09   fmt.Printf(\u0026quot;%g\u0026quot;, float64(f32)) 2.68435456e+09    更に Go 1.13 から浮動小数点数に対して %b が使えるようになった。 %b を使うと仮数部と指数部を分離した表記になる。 こんな感じ。\n   Format Expression     fmt.Printf(\u0026quot;%b\u0026quot;, f64) 5629499536310272p-21   fmt.Printf(\u0026quot;%b\u0026quot;, f32) 10485760p+8   fmt.Printf(\u0026quot;%b\u0026quot;, float64(f32)) 5629499534213120p-21    仮数部が10進数表記で分かりにくいので，強引に2進数に置き換えるとこんな感じ。\n   Value Expression     f64 10100000000000000000000000000001000000000000000000000p-21   f32 101000000000000000000000p+8   float64(f32) 10100000000000000000000000000000000000000000000000000p-21    float32 で8ビット分の情報落ちが発生していることがよく分かる。 覆水盆に返らず（笑）\nGo 1.13 で浮動小数点数の内部構造が簡単に見れるようになって，浮動小数点数対する理解がより進むというものである。\n【おまけの追記】 encoding/json パッケージにおける浮動小数点数の扱いと json.Number 型 Go 言語の標準パッケージである encoding/json で構造体の要素に float32/float64 を割り当てた際の JSON へのエンコードでは，最終的に strconv.AppendFloat() 関数で文字列に変換される。\nstrconv.AppendFloat() 関数とほぼ同じ機能を持つ strconv.FormatFloat() 関数で出力を確認してみよう。\n   Conversion Output     strconv.FormatFloat(f64, 'f', -1, 64) 2684354561   strconv.FormatFloat(f64, 'f', -1, 32) 2684354600   strconv.FormatFloat(float64(f32), 'f', -1, 64) 2684354560   strconv.FormatFloat(float64(f32), 'f', -1, 32) 2684354600    encoding/json では1番目および4番目のフォーマットを使っている。 理由は不明だが間違いではない。 単精度浮動小数点数の有効桁数は10進数換算で7桁程度しかないため 2684354560 と 2684354600 の違いに意味はないのだ。\nそれでも JavaScript に近い表記が欲しいのであれば，たとえば先程の float32 の wrapper として定義した Float32 型を以下のように書き直すことで実現できる。\ntype Float32 float32 func (f Float32) MarshalJSON() ([]byte, error) { return []byte(strconv.FormatFloat(float64(f), \u0026#39;f\u0026#39;, -1, 64)), nil } ところで，ちょっと反則的（？）かもしれないが encoding/json パッケージには json.Number という型が用意されている。 json.Number 型は名前に反して string 型の wrapper になっている。\n// A Number represents a JSON number literal. type Number string // String returns the literal text of the number. func (n Number) String() string { return string(n) } // Float64 returns the number as a float64. func (n Number) Float64() (float64, error) { return strconv.ParseFloat(string(n), 64) } // Int64 returns the number as an int64. func (n Number) Int64() (int64, error) { return strconv.ParseInt(string(n), 10, 64) } つまり JSON との Marshal/Unmarshal は文字列と同じ扱いだが，必要に応じて数値（int64 または float64 型）に変換できるというわけだ。\nこれまで述べたように JSON の numbers を浮動小数点数に変換すると計算誤差が発生するため破壊的な変換になりがちだが json.Number 型であればそれを最小限に抑えられるだろう。\nブックマーク  1を1億回足して1億にならない場合 書式 %v のカスタマイズ  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  件の記事の著者は浮動小数点数の性質については分かった上で Go 言語以外の言語との表現の違いについて問題にしておられるようだ。 [return]   "
    },
    {
      "title": "Go 1.13.1 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "Go 言語で Web サービスまたはクライアント・ツールを構築している人は要注意だ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/go-1_13_1-is-released/",
      "published": "2019-09-26T11:58:03+00:00",
      "update": "2019-09-27T22:53:34+00:00",
      "content": " Go 1.13.1 がリリースされた。\n [security] Go 1.13.1 and Go 1.12.10 are released - Google Group CVE-2019-16276  CVE-2019-16276 - Red Hat Customer Portal : CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L (Score:6.3, Severity:Medium)   今回はセキュリティ・アップデートを含んでいる。 Go 言語で Web サービスまたはクライアント・ツールを構築している人は要注意だ。\nnet/http (through net/textproto) used to accept and normalize invalid HTTP/1.1 headers with a space before the colon, in violation of RFC 7230. If a Go server is used behind an uncommon reverse proxy that accepts and forwards but doesn't normalize such invalid headers, the reverse proxy and the server can interpret the headers differently. This can lead to filter bypasses or request smuggling, the latter if requests from separate clients are multiplexed onto the same upstream connection by the proxy. Such invalid headers are now rejected by Go servers, and passed without normalization to Go client applications. via Go 1.13.1 and Go 1.12.10 are released  Ubuntu の APT は相変わらずサポートから外れた 1.10.x しか対応していないのでダウンロードページからバイナリ（go1.13.1.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.13.1.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.13.1.linux-amd64.tar.gz $ sudo mv go go1.13.1 $ sudo ln -s go1.13.1 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.13.1 linux/amd64 アップデートは計画的に。\nブックマーク  HTTP Desync Attacks: Request Smuggling Reborn | PortSwigger Research  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "貧者の兵器",
      "section": "remark",
      "description": "気ぃつけなはれや（他人事）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/poor-mans-weapons/",
      "published": "2019-09-23T10:36:15+00:00",
      "update": "2019-09-23T10:37:45+00:00",
      "content": " 従来から化学兵器や地雷などは「貧者の兵器」と呼ばれているが，これに新たな兵器が実戦配備されたようだ。\n サウジ石油施設への攻撃はGCC諸国の脆弱性を露呈：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト  有料記事だが，是非ともお金を払って一読されることをおすすめする。\nかつて民生品 drone は「空の産業革命」などと呼ばれてきたが，ついに恐れていた事態が現実となった。\n 個人的に危惧してるのは， drone がいわゆる「貧者の兵器」となり得ることだ。 9.11 前の日本ならともかく，イラク戦争に参戦し，さらに火中の栗を拾うが如き「集団的自衛権」なるものを定めるのであれば，兵器としての drone についてもちゃんと議論すべきである。 via 日本のアトムは空を飛べない  今回の件が厄介なのは\n 「もしイランに対する攻撃を行えば、イランはきわめて安価な兵器を用いて容易にサウジ・UAE・クウェート等の石油施設を破壊できる」ということが、この攻撃によって示された。ペルシア湾岸地域の勢力バランスが、イランによる安価な実際的な兵器の開発と配備と運用実績の積み上げによって、大きく変わってしまっていた。 via サウジ石油施設への攻撃はGCC諸国の脆弱性を露呈  ことだろう。\n更に言えば世界の紛争地帯の武装勢力によるテロが活性化する可能性もある。 ぶっちゃけ「旅客機をハイジャックしなくても空から攻撃できる」のだ。 しかも同時多発的に。 これにサイバー攻撃を合わせれば怖いものなしだ。\nさて，賢明にも日本はホルムズ海峡に派兵する気はないようだが，東京オリンピックはせいぜい気ぃつけなはれや（他人事）\nブックマーク  サウジ世界最大石油施設「ドローン攻撃」で油価急騰は長期化なのか：岩瀬昇 | エネルギーの部屋 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト  サウジ大臣は「回復」と言う原油施設の「本当の被害程度」：岩瀬昇 | エネルギーの部屋 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト  「ドローン黙示録」の到来を阻止するために | TechCrunch Japan  参考図書  セキュリティはなぜやぶられたのか ブルース・シュナイアー 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-API)\n  イノベーション 悪意なき嘘 (双書 時代のカルテ) 名和 小太郎 岩波書店 2007-01-11 単行本 4000280872 (ASIN), 9784000280877 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「両用技術とはどのようなものか。その核心には「矛と楯の論理」がある」（まえがき「予断・診断・独断 そんなばかな」より）\nreviewed by Spiegel on 2018-12-31 (powered by PA-API)\n "
    },
    {
      "title": "本の「史料」的価値",
      "section": "remark",
      "description": "「情報共有の未来」が「国会図書館に納本」とか皮肉が効きすぎて目から汗が出てしまう（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/value-of-books/",
      "published": "2019-09-23T02:39:20+00:00",
      "update": "2019-09-24T18:55:11+00:00",
      "content": " （Facebook の TL に書き殴った内容を再構成してみた）\n日本の新聞記事にはリンクを張らないことにしているので1 何処とは言わないが， Facebook の TL で紹介されてた「「紙の本なくならない」ページめくる動作にカギ」という記事を見て笑ってしまった。 新聞ってここまで落ちぶれたのか。 こんなクソ記事に付き合わされる某大学の教授も大変である。\nちなみに私はもう長いこと紙の新聞は読んでない2。 10年近く前に関係者に『新聞がなくなる日』なんて本を書かれ，近年では「社会は新聞を必要としない」とまで言われるメディアに価値があるとは思えない（笑）\n私は本が大好きだ。 昨年末の引っ越しで大量の本を処分せざるを得なくなったときは自分の半生を否定された気分になったほどだ。\nしかし娯楽や情報・知識の「源泉」として見た場合，紙かデジタルかに関わらず「本」という形態の価値は低下していると思う。 「本」全体の価値が下がっているのに今更「紙かデジタルか」なんて話を見てもズレた論点にへそで茶が沸く程度の感想しかない。\n情報・知識の摂取手段としては「ググる」ほうが早いし Web を上回る情報・知識を提供してくれる本など多分100冊に1冊もないだろう。 Wikipedia をテストや宿題のカンニングに使ったり卒論のネタに使ったりする子供の気持ちがよくわかるよ3。\n娯楽は既に Web のほうが面白い4。 音楽や映像は言うに及ばず，漫画・小説についても Web連載（掲載）→書籍化（含コミカライズ）→テレビ・映画化 という流れができていて「書籍ファースト」ではなくなってきている。\n仮に「紙かデジタルか」という比較をするなら，それは「読む」ことではなく「保存する」ことについてだろう。\nインターネットおよび Web の普及で分かったことは 「デジタル情報は失われやすく統制を受けやすい」 ということだ。\nDRM (Digital Rights Management) などと嘯き，人を「表現」から締め出し，それを法が是とする現代社会システムには破滅願望しか感じられない。 地球が「猿の惑星」になるのも遠い未来ではないのかも（笑）\n現代の強すぎる統制下に於いて，未来に向けて「表現」を維持するには「紙の本」の形で国会図書館にでも保護してもらうしかない。\n少し前に「『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』が国会図書館に納本された」話があったが5，残念ながら慧眼だったと言わざるを得ない。 まぁ「情報共有の未来」が「国会図書館に納本」とか皮肉 (スパイス) が効きすぎて目から汗が出てしまうが。\nブックマーク  9月22日開催の「技術書典7」にて『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』特別版を販売します - YAMDAS現更新履歴  参考図書  [まとめ買い] 犬とハサミは使いよう 更伊 俊介, 鍋島 テツヒロ 鍋島 テツヒロ (イラスト)  Kindle版 B012Z14W64 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  犬になっても本を読む！\nreviewed by Spiegel on 2015-04-26 (powered by PA-API)\n  もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo 達人出版会 2017-12-25 評価\u0026nbsp;       WirelessWire News 連載の書籍化。感想はこちら\nreviewed by Spiegel on 2018-12-31\n  CODE VERSION 2.0 ローレンス・レッシグ 山形浩生 (翻訳) 翔泳社 2007-12-19 (Release 2016-03-14) Kindle版 B01CYDGUV8 (ASIN), 9784798147307 (EISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  前著『CODE』改訂版。\nreviewed by Spiegel on 2018-11-17 (powered by PA-API)\n  数ヶ月で削除される新聞記事にリンクを張ってもしょうがない。 [return] 実家は今だに新聞を定期購読しているので目にはつくけど。まぁ，私がお金を払っているわけではないのでどうでもいい。年寄りは新聞やテレビがなくなると本格的に社会から隔絶してしまうので，仕方がないのだろう。新聞やテレビ自体が社会から乖離している気もするが（笑） [return] もっとも，カンニングペーパーってのは自分で「作る」ことに意味があるんだけどねぇ。与えられるだけの知識は身につかない。ちゃんと消化しないと。 [return] これは Web の作品のほうが優れているということではなく「スタージョンの法則」に則って「90%はカス」という健全な状態であるという意味である。バリバリの売れっ子作家も週末の余暇に書いてるだけの人も，同じ土俵で作品を公開できるというのは素晴らしい。 [return] いま見たら検索にも出てきた。うむうむ。 [return]   "
    },
    {
      "title": "疑似乱数生成器 spiegel-im-spiegel/mt",
      "section": "release",
      "description": "spiegel-im-spiegel/mt は64bit版 Mersenne Twister を元に pure Go で書き直したものである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/mersenne-twister-by-golang/",
      "published": "2019-09-22T08:37:19+00:00",
      "update": "2019-09-24T17:55:46+00:00",
      "content": " Mersenne Twister とは松本眞・西村拓士両氏によって1996年に発表された擬似乱数生成アルゴリズムである。 他の擬似乱数生成アルゴリズムと比べて以下の特徴があるそうだ。\n  従来の様々な生成法の欠点を考慮して設計されています 従来にない長周期, 高次元均等分布を持ちます（周期が $2^{19937}-1$ で、623次元超立方体の中に 均等に分布することが証明されています） 生成速度がかなり速い メモリ効率が良い  via Mersenne Twister とは?  特に2番目が重要で，モンテカルロ法などの科学技術計算に向いている。 Ruby などの一部のプログラミング言語では標準の疑似乱数生成器として組み込まれているらしい。\nspiegel-im-spiegel/mt は Mersenne Twister のオリジナルコード（C/C++）を pure Go で書き直したものである。\n  \nspiegel-im-spiegel/mt の特徴は以下の通り。\n math/rand 互換で rand.Rand のソースとして利用できる goroutine-safe な構成にできる（mt.PRNG 型を利用した場合）  mt/mt19937.Source の機能 mt/mt19937 パッケージは 64bit版 Mersenne Twister を元に pure Go で書き直したものである。\nmt/mt19937.Source はそのまま疑似乱数生成器として使える。 たとえば以下のように記述する。\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) fmt.Println(mt19937.NewSource(19650218).Uint64()) //Output: //13735441942630277712 提供するメソッドは以下の通り。\n   メソッド 機能     Source.Seed(int64) 乱数のシードをセットする   Source.SeedArray([]uint64) 乱数のシード（配列）をセットする   Source.Uint64() uint64 乱数として範囲 $[0, 2^{64}-1]$ の整数値を生成する   Source.Int63() int64 乱数として範囲 $[0, 2^{63}-1]$ の整数値を生成する   Source.Real(int) float64 乱数として浮動小数点数値を生成する    Source.Real() 関数の引数による乱数の出力範囲は以下の通り。\n   引数 生成範囲     1 範囲 $[0, 1)$ の浮動小数点数値   2 範囲 $(0, 1)$ の浮動小数点数値   上記以外 範囲 $[0, 1]$ の浮動小数点数値    なお mt/mt19937.Source は goroutine-safe ではないので goroutine 間でインスタンスを共有できない。\nmath/rand と組み合わせる mt/mt19937.Source を rand.Rand のソースとして利用するには以下のように記述すればよい。\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) fmt.Println(rand.New(mt19937.NewSource(19650218)).Uint64()) //Output: //13735441942630277712 これで rand.Rand が提供するメソッドはすべて使える。 ただし rand.Rand も goroutine-safe ではないので，取り扱いにはやはり注意が必要である。\nmt.PRNG と組み合わせる mt/mt19937.Source 型を mt.PRNG 型と組み合わせることで goroutine-safe な構成にできる。 たとえばこんな感じに記述できる。\npackage main import ( \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) func main() { wg := sync.WaitGroup{} prng := mt.New(mt19937.NewSource(time.Now().UnixNano())) \tfor i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { defer wg.Done() for i := 0; i \u0026lt; 10000; i++ { prng.Uint64() \t} }() } wg.Wait() } mt.PRNG 型は mt/mt19937.Source のラッパーになっていて rand.Rand と組み合わせることも可能だが， rand.Rand の内部構造の問題で goroutine-safe にならない。 ご注意を。\nio.Reader 互換の疑似乱数生成器 mt.PRNG のインスタンスから mt.Reader 型のインスタンスを生成できる。 こんな感じに記述できる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) func main() { wg := sync.WaitGroup{} prng := mt.New(mt19937.NewSource(time.Now().UnixNano())) \tfor i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { defer wg.Done() r := prng.NewReader() \tbuf := [8]byte{} for i := 0; i \u0026lt; 10000; i++ { ct , err := r.Read(buf[:]) \tif err != nil { return } fmt.Println(binary.LittleEndian.Uint64(buf[:ct])) } }() } wg.Wait() } mt.Reader 型は io.Reader インタフェースと互換性がある。 また mt.Reader インスタンスも goroutine-safe なので goroutine 間で共有可能である。\nライセンスについて spiegel-im-spiegel/mt は MIT ライセンスで提供している。\nオリジナルの Mersenne Twister コードは GPL または BSD ライセンスで提供されているが MIT ライセンスに書き換えてもいいらしい。\n Mersenne Twisterの商業利用について  というわけで spiegel-im-spiegel/mt は MIT ライセンスで提供することにした。 ご利用はお気軽に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  数学ガール／乱択アルゴリズム 結城 浩 SBクリエイティブ 2011-02-25 (Release 2014-03-12) Kindle版 B00I8AT1FO (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  工学ガール，リサちゃん登場！\nreviewed by Spiegel on 2015-04-19 (powered by PA-API)\n "
    },
    {
      "title": "疑似乱数生成器 spiegel-im-spiegel/mt をリリースした",
      "section": "release",
      "description": "ついカッとなって書いた。反省はしていない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/mersenne-twister-package-is-released/",
      "published": "2019-09-22T08:37:19+00:00",
      "update": "2019-09-22T09:18:55+00:00",
      "content": " ついカッとなって書いた。 反省はしていない。\n spiegel-im-spiegel/mt: Mersenne Twister; Pseudo Random Number Generator, Implemented by Golang  Mersenne Twister の Go 言語実装はいくつかあるのだが，やっぱ他人が作る道具は使いにくいよね，というわけで自分で書いてしまった（笑） spiegel-im-spiegel/mt の特徴は以下の通り。\n math/rand 互換で rand.Rand のソースとして利用できる goroutine-safe な構成にできる（mt.PRNG 型を利用した場合）  使い方は以下を参照のこと。\n 疑似乱数生成器 spiegel-im-spiegel/mt  一応，ベンチマークテストもしてみた。\npackage main import ( \u0026#34;math/rand\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) const count = 10000000 func BenchmarkRandomALFG(b *testing.B) { rnd := rand.NewSource(time.Now().UnixNano()).(rand.Source64) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomMT19917(b *testing.B) { rnd := mt19937.NewSource(time.Now().UnixNano()) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomALFGRand(b *testing.B) { rnd := rand.New(rand.NewSource(time.Now().UnixNano())) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomMT19917Rand(b *testing.B) { rnd := rand.New(mt19937.NewSource(time.Now().UnixNano())) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomALFGLocked(b *testing.B) { b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rand.Uint64() } } func BenchmarkRandomMT19917Locked(b *testing.B) { rnd := mt.New(mt19937.NewSource(time.Now().UnixNano())) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } テスト対象は以下の通り。\n   テスト名 対象     BenchmarkRandomALFG math/rand 標準アルゴリズム1   BenchmarkRandomMT19917 mt/mt19937 パッケージ   BenchmarkRandomALFGRand math/rand （rand.Rand ラッパ）   BenchmarkRandomMT19917Rand mt/mt19937 （rand.Rand ラッパ）   BenchmarkRandomALFGLocked math/rand Sync バージョン   BenchmarkRandomMT19917Locked mt/mt19937 ＋ mt.PRNG    このベンチマークテストの実行結果は以下の通り。\n$ go test -bench Random -benchmem goos: linux goarch: amd64 pkg: github.com/spiegel-im-spiegel/mt/benchmark BenchmarkRandomALFG-4 1000000000\t0.0492 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomMT19917-4 1000000000\t0.0651 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomALFGRand-4 1000000000\t0.0749 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomMT19917Rand-4 1000000000\t0.0846 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomALFGLocked-4 1000000000\t0.176 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomMT19917Locked-4 1000000000\t0.192 ns/op\t0 B/op\t0 allocs/op PASS ok github.com/spiegel-im-spiegel/mt/benchmark\t7.081s というわけで math/rand のほうが若干速いかな。 乱数としての性能は別の機会に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  数学ガール／乱択アルゴリズム 結城 浩 SBクリエイティブ 2011-02-25 (Release 2014-03-12) Kindle版 B00I8AT1FO (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  工学ガール，リサちゃん登場！\nreviewed by Spiegel on 2015-04-19 (powered by PA-API)\n  math/rand パッケージに実装されている擬似乱数生成器はラグ付フィボナッチ法（Lagged Fibonacci Generator）のバリエーションらしい。 [return]   "
    },
    {
      "title": "2019-09-21 のブックマーク",
      "section": "bookmarks",
      "description": "「数式言語を使って、インタプリタとコンパイラの違いを説明してみる」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/09/21-bookmarks/",
      "published": "2019-09-21T06:23:03+00:00",
      "update": "2019-09-21T06:28:29+00:00",
      "content": " リリース情報  Google、「Flutter 1.9」リリース、Webアプリ生成機能を統合。Flutterは単一コードでネイティブアプリとWebアプリを開発できるフレームワークに － Publickey 「Dart 2.5」が登場。GitHubのコードから機械学習させた賢いコード補完をVSCodeなどに提供 － Publickey Firefox 69.0.1, See All New Features, Updates and Fixes  「Firefox」v69.0.1が公開 ～不具合や脆弱性の修正が中心 - 窓の杜 Mozilla、「Firefox」のリリースサイクルを短縮 ～4週間ごとのメジャー更新へ - 窓の杜  Inkscape 1.0 beta1 available for testing | Inkscape Hugo 0.58.3: A couple of Bug Fixes | Hugo  バベルのインターネット  GitHub、米経済制裁によるアクセス制限について考え示す - ZDNet Japan  セキュリティ＆プライバシー関連  When Biology Becomes Software - Schneier on Security Pythonに電子メール取り扱い時の挙動に関する脆弱性 | Think IT（シンクイット） Another Side Channel in Intel Chips - Schneier on Security 「OpenSSL」に複数の脆弱性、アップデートリリース | Think IT（シンクイット）  OpenSSLに複数の脆弱性、アップデートを | マイナビニュース  キヤノン 一眼レフ6機種が外部から攻撃される可能性のある脆弱性を改善 | CAPA CAMERA WEB Cracking Forgotten Passwords - Schneier on Security Revisiting Software Vulnerabilities in the Boeing 787 - Schneier on Security New Biometrics - Schneier on Security  天文関連  ターゲットマーカ分離運用 | トピックス | JAXA はやぶさ２プロジェクト 2019年9月18日ニュース「宇宙観測史上最古の銀河形成の痕跡見つけた 東大、早大などのグループ」 | SciencePortal MIT Tech Review: 顔認識アルゴリズムでダークマター探し、チューリッヒ工科大 New observations help explain the dimming of Tabby's Star From clouds to craters / Mars Express / Space Science / Our Activities / ESA  壁紙にいかが？　火星の表面を北から南まで見渡せる縦長画像が公開 - sorae 宇宙へのポータルサイト   知財関連  The Xtream Codes IPTV Takedown is Complex and Confused - TorrentFreak Piracy Boosts Sales of Some Manga Comics, Research Shows - TorrentFreak  海賊版マンガは連載中の作品の売上にネガティブ、完結した作品にポジティブな効果をもたらすとの研究 | P2Pとかその辺のお話R   Linux または Ubuntu に関する話題  ［速報］Oracle Autonomous Linuxリリース。ダウンタイムなしで自律的にパッチ適用、チューニング実行、RHELと100％互換など。Oracle OpenWorld 2019 － Publickey Ubuntu 19.10 その21 - Ubuntu 20.04 LTSまで継続的に提供する32bit版パッケージとフィードバックの募集 - kledgeb Ubuntu 19.10 その22 - Mesa 19.2.0のテスト呼び掛け - kledgeb  その他  VScode+pandoc+Lualatexで日本語pdfをMarkdownから出力する - Qiita “メディア嫌い”がフェイクを支える、その処方箋と2029年の「人工メディア」：#ONA19 報告 | 新聞紙学的 SSH CA認証まとめ 米財務省、北朝鮮のハッカー集団を制裁対象に--「WannaCry」などに関与 - ZDNet Japan ブログ: 米国がエドワード・スノーデンに対して民事訴訟を起こす GitHub、Rails 6がリリースされてからわずか9日で移行を完了。短期間で問題なく移行できた理由とは？ － Publickey なぜ昨今のJavaScriptではイミュータブルであるべきと言えるのか歴史的背景を踏まえて言語化する - Qiita GitHubがセキュリティのためのコード分析ツールSemmleを買収 | TechCrunch Japan IT産業はタダ働きのエンジニアに依存しすぎている - GIGAZINE 少女人身売買のエプスタイン事件、テック業界の関わりは？ | ギズモード・ジャパン Stallman's final interview as FSF president: Last week we quizzed him over Microsoft visit. Now he quits top roles amid rape remarks outcry • The Register  ブログ: FSF理事としてのストールマンの最後のインタビュー: 先週、マイクロソフトの訪問について彼に質問しました。 今、彼はエプスタインの電子メールの嵐の中でトップの役割を辞めます  数式言語を使って、インタプリタとコンパイラの違いを説明してみる - Qiita インドが電子たばこを禁止、若者の健康への懸念を理由に | TechCrunch Japan 2019年9月20日ニュース「砂糖の取り過ぎがメタボになる原因が分かった 名大グループが解明」 | SciencePortal  "
    },
    {
      "title": "IT 業界の醜聞",
      "section": "remark",
      "description": "対岸の火事ほど面白い見世物はない。日本にも延焼すればいいのに。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/scandal/",
      "published": "2019-09-21T04:38:47+00:00",
      "update": "2019-09-23T09:41:02+00:00",
      "content": " この手の醜聞には全く興味がないのだが， Creative Commons の言い訳じみた記事を見て「これは面白いことになるか？」と思ってたらホンマに面白いことになっているようだ。\n対岸の火事ほど面白い見世物はない。 日本にも延焼すればいいのに。 せいぜいメディアの前で踊ってください（笑）\nちうわけでブックマークとしてまとめておく。\n How an Élite University Research Center Concealed Its Relationship with Jeffrey Epstein | The New Yorker  ブログ: どのように、エリート大学の研究センターがジェフリー・エプスタインとの関係を隠したか  Message to the Creative Commons Community Regarding Joi Ito - Creative Commons In 2011, Jeffrey Epstein Was A Known Sex Offender. Jeff Bezos, Elon Musk, And Sergey Brin Shared A Meal With Him Anyway  ブログ: 2011年、ジェフリー・エプスタインは周知の性犯罪者だったにも関わらず、Amazon、Google、Teslaの創設者たちは彼と食事を共にした  少女人身売買のエプスタイン事件、テック業界の関わりは？ | ギズモード・ジャパン Stallman's final interview as FSF president: Last week we quizzed him over Microsoft visit. Now he quits top roles amid rape remarks outcry • The Register  ブログ: FSF理事としてのストールマンの最後のインタビュー: 先週、マイクロソフトの訪問について彼に質問しました。 今、彼はエプスタインの電子メールの嵐の中でトップの役割を辞めます  ジェフリー・エプスタインからの寄付をめぐるMITメディアラボと伊藤穣一の火だるま状態はともかくとして、ローナン・ファローのタイムリーな新刊が出る - YAMDAS現更新履歴 A reflection on the departure of RMS - Thomas Bushnell, BSG - Medium  ブログ: RMSの辞任に関する意見   （本記事とはなんの関係もない）参考図書  ボヘミアの醜聞 原題: A Scandal in Bohemia ドイル アーサー・コナン 大久保 ゆう (翻訳)  1998-12-28 (Release 2014-09-17) 青空文庫 226 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  『シャーロック・ホームズの冒険』に収録された作品のひとつ。「あの女」アイリーン・アドラー登場。\nreviewed by Spiegel on 2019-09-21 (powered by aozorahack)\n  シャーロック・ホームズの冒険 (シャーロック・ホームズ全集 3) アーサー・コナン ドイル Arthur Conan Doyle (原著), Richard Lancelyn Green (原著), 小林 司 (翻訳), 東山 あかね (翻訳), 高田 寛 (翻訳) 河出書房新社 単行本 4309610439 (ASIN), 9784309610436 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「シャーロック・ホームズ」シリーズの邦訳はいくつかあるが，これはオックスフォード大学版の注釈や解説まで完備された濃い内容である。さすがシャーロッキアンは業が深い（笑）\nreviewed by Spiegel on 2019-09-21 (powered by PA-API)\n "
    }
  ]
}
