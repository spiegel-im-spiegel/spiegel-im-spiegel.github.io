{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "拙作 gorak/errs パッケージの性能評価をしてもらった",
      "section": "remark",
      "description": "ありがとうございます 🙇",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/06/benchmark-for-errs-package/",
      "published": "2023-06-24T01:06:56+00:00",
      "update": "2023-06-24T01:09:59+00:00",
      "content": "こんなマイナーなパッケージの性能評価をしていただいてありがとうございます \u0026#x1f647; いや，マジで。\n次なるpkg/errorsを探して - カンムテックブログ 次なる pkg/errors を探してを読んで - 薄いブログ pkg/errors は昔から人気の高いエラーハンドリング・パッケージで，私も随分お世話になった。 このパッケージの更新が止まって read-only になったのに伴い代替となるパッケージが望まれていたのは知っている。 で，登場したのが cockroachdb/errors パッケージなわけだ。\ncockroachdb/errors パッケージは，おそらく CockroachDB などのデータベース操作に向いたエラーハンドリング・パッケージと思われ， pkg/errors との互換性を維持したまま PII (Personally Identifiable Information) のマスキングもできる優れものである。 pkg/errors からの乗り換えを考えるなら cockroachdb/errors パッケージはアリな選択だと思うし個人的にもお勧めである。\n一方で拙作の goark/errs はもう少し違うところを目指していて\n任意の error インスタンスをラッピングすることに主眼を置く 任意の error インスタンスを原因エラーとして埋め込み可能 任意のコンテキスト情報を埋め込み可能 既定でエラーが発生した関数名をコンテキスト情報として保持する 構造化されたエラー情報を JSON 形式で出力可能 MarshalJSON() メソッド完備 書式 %+v を使って JSON 形式で出力 任意の error インスタンスで（Unwrap メソッドの挙動に従い）可能な限り構造を辿って出力 といった機能を有している。 もちろんこれは pkg/errors パッケージに対するささやかな不満から来ている。\n私は「スタック情報は9割以上がノイズ」「藁束の中から金の針を探すようなもの」という危険思想の持ち主なので，どういう形であれスタック情報を丸ごとどーんと出力することはしないようにしている。 他人様が書いた Java コードのデバッグでカジュアルにスタックトレースを吐き出しやがる（しかもそれを見ても結局分からずデバッガを動かす羽目になる）のに辟易してたというのもある。\nそれならスタック情報はエラーを吐き出した関数名を保持するのみとし，あとはエラーに至る「文脈（context）」をできる限りかき集めてエラー・インスタンスに突っ込むという戦略のほうが幾らかマシだろう，と考えたのだ。 どうしても関数呼び出しの構造が欲しければ，エラーを検出した時点で都度ラッピングしていけばいいという考え方である。\nところで最初に挙げた記事では\n出力の処理は json.Marshal と fmt.Sprintf を使っています。 json.Marshal を高速化するために goccy/go-json に変えるのもありかもしれません。 https://orisano.hatenablog.com/entry/2023/06/21/231349より と評価をいただいていて， JSON の marshalling については（一瞬心が揺らいだが）性能がよくてもサードパーティのパッケージには依存したくないというのがあるので，パスさせていただくが， fmt.Sprintf に関しては正直に言って実装をサボっているだけなので，少し改善してみることにした。\nまずは miyataka/benchmark_pkg_errors_alternatives を拝借して改めてベンチマークをとってみる。 他のパッケージと比べても仕方がないので goark/errs を使った結果のみ示すと\nbenchmark ns/op B/op allocs/op BenchmarkErrors/goark/errs-stack-10-12 2746 648 7 BenchmarkErrors/goark/errs-stack-100-12 3278 648 7 BenchmarkErrors/goark/errs-stack-1000-12 6810 648 7 BenchmarkStackFormatting/goark/errs-%s-stack-10-12 167.3 8 1 BenchmarkStackFormatting/goark/errs-%v-stack-10-12 185.0 8 1 BenchmarkStackFormatting/goark/errs-%+v-stack-10-12 8680 1401 33 BenchmarkStackFormatting/goark/errs-%s-stack-30-12 174.8 8 1 BenchmarkStackFormatting/goark/errs-%v-stack-30-12 180.4 8 1 BenchmarkStackFormatting/goark/errs-%+v-stack-30-12 8826 1401 33 BenchmarkStackFormatting/goark/errs-%s-stack-60-12 170.0 8 1 BenchmarkStackFormatting/goark/errs-%v-stack-60-12 160.5 8 1 BenchmarkStackFormatting/goark/errs-%+v-stack-60-12 8636 1401 33 うっ，アロケート回数が33回とか orz\n凹みつつも JSON データ生成部分でなるべく fmt.Sprintf を使わないようにした v1.2.3 をリリースした。\nRelease v1.2.3 · goark/errs · GitHub これを使って同じ条件でベンチマークをとってみたのだが\nbenchmark ns/op B/op allocs/op BenchmarkErrors/goark/errs-stack-10-12 2850 648 7 BenchmarkErrors/goark/errs-stack-100-12 3344 648 7 BenchmarkErrors/goark/errs-stack-1000-12 6365 648 7 BenchmarkStackFormatting/goark/errs-%s-stack-10-12 167.7 8 1 BenchmarkStackFormatting/goark/errs-%v-stack-10-12 164.6 8 1 BenchmarkStackFormatting/goark/errs-%+v-stack-10-12 7098 1385 31 BenchmarkStackFormatting/goark/errs-%s-stack-30-12 171.8 8 1 BenchmarkStackFormatting/goark/errs-%v-stack-30-12 171.5 8 1 BenchmarkStackFormatting/goark/errs-%+v-stack-30-12 6974 1385 31 BenchmarkStackFormatting/goark/errs-%s-stack-60-12 173.9 8 1 BenchmarkStackFormatting/goark/errs-%v-stack-60-12 164.8 8 1 BenchmarkStackFormatting/goark/errs-%+v-stack-60-12 7097 1385 31 ちょっとしか変わらん orz やっぱ json.Marshal を使ってるのがあかんのか？ そもそも改善になってない？\n\u0026hellip;というわけで諦めました。 こんなのでよろしければ使ってやってください。\nそうそう errors.Join 互換の関数ってあったほうがいいのかなぁ。 それをするにはマルチエラー用の型を作らないといけないのだが\u0026hellip; これはちょっと考えてみてもいいかも。\nブックマーク Go のエラーハンドリング Go 言語用エラーハンドリング・パッケージ Zap と go-log を試す 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\nデベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n"
    },
    {
      "title": "Generative AI は Copyright-Safe か？",
      "section": "remark",
      "description": "文化庁の資料みても分からん",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/06/is-generative-ai-copyright-safe/",
      "published": "2023-06-19T12:30:47+00:00",
      "update": "2023-06-19T23:07:28+00:00",
      "content": "おー，久しぶりにこのセクションに書くな。 ここ最近いろいろあって，ブログ記事を書く気分じゃなかった。 まぁ，ここのポリシーは「書きたくないときには書かない」だから（笑） 徐々に復帰\u0026hellip; できるといいねぇ。\nGenerative AI は Copyright-Safe か？ 起点はこの記事。\n生成AI、画像の特徴が似ていれば「著作権侵害」にあたる？ 文化庁の最新見解を読み解く - 弁護士ドットコム この記事で紹介されている文化庁の資料ってのがこれらしい。\nＡＩと著作権の関係等についてより いやいや。 これじゃ分からんが！ しょうがない。 最初に挙げた記事を参考に見ていこう。\n著作権侵害の要件は大きく分けると「既存著作物との同一性・類似性」と「既存著作物への依拠性」の2つです。\n前者の「既存著作物との同一性・類似性」について、AIは関係ありません。これまでの膨大な判例を元に、判断基準がほぼ確立しています。\nたとえ「作風・画風」が類似していたとしても、「同一性・類似性」があることにはなりません。これは文化庁の資料に記載されているとおりです。\n生成AI、画像の特徴が似ていれば「著作権侵害」にあたる？ 文化庁の最新見解を読み解くより となると，問題は「既存著作物への依拠性」というわけだ。 これについて件の記事では以下のように示している。\n（1）生成者が既存著作物を知っているか → 知っていれば依拠性あり、知らなければ（2）に\n（2）既存著作物が学習用データに含まれているか →含まれていなければ依拠性なし、含まれていれば（3）へ\n（3）当該学習用データ（画像）を学習過程で用いる際に、特定のテキストと、当該データ（画像）の表現上の本質的特徴が強固に結びついているか →結びついていなければ依拠性なし、結びついていれば（4）へ\n（4） 利用段階で（3）における「特定のテキスト」をプロンプトとして入力しているか →入力していれば依拠性あり、入力していなければ依拠性なし（独自創作）\n生成AI、画像の特徴が似ていれば「著作権侵害」にあたる？ 文化庁の最新見解を読み解くより これならだいぶ分かりやすい。 フローチャートっぽく書くとこんな感じか。\ngraph TB A([start])--\u003eB{生成者が既存著作物を\\n知っているか} B--知ってる--\u003eZ([依拠姓あり]) B--知らない--\u003eC{既存著作物が\\n学習用データに\\n含まれているか} C--含まれていない--\u003eX([依拠姓なし]) C--含まれている--\u003eD{学習過程で\\n特定のテキストと\\nデータが強固に\\n結びついているか} D--結びついていない--\u003eX D--結びついている--\u003eE{特定のテキストを\\nプロンプトとして\\n入力しているか} E--入力していない--\u003eX E--入力している--\u003eZ んー。 イマイチ。 まぁいいや。 これを見ると判断のポイントが3つあることが分かる。 すなわち\n学習用データ 学習過程 プロンプト である。\nつまり生成物を公表する際，著作権侵害にあたるかどうかを判断するために上の3つの情報開示を要求される可能性があるということだ。 そして，この要求に応えられないサービスは copyright-safe とは言えないのではないかと思う。 また，利用者は生成時のプロンプトが（おそらくサービスプロバイダ経由で）開示される可能性を考慮する必要がある。\nさらに記事では「AI開発・学習段階でも「著作権侵害」の可能性あり？」として\nAIの文脈に即して少し抽象化すると「学習対象著作物の『表現上の本質的な特徴』を感じ取れるような著作物の作成を目的として、学習対象著作物から必要な情報を抽出する」行為と言い換えることができます。\n要は「学習行為」（情報解析行為）であっても、当該学習行為の結果生成されたAIモデルからの出力が著作権侵害に該当する可能性がある場合には、享受利用に該当するという解釈なのでしょう。\n生成AI、画像の特徴が似ていれば「著作権侵害」にあたる？ 文化庁の最新見解を読み解くより と解説し，さらに\nこの考え方は、「AI開発・学習段階」と「生成・利用段階」を分けて考えるべきとしつつ、結局「生成・利用段階」での著作権侵害の可能性を理由に、前段階である学習行為（情報解析行為）を制限しようとする考え方なので、条文解釈として個人的には疑問があります。\n「学習行為」というある著作物の利用行為の「享受」「非享受」の判断において、まだ現実に生じていない著作権侵害の可能性を考慮することができるのかということです。「どのような場合にAI学習を制限すべきか」という重要論点は、これからさらに議論が進んでいくのではないでしょうか。\n生成AI、画像の特徴が似ていれば「著作権侵害」にあたる？ 文化庁の最新見解を読み解くより と意見を述べている。 実は日本は言われているほど「AI 天国」ではないということかもしれない。\n【おまけ】 享有と享受 話が横滑りしてスマン。\n上で出てきた「享受」という法律用語は著作権法の「著作権の制限」に出てくる。 たとえば第三十条の四は「著作物に表現された思想又は感情の享受を目的としない利用」について書かれている。\n第三十条の四　著作物は、次に掲げる場合その他の当該著作物に表現された思想又は感情を自ら享受し又は他人に享受させることを目的としない場合には、その必要と認められる限度において、いずれの方法によるかを問わず、利用することができる。ただし、当該著作物の種類及び用途並びに当該利用の態様に照らし著作権者の利益を不当に害することとなる場合は、この限りでない。 著作権法より これで思い出したのが山田奨治さんの『著作権は文化を発展させるのか: 人権と文化コモンズ』だった。 たとえば著作権法第十七条「著作者の権利」には\n第十七条　著作者は、次条第一項、第十九条第一項及び第二十条第一項に規定する権利（以下「著作者人格権」という。）並びに第二十一条から第二十八条までに規定する権利（以下「著作権」という。）を享有する。 著作権法より とある。 享有とか享受とかって難しい言葉がさらっと書いてあるよね。 しかも『人権と文化コモンズ』には\n実は民法でいう「私権の享有」は、辞書的な意味とはやや異なり権利能力（権利の主体となるができる法律上の資格、または地位）のことを言う。そして、「私権の享有は出生に始まる」は、「権利を持つのは、生まれた時からである」の意味になる（大村 2007：24）。「享有」はたんに「持つ」ことであって、「生まれながら」は含まない。（p.32） 著作権は文化を発展させるのか: 人権と文化コモンズより とか書いてあって「うへぇ」となった。 『人権と文化コモンズ』には享有や専有といった用語についてかなり深く考察しているので，読んでみることをお勧めする。\n享受は享有と対になる言葉っぽいが，英語ではどちらも enjoy が法律用語として充てられているそうな（これも『人権と文化コモンズ』に書いてあった）。 前節の記事に出てくる「享受」を脳内で enjoy と読み直せばもう少し分かりやすくなるかもしれない（笑）\n法律（用語）は難しいぜ。\nブックマーク ウェブをますます暗い森にし、人間の能力を増強する新しい仲間としての生成AI – WirelessWire News AI は「創作者様」を引きずり下ろすか — 『人権と文化コモンズ』を流し読む 参考文献 著作権は文化を発展させるのか: 人権と文化コモンズ 山田 奨治 (著) 人文書院 2021-07-29 (Release 2021-07-29) Kindle版 B099RTG3J7 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 著作権を「ユーザーの人権」という観点から捉え直す。その後 文化→コモンズ→文化コモンズ と進み，本当の意味で「文化の発展に寄与する」とはどういうことか考察していく。 reviewed by Spiegel on 2022-10-23 (powered by PA-APIv5)\n日経サイエンス2023年5月号（特集：対話するAI　ChatGPT） 日経サイエンス編集部 (編集) 日経サイエンス 2023-03-25 (Release 2023-03-25) 雑誌 B0BXQ2HMQ5 (ASIN), 4910071150534 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 日経嫌いなので近年は買わないようにしてたのだが，今回は特集記事が面白そうだったのでポチった。 ChatGPT というか LLM について勉強したいなら買っておいて損はないと思う。\nreviewed by Spiegel on 2018-03-19 (powered by PA-APIv5)\n"
    },
    {
      "title": "GnuPG 2.4.2 のリリースと Mastodon 公式アカウントができた話",
      "section": "release",
      "description": "脆弱性の修正はなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2023/06/gnupg-2_4_2-is-released/",
      "published": "2023-06-11T01:28:34+00:00",
      "update": "2023-06-11T01:28:45+00:00",
      "content": "毎度遅まきながらで申し訳ないが GnuPG 2.4.2 がリリースされた。\n[Announce] GnuPG 2.4.2 released 脆弱性の修正はなし。 その他の改修ポイントは以下の通り。\ngpg: Print a warning if no more encryption subkeys are left over after changing the expiration date. [rGef2c3d50fa] gpg: Fix searching for the ADSK key when adding an ADSK. [T6504] gpgsm: Speed up key listings on Windows. [rG08ff55bd44] gpgsm: Reduce the number of \u0026ldquo;failed to open policy file\u0026rdquo; diagnostics. [rG68613a6a9d] agent: Make updating of private key files more robust and track display S/N. [T6135] keyboxd: Avoid longish delays on Windows when listing keys. [rG6944aefa3c] gpgtar: Emit extra status lines to help GPGME. [T6497] w32: Avoid using the VirtualStore. [T6403] via GnuPG 2.4.2 released GnuPG 関連パッケージ GnuPG 関連の各パッケージのバージョンは以下の通り（数字は大体のビルド順）。\n# パッケージ名 バージョン 公開日 更新 1 Libgpg-error 1.47 2023-04-06 2 Libgcrypt 1.8.10 (LTS) 2023-01-05 Libgcrypt 1.10.2 2023-04-06 3 Libassuan 2.5.5 2021-03-22 4 Libksba 1.6.3 2022-12-06 5 nPth 1.6 2018-07-16 6 ntbTLS 0.3.1 2022-04-07 7 GnuPG 2.2.41 (LTS) 2022-12-09 GnuPG 2.4.2 2023-05-30 現在 GnuPG には 2.2 系と 2.4 系があり1， 2.4 系では AEAD (Authenticated Encryption with Associated Data) 等 RFC 4880bis で検討されている機能が実装されている。 2.2 系は 2.4 系のサブセットという位置づけで，少なくとも2024年末まではサポートが続けられる予定である。\n別記事でも書いたが，どうも Ubuntu は真面目に GnuPG のメンテナンスをやる気がないようである。 なので，近々自前でビルドを行おうかと考えているが，遅々として進まず\u0026hellip;\nInstalling GnuPG 2.4 on Ubuntu 22.04 | Pro Custodibus 【余談】 GnuPG の Mastodon 公式アカウントができたらしい この前 Twitter で見かけたのだが\nNow that we lost our verification mark, we will likely move to a Mastodon: @GnuPG@mstdn.social\n\u0026mdash; GNU Privacy Guard (@gnupg) June 1, 2023 なんだそうで，本当に Mastodon にアカウントができていた。\nGnuPG (@GnuPG@mstdn.social) - Mastodon 🐘 Twitter アカウントはマークを外された状態で継続するのかな？ まぁ認証マークつってもアレって「Twitter 教にお布施しました」マークだろ，金で買えるらしいし（笑） それよりも早く GnuPG.org サイトに \u0026lt;link rel=\u0026quot;me\u0026quot;\u0026gt; 要素で連携して認証してもらいなはれ！\nこうやって Twitter を参照する理由がひとつずつ減っていくんだねぇ。\nブックマーク iquiw/pinentry-w32-ncg-binary: pinentry-w32, no characters garbled\nADSK: The Additional Decryption Subkey\nOpenPGP の実装\n参考図書 暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n厳密には1.4系もあるが，これは legacy 版と位置付けられており，よほどのバグか脆弱性がない限りは更新されない。もし今だに1.4系（あるいは既にサポートされていない2.0/2.1系）を使っているのなら2.2系以降にアップグレードすることを強くお勧めする。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Go 1.20.5 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は CVE ID ベースで4件の脆弱性修正を含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2023/06/go-1_20_5-is-released/",
      "published": "2023-06-11T00:51:55+00:00",
      "update": "2023-06-11T00:55:35+00:00",
      "content": "予告通り Go 1.20.5 がリリースされた。\n[security] Go 1.20.5 and Go 1.19.10 are released 今回は CVE ID ベースで4件の脆弱性修正を含んでいる。\nCVE-2023-29402 cmd/go: cgo code injection The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo.\nThis may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \u0026ldquo;go get\u0026rdquo;, are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).\nvia Go 1.20.5 and Go 1.19.10 are released （以下未稿）\nCVE-2023-29403 runtime: unexpected behavior of setuid/setgid binaries The Go runtime didn\u0026rsquo;t act any differently when a binary had the setuid/setgid bit set. On Unix platforms, if a setuid/setgid binary was executed with standard I/O file descriptors closed, opening any files could result in unexpected content being read/written with elevated prilieges. Similarly if a setuid/setgid program was terminated, either via panic or signal, it could leak the contents of its registers. via Go 1.20.5 and Go 1.19.10 are released （以下未稿）\nCVE-2023-29404, CVE-2023-29405 cmd/go: improper sanitization of LDFLAGS The go command may execute arbitrary code at build time when using cgo. This may occur when running \u0026ldquo;go get\u0026rdquo; on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \u0026ldquo;#cgo LDFLAGS\u0026rdquo; directive. via Go 1.20.5 and Go 1.19.10 are released これについては追加情報があって\nDue to an unfortunate mistake, this change will break the use of \u0026ldquo;#cgo LDFLAGS\u0026rdquo; directives when using -compiler=gccgo. Most people using gccgo or GoLLVM use the cmd/go that is distributed with those tools, and that is unaffected. Therefore, we will fix this in the next minor release. The current minor releases 1.20.5 and 1.19.10 are unfortunately broken for some cases when using gccgo or GoLLVM. Our apologies for the mishap. Thanks to Jeffrey Tolar for spotting the problem. via Go 1.20.5 and Go 1.19.10 are released とのこと。 gccgo や GoLLVM を使っている人は要注意である。\n（以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.20.5.linux-amd64.tar.gz）を取ってきてインストールすることを推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.20.5.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.20.5.linux-amd64.tar.gz $ sudo mv go go1.20.5 $ sudo ln -s go1.20.5 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.20.5 linux/amd64 Windows はインストールパッケージを取ってきて直接インストールする。 Scoop 経由でも OK\n複数バージョンの Go コンパイラを扱いたい場合は\n$ go install golang.org/dl/go1.20.5@latest $ go1.20.5 download $ go1.20.5 version go version go1.20.5 linux/amd64 てな感じで導入できる。\nアップデートは計画的に。\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n"
    },
    {
      "title": "お散歩カメラ 2023-06-03",
      "section": "remark",
      "description": "千本ダムと日野目天神社 / 今日も7%勾配を越えて松江城へ / 久しぶりのお好み焼 / さぁ，帰りませう",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/06/03-osanpo-camera/",
      "published": "2023-06-03T11:10:48+00:00",
      "update": "2023-06-03T11:21:28+00:00",
      "content": "今回の台風，本州直撃こそなかったけど四国から紀伊半島・東海・関東と前線の雨雲が居座って大変だったみたいですねぇ。 お見舞い申し上げます。\n私の居る松江市は防災無線が鳴ることもなく夕方には晴れ上がっていました。\n台風一過 | Flickr というわけで，今日は自転車でお出かけするしかない！\n千本ダムと日野目天神社 とりあえず忌部 (いんべ) の千本ダムに行くべ。 というわけで，行ってきた。\n松江 千本ダム | Flickr 周辺を歩いて散策しようと思ったが，草刈りとか側溝の掃除とかされてる方々が沢山いたので，遠慮して千本水神社のお参りだけしておいた。\n松江 千本水神社 | Flickr おおっ！ ちゃんと周辺の草刈りがされている。 お疲れ様です。\n折角なのでもう少し足を延ばして「日野目天神社 (ひのめてんじんじゃ) 」まで行ってみた。\n松江 日野目天神社 | Flickr 本殿？ ていうか祠？ はこんな感じ。\n松江 日野目天神社 | Flickr 今日も7%勾配を越えて松江城へ 神社巡りに満足したので取って返してコメダで休憩。\nコメダで休憩中 | Flickr やっぱコメダは小倉トーストだよね。\n充分身体を休めたら，今回も7%勾配の陸橋を登るです。\n行くぜ！ 7%勾配 | Flickr そのまま宍道湖沿いをゆっくり流す。 おっ，釣り船が出てるな。\n今日の宍道湖 釣り人の人 | Flickr そのまま島根県立図書館まで行き，駐輪場に自転車を止めて松江城に登ってみる。\n今日の松江城 | Flickr ついでに大山も撮ってみたが写真じゃほぼ分からんな（笑）\n今日の大山 from 松江城 | Flickr そうそう。 今日のバードウォッチング。\n今日のバードウォッチング | Flickr セグロセキレイかな。 この辺の野鳥ってあんまり人を恐れないよね。 走ってる自転車の前を平気で横切ったりするし。 私のほうがビビるっての。\nこのあとは周辺をウロウロしたり図書館で和んだり。\n久しぶりのお好み焼 昼になったのでなに食おうか考えて「ラーメンでも食いに行くか」と思ったのだが，そういえば職場の人が「島根大学の近くに広島のお好み焼のお店ができた」と言っていたのを思い出した。 ちょろんと行ってみるべ。 混んでたら諦める。 ここかな？\nお好み焼 | Flickr 運良く席が空いてた。 「広島焼き」でも「広島風」でも「お好み焼き1」でもなく「お好み焼」のお店。 さっそく肉玉そばを注文する。\n久しぶり、肉玉そば | Flickr というわけで，今日のメシ活でした。\nさぁ，帰りませう このあとは，楽山公園経由で図書館に戻り，夕方まで読書。 時間が来たのでまた宍道湖沿いをのんびり帰った。\n今日の宍道湖 | Flickr 今日もたくさん動いた。 Fitbit の報告によると18K歩以上歩いたことになっている（自転車での移動も含む）。\n明日はのんびりしよう。\nそうそう。 日焼け止めを塗り忘れて腕とか真っ赤になってしまった。 次回は忘れないようにしないと。 これからは通勤時も日焼け止めがいるかな。\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\n[FAIRWEATHER(フェアウェザー)] stem bag x-pac/coyote FAIRWEATHER(フェアウェザー) B08K34WLXD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; スポーツサイクルのステム部分に取り付けられる小物入れ。防水仕様。底に小さなハトメ穴が空いていて，万一水が入った場合でも排出できるようになっている。\nreviewed by Spiegel on 2023-05-03 (powered by PA-APIv5)\nFitbit Inspire2 フィットネストラッカー Black ブラック L/Sサイズ [日本正規品] Fitbit (Release 2020-10-02) エレクトロニクス B08FSBNJG8 (ASIN), 0810038852805 (EAN), 810038852805 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 私の場合，心拍数がモニタできればいいので充分な性能。\nreviewed by Spiegel on 2022-12-26 (powered by PA-APIv5)\n明治 ヴァーム(VAAM) アスリート 顆粒 栄養ドリンク風味 4.7g×10袋 明治 (Release 2021-03-16) ヘルスケア\u0026amp;ケア用品 B08VMWL13F (ASIN), 4902705035614 (EAN) 運動時に脂肪をエネルギーに変えやすくする働きがあるらしい。お試しで買ってみた。とりあえず1時間以上自転車に乗る場合に服用している。水に溶かさず飲むと書いてあるが，水と一緒に飲まないと大変なことになるので注意（経験済み）\nreviewed by Spiegel on 2022-11-04 (powered by PA-APIv5)\nビオレUＶ アクアリッチ アクアプロテクトミスト 60ミリリットル (x 1) 花王 (Release 2023-02-08) ヘルスケア\u0026amp;ケア用品 B0BT1X9H7B (ASIN), 4901301416438 (EAN) 同じメーカーの日焼け止め（乳液タイプ）をドラッグストアで買ったのだが，自転車に乗るならこっちのほうがいいかなぁ。次に買うときはこれを試してみよう。\nreviewed by Spiegel on 2018-06-03 (powered by PA-APIv5)\n広島の「お好み焼」は後ろに送り仮名がつかないのよ。細かい話だけど，こだわる人もおるけぇね。気ぃつけなはれや！\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "2023-05-28 のブックマーク",
      "section": "bookmarks",
      "description": "「ウォーホル作品に米最高裁が著作権侵害の判断。「裁判官は美術評論家ではない」」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2023/05/28-bookmarks/",
      "published": "2023-05-28T00:23:06+00:00",
      "update": "2023-05-28T00:23:26+00:00",
      "content": "リリース情報 Release v1.2023.8 · plantuml/plantuml · GitHub Release v9.0.0: Release Wasmtime 9.0.0 (#6418) · bytecodealliance/wasmtime · GitHub Release v9.0.1: Release Wasmtime 9.0.1 (#6436) · bytecodealliance/wasmtime · GitHub Release v9.0.2: Release Wasmtime 9.0.2 (#6475) · bytecodealliance/wasmtime · GitHub Release v0.81.0 · anchore/syft · GitHub Release v0.82.0 · anchore/syft · GitHub Release v0.112.0 · gohugoio/hugo · GitHub Release v0.112.1 · gohugoio/hugo · GitHub Release v0.112.2 · gohugoio/hugo · GitHub Release v0.112.3 · gohugoio/hugo · GitHub Release v3.25.0 · go-task/task · GitHub Release Windows Terminal v1.17.11391.0 · microsoft/terminal · GitHub Mozillaが「Firefox 113.0.2」を公開 - 窓の杜 Release 10.2.0 · mermaid-js/mermaid · GitHub Release 1.42.0 · tailscale/tailscale · GitHub 「Thunderbird 102.11.1」が公開 ～IMAP関連の処理でフリーズする不具合などを修正 - 窓の杜 セキュリティ＆プライバシー関連 富士通JapanのMICJETで相次ぎ発生した証明書誤交付についてまとめてみた - piyolog Twitterで削除したはずのツイートとリツイートが勝手に復元されてしまうバグが発覚、自分の過去の削除ツイートが本当に消えているかどうか要確認 - GIGAZINE Proton launches family subscription plan for privacy app suite starting at $20 per month | TechCrunch 知財関連 「他人のツイートをスクショして投稿」を違法とした判決、なぜ知財高裁で覆ったのか？ - 弁護士ドットコム ウォーホル作品に米最高裁が著作権侵害の判断。「裁判官は美術評論家ではない」｜ARTnews JAPAN 応用美術の著作権をめぐる議論への更なる一石。 - 企業法務戦士の雑感 ～Season2～ Linux または Ubuntu に関する話題 Ubuntu 23.10 その5 - PPAの認証鍵とセキュリティーの向上 - kledgeb Ubuntu 23.10 その4 - OpenSSLの採用バージョン検討 - kledgeb RHELクローンOSのAlmaLinuxにMIRACLE LINUXが合流を発表。国内でAlmaLinuxのサポートも提供開始 － Publickey Microsoft 製品（Azure や Windows 等） に関する話題 Bringing the power of AI to Windows 11 - unlocking a new era of productivity for customers and developers with Windows Copilot and Dev Home - Windows Developer Blog ［速報］WindowsにチャットAIを搭載「Windows Copilot」発表、サイドバーから利用可能。6月にプレビュー版が登場予定。Build 2023 － Publickey ［速報］開発環境を丸ごとクラウドPC化する「Microsoft Dev Box」、7月に正式リリースと発表。Build 2023 － Publickey ［速報］マイクロソフト、開発環境向けにビルド高速化を実現する「Dev Drive」発表、新ファイルシステムなど採用。Build 2023 － Publickey RAR圧縮形式が誕生から30年を経てWindowsでネイティブサポートされることに、7z・tar・gzも追加 - GIGAZINE 「Windows 11 バージョン22H2」環境の日本語音声認識の問題は解決 ～Microsoftが公表 - 窓の杜 Windows 10/11でファイルの保存やコピーが断続的に失敗する現象 ～Microsoftが認める - 窓の杜 「Windows 11 バージョン 22H2」が「Bluetooth LE Audio」に対応 ～来月実装予定の機能が先行公開 - 窓の杜 「Windows Terminal」がようやくD＆Dによるタブの分離に対応、v1.18でプレビュー - 窓の杜 Go 言語関連 GitHub - bep/simplecobra: A simpler API for the popular Cobra CLI. : 実装上の使い勝手が Cobra と変わらないなら試す価値あり 天文関連 APOD: 2023 May 22 – Supernova Discovered in Nearby Spiral Galaxy M101 Generative AI ASCII.jp：画像生成AIに2度目の革命を起こした「ControlNet」 (1/4) 社内プロンプトインジェクションという生成系AIリスク｜塚本 牧生 ［速報］マイクロソフト、ChatGPTとCopilotのプラグイン共通化を発表。プラットフォーム化とエコシステムを促進。Build 2023 － Publickey その他 IBM、G7で東大らと10万量子ビットコンピューター開発に向け合意 - ZDNET Japan ai | manga レガシーコードとどう付き合うか | めもりー | 工学 | Kindleストア | Amazon 人工知能規制、資本主義批判、民主主義再考 – WirelessWire News WirelessWire News連載更新（人工知能規制、資本主義批判、民主主義再考） - YAMDAS現更新履歴 ライアン・ノースのポピュラーサイエンス本『キミにもできる世界征服』が7月に出るぞ - YAMDAS現更新履歴 : 面白そう Intel、新「X86-S」アーキテクチャで8086互換を切り捨て - PC Watch O\u0026rsquo;Reilly Japan - ソフトウェア設計のトレードオフと誤り : PDF 版を購入 毎月変わるTwitterアイコン制作について - cuco(o0ω0o)log : 今でも毎月アイコンを更新されているそうな。凄いな さくらインターネット、会員登録不要で無償利用可能なオンラインシェル環境 「さくらのクラウドシェル」を2023年5月25日より提供開始 | さくらインターネット IIJ、社内開発した文書共有アプリをOSSとして無償公開 - ZDNET Japan 「Thunderbird」のロゴが新しくなる ～初期リリース以来の大刷新 - やじうまの杜 - 窓の杜 "
    },
    {
      "title": "お散歩カメラ 2023-05-27",
      "section": "remark",
      "description": "今日の実績解除： コメダ ブラックモンブラン コラボメニュー制覇 / 松江市役所 新庁舎見学",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/05/26-osanpo-camera/",
      "published": "2023-05-27T11:03:36+00:00",
      "update": "2023-05-27T11:04:23+00:00",
      "content": "今日の目標は2つ。\nコメダの「シロノワール×ブラックモンブラン」をいただく 松江市役所の新庁舎を見学する めがっさ暑かったっス。 なので今日は Go 言語Tシャツでサイクリングしてました。\n今日はGo言語Tシャツを着てサイクリングしてます | Flickr シロノワール×ブラックモンブラン 記事にはしてないが，実は以前にコメダで「クロネージュ×ブラックモンブラン」はいただいてたのよ。 冷たいのと温かいのの組み合わせサイコー！ ということで「シロノワール×ブラックモンブラン」も機会を狙ってたのだが，今日決行することにした。\nシロノワール×ブラックモンブラン | Flickr ちょっとチョコかかり過ぎやろ！と思ったが，美味かったっス。 満足した。 これで思い残しはない。 次回から小倉トーストに戻ろう。 やっぱアンコが一番（笑）\nただ，ここで問題が。 コメダを出て自転車で走ってる間に微妙に胃もたれががが。 あれしきのスイーツで胃もたれするとか，どんだけ少食になってしまったのか。 おかげで今回は昼食を抜きました。 まぁ，カロリー的には全然問題なかったし（低血糖もなかった）。\n楽山公園チャレンジ 2 GW以来行ってない楽山公園に行くことを思いつく。 キツい坂はないし，腹ごなしには丁度いいだろう。\nさらっと坂を登ってお池の写真を撮る。\n松江 楽山公園 | Flickr 楽山公園の池は蓮の花で有名なのだがまだ葉っぱも出てないな（てか，蓮あるのか？）。 夏頃にまた行ってみよう。\n今日の松江城 楽山公園から移動して県立図書館の駐輪場に自転車を停める。 ついでに松江城に登ってみるか。\n今日の松江城 | Flickr 大山もギリギリ見えた。\n今日の大山 from 松江城 | Flickr おっ。 アオサギの巣が賑やかになってるな。\n今日のバードウォッチング | Flickr 松江市役所 新庁舎 では，いよいよ松江市役所の新庁舎へ行ってみますか。\n新庁舎を対岸から見るとこんな感じ。\n松江市役所 新庁舎 | Flickr けっこう人が居るな。 2階のテラスへは外階段から行ける。\n松江市役所 新庁舎 外階段 | Flickr 2階テラスからの眺めはこんな感じ。\n松江市役所 新庁舎 2階テラスより | Flickr 3階と4階のテラスに行くには一度庁舎の中に入らなくてはいけないらしい（休日限定？）。 上階のテラスに行ってもよかったのだが，5階にある市議会の議場が見学できるらしい。\n松江市役所 新庁舎 2階から5階の議場まで行ってみる | Flickr というわけで，5階に行ってみた。 おおっ。 議会図書館がある。\n松江市役所 新庁舎 議会図書館 | Flickr 係の人に一般の人も議会図書館を利用できるか訊いてみたが，分からないと言われた。\nそうそう。休日なのに庁舎内のいたるところに案内（？）の人が立ってるのよ。 え？ もしかして職員？ それともパートタイムで雇われてるとか？ どっちにしても休日に大変だよなぁ。 いや，私みたいに呑気に見学に来てる人が多いし（要らん所に入られんよう）必要なことなんだろうけど。\n気を取り直して。 議場へ。\n松江市議会 議場 | Flickr おー。 こんな感じなんだ。 傍聴席はこんな感じ。\n松江市議会 議場 傍聴席 | Flickr なかなか楽しかった。 普通，用もないのに市役所内をウロウロすることなんてないので，いい機会に恵まれました。\nさて帰るべ 市役所見学の後は図書館でしばらく引きこもり，気が済んだら帰り支度。 最後はいつもどおり宍道湖の写真で。\n今日の宍道湖 | Flickr 今日もたくさん動いた。 Fitbit の報告によると15K歩以上歩いたことになっている（自転車での移動も含む）。\n明日はのんびりしよう。\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\n[FAIRWEATHER(フェアウェザー)] stem bag x-pac/coyote FAIRWEATHER(フェアウェザー) B08K34WLXD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; スポーツサイクルのステム部分に取り付けられる小物入れ。防水仕様。底に小さなハトメ穴が空いていて，万一水が入った場合でも排出できるようになっている。\nreviewed by Spiegel on 2023-05-03 (powered by PA-APIv5)\nFitbit Inspire2 フィットネストラッカー Black ブラック L/Sサイズ [日本正規品] Fitbit (Release 2020-10-02) エレクトロニクス B08FSBNJG8 (ASIN), 0810038852805 (EAN), 810038852805 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 私の場合，心拍数がモニタできればいいので充分な性能。\nreviewed by Spiegel on 2022-12-26 (powered by PA-APIv5)\n明治 ヴァーム(VAAM) アスリート 顆粒 栄養ドリンク風味 4.7g×10袋 明治 (Release 2021-03-16) ヘルスケア\u0026amp;ケア用品 B08VMWL13F (ASIN), 4902705035614 (EAN) 運動時に脂肪をエネルギーに変えやすくする働きがあるらしい。お試しで買ってみた。とりあえず1時間以上自転車に乗る場合に服用している。水に溶かさず飲むと書いてあるが，水と一緒に飲まないと大変なことになるので注意（経験済み）\nreviewed by Spiegel on 2022-11-04 (powered by PA-APIv5)\n"
    },
    {
      "title": "2023-05-21 のブックマーク",
      "section": "bookmarks",
      "description": "「チャットGPTは ロビー活動をどう変えるか」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2023/05/21-bookmarks/",
      "published": "2023-05-21T01:13:22+00:00",
      "update": "2023-05-21T01:15:08+00:00",
      "content": "リリース情報 「Thunderbird 102.11.0」がリリース ～脆弱性の修正は8件 - 窓の杜 Release Release 2.7.5 · keepassxreboot/keepassxc · GitHub KeePassXC 2.7.5 released – KeePassXC Release v0.12.1 · nyaosorg/go-readline-ny · GitHub Release v0.12.2 · nyaosorg/go-readline-ny · GitHub Release v0.12.3 · nyaosorg/go-readline-ny · GitHub Release v0.13.0 · nyaosorg/go-readline-ny · GitHub Release v0.8.0 · hymkor/sqlbless · GitHub リリースされたばかりの「Firefox 113」に複数の表示関係の不具合 - 窓の杜 Release v0.9.1 · hymkor/go-multiline-ny · GitHub Release v0.10.0 · hymkor/go-multiline-ny · GitHub Release v0.11.0 · hymkor/go-multiline-ny · GitHub セキュリティ＆プライバシー関連 ヤフオク「中古スマホ出品時、マイナ証明書失効を」初期化だけでは消えない - ITmedia NEWS : 個人番号に限らず NFC 絡みは要注意だな Googleが「Google Drive」にスパムフォルダーを導入へ ～悪意あるファイルの混入を抑制 - 窓の杜 : 覗き魔 Google ウィズセキュア、富士通Japanを通じて医療機関向けにセキュリティソリューション提供 - ZDNET Japan Malware turns home routers into proxies for Chinese state-sponsored hackers | Ars Technica 中国政府の支援を受けたサイバー攻撃グループ「カマロドラゴン」がルーターにバックドアを設けネットワーク侵害を行っている - GIGAZINE New ZIP domains spark debate among cybersecurity experts Security Risks of New .zip and .mov Domains - Schneier on Security Googleの「.zip」ドメインに懸念の声 ～フィッシングに悪用されかねない問題 - やじうまの杜 - 窓の杜 フリーのパスワード管理ツール「KeePass」に脆弱性、マスターパスワードを復元される - 窓の杜 : KeePassXC にはとりあえず影響はないらしい 知財関連 無形文化遺産を祝うWiki Loves Living Heritage（がもうすぐ終わる） - YAMDAS現更新履歴 「Steam Deck」開発元のValveが特許権侵害で訴えられる - GIGAZINE Helping Flickr members understand what Flickr is for with refreshed community guidelines. | Flickr Blog : CC Licenses 絡みの言及あり Linux または Ubuntu に関する話題 Ubuntu 24.04 その1 - Ubuntu 24.04 LTSのリリーススケジュール - kledgeb Microsoft 製品（Azure や Windows 等） に関する話題 Microsoft will take nearly a year to finish patching new 0-day Secure Boot bug | Ars Technica Microsoft Secure Boot Bug - Schneier on Security Go 言語関連 TIL: Go Response Body MUST be closed, even if you don’t read it - Manish R Jain ソケット通信の仕組みをスライド図解と Go 実装でまとめてみる Python/Rust/Go/JavascriptでGmailを自動送信 - Qiita ついに TinyGo で enconding/json が使えるようになったので試してみた - sago35の日記 Goとエラーハンドリング慣習について Java 言語関連 Release v3.1.0 · spring-projects/spring-boot · GitHub Release v3.0.7 · spring-projects/spring-boot · GitHub Release v2.7.12 · spring-projects/spring-boot · GitHub Release v2.6.15 · spring-projects/spring-boot · GitHub Release v2.5.15 · spring-projects/spring-boot · GitHub 天文関連 NASA’s Webb Finds Water, and a New Mystery, in Rare Main Belt Comet | NASA MIT Tech Review: 巨大ブラックホールを取り巻く降着円盤とジェットを初めて撮影 Generative AI Pale Blue Dot continues investing in its climate vision, with a second $100M fund | TechCrunch Toyota Japan exposed millions of vehicles\u0026rsquo; location data for a decade | TechCrunch Thunderbird for Android / K-9 Mail: April Progress Report MIT Tech Review: カゴメ格子を持つ超伝導体の電子の直接観測に初成功＝東大 「Microsoft 365 Copilot」が「Microsoft Whiteboard」や「OneNote」に拡大 - 窓の杜 ［速報］Android StudioもチャットAIを搭載へ「Android Studio Bot」発表。コードの自動生成、クラッシュしたログの解析、自然言語での質問など。Google I/O 2023 － Publickey MIT Tech Review: チャットGPTは ロビー活動をどう変えるか 「ChatGPT」がWeb上の情報を使った回答に対応 ～ベータ版としてリリース - 窓の杜 GoogleのAIチャット「Bard」、要約機能を強化。回答にはソースへのリンクも - 窓の杜 グーグルの新たな大規模言語モデル「PaLM 2」は何が変わったか - ZDNET Japan 「ChatGPT Plus」、ウェブブラウジングと70種類以上のプラグインを追加へ - ZDNET Japan 画像生成AI「Stable Diffusion」の公式有料アプリ「DreamStudio」の無料版「StableStudio」がオープンソースで公開される - GIGAZINE オモシロ捏造から見える生成系AIの真価｜塚本 牧生 OpenAI launches an official ChatGPT app for iOS | TechCrunch その他 開発並びにデプロイにドキュメンテーションを統合するEtsyのDocs-as-codeの取り組み - YAMDAS現更新履歴 京セラ、個人向け携帯端末事業から撤退。日本メーカーはわずか3社に : ありゃりゃーん。次買うときは京セラって思ってたのに MIT Tech Review: 使用済み風力タービンの羽根がゴミの山に？ 再生可能にする新手法 プッシュ保護の一般提供(GA)を開始、すべてのパブリックリポジトリで無料利用が可能に - GitHubブログ GitHub、コード検索とコードビューの一般提供(GA)を開始 - GitHubブログ スマートウォッチの先駆者「Pebble」の創設者がBlackberryライクな物理キーボード付きポケットコンピューター「Beepberry」を発表 - GIGAZINE 「惰性でやっている」「ビジョンはない」 30年続くソフトウェア稼業「秀丸」がいまも最前線に立ち続ける理由 | Coral Capital 「もしマイクロソフトから買収提案があったら？」 人気テキストエディタ「秀丸」開発者に聞く“スタートアップ観” | Coral Capital 猫がキーボードを踏む問題 – Jun Mukai\u0026rsquo;s blog : ノートPCスタンドってのがあるのか 素粒子物理学に必須級のソフトウェア「FORM」の保守はたった1人の老科学者が担っている、新しい機器では使えなくなり研究が停滞する危険性 - GIGAZINE Envisioning a Simplified Intel Architecture for the Future "
    },
    {
      "title": "Zap と go-log を試す",
      "section": "golang",
      "description": "Bluesky の公式 Go パッケージで go-log が使われてるので試してみる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/zap-and-golog/",
      "published": "2023-05-20T09:14:08+00:00",
      "update": "2023-05-21T01:36:26+00:00",
      "content": "最近 Bluesky で遊んでいるのだが，これの公式 Go パッケージってのがあって\nbluesky-social/indigo: Go source code for Bluesky\u0026rsquo;s atproto services. NOT STABLE (yet) 中を見ると logger として ipfs/go-log パッケージを使ってるみたいなのね。 ipfs/go-log パッケージは zap のラッパーになっていて，特にログ出力周りの取り回しが楽になるよう設計されているっぽい。\nzap は高速な構造化ロギングを謳っている人気のログ・パッケージである。 といっても，ベンチマークを見る限り\nPackage Time Time % to zap Objects Allocated zap 1744 ns/op +0% 5 allocs/op zap (sugared) 2483 ns/op +42% 10 allocs/op zerolog 918 ns/op -47% 1 allocs/op go-kit 5590 ns/op +221% 57 allocs/op slog 5640 ns/op +223% 40 allocs/op apex/log 21184 ns/op +1115% 63 allocs/op logrus 24338 ns/op +1296% 79 allocs/op log15 26054 ns/op +1394% 74 allocs/op via uber-go/zap: Blazing fast, structured, leveled logging in Go. スピードだけなら rs/zerolog のほうがだいぶ速いように見えるのだが\u0026hellip; まぁ，でも， gRPC や分散システムなんかでは事実上の標準みたいな感じになってるし，柔軟なカスタマイズができるためクラウドのログ管理サービスとかとも相性がいいらしい。\n私個人は rs/zerolog 推しだが indigo を使うなら zap \u0026amp; go-log も使えるようになっておこうというわけで試してみることにした。 今回は特に拙作の goark/errs との相性という観点で評価してみる。\nZap を試してみる いきなりサンプルコードから。\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;github.com/goark/errs\u0026#34; \u0026#34;go.uber.org/zap\u0026#34; ) func checkFileOpen(path string) error { file, err := os.Open(path) if err != nil { return errs.New( \u0026#34;file open error\u0026#34;, errs.WithCause(err), errs.WithContext(\u0026#34;path\u0026#34;, path), ) } defer file.Close() return nil } func main() { logger := zap.NewExample() defer logger.Sync() path := \u0026#34;not-exist.txt\u0026#34; if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { logger.Error(\u0026#34;error in checkFileOpen function\u0026#34;, zap.Error(err), zap.String(\u0026#34;file\u0026#34;, path)) } } これを実行すると\n$ go run sample1.go | jq . { \u0026#34;level\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;error in checkFileOpen function\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;errorVerbose\u0026#34;: \u0026#34;{\\\u0026#34;Type\\\u0026#34;:\\\u0026#34;*errs.Error\\\u0026#34;,\\\u0026#34;Err\\\u0026#34;:{\\\u0026#34;Type\\\u0026#34;:\\\u0026#34;*errors.errorString\\\u0026#34;,\\\u0026#34;Msg\\\u0026#34;:\\\u0026#34;file open error\\\u0026#34;},\\\u0026#34;Context\\\u0026#34;:{\\\u0026#34;function\\\u0026#34;:\\\u0026#34;main.checkFileOpen\\\u0026#34;,\\\u0026#34;path\\\u0026#34;:\\\u0026#34;not-exist.txt\\\u0026#34;},\\\u0026#34;Cause\\\u0026#34;:{\\\u0026#34;Type\\\u0026#34;:\\\u0026#34;*fs.PathError\\\u0026#34;,\\\u0026#34;Msg\\\u0026#34;:\\\u0026#34;open not-exist.txt: no such file or directory\\\u0026#34;,\\\u0026#34;Cause\\\u0026#34;:{\\\u0026#34;Type\\\u0026#34;:\\\u0026#34;syscall.Errno\\\u0026#34;,\\\u0026#34;Msg\\\u0026#34;:\\\u0026#34;no such file or directory\\\u0026#34;}}}\u0026#34;, \u0026#34;file\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } 案の定 zap.Error() ではエラーメッセージを吐き出すだけのようだ。 errorVerbose 項目は Error() メソッドを %+v 書式で出力してる感じなのだろうか。 でも，テキストとして出力してるんじゃ「構造化」とは言えない。 困ったね。\nzapcore.ObjectMarshaler Zap には zap.Object() 関数があって，これを使えば内部構造を出力することができるのだが，そのためには対象のオブジェクトが zapcore.ObjectMarshaler 型の interface を満たす必要がある。\ntype ObjectMarshaler interface { MarshalLogObject(ObjectEncoder) error } 一瞬 errs.Error 型にこのメソッドを生やすことも考えたのだが，汎用エラー構造体が特定のサードパーティ・パッケージに依存するのは面白くない。\nzapobject モジュールを作った というわけで，新たに goark/errs/zapobject モジュールを作った。\nzapobject.New(err) という感じにエラーインスタンスをラップして使う。\nちなみに errs と zapobject は同一リポジトリにあるが，モジュールを分けている。 errs は zapobject に依存しないため errs の依存関係を汚さずに zap.Object() 関数に対応できる。 ついでに言うと， errs.Error 型以外の error 型についても zapobject.New() でラップすれば Unknown() メソッドの挙動に従って可能な限り構造化して出力できるようにしている。\nでは，先程のコードを書き換えよう（一部省略している）。\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;github.com/goark/errs\u0026#34; \u0026#34;github.com/goark/errs/zapobject\u0026#34; \u0026#34;go.uber.org/zap\u0026#34; ) func checkFileOpen(path string) error { ... } func main() { logger := zap.NewExample() defer logger.Sync() path := \u0026#34;not-exist.txt\u0026#34; if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { logger.Error(\u0026#34;error in checkFileOpen function\u0026#34;, zap.Object(\u0026#34;error\u0026#34;, zapobject.New(err)), zap.String(\u0026#34;file\u0026#34;, path)) } } これを実行すると\n$ go run sample2.go | jq . { \u0026#34;level\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;error in checkFileOpen function\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errs.Error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errors.errorString\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error\u0026#34; }, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*fs.PathError\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;syscall.Errno\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;no such file or directory\u0026#34; } }, \u0026#34;context\u0026#34;: { \u0026#34;function\u0026#34;: \u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } }, \u0026#34;file\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } となった。 うんうん。 ちゃんとエラー構造が出力されているね。\nipfs/go-log を試してみる Zap で拙作の errs.Error 型の構造を出力できるようになったので，次は ipfs/go-log を試してみる。 こちらもいきなりサンプルコードから。\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;github.com/goark/errs\u0026#34; \u0026#34;github.com/goark/errs/zapobject\u0026#34; \u0026#34;github.com/ipfs/go-log/v2\u0026#34; ) func checkFileOpen(path string) error { ... } func main() { logger := log.Logger(\u0026#34;sample\u0026#34;) path := \u0026#34;not-exist.txt\u0026#34; if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { logger.Errorw(\u0026#34;error in checkFileOpen function\u0026#34;, \u0026#34;error\u0026#34;, zapobject.New(err), \u0026#34;file\u0026#34;, path) } } log.Logger() 関数で生成される logger の中身はは以下のようになっている。\n// ZapEventLogger implements the EventLogger and wraps a go-logging Logger type ZapEventLogger struct { zap.SugaredLogger // used to fix the caller location when calling Warning and Warningf. skipLogger zap.SugaredLogger system string } 見ての通り中身は zap.SugaredLogger 型になっている。 このため構造化ログを出力する場合は Errorw() などのメソッドを使う必要がある。 zap.SugaredLogger はちょっと\u0026hellip; というのであれば Deshugar() すればよい。\nlogger.Desugar().Error(\u0026#34;error in checkFileOpen function\u0026#34;, zap.Object(\u0026#34;error\u0026#34;, zapobject.New(err)), zap.String(\u0026#34;file\u0026#34;, path)) さて，これを実行してみる。\n$ go run sample3.go | jq . 2023-05-20T17:04:40.794+0900 ERROR sample sample3/sample3.go:30 error in checkFileOpen function {\u0026#34;error\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;*errs.Error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;error\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;*errors.errorString\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error\u0026#34;}, \u0026#34;cause\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;*fs.PathError\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;cause\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;syscall.Errno\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;no such file or directory\u0026#34;}}, \u0026#34;context\u0026#34;: {\u0026#34;function\u0026#34;: \u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;not-exist.txt\u0026#34;}}, \u0026#34;file\u0026#34;: \u0026#34;not-exist.txt\u0026#34;} おぅふ orz\nipfs/go-log は出力先や出力フォーマットを環境変数で制御する。 主な環境変数は以下の通り\n環境変数 値 GOLOG_LOG_LEVEL debug, info, warn, error, dpanic, panic, fatal GOLOG_FILE ファイルに出力する場合はパスをセットする GOLOG_OUTPUT stdout, stderr, file GOLOG_LOG_FMT color, nocolor, json GOLOG_LOG_LEVEL はシステムごとに指定できる。\nexport GOLOG_LOG_LEVEL=\u0026#34;error,subsystem1=info,subsystem2=debug\u0026#34; GOLOG_OUTPUT は複数の出力先を指定できる。 + で区切って指定すればよい。\nexport GOLOG_FILE=\u0026#34;/path/to/my/file.log\u0026#34; export GOLOG_OUTPUT=\u0026#34;stderr+file\u0026#34; というわけで，環境変数を指定して改めて起動してみる。\n$ export GOLOG_LOG_FMT=\u0026#34;json\u0026#34; $ export GOLOG_OUTPUT=\u0026#34;stdout\u0026#34; $ go run sample3.go | jq . {\u0026#34;level\u0026#34;:\u0026#34;error\u0026#34;,\u0026#34;ts\u0026#34;:\u0026#34;2023-05-20T17:35:29.669+0900\u0026#34;,\u0026#34;logger\u0026#34;:\u0026#34;sample\u0026#34;,\u0026#34;caller\u0026#34;:\u0026#34;sample3/sample3.go:30\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;error in checkFileOpen function\u0026#34;,\u0026#34;error\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;*errs.Error\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;,\u0026#34;error\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;*errors.errorString\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;file open error\u0026#34;},\u0026#34;cause\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;*fs.PathError\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;open not-exist.txt: no such file or directory\u0026#34;,\u0026#34;cause\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;syscall.Errno\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;no such file or directory\u0026#34;}},\u0026#34;context\u0026#34;:{\u0026#34;function\u0026#34;:\u0026#34;main.checkFileOpen\u0026#34;,\u0026#34;path\u0026#34;:\u0026#34;not-exist.txt\u0026#34;}},\u0026#34;file\u0026#34;:\u0026#34;not-exist.txt\u0026#34;} { \u0026#34;level\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;ts\u0026#34;: \u0026#34;2023-05-20T17:35:29.669+0900\u0026#34;, \u0026#34;logger\u0026#34;: \u0026#34;sample\u0026#34;, \u0026#34;caller\u0026#34;: \u0026#34;sample3/sample3.go:30\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;error in checkFileOpen function\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errs.Error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errors.errorString\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error\u0026#34; }, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*fs.PathError\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;syscall.Errno\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;no such file or directory\u0026#34; } }, \u0026#34;context\u0026#34;: { \u0026#34;function\u0026#34;: \u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } }, \u0026#34;file\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } んー。 何故か標準エラー出力にも出るなぁ。 まぁ，とりあえず標準出力に JSON 形式で出力できた。\n環境変数ではなくコードで設定したい場合もあるだろう。 この場合は\nfunc main() { cfg := log.GetConfig() cfg.Format = log.JSONOutput cfg.Stderr = false cfg.Stdout = true cfg.Level = log.LevelDebug log.SetupLogging(cfg) logger := log.Logger(\u0026#34;sample\u0026#34;) path := \u0026#34;not-exist.txt\u0026#34; if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { logger.Desugar().Error(\u0026#34;error in checkFileOpen function\u0026#34;, zap.Object(\u0026#34;error\u0026#34;, zapobject.New(err)), zap.String(\u0026#34;file\u0026#34;, path)) } } という感じに設定できる。\n\u0026ldquo;caller\u0026rdquo; は要らん zap.NewExample() で logger を生成したときには気づかなかったが，実際にはログ出力に既定で \u0026quot;caller\u0026quot; 項目が付くんだねぇ。 ファイル名と行番号が付くのはちょっと\u0026hellip; と思って外し方を探してみたが\nlogger := log.Logger(\u0026#34;sample\u0026#34;).Desugar().WithOptions(zap.WithCaller(false)) という感じに Desugar() した上で WithOptions() を使って明示的に外さないといけないみたい。 んー。 そこまでするのはなぁ。 logger の型が変わっちゃうし。\nいや\nlogger := log.Logger(\u0026#34;sample\u0026#34;) logger.SugaredLogger = *(logger.Desugar().WithOptions(zap.WithCaller(false)).Sugar()) って感じにすればいいのかな。 これで動かしてみよう。\n$ go run sample3b.go | jq . { \u0026#34;level\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;ts\u0026#34;: \u0026#34;2023-05-20T18:01:52.106+0900\u0026#34;, \u0026#34;logger\u0026#34;: \u0026#34;sample\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;error in checkFileOpen function\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errs.Error\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error: open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*errors.errorString\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;file open error\u0026#34; }, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;*fs.PathError\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;open not-exist.txt: no such file or directory\u0026#34;, \u0026#34;cause\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;syscall.Errno\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;no such file or directory\u0026#34; } }, \u0026#34;context\u0026#34;: { \u0026#34;function\u0026#34;: \u0026#34;main.checkFileOpen\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } }, \u0026#34;file\u0026#34;: \u0026#34;not-exist.txt\u0026#34; } おー。 消えた消えた。\nまぁ，既に zap をバリバリにカスタマイズして使ってる人には ipfs/go-log はあまりメリットなさそうだけど，これから zap を簡易に使いたいって人にはアリな選択肢かも知れない。\nじゃぁ，自作ツールの logger を載せ換えますかね。\nブックマーク GoのロギングライブラリzapのTips - Carpe Diem\nGo のロギングライブラリ zap について\ngolangの高速な構造化ログライブラリ「zap」の使い方 - Qiita\nGo 言語用エラーハンドリング・パッケージ\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n"
    },
    {
      "title": "コマンドラインで Mastodon に投稿する",
      "section": "remark",
      "description": "これで出力の基本機能はできたので，今後は入力側の設計と実装だな。先は長い。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/05/toot-to-mastodon/",
      "published": "2023-05-14T04:20:56+00:00",
      "update": "2023-05-14T04:21:10+00:00",
      "content": "今年の GW は（色々と大人の事情で）遠くに遊びに行くこともなく，ときどき自転車を乗り回す以外はおうちでコードを書くか，その辺に寝転がってラノベか Web 小説を読み耽るという，自堕落な生活を送っていた。\nで，まぁ，その成果として以下の CLI ツールをリリースした。\ngoark/toolbox: A collection of miscellaneous commands 今のところ Mastodon と Bluesky への投稿機能のみ実装している。 最終的には自コンテンツ（主にブログ記事と Flickr 写真）の更新情報の投稿を自動化できればと思っているが，先は長い。\nこのうち今回は Mastodon への投稿機能について，覚え書きを兼ねて，記しておく。\n今どきの流行りは Bluesky のほうぢゃねーのかとお思いでしょうが，利用している公式の Go 用パッケージの作りが微妙で，ちょっとしたことでエラーを吐くためイマイチな出来。 みんな，あんな雑なエラーハンドリングでよく使えてるよなぁ。 とりあえず 400 を返せばいいみたいなのはどうにかしてほしい。 大きな画像ファイルをアップロードしてエラーを返さないのはもっと困るけど。\n話がそれた。 では本題へ。\nアプリケーションの登録 Mastodon のハンドリングには以下のパッケージを使わせてもらっている。 ありがたや 🙇\nmattn/go-mastodon: mastodon client for golang だがしかし，最初の「認証」部分でいきなり躓く。 あちこちの解説ページを覗いてみるに，どうやら Mastodon の認証は2段階あるらしい。\nサーバに対してアプリケーション登録を行う ユーザ認証を行い，アカウントに対してアプリケーションを認証する 1 を行うとクライアントIDとそのシークレットがもらえる。 1 でもらった情報を使って 2 を行うとアクセストークンがもらえる。 さらに 2 の認証にはパスワード認証と OAuth 認証の2つが用意されていて，後者についてはブラウザ操作が必要（？） アクセストークンは永続的に有効らしい。 1 と 2 で取得した情報を使って Mastodon サーバに対して各種操作を行える。 \u0026hellip;という感じ。\nここまで辿り着くのにかなり試行錯誤してしまった。\n拙作 toolbox では mastodon register コマンドで 1, 2 の処理をまとめて行う。\n$ toolbox mastodon register -h Register Mastodon application. Usage: toolbox mastodon register [flags] Aliases: register, reg Flags: -h, --help help for register Global Flags: --bluesky-config string Config file for Bluesky (default \u0026#34;/home/username/.config/toolbox/bluesky.json\u0026#34;) --cache-dir string Directory for cache files (default \u0026#34;/home/username/.cache/toolbox\u0026#34;) --config string Config file (default \u0026#34;/home/username/.config/toolbox/config.yaml\u0026#34;) --debug for debug --log-dir string Directory for log files (default \u0026#34;/home/username/.cache/toolbox\u0026#34;) --log-level string Log level [nop|error|warn|info|debug|trace] (default \u0026#34;nop\u0026#34;) --mastodon-config string Config file for Mastodon (default \u0026#34;/home/username/.config/toolbox/mastodon.json\u0026#34;) 取得したアクセストークンは --mastodon-config オプションで指定したファイルに JSON 形式で保存される。 具体的には以下のように，サーバ名，ユーザID，パスワードを尋ねるプロンプトが表示されるので入力していけば OK。\n$ toolbox mastodon register Server (e.g. mastodon.social) \u0026gt; fedibird.com User (email address) \u0026gt; jphn.do@exsample.com Password \u0026gt; your_password server: https://fedibird.com application name: github.com/goark/toolbox website: https://github.com/goark/toolbox scopes: read write follow output: /home/username/.config/toolbox/mastodon.json 成功すれば 設定＞アカウント＞認証済みアプリ に認証されたアプリケーションが表示される（表示の仕方はサーバによって違うかも）。\n認証済みアプリ 動作確認のために自身の profile を表示してみる。\n$ toolbox mastodon profile Username: spiegel User ID (full): @spiegel@fedibird.com URL: https://fedibird.com/@spiegel Display name: Spiegel@がんばらない Created at: 2022-11-25 00:00:00 +0000 UTC Posts: 2289 Follows: 46 Followers: 98 \u0026lt;p\u0026gt;mstdn.jp から移住。職業プログラマ。\u0026lt;a href=\u0026#34;https://fedibird.com/tags/golang\u0026#34; class=\u0026#34;mention hashtag\u0026#34; rel=\u0026#34;tag\u0026#34;\u0026gt;#\u0026lt;span\u0026gt;golang\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; と \u0026lt;a href=\u0026#34;https://fedibird.com/tags/flickr\u0026#34; class=\u0026#34;mention hashtag\u0026#34; rel=\u0026#34;tag\u0026#34;\u0026gt;#\u0026lt;span\u0026gt;flickr\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; で遊んでいる人。暖かくなったので自転車で「お散歩カメラ」再開。\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;情報収集がメインだが最近は胡乱な発言もチラホラあるので，そこは許して（フォローの付け外しはご自由に）。フォローは特に意味なく頻繁に入れ換えますのであしからず。\u0026lt;/p\u0026gt; よーし，うむうむ，よーし。\nMastodon に投稿する 以上で対象のサーバに toolbox でアクセスできるようになったので，さっそく何か投稿してみる。 Mastodon への投稿は mastodon post でできる。\n$ toolbox mastodon post -h Post message to Mastodon. Usage: toolbox mastodon post [flags] Aliases: post, pst, p, toot, tt, t Flags: --edit Edit message -h, --help help for post -i, --image-file strings Image file -m, --message string Message --pipe Input from standard-input -s, --spoiler-text string Spoiler text -v, --visibility string Visibility [public|unlisted|private|direct] (default \u0026#34;public\u0026#34;) Global Flags: --bluesky-config string Config file for Bluesky (default \u0026#34;/home/username/.config/toolbox/bluesky.json\u0026#34;) --cache-dir string Directory for cache files (default \u0026#34;/home/username/.cache/toolbox\u0026#34;) --config string Config file (default \u0026#34;/home/username/.config/toolbox/config.yaml\u0026#34;) --debug for debug --log-dir string Directory for log files (default \u0026#34;/home/username/.cache/toolbox\u0026#34;) --log-level string Log level [nop|error|warn|info|debug|trace] (default \u0026#34;nop\u0026#34;) --mastodon-config string Config file for Mastodon (default \u0026#34;/home/username/.config/toolbox/mastodon.json\u0026#34;) -m はコマンドライン上で1行メッセージを投稿するのに使うオプション --pipe は標準入力からの入力を投稿するオプション --edit は CUI で複数行編集ができるオプション -m, --pipe, --edit は排他オプションで同時に指定できない -i は画像ファイルをアップローするのに使うオプション。複数指定可能 -v は表示範囲を指定するオプション たとえばこんな感じで投稿する。\n$ toolbox mastodon post --edit -i lake-shinjiko.jpg -v direct Input \u0026#39;Ctrl+J\u0026#39; or \u0026#39;Ctrl+Enter\u0026#39; to submit message Input \u0026#39;Ctrl+D\u0026#39; with no chars to stop 1\u0026gt;はろー，ふぇでぃばーす！ 2\u0026gt;https://flic.kr/p/2nSUmaa 3\u0026gt; https://fedibird.com/@spiegel/110364957384850439 するとこんな感じに表示される。\nMastodon へ投稿 よしよし。 ちなみに複数行編集には以下のパッケージを利用している。\nhymkor/go-multiline-ny: Readline package supporting multi-lines マジ便利。 ありがたや 🙇\nMastodon は表示範囲を指定できるのがいいよね。 とりあえず試し撃ちなら DM で投げればいい。 Bluesky は（多分まだ）表示範囲を指定できないのでテスト用のゴミ投稿も全部 TL に表示されてしまう。 しょうがないから招待コード使ってデバッグ用のアカウントをひとつ確保する羽目になった。\nさて，これで出力の基本機能はできたので，今後は入力側の設計と実装だな。 先は長い。\nブックマーク マストドンのタイムラインをgo-mastodon のWebSocketを使用し取得する - Qiita\nmastodonのaccess tokenをauthorization_codeで取得する例 - Qiita\nMastodon API の叩き方 · GitHub\nmastodonのtootを原始人くんが喋ってくれるbot作った - Qiita\nFediverse 関連のブックマーク\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n"
    }
  ]
}
