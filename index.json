{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "そうだ！ Zenn の記事や本にバッヂを贈ろう",
      "section": "remark",
      "description": "バッヂを贈られた記事は「金を払う価値のある記事」という実績を示せるし，贈った側も「オラが贈ったバッヂだべや」と悦に入ることができる",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/11/zenn-badges/",
      "published": "2020-11-12T12:17:02+00:00",
      "update": "2020-11-12T12:27:58+00:00",
      "content": "仕事でまた Windows を弄るようになって1 改めてウンザリしていること：\n ディレクトリ区切り文字がバックスラッシュ  エスケープ文字と被るのでチョー面倒   改行コードが2バイト（CR+LF）  ちゃんと2バイトにしないとバッチが動かない   ダブルバイトの呪い。また Shift-JIS と付き合わにゃならんのか orz  テキストボックスに漢字10文字入るからって半角英数字で20文字入るわけぢゃねーよ！ いつの時代だ    そんなこんなで，習作（study）として手遊びで作った gnkf が実務で役に立つ日が来ようとは\u0026hellip;\nたとえば Shift-JIS のテキストを UTF-8 で「読める」ようにするために\n$ gnkf e -s shift_jis -f sjis.txt | gnkf nl -n lf \u0026gt; utf8.txt としたり，逆に\n$ gnkf e -d shift_jis -f utf8.txt | gnkf nl -n crlf \u0026gt; sjis.txt とか Shift-JIS に変換したりするわけなのだが，いちいち手で打つのは面倒なのでバッチファイルにしたりするよね。 そんで，バッチファイルにうっかりそのまま1行だけ\ngnkf e -s shift_jis -f %1 | gnkf nl -n lf と書いて\n$ conv-utf8.cmd sjis.txt \u0026gt; utf8.txt とか実行したら大変なことになるのですよ。 分かるかな？ ここではじめて「そういやバッチ書くときって先頭に @echo off って付けにゃアカンかったっけ」と思い出すのである。\nはい。 長い前置きでした。 ここからが本題。\nこんなときに役に立つのが以下の本。\n /bin/shに慣れた人に贈るバッチファイルの書き方  マジで役に立ちました，過ぎ去った過去を思い出す意味でも。 これを読んで最終的にはこんな感じに書き直した。\n@ECHO OFF SETLOCAL SET \u0026#34;INFILE=%~1\u0026#34; IF \u0026#34;%INFILE%\u0026#34; == \u0026#34;\u0026#34; GOTO ENDPROC SET \u0026#34;OUTFILE=%~2\u0026#34; IF \u0026#34;%OUTFILE%\u0026#34; == \u0026#34;\u0026#34; ( gnkf e -s shift_jis -f \u0026#34;%INFILE%\u0026#34; | gnkf nl -n lf ) ELSE ( gnkf e -s shift_jis -f \u0026#34;%INFILE%\u0026#34; | gnkf nl -n lf -o \u0026#34;%OUTFILE%\u0026#34; ) :ENDPROC ENDLOCAL EXIT /b こんな有用な本が無料ですよ。 もったいねー\nでも，ご安心を。 Zenn では「サポート」機能を使って無料の記事や本に送金できるのである。\n このボタンを押すと\n てなダイアログが表示され，500円単位で支払いできる。\n注目は下半分に表示されているバッヂだ。 送金時にこのバッヂを選択することで，実際にサポート受けた記事や本では\n てな感じで贈られたバッヂが表示される。\n金銭的なやり取り以上に，バッヂを贈られた記事や本は「金を払う価値のある内容」という実績を示せるし，もちろん贈った側も「オラが贈ったバッヂだべや」と悦に入ることができる（ちなみに誰がバッヂを贈ったかは外部には非公開）。\nこのバッヂ機能，シンプルだけど強力な仕掛けだよね。 単なる LGTM2 よりも実利的な意味を持つし note.com のサポート機能より更に一歩進んでいると思う。 こういうところが新興サービスの面白いところだよな。\nというわけで，お世話になった無料本のいくつかにバッヂを贈りました。 お世話になりました。\n  春までいた職場でも Windows 10 は使っていたが，あれは PC は PC でも Programmable Controller のほうなので，指定されたアプリや操作以外は許容されていなかった。 \u0026#x21a9;\u0026#xfe0e;\n “Looks Good To Me” の略。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-11-08 のブックマーク",
      "section": "bookmarks",
      "description": "「Why using Google VPN is a terrible idea」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/11/08-bookmarks/",
      "published": "2020-11-08T09:15:48+00:00",
      "update": "2020-11-08T09:18:51+00:00",
      "content": "リリース情報  Release v1.32.2 · golangci/golangci-lint · GitHub Release v1.0.1 · sonatype-nexus-community/nancy · GitHub Hugo 0.78.0: Full Hugo Modules Support in js.Build | Hugo  Release v0.78.0 · gohugoio/hugo · GitHub   Hugo 0.78.1: A couple of Bug Fixes | Hugo  Release v0.78.1 · gohugoio/hugo · GitHub   Release 8.8.3 · mermaid-js/mermaid · GitHub  セキュリティ＆プライバシー関連  Why using Google VPN is a terrible idea Google’s Project Zero discloses Windows 0-day that’s been under active exploit | Ars Technica  New Windows Zero-Day - Schneier on Security Windowsのカーネル暗号化ドライバにゼロデイ脆弱性 | マイナビニュース   「Google ドライブ」を悪用したフィッシング詐欺が急増中、メールの監視をすり抜ける新たな手口の中身 | WIRED.jp IAB Europeの広告トラッキング同意フレームワークがGDPR規格に適合しないことが判明 | TechCrunch Japan Determining What Video Conference Participants Are Typing from Watching Shoulder Movements - Schneier on Security 「Microsoft Edge 86」でも「V8」のゼロデイ脆弱性が修正 ～v86.0.622.63への更新を - 窓の杜 「Mozilla VPN」にOAuthセッションフィクセーションの脆弱性 - 窓の杜 GitHub、ハッキングされたとのうわさを否定 - ZDNet Japan GitHub Actionsにおける重要度の高い脆弱性を報告 - Project Zero | マイナビニュース Oracle WebLogic Server の脆弱性対策について（CVE-2020-14750）：IPA 独立行政法人 情報処理推進機構 マイナンバーカードの機能をスマホに搭載\u0026ndash;総務省、2022年度中での実現目指し検討開始 - CNET Japan 警察による顔認識技術の利用、メーン州ポートランドでも禁止 - CNET Japan  天文関連  APOD: 2020 November 4 - Fifty Gravitational Wave Events Illustrated Mars plays shepherd to our moon\u0026rsquo;s long-lost twin, scientists find 地球に帰還する「はやぶさ2」回収隊の便名が！？ JALの粋すぎるはからいに感動 Asteroid Apophis is speeding up from sunlight as scientists recalculate odds of 2068 impact | Space The impact of satellite constellations on space as an ancestral global commons | Nature Astronomy The future of astronomy with small satellites | Nature Astronomy The potential of small satellites for scientific and astronomical discovery | Nature Astronomy  知財関連  Welcome — Creative Commons on GitHub  Say Hello to Our New CC Open Source Website! - Creative Commons    Go 言語関連  Go day on Google Open Source Live  その他  Raspberry Pi 4を組み込んだキーボード型パソコン「Raspberry Pi 400」が2021年日本発売 | TechCrunch Japan Erabという、パーソナルでプログラマブルなダッシュボードアプリを作った Excelに新機能「Custom Data Types」登場。セルをキーにしてさまざまな情報を参照。ユーザー独自の定義も可能に － Publickey AWSがDocker Hubの代替サービスを発表予告。パブリックにコンテナイメージを公開可能で50GBまで無料、AWSからなら何度でもプルし放題に － Publickey JavaScriptの数値計算はどれくらい正確なのか 【AfterShokz】次世代型骨伝導ヘッドセット OpenComm ノイズキャンセリング・ブームマイク搭載。最大使用16時間、5分の急速充電にも対応。 | FOCAL GADGET : 高い orz Docker Hubの無料プランにおける利用制限、オープンソースのプロジェクトは適用外にするとDocker社が発表 － Publickey AppleのSiriが米国大統領選の投票日を11月8日と思いこんでいたことが判明 | TechCrunch Japan 米国に代わる習近平「クリーン・エネルギー・リーダー」宣言：岩瀬昇 | 岩瀬昇のエネルギー通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト 2020年11月5日ニュース「光合成の明反応と暗反応、ともにカルシウムイオン濃度で制御」 | SciencePortal セイコーが閉域網で正確な時刻を提供するNTPサービス「セイコークローズドモバイルNTP」発表。±50msec以内の正確な時刻同期を実現 － Publickey Microsoft、本日よりドライバーの提供方法を改善 ～「バージョン 2004」以降で - 窓の杜 「Microsoft Teams」の「Project」「Roadmap」アプリ発表 - CNET Japan 仮想通貨ウォレットアプリZenGoが米国でデビットカードを発行 | TechCrunch Japan 多人数でも話がしやすいビデオ会議システムを作って公開した  "
    },
    {
      "title": "Go パッケージ／モジュールの依存関係可視化ツール Depm v0.3.0 をリリースした",
      "section": "release",
      "description": "これで個人的に欲しい機能は揃ったかな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/11/depm-v0_3_0-is-released/",
      "published": "2020-11-08T08:14:01+00:00",
      "update": "2020-11-08T08:15:27+00:00",
      "content": "気になる部分の修正といくつか機能追加を行った spiegel-im-spiegel/depm の v0.3.0 をリリースした。\n Release v0.3.0 · spiegel-im-spiegel/depm · GitHub  使い方については以下の記事を参照のこと。\n Depm: Go 言語用モジュール依存関係可視化ツール  気になる部分というのは，ツール内から go list コマンドを呼び出している部分で，以下の問題に対応している。\n Go でサブプロセスを起動する際は LookPath に気をつけろ！  これで個人的に欲しい機能は揃ったので少しペースを落とすか。 つか，ほとんどテストを書いてないんだよなぁ\u0026hellip;\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "Depm: Go 言語用モジュール依存関係可視化ツール",
      "section": "release",
      "description": " Go言語のパッケージまたはモジュール間の依存関係を可視化するコマンドラインツール",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/dependency-graph-for-golang-modules/",
      "published": "2020-11-08T07:55:50+00:00",
      "update": "2020-11-08T08:15:27+00:00",
      "content": "spiegel-im-spiegel/depm は Go言語のパッケージまたはモジュール間の依存関係を可視化するコマンドラインツールである。 以下のように依存関係を図にすることも可能である。\n 以降で spiegel-im-spiegel/depm について簡単に紹介する。\n   \n簡単な使い方 -h オプションで簡単な使い方が表示される。\n$ depm -h Visualize depndency packages and modules. Usage: depm [flags] depm [command] Available Commands: help Help about any command list list modules module analyze depndency modules package analyze depndency packages version print the version number Flags: --cgo-enabled string set CGO_ENABLED environment variable --debug for debug --goarch string set GOARCH environment variable --goos string set GOOS environment variable -h, --help help for depm Use \u0026#34;depm [command] --help\u0026#34; for more information about a command. では，コマンドごとに見ていく。\nパッケージ間の依存関係を調べる depm package コマンドはパッケージ単位で依存関係を調べて結果を出力する。\n$ depm package -h analyze depndency packages. Usage: depm package [flags] [package import path] Aliases: package, pkg, p Flags: --dot output by DOT language --dot-config string config file for DOT language -h, --help help for package -i, --include-internal include internal packages -s, --include-standard include standard Go library Global Flags: --cgo-enabled string set CGO_ENABLED environment variable --debug for debug --goarch string set GOARCH environment variable --goos string set GOOS environment variable github.com/spiegel-im-spiegel/depm パッケージを調べる場合は以下のコマンドラインとなる。\n$ depm package github.com/spiegel-im-spiegel/depm | jq . [ { \u0026#34;Package\u0026#34;: { \u0026#34;ImportPath\u0026#34;: \u0026#34;github.com/spf13/cobra\u0026#34;, \u0026#34;Module\u0026#34;: { \u0026#34;Path\u0026#34;: \u0026#34;github.com/spf13/cobra\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;v1.1.1\u0026#34; } }, \u0026#34;Deps\u0026#34;: [ { \u0026#34;ImportPath\u0026#34;: \u0026#34;github.com/spf13/pflag\u0026#34;, \u0026#34;Module\u0026#34;: { \u0026#34;Path\u0026#34;: \u0026#34;github.com/spf13/pflag\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;v1.0.5\u0026#34; } } ] }, ... 出力は JSON 形式なので jq コマンド等で加工可能である。 JSON 出力の構造は以下の構造体 nodeJSON の配列で表される。\ntype nodeJSON struct { Package *packageJSON Deps []*packageJSON `json:\u0026#34;,omitempty\u0026#34;` } type packageJSON struct { ImportPath string Internal bool `json:\u0026#34;,omitempty\u0026#34;` CGO bool `json:\u0026#34;,omitempty\u0026#34;` Unsafe bool `json:\u0026#34;,omitempty\u0026#34;` Module *moduleJSON `json:\u0026#34;,omitempty\u0026#34;` } type moduleJSON struct { Path string `json:\u0026#34;,omitempty\u0026#34;` Version string `json:\u0026#34;,omitempty\u0026#34;` } CGO に依存するパッケージは CGO フラグが true になる。 同様に unsafe を使っているパッケージでも Unsafe が true になる。 また -i オプションを付けてコマンドを起動すると internal パッケージも結果に含まれるが，この場合は Internal フラグが true になる。\nたとえば有名な github.com/mattn/go-sqlite3 パッケージなら\n$ depm package \u0026#34;github.com/mattn/go-sqlite3\u0026#34; | jq . [ { \u0026#34;Package\u0026#34;: { \u0026#34;ImportPath\u0026#34;: \u0026#34;github.com/mattn/go-sqlite3\u0026#34;, \u0026#34;CGO\u0026#34;: true, \u0026#34;Unsafe\u0026#34;: true, \u0026#34;Module\u0026#34;: { \u0026#34;Path\u0026#34;: \u0026#34;github.com/mattn/go-sqlite3\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;v1.14.4\u0026#34; } } } ] のようになる。\n--dot オプションで DOT 言語形式の出力にもできるため Graphviz の dot コマンドを使って図に変換することができる。\n$ depm package --dot github.com/spiegel-im-spiegel/depm | dot -Tpng -o output1.png 実行結果はこんな感じ。\noutput1.png  図の node と edge の属性については DOT 言語の仕様に従って簡単な装飾ができる。 TOML 形式で\n[node] fontname = \u0026#34;Inconsolata\u0026#34; [edge] color = \u0026#34;red\u0026#34; のような設定ファイルを作って\n$ depm package --dot --dot-config sample.toml \u0026#34;github.com/spiegel-im-spiegel/depm\u0026#34; | dot -Tpng -o output2.png output2.png  のようにできる。\nパッケージのインポート・パスを省略すると，カレント・ディレクトリのパッケージを捜査する（go list コマンドで all を指定したときと同じ動作）。\nモジュール間の依存関係を調べる depm module コマンドはモジュール単位で依存関係を調べて結果を出力する。\n$ depm module -h analyze depndency modules. Usage: depm module [flags] [package import path] Aliases: module, mod, m Flags: -u, --check-update check updating module --dot output by DOT language --dot-config string config file for DOT language -h, --help help for module -i, --include-internal include internal packages Global Flags: --cgo-enabled string set CGO_ENABLED environment variable --debug for debug --goarch string set GOARCH environment variable --goos string set GOOS environment variable $ depm module \u0026#34;github.com/spiegel-im-spiegel/depm\u0026#34; | jq . [ { \u0026#34;Module\u0026#34;: { \u0026#34;Path\u0026#34;: \u0026#34;github.com/spf13/cobra@v1.1.1\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;github.com/spf13/cobra\u0026#34; ] }, \u0026#34;Deps\u0026#34;: [ { \u0026#34;Path\u0026#34;: \u0026#34;github.com/spf13/pflag@v1.0.5\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;github.com/spf13/pflag\u0026#34; ] } ] }, ... 出力は同じく JSON 形式で，以下の構造体 nodeJSON の配列で表される。\ntype nodeJSON struct { Module *moduleJSON Deps []*moduleJSON `json:\u0026#34;,omitempty\u0026#34;` } type moduleJSON struct { Path string Replace string `json:\u0026#34;,omitempty\u0026#34;` Latest string `json:\u0026#34;,omitempty\u0026#34;` Main bool `json:\u0026#34;,omitempty\u0026#34;` CGO bool `json:\u0026#34;,omitempty\u0026#34;` Unsafe bool `json:\u0026#34;,omitempty\u0026#34;` Packages []string `json:\u0026#34;,omitempty\u0026#34;` } CGO や unsafe パッケージに関するフラグは depm package コマンドのときと同様である。 -u オプションを付けると，新しいバージョンのモジュールがある場合に Latest に情報がセットされる。\ndepm packageコマンドのときと同じく-dot` オプションで DOT 言語形式の出力にできる。\n$ depm module --dot --dot-config sample.toml \u0026#34;github.com/spiegel-im-spiegel/depm\u0026#34; | dot -Tpng -o output3.png output3.png  パッケージのインポート・パスを省略すると，カレント・ディレクトリのパッケージを捜査する。 go list -m コマンドで all を指定したときと同じ動作だが，実際にはリンクしない形式的な依存モジュールは出力されない。 基本的にコード内の import に基づく依存関係のみ表示される。\nモジュールの列挙 depm list コマンドは go list -m コマンドと同じ形式でモジュールの列挙を行う。\n$ depm list -h list modules, compatible \u0026#39;go list -m\u0026#39; command Usage: depm list [flags] [package import path] Aliases: list, lst, l Flags: -u, --check-update check updating module -h, --help help for list -j, --json output by JSON format Global Flags: --cgo-enabled string set CGO_ENABLED environment variable --debug for debug --goarch string set GOARCH environment variable --goos string set GOOS environment variable $ depm list \u0026#34;github.com/spiegel-im-spiegel/depm\u0026#34; github.com/BurntSushi/toml v0.3.1 github.com/emicklei/dot v0.15.0 github.com/spf13/cobra v1.1.1 github.com/spf13/pflag v1.0.5 github.com/spiegel-im-spiegel/depm v0.3.0 github.com/spiegel-im-spiegel/errs v1.0.2 github.com/spiegel-im-spiegel/gocli v0.10.3 golang.org/x/mod v0.3.0 golang.org/x/net v0.0.0-20201021035429-f5854403a974 golang.org/x/tools v0.0.0-20201105220310-78b158585360 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 go list -m コマンドでは実際にはリンクしない形式上の依存モジュールまで表示してしまうが， depm list コマンドは基本的にコード内の import に基づく依存関係のみ表示されるため，最小限のリストに抑えられる。\n-u オプションを付けると go list -m -u と同等の出力にできる。\n$ depm list -u \u0026#34;github.com/spiegel-im-spiegel/depm\u0026#34; github.com/BurntSushi/toml v0.3.1 github.com/emicklei/dot v0.15.0 github.com/spf13/cobra v1.1.1 github.com/spf13/pflag v1.0.5 github.com/spiegel-im-spiegel/depm v0.3.0 github.com/spiegel-im-spiegel/errs v1.0.2 github.com/spiegel-im-spiegel/gocli v0.10.3 golang.org/x/mod v0.3.0 golang.org/x/net v0.0.0-20201021035429-f5854403a974 [v0.0.0-20201031054903-ff519b6c9102] golang.org/x/tools v0.0.0-20201105220310-78b158585360 golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 -j オプションを付けると go list -m -json と同等の JSON 出力にできる。\n$ depm list -j \u0026#34;github.com/spiegel-im-spiegel/depm\u0026#34; { \u0026#34;Path\u0026#34;: \u0026#34;github.com/BurntSushi/toml\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;v0.3.1\u0026#34;, \u0026#34;Time\u0026#34;: \u0026#34;2018-08-15T10:47:33Z\u0026#34;, \u0026#34;Indirect\u0026#34;: true, \u0026#34;Dir\u0026#34;: \u0026#34;/home/spiegel/go/pkg/mod/github.com/!burnt!sushi/toml@v0.3.1\u0026#34;, \u0026#34;GoMod\u0026#34;: \u0026#34;/home/spiegel/go/pkg/mod/cache/download/github.com/!burnt!sushi/toml/@v/v0.3.1.mod\u0026#34; } { \u0026#34;Path\u0026#34;: \u0026#34;github.com/emicklei/dot\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;v0.15.0\u0026#34;, \u0026#34;Time\u0026#34;: \u0026#34;2020-10-30T08:43:19Z\u0026#34;, \u0026#34;Indirect\u0026#34;: true, \u0026#34;Dir\u0026#34;: \u0026#34;/home/spiegel/go/pkg/mod/github.com/emicklei/dot@v0.15.0\u0026#34;, \u0026#34;GoMod\u0026#34;: \u0026#34;/home/spiegel/go/pkg/mod/cache/download/github.com/emicklei/dot/@v/v0.15.0.mod\u0026#34;, \u0026#34;GoVersion\u0026#34;: \u0026#34;1.13\u0026#34; } ... go list -m コマンドに比べると遅くなりがちなのが欠点だが，他のツールと組み合わせることを考えると使い勝手はさほど悪くないと思う。\n参考文献  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "PA-APIv5 クライアント・パッケージ v0.8.0 をリリースした",
      "section": "release",
      "description": "今回は Marketplace 定義の追加のみ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/11/pa-api-v0_8_0-is-released/",
      "published": "2020-11-06T12:01:53+00:00",
      "update": "2020-11-06T12:03:34+00:00",
      "content": "ありがたいことに pull request をいただきまして， Amazon Product Advertising API v5 へアクセスできる Go 言語用パッケージ spiegel-im-spiegel/pa-api の v0.8.0 をリリースした。\n Release v0.8.0 · spiegel-im-spiegel/pa-api · GitHub  今回は Marketplace 定義の追加のみ。\nspiegel-im-spiegel/pa-api では Marketplace を列挙型で定義しているのだが，頻繁に追加や変更があるなら上手いやり方ではないかもしれない。 いっそ interface 型で汎化してしまうか。 手を入れるのは簡単だが，今のところは考え中。\n"
    },
    {
      "title": "Go 1.15.4 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/11/go-1_15_4-is-released/",
      "published": "2020-11-06T11:24:43+00:00",
      "update": "2020-11-06T11:25:16+00:00",
      "content": "Go 1.15.4 がリリースされた。\n Go 1.15.4 and Go 1.14.11 are released  セキュリティ・アップデートはなし。\ngo1.15.4 (released 2020/11/05) includes fixes to cgo, the compiler, linker, runtime, and the compress/flate, net/http, reflect, and time packages. See the Go 1.15.4 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.15.4.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.15.4.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.15.4.linux-amd64.tar.gz $ sudo mv go go1.15.4 $ sudo ln -s go1.15.4 go $ go version # /usr/local/go/bin にパスが通っている場合 sudo ln -s go1.15.4 go go version go1.15.4 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "Git for Windows 2.29.2 (2) のリリース【セキュリテイ・アップデート】",
      "section": "release",
      "description": "これ Windows ユーザには結構ヤバい気がする。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/11/git-for-windows-2_29_2-2-is-released/",
      "published": "2020-11-06T11:14:33+00:00",
      "update": "2020-11-06T11:15:34+00:00",
      "content": "Windows 版 Git である Git for Windows の 2.29.2 (2) がリリースされたのだが，同梱されている Git LFS について脆弱性の改修が行われている。\n実は全く知らなかったのだが， Git LFS って Go で書かれてるんだねぇ。 もの知らずでゴメン \u0026#x1f647;\nOn Windows, if Git LFS operates on a malicious repository with a git.bat or git.exe file in the current directory, that program would be executed, permitting the attacker to execute arbitrary code. This does not affect Unix systems.\nThis occurs because on Windows, Go includes (and prefers) the current directory when the name of a command run does not contain a directory separator.\n via Git LFS can execute a Git binary from the current directory · Advisory · git-lfs/git-lfs · GitHub  あー，なるほど。\nカレント・ディレクトリにある実行モジュール（バッチを含む）を起動するのに，カレントであることを明示する .\\ を省略できたり，拡張子を省略しても動いちゃうとか，イマドキではないわな。\nで，Git LFS がどうやって解決しているかというと，環境変数 PATH から該当のファイルを探して，フルパスで Go の exec.Cmd インスタンスに渡ししているようだ。\nって，内部でコマンドを実行する場合には必ずこれをせんといかんということか。 これパクれないかなぁ。 NYAGOS とかどうやってるんだろ。\n真面目に調べてみるか\u0026hellip;\nCVE-2020-27955 未稿。\nアップデートは アップデートは計画的に。\n"
    },
    {
      "title": "2020年11月の暦",
      "section": "remark",
      "description": "『天文年鑑』が出ると年末って感じ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/11/ephemeris/",
      "published": "2020-11-03T00:40:46+00:00",
      "update": "2020-11-03T00:40:56+00:00",
      "content": "2020年10月も spiegel-im-spiegel/koyomi パッケージを作って暦を浚ってみる。 なお spiegel-im-spiegel/koyomi パッケージは v0.1.6 をリリースしている。 脆弱性チェックの GitHub Action を追加しただけなので，中身は変わらない。\n国立天文台のデータを使っているため，暦象の基準が日本の暦になっている点に注意。\n   日付 内容     2020-11-01 天王星が衝   2020-11-03 文化の日   2020-11-03 水星が留   2020-11-07 立冬   2020-11-08 下弦   2020-11-11 水星が西方最大離角   2020-11-15 朔(新月)   2020-11-16 火星が留   2020-11-22 上弦   2020-11-22 小雪   2020-11-23 勤労感謝の日   2020-11-29 海王星が留   2020-11-30 望(満月)    天象 各用語の意味は以下の通り。\n   天象 - 国立天文台暦計算室より  「留」とは「惑星の地心視赤経の時間変化が0、すなわち赤経方向の動きが止まる瞬間」，もっと簡単に言うと天球上の（見かけの）惑星の動きが反転する瞬間を指す。\nしし座流星群 2020-11-17 にしし座流星群が極大になる（予定）。 HR 15 とたくさん流れるわけではないが，しし群は稀に大量出現することがあるので注目しておいてもいいだろう。\n新月後で条件もいいし。\n30日の満月は半影食だが\u0026hellip; 2020-11-30 の望（満月）には半影月食がある。 ただし最大食分の時刻が18時半過ぎとかなり早いうえ，半影食は肉眼ではまず分からない。\n「そーゆーのがある」くらいの認識でいいだろう（笑）\n『天文年鑑』が出ると年末って感じ 今年は某パンデミックの影響で出版遅延が多かったが，順調に行けば今月末に『天文年鑑』の2021年版が出る。\n 天文年鑑 2021年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2020-11-24 単行本 4416620616 (ASIN), 9784416620618 (EAN), 4416620616 (ISBN)  天文ファン必携。2021年版。\nreviewed by Spiegel on 2020-11-03 (powered by PA-APIv5)\n 私は既に Amazon に予約発注している。 これが出るといよいよ年末って感じだよねぇ。\nコード 今回使用したコードは以下の通り。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/koyomi\u0026#34; ) func main() { start, _ := koyomi.DateFrom(\u0026#34;2020-11-01\u0026#34;) end, _ := koyomi.DateFrom(\u0026#34;2020-11-30\u0026#34;) k, err := koyomi.NewSource( koyomi.WithCalendarID( koyomi.Holiday, koyomi.MoonPhase, koyomi.SolarTerm, koyomi.Eclipse, koyomi.Planet, ), koyomi.WithStartDate(start), koyomi.WithEndDate(end), ).Get() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;| 日付 | 内容 |\u0026#34;) fmt.Println(\u0026#34;| ---- | ---- |\u0026#34;) for _, e := range k.Events() { fmt.Printf(\u0026#34;| %v | %v |\\n\u0026#34;, e.Date, e.Title) } } ブックマーク   暦Wiki/季節/雑節とは？ - 国立天文台暦計算室\n  2020年の主な暦象\n  日本の暦情報を取得するパッケージを作ってみた\n  参考図書  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-11-03 のブックマーク",
      "section": "bookmarks",
      "description": "「NASAが月面の太陽光が当たる部分に水の存在を確認」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/11/03-bookmarks/",
      "published": "2020-11-02T23:20:21+00:00",
      "update": "2020-11-02T23:24:36+00:00",
      "content": "リリース情報  The Document Foundation releases LibreOffice 7.0.3 - The Document Foundation Blog Hugo 0.77.0: Hugo Modules Improvements and More | Hugo  Release v0.77.0 · gohugoio/hugo · GitHub   Release v1.32.1 · golangci/golangci-lint · GitHub  バベルのインターネット  GitLabもイランからのアクセスを制限。米国の対イラン経済制裁に従い「われわれが決めたことではない」 － Publickey  セキュリティ＆プライバシー関連  Reverse-Engineering the Redactions in the Ghislaine Maxwell Deposition - Schneier on Security 原子力規制委員会への不正アクセスについてまとめてみた - piyolog Dropbox出身者が問題だらけのVPNに終わりをもたらす | TechCrunch Japan The NSA is Refusing to Disclose its Policy on Backdooring Commercial Products - Schneier on Security Tracking Users on Waze - Schneier on Security 「Netlogon」脆弱性（ZeroLogon）への対処を！ ～Microsoftが改めて警告 - 窓の杜 Windows kernel zero-day vulnerability used in targeted attacks  Google discloses Windows zero-day exploited in the wild | ZDNet Googleがいまだに悪用されているWindowsのゼロデイバグを公表 | TechCrunch Japan   Oracle Security Alert - CVE-2020-14750 : WebLogic Server の脆弱性について警告 9月は382件のDDoS攻撃を観測、「パスワード付きZIPファイル」で検知回避を狙う「Emotet」も～IIJ調査 - INTERNET Watch  天文関連  NASA’s SOFIA Discovers Water on Sunlit Surface of Moon | NASA  NASAが月面の太陽光が当たる部分に水の存在を確認 | TechCrunch Japan MIT Tech Review: 「月の水」に到達できる日は意外と近い？新研究で明らかに   生まれたばかりの宇宙で成熟した銀河が急速に出現していた―アルマ望遠鏡による初期宇宙にある銀河の最大規模の探索― | 国立天文台(NAOJ) ニュース - アルマ望遠鏡、海王星の赤道に横たわる「シアン化水素」の帯を世界で初めて発見 - アルマ望遠鏡 惑星科学：着陸機フィラエがバウンドしたために得られた、彗星に関する新知見 | Nature | Nature Research  知財関連  RIAA\u0026rsquo;s YouTube-DL Takedown Ticks Off Developers and GitHub\u0026rsquo;s CEO * TorrentFreak  GitHub、RIAAからのDMCA申請で複数のリポジトリを削除 - ITmedia NEWS   20 Years Ago, LimeWire Took File-Sharing to A New Level * TorrentFreak GitHub Warns Users Reposting YouTube-DL They Could Be Banned * TorrentFreak  Linux または Ubuntu に関する話題  Canonical、「Ubuntu 20.10」の提供を開始 - 窓の杜 Ubuntu 20.10 その22 - パッケージの圧縮形式の変更によるSnapアプリの大幅な起動時間短縮 - kledgeb Ubuntu 21.04 その5 - Ubuntu 21.04の開発コード決定・Hで始まる開発コード - kledgeb  Windows に関する話題  サクラエディタ/Eclipceを快適にするプログラミング用の日本語フォントを入れる（Windows） | HASH TECH（ハッシュテック） – 25歳エンジニアのWEB開発録 : 実はサクラエディタを使う必要があって\u0026hellip;  mzyy94/RictyDiminished-for-Powerline: Ricty Diminished with Powerline patched \u0026mdash; fonts for programming   CompatTelRunner.exeとは | CPU使用率が高い | プロセスを停止する VirtualBoxにWindows10 64bit（無料評価版）をインストールする方法  Go 言語関連  Goで再帰クロージャを実装 - Qiita Go言語でUUID4をURLフレンドリーなbase64でエンコーデュング sijms/go-ora: Pure go oracle client GORM バージョン2の変更点 - Qiita novacloudcz/graphql-orm: Golang GraphQL API generator using gqlgen and gorm Unit Test (SQL) in Golang. How to mock our SQL code in Golang for… | by Bismo Baruno | Easyread | Medium  Rust 言語関連  RustでつくるGit入門 : 買ってない  その他  jamesmunns/tomlq: A tool for getting data from TOML files on the command line GitHub でリリースしたときにツイートする GitHub SocialifyでOGP画像を生成してSNS映えするOSSに チーム個々人のテックブログをRSSで集約するサイトを作った（Next.js） AIは新しい芸術を「創造」できるか？（そして、それをテーマにする書籍が来月刊行される） - YAMDAS現更新履歴 オープンソースな義足は人工器官の研究を促進するか - YAMDAS現更新履歴 2020年10月27日ニュース「マスクはやはり拡散や吸い込み量抑える 東大医科研が新型コロナウイルス使い初の検証」 | SciencePortal : 「ほとんど防ぐ」ならまだしも40%も素通しなら大した意味はないと思うのだが\u0026hellip; 「この位置にｐｒｉｎｔｆが無いとなぜか動かないんだ。」 - Qiita DropboxがWestern Digitalの高効率ディスクへの移行を開始 | TechCrunch Japan AMD、FPGA大手のXilinx買収を正式発表。データセンター向けプロセッサ分野で圧倒的なインテルを本格的に追撃 － Publickey さくらインターネット 全サービスにおける Internet Explorer サポート終了のお知らせ | さくらインターネット You Can Now Sponsor CC’s Open Source Work on GitHub! - Creative Commons  Sponsor @creativecommons on GitHub Sponsors · GitHub   相関サブクエリとパフォーマンス 「Office」でリンクをQRコードに！ 「QR4Office」でチラシからのアクセスをアップしよう【レビュー】 - 窓の杜 プリキュアはいま、何人いるのか　“プリキュア人数問題”の歴史をひもとく (1/3) - ねとらぼ 【Typescript】GraphQL入門 : 買ってない 証明写真ボックス設置場所検索 | 富士フイルム パケット構造をアスキーアート風に表現できる「Wireshark 3.4」が正式リリース - 窓の杜 2020年10月30日ニュース「重質油を効率よく回収する新手法を発明 東京農工大、逆転の発想が奏功」 | SciencePortal 方眼紙ネット : 面白い！ 印刷コストを考えたら普通に買ったほうが安いけどな（笑） サントリー、国内の全サーバ1000台をAWS移行　データセンター解約で「身軽になった」 (1/2) - ITmedia NEWS GitHub Actions textlint ツールでの reviewdog キャッチアップ : 修正サジェスト .NET FoundationがOpen Source Initiativeへの加盟を発表。オープンソースコミュニティとの関係をより密に － Publickey Goで双方向リストをJSONに変換する際のつまずき - Qiita : Go というか JSON 等の構造化テキストでコンテナ構造を表現する際には当然気をつけるべきことだろう 【レビュー】わずか3万円の格安ノートパソコンで仕事も遊びもできるッ! サードウェーブの意欲作「VF-AD4」を使い倒す ～M.2 SSDを増設可能! 実用性がグンとアップ - PC Watch ブログ: RISC-Vプロセッサは、Intel、ARM、AMDと競合する可能性があるか?  "
    },
    {
      "title": "GnuPG の HOME はどこにある？",
      "section": "openpgp",
      "description": "GnuPG の HOME ディレクトリって .gnupg フォルダじゃねーの？",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/openpgp/gnupg-home-in-windows/",
      "published": "2020-11-02T11:49:45+00:00",
      "update": "2020-11-02T22:37:40+00:00",
      "content": "最近また Windows パソコンを使うことになって，色々と環境を整えるついでに GnuPG もインストールしたのだが\u0026hellip;\n今回 Scoop というパッケージ・マネージャを導入したのだが，これを使って GnuPG をインストールするとちょっと面白いことになる。\nScoop の導入方法は割愛して，いきなり GnuPG のインストールから話を始める。\n$ scoop install gnupg Installing \u0026#39;gnupg\u0026#39; (2.2.23) [64bit] ... Linking ~\\scoop\\apps\\gnupg\\current =\u0026gt; ~\\scoop\\apps\\gnupg\\2.2.23 Persisting home \u0026#39;gnupg\u0026#39; (2.2.23) was installed successfully! これで GnuPG v2.2.23 は %USERPROFILE%\\scoop\\apps\\gnupg\\2.2.23 フォルダにインストールされ %USERPROFILE%\\scoop\\apps\\gnupg\\current にシンボリック・リンクが張られる。 さらに環境変数 PATH に %USERPROFILE%\\scoop\\apps\\gnupg\\current が追加される。\nScoop の特徴でありメリットのひとつはインストールした実行バイナリを %USERPROFILE%\\scoop\\shims フォルダに集めることで環境変数 PATH を無駄に汚さないことにあるが， GnuPG の場合はシングル・バイナリではなく，インストールした複数のバイナリと協調して動作するため，単純に shims フォルダにコピるのは難しかったようだ。\nScoop によってインストールされた GnuPG のディレクトリ構成は以下のようになっている1。\n$ pwd C:\\Users\\username $ cd scoop\\apps\\gnupg\\current $ ll -rw-a-- 33K Sep 4 00:39:00 README.txt drwx--- 0 Oct 27 13:59:32 bin/ dr-x--- 0 Oct 27 13:59:32 home@ -\u0026gt; C:\\Users\\username\\scoop\\persist\\gnupg\\home drwx--- 0 Oct 27 13:59:32 include/ -rw-a-- 58 Oct 27 13:59:32 install.json drwx--- 0 Oct 27 13:59:32 lib/ -rw-a-- 1.4K Oct 27 13:36:14 manifest.json drwx--- 0 Oct 27 13:59:32 share/ 実際に GnuPG を動かしてみると\n$ gpg --version gpg (GnuPG) 2.2.23 libgcrypt 1.8.6 Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: C:/Users/username/scoop/apps/gnupg/current/home サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 となる。 HOME ディレクトリが %USERPROFILE%\\scoop\\apps\\gnupg\\current\\home になっているのがお分かりだろうか。 ただし，この home ディレクトリはシンボリック・リンクなので，実体は %USERPROFILE%\\scoop\\persist\\gnupg\\home ということになる。\nって GnuPG の HOME ディレクトリって %USERPROFILE% 直下の .gnupg フォルダじゃねーの？\nおやや，と思って調べてみたら Windows 版の GnuPG はちょっと違うらしい。\nTo install GnuPG as a portable application under Windows, create an empty file named gpgconf.ctl in the same directory as the tool gpgconf.exe. The root of the installation is then that directory; or, if gpgconf.exe has been installed directly below a directory named bin, its parent directory. You also need to make sure that the following directories exist and are writable: ROOT/home for the GnuPG home and ROOT/usr/local/var/cache/gnupg for internal cache files. via Agent Options (Using the GNU Privacy Guard)  つまり（gpgconf.exe のある） %USERPROFILE%\\scoop\\apps\\gnupg\\current\\bin フォルダに空の gpgconf.ctl ファイルを置けば その親ディレクトリ（%USERPROFILE%\\scoop\\apps\\gnupg\\current）がインストール・ルートとして認識され，その直下の home フォルダが GnuPG の HOME ディレクトリとなる。\nWindows 版の場合 gpgconf.ctl ファイルによる HOME の指定が優先され，環境変数 GNUPGHOME やレジストリを使った指定は無視されるらしい。 ただし --homedir オプションは効くとのこと。 これはこれで合理的。\n試しに Ubuntu で gpgconf.ctl を置いてみたが効かなかった。 まぁ，当たり前か（笑）\nそれにしても Scoop はよい。 端末エミュレータでコマンドライン中心に作業している人には Scoop のほうが設計がシンプルで使いやすいんじゃないだろうか。 まぁ，私は作業の中心が（仕事以外では）もはや Windows ではなくなっているので，余計にそう思うのかもしれないが（笑）\nブックマーク  scoop / nyagos で始めるコマンドライン生活  参考図書   ちなみに私は Windows Terminal ＋ NYAGOS を愛用している。例に出ている ll は NYAGOS の組み込みコマンド（の alias）である。 \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
