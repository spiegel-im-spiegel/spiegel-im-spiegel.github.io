{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "gpgpdump v0.12.0 をリリースした",
      "section": "release",
      "description": "各 shell 用の自動補完スクリプトを吐き出せるようにした。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/01/gpgpdump-v0_12_0-is-released/",
      "published": "2021-01-23T02:14:29+00:00",
      "update": "2021-01-23T02:22:55+00:00",
      "content": "OpenPGP パケットの内容を可視化する gpgpdump の v0.12.0 をリリースした。\n Release v0.12.0 · spiegel-im-spiegel/gpgpdump · GitHub  今回は，お試し機能として completion サブコマンドを追加して各 shell 用の自動補完スクリプトを吐き出せるようにした。 つっても spf13/cobra の機能を使ってるだけだけどね。\nBash, Zsh, Fish, PowerShell の自動補完機能に対応している。 本当は NYAGOS でも使えるようにしたかったんだけど， cobra も NYAGOS も双方カスタマイズの仕方がよく分からなくて，今回は諦めた。 今後の課題としておこう。\nたとえば Linux 上の bash であれば\n$ source \u0026lt;(gpgpdump completion bash) で取り敢えず試すことができる。 また\nsudo sh -c \u0026#34;gpgpdump completion bash \u0026gt; /usr/share/bash-completion/completions/gpgpdump\u0026#34; とかすればシステム全体に設定可能である。\n他の shell については\n$ gpgpdump completion -h とすれば簡単な使い方が表示されるので参考にして欲しい。\nブックマーク  OpenPGP の実装 OpenPGP パケットを可視化する gpgpdump  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Unicode 文字種の判別",
      "section": "golang",
      "description": "Unicode 文字種を判別するには unicode 標準パッケージが使える。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/unicode-rangetables/",
      "published": "2021-01-22T11:26:18+00:00",
      "update": "2021-01-22T11:27:04+00:00",
      "content": "Zenn で「やっかいな日本語」なる記事 (ポエム) を書いたが，このブログでは Go における Unicode 文字種の判別に話題を絞って紹介してみる。\nUnicode 文字種を判別するには unicode 標準パッケージが使える。\n判別用の unicode.RangeTable を用意し，これを参照することで文字種を判別することができる。 このパッケージの中身を見ると分かるが，かなりの数の定義済み unicode.RangeTable テーブルが取り揃えられている。 今回はこの定義済みテーブルのみ使うことにしよう。\n図形文字と制御文字 まずは大雑把に「図形文字」と「制御文字」を判別してみよう。\n図形文字の判別には unicode.IsGraphic() 関数が，制御文字の判別には unicode.IsControl() 関数が使える。\nただし unicode.IsControl() 関数では U+00FF 以下の ISO 88591 で定義されている制御文字領域しか判別してくれないようで BOM (U+FEFF) などの Unicode 独自の制御文字も含めて判別するのであれば unicode.C テーブルを使う必要がある。\nそこで，こんな関数を考えてみる。\nimport \u0026#34;unicode\u0026#34; func check(r rune) string { switch { case unicode.IsGraphic(r): return \u0026#34;Graphic\u0026#34; case unicode.IsControl(r): return \u0026#34;Latin1 Control\u0026#34; case unicode.Is(unicode.C, r): return \u0026#34;Unicode Control\u0026#34; } return \u0026#34;Unknown\u0026#34; } これを使って実際に文字列をチェックしてみよう。\nfunc main() { text := string([]byte{0xef, 0xbb, 0xbf, 0xe3, 0x82, 0x84, 0x09, 0xe3, 0x81, 0x82}) fmt.Println(text) for _, c := range text { fmt.Printf(\u0026#34;%#U (%v)\\n\u0026#34;, c, check(c)) } } これを実行すると\n$ go run sample1.go ﻿や あ U+FEFF (Unicode Control) U+3084 \u0026#39;や\u0026#39; (Graphic) U+0009 (Latin1 Control) U+3042 \u0026#39;あ\u0026#39; (Graphic) となった。うんうん。\n結合子と異体字セレクタ 上述の check() 関数を使って，今度は絵文字の中身を見てみる。\nfunc main() { text := \u0026#34;🙇‍♂️\u0026#34; for _, c := range text { fmt.Printf(\u0026#34;%#U (%v)\\n\u0026#34;, c, check(c)) } } これを実行すると\n$ go run sample2.go U+1F647 \u0026#39;🙇\u0026#39; (Graphic) U+200D (Unicode Control) U+2642 \u0026#39;♂\u0026#39; (Graphic) U+FE0F \u0026#39;️\u0026#39; (Graphic) となった。\nありゃ。 ZWJ はともかく異体字セレクタって図形文字あつかいなんだ。\nこれでは大雑把すぎるので check() 関数にいくつか条件を足して\nfunc check(r rune) string { switch { case unicode.Is(unicode.Sc, r): return \u0026#34;Symbol/currency\u0026#34; case unicode.Is(unicode.Sk, r): return \u0026#34;Symbol/modifier\u0026#34; case unicode.Is(unicode.Sm, r): return \u0026#34;Symbol/math\u0026#34; case unicode.Is(unicode.So, r): return \u0026#34;Symbol/other\u0026#34; case unicode.Is(unicode.Variation_Selector, r): return \u0026#34;Variation Selector\u0026#34; case unicode.Is(unicode.Join_Control, r): return \u0026#34;Join Control\u0026#34;  case unicode.IsGraphic(r): return \u0026#34;Graphic\u0026#34; case unicode.IsControl(r): return \u0026#34;Latin1 Control\u0026#34; case unicode.Is(unicode.C, r): return \u0026#34;Unicode Control\u0026#34; } return \u0026#34;Unknown\u0026#34; } と書き換えてみる。 これを使ってもう一度実行してみると\n$ go run sample2.go U+1F647 \u0026#39;🙇\u0026#39; (Symbol/other) U+200D (Join Control) U+2642 \u0026#39;♂\u0026#39; (Symbol/other) U+FE0F \u0026#39;️\u0026#39; (Variation Selector) となった。これで結合子や異体字セレクタをきちんと判別できる。 なお，シンボルについて細かく区別しなくていいのなら unicode.IsSymbol() 関数を使う手もある。\n漢字と部首 以前「こんな埼「玉」修正してやるぅ」でも書いたが， Unicode では漢字の部首にもコードポイントが割り当てられている。 しかし，幸いなことに unicode 標準パッケージの定義済み unicode.RangeTable テーブルで部首を判別可能である。\n具体的には check() 関数を以下のように書き換える。\nfunc check(r rune) string { switch { case unicode.Is(unicode.Radical, r): return \u0026#34;Radical\u0026#34; case unicode.Is(unicode.Ideographic, r): return \u0026#34;Ideographic\u0026#34;  case unicode.IsGraphic(r): return \u0026#34;Graphic\u0026#34; case unicode.IsControl(r): return \u0026#34;Latin1 Control\u0026#34; case unicode.Is(unicode.C, r): return \u0026#34;Unicode Control\u0026#34; } return \u0026#34;Unknown\u0026#34; } これを使えば\nfunc main() { text := \u0026#34;⽟玉\u0026#34; for _, c := range text { fmt.Printf(\u0026#34;%#U (%v)\\n\u0026#34;, c, check(c)) } } の実行結果が\n$ go run sample3.go U+2F5F \u0026#39;⽟\u0026#39; (Radical) U+7389 \u0026#39;玉\u0026#39; (Ideographic) となる。\nなお， unicode.Ideographic テーブルで判別できるのは本当に漢字だけなので，全角の英数字・かな文字・記号は，これにかからない。 ちなみに，部首は絵文字と同じくシンボル扱いなので unicode.IsSymbol() 関数でも一応は区別できる。\n3羽の「ペンギン」 次は check() 関数をかな文字を判別するよう書き換える。 こんな感じ。\nfunc check(r rune) string { switch { case unicode.Is(unicode.Katakana, r): return \u0026#34;Katakana\u0026#34; case unicode.Is(unicode.Hiragana, r): return \u0026#34;Hiragana\u0026#34; case unicode.Is(unicode.Lm, r): return \u0026#34;Letter/modifier\u0026#34; case unicode.Is(unicode.Lo, r): return \u0026#34;Letter\u0026#34; case unicode.Is(unicode.Mc, r): return \u0026#34;Mark/spacing combining\u0026#34; case unicode.Is(unicode.Me, r): return \u0026#34;Mark/enclosing\u0026#34; case unicode.Is(unicode.Mn, r): return \u0026#34;Mark/nonspacing\u0026#34;  case unicode.IsGraphic(r): return \u0026#34;Graphic\u0026#34; case unicode.IsControl(r): return \u0026#34;Latin1 Control\u0026#34; case unicode.Is(unicode.C, r): return \u0026#34;Unicode Control\u0026#34; } return \u0026#34;Unknown\u0026#34; } これを使って以下の文字列を判別してみる。\nfunc main() { text := \u0026#34;ペンギンペンギンﾍﾟﾝｷﾞﾝ\u0026#34; for _, c := range text { fmt.Printf(\u0026#34;%#U (%v)\\n\u0026#34;, c, check(c)) } } 実行結果は以下の通り。\n$ go run sample4.go U+30DA \u0026#39;ペ\u0026#39; (Katakana) U+30F3 \u0026#39;ン\u0026#39; (Katakana) U+30AE \u0026#39;ギ\u0026#39; (Katakana) U+30F3 \u0026#39;ン\u0026#39; (Katakana) U+30D8 \u0026#39;ヘ\u0026#39; (Katakana) U+309A \u0026#39;゚\u0026#39; (Mark/nonspacing) U+30F3 \u0026#39;ン\u0026#39; (Katakana) U+30AD \u0026#39;キ\u0026#39; (Katakana) U+3099 \u0026#39;゙\u0026#39; (Mark/nonspacing) U+30F3 \u0026#39;ン\u0026#39; (Katakana) U+FF8D \u0026#39;ﾍ\u0026#39; (Katakana) U+FF9F \u0026#39;ﾟ\u0026#39; (Letter/modifier) U+FF9D \u0026#39;ﾝ\u0026#39; (Katakana) U+FF77 \u0026#39;ｷ\u0026#39; (Katakana) U+FF9E \u0026#39;ﾞ\u0026#39; (Letter/modifier) U+FF9D \u0026#39;ﾝ\u0026#39; (Katakana) 濁点や半濁点の文字種が全角と半角で異なっている点に注意。 ホンマ，面倒くさいったら。\n面倒な Unicode unicode 標準パッケージにある定義済み unicode.RangeTable テーブルはよくできてるし，ある程度は日本語も考慮されているけど，細かい制御を行うのであれば用途に応じて専用の unicode.RangeTable テーブルを用意したほうがいいだろう。 量が多くて面倒くさいけどね。\nブックマーク   その文字が JIS X 0208 に含まれるか？ あるいは unicode.RangeTable の使い方\n  かなカナ変換\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   8ビット空間の符号化文字集合および文字エンコーディング。国や言語ごとにいくつかのバリエーションがある。最も有名なのはドイツ語やフランス語の文字を含む ISO 8859-1，通称 Latin-1 だろう。日本の JIS X 0201 も ISO 8859 のバリエーションと言える。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "OpenJDK 15.0.2 がリリースされた",
      "section": "release",
      "description": "今回は OpenJDK に関しては脆弱性の修正がない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/01/openjdk-15_0_2-is-released/",
      "published": "2021-01-21T11:32:19+00:00",
      "update": "2021-01-21T11:33:38+00:00",
      "content": "定例の Java マイナー・バージョンアップが行われた。 なんとビックリなことに今回は OpenJDK に関しては脆弱性の修正がない。\n OpenJDK Vulnerability Advisory: 2021/01/19  ただし Oracle Java については Java 8 以下で脆弱性の修正があるらしい。\n Oracle Java の脆弱性対策について(CVE-2020-14803)：IPA 独立行政法人 情報処理推進機構  これって OpenJDK には影響ないのか？ ホンマに？ \u0026hellip;まぁ，いいや。\nOpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk15.0.2/0d1cfde4252546c6931946de8db48ee2/7/GPL/openjdk-15.0.2_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-15.0.2_linux-x64_bin.tar.gz $ sudo ln -s jdk-15.0.2 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;15.0.2\u0026#34; 2021-01-19 OpenJDK Runtime Environment (build 15.0.2+7-27) OpenJDK 64-Bit Server VM (build 15.0.2+7-27, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern  うむうむ。 ちゃんと動くな。\nブックマーク  2021年1月Oracle製品のクリティカルパッチアップデートに関する注意喚起  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n   2021-01-10 に PlantUML V1.2021.0 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.15.7 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は複数の脆弱性について改修されている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/01/go-1_15_7-is-released/",
      "published": "2021-01-21T10:45:21+00:00",
      "update": "2021-01-21T10:45:46+00:00",
      "content": "予告通り， Go 1.15.7 がリリースされた。\n [security] Go 1.15.7 and Go 1.14.14 are released  今回は複数の脆弱性について改修されている。\ncmd/go: packages using cgo can cause arbitrary code execution at build time (CVE-2021-3115) The go command may execute arbitrary code at build time when cgo is in use on Windows. This may occur when running “go get”, or any other command that builds code. Only users who build untrusted code (and don’t execute it) are affected.\nIn addition to Windows users, this can also affect Unix users who have “.” listed explicitly in their PATH and are running “go get” or build commands outside of a module or with module mode disabled.\n via Go 1.15.7 and Go 1.14.14 are released  というわけで， Windows だけでなく UNIX 系のプラットフォームでも環境変数 PATH にカレントディレクトリ “.” が設定されているとヤバいので（そんなヤツおらんやろけど），きちんと対処すること。\n（以下未稿）\ncrypto/elliptic: incorrect operations on the P-224 curve (CVE-2021-3114) The P224() Curve implementation can in rare circumstances generate incorrect outputs, including returning invalid points from ScalarMult. via Go 1.15.7 and Go 1.14.14 are released  ただし\nThe crypto/x509 and golang.org/x/crypto/ocsp (but not crypto/tls) packages support P-224 ECDSA keys, but they are not supported by publicly trusted certificate authorities. No other standard library or golang.org/x/crypto package supports or uses the P-224 curve.. via Go 1.15.7 and Go 1.14.14 are released  ということなので，実質的なインパクトは小さい？\n（以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.15.7.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.15.7.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.15.7.linux-amd64.tar.gz $ sudo mv go go1.15.7 $ sudo ln -s go1.15.7 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.15.7 linux/amd64 アップデートは計画的に。\nブックマーク  Command PATH security in Go - The Go Blog Go でサブプロセスを起動する際は LookPath に気をつけろ！  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "spiegel-im-spiegel/ml v0.4.1 をリリースした",
      "section": "release",
      "description": "ヒストリ機能を簡易リングバッファに切り替えた。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/01/makelink-0_4_1-is-released/",
      "published": "2021-01-17T04:32:11+00:00",
      "update": "2021-01-17T04:33:09+00:00",
      "content": "Markdown 形式のリンクを生成する spiegel-im-spiegel/ml v0.4.0 および v0.4.1 をリリースした。\n Release v0.4.0 · spiegel-im-spiegel/ml · GitHub Release v0.4.1 · spiegel-im-spiegel/ml · GitHub  いや， v0.4.0 をリリースした後にエラーハンドリングをしくじってるのに気が付いて出し直し（笑）\n対話モード（-i オプション）のヒストリ機能を簡易リングバッファに切り替えた。 あと -l オプションでヒストリ数を指定できる。 既定は 0，つまりヒストリ機能を無効にしている。 またヒストリ情報を $XDG_CONFIG_HOME/ml/history ファイルに保存して再利用できるようにした。 ちなみに Windows 版では %APPDATA%\\ml\\hisotry ファイル， macOS では /Library/Application Support/ml/history ファイルとなる（筈）。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "GnuPG 2.2.27 がリリースされた",
      "section": "release",
      "description": "主に Windows 環境における不具合の修正のようだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/01/gnupg-2_2_27-is-released/",
      "published": "2021-01-13T09:41:38+00:00",
      "update": "2021-01-13T09:41:48+00:00",
      "content": "GnuPG 2.2.27 がリリースされた。\n [Announce] GnuPG 2.2.27 released  このバージョンは主に Windows 環境における不具合の修正のようだ。 併せて Gpg4win 3.1.15 もリリースされている。\n [Gpg4win-users-en] [Gpg4win-announce] Gpg4win 3.1.15 released  詳細はこちら。\n gpg: Fix regression in 2.2.24 for gnupg_remove function under Windows. [#5230] gpgconf: Fix case with neither local nor global gpg.conf. [9f37d3e6f3] gpgconf: Fix description of two new options. [#5221] Build Windows installer without timestamps. Note that the Authenticode signatures still carry a timestamp.  Release-info: https://dev.gnupg.org/T5234 via GnuPG 2.2.27 released  自前でビルドする際の対象パッケージは以下の通り。\n   # パッケージ名 バージョン 公開日 更新     1 Libgpg-error 1.41 2020-12-21    2 Libgcrypt 1.8.7 2020-10-23    3 Libassuan 2.5.4 2020-10-23    4 Libksba 1.5.0 2020-11-18    5 nPth 1.6 2018-07-16    6 ntbTLS 0.2.0 2020-08-27    7 GnuPG 2.2.27 2021-01-11     gpg-agent を Linux のサービスで起動している場合は\n$ systemctl --user restart gpg-agent とサービスを再起動するのを忘れずに。 これで\n$ gpg --version gpg (GnuPG) 2.2.27 libgcrypt 1.8.7 Copyright (C) 2021 Free Software Foundation, Inc. License GNU GPL-3.0-or-later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 となる。\nアップデートは計画的に。\nブックマーク  OpenPGP の実装  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "OpenSSH 完全に理解した（笑）",
      "section": "remark",
      "description": "どうやら OpenSSH に対する理解が足りないと気付いたので，知ってること気付いたこと等を書き出してみる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/01/openssh-mystery/",
      "published": "2021-01-11T07:31:17+00:00",
      "update": "2021-01-11T08:19:45+00:00",
      "content": "使ってみたかったんだ，このフレーズ（笑）\nめでたくもフィードバック先移行後，はじめてのフィードバックを頂いた。 どうやら OpenSSH に対する理解が足りないと気付いたので，知ってること気付いたこと等を書き出してみる。\n「ここ違うよ」とかいうのがありましたらフィードバックにてご指摘いただけると有り難いです。\nOpenSSH に関する本とかあればよかったんだけどねぇ。 日本語の本はみんな出版年がエラく古いし，しかも「使い方」は書いてあっても中で何してるかについてはあまり言及されてない感じ？ とっかに「Inside OpenSSH」みたいな本があればいいのに（笑）\nOpenSSH 暗号化通信の手順 OpenSSH におけるサーバ-クライアント間の暗号化通信の手順は大雑把に\n サーバ-クライアント間で使える暗号スイートの確認 鍵交換アルゴリズムによるシークレットの導出とセッション鍵の生成 セッション鍵による暗号化通信の開始 クライアント認証  となっているようだ。 以降でひとつづつ見ていこう。\n鍵交換アルゴリズムとハッシュ・アルゴリズム 暗号化通信を行うためにはサーバ-クライアント間でセッション鍵（共通鍵）を共有する必要がある。 （昔はともかく）今の OpenSSH ではセッション鍵の取得に Diffie-Hellman 鍵交換アルゴリズムまたはそのバリエーションを使う。 Diffie-Hellman 鍵交換アルゴリズムは公開鍵暗号の一種だがセッションの開始ごとに使い捨ての鍵ペアを生成する（筈）ので，ユーザがそれを意識することはないだろう。\n鍵交換アルゴリズムで得られる共有データを「シークレット」と呼ぶことがある。 OpenSSH ではシークレットをハッシュ化した値をセッション鍵として使っているようだ。\nしたがってセッション鍵の共有には鍵交換アルゴリズムとハッシュ・アルゴリズムの2つが必要となる。 OpenSSH でサポートしてる暗号スイートは以下の通り。\n   名称 鍵交換 ハッシュ 推奨 備考     curve25519-sha256 ECDH (curve25519) SHA2-256  OpenSSH 7.4 以降   diffie-hellman-group1-sha1 DH (1024 bits) SHA1     diffie-hellman-group14-sha1 DH (2048 bits) SHA1     diffie-hellman-group14-sha256 DH (2048 bits) SHA2-256  OpenSSH 7.3 以降   diffie-hellman-group16-sha512 DH (4096 bits) SHA2-512  OpenSSH 7.3 以降   diffie-hellman-group18-sha512 DH (8192 bits) SHA2-512  OpenSSH 7.3 以降   diffie-hellman-group-exchange-sha1 Custom DH (?) SHA1     diffie-hellman-group-exchange-sha256 Custom DH (?) SHA2-256  OpenSSH 5.4 以降   ecdh-sha2-nistp256 ECDH (NIST curve P-256) SHA2-256  OpenSSH 5.7 以降   ecdh-sha2-nistp384 ECDH (NIST curve P-384) SHA2-256  OpenSSH 5.7 以降   ecdh-sha2-nistp521 ECDH (NIST curve P-521) SHA2-256  OpenSSH 5.7 以降    SHA-1 は危殆化が叫ばれて久しく，既に推奨されていない。 このブログでもあちこちで書いているが Zenn の以下の記事でまとめているので興味のある人はどうぞ。\n さようなら SHA-1  ECDH (Elliptic Curve Diffie–Hellman) は Diffie-Hellman 鍵交換アルゴリズムの楕円曲線版と考えてもらって構わない。\nECDH で使用する楕円曲線のうち NIST 推奨パラメータ（curve P-256/384/521）は微妙に評判が悪いようで，推奨しないところがあった。 どうも NIST 発のアルゴリズムは使いたくないということのようだ。 まぁ NSA 絡みで度々やらかしてるから信用がないんだろうな（笑）\nこれらの暗号スイートの選択と優先順位はサーバ側で設定するのでユーザが意識することはない。 強いて言うなら古いバージョンは使うなってことくらいか。\n共通鍵暗号アルゴリズムと暗号モード 実際の暗号化通信はセッション鍵を使った共通鍵暗号アルゴリズムで行う。 OpenSSH でサポートしてる共通鍵暗号アルゴリズムと暗号モードは以下の通り。\n   名称 共通鍵暗号 暗号モード 推奨 備考     3des-cbc TripleDES CBC     aes128-cbc AES-128 CBC     aes192-cbc AES-192 CBC     aes256-cbc AES-256 CBC     aes128-ctr AES-128 CTR     aes192-ctr AES-192 CTR     aes256-ctr AES-256 CTR     aes128-gcm@openssh.com AES-128 GCM  OpenSSH 6.2 以降   aes256-gcm@openssh.com AES-256 GCM  OpenSSH 6.2 以降   arcfour ARCFOUR (40?) —     arcfour128 ARCFOUR (128) —     arcfour256 ARCFOUR (256) —     blowfish-cbc Blowfish (64) CBC     cast128-cbc CAST (128) CBC     chacha20-poly1305@openssh.com ChaCha20 Poly1305  OpenSSH 6.5 以降    ARCFOUR ってのはいわゆる RC4 ストリーム暗号のこと。 RC4 は公式にはアルゴリズムを公開していないため “Alleged RC FOUR” の意味で ARCFOUR という名称が使われているようだ。\nRC4 および CBC モードは危殆化が報告されて久しく，推奨されない。 また TripleDES, Blowfish, CAST はセキュリティ強度不足のため，これも推奨されない。\n優先順位としては AEAD (Authenticated Encryption with Associated Data; 認証付き暗号) として機能する GCM や ChaCha20-Poly1305 がより推奨されているらしい。 なお，これらの暗号スイートの選択と優先順位はサーバ側で設定するのでユーザが意識することはない。\nメッセージ認証符号 GCM や ChaCha20-Poly1305 以外の AEAD として機能しない暗号モードの場合は MAC (Message Authentication Code; メッセージ認証符号) を組み合わせる。 組み合わせ方としては\n Encrypt-then-MAC (OpenSSH 6.2 以降) MAC-then-encrypt Encrypt-and-MAC  のいずれかを選択できるらしい。 Encrypt-then-MAC であれば AEAD として機能する。 OpenSSH でサポートしてる MAC アルゴリズムとハッシュ・アルゴリズムの組み合わせは以下の通り。\n   名称 MAC ハッシュ 推奨 備考     hmac-md5 HMAC MD5     hmac-md5-96 HMAC MD5     hmac-sha1 HMAC SHA1     hmac-sha1-96 HMAC SHA1     hmac-sha2-256 HMAC SHA2-256  OpenSSH 5.9 以降   hmac-sha2-512 HMAC SHA2-512  OpenSSH 5.9 以降   umac-64 UMAC-64 (Universal Hash)  OpenSSH 4.7 以降   umac-128 UMAC-128 (Universal Hash)  OpenSSH 6.2 以降    それぞれの名称の後ろに -etm@openssh.com と付くと Encrypt-then-MAC で動作する。\nMD5 は危殆化が報告されて久しく，推奨されない。 SHA1 は HMAC に関しては2031年以降も “Acceptable” であるとされているが，他の暗号スイートとの組み合わせで考えると避けたほうがいいかもしれない。\nUMAC は RFC 4418 で規定されている。 この中で\nLikewise, 32-, 96-, and 128-bit tags cannot be forged with more than 1/2^30, 1/2^90, and 1/2^120 probability plus the probability of a successful attack against AES as a pseudorandom permutation. via UMAC: Message Authentication Code using Universal Hashing  とあるので UMAC-64 や UMAC-128 はセキュリティ強度不足なんじゃないかと思うのだが，どうだろう。\nこれらの暗号スイートの選択と優先順位はサーバ側で設定するのでユーザが意識することはない。\n電子署名アルゴリズムとハッシュ・アルゴリズム クライアント認証で公開鍵暗号を用いる場合は，ユーザ側で認証鍵ペアを生成し，公開鍵をあらかじめサーバ側と共有する必要がある。 また公開鍵暗号を用いたクライアント認証ではハッシュ・アルゴリズムも用いる。 OpenSSH でサポートしてるクライアント認証の暗号スイートは以下の通り。\n   名称（サーバ側） 電子署名 ハッシュ 推奨 備考     ssh-ed25519 EdDSA (edwards25519) SHA2-256     sk-ssh-ed25519@openssh.com EdDSA (edwards25519) SHA2-256  OpenSSH 8.2 以降   ssh-rsa RSA SHA1  廃止予定   rsa-sha2-256 RSA SHA2-256  OpenSSH 7.2 以降   rsa-sha2-512 RSA SHA2-512  OpenSSH 7.2 以降   ssh-dss DSA SHA1     ecdsa-sha2-nistp256 ECDSA (NIST curve P-256) SHA2-256     ecdsa-sha2-nistp384 ECDSA (NIST curve P-384) SHA2-384     ecdsa-sha2-nistp521 ECDSA (NIST curve P-521) SHA2-512     sk-ecdsa-sha2-nistp256@openssh.com ECDSA (NIST curve P-256) SHA2-256  OpenSSH 8.2 以降    頭に sk- が付いているものは暗号デバイスに対応している。\nssh-rsa は将来バージョンで廃止が決まっている。\nOpenSSH では FIPS 186-3 以降の DSA に対応してないようで，鍵長が1024ビットしか対応してない（これも NIST 嫌悪か？）。 もちろん推奨できない。\nNIST 推奨パラメータを使った ECDSA も（ECDH と同じく）微妙に評判が悪い。 あと ECDSA は電子署名時に乱数を使うのだが，この実装をサボると脆弱性の元となる。 実際に，2013年に発覚した疑似乱数生成器 Dual EC DRBG の脆弱性では， NSA が絡んでいたこともあって，一気に ECDSA 忌避が強まったらしい。\n以上はサーバ側の設定の話だが，ユーザ側では ssh-keygen コマンドを使って認証鍵を生成する必要がある。\n認証鍵の生成では鍵種別（-t オプション）と鍵長（-b オプション）を指定する。 組み合わせは以下の通り。\n   鍵種別 鍵長 アルゴリズム 推奨 備考     rsa 1024以上\n（既定3072） RSA  3072ビット以上推奨   dsa 1024 DSA     ed25519 — EdDSA (edwards25519)     ed25519-sk — EdDSA (edwards25519)  OpenSSH 8.2 以降   ecdsa 256（既定） ECDSA (NIST curve P-256)     ecdsa 384 ECDSA (NIST curve P-384)     ecdsa 521 ECDSA (NIST curve P-521)     ecdsa-sk — ECDSA (NIST curve P-256)  OpenSSH 8.2 以降    これは私が盛大に勘違いしていたのだが，たとえば\n$ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/home/username/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/username/.ssh/id_rsa Your public key has been saved in /home/username/.ssh/id_rsa.pub The key fingerprint is: SHA256:qufsNjgco3QZNjE4eupwQiT6mD8fr2a7nXmU3ybxFHo username@hostname The key\u0026#39;s randomart image is: +---[RSA 3072]----+ | . | |..o o | |+. . o | |o.. + . | |.* . + S. . . | |* + = .o o E | |o= +.+.. . * | | .+ **+o. o + | | =*XOo o | +----[SHA256]-----+ てな感じに鍵を作ったときに表示される SHA256 は署名時ではなく，鍵指紋のハッシュ・アルゴリズムを指しているらしい。 実際の電子署名でどのハッシュ・アルゴリズムを使うのかはサーバ-クライアント間のネゴシエーションで決まるのかな（？）\n【おまけ】 各種アルゴリズムのセキュリティ強度 （「暗号鍵関連の各種変数について」より抜粋）\nおまけとして各種アルゴリズムのセキュリティ強度を挙げておく。\n各種暗号アルゴリズムとセキュリティ強度の関係 最初は種暗号アルゴリズムの鍵長とセキュリティ強度の関係を示す表。 単位は全てビットである。\n main table.nist2 th { vertical-align:middle; text-align: center; } main table.nist2 td { vertical-align:middle; text-align: center; }    Security\nStrength Symmetric\nkey\nalgorithms FFC\n(DSA, DH,\nMQV) IFC\n(RSA) ECC\n(ECDSA,\nEdDSA, DH,\nMQV)     $\\le 80$ 2TDEA $L=1024$ $N=160$  $k=1024$   $f = 160\\text{ - }223$   $112$ 3TDEA $L=2048$ $N=224$ $k=2048$ $f = 224\\text{ - }255$  $128$ AES-128 $L=3072$ $N=256$ $k=3072$ $f = 256\\text{ - }383$  $192$ AES-192 $L=7680$ $N=384$ $k=7680$ $f = 384\\text{ - }511$  $256$ AES-256 $L=15360$ $N=512$ $k=15360$$f=512+$   Comparable security strengths of symmetric block cipher and asymmetric-key algorithms (via SP 800-57 Part 1 Revision 5  5.6.1.1)  ハッシュ・アルゴリズムとセキュリティ強度の関係 次はハッシュ・アルゴリズムとセキュリティ強度の関係を示す表。\n main table.nist3 th { vertical-align:middle; text-align: center; } main table.nist3 td { text-align: center; }    Security Strength Digital Signatures and Other\nApplications Requiring Collision\nResistance HMAC, KMAC,\nKey Derivation Functions,\nRandom Bit Generation      $\\le 8$0 SHA-1 \u0026nbsp;  $112$ SHA-224, SHA-512/224, SHA3-224 \u0026nbsp;  $128$ SHA-256, SHA-512/256, SHA3-256 SHA-1, KMAC128  $192$ SHA-384, SHA3-384 SHA-224, SHA-512/224, SHA3-224  $\\ge 256$ SHA-512, SHA3-512 SHA-256, SHA-512/256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, KMAC256    Maximum security strengths for hash and hash-based functions (via SP 800-57 Part 1 Revision 5  5.6.1.2)  セキュリティ強度と有効期限 こちらはセキュリティ強度の有効期限を表したものだ。\n main table.nist4 th { vertical-align:middle; text-align: center; } main table.nist4 td { vertical-align:middle; text-align: center; }    Security Strength Through\n2030 2031 and\nBeyond    $\\lt 112$Applying Disallowed  Processing Legacy use $112$ Applying AcceptableDisallowed  Processing Legacy use $128$ Applying/ProcessingAcceptableAcceptable $192$ AcceptableAcceptable $256$ AcceptableAcceptable   Security-strength time frames (via SP 800-57 Part 1 Revision 5  5.6.3)  各用語はそれぞれ\n   用語 意味     Applying 適用   Processing 処理   Acceptable 許容   Legacy use 許容（レガシー使用のみ）   Disallowed 禁止    という意味だ。 例を挙げると，セキュリティ強度112ビットの暗号スイート（Cipher Suites）を適用する場合は2030年までは許容するけど2031年以降は禁止。 すでに暗号化されているデータを復号したい場合でも2031年以降はレガシー・システムしか許容しない，ということになる。\nブックマーク  OpenSSHの暗号化周りの設定について - Qiita ChaCha20-Poly1305の解説と実装 | 晴耕雨読 OpenSSHの認証に証明書を使う方法｜ConoHa VPSサポート  参考図書  SSH Mastery: OpenSSH, PuTTY, Tunnels and Keys (IT Mastery Book 12) (English Edition) Lucas, Michael W (著) Tilted Windmill Press 2018-02-06 (Release 2018-02-06) Kindle版 B079NL1L9K (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  タイトルを見て “SSH Mystery” と空目したアホは私です。洋書だけど英語不得手の私にも読める内容。\nreviewed by Spiegel on 2021-01-11 (powered by PA-APIv5)\n  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "2021-01-10 のブックマーク",
      "section": "bookmarks",
      "description": "「アカリク、自社サービスCloud LaTeX（クラウドラテフ）との同期を可能にするVisual Studio Code拡張機能（プラグイン）ベータ版を公式OSSとして公開」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/01/10-bookmarks/",
      "published": "2021-01-10T04:34:41+00:00",
      "update": "2021-01-10T04:36:41+00:00",
      "content": "リリース情報  Release v1.33.1 · golangci/golangci-lint · GitHub Release v1.34.0 · golangci/golangci-lint · GitHub Release v1.34.1 · golangci/golangci-lint · GitHub Hugo 0.80: Last Release of 2020! | Hugo Release gopls/v0.6.2 · golang/tools · GitHub Release v1.35.0 · golangci/golangci-lint · GitHub Release v1.0.6 · sonatype-nexus-community/nancy · GitHub  バベルのインターネット  米政府がTikTok禁止の差止命令を不服として上訴 | TechCrunch Japan 暴動関連  イーロン・マスク氏が米議会議事堂での暴動受けてFacebookの代わりにセキュリティ重視のSignalを推薦 | TechCrunch Japan : 意味不明w ミシェル・オバマ氏がトランプ氏アカウントの永久停止と未来のリーダーによるプラットフォーム乱用防止策をシリコンバレーに要求 | TechCrunch Japan FacebookとInstagramがトランプ大統領のアカウントを「少なくとも政権交代が完了」までブロック | TechCrunch Japan TikTokが暴動を扇動したトランプ大統領の演説動画を削除、#stormthecapitalなどのハッシュタグをブロック | TechCrunch Japan   GitHub、イランからの利用制限を解除へ。政府と交渉の末 － Publickey  セキュリティ＆プライバシー関連   On the Evolution of Ransomware - Schneier on Security\n  Salesforceの設定不備に起因した外部からのアクセス事案についてまとめてみた - piyolog\n Latest on the SVR’s SolarWinds Hack - Schneier on Security Russia’s SolarWinds Attack and Software Security - Schneier on Security  ブログ: ロシアのSolarWinds攻撃とソフトウェア・セキュリティ   SolarWinds製品に認証回避の脆弱性、アップデートを | マイナビニュース    Brexit Deal Mandates Old Insecure Crypto Algorithms - Schneier on Security\n  「Node.js」の2021年1月セキュリティ更新 ～CVE番号ベースで3件の脆弱性に対処 - 窓の杜\n  福岡県の新型コロナ陽性者情報流出についてまとめてみた - piyolog\n  Backdoor account discovered in more than 100,000 Zyxel firewalls, VPN gateways | ZDNet\n Backdoor in Zyxel Firewalls and Gateways - Schneier on Security    トランプ氏に更迭された元サイバーセキュリティ高官と元Facebook幹部がサイバーコンサルティング会社設立 | TechCrunch Japan\n  Ubuntu 20.10 その76 - セキュリティーアップデート（2021/1/1 〜 2021/1/8） - kledgeb : 年始明けのセキュリティ・アップデートをまとめて\n  天文関連  APOD: 2020 December 29 - Earth During a Total Solar Eclipse APOD: 2020 December 27 - Cosmic Latte: The Average Color of the Universe APOD: 2020 December 30 - Jupiter and Saturn Great Conjunction: The Movie APOD: 2020 December 31 - Trail of the Returner : おかえり，はたぶさ2 崩壊のアレシボ天文台、プエルトリコ知事が再建に向け予算800万ドルを承認 - Engadget 日本版 APOD: 2021 January 7 - Total Solar Eclipse 2020 ティコの超新星残骸の衝撃波の急激な減速を発見 －Ia型超新星の爆発メカニズムに迫る－ | 京都大学  Ia型超新星が白色矮星と恒星の連星系で起こされる強い証拠を京大などが観測 | マイナビニュース    知財関連  Judge: Sci-Hub Blocking Case \u0026ldquo;Important\u0026rdquo; For Science, Community Representations Will Be Heard * TorrentFreak  Linux または Ubuntu に関する話題  Linux起動の仕組みを理解しよう［init/inittab編］ (1/2)：Windowsユーザーに教えるLinuxの常識（10） - ＠IT Ubuntu 20.04 LTS をインストールした後やること13選 - Qiita Ubuntu 20.04 その217 - Ubuntu 20.04.2 LTSのリリース日変更 - kledgeb  Windows に関する話題  Release v0.1.1 · zetamatta/binview · GitHub WindowsでもサクサクDocker (Docker Desktop with WSL2)  Go 言語関連  ヘキサゴナルアーキテクチャをgo言語で書いてみた - Qiita Go製全文検索エンジンBlugeで日本語形態素解析をおこなう 【Go】ginを使った一連の認証実装をまとめる 【Go言語】OpenWeatherMapとTwitterAPIを使ってお天気情報をラズパイから定期的にツイートさせる - Qiita GoのRDBアクセスライブラリ（go-pg/pg）の紹介 - Qiita VSCode devcontainerでローカルを汚さずに、快適なGo言語の開発環境を整える Go 言語スプレッドシートライブラリ：Excelize 2.3.2 がリリースされました - Qiita go2cs | Golang to C# Converter : 面白そう！ 【Golang】Unicode上複数コードからなる文字をruneで扱う場合の挙動 - Ren\u0026rsquo;s blog  Unicodeとの異体字バトルがはじまったぜ    Rust 言語関連  Announcing Rust 1.49.0 | Rust Blog  その他  個人からチームまで、Notion での情報・タスク管理一元化完全解説 Google App Engineのスタンダード/フレキシブル環境を選ぶときのヒントと設定の注意点 アカリク、自社サービスCloud LaTeX（クラウドラテフ）との同期を可能にするVisual Studio Code拡張機能（プラグイン）ベータ版を公式OSSとして公開｜株式会社アカリクのプレスリリース Next.jsのFont Optimizations（Webフォントの最適化）を試してみる : セキュリティ・プライバシー上の配慮で Web フォントのキャッシュを複数ドメインで共有されなくなったらしい CSS カスタムプロパティ (変数) の使用 - CSS: カスケーディングスタイルシート | MDN  CSS変数の命名規則について考える   2020年は大麻にとって決定的な年だった、今後の展開は | TechCrunch Japan [DB接続クライアント]mycliを導入してターミナルで気楽にMariaDB/MySQLを触る Flashの最後の日、Adobe自身がサポートを停止 | TechCrunch Japan 視覚障がい者がバーチャルイベントに参加することを想像し、あなたが主催する次のイベントでその想像を実践しよう | TechCrunch Japan An Online Visual Collaboration Platform for Teamwork | Miro 無料でURLから余計なゴミを自動削除してリダイレクトやトラッキングを防止してくれるFirefox用拡張機能「Link Cleaner+」 - GIGAZINE Ruby 3.0正式版リリース。「Ruby 2の3倍速」到達、型の記述、スレッドセーフな並列処理など新機能 － Publickey 「CentOS」に代わる「Rocky Linux」、2021年第2四半期に最初のリリース登場の可能性 - ZDNet Japan HTTP/3はどうやってWebを加速するか？ TCP、TLS、HTTP/2の問題とHTTP/3での解決策～Fastly奥氏が解説（前編） － Publickey  HTTP/3はどうやってWebを加速するか？ TCP、TLS、HTTP/2の問題とHTTP/3での解決策～Fastly奥氏が解説（後編） － Publickey   The Conspiracy Theory Handbook | Center For Climate Change Communication  ブログ: 陰謀論ハンドブック   Yubikey5を手に入れたのでGPGを使ってみる(1/2)(GPG key作成編) - akashisnの日記 Forwarding gpg-agent to a remote system over SSH - GnuPG wiki gpg-agentをforwardingしてホスト上で署名する - Qiita Securing SSH with the YubiKey Securing SSH with OpenPGP or PIV セキュリティキー「YubiKey」でEC2へのSSHを2段階認証にしてみた | Developers.IO SSHのCA認証 - Qiita OpenSSHの認証に証明書を使う方法｜ConoHa VPSサポート 絵文字からZennの記事をみつける拡張機能「Zenn Feel Lucky」を作った Moving users to Microsoft Edge from Internet Explorer - Microsoft Edge Development | Microsoft Docs  Microsoft will forcibly open some websites in Edge instead of Internet Explorer | ZDNet Microsoft、IE終了に本腰。特定のWEBサイトをEdgeにリダイレクト - Engadget 日本版 IE11からEdgeにリダイレクトするためにIE互換性リストに登録する方法 │ Webty Staff Blog   WebAssemblyをWin/Mac/Linuxで実行可能なランタイム「Wasmer 1.0」正式リリース。事前コンパイルによる高速起動やクロスコンパイルなどにも対応 － Publickey PythonやR対応の統合開発環境「JupyterLab 3.0」正式リリース。ビジュアルデバッガー搭載、レスポンシブ対応でモバイルデバイスの狭い画面でも使いやすく － Publickey terminal pagerをclient/server化してtmuxを組み合わせたら最強のSQLクライアントになった \u0026ldquo;Linuxの父\u0026quot;トーバルズ氏が評価するAMD、そしてインテル - ZDNet Japan  "
    },
    {
      "title": "gpg-agent の設定： GnuPG in Ubuntu",
      "section": "openpgp",
      "description": "Zenn で書いた「Ubuntu で OpenSSH の鍵管理を gpg-agent に委譲する」をこのブログの「最新版 GnuPG をビルドする」の続編として再構成した",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/openpgp/gpg-agent-in-ubuntu/",
      "published": "2021-01-10T02:53:13+00:00",
      "update": "2021-01-10T02:56:17+00:00",
      "content": "この記事は Zenn で書いた「Ubuntu で OpenSSH の鍵管理を gpg-agent に委譲する」をこのブログの「最新版 GnuPG をビルドする」の続編として再構成したものである。\nなお Windows 版 gpg-agent の設定については，古い記事で恐縮だが\n GnuPG for Windows : gpg-agent について  が参考になる。\nビルドした gpg-agent をサービスとして登録する 前回ビルドした GnuPG を使って処理を行おうとすると gpg-agent が古い旨の警告が出る。 ps コマンドでチェックすると，どうやらオリジナルの /usr/bin/gpg-agent が稼働しているようだ。\n稼働している /usr/bin/gpg-agent を一旦落として gpg-connect-agent コマンドで再起動すれば /usr/local/bin/gpg-agent が起動するのだが，ログインし直すと元に戻ってしまう。\nいろいろググってみたのだが， gpg-agent の制御は /usr/lib/systemd/user/gpg-agent.service ファイルでサービスとして行っているようだ。 内容はこんな感じ。\n[Unit] Description=GnuPG cryptographic agent and passphrase cache Documentation=man:gpg-agent(1) Requires=gpg-agent.socket [Service] ExecStart=/usr/bin/gpg-agent --supervised ExecReload=/usr/bin/gpgconf --reload gpg-agent そこで，最後の2行を\nExecStart=/usr/local/bin/gpg-agent --supervised ExecReload=/usr/local/bin/gpgconf --reload gpg-agent と変更しサービスを restart したら /usr/local/bin/gpg-agent のほうで稼働してくれるようになった。\n$ systemctl --user status gpg-agent ● gpg-agent.service - GnuPG cryptographic agent and passphrase cache Loaded: loaded (/usr/lib/systemd/user/gpg-agent.service; static) Active: active (running) since Sat 2021-01-09 09:38:33 JST; 9min ago TriggeredBy: ● gpg-agent.socket ● gpg-agent-ssh.socket ● gpg-agent-extra.socket ● gpg-agent-browser.socket Docs: man:gpg-agent(1) Main PID: 18913 (gpg-agent) CGroup: /user.slice/user-1000.slice/user@1000.service/gpg-agent.service ├─18913 /usr/local/bin/gpg-agent --supervised └─19398 scdaemon --multi-server Jan 09 09:38:33 mocona6 systemd[1616]: Started GnuPG cryptographic agent and passphrase cache. Jan 09 09:38:33 mocona6 gpg-agent[18913]: gpg-agent (GnuPG) 2.2.26 starting in supervised mode. Jan 09 09:38:33 mocona6 gpg-agent[18913]: using fd 3 for std socket (/run/user/1000/gnupg/S.gpg-agent) Jan 09 09:38:33 mocona6 gpg-agent[18913]: using fd 4 for ssh socket (/run/user/1000/gnupg/S.gpg-agent.ssh) Jan 09 09:38:33 mocona6 gpg-agent[18913]: using fd 5 for extra socket (/run/user/1000/gnupg/S.gpg-agent.extra) Jan 09 09:38:33 mocona6 gpg-agent[18913]: using fd 6 for browser socket (/run/user/1000/gnupg/S.gpg-agent.browser) Jan 09 09:38:33 mocona6 gpg-agent[18913]: listening on: std=3 extra=5 browser=6 ssh=4 ... よーし，うむうむ，よーし。\nOpenSSH の鍵管理を gpg-agent に委譲する 上述の話を調べてて初めて知ったのだが，どうも Ubuntu を含む Debian 系のディストリビューションでは OpenSSH の認証鍵を ssh-agent 固定で管理するよう構成されていて， gpg-agent と設定が競合してしまうらしい。 OpenSSH の鍵管理を gpg-agent に委譲するよう構成するには gpg-agent.conf ファイル以外にもいくつか設定が必要なようだ。\nXsession.options の変更 まずは /etc/X11/Xsession.options ファイルの内容を変更する。 元々の内容は以下の通り。\n# $Id: Xsession.options 189 2005-06-11 00:04:27Z branden $ # # configuration options for /etc/X11/Xsession # See Xsession.options(5) for an explanation of the available options. allow-failsafe allow-user-resources allow-user-xsession use-ssh-agent use-session-dbus この中の use-ssh-agent の記述を no-use-ssh-agent に差し替える。 当然ながら変更には管理者権限が必要なのでご注意を。 バックアップを取りながら作業すること。\nautostart/gnome-keyring-ssh.desktop の変更 次に /etc/xdg/autostart/gnome-keyring-ssh.desktop の内容を変更するのだが，このファイルを直接変更するのではなく，いったん ~/.config/autostart/ ディレクトリにコピーしてから，コピーしたファイルに対して変更をかける（autostart ディレクトリがない場合は先に作成する）。\n$ cp /etc/xdg/autostart/gnome-keyring-ssh.desktop ~/.config/autostart/ これでユーザ単位で設定を弄ることができる。 といっても最終行に\nHidden=true を追記するだけだが。\ngpg-agent.conf の設定 最後に ~/.gnupg/gpg-agent.conf ファイルに以下の内容を書き込む。\nenable-ssh-support default-cache-ttl-ssh 1800 max-cache-ttl-ssh 7200 gpg-agent.conf ファイルがない場合は作成すること。 下2行のオプションは任意で，以下の意味を持つ。\n   オプション名 内容     default-cache-ttl-ssh 直前にアクセスしたキャッシュ・エントリの有効期間を秒単位で指定する。 既定値は 1800   max-cache-ttl-ssh キャッシュ・エントリの有効期間の最大値を秒単位で指定する。 アクセスの有無にかかわらずこの期間が過ぎるとキャッシュがクリアされる。 既定値は 7200    有効期間は大きすぎると漏洩リスクが高まるのでほどほどに（笑）\nこれで設定は完了。念のためログインし直しておこう。\n環境変数の確認 ログインし直したら環境変数を確認しておく。\n$ env | grep SSH SSH_AUTH_SOCK=/run/user/1000/gnupg/S.gpg-agent.ssh てな感じに SSH_AUTH_SOCK 環境変数の値が gpg-agent のソケットになっていれば OK である。 これで ~/.bashrc とかに要らん記述をしなくてもよくなった。 ブラボー！\nGnuPG による鍵管理 既存の OpenSSH 認証鍵を GnuPG に登録する 上述の設定が完了していれば，既存の OpenSSH 認証鍵を GnuPG の鍵束に登録するのは ssh-add コマンドで簡単にできる。\n$ ssh-add ./id_ecdsa Enter passphrase for ./id_ecdsa: Identity added: ./id_ecdsa (alice@example.com) この時 ssh-add コマンドによるパスフレーズ入力とは別に GnuPG の Pinentry によるパスフレーズの設定が行われるので注意。 確認を含めて2箇所入力する必要がある。\npinentry  GnuPG の鍵束に登録される認証鍵はこのパスフレーズで保護される。 登録した秘密鍵は ~/.gnupg/private-keys-v1.d/ ディレクトリ）に入る。 また ~/.gnupg/sshcontrol ファイルに\n# ECDSA key added on: 2020-06-01 14:05:35 # Fingerprints: MD5:e4:5b:66:a6:03:9a:a4:0e:f2:1b:a5:04:72:93:f3:f0 # SHA256:DtXgQm9rz7Dc5M5yWu/CNVo341o1rcfN9UCyYu+SZU4 A5353D587000D820669B0BD55A0B4AD6897458DB 0 という感じに追加した鍵の情報が入る。\nちなみに A5353D587000D820669B0BD55A0B4AD6897458DB は keygrip と呼ばれる値で，鍵の種類に関係なく統一的に表される ID である。 また ~/.gnupg/private-keys-v1.d/ ディレクトリに入っている鍵は A5353D587000D820669B0BD55A0B4AD6897458DB.key のように keygrip に紐付いたファイル名で格納されている。\nさらに，末尾の 0 はキャッシュ期間（秒）を指すらしい。 0 より大きければ gpg-agent.conf ファイルの指定より優先されるってことかな。\nさらにさらに，行頭に ! マークを付けると鍵の使用を無効化できる。\nGnuPG 鍵を OpenSSH 認証鍵として設定する GnuPG 鍵を OpenSSH 認証鍵として設定することもできる。 ただし専用の認証鍵を作る必要がある。 詳しくは\n SSH の認証鍵を GunPG で作成・管理する  を参照のこと。 最終的には全部 GnuPG で管理するのがいいんだろうな。\nブックマーク   Configuring gpg-agent for SSH Authentication on Ubuntu\n  GnuPG チートシート（鍵作成から失効まで）\n  OpenSSH 鍵をアップグレードする（さようなら SHA-1）\n  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "SSH の認証鍵を GunPG で作成・管理する",
      "section": "openpgp",
      "description": "新たに鍵を作成する場合や今までの鍵を破棄して作り直す場合などの状況があれば検討してもいいだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/openpgp/ssh-key-management-with-gnupg/",
      "published": "2021-01-06T14:06:57+00:00",
      "update": "2021-01-10T02:49:53+00:00",
      "content": "今回は GnuPG で作成した鍵を OpenSSH の認証鍵として使う方法について覚え書きとして記しておく。 現時点で運用できている認証鍵を置き換えるメリットはないが，新たに鍵を作成する場合や今までの鍵を破棄して作り直す場合などの状況があれば検討してもいいだろう。\nまず GnuPG で作成する鍵は機能別に以下の4種類に分類される（ひとつの鍵で複数の機能を持たせることもできる）。\n   機能 略称     署名 S   証明 C   認証 A   暗号化 E    このうち OpenSSH の認証鍵として使えるのは「認証」機能をもった鍵のみである。 認証機能は電子署名用の鍵であれば任意に付与することができるが，専用の副鍵を追加するのがセオリーらしい。\n認証用の副鍵を追加する まず以下の OpenPGP 鍵があるとする（主鍵には SC，副鍵には E の機能が付いてる点に注目）。\n$ gpg --list-keys alice pub ed25519 2021-01-06 [SC] [有効期限: 2021-01-13] 011C720B03D2E1D6BCFA98391DFF44901121B61D uid [ 究極 ] Alice \u0026lt;alice@example.com\u0026gt; sub cv25519 2021-01-06 [E] この鍵に認証用の副鍵を追加する。 鍵の追加には --edit コマンドを使う。 なお --expert オプションと一緒に使うと幸せになれる。\n$ gpg --expert --edit-key alice gpg (GnuPG) 2.2.26; Copyright (C) 2020 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. 秘密鍵が利用できます。 sec ed25519/1DFF44901121B61D 作成: 2021-01-06 有効期限: 2021-01-13 利用法: SC 信用: 究極 有効性: 究極 ssb cv25519/4FECD03BE5BE4454 作成: 2021-01-06 有効期限: 無期限 利用法: E [ 究極 ] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; ここで addkey コマンドを入力する。\ngpg\u0026gt; addkey ご希望の鍵の種類を選択してください: (3) DSA (署名のみ) (4) RSA (署名のみ) (5) Elgamal (暗号化のみ) (6) RSA (暗号化のみ) (7) DSA (機能をあなた自身で設定) (8) RSA (機能をあなた自身で設定) (10) ECC (署名のみ) (11) ECC (機能をあなた自身で設定)  (12) ECC (暗号化のみ) (13) 既存の鍵 (14) カードに存在する鍵 あなたの選択は? 今回は認証用の鍵の追加なので 7, 8, 11 のいずれかを選択する。 ここは個人的な好みで ECC 鍵を選択しよう。\nあなたの選択は? 11 鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 現在の認められた操作: Sign  (S) 署名機能を反転する (A) 認証機能を反転する (Q) 完了 あなたの選択は? 現在は署名機能（Sign）のみ有効になっているが，欲しいのは認証機能のみなので S と A を一回づつ入力する。\nあなたの選択は? s 鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 現在の認められた操作:  (S) 署名機能を反転する (A) 認証機能を反転する (Q) 完了 あなたの選択は? a 鍵ECDSA/EdDSAに認められた操作: Sign Authenticate 現在の認められた操作: Authenticate  (S) 署名機能を反転する (A) 認証機能を反転する (Q) 完了 あなたの選択は? これで認証機能（Authenticate）のみ有効になった。 Q を入力して次に進もう。\nあなたの選択は? q ご希望の楕円曲線を選択してください: (1) Curve 25519  (3) NIST P-256 (4) NIST P-384 (5) NIST P-521 (6) Brainpool P-256 (7) Brainpool P-384 (8) Brainpool P-512 (9) secp256k1 あなたの選択は? OpenSSH の認証用には 1 から 5 の楕円曲線のいずれかを選択する。 個人的なお勧めは 1 の “Curve 25519” である。 理由は以下の記事を参考のこと。\n Edwards-curve Digital Signature Algorithm  では 1 を入力して先に進む。\nあなたの選択は? 1 鍵の有効期限を指定してください。 0 = 鍵は無期限  \u0026lt;n\u0026gt; = 鍵は n 日間で期限切れ \u0026lt;n\u0026gt;w = 鍵は n 週間で期限切れ \u0026lt;n\u0026gt;m = 鍵は n か月間で期限切れ \u0026lt;n\u0026gt;y = 鍵は n 年間で期限切れ 鍵の有効期間は? (0)0 鍵は無期限です 有効期限は意味がないので無期限（0）を選択する。 理由は後述するのでちょっと待ってね。\n最終確認をして鍵を生成する。\nこれで正しいですか? (y/N) y 本当に作成しますか? (y/N) y たくさんのランダム・バイトの生成が必要です。キーボードを打つ、マウスを動か す、ディスクにアクセスするなどの他の操作を素数生成の間に行うことで、乱数生 成器に十分なエントロピーを供給する機会を与えることができます。 sec ed25519/1DFF44901121B61D 作成: 2021-01-06 有効期限: 2021-01-13 利用法: SC 信用: 究極 有効性: 究極 ssb cv25519/4FECD03BE5BE4454 作成: 2021-01-06 有効期限: 無期限 利用法: E ssb ed25519/230D446E390C3E49 作成: 2021-01-06 有効期限: 無期限 利用法: A [ 究極 ] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; save 最後は save コマンドを入力して結果を鍵束に保存する。 これで\n$ gpg --list-keys alice pub ed25519 2021-01-06 [SC] [有効期限: 2021-01-13] 011C720B03D2E1D6BCFA98391DFF44901121B61D uid [ 究極 ] Alice \u0026lt;alice@example.com\u0026gt; sub cv25519 2021-01-06 [E] sub ed25519 2021-01-06 [A] 認証用の鍵が追加できた。\nOpenSSH フォーマットの公開鍵を出力する。 OpenSSH フォーマットの公開鍵は --export-ssh-key コマンドで出力できる。\n$ gpg --export-ssh-key alice ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFfjejx/Saej929myfZoBQAKgusPi2iiOxdZZfpCLxh5 openpgp:0x390C3E49 このテキストをホスト機の ~/.ssh/authorized_keys ファイルに追記すれば仕込みは完了である。 パーミッションの変更を忘れずに（笑）\nこの操作で分かると思うが OpenSSH フォーマットで出力する時点で OpenPGP 鍵の情報はほぼ脱落している。 だから「有効期限は意味がない」のよ。\nちなみにこの操作は公開鍵に対して行われる。 たとえば，認証用の鍵を付加した OpenPGP 公開鍵をサーバ管理者に渡せば，サーバ管理者は集めた OpenPGP 公開鍵に署名して完全性を確保した後， OpenSSH 認証用公開鍵を抽出して各ユーザのディレクトリにまとめてセットする，といったこともできるだろう。\nローカル側の設定 【2021-01-09 変更・追記あり】 念のためローカル側の設定についても記しておく。\nssh-agent を gpg-agent に置き換える OpenSSH では ssh-agent を GnuPG の gpg-agent に置き換えることで鍵の管理を GnuPG 側に委譲できる。\nUbuntu の設定手順については以下の記事でまとめている。\n gpg-agent の設定： GnuPG in Ubuntu  Windows については，古い内容で恐縮だが，以下の記事を参考にして欲しい。\n GnuPG for Windows : gpg-agent について  OpenSSH 認証鍵の登録 GnuPG の鍵束の鍵を OpenSSH の認証鍵として使うには ~/.gnupg/sshcontrol ファイルへの登録が必要である。 先ほど作成した鍵であれば，まず以下のコマンドで\n$ gpg --list-keys --with-keygrip alice pub ed25519 2021-01-06 [SC] [有効期限: 2021-01-13] 011C720B03D2E1D6BCFA98391DFF44901121B61D Keygrip = 97249ABEB2A2FD9E88F6723BB19D4F84B90E261A uid [ 究極 ] Alice \u0026lt;alice@example.com\u0026gt; sub cv25519 2021-01-06 [E] Keygrip = 96CB831965E1A7EB4705577D6A7CB7F9E05C8192 sub ed25519 2021-01-06 [A] Keygrip = F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E 該当する鍵の keygrip 値を調べる。 今回の例なら “F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E” が該当する keygrip 値である。 これを ~/.gnupg/sshcontrol ファイルに追記する。\n$ echo F5C774B5B418B6E0B5B7942F93DE82BF2FEF4C8E 0 \u0026gt;\u0026gt; ~/.gnupg/sshcontrol これで ssh-add -L コマンドでこの鍵の内容が表示されればOK。\nちなみに keygrip 値の後ろの 0 はキャッシュ期間（秒）を指すらしい。 0 より大きければ gpg-agent.conf ファイルの指定より優先されるってことかな。 また行頭に ! マークを付けると鍵の使用を無効化できる。\n念のため sshcontrol ファイルも不用意に書き込みできないよう制限をかけておくとよいだろう。\nブックマーク  GnuPG チートシート（鍵作成から失効まで） そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな OpenSSH 鍵をアップグレードする（さようなら SHA-1）  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    }
  ]
}
