{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "2019-10-27 のブックマーク",
      "section": "bookmarks",
      "description": "「GNOME files defense against patent troll」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/10/27-bookmarks/",
      "published": "2019-10-27T11:47:57+00:00",
      "update": "2019-10-27T11:49:38+00:00",
      "content": " リリース情報  Hugo 0.59.0 | Hugo Electron v7.0.0 リリースノート[和訳] - Qiita  アプリフレームワーク「Electron 7.0.0」が公開 ～64bit版Windows on Arm対応を追加 - 窓の杜   セキュリティ＆プライバシー関連  Details of the Olympic Destroyer APT - Schneier on Security Inside Olympic Destroyer, the Most Deceptive Hack in History | WIRED Calculating the Benefits of the Advanced Encryption Standard - Schneier on Security Facebookは言論の自由ではない、暴言に最適化された増幅アルゴリズムだ | TechCrunch Japan NordVPN Had Private Keys Stolen after Server Breach - TorrentFreak  NordVPN Breached - Schneier on Security  MIT Tech Review: スマート・スピーカー向け「盗聴」アプリ、審査を通過していた Mapping Security and Privacy Research across the Decades - Schneier on Security Share and accept documents securely - SecureDrop グーグル、「Google Cloud Platform」「G Suite」に対する政府の情報開示要請について公開へ - ZDNet Japan アドウェア感染した多数のAndroidアプリが数百万回ダウンロードされる | TechCrunch Japan Dark Web Site Taken Down without Breaking Encryption - Schneier on Security ブログ: 4つの主要な通信事業者が最終的にSMSを新しいRCS標準に置き換えることに合意 嵐のコンサートで摘発されたチケット不正転売と身分証偽造についてまとめてみた - piyolog  天文関連  Behold Our Dazzling Night Sky When the Milky Way Collides with Andromeda in 4 Billion Years  ブログ: 天の川銀河が40億年後にアンドロメダと衝突するときの眩しい夜空を見よ  APOD: 2019 October 20 - Pluto at Night ニュース - アルマ望遠鏡運用の一時縮小について - アルマ望遠鏡 超高速で回転する超大型渦巻銀河 - アストロアーツ 重力波天体が放つ光を初観測：日本の望遠鏡群が捉えた重元素の誕生の現場 ―重力波を追いかけた天文学者たちは宝物を見つけた― | 国立天文台(NAOJ)  Nature ハイライト：GW170817のデブリに見つかったストロンチウム | Nature | Nature Research  やはり巨大衝突の痕跡か。300光年先の温かい塵をNASAの成層圏天文台が観測 - sorae 宇宙へのポータルサイト The Universe Is Made of Tiny Bubbles Containing Mini-Universes, Scientists Say - VICE  ブログ: 宇宙はミニ宇宙を含む小さな泡でできている   知財関連  U.S. House Passes Copyright \u0026quot;Small Claims\u0026quot; Bill with Overwhelming Majority - TorrentFreak GNOME files defense against patent troll – GNOME  The Document Foundation supports GNOME Foundation fight against a patent troll - The Document Foundation Blog   その他  Scientists 'may have crossed ethical line' in growing human brains | Science | The Guardian ニオイ可視化センサーのアロマビットが日本たばこ産業、East Venturesから資金調達 | TechCrunch Japan クルドの砂上の楼閣とトランプの不評だが不可避の決断：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト  トルコのシリア侵攻――誤算と打算（間 寧） - ジェトロ・アジア経済研究所  IIJがデータセンターにTeslaのリチウムイオン蓄電池を導入した理由 - ZDNet Japan MIT Tech Review: グーグル「量子超越性」実証 IBMの研究者が反論  グーグル、量子コンピューターで「量子超越性」を実証--スパコンを超える - ZDNet Japan  MIT Tech Review: 「ワインの涙」現象はなぜ起こる？衝撃波による新理論 テスラがソーラー屋根タイルの第3世代を発表 | TechCrunch Japan ヤフーも採用した地図サービス「mapbox」とは何か？ OSMの中に生き続ける旧アルプス社の地図データの行方は？【地図と位置情報】 - INTERNET Watch A Brief History of Russian Hackers' Evolving False Flags | WIRED  ブログ: ロシアのハッカーの進化する偽旗作戦の略歴  J.S. Bach the Rebel | Lapham’s Quarterly  ブログ: 反逆者J・S・バッハ  Amazon CloudWatch、機械学習により異常値（アノマリー）を自動検出できる新機能 － Publickey 電話番号をハイフン区切りに変換する - Qiita デジタル変革の推進状況を自己診断をした企業に分析結果を提供--IPA - ZDNet Japan SpaceXは衛星ブロードバンドサービスStarlinkの供用を2020年内に開始 | TechCrunch Japan GitHub スポンサーについて - GitHub ヘルプ nodejs, npm, nパッケージ構築備忘録【Ubuntu18.04 LTS】 - Qiita  "
    },
    {
      "title": "拡張版 Glob 関数を書いてみた",
      "section": "golang",
      "description": "ディレクトリを再帰的に検索するワイルドカードが使えるのが特徴で，内部で saracen/walker パッケージを使っている。とはいえ，全体的に素朴な作りになっているため，スピードは期待しないで欲しい（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/globbing-file-and-directory/",
      "published": "2019-10-27T09:08:38+00:00",
      "update": "2019-10-27T11:54:41+00:00",
      "content": " 前回の記事を書いたあと，ちょっと思いついたので手遊びに filepath.Glob() 関数の拡張版を書いてみた。\n spiegel-im-spiegel/file: Extend filepath.Glob function  ディレクトリを再帰的に検索する **/ ワイルドカードが使えるのが特徴で，内部で件の saracen/walker パッケージを使っている。 とはいえ，全体的に素朴な作りになっているため，スピードは期待しないで欲しい（笑）\nたとえば以下のようなコードを書いてみる。\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/file\u0026#34; ) func main() { fs := flag.NewFlagSet(os.Args[0], flag.ExitOnError) if err := fs.Parse(os.Args); err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\\n\u0026#34;, err) return } if fs.NArg() \u0026lt; 2 { fmt.Fprintln(os.Stderr, os.ErrInvalid) return } matches, err := file.Glob(fs.Arg(1), file.WithFlags(file.ContainsFile)) \tif err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\\n\u0026#34;, err) return } fmt.Println(\u0026#34;Count:\u0026#34;, len(matches)) for _ , path := range matches { fmt.Println(path) } } これに対して /usr/local/go/src/ ディレクトリ以下のファイルを取得したいなら，コマンドラインの引数に /usr/local/go/src/**/* を指定すればよい。 結果は以下の通り。\n$ go run work/sample.go \u0026#34;/usr/local/go/src/**/*\u0026#34; Count: 6008 /usr/local/go/src/Make.dist /usr/local/go/src/README.vendor /usr/local/go/src/all.bash /usr/local/go/src/all.bat /usr/local/go/src/all.rc /usr/local/go/src/archive/tar/common.go /usr/local/go/src/archive/tar/example_test.go /usr/local/go/src/archive/tar/format.go /usr/local/go/src/archive/tar/reader.go /usr/local/go/src/archive/tar/reader_test.go /usr/local/go/src/archive/tar/stat_actime1.go /usr/local/go/src/archive/tar/stat_actime2.go ... もちろんオリジナルの filepath.Glob() 関数の syntax も使える。\n$ go run work/sample.go \u0026#34;/usr/local/go/src/**/*.[ch]\u0026#34; Count: 77 /usr/local/go/src/cmd/go/testdata/src/badc/x.c /usr/local/go/src/cmd/internal/goobj/testdata/mycgo/c1.c /usr/local/go/src/cmd/internal/goobj/testdata/mycgo/c2.c /usr/local/go/src/cmd/vendor/golang.org/x/sys/unix/gccgo_c.c /usr/local/go/src/debug/dwarf/testdata/cycle.c /usr/local/go/src/debug/dwarf/testdata/line1.c /usr/local/go/src/debug/dwarf/testdata/line1.h /usr/local/go/src/debug/dwarf/testdata/line2.c /usr/local/go/src/debug/dwarf/testdata/ranges.c /usr/local/go/src/debug/dwarf/testdata/split.c /usr/local/go/src/debug/dwarf/testdata/typedef.c /usr/local/go/src/debug/elf/testdata/hello.c ... まぁ，私自身が趣味で書くのはフィルタ・プログラムが殆どで，ファイル検索機能にはあまりお世話にならないのだが（普段は shell スクリプト任せ），使えそうならご自由にどうぞ。 そうそう，「こうすれば効率よくなるよ」みたいな PR は大歓迎である。\nブックマーク  singleton method Dir.[] (Ruby 2.6.0)  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n  Go言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この本を読んで「よっしゃ，明日から立派な goroutine 使いだ！」とはならないと思うけど，有象無象なコピペ・プログラマじゃなく，きちんと Go 言語のプログラミングを勉強したいのであれば，この本は必読書になると思う。\nreviewed by Spiegel on 2018-11-03 (powered by PA-APIv5)\n "
    },
    {
      "title": "saracen/walker で歩いてみる",
      "section": "golang",
      "description": "saracen/walker を使うと filepath.Walk() 関数を置き換えることができる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/walking-with-multi-core/",
      "published": "2019-10-26T13:25:35+00:00",
      "update": "2019-10-26T17:19:25+00:00",
      "content": " 日頃から mattn/jvgrep には大変お世話になっているので常時 watch しているのだが，最近組み込まれたらしい saracen/walker が良さげである。\n指定したパス以下のファイル・ディレクトリを探索する機能としては標準の filepath.Walk() 関数がある。 たとえば，こんな感じで使う。\nfunc WalkWithSingle(rootPath string) (int64, error) { count := int64(0) lastErr := filepath.Walk(rootPath, func(path string, info os.FileInfo, err error) error { if err != nil { return err } if !info.IsDir() { count++ } return nil }) return count, lastErr } ちなみにこれは，指定したパス以下に存在する（ディレクトリ以外の）ファイルの数を数える関数である。\nsaracen/walker の walker.Walk() 関数を使って filepath.Walk() 関数を置き換えることができる。 walker.Walk() 関数の特徴は，ファイル・ディレクトリの探索を並行処理で行うことである。 したがってマルチコアの環境下（最近のパソコンや携帯端末は皆そうだが）ではコア数に応じた高速処理が期待できる。\nwalker.Walk() 関数を使う際にはひとつだけ注意点があって，それは walker.Walk() 関数の引数で指定する関数は goroutine-safe でなければならないということだ。\nたとえば関数閉包 (closure) を使って，ついうっかり\nfunc WalkWithMultiple(rootPath string) (int64, error) { count := int64(0) err := walker.Walk(rootPath, func(path string, info os.FileInfo) error { if !info.IsDir() { count++  } return nil }) return count, err } なんてなコード書くと，返ってくるファイル数の値は不定になってしまう（どうしてそうなるかは自分で考えよう）。 まぁ，これに限っては sync/atomic パッケージを使って\nfunc WalkWithMultiple(rootPath string) (int64, error) { count := int64(0) err := walker.Walk(rootPath, func(path string, info os.FileInfo) error { if !info.IsDir() { atomic.AddInt64(\u0026amp;count, 1)  } return nil }) return count, err } とすれば無問題 (no problem) である。\nsaracen/walker の性能評価についてはリポジトリのドキュメントを見てもらうとして，ここではもっとふわっとしたコードで性能差を体感してみよう。 用意したコードは上述した関数をちょっと弄ってこんな感じにしてみた。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;path/filepath\u0026#34; \u0026#34;sync/atomic\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/saracen/walker\u0026#34; ) func WalkWithSingle(rootPath string) (int64, time.Duration, error) { count := int64(0) start := time.Now() lastErr := filepath.Walk(rootPath, func(path string, info os.FileInfo, err error) error { if err != nil { return err } if !info.IsDir() { count++ } return nil }) return count, time.Since(start), lastErr } func WalkWithMultiple(rootPath string) (int64, time.Duration, error) { count := int64(0) start := time.Now() err := walker.Walk(rootPath, func(path string, info os.FileInfo) error { if !info.IsDir() { atomic.AddInt64(\u0026amp;count, 1) } return nil }) return count, time.Since(start), err } func main() { rootPath := \u0026#34;/usr/local/go/src\u0026#34; ct, dt, err := WalkWithSingle(rootPath) if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;WalkWithSingle\u0026#34;) fmt.Println(\u0026#34;\\tDuration:\u0026#34;, dt) fmt.Println(\u0026#34;\\t Count:\u0026#34;, ct) ct, dt, err = WalkWithMultiple(rootPath) if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;WalkWithMultiple\u0026#34;) fmt.Println(\u0026#34;\\tDuration:\u0026#34;, dt) fmt.Println(\u0026#34;\\t Count:\u0026#34;, ct) } これを実行するとこんな感じになった。\n$ go run sample1.go WalkWithSingle Duration: 38.305071ms Count: 6008 WalkWithMultiple Duration: 9.328229ms Count: 6008 私のマシンは10年前に買った4コアのパソコンなので，まぁ妥当な値だろう。\n数を数えるだけでは芸がないのでファイルの一覧を取得してみようか。 たとえば，以下のような walking.PathList 型を用意する1。\npackage walking import ( \u0026#34;sync\u0026#34; ) type PathList struct { mutex *sync.Mutex list []string } func New() *PathList { return \u0026amp;PathList{mutex: \u0026amp;sync.Mutex{}, list: make([]string, 0, 10240)} } func (p *PathList) Init() { p.mutex.Lock() p.list = p.list[:0] p.mutex.Unlock() } func (p *PathList) Append(path string) { p.mutex.Lock() p.list = append(p.list, path) p.mutex.Unlock() } func (p *PathList) List() []string { p.mutex.Lock() list := make([]string, len(p.list)) copy(list, p.list) p.mutex.Unlock() return list } これを使って先程の WalkWithMultiple() 関数を以下のように書き直してみる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;sort\u0026#34; \u0026#34;walking\u0026#34; \u0026#34;github.com/saracen/walker\u0026#34; ) func WalkWithMultiple(rootPath string) ([]string, error) { list := walking.New() err := walker.Walk(rootPath, func(path string, info os.FileInfo) error { if !info.IsDir() { list.Append(path) } return nil }) return list.List(), err } func main() { rootPath := \u0026#34;/usr/local/go/src\u0026#34; list, err := WalkWithMultiple(rootPath) if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;WalkWithMultiple ( Count =\u0026#34;, len(list), \u0026#34;):\u0026#34;) sort.Strings(list) for _, path := range list { fmt.Println(\u0026#34;\\t\u0026#34;, path) } } これを実行すると以下のような結果になる。\n$ go run sample1/sample1.go WalkWithMultiple ( Count = 6008 ): /usr/local/go/src/Make.dist /usr/local/go/src/README.vendor /usr/local/go/src/all.bash /usr/local/go/src/all.bat /usr/local/go/src/all.rc /usr/local/go/src/archive/tar/common.go /usr/local/go/src/archive/tar/example_test.go /usr/local/go/src/archive/tar/format.go /usr/local/go/src/archive/tar/reader.go /usr/local/go/src/archive/tar/reader_test.go /usr/local/go/src/archive/tar/stat_actime1.go /usr/local/go/src/archive/tar/stat_actime2.go ... よーし，うむうむ，よーし。\nブックマーク  Windows でも Grep したい  参考図書  Go言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この本を読んで「よっしゃ，明日から立派な goroutine 使いだ！」とはならないと思うけど，有象無象なコピペ・プログラマじゃなく，きちんと Go 言語のプログラミングを勉強したいのであれば，この本は必読書になると思う。\nreviewed by Spiegel on 2018-11-03 (powered by PA-APIv5)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n  配列ではなく連想配列を使うなら標準の sync.Map 型を使うのがいいだろう。 [return]   "
    },
    {
      "title": "ATOM 1.41 にアップデートしたら platformio-ide-terminal が動かねー！ と思ったら",
      "section": "remark",
      "description": "色々と試行錯誤してみたが，どうやら Ubuntu の APT でインストールしている node.js と ATOM 内部の node.js が衝突しているらしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/10/platformio-ide-terminal-in-atom/",
      "published": "2019-10-25T13:33:09+00:00",
      "update": "2019-10-25T13:34:17+00:00",
      "content": " 最近は猫も杓子も Vim か VSCode で寂しい限りだが， ATOM 1.41 がリリースされ，ようやく Electron 4 ベースの構成になった。\n Release 1.41.0 · atom/atom · GitHub  それはいいのだが，また platformio-ide-terminal が動かなくなった。 しかも 1.39 のときとは様子が異なるようだ。\n色々と試行錯誤してみたが，どうやら Ubuntu の APT でインストールしている node.js と ATOM 内部の node.js が衝突しているらしい。\n$ sudo apt purge nodejs で Ubuntu 側の node.js をいったん削除した上で platformio-ide-terminal を入れ直したら問題なく動いた。\nちなみに APT で管理されている node.js は素の設定で\n$ apt show nodejs Package: nodejs Version: 10.15.2~dfsg-2ubuntu1 Priority: extra Section: universe/web Origin: Ubuntu ... だった。 一方 ATOM 1.41 の構成は\n$ atom -v Atom : 1.41.0 Electron: 4.2.7 Chrome : 69.0.3497.128 Node : 10.11.0 $ apm -v apm 2.4.3 npm 6.2.0 node 10.2.1 x64 atom 1.41.0 ... と何とも微妙な感じである。 大丈夫か，これ。\n更に更に余談だが Ubuntu の APT に最新の node.js を組み込むには，以下のようにスクリプトを取ってきて実行すればいいらしい（以下は LTS 版の node.js 12 を組み込む場合）。\n$ curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - ただし現時点（2019-10-25）で Ubuntu 19.10 には対応してなかった orz\nブックマーク  nodesource/distributions: NodeSource Node.js Binary Distributions  参考（にならない）図書  PLUTO 豪華版 コミック 全8巻完結セット (ビッグコミックススペシャル) 浦沢 直樹 (著) 小学館 2009-06-20 コミック B00B47FIDC (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「鉄腕アトム」のスピンオフ作品の中では一番面白かった。やっぱ鉄腕アトムは「残酷」じゃないとね（笑） 浦沢直樹さんはオリジナル・シナリオよりこういうタイプの作品のほうがダントツに面白いな。\nreviewed by Spiegel on 2019-10-25 (powered by PA-APIv5)\n  アトム ザ・ビギニング1(ヒーローズコミックス) 手塚治虫 (著), ゆうきまさみ (著), カサハラテツロー (著) ヒーローズ 2015-06-05 (Release 2015-06-05) Kindle版 B00YRVO8EC (ASIN)  あれ。4年前に買ったけど全く読んでない。 Kindle の肥やしになってるな（笑）\nreviewed by Spiegel on 2019-10-25 (powered by PA-APIv5)\n "
    },
    {
      "title": "「今あなた以外に○○人が見ています」デモ",
      "section": "remark",
      "description": "これ最初に考えた奴は天才だろ（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/10/javascript-random/",
      "published": "2019-10-21T13:58:57+00:00",
      "update": "2019-10-21T13:59:28+00:00",
      "content": "ぶちウケた！\n 旅行予約サイトの「今あなた以外に○○人が見ています」はウソだったことが判明 - GIGAZINE  この記事によると\n JavaScriptで以下のような部分を発見。完全に28から44までの数字がランダムに生成され、それが表示されているだけだったことが判明しました。つまり、One Travelの「○○人がこの搭乗券をチェックしています」という部分は全くのウソであり、ユーザーにフライトの予約を急がせるためのものだったというわけです。 via 旅行予約サイトの「今あなた以外に○○人が見ています」はウソだったことが判明  なんだって。\nちうわけで，戯れにデモ・コードを書いてみた。 こんな感じでどうだろう。\n\u0026lt;div id=\u0026#39;demo\u0026#39; class=\u0026#39;box\u0026#39;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; let rn = Math.floor( Math.random() * 17 ) + 28; let p = document.createElement(\u0026#39;p\u0026#39;); p.appendChild(document.createTextNode(\u0026#39;今あなた以外に\u0026#39;+rn+\u0026#39;人が見ています\u0026#39;)); p.setAttribute(\u0026#39;class\u0026#39;, \u0026#39;center\u0026#39;); document.getElementById(\u0026#39;demo\u0026#39;).appendChild(p); \u0026lt;/script\u0026gt; 実際に試してみよう。\n  let rn = Math.floor( Math.random() * 17 ) + 28; let p = document.createElement('p'); p.appendChild(document.createTextNode('今あなた以外に'+rn+'人が見ています')); p.setAttribute('class', 'center'); document.getElementById('demo').appendChild(p);  「今あなた以外に○○人が見ています」デモ  おー。 できたできた。\n最小の労力で最大の効果。 これ最初に考えた奴は天才だろ（笑）\n JavaScriptリファレンス 第6版 David Flanagan (著), 木下 哲也 (翻訳) オライリージャパン 2012-08-10 単行本（ソフトカバー） 4873115531 (ASIN), 9784873115535 (EAN), 4873115531 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  最初に私が JavaScript を勉強したのって，これよりも更に古い版だったんだよなぁ。この版でも今となっては古すぎて使い物にならないけど（笑）\nreviewed by Spiegel on 2019-10-21 (powered by PA-APIv5)\n "
    },
    {
      "title": "GitHub に登録されている OpenPGP 公開鍵の情報を取得する",
      "section": "remark",
      "description": "公開鍵パケットデータを base64 コマンドで復号し，更に拙作の gpgpdump で可視化すれば中身を見ることができる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/10/openpgp-public-keys-in-github/",
      "published": "2019-10-21T08:29:15+00:00",
      "update": "2019-10-21T08:29:42+00:00",
      "content": " ネットで見かけた小ネタで（笑）\nGitHub の git リポジトリにアクセスする際に使う SSH 公開鍵を取得する方法は割と知られているようだが\n$ curl -s https://github.com/spiegel-im-spiegel.keys 似た感じで登録している OpenPGP 公開鍵も取得できる。 ただし出力は JSON 形式で，こんな感じ。\n$ curl -s https://api.github.com/users/spiegel-im-spiegel/gpg_keys [ { \u0026#34;id\u0026#34;: 305745, \u0026#34;primary_key_id\u0026#34;: null, \u0026#34;key_id\u0026#34;: \u0026#34;2287557885231C76\u0026#34;, \u0026#34;raw_key\u0026#34;: \u0026#34;-----BEGIN PGP PUBLIC KEY BLOCK-----\\r\\n\\r\\n ... \\r\\n-----END PGP PUBLIC KEY BLOCK-----\u0026#34;, \u0026#34;public_key\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;emails\u0026#34;: [ { \u0026#34;email\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;verified\u0026#34;: true } ], \u0026#34;subkeys\u0026#34;: [ { \u0026#34;id\u0026#34;: 305746, \u0026#34;primary_key_id\u0026#34;: 305745, \u0026#34;key_id\u0026#34;: \u0026#34;5B07C6DBBBDAB020\u0026#34;, \u0026#34;raw_key\u0026#34;: null, \u0026#34;public_key\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;emails\u0026#34;: [ ], \u0026#34;subkeys\u0026#34;: [ ], \u0026#34;can_sign\u0026#34;: false, \u0026#34;can_encrypt_comms\u0026#34;: true, \u0026#34;can_encrypt_storage\u0026#34;: true, \u0026#34;can_certify\u0026#34;: false, \u0026#34;created_at\u0026#34;: \u0026#34;2018-02-15T11:34:33.000Z\u0026#34;, \u0026#34;expires_at\u0026#34;: null } ], \u0026#34;can_sign\u0026#34;: true, \u0026#34;can_encrypt_comms\u0026#34;: false, \u0026#34;can_encrypt_storage\u0026#34;: false, \u0026#34;can_certify\u0026#34;: true, \u0026#34;created_at\u0026#34;: \u0026#34;2018-02-15T11:34:33.000Z\u0026#34;, \u0026#34;expires_at\u0026#34;: \u0026#34;2020-02-15T00:22:09.000Z\u0026#34; }, { ... }, ... ] いろいろ端折ってるが，あしからず。\nこの中で raw_key 項目に GitHub へ登録した ASCII armor 形式の公開鍵がそのまま入っている。 取り出しは jq コマンドを使って以下のようにできる。\n$ curl -s https://api.github.com/users/spiegel-im-spiegel/gpg_keys | jq -r .[0].raw_key -----BEGIN PGP PUBLIC KEY BLOCK----- mFIEWoTPwRMIKoZIzj0DAQcCAwRBr6HVaUrhEBxBcty/ToFv3aJyC+yojwVG84CL ... JgA= =gjzz -----END PGP PUBLIC KEY BLOCK----- ただし raw_key 項目は登録した公開鍵によっては null になっているようだ。 なんでだろう。\n登録した鍵の公開鍵パケットのみであれば public_key 項目にセットされている1。\n$ curl -s https://api.github.com/users/spiegel-im-spiegel/gpg_keys | jq -r .[0].public_key xlIEWoTPwRMIKoZIzj0DAQcCAwRBr6HVaUrhEBxBcty/ToFv3aJyC+yojwVG84CLs/XUsT7TUUxrrME+RrzbCs4PMYjdZ9B9nCcD1ni2Bjk+GI9/ これはバイナリデータを Base64 形式で符号化したもののようだ。 なので base64 コマンドで復号し，更に拙作の gpgpdump で可視化すれば\n$ curl -s https://api.github.com/users/spiegel-im-spiegel/gpg_keys | jq -r .[0].public_key | base64 -d | gpgpdump Public-Key Packet (tag 6) (82 bytes) Version: 4 (current) Public key creation time: 2018-02-15T09:09:37+09:00 5a 84 cf c1 Public-key Algorithm: ECDSA public key algorithm (pub 19) ECC Curve OID: nistp256 (256bits key size) 2a 86 48 ce 3d 03 01 07 ECDSA EC point (uncompressed format) (515 bits) という感じに中身を見ることができる。\n以上，広告記事でした（笑）\nブックマーク  GitHub API v3 | GitHub Developer Guide\n User GPG Keys | GitHub Developer Guide  もう「公開鍵送ってください」というやり取りは不要だった - Qiita\n Git Commit で OpenPGP 署名を行う\n OpenPGP パケットを可視化する gpgpdump\n  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2018-12-16 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n  ちなみに公開鍵パケットのみで自己署名もない状態では暗号化も署名検証もできない。少なくとも GnuPG はそうなっている。 [return]   "
    },
    {
      "title": "2019-10-21 のブックマーク",
      "section": "bookmarks",
      "description": "「韓国の大規模児童ポルノ・サイトが摘発、ビットコイン追跡で」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/10/21-bookmarks/",
      "published": "2019-10-21T06:44:06+00:00",
      "update": "2019-10-21T06:54:13+00:00",
      "content": " セキュリティ＆プライバシー関連  MIT Tech Review: セキュリティ・キー500個を米企業が無償提供、香港の抗議活動支援 Factoring 2048-bit Numbers Using 20 Million Qubits - Schneier on Security  [1905.09749] How to factor 2048 bit RSA integers in 8 hours using 20 million noisy qubits  Big Sky :: sudo の特権昇格バグはなぜ起こったのか 個人情報保護委、約11万件のアカウント誤表示でアマゾンジャパンに行政指導 | 日経 xTECH（クロステック） Using machine learning to hunt down cybercriminals | MIT News  Using Machine Learning to Detect IP Hijacking - Schneier on Security ブログ: 機械学習を使ってIPハイジャックを検出する  Planting Tiny Spy Chips in Hardware Can Cost as Little as $200 | WIRED  Adding a Hardware Backdoor to a Networked Computer - Schneier on Security  MIT Tech Review: 「アレクサ、赤ちゃんを見てて」ホワイトノイズで呼吸を監視 : 怖っ！ 変なホテルの客室ロボット タピアの脆弱性についてまとめてみた - piyolog 米国発のセキュリティマネジメント成熟度の評価モデル「ES-C2M2」の解説書およびチェックシートの公開：IPA 独立行政法人 情報処理推進機構 Forum cracks the vintage passwords of Ken Thompson and other Unix pioneers | Ars Technica  Cracking the Passwords of Early Internet Pioneers - Schneier on Security  MIT Tech Review: 人工衛星が「全世界常時監視カメラ」になる日 米、イランにサイバー攻撃--サウジ石油施設攻撃への報復か - ZDNet Japan  天文関連  Mini Gravitational-Wave Detector Could Probe Dark Matter - Scientific American  ブログ: 小型重力波検出器が暗黒物質を探知できる  MIT Tech Review: 94億光年彼方の矮小銀河、銀河団の重力レンズを利用して発見 MIT Tech Review: ブラックホール周囲の惑星は居住可能か？NASA科学者が検証 How Two Nobel Laureates Spotted the First Exoplanet | WIRED  ブログ: 2人のノーベル賞受賞者が最初の太陽系外惑星を発見した方法  ニュース - プレッツェルのような双子星の「へその緒」 - アルマ望遠鏡 合体する銀河に潜んでいる。接近した3つの超大質量ブラックホールを観測 - sorae 宇宙へのポータルサイト  知財関連  Cloudflare Refutes MPA and RIAA's Piracy Concerns - TorrentFreak  Linux または Ubuntu に関する話題  Ubuntu 20.04 その3 - Ubuntu 20.04 LTSの開発コードとリリーススケジュール - kledgeb  その他  暗号通貨に暗雲、SECがTelegramの1800億円超のトークン売り出しを禁止 | TechCrunch Japan FacebookのLibra AssociationからMastercardとVisa、eBay、Stripeが脱退 | TechCrunch Japan  MIT Tech Review: FB「リブラ」に大打撃、ビザやマスターカードも離脱を表明  Tell HUD: Algorithms Shouldn't Be an Excuse to Discriminate | Electronic Frontier Foundation Computer Files Are Going Extinct - OneZero  ブログ: コンピュータファイルが絶滅しつつある  Visual Studio CodeがPython対応強化。Jupyter Notebooksネイティブ編集、Pythonファイルの直接実行など － Publickey なぜフェイスブックを解体すべきなのか？コロンビア大学ロースクール教授ティム・ウーが語る｜WIRED.jp 台風19号当日につながらなかった自治体サイトをTwitterで検索してみた - piyolog シェアリング事業でない電動キックボードに存在意義はあるのか | TechCrunch Japan MIT Tech Review: 「昔はよかった」は本当か？過去200年分の文献を分析した新研究 「Firefox」もアドレスバーのEV証明書発行元表示を廃止 ～鍵・盾アイコンの仕様も変更 - 窓の杜 MIT Tech Review: 韓国の大規模児童ポルノ・サイトが摘発、ビットコイン追跡で  米司法省が世界最大のダークウェブ児童ポルノサイトを摘発 | TechCrunch Japan  マイクロソフト、マイクロサービス開発を容易にする「Dapr」をオープンソースで公開。サービス間呼び出し、ステート管理、サービス間メッセージングなど提供 － Publickey 南米コロンビアの「コメづくり」を救う日本の最先端「カカシ」：フォーサイト編集部 | 記事 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト ASCII.jp：グーグルのハードウエア戦略「アンビエント・コンピューティング」で読み解く【西田宗千佳】 (1/2) 古代ギリシアの石板の解読をAIが助ける | TechCrunch Japan MIT Tech Review: 再生可能エネルギーが化石燃料を抜く＝英国で初 go1.13でgolangci-lint使った時にエラーが多発する時の対処法 - Qiita MediaLabがメッセージアプリKikを買収し閉鎖を回避 | TechCrunch Japan Goでプロセス監視のTUIツールを作ったら便利だった件 - Qiita Google開発主導のビルドツール「Bazel」がバージョン1.0に到達、次期Angluarでも正式採用へ － Publickey Visual Studio CodeがPython対応強化。Jupyter Notebooksネイティブ編集、Pythonファイルの直接実行など － Publickey DatabricksがDelta LakeプロジェクトをLinux Foundationに移管 | TechCrunch Japan AWS、Amazon PrimeやKindle、Alexaなどで使用していた約75ペタバイト7500のOracleデータベースをダウンタイムなしで自社データベースサービスへ移行したと報告 － Publickey  Amazonが100以上の消費者サービスのデータベースをOracleからAWSに移行 | TechCrunch Japan  SpaceXがStarlink衛星3万台追加打ち上げの申請書を提出 | TechCrunch Japan MIT Tech Review: 小惑星資源採掘バブル崩壊は何を残したのか？ トーバルズ氏が見るマイクロソフトとLinux - ZDNet Japan  "
    },
    {
      "title": "PA-API v5 クライアント・パッケージ v0.5.0 をリリースした",
      "section": "release",
      "description": "コメントとかドキュメントはまだまだ整理中なので，長い目で見てやってください。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/pa-api-v5-package-v0_5_0-is-released/",
      "published": "2019-10-20T11:29:51+00:00",
      "update": "2019-10-20T11:30:14+00:00",
      "content": " Go 言語用 PA-API v5 クライアント・パッケージ spiegel-im-spiegel/pa-api v0.5.0 をリリースした。\n Release v0.5.0 · spiegel-im-spiegel/pa-api · GitHub  以前いただいた pull request のコードがなかなかよかったので paapi5/query サブパッケージを全面的に書き直した。\nもともと paapi5/query サブパッケージは paapi5.Query インタフェースの実装サンプル・コード程度にしか考えてなかったのだが， PA-API の GetItems および SearchItems オペレーションに限れば，そのまま使えそうな感じになってしまった。 PR を送っていただいた方にはホンマに感謝である。\nコメントとかドキュメントはまだまだ整理中なので，長い目で見てやってください。 あっ PR はいつでも歓迎です。\nブックマーク  PA-API v5 への移行 Go 言語用 PA-API v5 クライアント・パッケージ  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Ubuntu 19.10 にアップグレードする",
      "section": "release",
      "description": "特にトラブルはなし。でも，やっぱり Ubuntu はセキュリティ・ツール周りの管理が弱いよなぁ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/upgrade-ubuntu-19_10/",
      "published": "2019-10-20T09:49:35+00:00",
      "update": "2019-10-27T11:47:35+00:00",
      "content": " 短期サポート版である Ubuntu 19.10 がリリースされた。 2020年7月までサポートが有効である。\n Ubuntu 19.10 (Eoan Ermine) released EoanErmine/ReleaseNotes - Ubuntu Wiki Ubuntu 19.10 その27 - Ubuntu 19.10がリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 19.10 その28 - Ubuntu 19.10の新機能と変更点・既知の問題 - kledgeb Ubuntu 19.04 その149 - Ubuntu 19.10へアップグレードするには・アップグレードの注意事項 - kledgeb  旧バージョンから 19.10 へのアップグレードはリリースノートを参考にするとよい。 手元の環境では特に問題なくアップグレードできた。\nアップグレード時にサードパーアティの APT リポジトリ（git や ATOM など）が外れるので，必要ならアップグレード時に戻して更新すること。\n短期サポート版で半年ごとにアップグレードするのは若干面倒だが，ディストリビューションのアップグレードのタイミングでないと更新されないアプリケーションもあるようなので（完全に自前で管理できるなら別だが）きちんとアップグレードに追従しておくほうが長い目で見てお得である。\n個別のアプリケーションについて GnuPG および Libgcrypt GnuPG および Libgcrypt はアップデートされなかった。 はるか古いバージョンのままである。\n$ gpg --version gpg (GnuPG) 2.2.12 libgcrypt 1.8.4 Copyright (C) 2018 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 どうも Ubuntu は GnuPG をまともにメンテできないようだ。 電子署名 spam の件もあり，特に Libgcrypt はセキュリティ・アップデートがあったばかりなんだけど。 こりゃあ，本格的に何か考えないとな。\n GnuPG 2.2.17 リリース： 公開鍵サーバ・アクセスに関する過激な変更あり Libgcrypt 1.8.5 がリリース【セキュリティ・アップデート】  OpenSSH および OpenSSL アップグレード直後の OpenSSH および OpenSSL のバージョンは以下のとおりだった。\n$ ssh -V OpenSSH_8.0p1 Ubuntu-6build1, OpenSSL 1.1.1c 28 May 2019 OpenSSH も 8.1 でセキュリティ・アップデートがあったばかりだし OpenSSL 1.1.1 もセキュリティ・アップデートがあったばかりだが，ちゃんと対応しているのかね。\nThunderbird Thunderbird は 68 ベースになっていた。 これは嬉しい。\nThunderbird に関しては Enigmail が2020年夏に本体に組み込まれるという話もあるので，きちんと追従していただきたいところである。\nLollypop （2019-10-24 更新）\n音楽プレイヤー Lollypop の PPA が 19.10 に対応した。 詳しくは以下の記事をどうぞ。\n 音楽プレイヤー Lollypop を試す  LibreOffice LibreOffice は 6.3 ベースになった。 もっとも私は既に APT での管理を止めているのでどうでもいいけど。\nやっぱり... Ubuntu はセキュリティ・ツール周りの管理が弱いよなぁ。 脆弱性を放置するとか「保守的」では済まないと思うのだが...\nブックマーク  Ubuntu 19.10 その26 - インストーラーからZFS on rootの構築が可能に - kledgeb\n Ubuntu アプリケーションにおけるセキュリティ・アップデート一覧\n  参考図書  私はどのようにしてLinuxカーネルを学んだかゆたかさんの技術書 平田豊 (著), MBビジネス研究班 (著), MBビジネス研究班 (編集) まんがびと 2019-07-26 (Release 2019-07-26) Kindle版 B07VJKJY7M (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  読み物として面白かった。ペーペーの新人の頃を思い出しながら読んでたり。\nreviewed by Spiegel on 2019-10-16 (powered by PA-APIv5)\n "
    },
    {
      "title": "gpgpdump v0.6.4 をリリースした",
      "section": "release",
      "description": "主目的は Go 1.13.3 でリコンパイルすることだったり。というわけで，よろしければ更新しておいてください。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/gpgpdump-v0_6_4-is-released/",
      "published": "2019-10-18T14:33:08+00:00",
      "update": "2019-10-18T14:33:33+00:00",
      "content": " OpenPGP パケットの内容を可視化する gpgpdump の v0.6.4 をリリースした。\n Release v0.6.4 · spiegel-im-spiegel/gpgpdump · GitHub  といっても，今回は機能的な変更・修正はほとんどなくて（spiegel-im-spiegel/errs パッケージを更新したくらい），主目的は Go 1.13.3 でリコンパイルすることだったり。\n実は\n openpgp-wg / openpgp-samples · GitLab  というリポジトリができていて，これを使って検証とテストを行おうとしたのだが，テストするまでもなく全く問題なく表示されたという（笑）\nというわけで，よろしければ更新しておいてください。\nブックマーク  Go 1.13.2 および Go 1.13.3 のリリース【セキュリティ・アップデート】  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2018-12-16 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    }
  ]
}
