{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "GnuPG の HOME はどこにある？",
      "section": "openpgp",
      "description": "GnuPG の HOME ディレクトリって .gnupg フォルダじゃねーの？",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/openpgp/gnupg-home-in-windows/",
      "published": "2020-11-02T11:49:45+00:00",
      "update": "2020-11-02T12:06:56+00:00",
      "content": "最近また Windows パソコンを使うことになって，色々と環境を整えるついでに GnuPG もインストールしたのだが\u0026hellip;\n今回 Scoop というパッケージ・マネージャを導入したのだが，これを使って GnuPG をインストールするとちょっと面白いことになる。\nScoop の導入方法は割愛して，いきなり GnuPG のインストールから話を始める。\n$ scoop install gnupg Installing \u0026#39;gnupg\u0026#39; (2.2.23) [64bit] ... Linking ~\\scoop\\apps\\gnupg\\current =\u0026gt; ~\\scoop\\apps\\gnupg\\2.2.23 Persisting home \u0026#39;gnupg\u0026#39; (2.2.23) was installed successfully! これで GnuPG v2.2.23 は %USERPROFILE%\\scoop\\apps\\gnupg\\2.2.23 フォルダにインストールされ %USERPROFILE%\\scoop\\apps\\gnupg\\current にシンボリック・リンクが張られる。 さらに環境変数 PATH に %USERPROFILE%\\scoop\\apps\\gnupg\\current が追加される。\nScoop の特徴でありメリットのひとつはインストールした実行バイナリを %USERPROFILE%\\scoop\\shims フォルダに集めることで環境変数 PATH を無駄に汚さないことにあるが， GnuPG の場合はシングル・バイナリではなく，インストールした複数のバイナリと協調して動作するため，単純に shims フォルダにコピるのは難しかったようだ。\nScoop によってインストールされた GnuPG のディレクトリ構成は以下のようになっている1。\n$ pwd C:\\Users\\username $ cd scoop\\apps\\gnupg\\current $ ll -rw-a-- 33K Sep 4 00:39:00 README.txt drwx--- 0 Oct 27 13:59:32 bin/ dr-x--- 0 Oct 27 13:59:32 home@ -\u0026gt; C:\\Users\\username\\scoop\\persist\\gnupg\\home drwx--- 0 Oct 27 13:59:32 include/ -rw-a-- 58 Oct 27 13:59:32 install.json drwx--- 0 Oct 27 13:59:32 lib/ -rw-a-- 1.4K Oct 27 13:36:14 manifest.json drwx--- 0 Oct 27 13:59:32 share/ 実際に GnuPG を動かしてみると\n$ gpg --version gpg (GnuPG) 2.2.23 libgcrypt 1.8.6 Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: C:/Users/username/scoop/apps/gnupg/current/home サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 となる。 HOME ディレクトリが %USERPROFILE%\\scoop\\apps\\gnupg\\current\\home になっているのがお分かりだろうか。 ただし，この home ディレクトリはシンボリック・リンクなので，実体は %USERPROFILE%\\scoop\\persist\\gnupg\\home ということになる。\nって GnuPG の HOME ディレクトリって %USERPROFILE% 直下の .gnupg フォルダじゃねーの？\nおやや，と思って調べてみたら Windows 版の GnuPG はちょっと違うらしい。\nTo install GnuPG as a portable application under Windows, create an empty file named gpgconf.ctl in the same directory as the tool gpgconf.exe. The root of the installation is then that directory; or, if gpgconf.exe has been installed directly below a directory named bin, its parent directory. via Agent Options (Using the GNU Privacy Guard)  つまり（gpgconf.exe のある） %USERPROFILE%\\scoop\\apps\\gnupg\\current\\bin フォルダに空の gpgconf.ctl ファイルを置けば その親ディレクトリ（%USERPROFILE%\\scoop\\apps\\gnupg\\current）がインストール・ルートとして認識され，その直下の home フォルダが GnuPG の HOME ディレクトリとなる。\nWindows 版の場合 gpgconf.ctl ファイルによる HOME の指定が優先され，環境変数 GNUPGHOME やレジストリを使った指定は無視されるらしい。 ただし --homedir オプションは効くとのこと。 これはこれで合理的。\n試しに Ubuntu で gpgconf.ctl を置いてみたが効かなかった。 まぁ，当たり前か（笑）\nそれにしても Scoop はよい。 端末エミュレータでコマンドライン中心に作業している人には Scoop のほうが設計がシンプルで使いやすいんじゃないだろうか。 まぁ，私は作業の中心が（仕事以外では）もはや Windows ではなくなっているので，余計にそう思うのかもしれないが（笑）\nブックマーク  scoop / nyagos で始めるコマンドライン生活  参考図書   ちなみに私は Windows Terminal ＋ NYAGOS を愛用している。例に出ている ll は NYAGOS の組み込みコマンド（の alias）である。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go パッケージ／モジュールの依存関係可視化ツールを作ってみた",
      "section": "release",
      "description": "以前自作したツールがイマイチで，他の方が作ったツールも微妙だったので，最初から作り直してみた。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/11/depm-v0_1_0-is-released/",
      "published": "2020-11-01T11:47:14+00:00",
      "update": "2020-11-01T11:51:13+00:00",
      "content": "ついカッとなってやった。 反省はしない。\nこの手のツールって誰もが一度は書いてみたくなると思うけど，以前自作したツールがイマイチで，他の方が作ったツールも微妙だったので，最初から作り直してみた。\n spiegel-im-spiegel/depm: Visualize depndency packages and modules  前のツール では go mod graph コマンドの出力をパイプで繋いで処理してたけど，今回はツール内で go list コマンドを呼び出している。 したがって Go コンパイラがインストール済みであることが前提条件となる。\n-h オプションで簡単なヘルプを表示する。\n$ depm -h Visualize depndency packages and modules. Usage: depm [flags] depm [command] Available Commands: help Help about any command module analyze depndency modules package analyze depndency packages version print the version number Flags: --cgo-enabled string set CGO_ENABLED environment variable --debug for debug --dot output by DOT language --dot-config string config file for DOT language --goarch string set GOARCH environment variable --goos string set GOOS environment variable -h, --help help for depm Use \u0026#34;depm [command] --help\u0026#34; for more information about a command. depm module コマンドならこんな感じに使える。\n$ depm module github.com/spiegel-im-spiegel/depm | jq . [ { \u0026#34;Module\u0026#34;: { \u0026#34;Path\u0026#34;: \u0026#34;github.com/spf13/cobra@v1.1.1\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;github.com/spf13/cobra\u0026#34; ] }, \u0026#34;Deps\u0026#34;: [ { \u0026#34;Path\u0026#34;: \u0026#34;github.com/spf13/pflag@v1.0.5\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;github.com/spf13/pflag\u0026#34; ] } ] }, { \u0026#34;Module\u0026#34;: { \u0026#34;Path\u0026#34;: \u0026#34;github.com/spiegel-im-spiegel/depm@v0.1.0\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;github.com/spiegel-im-spiegel/depm\u0026#34;, \u0026#34;github.com/spiegel-im-spiegel/depm/dependency\u0026#34;, \u0026#34;github.com/spiegel-im-spiegel/depm/dependency/modjson\u0026#34;, \u0026#34;github.com/spiegel-im-spiegel/depm/dependency/pkgjson\u0026#34;, \u0026#34;github.com/spiegel-im-spiegel/depm/dotenc\u0026#34;, \u0026#34;github.com/spiegel-im-spiegel/depm/ecode\u0026#34;, \u0026#34;github.com/spiegel-im-spiegel/depm/facade\u0026#34;, \u0026#34;github.com/spiegel-im-spiegel/depm/golist\u0026#34;, \u0026#34;github.com/spiegel-im-spiegel/depm/modules\u0026#34;, \u0026#34;github.com/spiegel-im-spiegel/depm/packages\u0026#34; ] }, \u0026#34;Deps\u0026#34;: [ { \u0026#34;Path\u0026#34;: \u0026#34;github.com/spiegel-im-spiegel/gocli@v0.10.3\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;github.com/spiegel-im-spiegel/gocli/exitcode\u0026#34;, \u0026#34;github.com/spiegel-im-spiegel/gocli/rwi\u0026#34; ] }, { \u0026#34;Path\u0026#34;: \u0026#34;github.com/spf13/cobra@v1.1.1\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;github.com/spf13/cobra\u0026#34; ] }, { \u0026#34;Path\u0026#34;: \u0026#34;github.com/spiegel-im-spiegel/errs@v1.0.2\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;github.com/spiegel-im-spiegel/errs\u0026#34; ] }, { \u0026#34;Path\u0026#34;: \u0026#34;golang.org/x/tools@v0.0.0-20201031021630-582c62ec74d0\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;golang.org/x/tools/go/ast/astutil\u0026#34;, \u0026#34;golang.org/x/tools/imports\u0026#34;, \u0026#34;golang.org/x/tools/internal/event\u0026#34;, \u0026#34;golang.org/x/tools/internal/event/core\u0026#34;, \u0026#34;golang.org/x/tools/internal/event/keys\u0026#34;, \u0026#34;golang.org/x/tools/internal/event/label\u0026#34;, \u0026#34;golang.org/x/tools/internal/fastwalk\u0026#34;, \u0026#34;golang.org/x/tools/internal/gocommand\u0026#34;, \u0026#34;golang.org/x/tools/internal/gopathwalk\u0026#34;, \u0026#34;golang.org/x/tools/internal/imports\u0026#34; ] }, { \u0026#34;Path\u0026#34;: \u0026#34;github.com/BurntSushi/toml@v0.3.1\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;github.com/BurntSushi/toml\u0026#34; ] }, { \u0026#34;Path\u0026#34;: \u0026#34;github.com/emicklei/dot@v0.15.0\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;github.com/emicklei/dot\u0026#34; ] } ] }, { \u0026#34;Module\u0026#34;: { \u0026#34;Path\u0026#34;: \u0026#34;golang.org/x/mod@v0.3.0\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;golang.org/x/mod/module\u0026#34;, \u0026#34;golang.org/x/mod/semver\u0026#34; ] }, \u0026#34;Deps\u0026#34;: [ { \u0026#34;Path\u0026#34;: \u0026#34;golang.org/x/xerrors@v0.0.0-20200804184101-5ec99f83aff1\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;golang.org/x/xerrors\u0026#34;, \u0026#34;golang.org/x/xerrors/internal\u0026#34; ] } ] }, { \u0026#34;Module\u0026#34;: { \u0026#34;Path\u0026#34;: \u0026#34;golang.org/x/tools@v0.0.0-20201031021630-582c62ec74d0\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;golang.org/x/tools/go/ast/astutil\u0026#34;, \u0026#34;golang.org/x/tools/imports\u0026#34;, \u0026#34;golang.org/x/tools/internal/event\u0026#34;, \u0026#34;golang.org/x/tools/internal/event/core\u0026#34;, \u0026#34;golang.org/x/tools/internal/event/keys\u0026#34;, \u0026#34;golang.org/x/tools/internal/event/label\u0026#34;, \u0026#34;golang.org/x/tools/internal/fastwalk\u0026#34;, \u0026#34;golang.org/x/tools/internal/gocommand\u0026#34;, \u0026#34;golang.org/x/tools/internal/gopathwalk\u0026#34;, \u0026#34;golang.org/x/tools/internal/imports\u0026#34; ] }, \u0026#34;Deps\u0026#34;: [ { \u0026#34;Path\u0026#34;: \u0026#34;golang.org/x/mod@v0.3.0\u0026#34;, \u0026#34;Packages\u0026#34;: [ \u0026#34;golang.org/x/mod/module\u0026#34;, \u0026#34;golang.org/x/mod/semver\u0026#34; ] } ] } ] 出力は JSON 形式で。 パッケージ（モジュール）パスを省略するとカレント・ディレクトリを調べる1。\n--dot オプションを付けると DOT 言語形式で出力するので，そのまま dot コマンドに渡して関連図を作成できる。\n$ depm module --dot github.com/spiegel-im-spiegel/depm | dot -Tpng -o output.png 出力はこんな感じ。\noutput.png  TOML 形式で以下のような設定ファイルを作れば（DOT 言語の仕様にしたがって）見た目を多少変えることができる。\n[node] fontname = \u0026#34;Inconsolata\u0026#34; [edge] color = \u0026#34;red\u0026#34; これで\n$ depm module --dot --dot-config dot-config.toml github.com/spiegel-im-spiegel/depm | dot -Tpng -o output2.png とかすれば\noutput2.png  のような見た目にできる。 あと -c オプションでモジュールの最新バージョンの取得もできたりする。\ndepm package コマンドにするとモジュール単位ではなくパッケージ単位で依存関係を整理する。\n$ depm package github.com/spiegel-im-spiegel/depm 結構スゴい出力になるので，結果は割愛する（笑） depm package コマンドに -s や -i オプションを付けると Go の標準ライブラリや internal パッケージも対象になるので，本当にワケワカラン出力になる。\noutput3.png  勢いで書いてろくにテストもしないでリリースしたが，あとはノンビリ手を入れていこう。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   パッケージ（モジュール）パスを省略した場合は，ツール内部で go list コマンドに all を渡している。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "スクリーン・キャプチャのキホン",
      "section": "remark",
      "description": "それ，知らんかっとってんちんとんしゃん",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/screen-captors/",
      "published": "2020-10-29T11:56:22+00:00",
      "update": "2020-10-30T10:57:03+00:00",
      "content": "最初にものっそい言い訳してしまうと，普段スクリーン・キャプチャ機能なんか使わんのですよ，私は。 それでも [Print Screen] キーを押せば画面が撮れることを覚えていただけでも褒めて欲しい（笑）\nで，今までは [Print Screen] キーでスクリーン全体を撮るか [Alt] + [Print Screen] でアクティブなウィンドウ領域を撮るかくらいしか知らなかったのだが， Windows 10 では [] + [Shift] + [s] で任意の矩形領域が撮れると教えてもらって驚愕した。\n[] + [Shift] + [s] 押下で画面上部に以下のようなコントロールが表示される。\n 左端のアイコンを選択しているこの状態が任意の矩形領域を切り取れるモードだ。\n更にこの機能を [Print Screen] キーに割り当てることができるようだ。 詳しい手順は以下の記事を参考にどうぞ。\n ［Windows］+［Shift］+［S］で画面領域切り取り（PrintScreenに割り当ても可） | Windows 10 | 初心者のためのOffice講座  更に更に，セルフタイマー付きスクリーン・キャプチャ機能や切り取った画像を加工できる “Snipping Tool” が Windows 標準のアクセサリとして搭載されていた。 それ，知らんかっとってんちんとんしゃん。\n今までペイントツールでちまちまとトリミングしてた私の苦労は何だったのか orz\nところで Ubuntu でも簡単に矩形領域を撮れないの？ と軽くググってみたが， [Shift] + [Print Screen] 押下で矩形領域を切り取れるようだ。 Windows より簡単だったよ。\n今まで Shotwell Viewer でちまちまとトリミングしてた私の苦労は何だったのか orz\nUbuntu の場合，スクリーン・キャプチャ機能の実体は gnome-screenshot コマンドで，これはコマンドラインからも起動できる。 たとえば，5秒間の遅延後にアクティブなウィンドウを撮りたければ\n$ gnome-screenshot --window --delay=5 とすればいいようだ。\nブックマーク  Copy the window or screen contents - Office Support Snipping Tool を使ってスクリーン ショットをキャプチャする Ubuntuで端末からスクリーンショットを撮る方法まとめ - Qiita 2020年10月現在スクリーンキャプチャおすすめツール(Windows/Mac) Snagit = The Best Screen Capture Software (Free Trial) | TechSmith : 有料だがかなり「使える！」らしい  参考図書  ちまりまわるつ (Izumi Takemoto dashinaoshi) 竹本 泉 (著) 朝日ソノラマ 2002-12-01 コミック 4257904623 (ASIN), 9784257904625 (EAN), 4257904623 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  竹本泉さんの魔法（ちまちまじっく）世界線の原点とも言える作品。ただしリニューアル版。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n  カードキャプターさくら 1期\u0026#43;2期\u0026#43;3期 コンプリート DVD-BOX [Import] IDP DVD B004JSTW5S (ASIN), 3760000568838 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  3期分合わせて4千円弱とか太っ腹！ まぁ私は Hulu で観るけどね。たまに観たくなるのよ。\nreviewed by Spiegel on 2019-05-05 (powered by PA-APIv5)\n "
    },
    {
      "title": "Windows Terminal × NYAGOS × Scoop ＝ ♥",
      "section": "remark",
      "description": "とりあえず ATOM エディタと NYAGOS を入れたい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/windows-terminal-and-nyagos-and-scoop/",
      "published": "2020-10-27T13:17:46+00:00",
      "update": "2020-11-02T12:14:27+00:00",
      "content": "アルファ・ベータ・オメガの割り振りはご想像にお任せします 😄 って，そういう話ではない。\nさて，職場で Windows 10 機を支給されたので，とりあえず ATOM エディタと NYAGOS を入れたいわけですよ。\nWindows 10 に ATOM を入れる まぁこちらはサラッと。\n公式ページからインストーラを取ってきて普通にインストールすればいいだけ。 なのだが，何故か Windows 版はコマンドラインからの起動が冷遇されているのよ。 古いバージョンにはあった atom.cmd がなくなっている。\nじゃあ，どうやって起動するのかというと “System Settings” で\nSystem Settings in ATOM  てな感じにエクスプローラ等のコンテキストメニューから開けるように設定できる。 また ATOM が起動している状態でタスクバーの ATOM アイコンをピン留めしておけば\nATOM icon in task bar  みたいな感じにコンテキストメニューを展開できる。\n困るのが apm コマンドなのだが，これにはパスを通さずに直接カレントまで降りて操作するしかないだろう。 v1.52.0 なら\n$ cd C:\\Users\\username\\AppData\\Local\\atom\\app-1.52.0\\resources\\app\\apm\\bin まで降りる。 この場所で apm を使ってログインできる。\n$ apm login Welcome to Atom! Before you can publish packages, you\u0026#39;ll need an API token. Visit your account page on Atom.io https://atom.io/account, copy the token and paste it below when prompted. Press [Enter] to open your account page on Atom.io. ここで [Enter] キーを押すと Web ブラウザでアカウントページが開く（要 GitHub アカウント）。 開かない場合は Web ブラウザで直接 https://atom.io/account を開く。 アカウントページに表示されたアクセス・トークンを入力すればログイン完了。\nToken\u0026gt; **************** Saving token to Keychain done あとは\n$ apm stars --install で ⭐ を付けたパッケージをまとめてインストールできる。 ちなみに，どのパッケージに ⭐ を付けたかは\n$ apm stars で確認できる。 その他の細々した設定は Gist に貼り付けておいたのを流用した。 なんでも取っておくものである 😄\nWindows Terminal のインストール これでようやく「メモ帳」から脱することができたので，本格的に環境を作っていこう。\nかつて Windows 7 を使ってた頃はターミナル・エミュレータに ConEmu を使っていたが，本家 Microsoft からようやくまともなターミナル・エミュレータがリリースされた。\n Windows ターミナルの概要 | Microsoft Docs  Windows Terminal は Microsoft Store からインストールできる。 ひとまずこれをインストールして起動し，既定の PowerShell 上で作業する。\nScoop のインストール Scoop は Windows 用のパッケージ・マネージャである。 Windows 用のパッケージ・マネージャといえば Chocolatey が有名だが，今回は Scoop で。 Scoop の特徴は以下の通り。\n  利用に管理者権限は不要！ 実行ファイルは ~\\scoop\\shims に集約され、環境変数 PATH の肥大化が抑制される インストーラのセットアップが簡単 nyagos が公式レポジトリにある (Chocolatey にもあるけど）   scoop / nyagos で始めるコマンドライン生活より  では早速。\nまずは PowerShell でスクリプトを起動できるよう権限を取得する。\nPS \u0026gt; Set-ExecutionPolicy RemoteSigned -scope CurrentUser 既に許可を取得している場合はこの操作は不要である。 そうしておいて Scoop をインストールする。\nPS \u0026gt; iwr -useb get.scoop.sh | iex これで OK。 簡単！\nNYAGOS のインストール NYAGOS のインストールは scoop install コマンドで一発 OK。\nPS \u0026gt; scoop install nyagos よーし，うむうむ，よーし。\nWindows Terminal に NYAGOS を登録する Windows Terminal では PowerShell を含む複数の shell を登録できる。\nまずは [Ctrl+,] で config.json ファイル（のコピー）がメモ帳で表示される（コメントを端折っているので注意）。 これを編集して NYAGOS を登録するのだ。 具体的には以下の部分を追記する。\n{ \u0026#34;$schema\u0026#34;: \u0026#34;https://aka.ms/terminal-profiles-schema\u0026#34;, \u0026#34;defaultProfile\u0026#34;: \u0026#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}\u0026#34;, \u0026#34;copyOnSelect\u0026#34;: false, \u0026#34;copyFormatting\u0026#34;: false, \u0026#34;profiles\u0026#34;: { \u0026#34;defaults\u0026#34;: { }, \u0026#34;list\u0026#34;: [ { \u0026#34;guid\u0026#34;: \u0026#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Windows PowerShell\u0026#34;, \u0026#34;commandline\u0026#34;: \u0026#34;powershell.exe\u0026#34;, \u0026#34;hidden\u0026#34;: false }, { \u0026#34;guid\u0026#34;: \u0026#34;{0caa0dad-35be-5f56-a8ff-afceeeaa6101}\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;コマンド プロンプト\u0026#34;, \u0026#34;commandline\u0026#34;: \u0026#34;cmd.exe\u0026#34;, \u0026#34;hidden\u0026#34;: false }, { \u0026#34;guid\u0026#34;: \u0026#34;{b453ae62-4e3d-5e58-b989-0a998ec441b8}\u0026#34;, \u0026#34;hidden\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Azure Cloud Shell\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;Windows.Terminal.Azure\u0026#34; }, { \u0026#34;guid\u0026#34;: \u0026#34;{19ddaf5e-e045-481a-bf88-37f7ebe66292}\u0026#34;, \u0026#34;hidden\u0026#34;: false, \u0026#34;name\u0026#34;: \u0026#34;Nihongo Yet Another GOing Shell\u0026#34;, \u0026#34;commandline\u0026#34;: \u0026#34;%USERPROFILE%\\\\scoop\\\\shims\\\\nyagos.exe\u0026#34;, \u0026#34;cursorShape\u0026#34;: \u0026#34;vintage\u0026#34;, \u0026#34;startingDirectory\u0026#34;: \u0026#34;%USERPROFILE%\u0026#34;  } ] }, \u0026#34;schemes\u0026#34;: [], \u0026#34;actions\u0026#34;: [ { \u0026#34;command\u0026#34;: {\u0026#34;action\u0026#34;: \u0026#34;copy\u0026#34;, \u0026#34;singleLine\u0026#34;: false }, \u0026#34;keys\u0026#34;: \u0026#34;ctrl+c\u0026#34; }, { \u0026#34;command\u0026#34;: \u0026#34;paste\u0026#34;, \u0026#34;keys\u0026#34;: \u0026#34;ctrl+v\u0026#34; }, { \u0026#34;command\u0026#34;: \u0026#34;find\u0026#34;, \u0026#34;keys\u0026#34;: \u0026#34;ctrl+shift+f\u0026#34; }, { \u0026#34;command\u0026#34;: { \u0026#34;action\u0026#34;: \u0026#34;splitPane\u0026#34;, \u0026#34;split\u0026#34;: \u0026#34;auto\u0026#34;, \u0026#34;splitMode\u0026#34;: \u0026#34;duplicate\u0026#34; }, \u0026#34;keys\u0026#34;: \u0026#34;alt+shift+d\u0026#34; } ] } ちなみに guid 項目はローカルマシン内で一意であればなんでもいいのだが（上の記述をそのままコピペしても無問題），気になるのであれば PowerShell の以下のコマンドで取得できる。\nPS \u0026gt; New-Guid Guid ---- 6c48ee13-e32b-4937-95a5-7e95a2e88613 更に config.json ファイル（のコピー）の\n{ \u0026#34;defaultProfile\u0026#34;: \u0026#34;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}\u0026#34;, } の部分を NYAGOS の GUID に書き換えれば\n{ \u0026#34;defaultProfile\u0026#34;: \u0026#34;{19ddaf5e-e045-481a-bf88-37f7ebe66292}\u0026#34;, } Windows Terminal の既定の shell を NYAGOS にできる。\n編集した config.json ファイル（のコピー）を保存すれば設定が反映される。 ふぃー，よーやくここまでたどり着いた。\nNYAGOS を使った楽しいアレコレは以下の Zenn 本に書かれている。\n scoop / nyagos で始めるコマンドライン生活  上述のセットアップについても，もう少し丁寧に書かれているので，是非どうぞ。\nGo で GUID を取得する そういや Go の github.com/google/uuid パッケージを使えば UUID を取得可能だが， UUID は実質 GUID と同じなので，これを利用して\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/google/uuid\u0026#34; ) func main() { fmt.Println(uuid.New()) } とすれば簡単に UUID/GUID が取れる。\n$ go run sample.go f6bdc505-e417-4b7d-a247-a06504cf03a9 Scoop を使うなら git は必須 これでインストールは全て完了だが，今後のためにもう少し Scoop で遊んでみよう。\nまず Scoop のバージョンを見ようとしたら\n$ scoop -v Current Scoop version: git : 用語 \u0026#39;git\u0026#39; は、コマンドレット、関数、スクリプト ファイル、または操作可能なプログラムの名前として認識されません。 名前が正しく記述されていることを確認し、パスが含まれている場合はそのパスが正しいことを確認してから、再試行してください 。 発生場所 行:1 文字:1 + git --no-pager log --oneline HEAD -n 1 + ~~~ + CategoryInfo : ObjectNotFound: (git:String) [], CommandNotFoundException + FullyQualifiedErrorId : CommandNotFoundException って，どエラ怒られた（笑） どうやら Scoop はパッケージ管理を git ベースで行っているらしく，ちゃんと使うなら git の導入が必須のようだ。 ほんじゃあ，まぁ\n$ scoop install git Scoop uses Git to update itself. Run \u0026#39;scoop install git\u0026#39; and try again. ... おっ，アップデートした後にもっかいやれって言ってるな。 ならば，アップデートしよう。\n$ scoop update Updating Scoop... Updating \u0026#39;main\u0026#39; bucket... Checking repo... ok The main bucket was added successfully. Scoop was updated successfully! \u0026#39;itcode\u0026#34;\u0026#39; は、内部コマンドまたは外部コマンド、 操作可能なプログラムまたはバッチ ファイルとして認識されていません。 exit status 1 おりょ，また変なエラーが出たよ。 itcode\u0026quot; 云々というのは PowerShell 絡みらしい。 なので，同じコマンドを PowerShell 上で走らせれば問題なく完了する。\nうむ，次回から気をつけよう。\nこれでもっかい\n$ scoop update git とすれば，最新版が取れるわけだ。\nついでに Scoop で GnuPG もインストールする ついでに Scoop で GnuPG もインストールしてみよう。 あるかな？\n$ scoop search gnupg \u0026#39;main\u0026#39; bucket: gnupg (2.2.23) gnupg1 (1.4.23) $ scoop search gpg \u0026#39;main\u0026#39; bucket: gnupg1 (1.4.23) --\u0026gt; includes \u0026#39;gpg.exe\u0026#39; gpg (2.2.23) どっちだよ（笑）\n実はこれ，中身は同じなのだが別々のパッケージとしてインストールされちゃうようだ。 ふむむー。\nまぁ，いいや。 今回は gnupg で。\n$ scoop install gnupg Installing \u0026#39;gnupg\u0026#39; (2.2.23) [64bit] ... Linking ~\\scoop\\apps\\gnupg\\current =\u0026gt; ~\\scoop\\apps\\gnupg\\2.2.23 Persisting home \u0026#39;gnupg\u0026#39; (2.2.23) was installed successfully! Scoop で提供されるパッケージのうち，シングルバイナリのコマンドは %USERPROFILE%\\scoop\\shims フォルダに集められるのだが， GnuPG のように複数のバイナリで構成されているものは専用のフォルダを作り環境変数 PATH にインストールしたフォルダを追加するようだ。 その際に\nLinking ~\\scoop\\apps\\gnupg\\current =\u0026gt; ~\\scoop\\apps\\gnupg\\2.2.23 のように current フォルダをシンボリックリンクとして設置することで複数のバージョンに対応できるようにしているみたい。\nGnuPG の動作確認をしておこう。\n$ gpg --version gpg (GnuPG) 2.2.23 libgcrypt 1.8.6 Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: C:/Users/username/scoop/apps/gnupg/current/home サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 上述の Home だが，これもシンボリックリンクが切られていて，実体は %USERPROFILE%\\scoop\\persist\\gnupg\\home にある。\n【2020-11-02 追記】 GnuPG については以下の記事でもう少し掘り下げて紹介している。\n GnuPG の HOME はどこにある？   今回はここまで おっと。 昼休憩が終わったようだ。 次回があれば，また今度。\nブックマーク  Windows用のコマンドラインインストーラScoop - Qiita Scoopを使ったWindows環境構築のススメ - Super!! - Qiita GUID生成ツール /bin/shに慣れた人に贈るバッチファイルの書き方 ScoopでWindowsにおける開発環境構築を最適化しよう | さにあらず  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Git v2.29 がリリースされた",
      "section": "release",
      "description": "SHA-2 コミット・ハッシュの実験的サポート / Windows 版 Git Credential Manager のアップグレード",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/10/git-2_29-is-released/",
      "published": "2020-10-25T09:09:33+00:00",
      "update": "2020-10-30T10:57:03+00:00",
      "content": "先日 Git v.2.29 がリリースされた。\n [ANNOUNCE] Git v2.29.0  SHA-2 コミット・ハッシュの実験的サポート v2.29 ではコミット・ハッシュに関する重大な仕様変更がある。\nGit 2.29 includes experimental support for writing your repository’s objects using a SHA-256 hash of their contents, instead of using SHA-1. via Highlights from Git 2.29 - The GitHub Blog  といっても今回は実験的なサポート（experimental support）で，試すのであれば以下のような感じでできるらしい。\n$ git init --object-format=sha256 sample-repo Initialized empty Git repository in /home/username/sample-repo/.git/ $ cd sample-repo $ echo \u0026#39;Hello, SHA-256!\u0026#39; \u0026gt;README.md $ git add README.md $ git commit -m \u0026#34;README.md: initial commit\u0026#34; [main (root-commit) 6d45449] README.md: initial commit 1 file changed, 1 insertion(+) create mode 100644 README.md $ git rev-parse HEAD 6d45449028a8e76500adbfe7330e779d5dc4a3a14fca58ff08ec354c58727b2c 当然ながら SHA-1 ベースのコミット・ハッシュと SHA-2 (SHA256) ベースのコミット・ハッシュとの間には互換性がない。 当面は2系統のリポジトリを使い分けて運用することになりそうだ。 ただし，将来的には両者を相互運用できるようにするらしい。\nIn future releases, Git will support interoperating between repositories with different object formats by computing both a SHA-1 and SHA-256 hash of each object it writes, and storing a translation table between them. This will eventually allow repositories that store their objects using SHA-256 to interact with (sufficiently up-to-date) SHA-1 clients, and vice-versa. It will also allow converted SHA-256 repositories to have their references to older SHA-1 commits still function as normal (e.g., if I write a commit whose message references an earlier commit by its SHA-1 name, then Git will still be able to follow that reference even after the repository is converted to use SHA-256 by consulting the translation table). via Highlights from Git 2.29 - The GitHub Blog  ここまで到達すれば SHA-2 ベースへ本格的に切り替えていってもいいかも知れない。\nWindows 版 Git Credential Manager のアップグレード Git for Windows では，もうひとつ重大な変更がある。\nThis version upgrades existing users of Git Credential Manager for Windows (which was just deprecated) to Git Credential Manager Core (“GCM Core”, which is the designated successor of the former). This is necessary because GitHub deprecated password-based authentication and intends to remove support for it soon, and GCM Core is prepared for this change.. via Release Git for Windows 2.29.0 · git-for-windows/git  GitHub リポジトリに HTTPS でアクセスしている場合は注意が必要かも知れない（Git for Windows を使ってないので，どの程度影響するか分かってない。ゴメンペコン 🙇）。\nブックマーク   [ANNOUNCE] Git v2.29.1\n  [ANNOUNCE] Git v2.29.2 - Junio C Hamano\n  Highlights from Git 2.29 - The GitHub Blog\n  Release Git for Windows 2.29.0 · git-for-windows/git · GitHub\n  Release Git for Windows 2.29.1 · git-for-windows/git · GitHub\n  「Git for Windows 2.29.0」が公開 ～セットアップ時にデフォルトブランチ名を設定可能 - 窓の杜\n  PPA から Git をインストールする\n  さようなら SHA-1 : SHA-1 の危殆化について Zenn でまとめ記事を書いてみた\n  参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "テンキーなんて飾りです，偉い人には分からんのです",
      "section": "remark",
      "description": "テンキーがないだけで机上が随分広くなった気がする。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/no-need-numeric-keypad/",
      "published": "2020-10-25T07:16:12+00:00",
      "update": "2020-10-25T07:25:42+00:00",
      "content": "おかげさまで新しい会社に拾っていただきまして先日から仕事をはじめているのだが「キーボードは使い勝手がいいものを自前で用意していいよ」と許可してもらったので，この機会にキーボードを買うことにした。\n私は文房具全般にあまりこだわりがないのだが，パソコンのキーボードに関しては2つだけある。 すなわち\n 流行りの薄型キーボードは NG (指が痛くなる) テンキー使わんし要らね（ただしノートPC風のキー配列は論外）  だ。 ちなみに押打時の感触とかにこだわりはない。\nそんで，いろいろ調べた結果\n エレコム キーボード 有線 メンブレン コンパクトキーボード ブラック TK-FCM103XBK エレコム (Release 2019-02-28) Personal Computers B07NDLJ6Q9 (ASIN), 4549550107761 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  いわゆる「テンキーレス」なキーボードが欲しかったので。\nreviewed by Spiegel on 2020-10-25 (powered by PA-APIv5)\n にした。 税込981円。 マイナポイントで買ったと思えば無料も同然（笑）\nいや，1万円以上出せばゲーミング・キーボードとかでよさげなのはあるよ。 でもマウスやキーボードなんて消耗品にお金かけたくないじゃん。\nテンキーがないだけで机上が随分広くなった気がする。 やっぱテンキーなんて飾りだよ。 偉い人には分からんのです。\n実際に職場で使ってみたらかなりいい感じだったので，自宅 PC 用にも追加で買ってしまった。 （多分）5年以上使っててキートップの刻印も剥げちゃってるしね。 まぁ刻印が見えなくて困ることはないんだけど 😄\n"
    },
    {
      "title": "2020-10-25 のブックマーク",
      "section": "bookmarks",
      "description": "「NASA’s OSIRIS-REx Spacecraft Successfully Touches Asteroid」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/10/25-bookmarks/",
      "published": "2020-10-25T03:49:02+00:00",
      "update": "2020-10-30T10:57:03+00:00",
      "content": "リリース情報  Release v1.1.1 · spf13/cobra · GitHub Highlights from Git 2.29 - The GitHub Blog  Release Git for Windows 2.29.0 · git-for-windows/git · GitHub  「Git for Windows 2.29.0」が公開 ～セットアップ時にデフォルトブランチ名を設定可能 - 窓の杜   Release Git for Windows 2.29.1 · git-for-windows/git · GitHub   「Windows 10 October 2020 Update」が一般公開 ～年2回の大規模アップデート - 窓の杜 KeePassXC 2.6.2 released - KeePassXC The Document Foundation announces LibreOffice 6.4.7 - The Document Foundation Blog Release v1.32.0 · golangci/golangci-lint · GitHub  セキュリティ＆プライバシー関連  Split-Second Phantom Images Fool Autopilots - Schneier on Security グーグル、3年前に中国から2.54TbpsのDDoS攻撃を受けていた - ZDNet Japan 富士通、JCB、みずほ銀行がデジタルアイデンティティーの相互運用で共同実験 - ZDNet Japan Chinese State-SponsoredActors Exploit Publicly Known Vulnerabilities   NSA Advisory on Chinese Government Hacking - Schneier on Security   「Microsoft Edge 86」にゼロデイ脆弱性 ～修正版のv86.0.622.51がリリース - 窓の杜 New Report on Police Decryption Capabilities - Schneier on Security  天文関連  オンライン宇宙セミナー「火星の月から水惑星の起源を探る火星衛星探査計画MMX」のお知らせ | 広島大学 : 参加予定 MIT Tech Review: 日欧の水星探査機、金星フライバイで最新画像を多数撮影 Nokia selected by NASA to build first ever cellular network on the Moon | Nokia : 月から電波を撒き散らす。 NASA 公認か\u0026hellip; NASA’s OSIRIS-REx Spacecraft Successfully Touches Asteroid - OSIRIS-REx Mission  Touch-and-Go complete! NASA OSIRIS-REx completes maneuver to sample Asteroid Bennu - Space Showcase NASA’s OSIRIS-REx Spacecraft Collects Significant Amount of Asteroid | NASA 2020年10月23日ニュース「米国版はやぶさ『オシリス・レックス』が小惑星への着地に成功」 | SciencePortal MIT Tech Review: NASA探査機が小惑星ベンヌとの接触に成功、岩石サンプルを採取 MIT Tech Review: NASA探査機、小惑星のサンプル採取に成功も多過ぎて蓋が閉まらず NASA探査機「オサイリス・レックス」が小惑星に着地、星の欠片の回収に成功 (1) 岩だらけの小惑星「ベンヌ」に着陸せよ！　NASAが挑んだ歴史的な大挑戦 | マイナビニュース   ニュース - アルマ望遠鏡、イオの火山による大気への影響を明らかに - アルマ望遠鏡 NASA to Announce New Science Results About Moon | NASA [2010.11730] Maximum Black Hole mass across Cosmic Time : 重力波 GW190521 は対生成型超新星爆発のせいで作られるはずがないと思われていたブラックホール (~85太陽質量)を含んでいたが、重元素の少ない大質量星で普通に作れるという主張  知財関連  Cloudflare Counters Mass Piracy Allegations in \u0026lsquo;Thothub\u0026rsquo; Lawsuit * TorrentFreak  Linux または Ubuntu に関する話題  Ubuntu Fridge | Ubuntu 20.10 (Groovy Gorilla) released Groovy Gorilla Release Notes - Release - Ubuntu Community Hub Ubuntu 20.10 その12 - Ubuntu 20.10がリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 20.10 その13 - Ubuntu 20.10の新機能と変更点・既知の問題 - kledgeb  Go 言語関連  Goで作るシングルページアプリケーション zetamatta/go-readline-ny: Readline library for golang , used in nyagos Go Validator v10. Validation? Easy Peasy! | by Renaldi | Tunaiku Tech | Oct, 2020 | Medium  その他  手のひらサイズで最大800mm撮影！ キヤノンの望遠鏡型カメラ｢PowerShot ZOOM｣が正式発売決定 | ギズモード・ジャパン /bin/shに慣れた人に贈るバッチファイルの書き方 パッケージマネージャ「scoop」のセットアップ｜scoop / nyagos で始めるコマンドライン生活 CLIでyamlファイルをいい感じに操作できる「yq」を使ってみる HashiCorp「Waypoint」発表。環境やプラットフォームの違いを吸収してコマンド一発でビルド、デプロイ、リリースを実行 － Publickey 広告ブロッカーに影響？ ～ Microsoftが「Edge」で“Manifest V3”対応のテストを開始 - 窓の杜 MIT Tech Review: 世界初、15°C「室温超伝導」達成　夢の新技術へ突破口 AIがエンジニアに脅威をもたらす？\u0026ndash;人間らしい文章を書くAI「GPT-3」 - ZDNet Japan Apacheソフトウェア財団はOpenOfficeの20周年を祝っている場合ではないだろう - YAMDAS現更新履歴 コリイ・ドクトロウが『監視資本主義（の時代）』の問題点を語る - YAMDAS現更新履歴 Characteristics of SARS-CoV-2 and COVID-19 | Nature Reviews Microbiology  ブログ: SARS-CoV-2とCOVID-19の特徴   はてなの記事をZenn形式のMarkdownで保存して管理する 新「Microsoft Edge」と「Google Chrome」がマイナンバーカード方式によるe-Tax送信に対応 - 窓の杜 アトラシアン、今後はクラウドサービスにフォーカス。買い切り型のソフトウェアライセンスは販売終了と発表 － Publickey 凸版印刷・NICT・QunaSys・QunaSys・ISARAが量子セキュアクラウド技術の確立で連携 | TechCrunch Japan Armの買収に伴ってNVIDIAが医学研究に特化したUKスーパーコンピュータの開発を発表 | TechCrunch Japan Which Programming Languages Use the Least Electricity? – The New Stack  ブログ: 最も電力を使わないプログラミング言語は?   新しい「Edge」をアプリに組み込める ～Win32 C/C++向けの「WebView2」が一般公開 - 窓の杜 インテル、NANDメモリー事業を韓国SKハイニックスに売却へ\u0026ndash;約9500億円 - ZDNet Japan GitHubの機能をフルに使って職務経歴書の継続的インテグレーションを実現する editorconfig-checker/editorconfig-checker: A tool to verify that your files are in harmony with your .editorconfig LibreOffice Math Guide 7.0 is Published - The Document Foundation Blog Windows 10でCortanaが起動しないようにする方法 | ライフハッカー［日本版］ マイクロソフト、「Microsoft Edge for Linux」プレビュー版をついにリリース。なぜマイクロソフトがLinux版を開発しているのか？ － Publickey NeovimのためのLua入門 Lua基礎編 MongoDB AtlasがAWS/Azure/GCPにまたがるマルチクラウドクラスタ構成をマネージドサービスでサポート。特定のクラウドが全部落ちても影響しない運用が可能に － Publickey atomエディタにSQLフォーマッターを導入する | cupOF Interests : うーん。 Python が要るのかぁ PDFにすると間違いに気づく理由｜塚本 牧生｜note 「1万時間」は熱意の秤｜塚本 牧生｜note : 「1万時間の法則」なるものにかつての「人月神話」と同じ匂いを感じる .NET Frameworkから.NET Coreへの移植を支援する「Porting Assistant for .NET」を、AWSがオープンソースとして公開 － Publickey PowerShellでGUIDを生成する 電子楽器テルミン誕生100周年を記念してモーグから史上最も美しいモデル「Claravox Centennial」登場 | TechCrunch Japan  "
    },
    {
      "title": "ストップ!! Cortana 君！",
      "section": "remark",
      "description": "こういうのはオプト・インにしてほしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/stop-cortana-kun/",
      "published": "2020-10-25T03:14:44+00:00",
      "update": "2020-10-25T03:20:30+00:00",
      "content": "半年の無職期間に鈍 (なま) りきった身体と心を徐々に再起動中です。\n新しい職場で Windows 10 機を支給されたのだが，いまどき LAN アクセスでピコピコとランプが点滅するマシンらしく，しばらく眺めていたのだが，激しい点滅が止まらんのですよ。\n「何してるのかなぁ」とリソースモニタを眺めてみると SearchUI.exe なるプロセスがエラい勢いで通信してるみたい。 Windows 10 については全く予備知識がなく SearchUI.exe についても知らなかったのだが（最初は malware かと思ったぜw）どうもこれ Cortana とかいう音声入力アシスタントによるプロセスらしい。\nちょろんとググってみたが，バッテリは食うし何もしてなくても激しく通信してくさるので，迷惑に感じてるユーザは多いようだ。 無効化する方法を紹介する記事もあったので，とっとと無効化した。\n Windows 10でCortanaが起動しないようにする方法 | ライフハッカー［日本版］ SearchUI.exeは停止しても大丈夫？停止方法をご紹介！ | Aprico  これで再度リソースモニタを確認してプロセスがないのを確認。 よーし，うむうむ，よーし。\n業務によっては便利なのかもしれないが，基本的に迷惑アプリケーションだよな，これ。 こういうのはオプト・インにしてほしい。\n ストップ!!ひばりくん！コンプリート・エディション　第1巻 江口寿史 (著) フリースタイル 2016-07-12 (Release 2016-07-12) Kindle版 B01ID14CC4 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle で読めるのか。白いワニががが...\nreviewed by Spiegel on 2020-10-25 (powered by PA-APIv5)\n  ごとそん 後藤邑子 (アーティスト), プアゾン (アーティスト) ランティス 2010-01-12 (Release 2010-01-13) CD B002SUPHGM (ASIN), 4540774509713 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  後藤邑子さんの声は反則だと思う。萌え死ぬ。\nreviewed by Spiegel on 2020-10-25 (powered by PA-APIv5)\n "
    },
    {
      "title": "OpenJDK 15.0.1 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "幸いなことに今回は深刻度の高い脆弱性はないようなので，余裕を持ってアップデート作業を行える。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/10/openjdk-15_0_1-is-released/",
      "published": "2020-10-21T10:52:56+00:00",
      "update": "2020-10-21T10:53:48+00:00",
      "content": "定例の Java マイナー・バージョンアップが行われた。\n OpenJDK Vulnerability Advisory: 2020/10/20  幸いなことに今回は深刻度の高い脆弱性はないようだ。 ただし全てのバージョンに影響があるのでご注意を。\n CVE ID Component CVSSv3.1\nScore Affects ...   7 8 11 13 15   CVE-2020-14803 core-libs/java.io 5.3        CVE-2020-14792 hotspot/compiler 4.2        CVE-2020-14782 security-libs/java.security 3.7        CVE-2020-14797 core-libs/java.nio 3.7        CVE-2020-14781 core-libs/javax.naming 3.7        CVE-2020-14779 core-libs/java.io:serialization 3.7        CVE-2020-14796 core-libs/java.io 3.1        CVE-2020-14798 core-libs/java.io 3.1         via OpenJDK Vulnerability Advisory: 2020/10/20  OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk15.0.1/51f4f36ad4ef43e39d0dfdbaf6549e32/9/GPL/openjdk-15.0.1_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-15.0.1_linux-x64_bin.tar.gz $ sudo ln -s jdk-15.0.1 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;15.0.1\u0026#34; 2020-10-20 OpenJDK Runtime Environment (build 15.0.1+9-18) OpenJDK 64-Bit Server VM (build 15.0.1+9-18, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern  うむうむ。 ちゃんと動くな。\n今回は余裕を持ってアップデート作業を行える。 アップデートは計画的に。\nブックマーク  Oracle Critical Patch Update Advisory - October 2020 Oracle Java の脆弱性対策について(CVE-2020-14803等)：IPA 独立行政法人 情報処理推進機構 2020年10月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n   2020-10-12 に PlantUML V1.2020.19 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Steven Levy 原著『暗号化』のデジタル化を希望する！",
      "section": "remark",
      "description": "最悪として原書の Kindle 版を押さえておくのもよい。私は英語不得手だけどな（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/crypto-by-steven-levy/",
      "published": "2020-10-18T02:54:28+00:00",
      "update": "2020-10-18T02:56:40+00:00",
      "content": "やはりできたてのサービスは面白い。 先日 Zenn で面白い記事をみつけた。\n クリプトアナーキスト宣言(Timothy C. May, YAMANE Shinji訳) サイファーパンク宣言(Eric Hughes, YAMANE Shinji訳)  どうもインターネット・アーカイブから発掘されたらしい。\nただ，文脈が切り離された状態でこれだけ読んでもワケワカメだと思うので，古い本ではあるが，スティーブン・レビー原著『暗号化』を是非とも読んでいただきたい。\n 暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n この本は一応ノンフィクション1 に分類されるのだろうが，当時の暗号技術を巡る技術的あるいは政治的状況がとても分かりやすく描写されている。 コンピュータ技術者あるいは科学者を名乗るのなら，この本は（技術史の教材として）必読書と言えるだろう。\n最近また複数の国が暗号通信にバックドアを開けろなどと言ってるみたいなので，なおさら読んでおくべきだ。 公開鍵暗号が発明されてから半世紀弱だが，私達はようやくここまでの成果を手に入れたのである。 これを一時の政治的思惑で手放してはならない。\nでも残念なことに，この本ってば絶版ぽいんだよねぇ。 紙の本は無理でも何とかデジタル化してくれんもんかねぇ。 理想は出版社を替えて達人出版会さんあたりで PDF/EPUB フォーマットで出すの。 自己出版で Kindle 本でも買うよ，私は。\nちなみに原書は CRYPTO: How the Code Rebels Beat the Government \u0026ndash; Saving Privacy in the Digital Age で，これは Kindle 化されているので，最悪としてこれを押さえておくのもよい。 てか，私は押さえている。 英語不得手だけどな（笑）\n  私は「ノンフィクション」というジャンルを「ラノベ未満」と蔑視してるのでこういう言い方になるが，ご容赦を（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
