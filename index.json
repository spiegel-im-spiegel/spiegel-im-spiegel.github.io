{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "公式の構造化 Logger (になるかもしれない) slog パッケージ",
      "section": "golang",
      "description": "多少は期待してもいいかもしれない。公式になるといいな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/maybe-official-structured-logger-package/",
      "published": "2022-11-12T12:26:57+00:00",
      "update": "2022-11-12T12:27:13+00:00",
      "content": "今日の「第4回『Go言語による分散サービス』オンライン読書会」で構造化ログについて話題になったのだが（ちなみに『Go言語による分散サービス』のサンプルコードでは構造化ロガーとして zap を利用している），その中で公式の構造化 logger がプロポーザルとして上がってるという話を聞く。 どうもこれのことらしい。\nproposal: log/slog: structured, leveled logging · Issue #56345 · golang/go · GitHub Proposal: Structured Logging この slog パッケージについて解説記事も見つけたので，これも参考にしながら少し遊んでみようと思う。\n2022年10月末時点で，このパッケージについては\nIn late August 2022, Jonathan Amsterdam of the Go team initiated a discussion with the community about adding structured, log-level support for logging packages to the Go standard library, and formed a consensus proposal.\nJonathan Amsterdam has named the structured logging package slog and plans to put it under log/slog. He also gave the initial implementation of slog under golang.org/x/exp, and the Proposal is officially in review these days. It is not known when it will be officially implemented in the official version of Go.\nvia slog: Golang\u0026#39;s official structured logging package - SoByte という感じらしい。 実際に design doc が公開されレビューが行われているということなら多少は期待してもいいかもしれない。 公式になるといいな。\n試しに簡単なコードを書いてみよう。\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;golang.org/x/exp/slog\u0026#34; ) func main() { slog.SetDefault(slog.New(slog.NewTextHandler(os.Stderr))) slog.Info(\u0026#34;hello world\u0026#34;) } これを実行すると\n$ go run sample1.go time=2022-11-12T19:00:27.704+09:00 level=INFO msg=\u0026#34;hello world\u0026#34; という感じに KEY=VALUE スタイルのログを出力する。 またバックエンド側のハンドラを\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;golang.org/x/exp/slog\u0026#34; ) func main() { slog.SetDefault(slog.New(slog.NewJSONHandler(os.Stderr))) slog.Info(\u0026#34;hello world\u0026#34;) } と差し替えることで\n$ go run sample2.go {\u0026#34;time\u0026#34;:\u0026#34;2022-11-12T19:45:51.816529605+09:00\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;hello world\u0026#34;} と JSON スタイルの出力に切り替えることもできる。 この出力ハンドラは自作することもでき，たとえば zap や zerolog といったサードパーティの logger に接続することもできるらしい。\nvia slog: Golang\u0026#39;s official structured logging package - SoByte もう少し遊んでみよう。 error 値を出力するコードを書いてみる。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/errs\u0026#34; \u0026#34;golang.org/x/exp/slog\u0026#34; ) func checkFileOpen(path string) error { file, err := os.Open(path) if err != nil { return errs.Wrap( err, errs.WithContext(\u0026#34;path\u0026#34;, path), ) } defer file.Close() return nil } func main() { logger := slog.New(slog.NewJSONHandler(os.Stderr)).WithContext(context.TODO()) logger.Enabled(slog.DebugLevel) if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { logger.Error(\u0026#34;open error\u0026#34;, err) } else { logger.Info(\u0026#34;no error\u0026#34;) } } これを実行すると\n$ go run sample3.go {\u0026#34;time\u0026#34;:\u0026#34;2022-11-12T20:32:38.775783665+09:00\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;ERROR\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;open error\u0026#34;,\u0026#34;err\u0026#34;:\u0026#34;open not-exist.txt: no such file or directory\u0026#34;} となる。 まぁ，予想通り。\nでも，拙作の errs パッケージは errs.Error.MarshalJSON() メソッドを持っているので JSON 形式で出力して欲しい。 苦肉の策で\nlogger.Error(\u0026#34;open error\u0026#34;, err) を\nlogger.Error(\u0026#34;open error\u0026#34;, err, slog.Any(\u0026#34;info\u0026#34;, err)) としてみたが，結果は\n$ go run sample4.go {\u0026#34;time\u0026#34;:\u0026#34;2022-11-12T20:54:04.358245853+09:00\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;ERROR\u0026#34;,\u0026#34;msg\u0026#34;:\u0026#34;open error\u0026#34;,\u0026#34;info\u0026#34;:\u0026#34;open not-exist.txt: no such file or directory\u0026#34;,\u0026#34;err\u0026#34;:\u0026#34;open not-exist.txt: no such file or directory\u0026#34;} となる。 ソースコードを見ると fmt.Sprint(v.any) なる記述が見れるので error 型は問答無用で Error() メソッドが出力する文字列に変換されてしまうようだ。 ふむむー。 ひょっとしたら slog.JSONHandler を参考に独自のハンドラを組めばどうにかなるかもしれんが，今回は止めておこう。 ホンマに公式になるかどうか分からんし（笑）\nともかく，公式の構造化 logger が登場すればログ周りのシーンはかなり変わるだろう。 楽しみなことである。\nブックマーク Go のエラーハンドリング 参考図書 Go言語による分散サービス ―信頼性、拡張性、保守性の高いシステムの構築 Travis Jeffery (著), 柴田 芳樹 (翻訳) オライリージャパン 2022-08-03 単行本（ソフトカバー） 4873119979 (ASIN), 9784873119977 (EAN), 4873119979 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元でデジタル版を購入。読書会の課題図書。ハンズオンぽい構成でコードがたくさん書かれているのがよい。\nreviewed by Spiegel on 2022-08-03 (powered by PA-APIv5)\nプログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n"
    },
    {
      "title": "いまさら「安全なメッセージング・アプリ」",
      "section": "remark",
      "description": "私から「Signal を入れよう」と持ちかけてもいぢめないであげてください。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/11/secure-messaging-apps/",
      "published": "2022-11-10T12:09:00+00:00",
      "update": "2022-11-10T12:11:52+00:00",
      "content": "Twitter TL を眺めてたら Mastodon で Direct Messages on Mastodon are NOT encrypted みたいなのが流れてるんだそうで，そもそも Twitter の DM だって安全じゃないし，複数のサーバが分散している Mastodon なら尚更だと思うのだが，世の中の認識はどんな感じなのだろう。\n大昔のカビの生えた記事で申し訳ないが，2014年に EFF が “Secure Messaging Scorecard” という記事を公開していて，この中で「安全なメッセージング・アプリ」の7項目を挙げている。 曰く\nEncrypted in transit? Encrypted so the provider can\u0026rsquo;t read it? Can you verify contacts\u0026rsquo; identities? Are past comms secure if your keys are stolen? Is the code open to independent review? Is security design properly documented? Has there been any recent code audit? である。 当時は私も便乗記事を書いていたが，その後 EFF は記事をいったん引っ込めている。 現在，跡地として残っている記事には\nThis is version 1.0 of our scorecard; it is out of date, and is preserved here for purely historical reasons. Please visit Surveillance Self-Defense if you\u0026rsquo;re looking for recommendations on specific tools to use to ensure your privacy and security while we work on writing an updated guide to secure messaging. Again, you should not use this scorecard to evaluate the security of any of the listed tools, as many of them have been changed since the scorecard was last updated (some for the better, some for the worse). via Secure Messaging Scorecard | Electronic Frontier Foundation と但し書きがされているのでご注意を。 ただ，まぁ，上に挙げた7項目は「安全なメッセージング・アプリ」を実現するための最低限の条件と言っていいだろう。\nTwitter や Mastodon の DM は電子メール・システムに近い。 ユーザ間を直接的に繋ぐ通信ではなく，最低ひとつのサーバにメッセージが保持され，サービス・プロバイダ側の「なにか」がそのメッセージを見ることは（技術的には）可能である。 簡単に言うと，これらは「はがき」と同程度に「検閲可能」なのだ。\n安全を確保するためのやり方は色々ある。 たとえば，電子メールでは S/MIME や PGP/MIME といった仕組みでメッセージ本文を暗号化できる。 今は廃れているかもしれないが，かつて Jabber とよばれた XMPP 方式のインスタント・メッセージング・サービスは OTR (Off-the-Recording) を組み込むことで，上述の7項目を満たすことに成功した。\n個人的には Signal を推す。 上の “Secure Messaging Scorecard” 跡地で紹介されている “Surveillance Self-Defense” でもメッセージング・アプリとして Signal と OTR と WhatsApp が紹介されている。\nとはいうものの，8年前の記事でも書いたが，結局メッセージング・アプリで一番大事なのは「相手がいること」なのよね。 一応 Signal は入れてるんだよ。 誰も遊んでくれないけど（笑） 仕事では Microsoft Teams を使ってるし，広島の友人との連絡は Facebook Messenger だし，家族との連絡は電話かキャリアメールだ。 まぁ LINE は今だに毛嫌いしてるので，知り合いから「LINE 入れないの？」と言われても頑なに断ってるけど。\nというわけで，私から「Signal を入れよう」と持ちかけてもいぢめないであげてください。\nブックマーク メッセージングアプリSignalが暗号化で妥協しない理由を新プレジデントが語る - YAMDAS現更新履歴 : ちなみにこの記事で Signal の送金機能の話が出ているが，ベータ機能として組み込まれている。私は有効にしてないけど\nAndroid 版 Signal が SMS 対応を取りやめる話\n参考文献 超監視社会 ブルース・シュナイアー (著), 池村 千秋 (翻訳) 草思社 2016-12-13 (Release 2017-02-03) Kindle版 B01MZGVHOA (ASIN) 実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。\nreviewed by Spiegel on 2019-03-23 (powered by PA-APIv5)\n暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n"
    },
    {
      "title": "広告メディアとしての Twitter",
      "section": "remark",
      "description": "一言で言うなら「月8ドルの『税金』も払えないようなやつは Twitter 市民じゃない」ってことだよね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/11/twitter-as-the-advertising-media/",
      "published": "2022-11-07T23:12:44+00:00",
      "update": "2022-11-07T23:16:09+00:00",
      "content": "私はしばらく前から Twitter を「広告メディア」と認識している。 故に個人同士の双方向コミュニケーション手段として使えると思っていない。 Twitter の唯一の不満はフォローしてもいないアカウントがプロモーション・ツイートをばら撒くことで，それ以外は「まぁ，そんなもんだろう」と割り切っている。\nさて，その Twitter のオーナーが変わって大変なようだ。 情報が錯綜して私もきっちり騙された（笑）\nTwitter本社前で段ボール箱抱え「解雇されたエンジニア」を装った二人組、大手メディアを騙しインタビューを受ける | テクノエッジ TechnoEdge 一方で日本法人についてはかなりの割合でレイオフがおこなれたらしい。 特に面白いと思ったのはこれ。\n確かにTwitterのニュースフィードは更新されてない気がする。私たちメディアは自社記事のモーメントを作成→Twitterキュレーションチームに連絡→審査の上ピックされたりされなかったり、という手順を踏んできたのだけど、この作業はしばらくは意味を成さないのかな？ https://t.co/tIQGO6Rbdc\n\u0026mdash; 竹下郁子 (@i_tkst) November 6, 2022 キュレーション\u0026hellip; とっくに古語になってると思ってたぜ。 こんな DX 以前のお役所みたいなことやってれば「合理化」も宜なるかなって感じなのだが，実際のところは知らない。 そもそも日本は随分前に「キュレーション」は懲りたんじゃないのか。\n「キュレーション」じゃなく，はっきり「注目の搾取」と言えよ！ あと面白いと思ったのはこの辺か。\nIf you don’t pay the $8 your tweets will be suppressed by an algorithm. Not making this shit up he said it to a room of investors yesterday \u0026amp; claimed this would solve hate speech. “You’ll have to scroll really far to see unverified users” pic.twitter.com/gSzXtzFYtC\n\u0026mdash; Aaron Stewart-Ahn (@somebadideas) November 5, 2022 一言で言うなら「月8ドルの『税金』も払えないようなやつは Twitter 市民じゃない」ってことだよね。 日本円なら円安で年14K円って感じ？\n以前に\nこれで「為政者 Facebook」「税金（＝広告料）を払う一級市民（＝広告主）」「タダ乗り二級市民」という構造ができた。二級市民は税金の代わりに自ら（の情報）を搾取され「商材」にされる。 SNS を巡る愛憎より と書いたが，まさに Twitter はその通りに邁進しているわけだ。\nTwitter が（私にとって）使いものにならなくなってもどうってことはないが（使わないだけだし），今更 Mastodon も面倒くさいしなぁ。 どうなるやら。\n"
    },
    {
      "title": "ブロックテックパーカを買うた",
      "section": "remark",
      "description": "くたびれたオッサンにはベージュが似合う（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/11/blocktech-parka/",
      "published": "2022-11-06T08:50:25+00:00",
      "update": "2022-11-06T09:36:26+00:00",
      "content": "BLOCKTECH PARKA 本格的に寒くなる前に自転車移動時のアウターウェアを準備しようと先日ユニクロに行ったのだが，目当てのものが見当たらず（探しかたが悪い？），結局ネットで発注した。 ブロックテックパーカ（BLOCKTECH PARKA）というらしい。\nユニクロ公式 | ブロックテックパーカ（3Dカット） 防水・防風・撥水・透湿 が特徴で，小雨程度であれば簡易レインジャケットとしても使えるようだ。 ちなみに防寒機能はない。\nユニクロ ブロックテックパーカ（2022年購入モデル）を雨と雪の中で着てみた結果… - I AM A DOG 特に冬場の自転車で嬉しいのが防風\u0026amp;透湿機能。 この手のものはゴアテックス（GORE-TEX）が定番なんだろうけど，ブロックテックパーカはお値段がひと桁安いのよ。\nというわけで届きました。 ヤマト便で時間指定可。\nユニクロ ブロックテックパーカ | Flickr とりあえず，薄い！ 軽い！ 色は日没後の視認性が上がる（多分？）ようにベージュを選んでみた。 くたびれたオッサンにはベージュが似合う（笑）\nユニクロ ブロックテックパーカ | Flickr サイズはゆったり目のLサイズ。 縫い目にびっしり防水加工が。 表記は左から防水，防風，撥水，透湿，伸縮。 さらに立体縫製によって，特に肩周りが動かし易いらしい。\nブロックテックパーカ 手首も万全？ | Flickr 上のように袖口をマジックテープで留めて簡単に塞ぐことができる。 グローブと組み合わせれば万全？ しかもこの状態で腕をぐるぐる回しても袖が上がったりしない。 素晴らしい！\nパーカ羽織ってお散歩してみる ブロックテックパーカを羽織って近所をチャリでお散歩してみた。\nホンマに風を通さないんだな。 それでいて殆ど蒸れない。 （後で詳しく書くが）今回はそこそこ漕いだんだけど，じんわり汗を書いたかなぁ，って程度。\n私は，レインウェアの内側が汗で蒸れてびしょ濡れになるのが嫌で雨の日でもそれを着ることはないのだが，ちょっと雨の日の徒歩通勤が楽しみになってきた。\nあと，前傾姿勢でも袖口や裾（特に背中側）が全く捲れ上がらないし突っ張ってる感じもしない。 素晴らしい！ これは使える！\nというわけで，チャリ通勤や街乗りにガチのサイクルウェアはなぁ\u0026hellip; という方はこれで充分なんじゃないかな。 あとは真冬の松江でどこまで耐えられるか，だな（笑）\n【おまけ】 Cadence 突然であるが，自転車用語で cadence1 という場合はクランクの回転速度を指すそうな。 単位は rpm。 たとえば cadence 90 なら1分間に90回転のペースでペダルを漕いでるわけだ。\nスピード競技では瞬間的に cadence 170 あたりまで上がったりするそうだが，長距離ライドでは，スピードではなく cadence を一定に保つようペース配分するのがコツらしい。 これの理想値がロードバイクの場合は 90 前後，クロスバイクの場合は 80 前後なんだそうだ。\nで，スポーツサイクルのアクセサリにリアルタイムで cadence を測定するためのセンサやサイクル・コンピュータがある。 これを見ながらペースを調整したりギアチェンジのタイミングを見極めたりするわけだ。\nでも，カジュアルに自転車に乗る人にサイコンとか過剰装備だよね。 と思ってたら，どっかのサイトでスマホのメトロノーム・アプリを使って簡易的に cadence を測る方法が紹介されていた。\nというわけで，早速メトロノーム・アプリをインストール。\nSmart Metronome \u0026amp; Tuner - Apps on Google Play こんな感じにセットアップしてみた。\n“2beat” に設定することで左脚と右脚で交互に「ワン・ツー・ワン・ツー」とリズムをとることができる。 画面を見る必要はないので，スマホに骨伝導ヘッドセットを繋いで音を聞きながら自転車を漕いでみればいい（自転車に乗りながらイヤフォン等で耳を塞ぐのは危ないから止めたほうがいい。徒歩でも止めたほうがいいけど）。\n前節の「お散歩」をしながらメトロノームのテンポを変えて試してみたのだが，私の場合 cadence 55〜60 くらいが精一杯のようだ。 これってママチャリやシティ・サイクルと同程度だな orz\nというわけで，当面は cadence 60 を維持するところから始めたいと思います。 それから徐々に cadence を上げていく感じで。\nこんだけ漕ぎまくって汗も結構かいてる筈なのに殆ど蒸れないなんて，ブロックテックパーカってマジ凄いっスわ。 というお話でした。\nブックマーク 自転車のケイデンスとは？実はあまり知られていない真実が…「スポーツサイクル初心者こそケイデンス」 | トリップサイクル - 横須賀・金沢区・逗子・葉山の自転車店 参考 AfterShokz Aeropex 骨伝導ワイヤレスヘッドホン 防水bluetooth5.0 コズミックブラック SHENZHEN VOXTECH CO.,LTD エレクトロニクス B07RRQ59JR (ASIN), 0811071032209 (EAN), 811071032209 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Amazon Prime Day にそそのかされて買った。反省はしない。値段並みの音質はある，と思う。耳が自由って素晴らしい。\nreviewed by Spiegel on 2021-06-24 (powered by PA-APIv5)\nCadence: ダンスや行進の歩調・足拍子，詩などのリズム・律動，音楽の終止形・カデンツ（「英辞郎」より）。日本で自転車用語で Cadence と言う場合は，そのまま英語読みで「ケイデンス」でいいらしい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "自転車損害保険",
      "section": "remark",
      "description": "「そろそろちゃんとやろう」第二弾",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/11/accident-insurance-for-bike/",
      "published": "2022-11-06T04:41:12+00:00",
      "update": "2022-11-06T08:50:29+00:00",
      "content": "「そろそろちゃんとやろう」第二弾（笑）\n私が契約しているキャリアは au なのだが「au 自転車サポート」なるものの案内が来てた。\nau自転車サポート | サービス・機能 | au 私は盗難保険と事故・故障時のロードサービスについては自転車購入時に加入済みで，すでに2年分を払い込んでいる。 「au 自転車サポート」はそれらと一部機能が被るものの「付帯保険」で個人賠償責任補償が付いているのは魅力ではある。 保険料の払い込みは通信費と一緒に落ちて月額550円（税込）。 保険の適用が同居家族まで含まれるのもよさげ？\n自転車事故で（被害者はもちろん）加害者側になるリスク（＝生起確率×影響度）は馬鹿にできない。 これはママチャリでも他のシティバイクでも同じ。 私は若い頃に割と自転車事故に遭っていて，自動車と衝突してふっ飛ばされたこともあるし（自転車は大破したが奇跡的に捻挫のみで済んだ），出会い頭に歩行者を轢きそうになったこともある（急ブレーキに失敗して自転車ごと前転した。歩行者に当たらなくてよかった）。\n自転車損害保険への加入義務は自治体によって対応が異なるようだ。\n自転車損害賠償責任保険等への加入促進（2022-04-01 時点）より 中国5県では，鳥取県は努力義務が課せられているが島根県を含む他の4県は努力義務もないらしい。 ただし，私が住んでいる松江市は条例で努力義務が課せられている。\n自転車利用者は、定期的な点検整備及び事故に備えた損害保険への加入に努めなければならない。 松江市自転車安全利用条例 第5条 3より というわけで，ここ数日どうしようかと考えていたが，必要経費と割り切って「au 自転車サポート」に入ることにした。 サービス適用開始（申込受付日の翌日）以降，ポータルサイトで入会証明書（PDF）をダウンロードできる。 忘れずにダウンロードしておくこと。\nまぁ，自転車損保は「事後への備え」「転ばぬ先の杖」と言える。 日本には「自転車安全利用五則」ってのがあるそうで，曰く\n車道が原則、左側を通行\n歩道は例外、歩行者を優先 交差点では信号と一時停止を守って、安全確認 夜間はライトを点灯 飲酒運転は禁止 ヘルメットを着用 自転車の安全利用の促進について - 内閣府より ってことらしい。 事故リスクの高いルートは避けるなどの対策も必要かもしれない。 あと（自転車に限らないけど）急ブレーキの練習はしておいたほうがいいよ。\n自転車を安全に乗ろう！街中に潜む危険箇所をご紹介！ - YouTube 初心者が最初に覚えるべき4つのテクニック - YouTube そういえば，広島に居たときは「公道では自分以外みんな気が狂ってると思え」とか言われてたような気もする。 これも一種のセキュリティ・リスク管理だよ（笑）\n安全に楽しく遊びましょう。\nブックマーク 松江市:暮らしのガイド:自転車安全利用の推進 おすすめの自転車保険ランキング2022年 オリコン顧客満足度調査｜調査企業20社の比較・クチコミ・評判 自転車保険の加入義務化にも対応！家族で入るとお得なau自転車サポート（KDDI公式） 自転車の灯火についての決まりを全都道府県調べてみた – CyclingEX CLASSIC 【パーツ】あなたのライトは、明るさ基準値クリアしていますか？！ : この記事の800ルーメンの前照灯を購入した。スマートモードが便利 "
    },
    {
      "title": "2022-11-06 のブックマーク",
      "section": "bookmarks",
      "description": "「「“有料”パブリックドメイン」という国家所有の永久不滅の著作権」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/11/06-bookmarks/",
      "published": "2022-11-06T00:44:22+00:00",
      "update": "2022-11-06T00:47:41+00:00",
      "content": "リリース情報 Release v0.78 (2022-10-31-b) · ranvis/putty · GitHub Release gopls/v0.10.0 · golang/tools · GitHub Release gopls/v0.10.1 · golang/tools · GitHub Release 9.2.0 · mermaid-js/mermaid · GitHub Release October 2022 · microsoft/vscode · GitHub セキュリティ＆プライバシー関連 これからの５年 – ガメ・オベールの日本語練習帳 ver.7 Apple clarifies security update policy: Only the latest OSes are fully patched | Ars Technica Apple Only Commits to Patching Latest OS Version - Schneier on Security ランサムウエア起因による大阪急性期・総合医療センターのシステム障害についてまとめてみた - piyolog OpenSSL の脆弱性対策について(CVE-2022-3602、CVE-2022-3786)：IPA 独立行政法人 情報処理推進機構 OpenSSLの脆弱性（CVE-2022-3602、CVE-2022-3786）に関する注意喚起 脆弱性を修正した「OpenSSL 3.0.7」が予告通り公開 ～ただし、深刻度評価は引き下げ - 窓の杜 Dropboxがフィッシング攻撃の被害に\u0026ndash;GitHubに保存していたコードの一部が窃取 - ZDNet Japan OpenSSLの脆弱性（CVE-2022-3602、CVE-2022-3786）に関する注意喚起 知財関連 「“有料”パブリックドメイン」という国家所有の永久不滅の著作権 | p2ptk[.]org 人気ハイブランドが美術館と1400万円の賠償巡る法廷闘争へ　名画「ヴィーナスの誕生」を服に無断コピー、使用料請求は無視 - ねとらぼ Linux または Ubuntu に関する話題 RHEL9互換の国産Linux OS「MIRACLE LINUX 9」が無償公開。2032年までパッケージアップデートやセキュリティパッチを無償提供 － Publickey Azure や Windows に関する話題 go-sqlcmd ユーティリティ (プレビュー) - SQL Server | Microsoft Learn Go 言語関連 cobraでヘルプをグループ化する機能が追加されたので試してみる - Qiita 「基礎から学ぶ TinyGoの組込み開発」を書きました - sago35の日記 天文関連 APOD: 2022 November 2 - A Partial Eclipse of an Active Sun その他 SQLiteの正式なWebAssembly版「SQLite3 WASM/JS」が登場 － Publickey AWS App RunnerがPHP/Go/.Net/Rubyのマネージドランタイムをサポート、コードを簡単にWebアプリ化してスケーラブルに実行可能 － Publickey イーロン・マスクがTwitterをめちゃくちゃにすることを恐れてMastodonやDiscordに移行する人が続々登場 - GIGAZINE The Perl Foundationが「The Perl and Raku Foundation」の名称使用を発表 － Publickey "
    },
    {
      "title": "BOM を除去する io.ReadCloser Decorator を作ってみた",
      "section": "golang",
      "description": "こうやって混沌としたコードを整理していくんですねぇ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/decorator-for-stripping-bom/",
      "published": "2022-11-05T04:56:19+00:00",
      "update": "2022-11-05T04:59:24+00:00",
      "content": "先日 Zenn で UTF-8 BOM (Byte Order Mark) を除去する Decorator を紹介したのだが\nDecorator Pattern で BOM を除去する 最後の\npackage main import ( \u0026#34;encoding/csv\u0026#34; \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spkg/bom\u0026#34; ) func main() { file, err := os.Open(\u0026#34;./sample3.csv\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer file.Close() r := csv.NewReader(bom.NewReader(file)) for { row, err := r.Read() if err != nil { if !errors.Is(err, io.EOF) { fmt.Fprintln(os.Stderr, err) return } break } fmt.Println(row) } } は os.File 型， bom.NewReader() 関数が返す io.Reader 抽象型とその実体である bufio.Reader，そして csv.Reader 型の3つを意識する必要がある。 もう少し詳しく言うと Close() メソッドを持っているのはベースの os.File 型のみなのでファイルを閉じるためには os.File 型の変数を保持っておく必要があるのだ。 これは上手いやり方ではないなぁ，というのが記事を書いた後の感想だった。\nそこで github.com/spkg/bom パッケージを参考に，自前で github.com/goark/utf8bom パッケージを作ってみた。 このパッケージの Reader 型は\ntype Reader struct { *bufio.Reader closer func() error } という構成になっていて，埋め込みの bufio.Reader フィールド以外に closer を持っている。 初期化時に\nfunc Strip(r io.Reader) *Reader { closer := func() error { return nil } if c, ok := r.(io.Closer); ok { closer = c.Close } br := \u0026amp;Reader{Reader: bufio.NewReader(r), closer: closer} b, err := br.Peek(3) if err != nil { return br } if bytes.Equal(b, []byte{0xef, 0xbb, 0xbf}) { // compare BOM _, _ = br.Discard(3) } return br } てな感じに closer フィールドにメソッド値1 をセットすることで utf8bom.Reader.Close() メソッド\nfunc (r *Reader) Close() error { return r.closer() } 起動時にベースの Close() メソッドへ処理を委譲できるようにした。 こういうときに変数の生存期間とか考えなくていい Go は便利だよねぇ。\nこれを使って最初のサンプルコードを少し書き換えてみる。\npackage main import ( \u0026#34;encoding/csv\u0026#34; \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/utf8bom\u0026#34; ) func openCsvFile(path string) (io.ReadCloser, error) { file, err := os.Open(\u0026#34;./sample3.csv\u0026#34;) if err != nil { return nil, err } return utf8bom.Strip(file), nil } func main() { file, err := openCsvFile(\u0026#34;./sample3.csv\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer file.Close() r := csv.NewReader(file) for { row, err := r.Read() if err != nil { if !errors.Is(err, io.EOF) { fmt.Fprintln(os.Stderr, err) return } break } fmt.Println(row) } } これで CSV ファイル・オープン時の仔細を掃き出して io.ReadCloser 型で扱えるようになった。 ここまで来れば csv.NewReader() 関数もどうにかして openCsvFile() 関数に掃き出したいよね。\nちうわけで，拙作の github.com/goark/csvdata パッケージも導入する。 こんな感じ。\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/csvdata\u0026#34; \u0026#34;github.com/goark/utf8bom\u0026#34; ) func openCsvFile(path string) (*csvdata.Rows, error) { file, err := os.Open(\u0026#34;./sample3.csv\u0026#34;) if err != nil { return nil, err } return csvdata.NewRows(csvdata.New(utf8bom.Strip(file)), true), nil } func main() { file, err := openCsvFile(\u0026#34;./sample3.csv\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer file.Close() for { if err := file.Next(); err != nil { if !errors.Is(err, io.EOF) { fmt.Fprintln(os.Stderr, err) return } break } fmt.Println(file.Row()) } } これでメイン側ではデータの行・列構造のみ注視すればよくなった2。\nちなみに github.com/goark/csvdata パッケージは Excel ファイルにも対応していて，同じ csvdata.Rows 型に落とし込んで扱えるようになっている。 つまり上のサンプルコードの openCsvFile() 関数の中身をまるっと Excel 用に置き換えることができるのだ。\nこうやって混沌としたコードを整理していくんですねぇ。\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元のデジタル版を購入。 Go で躓きやすい点を解説していくのが最初の動機らしい。「◯◯するには」を調べる際にこの本を調べるといいかも。\nreviewed by Spiegel on 2022-10-26 (powered by PA-APIv5)\nClean Architecture　達人に学ぶソフトウェアの構造と設計 (アスキードワンゴ) Ｒｏｂｅｒｔ Ｃ．Ｍａｒｔｉｎ (著), 角 征典 (著), 高木 正弘 (著) ドワンゴ 2018-08-01 (Release 2018-08-01) Kindle版 B07FSBHS2V (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 実務に即効性のある技術解説書というわけではないが，ものの「考え方」を示す本としてはよく出来ている。ソフトウェア技術史の読み物としても面白い。\nreviewed by Spiegel on 2021-04-03 (powered by PA-APIv5)\n「メソッド値」については拙文「#golang メソッド式とメソッド値」を参考にどうぞ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCSV データを扱う便利パッケージとしては github.com/gocarina/gocsv が有名なのだが，あれって Unmarshal 時に CSV データ全体を構造体の配列にしてしまうのが気に食わないんだよなぁ。 CSV データが百万レコードあったら百万個の配列を作ってしまう。まぁ，巨大データを扱う前提ではないということなんだろうけど。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "OpenJDK のセキュリティ・アップデート（2022-10）",
      "section": "release",
      "description": "影響を受けるバージョンは 19, 17.0.4, 15.0.8, 13.0.12, 11.0.16, 8u342, 7u351 およびそれ以前。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/10/openjdks-has-been-updated/",
      "published": "2022-11-04T04:56:55+00:00",
      "update": "2022-11-04T04:59:23+00:00",
      "content": "サボり気味ですみません 🙇\n定例の Java マイナー・バージョンアップが行われた。\nOpenJDK Vulnerability Advisory: 2022/10/18 CVE ID ベースで6個の脆弱性修正がある。 影響を受けるバージョンは 19, 17.0.4, 15.0.8, 13.0.12, 11.0.16, 8u342, 7u351 およびそれ以前。\nCVE ID Component CVSSv3.1\nScore Affects ... 7 8 11 13 15 17 19 CVE-2022-21626 security-libs/\njava.security 5.3 CVE-2022-21618 security-libs/\norg.ietf.jgss 5.3 CVE-2022-21628 core-libs/\njava.net 5.3 CVE-2022-39399 core-libs/\njava.net 3.7 CVE-2022-21619 security-libs/\njava.security 3.7 CVE-2022-21624 core-libs/\njavax.naming 3.7 via OpenJDK Vulnerability Advisory: 2022/10/18 OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。 以下は完全手動でのインストール（笑）\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://download.java.net/java/GA/jdk19.0.1/afdd2e245b014143b62ccb916125e3ce/10/GPL/openjdk-19.0.1_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-19.0.1_linux-x64_bin.tar.gz $ sudo ln -s jdk-19.0.1 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;19.0.1\u0026#34; 2022-10-18 OpenJDK Runtime Environment (build 19.0.1+10-21) OpenJDK 64-Bit Server VM (build 19.0.1+10-21, mixed mode, sharing) LTS 版 Java バイナリが欲しいなら Adoptium で取得できる。\n私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern よーし，うむうむ，よーし。\nブックマーク 2022年10月Oracle製品のクリティカルパッチアップデートに関する注意喚起 参考図書 Spring Data JPAプログラミング入門 溝口賢司 (著) 秀和システム 2017-08-03 (Release 2018-04-23) Kindle版 B07CKHR8C1 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; JPA のお勉強用に購入。紙のほうはプレミアが付いてるっぽいが Kindle で買えるよ。固定レイアウトだからブラウザの Kindle Cloud Reader で読めるし。真面目に基本を押さえて書いていて分かりやすい。\nreviewed by Spiegel on 2021-08-26 (powered by PA-APIv5)\nEffective Java 第3版 Joshua Bloch (著), 柴田 芳樹 (翻訳) 丸善出版 2018-10-30 単行本（ソフトカバー） 4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。\nreviewed by Spiegel on 2021-03-17 (powered by PA-APIv5)\nSpring Boot 2 入門: 基礎から実演まで 原田 けいと (著), 竹田 甘地 (著), Robert Segawa (著) 2020-05-22 (Release 2020-05-22) Kindle版 B0893LQ5KY (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Spring Boot を勉強することになって急遽買った本。めっさ分かりやすかった。 PDF 版が欲しいくらい（笑） Spring Boot 2.7 対応にアップデートされていた。素敵！\nreviewed by Spiegel on 2022-08-14 (powered by PA-APIv5)\n2021-10-23 に PlantUML V1.2022.12 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "GnuPG 2.3.8 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "1件の脆弱性が修正されている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/11/gnupg-2_3_8-is-released/",
      "published": "2022-11-04T01:12:53+00:00",
      "update": "2022-11-04T01:13:12+00:00",
      "content": "毎度遅まきながらで申し訳ないが GnuPG 2.3.8 がリリースされている。\n[Announce] [CVE-2022-3515] GnuPG / Libksba Security Advisory [Announce] GnuPG 2.3.8 released 今回は1件の脆弱性修正を含んでいる。\nCVE-2022-3515 A severe bug has been found in [Libksba] , the library used by GnuPG for parsing the ASN.1 structures as used by S/MIME. The bug affects all versions of [Libksba] before 1.6.2 and may be used for remote code execution. via [CVE-2022-3515] GnuPG / Libksba Security Advisory The major user of Libksba is /gpgsm/, the S/MIME cousin of /gpg/. There it is used to parse all kind of input data, in particular signed or encrypted data in files or in mails. Feeding a user with malicious data can thus be easily achieved.\nA second user of Libksba is /dirmngr/, which is responsible for loading and parsing Certificate Revocation Lists (CRLs) and for verifying certificates used by TLS (i.e. https connections). Mounting an attack is a bit more complex but can anyway be easily done using a rogue web server to serve a Web Key Directory, certificates, or CRLs.\nAn exploit is not yet publicly known but very straightforward to create for experienced crooks.\nvia [CVE-2022-3515] GnuPG / Libksba Security Advisory 今回の脆弱性について GnuPG 側は以下のように見積もっている。\nCVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H 深刻度: 重要 (Score: 8.1) 基本評価基準 評価値 攻撃元区分 ネットワーク 攻撃条件の複雑さ 高 必要な特権レベル 不要 ユーザ関与レベル 不要 スコープ 変更なし 機密性への影響 高 完全性への影響 高 可用性への影響 高 GnuPG 関連パッケージ GnuPG 関連の各パッケージのバージョンは以下の通り（数字は大体のビルド順）。\n# パッケージ名 バージョン 公開日 更新 1 Libgpg-error 1.45 2022-10-07 2 Libgcrypt 1.8.9 (LTS) 2022-02-07 Libgcrypt 1.10.1 2022-03-28 3 Libassuan 2.5.5 2021-03-22 4 Libksba 1.6.2 2021-10-07 5 nPth 1.6 2018-07-16 6 ntbTLS 0.3.1 2022-04-07 7 GnuPG 2.2.40 (LTS) 2022-10-10 GnuPG 2.3.8 2022-10-13 現在 GnuPG には2.2系と2.3系があり1，2.2系は LTS 版に位置付けられている。 2.3系では AEAD (Authenticated Encryption with Associated Data) 等 RFC 4880bis で検討されている機能が実装されているので，最新機能を試したいのであればこちらを入れるとよいだろう。 なお2.2系は少なくとも2024年末まではサポートが続けられる予定である。 通常運用であれば，当面は2.2系でも問題ない（ECC も対応してるよ）。\nアップデートは計画的に。\nブックマーク OpenPGP の実装 参考図書 暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n厳密には1.4系もあるが，これは legacy 版と位置付けられており，よほどのバグか脆弱性がない限りは更新されない。もし今だに1.4系（あるいは既にサポートされていない2.0/2.1系）を使っているのなら2.2系以降にアップグレードすることを強くお勧めする。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Go 1.19.3 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は1件の脆弱性修正を含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/11/go-1_19_3-is-released/",
      "published": "2022-11-04T00:40:28+00:00",
      "update": "2022-11-04T00:41:21+00:00",
      "content": "予告通り 2022-11-01 (現地時間) に Go 1.19.3 がリリースされた。\n[security] Go 1.19.3 and Go 1.18.8 are released 今回は1件の脆弱性修正を含んでいる。\ngo1.19.3 (released 2022-11-01) includes security fixes to the os/exec and syscall packages, as well as bug fixes to the compiler and the runtime. See the Go 1.19.3 milestone on our issue tracker for details. via Release History - The Go Programming Language CVE-2022-41716 syscall, os/exec: unsanitized NUL in environment variables On Windows, syscall.StartProcess and os/exec.Cmd did not properly check for invalid environment variable values. A malicious environment variable value could exploit this behavior to set a value for a different environment variable. For example, the environment variable string \u0026quot;A=B\\x00C=D\u0026quot; set the variables \u0026quot;A=B\u0026quot; and \u0026quot;C=D\u0026quot;. via Go 1.19.3 and Go 1.18.8 are released （以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.19.3.linux-amd64.tar.gz）を取ってきてインストールすることを推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.19.3.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.19.3.linux-amd64.tar.gz $ sudo mv go go1.19.3 $ sudo ln -s go1.19.3 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.19.3 linux/amd64 Windows は Scoop 経由で OK\nアップデートは計画的に。\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n"
    }
  ]
}
