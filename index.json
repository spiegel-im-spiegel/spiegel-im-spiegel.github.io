{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "PA-API v5 クライアント・パッケージ v0.5.0 をリリースした",
      "section": "release",
      "description": "コメントとかドキュメントはまだまだ整理中なので，長い目で見てやってください。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/pa-api-v5-package-v0_5_0-is-released/",
      "published": "2019-10-20T11:29:51+00:00",
      "update": "2019-10-20T11:30:14+00:00",
      "content": " Go 言語用 PA-API v5 クライアント・パッケージ spiegel-im-spiegel/pa-api v0.5.0 をリリースした。\n Release v0.5.0 · spiegel-im-spiegel/pa-api · GitHub  以前いただいた pull request のコードがなかなかよかったので paapi5/query サブパッケージを全面的に書き直した。\nもともと paapi5/query サブパッケージは paapi5.Query インタフェースの実装サンプル・コード程度にしか考えてなかったのだが， PA-API の GetItems および SearchItems オペレーションに限れば，そのまま使えそうな感じになってしまった。 PR を送っていただいた方にはホンマに感謝である。\nコメントとかドキュメントはまだまだ整理中なので，長い目で見てやってください。 あっ PR はいつでも歓迎です。\nブックマーク  PA-API v5 への移行 Go 言語用 PA-API v5 クライアント・パッケージ  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Ubuntu 19.10 にアップグレードする",
      "section": "release",
      "description": "特にトラブルはなし。でも，やっぱり Ubuntu はセキュリティ・ツール周りの管理が弱いよなぁ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/upgrade-ubuntu-19_10/",
      "published": "2019-10-20T09:49:35+00:00",
      "update": "2019-10-20T09:49:58+00:00",
      "content": " 短期サポート版である Ubuntu 19.10 がリリースされた。 2020年7月までサポートが有効である。\n Ubuntu 19.10 (Eoan Ermine) released EoanErmine/ReleaseNotes - Ubuntu Wiki Ubuntu 19.10 その27 - Ubuntu 19.10がリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 19.10 その28 - Ubuntu 19.10の新機能と変更点・既知の問題 - kledgeb  旧バージョンから 19.10 へのアップグレードはリリースノートを参考にするとよい。 手元の環境では特に問題なくアップグレードできた。\nアップグレード時にサードパーアティの APT リポジトリ（git や ATOM など）が外れるので，必要ならアップグレード時に戻して更新すること。\n短期サポート版で半年ごとにアップグレードするのは若干面倒だが，ディストリビューションのアップグレードのタイミングでないと更新されないアプリケーションもあるようなので（完全に自前で管理できるなら別だが）きちんとアップグレードに追従しておくほうが長い目で見てお得である。\n個別のアプリケーションについて Lollypop 音楽プレイヤー Lollypop の PPA は今のところ Ubuntu 19.10 に対応していない。 無理矢理リポジトリを繋いでも apt update でエラーになるだけなので注意すること。 しばらくは様子見かな。\n 音楽プレイヤー Lollypop を試す  GnuPG および Libgcrypt GnuPG および Libgcrypt はアップデートされなかった。 はるか古いバージョンのままである。\n$ gpg --version gpg (GnuPG) 2.2.12 libgcrypt 1.8.4 Copyright (C) 2018 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 どうも Ubuntu は GnuPG をまともにメンテできないようだ。 電子署名 spam の件もあり，特に Libgcrypt はセキュリティ・アップデートがあったばかりなんだけど。 こりゃあ，本格的に何か考えないとな。\n GnuPG 2.2.17 リリース： 公開鍵サーバ・アクセスに関する過激な変更あり Libgcrypt 1.8.5 がリリース【セキュリティ・アップデート】  OpenSSH および OpenSSL アップグレード直後の OpenSSH および OpenSSL のバージョンは以下のとおりだった。\n$ ssh -V OpenSSH_8.0p1 Ubuntu-6build1, OpenSSL 1.1.1c 28 May 2019 OpenSSH も 8.1 でセキュリティ・アップデートがあったばかりだし OpenSSL 1.1.1 もセキュリティ・アップデートがあったばかりだが，ちゃんと対応しているのかね。\nThunderbird Thunderbird は 68 ベースになっていた。 これは嬉しい。\nThunderbird に関しては Enigmail が2020年夏に本体に組み込まれるという話もあるので，きちんと追従していただきたいところである。\nLibreOffice LibreOffice は 6.3 ベースになった。 もっとも私は既に APT での管理を止めているのでどうでもいいけど。\nやっぱり... Ubuntu はセキュリティ・ツール周りの管理が弱いよなぁ。 脆弱性を放置するとか「保守的」では済まないと思うのだが...\nブックマーク  Ubuntu アプリケーションにおけるセキュリティ・アップデート一覧  参考図書  私はどのようにしてLinuxカーネルを学んだかゆたかさんの技術書 平田豊 (著), MBビジネス研究班 (著), MBビジネス研究班 (編集) まんがびと 2019-07-26 (Release 2019-07-26) Kindle版 B07VJKJY7M (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  読み物として面白かった。ペーペーの新人の頃を思い出しながら読んでたり。\nreviewed by Spiegel on 2019-10-16 (powered by PA-APIv5)\n "
    },
    {
      "title": "gpgpdump v0.6.4 をリリースした",
      "section": "release",
      "description": "主目的は Go 1.13.3 でリコンパイルすることだったり。というわけで，よろしければ更新しておいてください。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/gpgpdump-v0_6_4-is-released/",
      "published": "2019-10-18T14:33:08+00:00",
      "update": "2019-10-18T14:33:33+00:00",
      "content": " OpenPGP パケットの内容を可視化する gpgpdump の v0.6.4 をリリースした。\n Release v0.6.4 · spiegel-im-spiegel/gpgpdump · GitHub  といっても，今回は機能的な変更・修正はほとんどなくて（spiegel-im-spiegel/errs パッケージを更新したくらい），主目的は Go 1.13.3 でリコンパイルすることだったり。\n実は\n openpgp-wg / openpgp-samples · GitLab  というリポジトリができていて，これを使って検証とテストを行おうとしたのだが，テストするまでもなく全く問題なく表示されたという（笑）\nというわけで，よろしければ更新しておいてください。\nブックマーク  Go 1.13.2 および Go 1.13.3 のリリース【セキュリティ・アップデート】  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2018-12-16 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 1.13.2 および Go 1.13.3 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回のはちょーっとヤバめかも。あと Go 1.13.3 のリリースを追記した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/go-1_13_2-is-released/",
      "published": "2019-10-17T20:00:51+00:00",
      "update": "2019-10-18T10:28:51+00:00",
      "content": " Go 1.13.2 がリリースされた。\n [security] Go 1.13.2 and Go 1.12.11 are released - Google Group  今回のはちょーっとヤバめかも。\n CVE-2019-17596  HTTPS サーバを構成している場合は要注意。\nInvalid DSA public keys can cause a panic in dsa.Verify. In particular, using crypto/x509.Verify on a crafted X.509 certificate chain can lead to a panic, even if the certificates don’t chain to a trusted root. The chain can be delivered via a crypto/tls connection to a client, or to a server that accepts and verifies client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected. via Go 1.13.2 and Go 1.12.11 are released  他にも OpenPGP, OTR, SSH あたりも影響を受けるそうな。\nMoreover, an application might crash invoking crypto/x509.(*CertificateRequest).CheckSignature on an X.509 certificate request, parsing a golang.org/x/crypto/openpgp Entity, or during a golang.org/x/crypto/otr conversation. Finally, a golang.org/x/crypto/ssh client can panic due to a malformed host key, while a server could panic if either PublicKeyCallback accepts a malformed public key, or if IsUserAuthority accepts a certificate with a malformed public key. via Go 1.13.2 and Go 1.12.11 are released  更に更に slice に関して\nThe Go 1.13.2 release also includes a fix to the compiler that prevents improper access to negative slice indexes in rare cases. Affected code, in which the compiler can prove that the index is zero or negative, would have resulted in a panic in Go 1.12, but could have led to arbitrary memory read and writes in Go 1.13 and Go 1.13.1. via Go 1.13.2 and Go 1.12.11 are released  とあり， Go 1.13.x でバイナリを提供している場合はもれなくリコンパイルする必要があるかもねぇ。\n【追記】 Go 1.13.3 のリリース まさか5時間足らずでアップデートするとは思わざりき。 別途記事を起こすのはアレなので，この記事に追記する。 フットワークの軽い言語だとポジティブに考えることにしよう（笑）\nというわけで Go 1.13.3 がリリースされた。\n Go 1.13.3 and Go 1.12.12 are released - Google Group  go1.13.3 (released 2019/10/17) includes fixes to the go command, the toolchain, the runtime, syscall, net, net/http, and crypto/ecdsa packages. See the Go 1.13.3 milestone on our issue tracker for details. via Release History - The Go Programming Language  1.13.2 のアップデートがまだの人はまとめてやってしまおう。 私のように既にアップデートしてしまった人は，ごくろーさん（泣）\nUbuntu の APT は相変わらずサポートから外れた 1.10.x しか対応していないのでダウンロードページからバイナリ（go1.13.3.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.13.3.linux-amd64.tar.gz $ sudo mv go go1.13.3 $ sudo ln -s go1.13.3 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.13.3 linux/amd64 アップデートは計画的に。\nブックマーク  crypto/dsa: invalid public key causes panic in dsa.Verify · Issue #34960 · golang/go · GitHub cmd/compile: access to negative slice indices improperly permitted · Issue #34802 · golang/go · GitHub  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Sudo コマンドの脆弱性に関する覚え書き",
      "section": "remark",
      "description": "いやぁ，この手のうっかりバグは他人事じゃないよね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/10/vulnerability-of-sudo/",
      "published": "2019-10-16T08:21:23+00:00",
      "update": "2019-10-16T08:21:44+00:00",
      "content": " 今回の sudo の脆弱性は Ubuntu が迅速に対応してくれたおかげであまり気にしてなかったんだけど，以下の記事を見て\n Big Sky :: sudo の特権昇格バグはなぜ起こったのか  ちょっと面白かったので覚え書きとして残しておくことにした1。 いやぁ，この手のうっかりバグは他人事じゃないよね。 上の記事の最後の\n  境界値チェックを行わないと、死ぬ  via sudo の特権昇格バグはなぜ起こったのか  は本当に教訓として心に留めておかないと。 って，もう私は職業エンジニアじゃないけど。\nCVE ID は CVE-2019-14287。 各ディストリビュータの評価は以下の通り。\n Red Hat Customer Portal  CVSSv3 Vector: CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H CVSSv3 Base Score: 7.8 CVSSv3 Severity: High      基本評価基準 評価値     攻撃元区分 ローカル   攻撃条件の複雑さ 低   必要な特権レベル 低   ユーザ関与レベル 不要   スコープ 変更なし   機密性への影響 高   完全性への影響 高   可用性への影響 高     CVE-2019-14287 | SUSE  CVSSv3 Vector: CVSS:3.0/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H CVSSv3 Base Score: 7.0 CVSSv3 Severity: High      基本評価基準 評価値     攻撃元区分 ローカル   攻撃条件の複雑さ 高   必要な特権レベル 低   ユーザ関与レベル 不要   スコープ 変更なし   機密性への影響 高   完全性への影響 高   可用性への影響 高    深刻度（Severity）が高いので早めのアップデートを。 アップデートは計画的に。\nブックマーク  Linuxの「sudo」コマンドにroot権限奪取の脆弱性。ユーザーID処理のバグで制限無効化 - Engadget 日本版 Sudoコマンドの脆弱性報告--root権限でコマンド実行可能に - ZDNet Japan USN-4154-1: Sudo vulnerability | Ubuntu security notices SUSE-SU-2019:2656-1 | SUSE\n spiegel-im-spiegel/go-cvss: Common Vulnerability Scoring System (CVSS) Version 3 : 久しぶりに使ったけど，1年近くメンテしてないな\n  参考図書  私はどのようにしてLinuxカーネルを学んだかゆたかさんの技術書 平田豊 (著), MBビジネス研究班 (著), MBビジネス研究班 (編集) まんがびと 2019-07-26 (Release 2019-07-26) Kindle版 B07VJKJY7M (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  読み物として面白かった。ペーペーの新人の頃を思い出しながら読んでたり。\nreviewed by Spiegel on 2019-10-16 (powered by PA-APIv5)\n  念の為に言うと 4294967295 という数字は16進数なら 0xffffffff である。10進数だとピンとこないよね。 [return]   "
    },
    {
      "title": "Java 13.0.1 がリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "予定通り Java 13 のマイナー・バージョンアップが行われた。脆弱性の修正がてんこ盛りである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/java-13_0_1-is-released/",
      "published": "2019-10-16T00:39:08+00:00",
      "update": "2019-10-16T00:40:01+00:00",
      "content": " 予定通り Java 13 のマイナー・バージョンアップが行われた。 緊急性が高いものはないようだが，脆弱性の修正がてんこ盛りである。\n OpenJDK Vulnerability Advisory: 2019/10/15  以下に一覧を挙げておく。 なお Java 9, 10 および 12 は既にサポート外なので注意すること。\n  CVE ID Component CVSSv3\nScore Affects ...   7 8 11 13   CVE-2019-2949 security-libs/javax.net.ssl 6.8  \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2989 core-libs/java.net 6.8 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2958 core-libs/java.lang 5.9 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2975 core-libs/javax.script 4.8  \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2977 hotspot/compiler 4.8   \u0026#8226; \u0026#8226;   CVE-2019-2999 tools/javadoc(tool) 4.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2981 xml/jaxp 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2973 xml/jaxp 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2983 client-libs/2d 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2988 client-libs/2d 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2978 core-libs/java.net 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2964 core-libs/java.util.regex 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2992 client-libs/2d 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2962 client-libs/2d 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2987 client-libs/2d 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2894 security-libs/javax.net.ssl 3.7 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;   CVE-2019-2933 core-libs 3.1 \u0026#8226; \u0026#8226; \u0026#8226; \u0026#8226;    via OpenJDK Vulnerability Advisory: 2019/10/15  OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk13.0.1/cec27d702aa74d5a8630c65ae61e4305/9/GPL/openjdk-13.0.1_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-13.0.1_linux-x64_bin.tar.gz $ sudo ln -s jdk-13.0.1 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;13.0.1\u0026#34; 2019-10-15 OpenJDK Runtime Environment (build 13.0.1+9) OpenJDK 64-Bit Server VM (build 13.0.1+9, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\n    via Go 言語で Factory Method Pattern を構成できるか  うむうむ。 ちゃんと動くな。\nブックマーク  Oracle Critical Patch Update - October 2019\n Java 環境のリリースとサポートに関する覚え書き\n 結局 OpenJDK をインストールし直すことにした\n  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n  2019-09-22 に PlantUML Version 1.2019.11 がリリースされている。 [return]   "
    },
    {
      "title": "PA-API v5 クライアント・パッケージ v0.4.0 をリリースした",
      "section": "release",
      "description": "暇にちょっとずつコードもコメント・ドキュメントも整理していく予定である。なので長い目で見てやってください。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/10/pa-api-v5-package-v0_4_0-is-released/",
      "published": "2019-10-15T12:52:44+00:00",
      "update": "2019-10-20T11:30:14+00:00",
      "content": " いや， Go 言語用の PA-API v5 クライアント・パッケージなんか私以外に需要はないと思ってたのよ。 したら pull request 貰っちゃって大慌て（笑）\n貰った PR を受け入れた後，コメント・ドキュメントの整理と若干の機能追加をした v0.4.0 をリリースした。\n Release v0.4.0 · spiegel-im-spiegel/pa-api · GitHub Release v0.4.1 · spiegel-im-spiegel/pa-api · GitHub Release v0.4.2 · spiegel-im-spiegel/pa-api · GitHub  まずは，アイテム検索用の query 構造体を作ってもらっちゃった。 これを使って，こんな感じにアイテムの検索ができる。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; paapi5 \u0026#34;github.com/spiegel-im-spiegel/pa-api\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/pa-api/entity\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/pa-api/query\u0026#34; ) func main() { //Create client  client := paapi5.New( paapi5.WithMarketplace(paapi5.LocaleJapan), ).CreateClient( \u0026#34;mytag-20\u0026#34;, //Amazon associate tag  \u0026#34;AKIAIOSFODNN7EXAMPLE\u0026#34;, //access key for PA-API  \u0026#34;1234567890\u0026#34;, //secret key for PA-API  paapi5.WithContext(context.Background()), paapi5.WithHttpClient(http.DefaultClient), ) //Make query  q := query.NewSearchItems( client.Marketplace(), client.PartnerTag(), client.PartnerType(), ).Search(\u0026#34;数学ガール\u0026#34;, query.Keywords)  //Requet and response  body, err := client.Request(q) if err != nil { fmt.Printf(\u0026#34;%+v\\n\u0026#34;, err) return } //io.Copy(os.Stdout, bytes.NewReader(body))  //Decode JSON  res, err := entity.DecodeResponse(body) if err != nil { fmt.Printf(\u0026#34;%+v\\n\u0026#34;, err) return } fmt.Println(res.String()) } あっ，もちろんアクセス・キー等は自分のを使ってね。\nサーバ側の情報を格納する paapi5.Server インスタンスを生成しているのが以下の部分だが\npaapi5.New( paapi5.WithMarketplace(paapi5.LocaleJapan), ) 引数の関数オプションの仕様を変更した。 以下のシンボルをマーケットプレイスとしてセットできる。\n//Marketplace is enumeration of locale information type Marketplace int const ( LocaleUnknown Marketplace = iota //Unknown local  LocaleAustralia //Australia  LocaleBrazil //Brazil  LocaleCanada //Canada  LocaleFrance //France  LocaleGermany //Germany  LocaleIndia //India  LocaleItaly //Italy  LocaleJapan //Japan  LocaleMexico //Mexico  LocaleSpain //Spain  LocaleTurkey //Turkey  LocaleUnitedArabEmirates //United Arab Emirates  LocaleUnitedKingdom //United Kingdom  LocaleUnitedStates //United States ) これらのシンボルからマーケットプレイス名，サービスサーバ名，リージョン，言語の情報を取得できる。 既定値は paapi5.LocaleUnitedStates とした。\n他の人が使うとか勘定に入れてなかったので相当にやっつけコードだったが，余暇にちょっとずつコードもコメント・ドキュメントも整理していく予定である。 なので長い目で見てやってください。 あっ pull request はいつでも歓迎です。\nブックマーク  PA-API v5 への移行 Go 言語用 PA-API v5 クライアント・パッケージ  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "【改訂版】文字列連結はどれが速い？",
      "section": "golang",
      "description": "つまり []byte 配列への append() と strings.Builder への追記と strings.Join() は実質的に同じ処理と言える。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/join-strings-2/",
      "published": "2019-10-13T08:15:36+00:00",
      "update": "2019-10-15T18:09:38+00:00",
      "content": " 今回も小ネタでお送りしております。\n2015年に「文字列連結はどれが速い？」という記事を書いた。 あれから文字連結に関してどう変わったのか。 特に Go 1.10 で strings.Builder が追加されているので，その辺も含めて再検証してみる。\n今回検証するコードは以下の通り。\npackage join import ( \u0026#34;bytes\u0026#34; \u0026#34;strings\u0026#34; ) var sz8k = 8 * 1024 func JoinStringPlus(ss []string) { var str string for _, s := range ss { str += s + \u0026#34;\\n\u0026#34; } } func JoinStringJoin(ss []string) { strings.Join(ss, \u0026#34;\\n\u0026#34;) } func JoinStringByteAppend(ss []string) { b := []byte{} for _, s := range ss { b = append(b, s...) b = append(b, \u0026#34;\\n\u0026#34;...) } } func JoinStringByteAppend8K(ss []string) { b := make([]byte, 0, sz8k) for _, s := range ss { b = append(b, s...) b = append(b, \u0026#34;\\n\u0026#34;...) } } func JoinStringBuilder(ss []string) { b := \u0026amp;strings.Builder{} for _, s := range ss { b.WriteString(s) b.WriteString(\u0026#34;\\n\u0026#34;) } } func JoinStringBuilder8K(ss []string) { b := \u0026amp;strings.Builder{} b.Grow(sz8k) for _, s := range ss { b.WriteString(s) b.WriteString(\u0026#34;\\n\u0026#34;) } } func JoinStringBuffer(ss []string) { b := \u0026amp;bytes.Buffer{} for _, s := range ss { b.WriteString(s) b.WriteString(\u0026#34;\\n\u0026#34;) } } func JoinStringBuffer8K(ss []string) { b := bytes.NewBuffer(make([]byte, 0, sz8k)) for _, s := range ss { b.WriteString(s) b.WriteString(\u0026#34;\\n\u0026#34;) } } 各関数の内容は以下の通り。\n   関数名 内容     JoinStringPlus + 演算子で連結する   JoinStringJoin strings.Join 関数で連結する   JoinStringByteAppend []byte 配列に追記する   JoinStringByteAppend8K []byte 配列に追記する（8KB アロケーション）   JoinStringBuilder strings.Builder に追記する   JoinStringBuilder8K strings.Builder に追記する（8KB アロケーション）   JoinStringBuffer bytes.Buffer に追記する   JoinStringBuffer8K bytes.Buffer に追記する（8KB アロケーション）    使うメソッドによって出力する型が異なるが（string or []byte），今回は無視することにした1。\nベンチマーク用のコードは以下の通り。\npackage join import ( \u0026#34;bufio\u0026#34; \u0026#34;os\u0026#34; \u0026#34;testing\u0026#34; ) func ReadAll(path string) []string { file, err := os.Open(path) //maybe file path  if err != nil { return nil } defer file.Close() scanner := bufio.NewScanner(file) list := []string{} for scanner.Scan() { list = append(list, scanner.Text()) } if err := scanner.Err(); err != nil { return nil } return list } var content = ReadAll(\u0026#34;CollisionsForHashFunctions.txt\u0026#34;) func BenchmarkJoinStringPlus(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringPlus(content) } } func BenchmarkJoinStringJoin(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringJoin(content) } } func BenchmarkJoinStringByteAppend(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringByteAppend(content) } } func BenchmarkJoinStringByteAppend8K(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringByteAppend8K(content) } } func BenchmarkJoinStringBuilder(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringBuilder(content) } } func BenchmarkJoinStringBuilder8K(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringBuilder8K(content) } } func BenchmarkJoinStringBuffer(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringBuffer(content) } } func BenchmarkJoinStringBuffer8K(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { JoinStringBuffer8K(content) } } 入力テキストは前回と同じ CollisionsForHashFunctions.txt を使用した。 8KB ほどのサイズがある。 つまりコピー先バッファに 8KB の容量があれば追加のアロケーションは発生しないことになる。\nでは，さっそく実行してみる。\n$ go test -bench JoinString -benchmem goos: linux goarch: amd64 pkg: join BenchmarkJoinStringPlus-4 19484 65256 ns/op 272160 B/op 69 allocs/op BenchmarkJoinStringJoin-4 371649 3087 ns/op 8192 B/op 1 allocs/op BenchmarkJoinStringByteAppend-4 151417 8339 ns/op 35376 B/op 12 allocs/op BenchmarkJoinStringByteAppend8K-4 502942 2544 ns/op 8192 B/op 1 allocs/op BenchmarkJoinStringBuilder-4 130408 8434 ns/op 35376 B/op 12 allocs/op BenchmarkJoinStringBuilder8K-4 418900 2781 ns/op 8192 B/op 1 allocs/op BenchmarkJoinStringBuffer-4 133052 9545 ns/op 32240 B/op 8 allocs/op BenchmarkJoinStringBuffer8K-4 351681 3526 ns/op 8192 B/op 1 allocs/op PASS ok join 12.695s 結果を表にまとめておこう。\n   関数名 実行時間 Alloc サイズ Alloc 回数     JoinStringPlus 65,256 ns 2,702,160 bytes 69   JoinStringJoin 3,087 ns 8,192 bytes 1   JoinStringByteAppend 8,339 ns 35,376 bytes 12   JoinStringByteAppend8K 2,544 ns 8192 bytes 1   JoinStringBuilder 8,434 ns 35,376 bytes 12   JoinStringBuilder8K 2,781 ns 8,192 bytes 1   JoinStringBuffer 9,545 ns 32,240 bytes 8   JoinStringBuffer8K 3,526 ns 8192 bytes 1    まず strings.Join() 関数を使った連結がめっさ速くなってアロケーション回数も1回のみになっていることにビックリした。 ソースコードを見てみたら，やっぱり strings.Join() 関数内部で strings.Builder を使っていた。\n// Join concatenates the elements of a to create a single string. The separator string // sep is placed between elements in the resulting string. func Join(a []string, sep string) string { switch len(a) { case 0: return \u0026#34;\u0026#34; case 1: return a[0] } n := len(sep) * (len(a) - 1) for i := 0; i \u0026lt; len(a); i++ { n += len(a[i]) } var b Builder b.Grow(n) b.WriteString(a[0]) for _, s := range a[1:] { b.WriteString(sep) b.WriteString(s) } return b.String() } ちなみに strings.Builder への追記処理は以下のようになっている。\n// WriteString appends the contents of s to b\u0026#39;s buffer. // It returns the length of s and a nil error. func (b *Builder) WriteString(s string) (int, error) { b.copyCheck() b.buf = append(b.buf, s...) return len(s), nil } つまり []byte 配列への append() と strings.Builder への追記と strings.Join() は実質的に同じ処理で，それぞれの前処理分だけ差が出ているということになる。\n今回の検証では\n やっぱり + 演算子による連結はダメダメ2 よほどの最適化が要求されない限り []byte 配列への append() は strings.Builder へ代替可能3 strings.Join() 関数のパフォーマンスは十分なので気軽に使ってよい 文字列連結に限るなら，もはや bytes.Buffer は有利とは言えない  といったところだろうか。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n  string 型は不変オブジェクトなので，通常は []byte 型との相互変換の際にメモリ・アロケーションとデータ・コピーが発生する。ちなみに strings.Builder の String() メソッドでは unsafe パッケージを使って無理やりキャスティングしている。 [return] リテラル文字列同士の連結はコンパイラが処理するので + 演算子で無問題。 [return] 内部で append() 関数を使っていることから分かる通り strings.Builder のインスタンスはコピーして使えないので注意が必要である（インスタンスのポインタを渡せばOK）。当然ながら goroutine-safe ではないので複数の goroutine 間で共有できない。 [return]   "
    },
    {
      "title": "2019-10-12 のブックマーク",
      "section": "bookmarks",
      "description": "「Wi-Fi Hotspot Tracking」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/10/12-bookmarks/",
      "published": "2019-10-12T11:27:01+00:00",
      "update": "2019-10-12T11:28:03+00:00",
      "content": " リリース情報  PostgreSQL 12が正式リリース。Bツリー周りの改善による性能向上、JSONパスによる抽出可能など － Publickey Thunderbird, Enigmail and OpenPGP | The Mozilla Thunderbird Blog OpenSSH 8.1 was released on 2019-10-09.  バベルのインターネット  アドビ、ベネズエラの全アカウントを無効にすると発表。米政府による対ベネズエラ制裁に従い － Publickey  セキュリティ＆プライバシー関連  Edward Snowden's Memoirs - Schneier on Security MIT Tech Review: 「トラベル・ルール」導入で暗号通貨は生まれ変わるか？ Developer of Checkm8 explains why iDevice jailbreak exploit is a game changer | Ars Technica  ‘Unpatchable’ iOS exploit may bring permanent iPhone jailbreak - 9to5Mac New Unpatchable iPhone Exploit Allows Jailbreaking - Schneier on Security  Microsoft 製品の脆弱性対策について(2019年10月) ：IPA 独立行政法人 情報処理推進機構  2019年10月マイクロソフトセキュリティ更新プログラムに関する注意喚起  Germany shuts down illegal data center in former NATO bunker  Illegal Data Center Hidden in Former NATO Bunker - Schneier on Security  利用省庁ゼロで廃止された政府共通プラットフォームのセキュリティ機能についてまとめてみた - piyolog オフィスの防犯とサイバーセキュリティの隙間が狙われる危険性 - ZDNet Japan Twitterがターゲット広告に2段階認証の電話番号とメールアドレスが使われていたと認める | TechCrunch Japan : ダメすぎる MIT Tech Review: 米司法長官、フェイスブックのE2E暗号化に「待った」 「Thunderbird」がメール暗号化・デジタル署名「OpenPGP」を標準サポートへ - 窓の杜 Cheating at Professional Poker - Schneier on Security 米国土安全保障省が脆弱システムの利用者開示をISPに義務づけへ、法改正を準備中 | TechCrunch Japan How 'free' Wi-Fi hotspots can track your location even when you aren't connected | PCWorld  Wi-Fi Hotspot Tracking - Schneier on Security  COMpfun successor Reductor infects files on the fly to compromise TLS traffic | Securelist  New Reductor Nation-State Malware Compromises TLS - Schneier on Security  セキュリティの世界からファーウェイを排除すれば、「安全性の低下」という“代償”が待ち受ける？｜WIRED.jp Oracle Critical Patch Update Pre-Release Announcement - October 2019 Researchers Say They Uncovered Uzbekistan Hacking Operations Due to Spectacularly Bad OPSEC - VICE Details on Uzbekistan Government Malware: SandCat - Schneier on Security アップルはSiriの音声録音のグレーディングのオプトインと履歴の削除をベータ化 | TechCrunch Japan  天文関連  MIT Tech Review: NASA、探査機インサイトが観測した火星の地震の「音」を公開 NASAが月面の3DデータをCGアーティストとクリエイター向けに公開 | TechCrunch Japan 誕生したばかりの星々を取り巻く木星80個分の「プレッツェル」 - sorae 宇宙へのポータルサイト すばる望遠鏡が土星の衛星を新たに20天体「発見」 | 国立天文台(NAOJ) 2019年ノーベル物理学賞を宇宙物理学の3氏が受賞 | 国立天文台(NAOJ)  2019年ノーベル物理学賞は，物理的宇宙論における数々の理論的発見に対してジェームズ・ピーブルズ教授に、 また太陽と似た恒星の周りを公転する太陽系外の惑星の発見に対してミシェル・マイヨール教授とディディエ・ケロー教授の3名が受賞した。 | お知らせ一覧 | 一般社団法人　日本物理学会 MIT Tech Review: ノーベル物理学賞、系外惑星の発見などで3氏が受賞 ノーベル物理学賞受賞「太陽系外惑星の発見」をもたらした発想の転換(秋山文野) - 個人 - Yahoo!ニュース  MIT Tech Review: 謎の「第9惑星」の正体は原始ブラックホールか？ 英天文学者が提唱 Not long ago, the center of the Milky Way exploded  ブログ: さほど遠くない昔、天の川の中心が爆発していた  次期太陽観測衛星「Solar-C_EUVST」 数値シミュレーションにより地球型惑星の形成を再現　水星・金星・地球・火星の軌道、質量と水の起源の解明への第一歩｜学校法人近畿大学のニュースリリース 新着情報: NASAの観測ロケットを用いた微小重力実験に成功～国際共同研究により宇宙ダストの生成を再現～（低温科学研究所　准教授　木村勇気） 東京大学木曽観測所トモエゴゼンによる地球接近小惑星2019 SU10の発見について  知財関連  Popular IPTV Smarters App Removed From Google Play Following Complaint - TorrentFreak イーロン・マスクが「NASAはSpaceXの知財権を自由に配布OK」と発言 | TechCrunch Japan 機械学習に使うデータセットの著作権について - Qiita  Linux または Ubuntu に関する話題  Ubuntu 19.10 その25 - deb版Chromiumの提供終了とSnap版Chromiumへの移行・将来的に既存のUbuntuでも移行 - kledgeb  その他  サイエンスクリップ「小さなロボットが命を救うか 分子ロボットがもつ無限の可能性」| SciencePortal HTCの新しいCEOはスマートフォンの革新を怠っていたことを認めた | TechCrunch Japan 2019年10月9日ニュース「リチウムイオン電池開発の旭化成・吉野彰氏ら3人にノーベル化学賞」 | SciencePortal 一般化テンパズルを解くコードをC++で書いてみた - Qiita MIT Tech Review: ディープフェイクは「ほぼポルノ」、フェイクニュースとは無関係 Big Sky :: Microsoft Word を Markdown に変換するコマンド「docx2md」を作った。 : 朗報！ 商業衛星の寿命を伸ばす初の宇宙船の打ち上げに成功 | TechCrunch Japan プログラミング問題「4クイーン方陣」 - Qiita マイクロソフトのナデラCEOが「信用を裏切ってはならない」と政府関係者に講演 | TechCrunch Japan サルでもわかるカリー化とそのメリット - Qiita : マジでよく分かる（笑） ダイソンが電気自動車の開発を断念、全固体バッテリー製造に方向転換 | TechCrunch Japan MS傘下GitHubのCEOが米移民当局との契約更新について説明--従業員は抗議 - ZDNet Japan 祝・ノーベル化学賞受賞--リチウムイオン電池関連を見直す？ - ZDNet Japan hugoでaliasを設定する - Qiita ESLint 7.0.0 の開発が始まる - Qiita Dark Traffic  ブログ: ダーク・トラフィック   "
    },
    {
      "title": "Baldanders.info 開設15周年記念に骨伝導スピーカーを買うたった！",
      "section": "remark",
      "description": "いやぁ，音楽聞いてるのに耳が自由って素晴らしいですね。こりゃあ，イヤフォンには戻れんわ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/10/15th-anniversary-of-baldandersinfo/",
      "published": "2019-10-10T12:29:18+00:00",
      "update": "2019-10-10T12:38:28+00:00",
      "content": " 2019年10月で Baldanders.info サイト開設15周年になる。\n特にネタが思い浮かばなかったので，記念品として骨伝導スピーカーを買うたった。 「自分にご褒美」というやつである（笑）\n 買うたった  実は，通勤のお供として4年前に買ったスポーツタイプのヘッドセットを愛用していたのだが\n 今のイヤフォンがボロボロなので新しいのを購入。今回はスポーツタイプを買ってみた。安かったし  流石にバッテリーがヘタり始めていて，買い替えを検討していたのだ。\n最初は au がくれたクーポン券で買った無線イヤフォンを使っていたのだが，耳栓タイプは駄目。 周囲の音が聞き取りにくくて通勤に使えないのよ。 上のヘッドセットはオープンタイプで適度に周囲の音も聞こえてよかったんだけどなぁ。\nちうわけで何かないかとネットを漁ってたら「ネックスピーカー」と「骨伝導スピーカー」が目に入った。\nネックスピーカーはかなり魅力的だったんだけど，公共交通機関で移動している身としては音漏れが気になって躊躇するところだ（どなたか使い心地を教えてください）。\n骨伝導スピーカーはまだお値段高めなんじゃないかと思っていたが，どうもピンキリみたいで，3千円くらいのものから2万円くらいまで結構幅があるようだ。 今回は Amazon 価格で5千円弱の廉価版を選んだ。 こういうのって消耗品だしね（バッテリーがヘタれれば試合終了）。\n使い心地はめちゃくちゃいい！ スピーカー部分をこめかみに当てるので窮屈になるかと思ってたが，全くそんなこともない。 いやぁ，音楽聞いてるのに耳が自由って素晴らしいですね。 こりゃあ，イヤフォンには戻れんわ。\nというわけで，確かに「自分にご褒美」いただきました。\nそうそう。 これからも「書きたくないときには書かない」「他人の評価など気にしない」というスタンスで飽きるまでは続けていく所存であります。\nブックマーク  Baldanders.info 正式オープン Baldanders.info 10周年だった！ 20周年記念！  参考  【2019最新版 Bluetooth5.0】Bluetooth イヤホン 骨伝導 ヘッドホン 高音質 自動ペアリング スポーツ IP56防水 耳が疲れない 超軽量 完全ワイヤレス イヤホン マイク内蔵 Siri対応 ノイズキャンセル ハンズフリー通話 ブルートゥース ヘッドホン iPhone\u0026Android適用 (ブラック) Bearoam エレクトロニクス B07QJB7R13 (ASIN), 0694090550660 (EAN), 694090550660 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  廉価版だし音質には目を瞑るとして（特に低音がねー），骨伝導スピーカー最高！ もうイヤフォンには戻れない。\nreviewed by Spiegel on 2019-10-10 (powered by PA-APIv5)\n  TEMPEST 石原夏織 (メインアーティスト) ポニーキャニオン 2019-07-17 (Release 2019-07-17) MP3 ダウンロード B07TVGXD2P (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  アニメ版「魔王様、リトライ！」のOP曲。\nreviewed by Spiegel on 2019-10-10 (powered by PA-APIv5)\n "
    }
  ]
}
