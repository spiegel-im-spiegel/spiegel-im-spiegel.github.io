{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "2023-02-06 のブックマーク",
      "section": "bookmarks",
      "description": "「「ゆみみみっくす」発売30周年メモリアルページ」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2023/02/06-bookmarks/",
      "published": "2023-02-06T03:49:49+00:00",
      "update": "2023-02-06T03:49:56+00:00",
      "content": "リリース情報 「Thunderbird 102.7.0」が公開 ～手動更新のみ、「Microsoft 365 Business」ユーザーには非推奨【1月24日追記】 - 窓の杜 「Microsoft 365」認証問題を解決した「Thunderbird 102.7.1」が公開 ～自動更新が再開 - 窓の杜 Release v3.4.0 · golangci/golangci-lint-action · GitHub Release v0.3.0 · hymkor/uncozip · GitHub Release Windows Terminal v1.16.1023 (10231 and 10232) · microsoft/terminal · GitHub Release Windows Terminal v1.16.1026 (1.16.10261.0 and 1.16.10262.0) · microsoft/terminal · GitHub Release 1.36.0 · tailscale/tailscale · GitHub Release v0.6.0 · hymkor/make-scoop-manifest · GitHub The Document Foundation releases LibreOffice 7.4.5 Community - The Document Foundation Blog 「LibreOffice 7.4.5 Community」が公開 ～フリーのオフィス統合環境 - 窓の杜 Release v1.2.0 · mmcdole/gofeed · GitHub Release v1.2023.1 · plantuml/plantuml · GitHub Release v1.51.0 · golangci/golangci-lint · GitHub Release v1.51.1 · golangci/golangci-lint · GitHub The Document Foundation announces LibreOffice 7.5 Community - The Document Foundation Blog 「Firefox 109.0.1」がリリースチャネルに ～レンダリングの問題などを修正 - 窓の杜 Release January 2023 · microsoft/vscode · GitHub セキュリティ＆プライバシー関連 インスタの誕生日投稿からパスワード推測された不正ログイン事案についてまとめてみた - piyolog Unlocking security updates for transitive dependencies with npm | The GitHub Blog システム管理をしていた元社員による社内データ削除事案についてまとめてみた - piyolog CVE-2023-24068 \u0026amp;\u0026amp; CVE-2023-24069: Abusing Signal Desktop Client for fun and for Espionage 政府も支持する強固なセキュリティ、分散型メッセージ基盤「Matrix」が目指していること | WIRED.jp 最高裁はなぜ「nifty.com」のメールアドレスを使っていたのか？　話を聞いた　「現在見直しを検討中」 - ITmedia NEWS Visual Studio Codeの拡張機能、サイバー攻撃の新たな餌食に | TECH+（テックプラス） リモート管理ソフトウェアを悪用するフィッシング詐欺、NSAとCISAが注意喚起 - ZDNET Japan Action needed for GitHub Desktop and Atom users | The GitHub Blog GitHubがハッキングされる、デスクトップアプリの更新が必要 - GIGAZINE トラフィック監視ツール「GlassWire」がアカウント不要に、上位機能の多くが無料開放 - 窓の杜 MS、「OAuth」を悪用した不正アプリによる「同意フィッシング」に警鐘 - ZDNET Japan 知財関連 なぜ著作権は「検閲」に悪用されるのか | p2ptk[.]org The 403-page Dungeons \u0026amp; Dragons game system is now licensed under Creative Commons • TechCrunch フェアユースの拡大は“バグ”ではない、“機能”だ | p2ptk[.]org クリエイターを搾取しているのは誰か？：著作権強化とテック規制とクリエイティブ労働 | p2ptk[.]org Microsoft, GitHub, and OpenAI ask court to throw out AI copyright lawsuit - The Verge 機能不全の著作権：“まともな”収入すら得られない世界中の作家たち | p2ptk[.]org 著作権保護期間を延長する「愚かな国」が後を絶たないのはなぜか | p2ptk[.]org Stupid Patent of the Month: Digital Verification Systems Patents E-Signatures | Electronic Frontier Foundation ジェネレーティブAIが創る音楽に慌てふためく著作権の世界（もう遅い） | p2ptk[.]org Linux または Ubuntu に関する話題 Linuxカーネル内にWebAssemblyランタイムを実装し、ネイティブバイナリよりも高速に実行可能にする「Kernel-WASM」登場 － Publickey 「Wine 8.0」がリリース ～LinuxでWindowsのGUIアプリを直接実行できる互換レイヤー - 窓の杜 有料サブスク「Ubuntu Pro」がベータ版を卒業、個人用途は5台まで無料に - 窓の杜 Azure や Windows に関する話題 OpenAI and Microsoft Extend Partnership 「Windows 11 バージョン 22H2」への自動更新が開始 ～21H2を長く利用しているデバイスから徐々に - 窓の杜 マイクロソフト、AzureやMicrosoft 365などに影響した先週の大規模障害の原因報告。WAN内の全ルータが再計算状態に突入し、パケット転送が不可に － Publickey Go 言語関連 golang標準ライブラリから学ぶzipファイルの構造 GitHub - ddosify/ddosify: High-performance load testing tool, written in Golang. For distributed and Geo-targeted load testing: Ddosify Cloud - https://ddosify.com 🚀 ライブラリとして公開したGoのinterfaceを変更するのは難しいと言う話 - 焼売飯店 【GitHub Actions】Go で 自作 Actions を 作ってみる GitHub - workouse/sitemap-checker: a tool for validate xml sitemap and sitemap index files for broken links 天文関連 スペースシャトル「コロンビア」空中分解事故から20年　NASAが2023年の「追悼の日」を迎える | sorae 宇宙へのポータルサイト その他 ChatGPTが研究論文の著者に名を連ねていることに出版社や論文リポジトリは反対している - GIGAZINE Sunsetting Subversion support | The GitHub Blog GitHubがSubversionのサポート終了を発表、2024年1月8日まで。その後は全面的にGitに注力予定 － Publickey マイクロソフト、「AWS Nitro」対抗のクラウド基盤用プロセッサを自社開発か、DPUベンダのFungible買収を発表 － Publickey JavaScriptランタイム「Bun v0.5」登場。MySQLやPostgreSQLのデータベース接続対応、新機能「Workspaces」、Bun.dnsなど搭載 － Publickey TikTokの「秘伝のタレ」はAIではなくデザインにあり - YAMDAS現更新履歴 MIT Tech Review: 高齢者介護を「自動化」する 日本の長い実験 「介護ロボットは360億円を使ったのに余分な仕事を増やすだけ」という記事を読んでの反省と違和感｜安藤 健／ロボット開発者｜note 介護ロボットは日本の高齢者介護問題を救わない？ - YAMDAS現更新履歴 マスク氏、Twitterに「Twitter Blue」よりも高額な「広告ゼロ」プランの追加を示唆 - 週刊アスキー Rustの開発環境を2秒で用意、ローカル環境は汚さず。オンライン開発環境のCodeSandboxがRust言語に対応 － Publickey AIでユニットテストを自動生成。リファクタリング、ドキュメントの生成、バグの検出なども行う「Refraction」登場 － Publickey WebAssemblyとJavaScriptの非同期処理を橋渡しするAPI「JSPI」、Google V8が実験的に実装 － Publickey オープンデータとAIのブラックボックス | p2ptk[.]org Go言語プログラミングエッセンス (エンジニア選書) | mattn |本 | 通販 | Amazon 「Raspberry Pi」がさらに便利に\u0026ndash;有用な機能を追加するアクセサリー3選 - ZDNET Japan プロンプトすら不要！ スマホとAI画像生成だけで美麗なイラストを描けるアプリ - いまからでも遅くない！ツールとして使うAI画像生成 - 窓の杜 Niantic tries its hand at sports with NBA All-World • TechCrunch CTO から見た，なぜスタートアップ\u2028初期のソフトウェア設計は壊れがちなのか - Speaker Deck 『いかにして問題を解くか』との出会いについて（Ｑ＆Ａ）｜結城浩 Firefox found a way to keep ad-blockers working with Manifest V3 - The Verge ローコード開発 WebPerformer 製品紹介｜キヤノンITソリューションズ Supporting OAuth in the Tailscale API · Tailscale 静的サイトジェネレータ「Astro 2.0」正式リリース。新機能「Content Collections」で大量Markdown対応、「Hybrid Rendering」で静的と動的ページの混在可能に － Publickey Googleがインド規制当局の要求に従いデフォルトの検索エンジンや支払い方法選択をユーザーへ委ねることに - GIGAZINE 「チャットGPT」にフェイク生成指示で8割「成功」…でも時々、陰謀論を拒否する | 新聞紙学的 AIで画像のウォーターマークを無料で削除できるツール「Watermark Remover」が登場して新たな議論が勃発 - GIGAZINE 「ゆみみみっくす」発売30周年メモリアルページ なぜ「修理する権利」のために戦い続けなければならないのか | p2ptk[.]org MIT Tech Review: オープン標準「RISC-V」はチップ業界の勢力図を塗り替えるか？ The DOJ sues Google for ad dominance, wants to break company up | Ars Technica Flutter 3.7正式リリース。スクリーンサイズにUIレイアウトが自動対応、GPU活用による高速描画エンジン「Impeller」がプレビューに － Publickey 次期「Dart 3」はNullセーフ、WebAssemblyとRISC-Vサポートなど、Googleが発表。Flutter Forward 2023 － Publickey JA2-TBA1001 | aiwaデジタル公式オンラインストア | aiwaデジタルダイレクト : よさげ ｢自由なAndroid｣に終わりが近づいているのかも | ギズモード・ジャパン 『AIには何ができないか』のメレディス・ブルサードの新刊は、アルゴリズムに内在する人種／性／能力差別がテーマ - YAMDAS現更新履歴 今もっともブレイク中の歴史学者ティモシー・スナイダーが説く「世界にウクライナの勝利が必要な15の理由」 - YAMDAS現更新履歴 ギャル電、山崎雅夫、秋田純一、鈴木涼太、高須正和『感電上等！ ガジェット分解のススメ HYPER』を恵贈いただいた - YAMDAS現更新履歴 #555 - Pleroma filters no longer work - Fedilab - Codeberg.org GitHub Sponsors will stop supporting PayPal | GitHub Changelog GitHubスポンサーがPayPalのサポートを停止、「支援はクレジットカードかデビットカードで」とGitHub - GIGAZINE FlutterのためのDart製サーバフレームワーク「Serverpod 1.0」正式リリース。Dartでサーバからクライアントまで開発可能に － Publickey 『Beep21』「いろいろたぶれ22」(竹本泉)・第9回 ─ある日の1983─｜Beep21｜note GitHub - hymkor/fcopy: Force to copy files even if they are using by other processes and/or the destination directories are protected GitHubユーザー1億人時代\u0026ndash;変わりつつある開発者の役割 - ZDNET Japan Twitterが終了したら、16年分のツイートは歴史から消え去ってしまうのか？ | p2ptk[.]org Rust\u0026rsquo;s Ugly Syntax : www 難関中学の入試問題の原作者になったけど設問が解けない理由を考えて、編集者にたどり着いた｜岸田奈美｜NamiKishida "
    },
    {
      "title": "Nostr に旗を立てろ！",
      "section": "remark",
      "description": "今回はアカウントを作っただけ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/02/plant-your-flag-mark-your-nostr-territory/",
      "published": "2023-02-05T14:54:41+00:00",
      "update": "2023-02-07T00:13:47+00:00",
      "content": "Twitter を追い出された（言い方！）なんとかドーシーさんが出資したとかいう Nostr (Notes and Other Stuff Transmitted by Relays) が流行りらしい。\nGitHub - nostr-protocol/nostr: a truly censorship-resistant alternative to Twitter that has a chance of working Nostr 自身は，分散 SNS においてメッセージのリレーを行うためのプロトコルだそうで，このプロトコルを実装するためのリレー・サービスとクライアント・アプリケーションが必要らしい。\nんで，そのリレー・サービスとクライアント・アプリケーションの一覧が以下にある。\nNostr-Clients-Features-List/Readme.md at main · vishalxl/Nostr-Clients-Features-List · GitHub 最近，私の周辺で Nostr が話題になったのは Damus が iOS アプリとしてクライアントを提供したことがきっかけのようだ。 「いや iOS とか関係ないし」とか思ってたが， Android 用のクライアントとして Amethyst ってのがあるそうな。\nGitHub - vitorpamplona/amethyst: Nostr client for Android Amethyst - Apps on Google Play ほんじゃあ，まぁ，試してみるべ。\nサインアップ？ Amethyst んー。 分からん（笑） どうやってサインアップすんだ？\nとりあえず「鍵」をつくるらしい。 “I sccept the term of use” にチェックを入れて “Generate a new key” のリンクをタップする。\nsign up ? いやいやいや。 何だこれ？ “empty” ってなんやねん？\nここでパニクった私はうっかりサインアウトしてしまったのよ。あとのまつり\u0026hellip; orz\n“Generate a new key” で公開鍵と秘密鍵の鍵ペアを自動で作るのだが， Amethyst は作成した鍵でそのままサインインして上の画面になってしまう。 んで，サインインした状態で（少なくとも）秘密鍵をメモっとかないと二度とサインインできない。 まじすか orz\nここでようやく “how to start using Nostr” を読み始める（先に読め！）。 ふむむ。 astral.ninja というのがあるのか。 こちらは Web ブラウザ・ベースのクライアントらしい。 早速アクセスしてみる。\nastral ここで “GENERATE KEYS” ボタンを押す。 今度は間違えないぞ！\nastral （一応，鍵情報に目隠ししてます。あしからず） んー。 これはこのまま “PROCEED” ボタンを押せばいいのか？ ポチッとな。\nastral - settings （一応，鍵情報に目隠ししてます。あしからず） よしよし。 鍵情報が出てきたな。 nsec で始まる文字列が秘密鍵， npub で始まる鍵が公開鍵である。 ちゃんとメモっておこう。\n再度サインインする場合は秘密鍵を使う1。 あとは設定画面の profile で Name と Picture URL をセットすれば表示名とアバターが表示される。 他はとりあえず後回しでよい。 なお nsec の秘密鍵を使えば他のクライアントでもサインインできるっぽい。 もちろん Amethyst でも使える。\n秘密鍵は秘密のままに 当然ではあるが秘密鍵は絶対に公開してはいけない。 秘密鍵を公開するのは，その辺の Web サービスでユーザ ID とパスワードを公開するのと同じである。\n逆に公開鍵の方は他ユーザにフォローしてもらえるよう公開しても OK。 ちなみに私の公開鍵は\nnpub1v0yd6fxc0qczjj35rxu0m9gtkhhf4mkzl99tgs49f6e98y2ea6asl5rsxw である。\nユーザ名には任意の名前を付けられる。 他のユーザとかぶっても構わない。 どうやら Nostr は鍵情報だけでユーザを識別しているようだ。 なので，いくらでもユーザを作ることができるし，なりすましだって可能である。 ちなみに某マスク氏の名前とアバターアイコンを使った（多分）偽ユーザとかもあるらしいっスよ（笑）\nというわけで，作ったアカウントが自身のものである証明をする必要がある。 Nostr では Web サイトとの連携でこれを行うようだ。 これは NIP-05 と呼ばれるプロトコル仕様の中で定義されている。\nWeb サイト連携によるユーザの証明 Nostr と Web サイトを連携するには，まず Web サイト側のルート直下に /.well-known/nostr.json というファイルを置く。 中身はこんな感じ。\n{ \u0026#34;names\u0026#34;: { \u0026#34;spiegel\u0026#34;: \u0026#34;63c8dd24d87830294a3419b8fd950bb5ee9aeec2f94ab442a54eb2539159eebb\u0026#34; } } JSON 形式で \u0026quot;names\u0026quot; オブジェクト配下に \u0026quot;\u0026lt;username\u0026gt;\u0026quot;: \u0026quot;\u0026lt;pubkey\u0026gt;\u0026quot; で記述されたオブジェクトを配置する。 username には任意の名前を記述する（多分 Nostr クライアントのユーザ名と揃えたほうがいいと思われ）。 pubkey には npub で始まる文字列ではなく公開鍵の生値を16進数文字列で記述する。 公開鍵データの変換は damus key converter で可能である。\nあとはこれを Nostr 側に読み取らせればいいのだが，ここで CORS (Cross-Origin Resource Sharing) の設定が必要になる2。\nたとえばさくらのレンタルサーバであれば ルート直下の /.htaccess ファイルに\nHeader set Access-Control-Allow-Origin: \u0026#34;*\u0026#34; の記述が必要（こんなドンブリ指定はちょっとヤバいかもなので，あとで修正するかも）。 設定ができたら，ちゃんと取得できるか確認してみよう。\n$ curl -sD - \u0026#34;https://baldanders.info/.well-known/nostr.json\u0026#34; HTTP/2 200 server: nginx date: Sun, 05 Feb 2023 13:54:56 GMT content-type: application/json content-length: 103 last-modified: Sun, 05 Feb 2023 13:54:43 GMT etag: \u0026#34;67-5f3f441b5a739\u0026#34; accept-ranges: bytes access-control-allow-origin: * cache-control: no-store { \u0026#34;names\u0026#34;: { \u0026#34;spiegel\u0026#34;: \u0026#34;63c8dd24d87830294a3419b8fd950bb5ee9aeec2f94ab442a54eb2539159eebb\u0026#34; } } よーし，うむうむ，よーし。 curl コマンドなんて知らねって方は test-cors.org でも確認できる。\nNostr クライアント側は profile 設定の “NIP-05 Identifier” 項目に /.well-known/nostr.json ファイルで指定した username とサイト名をセットする。 こんな感じ。\nastral - settings これで\nastral - profile という感じに連携できるようになった。\nNostr は Web3 か？ 公開鍵をそのまま ID とする考え方は Blockchain/Botcoin の仕組みに近い。 Bitcoin が公開鍵をそのままアドレス（= ID）として運用できているのは「元帳」である Blockchain が要求しているのが「取引」の一貫性と無矛盾性だから。 故に ID = 公開鍵 に対しては何も証明する必要がない。 それは Bitcoin の責務ではないのだ。\nでも Nostr はユーザ間のコミュニケーションを目的として考えられているわけで， ID が「誰」に紐づくのかという証明（certification）が絶対に必要。 加えて鍵の生成・配布・更新・破棄（revoke）といったライフサイクルを管理する必要がある。 これって PKI (公開鍵基盤) そのものなのよ。\n前節で述べたように ID が「誰」に紐づくかを証明する仕組みとして NIP-05 が用意されているわけだが，このままでは ID = 公開鍵 を破棄する仕組みがない。 ID を作ったら作りっぱなしで，もし秘密鍵が漏洩してもどうすることもできない。 せいぜい NIP-05 の設定を外すくらいだろう（だから NIP-05 によるユーザの証明はけっこう重要？）。\nまた “how to start using Nostr” を読むと\nCreate multiple keys if needed: The same key can be used on all nostr clients. If you want to create multiple identities or accounts, you can create new such key pairs. via What is Nostr, and how to start using Nostr などと書かれているが，複数 ID を作っても ID に紐づくメタデータを移行する仕組みがない（もしくは手動で再構築するしかない）。 いわゆる「離脱の自由」がないのだ。\n本当は「公開鍵を ID とする（is-a 関係）」のではなく， ID と公開鍵を分離して「ID が公開鍵を所有する（has-a 関係）」のが正しいのだろう。 それをしたら Nostr じゃなくなるかもしれないけど（笑） Nostr を Web3 実装のひとつみたいにみなす人もいるみたいなので，そういう意味でも「ID = 公開鍵」の仕様は外せないのかな。\n替えの効かない ID を使って失敗するってのは，かつての住基番号や今の個人番号を彷彿とさせる。 漏洩やなりすまし（あるいは乗っ取り）は絶対に起きるんだから，起きた後にどうリカバーするかというのは最初に考えておかないと，後付けにはできない。 これを怠ると，いざというときに詰むことになる。\nNostr に旗を立てろ！ ともかく，これで最低限の設定ができた。 とはいえ，今のところあんまり使う気にならないんだよなぁ。 微妙に分かりにくいし使いにくい。 それに，やっぱ SNS は相手がいてはじめて成立しうるものだし？\nまぁ，今回は “Plant Your Flag, Mark Your Territory” ってことで，旗を立てるだけにしておこう。\nブックマーク ツイッターライクなSNS「Nostr」を Damus アプリで使う。初期の設定と、認証バッジを付ける手順 | Lifehacking.jp Nostr. Nostrという新しい分散型のソーシャルプロトコルを試してみています。 | by Fumi | Feb, 2023 | Medium Nostrプロトコル(damus)を触ってみた - Qiita The Nostr Protocol - NIP01 - DEV Community 👩‍💻👨‍💻 厳密には Nostr には「サインイン」という概念はないようだ。あくまで 鍵 = ID に紐づくメタデータや投稿を取得できるというだけ。秘密鍵を使えばメタデータを変更できるし投稿もできる，ということらしい。投稿を削除する仕様はあるが，実際にどう機能するかはリレー・サービス次第のようだ。投稿には電子署名が付くので，基本的に変更はできない。これだけ聞くとコミュニケーション手段に向かないのでは？ と思ってしまう（笑）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nつまり CORS の設定ができないサイトでは NIP-05 による証明ができない。なお GitHub Pages では特に何もしなくても通るらしい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "NIST FIPS 186-5 および SP 800-186 正式版がリリースされた",
      "section": "remark",
      "description": "DSA が標準から外れる / ECDSA 自体を定義し直す / EdDSA が標準として承認された",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/02/nist-fips-186-5/",
      "published": "2023-02-04T00:30:31+00:00",
      "update": "2023-02-04T00:43:39+00:00",
      "content": "長い間ドラフト状態だった FIPS 186-5 および SP 800-186 の最終版が出たようだ。\nFIPS 186-5, Digital Signature Standard (DSS) | CSRC SP 800-186, Discrete Logarithm-Based Crypto: Elliptic Curve Parameters | CSRC この記事では FIPS 186-5 に注目して書いてみる。\n大きな変更は3つ。\nDSA が標準から外れる Prior versions of this standard specified the DSA. This standard no longer approves the DSA for digital signature generation. However, the DSA may be used to verify signatures generated prior to the implementation date of this standard. See FIPS 186-4 [7] for the specifications for the DSA. via “Digital Signature Standard (DSS)” section 4 ということで予定通り，電子署名生成用途としては， DSA は NIST 標準から外れることになった。 ただし，以前に DSA で作成された署名を検証する必要があるため，アプリケーションによっては実装を残しておく必要がある。 DSA 実装に関しては旧版の FIPS 186-4 を読めってあるな。\nECDSA 自体を定義し直す 今まで ECDSA の実装については，以前の FIPS 186-4 だけでは完結してなくて， ANSI X9.62 なんかも併せて参照する必要があった。 特に ANSI X9.62 は所謂 paywalled document って奴で，誰でも気軽に見れるもんじゃないのね。\nまだ中身をちゃんと読んでないのだが，この版ではそういった外部参照を取り払って FIPS 186-5 のみで実装を定義しているようだ。 めでたい！ 言い方を変えると，今後 ECDSA を実装する際は FIPS 186-5 を見ろってことでもある。 まぁ，私を含めて殆どの人は偉い人が作ったライブラリを利用するだけで，中身を気にする人は少ないだろうけど（笑）\nEdDSA が標準として承認された そして最大のトピックは EdDSA が NIST 標準として承認されたことだろう。\nちなみに EdDSA については，日本の CRYPTREC でも評価が行われていて\n総評：下記の観点から、EdDSA の構成に関わる安全性において、EdDSA が ECDSA に劣ると考えられる点は無いと思われると述べている。 Schnorr 署名をもとに EdDSA は構成されているため、ランダムオラクルモデルで安全性が証明されている Schnorr 署名に対する安全性評価を参考にすることができる。 Schnorr 署名との大きな違いはノンスの生成方法であるが、EdDSA におけるノンスの生成方法は、署名の内部乱数を弱い疑似乱数生成器に委ねることによる危険を排除し、現実的な脅威を回避するための配慮が施されている。 比較対象となる ECDSA については、既存結果として generic group model でのみ安全性が証明されている。 CRYPTREC Report 2020 暗号技術評価委員会報告より と書かれている。 まぁ，これで政府調達でも何でも大手を振って EdDSA を使えるというものである。\nめでたい！ （大事なことなので2度言いました）\nブックマーク Edwards-curve Digital Signature Algorithm DSA は NIST 電子署名標準から外れるようだ 量子コンピュータで256ビット楕円曲線暗号は破れるか 参考図書 暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n"
    },
    {
      "title": "Twitter のいないセカイ",
      "section": "remark",
      "description": "私は当面（Web 2.0 な）古き良き「ネットサーフィン」で凌いでいきますかね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/02/without-twitter/",
      "published": "2023-02-03T03:16:46+00:00",
      "update": "2023-02-06T03:49:56+00:00",
      "content": "またぞろ Twitter がやらかしてるらしい。\nTwitter will discontinue offering free access to the Twitter API starting February 9 and will launch a paid version, the Elon Musk-owned microblogging website said as it looks for more avenues to monetize the platform. via Twitter to end free access to its API in Elon Musk’s latest monetization push | TechCrunch あらゆるところから銭をむしり取ろうとする態度は，まるで日本の財務\u0026hellip; げふんげふん。\nあとボット判定ロジックが変わったのか，毎日似た tweets をしているアカウントをボットと見做して凍結三昧だそうな。 何がしたいんだろうねぇ。\n関係あるか知らないけど，私がメインで活動している Fedibird は招待以外のサインアップを当面凍結するらしい。 登録ユーザ数が26Kを超えたそうで，週間アクティブユーザ数も7K〜8Kくらいで推移してるんだとか。 更に大手のサーバとか本当に大変なんだろうなぁ。\nTwitter の凍結祭りは定期的に開催されていているが，毎度 criteria が不明瞭で BAN されたユーザから推測するしかない。 ルールを守らせる一番簡単な方法はルールの内容を知らせず罰だけを与えることだそうで，これによりコミュニティのメンバは疑心暗鬼になって勝手に自粛するのでコントロールしやすいらしい。 カルトや秘密結社でよく聞くやつやね（笑）\n私は既に軸足を Mastodon に移しているので，仮に IFTTT 経由でのアナウンスのせいでボットと見做され BAN されたところで大した被害はない（オーディエンスも少ないしw）。 でも Mastodon メインで活動するようになって痛感したのは，今まで情報収集をいかに Twitter に依存してたかなんだよねぇ。 いまさら無自覚だったことに気づいた。\nTwitter をあまり見なくなってから再び Feedly をよく利用するようになった。 でも， Feedly に登録しているサイトの構成が古いままなので，少し整理しないといけないかも。 あと，私自身が Twitter を見なくなっても，よく見るニュースサイトなんか，あからさまにどこぞの tweets を引用して取材したふりをする記事が多い。 API が有料化になり大規模な情報収集が高コストになると，そーゆーのも難しくなるのかねぇ。\n情報収集手段という点に於いて Mastodon は Twitter の代わりにはならない。 軸足を Mastodon に移すなら Twitter でやってたような情報収集はできないと思ったほうがいい。 サービス側が勝手に「おすすめ」することもない。 情報の取捨選択がユーザの制御下にあるということの意味は，全てユーザが（自動か手動かはともかく）制御しなければならないということだ。\nまた， Mastodon は複数サーバの連合システムだが，全てのサーバが双方向に繋がっているわけではないし，繋がっているサーバの全ての投稿を拾っているわけでもない。 離島みたいなおひとりさまサーバも多かろう。 しかも Mastodon は（標準では）全文検索機能がないのだ。 以前は Mastodon 向けの検索サービスとかあったらしいが，今は大方シャットダウンしているそうな。\n世の中がどう転ぶかは知らないが，私は当面（Web 2.0 な）古き良き「ネットサーフィン」で凌いでいきますかね。\nブックマーク マスクCEO、Twitterの無料API終了は「悪質なbotの排除」と説明　有料APIは月100ドル程度に - ITmedia NEWS\nTwitter、“いいボット”向けに無償APIを提供 - PC Watch\nFediverse 関連のブックマーク\n"
    },
    {
      "title": "Go 1.20 がリリースされた",
      "section": "release",
      "description": "とりあえずマルチエラーに関してはちゃんと調査しないと。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2023/02/go-1_20-is-released/",
      "published": "2023-02-02T11:15:43+00:00",
      "update": "2023-02-06T03:49:56+00:00",
      "content": "まさか，2月早々に出るとか！\nGo 1.20 is released Go 1.20 is released! - The Go Programming Language Go 1.20 Release Notes - The Go Programming Language その他のリンクについては後日に補完する。 とりあえずマルチエラーに関してはちゃんと調査しないと。\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.20.linux-amd64.tar.gz）を取ってきてインストールすることを強く推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.20.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.20.linux-amd64.tar.gz $ sudo mv go go1.20 $ sudo ln -s go1.20 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.20 linux/amd64 Windows は Scoop 経由で OK\nアップデートは計画的に。\nブックマーク Big Sky :: errors.Join が入った。 Providing context to cancellations in Go 1.20 with the new context WithCause API - Joseph Woodward | Software Engineer \u0026amp; Go lover based in Somerset, England Go 1.20 Cryptography What’s New in Go 1.20, Part I: Language Changes · The Ethically-Trained Programmer Scheduling In Go : Part II - Go Scheduler What’s New in Go: The Developer Ecosystem Report 2022 | The GoLand Blog Go 1.20リリース連載が始まります＆メモリアリーナの紹介＆落ち穂拾い | フューチャー技術ブログ Go1.20リリース連載 contextパッケージのWithCancelCauseとCause | フューチャー技術ブログ Go 1.20 Wrapping multiple errors | フューチャー技術ブログ Go 1.20 timeパッケージのアップデート | フューチャー技術ブログ Go 1.20 HTTP ResponseController | フューチャー技術ブログ New ReverseProxy Rewrite hook を動かしながら理解する | フューチャー技術ブログ Go 1.20 vetのアップデート | フューチャー技術ブログ Go 1.20 リリース連載 go build に追加される cover オプション（利用例付き） | フューチャー技術ブログ Go 1.20 リリースパーティ - connpass Go 1.20: Profile-Guided Optimization 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元のデジタル版を購入。 Go で躓きやすい点を解説していくのが最初の動機らしい。「◯◯するには」を調べる際にこの本を調べるといいかも。\nreviewed by Spiegel on 2022-10-26 (powered by PA-APIv5)\nGo言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Eブック版もある。感想はこちら。 Go 言語で並行処理を書くならこの本は必読書になるだろう。\nreviewed by Spiegel on 2020-01-13 (powered by PA-APIv5)\nGoならわかるシステムプログラミング 第2版 渋川よしき (著), ごっちん (イラスト) ラムダノート 2022-03-23 単行本（ソフトカバー） 4908686122 (ASIN), 9784908686122 (EAN), 4908686122 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 第1版はとてもためになる内容だったので第2版も PDF 版で確保しておく。\nreviewed by Spiegel on 2022-10-08 (powered by PA-APIv5)\nデベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n"
    },
    {
      "title": "Mastodon と GitHub との連携",
      "section": "remark",
      "description": "“Social accounts” の項目に URL をセットすればいいのか",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/02/mastodon-and-github/",
      "published": "2023-02-02T00:52:56+00:00",
      "update": "2023-02-02T01:09:42+00:00",
      "content": "以前にも紹介したが， Mastodon と他サイトを連携させるには， Mastodon 側のプロフィール編集の「プロフィール補足情報」で\nプロフィールを編集 - Fedibird こんな風に URL を列挙し1，対応するサイトで\n\u0026lt;a rel=\u0026#34;me\u0026#34; href=\u0026#34;https://hostname/@username\u0026#34;\u0026gt;Mastodon\u0026lt;/a\u0026gt; とか\n\u0026lt;link rel=\u0026#34;me\u0026#34; href=\u0026#34;https://hostname/@username\u0026#34;\u0026gt; とかいった感じのリンクを記述すればいい。 のだが， GitHub のような SaaS ではサービス側が対応してくれないと難しかったりする。\nGitHub の場合 github.com/username/username リポジトリを作ってその中の README.md ファイルに任意のリンクを載せられるのだが\nGitHub プロファイルを（ちょっとだけ）カッコよくしてみる 外部サイトへのリンクには強制的に rel=\u0026quot;nofollow\u0026quot; が上書き設定されてしまうみたいなのね。 まぁ，気持ちは分かるので「しょうがないか」と諦めていたのだが， Mastodon の TL で\nという投稿を見かけたので真似してみることにした。\n具体的には GitHub の自ユーザページの “Edit profile” ボタンを押して編集モードにし， “Social accounts” の項目で\nEdit profile - GitHub という感じに Mastodon のプロフィール・ページの URL をセットすればよい。 mstdn.jp はアイコンが に変わるのに fedibird.com は変わらないんだな。 \u0026hellip;まぁいいか。\nこの設定により GitHub の自ユーザページに\n\u0026lt;a rel=\u0026#34;nofollow me\u0026#34; class=\u0026#34;Link--primary\u0026#34; href=\u0026#34;https://fedibird.com/@spiegel\u0026#34;\u0026gt;https://fedibird.com/@spiegel\u0026lt;/a\u0026gt; あるいは\n\u0026lt;a rel=\u0026#34;nofollow me\u0026#34; class=\u0026#34;Link--primary\u0026#34; href=\u0026#34;https://mstdn.jp/@spiegel\u0026#34;\u0026gt;@spiegel@mstdn.jp\u0026lt;/a\u0026gt; といった感じのリンクが張られる。 一方で Mastodon の自プロフィールページには\nプロフィール - Fedibird という感じに GitHub の URL にチェックマークが付く。\nめでたし！\nMastodon の標準では補足情報の URL は4つまで登録できるが Fedibird は8つまで拡張されている。ところで Fedibird は 2023-02 時点でユーザが26K人を超えたらしい。そんでしばらくは新規受付を止めるらしい（招待からのサインアップは継続とのこと）。これから Mastodon は目的別にアカウント@サーバを分散させるのが賢いかもしれない。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "2024年の暦",
      "section": "remark",
      "description": "2024年は振替休日がいっぱいあるねぇ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/02/ephemeris-in-2024/",
      "published": "2023-02-01T02:06:23+00:00",
      "update": "2023-02-01T05:57:54+00:00",
      "content": "今年も国立天文台より翌年（2024年）の暦要項が発表された1。\n令和6（2024）年暦要項の発表 | 国立天文台(NAOJ) 以降，いくつか抜粋してみる。\n祝日・休日2 日本の暦情報は国立天文台の暦計算室で見ることができる。 この中の「今月のこよみ powered by Google Calendar」で Google Calendar と連携させることができるのだが，この機能を利用した github.com/goark/koyomi パッケージを公開している。 こんな感じに使える。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/koyomi\u0026#34; ) var weekShortNames = [7]string{\u0026#34;日\u0026#34;, \u0026#34;月\u0026#34;, \u0026#34;火\u0026#34;, \u0026#34;水\u0026#34;, \u0026#34;木\u0026#34;, \u0026#34;金\u0026#34;, \u0026#34;土\u0026#34;} func WeekShortNameJp(dt koyomi.DateJp) string { return weekShortNames[dt.Weekday()%7] } func main() { start, _ := koyomi.DateFrom(\u0026#34;2024-01-01\u0026#34;) end, _ := koyomi.DateFrom(\u0026#34;2024-12-31\u0026#34;) k, err := koyomi.NewSource( koyomi.WithCalendarID(koyomi.Holiday), koyomi.WithStartDate(start), koyomi.WithEndDate(end), ).Get() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;| 日付 | 曜日 | 内容 |\u0026#34;) fmt.Println(\u0026#34;| ---- |:----:| ---- |\u0026#34;) for _, e := range k.Events() { fmt.Printf(\u0026#34;| %v | %v | %v |\\n\u0026#34;, e.Date, WeekShortNameJp(e.Date), e.Title) } } これを実行すると以下の出力が得られる。\n$ go run main.go | 日付 | 曜日 | 内容 | | ---- |:----:| ---- | | 2024-01-01 | 月 | 元日 | | 2024-01-08 | 月 | 成人の日 | | 2024-02-11 | 日 | 建国記念の日 | | 2024-02-12 | 月 | 休日 | | 2024-02-23 | 金 | 天皇誕生日 | | 2024-03-20 | 水 | 春分の日 | | 2024-04-29 | 月 | 昭和の日 | | 2024-05-03 | 金 | 憲法記念日 | | 2024-05-04 | 土 | みどりの日 | | 2024-05-05 | 日 | こどもの日 | | 2024-05-06 | 月 | 休日 | | 2024-07-15 | 月 | 海の日 | | 2024-08-11 | 日 | 山の日 | | 2024-08-12 | 月 | 休日 | | 2024-09-16 | 月 | 敬老の日 | | 2024-09-22 | 日 | 秋分の日 | | 2024-09-23 | 月 | 休日 | | 2024-10-14 | 月 | スポーツの日 | | 2024-11-03 | 日 | 文化の日 | | 2024-11-04 | 月 | 休日 | | 2024-11-23 | 土 | 勤労感謝の日 | ふむむー。 2024年は振替休日がいっぱいあるねぇ。 連休バンザイ（笑）\n2024年の暦象 2024年は日食2回と月食1回がある。\n日付 曜日 内容 2024-04-09 火 皆既日食 2024-09-18 水 部分月食 2024-10-03 木 金環日食 しかし，いずれも日本では見れないらしい。\n他にはこんな感じ。\n日付 曜日 内容 2024-02-04 日 立春 2024-03-20 水 春分 2024-05-05 日 立夏 2024-06-21 金 夏至 2024-08-07 水 立秋 2024-09-22 日 秋分 2024-11-07 木 立冬 2024-12-21 土 冬至 ちなみに2024年の「伝統的七夕」は8月10日である。\nそうそう。 2024年は閏年っス。\nブックマーク カレンダーに祝日を入れたいなら国立天文台へ行けばいいじゃない 国立天文台から最新の暦情報を取ってくる【広告記事】 参考図書 天文年鑑 2023年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2022-11-24 (Release 2022-11-24) 単行本 4416522940 (ASIN), 9784416522943 (EAN), 4416522940 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 天文ファン必携。2023年版。これが届くと年末って感じ。\nreviewed by Spiegel on 2022-11-25 (powered by PA-APIv5)\n国立天文台では毎年2月最初の官報で翌年の暦を発表する。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n「国民の祝日」は休日となる。また「「国民の祝日」が日曜日に当たるときは、その日後においてその日に最も近い「国民の祝日」でない日を休日とする」（「国民の祝日に関する法律」より）。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "go-cvss パッケージ v1.5.0 をリリースした",
      "section": "release",
      "description": " 一連の変更でようやく CVSSv2 処理系は v3/metric パッケージと互換になった。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2023/01/go-cvss-package-v1_5_0-is-released/",
      "published": "2023-01-31T07:36:54+00:00",
      "update": "2023-01-31T11:13:37+00:00",
      "content": "バグ報告が止まらない。 ごめんなさい ごめんなさい ごめんなさい\u0026hellip;\nということで github.com/goark/go-cvss パッケージの v1.5.0 をリリースした。\nRelease v1.5.0 · goark/go-cvss · GitHub このバージョンで CVSSv2 のデコードを行うサブパッケージを v2/base から v2/metric に移行した。 こんな感じ。\n//go:build run // +build run package main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/go-cvss/v2/metric\u0026#34; ) func main() { bm, err := metric.NewBase().Decode(\u0026#34;AV:N/AC:L/Au:N/C:N/I:N/A:C\u0026#34;) //CVE-2002-0392 if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Printf(\u0026#34;Severity: %v (%v)\\n\u0026#34;, bm.Severity(), bm.Score()) // Output: // Severity: Severity: High (7.8) } これに伴い v2/base パッケージ以下の型定義およびメソッドには Deprecated マークを付けている。 一連の変更でようやく CVSSv2 処理系は v3/metric パッケージと互換になった。 まぁ今どき CVSSv2 を使うことはないと思うけどね。\nそもそも github.com/goark/go-cvss パッケージ自体がかなり試行錯誤していて，随分とカオスな状態になっていたので，この機会に整理できてよかった。 もうバグはないよなぁ。 ないと思いたい。\n2022-01-31 追記 その後のバグ報告で，上述の Deprecated マークを付けた v2/base パッケージはデータ構造上 CVSSv2 の仕様を満たせないことが分かったので v1.6.0 で drop した。\nRelease v1.6.0 · goark/go-cvss · GitHub とほほ orz\nブックマーク CVSS v2 Complete Documentation 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元のデジタル版を購入。 Go で躓きやすい点を解説していくのが最初の動機らしい。「◯◯するには」を調べる際にこの本を調べるといいかも。\nreviewed by Spiegel on 2022-10-26 (powered by PA-APIv5)\n"
    },
    {
      "title": "松江城 冬景色",
      "section": "remark",
      "description": "こりゃあ，天守閣まで登るのは無理だな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/01/castle-in-winter/",
      "published": "2023-01-28T10:17:35+00:00",
      "update": "2023-01-28T10:19:08+00:00",
      "content": "先日の寒波で積もった雪が融けず足元が悪い状態が続いてるのだけど，引きこもりも飽きてきたし，図書館で借りたい本もあったので，本当に久しぶりに街に出てみた。\nまずはバスで松江駅まで出てみる。\n雪が残る松江駅 | Flickr おぅふ orz\nエラい雪が残っとるな。 一応松江市の中心街付近なのだが\u0026hellip;\n気を取り直して，バスを乗り換え島根県立図書館へ Go。 図書館近くにある松江城のお掘りを覗いてみると\n松江城 お堀の水も凍る | Flickr 凍っとるがな！ 二の丸に登る千鳥橋もこんな感じ。\n雪の千鳥橋 | Flickr こりゃあ，天守閣まで登るのは無理だな。 というわけで，雪の松江城見物は諦めて図書館で本を借りて，とっとと帰った。 ちなみに天守閣の遠景はこんな感じ。\n雪の松江城 | Flickr わざとこの位置に街灯を配置してみました（笑）\nそうそう。 今回借りた本はこれ。\nとりあえず図書館で借りて斜め読み | Flickr 3月からこの本のオンライン読書会をするらしいんだけど，月2回の読書会は参加しきれるか微妙なので，まずは試し読みして決めようと思ったのだ。 面白ければ読書会に参加するか否かに関わらず買う予定。 PDF 版があれば即買いでもよかったんだけどねぇ。 いや，日経BP社に決済情報を預けたくないし，もし PDF 版があっても直販では買わんかな（笑）\n参考図書 ピープルウエア 第3版 トム・デマルコ (著), ティモシー・リスター (著), 松原友夫 (翻訳), 山浦恒央 (翻訳) 日経BP 2013-12-18 単行本（ソフトカバー） 4822285243 (ASIN), 9784822285241 (EAN), 4822285243 (ISBN) とりあえず図書館で借りてためし読みする。面白かったら買う。\nreviewed by Spiegel on 2023-01-28 (powered by PA-APIv5)\nAlteration【アーティスト盤】 ZAQ (メインアーティスト) Lantis 2013-01-23 (Release 2019-10-24) MP3 ダウンロード B07YZ9R7T2 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; アニメ「ささみさん＠がんばらない」のOP曲。 MP3 版で買い直した。 ZAQ さんの唄はよい。\nreviewed by Spiegel on 2023-01-28 (powered by PA-APIv5)\n"
    },
    {
      "title": "go-cvss パッケージ v1.4.2 をリリースした",
      "section": "release",
      "description": "さらに今回は fuzzing テストまでしてもらって，ホンマに「マジすんません」って感じである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2023/01/go-cvss-package-v1_4_2-is-released/",
      "published": "2023-01-28T03:47:48+00:00",
      "update": "2023-01-31T07:38:00+00:00",
      "content": "CVSS ベクタ文字列を可視化したいという軽い動機で作った，拙作の github.com/goark/go-cvss パッケージだが，微妙に使って頂いてるようで，バグ報告をいくつか頂いたため，修正版をリリースした。\nRelease v1.4.2 · goark/go-cvss · GitHub CVSS のベクタ文字列（CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H1 など）のバリデーションを厳密に行うようにした。 今までベクタ文字列の parse はかなり緩くしていて， metric 名が重複してても（後勝ちで）有効にしてたし，大文字小文字も関係なく有効にしていたが，仕様的にあかんやろ，ということで。 これに伴い，古いコードは drop した（コード管理が煩雑になるので）。\n使い方は今までと変わらず\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/go-cvss/v3/metric\u0026#34; \u0026#34;github.com/goark/go-cvss/v3/report\u0026#34; \u0026#34;golang.org/x/text/language\u0026#34; ) var template = \u0026#34;- `{{ .Vector }}`\u0026#34; + ` - {{ .SeverityName }}: {{ .SeverityValue }} (Score: {{ .BaseScore }}) | {{ .BaseMetrics }} | {{ .BaseMetricValue }} | |--------|-------| | {{ .AVName }} | {{ .AVValue }} | | {{ .ACName }} | {{ .ACValue }} | | {{ .PRName }} | {{ .PRValue }} | | {{ .UIName }} | {{ .UIValue }} | | {{ .SName }} | {{ .SValue }} | | {{ .CName }} | {{ .CValue }} | | {{ .IName }} | {{ .IValue }} | | {{ .AName }} | {{ .AValue }} | ` func main() { flag.Parse() if flag.NArg() \u0026lt; 1 { fmt.Fprintln(os.Stderr, \u0026#34;Set CVSS vector\u0026#34;) return } bm, err := metric.NewBase().Decode(flag.Arg(0)) if err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\\n\u0026#34;, err) return } r, err := report.NewBase(bm, report.WithOptionsLanguage(language.Japanese)).ExportWithString(template) if err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\\n\u0026#34;, err) return } if _, err := io.Copy(os.Stdout, r); err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\\n\u0026#34;, err) } } などとしておけば\n$ go run main.go \u0026#34;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\u0026#34; - `CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H` - 深刻度: 緊急 (Score: 9.8) | 基本評価基準 | 評価値 | |--------|-------| | 攻撃元区分 | ネットワーク | | 攻撃条件の複雑さ | 低 | | 必要な特権レベル | 不要 | | ユーザ関与レベル | 不要 | | スコープ | 変更なし | | 機密性への影響 | 高 | | 完全性への影響 | 高 | | 可用性への影響 | 高 | と出力される。\nこの github.com/goark/go-cvss パッケージってコードの半分くらい貰いものだし，さらに今回は fuzzing テストまでしてもらって，ホンマに「マジすんません」って感じである。ありがたや \u0026#x1f647;\nでも CVSS ってあくまでもリスクの「評価基準」のひとつであって，そこから「どうする」ってのはまた別の話なんだよね。 個人なら CVSS の Base metrics 情報を見て都度判断すればいいけど，組織では SSVC (Stakeholder-Specific Vulnerability Categorization) なんかと組み合わせる必要があるかもしれない。\n道具は適材適所で使いましょう，ということで。\n【2022-01-29 追記】 v1.4.4 をリリースした またバグ報告があったので修正版をリリースした。 とほほ\u0026hellip;\nRelease v1.4.4 · goark/go-cvss · GitHub 今回のついでにスコアの計算周りのリファクタリングを行った。 ちょっとスッキリ！\nブックマーク CVSS v3.0 Specification Document\nCVSS v3.1 Specification Document\n共通脆弱性評価システムCVSS v3概説：IPA 独立行政法人 情報処理推進機構\nオープンソース製品とソフトウェア部品表\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元のデジタル版を購入。 Go で躓きやすい点を解説していくのが最初の動機らしい。「◯◯するには」を調べる際にこの本を調べるといいかも。\nreviewed by Spiegel on 2022-10-26 (powered by PA-APIv5)\nCVE-2022-3515 より\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    }
  ]
}
