{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "貧者の兵器",
      "section": "remark",
      "description": "気ぃつけなはれや（他人事）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/poor-mans-weapons/",
      "published": "2019-09-23T10:36:15+00:00",
      "update": "2019-09-23T10:37:45+00:00",
      "content": " 従来から化学兵器や地雷などは「貧者の兵器」と呼ばれているが，これに新たな兵器が実戦配備されたようだ。\n サウジ石油施設への攻撃はGCC諸国の脆弱性を露呈：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト  有料記事だが，是非ともお金を払って一読されることをおすすめする。\nかつて民生品 drone は「空の産業革命」などと呼ばれてきたが，ついに恐れていた事態が現実となった。\n 個人的に危惧してるのは， drone がいわゆる「貧者の兵器」となり得ることだ。 9.11 前の日本ならともかく，イラク戦争に参戦し，さらに火中の栗を拾うが如き「集団的自衛権」なるものを定めるのであれば，兵器としての drone についてもちゃんと議論すべきである。 via 日本のアトムは空を飛べない  今回の件が厄介なのは\n 「もしイランに対する攻撃を行えば、イランはきわめて安価な兵器を用いて容易にサウジ・UAE・クウェート等の石油施設を破壊できる」ということが、この攻撃によって示された。ペルシア湾岸地域の勢力バランスが、イランによる安価な実際的な兵器の開発と配備と運用実績の積み上げによって、大きく変わってしまっていた。 via サウジ石油施設への攻撃はGCC諸国の脆弱性を露呈  ことだろう。\n更に言えば世界の紛争地帯の武装勢力によるテロが活性化する可能性もある。 ぶっちゃけ「旅客機をハイジャックしなくても空から攻撃できる」のだ。 しかも同時多発的に。 これにサイバー攻撃を合わせれば怖いものなしだ。\nさて，賢明にも日本はホルムズ海峡に派兵する気はないようだが，東京オリンピックはせいぜい気ぃつけなはれや（他人事）\nブックマーク  サウジ世界最大石油施設「ドローン攻撃」で油価急騰は長期化なのか：岩瀬昇 | エネルギーの部屋 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト  サウジ大臣は「回復」と言う原油施設の「本当の被害程度」：岩瀬昇 | エネルギーの部屋 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト  「ドローン黙示録」の到来を阻止するために | TechCrunch Japan  参考図書  セキュリティはなぜやぶられたのか ブルース・シュナイアー 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-API)\n  イノベーション 悪意なき嘘 (双書 時代のカルテ) 名和 小太郎 岩波書店 2007-01-11 単行本 4000280872 (ASIN), 9784000280877 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「両用技術とはどのようなものか。その核心には「矛と楯の論理」がある」（まえがき「予断・診断・独断 そんなばかな」より）\nreviewed by Spiegel on 2018-12-31 (powered by PA-API)\n "
    },
    {
      "title": "本の「史料」的価値",
      "section": "remark",
      "description": "「情報共有の未来」が「国会図書館に納本」とか皮肉が効きすぎて目から汗が出てしまう（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/value-of-books/",
      "published": "2019-09-23T02:39:20+00:00",
      "update": "2019-09-24T18:55:11+00:00",
      "content": " （Facebook の TL に書き殴った内容を再構成してみた）\n日本の新聞記事にはリンクを張らないことにしているので1 何処とは言わないが， Facebook の TL で紹介されてた「「紙の本なくならない」ページめくる動作にカギ」という記事を見て笑ってしまった。 新聞ってここまで落ちぶれたのか。 こんなクソ記事に付き合わされる某大学の教授も大変である。\nちなみに私はもう長いこと紙の新聞は読んでない2。 10年近く前に関係者に『新聞がなくなる日』なんて本を書かれ，近年では「社会は新聞を必要としない」とまで言われるメディアに価値があるとは思えない（笑）\n私は本が大好きだ。 昨年末の引っ越しで大量の本を処分せざるを得なくなったときは自分の半生を否定された気分になったほどだ。\nしかし娯楽や情報・知識の「源泉」として見た場合，紙かデジタルかに関わらず「本」という形態の価値は低下していると思う。 「本」全体の価値が下がっているのに今更「紙かデジタルか」なんて話を見てもズレた論点にへそで茶が沸く程度の感想しかない。\n情報・知識の摂取手段としては「ググる」ほうが早いし Web を上回る情報・知識を提供してくれる本など多分100冊に1冊もないだろう。 Wikipedia をテストや宿題のカンニングに使ったり卒論のネタに使ったりする子供の気持ちがよくわかるよ3。\n娯楽は既に Web のほうが面白い4。 音楽や映像は言うに及ばず，漫画・小説についても Web連載（掲載）→書籍化（含コミカライズ）→テレビ・映画化 という流れができていて「書籍ファースト」ではなくなってきている。\n仮に「紙かデジタルか」という比較をするなら，それは「読む」ことではなく「保存する」ことについてだろう。\nインターネットおよび Web の普及で分かったことは 「デジタル情報は失われやすく統制を受けやすい」 ということだ。\nDRM (Digital Rights Management) などと嘯き，人を「表現」から締め出し，それを法が是とする現代社会システムには破滅願望しか感じられない。 地球が「猿の惑星」になるのも遠い未来ではないのかも（笑）\n現代の強すぎる統制下に於いて，未来に向けて「表現」を維持するには「紙の本」の形で国会図書館にでも保護してもらうしかない。\n少し前に「『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』が国会図書館に納本された」話があったが5，残念ながら慧眼だったと言わざるを得ない。 まぁ「情報共有の未来」が「国会図書館に納本」とか皮肉 (スパイス) が効きすぎて目から汗が出てしまうが。\nブックマーク  9月22日開催の「技術書典7」にて『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』特別版を販売します - YAMDAS現更新履歴  参考図書  [まとめ買い] 犬とハサミは使いよう 更伊 俊介, 鍋島 テツヒロ 鍋島 テツヒロ (イラスト)  Kindle版 B012Z14W64 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  犬になっても本を読む！\nreviewed by Spiegel on 2015-04-26 (powered by PA-API)\n  もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo 達人出版会 2017-12-25 評価\u0026nbsp;       WirelessWire News 連載の書籍化。感想はこちら\nreviewed by Spiegel on 2018-12-31\n  CODE VERSION 2.0 ローレンス・レッシグ 山形浩生 (翻訳) 翔泳社 2007-12-19 (Release 2016-03-14) Kindle版 B01CYDGUV8 (ASIN), 9784798147307 (EISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  前著『CODE』改訂版。\nreviewed by Spiegel on 2018-11-17 (powered by PA-API)\n  数ヶ月で削除される新聞記事にリンクを張ってもしょうがない。 [return] 実家は今だに新聞を定期購読しているので目にはつくけど。まぁ，私がお金を払っているわけではないのでどうでもいい。年寄りは新聞やテレビがなくなると本格的に社会から隔絶してしまうので，仕方がないのだろう。新聞やテレビ自体が社会から乖離している気もするが（笑） [return] もっとも，カンニングペーパーってのは自分で「作る」ことに意味があるんだけどねぇ。与えられるだけの知識は身につかない。ちゃんと消化しないと。 [return] これは Web の作品のほうが優れているということではなく「スタージョンの法則」に則って「90%はカス」という健全な状態であるという意味である。バリバリの売れっ子作家も週末の余暇に書いてるだけの人も，同じ土俵で作品を公開できるというのは素晴らしい。 [return] いま見たら検索にも出てきた。うむうむ。 [return]   "
    },
    {
      "title": "疑似乱数生成器 spiegel-im-spiegel/mt",
      "section": "release",
      "description": "spiegel-im-spiegel/mt は64bit版 Mersenne Twister を元に pure Go で書き直したものである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/mersenne-twister-by-golang/",
      "published": "2019-09-22T08:37:19+00:00",
      "update": "2019-09-24T17:55:46+00:00",
      "content": " Mersenne Twister とは松本眞・西村拓士両氏によって1996年に発表された擬似乱数生成アルゴリズムである。 他の擬似乱数生成アルゴリズムと比べて以下の特徴があるそうだ。\n  従来の様々な生成法の欠点を考慮して設計されています 従来にない長周期, 高次元均等分布を持ちます（周期が $2^{19937}-1$ で、623次元超立方体の中に 均等に分布することが証明されています） 生成速度がかなり速い メモリ効率が良い  via Mersenne Twister とは?  特に2番目が重要で，モンテカルロ法などの科学技術計算に向いている。 Ruby などの一部のプログラミング言語では標準の疑似乱数生成器として組み込まれているらしい。\nspiegel-im-spiegel/mt は Mersenne Twister のオリジナルコード（C/C++）を pure Go で書き直したものである。\n  \nspiegel-im-spiegel/mt の特徴は以下の通り。\n math/rand 互換で rand.Rand のソースとして利用できる goroutine-safe な構成にできる（mt.PRNG 型を利用した場合）  mt/mt19937.Source の機能 mt/mt19937 パッケージは 64bit版 Mersenne Twister を元に pure Go で書き直したものである。\nmt/mt19937.Source はそのまま疑似乱数生成器として使える。 たとえば以下のように記述する。\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) fmt.Println(mt19937.NewSource(19650218).Uint64()) //Output: //13735441942630277712 提供するメソッドは以下の通り。\n   メソッド 機能     Source.Seed(int64) 乱数のシードをセットする   Source.SeedArray([]uint64) 乱数のシード（配列）をセットする   Source.Uint64() uint64 乱数として範囲 $[0, 2^{64}-1]$ の整数値を生成する   Source.Int63() int64 乱数として範囲 $[0, 2^{63}-1]$ の整数値を生成する   Source.Real(int) float64 乱数として浮動小数点数値を生成する    Source.Real() 関数の引数による乱数の出力範囲は以下の通り。\n   引数 生成範囲     1 範囲 $[0, 1)$ の浮動小数点数値   2 範囲 $(0, 1)$ の浮動小数点数値   上記以外 範囲 $[0, 1]$ の浮動小数点数値    なお mt/mt19937.Source は goroutine-safe ではないので goroutine 間でインスタンスを共有できない。\nmath/rand と組み合わせる mt/mt19937.Source を rand.Rand のソースとして利用するには以下のように記述すればよい。\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) fmt.Println(rand.New(mt19937.NewSource(19650218)).Uint64()) //Output: //13735441942630277712 これで rand.Rand が提供するメソッドはすべて使える。 ただし rand.Rand も goroutine-safe ではないので，取り扱いにはやはり注意が必要である。\nmt.PRNG と組み合わせる mt/mt19937.Source 型を mt.PRNG 型と組み合わせることで goroutine-safe な構成にできる。 たとえばこんな感じに記述できる。\npackage main import ( \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) func main() { wg := sync.WaitGroup{} prng := mt.New(mt19937.NewSource(time.Now().UnixNano())) \tfor i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { defer wg.Done() for i := 0; i \u0026lt; 10000; i++ { prng.Uint64() \t} }() } wg.Wait() } mt.PRNG 型は mt/mt19937.Source のラッパーになっていて rand.Rand と組み合わせることも可能だが， rand.Rand の内部構造の問題で goroutine-safe にならない。 ご注意を。\nio.Reader 互換の疑似乱数生成器 mt.PRNG のインスタンスから mt.Reader 型のインスタンスを生成できる。 こんな感じに記述できる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) func main() { wg := sync.WaitGroup{} prng := mt.New(mt19937.NewSource(time.Now().UnixNano())) \tfor i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { defer wg.Done() r := prng.NewReader() \tbuf := [8]byte{} for i := 0; i \u0026lt; 10000; i++ { ct , err := r.Read(buf[:]) \tif err != nil { return } fmt.Println(binary.LittleEndian.Uint64(buf[:ct])) } }() } wg.Wait() } mt.Reader 型は io.Reader インタフェースと互換性がある。 また mt.Reader インスタンスも goroutine-safe なので goroutine 間で共有可能である。\nライセンスについて spiegel-im-spiegel/mt は MIT ライセンスで提供している。\nオリジナルの Mersenne Twister コードは GPL または BSD ライセンスで提供されているが MIT ライセンスに書き換えてもいいらしい。\n Mersenne Twisterの商業利用について  というわけで spiegel-im-spiegel/mt は MIT ライセンスで提供することにした。 ご利用はお気軽に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  数学ガール／乱択アルゴリズム 結城 浩 SBクリエイティブ 2011-02-25 (Release 2014-03-12) Kindle版 B00I8AT1FO (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  工学ガール，リサちゃん登場！\nreviewed by Spiegel on 2015-04-19 (powered by PA-API)\n "
    },
    {
      "title": "疑似乱数生成器 spiegel-im-spiegel/mt をリリースした",
      "section": "release",
      "description": "ついカッとなって書いた。反省はしていない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/mersenne-twister-package-is-released/",
      "published": "2019-09-22T08:37:19+00:00",
      "update": "2019-09-22T09:18:55+00:00",
      "content": " ついカッとなって書いた。 反省はしていない。\n spiegel-im-spiegel/mt: Mersenne Twister; Pseudo Random Number Generator, Implemented by Golang  Mersenne Twister の Go 言語実装はいくつかあるのだが，やっぱ他人が作る道具は使いにくいよね，というわけで自分で書いてしまった（笑） spiegel-im-spiegel/mt の特徴は以下の通り。\n math/rand 互換で rand.Rand のソースとして利用できる goroutine-safe な構成にできる（mt.PRNG 型を利用した場合）  使い方は以下を参照のこと。\n 疑似乱数生成器 spiegel-im-spiegel/mt  一応，ベンチマークテストもしてみた。\npackage main import ( \u0026#34;math/rand\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/mt/mt19937\u0026#34; ) const count = 10000000 func BenchmarkRandomALFG(b *testing.B) { rnd := rand.NewSource(time.Now().UnixNano()).(rand.Source64) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomMT19917(b *testing.B) { rnd := mt19937.NewSource(time.Now().UnixNano()) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomALFGRand(b *testing.B) { rnd := rand.New(rand.NewSource(time.Now().UnixNano())) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomMT19917Rand(b *testing.B) { rnd := rand.New(mt19937.NewSource(time.Now().UnixNano())) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } func BenchmarkRandomALFGLocked(b *testing.B) { b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rand.Uint64() } } func BenchmarkRandomMT19917Locked(b *testing.B) { rnd := mt.New(mt19937.NewSource(time.Now().UnixNano())) b.ResetTimer() for i := 0; i \u0026lt; count; i++ { rnd.Uint64() } } テスト対象は以下の通り。\n   テスト名 対象     BenchmarkRandomALFG math/rand 標準アルゴリズム1   BenchmarkRandomMT19917 mt/mt19937 パッケージ   BenchmarkRandomALFGRand math/rand （rand.Rand ラッパ）   BenchmarkRandomMT19917Rand mt/mt19937 （rand.Rand ラッパ）   BenchmarkRandomALFGLocked math/rand Sync バージョン   BenchmarkRandomMT19917Locked mt/mt19937 ＋ mt.PRNG    このベンチマークテストの実行結果は以下の通り。\n$ go test -bench Random -benchmem goos: linux goarch: amd64 pkg: github.com/spiegel-im-spiegel/mt/benchmark BenchmarkRandomALFG-4 1000000000\t0.0492 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomMT19917-4 1000000000\t0.0651 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomALFGRand-4 1000000000\t0.0749 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomMT19917Rand-4 1000000000\t0.0846 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomALFGLocked-4 1000000000\t0.176 ns/op\t0 B/op\t0 allocs/op BenchmarkRandomMT19917Locked-4 1000000000\t0.192 ns/op\t0 B/op\t0 allocs/op PASS ok github.com/spiegel-im-spiegel/mt/benchmark\t7.081s というわけで math/rand のほうが若干速いかな。 乱数としての性能は別の機会に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  数学ガール／乱択アルゴリズム 結城 浩 SBクリエイティブ 2011-02-25 (Release 2014-03-12) Kindle版 B00I8AT1FO (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  工学ガール，リサちゃん登場！\nreviewed by Spiegel on 2015-04-19 (powered by PA-API)\n  math/rand パッケージに実装されている擬似乱数生成器はラグ付フィボナッチ法（Lagged Fibonacci Generator）のバリエーションらしい。 [return]   "
    },
    {
      "title": "2019-09-21 のブックマーク",
      "section": "bookmarks",
      "description": "「数式言語を使って、インタプリタとコンパイラの違いを説明してみる」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/09/21-bookmarks/",
      "published": "2019-09-21T06:23:03+00:00",
      "update": "2019-09-21T06:28:29+00:00",
      "content": " リリース情報  Google、「Flutter 1.9」リリース、Webアプリ生成機能を統合。Flutterは単一コードでネイティブアプリとWebアプリを開発できるフレームワークに － Publickey 「Dart 2.5」が登場。GitHubのコードから機械学習させた賢いコード補完をVSCodeなどに提供 － Publickey Firefox 69.0.1, See All New Features, Updates and Fixes  「Firefox」v69.0.1が公開 ～不具合や脆弱性の修正が中心 - 窓の杜 Mozilla、「Firefox」のリリースサイクルを短縮 ～4週間ごとのメジャー更新へ - 窓の杜  Inkscape 1.0 beta1 available for testing | Inkscape Hugo 0.58.3: A couple of Bug Fixes | Hugo  バベルのインターネット  GitHub、米経済制裁によるアクセス制限について考え示す - ZDNet Japan  セキュリティ＆プライバシー関連  When Biology Becomes Software - Schneier on Security Pythonに電子メール取り扱い時の挙動に関する脆弱性 | Think IT（シンクイット） Another Side Channel in Intel Chips - Schneier on Security 「OpenSSL」に複数の脆弱性、アップデートリリース | Think IT（シンクイット）  OpenSSLに複数の脆弱性、アップデートを | マイナビニュース  キヤノン 一眼レフ6機種が外部から攻撃される可能性のある脆弱性を改善 | CAPA CAMERA WEB Cracking Forgotten Passwords - Schneier on Security Revisiting Software Vulnerabilities in the Boeing 787 - Schneier on Security New Biometrics - Schneier on Security  天文関連  ターゲットマーカ分離運用 | トピックス | JAXA はやぶさ２プロジェクト 2019年9月18日ニュース「宇宙観測史上最古の銀河形成の痕跡見つけた 東大、早大などのグループ」 | SciencePortal MIT Tech Review: 顔認識アルゴリズムでダークマター探し、チューリッヒ工科大 New observations help explain the dimming of Tabby's Star From clouds to craters / Mars Express / Space Science / Our Activities / ESA  壁紙にいかが？　火星の表面を北から南まで見渡せる縦長画像が公開 - sorae 宇宙へのポータルサイト   知財関連  The Xtream Codes IPTV Takedown is Complex and Confused - TorrentFreak Piracy Boosts Sales of Some Manga Comics, Research Shows - TorrentFreak  海賊版マンガは連載中の作品の売上にネガティブ、完結した作品にポジティブな効果をもたらすとの研究 | P2Pとかその辺のお話R   Linux または Ubuntu に関する話題  ［速報］Oracle Autonomous Linuxリリース。ダウンタイムなしで自律的にパッチ適用、チューニング実行、RHELと100％互換など。Oracle OpenWorld 2019 － Publickey Ubuntu 19.10 その21 - Ubuntu 20.04 LTSまで継続的に提供する32bit版パッケージとフィードバックの募集 - kledgeb Ubuntu 19.10 その22 - Mesa 19.2.0のテスト呼び掛け - kledgeb  その他  VScode+pandoc+Lualatexで日本語pdfをMarkdownから出力する - Qiita “メディア嫌い”がフェイクを支える、その処方箋と2029年の「人工メディア」：#ONA19 報告 | 新聞紙学的 SSH CA認証まとめ 米財務省、北朝鮮のハッカー集団を制裁対象に--「WannaCry」などに関与 - ZDNet Japan ブログ: 米国がエドワード・スノーデンに対して民事訴訟を起こす GitHub、Rails 6がリリースされてからわずか9日で移行を完了。短期間で問題なく移行できた理由とは？ － Publickey なぜ昨今のJavaScriptではイミュータブルであるべきと言えるのか歴史的背景を踏まえて言語化する - Qiita GitHubがセキュリティのためのコード分析ツールSemmleを買収 | TechCrunch Japan IT産業はタダ働きのエンジニアに依存しすぎている - GIGAZINE 少女人身売買のエプスタイン事件、テック業界の関わりは？ | ギズモード・ジャパン Stallman's final interview as FSF president: Last week we quizzed him over Microsoft visit. Now he quits top roles amid rape remarks outcry • The Register  ブログ: FSF理事としてのストールマンの最後のインタビュー: 先週、マイクロソフトの訪問について彼に質問しました。 今、彼はエプスタインの電子メールの嵐の中でトップの役割を辞めます  数式言語を使って、インタプリタとコンパイラの違いを説明してみる - Qiita インドが電子たばこを禁止、若者の健康への懸念を理由に | TechCrunch Japan 2019年9月20日ニュース「砂糖の取り過ぎがメタボになる原因が分かった 名大グループが解明」 | SciencePortal  "
    },
    {
      "title": "IT 業界の醜聞",
      "section": "remark",
      "description": "対岸の火事ほど面白い見世物はない。日本にも延焼すればいいのに。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/scandal/",
      "published": "2019-09-21T04:38:47+00:00",
      "update": "2019-09-23T09:41:02+00:00",
      "content": " この手の醜聞には全く興味がないのだが， Creative Commons の言い訳じみた記事を見て「これは面白いことになるか？」と思ってたらホンマに面白いことになっているようだ。\n対岸の火事ほど面白い見世物はない。 日本にも延焼すればいいのに。 せいぜいメディアの前で踊ってください（笑）\nちうわけでブックマークとしてまとめておく。\n How an Élite University Research Center Concealed Its Relationship with Jeffrey Epstein | The New Yorker  ブログ: どのように、エリート大学の研究センターがジェフリー・エプスタインとの関係を隠したか  Message to the Creative Commons Community Regarding Joi Ito - Creative Commons In 2011, Jeffrey Epstein Was A Known Sex Offender. Jeff Bezos, Elon Musk, And Sergey Brin Shared A Meal With Him Anyway  ブログ: 2011年、ジェフリー・エプスタインは周知の性犯罪者だったにも関わらず、Amazon、Google、Teslaの創設者たちは彼と食事を共にした  少女人身売買のエプスタイン事件、テック業界の関わりは？ | ギズモード・ジャパン Stallman's final interview as FSF president: Last week we quizzed him over Microsoft visit. Now he quits top roles amid rape remarks outcry • The Register  ブログ: FSF理事としてのストールマンの最後のインタビュー: 先週、マイクロソフトの訪問について彼に質問しました。 今、彼はエプスタインの電子メールの嵐の中でトップの役割を辞めます  ジェフリー・エプスタインからの寄付をめぐるMITメディアラボと伊藤穣一の火だるま状態はともかくとして、ローナン・ファローのタイムリーな新刊が出る - YAMDAS現更新履歴 A reflection on the departure of RMS - Thomas Bushnell, BSG - Medium  ブログ: RMSの辞任に関する意見   （本記事とはなんの関係もない）参考図書  ボヘミアの醜聞 原題: A Scandal in Bohemia ドイル アーサー・コナン 大久保 ゆう (翻訳)  1998-12-28 (Release 2014-09-17) 青空文庫 226 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  『シャーロック・ホームズの冒険』に収録された作品のひとつ。「あの女」アイリーン・アドラー登場。\nreviewed by Spiegel on 2019-09-21 (powered by aozorahack)\n  シャーロック・ホームズの冒険 (シャーロック・ホームズ全集 3) アーサー・コナン ドイル Arthur Conan Doyle (原著), Richard Lancelyn Green (原著), 小林 司 (翻訳), 東山 あかね (翻訳), 高田 寛 (翻訳) 河出書房新社 単行本 4309610439 (ASIN), 9784309610436 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「シャーロック・ホームズ」シリーズの邦訳はいくつかあるが，これはオックスフォード大学版の注釈や解説まで完備された濃い内容である。さすがシャーロッキアンは業が深い（笑）\nreviewed by Spiegel on 2019-09-21 (powered by PA-API)\n "
    },
    {
      "title": "Java 13 がリリース",
      "section": "release",
      "description": "個人的に注目点はなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/java-13-is-released/",
      "published": "2019-09-18T12:42:42+00:00",
      "update": "2019-09-18T12:43:23+00:00",
      "content": " 予定通り Java 13 がリリースされた。 OpenJDK および同系列の Java のみのショート・サイクルのバージョンアップである。\n Java 13 / JDK 13: General Availability  個人的に注目点はなし。 ミリ秒オーダーの GC とか今どきの処理系では遅すぎるだろう。\nそういえば，自宅マシンを Ubuntu に換装して以降，初めてのメジャーバージョンアップか。 結局，仕事以外で Java でプログラミングを行うことは殆どなかったし，これからもしないと思う1。\nOpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk13/5b8a42f3905b406298b72d750b6919f6/33/GPL/openjdk-13_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-13_linux-x64_bin.tar.gz $ sudo ln -s jdk-13 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;13\u0026#34; 2019-09-17 OpenJDK Runtime Environment (build 13+33) OpenJDK 64-Bit Server VM (build 13+33, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく2。\n    via Go 言語で Factory Method Pattern を構成できるか  うむうむ。 ちゃんと動くな。\nブックマーク  ［速報］Java 13が登場。ZGCの改善やSwitch式の実現など新機能。 Oracle Code One 2019 － Publickey Oracle、「Java 13」を発表 ～GCの改良やテキストブロック構文の追加などの機能改善 - 窓の杜\n Java 環境のリリースとサポートに関する覚え書き\n 結局 OpenJDK をインストールし直すことにした\n  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-API)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-API)\n  仕事以外で Java コードを書かなかったのは，うっかり守秘義務に抵触するコードを公開するのを避けるため。 Java 言語自身の問題ではない。これからも書かないというのは，今となっては「Java はやめておけ」と思うから（笑） [return] 2019-09-14 に PlantUML V1.2019.10 がリリースされている。 [return]   "
    },
    {
      "title": "Go の疑似乱数生成器は Goroutine-Safe ではないらしい（追記あり）",
      "section": "golang",
      "description": "件の記事では解決方法が（具体的には）示されていないので，いくつか対策を考えてみよう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/pseudo-random-number-generator/",
      "published": "2019-09-17T14:27:18+00:00",
      "update": "2019-09-19T16:33:14+00:00",
      "content": " 面白い記事みっけ！\n 【Go】rand.Sourceを並列で使いまわすなんて何事だ - Qiita  折角なので便乗記事を書いてみる。\nまぁ，内部状態を持つオブジェクトは，状態が変わらない（immutable）か操作が goroutine-safe であることが仕様・設計として明確であるものでない限り，複数の goroutine 間でインスタンスを共有してはいけない，というのは基本中の基本である。\nましてや標準の math/rand パッケージは rand.Source インタフェースを満たすのであればユーザ側で任意のアルゴリズムを用意することもできるので， goroutine-safe であることを期待するほうが間違っているとも言える。\nまずは，件の記事で書かれているコードを挙げておこう。 ただし動作に直接関係ないコードは極力省いている。\npackage main import ( \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; ) var randSource = NewRandSource() func NewRandSource() *rand.Rand { return rand.New(rand.NewSource(time.Now().UnixNano())) } func calcRand() { for i := 0; i \u0026lt; 10000; i++ { randSource.Intn(1000) } } func main() { wg := sync.WaitGroup{} for i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { calcRand() wg.Done() }() } wg.Wait() } ポイントは rand.Rand インスタンスを初期化時にひとつだけ生成し，複数の goroutine で使い回している点である。 これを実行すると以下のように panic を吐く。\n$ go run -trimpath sample.go panic: runtime error: index out of range [-1] goroutine 94 [running]: math/rand.(*rngSource).Uint64(...) math/rand/rng.go:249 math/rand.(*rngSource).Int63(0xc000083500, 0x50321535775976c1) math/rand/rng.go:234 +0x93 math/rand.(*Rand).Int63(...) math/rand/rand.go:85 math/rand.(*Rand).Int31(...) math/rand/rand.go:99 math/rand.(*Rand).Int31n(0xc000088090, 0x3e8, 0x1fd) math/rand/rand.go:134 +0x5f math/rand.(*Rand).Intn(0xc000088090, 0x3e8, 0x1fd) math/rand/rand.go:172 +0x45 main.calcRand() sample@/sample.go:17 +0x3f main.main.func1(0xc000098000) sample@/sample.go:26 +0x22 created by main.main sample@/sample.go:25 +0x78 exit status 2 panic が発生する仕組みは件の記事に分かりやすく解説されているので参照のこと。\ngoroutine ごとにインスタンスを生成する 件の記事では解決方法が（具体的には）示されていないので，こちらでいくつか考えてみよう。\n一番簡単なのは goroutine ごとに rand.Rand インスタンスを生成することだ。 こんな感じに変えたらどうだろう。\nfunc calcRand(rnd* rand.Rand) {  for i := 0; i \u0026lt; 10000; i++ { rnd.Intn(1000)  } } func main() { wg := sync.WaitGroup{} for i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { calcRand(NewRandSource())  wg.Done() }() } wg.Wait() } これで必要十分に機能するし，少なくとも panic は起こらない。 このやり方の欠点は（goroutine ごとに rand.Rand インスタンスが生成されるため）元のコードより（僅かだが）高コストになることと，疑似乱数生成器の性能がアルゴリズムだけでなく seed の選び方にも依存する，というあたりだろうか。\nまぁ math/rand の標準アルゴリズム1 であれば性能に関してはさしたる問題にはならないだろう。\nGenerator Pattern を使う 今回の例ではあまりオススメではないのだが，並行処理の Generator Pattern を使う手もある。\nまず NewRandSource() 関数を以下の関数で置き換える。\nfunc NewGenerator() \u0026lt;-chan int { rnd := rand.New(rand.NewSource(time.Now().UnixNano())) ch := make(chan int) go func() { defer close(ch) for { ch \u0026lt;- rnd.Intn(1000) } }() return ch } こうすれば rand.Rand インスタンスはひとつで済むし（seed もひとつ），持ち回すインスタンスは channel のみなので goroutine-safe にできる。 乱数の取り出し側はこう書き換えればよい。\nfunc calcRand(gen \u0026lt;-chan int) {  for i := 0; i \u0026lt; 10000; i++ { if _ , ok := \u0026lt;-gen; !ok { return }  } } func main() { wg := sync.WaitGroup{} gen := NewGenerator()  for i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { calcRand(gen)  wg.Done() }() } wg.Wait() } このコードの欠点は「遅い」ことに尽きる。 まぁ channel の読み書きで同期を取る必要があるから遅くなって当たり前だけど。\n今回のようなケースではなく，例えば generator がハードウェア制御を伴うものだったり singleton を含む処理だったり channel の読み書きにかかるコストに対して他の処理が相対的に大きくなったり ...などなど，状況によっては Generator Pattern のほうが有利になる場合もあるだろう。\nGenerator Pattern は平行処理のデザインパターンの中では比較的単純なものだが応用範囲が広い。 Go 言語の goroutine 自体は（OS スレッドなどと比べて）かなり安価で手軽に構成できるので，積極的に試してみるといいと思う。\nおまけの追記 そうそう。 上の NewGenerator() 関数で生成・駆動される goroutine は自力で終了できない。 なので，以下のように\nfunc NewGenerator(ctx context.Context) \u0026lt;-chan int { rnd := rand.New(rand.NewSource(time.Now().UnixNano())) ch := make(chan int) go func() { defer close(ch) for { select { case \u0026lt;-ctx.Done(): return default: ch \u0026lt;- rnd.Intn(1000) } } }() return ch } 外部からキャンセルイベントを流し込めるようにするといいかもしれない。\n【2019-09-20 追記】 実は標準で Goroutine-Safe な疑似乱数生成器が用意されていた あれから math/rand のソースコードを眺めてて気がついたのだが，実は goroutine-safe な疑似乱数生成器が標準で用意されていた。\nたとえば rand.Intn() 関数を見ると\n// Intn returns, as an int, a non-negative pseudo-random number in [0,n) // from the default Source. // It panics if n \u0026lt;= 0. func Intn(n int) int { return globalRand.Intn(n) } とか書かれていて，じゃあ globalRand って何なん？ と思って見てみたら\ntype lockedSource struct { lk sync.Mutex src Source64 } func (r *lockedSource) Int63() (n int64) { r.lk.Lock() n = r.src.Int63() r.lk.Unlock() return } func (r *lockedSource) Uint64() (n uint64) { r.lk.Lock() n = r.src.Uint64() r.lk.Unlock() return } func (r *lockedSource) Seed(seed int64) { r.lk.Lock() r.src.Seed(seed) r.lk.Unlock() } ... var globalRand = New(\u0026amp;lockedSource{src: NewSource(1).(Source64)}) とか書かれているわけですよ。 なんだ，ちゃんと sync.Mutex で排他制御してるんぢゃん。\nというわけで，最初のコードは\npackage main import ( \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; ) func calcRnad() { for i := 0; i \u0026lt; 10000; i++ { rand.Intn(1000) } } func main() { rand.Seed(time.Now().UnixNano()) wg := sync.WaitGroup{} for i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { calcRnad() wg.Done() }() } wg.Wait() } と書けば panic を吐くことなくちゃんと終了する。 若干遅くはなるけど，それでも Generator Pattern を使うよりは全然速い。\nブックマーク  Go の channel 処理パターン集\n モンテカルロ法による円周率の推定（その4 PRNG）\n  参考図書  Go言語による並行処理 Katherine Cox-Buday 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この本を読んで「よっしゃ，明日から立派な goroutine 使いだ！」とはならないと思うけど，有象無象なコピペ・プログラマじゃなく，きちんと Go 言語のプログラミングを勉強したいのであれば，この本は必読書になると思う。\nreviewed by Spiegel on 2018-11-03 (powered by PA-API)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  math/rand パッケージに実装されている擬似乱数生成器はラグ付フィボナッチ法（Lagged Fibonacci Generator）のバリエーションらしい。 [return]   "
    },
    {
      "title": "rakyll/statik でシングルバイナリにまとめる",
      "section": "golang",
      "description": "ずいぶん前に紹介した jessevdk/go-assets はもうメンテされてないらしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/using-statik-package/",
      "published": "2019-09-15T10:51:22+00:00",
      "update": "2019-09-15T10:52:15+00:00",
      "content": " 以前紹介した『改訂2版 みんなのGo言語』を読んで知ったのだが，これまたずいぶん前に紹介した jessevdk/go-assets はもうメンテされてないらしい。 確かにリポジトリを見ると3年前（2016年）から更新されてないな。\nというわけで『改訂2版 みんなのGo言語』を見ながら rakyll/statik を試してみるとしよう。\nrakyll/statik のダウンロードとビルド rakyll/statik のダウンロードとビルドは以下の通り。\n$ go get github.com/rakyll/statik@latest go: finding github.com/rakyll/statik v0.1.6 go: downloading github.com/rakyll/statik v0.1.6 go: extracting github.com/rakyll/statik v0.1.6 おー。 外部パッケージは使わないのか。 善き哉。\nビルドが成功すれば $GOPATH/bin ディレクトリに statik コマンドがインストールされる。\n$ statik -h Usage of statik: -Z\tDo not use compression to shrink the files. -c string The package comment. An empty value disables this comment. (default \u0026#34;Package statik contains static assets.\u0026#34;) -dest string The destination path of the generated package. (default \u0026#34;.\u0026#34;) -f\tOverwrite destination file if it already exists. -m\tIgnore modification times on files. -p string Name of the generated package (default \u0026#34;statik\u0026#34;) -src string The path of the source directory. (default \u0026#34;public\u0026#34;) -tags string Write build constraint tags rakyll/statik によるソース・コードの生成と組み込み 今回の構成は以下の通り（ちなみにモジュール名は sample で）。\n$ tree . . ├── go.mod ├── html │ └── index.html └── sample.go このうち html ディレクトリ以下のファイルを実行バイナリに組み込む。\n$ statik -src html これで statik/statik.go が生成される。 中身はこんな感じ。\n// Code generated by statik. DO NOT EDIT.  // Package statik contains static assets. package statik import ( \u0026#34;github.com/rakyll/statik/fs\u0026#34; ) func init() { data := \u0026#34;PK\\x03\\x04\\x14\\x00\\x08\\x00\\x08\\x00\\x92=/O\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\n\\x00\t\\x00index.htmlUT\\x05\\x00\\x01\\xe5\\xeb}]\\\\\\x8e1\\xcb\\xc2@\\x0c@\\xe7\\xaf\\xbf\\xe2z\\xf3W\\x8a\\x9bC\\xae\\x8b\\nn:\\x08\\xe2\\x18\\xef\\\u0026#34;\\x0d\\xa4w\\xa5\\x8d-\\xfe{i\\x0f\\x1d\\x9cB^\\x1e\\xe1A\\xb9?\\xed.\\xb7\\xf3\\xc1\\xb4\\xdaIS\\xc0g\\x10\\x86\\xa6\\xf8\\x83\\x8e\\x14\\x8doq\\x18I\\x9d}\\xea\\xa3\\xda\\xda/\\x8f\\xd8\\x91\\xb3\\x13\\xd3\\xdc\\xa7A\\xad\\xf1)*Euv\\xe6\\xa0\\xad\\x0b4\\xb1\\xa7j]\\xfe\\x0dGVF\\xa9F\\x8fBn\\xb3~QV\\xa1\\xe6H\\\u0026#34;\\xc9\\\\\\xd3 \\xa1\\x84:\\xb3\\x02\\xea\\x9c\\x00\\xf7\\x14^\\x8b\\xdb\\xffx\\xfd\\xe2\\xe4#\\xd4k\\xf5;\\x00\\x00\\xff\\xffPK\\x07\\x08\\x13\\xf25U\\x97\\x00\\x00\\x00\\xcc\\x00\\x00\\x00PK\\x01\\x02\\x14\\x03\\x14\\x00\\x08\\x00\\x08\\x00\\x92=/O\\x13\\xf25U\\x97\\x00\\x00\\x00\\xcc\\x00\\x00\\x00\\n\\x00\t\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xa4\\x81\\x00\\x00\\x00\\x00index.htmlUT\\x05\\x00\\x01\\xe5\\xeb}]PK\\x05\\x06\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x00A\\x00\\x00\\x00\\xd8\\x00\\x00\\x00\\x00\\x00\u0026#34; fs.Register(data) } html/index.html ファイルの中身は圧縮されて格納されるようだ。 -Z オプションで圧縮を解除できるが，まぁ普通は圧縮するだろう（笑）\n生成された statik サブパッケージを使って以下のように HTTP サーバを構成してみる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; _ \u0026#34;sample/statik\u0026#34; \u0026#34;github.com/rakyll/statik/fs\u0026#34; ) func main() { fmt.Println(\u0026#34;Open http://localhost:3000/\u0026#34;) fmt.Println(\u0026#34;Press ctrl+c to stop\u0026#34;) statikFs, err := fs.New() if err != nil { fmt.Fprintln(os.Stderr, err) return } http.Handle(\u0026#34;/\u0026#34;, http.FileServer(statikFs)) if err := http.ListenAndServe(\u0026#34;:3000\u0026#34;, nil); err != nil { fmt.Fprintln(os.Stderr, err) } } これで\n$ go run sample.go Open http://localhost:3000/ Press ctrl+c to stop としてサーバを起動しブラウザで http://localhost:3000/ にアクセスすれば html/index.html ファイルの内容が表示される。\nstatik/fs.New() 関数は http.FileSystem インスタンスを返す。 http.FileSystem は interface 型で，以下のように定義されている。\n// A FileSystem implements access to a collection of named files. // The elements in a file path are separated by slash (\u0026#39;/\u0026#39;, U+002F) // characters, regardless of host operating system convention. type FileSystem interface { Open(name string) (File, error) } http.File も interface 型で，以下のように定義されている。\n// A File is returned by a FileSystem\u0026#39;s Open method and can be // served by the FileServer implementation. // // The methods should behave the same as those on an *os.File. type File interface { io.Closer io.Reader io.Seeker Readdir(count int) ([]os.FileInfo, error) Stat() (os.FileInfo, error) } つまり rakyll/statik パッケージで生成されるファイルシステムを使えばこれだけの操作ができるということだ。 上手く使っていきたい。\ngo generate コマンドによるソース・コードの生成 // コメントに go:generate マーカを使うことにより go generate コマンドで statik コマンドを呼び出せる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; _ \u0026#34;sample/statik\u0026#34; \u0026#34;github.com/rakyll/statik/fs\u0026#34; ) //go:generate statik -src html  func main() { fmt.Println(\u0026#34;Open http://localhost:3000/\u0026#34;) fmt.Println(\u0026#34;Press ctrl+c to stop\u0026#34;) statikFs, err := fs.New() if err != nil { fmt.Fprintln(os.Stderr, err) return } http.Handle(\u0026#34;/\u0026#34;, http.FileServer(statikFs)) if err := http.ListenAndServe(\u0026#34;:3000\u0026#34;, nil); err != nil { fmt.Fprintln(os.Stderr, err) } }  $ go generate $ go run sample.go Open http://localhost:3000/ Press ctrl+c to stop go generate コマンドは明示的に行う必要があるので注意。\nブックマーク  Goのバイナリに静的ファイルを埋め込むツール assets-life を書いた : 自コードを Quine として埋め込むらしい。面白い！  参考図書  改訂2版 みんなのGo言語 松木 雅幸, mattn, 藤原 俊一郎, 中島 大一, 上田 拓也, 牧 大輔, 鈴木 健太 技術評論社 2019-08-01 (Release 2019-08-01) Kindle版 B07VPSXF6N (ASIN), 9784297107284 (EISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  改訂2版の目玉は7章の「データベースの扱い方」が追加されたことだろう。他の章では，大まかな構成は1版と同じだが細かい部分が変わっていて Go 1.12 への言及まであるのには驚いた。\nreviewed by Spiegel on 2019-08-12 (powered by PA-API)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "Firefox の DoH は無効にすべきか（もしくは水売りと水道局）",
      "section": "remark",
      "description": "これは ISPA の言いがかりみたいな話ではなく，現在のインターネットの構造，ひいては社会システムに連動する問題提起だ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/should-disable-doh-in-firefox/",
      "published": "2019-09-15T01:31:39+00:00",
      "update": "2019-09-21T03:45:13+00:00",
      "content": " 先日 Mozilla が DoH (DNS-over-HTTPS) を Firefox に正式に実装するとアナウンスがあったが\n What’s next in making Encrypted DNS-over-HTTPS the Default - Future Releases Mozilla Firefox to begin slow rollout of DNS-over-HTTPS by default at the end of the month • The Register FirefoxがDNSとの通信を暗号化する「DNS over HTTPS(DoH)」を正式に実装すると発表 - GIGAZINE  これに懸念を呈する面白い記事がある。\n ungleich blog - Turn off DoH, Firefox. Now. （邦訳版）  これは ISPA の言いがかりみたいな話ではなく，現在のインターネットの構造，ひいては社会システムに連動する問題提起だ。\nそもそも件のブログ記事は DoH 自体には反対していない。\nDoH and DoT (DNS over TLS) are in general good technologies as they add encryption to an important process of daily life. However the approach Mozilla takes is simply wrong. The correct way would be to standardise DoH and DoT and add support into it into automatic address configurations and operating systems. Not in applications! via Turn off DoH, Firefox. Now.  そして，問題は DoH が組み込まれる Firefox がアプリケーションに過ぎないこと， DoH のホストとして米国の Cloudflare を利用していることだと主張している。\nIt means people outside the US can now be fully tracked by US government via Turn off DoH, Firefox. Now.  whether you trust Cloudflare or not, you'll end up directly supporting centralisation by using DoH in Firefox. Centralisation makes us depend on one big player, which results in fewer choices and less innovation. Centralisation affects everybody by creating a dangerous power and resource imbalance between the center and the rest. via Turn off DoH, Firefox. Now.  これで思い出すのが，かつて言われた「水のような音楽」というやつだ。\nもともと「水のような音楽」は DRM (Digital Right Management) で貞操帯のごとくがんじ搦めにされたコンテンツに対するアンチテーゼのようなものだった。\n もう一つは既存のサービスを残したままで、新しい DRM フリーの高品質サービスが提供されること。手軽にアクセスできる安価な水道水がある一方で、より質を重視する人にはそれより値がはるミネラルウォーターも提供されるという「水のような音楽」モデルじゃないですか。 via EMIのDRMとの決別は「水のような音楽」への大きな一歩か - YAMDAS現更新履歴  しかし，音楽にしろ映像にしろ，無料または定額制のストリーミングサービスが一般化し「水のような音楽」が合法的に利用できるようになって分かったことは 「水道水はミネラルウォーターより統制しやすい」 といういうことだった。\n言ってみれば「水」を売るのが「水売り」から「水道局」に代わっただけで，むしろ「水道局」のほうが中央集権的で統制に向いているのは明らかである。 いずれにしろ利用者に自由なんてものはないのだ。\nこれは音楽や映像といったコンテンツに限らず電子メール等のメッセージング・サービスや（マイクロ）ブログにも言えることで，今回の Firefox への DoH 実装は インターネットによる統制 を更に更に推し進めていくだろう，というわけだ。\nそういう意味でも ISPA の言いがかりはホンマに言いがかりなんだなぁ，と思ってしまう。\nちなみに件のブログでは\nIt is clear what Mozilla needs to do: Mozilla can and should revert the change and allow users to easily opt-in. And to select or enter the DoH provider instead of defaulting to Cloudflare. Also Mozilla can take real responsibility and work together with the Internet community and create RFCs to make DHCPv4, DHCPv6 and Router Advertisements support DNS URLs instead of just IP addresses. via Turn off DoH, Firefox. Now.  と書かれていて，これに関しては激しく同意する。\nそういえば最近 Firefox 69 がリリースされて\n Today’s Firefox Blocks Third-Party Tracking Cookies and Cryptomining by Default - The Mozilla Blog  一瞬喜んだが，私のケータイは 68.x から一向にアップグレードされる気配がない。\nはっきり言おう。\nMozilla がユーザのプライバシーを重視しているというのは嘘っぱちである 本当に Mozilla がユーザのプライバシーを重視しているというのなら，検索サービスの既定を DuckDuckGo にすべき。 話はそれからだ。\nブックマーク  Blocking Firefox DoH with Bind - SANS Internet Storm Center Encrypted DNS Could Help Close the Biggest Privacy Gap on the Internet. Why Are Some Groups Fighting Against It? | Electronic Frontier Foundation\n DNS暗号化はプライバシーギャップの克服にきわめて有効……なのになぜ反対の声が上がっているのか？ | P2Pとかその辺のお話R  監視をコントロールする\n  参考文献  超監視社会 ブルース・シュナイアー 池村 千秋 (翻訳) 草思社 2016-12-13 (Release 2017-02-03) Kindle版 B01MZGVHOA (ASIN)  実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。\nreviewed by Spiegel on 2019-03-23 (powered by PA-API)\n  デジタル音楽の行方 David Kusek, Gerd Leonhard, yomoyomo yomoyomo (翻訳), 津田 大介 (翻訳) 翔泳社 2005-12-06 単行本 4798110035 (ASIN), 9784798110035 (EAN)  読んでない。絶賛絶版中？ もはや歴史的価値の有無さえ不明。「デジタル」とタイトルに冠されているにも関わらず Kindle 化すらされてないことに出版側のやる気を感じる（笑）\nreviewed by Spiegel on 2017-07-30 (powered by PA-API)\n "
    }
  ]
}
