{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "ベテルギウスはあと10万年はたたかえる（笑）",
      "section": "remark",
      "description": "ベテルギウスについてはこれからも観測と議論が続くだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/betelgeuse/",
      "published": "2020-10-17T06:00:51+00:00",
      "update": "2020-10-17T06:03:12+00:00",
      "content": "昨年末から天文ファンに話題を振りまいているオリオン座のベテルギウスだが\n ベテルギウスの息継ぎ  おかげさまでより詳細な観測が行われるようになった結果，今まで考えられていたより少しだけ私達の太陽系から近い位置にあるらしいことが分かったそうな。\n Supergiant star Betelgeuse smaller, closer than first thought  この記事によると\n\u0026ldquo;The actual physical size of Betelgeuse has been a bit of a mystery—earlier studies suggested it could be bigger than the orbit of Jupiter. Our results say Betelgeuse only extends out to two thirds of that, with a radius 750 times the radius of the sun,\u0026rdquo; Dr. Molnár said.\n\u0026ldquo;Once we had the physical size of the star, we were able to determine the distance from Earth. Our results show it\u0026rsquo;s a mere 530 light years from us—25 percent closer than previous thought.\u0026rdquo;\n via Supergiant star Betelgeuse smaller, closer than first thought  とのこと。 つってもねぇ\u0026hellip;\nベテルギウスの距離は年周視差を使って計測されていたが，元より誤差が大きくてあまり信用されてないのですよ。\nちなみに『理科年表 2020』には498光年とあり1，注釈で「誤差が10%を越える」とある。 更に『天文年鑑 2020年版』に至っては430光年と書かれている。 これらのカタログスペックを見慣れている人には「530光年って別に近くなってないよな。つか大体あってる」って感じである（笑）\nで，注目なのは，今回の観測で\n\u0026ldquo;It\u0026rsquo;s burning helium in its core at the moment, which means it\u0026rsquo;s nowhere near exploding,\u0026rdquo; Dr. Joyce said.\n\u0026ldquo;We could be looking at around 100,000 years before an explosion happens.\u0026rdquo;\n via Supergiant star Betelgeuse smaller, closer than first thought  てなことが分かったそうで，10年どころかあと10万年は余裕で戦えるらしい（笑）\nベテルギウスについてはこれからも観測と議論が続くと思うけど，こうやって知見が深まるのはよいことだと思う。\n参考図書  理科年表 2020 国立天文台 (編集) 丸善出版 2019-11-20 文庫 4621304259 (ASIN), 9784621304259 (EAN), 4621304259 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  日本における令和への改元や国際単位系（SI）の定義改定などに関するトピックを多く掲載。2020年版は（保存用として）買いかも。\nreviewed by Spiegel on 2019-12-08 (powered by PA-APIv5)\n  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n  天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいる。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\n  機動戦士ガンダム 富野喜幸 (監督), 株式会社サンライズ (プロデュース)  Prime Video B00FYJ1MMC (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  これのおかげでアニメで戦争論を語る馬鹿（オタク）が増えたと言われる歴史的作品（笑）\nreviewed by Spiegel on 2020-10-17 (powered by PA-APIv5)\n   改訂ヒッパルコス星表（2007）の年周視差から計算。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ランダムな文字列を生成する",
      "section": "golang",
      "description": "というわけで math/rand と crypto/rand はトレードオフの関係にある。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/random-string/",
      "published": "2020-10-16T05:24:30+00:00",
      "update": "2020-10-16T07:52:49+00:00",
      "content": "疑似乱数に関して面白い記事を見つけたので紹介しつつ，こちらでも試してみる。\n Go言語でランダムな文字列を作ってみる najeira/randstr: Generate random string using crypto/rand and math/rand for Go  お題はこんな感じ：\n 英数字62文字（a-zA-Z0-9）からランダムに1文字ずつとって指定の長さの文字列を作成する 同じ文字を何度使ってもよい  また，この記事における前提として，以下の interface 型および定数が定義済みであるとする。\npackage randstr type Random interface { String(int) string } const ( letterBytes = \u0026#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#34; letterBytesLen = len(letterBytes) letterIdxBits = 6 // 6 bits to represent a letter index  letterIdxMask = 1\u0026lt;\u0026lt;letterIdxBits - 1 // All 1-bits, as many as letterIdxBits  letterIdxMax = 63 / letterIdxBits // # of letter indices fitting in 63 bits ) じゃあ，いってみようか\nmath/rand パッケージによる実装 まずは math/rand パッケージを使った実装から。 これについては以下のページの議論が参考になる。\n How to generate a random string of a fixed length in Go? - Stack Overflow  これを参照しつつ，過程をすっ飛ばして最終的に以下のコードにしてみた。\npackage randstr import ( \u0026#34;math/rand\u0026#34; \u0026#34;unsafe\u0026#34; ) type MathRandom struct { src rand.Source } func NewMathRandom(seed int64) Random { return \u0026amp;MathRandom{src: rand.NewSource(seed)} } func (mr *MathRandom) String(len int) string { b := make([]byte, len) for i, cache, rest := 0, mr.src.Int63(), letterIdxMax; i \u0026lt; len; rest-- { if rest \u0026lt;= 0 { cache, rest = mr.src.Int63(), letterIdxMax } if idx := int(cache \u0026amp; letterIdxMask); idx \u0026lt; letterBytesLen { b[i] = letterBytes[idx] i++ } cache \u0026gt;\u0026gt;= letterIdxBits } return *(*string)(unsafe.Pointer(\u0026amp;b)) } Int63() メソッドで63ビット分の乱数を取って6ビットずつ切り出して使うイメージ。 ただし参照する letterBytes が62文字分なのに対し6ビット整数では 0-63 まであるので，値がはみ出る場合は取得した6ビット乱数を捨てている。 letterBytes に適当な記号を2文字足してやればロスは無くなるだろうが，お題から外れるので今回は割愛する。\n最後の\nreturn *(*string)(unsafe.Pointer(\u0026amp;b)) は少々トリッキーだが []byte インスタンスをコピーなしに string 型にキャストするための「お呪い (おまじない) 」だと思えばいい1。\n文字通り unsafe な操作なので，乱用して「呪い (のろい) 」にならないようご注意を（笑）\ncrypto/rand パッケージによる実装 次は crypto/rand パッケージを使った実装。\ncrypto/rand パッケージでは乱数の生成に専用デバイスを使う。\nOn Linux and FreeBSD, Reader uses getrandom(2) if available, /dev/urandom otherwise. On OpenBSD, Reader uses getentropy(2). On other Unix-like systems, Reader reads from /dev/urandom. On Windows systems, Reader uses the CryptGenRandom API. On Wasm, Reader uses the Web Crypto API. via rand - The Go Programming Language  そのため math/rand と比べてどうしても処理速度が遅くなる。 したがって rand.Read() 関数の呼び出し回数を抑えるよう実装するのがコツである。\n最初に挙げた記事を参考にしつつ，こんな感じでどうだろう。\npackage randstr import ( \u0026#34;crypto/rand\u0026#34; \u0026#34;unsafe\u0026#34; ) type CryptoRandom struct{} func NewCryptoRandom() Random { return \u0026amp;CryptoRandom{} } func (cr *CryptoRandom) String(len int) string { b := make([]byte, len) for i, offset, size, rest := 0, 0, 0, 0; i \u0026lt; len; rest-- { //fmt.Println(i, offset, size, rest)  if rest \u0026lt;= 0 { offset = i var err error size, err = rand.Read(b[offset:]) if err != nil || size \u0026lt;= 0 { return \u0026#34;\u0026#34; } rest = size } if idx := int(b[offset+(size-rest)] \u0026amp; letterIdxMask); idx \u0026lt; letterBytesLen { b[i] = letterBytes[idx] i++ } } return *(*string)(unsafe.Pointer(\u0026amp;b)) } インタフェースを合わせるためにエラーハンドリングをサボっているが，ご容赦を。\nrand.Read() 関数で乱数をいったんバッファに展開し，その後文字に置き換えていく。 ただし letterBytes からはみ出る場合はその値を捨てて，捨てた分をまとめて rand.Read() 関数で再取得する，という動作を繰り返している。\nベンチマークをとってみる んじゃあ，これらのコードを使ってベンチマークをとってみよう。 こんなテスト・コードでどうだろう。\npackage randstr_test import ( \u0026#34;randstr\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;time\u0026#34; ) const ( len64 = 64 len128 = 128 max512 = len64 * 8 max1024 = len128 * 8 ) func BenchmarkRandomStringMath64t8(b *testing.B) { r := randstr.NewMathRandom(time.Now().UnixNano()) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { for n := 0; n \u0026lt; max512/len64; n++ { _ = r.String(len64) } } } func BenchmarkRandomStringMath512(b *testing.B) { r := randstr.NewMathRandom(time.Now().UnixNano()) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = r.String(max512) } } func BenchmarkRandomStringMath128t8(b *testing.B) { r := randstr.NewMathRandom(time.Now().UnixNano()) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { for n := 0; n \u0026lt; max1024/len128; n++ { _ = r.String(len128) } } } func BenchmarkRandomStringMath1024(b *testing.B) { r := randstr.NewMathRandom(time.Now().UnixNano()) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = r.String(max1024) } } func BenchmarkRandomStringCrypto64t8(b *testing.B) { r := randstr.NewCryptoRandom() b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { for n := 0; n \u0026lt; max512/len64; n++ { _ = r.String(len64) } } } func BenchmarkRandomStringCrypto512(b *testing.B) { r := randstr.NewCryptoRandom() b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = r.String(max512) } } func BenchmarkRandomStringCrypto128t8(b *testing.B) { r := randstr.NewCryptoRandom() b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { for n := 0; n \u0026lt; max1024/len128; n++ { _ = r.String(len128) } } } func BenchmarkRandomStringCrypto1024(b *testing.B) { r := randstr.NewCryptoRandom() b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = r.String(max1024) } } 処理内容を表にするとこんな感じ。\n   テスト名 使用パッケージ 処理内容     BenchmarkRandomStringMath64t8 math/rand 64バイト文字列生成×8   BenchmarkRandomStringMath512 math/rand 512バイト文字列生成   BenchmarkRandomStringMath128t8 math/rand 128バイト文字列生成×8   BenchmarkRandomStringMath1024 math/rand 1,024バイト文字列生成   BenchmarkRandomStringCrypto64t8 crypto/rand 64バイト文字列生成×8   BenchmarkRandomStringCrypto512 crypto/rand 512バイト文字列生成   BenchmarkRandomStringCrypto128t8 crypto/rand 128バイト文字列生成×8   BenchmarkRandomStringCrypto1024 crypto/rand 1,024バイト文字列生成    では実際に動かしてみよう。\n$ go test -bench RandomString -benchmem goos: linux goarch: amd64 pkg: randstr BenchmarkRandomStringMath64t8-4 641556 1616 ns/op 512 B/op 8 allocs/op BenchmarkRandomStringMath512-4 899421 1386 ns/op 512 B/op 1 allocs/op BenchmarkRandomStringMath128t8-4 357760 3093 ns/op 1024 B/op 8 allocs/op BenchmarkRandomStringMath1024-4 407550 2820 ns/op 1024 B/op 1 allocs/op BenchmarkRandomStringCrypto64t8-4 81285 14320 ns/op 512 B/op 8 allocs/op BenchmarkRandomStringCrypto512-4 241180 4827 ns/op 512 B/op 1 allocs/op BenchmarkRandomStringCrypto128t8-4 64815 18358 ns/op 1024 B/op 8 allocs/op BenchmarkRandomStringCrypto1024-4 149160 8212 ns/op 1024 B/op 1 allocs/op PASS ok randstr 10.851s これも表にまとめてみる。 処理回数でソートしているのでご注意を。\n   使用パッケージ 処理内容 ns/op Alloc\nSize Alloc\nCount Ratio     math/rand 64バイト文字列生成×8 1,616 512 8 1.0   math/rand 128バイト文字列生成×8 3,093 1024 8 1.9   crypto/rand 64バイト文字列生成×8 14,329 512 8 8.9   crypto/rand 128バイト文字列生成×8 18,358 1024 8 11.3           math/rand 512バイト文字列生成 1,386 512 1 1.0   math/rand 1,024バイト文字列生成 2,820 1024 1 2.0   crypto/rand 512バイト文字列生成 4,827 512 1 3.5   crypto/rand 1,024バイト文字列生成 8,212 1024 1 5.9    math/rand パッケージを使った実装は分かりやすい。 文字列が長くなると処理時間が長くなり，アロケーション回数が多いと更に時間がかかる。\ncrypto/rand パッケージについては，やはりメソッドの呼び出し回数がボトルネックになっているようだ。 文字列の長さやアロケーション回数の影響を大きく上回っている。\nmath/rand パッケージを使った実装でも Read() メソッドでまとめて乱数を取得したほうが速くなるんじゃね？ って思うよね。 私も思った。 ので，実際に試してベンチマークもとったのだが， Int63() メソッドで63ビットずつ取るほうが速いのよ，これが。\nまぁ，中身を見れば分かるが，math/rand パッケージの Read() メソッドは中で Int63() メソッドを呼び出して8ビットずつ切り分けているだけなので，そのオーバヘッド分だけ遅くなってしまうようだ。 残念！\n 科学技術用の疑似乱数生成器と暗号技術用の乱数生成器 科学技術用の疑似乱数生成器と暗号技術用の乱数生成器では求められる要件が異なる。\n科学技術用の疑似乱数生成器で最重要なのは「高次元均等分布」な乱数を生成できることで，その次に重要なのは高速に乱数が生成できることである。\n一方，暗号技術用の乱数生成器で最重要なのは「予測困難性」である。\nたとえば，科学技術用の疑似乱数生成器の多くは，アルゴリズムで乱数を生成するため，起点となる seed が決まれば生成される値が確定してしまう。 これが科学技術用の疑似乱数生成器が暗号技術には向かないとされる理由だ。\nしかし，現時点の技術で「予測困難」な乱数を作るためには何らかの方法で外乱要素（またはエントロピー源）を組み込む必要があるため2，どうしても乱数の生成速度が遅くなる。 大量の乱数を必要とする科学技術計算には向かないわけだ。\nというわけで math/rand と crypto/rand はトレードオフの関係にある。 上手く使い分けて欲しい。\nブックマーク  モンテカルロ法による円周率の推定（その4 PRNG） Go の疑似乱数生成器は Goroutine-Safe ではないらしい（追記あり） 疑似乱数生成器 spiegel-im-spiegel/mt  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n  Goならわかるシステムプログラミング 渋川 よしき (著), ごっちん (イラスト) ラムダノート 2017-10-23 単行本（ソフトカバー） 4908686033 (ASIN), 9784908686030 (EAN), 4908686033 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ファイルやソケットなどに代表される順次アクセスの汎化である io.Reader / io.Writer およびその派生・特化クラス，またプロセスやスレッドに関する解説が秀逸だと思う。さらに Docker コアの libcontainer についても解説がある。\nreviewed by Spiegel on 2018-10-19 (powered by PA-APIv5)\n  改訂2版 みんなのGo言語 松木 雅幸 (著), mattn (著), 藤原 俊一郎 (著), 中島 大一 (著), 上田 拓也 (著), 牧 大輔 (著), 鈴木 健太 (著) 技術評論社 2019-08-01 (Release 2019-08-01) Kindle版 B07VPSXF6N (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  改訂2版の目玉は7章の「データベースの扱い方」が追加されたことだろう。他の章では，大まかな構成は1版と同じだが細かい部分が変わっていて Go 1.12 への言及まであるのには驚いた。\nreviewed by Spiegel on 2019-08-12 (powered by PA-APIv5)\n   *(*string)(unsafe.Pointer(\u0026amp;b)) なキャストは strings.Builder の String() メソッドで使われている手法の丸パクリだったりする（笑） \u0026#x21a9;\u0026#xfe0e;\n /dev/urandom はハードウェア・デバイスから十分なエントロピー源が得られない場合は内部で疑似乱数生成器を使用する。このため一時は /dev/urandom の脆弱性が疑われたが，現時点では事実上は問題ないとされている。一方で，スマートデバイスのような場合はハードウェア・デバイスからのエントロピー源だけでは外部から推測され易いため，性能のよい疑似乱数生成器を組み合わせるほうが有効になる場合もあるようだ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ちょこっと SEO",
      "section": "remark",
      "description": "サイト内 S/N 比を上げるための SEO はアリなんじゃないかというわけで，このブログサイトを少し整理することにした。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/seo/",
      "published": "2020-10-15T06:52:10+00:00",
      "update": "2020-10-15T23:10:05+00:00",
      "content": "正直に告白します。 今まで SEO (Search Engine Optimization) を馬鹿にしてました。 怪しげな Web 開発会社やコンサルタントが競馬の予想屋の如き呪文を唱えて哀れな子羊からお金を掠め取るのが SEO だと思ってました。\nでも Zenn 公式の\n ユーザー投稿型サービスのSEO対策  を読んで目から鱗が落ちました。 検索サービスに媚びる SEO ではなく，検索サービス経由で来るユーザから見て，サイト内 S/N 比を上げる（ノイズを検索クローラに拾わせない）ための SEO はアリなんじゃないかと。\nというわけで，上の記事を参考にこのブログサイトを少し整理することにした。\nタイトルをシンプルにする 今まで \u0026lt;title\u0026gt; 要素にセットしていたのは\nページ・タイトル ― セクション・タイトル | サイト・タイトル という構成だったのだが，ページ・タイトルの後ろの文字列が長いのは気になっていた。 やっぱタイトルが長いのはアカンらしい。\n流石に Zenn のようにサイト・タイトルまで切り詰める勇気はなかったが「セクション・タイトルは要らんな」ちうことでバッサリ削除することにした。 セクション分けは完全に私個人の都合なので（検索サービス経由で）外からくるユーザには意味ないだろ，ということで。\n一方 OGP の\n\u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;〜\u0026#34;\u0026gt; のほうはページ・タイトルのみを設置することにした。 所謂「パンくずリスト」については JSON-LD 設置絡みで整理できているので問題ない。\nタグ関連ページを noindex とする このブログ・サイトは記事を「セクション」と「タグ」で分類している。 ひとつの記事にはひとつのセクションしか指定できないが，タグは複数指定できる。 セクションが縦串でタグが横串みたいなイメージ。\nタグは，それ自体かなりの数がある上にタグ毎に列挙される記事が重複してしまうため，関連ページの中身がかなり冗長になることは気になっていた。\nそこでタグ関係のページには\n\u0026lt;meta name=\u0026#34;robots\u0026#34; content=\u0026#34;noindex\u0026#34;\u0026gt; を設置してインデクス対象外となるようにした。 実際，エゴサーチしててもタグ関連のページがぞろぞろ出てきて鬱陶しかったのよ。\nブックマーク収集セクションを noindex で nofollow とする Bookmarks セクションは元々，愛用していたソーシャルブックマーク・サービスがダメぽい感じになったので自前で収集できるように作ったものである。\n私としては気になるページをあまり考えることなく溜め込んでおけるので（欲しい情報を探すときは grep が使えるし）重宝しているのだが，他所から来た人から見ればこれ以上ノイズ塗れのページはないよね（笑）\nちうわけで bookmarks セクションはまるっと noindex 化することにした。 加えてリンクの \u0026lt;a\u0026gt; 要素にも rel=\u0026quot;nofollow\u0026quot; 属性を設置して評価対象外となるようにした。\nありがたいことに Hugo では Markdown Render Hooks の仕組みを使って \u0026lt;a\u0026gt; 要素をカスタマイズできる。 しかも v0.71 からはセクション毎にこれを設置できるようになった。\n今回であれば layouts/bookmarks/_markup ディレクトリを掘り render-link.html ファイルを設置すればいい。 中身はこんな感じ。\n\u0026lt;a href=\u0026#34;{{ .Destination | safeURL }}\u0026#34; rel=\u0026#34;nofollow\u0026#34;{{ with .Title }} title=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt;{{ .Text | safeHTML }}\u0026lt;/a\u0026gt; よーし，うむうむ，よーし。\nトップページをダイエットする 最後に SEO とはたぶん関係ないけど，トップページに情報を継ぎ足していったら煩雑になりすぎてしまったので，新着記事のリスト以外はステータス・ページに移動した。 まぁ，うちのブログサイトにトップページから入る人はおらんじゃろうけど（笑）\nこれでスッキリ！\n"
    },
    {
      "title": "Go 1.15.3 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/10/go-1_15_3-is-released/",
      "published": "2020-10-15T00:31:20+00:00",
      "update": "2020-10-15T00:32:56+00:00",
      "content": "Go 1.15.3 がリリースされた。\n Go 1.15.3 and Go 1.14.10 are released  セキュリティ・アップデートはなし。\ngo1.15.3 (released 2020/10/14) includes fixes to cgo, the compiler, runtime, the go command, and the bytes, plugin, and testing packages. See the Go 1.15.3 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.15.3.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.15.3.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.15.3.linux-amd64.tar.gz $ sudo mv go go1.15.3 $ sudo ln -s go1.15.3 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.15.3 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "GNKF: NKF ぽいなにか の v0.2.0 をリリースした",
      "section": "release",
      "description": "このバージョンで BASE64 符号化の機能を追加した。これで base64 や openssl コマンドがない環境でも大丈夫。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/10/gnkf-v0_2_0-is-released/",
      "published": "2020-10-14T06:13:41+00:00",
      "update": "2020-10-14T06:29:19+00:00",
      "content": "文字列処理の習作 gnkf の v0.2.0 をリリースした。\n Release v0.2.0 · spiegel-im-spiegel/gnkf · GitHub  このバージョンで BASE64 符号化の機能を追加した。\n$ gnkf base64 -h Encode/Decode BASE64. Usage: gnkf base64 [flags] Aliases: base64, b64 Flags: -d, --decode decode BASE64 string -f, --file string path of input text file -u, --for-url encoding/decoding defined in RFC 4648 -h, --help help for base64 -p, --no-padding no padding -o, --output string path of output file Global Flags: --debug for debug オリジナルの nkf はコマンドとオプションがごちゃごちゃしてて分かりにくいので base64 や openssl base64 のコマンドの形式に合わせることにした。\n$ echo Hello World | gnkf base64 SGVsbG8gV29ybGQK $ echo SGVsbG8gV29ybGQK | gnkf base64 -d Hello World これで base64 や openssl コマンドがない環境でも大丈夫（笑）\nブックマーク  GNKF: Network Kanji Filter by Golang  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "個人番号カードの電子証明書を更新した",
      "section": "remark",
      "description": "オンラインでの更新は出来ない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/update-my-number-card/",
      "published": "2020-10-13T06:49:24+00:00",
      "update": "2020-10-13T07:18:27+00:00",
      "content": "5年前に広島市で個人番号カードを発行してもらったときに「電子証明書の利用期限前にアナウンスすることはない」と言われたのだが「あれはウソだ」ったらしい（笑）\n松江市からきっちり「有効期限通知書」が来たので，いそいそと出掛けたですよ（オンラインでの更新は出来ない）。\n松江市役所 | Flickr  更新の際には「有効期限通知書」が必要（「有効期限通知書」に裏書きして代理人に依頼することも可能）。 もちろん個人番号カードも忘れないこと。 電子証明書の更新だけなら顔写真は不要。 何故か最近また話題（笑）のハンコも不要。\n私は住基ネット用の電子証明書も登録している。 併せて更新するか尋ねられたので，肯定。 手順としては，職員さんの指示の下，タッチパネルで\n 住基用の暗証番号を入力 （住基用の）署名用電子証明書のパスワードを入力 利用者証明用電子証明書の暗証番号を入力  で完了。 券面事項入力補助の暗証番号は使わなかった。 簡単！\n次回はまた5年後。 5年後は個人番号カード自体も更新しないといけないので顔写真がいるな。\n コマンドー (吹替版) アーノルド・シュワルツェネッガー (出演), アリッサ・ミラノ (出演), ダン・ヘダヤ (出演), レイ・ドーン・チョン (出演), マーク・L・レスター (監督), スティーブン・E・デ・スーザ (Writer)  (Release 2015-04-24) Prime Video B00WAMAKZQ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  あらゆる障害を筋肉で粉砕する！ 脳みそをカラッぽにして見れる作品。\nreviewed by Spiegel on 2020-10-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "キャラクタの権利",
      "section": "remark",
      "description": "これからこういった「言いがかり」は増えてくるだろうし，その中には本当に非親告罪として訴訟の対象になることもあるだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/rights-of-narrative-characters/",
      "published": "2020-10-12T02:17:49+00:00",
      "update": "2020-10-12T02:48:03+00:00",
      "content": "先週の話題だが，興味深い記事があるので紹介しておく。\n 知財高裁でBL同人作品の無断コピーは著作権侵害という当たり前の判決(栗原潔) - 個人 - Yahoo!ニュース  前半の猥褻云々については何となく触りたくないのでスルーするとして（興味のある方はリンク先の記事をどうぞ），個人的に面白いと思ったのは以下の判決文に絡む後半の話。\n したがって、本件各漫画のキャラクターが原著作物のそれと同一あるいは類似であるからといって，これによって著作権侵害の問題が生じるものではない 『令和２年(ネ)第１００１８号損害賠償請求控訴事件』判決文より   仮に著作権侵害の問題が生ずる余地があるとしても，それは，主人公等の容姿や服装など基本的設定に関わる部分の複製権侵害に限られるものであって，その他の部分については，二次的著作権が成立し得るものというべきである（なお，本件各漫画の内容に照らしてみれば，主人公等の容姿や服装など基本的設定に関わる部分以外の部分について，オリジナリティを認めることは十分に可能というべきである。） 『令和２年(ネ)第１００１８号損害賠償請求控訴事件』判決文より  私はその筋の専門家ではないので不正確かもしれないが，いわゆる知的財産権（等）については以下のように分類している。\n 「表現」に関する権利は著作権 「アイデア」に関する権利は特許権 「キャラクタ」等に関する権利は商標権または意匠権 実在の人物に関する権利は肖像権（パブリシティ権）  実際，商業作品では作品のロゴやキャラクタを商標登録することは普通に行われている1。 今回対象となっている同人作品が本当に「キャラクタの権利」を侵害しているか否かは別のチャネルで争われるべきものである。\nもっとも，原著作（権）者がそれを言うならまだしも，原作の関係者でも件の同人作品の関係者でもない第三者がそれをゆーな，って感じではあるが（笑）\n実は「改訂3版： CC Licenses について」セクションの「人格権と CC Licenses」で「キャラクタの権利」について言及しているのだが，これは「同一性保持権」の文脈だったので（実際，件の判決文  でも同一性保持権について言及がある）二次的著作物つまり翻案権について原著作（権）者でもない第三者があれこれ言うシチュエーションは考えてなかった。\nこれって2018年末施行の改正著作権法の影響だよね。 非親告罪の一部適用ってやつ。\nおそらくこれからこういった「言いがかり」は増えてくるだろうし，その中には本当に非親告罪として訴訟の対象になることもあるだろう。 ホンマに面倒臭い世の中になったものである。\n参考図書  著作権法 第3版 中山 信弘 (著) 有斐閣 2020-09-04 単行本 4641243336 (ASIN), 9784641243330 (EAN), 4641243336 (ISBN)  第3版が出てた。第2版は図書館で借りて読んだが，途中でギブアップした。個人が興味本位で読める本ではないらしい（笑）\nreviewed by Spiegel on 2020-10-12 (powered by PA-APIv5)\n  性表現規制の文化史 白田 秀彰 (著) 亜紀書房 2017-07-20 (Release 2017-07-20) 単行本（ソフトカバー） 4750515183 (ASIN), 9784750515182 (EAN), 4750515183 (ISBN)  しまった！積ん読状態のまま引っ越しのドサクサで処分しちゃってるよ。読み直さないと。図書館に置いてないかな。\nreviewed by Spiegel on 2017-10-13 (powered by PA-APIv5)\n   「キャラクタ」そのものに著作権は関与しないとしても「キャラクタを使った表現」には当然ながら著作権が適用される。それが二次的著作物にあたるかどうかの線引きは割と微妙らしい。その辺を考えているかは知らないが，作家さん同士で「キャラクタの貸し借り」のやりとりは（口頭レベルでも）割とあると聞く。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-10-11 のブックマーク",
      "section": "bookmarks",
      "description": "「グーグルとオラクルとの「Android」関連訴訟、米最高裁での審理始まる」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/10/11-bookmarks/",
      "published": "2020-10-11T02:52:12+00:00",
      "update": "2020-10-11T02:58:32+00:00",
      "content": "リリース情報  Multiple Cascades With Page Filters | Hugo  Release v0.76.0 · gohugoio/hugo · GitHub   Thunderbird — Release Notes (78.3.2) — Thunderbird Hugo 0.76.1: One Bug Fix | Hugo  Release v0.76.1 · gohugoio/hugo · GitHub   Release v0.76.2 · gohugoio/hugo · GitHub Announcement of LibreOffice 7.0.2 - The Document Foundation Blog Hugo 0.76.3: A couple of Bug Fixes | Hugo  Release v0.76.3 · gohugoio/hugo · GitHub   Release September 2020 · microsoft/vscode · GitHub Release 8.8.2 · mermaid-js/mermaid · GitHub  バベルのインターネット セキュリティ＆プライバシー関連  「セキュリティ事故発生。そのときどうする」\u0026ndash;ラックの模擬訓練を体験 - ZDNet Japan グーグル、機密データ扱う「Android」アプリの脆弱性を検出するチームを新設へ - ZDNet Japan Dropbox Japan、電子署名サービス「HelloSign」を提供\u0026ndash;ストレージとの連携で利用を円滑化 - ZDNet Japan ゆうちょ銀行のmijica Webへの不正ログインについてまとめてみた - piyolog 車載制御およびセキュリティ向けFPGA - EDN Japan 名古屋大発スタートアップAcompanyが暗号化したままの計算処理が可能なMPC秘密計算エンジンを独自開発 | TechCrunch Japan ヴイエムウェアに見るゼロトラストセキュリティの方向性 - ZDNet Japan On Risk-Based Authentication - Schneier on Security Why Your iPhone Has So Many New Privacy Alerts in iOS 14 | Wirecutter Slackが企業間メッセージングを容易にするセキュリティ機能を新導入、ビデオ・音声埋め込み機能も実験中 | TechCrunch Japan ゆうちょ銀の「mijica」で新たな不正か　カードが届く前に番号を盗み商品購入 - ITmedia NEWS セキュリティ上の脆弱性により永久股間ロックの危険にさらされた「スマートな」貞操玩具 | TechCrunch Japan アップル独自のセキュリティチップ「T2」に潜む、修正できない脆弱性の深刻度 | WIRED.jp  天文関連  MIT Tech Review: ISSで再び原因不明の空気漏れ、乗組員が発生場所を調査中 遠い銀河で一際明るい超新星爆発の減光過程をハッブル宇宙望遠鏡が観測 - Engadget 日本版 惑星状星雲の観測が描き出した楕円銀河形成過程の痕跡 | 観測成果 | すばる望遠鏡  惑星状星雲の複雑な構造は恒星を巡る伴天体の影響が大きい、アルマ望遠鏡 | マイナビニュース   2020年10月6日ニュース「今年のノーベル物理学賞はブラックホール研究の3氏に」 | SciencePortal リチウムの極端な増加を示す赤色巨星の進化段階を解明 | 観測成果 | すばる望遠鏡 Sublimation as an effective mechanism for flattened lobes of (486958) Arrokoth | Nature Astronomy : カイパーベルト天体(486958)アロコスが平べったい理由: 太陽系外縁天体アロコスが平たい雪だるまみたいな形状をしているのは太陽系の初期に物質が昇華したことで説明がつくとのこと 遠くの恒星のように太陽を研究 | 国立天文台(NAOJ) 太陽系外惑星の材料を特定する新しい観測手法の提案 壊れゆく惑星から流れ出る塵の色を宇宙望遠鏡の組み合わせで観る | 東工大ニュース | 東京工業大学  知財関連  知財高裁でBL同人作品の無断コピーは著作権侵害という当たり前の判決(栗原潔) - 個人 - Yahoo!ニュース グーグルとオラクルとの「Android」関連訴訟、米最高裁での審理始まる - CNET Japan  Go 言語関連  Go の CI を Github Actions に移行した The Go error printing catastrophe - The CockroachDB errors library, part 3/ · dr knz @ work  Rust 言語関連  Announcing Rust 1.47.0 | Rust Blog  その他  年末調整の電子化進展で手続きが簡単に ～国税庁、申告書作成アプリを公開 - 窓の杜 NVIDIAが価格59ドルの2GBメモリー版「Jetson Nano 2GB Developer Kit」を発表 | TechCrunch Japan 2020年10月5日ニュース「C型肝炎ウイルスを発見、ノーベル医学生理学賞に米・カナダ3氏」 | SciencePortal 「Edge」の開発ツールを統合し「Visual Studio Code」でWebアプリの開発を完結 - 窓の杜 Dart 2.10: Unified dart tool, null safety update. | Dart アマゾンの認可で加速、ドローン活用への要請強まる - ZDNet Japan 2020/10/26までにAzure Database for MySQL/MariaDBのサーバ証明書を更新しないと死 「G Suite」が新ブランド「Google Workspace」に、新機能も続々 - ケータイ Watch アドオンサイト“addons.mozilla.org”に3つのバッジ ～安心して利用できる品質を証明 - 窓の杜 : Mozilla はどんどんダメな方向に進んでる気がするなぁ\u0026hellip; 倒産寸前だった「Linux Journal」、スラッシュドットメディア傘下で何度目かの復活 － Publickey 「PHP 8」リリース候補版が登場、JITコンパイラによる高速化など。11月に正式版を予定 － Publickey 【さくらのレンタルサーバ/マネージドサーバ】WebP対応のお知らせ | さくらインターネット 「Python 3.9」が正式リリース ～次期バージョンは「Python 4」ではなく「Python 3.10」 - 窓の杜 ドコモ、「iモード公式サイト」を2021年11月末に終了へ - CNET Japan Hacktoberfestの炎上＆感動：１０月でなんでくそプルリクエストそんなに多いの？ - Qiita  「プログラムの修正を送るとTシャツがもらえる」キャンペーンが開発者に迷惑がられる理由とは？ - GIGAZINE   grep の「バイナリファイル (標準入力) に一致しました」が出る条件を調べていたらそれは長い旅路の始まりだった。 「Ruby 2.7.2」がリリース ～「WEBrick」の更新でHTTP Request Smugglingの脆弱性を解消【10月7日追記】 - 窓の杜 2020年ノーベル物理学賞をブラックホール研究の3氏が受賞 | 国立天文台(NAOJ) 2020年10月7日ニュース「効率的なゲノム編集技術を開発 ノーベル化学賞に欧米2氏」 | SciencePortal 米IBM、クラウド部門などを分社化し新会社を設立へ。新会社はマネージドインフラに注力 － Publickey VMwareがRaspberry Pi 4対応の「ESXi-Arm」を実験的リリース。vSphere 7相当の仮想化ハイパーバイザ － Publickey 奈良県民の自虐が詰まったRPG「ファイ奈良ファンタジー」、絶賛テストプレイ中！ - やじうまの杜 - 窓の杜 科学や学問の「ありがたみ」 – mhatta\u0026rsquo;s mumbo jumbo ShellHub 本のチャプターファイルの作成方法が変わりました Qiitaの記事をZenn形式のMarkdownで保存して管理する  "
    },
    {
      "title": "絵文字と異体字と Markdown",
      "section": "remark",
      "description": "Hugo の markdown で絵文字を簡単に表示する。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/emoji-variation-and-markdown/",
      "published": "2020-10-08T07:22:55+00:00",
      "update": "2020-10-09T02:42:09+00:00",
      "content": "絵文字ってある意味で漢字より難解なので，なるべく使わないようにしてきたのだが，文章に混ぜたり emoticon 代わりに使ったりするだけでなく Zenn みたいにページのアテンションに使ってる例もあるわけで「もう少し積極的に使ってもいいかなぁ」という気になってきた。\nとはいえ input method から延々と探したりその辺のページから絵文字をコピペするのも馬鹿らしいし，折角 markdown で書いてるんだから意味のあるコードで書きたい。\nHugo なら config.toml 等の設定ファイルで\nenableEmoji = true とすれば markdown テキスト内の :heart: 等を ❤️ 等に変換してくれる。 あるいはテンプレートや shortcodes で\n{{ emojify \u0026#34;:heart:\u0026#34; }} などとしてもよい。\n変換可能な絵文字の一覧は以下を参照のこと。\n 🎁 Emoji cheat sheet for GitHub, Basecamp, Slack \u0026amp; more  ただしリンク先にある全部の文字が Hugo で使えるわけではないらしい。 私がよく使いそうな絵文字を挙げておくか。\n   字形 Markdown コード CLDR Short Name     😄 :smile: grinning face with smiling eyes   😴 :sleeping: sleeping face   😔 :pensive: pensive face   🙇‍♂️ :bow: person bowing ???   💤 :zzz: zzz   💢 :anger: anger symbol   💦 :sweat_drops: sweat droplets   ⭐ :star: star   💡 :bulb: light bulb   🎵 :musical_note: musical note   🔑 :key: key   🔒 :lock: locked   🔓 :unlock: unlocked   🔐 :closed_lock_with_key: locked with key    さて，皆さんの環境ではどう見えているでしょうか。 人によって見え方が異なると思います（絵文字のフォント指定については後述）。\nところで，上に挙げた :bow: ってどう見えてます？ 実は \u0026#x1f647;\u0026#x2642; ってな感じの2文字に見えてません？ うちでは :bow: から変換した絵文字をターミナル・エミュレータとかにコピペすると，こうなるんですよ。\nというわけでコードを見てみると\n$ echo 🙇‍♂️ | gnkf dump --unicode 0x0001f647, 0x200d, 0x2642, 0xfe0f, 0x000a おいおい。 本来のコードの後ろに何か付いとるやないかいっ 💢 （← 早速）\n実はこれ，絵文字の異体字なんだよ。 内訳はこんな感じ。\n   Unicode Point 字形 Unicode 名称     U+1F647 \u0026#x1f647; PERSON BOWING DEEPLY   U+200D  ZERO WIDTH JOINER   U+2642 \u0026#x2642; MALE SIGN   U+FE0F  VARIATION SELECTOR-16    ZERO WIDTH JOINER (ゼロ幅接合子; ZWJ) はアラビア文字なんかで複数の文字を結合してひとつの文字にするための制御文字。 さらに VARIATION SELECTOR-16 は “Emoji Variation Selector” とも呼ばれ，絵文字の異体字であることを示す異体字セレクタである1。\nつまり :bow: で表示されるのは「土下座する男性」を意味する絵文字（の異体字）なわけだ。 処理系によって異体字を上手く表示できない場合は \u0026#x1f647;\u0026#x2642; のように2つの文字が並んでいるように見えたりするようだ。\n\u0026hellip;なんで男性なんだろうね。 GitHub の既定ブランチ名を弄るとかするくらいなら，こういうのを真っ先に改善すべきなんじゃないの？\nというわけで Hugo 環境全体の設定は変えずに，絵文字表示用の shortcode を作って対応することにした。 こんな感じ。\n{{- range $i, $s := .Params -}} {{- if gt $i 0 -}}\u0026amp;nbsp;{{- end -}}\u0026lt;abbr title=\u0026#34;{{ $s }}\u0026#34;\u0026gt; {{- if eq $s \u0026#34;ゴメン\u0026#34; -}}\u0026amp;#x1f647; {{- else if eq $s \u0026#34;ふむむ\u0026#34; -}}\u0026amp;#x1f914; {{- else if eq $s \u0026#34;はぁと\u0026#34; -}}\u0026amp;#x1f49b; {{- else if eq $s \u0026#34;キーボード\u0026#34; -}}\u0026amp;#x2328; {{- else if eq $s \u0026#34;はなまる\u0026#34; -}}\u0026amp;#x1f4ae; {{- else if eq $s \u0026#34;錠前と鍵\u0026#34; -}}{{- emojify \u0026#34;:closed_lock_with_key:\u0026#34; -}} {{- else -}}{{ emojify $s }}{{- end -}} \u0026lt;/abbr\u0026gt;{{- end -}} これで {{\u0026lt; emoji \u0026quot;:zzz:\u0026quot; \u0026gt;}} などとすれば\n\u0026lt;abbr title=\u0026#34;:zzz:\u0026#34;\u0026gt;💤\u0026lt;/abbr\u0026gt; という感じに展開してくれる。 あとは自分で定義名を作れば別名定義もできるし対応する絵文字を増やすこともできる。 上の shortcode だと\n   字形 shortcode CLDR Short Name     \u0026#x1f647; {{\u0026lt; emoji \u0026quot;ゴメン\u0026quot; \u0026gt;}} person bowing   \u0026#x1f914; {{\u0026lt; emoji \u0026quot;ふむむ\u0026quot; \u0026gt;}} thinking face   \u0026#x1f49b; {{\u0026lt; emoji \u0026quot;はぁと\u0026quot; \u0026gt;}} yellow heart   \u0026#x2328; {{\u0026lt; emoji \u0026quot;キーボード\u0026quot; \u0026gt;}} keyboard   \u0026#x1f4ae; {{\u0026lt; emoji \u0026quot;はなまる\u0026quot; \u0026gt;}} white flower   🔐 {{\u0026lt; emoji \u0026quot;錠前と鍵\u0026quot; \u0026gt;}} locked with key    てな感じで定義している。\n【2020-10-09 追記】 絵文字のフォント指定 絵文字に関しては Google Fonts みたいなメジャーな Web フォントはないっぽいので各自ローカル環境のフォントをあてにするしかないんだけど（もう自前で Web フォントを用意したくない），これに関して Unicode 本家サイトで\n.chars, .charsSmall { text-decoration: none; color: #ccc; font-family: \u0026#34;Noto Color Emoji\u0026#34;, \u0026#34;Apple Color Emoji\u0026#34;, \u0026#34;Segoe UI Emoji\u0026#34;, Times, Symbola, Aegyptus, Code2000, Code2001, Code2002, Musica, serif, LastResort; font-variant-emoji: emoji; } みたいな記述があったので，ありがたくパクらせていただくことにした（笑） すなわち\nabbr.emoji-chars { text-decoration: none; font-family: \u0026#34;Noto Color Emoji\u0026#34;, \u0026#34;Apple Color Emoji\u0026#34;, \u0026#34;Segoe UI Emoji\u0026#34;, Times, Symbola, Aegyptus, Code2000, Code2001, Code2002, Musica, serif, LastResort; font-variant-emoji: emoji; } と定義して\n\u0026lt;abbr class=\u0026#34;emoji-chars\u0026#34; title=\u0026#34;:zzz:\u0026#34;\u0026gt;💤\u0026lt;/abbr\u0026gt; となるよう shortcode を書き直せばいいわけだ。 当面はこれで。\nブックマーク  Full Emoji List : based on Unicode CLDR data emojify | Hugo 絵文字一覧 🤣 | Let\u0026rsquo;s EMOJI UnicodeのEmojiの一覧 - Wikipedia twitter/twemoji: Emoji for everyone. https://twemoji.twitter.com/ googlefonts/noto-emoji: Noto Emoji fonts    異体字セレクタのコードポイントは通常のものと区別するために E+FE0Fと表記する場合もあるらしい。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "えんやらやっと go-cvss パッケージ v0.4.0 をリリースした",
      "section": "release",
      "description": "PR もらっていったんリリースしたのだが，アレなコードでマジすんません，ということで書き直した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/10/go-cvss-package-v0_4_0-is-released/",
      "published": "2020-10-07T07:48:21+00:00",
      "update": "2020-10-08T07:23:05+00:00",
      "content": "絶賛放置プレイ中の spiegel-im-spiegel/go-cvss パッケージだが，どうも使っていただいてる方がいて「Temporal Metrics は実装しないの？」と言われ「PR くれるならマージするよ」と下手くそな英語で返したのだが，本当に PR をくださって恐縮です。\nで，まぁ，ありがたくマージしていったん v0.3.0 をリリースしたのだが，なんせベースのコードが場当たりなやっつけコードなので，マジすんません 🙇 て感じ。\nそこで，一念発起してちゃんと書き直すことにした。 もっとも，コード自体はほとんど使いまわしで構成を変えただけなんだけどね。\nというわけで v0.4.0 をリリースしました。\n Release v0.4.0 · spiegel-im-spiegel/go-cvss · GitHub  以前のコードは残してあるが deprecated なコードとしていずれ削除する予定。 書き直したコードはこんな風に使う。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/go-cvss/v3/metric\u0026#34; ) func main() { bm, err := metric.NewBase().Decode(\u0026#34;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H\u0026#34;) //CVE-2020-1472: ZeroLogon  if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Printf(\u0026#34;Severity: %v (%v)\\n\u0026#34;, bm.Severity(), bm.Score()) // Output:  // Severity: Critical (10) } metric.NewBase() の部分を metric.NewTemporal() に変えれば Temporal Metrics として処理できる。\nfunc main() { tm, err := metric.NewTemporal().Decode(\u0026#34;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H/E:F/RL:W/RC:R\u0026#34;) //CVE-2020-1472: ZeroLogon  if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Printf(\u0026#34;Base Severity: %v (%v)\\n\u0026#34;, tm.BaseMetrics().Severity(), tm.BaseMetrics().Score()) fmt.Printf(\u0026#34;Temporal Severity: %v (%v)\\n\u0026#34;, tm.Severity(), tm.Score())  // Output:  // Base Severity: Critical (10)  // Temporal Severity: Critical (9.1) } 評価の内容をテンプレートを使って吐き出す処理は別のサブパッケージに分離した（上の PR くれた方はこの機能を全く使ってないみたいなので）。\nたとえば\nvar template = `| {{.BaseMetrics}}| {{.BaseMetricValue}}| |--------|-------| | {{.AVName}}| {{.AVValue}}| | {{.ACName}}| {{.ACValue}}| | {{.PRName}}| {{.PRValue}}| | {{.UIName}}| {{.UIValue}}| | {{.SName}}| {{.SValue}}| | {{.CName}}| {{.CValue}}| | {{.IName}}| {{.IValue}}| | {{.AName}}| {{.AValue}}| ` みたいに markdown の表形式でテンプレートを作って\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/go-cvss/v3/metric\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/go-cvss/v3/report\u0026#34; \u0026#34;golang.org/x/text/language\u0026#34; ) var template = ` ... ` func main() { bm, err := metric.NewBase().Decode(\u0026#34;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H\u0026#34;) //CVE-2020-1472: ZeroLogon \tif err != nil { fmt.Fprintln(os.Stderr, err) return } r, err := report.NewBase(bm, report.WithOptionsLanguage(language.Japanese)).ExportWithString(template) if err != nil { fmt.Fprintln(os.Stderr, err) return } if _, err := io.Copy(os.Stdout, r); err != nil { fmt.Fprintln(os.Stderr, err) } } てな感じに書けば\n$ go run main.go | 基本評価基準 | 評価値 | |--------|-------| | 攻撃元区分 | ネットワーク | | 攻撃条件の複雑さ | 低 | | 必要な特権レベル | 不要 | | ユーザ関与レベル | 不要 | | スコープ | 変更あり | | 機密性への影響 | 高 | | 完全性への影響 | 高 | | 可用性への影響 | 高 | のように出力してくれる（ちなみに英語と日本語にしか対応してませんw）。\nさて。 Environmental Metrics に対応するかどうか。 やるなら今のうちなんだよなぁ\u0026hellip;\nブックマーク  CVSS v3.0 Specification Document CVSS v3.1 Specification Document 共通脆弱性評価システムCVSS v3概説：IPA 独立行政法人 情報処理推進機構 CVSS v3.1  "
    }
  ]
}
