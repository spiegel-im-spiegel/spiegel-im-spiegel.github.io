{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "かなカナ変換",
      "section": "golang",
      "description": "全角⇔半角 / ひらがな⇔カタカナ / 拗音・促音⇔直音 各種変換",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/kana-conversion/",
      "published": "2020-07-13T09:45:08+00:00",
      "update": "2020-07-13T09:46:04+00:00",
      "content": "今回は仮名文字を色々と変換することを考えてみる。\n全角⇔半角 変換 いわゆる全角文字と半角文字の変換は golang.org/x/text/width パッケージを使えばいいのだが，仮名文字の場合は少しクセがある。 たとえば以下のように「ペンギン」を半角カナに変換しようとすると\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;golang.org/x/text/width\u0026#34; ) func unicodePrint(s string) { sep := \u0026#34;\u0026#34; for _, r := range s { fmt.Printf(\u0026#34;%s{%#U}\u0026#34;, sep, r) sep = \u0026#34; \u0026#34; } fmt.Println() } func main() { fullwidth := \u0026#34;ペンギン\u0026#34; unicodePrint(fullwidth) unicodePrint(width.Narrow.String(fullwidth)) } 実行結果は\n$ go run sample1.go {U+30DA \u0026#39;ペ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30DA \u0026#39;ペ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} のように濁点・半濁点を上手く処理できないようだ。\nこれを解消するには，安直な手段だが，いったん NFD 正規化で合成列に変換してから変換するとよい。\nfunc main() { fullwidth := \u0026#34;ペンギン\u0026#34; unicodePrint(fullwidth) unicodePrint(width.Narrow.String(norm.NFD.String(fullwidth))) } これで実行すると\n$ go run sample1b.go {U+30DA \u0026#39;ペ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+FF8D \u0026#39;ﾍ\u0026#39;} {U+FF9F \u0026#39;ﾟ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+FF77 \u0026#39;ｷ\u0026#39;} {U+FF9E \u0026#39;ﾞ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} と，綺麗に変換してくれる1。\n逆に golang.org/x/text/width パッケージで半角カナから全角カナに変換しようとすると\nfunc main() { fullwidth := \u0026#34;ペンギン\u0026#34; halfwidth := width.Narrow.String(norm.NFD.String(fullwidth)) unicodePrint(fullwidth) unicodePrint(halfwidth) unicodePrint(width.Widen.String(halfwidth)) } 実行結果は当然ながら\n$ go run sample1c.go {U+30DA \u0026#39;ペ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+FF8D \u0026#39;ﾍ\u0026#39;} {U+FF9F \u0026#39;ﾟ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+FF77 \u0026#39;ｷ\u0026#39;} {U+FF9E \u0026#39;ﾞ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+30D8 \u0026#39;ヘ\u0026#39;} {U+309A \u0026#39;゚\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AD \u0026#39;キ\u0026#39;} {U+3099 \u0026#39;゙\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} 合成列となる。 これを事前合成形にするのであれば\nfunc main() { fullwidth := \u0026#34;ペンギン\u0026#34; halfwidth := width.Narrow.String(norm.NFD.String(fullwidth)) unicodePrint(fullwidth) unicodePrint(halfwidth) unicodePrint(norm.NFC.String(width.Widen.String(halfwidth))) } と NFC 正規化をすることで\n$ go run sample1c.go {U+30DA \u0026#39;ペ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+FF8D \u0026#39;ﾍ\u0026#39;} {U+FF9F \u0026#39;ﾟ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+FF77 \u0026#39;ｷ\u0026#39;} {U+FF9E \u0026#39;ﾞ\u0026#39;} {U+FF9D \u0026#39;ﾝ\u0026#39;} {U+30DA \u0026#39;ペ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} {U+30AE \u0026#39;ギ\u0026#39;} {U+30F3 \u0026#39;ン\u0026#39;} とできる1。\nついでに， 'ヰ', 'ヱ' 文字， 'ヽ', 'ヾ' といった繰り返し記号，あるいは 'ヵ', 'ヶ' といった拗音の一部は半角カナにはないので，これらを含む文字列の変換には注意が必要である。\nひらがな⇔カタカナ 変換 Go 言語では，ひらがなとカタカナを相互変換するパッケージは標準では用意されていないので自作する必要がある。\nまずは，ひらがなとカタカナの Unicode 符号点を眺めてみる2。\n    +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +E     U+3040  ぁ あ ぃ い ぅ う ぇ え ぉ お か が き ぎ く   U+3050 ぐ け げ こ ご さ ざ し じ す ず せ ぜ そ ぞ た   U+3060 だ ち ぢ っ つ づ て で と ど な に ぬ ね の は   U+3070 ば ぱ ひ び ぴ ふ ぶ ぷ へ べ ぺ ほ ぼ ぽ ま み   U+3080 む め も ゃ や ゅ ゆ ょ よ ら り る れ ろ ゎ わ   U+3090 ゐ ゑ を ん ゔ ゕ ゖ   ゙ ゚ ゛ ゜ ゝ ゞ      Unicode 符号点：ひらがな      +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +E     U+30A0  ァ ア ィ イ ゥ ウ ェ エ ォ オ カ ガ キ ギ ク   U+30B0 グ ケ ゲ コ ゴ サ ザ シ ジ ス ズ セ ゼ ソ ゾ タ   U+30C0 ダ チ ヂ ッ ツ ヅ テ デ ト ド ナ ニ ヌ ネ ノ ハ   U+30D0 バ パ ヒ ビ ピ フ ブ プ ヘ ベ ペ ホ ボ ポ マ ミ   U+30E0 ム メ モ ャ ヤ ュ ユ ョ ヨ ラ リ ル レ ロ ヮ ワ   U+30F0 ヰ ヱ ヲ ン ヴ ヵ ヶ ヷ ヸ ヹ ヺ ・ ー ヽ ヾ      Unicode 符号点：カタカナ      +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +E     U+FF60      ･ ｦ ｧ ｨ ｩ ｪ ｫ ｬ ｭ ｮ ｯ   U+FF70 ｰ ｱ ｲ ｳ ｴ ｵ ｶ ｷ ｸ ｹ ｺ ｻ ｼ ｽ ｾ ｿ   U+FF80 ﾀ ﾁ ﾂ ﾃ ﾄ ﾅ ﾆ ﾇ ﾈ ﾉ ﾊ ﾋ ﾌ ﾍ ﾎ ﾏ   U+FF90 ﾐ ﾑ ﾒ ﾓ ﾔ ﾕ ﾖ ﾗ ﾘ ﾙ ﾚ ﾛ ﾜ ﾝ ﾞ ﾟ     Unicode 符号点：半角カナ  -- これを見るとひらがなの U+3041 〜 U+3096 と片仮名の U+30A1 〜 U+30F6 の領域が1対1で対応していることが分かる。 繰り返し記号の 'ゝ', 'ゞ', 'ヽ', 'ヾ' も同様。 これなら標準の strings パッケージを使って変換できそうだ。\nたとえば strings.ToUpperSpecial() 関数でひらがな→カタカナ変換を， strings.ToLowerSpecial() 関数でカタカナ→ひらがな変換を行うように unicode.SpecialCase の値を設定すればよい。\nunicode.SpecialCase 構造体の定義はこうなっている。\n// CaseRange represents a range of Unicode code points for simple (one // code point to one code point) case conversion. // The range runs from Lo to Hi inclusive, with a fixed stride of 1. Deltas // are the number to add to the code point to reach the code point for a // different case for that character. They may be negative. If zero, it // means the character is in the corresponding case. There is a special // case representing sequences of alternating corresponding Upper and Lower // pairs. It appears with a fixed Delta of //\t{UpperLower, UpperLower, UpperLower} // The constant UpperLower has an otherwise impossible delta value. type CaseRange struct { Lo uint32 Hi uint32 Delta d } // SpecialCase represents language-specific case mappings such as Turkish. // Methods of SpecialCase customize (by overriding) the standard mappings. type SpecialCase []CaseRange // BUG(r): There is no mechanism for full case folding, that is, for // characters that involve multiple runes in the input or output.  // Indices into the Delta arrays inside CaseRanges for case mapping. const ( UpperCase = iota LowerCase TitleCase MaxCase ) type d [MaxCase]rune // to make the CaseRanges text shorter ほんじゃあ，さくっとコードを書いてみよう。 こんな感じかな。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;unicode\u0026#34; ) var kanaCase = unicode.SpecialCase{ unicode.CaseRange{\u0026#39;ぁ\u0026#39;, \u0026#39;ゖ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ァ\u0026#39; - \u0026#39;ぁ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゝ\u0026#39;, \u0026#39;ゞ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ヽ\u0026#39; - \u0026#39;ゝ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ァ\u0026#39;, \u0026#39;ヶ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぁ\u0026#39; - \u0026#39;ァ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ヽ\u0026#39;, \u0026#39;ヾ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゝ\u0026#39; - \u0026#39;ヽ\u0026#39;, 0}}, } func main() { kana := \u0026#34;あいうえおわゐゑをんゔゕゖゝゞアイウエオワヰヱヲンヴヵヶヽヾ\u0026#34; fmt.Println(strings.ToUpperSpecial(kanaCase, kana)) fmt.Println(strings.ToLowerSpecial(kanaCase, kana)) } この実行結果は\n$ go run sample2.go アイウエオワヰヱヲンヴヵヶヽヾアイウエオワヰヱヲンヴヵヶヽヾ あいうえおわゐゑをんゔゕゖゝゞあいうえおわゐゑをんゔゕゖゝゞ となる。 よーし，うむうむ，よーし。\nなお，カタカナの 'ヷ', 'ヸ', 'ヹ', 'ヺ' 文字は対応する事前合成形のひらがな文字がないため，必要なら個別に処理する必要がある。\n拗音・促音⇔直音 変換 拗音 (ようおん) （小さい 'ゃ', 'ゅ', 'ょ' など）や促音（小さい 'っ'）と直音（'や', 'ゆ', 'よ', 'つ'）とを相互変換することを考える。 この機能も標準では用意されてないけど，前節と同じように unicode.SpecialCase の値を決めればいいかな。\n長いコードだけど，ご容赦。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;sort\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;unicode\u0026#34; ) var kanaCase2 = unicode.SpecialCase{ unicode.CaseRange{\u0026#39;あ\u0026#39;, \u0026#39;あ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぁ\u0026#39; - \u0026#39;あ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;い\u0026#39;, \u0026#39;い\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぃ\u0026#39; - \u0026#39;い\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;う\u0026#39;, \u0026#39;う\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぅ\u0026#39; - \u0026#39;う\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;え\u0026#39;, \u0026#39;え\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぇ\u0026#39; - \u0026#39;え\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;お\u0026#39;, \u0026#39;お\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ぉ\u0026#39; - \u0026#39;お\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;か\u0026#39;, \u0026#39;か\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゕ\u0026#39; - \u0026#39;か\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;け\u0026#39;, \u0026#39;け\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゖ\u0026#39; - \u0026#39;け\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;つ\u0026#39;, \u0026#39;つ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;っ\u0026#39; - \u0026#39;つ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;や\u0026#39;, \u0026#39;や\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゃ\u0026#39; - \u0026#39;や\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ゆ\u0026#39;, \u0026#39;ゆ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゅ\u0026#39; - \u0026#39;ゆ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;よ\u0026#39;, \u0026#39;よ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ょ\u0026#39; - \u0026#39;よ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;わ\u0026#39;, \u0026#39;わ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゎ\u0026#39; - \u0026#39;わ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ぁ\u0026#39;, \u0026#39;ぁ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;あ\u0026#39; - \u0026#39;ぁ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ぃ\u0026#39;, \u0026#39;ぃ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;い\u0026#39; - \u0026#39;ぃ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ぅ\u0026#39;, \u0026#39;ぅ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;う\u0026#39; - \u0026#39;ぅ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ぇ\u0026#39;, \u0026#39;ぇ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;え\u0026#39; - \u0026#39;ぇ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ぉ\u0026#39;, \u0026#39;ぉ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;お\u0026#39; - \u0026#39;ぉ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゕ\u0026#39;, \u0026#39;ゕ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;か\u0026#39; - \u0026#39;ゕ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゖ\u0026#39;, \u0026#39;ゖ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;け\u0026#39; - \u0026#39;ゖ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;っ\u0026#39;, \u0026#39;っ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;つ\u0026#39; - \u0026#39;っ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゃ\u0026#39;, \u0026#39;ゃ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;や\u0026#39; - \u0026#39;ゃ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゅ\u0026#39;, \u0026#39;ゅ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ゆ\u0026#39; - \u0026#39;ゅ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ょ\u0026#39;, \u0026#39;ょ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;よ\u0026#39; - \u0026#39;ょ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゎ\u0026#39;, \u0026#39;ゎ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;わ\u0026#39; - \u0026#39;ゎ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ア\u0026#39;, \u0026#39;ア\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ァ\u0026#39; - \u0026#39;ア\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;イ\u0026#39;, \u0026#39;イ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ィ\u0026#39; - \u0026#39;イ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ウ\u0026#39;, \u0026#39;ウ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ゥ\u0026#39; - \u0026#39;ウ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;エ\u0026#39;, \u0026#39;エ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ェ\u0026#39; - \u0026#39;エ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;オ\u0026#39;, \u0026#39;オ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ォ\u0026#39; - \u0026#39;オ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;カ\u0026#39;, \u0026#39;カ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ヵ\u0026#39; - \u0026#39;カ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ケ\u0026#39;, \u0026#39;ケ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ヶ\u0026#39; - \u0026#39;ケ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ツ\u0026#39;, \u0026#39;ツ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ッ\u0026#39; - \u0026#39;ツ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ヤ\u0026#39;, \u0026#39;ヤ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ャ\u0026#39; - \u0026#39;ヤ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ユ\u0026#39;, \u0026#39;ユ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ュ\u0026#39; - \u0026#39;ユ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ヨ\u0026#39;, \u0026#39;ヨ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ョ\u0026#39; - \u0026#39;ヨ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ワ\u0026#39;, \u0026#39;ワ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ヮ\u0026#39; - \u0026#39;ワ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ァ\u0026#39;, \u0026#39;ァ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ア\u0026#39; - \u0026#39;ァ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ィ\u0026#39;, \u0026#39;ィ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;イ\u0026#39; - \u0026#39;ィ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ゥ\u0026#39;, \u0026#39;ゥ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ウ\u0026#39; - \u0026#39;ゥ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ェ\u0026#39;, \u0026#39;ェ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;エ\u0026#39; - \u0026#39;ェ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ォ\u0026#39;, \u0026#39;ォ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;オ\u0026#39; - \u0026#39;ォ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ヵ\u0026#39;, \u0026#39;ヵ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;カ\u0026#39; - \u0026#39;ヵ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ヶ\u0026#39;, \u0026#39;ヶ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ケ\u0026#39; - \u0026#39;ヶ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ッ\u0026#39;, \u0026#39;ッ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ツ\u0026#39; - \u0026#39;ッ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ャ\u0026#39;, \u0026#39;ャ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ヤ\u0026#39; - \u0026#39;ャ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ュ\u0026#39;, \u0026#39;ュ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ユ\u0026#39; - \u0026#39;ュ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ョ\u0026#39;, \u0026#39;ョ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ヨ\u0026#39; - \u0026#39;ョ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ヮ\u0026#39;, \u0026#39;ヮ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ワ\u0026#39; - \u0026#39;ヮ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｱ\u0026#39;, \u0026#39;ｱ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｧ\u0026#39; - \u0026#39;ｱ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ｲ\u0026#39;, \u0026#39;ｲ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｨ\u0026#39; - \u0026#39;ｲ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ｳ\u0026#39;, \u0026#39;ｳ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｩ\u0026#39; - \u0026#39;ｳ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ｴ\u0026#39;, \u0026#39;ｴ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｪ\u0026#39; - \u0026#39;ｴ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ｵ\u0026#39;, \u0026#39;ｵ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｫ\u0026#39; - \u0026#39;ｵ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ﾂ\u0026#39;, \u0026#39;ﾂ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｯ\u0026#39; - \u0026#39;ﾂ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ﾔ\u0026#39;, \u0026#39;ﾔ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｬ\u0026#39; - \u0026#39;ﾔ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ﾕ\u0026#39;, \u0026#39;ﾕ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｭ\u0026#39; - \u0026#39;ﾕ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ﾖ\u0026#39;, \u0026#39;ﾖ\u0026#39;, [unicode.MaxCase]rune{0, \u0026#39;ｮ\u0026#39; - \u0026#39;ﾖ\u0026#39;, 0}}, unicode.CaseRange{\u0026#39;ｧ\u0026#39;, \u0026#39;ｧ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ｱ\u0026#39; - \u0026#39;ｧ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｨ\u0026#39;, \u0026#39;ｨ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ｲ\u0026#39; - \u0026#39;ｨ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｩ\u0026#39;, \u0026#39;ｩ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ｳ\u0026#39; - \u0026#39;ｩ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｪ\u0026#39;, \u0026#39;ｪ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ｴ\u0026#39; - \u0026#39;ｪ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｫ\u0026#39;, \u0026#39;ｫ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ｵ\u0026#39; - \u0026#39;ｫ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｯ\u0026#39;, \u0026#39;ｯ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ﾂ\u0026#39; - \u0026#39;ｯ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｬ\u0026#39;, \u0026#39;ｬ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ﾔ\u0026#39; - \u0026#39;ｬ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｭ\u0026#39;, \u0026#39;ｭ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ﾕ\u0026#39; - \u0026#39;ｭ\u0026#39;, 0, 0}}, unicode.CaseRange{\u0026#39;ｮ\u0026#39;, \u0026#39;ｮ\u0026#39;, [unicode.MaxCase]rune{\u0026#39;ﾖ\u0026#39; - \u0026#39;ｮ\u0026#39;, 0, 0}}, } func init() { sort.Slice(kanaCase2, func(i, j int) bool { return kanaCase2[i].Lo \u0026lt; kanaCase2[j].Lo }) } func main() { kanaLower := \u0026#34;ぁぃぅぇぉゕゖっゃゅょゎ ァィゥェォヵヶッャュョヮ ｧｨｩｪｫｯｬｭｮ\u0026#34; kanaUpper := strings.ToUpperSpecial(kanaCase2, kanaLower) fmt.Println(kanaLower) fmt.Println(kanaUpper) fmt.Println(strings.ToLowerSpecial(kanaCase2, kanaUpper)) } これを実行すると\n$ go run sample3.go ぁぃぅぇぉゕゖっゃゅょゎ ァィゥェォヵヶッャュョヮ ｧｨｩｪｫｯｬｭｮ あいうえおかけつやゆよわ アイウエオカケツヤユヨワ ｱｲｳｴｵﾂﾔﾕﾖ ぁぃぅぇぉゕゖっゃゅょゎ ァィゥェォヵヶッャュョヮ ｧｨｩｪｫｯｬｭｮ となる。\nブックマーク  Go言語で文字列の変換(全角・半角、ひらがな・カタカナ)をする : Serendip – Webデザイン・プログラミング Go 言語と Unicode 正規化 Go 言語による Unicode 半角/全角変換  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   Unicode 正規化には副作用があり，実際のところコード変換用途にはお勧めできない。詳しくは拙文「Go 言語と Unicode 正規化」を参照のこと。 \u0026#x21a9;\u0026#xfe0e;\n 'ゟ' や 'ヿ' といった合略仮名文字については，今回は無視する。片仮名拡張や仮名補助も同様に扱わない。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "簡単な算数をしませう：場合の数と確率",
      "section": "remark",
      "description": "「場合の数」は小学6年生で習うらしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/math-game/",
      "published": "2020-07-12T06:11:28+00:00",
      "update": "2020-07-12T06:12:39+00:00",
      "content": "最近の義務教育のカリキュラムを知らないのだが，「場合の数」は小学6年生で習うらしい。 だから簡単だよね！\n問題 架空の《〇〇ウイルス》に関する問題。\n 《〇〇ウイルス》に感染している人は《全人口の $0.001=1\\,\\tcperthousand$》である 《〇〇ウイルス》に感染しているか否かを調べる《判定キット》がある  《判定キット》は感染しているか否かを《$0.999=99.9\\,\\%$ の確率》で正しく判定する 感染している という判定のことを《陽性》と呼ぶ 感染していない という判定のことを《陰性》と呼ぶ     この条件の下，無作為に選んだ 人を《判定キット》で調べたら《陽性》だった。この人が《〇〇ウイルス》に実際に感染している確率を求めよ。\n解答 まずは場合の数を求める。 被験者について以下の4つの場合が考えられるだろう。\n   場合 全人口に対する割合     感染者で《陽性》 $0.001 \\times 0.999 = 0.000999$   感染者で《陰性》 $0.001 \\times 0.001 = 0.000001$   非感染者で《陽性》 $0.999 \\times 0.001 = 0.000999$   非感染者で《陰性》 $0.999 \\times 0.999 = 0.998001$    この場合分けを使って《陽性》反応が出る人のうち「実際に感染している割合」を求めると以下のようになる。\n\\[ \\frac{感染者で《陽性》}{感染者で《陽性》+非感染者で《陽性》} = \\frac{0.000999}{0.000999+0.000999} = 0.500 = 50.0\\,\\% \\]  やったね！ 半々の確率で当たりだよ☆ ポイントは母集団中の感染者の割合と《判定キット》の正答率の2つの変数を合わせて考える必要がある，ということだろう。\n実際には，その辺の人を無作為に捕まえて検査を行うなどという馬鹿なことはしない（筈）。 「疑わしい人」を対象に検査を実施するのだから，母集団の構成は，当然ながら，大幅に感染者に偏っている筈である。\n余談だが\u0026hellip; 現在の日本の人口は130M人弱。 このうち COVID-2019 発症者の累計は（WHO の situation report によると） 2020-07-11 時点で21K人ほどである。 これを単純に割り算すると，国内人口の $0.16\\,\\tcperthousand$ ほどが発症した（している）ことになる。\n感染しても無症状のままというケースが多いという話も聞くので，実際の感染者の割合はもっと上がるだろうけど，10倍を上回るということはないだろう（希望的観測）。\n軽くググってみると SARS-CoV-2 向けの PCR (Polymerase Chain Reaction) 検査の感度は $97\\,\\%$ ほどらしい。 ただ技術的な巧拙によって $70\\,\\%$ 程度まで下がるとかいう話も聞くのだが，実質はどうなんだろう。\nなお「感度」は「感染者を検査して陽性になる確率」で「特異度」は「非感染者を検査して陰性になる確率」なんだそうだ。 問題の《判定キット》では感度と特異度を同じ値とみなしているが，実際には異なるらしい。\nブックマーク  「《命》に関わる確率」を疑似乱数を使って解いてみる  参考図書  数学ガールの秘密ノート／やさしい統計 結城 浩 (著) SBクリエイティブ 2016-10-28 (Release 2016-11-10) Kindle版 B01MSJMKMW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  統計の本当に基礎の部分から。学業成績でよく聞く「偏差値」とは何を表していて何を意味しているのか。なんてなあたりから。\nreviewed by Spiegel on 2016-12-11 (powered by PA-APIv5)\n  プログラマの数学 第2版 結城 浩 (著) SBクリエイティブ 2018-01-16 (Release 2018-02-08) Kindle版 B079JLW5YN (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  タイトル通りプログラマ必読書。第2版では機械学習に関する章が付録に追加された。\nreviewed by Spiegel on 2018-03-19 (powered by PA-APIv5)\n "
    },
    {
      "title": "C/2020 F3 (NEOWISE) が見頃",
      "section": "remark",
      "description": "私は朝が弱いので，明け方の天文イベントはダメダメなんだよなぁ orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/comet-neowise/",
      "published": "2020-07-12T03:30:53+00:00",
      "update": "2020-07-12T03:31:12+00:00",
      "content": "2020年3月に NEOWISE によって発見された彗星 C/2020 F3 (NEOWISE) が明け方の東の空で見頃になっているらしい。 私は朝が弱いので，明け方の天文イベントはダメダメなんだよなぁ orz\nちうわけで記念に記事を残しておく。 以下は ISS から見た NEOWISE 彗星だそうだ。\n  Comet NEOWISE from ISS - YouTube  この動画の3分過ぎあたりから NEOWISE 彗星が昇ってくる。\nまた “Astronomy Picture of the Day” でも NEOWISE 彗星の画像が連日アップされている。\n APOD: 2020 July 7 - Comet NEOWISE over Lebanon APOD: 2020 July 9 - Noctilucent NEOWISE APOD: 2020 July 10 - Comet NEOWISE from the ISS APOD: 2020 July 11 - The Tails of Comet NEOWISE  ちなみに NEOWISE は NASA の WISE (Wide-field Infrared Survey Explorer) 宇宙望遠鏡を使って地球近傍天体（Near-Earth Object; NEO）を捜索するためのミッションおよび宇宙機を指している。 ちゃんと仕事して成果を出してるわけやね。\nブックマーク  （速報）ネオワイズ彗星が明るい（2020年7月） | 国立天文台(NAOJ) マウナケアに昇るネオワイズ彗星 | トピックス・お知らせ | すばる望遠鏡  参考図書  天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいる。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\n  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-07-12 のブックマーク",
      "section": "bookmarks",
      "description": "「ネオワイズ彗星が明るい」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/07/12-bookmarks/",
      "published": "2020-07-12T02:35:36+00:00",
      "update": "2020-07-12T02:35:55+00:00",
      "content": "リリース情報  Announcing Rustup 1.22.0 | Rust Blog  Announcing Rustup 1.22.1 | Rust Blog   Release June 2020 · microsoft/vscode · GitHub Release Release 2.6.0 · keepassxreboot/keepassxc · GitHub  バベルのインターネット  MIT Tech Review: 国家安全法で激変する香港のネット環境、ティックトックは撤退へ  TikTokは米国での締め出しに直面し、香港からの撤退を発表 | TechCrunch Japan   MIT Tech Review: トランプ大統領の就労ビザ発給停止、「AI大国」地位に影響か  トランプ大統領の突然の留学ビザ制限は米国社会に広く影響する | TechCrunch Japan   米国は政府契約業者によるファーウェイ製品の使用禁止を正式決定する方向へ | TechCrunch Japan グーグルが中国などを対象としたクラウドのプロジェクトを中止 | TechCrunch Japan FacebookとInstagramがトランプ大統領の盟友ロジャー・ストーン氏の関連アカウントを凍結 | TechCrunch Japan  セキュリティ＆プライバシー関連  研究者にデータへの「有意義な」アクセス権を与えることとプライバシーは両立する | TechCrunch Japan 複数の BIG-IP 製品の脆弱性 (CVE-2020-5902) に関する注意喚起 CRYPTREC | 注意喚起情報 現在の量子コンピュータによる暗号技術の安全性への影響 CRYPTREC | 「TLS暗号設定ガイドライン」第3.0版及び「暗号鍵管理システム設計指針 (基本編)」第1版の公開  「TLS暗号設定ガイドライン」第3.0版  「暗号鍵管理システム設計指針 (基本編)」第1版  暗号鍵管理ガイドライン：IPA 独立行政法人 情報処理推進機構   「Microsoft Defender ATP」にセキュリティ設定評価機能が追加 - ZDNet Japan ASCII.jp：テレワークが進むなか、「VPN」についてあらためて知っておこう 無償のファイル送信サービス“Firefox Send”が一時停止中 ～マルウェアによる悪用が増加 - 窓の杜 Subdomain Takeoverによる詐欺サイトへの誘導についてまとめてみた - piyolog Hacker leaks passwords for more than 500,000 servers, routers, and IoT devices | ZDNet  Half a Million IoT Passwords Leaked - Schneier on Security   Your Privilege Gives Your Privacy Away: AnAnalysis of a Home Security Camera Service   Home security cameras can tell burglars when you\u0026rsquo;re not in, study shows - CNN Traffic Analysis of Home Security Cameras - Schneier on Security   スマートウォッチに偽の「薬を服用」アラートを送れる脆弱性が発覚 | TechCrunch Japan Looks Like Russian Hackers Are on an Email Scam Spree | WIRED  Business Email Compromise (BEC) Criminal Ring - Schneier on Security   量子コンピュータ対応の暗号化セキュリティ技術を擁するPQShieldが7.5億万円調達 | TechCrunch Japan  天文関連  CONTACT Japan | CONTACT Japan 2020年7月10日ニュース「ブラックホールが謎の天体と衝突 米欧、重力波で観測」 | SciencePortal 京大せいめい望遠鏡でスーパーフレアの検出に成功―生命居住可能な惑星への影響の理解に向けて― | 国立天文台(NAOJ) （速報）ネオワイズ彗星が明るい（2020年7月） | 国立天文台(NAOJ)  APOD: 2020 July 9 - Noctilucent NEOWISE APOD: 2020 July 10 - Comet NEOWISE from the ISS マウナケアに昇るネオワイズ彗星 | トピックス・お知らせ | すばる望遠鏡   サハラから大西洋を横断してアメリカへ。宇宙から見た巨大な砂塵の雲 | sorae 宇宙へのポータルサイト  知財関連  GitHub Removes \u0026lsquo;Chimera13\u0026rsquo; iOS Jailbreak After DMCA Notice from \u0026lsquo;Unc0ver\u0026rsquo; * TorrentFreak  Linux または Ubuntu に関する話題  Ubuntu 19.10 その180 - Ubuntu 19.10のサポート終了日のお知らせ・Ubuntu 20.04 LTSにアップグレードを - kledgeb LinuxでWindowsアプリを動かすWineの開発版「Wine 5.12」が公開 | OSDN Magazine  その他  Webアクション「部屋裏のバイテン」第3話 : ぽじとろんの竹本泉観察記 ブログ: ここはどこ? (Google AMP) プログラミングをする必要がなくなった後に人間に何が残るのか？ - YAMDAS現更新履歴 数学ガールの秘密ノート／複素数の広がり | 結城浩  数学ガールの秘密ノート／複素数の広がり | 結城 浩 | 数学 | Kindleストア | Amazon   オラクル、インメモリグリッドの「Oracle Coherence」をオープンソース化。「Oracle Coherence Community Edition」を発表 － Publickey Armはチップ設計に集中、大成功中のIoT事業は分社化してソフトバンク直轄に | TechCrunch Japan AWS、Linux対応の.NET Coreへ、Windows用.NET Frameworkアプリの移植支援ツール「Porting Assistant for .NET」発表 － Publickey 電子署名のDocuSignがオンライン公証のLiveoak Technologiesを41億円で買収 | TechCrunch Japan アドビと富士ゼロックス、電⼦サイン市場で連携強化 - ZDNet Japan Flutter、Linuxデスクトップアプリの開発対応へ、アルファ版を発表。Canonicalと協業で － Publickey  グーグルがカノニカルと連携、「Flutter」でLinuxアプリ開発が可能に\u0026ndash;アルファ版 - ZDNet Japan   Dockerイメージの理解を目指すチュートリアル - Qiita ASCII.jp：政府機関における多言語自動翻訳システムセキュリティに対応した多言語音声翻訳APIサービスを開始 よく使うcurlコマンドのオプション - Qiita Kindle蔵書一覧を取得する方法 - Qiita  蔵書管理が捗る！　Kindleで購入済み本の一覧をCSVで取得する方法が有益と話題に【やじうまWatch】 - INTERNET Watch   Facebookのコード変更の影響でSpotifyやPinterest、WazeなどのiOSアプリがクラッシュ | TechCrunch Japan  "
    },
    {
      "title": "GnuPG 2.2.21 および Libgcrypt 1.8.6 がリリースされた",
      "section": "release",
      "description": "AEAD Encrypted Data Packet の復号に対応したか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/07/gnupg-2_2_21-is-released/",
      "published": "2020-07-10T02:13:57+00:00",
      "update": "2020-07-10T02:19:07+00:00",
      "content": "GnuPG 2.2.21 および Libgcrypt 1.8.6 がリリースされた。\n [Announce] GnuPG 2.2.21 released [Announce] Libgcrypt 1.8.6 released  メンテナンス・リリース。 両者ともセキュリティ・アップデートはなし。 詳細はこちら。\n gpg: Improve symmetric decryption speed by about 25%. See commit 144b95cc9d. gpg: Support decryption of AEAD encrypted data packets. gpg: Add option --no-include-key-block. [#4856] gpg: Allow for extra padding in ECDH. [#4908] gpg: Only a single pinentry is shown for symmetric encryption if the pinentry supports this. [#4971] gpg: Print a note if no keys are given to --delete-key. [#4959] gpg,gpgsm: The ridiculous passphrase quality bar is not anymore shown. [#2103] gpgsm: Certificates without a CRL distribution point are now considered valid without looking up a CRL. The new option --enable-issuer-based-crl-check can be used to revert to the former behaviour. gpgsm: Support rsaPSS signature verification. [#4538] gpgsm: Unless CRL checking is disabled lookup a missing issuer certificate using the certificate\u0026rsquo;s authorityInfoAccess. [#4898] gpgsm: Print the certificate\u0026rsquo;s serial number also in decimal notation. gpgsm: Fix possible NULL-deref in messages of --gen-key. [#4895] scd: Support the CardOS 5 based D-Trust Card 3.1. dirmngr: Allow http URLs with \u0026ldquo;LOOKUP --url\u0026rdquo;. wkd: Take name of sendmail from configure. Fixes an OpenBSD specific bug. [#4886]  Release-info: https://dev.gnupg.org/T4897 via GnuPG 2.2.21 released   Bug fixes:  Fix build problems on OpenIndiana et al. [#4818] Fix GCM bug on arm64 which troubles for example OMEMO. [#4986] Fix wrong code execution in Poly1305 ARM/NEON implementation. [#4833] Detect a div-by-zero in a debug helper tool. [#4868] Use a constant time mpi_inv in some cases and change the order mpi_invm is called. [#4869] Fix mpi_copy to correctly handle flags of opaque MPIs. Fix mpi_cmp to consider +0 and -0 the same.   Other features:  Add OIDs from RFC-8410 as aliases for Ed25519 and Curve25519.    Release-info: https://dev.gnupg.org/T4985 via Libgcrypt 1.8.6 released  ふむふむ。 AEAD Encrypted Data Packet (tag 20) の復号に対応したか。\nAEAD Encrypted Data Packet は次期 OpenPGP (RFC 4880bis) で導入されるフォーマットで， AEAD (Authenticated Encryption with Associated Data; 認証付き暗号) に対応している。 利用可能な暗号モードは以下の通り。\n    ID暗号モード参考文献    1 EAX EAX: A Conventional Authenticated-Encryption Mode  2 OCB RFC7253  100-110 Private/Experimental algorithm    OpenPGP で使用可能な認証付き暗号アルゴリズム一覧   RFC 4880bis では EAX が MUST になっている。 ちなみに，拙作の gpgpdump では AEAD Encrypted Data Packet を一応識別可能である。\nアップデートは計画的に。\nブックマーク  OpenPGP で利用可能なアルゴリズム（RFC 4880bis 対応版） OpenPGP パケットを可視化する gpgpdump  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "経路の暗号化とデータの暗号化では要件が異なる",
      "section": "remark",
      "description": "データを安全に受け渡ししたいのならデータの暗号化を端折ってはいけない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/requirement-for-encryption/",
      "published": "2020-07-08T05:40:40+00:00",
      "update": "2020-07-12T02:35:55+00:00",
      "content": "数学ガール・シリーズを読んでる途中だが，気になる記事を見つけたので。\n以前の記事で紹介した「情報処理」2020年7月号内の PPAP 座談会で妙に Firefox Send を推してるなぁ，と思っていたが（笑），実は件のサービスが一時停止に追い込まれているらしい。\n 無償のファイル送信サービス“Firefox Send”が一時停止中 ～マルウェアによる悪用が増加 - 窓の杜  なんでも\n  “Firefox Send”が利用する“send.firefox.com”というドメインは比較的信頼されており、スパムメールフィルターをパスしてしまったり、警戒心の高いユーザーでさえも気を許してクリックしてしまう可能性がある。  via 無償のファイル送信サービス“Firefox Send”が一時停止中 ～マルウェアによる悪用が増加  とのこと。\n私は今回の件で Firefox Send 側に瑕疵があるとは思わない。 でも詐欺（social engineering）の温床になるのであれば，最悪は閉鎖せざるを得ないだろう。 ニンともカンとも，お気の毒なことである。\n暗号化の手段 あるデータを暗号化技術によってオンラインで安全に運ぶための手段としては，大きく2つある。\n 経路の暗号化 データの暗号化  例えば TLS (Transport Layer Security) は典型的な「経路の暗号化」である。 暗号化メッセージング・サービスも基本的には「経路の暗号化」によってメッセージの秘匿を達成している。\nFirefox Send は一見「データの暗号化」に見えるかもしれないが，実は「経路の暗号化」に分類できる。 何故なら Firefox Send はデータ送受信のエンド・ポイントには介入しないからだ。 ここに犯罪者の付け入る余地がある。\n経路の暗号化の4要件 経路の暗号化の要件には以下の4つがある。\n 機密性（Confidentiality） 完全性（Integrity） 認証（Authentication） 否認可能（Deniability）  経路の暗号化の場合，セッション中になりすましや改ざんがないことは勿論だが，セッション終了後のいかなる時点でも内容が再生されないこと，が要求される。 そのためには「否認可能」であることが必要なのだ。\n「否認可能」を達成する方法としては PFS (Perfect Forward Secrecy) を組み込む手がある。\nデータの暗号化の4要件 一方，データの暗号化の要件は経路の暗号化の要件とは少し異なっている。\n 機密性（Confidentiality） 完全性（Integrity） 認証（Authentication） 否認防止（Non-repudiation）  見ての通り，注目は4番目の「否認防止」である。\n「否認防止」とは，「データを送った」という事実を送信側が否定できないこと，を指す。 もっと簡単に郵便の比喩で言うなら「内容証明付き」のデータにするということである。\nこれを達成するには永続的（証明（certification）された公開鍵がセッションやドメインを超えて有効であること）な鍵で電子署名すればよい。\nデータの暗号化を端折ってはいけない 注意すべきは「否認可能」と「否認防止」は要件としては真逆である点だ。\nもし Firefox Send で送るデータに最低でも（経路の暗号化とは異なる鍵で）電子署名を付与していれば多少はリスクを軽減できたかもしれない。 まぁ URL で釣る（phishing）のはオンライン詐欺の常套手段なので，そもそも URL を渡すアイデアが微妙なのかもしれないけど。\n公開鍵暗号方式を利用した暗号化を面倒臭がる人は多く1，これを隠蔽または回避するために（経路の暗号化のみで）データの暗号化を端折るサービスやアプリケーションが多いが，データを（暗号化技術を使って）安全に受け渡ししたいのなら端折ってはいけない。\n参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n  情報処理 2020年7月号 情報処理学会 (著)  2020-06-15 (Release 2020-06-15) Kindle版 B089N3VX86 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  PPAP 特集（笑）\nreviewed by Spiegel on 2020-06-25 (powered by PA-APIv5)\n   毎回パスワードを考えてデータをロックするより，最初に公開鍵を決めておいて使いまわしたほうが楽だし安全だと思うのだが\u0026hellip; \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ノーコード・プラットフォームとトレーディングカード",
      "section": "remark",
      "description": "プレイヤーに与えられた「自由」はゲームという箱庭の内部にしか存在しない。箱庭自体を弄ることはできないし，箱庭の外に出る意義もない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/no-code-platform/",
      "published": "2020-07-07T05:48:52+00:00",
      "update": "2020-07-07T07:04:18+00:00",
      "content": "面白い記事を見つけたので，私もポエムを書いてみる（笑）\n 2030年 「エンジニアです。コードは書けません。」｜__shinji__｜note プログラミングをする必要がなくなった後に人間に何が残るのか？ - YAMDAS現更新履歴  ちなみに私の親父が現役会社員だったあたりまでの時代にはプログラマとは別に「コーダー」という職業があって「2030年 「エンジニアです。コードは書けません。」で言うところの「パンチャー」に近い，ひたすら「コードを書く」だけの仕事だったそうな。\nもっと言うと，私がペーペーの新人だった頃の某大手プロジェクトでは詳細設計を「馬鹿でもコードが書ける」くらいまでブレイクダウンさせることが要求されていた。 まぁ，私がちょっと昔に助っ人で入った Java 系プロジェクトでも詳細設計に SQL 文が書いてあって「この通りに入力しろ」と言われたことがあるが（笑）\n実は「ノーコード・プラットフォーム」のようなものは1990年代に一大ブームがあって，当時は CASE と呼ばれていたが1，私もその手のプロジェクトに参加したことがある。 1990年代のブームには「産業界におけるオブジェクト指向の台頭」という背景があって，つまり「ノーコード・プラットフォーム」ってのはオブジェクト指向の究極というか「夢」なんだよね。\nさて，最初の記事でも紹介されているように「ノーコード・プラットフォーム」が特に AI 分野で注目されている。\n Googleはなぜノーコード開発ツールのAppSheetを買収し、1年半前に正式版になったばかりのApp Makerを終了させるのか？ － Publickey AWSのノーコードツール「Amazon Honeycode」はなぜ生まれたのか？ | TechCrunch Japan  私のようなロートルから見れば「この道はいつか来た道♪」とか思ってしまうのだが，将来どうなるかは（私には）予想できない。 本当に「エンジニアです。コードは書けません」という未来がやってくるかもしれない。\n「プログラミング」について物凄くものすごーく簡単に言うと「データと機能の状態を表現する」ことに尽きる（フローチャートは忘れようw）。 「状態を表現」できるのであれば，穴ボコだろうが文字コードだろうが，もっと別の手段（電子ブロックとかw）でも構わないわけだ。 ただ，まぁ，本当に AI 技術が情報処理の主役になるのなら，ノイマン型のプラットフォームは衰退するだろうけどね。\n20世紀末に夢見た CASE と比べて「ノーコード・プラットフォーム」は既に特定の「何か」から強い統制を受けている点が異なる。 これは「トレーディングカード」の比喩で考えると分かりやすい。\nトレーディングカードの主な遊び方はデッキを構築して対戦することだ。 デッキの組み方は（定石やローカルルールはあるが）基本的に自由で，人によって無限の組み合わせがあると言っていいだろう。 しかしカードの種類とレアリティは配給企業がコントロールしていて「持たざるもの」に不利に働くようチューニングされている（故に皆「持」とうとする）。 言い換えればプレイヤーに与えられた「自由」はゲームという箱庭の内部にしか存在しない。 箱庭自体を弄ることはできないし，箱庭の外に出る意義もない。\n「ノーコード・プラットフォーム」に限らずクラウド上の XaaS は等しく「箱庭」の境界問題を抱えている。 FOSS を通じて「コードの自由」を知っている私達が「ノーコード・プラットフォーム」の内側だけで満足できるのか。\nまぁ「インターネットの黄金時代」が云々とか言いつつ，結局は「中央集権型のインターネット」に甘んじている現状を見れば，トレーディングカード・ゲームと同じく「箱庭の外に出る意義もない」のかもしれないが（笑）\nブックマーク  ブログ: ローコードとノーコードプラットフォームはプログラミングに革命をもたらすか?  参考図書  白秋の詩情~この道 生誕120周年記念~ 童謡・唱歌 (アーティスト), 米良美一 (アーティスト), タンポポ児童合唱団 (アーティスト), ひばり児童合唱団 (アーティスト), 高橋知子 (アーティスト), サカモト児童合唱団 (アーティスト), 真理ヨシコ (アーティスト), 芹洋子 (アーティスト), 藤家虹二クインテット\u0026#43;α (アーティスト), ダーク・ダックス (アーティスト), ペギー葉山 (アーティスト) キングレコード (Release 2005-09-22) CD B000ALJ18G (ASIN), 4988003313180 (EAN)  北原白秋の童謡集。\nreviewed by Spiegel on 2020-07-07 (powered by PA-APIv5)\n  【合本版】問題児たちが異世界から来るそうですよ？　全12巻 (角川スニーカー文庫) 竜ノ湖 太郎 (著), 天之有 (イラスト), ももこ (イラスト) KADOKAWA 2016-06-01 (Release 2016-06-01) Kindle版 B01G12HBDY (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  おおっ，合本版が出てる。好きな作品だけど6巻くらいまでしか読んでないんだよな。\nreviewed by Spiegel on 2020-07-07 (powered by PA-APIv5)\n   いま世の中にある CASE ツールは，当時の「夢」のかけらもしくはサブセットのようなものなので，実質は違うものと考えていただければ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Virtue Signaling という広告",
      "section": "remark",
      "description": "「それは広く配偶選択や社会選択における自分の広告であり，その真実性を担保するためのコストとしての側面を持つのからなのだ」",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/virtue-signaling/",
      "published": "2020-07-07T02:08:21+00:00",
      "update": "2020-07-07T02:11:30+00:00",
      "content": "「黄色矮星人は2人いれば力比べを始める」と曰ったのは（最近の肩書は知らないが多分）SF作家の野尻抱介さんだが，差別や社会階級の問題は地球人類が黄色矮星人である限り逃れられない「業」のような気がする。\nとは言え，昨今の黒人差別問題に対する米国社会の反応については首をひねるところもあり，それを象徴する言葉（のひとつ）が Virtue Signaling なんじゃないかと思った。\n Kleidermacher氏は講演を取りやめると発表したツイートの中で、情報セキュリティ業界に対し、「ブラックハット」「ホワイトハット」「MITM（マンインザミドル）攻撃」などの用語を、中立的な別の用語に切り替えるよう求めた。\n[\u0026hellip;]\n中にはKleidermacher氏の主張に同調した専門家もいたが、大多数は同意せず、この呼びかけを「極端な美徳シグナリング」だととがめた。（美徳シグナリング：virtue signalingは、自分が倫理的であることを過度にアピールするような行為を指し、それをやゆする表現）\n多くのセキュリティ専門家は、これらの用語は人種差別や肌の色とはまったく関係がなく、古い西部劇映画で、悪玉が「黒いハット」を、善玉が「白いハット」を被っていたことに由来していると指摘した。\n via 「ブラックハット」も差別連想？--用語変更についてセキュリティコミュニティで議論に - ZDNet Japan  他にも Twitter による\n Twitter、コードやドキュメント内の用語「Whitelist/Blacklist」「Master/Slave」「Dummy value」などを好ましい用語へ置き換え、具体例も発表 － Publickey  みたいな話もあり，マニュアル等ドキュメントの類はあり得るにしても，コードの中身にまで手を入れるのはどうなん？ という気がする。 それを言うなら UNIX 系の kill コマンドは廃止すべきだよね（笑）\nところで，この Virtue Signaling は，どうも昨年出版された本から来ているらしい。\n 書評　「Virtue Signaling」 - shorebird　進化心理学中心の書評など  この書評にある\n ミラーは徳シグナリングは「偽善」の刻印を持つが，なぜそれが悪徳とされずにディスプレイされ続けるのかを考え，それは広く配偶選択や社会選択（部族の一員であることはこの1つとなるだろう）における自分の（配偶者や同盟相手としての優秀性についての）広告であり，その真実性を担保するためのコストとしての側面を持つのからなのだと議論している via 書評　「Virtue Signaling」  の部分は腑に落ちる話で，邦訳版があるならちょっと読んでみたい。\nこの考え方でいくと，3.11以降の某ACのテレビ広告とかモロに Virtue Signaling だな（笑）\nブックマーク  メディアは（常に）スパムか？ « マガジン航[kɔː]  参考図書  Virtue Signaling: Essays on Darwinian Politics \u0026amp; Free Speech (English Edition) Miller, Geoffrey (著) Cambrian Moon 2019-09-17 (Release 2019-09-17) Kindle版 B07Y29NV9P (ASIN)  shorebird さんによる書評はこちら。邦訳版があるなら読んでみたい。\nreviewed by Spiegel on 2020-07-07 (powered by PA-APIv5)\n  ちびくろサンボ ヘレン・バナーマン (著), フランク・ドビアス (イラスト) 径書房 2008-06-16 単行本 4770501994 (ASIN), 9784770501998 (EAN), 4770501994 (ISBN)  イラスト等原書に近い内容らしい。これは紙のほうがいいかな。\nreviewed by Spiegel on 2020-07-07 (powered by PA-APIv5)\n  Ebony \u0026amp; Ivory (Made Famous by Paul McCartney \u0026amp; Stevie Wonder) Soul City Singers (メインアーティスト) Big Eye Music 2011-02-01 (Release 2011-02-01) MP3 ダウンロード B01GJZKCUC (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  嗚呼 Stevie Wonder 様！\nreviewed by Spiegel on 2020-07-07 (powered by PA-APIv5)\n  スパム[spam]:インターネットのダークサイド フィン・ブラントン (著), 生貝直人 (監修), 成原慧 (監修), 松浦俊輔 (翻訳) 河出書房新社 2015-12-25 単行本 430924744X (ASIN), 9784309247441 (EAN), 430924744X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  今読んでるけど読みづらい。修飾語が多すぎるよ。ギリシア神話かっての。\nreviewed by Spiegel on 2016-12-10 (powered by PA-APIv5)\n "
    },
    {
      "title": "Thunderbird 78 で署名・暗号化を行うのは少し待ったほうがいいらしい",
      "section": "remark",
      "description": "ここは大人しく 78.2 が出るまで待つか。 それともチャレンジするか（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/openpgp-with-thunderbird-78/",
      "published": "2020-07-05T03:41:15+00:00",
      "update": "2020-07-05T03:43:05+00:00",
      "content": "先日 Firefox 78 がリリースされ ESR 版も 78 ベースにアップグレードされた。\n Firefox 78.0, See All New Features, Updates and Fixes  これに伴い Thunderbird も今後は 78 ベースになる予定だが，このアップグレードを前に Enigmail から以下の注意喚起が出た。\n 実は OpenPGP 暗号化機能を提供する拡張機能 Enigmail が Thunderbird 78 から標準機能として組み込まれることが（昨年時点で）決まっていた。\n Thunderbird, Enigmail and OpenPGP | The Mozilla Thunderbird Blog  のだが，どうやら Thunderbird 78.0 リリース時点では安定した機能を提供というわけにはいかないようだ。 ここは大人しく 78.2 が出るまで待つか。 それともチャレンジするか（笑）\nブックマーク  Thunderbird でメール暗号化  参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-07-05 のブックマーク",
      "section": "bookmarks",
      "description": "「「Perl 7」が発表--約26年ぶりのメジャーリリース」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/07/05-bookmarks/",
      "published": "2020-07-05T00:06:16+00:00",
      "update": "2020-07-05T00:06:46+00:00",
      "content": "リリース情報  Announcement of LibreOffice 6.4.5 - The Document Foundation Blog  バベルのインターネット  インド政府がTikTokなど中国企業の59のアプリを禁止すると発表 | TechCrunch Japan  インド政府による禁止措置を受けてTikTokがインドでアクセス不可に | TechCrunch Japan   Twitchがトランプ大統領のアカウントを停止、Redditも「The_Donald」と関連サブレディットを追放 | TechCrunch Japan YouTubeが極右の著名人たちのチャンネルを停止 | TechCrunch Japan  セキュリティ＆プライバシー関連  リモートログオンクライアント「PuTTY」v0.74が公開 ～解放後メモリ利用の脆弱性を修正 - 窓の杜 スマホが使えなくなった……「世界一受けたい授業」が紹介した「SIMカードロック」でトラブル相次ぐ　専門家は「危険性の高い機能」と指摘【日テレのコメントを追記】 (1/2) - ITmedia NEWS : www TikTok and 32 other iOS apps still snoop your sensitive clipboard data | Ars Technica  iPhone Apps Stealing Clipboard Data - Schneier on Security   Google removes 25 Android apps caught stealing Facebook credentials | ZDNet  Android Apps Stealing Facebook Credentials - Schneier on Security   Microsoft Windows Codecs Library の脆弱性 (CVE-2020-1425, CVE-2020-1457) に関する注意喚起 米政府機関がPalo Alto NetworksのVPNセキュリティの欠陥を警告 | TechCrunch Japan FCCがファーウェイとZTEを「安全保障上の脅威」に指定した背景 | TechCrunch Japan 正規番号でファックス誤送信が起きたNTT西の電話サービス故障についてまとめてみた - piyolog フリーのネットワーク解析ツール「Wireshark」v3.2.5/v3.0.12/v2.6.18が公開 - 窓の杜 BYOD端末と撤去控えたサーバーが狙われたNTTコミュニケーションズへの2つの不正アクセスをまとめてみた - piyolog  NTT Comへの不正アクセス、BYOD端末からの経路も判明 - ZDNet Japan   VICE - How Police Secretly Took Over a Global Phone Network for Organized Crime  EncroChat Hacked by Police - Schneier on Security 欧州警察が暗号化チャットアプリ「EncroChat」にマルウェアを仕込み犯罪者1000人以上を逮捕 | TechCrunch Japan    天文関連  188cm反射望遠鏡、初めての一般向け貸し切り共同利用 | 国立天文台(NAOJ) : 母校である広大天文研OB会の話題が（笑） SpaceXがGPS III衛星打ち上げとブースター回収に成功 | TechCrunch Japan MIT Tech Review: ブラックホールの合体を光で初観測か、カリフォルニア工科大  その他  新型コロナウイルス「東京都の現状は第2波ではない」をどう考えるか｜塚本 牧生｜note 「Perl 7」が発表\u0026ndash;約26年ぶりのメジャーリリース - ZDNet Japan : 今まで正式リリースじゃなかったのか 「Angular 10」正式リリース。TypeScript 3.9サポート － Publickey 「Python 3.7.8/3.6.11」が公開 ～「Python 3.7」系は今後セキュリティ修正のみに - 窓の杜 フリーの会計ソフト「GnuCash 4」が公開 ～約2年ぶりのメジャーアップデート - 窓の杜 その他のレポート イベントレポート「『コロナ後の社会で、スポーツの価値とは』 日本学術会議フォーラム、議論白熱」| SciencePortal セキュリティスキャナー「Tsunami」、名称に関するIssueがクローズ。実は「津波早期警戒システム」が略されたものだったと釈明。ドキュメントで詳細に説明へ － Publickey 「Google Cloud VMware Engine」正式リリース。Google Cloudのベアメタルサーバ上にVMware環境を構築 － Publickey 美少女戦士セーラームーン ウェディングドレス コレクション：美少女戦士セーラームーン 25周年プロジェクト公式サイト トーバルズ氏が語ったLinuxカーネル開発者や開発の未来 - ZDNet Japan LibreOffice 7.0 RC1 Bug Hunting Session - The Document Foundation Blog 2020年7月1日ニュース「国内初のコロナワクチンの治験を開始 創薬ベンチャーの『アンジェス』」 | SciencePortal NEC、量子コンピューティングの業務適用を支援\u0026ndash;教育・技術検証サービスを提供 - ZDNet Japan Linuxの生みの親トーバルズ氏の最新自作マシンを徹底解剖\u0026ndash;本人のコメント付きで構成を紹介 - ZDNet Japan MIT Tech Review: 新型コロナとインフルの似ているところ、違うところ＝WHO報告 「OneDrive」と「SharePoint」でアップロード可能なファイルサイズが15GBから100GBに - 窓の杜 OnionShare  "
    }
  ]
}
