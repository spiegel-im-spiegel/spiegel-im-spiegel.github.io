{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "NIST FIPS 186-5 および SP 800-186 正式版がリリースされた",
      "section": "remark",
      "description": "DSA が標準から外れる / ECDSA 自体を定義し直す / EdDSA が標準として承認された",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/02/nist-fips-186-5/",
      "published": "2023-02-04T00:30:31+00:00",
      "update": "2023-02-04T00:43:39+00:00",
      "content": "長い間ドラフト状態だった FIPS 186-5 および SP 800-186 の最終版が出たようだ。\nFIPS 186-5, Digital Signature Standard (DSS) | CSRC SP 800-186, Discrete Logarithm-Based Crypto: Elliptic Curve Parameters | CSRC この記事では FIPS 186-5 に注目して書いてみる。\n大きな変更は3つ。\nDSA が標準から外れる Prior versions of this standard specified the DSA. This standard no longer approves the DSA for digital signature generation. However, the DSA may be used to verify signatures generated prior to the implementation date of this standard. See FIPS 186-4 [7] for the specifications for the DSA. via “Digital Signature Standard (DSS)” section 4 ということで予定通り，電子署名生成用途としては， DSA は NIST 標準から外れることになった。 ただし，以前に DSA で作成された署名を検証する必要があるため，アプリケーションによっては実装を残しておく必要がある。 DSA 実装に関しては旧版の FIPS 186-4 を読めってあるな。\nECDSA 自体を定義し直す 今まで ECDSA の実装については，以前の FIPS 186-4 だけでは完結してなくて， ANSI X9.62 なんかも併せて参照する必要があった。 特に ANSI X9.62 は所謂 paywalled document って奴で，誰でも気軽に見れるもんじゃないのね。\nまだ中身をちゃんと読んでないのだが，この版ではそういった外部参照を取り払って FIPS 186-5 のみで実装を定義しているようだ。 めでたい！ 言い方を変えると，今後 ECDSA を実装する際は FIPS 186-5 を見ろってことでもある。 まぁ，私を含めて殆どの人は偉い人が作ったライブラリを利用するだけで，中身を気にする人は少ないだろうけど（笑）\nEdDSA が標準として承認された そして最大のトピックは EdDSA が NIST 標準として承認されたことだろう。\nちなみに EdDSA については，日本の CRYPTREC でも評価が行われていて\n総評：下記の観点から、EdDSA の構成に関わる安全性において、EdDSA が ECDSA に劣ると考えられる点は無いと思われると述べている。 Schnorr 署名をもとに EdDSA は構成されているため、ランダムオラクルモデルで安全性が証明されている Schnorr 署名に対する安全性評価を参考にすることができる。 Schnorr 署名との大きな違いはノンスの生成方法であるが、EdDSA におけるノンスの生成方法は、署名の内部乱数を弱い疑似乱数生成器に委ねることによる危険を排除し、現実的な脅威を回避するための配慮が施されている。 比較対象となる ECDSA については、既存結果として generic group model でのみ安全性が証明されている。 CRYPTREC Report 2020 暗号技術評価委員会報告より と書かれている。 まぁ，これで政府調達でも何でも大手を振って EdDSA を使えるというものである。\nめでたい！ （大事なことなので2度言いました）\nブックマーク Edwards-curve Digital Signature Algorithm DSA は NIST 電子署名標準から外れるようだ 量子コンピュータで256ビット楕円曲線暗号は破れるか 参考図書 暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n"
    },
    {
      "title": "Twitter のいないセカイ",
      "section": "remark",
      "description": "私は当面（Web 2.0 な）古き良き「ネットサーフィン」で凌いでいきますかね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/02/without-twitter/",
      "published": "2023-02-03T03:16:46+00:00",
      "update": "2023-02-03T04:07:08+00:00",
      "content": "またぞろ Twitter がやらかしてるらしい。\nTwitter will discontinue offering free access to the Twitter API starting February 9 and will launch a paid version, the Elon Musk-owned microblogging website said as it looks for more avenues to monetize the platform. via Twitter to end free access to its API in Elon Musk’s latest monetization push | TechCrunch あらゆるところから銭をむしり取ろうとする態度は，まるで日本の財務\u0026hellip; げふんげふん。\nあとボット判定ロジックが変わったのか，毎日似た tweets をしているアカウントをボットと見做して凍結三昧だそうな。 何がしたいんだろうねぇ。\n関係あるか知らないけど，私がメインで活動している Fedibird は招待以外のサインアップを当面凍結するらしい。 登録ユーザ数が26Kを超えたそうで，週間アクティブユーザ数も7K〜8Kくらいで推移してるんだとか。 更に大手のサーバとか本当に大変なんだろうなぁ。\nTwitter の凍結祭りは定期的に開催されていているが，毎度 criteria が不明瞭で BAN されたユーザから推測するしかない。 ルールを守らせる一番簡単な方法はルールの内容を知らせず罰だけを与えることだそうで，これによりコミュニティのメンバは疑心暗鬼になって勝手に自粛するのでコントロールしやすいらしい。 カルトや秘密結社でよく聞くやつやね（笑）\n私は既に軸足を Mastodon に移しているので，仮に IFTTT 経由でのアナウンスのせいでボットと見做され BAN されたところで大した被害はない（オーディエンスも少ないしw）。 でも Mastodon メインで活動するようになって痛感したのは，今まで情報収集をいかに Twitter に依存してたかなんだよねぇ。 いまさら無自覚だったことに気づいた。\nTwitter をあまり見なくなってから再び Feedly をよく利用するようになった。 でも， Feedly に登録しているサイトの構成が古いままなので，少し整理しないといけないかも。 あと，私自身が Twitter を見なくなっても，よく見るニュースサイトなんか，あからさまにどこぞの tweets を引用して取材したふりをする記事が多い。 API が有料化になり大規模な情報収集が高コストになると，そーゆーのも難しくなるのかねぇ。\n情報収集手段という点に於いて Mastodon は Twitter の代わりにはならない。 軸足を Mastodon に移すなら Twitter でやってたような情報収集はできないと思ったほうがいい。 サービス側が勝手に「おすすめ」することもない。 情報の取捨選択がユーザの制御下にあるということの意味は，全てユーザが（自動か手動かはともかく）制御しなければならないということだ。\nまた， Mastodon は複数サーバの連合システムだが，全てのサーバが双方向に繋がっているわけではないし，繋がっているサーバの全ての投稿を拾っているわけでもない。 離島みたいなおひとりさまサーバも多かろう。 しかも Mastodon は（標準では）全文検索機能がないのだ。 以前は Mastodon 向けの検索サービスとかあったらしいが，今は大方シャットダウンしているそうな。\n世の中がどう転ぶかは知らないが，私は当面（Web 2.0 な）古き良き「ネットサーフィン」で凌いでいきますかね。\nブックマーク Fediverse 関連のブックマーク "
    },
    {
      "title": "Go 1.20 がリリースされた",
      "section": "release",
      "description": "とりあえずマルチエラーに関してはちゃんと調査しないと。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2023/02/go-1_20-is-released/",
      "published": "2023-02-02T11:15:43+00:00",
      "update": "2023-02-02T11:16:41+00:00",
      "content": "まさか，2月早々に出るとか！\nGo 1.20 is released Go 1.20 is released! - The Go Programming Language Go 1.20 Release Notes - The Go Programming Language その他のリンクについては後日に補完する。 とりあえずマルチエラーに関してはちゃんと調査しないと。\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.20.linux-amd64.tar.gz）を取ってきてインストールすることを強く推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.20.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.20.linux-amd64.tar.gz $ sudo mv go go1.20 $ sudo ln -s go1.20 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.20 linux/amd64 Windows は Scoop 経由で OK\nアップデートは計画的に。\nブックマーク Go 1.20 リリースパーティ - connpass 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元のデジタル版を購入。 Go で躓きやすい点を解説していくのが最初の動機らしい。「◯◯するには」を調べる際にこの本を調べるといいかも。\nreviewed by Spiegel on 2022-10-26 (powered by PA-APIv5)\nGo言語による並行処理 Katherine Cox-Buday (著), 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN), 4873118468 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Eブック版もある。感想はこちら。 Go 言語で並行処理を書くならこの本は必読書になるだろう。\nreviewed by Spiegel on 2020-01-13 (powered by PA-APIv5)\nGoならわかるシステムプログラミング 第2版 渋川よしき (著), ごっちん (イラスト) ラムダノート 2022-03-23 単行本（ソフトカバー） 4908686122 (ASIN), 9784908686122 (EAN), 4908686122 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 第1版はとてもためになる内容だったので第2版も PDF 版で確保しておく。\nreviewed by Spiegel on 2022-10-08 (powered by PA-APIv5)\nデベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n"
    },
    {
      "title": "Mastodon と GitHub との連携",
      "section": "remark",
      "description": "“Social accounts” の項目に URL をセットすればいいのか",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/02/mastodon-and-github/",
      "published": "2023-02-02T00:52:56+00:00",
      "update": "2023-02-02T01:09:42+00:00",
      "content": "以前にも紹介したが， Mastodon と他サイトを連携させるには， Mastodon 側のプロフィール編集の「プロフィール補足情報」で\nプロフィールを編集 - Fedibird こんな風に URL を列挙し1，対応するサイトで\n\u0026lt;a rel=\u0026#34;me\u0026#34; href=\u0026#34;https://hostname/@username\u0026#34;\u0026gt;Mastodon\u0026lt;/a\u0026gt; とか\n\u0026lt;link rel=\u0026#34;me\u0026#34; href=\u0026#34;https://hostname/@username\u0026#34;\u0026gt; とかいった感じのリンクを記述すればいい。 のだが， GitHub のような SaaS ではサービス側が対応してくれないと難しかったりする。\nGitHub の場合 github.com/username/username リポジトリを作ってその中の README.md ファイルに任意のリンクを載せられるのだが\nGitHub プロファイルを（ちょっとだけ）カッコよくしてみる 外部サイトへのリンクには強制的に rel=\u0026quot;nofollow\u0026quot; が上書き設定されてしまうみたいなのね。 まぁ，気持ちは分かるので「しょうがないか」と諦めていたのだが， Mastodon の TL で\nという投稿を見かけたので真似してみることにした。\n具体的には GitHub の自ユーザページの “Edit profile” ボタンを押して編集モードにし， “Social accounts” の項目で\nEdit profile - GitHub という感じに Mastodon のプロフィール・ページの URL をセットすればよい。 mstdn.jp はアイコンが に変わるのに fedibird.com は変わらないんだな。 \u0026hellip;まぁいいか。\nこの設定により GitHub の自ユーザページに\n\u0026lt;a rel=\u0026#34;nofollow me\u0026#34; class=\u0026#34;Link--primary\u0026#34; href=\u0026#34;https://fedibird.com/@spiegel\u0026#34;\u0026gt;https://fedibird.com/@spiegel\u0026lt;/a\u0026gt; あるいは\n\u0026lt;a rel=\u0026#34;nofollow me\u0026#34; class=\u0026#34;Link--primary\u0026#34; href=\u0026#34;https://mstdn.jp/@spiegel\u0026#34;\u0026gt;@spiegel@mstdn.jp\u0026lt;/a\u0026gt; といった感じのリンクが張られる。 一方で Mastodon の自プロフィールページには\nプロフィール - Fedibird という感じに GitHub の URL にチェックマークが付く。\nめでたし！\nMastodon の標準では補足情報の URL は4つまで登録できるが Fedibird は8つまで拡張されている。ところで Fedibird は 2023-02 時点でユーザが26K人を超えたらしい。そんでしばらくは新規受付を止めるらしい（招待からのサインアップは継続とのこと）。これから Mastodon は目的別にアカウント@サーバを分散させるのが賢いかもしれない。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "2024年の暦",
      "section": "remark",
      "description": "2024年は振替休日がいっぱいあるねぇ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/02/ephemeris-in-2024/",
      "published": "2023-02-01T02:06:23+00:00",
      "update": "2023-02-01T05:57:54+00:00",
      "content": "今年も国立天文台より翌年（2024年）の暦要項が発表された1。\n令和6（2024）年暦要項の発表 | 国立天文台(NAOJ) 以降，いくつか抜粋してみる。\n祝日・休日2 日本の暦情報は国立天文台の暦計算室で見ることができる。 この中の「今月のこよみ powered by Google Calendar」で Google Calendar と連携させることができるのだが，この機能を利用した github.com/goark/koyomi パッケージを公開している。 こんな感じに使える。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/koyomi\u0026#34; ) var weekShortNames = [7]string{\u0026#34;日\u0026#34;, \u0026#34;月\u0026#34;, \u0026#34;火\u0026#34;, \u0026#34;水\u0026#34;, \u0026#34;木\u0026#34;, \u0026#34;金\u0026#34;, \u0026#34;土\u0026#34;} func WeekShortNameJp(dt koyomi.DateJp) string { return weekShortNames[dt.Weekday()%7] } func main() { start, _ := koyomi.DateFrom(\u0026#34;2024-01-01\u0026#34;) end, _ := koyomi.DateFrom(\u0026#34;2024-12-31\u0026#34;) k, err := koyomi.NewSource( koyomi.WithCalendarID(koyomi.Holiday), koyomi.WithStartDate(start), koyomi.WithEndDate(end), ).Get() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;| 日付 | 曜日 | 内容 |\u0026#34;) fmt.Println(\u0026#34;| ---- |:----:| ---- |\u0026#34;) for _, e := range k.Events() { fmt.Printf(\u0026#34;| %v | %v | %v |\\n\u0026#34;, e.Date, WeekShortNameJp(e.Date), e.Title) } } これを実行すると以下の出力が得られる。\n$ go run main.go | 日付 | 曜日 | 内容 | | ---- |:----:| ---- | | 2024-01-01 | 月 | 元日 | | 2024-01-08 | 月 | 成人の日 | | 2024-02-11 | 日 | 建国記念の日 | | 2024-02-12 | 月 | 休日 | | 2024-02-23 | 金 | 天皇誕生日 | | 2024-03-20 | 水 | 春分の日 | | 2024-04-29 | 月 | 昭和の日 | | 2024-05-03 | 金 | 憲法記念日 | | 2024-05-04 | 土 | みどりの日 | | 2024-05-05 | 日 | こどもの日 | | 2024-05-06 | 月 | 休日 | | 2024-07-15 | 月 | 海の日 | | 2024-08-11 | 日 | 山の日 | | 2024-08-12 | 月 | 休日 | | 2024-09-16 | 月 | 敬老の日 | | 2024-09-22 | 日 | 秋分の日 | | 2024-09-23 | 月 | 休日 | | 2024-10-14 | 月 | スポーツの日 | | 2024-11-03 | 日 | 文化の日 | | 2024-11-04 | 月 | 休日 | | 2024-11-23 | 土 | 勤労感謝の日 | ふむむー。 2024年は振替休日がいっぱいあるねぇ。 連休バンザイ（笑）\n2024年の暦象 2024年は日食2回と月食1回がある。\n日付 曜日 内容 2024-04-09 火 皆既日食 2024-09-18 水 部分月食 2024-10-03 木 金環日食 しかし，いずれも日本では見れないらしい。\n他にはこんな感じ。\n日付 曜日 内容 2024-02-04 日 立春 2024-03-20 水 春分 2024-05-05 日 立夏 2024-06-21 金 夏至 2024-08-07 水 立秋 2024-09-22 日 秋分 2024-11-07 木 立冬 2024-12-21 土 冬至 ちなみに2024年の「伝統的七夕」は8月10日である。\nそうそう。 2024年は閏年っス。\nブックマーク カレンダーに祝日を入れたいなら国立天文台へ行けばいいじゃない 国立天文台から最新の暦情報を取ってくる【広告記事】 参考図書 天文年鑑 2023年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2022-11-24 (Release 2022-11-24) 単行本 4416522940 (ASIN), 9784416522943 (EAN), 4416522940 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 天文ファン必携。2023年版。これが届くと年末って感じ。\nreviewed by Spiegel on 2022-11-25 (powered by PA-APIv5)\n国立天文台では毎年2月最初の官報で翌年の暦を発表する。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n「国民の祝日」は休日となる。また「「国民の祝日」が日曜日に当たるときは、その日後においてその日に最も近い「国民の祝日」でない日を休日とする」（「国民の祝日に関する法律」より）。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "go-cvss パッケージ v1.5.0 をリリースした",
      "section": "release",
      "description": " 一連の変更でようやく CVSSv2 処理系は v3/metric パッケージと互換になった。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2023/01/go-cvss-package-v1_5_0-is-released/",
      "published": "2023-01-31T07:36:54+00:00",
      "update": "2023-01-31T11:13:37+00:00",
      "content": "バグ報告が止まらない。 ごめんなさい ごめんなさい ごめんなさい\u0026hellip;\nということで github.com/goark/go-cvss パッケージの v1.5.0 をリリースした。\nRelease v1.5.0 · goark/go-cvss · GitHub このバージョンで CVSSv2 のデコードを行うサブパッケージを v2/base から v2/metric に移行した。 こんな感じ。\n//go:build run // +build run package main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/go-cvss/v2/metric\u0026#34; ) func main() { bm, err := metric.NewBase().Decode(\u0026#34;AV:N/AC:L/Au:N/C:N/I:N/A:C\u0026#34;) //CVE-2002-0392 if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Printf(\u0026#34;Severity: %v (%v)\\n\u0026#34;, bm.Severity(), bm.Score()) // Output: // Severity: Severity: High (7.8) } これに伴い v2/base パッケージ以下の型定義およびメソッドには Deprecated マークを付けている。 一連の変更でようやく CVSSv2 処理系は v3/metric パッケージと互換になった。 まぁ今どき CVSSv2 を使うことはないと思うけどね。\nそもそも github.com/goark/go-cvss パッケージ自体がかなり試行錯誤していて，随分とカオスな状態になっていたので，この機会に整理できてよかった。 もうバグはないよなぁ。 ないと思いたい。\n2022-01-31 追記 その後のバグ報告で，上述の Deprecated マークを付けた v2/base パッケージはデータ構造上 CVSSv2 の仕様を満たせないことが分かったので v1.6.0 で drop した。\nRelease v1.6.0 · goark/go-cvss · GitHub とほほ orz\nブックマーク CVSS v2 Complete Documentation 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元のデジタル版を購入。 Go で躓きやすい点を解説していくのが最初の動機らしい。「◯◯するには」を調べる際にこの本を調べるといいかも。\nreviewed by Spiegel on 2022-10-26 (powered by PA-APIv5)\n"
    },
    {
      "title": "松江城 冬景色",
      "section": "remark",
      "description": "こりゃあ，天守閣まで登るのは無理だな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2023/01/castle-in-winter/",
      "published": "2023-01-28T10:17:35+00:00",
      "update": "2023-01-28T10:19:08+00:00",
      "content": "先日の寒波で積もった雪が融けず足元が悪い状態が続いてるのだけど，引きこもりも飽きてきたし，図書館で借りたい本もあったので，本当に久しぶりに街に出てみた。\nまずはバスで松江駅まで出てみる。\n雪が残る松江駅 | Flickr おぅふ orz\nエラい雪が残っとるな。 一応松江市の中心街付近なのだが\u0026hellip;\n気を取り直して，バスを乗り換え島根県立図書館へ Go。 図書館近くにある松江城のお掘りを覗いてみると\n松江城 お堀の水も凍る | Flickr 凍っとるがな！ 二の丸に登る千鳥橋もこんな感じ。\n雪の千鳥橋 | Flickr こりゃあ，天守閣まで登るのは無理だな。 というわけで，雪の松江城見物は諦めて図書館で本を借りて，とっとと帰った。 ちなみに天守閣の遠景はこんな感じ。\n雪の松江城 | Flickr わざとこの位置に街灯を配置してみました（笑）\nそうそう。 今回借りた本はこれ。\nとりあえず図書館で借りて斜め読み | Flickr 3月からこの本のオンライン読書会をするらしいんだけど，月2回の読書会は参加しきれるか微妙なので，まずは試し読みして決めようと思ったのだ。 面白ければ読書会に参加するか否かに関わらず買う予定。 PDF 版があれば即買いでもよかったんだけどねぇ。 いや，日経BP社に決済情報を預けたくないし，もし PDF 版があっても直販では買わんかな（笑）\n参考図書 ピープルウエア 第3版 トム・デマルコ (著), ティモシー・リスター (著), 松原友夫 (翻訳), 山浦恒央 (翻訳) 日経BP 2013-12-18 単行本（ソフトカバー） 4822285243 (ASIN), 9784822285241 (EAN), 4822285243 (ISBN) とりあえず図書館で借りてためし読みする。面白かったら買う。\nreviewed by Spiegel on 2023-01-28 (powered by PA-APIv5)\nAlteration【アーティスト盤】 ZAQ (メインアーティスト) Lantis 2013-01-23 (Release 2019-10-24) MP3 ダウンロード B07YZ9R7T2 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; アニメ「ささみさん＠がんばらない」のOP曲。 MP3 版で買い直した。 ZAQ さんの唄はよい。\nreviewed by Spiegel on 2023-01-28 (powered by PA-APIv5)\n"
    },
    {
      "title": "go-cvss パッケージ v1.4.2 をリリースした",
      "section": "release",
      "description": "さらに今回は fuzzing テストまでしてもらって，ホンマに「マジすんません」って感じである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2023/01/go-cvss-package-v1_4_2-is-released/",
      "published": "2023-01-28T03:47:48+00:00",
      "update": "2023-01-31T07:38:00+00:00",
      "content": "CVSS ベクタ文字列を可視化したいという軽い動機で作った，拙作の github.com/goark/go-cvss パッケージだが，微妙に使って頂いてるようで，バグ報告をいくつか頂いたため，修正版をリリースした。\nRelease v1.4.2 · goark/go-cvss · GitHub CVSS のベクタ文字列（CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H1 など）のバリデーションを厳密に行うようにした。 今までベクタ文字列の parse はかなり緩くしていて， metric 名が重複してても（後勝ちで）有効にしてたし，大文字小文字も関係なく有効にしていたが，仕様的にあかんやろ，ということで。 これに伴い，古いコードは drop した（コード管理が煩雑になるので）。\n使い方は今までと変わらず\npackage main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/go-cvss/v3/metric\u0026#34; \u0026#34;github.com/goark/go-cvss/v3/report\u0026#34; \u0026#34;golang.org/x/text/language\u0026#34; ) var template = \u0026#34;- `{{ .Vector }}`\u0026#34; + ` - {{ .SeverityName }}: {{ .SeverityValue }} (Score: {{ .BaseScore }}) | {{ .BaseMetrics }} | {{ .BaseMetricValue }} | |--------|-------| | {{ .AVName }} | {{ .AVValue }} | | {{ .ACName }} | {{ .ACValue }} | | {{ .PRName }} | {{ .PRValue }} | | {{ .UIName }} | {{ .UIValue }} | | {{ .SName }} | {{ .SValue }} | | {{ .CName }} | {{ .CValue }} | | {{ .IName }} | {{ .IValue }} | | {{ .AName }} | {{ .AValue }} | ` func main() { flag.Parse() if flag.NArg() \u0026lt; 1 { fmt.Fprintln(os.Stderr, \u0026#34;Set CVSS vector\u0026#34;) return } bm, err := metric.NewBase().Decode(flag.Arg(0)) if err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\\n\u0026#34;, err) return } r, err := report.NewBase(bm, report.WithOptionsLanguage(language.Japanese)).ExportWithString(template) if err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\\n\u0026#34;, err) return } if _, err := io.Copy(os.Stdout, r); err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\\n\u0026#34;, err) } } などとしておけば\n$ go run main.go \u0026#34;CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\u0026#34; - `CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H` - 深刻度: 緊急 (Score: 9.8) | 基本評価基準 | 評価値 | |--------|-------| | 攻撃元区分 | ネットワーク | | 攻撃条件の複雑さ | 低 | | 必要な特権レベル | 不要 | | ユーザ関与レベル | 不要 | | スコープ | 変更なし | | 機密性への影響 | 高 | | 完全性への影響 | 高 | | 可用性への影響 | 高 | と出力される。\nこの github.com/goark/go-cvss パッケージってコードの半分くらい貰いものだし，さらに今回は fuzzing テストまでしてもらって，ホンマに「マジすんません」って感じである。ありがたや \u0026#x1f647;\nでも CVSS ってあくまでもリスクの「評価基準」のひとつであって，そこから「どうする」ってのはまた別の話なんだよね。 個人なら CVSS の Base metrics 情報を見て都度判断すればいいけど，組織では SSVC (Stakeholder-Specific Vulnerability Categorization) なんかと組み合わせる必要があるかもしれない。\n道具は適材適所で使いましょう，ということで。\n【2022-01-29 追記】 v1.4.4 をリリースした またバグ報告があったので修正版をリリースした。 とほほ\u0026hellip;\nRelease v1.4.4 · goark/go-cvss · GitHub 今回のついでにスコアの計算周りのリファクタリングを行った。 ちょっとスッキリ！\nブックマーク CVSS v3.0 Specification Document\nCVSS v3.1 Specification Document\n共通脆弱性評価システムCVSS v3概説：IPA 独立行政法人 情報処理推進機構\nオープンソース製品とソフトウェア部品表\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元のデジタル版を購入。 Go で躓きやすい点を解説していくのが最初の動機らしい。「◯◯するには」を調べる際にこの本を調べるといいかも。\nreviewed by Spiegel on 2022-10-26 (powered by PA-APIv5)\nCVE-2022-3515 より\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "【Go 1.20 の予習】複数 error を返す Unwrap メソッドについて",
      "section": "golang",
      "description": "Go 1.20 で errors パッケージの仕様が変わるみたいなので予習しておく。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/wrapping-multiple-errors/",
      "published": "2023-01-25T03:57:01+00:00",
      "update": "2023-01-25T22:13:40+00:00",
      "content": "おそらく 2022-02 にリリースされる Go 1.20 で errors パッケージの仕様が変わるみたいなので予習しておく。\nWrapping multiple errors\nGo 1.20 expands support for error wrapping to permit an error to wrap multiple other errors.\nAn error e can wrap more than one error by providing an Unwrap method that returns a []error.\nThe errors.Is and errors.As functions have been updated to inspect multiply wrapped errors.\nThe fmt.Errorf function now supports multiple occurrences of the %w format verb, which will cause it to return an error that wraps all of those error operands.\nThe new function errors.Join returns an error wrapping a list of errors.\nvia Go 1.20 Release Notes - The Go Programming Language 現行の errors.Is() および errors.As() 各関数では 対象となる error インスタンスについて型アサーションを行い Unwrap() error メソッドを含む型か否かで再帰的に処理を行っているが， Go 1.20 からは，この評価に Unwrap() []error メソッドが加わる。\n具体的にはこんな感じらしい。\n// Is reports whether any error in err\u0026#39;s tree matches target. // // The tree consists of err itself, followed by the errors obtained by repeatedly // calling Unwrap. When err wraps multiple errors, Is examines err followed by a // depth-first traversal of its children. // // An error is considered to match a target if it is equal to that target or if // it implements a method Is(error) bool such that Is(target) returns true. // // An error type might provide an Is method so it can be treated as equivalent // to an existing error. For example, if MyError defines // //\tfunc (m MyError) Is(target error) bool { return target == fs.ErrExist } // // then Is(MyError{}, fs.ErrExist) returns true. See syscall.Errno.Is for // an example in the standard library. An Is method should only shallowly // compare err and the target and not call Unwrap on either. func Is(err, target error) bool { if target == nil { return err == target } isComparable := reflectlite.TypeOf(target).Comparable() for { if isComparable \u0026amp;\u0026amp; err == target { return true } if x, ok := err.(interface{ Is(error) bool }); ok \u0026amp;\u0026amp; x.Is(target) { return true } switch x := err.(type) { case interface{ Unwrap() error }: err = x.Unwrap() if err == nil { return false } case interface{ Unwrap() []error }: for _, err := range x.Unwrap() { if Is(err, target) { return true } } return false default: return false } } } // As finds the first error in err\u0026#39;s tree that matches target, and if one is found, sets // target to that error value and returns true. Otherwise, it returns false. // // The tree consists of err itself, followed by the errors obtained by repeatedly // calling Unwrap. When err wraps multiple errors, As examines err followed by a // depth-first traversal of its children. // // An error matches target if the error\u0026#39;s concrete value is assignable to the value // pointed to by target, or if the error has a method As(interface{}) bool such that // As(target) returns true. In the latter case, the As method is responsible for // setting target. // // An error type might provide an As method so it can be treated as if it were a // different error type. // // As panics if target is not a non-nil pointer to either a type that implements // error, or to any interface type. func As(err error, target any) bool { if err == nil { return false } if target == nil { panic(\u0026#34;errors: target cannot be nil\u0026#34;) } val := reflectlite.ValueOf(target) typ := val.Type() if typ.Kind() != reflectlite.Ptr || val.IsNil() { panic(\u0026#34;errors: target must be a non-nil pointer\u0026#34;) } targetType := typ.Elem() if targetType.Kind() != reflectlite.Interface \u0026amp;\u0026amp; !targetType.Implements(errorType) { panic(\u0026#34;errors: *target must be interface or implement error\u0026#34;) } for { if reflectlite.TypeOf(err).AssignableTo(targetType) { val.Elem().Set(reflectlite.ValueOf(err)) return true } if x, ok := err.(interface{ As(any) bool }); ok \u0026amp;\u0026amp; x.As(target) { return true } switch x := err.(type) { case interface{ Unwrap() error }: err = x.Unwrap() if err == nil { return false } case interface{ Unwrap() []error }: for _, err := range x.Unwrap() { if As(err, target) { return true } } return false default: return false } } } ちょっと長くて申し訳ないが，各関数の型 switch 文のなかで Unwrap() []error メソッドを含む型を評価しているのがおわかりだろうか。\n標準パッケージでは新設の errors.Join() 関数や fmt.Errorf() 関数の拡張でマルチエラーに対応するようだが，自前で error 型を作る場合でも Unwrap() []error メソッドを追加することで errors.Is() 関数や errors.As() 関数による評価が可能になるわけだ。\nブックマーク Go 1.20 Wrapping multiple errors | フューチャー技術ブログ\nGo のエラーハンドリング\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n初めてのGo言語 ―他言語プログラマーのためのイディオマティックGo実践ガイド Jon Bodner (著), 武舎 広幸 (翻訳) オライリージャパン 2022-09-26 単行本（ソフトカバー） 4814400047 (ASIN), 9784814400041 (EAN), 4814400047 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2021年に出た “Learning Go” の邦訳版。私は版元で PDF 版を購入。 Go 特有の語法（idiom）を切り口として Go の機能やパッケージを解説している。 Go 1.19 対応。\nreviewed by Spiegel on 2022-10-11 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元のデジタル版を購入。 Go で躓きやすい点を解説していくのが最初の動機らしい。「◯◯するには」を調べる際にこの本を調べるといいかも。\nreviewed by Spiegel on 2022-10-26 (powered by PA-APIv5)\n"
    },
    {
      "title": "OpenJDK のセキュリティ・アップデート（2023-01）",
      "section": "release",
      "description": "影響を受けるバージョンは 19.0.1, 17.0.5, 15.0.9, 13.0.13, 11.0.17, 8u352, 7u361 およびそれ以前。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2023/01/openjdks-has-been-updated/",
      "published": "2023-01-22T02:48:49+00:00",
      "update": "2023-01-22T02:49:55+00:00",
      "content": "定例の Java マイナー・バージョンアップが行われた。\nOpenJDK Vulnerability Advisory: 2023/01/17 CVE ID ベースで3個の脆弱性修正がある。 影響を受けるバージョンは 19.0.1, 17.0.5, 15.0.9, 13.0.13, 11.0.17, 8u352, 7u361 およびそれ以前。\nCVE ID Component CVSSv3.1\nScore Affects ... 7 8 11 13 15 17 19 CVE-2023-21835 security-libs/\njavax.net.ssl 5.3 CVE-2023-21830 other-libs 5.3 CVE-2023-21843 client-libs/\njavax.sound 3.7 via OpenJDK Vulnerability Advisory: 2023/01/17 OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。 以下は完全手動でのインストール（笑）\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://download.java.net/java/GA/jdk19.0.2/fdb695a9d9064ad6b064dc6df578380c/7/GPL/openjdk-19.0.2_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-19.0.2_linux-x64_bin.tar.gz $ sudo ln -s jdk-19.0.2 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;19.0.2\u0026#34; 2023-01-17 OpenJDK Runtime Environment (build 19.0.2+7-44) OpenJDK 64-Bit Server VM (build 19.0.2+7-44, mixed mode, sharing) LTS 版 Java バイナリが欲しいなら Adoptium で取得できる。\n私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern よーし，うむうむ，よーし。\nブックマーク 2023年1月Oracle製品のクリティカルパッチアップデートに関する注意喚起 参考図書 Spring Data JPAプログラミング入門 溝口賢司 (著) 秀和システム 2017-08-03 (Release 2018-04-23) Kindle版 B07CKHR8C1 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; JPA のお勉強用に購入。紙のほうはプレミアが付いてるっぽいが Kindle で買えるよ。固定レイアウトだからブラウザの Kindle Cloud Reader で読めるし。真面目に基本を押さえて書いていて分かりやすい。\nreviewed by Spiegel on 2021-08-26 (powered by PA-APIv5)\nEffective Java 第3版 Joshua Bloch (著), 柴田 芳樹 (翻訳) 丸善出版 2018-10-30 単行本（ソフトカバー） 4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。\nreviewed by Spiegel on 2021-03-17 (powered by PA-APIv5)\nSpring Boot 2 入門: 基礎から実演まで 原田 けいと (著), 竹田 甘地 (著), Robert Segawa (著) 2020-05-22 (Release 2020-05-22) Kindle版 B0893LQ5KY (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Spring Boot を勉強することになって急遽買った本。めっさ分かりやすかった。 PDF 版が欲しいくらい（笑） Spring Boot 2.7 対応にアップデートされていた。素敵！\nreviewed by Spiegel on 2022-08-14 (powered by PA-APIv5)\n2023-01-09 に PlantUML V1.2023.0 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    }
  ]
}
