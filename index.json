{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "『ユニコーン企業のひみつ』読書会",
      "section": "remark",
      "description": "アレな GAFA 礼賛本を読むくらいならこっちの方をお勧めする。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/competing-with-unicorns/",
      "published": "2022-05-21T11:28:24+00:00",
      "update": "2022-05-22T00:33:26+00:00",
      "content": "前にどっかで書いたような気がするが，遅まきながらプロジェクト・マネジメントの勉強を始めている。 といっても別にプロマネになりたいわけではなく，単に職場でマネジメントの観点で意見を求められることがあったので，そういう観点で見る目も養おうということで。 つっても PMBOK の基礎的な内容に留まっているが。 身も蓋もない言い方をするなら興味本位（笑）\nで，今回『ユニコーン企業のひみつ』という本を題材にした読書会を開催するというので，これまた興味本位で参加してみた。\n 第1回『ユニコーン企業のひみつ』オンライン読書会 - connpass  この本は知らなくても原著者の Jonathan Rasmusson1 という名前を聞いたら「あぁ『アジャイルサムライ』の人か」と思う人もいるかも知れない。 いや，私は読んでないけど。 ちなみに原書 “Competing with Unicorns” は2020年，今回の翻訳本『ユニコーン企業のひみつ』は2021年に出版されている。\n「ユニコーン企業」とは 『ユニコーン企業のひみつ』の訳注によると，「ユニコーン企業」とは\n 2013年にベンチャーキャリタリストの Aileen Lee が「ユニコーン企業」という概念を提唱したときの定義は、創業10年以内、評価額10億ドル以上、非上場、米国拠点のテック企業（当時は39社）。ユニコーンと呼ぶのは、その統計上の希少性を神話的な幻獣になぞらえたもの 『ユニコーン企業のひみつ』まえがきより  だそうな。 ただ，この本ではもう少し緩い定義で\n 本書で「ユニコーン企業」と言うとき、それは評価額が10億ドル規模の企業でありながら、スタートアップみたいに運営されている企業のことだと思ってほしい 『ユニコーン企業のひみつ』まえがきより  としている。 この定義なら「Google、Amazon、Facebook、Spotify なんかがこれに該当する」（まえがき）と言えるだろう。\nなお「スタートアップ」の定義も\n 本書においてスタートアップとは、50名未満の小さな企業を想定している 『ユニコーン企業のひみつ』まえがきより  とだいぶ緩い。\n「スタートアップはプロダクトがすべて」 スタートアップを特徴づける説明がこれ。\n スタートアップはプロダクトがすべてだ。デモで見せるのはプロダクトだ。新しい顧客をひきつけるのもプロダクトだ。資金調達するのもプロダクトだし、学習するのもプロダクトを通じてだ 『ユニコーン企業のひみつ』1.1章より  故に「スタートアップはイテレーションを重ねる」（1.2章）ことになる。 これが既存のエンタープライズ企業との最大の違いだろう。 『ユニコーン企業のひみつ』ではエンタープライズを「期待に応じる機械」（1.4章）と呼びスタートアップを「学習する機械」（1.2章）と呼んでいる。\n「期待に応じる」ためには「プロジェクト駆動」が望ましい。 期待に応じる目標を掲げ，目標を達成するための KGI/KPI を評価する。 コストを計上し期日を決め作業分割を行いリソース（予算や人員を含む）を確保してスケジュールやリスクの変動を管理（監視）する。 プロジェクトの掲げる目標が計画通り達成できたら成功だ。\nでもプロダクトを中心に据えるなら「プロジェクト駆動」はうまく行かない。 PDCA や OODA といったサイクルを回すにしても活動がプロジェクト単位で途切れてしまうので，とてもじゃないが「イテレーションを重ねる」ことはできない。 そこでスタートアップはチームに権限と自律性を与える「ミッション」で仕事を進める。\n「失敗はゲームの一部」 「プロジェクトとミッションってなにがちゃうねん」と思うだろう（実際に読書会でもそういう疑問は出た）。 『ユニコーン企業のひみつ』ではプロジェクトとミッションの違いを以下のようにまとめている。\n    プロジェクト ミッション     予算がある チームの人数が予算   終わりがある 期間に定めがない   短期間 長期間   プロジェクトマネージャーがいる プロジェクトマネージャーがいない   開発だけして引き継ぐ 開発もメンテナンスもする   完成したら解散する チームは一緒のまま   計画にフォーカス 顧客にフォーカス   期待に応じることが価値 インパクトが価値   トップダウン ボトムアップ     『ユニコーン企業のひみつ』2.5章より  もしプロジェクトからミッションへ切り替えたいならプロダクトに対する「成功」の定義も書き換える必要がある。\n プロダクト開発における成功とは「発見と学習」だ。最初のプロダクトをとにかく早く世に出すのもそのためだ。そしてこれを素早く、何度も何度も繰り返す。失策をおかすこともあるだろう。だが、リリースを重ねるごとにプロダクトは良くなっていく 『ユニコーン企業のひみつ』1.5章より   プロダクト開発では失敗はゲームの一部だ。 [\u0026hellip;] プロダクト開発は一発勝負じゃない。初回のリリースは始まりに過ぎない 『ユニコーン企業のひみつ』1.5章より  プロジェクトマネージャーなどいない ところで「プロジェクトマネージャーがいない」のにどうやって管理するねん，って思わなかった？ 私は思った。 でもプロジェクトじゃないんだからプロジェクトマネージャーがいないのは当たり前だよな。 その代わり重要なのが「プロダクトマネージャー」と「データサイエンティスト」だ。\nデータサイエンティストは8章で詳しく説明されるらしいので，とりあえずプロダクトマネージャーについて紹介すると\n プロダクトマネージャーは「このプロダクトは何をすべきか」について、信頼のおける情報源になることでプロダクトのデリバリーを導く。スクワッドと協力して戦略を定義し、ロードマップを策定し、機能の定義を考える。マーケティング、売上予測、損益計算の責任にも何らかの関わりを持つ 『ユニコーン企業のひみつ』3.3章より  だそうな。 「スクワッドと協力して」というのがポイントだろう。 つまりプロダクトマネージャーはスクワッドの管理者ではないということだ。 故にプロダクトマネージャーはスクワッドに対して「指示」は行わない（アドバイスや提案はあり）。\nちなみに，この本で「スクワッド（Squad）」とは\n 少人数で、職能横断（Cross-Function）の、自己組織化されたチームだ。 [\u0026hellip;] 自律した小さなチームはテック企業のあらゆる活動の中心だ。新規プロダクトの開発、新たな市場への参入、株式公開の準備。どの場合であっても、テック企業では自律した小さなチームがその中心にいる 『ユニコーン企業のひみつ』3.1章より  と定義・解説されている2。 この定義を見て「公安9課」を連想したのは私だけじゃない筈（と思いたいw）。\nスクワッドが所属する企業に対して自律的に振る舞うためには，お互いに対等な信頼関係が必要だ。 この辺が一番難しいんじゃないかな，と個人的には思う。 そのためのヒントは3.7章に書かれている。\nGAFA 礼賛本を読むくらいなら というわけで，今回は3章まで読了。 ページ数が少ないので，多分あと2回ほどで終わると思う。 もしこの拙文を見て興味が湧いたなら手にとって読んでみてもいいだろう。\n買うなら版元で扱っている電子版がお勧め。 「プログラミング言語Go読書会」では紙の本にびっしり書き込みをしているが PDF なら書き込みもデジタルでできる3（笑）\nこの本を読んで「お父さん，明日からミッションを掲げてプロダクト駆動で頑張るぞ！」とは行かないかも知れないが，アレな GAFA 礼賛本を読むくらいならこっちの方をお勧めする。\n参考図書   ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 Jonathan Rasmusson (著), 島田 浩二 (翻訳), 角谷 信太郎 (翻訳) オライリージャパン 2021-04-26 単行本（ソフトカバー） 4873119464 (ASIN), 9784873119465 (EAN), 4873119464 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  版元より電子版も出ている。 Google や Spotify のような「ユニコーン企業」はどのようにして「ミッション」を遂行しているのか。\nreviewed by Spiegel on 2022-05-21 (powered by PA-APIv5)\n   攻殻機動隊 STAND ALONE COMPLEX 田中敦子 (出演), 阪脩 (出演), 大塚明夫 (出演), 山寺宏一 (出演), 仲野裕 (出演), 大川透 (出演), 山口太郎 (出演), 小野塚貴志 (出演), 玉川紗己子 (出演), 神山健治 (監督)  (Release 2016-08-05) Prime Video B01JMEDX8A (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「GHOST IN THE SHELL」とどっちが好きかと言われれば悩むところだが，アニメ版「攻殻機動隊」シリーズでは好きな作品。\nreviewed by Spiegel on 2022-05-21 (powered by PA-APIv5)\n   Amazon に書かれている著者の経歴によると「世界最大級の革新的なテック企業が世界中にソフトウェアを届けることを支援してきた。エンジニアとしては、Spotifyのインテグレーションを支援した。対象プラットフォームはSony PlayStation、Facebook Messenger、Google Chromecast、iMessage。同様にBMW、Tesla、Fordの自動車にも統合した」とある。『ユニコーン企業のひみつ』では Spotify での経験が色濃く反映されている。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n スクワッドはかなり重要な概念なので3章を丸々使って解説されている。 Spotify においてスクワッドがどう機能しているかについてこれとかこれで紹介されている（いずれも15分弱の動画）。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Ubuntu に標準で付いている Evince は PDF の任意の場所にメモを追加する程度はできる。このくらいの機能で十分だろう。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "『数学ガールの秘密ノート/丸い三角関数』を読む【再掲載】",
      "section": "remark",
      "description": "8年前の再掲載。いや Twitter で「三角関数」が流行ってると聞いたので乗っておかないと（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/mathgirl-note-circular-functions/",
      "published": "2022-05-19T11:40:50+00:00",
      "update": "2022-05-19T12:02:25+00:00",
      "content": "（この記事は8年ほど前に書いた記事を再構成して再掲載したものです。8年前の内容という点を考慮していただけるとありがたいです。いや Twitter で「三角関数」が流行ってると聞いたので乗っておかないとw）\n やぁ来た来た。 来ましたよ。 そもそも「丸い三角関数」なんてタイトルが面白くないわけがない。 おぢさん，最初からクライマックスですョ。 どのくらい面白かったかというと，読んでる途中でポリアの『いかにして問題をとくか』を Amazon に発注してしまうくらい面白かった（そういえば自前では持ってなかった）。\n今回はユーリちゃんのターンだね。 テトラちゃんは今回は自信喪失気味な感じだったし，ミルカさんは明らかに出番が少ない！ まぁミルカさんをメインにしたら回転行列の話から一気に群論まで行きそうな感じだけど（笑）\nなんでユーリちゃんかというと，私が三角関数を覚えたのがやっぱり中学生の頃だったから。 今回のユーリちゃんを見てると自分の子供時代を思い出して，なんか懐かしくなってしまうんだよなぁ。 ちなみに学校の授業でいつ三角関数を習ったのかは覚えてない。 少なくとも学校の授業よりは早く習得してたのは確か。 今の学校教育って，いつ三角関数を習うの？ 中学？ 高校？ まぁピタゴラスの定理を習ったら三角関数なんてすぐだよね。 ってことはやっぱり中学かな？\nなんで（授業よりも早く）三角関数を覚えたかったかというと，三角関数は物理，とりわけ天文学には必須の道具だったから（あとは微分方程式ね）。\n三角関数は空間をイメージしながら考えると楽に理解できる。 理解できると三角関数はとても楽しい。 私の場合は逆で，最初に天球上の星々のイメージがあって，そこから三角関数を学んだのでとても楽に覚えられた。\nたとえば第2章にリサージュ図形の話が出ている（ユーリちゃん回）。 作中ではオシロスコープの例が出てたけど，私達天文ファンはもっと身近なものを知っている。 それは天球上を移動する太陽や月や惑星たちだ。\n  via Analemma of the Sun | Flickr (György Soponyai, CC-BY-NC)  これは一定の期間ごとに1年間かけて，同じ時刻，同じ場所，同じ方向にカメラを設置し太陽を重ね撮りで撮影したもの。 これをアナレンマ（Analemma）という。 リサージュ図形と似てるよね。 でもちょっと形が歪。 それは地球の自転軸が公転面に対して傾いていることと地球の公転軌道が円ではないことを示しているからだ1。\n  via Explanation about a celestial sphere in Japanese (cc-by-sa-2.5)  つまりアナレンマは太陽の周りを回る地球の写像と言える。 三角関数を学べばこういう図形も比較的容易に理解できるようになる。 ねっ，面白いでしょ。\nそういえば第4章（これもユーリちゃん回）で「円周率を数える」実験をしているわけだけど，その中の問題4-1は，小学生の時にやったことがあるんだよね。 いわゆる「夏休みの自由研究」のネタに困って苦し紛れにやったやつだ。 当時はまだ筆算の割り算を覚えたてで，一生懸命計算したっけ（私は今だに「計算」が苦手である）。 今思い出せば「3.141」くらいまでは合ってたような気がするけどその先はグダグダだった。 まぁまだ誤差論も知らない小僧のやることだからね。 それでもそれを「自由研究」として受理してくれた当時の担任には感謝である。\n今回，特に感じたのは「僕」やミルカさんたちの背後にある「眼差し」だ。 それは他の「数学ガール」シリーズでも時々感じるものだけど，今回特にそれを感じたのは，子供時代の私がユーリちゃんに感情移入し，それを今の私が「見てる」からだと分かった。 私には子どもはいないけど，もし子どもがいたらきっと学校の授業参観でそういう目で子どもを見るんだろうなぁ，と思ったり。\nブックマーク  『数学ガールの秘密ノート／ベクトルの真実』で遊ぶ 『数学ガールの秘密ノート／行列が描くもの』を読んで子供の頃を思い出す  参考図書   数学ガールの秘密ノート／丸い三角関数 結城 浩 (著) SBクリエイティブ 2014-04-23 (Release 2015-04-18) Kindle版 B00W6NCLJM (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  丸と三角の楽しい関係。頑張れば小学生高学年でも大丈夫。\nreviewed by Spiegel on 2014-11-30 (powered by PA-APIv5)\n   数学ガールの秘密ノート／ベクトルの真実 結城 浩 (著) SBクリエイティブ 2015-11-17 (Release 2015-12-03) Kindle版 B018VE46YW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  図形（具象）と数式（抽象）の往復は楽しい。\nreviewed by Spiegel on 2016-03-04 (powered by PA-APIv5)\n   数学ガールの秘密ノート／行列が描くもの 結城 浩 (著) SBクリエイティブ 2018-10-16 (Release 2018-10-17) Kindle版 B07JB2MSQT (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  三角関数，ベクトルときたら次は行列だよね。リサちゃん大活躍で嬉しい。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\n   いかにして問題をとくか G．ポリア (著), 柿内賢信 (翻訳) 丸善出版 2022-03-25 (Release 2022-02-24) Kindle版 B09T94D62K (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  なんと！ Kindle 版が出た。ただしプリント・レプリカ形式なので見れる環境が限られる。残念ながら Kindle Cloud Reader では見れなかった。紙の本を持ってる人が念の為に買っておくのがいいかな（笑）\nreviewed by Spiegel on 2022-05-19 (powered by PA-APIv5)\n   天体の位置計算 長沢 工 (著) 地人書館 1985-09-01 単行本 4805202254 (ASIN), 9784805202258 (EAN), 4805202254 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。\nreviewed by Spiegel on 2015-01-11 (powered by PA-APIv5)\n   天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいる。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\n   もう少しヒントを言うと，黄道面に対して最大角度となる夏至・冬至と公転起動の遠日点・近日点は異なる，ということも考慮に入れるといいだろう。アナレンマは元々占星術の用語で日時計のメモリを指すものだったらしい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ついに apt-key コマンドに「非推奨」のワーニングが",
      "section": "remark",
      "description": "しょうがない。 この機会に対応するか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/apt-key-is-deprecated/",
      "published": "2022-05-06T09:10:02+00:00",
      "update": "2022-05-18T19:39:07+00:00",
      "content": "前回の続き。 Docker を Ubuntu にインストールするには以下の拙文が参考になる。\n Ubuntu に Docker を入れる  簡単に説明すると\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - と電子署名検証用の OpenPGP 鍵をインポートした上で\n$ sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; とすれば (Ubuntu 22.04 LTS であれば) jammy 用のリポジトリが追加される。 実際には /etc/apt/sources.list.d/ ディレクトリにある archive_uri-https_download_docker_com_linux_ubuntu-jammy.list ファイルに\ndeb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable という内容が書かれている（筈）。\nところが今回 Ubuntu 22.04 LTS では，この状態で apt update すると\n$ sudo apt update ... ヒット:5 https://download.docker.com/linux/ubuntu jammy InRelease ... パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています... 完了 状態情報を読み取っています... 完了 パッケージはすべて最新です。 W: https://download.docker.com/linux/ubuntu/dists/jammy/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details. とワーニングが出る。 あぁ，ついに Ubuntu でもこのワーニングが出るようになったか。 今まで先延ばしにしてたからなぁ。 しょうがない。 この機会に対応するか。\nちなみに apt-key(8) のマニュアルには\nExcept for using apt-key del in maintainer scripts, the use of apt-key is deprecated. This section shows how to replace existing use of apt-key.\nIf your existing use of apt-key add looks like this:\nwget -qO- https://myrepo.example/myrepo.asc | sudo apt-key add - Then you can directly replace this with (though note the recommendation below):\nwget -qO- https://myrepo.example/myrepo.asc | sudo tee /etc/apt/trusted.gpg.d/myrepo.asc Make sure to use the \u0026ldquo;asc\u0026rdquo; extension for ASCII armored keys and the \u0026ldquo;gpg\u0026rdquo; extension for the binary OpenPGP format (also known as \u0026ldquo;GPG key public ring\u0026rdquo;). The binary OpenPGP format works for all apt versions, while the ASCII armored format works for apt version \u0026gt;= 1.4.\nRecommended: Instead of placing keys into the /etc/apt/trusted.gpg.d directory, you can place them anywhere on your filesystem by using the Signed-By option in your sources.list and pointing to the filename of the key. See sources.list(5) for details. Since APT 2.4, /etc/apt/keyrings is provided as the recommended location for keys not managed by packages. When using a deb822-style sources.list, and with apt version \u0026gt;= 2.4, the Signed-By option can also be used to include the full ASCII armored keyring directly in the sources.list without an additional file.\n via apt-key(8)  などと書かれている。 要するに /etc/apt/keyrings ディレクトリに公開鍵を ASCII Armor 形式のまま放り込んでしまえばいいのか？\nんー。 こんな感じかな。\n$ cd /etc/apt/keyrings $ sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o docker-key.asc ファイル名は適当。 念のため出力した docker-key.asc ファイルの中身を拙作 gpgpdump で覗いてみよう。\n$ gpgpdump -u -f docker-key.asc Public-Key Packet (tag 6) (525 bytes) Version: 4 (current) Public key creation time: 2017-02-22T18:36:26Z Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (4096 bits) RSA public encryption exponent e (17 bits) User ID Packet (tag 13) (43 bytes) User ID: Docker Release (CE deb) \u0026lt;docker@docker.com\u0026gt; Signature Packet (tag 2) (567 bytes) Version: 4 (current) Signiture Type: Positive certification of a User ID and Public-Key packet (0x13) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-512 (hash 10) Hashed Subpacket (33 bytes) Signature Creation Time (sub 2): 2017-02-22T19:34:24Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to certify other keys. Flag: This key may be used to sign data. Flag: This key may be used to encrypt communications. Flag: This key may be used to encrypt storage. Flag: This key may be used for authentication. Preferred Symmetric Algorithms (sub 11) (4 bytes) Symmetric Algorithm: AES with 256-bit key (sym 9) Symmetric Algorithm: AES with 192-bit key (sym 8) Symmetric Algorithm: AES with 128-bit key (sym 7) Symmetric Algorithm: CAST5 (128 bit key, as per) (sym 3) Preferred Hash Algorithms (sub 21) (4 bytes) Hash Algorithm: SHA2-512 (hash 10) Hash Algorithm: SHA2-384 (hash 9) Hash Algorithm: SHA2-256 (hash 8) Hash Algorithm: SHA2-224 (hash 11) Preferred Compression Algorithms (sub 22) (4 bytes) Compression Algorithm: ZLIB \u0026lt;RFC1950\u0026gt; (comp 2) Compression Algorithm: BZip2 (comp 3) Compression Algorithm: ZIP \u0026lt;RFC1951\u0026gt; (comp 1) Compression Algorithm: Uncompressed (comp 0) Features (sub 30) (1 bytes) Flag: Modification Detection (packets 18 and 19) Key Server Preferences (sub 23) (1 bytes) Flag: No-modify Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x8d81803c0ebfcd88 Hash left 2 bytes b2 c9 RSA signature value m^d mod n (4094 bits) Public-Subkey Packet (tag 14) (525 bytes) Version: 4 (current) Public key creation time: 2017-02-22T18:36:26Z Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (4096 bits) RSA public encryption exponent e (17 bits) Signature Packet (tag 2) (1086 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (9 bytes) Signature Creation Time (sub 2): 2017-02-22T18:36:26Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to sign data. Unhashed Subpacket (553 bytes) Issuer (sub 16): 0x8d81803c0ebfcd88 Embedded Signature (sub 32) (540 bytes) Signature Packet (tag 2) (540 bytes) Version: 4 (current) Signiture Type: Primary Key Binding Signature (0x19) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2017-02-22T18:36:26Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x7ea0a9c3f273fcd8 Hash left 2 bytes d5 60 RSA signature value m^d mod n (4095 bits) Hash left 2 bytes f2 b8 RSA signature value m^d mod n (4095 bits) もともと /etc/apt/trusted.gpg ファイルに入ってる公開鍵は\n$ apt-key list Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)). /etc/apt/trusted.gpg -------------------- pub rsa4096 2017-02-22 [SCEA] 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid [ 不明 ] Docker Release (CE deb) \u0026lt;docker@docker.com\u0026gt; sub rsa4096 2017-02-22 [S] ... となっているので，同じ鍵ということでいいよね。\nここで /etc/apt/sources.list.d/ ディレクトリにある archive_uri-https_download_docker_com_linux_ubuntu-jammy.list ファイルの中身を以下のように書き換える。\ndeb [arch=amd64 signed-by=/etc/apt/keyrings/docker-key.asc] https://download.docker.com/linux/ubuntu jammy stable ポイントは signed-by オプション。 このオプションに先程の公開鍵ファイルをフルパスで指定する。 add-apt-repository コマンドを使うなら\nsudo add-apt-repository \u0026#34;deb [arch=amd64 signed-by=/etc/apt/keyrings/docker-key.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; という感じだろうか。これでもう一度 apt update すると\n$ sudo apt update ... ヒット:5 https://download.docker.com/linux/ubuntu jammy InRelease ... パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています... 完了 状態情報を読み取っています... 完了 パッケージはすべて最新です。 よし。 ワーニングは出なくなったな。\nなんでこんな面倒くさいことをするかというと，もし秘密鍵が漏洩したサードパーティの公開鍵がひとつでも APT の鍵束に入っていると，その鍵を使って malware 入れ放題になる可能性があるからだ1。 サードパーティの公開鍵を分離し signed-by オプションで公開鍵が作用するパッケージを限定することでリスクが低減されることを狙っている。 簡単に言うと「もうサードパーティの公開鍵は APT で管理しないから自分でやれ！ 管理する仕組みは提供するから」ということである。 まぁ，苦肉の策って感じだけどね（笑）\n最後に /etc/apt/trusted.gpg ファイルを削除するか他所に退避させておけば問題ないであろう。\n【2022-05-19 追記】 pgAdmin のアップグレード pgAdmin も Docker と同じくサード・パーティ公開鍵の登録が必要なので以下の手順で公開鍵とリポジトリの登録を行う。\n$ sudo curl -fsSL https://www.pgadmin.org/static/packages_pgadmin_org.pub -o /etc/apt/keyrings/pgadmin-4-key.asc $ sudo sh -c \u0026#39;echo \u0026#34;deb [signed-by=/etc/apt/keyrings/pgadmin-4-key.asc] https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main\u0026#34; \u0026gt; /etc/apt/sources.list.d/pgadmin4.list\u0026#39; これで無問題。\nブックマーク  Ubuntu Manpage: apt-key - APT キー管理ユーティリティ 非推奨となったapt-keyの代わりにsigned-byとgnupgを使う方法 - 2021-05-05 - ククログ  参考図書   暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n   PGP―暗号メールと電子署名 シムソン ガーフィンケル (著), Garfinkel,Simson (原著), ユニテック (翻訳) オライリー・ジャパン 1996-04-01 単行本 4900900028 (ASIN), 9784900900028 (EAN), 4900900028 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  良書なのだが，残念ながら内容が古すぎた。 PGP の歴史資料として読むならいいかもしれない。\nreviewed by Spiegel on 2014-10-16 (powered by PA-APIv5)\n   暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n   OpenPGP 鍵の信用モデルは「信用の輪（web of trust）」と呼ばれるもので，ユーザ同士の peer で直接的な関係が鍵管理の前提になっている。このため不特定のユーザの間ではどうしても鍵管理が緩くなってしまう。この辺は不特定ユーザを前提にした X.509 とは思想が異なる。 OpenPGP 鍵の信用モデルについては拙文「OpenPGP の電子署名は「ユーザーの身元を保証し」ない」あたりを参考にしていただけるとありがたい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Ubuntu 22.04 LTS へのアップグレード",
      "section": "remark",
      "description": "今回は特に大きな問題はなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/upgrade-ubuntu-22_04-lts/",
      "published": "2022-05-06T09:07:48+00:00",
      "update": "2022-05-06T21:30:37+00:00",
      "content": "Ubuntu が「22.04 LTS にアップグレードせんのん？（← 超意訳）」と煩いので GW で余裕のある間にアップグレードすることにした。 今回は特に（少なくとも最近の機械では）日本語周りで不具合の話も聞かなかったし。\nUbuntu 22.04 リリースノート  今回は特に大きな問題はなし。\n 日本語入力周りは問題なく動いている。 Ubuntu コミュニティのご尽力に感謝 21.10 から Firefox は Snap 版になっているのに何故か言語パッケージが APT で提供されているというチグハグな状態だったが，今回で統一された？ Thunderbird は相変わらず GnuPG の鍵束を認識してくれない。そろそろ捨てようか LibreOffice は 7.3 系。 OpenPGP 鍵で暗号化したファイルもちゃんと開けるし，問題ないだろう。 Snap 版は相変わらず評判が悪いようだ（笑） KeePassXC は既に jammy リポジトリがある。依存ライブラリのバージョンが違うらしい pgAdmin4 は jammy リポジトリがまだ用意されてない模様。こちらはしばらく様子見か Node.js は NodeSource で v18 系をインストールしてみた。今のところは問題なし。なにかあれば v16 (LTS) に戻すつもり  いつものように GnuPG が古い $ gpg --version gpg (GnuPG) 2.2.27 libgcrypt 1.9.4 Copyright (C) 2021 Free Software Foundation, Inc. License GNU GPL-3.0-or-later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 まぁ v2.3 系でないのはしょうがないにしても，せめて今の LTS 最新版（v2.2.34）にしてくれよ orz\nOpenSSH と OpenSSL $ ssh -V OpenSSH_8.9p1 Ubuntu-3, OpenSSL 3.0.2 15 Mar 2022 OpenSSL は v3.0.3 のセキュリティ・アップデートに対応したバックポート・パッチが出ているようだ。 相変わらず分かりにくい。 普通にバージョンを上げてくれんもんかねぇ。\nちなみに GnuPG の gpg-agent との連携は問題なかった。\n OpenSSH の認証鍵を GunPG で作成・管理する gpg-agent の設定： GnuPG in Ubuntu  Docker と apt-key これに関しては記事を分けた。 後半へ続く（笑）\nブックマーク  Ubuntu 22.04 その58 - Ubuntu 22.04 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 22.04 その59 - Ubuntu 22.04 LTSの新機能と変更点 - kledgeb Ubuntu 22.04 その60 - Ubuntu 22.04 LTSの既知の問題 - kledgeb Ubuntu 21.10 その89 - Ubuntu 22.04 LTSへのアップグレードは数日中に提供予定 - kledgeb Ubuntu 20.04 その240 - Ubuntu 22.04 LTSへのアップグレード提供時期について - kledgeb Canonical、「Ubuntu 22.04 LTS」の提供を開始 ～WSLパッケージもストアに登場 - 窓の杜 Ubuntu 22.04 をインストールしたら設定すること 10 ヶ条 Ubuntu 20.04にNode.jsをインストールする方法 | DigitalOcean  "
    },
    {
      "title": "波乗りプログラマ",
      "section": "remark",
      "description": "競馬の予想屋に現金を預けてはいけない（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/programmer-the-surfer/",
      "published": "2022-05-05T01:49:50+00:00",
      "update": "2022-05-05T01:52:43+00:00",
      "content": "（この記事は Twitter に書き散らしたものを再構成したものです）\n起点はここから。\n 最近のプログラミング言語はなんだかファッションみたくトレンド指向が強い気がしてる。先日の飽きたの記事の人もそうだけど、皆トレンドに遅れを取られまいと必死になってしまってるんじゃなかろうか。\n\u0026mdash; mattn (@mattn_jp) May 3, 2022  この tweet からの一連は実際に Twitter で見ていただくとして，プログラミング言語の「トレンド」はだいたい2,3年おきに入れ替わる。 学生にとって3年は長い時間かもしれないが，仕事してる人にとって3年は短い。 このタイムスケールで「トレンド」を追いかけることに意味は殆どないと断言してしまおう（笑）\nネットでも「COBOL は終わった」「まだだ！まだ終わらんよ」みたいな話はしょっちゅう聞くし，私自身「Java はやめておけ」と言って憚らない人間だが，実際の世の中は汎用機は捨てても COBOL は捨てられないシステムも多いし，私も今だに Java コードで四苦八苦している。 こういった仕事がなくなることは短期的にはないだろう。 だからといってそれらの言語を若い人に勧めるかというと，それは別の話。\nyomoyomo さんの翻訳記事に「プログラミングを独習するには10年かかる」というのがある。 20年以上前の Java に関する記事だが主な主張に関しては他の言語どころか他の業界に置き換えても同じだろう。\n 研究者 (Hayes, Bloom) によると、チェス、作曲、絵画、ピアノ演奏、水泳、テニス、そして神経心理学や位相幾何学の研究を含む、広範な分野のいずれについても、専門技術を身につけるにはおよそ10年かかるそうだ。近道など実在しないようなのだ。4歳にして音楽の神童だったモーツァルトでさえ、超一流の楽曲を作り出すまでに13年以上を要している。別のジャンルになるが、ビートルズが突如現れナンバーワンヒットを連発し、エド・サリバン・ショーに出演したのは1964年だった。しかし、彼らは1957年からリバプールやハンブルグの小さなクラブで演奏していたわけで、また彼らは初期から大衆の支持を獲得したが、彼らがはじめて批評的にも大きな成功を得た『サージェント・ペパーズ』がリリースされたのは1967年である。サミュエル・ジョンソンは、「どんな分野であれ、生涯にわたる努力なくして優れたものには達し得ない。それよりも安い代償で手に入れることはできないのだ」と、それには十年以上かかると考えた。またチョーサーも「人生はとても短く、技を習得するにはとても時間がかかる」と嘆いている。 プログラミングを独習するには10年かかるより  この記事を勝手に読み替えるなら「仕事でプログラミング言語を習得し使いこなすにはそのくらいのタイムスケールで考えなければならない」ということだろう。 言い方を変えるなら，たかが2,3年の「トレンド」で言語を評価するなどナンセンスである。\n10年というのは人生の「就労時代」の1/4から1/3の期間に相当する。 でも「トレンド」で考えるならその10年の間に最低でも2回は入れ替わりがあるということになる。 如何に刹那的か分かるだろう。\nもちろん，どの業界でも「波の最先端」は常に意識して情報を仕入れていく必要がある。 でもその最先端に立っている人を羨み波の尻尾を必死に追いかけるだけでは何も身につかない。 「鶏口となるも牛後となるなかれ」とはよく言ったものである（笑）\n「推測するな計測せよ」の IT 業界では広く集めた「情報」を実際に試して「技能（スキル）」として深堀りし「技術」として昇華していかなければならない。\n技能はモノに付くが技術はヒトに付く これは私がペーペーの新人の頃に当時のボスに叩き込まれた言葉だ。 企業は技能を求めるが，最終的に「個人」に残るのは技術だけだ。 当然ながら辿り着くまでには時間がかかるし，明確なゴールもない。\n某恋愛ラノベ作品に「お金がなければ浮気もできない」というフレーズがあって思わず笑ってしまったが，お金で買える最も価値あるものは自由と時間である。 職業ソフトウェア・エンジニアはプログラミングを「技術」として身に付けるために時間をかけるし，その時間を稼ぐために少なくないお金を使う1。\nメディアは「波」のさきっちょしか見ないし，さらにその先は語れない。 たかが3年先の予測さえ外すのがメディアである。 競馬の予想屋に現金を預けてはいけない（笑）\n  桑田佳祐 – 波乗りジョニー（Full ver.） - YouTube  ブックマーク  プログラミング言語との付き合い方  参考図書   アプレンティスシップ・パターン　―徒弟制度に学ぶ熟練技術者の技と心得 (THEORY/IN/PRACTICE) Dave H. Hoover (著), Adewale Oshineye (著), 柴田 芳樹 (翻訳) オライリージャパン 2010-07-08 単行本（ソフトカバー） 4873114608 (ASIN), 9784873114606 (EAN), 4873114608 (ISBN)  出版元でデジタル版を購入可能。いわゆる「徒弟制度」を参考に「技術」を習得するための考え方を示す本。なんだけど，まだ読み終わってない。\nreviewed by Spiegel on 2022-05-05 (powered by PA-APIv5)\n   ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 Jonathan Rasmusson (著), 島田 浩二 (翻訳), 角谷 信太郎 (翻訳) オライリージャパン 2021-04-26 単行本（ソフトカバー） 4873119464 (ASIN), 9784873119465 (EAN), 4873119464 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  版元より電子版も出ている。 Google や Spotify のような「ユニコーン企業」はどのようにして「ミッション」を遂行しているのか。\nreviewed by Spiegel on 2022-05-21 (powered by PA-APIv5)\n   波乗りジョニー 桑田佳祐 (メインアーティスト) TAISHITA 2001-07-04 (Release 2019-12-20) MP3 ダウンロード B082FWNFPG (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  個人的にカラオケ定番曲のひとつ。桑田佳祐さんの曲は音域が合ってるみたいで歌いやすくてよい。\nreviewed by Spiegel on 2022-05-05 (powered by PA-APIv5)\n   考えてみたら，自由と時間を買うためにお金を稼ぐのに，お金を得るために自分の時間を売り飛ばすのは本末転倒だよな（笑） まぁ，私達ビンボー人はお金がないと死んじゃうからな。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "TechCrunch Japan 終了後の後始末",
      "section": "remark",
      "description": "翻訳記事 URL を可能な限り原文記事 URL に書き換えてみる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/garbage-collection/",
      "published": "2022-05-04T07:03:59+00:00",
      "update": "2022-05-04T07:04:24+00:00",
      "content": "2月に TechCrunch Japan が終了してバックナンバーも残さず消滅する話を書いた。 んで，実際に GW 中にサイトが消滅したわけだが，以前の URL を叩いてみたところ 404 ではなく本家 TechCrunch にリダイレクトされるようだ。\nいや，そこまでしてくれるなら，せめて翻訳記事は本家の原文記事にリダイレクトしてくれよ orz\nまぁ，愚痴ってもしょうがない。 こちらで可能な限り URL の書き換えを試みることにしよう。\nまずこのブログ・サイトの作業リポジトリ上で TechCrunch Japan の URL がどのくらいあるか軽く grep してみる1。\n$ grep -c \u0026#34;jp\\.techcrunch\\.com\u0026#34; \u0026#34;content/**/*.md\u0026#34; 1121 おぅふ。 アホほどあるがな orz\nTechCrunch Japan 記事の URL を機械的に変換できるか たとえば TechCrunch Japan 記事の URL を\n https://jp.techcrunch.com/2020/08/14/2020-08-13-instagram-delete-photos-messages-servers/\n とする。 この記事に対する原文記事の URL は\n https://techcrunch.com/2020/08/13/instagram-delete-photos-messages-servers/\n である。 ドメインが jp.techcrunch.com → techcrunch.com なのは当然として\n 翻訳記事と原文記事では URL パスの日付部分が違う 原文記事の日付は翻訳記事の slug に含まれている 日付部分を除く slug の文字列は翻訳記事と原文記事で同じ  これくらいなら正規表現を使った置換処理で何とかなりそうだ。 最近のテキスト・エディタは置換処理で正規表現が使えるものが多いが，私が愛用している VS Code でも正規表現を使った一括置換が可能である。\n Visual Studio Codeを用いた簡単な正規表現検索 - Qiita  例外 (AMP) を潰す 私の作業環境で2箇所ほど例外というか間違いがあって\n https://jp.techcrunch.com/2017/12/12/2017-12-11-some-hp-laptops-are-hiding-a-deactivated-keylogger/amp/ https://jp.techcrunch.com/2020/01/03/2020-01-02-ex-google-policy-chief-dumps-on-the-tech-giant-for-dodging-human-rights/amp/?__twitter_impression=true  などと，うっかり AMP 用の URL を載せちゃったみたいで，しかも片方は変なパラメータがくっついている。 これらも機械的に置換できなくはないのだが，2箇所だけだし，手作業で原文記事の URL に書き換えた。\nAMP ページはマジで滅びて欲しい。 なんでこんな下らないことで Google に気を使わにゃならんの。 メディアが気を遣うべき相手は私ら閲覧者だろうが。 本末転倒だよ。\nあと，古い URL でスキーマが HTTP のままになってるのが結構あったので，これは http://jp.techcrunch.com → https://jp.techcrunch.com に一括置換した。\nSlug パターン 前節の例外を排除したことで TechCrunch Japan 記事のURL\n https://jp.techcrunch.com/yyyy/mm/dd/slug/\n のうち slug 部分にのみ注目すればよくなった。 この Slug 部分も複数のパターンが見受けられるので整理しておく\nパターン1: 日付情報 yyyy-mm-dd を含む Slug 最初に挙げた例の通り yyyy-mm-dd-originalslug に要素分解できるパターン。 このパターンには別のバリエーションがあって\n https://jp.techcrunch.com/2020/07/15/x2020-07-14-harvard-mit-sue-ice-student-visas-rule/ https://jp.techcrunch.com/2020/11/21/https-techcrunch-com-2020-11-20-google-facebook-and-twitter-threaten-to-leave-pakistan-over-censorship-law/  のように日付情報の前に余分な文字列がくっついている。 2番目のとか原文記事の URL そのままぢゃん。 「なにすんねん」ってツッコんじゃったよ（笑）\nパターン2: 日付情報 yyyymmdd を含む Slug 以下のような URL パターン：\n https://jp.techcrunch.com/2017/09/13/20170912new-bluetooth-vulnerability-can-hack-a-phone-in-ten-seconds/ https://jp.techcrunch.com/2016/07/08/automotive-fortune-tesla20160706tesla-says-drivers-using-autopilot-remain-safer-than-regular-drivers/  パターン1のハイフンが抜けた状態。\nパターン3: Slug に日付情報がない  https://jp.techcrunch.com/2021/06/10/netflix-cowboy-bebop-streaming-this-fall/  jp.techcrunch.com → techcrunch.com と置換するだけで行けるかなぁと思ったが駄目だった（本家サイトが404になる）。 原文記事の日付情報が得られないので置換不可。\nパターン4: Slug がパーセント・エンコーディングされている  https://jp.techcrunch.com/2017/03/13/%e3%80%8c%e6%b3%95%e4%bb%a4%e4%b8%8a%e9%81%95%e5%8f%8d%e3%81%ae%e5%8f%af%e8%83%bd%e6%80%a7%e3%80%81%e5%80%ab%e7%90%86%e7%9a%84%e3%81%ab%e3%82%82%e5%95%8f%e9%a1%8c%e3%80%8ddena%e3%81%8cwelq%e5%95%8f/  多分，というか間違いなく日本版オリジナル記事だよね。 これは置換対象外とした。\n置換用正規表現 というわけで，今回はパターン1と2のみが対象となる。 置換処理は VS Code を使っている。\nパターン1の検索・置換正規表現は以下の通り。\n    正規表現     検索 https://jp\\.techcrunch\\.com/\\d{4}/\\d{2}/\\d{2}/.*(\\d{4})-(\\d{2})-(\\d{2})-(.+)/   置換 https://techcrunch.com/$1/$2/$3/$4/   対象ファイル *.md    パターン2の検索・置換正規表現は以下の通り。\n    正規表現     検索 https://jp\\.techcrunch\\.com/\\d{4}/\\d{2}/\\d{2}/.*(\\d{4})(\\d{2})(\\d{2})(.+)/   置換 https://techcrunch.com/$1/$2/$3/$4/   対象ファイル *.md    もう少し頑張ればひとつにまとめられたかもしれないが，副作用が出るのが嫌だったので分けた。 これで未変換の TechCrunch Japan 記事の URL は118個まで減ったが，今のところ，これ以上は無理なので，放置ということで。\nどっとはらい\nブックマーク  基本的な正規表現一覧 | murashun.jp    私の環境では mattn/jvgrep を grep に alias して使っている。ファイル指定を \u0026quot;content/**/*.md\u0026quot; などと再帰的に指定できるのが嬉しい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ユリウス日が2,460,000日を超える日",
      "section": "remark",
      "description": "2023年にはユリウス日が2,460,000日を超えるそうな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/julian-day-number/",
      "published": "2022-05-02T11:38:59+00:00",
      "update": "2022-05-03T02:07:00+00:00",
      "content": "国立天文台から面白い記事が出ている。\n ユリウス日について - 国立天文台暦計算室  この記事によると\n 令和5年(2023)にはついに246 ****日となる ユリウス日についてより  のだそうだ。 また，この記事にグレゴリオ暦とユリウス日を相互変換するアルゴリズムも書かれている（ちなみにこのアルゴリズムは『天文年鑑』にも載っている）。\n実は Go 言語を覚え始めた頃に練習でユリウス日を求める処理を書いたことがあるのだが，アレとは若干アルゴリズムが違うので，拙作 github.com/goark/koyomi のサブパッケージとして追加してみた。 洒落で有理数を扱える big.Rat 型を使っていることを除けば大したアルゴリズムではないので，中身については割愛する1。 興味のある方はリポジトリをご覧ください。\nというわけで，記事に書かれているアルゴリズムを使ってユリウス日が2,460,000日を超えるのはいつか調べてみる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/goark/koyomi\u0026#34; \u0026#34;github.com/goark/koyomi/jdn\u0026#34; ) func main() { num := 2460000.0 dt := jdn.FromJD(num) mjd := jdn.GetMJD(dt) fmt.Printf(\u0026#34;Julian Day Number: %.3f (%v)\\n\u0026#34;, num, mjd.FloatString(3)) fmt.Printf(\u0026#34;Gregorian: %v (%v)\\n\u0026#34;, dt, dt.In(koyomi.JST)) } これを実行すると\n$ go run sample.go Julian Day Number: 2460000.000 (59999.500) Gregorian: 2023-02-24 12:00:00 +0000 UTC (2023-02-24 21:00:00 +0900 JST) となる。 国立天文台のページで検算してみると\n   ユリウス日 - 国立天文台暦計算室より  と同じ値が出たので，たぶん問題ないだろう2。\n参考図書   天文年鑑 2022年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2021-11-22 単行本 441662140X (ASIN), 9784416621400 (EAN), 441662140X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2022年版。\nreviewed by Spiegel on 2021-11-22 (powered by PA-APIv5)\n   天体の位置計算 長沢 工 (著) 地人書館 1985-09-01 単行本 4805202254 (ASIN), 9784805202258 (EAN), 4805202254 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。\nreviewed by Spiegel on 2015-01-11 (powered by PA-APIv5)\n   新こよみ便利帳―天文現象・暦計算のすべて 暦計算研究会 (編集) 恒星社厚生閣 1991-05-01 単行本 4769907001 (ASIN), 9784769907008 (EAN), 4769907001 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  今となっては古い内容だが，暦や天体位置の一覧表が載っていて当時はそれなりに役に立った。\nreviewed by Spiegel on 2021-07-31 (powered by PA-APIv5)\n   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   ユリウス日の計算程度であれば float64 を使っても全く問題ない。ユリウス日の起点は紀元前4713年1月1日正午（12時）とされているが，もちろんその時代に（グレゴリオ暦はおろか）ユリウス暦があったわけではないし時刻系も今とは異なる。あくまでも現在の暦・時刻系の（過去方向への）延長線上にある仮想的起点と捉えるべきだろう。ユリウス日は日付（整数部）のみを扱う場合は Julian Day Number，時刻（小数部）を含める場合は Julian Date と呼び分けることが多い。今はあまり聞かないが Julian Day Number を日本語でユリウス通日と言う人もいる。時刻を含める場合は UT または UTC で計算する。ちなみに座表時系のひとつである TT (Terrestrial Time; 地球時) への拡張もあるらしい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 拙作の github.com/goark/koyomi/jdn パッケージではグレゴリオ暦しか対応していない。これは time.Time 型がグレゴリオ暦を前提に実装されているため。グレゴリオ暦以外の暦に対応するなら time.Time 型は使えないだろう。グレゴリオ暦の導入時期は国によってかなり違うが，欧州では17世紀には概ねグレゴリオ暦に移行したと言われている。日本は1873年（明治6年）のいわゆる「明治の改暦」でグレゴリオ暦互換の暦に移行した（厳密にはグレゴリオ暦ではない）。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "CI 用の GitHub Actions が諸々アップデートされていた",
      "section": "golang",
      "description": "GitHub Actions アップデートまつりw",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/update-github-actions/",
      "published": "2022-04-24T09:41:02+00:00",
      "update": "2022-04-24T09:41:24+00:00",
      "content": "Go で Excel ファイルを扱う Excelize パッケージがバージョンアップしていた。\n Go 言語スプレッドシートライブラリ：Excelize 2.6.0 がリリースされました  なので，このパッケージを使っている拙作の goark/csvdata パッケージもバージョンを上げた。\n Release v0.5.1 · goark/csvdata · GitHub  ぶっちゃけ go.mod ファイルだけ更新してもよかったのだが，少し前に公式の GitHub Actions である actions/setup-go や actions/checkout が v3 系に上がっているのに気付いたこともあり，諸々更新することにした。\n Release v3.0.0 · actions/setup-go · GitHub Release v3.0.2 · actions/checkout · GitHub  github/codeql-action GitHub が買収して手に入れたコードチェッカの GitHub Actions。 Workflow の設定例はこんな感じらしい。\nname:\u0026#34;Code Scanning - Action\u0026#34;on:push:branches:[main]pull_request:branches:[main]schedule:# ┌───────────── minute (0 - 59)# │ ┌───────────── hour (0 - 23)# │ │ ┌───────────── day of the month (1 - 31)# │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)# │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)# │ │ │ │ │# │ │ │ │ │# │ │ │ │ │# * * * * *- cron:\u0026#39;30 1 * * 0\u0026#39;jobs:CodeQL-Build:# CodeQL runs on ubuntu-latest, windows-latest, and macos-latestruns-on:ubuntu-latestpermissions:# required for all workflowssecurity-events:write# only required for workflows in private repositoriesactions:readcontents:readsteps:- name:Checkout repositoryuses:actions/checkout@v3# Initializes the CodeQL tools for scanning.- name:Initialize CodeQLuses:github/codeql-action/init@v2# Override language selection by uncommenting this and choosing your languages# with:# languages: go, javascript, csharp, python, cpp, java# Autobuild attempts to build any compiled languages (C/C++, C#, or Java).# If this step fails, then you should remove it and run the build manually (see below).- name:Autobuilduses:github/codeql-action/autobuild@v2# ℹ️ Command-line programs to run using the OS shell.# 📚 https://git.io/JvXDl# ✏️ If the Autobuild fails above, remove it and uncomment the following# three lines and modify them (or add more) to build your code if your# project uses a compiled language#- run: |# make bootstrap# make release- name:Perform CodeQL Analysisuses:github/codeql-action/analyze@v2 via github/codeql-action: Actions for running CodeQL analysis  Go コードのチェックをするなら “Initialize CodeQL” のコメント部分を解除して\n# Initializes the CodeQL tools for scanning.- name:Initialize CodeQLuses:github/codeql-action/init@v2# Override language selection by uncommenting this and choosing your languageswith:languages:goとすればよい。\nCodeQL は v2 系に上がったことでかなり深いところまでチェックするようになったようだ。 たとえば今回の goark/csvdata パッケージにはカラムの値を sql.NullByte 型に変換して返す\nfunc (r *Rows) ColumnNullByte(s string, base int) (sql.NullByte, error) { res, err := r.ColumnNullInt64(s, base) if err != nil { return sql.NullByte{Valid: false}, errs.Wrap(err) } return sql.NullByte{Byte: byte(res.Int64), Valid: true}, nil } というメソッドがあるのだが，最後の\nreturn sql.NullByte{Byte: byte(res.Int64), Valid: true}, nil で「範囲チェックなしで素のまま型変換すんな，ゴラァ（←超意訳）」と怒られてしまった。 素直な私は「なるほど」と納得して\nfunc (r *Rows) ColumnNullByte(s string, base int) (sql.NullByte, error) { res, err := r.ColumnNullInt64(s, base) if err != nil { return sql.NullByte{Valid: false}, errs.Wrap(err) } if res.Valid \u0026amp;\u0026amp; (res.Int64 \u0026lt; 0 || res.Int64 \u0026gt; math.MaxUint8) { return sql.NullByte{Valid: false}, errs.Wrap(strconv.ErrRange) } return sql.NullByte{Byte: byte(res.Int64 \u0026amp; 0xff), Valid: true}, nil } と修正しましたとさ。 今までは何も言われなかったのに。 とほほ\ngolangci/golangci-lint-action golangci-lint は Go 用の複合 linter。 Workflow の設定例はこんな感じ。\nname:golangci-linton:push:tags:- v*branches:- master- mainpull_request:permissions:contents:read# Optional: allow read access to pull request. Use with `only-new-issues` option.# pull-requests: readjobs:golangci:name:lintruns-on:ubuntu-lateststeps:- uses:actions/setup-go@v3with:go-version:1.17- uses:actions/checkout@v3- name:golangci-lintuses:golangci/golangci-lint-action@v3with:# Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest versionversion:v1.29# Optional: working directory, useful for monorepos# working-directory: somedir# Optional: golangci-lint command line arguments.# args: --issues-exit-code=0# Optional: show only new issues if it\u0026#39;s a pull request. The default value is `false`.# only-new-issues: true# Optional: if set to true then the all caching functionality will be complete disabled,# takes precedence over all other caching options.# skip-cache: true# Optional: if set to true then the action don\u0026#39;t cache or restore ~/go/pkg.# skip-pkg-cache: true# Optional: if set to true then the action don\u0026#39;t cache or restore ~/.cache/go-build.# skip-build-cache: true via golangci/golangci-lint-action: Official GitHub action for golangci-lint from its authors  こっちも v3 系に上がっているが， lint は日常的に使ってる（ていうか VS Code ならリアルタイムで走るようにできる）ので特に問題なし。 よかったよかった。\nsonatype-nexus-community/nancy-github-action Sonatype Nancy は Go の依存パッケージについて既知の脆弱性をチェックしてくれるツール。 こちらは特に変わってなかった。 Workflow の設定例はこんな感じ。\nname:Go Nancyon:[push]jobs:build:runs-on:ubuntu-lateststeps:- name:Check out code into the Go module directoryuses:actions/checkout@v2- name:Set up Go 1.x in order to write go.list fileuses:actions/setup-go@v2with:go-version:^1.13- name:WriteGoListrun:go list -json -m all \u0026gt; go.list- name:Nancyuses:sonatype-nexus-community/nancy-github-action@main via sonatype-nexus-community/nancy-github-action: Sonatype Nancy for GitHub Actions  これも個人的に常用しているので無問題。\ngoreleaser/goreleaser-action みんな大好き，複数プラットフォームの実行バイナリを同時生成して GitHub のリリースページまで作ってくれる GoReleaser の GitHub Actions。 こちらも Workflow の設定は今のところ変更なしでいいようだ。\nname:goreleaseron:pull_request:push:jobs:goreleaser:runs-on:ubuntu-lateststeps:-name:Checkoutuses:actions/checkout@v2with:fetch-depth:0-name:Set up Gouses:actions/setup-go@v2-name:Run GoReleaseruses:goreleaser/goreleaser-action@v2with:# either \u0026#39;goreleaser\u0026#39; (default) or \u0026#39;goreleaser-pro\u0026#39;distribution:goreleaserversion:latestargs:release --rm-distenv:GITHUB_TOKEN:${{ secrets.GITHUB_TOKEN }}# Your GoReleaser Pro key, if you are using the \u0026#39;goreleaser-pro\u0026#39; distribution# GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }} via goreleaser/goreleaser-action: GitHub Action for GoReleaser  この記事を書くのに goreleaser/goreleaser-action のページを眺めてて気がついたのだが， OpenPGP 電子署名も生成してくれるんだね。 Secret として隠蔽してくれるとはいえ， OpenPGP の秘密鍵やパスフレーズを GitHub 側に預託（escrow ← 言い方！）するのは抵抗があるなぁ。 まぁ，これは保留ということで。\nブックマーク  golangci-lint を GitHub Actions で使う Go 依存パッケージの脆弱性検査 GitHub Actions でクロス・コンパイル（GoReleaser 編） Go のコードでも GitHub Code Scanning が使えるらしい  参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   デベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n "
    },
    {
      "title": "2022-04-24 のブックマーク",
      "section": "bookmarks",
      "description": "「Ubuntu 22.04 LTSがリリースされました」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/04/24-bookmarks/",
      "published": "2022-04-24T03:15:44+00:00",
      "update": "2022-04-24T03:16:38+00:00",
      "content": "リリース情報  Release v1.2022.4 · plantuml/plantuml · GitHub Release v0.35.3: Release notes and version bumps for 0.35.3. (#4014) · bytecodealliance/wasmtime · GitHub Release Git for Windows 2.35.2 · git-for-windows/git · GitHub  Git security vulnerability announced | The GitHub Blog 「Git 2.35.2」が公開 ～2件の脆弱性を修正【4月14日追記】 - 窓の杜   Release gopls/v0.8.3 · golang/tools · GitHub Release v0.97.0 · gohugoio/hugo · GitHub Release Git for Windows 2.35.3 · git-for-windows/git · GitHub Release v0.97.1 · gohugoio/hugo · GitHub Release v0.97.2 · gohugoio/hugo · GitHub Release v0.97.3 · gohugoio/hugo · GitHub Release Notes for DSM | Synology Inc. Release Windows Terminal v1.12.1098 · microsoft/terminal · GitHub Release v0.36.0: Release Wasmtime 0.36.0 (#4058) · bytecodealliance/wasmtime · GitHub Highlights from Git 2.36 | The GitHub Blog  Release Git for Windows 2.36.0 · git-for-windows/git · GitHub 「Git for Windows」v2.36.0が公開 ～「Git LFS」の脆弱性に対処 - 窓の杜 「Cygwin 3.5」はWindows 7/8をサポートせず ～32bit対応も間もなく終了 - 窓の杜   Release 9.0.1 · mermaid-js/mermaid · GitHub Release v2.6.7 · spring-projects/spring-boot · GitHub  Release v2.5.13 · spring-projects/spring-boot · GitHub   Release v1.24.0 · tailscale/tailscale · GitHub 「Firefox」v99.0.1が公開 ～Windows/Intel環境の一部で動画のハードウェアデコードが効かない問題などを解決 - 窓の杜 KeePassXC 2.7.1 released - KeePassXC 「LibreOffice 7.3.2」が公開 ～テクノロジー愛好家やパワーユーザー向け無償オフィス環境 - 窓の杜 Go 言語スプレッドシートライブラリ：Excelize 2.6.0 がリリースされました  セキュリティ＆プライバシー関連  Apache Struts 2の脆弱性（S2-062）に関する注意喚起 Russian Cyberattack against Ukrainian Power Grid Prevented - Schneier on Security  Industroyer2: Industroyer reloaded | WeLiveSecurity   GitHub - kagancapar/CVE-2022-29072: 7-Zip through 21.07 on Windows allows privilege escalation and command execution when a file with the .7z extension is dragged to the Help\u0026gt;Contents area.  解凍・圧縮ソフト「7-Zip」に未修正の脆弱性 ～セキュリティ研究者が明らかに - 窓の杜   [openpgp] SHA1 collision detection in OpenPGP : 次期 OpenPGP RFC の内容について [2204.06974] Planting Undetectable Backdoors in Machine Learning Models  Undetectable Backdoors in Machine-Learning Models - Schneier on Security   Inside the Bitcoin Bust That Took Down the Web’s Biggest Child Abuse Site | WIRED  De-anonymizing Bitcoin - Schneier on Security   「GitHub」から非公開リポジトリなどのデータが流出 ～「npm」にも被害 - 窓の杜 「Ruby」にセキュリティアップデート ～「Ruby 2.6」系列はサポートを終了【4月21日追記】 - 窓の杜 「Docker Engine」の脆弱性に対処した「Docker Desktop 4.7.0」 - 窓の杜 「OpenSSH 9.0」、量子コンピューターを使った攻撃からの保護をデフォルトに - ZDNet Japan  Linux または Ubuntu に関する話題  Ubuntu 22.04 その58 - Ubuntu 22.04 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 22.04 その59 - Ubuntu 22.04 LTSの新機能と変更点 - kledgeb Ubuntu 22.04 その60 - Ubuntu 22.04 LTSの既知の問題 - kledgeb Ubuntu 21.10 その89 - Ubuntu 22.04 LTSへのアップグレードは数日中に提供予定 - kledgeb Ubuntu 20.04 その240 - Ubuntu 22.04 LTSへのアップグレード提供時期について - kledgeb Canonical、「Ubuntu 22.04 LTS」の提供を開始 ～WSLパッケージもストアに登場 - 窓の杜 Ubuntu 22.04 をインストールしたら設定すること 10 ヶ条  Go 言語関連  go/cobraでコマンド作りたいんだけど、最近の記事だと出来ない件 Goで時刻を扱うチートシート When To Use Generics - The Go Programming Language [2201.06753v2] BinGo: Pinpointing Concurrency Bugs in Go via Binary Analysis Go Developer Survey 2021 Results - The Go Programming Language Generate PostgreSQL credentials with Hashicorp Vault and Go – Split mind blog Go言語でワークフローエンジンを作った話 : JP1 もどきw Go: Understand and Mitigate Slowloris Attack | by Vincent Blanchon | A Journey With Go | Apr, 2022 | Medium  Go: How to Mitigate RUDY DoS Attack | by Vincent Blanchon | A Journey With Go | Apr, 2022 | Medium   Go言語製Let\u0026rsquo;s Encryptクライアントlegoをライブラリとして使う - Qiita Goの共通モジュール管理の方法をまとめてみた（Go1.18で導入されたWorkspaceも） Goのプログラム内でjqを使ってJSONを加工する - Qiita GitHub - taichi/kra: relational database access helper library GitHub - mururu/gshogi : gshogi is a shogi library wrtten in Go. O\u0026rsquo;Reilly Japan - 実用 Go言語  その他  SESTA/FOSTAから4年：議会は“セックスワーカー検閲法”がもたらした致命的な被害を直視せよ | P2Pとかその辺のお話R エンジニアはもっと図を書こう - 生涯未熟 : リアルタイムで図が描ければそうするんだけどねぇ\u0026hellip; 4 ways we use GitHub Actions to build GitHub | The GitHub Blog Mini Metro - Dinosaur Polo Club  Mini Metro（結城浩のゲーム紹介）｜結城浩   お客さまと共にサービス35周年 ｜ @nifty AWS Lambda が HTTPS エンドポイントをサポートしたので試してみた。 Git Extensionsのインストールと日本語化【環境構築編】 | trelab PostgreSQL：複数行の結果をまとめて１行として表示する - ぷちWiki - Lightly and Leniently Docker創始者らが開発、ビルド／テスト／デプロイの自動化をポータブルにするツール「Dagger」登場。そのままローカルでもGitHubでもCircleCIでも実行可能に － Publickey あまり知られていないPostgreSQLの機能 | POSTD DBMSの市場規模、DBaaSがオンプレミスに並ぶ。シェア1位はマイクロソフト、AWSがオラクルを抜いて2位に。ガートナーによる2021年の調査結果 － Publickey JavaScript/TypeScriptの高速フォーマッター「Rome Formatter」リリース。Rust製でPrettierより約10倍高速と － Publickey Meta（旧Facebook）、テキストエディタ用のUIコンポーネント「Lexical」をオープンソースで公開。Reactなどフレームワークの依存性なく軽量で高速、機能拡張も容易に － Publickey Rustを組込みソフトウェア開発で使う【前編】- 入門｜リアルタイムOS – 応用編 第2回 | APS｜半導体技術コンテンツ・メディア Ebook Services Are Bringing Unhinged Conspiracy Books into Public Libraries Zoom、新しいホワイトボード機能「Zoom Whiteboard」を発表 ～v5.10.3以降で利用可能 - 窓の杜  "
    },
    {
      "title": "やっと Codespaces が使える",
      "section": "remark",
      "description": "Go が動くぞ！",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/04/codespaces/",
      "published": "2022-04-23T13:45:12+00:00",
      "update": "2022-04-23T14:00:19+00:00",
      "content": " パソコンに Visual Studio Code を導入する（再チャレンジ） Go と VS Code Markdown と VS Code Java と VS Code やっと Codespaces が使える ← イマココ  さて，独り GitHub Team も契約したし，よーやく Codespaces が使えるようになったよ。\n今のところ Codespaces は GitHub Team または GitHub Enterprise Cloud のメンバで利用できる。 2022-04-23 時点の料金（米ドル建て）は以下の通り。\n  via About billing for Codespaces - GitHub Docs  ちなみに，使いすぎないよう上限を設定することも可能。\nCodespaces クラウドに立つ Codespaces の起動にはまず，ブラウザでリポジトリ・ページを開き，[Code] ボタンを押下する。\nCreate codespace on master  [Create codespace on master] ボタン押下で Codespaces のインスタンス生成が始まる。 上手く起動すればこんな感じに表示される。\nCreate codespace on master  拡張機能も普通に入れられる。\nExtensions  設定はユーザごとに保持して同期させることもできるようだ。\nGo が動くぞ！ Codespaces 上のターミナルで試しに Go コンパイラを動かしてみたら普通に動いた。\nこいつ・・・動くぞ！  GitHub Codespaces 拡張機能 VS Code の拡張機能に GitHub Codespaces というのがあって，これを使うとローカルの VS Code 上で Codespaces のリソースにアクセスできる。 コマンドパレットから Codespaces: Connect to Codespace を選択すると生成済みのインスタンスの一覧が表示されるので，選択して接続すると Codespaces に接続した VS Code が起動する。\nCodespace on the VS Code  パソコンで作業する場合はこっちのほうがいいかもねぇ。\nAndorid タブレットでも動いた Codespace on the Android Browser  おわ。 ターミナルの状態も共有できるのか。 凄いな。\nちなみに Android の Firefox では Codespaces を起動できなかった。 冷遇されてるなぁ（笑）\n後始末 Codespaces を終了する場合はコマンドパレットから Codespaces: Stop Current Codespace を選択して明示的に停止させること。 まぁ，最悪でも30分非活性状態なら自動的に停止するらしいけど。\nCodespaces のインスタンスはリポジトリごとに生成されるのでご注意を。 また，使わなくなったインスタンスはマメに削除することをお勧めする。 インスタンスの削除は “Your codespaces” でできる。\nYour codespaces  ブックマーク  GitHub開発チームでのCodespacesの利用 - GitHubブログ GitHub Codespaces · GitHub GitHub Codespaces Documentation - GitHub Docs Codespaces の支払いについて - GitHub Docs Github CodeSpace 触ってみた - Qiita GitHub Codespaces をつかって 3分で始めるサービス開発 | Wantedly, Inc. GitHub Codespaces で開発する - Wantedly Engineering Handbook  "
    }
  ]
}
