{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "もはや紙の本は贅沢品である",
      "section": "remark",
      "description": "今の本には2つの方向がある。ひとつは「読む本」でもうひとつは「遺す本」。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/paper-books-are-an-extravagance/",
      "published": "2025-03-04T03:56:18+00:00",
      "update": "2025-03-05T06:23:01+00:00",
      "content": "例によって Bluesky の TL を眺めてたら面白い記事を見かけた。\n本屋より大切なもの - by yu koseki - たよりない話 自身の話で恐縮だが，私は本屋が好きだった。 それはもう，大昔の履歴書の趣味の欄に「本屋巡り」と書くくらいには好きだった（今でもプロフィールにちょっと名残がある）。 過去形で書くということは，今はそうでもないということ。 ここ2,3年ではトイレ以外で本屋を利用してない気がする。 いや，職場用に本を買おうとして本屋に行ったんだけど，あまりのクズなラインナップに絶望したんだっけ。 以来，職場で買う本も Amazon で（会社のアカウントで）買ってもらっている。\n私が長く暮らしていた広島市は本屋天国みたいなところがあって，バブルの頃までは大小含めて様々な本屋が林立していた。 週末とか一日かけて10軒以上本屋さんをハシゴしてたりしてたよ。 バブルが弾けて小さい本屋はほぼ消滅したけど，それでも大型書店は（地方都市にしては）そこそこ残っている。\n松江市に帰郷 (かえ) って驚いたことのひとつは，子供の頃に通ってた本屋が根こそぎなくなってて，ほぼ今井書店一択になってたこと。 これで「本屋で本を買わない」ことに全く罪悪感がなくなった。 存在しないお店で本は買えない。\n7年前の引っ越しで大量の本を処分したのだが\n売却・廃棄予定の本。これで半分ほど。残りの半分の半分くらいは残したいと思ってるけど、まだ踏ん切りがつかない。ヘタレの自覚はある このときに痛烈に思ったのが「本は墓場に持っていけない」である。\nマンガやラノベは（竹本泉さんの作品以外は）紙の本を買わなくなった。 最近買った紙の本は『古代出雲の氏族と社会』だけど，これを買うのは勇気がいった（笑） つか，これくらいの本じゃないと紙では買わないし，紙の本自体めったに買わなくなった。 技術参考書は版元で PDF で買うし（Kindle ですらない）。\n本の関連で近年衝撃的だったのは yomoyomo さんの『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』が国会図書館に納本されたという2019年の記事。 私はあまりの衝撃にこんな記事を残した。\n少し前に「『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』が国会図書館に納本された」話があったが，残念ながら慧眼だったと言わざるを得ない。 まぁ「情報共有の未来」が「国会図書館に納本」とか皮肉 (スパイス) が効きすぎて目から汗が出てしまうが。 本の「史料」的価値より 今の本には2つの方向がある。 ひとつは「読む本」でもうひとつは「遺す本」。 オタクならそこに「布教する本」を加えるべきかもしれないが，きょうび「アルゴリズム」が個人の嗜好を支配する時代に於いて人による「布教」は効果が薄いかもしれない。\n「本の「史料」的価値」でも書いたが（特にネットにある）デジタル情報は失われやすい。 100年どころか10年だって保持できるか怪しいものである。 青空文庫（再来年で30周年か）や Flickr Foundation のような取り組みのほうが特殊なのである。 長く保存したいなら結局「紙の本」の形にするのが最も確実ということになる。 まぁ，アクセス性を無視するなら北極に埋める手もあるが（笑）\n「遺す本」ってのは出版社や作家あるいは文化政策の為政者が考えるべきことで，嗜好品・贅沢品として買うか私設図書館でも作るのなら別だが，その辺の個人がどうにかするような話ではない。\n一方で「読む本」に関しては，もう「本」の体裁をとる必然性すらなくなっている。 マンガだってケータイに特化した「タテ読み」が普通になってきてるし，小説サイトには書籍未満の作品が大量に溢れているし，今や大量になった Zenn 本にもお世話になっている。 VTuber が Minecraft で同人を誌売る時代だし1（笑）\n\u0026hellip;という状況になったとき「本屋」の立ち位置や意義って何？ というお気持ちで冒頭に紹介した記事に戻るわけだ。\nでもほぼ全ての本屋は、出版・取次と密接に結びつき、再販制度によって維持された、日本の出版システムの一端である。そして、そのシステムはもう誰が見てもうまくいっていない。だから結果として本屋が減っている。本屋を守れというのは、言い換えれば現在の出版システムを（多少の手直しはあったとしても）守れという話に聞こえるわけで、さて、本当にそれに意義があるのか、そもそもそんなことが可能なのか。 本屋より大切なものより だから、本屋活性化というのは問題の立てかたとして何重にもおかしくて、少なくとも出版システムをどう抜本的に改善するかという話をすべきだし、あるいは本屋のなくなっていく時代にどう本と出会うべきかという話をすべきだし、そもそもは人は情報とどう向き合うべきかという話をすべきである。 本屋より大切なものより 政治に疎い私は経産省による書店活性化なるものを初めて知ったのだが\n今回の課題の整理は、地方公共団体、出版業界、そして書店に足を運び、本を購入される国民の皆様が、こうした書店をめぐる課題を認識をしていただくことで、文化の接点、ひいては国力の拠点としての書店の新規出店や事業継続に繋がることを期待しています。\nまた、今回、書店振興プロジェクトチームが中心となって実施したヒアリング等により、書店をめぐる課題の整理を進めていますが、パブリックコメントを通じて改めて、国民の皆様の御意見を頂いたうえで、反映していきたいと考えています。\n「関係者から指摘された書店活性化のための課題（案）」を公表します （METI/経済産業省）より 昨年のカオスな総選挙のドサクサでそんなことしてたのか。 やりたい放題だな，経産省。\n「多様なコンテンツに触れる」とか「文化創造基盤」とか考えるなら，公共図書館とか博物館とか，それこそ青空文庫みたいなサービスとか色々と考えることがあるだろ。\nぶっちゃけこれって潰れつつある（営利企業としての）「本屋」を救済してくださいって話であって，本当は「本」の文化的側面など1ミリも考えてないよね。 まぁ，経産省らしいっちゃあらしいけど（笑）\nこういうピントの外れたことをねちねち捏ねくり回してるから出版社も取次も本屋も衰退してるんじゃないの？\n参考文献 古代出雲の氏族と社会 (47) (同成社古代史選書 47) 武廣 亮平 (著) 同成社 2024-03-11 単行本 4886219454 (ASIN), 9784886219459 (EAN), 4886219454 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「島根の歴史文化講座 2024」で講師をされた武廣亮平さんの著作。興味本位で買うには躊躇するお値段だし地元の県立図書館でも借りれるが，じっくり読みたいので買ってみた。著者の過去の論文を再構成した内容。記紀などの史料や過去の研究者の膨大な文献を整理した上で古代出雲についての考察を行う。\nreviewed by Spiegel on 2024-11-26 (powered by PA-APIv5)\n犬とハサミは使いよう (ファミ通文庫) 更伊 俊介 (著), 鍋島 テツヒロ (イラスト) KADOKAWA 2011-08-25 (Release 2012-09-07) Kindle版 B009IMAGYQ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 犬になっても本を読む！\nreviewed by Spiegel on 2015-04-26 (powered by PA-APIv5)\nもうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo (著) 達人出版会 2017-12-25 (Release 2019-03-02) デジタル書籍 infoshare2 (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; WirelessWire News 連載の書籍化。感想はこちら。祝 Kindle 化！\nreviewed by Spiegel on 2018-12-31\nブック・ウォーズ――デジタル革命と本の未来 ジョン・B・トンプソン (著), 久保美代子 (翻訳) みすず書房 2025-01-27 (Release 2025-01-27) Kindle版 B0DTK2DNXF (ASIN) Bluesky で版元が紹介されているのを見て衝動買いした。こちらの紹介記事も参考にどうぞ。これから読む。\nreviewed by Spiegel on 2025-03-05 (powered by PA-APIv5)\nそもそも日本の「同人市場」という特殊商慣行自体が日本の出版システムが壊れていることの傍証だよな。「VTuber が Minecraft で同人誌を売る話」を見て「そもそも同人活動ってこういうノリだったよなぁ」と遥か昔の学生時代を思い出していた。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Typst 練習用のリポジトリを作った，他",
      "section": "remark",
      "description": "Typst 練習用のリポジトリを作った / GitHub Copilot Pro に加入した",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/repository-for-practices-typst/",
      "published": "2025-03-03T11:52:58+00:00",
      "update": "2025-03-04T03:56:58+00:00",
      "content": "Typst 練習用のリポジトリを作った Typst のお勉強用に書いたコードをまとめたリポジトリを作った。\nGitHub - spiegel-im-spiegel/practices-typst: Typst による組版の練習 MIT-0 ライセンスで公開しているので，再利用等ご自由にどうぞ（再利用する価値があるかどうかは別として）。\n今後も思いついたことをチマチマ残していく予定。 ブログのほうは「Typst に関する雑多な話」を随時更新で書き足していくつもり。 これで Typst については一区切り付いたかな。\nGitHub Copilot Pro に加入した 今回 Typst で遊んでたら GitHub Copilot Free 版の制限いっぱいになってしまいまして。 10秒くらい考えて Pro 版に入ることにした。 とりあえず様子見で月 10USD ずつ払う。\nやっぱ本格的に使うならお金を払わんとダメか。\n主に VS Code でコーディング支援をしてもらってるが Typst と TypeScript で混乱してるのか，ウソの提案が多い。 大抵はコンパイルエラーになるので致命的ではないが。 ちゃんと統計をとってないけど体感で3割くらいしか正しくない感じ。 プロ野球選手なら打率3割でエース級だが，提案が7割使えないのはちょっと困る。 Go のコードならそんなに外れはないんだけどねぇ。\nCopilot に関してはローンチ当初から色々言われているが，最近でも\nThousands of exposed GitHub repositories, now private, can still be accessed through Copilot | TechCrunch GitHubで非公開にされたはずのリポジトリがMicrosoftのAIアシスタント「Copilot」を通じて公開されていたという指摘 - GIGAZINE みたいな話があって正直いまでもビミョーな気分なんだけど，なんだかんだと便利に使っている自分がいる。 生成 AI 周りはホンマ（かつての FinTech 流行時のように）山師みたいなのが多いのであまり深入りしないようにしているが，若い人が会議のテキスト起こしと議事録を作成するのに生成 AI を便利に使ってる話とか聞くと「もうそういう時代なんだなぁ」としみじみする。\nまぁ，年寄りの冷水なので聞き流してください（笑）\nブックマーク GitHub、あらゆるエディタやIDEとGitHub Copilotとの統合を可能にする「Copilot Language Server SDK」を一般公開|CodeZine（コードジン） GitHub for Beginners: How to get started with GitHub Copilot - The GitHub Blog 参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\n"
    },
    {
      "title": "Typst に関する雑多な話",
      "section": "typst",
      "description": "ここでは Typst に関する小ネタをまとめて挙げておく（随時更新）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/typst/x-miscellaneous/",
      "published": "2025-03-02T12:55:38+00:00",
      "update": "2025-03-05T04:53:18+00:00",
      "content": "ここでは Typst に関する小ネタをまとめて挙げておく（随時更新）。\nTypst をビルドする Typst は Windows であれば Winget， macOS なら Homebrew， Linux なら Snap または “Versions for typst” から直接取得できるが，これらの方法でインストールできない場合は Rust のビルド環境を導入して Typst をビルドする。\nとりあえず Linux プラットフォームで Rust ビルド環境をインストールするには以下のコマンドでいける1。\n$ curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh これで PATH の設定までやってくれる。 その後，以下のコマンドで Typst のビルドを行う。\n$ cargo install --locked typst-cli Rust ビルド環境を標準設定でインストールしているなら ~/.cargo/bin/ ディレクトリ（Linux の場合）に typst コマンドが出来ているはずである。 cargo コマンドが起動しているならこのディレクトリに PATH が通ってるはずなので，そのまま typst コマンドを実行できる。\n変数をコマンドライン引数で指定する Typst は compile 時に --input オプションでキーと値を与えることができる。 --input オプションは複数指定できる。\n$ typst compile --input key1=value1 --input key2=value2 sys-inputs.typ 設定したキー・値のペアは sys.inputs から取得することができる。\n#show raw: body =\u0026gt; { set text(font: ( ( name: \u0026#34;Inconsolata\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Sans CJK JP\u0026#34; )) body } #sys.inputs このコードに対し --input key1=value1 --input key2=value2 オプションを付けて compile すると。\n変数をコマンドライン引数で指定する などと連想配列（dictionary）の形で格納されていることが分かる。 なので，上の例であれば sys.inputs.key1 または sys.inputs.at(\u0026quot;key1\u0026quot;) で値 \u0026quot;value1\u0026quot; を取得できる（値は必ず文字列に解釈される）。 ただし sys.inputs.key3 のように --input オプションで指定していないキーを読もうとすると\n$ typst compile --input key1=value1 --input key2=value2 sys-inputs-1b.typ error: dictionary does not contain key \u0026#34;key3\u0026#34; ┌─ sys-inputs-1b.typ:12:12 │ 12 │ #sys.inputs.key3 │ ^^^^ という感じにコンパイルエラーになる。 厄介なことに VS Code の Tinymist Typst 拡張機能は，このような immediate なキーの記述に対してエラーを吐いてくれて，けっこう鬱陶しい。 回避策としては\n#let key3 = \u0026#34;\u0026#34; #if \u0026#34;key3\u0026#34; in sys.inputs { key3 = sys.inputs.at(\u0026#34;key3\u0026#34;) } #key3 などと記述すればいいようだ。 この場合 compile 処理自体は「正常終了」してしまうのがデメリットかな2。\nブックマーク ブックマークは「Typst に関するブックマーク」にてまとめています。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\nLinux の Rust ビルド環境には GCC も必要。 Ubuntu は GCC が既定で入ってないので， sudo apt build-essential で GCC を導入する。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n軽く調べてみたが Typst には exit や panic のようなプロセスを強制終了させる仕組みがない。 try-catch の例外処理もなく，当然 throw のようなものもない。たとえば処理中に（文法エラーや言語仕様上の致命的エラーではなく）ビジネスロジック上の問題があったときに，その問題をドキュメントとして出力することは可能だが，処理自体は「正常終了」してしまうため，プロセスを監視する側はエラーを感知できず出力結果を目視してはじめてエラーが起きていることが分かることになる。これはちょっと面白くない。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Typst におけるデータと制御",
      "section": "typst",
      "description": "データと制御が分離しやすくコードが（比較的）書きやすいというのは Typst の利点だと思う。 ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/typst/6-data-and-control/",
      "published": "2025-03-02T12:46:52+00:00",
      "update": "2025-03-03T11:54:47+00:00",
      "content": "Typst は CSV や JSON などのテキストベースのデータ（ファイル）を読み込んで使うことができる。 簡単な例をいくつか挙げてみる。\nCSV データの読み込みと表示 以下の内容の CSV ファイルがあるとする。\n\u0026#34;日付\u0026#34;,\u0026#34;曜日\u0026#34;,\u0026#34;名称\u0026#34; \u0026#34;2025年5月3日\u0026#34;,\u0026#34;土\u0026#34;,\u0026#34;憲法記念日\u0026#34; \u0026#34;2025年5月4日\u0026#34;,\u0026#34;日\u0026#34;,\u0026#34;みどりの日\u0026#34; \u0026#34;2025年5月5日\u0026#34;,\u0026#34;月\u0026#34;,\u0026#34;こどもの日\u0026#34; \u0026#34;2025年5月6日\u0026#34;,\u0026#34;火\u0026#34;,\u0026#34;休日\u0026#34; これを読み込んで表にすることを考える。 Typst のコードはこんな感じ。\n#show raw: body =\u0026gt; { set text(font: ( ( name: \u0026#34;Inconsolata\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Sans CJK JP\u0026#34; )) body } #let holidays = csv( \u0026#34;./holidays.csv\u0026#34;, delimiter: \u0026#34;,\u0026#34;, row-type: dictionary, ) #holidays フォントの指定については今回はスルーで1（笑） CSV データの読み込みには raw 関数を使う。 今回のように1行目がヘッダ情報になっている場合は row-type に dictionary を指定する。 ヘッダ情報がない場合は既定の array でOK。\nこれを PDF に出力すると以下のような内容になる。\nCSV データの読み込み 見ての通り連想配列（dictionary）の配列（array）という構造になっている。\n次にこれをヘッダ情報とデータに分離する。 Typst のコードはこんな感じ。\n#show raw: body =\u0026gt; { set text(font: ( ( name: \u0026#34;Inconsolata\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Sans CJK JP\u0026#34; )) body } #let holidays = csv( \u0026#34;./holidays.csv\u0026#34;, delimiter: \u0026#34;,\u0026#34;, row-type: dictionary, ) #let header = holidays.first().keys() #let data = holidays.map(holiday =\u0026gt; holiday.values()) #header #data PDF への出力結果は以下の通り。\nヘッダとデータを分離 data は2次元配列になっている点に注意。 一応，元データの並び順のままヘッダ情報もデータも取れるんだね。 array にはコンテナ操作ではお馴染みの filter, map, fold といったメソッドが使える。 ありがたや。\nこれで CSV データは取れたので table へ展開してみる。\n#set text(font: \u0026#34;NOTO Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) //関数定義 #let tableOfHolidays(path) = { let holidays = csv( //CSV ファイルの読み込み path, delimiter: \u0026#34;,\u0026#34;, row-type: dictionary, ) if holidays.len() \u0026gt; 0 { //データがある場合のみテーブルを表示 let header = holidays.first().keys() //ヘッダ情報の抽出 table( columns: header.len(), //ヘッダ情報の要素数 align: header.map(it =\u0026gt; { if it == \u0026#34;日付\u0026#34; { right } else if it == \u0026#34;曜日\u0026#34; { center } else { left } } ), //ヘッダ情報の名前によって文字列の寄せを設定 fill: (x, y) =\u0026gt; if y == 0 { green.lighten(80%) }, //ヘッダ部の背景色を設定 table.header(..header.map(it =\u0026gt; { set text(font: \u0026#34;NOTO Sans CJK JP\u0026#34;, weight: \u0026#34;bold\u0026#34;) it })), //ヘッダ情報，文字コードも併せて設定している ..holidays.map(holiday =\u0026gt; holiday.values()).flatten() //データを一次元のデータの並びに展開 ) } } //CSV ファイルの読み込んでテーブルを表示 #tableOfHolidays(\u0026#34;./holidays.csv\u0026#34;) まず tableOfHolidays 関数を定義して CSV ファイルへのパスを引数とする（CSV 形式の文字列でも可）。 tableOfHolidays 関数内では CSV ファイルからデータを取得して table へ展開している。 最後に tableOfHolidays 関数に CSV ファイルへのパスを渡して実行する。\n配列に対する flatten 関数は多次元配列を一次元配列に展開する。\n配列の頭に付いている .. は配列を要素の並びに展開する。 関数の引数で min(..nums) みたいな感じでよく使われる。\nあとはヘッダ部の装飾のためにごちゃごちゃ書いているが，詳細は割愛する。 そんなもんと思って眺めていただければ（笑）\nPDF への出力結果は以下の通り。\nCSV からテーブル生成 まぁ，こんなもんかな。\nJSON データを読み込んでカレンダーを作ろう もうひとつ。 練習問題としてカレンダーを作ってみる。\nTypst には日時情報を操作する型として datetime があるのだが，今回は「外部データを読み込んで使う」のが目的なので使わない。\nある月のカレンダーを組む際に必要な情報としては以下のものがあればいいだろう。\n年 月 月初日の曜日（0 〜 6， 0 が日曜日） 月の最終日 datetime では「月の最終日」を取得するのが面倒くさいんだよな2。 愚痴はともかく，まずは #let calendar(year, month, first_weekday, lastday) = { ... } という関数を定義してみる。\n#set text(font: \u0026#34;NOTO Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) //カレンダーを作成 #let calendar(year, month, first_weekday, lastday) = { let days = () let i = 0 while i \u0026lt; first_weekday { //初日の曜日まで空白を追加 days.push(\u0026#34;\u0026#34;) i = i + 1 } days = days + range(1, lastday + 1).map(day =\u0026gt; { //日付を追加 [#day] }) //カレンダーを作成 table( stroke: (x, y) =\u0026gt; if y == 1 {//罫線を設定 (bottom: 0.7pt + black) }, align: (x, y) =\u0026gt; ( //文字の位置を設定 if y \u0026gt; 1 { right } else { center } ), columns: 7, //列数を設定 table.header( //ヘッダーを設定 table.cell( //年月を設定 colspan: 7, [ #set text(font: \u0026#34;NOTO Sans CJK JP\u0026#34;, weight: \u0026#34;bold\u0026#34;) #year 年 #month 月 ] ), ..(text(red)[日], [月], [火], [水], [木], [金], text(blue)[土]).map(it =\u0026gt; { //曜日を設定 set text(font: \u0026#34;NOTO Sans CJK JP\u0026#34;, weight: \u0026#34;bold\u0026#34;) it }) ), ..days.enumerate(start:0).map(it =\u0026gt; { if calc.rem(it.at(0), 7) == 0 { //日曜日の場合 table.cell( [ #set text(red) #it.at(1) ] ) } else if calc.rem(it.at(0), 7) == 6 { //土曜日の場合 table.cell( [ #set text(blue) #it.at(1) ] ) } else { //その他の場合 table.cell( [#it.at(1)] ) } }), ) } #calendar(2025, 5, 4, 31) //2025年5月のカレンダーを表示 実際に曜日を考慮した日付情報を生成している部分を強調している。 他はほぼテーブルの装飾のためのコードである。 最後の行で具体的な値を与えて calendar 関数を呼び出しカレンダーを表示している。\nこれの組版結果は以下の通り。\nカレンダーを生成（2025年5月） んー。 こんなもんかな。\n次は1月から12月までの年間カレンダーを作ってみよう。\n要は作成した calendar 関数を12回呼び出せばいいのだが，必要な情報をいちいち手入力するのも不毛なので，必要なデータを JSON ファイルから取得するよう変更する。 JSON ファイルの作成は Go で以下のように組んでみた。\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; ) // Month represents a calendar month with its associated year, month number, // the first weekday of the month, and the last day of the month. // Year is the year of the month. // Month is the month number (1-12). // FirstWeekday is the weekday of the first day of the month (0-6, where 0 is Sunday). // Lastday is the last day of the month. type Month struct { Year int `json:\u0026#34;year\u0026#34;` Month int `json:\u0026#34;month\u0026#34;` FirstWeekday int `json:\u0026#34;first_weekday\u0026#34;` Lastday int `json:\u0026#34;lastday\u0026#34;` } func main() { year := 2025 months := make([]Month, 0, 12) for month := 1; month \u0026lt;= 12; month++ { m := Month{ Year: year, Month: month, FirstWeekday: int(time.Date(year, time.Month(month), 1, 0, 0, 0, 0, time.UTC).Weekday()), Lastday: time.Date(year, time.Month(month+1), 0, 0, 0, 0, 0, time.UTC).Day(), } months = append(months, m) } b, err := json.Marshal(months) if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(string(b)) } このコードの実行結果は以下の通り（途中を端折っている）。\n$ go run months.go | jq . [ { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 1, \u0026#34;first_weekday\u0026#34;: 3, \u0026#34;lastday\u0026#34;: 31 }, { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 2, \u0026#34;first_weekday\u0026#34;: 6, \u0026#34;lastday\u0026#34;: 28 }, ... { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 12, \u0026#34;first_weekday\u0026#34;: 1, \u0026#34;lastday\u0026#34;: 31 } ] この出力を months.json ファイルにリダイレクトすればOK。\nTypst のコードについては calendar 関数を呼び出してる部分を以下のように書き換える。\n#{ let calendars = () for month in json(\u0026#34;./months.json\u0026#34;) { //月ごとにカレンダーを作成 calendars.push(calendar(month.year, month.month, month.first_weekday, month.lastday)) } //カレンダーを3列×4行で表示 grid( stroke: none, gutter: 0.5em, columns: (1fr, 1fr, 1fr), rows: (1fr, 1fr, 1fr, 1fr), ..calendars, ) } ここでは table ではなく grid を使っている。 機能的には両者に殆ど違いはないが，ページ内をいくつか仕切って配置するという用途であれば grid を使ったほうがいいだろうか。\n組版結果は以下の通り。\n年間カレンダーを生成（2025年） 次。 この年間カレンダーに対して祝日・休日の日に色を付けてみよう。\n祝日・休日データの収集についても Go で以下のコードを組んでみる。\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/goark/koyomi\u0026#34; \u0026#34;github.com/goark/koyomi/value\u0026#34; ) // Holiday represents a holiday with its date and title. // Year is the year of the holiday. // Month is the month of the holiday (1-12). // Day is the day of the holiday (1-31). // Weekday is the day of the week of the holiday. // Title is the name or description of the holiday. type Holiday struct { Year int `json:\u0026#34;year\u0026#34;` Month int `json:\u0026#34;month\u0026#34;` Day int `json:\u0026#34;day\u0026#34;` Weekday time.Weekday `json:\u0026#34;weekday\u0026#34;` Title string `json:\u0026#34;title\u0026#34;` } func main() { start, _ := value.DateFrom(\u0026#34;2025-01-01\u0026#34;) end, _ := value.DateFrom(\u0026#34;2025-12-31\u0026#34;) td, err := os.MkdirTemp(os.TempDir(), \u0026#34;blog\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer func() { _ = os.RemoveAll(td) }() k, err := koyomi.NewSource( koyomi.WithCalendarID(koyomi.Holiday), koyomi.WithStartDate(start), koyomi.WithEndDate(end), koyomi.WithTempDir(td), ).Get() if err != nil { fmt.Fprintln(os.Stderr, err) return } holidays := make([]Holiday, 0, len(k.Events())) for _, e := range k.Events() { holidays = append(holidays, Holiday{ Year: e.Date.Year(), Month: int(e.Date.Month()), Day: e.Date.Day(), Weekday: e.Date.Weekday(), Title: e.Title, }) } b, err := json.Marshal(holidays) if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(string(b)) } 祝日・休日データの取得は拙作 github.com/goark/koyomi パッケージを使って国立天文台から取得している。\nこのコードの実行結果は以下の通り（途中を端折っている）。\n$ go run holidays.go | jq . [ { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 1, \u0026#34;day\u0026#34;: 1, \u0026#34;weekday\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;元日\u0026#34; }, { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 1, \u0026#34;day\u0026#34;: 13, \u0026#34;weekday\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;成人の日\u0026#34; }, ... { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 11, \u0026#34;day\u0026#34;: 24, \u0026#34;weekday\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;休日\u0026#34; } ] この出力を holidays.json ファイルにリダイレクトすればOK。\nTypst のコードについては calendar 関数周りを以下のように書き換える。\n//祝日・休日の取得 #let holidays = json(\u0026#34;./holidays.json\u0026#34;) //指定した年月日が祝日・休日かどうかを判定 #let containHoliday(year, month, day) = { holidays.find(holiday =\u0026gt; { holiday.year == year and holiday.month == month and holiday.day == day }) != none } //カレンダーを作成 #let calendar(year, month, first_weekday, lastday) = { let days = () let i = 0 while i \u0026lt; first_weekday { //初日の曜日まで空白を追加 days.push(\u0026#34;\u0026#34;) i = i + 1 } days = days + range(1, lastday + 1).map(day =\u0026gt; { //日付を追加 [#day] }) //カレンダーを作成 table( stroke: (x, y) =\u0026gt; if y == 1 {//罫線を設定 (bottom: 0.7pt + black) }, align: (x, y) =\u0026gt; ( //文字の位置を設定 if y \u0026gt; 1 { right } else { center } ), columns: 7, //列数を設定 table.header( //ヘッダーを設定 table.cell( //年月を設定 colspan: 7, [ #set text(font: \u0026#34;NOTO Sans CJK JP\u0026#34;, weight: \u0026#34;bold\u0026#34;) #year 年 #month 月 ] ), ..(text(red)[日], [月], [火], [水], [木], [金], text(blue)[土]).map(it =\u0026gt; { //曜日を設定 set text(font: \u0026#34;NOTO Sans CJK JP\u0026#34;, weight: \u0026#34;bold\u0026#34;) it }) ), ..days.enumerate(start:0).map(it =\u0026gt; { let day = it.at(0)-first_weekday+1 //日付 let hflag = day \u0026gt; 0 and day \u0026lt;= lastday and containHoliday(year, month, day) //祝日・休日かどうか if calc.rem(it.at(0), 7) == 0 { //日曜日の場合 if hflag { //祝日・休日の場合 table.cell( fill: red.lighten(90%), [ #set text(red) #it.at(1) ] ) } else { //祝日・休日でない場合 table.cell( [ #set text(red) #it.at(1) ] ) } } else if calc.rem(it.at(0), 7) == 6 { //土曜日の場合 if hflag { //祝日・休日の場合 table.cell( fill: red.lighten(90%), [ #set text(blue) #it.at(1) ] ) } else { //祝日・休日でない場合 table.cell( [ #set text(blue) #it.at(1) ] ) } } else { //その他の場合 if hflag { //祝日・休日の場合 table.cell( fill: red.lighten(90%), [#it.at(1)], ) } else { //祝日・休日でない場合 table.cell( [#it.at(1)], ) } } }), ) } 組版結果は以下の通り。\n年間カレンダーを生成（2025年） こんな感じで Typst のコードモードには得手も不得手もあるが，ある程度データを整えて与えてあげればそこそこの制御ができそうである。 ぶっちゃけ $\\mathrm{\\TeX}$/$\\mathrm{\\LaTeX}$ のマクロは触る気にもならないが Typst のコードモードは今どきのスクリプト言語が操れる人なら違和感少なくイケそうな気がする。\nデータファイルをコマンドラインで指定する 前節でつくった年間カレンダーはデータファイル名をコードに埋め込んでいるが，これをコマンドラインで指定できるようにしてみる。\nTypst コード側は sys を使って以下のようにコマンドラインの情報を読み込むように書き換える。\n//祝日・休日の取得 #let hfile = \u0026#34;./holidays.json\u0026#34; #if \u0026#34;holidays\u0026#34; in sys.inputs { hfile = sys.inputs.at(\u0026#34;holidays\u0026#34;) } #let holidays = json(hfile) calendar 関数は変更がないので割愛する。\n#{ let months = \u0026#34;./months.json\u0026#34; if \u0026#34;months\u0026#34; in sys.inputs { months = sys.inputs.at(\u0026#34;months\u0026#34;) } let calendars = () for month in json(months) { //月ごとにカレンダーを作成 calendars.push(calendar(month.year, month.month, month.first_weekday, month.lastday)) } //カレンダーを3列×4行で表示 grid( stroke: none, gutter: 0.5em, columns: (1fr, 1fr, 1fr), rows: (1fr, 1fr, 1fr, 1fr), ..calendars, ) } 一方，コマンドライン側は以下のように指定する。\n$ typst compile --input holidays=holidays2025.json --input months=months2025.json calendar5.typ これで holidays.json や months.json ではなく holidays2025.json や months2025.json を読み込む。 --input オプションで指定しない場合はデフォルトのファイル名を使う。\nコマンドラインで変数を指定する方法については「変数をコマンドライン引数で指定する」で少し詳しく紹介している。\n余談だが 今回も VS Code 上で作業しているのだが，コーディングに関しては GitHub Copilot に大変お世話になっている。 Go のコードに関してはほぼ完璧に働いてくれるのだが， Typst のコードに関しては，どうも TypeScript と混乱してるっぽく，しょっちゅう嘘をついてくれるのが困りものである（笑）\nデータと制御が分離しやすくコードが（比較的）書きやすいというのは Typst の利点だと思う。 これなら業務にも組み込みやすいのではないだろうか。\nブックマーク ブックマークは「Typst に関するブックマーク」にてまとめています。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\nプログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。と思ったら絶版状態らしい（2025-01 現在）。復刊を望む！\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元のデジタル版を購入。 Go で躓きやすい点を解説していくのが最初の動機らしい。「◯◯するには」を調べる際にこの本を調べるといいかも。\nreviewed by Spiegel on 2022-10-26 (powered by PA-APIv5)\nデータのダンプ表示時のフォント指定については「Typst のドキュメント要素」の raw の説明を参照のこと。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\ndatetime を使ってカレンダーを生成するバージョンも置いておく。詳しい説明は割愛するが「月の最終日」は2月以外固定なので，固定のテーブルを作って，グレゴリオ暦の閏年ルールで閏年か否かを判定して2月の最終日を調整している。さして面倒でもなかったか（笑）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "お散歩カメラ 2025-03-01",
      "section": "remark",
      "description": "早春の景色を見に行こう",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/01-osanpo-camera/",
      "published": "2025-03-01T11:46:39+00:00",
      "update": "2025-03-01T11:48:48+00:00",
      "content": "2月も逃げちゃいましたねぇ。 もう3月っスよ。\n雨水（2025-02-18）の頃は雪が積もるくらい寒かったのに，今週に入ってからは晴天続き。 でも明日からまた雨みたいなので，自転車で出かけるなら今日！\n今朝の松江の最低気温は2℃くらいだったけど，最高気温は19℃まで上がってしまった。 完全に服のチョイスを間違えたよ。 ミドルウェアは薄手のものでよかったしグローブも春秋用にすべきだった orz\n久しぶり八雲温泉 八雲温泉というか熊野大社のある八雲町（昔でいう八雲村）は雪が積もりやすい地域で，しばらく避けてたのさ。 まぁでも流石に融けとるやろということで，本当に久しぶりに八雲温泉に出かけてみた。\nその前に午前中に用事を済ませて丸亀製麺で早めの昼食。\n早めの昼食 | Flickr よし！ 出かけようか。 いつもどおり，日吉の切り通し経由。\n今日の日吉の切通し | Flickr んー？ いつもより水量が多いか？\nお昼時に南進するコースだったので，見える景色がちょうど逆光になってキラキラと綺麗なわけですよ。\n早春の意宇川 | Flickr というわけで，早春の景色を眺めならがのんびり移動した。 既に田起こしが始まってる圃場もあったりして，田んぼの土の匂いがする。 まだ啓蟄（2025-03-05）前なのに春の気分だよ。 気温も高かったしね。\n熊野大社に到着。\n熊野大社 | Flickr 写真では微妙だが，こちらも春の気配。 境内は雪が残ってたけどね。\nさっそくお風呂に行こう。 この時点で既に汗まみれだよ。 インナーの替えを持ってきておいてよかった。\n八雲温泉上がりのコーヒー牛乳 | Flickr 木次乳業さん，いつもお世話になっています。\n帰りのお土産に干し柿と切り干し大根を買った。 何故か新聞紙で包んでもらった。 あれか？ 環境に配慮ってやつ？ まぁ新聞紙はなんぼあってもいいですからね（笑）\n松江市内遊覧 さて，どこ行こう。\nとりあえず，松江市内をぶらぶら走ってみよう。 郊外の田んぼ道を中心に遊覧するか。\n\u0026hellip;という感じで走ってたのだが，現時点で既に田起こしが始まってる圃場はあまりないな。 まぁ稲作を止めて放置されている圃場が多いけどね。 日本の一次産業は歪んでるよなぁ。\n途中，JR松江駅のドトールで糖分補給したり。\n糖分補給中 | Flickr 島根県立美術館はまだ雪が残ってるな。\n島根県立美術館はまだ雪が残ってる | Flickr 宍道湖の写真だけ撮って帰るか。\n今日の宍道湖 | Flickr 明日は楽しい月曜日！\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nおたふく手袋 冬用インナー 長袖 ハイネック [保温 吸汗速乾 コンプレッション メンズ] JW-170 ホワイト M おたふく手袋(Otafuku Glove) Tools \u0026amp; Hardware B005SY3LUY (ASIN), 4970687608690 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 主に通勤で使うので白を選択。ダイエットでLサイズがオーバサイズになったのでMサイズで買い直した。着ている間はそれほどの締めつけ感はないし（スポーツ用なので当たり前だが）動きを阻害しない。寒くない。自転車を漕いでいても，いい感じに汗を排出している感じ。\nreviewed by Spiegel on 2024-11-23 (powered by PA-APIv5)\nおたふく手袋 冬用インナー ロングタイツ [保温 吸汗速乾 コンプレッション メンズ] JW-162 ブラック M おたふく手袋(Otafuku Glove) Tools \u0026amp; Hardware B0044W4MYU (ASIN), 4970687608522 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 主に通勤用に使っている。着ている間はそれほどの締めつけ感はないし（スポーツ用なので当たり前だが）動きを阻害しない。寒くない。自転車を漕いでいても，いい感じに汗を排出している感じ。前とじで「社会の窓」は空いてないので注意。\nreviewed by Spiegel on 2023-11-15 (powered by PA-APIv5)\n晴る ヨルシカ (メインアーティスト) Universal Music LLC (Release 2024-01-05) MP3 ダウンロード B0CQS23YMR (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; アニメ「葬送のフリーレン」OP曲。 mora で高解像度版が買える。 YouTube の「歌ってみた」をいくつか聴いてオリジナルを買っておこうかなと。移動中にヘヴィローテーションしてる。\nreviewed by Spiegel on 2025-02-09 (powered by PA-APIv5)\nHELP!! Kobo Kanaeru (メインアーティスト) Universal Music LLC 2036-01-01 (Release 2024-03-28) MP3 ダウンロード B0CYM6BR46 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 約1年前にリリースされた楽曲だが，最近これの MV を紹介している配信を見かけて mora の高解像度版を衝動買いした。ノリがよくて移動中に聞き流すと楽しい曲。歌詞では「何かを指針にして、狂い始める歯車」の部分が好き。\nreviewed by Spiegel on 2025-02-21 (powered by PA-APIv5)\n作業中の BGV (メン限配信以外) 【初3DLIVE】キミの王子様☆青くんのお誕生日ライブ！ゲスト盛沢山！【#⁠火威青生誕祭2025】 - YouTube 【マイクラ】日本最大級の駅舎を持つ「京都駅」をできる限り徹底再現！　超 高難易度【Minecraft】 - YouTube : すっげー！ 【#らでんのラジオ 】第二十五回目らでんのラジオはいつもよりちょっと長いよ【儒烏風亭らでん #ReGLOSS 】 - YouTube 【モンハンワイルズ】最速で狩りにいこうぜ！モンスターハンターワイルズをやってみる！/MHWilds【周防パトラ】 - YouTube 【モンハンワイルズ】初モンハン。酔っ払いです。らでんちゃんが襲来しています【一条莉々華/hololive DEV_IS　ReGLOSS】 - YouTube 【🌃 3月の星空案内】ビッグイベントが目白押し!?と思いきや……？🌟宇宙大好きVTuberが天文現象や星座の情報などをお届け！【星見まどか】 - YouTube "
    },
    {
      "title": "Typst のお勉強を始めた",
      "section": "remark",
      "description": "良くも悪くも「Markdown 以上 LaTeX 未満」かなぁ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/02/typst/",
      "published": "2025-02-27T10:07:40+00:00",
      "update": "2025-03-01T08:55:56+00:00",
      "content": "先週の 2025-02-19 (現地時間) に Typst 0.13 がリリースされたニュースが Bluesky の私の TL に流れてきて「そういやそんなのあったな」と思い出した。\n個人的に思う Typst 最大のメリットはシングルバイナリで提供されていて，それだけで PDF ファイルを生成できること。 というわけで重い腰を上げて調べてみることにした。\nTypst のお勉強 Typst 勉強用に久しぶりに新しいセクションを作った。 いやぁ，やり方をすっかり忘れてたよ（笑）\nTypst を触ってみた感想は，良くも悪くも「Markdown 以上 $\\mathrm{\\LaTeX}$ 未満」。\nたとえば $\\mathrm{\\LaTeX}$ でガチの執筆をしている人には Typst はまだ力不足だと思う。 逆に Markdown で満足している人には Typst は過剰スペックに見えるかもしれない。 あと Typst 0.13 から HTML 形式へのエクスポート機能がサポートされたが，これはドキュメント要素を単純に HTML の要素に置き換えているだけみたいで，今のところスタイルの制御もない。 将来バージョンはどうなるか分からないが，過剰な期待しないほうがいいだろう。 とはいえ既存の CMS と組み合わせれば使い道があるかもしれない。\nあくまで個人の意見だが，ドキュメントの作成・管理でもっとも重要なのは再利用しやすいか否かだと思う。 その点，テンプレートを作りやすくレイアウトとデータの分離がしやすい（多分） Typst は向いていると思う。 何より入力がテキストファイルなのは強い。 さらに Typst フォント周りに気をつければマルチプラットフォームでいける（バイナリ自体はOSおよびアーキテクチャごとに提供されている）。\nところでこれは愚痴なのだが，そろそろ OS ごとに勝手なフォントが入ってる状況はどうにかならないのだろうか。 たとえば Sans Serif なフォントとして Helvetica を使いたいとするじゃん。 macOS には昔からこれが標準で入ってるけど他の OS にはない。 その代わりの代替フォントとして Windows なら Arial， Linux だと Liberation Sans があったりするが，名前が全然違う（デザインも微妙に違うけど）のでフォント指定が煩雑になる。 日本語フォントだともっと酷いよね。\nそりゃあ NOTO フォントを入れるとかすればプラットフォーム間で合わせられるよ。 でも，そういう「インストール」自体がハードルが高いんだってば（自分が，じゃなくて，相手にそういうことをしてもらうのが）。 LibreOffce でもアプリケーション自体はマルチプラットフォーム対応なのに，フォント周りで地味に苦労してるんだよな。\n少なくとも標準フォントに関してはプラットフォーム間で差異がないようにして欲しい。 NOTO フォントでもいいから。\n愚痴はこのくらいにして\u0026hellip;\n既に個人的な書類送付状など定形書式で簡単なものなら Typst → PDF → 紙に印刷 という流れができ始めた。 次は議事録，その次はいよいよ設計書かなぁ。 いずれ勤務先にそういう提案ができるところまで持っていきたいものである。 音声の文字起こしとか生成 AI のおかげでだいぶ楽になってきたし Typst みたいな組版ツールと組み合わせれば面白そうなんだけど。\nまだちゃんと調べてないが Typst には if/else とか for/while とか break/return とかの制御構造があり，更に JSON や YAML や CSV などのデータ・ファイルを読み込む機能もある（プレーンテキストも読める）。 これらの機能を上手く使えばドキュメントのレイアウトやロジックとデータを分離することができそうである。 今後はこの辺の制御を中心に調べる予定。 もう少しゆっくりなペースでね。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\n［改訂第9版］LaTeX美文書作成入門 奥村 晴彦 (著), 黒木 裕介 (著) 技術評論社 2023-12-09 (Release 2023-12-09) 単行本（ソフトカバー） 4297138891 (ASIN), 9784297138899 (EAN), 4297138891 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2023年末に出てるのに気が付かなかった orz 今回は版元で PDF 版を買った。\nreviewed by Spiegel on 2024-04-07 (powered by PA-APIv5)\n"
    },
    {
      "title": "Typst の数式モード",
      "section": "typst",
      "description": "LaTeX 記法とは似て非なる… / フォントの設定 / 立体か斜体か / 番号付けと参照",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/typst/5-math-mode/",
      "published": "2025-02-26T13:34:05+00:00",
      "update": "2025-03-02T12:50:26+00:00",
      "content": "今回は今まで敢えて後回しにしていた数式モード（math mode）1 の話。 パッと見は $\\mathrm{\\LaTeX}$ 記法に似ているのだが色々と違っている。\nLaTeX 記法とは似て非なる\u0026hellip; たとえば $\\mathrm{\\LaTeX}$ 記法では\nエネルギーと質量には $E=mc^2$ の関係がある。 と書けば\nエネルギーと質量には $E=mc^2$ の関係がある。 という感じに組版される。 これをそのまま Typst で組版しようとすると\n$ typst compile math.typ error: unknown variable: mc ┌─ math.typ:1:14 │ 1 │ エネルギーと質量には $E=mc^2$ の関係がある。 │ ^^ │ = hint: if you meant to display multiple letters as is, try adding spaces between each letter: `m c` = hint: or if you meant to display this as text, try placing it in quotes: `\u0026#34;mc\u0026#34;` てな感じで怒られる。 どうも2つ以上の文字の綴りは何らかのシンボルと解釈されるらしい。 たとえば $\\mathrm{\\LaTeX}$ 記法の以下の数式は\n\\[ \\left( \\int_0^\\infty \\frac{\\sin x}{\\sqrt x} dx \\right)^2 = \\sum_{k=0}^\\infty \\frac{(2k)!}{2^{2k}(k!)^2} \\frac{1}{2k+1} = \\prod_{k=1}^\\infty \\frac{4k^2}{4k^2-1} = \\frac{\\pi}{2} \\] 『［改訂第9版］LaTeX美文書作成入門』p.221より equation (STIX2 Math) Typst 記法だと以下のようになる。\n$ (integral_0^infinity (sin x) / sqrt(x) dif x)^2 = sum_(k=0)^infinity (2k)! / (2^(2k) (k!)^2) 1 / (2k+1) = product_(k=1)^(infinity) (4k^2) / (4k^2-1) = pi / 2 $ equation by Typst (STIX2 Math) $\\mathrm{\\LaTeX}$ 記法の { ... } に相当するものが Typst 記法だと ( ... ) になってるのが紛らわしい。 おそらく文脈で判別してるんだろうけど。 あとインライン数式も別行立て数式もいずれも $ ... $ なのも紛らわしい。 こちらは $E=m c^2$ と $ E=m c^2 $ の違い。 数式の前後に空白文字や改行が入ってると別行立て数式と認識するらしい。\nこれは $\\mathrm{\\LaTeX}$ 記法に慣れている人はちょっと大変かもしれない。 Pandoc には $\\mathrm{\\LaTeX}$ 記法 → Typst 記法への変換機能があるそうだが，そもそも Typst を使うような人はわざわざ Pandoc を導入しないと思う。\nフォントの設定 数式モードのフォントを指定する場合は以下のように記述する。\n#show math.equation: set text(font: \u0026#34;New Computer Modern Math\u0026#34;) 既定は New Computer Modern Math。 数式モード用のフォントには通常のフォントファイルは使えないので注意。\nNote that only special OpenType math fonts are suitable for typesetting maths. via Math fonts 試しに Euler フォントで試そうと思ったが，そういやこれってグリフが全部揃ってなかったわ。 STIX2 フォントのほうはこんな感じで上手くいった2。\n#set text(font: ( ( name: \u0026#34;STIX Two Text\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Serif CJK JP\u0026#34; ), lang: \u0026#34;ja\u0026#34;) #show math.equation: set text(font: (\u0026#34;STIX Two Math\u0026#34;)) アルベルト・アインシュタインは1905年に発表した特殊相対性理論を通して以下の関係を導き出した。 $ E = m c^2 \u0026#34;（エネルギーと質量の等価性）\u0026#34; $ 数式表現（STIX2 フォント） ただし，上の例では数式モードに日本語が入った場合に問題が出る。 どうも最初の #set text( ... ) のルール設定が数式モードでは適用されないみたいで\n数式表現（STIX2 フォント）プロパティ という感じで予期しないフォントが埋め込まれてしまった。\nこれを回避するには\n#show math.equation: set text(font: (\u0026#34;New Computer Modern Math\u0026#34;, \u0026#34;NOTO Serif CJK JP\u0026#34;)) などと指定する。 これで New Computer Modern Math ＞ NOTO Serif CJK JP という優先順位でフォントを選択する。\n数式表現（STIX2 フォント）プロパティ ありゃ。 Medium フォントが選択されてる。 なんで？ うーん。 とりあえずこれは置いておこう。\n立体か斜体か 数式の場合は基本的にイタリック体または斜体で記述するのが原則だが，以下の例外がある。\n数字はローマン体にする（$\\mathit{3.14}$ ではなく $3.14$） 複数文字からなる名前はローマン体にする（$sin\\,x$ ではなく $\\sin x$） 単位記号はローマン体にする（$3\\,m$ ではなく $3\\,\\mathrm{m}$） 『［改訂第9版］LaTeX美文書作成入門』p.94より ただ立体（upright）か斜体（slant）3 かの規準は学会等によっても違うようで，たとえば積分等に出てくる dx とかでも斜体の $dx$ とするか立体の $\\mathrm{d}x$ とするか流儀があるらしい。 ちなみに Typst では積分の dx を立体で表現するために dif x と記述する。\n$\\mathrm{\\LaTeX}$ には unicode-math パッケージというのがあって，数式の書体についてはこのパッケージである程度コントロールできる。 詳しくは拙文「数式用フォントで遊ぶ」を参考にどうぞ。 Typst には unicode-math パッケージに相当するものはないっぽい？\nTypst では $\\sin$ などの一般的な演算子（関数）はあらかじめ定義されていて，これらは立体で表示される。\nTypst predefines the operators arccos, arcsin, arctan, arg, cos, cosh, cot, coth, csc, csch, ctg, deg, det, dim, exp, gcd, lcm, hom, id, im, inf, ker, lg, lim, liminf, limsup, ln, log, max, min, mod, Pr, sec, sech, sin, sinc, sinh, sup, tan, tanh, tg and tr. via Text Operator Function – Typst Documentation この一覧にない演算子（関数）は自分で定義できる。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #show math.equation: set text(font: \u0026#34;STIX Two Math\u0026#34;) #let GF = math.op(\u0026#34;GF\u0026#34;) 位数が $q$ である有限体を $GF(q)$ などと表記します。 カスタム演算子（関数） 他に $\\int$ などのシンボルは “Symbols” のページまたは sym の項を参照のこと。 ちなみに emoji も使える。\n#show math.equation: set text(font: \u0026#34;STIX Two Math\u0026#34;) $ sum_(k=0)^infinity #text(red)[#emoji.suit.heart]^k $ 数学ガールの秘密ノート シンボルについては $\\mathrm{\\LaTeX}$ の physica パッケージに近い physica パッケージがあるらしい。\nメートル（$\\mathrm{m}$）などの単位も立体で表記する。 単位等の表現については $\\mathrm{\\LaTeX}$ の siunitx パッケージに近い metro または unify パッケージを使う手がある。 unify のほうが活況？\n\\[ 1\\,\\mathrm{atm} = 1.01325\\,\\mathrm{bar} = 101,325\\,\\mathrm{Pa} \\] \\[ 1\\,\\mathrm{atm} = 1.01325\\,\\mathrm{bar} = 101,325\\,\\mathrm{Pa} \\] MathJax だと泥臭い記述になるのはご容赦（MathJax 用の動く siunitx パッケージはないっぽい）。\n#import \u0026#34;@preview/unify:0.7.1\u0026#34;: qty #show math.equation: set text(font: \u0026#34;STIX Two Math\u0026#34;) $ qty(\u0026#34;1\u0026#34;, \u0026#34;atm\u0026#34;) = qty(\u0026#34;1.01325\u0026#34;, \u0026#34;bar\u0026#34;) = qty(\u0026#34;101,325\u0026#34;, \u0026#34;Pa\u0026#34;) $ 気圧単位の換算 同じような感じになったかな。 単位表記は値と単位の間のアキを調整する必要があるが unify パッケージなら上手いことやってくれているようだ。\n最終手段として，強制的に立体または斜体にする場合は upright または italic 関数を使う。\n#show math.equation: set text(font: \u0026#34;STIX Two Math\u0026#34;) $ upright(\u0026#34;Upright, not Italic\u0026#34;) \\ \u0026#34;normal string\u0026#34; \\ italic(\u0026#34;Italic, not Upright\u0026#34;) \\ bold(\u0026#34;Bold\u0026#34;) \\ italic(bold(\u0026#34;Bold Italic\u0026#34;)) \\ $ 立体と斜体 おー。 ちゃんと（単なる斜体でない）イタリック体になるんだな。\n番号付けと参照 数式の番号付けは equation の設定で行う。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #set math.equation(numbering: \u0026#34;(1)\u0026#34;) #show math.equation: set text(font: \u0026#34;STIX Two Math\u0026#34;) エネルギーと質量には以下の関係がある。 $ E = m c^2 $ 番号付け また数式には以下のように \u0026lt;label_name\u0026gt; でラベルを付けることができ @label_name で参照できる。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #set math.equation(numbering: \u0026#34;(1)\u0026#34;) #show math.equation: set text(font: \u0026#34;STIX Two Math\u0026#34;) エネルギーと質量には@eq.1 の関係がある。 $ E = m c^2 $ \u0026lt;eq.1\u0026gt; ラベルと参照 ラベルはあくまでもマークアップモードでのみ付けることができるみたい。 数式モードの中では付けられなかった。 参照については後日に改めて扱うことにする。\nブックマーク ブックマークは「Typst に関するブックマーク」にてまとめています。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\n［改訂第9版］LaTeX美文書作成入門 奥村 晴彦 (著), 黒木 裕介 (著) 技術評論社 2023-12-09 (Release 2023-12-09) 単行本（ソフトカバー） 4297138891 (ASIN), 9784297138899 (EAN), 4297138891 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2023年末に出てるのに気が付かなかった orz 今回は版元で PDF 版を買った。\nreviewed by Spiegel on 2024-04-07 (powered by PA-APIv5)\n“Math mode” をどう訳すのか悩んだが（英語不得手なもので），「非公式日本語ドキュメント」を見ると「数学」ではなく「数式」となっていたので「数式モード」とした。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTypst のクラウドサービスではフォントアップロードなしに STIX2 フォントが使える。というか TeX Live に収録されている TTF/OTF ファイルは全部使えるっぽい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n厳密にはイタリック体と斜体は異なるのだが（イタリック体にも立体と斜体がある），この記事ではまとめて「斜体」と呼ぶことにする。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Typst 用のテンプレートを使う",
      "section": "typst",
      "description": "Typst Universe / LaTeX jsarticle/jsbook ベースのテンプレート / 履歴書テンプレート / その他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/typst/4-using-typst-templates/",
      "published": "2025-02-24T06:23:33+00:00",
      "update": "2025-03-03T12:02:50+00:00",
      "content": "前回に引き続きページ設定等について調べようと思ったのだが，いいものを見つけてしまった。\nokumuralab/typst-js - Typst template based on LaTeX jsarticle/jsbook Typst について調べていくうちに「思ったより面倒が多いし，独りでフルスクラッチで組むのは不毛じゃないの？」と思い始めていて，使い勝手のよさそうなテンプレートかパッケージを探していたところであった。\nそこで今回は予定を変更して typst-js を導入して簡単な文書を作ってみようと思う。 その上で次回以降から更に Typst の機能について調べていくことにする。\nTypst Universe そのまえに Typst Universe について。\nTypst では Typst Universe でパッケージやテンプレートを収集している。 たとえば「工学系の日本語の学会論文テンプレート」である jaconf-mscs なら\n$ typst init @preview/jaconf-mscs my-project Successfully created new project from @preview/jaconf-mscs:0.1.0 🎉 To start writing, run: \u0026gt; cd my-project \u0026gt; typst watch main.typ という感じに雛形のファイルを生成してくれる。 生成された main.typ の最初の部分をちょっと見てみると\n// MIT No Attribution // Copyright 2024, 2025 Shunsuke Kimura #import \u0026#34;@preview/jaconf-mscs:0.1.0\u0026#34;: jaconf, definition, lemma, theorem, corollary, proof, appendix という記述があり，ここでパッケージをリモートからインポートしている。 続く jaconf, definition, ... はパッケージ内で定義されている関数である。\nこれでテンプレートの導入は大体分かったかな。\nLaTeX jsarticle/jsbook ベースのテンプレート okumuralab/typst-js は『LaTeX美文書作成入門』でおなじみ奥村晴彦さんによる Typst 用のテンプレート。 奥村晴彦さんは $\\mathrm{\\LaTeX}$ 用のドキュメントクラスである jsarticle/jsbook の作者でもあり，日本語組版のノウハウが反映されることが期待できる（実際には typst-js はまだ試行錯誤中とのこと）。 ありがたや 🙇\nokumuralab/typst-js リポジトリにある template/example.typ を見ると\n#import \u0026#34;@preview/js:0.1.0\u0026#34;: * となっていたので Typst Universe に登録されているのかと思ったが typst init しようとしたら怒られてしまった。\n【2025-03-03 追記】\nokumuralab/typst-js は 2025-02-24 時点で Typst Universe に登録されていたらしい。 タッチの差で記事に間に合わなかったか（笑）\n以下のコマンドで雛形を生成できる。\n$ typst init @preview/js js-sample downloading @preview/js:0.1.1 5.2 KiB / 5.2 KiB (100 %) 5.2 KiB/s in 206.47 µs ETA: 0 s Successfully created new project from @preview/js:0.1.1 🎉 To start writing, run: \u0026gt; cd js-sample \u0026gt; typst watch example.typ というわけで template/example.typ の記述を見ながら手動でファイルを作ってみる。 こんな感じ。\n#import \u0026#34;js.typ\u0026#34;: * #show: js.with( lang: \u0026#34;ja\u0026#34;, seriffont: \u0026#34;New Computer Modern\u0026#34;, seriffont-cjk: \u0026#34;BIZ UDMincho\u0026#34;, sansfont: \u0026#34;Liberation Sans\u0026#34;, sansfont-cjk: \u0026#34;BIZ UDGothic\u0026#34;, paper: \u0026#34;a4\u0026#34;, fontsize: 10pt, baselineskip: auto, textwidth: auto, lines-per-page: auto, book: false, cols: 1, non-cjk: \u0026#34;latin-in-cjk\u0026#34;, cjkheight: 0.88, ) #maketitle( title: \u0026#34;Go のエラーハンドリング\u0026#34;, authors: \u0026#34;Spiegel\u0026#34;, abstract: [ Go のエラーハンドリングについて今まで書いた駄文を「全部入り」で本の形にしてみようと思う。 ], keywords: (\u0026#34;golang\u0026#34;, \u0026#34;error\u0026#34;, \u0026#34;programming\u0026#34;), date: \u0026#34;2025年2月24日\u0026#34; ) #outline() #v(1em) = はじめに プログラミングにおいて，正常系は基本的に「一本道」だが，異常系は（予期しないものも含めて）無数にある。 エラーハンドリングは巨大迷路パズルを袋小路から順に塗りつぶして「正解」をあぶり出していく作業に似ていると思う。 下手くそな迷路攻略はただの「作業」だが，*よく考えられた迷路は袋小路の配置も美しい*。 こんなふうに考えるなら，プログラム設計の肝は#ruby[エラー][袋小路]をどう記述するかにかかっている，と言えるだろう。 私が Go のエラーハンドリングについて最初に記事にしたのは2015年のことだが，あれから Go も少しずつ変わっているし，私も当時よりは多少なりと理解が進んだと思うので，今まで書き散らかした駄文を「全部入り」で本の形にしてみようと思う。 文章の元ネタは拙文「Go のエラーハンドリング」より（いつか PDF 化したいと思っている）。 インポートは\n#import \u0026#34;js.typ\u0026#34;: * としてローカルのカレントディレクトリにある js.typ を示すようにした。 使用する関数を列挙しなくてもワイルドカード（*）が使えるんだな。\nなお #v(1em) は縦方向に1文字分の空き行を作る関数。 ちなみに水平方向の空き指定には h 関数を使う。\nフォントの選択については前に書いた「ローカルで Typst 環境を整える」を参照のこと。 Book 形式ではないので book の値は false とした。 ページ内カラム数は1。 non-cjk は Typst で定義されている \u0026quot;latin-in-cjk\u0026quot; とした。 正規表現での指定もできるらしい。 あとはデフォルトのままかな。\n蛇足だが著者は複数記述でき，かつ所属とアドレスも記述できる。 こんな感じ。\nauthors: ((\u0026#34;何山 何某\u0026#34;, \u0026#34;某大\u0026#34;, \u0026#34;username@example.org\u0026#34;), (\u0026#34;何野 何某\u0026#34;, \u0026#34;某大\u0026#34;)) さて，これをコンパイルしてみる。 このときのコマンドは\n$ typst compile --pdf-standard a-2b sample.typ として PDF/A として構成するようにする1。 結果は以下の通り。\nPDF 出力結果 出力した PDF ファイルのプロパティはこんな感じ。\nPDF 出力結果（プロパティ） フォントの埋め込みは問題なし。 日本語のタイトルの文字化けもなし。 形式も PDF/A-2b で構成されてるっぽい。 念のため Windows 環境の Adobe Reader でも開いてみたけど，大丈夫かな。\nPDF 出力結果 よし。 これでOKにしよう。\n履歴書テンプレート もうひとつテンプレートを紹介しておこう。\nNikudanngo/typst-ja-resume-template - Typst履歴書テンプレート Typstで履歴書を書く #Typst - Qiita データとコードの分離が甘い気もするが，組版の仕上がり を見る限り，かなりよく出来ている。 近年は $\\mathrm{\\LaTeX}$ では履歴書しか書いてないので Typst で書けるのならいよいよ $\\mathrm{\\TeX}$ 環境は要らなくなるかなぁ。 フォントファイルだけ何処かに退避させて他は削除してもいいかもしれない。\nその他 日本語組版情報にある「日本語テンプレート」を見ると学会による公式テンプレートが既に幾つか公開されているようだ。 他にはソフトウェア設計書のテンプレートもあるみたいでちょっと気になるところである。\n探せば他にも色々あるだろうが，ぼちぼち探していこう。\nブックマーク ブックマークは「Typst に関するブックマーク」にてまとめています。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\n［改訂第9版］LaTeX美文書作成入門 奥村 晴彦 (著), 黒木 裕介 (著) 技術評論社 2023-12-09 (Release 2023-12-09) 単行本（ソフトカバー） 4297138891 (ASIN), 9784297138899 (EAN), 4297138891 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2023年末に出てるのに気が付かなかった orz 今回は版元で PDF 版を買った。\nreviewed by Spiegel on 2024-04-07 (powered by PA-APIv5)\nPDF/A については拙文「LuaLaTeX で PDF/A を構成する」を参考にどうぞ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Typst のドキュメント要素",
      "section": "typst",
      "description": "コードモードとルール定義 / 見出し / 段落 / 引用 / 打ち込んだ通りに出力する / 箇条書き / 図表",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/typst/3-typst-document-elements-1/",
      "published": "2025-02-23T04:01:15+00:00",
      "update": "2025-03-03T02:25:58+00:00",
      "content": "前回でようやく環境が整ったので Typst のドキュメント構造を見ていこう。\nコードモードとルール定義 Typst では set キーワードで設定ルールを show キーワードで表示ルールを定義する。 前回の記事で言うと文書全体のフォントを指定している\n// for main text #set text(font: ( ( name: \u0026#34;New Computer Modern\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;BIZ UDMincho\u0026#34; )) が（文書全体の）設定ルールを定義している部分である。 文字コードの範囲とフォント名をセットで指定するのは Typst 0.13 からの仕様らしい。 latin-in-cjk はラテン文字の範囲を示す Typst の予約語。 コード範囲の指定に正規表現も使えるそうな。\n同じく前回記事の\n// for headings #show heading: it =\u0026gt; { set text(font: ( ( name: \u0026#34;Liberation Sans\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;BIZ UDGothic\u0026#34; )) it.body } は表示ルールについての記述で，見出し（heading）要素に対して表示時のフォントを指定している。 表示ルール show の中で設定ルール set が使われていることに注目してほしい。 ここでの set は show による定義内でのみ効力がある。\nキーワードの頭に付いている # はコードモードの開始を示している。 他にも $ ... $ で囲まれている部分は数式モード， [ ... ] で囲まれている部分はマークアップモードといった感じにモードが切り替わる。 指定されている部分以外はマークアップモード。 $\\mathrm{\\LaTeX}$ では文書を記述する領域（環境）が明示的に示され，それ以前の部分をプリアンブル（preamble; 前口上）として設定やルールを纏めて記述するが Typst ではそういった区別はなく，コードモードを任意の場所に記述可能で逐次処理される。\nコードモードは基本的に文単位で # を付けるが #{ ... } とブロック単位で指定することもできる。 set や show はコードモードで使えるキーワードである。 コードモードで使えるキーワードについては公式ドキュメントの “Syntax” のページを参照のこと。\ntext はテキストの外観とレイアウトを定義・変更する関数で，ルール設定以外にも頻繁に登場する。 引数で複数のプロパティ値を連想配列で指定する。\n#set text(font: \u0026#34;Noto Sans CJK JP\u0026#34;, size: 14pt, lang: \u0026#34;ja\u0026#34;) 空が#text(fill:blue)[青い] 。 文字の色を変える 見出し ついでなので見出し（heading）の話からしよう。\nマークアップモードで行頭に = を付けると見出しになる。\n#set text(font: \u0026#34;Noto Sans CJK JP\u0026#34;) = 見出し1 == 見出し1.1 === 見出し1.1.1 ==== 見出し1.1.1.1 = 見出し2 フォント指定部分はスルーしてほしい。 = と見出しの文言の間に空白文字を入れるのがポイント。 これをコンパイルすると以下の出力になる。\n見出し (1) = を重ねることで見出しのレベルが深くなるが，レベルの制限は（仕様上は）ないみたい。 レベルが深くなると見た目で判別できなくなるけど。\nheading 関数を使ってコードモードで見出しを表示することもできる。\n#set text(font: \u0026#34;Noto Sans CJK JP\u0026#34;) #outline(title: [目次]) #heading(level:1)[見出し1] #heading(level:2)[見出し1-1] #heading( level:1, outlined: false )[目次に乗らない付録] 見出し (2) outline は目次を出力する関数。\nコードモードで見出しを書くメリットはあまりないと思うけど，上のように特定の見出しを目次に含めないとかいった制御が必要な場合があるかもしれない。\n見出し番号のフォーマットは set キーワードでルールを定義するのがよい。\n#set text(font: \u0026#34;Noto Sans CJK JP\u0026#34;) #set heading(numbering: \u0026#34;1.1\u0026#34;) = 見出し1 == 見出し1.1 === 見出し1.1.1 == 見出し1.2 = 見出し2 == 見出し2.1 見出し (3) numbering の表現はかなり強力で\n#set text(font: \u0026#34;Noto Sans CJK JP\u0026#34;) #set heading(numbering: \u0026#34;ア.\u0026#34;) = 見出し1 = 見出し2 #let unary(.., last) = \u0026#34;†\u0026#34; * last #set heading(numbering: unary) #counter(heading).update(0) //見出しカウンタのリセット = 付録1 = 付録2 見出し (4) みたいなこともできる。\nCounting symbols are 1, a, A, i, I, α, Α, 一, 壹, あ, い, ア, イ, א, 가, ㄱ, *, ١, ۱, १, ১, ক, ①, and ⓵. They are replaced by the number in the sequence, preserving the original case.\nThe * character means that symbols should be used to count, in the order of *, †, ‡, §, ¶, ‖. If there are more than six items, the number is represented using repeated symbols.\nvia Numbering Function – Typst Documentation ちなみに counter は関数ではなく型。 heading 関数を counter 型にキャストして update メソッドを呼び出すイメージか？\n段落 マークアップモードでは，連続したひとかたまりの文字列を段落としてあつかう。 改行は無視される。 段落を改めるには空行を挟む。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;) 「何人ものニュートンがいた（There were several Newtons）」 と言ったのは，科学史家ハイルブロンである．同様にコーヘンは 「ニュートンはつねに二つの貌を持っていた （Newton was always ambivalent）」と語っている． 近代物理学史上でもっとも傑出しもっとも影響の大きな人物が ニュートンであることは，誰しも頷くことであろう． しかしハイルブロンやコーヘンの言うように， ニュートンは様々な，ときには相矛盾した顔を持ち， その影響もまた時代とともに大きく変っていった． 段落 (1) 〈山本義隆『熱学思想の史的展開』（現代数学社，1987年）より〉 この辺は $\\mathrm{\\LaTeX}$ や Markdown と同じなので馴染みがあるだろう。\n段落内で強制的に改行したい場合は行末に \\ を付ける（または #linebreak() 関数を使う）。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;) 近代物理学史上でもっとも傑出しもっとも影響の大きな人物が ニュートンであることは，誰しも頷くことであろう． \\ しかしハイルブロンやコーヘンの言うように， ニュートンは様々な，ときには相矛盾した顔を持ち， その影響もまた時代とともに大きく変っていった． 段落 (2) par 関数を使ってコードモードで段落を表示することもできる。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #par(justify: false)[ 「何人ものニュートンがいた（There were several Newtons）」 と言ったのは，科学史家ハイルブロンである．同様にコーヘンは 「ニュートンはつねに二つの貌を持っていた （Newton was always ambivalent）」と語っている． ] #par(justify: true)[ 「何人ものニュートンがいた（There were several Newtons）」 と言ったのは，科学史家ハイルブロンである．同様にコーヘンは 「ニュートンはつねに二つの貌を持っていた （Newton was always ambivalent）」と語っている． ] 段落 (3) justify 指定の有無でレイアウトがどう変わるか見て欲しい。\n実際にはコードモードで個別に指定するより set を使って段落の設定ルールを定義することのほうが多いだろう。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #set par( first-line-indent: ( amount: 1em, all: true, ), leading: 0.9em, spacing: 0.9em, justify: true, ) 「何人ものニュートンがいた（There were several Newtons）」 と言ったのは，科学史家ハイルブロンである．同様にコーヘンは 「ニュートンはつねに二つの貌を持っていた （Newton was always ambivalent）」と語っている． 近代物理学史上でもっとも傑出しもっとも影響の大きな人物が ニュートンであることは，誰しも頷くことであろう． しかしハイルブロンやコーヘンの言うように， ニュートンは様々な，ときには相矛盾した顔を持ち， その影響もまた時代とともに大きく変っていった． 段落 (4) Typst の以前のバージョンでは最初の段落の最初の文字の字下げが出来ない問題があったが，バージョン 0.13 から first-line-indent の all プロパティを true にすることで字下げできるようになった。 めでたい！\n【字下げが効かない問題は解消したため以下の記述は obsolete となった】\n上の例で段落の最初の文字を字下げする設定にしてみたのだが，どうも最初の段落だけ字下げが効かないようだ。 欧文では最初の段落は字下げしないのが主流とかいう話もあるらしく，バグじゃなくて意図的な仕様じゃないかと言われている。 一応回避策はあるそうなのだが，副作用もあるみたいだし，積極的に使いたい方法ではないかなぁ。 オンライン・テキストに慣れてしまうと字下げ云々はあまり気にならなくなるけど，書籍出版や論文を書く人など決められた書式で書く人にとっては問題だろう。\n引用 引用（quote）の表現はコードモードのみ対応しているようだ。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) 引用文： #quote( block: true, attribution: [山本義隆『熱学思想の史的展開』（現代数学社，1987年）] )[ #quote(block: false)[何人ものニュートンがいた（There were several Newtons）] と言ったのは，科学史家ハイルブロンである．同様にコーヘンは #quote(block: false)[ニュートンはつねに二つの貌を持っていた （Newton was always ambivalent）]と語っている． 近代物理学史上でもっとも傑出しもっとも影響の大きな人物が ニュートンであることは，誰しも頷くことであろう． しかしハイルブロンやコーヘンの言うように， ニュートンは様々な，ときには相矛盾した顔を持ち， その影響もまた時代とともに大きく変っていった． ] 引用文 インラインの quote は言語によって括弧を変えてくれるらしいのだが，日本語の「 \u0026hellip; 」には対応していない模様。 残念。\n打ち込んだ通りに出力する $\\mathrm{\\LaTeX}$ で言うところの verbatim 環境（または listings パッケージ）， Markdown で言うところのコードフェンスかな。 マークアップモードでの書式は Markdown と同じ。\n#show raw: body =\u0026gt; { set text(font: ( ( name: \u0026#34;Inconsolata\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Sans CJK JP\u0026#34; )) body } ```go package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) } ``` 打ち込んだ通りに出力する (1) おー。 ちゃんとフォントも指定できた。\n一応 raw 関数を使った記述もできるけど実用的じゃないかな。\n#raw(\u0026#34;package main\\n\\nimport \\\u0026#34;fmt\\\u0026#34;\\n\\nfunc main() {\\n fmt.Println(\\\u0026#34;Hello, 世界\\\u0026#34;)\\n}\u0026#34;, block: true, lang: \u0026#34;go\u0026#34;) raw はインラインで使うと面白い。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #show raw: body =\u0026gt; { set text(font: ( ( name: \u0026#34;Inconsolata\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Sans CJK JP\u0026#34; )) body } Go 言語では最初に ```go package main``` と指定する。 Go 言語では最初に #raw(\u0026#34;package main\u0026#34;, lang: \u0026#34;go\u0026#34;) と指定する。 打ち込んだ通りに出力する (2) こんな感じにインラインでも syntax highlight が効く。\n箇条書き マークアップモードでは + および - で箇条書きを表現できる。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) + 番号付き箇条書き1 + 番号付き箇条書き1-1 + 番号付き箇条書き1-2 + 番号付き箇条書き2 - 番号なし箇条書き2-1 - 番号なし箇条書き2-2 - 番号なし箇条書き1 + 番号付き箇条書き1-1 + 番号付き箇条書き1-2 - 番号なし箇条書き2 - 番号なし箇条書き2-1 - 番号なし箇条書き2-2 5. 番号付き箇条書き5 (番号指定) + 番号付き箇条書き6 箇条書き (1) またはコードモードで enum または list 関数を使って\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #enum( numbering: \u0026#34;①\u0026#34;, enum.item[番号付き箇条書き1 #enum(numbering: \u0026#34;ア)\u0026#34;)[番号付き箇条書き1-1][番号付き箇条書き1-2] ], enum.item[番号付き箇条書き2], ) #list( marker: [‣], list.item[番号なし箇条書き1 #list(marker: [--])[番号なし箇条書き1-1][番号なし箇条書き1-2] ], list.item[番号なし箇条書き2], ) 箇条書き (2) てな感じに記述できる。\n箇条書きの番号やシンボルは set であらかじめルールを設定しておくのがいいだろう。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #set enum(numbering: \u0026#34;①.ア\u0026#34;) #set list(marker: ([‣], [--])) + 番号付き箇条書き1 + 番号付き箇条書き1-1 + 番号付き箇条書き1-2 + 番号付き箇条書き2 - 番号なし箇条書き1 - 番号なし箇条書き1-1 - 番号なし箇条書き1-2 - 番号なし箇条書き2 箇条書き (3) 図表 表（table）に関してはコードモードによる記述のみ提供されている。 こんな感じ。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #table( columns: (auto, auto, auto), align: (right, center, left), table.header([*日付*], [*曜日*], [*内容*]), [2025年5月3日], [土], [憲法記念日], [2025年5月4日], [日], [みどりの日], [2025年5月5日], [月], [こどもの日], [2025年5月6日], [火], [休日], ) 表 (1) table を figure で囲むことでキャプションを付けることができる。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #figure( table( columns: (auto, auto, auto), align: (right, center, left), table.header([*日付*], [*曜日*], [*内容*]), [2025年5月3日], [土], [憲法記念日], [2025年5月4日], [日], [みどりの日], [2025年5月5日], [月], [こどもの日], [2025年5月6日], [火], [休日], ), caption: [2025年5月の祝日・休日], ) \u0026lt;holiday\u0026gt; @holiday は国立天文台で公開されている暦データから抽出したもの。詳しくは拙文「#link(\u0026#34;https://text.baldanders.info/remark/2019/05/google-ephemeris/\u0026#34;)[カレンダーに祝日を入れたいなら国立天文台へ行けばいいじゃない]」を参照のこと。 表 (2) 表が中央寄せになった。 \u0026lt;holiday\u0026gt; および @holiday は参照構造を表すもの。 link 関数を含む参照については後日に改めて扱うことにする。\nキャプションを表の上側に表示させることもできる。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #figure( table( columns: (auto, auto, auto), align: (right, center, left), table.header([*日付*], [*曜日*], [*内容*]), [2025年5月3日], [土], [憲法記念日], [2025年5月4日], [日], [みどりの日], [2025年5月5日], [月], [こどもの日], [2025年5月6日], [火], [休日], ), caption: figure.caption( position: top, [2025年5月の祝日・休日] ), ) 表 (3) あるいは最初からルール化してしまうか。\n#show figure.where( kind: table ): set figure.caption(position: top) 表に関してはかなり複雑な表現が可能なようだ。 公式ドキュメントの “Table guide” も参考にどうぞ。\n図に関しては Typst の機能を使って作画もできるみたいだけど，今回は image 関数を使って既存の画像ファイルを埋め込んでみた。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #figure( image(\u0026#34;lake-shinjiko.jpg\u0026#34;, width: 60%), caption: \u0026#34;チャリで来た\u0026#34;, ) 図 これも figure 関数で囲んでいる。\nデータフォーマットとしては \u0026quot;png\u0026quot;, \u0026quot;jpg\u0026quot;, \u0026quot;gif\u0026quot;, \u0026quot;svg\u0026quot; のみ対応しているようだ。 特に format を指定しなくても自動で認識してくれるらしい。 個人的には（$\\mathrm{\\LaTeX}$ からの移行を考えるなら） EPS や PDF も対応して欲しいところではある。\n\u0026hellip;これでよく使う文書要素に関しては一通り調べたかな。 今回はここまで。\nブックマーク ブックマークは「Typst に関するブックマーク」へ移動しました。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\n［改訂第9版］LaTeX美文書作成入門 奥村 晴彦 (著), 黒木 裕介 (著) 技術評論社 2023-12-09 (Release 2023-12-09) 単行本（ソフトカバー） 4297138891 (ASIN), 9784297138899 (EAN), 4297138891 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2023年末に出てるのに気が付かなかった orz 今回は版元で PDF 版を買った。\nreviewed by Spiegel on 2024-04-07 (powered by PA-APIv5)\n熱学思想の史的展開１　──熱とエントロピー (ちくま学芸文庫) 山本義隆 (著) 筑摩書房 2008-12-10 (Release 2017-05-05) Kindle版 B071CWZ2NM (ASIN) 1987年に現代数学社から出版された同タイトルの本の再販かな？ 筑摩版では三分冊になっている。熱力学やエントロピーについて学ぶのであれば理解の助けになるだろう。\nreviewed by Spiegel on 2025-02-23 (powered by PA-APIv5)\n"
    },
    {
      "title": "ローカルで Typst 環境を整える",
      "section": "typst",
      "description": "ローカルマシンへの環境構築と日本語フォントの指定について試してみた。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/typst/2-setup-typst-in-local-machine/",
      "published": "2025-02-21T09:58:37+00:00",
      "update": "2025-02-26T13:43:56+00:00",
      "content": "さっそくチュートリアルを見ながら Typst を触っていこうと思ったのだが，ちょっと動かしてみたところ，クラウドサービスの環境では日本語がショボすぎて先へ進める気にならないので，ローカルに環境を作ってしまうことにした。\n【2025-02-22 追記】\n前回の記事に追記して，クラウドサービスの環境で日本語フォントが指定できることを確認した。 改めてクラウドサービスの環境で使えるフォントをよく見てみたが TeX Live に収録されている TTF/OTF フォントは全て使えるようだ。 原ノ味フォントも使える。\nOS にバンドルされているフォントは OS の種類やバージョンによって異なるため，複数人で異なるプラットフォームでドキュメントを作成する場合はフォントを合わせるのに苦労する。 書籍出版とかではなく文字のデザインそのものに拘りがないのなら，クラウドサービスを使った協働作業にするとか Docker 等の仮想環境を使うなど，環境の方を合わせてしまったほうがいいかもしれない。 今回は私の個人的な作業なので好き勝手絶頂にやるけど（笑）\n今回の環境は以下の通り：\nOS は Ubuntu 24.10 Typst は Snap からインストール VS Code 用の拡張機能 Tinymist Typst を導入する1 動作確認しておこう。\n$ typst --version typst 0.13.0 (8dce676d) $ typst --help Typst 0.13.0 (8dce676d) Usage: typst [OPTIONS] \u0026lt;COMMAND\u0026gt; Commands: compile Compiles an input file into a supported output format [aliases: c] watch Watches an input file and recompiles on changes [aliases: w] init Initializes a new project from a template query Processes an input file to extract provided metadata fonts Lists all discovered fonts in system and custom font paths help Print this message or the help of the given subcommand(s) Options: --color \u0026lt;COLOR\u0026gt; Whether to use color. When set to `auto` if the terminal to supports it [default: auto] [possible values: auto, always, never] --cert \u0026lt;CERT\u0026gt; Path to a custom CA certificate to use when making network requests [env: TYPST_CERT=] -h, --help Print help -V, --version Print version Resources: Tutorial: https://typst.app/docs/tutorial/ Reference documentation: https://typst.app/docs/reference/ Templates \u0026amp; Packages: https://typst.app/universe/ Forum for questions: https://forum.typst.app/ おっ。 typst fonts コマンドで利用可能なフォントの一覧が出るのか。 試してみよう。\n$ typst fonts | grep Computer New Computer Modern New Computer Modern Math $ typst fonts | grep \u0026#34;CJK JP\u0026#34; Noto Sans CJK JP Noto Sans Mono CJK JP Noto Serif CJK JP $ typst fonts | grep Inconsolata Inconsolata ふむむ。 Ubuntu に最初から入ってるフォントは使えるみたいだな。 Inconsolata フォントはコードを表示するために後から入れたフォント。 これもちゃんと使えるようだ。 New Computer Modern フォントは OS には入ってない筈だけど (fc-list コマンドで確認した) Typst 側で持ってるフォントなのかな？\n【2025-02-26 追記】\n公式ドキュメントによると Libertinus Serif, New Computer Modern, New Computer Modern Math, DejaVu Sans Mono は Typst 内に埋め込まれているフォントらしい。 同名のフォントが被ってる場合は --font-paths で指定したディレクトリにあるフォント ＞ システムフォント ＞ Typst 内に埋め込まれたフォント の優先順位で選択されるとのこと。\nちなみにコマンドラインの --font-paths オプションの代わりに環境変数 TYPST_FONT_PATHS でディレクトリを指定することもできる。 TeX Live をインストールしている人は TYPST_FONT_PATHS でフォントファイルが入っているディレクトリを指定するのがいいかもしれない。\nこの状態で簡単な文章を組版してみよう。 入力文書は前回と同じ。\n= アルベルト・アインシュタインについて アルベルト・アインシュタインは1879年3月14日，ドイツ生まれの理論物理学者です。 彼による革命的な3つの論文「光電効果の理論」「ブラウン運動の理論」「特殊相対性理論」が発表された1905年は「奇跡の年」と呼ばれています。 これを sample-1.typ ファイルに保存して以下のように typst compile する2。\n$ typst compile sample-1.typ 組版結果は以下の通り：\n組版結果 (1) フォントは以下のようになっていた。\n組版結果 (1) FirgeNerd ？ そんなもん入れたっけ？ いやこれ OS に最初っから入ってたやつだな。 てか，入ってるのか。 凄いな Ubuntu。 勘違い。 このフォントは自分で入れてたわ。 よく分からないが，フォントリストから日本語コードが入ってるフォントを（アルファベット順で）探して割り当てたって感じ？\nTypst では #set キーワードとそれに続く関数実行により文書スタイルを設定できる。 フォントの場合は以下のように設定する。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;) = アルベルト・アインシュタインについて アルベルト・アインシュタインは1879年3月14日，ドイツ生まれの理論物理学者です。 彼による革命的な3つの論文「光電効果の理論」「ブラウン運動の理論」「特殊相対性理論」が発表された1905年は「奇跡の年」と呼ばれています。 この場合の組版結果は以下の通り：\n組版結果 (2) 組版結果 (2) Typst 0.13 ではラテン文字を別のフォントに割り当てられるようになった。 こんな感じに指定するらしい。\n// for main text #set text(font: ( ( name: \u0026#34;New Computer Modern\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Serif CJK JP\u0026#34; )) = アルベルト・アインシュタインについて アルベルト・アインシュタインは1879年3月14日，ドイツ生まれの理論物理学者です。 彼による革命的な3つの論文「光電効果の理論」「ブラウン運動の理論」「特殊相対性理論」が発表された1905年は「奇跡の年」と呼ばれています。 組版結果は以下の通り：\n組版結果 (3) 組版結果 (2) パッと見では分かりにくいだろうけど，数字部分が New Computer Modern フォントに変わっている。\n見出しの書体が明朝体のままなのは面白くないので，これをゴシック体に変えたい。 色々と調べてみると以下のようにするのがいいらしい。\n// for main text #set text(font: ( ( name: \u0026#34;New Computer Modern\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Serif CJK JP\u0026#34; )) // for headings #let heading_font(body) = { // heading_font 関数を定義 set text(font: ( ( name: \u0026#34;Noto Sans\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Sans CJK JP\u0026#34; )) body } #show heading: heading_font // heading_font を適用する = アルベルト・アインシュタインについて アルベルト・アインシュタインは1879年3月14日，ドイツ生まれの理論物理学者です。 彼による革命的な3つの論文「光電効果の理論」「ブラウン運動の理論」「特殊相対性理論」が発表された1905年は「奇跡の年」と呼ばれています。 まず #let キーワードを使って body のフォントを変更する heading_font 関数を定義し，次に #show キーワードを使って見出し（heading）要素の表示時の処理として heading_font 関数を適用する，という流れである。 見出し要素に直接フォントを指定できれば簡単だったろうに，それはできないみたい。\n組版結果は以下の通り：\n組版結果 (4) 組版結果 (4) よしよし。\n別の書き方として\n// for main text #set text(font: ( ( name: \u0026#34;New Computer Modern\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Serif CJK JP\u0026#34; )) // for headings #show heading: it =\u0026gt; { set text(font: ( ( name: \u0026#34;Noto Sans\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Sans CJK JP\u0026#34; )) it.body } = アルベルト・アインシュタインについて アルベルト・アインシュタインは1879年3月14日，ドイツ生まれの理論物理学者です。 彼による革命的な3つの論文「光電効果の理論」「ブラウン運動の理論」「特殊相対性理論」が発表された1905年は「奇跡の年」と呼ばれています。 という書き方もある。 やってることは同じ。 フォントを変更する処理を無名関数として定義しているだけである。\nところで，最近は日本語フォントとしてモリサワ BIZ UD 明朝/ゴシックがお気に入りである。 このブログの Web フォントとしても使っている。\nモリサワ BIZ UD 明朝/ゴシック Web フォント Typst でもこれを日本語フォントとして使いたい。 また見出しで使う欧文フォントには Helvetica を使いたい。 モリサワ BIZ UD フォントは Ubuntu にはないため，手動でインストールする。\nMorisawa BIZ UDMincho Morisawa BIZ UDGothic ダウンロードした TTF ファイルを /usr/local/share/fonts/ ディレクトリに入れる。 fc-cache -fv コマンドでフォントキャッシュを更新するのを忘れずに。\n$ fc-cache -fv $ fc-list | grep \u0026#34;BIZ UD\u0026#34; /usr/local/share/fonts/BIZUDMincho-Bold.ttf: BIZ UD明朝,BIZ UDMincho:style=Bold /usr/local/share/fonts/BIZUDPMincho-Bold.ttf: BIZ UDP明朝,BIZ UDPMincho:style=Bold /usr/local/share/fonts/BIZUDPGothic-Regular.ttf: BIZ UDPゴシック,BIZ UDPGothic:style=Regular /usr/local/share/fonts/BIZUDPGothic-Bold.ttf: BIZ UDPゴシック,BIZ UDPGothic:style=Bold /usr/local/share/fonts/BIZUDPMincho-Regular.ttf: BIZ UDP明朝,BIZ UDPMincho:style=Regular /usr/local/share/fonts/BIZUDMincho-Regular.ttf: BIZ UD明朝,BIZ UDMincho:style=Regular /usr/local/share/fonts/BIZUDGothic-Bold.ttf: BIZ UDゴシック,BIZ UDGothic:style=Bold /usr/local/share/fonts/BIZUDGothic-Regular.ttf: BIZ UDゴシック,BIZ UDGothic:style=Regular Ubuntu では Helvetica の代替として Liberation Sans が最初から入っているのでこれを使う3。\nこれでフォント指定の最終形を以下とする。\n// for main text #set text(font: ( ( name: \u0026#34;New Computer Modern\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;BIZ UDMincho\u0026#34; )) // for headings #show heading: it =\u0026gt; { set text(font: ( ( name: \u0026#34;Liberation Sans\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;BIZ UDGothic\u0026#34; )) it.body } = Albert Einsteinについて Albert Einsteinは1879年3月14日，ドイツ生まれの理論物理学者です。 彼による革命的な3つの論文「光電効果の理論」「ブラウン運動の理論」「特殊相対性理論」が発表された1905年は「奇跡の年」と呼ばれています。 フォント指定の効果を確認するために人名部分を英字に置き換えてみた。\n組版結果は以下の通り：\n組版結果 (5) 組版結果 (5) んー。 やっぱモリサワ BIZ UD フォントは見やすくていいねぇ。\nというわけで，ローカルマシンへの環境構築と日本語フォントの指定について試してみた。 フォント指定は要素ごとに指定する必要があり，ちょっと面倒くさい感じだな。 数式やコードなどのフォント指定については後日ということで。\nブックマーク ブックマークは「Typst に関するブックマーク」へ移動しました。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\n［改訂第9版］LaTeX美文書作成入門 奥村 晴彦 (著), 黒木 裕介 (著) 技術評論社 2023-12-09 (Release 2023-12-09) 単行本（ソフトカバー） 4297138891 (ASIN), 9784297138899 (EAN), 4297138891 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2023年末に出てるのに気が付かなかった orz 今回は版元で PDF 版を買った。\nreviewed by Spiegel on 2024-04-07 (powered by PA-APIv5)\nググってみると VS Code 用の拡張機能として Typst LSP を紹介しているところが多かったが，2025-02-21 現在では Typst LSP はなくなっていて Tinymist Typst に統合されているらしい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nVS Code 用の拡張機能 Tinymist Typst を導入している場合はコマンドパレットから “Typst: Exports the Opened File as PDF” を起動することで typst compile できる。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nWindows では Helvetica の代替として Arial フォントがよく使われる。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    }
  ]
}
