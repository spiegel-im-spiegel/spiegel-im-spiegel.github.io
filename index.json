{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "クラウドストレージのアカウント情報がクラウドストレージにある罠",
      "section": "remark",
      "description": "真夏のホラー",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/midsummer-horror/",
      "published": "2022-07-29T11:41:52+00:00",
      "update": "2022-07-29T12:11:51+00:00",
      "content": "久しぶりにぞんぞがさばる（出雲弁）記事を見た。\nある「パソコンの大先生」の死 – WirelessWire News 今回のお題 今回の条件は割とありがちではないだろうか。\nWindows パソコン1台のみ パスワード管理ツールあり ただし Windows 専用プロプライエタリ・ツール パスワード情報はクラウド・ストレージにバックアップあり ローカル NAS はなし この唯一のパソコンが故障して復旧不能となった場合にどうなるかという話。\nしかし、そのフリーウェアはWindows用のプロプライエタリソフトウエアのため、ワタシのスマホではデータを閲覧できません。それに気付いたのは、スマホで新しいPCを購入する手続きを進め、最後にクレジットカードの会員向けサービスのパスワードを聞かれ、途方に暮れたときです。これでは新しいPCが調達できないじゃないか！ ある「パソコンの大先生」の死より ぞんぞがさばる！\nNAS とクラウドストレージ 最近は「クラウドストレージがあるならローカルの NAS とかいらなくね？」という向きも多いようだ。\nでもクラウドストレージにアクセスするためにはアカウント情報が必要で，更に多要素認証を使うのであればその分だけ認証手段を確保しておく必要がある。 それをどこに保持しておくか。\n個人的にはローカルに NAS を置いておくのはまだ意味があると思う。 もっと言えばローカル NAS とクラウドストレージを連携できるならなおよし。\n秋 NAS は俺に喰わせろ！ 私もクラウドストレージは機密保持の観点からはあまり信用してない。 個人向けのクラウドストレージ・サービスの多くは他者と情報共有しやすいよう設計されているため「うっかり漏洩」してしまう可能性も排除できない。 法人向けならユーザごとに細かく権限を設定できるので逆に安心なんだけどね。\nそういう意味じゃ信用してないのはクラウドサービスではなくて自分自身か（笑）\nまぁ，クラウドストレージは「バックアップ用」と割り切って sensitive な情報については置かないようにするか暗号化するのがいいんだろうね。\nマルチプラットフォームは重要 今回のもうひとつのポイントはパスワード管理ツールが Windows 専用だったことだろう。 プロプライエタリなツールであることは今回のケースでは問題ではない。\n最近はセキュリティ企業も独自のパスワード管理ツールを出しているが，これがもし特定 OS 専用なら考え直したほうがいいかもしれない（実際のところは知らない）。\n私は昔から KeePass 派なのだが，最近は派生ツールである KeePassXC および Android 版の Keepass2Android を愛用している。\nKeePassXC Password Manager GitHub - keepassxreboot/keepassxc: KeePassXC is a cross-platform community-driven port of the Windows application “Keepass Password Safe”. Keepass2Android Password Safe - Apps on Google Play パスワードを紙に書くのは案外悪くない （特に同居人が居る場合は）管理に気を使う必要はあるが，パスワード情報を紙に書き出すというのは案外悪くないと思っている。 もちろん全て書き出す必要はなくて，いざというときに最低限必要な情報のみに厳選する。\n私の自宅環境はパソコン（Linux 機），NAS，スマホの3機構成でこれらが同時に使えなくなる事態は真面目に考えてなかったのだが，今回の記事を読んで，考えを改めた。\n起こる可能性のあることは，いつか実際に起こる（If it can happen, it will happen） マーフィーの法則より 作業記録は大事 上述のようにパスワードを紙に書き出すとしても，どのアカウント情報を書き出すべきかはよくよく検討しないといけない。 その一環としてスマホやパソコンのセットアップ時の作業記録を録っておくことをおすすめする。\n以下はスマホの機種変更した際の作業記録の概要。\nついカッとなって機種変した，反省はしない それを見れば必要な情報が分かるはず。 Android 機のセットアップには Google アカウントが絶対に必要とか。\n今回の記事を書かれた yomoyomo さんにはご愁傷さまとしか言いようがないが，私としてはこれを好機として自宅環境を見直すとしようか。\n参考 Synology NASキット 2ベイ DS220j クアッドコアCPU 512MBメモリ搭載 ライトユーザー向け 国内正規代理店品 電話サポート対応品 DiskStation Synology (Release 2020-03-12) Personal Computers B0855LMP81 (ASIN), 4537694279369 (EAN), 0846504003440 (EAN), 846504003440 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ドスパラで HDD 2基と3点セットで購入。家庭内 LAN で使うなら必要十分な性能。各種クラウド・ストレージ・サービスと連携可能。 Tailscale を含む各種 VPN と組み合わせることも可能。\nreviewed by Spiegel on 2021-10-26 (powered by PA-APIv5)\nWestern Digital ウエスタンデジタル 内蔵 HDD WD Red Plus NAS RAID (CMR) 3.5インチ WD40EFZX-EC 【国内正規代理店品】 ウエスタンデジタル(Western Digital) (Release 2021-02-05) Personal Computers B08V8LNR2H (ASIN), 4988755057738 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Synology DS220j と併せて購入。\nreviewed by Spiegel on 2021-10-26 (powered by PA-APIv5)\n"
    },
    {
      "title": "Blockchain/Bitcoin は何だったのか",
      "section": "remark",
      "description": "技術で社会は変えられない",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/blockchain/",
      "published": "2022-07-25T12:56:45+00:00",
      "update": "2022-07-28T10:29:23+00:00",
      "content": "Twitter で小耳に挟んだ話なのだが，某出版社から出る（出た）いわゆる Web3 本がかなり愉快な内容らしく，回収するとか何とか。 勿体ない。 論文とかなら出し直しもやむなしだろうが，その程度の本なら回収までしなくても「緊急改訂」とかでいいと思うのだが。 それも「歴史」だよ。 本を書いた方は後年黒歴史として悶絶してしまうかもしれないが（笑）\n私自身は NFT にも Web3 にも大して興味はないが，折角なので Blockchain/Bitcoin について色々と放言しておこう。 書籍出版で許されるんだから辺境のブログで書くくらい構わんじゃろ。\nこの記事については，いつも以上に内容の正しさを保証しません。 マジに受け取らないでね（予防線） 脱中央集権「社会」など来ない 「黄色矮星人は2人いれば力比べを始め，3人いれば派閥を作る1」\nBlockchain 技術を含むプロダクトについて語られるとき，必ずと言っていいほどよく出てくるフレーズが「非中央集権」あるいは「脱中央集権」である。\nしかし，考えてみてほしい。 そもそも「インターネット」は脱中央集権的な思想で設計されたものなのだ。\nもし今日のインターネットが実際にこの理論に近い状態であれば，メッシュネットワークは余計ものだったろう。 だがインターネットが当初の学術目的から踏み出して現在のような誰でも使える商業サービスになってから20年以上が経つうちに，そうした蓄積伝送の原理が果たす役割は，一貫して縮小していった。\nこの間，ネットワークに加わる新たなノードの圧倒的多数はISPを介してネットに接続する家庭や企業のコンピューターだった。 ISPの接続モデルでは，利用者のコンピューターはデータの中継はしない。 それはネットワークの端末，つまりデータの送受信だけを，常にISPのコンピューターを介して行うターミナル・ノードだ。 言い換えれば，インターネットの爆発的な成長はネットワーク地図に行き止まりのルートを増やしただけで，新たなルートを加えることはほとんどなかった。\nそしてISPなど大量の情報ルートを持つ者は，彼らがルートを提供している何百万ものノードを支配下におくこととなった。 これらのノードは，もしISPがダウンしたり，ネットから遮断されたりすると，その障害を回避する方法がない。 ISPはインターネットが停止しないようにするどころか，実効上は停止スイッチになってしまった。\n介入されないもうひとつのウェブより そして Blockchain/Bitcoin もインターネットと同じ末路を辿る。\nBitcoin でスーパーの醤油は買えない Bitcoin がシステムとして成立する条件は\n不特定多数が参加 全てのユーザが唯一の「台帳」の完全なコピーを持つ ユーザ同士の peer な接続 PoW への平等参加 あたりだろう。 これをぶち壊したのが「交換所」の存在である。\n最初の頃，私は Bitcoin を「デフレ型補完通貨」と定義していた。 補完通貨はゼロ年代に「地域通貨」と呼ばれていたことがある。 流行ったよねぇ，地域通貨（笑）\nまた Bitcoin は最終的な「総量」が決まっているため，必然的に「デフレ型」となる2。\nしかし実際には Bitcoin 自体は補完通貨にならなかった。 昔は Bitcoin で決済できる小売店とかあったと聞くが，今はそんなお店はないだろう。\nBitcoin を日常生活で使うためには法定通貨に「両替」する必要がある。 故に「交換所」の登場は必然だった。\nその結果なにが起こったかというと，交換所を利用する多くのユーザは上述の4つの条件を満たす player ではなくなってしまったのだ。 これは Bitcoin システム全体のアクターが hierarchical に構造化したことを意味する。\nインターネットが商業化された際に多くのユーザが ISP にぶら下がる「端末」になり下がり，インターネットに「参加」する player ではなくなった状態とまさに同じである。\nそれは「通貨」ではない さらに言えば，2018年の G20 ブエノスアイレス・サミットの首脳宣言で「暗号資産（crypto-assets）」という表現が出て以来「それら」は通貨ではなく資産として認知されるようになった。 こう考えると NFT (Non-Fungible Token) の登場は寧ろ必然だったと言えるだろう。 ぶっちゃけるなら「デジタル証券バブル」の台頭とでも言おうか（笑）\n日本政府が妙に Web3 や NFT を推しているのは「バブル時代よ，もう一度」という願いなのだろうか。\n技術で社会は変えられない 私自身は与しないが，「交換所」を中心とした hierarchical な構造化も「デジタル証券バブル」も批判するほどのものではない。 しかし，もし Blockchain/Bitcoin が「脱中央集権」的かつ国家から独立した「補完通貨」を目指していたとするなら，この結末は完全に失敗だったと言えるだろう。\n結局 Bitcoin などの Blockchain 実装を通じて分かったのは「計算機パワーと情報力の強いものが勝つ」という身も蓋もない話で，それは今までの暴力による民衆統治や経済力による市場支配と何ら変わらない。 そこを見ないで「脱中央集権」が云々とかヘソで茶が沸いてしまう。\nジャック・ドーシーの批判は、「Web3を所有するのはベンチャーキャピタルとその投資先の企業であってウェブユーザーではなく、結局は中央集権型のものに別のラベルを貼っただけ」と続き、Andreessen Horowitzの共同創業者マーク・アンドリーセンにTwitterでブロックされ、それを自慢するというダメなTwitter芸を見せるオチがつきました Web3の「魂」は何なのか？ – WirelessWire Newsより 「誰かがブロックチェーンで何かを解決できると言う場合、その人はその『何か』を理解していないので無視してかまわない（ウィーバーのブロックチェーンの鉄則）」 Web3の「魂」は何なのか？ – WirelessWire Newsより インターネットにしろ Blockchain/Bitcoin にしろ，脱中央集権的な「システム」を構築することはできるのだろう。 しかし私達が暮らすのは「社会」である。 社会が「脱中央集権」を望まないのであれば，土台がどうあれ，そこに到達することはない。\n私は「技術で社会は変えられない」と思っている。 社会を変えることができるとすれば，それはあくまでも「人」の行いである（道具・手段としての技術の意義はあると思うけど）。 インターネットや Blockchain/Bitcoin は奇しくも私のこの妄言を補強する事例となっている。\nブックマーク ĐApps：Web 3.0はどんなものか（ĐApps: What Web 3.0 Looks Like 日本語訳） ジョン・ハンケが語るWeb3、ティム・バーナーズ＝リーが懐疑的なブロックチェーン - YAMDAS現更新履歴 【夏休みの自由研究】そうだブロックチェーンを作ろう！ Letter in Support of Responsible Fintech Policy クリプト・Web3業界の誇大広告に踊らされてはならない：1500人超の科学者・エンジニア・技術者が米議会に警告 | p2ptk[.]org 反クリプト公開書簡に反論する【オピニオン】 | coindesk JAPAN | コインデスク・ジャパン 参考図書 グリゴリの捕縛 白田 秀彰 2001-11-26 (Release 2014-09-17) 青空文庫 4307 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30 (powered by aozorahack)\nもうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo (著) 達人出版会 2017-12-25 (Release 2019-03-02) デジタル書籍 infoshare2 (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; WirelessWire News 連載の書籍化。感想はこちら。祝 Kindle 化！\nreviewed by Spiegel on 2018-12-31\nマスタリング・イーサリアム ―スマートコントラクトとDAppの構築 Andreas M. Antonopoulos (著), Gavin Wood (著), 宇野 雅晴 (監修), 鳩貝 淳一郎 (監修), 中城 元臣 (監修), 落合 渉悟 (監修), 落合 庸介 (翻訳), 小林 泰男 (翻訳), 土屋 春樹 (翻訳), 祢津 誠晃 (翻訳), 平山 翔 (翻訳), 三津澤 サルバドール将司 (翻訳), 山口 和輝 (翻訳), 宇野 雅晴 (翻訳), 鳩貝 淳一郎 (翻訳) オライリージャパン 2019-11-30 単行本（ソフトカバー） 4873118964 (ASIN), 9784873118963 (EAN), 4873118964 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 噂の「Web3」の基礎学習のために版元からデジタル版を購入。最初の章で挫けそうになっている（笑）\nreviewed by Spiegel on 2022-07-27 (powered by PA-APIv5)\n「黄色矮星人は2人いれば力比べを始める」というのはSF作家の野尻抱介さんの著作でよく出てくるフレーズ（多分）。後半の「3人いれば派閥を作る」は誰が言ったか思い出せない。うろ覚え。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBitcoin の総量が決まっているという前提は2017年の hard fork で崩れた。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "strings.Title 関数は非推奨になった",
      "section": "golang",
      "description": "lint は用法・用量を守って正しく使いましょう",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/deprecated-strings-title/",
      "published": "2022-07-24T12:24:01+00:00",
      "update": "2022-07-24T22:58:28+00:00",
      "content": "たとえば，以下のコードがあるとする。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; ) func main() { msgs := []string{ \u0026#34;hello, world!\u0026#34;, \u0026#34;HELLO, WORLD!\u0026#34;, } for _, msg := range msgs { fmt.Println(msg, \u0026#34;-\u0026gt;\u0026#34;, strings.Title(msg)) } } これを実行すると\n$ go run sample1.go hello, world! -\u0026gt; Hello, World! HELLO, WORLD! -\u0026gt; HELLO, WORLD! と単語の先頭が大文字に変換される。\nこの strings.Title() 関数について Go 1.18 から\nThe Title function is now deprecated. It doesn\u0026rsquo;t handle Unicode punctuation and language-specific capitalization rules, and is superseded by the golang.org/x/text/cases package. via Go 1.18 Release Notes - The Go Programming Language という感じに非推奨になった。 なお，このコードを golangci-lint にかけると\n$ golangci-lint run sample1.go:14:26: SA1019: strings.Title has been deprecated since Go 1.18 and an alternative has been available since Go 1.0: The rule Title uses for word boundaries does not handle Unicode punctuation properly. Use golang.org/x/text/cases instead. (staticcheck) fmt.Println(msg, \u0026#34;-\u0026gt;\u0026#34;, strings.Title(msg)) ^ と言う感じに警告を出してくれる。 つか，この警告で気がついたんだけどね。 相変わらず lint に叱られっぱなしである orz\nちなみに似た関数名に strings.ToTitle() というのがあるが，これを使うと\n$ go run sample1b.go hello, world! -\u0026gt; HELLO, WORLD! HELLO, WORLD! -\u0026gt; HELLO, WORLD! という感じに全部大文字になる。 これって strings.ToUpper() と何が違うんか分からん（笑）\nさて， strings.Title() 関数を使う代わりに golang.org/x/text/cases を使えとあるようなので，早速コードを書き換えてみる。 こんな感じかな。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;golang.org/x/text/cases\u0026#34; \u0026#34;golang.org/x/text/language\u0026#34; ) func main() { msgs := []string{ \u0026#34;hello, world!\u0026#34;, \u0026#34;HELLO, WORLD!\u0026#34;, } for _, msg := range msgs { fmt.Println(msg, \u0026#34;-\u0026gt;\u0026#34;, cases.Title(language.Und).String(msg)) } } これを実行すると\n$ go run sample2.go hello, world! -\u0026gt; Hello, World! HELLO, WORLD! -\u0026gt; Hello, World! おっと！ 単語の2文字目以降が違うか。 じゃぁ，オプションをつけて\nfmt.Println(msg, \u0026#34;-\u0026gt;\u0026#34;, cases.Title(language.Und, cases.NoLower).String(msg)) とすればいいのかな。\n$ go run sample2b.go hello, world! -\u0026gt; Hello, World! HELLO, WORLD! -\u0026gt; HELLO, WORLD! よーし，うむうむ，よーし。\nlanguage.Und の部分は特定の言語（language.Japanese とか）を指定できるのだが，たとえば役物が絡む場合：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;golang.org/x/text/cases\u0026#34; \u0026#34;golang.org/x/text/language\u0026#34; ) func main() { msg := \u0026#34;\u0026#39;n\u0026#34; casers := []cases.Caser{ cases.Title(language.English), cases.Title(language.Dutch), } for _, caser := range casers { fmt.Println(msg, \u0026#34;-\u0026gt;\u0026#34;, caser.String(msg)) } } これを実行すると\n$ go run sample3.go \u0026#39;n -\u0026gt; \u0026#39;N \u0026#39;n -\u0026gt; \u0026#39;n という感じに言語によって違いが出るようだ？\nLint は用法・用量を守って正しく使いましょう 話は変わるが，「失敗」には大きく2つある。 「受動的失敗」と「能動的失敗」だ。 このフレーズは Bruce Schneier さんの『セキュリティはなぜやぶられたのか（Beyond Fear）』にセキュリティ用語として出てくる。\nセキュリティシステムの問題は大きく分けてふたつのパターンがある。 ひとつ目は攻撃に対する防御が失敗するもの。 （中略） とるべき対策が実行されない受動的な失敗である。 ふたつ目は間違ったときに対策を実行して防御が失敗するもの。 （中略） とるべき対策を実行したがゆえの能動的な失敗である。 『セキュリティはなぜやぶられたのか』p.77より 受動的失敗は批判の対象になりやすいが，受動的失敗を恐れるあまり能動的失敗に陥るというのもありがちなパターンである。\nいや Twitter の TL で golangci-lint をフルオプションで起動して山ほど警告が出てきても平気みたいな記述を見かけたので。 これって典型的な能動的失敗だよなぁ。 オオカミが来た！\nもとより lint のような静的コード解析は万能ではない。 なれば，より気にすべきなのは受動的失敗より能動的失敗である。\ngolangci-lint はオプション無しでもかなりの部分を網羅できる。 せいぜい gosec を追加するくらい。 まずはこれで警告が出ないことを目指した上で，プロダクトによって過不足があれば少しずつ調整していけばいいのだ。\nたとえば，拙作の gnkf は MD5 や SHA-1 のハッシュ値を出力する機能があるが gosec を含めて lint をかけると「弱いハッシュ関数を使うな（←超意訳）」みたいな警告が出てしまう。 そこで\n$ golangci-lint run --enable gosec --exclude \u0026#34;G501|G505\u0026#34; ./... のようにチェック対象を調整している。 仕事で使うならメンバ間で .golangci.yaml 等を使って設定を合わせておけばいいだろう。\nlint は用法・用量を守って正しく使いましょう。\nブックマーク 逆引き Goによる静的解析 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nセキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n"
    },
    {
      "title": "goark/pa-api パッケージで GetBrowseNodes オペレーションに対応した",
      "section": "golang",
      "description": "まぁ，使ってみてください。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/getbrowsenodes-with-paapiv5/",
      "published": "2022-07-18T07:01:46+00:00",
      "update": "2022-07-18T08:20:50+00:00",
      "content": "今更であるが，Amazon PA-APIv5 にアクセスするための自作パッケージ goark/pa-api は実はコードの半分以上が他人様の PR でできているのだが（感謝！），今回は GetBrowseNodes オペレーション追加をリクエストされまして\nEnable to get browse node Info · Issue #25 · goark/pa-api · GitHub たまには自分でコードを書こうと思い立ったのだった。 ちなみに GetBrowseNodes オペレーションの API 仕様は以下の通り。\nGetBrowseNodes · Product Advertising API 5.0 ここで browse node というのは構造化された商品カテゴリのようなものらしい。\nBrowse Nodes · Product Advertising API 5.0 goark/pa-api を使って browse node の情報を取得してみよう。 ちなみに PA-API アクセス用パラメータを以下に例示する。\nパラメータ名 値 マーケットプレイス www.amazon.co.jp アソシエイト・タグ mytag-20 アクセス・キー AKIAIOSFODNN7EXAMPLE シークレット・キー 1234567890 もちろん実際には使えないのでご安心を（笑） さっそくコードを書いてみる。\n//go:build run // +build run package main import ( \u0026#34;bytes\u0026#34; \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; paapi5 \u0026#34;github.com/goark/pa-api\u0026#34; \u0026#34;github.com/goark/pa-api/query\u0026#34; ) func main() { //Create client client := paapi5.New( paapi5.WithMarketplace(paapi5.LocaleJapan), ).CreateClient( \u0026#34;mytag-20\u0026#34;, \u0026#34;AKIAIOSFODNN7EXAMPLE\u0026#34;, \u0026#34;1234567890\u0026#34;, ) //Make query q := query.NewGetBrowseNodes( client.Marketplace(), client.PartnerTag(), client.PartnerType(), ).BrowseNodeIds([]string{\u0026#34;2291970051\u0026#34;}) //Requet and response body, err := client.RequestContext(context.Background(), q) if err != nil { fmt.Printf(\u0026#34;%+v\\n\u0026#34;, err) return } io.Copy(os.Stdout, bytes.NewReader(body)) } これを実行してみよう。\n$ go run sample1.go | jq . { \u0026#34;BrowseNodesResult\u0026#34;: { \u0026#34;BrowseNodes\u0026#34;: [ { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;産業研究\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;産業研究\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291970051\u0026#34;, \u0026#34;IsRoot\u0026#34;: false } ] } } これで browse node ID が 2291970051 の情報が取得する。 さらに\n//Make query q := query.NewGetBrowseNodes( client.Marketplace(), client.PartnerTag(), client.PartnerType(), ).BrowseNodeIds([]string{\u0026#34;2291970051\u0026#34;}).EnableBrowseNodes() と，リソースパラメータを有効にすると\n$ go run sample2.go | jq . { \u0026#34;BrowseNodesResult\u0026#34;: { \u0026#34;BrowseNodes\u0026#34;: [ { \u0026#34;Ancestor\u0026#34;: { \u0026#34;Ancestor\u0026#34;: { \u0026#34;Ancestor\u0026#34;: { \u0026#34;Ancestor\u0026#34;: { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;Kindleストア\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;Kindleストア\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2250738051\u0026#34; }, \u0026#34;ContextFreeName\u0026#34;: \u0026#34;Kindleストア\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;カテゴリー別\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2250739051\u0026#34; }, \u0026#34;ContextFreeName\u0026#34;: \u0026#34;Kindle本\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;Kindle本\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2275256051\u0026#34; }, \u0026#34;ContextFreeName\u0026#34;: \u0026#34;ビジネス・経済\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;ビジネス・経済\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291905051\u0026#34; }, \u0026#34;Children\u0026#34;: [ { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;コンサルティング\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;コンサルティング\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;4715053051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;経営情報システム\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;経営情報システム\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;4715061051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;銀行・金融業\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;銀行・金融業\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2292599051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;人事・労務管理\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;人事・労務管理\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291959051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;経理・アカウンティング\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;会計\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2292083051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;e コマース\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;e コマース\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291907051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;NGO・NPO\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;非営利組織\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2293150051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;不動産\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;不動産\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291980051\u0026#34; } ], \u0026#34;ContextFreeName\u0026#34;: \u0026#34;産業研究\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;産業研究\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291970051\u0026#34;, \u0026#34;IsRoot\u0026#34;: false } ] } } という感じに親ノードと子ノードも併せて取得できる。\nこの browse node ID を使って商品検索結果を絞り込むことができる。 たとえば結城浩さんの著作を 2291970051 で絞り込んでみる。\n//Make query q := query.NewSearchItems( client.Marketplace(), client.PartnerTag(), client.PartnerType(), ).Search(query.Author, \u0026#34;結城浩\u0026#34;).Request(query.BrowseNodeID, \u0026#34;2291970051\u0026#34;).EnableItemInfo() これを実行すると\n$ go run sample3c.go | jq . { \u0026#34;SearchResult\u0026#34;: { \u0026#34;Items\u0026#34;: [ { \u0026#34;ASIN\u0026#34;: \u0026#34;B08S2LY9VG\u0026#34;, \u0026#34;DetailPageURL\u0026#34;: \u0026#34;https://www.amazon.co.jp/dp/B08S2LY9VG?tag=mytag-20\u0026amp;linkCode=osi\u0026amp;th=1\u0026amp;psc=1\u0026#34;, \u0026#34;ItemInfo\u0026#34;: { \u0026#34;ByLineInfo\u0026#34;: { \u0026#34;Manufacturer\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;SBクリエイティブ\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Manufacturer\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; }, \u0026#34;Contributors\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;結城 浩\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34;, \u0026#34;Role\u0026#34;: \u0026#34;著\u0026#34; } ] }, \u0026#34;Classifications\u0026#34;: { \u0026#34;Binding\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;Kindle版\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Binding\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; }, \u0026#34;ProductGroup\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;Digital Ebook Purchas\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;ProductGroup\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; } }, \u0026#34;ContentInfo\u0026#34;: { \u0026#34;Languages\u0026#34;: { \u0026#34;DisplayValues\u0026#34;: [ { \u0026#34;DisplayValue\u0026#34;: \u0026#34;日本語\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;発行済み\u0026#34; } ], \u0026#34;Label\u0026#34;: \u0026#34;Language\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; }, \u0026#34;PagesCount\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: 218, \u0026#34;Label\u0026#34;: \u0026#34;NumberOfPages\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; }, \u0026#34;PublicationDate\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;2021-02-19T00:00:00Z\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;PublicationDate\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; } }, \u0026#34;ProductInfo\u0026#34;: { \u0026#34;IsAdultProduct\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: false, \u0026#34;Label\u0026#34;: \u0026#34;IsAdultProduct\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; }, \u0026#34;ReleaseDate\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;2021-02-20T00:00:00Z\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;ReleaseDate\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; } }, \u0026#34;TechnicalInfo\u0026#34;: { \u0026#34;Formats\u0026#34;: { \u0026#34;DisplayValues\u0026#34;: [ \u0026#34;Kindle本\u0026#34; ], \u0026#34;Label\u0026#34;: \u0026#34;Format\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; } }, \u0026#34;Title\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;再発見の発想法\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; } } } ], \u0026#34;SearchURL\u0026#34;: \u0026#34;https://www.amazon.co.jp/s?rh=n%3A2291970051%2Cp_lbr_three_browse-bin%3A%E7%B5%90%E5%9F%8E%E6%B5%A9%2Cp_n_availability%3A-1\u0026amp;tag=mytag-20\u0026amp;linkCode=osi\u0026#34;, \u0026#34;TotalResultCount\u0026#34;: 1 } } という感じに『再発見の発想法』のみ絞り込めた。\nまぁ，こんな感じに使ってみてください。\nブックマーク Go 言語用 PA-API v5 クライアント・パッケージ amazon APIのBrowseNode ID一覧ってどうやって調べるの？ – ユズムログ 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nデベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n再発見の発想法 結城 浩 (著) SBクリエイティブ 2021-02-19 (Release 2021-02-20) Kindle版 B08S2LY9VG (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「Software Design」誌の同名連載の書籍化。「技術用語」の解説書だが，平易な内容で読みやすい。\nreviewed by Spiegel on 2021-03-14 (powered by PA-APIv5)\n"
    },
    {
      "title": "ネックスピーカー買うた",
      "section": "remark",
      "description": "あんまりハズレだと嫌なので，今回は様子見の廉価版で",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/neck-speaker/",
      "published": "2022-07-17T11:02:51+00:00",
      "update": "2022-07-17T11:03:10+00:00",
      "content": "さて，夏のボーナスの季節である。 私も微々たる金額ながら頂いたので，自分へのご褒美として，今回はネックスピーカーを買ってみた。 とはいえ，あんまりハズレだと嫌なので，今回は様子見の廉価版で。\nネックスピーカー買った。JVCケンウッド | Flickr JVC ブランド。 決め手は「連続再生時間20時間」ってところ（笑）\n試しに「嗚呼！逆転王」のベースカバーを聴いてみたが\n【逆転イッパツマン】嗚呼！逆転王 /山本正之【ベースカバー】 - YouTube んー，こんなもんじゃないかな。 ベース音もはっきり聞こえるし。 まぁ，うちとこはガチのオーディオ設備じゃないしな。 卓上スピーカーよりはいいと思う。\n3年前の引っ越しでクラシック音楽CDは全部処分してしまったからなぁ。 この機会に改めて買って試してみるのもいいかもしれない。 近所のブックオフにでも行くか。\n音を抑える目的で買うなら止めたほうがいいと思う。 普通に周囲に聞こえます。 あと Bluetooth 接続なのでどうしても遅延が発生する1（のでゲーム用には向かない？）。 家事しながら聴く，とかいったシチュエーションならいいかも。 そういう意味でも「連続再生時間20時間」は魅力だねぇ（笑）\nブックマーク Amazon Prime Day 2021 の戦利品 参考 JVC NAGARAKU SP-A10BT-W ウェアラブルネックスピーカー ワイヤレス Bluetooth 約20時間連続再生 本体約88g軽量設計 ホワイト JVCケンウッド (Release 2018-11-21) エレクトロニクス B07JVKHRD5 (ASIN), 4975769459337 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; JVC ブランドのネックスピーカー。連続再生時間20時間は魅力。廉価版なせいかびっくりするほど高音質というわけではないが，私が聴くのは主にアニソンなので無問題。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\n新しい機種は aptX LowLatency コーデックに対応しているので，遅延に関しては緩和されるかも？\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "2022年に出た（出る） Go 言語関連の本",
      "section": "remark",
      "description": "うだうだしてたら7月も半分過ぎちゃってるよ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/books-for-golang/",
      "published": "2022-07-17T05:08:55+00:00",
      "update": "2022-07-27T11:00:45+00:00",
      "content": "2022年に入ってから Go 関連の本がいくつか出ているが，第1四半期は引っ越しやらでドタバタしてたので購入は後回しにしていた。 そうするうちに第2四半期に入ったのだが，今度は本業が忙しくなり Java コード書きまくってるせいか，うちに帰っても趣味のコードを書く気が起こらず Go 関連はまるっと放置していた。\nそうこうするうちに7月も半分過ぎちゃってるよ，とハタと気づいて，とりあえず気になる本はみんな買っておこうと思ったり。\nエキスパートたちのGo言語 エキスパートたちのGo言語　一流のコードから応用力を学ぶ Software Design plus 上田 拓也 (著), 青木 太郎 (著), 石山 将来 (著), 伊藤 雄貴 (著), 生沼 一公 (著), 鎌田 健史 (著), 上川 慶 (著), 狩野 達也 (著), 五嶋 壮晃 (著), 杉田 寿憲 (著), 田村 弘 (著), 十枝内 直樹 (著), 主森 理 (著), 福岡 秀一郎 (著), 三木 英斗 (著), 森 健太 (著), 森國 泰平 (著), 森本 望 (著), 山下 慶将 (著), 渡辺 雄也 (著) 技術評論社 2021-12-27 (Release 2021-12-27) Kindle版 B09P4PH63R (ASIN) 版元のデジタル版を購入。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\n版元で買ったのだが，間抜けなことにデジタル版と間違えて紙の本を買っちゃったのよ。 途中で気がつけよ，私 orz\n慌ててキャンセルしようとしたが，キャンセルできないんだって。 とほほ。 まぁ PDF で書い直したし，いざとなったら紙のほうはブックオフに売ろう。\n実用 Go言語 実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 版元のデジタル版を購入。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\nオライリーさんなのでデジタル版のほうを買いました。\n詳解Go言語Webアプリケーション開発 詳解Go言語Webアプリケーション開発 清水陽一郎 (著) シーアンドアール研究所 2022-07-22 (Release 2022-07-22) Kindle版 B0B62K55SL (ASIN) 本の森.jp で PDF 版が買える。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-27 (powered by PA-APIv5)\n2022-07-22 発売。 本の森.jp で PDF 版を購入した。 発売直後に重版したげな。 めでたい！\nGo言語による分散サービス Go言語による分散サービス ―信頼性、拡張性、保守性の高いシステムの構築 Travis Jeffery (著), 柴田 芳樹 (翻訳) オライリージャパン 2022-08-03 単行本（ソフトカバー） 4873119979 (ASIN), 9784873119977 (EAN), 4873119979 (ISBN) 版元でデジタル版購入予定。読書会の課題図書。\nreviewed by Spiegel on 2022-07-27 (powered by PA-APIv5)\n2022-08-03 発売予定。 私はデジタル版を買う予定なので，発売日まで待ち状態。\nなお翻訳者の柴田芳樹さん主催による読書会が8月から始まる。 でも申込みが遅くて補欠なんだよなぁ。\n第1回『Go言語による分散サービス』オンライン読書会 - connpass 『Go言語による分散サービス』オンライン読書会を開催します：柴田 芳樹 (Yoshiki Shibata)：SSブログ あれ？ もう2,3冊あった気がするけど，どうだったっけ？ まぁ，いいや。 2022年に出た Go 本でこんなのあるよ，というのがありましたら是非教えてください \u0026#x1f647;\nしかし，技術関連書はホンマ Kindle で買わなくなったな。 いや，技術書読むのに Kindle は（一部でも内容をコピペできないし）使い勝手が悪いから（漫画やラノベなら Kindle で全然 OK なんだけど）。 まぁ Linux ネイティブ版の Kindle アプリケーションがないっつうのもあるけど。\n"
    },
    {
      "title": "Go 1.18.4 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "Go 1.18.2 から 1.18.4 までのセキュリティ・アップデートをまとめて紹介する。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/07/go-1_18_2-is-released/",
      "published": "2022-07-17T03:05:57+00:00",
      "update": "2022-07-17T03:07:07+00:00",
      "content": "5月のGW以降，妙に忙しくて諸々の更新をサボっていたら Go のセキュリティ・アップデートはバンバン出るし 1.19 のリリース候補版も登場してるしでアワアワしている。\nこの記事では 1.18.1 以降のセキュリティ・アップデートをまとめて紹介する。\n[security] Go 1.18.2 and Go 1.17.10 are released [security] Go 1.18.3 and Go 1.17.11 are released [security] Go 1.18.4 and Go 1.17.12 are released CVE-2022-29526 syscall: fix Faccessat on Linux When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible. via Go 1.18.2 and Go 1.17.10 are released CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N 深刻度: 警告 (Score: 5.3) 基本評価基準 評価値 攻撃元区分 ネットワーク 攻撃条件の複雑さ 低 必要な特権レベル 不要 ユーザ関与レベル 不要 スコープ 変更なし 機密性への影響 低 完全性への影響 なし 可用性への影響 なし CVE-2022-30634 crypto/rand: rand.Read hangs with extremely large buffers On Windows, rand.Read will hang indefinitely if passed a buffer larger than 1 \u0026lt;\u0026lt; 32 - 1 bytes. via Go 1.18.3 and Go 1.17.11 are released （以下未稿）\nCVE-2022-30629 crypto/tls: session tickets lack random ticket_age_add Session tickets generated by crypto/tls did not contain a randomly generated ticket_age_add. This allows an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption. via Go 1.18.3 and Go 1.17.11 are released （以下未稿）\nCVE-2022-30580 os/exec: empty Cmd.Path can result in running unintended binary on Windows If, on Windows, Cmd.Run, cmd.Start, cmd.Output, or cmd.CombinedOutput are executed when Cmd.Path is unset and, in the working directory, there are binaries named either “..com” or “..exe”, they will be executed. via Go 1.18.3 and Go 1.17.11 are released （以下未稿）\nCVE-2022-29804 path/filepath: Clean(.\\c:) returns c: on Windows On Windows, the filepath.Clean function could convert an invalid path to a valid, absolute path. For example, Clean(`.\\c:`) returned `c:`. via Go 1.18.3 and Go 1.17.11 are released （以下未稿）\nCVE-2022-1705 net/http: improper sanitization of Transfer-Encoding header The HTTP/1 client accepted some invalid Transfer-Encoding headers as indicating a “chunked” encoding. This could potentially allow for request smuggling, but only if combined with an intermediate server that also improperly failed to reject the header as invalid. via Go 1.18.4 and Go 1.17.12 are released （以下未稿）\nCVE-2022-32148 When httputil.ReverseProxy.ServeHTTP was called with a Request.Header map containing a nil value for the X-Forwarded-For header, ReverseProxy would set the client IP as the value of the X-Forwarded-For header, contrary to its documentation. In the more usual case where a Director function set the X-Forwarded-For header value to nil, ReverseProxy would leave the header unmodified as expected. via Go 1.18.4 and Go 1.17.12 are released （以下未稿）\nCVE-2022-30631 compress/gzip: stack exhaustion in Reader.Read Calling Reader.Read on an archive containing a large number of concatenated 0-length compressed files can cause a panic due to stack exhaustion. via Go 1.18.4 and Go 1.17.12 are released （以下未稿）\nCVE-2022-30633 encoding/xml: stack exhaustion in Unmarshal Calling Unmarshal on a XML document into a Go struct which has a nested field that uses the any field tag can cause a panic due to stack exhaustion. via Go 1.18.4 and Go 1.17.12 are released （以下未稿）\nCVE-2022-28131 encoding/xml: stack exhaustion in Decoder.Skip Calling Decoder.Skip when parsing a deeply nested XML document can cause a panic due to stack exhaustion. via Go 1.18.4 and Go 1.17.12 are released （以下未稿）\nCVE-2022-30635 encoding/gob: stack exhaustion in Decoder.Decode Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. via Go 1.18.4 and Go 1.17.12 are released （以下未稿）\nCVE-2022-30632 path/filepath: stack exhaustion in Glob Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion. via Go 1.18.4 and Go 1.17.12 are released （以下未稿）\nCVE-2022-30630 io/fs: stack exhaustion in Glob Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion. via Go 1.18.4 and Go 1.17.12 are released （以下未稿）\nCVE-2022-1962 go/parser: stack exhaustion in all Parse* functions Calling any of the Parse functions on Go source code which contains deeply nested types or declarations can cause a panic due to stack exhaustion. via Go 1.18.4 and Go 1.17.12 are released （以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.18.4.linux-amd64.tar.gz）を取ってきてインストールすることを強く推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.18.4.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.18.4.linux-amd64.tar.gz $ sudo mv go go1.18.4 $ sudo ln -s go1.18.4 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.18.4 linux/amd64 Windows は Scoop 経由で OK\nアップデートは計画的に。\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n"
    },
    {
      "title": "「ブログはやはり『死に続けている』」",
      "section": "remark",
      "description": "今後もネットの背景に徹して緩〜く活動を続けていければな，と思う所存です。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/slow-motion-car-crash/",
      "published": "2022-07-15T11:45:28+00:00",
      "update": "2022-07-15T17:20:25+00:00",
      "content": "面白い記事を見つけた。\nEvan WilliamsがMediumトップから退任 - by 堀 正岳 （@mehori） 私自身のアカウントは随分前から放置プレイ状態だし，今更 Medium に微塵も感傷はないのだけど，後半のブログの話は面白かった。\n「ブログは終わった」ちうのは大昔から言われてるよね。 ぶっちゃけ Twitter や Facebook が台頭し始めたゼロ年代半ばには既に言われてたし，そういう意味じゃ「ブログはやはり「死に続けている」」というのはその通りなんだろう。\nでもネットから「ブログ」がなくなったようには見えない。\nいや，動画って見るのまどろこしいじゃん。 10分のコンテンツを2倍速で見ても5分かかるんだぜ。 それならテキストで要約記事を書いてくれよ！ そっちを見るから。\nまぁSTEALTH一光さんや MindaRyn さんのチャネルとかは楽しく見てるけどね。 それぞれの得意な道具を使えばいいぢゃん，とは思う。\nただ\nツイッター、TikTok、YouTubeといったようにわかりやすいアプリがあるメディアは注目されますが、ブログにはそういったものはない Evan WilliamsがMediumトップから退任より YouTubeやTikTokと同じような、それに対抗できる力も意味も、もはやない Evan WilliamsがMediumトップから退任より というのはまさに「そのとーり！」で，それ故に\nこのように、ブログはより背景にとけこみ、その人のネット上のすべての活動を包み込む役割に変化してゆくのでしょう。\nブログはその人が生きてゆき、ネットになにかを残してゆく足跡のようなものになりつつあります。\nEvan WilliamsがMediumトップから退任より というのはストンと腑に落ちた。\nそもそも「ブログ」は “Web-log” なんだし，これって「ブログ」が本来の機能を取り戻してるってことだよね。 Web 2.0 な山師たちの口車に乗っかり，いかにもそこに「宝の山」があるかのように錯覚し，ネットバブルよろしく狂躁に陥った状態からようやく回復した，という感じか。\nというわけで，今後もネットの背景に徹して緩〜く活動を続けていければな，と思う所存です。\nどっとはらい\n参考図書 ウェブログ・ハンドブック―ブログの作成と運営に関する実践的なアドバイス レベッカ ブラッド (著), Blood,Rebecca (原著), yomoyomo (翻訳) 毎日コミュニケーションズ 2003-12-01 単行本 483991107X (ASIN), 9784839911072 (EAN), 483991107X (ISBN) すみません。買ってないです。だって目がチカチカするんだもん。つか絶版なのか？ 表紙をかえて Kindle で出してくれれば歴史資料として買うのに（笑）\nreviewed by Spiegel on 2022-07-15 (powered by PA-APIv5)\n"
    },
    {
      "title": "GitHub Copilot は貢献者から貢献を奪うか？",
      "section": "remark",
      "description": "この件を拗らせるようならプロアカウント契約を解除することも考えないといけないだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/code-launderring/",
      "published": "2022-07-02T07:42:46+00:00",
      "update": "2022-07-03T06:29:25+00:00",
      "content": "この前から話題になっている GitHub Copilot だが，ついに SFC (Software Freedom Conservancy) が GitHub と敵対する？ 声明を出したようだ。\nGive Up GitHub: The Time Has Come! - Conservancy Blog - Software Freedom Conservancy 「GitHubの利用を中止しよう」 SFCが提言、AI開発ツールに疑念 | TECH+ 引き合いに出された SourceForge に佐渡秀治さんが反応して\n唐突に呼ばれた気がしたのでSFCの記事を読んでみたが、今は不使用のキャンペーンだけだけど、GitHubがこのままの姿勢ならSFCはいずれ訴訟を仕掛けることも考えそうというぐらいの勢いだな。Amazon CodeWhispererは適切な帰属とライセンス情報を提供するので問題ないというスタンスか。まあ、そこだよね https://t.co/xmphKprdoS\n\u0026mdash; Shuji Sado (佐渡 秀治) (@shujisado) July 1, 2022 と tweet しておられるのが面白かった。\n私が今回の一連を見て最初に連想したのは，ゼロ年代の Google Book Search だったのだが\nGoogle Books の Library Book Scan すら Fair Use と言われたのに\u0026hellip; これとはちょっと違うなとは思っていた。 うまく言語化できないが，つらつらと書いてみる。\nPekka Himanen 等による古典 “The Hacker Ethic” (邦題『リナックスの革命』) を引くまでもなく FOSS でコードを書く人にとって最も価値があるのは「自由なコード」であり，その FOSS プロジェクトにコミットする人々にとって一番の報酬はコード（＝自由）に「貢献」したという事実そのものである。\nにも関わらず GitHub Copilot はコードに付随する貢献を洗い落としてしまう。 貢献を洗い落とされたコードは「GitHub Copilot のもの」としてしれっと使われる。 上の tweet の retweet 元にもあるように，これは2010年代で散々言われた「あなたが客でないとすれば、商品だ」という搾取の構造と言える。\n言うなれば「コード洗浄 (ロンダリング) 」といったところだろうか。 上手いフレーズを思いつかなくてゴメン \u0026#x1f647;\nそう考えると\nOne recent preliminary finding was that AI-assisted software development tools can be constructed in a way that by-default respects FOSS licenses. We will continue to support the committee as they explore that idea further, and, with their help, we are actively monitoring this novel area of research. While Microsoft\u0026rsquo;s GitHub was the first mover in this area, by way of comparison, early reports suggest that Amazon\u0026rsquo;s new CodeWhisperer system (also launched last week) seeks to provide proper attribution and licensing information for code suggestions. via Give Up GitHub: The Time Has Come! Software Freedom Conservancyの委員会はAI支援ソフトウェア開発ツールに関する調査を続けていると説明するとともに、FOSSライセンスを尊重する形でこうした機能を実現することは可能であることが最近の調査からわかったことなどにも言及している。\n同委員会は今後もこの分野への取り組みを続けるとしているほか、Amazon CodeWhispererのようにコード提案時に適切な帰属とライセンス情報を表示しようとする取り組みがあることについても説明している。\n「GitHubの利用を中止しよう」 SFCが提言、AI開発ツールに疑念より というのもライセンス処理の問題だけではないと思えてくる。\nGitHub をはじめとするサービスは単なる「git リポジトリ・サービス」ではなく，コードを中心としたコミュニティを構成し貢献を可視化するプラットフォームとして機能している。 このことを軽視してはいけないと思う。\n私は GitHub にはかなりお世話になってるが，この件を拗らせるようなら（乗り換えまではしなくても）プロアカウント契約を解除することも考えないといけないだろう。\n【おまけ1】 GitHub Copilot は Fair Use か 元コードのライセンスを無視してどんぶり勘定する GitHub Copilot が fair use かどうかについては微妙だと思う。 まぁ「公正な利用」の概念がない日本では一発アウトだろうが（笑）\n先に紹介した Google Book Search の件や2021年まで争われていた Google vs Oracle の訴訟を見ても分かるように，あるサービスによる知財の取り扱いが fair use に基づいているか判断するのは難しい。 というか米国の場合，訴訟が始まってからがスタートラインなんだよな。\n訴訟が始まって GitHub やその親玉である Microsoft が FOSS コードやその貢献についてどのように考えているか明らかになれば，もっと色々と語ることがあるかも知れない。\n【おまけ2】目的によって利用を制限するのであればそれはもう FOSS ではない ゼロ年代に 9.11 から始まる一連のテロや戦争のときもそうだったし，2022年のロシアがウクライナに仕掛けた侵略戦争勃発時にも見られたが，抗議目的でソフトウェアの（著作権的な意味での）利用を制限することは FOSS の目的や手段にマッチしない。 「自由とはそういうことだ」。\nたとえば，今回の GitHub Copilot に抗議・拒否する目的で既出の FOSS 製品の利用を制限したいのであれば「FOSS でないなにか」に変更しなければならない。 それは今まで積み上げてきたエコシステムの基盤を崩すことになる。\nGitHub Copilot には反対するけど今のエコシステムを壊したくないなら SFC が言うように「GitHub をあきらめる（give up GitHub）」しかない。 それとも（今まで積み上げてきたものを壊してでも）断固とした対決姿勢をとるか。 「リポジトリに Copilot 拒否オプションを付ければいいぢゃん」とかいった簡単な話ではないのである。\nさて，どうなる？ どうする？\nブックマーク Copilot — Free Software Foundation — Working together for free software : FSF によるリンク集 GitHub Copilotを正式リリース。すべての開発者が利用できるようになりました。 - GitHubブログ 戦争に抗議する「プロテストウェア」が、オープンソースエコシステムの信頼を揺るがしている | WIRED.jp 参考図書 リナックスの革命 ― ハッカー倫理とネット社会の精神 ペッカ ヒマネン (著), リーナス トーバルズ (著), マニュエル カステル (著), 安原 和見 (翻訳), 山形 浩生 (翻訳) 河出書房新社 2001-05-26 単行本 4309242456 (ASIN), 9784309242453 (EAN), 4309242456 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 大昔に買ったんだけどうろ覚え。買い直そうかと思ったが邦訳は Kindle ではないのか。それにしても「リナックスの革命」とかいう頭の悪いタイトルはどうにかならなかったのだろうか。副題だけで十分ぢゃん。\nreviewed by Spiegel on 2020-12-12 (powered by PA-APIv5)\n夏をあきらめて サザンオールスターズ (メインアーティスト) TAISHITA 1998-06-25 (Release 2018-08-06) MP3 ダウンロード B07FMV7HMD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; カラオケでよく唄うやつ。原由子バージョンが好き。\nreviewed by Spiegel on 2022-07-03 (powered by PA-APIv5)\n"
    },
    {
      "title": "立体顔パンツ",
      "section": "remark",
      "description": "次回からは狙ってこれを買うことにしよう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/3d-face-briefs/",
      "published": "2022-07-02T04:59:26+00:00",
      "update": "2022-07-02T06:03:04+00:00",
      "content": "みなさま，いかがお過ごしでしょうか。 島根県は出雲市を中心にやらかし中でして「出雲市で大手企業つったらF社かM社しかないやろ！」と職場でツッコミの嵐となっております（笑）\n2022年7月1日 島根県発表「新型コロナウイルス感染症患者の発生状況について」 ところで，近所のドラッグストアで叩き売りしていたマスクがいい感じだったので，覚え書きとして記しておく。\n3D立体構造 4層不織布マスク 男女兼用 ふつうサイズ 個包装 ホワイト 30枚入 ヒロコーポレーション ヘルスケア\u0026amp;ケア用品 B09KLH1JQ2 (ASIN), 4562350984493 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 顔にフィットしてズレにくい。唇が布地（不織布）に当たらないのもよい。小さく折り畳める。\nreviewed by Spiegel on 2022-07-02 (powered by PA-APIv5)\n唇が布地（不織布）に当たらないのが素晴らしい。 あれが一番気持ち悪かったんだよな。 ぶっちゃけ「マスクなんて皆おなじ」と思ってたが，次回からは狙ってこれを買うことにしよう。\n某侵略戦争で相対的に「コロナ恐怖症」が薄れたのか，それともここのところの暑さで「屋外でマスクをすることのヤバさ」に気がついたのか，少なくとも屋外でマスクをする人が減ってきたのは結構な話だが，それとともにマスクを「顔パンツ」と揶揄する向きもあるそうで，広島時代に歓楽街の店で見せてもらった「夜の電話帳」に載ってるホステスさんの写真を思い出したり1。\n「夜の電話帳」に載ってるホステスさんってみんな口元を隠すんだよね。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    }
  ]
}
