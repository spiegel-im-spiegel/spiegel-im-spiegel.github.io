{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Git v2.29 がリリースされた",
      "section": "release",
      "description": "SHA-2 コミット・ハッシュの実験的サポート / Windows 版 Git Credential Manager のアップグレード",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/10/git-2_29-is-released/",
      "published": "2020-10-25T09:09:33+00:00",
      "update": "2020-10-25T09:11:37+00:00",
      "content": "先日 Git v.2.29 がリリースされた。\n [ANNOUNCE] Git v2.29.0  SHA-2 コミット・ハッシュの実験的サポート v2.29 ではコミット・ハッシュに関する重大な仕様変更がある。\nGit 2.29 includes experimental support for writing your repository’s objects using a SHA-256 hash of their contents, instead of using SHA-1. via Highlights from Git 2.29 - The GitHub Blog  といっても今回は実験的なサポート（experimental support）で，試すのであれば以下のような感じでできるらしい。\n$ git init --object-format=sha256 sample-repo Initialized empty Git repository in /home/spiegel/work/sample-repo/.git/ $ cd sample-repo $ echo \u0026#39;Hello, SHA-256!\u0026#39; \u0026gt;README.md $ git add README.md $ git commit -m \u0026#34;README.md: initial commit\u0026#34; [main (root-commit) 6d45449] README.md: initial commit 1 file changed, 1 insertion(+) create mode 100644 README.md $ git rev-parse HEAD 6d45449028a8e76500adbfe7330e779d5dc4a3a14fca58ff08ec354c58727b2c 当然ながら SHA-1 ベースのコミット・ハッシュと SHA-2 (SHA256) ベースのコミット・ハッシュとの間には互換性がない。 当面は2系統のリポジトリを使い分けて運用することになりそうだ。 ただし，将来的には両者を相互運用できるようにするらしい。\nIn future releases, Git will support interoperating between repositories with different object formats by computing both a SHA-1 and SHA-256 hash of each object it writes, and storing a translation table between them. This will eventually allow repositories that store their objects using SHA-256 to interact with (sufficiently up-to-date) SHA-1 clients, and vice-versa. It will also allow converted SHA-256 repositories to have their references to older SHA-1 commits still function as normal (e.g., if I write a commit whose message references an earlier commit by its SHA-1 name, then Git will still be able to follow that reference even after the repository is converted to use SHA-256 by consulting the translation table). via Highlights from Git 2.29 - The GitHub Blog  ここまで到達すれば SHA-2 ベースへ本格的に切り替えていってもいいかも知れない。\nWindows 版 Git Credential Manager のアップグレード Git for Windows では，もうひとつ重大な変更がある。\nThis version upgrades existing users of Git Credential Manager for Windows (which was just deprecated) to Git Credential Manager Core (“GCM Core”, which is the designated successor of the former). This is necessary because GitHub deprecated password-based authentication and intends to remove support for it soon, and GCM Core is prepared for this change.. via Release Git for Windows 2.29.0 · git-for-windows/git  GitHub リポジトリに HTTPS でアクセスしている場合は注意が必要かも知れない（Git for Windows を使ってないので，どの程度影響するか分かってない。ゴメンペコン 🙇）。\nブックマーク   [ANNOUNCE] Git v2.29.1\n  Highlights from Git 2.29 - The GitHub Blog\n  Release Git for Windows 2.29.0 · git-for-windows/git · GitHub\n  Release Git for Windows 2.29.1 · git-for-windows/git · GitHub\n  「Git for Windows 2.29.0」が公開 ～セットアップ時にデフォルトブランチ名を設定可能 - 窓の杜\n  PPA から Git をインストールする\n  "
    },
    {
      "title": "テンキーなんて飾りです，偉い人には分からんのです",
      "section": "remark",
      "description": "テンキーがないだけで机上が随分広くなった気がする。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/no-need-numeric-keypad/",
      "published": "2020-10-25T07:16:12+00:00",
      "update": "2020-10-25T07:25:42+00:00",
      "content": "おかげさまで新しい会社に拾っていただきまして先日から仕事をはじめているのだが「キーボードは使い勝手がいいものを自前で用意していいよ」と許可してもらったので，この機会にキーボードを買うことにした。\n私は文房具全般にあまりこだわりがないのだが，パソコンのキーボードに関しては2つだけある。 すなわち\n 流行りの薄型キーボードは NG (指が痛くなる) テンキー使わんし要らね（ただしノートPC風のキー配列は論外）  だ。 ちなみに押打時の感触とかにこだわりはない。\nそんで，いろいろ調べた結果\n エレコム キーボード 有線 メンブレン コンパクトキーボード ブラック TK-FCM103XBK エレコム (Release 2019-02-28) Personal Computers B07NDLJ6Q9 (ASIN), 4549550107761 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  いわゆる「テンキーレス」なキーボードが欲しかったので。\nreviewed by Spiegel on 2020-10-25 (powered by PA-APIv5)\n にした。 税込981円。 マイナポイントで買ったと思えば無料も同然（笑）\nいや，1万円以上出せばゲーミング・キーボードとかでよさげなのはあるよ。 でもマウスやキーボードなんて消耗品にお金かけたくないじゃん。\nテンキーがないだけで机上が随分広くなった気がする。 やっぱテンキーなんて飾りだよ。 偉い人には分からんのです。\n実際に職場で使ってみたらかなりいい感じだったので，自宅 PC 用にも追加で買ってしまった。 （多分）5年以上使っててキートップの刻印も剥げちゃってるしね。 まぁ刻印が見えなくて困ることはないんだけど 😄\n"
    },
    {
      "title": "2020-10-25 のブックマーク",
      "section": "bookmarks",
      "description": "「NASA’s OSIRIS-REx Spacecraft Successfully Touches Asteroid」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/10/25-bookmarks/",
      "published": "2020-10-25T03:49:02+00:00",
      "update": "2020-10-25T03:49:14+00:00",
      "content": "リリース情報  Release v1.1.1 · spf13/cobra · GitHub Highlights from Git 2.29 - The GitHub Blog  Release Git for Windows 2.29.0 · git-for-windows/git · GitHub  「Git for Windows 2.29.0」が公開 ～セットアップ時にデフォルトブランチ名を設定可能 - 窓の杜   Release Git for Windows 2.29.1 · git-for-windows/git · GitHub   「Windows 10 October 2020 Update」が一般公開 ～年2回の大規模アップデート - 窓の杜 KeePassXC 2.6.2 released - KeePassXC The Document Foundation announces LibreOffice 6.4.7 - The Document Foundation Blog Release v1.32.0 · golangci/golangci-lint · GitHub  セキュリティ＆プライバシー関連  Split-Second Phantom Images Fool Autopilots - Schneier on Security グーグル、3年前に中国から2.54TbpsのDDoS攻撃を受けていた - ZDNet Japan 富士通、JCB、みずほ銀行がデジタルアイデンティティーの相互運用で共同実験 - ZDNet Japan Chinese State-SponsoredActors Exploit Publicly Known Vulnerabilities   NSA Advisory on Chinese Government Hacking - Schneier on Security   「Microsoft Edge 86」にゼロデイ脆弱性 ～修正版のv86.0.622.51がリリース - 窓の杜 New Report on Police Decryption Capabilities - Schneier on Security  天文関連  オンライン宇宙セミナー「火星の月から水惑星の起源を探る火星衛星探査計画MMX」のお知らせ | 広島大学 : 参加予定 MIT Tech Review: 日欧の水星探査機、金星フライバイで最新画像を多数撮影 Nokia selected by NASA to build first ever cellular network on the Moon | Nokia : 月から電波を撒き散らす。 NASA 公認か\u0026hellip; NASA’s OSIRIS-REx Spacecraft Successfully Touches Asteroid - OSIRIS-REx Mission  Touch-and-Go complete! NASA OSIRIS-REx completes maneuver to sample Asteroid Bennu - Space Showcase 2020年10月23日ニュース「米国版はやぶさ『オシリス・レックス』が小惑星への着地に成功」 | SciencePortal MIT Tech Review: NASA探査機が小惑星ベンヌとの接触に成功、岩石サンプルを採取   ニュース - アルマ望遠鏡、イオの火山による大気への影響を明らかに - アルマ望遠鏡 NASA to Announce New Science Results About Moon | NASA [2010.11730] Maximum Black Hole mass across Cosmic Time : 重力波 GW190521 は対生成型超新星爆発のせいで作られるはずがないと思われていたブラックホール (~85太陽質量)を含んでいたが、重元素の少ない大質量星で普通に作れるという主張  知財関連  Cloudflare Counters Mass Piracy Allegations in \u0026lsquo;Thothub\u0026rsquo; Lawsuit * TorrentFreak  Linux または Ubuntu に関する話題  Ubuntu Fridge | Ubuntu 20.10 (Groovy Gorilla) released Groovy Gorilla Release Notes - Release - Ubuntu Community Hub Ubuntu 20.10 その12 - Ubuntu 20.10がリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 20.10 その13 - Ubuntu 20.10の新機能と変更点・既知の問題 - kledgeb  Go 言語関連  Goで作るシングルページアプリケーション zetamatta/go-readline-ny: Readline library for golang , used in nyagos Go Validator v10. Validation? Easy Peasy! | by Renaldi | Tunaiku Tech | Oct, 2020 | Medium  その他  手のひらサイズで最大800mm撮影！ キヤノンの望遠鏡型カメラ｢PowerShot ZOOM｣が正式発売決定 | ギズモード・ジャパン /bin/shに慣れた人に贈るバッチファイルの書き方 パッケージマネージャ「scoop」のセットアップ｜scoop / nyagos で始めるコマンドライン生活 CLIでyamlファイルをいい感じに操作できる「yq」を使ってみる HashiCorp「Waypoint」発表。環境やプラットフォームの違いを吸収してコマンド一発でビルド、デプロイ、リリースを実行 － Publickey 広告ブロッカーに影響？ ～ Microsoftが「Edge」で“Manifest V3”対応のテストを開始 - 窓の杜 MIT Tech Review: 世界初、15°C「室温超伝導」達成　夢の新技術へ突破口 AIがエンジニアに脅威をもたらす？\u0026ndash;人間らしい文章を書くAI「GPT-3」 - ZDNet Japan Apacheソフトウェア財団はOpenOfficeの20周年を祝っている場合ではないだろう - YAMDAS現更新履歴 コリイ・ドクトロウが『監視資本主義（の時代）』の問題点を語る - YAMDAS現更新履歴 Characteristics of SARS-CoV-2 and COVID-19 | Nature Reviews Microbiology  ブログ: SARS-CoV-2とCOVID-19の特徴   はてなの記事をZenn形式のMarkdownで保存して管理する 新「Microsoft Edge」と「Google Chrome」がマイナンバーカード方式によるe-Tax送信に対応 - 窓の杜 アトラシアン、今後はクラウドサービスにフォーカス。買い切り型のソフトウェアライセンスは販売終了と発表 － Publickey 凸版印刷・NICT・QunaSys・QunaSys・ISARAが量子セキュアクラウド技術の確立で連携 | TechCrunch Japan Armの買収に伴ってNVIDIAが医学研究に特化したUKスーパーコンピュータの開発を発表 | TechCrunch Japan Which Programming Languages Use the Least Electricity? – The New Stack  ブログ: 最も電力を使わないプログラミング言語は?   新しい「Edge」をアプリに組み込める ～Win32 C/C++向けの「WebView2」が一般公開 - 窓の杜 インテル、NANDメモリー事業を韓国SKハイニックスに売却へ\u0026ndash;約9500億円 - ZDNet Japan GitHubの機能をフルに使って職務経歴書の継続的インテグレーションを実現する editorconfig-checker/editorconfig-checker: A tool to verify that your files are in harmony with your .editorconfig LibreOffice Math Guide 7.0 is Published - The Document Foundation Blog Windows 10でCortanaが起動しないようにする方法 | ライフハッカー［日本版］ マイクロソフト、「Microsoft Edge for Linux」プレビュー版をついにリリース。なぜマイクロソフトがLinux版を開発しているのか？ － Publickey NeovimのためのLua入門 Lua基礎編 MongoDB AtlasがAWS/Azure/GCPにまたがるマルチクラウドクラスタ構成をマネージドサービスでサポート。特定のクラウドが全部落ちても影響しない運用が可能に － Publickey atomエディタにSQLフォーマッターを導入する | cupOF Interests : うーん。 Python が要るのかぁ PDFにすると間違いに気づく理由｜塚本 牧生｜note 「1万時間」は熱意の秤｜塚本 牧生｜note : 「1万時間の法則」なるものにかつての「人月神話」と同じ匂いを感じる .NET Frameworkから.NET Coreへの移植を支援する「Porting Assistant for .NET」を、AWSがオープンソースとして公開 － Publickey PowerShellでGUIDを生成する 電子楽器テルミン誕生100周年を記念してモーグから史上最も美しいモデル「Claravox Centennial」登場 | TechCrunch Japan  "
    },
    {
      "title": "ストップ!! Cortana 君！",
      "section": "remark",
      "description": "こういうのはオプト・インにしてほしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/stop-cortana-kun/",
      "published": "2020-10-25T03:14:44+00:00",
      "update": "2020-10-25T03:20:30+00:00",
      "content": "半年の無職期間に鈍 (なま) りきった身体と心を徐々に再起動中です。\n新しい職場で Windows 10 機を支給されたのだが，いまどき LAN アクセスでピコピコとランプが点滅するマシンらしく，しばらく眺めていたのだが，激しい点滅が止まらんのですよ。\n「何してるのかなぁ」とリソースモニタを眺めてみると SearchUI.exe なるプロセスがエラい勢いで通信してるみたい。 Windows 10 については全く予備知識がなく SearchUI.exe についても知らなかったのだが（最初は malware かと思ったぜw）どうもこれ Cortana とかいう音声入力アシスタントによるプロセスらしい。\nちょろんとググってみたが，バッテリは食うし何もしてなくても激しく通信してくさるので，迷惑に感じてるユーザは多いようだ。 無効化する方法を紹介する記事もあったので，とっとと無効化した。\n Windows 10でCortanaが起動しないようにする方法 | ライフハッカー［日本版］ SearchUI.exeは停止しても大丈夫？停止方法をご紹介！ | Aprico  これで再度リソースモニタを確認してプロセスがないのを確認。 よーし，うむうむ，よーし。\n業務によっては便利なのかもしれないが，基本的に迷惑アプリケーションだよな，これ。 こういうのはオプト・インにしてほしい。\n ストップ!!ひばりくん！コンプリート・エディション　第1巻 江口寿史 (著) フリースタイル 2016-07-12 (Release 2016-07-12) Kindle版 B01ID14CC4 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle で読めるのか。白いワニががが...\nreviewed by Spiegel on 2020-10-25 (powered by PA-APIv5)\n  ごとそん 後藤邑子 (アーティスト), プアゾン (アーティスト) ランティス 2010-01-12 (Release 2010-01-13) CD B002SUPHGM (ASIN), 4540774509713 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  後藤邑子さんの声は反則だと思う。萌え死ぬ。\nreviewed by Spiegel on 2020-10-25 (powered by PA-APIv5)\n "
    },
    {
      "title": "OpenJDK 15.0.1 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "幸いなことに今回は深刻度の高い脆弱性はないようなので，余裕を持ってアップデート作業を行える。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/10/openjdk-15_0_1-is-released/",
      "published": "2020-10-21T10:52:56+00:00",
      "update": "2020-10-21T10:53:48+00:00",
      "content": "定例の Java マイナー・バージョンアップが行われた。\n OpenJDK Vulnerability Advisory: 2020/10/20  幸いなことに今回は深刻度の高い脆弱性はないようだ。 ただし全てのバージョンに影響があるのでご注意を。\n CVE ID Component CVSSv3.1\nScore Affects ...   7 8 11 13 15   CVE-2020-14803 core-libs/java.io 5.3        CVE-2020-14792 hotspot/compiler 4.2        CVE-2020-14782 security-libs/java.security 3.7        CVE-2020-14797 core-libs/java.nio 3.7        CVE-2020-14781 core-libs/javax.naming 3.7        CVE-2020-14779 core-libs/java.io:serialization 3.7        CVE-2020-14796 core-libs/java.io 3.1        CVE-2020-14798 core-libs/java.io 3.1         via OpenJDK Vulnerability Advisory: 2020/10/20  OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk15.0.1/51f4f36ad4ef43e39d0dfdbaf6549e32/9/GPL/openjdk-15.0.1_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-15.0.1_linux-x64_bin.tar.gz $ sudo ln -s jdk-15.0.1 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;15.0.1\u0026#34; 2020-10-20 OpenJDK Runtime Environment (build 15.0.1+9-18) OpenJDK 64-Bit Server VM (build 15.0.1+9-18, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern  うむうむ。 ちゃんと動くな。\n今回は余裕を持ってアップデート作業を行える。 アップデートは計画的に。\nブックマーク  Oracle Critical Patch Update Advisory - October 2020 Oracle Java の脆弱性対策について(CVE-2020-14803等)：IPA 独立行政法人 情報処理推進機構 2020年10月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n   2020-10-12 に PlantUML V1.2020.19 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Steven Levy 原著『暗号化』のデジタル化を希望する！",
      "section": "remark",
      "description": "最悪として原書の Kindle 版を押さえておくのもよい。私は英語不得手だけどな（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/crypto-by-steven-levy/",
      "published": "2020-10-18T02:54:28+00:00",
      "update": "2020-10-18T02:56:40+00:00",
      "content": "やはりできたてのサービスは面白い。 先日 Zenn で面白い記事をみつけた。\n クリプトアナーキスト宣言(Timothy C. May, YAMANE Shinji訳) サイファーパンク宣言(Eric Hughes, YAMANE Shinji訳)  どうもインターネット・アーカイブから発掘されたらしい。\nただ，文脈が切り離された状態でこれだけ読んでもワケワカメだと思うので，古い本ではあるが，スティーブン・レビー原著『暗号化』を是非とも読んでいただきたい。\n 暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n この本は一応ノンフィクション1 に分類されるのだろうが，当時の暗号技術を巡る技術的あるいは政治的状況がとても分かりやすく描写されている。 コンピュータ技術者あるいは科学者を名乗るのなら，この本は（技術史の教材として）必読書と言えるだろう。\n最近また複数の国が暗号通信にバックドアを開けろなどと言ってるみたいなので，なおさら読んでおくべきだ。 公開鍵暗号が発明されてから半世紀弱だが，私達はようやくここまでの成果を手に入れたのである。 これを一時の政治的思惑で手放してはならない。\nでも残念なことに，この本ってば絶版ぽいんだよねぇ。 紙の本は無理でも何とかデジタル化してくれんもんかねぇ。 理想は出版社を替えて達人出版会さんあたりで PDF/EPUB フォーマットで出すの。 自己出版で Kindle 本でも買うよ，私は。\nちなみに原書は CRYPTO: How the Code Rebels Beat the Government \u0026ndash; Saving Privacy in the Digital Age で，これは Kindle 化されているので，最悪としてこれを押さえておくのもよい。 てか，私は押さえている。 英語不得手だけどな（笑）\n  私は「ノンフィクション」というジャンルを「ラノベ未満」と蔑視してるのでこういう言い方になるが，ご容赦を（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-10-18 のブックマーク",
      "section": "bookmarks",
      "description": "「藁人形論法と鋼鉄人形論法」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/10/18-bookmarks/",
      "published": "2020-10-18T01:44:33+00:00",
      "update": "2020-10-18T01:47:33+00:00",
      "content": "リリース情報  Release v2.2.1 · golangci/golangci-lint-action · GitHub Hugo 0.76.4: One Bug Fix | Hugo  Release v0.76.4 · gohugoio/hugo · GitHub   Release 1.52.0 · atom/atom · GitHub Hugo 0.76.5: A couple of Bug Fixes | Hugo  Release v0.76.5 · gohugoio/hugo · GitHub   Release v1.1.0 · spf13/cobra · GitHub Release September 2020 Recovery · microsoft/vscode · GitHub Presenting v7.0.0 of the npm CLI - The GitHub Blog  Announcing npm7 - DEV    バベルのインターネット  Facebookが方針転換してホロコースト否定コンテンツを禁止へ | TechCrunch Japan  セキュリティ＆プライバシー関連  グーグル、「特定の住所を検索した人」のIPアドレスを警察当局に提供 - CNET Japan 日本など7カ国、暗号化された通信へのバックドアをIT企業に要請 - ZDNet Japan Google Responds to Warrants for “About” Searches - Schneier on Security 複数の Microsoft 社製品のサポート終了に伴う注意喚起：IPA 独立行政法人 情報処理推進機構 オープンソースのブラウザーフィンガープリント技術の商用化を目指すFingerprintJSが4億円相当を調達 | TechCrunch Japan LinkedInでの接触から始まった積水化学工業元社員の営業秘密情報持ち出しについてまとめてみた - piyolog Attacks Aimed at Disrupting the Trickbot Botnet — Krebs on Security  US Cyber Command and Microsoft Are Both Disrupting TrickBot - Schneier on Security   マルウェア「Emotet」が「Office」アップデートを装う新たな手口 - ZDNet Japan 「Firefox 81」で“Twitter”が利用不能になる問題 - 窓の杜  天文関連  研究ハイライト：成果報告 重力レンズクエーサーの中心部から吹き出すジェットを検出！ －VERA 宇宙に漂う塵の分布に関する新事実を発見～赤外線衛星データからの発掘～ | 関西学院大学  【プレスリリース】宇宙に漂う塵の分布に関する新事実を発見 ～赤外線衛星データからの発掘～ | 日本の研究.com   遠くの恒星のように太陽を研究 | 国立天文台(NAOJ) Equatorial mountains on Pluto are covered by methane frosts resulting from a unique atmospheric process | Nature Communications  天文学：冥王星の山々の頂上にあるメタンの霜はどうやってできたのか | Nature Communications | Nature Research   Supergiant star Betelgeuse smaller, closer than first thought WATCH: OSIRIS-REx Sample Collection Activities - OSIRIS-REx Mission : タッチダウンは 2020-10-20 18:12-04:00 (EDT) → 2020-10-21 07:12+9:00 (JST) の予定  Linux または Ubuntu に関する話題  Linux その76 - geditがクラウドファンディング開始 - kledgeb  Go 言語関連  Go Conference'20 in Autumn SENDAI 参加リポート Cobra.Dev  その他  一周回って、人間が読み書きする設定ファイルはJSONが良いと思った | フューチャー技術ブログ ポルシェがガソリンエンジン車を持続可能なものにする合成燃料を研究中 | TechCrunch Japan 「月色 Chainon」Short ver.／ももいろクローバーＺ with セーラームーン＆セーラーマーキュリー＆セーラーマーズ＆セーラージュピター＆セーラーヴィーナス - YouTube 低価格デスクトップPCの代替になり得る\u0026ndash;「Raspberry Pi 4」を見る - CNET Japan シェルスクリプトマガジン連載　第１回　Red Hat Decision Manager : 気になるが個人ユーザはお呼びでないらしい android-password-store/Android-Password-Store: Android application compatible with ZX2C4\u0026rsquo;s Pass command line application IBMがレガシーインフラ事業をスピンアウト、クラウド事業に全面的に舵を切る | TechCrunch Japan マイクロソフト、アプリストア10原則を発表\u0026ndash;アップルとグーグルを暗に批判 - CNET Japan 藁人形論法と鋼鉄人形論法 – mhatta\u0026rsquo;s mumbo jumbo ブログ: WindowsをMicrosoft Linuxに置き換えたらどうなるのか? Google、最適化されたコンテナイメージを生成する「buildpacks」をオープンソースで公開。Dockerfile不要でJavaやGo、Node.jsをコンテナへビルド － Publickey Kubernetesを分散ストレージのプラットフォームにする「Rook」、成熟したソフトウェアに到達したとしてCNCFがインキュベーションからの卒業を発表 － Publickey 耳のためにできること。JINSで買える骨伝導サングラスBose Framesを見てきた。｜塚本 牧生｜note KubernetesのPodやネットワークをわざと落としまくってカオスエンジニアリングのテストができる「Chaos Mesh」がバージョン1.0に到達 － Publickey 透明化を真剣に考えるなら広告産業はSDKをオープンソース化せよ | TechCrunch Japan GitHub GraphQL API で自分が作成したリポジトリのリストを出す 「AWS Lambda Extensions」発表。AWS Lambdaにモニタリング用エージェントなどが組み込めるように － Publickey インフラ自動化ツールのAnsibleでKubernetesクラスタの構成や運用管理を実現。Red HatがAdvanced Cluster Managementとの統合機能を発表 － Publickey Apache OpenOfficeへの公開書簡 - LibreOffice日本語チームBlog  「Apache OpenOffice」から「LibreOffice」への移行を ～TDFが公開書簡 - 窓の杜   AWS、独自開発したARMベースの「Graviton 2」プロセッサを、「Amazon ElastiCache」のデフォルトプロセッサに － Publickey 榊の字形について : JIS X 0213:2004 で一部の字形が変更された影響。異体字の話。あとは CJK 統合の悪影響とか。面白いが未整理のまま書かれていて分かりにくいw 国や地域による字形の違いは lang 属性で（フォントが対応していれば）切替可能 時差計算  "
    },
    {
      "title": "ベテルギウスはあと10万年はたたかえる（笑）",
      "section": "remark",
      "description": "ベテルギウスについてはこれからも観測と議論が続くだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/betelgeuse/",
      "published": "2020-10-17T06:00:51+00:00",
      "update": "2020-10-18T01:47:33+00:00",
      "content": "昨年末から天文ファンに話題を振りまいているオリオン座のベテルギウスだが\n ベテルギウスの息継ぎ  おかげさまでより詳細な観測が行われるようになった結果，今まで考えられていたより少しだけ私達の太陽系から近い位置にあるらしいことが分かったそうな。\n Supergiant star Betelgeuse smaller, closer than first thought  この記事によると\n\u0026ldquo;The actual physical size of Betelgeuse has been a bit of a mystery—earlier studies suggested it could be bigger than the orbit of Jupiter. Our results say Betelgeuse only extends out to two thirds of that, with a radius 750 times the radius of the sun,\u0026rdquo; Dr. Molnár said.\n\u0026ldquo;Once we had the physical size of the star, we were able to determine the distance from Earth. Our results show it\u0026rsquo;s a mere 530 light years from us—25 percent closer than previous thought.\u0026rdquo;\n via Supergiant star Betelgeuse smaller, closer than first thought  とのこと。 つってもねぇ\u0026hellip;\nベテルギウスの距離は年周視差を使って計測されていたが\nThe original uploader was Booyabazooka at English Wikipedia., Public domain, via Wikimedia Commons  元より誤差が大きくてあまり信用されてないのですよ。\nちなみに『理科年表 2020』には498光年とあり1，注釈で「誤差が10%を越える」とある。 更に『天文年鑑 2020年版』に至っては430光年と書かれている。 これらのカタログスペックを見慣れている人には「530光年って別に近くなってないよな。つか大体あってる」って感じである（笑）\nで，注目なのは，今回の観測で\n\u0026ldquo;It\u0026rsquo;s burning helium in its core at the moment, which means it\u0026rsquo;s nowhere near exploding,\u0026rdquo; Dr. Joyce said.\n\u0026ldquo;We could be looking at around 100,000 years before an explosion happens.\u0026rdquo;\n via Supergiant star Betelgeuse smaller, closer than first thought  てなことが分かったそうで，10年どころかあと10万年は余裕で戦えるらしい（笑）\nベテルギウスについてはこれからも観測と議論が続くと思うけど，こうやって知見が深まるのはよいことだと思う。\n参考図書  理科年表 2020 国立天文台 (編集) 丸善出版 2019-11-20 文庫 4621304259 (ASIN), 9784621304259 (EAN), 4621304259 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  日本における令和への改元や国際単位系（SI）の定義改定などに関するトピックを多く掲載。2020年版は（保存用として）買いかも。\nreviewed by Spiegel on 2019-12-08 (powered by PA-APIv5)\n  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n  天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいる。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\n  機動戦士ガンダム 富野喜幸 (監督), 株式会社サンライズ (プロデュース)  Prime Video B00FYJ1MMC (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  これのおかげでアニメで戦争論を語る馬鹿（オタク）が増えたと言われる歴史的作品（笑）\nreviewed by Spiegel on 2020-10-17 (powered by PA-APIv5)\n   改訂ヒッパルコス星表（2007）の年周視差から計算。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ランダムな文字列を生成する",
      "section": "golang",
      "description": "というわけで math/rand と crypto/rand はトレードオフの関係にある。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/random-string/",
      "published": "2020-10-16T05:24:30+00:00",
      "update": "2020-10-16T07:52:49+00:00",
      "content": "疑似乱数に関して面白い記事を見つけたので紹介しつつ，こちらでも試してみる。\n Go言語でランダムな文字列を作ってみる najeira/randstr: Generate random string using crypto/rand and math/rand for Go  お題はこんな感じ：\n 英数字62文字（a-zA-Z0-9）からランダムに1文字ずつとって指定の長さの文字列を作成する 同じ文字を何度使ってもよい  また，この記事における前提として，以下の interface 型および定数が定義済みであるとする。\npackage randstr type Random interface { String(int) string } const ( letterBytes = \u0026#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#34; letterBytesLen = len(letterBytes) letterIdxBits = 6 // 6 bits to represent a letter index  letterIdxMask = 1\u0026lt;\u0026lt;letterIdxBits - 1 // All 1-bits, as many as letterIdxBits  letterIdxMax = 63 / letterIdxBits // # of letter indices fitting in 63 bits ) じゃあ，いってみようか\nmath/rand パッケージによる実装 まずは math/rand パッケージを使った実装から。 これについては以下のページの議論が参考になる。\n How to generate a random string of a fixed length in Go? - Stack Overflow  これを参照しつつ，過程をすっ飛ばして最終的に以下のコードにしてみた。\npackage randstr import ( \u0026#34;math/rand\u0026#34; \u0026#34;unsafe\u0026#34; ) type MathRandom struct { src rand.Source } func NewMathRandom(seed int64) Random { return \u0026amp;MathRandom{src: rand.NewSource(seed)} } func (mr *MathRandom) String(len int) string { b := make([]byte, len) for i, cache, rest := 0, mr.src.Int63(), letterIdxMax; i \u0026lt; len; rest-- { if rest \u0026lt;= 0 { cache, rest = mr.src.Int63(), letterIdxMax } if idx := int(cache \u0026amp; letterIdxMask); idx \u0026lt; letterBytesLen { b[i] = letterBytes[idx] i++ } cache \u0026gt;\u0026gt;= letterIdxBits } return *(*string)(unsafe.Pointer(\u0026amp;b)) } Int63() メソッドで63ビット分の乱数を取って6ビットずつ切り出して使うイメージ。 ただし参照する letterBytes が62文字分なのに対し6ビット整数では 0-63 まであるので，値がはみ出る場合は取得した6ビット乱数を捨てている。 letterBytes に適当な記号を2文字足してやればロスは無くなるだろうが，お題から外れるので今回は割愛する。\n最後の\nreturn *(*string)(unsafe.Pointer(\u0026amp;b)) は少々トリッキーだが []byte インスタンスをコピーなしに string 型にキャストするための「お呪い (おまじない) 」だと思えばいい1。\n文字通り unsafe な操作なので，乱用して「呪い (のろい) 」にならないようご注意を（笑）\ncrypto/rand パッケージによる実装 次は crypto/rand パッケージを使った実装。\ncrypto/rand パッケージでは乱数の生成に専用デバイスを使う。\nOn Linux and FreeBSD, Reader uses getrandom(2) if available, /dev/urandom otherwise. On OpenBSD, Reader uses getentropy(2). On other Unix-like systems, Reader reads from /dev/urandom. On Windows systems, Reader uses the CryptGenRandom API. On Wasm, Reader uses the Web Crypto API. via rand - The Go Programming Language  そのため math/rand と比べてどうしても処理速度が遅くなる。 したがって rand.Read() 関数の呼び出し回数を抑えるよう実装するのがコツである。\n最初に挙げた記事を参考にしつつ，こんな感じでどうだろう。\npackage randstr import ( \u0026#34;crypto/rand\u0026#34; \u0026#34;unsafe\u0026#34; ) type CryptoRandom struct{} func NewCryptoRandom() Random { return \u0026amp;CryptoRandom{} } func (cr *CryptoRandom) String(len int) string { b := make([]byte, len) for i, offset, size, rest := 0, 0, 0, 0; i \u0026lt; len; rest-- { //fmt.Println(i, offset, size, rest)  if rest \u0026lt;= 0 { offset = i var err error size, err = rand.Read(b[offset:]) if err != nil || size \u0026lt;= 0 { return \u0026#34;\u0026#34; } rest = size } if idx := int(b[offset+(size-rest)] \u0026amp; letterIdxMask); idx \u0026lt; letterBytesLen { b[i] = letterBytes[idx] i++ } } return *(*string)(unsafe.Pointer(\u0026amp;b)) } インタフェースを合わせるためにエラーハンドリングをサボっているが，ご容赦を。\nrand.Read() 関数で乱数をいったんバッファに展開し，その後文字に置き換えていく。 ただし letterBytes からはみ出る場合はその値を捨てて，捨てた分をまとめて rand.Read() 関数で再取得する，という動作を繰り返している。\nベンチマークをとってみる んじゃあ，これらのコードを使ってベンチマークをとってみよう。 こんなテスト・コードでどうだろう。\npackage randstr_test import ( \u0026#34;randstr\u0026#34; \u0026#34;testing\u0026#34; \u0026#34;time\u0026#34; ) const ( len64 = 64 len128 = 128 max512 = len64 * 8 max1024 = len128 * 8 ) func BenchmarkRandomStringMath64t8(b *testing.B) { r := randstr.NewMathRandom(time.Now().UnixNano()) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { for n := 0; n \u0026lt; max512/len64; n++ { _ = r.String(len64) } } } func BenchmarkRandomStringMath512(b *testing.B) { r := randstr.NewMathRandom(time.Now().UnixNano()) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = r.String(max512) } } func BenchmarkRandomStringMath128t8(b *testing.B) { r := randstr.NewMathRandom(time.Now().UnixNano()) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { for n := 0; n \u0026lt; max1024/len128; n++ { _ = r.String(len128) } } } func BenchmarkRandomStringMath1024(b *testing.B) { r := randstr.NewMathRandom(time.Now().UnixNano()) b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = r.String(max1024) } } func BenchmarkRandomStringCrypto64t8(b *testing.B) { r := randstr.NewCryptoRandom() b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { for n := 0; n \u0026lt; max512/len64; n++ { _ = r.String(len64) } } } func BenchmarkRandomStringCrypto512(b *testing.B) { r := randstr.NewCryptoRandom() b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = r.String(max512) } } func BenchmarkRandomStringCrypto128t8(b *testing.B) { r := randstr.NewCryptoRandom() b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { for n := 0; n \u0026lt; max1024/len128; n++ { _ = r.String(len128) } } } func BenchmarkRandomStringCrypto1024(b *testing.B) { r := randstr.NewCryptoRandom() b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { _ = r.String(max1024) } } 処理内容を表にするとこんな感じ。\n   テスト名 使用パッケージ 処理内容     BenchmarkRandomStringMath64t8 math/rand 64バイト文字列生成×8   BenchmarkRandomStringMath512 math/rand 512バイト文字列生成   BenchmarkRandomStringMath128t8 math/rand 128バイト文字列生成×8   BenchmarkRandomStringMath1024 math/rand 1,024バイト文字列生成   BenchmarkRandomStringCrypto64t8 crypto/rand 64バイト文字列生成×8   BenchmarkRandomStringCrypto512 crypto/rand 512バイト文字列生成   BenchmarkRandomStringCrypto128t8 crypto/rand 128バイト文字列生成×8   BenchmarkRandomStringCrypto1024 crypto/rand 1,024バイト文字列生成    では実際に動かしてみよう。\n$ go test -bench RandomString -benchmem goos: linux goarch: amd64 pkg: randstr BenchmarkRandomStringMath64t8-4 641556 1616 ns/op 512 B/op 8 allocs/op BenchmarkRandomStringMath512-4 899421 1386 ns/op 512 B/op 1 allocs/op BenchmarkRandomStringMath128t8-4 357760 3093 ns/op 1024 B/op 8 allocs/op BenchmarkRandomStringMath1024-4 407550 2820 ns/op 1024 B/op 1 allocs/op BenchmarkRandomStringCrypto64t8-4 81285 14320 ns/op 512 B/op 8 allocs/op BenchmarkRandomStringCrypto512-4 241180 4827 ns/op 512 B/op 1 allocs/op BenchmarkRandomStringCrypto128t8-4 64815 18358 ns/op 1024 B/op 8 allocs/op BenchmarkRandomStringCrypto1024-4 149160 8212 ns/op 1024 B/op 1 allocs/op PASS ok randstr 10.851s これも表にまとめてみる。 処理回数でソートしているのでご注意を。\n   使用パッケージ 処理内容 ns/op Alloc\nSize Alloc\nCount Ratio     math/rand 64バイト文字列生成×8 1,616 512 8 1.0   math/rand 128バイト文字列生成×8 3,093 1024 8 1.9   crypto/rand 64バイト文字列生成×8 14,329 512 8 8.9   crypto/rand 128バイト文字列生成×8 18,358 1024 8 11.3           math/rand 512バイト文字列生成 1,386 512 1 1.0   math/rand 1,024バイト文字列生成 2,820 1024 1 2.0   crypto/rand 512バイト文字列生成 4,827 512 1 3.5   crypto/rand 1,024バイト文字列生成 8,212 1024 1 5.9    math/rand パッケージを使った実装は分かりやすい。 文字列が長くなると処理時間が長くなり，アロケーション回数が多いと更に時間がかかる。\ncrypto/rand パッケージについては，やはりメソッドの呼び出し回数がボトルネックになっているようだ。 文字列の長さやアロケーション回数の影響を大きく上回っている。\nmath/rand パッケージを使った実装でも Read() メソッドでまとめて乱数を取得したほうが速くなるんじゃね？ って思うよね。 私も思った。 ので，実際に試してベンチマークもとったのだが， Int63() メソッドで63ビットずつ取るほうが速いのよ，これが。\nまぁ，中身を見れば分かるが，math/rand パッケージの Read() メソッドは中で Int63() メソッドを呼び出して8ビットずつ切り分けているだけなので，そのオーバヘッド分だけ遅くなってしまうようだ。 残念！\n 科学技術用の疑似乱数生成器と暗号技術用の乱数生成器 科学技術用の疑似乱数生成器と暗号技術用の乱数生成器では求められる要件が異なる。\n科学技術用の疑似乱数生成器で最重要なのは「高次元均等分布」な乱数を生成できることで，その次に重要なのは高速に乱数が生成できることである。\n一方，暗号技術用の乱数生成器で最重要なのは「予測困難性」である。\nたとえば，科学技術用の疑似乱数生成器の多くは，アルゴリズムで乱数を生成するため，起点となる seed が決まれば生成される値が確定してしまう。 これが科学技術用の疑似乱数生成器が暗号技術には向かないとされる理由だ。\nしかし，現時点の技術で「予測困難」な乱数を作るためには何らかの方法で外乱要素（またはエントロピー源）を組み込む必要があるため2，どうしても乱数の生成速度が遅くなる。 大量の乱数を必要とする科学技術計算には向かないわけだ。\nというわけで math/rand と crypto/rand はトレードオフの関係にある。 上手く使い分けて欲しい。\nブックマーク  モンテカルロ法による円周率の推定（その4 PRNG） Go の疑似乱数生成器は Goroutine-Safe ではないらしい（追記あり） 疑似乱数生成器 spiegel-im-spiegel/mt  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n  Goならわかるシステムプログラミング 渋川 よしき (著), ごっちん (イラスト) ラムダノート 2017-10-23 単行本（ソフトカバー） 4908686033 (ASIN), 9784908686030 (EAN), 4908686033 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ファイルやソケットなどに代表される順次アクセスの汎化である io.Reader / io.Writer およびその派生・特化クラス，またプロセスやスレッドに関する解説が秀逸だと思う。さらに Docker コアの libcontainer についても解説がある。\nreviewed by Spiegel on 2018-10-19 (powered by PA-APIv5)\n  改訂2版 みんなのGo言語 松木 雅幸 (著), mattn (著), 藤原 俊一郎 (著), 中島 大一 (著), 上田 拓也 (著), 牧 大輔 (著), 鈴木 健太 (著) 技術評論社 2019-08-01 (Release 2019-08-01) Kindle版 B07VPSXF6N (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  改訂2版の目玉は7章の「データベースの扱い方」が追加されたことだろう。他の章では，大まかな構成は1版と同じだが細かい部分が変わっていて Go 1.12 への言及まであるのには驚いた。\nreviewed by Spiegel on 2019-08-12 (powered by PA-APIv5)\n   *(*string)(unsafe.Pointer(\u0026amp;b)) なキャストは strings.Builder の String() メソッドで使われている手法の丸パクリだったりする（笑） \u0026#x21a9;\u0026#xfe0e;\n /dev/urandom はハードウェア・デバイスから十分なエントロピー源が得られない場合は内部で疑似乱数生成器を使用する。このため一時は /dev/urandom の脆弱性が疑われたが，現時点では事実上は問題ないとされている。一方で，スマートデバイスのような場合はハードウェア・デバイスからのエントロピー源だけでは外部から推測され易いため，性能のよい疑似乱数生成器を組み合わせるほうが有効になる場合もあるようだ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "ちょこっと SEO",
      "section": "remark",
      "description": "サイト内 S/N 比を上げるための SEO はアリなんじゃないかというわけで，このブログサイトを少し整理することにした。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/seo/",
      "published": "2020-10-15T06:52:10+00:00",
      "update": "2020-10-15T23:10:05+00:00",
      "content": "正直に告白します。 今まで SEO (Search Engine Optimization) を馬鹿にしてました。 怪しげな Web 開発会社やコンサルタントが競馬の予想屋の如き呪文を唱えて哀れな子羊からお金を掠め取るのが SEO だと思ってました。\nでも Zenn 公式の\n ユーザー投稿型サービスのSEO対策  を読んで目から鱗が落ちました。 検索サービスに媚びる SEO ではなく，検索サービス経由で来るユーザから見て，サイト内 S/N 比を上げる（ノイズを検索クローラに拾わせない）ための SEO はアリなんじゃないかと。\nというわけで，上の記事を参考にこのブログサイトを少し整理することにした。\nタイトルをシンプルにする 今まで \u0026lt;title\u0026gt; 要素にセットしていたのは\nページ・タイトル ― セクション・タイトル | サイト・タイトル という構成だったのだが，ページ・タイトルの後ろの文字列が長いのは気になっていた。 やっぱタイトルが長いのはアカンらしい。\n流石に Zenn のようにサイト・タイトルまで切り詰める勇気はなかったが「セクション・タイトルは要らんな」ちうことでバッサリ削除することにした。 セクション分けは完全に私個人の都合なので（検索サービス経由で）外からくるユーザには意味ないだろ，ということで。\n一方 OGP の\n\u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;〜\u0026#34;\u0026gt; のほうはページ・タイトルのみを設置することにした。 所謂「パンくずリスト」については JSON-LD 設置絡みで整理できているので問題ない。\nタグ関連ページを noindex とする このブログ・サイトは記事を「セクション」と「タグ」で分類している。 ひとつの記事にはひとつのセクションしか指定できないが，タグは複数指定できる。 セクションが縦串でタグが横串みたいなイメージ。\nタグは，それ自体かなりの数がある上にタグ毎に列挙される記事が重複してしまうため，関連ページの中身がかなり冗長になることは気になっていた。\nそこでタグ関係のページには\n\u0026lt;meta name=\u0026#34;robots\u0026#34; content=\u0026#34;noindex\u0026#34;\u0026gt; を設置してインデクス対象外となるようにした。 実際，エゴサーチしててもタグ関連のページがぞろぞろ出てきて鬱陶しかったのよ。\nブックマーク収集セクションを noindex で nofollow とする Bookmarks セクションは元々，愛用していたソーシャルブックマーク・サービスがダメぽい感じになったので自前で収集できるように作ったものである。\n私としては気になるページをあまり考えることなく溜め込んでおけるので（欲しい情報を探すときは grep が使えるし）重宝しているのだが，他所から来た人から見ればこれ以上ノイズ塗れのページはないよね（笑）\nちうわけで bookmarks セクションはまるっと noindex 化することにした。 加えてリンクの \u0026lt;a\u0026gt; 要素にも rel=\u0026quot;nofollow\u0026quot; 属性を設置して評価対象外となるようにした。\nありがたいことに Hugo では Markdown Render Hooks の仕組みを使って \u0026lt;a\u0026gt; 要素をカスタマイズできる。 しかも v0.71 からはセクション毎にこれを設置できるようになった。\n今回であれば layouts/bookmarks/_markup ディレクトリを掘り render-link.html ファイルを設置すればいい。 中身はこんな感じ。\n\u0026lt;a href=\u0026#34;{{ .Destination | safeURL }}\u0026#34; rel=\u0026#34;nofollow\u0026#34;{{ with .Title }} title=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt;{{ .Text | safeHTML }}\u0026lt;/a\u0026gt; よーし，うむうむ，よーし。\nトップページをダイエットする 最後に SEO とはたぶん関係ないけど，トップページに情報を継ぎ足していったら煩雑になりすぎてしまったので，新着記事のリスト以外はステータス・ページに移動した。 まぁ，うちのブログサイトにトップページから入る人はおらんじゃろうけど（笑）\nこれでスッキリ！\n"
    }
  ]
}
