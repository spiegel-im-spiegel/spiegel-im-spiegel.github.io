{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "天下無敵のプー太郎",
      "section": "remark",
      "description": "次の仕事が得られるまでどのくらい時間がかかるか分からないが，あり余る時間を趣味に没頭していく所存である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/04/i-am-a-neet/",
      "published": "2020-04-01T12:59:18+00:00",
      "update": "2020-04-01T12:59:47+00:00",
      "content": "皆さんご機嫌はいかがですか。 悪夢の4月1日 (エイプリルフール) を今年も無事やり過ごせたようなので，通常運転を再開しよう。\nWHO の situation report を見る限り，世界レベルではようやく峠を超えた感じだけど日本は今が正念場だよね（まぁ第3第4のピークが来ないとも限らないが）。\n私個人は3月いっぱいで目出度く職場をクビになったので，しばらく NEET (Not in Employment, Education or Training) でもしようかなぁ，という感じ。 せっかく自粛ムードだし，私は「人に会わない」ことに全くストレスを感じないので（むしろ実家で家族と顔をつきあわせる生活を1年以上続けられている自分を褒めたい），不謹慎ながら今の状況は大歓迎である。\n“The trade-offs are changing” SARS 2 関連については思うところは沢山あるし愚痴を書いたらキリがないが1，今回は以下の記事を紹介するに留める。\n EFF and COVID-19: Protecting Openness, Security, and Civil Liberties | Electronic Frontier Foundation As Coronavirus Surveillance Escalates, Personal Privacy Plummets - The New York Times Privacy vs. Surveillance in the Age of COVID-19 - Schneier on Security  例によって Bruce Schneier 先生の要約記事が分かりやすいので，そちらを参考にするが EFF の\nWe must be sure that measures taken in the name of responding to COVID-19 are, in the language of international human rights law, “necessary and proportionate” to the needs of society in fighting the virus. Above all, we must make sure that these measures end and that the data collected for these purposes is not re-purposed for either governmental or commercial ends. via Protecting Openness, Security, and Civil Liberties  という一文には激しく同意するものである。 ついでに以下の tweet も挙げておくか。\nかつてThe Economistは、「テロ対策と称して国家統制を許し、自由を捨てるな。テロで人が死ぬ。それがどうした」と言い放つ強さを持っていたけれど、いまコロナを前にして「国家統制を認めて自由を捨てるな。コロナで人が死ぬ。それがどうした」と言うだけの勇気はないらしい。でもそう言うべきだ。\n\u0026mdash; Hiroo Yamagata (@hiyori13) March 20, 2020  現代の人々にとって「健康」とは呪 (のろ) いのようなものかもしれない。\nリスク評価には「科学的リスク」と「政治的リスク」がある。 「政治的リスク」で重要なのは「その後」についてきちんと目配せできているかどうかである。 いくら危機的状況であっても「その後」に配慮しないその場しのぎの「政策」は悪手だ。\n リスクは事前と事後をセットで考える  そういう観点で是非とも議論していただきたいものである。 まぁ，私は（そういうのに巻き込まれたくないので）今年も政治的無監視を貫くけどね。 政治がどうこう言うような精神的余裕はない。\nそろそろ本格的に\u0026hellip; せっかく時間があり余ってるので，色々遊んでみたい。 プログラミング関連では\n Go Rust Haskell  の優先順位で 勉強 もとい遊んでみようかな，と。\nGo と Rust は同じ制御系言語なのに思想が真逆で実に面白い。\nGo は典型的な手続き型言語で並列処理やメモリ管理を隠蔽することでシンプルな記述を可能にしている。 Rust は並列処理やメモリ管理については剥き出しだが，その分（標準ライブラリを含めて）豊かな語彙を持っている。\nあと Rust を勉強し始めて痛感したが，やっぱ関数型プログラミング言語についてきちんと学ばないとダメだわ。 そういう意味で Haskell をもう一度勉強し直そうかと思っている。\n次の仕事が得られるまでどのくらい時間がかかるか分からないが，あり余る時間を趣味に没頭していく所存である（笑）\nブックマーク  クーリエ連載；エコノミスト紹介、自由のためなら人が死んでもいい（この中で紹介されている「自由の本当のコスト」の原文） 専門家会議の「クラスター対策」の解説　――新型コロナウイルスに対処する最後の希望｜吉峯 耕平｜note ある医師がエンジニアに寄せた“コロナにまつわる現場の本音” (1/10) - EE Times Japan    詳しくは Facebook の私の記述を参考に。友人以外は読めないようにしてるけど（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "CommonMark と Hugo 0.68",
      "section": "remark",
      "description": "てっきり yuin/goldmark パーサのバグだと思っていたのだが，どうやら CommonMark の仕様らしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/03/commonmark-and-hugo/",
      "published": "2020-03-29T06:04:41+00:00",
      "update": "2020-03-29T09:05:07+00:00",
      "content": "先日 Hugo 0.68.x がリリースされたのだが\n Minify config and more! | Hugo Hugo 0.68.1: 1 bug fix | Hugo Hugo 0.68.2: A couple of Bug Fixes | Hugo Hugo 0.68.3: A couple of Bug Fixes | Hugo  どうもまた markdown 周りの挙動が変わったようだ。 例えば\n[string] を [][rune] に変換する。 [string]: http://golang.org/ref/spec#String_types [rune]: http://blog.golang.org/strings \u0026#34;Strings, bytes, runes and characters in Go - The Go Blog\u0026#34; をレンダリングすると\n\u0026lt;a href=\u0026#34;http://golang.org/ref/spec#String_types\u0026#34;\u0026gt;string\u0026lt;/a\u0026gt; を \u0026lt;a href=\u0026#34;http://blog.golang.org/strings\u0026#34; title=\u0026#34;Strings, bytes, runes and characters in Go - The Go Blog\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; に変換する。   string を  に変換する。  てな感じに [] 記述がまるっと抜け落ちて \u0026lt;a\u0026gt; 要素の中身も空になってしまう。 てっきり yuin/goldmark パーサのバグだと思っていたのだが，どうやらこれは CommonMark の仕様のようだ。\n具体的には\n[foo][bar] [bar]: http://bar と記述すると\n\u0026lt;a href=\u0026#34;http://bar\u0026#34;\u0026gt;foo\u0026lt;/a\u0026gt; のように [bar] で生成される \u0026lt;a\u0026gt; 要素の中身を foo に置き換えるらしい。 じゃあ今までがバグだったってこと？\nこれを回避するには\n\\[foo][bar]  [bar]: http://bar とエスケープすれば\n[foo]\u0026lt;a href=\u0026#34;http://bar\u0026#34;\u0026gt;bar\u0026lt;/a\u0026gt;   [foo]bar  と意図通りにレンダリングしてくれる。 なので最初の記述も\n[string] を \\[][rune] に変換する。  [string]: http://golang.org/ref/spec#String_types [rune]: http://blog.golang.org/strings \u0026#34;Strings, bytes, runes and characters in Go - The Go Blog\u0026#34; とすれば\n\u0026lt;a href=\u0026#34;http://golang.org/ref/spec#String_types\u0026#34;\u0026gt;string\u0026lt;/a\u0026gt; を []\u0026lt;a href=\u0026#34;http://blog.golang.org/strings\u0026#34; title=\u0026#34;Strings, bytes, runes and characters in Go - The Go Blog\u0026#34;\u0026gt;rune\u0026lt;/a\u0026gt; に変換する。   string を []rune に変換する。  とできた。\n私のブログでは影響が出たのが（結果的には）一箇所のみだったので直すのは簡単だったが，特に Go 言語では [] はスライスを意味する記述なので，今後は気をつけないとなぁ。 まぁ \u0026lt;code\u0026gt; 要素（`...`）で囲むのが無難か。\n改めて CommonMark の仕様を眺めてみたが，不可思議な記述が沢山ある。 たとえば\n[bar][] [bar]: http://bar と書くと\n\u0026lt;a href=\u0026#34;http://bar\u0026#34;\u0026gt;bar\u0026lt;/a\u0026gt; てな感じに，これまた [] が吸い込まれる。 しかも\n[bar][foo] [bar]: http://bar とすると，今度は \u0026lt;a\u0026gt; 要素が外れてただの\n[bar][foo] となる。 なんだよそれ orz\n雑すぎんだろ！ 一度ちゃんと文法を整理したほうがいいんじゃないのか？\n"
    },
    {
      "title": "Writers パッケージを作ってみた",
      "section": "golang",
      "description": "言語的に面白いトピックはないし，手遊びということで。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/writers-package/",
      "published": "2020-03-28T11:40:05+00:00",
      "update": "2020-03-29T03:01:38+00:00",
      "content": "Twitter で\nできればLogレベルでファイル分割したいところですが、Goの情報はなかなか見つからなかった...。\nTrace/Debug/Info/Warning\nError/Fatal\nとかいう好きな単位でログファイルを切り替えられれば、別ツイのtail -f時のノイズ削減になりそう。https://t.co/MTyoOqyvgQ\n(分割について記載なすび)\n\u0026mdash; SIG (@sig_246) March 26, 2020  というのを見かけたので，試しに作ってみた。\n spiegel-im-spiegel/writers: Filtering Writer  いや tee および grep コマンドを組み合わせれば出力の分割はできるんだけどね1。 まぁ，言語的に面白いトピックはないし，手遊びということで。\nたとえば，拙作の logf パッケージを使ってこんなログ出力を考えてみる。\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/logf\u0026#34; ) func main() { logf.SetOutput(os.Stdout) for i := 0; i \u0026lt; 6; i++ { logf.SetMinLevel(logf.TRACE + logf.Level(i)) logf.Tracef(\u0026#34;Traceing: No. %d\\n\u0026#34;, i+1) logf.Debugf(\u0026#34;Debugging: No. %d\\n\u0026#34;, i+1) logf.Printf(\u0026#34;Information: No. %d\\n\u0026#34;, i+1) logf.Warnf(\u0026#34;Warning: No. %d\\n\u0026#34;, i+1) logf.Errorf(\u0026#34;Erroring: No. %d\\n\u0026#34;, i+1) logf.Fatalf(\u0026#34;Fatal Erroring: No. %d\\n\u0026#34;, i+1) } } これを実行すると，こんな感じになる。\n$ go run sample.go 2020/03/28 14:44:44 [TRACE] Traceing: No. 1 2020/03/28 14:44:44 [DEBUG] Debugging: No. 1 2020/03/28 14:44:44 [INFO] Information: No. 1 2020/03/28 14:44:44 [WARN] Warning: No. 1 2020/03/28 14:44:44 [ERROR] Erroring: No. 1 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 1 2020/03/28 14:44:44 [DEBUG] Debugging: No. 2 2020/03/28 14:44:44 [INFO] Information: No. 2 2020/03/28 14:44:44 [WARN] Warning: No. 2 2020/03/28 14:44:44 [ERROR] Erroring: No. 2 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 2 2020/03/28 14:44:44 [INFO] Information: No. 3 2020/03/28 14:44:44 [WARN] Warning: No. 3 2020/03/28 14:44:44 [ERROR] Erroring: No. 3 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 3 2020/03/28 14:44:44 [WARN] Warning: No. 4 2020/03/28 14:44:44 [ERROR] Erroring: No. 4 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 4 2020/03/28 14:44:44 [ERROR] Erroring: No. 5 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 5 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 6 これを出発点とする。\n出力を多重化するには io.MultiWriter() 関数を使うとよい。 こんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34;  \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/logf\u0026#34; ) func main() { file, err := os.Create(\u0026#34;log.txt\u0026#34;) if err != nil { fmt.Printf(\u0026#34;%#v\\n\u0026#34;, err) return } defer file.Close() ws := io.MultiWriter( file, os.Stdout, )  logf.SetOutput(ws) for i := 0; i \u0026lt; 6; i++ { logf.SetMinLevel(logf.TRACE + logf.Level(i)) logf.Tracef(\u0026#34;Traceing: No. %d\\n\u0026#34;, i+1) logf.Debugf(\u0026#34;Debugging: No. %d\\n\u0026#34;, i+1) logf.Printf(\u0026#34;Information: No. %d\\n\u0026#34;, i+1) logf.Warnf(\u0026#34;Warning: No. %d\\n\u0026#34;, i+1) logf.Errorf(\u0026#34;Erroring: No. %d\\n\u0026#34;, i+1) logf.Fatalf(\u0026#34;Fatal Erroring: No. %d\\n\u0026#34;, i+1) } } これで標準出力と log.txt ファイルに全く同じ内容が出力される。\n次に，標準出力には [ERROR] と [FATAL] のログのみ出力したい。 そこでこんな型を考える。\npackage writers //FilterWriter type is Writer with filter type FilterWriter struct { word []byte writer io.Writer } この型に対して以下の Write() メソッド\n//Write function writes bytes data. func (w *FilterWriter) Write(b []byte) (int, error) { if w.match(b) { return w.writer.Write(b) } return len(b), nil } func (w *FilterWriter) match(b []byte) bool { if len(b) == 0 { return false } if w.word == nil { return true } return bytes.Contains(b, w.word) } を組み込めば，設定したキーワードを含んでいる場合のみ書き込みを行うようになる。\nwriters.FilterWriter を使って先程のコードを書き換えてみよう。 こんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/logf\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/writers\u0026#34; ) func main() { file, err := os.Create(\u0026#34;log.txt\u0026#34;) if err != nil { fmt.Printf(\u0026#34;%#v\\n\u0026#34;, err) return } defer file.Close() ws := io.MultiWriter( file, writers.Filter(os.Stdout, []byte(\u0026#34;[ERROR]\u0026#34;)), writers.Filter(os.Stdout, []byte(\u0026#34;[FATAL]\u0026#34;)), )  logf.SetOutput(ws) for i := 0; i \u0026lt; 6; i++ { logf.SetMinLevel(logf.TRACE + logf.Level(i)) logf.Tracef(\u0026#34;Traceing: No. %d\\n\u0026#34;, i+1) logf.Debugf(\u0026#34;Debugging: No. %d\\n\u0026#34;, i+1) logf.Printf(\u0026#34;Information: No. %d\\n\u0026#34;, i+1) logf.Warnf(\u0026#34;Warning: No. %d\\n\u0026#34;, i+1) logf.Errorf(\u0026#34;Erroring: No. %d\\n\u0026#34;, i+1) logf.Fatalf(\u0026#34;Fatal Erroring: No. %d\\n\u0026#34;, i+1) } } これで標準出力が\n$ go run sample.go 2020/03/28 14:44:44 [ERROR] Erroring: No. 1 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 1 2020/03/28 14:44:44 [ERROR] Erroring: No. 2 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 2 2020/03/28 14:44:44 [ERROR] Erroring: No. 3 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 3 2020/03/28 14:44:44 [ERROR] Erroring: No. 4 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 4 2020/03/28 14:44:44 [ERROR] Erroring: No. 5 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 5 2020/03/28 14:44:44 [FATAL] Fatal Erroring: No. 6 となった。\n単純な比較のみだと複雑なパターンを構成し辛いので，正規表現バージョンも作ってみた。\n//RegexpWriter type is Writer with regular expression filter type RegexpWriter struct { re *regexp.Regexp writer io.Writer } //WriteString function writes string. func (w *RegexpWriter) Write(b []byte) (int, error) { if w.match(b) { return w.writer.Write(b) } return len(b), nil } func (w *RegexpWriter) match(b []byte) bool { if len(b) == 0 { return false } if w.re == nil { return true } return w.re.Match(b) } これを使えば，先程のコードはこんな感じにできる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;regexp\u0026#34;  \u0026#34;github.com/spiegel-im-spiegel/logf\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/writers\u0026#34; ) func main() { file, err := os.Create(\u0026#34;log.txt\u0026#34;) if err != nil { fmt.Printf(\u0026#34;%#v\\n\u0026#34;, err) return } defer file.Close() ws := io.MultiWriter( file, writers.FilterRegexp(os.Stdout, regexp.MustCompile(`\\[(ERROR|FATAL)\\]`)), )  logf.SetOutput(ws) for i := 0; i \u0026lt; 6; i++ { logf.SetMinLevel(logf.TRACE + logf.Level(i)) logf.Tracef(\u0026#34;Traceing: No. %d\\n\u0026#34;, i+1) logf.Debugf(\u0026#34;Debugging: No. %d\\n\u0026#34;, i+1) logf.Printf(\u0026#34;Information: No. %d\\n\u0026#34;, i+1) logf.Warnf(\u0026#34;Warning: No. %d\\n\u0026#34;, i+1) logf.Errorf(\u0026#34;Erroring: No. %d\\n\u0026#34;, i+1) logf.Fatalf(\u0026#34;Fatal Erroring: No. %d\\n\u0026#34;, i+1) } } これで同じ結果が得られる。\n今回はベースの Writer に出力多重化やらフィルタやらの機能を被せているだけなので，色々と応用が効くだろう。 効くといいな（笑）\nブックマーク  Log パッケージで遊ぶ 正規表現に関する戯れ言  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   ちなみに Go の標準パッケージにも io.TeeReader() 関数ってのがあって tee コマンドと同等のことができる。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Font Awesome 5.13 に COVID-19 関連アイコンが登場",
      "section": "remark",
      "description": "covid-19 タグで検索すると色々と見つかるので，参考にどうぞ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/03/covid-19-icons-in-font-awesome/",
      "published": "2020-03-25T02:00:26+00:00",
      "update": "2020-03-25T02:00:43+00:00",
      "content": "先日リリースされた Font Awesome 5.13 には SARS-CoV-2，世間で言うところの COVID-19 関連のアイコンが追加されたそうな1。 たとえばこんな感じ。\n   アイコン コード      \u0026lt;i class=\u0026quot;fas fa-virus\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fas fa-viruses\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fas fa-virus-slash\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    ウイルスのイメージって今後はこれで定着するのかねぇ。 私はバクテリオファージのインパクトが強すぎて，ウイルスといえば\n File:Tevenphage.png - Wikimedia Commons  これなんだけど（笑）\ncovid-19 タグで検索すると既存のアイコンも併せて医療関係のアイコンを見つけることができる。 参考にどうぞ。 個人的には\n   アイコン コード      \u0026lt;i class=\u0026quot;fas fa-toilet-paper-slash\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fas fa-plane-slash\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    に笑ってしまった。 世相を反映してるというか\u0026hellip;\n  SARS-CoV-2 はウイルスの分類名， COVID-19 は WHO が定義した SARS-CoV-2 によって引き起こされる病状等を指すIDコード，らしい。日本では今だに「新型コロナ（ウイルス）」という暫定名が流通しているが，それ以外では何故か COVID-19 の ID コードがよく使われている。私は面倒くさいので SARS 2 と呼んでいる。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Java 14 がリリースされた",
      "section": "release",
      "description": "まぁ，私は PlantUML が問題なく動けばいいので（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/03/java-14-is-released/",
      "published": "2020-03-22T07:29:03+00:00",
      "update": "2020-03-29T00:57:08+00:00",
      "content": "ちょっと前に予定通り Java 14 がリリースされた。 OpenJDK および同系列の Java のみのショート・サイクルのバージョンアップである。\n JDK 14 JDK 14 GA Release JDK 14 Release Notes  まぁ，私は PlantUML が問題なく動けばいいので1（笑）\nOpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk14/076bab302c7b4508975440c56f6cc26a/36/GPL/openjdk-14_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-14_linux-x64_bin.tar.gz $ sudo ln -s jdk-14 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;14\u0026#34; 2020-03-17 OpenJDK Runtime Environment (build 14+36-1461) OpenJDK 64-Bit Server VM (build 14+36-1461, mixed mode, sharing) PlantUML のほうも試してみるかな。\n Factory Method Pattern  よーし，うむうむ，よーし。\nブックマーク  Java 14正式版が登場。テキストブロック、インストーラー作成ツールなど新機能。Solaris/SPARC版はついに引退 － Publickey Java 14新機能まとめ - Qiita 真面目に PlantUML  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n   2020-03-19 に PlantUML V1.2020.5 がリリースされている。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-03-22 のブックマーク",
      "section": "bookmarks",
      "description": "「GitHubがJavaScriptのパッケージマネージャー「npm」を買収」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/03/22-bookmarks/",
      "published": "2020-03-22T04:59:05+00:00",
      "update": "2020-03-22T04:59:21+00:00",
      "content": "リリース情報  Hugo 0.67.0: Custom HTTP headers | Hugo Release 1.45.0 · atom/atom · GitHub Announcing Rust 1.42.0 | Rust Blog Hugo 0.67.1: A couple of Bug Fixes | Hugo JDK 14 GA Release  JDK 14 JDK 14 Release Notes Java 14正式版が登場。テキストブロック、インストーラー作成ツールなど新機能。Solaris/SPARC版はついに引退 － Publickey   LibreOffice 6.4.2 available for download - The Document Foundation Blog Minify config and more! | Hugo : Hugo 0.68  セキュリティ＆プライバシー関連  Ransomware getting more fearsome, but there\u0026rsquo;s reason for optimism - Help Net Security ハッカーがデバイス攻撃時に最初に試すパスワードとは - ZDNet Japan グーグルの認証アプリ「Authenticator」、ワンタイムパスワードが盗まれるおそれ - ZDNet Japan AMD製CPUが2つの新しい攻撃に対して脆弱 ～グラーツ工科大学などのセキュリティ研究者が指摘 - 窓の杜 私は暗号解読バックドア法案に反対する | TechCrunch Japan ソフトパッチによる対策が困難なCPU脆弱性“LVI” ～ルーバンKUなどの研究者が発表 - 窓の杜  インテルCPUに脆弱性、「LVI」攻撃について研究者が明らかに - ZDNet Japan   流出NEMの不正交換事案についてまとめてみた - piyolog The Whisper Secret-Sharing App Exposed Locations - Schneier on Security Microsoft SMBv3 の脆弱性 (CVE-2020-0796) に関する注意喚起  定例外で修正されたSMBv3の脆弱性（CVE-2020-0796）についてまとめてみた - piyolog   The EARN-IT Act - Schneier on Security 新型コロナで揺れるプリンセス・クルーズが過去のデータ漏洩を認める | TechCrunch Japan 「Docker for Visual Studio Code」が正式版に、Visual Studio Codeの拡張機能。WSL 2環境のDockerコンテナに対応 － Publickey New tricks: simulating adversary tactics in modern, macOS environments | F-Secure WordPress and Apache Struts account for 55% of all weaponized vulnerabilities | ZDNet SANS Security Awareness Work-from-Home Deployment Kit | SANS Security Awareness  Work-from-Home Security Advice - Schneier on Security   Work-from-Home Security Advice - Schneier on Security  ブログ: 在宅勤務のセキュリティに関するアドバイス   テキサス法科大学教授ロバート・チェスニーの電子書籍「サイバーセキュリティの法律、政策、制度」バージョン3.0が公開されている - YAMDAS現更新履歴 Emergency Surveillance During COVID-19 Crisis - Schneier on Security  天文関連  [2002.10463] Betelgeuse Just Isn\u0026rsquo;t That Cool: Effective Temperature Alone Cannot Explain the Recent Dimming of Betelgeuse Dimming Betelgeuse likely isn\u0026rsquo;t cold, just dusty, new study shows 2020年3月17日ニュース「日本最古の天文記録、正体はオーロラだった 極地研などが見解」 | SciencePortal ニュース - 新型コロナウイルスに関連したアルマ望遠鏡の対応について - アルマ望遠鏡  知財関連  MIT Tech Review: 人工知能は特許法の 「発明者」になれるのか？ The Unicode Standard Now Includes CC License Symbols - Creative Commons Announcing the CC Catalog API, Version 1.0 - Creative Commons 将棋ユーチューバー「棋譜使わせて」と連盟に直訴　ツイートもできず、ファン悲鳴 - 弁護士ドットコム  その他  DuckDuckGo is good enough for regular use | www.bitlog.com  ブログ: DuckDuckGoは通常使用には十分だ   2020年3月9日ニュース「世界の感染国・地域は100を、感染者は10万人を超えさらに増加 新型コロナでWHO集計」 | SciencePortal サービスメッシュのIstio、機能拡張にWebAssemblyを採用。EnvoyにV8エンジンのWebAssemblyランタイムを統合 － Publickey Flatten the curve | These guidelines are intended to help Flatten the Curve with the COVID19 outbreak, to help limit spread and reduce the load on hospitals and other healthcare.  ブログ: コロナウイルス(COVID-19)へのアドバイス   AWS、コンテナに最適化したLinuxベースのOS「Bottlerocket」をオープンソースで公開 － Publickey グーグルが英ユーザーのデータ管轄を米国に移す意味とその影響 - ZDNet Japan GitHubが宿題の自動採点やインラインフィードバックなどが可能な教師向け新ツールを公開 | TechCrunch Japan 香川県条例：依存症の不安を煽って子どもからネットやゲームを奪ったうえに『親学』推進までされたんじゃたまったもんじゃない | P2Pとかその辺のお話R Rust 製スタティックサイトジェネレーター Zola をつかう | hiromasa.another :o) 2020年3月16日ニュース「厚労省が新型コロナの発生状況を周知するためにクラスターマップを作成」 | SciencePortal GitHubがnpmの買収を発表、JavaScriptのパッケージ管理サービス。将来的にはGitHubとnpmを統合へ － Publickey GitHubがJavaScriptのパッケージマネージャー「npm」を買収 | TechCrunch Japan docs.rs now allows you to choose your build targets | Rust Blog  ブログ: 失効 (リボケーション)   イラン革命体制の高齢化した指導層は新型コロナに脆弱か：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト 早期に米国からの入国を止めたイスラエルの「先見の明」：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト 「GitHub」モバイルアプリがベータ版を卒業、一般提供が開始 - 窓の杜 EOF is not a character - Ruslan\u0026rsquo;s Blog  ブログ: EOFは文字ではない   マイクロソフト、次世代.NETフレームワーク「.NET 5」最初のプレビューリリース。.NET Framework、.NET Core、Xamarinの3つを統合 － Publickey  "
    },
    {
      "title": "GnuPG 2.2.20 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/03/gnupg-2_2_20-is-released/",
      "published": "2020-03-21T10:27:24+00:00",
      "update": "2020-03-21T10:27:39+00:00",
      "content": "GnuPG 2.2.20 がリリースされた。\n [Announce] GnuPG 2.2.20 released  メンテナンス・リリース。 セキュリティ・アップデートはなし。 詳細はこちら。\n Protect the error counter against overflow to guarantee that the tools can\u0026rsquo;t be tricked into returning success after an error. gpg: Make really sure that --verify-files always returns an error. gpg: Fix key listing --with-secret if a pattern is given. [#4061] gpg: Fix detection of certain keys used as default-key. [#4810] gpg: Fix default-key selection when a card is available. [#4850] gpg: Fix key expiration and key usage for keys created with a creation date of zero. [#4670] gpgsm: Fix import of some CR,LF terminated certificates. [#4847] gpg: New options --include-key-block and --auto-key-import to allow encrypted replies after an initial signed message. [#4856] gpg: Allow the use of a fingerprint with --trusted-key. [#4855] gpg: New property \u0026quot;fpr\u0026quot; for use by --export-filter. scdaemon: Disable the pinpad if a KDF DO is used. [#4832] dirmngr: Improve finding OCSP certificates. [#4536] Avoid build problems with LTO or gcc-10. [#4831]  Release-info: https://dev.gnupg.org/T4860 via GnuPG 2.2.20 released  アップデートは計画的に。\n参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Unicode 13 に CC Licenses シンボルが追加された",
      "section": "remark",
      "description": "実際にはフォントも対応しないといけないのだが，それはしばらくかかるかな。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/03/cc-license-symbols-in-unicode-13/",
      "published": "2020-03-20T13:04:19+00:00",
      "update": "2020-03-22T00:29:59+00:00",
      "content": "2020-03-10 にリリースされた Unicode 13 に Creative Commons Licenses のシンボルが追加されたらしい。\n The Unicode Standard Now Includes CC License Symbols - Creative Commons  追加された CC Licenses シンボルは以下の通り。\n   符号点 字形 名前     U+1F16D  CIRCLED CC   U+1F16E  CIRCLED C WITH OVERLAID BACKSLASH   U+1F16F  CIRCLED HUMAN FIGURE   U+1F10D  CIRCLED ZERO WITH SLASH   U+1F10E  CIRCLED ANTICLOCKWISE ARROW   U+1F10F  CIRCLED DOLLAR SIGN WITH OVERLAID BACKSLASH    ちなみに「改変禁止」を表す  は数学の演算子 CIRCLED EQUALS (U+229C) を流用するようだ。 なんだかなぁ。\nこれらのシンボルを使って CC Licenses の組み合わせは以下のように表現できる。\n    意味 FCL      公有（public domain）    \u0026nbsp; CC0    \u0026nbsp; 表示    \u0026nbsp;\u0026nbsp; 表示-継承    \u0026nbsp;\u0026nbsp; 表示-非営利    \u0026nbsp;\u0026nbsp;\u0026nbsp; 表示-非営利-継承    \u0026nbsp;\u0026nbsp; 表示-改変禁止    \u0026nbsp;\u0026nbsp;\u0026nbsp; 表示-非営利-改変禁止     ちなみに公有を除く上から3つが Free Culture Licenses に相当する（公有はライセンスじゃないので）。 しかし Free Culture というフレーズも遠くなったなぁ（笑）\n実際にはフォントも対応しないといけないのだが，それはしばらくかかるかな。\nブックマーク   Understanding Free Cultural Works - Creative Commons\n  改訂3版： CC Licenses について\n  Font Awesome 5.0.11 で Creative Commons アイコンに完全対応した\n  参考図書  クリエイティブ・コモンズ―デジタル時代の知的財産権 レッシグ,ローレンス (著), 敬士, 椙山 (著), 圭介, 上村 (著), 紘一郎, 林 (著), 絵美, 若槻 (著), 大洋, 土屋 (著), クリエイティブコモンズジャパン (編集), Lessig,Lawrence (原著) NTT出版 2005-03-01 単行本 475710152X (ASIN), 9784757101524 (EAN), 475710152X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  残念ながら紙の本は実質的に絶版なんですよねぇ。是非デジタル化を希望します。\nreviewed by Spiegel on 2014-08-02 (powered by PA-APIv5)\n  オープン化する創造の時代　著作権を拡張するクリエイティブ・コモンズの方法論 (カドカワ・ミニッツブック) ドミニク・チェン (著) ブックウォーカー 2013-06-25 (Release 2013-06-27) Kindle版 B00DI8TMPU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  手軽に読める。お薦め。\nreviewed by Spiegel on 2014-09-13 (powered by PA-APIv5)\n  著作権２．０ ウェブ時代の文化発展をめざして (NTT出版ライブラリー―レゾナント) 名和 小太郎 (著) NTT出版 2010-06-24 単行本（ソフトカバー） 4757102852 (ASIN), 9784757102859 (EAN), 4757102852 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  名著です。今すぐ買うべきです。\nreviewed by Spiegel on 2014-08-02 (powered by PA-APIv5)\n  FREE CULTURE ローレンス・レッシグ (著), 山形浩生 (翻訳), 守岡桜 (翻訳) 翔泳社 2004-07-22 (Release 2016-03-28) Kindle版 B01DJ5VE0W (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Free Culture の原典。白田秀彰さんの「FREE ANNOTATION」も併せてどうぞ。\nreviewed by Spiegel on 2015-02-04 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 1.14.1 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/03/go-1_14_1-is-released/",
      "published": "2020-03-20T11:42:38+00:00",
      "update": "2020-03-29T00:57:08+00:00",
      "content": "Go 1.14.1 がリリースされた。\n Go 1.14.1 and Go 1.13.9 are released - Google Group  セキュリティ・アップデートはなし。\ngo1.14.1 (released 2020/03/19) includes fixes to the go command, tools, and the runtime. See the Go 1.14.1 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.14.1.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.14.1.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.14.1.linux-amd64.tar.gz $ sudo mv go go1.14.1 $ sudo ln -s go1.14.1 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.14.1 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "カリー化に関する覚え書き",
      "section": "remark",
      "description": "関数型プログラミング言語への馴染みが薄いせいですぐ忘れちゃうのよ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/03/currying/",
      "published": "2020-03-20T05:30:42+00:00",
      "update": "2020-03-29T00:50:32+00:00",
      "content": "どこぞの某ウイルスのせいでメチャメチャ忙しい。 しかもここ1ヶ月くらいですっかり脅威扇動型ビジネス・モデルへと変貌したようで，ホンマにいい迷惑である。 もはやため息しか出ない。 ので，この件は無視することに決めた。\nと，まぁ近況はこれくらいにして，今回は「カリー化」の話。 いや，関数型プログラミング言語への馴染みが薄いせいですぐ忘れちゃうのよ。\nというわけで，覚え書きとして記しておく。\nカリーは 飲みもの 動詞 Wikipedia によると「カリー化（currying）」とは\n 複数の引数をとる関数を、引数が「もとの関数の最初の引数」で戻り値が「もとの関数の残りの引数を取り結果を返す関数」であるような関数にすること via カリー化 - Wikipedia  とある。 「カリー」は偉い数学者である Haskell B. Curry の名前から拝借したものらしい。 名前が動詞化しちゃってるのね（笑）\n詳しくは近所の数学オタクに訊きなはれ。\n関数型言語におけるカリー化 ガチの関数型プログラミング言語 Haskell ではカリー化は言語仕様に組み込まれていて，たとえば関数 add の定義\nadd x y = x + y は実際にはカリー化表現\nadd = \\x -\u0026gt; \\y -\u0026gt; x + y の糖衣構文となっている1。\nカリー化のメリットは関数の部分適用（partial application）が作れることで2，たとえば\nincrement = add 1 とすれば add を実引数 1 で部分適用とした新しい関数 increment をシンプルに記述できる。 もちろん，わざわざ名前を付けなくても無名関数として使えばいいのだが。\n関数型じゃなくてもカリー化はできる ガチの関数型プログラミング言語じゃなくても第一級関数（first-class function）をサポートするプログラミング言語であればカリー化の記述自体は可能である。\nたとえば Go 言語なら\npackage main import \u0026#34;fmt\u0026#34; func add(x int) func(int) int { return func(y int) int { return x + y } }  func main() { fmt.Println(add(1)(2)) //Output: 3 \tincrement := add(1) //partial application \tfmt.Println(increment(2)) //Output: 3 } のように書ける。 JavaScript でも\nfunction add(x) { return function(y) { return x + y; }; }  console.log(add(1)(2)); //Output: 3 let increment = add(1); //partial application console.log(increment(2)); //Output: 3 と書くことができる。 さらに JavaScript ではアロー関数式が使えるので，関数 add の定義を\nconst add = x =\u0026gt; y =\u0026gt; x + y; などと書くことも可能である。 ここまでくると，だいぶ関数型っぽいよね。\n「それができる」ことと「そのように作られている」ことには天と地ほどの違いがある この記事を書いて思い出したが，随分前に脊髄反射で\nそんなこと言ってたら Go でだって関数型モドキな記述はできる。「それができる」ことと「そのように作られている」ことには天と地ほどの違いがある。何言ってるんだ、こいつw https://t.co/6YsZ0ouDQY\n\u0026mdash; Der Spiegel im Spiegel (@spiegel_2007) February 20, 2020  と呟いた。 今回の話はまさにそれ。\nまぁ，そもそも Go 言語の場合はシンプルを旨とする思想な上に構文（statement）による制約が強いため，関数型っぽい記述には（書けるとしても）向いてない。\nJavaScript は ES5 以降から関数型の要素を大幅に取り込んでいるが， Haskell と比較すれば分かるとおり，「関数」に対する考え方の根本が異なっている。\nこれは良し悪しの問題ではない。 まさに「制約は構造を生む」で，そうして生み出される構造と実装するシステムとの間で無理なくバランスし続けることがシステムを上手に運用するコツで，それこそが言語を選択する最重要ポイントだと思う（仕事ならね）。\n 公理によって与えられる暗黙の制約。この制約が集合の要素同士をしっかり結びつける。単純にしばるのではない、相互に秩序ある関係を結ぶ。言い換えれば――公理によって与えられる制約が構造を生み出しているのだ via 数学ガール／フェルマーの最終定理  システムを維持するために遺産や負債を抱え続けなければならない場合もあるが（それでも限度というか寿命はあるけど），そうでないならわざわざレガシーを選択する必然性は微塵もない。\nブックマーク  Haskell 超入門 - Qiita カリー化と部分適用（JavaScriptとHaskell） - Qiita JavaScript: 通常の関数とアロー関数の違いは「書き方だけ」ではない。異なる性質が10個ほどある。 - Qiita    Haskell では関数の引数は1つしかとれないためカリー化は必須の要件となる。意図的にカリー化を避けたいのであれば add (x, y) = x + y のように引数を組（tuple）にすればよい。 \u0026#x21a9;\u0026#xfe0e;\n 部分適用を上手く使えば，いわゆる OAOO (Once And Only Once) 原則に基づいて効率的なコードにできる。念のために言うと，部分適用を構成するのにカリー化は必要条件ではない。 \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
