{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Twitter リスク？",
      "section": "remark",
      "description": "本当の意味での侵害や損害があろうとなかろうと「氏名表示権」を提示するだけでお手軽に発信者情報開示の請求が通ってしまう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/twitter-risk/",
      "published": "2020-07-23T07:01:52+00:00",
      "update": "2020-07-23T07:44:32+00:00",
      "content": "最初，新聞系メディアの記事を見て「はぁ？」となったが，マトモな記事も出てきたので，今回も覚え書きとして記しておく。\n 令和2年7月21日最高裁判決を読む　〜写真の無断RTによる権利侵害〜｜とあるオリガの試行錯誤\u0026lt;トライ\u0026amp;エラー\u0026gt;｜note  Twitter とは まずは，おさらい。 前置きにしては長い説明だけど，後々必要なのでご容赦を。\nTwitter はマイクロブログ (microblogging) と呼ばれるコンテンツ形態を提供するサービスである。 ちなみにマイクロブログの源流は tumblelog と言われている。\nTwitter による投稿は “tweet” と呼ばれ，自身および follow したユーザの tweet は基本的に時系列に並べられる。 これをタイムライン（timeline）と呼ぶ1。\nTweet には文字列しか載せられない点に注意。 ただし @ から始まる単語をアカウント名， # から始まる単語をタグとして解釈し，他ユーザや他 tweet と連携することが可能である。 また tweet 内の URL を解釈し，アプリケーションやその設定によっては映像（動画を含む）や “Twitter Card” と呼ばれるページのサマリ情報に展開して表示することもできる2。\nたとえば\n図書館で借りた本 https://t.co/5Q2uTLUrBR pic.twitter.com/GRhVumQTgR\n Der Spiegel im Spiegel July 9, 2020  という tweet を Web ブラウザで見ると\n Der Spiegel im Spiegel July 9, 2020  のように展開される。 ちなみに上の tweet に含まれる画像のオリジナルは以下の通り。\n 図書館で借りた本 | Yasuhiro ARAKAWA | Flickr  タイムライン上の表示は上下がトリミングされる点に注目しておいてほしい。\n自身または他者の tweet を再投稿（reblog）することを retweet と呼ぶ。 Retweet に関しては紆余曲折があるが，今のところは以下の2種類ある。\n 対象の tweet を，手を加えずに投稿者の情報ごと自タイムラインに表示する 対象の tweet への URL に文言を添えて tweet する。「引用 retweet」とも呼ばれる  前者は\n のように retweet フラグが立っている以外は通常の tweet と変わらない。 後者は\n絶版なのか古本屋で買おうとしたらめっさ高かった https://t.co/h0vJZibzTJ\n  などと tweet する。 通常はアプリで自動化・隠蔽されているので中身を気にする人は少ないかもしれないが。 これを Web ブラウザ等で見ると\n のように引用っぽく展開される。\n「Retweet 発信者情報開示事件」のあらまし 前置きが長くなった。 ここからが本題。\nなお，今回の訴訟を便宜上「Retweet 発信者情報開示事件」または単に「情報開示事件」と呼ぶことにする。 判決文は以下の通り。\n 平成30(受)1412 発信者情報開示請求事件 - 裁判例結果詳細 | 裁判所 - Courts in Japan  登場人物 職業エンジニアをやってた頃の癖で，構造を調べる際につい「actor は誰？」って思ってしまう。\nちうわけで，「情報開示事件」の登場人物 (actor) は以下の5者となっている。\n [1] 著作物 [2] 著作物の著作者 [3] 著作物を tweet した人物 [4] [3] の上記 tweet を retweet した人物 [5] Twitter サービス・プロバイダ   「情報開示事件」は [2] が [5] に対して [4] の身元を示す情報の開示を請求し，それを [5] が突っぱねたことで発生している。 つまり [2] と [5] の間の訴訟である。\n[1] の著作物はいわゆる「有償著作物3」の見本として Web ページ上に公開されている写真画像のようで，ページ上にも画像自体にも「転載禁止」が明記されている。\n[3] の人物は，判決文によると，著作（権）者に無断で tweet を行ったようだ。 邪推だが [3] を訴える過程で retweet した [4] の情報も取得しようとしたのではないだろうか。\n[5] を運営する Twitter 社は米国法人である。 日本にも関係する法人組織があるが，「情報開示事件」の登場人物ではない。\n事件のポイント いわゆる「プロバイダ責任制限法」では，権利侵害が行われた著作物に関して，権利者からサービス・プロバイダに対して投稿・発信者の情報を求めることができ，プロバイダはそれに応じる義務がある。 ただしこれは「権利侵害が行われた」ことが認められることが条件である。\nまた「情報開示事件」の対象は，あくまで [4] による retweet で，元の無断転載を含む [3] の tweet は対象になっていない（おそらく別件）。\n前置きでも述べたように， tweet であれ retweet であれ， Web ブラウザや公式アプリのタイムラインに画像が展開される際はレイアウトによっては上下がトリミングされた状態で表示される。 また，あくまでも表示上のトリミングなので，元の画像に手が加えられることはない。\nただ，このトリミングによって画像に示された氏名を含む著作権表示が見えなくなるため，それを以って「氏名表示権」の侵害であるとしたわけだ。\n以上を踏まえて判決結果を見ていく。\n判決のポイント 判決を先に言うと，最高裁判所第三小法廷は [5] の Twitter 社の上告を棄却し retweet されタイムライン上でトリミング表示された画像であっても「氏名表示権」の侵害があるとした。 これにより [5] は著作者 [2] に対し [5] の情報開示の義務を負うことが決定した。\nポイントのひとつは，今回対象となっている権利が「氏名表示権」に限定されているという点だ。 利用者の思惑がどうあれ，サービスの実装がどうあれ，実際に画像に描かれた「氏名」が見えなくなってるんだから，それは「氏名表示権」の侵害と言えるよね，という話。\nちなみに「氏名表示権」について簡単に説明すると，著作権法で示される「著作者人格権4」のひとつで，著作権法 第19条で定義されている。\n 著作者は、その著作物の原作品に、又はその著作物の公衆への提供若しくは提示に際し、その実名若しくは変名を著作者名として表示し、又は著作者名を表示しないこととする権利を有する。その著作物を原著作物とする二次的著作物の公衆への提供又は提示に際しての原著作物の著作者名の表示についても、同様とする。 著作権法より  （著作者人格権のひとつである）同一性保持権や著作財産権については「情報開示事件」の対象ではないという点は押さえておく必要がある。\nもうひとつのポイントは retweet を「再投稿」と見なしたこと。 今後のことを考えると，むしろこちらのほうがリスクになるかもしれない。\nTwitter リスク？ ここからは私見・偏見・独断の塊なのであしからず（笑）\nお手軽！ 発信者情報開示 今回の「Retweet 発信者情報開示事件」の何がリスクかって，そこに本当の意味での侵害や損害があろうとなかろうと，今後「氏名表示権」を提示するだけでお手軽に発信者情報開示の請求が通ってしまうことだろう。\nTwitter は匿名サービスではないが，利用者情報を無闇に第三者に開示しない程度には良心的である。 しかし，監視資本主義の雄でもある現在の Twitter は携帯端末と強く結びついているので，利用者情報を開示してしまえば本人に辿り着く可能性はとても高くなる。\nぶっちゃけ，タイムライン表示で著作権表示部分がトリミングされるよう意図的に画像レイアウトを調整すれば簡単に釣れてしまうのだ。 知財トロル大歓喜！\n非親告罪の可能性 「Retweet 発信者情報開示事件」の論点とは直接関係ないが，今回対象となっている写真画像が「有償著作物3」である点が気になっている。 「有償著作物」だと何が拙いかというと，非親告罪事案になる可能性があるのだ。\n2018年末に施行された改正著作権法では，以下の条件に於いて非親告罪の対象になる。\n  対価を得る目的又は権利者の利益を害する目的があること 有償著作物等について原作のまま譲渡・公衆送信又は複製を行うものであること 有償著作物等の提供・提示により得ることが見込まれる権利者の利益が不当に害されること   年末年始に施行される改正著作権法に関する覚え書きより  前節の「お手軽！ 発信者情報開示」と併せて，本当に知財トロルがやりやすい環境が整ってきたって感じだなぁ。\nRetweet は「再投稿」か 小法廷での判決とはいえ最高裁がそう言っちゃったんだから今後の訴訟はそういう方向で議論されるんだろうけど，微妙に納得いかない感じである。\n前置きでも書いたけど，元々 retweet は reblog の延長線上にある発想ではあるが，現在の公式 retweet 機能は，喩えるなら「シンボリック・リンク」のようなもので，そこに実体があるわけではない。\nそれって本当に「再投稿」って言っちゃっていいのだろうか。\nRetweet が（♡ (fav.) の数なんかより）重要な「口コミ」シグナルである点は論を待たないだろう。 しかし Retweet を「再投稿」と見なすなら，それは「転載」と同義なので，大きな著作権リスクを抱えることになる。\nまぁ，かつての Tumblr の reblog とか見ても「知ったこっちゃない」って言う人が大部分かもしれないが。 逃げる準備はしておくべきかねぇ（笑）\n喧嘩を売り買いするなら利益を出さないと 某ラノベ作品で「売られた喧嘩は買うけど，売り買いするなら利益を出す」という文言を見かけた（うろ覚え）。\n私は面倒事は嫌いなので無闇に売り買いする気はないが，「悪法も法」とも思わないので，もしやるならきちんと利益分岐点を見定めてやりたいものである。\n倍返しなんかしないよ（笑）\nブックマーク  リツイートするだけで身元が他人に知られるリスクがあることを示した知財高裁判決(栗原潔) - 個人 - Yahoo!ニュース 改訂3版： CC Licenses について  参考図書  著作権２．０ ウェブ時代の文化発展をめざして (NTT出版ライブラリー―レゾナント) 名和 小太郎 (著) NTT出版 2010-06-24 単行本（ソフトカバー） 4757102852 (ASIN), 9784757102859 (EAN), 4757102852 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  名著です。今すぐ買うべきです。\nreviewed by Spiegel on 2014-08-02 (powered by PA-APIv5)\n  〈海賊版〉の思想‐18世紀英国の永久コピーライト闘争 山田 奨治 (著) みすず書房 2007-12-20 単行本 4622073455 (ASIN), 9784622073451 (EAN), 4622073455 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「コピーライト永久独占を目論む大書店主に挑む〈海賊出版者〉ドナルドソンの肖像。法廷闘争を軸に著作権を史的に考察する。」（帯文より）\nreviewed by Spiegel on 2018-11-13 (powered by PA-APIv5)\n  18歳の著作権入門 (ちくまプリマー新書) 福井健策 (著) 筑摩書房 2015-01-10 (Release 2015-01-30) Kindle版 B00SM7G6SI (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  福井健策弁護士による「18歳からの著作権入門」の書籍化。\nreviewed by Spiegel on 2015-05-07 (powered by PA-APIv5)\n   もっとも tweet の順序については随分前から崩壊していて follow していないアカウントからの広告 tweet も混ぜ込まれるため，それはもう酷い有様になっている。ぶっちゃけ，サービスイン当初の面影は全くないと言っていいだろう。 \u0026#x21a9;\u0026#xfe0e;\n 公式アプリでは「メディアのプレビュー」を無効にすることで映像や Twitter Card へ展開しないようにすることもできる。サードパーティのアプリケーションでは，そもそも映像や Twitter Card への展開ができない（多分）けど。 \u0026#x21a9;\u0026#xfe0e;\n 「有償著作物等」とは「有償で公衆に提供又は提示されている著作物等」を指す。 \u0026#x21a9;\u0026#xfe0e;\n 「氏名表示権」を含む「著作者人格権」は「著作者の一身に専属し、譲渡することができない」（著作権法 第59条）ため，著作権者が他の著作財産権を保持していようといまいと「著作者の権利」として行使できる。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Twitter から始まる Class Break",
      "section": "remark",
      "description": "この件で4年前の米国大統領選挙を連想した人は多いだろうねぇ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/class-breaks-from-twitter/",
      "published": "2020-07-21T04:08:08+00:00",
      "update": "2020-07-22T01:44:29+00:00",
      "content": "さて，先週 Twitter 界隈で騒ぎになった事件について。 ぼちぼちと情報が出始めているようなので，覚え書きとして記しておこう。\n今回の事件について Bruce Schneier 先生によるエッセイが公開されている。\n On the Twitter Hack - Schneier on Security ブログ: Twitterのハッキングについて  事件を一言で言うとこんな感じ。\nSomeone compromised the entire Twitter network, probably by stealing the log-in credentials of one of Twitter’s system administrators. via On the Twitter Hack - Schneier on Security  件の「誰か」が Twitter のシステム管理者からどうやって認証情報を引き出したのかはよく分かっていないようだ。 従業員への賄賂の可能性やら SIM スワッピング攻撃やら，様々な可能性を考慮して捜査中らしい。\nIn the Twitter case this week, the hacker’s tactics weren’t particularly sophisticated. We will almost certainly learn about security lapses at Twitter that enabled the hack, possibly including a SIM-swapping attack that targeted an employee’s cellular service provider, or maybe even a bribed insider. The FBI is investigating. via On the Twitter Hack - Schneier on Security  Twitter 側は今回の件に関して，被害に遭っていると思われるアカウントを一時停止した。 その後はほぼ復旧しているらしい。\nIn addition to our efforts behind the scenes, shortly after we became aware of the ongoing situation, we took preemptive measures to restrict functionality for many accounts on Twitter - this included things like preventing them from Tweeting or changing passwords. We did this to prevent the attackers from further spreading their scam as well as to prevent them from being able to take control of any additional accounts while we were investigating. We also locked accounts where a password had been recently changed out of an abundance of caution. Late on Wednesday, we were able to return Tweeting functionality to many accounts, and as of today, have restored most of the accounts that were locked pending password changes for their owners. via An update on our security incident  今回のポイントは通常の認証の問題（パスワードの複雑性や2要素認証など）をすっ飛ばして，直にシステムに入り込みやりたい放題にされてしまったことだろう。 これでは私達一般利用者は対処のしようがない。\nThis kind of attack is known as a “class break.” Class breaks are endemic to computerized systems, and they’re not something that we as users can defend against with better personal security. It didn’t matter whether individual accounts had a complicated and hard-to-remember password, or two-factor authentication. It didn’t matter whether the accounts were normally accessed via a Mac or a PC. There was literally nothing any user could do to protect against it. via On the Twitter Hack - Schneier on Security  Class Break とは，ひとつまたは関連する複数のシステム間で共通の脆弱性を持ち，その脆弱性を使って全てが一気に破壊される状況を指す。\nClass breaks are security vulnerabilities that break not just one system, but an entire class of systems. They might exploit a vulnerability in a particular operating system that allows an attacker to take remote control of every computer that runs on that system’s software. Or a vulnerability in internet-enabled digital video recorders and webcams that allows an attacker to recruit those devices into a massive botnet. Or a single vulnerability in the Twitter network that allows an attacker to take over every account. via On the Twitter Hack - Schneier on Security  Class Break については Bruce Schneier 先生のあの本にも言及がある。\n 技術が進むと標準化が進み、脆弱性が増える。同じ機能を持つ部分すべてを破壊する「クラスブレーク」が可能になるのだ（p.133） セキュリティはなぜやぶられたのかより   システムがあまりに複雑になり技術的に高度になった結果、セキュリティが劣るかもしれない新しいものを使うより、クラスブレークのおそれがあっても実績のあるものを使い続けたほうがいいことが多くなったのだ（p.158） セキュリティはなぜやぶられたのかより   画一的なシステムはクラスブレークをうけやすく、剛性が高い。多様な場合にもクラスブレークは可能だが、難しくなる。可能なかぎり多様性を選んだほうがいいのだ。画一性自体がセキュリティリスクになるが、そのリスクは、確立されていない方法を選んだ場合よりも小さいことが多い（p.176） セキュリティはなぜやぶられたのかより  不幸中の幸いというか，今回は金銭絡みの比較的穏便（笑）な詐欺だったが，可能性としてはもっと大規模なこともできた筈である。\nImagine a government using this sort of attack against another government, coordinating a series of fake tweets from hundreds of politicians and other public figures the day before a major election, to affect the outcome. Or to escalate an international dispute. Done well, it would be devastating. via On the Twitter Hack - Schneier on Security  あるいは今回は何かの前準備なのか？ この件で4年前の米国大統領選挙を連想した人は多いだろうねぇ。\nClass Break について面白い喩えがある。\nIn a sense, class breaks are not a new concept in risk management. It’s the difference between home burglaries and fires, which happen occasionally to different houses in a neighborhood over the course of the year, and floods and earthquakes, which either happen to everyone in the neighborhood or no one. Insurance companies can handle both types of risk, but they are inherently different. The increasing computerization of everything is moving us from a burglary/fire risk model to a flood/earthquake model, which a given threat either affects everyone in town or doesn’t happen at all. via Class Breaks - Schneier on Security  洪水や地震への対策と同じように Class Break への対策も中長期的なタイム・スケールで考えないといけないということだろう。 先ず，どこに問題があるか洗い出すところからだけど（笑） そういう意味で今回のケースは（ゼロトラスト・セキュリティの観点からも）教訓になる筈である。\nブックマーク  Hackers Convinced Twitter Employee to Help Them Hijack Accounts  Twitter Hackers May Have Bribed an Insider - Schneier on Security   AppleやマスクCEOなど多数のセレブTwitterアカウントが乗っ取られ、暗号通貨詐欺に悪用される - ITmedia NEWS Twitterの暗号通貨詐欺の元凶は内部ツールに不正アクセスした一人のハッカー | TechCrunch Japan Twitter社内管理ツールの不正アクセスについてまとめてみた - piyolog  参考図書  セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n "
    },
    {
      "title": "「門番」としての VPN",
      "section": "remark",
      "description": "専用 IP アドレスによる利便性を得る引き換えとして匿名性をある程度手放さざるを得ないわけやね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/vpn-as-a-gatekeeper/",
      "published": "2020-07-20T09:28:17+00:00",
      "update": "2020-07-21T01:18:07+00:00",
      "content": "VPN とは まずは VPN についておさらい。\nVPN（Virtual Private Network）とは，物理的な回線・ネットワークの上に構築された「実質的な網 (virtual network) 」である。 この記事では VPN の機能として大まかに\n カプセル化とトンネリング 経路の暗号化 認証とアクセス制御  を挙げ，これらの要件を満たした製品・サービスを VPN と呼ぶことにする。\nVPN は目的別に以下の3つに分類できるだろう。\n 拠点間 VPN リモートアクセス バイパス型 VPN  「拠点間 VPN」は昔でいうところの「専用線」の代わりになるものだ。 「リモートアクセス」は企業イントラネットやプライベート・ネットワーク内部に外からアクセスするもので，近年では BYOD (Bring Your Own Device) とも呼ばれている。\n「バイパス型 VPN」は6年前に私が勝手につけた名前だが，他の2つと異なり，アクセスを行う利用者から見て，出口ノードがインターネットになっている点が特徴である。\n 「IPAテクニカルウォッチ「公衆無線LAN利用に係る脅威と対策」」より  たとえば，上の図のように，公衆無線 LAN などの信用度の低いネットワークを経由してインターネットに接続したい場合に「バイパス型 VPN」が使える。 また異なるリージョンのコンテンツにアクセスするために使われることもある1。\n「門番」としての VPN 先程の図を見ると分かるように「バイパス型 VPN」は利用者とインターネット上のコンテンツとを仕切る「門番」として機能していることが分かる。 こうした「門番」の役割は本来は ISP 等が担っているもので，それが「バイパス型 VPN」によってシフトしてしまっている。\nしたがって「バイパス型 VPN」を運営するサービス・プロバイダが「門番」として（少なくとも ISP 並に）信用できるか否かがとても重要なのである。\nログ収集ポリシー 技術的な観点はひとまず置いておいて，「バイパス型 VPN」サービス・プロバイダの信用度を計る目安としてよく引き合いに出されるのが「ログ収集ポリシー」である。\nたとえばサービス・プロバイダが収集した利用者のアクセスログを第三者に売ったり，あるいは公的機関から提出を求められる（大抵は拒否できない）場合がある。 なので，サービス・プロバイダが利用者に関するどのような情報を持っていてそれらをどのようにして管理しているか，を知ることが大事である。 そしてその最善は「ログ収集しない」ことである。\nTorrentFreak では以下の質問を「バイパス型 VPN」のサービス・プロバイダ各社に送って\n Do you keep (or share with third parties) ANY data that would allow you to match an IP-address and a timestamp to a current or former user of your service? If so, exactly what information do you hold/share and for how long? What is the name under which your company is incorporated (+ parent companies, if applicable) and under which jurisdiction does your company operate? What tools are used to monitor and mitigate abuse of your service, including limits on concurrent connections if these are enforced? Do you use any external email providers (e.g. Google Apps), analytics, or support tools ( e.g Live support, Zendesk) that hold information provided by users? In the event you receive a DMCA takedown notice or a non-US equivalent, how are these handled? What steps would be taken in the event a court orders your company to identify an active or former user of your service? How would your company respond to a court order that requires you to log activity for a user going forward? Have these scenarios ever played out in the past? Is BitTorrent and other file-sharing traffic allowed on all servers? If not, why? Do you provide port forwarding services? Are any ports blocked? Which payment systems/providers do you use? Do you take any measures to ensure that payment details can’t be linked to account usage or IP-assignments? What is the most secure VPN connection and encryption algorithm you would recommend to your users? Do you provide tools such as “kill switches” if a connection drops and DNS/IPv6 leak protection? Do you support Dual Stack IPv4/IPv6 functionality? Are any of your VPN servers hosted by third parties? If so, what measures do you take to prevent those partners from snooping on any inbound and/or outbound traffic? Do you use your own DNS servers? In which countries are your servers physically located? Do you offer virtual locations?   via Which VPN Providers Really Take Anonymity Seriously in 2020?  その結果を公開している。\n Which VPN Providers Really Take Anonymity Seriously in 2020? * TorrentFreak  まぁ，結果はリンク先を見ていただくとして，実はこの話には続きがある。\n Most Dedicated VPN IP-addresses Are Not Anonymous * TorrentFreak  「バイパス型 VPN」で「ログ収集しない」と謳うサービス・プロバイダは，匿名性を高めるために，接続ごとに共有 IP アドレスを割り当てるのだが，どうも拡張サービスとして専用あるいは固定の IP アドレスを付与することができるそうで，この場合は（当たり前だが）完全に「収集しない」とは行かないらしい。\nBroadly speaking, we would say that the “no logs” policies of VPN providers don’t apply to dedicated IPs. That conclusion is backed up by several VPN providers we reached out to, which include VPNArea, NordVPN, CyberGhost, and Torguard.\nThese providers all have a no-logging policy for their regular VPN service, which relies on shared IP-addresses. However, they see dedicated IP-addresses as a separate and different service, which is treated differently anonymity-wise.\n via Most Dedicated VPN IP-addresses Are Not Anonymous  By connecting through a single IP-address, monitoring outfits can build up a profile of the user’s online activity. The real anonymity tradeoff, however, is that the VPN provider knows the user’s IP-address and can connect it to other account information it has on record. This sometimes includes an email address. via Most Dedicated VPN IP-addresses Are Not Anonymous  いくつかのインターネット・サービスでは，リージョンを跨いでアクセスされないよう VPN 接続の ブラックリスト おっと拒否リストを持っているそうだが，専用 IP アドレスのオプションを利用することによりこれらを回避できるようだ。\nWith a dedicated IP-address, which is often sold as an add-on, users get a unique IP-address as opposed to a shared one. This can be very convenient as it reduces annoying captchas and can bypass regular VPN blacklists. via Most Dedicated VPN IP-addresses Are Not Anonymous  こうした利便性を得る引き換え (tradeoff) として匿名性をある程度手放さざるを得ないわけやね。\nF-Secure FREEDOME は止めとけ？ ところで，先程の Which VPN Providers Really Take Anonymity Seriously in 2020? の中に私が Android 端末で愛用している F-Secure 社の FREEDOME が見当たらなかったので軽くググってみたが，どうも最近は FREEDOME は忌避されているらしい。\n Read This F-Secure Freedome Review and Test Before You Buy It!  FREEDOME はログ収集を行ってると言われていて，そこが嫌われている原因のひとつかも（笑）\nこれについては，一応 F-Secure 社側の釈明もあるようで\n ほとんどのVPNと同様に、FREEDOMEは接続ログを作成します。これらのログは、サービスの提供と改善のために使用されます。当社のプライバシーポリシーに記載されているように、サービスを提供し、データ転送をクリーンな状態に保つだけの目的で通信トラフィックを分析します。トラフィックは仮名化されていますので、私たちにはどれがあなたのトラフィックかを知ることはできません。FREEDOMEはトラフィックログを作成しません。 VPNサービス:プロバイダのログ収集以外に考えるべきことより  というわけで，接続ログはあるけどトラフィックログは作らないので，ログから（閲覧・購入履歴，メッセージなどの）センシティブ・データを抜いたりできないよー，ということらしい。\nとは言え，昔に比べて FREEDOME の優位性が薄れているのも確かなんだよなぁ。 まぁ，来年3月まで FREEDOME の契約が残ってるので，それまでに NordVPN とか他のサービスに乗り換えるべきかじっくり考えてみるとしよう。\n【2020-07-21 追記】 無料（Free）の VPN サービスは止めとけ！ 日本語圏でも言及されているようなので追記しておく。\n “Zero logs” VPN exposes millions of logs including user passwords, claims data is anonymous  話題になっている UFO VPN およびその系列のサービスは “free” であることが売りである。 ここでいう “free” は（「自由なソフトウェア」ではなく）「無料のビール」のほうの “free” を指している。 “Free” だからといって VPN プロトコルも暗号スイートも明示しないサービスを信用しろというのは無理な話。\n「無料」のサービスというのは無料なりの理由があって，「監視資本主義」の時代に於いて，大抵の場合は利用者の行動履歴と引き換えになっている。 もちろん人によっては自身の行動履歴と引き換えにしても受けたいサービスはあるものなので（Gmail とか Instagram とか Twitter とかw）一概にその「引き換え」自体が悪いとは言わないが，少なくとも「門番」として機能する「バイパス型 VPN」においては利用者もセキュリティやプライバシーに細心の注意を払うべきである。\nまぁ，公表しているポリシーを偽るのは論外だけどな（笑）\nぶっちゃけ，年間数千円で身元の確かな「バイパス型 VPN」サービスが買えるのなら安いものである。 いまどき気休めでしかない「malware 対策ソフト」にお金を払う余裕があるのなら2，こういったサービスにこそ投資すべきだと思うよ，おぢさんは。\n最後に老婆心ながら。 「バイパス型 VPN」が「門番」として機能する以上，国や地域によってはサービスが機能しなかったり稼働しているサービス自体がプライバシー・リスクを孕んでいることを考慮したほうがいいだろう（婉曲表現）。\n【おまけ】 NSA による VPN セキュリティ管理の5箇条 米国 NSA から VPN セキュリティに関する以下のドキュメントが公開されている。 どちらかと言うと組織内のネットワーク管理者あるいはサービス・プロバイダ側の話かな。\n ConfiguringIPsecVirtual Private Networ  ConfiguringIPsecVirtual Private Networ  （要約）  これによると，ネットワーク管理者は VPN の運営について以下の5つを定期的に確認・実行する必要がある，と謳っている。\n Reduce the VPN gateway attack surface Verify that cryptographic algorithms are Committee on National Security Systems Policy (CNSSP) 15-compliant Avoid using default VPN settings Remove unused or non-compliant cryptography suites Apply vendor-provided updates (i.e. patches) for VPN gateways and client   via ConfiguringIPsecVirtual Private Networ  詳しい内容はドキュメントを参照のこと。\nまぁ，当たり前の話なんだけど Avoid using default VPN settings はちょっと面白かったので。 そんなに既定の設定はあかんのか？\nブックマーク   Best VPN Services For Anonymous Torrenting? * TorrentFreak\n  Mozilla’s VPN launches out of beta on Windows and Android - The Verge\n  NSA on Securing VPNs - Schneier on Security\n  テレワークを行う際のセキュリティ上の注意事項：IPA 独立行政法人 情報処理推進機構\n  監視をコントロールする\n  参考図書  超監視社会 ブルース・シュナイアー (著), 池村 千秋 (翻訳) 草思社 2016-12-13 (Release 2017-02-03) Kindle版 B01MZGVHOA (ASIN)  実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。\nreviewed by Spiegel on 2019-03-23 (powered by PA-APIv5)\n   つか，元々の「バイパス型 VPN」の動機は他リージョンのコンテンツにアクセスするためなのだが（笑） \u0026#x21a9;\u0026#xfe0e;\n 「malware 対策ソフト」が不要と言ってるわけじゃないよ，念のため。たとえば Windows は自前で malware 検知の仕組みを持ってるし Linux はオープンソース製品を組み込めばよい（そういや Microsoft も Linux 版の製品を出してたな）。アプリストアの仕組みを持っているプラットフォームではアプリストア側で malware 検知を行っている。サーバ管理でもない限り通常はこれで十分間に合う。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-07-19 のブックマーク",
      "section": "bookmarks",
      "description": "「はやぶさ2、12月6日に地球帰還 『りゅうぐう』の試料を豪へ落下」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/07/19-bookmarks/",
      "published": "2020-07-19T03:13:45+00:00",
      "update": "2020-07-22T01:44:29+00:00",
      "content": "リリース情報  Native JS Bundler, Open API Support, Inline Partials | Hugo : Hugo 0.74 リリース  Release v0.74.0 · gohugoio/hugo · GitHub Release v0.74.1 · gohugoio/hugo · GitHub Release v0.74.2 · gohugoio/hugo · GitHub Hugo 0.74.2: A couple of Bug Fixes | Hugo   Release June 2020 Recovery · microsoft/vscode · GitHub  Release June 2020 Recovery 2 · microsoft/vscode · GitHub   Release 1.49.0 · atom/atom · GitHub Announcing Rust 1.45.0 | Rust Blog 「Thunderbird 78」が正式リリース ～v68系統に代わる新版、アドオン互換性に注意 - 窓の杜  バベルのインターネット  MIT Tech Review: 「インターネットを作り直す」ディフィニティが掲げる理想と野望  セキュリティ＆プライバシー関連  Web会議サービスを使用する際のセキュリティ上の注意事項：IPA 独立行政法人 情報処理推進機構 米国が国家安全リスクを理由にTikTokに続きWeChatの使用禁止を検討 | TechCrunch Japan crates.io security advisory | Rust Blog Google、データを暗号化したまま処理する仮想マシン「Confidentail VM」発表。Google Cloud Next \u0026lsquo;20:OnAir － Publickey NSA on Securing VPNs - Schneier on Security Mozilla’s VPN launches out of beta on Windows and Android - The Verge  Mozilla、VPNサービスを正式提供\u0026ndash;有料サービスで収益の確保を狙う - ZDNet Japan   Hackers Convinced Twitter Employee to Help Them Hijack Accounts  Twitter Hackers May Have Bribed an Insider - Schneier on Security AppleやマスクCEOなど多数のセレブTwitterアカウントが乗っ取られ、暗号通貨詐欺に悪用される - ITmedia NEWS Twitterの暗号通貨詐欺の元凶は内部ツールに不正アクセスした一人のハッカー | TechCrunch Japan   徳丸浩氏監修の「ウェブ・セキュリティ基礎試験」が開始：CodeZine（コードジン） Android security vulnerabilities differ by country, say researchers 日本郵便のe転居を悪用したストーカー事件についてまとめてみた - piyolog CloudflareのDNSがダウンし、多くのウェブサイトが一時接続不能に | TechCrunch Japan  天文関連  京大せいめい望遠鏡でスーパーフレアの検出に成功―生命居住可能な惑星への影響の理解に向けて― | 国立天文台(NAOJ) Parker Solar Probe Prepares for Third Venus Flyby – Parker Solar Probe JAXA | 小惑星探査機「はやぶさ２」のカプセル帰還に関する豪州宇宙庁（ASA）との共同声明の発表について  2020年7月16日ニュース「はやぶさ2、12月6日に地球帰還 『りゅうぐう』の試料を豪へ落下」 | SciencePortal   すばる望遠鏡と「ニュー・ホライズンズ」の共同観測で探る太陽系外縁部 | トピックス・お知らせ | すばる望遠鏡  知財関連  Crunchyroll Downloader Tool Nuked Following Copyright Complaint * TorrentFreak  その他  Announcing Creative Commons’ New CEO, Catherine Stihler - Creative Commons ASCII.jp：Windows 10のWSL2からGPUが使えるようになった (1/2) Microsoftが「PHP」サポートを縮小 ～「PHP 8.0」バイナリは公式提供せず - 窓の杜 マイクロソフトが「りんな」を含む中国製チャットボットXiaoiceをスピンアウト | TechCrunch Japan 「Couchbase Cloud」正式リリース、AWS上でDBaaSとして利用可能に。AzureやGCP上でも提供予定 － Publickey 【プレスリリース】相変化材料ゲルマニウム・アンチモン・テルル(GeSb2Te4)化合物中に、質量ゼロの電子(ディラック電子)を世界で初めて発見～グラフェンに代わる次世代デバイス材料として期待～ | 日本の研究.com 米国防省、KubernetesをF-16ジェット戦闘機に載せてみた － Publickey Google、BigQueryをAWSやAzureなどマルチクラウド展開へ、「BigQuery Omni」発表。Google Cloud Next \u0026lsquo;20:OnAir － Publickey Google Chromeに挑戦するThe Browser Companyはブラウザー界のテスラを目指す | TechCrunch Japan AFKアリーナ攻略wiki | AppMedia Googleが「Open Usage Commons」設立。オープンソースの商標を自由かつ公正に使用するための支援団体 － Publickey トヨタ自動車がCloud Native Computing Foundationに加盟 － Publickey 米国の大多数のゲーム開発者はリモートワークに移行中 | TechCrunch Japan マイクロソフト、「WinUI 3 Preview 2」発表\u0026ndash;ロードマップもアップデート - ZDNet Japan レーザー照射による水中Wi-Fiシステムをサウジの研究チームが開発 | TechCrunch Japan Slack、管理者向けに複数の新ツール\u0026ndash;認定プログラムなど - ZDNet Japan Amazon Comprehend を用いて本を読まずに読書感想文を書いてみる - builders.flash☆ - 変化を求めるデベロッパーを応援するウェブマガジン | AWS Red Hat、Kubernetesの拡張ディストリビューション「OKD 4」正式版リリースを発表 － Publickey Creating a Wireshark dissector in Lua - part 1 (the basics) | Mika’s tech blog  ブログ: Luaで、Wiresharkのディセクタを作成する - パート1(基本)   2020年7月17日ニュース「英語のLとR、聞き分け能力は瞳孔反応で分かる」 | SciencePortal  "
    },
    {
      "title": "私的コード黒歴史が北極に千年封印される",
      "section": "remark",
      "description": "千年後の地球上に知的文明があるとは限らないけどね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/github-archive-program-2020/",
      "published": "2020-07-18T01:36:42+00:00",
      "update": "2020-07-20T23:49:06+00:00",
      "content": "本気なのかジョークなのか分からないが GitHub が自身のサービス上にあるオープンソース・コードを北極に千年封印するという企画があって\n GitHub、オープンソースのコードを1000年以上にわたって保存する「GitHub Archive Program」発表。北極圏の非武装地帯永久凍土層地下250mに保管庫を設置 － Publickey  実際に21TBものデータが北極に封印されたらしい。\n GitHub Archive Program: the journey of the world\u0026rsquo;s open source code to the Arctic - The GitHub Blog 永久凍土層地下250メートルでソースコードを保存するGitHubのプロジェクト、無事に保管が開始されたことを発表 － Publickey 1000年後にデータを残すための「GitHub Archive Program」で21TBのリポジトリの北極圏への保管が完了 - GIGAZINE  Twitter の私の TL 上でも自分の貢献 (contribution) が含まれてるみたいな記述をチラホラ見かけて「やっぱ偉い人はちゃうなぁ」と他人事に思ってたのだが，どういうわけか私のリポジトリも対象になってるらしい。\n Arctic Code Vault Contributor  いやいやいや（笑）\nおそらく☆ (star) が付いてるオープンソース・ライセンス下のリポジトリは軒並み対象になってる感じかな。 なんか GitHub Archive Program の価値がガッツリ下がった気がするよ orz\n【追記 2020-07-21】 やはり GitHub 上で公開されているアクティブでオープンソースなコードを片っ端から集めたらしい。\nThe 02/02/2020 snapshot archived in the GitHub Arctic Code Vault will sweep up every active public GitHub repository, in addition to significant dormant repos. The snapshot will include every repo with any commits between the announcement at GitHub Universe on November 13th and 02/02/2020, every repo with at least 1 star and any commits from the year before the snapshot (02/03/2019 - 02/02/2020), and every repo with at least 250 stars. via GitHub Archive Program  これって，2019年2月以降に作ったオープンソースなリポジトリに少なくとも自分で☆を付ければアーカイブに含まれてしまったわけだ（笑）\n まぁ，何にどういう価値を認めるかは人それぞれだし，既に公開している情報だから私の主観が消失した後にどう扱われようと（文字通り）知ったことではないのだが，なんか自身の黒歴史を無理やり封印されてる気分になってしまう（笑）\nちうわけで，かのラノベ作品の主人公の台詞を思い出した。\n 異世界転移系作品全主人公の気持ちを俺が代弁してやろう。せめてHDD (ハードディスク) の整理をしてからにしてくれよ！ 魔王様、リトライ！より  まぁ，千年後の地球上に（少なくとも現代のプログラム・コードを理解できるような）知的文明があるとは限らないけどね。\nブックマーク  北極圏の永久凍土下でオープンソースのコードを1000年保存する「GitHub Archive Program」。本日、保存すべきプロジェクトの締め切り日 － Publickey  参考図書  猿の惑星 (吹替版) チャールトン ヘストン (出演), ロディ マクドウォール (出演), モーリス エバンス (出演), キム ハンター (出演), フランクリン・J・シャフナー (監督)  (Release 2014-09-01) Prime Video B00MTQ1ICM (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  当時，子供心に『猿の軍団』の方が面白いと思ったのは内緒である（笑）\nreviewed by Spiegel on 2020-07-19 (powered by PA-APIv5)\n  魔王様、リトライ！ 木村寛　(監督), 木村寛　(プロデュース)  Prime Video B07V1T8JMG (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  アクちゃんが可愛い。これ見て書籍版を途中までしか読んでないことに気がついた。\nreviewed by Spiegel on 2020-07-19 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 1.14.6 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/07/go-1_14_6-is-released/",
      "published": "2020-07-17T23:57:01+00:00",
      "update": "2020-07-17T23:57:26+00:00",
      "content": "Go 1.14.6 がリリースされた。\n Go 1.14.6 and Go 1.13.14 are released  セキュリティ・アップデートはなし。\ngo1.14.6 (released 2020/07/16) includes fixes to the go command, the compiler, the linker, vet, and the database/sql, encoding/json, net/http, reflect, and testing packages. See the Go 1.14.6 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.14.6.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.14.6.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.14.6.linux-amd64.tar.gz $ sudo mv go go1.14.6 $ sudo ln -s go1.14.6 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.14.6 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "アイコン化されたプログラミング言語",
      "section": "remark",
      "description": "おまけ「人気（？）のプログラミング言語」も追記した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/07/iconizing-programming-language/",
      "published": "2020-07-16T02:43:19+00:00",
      "update": "2020-07-16T02:44:43+00:00",
      "content": "Font Awesome を倩 (つらつら) と眺めていたらプログラミング言語のアイコンとかもあるんだねぇ。 多分ファイル種別と関連させて使うんだろうけど。\n面白いのでプログラミング言語を示す Font Awesome アイコンを拾ってみた。 色は気にしないように。\n   Icon Code      \u0026lt;i class=\u0026quot;fab fa-css3\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-erlang\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-html5\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-java\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-node-js\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-php\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-python\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-rust\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;    \u0026lt;i class=\u0026quot;fab fa-swift\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;     HTML5 や CSS3 をプログラミング言語と言っていいか微妙だが，ついでということで（笑）\n今回は 2020-07-16 時点の Font Awesome 5.13.1 で提供されるフリー・アイコンの中から目視で探してみた。 見落とし等あれば指摘していただくと主に私が喜びます。\nアイコン・デザインは商標権とか絡んでくるから難しいかもしれないけど，こういうブランド化も面白いかもね。\n【おまけ】 人気（？）のプログラミング言語 今回は TIOBE ランキング50位内にあるメジャーな言語で浚ってみたのだが，このランキングはいつも C と Java が2強で，あとはどんぐりの背比べと代わり映えがない。 強いて言うなら，以前は C++ が3位に絡んでたけど今は Python かな，やっぱり。\nまぁ，保守的といえば保守的なんだろうけど\u0026hellip;\n何故か初夏の季節はプログラミング言語のランキング記事が増えるのだが，その中で個人的なイメージに近いのが以下の記事。\n The State of Developer Ecosystem in 2020 Infographic | JetBrains: Developer Tools for Professionals and Teams どのプログラミング言語が使われているのか、JetBrainsが調査レポートを発表：移行先はGo、Kotlin、Python - ＠IT  これは JetBrains 社によるアンケート結果だそうで，なかなか面白い内容である。\nたとえば，いわゆる「第1言語」としてよく使われているのが\n JavaScript Java Python HTML/CSS SQL PHP C++ C# TypeScript Go Kotlin  らしい。 まぁ HTML/CSS は洒落だと思うが。 そんで，これらの中で移行を検討している言語が以下の表になっている。\n via “The State of Developer Ecosystem in 2020 Infographic”  まぁ，そもそも「移行したい」と考えるほうが少数派なのだが，その少数派の動向を見ると， Java や Python などから Go へ移行したいと考えている人が意外にいる一方で Go から Rust へ移行したいと考える人も多いことに気づく。\nこれって，この数年くらいのトレンドに合ってるような気がするのだが，どうだろう。\nちなみに，上の人気（？）プログラミング言語の用途は以下のようになっている。\n via “The State of Developer Ecosystem in 2020 Infographic”  ブックマーク  Googleが「Open Usage Commons」設立。オープンソースの商標を自由かつ公正に使用するための支援団体 － Publickey Font Awesome 5.0.11 で Creative Commons アイコンに完全対応した Font Awesome 5.13 に COVID-19 関連アイコンが登場  "
    },
    {
      "title": "OpenJDK 14.0.2 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "深刻度が高いセキュリティ・アップデートも含まれているので必ず対応すること。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/07/openjdk-14_0_2-is-released/",
      "published": "2020-07-15T02:58:14+00:00",
      "update": "2020-07-17T02:26:27+00:00",
      "content": "予定通り Java 14 および LTS である Java 11 のマイナー・バージョンアップが行われた。 深刻度が高い脆弱性も含まれているので必ず対応すること。\n OpenJDK Vulnerability Advisory: 2020/07/14  以下に脆弱性の一覧を挙げておく。 今回は脆弱性が少なめでよかったね（笑）\n CVE ID Component CVSSv3.1\nScore Affects ...   7 8 11 13 14   CVE-2020-14583 core-libs/java.io 8.3       CVE-2020-14593 client-libs/2d 7.4       CVE-2020-14562 client-libs/javax.imageio 5.3 \u0026nbsp; \u0026nbsp;     CVE-2020-14621 xml/jaxp 5.3       CVE-2020-14556 core-libs/java.util.concurrent 4.8 \u0026nbsp;      CVE-2020-14573 hotspot/compiler 3.7 \u0026nbsp; \u0026nbsp;     CVE-2020-14578 security-libs/java.security 3.7   \u0026nbsp; \u0026nbsp; \u0026nbsp;  CVE-2020-14579 security-libs/java.security 3.7   \u0026nbsp; \u0026nbsp; \u0026nbsp;  CVE-2020-14581 client-libs/2d 3.7       CVE-2020-14577 security-libs/javax.net.ssl 3.7        CVE-2020-14664 javafx/graphics 8.3 \u0026nbsp;       via “OpenJDK Vulnerability Advisory: 2020/07/14”  Java 10 以下 および 12, 13 は基本的にサポート期間が切れている。 Java 11 または 14 へアップグレードするか Amazon Corretto のようなディストリビューションを利用することを強く推奨する。\nOpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://download.java.net/java/GA/jdk14.0.2/205943a0976c4ed48cb16f1043c5c647/12/GPL/openjdk-14.0.2_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-14.0.2_linux-x64_bin.tar.gz $ sudo ln -s jdk-14.0.2 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;14.0.2\u0026#34; 2020-07-14 OpenJDK Runtime Environment (build 14.0.2+12-46) OpenJDK 64-Bit Server VM (build 14.0.2+12-46, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\n Factory Method Pattern  うむうむ。 ちゃんと動くな。\nブックマーク  Oracle Critical Patch Update Advisory - July 2020  JDK 14.0.2, 11.0.8, 8u261, and 7u271 Have Been Released! | Oracle The Java Tutorials Blog Oracle Java の脆弱性対策について(CVE-2020-14664等)：IPA 独立行政法人 情報処理推進機構 2020年7月 Oracle 製品のクリティカルパッチアップデートに関する注意喚起   AdoptOpenJDKプロジェクトがEclipse Foundationへの合流を発表。合流後の新プロジェクト名は「Eclipse Adoptium」に － Publickey Java 環境のリリースとサポートに関する覚え書き  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n   2020-06-28 に PlantUML Version 1.2020.15 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.14.5 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は2件のセキュリティ・アップデートを含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/07/go-1_14_5-is-released/",
      "published": "2020-07-15T00:47:40+00:00",
      "update": "2020-07-15T00:49:25+00:00",
      "content": "先週予告されていたとおり， Go 1.14.5 がリリースされた。\n [security] Go 1.14.5 and Go 1.13.13 are released  2件のセキュリティ・アップデートを含んでいる。\n【CVE-2020-15586】 Data race in certain net/http servers including ReverseProxy Servers where the Handler concurrently reads the request body and writes a response can encounter a data race and crash. The httputil.ReverseProxy Handler is affected.\nThanks to Mikael Manukyan, Andrew Kutz, Dave McClure, Tim Downey, Clay Kauzlaric, and Gabe Rosenhouse for reporting this issue. This issue is CVE-2020-15586 and Go issue golang.org/issue/34902. via [security] Go 1.14.5 and Go 1.13.13 are released  以下，未稿。\n【CVE-2020-14039】 X.509 verification ignores provided EKUs on Windows On Windows, if VerifyOptions.Roots is nil, Certificate.Verify does not check the EKU requirements specified in VerifyOptions.KeyUsages. Thanks to Niall Newman for reporting this issue. This issue is CVE-2020-14039 and Go issue golang.org/issue/39360. via [security] Go 1.14.5 and Go 1.13.13 are released  以下，未稿。\n例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.14.5.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する（もしくは自力でコンパイルするか）。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.14.5.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.14.5.linux-amd64.tar.gz $ sudo mv go go1.14.5 $ sudo ln -s go1.14.5 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.14.5 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "こんな埼「玉」修正してやるぅ",
      "section": "golang",
      "description": "問題となっているのは「康熙部首（kangxi radicals）」と呼ばれる漢字の部首を集めた以下の Unicode 符号点領域である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/unicode-kangxi-radical/",
      "published": "2020-07-14T04:12:59+00:00",
      "update": "2020-07-14T04:37:49+00:00",
      "content": "Twitter を眺めていたら\n総務省のマイナンバーカード交付状況をデータ化していて、データの結合がうまくいかないなーと思ったら、なんと、同じ埼玉でも文字コードが違うという落とし穴が・・\n3月8日では \\u2f5f が使われていて、それ以降では\\u7389…https://t.co/AOkV3iojaz pic.twitter.com/jU4P583Ad5\n\u0026mdash; Hal Seki (@hal_sk) July 11, 2020  という tweet を見かけた。 これは Adobe Acrobat Distiller の不具合なんだそうで，2019年9月には既に話題に登っているのだが，2020年7月の時点でも修正されていないようだ。\n Create PDF, why KANJI 9AD8(高) will be changed to 2\u0026hellip; - Adobe Support Community - 10625575  Adobe Acrobat Distiller が見捨てられてるのか，それとも「日本語」が見捨てられているのか\u0026hellip;\n閑話休題 (それはさておき) 。 問題となっているのは「康熙部首（kangxi radicals）」と呼ばれる漢字の部首を集めた以下の Unicode 符号点領域である。\n “Kangxi radical - Wikipedia” より抜粋  要するに，これらの領域の文字を本来の符号点に変換してやればいいわけだ。 件の tweet のスレッドを見ると，幸いにも Unicode の NFKC 正規化で変換可能らしい。\n試しに以下のコードを組んで\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;golang.org/x/text/unicode/norm\u0026#34; ) func main() { for r := rune(0x2f00); r \u0026lt;= 0x2fd5; r++ { rr := []rune(norm.NFKC.String(string([]rune{r}))) if r != rr[0] { fmt.Printf(\u0026#34;%#U -(NFKC)-\u0026gt; %#U\\n\u0026#34;, r, rr[0]) } } } 実行してみると\n$ go run sample1.go U+2F00 \u0026#39;⼀\u0026#39; -(NFKC)-\u0026gt; U+4E00 \u0026#39;一\u0026#39; U+2F01 \u0026#39;⼁\u0026#39; -(NFKC)-\u0026gt; U+4E28 \u0026#39;丨\u0026#39; U+2F02 \u0026#39;⼂\u0026#39; -(NFKC)-\u0026gt; U+4E36 \u0026#39;丶\u0026#39; ... U+2F5F \u0026#39;⽟\u0026#39; -(NFKC)-\u0026gt; U+7389 \u0026#39;玉\u0026#39; ... U+2FD4 \u0026#39;⿔\u0026#39; -(NFKC)-\u0026gt; U+9F9C \u0026#39;龜\u0026#39; U+2FD5 \u0026#39;⿕\u0026#39; -(NFKC)-\u0026gt; U+9FA0 \u0026#39;龠\u0026#39; てな出力（一部割愛）になって，ちゃんと変換されていることが分かる。\nただし Unicode 正規化は副作用があるので安直には使えない。 となると，前回の「かなカナ変換」で紹介した方法が使えるかな。\n変換後の符号点の値は散らばっていて且つ数も多く手作業でコードを書くのは不毛なので，まずは unicode.SpecialCase を生成するコードを書いてみよう（笑）\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;golang.org/x/text/unicode/norm\u0026#34; ) func main() { fmt.Println(\u0026#34;var KangxiRadicals = unicode.SpecialCase{\u0026#34;) for kr := rune(0x2f00); kr \u0026lt;= 0x2fd5; kr++ { rr := []rune(norm.NFKC.String(string([]rune{kr}))) if kr != rr[0] { fmt.Printf(\u0026#34;\\tunicode.CaseRange{%#[1]x, %#[1]x, [unicode.MaxCase]rune{%#[2]x - %#[1]x, 0, 0}}, // %#[1]U -\u0026gt; %#[2]U\\n\u0026#34;, kr, rr[0]) } } fmt.Println(\u0026#34;}\u0026#34;) } これを実行するとこんなコードが得られる（一部割愛）。\n$ go run sample1b.go var KangxiRadicals = unicode.SpecialCase{ unicode.CaseRange{0x2f00, 0x2f00, [unicode.MaxCase]rune{0x4e00 - 0x2f00, 0, 0}}, // U+2F00 \u0026#39;⼀\u0026#39; -\u0026gt; U+4E00 \u0026#39;一\u0026#39; unicode.CaseRange{0x2f01, 0x2f01, [unicode.MaxCase]rune{0x4e28 - 0x2f01, 0, 0}}, // U+2F01 \u0026#39;⼁\u0026#39; -\u0026gt; U+4E28 \u0026#39;丨\u0026#39; unicode.CaseRange{0x2f02, 0x2f02, [unicode.MaxCase]rune{0x4e36 - 0x2f02, 0, 0}}, // U+2F02 \u0026#39;⼂\u0026#39; -\u0026gt; U+4E36 \u0026#39;丶\u0026#39; ... unicode.CaseRange{0x2f5f, 0x2f5f, [unicode.MaxCase]rune{0x7389 - 0x2f5f, 0, 0}}, // U+2F5F \u0026#39;⽟\u0026#39; -\u0026gt; U+7389 \u0026#39;玉\u0026#39; ... unicode.CaseRange{0x2fd4, 0x2fd4, [unicode.MaxCase]rune{0x9f9c - 0x2fd4, 0, 0}}, // U+2FD4 \u0026#39;⿔\u0026#39; -\u0026gt; U+9F9C \u0026#39;龜\u0026#39; unicode.CaseRange{0x2fd5, 0x2fd5, [unicode.MaxCase]rune{0x9fa0 - 0x2fd5, 0, 0}}, // U+2FD5 \u0026#39;⿕\u0026#39; -\u0026gt; U+9FA0 \u0026#39;龠\u0026#39; } あとはこれを組み込んで使えばいいだけ。 たとえばこんな感じに使える。\nfunc unicodePrint(s string) { ss := []string{} for _, r := range s { ss = append(ss, fmt.Sprintf(\u0026#34;{%#U}\u0026#34;, r)) } fmt.Println(strings.Join(ss, \u0026#34; \u0026#34;)) } func main() { saitama := \u0026#34;埼⽟\u0026#34; unicodePrint(saitama) unicodePrint(strings.ToUpperSpecial(KangxiRadicals, saitama)) } これを実行すると\ngo run sample2.go {U+57FC \u0026#39;埼\u0026#39;} {U+2F5F \u0026#39;⽟\u0026#39;} {U+57FC \u0026#39;埼\u0026#39;} {U+7389 \u0026#39;玉\u0026#39;} となる。 よーし，うむうむ，よーし。\nブックマーク  [BOD供養寺] スクレイピングしてきたデータの文字コードがおかしかったので修正した - Qiita Go 言語と Unicode 正規化  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    }
  ]
}
