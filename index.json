{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "近ごろ流行りらしい “Zenn” のアカウントを作ってみた",
      "section": "remark",
      "description": "とりあえず私も Qiita に置いてる記事の一部を移行してみるか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/using-zenn-with-github/",
      "published": "2020-09-19T08:09:47+00:00",
      "update": "2020-09-19T08:32:54+00:00",
      "content": "きっかけは @tsuyoshi_cho さんの\n Gitのaliasを晒す - Qiita  で，最近の更新に\n Zennへ移植改訂しました。\nhttps://zenn.dev/tsuyoshicho/articles/git-aliases-revised Gitのaliasを晒す - Qiitaより  とあって「Zenn ってなんじゃら？」と調べてみた。\nプログラマーのための新しい情報共有サービス「Zenn」をリリースしました🎉\nコンセプトは、有益な情報を共有する人がもっと対価を得られること。\nnoteのようにお互いを金銭的にサポートしたり、知見を本にまとめて販売したりできるプラットフォームです。https://t.co/l0lxlW24Ug pic.twitter.com/qrddHoCWsr\n\u0026mdash; catnose (@catnose99) September 16, 2020  おおっ！ 最近 launch したサービスだったのか。\nパッと見の印象は「Qiita ＋ note」という感じ。 今や note が出版社御用達のプラットフォームになっているように Zenn は（決済可能な）エンジニア御用達のプラットフォームになれればいいねぇ。\nというわけで，とりあえずアカウントを作ってみた。\n Spiegel | Zenn  日本のサービスは spiegel 名義でアカウントが取れるのが素敵♡\nただ，決済情報は未入力のままにしてある。 できればクレカや銀行口座より PayPal 決済に対応して欲しい。 達人出版会も PayPal 決済だし，技術系のサービスなんだからその方がいいと思うのだが\u0026hellip;\n“Tech” と “Idea” という色分け Zenn では “Tech” と “Idea” の2つの固定カテゴリが用意されていて，投稿する記事は必ずどちらかのカテゴリに含まれる。 説明によると\n  Tech プログラミングやソフトフェア開発、インフラなどに関する技術記事ならTechを選びます Idea 個人的な意見やポエム、キャリアについての記事、キュレーション記事ならIdeaを選びます   投稿カテゴリー「Tech」「Idea」の選び方 | Zennより  なんだそうだ。 Qiita で技術記事と所謂「ポエム」が入り混じって出てくる状況を見れば妥当な措置だろう。 まぁ，悩んだら “Idea” にするのがいいんだろうねぇ。\nGitHub との連携 Zenn では GitHub リポジトリから記事を deploy することができる。 具体的な手順は以下の記事を参照のこと。\n GitHubリポジトリでZennのコンテンツを管理する | Zenn  ただし，いくつか制限があって\n リポジトリ上の記事を削除しても Zenn に反映されない 一度 Zenn に deploy された記事の slug は変更できない（別の記事として扱われる） 既に Zenn でオン書きしたコンテンツは GitHub に反映されない  ようだ。\nGitHub でリポジトリを作る際は，リポジトリ名は任意だが， .gitignore や README.md は作成しなくてよい。 これらは後述する zenn-cli ツールで作成される。\nzenn-cli ツールの導入 まずは Ubuntu 環境に node.js をインストールしてしまおう（まだ導入していない場合）。 こんな感じでいいだろう。\ncurl -sL https://deb.nodesource.com/setup_current.x | sudo -E bash - sudo apt install -y nodejs 次に，作成した GitHub リポジトリを適当な場所に git clone し，リポジトリのあるディレクトリに移動する。 まずは npm の初期化から。\n$ cd ~/workspace $ gh repo clone spiegel-im-spiegel/zenn-docs $ cd zenn-docs $ npm init --yes Wrote to /home/username/workspace/zenn-docs/package.json: { \u0026#34;name\u0026#34;: \u0026#34;zenn-docs\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;## Links\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;repository\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;git\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;git+https://github.com/spiegel-im-spiegel/zenn-docs.git\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;bugs\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://github.com/spiegel-im-spiegel/zenn-docs/issues\u0026#34; }, \u0026#34;homepage\u0026#34;: \u0026#34;https://github.com/spiegel-im-spiegel/zenn-docs#readme\u0026#34; } package.json は弄らなくて大丈夫。 続けて zenn-cli ツールをインストールする。\n$ npm install zenn-cli ... + zenn-cli@0.1.23 added 900 packages from 393 contributors and audited 903 packages in 66.098s 40 packages are looking for funding run `npm fund` for details found 5 low severity vulnerabilities run `npm audit fix` to fix them, or `npm audit` for details なんか不穏なメッセージが見えるが大丈夫か，これ。 \u0026hellip;まぁいいや。 次いってみよう。\nzenn-cli ツールがインストールできたらリポジトリ内を初期化する。\n$ npx zenn init 🎉Done! 早速コンテンツを作成しましょう 👇新しい記事を作成する $ zenn new:article 👇新しい本を作成する $ zenn new:book 👇表示をプレビューする $ zenn preview これでリポジトリ内に articles/ および books/ ディレクトリが作成され，さらに .gitignore および README.md ファイルも作成される。 ちなみに .gitignore の中身はこんな感じ。\nnode_modules .DS_Store 何ともシンプルだが，これで zenn-cli インストール時に作成される node_modules/ ディレクトリはリポジトリから除外される。\nここまで出来たら一度コミットしておいたほうがいいだろう。\n記事の作成 入力ファイルの作成には以下のコマンドを打つ。\n$ npx zenn new:article 📄d309af5057a827deda35.md created. このファイル名がそのまま slug として URL のパスになる。 Slug は zenn-cli ツールが適当に生成するのでユーザは考えなくともよい。\nもし slug を指定したいのであれば --slug オプションを使う。\n$ npx zenn new:article --slug hello-zenn-world 📄hello-zenn-world.md created. ただし slug 文字列には以下の制限がある。\n 半角英数字（a-z, 0-9）とハイフン（-）の 12〜50 字の組み合わせのみ有効 articles 以下のファイルはディレクトリ階層に出来ない（フラットな構成） books の場合は「本」ごとに slug を指定できる。本の slug 以下はフラットな構成  Slug 文字列が短いとエラーになるのでご注意を。\n$ npx zenn new:article --slug hello エラー：slugの値（hello）が不正です。半角英数字（a-z0-9）とハイフン（-）の12〜50字の組み合わせにしてください 作成したファイルの中身は，以下のように front matter のひな型のみが書き込まれている。\n---title:\u0026#34;\u0026#34;emoji:\u0026#34;🎉\u0026#34;type:\u0026#34;tech\u0026#34;# tech: 技術記事 / idea: アイデアtopics:[]published:true---emoji 項目は，記事のアテンションに使われるのだが，毎回ランダムな文字で初期化されるようだ。 絵文字を直接入力することはないのだが GitHub markdown のように文字列で指定できないものかねぇ。\nプレビューが落っこちる プレビュー用のローカルサーバを起動しようとしたら\n$ npx zenn preview (node:126485) UnhandledPromiseRejectionWarning: Error: Could not find a valid build in the \u0026#39;/home/username/workspace/zenn-docs/.next\u0026#39; directory! Try building your app with \u0026#39;next build\u0026#39; before starting the server. at Server.readBuildId (/home/username/workspace/zenn-docs/node_modules/next/dist/next-server/server/next-server.js:113:355) at new Server (/home/username/workspace/zenn-docs/node_modules/next/dist/next-server/server/next-server.js:3:120) at Object.createServer [as default] (/home/username/workspace/zenn-docs/node_modules/next/dist/server/next.js:2:638) at /home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:53:41 at step (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:33:23) at Object.next (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:14:53) at /home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:8:71 at new Promise (\u0026lt;anonymous\u0026gt;) at __awaiter (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:4:12) at Object.exports.build (/home/username/workspace/zenn-docs/node_modules/zenn-cli/dist/cli/preview/build.js:48:12) (Use `node --trace-warnings ...` to show where the warning was created) (node:126485) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 3) (node:126485) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code. てな感じに例外を吐いて落っこちた。\nまぁ，プレビューなくても問題はないのだが\u0026hellip;\nとりあえず私も\u0026hellip; まずは Qiita に置いてる記事の一部を移行してみるか。 古すぎて使えない記事はダメだけど（笑）\nブックマーク   GitHubリポジトリでZennのコンテンツを管理する | Zenn\n  Zenn CLIをインストールする | Zenn\n  Zenn CLIを使ってコンテンツを作成する | Zenn\n  ZennのMarkdown記法 | Zenn\n  GitHub CLI 1.0 is now available - The GitHub Blog\n  Ubuntu/Debianに最新のNode.jsをインストールする一番良い方法 | LFI\n  🎁 Emoji cheat sheet for GitHub, Basecamp, Slack \u0026amp; more\n  "
    },
    {
      "title": "NIST SP 800-207: “Zero Trust Architecture”",
      "section": "remark",
      "description": "Refactoring することを前提としたシステム設計が大事。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/nist-sp-800-207-zero-trust-architecture/",
      "published": "2020-09-17T03:25:07+00:00",
      "update": "2020-09-17T03:34:57+00:00",
      "content": "毎度の言い訳だが（笑），私がネットワーク管理者でセキュリティ管理者だったのは遥か昔の牧歌的な時代であり，現在時点で参加・所属する企業・組織のポリシーについてどうこう言う権限はないし，その気もない。 ただし，自衛のための知識を摂取し続けることは必要だと思っている。\nというわけで，今回は2020年8月に最終版が公開された NIST SP 800-207 の触りの部分を覚え書きとして記しておく。\n SP 800-207, Zero Trust Architecture | CSRC  Zero Trust および Zero Trust Architecture の定義 SP 800-207 では Zero Trust および Zero Trust Architecture は以下のように定義づけられている。\nZero trust (ZT) provides a collection of concepts and ideas designed to minimize uncertainty in enforcing accurate, least privilege per-request access decisions in information systems and services in the face of a network viewed as compromised. Zero trust architecture (ZTA) is an enterprise’s cybersecurity plan that utilizes zero trust concepts and encompasses component relationships, workflow planning, and access policies. Therefore, a zero trust enterpriseis the network infrastructure (physical and virtual) and operational policies that are in place for an enterprise as a product of a zero trust architecture plan. via SP 800-207: Zero Trust Architecture  ポイントは，アクセスを行うリソース，権限，期間が最小となるよう設計することだ。 これは，特定の安全地帯に入る許可さえあれば，内部のリソースにラフにアクセスできる従来の境界型セキュリティ設計とは大きく異なっている。\nちなみに SP 800-207 では，アクセスする対象を resource と呼んでいる。 これは単なるデータだけではなく物理的なデバイスも対象となっていることを示す。 つまり (日本では既に幻滅期に入っている) IoT も視野に入っているわけだ。\nさらに SP 800-207 では，アクセスを行う主体を subjects と呼んでいる。 そう呼ぶからには subjects が指すのは人間（ユーザ）だけではなく，アプリケーション，サービス，デバイス等も含まれる。 また subjects は authorized and approved subjects と all other subjects で色分けされている。 もちろん all other subjects の代表は「攻撃者（attackers）」である。\nつまり，あるリソースに対して認証・承認されない actor は，システム上の役割に関わらず，全て敵である（笑） この辺が「ゼロトラスト」と呼ばれる所以なのだろう。\nZT/ZTA が重視される理由としては以下の2つが挙げられると思う。\n 企業・組織への攻撃が巧妙化していて，セキュリティ管理の比重が防御から監視へシフトした クラウド上の XaaS リソースは「境界型」では管理できない  できれば安直にクラウドに繋がろうとするスマート家電もなんとかしてほしいのだが\u0026hellip;\nZero Trust Architecture の基本理念 SP 800-207 では ZTA の基本理念として，以下の7つの項目を挙げている。\n All data sources and computing services are considered resources. All communication is secured regardless of network location. Access to individual enterprise resources is granted on a per-session basis. Access to resources is determined by dynamic policy—including the observable state of client identity, application/service, and the requesting asset—and may include other behavioral and environmental attributes. The enterprise monitors and measures the integrity and security posture of all owned and associated assets. All resource authentication and authorization are dynamic and strictly enforced before access is allowed. The enterprise collects as much information as possible about the current state of assets, network infrastructure and communications and uses it to improve its security posture.   via SP 800-207: Zero Trust Architecture  @IT の記事にこの7項目の抄訳が載ってたので以下に挙げておく（ちなみに私は @IT のアカウントを持ってないので記事自体は読んでないw）。\n  データソースとコンピュータサービスは、全てリソースと見なす 「ネットワークの場所」に関係なく、通信は全て保護される 組織のリソースへのアクセスは、全て個別のセッションごとに許可される リソースへのアクセスは動的なポリシーによって決定される 組織が保有するデバイスは、全て正しくセキュリティが保たれているように継続的に監視する リソースの認証と認可は、全てアクセスが許可される前に動的かつ厳密に実施される 資産・ネットワーク・通信の状態について可能な限り多くの情報を収集し、セキュリティを高めるために利用する   NISTによる「ゼロトラストにおける7つの基本原則」と従来の境界型防御との関係：働き方改革時代の「ゼロトラスト」セキュリティ（6） - ＠ITより  面白いのは ZTA に最初から「監視」が組み込まれていること，常に状況をフィードバックして「改善」のサイクルを構築するところまでがセットになっていることだろう。\nセキュリティに於いても PDCA サイクル，いや今なら OODA ループか，が重要ということやね（笑）\n大変なのは\u0026hellip; ZT を組み込むこと自体は，そう難しくないだろう。 おそらくは既存のシステムに ZT の仕組みをラッピングすることで構成可能なはずだ。\n  via SP 800-207: Zero Trust Architecture  大変なのは ZTA におけるリソースとサブジェクト（の権限）の定義・運用・評価だろう。 これ，かなり細かい要求分析が必要だと思うよ。\n当然ながら人間組織の役職で権限を決めるわけにはいかない。 システム管理者やセキュリティ管理者（セキュリティ企業も含めて）であっても「アクセスしてはいけないリソース」はある。 サブジェクトやリソースの杜撰な管理で Class Break を引き起こした Twitter の事例は耳に新しいだろう。 日本での最近の Class Break 事例は「ドコモロ系事案1」か（笑）\nだからこそループを回して「改善」していかなければならないんだろうけど。 Refactoring することを前提としたシステム設計が大事。\n参考図書  セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n  信頼と裏切りの社会 ブルース・シュナイアー (著), 山形 浩生 (翻訳) NTT出版 2013-12-24 単行本（ソフトカバー） 4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  社会における「信頼」とは。\nreviewed by Spiegel on 2015-11-28 (powered by PA-APIv5)\n  ＯＯＤＡ　ＬＯＯＰ（ウーダループ）―次世代の最強組織に進化する意思決定スキル チェット リチャーズ (著), 原田 勉 (翻訳) 東洋経済新報社 2019-02-22 (Release 2019-02-22) Kindle版 B07ND6QTN4 (ASIN)  買ったはいいが，実はまだ読んでない。\nreviewed by Spiegel on 2019-07-02 (powered by PA-APIv5)\n   キャッシュレス決済を使った不正利用に関する一連のインシデントのこと。 Facebook の TL で見かけた「ドコモロ系事案」のフレーズが面白かったので使ってみた（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Java 15 がリリースされた",
      "section": "release",
      "description": "OpenJDK および同系列の Java のみのショート・サイクルのバージョンアップ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/09/java-15-is-released/",
      "published": "2020-09-16T01:22:49+00:00",
      "update": "2020-09-16T03:15:36+00:00",
      "content": "予定通り Java 15 がリリースされた。 OpenJDK および同系列の Java のみのショート・サイクルのバージョンアップである。\n JDK 15 JDK 15 GA Release JDK 15 Release Notes  OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://download.java.net/java/GA/jdk15/779bf45e88a44cbd9ea6621d33e33db1/36/GPL/openjdk-15_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-15_linux-x64_bin.tar.gz $ sudo ln -s jdk-15 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;15\u0026#34; 2020-09-15 OpenJDK Runtime Environment (build 15+36-1562) OpenJDK 64-Bit Server VM (build 15+36-1562, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern  うむうむ。 ちゃんと動くな。\nOpenJDK のリポジトリが GitHub に移行 OpenJDK のリポジトリが GitHub に移行したそうだ。\n openjdk/jdk: JDK main-line development  コード管理について，2019年の段階で Mercurial から git への移行が提案されていたらしい。 その上で，自前での管理ではなく，外部のサービスを使うことにしたようだ。\n外部サービスとして GitHub を選択した理由は\n GitHub\u0026rsquo;s performance is as good as or superior to other providers, it is the world\u0026rsquo;s largest source-code hosting service (50 million users as of May 2020), and it has one of the most extensive APIs.\nGitHubのパフォーマンスは他のプロバイダと同等かそれ以上であり、世界最大のソースコードホスティングサービス（2020年5月時点で5000万人のユーザー）でもあり、最も豊富なAPIを備えています。\nGitHub\u0026rsquo;s extensive API has enabled support for GitHub in many tools including text editors, IDEs, command-line tools, and graphical desktop clients.\nGitHubの豊富なAPIは、テキストエディタ、IDE、コマンドラインツール、グラフィカルなデスクトップクライアントなど、多くのツールでのサポートを実現しています。\n OpenJDKのソースコード、GitHubへの移行を完了 － Publickeyより  とのこと。 さもありなん。\nところで GitHub Discussions はいつ一般に開放されるのだろう。 開放されるなら，Disqus なんか捨てて，フィードバックはそっちに移行したいんだけどなぁ。 それとも個人ユーザには開放されないとか？\nブックアーク  Java 15正式版が登場。スケーラブルかつ低レイテンシなガベージコレクタ「ZGC」が正式版に － Publickey  参考図書  Java言語で学ぶリファクタリング入門 結城 浩 (著) SBクリエイティブ 2007-01-26 (Release 2014-03-12) Kindle版 B00I8AT1EU (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8ATHGW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。\nreviewed by Spiegel on 2016-01-05 (powered by PA-APIv5)\n  増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 結城 浩 (著) SBクリエイティブ 2004-06-18 (Release 2014-03-12) Kindle版 B00I8AT1BS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。\nreviewed by Spiegel on 2018-12-07 (powered by PA-APIv5)\n   2020-08-23 に PlantUML Version 1.2020.16 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "「Web 口振受付サービス」ってなんぞ？",
      "section": "remark",
      "description": "オンライン上で識別・認証するためのデジタル・トークンを持っていない場合は「Web 口振受付サービス」で暗証番号やらの危なっかしい情報を使わざるを得ない，ということだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/web-account-transfer/",
      "published": "2020-09-15T08:59:10+00:00",
      "update": "2020-09-16T03:15:36+00:00",
      "content": "さて，先週から各メディアは嬉々として「ドコモ口座」を叩いてるわけだが（まぁ「ドコモ口座」による「セキュリティ劇場 (security theater) 」がお粗末すぎるのは否めないが），問題の核心はそこじゃないだろうと思っていたら，やはり「ドコモ口座」だけじゃなかったようだ。\n 不正利用が発生した電子決済サービスについてまとめてみた - piyolog  まずはおさらいから。\npiyokango さんによる「ドコモ口座を悪用した不正送金についてまとめてみた」を参照して，今回の「関係者」を挙げてみる。\n   ドコモ口座を悪用した不正送金についてまとめてみた - piyologより  ここで気になるのはやはり「Web 口振受付サービス」だろう。 某国営放送風テレビが「暗証番号を定期的に変える」とか頭の悪すぎることを言ったそうだし，「Web 口振受付サービス」が今回のセキュリティ最弱点であることは（たぶん）間違いないだろう。\nじゃあ「Web 口振受付サービス」ってなんぞ？\nゴメンペコン。 ここからはかなり推測を含んでいる。 何故かというと，現時点で「Web 口振受付サービス」が使えるサービスを持ってないから。\nというわけで，続きをどうぞ。\n まず，今回正直（？）に申告したゆうちょ銀行を見てみる。 ゆうちょ銀行では「口座振替受付サービス」として以下の3つの手段を提供している。\n  収納機関のWebサイトからのお申込み（Web 受付方式） 携帯電話会社やクレジットカード会社など（収納機関）のWebサイトからゆうちょ銀行を選択し、インターネット経由で即時に自動払込みのお申込みができます 収納機関のWebサイトからのお申込み（金融機関受付方式） 携帯電話会社やクレジットカード会社など（収納機関）のWebサイトからゆうちょ銀行を選択し、ゆうちょダイレクトから自動払込みのお申込みができます ゆうちょ銀行のキャッシュカードでのお申込み（収納機関受付方式） ゆうちょ銀行の通常貯金口座のキャッシュカードを、携帯電話会社やクレジットカード会社など（収納機関）に設置された端末機に読み込ませ、暗証番号を入力することで自動払込みのお申込みができます   口座振替受付サービス－ゆうちょ銀行より  ただし，これら3つの手段を使うにはそれぞれ条件がある。 以下に表にしてみる。\n   申し込み方法 サービス名 登録方法 ゆうちょダイレクト     Web 受付方式 Web 口振受付サービス Web ブラウザ 不要   金融機関受付方式 Pay-easy Web ブラウザ 要   収納機関受付方式 Pay-easy 専用端末 不要    そういや，こっちに帰郷ったときに市役所で引き落とししてもらう銀行を登録する際に Pay-easy の専用端末らしきものを使ったわ（今メインで利用してる銀行は Pay-easy に対応してる）。\nおそらく Web での登録であっても「ゆうちょダイレクト」のアカウントを持っていれば，そのアカウントの認証トークンを使って Pay-easy 経由で識別（identification）や認証（authentication）は可能なのだろう。\n言い方を変えると，オンライン上で識別・認証するためのデジタル・トークンを持っていない場合は「Web 口振受付サービス」で暗証番号やらの危なっかしい情報を使わざるを得ない，ということだ。\nこれ結構マズいよねぇ。 個人的には「Web 口振受付サービス」を使う銀行さんはあまり利用したくない気分である。 既に口座があって公共料金の引き落とし等に使ってるならどうしようもないけど（マメに残高履歴をチェックするしかない）。\nたとえばダイレクトバンキング等のアカウントを持っていて Web で Pay-easy が利用可能なら「Web 口振受付サービス」での登録を全て無効にするとかできないのだろうか。\nまぁ，身元の曖昧なユーザを抱えるサービスに対して口座振替を設定するようなシチュエーションは今までなかったんだろう。 おそらく銀行ごとに「Web 口振受付サービス」で対応可能な収納機関がかなり絞り込まれると思う。 今後の動向に注目である。\nブックマーク  「ドコモ口座」以外5社の決済サービスでも不正利用、高市総務相が明らかに - ケータイ Watch  ゆうちょ銀、2要素認証未導入の8事業者の登録とチャージを順次停止へ - ケータイ Watch    "
    },
    {
      "title": "FOSS とジョナサン",
      "section": "remark",
      "description": "そして Open Source は「強者の武器」となる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/foss-and-jonathan/",
      "published": "2020-09-14T12:06:21+00:00",
      "update": "2020-09-15T00:15:38+00:00",
      "content": "最近 Facebook や Twitter の TL で FOSS (Free/Open Source Software) に関する総括みたいな記事をよく見かけるのだが，気のせいだろうか。 まぁ TL って自身の性癖の暴露だから，そういう風に見えてしまうこともあるのだろう。\n「自由」は主張である 人とは本来，不自由な存在である。 何故なら，人は独りでは自身を証明できないから。 故に人が「自由」を求めるのなら「対象」が必ずあるし，求めるからには「対価」が必要である。\nFree Software は以下の4つの自由を求めている。\n  どんな目的に対しても、プログラムを望むままに実行する自由 (第零の自由)。 プログラムがどのように動作しているか研究し、必要に応じて改造する自由 (第一の自由)。 ほかの人を助けられるよう、コピーを再配布する自由 (第二の自由)。 改変した版を他に配布する自由 (第三の自由)。   自由ソフトウェアとは? - GNUプロジェクト - フリーソフトウェアファウンデーションより  物凄く簡単に言うと Free Software は「『政治から自由である』という政治主張」を持つソフトウェア（活動）なのである。 そして「政治主張」を実践するからには，責任やら義務やらが発生する。 その実装例が GNU GPL (General Public License; 一般公衆ライセンス) における “copyleft” という法的 hack である，と考えれば分かりやすいだろう。\nつまり Free Software は「政治から自由である」ために政治的な責任・義務を負うという Anarchism 特有のレトリックを抱えているわけだ。\nOpen Source as a Jonathan インターネットの老害達（笑）が懐かしむ「インターネットの黄金時代」をヒッピー文化に擬えることがある。 で，私の中でヒッピー文化の典型は『かもめのジョナサン』だったりする。\nかの作品に対する感想や評価は色々あるだろうが，私の中でジョナサンは「『飛ぶ』ために全てから逃げた存在」だ。 まぁ，かつてのオウム信者にはアレを読んで入信した人とかもいるそうなので，それほど的はずれではないだろう（笑）\n（最初からそう呼ばれていたわけではないが） Open Source は Free Software 運動から「政治主張」を洗い落としたものである。 Open Source の枠組みでは “copyleft” もオプションのひとつに過ぎない。 おおっ！ これぞまさしくポリシー・ロンダリング（違う1）。\nOpen Source がそうした理由は単純だ。 「自由」の対価を払いたくなかったから。 だから「自由を得る」のではなく「不自由から逃げる」のだ，ジョナサンのように，「それがぼくには楽しかったから」。\n囚人のジレンマと搾取 すずきひろのぶさんが最近「フリーソフトウェアと それを取巻く世界の状況 」という2007年当時のスライドを公開されていて，この中に「囚人のジレンマ」についての言及がある。\n一応「囚人のジレンマ」について簡単に解説しておこう。\nある犯罪を行った囚人 A, B に対し\n If A and B each betray the other, each of them serves two years in prison If A betrays B but B remains silent, A will be set free and B will serve three years in prison If A remains silent but B betrays A, A will serve three years in prison and B will be set free If A and B both remain silent, both of them will serve only one year in prison (on the lesser charge)   via Prisoner\u0026#39;s dilemma - Wikipedia  と持ちかける。 表にするとこんな感じ。\n   Prisoner B stays silent\n(cooperates) Prisoner B betrays\n(defects)  Prisoner A stays silent\n(cooperates) Each serves 1 year Prisoner A: 3 years\nPrisoner B: goes free  Prisoner A betrays\n(defects) Prisoner A: goes free\nPrisoner B: 3 years Each serves 2 years\n(lesser charge)    via Prisoner\u0026#39;s dilemma - Wikipedia  このとき囚人 A, B はそれぞれ黙秘するか裏切るか？ という「非協力ゲーム」の一種である。 この条件下では「両者とも黙秘（協力）する」がパレート効率的であるにも関わらず，「単独のゲーム」または「有限繰り返しゲーム」においては「両者とも裏切る」がナッシュ均衡となることが分かっている。\nでは「無期限繰り返しゲーム」による囚人のジレンマはどうなるのか。 これについては様々なモデルで研究が行われている。 たとえば\n  明白な答えの1つは、力のある人はその力を使って力の弱い人を利用できるということだ  MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明より  は典型的な「搾取」のパターンだ。\nさらに最近では「戦略的力関係とゲームのルールが両者に対称的である場合」でも\n アリスがボブの戦略を知った場合に、ボブの行動を利用し、アリス自身の結果をより良くできることを、藤本と金子教授は示している。\nしかし、この戦略がボブにとってより良い結果を約束するとアリスが保証すれば、アリスはボブの協力を確実なものにできる。たとえばある状況では、両方のプレイヤーが裏切る場合の結果よりも、ボブが犠牲になった方がボブにとって良い結果になるとアリスが保証できるのだ。\nこのため、たとえアリスがより有利になったとしても、ボブには搾取を受け入れる動機がある。「このように、両方のプレイヤーが搾取関係を安定にしています」。\n MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明より  といった「搾取」のパターンも発表されている。\nそして Open Source は「強者の武器」となる 「フリーソフトウェアと それを取巻く世界の状況 」では， GPL 下でソフトウェア開発を行うことでパレート効率的である「両者とも協力する」関係に固定できると主張している（もちろん喩え話として語られている）。\nしかし GPLv3 アップデートを巡る騒動を見る限り，誰もがパレート効率的な「両者とも協力する」関係を望んでいるわけではないように見える。\nthe GPLv2 was pretty popular at the time, but there were a couple notable loopholes some big corporations had been taking advantage of, which the free software people wanted to close. a whole bunch of people thought the GPLv2 was fine the way it was, though - closing the loopholes as aggressively as the GPLv3 did cut off some justifiable security measures, and some people said that it could do more harm than good. the linux kernel, along with a lot more stuff, declared it was sticking with the GPLv2 and not moving to the GPLv3. via Post-Open Source | boringcactus  and LLVM became at least as good as GCC, and a less risky decision for big companies, and easier to use to build new languages. so the free software movement’s last technical advantage was gone. its social advantages also kinda went up in flames with the GPLv3, too: the software that was the foundation for the GPL enforcement lawsuits stuck with the GPLv2. via Post-Open Source | boringcactus  「自由を得る」 Free Software (運動) より「不自由から逃げる」 Open Source を選好することによって何が起きるか。 「戦略的力関係とゲームのルールが両者に対称的である場合でも、搾取的な関係が構築できる」のであれば，それはどのような形を取るのか。\nジョナサンは「ここではない」世界へと逃げ込めたが，かもめならぬ我が身では何があろうとこの世界この社会で生きていかなければならない。\nOpen Source に関する批判は色々見受けるが，要するに Open Source が「強者の武器」となり，情報力を背景にした搾取の構造を構成していることが問題なのだと思う。 しかし Free Software ではその非対称性を壊せない。\n故に\ntl;dr: say no to licenses, say yes to norms. via Post-Open Source | boringcactus  なんてな話も出るのかもしれない。 個人的には（日本の法運用を見ても分かる通り）規範だのガイドラインだのをベースにした運用は腐敗や搾取の温床にしかならないと思うが（笑）\nブックマーク  クーリエ連載；エコノミスト紹介、自由のためなら人が死んでもいい フリーソフトウェアとそれを取巻く世界の状況 (2007) – とりあえずノートがわりに書いてます Post-Open Source | boringcactus  ブログ: ポスト・オープンソース   孵卵器の中のインターネット 搾取と狂狷  参考図書  かもめのジョナサン【完成版】（新潮文庫） リチャード・バック (著), 五木 寛之 (翻訳) 新潮社 2015-07-01 (Release 2015-12-18) Kindle版 B01916B8V8 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「まぼろしの4章」を加えた完成版。私の中でヒッピー文化のイメージは子どものときに読んだ『かもめのジョナサン』であり，初期のインターネットも『かもめのジョナサン』の延長線上にあると理解している。\nreviewed by Spiegel on 2017-01-23 (powered by PA-APIv5)\n  グリゴリの捕縛 白田 秀彰  2001-11-26 (Release 2014-09-17) 青空文庫 4307 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30 (powered by aozorahack)\n  もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo (著) 達人出版会 2017-12-25 (Release 2019-03-02) デジタル書籍 infoshare2 (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  WirelessWire News 連載の書籍化。感想はこちら。祝 Kindle 化！\nreviewed by Spiegel on 2018-12-31\n  それがぼくには楽しかったから 全世界を巻き込んだリナックス革命の真実 (小プロ・ブックス) リーナス トーバルズ (著), デビッド ダイヤモンド (著), 風見 潤 (翻訳), 中島 洋 (監修) 小学館プロダクション 2001-05-10 単行本 4796880011 (ASIN), 9784796880015 (EAN), 4796880011 (ISBN)  Linux の作者 Linus Torvalds の自伝的作品。\nreviewed by Spiegel on 2017-01-23 (powered by PA-APIv5)\n  かもめが翔んだ日 渡辺真知子 (メインアーティスト) Sony Music Direct(Japan)Inc. 1978-05-02 (Release 2014-04-04) MP3 ダウンロード B00FU3P37W (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  そらで唄えます。つか，今でもカラオケでよく唄います（笑）\nreviewed by Spiegel on 2020-09-14 (powered by PA-APIv5)\n   本当の policy laundering は国際的な議論や規制を都合よく利用して国内での立法プロセスを迂回することをさす： In their review of global business regulation, Braithwaite and Drahos find that some countries (notably the U.S. and the UK) push for certain regulatory standards in international bodies and then bring those regulations home under the requirement of harmonization and the guise of multilateralism; this is what we refer to as policy laundering. (via Policy laundering - Wikipedia) \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-09-13 のブックマーク",
      "section": "bookmarks",
      "description": "「Yubicoが最新セキュリティキー「Yubikey 5C」を発表、価格は約5800円」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/09/13-bookmarks/",
      "published": "2020-09-13T02:05:45+00:00",
      "update": "2020-09-13T02:07:11+00:00",
      "content": "リリース情報  Release v1.31.0 · golangci/golangci-lint · GitHub Release 1.51.0 · atom/atom · GitHub Release August 2020 · microsoft/vscode · GitHub Release MathJax v3.1.1 · mathjax/MathJax-src · GitHub Release MathJax v3.1.2 · mathjax/MathJax-src · GitHub  バベルのインターネット  中国がMITの子供向けプログラミング言語「Scratch」の国内使用を禁止 | TechCrunch Japan ファーウェイスマホは2021年にHarmonyOSを搭載へ、HarmonyOS 2.0ベータを年内配布 | TechCrunch Japan  セキュリティ＆プライバシー関連  マルウェア Emotet の感染拡大および新たな攻撃手法について WordPress「File Managerプラグイン」の脆弱性についての注意喚起 | さくらインターネット ドコモ口座を悪用した不正送金についてまとめてみた - piyolog More on NIST’s Post-Quantum Cryptography - Schneier on Security Intel、2020年9月のセキュリティアドバイザリを公開 ～第8世代Intel Core以降などのBIOSに問題 - 窓の杜 Yubicoが最新セキュリティキー「Yubikey 5C」を発表、価格は約5800円 | TechCrunch Japan NSA元長官キース・アレクサンダー氏がアマゾンの取締役に - ZDNet Japan OpenSSL Security Advisory: Raccoon Attack (CVE-2020-1968)  「OpenSSL」に暗号通信を解読可能な脆弱性“Raccoon Attack” ～パッチ提供のない旧版は注意 - 窓の杜   Ranking National Cyber Power - Schneier on Security  天文関連  6mミリ波電波望遠鏡が日本天文遺産に認定 | 国立天文台(NAOJ) APOD: 2020 September 8 - GW190521: Unexpected Black Holes Collide Survey finds no detectable alien radio signals across 10 million stars – Astronomy Now : ほ座の1000万個以上の恒星がある領域で電波による地球外文明探査を実施。しかし検出できず  知財関連  Archivists Want Broader DMCA Exemption for ‘Abandoned’ Online Games * TorrentFreak Post-Open Source | boringcactus  ブログ: ポスト・オープンソース    その他  Schneier.com is Moving - Schneier on Security マイクロソフト、WebIDEの「Visual Studio Codespaecs」を「GitHub Codespaces」に統合へ － Publickey 「Azure Spring Cloud」正式リリース。JavaフレームワークSpring Bootの開発と実行のためのフルマネージド環境 － Publickey Update on extension support in the new Firefox for Android | Mozilla Add-ons Blog  Android版「Firefox」で利用できるアドオンが少な過ぎる問題についてMozillaが声明 - 窓の杜   マイクロソフトが「SMB over QUIC」ファイル共有プロトコル実装中。VPNなしでもインターネット上で安全にファイルサーバへのアクセスを実現へ － Publickey 2020年9月8日ニュース「血栓作るタンパク質で新型コロナ重症化を予測 千葉大が実用化に向け臨床研究」 | SciencePortal Gitでやりたいこと、ここで見つかる - Qiita マイクロソフト、AWSのコスト管理機能をAzureの管理機能に統合。「Azure Cost Management + Billing」AWS用コネクタが正式リリース － Publickey GoogleもRPAに参入か。ノーコードでプロセスオートメーションを実現する「AppSheet Automation」を含む「Business Application Platform」を発表 － Publickey 【編集部からのお知らせ】窓の杜ライブラリでクラウドサービスの紹介をはじめます！ - 窓の杜 モバイル向けGPUでも優勢を誇るNVIDIA「GeForce」シリーズ | TechCrunch Japan OpenJDKのソースコード、GitHubへの移行を完了 － Publickey LibreOffice Tips \u0026amp; Tricks: Replacing Microsoft Fonts - The Document Foundation Blog Google CloudがAPI管理とノーコードを駆使したビジネスアプリプラットフォームを公開 | TechCrunch Japan TensorFlowの機械学習による画像認識をScratch上で！ 子どもでもできるAI活用プログラミング - どれ使う？プログラミング教育ツール - 窓の杜 Q-CTRLとQuantum Machinesが提携、量子コンピューティング開発を加速 | TechCrunch Japan グーグルがAndroid 11を公開、メッセージ、プライバシー関連を中心に強化・改善 | TechCrunch Japan 自動JavaユニットテストツールDiffblueの無料コミュニティエディションが登場 | TechCrunch Japan マイクロソフト、AWSのコスト管理機能をAzureの管理機能に統合。「Azure Cost Management + Billing」AWS用コネクタが正式リリース － Publickey データセンター構成ツールの「Chef」、Progressによる買収を発表 － Publickey The Third Edition of Ross Anderson’s Security Engineering - Schneier on Security GitHub/GitLabとの統合用WebIDE「Gitpod」がオープンソースで公開。GitHub Codespacesを先取りする開発環境 － Publickey 2020年9月11日ニュース「特定外来生物『ヒガタアシ』中国経由で侵入か 遺伝子解析＋貿易統計で突き止め」 | SciencePortal Using Gonum Graphs to Solve Word Ladder Puzzles | Gonum System-Glitch/goyave: 🍐 Elegant Golang Web Framework 第5回『プログラミング言語Go』オンライン読書会 - connpass : 取り敢えずエントリしてみた ブログ: PCR検査が陽性でも、感染ではないかも知れない  "
    },
    {
      "title": "GitHub プロファイルを（ちょっとだけ）カッコよくしてみる",
      "section": "remark",
      "description": "自前でポートフォリオを構成できる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/using-github-profile-readme/",
      "published": "2020-09-12T12:17:02+00:00",
      "update": "2020-09-13T02:18:45+00:00",
      "content": "何となく他所様の GitHub プロファイルを眺めてたら既定の表示と違うものがチラホラと見受けられる。\nどうやら，自分のユーザ名（私の場合は spiegel-im-spiegel）のリポジトリを作って中の README.md をプロファイルページの Overview タブに表示できるらしい。\nたとえばこんな感じ。\nGitHub Profile Overview  Markdown や HTML のほか，拡張子を変えれば AsciiDoc とかも使えるみたいなので，割と自由に記述できる。 要するに，自前でポートフォリオを構成できるわけだ。\n取り敢えず，それなりの画面を作りたいなら以下のサービスを利用するのがお勧め。\n GitHub Profile Readme Generator | GitHub Profile Readme Generator rahuldkjain/github-profile-readme-generator: Generate github profile README easily with latest add-ons like visitors count, github stats, etc using minimal UI.  項目を適当に埋めていって，アイコンやアドオンを選択して [Generate README] ボタンを押せば雛形となる Markdown コード（中身はほぼ HTML だけどw）を出力してくれるので，そのまま使うもよし，アレンジして使うもよしである。\nブックマーク  How to create Github Profile-README | by Pratik Kumar | Jul, 2020 | Towards Data Science Shields.io: Quality metadata badges for open source projects alexandresanlim/Badges4-README.md-Profile: Improve your README.md profile with these amazing badges. anuraghazra/github-readme-stats: Dynamically generated stats for your github readmes Blog Post Workflow · Actions · GitHub Marketplace · GitHub  gautamkrishnar/blog-post-workflow: Show your latest blog posts from any sources or StackOverflow activity or Youtube Videos on your GitHub profile/project readme automatically using the RSS feed   GitHub Readme Stats を利用してGitHubプロフィールをカッコよくする - Qiita  "
    },
    {
      "title": "最近のセキュリティ・インシデント",
      "section": "remark",
      "description": "帰ってきた Emotet / キャッシュレス決済の脆弱性",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/recently-security-incidents/",
      "published": "2020-09-11T04:55:11+00:00",
      "update": "2020-09-15T09:00:24+00:00",
      "content": "（この記事は Facebook の TL に書き散らした内容からの再構成です）\n言い訳すると，私はもう「エンジニア」でも「管理者」でもないので，自身に直接降りかかりそうなセキュリティ・インシデント以外は知らないふりをすることにしている（一応ブックマークは溜め込んでるけど）。 でも，まぁ，最近話題の以下の2つはブログ記事として記しておこうかな，と思ったので（笑）\n 帰ってきた Emotet キャッシュレス決済の脆弱性  帰ってきた Emotet Emotet は主に電子メールで媒介される「トロイの木馬」に分類される malware で，単独での拡散機能はない。\n日本では2019年末あたりから報告例が上がっていて，一時は沈静化していたが，2020年7月中旬から再活性化している。\n 「Emotet」と呼ばれるウイルスへの感染を狙うメールについて：IPA 独立行政法人 情報処理推進機構 国内で相次ぐ不審メールの注意喚起と返信型Emotetについてまとめてみた - piyolog  Emotet の特徴は以下の通り。\n Emotet は単体で感染することは少なく、認証情報を盗み出すトロイの木馬や身代金を要求するランサムウェアと一緒に感染することが多く、標的となるEメールや連絡先などの情報を盗み出し、これらの情報を利用して、実際に交わされたEメールの内容や連絡先を悪用し、偽装したEメールを配信することで新たな被害者を標的にします。受け取ったメッセージは正規のもののように見えてしまうため、ユーザーがこのフィッシングメールを判別することは極めて困難にです。Emotetは定期的にアップデートや改変が繰り返されており、Emotet自体とコマンド＆コントロールチャネルが更新できるため、従来のアンチウイルスのシグネチャやネットワークレベルでの検知は困難です 活動を休止していたEmotetが再び活発に – 感染リスクを軽減するためには - F-Secureより  つまり Emotet 侵入は「第一段階」に過ぎず，次段階の内部情報の窃盗や ransomware を使った脅迫行為に向けた情報収集に使われているようだ。\n 標的型ランサムウェア被害企業が1年以上前からEmotetに感染していた可能性についてまとめてみた - piyolog  なので Emotet を検出しても，それを「除去して終わり」とはならず，内部システムの徹底的な洗い出しや情報漏洩の可能性の検討等の面倒くさい作業が待っているわけだ。\nEmotet 特効の防御策はないが，電子メールを媒介とすることから，通常の phishing 対策の徹底が重要となる。\n  身に覚えのないメールの添付ファイルは開かない。メール本文中のURLリンクはクリックしない。 自分が送信したメールへの返信に見えるメールであっても、不自然な点があれば添付ファイルは開かない。 OSやアプリケーション、セキュリティソフトを常に最新の状態にする。 信頼できないメールに添付されたWord文書やExcelファイルを開いた時に、マクロやセキュリティに関する警告が表示された場合、「マクロを有効にする」「コンテンツの有効化」というボタンはクリックしない。 メールや文書ファイルの閲覧中、身に覚えのない警告ウインドウが表示された際、その警告の意味が分からない場合は、操作を中断する。 身に覚えのないメールや添付ファイルを開いてしまった場合は、すぐにシステム管理部門等へ連絡する。   「Emotet」と呼ばれるウイルスへの感染を狙うメールについてより  最近の事例として面白いのは「パスワード付き zip ファイル」をパスワードと共に添付して送るタイプである。\n   「Emotet」と呼ばれるウイルスへの感染を狙うメールについてより  通常の添付ファイルは（企業・組織によっては）メールサーバ到達時点で拒否されることがあるため「パスワード付き zip ファイル」が使われるのだろうが，これが見事に日本の特殊商慣行というか奇習にマッチしているようで，9月に入ってから Emotet の侵入報告が激増しているらしい（笑）\n個人的には（少なくともビジネス・シーンでは）メールにファイルを添付して送るのは今や「悪習」だと思う。 ファイルの共有を行いたいのであれば Google drive や Box, Dropbox などのストレージ・サービスを活用すべきだろう。 かといって Firefox Send のような認証を omit した仕組みでは却ってリスクが増すけれど。\nキャッシュレス決済の脆弱性 私もどうしても「どこもろざ」と読んでしまう。 そもそも「銀行口座」を連想させるようなネーミングからして失敗だよな（笑）\n ドコモ口座を悪用した不正送金についてまとめてみた - piyolog  Twitter の TL を眺めるに，「docomo 利用者以外は関係ない」と思っている人が意外に多そうだ。 関係ないからね。 上のリンク先の記事に挙がっている銀行の口座を持っている人は，一度は残高履歴を確認することを強くお勧めする。\n「ドコモ口座」は最近流行りの「キャッシュレス決済」サービスのひとつである。\nいわゆる「キャッシュレス決済」の市場は既に飽和していて「パイの食い合い」状態になっている。 これに拍車をかけるのが政府主導の「マイナポイント」で，ぶっちゃけ非常にウザい。\nキャリア系の決済サービスの強みは回線契約自体が利用者の「信用」を担保することだったと思うが，サービス対象者を不特定に拡大してしまったために「信用」の構造が変わってしまったのが今回のポイントのひとつだろう。\nもうひとつはチャージに「Web 口振受付サービス」を使っていること。\n   ドコモ口座を悪用した不正送金についてまとめてみたより  これは結構ヤバい仕組みだ。\n邪推だが「ドコモ口座」では「口座振替」が同一ユーザ内で完結するから問題ないと思ったのだろう。 しかし，実際には「ドコモ口座」ユーザが「誰か分からない」のだから，この前提は成り立たない。\nまぁ「ドコモ口座」は 2020-09-10 までに全ての銀行口座登録・変更機能を停止したそうで，遅きに失したとはいえ，措置としては妥当だろう。\n 銀行口座登録の申込受付停止および一部銀行のチャージ停止について  「ドコモ口座」では「本人確認」を強化すると言っているが「本人確認書類」の詐取はいくらでもあり得るのだから，オンラインでの（完全な）身元確認は無理と考えたほうがいい。 むしろ「オンラインでの身元確認は無理」という前提で，どのようにサービスを設計するかが重要だろう。\nあと，いまどき SMS 認証はヤメロ！ やる気あんのか？\nこれ，今回はたまたま「ドコモ口座」だっただけで，似たようなことをやらかしてる「キャッシュレス決済」サービスは結構あるんじゃないの？ 今回のインシデントを通じてきちんとリスク・アセスメントを行い，必要なら法規制をかけないと。 野放図にやりたい放題やる季節は（7pay 崩壊とともに）終わってるのよ。\nまた，この手の犯罪は必ず模倣者が出る。 しばらくは残高履歴をこまめにチェックしたほうがいいだろう。\n【2020-09-12 追記】 暗証番号を認証に使ってはいけない Twitter で見かけたが某国営放送風テレビが「暗証番号を定期的に変える」とか馬鹿すぎることを言ってるらしい。 誰がそんな頭の悪いことを言い始めたのやら\u0026hellip; sigh\n言うまでもないことだと思っていたが改めて言わせてもらうと，暗証番号や PIN コードは認証（authentication）には使えない。 これらのコードは数字4桁から6桁で構成されている。 このサイズの数字列を総当り方式で解読しても，かかるコストは1円未満しかならない。\n    利用する文字種類数と内訳 パスワード長   種類数 数字 文字 シンボル 4文字 8文字 12文字 16文字    10種0-9なしなし1円未満\n（$2^{13.3}$）1円未満\n（$2^{26.6}$）約35円\n（$2^{39.9}$）約35万円\n（$2^{53.2}$） 36種0-9a-zなし1円未満\n（$2^{20.7}$）約100円\n（$2^{41.4}$）約1.65億円\n（$2^{62.0}$）約276兆円\n（$2^{82.7}$） 62種0-9a-z\nA-Zなし1円未満\n（$2^{23.8}$）約7,500円\n（$2^{47.6}$）約1,120億円\n（$2^{71.5}$）約165京円\n（$2^{95.3}$） 94種0-9a-z\nA-Z ! \" # $ %\n\u0026amp; ' ( ) =\n~ | - ^ `\n¥ { @ [\n+ * ] ; :\n} \u0026lt; \u0026gt; ? _\n, . / 1円未満\n（$2^{26.2}$）約21万円\n（$2^{52.4}$）約16.5兆円\n（$2^{78.7}$）\n約129,000京円\n（$2^{104.9}$）   パスワード解読の想定コスト例（情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編  2.4.2.2項より）  たとえば TOTP (Time-based One-time Password) 認証では6桁の数字列を使うが，生存期間は30秒程度で，つまりその程度の信頼性しかないのだ。\nじゃあ，永続的な暗証番号や PIN コードが何に使われるのかというと，デバイスやアプリの「アンロック」に使われる。 この場合，暗証番号や PIN コードはユーザと（手元の）デバイスの間でのみ共有されていればいいので，（アカウントのロックアウトも組み合わせれば）セキュリティ要件はかなり緩くできる。\nしかし，暗証番号を「Web 口振受付サービス」のようなリモートサービスの認証で使うとなると話は変わってくる。 そもそも銀行側が「キャッシュカードの暗証番号を保持ってる」こと自体が問題だと思うが\u0026hellip;\nそういえば，どっかの説教番組が「SIM の PIN コードは変更したほうが安全」とか馬鹿なことを言ったそうで，実際に試した人のトラブルが続出したらしい（笑） 暗証番号や PIN コードは頻繁に変更するように考えられてないし，もし「頻繁に変更」が必要だと言うのなら，そのサービスやシステムは完全に失敗作である。\nあっ，でも，最近は警察や銀行関係者を装って，キャッシュカードや暗証番号を詐取する詐欺が流行ってるらしい。 詐欺に引っかからないのが一番だが，万一の事後処理として「暗証番号を変更する方法」は確認しておいたほうがいいだろう。\nブックマーク   日本医師会、マルウェア「Emotet」の感染を公表\u0026ndash;感染拡散メールに注意喚起 - ZDNet Japan\n  「Web 口振受付サービス」ってなんぞ？\n  参考図書  セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n  信頼と裏切りの社会 ブルース・シュナイアー (著), 山形 浩生 (翻訳) NTT出版 2013-12-24 単行本（ソフトカバー） 4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  社会における「信頼」とは。\nreviewed by Spiegel on 2015-11-28 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 1.15.2 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/09/go-1_15_2-is-released/",
      "published": "2020-09-10T01:22:48+00:00",
      "update": "2020-09-10T01:23:18+00:00",
      "content": "Go 1.15.2 がリリースされた。\n Go 1.15.2 and Go 1.14.9 are released  セキュリティ・アップデートはなし。\ngo1.15.2 (released 2020/09/09) includes fixes to the compiler, runtime, documentation, the go command, and the net/mail, os, sync, and testing packages. See the Go 1.15.2 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.15.2.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.15.2.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.15.2.linux-amd64.tar.gz $ sudo mv go go1.15.2 $ sudo ln -s go1.15.2 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.15.2 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "住所コードと郵便番号に関する覚え書き",
      "section": "remark",
      "description": "個人が興味本位で弄るのは無理，という結論になった。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/address-code-and-postal-code/",
      "published": "2020-09-09T09:30:36+00:00",
      "update": "2020-09-16T01:24:16+00:00",
      "content": "昨日リリースした spiegel-im-spiegel/cov19data パッケージなんだけど，東京都の PCR 検査陽性者のデータも参照できるようにしている。\n 東京都 新型コロナウイルス陽性患者発表詳細 - データセット - 東京都オープンデータカタログサイト  今までは日付毎に行数をカウントするだけでデータの詳細に興味はなかったのだが，今回改めて CSV ファイルを眺めてみると「全国地方公共団体コード」のカラムがあったので「これなら都道府県名や市区町村名いらなくね？」と気がついた。\nついでにこの住所コードと郵便番号を関連付ければ面白いデータセットが組めるんじゃないかと安直に考えたのだが，どうも簡単な話ではないようだ。 ていうか，個人が興味本位でやるのは無理，という結論になった。\n今回は，その辺の話を覚え書きとして記しておく。\n住所コード ひとくちに住所コードと言っても，様々なレイヤがある。 以下で細かく見てみよう。\nJIS 都道府県コード JIS 規格で決められているコードで，都道府県ごとに 01 から 47 までの2桁の数字列で表される。 たとえば，島根県の都道府県コードは 32 である。\nJIS 住所コードと全国地方公共団体コード 市区町村までを表す住所コードは，都道府県コード＋3桁の合計5桁の数字列で表され，これも JIS 規格で決められている。 たとえば，島根県松江市は 32201 である。\n更に，住所コードの末尾にチェック・ディジットを付加した6桁を「全国地方公共団体コード」と呼ぶ。 ちなみにチェック・ディジットの計算手順は以下の通り。\n 住所コード $abcde$ の各桁に対して $a \\times 6 + b \\times 5 + c \\times 4 + d \\times 3 + e \\times 2$ を求める (1) (1) で求めた値を $11$ で割ったあまりを求める (2) (2) で求めた値を $11$ から引いた値の下1桁がチェック・ディジットとなる  たとえば，住所コード 32201 のチェック・ディジットは\n\\[ 11 - \\left(\\left(3 \\times 6 + 2 \\times 5 + 2 \\times 4 + 0 \\times 3 + 1 \\times 2 \\right) \\bmod 11 \\right) = 6 \\]  なので 322016 が全国地方公共団体コードとなる。\nまた 都道府県コード＋000＋チェック・ディジット で都道府県を表す全国地方公共団体コードになるらしい。 つまり 320005 で島根県を表す。\n国交省 GIS による大字町丁目コード JIS 住所コードよりも更に詳細な住所コードは色々あるが，たとえば以下のものがある。\n 国土地理協会の全国町・字ファイルで提供される JIS 住所コードを含む11桁のコード体系。通称「11桁コード」。住基ネットや個人番号カードでおなじみ地方公共団体情報システム機構もこれを使っているようだ 運輸局で使われる運輸局住所コード。9桁または12桁のコード体系。 JIS 住所コード非互換 国土交通省 GIS の位置参照情報に含まれる大字町丁目コード。 JIS 住所コードを含む12桁のコード体系  オススメは GIS の位置参照情報。 GIS で提供されるデータはいわゆるオープンデータになっていて Creative Commons の「表示 \u0026nbsp;」ライセンス条件下で利用することができる。\n 本利用ルールは、クリエイティブ・コモンズ・ライセンスの表示4.0国際（https://creativecommons.org/licenses/by/4.0/legalcode.jaに規定される著作権利用許諾条件。以下「CCBY」といいます。）と互換性があり、本利用ルールが適用されるコンテンツはCCBYに従うことでも利用することができます。 利用規約より  Japanese-Addresses GIS の位置参照情報を上手く使っているのが Geolonia から提供されているオープンデータの japanese-addresses である。\n Geolonia 住所データ | japanese-addresses geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ  japanese-addresses データは Creative Commons の「表示 \u0026nbsp;」ライセンスで提供されている。 またデータの生成コードは MIT ライセンスで公開されている。\njapanese-addresses データは GIS の位置参照情報をそのまま使っているわけではなく JP の郵便番号データと組み合わせて住所の読み情報も付加しているようだ。 あれ？ じゃあ GIS の位置参照情報と郵便番号データを組み合わせて住所コードと郵便番号とを連携させられるんじゃね？ と思った私を誰が責められよう（笑）\n住所コードと郵便番号 JP の郵便番号データを眺めてみるとこんな感じになっている。\n32201,\u0026#34;690 \u0026#34;,\u0026#34;6900000\u0026#34;,\u0026#34;ｼﾏﾈｹﾝ\u0026#34;,\u0026#34;ﾏﾂｴｼ\u0026#34;,\u0026#34;ｲｶﾆｹｲｻｲｶﾞﾅｲﾊﾞｱｲ\u0026#34;,\u0026#34;島根県\u0026#34;,\u0026#34;松江市\u0026#34;,\u0026#34;以下に掲載がない場合\u0026#34;,0,0,0,0,0,0 32201,\u0026#34;69002\u0026#34;,\u0026#34;6900261\u0026#34;,\u0026#34;ｼﾏﾈｹﾝ\u0026#34;,\u0026#34;ﾏﾂｴｼ\u0026#34;,\u0026#34;ｱｲｶﾁｮｳ\u0026#34;,\u0026#34;島根県\u0026#34;,\u0026#34;松江市\u0026#34;,\u0026#34;秋鹿町\u0026#34;,0,0,0,0,0,0 32201,\u0026#34;690 \u0026#34;,\u0026#34;6900022\u0026#34;,\u0026#34;ｼﾏﾈｹﾝ\u0026#34;,\u0026#34;ﾏﾂｴｼ\u0026#34;,\u0026#34;ｱｵﾊﾞﾀﾞｲ\u0026#34;,\u0026#34;島根県\u0026#34;,\u0026#34;松江市\u0026#34;,\u0026#34;青葉台\u0026#34;,0,0,0,0,0,0 32201,\u0026#34;690 \u0026#34;,\u0026#34;6900015\u0026#34;,\u0026#34;ｼﾏﾈｹﾝ\u0026#34;,\u0026#34;ﾏﾂｴｼ\u0026#34;,\u0026#34;ｱｹﾞﾉｷﾞ\u0026#34;,\u0026#34;島根県\u0026#34;,\u0026#34;松江市\u0026#34;,\u0026#34;上乃木\u0026#34;,0,0,1,0,0,0 ... 一見 JIS 住所コードと郵便番号が\n のように 1 対 n の関係になっているように見えるけど\n 郵便番号や市区町村データを取り扱うときにはまったこと - Qiita  によると\n 郵便番号は必ず1つの町名に紐づいているわけではない 市区町村をまたいで同じ郵便番号を持つケースがある 市区町村はおろか県を飛び越えて同じ郵便番号を持ちうるケースがある  そうで，つまり JIS 住所コードと郵便番号と住所（文字列）の関係は\n となっていて， JIS 住所コードと郵便番号の間で関係を記述できない。 敢えてやるなら\n のように第3の固有IDを作って間接的に関連付ける必要がある。\n\u0026hellip;というわけで諦めました 道理で住所コードと郵便番号を関連付ける実装を見かけない筈だよ。\n使い方としては，まず構造のない住所（文字列）があって，単にその住所を絞り込む条件として住所コードや郵便番号が使える，というだけなのだろう。 古い閉じたシステムではよくある構成だが，外部データと関連付けようとすると素朴すぎて使えない。\nたとえば JIS 住所コードより詳細な「11桁コード」や GIS 位置参照情報の「大字町丁目コード」を第3の固有IDとして郵便番号を関連付けることは可能かもしれないが，そのためには文字列の住所を「名寄せ」する必要がある。 しかも郵便番号データって月単位で変更されるので，ほぼ無理ゲーな気がする。 実際 japanese-addresses は郵便番号との関連付けを行っていないわけだし。\nというわけで，個人が興味本位でやるのは（労力に見合わないので）無理，と諦めた1。\nおあとがよろしいようで m(_ _)m\nブックマーク  日本全国の住所マスターデータをオープンデータとして無料公開 - Geolonia    もちろん仕事なら調査・構築・保守までやるよ（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
