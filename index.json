{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "「特別定額給付金」申請のナニがダメだったのか（その2）",
      "section": "remark",
      "description": "個人番号カードを使うとか余計なことは考えず，最初からちゃっちゃと郵送したほうが最終的にスムーズにいったのではないかと邪推してしまう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/06/bottleneck2/",
      "published": "2020-06-12T03:14:23+00:00",
      "update": "2020-06-12T03:20:53+00:00",
      "content": "一応「「特別定額給付金」申請のナニがダメだったのか」の続きだが，今回は完全に愚痴なので読まなくてもいいです。\nいや，この記事を見て嘲笑わずにはいられなかったのよ。\n 立憲民主党の蓮舫副代表が11日、参議院予算委員会で給付金のITシステムを巡る質問をした際に、「サーバーは増やすんじゃなくて、時代はもうクラウドなんですよ！」と断言した。しかし、クラウドもサーバーにあることに変わりはなく、他党の議員やネット民から「IT系弱すぎる」「知ったかぶり」などと失笑を買う事態になっている via 「クラウド蓮舫」国会質問でIT弱者ぶりが露見して失笑買う – アゴラ  まず絵面が完全に「ヤンキー集会」。 国会議員の方々，ホンマご苦労さまです（笑）\nあと「立憲民主党の蓮舫副代表」による「時代はもうクラウド」という発言。 そこだけ切り取ったら10年前の記事だと言われても疑わないね，私は（笑）\nそして「クラウドもサーバーにあることに変わりはなく」という的はずれな感想（？）\n与野党議員とメディアによる「三馬鹿トリオ」爆誕である！\nネット・サービスに於いて「可用性（availability）」がセキュリティ要件として重視されるのは，それが毀損されることによって「名目上の経済損失」が発生するからだ。 そして，いわゆる「クラウド（cloud）」の特徴である scalability を上手く使えば可用性リスクを抑制することが可能，というのがゼロ年代に持て囃された話だ。\nそういう意味では（オンプレミスから）クラウドへの移行は，今からでも悪い選択ではない。 いまやレンサバですら CDN は当たり前だしね。\n駄菓子菓子 (だがしかし) 。\n今回の「特別定額給付金」のオンライン申請に限れば可用性リスクはさして重要ではない。 理由は以下の3つ。\n 営利ではなく行政サービスなので可用性毀損による「名目上の経済損失」は発生しない 申請書の郵送が始まるまでの極短期サービス そもそも「個人番号カード」の所持率が低い（筈だったw）  まぁ，金くれるんなら一刻も早くってのは当然の心理だけど。 それで緊急事態下の役所窓口が大混乱するとか，個人番号カード所持や口座情報登録の義務化とか，まさに「泥棒を捕らえてから縄を綯う」の典型例だよな（笑）\n前回も書いたが，最大の障害（ボトルネック）は，サービスが落っこちたことではなく，申請後の受理作業が「人力」である点だろう。\n敢えて今回の件を総括するなら「サーバを増やす」でも「時代はクラウド」でも「個人番号カード所持や口座情報登録の義務化」でもなく「オンライン申請させないほうがよかった」だと思う。 個人番号カードを使わせるとか余計なことは考えず，最初からちゃっちゃと郵送したほうが最終的にスムーズにいったのではないかと邪推してしまう。\nもし個人番号やそれに紐づく住基データを使いたいのであれば，システム全体に渡って 人力を介さず 自動化するフレームワークを確立するところから始めるべきだろう。\nデジタル・データというのはそこにあるだけではダメで，データへのアクセス設計をセットにして初めて意味を持つ。 個人情報保護法があろうとなかろうと，人力の力技なんか下の下である。 お金を使うところが間違っている。\n参考図書  グーグル　ネット覇者の真実 スティーブン・レヴィ (著), 仲達志；池村千秋 (翻訳) CCCメディアハウス 2011-12-16 (Release 2012-08-31) Kindle版 B009LFBL4Y (ASIN)  そういえばこれ Kindle で買い直したのに途中まで読んでそのまま積ん読だったよ。ゼロ年代の Google を中心とした話なのでちょっと古びた感はあるが歴史書としては今でも通用するだろう。書評はこちらが参考になる。\nreviewed by Spiegel on 2018-12-11 (powered by PA-APIv5)\n  だがしかし（１） (少年サンデーコミックス) コトヤマ (著) 小学館 2014-09-18 (Release 2014-12-08) Kindle版 B00QAQEOSW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  永遠の夏休み（笑）\nreviewed by Spiegel on 2020-06-12 (powered by PA-APIv5)\n "
    },
    {
      "title": "LuaLaTeX でも履歴書を書きたい！",
      "section": "remark",
      "description": "後方互換性が崩れるので pull request を投げていいか思案中。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/06/resume-with-lualatex/",
      "published": "2020-06-11T07:52:45+00:00",
      "update": "2020-06-11T07:53:01+00:00",
      "content": "2018年の記事で\n 履歴書スタイルファイル shigio/rireki-style: Style file for writing resume.  を紹介した。\nその後いろいろ試してみて，サンプルの rireki.tex の最初の\n\\documentclass{jarticle} \\usepackage{rireki} ... の部分を\n\\documentclass[b5j]{ltjsarticle} \\usepackage[deluxe,nfssonly]{luatexja-preset} \\usepackage{rireki} ... と書き換えれば一応 $\\mathrm{Lua\\LaTeX}$ でも通ることが分かったのだが，この状態では顔写真を\n\\顔写真{photo.jpg} と指定しても上手く貼り付けられない。\nしょうがないので rireki.sty を眺めていたら冒頭部分に\n\\usepackage[dvipdfmx]{graphicx} とか書かれていた。\nドライバが dvipdfmx 決め打ちか。 そりゃあ $\\mathrm{Lua\\LaTeX}$ で上手くいかんわな。\nそこで rireki.sty の graphicx パッケージの記述をコメントアウトして rireki.tex を\n\\documentclass[b5j]{ltjsarticle} \\usepackage[deluxe,nfssonly]{luatexja-preset} \\usepackage[luatex]{graphicx} \\usepackage{rireki} ... としたら1 問題なく顔写真を貼り付けられた。 これでますます $\\mathrm{p\\LaTeX}$/$\\mathrm{up\\LaTeX}$ は「要らない子」になるね（笑）\nなお，今回改変した rireki.sty を使って $\\mathrm{p\\LaTeX}$/$\\mathrm{up\\LaTeX}$ で処理する場合は\n\\documentclass[uplatex,b5j]{jsarticle} \\usepackage[dvipdfmx]{graphicx} \\usepackage{rireki} ... などとすればOK2。\nちなみに\n#!/usr/bin/env perl # LaTeX commands $pdflualatex = \u0026#39;lualatex %O -synctex=1 %S\u0026#39;; $latex = \u0026#39;uplatex %O -synctex=1 %S\u0026#39;; # Device Driver $dvipdf = \u0026#39;dvipdfmx %O -z9 -p jisb5 -V 7 -o %D %S\u0026#39;; # Typeset mode (generate a PDF) $pdf_mode = 4; # 0: do not generate a pdf , 1: using $pdflatex , 2: using $ps2pdf , 3: using $dvipdf , 4: using $pdflualatex という内容で .latexmkrc ファイルを作成すれば\n$pdf_mode = 3 で $\\mathrm{p\\LaTeX}$/$\\mathrm{up\\LaTeX}$ 用，\n$pdf_mode = 4 で $\\mathrm{Lua\\LaTeX}$ 用の設定になる。 あとは\n$ latexmk で *.tex ファイルを探して勝手に全部処理してくれる。\nところで，私が PDF 文書の紙出力に利用しているネットプリントが 2020-06-15 から値上げするらしいのだが。 今は求職活動で履歴書乱発中なんだよ。 とほほ orz\nブックマーク  pdfTeX による見開きPDFの結合・分割 - TeX Alchemist Online 西暦・元号対照表  参考図書  [改訂第7版]LaTeX2ε美文書作成入門 奥村 晴彦 (著), 黒木 裕介 (著) 技術評論社 2017-01-24 大型本 4774187054 (ASIN), 9784774187051 (EAN), 4774187054 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。\nreviewed by Spiegel on 2017-09-27 (powered by PA-APIv5)\n   ドライバ指定を省略して \\usepackage{graphicx} でも可。 \u0026#x21a9;\u0026#xfe0e;\n 後方互換性が崩れるので pull request を投げていいか思案中。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "LuaLaTeX で PDF/A を構成する",
      "section": "remark",
      "description": "pdfx パッケージを使って PDF/A-2u を構成してみる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/06/pdfa-with-luatex/",
      "published": "2020-06-08T15:14:11+00:00",
      "update": "2020-06-11T03:14:39+00:00",
      "content": "今回は $\\mathrm{Lua\\LaTeX}$ で PDF/A を構成してみる。\nPDF/A とは PDF/A とは自己完結性と永続性を考慮した PDF 構成で， ISO 19005 シリーズとして定義されている。 PDF/A の種別は大まかに\n PDF/A-1 : ISO 19005-1 (PDF 1.4 相当)  PDF/A-1a : PDF/A-1 レベルA PDF/A-1b : PDF/A-1 レベルB   PDF/A-2 : ISO 19005-2 (PDF 1.7 相当)  PDF/A-2a : PDF/A-2 レベルA PDF/A-2b : PDF/A-2 レベルB PDF/A-2u : PDF/A-2 レベルU   PDF/A-3 : ISO 19005-3 (PDF/A-2 拡張)  PDF/A-2a : PDF/A-2 レベルA PDF/A-2b : PDF/A-2 レベルB PDF/A-2u : PDF/A-2 レベルU    といった感じに分かれている。\nまず PDF/A-1 については\n カラーの再現性の保証 フォント埋め込み XMPメタデータの埋め込み  が要求され，逆に暗号化によるアクセス制限やコードの埋め込み等は禁止されている。\nPDF/A-2 では PDF/A 文書の添付や圧縮機能の一部などが許容されている。 更に PDF/A-3 では任意のドキュメント・データの埋め込みが許容されているが，さすがにこれは自己完結性の観点からは要らない機能と言えるだろう。\nこれらの条件に加えてレベルUでは ToUnicode CMap による Unicode 対応が要求され（テキスト抽出等に必要），最高レベルのAではタグによる論理構造の埋め込みも要求される。\n論理構造の埋め込みはちょっと辛いし（論理構造をきちんと設計するのは大変）そもそも今回使用する pdfx パッケージではレベルAの要求を完全には満たせないらしいので，レベルBまたはUの PDF/A を構成することを考える。\n最初の LuaLaTeX テキスト 手始めに以下の $\\mathrm{Lua\\LaTeX}$ テキストを用意してみる。\n\\documentclass{ltjsarticle} \\usepackage[deluxe,nfssonly]{luatexja-preset} \\renewcommand{\\emph}[1]{\\textsf{\\textgt{#1}}} % 強調をゴシック体と Sans Serif に変更する  \\title{\\emph{はじめてのLua\\TeX-ja}} \\author{Spiegel} \\date{2020-06-08} \\begin{document} \\maketitle \\section{はじめてのLua\\TeX-ja} ちゃんとLua\\TeX-jaで日本語が出るかな？ \\subsection{出たかな？} 長い文章を入力するとちゃんと右端のところで折り返されるかな？ 大丈夫そうな気がするけど．ちょっと不安だけど何事も挑戦だよね． \\end{document} これを処理した結果がこんな感じ。\n ちなみに pdfinfo で中身を見ると，こんな感じになっている1。\n$ pdfinfo sample.pdf Creator: TeX Producer: LuaTeX-1.12.0 CreationDate: Mon Jun 8 20:36:09 2020 JST ModDate: Mon Jun 8 20:36:09 2020 JST Tagged: no UserProperties: no Suspects: no Form: none JavaScript: no Pages: 1 Encrypted: no Page size: 595.276 x 841.89 pts (A4) Page rot: 0 File size: 26856 bytes Optimized: no PDF version: 1.5 PDF version が 1.5 である点に注目。\npdfx パッケージとメタデータの追加 PDF/A を構成するために pdfx パッケージとメタデータを追加する。 こんな感じ。\n% XMPメタデータ \\RequirePackage{filecontents} \\begin{filecontents*}{\\jobname.xmpdata} \\Title{はじめてのLuaTeX-ja} \\Subject{ちゃんとLuaTeX-jaで日本語が出るかな？} \\Author{Spiegel} \\end{filecontents*}  \\documentclass{ltjsarticle} \\usepackage[deluxe,nfssonly]{luatexja-preset} \\renewcommand{\\emph}[1]{\\textsf{\\textgt{#1}}} % 強調をゴシック体と Sans Serif に変更する  \\usepackage[a-2u]{pdfx} % PDF/A-2u を構成 \\pdfvariable omitcidset=1 % LuaTeX で PDF/A-2 を作る際に必要  \\title{\\emph{はじめてのLua\\TeX-ja}} \\author{Spiegel} \\date{2020-06-08} \\begin{document} ... XMPメタデータの指定を \\documentclass の前に記述するのがポイント。\nこれを処理して中身を見るとこんな感じになった。\n$ pdfinfo sample.pdf Title: はじめてのLuaTeX-ja Subject: ちゃんとLuaTeX-jaで日本語が出るかな？ Author: Spiegel Creator: LaTeX with hyperref Producer: LuaTeX CreationDate: Mon Jun 8 20:36:09 2020 JST ModDate: Mon Jun 8 20:36:09 2020 JST Tagged: no UserProperties: no Suspects: no Form: none JavaScript: no Pages: 1 Encrypted: no Page size: 595.276 x 841.89 pts (A4) Page rot: 0 File size: 40669 bytes Optimized: no PDF version: 1.4 PDF subtype: PDF/A-2u:2010 Title: ISO 19005 - Electronic document file format for long-term preservation (PDF/A) Abbreviation: PDF/A-2 Subtitle: Part 2: Use of ISO 32000-1 Standard: ISO 19005-2 Conformance: Level U, Unicode support Title, Subject, および Author のメタデータが追加され， PDF version が 1.4 の PDF/A-2u として構成されているのが分かる。\npdfx パッケージのオプション pdfx パッケージでは PDF/E や PDF/X 等も構成できるが，ここでは PDF/A のオプションに限って紹介しておく。\n   オプション 構成     a-1a PDF/A-1a : ただし不完全   a-1b PDF/A-1b   a-2a PDF/A-2a : ただし不完全   a-2b PDF/A-2b   a-2u PDF/A-2u   a-3a PDF/A-3a : ただし不完全   a-3b PDF/A-3b   a-3u PDF/A-3u    レベルAは使わないほうがいいだろう（笑） 一般的には最小構成の PDF/A-1b で十分なようだ。 ただし pdfx パッケージはレベルB指定でも ToUnicode CMap を埋め込んだままにするらしいので，今回のように，敢えて PDF/A-2u にする手もある。\npdfx パッケージで設定可能な XMP メタデータ項目 filecontents 環境\n\\begin{filecontents*}{\\jobname.xmpdata} ... \\end{filecontents*} 内に記述する XMP メタデータ項目のうち，主なものは以下の通り。\n   項目名 XMP 要素 備考     \\Author dc:creator \\sep で複数指定可能   \\Title dc:title    \\Language dc:language ja-JP など，\\sep で複数指定可能   \\Keywords dc:subject \\sep で複数指定可能   \\Publisher dc:publisher \\sep で複数指定可能   \\Subject dc:description     著作権情報を載せる場合には以下の項目も使える2。\n   項目名 XMP 要素 備考     \\Copyright dc:rights 利用規約等   \\CopyrightURL xmpRights:WebStatement    \\Copyrighted xmpRights:Marked 公有の場合は False をセットする   \\Owner xmpRights:Owner 著作権者が別にいる場合，\\sep で複数指定可能   \\CertificateURL xmpRights:Certificate    \\Date dc:date YYYY-MM-DD または YYYY-MM   \\Relation dc:relation    \\URLlink dc:identifier     その他，設定可能な項目については pdfx パッケージのドキュメントを参照のこと。\nなお filecontents 環境の内容は *.xmpdata ファイルに吐き出されるが，既にファイルがある場合は上書き保存されないため，メタデータを変更したらこのファイルを削除してから再処理する必要がある。 もし .latexmkrc ファイルでビルドの制御を行っているなら\n$clean_ext = \u0026#34;xmpdata\u0026#34;; の記述を追加することで\n$ latexmk -c コマンドで，他の一時ファイルと共に *.xmpdata ファイルも削除してくれる。\n実際に PDF ファイルに埋め込まれる XMP メタデータの内容は pdfa.xmpi に出力されているので参考になると思う。 また，すでに生成済みの PDF に対しては\n$ pdfinfo -meta sample.pdf で XMP メタデータを抽出できる。\n日本語の ToUnicode CMap はなくても大丈夫（らしい） レベルUの要件として PDF に ToUnicode CMap が埋め込まれている必要があるが，原ノ味フォントのような Adobe-Japan1 フォントについては例外のようだ。\n試しに pdf-rm-tuc コマンドで原ノ味フォントの ToUnicode CMap を削除してみる3。\n$ pdf-rm-tuc --newline-before-endstream sample.pdf sample-tuc.pdf PDF/A ドキュメントを処理する場合は --newline-before-endstream オプションが必須になるらしいので注意。\nこれで\n$ pdffonts sample-tuc.pdf name type encoding emb sub uni object ID ------------------------------------ ----------------- ---------------- --- --- --- --------- JKVWEI+LMRoman10-Regular CID Type 0C Identity-H yes yes yes 22 0 IECCEF+HaranoAjiMincho-Regular CID Type 0C Identity-H yes yes no 23 0 XKBUGM+LMSans17-Regular CID Type 0C Identity-H yes yes yes 24 0 JYWTWW+HaranoAjiGothic-Regular CID Type 0C Identity-H yes yes no 25 0 RHMEBC+LMRoman12-Regular CID Type 0C Identity-H yes yes yes 26 0 RHDCZK+LMSans12-Regular CID Type 0C Identity-H yes yes yes 27 0 $ pdfinfo sample-tuc.pdf Title: はじめてのLuaTeX-ja Subject: ちゃんとLuaTeX-jaで日本語が出るかな？ Author: Spiegel Creator: LaTeX with hyperref Producer: LuaTeX CreationDate: Mon Jun 8 20:36:09 2020 JST ModDate: Mon Jun 8 20:36:09 2020 JST Tagged: no UserProperties: no Suspects: no Form: none JavaScript: no Pages: 1 Encrypted: no Page size: 595.276 x 841.89 pts (A4) Page rot: 0 File size: 39154 bytes Optimized: no PDF version: 1.4 PDF subtype: PDF/A-2u:2010 Title: ISO 19005 - Electronic document file format for long-term preservation (PDF/A) Abbreviation: PDF/A-2 Subtitle: Part 2: Use of ISO 32000-1 Standard: ISO 19005-2 Conformance: Level U, Unicode support のように PDF/A-2u を維持しつつ原ノ味フォントの ToUnicode CMap を削除することができた。 念のため，この PDF ファイルを veraPDF で検査してみたが “PDF/A-2U validation profile” でちゃんとパスしたので本当に問題ないのだろう。\nさらに pdf-rm-tuc コマンドに --linearize および --object-streams=generate オプションを付けて実行すると\n$ pdf-rm-tuc --newline-before-endstream --linearize --object-streams=generate sample.pdf sample-tuc.pdf PDF version 1.5 のドキュメントとして出力される。\n$ pdfinfo sample-tuc.pdf Title: はじめてのLuaTeX-ja Subject: ちゃんとLuaTeX-jaで日本語が出るかな？ Author: Spiegel Creator: LaTeX with hyperref Producer: LuaTeX CreationDate: Mon Jun 8 20:36:09 2020 JST ModDate: Mon Jun 8 20:36:09 2020 JST Tagged: no UserProperties: no Suspects: no Form: none JavaScript: no Pages: 1 Encrypted: no Page size: 595.276 x 841.89 pts (A4) Page rot: 0 File size: 34742 bytes Optimized: yes PDF version: 1.5 PDF subtype: PDF/A-2u:2010 Title: ISO 19005 - Electronic document file format for long-term preservation (PDF/A) Abbreviation: PDF/A-2 Subtitle: Part 2: Use of ISO 32000-1 Standard: ISO 19005-2 Conformance: Level U, Unicode support よーし，うむうむ，よーし。\nブックマーク  PDF/Aとはなにか | アンテナハウス PDF資料室 PDF/A - Wikipedia  参考図書  [改訂第7版]LaTeX2ε美文書作成入門 奥村 晴彦 (著), 黒木 裕介 (著) 技術評論社 2017-01-24 大型本 4774187054 (ASIN), 9784774187051 (EAN), 4774187054 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。\nreviewed by Spiegel on 2017-09-27 (powered by PA-APIv5)\n   pdfinfo および pdffonts は Poppler のコマンド。 Windows 版 TeX Live には既定で同梱されているらしい。他のプラットフォームについては「Poppler - TeX Wiki」を参考に導入すればいいだろう。 \u0026#x21a9;\u0026#xfe0e;\n 基本的に © マークや “Copyright” の文言は不要。その代わり著作（権）者名と公開年と許諾条件を表記するとよい（他のメタデータで代替できるのであればそれも不要だが）。 CC Licenses のようなライセンス・ツールを使うのであれば \\CopyrightURL 項目に（コモンズ証などの）許諾条件を記した Web ページの URL をセットすればよい。なお CC Licenses について詳しくは拙文「改訂3版： CC Licenses について」を参考にどうぞ。 PDF/A はアクセス制限を禁止するので CC Licenses と相性がいいよね♪ \u0026#x21a9;\u0026#xfe0e;\n pdf-rm-tuc コマンドの導入については拙文「LuaTeX で生成した PDF から ToUnicode CMap を除去する」を参考にどうぞ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "LuaTeX で生成した PDF から ToUnicode CMap を除去する",
      "section": "remark",
      "description": "原ノ味フォントの作者が pdf-rm-tuc というツールを公開されている。ありがたや。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/06/remove-tounicode-cmap-from-pdf/",
      "published": "2020-06-08T08:31:44+00:00",
      "update": "2020-06-08T23:47:52+00:00",
      "content": "以前に紹介した原ノ味フォントだが， $\\mathrm{Lua\\LaTeX}$ で組版 \u0026amp; PDF 出力する際に Adobe-Identity-0 フォントとして埋め込まれてしまうそうで，フォントの性能を上手く活かしきれてないらしい。 しかも\n LuaTeX はフォントの cmap テーブルから逆変換で ToUnicode CMap を生成しているようで、縦書き用グリフを使った場合や異字体を使った場合など、テキスト抽出すると意図しない結果になることがあります via PDF から ToUnicode CMap を削除するツール  そこで原ノ味フォントの作者が pdf-rm-tuc というツールを公開されている。\n trueroad/pdf-rm-tuc: Remove ToUnicode CMap from PDF  このツールを使うと\n PDF から原ノ味フォントの ToUnicode CMap を削除し、原ノ味フォントの ROS を Adobe-Identity-0 から 元の Adobe-Japan1-7 に変更します。 これによってテキスト抽出で意図しない結果になることを防げると考えています via PDF から ToUnicode CMap を削除するツール  更に言うと PDF ファイルのサイズがちょびっとだけ小さくなる。 ありがたや m(_ _)m\npdf-rm-tuc のビルドとインストール pdf-rm-tuc はソースコードのみの公開なので GCC を使って自前でビルドする必要がある1。 ここでは Ubuntu プラットフォームを前提に紹介する。\n事前準備 たまに GCC が入ってないことがあるので，入ってなければ APT でインストールしておく。\n$ sudo apt install build-essential 更に pdf-rm-tuc の GitHub リポジトリを clone して直接ビルドする場合は Autoconf および Automake が必要になる。 もし入ってなければ，これもインストールしておこう。\n$ sudo apt install autoconf automake 更に更にビルドの際に libqpdf が必要らしいので，これもインストールしておく。\n$ sudo apt install libqpdf-dev これで準備完了。\nビルドとインストール では，ビルドからインストールまで一気にやってしまおう。\n$ git clone https://github.com/trueroad/pdf-rm-tuc.git $ cd pdf-rm-tuc $ ./autogen.sh $ mkdir build $ cd build $ ../configure $ make $ make check # TeX Live 2020 が導入済みであること $ sudo make install $ pdf-rm-tuc -V Remove ToUnicode CMap from PDF 1.0.0 Copyright (C) 2019 Masamichi Hosoda. All rights reserved. License: BSD-2-Clause https://github.com/trueroad/pdf-rm-tuc インストールが成功すれば pdf-rm-tuc コマンドが以下に置かれる。\n$ which pdf-rm-tuc /usr/local/bin/pdf-rm-tuc pdf-rm-tuc を試してみる 入力テキストは以下の通り。 TeX Live 2020 が導入されていることが前提ね。\n\\documentclass{ltjsarticle} \\usepackage[deluxe]{luatexja-preset} \\usepackage{luatexja-otf} \\begin{document} {\\mcfamily\\ltseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（明朝体・細字）}\\par {\\mcfamily ☂ は夜更け過ぎに ☃ へとかわるだろう。（明朝体・中字）}\\par {\\mcfamily\\bfseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（明朝体・太字）}\\par {\\gtfamily ☂ は夜更け過ぎに ☃ へとかわるだろう。（ゴシック体・中字）}\\par {\\gtfamily\\bfseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（ゴシック体・太字）}\\par {\\gtfamily\\ebseries ☂ は夜更け過ぎに ☃ へとかわるだろう。（ゴシック体・極太）} \\end{document} これを組版すると以下のような結果になる。\n このときのフォント情報はこんな風になっている2。\n$ pdffonts lualatex-sample.pdf name type encoding emb sub uni object ID ------------------------------------ ----------------- ---------------- --- --- --- --------- OLUZKZ+HaranoAjiMincho-Light CID Type 0C Identity-H yes yes yes 4 0 PTNBJH+HaranoAjiMincho-Regular CID Type 0C Identity-H yes yes yes 5 0 BMAPJQ+HaranoAjiMincho-Bold CID Type 0C Identity-H yes yes yes 6 0 HOSFGF+HaranoAjiGothic-Regular CID Type 0C Identity-H yes yes yes 7 0 ULINFN+HaranoAjiGothic-Bold CID Type 0C Identity-H yes yes yes 8 0 PJPUYK+HaranoAjiGothic-Heavy CID Type 0C Identity-H yes yes yes 9 0 JFRMQG+LMRoman10-Regular CID Type 0C Identity-H yes yes yes 10 0 uni の項目が ToUnicode CMap の有無を示すもので，原ノ味フォントの全てに ToUnicode CMap があるのが分かる。\nでは pdf-rm-tuc を実行してみよう。\n$ pdf-rm-tuc lualatex-sample.pdf lualatex-sample-notuc.pdf 実行結果は以下の通り。\n$ pdffonts lualatex-sample-notuc.pdf name type encoding emb sub uni object ID ------------------------------------ ----------------- ---------------- --- --- --- --------- JFRMQG+LMRoman10-Regular CID Type 0C Identity-H yes yes yes 10 0 PTNBJH+HaranoAjiMincho-Regular CID Type 0C Identity-H yes yes no 5 0 OLUZKZ+HaranoAjiMincho-Light CID Type 0C Identity-H yes yes no 4 0 BMAPJQ+HaranoAjiMincho-Bold CID Type 0C Identity-H yes yes no 6 0 HOSFGF+HaranoAjiGothic-Regular CID Type 0C Identity-H yes yes no 7 0 ULINFN+HaranoAjiGothic-Bold CID Type 0C Identity-H yes yes no 8 0 PJPUYK+HaranoAjiGothic-Heavy CID Type 0C Identity-H yes yes no 9 0 原ノ味フォントの uni 項目が全て no になっていることが確認できた。 よーし，うむうむ，よーし。\n注意事項  $\\mathrm{up\\LaTeX}$ 等で組版したものを dvipdfmx で PDF に出力する場合は Adobe-Japan1 フォントであれば ToUnicode CMap の生成・埋め込みはしないので pdf-rm-tuc は不要 PDF ビュア側で Adobe-Japan1-UCS2 等の ToUnicode CMap を持っていない場合は PDF 側の ToUnicode CMap を削除すると日本語のテキスト抽出が上手く行かないらしい。 Ubuntu に標準で入ってる Evince は画面から普通にコピペできたけど，大丈夫ってこと？ PDF/A を構成する場合，適合レベルによっては ToUnicode CMap を削除すると拙い場合があるのだが Adobe-Japan1 フォントについては例外らしい？ veraPDF 等の Validator で確認したほうがいいかも  ブックマーク  trueroad/tr-TeXConf2019: TeXConf 2019 一般講演「原ノ味フォントと ToUnicode CMap」関連資料  参考図書  [改訂第7版]LaTeX2ε美文書作成入門 奥村 晴彦 (著), 黒木 裕介 (著) 技術評論社 2017-01-24 大型本 4774187054 (ASIN), 9784774187051 (EAN), 4774187054 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。\nreviewed by Spiegel on 2017-09-27 (powered by PA-APIv5)\n   Windows であれば MSYS2 等の環境が必要になるかもしれない。あるいは TeX Live ひっくるめて WSL2 に引っ越すか（笑） \u0026#x21a9;\u0026#xfe0e;\n pdffonts は Poppler のコマンドのひとつ。 Windows 版 TeX Live には既定で同梱されているらしい。他のプラットフォームについては「Poppler - TeX Wiki」を参考に導入すればいいだろう。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-06-07 のブックマーク",
      "section": "bookmarks",
      "description": "「「屋根裏のバイテン」第2話」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/06/07-bookmarks/",
      "published": "2020-06-07T08:50:23+00:00",
      "update": "2020-06-07T08:51:11+00:00",
      "content": "リリース情報  URL rewrites in dev server | Hugo : Hugo 0.72.0 [ANNOUNCE] Git v2.27.0  Release Git for Windows 2.27.0 · git-for-windows/git · GitHub   Announcing Rust 1.44.0 | Rust Blog  バベルのインターネット  Facebook社員がバーチャルストを敢行、トランプ米大統領の投稿に対する会社の態度に抗議 | TechCrunch Japan Twitterが共和党議員の反ファシズムツイートを「暴力賛美」として制限表示に | TechCrunch Japan  セキュリティ＆プライバシー関連  (How) Do People Change Their Passwords After a Breach?   Password Changing After a Breach - Schneier on Security   Apple fixes bug that could have given hackers full access to user accounts | Ars Technica  Critical \u0026lsquo;Sign in with Apple\u0026rsquo; Bug Could Have Let Attackers Hijack Anyone\u0026rsquo;s Account \u0026ldquo;Sign in with Apple\u0026rdquo; Vulnerability - Schneier on Security   GitLab、セキュリティ演習で社員にフィッシングメールを送信。その内容と、20％が引っ掛かったことを公開 － Publickey Facebookが過去投稿を一括削除できるツールを発表、プライバシー管理を強化 | TechCrunch Japan Wallpaper image crashing Android phones  Wallpaper that Crashes Android Phones - Schneier on Security   Googleが「Remove China Apps」をPlay Storeから取り去る | TechCrunch Japan Zoom\u0026rsquo;s Commitment to User Security Depends on Whether you Pay It or Not - Schneier on Security  Bloomberg - Are you a robot?   お名前.com Naviの不具合によるCoincheckとbitbankのドメイン名ハイジャックについてまとめてみた - piyolog VU#636397 - IP-in-IP protocol routes arbitrary traffic by default  PoC-Exploits/cve-2020-10136 at master · CERTCC/PoC-Exploits · GitHub IP-in-IPに対応したデバイスが悪用される問題あり、確認と対処を | マイナビニュース   新手のランサムウェアがWindowsとLinuxを攻撃、Javaイメージファイルを悪用 | TechCrunch Japan  Javaアプリケーション配布方法 ~jlink ランタイム作成~ | tyablog.net : JIMAGE について   国際標準と部品レベルの対応が急務になるIoT機器のセキュリティ対策のこれから - WirelessWire News（ワイヤレスワイヤーニュース） データセンターの電源故障の影響で起きた自治体サイト接続障害についてまとめてみた - piyolog  天文関連  宇宙空間でのCrew Dragonの手動操縦に初成功、同じ操縦をシミュレータで誰でも試せる | TechCrunch Japan Latest Poll Shows 2-1 Margin in Support of TMT on Maunakea | TMT International Observatory 1987年発見のアインシュタインリング、元になった天体までの距離が100億光年と判明 | sorae 宇宙へのポータルサイト  知財関連  Project Gutenberg Public Domain Library Blocked in Italy For Copyright Infringement * TorrentFreak  Linux または Ubuntu に関する話題  Ubuntu 20.04 その73 - Ubuntu/LinuxデスクトップOSの市場シェア拡大・LenovoがThinkPadとThinkStationにLinux認定モデルを追加 - kledgeb Ubuntu 20.04 その74 - UbuntuとUEFIセキュアブート - kledgeb  その他  Stack Overflowの調査によると、デベロッパーの5割以上が「フルスタック」エンジニアを自認。最も使われている言語はJavaScript、最も愛されている言語はRust － Publickey Red Hatが「Quarkus」の商用サポートを開始。JavaコードをコンパイルしてLinuxバイナリを生成、省メモリ高速起動でコンテナ環境に最適 － Publickey サイエンスクリップ「米有人宇宙船がISS到着、シャトル廃止以来9年ぶり悲願達成」| SciencePortal 現存する日本最古のカメラ雑誌「アサヒカメラ」が休刊に - デジカメ Watch Swift言語がAWS Lambdaで利用可能に。Swift開発チームが「Swift AWS Lambda Runtime」公開 － Publickey 巨大ブラックホールの種になる星たち―大規模シミュレーションが描く新しい形成メカニズム― | 国立天文台(NAOJ) Linuxカーネルソースコード、80行制限を100行まで緩和 | マイナビニュース Visual Studioの新機能、クラウド上のKubernetesクラスタの一部をローカルマシンに引き込んで開発できる「Local Process with Kubernetes」発表 － Publickey VMware、GPUを仮想化する「Bitfusion」、vSphere 7への統合完了を発表 － Publickey Anvil - Streamline Information Gathering. Automate Workflows.  PDFベースの共同編集・電子署名サービスのAnvilがグーグル系VCから5億円超を調達 | TechCrunch Japan   ブログ: 政府とWHOは、小さな米国企業の疑わしいデータに基づいてCOVID-19の方針を変更 秘匿性の高いメッセージングアプリ「Signal」に顔をぼかす機能が加わる | TechCrunch Japan new.css  sakura: a minimal classless css framework / theme.   Webアクション「屋根裏のバイテン」第2話 : ぽじとろんの竹本泉観察記  "
    },
    {
      "title": "Edwards-curve Digital Signature Algorithm",
      "section": "remark",
      "description": "SP 800-57 Part 1 Rev.5 が正式リリースした記念に EdDSA に関する情報を覚え書きの形で記しておく。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/06/eddsa/",
      "published": "2020-06-07T08:33:37+00:00",
      "update": "2020-06-08T01:12:54+00:00",
      "content": "ネットであちこち眺めていて気がついたのだが SP 800-57 第一部の Rev.5 最終版が2020年5月にリリースされていた。\n SP 800-57 Part 1 Rev. 5, Recommendation for Key Management: Part 1 – General | CSRC  私はセキュリティや暗号技術の専門家ではないし Rev.5 の変更点が（軽微なものも合わせて）67項目もあって全部は紹介しきれないので，ひとつだけ\n In Section 2.2, EdDSA was added. Modified ECDSA.  via SP 800-57 Part 1 Revision 5  について関連情報を覚え書きの形で記しておく。\nRFC 8032: Edwards-Curve Digital Signature Algorithm (EdDSA) EdDSA のオリジナルは2011年に公開された “High-speed high-security signatures ” らしい。 その後も改良版が出たり色々あって，2017年に RFC 8032 として標準化された。\nEdDSA は以下の特徴を持っている。\n EdDSA provides high performance on a variety of platforms; The use of a unique random number for each signature is not required; It is more resilient to side-channel attacks; EdDSA uses small public keys (32 or 57 bytes) and signatures (64 or 114 bytes) for Ed25519 and Ed448, respectively; The formulas are \u0026ldquo;complete\u0026rdquo;, i.e., they are valid for all points on the curve, with no exceptions. This obviates the need for EdDSA to perform expensive point validation on untrusted public values; and EdDSA provides collision resilience, meaning that hash-function collisions do not break this system (only holds for PureEdDSA).   via RFC 8032: Edwards-Curve Digital Signature Algorithm (EdDSA)  特に2番目が重要。\nこれまでの NIST 標準の（ECDSA を含む） DSA は署名の度にランダムな値をひとつ決めないといけないのだが，ここの実装をサボると，最悪の場合，秘密鍵の漏洩に繋がる。 更に言うと，かつて SP 800-90A に載っていた疑似乱数生成器 Dual_EC_DRBG に NSA の関与が疑われる欠陥が発覚し SP 800-90A を改訂する騒ぎにまで発展したこともある。\nこのように DSA の具体的な実装について常に懸念が付きまとっているため，より安全性が高いとされる EdDSA が注目されることとなった1。\nEdDSA で使える楕円曲線にはかなりのバリエーションがある  のだが， RFC 8032 に記載されているのは以下の2つである2。\n   楕円曲線名 鍵長（bytes） 強度（bits）     edwards25519 32 128   edwards448 57 224    生成した ECC 鍵を2031年以降も使い続けるにはセキュリティ強度にして128ビット以上必要だが，この2つの楕円曲線であれば十分であることが分かる。\nNIST 標準としての EdDSA EdDSA の RFC 化に伴い，以下の NIST 標準文書にも EdDSA が追加されることになった。 ただし今のところはまだドラフト版である。\n FIPS 186-5 (Draft), Digital Signature Standard (DSS) | CSRC SP 800-186 (Draft), Discrete Logarithm-Based Crypto: Elliptic Curve Parameters | CSRC  ちなみに両方共パブリックコメントは2020年初に締め切られている。\nFIPS 186-5 および SP 800-186 が正式リリースされれば，政府調達でもなんでも，大手を振って EdDSA を使えるようになる（笑）\nEdDSA の実装 OpenPGP と GnuPG OpenPGP は RFC 6637 で正式に ECC を組み込んだが，この中に EdDSA は含まれていない。 ただし，次期 OpenPGP となる RFC 4880bis では EdDSA を組み込み済みで GnuPG の最新版では既に EdDSA 鍵を生成し使用することができる。\n そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな  なお，最新の GnuPG では edwards25519 のみサポートしているようだ。\nOpenSSH OpenSSH では EdDSA/edwards25519 鍵を生成・使用できる。 鍵生成は\n$ ssh-keygen -t ed25519 で可能。\nOpenSSL 現在の OpenSSL は EdDSA をサポートしている。 edwards25519 および edwards448 を指定可能。\n【おまけ】 量子コンピュータ耐性 現在，公開鍵暗号の主流である IFC (Integer Factorization Cryptosystems) および FFC (Finite Field Cryptosystems) の各アルゴリズムは量子コンピュータによる攻略法が既にあり，十分な性能を獲得すれば短時間で攻略可能になると考えられている。 ECC も FFC のバリエーションであり，これに含まれる。\nしかし，2020年時点の性能では128ビット以上のセキュリティ強度であれば現実的な脅威には至っていないようだ。\n 例えば、量子コンピュータを用いて2048ビットRSA合成数の素因数分解を行う場合には、量子誤りが一切ないという理想的な環境下でも、4098量子ビットが必要であり、1012～1013回のゲート演算が必要であると見積もられています。また、量子誤りがあるという現実的な環境下では、2000万量子ビットが必要であるという見積もりもあります。 via 現在の量子コンピュータによる暗号技術の安全性への影響   量子コンピュータの性能を測る上での指標（量子ビット数、量子誤りの大きさ、演算可能回数など）や、量子コンピュータの開発状況もあわせて考慮にいれると、近い将来に、2048ビットの素因数分解や256ビットの楕円曲線上の離散対数問題が解かれる可能性は低いと考えます。 via 現在の量子コンピュータによる暗号技術の安全性への影響  ただし，量子コンピュータ開発は成長が著しい分野でもあり，今後も成り行きを注視していく必要がある。\n CRYPTREC Report 2018: 暗号技術評価委員会報告  : 素因数分解問題および楕円曲線上の離散対数問題の困難性に関する計算量評価のレポートあり 耐量子計算機暗号の研究動向調査報告書   ブックマーク   Ed25519: high-speed high-security signatures\n  擬似乱数生成アルゴリズム Dual_EC_DRBG について\n  暗号鍵関連の各種変数について\n  OpenSSH 鍵をアップグレードする（さようなら SHA-1）\n  参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n   DSA に対する懸念は，実装に必要な技術要素が多すぎる点にあるかもしれない。如何にシンプルな設計で要件を満たすかってのは安全性を考える上でも重要であるというよい事例になっていると思う。 \u0026#x21a9;\u0026#xfe0e;\n edwards25519 は Curve25519 と双有理同値である。ちなみに Curve25519 は ECDH 用の楕円曲線およびそのライブラリで，公有（public domain）のソフトウェアとして公開されている。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.14.4 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/06/go-1_14_4-is-released/",
      "published": "2020-06-02T01:33:09+00:00",
      "update": "2020-06-02T01:33:58+00:00",
      "content": "Go 1.14.4 がリリースされた。\n Go 1.14.4 and Go 1.13.12 are released - Google group  セキュリティ・アップデートはなし。\ngo1.14.4 (released 2020/06/01) includes fixes to the go doc command, the runtime, and the encoding/json and os packages. See the Go 1.14.4 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.14.4.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.14.4.linux-amd64.tar.gz $ sudo mv go go1.14.4 $ sudo ln -s go1.14.4 go $ go version # /usr/local/go/bin にパスが通っている場合 $ go version アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "OpenSSH 鍵をアップグレードする（さようなら SHA-1）",
      "section": "remark",
      "description": "どうせ鍵を新調するのなら楕円曲線暗号で構成するのがいいよね。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/06/upgrade-openssh-key/",
      "published": "2020-06-01T07:12:32+00:00",
      "update": "2020-06-08T01:14:57+00:00",
      "content": "2020-05-27 に OpenSSH 8.3 がリリースされた。\n OpenSSH 8.3 released (and ssh-rsa deprecation notice) [LWN.net]  この中で “Future deprecation notice” として\nIt is now possible to perform chosen-prefix attacks against the SHA-1 algorithm for less than USD$50K. For this reason, we will be disabling the “ssh-rsa” public key signature algorithm by default in a near-future release. via OpenSSH 8.3 released (and ssh-rsa deprecation notice)  と書かれていて1，クライアント側はそろそろ古い RSA 鍵から交換したほうがよさそうである。 もっとも最近のバージョン2 で作った鍵であれば特に問題ないようだ。\n$ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/home/username/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/username/.ssh/id_rsa Your public key has been saved in /home/username/.ssh/id_rsa.pub The key fingerprint is: SHA256:qufsNjgco3QZNjE4eupwQiT6mD8fr2a7nXmU3ybxFHo username@hostname The key\u0026#39;s randomart image is: +---[RSA 3072]----+ | . | |..o o | |+. . o | |o.. + . | |.* . + S. . . | |* + = .o o E | |o= +.+.. . * | | .+ **+o. o + | | =*XOo o | +----[SHA256]-----+ ハッシュ・アルゴリズムが SHA256 以上になっているか，がポイント。\nでも，まぁ，どうせ鍵を新調するのなら楕円曲線暗号（Elliptic Curve Cryptography; ECC）で構成するのがいいよね。 ちうわけで，ECC 鍵を作って登録するところまでやってみる。 ちゃんとメモっておかないと忘れるので（笑）\n前提条件 今回は Ubuntu 環境下での作業とし鍵管理を GnuPG で行うものとする。 Windows 環境の場合は以下の拙文を参考にどうぞ。\n GnuPG for Windows : gpg-agent について  OpenSSH と GnuPG を連携させるには ~/.gupg/gpg-agent.conf ファイルに enable-ssh-support オプションをセットする。 他に有効なオプションとしては\n   オプション名 内容     default-cache-ttl-ssh 直前にアクセスしたキャッシュ・エントリの有効期間を秒単位で指定する。 既定値は 1800   max-cache-ttl-ssh キャッシュ・エントリの有効期間の最大値を秒単位で指定する。 アクセスの有無にかかわらずこの期間が過ぎるとキャッシュがクリアされる。 既定値は 7200    がある。 たとえばこんな感じで記述すればいいだろう。\nenable-ssh-support default-cache-ttl-ssh 1800 max-cache-ttl-ssh 7200 あとは SSH_AUTH_SOCK 環境変数を以下のように書き換えればOK。\n$ export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket) ~/.bashrc 等に追記しておけばよいだろう。\nOpenSSH 鍵の生成 OpenSSH 鍵を生成するには ssh-keygen コマンドを使う。 たとえばこんな感じ。\n$ ssh-keygen -t ecdsa -b 256 -C \u0026#34;alice@example.com\u0026#34; Generating public/private ecdsa key pair. Enter file in which to save the key (/home/username/.ssh/id_ecdsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/username/.ssh/id_ecdsa Your public key has been saved in /home/username/.ssh/id_ecdsa.pub The key fingerprint is: SHA256:DtXgQm9rz7Dc5M5yWu/CNVo341o1rcfN9UCyYu+SZU4 alice@example.com The key\u0026#39;s randomart image is: +---[ECDSA 256]---+ | . . | | . o o | | . = . . . | | + . + .| | . S + . ..+| | = X oE +*=| | +.*X.+oo*| | .+Bo.... | | .+o+=. | +----[SHA256]-----+ これで作成された id_ecdsa および id_ecdsa.pub ファイルが鍵ファイルである。 ちなみに id_ecdsa ファイルには秘密鍵， id_ecdsa.pub ファイルには公開鍵が格納されている。\n-t オプションで鍵種別を， -b で鍵長（ビット数）をセットする。 鍵種別と鍵長の組み合わせと，それぞれに対するセキュリティ強度（ビット数）は以下の通り。\n   main table.sshkeys th { vertical-align:middle; text-align: center; } main table.sshkeys td { vertical-align:middle; //text-align: center; }    鍵種別 鍵長 強度 楕円曲線名     dsa 3072 128 \u0026mdash;   7680 192   15360 256   ecdsa / ecdsa-sk 256 128 nistp256   384 192 nistp384   521 256 nistp521   ed25519 / ed25519-sk \u0026mdash; 128 ed25519   rsa 3072 128 \u0026mdash;   7680 192   15360 256      この組み合わせのいずれかであれば2031年以降も問題なく使える。 なお ecdsa-sk および ed25519-sk は認証デバイスに登録する際に使うらしい（今回は割愛する）。\n余談だが楕円曲線 ed25519 に対応する電子署名アルゴリズムは EdDSA と呼ばれ RFC 8032 で規定されている3。 なんで鍵種別を eddsa としなかったのかは知らない。 紛らわしかったのかな？\n楕円曲線と鍵長 （「そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな」より抜粋）\nここでちょっと横道に逸れて鍵長の話をしておく。\nたとえば RSA の（平文 $M$ から暗号文 $C$ への）暗号化は以下の式で表される。\n\\[ C = M^e \\bmod n \\]  $(e, n)$ のセットが公開鍵で， $n$ のサイズが鍵長に相当する。 実際の計算はともかく，感覚としては分かりやすいよね。\nECC の場合は暗号化の前に，まずベースとなる楕円曲線の（素数 $q$ で決められる）素体（prime fields）を決めなければならない4。 これは以下の式で表される。\n\\[ E : y^2 \\equiv x^3 + ax + b \\pmod{q} \\]  この素体上の有理点の数（位数）を $\\#E$ とした時の $\\#E$ のサイズが鍵長に相当する。 $(a,b,q)$ といったパラメータを眺めただけでは鍵長が分からないというのが面倒臭い感じである5。\nそこで ECC の場合は楕円曲線を表すパラメータのセットが標準化されている。 OpenSSH の場合は nistp256, nistp384, nistp521, ed25519 といった楕円曲線名に対応している。 つまり楕円曲線名から楕円曲線の種類を特定し，そこから鍵長も分かる，というわけだ。\nOpenSSH 鍵の登録（クライアント側） 本題に戻る。 作成した OpenSSH 鍵ファイル id_ecdsa および id_ecdsa.pub を登録しよう。\nクライアント側は ssh-add コマンドを使って秘密鍵ファイル id_ecdsa の内容を GnuPG の鍵束に永続的に登録できる。\n$ ssh-add ./id_ecdsa Enter passphrase for ./id_ecdsa: Identity added: ./id_ecdsa (alice@example.com) この時 ssh-add コマンドによるパスフレーズ入力とは別に GnuPG の pinentry によるパスフレーズの設定が行われる（確認を含めて2回入力する必要あり）。\n pinentry  Pinentry で設定するパスフレーズは id_ecdsa ファイルに対するものとは管理が異なるので注意。 というか GnuPG の鍵束に登録したら id_ecdsa ファイルは不要になる。\nOpenSSH 秘密鍵が登録できたかどうかは ~/.gnupg/sshcontrol ファイルで確認できる。 ちゃんと登録できていれば以下のような内容が追記される。\n# ECDSA key added on: 2020-06-01 14:05:35 # Fingerprints: MD5:e4:5b:66:a6:03:9a:a4:0e:f2:1b:a5:04:72:93:f3:f0 # SHA256:DtXgQm9rz7Dc5M5yWu/CNVo341o1rcfN9UCyYu+SZU4 A5353D587000D820669B0BD55A0B4AD6897458DB 0 また ssh-add -l コマンドでも登録した鍵を確認できる。\n鍵の実体は ~/.gnupg/private-keys-v1.d/ ディレクトリにある。 上述の鍵の場合は\nA5353D587000D820669B0BD55A0B4AD6897458DB.key というファイル名で格納されているはずである。\nOpenSSH 鍵の登録（サーバ側） ログイン先のサーバに公開鍵ファイル id_ecdsa.pub の中身を登録する。 つっても，どうにかして id_ecdsa.pub ファイルをサーバにアップロードして\n$ cat ./id_ecdsa.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys と authorized_keys ファイルに追記すればよい。 追記ではなく内容を書き換えるなら\n$ cat ./id_ecdsa.pub \u0026gt; ~/.ssh/authorized_keys でもよい。 書き換えるなら以前のファイルのバックアップはとってね。 パーミッションの設定も忘れずに。\n$ chamod 700 ~/.ssh $ chamod 600 ~/.ssh/authorized_keys 老婆心ながら，新しい鍵でログインできることを確認するまでは接続中のセッションは切らないこと。 設定を間違えてログイン不能になったら悲惨だからねぇ。\n各種 Git リポジトリ・サービスに公開鍵を登録する GitHub ではリポジトリのアクセスに OpenSSH 認証が使える。 OpenSSH 認証に使う公開鍵は設定の “SSH and GPG keys” で登録する（複数登録可能）。\nBitbucket や GitLab などの各種 git リポジトリ・サービスでも同様に OpenSSH 公開鍵を登録できる。\nよしゃあ！ これで作業完了。\nブックマーク   ssh-rsa，非推奨のお知らせ\n  OpenSSH、将来のリリースでssh-rsa公開鍵の署名アルゴリズムをデフォルトで無効に - ZDNet Japan\n  暗号鍵関連の各種変数について\n  （何度目かの）さようなら SHA-1\n  Edwards-curve Digital Signature Algorithm\n  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n   実は同様の問題は GnuPG でも指摘されていて，半年前にリリースされた 2.2.18 で対応済みである（GnuPG 2.2.18 リリース： さようなら SHA-1） \u0026#x21a9;\u0026#xfe0e;\n ちなみに，私は2011年に作った RSA 鍵を使っているが，ハッシュ・アルゴリズムは SHA256 だった。少なくとも10年以内に作った鍵なら問題なさそう？ あとは鍵長かねぇ。 \u0026#x21a9;\u0026#xfe0e;\n ed25519 (edwards25519) は Curve25519 と双有理同値な楕円曲線で，鍵長も Curve25519 と同じく256ビット（セキュリティ強度128ビット）と見積もられている。ちなみに Curve25519 は ECDH 用の楕円曲線およびそのライブラリで，公有（public domain）のソフトウェアとして公開されている。 \u0026#x21a9;\u0026#xfe0e;\n 素体ではなく「標数2の体（binary fields）」を使う場合もあるが，ここでは割愛する。 \u0026#x21a9;\u0026#xfe0e;\n 楕円曲線と楕円曲線暗号については結城浩さんの『暗号技術入門 第3版』の付録に比較的分かりやすい解説が載っている。同じく結城浩さんの『数学ガール ガロア理論』が何となく分かれば楕円曲線についても何となく分かると思う。大丈夫。私も何となくしか分かっていない（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020年6月の暦",
      "section": "remark",
      "description": "2020-06-21 の金環日食は日本では見れず部分日食となる",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/06/ephemeris/",
      "published": "2020-06-01T02:04:00+00:00",
      "update": "2020-06-01T02:09:30+00:00",
      "content": "折角 spiegel-im-spiegel/koyomi パッケージを作ったので，2020年6月の暦を浚ってみよう。\n国立天文台のデータを使っているため，暦象の基準が日本の暦になっている点に注意。\n   日付 内容     2020-06-04 金星が内合   2020-06-04 水星が東方最大離角   2020-06-05 芒種   2020-06-06 望(満月)   2020-06-10 入梅   2020-06-13 下弦   2020-06-18 水星が留   2020-06-21 朔(新月)   2020-06-21 夏至   2020-06-21 金環日食   2020-06-24 海王星が留   2020-06-25 金星が留   2020-06-28 上弦     水星が見頃。夕方の空に注目 2020-06-06 の望に半影月食がある（肉眼ではほぼ分からないけど） 2020-06-21 の金環日食は日本では見れず部分日食となる  各用語の意味は以下の通り。\n 「天象 - 国立天文台暦計算室」より  ちなみに「留」とは「惑星の地心視赤経の時間変化が0、すなわち赤経方向の動きが止まる瞬間」，もっと簡単に言うと天球上の（見かけの）惑星の動きが反転する瞬間を指す。\n気が向いたらシリーズ化する？\nコード 今回使用したコードは以下の通り。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/koyomi\u0026#34; ) func main() { start, _ := koyomi.DateFrom(\u0026#34;2020-06-01\u0026#34;) end, _ := koyomi.DateFrom(\u0026#34;2020-06-30\u0026#34;) k, err := koyomi.NewSource( koyomi.WithCalendarID( koyomi.Holiday, koyomi.MoonPhase, koyomi.SolarTerm, koyomi.Eclipse, koyomi.Planet, ), koyomi.WithStartDate(start), koyomi.WithEndDate(end), ).Get() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;| 日付 | 内容 |\u0026#34;) fmt.Println(\u0026#34;| ---- | ---- |\u0026#34;) for _, e := range k.Events() { fmt.Printf(\u0026#34;| %v | %v |\\n\u0026#34;, e.Date, e.Title) } } ブックマーク  2020年の主な暦象 日本の暦情報を取得するパッケージを作ってみた  参考図書  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-05-31 のブックマーク",
      "section": "bookmarks",
      "description": "「OpenSSH、将来のリリースでssh-rsa公開鍵の署名アルゴリズムをデフォルトで無効に」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/05/31-bookmarks/",
      "published": "2020-05-31T00:44:14+00:00",
      "update": "2020-06-05T01:50:46+00:00",
      "content": "リリース情報  Hugo 0.71.1: A couple of Bug Fixes | Hugo  セキュリティ＆プライバシー関連  英政府がファーウェイの5Gネットワ​​ーク参入に関する方針を転換 | TechCrunch Japan SIMスワッピングによるアカウント侵害で情報流出した事案についてまとめてみた - piyolog 0.9.46 Release - Blog - I2P 「Chrome」の深刻なセキュリティ脆弱性、70％はメモリー安全性の問題 - ZDNet Japan アンドロイドは平等なセキュリティの夢を見るか？ - F-Secure  エフセキュア、Android搭載スマートフォンの複数機種が持つセキュリティ上の問題を発見：CodeZine（コードジン）   Websites Conducting Port Scans - Schneier on Security  ブログ: ポートスキャンを実行しているWebサイト   It’s 2020 And Android’s IPv6 Is Still Broken – Daniels Networking Blog  ブログ: 2020年、AndroidのIPv6はまだ壊れています   悪意あるアプリがほぼすべてのアプリを乗っ取れるAndroidの脆弱性「StrandHogg 2.0」 - GIGAZINE 数字11桁で他人の健康状態が把握できたカタールの接触追跡アプリの脆弱性についてまとめてみた - piyolog Thermal Imaging as Security Theater - Schneier on Security 社内にマルウェアが常駐する製造業、セキュリティ対策は何から始めるべきか (1/3) - MONOist（モノイスト） OpenSSH、将来のリリースでssh-rsa公開鍵の署名アルゴリズムをデフォルトで無効に - ZDNet Japan Facebook Announces Messenger Security Features that Don\u0026rsquo;t Compromise Privacy - Schneier on Security  天文関連  SpaceXが民間企業で人類史上初の有人宇宙飛行に成功、歴史にその名を刻む | TechCrunch Japan  Linux または Ubuntu に関する話題  ブログ: リーナス・トーバルズ、個人用PCのCPUをIntelから32コアAMD Ryzenに置き換え 第620回　Ubuntu 20.04 LTSでU2F/FIDOデバイスを使ったSSHの2要素認証を試す：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社 Ubuntu(Wayland) 環境で Alacritty で日本語を入力できるようにする方法 - Qiita Ubuntu Touch その85 - PinePhoneとPineTab・OpenStoreの再設計など - kledgeb 完全な互換性と改善されたI/Oパフォーマンス ～Canonical、「Ubuntu」の「WSL 2」対応を発表 - 窓の杜  その他  「Chromium」ベースの新しい「Microsoft Edge」がWinForms/WPF開発でも利用可能に - 窓の杜 Chrome and Firefox Block Torrent Site YTS over “Phishing” * TorrentFreak 2020年5月25日ニュース「東北大の超高純度鉄、生体になじむ性質を確認 医療用に期待」 | SciencePortal e-TaxがGoogle Chromeに一部対応、Chromiumベースの新しいMicrosoft Edgeでも利用可能に - 窓の杜 セブン‐イレブン マルチコピー / スキャンについて : スマホアプリ : コンビニでのサービス : ソリューション : 富士ゼロックス : コピー機とスマホを Wi-Fi で直結してファイルを受け取るらしい，って怖いわ！ USB メモリのほうがマシか Rewriting the heart of our sync engine - Dropbox  同期エンジンの心臓部を書き換える Testing sync at Dropbox - Dropbox Dropboxが同期エンジンを全面的に改良、新エンジンはどこが改善されているのか？ - GIGAZINE Dropbox、4年をかけてRust言語で再構築された新しい同期エンジン「Nucleus」をリリース - 窓の杜   Google Cloud FunctionsがJava 11をサポート開始。KotlinやScalaも利用可能に － Publickey Thermal Imaging as Security Theater - Schneier on Security ニューヨーク公共図書館125周年を祝い著名人たちがこの一冊をお勧めしている #nypl125 - YAMDAS現更新履歴 2020年5月28日ニュース「『学校閉鎖は流行阻止効果に乏しい』『2歳未満のマスクは危険』と小児科学会」 | SciencePortal ラズベリーパイ財団が8GBメモリー搭載のRaspberry Pi 4を発表 | TechCrunch Japan 「Android Studio 4.0」が正式リリース ～UIの製作がより簡単に - 窓の杜 2020年5月29日ニュース「3年前の九州北部豪雨、線状降水帯の要因は高気圧と日射 九大が解明」 | SciencePortal 【予告編】クリィミーマミグッズ5/30*0:00通販開始(^▽^) | 高田明美オフィシャルブログ「Angel Touch」Powered by Ameba Bogus Security Technology: An Anti-5G USB Stick - Schneier on Security IBMがRustを使ってNode.jsのプロジェクトを書き換え。その背景とは？ | Think IT（シンクイット）  "
    }
  ]
}
