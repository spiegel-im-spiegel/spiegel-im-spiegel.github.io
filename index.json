{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "2019-09-14 のブックマーク",
      "section": "bookmarks",
      "description": "「Newly Discovered Comet Is Likely Interstellar Visitor」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/09/14-bookmarks/",
      "published": "2019-09-14T11:24:22+00:00",
      "update": "2019-09-14T11:24:48+00:00",
      "content": " リリース情報  TDF、「LibreOffice 6.3.1」「LibreOffice 6.2.7」を公開 ～2件の脆弱性を修正 - 窓の杜 「Google Chrome 77」が正式公開 ～アドレスバーのEV証明書発行元表示は廃止 - 窓の杜 「Thunderbird」v68.1.0が公開 ～“Office365”のExchangeアカウントの登録処理を改善 - 窓の杜 : 「「Thunderbird 60」系統へのアップグレード提供は、次期バージョンのv68.2からになる予定」とのこと。ホンマかなぁ。もう少し待ってみるか Hugo 0.58.2: A couple of Bug Fixes | Hugo ESLint v6.4.0 - Qiita  バベルのインターネット セキュリティ＆プライバシー関連  draft-ietf-openpgp-rfc4880bis-08 - OpenPGP Message Format 悪意あるDDoS攻撃を受けWikipediaが欧州の広範囲と中東の一部でダウン | TechCrunch Japan  WikipediaへのDDoS攻撃とSNSへ投稿された「IoTのテスト」についてまとめてみた - piyolog  MIT Tech Review: ストーカーウェア被害撲滅へ、ニューヨーク市が独自の取り組み Twitterも影響を受けたSSL VPN製品の脆弱性についてまとめてみた - piyolog トヨタ紡織で発生した虚偽の指示による資金流出事案についてまとめてみた - piyolog 複数の国内サイトで発生したiPhoneウイルス検出の偽画面表示についてまとめてみた - piyolog PayPayを騙るスミッシングについてまとめてみた - piyolog ウイルスバスターコーポレートエディションの脆弱性(CVE-2019-9489) について：IPA 独立行政法人 情報処理推進機構  ウイルスバスター コーポレートエディションの脆弱性 (CVE-2019-9489) に関する注意喚起  On Cybersecurity Insurance - Schneier on Security Facebookの\u0026quot;出会い系\u0026quot;サービスに警戒せよ | P2Pとかその辺のお話R 「Firefox」、プライバシー高めるVPNサービスをベータ提供 - ZDNet Japan  Mozilla、復活「Test Pilot」でプライバシー保護拡張機能「Firefox Private Network」のβ版公開 - ITmedia NEWS  Intel、2019年9月のセキュリティアドバイザリを公開 ～2製品が対象 - 窓の杜 More on Law Enforcement Backdoor Demands - Schneier on Security FirefoxがDNSとの通信を暗号化する「DNS over HTTPS(DoH)」を正式に実装すると発表 - GIGAZINE リコーのプリンタと複合機にバッファオーバーフローの脆弱性 | マイナビニュース SMSを密かに送信し、位置情報を追跡するエクスプロイト「Simjacker」が発見される - ITmedia NEWS Smart Watches and Cheating on Tests - Schneier on Security  天文関連  MIT Tech Review: 小型衛星向け、新世代の液体燃料プラズマ推進装置 135億年前の星形成の痕跡を発見！〜最遠の「老けた銀河」探査〜 | 国立天文台(NAOJ) 双子原始星からのふぞろいな分子流から連星系形成の謎に迫る | 国立天文台(NAOJ) APOD: 2019 September 9 - M31: The Andromeda Galaxy APOD: 2019 September 10 - Pluto in True Color 地球から110光年先のスーパーアースに液状の水 | TechCrunch Japan MPEC 2019-R113 : COMET C/2019 Q4 (Borisov)  Gemini Observatory Captures Multicolor Image of First-ever Interstellar Comet | Gemini Observatory Newly Discovered Comet Is Likely Interstellar Visitor | NASA オウムアムアに次ぐ恒星間天体らしき彗星が接近中。その大きさはキロメートル級？ | sorae 宇宙へのポータルサイト   知財関連  hentaiサイトを狙う虚偽のDMCA削除通知爆撃、被害サイト運営者はGoogleへの集団訴訟を検討 | P2Pとかその辺のお話R Cox Attacks 'Proof' in Piracy Liability Case, Requests Summary Judgment - TorrentFreak Nintendo Wins Blocking Injunction Against Four Piracy-Enabling Sites - TorrentFreak 米議員、YouTubeにコンテンツIDの開放を求める | P2Pとかその辺のお話R  Linux または Ubuntu に関する話題  メールサーバ「Exim」に複数の脆弱性、アップデートを | マイナビニュース  その他  2019年、人気のプログラミング言語トップはPython。Java、Cが続く。IEEE Spectrumによる調査 － Publickey 9月13日はプログラマの日なのである - 現場からの「協働革新」 - ZDNet Japan グーグルとFTCの和解で示された子供のプライバシーの価値はわずか181億円 | TechCrunch Japan 半世紀前のアメリカで女性ができなかった9つのこと - YAMDAS現更新履歴 Googleがコードレビューのガイドラインなど、ソフトウェアエンジニアリング実践のためのドキュメント「Google Engineering Practices Documentation」を公開 － Publickey IntelliCodeがプログラマのリファクタリング作業を自動的に学習。学習内容からリファクタリング箇所を提案するように － Publickey MIT Tech Review: 「環境にやさしいクルマ」が独禁法違反？米司法省が調査へ 全米50の州と領域の司法長官がGoogleに対する反トラスト法違反の捜査で合意 | TechCrunch Japan GitHub Actions による GitHub Pages への自動デプロイ - Qiita MIT Tech Review: 足裏の感覚を再現、歩行を楽にする新しい義足 ファーウェイが米政府が押収した機器への訴訟取り下げ | TechCrunch Japan ブログ: どのように、エリート大学の研究センターがジェフリー・エプスタインとの関係を隠したか  Message to the Creative Commons Community Regarding Joi Ito - Creative Commons ブログ: 2011年、ジェフリー・エプスタインは周知の性犯罪者だったにも関わらず、Amazon、Google、Teslaの創設者たちは彼と食事を共にした  「Pulumi」がバージョン1.0に到達、正式版に。インフラの状態をJavaScript、Python、Goなどで記述可能。個人向けサービスは無料で提供 － Publickey Rustで実装したアルゴリズムをUnityから使う - Qiita Googleが検索で「オリジナル記事」を優先するアルゴリズム変更を実施 | TechCrunch Japan メインフレーム「IBM z15」、日本でも発表 - ZDNet Japan New CC T-Shirt! (Inspired by a Letter from a 5th Grader) - Creative Commons : www 月と地球を結ぶエレベーター「スペースライン」を科学者が提唱 | TechCrunch Japan IBMのメインフレーム事業は健在、新機種z15を発表 | TechCrunch Japan  "
    },
    {
      "title": "書式 %v のカスタマイズ",
      "section": "golang",
      "description": "Stringer, GoStringer および Formatter インタフェースを使ったカスタマイズ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/formatting/",
      "published": "2019-09-12T14:19:22+00:00",
      "update": "2019-09-13T10:22:50+00:00",
      "content": " 今回も小ネタで。\nお馴染みの fmt.Printf() 関数などで使われる書式（verb）のうち，今回は %v の出力をカスタマイズすることを考えてみる。\n基本型における %v 書式の出力 まずは %v の定義から\n   Verb Description     %v the value in a default format\nwhen printing structs, the plus flag (%+v) adds field names   %#v a Go-syntax representation of the value    更に基本型については %v は以下の書式と対応している。\n   Type Default Verb     bool %t   int, int8, ... %d   uint, uint8, ... %d, %#x if printed with %#v   float32, complex64, ... %g   string %s   chan %p   pointer %p    構造体や配列などの複合オブジェクトについては以下のように展開される。\n   Compound Object Format     struct {field0 field1 ...}   array, slice [elem0 elem1 ...]   maps map[key1:value1 key2:value2 ...]   pointer to above \u0026amp;{}, \u0026amp;[], \u0026amp;map[]    ちょっと試し書きをしてみよう。 たとえば，以下のような構造体とデータを考えてみる。\ntype Planet struct { Name string Mass float64 } var planets = []Planet{ {Name: \u0026#34;Mercury\u0026#34;, Mass: 0.055}, {Name: \u0026#34;Venus\u0026#34;, Mass: 0.815}, {Name: \u0026#34;Earth\u0026#34;, Mass: 1.0}, {Name: \u0026#34;Mars\u0026#34;, Mass: 0.107}, } この planets を %v を使って出力してみよう。 こんな感じ。\nfmt.Printf(\u0026#34;%v\u0026#34;, planets) // Output: // [{Mercury 0.055} {Venus 0.815} {Earth 1} {Mars 0.107}]fmt.Printf(\u0026#34;%+v\u0026#34;, planets) // Output: // [{Name:Mercury Mass:0.055} {Name:Venus Mass:0.815} {Name:Earth Mass:1} {Name:Mars Mass:0.107}]fmt.Printf(\u0026#34;%#v\u0026#34;, planets) // Output: // []main.Planet{main.Planet{Name:\u0026#34;Mercury\u0026#34;, Mass:0.055}, main.Planet{Name:\u0026#34;Venus\u0026#34;, Mass:0.815}, main.Planet{Name:\u0026#34;Earth\u0026#34;, Mass:1}, main.Planet{Name:\u0026#34;Mars\u0026#34;, Mass:0.107}} Stringer および GoStringer インタフェース fmt.Stringer および fmt.GoStringer インタフェースを持つ型であれば %v の出力をカスタマイズできる。 fmt.Stringer および fmt.GoStringer インタフェースの定義は以下の通り。\n// *.go is implemented by any value that has a String method, // which defines the ``native\u0026#39;\u0026#39; format for that value. // The String method is used to print values passed as an operand // to any format that accepts a string or to an unformatted printer // such as Print. type Stringer interface { String() string } // GoStringer is implemented by any value that has a GoString method, // which defines the Go syntax for that value. // The GoString method is used to print values passed as an operand // to a %#v format. type GoStringer interface { GoString() string } 先ほどの Planet 型に fmt.Stringer および fmt.GoStringer インタフェースを組み込んでみよう。\nfunc (p Planet) String() string { return fmt.Sprintf(\u0026#34;%s (%.3f)\u0026#34;, p.Name, p.Mass) } func (p Planet) GoString() string { return fmt.Sprintf(`main.Planet{Name:%s, Mass:%.3f}`, strconv.Quote(p.Name), p.Mass) } これで %v の出力は以下のように変わる。\nfmt.Printf(\u0026#34;%v\u0026#34;, planets) // Output: // [Mercury (0.055) Venus (0.815) Earth (1.000) Mars (0.107)]fmt.Printf(\u0026#34;%+v\u0026#34;, planets) // Output: // [Mercury (0.055) Venus (0.815) Earth (1.000) Mars (0.107)]fmt.Printf(\u0026#34;%#v\u0026#34;, planets) // Output: // []main.Planet{main.Planet{Name:\u0026#34;Mercury\u0026#34;, Mass:0.055}, main.Planet{Name:\u0026#34;Venus\u0026#34;, Mass:0.815}, main.Planet{Name:\u0026#34;Earth\u0026#34;, Mass:1.000}, main.Planet{Name:\u0026#34;Mars\u0026#34;, Mass:0.107}} %v および %+v が fmt.Stringer に %#v が fmt.GoStringer に対応しているのが分かると思う。\nFormatter インタフェース fmt.Stringer インタフェースを使ったカスタマイズの欠点は %v と %+v を区別できないことだ。 %v と %+v を区別できるよう詳細な操作を行いたいのであれば fmt.Formatter インタフェースを組み込む。 fmt.Formatter インタフェースの定義は以下の通り。\n// Formatter is the interface implemented by values with a custom formatter. // The implementation of Format may call Sprint(f) or Fprint(f) etc. // to generate its output. type Formatter interface { Format(f State, c rune) } では Planet 型に fmt.Formatter インタフェースを組み込んでみる。 こんな感じでどうだろう。\nfunc (p Planet) Format(s fmt.State, verb rune) { switch verb { case \u0026#39;v\u0026#39;: switch { case s.Flag(\u0026#39;#\u0026#39;): s.Write([]byte(p.GoString())) case s.Flag(\u0026#39;+\u0026#39;): s.Write([]byte(fmt.Sprintf(`{\u0026#34;Name\u0026#34;:%s,\u0026#34;Mass\u0026#34;:%.3f}`, strconv.Quote(p.Name), p.Mass))) default: s.Write([]byte(p.String())) } case \u0026#39;s\u0026#39;: s.Write([]byte(p.String())) } } これで %v の出力は以下のように変わる。\nfmt.Printf(\u0026#34;%v\u0026#34;, planets) // Output: // [Mercury (0.055) Venus (0.815) Earth (1.000) Mars (0.107)]fmt.Printf(\u0026#34;%+v\u0026#34;, planets) // Output: // [{\u0026#34;Name\u0026#34;:\u0026#34;Mercury\u0026#34;,\u0026#34;Mass\u0026#34;:0.055} {\u0026#34;Name\u0026#34;:\u0026#34;Venus\u0026#34;,\u0026#34;Mass\u0026#34;:0.815} {\u0026#34;Name\u0026#34;:\u0026#34;Earth\u0026#34;,\u0026#34;Mass\u0026#34;:1.000} {\u0026#34;Name\u0026#34;:\u0026#34;Mars\u0026#34;,\u0026#34;Mass\u0026#34;:0.107}]fmt.Printf(\u0026#34;%#v\u0026#34;, planets) // Output: // []main.Planet{main.Planet{Name:\u0026#34;Mercury\u0026#34;, Mass:0.055}, main.Planet{Name:\u0026#34;Venus\u0026#34;, Mass:0.815}, main.Planet{Name:\u0026#34;Earth\u0026#34;, Mass:1.000}, main.Planet{Name:\u0026#34;Mars\u0026#34;, Mass:0.107}} fmt.Formatter インタフェースを組み込めば細かい制御ができるようになるが，取りうる書式を全て記述しないといけないのが面倒である。 状況によって使い分けるのがいいだろう。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "OpenPGP パケットを可視化する gpgpdump",
      "section": "release",
      "description": "gpgpdump は OpenPGP パッケットの内容を human-readable な形式で可視化する CLI ツールである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/gpgpdump/",
      "published": "2019-09-10T13:07:44+00:00",
      "update": "2019-09-11T12:53:45+00:00",
      "content": "  spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer  gpgpdump は OpenPGP パッケットの内容を human-readable な形式で可視化する CLI (Command-Line Interface) ツールである。 山本和彦さんによる pgpdump を参考デザインとし Go 言語で組み直している。\ngpgpdump は pgpdump と比較して以下の特徴がある。\n 平文テキストによる結果出力のほか JSON や TOML といった構造化テキスト・フォーマットによる出力もできる 現行仕様である RFC 4880 に追加して RFC 5581 および RFC 6637 にも対応している 次期 OpenPGP ドラフト案である RFC 4880bis にも一部対応している HKP プロトコルを用いて OpenPGP 鍵サーバから直接公開鍵を取得して検証できる    \nダウンロードとビルド gpgpdump は以下の Go コマンドでダウンロードとビルドができる。\n$ go get github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@latest  なおビルドには Go 1.13 以上が要件となる。 ご注意を。\n各プラットフォーム用のバイナリも用意している。 最新バイナリはリリースページから取得できる。\n簡単な使い方 -h オプションで簡単なヘルプを表示できる。\n$ gpgpdump -h Usage: gpgpdump [flags] gpgpdump [command] Available Commands: help Help about any command hkp Dumps from OpenPGP key server version Print the version number Flags: -a, --armor accepts ASCII input only --debug for debug -f, --file string path of OpenPGP file -h, --help help for gpgpdump --indent int indent size for output string -i, --int dumps multi-precision integers -j, --json output with JSON format -l, --literal dumps literal packets (tag 11) -m, --marker dumps marker packets (tag 10) -p, --private dumps private packets (tag 60-63) -t, --toml output with TOML format -u, --utc output with UTC time -v, --version output version of gpgpdump Use \u0026#34;gpgpdump [command] --help\u0026#34; for more information about a command. たとえば以下のような OpenPGP 電子署名データファイルがあるとする。\n$ cat sig.asc -----BEGIN PGP SIGNATURE----- Version: GnuPG v2 iF4EARMIAAYFAlTDCN8ACgkQMfv9qV+7+hg2HwEA6h2iFFuCBv3VrsSf2BREQaT1 T1ZprZqwRPOjiLJg9AwA/ArTwCPz7c2vmxlv7sRlRLUI6CdsOqhuO1KfYXrq7idI =ZOTN -----END PGP SIGNATURE----- これを gpgpdump で表示するとこんな感じの出力になる。\n$ gpgpdump -f sig.asc Signature Packet (tag 2) (94 bytes) Version: 4 (current) Signiture Type: Signature of a canonical text document (0x01) Public-key Algorithm: ECDSA public key algorithm (pub 19) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2015-01-24T11:52:15+09:00 Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x31fbfda95fbbfa18 Hash left 2 bytes 36 1f ECDSA value r (256 bits) ECDSA value s (252 bits) 入力は標準入力からも可能である。\n$ cat sig.asc | gpgpdump Signature Packet (tag 2) (94 bytes) Version: 4 (current) Signiture Type: Signature of a canonical text document (0x01) Public-key Algorithm: ECDSA public key algorithm (pub 19) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2015-01-24T11:52:15+09:00 Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x31fbfda95fbbfa18 Hash left 2 bytes 36 1f ECDSA value r (256 bits) ECDSA value s (252 bits) -j または --json オプションを指定すれば JSON フォーマットで出力される。\n$ cat sig.asc | gpgpdump -j | jq . { \u0026#34;Packet\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Signature Packet (tag 2)\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;94 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Version\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;4\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;current\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Signiture Type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Signature of a canonical text document (0x01)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Public-key Algorithm\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;ECDSA public key algorithm (pub 19)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Hash Algorithm\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;SHA2-256 (hash 8)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Hashed Subpacket\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;6 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Signature Creation Time (sub 2)\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;2015-01-24T11:52:15+09:00\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;Unhashed Subpacket\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;10 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Issuer (sub 16)\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0x31fbfda95fbbfa18\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;Hash left 2 bytes\u0026#34;, \u0026#34;dump\u0026#34;: \u0026#34;36 1f\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ECDSA value r\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;256 bits\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ECDSA value s\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;252 bits\u0026#34; } ] } ] } gpgpdump で使える主なオプションは以下の通り。\n   オプション名 内容     armor Armor ASCII ファイルのみ受け入れる   int MPI データを16進ダンプ表示する   literal リテラル・パケット（tag 11）を16進ダンプ表示する   marker マーカー・パケット（tag 10）を16進ダンプ表示する   private プライベート用パケット（tag 60-63）を16進ダンプ表示する   utc 時刻を UTC で表示する   indent 平文テキスト出力時のインデント幅を指定する   json JSON 形式で出力する   toml TOML 形式で出力する   debug デバッグ用    HKP モード $ gpgpdump hkp -h Dumps from OpenPGP key server Usage: gpgpdump hkp [flags] \u0026lt;user ID or key ID\u0026gt; Flags: -h, --help help for hkp --keyserver string OpenPGP key server (default \u0026#34;keys.gnupg.net\u0026#34;) --port int port number of OpenPGP key server (default 11371) --raw output raw text from OpenPGP key server --secure enable HKP over HTTPS Global Flags: -a, --armor accepts ASCII input only --debug for debug --indent int indent size for output string -i, --int dumps multi-precision integers -j, --json output with JSON format -l, --literal dumps literal packets (tag 11) -m, --marker dumps marker packets (tag 10) -p, --private dumps private packets (tag 60-63) -t, --toml output with TOML format -u, --utc output with UTC time hkp コマンドを指定することで OpenPGP 鍵サーバから HKP プロトコルを使い，直接公開鍵を取得して中身を検証することができる。\n$ gpgpdump hkp 0x44ce6900e2b307a4 Public-Key Packet (tag 6) (269 bytes) Version: 4 (current) Public key creation time: 2009-11-09T00:20:55+09:00 4a f6 e1 d7 Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (2048 bits) RSA public encryption exponent e (17 bits) User ID Packet (tag 13) (25 bytes) User ID: Alice \u0026lt;alice@example.com\u0026gt; Signature Packet (tag 2) (312 bytes) Version: 4 (current) Signiture Type: Positive certification of a User ID and Public-Key packet (0x13) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (34 bytes) Signature Creation Time (sub 2): 2009-11-09T00:20:55+09:00 Key Flags (sub 27) (1 bytes) Flag: This key may be used to certify other keys. Flag: This key may be used to sign data. Preferred Symmetric Algorithms (sub 11) (5 bytes) Symmetric Algorithm: AES with 256-bit key (sym 9) Symmetric Algorithm: AES with 192-bit key (sym 8) Symmetric Algorithm: AES with 128-bit key (sym 7) Symmetric Algorithm: CAST5 (128 bit key, as per) (sym 3) Symmetric Algorithm: TripleDES (168 bit key derived from 192) (sym 2) Preferred Hash Algorithms (sub 21) (5 bytes) Hash Algorithm: SHA2-256 (hash 8) Hash Algorithm: SHA-1 (hash 2) Hash Algorithm: SHA2-384 (hash 9) Hash Algorithm: SHA2-512 (hash 10) Hash Algorithm: SHA2-224 (hash 11) Preferred Compression Algorithms (sub 22) (3 bytes) Compression Algorithm: ZLIB \u0026lt;RFC1950\u0026gt; (comp 2) Compression Algorithm: BZip2 (comp 3) Compression Algorithm: ZIP \u0026lt;RFC1951\u0026gt; (comp 1) Features (sub 30) (1 bytes) Flag: Modification Detection (packets 18 and 19) Key Server Preferences (sub 23) (1 bytes) Flag: No-modify Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x44ce6900e2b307a4 Hash left 2 bytes 93 62 RSA signature value m^d mod n (2045 bits) Public-Subkey Packet (tag 14) (269 bytes) Version: 4 (current) Public key creation time: 2009-11-09T00:20:55+09:00 4a f6 e1 d7 Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (2048 bits) RSA public encryption exponent e (17 bits) Signature Packet (tag 2) (287 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (9 bytes) Signature Creation Time (sub 2): 2009-11-09T00:20:55+09:00 Key Flags (sub 27) (1 bytes) Flag: This key may be used to encrypt communications. Flag: This key may be used to encrypt storage. Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x44ce6900e2b307a4 Hash left 2 bytes 66 f3 RSA signature value m^d mod n (2048 bits) --raw オプションを使うとダンプ表示はせず HKP リクエストの結果をそのまま表示する。\n$ gpgpdump hkp 0x44ce6900e2b307a4 --raw \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD XHTML 1.0 Strict//EN\u0026#34; \u0026#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\u0026#34; \u0026gt; \u0026lt;html xmlns=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Public Key Server -- Get \u0026#34;0x44ce6900e2b307a4 \u0026#34;\u0026lt;/title\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html;charset=utf-8\u0026#34; /\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; /*\u0026lt;![CDATA[*/ .uid { color: green; text-decoration: underline; } .warn { color: red; font-weight: bold; } /*]]\u0026gt;*/ \u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt;Public Key Server -- Get \u0026#34;0x44ce6900e2b307a4 \u0026#34;\u0026lt;/h1\u0026gt; \u0026lt;pre\u0026gt; -----BEGIN PGP PUBLIC KEY BLOCK----- Version: SKS 1.1.6 Comment: Hostname: pgpkeys.uk mQENBEr24dcBCADQeCxUo1pNF33ytHuzLn4vK9Z8LWXCUoZsQAZ9+cMKAzbQ9ncO+LfMleDz RpjsBxYWDaTnn6a8OySveDcw9/CZ9Wu0ND0+uHErdNk5qh+z81x15sOAfN9xj4pUm0iH092Z wuILrLjWWqgKMZYmB8HKaHXDkQmSfQmhx7oyZ4tWHfMN/VqBWLyUt0RaU0X+s4zLrdJSsTaf ECZRo/2OJecpyBzLBc45Tzv3RJAXTyv31MLDYn38bS0EiShRoqaGIZthC7ZnX9EoaS2trg1K uZtv6NeScRU4TqS21q/kYnE6HBnAMg7mI7dtFbg8x20TB2rTA5v8o/8cqZ3MLQukqjZ1ABEB AAG0GUFsaWNlIDxhbGljZUBleGFtcGxlLmNvbT6JATgEEwECACIFAkr24dcCGwMGCwkIBwMC BhUIAgkKCwQWAgMBAh4BAheAAAoJEETOaQDiswekk2IH/RtbG6zgJiPV91GZFMgmZJU2K6qu iFfdzUNmvLyPfi/l8QUuwDAc8vzni7DYWFBWCOFk3vm8o/OCGxmhSHt1u0L4pm4AKcCqawdX 83H0PQBzvHy1US+33SCUb2OSnxBIwsDxISVSZ89Che+O6Bz3dl1mzsDonw3HGVy73OyspCof 7rRpMhSzTcXkP89pAV5k4IWSg612PlBNXwrCSjDiecx1Dnl0kKcPVl7tEVmYwSp36MBDo3dW DjV/r6qyYF7D63tqoLfS1alXD6zpdJ0iRsV8s3zI+JEBGfWvxTZnOwsOzU7p+11wE1pBM6eX /jNc275HWyQXBZ8Mwv/GRxbelXG5AQ0ESvbh1wEIANn7br8X1stD3Zc+IJ4LA8bavDODajhr mQeSlf2VHocvAMpseldkiPIQgVF67Wh58gY+aeWl1W4KHy6VoTvnvi9Td8SDoH9ChJNXPqYA p4u4yPHSq2HTYai2z9T+yLHH82dXl6kNW5H97Efp6C6enMO8SD5QPpGSJvzosgvwKZBerfxl lV938/HSs5sXtjJRtZSJ2opbr6XaWP9fqy9B3HcHrk9YbAG6jG/ePh4s/vMmi7IZ/uH7Yf2/ d4hw9PJM6CJPnRjDO11qUwWWWQ/vUt/cX/ovnOjjJnj9gzIKQdX7Yt6/COcOmMZIfJdDrTdY +NC07DJtyAKRXQ34q5jC+KcAEQEAAYkBHwQYAQIACQUCSvbh1wIbDAAKCRBEzmkA4rMHpGbz CADLDT0pPL3xjWUy+5Liyv4gc+1EIuDz8kod8263w35bvP0H7urVsH1cODUrG1iG4S3BWvf3 fF9jy/1/WxpRS3huHyHCtyJTmC1wY/syGBBPnHO0CQzUkKG1Pb5IpEXg1T0SXihRqjiVtNT+ MHxlIXaMkCFSelweAJLM/OyrLJ5cwYr8JA+YZFav3pz0vZ58Fm9XRouvOIj9+0iX5Mnrw/2h XRHCOgDrPp1aDAx9pnwY3oyy5dAof8o0Gpiaz34TRRdZ3vSFBloopXdNyH+V2cBUxLAxoqaQ PrMW9QsmqRw/5A1YirEupzsd7z8/UVEKFIdPCxrMNWM/QArO22qEZjE3 =1Cgb -----END PGP PUBLIC KEY BLOCK----- \u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; 以下のオプションを使って OpenPGP 鍵サーバを指定することもできる。\n   オプション名 既定値 内容     keyserver keys.gnupg.net OpenPGP 鍵サーバ名（ホスト名）   port 11371 OpenPGP 鍵サーバのポート番号   secure false HKP over HTTPS を有効にする    gpgpdump を Go パッケージとして使う 使いどころが思い浮かばないのだが（笑），一応 gpgpdump は Go 言語用のパッケージまたはモジュールとして組み込むことができる。\nたとえばこんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gpgpdump\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gpgpdump/options\u0026#34; ) const openpgpStr = ` -----BEGIN PGP SIGNATURE----- Version: GnuPG v2 iF4EARMIAAYFAlTDCN8ACgkQMfv9qV+7+hg2HwEA6h2iFFuCBv3VrsSf2BREQaT1 T1ZprZqwRPOjiLJg9AwA/ArTwCPz7c2vmxlv7sRlRLUI6CdsOqhuO1KfYXrq7idI =ZOTN -----END PGP SIGNATURE----- ` func main() { info, err := gpgpdump.ParseByte( []byte(openpgpStr), options.New( options.Set(options.ARMOR, true), options.Set(options.UTC, true), ), ) if err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\u0026#34;, err) return } fmt.Println(info) } あるいは io.Reader インタフェースを使うのであれば\ninfo, err := gpgpdump.Parse( bytes.NewBufferString(openpgpStr), options.New( options.Set(options.ARMOR, true), options.Set(options.UTC, true), ), ) などとしてもよい。\nこれを実行すると以下のような出力を得られる。\n$ go run sample.go Signature Packet (tag 2) (94 bytes) Version: 4 (current) Signiture Type: Signature of a canonical text document (0x01) Public-key Algorithm: ECDSA public key algorithm (pub 19) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2015-01-24T02:52:15Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x31fbfda95fbbfa18 Hash left 2 bytes 36 1f ECDSA value r (256 bits) ECDSA value s (252 bits) options.New() 関数で CLI 版と同等のオプションを設定できる。 options.New() 関数の引数として options.Set() 関数を0個以上複数指定できる。 指定可能なオプションは以下の通り。\n   オプション 既定値 対応する CLI オプション     options.ARMOR false armor   options.INTEGER false int   options.LITERAL false literal   options.MARKER false marker   options.PRIVATE false private   options.UTC false utc   options.DEBUG false debug    gpgpdump.Parse() または gpgpdump.ParseByte() 関数の返り値として構造体 info.Info を取得できる。 info.Info 構造体の構成は以下の通り。\n//Info is information class for OpenPGP packets type Info struct { Packets []*Item `toml:\u0026#34;Packet,omitempty\u0026#34; json:\u0026#34;Packet,omitempty\u0026#34;` } //Item is information item class type Item struct { Name string `toml:\u0026#34;name\u0026#34; json:\u0026#34;name\u0026#34;` Value string `toml:\u0026#34;value,omitempty\u0026#34; json:\u0026#34;value,omitempty\u0026#34;` Dump string `toml:\u0026#34;dump,omitempty\u0026#34; json:\u0026#34;dump,omitempty\u0026#34;` Note string `toml:\u0026#34;note,omitempty\u0026#34; json:\u0026#34;note,omitempty\u0026#34;` Items []*Item `toml:\u0026#34;Item,omitempty\u0026#34; json:\u0026#34;Item,omitempty\u0026#34;` } たとえば，先ほどの main() 関数を\nfunc main() { info, err := gpgpdump.Parse( bytes.NewBufferString(openpgpStr), options.New( options.Set(options.ARMOR, true), options.Set(options.UTC, true), ), ) if err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\u0026#34;, err) return } if json, err := info.JSON(2); err == nil { fmt.Printf(\u0026#34;%s\u0026#34;, json) } } のように変えれば\n$ go run sample.go { \u0026#34;Packet\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Signature Packet (tag 2)\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;94 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Version\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;4\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;current\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Signiture Type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Signature of a canonical text document (0x01)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Public-key Algorithm\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;ECDSA public key algorithm (pub 19)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Hash Algorithm\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;SHA2-256 (hash 8)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Hashed Subpacket\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;6 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Signature Creation Time (sub 2)\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;2015-01-24T02:52:15Z\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;Unhashed Subpacket\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;10 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Issuer (sub 16)\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0x31fbfda95fbbfa18\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;Hash left 2 bytes\u0026#34;, \u0026#34;dump\u0026#34;: \u0026#34;36 1f\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ECDSA value r\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;256 bits\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ECDSA value s\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;252 bits\u0026#34; } ] } ] } のような出力になる。 これなら info.Info 構造体の構成が分かりやすいかな。\nブックマーク  OpenPGP の実装  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2018-12-16 (powered by PA-API)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-API)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "gpgpdump v0.6.2 をリリースした",
      "section": "release",
      "description": "今回は細かい調整のみ。 draft-ietf-openpgp-rfc4880bis-08 への追随も行った。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/gpgpdump-v0_6_2-is-released/",
      "published": "2019-09-09T10:38:32+00:00",
      "update": "2019-09-10T13:11:02+00:00",
      "content": " OpenPGP パケットの内容を可視化する gpgpdump の v0.6.2 をリリースした。\n Release v0.6.2 · spiegel-im-spiegel/gpgpdump · GitHub  といっても今回は細かい調整のみ。 Go 1.13 に対応したのと新しいエラーハンドリング・パッケージ spiegel-im-spiegel/errs を組み込んだだけ。 でも，これでデバッグが格段にし易くなった。\nあ，そうそう。 draft-ietf-openpgp-rfc4880bis-08 への追随も行った。 でも試す対象がないからなぁ（笑）\ngpgpdump の使い方等は以下を参照のこと。\n OpenPGP パケットを可視化する gpgpdump  ブックマーク  Go 言語用エラーハンドリング・パッケージをリリースした spiegel-im-spiegel/gocli v0.10.1 のリリース  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2018-12-16 (powered by PA-API)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-API)\n "
    },
    {
      "title": "2019-09-08 のブックマーク",
      "section": "bookmarks",
      "description": "「「Firefox 69」が公開 ～全ユーザーをサードパーティートラッカーと暗号通貨マイニングから保護」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/09/08-bookmarks/",
      "published": "2019-09-08T07:14:45+00:00",
      "update": "2019-09-08T07:17:40+00:00",
      "content": " リリース情報  Google、「Android 10」を正式リリース - 窓の杜 Firefox 69.0, See All New Features, Updates and Fixes  Today’s Firefox Blocks Third-Party Tracking Cookies and Cryptomining by Default - The Mozilla Blog 「Firefox 69」が公開 ～全ユーザーをサードパーティートラッカーと暗号通貨マイニングから保護 - 窓の杜  GoogleがAndroid 10をリリース、日本でも配信中 | TechCrunch Japan Image Processing Galore! | Hugo : Hugo 0.58 がリリースされた  Hugo 0.58.1: A couple of Bug Fixes | Hugo  LibreOffice 6.3.1 and LibreOffice 6.2.7 announced, focusing on security - The Document Foundation Blog 「Samba 4.10.8/4.9.13」リリース | Think IT（シンクイット）  セキュリティ＆プライバシー関連  Twitterのジャック・ドーシーCEOのTwitterアカウントが乗っ取られる | TechCrunch Japan 脆弱なAWS S3侵害によるユニクロオーストラリアの入力フォーム改ざんについてまとめてみた - piyolog SIMスワッピングによるTwitter CEOアカウントのっとりについてまとめてみた - piyolog 複数の SSL VPN 製品の脆弱性に関する注意喚起 Avastと仏警察、85万台感染の暗号通貨マイニング・ボットネットを壊滅 | TechCrunch Japan MIT Tech Review: 積極攻撃に乗り出す米サイバー軍、イラン軍のデータベースを破壊 DDoS攻撃の最新動向--小規模で巧妙な攻撃増加 - ZDNet Japan Sources say China used iPhone hacks to target Uyghur Muslims – TechCrunch  iPhoneハッキングは中国政府によるウイグルのムスリム攻撃の疑い | TechCrunch Japan MIT Tech Review: iPhone安全神話崩壊、グーグルが発見した大規模攻撃の驚きの中身 Massive iPhone Hack Targets Uyghurs - Schneier on Security ブログ: ウイグル人を標的にした大規模なiPhoneハッキング アップルがグーグルのiOS脆弱性発表に「ウイグルだけの話」と反論 | TechCrunch Japan  パンダくろしお運行スケジュールサイトの改ざんについてまとめてみた - piyolog LINE、プロフ画像が第三者に変更される脆弱性　「プロフ画像、変えられてないか確認を」とユーザーに呼び掛け - ITmedia NEWS Credit Card Privacy - Schneier on Security MIT Tech Review: ハッカー惑わし攻撃防ぐ、ミシガン大の新型チップ J-Coin Payテスト環境で発生したデータ削除とビットコイン要求についてまとめてみた - piyolog Facebookユーザーの電話番号が掲載された大量データベースが流出 | TechCrunch Japan The Doghouse: Crown Sterling - Schneier on Security 9月5日に発生した金融機関のワンタイムパスワード認証サービスの障害についてまとめてみた - piyolog Androidに未解決の脆弱性を発見、ZDIが公開 - ITmedia エンタープライズ 600,000 GPS trackers for people and pets are using 123456 as a password | Ars Technica トヨタ紡織で発生した虚偽の指示による資金流出事案についてまとめてみた - piyolog Malicious attack on Wikipedia—What we know, and what we’re doing – Wikimedia Foundation  天文関連  MIT Tech Review: スペースXのネット衛星、ESAの気象衛星とニアミス 速報・ブラックホールの直接撮像に対して基礎物理学ブレークスルー賞の授与が決定 | 国立天文台(NAOJ) JAXA | 火星衛星探査に向けた国際的な惑星保護方針への貢献について  知財関連  国際調査研究：正規版の価格の手頃さと入手のしやすさこそが海賊版を減らす | P2Pとかその辺のお話R Facebook Blocks Sharing of Links to Prominent Pirate Sites - TorrentFreak 'Pirate' Site Manga Rock Starts Shutdown, Will Go Legal - TorrentFreak  大手海賊版マンガサイト「Manga Rock」、サイトを閉鎖し合法サービス化を目指すと宣言 | P2Pとかその辺のお話R  ISPs: Pirate Site Blocking Threatens Freedom of Expression - TorrentFreak  Linux または Ubuntu に関する話題  さくらのVPS 初期提供時の標準OSを「CentOS 7」へ変更 | さくらインターネット Ubuntu 20.04 その2 - TLSの最小バージョンをTLS v1.2に - kledgeb  その他  LibreOffice で「Arial」が「MS Pゴシック」になる - 電気ウナギ的○○ ヴイエムウェアとデルのCEOが語る、米中貿易摩擦と2つの貿易圏への対応 - ZDNet Japan Google App EngineでRubyのスタンダード環境でのサポート開始。負荷がないときはゼロインスタンスまで縮退可能 － Publickey Microsoft、Edge/IE11のFlash削除ロードマップを更新 ～次期EdgeはChromiumと歩を揃えて段階的に廃止 - 窓の杜 Rustこそがシステムプログラミングの未来（で、C言語はもはやアセンブリ相当）なら、Rustで書かれたドライバのコードをLinuxカーネルは受け入れるべきなのか？ - YAMDAS現更新履歴 プロジェクト管理ツール「Jooto」がフル機能を無料開放、5人目以降からの有料プランに刷新 | TechCrunch Japan HugoでGravater登録画像を表示するサンプル - Qiita Facebookが近い将来「いいね！」カウントを廃止する可能性 | TechCrunch Japan MIT Tech Review: SNSからヘイトを排除するには？ 物理学者が提唱する過激な対策 仮想マシンのメモリを、ネットワーク経由でほかのサーバから拝借して増やせる「VMware Cluster Memory」、VMwareが開発中 － Publickey 英「合意なき離脱」なら欧州に深刻なダメージ--静かに響く「EU崩壊」の足音 - ZDNet Japan ハイライト 山中伸弥 氏（京都大学iPS細胞研究所所長・教授）「iPS細胞の発見をもたらした『必要』と『偶然』 ―ノーベル生理学・医学賞を授賞した研究の背景」| SciencePortal MIT Tech Review: 米大統領選デマ合戦、インスタが新たな主戦場に UPSが場所により完全EVモードに切り替え可能なハイブリッド長距離トラックを導入 | TechCrunch Japan Why do Chinese people like their government? - SupChina マイクロプラスティックは飲料水にも入っているが、心配しすぎなくていい（いまのところは）：WHOが報告書｜WIRED.jp マネージドなNFSサーバを提供する「Amazon EFS」、ファイルの保存価格を大幅値下げ － Publickey ミックステープの音楽ストリーミング「Audiomack」はなぜ成長したか。インディーズアーティストに起こる序列の変化 | All Digital Music  "
    },
    {
      "title": "書籍データ取得ツール books-data",
      "section": "release",
      "description": "本ツールは PA-API, openBD および 青空文庫 API より書籍情報を取得・加工するための CLI ツールである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/books-data/",
      "published": "2019-09-08T06:22:41+00:00",
      "update": "2019-09-09T10:42:23+00:00",
      "content": "  spiegel-im-spiegel/books-data: Search for Books Data  本ツールは PA-API, openBD および 青空文庫 API より書籍情報を取得・加工するための CLI (Command-Line Interface) ツールである。\n  \nダウンロードとビルド books-data は以下の Go コマンドでダウンロードとビルドができる。\n$ go get github.com/spiegel-im-spiegel/books-data@latest なおビルドには Go 1.13 以上が必要になる。 ご注意を。\n各プラットフォーム用のバイナリも用意している。 最新バイナリはリリースページから取得できる。\n簡単な使い方 -h オプションで簡単なヘルプを表示できる。\n$ books-data -h Search for books data Usage: books-data [flags] books-data [command] Available Commands: help Help about any command history Lookup review data from history log review Make review data search Search for books data version Print the version number Flags: --access-key string Config: PA-API Access Key ID -c, --aozora-card string Aozora-bunko card no. -a, --asin string Amazon ASIN code --associate-tag string Config: PA-API Associate Tag --config string Config file (default /home/username/.config/books-data/config.yaml) --debug for debug -h, --help help for books-data -i, --isbn string ISBN code --marketplace string Config: PA-API Marketplace (default \u0026#34;webservices.amazon.co.jp\u0026#34;) -l, --review-log string Config: Review log file (JSON format) --secret-key string Config: PA-API Secret Access Key -t, --template-file string Template file for formatted output Use \u0026#34;books-data [command] --help\u0026#34; for more information about a command. 設定ファイル books-data のオプションの一部は設定ファイルであらかじめ指定しておくことができる。 指定可能なオプションは以下の通り\n   オプション名 既定値 内容     marketplace webservices.amazon.co.jp PA-API サーバ名   associate-tag なし PA-API アソシエイト・タグ（アカウント名）   access-key なし PA-API アクセスキー   secret-key なし PA-API 秘密キー   review-log なし レビューデータ作成時の保存ログファイル名    設定ファイルの書式は YAML 形式で以下のような感じに記述する。\n$ cat ~/.config/books-data/config.yaml marketplace: webservices.amazon.co.jp associate-tag: mytag-20 access-key: AKIAIOSFODNN7EXAMPLE secret-key: 1234567890 review-log: /home/username/.local/share/books-data/review-log.json 設定ファイルは以下のパスに置いておけば books-data 起動時に自動的に読み込まれる。\n Windows  %AppData%\\books-data\\config.yaml  Darwin (macOS)  $HOME/Library/Application Support/books-data/config.yaml  Plan 9  $home/lib/books-data/config.yaml  UNIX 系 OS (Linux 他)  $XDG_CONFIG_HOME/books-data/config.yaml （$XDG_CONFIG_HOME 環境変数が指定されている場合） $HOME/.config/books-data/config.yaml   また books-data 起動時に --config オプションで設定ファイルを直接指定することも可能だ。 設定ファイルの内容には秘密情報が含まれる（PA-API を利用する場合）ためファイルのアクセス設定に注意すること。\n書籍情報の検索 $ books-data search -h Search for books data Usage: books-data search [flags] Flags: -h, --help help for search --raw Output raw data from API Global Flags: --access-key string Config: PA-API Access Key ID -c, --aozora-card string Aozora-bunko card no. -a, --asin string Amazon ASIN code --associate-tag string Config: PA-API Associate Tag --config string Config file (default /home/username/.config/books-data/config.yaml) --debug for debug -i, --isbn string ISBN code --marketplace string Config: PA-API Marketplace (default \u0026#34;webservices.amazon.co.jp\u0026#34;) -l, --review-log string Config: Review log file (JSON format) --secret-key string Config: PA-API Secret Access Key -t, --template-file string Template file for formatted output たとえば ASIN コード B07TYKJQFK のアイテムの情報を取得する場合は以下のコマンドラインで起動する（PA-API を利用可能な場合）。\n$ books-data search -a B07TYKJQFK {\u0026#34;Type\u0026#34;:\u0026#34;paapi\u0026#34;,\u0026#34;ID\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;,\u0026#34;Title\u0026#34;:\u0026#34;数学ガールの秘密ノート／ビットとバイナリー\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://www.amazon.co.jp/exec/obidos/ASIN/B07TYKJQFK/baldandersinf-22/\u0026#34;,\u0026#34;Image\u0026#34;:{\u0026#34;URL\u0026#34;:\u0026#34;https://images-fe.ssl-images-amazon.com/images/I/41Q0Hyr8g3L._SL160_.jpg\u0026#34;,\u0026#34;Height\u0026#34;:160,\u0026#34;Width\u0026#34;:111},\u0026#34;ProductType\u0026#34;:\u0026#34;Kindle版\u0026#34;,\u0026#34;Authors\u0026#34;:[\u0026#34;結城 浩\u0026#34;],\u0026#34;Publisher\u0026#34;:\u0026#34;SBクリエイティブ\u0026#34;,\u0026#34;Codes\u0026#34;:[{\u0026#34;Name\u0026#34;:\u0026#34;ASIN\u0026#34;,\u0026#34;Value\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;}],\u0026#34;PublicationDate\u0026#34;:\u0026#34;2019-07-19\u0026#34;,\u0026#34;LastRelease\u0026#34;:\u0026#34;2019-07-20\u0026#34;,\u0026#34;Service\u0026#34;:{\u0026#34;Name\u0026#34;:\u0026#34;PA-API\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://affiliate.amazon.co.jp/assoc_credentials/home\u0026#34;}} 実行結果は JSON 形式で出力される。\n他に指定可能な検索オプションは以下の通り。\n   オプション 内容     -a, --asin Amazon ASIN コード   -i, --isbn ISBN 番号   -c, --aozora-card 青空文庫図書カード No.    これらは同時に指定可能だが Amazon ASIN コード → ISBN 番号 → 青空文庫図書カード No. の順で検索を行う。 また検索キーとして ISBN コードを指定した場合は openBD → PA-API の順で検索する。\nレビュー・データの作成 $ books-data review -h Make review data Usage: books-data review [flags] [description] Flags: --bookpage-url string URL of book page -h, --help help for review --image-url string URL of book cover image --pipe Import description from Stdin -r, --rating int Rating of product --review-date string Date of review Global Flags: --access-key string Config: PA-API Access Key ID -c, --aozora-card string Aozora-bunko card no. -a, --asin string Amazon ASIN code --associate-tag string Config: PA-API Associate Tag --config string Config file (default /home/username/.config/books-data/config.yaml) --debug for debug -i, --isbn string ISBN code --marketplace string Config: PA-API Marketplace (default \u0026#34;webservices.amazon.co.jp\u0026#34;) -l, --review-log string Config: Review log file (JSON format) --secret-key string Config: PA-API Secret Access Key -t, --template-file string Template file for formatted output ASIN, ISBN または 青空文庫図書カード No. で指定した書籍情報に対してレビュー情報を作成する。 レビュー情報として以下のオプションを指定できる。\n   オプション 内容     --bookpage-url 書籍ページへの URL   --image-url 書影（画像データ）への URL   --rating 評価ポイント (0-5) ※ 0なら評価なし   --review-date レビュー日    コマンドラインはこんな感じで記述する。\n$ books-data review -a B07TYKJQFK -r 5 --review-date 2019-09-08 \u0026#34;面白かった！\u0026#34; {\u0026#34;Book\u0026#34;:{\u0026#34;Type\u0026#34;:\u0026#34;paapi\u0026#34;,\u0026#34;ID\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;,\u0026#34;Title\u0026#34;:\u0026#34;数学ガールの秘密ノート／ビットとバイナリー\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://www.amazon.co.jp/exec/obidos/ASIN/B07TYKJQFK/baldandersinf-22/\u0026#34;,\u0026#34;Image\u0026#34;:{\u0026#34;URL\u0026#34;:\u0026#34;https://images-fe.ssl-images-amazon.com/images/I/41Q0Hyr8g3L._SL160_.jpg\u0026#34;,\u0026#34;Height\u0026#34;:160,\u0026#34;Width\u0026#34;:111},\u0026#34;ProductType\u0026#34;:\u0026#34;Kindle版\u0026#34;,\u0026#34;Authors\u0026#34;:[\u0026#34;結城 浩\u0026#34;],\u0026#34;Publisher\u0026#34;:\u0026#34;SBクリエイティブ\u0026#34;,\u0026#34;Codes\u0026#34;:[{\u0026#34;Name\u0026#34;:\u0026#34;ASIN\u0026#34;,\u0026#34;Value\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;}],\u0026#34;PublicationDate\u0026#34;:\u0026#34;2019-07-19\u0026#34;,\u0026#34;LastRelease\u0026#34;:\u0026#34;2019-07-20\u0026#34;,\u0026#34;Service\u0026#34;:{\u0026#34;Name\u0026#34;:\u0026#34;PA-API\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://affiliate.amazon.co.jp/assoc_credentials/home\u0026#34;}},\u0026#34;Date\u0026#34;:\u0026#34;2019-09-08\u0026#34;,\u0026#34;Rating\u0026#34;:5,\u0026#34;Star\u0026#34;:[true,true,true,true,true],\u0026#34;Description\u0026#34;:\u0026#34;面白かった！\u0026#34;} 実行結果は JSON 形式で出力される。 また --pipe オプションを付けることで標準入力から description を入力できる。\n$ echo \u0026#34;面白かった！\u0026#34; | books-data review -a B07TYKJQFK -r 5 --review-date 2019-09-08 --pipe {\u0026#34;Book\u0026#34;:{\u0026#34;Type\u0026#34;:\u0026#34;paapi\u0026#34;,\u0026#34;ID\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;,\u0026#34;Title\u0026#34;:\u0026#34;数学ガールの秘密ノート／ビットとバイナリー\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://www.amazon.co.jp/exec/obidos/ASIN/B07TYKJQFK/baldandersinf-22/\u0026#34;,\u0026#34;Image\u0026#34;:{\u0026#34;URL\u0026#34;:\u0026#34;https://images-fe.ssl-images-amazon.com/images/I/41Q0Hyr8g3L._SL160_.jpg\u0026#34;,\u0026#34;Height\u0026#34;:160,\u0026#34;Width\u0026#34;:111},\u0026#34;ProductType\u0026#34;:\u0026#34;Kindle版\u0026#34;,\u0026#34;Authors\u0026#34;:[\u0026#34;結城 浩\u0026#34;],\u0026#34;Publisher\u0026#34;:\u0026#34;SBクリエイティブ\u0026#34;,\u0026#34;Codes\u0026#34;:[{\u0026#34;Name\u0026#34;:\u0026#34;ASIN\u0026#34;,\u0026#34;Value\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;}],\u0026#34;PublicationDate\u0026#34;:\u0026#34;2019-07-19\u0026#34;,\u0026#34;LastRelease\u0026#34;:\u0026#34;2019-07-20\u0026#34;,\u0026#34;Service\u0026#34;:{\u0026#34;Name\u0026#34;:\u0026#34;PA-API\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://affiliate.amazon.co.jp/assoc_credentials/home\u0026#34;}},\u0026#34;Date\u0026#34;:\u0026#34;2019-09-08\u0026#34;,\u0026#34;Rating\u0026#34;:5,\u0026#34;Star\u0026#34;:[true,true,true,true,true],\u0026#34;Description\u0026#34;:\u0026#34;面白かった！\\n\u0026#34;} レビュー履歴の参照 $ books-data history -h Lookup review data from history log Usage: books-data history [flags] Flags: -h, --help help for history Global Flags: --access-key string Config: PA-API Access Key ID -c, --aozora-card string Aozora-bunko card no. -a, --asin string Amazon ASIN code --associate-tag string Config: PA-API Associate Tag --config string Config file (default /home/spiegel/.config/books-data/config.yaml) --debug for debug -i, --isbn string ISBN code --marketplace string Config: PA-API Marketplace (default \u0026#34;webservices.amazon.co.jp\u0026#34;) -l, --review-log string Config: Review log file (JSON format) --secret-key string Config: PA-API Secret Access Key -t, --template-file string Template file for formatted output --review-log オプションでレビュー結果を保存している場合は history コマンドで過去の履歴を呼び出せる。\n$ books-data history -a B07TYKJQFK {\u0026#34;Book\u0026#34;:{\u0026#34;Type\u0026#34;:\u0026#34;paapi\u0026#34;,\u0026#34;ID\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;,\u0026#34;Title\u0026#34;:\u0026#34;数学ガールの秘密ノート／ビットとバイナリー\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://www.amazon.co.jp/%E6%95%B0%E5%AD%A6%E3%82%AC%E3%83%BC%E3%83%AB%E3%81%AE%E7%A7%98%E5%AF%86%E3%83%8E%E3%83%BC%E3%83%88%EF%BC%8F%E3%83%93%E3%83%83%E3%83%88%E3%81%A8%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%BC-%E7%B5%90%E5%9F%8E-%E6%B5%A9-ebook/dp/B07TYKJQFK?SubscriptionId=AKIAJYVUJ3DMTLAECTHA\\u0026tag=baldandersinf-22\\u0026linkCode=xm2\\u0026camp=2025\\u0026creative=165953\\u0026creativeASIN=B07TYKJQFK\u0026#34;,\u0026#34;Image\u0026#34;:{\u0026#34;URL\u0026#34;:\u0026#34;https://images-fe.ssl-images-amazon.com/images/I/41Q0Hyr8g3L._SL160_.jpg\u0026#34;,\u0026#34;Height\u0026#34;:160,\u0026#34;Width\u0026#34;:111},\u0026#34;ProductType\u0026#34;:\u0026#34;Kindle版\u0026#34;,\u0026#34;Authors\u0026#34;:[\u0026#34;結城 浩\u0026#34;],\u0026#34;Publisher\u0026#34;:\u0026#34;SBクリエイティブ\u0026#34;,\u0026#34;Codes\u0026#34;:[{\u0026#34;Name\u0026#34;:\u0026#34;ASIN\u0026#34;,\u0026#34;Value\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;}],\u0026#34;PublicationDate\u0026#34;:\u0026#34;2019-07-19\u0026#34;,\u0026#34;LastRelease\u0026#34;:\u0026#34;2019-07-20\u0026#34;,\u0026#34;Service\u0026#34;:{\u0026#34;Name\u0026#34;:\u0026#34;PA-API\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://affiliate.amazon.co.jp/assoc_credentials/home\u0026#34;}},\u0026#34;Date\u0026#34;:\u0026#34;2019-08-04\u0026#34;,\u0026#34;Rating\u0026#34;:5,\u0026#34;Star\u0026#34;:[true,true,true,true,true],\u0026#34;Description\u0026#34;:\u0026#34;面白かった！\\n\u0026#34;} 出力の整形 -t または --template-file オプションででテンプレートファイルを指定することにより search, review, history 各コマンドの実行結果の出力を整形できる。\nたとえば以下のようなテンプレートファイルを用意すれば\n$ cat reviews/template.bib.txt @BOOK{Book:{{ .Book.ID }}, TITLE = \u0026#34;{{ .Book.Title }}\u0026#34;{{ if .Book.Authors }}, AUTHOR = \u0026#34;{{ range $i, $v := .Book.Authors }}{{ if ne $i 0 }} and {{ end }}{{ $v }}{{ end }}{{ if .Book.Creators }}{{ range .Book.Creators }} and {{ . }}{{ end }}{{ end }}\u0026#34;{{ end }}{{ if .Book.Publisher }}, PUBLISHER = {{ \u0026#34;{\u0026#34; }}{{ .Book.Publisher }}{{ \u0026#34;}\u0026#34; }}{{ end }}{{ if gt .Book.PublicationDate.Year 1 }}, YEAR = {{ .Book.PublicationDate.Year }}{{ end }} } このような出力になる。\n$ books-data history -a B07TYKJQFK -t reviews/template.bib.txt @BOOK{Book:B07TYKJQFK, TITLE = \u0026#34;数学ガールの秘密ノート／ビットとバイナリー\u0026#34;, AUTHOR = \u0026#34;結城 浩\u0026#34;, PUBLISHER = {SBクリエイティブ}, YEAR = 2019 } search コマンドで取得した書籍データのフォーマットは以下の通り。\n//Book is entity class of information for book type Book struct { Type string ID string Title string SubTitle string `json:\u0026#34;,omitempty\u0026#34;` SeriesTitle string `json:\u0026#34;,omitempty\u0026#34;` OriginalTitle string `json:\u0026#34;,omitempty\u0026#34;` URL string `json:\u0026#34;,omitempty\u0026#34;` Image BookCover ProductType string `json:\u0026#34;,omitempty\u0026#34;` Authors []string Creators []Creator `json:\u0026#34;,omitempty\u0026#34;` Publisher string `json:\u0026#34;,omitempty\u0026#34;` Codes []Code PublicationDate values.Date LastRelease values.Date PublicDomain bool `json:\u0026#34;,omitempty\u0026#34;` FirstAppearance string `json:\u0026#34;,omitempty\u0026#34;` Service Service } //Code is entity class of book code type Code struct { Name string Value string } //Creator is entity class of creator info. type Creator struct { Name string Role string `json:\u0026#34;,omitempty\u0026#34;` } //BookCover is entity class of book cover image info. type BookCover struct { URL string Height uint16 `json:\u0026#34;,omitempty\u0026#34;` Width uint16 `json:\u0026#34;,omitempty\u0026#34;` } //Service is entity class of API service info. type Service struct { Name string URL string } また review, history コマンドで取得したレビュー・データのフォーマットは以下の通り。\n//Review is entity class for review info. type Review struct { Book *entity.Book Date values.Date Rating int Star [MAX_STAR]bool Description string `json:\u0026#34;,omitempty\u0026#34;` } ちなみに，このブログにおけるレビューカードのテンプレートは以下の内容になっている。\n\u0026lt;div class=\u0026#34;hreview\u0026#34;\u0026gt;{{ if .Book.Image.URL }} \u0026lt;div class=\u0026#34;photo\u0026#34;\u0026gt;{{ if .Book.URL }}\u0026lt;a class=\u0026#34;item url\u0026#34; href=\u0026#34;{{ .Book.URL }}\u0026#34;\u0026gt;{{ end }}\u0026lt;img src=\u0026#34;{{ .Book.Image.URL }}\u0026#34; width=\u0026#34;{{ with .Book.Image.Width }}{{ . }}{{ else }}110{{ end }}\u0026#34; alt=\u0026#34;photo\u0026#34;\u0026gt;{{ if .Book.URL }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/div\u0026gt;{{ end }} \u0026lt;dl class=\u0026#34;fn\u0026#34;\u0026gt; \u0026lt;dt\u0026gt;{{ if .Book.URL }}\u0026lt;a href=\u0026#34;{{ .Book.URL }}\u0026#34;\u0026gt;{{ end }}{{ .Book.Title }}{{ with .Book.SubTitle }} {{ . }}{{ end }}{{ with .Book.SeriesTitle }} ({{ . }}){{ end }}{{ if .Book.URL }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/dt\u0026gt;{{ if .Book.OriginalTitle }} \u0026lt;dd\u0026gt;原題: {{ .Book.OriginalTitle }}\u0026lt;/dd\u0026gt;{{ end }}{{ if .Book.FirstAppearance }} \u0026lt;dd\u0026gt;（初出: {{ .Book.FirstAppearance }}）\u0026lt;/dd\u0026gt;{{ end }}{{ if .Book.Authors }} \u0026lt;dd\u0026gt;{{ range $i, $v := .Book.Authors }}{{ if ne $i 0 }}, {{ end }}{{ $v }}{{ end }}\u0026lt;/dd\u0026gt;{{ end }}{{ if .Book.Creators }} \u0026lt;dd\u0026gt;{{ range $i, $v := .Book.Creators }}{{ if ne $i 0 }}, {{ end }}{{ $v }}{{ end }}\u0026lt;/dd\u0026gt;{{ end }} \u0026lt;dd\u0026gt;{{ .Book.Publisher }}{{ if not .Book.PublicationDate.IsZero }} {{ .Book.PublicationDate }}{{ end }}{{ if not .Book.LastRelease.IsZero }} (Release {{ .Book.LastRelease }}){{ end }}\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;{{ .Book.ProductType }}{{ if .Book.PublicDomain }} (Public Domain){{ end }}\u0026lt;/dd\u0026gt;{{ if .Book.Codes }} \u0026lt;dd\u0026gt;{{ range $i, $v := .Book.Codes }}{{ if ne $i 0 }}, {{ end }}{{ $v }}{{ end }}\u0026lt;/dd\u0026gt;{{ end }}{{ if gt .Rating 0 }} \u0026lt;dd\u0026gt;評価\u0026lt;abbr class=\u0026#34;rating fa-sm\u0026#34; title=\u0026#34;{{ .Rating }}\u0026#34;\u0026gt;{{ range .Star }}\u0026amp;nbsp;{{ if . }}\u0026lt;i class=\u0026#34;fas fa-star\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;{{ else }}\u0026lt;i class=\u0026#34;far fa-star\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;{{ end }}{{ end }}\u0026lt;/abbr\u0026gt;\u0026lt;/dd\u0026gt;{{ end }} \u0026lt;/dl\u0026gt; \u0026lt;p class=\u0026#34;description\u0026#34;\u0026gt;{{ .Description }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;powered-by\u0026#34;\u0026gt;reviewed by \u0026lt;a href=\u0026#39;#maker\u0026#39; class=\u0026#39;reviewer\u0026#39;\u0026gt;Spiegel\u0026lt;/a\u0026gt; on \u0026lt;abbr class=\u0026#34;dtreviewed\u0026#34; title=\u0026#34;{{ .Date }}\u0026#34;\u0026gt;{{ .Date }}\u0026lt;/abbr\u0026gt; (powered by {{ if .Book.Service.URL }}\u0026lt;a href=\u0026#34;{{ .Book.Service.URL }}\u0026#34;\u0026gt;{{ end }}{{ .Book.Service.Name }}{{ if .Book.Service.URL }}\u0026lt;/a\u0026gt;{{ end }})\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; テンプレート・ファイルを作成する際の参考にどうぞ。\n参考情報  Go 言語用 CLI プログラミング支援パッケージ Go 言語用エラーハンドリング・パッケージ Go 言語用青空文庫 API クライアント・パッケージ Go 言語用 openBD クライアント・パッケージ  "
    },
    {
      "title": "書籍データ取得ツール books-data v0.4.2 のリリース，他",
      "section": "release",
      "description": "機能的な変更は殆どないが Go 1.13 のリリースに併せて内部をいろいろ変更している。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/books-data-v0_4_2-is-released/",
      "published": "2019-09-08T06:22:41+00:00",
      "update": "2019-09-09T10:42:23+00:00",
      "content": " 書籍データ取得ツール books-data v0.4.2 をリリースした。\n Release v0.4.2 · spiegel-im-spiegel/books-data · GitHub  パッチバージョンが妙に進んでいるが気にしないように（笑）\n機能的な変更は殆どないが Go 1.13 のリリースに併せて内部をいろいろ変更している。 リファクタリングというやつである。\nそうそう。 設定ファイルの既定の置き場所を変更して XDG Base Directory に対応した。 詳しくは以下の記事を参照のこと。\n 書籍データ取得ツール books-data  他には openBD クライアント側のハンドリング・パッケージを自前のもの spiegel-im-spiegel/openbd-api に換装した。 spiegel-im-spiegel/aozora-api もバージョンアップしている。\n Go 言語用青空文庫 API クライアント・パッケージ Go 言語用 openBD クライアント・パッケージ  ブックマーク  Go 言語用エラーハンドリング・パッケージをリリースした spiegel-im-spiegel/gocli v0.10.1 のリリース  "
    },
    {
      "title": "Go 言語用 openBD クライアント・パッケージ",
      "section": "release",
      "description": "本パッケージは openBD が提供する書籍情報を取得できる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/openbd-api-package-for-golang/",
      "published": "2019-09-07T13:10:02+00:00",
      "update": "2019-09-08T01:17:12+00:00",
      "content": "  spiegel-im-spiegel/openbd-api: APIs for openBD by Golang  本パッケージは openBD へアクセスできる Go 言語用クライアント・パッケージだ。 openBD が提供する書籍情報を取得できる。\nなお spiegel-im-spiegel/openbd-api パッケージは Go 1.13 以上を要求する。 ご注意を。\n  \nインポート import \u0026#34;github.com/spiegel-im-spiegel/openbd-api\u0026#34; 書籍情報の取得 openBD は ISBN をキーとして書籍情報の検索ができる。 spiegel-im-spiegel/openbd-api パッケージでは以下のように記述する。\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/openbd-api\u0026#34; ) func main() { b, err := openbd.DefaultClient().LookupBooksRaw([]string{\u0026#34;9784274069321\u0026#34;}) if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } openbd.Client.LookupBooksRaw() 関数は，引数に複数の ISBN を指定することが可能で openBD から取得した結果（JSON 形式）をそのまま返す。\n$ go run sample.go | jq . [ { \u0026#34;onix\u0026#34;: { \u0026#34;RecordReference\u0026#34;: \u0026#34;9784274069321\u0026#34;, \u0026#34;NotificationType\u0026#34;: \u0026#34;03\u0026#34;, \u0026#34;ProductIdentifier\u0026#34;: { \u0026#34;ProductIDType\u0026#34;: \u0026#34;15\u0026#34;, \u0026#34;IDValue\u0026#34;: \u0026#34;9784274069321\u0026#34; }, \u0026#34;DescriptiveDetail\u0026#34;: { \u0026#34;ProductComposition\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;ProductForm\u0026#34;: \u0026#34;BZ\u0026#34;, \u0026#34;Measure\u0026#34;: [ { \u0026#34;MeasureType\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;Measurement\u0026#34;: \u0026#34;210\u0026#34;, \u0026#34;MeasureUnitCode\u0026#34;: \u0026#34;mm\u0026#34; }, { \u0026#34;MeasureType\u0026#34;: \u0026#34;02\u0026#34;, \u0026#34;Measurement\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;MeasureUnitCode\u0026#34;: \u0026#34;mm\u0026#34; } ], \u0026#34;TitleDetail\u0026#34;: { \u0026#34;TitleType\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;TitleElement\u0026#34;: { \u0026#34;TitleElementLevel\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;TitleText\u0026#34;: { \u0026#34;collationkey\u0026#34;: \u0026#34;リーン カイハツ ノ ゲンバ : カンバン ニ ヨル ダイキボ プロジェクト ノ ウンエイ\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;リーン開発の現場 : カンバンによる大規模プロジェクトの運営\u0026#34; } } }, \u0026#34;Contributor\u0026#34;: [ { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;A01\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;Kniberg, Henrik\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;A01\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;オーム社\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;A01\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;オーム社開発局\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;4\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;B06\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;市谷 聡啓\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;5\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;B06\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;藤原 大\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;6\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;B06\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;角谷 信太郎\u0026#34; } }, { \u0026#34;SequenceNumber\u0026#34;: \u0026#34;7\u0026#34;, \u0026#34;ContributorRole\u0026#34;: [ \u0026#34;A01\u0026#34; ], \u0026#34;PersonName\u0026#34;: { \u0026#34;content\u0026#34;: \u0026#34;クニバーグ ヘンリック\u0026#34; } } ], \u0026#34;Language\u0026#34;: [ { \u0026#34;LanguageRole\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;LanguageCode\u0026#34;: \u0026#34;jpn\u0026#34;, \u0026#34;CountryCode\u0026#34;: \u0026#34;JP\u0026#34; } ], \u0026#34;Extent\u0026#34;: [ { \u0026#34;ExtentType\u0026#34;: \u0026#34;11\u0026#34;, \u0026#34;ExtentValue\u0026#34;: \u0026#34;190\u0026#34;, \u0026#34;ExtentUnit\u0026#34;: \u0026#34;03\u0026#34; } ] }, \u0026#34;CollateralDetail\u0026#34;: { \u0026#34;TextContent\u0026#34;: [ { \u0026#34;TextType\u0026#34;: \u0026#34;03\u0026#34;, \u0026#34;ContentAudience\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;Text\u0026#34;: \u0026#34;官公庁の大規模システム開発における、カンバンシステムを軸にしたプロジェクト進行の様子を、著者の経験に基づいて描写。「リーンソフトウェア開発」を現場でどのように適用するかを直裁的に解説しています。\u0026#34; }, { \u0026#34;TextType\u0026#34;: \u0026#34;04\u0026#34;, \u0026#34;ContentAudience\u0026#34;: \u0026#34;00\u0026#34;, \u0026#34;Text\u0026#34;: \u0026#34;第1部 僕らのやり方を伝えよう(プロジェクトについて\\nチーム編成\\nデイリーカクテルパーティーに参加しよう\\nプロジェクトボード\\nカンバンボードをスケールさせる ほか)\\n第2部 テクニックを詳しく見る(アジャイルとリーンの概要\\nテスト自動化の戦略\\nプランニングポーカーによる見積り\\n因果関係図\\n最後に伝えたいこと)\u0026#34; } ], \u0026#34;SupportingResource\u0026#34;: [ { \u0026#34;ResourceContentType\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;ContentAudience\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;ResourceMode\u0026#34;: \u0026#34;03\u0026#34;, \u0026#34;ResourceVersion\u0026#34;: [ { \u0026#34;ResourceForm\u0026#34;: \u0026#34;02\u0026#34;, \u0026#34;ResourceVersionFeature\u0026#34;: [ { \u0026#34;ResourceVersionFeatureType\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;FeatureValue\u0026#34;: \u0026#34;D502\u0026#34; }, { \u0026#34;ResourceVersionFeatureType\u0026#34;: \u0026#34;04\u0026#34;, \u0026#34;FeatureValue\u0026#34;: \u0026#34;9784274069321.jpg\u0026#34; } ], \u0026#34;ResourceLink\u0026#34;: \u0026#34;https://cover.openbd.jp/9784274069321.jpg\u0026#34; } ] } ] }, \u0026#34;PublishingDetail\u0026#34;: { \u0026#34;Imprint\u0026#34;: { \u0026#34;ImprintIdentifier\u0026#34;: [ { \u0026#34;ImprintIDType\u0026#34;: \u0026#34;19\u0026#34;, \u0026#34;IDValue\u0026#34;: \u0026#34;274\u0026#34; } ], \u0026#34;ImprintName\u0026#34;: \u0026#34;オーム社\u0026#34; }, \u0026#34;PublishingDate\u0026#34;: [ { \u0026#34;PublishingDateRole\u0026#34;: \u0026#34;01\u0026#34;, \u0026#34;Date\u0026#34;: \u0026#34;\u0026#34; } ] }, \u0026#34;ProductSupply\u0026#34;: { \u0026#34;SupplyDetail\u0026#34;: { \u0026#34;ReturnsConditions\u0026#34;: { \u0026#34;ReturnsCodeType\u0026#34;: \u0026#34;04\u0026#34;, \u0026#34;ReturnsCode\u0026#34;: \u0026#34;02\u0026#34; }, \u0026#34;ProductAvailability\u0026#34;: \u0026#34;99\u0026#34; } } }, \u0026#34;hanmoto\u0026#34;: { \u0026#34;datecreated\u0026#34;: \u0026#34;2016-08-24 22:49:25\u0026#34;, \u0026#34;dateshuppan\u0026#34;: \u0026#34;2013-10\u0026#34;, \u0026#34;datemodified\u0026#34;: \u0026#34;2016-08-24 22:49:25\u0026#34; }, \u0026#34;summary\u0026#34;: { \u0026#34;isbn\u0026#34;: \u0026#34;9784274069321\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;リーン開発の現場 : カンバンによる大規模プロジェクトの運営\u0026#34;, \u0026#34;volume\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;series\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;publisher\u0026#34;: \u0026#34;オーム社\u0026#34;, \u0026#34;pubdate\u0026#34;: \u0026#34;2013-10\u0026#34;, \u0026#34;cover\u0026#34;: \u0026#34;https://cover.openbd.jp/9784274069321.jpg\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;Kniberg,Henrik／著 オーム社／著 オーム社開発局／著 市谷聡啓／翻訳 ほか\u0026#34; } } ] openbd.Client.LookupBooks() 関数を使うと結果を openbd.Book 構造体の配列で返す。\nbooks, err := openbd.DefaultClient().LookupBooks([]string{\u0026#34;9784274069321\u0026#34;}) openbd.Book 構造体の構成は以下の通り。\n//Book is entity class of book info. type Book struct { Onix Onix `json:\u0026#34;onix\u0026#34;` Hanmoto Hanmoto `json:\u0026#34;hanmoto\u0026#34;` Summary Summary `json:\u0026#34;summary\u0026#34;` } //Onix is entity class of JPRO-onix items type Onix struct { RecordReference string //ISBN code (key code) \tNotificationType string ProductIdentifier struct { ProductIDType string IDValue string //ISBN ? \t} DescriptiveDetail struct { ProductComposition string ProductForm string Measure []struct { MeasureType string Measurement string MeasureUnitCode string } `json:\u0026#34;,omitempty\u0026#34;` Collection struct { CollectionType string CollectionSequence *struct { CollectionSequenceType string `json:\u0026#34;,omitempty\u0026#34;` CollectionSequenceTypeName string `json:\u0026#34;,omitempty\u0026#34;` CollectionSequenceNumber string `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` TitleDetail *struct { TitleType string `json:\u0026#34;,omitempty\u0026#34;` TitleElement []struct { TitleElementLevel string TitleText struct { Content string `json:\u0026#34;content\u0026#34;` CollationKey string `json:\u0026#34;collationkey,omitempty\u0026#34;` } } `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` } TitleDetail struct { TitleType string TitleElement struct { TitleElementLevel string TitleText struct { Content string `json:\u0026#34;content\u0026#34;` Collationkey string `json:\u0026#34;collationkey,omitempty\u0026#34;` } } } Contributor []struct { SequenceNumber string ContributorRole []string `json:\u0026#34;,omitempty\u0026#34;` PersonName struct { Content string `json:\u0026#34;content\u0026#34;` Collationkey string `json:\u0026#34;collationkey,omitempty\u0026#34;` } BiographicalNote string `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` Language []struct { LanguageRole string LanguageCode string CountryCode string } `json:\u0026#34;,omitempty\u0026#34;` Extent []struct { ExtentType string ExtentValue string ExtentUnit string } `json:\u0026#34;,omitempty\u0026#34;` Subject []struct { SubjectSchemeIdentifier string SubjectCode string SubjectHeadingText string `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` Audience []struct { AudienceCodeType string AudienceCodeValue string } `json:\u0026#34;,omitempty\u0026#34;` } CollateralDetail *struct { TextContent []struct { TextType string ContentAudience string Text string } `json:\u0026#34;,omitempty\u0026#34;` SupportingResource []struct { ResourceContentType string ContentAudience string ResourceMode string ResourceVersion []struct { ResourceForm string ResourceVersionFeature []struct { ResourceVersionFeatureType string FeatureValue string } `json:\u0026#34;,omitempty\u0026#34;` ResourceLink string } `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` } `json:\u0026#34;,omitempty\u0026#34;` PublishingDetail struct { Imprint struct { ImprintIdentifier []struct { ImprintIDType string IDValue string } `json:\u0026#34;,omitempty\u0026#34;` ImprintName string } Publisher struct { PublisherIdentifier []struct { PublisherIDType string IDValue string } `json:\u0026#34;,omitempty\u0026#34;` PublishingRole string PublisherName string } PublishingDate []struct { Date Date PublishingDateRole string } `json:\u0026#34;,omitempty\u0026#34;` } ProductSupply struct { SupplyDetail struct { ReturnsConditions struct { ReturnsCodeType string ReturnsCode string } ProductAvailability string Price []struct { PriceType string CurrencyCode string PriceAmount string } `json:\u0026#34;,omitempty\u0026#34;` } } } //Hanmoto is entity class of Hanmoto dot com items type Hanmoto struct { DatePublished Date `json:\u0026#34;dateshuppan\u0026#34;` DateModified Date `json:\u0026#34;datemodified\u0026#34;` DateCreated Date `json:\u0026#34;datecreated\u0026#34;` DateReleased Date `json:\u0026#34;datekoukai\u0026#34;` IsLightNovel bool `json:\u0026#34;lanove,omitempty\u0026#34;` HasReview bool `json:\u0026#34;hasshohyo,omitempty\u0026#34;` Reviews []struct { Reviewer string `json:\u0026#34;reviewer\u0026#34;` Link string `json:\u0026#34;link\u0026#34;` DateAppearance Date `json:\u0026#34;appearance\u0026#34;` SourceKindID int `json:\u0026#34;kubun_id\u0026#34;` SourceID int `json:\u0026#34;source_id\u0026#34;` Source string `json:\u0026#34;source\u0026#34;` PaperType string `json:\u0026#34;choyukan\u0026#34;` PostUser string `json:\u0026#34;post_user\u0026#34;` Han string `json:\u0026#34;han\u0026#34;` Gou string `json:\u0026#34;gou\u0026#34;` } `json:\u0026#34;reviews,omitempty\u0026#34;` HasSample bool `json:\u0026#34;hastameshiyomi,omitempty\u0026#34;` } //Summary is entity class of summary data type Summary struct { ISBN string `json:\u0026#34;isbn\u0026#34;` Title string `json:\u0026#34;title\u0026#34;` Volume string `json:\u0026#34;volume\u0026#34;` Series string `json:\u0026#34;series\u0026#34;` Publisher string `json:\u0026#34;publisher\u0026#34;` PubDate Date `json:\u0026#34;pubdate\u0026#34;` Author string `json:\u0026#34;author\u0026#34;` Cover string `json:\u0026#34;cover\u0026#34;` } openbd.Book 構造体はこのままでは使い辛いので以下のヘルパ関数を用意した。 引数がないのでテンプレートでは値のように扱うことができる。\n openbd.Book.IsValid() bool openbd.Book.Id() string openbd.Book.ISBN() string openbd.Book.Title() string openbd.Book.SubTitle() string : 現在は空文字列のみ返す openbd.Book.SeriesTitle() string openbd.Book.Label() string openbd.Book.ImageURL() string openbd.Book.Authors() []string openbd.Book.Publisher() string openbd.Book.PublicationDate() openbd.Date openbd.Book.Description() string  Server および Client インスタンスの生成 openbd.Client インスタンスの生成は openbd.DefaultClient() 関数で簡単に行えるが，もう少し細かい制御もできる。\nopenBD サーバを指定する openbd.New() 関数で openbd.Server インスタンスを生成できるが，引数としてサーバを指定できる。\nserver := openbd.New( openbd.WithScheme(\u0026#34;https\u0026#34;), openbd.WithServerName(\u0026#34;api.example.com\u0026#34;), ) これで openBD サーバとして https://api.example.com を指定できた（実在しない URL なので注意）。\ncontext.Context および http.Client を指定する openbd.Server.CreateClient() 関数により openbd.Client インスタンスを生成できるが，引数として context.Context および http.Client インスタンスを指定する。\nclient := openbd.New( openbd.WithScheme(\u0026#34;https\u0026#34;), openbd.WithServerName(\u0026#34;api.example.com\u0026#34;), ).CreateClient( context.Background(), \u0026amp;http.Client{}, ) ちなみに openbd.DefaultClient() 関数は以下の記述と同等である。\nclient := openbd.New( openbd.WithScheme(\u0026#34;https\u0026#34;), openbd.WithServerName(\u0026#34;api.openbd.jp\u0026#34;), ).CreateClient( context.Background(), http.DefaultClient, ) 参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "Go 言語用青空文庫 API クライアント・パッケージ",
      "section": "release",
      "description": "本パッケージは青空文庫 API を通じて青空文庫に収録されている作品情報等を取得できる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/aozora-api-package-for-golang/",
      "published": "2019-09-07T13:10:02+00:00",
      "update": "2019-09-07T13:26:13+00:00",
      "content": "  spiegel-im-spiegel/aozora-api: APIs for Aozora-bunko RESTful Service by Golang  本パッケージは青空文庫 API へアクセスできる Go 言語用クライアント・パッケージだ。 API を通じて青空文庫に収録されている作品情報等を取得できる。\nなお spiegel-im-spiegel/aozora-api パッケージは Go 1.13 以上を要求する。 ご注意を。\n  \nインポート import \u0026#34;github.com/spiegel-im-spiegel/aozora-api\u0026#34; 簡単な使い方 作品情報の取得 たとえばタイトル名「天に積む宝」著者名「富田倫生」を検索キーとして青空文庫 API から作品情報を取得してみる。\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/aozora-api\u0026#34; ) func main() { b, err := aozora.DefaultClient().SearchBooksRaw( aozora.WithBookTitle(\u0026#34;/天に積む宝/\u0026#34;), aozora.WithBookAuthor(\u0026#34;富田倫生\u0026#34;), ) if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } 検索オプションは以下の関数と連動している。 これらの関数をaozora.Client.SearchBooksRaw() 関数の引数に指定する。\n   オプション名 対応する関数     title aozora.WithBookTitle(string)   author aozora.WithBookAuthor(string)   fields aozora.WithBookFields(string)1   limit aozora.WithBookLimit(int)   skip aozora.WithBookSkip(int)   after aozora.WithBookAfter(time.Time)    aozora.Client.SearchBooksRaw() 関数は API を通じて取得した結果（JSON 形式）をそのまま返す。\n$ go run sample.go | jq . [ { \u0026#34;book_id\u0026#34;: 59489, \u0026#34;title\u0026#34;: \u0026#34;「天に積む宝」のふやし方、へらし方\u0026#34;, \u0026#34;title_yomi\u0026#34;: \u0026#34;「てんにつむたから」のふやしかた、へらしかた\u0026#34;, \u0026#34;title_sort\u0026#34;: \u0026#34;てんにつむたからのふやしかたへらしかた\u0026#34;, \u0026#34;subtitle\u0026#34;: \u0026#34;著作権保護期間延長が青空文庫にもたらすもの\u0026#34;, \u0026#34;subtitle_yomi\u0026#34;: \u0026#34;ちょさくけんほごきかんえんちょうがあおぞらぶんこにもたらすもの\u0026#34;, \u0026#34;original_title\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;first_appearance\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;ndc_code\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;font_kana_type\u0026#34;: \u0026#34;新字新仮名\u0026#34;, \u0026#34;copyright\u0026#34;: true, \u0026#34;release_date\u0026#34;: \u0026#34;2019-01-01T00:00:00.000Z\u0026#34;, \u0026#34;last_modified\u0026#34;: \u0026#34;2018-12-24T00:00:00.000Z\u0026#34;, \u0026#34;card_url\u0026#34;: \u0026#34;https://www.aozora.gr.jp/cards/000055/card59489.html\u0026#34;, \u0026#34;base_book_1\u0026#34;: \u0026#34;インターネット図書館　青空文庫\u0026#34;, \u0026#34;base_book_1_publisher\u0026#34;: \u0026#34;はる書房\u0026#34;, \u0026#34;base_book_1_1st_edition\u0026#34;: \u0026#34;2005（平成17）年11月15日\u0026#34;, \u0026#34;base_book_1_edition_input\u0026#34;: \u0026#34;2005（平成17）年11月15日初版第1刷\u0026#34;, \u0026#34;base_book_1_edition_proofing\u0026#34;: \u0026#34;2005（平成17）年11月15日初版第1刷\u0026#34;, \u0026#34;base_book_1_parent\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_1_parent_publisher\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_1_parent_1st_edition\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_publisher\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_1st_edition\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_edition_input\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_edition_proofing\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_parent\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_parent_publisher\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;base_book_2_parent_1st_edition\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;input\u0026#34;: \u0026#34;富田晶子\u0026#34;, \u0026#34;proofing\u0026#34;: \u0026#34;雪森\u0026#34;, \u0026#34;text_url\u0026#34;: \u0026#34;https://www.aozora.gr.jp/cards/000055/files/59489_txt_66663.zip\u0026#34;, \u0026#34;text_last_modified\u0026#34;: \u0026#34;2018-12-24T00:00:00.000Z\u0026#34;, \u0026#34;text_encoding\u0026#34;: \u0026#34;ShiftJIS\u0026#34;, \u0026#34;text_charset\u0026#34;: \u0026#34;JIS X 0208\u0026#34;, \u0026#34;text_updated\u0026#34;: 0, \u0026#34;html_url\u0026#34;: \u0026#34;https://www.aozora.gr.jp/cards/000055/files/59489_66714.html\u0026#34;, \u0026#34;html_last_modified\u0026#34;: \u0026#34;2018-12-24T00:00:00.000Z\u0026#34;, \u0026#34;html_encoding\u0026#34;: \u0026#34;ShiftJIS\u0026#34;, \u0026#34;html_charset\u0026#34;: \u0026#34;JIS X 0208\u0026#34;, \u0026#34;html_updated\u0026#34;: 0, \u0026#34;authors\u0026#34;: [ { \u0026#34;person_id\u0026#34;: 55, \u0026#34;last_name\u0026#34;: \u0026#34;富田\u0026#34;, \u0026#34;first_name\u0026#34;: \u0026#34;倫生\u0026#34; } ] } ] 図書カード No. が分かっている場合は aozora.Client.LookupBookRaw() 関数で作品情報を取得できる。\nfunc main() { b, err := aozora.DefaultClient().LookupBookRaw(59489)  if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } aozora.Client.SearchBooks() または aozora.Client.LookupBook() 関数を使うと結果を aozora.Book 構造体で返す。\nbook, err := aozora.DefaultClient().LookupBook(59489) aozora.Book 構造体の構成は以下の通り。\n//Author is entity class of author and translator info. type Author struct { PersonID int `json:\u0026#34;person_id\u0026#34;` LastName string `json:\u0026#34;last_name\u0026#34;` FirstName string `json:\u0026#34;first_name\u0026#34;` } //Book is entity class of book info. type Book struct { BookID int `json:\u0026#34;book_id\u0026#34;` Title string `json:\u0026#34;title\u0026#34;` TitleYomi string `json:\u0026#34;title_yomi\u0026#34;` TitleSort string `json:\u0026#34;title_sort\u0026#34;` Subtitle string `json:\u0026#34;subtitle\u0026#34;` SubtitleYomi string `json:\u0026#34;subtitle_yomi\u0026#34;` OriginalTitle string `json:\u0026#34;original_title\u0026#34;` FirstAppearance string `json:\u0026#34;first_appearance\u0026#34;` NDCCode string `json:\u0026#34;ndc_code\u0026#34;` FontKanaType string `json:\u0026#34;font_kana_type\u0026#34;` Copyright bool `json:\u0026#34;copyright\u0026#34;` ReleaseDate Date `json:\u0026#34;release_date\u0026#34;` LastModified Date `json:\u0026#34;last_modified\u0026#34;` CardURL string `json:\u0026#34;card_url\u0026#34;` BaseBook1 string `json:\u0026#34;base_book_1\u0026#34;` BaseBookPublisher1 string `json:\u0026#34;base_book_1_publisher\u0026#34;` BaseBookFirstEdition1 string `json:\u0026#34;base_book_1_1st_edition\u0026#34;` BaseBookEditionInput1 string `json:\u0026#34;base_book_1_edition_input\u0026#34;` BaseBookEditionProofing1 string `json:\u0026#34;base_book_1_edition_proofing\u0026#34;` BaseBookParent1 string `json:\u0026#34;base_book_1_parent\u0026#34;` BaseBookParentPublisher1 string `json:\u0026#34;base_book_1_parent_publisher\u0026#34;` BaseBookParentFirstEdition1 string `json:\u0026#34;base_book_1_parent_1st_edition\u0026#34;` BaseBook2 string `json:\u0026#34;base_book_2\u0026#34;` BaseBookPublisher2 string `json:\u0026#34;base_book_2_publisher\u0026#34;` BaseBookFirstEdition2 string `json:\u0026#34;base_book_2_1st_edition\u0026#34;` BaseBookEditionInput2 string `json:\u0026#34;base_book_2_edition_input\u0026#34;` BaseBookEditionProofing2 string `json:\u0026#34;base_book_2_edition_proofing\u0026#34;` BaseBookParent2 string `json:\u0026#34;base_book_2_parent\u0026#34;` BaseBookParentPublisher2 string `json:\u0026#34;base_book_2_parent_publisher\u0026#34;` BaseBookParentFirstEdition2 string `json:\u0026#34;base_book_2_parent_1st_edition\u0026#34;` Input string `json:\u0026#34;input\u0026#34;` Proofing string `json:\u0026#34;proofing\u0026#34;` TextURL string `json:\u0026#34;text_url\u0026#34;` TextLastModified Date `json:\u0026#34;text_last_modified\u0026#34;` TextEncoding string `json:\u0026#34;text_encoding\u0026#34;` TextCharset string `json:\u0026#34;text_charset\u0026#34;` TextUpdated int `json:\u0026#34;text_updated\u0026#34;` HTMLURL string `json:\u0026#34;html_url\u0026#34;` HTMLLastModified Date `json:\u0026#34;html_last_modified\u0026#34;` HTMLEncoding string `json:\u0026#34;html_encoding\u0026#34;` HTMLCharset string `json:\u0026#34;html_charset\u0026#34;` HTMLUpdated int `json:\u0026#34;html_updated\u0026#34;` Translators []Author `json:\u0026#34;translators\u0026#34;` Authors []Author `json:\u0026#34;authors\u0026#34;` } 作家情報の取得 今度は作家名「富田倫生」を検索キーとして青空文庫 API から作家情報を取得してみる。\nfunc main() { b, err := aozora.DefaultClient().SearchPersonsRaw( aozora.WithPersonName(\u0026#34;富田倫生\u0026#34;), ) if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } 実行結果は以下の通り。\n$ go run sample.go | jq . [ { \u0026#34;person_id\u0026#34;: 55, \u0026#34;last_name\u0026#34;: \u0026#34;富田\u0026#34;, \u0026#34;first_name\u0026#34;: \u0026#34;倫生\u0026#34;, \u0026#34;last_name_yomi\u0026#34;: \u0026#34;とみた\u0026#34;, \u0026#34;first_name_yomi\u0026#34;: \u0026#34;みちお\u0026#34;, \u0026#34;last_name_sort\u0026#34;: \u0026#34;とみた\u0026#34;, \u0026#34;first_name_sort\u0026#34;: \u0026#34;みちお\u0026#34;, \u0026#34;last_name_roman\u0026#34;: \u0026#34;Tomita\u0026#34;, \u0026#34;first_name_roman\u0026#34;: \u0026#34;Michio\u0026#34;, \u0026#34;date_of_birth\u0026#34;: \u0026#34;1952-04-20\u0026#34;, \u0026#34;date_of_death\u0026#34;: \u0026#34;2013-08-16\u0026#34;, \u0026#34;author_copyright\u0026#34;: true } ] 作家 No. が分かっている場合は aozora.Client.LookupPersonRaw() 関数で作品情報を取得できる。\nfunc main() { b, err := aozora.DefaultClient().LookupPersonRaw(55)  if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } aozora.Client.SearchPersons() または aozora.Client.LookupPerson() 関数を使うと結果を aozora.Person 構造体で返す。\nperson, err := aozora.DefaultClient().LookupPerson(55) aozora.Person 構造体の構成は以下の通り。\n//Person is entity class of person info. type Person struct { PersonID int `json:\u0026#34;person_id\u0026#34;` LastName string `json:\u0026#34;last_name\u0026#34;` FirstName string `json:\u0026#34;first_name\u0026#34;` LastNameYomi string `json:\u0026#34;last_name_yomi\u0026#34;` FirstNameYomi string `json:\u0026#34;first_name_yomi\u0026#34;` LastNameSort string `json:\u0026#34;last_name_sort\u0026#34;` FirstNameSort string `json:\u0026#34;first_name_sort\u0026#34;` LastNameRoman string `json:\u0026#34;last_name_roman\u0026#34;` FirstNameRoman string `json:\u0026#34;first_name_roman\u0026#34;` DateOfBirth Date `json:\u0026#34;date_of_birth\u0026#34;` DateOfDeath Date `json:\u0026#34;date_of_death\u0026#34;` AuthorCopyright bool `json:\u0026#34;author_copyright\u0026#34;` } 工作員情報の取得 更に更に工作員名「雪森」を検索キーとして青空文庫 API から工作員情報を取得してみる。\nfunc main() { b, err := aozora.DefaultClient().SearchWorkersRaw( aozora.WithWorkerName(\u0026#34;é›ªæ£®\u0026#34;), ) if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } 実行結果は以下の通り。\n$ go run sample.go | jq . [ { \u0026#34;id\u0026#34;: 845, \u0026#34;name\u0026#34;: \u0026#34;雪森\u0026#34; } ] 工作員 No. が分かっている場合は aozora.Client.LookupWorkerRaw() 関数で作品情報を取得できる。\nfunc main() { b, err := aozora.DefaultClient().LookupWorkerRaw(845)  if err != nil { fmt.Println(err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } aozora.Client.SearchWorkers() または aozora.Client.LookupWorker() 関数を使うと結果を aozora.Worker 構造体で返す。\nperson, err := aozora.DefaultClient().LookupWorker(845) aozora.Worker 構造体の構成は以下の通り。\n//Worker is entity class of worker info. type Worker struct { WorkerID int `json:\u0026#34;id\u0026#34;` Name string `json:\u0026#34;name\u0026#34;` } Server および Client インスタンスの生成 aozora.Client インスタンスの生成は aozora.DefaultClient() 関数で簡単に行えるが，もう少し細かい制御もできる。\n青空文庫 API サーバを指定する aozora.New() 関数で aozora.Server インスタンスを生成できるが，引数としてサーバを指定できる。\nserver := aozora.New( aozora.WithScheme(\u0026#34;http\u0026#34;), aozora.WithServerName(\u0026#34;pubserver2.herokuapp.com\u0026#34;), ) これで青空文庫 API サーバとして http://pubserver2.herokuapp.com を指定できた。\ncontext.Context および http.Client を指定する aozora.Server.CreateClient() 関数により aozora.Client インスタンスを生成できるが，引数として context.Context および http.Client インスタンスを指定する。\nclient := aozora.New( aozora.WithScheme(\u0026#34;http\u0026#34;), aozora.WithServerName(\u0026#34;pubserver2.herokuapp.com\u0026#34;), ).CreateClient( context.Background(), \u0026amp;http.Client{}, ) ちなみに aozora.DefaultClient() 関数は以下の記述と同等である。\nclient := aozora.New( aozora.WithScheme(\u0026#34;http\u0026#34;), aozora.WithServerName(\u0026#34;www.aozorahack.net\u0026#34;), ).CreateClient( context.Background(), http.DefaultClient, ) ブックマーク  #aozorahack に関する覚え書き  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  インターネット図書館 青空文庫 野口 英司 はる書房 2005-11-01 単行本 4899840721 (ASIN), 9784899840725 (EAN) Rating\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  青空文庫の活動について紹介。作品を収録した DVD も付いてる！ 巻末に載っている富田倫生さんの文章は青空文庫に収録されている。\nreviewed by Spiegel on 2019-01-02 (powered by PA-API)\n  本の未来 (Ascii books) 富田 倫生 アスキー 単行本 4756117074 (ASIN), 9784756117076 (EAN) Rating\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  e-book の未来を予見する試みの書。あるいは本とコンピュータの関係について。青空文庫にも収録されている。\nreviewed by Spiegel on 2019-01-02 (powered by PA-API)\n  fields オプションは効いてない感じ？ [return]   "
    },
    {
      "title": "Go 言語用 CLI プログラミング支援パッケージ",
      "section": "release",
      "description": "このパッケージをそのまま使うことは想定しておらず，何らかのアレンジを加えた上で，それぞれの CLI ツール用に組み込むことを念頭に置いている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/gocli-package-for-golang/",
      "published": "2019-09-07T02:55:58+00:00",
      "update": "2019-09-07T03:43:51+00:00",
      "content": "  spiegel-im-spiegel/gocli: Minimal Packages for Command-Line Interface  本パッケージ gocli は Go 言語 で CLI (Command-Line Interface) を構成する際に必要になるであろう細々とした機能をまとめたライブラリである。 ただし，このパッケージをそのまま使うことは想定しておらず（そのまま使ってもいいけど）何らかのアレンジを加えた上で，それぞれの CLI ツール用に組み込むことを念頭に置いている。\nこのため gocli では Go コンパイラが提供する標準パッケージ以外の外部パッケージはなるべく使わないようにし，ライセンスも，あらゆる権利を放棄した CC0 を設定している。\nなお gocli パッケージは Go 1.13 以上を要求する。 ご注意を。\n  \n標準入出力と終了コード gocli/rwi パッケージは標準入出力をコンテキスト情報として格納する構造体を提供する。 また gocli/exitcode パッケージは CLI 終了時の終了コードを定義する。\n両者は以下のように使う。\npackage main import ( \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/exitcode\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/rwi\u0026#34; ) func run(ui *rwi.RWI) exitcode.ExitCode { ui.Outputln(\u0026#34;Hello world\u0026#34;) return exitcode.Normal } func main() { run(rwi.New( rwi.WithReader(os.Stdin), rwi.WithWriter(os.Stdout), rwi.WithErrorWriter(os.Stderr), )).Exit() } gocli/rwi パッケージを使うメリットはテストで発揮される。 たとえば上述の run() 関数をテストするのであれば\noutBuf := new(bytes.Buffer) outErrBuf := new(bytes.Buffer) code := run(rwi.New( rwi.WithWriter(outBuf), rwi.WithErrorWriter(outErrBuf), )) として実行結果を code, outBuf および outErrBuf から取り出し評価することができる。\nSIGNAL をハンドリングする gocli/signal パッケージは標準の context パッケージと組み合わせて SIGNAL のハンドリングを行う。 たとえば，こんな感じ\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/signal\u0026#34; ) func ticker(ctx context.Context) error { t := time.NewTicker(1 * time.Second) // 1 second cycle  defer t.Stop() for { select { case now := \u0026lt;-t.C: // ticker event  fmt.Println(now.Format(time.RFC3339)) case \u0026lt;-ctx.Done(): // cancel event from context  fmt.Println(\u0026#34;Stop ticker\u0026#34;) return ctx.Err() } } } func Run() error { errCh := make(chan error, 1) defer close(errCh) go func() { child, cancelChild := context.WithTimeout( signal.Context(context.Background(), os.Interrupt), // cancel event by SIGNAL  10*time.Second, // timeout after 10 seconds  ) defer cancelChild() errCh \u0026lt;- ticker(child) }() err := \u0026lt;-errCh fmt.Println(\u0026#34;Done\u0026#34;) return err } func main() { if err := Run(); err != nil { fmt.Fprintln(os.Stderr, err) return } } このコードでは signal.Context() 関数で指定した SIGNAL 用の context.Context インスタンスを生成している。 SIGNAL または親 context.Context インスタンスによるキャンセルイベントを受信した場合は，子 context.Context インスタンスにキャンセルが伝搬する。\ncontext パッケージを使ったキャンセルの伝搬については以下を参照のこと。\n time.Ticker で遊ぶ  ワイルドカードを含むファイルの検索 gocli/file パッケージを使ったファイル検索は標準の filepath.Glob() 関数を拡張する形で実装している。 こんな感じに使える。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/file\u0026#34; ) func main() { result := file.Glob(\u0026#34;**/*.[ch]\u0026#34;, nil) fmt.Println(result) // Output: \t// [testdata/include/source.h testdata/source.c] } file.Glob() 関数の第2引数には検索時の条件を設定できる。 こんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/file\u0026#34; ) func main() { result := file.Glob( \u0026#34;**/*.[ch]\u0026#34;, file.NewGlobOption(file.WithFlags(file.GlobStdFlags|file.GlobAbsolutePath))) fmt.Println(result) // Output: \t// [/home/username/work/gocli/file/testdata/include/source.h /home/username/work/gocli/file/testdata/source.c] } 指定できるフラグは以下の通り。\n//Operation flag in Glob() function. const ( GlobContainsFile GlobFlag = 1 \u0026lt;\u0026lt; iota GlobContainsDir GlobSeparatorSlash GlobAbsolutePath GlobStdFlags = GlobContainsFile | GlobContainsDir ) file.Glob() 関数の第2引数に nil をセットするか file.NewGlobOption() を引数なしで呼び出した場合は file.GlobStdFlags のみがセットされる。\ngocli/file パッケージはファイル操作の練習用に作ったもので，それなりには使えるとは思うが，正直に言って素朴すぎて効率はよくない。 実際に使うにはもう少しアレンジが必要になるだろう。\n設定ファイルのパスを取得する Go 1.13 から os.UserConfigDir() 関数が追加されたので，これを使って設定ファイルのパスを取得するパッケージ gocli/config を作ってみた。 こんな感じで使う。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gocli/config\u0026#34; ) func main() { path := config.Path(\u0026#34;app\u0026#34;, \u0026#34;config.json\u0026#34;) fmt.Println(path) // Output: \t// /home/username/.config/app/config.json } アプリケーション名を指定して設定用ディレクトリのパスを取得する config.Dir(appName string) 関数も用意した。\nos.UserConfigDir() 関数で取得したパスにアプリケーション名と設定ファイル名をくっ付けただけの簡単なお仕事である。 Go 1.13 では os.UserConfigDir() 関数は以下のように記述されている。\n// UserConfigDir returns the default root directory to use for user-specific // configuration data. Users should create their own application-specific // subdirectory within this one and use that. // // On Unix systems, it returns $XDG_CONFIG_HOME as specified by // https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html if // non-empty, else $HOME/.config. // On Darwin, it returns $HOME/Library/Application Support. // On Windows, it returns %AppData%. // On Plan 9, it returns $home/lib. // // If the location cannot be determined (for example, $HOME is not defined), // then it will return an error. func UserConfigDir() (string, error) { var dir string switch runtime.GOOS { case \u0026#34;windows\u0026#34;: dir = Getenv(\u0026#34;AppData\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;%AppData% is not defined\u0026#34;) } case \u0026#34;darwin\u0026#34;: dir = Getenv(\u0026#34;HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;$HOME is not defined\u0026#34;) } dir += \u0026#34;/Library/Application Support\u0026#34; case \u0026#34;plan9\u0026#34;: dir = Getenv(\u0026#34;home\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;$home is not defined\u0026#34;) } dir += \u0026#34;/lib\u0026#34; default: // Unix \tdir = Getenv(\u0026#34;XDG_CONFIG_HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { dir = Getenv(\u0026#34;HOME\u0026#34;) if dir == \u0026#34;\u0026#34; { return \u0026#34;\u0026#34;, errors.New(\u0026#34;neither $XDG_CONFIG_HOME nor $HOME are defined\u0026#34;) } dir += \u0026#34;/.config\u0026#34; } } return dir, nil } 参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    }
  ]
}
