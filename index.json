{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Web のコストは誰が支払うのか",
      "section": "remark",
      "description": "改めて思うのだが Web 2.0 最大の罪はそのコストを安易に他者へ「転嫁」してしまったことだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/who-pays-for-web-costs/",
      "published": "2025-03-11T05:39:34+00:00",
      "update": "2025-03-11T11:11:42+00:00",
      "content": "今月（2025-03）に入り Chrome 系のブラウザ拡張機能について Manifest-V2 廃止に基づく粛清がいよいよ始まるようだ？\nGoogle’s Chrome extension cull hits more uBlock Origin users | The Verge Google Chrome Disables uBlock Origin and Other Extensions | Extremetech 実際には Manifest-V2 の廃止までにはまだ猶予があり，どうやら Google 側が姑息な排除をしようとしているんじゃないかという話もある。\nGoogleが「uBlock Originのサポートは終了しました」とウソをついているとネットが騒然、広告ブロッカーを使い続ける方法はコレ - GIGAZINE 本当のところは分からないが（Chrome 使ってないので），今回の V2 から V3 への移行で（利用者から見て）最もインパクトがある拡張機能のひとつが uBlock Origin だろう。 uBlock Origin は Manifest-V2 の webRequest API 仕様に大きく依存していて，新しい Manifest-V3 の API では機能が制限されるらしい。\nuBlock Origin relies heavily on the webRequest API to block unwanted content before it loads. Under MV3, the webRequest API is limited, and extensions are encouraged to use the new declarativeNetRequest API instead. This new API allows for predefined rules but lacks some of the dynamic capabilities that uBlock Origin utilizes for advanced content blocking. via uBlock Origin - Free, open-source ad content blocker. Manifest-V3 でこの制限をうまく回避するる方法はないようで，以下の代替案が提案されている。\nContinue Using uBlock Origin on Firefox Use uBlock Origin Lite Switch to Browsers Committed to MV2 Support Explore Other Content Blocking Methods via uBlock Origin - Free, open-source ad content blocker. uBlock Origin Lite であれば Manifest-V3 ベースらしいので Chrome ユーザは取り敢えずこちらに移行する手はある。\n一方 Firefox は Manifest-V2 と Manifest-V3 の両方をサポートすると明言しているので，いっそ Firefox に乗り換える手もある。\nMozilla’s approach to Manifest V3: What’s different and why it matters for extension users | The Mozilla Blog ブラウザを乗り換えていいのであれば，もうひとつ Orion ブラウザに乗り換える手もある。 有料検索サービスの Kagi が提供している Orion ブラウザは広告ブロッキング機能を既定で備えていて，他にもプライバシー保護の観点から他のブラウザより有利であると主張している。\nPrivacy comparison Orion Safari Firefox Brave Chrome Zero telemetry by default ✅ ❎ ❎ ❎ ❎ Blocking 1st party ads by default ✅ ❎ ❎ ❎ ❎ Blocking 1st party trackers by default ✅ ❎ ❎ ❎ ❎ Blocking 3rd party ads by default ✅ ❎ ❎ ✅ ❎ Blocking 3rd party trackers by default ✅ ✅ ✅ ✅ ❎ via Orion Browser by Kagi 残念ながら Orion ブラウザは WebKit ベースのため，今のところ macOS および iOS/iPadOS しか対応していない。 しかし，昨今の情勢を見て Linux 版の開発に着手したようだ。\nWe\u0026rsquo;re thrilled to announce that development of Orion Browser for Linux has officially started! Our team is working hard to bring the same speed, privacy, and innovation that Mac users love to the Linux platform.\nThis is an ambitious project that we expect will take approximately one year to complete. Our target is to achieve feature parity with the current macOS version by March 2026.\nvia March 6th, 2025 - Orion Embarks on Linux Journey \u0026amp; Kagi Doggo Art Celebration 手元にある MacBook Air には既に導入しているが，今のところ不都合はない。 まぁ macOS のアプリケーションはあまり使わず Linux 環境での作業が殆どなのだが。 私は Linux 版を待ってます。\nOrion ブラウザには Orion+ ってのがあるそうで，一括で150USD払うか月5USD（年50USD）のサブスクリプションに加入することで RC 版の利用が可能になる他，フィードバックにも優先的に対応してもらえるらしい。 Kagi は有料検索サービスとこの Orion+ の収益で開発・運用を行っているようだ。\nその Kagi の検索サービスだが，現在は Professional プランを月ごとの支払いで運用している。 もうガッツリ使ってるよ。 検索周りの UX が優秀なのは言うまでもないが AI 絡みの機能（Translate, FastGPT1, Universal Summarizer）も便利に使っている。 なので，年単位の契約に切り替えてもいいかなぁ，と考え中ではある。 もしくは Assistant が使える Ultimate プランにするか。 いやでも私の場合 AI アシスタントは GitHub Copilot で足りてるからなぁ。\nKagi の中の人が Bluesky で書いていたが，ネット上で享受しているサービスなりプラットフォームなりのコストは誰が支払っているのか，って話だ。\n改めて思うのだが Web 2.0 最大の罪はそのコストを安易に（本来の利用者ではない）他者へ「転嫁」してしまったことだろう。\nそして今になって私達は「メタクソ化 (enshittification) 」という形で（文字通りの）ツケを支払っているわけだ。 広告モデルで実際にコストを支払ってるのは広告主なんだから，サービス側プラットフォーム側が広告主の利益を最大化するよう調整するのは当然と言える。\nかくしてGoogleはスパマーに敗北した » p2ptk[.]org Google検索を殺した男――Googleはいつ、どこでメタクソ化に舵を切ったのか » p2ptk[.]org だからといって「それ」を許容できるかと問われたら否と答えるけど。\n特に Web 上の広告はもはや好悪の問題ではなくセキュリティやプライバシーのリスクの問題になっている。\n広告ブロッカーは「嫌ならどうする？」の表明である » p2ptk[.]org 米国 FBI は広告ブロッカーを推奨している？ 「Google広告からの誘導が6割」との分析結果。より巧妙化し、高齢者を狙う「サポート詐欺」に注意！【被害事例に学ぶ、高齢者のためのデジタルリテラシー】 - INTERNET Watch たとえば Publickey のように，ポリシーを持って広告を管理しているサイトは少なく，大抵は Google 等の広告サービスが提供しているものを垂れ流してるだけの脆弱なサイトに見える。 まぁ，一番ダークなのは間違いなく Google 検索サービスのページだけど（笑）\nuBlock Origin などのツールは単に広告をブロックするツールというだけではなく，そのサイトの広告を許容できるか否かの決定権を，見ているユーザ側に取り返すという大切な手段である。 その上で私達は（広告モデルを含む）他者にコストを転嫁する仕組みから距離を置く必要があると思う。 タダならば何でもいいという世の中じゃなくなったってことかねぇ。\nそのビジネスモデルで本当に利用者は幸せになれるのか。 よくよく考えてリソース（お金とは限らない）を投入しないといけないし，私のようなビンボー人は幾つかサービスを諦めることも視野に入れないといけないかもしれない。\nブックマーク Kagi is Bringing the Orion Web Browser to Linux - OMG! Ubuntu アドテクによるターゲティングは「存亡に関わる脅威」である » p2ptk[.]org 大いなる力には何の責任も伴わなかった » p2ptk[.]org Chromeの変更にともない、グーグルが「すべてのデバイスを追跡」開始 | Forbes JAPAN 公式サイト（フォーブス ジャパン） 参考図書 はじめて学ぶ ビデオゲームの心理学 脳のはたらきとユーザー体験（UX） セリア ホデント (著), 山根 信二（監修） (著), 山根 信二 (翻訳), 成田 啓行 (翻訳) 福村出版 2022-12-15 (Release 2023-07-03) Kindle版 B0C9Z7KGRN (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版が出ている。ゲームデザイナやゲームエンジニアだけでなく，ソフトウェア・エンジニアは全員読むべき。あと，ゲーマーな人も読むといいよ。感想はこちら。\nreviewed by Spiegel on 2023-11-21 (powered by PA-APIv5)\nハッキング思考　強者はいかにしてルールを歪めるのか、それを正すにはどうしたらいいのか ブルース・シュナイアー (著), 高橋 聡 (翻訳) 日経BP 2023-10-12 (Release 2023-10-12) Kindle版 B0CK19L1HC (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版が出てた！\nreviewed by Spiegel on 2023-11-21 (powered by PA-APIv5)\nスパム[spam]:インターネットのダークサイド フィン・ブラントン (著), 生貝直人 (監修), 成原慧 (監修), 松浦俊輔 (翻訳) 河出書房新社 2015-12-25 単行本 430924744X (ASIN), 9784309247441 (EAN), 430924744X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; とりあえず読みづらい。修飾語が多すぎるよ。ギリシア神話かっての。\nreviewed by Spiegel on 2016-12-10 (powered by PA-APIv5)\nFastGPT は本当に簡易的な機能のみの提供で，単一の応答しか出来ないし LLM モデルの選択もできない。連続的な「会話」や LLM モデルの切り替え機能が欲しいのであれば Ultimate プラン（月25USD）に加入した上で Assistant 機能を利用する必要がある。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "春の海（お散歩カメラ 2025-03-09）",
      "section": "remark",
      "description": "終日のたりのたり哉",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/09-osanpo-camera/",
      "published": "2025-03-09T09:48:07+00:00",
      "update": "2025-03-09T09:48:39+00:00",
      "content": "いや，今日は近所を軽く1時間ほど走って終わらせる気だったのよ。 でも外に出たらピーカンに晴れてるの。 今朝の松江の最低気温はギリギリ氷点下。 最高気温が14℃と寒暖差が激しい。 しかもほぼ無風。 空を眺めながらちょっと考えて，午後から春の海を見に行くことにした。\nというわけで，私が自転車で行ける唯一の海水浴場である古浦海水浴場に到着。 春先なので殆ど人がいない。\n春の海 終日のたりのたりかな（古浦海水浴場） | Flickr 古浦海水浴場 | Flickr 海水は綺麗だった。 まだ海水浴客がいないからかな。 でも冬の間の漂着物が結構あって\n漂着物 | Flickr これは海開きの前の掃除が大変なんだろうなぁ，と思ったり（他人事）。\n海を見ながら少し休憩して\n休憩中 | Flickr 市内へ戻る。 久しぶりに松江城に行ってみようかと。 もしかしたら今日は大山が見れるかもしれない。\n大山 from 松江城 | Flickr おー。 見えるぞ。 写真だと分かりにくいが（これでも結構補正をかけている）肉眼だともう少しはっきり見える感じ。\n松江城定点観測はこんな感じ。\n今日の松江城 | Flickr このあと県立図書館へでも行こうと思ったのだが 2025-03-12 まで特別整理休館だった orz\nしょうがないので宍道湖を眺めながら帰宅した。\n今日の宍道湖 | Flickr 明日は楽しい月曜日！\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nENEMOTI(エネモチ) お試し6本セット(クルミ餅×2・塩餅×2・甘酒餅×2) 【sotoasoオリジナルセット トレイルランニング ランニング 自転車 ロードバイク エンデュランススポーツ 登山 お餅 補給食 おいしい】 Enemoti B08DFNBWBM (ASIN), 4589880507619 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 糖質補給をメインにしたエナジーバー。三種入ったお試し用。 ACTIVIKE の中の人がオススメしていたので買ってみた。吸収がゆっくりなパラチノース配合。オブラートで包んであるので直接手に持って食べれる。私の好みとしては クルミ餅＞塩餅＞甘酒餅 かな。甘酒餅は粘りが強くて顎が鍛えられる（笑）\nreviewed by Spiegel on 2025-01-16 (powered by PA-APIv5)\n与謝蕪村: 郷愁の詩人 (岩波文庫 緑 62-2) 萩原 朔太郎 (著) 岩波書店 1988-11-16 文庫 4003106229 (ASIN), 9784003106228 (EAN), 4003106229 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 萩原朔太郎による与謝蕪村研究。1933年から1936年に書かれたものをまとめたもので，同じものが青空文庫に収録されている。\nreviewed by Spiegel on 2025-03-09 (powered by PA-APIv5)\n晴る ヨルシカ (メインアーティスト) Universal Music LLC (Release 2024-01-05) MP3 ダウンロード B0CQS23YMR (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; アニメ「葬送のフリーレン」OP曲。 mora で高解像度版が買える。 YouTube の「歌ってみた」をいくつか聴いてオリジナルを買っておこうかなと。移動中にヘヴィローテーションしてる。\nreviewed by Spiegel on 2025-02-09 (powered by PA-APIv5)\n春の海〜宮城道雄作品集〜 砂崎知子、藤原道山 (メインアーティスト) Nippon Columbia Co., Ltd./NIPPONOPHONE 2007-12-19 (Release 2024-08-06) MP3 ダウンロード B0D9X16QY6 (ASIN) 今やお正月の定番曲「春の海」を含む箏の名曲が収録されている。 mora でロスレス版（CD相当の音質）が買える。\nreviewed by Spiegel on 2025-03-09 (powered by PA-APIv5)\n"
    },
    {
      "title": "浮世絵コレクション展に行ってきた（お散歩カメラ 2025-03-08）",
      "section": "remark",
      "description": "八雲温泉へ行こう / 浮世絵コレクション展に行ってきた / 久しぶりに宍道湖の夕日が見れた",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/08-osanpo-camera/",
      "published": "2025-03-08T13:32:18+00:00",
      "update": "2025-03-08T13:32:24+00:00",
      "content": "今日の松江市の最低気温は約2℃。 最高気温は約11℃で，お天気もよく風も弱め。 凍えるほど寒くはなく，暑くもなく，サイクリング日和。\nいや，今週\n【VTuber＆漫画家】儒烏風亭らでん、憧れのヤマザキマリ先生と対談する会（前編）【儒烏風亭らでん #ReGLOSS 】 - YouTube ってのが配信されてたんだけど，あんなん見たら温泉行きたくなるやろ！ まぁ，もとより天気がよければ温泉に行くつもりだったけどね。 それにしてもヤマザキマリさんってイケボなんですなー。\nちうわけで，今日もチャリンコでお出かけしましょう。\n八雲温泉へ行こう いつものように日吉の切通し経由で八雲温泉へ。 途中でバードウォッチングなどしながらのんびり移動。\n今日のバードウォッチング（日吉の切通し） | Flickr 早春の意宇川 | Flickr いつものように露天風呂にゆっくり浸かり\n八雲温泉上がりのコーヒー牛乳 | Flickr 木次乳業さん，いつもお世話になっています。 そのまま昼食。\nお昼は割子蕎麦（八雲温泉） | Flickr さて，お腹も落ち着いたことだし，市内へ移動しますか。\n浮世絵コレクション展に行ってきた 宍道湖を眺めながら島根県立美術館へ。\n今日の宍道湖（袖師地蔵） | Flickr 島根県立美術館 駐輪場 | Flickr 県立美術館は現在「平山郁夫展」をやっているが，そちらは1月に観に行ったので，今回はコレクション展を観に行った。今やってるのは\n水辺の展示室 第7期（2月 5日(水) ～ 3月17日(月) 展示室１） 西洋絵画・洋画 第3期 島根ゆかりの洋画家たち（1月15日(水) ～ 5月12日(月) 展示室１） 近世絵画・日本画 第7期（2月 5日(水) ～ 3月17日(月) 展示室１） 北斎コレクション 第10期（2月19日(水) ～ 3月24日(月) 展示室２） 原清の陶芸（11月20日(水) ～ 3月17日(月) 展示室３） 島根県立美術館 写真コレクションの30年（1月16日(木) ～ 4月14日(月) 展示室４） 木の魅力（1月23日(木) ～ 4月21日(月) 展示室５） の7つ。 これ全部見れて大人300円とか！\nお目当ては「北斎コレクション 第10期」。\n浮世絵コレクション展行ってきた | Flickr （コレクション展は写真撮影が許可されていなかったので，無料の戦利品を撮ってみた）\n一応展示室1から順番に観て回る。\nここのところ春先の水辺の風景が気になっている。 なんでかなぁ\u0026hellip; と「水辺の展示室」の作品を観ながら思ったのだが，春先って川の水量も多いし日差しも少しずつ強くなってるので妙にキラキラしいんだよな。 だから気になるのかもしれない。 「水辺の展示室」には近代の印象派の作品が多く展示されていてキラキラしい作品が多い（笑） あと昨年観た新版画展で初めて知った川瀬巴水さんの作品もあった。 思わず拝む。\n浮世絵に関しては，県立美術館には島根県購入分以外に新庄コレクションや永田コレクションといった多くの寄贈品がある。 作品保存の観点から年中展示されているわけではないが，今回は有名な「冨嶽三十六景 凱風快晴」（通称「赤富士」）が展示されているというので，ぜひ生で観たかったのだ。\nvia Red Fuji southern wind clear morning - 凱風快晴 - Wikipedia （こんな真っ赤っ赤じゃなかった。発行時期によって色合いが違うらしい）\n陶芸の原清さんって島根県の出身なんだな。 いわゆる人間国宝。 展示されている作品は全てご本人寄贈だった。 凄いなぁ\u0026hellip;\n「写真コレクション」で改めて森山大道さんの作品を眺める。 モノクロ写真って説得力が半端ないよなぁ。 カラー以上にごまかしが効かないし。 まぁ，私は下手の横好きのお散歩カメラの人なのでゆる〜く活動していきましょう。\nここまで展示室4で力尽きた。 「木の魅力」は今回はパスで。 4月の中頃まではやってるみたいなので，また行こう。\n久しぶりに宍道湖の夕日が見れた 一通り作品を眺めて気がついたら16時になっていた。\n今日は幸いなことに西の空が晴れている。 こりゃあ久しぶりに夕日が見れるかも。\nというわけで，いったんコメダ喫茶店まで退却し\n日没まで休憩 | Flickr 日の入り（18:09）30分前まで時間を潰す。\nその後撮影スポットに移動するとギャラリーが沢山いた。 アイドル？ アニメキャラ？ のアクスタと一緒に撮ってる人もいたり。\nアイドルと一緒 | Flickr アクスタってそうやって使うのかー\n以下がスマホ（Galaxy 端末）で撮った写真（トリミングしている）。\n今日の宍道湖（夕景） | Flickr こっちは Canon の望遠鏡コンデジで撮った写真。\n今日の宍道湖（夕景） | Flickr スマホのカメラって何故か異様に青が強調されるんよね。 たぶんアプリ側で補正をかけてるんだろうけど。 一方 Canon のコンデジは赤が綺麗。 というわけで，こんな感じの写真になった。\n私はスマホのカメラもコンデジもトイカメラのカテゴリだと思ってる。 トイカメラって面白いよね。\nでは続きをどうぞ。\n今日の宍道湖（日没） | Flickr 今日の宍道湖（日没） | Flickr 今日の宍道湖（日没） | Flickr 堪能した。 帰りますかね。 明日も晴れだ！\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nテルマエ・ロマエI (ビームコミックス) ヤマザキ マリ (著) KADOKAWA 2010-12-01 (Release 2012-09-01) Kindle版 B009727M6M (ASIN) 実はまだ読んでないんだよなー ポチっとくか\nreviewed by Spiegel on 2025-03-08 (powered by PA-APIv5)\n晴る ヨルシカ (メインアーティスト) Universal Music LLC (Release 2024-01-05) MP3 ダウンロード B0CQS23YMR (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; アニメ「葬送のフリーレン」OP曲。 mora で高解像度版が買える。 YouTube の「歌ってみた」をいくつか聴いてオリジナルを買っておこうかなと。移動中にヘヴィローテーションしてる。\nreviewed by Spiegel on 2025-02-09 (powered by PA-APIv5)\n"
    },
    {
      "title": "Typst における関数とルール",
      "section": "typst",
      "description": "関数の定義と呼び出し / 名前付き引数 / Show ルール / Set ルール / 文書ファイルを分割した際のルール設定",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/typst/7-function-and-rules/",
      "published": "2025-03-07T10:16:25+00:00",
      "update": "2025-03-07T11:31:08+00:00",
      "content": "そろそろ Typst の関数とルール設定について，そろそろちゃんと調べようと思って。 本当は「Typst に関する雑多な話」で軽く触れるだけにするつもりだったが，思ったより量があったので記事を立てることにした。\n関数の定義と呼び出し まずは一番簡単な関数を考えてみる。\n#let fnc(it) = { it }; これは引数をそのまま返すだけの関数である。 この関数の引数に \u0026quot;Hello\u0026quot; を渡して呼び出すと\n#fnc(\u0026#34;Hello\u0026#34;) 引数の内容がそのまま出力される。\n関数の定義と呼び出し (1) 引数には（出力可能なものであれば）なんでも渡せる。 数値を入れることもできるし，何なら関数を入れ子にしてもよい。\n#fnc(fnc(\u0026#34;Hello\u0026#34;)) もうひとつ。 Typst の関数呼び出しではコンテントブロック（角括弧 [ ... ] で囲まれる領域）を関数呼び出しの後ろに付けることができる。 これをコンテント引数（content argument）と呼ぶ。\n#fnc[Hello] コンテント引数（content argument）は呼び出された側では content 型の引数としてセットされる。 つまり #fnc(\u0026quot;Hello\u0026quot;) と #fnc[Hello] は（str と content の型の違い以外は）ほぼ同じ機能である。\nついでの話として，呼び出す側はコンテント引数を複数並べることができる。\n#fnc2[Hello][world] この場合，呼び出される側は以下のように定義する。\n#let fnc2(..it) = { it } #fnc2[Hello][world] このときの出力結果は以下の通り。\n関数の定義と呼び出し (2) it に arguments 型で受けているのが分かる。 arguments 型は pos メソッドで array 型に変換できる。\n名前付き引数 次は文字列を色付きで出力することを考えてみる。 関数定義は以下の通り。\n#let colorText(color: red, it) = { text(fill: color)[#it] } color: red は名前付き引数（named parameter）と呼ばれる。 名前付き引数には既定値がつく（上述のコードでは red が既定値）。 この関数の呼び出しは以下のように書く。\n#colorText[Hello] #colorText(color: blue)[world] 名前付き引数は省略可能で省略した場合は既定値になる。 もちろん\n#colorText(\u0026#34;Hello\u0026#34;) #colorText(color: blue, \u0026#34;world\u0026#34;) などと書くこともできる。 出力結果は同じで以下の通り：\n関数の定義と呼び出し (2) Show ルール show キーワードを使って指定した対象に対し show ルールを設定できる。\n#let colorText(color: red, it) = { text(fill: color)[#it] } #show heading: it =\u0026gt; colorText(color: blue, it) = Heading 1 == Heading 1.1 上のコードの it は show キーワードで指定した対象を無名関数のコンテント引数として渡したもの。 全ての関数で共通に用意されている with メソッドを使うことで以下のようにコンテント引数を省略できる。\n#let colorText(color: red, it) = { text(fill: color)[#it] } #show heading: colorText.with(color: blue) = Heading 1 == Heading 1.1 出力結果はいずれも同じでこんな感じ。\nShow ルール設定 (1) Show ルールの対象は（出力可能なものなら）なんでもよくて，たとえば\n#let colorText(color: red, it) = { text(fill: color)[#it] } #show \u0026#34;Hello\u0026#34;: colorText Hello World みたいな記述もできる。 なお，コンテント引数以外に引数がない（または省略できる）場合は，上のように関数名だけを指定できる。\nこのコードの出力結果は以下の通り：\nShow ルール設定 (2) Show ルールの対象には selector も指定できる。 たとえば where メソッドを使って以下のように記述できる。\n#let colorText(color: red, it) = { text(fill: color)[#it] } #show heading.where(level: 1).or(heading.where(level: 2)): colorText = Heading 1 == Heading 1.1 === Heading 1.1.1 出力結果は以下の通り：\nShow ルール設定 (3) Show ルールの対象がない場合，文書全体が対象となる。\n#let colorText(color: red, it) = { text(fill: color)[#it] } #show: colorText.with(color: blue) #lorem(40) ちなみに lorem は指定した単語数のランダムな文章（欧文1）を生成する関数である。\n出力結果は以下の通り：\nShow ルール設定 (4) Show ルールは逐次処理されるのか Show ルールがどのように効いてくるか試してみた。\nまずはこれ。\n#let colorText(color: red, it) = { text(fill: color)[#it] } = Heading 1 == Heading 1.1 #show heading: colorText = Heading 2 == Heading 2.1 出力結果は以下の通り：\nShow ルール設定 (1b) まぁ，これは予想通り。\n次はこれ。\n#let colorText(color: red, it) = { text(fill: color)[#it] } = Heading 1 == Heading 1.1 #show heading: colorText = Heading 2 == Heading 2.1 #show heading: it =\u0026gt; colorText(color: blue, it) = Heading 3 == Heading 3.1 希望としては 黒 → 赤 → 青 の順で変わってほしいのだが\u0026hellip;\nShow ルール設定 (1c) んー。 ひょっとして show ルールって遡って適用されるのだろうか。 外部パッケージを import したときに show ルールが衝突したら面倒なことになりそう。\nShow ルールの設計はちょっと気をつけないといけないかもしれない。\nSet ルール text や image あるいは heading や par などドキュメント要素に紐づく組込み関数は「要素関数（element function）」と言うそうな。 要素関数は set キーワードを使い set ルールで名前付き引数の既定値を変更することができる。\nSome functions are associated with elements like headings or tables. When called, these create an element of their respective kind. In contrast to normal functions, they can further be used in set rules, show rules, and selectors. via Function Type – Typst Documentation ドキュメントのルートで set ルールを指定すると，逐次処理で指定位置以降に適用される。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) 明朝体 #set text(font: \u0026#34;Noto Sans CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) ゴシック体 出力結果は以下の通り：\nSet ルール設定 (1) Show ルールの中で set ルールを指定した場合，その show ルールの中でのみ set ルールが適用される。\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #show heading: it =\u0026gt; { set text(font: \u0026#34;Noto Sans CJK JP\u0026#34;) it } = ゴシック体 明朝体 set キーワードのみの記述ならコンテント引数を省略して\n#set text(font: \u0026#34;Noto Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) #show heading: set text(font: \u0026#34;Noto Sans CJK JP\u0026#34;) = ゴシック体 明朝体 などと記述することもできる。\n出力結果はいずれも同じでこんな感じ。\nSet ルール設定 (2) なお let キーワードで定義したユーザ関数は要素関数ではないので set ルールは使えない。\n文書ファイルを分割した際のルール設定 文書ファイルを分割して import や include で読み込む場合，子ドキュメントで設定した set および show ルールは親ドキュメントには適用されないので注意（親ドキュメントから子ドキュメントへはルールが継承される）。 子ドキュメントで記述した set および show ルールを親ドキュメントに適用させるには（テンプレートで使う手法）ルールを記述した関数を import で読み込み，親ドキュメントの show ルールを使って関数を呼び出す。\n#let initFonts(font-name: \u0026#34;New Computer Modern\u0026#34;, body) = { set text( lang: \u0026#34;ja\u0026#34;, font: font-name, size: 10pt, ) body } 子ドキュメント #import \u0026#34;child.typ\u0026#34;: initFonts #show: it =\u0026gt; initFonts( font-name: \u0026#34;Noto Sans CJK JP\u0026#34;, it ) こんにちわ、世界！ 親ドキュメント (1) または with メソッドを使って\n#import \u0026#34;child.typ\u0026#34;: initFonts #show: initFonts.with( font-name: \u0026#34;Noto Sans CJK JP\u0026#34;, ) こんにちわ、世界！ 親ドキュメント (2) などとコンテント引数を省略できる。\nブックマーク ブックマークは「Typst に関するブックマーク」にてまとめています。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\n日本語の文を生成する roremu パッケージを公開されている方もいる。感謝！\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "もはや紙の本は贅沢品である",
      "section": "remark",
      "description": "今の本には2つの方向がある。ひとつは「読む本」でもうひとつは「遺す本」。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/paper-books-are-an-extravagance/",
      "published": "2025-03-04T03:56:18+00:00",
      "update": "2025-03-05T06:54:07+00:00",
      "content": "例によって Bluesky の TL を眺めてたら面白い記事を見かけた。\n本屋より大切なもの - by yu koseki - たよりない話 自身の話で恐縮だが，私は本屋が好きだった。 それはもう，大昔の履歴書の趣味の欄に「本屋巡り」と書くくらいには好きだった（今でもプロフィールにちょっと名残がある）。 過去形で書くということは，今はそうでもないということ。 ここ2,3年ではトイレ以外で本屋を利用してない気がする。 いや，職場用に本を買おうとして本屋に行ったんだけど，あまりのクズなラインナップに絶望したんだっけ。 以来，職場で買う本も Amazon で（会社のアカウントで）買ってもらっている。\n私が長く暮らしていた広島市は本屋天国みたいなところがあって，バブルの頃までは大小含めて様々な本屋が林立していた。 週末とか一日かけて10軒以上本屋さんをハシゴしてたりしてたよ。 バブルが弾けて小さい本屋はほぼ消滅したけど，それでも大型書店は（地方都市にしては）そこそこ残っている。\n松江市に帰郷 (かえ) って驚いたことのひとつは，子供の頃に通ってた本屋が根こそぎなくなってて，ほぼ今井書店一択になってたこと。 これで「本屋で本を買わない」ことに全く罪悪感がなくなった。 存在しないお店で本は買えない。\n7年前の引っ越しで大量の本を処分したのだが\n売却・廃棄予定の本。これで半分ほど。残りの半分の半分くらいは残したいと思ってるけど、まだ踏ん切りがつかない。ヘタレの自覚はある このときに痛烈に思ったのが「本は墓場に持っていけない」である。\nマンガやラノベは（竹本泉さんの作品以外は）紙の本を買わなくなった。 最近買った紙の本は『古代出雲の氏族と社会』だけど，これを買うのは勇気がいった（笑） つか，これくらいの本じゃないと紙では買わないし，紙の本自体めったに買わなくなった。 技術参考書は版元で PDF で買うし（Kindle ですらない）。\n本の関連で近年衝撃的だったのは yomoyomo さんの『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』が国会図書館に納本されたという2019年の記事。 私はあまりの衝撃にこんな記事を残した。\n少し前に「『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』が国会図書館に納本された」話があったが，残念ながら慧眼だったと言わざるを得ない。 まぁ「情報共有の未来」が「国会図書館に納本」とか皮肉 (スパイス) が効きすぎて目から汗が出てしまうが。 本の「史料」的価値より 今の本には2つの方向がある。 ひとつは「読む本」でもうひとつは「遺す本」。 オタクならそこに「布教する本」を加えるべきかもしれないが，きょうび「アルゴリズム」が個人の嗜好を支配する時代に於いて人による「布教」は効果が薄いかもしれない。\n「本の「史料」的価値」でも書いたが（特にネットにある）デジタル情報は失われやすい。 100年どころか10年だって保持できるか怪しいものである。 青空文庫（再来年で30周年か）や Flickr Foundation のような取り組みのほうが特殊なのである。 長く保存したいなら結局「紙の本」の形にするのが最も確実ということになる。 まぁ，アクセス性を無視するなら北極に埋める手もあるが（笑）\n「遺す本」ってのは出版社や作家あるいは文化政策の為政者が考えるべきことで，嗜好品・贅沢品として買うか私設図書館でも作るのなら別だが，その辺の個人がどうにかするような話ではない。\n一方で「読む本」に関しては，もう「本」の体裁をとる必然性すらなくなっている。 マンガだってケータイに特化した「タテ読み」が普通になってきてるし，小説サイトには書籍未満の作品が大量に溢れているし，今や大量になった Zenn 本にもお世話になっている。 VTuber が Minecraft で同人誌を売る時代だし1（笑）\n\u0026hellip;という状況になったとき「本屋」の立ち位置や意義って何？ というお気持ちで冒頭に紹介した記事に戻るわけだ。\nでもほぼ全ての本屋は、出版・取次と密接に結びつき、再販制度によって維持された、日本の出版システムの一端である。そして、そのシステムはもう誰が見てもうまくいっていない。だから結果として本屋が減っている。本屋を守れというのは、言い換えれば現在の出版システムを（多少の手直しはあったとしても）守れという話に聞こえるわけで、さて、本当にそれに意義があるのか、そもそもそんなことが可能なのか。 本屋より大切なものより だから、本屋活性化というのは問題の立てかたとして何重にもおかしくて、少なくとも出版システムをどう抜本的に改善するかという話をすべきだし、あるいは本屋のなくなっていく時代にどう本と出会うべきかという話をすべきだし、そもそもは人は情報とどう向き合うべきかという話をすべきである。 本屋より大切なものより 政治に疎い私は経産省による書店活性化なるものを初めて知ったのだが\n今回の課題の整理は、地方公共団体、出版業界、そして書店に足を運び、本を購入される国民の皆様が、こうした書店をめぐる課題を認識をしていただくことで、文化の接点、ひいては国力の拠点としての書店の新規出店や事業継続に繋がることを期待しています。\nまた、今回、書店振興プロジェクトチームが中心となって実施したヒアリング等により、書店をめぐる課題の整理を進めていますが、パブリックコメントを通じて改めて、国民の皆様の御意見を頂いたうえで、反映していきたいと考えています。\n「関係者から指摘された書店活性化のための課題（案）」を公表します （METI/経済産業省）より 昨年のカオスな総選挙のドサクサでそんなことしてたのか。 やりたい放題だな，経産省。\n「多様なコンテンツに触れる」とか「文化創造基盤」とか考えるなら，公共図書館とか博物館とか，それこそ青空文庫みたいなサービスとか色々と考えることがあるだろ。\nぶっちゃけこれって潰れつつある（営利企業としての）「本屋」を救済してくださいって話であって，本当は「本」の文化的側面など1ミリも考えてないよね。 まぁ，経産省らしいっちゃあらしいけど（笑）\nこういうピントの外れたことをねちねち捏ねくり回してるから出版社も取次も本屋も衰退してるんじゃないの？\n参考文献 古代出雲の氏族と社会 (47) (同成社古代史選書 47) 武廣 亮平 (著) 同成社 2024-03-11 単行本 4886219454 (ASIN), 9784886219459 (EAN), 4886219454 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「島根の歴史文化講座 2024」で講師をされた武廣亮平さんの著作。興味本位で買うには躊躇するお値段だし地元の県立図書館でも借りれるが，じっくり読みたいので買ってみた。著者の過去の論文を再構成した内容。記紀などの史料や過去の研究者の膨大な文献を整理した上で古代出雲についての考察を行う。\nreviewed by Spiegel on 2024-11-26 (powered by PA-APIv5)\n犬とハサミは使いよう (ファミ通文庫) 更伊 俊介 (著), 鍋島 テツヒロ (イラスト) KADOKAWA 2011-08-25 (Release 2012-09-07) Kindle版 B009IMAGYQ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 犬になっても本を読む！\nreviewed by Spiegel on 2015-04-26 (powered by PA-APIv5)\nもうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo (著) 達人出版会 2017-12-25 (Release 2019-03-02) デジタル書籍 infoshare2 (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; WirelessWire News 連載の書籍化。感想はこちら。祝 Kindle 化！\nreviewed by Spiegel on 2018-12-31\nブック・ウォーズ――デジタル革命と本の未来 ジョン・B・トンプソン (著), 久保美代子 (翻訳) みすず書房 2025-01-27 (Release 2025-01-27) Kindle版 B0DTK2DNXF (ASIN) Bluesky で版元が紹介されているのを見て衝動買いした。こちらの紹介記事も参考にどうぞ。これから読む。\nreviewed by Spiegel on 2025-03-05 (powered by PA-APIv5)\nそもそも日本の「同人市場」という特殊商慣行自体が日本の出版システムが壊れていることの傍証だよな。「VTuber が Minecraft で同人誌を売る話」を見て「そもそも同人活動ってこういうノリだったよなぁ」と遥か昔の学生時代を思い出していた。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Typst 練習用のリポジトリを作った，他",
      "section": "remark",
      "description": "Typst 練習用のリポジトリを作った / GitHub Copilot Pro に加入した",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/repository-for-practices-typst/",
      "published": "2025-03-03T11:52:58+00:00",
      "update": "2025-03-04T03:56:58+00:00",
      "content": "Typst 練習用のリポジトリを作った Typst のお勉強用に書いたコードをまとめたリポジトリを作った。\nGitHub - spiegel-im-spiegel/practices-typst: Typst による組版の練習 MIT-0 ライセンスで公開しているので，再利用等ご自由にどうぞ（再利用する価値があるかどうかは別として）。\n今後も思いついたことをチマチマ残していく予定。 ブログのほうは「Typst に関する雑多な話」を随時更新で書き足していくつもり。 これで Typst については一区切り付いたかな。\nGitHub Copilot Pro に加入した 今回 Typst で遊んでたら GitHub Copilot Free 版の制限いっぱいになってしまいまして。 10秒くらい考えて Pro 版に入ることにした。 とりあえず様子見で月 10USD ずつ払う。\nやっぱ本格的に使うならお金を払わんとダメか。\n主に VS Code でコーディング支援をしてもらってるが Typst と TypeScript で混乱してるのか，ウソの提案が多い。 大抵はコンパイルエラーになるので致命的ではないが。 ちゃんと統計をとってないけど体感で3割くらいしか正しくない感じ。 プロ野球選手なら打率3割でエース級だが，提案が7割使えないのはちょっと困る。 Go のコードならそんなに外れはないんだけどねぇ。\nCopilot に関してはローンチ当初から色々言われているが，最近でも\nThousands of exposed GitHub repositories, now private, can still be accessed through Copilot | TechCrunch GitHubで非公開にされたはずのリポジトリがMicrosoftのAIアシスタント「Copilot」を通じて公開されていたという指摘 - GIGAZINE みたいな話があって正直いまでもビミョーな気分なんだけど，なんだかんだと便利に使っている自分がいる。 生成 AI 周りはホンマ（かつての FinTech 流行時のように）山師みたいなのが多いのであまり深入りしないようにしているが，若い人が会議のテキスト起こしと議事録を作成するのに生成 AI を便利に使ってる話とか聞くと「もうそういう時代なんだなぁ」としみじみする。\nまぁ，年寄りの冷水なので聞き流してください（笑）\nブックマーク GitHub、あらゆるエディタやIDEとGitHub Copilotとの統合を可能にする「Copilot Language Server SDK」を一般公開|CodeZine（コードジン） GitHub for Beginners: How to get started with GitHub Copilot - The GitHub Blog 参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\n"
    },
    {
      "title": "Typst に関する雑多な話",
      "section": "typst",
      "description": "ここでは Typst に関する小ネタをまとめて挙げておく（随時更新）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/typst/x-miscellaneous/",
      "published": "2025-03-02T12:55:38+00:00",
      "update": "2025-03-07T10:16:41+00:00",
      "content": "ここでは Typst に関する小ネタをまとめて挙げておく（随時更新）。\nTypst をビルドする Typst は Windows であれば Winget， macOS なら Homebrew， Linux なら Snap または “Versions for typst” から直接取得できるが，これらの方法でインストールできない場合は Rust のビルド環境を導入して Typst をビルドする。\nとりあえず Linux プラットフォームで Rust ビルド環境をインストールするには以下のコマンドでいける1。\n$ curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh これで PATH の設定までやってくれる。 その後，以下のコマンドで Typst のビルドを行う。\n$ cargo install --locked typst-cli Rust ビルド環境を標準設定でインストールしているなら ~/.cargo/bin/ ディレクトリ（Linux の場合）に typst コマンドが出来ているはずである。 cargo コマンドが起動しているならこのディレクトリに PATH が通ってるはずなので，そのまま typst コマンドを実行できる。\n変数をコマンドライン引数で指定する Typst は compile 時に --input オプションでキーと値を与えることができる。 --input オプションは複数指定できる。\n$ typst compile --input key1=value1 --input key2=value2 sys-inputs.typ 設定したキー・値のペアは sys.inputs から取得することができる。\n#show raw: body =\u0026gt; { set text(font: ( ( name: \u0026#34;Inconsolata\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Sans CJK JP\u0026#34; )) body } #sys.inputs このコードに対し --input key1=value1 --input key2=value2 オプションを付けて compile すると。\n変数をコマンドライン引数で指定する などと連想配列（dictionary）の形で格納されていることが分かる。 なので，上の例であれば sys.inputs.key1 または sys.inputs.at(\u0026quot;key1\u0026quot;) で値 \u0026quot;value1\u0026quot; を取得できる（値は必ず文字列に解釈される）。 ただし sys.inputs.key3 のように --input オプションで指定していないキーを読もうとすると\n$ typst compile --input key1=value1 --input key2=value2 sys-inputs-1b.typ error: dictionary does not contain key \u0026#34;key3\u0026#34; ┌─ sys-inputs-1b.typ:12:12 │ 12 │ #sys.inputs.key3 │ ^^^^ という感じにコンパイルエラーになる。 厄介なことに VS Code の Tinymist Typst 拡張機能は，このような immediate なキーの記述に対してエラーを吐いてくれて，けっこう鬱陶しい。 回避策としては\n#let key3 = \u0026#34;\u0026#34; #if \u0026#34;key3\u0026#34; in sys.inputs { key3 = sys.inputs.at(\u0026#34;key3\u0026#34;) } #key3 などと記述すればいいようだ。 この場合 compile 処理自体は「正常終了」してしまうのがデメリットかな2。\nブックマーク ブックマークは「Typst に関するブックマーク」にてまとめています。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\nLinux の Rust ビルド環境には GCC も必要。 Ubuntu は GCC が既定で入ってないので， sudo apt build-essential で GCC を導入する。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n軽く調べてみたが Typst には exit や panic のようなプロセスを強制終了させる仕組みがない。 try-catch の例外処理もなく，当然 throw のようなものもない。たとえば処理中に（文法エラーや言語仕様上の致命的エラーではなく）ビジネスロジック上の問題があったときに，その問題をドキュメントとして出力することは可能だが，処理自体は「正常終了」してしまうため，プロセスを監視する側はエラーを感知できず出力結果を目視してはじめてエラーが起きていることが分かることになる。これはちょっと面白くない。【2025-03-07 追記】あれから少し勉強して assert 関数を使えばロジカルなエラーを検出したときに指定したメッセージを吐いてエラー終了できることが分かった。まじすんません 🙇 ただし，今回の例では assert 関数を使ってエラーハンドリングしようとしても，結局は Tinymist Typst 拡張機能がエラーを吐くので鬱陶しいことには変わりない。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Typst におけるデータと制御",
      "section": "typst",
      "description": "データと制御が分離しやすくコードが（比較的）書きやすいというのは Typst の利点だと思う。 ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/typst/6-data-and-control/",
      "published": "2025-03-02T12:46:52+00:00",
      "update": "2025-03-03T11:54:47+00:00",
      "content": "Typst は CSV や JSON などのテキストベースのデータ（ファイル）を読み込んで使うことができる。 簡単な例をいくつか挙げてみる。\nCSV データの読み込みと表示 以下の内容の CSV ファイルがあるとする。\n\u0026#34;日付\u0026#34;,\u0026#34;曜日\u0026#34;,\u0026#34;名称\u0026#34; \u0026#34;2025年5月3日\u0026#34;,\u0026#34;土\u0026#34;,\u0026#34;憲法記念日\u0026#34; \u0026#34;2025年5月4日\u0026#34;,\u0026#34;日\u0026#34;,\u0026#34;みどりの日\u0026#34; \u0026#34;2025年5月5日\u0026#34;,\u0026#34;月\u0026#34;,\u0026#34;こどもの日\u0026#34; \u0026#34;2025年5月6日\u0026#34;,\u0026#34;火\u0026#34;,\u0026#34;休日\u0026#34; これを読み込んで表にすることを考える。 Typst のコードはこんな感じ。\n#show raw: body =\u0026gt; { set text(font: ( ( name: \u0026#34;Inconsolata\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Sans CJK JP\u0026#34; )) body } #let holidays = csv( \u0026#34;./holidays.csv\u0026#34;, delimiter: \u0026#34;,\u0026#34;, row-type: dictionary, ) #holidays フォントの指定については今回はスルーで1（笑） CSV データの読み込みには raw 関数を使う。 今回のように1行目がヘッダ情報になっている場合は row-type に dictionary を指定する。 ヘッダ情報がない場合は既定の array でOK。\nこれを PDF に出力すると以下のような内容になる。\nCSV データの読み込み 見ての通り連想配列（dictionary）の配列（array）という構造になっている。\n次にこれをヘッダ情報とデータに分離する。 Typst のコードはこんな感じ。\n#show raw: body =\u0026gt; { set text(font: ( ( name: \u0026#34;Inconsolata\u0026#34;, covers: \u0026#34;latin-in-cjk\u0026#34;, ), \u0026#34;Noto Sans CJK JP\u0026#34; )) body } #let holidays = csv( \u0026#34;./holidays.csv\u0026#34;, delimiter: \u0026#34;,\u0026#34;, row-type: dictionary, ) #let header = holidays.first().keys() #let data = holidays.map(holiday =\u0026gt; holiday.values()) #header #data PDF への出力結果は以下の通り。\nヘッダとデータを分離 data は2次元配列になっている点に注意。 一応，元データの並び順のままヘッダ情報もデータも取れるんだね。 array にはコンテナ操作ではお馴染みの filter, map, fold といったメソッドが使える。 ありがたや。\nこれで CSV データは取れたので table へ展開してみる。\n#set text(font: \u0026#34;NOTO Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) //関数定義 #let tableOfHolidays(path) = { let holidays = csv( //CSV ファイルの読み込み path, delimiter: \u0026#34;,\u0026#34;, row-type: dictionary, ) if holidays.len() \u0026gt; 0 { //データがある場合のみテーブルを表示 let header = holidays.first().keys() //ヘッダ情報の抽出 table( columns: header.len(), //ヘッダ情報の要素数 align: header.map(it =\u0026gt; { if it == \u0026#34;日付\u0026#34; { right } else if it == \u0026#34;曜日\u0026#34; { center } else { left } } ), //ヘッダ情報の名前によって文字列の寄せを設定 fill: (x, y) =\u0026gt; if y == 0 { green.lighten(80%) }, //ヘッダ部の背景色を設定 table.header(..header.map(it =\u0026gt; { set text(font: \u0026#34;NOTO Sans CJK JP\u0026#34;, weight: \u0026#34;bold\u0026#34;) it })), //ヘッダ情報，文字コードも併せて設定している ..holidays.map(holiday =\u0026gt; holiday.values()).flatten() //データを一次元のデータの並びに展開 ) } } //CSV ファイルの読み込んでテーブルを表示 #tableOfHolidays(\u0026#34;./holidays.csv\u0026#34;) まず tableOfHolidays 関数を定義して CSV ファイルへのパスを引数とする（CSV 形式の文字列でも可）。 tableOfHolidays 関数内では CSV ファイルからデータを取得して table へ展開している。 最後に tableOfHolidays 関数に CSV ファイルへのパスを渡して実行する。\n配列に対する flatten 関数は多次元配列を一次元配列に展開する。\n配列の頭に付いている .. は配列を要素の並びに展開する。 関数の引数で min(..nums) みたいな感じでよく使われる。\nあとはヘッダ部の装飾のためにごちゃごちゃ書いているが，詳細は割愛する。 そんなもんと思って眺めていただければ（笑）\nPDF への出力結果は以下の通り。\nCSV からテーブル生成 まぁ，こんなもんかな。\nJSON データを読み込んでカレンダーを作ろう もうひとつ。 練習問題としてカレンダーを作ってみる。\nTypst には日時情報を操作する型として datetime があるのだが，今回は「外部データを読み込んで使う」のが目的なので使わない。\nある月のカレンダーを組む際に必要な情報としては以下のものがあればいいだろう。\n年 月 月初日の曜日（0 〜 6， 0 が日曜日） 月の最終日 datetime では「月の最終日」を取得するのが面倒くさいんだよな2。 愚痴はともかく，まずは #let calendar(year, month, first_weekday, lastday) = { ... } という関数を定義してみる。\n#set text(font: \u0026#34;NOTO Serif CJK JP\u0026#34;, lang: \u0026#34;ja\u0026#34;) //カレンダーを作成 #let calendar(year, month, first_weekday, lastday) = { let days = () let i = 0 while i \u0026lt; first_weekday { //初日の曜日まで空白を追加 days.push(\u0026#34;\u0026#34;) i = i + 1 } days = days + range(1, lastday + 1).map(day =\u0026gt; { //日付を追加 [#day] }) //カレンダーを作成 table( stroke: (x, y) =\u0026gt; if y == 1 {//罫線を設定 (bottom: 0.7pt + black) }, align: (x, y) =\u0026gt; ( //文字の位置を設定 if y \u0026gt; 1 { right } else { center } ), columns: 7, //列数を設定 table.header( //ヘッダーを設定 table.cell( //年月を設定 colspan: 7, [ #set text(font: \u0026#34;NOTO Sans CJK JP\u0026#34;, weight: \u0026#34;bold\u0026#34;) #year 年 #month 月 ] ), ..(text(red)[日], [月], [火], [水], [木], [金], text(blue)[土]).map(it =\u0026gt; { //曜日を設定 set text(font: \u0026#34;NOTO Sans CJK JP\u0026#34;, weight: \u0026#34;bold\u0026#34;) it }) ), ..days.enumerate(start:0).map(it =\u0026gt; { if calc.rem(it.at(0), 7) == 0 { //日曜日の場合 table.cell( [ #set text(red) #it.at(1) ] ) } else if calc.rem(it.at(0), 7) == 6 { //土曜日の場合 table.cell( [ #set text(blue) #it.at(1) ] ) } else { //その他の場合 table.cell( [#it.at(1)] ) } }), ) } #calendar(2025, 5, 4, 31) //2025年5月のカレンダーを表示 実際に曜日を考慮した日付情報を生成している部分を強調している。 他はほぼテーブルの装飾のためのコードである。 最後の行で具体的な値を与えて calendar 関数を呼び出しカレンダーを表示している。\nこれの組版結果は以下の通り。\nカレンダーを生成（2025年5月） んー。 こんなもんかな。\n次は1月から12月までの年間カレンダーを作ってみよう。\n要は作成した calendar 関数を12回呼び出せばいいのだが，必要な情報をいちいち手入力するのも不毛なので，必要なデータを JSON ファイルから取得するよう変更する。 JSON ファイルの作成は Go で以下のように組んでみた。\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; ) // Month represents a calendar month with its associated year, month number, // the first weekday of the month, and the last day of the month. // Year is the year of the month. // Month is the month number (1-12). // FirstWeekday is the weekday of the first day of the month (0-6, where 0 is Sunday). // Lastday is the last day of the month. type Month struct { Year int `json:\u0026#34;year\u0026#34;` Month int `json:\u0026#34;month\u0026#34;` FirstWeekday int `json:\u0026#34;first_weekday\u0026#34;` Lastday int `json:\u0026#34;lastday\u0026#34;` } func main() { year := 2025 months := make([]Month, 0, 12) for month := 1; month \u0026lt;= 12; month++ { m := Month{ Year: year, Month: month, FirstWeekday: int(time.Date(year, time.Month(month), 1, 0, 0, 0, 0, time.UTC).Weekday()), Lastday: time.Date(year, time.Month(month+1), 0, 0, 0, 0, 0, time.UTC).Day(), } months = append(months, m) } b, err := json.Marshal(months) if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(string(b)) } このコードの実行結果は以下の通り（途中を端折っている）。\n$ go run months.go | jq . [ { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 1, \u0026#34;first_weekday\u0026#34;: 3, \u0026#34;lastday\u0026#34;: 31 }, { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 2, \u0026#34;first_weekday\u0026#34;: 6, \u0026#34;lastday\u0026#34;: 28 }, ... { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 12, \u0026#34;first_weekday\u0026#34;: 1, \u0026#34;lastday\u0026#34;: 31 } ] この出力を months.json ファイルにリダイレクトすればOK。\nTypst のコードについては calendar 関数を呼び出してる部分を以下のように書き換える。\n#{ let calendars = () for month in json(\u0026#34;./months.json\u0026#34;) { //月ごとにカレンダーを作成 calendars.push(calendar(month.year, month.month, month.first_weekday, month.lastday)) } //カレンダーを3列×4行で表示 grid( stroke: none, gutter: 0.5em, columns: (1fr, 1fr, 1fr), rows: (1fr, 1fr, 1fr, 1fr), ..calendars, ) } ここでは table ではなく grid を使っている。 機能的には両者に殆ど違いはないが，ページ内をいくつか仕切って配置するという用途であれば grid を使ったほうがいいだろうか。\n組版結果は以下の通り。\n年間カレンダーを生成（2025年） 次。 この年間カレンダーに対して祝日・休日の日に色を付けてみよう。\n祝日・休日データの収集についても Go で以下のコードを組んでみる。\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/goark/koyomi\u0026#34; \u0026#34;github.com/goark/koyomi/value\u0026#34; ) // Holiday represents a holiday with its date and title. // Year is the year of the holiday. // Month is the month of the holiday (1-12). // Day is the day of the holiday (1-31). // Weekday is the day of the week of the holiday. // Title is the name or description of the holiday. type Holiday struct { Year int `json:\u0026#34;year\u0026#34;` Month int `json:\u0026#34;month\u0026#34;` Day int `json:\u0026#34;day\u0026#34;` Weekday time.Weekday `json:\u0026#34;weekday\u0026#34;` Title string `json:\u0026#34;title\u0026#34;` } func main() { start, _ := value.DateFrom(\u0026#34;2025-01-01\u0026#34;) end, _ := value.DateFrom(\u0026#34;2025-12-31\u0026#34;) td, err := os.MkdirTemp(os.TempDir(), \u0026#34;blog\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer func() { _ = os.RemoveAll(td) }() k, err := koyomi.NewSource( koyomi.WithCalendarID(koyomi.Holiday), koyomi.WithStartDate(start), koyomi.WithEndDate(end), koyomi.WithTempDir(td), ).Get() if err != nil { fmt.Fprintln(os.Stderr, err) return } holidays := make([]Holiday, 0, len(k.Events())) for _, e := range k.Events() { holidays = append(holidays, Holiday{ Year: e.Date.Year(), Month: int(e.Date.Month()), Day: e.Date.Day(), Weekday: e.Date.Weekday(), Title: e.Title, }) } b, err := json.Marshal(holidays) if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(string(b)) } 祝日・休日データの取得は拙作 github.com/goark/koyomi パッケージを使って国立天文台から取得している。\nこのコードの実行結果は以下の通り（途中を端折っている）。\n$ go run holidays.go | jq . [ { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 1, \u0026#34;day\u0026#34;: 1, \u0026#34;weekday\u0026#34;: 3, \u0026#34;title\u0026#34;: \u0026#34;元日\u0026#34; }, { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 1, \u0026#34;day\u0026#34;: 13, \u0026#34;weekday\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;成人の日\u0026#34; }, ... { \u0026#34;year\u0026#34;: 2025, \u0026#34;month\u0026#34;: 11, \u0026#34;day\u0026#34;: 24, \u0026#34;weekday\u0026#34;: 1, \u0026#34;title\u0026#34;: \u0026#34;休日\u0026#34; } ] この出力を holidays.json ファイルにリダイレクトすればOK。\nTypst のコードについては calendar 関数周りを以下のように書き換える。\n//祝日・休日の取得 #let holidays = json(\u0026#34;./holidays.json\u0026#34;) //指定した年月日が祝日・休日かどうかを判定 #let containHoliday(year, month, day) = { holidays.find(holiday =\u0026gt; { holiday.year == year and holiday.month == month and holiday.day == day }) != none } //カレンダーを作成 #let calendar(year, month, first_weekday, lastday) = { let days = () let i = 0 while i \u0026lt; first_weekday { //初日の曜日まで空白を追加 days.push(\u0026#34;\u0026#34;) i = i + 1 } days = days + range(1, lastday + 1).map(day =\u0026gt; { //日付を追加 [#day] }) //カレンダーを作成 table( stroke: (x, y) =\u0026gt; if y == 1 {//罫線を設定 (bottom: 0.7pt + black) }, align: (x, y) =\u0026gt; ( //文字の位置を設定 if y \u0026gt; 1 { right } else { center } ), columns: 7, //列数を設定 table.header( //ヘッダーを設定 table.cell( //年月を設定 colspan: 7, [ #set text(font: \u0026#34;NOTO Sans CJK JP\u0026#34;, weight: \u0026#34;bold\u0026#34;) #year 年 #month 月 ] ), ..(text(red)[日], [月], [火], [水], [木], [金], text(blue)[土]).map(it =\u0026gt; { //曜日を設定 set text(font: \u0026#34;NOTO Sans CJK JP\u0026#34;, weight: \u0026#34;bold\u0026#34;) it }) ), ..days.enumerate(start:0).map(it =\u0026gt; { let day = it.at(0)-first_weekday+1 //日付 let hflag = day \u0026gt; 0 and day \u0026lt;= lastday and containHoliday(year, month, day) //祝日・休日かどうか if calc.rem(it.at(0), 7) == 0 { //日曜日の場合 if hflag { //祝日・休日の場合 table.cell( fill: red.lighten(90%), [ #set text(red) #it.at(1) ] ) } else { //祝日・休日でない場合 table.cell( [ #set text(red) #it.at(1) ] ) } } else if calc.rem(it.at(0), 7) == 6 { //土曜日の場合 if hflag { //祝日・休日の場合 table.cell( fill: red.lighten(90%), [ #set text(blue) #it.at(1) ] ) } else { //祝日・休日でない場合 table.cell( [ #set text(blue) #it.at(1) ] ) } } else { //その他の場合 if hflag { //祝日・休日の場合 table.cell( fill: red.lighten(90%), [#it.at(1)], ) } else { //祝日・休日でない場合 table.cell( [#it.at(1)], ) } } }), ) } 組版結果は以下の通り。\n年間カレンダーを生成（2025年） こんな感じで Typst のコードモードには得手も不得手もあるが，ある程度データを整えて与えてあげればそこそこの制御ができそうである。 ぶっちゃけ $\\mathrm{\\TeX}$/$\\mathrm{\\LaTeX}$ のマクロは触る気にもならないが Typst のコードモードは今どきのスクリプト言語が操れる人なら違和感少なくイケそうな気がする。\nデータファイルをコマンドラインで指定する 前節でつくった年間カレンダーはデータファイル名をコードに埋め込んでいるが，これをコマンドラインで指定できるようにしてみる。\nTypst コード側は sys を使って以下のようにコマンドラインの情報を読み込むように書き換える。\n//祝日・休日の取得 #let hfile = \u0026#34;./holidays.json\u0026#34; #if \u0026#34;holidays\u0026#34; in sys.inputs { hfile = sys.inputs.at(\u0026#34;holidays\u0026#34;) } #let holidays = json(hfile) calendar 関数は変更がないので割愛する。\n#{ let months = \u0026#34;./months.json\u0026#34; if \u0026#34;months\u0026#34; in sys.inputs { months = sys.inputs.at(\u0026#34;months\u0026#34;) } let calendars = () for month in json(months) { //月ごとにカレンダーを作成 calendars.push(calendar(month.year, month.month, month.first_weekday, month.lastday)) } //カレンダーを3列×4行で表示 grid( stroke: none, gutter: 0.5em, columns: (1fr, 1fr, 1fr), rows: (1fr, 1fr, 1fr, 1fr), ..calendars, ) } 一方，コマンドライン側は以下のように指定する。\n$ typst compile --input holidays=holidays2025.json --input months=months2025.json calendar5.typ これで holidays.json や months.json ではなく holidays2025.json や months2025.json を読み込む。 --input オプションで指定しない場合はデフォルトのファイル名を使う。\nコマンドラインで変数を指定する方法については「変数をコマンドライン引数で指定する」で少し詳しく紹介している。\n余談だが 今回も VS Code 上で作業しているのだが，コーディングに関しては GitHub Copilot に大変お世話になっている。 Go のコードに関してはほぼ完璧に働いてくれるのだが， Typst のコードに関しては，どうも TypeScript と混乱してるっぽく，しょっちゅう嘘をついてくれるのが困りものである（笑）\nデータと制御が分離しやすくコードが（比較的）書きやすいというのは Typst の利点だと思う。 これなら業務にも組み込みやすいのではないだろうか。\nブックマーク ブックマークは「Typst に関するブックマーク」にてまとめています。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\nプログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。と思ったら絶版状態らしい（2025-01 現在）。復刊を望む！\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元のデジタル版を購入。 Go で躓きやすい点を解説していくのが最初の動機らしい。「◯◯するには」を調べる際にこの本を調べるといいかも。\nreviewed by Spiegel on 2022-10-26 (powered by PA-APIv5)\nデータのダンプ表示時のフォント指定については「Typst のドキュメント要素」の raw の説明を参照のこと。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\ndatetime を使ってカレンダーを生成するバージョンも置いておく。詳しい説明は割愛するが「月の最終日」は2月以外固定なので，固定のテーブルを作って，グレゴリオ暦の閏年ルールで閏年か否かを判定して2月の最終日を調整している。さして面倒でもなかったか（笑）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "お散歩カメラ 2025-03-01",
      "section": "remark",
      "description": "早春の景色を見に行こう",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/03/01-osanpo-camera/",
      "published": "2025-03-01T11:46:39+00:00",
      "update": "2025-03-01T11:48:48+00:00",
      "content": "2月も逃げちゃいましたねぇ。 もう3月っスよ。\n雨水（2025-02-18）の頃は雪が積もるくらい寒かったのに，今週に入ってからは晴天続き。 でも明日からまた雨みたいなので，自転車で出かけるなら今日！\n今朝の松江の最低気温は2℃くらいだったけど，最高気温は19℃まで上がってしまった。 完全に服のチョイスを間違えたよ。 ミドルウェアは薄手のものでよかったしグローブも春秋用にすべきだった orz\n久しぶり八雲温泉 八雲温泉というか熊野大社のある八雲町（昔でいう八雲村）は雪が積もりやすい地域で，しばらく避けてたのさ。 まぁでも流石に融けとるやろということで，本当に久しぶりに八雲温泉に出かけてみた。\nその前に午前中に用事を済ませて丸亀製麺で早めの昼食。\n早めの昼食 | Flickr よし！ 出かけようか。 いつもどおり，日吉の切り通し経由。\n今日の日吉の切通し | Flickr んー？ いつもより水量が多いか？\nお昼時に南進するコースだったので，見える景色がちょうど逆光になってキラキラと綺麗なわけですよ。\n早春の意宇川 | Flickr というわけで，早春の景色を眺めならがのんびり移動した。 既に田起こしが始まってる圃場もあったりして，田んぼの土の匂いがする。 まだ啓蟄（2025-03-05）前なのに春の気分だよ。 気温も高かったしね。\n熊野大社に到着。\n熊野大社 | Flickr 写真では微妙だが，こちらも春の気配。 境内は雪が残ってたけどね。\nさっそくお風呂に行こう。 この時点で既に汗まみれだよ。 インナーの替えを持ってきておいてよかった。\n八雲温泉上がりのコーヒー牛乳 | Flickr 木次乳業さん，いつもお世話になっています。\n帰りのお土産に干し柿と切り干し大根を買った。 何故か新聞紙で包んでもらった。 あれか？ 環境に配慮ってやつ？ まぁ新聞紙はなんぼあってもいいですからね（笑）\n松江市内遊覧 さて，どこ行こう。\nとりあえず，松江市内をぶらぶら走ってみよう。 郊外の田んぼ道を中心に遊覧するか。\n\u0026hellip;という感じで走ってたのだが，現時点で既に田起こしが始まってる圃場はあまりないな。 まぁ稲作を止めて放置されている圃場が多いけどね。 日本の一次産業は歪んでるよなぁ。\n途中，JR松江駅のドトールで糖分補給したり。\n糖分補給中 | Flickr 島根県立美術館はまだ雪が残ってるな。\n島根県立美術館はまだ雪が残ってる | Flickr 宍道湖の写真だけ撮って帰るか。\n今日の宍道湖 | Flickr 明日は楽しい月曜日！\n参考 Canon コンパクトデジタルカメラ PowerShot ZOOM 写真と動画が撮れる望遠鏡 PSZOOM キヤノン (Release 2020-12-10) エレクトロニクス B08L4WKDZ7 (ASIN), 4549292179675 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 望遠鏡型コンパクトデジカメ。メモリと充電器（要 Power Delivery）は別に用意する必要がある。使い勝手はまぁまぁ。\nreviewed by Spiegel on 2022-12-04 (powered by PA-APIv5)\nおたふく手袋 冬用インナー 長袖 ハイネック [保温 吸汗速乾 コンプレッション メンズ] JW-170 ホワイト M おたふく手袋(Otafuku Glove) Tools \u0026amp; Hardware B005SY3LUY (ASIN), 4970687608690 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 主に通勤で使うので白を選択。ダイエットでLサイズがオーバサイズになったのでMサイズで買い直した。着ている間はそれほどの締めつけ感はないし（スポーツ用なので当たり前だが）動きを阻害しない。寒くない。自転車を漕いでいても，いい感じに汗を排出している感じ。\nreviewed by Spiegel on 2024-11-23 (powered by PA-APIv5)\nおたふく手袋 冬用インナー ロングタイツ [保温 吸汗速乾 コンプレッション メンズ] JW-162 ブラック M おたふく手袋(Otafuku Glove) Tools \u0026amp; Hardware B0044W4MYU (ASIN), 4970687608522 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 主に通勤用に使っている。着ている間はそれほどの締めつけ感はないし（スポーツ用なので当たり前だが）動きを阻害しない。寒くない。自転車を漕いでいても，いい感じに汗を排出している感じ。前とじで「社会の窓」は空いてないので注意。\nreviewed by Spiegel on 2023-11-15 (powered by PA-APIv5)\n晴る ヨルシカ (メインアーティスト) Universal Music LLC (Release 2024-01-05) MP3 ダウンロード B0CQS23YMR (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; アニメ「葬送のフリーレン」OP曲。 mora で高解像度版が買える。 YouTube の「歌ってみた」をいくつか聴いてオリジナルを買っておこうかなと。移動中にヘヴィローテーションしてる。\nreviewed by Spiegel on 2025-02-09 (powered by PA-APIv5)\nHELP!! Kobo Kanaeru (メインアーティスト) Universal Music LLC 2036-01-01 (Release 2024-03-28) MP3 ダウンロード B0CYM6BR46 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 約1年前にリリースされた楽曲だが，最近これの MV を紹介している配信を見かけて mora の高解像度版を衝動買いした。ノリがよくて移動中に聞き流すと楽しい曲。歌詞では「何かを指針にして、狂い始める歯車」の部分が好き。\nreviewed by Spiegel on 2025-02-21 (powered by PA-APIv5)\n作業中の BGV (メン限配信以外) 【初3DLIVE】キミの王子様☆青くんのお誕生日ライブ！ゲスト盛沢山！【#⁠火威青生誕祭2025】 - YouTube 【マイクラ】日本最大級の駅舎を持つ「京都駅」をできる限り徹底再現！　超 高難易度【Minecraft】 - YouTube : すっげー！ 【#らでんのラジオ 】第二十五回目らでんのラジオはいつもよりちょっと長いよ【儒烏風亭らでん #ReGLOSS 】 - YouTube 【モンハンワイルズ】最速で狩りにいこうぜ！モンスターハンターワイルズをやってみる！/MHWilds【周防パトラ】 - YouTube 【モンハンワイルズ】初モンハン。酔っ払いです。らでんちゃんが襲来しています【一条莉々華/hololive DEV_IS　ReGLOSS】 - YouTube 【🌃 3月の星空案内】ビッグイベントが目白押し!?と思いきや……？🌟宇宙大好きVTuberが天文現象や星座の情報などをお届け！【星見まどか】 - YouTube "
    },
    {
      "title": "Typst のお勉強を始めた",
      "section": "remark",
      "description": "良くも悪くも「Markdown 以上 LaTeX 未満」かなぁ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2025/02/typst/",
      "published": "2025-02-27T10:07:40+00:00",
      "update": "2025-03-01T08:55:56+00:00",
      "content": "先週の 2025-02-19 (現地時間) に Typst 0.13 がリリースされたニュースが Bluesky の私の TL に流れてきて「そういやそんなのあったな」と思い出した。\n個人的に思う Typst 最大のメリットはシングルバイナリで提供されていて，それだけで PDF ファイルを生成できること。 というわけで重い腰を上げて調べてみることにした。\nTypst のお勉強 Typst 勉強用に久しぶりに新しいセクションを作った。 いやぁ，やり方をすっかり忘れてたよ（笑）\nTypst を触ってみた感想は，良くも悪くも「Markdown 以上 $\\mathrm{\\LaTeX}$ 未満」。\nたとえば $\\mathrm{\\LaTeX}$ でガチの執筆をしている人には Typst はまだ力不足だと思う。 逆に Markdown で満足している人には Typst は過剰スペックに見えるかもしれない。 あと Typst 0.13 から HTML 形式へのエクスポート機能がサポートされたが，これはドキュメント要素を単純に HTML の要素に置き換えているだけみたいで，今のところスタイルの制御もない。 将来バージョンはどうなるか分からないが，過剰な期待しないほうがいいだろう。 とはいえ既存の CMS と組み合わせれば使い道があるかもしれない。\nあくまで個人の意見だが，ドキュメントの作成・管理でもっとも重要なのは再利用しやすいか否かだと思う。 その点，テンプレートを作りやすくレイアウトとデータの分離がしやすい（多分） Typst は向いていると思う。 何より入力がテキストファイルなのは強い。 さらに Typst フォント周りに気をつければマルチプラットフォームでいける（バイナリ自体はOSおよびアーキテクチャごとに提供されている）。\nところでこれは愚痴なのだが，そろそろ OS ごとに勝手なフォントが入ってる状況はどうにかならないのだろうか。 たとえば Sans Serif なフォントとして Helvetica を使いたいとするじゃん。 macOS には昔からこれが標準で入ってるけど他の OS にはない。 その代わりの代替フォントとして Windows なら Arial， Linux だと Liberation Sans があったりするが，名前が全然違う（デザインも微妙に違うけど）のでフォント指定が煩雑になる。 日本語フォントだともっと酷いよね。\nそりゃあ NOTO フォントを入れるとかすればプラットフォーム間で合わせられるよ。 でも，そういう「インストール」自体がハードルが高いんだってば（自分が，じゃなくて，相手にそういうことをしてもらうのが）。 LibreOffce でもアプリケーション自体はマルチプラットフォーム対応なのに，フォント周りで地味に苦労してるんだよな。\n少なくとも標準フォントに関してはプラットフォーム間で差異がないようにして欲しい。 NOTO フォントでもいいから。\n愚痴はこのくらいにして\u0026hellip;\n既に個人的な書類送付状など定形書式で簡単なものなら Typst → PDF → 紙に印刷 という流れができ始めた。 次は議事録，その次はいよいよ設計書かなぁ。 いずれ勤務先にそういう提案ができるところまで持っていきたいものである。 音声の文字起こしとか生成 AI のおかげでだいぶ楽になってきたし Typst みたいな組版ツールと組み合わせれば面白そうなんだけど。\nまだちゃんと調べてないが Typst には if/else とか for/while とか break/return とかの制御構造があり，更に JSON や YAML や CSV などのデータ・ファイルを読み込む機能もある（プレーンテキストも読める）。 これらの機能を上手く使えばドキュメントのレイアウトやロジックとデータを分離することができそうである。 今後はこの辺の制御を中心に調べる予定。 もう少しゆっくりなペースでね。\n参考文献 Typst完全入門: LaTeXより簡単、Markdownより強力、美しいドキュメント作成術 doitsu (著) 2024-12-08 (Release 2024-12-08) Kindle版 B0DPXBNTRS (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; マークアップ言語および組版ツールである Typst についての解説。 Kindle 版のみの提供。固定レイアウトではないためレイアウトが崩れまくって読みにくい。この手の技術解説書は固定レイアウトの Kindle 版か，いっそ PDF で出してほしい。でも Typst についてまとまった解説のある日本語の本は他に見当たらなかったのでありがたい。\nreviewed by Spiegel on 2025-02-20 (powered by PA-APIv5)\n［改訂第9版］LaTeX美文書作成入門 奥村 晴彦 (著), 黒木 裕介 (著) 技術評論社 2023-12-09 (Release 2023-12-09) 単行本（ソフトカバー） 4297138891 (ASIN), 9784297138899 (EAN), 4297138891 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 2023年末に出てるのに気が付かなかった orz 今回は版元で PDF 版を買った。\nreviewed by Spiegel on 2024-04-07 (powered by PA-APIv5)\n"
    }
  ]
}
