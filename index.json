{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "AI がハッキングを始める日",
      "section": "remark",
      "description": "日本語翻訳および解説。ありがたや",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/05/when-ais-start-hacking/",
      "published": "2021-05-15T08:12:16+00:00",
      "update": "2021-05-15T08:13:30+00:00",
      "content": "Bruce Schneier 先生の AI ハッキングに関する一連の記事をブックマークとして挙げておく。\n The Coming AI Hackers | Belfer Center for Science and International Affairs  ブルース・シュナイアーが予言する「AIがハッカーになり人間社会を攻撃する日」 - YAMDAS現更新履歴   Hackers Used to Be Humans. Soon, AIs Will Hack Humanity | WIRED  When AIs Start Hacking - Schneier on Security ブログ: AIがハッキングを始めるとき (ブルース・シュナイアー)    私は所謂「シンギュラリティ」にはもはや微塵も関心がないが，道具・手段としての「AI 技術」についてリスク・ベネフィットをきちんと評価して規制すべきところは規制すべき，とは考えている。\n「理学」が「真理の追求」なら「工学」は「善の実装」である。 何を以って「善」とするかは議論の余地があるだろうが，エンジニアが自らの首を絞めることにならないよう気をつけなければ。\n人と機械の責務分担 これで思い出したが，以前に Facebook の TL に書きなぐった戯れ言を以下に記しておく。\n 自立とは、仮想代理人ソフトウェアであるところのエージェントが自ら動き、誰の力も借りずに意思決定できることを言う。 […] 一方、自律というのは哲学的な意味であり、自らが行動する際の基準と目的を明確を持ち、自ら規範を作り出すことができることをいう そろそろ、人工知能の真実を話そうより  この定義で考えると，今の世の中に「自律」機械はまだ登場していないことになる。 もしそのようなものが登場すればシンギュラリティ（特異点）到達ということになるのだろう。 まっ（少なくとも「現在」からの延長線上の未来では）ありえへんけど（笑）\nもう少し踏み込んで考えるなら，機械に「自らが行動する際の基準と目的を明確を持ち、自ら規範を作り出すことができる」ことを期待してはいけないし，そのような期待を前提としたルール・メイキングは意味がない，と思っている。\nであるならルールの適用と運用は人間側に任せるべきで，機械はあくまで運用補佐として振る舞うに留める。 つまり機械に「最終判断」させるべきではない，ということだ。\nハードでもソフトでもこうした「人と道具・機械との責務分担」をどう設計するかというのはかなり重要で，現状として人の側が最終判断を行うのであれば，システム上のルール設定も（もっと広く）法規制も人の側に寄せた設計をすべきと思っている。\n参考図書   社会は情報化の夢を見る (河出文庫) 佐藤俊樹 (著) 河出書房新社 2010-09-03 (Release 2016-07-29) Kindle版 B01J1I8PRQ (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  1996年に出版された『ノイマンの夢・近代の欲望―情報化社会を解体する』の改訂新装版。しかし内容はこれまでと変わりなく，繰り返し語られる技術決定論を前提とする安易な未来予測を「情報化」社会論だとして批判する。\nreviewed by Spiegel on 2015-09-15 (powered by PA-APIv5)\n   マップス　01 (MFコミックス　フラッパーシリーズ) 長谷川 裕一 (著) KADOKAWA 2012-06-23 (Release 2014-03-31) Kindle版 B00JB3F73M (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀を代表するスペースオペラ漫画（のひとつ）\nreviewed by Spiegel on 2017-12-19 (powered by PA-APIv5)\n   キカイダー02(1) (角川コミックス・エース) ＭＥＩＭＵ (著), 石ノ森 章太郎 (その他) KADOKAWA 2013-09-17 (Release 2013-10-17) Kindle版 B00F5P454W (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「キカイダー」を神秘学的視点で再解釈する（笑）\nreviewed by Spiegel on 2016-08-18 (powered by PA-APIv5)\n "
    },
    {
      "title": "call と start",
      "section": "remark",
      "description": "先日書いた Zenn Scrap の内容。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/05/call-and-start-in-windows/",
      "published": "2021-05-15T05:49:33+00:00",
      "update": "2021-05-15T05:49:52+00:00",
      "content": "先日 Zenn の Scrap に書いた記事だが， Scrap は基本的に書き捨てで最終的にはアーカイブ（非表示）化する予定なので，改めてこちらのブログに覚え書きとして記しておく。\nいやね。 バッチファイルって使い方を忘れちゃうのよ。 たとえば「コマンドプロンプトのウィンドウを非表示（または最小化）の状態でコマンド実行するのってどうすんだっけ？」って感じ。\n起動するコマンドを細かく制御したいならコマンドプロンプト（cmd.exe）の内蔵コマンド start を使う。\n\u0026gt; start /? 指定されたプログラムまたはコマンドを実行するためにウィンドウを開きます。 START [\u0026#34;タイトル\u0026#34;] [/D パス] [/I] [/MIN] [/MAX] [/SEPARATE | /SHARED] [/LOW | /NORMAL | /HIGH | /REALTIME | /ABOVENORMAL | /BELOWNORMAL] [/NODE \u0026lt;NUMA ノード\u0026gt;] [/AFFINITY \u0026lt;16 進数の関係マスク\u0026gt;] [/WAIT] [/B] [コマンド/プログラム] [パラメーター] \u0026#34;タイトル\u0026#34; ウィンドウのタイトル バーに表示するタイトル。 パス 開始するディレクトリ。 B 新しいウィンドウを作成せずにアプリケーションを起動します。 アプリケーションは Ctrl + C を無視します。 アプリケーションで Ctr l+ C を有効にしていない場合、 Ctrl + Break がアプリケーションを中断する唯一の方法です。 I 新しい環境は、現在の環境ではなく、cmd.exe に渡された元の環境に なります。 MIN ウィンドウを最小化の状態で起動します。 MAX ウィンドウを最大表示の状態で起動します。 SEPARATE 16 ビットの Windows プログラムを別メモリ領域で起動します。 SHARED 16 ビットの Windows プログラムを共有メモリ領域で起動します。 LOW IDLE 優先度クラスでアプリケーションを起動します。 NORMAL NORMAL 優先度クラスでアプリケーションを起動します。 HIGH HIGH 優先度クラスでアプリケーションを起動します。 REALTIME REALTIME 優先度クラスでアプリケーションを起動します。 ABOVENORMAL ABOVENORMAL 優先度クラスでアプリケーションを起動します。 BELOWNORMAL BELOWNORMAL 優先度クラスでアプリケーションを起動します。 NODE 優先 NUMA (Non-Uniform Memory Architecture) ノードを 10 進の 整数で指定します。 AFFINITY プロセッサの関係マスクを 16 進数で指定します。 プロセスはこれらのプロセッサで実行されるように制限されます。 /AFFINITY と /NODE を組み合わせると、関係マスクは異なって 解釈されます。NUMA ノードのプロセッサ マスクを右にシフトして ビット 0 で始まるかのように関係マスクを指定します。 プロセスは、指定した関係マスクと NUMA ノードの間で共通する プロセッサ上で実行されるように制限されます。共通するプロセッサ がない場合は、プロセスは指定した NUMA ノード上で実行される ように制限されます。 WAIT アプリケーションを起動し、終了するまで待ちます。 コマンド/プログラム 内部コマンドまたはバッチ ファイルの場合、コマンド プロセッサ は cmd.exe の /K オプションを使用して実行されます。 これはコマンドの後でもウィンドウが残ることを意味 します。 内部コマンドまたはバッチ ファイルではない場合、そのプログラム はウィンドウ モードのアプリケーションまたはコンソール アプリケーションとして動作します。 パラメーター コマンド/プログラムに渡すパラメーターです。 注意: SEPARATE および SHARED オプションは 64 ビット プラットフォームでは サポートされません。 ... このように start コマンドではウィンドウの表示状態や優先順位等の制御ができる。 たとえば Windows ログオン時に，コマンドプロンプトのウィンドウを最小化した状態で gpg-agent を起動させたい場合は\n@echo off start /min gpg-connect-agent.exe /bye という内容のバッチファイルを作ってスタートアップ・フォルダ1 に放り込んでおけばよい。\n/wait オプションを付けるとコマンド終了まで待機してくれる。 start /wait と call コマンド（call も内蔵コマンド）は似ているようで異なった動作をする。 これはバッチ処理をファイル単位で入れ子の構造にするとよく分かる。 簡単な実験をしてみよう。\nまず，以下の内容で alice.cmd というバッチファイルを作る。\n@echo off call bob.cmd echo Hello, Alice! exit /b alice.cmd の中で呼び出している bob.cmd の内容は以下の通り。\n@echo off echo Hello, Bob! exit /b alice.cmd も bob.cmd も最終行が exit /b になっているのがポイント。 /b オプションを付けることでバッチ処理の終了であることを明示し，バッチファイルをモジュール化できる。\nこれで alice.cmd を実行すると\n\u0026gt; alice.cmd Hello, Bob! Hello, Alice! となった。 bob.cmd がサブルーチンのように機能しているのが分かると思う。\nこのように Windows バッチ処理では call と exit /b を組み合わせてバッチ処理をモジュール化し再利用可能とすることができる2。\n次に alice.cmd の内容を\n@echo off start /b /wait bob.cmd echo Hello, Alice! exit /b とし， call コマンドを start コマンドに置き換える。 これを実行すると\n\u0026gt; alice.cmd Hello, Bob! と bob.cmd バッチ終了のタイミングでバッチ処理全体が終了してしまう。 start コマンドを使うと cmd.exe /k bob.cmd 相当のプロセスが走る筈なのだが，子バッチを /b /wait オプション付きで呼び出した場合は，親子全体でひとつのバッチ処理として解釈されるのか，子バッチ処理が終了した時点で親バッチ処理もろともプロセスが終了してしまうらしい3。 これを回避するための call コマンドというわけだ。\nちなみに\n@echo off start /b bob.cmd echo Hello, Alice! exit /b と /wait オプションを外すと，同じコマンドプロンプト・ウィンドウ上で別プロセスとして駆動するため，出力順が不定になる。 たとえば\n\u0026gt; alice.cmd Hello, Alice! Hello, Bob! てな感じ。\nNYAGOS の start まるっきり余談だが， NYAGOS では start コマンドは独自内蔵コマンドとして定義されている4。 いや，うっかり NYAGOS 上で start /? ってやったら， \u0026lsquo;?\u0026rsquo; なんてコマンド知らん（←超意訳）と怒られてしまったのだ（笑）\nあぁ，でも，バッチファイルは NYAGOS から起動しても cmd.exe 上のプロセスとして走るのでご心配なく。\nブックマーク  /bin/shに慣れた人に贈るバッチファイルの書き方 : バッチ処理を組む際に参考になる。オススメ GnuPG for Windows : gpg-agent について    ユーザごとのスタートアップフォルダの位置例： %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n call と exit /b の組み合わせは同一ファイル内でも可能。この場合 call :label のようにラベルで飛び先を指定する。ラベルをアンカーにしたジャンプなので，どうしても記述がアセンブラっぽくなってしまうのがにんともかんとも。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 件の Scrap で教えてもらったが，おそらく DOS 時代のバッチ処理との互換性を維持するためだろう，とのこと。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n NYAGOS の start コマンドは nyagos.d\\start.lua で定義されている。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.16.4 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "脆弱性 CVE-2021-31525 の修正",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/05/go-1_16_4-is-released/",
      "published": "2021-05-09T04:52:11+00:00",
      "update": "2021-05-09T04:52:42+00:00",
      "content": "Go 1.16.4 がリリースされた。\n Go 1.16.4 and Go 1.15.12 are released  今回は1件の脆弱性修正を含んでいる。\ngo1.16.4 (released 2021/05/06) includes a security fix to the net/http package, as well as bug fixes to the runtime, the compiler, and the archive/zip, time, and syscall packages. See the Go 1.16.4 milestone on our issue tracker for details. via Release History - The Go Programming Language  CVE-2021-31525 ReadRequest and ReadResponse in net/http can hit an unrecoverable panic when reading a very large header (over 7MB on 64-bit architectures, or over 4MB on 32-bit ones). Transport and Client are vulnerable and the program can be made to crash by a malicious server. Server is not vulnerable by default, but can be if the default max header of 1MB is overridden by setting Server.MaxHeaderBytes to a higher value, in which case the program can be made to crash by a malicious client. via Go 1.16.4 and Go 1.15.12 are released  この脆弱性は\n golang.org/x/net/http2/h2c HeaderValuesContainsToken in golang.org/x/net/http/httpguts  にも影響するらしい。 該当のパッケージを利用している場合は最新リビジョンにアップデートすること。\n（以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.16.4.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.16.4.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.16.4.linux-amd64.tar.gz $ sudo mv go go1.16.4 $ sudo ln -s go1.16.4 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.16.1 linux/amd64 アップデートは計画的に。\n参考図書   プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "2021-05-09 のブックマーク",
      "section": "bookmarks",
      "description": "「アメリカでは「集団免疫」に到達するのは難しいと専門家は考えている」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/05/09-bookmarks/",
      "published": "2021-05-09T04:24:00+00:00",
      "update": "2021-05-09T04:24:43+00:00",
      "content": "リリース情報  SmartGit 20.2.5 – syntevo blog Release April 2021 · microsoft/vscode · GitHub Release gopls/v0.6.11 · golang/tools · GitHub Release 4.4.9_6 · zetamatta/nyagos · GitHub Thunderbird — Release Notes (78.10.1) — Thunderbird Firefox 88.0.1, See All New Features, Updates and Fixes  Security Vulnerabilities fixed in Firefox 88.0.1, Firefox for Android 88.1.3 — Mozilla   LibreOffice 7.1.3 Community available for download - The Document Foundation Blog 「Visual Studio Code」の4月更新 ～タブ切り替えのターミナルをプレビュー提供 - 窓の杜  セキュリティ＆プライバシー関連  Multiple RTOS (Update A) | CISA  US-CERT、RTOSに存在する緊急の脆弱性について注意喚起、数多くのプロダクトが要対策 | Think IT（シンクイット）   Tesla Remotely Hacked from a Drone - Schneier on Security  Linux または Ubuntu に関する話題  「CentOS」の代替OS「AlmaLinux」、CloudLinuxが複数のサポートオプション提供 - ZDNet Japan  Windows に関する話題  nmake と set - 標準愚痴出力  Go 言語関連  少人数での爆速開発を目指してgolang×GCPの技術選定をした話 【Go言語】EchoとGORMでREST API（CRUD）を実装する | Enjoy IT Life go-gin + mysql + gorm + Dockerで開発用APIサーバーを立ててみた - Qiita 『ホットリロード x Go言語 x MySQL』なHTTPサーバのDocker環境構築手順 - Qiita Goa v3 で go:embed を利用する試行錯誤 A Tour of Go 実装完了 [Shizuoka.go] [初心者向け] Golang でシンプルな JSON API を作る 第13回『プログラミング言語Go』オンライン読書会 - connpass : 次回は参加する  その他  ブログ: アメリカでは「集団免疫」に到達するのは難しいと専門家は考えている ブログ: プログラマがドキュメントを書かない理由 変異株と闘う世界で進むワクチン接種、3回目の追加接種を模索する動きも：新型コロナウイルスと世界のいま（2021年4月） | WIRED.jp プログラマのための圏論 (執筆中) 認証と認可の超サマリ　OAuth とか OpenID Connect とか SAML とかをまとめてざっと把握する本 テーブルデータ向けの自然言語特徴抽出術  "
    },
    {
      "title": "非公開 Facebook Page を晒される",
      "section": "remark",
      "description": "非公開で何の活動も表示されない本人アカウントと何やら活動してるっぽいなりすましアカウントのどちらを信用するかという話である",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/05/facebook-page/",
      "published": "2021-05-05T01:43:57+00:00",
      "update": "2021-05-05T04:18:00+00:00",
      "content": "既に Facebook の TL では既に愚痴ってるが，実害が出る前に注意喚起しておく。\n私はずいぶん前から Facebook の TL に載せる記事を「友人」限定にして Facebook Page も「友人」以外には見えないようにしている。 なので「友人」関係にない人が私の Facebook Page を見てもエラー画面が表示されるだけだったのだ，この前までは！\n実はこの前，職場で間違えて自分の Facebook Page をブラウザで開いてしまったのよ。 したら，いつものエラー画面ではなく，普通に Facebook Page が表示されてビックリしてしまった。\nなにすんねん！！  さすがにプロフィール情報とか TL に上げた記事や写真は非表示になっているが，アテンション画像やアバターアイコン，名前・ニックネーム・1行コメントはそのまま表示される。 これだけなら「なにすんねん」で済む話だが，たちの悪いことに同名または類似名のユーザを列挙してくれやがるのよ。\nこの結果なにが起きるかというと情報非公開の Facebook ユーザを容易にサーベイできるわけ。\nマジで要らんことするよね Facebook は！\nこの件は Facebook Page を公開している人には「それがどーした」な話だろう。 しかし，今の御時世 SNS を使ってるのはセルフ・ブランディングや自己肯定感を満たす目的の人だけではないのだ。\n私は Facebook を広島時代の友人や大学時代の友人や先輩方との連絡手段として使っている。 ついでに TL で「ド田舎に引きこもっても相変わらず馬鹿やってますよー」と生存証明の記事を上げている。 それがなかったら（Instagram と同じく）プライバシーに敵対的なサービスのアカウントなんかとっくに潰してるっての（まぁ BAN されたら復帰せず終了するけどw）。\n最近 Facebook の友人がアバターアイコンをパクられ，なりすましアカウントを作られたと TL で報告していた。 非公開で何の活動も表示されない本人アカウントと何やら活動してるっぽいなりすましアカウントのどちらを（第三者から見て）信用するかという話である。\nというわけで，長すぎるまえがきはここまでにして，本題の注意喚起。\n私名義の Facebook アカウントで私から「友人」申請をすることはありません。もし申請があっても 100% なりすましなのでご注意を！ 私は現在，リアルで直接知り合った人以外には Facebook の友人申請をしないし受け付けないことにしている。 もし私の活動をフォローしたいという奇特な方がいらっしゃるのであれば，このブログの feed を食わせるか Twitter アカウント をフォローしていただければありがたい。 相互フォローの強要などしないのでご心配なく（笑） どうしても Facebook の「友人」関係が必要であれば直接お会いしましょう。 個別のやりとりで私のケータイ番号をご存知であれば Signal がオススメ。\nちなみに Facebook アカウントのアバターアイコンは（Facebook への抗議の意味を込めて）違うものに差し替えた。 3.11 の復興活動が「収束宣言」するまでは “Pray for Japan” のバッヂの付いたアイコンで通すつもりだったが，残念なことである。\n時代は「ゆく川の流れ」のように移りゆく。\n参考図書   超監視社会 ブルース・シュナイアー (著), 池村 千秋 (翻訳) 草思社 2016-12-13 (Release 2017-02-03) Kindle版 B01MZGVHOA (ASIN)  実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。\nreviewed by Spiegel on 2019-03-23 (powered by PA-APIv5)\n   つながりっぱなしの日常を生きる：ソーシャルメディアが若者にもたらしたもの ダナ・ボイド (著), 野中 モモ (翻訳) 草思社 2014-10-09 (Release 2015-07-21) Kindle版 B0125TZSZ0 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  読むのに1年半以上かかってしまった。ネット，特に SNS 上で自身のアイデンティティやプライバシーを保つにはどうすればいいか。豊富な事例を交えて考察する。\nreviewed by Spiegel on 2016-05-10 (powered by PA-APIv5)\n "
    },
    {
      "title": "2021-05-04 のブックマーク",
      "section": "bookmarks",
      "description": "「Ubuntu 21.04正式リリース。Active Directoryとネイティブ統合、最適化されたSQL Server対応、Flutter用SDK搭載、Waylandがデフォルトに、など」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/05/04-bookmarks/",
      "published": "2021-05-04T04:59:32+00:00",
      "update": "2021-05-04T04:59:49+00:00",
      "content": "リリース情報  Release v3.5 · gitextensions/gitextensions · GitHub Release 8.9.3 · mermaid-js/mermaid · GitHub Release v1.0.20 · sonatype-nexus-community/nancy · GitHub Release v1.0.19 · sonatype-nexus-community/nancy · GitHub Hugo 0.83: WebP Support! | Hugo  Release v0.83.0 · gohugoio/hugo · GitHub   Hugo 0.83.1: One Bug Fix | Hugo  Release v0.83.1 · gohugoio/hugo · GitHub   Release 4.4.9_5 · zetamatta/nyagos · GitHub Release v0.4.12 · zetamatta/go-readline-ny · GitHub  セキュリティ＆プライバシー関連  Europol: Emotet malware will uninstall itself on April 25th Update Your iPhone So You Can Tell Apps to Stop Tracking You  最新の「iOS 14.5」「iPadOS 14.5」、バグやセキュリティ問題などを修正 - ケータイ Watch   iOS 14.5「Apple Watchでロック解除」はマスク姿なら本人含め誰でもロック解除可能に | TechCrunch Japan When AIs Start Hacking - Schneier on Security  Hackers Used to Be Humans. Soon, AIs Will Hack Humanity | WIRED ブログ: AIがハッキングを始めるとき (ブルース・シュナイアー)   欧州議会議員グループが公共の場での生体認証監視を禁止するAI規制を求める | TechCrunch Japan FBIによる「Exchange」のWebシェル削除に賛否\u0026ndash;サイバーセキュリティの今後にどう影響するか - ZDNet Japan ISC BIND 9の複数の脆弱性に関する注意喚起 QNAP製NASへのランサムウェア攻撃は公式バックアップソフトにハードコードされたパスワードが原因か - GIGAZINE 「Microsoft Edge 90」で7件の脆弱性が修正 - 窓の杜  天文関連  オープンソースが実現する、火星探索🚀 - GitHubブログ  Linux または Ubuntu に関する話題  Hirsute Hippo Release Notes - Release - Ubuntu Community Hub  Ubuntu 21.04 その19 - Ubuntu 21.04がリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 21.04 その20 - Ubuntu 21.04の新機能と変更点・既知の問題 - kledgeb Ubuntu 21.04 その21 - Ubuntu 21.04登場・Microsoft Active Directoryとの連携やMicrosoft SQL Serverのサポート改善など - kledgeb Ubuntu 21.04正式リリース。Active Directoryとネイティブ統合、最適化されたSQL Server対応、Flutter用SDK搭載、Waylandがデフォルトに、など － Publickey 「Ubuntu 21.04」リリース\u0026ndash;「Microsoft Active Directory」とネイティブ統合など - ZDNet Japan   Ubuntu 21.10 その3 - Ubuntu 21.10の開発コードとリリーススケジュール - kledgeb 「Linuxカーネル5.12」リリース\u0026ndash;トーバルズ氏、「小規模だが5.13で埋め合わせ」 - ZDNet Japan GitHub Actions : Ubuntu 16.04 LTS virtual environment will be removed on September 20, 2021 - GitHub Changelog  Windows に関する話題  「Windows 10 May 2021 Update」（バージョン 21H1）が完成 ～ISOイメージが公開 - 窓の杜 .NET Framework 4.5.2/4.6/4.6.1のサポートが2022年4月26日に終了 - 窓の杜  Go 言語関連  GitHub - charmbracelet/glow: Render markdown on the CLI, with pizzazz! 💅🏻  Terminalでmarkdownをプレビュー - Qiita   GitHub - rqlite/rqlite: The lightweight, distributed relational database built on SQLite  7 years of open-source database development: lessons learned - Vallified   Go generics beyond the playground - DEV Community Go RestAPI のあれこれ　ついでにDockerも - Qiita ラズパイで実行するGO言語プログラムのDocker開発環境（GPIOとかはわからん） - Qiita Goバイナリの脆弱性検知 - knqyf263\u0026rsquo;s blog v0x.nl - Portable apps with Go and Next.js GitHubのprivate repositoryを含んだ場合のGo Modules管理 | おそらくはそれさえも平凡な日々  Rust 言語関連  lambda@edge上でwasmを使用した画像リサイズにおける速度 Announcing Rustup 1.24.1 | Rust Blog  その他  Node.jsの新LTS版となる「Node.js 16」正式リリース。Apple M1チップ対応、JavaScriptエンジン「V8 9.0」搭載など新機能 － Publickey MicrosoftとOSSの親和性、Azureインフラ強化の取り組みは？ - ZDNet Japan Raspberry Pi 4 セットアップまとめ - Ubuntu編 - 劇場版「美少女戦士セーラームーンEternal」BD/DVD発売決定！ - YouTube 「iOS 14.5」「iPadOS 14.5」登場――AirTag対応、Apple Watchでマスク中でもiPhoneロック解除など - ケータイ Watch アオシマ『サンダーバード』シリーズ名作キットが続々発売！「ジェットモグラ」や「ペネロープ号」も再出動!! | 電撃ホビーウェブ GitHub - zetamatta/xnhttpd: CGI Server / MarkdownViewer / Lua Application Server サクッと始めるドキュメンテーション【TeX / LaTeX】 Why is India having a covid-19 surge? | The BMJ  ブログ: インドでCOVID-19が急増しているのはなぜか?   ブロックチェーンによるエネルギーの大量消費を解消できるか：動き出したイーサリアムと「PoS」の潜在力 | WIRED.jp  "
    },
    {
      "title": "2021-04-25 のブックマーク",
      "section": "bookmarks",
      "description": "「グーグル、Linuxカーネル開発における「Rust」採用の動きをサポートする考え」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/04/25-bookmarks/",
      "published": "2021-04-25T04:17:46+00:00",
      "update": "2021-05-04T04:59:49+00:00",
      "content": "リリース情報  Release v1.1.2 · mmcdole/gofeed · GitHub Release Windows Terminal v1.7.1901.0 (Scoop Compatibility) · microsoft/terminal · GitHub Release v1.1.3 · mmcdole/gofeed · GitHub Thunderbird — Release Notes (78.10.0) — Thunderbird Firefox 88.0, See All New Features, Updates and Fixes 「LibreOffice」に脆弱性が ～修正版「v7.0.5/7.1.2」への更新を - 窓の杜 Hugo 0.82.1: One Bug Fix | Hugo  Release v0.82.1 · gohugoio/hugo · GitHub   Release MathJax 3.1.3 · mathjax/MathJax · GitHub Release MathJax v3.1.4 · mathjax/MathJax · GitHub Release v3.4.2 · go-task/task · GitHub  セキュリティ＆プライバシー関連  シーメンスの複数製品に脆弱性、影響範囲広いため確認を | TECH+ アイコンを見るだけでNTFSドライブが破損する脆弱性が修正 - PC Watch 「Microsoft Edge 89」に2件のゼロデイ脆弱性 ～悪用例も報告あり、すぐにアップデートを - 窓の杜 Linux bans University of Minnesota for sending buggy patches in the name of research [Update] - Neowin Signal app\u0026rsquo;s Moxie says it\u0026rsquo;s possible to sabotage Cellebrite\u0026rsquo;s phone-probing tools with booby-trapped file • The Register 国内約200組織へ行われたサイバー攻撃と関係者の書類送検についてまとめてみた - piyolog 内閣府のFileZenへの不正アクセスについてまとめてみた - piyolog  天文関連  地球全土の天体観測に人工衛星の生み出す「光害」が影響を与えていると判明 - GIGAZINE  Windows に関する話題  Microsoft、「Visual Studio 2022」を発表 ～待望の64bit化も - 窓の杜  Go 言語関連  Go 言語スプレッドシートライブラリ：Excelize 2.4.0 がリリースされました - Qiita Go によるサーバプッシュ実装 Go Conference 2021 Spring (Online) - connpass  Go Channels Demystified - Google スライド Go をセキュアに書き進めるための「ガードレール」を整備しよう / Let\u0026rsquo;s Build Security Guardrails For Your Go Programs! - Speaker Deck Microsoft Azure 向け Go SDK の最新動向・開発体制・コード生成戦略 - Speaker Deck Go Conference 2021 Spring | Home Goの構造体とタグを極める -Mastering Tags of Structs- - Google スライド 検索エンジン自作入門 Go Conference 2021 Spring - Speaker Deck Go言語低レイヤー入門 Hello world が 画面に表示されるまで (GoConforenceTokyo2021) - Google スライド GoCon CTF と呼ばれた問題の紹介と解説 - カンムテックブログ Azure SDK for Goで学ぶGoでのWebクライアント実装 - Speaker Deck   Goから学ぶI/O  Rust 言語関連  グーグル、Linuxカーネル開発における「Rust」採用の動きをサポートする考え - ZDNet Japan Rust for Windows, and the windows crate | Microsoft Docs  その他  ティム・オライリーが「シリコンバレーの終焉」について長文を書いていたのでまとめておく - YAMDAS現更新履歴 草思社文庫に入ったデジタルテクノロジー関連本を調べてみた - YAMDAS現更新履歴 unified を使って Markdown を拡張する OpenAPI Generatorの出力モデルをMongoDBで扱いたかった(失敗) - Qiita JAMスタックを実現する国産サービス「Kuroco」正式リリース。GitHub Actionsでビルドし、Webホスティング、APIサーバなど提供。月額1100円分まで無料 － Publickey ほっこりネコ漫画誌と癒しYouTubeチャンネルのコラボが実現!!!「Nekocha the sleepy cat～vol.Ⅶ～」4月20日リリース(配信限定) – Sam\u0026rsquo;s Up GitHub Actions aciton-textlint v3 が出てています GitHub - Humpheh/goboy: Multi-platform Nintendo Game Boy Color emulator written in Go : multi-platform Nintendo GameBoy and GameBoy Color emulator written in go GitHubリポジトリ連携時に投稿ページにGitHubへのリンクを表示する WebAssemblyがSIMDをサポート、「WebAssembly SIMD」がChromeやFirefoxで標準実装。画像処理や物理演算など高速実行 － Publickey 「Node.js 16」が公開 ～Apple Silicon向けのプリビルドバイナリを初めて提供 - 窓の杜 マイクロソフトの「Edge」ブラウザーがGoogleの広告技術「FloC」を無効化、事実上の「NO」か | TechCrunch Japan GitHub Actions update: Helping maintainers combat bad actors - The GitHub Blog 15+ Awesome CSS Animation Resources - DEV Community なぜ中国人キャラは「～アル」と話すのか？ 日本語史の教授に聞いてみたマンガが話題 → ルーツは幕末にあった！ | ロケットニュース24 : 中国人はあるある言わないあるw 【PPP ONLINE LIVE～世界ペンギンの日大感謝祭～開催記念】PPP「大空ドリーマー」フルMV - YouTube  "
    },
    {
      "title": "MISRA-C の思ひ出（または「守られないルールはルール自体に問題がある」）",
      "section": "remark",
      "description": "ルール・メイキングは難しい",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/04/making-rule/",
      "published": "2021-04-25T02:35:57+00:00",
      "update": "2021-04-25T02:36:51+00:00",
      "content": "オンライン開催お疲れさまでした 2021-04-21 に開催された Go Conference 2021 Spring は初のオンラインだったそうで，週末の土曜日ということもあって，出不精で人見知りな私でも気軽に参加できたのがありがたかった。 （リアルタイム視聴も含めて）動画や音声のコンテンツはまとまった時間で拘束されてしまうのであまり好きではないのだが，たまにはこういうものに参加するのもよろしかろう。\nそのなかのひとつである\n Go をセキュアに書き進めるための「ガードレール」を整備しよう / Let\u0026rsquo;s Build Security Guardrails For Your Go Programs! - Speaker Deck  は興味深く視聴させてもらった。 特に go-ruleguard は面白そうだ。 個人でも使う機会があるかもしれない。\nちなみに，スライドにも書かれているが， gosec は golangci-lint にも組み込まれているので\n$ golangci-lint run --enable gosec ./... といった感じに使うことができる。\nMISRA-C の思ひ出 この発表を視聴しながら思い出していたのは大昔に車載系のプロジェクトに参加したときのことだ。 あのときはアセンブラでベクタテーブルからゴリゴリ書いてたよなぁ（遠い目）\n今は違うと思うが，当時は MISRA-C というガイドラインがあって，これが車載系における事実上の C 言語コーディング基準（criteria）になっていた。\n詳細は割愛するが， MISRA-C には127個のルールがあって「必要（Required）」と「推奨（Advisory）」のいずれかに分類されている。 このうち「必要」ルールは強制的に課せられるルールで，このルールからの逸脱（deviation）を許容する場合には，手続きを踏んで文書化と承認を行わなければならない。 各ルールにはルールの詳細（何故そのルールが必要か）と逸脱可否の判断基準とサンプルコードが載っているので，それを参考に逸脱の可否を判定する。\nMISRA-C が定めるルール自体は合理的な内容なのだが，127個ものルールを机上でチェックするのは不毛なので MISRA-C 対応の lint ツールを使うことになる（当時はこれがバカ高くてねぇ）。 で，当然ながら lint ツールは製品の差別化のために MISRA-C 以外のルールもチェックできるようになっていて，最終的に数百ものルールをチェックすることになる。\n守られないルールはルール自体に問題がある 問題は lint を実施した結果，大量の警告が出た場合である。 あるルールについて大量の逸脱が発生する理由は大きく2つある。\n プログラム設計が根本的に間違っている ルールが間違っている  プログラマのスキルによるかもしれないが，経験上こういうときに前者が理由であることはほとんどない。 なので，まずは「ルールが間違っている」のではないかと疑ってみるのが定石である。\n基本的に「ルールは守られるべきもの」であるが，ルールもまた人間が考えたものであり，間違っている可能性を常に考慮すべきである。 何故なら人間は間違いを犯す生き物なのだから。\n私は「悪法も法」という考え方には与しない。 「悪法は悪法」であり正すべきだ。 そして「悪法」の判断基準のひとつが「守られないルールはルール自体に問題がある」である。 ルールもリファクタリングの対象となる「コード」なのだ。\n最初に挙げた発表では reviewdog を使って変更部分のみチェックする方法が紹介されていたが， reviewdog を常用するのは個人的にお勧めできない。 これが常態化すると「動いてるコードは触るな」という方向に行きがちで，それによってリファクタリングの機会を失うこととなり，最終的に技術的負債の返済が遅れることになる。 リファクタリングに厚いのが Go の持ち味なので，これを抑圧するような運用は避けるべきだろう。\nことほど左様にルール・メイキングというのは難しいのである。 できるなら，煩わしいことは機械に任せて楽しくコードを書きたいものである。\nブックマーク  golangci-lint を GitHub Actions で使う  参考図書   組込み開発者におくるMISRA‐C:2004―C言語利用の高信頼化ガイド MISRA‐C研究会 (編集) 日本規格協会 2006-10-01 単行本 4542503461 (ASIN), 9784542503465 (EAN), 4542503461 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  私が持っているのはこれよりひとつ古い版だが，まぁいいか。むかし，車載用の組み込みエンジニアをやっていた頃は必読書として読まされました。今はもっと包括的な内容のものがあるはず。\nreviewed by Spiegel on 2019-02-06 (powered by PA-APIv5)\n   CODE VERSION 2.0 ローレンス・レッシグ (著), 山形浩生 (翻訳) 翔泳社 2007-12-19 (Release 2016-03-14) Kindle版 B01CYDGUV8 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  前著『CODE』改訂版。\nreviewed by Spiegel on 2018-11-17 (powered by PA-APIv5)\n "
    },
    {
      "title": "FinTech の曲がり角",
      "section": "remark",
      "description": "藪をつついて蛇を出す",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/04/cryptocurrency-with-signal/",
      "published": "2021-04-24T06:12:30+00:00",
      "update": "2021-05-04T04:59:49+00:00",
      "content": "2週間以上前の記事で恐縮だが Signal がいわゆる暗号通貨（cryptocurrency）機能を組み込むらしい。\n Signal Adds a Payments Feature—With a Privacy-Focused Cryptocurrency | WIRED Signal Adds Cryptocurrency Support - Schneier on Security Et tu, Signal? 暗号化チャットのSignalが英国でMobileCoinによる決済機能をテスト中 | TechCrunch Japan メッセージングアプリSignalの暗号通貨による送金機能の追加にブルース・シュナイアーが苦言 - YAMDAS現更新履歴  実はこの話はほぼスルーしていたのだが yomoyomo さんの記事を見て，やはり「ログ」として残しておくのがいいだろうという気分になった。\nこの問題は Bruce Schneier 先生の以下の一文に集約できるだろう。\nIt’s that adding a cryptocurrency to an end-to-end encrypted app muddies the morality of the product, and invites all sorts of government investigative and regulatory meddling: by the IRS, the SEC, FinCEN, and probably the FBI. via Signal Adds Cryptocurrency Support  日本語でいうと「藪をつついて蛇を出す」。 個人的な印象で恐縮だが，信頼できる暗号化メッセージング・アプリケーションはもはや Signal が唯一と思っているので，マジで勘弁していただきたいところである。 そんなもん入れられるくらいなら普通に Signal に金を払うよ1。\nそもそも2018年に G20 が「それ」を暗号資産（crypto-assets）と定義した時点で，私の中では「試合終了」だったのよ2。 最近では「通貨」機能は諦めたのか NFT (Non-Fungible Token) が流行りらしいが， Xanadu 未満の駄アイデアにしか見えない。 追記型データベースとしての Blockchain も意外に使い道がなく，むしろ「環境にやさしくない」とか言われているし（笑）\nいずれにしろデジタル・トークンを「通貨」とみなして流通させる季節はとっくに終わってるわけで，あとは「資産」としてのデジタル・トークンの運用で一山当てようという山師的な発想しか見えてこない。\nデジタル・トークンの「資産運用」を全面否定するつもりはないが（私は関わりたくないが）， Signal のようなセキュリティまたはプライバシー上のクリティカル・サービスで山師的機能を付加する動きについては，今後は厳しく監視していく必要があるかもしれない。\nブックマーク  「暗号通貨」ってゆーな！ 階級社会としてのインターネット “Blockchain and Trust” by Bruce Schneier  参考図書   暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n   無料 (ただ) ほど高い「安心安全」はない。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 何故 G20 が「暗号資産」と定義したか考えて欲しい。通貨としての信頼と安定がないからだよ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "いまさら英語の教科書を買ってみる",
      "section": "remark",
      "description": "中学生の時に読みたかったよ orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/04/english-textbook/",
      "published": "2021-04-24T03:21:34+00:00",
      "update": "2021-04-24T03:21:58+00:00",
      "content": "広島でリトルプレスなどの出版関連事業をされているしおまち書房さんで『with #前置詞といっしょ！』の第三刷の予約を始めるというので，同シリーズの他の2冊と併せて少し前に申し込んだ。 商品が来るまで時間がかかると思っていたのだが，割とすぐに届いたよ。\n予約していた本が来た！  実はこの本の存在は広島に居た頃から知っていたのだが，何となく買いそびれていたのだ。 郷里の松江に引っ込んでから買うというのも我ながらにんともかんともな感じだが，ネット万歳と好意的に解釈しておこう（笑）\nお恥ずかしい話だが，私は子供の頃から授業で習う「英語」が壊滅的で，コレのせいで大学入試でも志望先のランクをひとつ落とさざるを得なかったし，今でも英語でめっさ苦労している。 大企業なら大抵は専門の翻訳・通訳セクションがあるものなので，英語不得手でも最低限はどうにかなるだろうが，それでもコミュニケーションの齟齬による誤解や勘違いはつきまとうし，なにより自己学習で英語の資料が読めないというのは本当に困る。\nこれはプログラミング言語でも同じだが，ある言語を習うということは言語を含む文化的背景も込みで勉強することだ。\n残念なことに，これに気付いたのは社会人になってマジで英語で苦労するようになってからだった。 今回買った本には「英語的な視点」といった言い回しが時々出てくる。 英語を習うということは日本語および日本との文化的差異を習う，つまり「他人の靴を履いてみる（＝ empathy）」ことなのだろう。\n\u0026hellip;ということを（頭のやわらかい）中学生の時に習いたかったよ orz\n参考図書   with #前置詞といっしょ！: 電子書籍版 三戸　雅彦 (著), 木村　ヨーシロー (写真)  2017-05-07 (Release 2017-05-07) Kindle版 B07143DX2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  対象年齢は小学3年生から。“with” をはじめとしたよく使われる10個の前置詞についてふんわりとしたイメージを掴むことができる。中学生の時に読みたかった orz\nreviewed by Spiegel on 2021-04-24 (powered by PA-APIv5)\n   coffee ＃名詞のヒミツ！～英語を楽しく学ぼう～ 三戸雅彦 (著) しおまち書房 2018-01-01 単行本（ソフトカバー） 4906985165 (ASIN), 9784906985166 (EAN), 4906985165 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  同じ著者による『with #前置詞といっしょ！』の続編と言えるもの。可算名詞や不可算名詞，単数形と複数形で意味が変わるもの，冠詞の使い方，といったことを言葉のイメージを中心に解説している。中学生の時に読みたかった orz\nreviewed by Spiegel on 2021-04-24 (powered by PA-APIv5)\n   中学→高校の英文法が図解でわかるノート　基礎編　#動詞と踏み出そう！ 三戸 雅彦 (著) しおまち書房 2020-01-01 単行本（ソフトカバー） 4906985262 (ASIN), 9784906985265 (EAN), 4906985262 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  同じ著者による『with #前置詞といっしょ！』『coffee ＃名詞のヒミツ！』の続編と言えるが対象年齢はもう少し「お兄さん・お姉さん」向けの内容。動詞を中心に授業のノートのような紙面構成で書かれていて分かりやすい。勉強中。\nreviewed by Spiegel on 2021-04-24 (powered by PA-APIv5)\n   ぼくはイエローでホワイトで、ちょっとブルー ブレイディみかこ (著) 新潮社 2019-06-21 (Release 2019-06-21) Kindle版 B07T35YXVV (ASIN)  某書籍で紹介されていたので。気が向いたら読んでみよう。\nreviewed by Spiegel on 2021-04-24 (powered by PA-APIv5)\n "
    }
  ]
}
