{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "「他者を理解」できるわけがない",
      "section": "remark",
      "description": "垂直方向の「説教」と水平方向の「対話」",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/05/communications/",
      "published": "2020-05-11T03:25:02+00:00",
      "update": "2020-05-11T04:01:16+00:00",
      "content": "みなさん GW いかがでしたか。 私は某ウイルスに絡む非常事態を言い訳にがっつり引き篭もってました。 ハロワの失業認定でも物理的な求職活動は免除されているので，もっぱらネットで。 安◯先生，仕事がしたいです\u0026hellip;\n閑話休題 (それはさておき) ， Facebook の TL で面白いネタを見つけたので久しぶりに胡乱なことを書いてみる（笑）\n 平田オリザ氏炎上にみる、コミュニケーション教育は「他者と相互理解する能力」を害しているという現実｜ヒラヤマ　タカシ｜note  ちなみに記事の内容に関しては微塵も興味がないのであしからず。 ただし「他者」や「理解」や「コミュニケーション」というキーワードから色々と連想することはある。\nどこで見かけたのかうろ覚えで申し訳ないが「『◯◯を理解した』というのは『◯◯を理解するのを止めた』と同義」みたいな記述があったのを思い出した。 ましてや「他者」などという宗教的にも哲学的にも科学的にも解決されざる命題に対して「理解した」などと言える筈もないのだ。\nもうひとつ連想したのは「リスク・コミュニケーション」。 知らなかったり忘れてる人も多いだろうが，20年ほど前に BSE (Bovine Spongiform Encephalopathy; 通称「狂牛病」) を巡る騒動があって，私はこれをきっかけに「リスク・コミュニケーション」について勉強し始めたのだが，どっかのドキュメント（これもうろ覚え，ゴメン）で「リスク・コミュニケーションとは説得すること」みたいなことが書かれているのを見て「だめだこりゃ」と思ったことがある1。\nもっと言うと日本における「説得」は「説教」もしくは「折伏」に近い。 つまりコミュニケーションが水平方向ではなく垂直方向なのだ。 これに関して私は「説教番組」という造語を考えたことがある。\nそして「説教」で思い出すのは，あの名作である。\n PowerPoint 絶対主義  「理解」とは結果や成果ではなく「プロセス」である。 故に他者への理解を継続するための「コミュニケーション」は垂直方向の説教ではなく水平方向の「対話」であるべきだろう。\nと思うのだが，いかがだろうか。 ◯西先生，「他者を理解」したいです\u0026hellip;\n参考図書  数学ガールの誕生　理想の数学対話を求めて 結城 浩 (著) SBクリエイティブ 2013-09-13 (Release 2014-09-13) Kindle版 B00NAQA33A (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  結城浩さんの講演集。こういう場所に立ち会える今の学生さんは羨ましい。\nreviewed by Spiegel on 2018-12-21 (powered by PA-APIv5)\n  クリトン 原題: CRITO プラトン , sogo (翻訳)  2000-12-20 (Release 2014-09-17) 青空文庫 4333 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「ソクラテスの弁明」そのものには必ずしも賛同しないが，繰り広げられる対話は「個」と「公」の関係を考える上で面白い作品だと思う。\nreviewed by Spiegel on 2019-09-21 (powered by aozorahack)\n  リスクとつきあう―危険な時代のコミュニケーション (有斐閣選書) 吉川 肇子 (著) 有斐閣 2000-03-01 単行本 4641280304 (ASIN), 9784641280304 (EAN), 4641280304 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  リスク・コミュニケーションについて。内容は古いがまだまだ使える。\nreviewed by Spiegel on 2016-02-03 (powered by PA-APIv5)\n  セブン (字幕版) ブラッド・ピット (出演), モーガン・フリーマン (出演), グウィネス・パルトロー (出演), ケビン・スペイシー (出演), デビッド・フィンチャー (監督), アンドリュー・ケビン・ウォーカー (Writer), アーノルド・コペルソン (プロデュース), フィリス・カーライル (プロデュース)  (Release 2013-11-26) Prime Video B00FIWCVFM (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  説教こわい。夜見ると眠れなくなる（笑）\nreviewed by Spiegel on 2020-05-11 (powered by PA-APIv5)\n  あなたの人生の物語 テッド チャン (著), 浅倉久志 (翻訳) 早川書房 2012-08-25 (Release 2014-09-30) Kindle版 B00O2O7JEA (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  短編集。同名の短編が映画になったが，個人的に一番好きなのは「理解」だったり。\nreviewed by Spiegel on 2020-05-11 (powered by PA-APIv5)\n   リスク・コミュニケーション手法のひとつとして「説得」があるのは確か。ただし「説得」を使うには幾つか前提条件がある。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-05-10 のブックマーク",
      "section": "bookmarks",
      "description": "「部屋裏のバイテン - 竹本泉」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/05/10-bookmarks/",
      "published": "2020-05-10T01:30:34+00:00",
      "update": "2020-05-10T01:48:41+00:00",
      "content": "リリース情報  JavaScript Transpiler | Hugo : Hugo 0.70.0  セキュリティ＆プライバシー関連  【注意喚起】偽口座への送金を促す“ビジネスメール詐欺”の手口（第三報）：IPA 独立行政法人 情報処理推進機構 NSA、ウェブシェルの危険性を警告\u0026ndash;悪用されやすい脆弱性のリストも - ZDNet Japan ほぼすべてのウイルス対策ソフトにOSを破壊可能な脆弱性 ～現在は多くのソフトで修正済み - PC Watch Twitterが「SMSによる通知サービス」をほぼすべての国で終了すると発表 - GIGAZINE COVID-19とテクノロジー：接触トレーシング、位置情報追跡、近接追跡 | P2Pとかその辺のお話R 非公開会議の内容を無許可参加した記者がツイートした件についてまとめてみた - piyolog ハッキングフォーラムに投稿された複数の国内サイトリークについてまとめてみた - piyolog  天文関連  特集 - 視力6000で見る宇宙【vol.4】「化学」を道具にして星の誕生を探る - アルマ望遠鏡 すばる望遠鏡、銀河同士の衝突でできたジェットを撮影 | 観測成果 | すばる望遠鏡 TAMA300で実証した量子雑音を抑える新技術 | 国立天文台(NAOJ)  Linux または Ubuntu に関する話題  Ubuntu 20.10 その1 - Ubuntu 20.10の開発コードとリリーススケジュール - kledgeb  その他  LibreOfficeでドキュメントコンバータを作ろう - Qiita 「LibreOffice」は次期バージョン「LibreOffice 7.0」でFlashのサポートを廃止 - 窓の杜 第1話 / 部屋裏のバイテン - 竹本泉 | webアクション 総務省｜特別定額給付金  特別定額給付金の申請をオンラインで済ませた｜塚本 牧生｜note   Showcase: Digital.gov : Hugo theme GitLabが日本法人を設立、国内で本格展開へ。ロゴが「タヌキ」なのは、スーパーマリオの大ファンだから － Publickey GitHub、WebIDEの「Codespaces」を発表。GitHubからワンクリックで開発環境へ － Publickey  "
    },
    {
      "title": "画像データを連結してみる",
      "section": "golang",
      "description": "Go 言語っぽいトピックはなし。今回もお遊びの小ネタで。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/concatenate-images/",
      "published": "2020-05-04T04:20:55+00:00",
      "update": "2020-05-04T04:22:47+00:00",
      "content": "今回もお遊びの小ネタで。 複数の画像データを連結してひとつの画像データにすることを考えてみる。\n具体的には image-1.png と image-2.png の2つの画像データを使って\n 元の画像データから各々 image.Image を取得する 各 image.Image から矩形情報を抽出し，空の結合 image.Image を生成する 空の結合 image.Image に元の image.Image を貼り付ける 結合 image.Image を PNG データとして出力する  といった手順。 図にすると\n といった感じか。\nそれでは順にコードを書いてみよう。\n画像データから image.Image を取得する ファイルから image.Image を取得する関数はこんな感じでどうだろう。\nimport ( \u0026#34;image\u0026#34; _ \u0026#34;image/png\u0026#34; \u0026#34;os\u0026#34; ) func imageFrom(path string) (image.Image, error) { file, err := os.Open(path) if err != nil { return nil, err } defer file.Close() img, _, err := image.Decode(file) if err != nil { return nil, err } return img, nil } 今回は PNG データのみ取り扱うので image/png パッケージのみインポートしているが，他の形式も取り扱うのであれば各形式のパッケージを（暗黙的に）インポートして「依存の注入」を行えばよい。\nちなみに image.Image は interface 型で\n// Image is a finite rectangular grid of color.Color values taken from a color // model. type Image interface { // ColorModel returns the Image\u0026#39;s color model. \tColorModel() color.Model // Bounds returns the domain for which At can return non-zero color. \t// The bounds do not necessarily contain the point (0, 0). \tBounds() Rectangle // At returns the color of the pixel at (x, y). \t// At(Bounds().Min.X, Bounds().Min.Y) returns the upper-left pixel of the grid. \t// At(Bounds().Max.X-1, Bounds().Max.Y-1) returns the lower-right one. \tAt(x, y int) color.Color } と定義されている。 ここで定義される image.Image.Bounds() メソッドを使えば矩形情報 image.Rectangle が取れるので，ここから画像の幅や高さも分かるというわけ。\nfunc main() { img, err := imageFrom(\u0026#34;image-1.png\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } rct := img.Bounds() fmt.Println(\u0026#34;Width:\u0026#34;, rct.Dx(), \u0026#34;, height:\u0026#34;, rct.Dy()) \t//Output: \t//Width: 352 , height: 219 } 空の結合 image.Image を生成する まずは元の画像データの image.Image を保持っておくところから始めよう。 こんな感じ。\nsrcImages := make([]image.Image, 0, len(srcPaths)) for _, path := range srcPaths { img, err := imageFrom(path) if err != nil { return err } srcImages = append(srcImages, img) } このタイミングで結合 image.Image の幅と高さも計算してしまおう。\nsrcImages := make([]image.Image, 0, len(srcPaths)) width, height := 0, 0 for _, path := range srcPaths { img, err := imageFrom(path) if err != nil { return err } rct := img.Bounds() width = max(width, rct.Dx()) height += rct.Dy()  srcImages = append(srcImages, img) } ちなみに max() 関数は\nfunc max(x, y int) int { if x \u0026gt; y { return x } return y } と定義している1。\nこれで，算出した width, height を使って，空の image.Image を生成できる。 こんな感じ。\ndstImage := image.NewRGBA(image.Rect(0, 0, width, height)) 空の結合 image.Image に元の image.Image を貼り付ける ここまでくれば，あとは機械的な繰り返し作業。\noffset := 0 for _, img := range srcImages { srcRect := img.Bounds() draw.Draw( dstImage, image.Rect(0, offset, srcRect.Dx(), offset+srcRect.Dy()), img, image.Point{0, 0}, draw.Over, ) offset += srcRect.Dy() } 結合 image.Image を PNG データとして出力する 結合 image.Image をファイルに出力するにはこんな感じにすればよい。\nfile, err := os.Create(dstPath) if err != nil { return err } defer file.Close() if err := png.Encode(file, dstImage); err != nil { return err } 上のコードは PNG 形式で出力する場合。 各形式へのエンコーディングは（image.Decode() 関数のように）抽象化されていないので，それぞれの形式のパッケージが提供しているエンコーダを使う必要がある（image パッケージに準拠していれば自作も可能）。\n実行結果 一連の手順を関数化してみる。 こんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;image\u0026#34; \u0026#34;image/draw\u0026#34; \u0026#34;image/png\u0026#34; \u0026#34;os\u0026#34; ) func imageFrom(path string) (image.Image, error) { file, err := os.Open(path) if err != nil { return nil, err } defer file.Close() img, _, err := image.Decode(file) if err != nil { return nil, err } return img, nil } func max(x, y int) int { if x \u0026gt; y { return x } return y } func concatImageFiles(dstPath string, srcPaths ...string) error { srcImages := make([]image.Image, 0, len(srcPaths)) width, height := 0, 0 for _, path := range srcPaths { img, err := imageFrom(path) if err != nil { return err } rct := img.Bounds() width = max(width, rct.Dx()) height += rct.Dy() srcImages = append(srcImages, img) } dstImage := image.NewRGBA(image.Rect(0, 0, width, height)) offset := 0 for _, img := range srcImages { srcRect := img.Bounds() draw.Draw( dstImage, image.Rect(0, offset, srcRect.Dx(), offset+srcRect.Dy()), img, image.Point{0, 0}, draw.Over, ) offset += srcRect.Dy() } file, err := os.Create(dstPath) if err != nil { return err } defer file.Close() if err := png.Encode(file, dstImage); err != nil { return err } return nil }  func main() { if err := concatImageFiles(\u0026#34;out.png\u0026#34;, \u0026#34;image-1.png\u0026#34;, \u0026#34;image-2.png\u0026#34;); err != nil { fmt.Fprintln(os.Stderr, err) return } } これを実行すると以下の画像データが出力される。\n out.png  よーし，うむうむ，よーし。\nブックマーク  Go言語で複数の画像を縦に連結する - Qiita Go 言語で画像のサイズを変更する  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   Go の標準ライブラリには整数型の Min/Max 関数は用意されていないので，必要に応じて自前で用意する必要がある。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "日本の暦情報を取得するパッケージを作ってみた",
      "section": "release",
      "description": "「国立天文台 天文情報センター 暦計算室」より日本の暦情報を取得する Go 言語用パッケージです。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/05/koyomi/",
      "published": "2020-04-30T20:52:53+00:00",
      "update": "2020-05-01T00:21:52+00:00",
      "content": "いやね。\n 国立天文台の暦要項データを取得する - Qiita  ちう記事を見かけて「Go 言語でも似たようなコードを書けばいいぢゃん」と軽く考えたわけですよ。\n実は Google Calendar を操作する Go 言語用パッケージとしては Google 公式の\n google.golang.org/api/calendar/v3  ってのがあるのだが，これって認証とか含めたガチなやつなのよ。 でも欲しいのは国立天文台から「公開」されているただの暦情報なので，こんなガチなやつは（面倒くさいだけだし）要らないわけ。\nもっとお気楽に使える iCal パーサがないかなぁ，と思ったらありました。\n PuloV/ics-golang: Golang ics parser  ありがたや。\n早速，これを使って日本の暦情報を取得するパッケージを作ってみた。\n spiegel-im-spiegel/koyomi: 日本のこよみ  これを使った以下のコードは，2020年5月の祝日・休日と二十四節気・雑節を CSV 形式で出力するもの。\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/koyomi\u0026#34; ) func main() { start, _ := koyomi.DateFrom(\u0026#34;2020-05-01\u0026#34;) end, _ := koyomi.DateFrom(\u0026#34;2020-05-31\u0026#34;) k, err := koyomi.NewSource( koyomi.WithCalendarID(koyomi.Holiday, koyomi.SolarTerm), koyomi.WithStartDate(start), koyomi.WithEndDate(end), ).Get() if err != nil { fmt.Fprintln(os.Stderr, err) return } b, err := k.EncodeCSV() if err != nil { fmt.Fprintln(os.Stderr, err) return } io.Copy(os.Stdout, bytes.NewReader(b)) } これを実行すると\n$ go run sample.go \u0026#34;Date\u0026#34;,\u0026#34;Title\u0026#34; \u0026#34;2020-05-01\u0026#34;,\u0026#34;八十八夜\u0026#34; \u0026#34;2020-05-03\u0026#34;,\u0026#34;憲法記念日\u0026#34; \u0026#34;2020-05-04\u0026#34;,\u0026#34;みどりの日\u0026#34; \u0026#34;2020-05-05\u0026#34;,\u0026#34;こどもの日\u0026#34; \u0026#34;2020-05-05\u0026#34;,\u0026#34;立夏\u0026#34; \u0026#34;2020-05-06\u0026#34;,\u0026#34;休日\u0026#34; \u0026#34;2020-05-20\u0026#34;,\u0026#34;小満\u0026#34; てな感じになる。 また\nb, err := k.EncodeCSV() の部分を\nb, err := k.EncodeJSON() と書き換えれば\n$ go run sample.go | jq . [ { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-01\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;八十八夜\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-03\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;憲法記念日\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-04\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;みどりの日\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-05\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;こどもの日\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-05\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;立夏\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-06\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;休日\u0026#34; }, { \u0026#34;Date\u0026#34;: \u0026#34;2020-05-20\u0026#34;, \u0026#34;Title\u0026#34;: \u0026#34;小満\u0026#34; } ] てな感じに JSON 形式でも出力できる。\nkoyomi.WithCalendarID(), koyomi.WithStartDate(), koyomi.WithEndDate() 各関数は Functional Option なので省略可能である。 まぁ，全部省略したら何も取れないけど（笑）\nkoyomi.WithCalendarID() 関数には1個以上の koyomi.CalendarID を指定できる。 指定できる koyomi.CalendarID は以下の通り。\nconst ( Holiday CalendarID = iota + 1 //国民の祝日および休日  MoonPhase //朔弦望  SolarTerm //二十四節気・雑節  Eclipse //日食・月食・日面経過  Planet //惑星現象 ) 取得できるイベントは日本時間がベースになっていて，しかも（終日イベントなので）日付のみ有効である。 時刻情報はカットされているのであしからず。\nあと PuloV/ics-golang パッケージの仕様の問題で，リモートにある iCal ファイルを一時ファイルに落とし込むようだ。 落とし込み先ディレクトリの既定がカレントの tmp/ になっている（ない場合は tmp/ ディレクトリを作成しようとする）。 このディレクトリを指定するのであれば\nk, err := koyomi.NewSource( koyomi.WithCalendarID(koyomi.Holiday, koyomi.SolarTerm), koyomi.WithStartDate(start), koyomi.WithEndDate(end), koyomi.WithTempDir(\u0026#34;/home/username/.cache/\u0026#34;), ).Get() などとすればよい。\nぶっちゃけ遅いです。 まぁ Google Calndar から iCal ファイルをフィルタリングなしでまるっと取ってくるのだから遅いに決まってるのだけど。 実務で使うならバッチ処理でデータベース等に保持っておくのがよろしいかと思われ。\nブックマーク  暦要項 - 国立天文台暦計算室 暦Wiki - 国立天文台暦計算室  暦Wiki/月の満ち欠け/いろいろな月たち - 国立天文台暦計算室 暦Wiki/季節/二十四節気とは？ - 国立天文台暦計算室 暦Wiki/季節/雑節とは？ - 国立天文台暦計算室 暦Wiki/日面経過 - 国立天文台暦計算室   こよみ用語解説 天象 - 国立天文台暦計算室 カレンダーに祝日を入れたいなら国立天文台へ行けばいいじゃない  "
    },
    {
      "title": "2020-04-26 のブックマーク",
      "section": "bookmarks",
      "description": "「Announcing Rust 1.43.0」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/04/26-bookmarks/",
      "published": "2020-04-26T08:07:27+00:00",
      "update": "2020-04-26T08:07:41+00:00",
      "content": "リリース情報  Release v3.000 · googlefonts/Inconsolata · GitHub Announcing Rust 1.43.0 | Rust Blog Hugo 0.69.1: A couple of Bug Fixes | Hugo Hugo 0.69.2: A couple of Bug Fixes | Hugo  セキュリティ＆プライバシー関連  Zoom、中国を経由しないルーティングを実装。有償ユーザーは地域設定可能に - PC Watch California Needlessly Reduces Privacy During COVID-19 Pandemic - Schneier on Security 表現の自由に不可欠な「匿名でいる権利」 | P2Pとかその辺のお話R RemoteWorksのシステム障害をまとめてみた - piyolog テレワークを行う際のセキュリティ上の注意事項：IPA 独立行政法人 情報処理推進機構 Nintendo Switchに必須の「ニンテンドーアカウント」で不正ログイン被害が続発、任天堂は二段階認証を有効にすることを公式に推奨 - GIGAZINE OpenSSL の脆弱性対策について(CVE-2020-1967) ：IPA 独立行政法人 情報処理推進機構  OpenSSL の脆弱性 (CVE-2020-1967) に関する注意喚起   Another Story of Bad 1970s Encryption - Schneier on Security iPhoneのメールアプリの脆弱性を狙うゼロクリック攻撃についてまとめてみた - piyolog Global Surveillance in the Wake of COVID-19 - Schneier on Security ニンテンドーアカウントを狙った不正ログインについてまとめてみた - piyolog  天文関連  「オウムアムア」は破壊された天体の破片だったとする研究成果が発表される | sorae 宇宙へのポータルサイト  その他  Newsboat, an RSS reader 「Python 2.7.18」がリリース ～「Python 2」シリーズの最終版 - 窓の杜 GitLab、有償版の機能をオープンソースへ移植すると発表。カンバン表示やカナリーデプロイ、複数のKubenretesクラスタの使い分けなど18機能 － Publickey パッチ盤からケーブルを引っこ抜いてしまいCloudflareに障害発生。ケーブルにラベリングされておらずどれを戻すべきかすぐに分からず － Publickey GitHub、npmの買収完了を発表。npmレジストリ基盤とプラットフォームへの投資など強化 － Publickey 最近知ったこと(AWS FireLens編) - gitkadoの日記 好みの言語でIaCできるPulumでGoや.NETが使えるように、構成対象も拡張 | TechCrunch Japan  "
    },
    {
      "title": "Ubuntu 20.04 にアップグレードする",
      "section": "release",
      "description": "よーやく GnuPG/Libgcrypt のバージョンが上がったよ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/04/upgrade-ubuntu-20_04/",
      "published": "2020-04-26T07:58:37+00:00",
      "update": "2020-05-10T01:48:41+00:00",
      "content": "Ubuntu 20.04 がリリースされた。 20.04 は長期サポート版で2025年4月までサポートが有効である。\n Ubuntu 20.04 LTS arrives | Ubuntu FocalFossa/ReleaseNotes - Ubuntu Wiki  19.10 または長期サポート版の 18.04 から 20.04 へのアップグレードはリリースノートを参考にするとよい。 基本的には\n$ update-manager -c -d とアップグレード・モードで GUI を起動すれば，あとはよろしくやってくれる。 ただし 20.04 では32bitアーキテクチャをサポートしなくなったので，この場合は 18.04 からアップグレードしてはいけない1。\nなお，アップグレード時にサードパーティの APT リポジトリ（git や ATOM など）が外れるので，必要ならアップグレード時に戻して更新すること。\n個別のアプリケーションについて GnuPG および Libgcrypt よーやく GnuPG/Libgcrypt のバージョンが上がったよ。\n$ gpg --version gpg (GnuPG) 2.2.19 libgcrypt 1.8.5 Copyright (C) 2019 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 まぁ，現時点での最新版は 2.2.20 だけどね。 ちなみに GnuPG 2.2.18 から SHA-1 電子署名の扱いが変わったのでご注意を。\n GnuPG 2.2.18 リリース： さようなら SHA-1  OpenSSH および OpenSSL アップグレード直後の OpenSSH および OpenSSL のバージョンは以下のとおりだった。\n$ ssh -V OpenSSH_8.2p1 Ubuntu-4, OpenSSL 1.1.1f 31 Mar 2020 OpenSSH は 2020-02-14 にリリースされた最新版が入っているようだ。 ただ OpenSSL はこの前セキュリティ・アップデートがあったばかりなんだよねぇ。\n OpenSSL の脆弱性対策について(CVE-2020-1967) ：IPA 独立行政法人 情報処理推進機構 OpenSSL の脆弱性 (CVE-2020-1967) に関する注意喚起  まぁ，間に合わなかったんだろうけど。 CVSSv3 のスコアが 7.5 で深刻度が高いので早めの対応をお願いしたい。\n保留されているパッケージ アップグレード後に libc++1 が保留状態で残っていた。 保留状態のパッケージがある場合は\n$ sudo apt full-upgrade で保留分をまとめてアップグレードするか，個別に\n$ sudo apt install libc++1 などとすればいいようだ。\nGCC が消えとるがな アップグレードしたら何故か GCC が削除されてた orz\nしょうがないので\n$ sudo apt install build-essential したですよ。 Rust のコンパイル・リンクも問題なく動くみたいだし，いっかな2。\nちなみに GCC は 9.3 が導入される。\nATOM も削除される サードパーティ・リポジトリから ATOM をインストールしている場合，アップグレード時に APT のリストからリポジトリが外されるだけだが，今回の 20.04 へのアップグレードでは ATOM 自体がまるっと削除される。\nただし設定やパッケージはそのまま残っているので，リポジトリ設定を戻して apt install し直せばおっけ。\n Installing Atom  Lollypop どうやら Lollypop は標準の APT リポジトリに入ったらしい。 いつからだ？\n$ apt show lollypop Package: lollypop Version: 1.2.35-1 Priority: optional Section: universe/gnome Origin: Ubuntu ... ちうわけで，もう PPA リポジトリを使わなくともよさそうである，多分。\n【追記 2020-04-28】 Libsecret のアップデート Git credential helper である GNOME/libsecret もバージョンが上がっているようだ。\n$ apt show libsecret-1-dev Package: libsecret-1-dev Version: 0.20.2-1 Priority: optional Section: libdevel Source: libsecret Origin: Ubuntu ... GNOME/libsecret は apt upgrade しただけではダメで，手動でビルドする必要がある。\n$ mkdor ~/work $ cd ~/work $ cp -r /usr/share/doc/git/contrib/credential/libsecret . $ cd libsecret $ make gcc -g -O2 -Wall -pthread -I/usr/include/libsecret-1 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-libsecret.o -c git-credential-libsecret.c gcc -o git-credential-libsecret git-credential-libsecret.o -lsecret-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0 これで生成した git-credential-libsecret を $PATH の通ったディレクトリに放り込んでおけばよい。\n PPA から Git をインストールする  ブックマーク  Ubuntu 20.04 その23 - Ubuntu 20.04 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 20.04 その24 - Ubuntu 20.04 LTSの新機能と変更点 - kledgeb Ubuntu 20.04 その25 - Ubuntu 20.04 LTSの既知の問題 - kledgeb Ubuntu 20.04 その26 - Ubuntu 20.04.1 LTSのリリーススケジュール・Ubuntu 18.04 LTSユーザーにアップグレードパスの提供 - kledgeb Ubuntu 20.04 その27 - Qt 5.14.2の採用見送りとQt 5.12.8の採用 - kledgeb Ubuntu 20.04 その28 - Ubuntu Desktopの新機能と魅力・様々な新機能と改良点の紹介 - kledgeb Ubuntu 20.04 その29 - Linux kernel 5.4の新機能 - kledgeb Ubuntu 20.04 LTSインストールガイド【スクリーンショットつき解説】 | LFI (今はまだ)WSL1にUbuntu 20.04を入れるな - Qiita    Ubuntu 18.04 のサポート期間は2023年4月まで。 18.04 サポート満了を以って32bit版 Ubuntu のサポートは終了する。ので，早めに64bitアーキテクチャへのリプレースを検討しませう。 \u0026#x21a9;\u0026#xfe0e;\n Rust も APT で導入できるようだが，バージョンが古いので，最新版が必要なら APT は使わないほうがよい。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 言語でもグラフを描きたい！",
      "section": "golang",
      "description": " Gonum は本来，数値計算パッケージなのだが plot パッケージを使って簡単なグラフを描くこともできるらしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/chart-with-golang/",
      "published": "2020-04-25T11:48:53+00:00",
      "update": "2020-04-25T11:51:05+00:00",
      "content": "いや，決まったデータに対して棒グラフとか折れ線グラフとか簡単に描けないかなぁ，と思っただけなんスけどね。 ぶっちゃけ「グラフを描く」だけなら，それこそ gnuplot で必要十分なんだけど，今回もお遊びということで。\nとはいえ自前でコードを書くのはアレなので，なにか手頃なパッケージはないかなぁ，とググってみたら Gonum ってのがいいらしい。 Gonum は\nGonum contains libraries for matrices and linear algebra; statistics, probability distributions, and sampling; tools for function differentiation, integration, and optimization; network creation and analysis; and more. via Gonum  とある通り，本来は数値計算パッケージなのだが， plot パッケージを使って簡単なグラフを描くこともできるらしい。 どんなグラフが描けるかについては以下が参考になる。\n Example plots · gonum/plot Wiki · GitHub  試しに何か描いてみる。\n棒グラフを描いてみる まずは普通に棒グラフを描いてみよう。 ちょっと長いが，こんな感じのコードでどうだろう。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;math\u0026#34; \u0026#34;os\u0026#34; \u0026#34;gonum.org/v1/plot\u0026#34; \u0026#34;gonum.org/v1/plot/plotter\u0026#34; \u0026#34;gonum.org/v1/plot/plotutil\u0026#34; \u0026#34;gonum.org/v1/plot/vg\u0026#34; \u0026#34;gonum.org/v1/plot/vg/draw\u0026#34; ) type CaseData struct { Date string NewCases int } var Dataset = []CaseData{ {\u0026#34;2020-04-18\u0026#34;, 628}, {\u0026#34;2020-04-19\u0026#34;, 566}, {\u0026#34;2020-04-20\u0026#34;, 390}, {\u0026#34;2020-04-21\u0026#34;, 368}, {\u0026#34;2020-04-22\u0026#34;, 377}, {\u0026#34;2020-04-23\u0026#34;, 423}, {\u0026#34;2020-04-24\u0026#34;, 469}, } func main() { //import data \tlabelX := []string{} dataY := plotter.Values{} for _, d := range Dataset { labelX = append(labelX, d.Date) dataY = append(dataY, (float64)(d.NewCases)) } //new plot \tp, err := plot.New() if err != nil { fmt.Fprintln(os.Stderr, err) return } //new bar chart \tbar, err := plotter.NewBarChart(dataY, vg.Points(20)) if err != nil { fmt.Fprintln(os.Stderr, err) return } bar.LineStyle.Width = vg.Length(0) bar.Color = plotutil.Color(2) //plotutil.SoftColors[2] \tbar.Offset = 0 bar.Horizontal = false p.Add(bar) //legend \tp.Legend.Add(\u0026#34;New confirmed cases by date\u0026#34;, bar) p.Legend.Top = true //top \tp.Legend.Left = false //right \tp.Legend.XOffs = 0 p.Legend.YOffs = -10 //labels of X \tp.NominalX(labelX...) p.X.Label.Text = \u0026#34;Date\u0026#34; p.X.Padding = 0 p.X.Width = p.Y.Width p.X.Tick.Label.Rotation = math.Pi / 2.5 p.X.Tick.Label.XAlign = draw.XRight p.X.Tick.Label.YAlign = draw.YCenter //labels of Y \tp.Y.Label.Text = \u0026#34;Cases\u0026#34; p.Y.Padding = 0 p.Y.Min = 0 p.Y.Max = 800 //title \tp.Title.Text = \u0026#34;Confirmed COVID-2019 Cases in Japan\u0026#34; //output image \tif err := p.Save(15*vg.Centimeter, 15*vg.Centimeter, \u0026#34;bar-chart-1.png\u0026#34;); err != nil { fmt.Fprintln(os.Stderr, err) return } } 実行結果はこんな感じ。\n bar-chart-1.png  Gonum でも日本語を使いたい plot/vg パッケージにはいくつかのフリー・フォントが含まれている。 どのようなフォントが使えるかについては vg.FontMap を参照すればよい。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;gonum.org/v1/plot/vg\u0026#34; ) func main() { for k, v := range vg.FontMap { fmt.Println(k, \u0026#34;:\u0026#34;, v) } //Output:  //Helvetica-Oblique : LiberationSans-Italic  //Helvetica-BoldOblique : LiberationSans-BoldItalic  //Times-Italic : LiberationSerif-Italic  //Courier : LiberationMono-Regular  //Courier-Bold : LiberationMono-Bold  //Courier-Oblique : LiberationMono-Italic  //Helvetica : LiberationSans-Regular  //Helvetica-Bold : LiberationSans-Bold  //Times-BoldItalic : LiberationSerif-BoldItalic  //Courier-BoldOblique : LiberationMono-BoldItalic  //Times-Roman : LiberationSerif-Regular  //Times-Bold : LiberationSerif-Bold } たとえば，先程のコードに\n//default font plot.DefaultFont = \u0026#34;Courier\u0026#34; plotter.DefaultFont = \u0026#34;Courier\u0026#34; を追加すれば\n bar-chart-2.png  という感じに既定フォントを入れ換えることができる。\nplot/vg パッケージに含まれるフォントは当然ながら日本語の字体を含んでいない。 日本語が使いたいのであれば，別途日本語フォントを読み込む必要がある1。 こんな感じ。\n//import japanese fonts b, err := ioutil.ReadFile(\u0026#34;/usr/local/texlive/2020/texmf-dist/fonts/truetype/public/ipaex/ipaexg.ttf\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } ft, err := truetype.Parse(b) if err != nil { fmt.Fprintln(os.Stderr, err) return } fontName := \u0026#34;ipaex\u0026#34; vg.AddFont(fontName, ft) //default font plot.DefaultFont = fontName plotter.DefaultFont = fontName 今回は TeX Live 2020 に収録されている IPAex フォントを流用してみた。 これを使って，更にラベルのいくつかを日本語に置き換えたのがこちら。\n bar-chart-3.png  またグラフの各要素に対して個別にフォントを指定するのであれば\n//set fonts font, err := vg.MakeFont(fontName, 10) if err != nil { fmt.Fprintln(os.Stderr, err) return } p.Title.Font = font p.X.Label.Font = font p.Y.Label.Font = font p.X.Tick.Label.Font = font p.Y.Tick.Label.Font = font p.Legend.Font = font のように書ける。\nフォントの読み込みには github.com/golang/freetype/truetype パッケージを使っているのだが，どうも TTC (TrueType Collections) ファイルには対応していない模様。 たとえば Ubuntu 19.10 に収録されている NOTO フォントを使おうとしたが\nb, err := ioutil.ReadFile(\u0026#34;/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } ft, err := truetype.Parse(b) if err != nil { fmt.Fprintln(os.Stderr, err) //Output: freetype: invalid TrueType format: bad TTF version  return } 実行時エラーになってしまった。 ちなみに OTF ファイルにも対応してない。 まぁ，文章を書くんじゃないから IPA フォントでも十分だよね。\nブックマーク  gonum · GitHub Golangで棒グラフを描く - 逆さまにした Golangでローソク足チャートを描くパッケージを書いた - 逆さまにした Golangでグラフを描く - Qiita Go言語で折れ線グラフや棒グラフを描く - Qiita TeX Live 2020 へのアップグレード  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   OS のフォント・キャッシュが使えればいいんだけど plot/vg パッケージ単体では無理みたい。どなたかいい方法があれば教えてください。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go Playground でお絵描き",
      "section": "golang",
      "description": "今回はストレス発散な話。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/imaging-with-go-playground/",
      "published": "2020-04-24T05:33:05+00:00",
      "update": "2020-04-24T05:33:18+00:00",
      "content": "全国非常事態宣言の折，皆様いかがお過ごしでしょうか。 完全失業中の私は，家族からは白い目で見られ，かといって気晴らしの外出も自粛ムードでままならず，涙目状態です。 どなたか松江で仕事ください。\nというわけで，今回はストレス発散な話。 つかですね，\n The Go Playgroundの実行結果に画像を出力する - My External Storage  という記事を見て自分でも試してみようかな，と。\nGo Playground で Display image を選択すると以下のコードが表示され，実行すると favicon 画像データが表示される。\n Display image: The Go Playground  画像表示の核心部分は以下のコードのようだ。\n// displayImage renders an image to the playground\u0026#39;s console by // base64-encoding the encoded image and printing it to stdout // with the prefix \u0026#34;IMAGE:\u0026#34;. func displayImage(m image.Image) { var buf bytes.Buffer err := png.Encode(\u0026amp;buf, m) if err != nil { panic(err) } fmt.Println(\u0026#34;IMAGE:\u0026#34; + base64.StdEncoding.EncodeToString(buf.Bytes())) } image.Image インスタンスを PNG 形式でエンコードし，さらに BASE64 形式で文字符号化する。 これに \u0026quot;IMAGE:\u0026quot; を頭にくっつけて「表示」すればいいようだ。 当然ながら Go Playground 特有の機能なので，他の環境では機能しない（機能されては困るw）。\nリモートのファイルを表示できれば面白かったのだが，残念ながら Go Playground では TCP/IP によるリモートアクセスが潰されている（まぁアクセスできたら踏み台し放題になっちゃうからしないんだろうけど）。\nそこで画像データをあらかじめ文字列符号化してソースコードに埋め込めば\nvar imageFromBase64 = `...` func getimage() (image.Image, error) { img, _, err := image.Decode(base64.NewDecoder(base64.StdEncoding, strings.NewReader(imageFromBase64))) return img, err } func main() { img, err := getimage() if err != nil { fmt.Fprintln(os.Stderr, err) return } displayImage(img) } てな感じで任意の画像を表示できるだろう1。 たとえば，こんな感じ。\n Display image: The Go Playground  ここで画像データのスケール変換をやってみる。 以前書いた「Go 言語で画像のサイズ変更：定義済み draw.Scaler の比較」を参考に main() 関数を以下のように書き換える。\nfunc scale(src image.Image, rect image.Rectangle, scaler draw.Scaler) image.Image { dst := image.NewRGBA(rect) scaler.Scale(dst, rect, src, src.Bounds(), draw.Over, nil) return dst } func main() { img, err := getimage() if err != nil { fmt.Fprintln(os.Stderr, err) return } //scale down \tdisplayImage(scale(img, image.Rect(0, 0, 80, 80), draw.NearestNeighbor)) } いちばん（速くて）変換性能が悪い draw.NearestNeighbor を使ってみた（笑）\n結果はこんな感じ。\n Display image: The Go Playground  よーし，うむうむ，よーし。\nブックマーク  Go 言語で画像のサイズを変更する  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   大きな画像を Go Playground で表示しようとすると失敗（タイムアウト？）する場合がある。また複数の画像は表示できないっぽい。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Git v2.26.2 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": " 前回の CVE-2020-5260 が直りきってなかったってことでいいのかな？",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/04/git-2_26_2-is-released/",
      "published": "2020-04-21T00:12:19+00:00",
      "update": "2020-04-21T07:42:22+00:00",
      "content": "Git v2.26.2 を含む複数のバージョンがリリースされた。\n [Announce] Git v2.26.2 and others  対象となるのは 2.17.x から 2.26.x までの各マイナーバージョン。 前回の CVE-2020-5260 が直りきってなかったってことでいいのかな？\nThese releases address the security issue CVE-2020-11008, which is similar to the recently addressed CVE-2020-5260. via Git v2.26.2 and others  CVE-2020-5260 と同様ということは深刻度も「緊急」ちうことかな。 CVE-2020-5260 については，前のリリース記事を参考にどうぞ。\nCVE-2020-11008 未稿\nアップデートは\u0026hellip; Ubuntu であれば PPA 版リポジトリを利用することをおすすめする。\n PPA から Git をインストールする  アップデートは計画的に。\nブックマーク  Release Git for Windows 2.26.2 · git-for-windows/git · GitHub  "
    },
    {
      "title": "2020-04-18 のブックマーク",
      "section": "bookmarks",
      "description": "「GitHub、チームでの利用も無料に。プライベートリポジトリ数も制限なく、チームディスカッション、ActionsによるCI/CDも可能」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/04/18-bookmarks/",
      "published": "2020-04-18T01:28:48+00:00",
      "update": "2020-04-18T01:29:14+00:00",
      "content": "リリース情報  Hugo 0.69.0 allows you to delay resource processing to after the build, the prime use case being removal of unused CSS. | Hugo LibreOffice 6.4.3 available for download - The Document Foundation Blog  セキュリティ＆プライバシー関連  Contact Tracing COVID-19 Infections via Smartphone Apps - Schneier on Security 国内高校の半数が利用するClassiの不正アクセスについてまとめてみた - piyolog Intel、2020年4月のセキュリティアドバイザリを公開 ～NUCのファームフェアなどに問題 - 窓の杜  天文関連  肉眼で見える可能性のアトラス彗星、核の崩壊が確認される | sorae 宇宙へのポータルサイト  知財関連  COVID-19 \u0026lsquo;Lockdowns\u0026rsquo; Directly Impacted Torrent Download Numbers in Several Countries * TorrentFreak 「Instagramの埋め込みは著作権侵害に当たらない」という判決が下る - GIGAZINE  Linux または Ubuntu に関する話題  Ubuntu 19.10 その165 - Snap Storeからインストール可能なアプリ5選 - kledgeb  その他  Google、SRE本の第三弾「Building Secure and Reliable Systems」を無料公開 － Publickey Status of LibreOffice for Android and iOS - The Document Foundation Blog jQueryが久しぶりにバージョンアップ、「jQuery 3.5.0」に。セキュリティフィクスによる破壊的変更あり － Publickey IBMら、不足するCOBOLプログラマーの確保を支援\u0026ndash;米失業保険申請の急増で - ZDNet Japan パンデミックから命を救う「修理する権利」 | P2Pとかその辺のお話R この困難な時期に文化を共有するということ | P2Pとかその辺のお話R KubernetesのノードとしてWebAssemblyランタイムを用いる「Krustlet」、マイクロソフトが公開 － Publickey 最近知ったこと(Amazon RDS Proxy編) - gitkadoの日記 GitHub、チームでの利用も無料に。プライベートリポジトリ数も制限なく、チームディスカッション、ActionsによるCI/CDも可能 － Publickey 「Unicode 14.0」のリリースは6カ月延期 ～新型コロナウイルスの影響がボランティアを直撃 - 窓の杜  "
    }
  ]
}
