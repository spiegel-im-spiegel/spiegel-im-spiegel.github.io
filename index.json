{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "国勢調査の思ひ出",
      "section": "remark",
      "description": "まだ回答してない人でネット回答可能であれば，ネットのほうが断然楽。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/10/census/",
      "published": "2020-10-01T03:09:11+00:00",
      "update": "2020-10-01T05:00:06+00:00",
      "content": "知り合いのブログ記事で\n 国勢調査オンライン - 電気ウナギ的○○  というのがあって「そういや前回はネットで回答したな」と思い出して作業用リポジトリに grep かけて探してみたらやっぱり書いてた。\n 国勢調査を片付けた  なんでも記事にしておくものである。 5年前の私 good work!\nあの会社は今 当時は「国勢調査オンライン」のサイト証明書は Symantec 社が発行していて，ページにデカデカとロゴが貼り付けてあって苦笑したものだが，当の Symantec 社は CA 事業の不祥事で Web ブラウザのベンダ企業から信用されなくなり，2017年に事業を手放している。\n Symantec→DigiCertでSSL/TLS証明書はどうなる？　日本国内にも認証局構築へ、IoT機器市場も見据え - INTERNET Watch  今回はどうしてるんだろうと見てみたら DigiCert 社だったよ。 何も変わってないな（笑）\nそういや DigiCert 社のルート CA 証明書は RSA/2048 鍵で2031年まで有効なんだよな。 ちなみに RSA/2048 鍵が acceptable なのは2030年までだ。 まぁ鼻の先は問題ないが，政府調達品でこの程度の認識しかない企業を使うのはどうなんだろう。\n【追記】 Facebook で教えてもらったが DigiCert 社の CA 証明書はよりサイクルの短いものに順次切り替えていくそうだ。 Web 用のサーバ証明書は長くても1年程度のサイクルになる筈だし，数年かけて切り替えていくイメージだろうか。 なりすましと本人確認 そういや5年前はうっかり Phishing サイトを作って怒られた輩がいて話題になった。\n 国勢調査の“偽サイト”作った意図は？　総務省から削除依頼……「騒ぎになり深く反省」と制作者 (1/3) - ITmedia ニュース  最近の「ドコモロ系事案」を引くまでもなく，なりすましや本人確認は古くて新しい問題であり続ける。 このご時世に「オンライン推奨」とか現政権は勇気あるな（皮肉）\n国勢調査が面白いのは，基本的に「戸」単位であり，その枠組みの中で識別できていれば「本人確認」は必ずしも必要条件ではないということだ。 そして，その「戸」単位の確認を行うのが「国勢調査員」である。 これは紙でもネットでも同じこと。 ネットで回答するにしても，そのアカウント情報は国勢調査員から貰わなければならない。\nそもそも路上生活者とかにも国勢調査員が出向いて聞き取り調査するんだよ。 日本語が通じない人達だって相当数いるだろうに，ホンマ国勢調査員のご苦労は察するにあまりある。\n故に「『コロナ』だからオンライン推奨」というのは全く以って詭弁である。 ちなみに，今回うちで国勢調査の回答をしたのは親父殿だが，パソコンもスマホも持ってないので紙で回答したらしい。 私？ 私はただの居候ですから（笑）\n「国勢調査オンライン」はダサいか どうも「国勢調査オンライン」のサイトをダサいとか文句を言ってる人がいるらしい。 まぁ今風ではないな（笑）\n今回は私は回答してないのでどうだったかは知らないが，前回ネットで回答してめっさ楽だったのは覚えている。 ぶっちゃけて言うが\n政府系サイトに SEO (屁のつっぱり)  は要らんですよ そもそも Web アクセシビリティってそんな簡単じゃない。 うちのサイトもそうだけど，本当に不特定に見易い使い易いサイトなんか無理である。 このブログサイトをダークモードにしてるのは，主に「私」のためだ。\nできるだけ多くの人に対応しようとして結果として今風じゃないデザインになったとしても，利用者が文句を言う筋合いじゃないのだ。 機能要件やセキュリティ要件を満たしていない部分があるのなら，文句を言って然るべきだけど（笑）\nというわけで，まだ回答してない人でネット回答可能であれば，ネットのほうが断然楽なので，お試しあれ。\nいまさら思い出したが\u0026hellip; このブログサイト，正式オープンから5周年だわ。 何も考えてなかった。\nまぁ，この前買ったタブレットがご褒美ということで（笑）\nブックマーク  NIST SP 800-207: “Zero Trust Architecture” Authenticator と AAL  "
    },
    {
      "title": "GitHub Actions でクロス・コンパイル（GoReleaser 編）",
      "section": "golang",
      "description": "公式の GitHub Action があるので，それを使えばよい。簡単！",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/cross-compiling-in-github-actions-with-goreleaser/",
      "published": "2020-09-30T06:14:35+00:00",
      "update": "2020-09-30T07:22:49+00:00",
      "content": "以前（3年前だ！）に Travis CI と GoReleaser でクロス・コンパイル\u0026amp;デプロイを行う方法を紹介したが，今回は GitHub Actions を使う方法を紹介する。 なお GoReleaser 自体の説明については（だいぶ内容が古いが）以下の記事を参考にどうぞ。\n Travis CI でクロス・コンパイル（GoReleaser 編）  紹介と言っても公式の GitHub Action があるので，それを使えばよい。\n goreleaser/goreleaser-action: GitHub Action for GoReleaser  リポジトリの .github/workflows/ ディレクトリに YAML ファイル（例えば build.yml）を置き，以下のように記述する。\nname:buildon:push:tags:- v*jobs:goreleaser:runs-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v2with:fetch-depth:0- name:Set up Gouses:actions/setup-go@v2with:go-version:1.15- name:Run GoReleaseruses:goreleaser/goreleaser-action@v2with:version:latestargs:release --rm-distenv:GITHUB_TOKEN:${{ secrets.GITHUB_TOKEN }}これでバージョンタグを打った際に GoReleaser によるクロス・コンパイルとデプロイが走る。 簡単！\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 依存パッケージの脆弱性検査",
      "section": "golang",
      "description": "nancy を使うのがよさげである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/check-for-vulns-in-golang-dependencies/",
      "published": "2020-09-30T03:49:21+00:00",
      "update": "2020-09-30T06:15:03+00:00",
      "content": "どの言語でも同じだけど，インポートする外部パッケージが安全かどうかを調べるのはけっこう大変である。 で， Go 言語の場合は nancy を使うのがよさげである。\n sonatype-nexus-community/nancy: A tool to check for vulnerabilities in your Golang dependencies, powered by Sonatype OSS Index  nancy は “Sonatype OSS Index” の情報を使って依存パッケージ／モジュールの検査をしてくれる。 ツール自体は Apache-2.0 でライセンスされている。 提供されているデータについては\nOSS Index and the associated tools are and always will be free to the community. The data we gather is derived from public sources, and does not include human curated intelligence nor expert remediation guidance. via Sonatype OSS Index  とあるので，オープンな場で使うなら問題ないかな。\n使い方は簡単で，開発中のパッケージのリポジトリ上で\n$ go list -json -m all | nancy sleuth とすればよい。 問題なければ\n$ go list -json -m all | nancy sleuth -n ┏━━━━━━━━━━━━━━━┓ ┃ Summary ┃ ┣━━━━━━━━━━━━━┳━┫ ┃ Audited Dependencies ┃ 9┃ ┣━━━━━━━━━━━━━╋━┫ ┃ Vulnerable Dependencies ┃ 0┃ ┗━━━━━━━━━━━━━┻━┛  みたいな感じで結果を返してくれる。 問題のあるパッケージ／モジュールを含んでると，ものすごい勢いで叱られるけど（笑）\nGitHub Actions でも使える nancy には GitHub Actions も用意されている。 ありがたや。\n sonatype-nexus-community/nancy-github-action: Sonatype Nancy for GitHub Actions  設定は簡単。 リポジトリの .github/workflows/ ディレクトリに YAML ファイル（例えば vulns.yml）を置き，以下のように記述する。\nname:vulnson:push:tags:- v*branches:- masterpull_request:jobs:vulns:name:Vulnerability scannerruns-on:ubuntu-lateststeps:- uses:actions/checkout@v2- uses:actions/setup-go@v2with:go-version:^1.13- name:WriteGoListrun:go list -json -m all \u0026gt; go.list- name:Nancyuses:sonatype-nexus-community/nancy-github-action@mainこれで pull request 時， master ブランチ1 への push 時，およびバージョンタグを打った際に脆弱性検査が走る。\n依存の依存パッケージに脆弱性がある 直接インポートするパッケージに脆弱性があるなら無害なバージョンに差し替えればいいけど，依存パッケージが依存しているパッケージに脆弱性がある場合はどうするか。\nとりあえず，そのパッケージ宛てには issue を投げておくとして，それまでの継ぎとしては go.mod ファイルの replace ディレクティブを使って凌ぐことができそうだ。\nたとえば，依存パッケージが github.com/coreos/etcd v3.3.13 に依存してるんだけど v3.3.13 に脆弱性がある場合，\nreplace ( github.com/coreos/etcd v3.3.13+incompatible =\u0026gt; github.com/coreos/etcd v3.3.25+incompatible ) などとして無害なバージョンに差し替えできる。\nrequire ディレクティブで\nrequire ( github.com/coreos/etcd v3.3.25+incompatible ) とか書いても同じ効果があるけど，名目だけの依存関係で実際にはインポートしないパッケージは go mod tidy コマンドで記述が削除されちゃうのでオススメできない。\ngo list -m all って，実際にはリンクしない名目上の依存関係も全部拾ってリストアップしちゃうので，凄い面倒くさいんだよねぇ。 実際にリンクするパッケージだけリストアップしてくれないものだろうか\u0026hellip;\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   2020年10月から GitHub の新規リポジトリの既定ブランチ名が main になるらしい。ご注意を。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020年10月の暦",
      "section": "remark",
      "description": "どっかの馬鹿な国際スポーツ大会のせいで今年の10月の祝日はなくなりました orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/ephemeris-202010/",
      "published": "2020-09-30T01:49:54+00:00",
      "update": "2020-09-30T01:53:56+00:00",
      "content": "2020年10月も spiegel-im-spiegel/koyomi パッケージを作って暦を浚ってみる。 なお spiegel-im-spiegel/koyomi パッケージは v0.1.5 をリリースしている。 今回も外部パッケージのバージョンを上げただけだけど。\n国立天文台のデータを使っているため，暦象の基準が日本の暦になっている点に注意。\n   日付 内容     2020-10-02 望(満月)   2020-10-02 水星が東方最大離角   2020-10-06 火星が地球最近   2020-10-08 寒露   2020-10-10 下弦   2020-10-14 火星が衝   2020-10-14 水星が留   2020-10-17 朔(新月)   2020-10-20 土用の入り   2020-10-23 上弦   2020-10-23 霜降   2020-10-26 水星が内合   2020-10-31 望(満月)    そうそう。 どっかの馬鹿な国際スポーツ大会のせいで今年の10月の祝日はなくなりました orz\n天象 各用語の意味は以下の通り。\n   天象 - 国立天文台暦計算室より  「留」とは「惑星の地心視赤経の時間変化が0、すなわち赤経方向の動きが止まる瞬間」，もっと簡単に言うと天球上の（見かけの）惑星の動きが反転する瞬間を指す。\n火星が最接近 既に十分見頃だが火星が 2020-10-06 に最接近となる。 つっても中接近くらいだけど。\n中秋の名月とブルームーン 今年は 2020-10-01 が中秋の名月で，翌2日が望（満月）である。 そんで，10月最終日の日付が変わる直前（23:49）に2回目の望となる。 いわゆる「ブルームーン」である。\n実は「月内2回目の満月」をブルームーンと呼ぶのは天文雑誌 “Sky \u0026amp; Telescope” による誤解なのだが，けっこう定着しちゃってる感がある（笑） 元々は “Once in a blue moon” といって「ありえないこと」とか「滅多にないこと」を指す慣用句で，世界各地に逸話や伝説があるらしい。\n土用の入り 「土用の入り」は雑節のひとつで，元々は「五行説」の考えから来たものである。\n四季を「五行説」に当てはめようとするとひとつ足らなくなるので，各季節の終わりの1/5ずつを集めて土の季節つまり「土用」としたそうな。 無理やりですねぇ（笑）\n現在の定義では太陽黄経が 27°, 117°, 207°, 297° となる日が「土用の入り」となる。\nコード 今回使用したコードは以下の通り。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/koyomi\u0026#34; ) func main() { start, _ := koyomi.DateFrom(\u0026#34;2020-10-01\u0026#34;) end, _ := koyomi.DateFrom(\u0026#34;2020-10-31\u0026#34;) k, err := koyomi.NewSource( koyomi.WithCalendarID( koyomi.Holiday, koyomi.MoonPhase, koyomi.SolarTerm, koyomi.Eclipse, koyomi.Planet, ), koyomi.WithStartDate(start), koyomi.WithEndDate(end), ).Get() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;| 日付 | 内容 |\u0026#34;) fmt.Println(\u0026#34;| ---- | ---- |\u0026#34;) for _, e := range k.Events() { fmt.Printf(\u0026#34;| %v | %v |\\n\u0026#34;, e.Date, e.Title) } } ブックマーク   暦Wiki/季節/雑節とは？ - 国立天文台暦計算室\n  火星最接近2020 | 国立天文台(NAOJ)\n  2020年の主な暦象\n  日本の暦情報を取得するパッケージを作ってみた\n  参考図書  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n "
    },
    {
      "title": "golangci-lint を GitHub Actions で使う",
      "section": "golang",
      "description": "これで pull request 時に golangci-lint が走る。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/using-golangci-lint-action/",
      "published": "2020-09-29T02:20:19+00:00",
      "update": "2020-09-30T07:22:49+00:00",
      "content": "golangci-lint は go vet をはじめ複数の lint を集約して結果を表示してくれる優れものである。 かつては GolangCI.com で GitHub と連携できていたのだが，2020年4月でサービスが停止してしまい，寂しい限り。\nと思っていたのだが，いつの間にか公式の GitHub Actions が用意されていた。 気付かなんだよ。 不覚。\n golangci/golangci-lint-action: Official GitHub action for golangci-lint from it\u0026rsquo;s authors  使い方は簡単。 リポジトリの .github/workflows/ ディレクトリに YAML ファイル（例えば lint.yml）を置き，以下のように記述する。\nname:golangci-linton:push:tags:- v*branches:- masterpull_request:jobs:golangci:strategy:matrix:go-version:[1.15.x]os:[ubuntu-latest, macos-latest, windows-latest]name:lintruns-on:${{ matrix.os }}steps:- uses:actions/checkout@v2- name:golangci-lintuses:golangci/golangci-lint-action@v2with:# Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.version:v1.31# Optional: working directory, useful for monorepos# working-directory: somedir# Optional: golangci-lint command line arguments.# args: --issues-exit-code=0# Optional: show only new issues if it\u0026#39;s a pull request. The default value is `false`.# only-new-issues: trueまた，リポジトリ直下の .gitattributes ファイルに以下の記述を追加する。\n*.go text eol=lf これで pull request 時， master ブランチ1 への push 時，およびバージョンタグを打った際に golangci-lint が走る。 golangci-lint は matrix の組み合わせで並列処理されるようだ。\n よーし，うむうむ，よーし。\nまぁ，プラットフォーム依存のコードでもない限り Go 最新バージョンの ubuntu-latest だけでいいと思うけどね。\nブックマーク  golangci/golangci-lint: Fast linters Runner for Go golangci-lint に叱られる  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   2020年10月から GitHub の新規リポジトリの既定ブランチ名が main になるらしい。ご注意を。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Authenticator と AAL",
      "section": "remark",
      "description": "どうも日本の金融界は「リスク感度が鈍い」そうなので，自衛のためにも2017年にリリースされた NIST SP 800-63-3 をベースに少しお勉強しておく。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/authenticator-and-aal/",
      "published": "2020-09-27T10:45:38+00:00",
      "update": "2020-09-27T11:01:38+00:00",
      "content": "どうも日本の金融界は「リスク感度が鈍い」そうなので，自衛のためにも2017年にリリースされた NIST SP 800-63-3 をベースに少しお勉強しておく。\n NIST Special Publication 800-63-3: Digital Identity Guidelines NIST Special Publication 800-63A: Enrollment and Identity Proofing NIST Special Publication 800-63B: Authentication and Lifecycle Management NIST Special Publication 800-63C: Federation and Assertions  SP 800-63-3 といえばパスワード運用で当時は話題になった。\n 「パスワードのベストプラクティス」が変わる  このパスワード話が出てくるのが SP 800-63B だが，このドキュメントでは Authenticator 全体について色々と書かれている。\nAuthenticator Authenticator について適切な日本語が見当たらないが，強いて言うなら「認証機能」あるいは「認証器」といったところだろうか。 たとえばパスワードも Authenticator だし，スマホにインストールした TOTP アプリも Authenticator だ。 Yubikey なんかの暗号デバイスも Authenticator に含まれる。\nSP 800-63B では Authenticator を以下の9つに分類している。\n   種別名 認証要素     Memorized Secrets\n記憶シークレット 知識   Look-Up Secrets\nルックアップ・シークレット 所有   Out-of-Band Devices\n経路外デバイス 所有   Single-Factor OTP Device\n単要素 OTP デバイス 所有   Multi-Factor OTP Devices\n多要素 OTP デバイス 所有＋知識／生体   Single-Factor Cryptographic Software\n単要素暗号ソフトウェア 所有   Single-Factor Cryptographic Devices\n単要素暗号デバイス 所有   Multi-Factor Cryptographic Software\n多要素暗号ソフトウェア 所有＋知識／生体   Multi-Factor Cryptographic Devices\n多要素暗号デバイス 所有＋知識／生体    また，各 Authenticator の例としては以下のものが挙げられる。\n   Authenticator 具体例     記憶シークレット パスワード，PINコード   ルックアップ・シークレット 乱数表，認証失敗時のリカバリコード   経路外デバイス SMS によるコード送信， QR コード（電子メールや VoIP は認められない）   単要素 OTP デバイス アクティベーションを必要としない OTP デバイスまたはソフトウェア   多要素 OTP デバイス アクティベーションを行った上で利用可能な OTP デバイスまたはソフトウェア   単要素暗号ソフトウェア セキュアなストレージ上で保護されている暗号鍵   単要素暗号デバイス FIDO U2F の USB ドングル   多要素暗号ソフトウェア 単要素暗号ソフトウェアに対して追加のアクティベーションを必要とするもの   多要素暗号デバイス 単要素暗号デバイスに対して追加のアクティベーションを必要とするもの    Authenticator Assurance Level さらに SP 800-63B では AAL (Authenticator Assurance Level) を定義している。 AAL は 1 〜 3 の3段階あり，それぞれ以下に示す Authenticator の組み合わせを許容している。\n AAL 1 では9種の Authenticator 全て許容され，単要素の認証で OK AAL 2 では以下に示す通り複数の認証要素による多要素認証が必要：  多要素 OTP デバイス 多要素暗号ソフトウェア 多要素暗号デバイス 記憶シークレット＋以下  ルックアップ・シークレット 経路外デバイス 単要素 OTP デバイス 単要素暗号ソフトウェア 単要素暗号デバイス     AAL 3 では以下に示す通り，暗号鍵の所持証明要素とハードウェア関与を含む複数の認証要素による多要素認証が必要：  多要素暗号デバイス 単要素暗号デバイス＋記憶シークレット 多要素OTPデバイス(SW/HW)＋単要素暗号デバイス 多要素OTPデバイス(HW)＋単要素暗号ソフトウェア 単要素OTPデバイス(HW)＋多要素暗号ソフトウェア 単要素OTPデバイス(HW)＋単暗号ソフトウェア＋記憶シークレット    AAL の各レベルごとに要求されるセキュリティ事項（一部）は以下の通り。\n   要求事項 AAL 1 AAL 2 AAL 3     中間者攻撃耐性 必須 必須 必須   Verifier なりすまし耐性 不要 不要 必須   Verifier 改ざん耐性 不要 不要 必須   リプレイ耐性 不要 必須 必須   認証意図（AuthN Inbtent） 不要 推奨 必須   レコード保持ポリシー 必須 必須 必須   プライバシー統制 必須 必須 必須    金融系サービスの subscriber 確認で乗っ取りやなりすましを防ぎたいなら AAL 3 で何らかの物理暗号デバイスが必要だと思うけどねー。\n格子型の乱数表は NG 現在は使ってるところはないだろうが，かつてネットバンキングでよく見られた格子型の乱数表はルックアップ・シークレットとしても NG だそうだ。 まぁ，当然だよな。\nSMS 認証は非推奨？ NIST は SMS によるコード送信について， SP 800-63-3 のドラフト段階では非推奨にするつもりだったらしい。\n SMSを使った二要素認証を非推奨〜禁止へ、米国立技術規格研究所NISTの新ガイダンス案 | TechCrunch Japan  しかしその後，激しい議論があったようで，最終的には “Restricted Authenticator” という位置づけまで緩和されたようだ。\nCurrently, authenticators leveraging the public switched telephone network, including phone- and Short Message Service (SMS)-based one-time passwords (OTPs) are restricted. Other authenticator types may be added as additional threats emerge. Note that, among other requirements, even when using phone- and SMS-based OTPs, the agency also has to verify that the OTP is being directed to a phone and not an IP address, such as with VoIP, as these accounts are not typically protected with multi-factor authentication. via NIST SP 800-63 Digital Identity Guidelines-FAQ  （スマホを含む）電話機に依存した認証は，プライバシーも絡めて考えると筋が悪い。 ぶっちゃけ SMS 認証を含む経路外デバイスを使った認証は排除するか（ルックアップ・シークレットのように）優先順位を下げて非常時のみ使えるようにするのがいいと思う。 もちろん電話番号を広告に流用するなど以っての外である。\n生体情報は Authenticator として使えるか Authenticator の分類を見れば分かるように，生体情報は単独では認証手段としては使えないという認識のようだ。 そもそも生体情報は秘密情報ではないのだから当たり前といえば当たり前かな。\nブックマーク  usnistgov/800-63-3: Home to public development of NIST Special Publication 800-63-3: Digital Authentication Guidelines NIST SP800-63-3翻訳版63-Bパートの紹介 認証にまつわるセキュリティの新常識  世界の電子認証基準が変わる：NIST SP800-63-3を読み解く – サポート − トラスト・ログイン byGMO【旧SKUID(スクイド)】 Phishing Resistant SMS Autofill - The GitHub Blog  参考図書  セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n  信頼と裏切りの社会 ブルース・シュナイアー (著), 山形 浩生 (翻訳) NTT出版 2013-12-24 単行本（ソフトカバー） 4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  社会における「信頼」とは。\nreviewed by Spiegel on 2015-11-28 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-09-27 のブックマーク",
      "section": "bookmarks",
      "description": "「Lua 5.4 のバイナリが出てた！」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/09/27-bookmarks/",
      "published": "2020-09-27T05:55:41+00:00",
      "update": "2020-09-27T05:56:29+00:00",
      "content": "セキュリティ＆プライバシー関連  At this point, 5G is a bad joke | Computerworld  ブログ: 現時点で、5Gは悪い冗談です   飛行機の搭乗券が写った写真から個人情報を抜き出すまでの記録、オーストラリアの元首相の場合 - GIGAZINE 上院の暗号バックドア法案は「米国人にとって危険」だと下院議員が警告 | TechCrunch Japan No, Moving Your SSH Port Isn\u0026rsquo;t Security by Obscurity | Daniel Miessler  ブログ: SSHポートの移動は隠蔽によるセキュリティではない   セキュリティ企業が描き出す「歪曲された」実態　大学研究者が検証 - ITmedia NEWS Interview with the Author of the 2000 Love Bug Virus - Schneier on Security ゆうちょ銀行、デビットカード「mijica」で不正送金\u0026ndash;被害額は約332万円 - CNET Japan  ゆうちょ池田社長「リスク感度が鈍かった」\u0026ndash;被害は約6000万円に拡大、2017年から発生 - CNET Japan   富士通研究所、顔写真などによる「なりすまし」を防止する技術を開発 - ZDNet Japan Twitterに集団訴訟\u0026ndash;電話番号がターゲティング広告に不正利用された可能性 - CNET Japan いまだに“放置”されている「子ども用スマートウォッチ」の脆弱性には、盗聴やなりすましの危険性も潜んでいる | WIRED.jp Iranian Government Hacking Android - Schneier on Security Lightning Q\u0026amp;A: DevSecOps in five with Maya Kaczorowski - The GitHub Blog Twitterが開発者の秘密鍵やアカウントトークンの漏洩を警告 | TechCrunch Japan  天文関連  日本でも宇宙資源についての法整備実施へ – 産経新聞報道 | 月探査情報ステーション Comet Discovered to Have Its Own Northern Lights | NASA 小惑星リュウグウ上に見つかった衝突天体の破片 | 東京大学  小惑星探査機「はやぶさ２」観測成果論文の Nature Astronomy誌掲載について | Topics/お知らせ | 千葉工業大学 OSIRIS-REx Finds Vesta Meteorites on Asteroid Bennu   Big Data and the Search for Extraterrestrial Intelligence | Digital Trends ニュース - 宇宙最盛期を支える銀河の原材料　～約100億年前の銀河たちが持つ分子ガス - アルマ望遠鏡 Ireland ready to answer ET’s call プレスリリース - 塩と熱い水蒸気に包まれる巨大赤ちゃん星のペア - アルマ望遠鏡  塩と熱い水蒸気に包まれる巨大赤ちゃん星のペア | 国立天文台(NAOJ)    知財関連  Nintendo Hits XXX-Rated \u0026lsquo;Peach\u0026rsquo;s Unknown Tale\u0026rsquo; Game With Copyright Complaint * TorrentFreak バンクシーの「花束を投げる人」の欧州商標登録が無効に(栗原潔) - 個人 - Yahoo!ニュース \u0026lsquo;Copyright Troll\u0026rsquo; Loses Legal Battle and Must Pay $172,173 * TorrentFreak  Linux または Ubuntu に関する話題  マテリアルデザインなデスクトップがヌルヌル動くLinuxのGNOME Shell拡張「Material Shell」レビュー - GIGAZINE LibreOffice Information: The best LibreOffice extensions. Yaru icon theme Linux Journal is Back | Linux Journal Ubuntu 20.04 その179 - LenovoからUbuntuプリインストールPCが多数登場・27モデルがUbuntuプリインストールPCの対象に - kledgeb Ubuntu 20.04 その178 - GNOME Shell拡張とGNOME Shell拡張の入手方法 - kledgeb Ubuntu 20.04 その180 - GNOME Shell ExtensionsからGNOME Shell拡張をインストールするには - kledgeb Ubuntu 20.04 その181 - インストール済みのGNOME Shell拡張を確認するには・GNOME Shell拡張を管理するには - kledgeb  Go 言語関連  Big Sky :: プログラマーのための新しい情報共有コミュニティ Zenn で本を書いてみた。  Go 言語にやってくる Generics は我々に何をもたらすのか | Zenn : 購入！   mdaliyan/icache: golang type and thread safe key-value in memory cache Go: Goroutine Leak Detector. A goroutine leak can easily be detected… | by Vincent Blanchon | A Journey With Go | Sep, 2020 | Medium In-process caching in Go: scaling lakeFS to 100k requests/second Facebook の ent を使って簡単なウェブアプリケーションを作る | Zenn f-secure-foundry/tamago: TamaGo - bare metal Go for ARM SoCs  Rust 言語関連  Call for 2021 Roadmap Blogs Ending Soon | Rust Blog  その他  TwitterとZoomのアルゴリズムに偏見問題が浮上 | TechCrunch Japan GitHub CLI 1.0 がリリースされたので使ってみた | Zenn Zooming and scaling must not be disabled Axe Rules | Deque University | Deque Systems : HTML でズーム機能を無効にしたらあかんよ，という話 2020年米国の有料テレビ契約が過去最大の減少、新型コロナで消費者離れが加速 | TechCrunch Japan ［速報］マイクロソフト、Linux対応の「Micorosft Edge on Linux」、来月プレビュー公開へ。Ignite 2020 － Publickey ［速報］マイクロソフトが構築したVMware環境「Azure VMware Solution」正式サービス開始。Ignite 2020 － Publickey ［速報］マイクロソフト、RPA機能でWindowsアプリ操作を自動化する「Power Automate Desktop」パブリックプレビュー開始、日本語版も。Ignite 2020 － Publickey TypeScriptで学ぶ JavaScript（ES6） | Zenn ：購入！ GitHub ActionsでGitHub Project運用でのIssue作成作業をカイゼンする - BASEプロダクトチームブログ 「Zoom」v5.3.0が公開 ～ユーザー側から参加するブレイクアウトルームを選択可能に - 窓の杜 キヤノン、富士通製スーパーコンピューターを導入へ - ZDNet Japan テスラが1万エーカーのリチウム粘土鉱床の権利を取得、リチウム採掘事業に自ら参入へ | TechCrunch Japan クラウドのアーキテクチャ図作成ツール「CloudSkew」、Webブラウザから無料で利用可能。AWS／Azure／GCP／Kubernetes／Oracle Cloudなどマルチクラウド対応 － Publickey マイクロソフト、全プラットフォームを統合する「.NET 5」フレームワーク、リリース候補版を公開。Ignite 2020 － Publickey 人間活動における理性 Reason in Human Affairs   ハーバート・Ａ・サイモン『人間活動における理性』(1982)　改訳終わった。 - 山形浩生の「経済のトリセツ」   Mozilla、「Flash」の廃止計画を更新 ～2021年1月公開予定の「Firefox 85」で完全削除へ - 窓の杜 社内向けの管理画面の認証にSlack認証を使うと便利だった | Zenn GitHub Mobile and GraphQL - The GitHub Blog IBMが量子ロードマップを公開、2023年には1000量子ビットマシンを実現へ | TechCrunch Japan ZoomのAndroidスマホでの使い方！アプリのダウンロードや設定方法を解説！ | アプリやWebの疑問に答えるメディア ShellExecute でネットワーク上の実行ファイルを呼び出そうとするとエラーになる - 標準愚痴出力 Lua 5.4 のバイナリが出てた！ - 標準愚痴出力 海洋研究開発機構、「次期地球シミュレータ」でマルチアーキテクチャーを採用 - ZDNet Japan パナソニック、プロダクトのレシピをGitHubで全公開\u0026ndash;「D+IO」という新たなモノづくりの形 - CNET Japan  panasonic-corporation · GitHub   bashの組込みコマンド自作によるスクリプトの高速化 | Zenn Owen\u0026rsquo;s Blog \u0026ndash; Haskell\u0026rsquo;s Children  ブログ: Haskellの子供たち   VueとGASでつくる！サーバーレス家計簿📔 | Zenn 無償版“IFTTT”で利用可能なアプレットは3つまでに ～超過分は10月8日にアーカイブ - 窓の杜 Swift言語がWindowsのサポートを開始。コンパイラやライブラリなどWindows対応に － Publickey フリーのネットワーク解析ツール「Wireshark」v3.2.7/v3.0.14/v2.6.20が公開 - 窓の杜  "
    },
    {
      "title": "Go 言語に関するブックマーク（退避分）",
      "section": "bookmarks",
      "description": "今まで Go 言語用に溜めていた旧ブックマークの大部分を退避させている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/golang/",
      "published": "2020-09-26T15:00:00+00:00",
      "update": "2020-09-28T10:08:55+00:00",
      "content": "今まで Go 言語用に溜めていた旧ブックマークの大部分を退避させている。\nニュース関連  動的言語だけやってた僕が、38日間Go言語を書いて学んだこと - Qiita Go言語で幸せになれる10のテクニック - Qiita これからGoを始める人のためのTips集 | The Wacul Blog : ちゃんと開発環境を整備したい場合には参考になる Golang ファーストインプレッション - Qiita 2014年夏、カヤックは、Go言語を積極的に推進していきます。 ｜ニュース｜面白法人カヤック (go report) Goが本当はすごかったので, 謝罪する - テストステ論 Golang のインスコでハマった件 - Qiita Go Conference 2015 summer - Qiita 最新versionのgolangをぶち込む方法について - Qiita  7 Easy Steps to Install Go (Golang) on Ubuntu - HostingAdvice.com   Heroku、Go言語の正式サポートを発表 － Publickey Google App Engineも「Go言語」の正式サポートを発表 － Publickey Sensuでネットワーク監視やってみた - Qiita i18n4go - developerWorks Open : IBM の developerWorks Open プロジェクトのひとつ。「プログラムを国際化するための汎用ツール」らしい。 Go言語の初心者が見ると幸せになれる場所 - Qiita Go言語で利用するLLVM入門 | プログラミング | POSTD Big Sky :: 「みんなのGo言語」の執筆に参加させて頂きました。 ASCII.jp：Goならわかるシステムプログラミング グーグルの「Go」、2016年のプログラミング言語大賞に輝く - ZDNet Japan Go言語でWebアプリを作りかけて辞めた話 - ぼっち勉強会 Go 2016 Survey Results - The Go Blog Big Sky :: GoCon に初参加してきた。 ［速報］AWS Lambdaが機能強化。.NETとGo言語をサポート、サーバレスアプリケーションのリポジトリも登場。AWS re:Invent 2017 － Publickey サーバレスアーキテクチャのAWS Lambda、Go言語とC#の.NET Core 2.0サポートを開始 － Publickey  言語仕様および標準パッケージに関すること はじめての [Go 言語]  はじめてのGo―シンプルな言語仕様，型システム，並行処理：特集｜gihyo.jp … 技術評論社 Golangの基本文法をおさえてみる - Qiita 忙しい人のためのA Tour of Go - Qiita import 書き方まとめ - Qiita GoのEnumイディオム - Qiita : あらかじめ Enum 用の type を作成し、その type に対する String() メソッドを定義する Big Sky :: golang では for ループの中で defer してはいけない。 : ループ内で defer が必要になるということは refactoring のチャンス Goのfor rangeで思った値が取れなかった話 - Qiita : ちょっとしたミス Goで再帰使うと遅くなりますがそれが何だ - YAMAGUCHI::weblog Go言語(Golang) はまりどころと解決策 Big Sky :: Golang のオフィシャルが提供するインタフェースまとめ Go の定数の話 - Qiita init関数のふしぎ #golang - Qiita  packageに複数のinitがあるときの挙動 - Qiita   Big Sky :: golang では変数の宣言位置が大事 Big Sky :: Names : Golang の開発者 Russ Cox 氏による記事の抄訳。「変数名の長さ」について Go言語のキーワードが少ない理由 - Qiita Go の、型のない定数の精度 - Qiita Goを読むその1：go installの流れ  Goを読むその2：compileコマンド（構文解析まで）   [imported and not usedエラー・declared and not usedエラーとの向き合いかた - My External Storage C から Go へコードを移植してハマった話 (そして言語仕様へ) - Qiita Go\u0026rsquo;s Declaration Syntax - The Go Blog タグなし switchは switch true {\u0026hellip;}と等しい - My External Storage Go の命名規則 | micnncim Go: How Are Loops Translated to Assembly? - A Journey With Go - Medium Go: Inlining Strategy \u0026amp; Limitation - A Journey With Go - Medium Why you shouldn\u0026rsquo;t use func main in Go by Mat Ryer - PACE. proxy.golang.org の挙動調査メモ — KaoriYa Go: Built-in Functions Optimizations | by Vincent Blanchon | A Journey With Go | Aug, 2020 | Medium  オブジェクトに関すること  オブジェクト指向言語としてGolangをやろうとするとハマること - Qiita  オブジェクト指向言語としてGolangをやろうとするとハマる点を整理してみる - Qiita   Go言語に継承は無いんですか【golang】 - DRYな備忘録 Goにatexitやグローバルなデストラクタがない理由 - Qiita  メモリ管理  Go: Memory Management and Allocation - A Journey With Go - Medium Go: How Does the Garbage Collector Mark the Memory? Go: Memory Management and Memory Sweep - A Journey With Go - Medium  型と interface  Go言語の型とreflect - Qiita 埋込みとインタフェース #golang - Qiita Golang: nil Pointer Receiverの話 - Qiita Go 言語の値レシーバとポインタレシーバ | Step by Step Big Sky :: Go言語でインタフェースの変更がそれ程問題にならない理由 Go で interface {} の中身がポインタならその参照先を取得する - Qiita Go で型を抽象的に扱うには - Qiita GoのInterfaceとは何者なのか #golang #go - niconegoto Blog インタフェースの実装パターン #golang - Qiita Big Sky :: Go で型がインタフェースを実装している事を保証するには Goの基本的な型変換 - Qiita Sliceを含んだ構造体が等値演算子（==）でpanicを引き起こすのを回避する #golang - My External Storage Go言語のInterfaceの考え方、Accept interfaces,return structs - Qiita Named typeとType aliasを使い分ける - My External Storage  数値型  Golang の 数値型 - Qiita Go言語での初期化における\u0026amp;とnewの挙動の違い - Qiita Using Go Interfaces for Testable Code - The Startup - Medium  文字列型と操作・変換  Strings, bytes, runes and characters in Go - The Go Blog Go言語のstring, runeの正体とは？ - golang - The Round Go小ネタ: 正規表現を全角半角問わずマッチするよう変換する - Qiita Go言語は空文字に対してstrings.splitを掛けると1要素の配列を返す - Qiita : コメントに別解あり golang - Goでマルチバイトが混在した文字列をtruncateする - Qiita Golangでの文字列・数値変換 - 小野マトペの納豆ペペロンチーノ日記 golang - Go言語で文字コード変換 - Qiita Go で euc-jp や sjis の csv ファイルを読み込むには変換用のリーダーを1つかませるだけでよかった - Qiita Goでは文字列連結はコストの高い操作 - Qiita Goの文字列結合のパフォーマンス - Qiita Go言語で SplitMultiSep (複数種の区切り文字列で分解) - Qiita Go で UTF-8 の文字列を扱う - Qiita Go言語 Gmailのsubjectの日本語文字化けに対応する - Qiita Text normalization in Go - The Go Blog : Unicode 正規化について Go言語で文字列の変換(全角・半角、ひらがな・カタカナ)をする : Serendip - Webデザイン・プログラミング Goで全角英数字を半角にする - Qiita Goのstring型が思ったより容量食いだった話 - Qiita golang で string を []byte にキャストしてもメモリコピーが走らない方法を考えてみる - Qiita : unsafe パッケージで無理やり処理（笑） utf8としてvalidなバイト列を判定する方法をGoから見る - Qiita  Go言語で文字列がASCIIコード内であるか判定したい - Qiita   String interpolation in Golang – Ly Channa – Medium  Golang の文字列内で変数を展開する方法（各種） - Qiita   Big Sky :: Go で大文字小文字無視の文字列比較ベンチマーク Go の strings.Index の内部実装と Rabin-Karp アルゴリズム - Qiita Go: String \u0026amp; Conversion Optimization - A Journey With Go - Medium  配列と slice  Go のスライスでハマッたところ - Block Rockin’ Codes golang - go言語のslice操作をまとめてみた（shiftしたりpushしたり） - Qiita sliceの重複チェックを高速化 - Qiita Goのarrayとsliceを理解するときがきた - Qiita : この説明は分かりやすい。おススメ uint64型を[]bytes型に変換する - Qiita golangのequalityの評価について - podhmo\u0026rsquo;s diary  Goで違うmapであることをテストする - Qiita   文字列をn個後ろにずらす処理を本気でやる - Qiita Golangのmapとsliceはどちらが速いのか - 逆さまにした GitHub - imdario/mergo: Mergo: merging Go structs and maps since 2013. Go理解度チェック - Google スライド 省略記号（\u0026hellip;）を使った配列宣言の仕方 - My External Storage Go: Slice and Memory Management - A Journey With Go - Medium  入出力処理  Go ファイルや標準入力から一行ずつ読み込む - Qiita Goでファイルを読んで別のgoroutineに渡す - Qiita 「連結されたgzipを1行ずつ見る」をgolangでやったらハマった - Qiita : compress/gzip と入出力処理の関係 bufio.Scannerのend-of-line判断を変更してみる - Qiita KOBE GDG: Go言語　バイナリファイルを扱う : 任意のオブジェクトをバイト列に変換してファイルに格納 ファイル書き込みの度にファイルを開いたらどれくらい遅いのか - Qiita Golangで標準入力がパイプで渡されたものか判定する - Qiita Go言語: ファイルの存在をちゃんとチェックする実装? - Qiita Golangで、ファイル一覧取得（最新順出力） - Qiita 大きなファイルのアップロードを省メモリで行いたい(io.Pipeを使う) - Qiita Big Sky :: net/http でレスポンスの内容を確認したいなら io.TeeReader を使おう  io.TeeReader   Big Sky :: golang で UNIX コマンドパイプラインを扱う  並行処理と並列処理  Visualizing Concurrency in Go · divan\u0026rsquo;s blog Go の並行処理 - Block Rockin’ Codes Go: 計算なしのFizzBuzz - Qiita : channel の説明するのにいいかも Goのchannelの送受信用の型について - Qiita Go言語のChannelは送信時にもブロックする - Qiita : 意外と見落とす channel 送信時のブロック select loop の小ネタ - Qiita Goのforとgoroutineでやりがちなミスとたった一つの冴えたgo vetと - Qiita x/net/context の実装パターン - Qiita : golang.org/x/net/context を使って並行処理を細かく制御。 Domain-Driven あるいは Context-Driven な設計でも使えそう。 Go言語でチャネルとselect - Qiita golangでシグナルを拾ってgracefulにgoroutineを停めたい - Qiita golang の channel のブロックがよくわからん - Qiita GoのChannelを使いこなせるようになるための手引 - Qiita Goでスレッド（goroutine）セーフなプログラムを書くために必ず注意しなければいけない点 - Qiita : sync.Mutex にも言及 複数のgroutineが生えてるStructの安全な終了方法 - Qiita Go言語の並行性を映像化する | プログラミング | POSTD Go言語でプロセス間同期処理 - Qiita : Windows の Mutex を使ってプロセス間通信を行う Goで並行処理のベンチマークをとる - Qiita go言語初心者が図を書きながらgo routineやgo channelを理解する(Part 1) - Qiita  go言語初心者が図を書きながらgoroutineやgo channelを理解する(Part2) - Qiita   Goroutineと channelから はじめるgo言語 Go言語の並行処理デザインパターン by Rob Pike 前編 - Qiita  Go言語の並行処理デザインパターン by Rob Pike 後編 - Qiita   goroutine を安全に止める方法 - Qiita Goの同時関数呼び出しを１回で済ませられるライブラリ 「SingleFlight」 が便利 - Qiita 【コンピュータ将棋】ゴルーチンでお手軽持ち時間管理＆並行探索 - Qiita Goのワークスティーリング型スケジューラ | プログラミング | POSTD goの並行処理パターンについてのリンク集 - Qiita  chanの使い方パターンメモ。 - GolangRdyJp Big Sky :: golang の channel を使ったテクニックあれこれ   go1.9のsyncmapを試してみた - Qiita : 並行処理に使える同期型の map Handling CTRL-C (interrupt signal) in Golang Programs | I care, I share, I\u0026rsquo;m Nathan LeClaire. Go context.Context interfaceに Cancelが含まれていない理由 - Qiita Goroutineハンターが過労死する前に - Qiita or-done-channelでコードの可読性を上げる - YAMAGUCHI::weblog go1.9から追加されたsync.Mapを使う - Qiita Go1.9から追加されたsync.Mapのパフォーマンス – Straightforward Big Sky :: 簡単に goroutine の実行個数を制限する方法 Big Sky :: goroutine でドハマリした。 Big Sky :: Go 言語の非同期パターン goroutineとチャネルの動きを図を使って理解する(和訳) - Qiita goleakでgoroutine leakのリスクを減らす - Qiita Go の -race option は内部で何をしているのか。何を検知しないのか。 - Qiita Achieving concurrency in Go - RunGo - Medium Go: Goroutine, OS Thread and CPU Management - A Journey With Go - Medium Go: GOMAXPROCS \u0026amp; Live Updates - A Journey With Go - Medium Go: Goroutine and Preemption - A Journey With Go - Medium Go: Concurrency \u0026amp; Scheduler Affinity - A Journey With Go - Medium Go: How Does Go Recycle Goroutines? - A Journey With Go - Medium Go: How Does a Goroutine Start and Exit? - A Journey With Go - Medium  Go 言語で複数 CPU を使った並列処理を行うには明示的な設定が必要。\n Go言語でCPU数に応じて並列処理数を制限する | SOTA  やはり俺のgolangがCPUを一つしか使わないのはまちがっている。 - Qiita   Goでお手軽に行列の積を爆速並列計算 - Qiita  Logging  Golang logging library - Qiita go言語におけるロギングについて Golangで簡単にログを吐くことを考える - Qiita : seelog について解説している。私は XML には全くアレルギーがないので無問題 Go言語でdebugログの実現方法 - Qiita loggingについて話そう - Qiita golangでlogを標準出力とテキストファイルの2箇所の出力する - Qiita gorpで実行されるSQLをログに出力する - Qiita Goのバッチで統計を取得するAPIを用意しておくと便利 - Qiita golangのloggerを作ってみた - Qiita golangの高速な構造化ログライブラリ「zap」の使い方 - Qiita zapでログレベルでログの出力先を振り分ける方法 - Qiita go-logging における \u0026ldquo;module\u0026rdquo; の意味 - Qiita Golangでlogのタイムスタンプをマイクロ秒単位にする方法 - Qiita ええっ！？　文字列で書くの！？　ログレベル付きロガーhashicorp/logutilsのご紹介 - Qiita rs/zerolog: Zero Allocation JSON Logger : JSON 形式でログを吐く。おススメ hnakamur/ltsvlog: a minimalist LTSV logging library in Go : LTSV 形式でログを吐く  GoでLTSV形式でログ出力するライブラリを書いた zerologを参考にしてltsvlogを改良してみた    エラーハンドリング  または私は如何にして例外するのを止めて golang を愛するようになったか — KaoriYa Big Sky :: golang で複数のエラーをハンドリングする方法 DSAS開発者の部屋:Go ではエラーを文字列比較する？という話について : エラーハンドリングには，定数との比較， conversion 構文による型の比較，エラー文字列の比較がある panicはともかくrecoverに使いどころはほとんどない - Qiita go で AggregationException(.NET)的なことをする - Qiita : ループ等でエラーを集約してからまとめて処理する方法 echoのAPIサーバ実装とエラーハンドリングの落とし穴 - Qiita Golangのエラー処理とpkg/errors | SOTA  Golangでエラー時にスタックトレースを表示する - Qiita   Ginのミドルウェアを使ったエラーハンドリング - Qiita  Struct タグについて  Goのencoding/jsonでタグが反映されなくてハマったしょうもない話 - Qiita Go で struct のタグ情報を取得する - hiyosi\u0026rsquo;s blog Goのjson.Marshal/Unmarshalの仕様を整理してみる - I Will Survive GoでJsonファイルを読み込んで構造体として扱う。 - Qiita BurntSushi/tomlを使ってハマったこと - Qiita : BurntSushi/toml にバグがあるという話 GoでJSONの一部分を利用者が定義した構造体に読み込める便利な手法を見つけた - Qiita golang は ゆるふわに JSON を扱えまぁす! — KaoriYa Go言語でJSONに泣かないためのコーディングパターン - Qiita Go 言語 1つの構造体に複数の validation を適応する - Qiita Go で関数の引数用構造体のバリデーションと初期化をするメソッドをタグから生成するツールを作った - Qiita Goでsql.NullStringを含む構造体をjson.Marshalする方法 - Qiita  GoでJSONのnullをいい感じに扱いたい - Qiita   Go言語でJSON内の整数は10進数6桁しか表現できない - Qiita JSONSchemaからstructのようなコードを生成する\u0026quot;structr\u0026quot;というのを書いた - Qiita GolangでEnumをフィールドに持つstructをいい感じにjsonエンコード / デコードする - 一から勉強させてください(￣ω￣;) golang xml.Marshal でxmlタグで出力する - Qiita golangでajaxを使用してrssのデータを取得する - m_shige1979のささやかな抵抗と欲望の日々 Big Sky :: GolangでAPI Clientを実装する、の続き  GolangでAPI Clientを実装する | SOTA    time パッケージ  Golang 日付のフォーマットでハマった話 - Qiita golangのtime.Timeの当日00:00:00を取得する方法とベンチマーク - Qiita Golangで周期的に実行するときのパターン - Qiita Go: Timers’ Life Cycle. ℹ️ This article is based on Go 1.14. | by Vincent Blanchon | A Journey With Go | Jul, 2020 | Medium  reflect および unsafe パッケージ  Go と reflect と generate - Qiita unsafe が unsafe なケース (1) - Qiita  unsafe が unsafe なケース (2) - Qiita   Goで関数型プログラミング - Qiita : reflect パッケージを使って高階関数を表現できる  context パッケージ context はバージョン 1.7 から標準パッケージに組み込まれた。\n Go1.7のcontextパッケージ | SOTA Golangのcontext.Valueの使い方 | SOTA contextの使い方 - Qiita context.Contextでリクエストスコープな値を持ち回す - Qiita : context の使い方って（名前からいって）本来こっちだよね goroutine にシグナルを送信する - Qiita Go言語のContextパッケージのTODO( )って何？いつ使うの？ - Qiita Go 言語 context パッケージ誕生の背景と使用方法 context.TODO()を使って漸進的にcontext対応を始める - My External Storage  開発支援  GoのSSA最適化制御オプション - Qiita Big Sky :: gocode やめます(そして Language Server へ) Big Sky :: Go 言語の Language Server「gopls」が completeUnimported に対応した。  デバッガ  golang でビルド時に最適化をオフにする - tetsuok の旅 blog : gdb でデバッグする際は最適化を off にするといいという話 Go言語のトラブルシューティング用機能 Go で利用できるプロファイリングツール pprof の読み方 - Qiita Goでfunctionが実行された順番を追いかける - sgykfjsm.github.com Go言語でプリント文デバッグするときのTips - Qiita GitHub - derekparker/delve: Delve is a debugger for the Go programming language.  Golangのデバッガdelveの使い方 - Qiita   Go言語のバリデーションチェックライブラリ(ozzo-validation)を分かりやすくまとめてみた - Qiita go-playground/validator リクエストパラメータ向けValidationパターンまとめ - Qiita Go言語のモック(gomock)を触ってみた - Qiita  テスト・フレームワーク  Go の Test に対する考え方 - Qiita Goでテストを書く - 成らぬは人の為さぬなりけり golang 1.4で追加されたtestingの便利機能(テストの初期化とお片づけ) - Qiita gojiのレスポンス結果をテストする - Qiita Go Mockでインタフェースのモックを作ってテストする #golang - Qiita Go でベンチマーク - Block Rockin’ Codes go言語でベンチマーク - Qiita プロダクト開発でのGoのテストとモック活用事例 - Qiita Go言語でファジング | SOTA GAE/GoとGojiの組み合わせでテストを書く - Qiita go test -count n -timeout t - Qiita Big Sky :: Re: golangでIOへのテストを行う Golang におけるサブテストの並行処理実装について | eureka tech blog GAE/Goのテストを実行するために必要なこと - Qiita Golangでテストしやすいコードをかく - Qiita Go な WebAPI のテスト＆ドキュメントの模索 - Qiita GAE/Goで書いたアプリのテストが何故か固まるのでgo testのコードをチラ見したメモ - utahta \u0026raquo; log Go言語のHTTPサーバのテスト事始め - Qiita golang で実際にメール送信せず smtp.SendMail を試すためのモック作り - Qiita Goのテスト結果をCIでちょっと詳しく表示する - Qiita go vet の shadow を知る – Eureka Engineering – Medium Ginkgoでgolangのビヘイビア駆動(BDD)開発入門 - Qiita Goのtestを理解する in 2018 #go - My External Storage Go: Fuzz Testing in Go - A Journey With Go - Medium Goのtestを理解する in 2019 - My External Storage Goのtestを理解する - httptestサブパッケージ編 - My External Storage  ドキュメント・フレームワーク  Go で godoc を使えるようにする〜godoc のインストール〜 - Qiita Go言語のコードレビュー | SOTA Go コードのレビュー時によくされるコメント - build error testingパッケージのExamplesについて - taknb2nchのメモ GoのExampleテストが便利 : swdyh godoc.org への掲載方法を調べた - taknb2nchのメモ [swaggo]GoのGoDocを書いたら、Swaggerを出せるやばいやつ - Qiita Go CodeReviewComments 日本語翻訳 #golang - Qiita チョットできるGoプログラマーになるための詳解GoDoc - Qiita  Refactoring  ジェネレートしたコードを gofmt / goimports する - Qiita Big Sky :: golang のリファクタリングには gofmt ではなく、gorename を使おう。 : リファクタリングには gofmt よりも gorename が使えるという話 struct にアノテーションつけてたら go vet . すべき - Qiita これからGo言語を書く人への三種の神器 - Qiita : go vet, goimports, golint で正しいコードを書きましょう。 golintと闘いたいけど心の折れてしまった勇者のための隠しダンジョン - Qiita gometalinter で楽々 lint - Qiita : 各種 lint を統合的に扱える golangのループ変数の使い方をチェックするlinter作ってみた - Qiita  Continuous Integration  Go + Travis CI + Coveralls でCI環境を作る - Qiita GithubにあるリポジトリをTravis CI連携する手順 #junitbook - くりにっき CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA golangでTravis CIを使ってクロスコンパイルするときにハマったところ #golang #travisci - uchimanajet7のメモ Go言語のビルド生活を drone.ioで幸せに暮らす #golang - Qiita Go+Webアプリケーション+CircleCIで静的解析・テスト・バイナリリリースを効率良く行なう - Qiita Circle CI 2.0の基礎的な設定まとめてみた(GAE/Goのサンプル付き) - Qiita goreleaser/goreleaser: Deliver Go binaries as fast and easily as possible  goreleaserを使ってGoで書いたツールのバイナリをGithub Releasesで配布する - $shibayu36-\u0026gt;blog; goreleaser と Travis CI で Golang のバイナリ配布を自動化する - /storage/tummy.log   Go言語利用のレポジトリをInspecodeで静的解析＋テストしてみる - Qiita 【GitHub Actions】Go言語の自動テストからリリースまでを作ってみた - Qiita  クロス環境  Goはクロスコンパイルが簡単 - unknownplace.org Go のクロスコンパイル環境構築 - Qiita golang でのクロスコンパイルの留意事項 — KaoriYa : Windows 環境でクロス環境を構築する際の注意点。 Golang + Raspberry Pi + LPS331AP で気圧・温度を測定してみた - Qiita : Raspberry Pi 用のクロス環境例。 Gobot - Golang framework for robotics, physical computing, and the Internet of Things 複数プラットフォームにGoアプリケーションを配布する | SOTA  Go1.5はクロスコンパイルがより簡単 | SOTA   MacOS X でGo言語のクロスコンパイルを試したらハマった - Qiita : gox を使う方法 Goで64bitと32bitの実行ファイルを同一Windows機で作成するために講じたこと - Qiita Travis-CI で Go の Windows 用バイナリを Github release に登録する - Qiita gopherjs + electron テスト - Qiita : gopherjs/gopherjs を使って Go のコードから javaScript コードを生成できるらしい Raspberry PI ２ 用の consul を作る (201512版 - Qiita : Raspberry PI 上でビルドするより Linux のクロス環境を使ったほうが速いらしい CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA RaspberryPi1(2とzeroも)で動かすgolang製アプリをクロスコンパイル(onMac) - Qiita GoでFPGAしてみる(Reconfigure.io) - Qiita GoでCLIツールを作成してRaspberryPiで実行する - Qiita  C 言語との連携  cgoでGoのコードからCの関数を利用する - 1000ch.net cgoでGolangとC++ライブラリをリンクするとき、何が起きているのか - beatsync.net GO 1.5 と C++ を SWIG でブリッジさせる方法 - Qiita cgoを使ったCとGoのリンクの裏側 (1) - Qiita  cgoを使ったCとGoのリンクの裏側 (1) - Qiita   Golang で Static Library を作る際、stringをparameterで受け取るならコピーしよう。 - Qiita マルチプラットフォーム対応したライブラリ Golang - Qiita Big Sky :: golang の Windows 版が buildmode=c-archive をサポートした。 Golang で過去の遺物的(cp932)DLLを利用する - Qiita Big Sky :: Golang で Windows の DLL を作る方法 GoでShared Libraryをビルドしてみた(簡単ドキュメント指向DB) - Qiita cgoやってみた - Qiita GoとCの間のポインタ渡し - Qiita Cgoを使ったパッケージと「Docker as Bug Report/Reproduce」というOSS運用について - DRYな備忘録  組込み開発 主なものは「組込みで Go」に移動。 以下は携帯端末開発に関するブックマーク：\n go 1.5でgomobile(android) - unokun’s blog gomobileでiOSアプリをビルドする手順まとめ - GolangRdyJp gomobileで日本語フォントを扱ってみる - Qiita GoでBenchmarking Raspberry Pi Zero W GPIO Speed - Qiita Raspberry Pi 3 Model B+のUbuntu 64bitに golang の導入を試みて失敗した話 - Qiita  ビルド時に情報を各種埋め込みたい  Go言語: ビルド時にバージョン情報を埋め込みたい - Qiita Golangビルド時に、サブパッケージ内の変数をいじる - None is None is None Goでビルドバージョン情報を参照できるようにする(Go1.5) - Qiita go-bindata でコンパイル時にリソースを埋め込んじゃおう！ - Qiita ソースを実行ファイルに埋め込む方法 - Qiita Golangで静的ファイルをバイナリに含めるライブラリを書いてみた - Qiita GolangのGin/bindataでシングルバイナリを試してみた(+React) - Qiita Goで任意のbuild tagsをつけてビルドファイルを切り替える - Qiita Goでビルドしたバイナリに製品名やファイルバージョンを追加する方法 : Windows 専用  Build Tools for Golang constabulary/gb を使ってプロジェクトベースの環境構築\n golang - gbを知ったのでgojiを使ったWEBアプリケーションプロジェクトを管理してみた - Qiita Building Go projects with gb - Supermighty Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA  FiloSottile/gvt というのがあるらしい。\nMasterminds/glide と Go 1.5 の Vendoring 機能を組み合わせてパッケージ管理できる。\n glide - パッケージ管理のお困りの方へ - - Qiita  パッケージ依存解決ツールというのがあるらしい。\n Big Sky :: golang オフィシャル謹製のパッケージ依存解決ツール「dep」 dep(Go dependency tool)を自作ライブラリに使ってみた - Qiita  direnv で開発環境を切り替える direnv - unclutter your .profile\n direnv/direnv direnvで解決するGOPATHの3つの問題点 - None is None is None 改めて、direnvを使いましょう！ - HDE BLOG さくら - homeにgolang, direnv とvirtualenvを入れて動かす - Qiita  Integrated Development Environment (IDE)  EclipseでGoプログラミング！ GoClipseのインストールとGojiフレームワークを使ったWeb APIの作成 （1/6）：CodeZine WindowsでGolang開発環境構築　IntelliJ IDEA - Qiita  第1回　Android Studio，そしてベースとなる「IntelliJ IDEA」とは何か？：Android Studio最速入門～効率的にコーディングするための使い方｜gihyo.jp … 技術評論社 : IntelliJ IDEA についての解説   Go入門@環境構築編(IntelliJ IDEA 14.1.4) - Qiita WindowsにIntelliJ IDEAでgoの開発環境を作りましたよ　ついでにgit連携もいたしましたよ - Qiita Cloud9にGo言語でHelloWorldを実装・実行してみた - Qiita GoLand: Capable and Ergonomic Go IDE by JetBrains  ATOM で Go  AtomでGoを書く環境を整える（Windows） - Technically, technophobic. AtomでのGo言語開発環境セットアップ - Qiita  Visual Studio Code で Go  VisualStudioCode - Visual Studio CodeでGo言語の設定 - Qiita VSCode+Golang : task.json の設定 VisualStudioCodeでGAE/Goの環境設定 - Qiita  Emacs で Go  emacsでGoの環境構築をやる - Qiita  Vim で Go  Vim で golang を書く環境を整える - Qiita Big Sky :: Vim で Go 言語を書くために行った引越し作業 2020年度版 gopls 0.4.3で構造体を初期化（\u0026ldquo;fillstruct\u0026rdquo;）しようとしても、\u0026ldquo;No code actions found\u0026quot;とだけ表示される - My External Storage vim-goを使わず、LSP（gopls）を使ってVimのGo開発環境を構築する - My External Storage  CLI; Command Line Interface  Go言語によるCLIツール開発とUNIX哲学について - ゆううきブログ 開発者から見た UNIX 哲学とコマンドラインツールと Go言語 - TELLME.TOKYO （Qiita 版） コマンドライン引数 - Qiita Go言語のflagパッケージを使う - uragami note Go を使ってコマンドラインツール wordc を作ってみた - Qiita : codegangsta/cli についての言及あり GoでCLIツール作るのに便利そうなパッケージを集めてみました - Qiita C言語とGo言語で標準出力が端末を参照しているかどうかを判定する - uragami note Go言語のCLIツールのpanicをラップしてクラッシュレポートをつくる | SOTA flag 並にシンプルでより強力な CLI パーサ kingpin の紹介 - Qiita Goで外部コマンドをパイプして実行する - Qiita  Big Sky :: golang で UNIX コマンドパイプラインを扱う   Golangで外部コマンドを実行する方法まとめ - Qiita spf13/cobra: A Commander for modern Go CLI interactions  GolangでCLIの場合にcobraを使うことにした件 | FLAMA技術Blog   GolangでwebサービスのAPIを叩くCLIツールを作ろう - Qiita GoでMySQLにCA証明書を使ってアクセスする - Qiita Golangのコマンドライブラリcobraを使って少しうまく実装する - Qiita  GUI; Graphical User Interface  Go用のGoogle製のGUIツールキットgxuiのインストール(Windows版) - Qiita goでwindowsでwindow - Qiita 今後イケそうなデスクトップGUIフレームワーク - Qiita : go-thrust について言及 GolangのOpenGL事情(WebGLも含むよ) - Qiita Goで3Dモデル変換してプレビュー - Qiita Go最後の秘宝「GUI」を探しに行く - Qiita golangのGUIパッケージgo-gtkを試す - Qiita gocui の基本的な使い方 - Qiita : CUI (Console User Interface) GolangでクロスプラットフォームGUIアプリを作る - Qiita GoCV - Golang Computer Vision Using OpenCV 4  golangでOpenCVを使おう - Qiita    Web Microframework for Golang  Mithril＋golang Gin を試す - Qiita Big Sky :: golang で最近お気に入りの WAF「Goji」 gojiのMiddlewareの使い方 - Qiita Gojiを使ってWebビーコン作る - Qiita Google App EngineでGoのウェブアプリケーションをまず動かしてみる - Qiita Go言語(Go-Json-Rest)でAPIサーバーを立てるときのCORS設定 (Basic認証機能付きも) - Qiita Goでwebサーバー作るときに考えたこと - Qiita Golang の net/url で # を含む文字列を Parse() する - Qiita Golang で OpenStreetMap ファイル（osm.pbf）の読み込み（osmpbf 利用） - Qiita GoのWEBアプリケーション運用について - Qiita go-qmlのWebViewでローカルWebサイトを表示するときの注意 - Qiita http.Clientのタイムアウトの時間を変更 - Qiita golangでhttpを監視するscriptを書いて結果をslackにpostする - Qiita Go言語(Go-Json-Rest)のCORSでのハマり。Safariだけでハマった話。 - Qiita GoでGoogleCalendarAPIv3を叩く（APIキー） - Qiita Golang で iso-2022-jp メールのデコード - Qiita Go言語の練習用にTwitterのOAuth認証をフルスクラッチしてみた - Qiita Goとtesseractで簡易OCRサーバを作る - Qiita Go言語で簡単にHTTPリクエストを送ってJSONをパースするサンプル - Qiita UnixListener.Closeでソケットファイルが消えて困っている - Qiita Goフレームワークのパフォーマンス比較 - Qiita 一定時間だけ立ち上がるサーバーを書いた - Qiita Big Sky :: golang のミドルウェアとして組み込むだけでパフォーマンス改善が見込める「HTTP Coala」 Go付属のツールでオレオレ証明書を生成する - Qiita : なるほど（笑） Go http.RoundTripper 実装ガイド - Qiita Go で静的 HTTP サーバを作る - Qiita [golang]RevelでCSRFの対策 - Qiita net/httpでポート443のHTTPSサーバーを立ち上げるまで - Qiita 概観からGoのWebFrameworkを選ぶ（2016/02） - Qiita Revel(Golang)でViewを理解する - Qiita Big Sky :: golang で画像アップロードが簡単に出来る go-imageupload を使ってみた。 Go言語のスクレイピング系ライブラリまとめ - Qiita Go の echo ってWebサーバーでサクッと REST しちゃう - Qiita nginx+circus+gojiによるgolang webアプリケーションの動作環境構築 - Qiita Big Sky :: golang で HTTP を使った処理を4倍速くする GolangのフレームワークEchoの話とHelloWorldサンプルを読み解くだけ - Qiita Golang+Echo+dbrでMySQLのCRUDをする／JSONでDBの値を返却する話 - Qiita Gin(Golang)におけるHTMLテンプレート記述方法 - Qiita GoLang で html/template を使っていて遭遇したエラーとその解決 - Qiita GAE/Go (echoフレームワーク)で Line Message API 使って Bot を作る。 - Qiita Go製のフレームワークechoを使ってJSONを返すWebサーバーを作り、GoogleAppEngineで動かす - Qiita go+ginでローカルで作ったWebアプリをGoogleAppEngineに載せる時に注意することまとめ - Qiita 社内のバックエンド開発にgRPCを導入してみた - Qiita Echoはver.3で結局のところ何が変わったのか？ - Qiita Go言語のWEBフレームワークRevelを使用してセキュアなAPIを作成 - Qiita Go でツール書くときの Makefile 晒す - Qiita goa でデザイン・ファーストをシュッとする - Qiita echo 初心者でも簡単!! echo で扱うアセットファイル群を簡単にバイナリにまとめて使ってみる - Qiita Go ライブラリによる CGIプログラム内ルーチング - Qiita Go 言語で Apache Bench (ab) を実装してみた - takatoshiono\u0026rsquo;s blog HTTP/2 Server Push - The Go Blog Go + echoでfetch APIを使ってPOSTする - Qiita Big Sky :: golang の http.Client を速くする Big Sky :: Re: Go でシングルバイナリな Web アプリを開発しているときに webpack \u0026ndash;watch をうまいところやる gopher-lua でサーバーの設定を動的に変更する - Qiita 【Go言語】gothでWebアプリを外部サービス認証ログインできるようにする - Qiita Goでマイクロサービスやってみる〜gokit〜 - Qiita GoでHTTPクライアントを書く時のURLの組み立て方 - Qiita goでWebサーバを書くためのシンプルなライブラリchiの紹介 - Qiita Golangでパーセントエンコーディング - 逆さまにした  Golangでパーセントエンコーディングをデコードする - 逆さまにした encodeURIComponentが世界基準だと誤解してた話 - Qiita   gRPCとREST APIでスループットを比較する - Qiita Big Sky :: Golang と Vue.js で簡単なアプリケーションを作ってみた。 【echo】ファイルのアップロード方法で詰まった話 - Qiita いつの間にか go の http/net が renegotiation に対応していた話 - Qiita Big Sky :: golang の html/template でレイアウトを扱う方法 ぼくのかんがえたさいきょうのまいくろさーびすあーきてくちゃ - Qiita 【Go】ファイルアップロード - Qiita Go製WebToolKit Buffalo[概要編] - Qiita Go+Echoの環境にNewRelicを導入する - Qiita golangのechoで静的なサイトを建てるならNowがお手軽という話 - DEV Community 👩‍💻👨‍💻 golangでWebアプリケーションのルーティングを実装する！ - Qiita Goのhttpルーター「Chi」の紹介 - Qiita go で gorma を使ってAPI開発してみる。まずはgoa編 - Qiita grpc-gatewayでgRPCのREST対応を試しました - Qiita Go言語のRESTサーバーを Clean Architecture で作ってみる - Qiita SSOサービスKeycloakとgolangのHTTPサーバを連携する - Qiita Go 言語のフレームワーク比較 - Qiita Go言語のnet/httpクライアントでリダイレクトをやめる - Qiita ブラウザレンダリングの仕組み - Qiita HTTPレスポンスボディの内容をログに残したい - My External Storage  他サービスとの連携  マイナンバーのチェックデジットをGoで計算する - Qiita golangでImageMagickを触りたい - Qiita Go言語でRedshiftとつなぐ（というかただのPostgreSQL） - Qiita Gmail API for Goで、下書き生成ツールを作りました。 - Qiita Big Sky :: Windows からも ssh でリモートコマンド実行したい、それ golang で出来るよ コマンドラインからググれてもいいと思ったので作った - Qiita GoでSpreadsheetを操作するパッケージを作った - Qiita Go言語で東京メトロAPIを叩く - Qiita Twilio使って、入力した電話番号をチェックする方法 - Qiita Windows+GoでNFC/Felicaにアクセスしてみた - Qiita UnityのネイティブプラグインをGoで書く #golang #unity - Qiita radikoの録音ツールをGoで書いた - Qiita Golang の DB 操作 ORM をいろいろしらべてみたい - Qiita 100万回のWebSocket接続とGo | プログラミング | POSTD HTTP(S) Proxy in Golang in less than 100 lines of code  DB 連携  Go言語でBigQueryのクエリを実行してみる - Qiita Go の DB アクセス用のパッケージを作った - Qiita MySQLでのトランザクション処理をGolang+dbrで実現してゆく話 - Qiita (メモ)mattn/go-sqlite3を使ってみた - Qiita GOのORM sqlboiler 使ってみた　- Qiita GoでMySQLにアクセスしてみる（gorp編） - Qiita go-sqlrow Go言語のために、すべてのORMに対応できるデータベースシャーディングライブラリを作った - Qiita GoのGORMでiterate - Qiita Big Sky :: SQLite3 でロジスティック回帰 golang-migrate/migrateパッケージを使ってみる - Qiita GoのアプリケーションにDatadogAPMを導入する。 - Qiita GoのDBライブラリについて調べてみた - Speaker Deck  DB 連携 with GraphQL  graphql-go/graphql: An implementation of GraphQL for Go / Golang  golangでGraphQLの素振りを行った - Qiita    GAE/Go  GAE/GoでCMSつくった - Qiita Go+GAE+Cloud Datastoreで簡単なREST APIを構築 - Qiita Google App Engine SDK for Goを使ってGAE上でアプリを動かすまで - Qiita GAE/Goで形態素解析してみた - Qiita GAE/Go+glide的な構成での環境構築 ~ローカルサーバー立ち上げまで~ - Qiita Go言語の依存管理ツールを作って、開発環境構築を覚えた - Qiita GAE/Go で Google Cloud Spanner を操作する（前編） - Qiita GAE/Goでもgoroutine使おうぜ！というハナシ - Qiita : GAE/Go の API には非同期版がないので積極的に goroutine 使おうよ，という話 CircleCI 2.0でGlide管理のGoをGAEにデプロイする - Qiita GAE(Google App Engine) で Golang を開発するための環境を構築する #golang - Qiita GAE(Google App Engine) で Golang 初めての REST API #golang - Qiita Go×GAE×Dockerで作るGoogleOAuth認証アプリ - Qiita GAE/Goでメールを受信する GAE Go 開発環境の構築からテストアプリのデプロイまで【MacOS】 Go 言語で Google Cloud Storage の既存のバケットにオブジェクトを保存する GAE/Go1.11試行（その1：「クイックスタート」） - Qiita Go言語でGoogle Drive APIとGmail APIを使う方法 - Qiita  AWS Lambda  AWS LambdaのGoサポートについて今知れるいくつかのこと - Qiita  Excel との連携  Go で簡単に Excelを作成するライブラリ。 色、罫線、網掛けを事前定義済 - Qiita Go言語でエクセルファイル (.xlsx) を読み込む - Qiita : github.com/tealeg/xlsx パッケージを使用 Go言語でExcel操作ライブラリを書いてみた - Qiita : github.com/loadoff/excl パッケージの説明 Go言語でExcelファイルを処理するのが超簡単だった | 非IT企業に勤める中年サラリーマンのIT日記  Go で数学  大学入試問題をGoで解いてみる - Qiita : math/big パッケージを使って大きな数を計算する。 golangで数独を解いた - Qiita golang で AB x CD / E - F * G * H = 2016 になる全パターン洗い出し - Qiita Go で 0 から始まる連続する n 個の整数を重複無く k 個選んだ時の組み合わせの列挙 - Qiita ピーマンとハトと数学を Go 言語で試す - Qiita golangでニュートン法を使って平方根の計算をする - Qiita 重み付き乱択アルゴリズムを整数だけで完結させる - Qiita 宣教師と人食い人種の問題をGolangで再帰するクロージャ使って書いてみた。 - Qiita golangによるグラフ理論ライブラリの実装 Big Sky :: golang で tensorflow のススメ  Big Sky :: Golang だけでやる機械学習と画像分類   Big Sky :: TensorFlow Lite の Go binding を書いた。 Go による機械学習 推論フレームワークの最新動向 2019 - Qiita  Big Sky :: Go 言語で TensorFlow の学習   Go + gonum を使った行列計算まとめ - Qiita Goで作った数値計算の関数をまとめとく - Qiita  ソートアルゴリズム  sliceのシャッフル - Qiita : Fisher–Yates shuffle というアルゴリズムらしい Go言語でバイトニックソート実装してみた - Qiita Goでバケットソートアルゴリズム(ビット列を使用) - Qiita interface{} をソートする - Qiita Big Sky :: golang の sort インタフェース難しい問題が解決した  暗号技術関連  Go言語と暗号技術（AESからTLS） | SOTA  tcnksm/go-crypto : サンプルコード    以下は Soshi Katsuta さんによるテキスト。 丁寧な内容でとても参考になる。\n Go 言語で学ぶ『暗号技術入門』Part 1 -DES, Triple DES- | Step by Step Go 言語で学ぶ『暗号技術入門』Part 2 -AES- | Step by Step Go 言語で学ぶ『暗号技術入門』Part 3 -CBC Mode- | Step by Step  Garbage Collection の話  Go言語のリアルタイムGC　理論と実践 | プログラミング | POSTD Go言語の低レイテンシGC実現のための取り組み | プログラミング | POSTD 引数で既存メソッドを渡した場合とlambdaで渡した場合でGCAllocに差がでた - Qiita GolangのGCを追う | SOTA  その他 四方山話  GASCII.jp：Goならわかるシステムプログラミング O\u0026rsquo;Reilly Concurrency in Goの読書メモ - Qiita Goでクリーンアーキテクチャを試す | プログラミング | POSTD Golangの最新版をソースからビルドする - Qiita #golang CodeReviewComments 日本語翻訳 - Qiita Goにおける等値と等価の考察(struct1==struct2と\u0026amp;struct1==\u0026amp;struct2とreflect.DeepEqual(struct1,struct2)とreflect.DeepEqual(\u0026amp;struct1,\u0026amp;struct2)) - Qiita golangのruntimeからアクセスする/etcのファイル - Qiita Go言語がWebAssemblyをサポートへ。GOARCHは「wasm」、GOOSは「js」に － Publickey Go にとても長い式を食べさせると死ぬ - Qiita Language and Locale Matching in Go - The Go Blog Go言語(Golang) はまりどころと解決策 go - Creating call graph in golang - Stack Overflow Goのインクリメントとデクリメントのベンチマーク比較 - Qiita Goの shortcircuit 最適化パスを読んだので解説する - Qiita goumlでgoプロジェクトのUML図を出力する - Qiita Goとrdtscの謎を追う - Qiita Go言語のアプリケーション設定・環境変数をStructにまとめる - Qiita How a Go Program Compiles down to Machine Code - Better Programming - Medium [発表資料] 第138回RITS技術交流会『なぜ私たちはGoを書くのか。今あらためて考えるGo言語の良さと実際』 - My External Storage Language and Locale Matching in Go - The Go Blog OWASP/Go-SCPを読んでセキュアプログラミングとGoを学ぶ - My External Storage The Go Playground（play.golang.org）のショートカットキー - My External Storage The Zen of Go | Dave Cheney  ブログ: Goの禅 (The Zen of Go)   「プログラミング言語Go完全入門」の期間限定公開のお知らせ - Mercari Engineering Blog Go vs Rust : 特徴量DBに適するのはどっち！？ - ABEJA Tech Blog  他言語との比較もしくは移行  ErlangとGolangを比較してみる - Qiita Gopherの道を歩む – Node.jsからGo言語への移行 | プログラミング | POSTD Why Go? | Dave Cheney  [翻訳] Why Go? - Qiita   RubyからGoの関数をつかう → はやい - Qiita  Perl6からGoの関数をつかう → はやい? - Qiita GroovyからGoの関数を使う→はやい - Qiita Big Sky :: RubyからGoの関数をつかわなくても再帰をやめる → はやい   Ruby + mecabが遅いのでGoを経由する - Qiita  [Go 言語]に Generics がない理由  Big Sky :: golang と Generics と私  golang と Generics と吾 - Qiita Java の Generics にもの思い - Qiita    なぜ [Go 言語]はイケてないか？  なぜGo言語は設計が悪いのか – Go愛好者の見地から | 未分類 | POSTD Go言語がダメな理由 | プログラミング | POSTD [Why Everyone Hates Go · npf.io](Why Everyone Hates Go · npf.io)  [翻訳]なんでGoってみんなに嫌われてるの？ - Qiita    小手先のテクニックもしくはプログラミングパターン  Big Sky :: golang の遅いコードをたった1行で高速化するテクニック : 実際にはちょっと速くなるくらいらしい Go言語で作った実行ファイルを小さくしよう！ - Qiita Goのプログラミングパターン 6年間におけるGoのベストプラクティス | プログラミング | POSTD Go言語のFunctional Option Pattern - Qiita Big Sky :: Golang で物理ファイルの操作に path/filepath でなく path を使うと爆発します。 : URL の操作には http.ServeFile を使うとかあるらしい golang の 引数、戻り値、レシーバをポインタにすべきか、値にすべきかの判断基準について迷っている - pospomeのプログラミング日記 : ケースバイケースだよねぇ。もしくはプロジェクトごとにポリシーを決めるか Goを始めて1年間で最高にお世話になったGo関連ブックマークを晒します。 - Qiita Practical Go | Dave Cheney  その他，分類困難で未整理（もしくは一時保管場所）  goでLチカの練習　その２ - Qiita Revel templatesを使ったサンプルアプリケーション - Qiita Go言語でパッケージを作成して世界に公開する方法 at ミネルヴァの梟は黄昏とともに飛び始める（山下 大介 公式ブログ） : パッケージの作り方なんだけど情報が古い。「昔はこうだった」くらいの感じで goでwindowsでキースキャン - Qiita Google ChromeのテキストエリアをEmacsで編集する\u0026rsquo;Edit with Emacs\u0026rsquo;から任意のエディタを起動するデーモンをGo 1.4 for Windowsで書いてみたわけだが、エディタがブラウザの後ろに出てしまってダメかもしれない - Qiita golangでprivateなエイリアスのポインタを元の型に戻す - Qiita Go の expvar パッケージを使ってアプリケーションのメトリクスを公開する - Qiita cmd.Envを設定してexecしたらコケた - Qiita : exec パッケージを使う際には環境変数に注意 1l0/sumeragi : 皇紀や元号を出力するパッケージ goのmgoでfindするときの処理 - Qiita Go + QML + QChart.js で素敵なチャートを表示する - Qiita Goで帳票をPDFに作成するライブラリ。 請求書などの複雑なフォーマットにも対応 - Qiita GoでANSIエスケープコードを扱うライブラリを作った(色付け・カーソル移動等) - Qiita Golangでreduce関数を提供しているライブラリugoを眺めてみた - Qiita Go 言語で rm 用ごみ箱ツール gomi を作った - Qiita パッケージのimport pathを好みのURLにする - Qiita Terraform for さくらのクラウド - Qiita Big Sky :: golang で slim テンプレートエンジン書いてる。 独自のfmt.Formatterを実装する - Qiita Go 言語で wc を実装してみた - takatoshiono\u0026rsquo;s blog 簡単な式の評価機を作ってみる #golang - Qiita Goのコード生成のためのテンプレートエンジン seyfert を書いてみた - Qiita nagomeのplugin ngm-polly 作った - Qiita Go言語でコレクション処理のメソッドを作ってみた　#golang - Qiita ASTを取得する方法を調べる #golang - Qiita goパッケージで簡単に静的解析して世界を広げよう #golang - Qiita こわくない！今日からはじめるGo言語コード生成 - Qiita Big Sky :: レーベンシュタイン距離を使ったあいまい grep コマンド「lsdgrep」作ってみた Re:ゼロから始めないAPNGエンコーダ - Qiita Go言語を使用して簡単なLineBotを作る - Qiita Go言語でコマンドを実行し、一定時間内に終了しなかったらプロセスを強制終了する - Qiita golangでQRコードを生成するパッケージを作ってみた - Qiita goでwindowsのWMI経由からディスクIOPSを取得してみた - Qiita Big Sky :: Golang で優先度を変えてプロセスを起動する。 GoでORMライブラリまわりを綺麗に書く - Qiita ECHO+GORMでJWTとGraphQLの環境を構築 - Qiita Goの抽象構文木（AST）を手入力してHello, Worldを作る #golang - Qiita go-bindata が awesome-go から削除された - Qiita go-twitterでUserStreamingを取得する - Qiita GolangでのUDP処理メモ - Qiita ぼくが かんがえた さいきょうの でーたすとあ らっぱー - Qiita Goからlocalのtest用DB(MySQL)をdockerで起動する - Qiita GoでHTMLをPDFに出力する - Qiita golang 3ways to iterate - Qiita flagdayという日本の祝日を Go で扱うライブラリを作った - Qiita machineryについて - Qiita go-prompt v0.2.0の新機能紹介 - Qiita GoアプリケーションをSupervisorでデーモン化😘 - Qiita Facebook の Graph API で自分の投稿を取得する (go) - Qiita  Facebook の Graph API で 団体の情報を得る (go) - Qiita   GoでHTMLをPDFに出力する - Qiita GoでLet\u0026rsquo;s Encryptの証明書を自動で取得するサーバーを作る - Qiita How to Tar and Un-tar files in Golang – Steve Domino – Medium [Golang]リアルタイムログ転送+閲覧ツール作った | ブログ :: Web notes.log Big Sky :: Go言語で ping を打って「にゃーん」を表示させる Linuxのユーザーランドをinitから全てまるごとgolangで書く - Qiita Go言語でAWKを作ってみました - Qiita パズルゲームをGoで作ってみる - Qiita Goでゼロからニューラルネットワークを組んでみた - Qiita ブラックジャックをGoで実装してみた。 - Qiita golang.org/x/oauth2で色々な認可フローや方言に対応する - Qiita io.Pipe関数の２つのdeadlockポイント - Qiita golangで計算量オーダーを実感する - Qiita CLI で esa.io の記事を作成するツール esautils を作りました - Qiita KAMINASHI（カミナシ） | 誰でも使える食品工場管理アプリ : バックエンドは Go 言語で書かれているらしい Go GoCSVでShift_JISでCRLFなCSVを作る : github.com/gocarina/gocsv というパッケージが便利っぽい Golangでグラフを描く grpcの練習がてらgoのディレクトリ転送パッケージを作成した Goでods(Open Office Spreadsheet)ファイルを読み込む - Qiita golangでi18n - Qiita Golangで日本語PDFを出力する方法 - Qiita Go初心者が書くarXiv APIを使って論文リストから論文を取ってくるアプリ - Qiita Golangでメソッド呼び出しによる部分適用 - Qiita Excelize version 2.0.0 Released - Qiita golangでtemplateの読み込みパスを複数定義する - Qiita Dropbox SDK for Goを使ったファイルのアップロードやダウンロード - Qiita Go言語で日本語フォーマットをpdf出力 - Qiita Go 1.12でgopdf使ってテンプレートのPDFに色々埋め込み - Qiita Big Sky :: 如何にしてけしからん画像を超高速でダウンロードするか goceleryを使ってみた - Qiita golangにおけるJSONPの解析 - Qiita レイヤードアーキテクチャの階層構造を守らないimportを警告するlinterを作った - My External Storage Go: ElasticSearch Clients Study Case - A Journey With Go - Medium Go の標準パッケージにないシステムコールを使う - Qiita 一部のフィールドを無視して構造体を比較したいときはgo-cmpを使う - My External Storage  "
    },
    {
      "title": "次期 Go 言語で導入される総称型について予習する（その3）",
      "section": "golang",
      "description": "Go が総称型を得ることで更に独自に発展することを期待している。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/generics-in-go-2-update-update/",
      "published": "2020-09-26T14:21:12+00:00",
      "update": "2020-09-28T23:08:53+00:00",
      "content": " 次期 Go 言語で導入される（かもしれない）総称型について予習する 次期 Go 言語で導入される総称型について予習する（その2） 次期 Go 言語で導入される総称型について予習する（その3） ←イマココ   前回紹介した “Type Parameters - Draft Design” が 2020-09-21 にアップデートされたらしい。 どうやらこれが最終案になりそうだ。\n早ければ2021年8月にリリース予定の Go 1.17 でお披露目というスケジュールは変わらない模様。 また総称型（generics）に対応した Playground も最終案の仕様で稼働中である。\n https://go2goplay.golang.org/  前回からの変更点 前回は，たとえば\ntype ordered interface { type int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, uintptr, float32, float64, string } func Max(type T ordered)(x, y T) T { if x \u0026lt; y { return y } return x } のような記述だったが，今回は型パラメータ（type parameter）の記述がちょっと変わったようで\ntype ordered interface { type int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, uintptr, float32, float64, string } func Max[T ordered](x, y T) T { \tif x \u0026lt; y { return y } return x } と角括弧 [...] で囲まれている。 どうしても山括弧 \u0026lt;...\u0026gt; はイヤみたい（笑）\ntype キーワードは無用となった。\n組込み済みの制約 組込み済みの interface 型として error が定義されているように，組込み済みの制約（constraint）として any と comparable が追加されるようだ。\nany はあらゆる型を包摂する。 むしろ「制約がない」ことを示す制約というべきか。 強いて書くなら\ntype any interface{} といったところだろうか。 たとえば\n// Print prints the elements of any slice. // Print has a type parameter T and has a single (non-type) // parameter s which is a slice of that type parameter. func Print[T any](s []T) {  for _, v := range s { fmt.Println(v) } }  via Type Parameters - Draft Design  みたいな感じに使える。 どうやら型パラメータの指定で制約を省略することはできないようなので，制約がない場合は any を付けることになりそうだ。\ncomparable は演算子 == および !== が使える型を示す制約だ。 これを使って\npackage main import \u0026#34;fmt\u0026#34; func Contains[T comparable](col []T, item T) bool { \tfor _, e := range col { if e == item { return true } } return false } func main() { fmt.Println(Contains([]string{\u0026#34;coffee\u0026#34;, \u0026#34;tea\u0026#34;}, \u0026#34;coffee\u0026#34;)) //true \tfmt.Println(Contains([]int{1, 2, 3}, 11)) //false \tfmt.Println(Contains([]int{1, 2, 3}, 1)) //true }  via Go Generics draft design Final  のように書ける。\nany も comparable も制約としてのみ使用可能で，通常の inteface 型としては使えないようだ。\nなお， Go の総称型について詳しくは以下の「本」がオススメである。 色々な事例が載っているのでかなり参考になる。\n Go 言語にやってくる Generics は我々に何をもたらすのか | Zenn  この本を買うために Zenn のアカウントを取ってもいいかも（クレカが通ればだけど）。\nGo は Nearly Java になるか 上述の「本」に\n  その慎重な Go が今、Generics を取り入れ、Better C から Nearly Java へと変わろうとしています。Java がそうであった様に、Go は Generics の導入により多くのアルゴリズムが汎用的に実装され便利になっていくでしょう  Go 言語にやってくる Generics は我々に何をもたらすのかより  とある。 標準の sort パッケージのように型ごとに似たようなコードをゴリゴリ書くのではなく，汎化されたアルゴリズムに集約されていく期待感はあるが，それが Nearly Java になるかについては懐疑的である。\nGo 言語の特徴のひとつは「汎化」の実装として Java や Rust のような公称型の部分型付け（nominal subtyping）ではなく構造型の部分型付け（structural subtyping）を採用していることにある。 当然ながらこれは総称型を使ったアルゴリズムの実装にも大きな影響を与える筈である。\n私は Go が総称型を得ることで更に独自に発展することを期待している。\nブックマーク   Go Generics draft design Final\n  それは Duck Typing ぢゃない（らしい）\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "整いました！",
      "section": "remark",
      "description": "これで新しいリビング PC の完成である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/assemble-a-living-pc/",
      "published": "2020-09-24T12:55:47+00:00",
      "update": "2020-09-25T21:14:53+00:00",
      "content": "久しぶりに Go 言語関連のイベントに参加しようとエントリしたのだが，このご時世でオンラインイベントなのですよ。\nそんで Zoom 環境を用意しなければならないんだけど，ぶっちゃけ自分のパソコンは使いたくない。 なので昨年買った中古ノートに入れようと久〜しぶりに電源を入れたら OS が起動しない！？ どうやら内蔵ストレージが完全にお亡くなりになっているらしい orz\n参加をキャンセルすることも考えたが，地元でもオンラインもくもく会やるみたいな話も聞こえてくるし（まだアナウンスがないし立ち消えかな？），諦めて新しいマシンを買うことにした。 失業してるのにお金が出ていくばっかりだよ\u0026hellip;\nあまり選択肢はないらしい 取り敢えず今回は予算を「3万円」に決めて，最初に中古ノート PC を物色してみたのだが，今回の反省を踏まえて考えると，1年位で故障しそうなのばかり（笑） 多分この価格帯のマシンは「部品取り」用なのだろう。 ホンマ，昨年のアレは「安物買いの銭失い」だったんだなぁ\u0026hellip;\nとなるとタブレットか Chromebook か，それともラズパイで自作するか。\n自作は興味あるけど絶対にドツボに嵌まるから今回はパス。 Chromebook も同じく興味はあるが「できること」の範囲がよく分からないので，これもパス。 となるとタブレットか。\nタブレットの選択肢は3つ。 Android 機か iPad か Windows 機か。 と思ったのだが，予算的に Android 機以外は無理，と判明した（笑）\nそこで Android タブレットに絞って探してみたのだが\u0026hellip; ぶっちゃけ HUAWEI 社以外の製品は「なし」だわ。 でも HUAWEI 社はなー。 米国大統領が再選したらいよいよヤバいんじゃね？ なんでこんなに選択肢がないのだろう。 しゃーない。 HUAWEI 社にするか。 いいたかねえけどめんどうみよう（あわれ仁吉よ，どこへ行く）\nさんざん悩んだ末に HUAWEI MediaPad M5 lite 10 に決めた。 タブレットが決まれば，あとは五月雨式に決まっていく。\n整いました！ というわけで\n整いました！ | Spiegel | Flickr  Bluetooth 接続のキーボードとマウスと骨伝導ヘッドセットは既存のものがちゃんと繋がった。 スタンドは今回新たに購入（今まで使ってたスマホスタンドは100円のやっすいやつだった）。 スマホと兼用だが，10インチのタブレットでも問題なく支えられるようだ。 よしよし。 これで新しいリビング PC の完成である。\nタブレットを起動してみて思ったのだが，一応 “Powered by Android” ってなってるけど「Android 風のなにか」だよね，これ。 Android アプリが使えるってだけで，これを Android 端末と呼ばわるのは詐欺なんじゃないかなぁ（笑）\nスマホもそうだけど，もう “Android” という生態系は崩壊してるのかもしれない。 なんか1990年代の UNIX 戦争を彷彿とさせるよ。 おそらく Google 的には既に生態系としての “Android” を見限っていて「タブレット買うくらいなら Chromebook にしろよ」ってとこなのだろう。\nAndroid タブレットでコードが書けるか ところで，折角なので今回はタブレット上でコードが書ける環境を作ろうと思っている。\nまずは上の写真のように Termux を導入してみた。 Termux って Windows でいうところの MSYS2 みたいな位置づけなのかな。 Linux ぽい作りでパッケージ管理に APT が使える優れものだが WSL2 みたいなサブシステムというわけではなさそうだ。 この辺はいつか記事にしよう。\nほんで，テキストエディタ。 軽くググってみたが，以下の4つがよさげ。\n DroidEdit Pro (code editor) - Apps on Google Play anWriter text editor - Apps on Google Play QuickEdit Text Editor Pro - Writer \u0026amp; Code Editor - Apps on Google Play Turbo Editor PRO | Text Editor - Apps on Google Play  無料版でそれぞれ試してみたところ QuickEdit がもっとも手に馴染んだので，君に決めた！ テキストエディタは機能以前に手に馴染むかが最優先事項よ！\nブックマーク  Termux - Apps on Google Play How to install Git on Android - TechRepublic Termux on AndroidのSSHサーバに接続する方法 | LFI 6 Best Android Text Editor for Programming | TechWiser いつでもLinuxコマンドが使える！Androidで動くLinux端末「Termux」【Root化不要】 | LFI web帳 | Androidに Linuxを簡単にインストールするアプリ「UserLAnd」 耳のためにできること。1万円を切る骨伝導ヘッドセットAfterShokz OpenMoveを見てきた。｜塚本 牧生｜note 【特集】5万円以下のChromebookは仕事に使えるのか? ～Chromebook活用術【ビジネス編】 - PC Watch 「Zoom」v5.3.0が公開 ～ユーザー側から参加するブレイクアウトルームを選択可能に - 窓の杜  参考  HUAWEI MediaPad M5 lite 10 タブレット 10.1インチ W-Fiモデル RAM4GB/ROM64GB タッチペン\u0026amp;オリジナルカバー同梱 【日本正規代理店品】 HUAWEI(ファーウェイ) (Release 2018-11-30) Personal Computers B07KJ5S7FS (ASIN), 9760054766192 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この値段で RAM 4GB が決め手。ベンダ企業がどこかは考えない（笑）\nreviewed by Spiegel on 2020-09-24 (powered by PA-APIv5)\n  Glazata アルミ製スマホ/タブレット用スタンド 折り畳み式 270°自由調整可能 デスクトップスタンド スマホ タブレット (グレー) Glazata エレクトロニクス B07HWSDG97 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  10インチタブレットでも安定して支えてくれる。折りたためばコンパクトになるが，持ち運ぶ際は注意。箱は捨てないで使いましょう（笑）\nreviewed by Spiegel on 2020-09-24 (powered by PA-APIv5)\n  iClever Bluetooth キーボード 折りたたみ式 薄型 スマホ タブレット 専用 無線 ワイヤレス コンパクトキーボード ポータブル iPhone/iPad/Andriod 対応 ブラック シルバー IC-BK03 iClever エレクトロニクス B00ZP3503O (ASIN), 6958446327516 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  携帯用と割り切れば特に問題なし。ふとした拍子に Bluetooth 接続が切れるのが玉に瑕。\nreviewed by Spiegel on 2017-04-11 (powered by PA-APIv5)\n  エレコム マウス Bluetooth (iOS対応) Sサイズ 小型 3ボタン IRセンサー 省電力 シルバー M-BT12BRSV エレコム (Release 2013-11-09) Personal Computers B00G9NIL7G (ASIN), 4953103501997 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  まぁ，マウスは消耗品だから（笑）\nreviewed by Spiegel on 2019-12-01 (powered by PA-APIv5)\n  【2019最新版 Bluetooth5.0】Bluetooth イヤホン 骨伝導 ヘッドホン 高音質 自動ペアリング スポーツ IP56防水 耳が疲れない 超軽量 完全ワイヤレス イヤホン マイク内蔵 Siri対応 ノイズキャンセル ハンズフリー通話 ブルートゥース ヘッドホン iPhone\u0026amp;Android適用 (ブラック) Bearoam エレクトロニクス B07QJB7R13 (ASIN), 0694090550660 (EAN), 694090550660 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  廉価版だし音質には目を瞑るとして（特に低音がねー），骨伝導スピーカー最高！ もうイヤフォンには戻れない。\nreviewed by Spiegel on 2019-10-10 (powered by PA-APIv5)\n  めんどうみたョ 植木 等 (メインアーティスト) EMIミュージック・ジャパン (Release 2015-07-22) MP3 ダウンロード B011LC4LY6 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  あわれ仁吉よ，どこへ行く（笑）\nreviewed by Spiegel on 2020-09-24 (powered by PA-APIv5)\n "
    }
  ]
}
