{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "golang.org/x/crypto/ssh パッケージのセキュリティ・アップデート",
      "section": "release",
      "description": "ヌルポか。似たような話を最近よく聞くな（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/12/updated-golang-x-crypto-module/",
      "published": "2020-12-17T10:44:22+00:00",
      "update": "2020-12-17T10:46:39+00:00",
      "content": "予告通り， golang.org/x/crypto/ssh パッケージのセキュリティ・アップデートが行われた。\nVersion v0.0.0-20201216223049-8b5274cf687f of golang.org/x/crypto fixes a vulnerability in the golang.org/x/crypto/ssh package which allowed clients to cause a panic in SSH servers.\nAn attacker can craft an authentication request message for the “gssapi-with-mic” method which will cause NewServerConn to panic via a nil pointer dereference if ServerConfig.GSSAPIWithMICConfig is nil.\n via [security] Vulnerability in golang.org/x/crypto/ssh  ヌルポか。 似たような話を最近よく聞くな（笑）\nちうわけで golang.org/x/crypto/ssh パッケージを使っている場合は，最新版を get し直して再ビルドしませう。 その際， go.mod ファイル内に記述されている golang.org/x/crypto モジュールのバージョンに注意。 とりあえず\nrequire ( golang.org/x/crypto latest ) とかにして，テストかビルドをし直せばいいかな？\n余談だが Go はインスタンス（への参照）が nil でもメソッド自体は呼び出せる。 まぁメソッド内でインスタンスの要素にアクセスしようとすればヌルポで panic になるんだけど。\nそんで，実は最近また Java コードを弄ってるんだけど， Java では null 参照インスタンスのメソッドを呼び出した時点でヌルポで落ちることをすっかり忘れていて，エラい目に遭ったですよ（笑）\nというわけで，アップデートは計画的に。\n"
    },
    {
      "title": "2020-12-13 のブックマーク",
      "section": "bookmarks",
      "description": "「小惑星探査機「はやぶさ２」再突入カプセルの回収結果について」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/12/13-bookmarks/",
      "published": "2020-12-13T00:59:55+00:00",
      "update": "2020-12-13T01:01:26+00:00",
      "content": "リリース情報  Release Git for Windows v2.29.2(3) · git-for-windows/git · GitHub  バベルのインターネット  米FCC、ファーウェイやZTEの排除に向け複数の決定 - ZDNet Japan  セキュリティ＆プライバシー関連  中国のインターネット規制当局は強制的なユーザーデータの収集を標的に | TechCrunch Japan PayPay加盟店に関する営業情報に不正アクセス、最大2000万件が影響の可能性 | TechCrunch Japan お問合せフォームを悪用する攻撃増加に関する注意喚起 | さくらインターネット Apache Struts 2 の脆弱性 (S2-061) に関する注意喚起 OpenSSL の脆弱性 (CVE-2020-1971) に関する注意喚起  USN-4662-1: OpenSSL vulnerability | Ubuntu security notices | Ubuntu : バックポートパッチで対応 「OpenSSL」v1.1.0iが公開 ～NULLポインター参照の脆弱性に対処 - 窓の杜   FireEye Shares Details of Recent Cyber Attack, Actions to Protect Community | FireEye Inc  FireEye Hacked - Schneier on Security FireEyeが被害に遭った一流のサイバー攻撃についてまとめてみた - piyolog   Oblivious DNS-over-HTTPS - Schneier on Security  ブログ: Oblivious DNS-over-HTTPS   フランス　クッキーの不適切な使用でAmazonに制裁金 | IIJ BizRis フランス　クッキーの不適切な使用でGoogleに制裁金 | IIJ BizRis Finnish Data Theft and Extortion - Schneier on Security A Cybersecurity Policy Agenda - Schneier on Security Kubernetes 1.20からDockerが非推奨になる理由 - inductor\u0026rsquo;s blog  Dockerは非推奨じゃないし今すぐ騒ぐのをやめろ - Cloud Penguins : 図解が分かりやすい   Dropboxで「セキュリティで保護されたインターネット接続を確立できません」と表示される | 30代未経験ネットワークエンジニアのblog : セキュリティ・ツールによる中間者攻撃。 ESET よ，お前もか orz  突然「Dropbox」が同期できなくなった！ 復旧するまで試したこと - やじうまの杜 - 窓の杜   マサチューセッツ州知事は顔認識利用を禁止する警察改革法案に署名せず | TechCrunch Japan 三菱パワーが被害に遭ったMSP経由の不正アクセスについてまとめてみた - piyolog  天文関連  JAXA | 小惑星探査機「はやぶさ２」再突入カプセルの回収結果について  再突入カプセルの火球映像 | トピックス | JAXA はやぶさ２プロジェクト MIT Tech Review: おかえり「はやぶさ2」、リュウグウのサンプルが地球に到着 Japan’s Hayabusa2 Mission Returns to Earth – Many Worlds   貴重資料展示室059 岡田芳朗文庫より 引札暦 - 国立天文台暦計算室 すばる望遠鏡の新しい系外惑星撮像装置による初の発見的成果 | 観測成果 | すばる望遠鏡 NASAとボーイングが無人軌道飛行テストのやり直しを2021年3月に予定 | TechCrunch Japan  Linux または Ubuntu に関する話題  Haskell vs Linux capabilities - あどけない話 CentOS終了にコミュニティからは非難の嵐、CentOSの設立者が新プロジェクトの発足を発表する事態に - GIGAZINE  Windows に関する話題  「.NET 5.0」「.NET Core 2.1/3.1」が“Microsoft Update”経由で更新可能に - 窓の杜  Go 言語関連  goでデータの循環参照をチェックする(gonumパッケージ グラフ入門) - Qiita GolangでのORM使ったDBアクセスロジックのtestcode事例（Functional Option Patternを使ったテストデータ準備関数を用意） - Qiita TinyGoを触ってみよう! GoではじめるHexagonal Architecture - Qiita 【Go言語】Fake timeつかったら時間のかかるコードのテストが一瞬で終わった - Qiita  【Go言語】Fake timeつかったら並行処理のテストの景色が変わった - Qiita   GoでGoogleSpreadsheet出力する - Qiita Goのプロファイラ fgprof - Qiita  Rust 言語関連  The Foundation Conversation | Rust Blog Launching the Lock Poisoning Survey | Rust Blog  その他  静音カメラアプリMicrosoft Pixが地味によいアップデートしてる｜塚本 牧生｜note グーグルの認証アプリ「Authenticator」、iOS版でもアカウント移行が可能に - ZDNet Japan Zenn \u0026amp; Hugo in Obsidian : OHZフローによるナレッジベースとアウトプットコンテンツの完全統括 : 面白そう 楽園 冬のWeb増刊「トゥインクルスターのんのんじー」 : ぽじとろんの竹本泉観察記 GitHub、ダークモード対応を発表。GitHub Universe 2020 － Publickey GitHub、企業がオープンソースに寄付できる「GitHub Sponsors for companies」発表。GitHub Universe 2020 － Publickey GitHub、電子掲示板でコミュニティ機能を実現する「GitHub Discussions」パブリックベータを開始。GitHub Universe 2020 － Publickey GitHub、自動でマージが実行される「Pull request auto-merge」機能を発表。GitHub Universe 2020 － Publickey Raspberry PiでAWS互換のコンテナ環境を作れるAmazon ECS Anywhere。AWSがコンテナとKubernetesでハイブリッドクラウド／マルチクラウド対応へ大きく踏み出す － Publickey cakes炎上と、消滅した連載｜あさのますみ｜note : まぁ cakes も「出版社」になったってことなんだろう Iosevkaというフォントが良い Hugo on Apple M1 | Hugo Oracle Database 21c正式版が登場。データベース内でJavaScript実行可能、改ざんできないブロックチェーンテーブルなど新機能 － Publickey CSSのmix-blend-mode: overlayで画像の上にテキストをオーバーレイする 方程式の解法をPythonを使って解いてみる【ニュートン法】 日本語のサジェスト機能の実装 Zenn で plantuml を使うときのいい方法 : 要するに画像に変換するしかないんだよな。 PlantUML も Java 製じゃなきゃ色々と応用できそうなんだけどなぁ “金色のミラージュ” | 高田明美オフィシャルブログ「Angel Touch」Powered by Ameba : とらのあな専売らしい。残念 山陰合同銀行、次世代ローンシステムに富士通とセールスフォースの技術を活用 - ZDNet Japan 「Google広告設定」でYouTubeとGoogleでの酒とギャンブルの広告表示削減が可能に - ITmedia NEWS input type=range のスライダーのデザインをCSSでいい感じにする CSSでテキストの選択部分の背景色を変える  "
    },
    {
      "title": "技術的負債とハッカー",
      "section": "remark",
      "description": "今後は「技術的負債」とか迂闊に口にせんことやね（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/12/technical-debt-and-hacker/",
      "published": "2020-12-12T12:37:03+00:00",
      "update": "2020-12-13T00:21:38+00:00",
      "content": "最近，立て続けに「技術的負債（technical debt）」という単語を見かけたので。\n お前も技術的負債にしてやろうか！ もしくは技術的負債と和田卓人さんをめぐるシンクロニシティ - YAMDAS現更新履歴 【翻訳】技術的負債という概念の生みの親 Ward Cunningham 自身による説明 - t-wadaのブログ 技術的負債の優先順位について論文を読んでみた  私も気軽に「技術的負債」という単語を使うが，どうも「技術的負債」自体は単に「そういう事象」を指すものであって，良いとか悪いとかの評価の外にあるようだ。\n 借入をすれば物事をより早く前に進めることができるようになりますが、そのかわり返済し終えるまでは利子を払い続けることにもなります。私はお金を借りるのは良いアイデアだと、つまりソフトウェアを急いで世に出し、それによって学びを得るのは良いアイデアだと考えていました。次第に日常に戻ってきたら、もちろん借金を返済していくことになるでしょう。つまり、そのソフトウェアについての学びを深めるにつれてリファクタリングを行うことで、得られた経験をプログラムに反映していくのです 【翻訳】技術的負債という概念の生みの親 Ward Cunningham 自身による説明より  つまり，ソフトウェアを「早く作る」ことと引き換えにしたものを金融用語の「負債」に喩えているだけで，それをどう返済（＝リファクタリング）していくか（あるいはなぜ返済できないのか）についてはまた別の話，ということのようだ。\n念の為に言うとハッカー気質（hacker ethic） 的には「早く作る」ことは美徳とされているし「早く作る」ことと「雑に作る」ことはイコールではない。 早く作って評価（試）してみて，そこから改良（＝リファクタリング）していって限りなく「完成」へ収束していくのである。\n言い方を変えるなら，「ソフトウェアは常にベータ版」であり，その「ベータ版」から理想とする「完成版」への差分が「負債」である，とも解釈できる。\nふむむむむ。\nそれを踏まえて\n ジョージ・フェアバンクスが強調するのは、病気によって必要な薬が異なり、いろんな病気を一括りにしてしまうと薬の選択が難しくなるように、いろんな問題を「技術的負債」の傘の下に一括りにしてしまうと対応を間違ってしまうので、言葉の厳密な定義を持っておくべきだということ。現在広まってしまった「技術的負債」の広い定義が強力すぎて変えられないのなら、（ウォード・カニンガムが意図した）元々の「技術的負債」を指す場合は ur- をつけて、ur-technical debt と言ったらどうかと提唱している お前も技術的負債にしてやろうか！ もしくは技術的負債と和田卓人さんをめぐるシンクロニシティより  という話にはなんだか既視感がある。\nというわけで過去の 黒歴史 日記を掘り返してみたら15年も前に\n 「ハッカー」は既に寿命を終えた「死んだ言葉」だと思う。 ってなことを書くとハッカーな方々に怒られるかもしれないが， はっきりいってハッカー以外に「ハッカー」を正確に説明し理解できる人はいないと思う。 「ハッカー」という言葉の定義はハッカーの内部で閉じている。 故に「我こそはハッカー」と叫ぶ人を誰も止められない。 かくて世界には様々に定義された「ハッカー」が乱立することになる。 「ハッカー」という言葉は既に発散してしまったのだ しっぽのさきっちょ 2005年10月 -- Spiegel\u0026#39;s Trunkより  とか書いてた。 あぁ，これと相似形か。\n「ハッカー」という単語も，元々は良いも悪いもない，単に「そういう人」を指す言葉だったが，いったんネガティブなイメージが付くとそれを払拭するために強弁する人が現れてだんだん意味が発散し，挙げ句の果てには「ホワイトハッカー」とか意味不明の言葉が登場したりする。\n“ur-technical debt” ちうのもその類の話なのだろう。 まぁ，今後は「技術的負債」とか迂闊に口にせんことやね（笑）\nブックマーク  Hackについて（What\u0026rsquo;s a Hack?）  過去に書いたこの辺の記事も黒歴史になるかな（笑）\n 技術的負債としての Web ブラウザ 技術的負債としての「オブジェクト指向」  参考図書  リナックスの革命 ― ハッカー倫理とネット社会の精神 ペッカ ヒマネン (著), リーナス トーバルズ (著), マニュエル カステル (著), 安原 和見 (翻訳), 山形 浩生 (翻訳) 河出書房新社 2001-05-26 単行本 4309242456 (ASIN), 9784309242453 (EAN), 4309242456 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  大昔に買ったんだけどうろ覚え。買い直そうかと思ったが邦訳は Kindle ではないのか。それにしても「リナックスの革命」とかいう頭の悪いタイトルはどうにかならなかったのだろうか。副題だけで十分ぢゃん。\nreviewed by Spiegel on 2020-12-12 (powered by PA-APIv5)\n "
    },
    {
      "title": "#golang のエラー・ハンドリングについて Zenn 本を書いてしまった",
      "section": "remark",
      "description": "これで私も単著持ちだ（違う）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/12/error-handling-in-golang/",
      "published": "2020-12-11T11:05:28+00:00",
      "update": "2020-12-11T11:14:16+00:00",
      "content": "というわけで Zenn で本を出してみた。\n Go のエラーハンドリング  これで私も単著持ちだ（違う）\nちなみに CC BY-SA \u0026nbsp;\u0026nbsp; で公開してるので（要求される条件を満たしていれば）自由にパクって構わない。\nいや，ちょっとした思いつきだったのよ。\n Go のエラー・ハンドリングについて自ブログで記事にしたのは，もう5年も前だが […] 補足記事を別途書いたりもしているが，起点となるこの記事が古すぎて微妙すぎる。いっそのこと全面改訂するか Golang のエラー・ハンドリングについて本を書いてしまった（改題）より  それで，実際にこのブログの記事として書き始めたんだけど\u0026hellip;\n なんか大作の予感がするよw ちうわけで，方針変更。 Zenn でデジタル本書きます。これなら「全部入り」で書けるだろう Golang のエラー・ハンドリングについて本を書いてしまった（改題）より  というわけで Zenn の Book 形式で書き直したんだけど，ホントに2万字強の大作になっちゃったよ。 誰だよ，ブログ記事で改訂版を書こうとか考えた奴。 オレだよ orz\nカバー絵はいいのが思い浮かばなかったので，以前に CC0 \u0026nbsp; で公開していたのを使いまわした。\n spiegel-im-spiegel/aozora-cover: Book Cover images for Aozora-bunko  お金を取れるような文章ではないので無料にしているが寄付（サポート）は歓迎！ ご笑覧あれ。\nブックマーク  完成しない本  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "ようやく Disqus を捨てれるよ",
      "section": "remark",
      "description": "フィードバック用に GitHub のディスカッションページを開設しました。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/12/github-discussions/",
      "published": "2020-12-09T11:54:23+00:00",
      "update": "2020-12-09T11:55:08+00:00",
      "content": "いや，もうマジで Disqus のトラッキングがウザかったのよ。 だから，早く GitHub の Discussions 機能が一般公開されないかなぁ，と思ってたんだけど\u0026hellip;\n GitHub、電子掲示板でコミュニティ機能を実現する「GitHub Discussions」パブリックベータを開始。GitHub Universe 2020 － Publickey  ブラボー！ 待ってたよ。\nというわけで，早速開設しました。\n Discussions · spiegel-im-spiegel/github-pages-env · GitHub  よーし，うむうむ，よーし。 GitHub Discussions が気になる人は試し書きとかもご自由に（笑）\nあとは Font Awesome のサードパーティ cookie が何とかなればこのブログページでの追跡コードはなくなるんだけど\u0026hellip;\nブックマーク  New from Universe 2020: Dark mode, GitHub Sponsors for companies, and more - The GitHub Blog  "
    },
    {
      "title": "io.Copy を上限付きで実行する",
      "section": "golang",
      "description": "「データ解凍爆弾」への対処",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/copying-with-upper-limit/",
      "published": "2020-12-06T05:10:36+00:00",
      "update": "2020-12-06T05:15:40+00:00",
      "content": "「もうlintに怒られない！Goでより安全にzipを扱うために」を読んで「なるほど！」と思ったが，（おそらくコードをかなり端折ってるんだと思うが）サンプル・コードがツッコミどころ満載なので，うちのブログでも覚え書として記しておく。 自作ツールでも圧縮データの解凍処理を使ってるしね。\ngosec について ところで，上述のリンク先で使われている gosec は統合 linter である golangci-lint から呼び出すことができるが，既定では無効になっている。 有効にするには --enable オプションで gosec を指定すればよい。\n$ golangci-lint run --enable gosec ./... gosec が既定で有効になっていないのは，特に unsafe 標準パッケージを使っている場合の誤検知が多すぎるかららしい。 私の環境で試してみたが処理速度的には問題ないようなので，一度は試してみてもいいかもしれない。\n最初のサンプル・コード まずは起点となるサンプル・コードを挙げておこう。 こんな感じでどうだろう。\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;compress/zlib\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; ) func compress(dst io.Writer, src io.Reader) error { zw := zlib.NewWriter(dst) defer zw.Close() if _, err := io.Copy(zw, src); err != nil { return err } return nil } func extract(dst io.Writer, src io.Reader) error { r, err := zlib.NewReader(src) if err != nil { return err } if _, err := io.Copy(dst, r); err != nil { return err } return nil } func main() { content := \u0026#34;Hello world\\n\u0026#34; //raw data \tzbuf := \u0026amp;bytes.Buffer{} //compress raw data \tif err := compress(zbuf, strings.NewReader(content)); err != nil { fmt.Fprintln(os.Stderr, err) return } //display compressed data \tb := zbuf.Bytes() fmt.Printf(\u0026#34;%d bytes: %v\\n\u0026#34;, len(b), b) //extract from compressed data \tbuf := \u0026amp;bytes.Buffer{} err := extract(buf, bytes.NewReader(b)) if err != nil { fmt.Fprintln(os.Stderr, err) return } //display extracted data \tif _, err := io.Copy(os.Stdout, buf); err != nil { fmt.Fprintln(os.Stderr, err) return } } 最初に紹介した記事で使っている archive/zip パッケージはファイルシステムを含んでいるので，今回はもっとシンプルに compress/zlib パッケージ（RFC 1950 準拠）を使ってみた。 これならデータの圧縮と解凍のみ注視できるだろう。\nこのコードを実行すると\n$ go run sample.go 24 bytes: [120 156 242 72 205 201 201 87 40 207 47 202 73 225 2 4 0 0 255 255 28 242 4 71] Hello world と一応は問題なく動く。 これで準備OK。\nDecompression Bomb Vulnerability では，このコードに対して lint をかけてみる。\n$ golangci-lint run --enable gosec ./... sample1.go:27:15: G110: Potential DoS vulnerability via decompression bomb (gosec) if _, err := io.Copy(dst, r); err != nil { ^ おー，出た出た。\n“Decompression bomb” というのは\nA zip bomb, also known as a zip of death or decompression bomb, is a malicious archive file designed to crash or render useless the program or system reading it. It is often employed to disable antivirus software, in order to create an opening for more traditional viruses. via Zip bomb - Wikipedia  ということで，主にウイルス対策ツールをターゲットにした攻撃手段らしい。 まぁ 42.zip みたいなファイルを解凍したら普通にシステムが死ぬと思うけど（笑）\n解凍処理の改修 “Decompression bomb” を緩和する方法はいくつかあるようだが，いちばん安直なのは io.Copy() 関数に上限を設けることだろう。 そのための関数として io.CopyN() が用意されている。\nfunc io.CopyN(dst io.Writer, src io.Reader, n int64) (written int64, err error) 機能としては\nCopyN copies n bytes (or until an error) from src to dst. It returns the number of bytes copied and the earliest error encountered while copying. On return, written == n if and only if err == nil. via io - The Go Programming Language  ということで\n err == nil なら上限いっぱいまで読み込み完了 err の値が io.EOF ならストリームの終端まで読み込み完了 err の値が io.EOF 以外ならエラー  と見なすことができそうだ。 そこで最初のサンプルコードの extract() 関数を以下のように書き直す。\nconst maxSize = 1024 * 1024 * 1024 //1GB  var ErrTooLarge = errors.New(\u0026#34;too laege decompressed data\u0026#34;) func extract(dst io.Writer, src io.Reader) error { r, err := zlib.NewReader(src) if err != nil { return err } if _, err := io.CopyN(dst, r, maxSize); err != nil { if errors.Is(err, io.EOF) { return nil } return err } return ErrTooLarge } とりあえずコピーの上限は1GBとした（深い意味はない）。 これで少なくとも gosec に怒られることはなくなる。\nこれ仕込むのかぁ。 頑張ろう。\nブックマーク   Secure Go · A project devoted to secure programming in the Go language\n  Go 言語でデータ圧縮と解凍\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-12-06 のブックマーク",
      "section": "bookmarks",
      "description": "「無料の SSL 証明書が得られる ZeroSSL を使ってみた」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/12/06-bookmarks/",
      "published": "2020-12-06T02:39:39+00:00",
      "update": "2020-12-06T02:39:52+00:00",
      "content": "リリース情報  Release gopls/v0.5.4 · golang/tools · GitHub Release gopls/v0.5.5 · golang/tools · GitHub Release 4.4.9_0 · zetamatta/nyagos · GitHub Release 8.8.4 · mermaid-js/mermaid · GitHub  セキュリティ＆プライバシー関連  警察庁内端末不正アクセスと5万件の脆弱なVPNホストの公開についてまとめてみた - piyolog NURO光で使用する管理者アカウントが特定される、見えてはいけない画面がまる見え＆root権限も奪取可能 - GIGAZINE ファイル・データ転送アプライアンス FileZen に関する注意喚起 中学生をゲーム内通貨不正購入の実行役にした不正アクセス事件についてまとめてみた - piyolog Impressive iPhone Exploit - Schneier on Security [openpgp] Thunderbird Writing Private Key Pass Phrases to Disk  1678655 - PGP passwords should not be stored on disk. (Security Issue)   Open Source Does Not Equal Secure - Schneier on Security Apache Tomcat の脆弱性 (CVE-2020-17527) に関する注意喚起  天文関連  VERAプロジェクト20年の成果がまとまる — 国立天文台水沢120年の歴史が達成した位置天文学の高精度化 — | 国立天文台(NAOJ) Spaceweather.com Time Machine : 肉眼黒点と太陽フレア ブログ: 地球は天の川のブラックホールに2,000光年近かったと計算 ふたご座流星群が極大（2020年12月） | 国立天文台(NAOJ)  知財関連  オープンソースのプロジェクトに商標登録の支援などを行い、不適切な利用から守る、「オープンソース商標イニシアチブ」が国内で発足 － Publickey  Windows に関する話題  nyagos が Ctrl-C で終了してしまう件 : 応援してます。気長に待ってますw  Go 言語関連  2020年,Go言語でお世話になったライブラリ/検討したけど導入しなかったライブラリ - Qiita Gormとの破局、そしてFacebook/entとの出会い - Qiita : うーむ。そろそろ乗り換え時か？ http.RoundTripperでHTTPクライアントを拡張する - Plan 9とGo言語のブログ VC++のDLL関数をGoから序数指定で呼び出す - 標準愚痴出力 golang でPDFの表紙サムネを高速作成！ - Qiita Golang による順列列挙のパフォーマンス研究 1. 再帰を用いたやり方 - Qiita  その他  定番メールソフト「Becky! Internet Mail」がMicrosoft 365のOAuth 2.0に対応 - 窓の杜 固体型色素増感太陽電池搭載 SMART R MOUSE | 環境発電技術 | 産業向け製品 | リコー PHPが5年ぶりにメジャーバージョンアップ。JITコンパイラ採用で高速化などを実現した「PHP 8」正式版リリース － Publickey CSSでテキストが1行に収まるときだけ中央寄せする マイクロソフト、Chromiumベースの「Microsoft Edge WebView2」.NET正式対応版リリース。バージョンを固定できる「Fixed Version distribution mode」も － Publickey OpenStreetMapは企業からの編集参加が増えており伸びしろがありそう - YAMDAS現更新履歴 ［速報］SalesforceがSlackを買収で合意。正式発表 － Publickey ［速報］Aurora PostgreSQLにSQL Server互換レイヤを実装する「Babelfish for Aurora PostgreSQL」発表。オープンソースとしても公開へ。AWS re:Invent 2020 － Publickey ［速報］AWS、電話の音声でリアルタイムにユーザー認証を行えるコンタクトセンター向けサービス「Connect Voice ID」発表。AWS re:Invent 2020 － Publickey CSSのobject-fitによる画像の切り抜き・リサイズまとめ プルリクエストの作成にGitpodを使ってみました！ micro:bitとノートPCをBluetooth接続して「上を向いた」タイミングをブラウザにリアルタイム表示する LaTeX入門する : Docker で運用する方法 Thoughts on software development: How to prevent tab changing in PrimeFaces TabView when validation failed 無料の SSL 証明書が得られる ZeroSSL を使ってみた CSSのtext-decorationは意外と色々なスタイル調整ができる Amazon S3がこれまでの「結果整合性」から「強い一貫性」サポートへ。データを更新直後でも最新データの読込みが保証されるように － Publickey マイナンバーカードの電子証明書を更新した｜塚本 牧生｜note AtlassianがJiraに新DevOpsメトリクスを導入、プロジェクトマネージャーや開発者はより深い考察が可能に | TechCrunch Japan SlackとSalesforceの幹部が一緒になったほうがいいと考えたワケ | TechCrunch Japan 自作キーボードでキーボードの低さを目指した話  "
    },
    {
      "title": "2021年の主な暦",
      "section": "remark",
      "description": "オリンピックやりたいなら東京だけでやれよ。「日本」を巻き込むな！",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/12/ephemeris-2021/",
      "published": "2020-12-05T04:59:16+00:00",
      "update": "2020-12-06T02:39:52+00:00",
      "content": "「はやぶさ2」が還ってくればそっちの話題で塗りつぶされるだろうから，今のうちに（笑）\nその前に\u0026hellip; 2020年12月の暦 そろそろ月ごとの暦記事に飽きてきたので，今回を最後にする。 今回は簡単に。\n   日付 内容     2020-12-07 大雪   2020-12-08 下弦   2020-12-15 朔(新月)   2020-12-15 皆既日食   2020-12-20 水星が外合   2020-12-21 冬至   2020-12-22 上弦   2020-12-30 望(満月)    2020-12-15 (日本時間) の皆既日食は主に南米で見られる。 日本では見られない。 たしか ALMA 見学とセットになったツアーがあった気がするが，このご時世では無理か（笑）\nその前日の14日はふたご座流星群の極大日にあたる。 条件最良だな！ 防寒をしっかり行って楽しみましょう。\nブックマーク  ふたご座流星群が極大（2020年12月） | 国立天文台(NAOJ)  またオリンピックのせいで祝日を移動させられたよ 💢  具体的には，令和2年12月4日 法律第68号「平成三十二年東京オリンピック競技大会・東京パラリンピック競技大会特別措置法等の一部を改正する法律」により，令和3年に限り，海の日は東京オリンピック開会式前日の7月22日，スポーツの日は開会式当日の7月23日，山の日は閉会式当日の8月8日となった．なお，8月8日は日曜日にあたるため，翌8月9日は休日となる． 令和3年の祝日と休日について - 国立天文台暦計算室より  マジ勘弁してください orz\nオリンピックやりたいなら東京だけでやれよ。 「日本」を巻き込むな 💢\nというわけで2021年の祝日・休日1 は以下のようになる。\n   日付 内容     2021-01-01 元日   2021-01-11 成人の日   2021-02-11 建国記念の日   2021-02-23 天皇誕生日   2021-03-20 春分の日   2021-04-29 昭和の日   2021-05-03 憲法記念日   2021-05-04 みどりの日   2021-05-05 こどもの日   2021-07-22 海の日   2021-07-23 スポーツの日   2021-08-08 山の日   2021-08-09 休日   2021-09-20 敬老の日   2021-09-23 秋分の日   2021-11-03 文化の日   2021-11-23 勤労感謝の日    2021-05-03 は月曜日なので 2021-04-30 を休暇とすれば，割と長めの GW になる。 来年は広島のどっかの酒蔵の蔵開きに行きたい！\nなお，国立天文台のカレンダーはすでに対応済みなので，たとえば\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/koyomi\u0026#34; ) func main() { start, _ := koyomi.DateFrom(\u0026#34;2021-01-01\u0026#34;) end, _ := koyomi.DateFrom(\u0026#34;2021-12-31\u0026#34;) k, err := koyomi.NewSource( koyomi.WithCalendarID(koyomi.Holiday), koyomi.WithStartDate(start), koyomi.WithEndDate(end), ).Get() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(\u0026#34;| 日付 | 内容 |\u0026#34;) fmt.Println(\u0026#34;| ---- | ---- |\u0026#34;) for _, e := range k.Events() { fmt.Printf(\u0026#34;| %v | %v |\\n\u0026#34;, e.Date, e.Title) } } などとすれば最新の祝日データを取得できる。\n2021年の主な暦象 日食・月食    日付 内容     2021-05-26 皆既月食   2021-06-10 金環日食   2021-11-19 部分月食   2021-12-04 皆既日食    このうち月食については2回とも日本で見られるが，いずれも欠け始めが早い時刻なので，地域によっては欠け始めてからの月の出となる。 日食は南極と北極で見られ，日本では見られない。\n流星群 8月のペルセウス座流星群の極大日が新月過ぎの時期にあたり条件がいい。 12月のふたご座流星群の極大日は上弦過ぎでちょっと微妙だが，夜半からなら期待できるかもしれない。\nその他  春分の日は3月20日（土），秋分の日は9月23日（木）である。更に夏至は6月21日，冬至は12月22日となる 立春は2月3日，立夏は5月5日，立秋は8月7日，立冬は11月7日 「伝統的七夕」は8月14日 中秋の名月は9月21日で望（満月）と重なる  参考図書  天文年鑑 2021年版 天文年鑑編集委員会 (編集) 誠文堂新光社 2020-11-24 単行本 4416620616 (ASIN), 9784416620618 (EAN), 4416620616 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2021年版。\nreviewed by Spiegel on 2020-11-25 (powered by PA-APIv5)\n   「国民の祝日」は休日となる。また「「国民の祝日」が日曜日に当たるときは、その日後においてその日に最も近い「国民の祝日」でない日を休日とする」（「国民の祝日に関する法律」より）。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.15.6 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/12/go-1_15_6-is-released/",
      "published": "2020-12-05T01:01:58+00:00",
      "update": "2020-12-05T01:02:41+00:00",
      "content": "Go 1.15.6 がリリースされた。\n Go 1.15.6 and Go 1.14.13 are released  セキュリティ・アップデートはなし。\ngo1.15.6 (released 2020/12/03) includes fixes to the compiler, linker, runtime, the go command, and the io package. See the Go 1.15.6 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.15.6.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.15.6.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.15.6.linux-amd64.tar.gz $ sudo mv go go1.15.6 $ sudo ln -s go1.15.6 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.15.6 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "ブログは spam ではない（多分）",
      "section": "remark",
      "description": "辺境でブログというスローライフ（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/12/blogs-are-not-spams/",
      "published": "2020-12-01T12:00:24+00:00",
      "update": "2020-12-01T12:00:48+00:00",
      "content": "例によって人様の記事\n ますます「暗い森」になりつつあるインターネットの中で個人ブログを書くことの意味 - YAMDAS現更新履歴  からの思考の横滑り。 つか，結局『三体』は最初の10ページ分程度を読んだきりでバーチャル積読状態だな。 漫画やラノベのスタイルに慣れすぎてしまったのか，エンターテインメントは最初の数ページで「つかみはOK！」な状態にならないと先に読み進められなくなってしまった（笑）\n閑話休題 (それはさておき)  以前書いた記事で\n 次なるフォーマットであるオーディオブックがアメリカで急成長中 アメリカの書籍出版産業2020：これまでの10年と、これからの10年について（3）より  と紹介したが，その流れから考えるとポッドキャストはめっさ分かりやすい。 最近は日本のアマゾンさんも Audible 買えって五月蝿いのよ。 買わないってば！\nでも「なんかみんなウェブサイトでブログやるのを止めて、ニュースレターになってるんですよ」ってのは数年前くらいの日本の話じゃないのか（笑） 結城浩さんとかも当時の流行りに乗って有料メルマガをいくつか出しておられたし。\nネットにおける今のブログの立ち位置は知らない。 「流行ってるか流行ってないか」と言われれば流行ってないんだろうとは思う。 スマホやタブレットが出たらパソコンが売れなくなった，みたいな話の類似でしょ。\nつか，そもそもゼロ年代にブログが流行ったという歴史自体がバブル景気並みに「異様」だと思うけど。 はてなだって当時は「日本人にはBlogより日記」つってたぢゃん（まぁブログブームが遙か昔の話になってからブログサービスを始めるようなアレな会社だけどw）。 もともとブログは日本人の肌に合わなかったんだよ（笑）\n私は今でも「電話」は近代以降で最悪の発明のひとつだと思ってるし「電話」のアナロジーを踏襲するあらゆるメディア・サービスには嫌悪感を禁じ得ないが，それが時代なんだろう。 個人ブログが「電話」にならないことを祈るが， Twitter や Facebook の TL でプッシュしまくってたら同じことかな。 まぁ（どうでも）いいか。\n私はせいぜいネットの辺境 (しっぽのさきっちょ) でスローライフを楽しむとしよう（笑）\n"
    }
  ]
}
