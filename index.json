{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Go の疑似乱数生成器は Goroutine-Safe ではないらしい",
      "section": "golang",
      "description": "件の記事では解決方法が（具体的には）示されていないので，いくつか対策を考えてみよう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/pseudo-random-number-generator/",
      "published": "2019-09-17T14:27:18+00:00",
      "update": "2019-09-17T14:27:43+00:00",
      "content": " 面白い記事みっけ！\n 【Go】rand.Sourceを並列で使いまわすなんて何事だ - Qiita  折角なので便乗記事を書いてみる。\nまぁ，内部状態を持つオブジェクトは，状態が変わらないことが保証されている（value object）か仕様として goroutine-safe であることが明確であるものでない限り，複数の goroutine 間でインスタンスを共有してはいけない，というのは基本中の基本である。\nましてや標準の math/rand パッケージは rand.Source インタフェースを満たすのであればユーザ側で任意のアルゴリズムを用意することもできるので， goroutine-safe であることを期待するほうが間違っているとも言える。\nまずは，件の記事で書かれているコードを挙げておこう。 ただし動作に直接関係ないコードは極力省いている。\npackage main import ( \u0026#34;math/rand\u0026#34; \u0026#34;sync\u0026#34; \u0026#34;time\u0026#34; ) var randSource = NewRandSource() func NewRandSource() *rand.Rand { return rand.New(rand.NewSource(time.Now().UnixNano())) } func calcRnad() { for i := 0; i \u0026lt; 10000; i++ { randSource.Intn(1000) } } func main() { wg := sync.WaitGroup{} for i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { calcRnad() wg.Done() }() } wg.Wait() } ポイントは rand.Rand インスタンスを初期化時にひとつだけ生成し，複数の goroutine で使い回している点である。 これを実行すると以下のように panic を吐く。\n$ go run -trimpath sample.go panic: runtime error: index out of range [-1] goroutine 94 [running]: math/rand.(*rngSource).Uint64(...) math/rand/rng.go:249 math/rand.(*rngSource).Int63(0xc000083500, 0x50321535775976c1) math/rand/rng.go:234 +0x93 math/rand.(*Rand).Int63(...) math/rand/rand.go:85 math/rand.(*Rand).Int31(...) math/rand/rand.go:99 math/rand.(*Rand).Int31n(0xc000088090, 0x3e8, 0x1fd) math/rand/rand.go:134 +0x5f math/rand.(*Rand).Intn(0xc000088090, 0x3e8, 0x1fd) math/rand/rand.go:172 +0x45 main.calcRnad() sample@/sample.go:17 +0x3f main.main.func1(0xc000098000) sample@/sample.go:26 +0x22 created by main.main sample@/sample.go:25 +0x78 exit status 2 panic が発生する仕組みは件の記事に分かりやすく解説されているので参照のこと。\ngoroutine ごとにインスタンスを生成する 件の記事では解決方法が（具体的には）示されていないので，こちらでいくつか考えてみよう。\n一番簡単なのは goroutine ごとに rand.Rand インスタンスを生成することだ。 こんな感じに変えたらどうだろう。\nfunc calcRnad(rnd* rand.Rand) {  for i := 0; i \u0026lt; 10000; i++ { rnd.Intn(1000)  } } func main() { wg := sync.WaitGroup{} for i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { calcRnad(NewRandSource())  wg.Done() }() } wg.Wait() } これで必要十分に機能するし，少なくとも panic は起こらない。 このやり方の欠点は（goroutine ごとに rand.Rand インスタンスが生成されるため）元のコードより（僅かだが）高コストになることと，疑似乱数生成器の性能がアルゴリズムだけでなく seed の選び方にも依存する，というあたりだろうか。\nまぁ math/rand の標準アルゴリズム1 であれば性能に関してはさしたる問題にはならないだろう。\nGenerator Pattern を使う 今回の例ではあまりオススメではないのだが，並行処理の Generator Pattern を使う手もある。\nまず NewRandSource() 関数を以下の関数で置き換える。\nfunc NewGenerator() \u0026lt;-chan int { rnd := rand.New(rand.NewSource(time.Now().UnixNano())) ch := make(chan int) go func() { defer close(ch) for { ch \u0026lt;- rnd.Intn(1000) } }() return ch } こうすれば rand.Rand インスタンスはひとつで済むし（seed もひとつ），持ち回すインスタンスは channel のみなので goroutine-safe にできる。 乱数の取り出し側はこう書き換えればよい。\nfunc calcRnad(gen \u0026lt;-chan int) {  for i := 0; i \u0026lt; 10000; i++ { if _ , ok := \u0026lt;-gen; !ok { return }  } } func main() { wg := sync.WaitGroup{} gen := NewGenerator()  for i := 0; i \u0026lt; 1000; i++ { wg.Add(1) go func() { calcRnad(gen)  wg.Done() }() } wg.Wait() } このコードの欠点は「遅い」ことに尽きる。 まぁ channel の読み書きで同期を取る必要があるから遅くなって当たり前だけど。\n今回のようなケースではなく，例えば generator がハードウェア制御を伴うものだったり singleton を含む処理だったり channel の読み書きにかかるコストに対して他の処理が相対的に大きくなったり ...などなど，状況によっては Generator Pattern のほうが有利になる場合もあるだろう。\nGenerator Pattern は平行処理のデザインパターンの中では比較的単純なものだが応用範囲が広い。 Go 言語の goroutine 自体は（OS スレッドなどと比べて）かなり安価で手軽に構成できるので，積極的に試してみるといいと思う。\nおまけの追記 そうそう。 上の NewGenerator() 関数で生成・駆動される goroutine は自力で終了できない。 なので，以下のように\nfunc NewGenerator(ctx context.Context) \u0026lt;-chan int { rnd := rand.New(rand.NewSource(time.Now().UnixNano())) ch := make(chan int) go func() { defer close(ch) for { select { case \u0026lt;-ctx.Done(): return default: ch \u0026lt;- rnd.Intn(1000) } } }() return ch } 外部からキャンセルイベントを流し込めるようにするといいかもしれない。\nブックマーク  Go の channel 処理パターン集\n モンテカルロ法による円周率の推定（その4 PRNG）\n  参考図書  Go言語による並行処理 Katherine Cox-Buday 山口 能迪 (翻訳) オライリージャパン 2018-10-26 単行本（ソフトカバー） 4873118468 (ASIN), 9784873118468 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  この本を読んで「よっしゃ，明日から立派な goroutine 使いだ！」とはならないと思うけど，有象無象なコピペ・プログラマじゃなく，きちんと Go 言語のプログラミングを勉強したいのであれば，この本は必読書になると思う。\nreviewed by Spiegel on 2018-11-03 (powered by PA-API)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  math/rand パッケージに実装されている擬似乱数生成器はラグ付フィボナッチ法（Lagged Fibonacci Generator）のバリエーションらしい。 [return]   "
    },
    {
      "title": "rakyll/statik でシングルバイナリにまとめる",
      "section": "golang",
      "description": "ずいぶん前に紹介した jessevdk/go-assets はもうメンテされてないらしい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/using-statik-package/",
      "published": "2019-09-15T10:51:22+00:00",
      "update": "2019-09-15T10:52:15+00:00",
      "content": " 以前紹介した『改訂2版 みんなのGo言語』を読んで知ったのだが，これまたずいぶん前に紹介した jessevdk/go-assets はもうメンテされてないらしい。 確かにリポジトリを見ると3年前（2016年）から更新されてないな。\nというわけで『改訂2版 みんなのGo言語』を見ながら rakyll/statik を試してみるとしよう。\nrakyll/statik のダウンロードとビルド rakyll/statik のダウンロードとビルドは以下の通り。\n$ go get github.com/rakyll/statik@latest go: finding github.com/rakyll/statik v0.1.6 go: downloading github.com/rakyll/statik v0.1.6 go: extracting github.com/rakyll/statik v0.1.6 おー。 外部パッケージは使わないのか。 善き哉。\nビルドが成功すれば $GOPATH/bin ディレクトリに statik コマンドがインストールされる。\n$ statik -h Usage of statik: -Z\tDo not use compression to shrink the files. -c string The package comment. An empty value disables this comment. (default \u0026#34;Package statik contains static assets.\u0026#34;) -dest string The destination path of the generated package. (default \u0026#34;.\u0026#34;) -f\tOverwrite destination file if it already exists. -m\tIgnore modification times on files. -p string Name of the generated package (default \u0026#34;statik\u0026#34;) -src string The path of the source directory. (default \u0026#34;public\u0026#34;) -tags string Write build constraint tags rakyll/statik によるソース・コードの生成と組み込み 今回の構成は以下の通り（ちなみにモジュール名は sample で）。\n$ tree . . ├── go.mod ├── html │ └── index.html └── sample.go このうち html ディレクトリ以下のファイルを実行バイナリに組み込む。\n$ statik -src html これで statik/statik.go が生成される。 中身はこんな感じ。\n// Code generated by statik. DO NOT EDIT.  // Package statik contains static assets. package statik import ( \u0026#34;github.com/rakyll/statik/fs\u0026#34; ) func init() { data := \u0026#34;PK\\x03\\x04\\x14\\x00\\x08\\x00\\x08\\x00\\x92=/O\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\n\\x00\t\\x00index.htmlUT\\x05\\x00\\x01\\xe5\\xeb}]\\\\\\x8e1\\xcb\\xc2@\\x0c@\\xe7\\xaf\\xbf\\xe2z\\xf3W\\x8a\\x9bC\\xae\\x8b\\nn:\\x08\\xe2\\x18\\xef\\\u0026#34;\\x0d\\xa4w\\xa5\\x8d-\\xfe{i\\x0f\\x1d\\x9cB^\\x1e\\xe1A\\xb9?\\xed.\\xb7\\xf3\\xc1\\xb4\\xdaIS\\xc0g\\x10\\x86\\xa6\\xf8\\x83\\x8e\\x14\\x8doq\\x18I\\x9d}\\xea\\xa3\\xda\\xda/\\x8f\\xd8\\x91\\xb3\\x13\\xd3\\xdc\\xa7A\\xad\\xf1)*Euv\\xe6\\xa0\\xad\\x0b4\\xb1\\xa7j]\\xfe\\x0dGVF\\xa9F\\x8fBn\\xb3~QV\\xa1\\xe6H\\\u0026#34;\\xc9\\\\\\xd3 \\xa1\\x84:\\xb3\\x02\\xea\\x9c\\x00\\xf7\\x14^\\x8b\\xdb\\xffx\\xfd\\xe2\\xe4#\\xd4k\\xf5;\\x00\\x00\\xff\\xffPK\\x07\\x08\\x13\\xf25U\\x97\\x00\\x00\\x00\\xcc\\x00\\x00\\x00PK\\x01\\x02\\x14\\x03\\x14\\x00\\x08\\x00\\x08\\x00\\x92=/O\\x13\\xf25U\\x97\\x00\\x00\\x00\\xcc\\x00\\x00\\x00\\n\\x00\t\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xa4\\x81\\x00\\x00\\x00\\x00index.htmlUT\\x05\\x00\\x01\\xe5\\xeb}]PK\\x05\\x06\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x00A\\x00\\x00\\x00\\xd8\\x00\\x00\\x00\\x00\\x00\u0026#34; fs.Register(data) } html/index.html ファイルの中身は圧縮されて格納されるようだ。 -Z オプションで圧縮を解除できるが，まぁ普通は圧縮するだろう（笑）\n生成された statik サブパッケージを使って以下のように HTTP サーバを構成してみる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; _ \u0026#34;sample/statik\u0026#34; \u0026#34;github.com/rakyll/statik/fs\u0026#34; ) func main() { fmt.Println(\u0026#34;Open http://localhost:3000/\u0026#34;) fmt.Println(\u0026#34;Press ctrl+c to stop\u0026#34;) statikFs, err := fs.New() if err != nil { fmt.Fprintln(os.Stderr, err) return } http.Handle(\u0026#34;/\u0026#34;, http.FileServer(statikFs)) if err := http.ListenAndServe(\u0026#34;:3000\u0026#34;, nil); err != nil { fmt.Fprintln(os.Stderr, err) } } これで\n$ go run sample.go Open http://localhost:3000/ Press ctrl+c to stop としてサーバを起動しブラウザで http://localhost:3000/ にアクセスすれば html/index.html ファイルの内容が表示される。\nstatik/fs.New() 関数は http.FileSystem インスタンスを返す。 http.FileSystem は interface 型で，以下のように定義されている。\n// A FileSystem implements access to a collection of named files. // The elements in a file path are separated by slash (\u0026#39;/\u0026#39;, U+002F) // characters, regardless of host operating system convention. type FileSystem interface { Open(name string) (File, error) } http.File も interface 型で，以下のように定義されている。\n// A File is returned by a FileSystem\u0026#39;s Open method and can be // served by the FileServer implementation. // // The methods should behave the same as those on an *os.File. type File interface { io.Closer io.Reader io.Seeker Readdir(count int) ([]os.FileInfo, error) Stat() (os.FileInfo, error) } つまり rakyll/statik パッケージで生成されるファイルシステムを使えばこれだけの操作ができるということだ。 上手く使っていきたい。\ngo generate コマンドによるソース・コードの生成 // コメントに go:generate マーカを使うことにより go generate コマンドで statik コマンドを呼び出せる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; _ \u0026#34;sample/statik\u0026#34; \u0026#34;github.com/rakyll/statik/fs\u0026#34; ) //go:generate statik -src html  func main() { fmt.Println(\u0026#34;Open http://localhost:3000/\u0026#34;) fmt.Println(\u0026#34;Press ctrl+c to stop\u0026#34;) statikFs, err := fs.New() if err != nil { fmt.Fprintln(os.Stderr, err) return } http.Handle(\u0026#34;/\u0026#34;, http.FileServer(statikFs)) if err := http.ListenAndServe(\u0026#34;:3000\u0026#34;, nil); err != nil { fmt.Fprintln(os.Stderr, err) } }  $ go generate $ go run sample.go Open http://localhost:3000/ Press ctrl+c to stop go generate コマンドは明示的に行う必要があるので注意。\nブックマーク  Goのバイナリに静的ファイルを埋め込むツール assets-life を書いた : 自コードを Quine として埋め込むらしい。面白い！  参考図書  改訂2版 みんなのGo言語 松木 雅幸, mattn, 藤原 俊一郎, 中島 大一, 上田 拓也, 牧 大輔, 鈴木 健太 技術評論社 2019-08-01 (Release 2019-08-01) Kindle版 B07VPSXF6N (ASIN), 9784297107284 (EISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  改訂2版の目玉は7章の「データベースの扱い方」が追加されたことだろう。他の章では，大まかな構成は1版と同じだが細かい部分が変わっていて Go 1.12 への言及まであるのには驚いた。\nreviewed by Spiegel on 2019-08-12 (powered by PA-API)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "Firefox の DoH は無効にすべきか（もしくは水売りと水道局）",
      "section": "remark",
      "description": "これは ISPA の言いがかりみたいな話ではなく，現在のインターネットの構造，ひいては社会システムに連動する問題提起だ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/should-disable-doh-in-firefox/",
      "published": "2019-09-15T01:31:39+00:00",
      "update": "2019-09-15T01:32:08+00:00",
      "content": " 先日 Mozilla が DoH (DNS-over-HTTPS) を Firefox に正式に実装するとアナウンスがあったが\n What’s next in making Encrypted DNS-over-HTTPS the Default - Future Releases Mozilla Firefox to begin slow rollout of DNS-over-HTTPS by default at the end of the month • The Register FirefoxがDNSとの通信を暗号化する「DNS over HTTPS(DoH)」を正式に実装すると発表 - GIGAZINE  これに懸念を呈する面白い記事がある。\n ungleich blog - Turn off DoH, Firefox. Now. （邦訳版）  これは ISPA の言いがかりみたいな話ではなく，現在のインターネットの構造，ひいては社会システムに連動する問題提起だ。\nそもそも件のブログ記事は DoH 自体には反対していない。\nDoH and DoT (DNS over TLS) are in general good technologies as they add encryption to an important process of daily life. However the approach Mozilla takes is simply wrong. The correct way would be to standardise DoH and DoT and add support into it into automatic address configurations and operating systems. Not in applications! via Turn off DoH, Firefox. Now.  そして，問題は DoH が組み込まれる Firefox がアプリケーションに過ぎないこと， DoH のホストとして米国の Cloudflare を利用していることだと主張している。\nIt means people outside the US can now be fully tracked by US government via Turn off DoH, Firefox. Now.  whether you trust Cloudflare or not, you'll end up directly supporting centralisation by using DoH in Firefox. Centralisation makes us depend on one big player, which results in fewer choices and less innovation. Centralisation affects everybody by creating a dangerous power and resource imbalance between the center and the rest. via Turn off DoH, Firefox. Now.  これで思い出すのが，かつて言われた「水のような音楽」というやつだ。\nもともと「水のような音楽」は DRM (Digital Right Management) で貞操帯のごとくがんじ搦めにされたコンテンツに対するアンチテーゼのようなものだった。\n もう一つは既存のサービスを残したままで、新しい DRM フリーの高品質サービスが提供されること。手軽にアクセスできる安価な水道水がある一方で、より質を重視する人にはそれより値がはるミネラルウォーターも提供されるという「水のような音楽」モデルじゃないですか。 via EMIのDRMとの決別は「水のような音楽」への大きな一歩か - YAMDAS現更新履歴  しかし，音楽にしろ映像にしろ，無料または定額制のストリーミングサービスが一般化し「水のような音楽」が合法的に利用できるようになって分かったことは 「水道水はミネラルウォーターより統制しやすい」 といういうことだった。\n言ってみれば「水」を売るのが「水売り」から「水道局」に代わっただけで，むしろ「水道局」のほうが中央集権的で統制に向いているのは明らかである。 いずれにしろ利用者に自由なんてものはないのだ。\nこれは音楽や映像といったコンテンツに限らず電子メール等のメッセージング・サービスや（マイクロ）ブログにも言えることで，今回の Firefox への DoH 実装は インターネットによる統制 を更に更に推し進めていくだろう，というわけだ。\nそういう意味でも ISPA の言いがかりはホンマに言いがかりなんだなぁ，と思ってしまう。\nちなみに件のブログでは\nIt is clear what Mozilla needs to do: Mozilla can and should revert the change and allow users to easily opt-in. And to select or enter the DoH provider instead of defaulting to Cloudflare. Also Mozilla can take real responsibility and work together with the Internet community and create RFCs to make DHCPv4, DHCPv6 and Router Advertisements support DNS URLs instead of just IP addresses. via Turn off DoH, Firefox. Now.  と書かれていて，これに関しては激しく同意する。\nそういえば最近 Firefox 69 がリリースされて\n Today’s Firefox Blocks Third-Party Tracking Cookies and Cryptomining by Default - The Mozilla Blog  一瞬喜んだが，私のケータイは 68.x から一向にアップグレードされる気配がない。\nはっきり言おう。\nMozilla がユーザのプライバシーを重視しているというのは嘘っぱちである 本当に Mozilla がユーザのプライバシーを重視しているというのなら，検索サービスの既定を DuckDuckGo にすべき。 話はそれからだ。\nブックマーク  Blocking Firefox DoH with Bind - SANS Internet Storm Center\n 監視をコントロールする\n  参考文献  超監視社会 ブルース・シュナイアー 池村 千秋 (翻訳) 草思社 2016-12-13 (Release 2017-02-03) Kindle版 B01MZGVHOA (ASIN)  実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。\nreviewed by Spiegel on 2019-03-23 (powered by PA-API)\n  デジタル音楽の行方 David Kusek, Gerd Leonhard, yomoyomo yomoyomo (翻訳), 津田 大介 (翻訳) 翔泳社 2005-12-06 単行本 4798110035 (ASIN), 9784798110035 (EAN)  読んでない。絶賛絶版中？ もはや歴史的価値の有無さえ不明。「デジタル」とタイトルに冠されているにも関わらず Kindle 化すらされてないことに出版側のやる気を感じる（笑）\nreviewed by Spiegel on 2017-07-30 (powered by PA-API)\n "
    },
    {
      "title": "星間天体 Borisov に関するブックマーク",
      "section": "remark",
      "description": "2017年の 1I/2017 U1 (ʻOumuamua) に続いて2つ目の観測例となる（であろう）星間天体 C/2019 Q4 (Borisov) に関するメモ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/09/interstellar-object-borisov/",
      "published": "2019-09-14T22:50:40+00:00",
      "update": "2019-09-14T23:58:43+00:00",
      "content": " 2017年の 1I/2017 U1 (ʻOumuamua) に続いて2つ目の観測例となる（であろう）星間天体 C/2019 Q4 (Borisov) に関するメモ。 なお，正式に星間天体（interstellar object）として認められれば新しいコードが割り振られると思われ。\n Gemini Observatory Captures Multicolor Image of First-ever Interstellar Comet | Gemini Observatory Newly Discovered Comet Is Likely Interstellar Visitor | NASA オウムアムアに次ぐ恒星間天体らしき彗星が接近中。その大きさはキロメートル級？ | sorae 宇宙へのポータルサイト C/2019 Q4 (Borisov) 彗星の動き - StellaCloud   彗星活動を初めて示すインターステラ天体 C/2019 Q4 (Borisov)の2色カラー画像(ハワイ8.2m Gemini望遠鏡)。g\u0026#39;-r\u0026#39;=0.63 ± 0.03は、太陽系起源の彗星に類似。エアマス2以上の悪条件だが、今後好条件になるので、インターステラ物質についての研究が進むものと期待。 ghttps://www.gemini.edu/node/21240 pic.twitter.com/4Aw7gMi6h6\n\u0026mdash; Abe S. 阿部新之助 (@AvellSky) September 14, 2019  ちなみに2017年の 1I/2017 U1 (ʻOumuamua) のときはこんな感じで話題になった。 当時は何故か記事にまとめてなかったのでこの記事で挙げておく。\n MPEC 2017-V17 : NEW DESIGNATION SCHEME FOR INTERSTELLAR OBJECTS : A/2017 U1に新たな番号「1I」、「'Oumuamua」と命名 観測史上初の恒星間天体、名前は「'Oumuamua」 - アストロアーツ 恒星間天体「オウムウムア」、観察結果から人工的信号の証拠は見つからず | TechCrunch Japan All news | Alien object ‘Oumuamua was a natural body visiting from another solar system | News | Queen's University Belfast ‘Oumuamua likely came from a binary star system  参考図書  天体の位置計算 長沢 工 地人書館 1985-09-01 単行本 4805202254 (ASIN), 9784805202258 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "2019-09-14 のブックマーク",
      "section": "bookmarks",
      "description": "「Newly Discovered Comet Is Likely Interstellar Visitor」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/09/14-bookmarks/",
      "published": "2019-09-14T11:24:22+00:00",
      "update": "2019-09-14T11:24:48+00:00",
      "content": " リリース情報  TDF、「LibreOffice 6.3.1」「LibreOffice 6.2.7」を公開 ～2件の脆弱性を修正 - 窓の杜 「Google Chrome 77」が正式公開 ～アドレスバーのEV証明書発行元表示は廃止 - 窓の杜 「Thunderbird」v68.1.0が公開 ～“Office365”のExchangeアカウントの登録処理を改善 - 窓の杜 : 「「Thunderbird 60」系統へのアップグレード提供は、次期バージョンのv68.2からになる予定」とのこと。ホンマかなぁ。もう少し待ってみるか Hugo 0.58.2: A couple of Bug Fixes | Hugo ESLint v6.4.0 - Qiita  バベルのインターネット セキュリティ＆プライバシー関連  draft-ietf-openpgp-rfc4880bis-08 - OpenPGP Message Format 悪意あるDDoS攻撃を受けWikipediaが欧州の広範囲と中東の一部でダウン | TechCrunch Japan  WikipediaへのDDoS攻撃とSNSへ投稿された「IoTのテスト」についてまとめてみた - piyolog  MIT Tech Review: ストーカーウェア被害撲滅へ、ニューヨーク市が独自の取り組み Twitterも影響を受けたSSL VPN製品の脆弱性についてまとめてみた - piyolog トヨタ紡織で発生した虚偽の指示による資金流出事案についてまとめてみた - piyolog 複数の国内サイトで発生したiPhoneウイルス検出の偽画面表示についてまとめてみた - piyolog PayPayを騙るスミッシングについてまとめてみた - piyolog ウイルスバスターコーポレートエディションの脆弱性(CVE-2019-9489) について：IPA 独立行政法人 情報処理推進機構  ウイルスバスター コーポレートエディションの脆弱性 (CVE-2019-9489) に関する注意喚起  On Cybersecurity Insurance - Schneier on Security Facebookの\u0026quot;出会い系\u0026quot;サービスに警戒せよ | P2Pとかその辺のお話R 「Firefox」、プライバシー高めるVPNサービスをベータ提供 - ZDNet Japan  Mozilla、復活「Test Pilot」でプライバシー保護拡張機能「Firefox Private Network」のβ版公開 - ITmedia NEWS  Intel、2019年9月のセキュリティアドバイザリを公開 ～2製品が対象 - 窓の杜 More on Law Enforcement Backdoor Demands - Schneier on Security FirefoxがDNSとの通信を暗号化する「DNS over HTTPS(DoH)」を正式に実装すると発表 - GIGAZINE リコーのプリンタと複合機にバッファオーバーフローの脆弱性 | マイナビニュース SMSを密かに送信し、位置情報を追跡するエクスプロイト「Simjacker」が発見される - ITmedia NEWS Smart Watches and Cheating on Tests - Schneier on Security  天文関連  MIT Tech Review: 小型衛星向け、新世代の液体燃料プラズマ推進装置 135億年前の星形成の痕跡を発見！〜最遠の「老けた銀河」探査〜 | 国立天文台(NAOJ) 双子原始星からのふぞろいな分子流から連星系形成の謎に迫る | 国立天文台(NAOJ) APOD: 2019 September 9 - M31: The Andromeda Galaxy APOD: 2019 September 10 - Pluto in True Color 地球から110光年先のスーパーアースに液状の水 | TechCrunch Japan MPEC 2019-R113 : COMET C/2019 Q4 (Borisov)  Gemini Observatory Captures Multicolor Image of First-ever Interstellar Comet | Gemini Observatory Newly Discovered Comet Is Likely Interstellar Visitor | NASA オウムアムアに次ぐ恒星間天体らしき彗星が接近中。その大きさはキロメートル級？ | sorae 宇宙へのポータルサイト   知財関連  hentaiサイトを狙う虚偽のDMCA削除通知爆撃、被害サイト運営者はGoogleへの集団訴訟を検討 | P2Pとかその辺のお話R Cox Attacks 'Proof' in Piracy Liability Case, Requests Summary Judgment - TorrentFreak Nintendo Wins Blocking Injunction Against Four Piracy-Enabling Sites - TorrentFreak 米議員、YouTubeにコンテンツIDの開放を求める | P2Pとかその辺のお話R  Linux または Ubuntu に関する話題  メールサーバ「Exim」に複数の脆弱性、アップデートを | マイナビニュース  その他  2019年、人気のプログラミング言語トップはPython。Java、Cが続く。IEEE Spectrumによる調査 － Publickey 9月13日はプログラマの日なのである - 現場からの「協働革新」 - ZDNet Japan グーグルとFTCの和解で示された子供のプライバシーの価値はわずか181億円 | TechCrunch Japan 半世紀前のアメリカで女性ができなかった9つのこと - YAMDAS現更新履歴 Googleがコードレビューのガイドラインなど、ソフトウェアエンジニアリング実践のためのドキュメント「Google Engineering Practices Documentation」を公開 － Publickey IntelliCodeがプログラマのリファクタリング作業を自動的に学習。学習内容からリファクタリング箇所を提案するように － Publickey MIT Tech Review: 「環境にやさしいクルマ」が独禁法違反？米司法省が調査へ 全米50の州と領域の司法長官がGoogleに対する反トラスト法違反の捜査で合意 | TechCrunch Japan GitHub Actions による GitHub Pages への自動デプロイ - Qiita MIT Tech Review: 足裏の感覚を再現、歩行を楽にする新しい義足 ファーウェイが米政府が押収した機器への訴訟取り下げ | TechCrunch Japan ブログ: どのように、エリート大学の研究センターがジェフリー・エプスタインとの関係を隠したか  Message to the Creative Commons Community Regarding Joi Ito - Creative Commons ブログ: 2011年、ジェフリー・エプスタインは周知の性犯罪者だったにも関わらず、Amazon、Google、Teslaの創設者たちは彼と食事を共にした  「Pulumi」がバージョン1.0に到達、正式版に。インフラの状態をJavaScript、Python、Goなどで記述可能。個人向けサービスは無料で提供 － Publickey Rustで実装したアルゴリズムをUnityから使う - Qiita Googleが検索で「オリジナル記事」を優先するアルゴリズム変更を実施 | TechCrunch Japan メインフレーム「IBM z15」、日本でも発表 - ZDNet Japan New CC T-Shirt! (Inspired by a Letter from a 5th Grader) - Creative Commons : www 月と地球を結ぶエレベーター「スペースライン」を科学者が提唱 | TechCrunch Japan IBMのメインフレーム事業は健在、新機種z15を発表 | TechCrunch Japan  "
    },
    {
      "title": "書式 %v のカスタマイズ",
      "section": "golang",
      "description": "Stringer, GoStringer および Formatter インタフェースを使ったカスタマイズ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/formatting/",
      "published": "2019-09-12T14:19:22+00:00",
      "update": "2019-09-15T05:52:42+00:00",
      "content": " 今回も小ネタで。\nお馴染みの fmt.Printf() 関数などで使われる書式（verb）のうち，今回は %v の出力をカスタマイズすることを考えてみる。\n基本型における %v 書式の出力 まずは %v の定義から\n   Verb Description     %v the value in a default format\nwhen printing structs, the plus flag (%+v) adds field names   %#v a Go-syntax representation of the value    更に基本型については %v は以下の書式と対応している。\n   Type Default Verb     bool %t   int, int8, ... %d   uint, uint8, ... %d, %#x if printed with %#v   float32, complex64, ... %g   string %s   chan %p   pointer %p    構造体や配列などの複合オブジェクトについては以下のように展開される。\n   Compound Object Format     struct {field0 field1 ...}   array, slice [elem0 elem1 ...]   maps map[key1:value1 key2:value2 ...]   pointer to above \u0026amp;{}, \u0026amp;[], \u0026amp;map[]    ちょっと試し書きをしてみよう。 たとえば，以下のような構造体とデータを考えてみる。\ntype Planet struct { Name string Mass float64 } var planets = []Planet{ {Name: \u0026#34;Mercury\u0026#34;, Mass: 0.055}, {Name: \u0026#34;Venus\u0026#34;, Mass: 0.815}, {Name: \u0026#34;Earth\u0026#34;, Mass: 1.0}, {Name: \u0026#34;Mars\u0026#34;, Mass: 0.107}, } この planets を %v を使って出力してみよう。 こんな感じ。\nfmt.Printf(\u0026#34;%v\u0026#34;, planets) // Output: // [{Mercury 0.055} {Venus 0.815} {Earth 1} {Mars 0.107}]fmt.Printf(\u0026#34;%+v\u0026#34;, planets) // Output: // [{Name:Mercury Mass:0.055} {Name:Venus Mass:0.815} {Name:Earth Mass:1} {Name:Mars Mass:0.107}]fmt.Printf(\u0026#34;%#v\u0026#34;, planets) // Output: // []main.Planet{main.Planet{Name:\u0026#34;Mercury\u0026#34;, Mass:0.055}, main.Planet{Name:\u0026#34;Venus\u0026#34;, Mass:0.815}, main.Planet{Name:\u0026#34;Earth\u0026#34;, Mass:1}, main.Planet{Name:\u0026#34;Mars\u0026#34;, Mass:0.107}} Stringer および GoStringer インタフェース fmt.Stringer および fmt.GoStringer インタフェースを持つ型であれば %v の出力をカスタマイズできる。 fmt.Stringer および fmt.GoStringer インタフェースの定義は以下の通り。\n// *.go is implemented by any value that has a String method, // which defines the ``native\u0026#39;\u0026#39; format for that value. // The String method is used to print values passed as an operand // to any format that accepts a string or to an unformatted printer // such as Print. type Stringer interface { String() string } // GoStringer is implemented by any value that has a GoString method, // which defines the Go syntax for that value. // The GoString method is used to print values passed as an operand // to a %#v format. type GoStringer interface { GoString() string } 先ほどの Planet 型に fmt.Stringer および fmt.GoStringer インタフェースを組み込んでみよう。\nfunc (p Planet) String() string { return fmt.Sprintf(\u0026#34;%s (%.3f)\u0026#34;, p.Name, p.Mass) } func (p Planet) GoString() string { return fmt.Sprintf(`main.Planet{Name:%s, Mass:%.3f}`, strconv.Quote(p.Name), p.Mass) } これで %v の出力は以下のように変わる。\nfmt.Printf(\u0026#34;%v\u0026#34;, planets) // Output: // [Mercury (0.055) Venus (0.815) Earth (1.000) Mars (0.107)]fmt.Printf(\u0026#34;%+v\u0026#34;, planets) // Output: // [Mercury (0.055) Venus (0.815) Earth (1.000) Mars (0.107)]fmt.Printf(\u0026#34;%#v\u0026#34;, planets) // Output: // []main.Planet{main.Planet{Name:\u0026#34;Mercury\u0026#34;, Mass:0.055}, main.Planet{Name:\u0026#34;Venus\u0026#34;, Mass:0.815}, main.Planet{Name:\u0026#34;Earth\u0026#34;, Mass:1.000}, main.Planet{Name:\u0026#34;Mars\u0026#34;, Mass:0.107}} %v および %+v が fmt.Stringer に %#v が fmt.GoStringer に対応しているのが分かると思う。\nFormatter インタフェース fmt.Stringer インタフェースを使ったカスタマイズの欠点は %v と %+v を区別できないことだ。 %v と %+v を区別できるよう詳細な操作を行いたいのであれば fmt.Formatter インタフェースを組み込む。 fmt.Formatter インタフェースの定義は以下の通り。\n// Formatter is the interface implemented by values with a custom formatter. // The implementation of Format may call Sprint(f) or Fprint(f) etc. // to generate its output. type Formatter interface { Format(f State, c rune) } では Planet 型に fmt.Formatter インタフェースを組み込んでみる。 こんな感じでどうだろう。\nfunc (p Planet) Format(s fmt.State, verb rune) { switch verb { case \u0026#39;v\u0026#39;: switch { case s.Flag(\u0026#39;#\u0026#39;): s.Write([]byte(p.GoString())) case s.Flag(\u0026#39;+\u0026#39;): s.Write([]byte(fmt.Sprintf(`{\u0026#34;Name\u0026#34;:%s,\u0026#34;Mass\u0026#34;:%.3f}`, strconv.Quote(p.Name), p.Mass))) default: s.Write([]byte(p.String())) } case \u0026#39;s\u0026#39;: s.Write([]byte(p.String())) default: //bad verb  s.Write([]byte(fmt.Sprintf(`%%!%c(%s)`, verb, p.GoString()))) } } これで %v の出力は以下のように変わる。\nfmt.Printf(\u0026#34;%v\u0026#34;, planets) // Output: // [Mercury (0.055) Venus (0.815) Earth (1.000) Mars (0.107)]fmt.Printf(\u0026#34;%+v\u0026#34;, planets) // Output: // [{\u0026#34;Name\u0026#34;:\u0026#34;Mercury\u0026#34;,\u0026#34;Mass\u0026#34;:0.055} {\u0026#34;Name\u0026#34;:\u0026#34;Venus\u0026#34;,\u0026#34;Mass\u0026#34;:0.815} {\u0026#34;Name\u0026#34;:\u0026#34;Earth\u0026#34;,\u0026#34;Mass\u0026#34;:1.000} {\u0026#34;Name\u0026#34;:\u0026#34;Mars\u0026#34;,\u0026#34;Mass\u0026#34;:0.107}]fmt.Printf(\u0026#34;%#v\u0026#34;, planets) // Output: // []main.Planet{main.Planet{Name:\u0026#34;Mercury\u0026#34;, Mass:0.055}, main.Planet{Name:\u0026#34;Venus\u0026#34;, Mass:0.815}, main.Planet{Name:\u0026#34;Earth\u0026#34;, Mass:1.000}, main.Planet{Name:\u0026#34;Mars\u0026#34;, Mass:0.107}} fmt.Formatter インタフェースを組み込めば細かい制御ができるようになるが，取りうる書式を全て記述しないといけないのが面倒である1。 状況によって使い分けるのがいいだろう。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  型名（%T）とポインタ値（%p）は fmt.Formatter の制御外になるようだ。 [return]   "
    },
    {
      "title": "OpenPGP パケットを可視化する gpgpdump",
      "section": "release",
      "description": "gpgpdump は OpenPGP パッケットの内容を human-readable な形式で可視化する CLI ツールである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/gpgpdump/",
      "published": "2019-09-10T13:07:44+00:00",
      "update": "2019-09-11T12:53:45+00:00",
      "content": "  spiegel-im-spiegel/gpgpdump: OpenPGP packet visualizer  gpgpdump は OpenPGP パッケットの内容を human-readable な形式で可視化する CLI (Command-Line Interface) ツールである。 山本和彦さんによる pgpdump を参考デザインとし Go 言語で組み直している。\ngpgpdump は pgpdump と比較して以下の特徴がある。\n 平文テキストによる結果出力のほか JSON や TOML といった構造化テキスト・フォーマットによる出力もできる 現行仕様である RFC 4880 に追加して RFC 5581 および RFC 6637 にも対応している 次期 OpenPGP ドラフト案である RFC 4880bis にも一部対応している HKP プロトコルを用いて OpenPGP 鍵サーバから直接公開鍵を取得して検証できる    \nダウンロードとビルド gpgpdump は以下の Go コマンドでダウンロードとビルドができる。\n$ go get github.com/spiegel-im-spiegel/gpgpdump/cli/gpgpdump@latest  なおビルドには Go 1.13 以上が要件となる。 ご注意を。\n各プラットフォーム用のバイナリも用意している。 最新バイナリはリリースページから取得できる。\n簡単な使い方 -h オプションで簡単なヘルプを表示できる。\n$ gpgpdump -h Usage: gpgpdump [flags] gpgpdump [command] Available Commands: help Help about any command hkp Dumps from OpenPGP key server version Print the version number Flags: -a, --armor accepts ASCII input only --debug for debug -f, --file string path of OpenPGP file -h, --help help for gpgpdump --indent int indent size for output string -i, --int dumps multi-precision integers -j, --json output with JSON format -l, --literal dumps literal packets (tag 11) -m, --marker dumps marker packets (tag 10) -p, --private dumps private packets (tag 60-63) -t, --toml output with TOML format -u, --utc output with UTC time -v, --version output version of gpgpdump Use \u0026#34;gpgpdump [command] --help\u0026#34; for more information about a command. たとえば以下のような OpenPGP 電子署名データファイルがあるとする。\n$ cat sig.asc -----BEGIN PGP SIGNATURE----- Version: GnuPG v2 iF4EARMIAAYFAlTDCN8ACgkQMfv9qV+7+hg2HwEA6h2iFFuCBv3VrsSf2BREQaT1 T1ZprZqwRPOjiLJg9AwA/ArTwCPz7c2vmxlv7sRlRLUI6CdsOqhuO1KfYXrq7idI =ZOTN -----END PGP SIGNATURE----- これを gpgpdump で表示するとこんな感じの出力になる。\n$ gpgpdump -f sig.asc Signature Packet (tag 2) (94 bytes) Version: 4 (current) Signiture Type: Signature of a canonical text document (0x01) Public-key Algorithm: ECDSA public key algorithm (pub 19) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2015-01-24T11:52:15+09:00 Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x31fbfda95fbbfa18 Hash left 2 bytes 36 1f ECDSA value r (256 bits) ECDSA value s (252 bits) 入力は標準入力からも可能である。\n$ cat sig.asc | gpgpdump Signature Packet (tag 2) (94 bytes) Version: 4 (current) Signiture Type: Signature of a canonical text document (0x01) Public-key Algorithm: ECDSA public key algorithm (pub 19) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2015-01-24T11:52:15+09:00 Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x31fbfda95fbbfa18 Hash left 2 bytes 36 1f ECDSA value r (256 bits) ECDSA value s (252 bits) -j または --json オプションを指定すれば JSON フォーマットで出力される。\n$ cat sig.asc | gpgpdump -j | jq . { \u0026#34;Packet\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Signature Packet (tag 2)\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;94 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Version\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;4\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;current\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Signiture Type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Signature of a canonical text document (0x01)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Public-key Algorithm\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;ECDSA public key algorithm (pub 19)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Hash Algorithm\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;SHA2-256 (hash 8)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Hashed Subpacket\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;6 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Signature Creation Time (sub 2)\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;2015-01-24T11:52:15+09:00\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;Unhashed Subpacket\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;10 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Issuer (sub 16)\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0x31fbfda95fbbfa18\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;Hash left 2 bytes\u0026#34;, \u0026#34;dump\u0026#34;: \u0026#34;36 1f\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ECDSA value r\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;256 bits\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ECDSA value s\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;252 bits\u0026#34; } ] } ] } gpgpdump で使える主なオプションは以下の通り。\n   オプション名 内容     armor Armor ASCII ファイルのみ受け入れる   int MPI データを16進ダンプ表示する   literal リテラル・パケット（tag 11）を16進ダンプ表示する   marker マーカー・パケット（tag 10）を16進ダンプ表示する   private プライベート用パケット（tag 60-63）を16進ダンプ表示する   utc 時刻を UTC で表示する   indent 平文テキスト出力時のインデント幅を指定する   json JSON 形式で出力する   toml TOML 形式で出力する   debug デバッグ用    HKP モード $ gpgpdump hkp -h Dumps from OpenPGP key server Usage: gpgpdump hkp [flags] \u0026lt;user ID or key ID\u0026gt; Flags: -h, --help help for hkp --keyserver string OpenPGP key server (default \u0026#34;keys.gnupg.net\u0026#34;) --port int port number of OpenPGP key server (default 11371) --raw output raw text from OpenPGP key server --secure enable HKP over HTTPS Global Flags: -a, --armor accepts ASCII input only --debug for debug --indent int indent size for output string -i, --int dumps multi-precision integers -j, --json output with JSON format -l, --literal dumps literal packets (tag 11) -m, --marker dumps marker packets (tag 10) -p, --private dumps private packets (tag 60-63) -t, --toml output with TOML format -u, --utc output with UTC time hkp コマンドを指定することで OpenPGP 鍵サーバから HKP プロトコルを使い，直接公開鍵を取得して中身を検証することができる。\n$ gpgpdump hkp 0x44ce6900e2b307a4 Public-Key Packet (tag 6) (269 bytes) Version: 4 (current) Public key creation time: 2009-11-09T00:20:55+09:00 4a f6 e1 d7 Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (2048 bits) RSA public encryption exponent e (17 bits) User ID Packet (tag 13) (25 bytes) User ID: Alice \u0026lt;alice@example.com\u0026gt; Signature Packet (tag 2) (312 bytes) Version: 4 (current) Signiture Type: Positive certification of a User ID and Public-Key packet (0x13) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (34 bytes) Signature Creation Time (sub 2): 2009-11-09T00:20:55+09:00 Key Flags (sub 27) (1 bytes) Flag: This key may be used to certify other keys. Flag: This key may be used to sign data. Preferred Symmetric Algorithms (sub 11) (5 bytes) Symmetric Algorithm: AES with 256-bit key (sym 9) Symmetric Algorithm: AES with 192-bit key (sym 8) Symmetric Algorithm: AES with 128-bit key (sym 7) Symmetric Algorithm: CAST5 (128 bit key, as per) (sym 3) Symmetric Algorithm: TripleDES (168 bit key derived from 192) (sym 2) Preferred Hash Algorithms (sub 21) (5 bytes) Hash Algorithm: SHA2-256 (hash 8) Hash Algorithm: SHA-1 (hash 2) Hash Algorithm: SHA2-384 (hash 9) Hash Algorithm: SHA2-512 (hash 10) Hash Algorithm: SHA2-224 (hash 11) Preferred Compression Algorithms (sub 22) (3 bytes) Compression Algorithm: ZLIB \u0026lt;RFC1950\u0026gt; (comp 2) Compression Algorithm: BZip2 (comp 3) Compression Algorithm: ZIP \u0026lt;RFC1951\u0026gt; (comp 1) Features (sub 30) (1 bytes) Flag: Modification Detection (packets 18 and 19) Key Server Preferences (sub 23) (1 bytes) Flag: No-modify Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x44ce6900e2b307a4 Hash left 2 bytes 93 62 RSA signature value m^d mod n (2045 bits) Public-Subkey Packet (tag 14) (269 bytes) Version: 4 (current) Public key creation time: 2009-11-09T00:20:55+09:00 4a f6 e1 d7 Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (2048 bits) RSA public encryption exponent e (17 bits) Signature Packet (tag 2) (287 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (9 bytes) Signature Creation Time (sub 2): 2009-11-09T00:20:55+09:00 Key Flags (sub 27) (1 bytes) Flag: This key may be used to encrypt communications. Flag: This key may be used to encrypt storage. Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x44ce6900e2b307a4 Hash left 2 bytes 66 f3 RSA signature value m^d mod n (2048 bits) --raw オプションを使うとダンプ表示はせず HKP リクエストの結果をそのまま表示する。\n$ gpgpdump hkp 0x44ce6900e2b307a4 --raw \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD XHTML 1.0 Strict//EN\u0026#34; \u0026#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\u0026#34; \u0026gt; \u0026lt;html xmlns=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Public Key Server -- Get \u0026#34;0x44ce6900e2b307a4 \u0026#34;\u0026lt;/title\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html;charset=utf-8\u0026#34; /\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; /*\u0026lt;![CDATA[*/ .uid { color: green; text-decoration: underline; } .warn { color: red; font-weight: bold; } /*]]\u0026gt;*/ \u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt;Public Key Server -- Get \u0026#34;0x44ce6900e2b307a4 \u0026#34;\u0026lt;/h1\u0026gt; \u0026lt;pre\u0026gt; -----BEGIN PGP PUBLIC KEY BLOCK----- Version: SKS 1.1.6 Comment: Hostname: pgpkeys.uk mQENBEr24dcBCADQeCxUo1pNF33ytHuzLn4vK9Z8LWXCUoZsQAZ9+cMKAzbQ9ncO+LfMleDz RpjsBxYWDaTnn6a8OySveDcw9/CZ9Wu0ND0+uHErdNk5qh+z81x15sOAfN9xj4pUm0iH092Z wuILrLjWWqgKMZYmB8HKaHXDkQmSfQmhx7oyZ4tWHfMN/VqBWLyUt0RaU0X+s4zLrdJSsTaf ECZRo/2OJecpyBzLBc45Tzv3RJAXTyv31MLDYn38bS0EiShRoqaGIZthC7ZnX9EoaS2trg1K uZtv6NeScRU4TqS21q/kYnE6HBnAMg7mI7dtFbg8x20TB2rTA5v8o/8cqZ3MLQukqjZ1ABEB AAG0GUFsaWNlIDxhbGljZUBleGFtcGxlLmNvbT6JATgEEwECACIFAkr24dcCGwMGCwkIBwMC BhUIAgkKCwQWAgMBAh4BAheAAAoJEETOaQDiswekk2IH/RtbG6zgJiPV91GZFMgmZJU2K6qu iFfdzUNmvLyPfi/l8QUuwDAc8vzni7DYWFBWCOFk3vm8o/OCGxmhSHt1u0L4pm4AKcCqawdX 83H0PQBzvHy1US+33SCUb2OSnxBIwsDxISVSZ89Che+O6Bz3dl1mzsDonw3HGVy73OyspCof 7rRpMhSzTcXkP89pAV5k4IWSg612PlBNXwrCSjDiecx1Dnl0kKcPVl7tEVmYwSp36MBDo3dW DjV/r6qyYF7D63tqoLfS1alXD6zpdJ0iRsV8s3zI+JEBGfWvxTZnOwsOzU7p+11wE1pBM6eX /jNc275HWyQXBZ8Mwv/GRxbelXG5AQ0ESvbh1wEIANn7br8X1stD3Zc+IJ4LA8bavDODajhr mQeSlf2VHocvAMpseldkiPIQgVF67Wh58gY+aeWl1W4KHy6VoTvnvi9Td8SDoH9ChJNXPqYA p4u4yPHSq2HTYai2z9T+yLHH82dXl6kNW5H97Efp6C6enMO8SD5QPpGSJvzosgvwKZBerfxl lV938/HSs5sXtjJRtZSJ2opbr6XaWP9fqy9B3HcHrk9YbAG6jG/ePh4s/vMmi7IZ/uH7Yf2/ d4hw9PJM6CJPnRjDO11qUwWWWQ/vUt/cX/ovnOjjJnj9gzIKQdX7Yt6/COcOmMZIfJdDrTdY +NC07DJtyAKRXQ34q5jC+KcAEQEAAYkBHwQYAQIACQUCSvbh1wIbDAAKCRBEzmkA4rMHpGbz CADLDT0pPL3xjWUy+5Liyv4gc+1EIuDz8kod8263w35bvP0H7urVsH1cODUrG1iG4S3BWvf3 fF9jy/1/WxpRS3huHyHCtyJTmC1wY/syGBBPnHO0CQzUkKG1Pb5IpEXg1T0SXihRqjiVtNT+ MHxlIXaMkCFSelweAJLM/OyrLJ5cwYr8JA+YZFav3pz0vZ58Fm9XRouvOIj9+0iX5Mnrw/2h XRHCOgDrPp1aDAx9pnwY3oyy5dAof8o0Gpiaz34TRRdZ3vSFBloopXdNyH+V2cBUxLAxoqaQ PrMW9QsmqRw/5A1YirEupzsd7z8/UVEKFIdPCxrMNWM/QArO22qEZjE3 =1Cgb -----END PGP PUBLIC KEY BLOCK----- \u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; 以下のオプションを使って OpenPGP 鍵サーバを指定することもできる。\n   オプション名 既定値 内容     keyserver keys.gnupg.net OpenPGP 鍵サーバ名（ホスト名）   port 11371 OpenPGP 鍵サーバのポート番号   secure false HKP over HTTPS を有効にする    gpgpdump を Go パッケージとして使う 使いどころが思い浮かばないのだが（笑），一応 gpgpdump は Go 言語用のパッケージまたはモジュールとして組み込むことができる。\nたとえばこんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gpgpdump\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/gpgpdump/options\u0026#34; ) const openpgpStr = ` -----BEGIN PGP SIGNATURE----- Version: GnuPG v2 iF4EARMIAAYFAlTDCN8ACgkQMfv9qV+7+hg2HwEA6h2iFFuCBv3VrsSf2BREQaT1 T1ZprZqwRPOjiLJg9AwA/ArTwCPz7c2vmxlv7sRlRLUI6CdsOqhuO1KfYXrq7idI =ZOTN -----END PGP SIGNATURE----- ` func main() { info, err := gpgpdump.ParseByte( []byte(openpgpStr), options.New( options.Set(options.ARMOR, true), options.Set(options.UTC, true), ), ) if err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\u0026#34;, err) return } fmt.Println(info) } あるいは io.Reader インタフェースを使うのであれば\ninfo, err := gpgpdump.Parse( bytes.NewBufferString(openpgpStr), options.New( options.Set(options.ARMOR, true), options.Set(options.UTC, true), ), ) などとしてもよい。\nこれを実行すると以下のような出力を得られる。\n$ go run sample.go Signature Packet (tag 2) (94 bytes) Version: 4 (current) Signiture Type: Signature of a canonical text document (0x01) Public-key Algorithm: ECDSA public key algorithm (pub 19) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2015-01-24T02:52:15Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x31fbfda95fbbfa18 Hash left 2 bytes 36 1f ECDSA value r (256 bits) ECDSA value s (252 bits) options.New() 関数で CLI 版と同等のオプションを設定できる。 options.New() 関数の引数として options.Set() 関数を0個以上複数指定できる。 指定可能なオプションは以下の通り。\n   オプション 既定値 対応する CLI オプション     options.ARMOR false armor   options.INTEGER false int   options.LITERAL false literal   options.MARKER false marker   options.PRIVATE false private   options.UTC false utc   options.DEBUG false debug    gpgpdump.Parse() または gpgpdump.ParseByte() 関数の返り値として構造体 info.Info を取得できる。 info.Info 構造体の構成は以下の通り。\n//Info is information class for OpenPGP packets type Info struct { Packets []*Item `toml:\u0026#34;Packet,omitempty\u0026#34; json:\u0026#34;Packet,omitempty\u0026#34;` } //Item is information item class type Item struct { Name string `toml:\u0026#34;name\u0026#34; json:\u0026#34;name\u0026#34;` Value string `toml:\u0026#34;value,omitempty\u0026#34; json:\u0026#34;value,omitempty\u0026#34;` Dump string `toml:\u0026#34;dump,omitempty\u0026#34; json:\u0026#34;dump,omitempty\u0026#34;` Note string `toml:\u0026#34;note,omitempty\u0026#34; json:\u0026#34;note,omitempty\u0026#34;` Items []*Item `toml:\u0026#34;Item,omitempty\u0026#34; json:\u0026#34;Item,omitempty\u0026#34;` } たとえば，先ほどの main() 関数を\nfunc main() { info, err := gpgpdump.Parse( bytes.NewBufferString(openpgpStr), options.New( options.Set(options.ARMOR, true), options.Set(options.UTC, true), ), ) if err != nil { fmt.Fprintf(os.Stderr, \u0026#34;%+v\u0026#34;, err) return } if json, err := info.JSON(2); err == nil { fmt.Printf(\u0026#34;%s\u0026#34;, json) } } のように変えれば\n$ go run sample.go { \u0026#34;Packet\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Signature Packet (tag 2)\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;94 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Version\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;4\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;current\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Signiture Type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Signature of a canonical text document (0x01)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Public-key Algorithm\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;ECDSA public key algorithm (pub 19)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Hash Algorithm\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;SHA2-256 (hash 8)\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Hashed Subpacket\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;6 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Signature Creation Time (sub 2)\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;2015-01-24T02:52:15Z\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;Unhashed Subpacket\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;10 bytes\u0026#34;, \u0026#34;Item\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Issuer (sub 16)\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0x31fbfda95fbbfa18\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;Hash left 2 bytes\u0026#34;, \u0026#34;dump\u0026#34;: \u0026#34;36 1f\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ECDSA value r\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;256 bits\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;ECDSA value s\u0026#34;, \u0026#34;note\u0026#34;: \u0026#34;252 bits\u0026#34; } ] } ] } のような出力になる。 これなら info.Info 構造体の構成が分かりやすいかな。\nブックマーク  OpenPGP の実装  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2018-12-16 (powered by PA-API)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-API)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n "
    },
    {
      "title": "gpgpdump v0.6.2 をリリースした",
      "section": "release",
      "description": "今回は細かい調整のみ。 draft-ietf-openpgp-rfc4880bis-08 への追随も行った。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/09/gpgpdump-v0_6_2-is-released/",
      "published": "2019-09-09T10:38:32+00:00",
      "update": "2019-09-10T13:11:02+00:00",
      "content": " OpenPGP パケットの内容を可視化する gpgpdump の v0.6.2 をリリースした。\n Release v0.6.2 · spiegel-im-spiegel/gpgpdump · GitHub  といっても今回は細かい調整のみ。 Go 1.13 に対応したのと新しいエラーハンドリング・パッケージ spiegel-im-spiegel/errs を組み込んだだけ。 でも，これでデバッグが格段にし易くなった。\nあ，そうそう。 draft-ietf-openpgp-rfc4880bis-08 への追随も行った。 でも試す対象がないからなぁ（笑）\ngpgpdump の使い方等は以下を参照のこと。\n OpenPGP パケットを可視化する gpgpdump  ブックマーク  Go 言語用エラーハンドリング・パッケージをリリースした spiegel-im-spiegel/gocli v0.10.1 のリリース  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2018-12-16 (powered by PA-API)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-API)\n "
    },
    {
      "title": "2019-09-08 のブックマーク",
      "section": "bookmarks",
      "description": "「「Firefox 69」が公開 ～全ユーザーをサードパーティートラッカーと暗号通貨マイニングから保護」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/09/08-bookmarks/",
      "published": "2019-09-08T07:14:45+00:00",
      "update": "2019-09-08T07:17:40+00:00",
      "content": " リリース情報  Google、「Android 10」を正式リリース - 窓の杜 Firefox 69.0, See All New Features, Updates and Fixes  Today’s Firefox Blocks Third-Party Tracking Cookies and Cryptomining by Default - The Mozilla Blog 「Firefox 69」が公開 ～全ユーザーをサードパーティートラッカーと暗号通貨マイニングから保護 - 窓の杜  GoogleがAndroid 10をリリース、日本でも配信中 | TechCrunch Japan Image Processing Galore! | Hugo : Hugo 0.58 がリリースされた  Hugo 0.58.1: A couple of Bug Fixes | Hugo  LibreOffice 6.3.1 and LibreOffice 6.2.7 announced, focusing on security - The Document Foundation Blog 「Samba 4.10.8/4.9.13」リリース | Think IT（シンクイット）  セキュリティ＆プライバシー関連  Twitterのジャック・ドーシーCEOのTwitterアカウントが乗っ取られる | TechCrunch Japan 脆弱なAWS S3侵害によるユニクロオーストラリアの入力フォーム改ざんについてまとめてみた - piyolog SIMスワッピングによるTwitter CEOアカウントのっとりについてまとめてみた - piyolog 複数の SSL VPN 製品の脆弱性に関する注意喚起 Avastと仏警察、85万台感染の暗号通貨マイニング・ボットネットを壊滅 | TechCrunch Japan MIT Tech Review: 積極攻撃に乗り出す米サイバー軍、イラン軍のデータベースを破壊 DDoS攻撃の最新動向--小規模で巧妙な攻撃増加 - ZDNet Japan Sources say China used iPhone hacks to target Uyghur Muslims – TechCrunch  iPhoneハッキングは中国政府によるウイグルのムスリム攻撃の疑い | TechCrunch Japan MIT Tech Review: iPhone安全神話崩壊、グーグルが発見した大規模攻撃の驚きの中身 Massive iPhone Hack Targets Uyghurs - Schneier on Security ブログ: ウイグル人を標的にした大規模なiPhoneハッキング アップルがグーグルのiOS脆弱性発表に「ウイグルだけの話」と反論 | TechCrunch Japan  パンダくろしお運行スケジュールサイトの改ざんについてまとめてみた - piyolog LINE、プロフ画像が第三者に変更される脆弱性　「プロフ画像、変えられてないか確認を」とユーザーに呼び掛け - ITmedia NEWS Credit Card Privacy - Schneier on Security MIT Tech Review: ハッカー惑わし攻撃防ぐ、ミシガン大の新型チップ J-Coin Payテスト環境で発生したデータ削除とビットコイン要求についてまとめてみた - piyolog Facebookユーザーの電話番号が掲載された大量データベースが流出 | TechCrunch Japan The Doghouse: Crown Sterling - Schneier on Security 9月5日に発生した金融機関のワンタイムパスワード認証サービスの障害についてまとめてみた - piyolog Androidに未解決の脆弱性を発見、ZDIが公開 - ITmedia エンタープライズ 600,000 GPS trackers for people and pets are using 123456 as a password | Ars Technica トヨタ紡織で発生した虚偽の指示による資金流出事案についてまとめてみた - piyolog Malicious attack on Wikipedia—What we know, and what we’re doing – Wikimedia Foundation  天文関連  MIT Tech Review: スペースXのネット衛星、ESAの気象衛星とニアミス 速報・ブラックホールの直接撮像に対して基礎物理学ブレークスルー賞の授与が決定 | 国立天文台(NAOJ) JAXA | 火星衛星探査に向けた国際的な惑星保護方針への貢献について  知財関連  国際調査研究：正規版の価格の手頃さと入手のしやすさこそが海賊版を減らす | P2Pとかその辺のお話R Facebook Blocks Sharing of Links to Prominent Pirate Sites - TorrentFreak 'Pirate' Site Manga Rock Starts Shutdown, Will Go Legal - TorrentFreak  大手海賊版マンガサイト「Manga Rock」、サイトを閉鎖し合法サービス化を目指すと宣言 | P2Pとかその辺のお話R  ISPs: Pirate Site Blocking Threatens Freedom of Expression - TorrentFreak  Linux または Ubuntu に関する話題  さくらのVPS 初期提供時の標準OSを「CentOS 7」へ変更 | さくらインターネット Ubuntu 20.04 その2 - TLSの最小バージョンをTLS v1.2に - kledgeb  その他  LibreOffice で「Arial」が「MS Pゴシック」になる - 電気ウナギ的○○ ヴイエムウェアとデルのCEOが語る、米中貿易摩擦と2つの貿易圏への対応 - ZDNet Japan Google App EngineでRubyのスタンダード環境でのサポート開始。負荷がないときはゼロインスタンスまで縮退可能 － Publickey Microsoft、Edge/IE11のFlash削除ロードマップを更新 ～次期EdgeはChromiumと歩を揃えて段階的に廃止 - 窓の杜 Rustこそがシステムプログラミングの未来（で、C言語はもはやアセンブリ相当）なら、Rustで書かれたドライバのコードをLinuxカーネルは受け入れるべきなのか？ - YAMDAS現更新履歴 プロジェクト管理ツール「Jooto」がフル機能を無料開放、5人目以降からの有料プランに刷新 | TechCrunch Japan HugoでGravater登録画像を表示するサンプル - Qiita Facebookが近い将来「いいね！」カウントを廃止する可能性 | TechCrunch Japan MIT Tech Review: SNSからヘイトを排除するには？ 物理学者が提唱する過激な対策 仮想マシンのメモリを、ネットワーク経由でほかのサーバから拝借して増やせる「VMware Cluster Memory」、VMwareが開発中 － Publickey 英「合意なき離脱」なら欧州に深刻なダメージ--静かに響く「EU崩壊」の足音 - ZDNet Japan ハイライト 山中伸弥 氏（京都大学iPS細胞研究所所長・教授）「iPS細胞の発見をもたらした『必要』と『偶然』 ―ノーベル生理学・医学賞を授賞した研究の背景」| SciencePortal MIT Tech Review: 米大統領選デマ合戦、インスタが新たな主戦場に UPSが場所により完全EVモードに切り替え可能なハイブリッド長距離トラックを導入 | TechCrunch Japan Why do Chinese people like their government? - SupChina マイクロプラスティックは飲料水にも入っているが、心配しすぎなくていい（いまのところは）：WHOが報告書｜WIRED.jp マネージドなNFSサーバを提供する「Amazon EFS」、ファイルの保存価格を大幅値下げ － Publickey ミックステープの音楽ストリーミング「Audiomack」はなぜ成長したか。インディーズアーティストに起こる序列の変化 | All Digital Music  "
    },
    {
      "title": "書籍データ取得ツール books-data",
      "section": "release",
      "description": "本ツールは PA-API, openBD および 青空文庫 API より書籍情報を取得・加工するための CLI ツールである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/books-data/",
      "published": "2019-09-08T06:22:41+00:00",
      "update": "2019-09-09T10:42:23+00:00",
      "content": "  spiegel-im-spiegel/books-data: Search for Books Data  本ツールは PA-API, openBD および 青空文庫 API より書籍情報を取得・加工するための CLI (Command-Line Interface) ツールである。\n  \nダウンロードとビルド books-data は以下の Go コマンドでダウンロードとビルドができる。\n$ go get github.com/spiegel-im-spiegel/books-data@latest なおビルドには Go 1.13 以上が必要になる。 ご注意を。\n各プラットフォーム用のバイナリも用意している。 最新バイナリはリリースページから取得できる。\n簡単な使い方 -h オプションで簡単なヘルプを表示できる。\n$ books-data -h Search for books data Usage: books-data [flags] books-data [command] Available Commands: help Help about any command history Lookup review data from history log review Make review data search Search for books data version Print the version number Flags: --access-key string Config: PA-API Access Key ID -c, --aozora-card string Aozora-bunko card no. -a, --asin string Amazon ASIN code --associate-tag string Config: PA-API Associate Tag --config string Config file (default /home/username/.config/books-data/config.yaml) --debug for debug -h, --help help for books-data -i, --isbn string ISBN code --marketplace string Config: PA-API Marketplace (default \u0026#34;webservices.amazon.co.jp\u0026#34;) -l, --review-log string Config: Review log file (JSON format) --secret-key string Config: PA-API Secret Access Key -t, --template-file string Template file for formatted output Use \u0026#34;books-data [command] --help\u0026#34; for more information about a command. 設定ファイル books-data のオプションの一部は設定ファイルであらかじめ指定しておくことができる。 指定可能なオプションは以下の通り\n   オプション名 既定値 内容     marketplace webservices.amazon.co.jp PA-API サーバ名   associate-tag なし PA-API アソシエイト・タグ（アカウント名）   access-key なし PA-API アクセスキー   secret-key なし PA-API 秘密キー   review-log なし レビューデータ作成時の保存ログファイル名    設定ファイルの書式は YAML 形式で以下のような感じに記述する。\n$ cat ~/.config/books-data/config.yaml marketplace: webservices.amazon.co.jp associate-tag: mytag-20 access-key: AKIAIOSFODNN7EXAMPLE secret-key: 1234567890 review-log: /home/username/.local/share/books-data/review-log.json 設定ファイルは以下のパスに置いておけば books-data 起動時に自動的に読み込まれる。\n Windows  %AppData%\\books-data\\config.yaml  Darwin (macOS)  $HOME/Library/Application Support/books-data/config.yaml  Plan 9  $home/lib/books-data/config.yaml  UNIX 系 OS (Linux 他)  $XDG_CONFIG_HOME/books-data/config.yaml （$XDG_CONFIG_HOME 環境変数が指定されている場合） $HOME/.config/books-data/config.yaml   また books-data 起動時に --config オプションで設定ファイルを直接指定することも可能だ。 設定ファイルの内容には秘密情報が含まれる（PA-API を利用する場合）ためファイルのアクセス設定に注意すること。\n書籍情報の検索 $ books-data search -h Search for books data Usage: books-data search [flags] Flags: -h, --help help for search --raw Output raw data from API Global Flags: --access-key string Config: PA-API Access Key ID -c, --aozora-card string Aozora-bunko card no. -a, --asin string Amazon ASIN code --associate-tag string Config: PA-API Associate Tag --config string Config file (default /home/username/.config/books-data/config.yaml) --debug for debug -i, --isbn string ISBN code --marketplace string Config: PA-API Marketplace (default \u0026#34;webservices.amazon.co.jp\u0026#34;) -l, --review-log string Config: Review log file (JSON format) --secret-key string Config: PA-API Secret Access Key -t, --template-file string Template file for formatted output たとえば ASIN コード B07TYKJQFK のアイテムの情報を取得する場合は以下のコマンドラインで起動する（PA-API を利用可能な場合）。\n$ books-data search -a B07TYKJQFK {\u0026#34;Type\u0026#34;:\u0026#34;paapi\u0026#34;,\u0026#34;ID\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;,\u0026#34;Title\u0026#34;:\u0026#34;数学ガールの秘密ノート／ビットとバイナリー\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://www.amazon.co.jp/exec/obidos/ASIN/B07TYKJQFK/baldandersinf-22/\u0026#34;,\u0026#34;Image\u0026#34;:{\u0026#34;URL\u0026#34;:\u0026#34;https://images-fe.ssl-images-amazon.com/images/I/41Q0Hyr8g3L._SL160_.jpg\u0026#34;,\u0026#34;Height\u0026#34;:160,\u0026#34;Width\u0026#34;:111},\u0026#34;ProductType\u0026#34;:\u0026#34;Kindle版\u0026#34;,\u0026#34;Authors\u0026#34;:[\u0026#34;結城 浩\u0026#34;],\u0026#34;Publisher\u0026#34;:\u0026#34;SBクリエイティブ\u0026#34;,\u0026#34;Codes\u0026#34;:[{\u0026#34;Name\u0026#34;:\u0026#34;ASIN\u0026#34;,\u0026#34;Value\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;}],\u0026#34;PublicationDate\u0026#34;:\u0026#34;2019-07-19\u0026#34;,\u0026#34;LastRelease\u0026#34;:\u0026#34;2019-07-20\u0026#34;,\u0026#34;Service\u0026#34;:{\u0026#34;Name\u0026#34;:\u0026#34;PA-API\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://affiliate.amazon.co.jp/assoc_credentials/home\u0026#34;}} 実行結果は JSON 形式で出力される。\n他に指定可能な検索オプションは以下の通り。\n   オプション 内容     -a, --asin Amazon ASIN コード   -i, --isbn ISBN 番号   -c, --aozora-card 青空文庫図書カード No.    これらは同時に指定可能だが Amazon ASIN コード → ISBN 番号 → 青空文庫図書カード No. の順で検索を行う。 また検索キーとして ISBN コードを指定した場合は openBD → PA-API の順で検索する。\nレビュー・データの作成 $ books-data review -h Make review data Usage: books-data review [flags] [description] Flags: --bookpage-url string URL of book page -h, --help help for review --image-url string URL of book cover image --pipe Import description from Stdin -r, --rating int Rating of product --review-date string Date of review Global Flags: --access-key string Config: PA-API Access Key ID -c, --aozora-card string Aozora-bunko card no. -a, --asin string Amazon ASIN code --associate-tag string Config: PA-API Associate Tag --config string Config file (default /home/username/.config/books-data/config.yaml) --debug for debug -i, --isbn string ISBN code --marketplace string Config: PA-API Marketplace (default \u0026#34;webservices.amazon.co.jp\u0026#34;) -l, --review-log string Config: Review log file (JSON format) --secret-key string Config: PA-API Secret Access Key -t, --template-file string Template file for formatted output ASIN, ISBN または 青空文庫図書カード No. で指定した書籍情報に対してレビュー情報を作成する。 レビュー情報として以下のオプションを指定できる。\n   オプション 内容     --bookpage-url 書籍ページへの URL   --image-url 書影（画像データ）への URL   --rating 評価ポイント (0-5) ※ 0なら評価なし   --review-date レビュー日    コマンドラインはこんな感じで記述する。\n$ books-data review -a B07TYKJQFK -r 5 --review-date 2019-09-08 \u0026#34;面白かった！\u0026#34; {\u0026#34;Book\u0026#34;:{\u0026#34;Type\u0026#34;:\u0026#34;paapi\u0026#34;,\u0026#34;ID\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;,\u0026#34;Title\u0026#34;:\u0026#34;数学ガールの秘密ノート／ビットとバイナリー\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://www.amazon.co.jp/exec/obidos/ASIN/B07TYKJQFK/baldandersinf-22/\u0026#34;,\u0026#34;Image\u0026#34;:{\u0026#34;URL\u0026#34;:\u0026#34;https://images-fe.ssl-images-amazon.com/images/I/41Q0Hyr8g3L._SL160_.jpg\u0026#34;,\u0026#34;Height\u0026#34;:160,\u0026#34;Width\u0026#34;:111},\u0026#34;ProductType\u0026#34;:\u0026#34;Kindle版\u0026#34;,\u0026#34;Authors\u0026#34;:[\u0026#34;結城 浩\u0026#34;],\u0026#34;Publisher\u0026#34;:\u0026#34;SBクリエイティブ\u0026#34;,\u0026#34;Codes\u0026#34;:[{\u0026#34;Name\u0026#34;:\u0026#34;ASIN\u0026#34;,\u0026#34;Value\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;}],\u0026#34;PublicationDate\u0026#34;:\u0026#34;2019-07-19\u0026#34;,\u0026#34;LastRelease\u0026#34;:\u0026#34;2019-07-20\u0026#34;,\u0026#34;Service\u0026#34;:{\u0026#34;Name\u0026#34;:\u0026#34;PA-API\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://affiliate.amazon.co.jp/assoc_credentials/home\u0026#34;}},\u0026#34;Date\u0026#34;:\u0026#34;2019-09-08\u0026#34;,\u0026#34;Rating\u0026#34;:5,\u0026#34;Star\u0026#34;:[true,true,true,true,true],\u0026#34;Description\u0026#34;:\u0026#34;面白かった！\u0026#34;} 実行結果は JSON 形式で出力される。 また --pipe オプションを付けることで標準入力から description を入力できる。\n$ echo \u0026#34;面白かった！\u0026#34; | books-data review -a B07TYKJQFK -r 5 --review-date 2019-09-08 --pipe {\u0026#34;Book\u0026#34;:{\u0026#34;Type\u0026#34;:\u0026#34;paapi\u0026#34;,\u0026#34;ID\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;,\u0026#34;Title\u0026#34;:\u0026#34;数学ガールの秘密ノート／ビットとバイナリー\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://www.amazon.co.jp/exec/obidos/ASIN/B07TYKJQFK/baldandersinf-22/\u0026#34;,\u0026#34;Image\u0026#34;:{\u0026#34;URL\u0026#34;:\u0026#34;https://images-fe.ssl-images-amazon.com/images/I/41Q0Hyr8g3L._SL160_.jpg\u0026#34;,\u0026#34;Height\u0026#34;:160,\u0026#34;Width\u0026#34;:111},\u0026#34;ProductType\u0026#34;:\u0026#34;Kindle版\u0026#34;,\u0026#34;Authors\u0026#34;:[\u0026#34;結城 浩\u0026#34;],\u0026#34;Publisher\u0026#34;:\u0026#34;SBクリエイティブ\u0026#34;,\u0026#34;Codes\u0026#34;:[{\u0026#34;Name\u0026#34;:\u0026#34;ASIN\u0026#34;,\u0026#34;Value\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;}],\u0026#34;PublicationDate\u0026#34;:\u0026#34;2019-07-19\u0026#34;,\u0026#34;LastRelease\u0026#34;:\u0026#34;2019-07-20\u0026#34;,\u0026#34;Service\u0026#34;:{\u0026#34;Name\u0026#34;:\u0026#34;PA-API\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://affiliate.amazon.co.jp/assoc_credentials/home\u0026#34;}},\u0026#34;Date\u0026#34;:\u0026#34;2019-09-08\u0026#34;,\u0026#34;Rating\u0026#34;:5,\u0026#34;Star\u0026#34;:[true,true,true,true,true],\u0026#34;Description\u0026#34;:\u0026#34;面白かった！\\n\u0026#34;} レビュー履歴の参照 $ books-data history -h Lookup review data from history log Usage: books-data history [flags] Flags: -h, --help help for history Global Flags: --access-key string Config: PA-API Access Key ID -c, --aozora-card string Aozora-bunko card no. -a, --asin string Amazon ASIN code --associate-tag string Config: PA-API Associate Tag --config string Config file (default /home/spiegel/.config/books-data/config.yaml) --debug for debug -i, --isbn string ISBN code --marketplace string Config: PA-API Marketplace (default \u0026#34;webservices.amazon.co.jp\u0026#34;) -l, --review-log string Config: Review log file (JSON format) --secret-key string Config: PA-API Secret Access Key -t, --template-file string Template file for formatted output --review-log オプションでレビュー結果を保存している場合は history コマンドで過去の履歴を呼び出せる。\n$ books-data history -a B07TYKJQFK {\u0026#34;Book\u0026#34;:{\u0026#34;Type\u0026#34;:\u0026#34;paapi\u0026#34;,\u0026#34;ID\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;,\u0026#34;Title\u0026#34;:\u0026#34;数学ガールの秘密ノート／ビットとバイナリー\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://www.amazon.co.jp/%E6%95%B0%E5%AD%A6%E3%82%AC%E3%83%BC%E3%83%AB%E3%81%AE%E7%A7%98%E5%AF%86%E3%83%8E%E3%83%BC%E3%83%88%EF%BC%8F%E3%83%93%E3%83%83%E3%83%88%E3%81%A8%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%BC-%E7%B5%90%E5%9F%8E-%E6%B5%A9-ebook/dp/B07TYKJQFK?SubscriptionId=AKIAJYVUJ3DMTLAECTHA\\u0026tag=baldandersinf-22\\u0026linkCode=xm2\\u0026camp=2025\\u0026creative=165953\\u0026creativeASIN=B07TYKJQFK\u0026#34;,\u0026#34;Image\u0026#34;:{\u0026#34;URL\u0026#34;:\u0026#34;https://images-fe.ssl-images-amazon.com/images/I/41Q0Hyr8g3L._SL160_.jpg\u0026#34;,\u0026#34;Height\u0026#34;:160,\u0026#34;Width\u0026#34;:111},\u0026#34;ProductType\u0026#34;:\u0026#34;Kindle版\u0026#34;,\u0026#34;Authors\u0026#34;:[\u0026#34;結城 浩\u0026#34;],\u0026#34;Publisher\u0026#34;:\u0026#34;SBクリエイティブ\u0026#34;,\u0026#34;Codes\u0026#34;:[{\u0026#34;Name\u0026#34;:\u0026#34;ASIN\u0026#34;,\u0026#34;Value\u0026#34;:\u0026#34;B07TYKJQFK\u0026#34;}],\u0026#34;PublicationDate\u0026#34;:\u0026#34;2019-07-19\u0026#34;,\u0026#34;LastRelease\u0026#34;:\u0026#34;2019-07-20\u0026#34;,\u0026#34;Service\u0026#34;:{\u0026#34;Name\u0026#34;:\u0026#34;PA-API\u0026#34;,\u0026#34;URL\u0026#34;:\u0026#34;https://affiliate.amazon.co.jp/assoc_credentials/home\u0026#34;}},\u0026#34;Date\u0026#34;:\u0026#34;2019-08-04\u0026#34;,\u0026#34;Rating\u0026#34;:5,\u0026#34;Star\u0026#34;:[true,true,true,true,true],\u0026#34;Description\u0026#34;:\u0026#34;面白かった！\\n\u0026#34;} 出力の整形 -t または --template-file オプションででテンプレートファイルを指定することにより search, review, history 各コマンドの実行結果の出力を整形できる。\nたとえば以下のようなテンプレートファイルを用意すれば\n$ cat reviews/template.bib.txt @BOOK{Book:{{ .Book.ID }}, TITLE = \u0026#34;{{ .Book.Title }}\u0026#34;{{ if .Book.Authors }}, AUTHOR = \u0026#34;{{ range $i, $v := .Book.Authors }}{{ if ne $i 0 }} and {{ end }}{{ $v }}{{ end }}{{ if .Book.Creators }}{{ range .Book.Creators }} and {{ . }}{{ end }}{{ end }}\u0026#34;{{ end }}{{ if .Book.Publisher }}, PUBLISHER = {{ \u0026#34;{\u0026#34; }}{{ .Book.Publisher }}{{ \u0026#34;}\u0026#34; }}{{ end }}{{ if gt .Book.PublicationDate.Year 1 }}, YEAR = {{ .Book.PublicationDate.Year }}{{ end }} } このような出力になる。\n$ books-data history -a B07TYKJQFK -t reviews/template.bib.txt @BOOK{Book:B07TYKJQFK, TITLE = \u0026#34;数学ガールの秘密ノート／ビットとバイナリー\u0026#34;, AUTHOR = \u0026#34;結城 浩\u0026#34;, PUBLISHER = {SBクリエイティブ}, YEAR = 2019 } search コマンドで取得した書籍データのフォーマットは以下の通り。\n//Book is entity class of information for book type Book struct { Type string ID string Title string SubTitle string `json:\u0026#34;,omitempty\u0026#34;` SeriesTitle string `json:\u0026#34;,omitempty\u0026#34;` OriginalTitle string `json:\u0026#34;,omitempty\u0026#34;` URL string `json:\u0026#34;,omitempty\u0026#34;` Image BookCover ProductType string `json:\u0026#34;,omitempty\u0026#34;` Authors []string Creators []Creator `json:\u0026#34;,omitempty\u0026#34;` Publisher string `json:\u0026#34;,omitempty\u0026#34;` Codes []Code PublicationDate values.Date LastRelease values.Date PublicDomain bool `json:\u0026#34;,omitempty\u0026#34;` FirstAppearance string `json:\u0026#34;,omitempty\u0026#34;` Service Service } //Code is entity class of book code type Code struct { Name string Value string } //Creator is entity class of creator info. type Creator struct { Name string Role string `json:\u0026#34;,omitempty\u0026#34;` } //BookCover is entity class of book cover image info. type BookCover struct { URL string Height uint16 `json:\u0026#34;,omitempty\u0026#34;` Width uint16 `json:\u0026#34;,omitempty\u0026#34;` } //Service is entity class of API service info. type Service struct { Name string URL string } また review, history コマンドで取得したレビュー・データのフォーマットは以下の通り。\n//Review is entity class for review info. type Review struct { Book *entity.Book Date values.Date Rating int Star [MAX_STAR]bool Description string `json:\u0026#34;,omitempty\u0026#34;` } ちなみに，このブログにおけるレビューカードのテンプレートは以下の内容になっている。\n\u0026lt;div class=\u0026#34;hreview\u0026#34;\u0026gt;{{ if .Book.Image.URL }} \u0026lt;div class=\u0026#34;photo\u0026#34;\u0026gt;{{ if .Book.URL }}\u0026lt;a class=\u0026#34;item url\u0026#34; href=\u0026#34;{{ .Book.URL }}\u0026#34;\u0026gt;{{ end }}\u0026lt;img src=\u0026#34;{{ .Book.Image.URL }}\u0026#34; width=\u0026#34;{{ with .Book.Image.Width }}{{ . }}{{ else }}110{{ end }}\u0026#34; alt=\u0026#34;photo\u0026#34;\u0026gt;{{ if .Book.URL }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/div\u0026gt;{{ end }} \u0026lt;dl class=\u0026#34;fn\u0026#34;\u0026gt; \u0026lt;dt\u0026gt;{{ if .Book.URL }}\u0026lt;a href=\u0026#34;{{ .Book.URL }}\u0026#34;\u0026gt;{{ end }}{{ .Book.Title }}{{ with .Book.SubTitle }} {{ . }}{{ end }}{{ with .Book.SeriesTitle }} ({{ . }}){{ end }}{{ if .Book.URL }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/dt\u0026gt;{{ if .Book.OriginalTitle }} \u0026lt;dd\u0026gt;原題: {{ .Book.OriginalTitle }}\u0026lt;/dd\u0026gt;{{ end }}{{ if .Book.FirstAppearance }} \u0026lt;dd\u0026gt;（初出: {{ .Book.FirstAppearance }}）\u0026lt;/dd\u0026gt;{{ end }}{{ if .Book.Authors }} \u0026lt;dd\u0026gt;{{ range $i, $v := .Book.Authors }}{{ if ne $i 0 }}, {{ end }}{{ $v }}{{ end }}\u0026lt;/dd\u0026gt;{{ end }}{{ if .Book.Creators }} \u0026lt;dd\u0026gt;{{ range $i, $v := .Book.Creators }}{{ if ne $i 0 }}, {{ end }}{{ $v }}{{ end }}\u0026lt;/dd\u0026gt;{{ end }} \u0026lt;dd\u0026gt;{{ .Book.Publisher }}{{ if not .Book.PublicationDate.IsZero }} {{ .Book.PublicationDate }}{{ end }}{{ if not .Book.LastRelease.IsZero }} (Release {{ .Book.LastRelease }}){{ end }}\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;{{ .Book.ProductType }}{{ if .Book.PublicDomain }} (Public Domain){{ end }}\u0026lt;/dd\u0026gt;{{ if .Book.Codes }} \u0026lt;dd\u0026gt;{{ range $i, $v := .Book.Codes }}{{ if ne $i 0 }}, {{ end }}{{ $v }}{{ end }}\u0026lt;/dd\u0026gt;{{ end }}{{ if gt .Rating 0 }} \u0026lt;dd\u0026gt;評価\u0026lt;abbr class=\u0026#34;rating fa-sm\u0026#34; title=\u0026#34;{{ .Rating }}\u0026#34;\u0026gt;{{ range .Star }}\u0026amp;nbsp;{{ if . }}\u0026lt;i class=\u0026#34;fas fa-star\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;{{ else }}\u0026lt;i class=\u0026#34;far fa-star\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;{{ end }}{{ end }}\u0026lt;/abbr\u0026gt;\u0026lt;/dd\u0026gt;{{ end }} \u0026lt;/dl\u0026gt; \u0026lt;p class=\u0026#34;description\u0026#34;\u0026gt;{{ .Description }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;powered-by\u0026#34;\u0026gt;reviewed by \u0026lt;a href=\u0026#39;#maker\u0026#39; class=\u0026#39;reviewer\u0026#39;\u0026gt;Spiegel\u0026lt;/a\u0026gt; on \u0026lt;abbr class=\u0026#34;dtreviewed\u0026#34; title=\u0026#34;{{ .Date }}\u0026#34;\u0026gt;{{ .Date }}\u0026lt;/abbr\u0026gt; (powered by {{ if .Book.Service.URL }}\u0026lt;a href=\u0026#34;{{ .Book.Service.URL }}\u0026#34;\u0026gt;{{ end }}{{ .Book.Service.Name }}{{ if .Book.Service.URL }}\u0026lt;/a\u0026gt;{{ end }})\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; テンプレート・ファイルを作成する際の参考にどうぞ。\n参考情報  Go 言語用 CLI プログラミング支援パッケージ Go 言語用エラーハンドリング・パッケージ Go 言語用青空文庫 API クライアント・パッケージ Go 言語用 openBD クライアント・パッケージ  "
    }
  ]
}
