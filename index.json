{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "2021年の暦",
      "section": "remark",
      "description": "今年も国立天文台より翌年の暦要項が公開された。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/02/calendar-2021/",
      "published": "2020-02-03T11:15:16+00:00",
      "update": "2020-02-03T11:15:37+00:00",
      "content": "今年も国立天文台より翌年の暦要項が公開された。\n 令和3（2021）年暦要項の発表 | 国立天文台(NAOJ)  以降，いくつか抜粋してみる。\n祝日・休日1 2021年は振替休日なしか！\n   祝日休日名 日付     元日 2021-01-01 (金)   成人の日 2021-01-11 (月)   建国記念の日 2021-02-11 (木)   天皇誕生日 2021-02-23 (火)   春分の日 2021-03-20 (土)   昭和の日 2021-04-29 (木)   憲法記念日 2021-05-03 (月)   みどりの日 2021-05-04 (火)   こどもの日 2021-05-05 (水)   海の日 2021-07-19 (月)   山の日 2021-08-11 (水)   敬老の日 2021-09-20 (月)   秋分の日 2021-09-23 (木)   スポーツの日 2021-10-11 (月)   文化の日 2021-11-03 (水)   勤労感謝の日 2021-11-23 (火)    2021年の暦象 2021年は日食が2回，月食が2回ある。\n 2021-05-26 に皆既月食がある。日本でも見られる 2021-06-10 （時の記念日！）に金環日食がある。日本では見られない 2021-11-19 に部分月食がある。日本でも見られる 2021-12-04 に皆既日食がある。日本では見られない  そういえば\u0026hellip; 昨年はこの時期にこの手の記事を書かなかったな。 私生活がそれどころじゃなかったし。 だいぶ余裕が出てきたということか。\n2年前に書いた記事に「インフルエンザ過敏症とトリアージ」というのも書いたが，ぜひ今のタイミングで読んでいただきたいものである（笑）\nブックマーク  カレンダーに祝日を入れたいなら国立天文台へ行けばいいじゃない 2020年の主な暦象 2020年の祝日休日  参考図書  天文年鑑 2020年版 天文年鑑 編集委員会 (編集) 誠文堂新光社 2019-11-20 単行本 4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  天文ファン必携。2020年版。\nreviewed by Spiegel on 2019-11-23 (powered by PA-APIv5)\n   「国民の祝日」は休日となる。また「「国民の祝日」が日曜日に当たるときは、その日後においてその日に最も近い「国民の祝日」でない日を休日とする」（「国民の祝日に関する法律」より）。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "インスタンスの比較可能性",
      "section": "golang",
      "description": "少なくとも == および != 演算子が使えることを「比較可能」であると言う。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/comparability/",
      "published": "2020-02-02T08:52:58+00:00",
      "update": "2020-02-02T09:18:28+00:00",
      "content": "次のイベントに向けてネタの整理をしているところだが，その中でインスタンスの比較可能性 (comparability) についてきちんと整理したほうがよさそうな気がしたので，小ネタ記事として公開する。\n用語の定義（暫定） 本題に入る前に，以下の2つの単語を，この記事限りの用語として定義する。 他所で使わないように（笑）\n   用語 意味     等値 インスタンスの値が等しい（equal）こと   等価 インスタンスの型が同一（identical）であること    プログラミングの世界で等値と等価に関して議論があることは知っているが，今回はまるっと無視する。 だって鬱陶しいんだもん。\n比較演算子 Go 言語ではインスタンス同士の比較演算子として\n   演算子 名称     == equal   != not equal   \u0026lt; less   \u0026lt;= less or equal   \u0026gt; greater   \u0026gt;= greater or equal    の5つが定義されている。 このうち少なくとも == および != が使えることを「比較可能（comparable）」であると言う。\n型の比較可能性 インスタンス同士が比較可能であるためには以下の2つの条件がが必要である。\n インスタンスの型が同一（等価）であること インスタンスの型が比較可能であること  たとえばある型を別の型に再定義しただけの場合でも等価とは見なされず，コンパイルエラーになる。\npackage main import \u0026#34;fmt\u0026#34; type Number int func main() { var c1 int = 1 var c2 Number = 1 fmt.Println(c1 == c2) //compile error: mismatched types int and Number } ただし，等価な型にキャスト可能であれば\npackage main import \u0026#34;fmt\u0026#34; type Number int func main() { var c1 int = 1 var c2 Number = 1 fmt.Println(c1 == int(c2)) //true } などとできる。 また type alias であれば等価とみなされる。\npackage main import \u0026#34;fmt\u0026#34; type Number = int  func main() { var c1 int = 1 var c2 Number = 1 fmt.Println(c1 == c2) //true } 型の比較可能性については以下の通り。\n   型 等値比較 大小比較     整数型 可 可   浮動小数点数型 可 可   複素数型 可 不可   真偽型 可 不可   構造体 可 不可   配列 可 不可   文字列 可 可   Slice 型 不可 不可   Map 型 不可 不可   関数型 不可 不可   Channel 型 可 不可   Interface 型 可 不可   ポインタ 可 不可    以下，補足。\nNaN は比較可能だが比較できない NaN (Not a Number) は浮動小数点数型における（ゼロ除算などの）特別な状態を示す。 NaN 自体は比較可能なのだが，常に同じ結果を返すので，比較演算子は使えない。 浮動小数点数の値が NaN かどうか調べるには math.IsNaN() 関数を使う。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;math\u0026#34; ) func main() { var z float64 nan := z / z fmt.Println(nan) //NaN \tfmt.Println(\u0026#34;NaN == NaN -\u0026gt;\u0026#34;, nan == math.NaN()) //false \tfmt.Println(\u0026#34;NaN != NaN -\u0026gt;\u0026#34;, nan != math.NaN()) //true \tfmt.Println(\u0026#34;NaN \u0026gt; NaN -\u0026gt;\u0026#34;, nan \u0026gt; math.NaN()) //false \tfmt.Println(\u0026#34;NaN \u0026lt; NaN -\u0026gt;\u0026#34;, nan \u0026lt; math.NaN()) //false \tfmt.Println(\u0026#34;math.IsNaN(NaN) -\u0026gt;\u0026#34;, math.IsNaN(nan)) //true  } 構造体要素の型 構造体は，要素の型が全て比較可能であれば，比較可能である。\npackage main import \u0026#34;fmt\u0026#34; type Number struct{ num int } func main() { c1 := Number{num: 1} c2 := Number{num: 1} fmt.Println(c1 == c2) //true } 配列要素の型 配列は，要素の型が比較可能であれば，比較可能である。\npackage main import \u0026#34;fmt\u0026#34; func main() { b1 := [1]byte{1} b2 := b1 fmt.Println(b1 == b2) //true  b3 := [2]byte{1, 2} fmt.Println(b1 == b3) //compile error: mismatched types [1]byte and [2]byte } ちなみに上のコードの [1]byte と [2]byte は等価ではないのでご注意を。 配列と Slice の関係については拙文「配列と Slice」を参考にどうぞ。\nポインタの型 ポインタはインスタンスのアドレッシングを指すものだが，等価なインスタンスのポインタであれば比較可能である。\npackage main import \u0026#34;fmt\u0026#34; type Number int func main() { var c1 int = 1 fmt.Println(\u0026amp;c1 == \u0026amp;c1) //true  var c2 Number = 1 fmt.Println(\u0026amp;c1 == \u0026amp;c2) //compile error: mismatched types *int and *Number } たとえば Slice 型や Map 型は比較可能ではないがポインタは比較できる（内容を比較しているわけではない）。\npackage main import \u0026#34;fmt\u0026#34; func main() { c1 := []int{1} c2 := []int{1} fmt.Println(c1 == c2) //compile error: slice can only be compared to nil \tfmt.Println(\u0026amp;c1 == \u0026amp;c2) //false } nil と比較可能な型 nil は（null 参照など）ポインタ値の特別な状態を示す。 なので nil はポインタと比較可能である。 他に nil と比較可能な型は以下の通り。\n Slice 型 Map 型 関数型 Channel 型 Interface 型  Slice 型, Map 型, 関数型は比較可能ではないが nil とは比較可能である。\nInterface 型の比較可能性 Interface 型は型情報と値への参照を属性として持っている。 Interface 型が参照している型を動的な型（dynamic type），参照値を動的な値（dynamic value）と呼ぶ。 動的な型も値も実行時に決まるからだ。\nたとえば\ntype Binary uint64 func (i Binary) String() string { return strconv.FormatUint(uint64(i), 2) } という型の定義に対して fmt.Stringer インタフェースを適用してみる。\nfunc main() { b := Binary(200) s := fmt.Stringer(b) fmt.Println(s.String()) // Output: \t// 11001000 } このときの fmt.Stringer インタフェースは以下のような構造になっている。\n via Go Data Structures: Interfaces  Interface 型は，動的な型が比較可能であれば，比較可能である。\nInterface 型の比較 Interface 型インスタンスの動的な型が等価で比較可能あれば値の等値性を調べられる。 更に Interface 型インスタンスの動的な型と等価な型のインスタンスとも（比較可能な型であれば）比較できる。\npackage main import \u0026#34;fmt\u0026#34; func main() { c1 := (interface{})(1) c2 := (interface{})(1) c3 := 1 fmt.Println(c1 == c2) //true \tfmt.Println(c1 == c3) //true } 通常の型では等価でない型同士の比較はコンパイルエラーになるが Interface 型同士であれば単に false なるだけである。\npackage main import \u0026#34;fmt\u0026#34; func main() { c1 := (interface{})(int(1)) c2 := (interface{})(byte(1)) c3 := (interface{})([]int{1}) fmt.Println(c1 == c2) //false \tfmt.Println(c1 == c3) //false } ただし動的な型が等価でも比較可能ではない場合には（コンパイルは通るが）実行時 panic になる。\npackage main import \u0026#34;fmt\u0026#34; func main() { c1 := (interface{})([]int{1}) c2 := (interface{})([]int{1}) fmt.Println(c1 == c2) //panic: runtime error: comparing uncomparable type []int } Interface 型インスタンスが比較可能か検証する 比較結果が false になるのはまだしも，実行時 panic はいただけない。 Panic を回避するには比較する前に動的な型が比較可能かどうか調べる必要がある。\n動的な型が比較可能かどうか調べるには reflect パッケージが使える。 たとえば，こんな感じでどうだろう。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;reflect\u0026#34; ) func Compare(left, right interface{}) bool { if !reflect.TypeOf(left).Comparable() \u0026amp;\u0026amp; !reflect.TypeOf(right).Comparable() { return false } \treturn left == right } func main() { c1 := (interface{})([]int{1}) c2 := (interface{})([]int{1}) fmt.Println(Compare(c1, c2)) //false } まぁ，実際に組み込むには（動的な型がポインタの際の処理など）もう少し工夫がいるだろう。 また，一般的に reflect は遅いと言われてるので，他の手段も考える必要があるかもしれない。\nたとえば標準の errors.Is() 関数は\n// Is reports whether any error in err\u0026#39;s chain matches target. func Is(err, target error) bool { if target == nil { return err == target } isComparable := reflectlite.TypeOf(target).Comparable() \tfor { if isComparable \u0026amp;\u0026amp; err == target { return true } if x, ok := err.(interface{ Is(error) bool }); ok \u0026amp;\u0026amp; x.Is(target) { return true } // TODO: consider supporing target.Is(err). This would allow \t// user-definable predicates, but also may allow for coping with sloppy \t// APIs, thereby making it easier to get away with them. \tif err = Unwrap(err); err == nil { return false } } } となっていて，独自の internal package を使っているようだ。\nブックマーク   Go で interface {} の中身がポインタならその参照先を取得する - Qiita\n  Sliceを含んだ構造体が等値演算子（==）でpanicを引き起こすのを回避する #golang - My External Storage\n  nil は nil\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-02-01 のブックマーク",
      "section": "bookmarks",
      "description": "「Performance-focused LibreOffice 6.4 is available for download」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/02/01-bookmarks/",
      "published": "2020-02-01T11:56:33+00:00",
      "update": "2020-02-01T11:59:00+00:00",
      "content": "リリース情報  Hugo 0.63.2: A couple of Bug Fixes | Hugo Performance-focused LibreOffice 6.4 is available for download - The Document Foundation Blog  セキュリティ＆プライバシー関連  ロシア職員関与と報じられたソフトバンク元社員の社外秘情報持ち出しについてまとめてみた - piyolog Modern Mass Surveillance: Identify, Correlate, Discriminate - Schneier on Security Leaked Documents Expose the Secretive Market for Your Web Browsing Data - VICE Google Receives Geofence Warrants - Schneier on Security Intel製CPUに投機的実行機能にまたサイドチャネル脆弱性、機密データを外部から推測されてしまう可能性 - 窓の杜 「Facebook外のアクティビティ」が全ユーザーに公開、広告ターゲティングの管理が容易に | TechCrunch Japan Customer Tracking at Ralphs Grocery Store - Schneier on Security Emotet感染メールに「新型コロナウイルス」、流行便乗攻撃に警戒を - ZDNet Japan MIT Tech Review: 顔認識にさらなる逆風、米プライバシー団体などが一時禁止を訴え 防衛装備品情報も影響を受けたNECへの不正アクセスについてまとめてみた - piyolog  天文関連  ブログ: 重力: 私たちは、この間ずっと間違っていたかも知れない 宇宙で最も明るい爆発現象の謎を解明 －超高輝度超新星「SN2006gy」の正体はIa型超新星だった－ — 京都大学 『はやぶさ２』の偉業「七つの世界初」！ - ちゅうおうくらしねっと NASAは天文学とエンジニアリングでのVRとARの本当の使い道を発見 | TechCrunch Japan News | Voyager 2 Engineers Working to Restore Normal Operations  ボイジャー2号で一時的に電力が不足、科学観測の再開に向け復旧作業中 - sorae 宇宙へのポータルサイト    Linux または Ubuntu に関する話題  Linuxカーネル「Linux 5.4.14」リリース | Think IT（シンクイット）  その他  中国コロナウイルスでフェイク拡散：それは“ビル・ゲイツの陰謀”ではない | 新聞紙学的  コロナウイルス特許の陰謀論について(栗原潔) - 個人 - Yahoo!ニュース   Linuxとオープンソースのこれまでと展望\u0026ndash;5つの要素にみる - ZDNet Japan LibreOffice Calc Guide 6.2 is now available - The Document Foundation Blog MIT Tech Review: FB研究所、微積分を数式のまま高速で解けるニューラルネット開発 「Thunderbird 78」への対応がキビしい！ アドオン開発者が“Kickstarter”で支援を呼びかける - やじうまの杜 - 窓の杜 If in について - 日本語 - Hugo Pandoc + minted でソースコード入りのきれいなPDFを作成した話 - Qiita Googleはなぜノーコード開発ツールのAppSheetを買収し、1年半前に正式版になったばかりのApp Makerを終了させるのか？ － Publickey ［ゲーム＆モダン JavaScript文法で2倍楽しい］グラフィックスプログラミング入門 ——リアルタイムに動く画面を描く。プログラマー直伝の基本：書籍案内｜技術評論社 ジャーナリストを黙らせるために悪用される\u0026quot;曖昧な\u0026quot;コンピュータ犯罪法 | P2Pとかその辺のお話R 2020年1月29日ニュース「フィリピンで雷を観測して極端気象を予測 超小型衛星と地上局を連動、北大など」 | SciencePortal もう不要ならWindows 7をオープンソース化しろ！ ～フリーソフトウェア財団の募る署名が目標を達成 - やじうまの杜 - 窓の杜 Thunderbird’s New Home | The Thunderbird Blog  「Thunderbird」プロジェクトがMozilla財団の完全子会社MZLA Technologiesへ移管される - 窓の杜   2020年1月31日ニュース「『新型肺炎は世界的な緊急事態』とWHO 日本では無症状感染者の出現で新たな局面に」 | SciencePortal Googleがセキュリティキーを自作可能になるオープンソースプロジェクト「OpenSK」を開始 - GIGAZINE  "
    },
    {
      "title": "gpgpdump v0.7.1 をリリースした",
      "section": "release",
      "description": "変更点は大きく2つ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/01/gpgpdump-v0_7_1-is-released/",
      "published": "2020-01-31T13:49:01+00:00",
      "update": "2020-01-31T13:49:19+00:00",
      "content": "OpenPGP パケットの内容を可視化する gpgpdump の v0.7.1 をリリースした。\n Release v0.7.0 · spiegel-im-spiegel/gpgpdump · GitHub Release v0.7.1 · spiegel-im-spiegel/gpgpdump · GitHub  いや，すまん。 v0.7.0 をリリースしてすぐ不備に気付いて v0.7.1 でリリースし直したのよ。\n変更点は大きく2つ。\nひとつは RFC 4880bis で追加された署名サブパケット Sub 37 (Attested Certifications) に対応したこと。 これに伴い起動オプションに -c (--cert) を追加した。 このオプションを付けて起動すると sub37 の内容を16進数ダンプで表示する。 まぁ，今のところ具体的な実装がないので試しようがないんだけどね。\nもうひとつは Literal Data Packet (Tag 11) におけるタイムスタンプについて。 実は pgpdump/issues/28 に\nRFC 4880 states the following: “A four-octet number that indicates a date associated with the literal data. Commonly, the date might be the modification date of a file, or the time the packet was created, or a zero that indicates no specific time.\u0026quot;; I assume there’s no way to distinguish between an actual file creation date vs. the packet creation date, so the label should be open to both interpretations, I guess. via Potential Confusing Output in \u0026#34;Literal Data Packet\u0026#34; Dump  とあって「なるほど」と思ったのだ。 新しいバージョンの gpgpdump では Literal Data Packet は\n$ gpgpdump -f testdata/comp-sig.asc --indent 2 -l -u Compressed Data Packet (tag 8) (149 bytes) Compression Algorithm: ZIP \u0026lt;RFC1951\u0026gt; (comp 1) Compressed data (148 bytes) One-Pass Signature Packet (tag 4) (13 bytes) Version: 3 (current) Signiture Type: Signature of a binary document (0x00) Hash Algorithm: SHA2-256 (hash 8) Public-key Algorithm: DSA (Digital Signature Algorithm) (pub 17) Key ID: 0xb4da3bae7e20b81c Encrypted session key: other than one pass signature (flag 0x01) Literal Data Packet (tag 11) (19 bytes) Literal data format: b (binary) File name (0 byte) Creation time: 2017-11-25T06:29:56Z Literal data (13 bytes) 48 65 6c 6c 6f 20 77 6f 72 6c 64 0d 0a  Signature Packet (tag 2) (117 bytes) Version: 4 (current) Signiture Type: Signature of a binary document (0x00) Public-key Algorithm: DSA (Digital Signature Algorithm) (pub 17) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (29 bytes) Issuer Fingerprint (sub 33) (21 bytes) Version: 4 (need 20 octets length) Fingerprint (20 bytes) 1b 52 02 db 4a 3e c7 76 f1 e0 ad 18 b4 da 3b ae 7e 20 b8 1c Signature Creation Time (sub 2): 2017-11-25T06:29:56Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0xb4da3bae7e20b81c Hash left 2 bytes 73 3c DSA value r (256 bits) DSA value s (255 bits) のように展開される。\nあとは，まぁ，細々とした修正をしている。\nブックマーク  OpenPGP パケットを可視化する gpgpdump  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 1.13.7 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は2件のセキュリティ・アップデートを含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/01/go-1_13_7-is-released/",
      "published": "2020-01-29T06:21:25+00:00",
      "update": "2020-01-29T06:35:35+00:00",
      "content": "先週の予告どおり Go 1.13.7 がリリースされた。\n [security] Go 1.13.7 and Go 1.12.16 are released - Google group  2件のセキュリティ・アップデートを含んでいる。\n【CVE-2020-0601】 X.509 certificate validation bypass on Windows 10 A Windows vulnerability allows attackers to spoof valid certificate chains when the system root store is in use. These releases include a mitigation for Go applications, but it’s strongly recommended that affected users install the Windows security update to protect their system.\nThis issue is CVE-2020-0601 and Go issue golang.org/issue/36834. via [security] Go 1.13.7 and Go 1.12.16 are released  と書かれている通り，今回の Go 側の措置は「低減（mitigation）」に過ぎないので，必ず Windows Update を適用すること。 Win7 ユーザはとっとと Win10 に乗り換えるか有償サポートを受けるか Windows を捨てるかしましょう。\nなお CVE-2020-0601 自体の CVSS 基本評価値は以下の通りでスコアは 8.1 (深刻度：重要1)。\n   基本評価基準 評価値     攻撃元区分 ネットワーク   攻撃条件の複雑さ 低   必要な特権レベル 不要   ユーザ関与レベル 要   スコープ 変更なし   機密性への影響 高   完全性への影響 高   可用性への影響 なし    CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N  【CVE-2020-7919】 Panic in crypto/x509 certificate parsing and golang.org/x/crypto/cryptobyte On 32-bit architectures, a malformed input to crypto/x509 or the ASN.1 parsing functions of golang.org/x/crypto/cryptobyte can lead to a panic. The malformed certificate can be delivered via a crypto/tls connection to a client, or to a server that accepts client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected.\nThanks to Project Wycheproof for providing the test cases that led to the discovery of this issue.\nThe issue is CVE-2020-7919 and Go issue golang.org/issue/36837.\nThis is also fixed in version v0.0.0-20200124225646-8b5121be2f68 of golang.org/x/crypto/cryptobyte. via [security] Go 1.13.7 and Go 1.12.16 are released  Go に限らず，今後32ビット・アーキテクチャにおける不備は増えていくんだろうねぇ。\n例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.13.7.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.13.7.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.13.7.linux-amd64.tar.gz $ sudo mv go go1.13.7 $ sudo ln -s go1.13.7 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.13.7 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   CVSSv3 ではスコア7.0以上なら速やかな対応が求められる。アップデートは計画的に（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "プライバシーなどク◯喰らえ",
      "section": "remark",
      "description": "市場は個人のプライバシーになど鼻くそほどの価値もおいてない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/privacy/",
      "published": "2020-01-29T05:45:42+00:00",
      "update": "2020-01-29T05:49:17+00:00",
      "content": "（タイトルは釣りです）\nこの辺の話はもっとじっくり考えたいので，今回は簡単に引用だけ。\nThe point is that it doesn\u0026rsquo;t matter which technology is used to identify people. That there currently is no comprehensive database of heartbeats or gaits doesn\u0026rsquo;t make the technologies that gather them any less effective. And most of the time, it doesn\u0026rsquo;t matter if identification isn\u0026rsquo;t tied to a real name. What\u0026rsquo;s important is that we can be consistently identified over time. We might be completely anonymous in a system that uses unique cookies to track us as we browse the Internet, but the same process of correlation and discrimination still occurs. It\u0026rsquo;s the same with faces; we can be tracked as we move around a store or shopping mall, even if that tracking isn\u0026rsquo;t tied to a specific name. And that anonymity is fragile: If we ever order something online with a credit card, or purchase something with a credit card in a store, then suddenly our real names are attached to what was anonymous tracking information. via Modern Mass Surveillance: Identify, Correlate, Discriminate - Schneier on Security  以前に Twitter で呟いたが\n市場が遵守するのは（日本では）個人情報保護法であってプライバシーではない。これは欧州のGDPRでも同じこと。市場は個人のプライバシーになど（口先はともかく）鼻くそほどの価値もおいてない https://t.co/X3qwB2IcNu\n\u0026mdash; Der Spiegel im Spiegel (@spiegel_2007) December 26, 2019  のである。\n参考図書  超監視社会 ブルース・シュナイアー (著), 池村 千秋 (翻訳) 草思社 2016-12-13 (Release 2017-02-03) Kindle版 B01MZGVHOA (ASIN)  実は積ん読のまま読んでない。そろそろちゃんと最後まで読まないと。\nreviewed by Spiegel on 2019-03-23 (powered by PA-APIv5)\n "
    },
    {
      "title": "go-homedir はもう要らない",
      "section": "golang",
      "description": "もし使っているなら標準パッケージに代替できないか検討することをオススメしたい。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/no-need-go-homedir/",
      "published": "2020-01-26T12:48:22+00:00",
      "update": "2020-01-26T12:48:52+00:00",
      "content": "Shimane.go#03 の LT に\n GoのMakefileとgo.modを調べてみた  というのがあって，これは GitHub の公開リポジトリから go.mod ファイルを探して使われているパッケージを数え上げてランキングにするという非常に面白い内容だったのだが，この中で mitchellh/go-homedir が割と使われているのが気になったので，記事にしてみる。\nmitchellh/go-homedir はプラットフォーム非依存でユーザのホーム・ディレクトリを取得するパッケージである。\nもともとホーム・ディレクトリを取得する手段として\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/user\u0026#34; ) func main() { u, err := user.Current() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(u.HomeDir) } みたいな感じで標準の os/user パッケージが用意されているが，このパッケージは pure Go ではないためユーザの間で微妙に評判が悪いのだ。 この不満を解消する手段として pure Go 実装である mitchellh/go-homedir が使われ続けた経緯がある。\nしかし，実は Go 1.12 から os.UserHomeDir() 関数が pure Go で実装されたため上述のパッケージは（少なくともホーム・ディレクトリを取得する手段としては）不要になった。\nこんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func main() { home, err := os.UserHomeDir() if err != nil { fmt.Fprintln(os.Stderr, err) return } fmt.Println(home) } もし mitchellh/go-homedir パッケージを使っているなら os.UserHomeDir() 関数で代替できないか検討することをオススメしたい。\n設定ファイル格納ディレクトリの取得 ところで，『改訂2版 みんなのGo言語』の2.8章では設定ファイルの置き場所について解説されている。 特に UNIX 系のプラットフォームでは XDG Base Directory の仕様に準拠した構成が求められることが多い。 たとえば my-app の設定ファイル config.json は\n$HOME/.config/my-app/config.json に置く，という感じ。\nGo 1.13 では os.UserConfigDir() 関数が追加され，設定ファイルのパスの組み立てが簡単になった。 『改訂2版 みんなのGo言語』で書かれているような条件分けは，もはや不要である。\nこんな感じ。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;path/filepath\u0026#34; ) func main() { conf, err := os.UserConfigDir() if err != nil { fmt.Fprintln(os.Stderr, err) } fmt.Println(filepath.Join(conf, \u0026#34;my-app\u0026#34;, \u0026#34;config.json\u0026#34;)) } ちなみに，このコードを “The Go Playground” 上で実行すると\nneither $XDG_CONFIG_HOME nor $HOME are defined と怒られる（笑）\nというわけで， Go 言語は日々進歩してるんだよ，というお話でした。\nブックマーク  Go 言語の環境変数管理 Go 言語用 CLI プログラミング支援パッケージ  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n  改訂2版 みんなのGo言語 松木 雅幸 (著), mattn (著), 藤原 俊一郎 (著), 中島 大一 (著), 上田 拓也 (著), 牧 大輔 (著), 鈴木 健太 (著) 技術評論社 2019-08-01 (Release 2019-08-01) Kindle版 B07VPSXF6N (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  改訂2版の目玉は7章の「データベースの扱い方」が追加されたことだろう。他の章では，大まかな構成は1版と同じだが細かい部分が変わっていて Go 1.12 への言及まであるのには驚いた。\nreviewed by Spiegel on 2019-08-12 (powered by PA-APIv5)\n "
    },
    {
      "title": "2020-01-26 のブックマーク",
      "section": "bookmarks",
      "description": "「Clearview AI and Facial Recognition」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/01/26-bookmarks/",
      "published": "2020-01-26T08:29:19+00:00",
      "update": "2020-01-29T05:22:17+00:00",
      "content": "リリース情報  「Wine 5.0」が正式リリース ～マルチモニター環境と「Vulkan 1.1」をサポート - 窓の杜 Improved base templates, and faster! | Hugo Hugo 0.63.1: A couple of Bug Fixes | Hugo  セキュリティ＆プライバシー関連  ログ消去もされていた三菱電機の不正アクセスについてまとめてみた - piyolog 標的型攻撃で悪用されたInternet Explorerの未修正の脆弱性CVE-2020-0674についてまとめてみた - piyolog Clearview AI and Facial Recognition - Schneier on Security  ブログ: Clearview AIと顔認識   SIM Hijacking - Schneier on Security MIT Tech Review: EU、顔認識技術の一時使用禁止を検討  グーグルとMS、欧州での顔認識技術の一時利用禁止の議論めぐり異なる見解 - ZDNet Japan   Half a Million IoT Device Passwords Published - Schneier on Security Amazon CEOのiPhoneハッキング疑惑についてまとめてみた - piyolog  Technical Report of the Bezos Phone Hack - Schneier on Security    天文関連  ニュース - アルマ望遠鏡がとらえたベテルギウス - アルマ望遠鏡 双曲線軌道を描く天体の起源―恒星間天体か？それともオールトの雲からか？― | 国立天文台(NAOJ) ニュース - 彗星と星形成領域にリンを含む分子を検出 －アルマ望遠鏡と彗星探査機ロゼッタの協働 - アルマ望遠鏡 極・宇宙を解く: 現代天文学演習 | 福江 純, 沢 武文, 高橋真聡 |本 | 通販 | Amazon  Linux または Ubuntu に関する話題  Ubuntu 19.10 その103 - Snap Storeからインストール可能な動画編集ソフト6選 - kledgeb  その他  MIT Tech Review: 加速する「原発離れ」、中国がとどめを刺す可能性 ユーザーエージェント（UA）文字列は時代遅れ？ ～「Google Chrome」で凍結・非推奨に - やじうまの杜 - 窓の杜  User-Agent Client Hints   InstagramがついにTikTokに敗北を認める | TechCrunch Japan aozorablog » 青空文庫 2018年-2019年の年間アクセス増率分析 「MariaDB Platform X4」正式リリース。OLTPとOLAP統合をさらに発展、Amazon S3などのオブジェクトストレージにカラム型データベースを保存 － Publickey MIT Tech Review: 「ほぼ消えた」はずの強力な温室効果ガス、過去最高を記録 The Documentation Team announces the Math Guide 6.4 - The Document Foundation Blog ODF 1.3 approved as OASIS Committee Specification - The Document Foundation Blog  ODF 1.3、OASIS委員会の標準として承認 - LibreOffice日本語チームBlog   Exclusive: Apple dropped plan for encrypting backups after FBI complained - sources - Reuters Addressing 2019  ブログ: 2019年のアドレッシング    "
    },
    {
      "title": "CVSS v3.1",
      "section": "remark",
      "description": "調べてみたら 3.1 って2019年6月にリリースされてたんだねぇ。 半年以上前の話だよ。 感度低いなぁ orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/cvss-v3_1/",
      "published": "2020-01-26T08:20:03+00:00",
      "update": "2020-01-26T08:21:08+00:00",
      "content": "前回の記事を書いてて気がついたのだが CVSSv3 のバージョンが 3.1 に上がってるぢゃん。\nたとえば CVE-2020-0601 の CVSS ベクタは\n CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N  の2つが用意されている。\n調べてみたら 3.1 って2019年6月にリリースされてたんだねぇ。 半年以上前の話だよ。 感度低いなぁ，私 orz\n3.0 と 3.1 の仕様は以下のリンクから見れる。\n CVSS v3.0 Specification Document CVSS v3.1 Specification Document  差分情報がないのでひっじょーに分かりにくいのだが1，各評価基準の項目と値に変更はなく，スコア算出式のみ変更になっているようだ。 しかも変更されているのは環境評価基準（Environmental Metrics）だけのようなので，私達がよく見る基本評価基準（Base Metrics）は変更なしと見てよさそうだ。\nなので上述の CVSS ベクタのスコアはいずれも 8.1 で深刻度（Severity Rating）も「重要（High）」となる。\n実は Go 言語で CVSS のパッケージを作って公開しているのだが\n spiegel-im-spiegel/go-cvss: Common Vulnerability Scoring System (CVSS) Version 3  基本評価基準しか実装してないんで大っぴらにしていない。 仕事で使いそうなら続きを作り込もうかと思っていたのだが，職業エンジニア自体が無期休業中だからねぇ（笑）\nなお spiegel-im-spiegel/go-cvss については，一応 v3.1 のベクタも受け入れるようにした。\nブックマーク   共通脆弱性評価システムCVSS v3概説：IPA 独立行政法人 情報処理推進機構 : v3.1 に対応していないように見えるのだが，やる気がないのかな？\n  JVN が CVSSv3 による脆弱性評価を開始\n    少なくとも技術文書をワープロで書くのは止めてほしいのだが。最終出力は PDF でも構わないが（PDF で出力するなら PDF/A で）， Markdown でも AsciiDoc でも Org-mode でもいいから，入力はプレイン・テキストで管理して欲しい。したら簡単に差分が取れるでしょ。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.13.7 リリース予告と CVE-2020-0601",
      "section": "remark",
      "description": "来週1月28日（日本時間では1月29日かな）に Go 1.13.7 のリリースがあるようだ（予定は未定）。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/01/pre-announcement-of-go-1_13_7/",
      "published": "2020-01-25T07:46:13+00:00",
      "update": "2020-01-29T06:35:35+00:00",
      "content": "来週1月28日（日本時間では1月29日かな）に Go 1.13.7 のリリースがあるようだ（予定は未定）。\n [security] Go 1.12.16 and Go 1.13.7 pre-announcement - Google group  Go 1.13.7 にはセキュリティ・アップデートが含まれる。\nThese are minor releases that include two security fixes. One mitigates the CVE-2020-0601 certificate verification bypass on Windows. The other affects only 32-bit architectures. via Go 1.12.16 and Go 1.13.7 pre-announcement  CVE-2020-0601 は Windows CryptoAPI の不備で楕円曲線暗号（ECC）を使った証明書の検証がバイパスされてしまうというもの。 これによって証明書の偽装ができてしまう。 あとは分かるね。\n CVE-2020-0601 | Windows CryptoAPI Spoofing Vulnerability  CVSSv3 の評価は以下の通り。\n   基本評価基準 評価値     攻撃元区分 ネットワーク   攻撃条件の複雑さ 低   必要な特権レベル 不要   ユーザ関与レベル 要   スコープ 変更なし   機密性への影響 高   完全性への影響 高   可用性への影響 なし    CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N  スコアは 8.1 (深刻度：重要)1。\nただし，この脆弱性は1月の Windows Update で修正されている筈である。 つか，私はもう関係ないので完全にスルーしていた（笑）\n January 2020 Security Updates: CVE-2020-0601 - Microsoft Security Response Center  今回の CVE-2020-0601 の特徴は NSA が絡んでいる点である。\n Patch Critical Cryptographic Vulnerability in Microsoft Windows Clients and Servers   NSA の思惑は分からない。 しかし\nShe did not answer when asked how long ago the NSA discovered the vulnerability. She said that this is not the first time the NSA sent Microsoft a vulnerability to fix, but it was the first time it has publicly taken credit for the discovery. via Critical Windows Vulnerability Discovered by NSA - Schneier on Security  とある通り（どこぞの馬鹿メディアが言ってたみたいな）別に NSA の「お手柄」でもなんでもなく，政治的な思惑があって色々と天秤にかけた結果「公表」したということだろう。 まっ，国家の諜報機関なのだから当たり前だが（笑）\nというわけで，自前で防衛手段を持つというのは悪い話ではない。\nブックマーク  Critical Windows Vulnerability Discovered by NSA - Schneier on Security Windowsの暗号化機能に致命的な脆弱性、証明書偽装の恐れ ～米国家安全保障局が警告 - 窓の杜  参考図書  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  イミテーション・ゲーム／エニグマと天才数学者の秘密(字幕版) ベネディクト・カンバーバッチ (出演), キーラ・ナイトレイ (出演), マシュー・グード (出演), ロリー・キニア (出演), モルテン・ティルドゥム (監督), グラハム・ムーア (Writer)  (Release 2015-10-02) Prime Video B015SAFU42 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  主人公であるアラン・チューリングは今もなお「天才」と称される数学者であり，「コンピュータの父」と呼ばれるほどの偉人である。そしてチューリングの偉業のひとつが，旧ナチス・ドイツの暗号機械「エニグマ」の解読である。作品はそのエニグマの解読を主軸に物語を展開していく。感想はこちら。\nreviewed by Spiegel on 2015-04-19 (powered by PA-APIv5)\n   CVSSv3 ではスコア7.0以上なら速やかな対応が求められる。アップデートは計画的に（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
