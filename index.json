{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "悪意のコードを含む多数の分岐リポジトリが見つかった話",
      "section": "remark",
      "description": "今回の件は spam の一種とみなすこともできる",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/08/malicious-code-in-many-forked-repositories/",
      "published": "2022-08-03T23:12:52+00:00",
      "update": "2022-08-04T10:37:19+00:00",
      "content": "2022-08-03 頃の Twitter TL でちょっとした騒ぎを見かけたのだが，詳細記事が出たらしい。\n35,000 code repos not hacked—but clones flood GitHub to serve malware 最初は各リポジトリに悪意のコードがねじ込まれたのか？ とリポジトリ・アクセスの認証周りを疑ったが，実はそうではなく\nRather, the thousands of backdoored projects are copies (forks or clones) of legitimate projects purportedly made by threat actors to push malware. via 35,000 code repos not hacked—but clones flood GitHub to serve malware ということらしい。 GitHub の公式 tweet にも\nGitHub is investigating the Tweet published Wed, Aug. 3, 2022:\n* No repositories were compromised\n* Malicious code was posted to cloned repositories, not the repositories themselves\n* The clones were quarantined and there was no evident compromise of GitHub or maintainer accounts\n\u0026mdash; GitHub Security (@GitHubSecurity) August 3, 2022 とあり，ひと安心といったところ。\n知らない人のために一応解説しておくと GitHub には pull request という仕組みがあり，他者のリポジトリにコードを貢献したい場合に自身のリポジトリに分岐（fork）させた上でコードを変更・追加し，そのコードを対象のリポジトリにマージするよう提案を行うことができる。 提案を受けた側は，そのコードのレビューを行った上で明示的な操作でコードを受け入れることができる。 もちろんダメなら拒否もできる。\nPull request は GitHub アカウントを持つユーザなら誰でも可能であり，その過程で悪意のコードを忍ばせることは形式上は可能である。 まぁ，普通は「そういう PR はレビューで拒否しましょうね」となるだろうし，一度そんなコードを送りつけた相手を二度と信用することはないだろう。 なので今回の件は spam の一種とみなすこともできる。 実際，アホみたいな数だしね。\n気をつける点があるとすれば「悪意の PR」を送りつけるために作った分岐リポジトリのコードをうっかり取り込んでしまう場合だろう。 最初に紹介した記事では\nAs a best practice, remember to consume software from the official project repos and watch out for potential typosquats or repository forks/clones that may appear identical to the original project but hide malware. via 35,000 code repos not hacked—but clones flood GitHub to serve malware と述べている。 言われんでも（笑）\nそれに続けて\nOpen source code commits signed with GPG keys of authentic project authors are one way of verifying the authenticity of code. via 35,000 code repos not hacked—but clones flood GitHub to serve malware と書かれているが，ぶっちゃけプロジェクトの外側にいる人から見てコミットに OpenPGP 署名があることは大した保証にはならない。 この辺は以前書いた拙文を参考にしてほしい。\nじゃあ git commit で OpenPGP 署名を付与することにどんな意義があるかというと，それはチーム運営で威力を発揮する。 つまり公開鍵や電子署名で「ユーザーの身元を保証」するのではなく「身元の保証されたユーザ」同士で鍵と電子署名を運用するのである。 これでチーム以外からのなりすまし commit を検知（防止ではない）しやすくなる。 OpenPGP の電子署名は「ユーザーの身元を保証し」ないより オープンソース・プロジェクトであれば pull request を受け付けるメンテナの技量と判断が試されるところだろう。\n参考図書 セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n信頼と裏切りの社会 ブルース・シュナイアー (著), 山形 浩生 (翻訳) NTT出版 2013-12-24 単行本（ソフトカバー） 4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 社会における「信頼」とは。\nreviewed by Spiegel on 2015-11-28 (powered by PA-APIv5)\n"
    },
    {
      "title": "Go 1.19 で os/exec パッケージの挙動が変わった話",
      "section": "golang",
      "description": "Windows 環境でコマンドを起動する際の脆弱性の回避",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/exec-package-in-go119/",
      "published": "2022-08-03T12:28:36+00:00",
      "update": "2022-08-04T12:52:36+00:00",
      "content": "Go 1.19 のリリースノートを眺めてみると\nCommand and LookPath no longer allow results from a PATH search to be found relative to the current directory. This removes a common source of security problems but may also break existing programs that depend on using, say, exec.Command(\u0026quot;prog\u0026quot;) to run a binary named prog (or, on Windows, prog.exe) in the current directory. See the os/exec package documentation for information about how best to update such programs. via Go 1.19 Release Notes - The Go Programming Language とある。 さっそく試してみよう。\nまず Windows 環境で gpgpdump.exe コマンドを PATH で指定されたフォルダ以外，具体的には以下のソースファイルと同じフォルダに置く。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os/exec\u0026#34; ) func main() { cmd := \u0026#34;gpgpdump.exe\u0026#34; out, err := exec.Command(cmd, \u0026#34;version\u0026#34;).CombinedOutput() if err != nil { fmt.Println(err) return } fmt.Printf(\u0026#34;output by %v:\\n%v\\n\u0026#34;, cmd, string(out)) } これを Go 1.19 コンパイル環境下で実行すると\n\u0026gt; go run sample.go exec: \u0026#34;gpgpdump.exe\u0026#34;: cannot run executable found relative to current directory 「カレントディレクトリに指定の実行ファイルあるけど起動しちゃらん（←超意訳，出雲弁）」とエラーになった。\nWindows ではパス指定なしでコマンドを起動する際に，カレントフォルダに同名の実行ファイルが存在すると優先的にそれを起動してしまう。 Go 標準の os/exec パッケージもこの挙動に合わせていたのだが，2020年の CVE-2020-27955 で問題になった。 この挙動を悪用して悪意のコマンドを実行される可能性があるというわけだ。\nこの脆弱性を回避するために，様々な試行錯誤が行われたが Go 1.19 の改修が決定打になるだろう。 カレントフォルダにある同名の実行ファイルを無視するのではなく，エラーとして「起動させない」というのがポイント。\nなお，今まで通りパスなしのコマンド指定時にカレントフォルダの実行ファイルを起動したいなら exec.ErrDot エラーを明示的に潰すことで実現できる。 こんな感じ。\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os/exec\u0026#34; ) func main() { cmd := exec.Command(\u0026#34;gpgpdump.exe\u0026#34;, \u0026#34;version\u0026#34;) if cmd.Err != nil { fmt.Println(cmd.Err) if !errors.Is(cmd.Err, exec.ErrDot) { return } cmd.Err = nil } out, err := cmd.CombinedOutput() if err != nil { fmt.Println(err) return } fmt.Printf(\u0026#34;output by %v:\\n%v\\n\u0026#34;, cmd, string(out)) } これを実行すると\n\u0026gt; go run sample2.go exec: \u0026#34;gpgpdump.exe\u0026#34;: cannot run executable found relative to current directory output by .\\gpgpdump.exe version: gpgpdump v0.14.0 repository: https://github.com/goark/gpgpdump となる。 エラーを無視してカレントディレクトリ . を付加した状態で実行されているのがお分かりだろうか。\nちなみに，同じコードを Windows 以外の環境で実行すると（.exe の拡張子は外してね）\n$ go run sample2b.go exec: \u0026#34;gpgpdump\u0026#34;: executable file not found in $PATH と PATH 上に実行ファイルが見つからない旨の普通のエラーが表示される。 これでアプリケーション側は OS ごとに処理を分ける必要がなくなったわけだ。 めでたい！\nところで Windows には NoDefaultCurrentDirectoryInExePath なる環境変数があるそうで，これが有効になっているとパスなしのコマンド指定時にカレントフォルダの同名実行ファイルを無視するらしい。\nで os/exec パッケージは律儀にこの環境変数にも対応している。\nOn Windows, Command and LookPath now respect the NoDefaultCurrentDirectoryInExePath environment variable, making it possible to disable the default implicit search of “.” in PATH lookups on Windows systems. via Go 1.19 Release Notes - The Go Programming Language 標準パッケージのソースコード os/exec/lp_windows.go を眺めると\n// LookPath searches for an executable named file in the // directories named by the PATH environment variable. // LookPath also uses PATHEXT environment variable to match // a suitable candidate. // If file contains a slash, it is tried directly and the PATH is not consulted. // Otherwise, on success, the result is an absolute path. // // In older versions of Go, LookPath could return a path relative to the current directory. // As of Go 1.19, LookPath will instead return that path along with an error satisfying // errors.Is(err, ErrDot). See the package documentation for more details. func LookPath(file string) (string, error) { var exts []string x := os.Getenv(`PATHEXT`) if x != \u0026#34;\u0026#34; { for _, e := range strings.Split(strings.ToLower(x), `;`) { if e == \u0026#34;\u0026#34; { continue } if e[0] != \u0026#39;.\u0026#39; { e = \u0026#34;.\u0026#34; + e } exts = append(exts, e) } } else { exts = []string{\u0026#34;.com\u0026#34;, \u0026#34;.exe\u0026#34;, \u0026#34;.bat\u0026#34;, \u0026#34;.cmd\u0026#34;} } if strings.ContainsAny(file, `:\\/`) { f, err := findExecutable(file, exts) if err == nil { return f, nil } return \u0026#34;\u0026#34;, \u0026amp;Error{file, err} } // On Windows, creating the NoDefaultCurrentDirectoryInExePath // environment variable (with any value or no value!) signals that // path lookups should skip the current directory. // In theory we are supposed to call NeedCurrentDirectoryForExePathW // \u0026#34;as the registry location of this environment variable can change\u0026#34; // but that seems exceedingly unlikely: it would break all users who // have configured their environment this way! // https://docs.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-needcurrentdirectoryforexepathw // See also go.dev/issue/43947. var ( dotf string dotErr error ) if _, found := syscall.Getenv(\u0026#34;NoDefaultCurrentDirectoryInExePath\u0026#34;); !found { if f, err := findExecutable(filepath.Join(\u0026#34;.\u0026#34;, file), exts); err == nil { if godebug.Get(\u0026#34;execerrdot\u0026#34;) == \u0026#34;0\u0026#34; { return f, nil } dotf, dotErr = f, \u0026amp;Error{file, ErrDot} } } path := os.Getenv(\u0026#34;path\u0026#34;) for _, dir := range filepath.SplitList(path) { if f, err := findExecutable(filepath.Join(dir, file), exts); err == nil { if dotErr != nil { // https://go.dev/issue/53536: if we resolved a relative path implicitly, // and it is the same executable that would be resolved from the explicit %PATH%, // prefer the explicit name for the executable (and, likely, no error) instead // of the equivalent implicit name with ErrDot. // // Otherwise, return the ErrDot for the implicit path as soon as we find // out that the explicit one doesn\u0026#39;t match. dotfi, dotfiErr := os.Lstat(dotf) fi, fiErr := os.Lstat(f) if dotfiErr != nil || fiErr != nil || !os.SameFile(dotfi, fi) { return dotf, dotErr } } if !filepath.IsAbs(f) \u0026amp;\u0026amp; godebug.Get(\u0026#34;execerrdot\u0026#34;) != \u0026#34;0\u0026#34; { return f, \u0026amp;Error{file, ErrDot} } return f, nil } } if dotErr != nil { return dotf, dotErr } return \u0026#34;\u0026#34;, \u0026amp;Error{file, ErrNotFound} } と NoDefaultCurrentDirectoryInExePath 環境変数がない場合だけカレントフォルダ . を付加してチェックしているのが分かる。 ご苦労さんなことである。\n少々姑息ではあるが，これを利用してカレントフォルダの同名実行ファイルを無視するよう構成することもできる。 こんな感じ。\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; ) func main() { os.Setenv(\u0026#34;NoDefaultCurrentDirectoryInExePath\u0026#34;, \u0026#34;1\u0026#34;) cmd := exec.Command(\u0026#34;gpgpdump.exe\u0026#34;, \u0026#34;version\u0026#34;) if cmd.Err != nil { fmt.Println(cmd.Err) if !errors.Is(cmd.Err, exec.ErrDot) { return } cmd.Err = nil } out, err := cmd.CombinedOutput() if err != nil { fmt.Println(err) return } fmt.Printf(\u0026#34;output by %v:\\n%v\\n\u0026#34;, cmd, string(out)) } これを実行すると\n$ go run sample3.go exec: \u0026#34;gpgpdump.exe\u0026#34;: executable file not found in %PATH% となる。 前のコードの実行結果で出力されるエラーメッセージの違いを確かめてほしい。 Windows 以外でこの環境変数が悪さをすることはないだろうから Linux 等と挙動を合わせたいなら，おまじない的にセットしておくのもいいかもしれない。\nやっぱ Windows は面倒くさいな（笑）\nブックマーク Go でサブプロセスを起動する際は LookPath に気をつけろ！ github.com/cli/safeexec パッケージを使った外部コマンドの安全な起動 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n"
    },
    {
      "title": "Go 1.19 がリリースされた",
      "section": "release",
      "description": "お盆過ぎに出ればいいかと油断してた（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/08/go-1_19-is-released/",
      "published": "2022-08-02T23:11:29+00:00",
      "update": "2022-08-02T23:12:22+00:00",
      "content": "続いて Go 1.19 リリースの話。 いや，マジで「お盆過ぎに出ればいいか」と完全に油断してたよ（笑）\nGo 1.19 is released Go 1.19 is released! - The Go Programming Language Go 1.19 Release Notes - The Go Programming Language ここ半年ほど Go から離れ気味だったので 1.19 については全く情報収集してなかった。 なので，後日追記することになるだろう。 とりあえずリリパには間に合ってよかったね。\nGo 1.19 リリースパーティ - connpass 例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.19.linux-amd64.tar.gz）を取ってきてインストールすることを強く推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.19.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.19.linux-amd64.tar.gz $ sudo mv go go1.19 $ sudo ln -s go1.19 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.19 linux/amd64 Windows は Scoop 経由で OK\nアップデートは計画的に。\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nエキスパートたちのGo言語　一流のコードから応用力を学ぶ Software Design plus 上田 拓也 (著), 青木 太郎 (著), 石山 将来 (著), 伊藤 雄貴 (著), 生沼 一公 (著), 鎌田 健史 (著), 上川 慶 (著), 狩野 達也 (著), 五嶋 壮晃 (著), 杉田 寿憲 (著), 田村 弘 (著), 十枝内 直樹 (著), 主森 理 (著), 福岡 秀一郎 (著), 三木 英斗 (著), 森 健太 (著), 森國 泰平 (著), 森本 望 (著), 山下 慶将 (著), 渡辺 雄也 (著) 技術評論社 2021-12-27 (Release 2021-12-27) Kindle版 B09P4PH63R (ASIN) 版元のデジタル版を購入。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\n実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 版元のデジタル版を購入。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\n詳解Go言語Webアプリケーション開発 清水陽一郎 (著) シーアンドアール研究所 2022-07-22 (Release 2022-07-22) Kindle版 B0B62K55SL (ASIN) 本の森.jp で PDF 版が買える。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-27 (powered by PA-APIv5)\nGo言語による分散サービス ―信頼性、拡張性、保守性の高いシステムの構築 Travis Jeffery (著), 柴田 芳樹 (翻訳) オライリージャパン 2022-08-03 単行本（ソフトカバー） 4873119979 (ASIN), 9784873119977 (EAN), 4873119979 (ISBN) 版元でデジタル版購入予定。読書会の課題図書。\nreviewed by Spiegel on 2022-07-27 (powered by PA-APIv5)\nデベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n"
    },
    {
      "title": "Go 1.18.5 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は1件の脆弱性修正を含んでいる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/08/go-1_18_5-is-released/",
      "published": "2022-08-02T22:57:41+00:00",
      "update": "2022-08-02T22:57:46+00:00",
      "content": "まだ先だろうと高をくくって更新をサボってたら Go 1.19 が出てるよ。 というわけで，まずは 1.18 系のセキュリティ・アップデートの記事からやっつける。\n[security] Go 1.18.5 and Go 1.17.13 are released 今回は1件の脆弱性修正を含んでいる。\ngo1.18.5 (released 2022-08-01) includes security fixes to the encoding/gob and math/big packages, as well as bug fixes to the compiler, the go command, the runtime, and the testing package. See the Go 1.18.5 milestone on our issue tracker for details. via Release History - The Go Programming Language CVE-2022-32189 encoding/gob \u0026amp; math/big: decoding big.Float and big.Rat can panic Decoding big.Float and big.Rat types can panic if the encoded message is too short. via Go 1.18.5 and Go 1.17.13 are released （以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.18.5.linux-amd64.tar.gz）を取ってきてインストールすることを強く推奨する。 以下は完全手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://go.dev/dl/go1.18.5.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.18.5.linux-amd64.tar.gz $ sudo mv go go1.18.5 $ sudo ln -s go1.18.5 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.18.5 linux/amd64 Windows は Scoop 経由で OK\nアップデートは計画的に。\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n"
    },
    {
      "title": "クラウドストレージのアカウント情報がクラウドストレージにある罠",
      "section": "remark",
      "description": "真夏のホラー",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/midsummer-horror/",
      "published": "2022-07-29T11:41:52+00:00",
      "update": "2022-07-29T12:11:51+00:00",
      "content": "久しぶりにぞんぞがさばる（出雲弁）記事を見た。\nある「パソコンの大先生」の死 – WirelessWire News 今回のお題 今回の条件は割とありがちではないだろうか。\nWindows パソコン1台のみ パスワード管理ツールあり ただし Windows 専用プロプライエタリ・ツール パスワード情報はクラウド・ストレージにバックアップあり ローカル NAS はなし この唯一のパソコンが故障して復旧不能となった場合にどうなるかという話。\nしかし、そのフリーウェアはWindows用のプロプライエタリソフトウエアのため、ワタシのスマホではデータを閲覧できません。それに気付いたのは、スマホで新しいPCを購入する手続きを進め、最後にクレジットカードの会員向けサービスのパスワードを聞かれ、途方に暮れたときです。これでは新しいPCが調達できないじゃないか！ ある「パソコンの大先生」の死より ぞんぞがさばる！\nNAS とクラウドストレージ 最近は「クラウドストレージがあるならローカルの NAS とかいらなくね？」という向きも多いようだ。\nでもクラウドストレージにアクセスするためにはアカウント情報が必要で，更に多要素認証を使うのであればその分だけ認証手段を確保しておく必要がある。 それをどこに保持しておくか。\n個人的にはローカルに NAS を置いておくのはまだ意味があると思う。 もっと言えばローカル NAS とクラウドストレージを連携できるならなおよし。\n秋 NAS は俺に喰わせろ！ 私もクラウドストレージは機密保持の観点からはあまり信用してない。 個人向けのクラウドストレージ・サービスの多くは他者と情報共有しやすいよう設計されているため「うっかり漏洩」してしまう可能性も排除できない。 法人向けならユーザごとに細かく権限を設定できるので逆に安心なんだけどね。\nそういう意味じゃ信用してないのはクラウドサービスではなくて自分自身か（笑）\nまぁ，クラウドストレージは「バックアップ用」と割り切って sensitive な情報については置かないようにするか暗号化するのがいいんだろうね。\nマルチプラットフォームは重要 今回のもうひとつのポイントはパスワード管理ツールが Windows 専用だったことだろう。 プロプライエタリなツールであることは今回のケースでは問題ではない。\n最近はセキュリティ企業も独自のパスワード管理ツールを出しているが，これがもし特定 OS 専用なら考え直したほうがいいかもしれない（実際のところは知らない）。\n私は昔から KeePass 派なのだが，最近は派生ツールである KeePassXC および Android 版の Keepass2Android を愛用している。\nKeePassXC Password Manager GitHub - keepassxreboot/keepassxc: KeePassXC is a cross-platform community-driven port of the Windows application “Keepass Password Safe”. Keepass2Android Password Safe - Apps on Google Play パスワードを紙に書くのは案外悪くない （特に同居人が居る場合は）管理に気を使う必要はあるが，パスワード情報を紙に書き出すというのは案外悪くないと思っている。 もちろん全て書き出す必要はなくて，いざというときに最低限必要な情報のみに厳選する。\n私の自宅環境はパソコン（Linux 機），NAS，スマホの3機構成でこれらが同時に使えなくなる事態は真面目に考えてなかったのだが，今回の記事を読んで，考えを改めた。\n起こる可能性のあることは，いつか実際に起こる（If it can happen, it will happen） マーフィーの法則より 作業記録は大事 上述のようにパスワードを紙に書き出すとしても，どのアカウント情報を書き出すべきかはよくよく検討しないといけない。 その一環としてスマホやパソコンのセットアップ時の作業記録を録っておくことをおすすめする。\n以下はスマホの機種変更した際の作業記録の概要。\nついカッとなって機種変した，反省はしない それを見れば必要な情報が分かるはず。 Android 機のセットアップには Google アカウントが絶対に必要とか。\n今回の記事を書かれた yomoyomo さんにはご愁傷さまとしか言いようがないが，私としてはこれを好機として自宅環境を見直すとしようか。\n参考 Synology NASキット 2ベイ DS220j クアッドコアCPU 512MBメモリ搭載 ライトユーザー向け 国内正規代理店品 電話サポート対応品 DiskStation Synology (Release 2020-03-12) Personal Computers B0855LMP81 (ASIN), 4537694279369 (EAN), 0846504003440 (EAN), 846504003440 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ドスパラで HDD 2基と3点セットで購入。家庭内 LAN で使うなら必要十分な性能。各種クラウド・ストレージ・サービスと連携可能。 Tailscale を含む各種 VPN と組み合わせることも可能。\nreviewed by Spiegel on 2021-10-26 (powered by PA-APIv5)\nWestern Digital ウエスタンデジタル 内蔵 HDD WD Red Plus NAS RAID (CMR) 3.5インチ WD40EFZX-EC 【国内正規代理店品】 ウエスタンデジタル(Western Digital) (Release 2021-02-05) Personal Computers B08V8LNR2H (ASIN), 4988755057738 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Synology DS220j と併せて購入。\nreviewed by Spiegel on 2021-10-26 (powered by PA-APIv5)\n"
    },
    {
      "title": "Blockchain/Bitcoin は何だったのか",
      "section": "remark",
      "description": "技術で社会は変えられない",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/blockchain/",
      "published": "2022-07-25T12:56:45+00:00",
      "update": "2022-07-28T10:29:23+00:00",
      "content": "Twitter で小耳に挟んだ話なのだが，某出版社から出る（出た）いわゆる Web3 本がかなり愉快な内容らしく，回収するとか何とか。 勿体ない。 論文とかなら出し直しもやむなしだろうが，その程度の本なら回収までしなくても「緊急改訂」とかでいいと思うのだが。 それも「歴史」だよ。 本を書いた方は後年黒歴史として悶絶してしまうかもしれないが（笑）\n私自身は NFT にも Web3 にも大して興味はないが，折角なので Blockchain/Bitcoin について色々と放言しておこう。 書籍出版で許されるんだから辺境のブログで書くくらい構わんじゃろ。\nこの記事については，いつも以上に内容の正しさを保証しません。 マジに受け取らないでね（予防線） 脱中央集権「社会」など来ない 「黄色矮星人は2人いれば力比べを始め，3人いれば派閥を作る1」\nBlockchain 技術を含むプロダクトについて語られるとき，必ずと言っていいほどよく出てくるフレーズが「非中央集権」あるいは「脱中央集権」である。\nしかし，考えてみてほしい。 そもそも「インターネット」は脱中央集権的な思想で設計されたものなのだ。\nもし今日のインターネットが実際にこの理論に近い状態であれば，メッシュネットワークは余計ものだったろう。 だがインターネットが当初の学術目的から踏み出して現在のような誰でも使える商業サービスになってから20年以上が経つうちに，そうした蓄積伝送の原理が果たす役割は，一貫して縮小していった。\nこの間，ネットワークに加わる新たなノードの圧倒的多数はISPを介してネットに接続する家庭や企業のコンピューターだった。 ISPの接続モデルでは，利用者のコンピューターはデータの中継はしない。 それはネットワークの端末，つまりデータの送受信だけを，常にISPのコンピューターを介して行うターミナル・ノードだ。 言い換えれば，インターネットの爆発的な成長はネットワーク地図に行き止まりのルートを増やしただけで，新たなルートを加えることはほとんどなかった。\nそしてISPなど大量の情報ルートを持つ者は，彼らがルートを提供している何百万ものノードを支配下におくこととなった。 これらのノードは，もしISPがダウンしたり，ネットから遮断されたりすると，その障害を回避する方法がない。 ISPはインターネットが停止しないようにするどころか，実効上は停止スイッチになってしまった。\n介入されないもうひとつのウェブより そして Blockchain/Bitcoin もインターネットと同じ末路を辿る。\nBitcoin でスーパーの醤油は買えない Bitcoin がシステムとして成立する条件は\n不特定多数が参加 全てのユーザが唯一の「台帳」の完全なコピーを持つ ユーザ同士の peer な接続 PoW への平等参加 あたりだろう。 これをぶち壊したのが「交換所」の存在である。\n最初の頃，私は Bitcoin を「デフレ型補完通貨」と定義していた。 補完通貨はゼロ年代に「地域通貨」と呼ばれていたことがある。 流行ったよねぇ，地域通貨（笑）\nまた Bitcoin は最終的な「総量」が決まっているため，必然的に「デフレ型」となる2。\nしかし実際には Bitcoin 自体は補完通貨にならなかった。 昔は Bitcoin で決済できる小売店とかあったと聞くが，今はそんなお店はないだろう。\nBitcoin を日常生活で使うためには法定通貨に「両替」する必要がある。 故に「交換所」の登場は必然だった。\nその結果なにが起こったかというと，交換所を利用する多くのユーザは上述の4つの条件を満たす player ではなくなってしまったのだ。 これは Bitcoin システム全体のアクターが hierarchical に構造化したことを意味する。\nインターネットが商業化された際に多くのユーザが ISP にぶら下がる「端末」になり下がり，インターネットに「参加」する player ではなくなった状態とまさに同じである。\nそれは「通貨」ではない さらに言えば，2018年の G20 ブエノスアイレス・サミットの首脳宣言で「暗号資産（crypto-assets）」という表現が出て以来「それら」は通貨ではなく資産として認知されるようになった。 こう考えると NFT (Non-Fungible Token) の登場は寧ろ必然だったと言えるだろう。 ぶっちゃけるなら「デジタル証券バブル」の台頭とでも言おうか（笑）\n日本政府が妙に Web3 や NFT を推しているのは「バブル時代よ，もう一度」という願いなのだろうか。\n技術で社会は変えられない 私自身は与しないが，「交換所」を中心とした hierarchical な構造化も「デジタル証券バブル」も批判するほどのものではない。 しかし，もし Blockchain/Bitcoin が「脱中央集権」的かつ国家から独立した「補完通貨」を目指していたとするなら，この結末は完全に失敗だったと言えるだろう。\n結局 Bitcoin などの Blockchain 実装を通じて分かったのは「計算機パワーと情報力の強いものが勝つ」という身も蓋もない話で，それは今までの暴力による民衆統治や経済力による市場支配と何ら変わらない。 そこを見ないで「脱中央集権」が云々とかヘソで茶が沸いてしまう。\nジャック・ドーシーの批判は、「Web3を所有するのはベンチャーキャピタルとその投資先の企業であってウェブユーザーではなく、結局は中央集権型のものに別のラベルを貼っただけ」と続き、Andreessen Horowitzの共同創業者マーク・アンドリーセンにTwitterでブロックされ、それを自慢するというダメなTwitter芸を見せるオチがつきました Web3の「魂」は何なのか？ – WirelessWire Newsより 「誰かがブロックチェーンで何かを解決できると言う場合、その人はその『何か』を理解していないので無視してかまわない（ウィーバーのブロックチェーンの鉄則）」 Web3の「魂」は何なのか？ – WirelessWire Newsより インターネットにしろ Blockchain/Bitcoin にしろ，脱中央集権的な「システム」を構築することはできるのだろう。 しかし私達が暮らすのは「社会」である。 社会が「脱中央集権」を望まないのであれば，土台がどうあれ，そこに到達することはない。\n私は「技術で社会は変えられない」と思っている。 社会を変えることができるとすれば，それはあくまでも「人」の行いである（道具・手段としての技術の意義はあると思うけど）。 インターネットや Blockchain/Bitcoin は奇しくも私のこの妄言を補強する事例となっている。\nブックマーク ĐApps：Web 3.0はどんなものか（ĐApps: What Web 3.0 Looks Like 日本語訳） ジョン・ハンケが語るWeb3、ティム・バーナーズ＝リーが懐疑的なブロックチェーン - YAMDAS現更新履歴 【夏休みの自由研究】そうだブロックチェーンを作ろう！ Letter in Support of Responsible Fintech Policy クリプト・Web3業界の誇大広告に踊らされてはならない：1500人超の科学者・エンジニア・技術者が米議会に警告 | p2ptk[.]org 反クリプト公開書簡に反論する【オピニオン】 | coindesk JAPAN | コインデスク・ジャパン 参考図書 グリゴリの捕縛 白田 秀彰 2001-11-26 (Release 2014-09-17) 青空文庫 4307 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30 (powered by aozorahack)\nもうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo (著) 達人出版会 2017-12-25 (Release 2019-03-02) デジタル書籍 infoshare2 (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; WirelessWire News 連載の書籍化。感想はこちら。祝 Kindle 化！\nreviewed by Spiegel on 2018-12-31\nマスタリング・イーサリアム ―スマートコントラクトとDAppの構築 Andreas M. Antonopoulos (著), Gavin Wood (著), 宇野 雅晴 (監修), 鳩貝 淳一郎 (監修), 中城 元臣 (監修), 落合 渉悟 (監修), 落合 庸介 (翻訳), 小林 泰男 (翻訳), 土屋 春樹 (翻訳), 祢津 誠晃 (翻訳), 平山 翔 (翻訳), 三津澤 サルバドール将司 (翻訳), 山口 和輝 (翻訳), 宇野 雅晴 (翻訳), 鳩貝 淳一郎 (翻訳) オライリージャパン 2019-11-30 単行本（ソフトカバー） 4873118964 (ASIN), 9784873118963 (EAN), 4873118964 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 噂の「Web3」の基礎学習のために版元からデジタル版を購入。最初の章で挫けそうになっている（笑）\nreviewed by Spiegel on 2022-07-27 (powered by PA-APIv5)\n「黄色矮星人は2人いれば力比べを始める」というのはSF作家の野尻抱介さんの著作でよく出てくるフレーズ（多分）。後半の「3人いれば派閥を作る」は誰が言ったか思い出せない。うろ覚え。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBitcoin の総量が決まっているという前提は2017年の hard fork で崩れた。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "strings.Title 関数は非推奨になった",
      "section": "golang",
      "description": "lint は用法・用量を守って正しく使いましょう",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/deprecated-strings-title/",
      "published": "2022-07-24T12:24:01+00:00",
      "update": "2022-07-24T22:58:28+00:00",
      "content": "たとえば，以下のコードがあるとする。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; ) func main() { msgs := []string{ \u0026#34;hello, world!\u0026#34;, \u0026#34;HELLO, WORLD!\u0026#34;, } for _, msg := range msgs { fmt.Println(msg, \u0026#34;-\u0026gt;\u0026#34;, strings.Title(msg)) } } これを実行すると\n$ go run sample1.go hello, world! -\u0026gt; Hello, World! HELLO, WORLD! -\u0026gt; HELLO, WORLD! と単語の先頭が大文字に変換される。\nこの strings.Title() 関数について Go 1.18 から\nThe Title function is now deprecated. It doesn\u0026rsquo;t handle Unicode punctuation and language-specific capitalization rules, and is superseded by the golang.org/x/text/cases package. via Go 1.18 Release Notes - The Go Programming Language という感じに非推奨になった。 なお，このコードを golangci-lint にかけると\n$ golangci-lint run sample1.go:14:26: SA1019: strings.Title has been deprecated since Go 1.18 and an alternative has been available since Go 1.0: The rule Title uses for word boundaries does not handle Unicode punctuation properly. Use golang.org/x/text/cases instead. (staticcheck) fmt.Println(msg, \u0026#34;-\u0026gt;\u0026#34;, strings.Title(msg)) ^ と言う感じに警告を出してくれる。 つか，この警告で気がついたんだけどね。 相変わらず lint に叱られっぱなしである orz\nちなみに似た関数名に strings.ToTitle() というのがあるが，これを使うと\n$ go run sample1b.go hello, world! -\u0026gt; HELLO, WORLD! HELLO, WORLD! -\u0026gt; HELLO, WORLD! という感じに全部大文字になる。 これって strings.ToUpper() と何が違うんか分からん（笑）\nさて， strings.Title() 関数を使う代わりに golang.org/x/text/cases を使えとあるようなので，早速コードを書き換えてみる。 こんな感じかな。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;golang.org/x/text/cases\u0026#34; \u0026#34;golang.org/x/text/language\u0026#34; ) func main() { msgs := []string{ \u0026#34;hello, world!\u0026#34;, \u0026#34;HELLO, WORLD!\u0026#34;, } for _, msg := range msgs { fmt.Println(msg, \u0026#34;-\u0026gt;\u0026#34;, cases.Title(language.Und).String(msg)) } } これを実行すると\n$ go run sample2.go hello, world! -\u0026gt; Hello, World! HELLO, WORLD! -\u0026gt; Hello, World! おっと！ 単語の2文字目以降が違うか。 じゃぁ，オプションをつけて\nfmt.Println(msg, \u0026#34;-\u0026gt;\u0026#34;, cases.Title(language.Und, cases.NoLower).String(msg)) とすればいいのかな。\n$ go run sample2b.go hello, world! -\u0026gt; Hello, World! HELLO, WORLD! -\u0026gt; HELLO, WORLD! よーし，うむうむ，よーし。\nlanguage.Und の部分は特定の言語（language.Japanese とか）を指定できるのだが，たとえば役物が絡む場合：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;golang.org/x/text/cases\u0026#34; \u0026#34;golang.org/x/text/language\u0026#34; ) func main() { msg := \u0026#34;\u0026#39;n\u0026#34; casers := []cases.Caser{ cases.Title(language.English), cases.Title(language.Dutch), } for _, caser := range casers { fmt.Println(msg, \u0026#34;-\u0026gt;\u0026#34;, caser.String(msg)) } } これを実行すると\n$ go run sample3.go \u0026#39;n -\u0026gt; \u0026#39;N \u0026#39;n -\u0026gt; \u0026#39;n という感じに言語によって違いが出るようだ？\nLint は用法・用量を守って正しく使いましょう 話は変わるが，「失敗」には大きく2つある。 「受動的失敗」と「能動的失敗」だ。 このフレーズは Bruce Schneier さんの『セキュリティはなぜやぶられたのか（Beyond Fear）』にセキュリティ用語として出てくる。\nセキュリティシステムの問題は大きく分けてふたつのパターンがある。 ひとつ目は攻撃に対する防御が失敗するもの。 （中略） とるべき対策が実行されない受動的な失敗である。 ふたつ目は間違ったときに対策を実行して防御が失敗するもの。 （中略） とるべき対策を実行したがゆえの能動的な失敗である。 『セキュリティはなぜやぶられたのか』p.77より 受動的失敗は批判の対象になりやすいが，受動的失敗を恐れるあまり能動的失敗に陥るというのもありがちなパターンである。\nいや Twitter の TL で golangci-lint をフルオプションで起動して山ほど警告が出てきても平気みたいな記述を見かけたので。 これって典型的な能動的失敗だよなぁ。 オオカミが来た！\nもとより lint のような静的コード解析は万能ではない。 なれば，より気にすべきなのは受動的失敗より能動的失敗である。\ngolangci-lint はオプション無しでもかなりの部分を網羅できる。 せいぜい gosec を追加するくらい。 まずはこれで警告が出ないことを目指した上で，プロダクトによって過不足があれば少しずつ調整していけばいいのだ。\nたとえば，拙作の gnkf は MD5 や SHA-1 のハッシュ値を出力する機能があるが gosec を含めて lint をかけると「弱いハッシュ関数を使うな（←超意訳）」みたいな警告が出てしまう。 そこで\n$ golangci-lint run --enable gosec --exclude \u0026#34;G501|G505\u0026#34; ./... のようにチェック対象を調整している。 仕事で使うならメンバ間で .golangci.yaml 等を使って設定を合わせておけばいいだろう。\nlint は用法・用量を守って正しく使いましょう。\nブックマーク 逆引き Goによる静的解析 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nセキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n"
    },
    {
      "title": "goark/pa-api パッケージで GetBrowseNodes オペレーションに対応した",
      "section": "golang",
      "description": "まぁ，使ってみてください。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/getbrowsenodes-with-paapiv5/",
      "published": "2022-07-18T07:01:46+00:00",
      "update": "2022-07-18T08:20:50+00:00",
      "content": "今更であるが，Amazon PA-APIv5 にアクセスするための自作パッケージ goark/pa-api は実はコードの半分以上が他人様の PR でできているのだが（感謝！），今回は GetBrowseNodes オペレーション追加をリクエストされまして\nEnable to get browse node Info · Issue #25 · goark/pa-api · GitHub たまには自分でコードを書こうと思い立ったのだった。 ちなみに GetBrowseNodes オペレーションの API 仕様は以下の通り。\nGetBrowseNodes · Product Advertising API 5.0 ここで browse node というのは構造化された商品カテゴリのようなものらしい。\nBrowse Nodes · Product Advertising API 5.0 goark/pa-api を使って browse node の情報を取得してみよう。 ちなみに PA-API アクセス用パラメータを以下に例示する。\nパラメータ名 値 マーケットプレイス www.amazon.co.jp アソシエイト・タグ mytag-20 アクセス・キー AKIAIOSFODNN7EXAMPLE シークレット・キー 1234567890 もちろん実際には使えないのでご安心を（笑） さっそくコードを書いてみる。\n//go:build run // +build run package main import ( \u0026#34;bytes\u0026#34; \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; paapi5 \u0026#34;github.com/goark/pa-api\u0026#34; \u0026#34;github.com/goark/pa-api/query\u0026#34; ) func main() { //Create client client := paapi5.New( paapi5.WithMarketplace(paapi5.LocaleJapan), ).CreateClient( \u0026#34;mytag-20\u0026#34;, \u0026#34;AKIAIOSFODNN7EXAMPLE\u0026#34;, \u0026#34;1234567890\u0026#34;, ) //Make query q := query.NewGetBrowseNodes( client.Marketplace(), client.PartnerTag(), client.PartnerType(), ).BrowseNodeIds([]string{\u0026#34;2291970051\u0026#34;}) //Requet and response body, err := client.RequestContext(context.Background(), q) if err != nil { fmt.Printf(\u0026#34;%+v\\n\u0026#34;, err) return } io.Copy(os.Stdout, bytes.NewReader(body)) } これを実行してみよう。\n$ go run sample1.go | jq . { \u0026#34;BrowseNodesResult\u0026#34;: { \u0026#34;BrowseNodes\u0026#34;: [ { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;産業研究\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;産業研究\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291970051\u0026#34;, \u0026#34;IsRoot\u0026#34;: false } ] } } これで browse node ID が 2291970051 の情報が取得する。 さらに\n//Make query q := query.NewGetBrowseNodes( client.Marketplace(), client.PartnerTag(), client.PartnerType(), ).BrowseNodeIds([]string{\u0026#34;2291970051\u0026#34;}).EnableBrowseNodes() と，リソースパラメータを有効にすると\n$ go run sample2.go | jq . { \u0026#34;BrowseNodesResult\u0026#34;: { \u0026#34;BrowseNodes\u0026#34;: [ { \u0026#34;Ancestor\u0026#34;: { \u0026#34;Ancestor\u0026#34;: { \u0026#34;Ancestor\u0026#34;: { \u0026#34;Ancestor\u0026#34;: { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;Kindleストア\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;Kindleストア\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2250738051\u0026#34; }, \u0026#34;ContextFreeName\u0026#34;: \u0026#34;Kindleストア\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;カテゴリー別\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2250739051\u0026#34; }, \u0026#34;ContextFreeName\u0026#34;: \u0026#34;Kindle本\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;Kindle本\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2275256051\u0026#34; }, \u0026#34;ContextFreeName\u0026#34;: \u0026#34;ビジネス・経済\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;ビジネス・経済\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291905051\u0026#34; }, \u0026#34;Children\u0026#34;: [ { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;コンサルティング\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;コンサルティング\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;4715053051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;経営情報システム\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;経営情報システム\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;4715061051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;銀行・金融業\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;銀行・金融業\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2292599051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;人事・労務管理\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;人事・労務管理\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291959051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;経理・アカウンティング\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;会計\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2292083051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;e コマース\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;e コマース\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291907051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;NGO・NPO\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;非営利組織\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2293150051\u0026#34; }, { \u0026#34;ContextFreeName\u0026#34;: \u0026#34;不動産\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;不動産\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291980051\u0026#34; } ], \u0026#34;ContextFreeName\u0026#34;: \u0026#34;産業研究\u0026#34;, \u0026#34;DisplayName\u0026#34;: \u0026#34;産業研究\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;2291970051\u0026#34;, \u0026#34;IsRoot\u0026#34;: false } ] } } という感じに親ノードと子ノードも併せて取得できる。\nこの browse node ID を使って商品検索結果を絞り込むことができる。 たとえば結城浩さんの著作を 2291970051 で絞り込んでみる。\n//Make query q := query.NewSearchItems( client.Marketplace(), client.PartnerTag(), client.PartnerType(), ).Search(query.Author, \u0026#34;結城浩\u0026#34;).Request(query.BrowseNodeID, \u0026#34;2291970051\u0026#34;).EnableItemInfo() これを実行すると\n$ go run sample3c.go | jq . { \u0026#34;SearchResult\u0026#34;: { \u0026#34;Items\u0026#34;: [ { \u0026#34;ASIN\u0026#34;: \u0026#34;B08S2LY9VG\u0026#34;, \u0026#34;DetailPageURL\u0026#34;: \u0026#34;https://www.amazon.co.jp/dp/B08S2LY9VG?tag=mytag-20\u0026amp;linkCode=osi\u0026amp;th=1\u0026amp;psc=1\u0026#34;, \u0026#34;ItemInfo\u0026#34;: { \u0026#34;ByLineInfo\u0026#34;: { \u0026#34;Manufacturer\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;SBクリエイティブ\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Manufacturer\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; }, \u0026#34;Contributors\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;結城 浩\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34;, \u0026#34;Role\u0026#34;: \u0026#34;著\u0026#34; } ] }, \u0026#34;Classifications\u0026#34;: { \u0026#34;Binding\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;Kindle版\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Binding\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; }, \u0026#34;ProductGroup\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;Digital Ebook Purchas\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;ProductGroup\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; } }, \u0026#34;ContentInfo\u0026#34;: { \u0026#34;Languages\u0026#34;: { \u0026#34;DisplayValues\u0026#34;: [ { \u0026#34;DisplayValue\u0026#34;: \u0026#34;日本語\u0026#34;, \u0026#34;Type\u0026#34;: \u0026#34;発行済み\u0026#34; } ], \u0026#34;Label\u0026#34;: \u0026#34;Language\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; }, \u0026#34;PagesCount\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: 218, \u0026#34;Label\u0026#34;: \u0026#34;NumberOfPages\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; }, \u0026#34;PublicationDate\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;2021-02-19T00:00:00Z\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;PublicationDate\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; } }, \u0026#34;ProductInfo\u0026#34;: { \u0026#34;IsAdultProduct\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: false, \u0026#34;Label\u0026#34;: \u0026#34;IsAdultProduct\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; }, \u0026#34;ReleaseDate\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;2021-02-20T00:00:00Z\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;ReleaseDate\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;en_US\u0026#34; } }, \u0026#34;TechnicalInfo\u0026#34;: { \u0026#34;Formats\u0026#34;: { \u0026#34;DisplayValues\u0026#34;: [ \u0026#34;Kindle本\u0026#34; ], \u0026#34;Label\u0026#34;: \u0026#34;Format\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; } }, \u0026#34;Title\u0026#34;: { \u0026#34;DisplayValue\u0026#34;: \u0026#34;再発見の発想法\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Title\u0026#34;, \u0026#34;Locale\u0026#34;: \u0026#34;ja_JP\u0026#34; } } } ], \u0026#34;SearchURL\u0026#34;: \u0026#34;https://www.amazon.co.jp/s?rh=n%3A2291970051%2Cp_lbr_three_browse-bin%3A%E7%B5%90%E5%9F%8E%E6%B5%A9%2Cp_n_availability%3A-1\u0026amp;tag=mytag-20\u0026amp;linkCode=osi\u0026#34;, \u0026#34;TotalResultCount\u0026#34;: 1 } } という感じに『再発見の発想法』のみ絞り込めた。\nまぁ，こんな感じに使ってみてください。\nブックマーク Go 言語用 PA-API v5 クライアント・パッケージ amazon APIのBrowseNode ID一覧ってどうやって調べるの？ – ユズムログ 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nデベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\n再発見の発想法 結城 浩 (著) SBクリエイティブ 2021-02-19 (Release 2021-02-20) Kindle版 B08S2LY9VG (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「Software Design」誌の同名連載の書籍化。「技術用語」の解説書だが，平易な内容で読みやすい。\nreviewed by Spiegel on 2021-03-14 (powered by PA-APIv5)\n"
    },
    {
      "title": "ネックスピーカー買うた",
      "section": "remark",
      "description": "あんまりハズレだと嫌なので，今回は様子見の廉価版で",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/neck-speaker/",
      "published": "2022-07-17T11:02:51+00:00",
      "update": "2022-07-17T11:03:10+00:00",
      "content": "さて，夏のボーナスの季節である。 私も微々たる金額ながら頂いたので，自分へのご褒美として，今回はネックスピーカーを買ってみた。 とはいえ，あんまりハズレだと嫌なので，今回は様子見の廉価版で。\nネックスピーカー買った。JVCケンウッド | Flickr JVC ブランド。 決め手は「連続再生時間20時間」ってところ（笑）\n試しに「嗚呼！逆転王」のベースカバーを聴いてみたが\n【逆転イッパツマン】嗚呼！逆転王 /山本正之【ベースカバー】 - YouTube んー，こんなもんじゃないかな。 ベース音もはっきり聞こえるし。 まぁ，うちとこはガチのオーディオ設備じゃないしな。 卓上スピーカーよりはいいと思う。\n3年前の引っ越しでクラシック音楽CDは全部処分してしまったからなぁ。 この機会に改めて買って試してみるのもいいかもしれない。 近所のブックオフにでも行くか。\n音を抑える目的で買うなら止めたほうがいいと思う。 普通に周囲に聞こえます。 あと Bluetooth 接続なのでどうしても遅延が発生する1（のでゲーム用には向かない？）。 家事しながら聴く，とかいったシチュエーションならいいかも。 そういう意味でも「連続再生時間20時間」は魅力だねぇ（笑）\nブックマーク Amazon Prime Day 2021 の戦利品 参考 JVC NAGARAKU SP-A10BT-W ウェアラブルネックスピーカー ワイヤレス Bluetooth 約20時間連続再生 本体約88g軽量設計 ホワイト JVCケンウッド (Release 2018-11-21) エレクトロニクス B07JVKHRD5 (ASIN), 4975769459337 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; JVC ブランドのネックスピーカー。連続再生時間20時間は魅力。廉価版なせいかびっくりするほど高音質というわけではないが，私が聴くのは主にアニソンなので無問題。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\n新しい機種は aptX LowLatency コーデックに対応しているので，遅延に関しては緩和されるかも？\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "2022年に出た（出る） Go 言語関連の本",
      "section": "remark",
      "description": "うだうだしてたら7月も半分過ぎちゃってるよ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/07/books-for-golang/",
      "published": "2022-07-17T05:08:55+00:00",
      "update": "2022-07-27T11:00:45+00:00",
      "content": "2022年に入ってから Go 関連の本がいくつか出ているが，第1四半期は引っ越しやらでドタバタしてたので購入は後回しにしていた。 そうするうちに第2四半期に入ったのだが，今度は本業が忙しくなり Java コード書きまくってるせいか，うちに帰っても趣味のコードを書く気が起こらず Go 関連はまるっと放置していた。\nそうこうするうちに7月も半分過ぎちゃってるよ，とハタと気づいて，とりあえず気になる本はみんな買っておこうと思ったり。\nエキスパートたちのGo言語 エキスパートたちのGo言語　一流のコードから応用力を学ぶ Software Design plus 上田 拓也 (著), 青木 太郎 (著), 石山 将来 (著), 伊藤 雄貴 (著), 生沼 一公 (著), 鎌田 健史 (著), 上川 慶 (著), 狩野 達也 (著), 五嶋 壮晃 (著), 杉田 寿憲 (著), 田村 弘 (著), 十枝内 直樹 (著), 主森 理 (著), 福岡 秀一郎 (著), 三木 英斗 (著), 森 健太 (著), 森國 泰平 (著), 森本 望 (著), 山下 慶将 (著), 渡辺 雄也 (著) 技術評論社 2021-12-27 (Release 2021-12-27) Kindle版 B09P4PH63R (ASIN) 版元のデジタル版を購入。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\n版元で買ったのだが，間抜けなことにデジタル版と間違えて紙の本を買っちゃったのよ。 途中で気がつけよ，私 orz\n慌ててキャンセルしようとしたが，キャンセルできないんだって。 とほほ。 まぁ PDF で書い直したし，いざとなったら紙のほうはブックオフに売ろう。\n実用 Go言語 実用 Go言語 ―システム開発の現場で知っておきたいアドバイス 渋川 よしき (著), 辻 大志郎 (著), 真野 隼記 (著) オライリージャパン 2022-04-22 単行本（ソフトカバー） 4873119693 (ASIN), 9784873119694 (EAN), 4873119693 (ISBN) 版元のデジタル版を購入。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\nオライリーさんなのでデジタル版のほうを買いました。\n詳解Go言語Webアプリケーション開発 詳解Go言語Webアプリケーション開発 清水陽一郎 (著) シーアンドアール研究所 2022-07-22 (Release 2022-07-22) Kindle版 B0B62K55SL (ASIN) 本の森.jp で PDF 版が買える。これからゆっくり読む。\nreviewed by Spiegel on 2022-07-27 (powered by PA-APIv5)\n2022-07-22 発売。 本の森.jp で PDF 版を購入した。 発売直後に重版したげな。 めでたい！\nGo言語による分散サービス Go言語による分散サービス ―信頼性、拡張性、保守性の高いシステムの構築 Travis Jeffery (著), 柴田 芳樹 (翻訳) オライリージャパン 2022-08-03 単行本（ソフトカバー） 4873119979 (ASIN), 9784873119977 (EAN), 4873119979 (ISBN) 版元でデジタル版購入予定。読書会の課題図書。\nreviewed by Spiegel on 2022-07-27 (powered by PA-APIv5)\n2022-08-03 発売予定。 私はデジタル版を買う予定なので，発売日まで待ち状態。\nなお翻訳者の柴田芳樹さん主催による読書会が8月から始まる。 でも申込みが遅くて補欠なんだよなぁ。\n第1回『Go言語による分散サービス』オンライン読書会 - connpass 『Go言語による分散サービス』オンライン読書会を開催します：柴田 芳樹 (Yoshiki Shibata)：SSブログ あれ？ もう2,3冊あった気がするけど，どうだったっけ？ まぁ，いいや。 2022年に出た Go 本でこんなのあるよ，というのがありましたら是非教えてください \u0026#x1f647;\nしかし，技術関連書はホンマ Kindle で買わなくなったな。 いや，技術書読むのに Kindle は（一部でも内容をコピペできないし）使い勝手が悪いから（漫画やラノベなら Kindle で全然 OK なんだけど）。 まぁ Linux ネイティブ版の Kindle アプリケーションがないっつうのもあるけど。\n"
    }
  ]
}
