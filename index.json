{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "OpenSSH 8.5 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "アップデートは計画的に",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/03/openssh-8_5-is-released/",
      "published": "2021-03-11T10:11:29+00:00",
      "update": "2021-03-11T10:13:04+00:00",
      "content": "先週の話で恐縮だが， 2021-03-03 にリリースされた OpenSSH 8.5 で CVE-2021-28041 の脆弱性の改修がされていたらしい。\nssh-agent in OpenSSH before 8.5 has a double free that may be relevant in a few less-common scenarios, such as unconstrained agent-socket access on a legacy operating system, or the forwarding of an agent to an attacker-controlled host. via NVD - CVE-2021-28041  ssh-agent のソケット周りとかヤバいぢゃん。\nCVSSv3 評価は以下の通り。\n CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H 深刻度: 緊急 (Score: 9.8)     基本評価基準 評価値     攻撃元区分 ネットワーク   攻撃条件の複雑さ 低   必要な特権レベル 不要   ユーザ関与レベル 不要   スコープ 変更なし   機密性への影響 高   完全性への影響 高   可用性への影響 高    実は Ubuntu で，これを修正したらしい OpenSSH 8.3 バックポート・パッチが出てたので気付いた次第。\n USN-4762-1: OpenSSH vulnerability | Ubuntu security notices | Ubuntu  まぁ，アップデートは計画的に，ということで。\n参考図書  SSH Mastery: OpenSSH, PuTTY, Tunnels and Keys (IT Mastery Book 12) (English Edition) Lucas, Michael W (著) Tilted Windmill Press 2018-02-06 (Release 2018-02-06) Kindle版 B079NL1L9K (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  タイトルを見て “SSH Mystery” と空目したアホは私です。洋書だけど英語不得手の私にも読める内容。\nreviewed by Spiegel on 2021-01-11 (powered by PA-APIv5)\n  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 1.16.1 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "今回は複数の脆弱性について改修されている。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/03/go-1_16_1-is-released/",
      "published": "2021-03-11T09:52:53+00:00",
      "update": "2021-03-11T09:53:44+00:00",
      "content": "予告通り， Go 1.16.1 がリリースされた。\n [security] Go 1.16.1 and Go 1.15.9 are released  今回は複数の脆弱性について改修されている。\nencoding/xml: infinite loop when using xml.NewTokenDecoder with a custom TokenReader (CVE-2021-27918) The Decode, DecodeElement, and Skip methods of an xml.Decoder provided by xml.NewTokenDecoder may enter an infinite loop when operating on a custom xml.TokenReader which returns an EOF in the middle of an open XML element. via Go 1.16.1 and Go 1.15.9 are released  （以下未稿）\narchive/zip: panic when calling Reader.Open (CVE-2021-27919) The Reader.Open API, new in Go 1.16, will panic when used on a ZIP archive containing files that start with \u0026quot;../\u0026quot;. via Go 1.16.1 and Go 1.15.9 are released  （以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.16.1.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.16.1.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.16.1.linux-amd64.tar.gz $ sudo mv go go1.16.1 $ sudo ln -s go1.16.1 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.16.1 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "Git v2.30.2 のリリース【セキュリテイ・アップデート】",
      "section": "release",
      "description": "アップデートは計画的に。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/03/git-2_30_2-is-released/",
      "published": "2021-03-10T09:41:10+00:00",
      "update": "2021-03-10T10:03:28+00:00",
      "content": "Git v2.30.2 がリリースされた。\n [ANNOUNCE] Git v2.30.2 and below for CVE-2021-21300 - Junio C Hamano  タイトルにもあるとおり，今回は CVE-2021-21300 の修正を含んでいる。\nA specially crafted repository that contains symbolic links as well as files using a clean/smudge filter such as Git LFS, may cause just-checked out script to be executed while cloning onto a case-insensitive file system such as NTFS, HFS+ or APFS (i.e. the default file systems on Windows and macOS).\nNote that clean/smudge filters have to be configured for that. Git for Windows configures Git LFS by default, and is therefore vulnerable.\n via malicious repositories can execute remote code while cloning · Advisory · git/git · GitHub  流石にク◯ったれな HFS+ は駆逐されていると思うが， NTFS と APFS をファイルシステムとして使っているプラットフォームは要注意である。 Windows や macOS パソコンだけじゃなくて， NTFS で NAS を構成している場合も結構ヤバいんじゃないかな？\nGit for Windows に関しては既にアップデートが出ている。\n Release MinGit v2.29.2.windows.4 · git-for-windows/git · GitHub Release Git for Windows 2.30.2 · git-for-windows/git · GitHub  他のプラットフォームでも順次アップデートしていくのがいいだろう。 今回の条件に該当するけどすぐにアップデートできない場合は，とりあえず\n$ git config --global core.symlinks false としてシンボリック・リンクを無効にすることで回避できるらしい。\nアップデートは計画的に。\nCVE-2021-21300 GitHub による評価：\n CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N 深刻度: 重要 (Score: 8)     基本評価基準 評価値     攻撃元区分 ネットワーク   攻撃条件の複雑さ 高   必要な特権レベル 不要   ユーザ関与レベル 要   スコープ 変更あり   機密性への影響 高   完全性への影響 高   可用性への影響 なし    "
    },
    {
      "title": "Baldanders.info サイトにおける OpenPGP 鍵管理の変更",
      "section": "remark",
      "description": "来年から本気出す（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/03/changing-publickey-management/",
      "published": "2021-03-06T10:43:36+00:00",
      "update": "2021-03-06T10:47:09+00:00",
      "content": "このブログを含む Baldanders.info の各サイトでは，私個人の OpenPGP 公開鍵を公開している。 実は2013年から年次鍵の運用を止めて単一で永続的な鍵運用に切り替えたのだが，来年からまた短期の運用に戻すことにした。\n具体的には\n 現行の公開鍵の有効期限を 2022-03-31 に変更する（変更済） 2022年4月以降に使用する鍵は最長で2年の有効期限付きで作成する 単一の鍵で運用するのではなく目的別に鍵を分ける  OpenSSH のクライアント認証鍵は GnuPG ベースのものに切り替える 鍵同士の相互署名はしない    という感じで行こうかと。\n理由のひとつは，現在ドラフト中の NIST FIPS 186-5 から DSA が削除されるというもの。\n FIPS 186-5 (Draft), Digital Signature Standard (DSS) | CSRC  もうひとつの理由は GnuPG において第3者による OpenPGP 鍵への電子署名の社会的信頼度が下がってきたことだ。 もともと，第3者による OpenPGP 鍵への電子署名は「小切手の裏書き」みたいなもので，多数の署名が永続的に存在することで鍵の信頼性が担保できていたのだが，その前提が崩れ去ってしまったのだ。\n OpenPGP 公開鍵サーバにおける公開鍵の汚染問題  こうなると従来の OpenPGP 鍵サーバをベースにした鍵運用は大して意味がないし（せいぜい手渡しよりは便利という程度），単一の鍵を長期的に利用ドメインを跨いで使い回すのは却ってリスクになりかねない。\nさらに，強いて3つ目を挙げるなら「電子メールはオワコン」ということだろうか。 少なくとも署名・暗号化しないといけないようなメッセージ・データを電子メールで配送するというのはもうナシだろう。 PPAP 以前の問題。 Thunderbird による OpenPGP 鍵利用が使いものにならないというのもあるが（笑）\n暗号鍵の運用については NIST SP 800-57 が参考になるだろう。 この中で暗号鍵の使用期間と暗号期間について推奨値が示されている。 こんな感じ。\n main table.cryptoperiod th { vertical-align:middle; text-align: center; } main table.cryptoperiod td { vertical-align:middle; }    Key Type Cryptoperiod  Originator-Usage\nPeriod (OUP) Recipient-Usage\nPeriod     1. Private Signature Key 1 to 3 years −  2. Public Signature-VerificationKey Several years (depends on key size)  3. Symmetric Authentication Key $\\le 2$ years $\\le \\mathrm{OUP}+3$ years  4. Private Authentication Key 1 to 2 years  5. Public Authentication Key 1 to 2 years  6. Symmetric Data Encryption Keys $\\le 2$ years $\\le \\mathrm{OUP}+3$ years  7. Symmetric Key-Wrapping Key $\\le 2$ years $\\le \\mathrm{OUP}+3$ years  8. Symmetric RBG Keys See SP 800-90 −  9. Symmetric Master Key/Key Derivation Key About 1 year −  10. Private Key Transport Key $\\le 2$ years  11. Public Key Transport Key 1 to 2 years  12. Symmetric Key Agreement Key 1 to 2 years  13. Private Static Key Agreement Key 1 to 2 years  14. Public Static Key Agreement Key 1 to 2 years  15. Private Ephemeral Key Agreement Key One key-agreement transaction  16. Public Ephemeral Key Agreement Key One key-agreement transaction  17. Symmetric Authorization Key $\\le 2$ years  18. Private Authorization Key $\\le 2$ years    uggested cryptoperiods for key types (via SP 800-57 Part 1 Revision 5  5.3.6)  HTTPS など X.509 ベースで運用される公開鍵の有効期間が1年程度の短期運用に切り替わっているのに気付いている人も多いだろう。 OpenPGP 鍵は ad hoc 運用だし合わせる必要はないと思っていたが，永続的な鍵運用に価値がないならこっちに合わせるべきだよね。\nとりあえず，現行の OpenPGP 公開鍵は\n$ gpg --fetch-keys https://baldanders.info/pubkeys/spiegel.asc で有効期限付きのものに更新できる。\nぶっちゃけ個人で鍵を2,3年おきに更新するのって面倒くさいんだよね。 まぁ，実際の運用をどうするか（暗号デバイスの導入も含めて）これから3年以内には確立させる予定。 3年もあれば暗号界隈のシーンも変わっているだろうけど（笑）\nブックマーク  Kernel Maintainer PGP guide — The Linux Kernel documentation OpenPGP SSH access with Yubikey and GnuPG · GitHub セキュリティ関連NIST文書：IPA 独立行政法人 情報処理推進機構  鍵管理における推奨事項 第一部：一般事項    そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな OpenSSH の認証鍵を GunPG で作成・管理する  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "RSA は砕けない（たぶん？）",
      "section": "remark",
      "description": "まだあわてるような時間じゃない（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/03/rsa-is-unbreakable/",
      "published": "2021-03-06T00:33:55+00:00",
      "update": "2021-03-06T00:44:23+00:00",
      "content": "こっち方面のアンテナがすっかり鈍ってしまって，気付いたのがやっと昨日なのだが\n Cryptology ePrint Archive: Report 2021/232 - Fast Factoring Integers by SVP Algorithms  という論文を巡ってちょっとした騒ぎになっていたらしい。 いや abstract に This destroys the RSA cryptosystem とか書いてあるもんで，その筋の方々が色めき立っちゃたようだ（笑）\nこれについて Bruce Schneier 先生も\nIt does not. At best, it’s an improvement in factoring — and I’m not sure it’s even that. via No, RSA Is Not Broken - Schneier on Security  とおっしゃっている。 論文自体の査読もまだだし，これから要検証という感じ。 少なくとも2020年時点で RSA-250 の解読には成功してるんだから，それとの比較で評価できるだろう。\n要するに「まだあわてるような時間じゃない」ということだ。 まぁ，でも，これから鍵を替えるなら ECC 鍵がいいんじゃないかな（笑）\n そろそろ GnuPG でも ECC を標準で使うのがいいんじゃないかな SSH の認証鍵を GunPG で作成・管理する Edwards-curve Digital Signature Algorithm  ブックマーク  Does Schnorr\u0026rsquo;s 2021 factoring method show that the RSA cryptosystem is not secure? - Cryptography Stack Exchange Schnorr\u0026rsquo;s factorization algorithm - Issuance Policy - Let\u0026rsquo;s Encrypt Community Support  参考図書  暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n  暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "特殊形式による式評価について",
      "section": "golang",
      "description": "Go の言語仕様を読みましょう（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/special-forms/",
      "published": "2021-03-04T10:27:13+00:00",
      "update": "2021-03-04T11:54:38+00:00",
      "content": "元ネタが Zenn の記事だし小ネタだし，どちらで書こうか悩んだが，今まで書いたことがない切り口な気がするので，こっち側で。\nいきなりだが，以下のコードを起点に話を始めよう。\npackage main import \u0026#34;fmt\u0026#34; func main() { ageMap := map[string]uint{ \u0026#34;Alice\u0026#34;: 18, \u0026#34;Teles\u0026#34;: 20, } fmt.Println(ageMap[\u0026#34;Alice\u0026#34;])  // Output  // 18 } このコードをみて分かるように，インデックス式 ageMap[x] の評価結果は uint 型になっている（インデックス値が存在しない場合はゼロ値がセットされる）。 まぁ，当たり前だよね。\nところが ageMap[x] の評価結果を (uint, bool) の組（tuple）で受けることもできるのだ1。 これによってコードを\npackage main import \u0026#34;fmt\u0026#34; func main() { ageMap := map[string]uint{ \u0026#34;Alice\u0026#34;: 18, \u0026#34;Teles\u0026#34;: 20, } if age, ok := ageMap[\u0026#34;Selene\u0026#34;]; ok { fmt.Println(age) } else { fmt.Println(\u0026#34;unknown\u0026#34;) }  // Output  // unknown } と書き換えることでき， ageMap[x] の評価に失敗した際の挙動を記述できる。 Go の言語仕様では，これを「特殊形式（special form）」と呼んでいる（日本語が怪しいのはご容赦）。\n言語仕様を眺めてみると，この特殊形式が適用可能なのは以下の3つのみのようだ。\n   # Expressions Normal Form Special Form     1 Index Expression on Map foo := bar[x] foo, ok := bar[x]   2 Type Assertion foo := bar.(T) foo, ok := bar.(T)   3 Receive Expression foo := \u0026lt;-ch foo, ok := \u0026lt;-ch    最初のはインデックス値 x が map にない場合に false になる。 2番目は型 T でのアサーションに失敗した場合に（panic を吐くことなく） false になる。 最後のはチャネル ch が閉じている場合に false になる。\n他の式評価や関数の返り値ではこのようなことはできない。 たとえば slice のインデックス式評価に特殊形式はない。 インデックス値が範囲外なら単に panic が投げられるだけだ。\n実は，特殊形式が上の3つの式評価でしか適用されないというのが分からなくて「どうして普通の関数の返り値とかではできないんだろう」とひとしきり悩んだことがあったのだった。 言語仕様を読めっての（笑）\nブックマーク  The Go Programming Language Specification - The Go Programming Language Goの言語仕様書精読のススメ \u0026amp; 英語彙集 Go言語における式の評価文脈を理解する  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   厳密には，特殊形式 (T, bool) の2要素目は型付けなしの真偽値（untyped boolean）に評価される。「型付けなし（untyped）」というのは Go 特有の概念だそうで，具体的な型が決定される前の状態を指す。たとえば，定数 math.Pi は10進数64桁の小数点数で定義されている。型付けなし定数については『プログラミング言語Go』の3.6.2章にも解説がある。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "GNKF: NKF ぽいなにか の v0.4.0 をリリースした",
      "section": "release",
      "description": "部首の正規化の対象に CJK 部首補助を含めるようにした。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/02/gnkf-v0_4_0-is-released/",
      "published": "2021-02-28T10:26:39+00:00",
      "update": "2021-02-28T10:27:33+00:00",
      "content": "Go 言語における文字列処理の習作 gnkf の v0.4.0 をリリースした。\n Release v0.4.0 · spiegel-im-spiegel/gnkf · GitHub  実は\n PDFのコピペが文字化けするのはなぜか？～CID/GIDと原ノ味フォント～  というスライドを見てたんだけど，康熙部首だけじゃなくて CJK 部首補助に化けることもあるらしいぢゃん。\ngnkf では norm サブコマンドに -k オプションを付けて\n$ echo ㈱埼⽟ | gnkf norm -n nfkc -k とかすれば康熙部首の「⽟（U+2F5F）」だけを正規化できるんだけど，この対象に CJK 部首補助を含めるようにした。 具体的には Unicode オフィシャルの\n EquivalentUnifiedIdeograph.txt  に従って変換している。\nあとは，お試し機能として completion サブコマンドを追加して各 shell 用の自動補完スクリプトを吐き出せるようにした。 Bash, Zsh, Fish, PowerShell の自動補完機能に対応している。\ngnkf completions -h とかすれば簡単なヘルプが出るので，よろしければどうぞ。\nブックマーク   やっかいな漢字 – CJK部首補助／康煕部首 – ものかの\n  GNKF: Network Kanji Filter by Golang\n  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "Markdown と VS Code",
      "section": "remark",
      "description": "Preview 機能は個人的に必要ないのでレビューしないが，仕事で使うようなことがあれば，そのうち記事にすることもあるだろう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/02/markdown-with-vscode/",
      "published": "2021-02-28T03:45:02+00:00",
      "update": "2021-03-04T23:24:41+00:00",
      "content": " パソコンに Visual Studio Code を導入する（再チャレンジ） Go と VS Code Markdown と VS Code ← イマココ  今回は VS Code で markdown テキストを入出力する話。\nMarkdown All in One $ code --install-extension yzhang.markdown-all-in-one Markdown 関連の拡張機能は色々あるようだが，入力支援に関してはこれで必要十分ぽい。\nお気に入りはテーブル整形の機能で， Linux/Ubuntu なら [Ctrl+Shift+I] キー（Format Document）押下で綺麗に整形してくれる。\nところが Windows 版では [Shift+Alt+F] キーが Format Document に割り当てられているようだ。 プラットフォームによって違うのかよ。\nというわけで Windows 版の方にキー割当を合わせることにした。\n// Place your key bindings in this file to override the defaults [ { \u0026#34;key\u0026#34;: \u0026#34;shift+alt+f\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;editor.action.formatDocument\u0026#34;, \u0026#34;when\u0026#34;: \u0026#34;editorHasDocumentFormattingProvider \u0026amp;\u0026amp; editorTextFocus \u0026amp;\u0026amp; !editorReadonly \u0026amp;\u0026amp; !inCompositeEditor\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;ctrl+shift+i\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;-editor.action.formatDocument\u0026#34;, \u0026#34;when\u0026#34;: \u0026#34;editorHasDocumentFormattingProvider \u0026amp;\u0026amp; editorTextFocus \u0026amp;\u0026amp; !editorReadonly \u0026amp;\u0026amp; !inCompositeEditor\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;shift+alt+f\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;editor.action.formatDocument.none\u0026#34;, \u0026#34;when\u0026#34;: \u0026#34;editorTextFocus \u0026amp;\u0026amp; !editorHasDocumentFormattingProvider \u0026amp;\u0026amp; !editorReadonly\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;ctrl+shift+i\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;-editor.action.formatDocument.none\u0026#34;, \u0026#34;when\u0026#34;: \u0026#34;editorTextFocus \u0026amp;\u0026amp; !editorHasDocumentFormattingProvider \u0026amp;\u0026amp; !editorReadonly\u0026#34; } ] Prettier - Code formatter との競合 $ code --install-extension esbenp.prettier-vscode Markdown 専用というわけではないが JavaScript/TypeScript, CSS/SCSS/Less, HTML, JSON, GraphQL, YAML など幅広い言語に対応している整形ツールで，しかも plugin 拡張もできるらしい。 もちろん markdown テキストにも対応している。\nで，これと Markdown All in One の整形機能（Format Document）が被るわけですよ。 そこで，どちらの機能を使うか言語ごとに設定できるようになっている。 私は Markdown All in One 優先でこんな感じ。\n{ \u0026#34;[markdown]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;yzhang.markdown-all-in-one\u0026#34; } } さらにファイル保存時に変更した箇所だけを整形する，なんてな設定も言語ごとにできるようだ。\n{ \u0026#34;[markdown]\u0026#34;: { \u0026#34;editor.defaultFormatter\u0026#34;: \u0026#34;yzhang.markdown-all-in-one\u0026#34;, \u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.formatOnSaveMode\u0026#34;: \u0026#34;modifications\u0026#34;  } } ちなみに EditorConfig for VS Code が有効な場合は .editorconfig の設定（インデントや改行コードなど）を考慮してくれるようだ。 これを無効にするには “Use Editor Config” の項目を OFF にする。\n{ \u0026#34;prettier.useEditorConfig\u0026#34;: false } ただし， EditorConfig が有効な場合でも .prettierrc ファイルなどによる Prettier 独自の設定がある場合は，そちらのほうが優先されるようだ。 ややこしい\u0026hellip;\n自動補完を有効にする VS Code の売りのひとつはスニペットを含む強力な自動補完機能だが，何故か markdown ファイルには自動補完が効かない。 と思ったら，既定で無効になっているらしい。 いや，有効にしとけよ。\nというわけで settings.json に以下の設定を手動で書き込む。\n{ \u0026#34;[markdown]\u0026#34;: { \u0026#34;editor.quickSuggestions\u0026#34;: true, \u0026#34;editor.snippetSuggestions\u0026#34;: \u0026#34;top\u0026#34; }, } これでスニペットを優先して自動補完候補に挙げてくれる。\nMarkdown Preview 機能は必要か 私個人で言うなら No で，仕事なら場合によっては Yes かな。\nそもそも markdown テキストってのは，見出しや段落や箇条書き等の文書構造がそのままでも human-readable である点が利点と言える。 さらに言えば，ここのブログは Hugo の shortcodes 等で入力自体をカスタマイズしまくってるので，ただの markdown preview なんか使いものにならないのだ（Hugo はサーバ・モードで起動できるので，リアルタイムでブラウザ表示を確認しながら記事を書いている）。\n一方で， Office ツールなどレガシーな環境を捨てて markdown 等の構造化テキストをベースにしたドキュメンテーションをしようとするなら，それなりにリッチな markdown preview 機能と PDF 等へ「最終出力」するためのツールチェーンが必要となる。\nそのための手段（または道具立て）として VS Code をベースに環境を整えるというのは合理的と言えるかもしれない。\nというわけで，以降では PDF 等への「最終出力」を念頭に置いたドキュメントツールとして幾つかの拡張機能を紹介してみる。 上述したように，私個人は全く必要ないのでレビューしないが，仕事で使うようなことがあれば，そのうち記事にすることもあるだろう。\nMarkdown Preview Enhanced $ code --install-extension shd101wyy.markdown-preview-enhanced TeX の数学記法あるいは PlantUML や mermaid 等の記法も認識して preview 表示できるらしい。 DOT 言語も使えるのか。 CSS をカスタマイズ可能。\nHTML や PDF へ出力できるようだ（PDF 出力は Chrome 経由）。\nMarkdown PDF $ code --install-extension yzane.markdown-pdf コマンド一発で PDF 変換してくれる。 簡易的な出力しか出来ないのかと思ったら，意外にもかなりカスタマイズできるらしい。\n VSCode と Markdown で技術同人誌書いたので拡張機能とかまとめ - Qiita 【Visual Studio Code】Markdown PDF のスタイル(CSS)を変える方法 - Nekonote  Marp for VS Code $ code --install-extension marp-team.marp-vscode Marp を使って markdown テキストからスライドを生成する。 PDF へエクスポートできるらしい。\n 【VS Code + Marp】Markdown から爆速・自由自在なデザインで、プレゼンスライドを作る - Qiita  Draw.io Integration $ code --install-extension hediet.vscode-drawio Draw.io (diagrams.net) を利用した作図ツール。 データはテキストで保持して PNG や SVG へエクスポート可能って感じなのかな。\n VSCode で Draw.io が使えるようになったらしい！ - Qiita  PlantUML $ code --install-extension jebbs.plantuml PlantUML 作図・出力支援。 あらかじめ PlantUML 作図環境を用意する必要がある（ただし plantuml.jar ファイルは拡張機能内にあらかじめ格納されている？）。\n 真面目に PlantUML (1) : PlantUML のインストール  ブックマーク  VS Code エディタ入門 (2020 年 12 月 8 日追記)VSCode で Draw.io Integration 使用時にエクスポートできないことがある問題への対処 - Qiita インデントおよび行末は EditorConfig で始末する  参考図書  Software Design (ソフトウェアデザイン) 2020年8月号 [雑誌] Software Design 編集部 (編集) 技術評論社 2020-07-18 (Release 2020-07-18) Kindle版 B08CZ2C3NZ (ASIN)  特集記事は「Vim vs. Visual Studio Code」\nreviewed by Spiegel on 2021-02-28 (powered by PA-APIv5)\n "
    },
    {
      "title": "2021-02-28 のブックマーク",
      "section": "bookmarks",
      "description": "「Zennで発生した障害の原因と行なった対策のまとめ」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/02/28-bookmarks/",
      "published": "2021-02-28T00:54:18+00:00",
      "update": "2021-02-28T00:55:58+00:00",
      "content": "リリース情報  Release gopls/v0.6.6 · golang/tools · GitHub Release v0.4.4 · zetamatta/go-readline-ny · GitHub Release v0.4.5 · zetamatta/go-readline-ny · GitHub Release v0.4.6 · zetamatta/go-readline-ny · GitHub  セキュリティ＆プライバシー関連  GPS Vulnerabilities - Schneier on Security TrivyがRed Hatの認定脆弱性スキャナーになりました - knqyf263\u0026rsquo;s blog : Red Hat Vulnerability Scanner Certification の要件を完全に満たす実装はないらしい VMware vCenter Serverの脆弱性（CVE-2021-21972）に関する注意喚起 NTTドコモとKDDIが解約手続きページに「noindex」タグを挿入、検索で非表示にしていたと判明 | TechCrunch Japan  知財関連  「著作権フィルターに検出されそうな曲をかけてライブストリーミングを妨害しようとした警官」は氷山の一角に過ぎない | P2Pとかその辺のお話R  Go 言語関連  Contexts and structs - The Go Blog Developing and publishing modules - The Go Programming Language go installとgo getをどう使い分ければ良いのか調べた Goのスクリプト言語としてPrologを使う : 康熙部首だけじゃないのか。対応しなくちゃ  Rust 言語関連  Rust Foundationのよくある質問と回答（翻訳） Const generics MVP hits beta! | Rust Blog  その他  「ブドウを電子レンジでチンするとプラズマが発生する」という現象の原因がついに明らかに - GIGAZINE Qiita/Zennの投稿をGitHubプロフィールに自動反映するためのツールを作った 以前原書を紹介した本の邦訳を紹介（おバカな答えもAIしてる、感染の法則、マイケル・サンデル先生の新刊） - YAMDAS現更新履歴 マイクロソフト、オープンソースの分散アプリケーションランタイム「Dapr 1.0」リリース。Kubernetes対応、サービス間メッセージング、ステート管理など提供 － Publickey GitHubのTUIツールを作った マイクロソフト「.NET 6」初めてのプレビュー版リリース。Xamarin統合、マルチプラットフォームUI、Blazorでデスクトップアプリ、Apple M1ネイティブなど － Publickey Amazon EC2 MacインスタンスがBig surのサポートを開始。NFSサービス「Amazon EFS」へのマウントも可能に － Publickey 推薦書籍（ソフトウェアエンジニアの心得）：柴田 芳樹 (Yoshiki Shibata)：SSブログ Zennで発生した障害の原因と行なった対策のまとめ CGのための数学 The state of Go | The GoLand Blog PDFのコピペが文字化けするのはなぜか？～CID/GIDと原ノ味フォント～  "
    },
    {
      "title": "Go と VS Code",
      "section": "remark",
      "description": "ぶっちゃけ ATOM の go-plus よりも出来がいいので，ゆるゆると移行していきますよっと。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/02/golang-with-vscode/",
      "published": "2021-02-27T09:47:11+00:00",
      "update": "2021-03-02T21:31:16+00:00",
      "content": "どっちのセクションで書こう悩んだが，所詮ツールの話だし，こっち側で。\n パソコンに Visual Studio Code を導入する（再チャレンジ） Go と VS Code ← イマココ Markdown と VS Code  それでは前回の続き。 VS Code に Go 言語開発支援環境を入れる。 といっても一択だけどね。\n Go - Visual Studio Marketplace  インストールはこちら。\n$ code --install-extension golang.go 一応 Google が公式に参加している拡張機能らしい。\n The VS Code Go extension joins the Go project - The Go Blog Visual Studio Code Go extension joins the Go project  しかも最近，こちらも事実上のオフィシャルである gopls が，この拡張機能の既定の language server となったようだ。\n Gopls on by default in the VS Code Go extension - The Go Blog  個人的にひとつだけ気に入らないところがあって，既定の設定のままではプロジェクト・フォルダを開いたときにトップに go.mod ファイルがないと上手く動かないみたいなんだよね（モジュール対応モードの場合）。\n最初は拡張機能側の問題かと思っていたが，どうも gopls の制限らしい。\n tools/workspace.md at master · golang/tools · GitHub  一応の回避策はあって settings.json に以下のオプションを設定することでトップ以外の複数の go.mod ファイルに対応できるようだ。\n{ \u0026#34;gopls\u0026#34;: { \u0026#34;build.experimentalWorkspaceModule\u0026#34;: true } } ただし go.mod ファイルで定義したモジュール名は開いたプロジェクト・フォルダ内で一意でなければならない。 名前が被ってるとめっさ怒られる。\nまぁ，理屈は分からんでもないが，私の場合，ブログなどのドキュメント環境でサンプルコードを書き散らしていて，それらのモジュール名が大抵 \u0026ldquo;sample” だったりするので被りまくりなんだよなぁ sigh\u0026hellip;\nちなみに，この experimentalWorkspaceModule オプションは一時的な措置なので将来的にはなくなるようだ。 それまでには何とかするということだろう。\nそれ以外の部分ではぶっちゃけ ATOM の go-plus よりも出来がいいので，ゆるゆると移行していきますよっと。\n現時点での settings.json の内容はこんな感じ。\n{ \u0026#34;go.buildOnSave\u0026#34;: \u0026#34;off\u0026#34;, \u0026#34;go.autocompleteUnimportedPackages\u0026#34;: true, \u0026#34;go.formatTool\u0026#34;: \u0026#34;goimports\u0026#34;, \u0026#34;go.lintTool\u0026#34;: \u0026#34;golangci-lint\u0026#34;, \u0026#34;go.gotoSymbol.includeGoroot\u0026#34;: true, \u0026#34;go.testOnSave\u0026#34;: true, \u0026#34;go.coverageOptions\u0026#34;: \u0026#34;showUncoveredCodeOnly\u0026#34;, \u0026#34;go.coverOnSave\u0026#34;: true, \u0026#34;go.coverOnSingleTestFile\u0026#34;: true, \u0026#34;go.coverageDecorator\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;gutter\u0026#34; }, \u0026#34;gopls\u0026#34;: { \u0026#34;build.experimentalWorkspaceModule\u0026#34;: true } } 【2021-03-02 追記】 書き忘れていたが，コマンドパレットから\n\u0026gt;Go: Install/Update Tools と入力すると関連ツールのインストールおよびアップデートができる。\nGo: Install/Update Tools  これを実行すると\nTools environment: GOPATH=/home/username/go Installing 9 tools at /home/username/go/bin in module mode. gopkgs go-outline gotests gomodifytags impl goplay dlv golangci-lint gopls Installing github.com/uudashr/gopkgs/v2/cmd/gopkgs (/home/username/go/bin/gopkgs) SUCCEEDED Installing github.com/ramya-rao-a/go-outline (/home/username/go/bin/go-outline) SUCCEEDED Installing github.com/cweill/gotests/... (/home/username/go/bin/gotests) SUCCEEDED Installing github.com/fatih/gomodifytags (/home/username/go/bin/gomodifytags) SUCCEEDED Installing github.com/josharian/impl (/home/username/go/bin/impl) SUCCEEDED Installing github.com/haya14busa/goplay/cmd/goplay (/home/username/go/bin/goplay) SUCCEEDED Installing github.com/go-delve/delve/cmd/dlv (/home/username/go/bin/dlv) SUCCEEDED Installing github.com/golangci/golangci-lint/cmd/golangci-lint (/home/username/go/bin/golangci-lint) SUCCEEDED Installing golang.org/x/tools/gopls (/home/username/go/bin/gopls) SUCCEEDED All tools successfully installed. You are ready to Go :). てな感じで go install してくれるようだ。 自動でアップデートしてくれるといいのだが\u0026hellip;\n参考図書  Software Design (ソフトウェアデザイン) 2020年8月号 [雑誌] Software Design 編集部 (編集) 技術評論社 2020-07-18 (Release 2020-07-18) Kindle版 B08CZ2C3NZ (ASIN)  特集記事は「Vim vs. Visual Studio Code」\nreviewed by Spiegel on 2021-02-28 (powered by PA-APIv5)\n  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    }
  ]
}
