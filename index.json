{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "インターネット・イレギュラーズ（笑）",
      "section": "remark",
      "description": "どっちかっていうと平安時代の「禿童」だな",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/10/internet-irregulars/",
      "published": "2022-10-02T00:51:58+00:00",
      "update": "2022-10-02T00:53:21+00:00",
      "content": "思いつきのネタです。 ごめんペコン\nTwitter TL で見かけたネタで\n「インターネット老人会向けに」と謳ってるコンテンツがことごとくニコニコ動画ネタだったりSNS普及以降のせいぜい12年前の話題なのは新法で禁止して欲しい。\n\u0026mdash; ǝunsʇo ıɯnɟɐsɐɯ / メタバース炎上対策専門家 (@otsune) October 1, 2022 っていうのがあって，それに対する引用 tweet で\n自分の感覚ではこんな感じ。ギリで青年団を名乗ってる感覚はある\nインターネット子供会 ：ここ5,6年\nインターネット少年団：SNS以降\nインターネット青年団：商用ISP以降\nインターネット老人会：商用ISP以前 https://t.co/X6tSabq5g8\n\u0026mdash; Shuji Sado (佐渡 秀治) (@shujisado) October 1, 2022 というのあって，「じゃあ私はギリで青年団だな（笑）」と思ってたら\n青年団と老人会の間に壮年会が欲しい。条件はシェルアカウント経由で強引にTIAとかSLiRPあたりのエミュレーターでつなげてた世代（笑）\n\u0026mdash; Hideki Saito @ メタバース技術者＆Vtuber (@hideki) October 1, 2022 というツッコミをいただいて「そういや，そんなことしてる人いたな」とか思った次第。\n何となくだけど「少年団」って聞くと Baker Street Irregulars を連想してしまうのよ。 って考えると「SNS 以降」はインターネット・イレギュラーズってとこか。\nでも，どっちかっていうと平安時代の「禿童 (かぶろ) 」だな，と思ったりも（笑）\n以上，ネタでした。\n参考文献 シャーロック・ホームズ\u0026amp;イレギュラーズ〈1〉消されたサーカスの男 マック,T. (著), シトリン,M. (著), Mack,Tracy (原著), Citrin,Michael (原著), 瑞人, 金原 (翻訳), 夏奏, 相山 (翻訳), エマ, スカイ (Unknown) 文溪堂 2011-09-01 単行本 4894235617 (ASIN), 9784894235618 (EAN), 4894235617 (ISBN) ちょっと読んでみたくなった。県立図書館の「子どもの本棚」にあるっぽいな。大人が読んじゃ駄目だろうか...\nreviewed by Spiegel on 2022-10-02 (powered by PA-APIv5)\n現代語訳　平家物語 01 第一巻 （初出: 「世界名作全集　39　平家物語」平凡社、1960（昭和35）年2月12日） 作者不詳 , 尾崎 士郎 (翻訳) 2022-01-02 (Release 2021-12-27) 青空文庫 (Public Domain) 60756 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; これに「禿童」に関する言及が載っている。\nreviewed by Spiegel on 2020-08-10 (powered by aozorahack)\n"
    },
    {
      "title": "サイクリング \u0026 お散歩カメラ",
      "section": "remark",
      "description": "島根県立美術館→松江城ちどり茶屋→島根県立図書館図→水燈路",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/10/suitouro/",
      "published": "2022-10-01T13:33:48+00:00",
      "update": "2022-10-01T14:42:37+00:00",
      "content": "ようやく秋らしくなりました。 今日はサイクリング \u0026amp; お散歩カメラ日和。 ちうわけで自転車で出掛けました。\nこんな感じ（笑）\n宍道湖 嫁ヶ島とチャリ | Flickr 今回の目的というか目標は3つ。\n島根県立美術館の駐輪場を確認 島根県立図書館でまったり読書 3年ぶり開催（らしい）水燈路を見物 はりきって行ってみよう。\n島根県立美術館 というわけで，まずは島根県立美術館へ。\n島根県立美術館来た | Flickr 駐輪場はロータリーの奥のほう，白潟小学校 開校100年記念碑の横にあった。\n島根県立美術館 駐輪場 | Flickr 地球ロック不可。 風向きにもよるけど，行くなら風のない晴天気のときだな。 今回は気になるイベントもなかったので，すぐに移動。\n松江城の駐輪場 島根県立図書館に行く前に確認がてら松江城内にあるという駐輪場に行ってみた。\n松江城自転車駐輪場マップ ええつと，分からなくて通り過ぎちゃったよ。 引き返して\u0026hellip;\nこの先が松江城の駐輪場 | Flickr いや，それただの野っ原だから。芝生ですらない（笑） サイクルスタンドを2台用意していると書いてあったが，三角形のアルミフレームが野っ原の上に乗っけてあるだけ。 固定されてない。 意味ないし。 素手で簡単に持ち上げられました。 そこそこ自転車が停まっていたが，サイクルスタンドらしきものを使ってる人は誰もいなかった（笑）\nというわけで地球ロック不可。\n気を取り直して駐輪場（？）近くのちどり茶屋さんで水分と糖分を補給。\n松江城のお茶屋さんで一服 | Flickr 左側の蒸しプリンは当たり！ でも右側のグリンティーが思ったより甘すぎた。 組み合わせをしくじったかも。 次行くときはラムネかサイダーにしよう（笑）\n島根県立図書館 燃料補給をしたら島根県立図書館へ。 こちらの駐輪場が（無料設備の中では）一番マトモだった。 地球ロック可。\n島根県県立図書館の駐輪場 | Flickr よし決めた。 街中に自転車で出かける時は県立図書館を基点に行動することにしよう！\nというわけで 蛍の光 おっと別れのワルツが鳴るまでまったり読書（これについては別記事で）。\n別れのワルツ　ユージン・コスマン楽団　1956 - YouTube 水燈路 実はそもそも水燈路を知らなかったのだが（私が広島に住んでる間にできたイベントらしい），なんでも3年ぶりに開催ということで，興味本位で見に行くことにした。\n小泉八雲記念館前～堀川遊覧船乗り場　城下町を照らす優しい光　３年ぶり「松江水燈路」 - YouTube 18時から21時ごろまで交通規制があるそうで（松江城北側の小泉八雲館や武家屋敷のある通りが歩行者に開放される）しかもけっこう人が多いと聞いていたので，自転車での移動は無理と判断した。 なので，例の松江城野っ原駐輪場に改めて自転車を停めて，松江城のお掘り周りをゆっくり歩きながら開催時間を待つ。\n18時から水燈路開催 | Flickr 松江城 堀川の夕景 | Flickr おっと，時間がきたようだ。\n水燈路（宇賀橋） | Flickr 橋（北惣門橋）と燈籠とお月さま | Flickr それにしてもホンマに人が多いのな。 特に松江城隣接の駐車場には屋台が結構出てて人でごった返していた。 「サンミツなにそれおいしいの？」って感じ（笑）\n晴天で風もなく気温も適度，上弦前のお月さまも綺麗でよい時間を過ごしました。\n"
    },
    {
      "title": "sshql — SSH 越しに RDBMS にアクセスする",
      "section": "release",
      "description": "拙作 github.com/goark/sshql は SSH 経由で MySQL や PostgreSQL といった RDBMS に接続するための Go パッケージである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/sshql/",
      "published": "2022-09-30T12:17:13+00:00",
      "update": "2022-09-30T12:18:06+00:00",
      "content": "拙作 github.com/goark/sshql は SSH 経由で MySQL や PostgreSQL といった RDBMS に接続するための Go パッケージである。\nGitHub - goark/sshql: Go SQL drivers over SSH github.com/goark/sshql パッケージでは以下の Dialer 型の構造体を用意し，これを使って SSH に接続する1。\n// Dialer is authentication provider information. type Dialer struct { Hostname string `json:\u0026#34;hostname\u0026#34;` Port int `json:\u0026#34;port\u0026#34;` Username string `json:\u0026#34;username\u0026#34;` Password string `json:\u0026#34;password\u0026#34;` PrivateKey string `json:\u0026#34;privateKey\u0026#34;` IgnoreHostKey bool `json:\u0026#34;IgnoreHostKey\u0026#34;` client *ssh.Client } パスワード認証の場合は Username と Password にそれぞれ値をセットする。 PrivateKey に認証用の秘密鍵へのパスを指定する場合は Password に秘密鍵のパスフレーズをセットする。 また ssh-agent 等を使って $SSH_AUTH_SOCK ソケットから秘密鍵を取得できる場合は，こちらを優先するようになっている。\nIgnoreHostKey に true をセットするとホスト認証を無視するようになっているが，セキュリティ上お勧めできないのでご注意を。 ホスト認証は $HOME/.ssh/known_hosts ファイルにホスト鍵が登録されていることが前提で， known_hosts ファイルがない，または known_hosts にホスト鍵がない場合は\n$ go run main.go ssh: handshake failed: knownhosts: key is unknown という感じにエラーになる。\nでは，これを使って実際にコードを書いてみる。\ngithub.com/lib/pq + github.com/goark/sshql まずは PostgreSQL 用ドライバ github.com/lib/pq と github.com/goark/sshql を組み合わせるところから。 こんな感じに書ける。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/pgdrv\u0026#34; ) func main() { dialer := \u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, } pgdrv.New(dialer).Register(\u0026#34;postgres+ssh\u0026#34;) db, err := sql.Open(\u0026#34;postgres+ssh\u0026#34;, \u0026#34;postgres://dbuser:dbpassword@localhost:5432/example?sslmode=disable\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer dialer.Close() defer db.Close() rows, err := db.Query(\u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } for rows.Next() { var id int64 var name string if err := rows.Scan(\u0026amp;id, \u0026amp;name); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;ID: %d Name: %s\\n\u0026#34;, id, name) } rows.Close() } \u0026quot;postgres+ssh\u0026quot; としてドライバを登録し（名前は何でもOK），この名前を sql.Open() 関数で指定しているのがポイントである。 あとは database/sql の機能をそのまま使うことができる。\ngithub.com/goark/sshql/pgdrv パッケージ内部で github.com/lib/pq パッケージを呼び出しているため\nimport _ \u0026#34;github.com/lib/pq\u0026#34; のようなインポートは不要である。\ngithub.com/jackc/pgx + github.com/goark/sshql github.com/jackc/pgx は github.com/lib/pq の後継とも言えるパッケージである。 標準 database/sql パッケージと組み合わせて使うことも可能だが，自身が database/sql 互換のインタフェースを持っていて更に独自の機能も搭載している。 PostgreSQL にアクセスするなら，個人的にはこちらのほうがお勧めである。\n拙作 github.com/goark/sshql と組み合わせて使うにはちょっと変則的な初期化コードを書く。 こんな感じ。\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/jackc/pgx/v4/pgxpool\u0026#34; ) func main() { dialer := \u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, } cfg, err := pgxpool.ParseConfig(\u0026#34;postgres://dbuser:dbpassword@localhost:5432/example?sslmode=disable\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } cfg.ConnConfig.DialFunc = dialer.DialContext if err := dialer.Connect(); err != nil { fmt.Fprintln(os.Stderr, err) return } defer dialer.Close() pool, err := pgxpool.ConnectConfig(context.TODO(), cfg) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer pool.Close() rows, err := pool.Query(context.TODO(), \u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } rows.Close() for rows.Next() { var id int64 var name string if err := rows.Scan(\u0026amp;id, \u0026amp;name); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;ID: %d Name: %s\\n\u0026#34;, id, name) } } まず pgx.ConnConfig を含む pgx/pgxpool.Config 構造体を作って，そこに dialer.DialContext() メソッドを登録するイメージ。 pgx ドライバーをオープンする前に dialer.Connect() つまり SSH 接続を明示的に記述する必要がある。\n一見まどろこしく見えるが， pgx/pgxpool.Config 構造体を使って logger 登録を含むカスタマイズができるので，実用上はそれほど迂遠なコードではなかったりする。 接続ごとにインスタンスを作れるので，グローバルに名前をつけてドライバーを登録するより合理的かもしれない。\ngithub.com/go-sql-driver/mysql + github.com/goark/sshql MySQL 用ドライバ github.com/go-sql-driver/mysql と github.com/goark/sshql との組み合わせはこんな感じ。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/mysqldrv\u0026#34; ) func main() { dialer := \u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, } mysqldrv.New(dialer).RegisterDial(\u0026#34;ssh+tcp\u0026#34;) db, err := sql.Open(\u0026#34;mysql\u0026#34;, \u0026#34;dbuser:dbpassword@ssh+tcp(localhost:3306)/dbname\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer dialer.Close() defer db.Close() rows, err := db.Query(\u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } for rows.Next() { var id int64 var name string if err := rows.Scan(\u0026amp;id, \u0026amp;name); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;ID: %d Name: %s\\n\u0026#34;, id, name) } rows.Close() } github.com/lib/pq のときとは違いドライバー名ではなくプロトコル名（通常は \u0026quot;tcp\u0026quot; など）として登録し DSN に登録したプロトコル名（ここでは ssh+tcp）を含める。 あとは database/sql の機能をそのまま使うことができる。\ngithub.com/goark/sshql/mysqldrv パッケージ内部で github.com/go-sql-driver/mysql パッケージを呼び出しているため\nimport _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; のようなインポートは不要である。\n参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n今回のパッケージは github.com/mattn/pqssh の事実上の fork である。同パッケージに敬意を表して拙作の方も MIT ライセンスで提供している。感謝！\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "チェーンお掃除を試してみる",
      "section": "remark",
      "description": "だいぶ汚れてた。これなら隔週くらいで掃除したほうがいいかも",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/cleaning-the-chain/",
      "published": "2022-09-25T09:48:37+00:00",
      "update": "2022-09-25T10:08:52+00:00",
      "content": "さて，自転車納車から2週間ほど経ったのでチェーンの汚れチェックを兼ねてお掃除をしてみることにした。\n最近は便利な道具が簡単に手に入るんだねぇ。 しかも Amazon で普通に買えるし。\nAmazonベーシック マイクロファイバー クリーニングクロス 24枚入 (400mm x 300mm) 薄手 洗車ふきとり Amazonベーシック(Amazon Basics) (Release 2013-09-11) Automotive B009FUF6DM (ASIN), 0885755921844 (EAN), 5050053546555 (EAN), 0841710104554 (EAN), 841710104554 (UPC), 885755921844 (UPC) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 自転車掃除用のウェス（waste）として購入。1枚50円程度と考えるなら百均で売ってるのと同程度の値段か？\nreviewed by Spiegel on 2022-09-25 (powered by PA-APIv5)\nワコーズ CHL チェーンルブ 浸透性チェーン用防錆潤滑剤 A310 180ml A310 ワコーズ(Wako\u0026#39;s) Automotive B0060F3XS0 (ASIN), 4938473013103 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 自転車のチェーンの防錆潤滑剤。お手軽簡単。 “lub” は lubricate の略？\nreviewed by Spiegel on 2022-09-25 (powered by PA-APIv5)\n今回は以下の動画を参考にチェーンの簡易掃除をしてみた。\n3分で終わるチェーンの洗浄と注油【ロードバイクメンテンス】 - YouTube おー。 ホンマに3分くらいで作業完了。 めっさお手軽。 ついでにスプロケットもちょっと拭き掃除した結果がこれ。\nキレイになりました | Flickr 新品のウェスがだいぶ汚れたねぇ。 これなら隔週くらいで掃除したほうがいいかもしれん。 空気圧チェックのついでにちょっとお掃除する感じかな。\nホイールを外す勇気はまだない1（笑） 一応，油圧ディスク・ブレーキの扱いについてはお店で教えてもらったし専用工具も（付属品で付いてたので）あるんだけどね。 ホイールを外すならスタンドが欲しいところやねぇ。 借家住まいで水洗いは無理だし，とりあえずチェーン周り以外はこまめに拭き掃除するくらいで。\n参考 ロードバイクの「水洗い洗車」を解説します - YouTube 機械は苦手なんだよ。私は ICE (In-Circuit Emulator) のプローブ（当時2万円）を逆差しして燃やした実績のある男です（笑）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "2022-09-25 のブックマーク",
      "section": "bookmarks",
      "description": "「Linus Torvalds: Rust will go into Linux 6.1」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/09/25-bookmarks/",
      "published": "2022-09-25T04:59:50+00:00",
      "update": "2022-09-25T05:00:11+00:00",
      "content": "リリース情報 Release August 2022 Recovery 2 · microsoft/vscode · GitHub Release v1.0.0: Release Wasmtime 1.0.0 (#4930) · bytecodealliance/wasmtime · GitHub WebAssemblyランタイム「Wasmtime」がバージョン1.0に到達、本番利用に対応。Bytecode Allianceによる事実上の参照実装 － Publickey 「Thunderbird 102.3.0」が公開 ～プロファイルのインポートと開発者ツールに仕様変更【9月22日追記】 - 窓の杜 「Firefox 105」が安定版に ～印刷オプションを拡充、メモリ不足でも安定して動作 - 窓の杜 Release v0.104.0 · gohugoio/hugo · GitHub Release 4.4.13_0 · nyaosorg/nyagos · GitHub Release v0.8.3 · nyaosorg/go-readline-ny · GitHub セキュリティ＆プライバシー関連 iOS 16に新たに搭載、「最悪の事態」を想定した2つのセキュリティ機能 | WIRED.jp : うーん\u0026hellip; 銃声を検知して犯罪を減らすはずのAI「ShotSpotter」が街を混乱に陥れている - GIGAZINE 「積極的サイバー防御」（アクティブ・サイバー・ディフェンス）とは何か ―より具体的な議論に向けて必要な観点について― - JPCERT/CC Eyes | JPCERTコーディネーションセンター公式ブログ Google ChromeとMicrosoft Edgeで機密性の高い情報が拡張スペルチェック機能経由で外部サーバーに送信されている - GIGAZINE : スペルチェックはOFFにすること Telegram Has a Serious Doxing Problem | WIRED スマホ位置情報の精度が向上、“高さ”特定可能に。日本で10月より「垂直測位サービス」提供開始～MetCom【地図と位置情報】 - INTERNET Watch Lens reflections may betray your secrets in Zoom video calls • The Register Leaking Screen Information on Zoom Calls through Reflections in Eyeglasses - Schneier on Security 暗号化の規制ではなく代替案の模索を：オランダ政府にサイバーセキュリティ諮問機関が勧告 | p2ptk[.]org Go言語で作成したプログラムがWindows Defenderに「Wacatac!ml」と誤検知される件と回避方法 SF感がすごい。ドローンを迎撃するマシンガン型ジャマー | ギズモード・ジャパン : これ走行中の自動車にも効果があるんじゃ\u0026hellip; チョークポイント資本主義 ミュージシャンが報われないのはSpotifyが買い叩いてるせい？ それともレコードレーベルが強欲だから？ | p2ptk[.]org 知財関連 Netflixが頭を悩ませる『パスワード共有』問題のソリューションをAdobeが提供開始 | p2ptk[.]org 違法素数 | 巨大数研究 Wiki | Fandom AGPLを理解する: もっとも誤解されたライセンス | フューチャー技術ブログ Linux または Ubuntu に関する話題 うぶんちゅ！ まがじん ざっぱ～ん♪ vol.13：team zpn Amazon.co.jp: ［試して理解］Linuxのしくみ　―実験と図解で学ぶOS、仮想マシン、コンテナの基礎知識【増補改訂版】 eBook : 武内 覚: 本 Ubuntu 22.04 その274 - UI向けに最適化された日本語のフォント・IPA UIゴシックフォントをインストールするには - kledgeb : そんなんあったっけ？ と思ったが Ver.002 まではあったらしい。 Ver.003 でライセンスとか随分変わったからな Go 言語関連 GitHub - noahgorstein/jqp: A TUI playground to experiment with jq Wails v2 Released | Wails Java 言語関連 Release v2.6.12 · spring-projects/spring-boot · GitHub Release v2.7.4 · spring-projects/spring-boot · GitHub 天文関連 各地のこよみ (日の出入り、月の出入り、南中時、月齢) - 国立天文台暦計算室 : 日没時間が知りたくて その他 Building the future of the command line · GitHub Denoのフルスタックフレームワーク「Fresh 1.1」登場。プラグインシステム、Preact DevTools対応、404ページのレンダリングなど新機能 － Publickey BigQueryへMySQLやPostgreSQLから直接ニアリアルタイムでレプリケーション可能に。「Datastream for BigQuery」登場 － Publickey Linus Torvalds: Rust will go into Linux 6.1 | ZDNET 「Linux」、バージョン6.1でRustを導入へ\u0026ndash;トーバルズ氏が明言 - ZDNet Japan Chromeに実装された疑似クラス「:has()」がjQueryの「:has()」に悪影響、一定の条件下でWebサイトが壊れる可能性 － Publickey メディアとしてのメタバースのメッセージを（ニコラス・カーが底意地悪く）読み解く – WirelessWire News WirelessWire Newsブログ更新（メディアとしてのメタバースのメッセージを（ニコラス・カーが底意地悪く）読み解く） - YAMDAS現更新履歴 Announcing Rust 1.64.0 | Rust Blog NVIDIA、AIで目線を調整する技術 - PC Watch Apple is raising prices on App Store across multiple countries in Asia and Europe • TechCrunch Rust 2024\u0026hellip;the year of everywhere? ブログ: Rust 2024\u0026hellip;あらゆる場所に対応する年? Jens Tore Fremmegaard\u0026rsquo;s answer to How is MySQL pronounced correctly? - Quora : MySQL の “My” は人名なんだって "
    },
    {
      "title": "APT で upgrade/dist-upgrade できなかったとき",
      "section": "remark",
      "description": "apt install で無理やりアップグレードすればいいらしい",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/cannot-upgrade-with-apt/",
      "published": "2022-09-25T04:33:56+00:00",
      "update": "2022-09-25T09:48:45+00:00",
      "content": "実は今回で2度目。 たぶん3度目もあるだろうということで，覚え書きとして残しておく。 つっても大した話ではないが。\nAPT (Advanced Package Tool) で apt upgrade する際「以下のパッケージは保留されます」みたいな感じで保留されることがある。 そういうときは大抵 apt dist-upgrade で何とかなると聞いているのだが（本来はディストリビューションのアップグレードで使うコマンド），それでも上手くアップグレードしてくれない場合がある。\n諦めてググってみたら「結局apt installで明示的に指定すればいいみたいです」という身も蓋もない解決策を見かけて「ええのん？」と思ったが，他に方法も見当たらないので思い切って apt install でアップグレードした。 なお apt install を使う場合は対象のパッケージを明示する必要がある。\nいや，流石に xwayland や systemd がアップグレードされないのは拙いだろう，ということで。 なんか NAS に SAMBA 経由でアクセスできなくなってたし。\napt install で無理やりアップグレードして再起動（厳密にはシャットダウンからのコールド・スタート）後 SAMBA アクセスもちゃんとできるようになった。 まずはめでたし。 ホンマにええんかなぁ\u0026hellip;\n参考 スーパーユーザーなら知っておくべきLinuxシステムの仕組み Brian Ward (著), 柴田 芳樹 (翻訳) インプレス 2022-03-08 (Release 2022-03-08) 単行本（ソフトカバー） 4295013498 (ASIN), 9784295013495 (EAN), 4295013498 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元で PDF 版が買えるが，今回はセキュリティ・エリアにも持ち込めるよう紙の本を買った。Linux システムの扱い方に関するリファレンス本として優れている。最初に軽く流し読みして，必要に応じて該当項目を拾い読みしていけばいいだろう。\nreviewed by Spiegel on 2022-07-17 (powered by PA-APIv5)\n"
    },
    {
      "title": "駐輪場をたずねて三千里（ってほどでもない）",
      "section": "remark",
      "description": "自転車ってどこ停めればいいの？",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/bike-parking/",
      "published": "2022-09-24T12:32:18+00:00",
      "update": "2022-09-24T12:49:42+00:00",
      "content": "持病持ちの私は定期的にかかりつけのクリニックに通っている。 「せっかくチャリンコ買うたし乗っていこうかな」と思ったのだが「あれ？ どこに自転車停めればいいんだ？」となった。\n私が地元松江市を離れたのは大学進学のときで，それまでは自転車なんかどこにでも停め放題だったし，わざわざ自転車を盗む奴もいなかった。 牧歌的な時代である（笑）\nしかし今はそういうわけにはいかない。 その辺に停めると怒られるし，場所によっては問答無用で撤去される。 しかもスポーツサイクルはママチャリよりも盗難リスクが高い（高価な上に軽くて運びやすいから）。 広島にいた時はホンマにカジュアルに盗む奴がいたからなぁ（広島では自転車は施錠せず放置してはいけないし，傘は傘立てに置いてはいけない。秒で盗られるw）。\nというわけで，今回は自転車移動を諦めて，バス\u0026amp;徒歩で松江市内で行きそうな場所の駐輪場を調べてみた。\nまずは かかりつけ医 まずはかかりつけのクリニックだが，一応駐輪スペースがあった。 ていうか，みんなそこに停めてるので多分そうなんだろうって感じ（笑） 地球ロック不可。\n松江市立病院 かかりつけ医があるので予防接種のとき以外は用がないのだが，この前4回目の接種で行ったばっかりなので。\nヤクをキメてきたぜ（4回目） | Flickr 「交通アクセス」のページを見ても駐輪場の場所が分かりにくくて。 一般駐車場出入口から入ると途中で自転車を抱えて階段を降りる羽目になる罠（笑） 道路をぐるっと回って裏手から入らないといけない。 運がよければ地球ロック可。\n島根県立美術館 まだ行ったことないけどそのうち行こうと思っているのが島根県立美術館。 私が高校生の頃は確かそこに小学校があった筈。\n「美術館ロータリー内駐輪場・バイク置き場をご利用ください」とあるのだが，路線バスでロータリーを回ってるときには見当たらなかった。 今度はチャリでちょろんと行ってみよう。\n島根県立図書館 ここは子供の頃からチャリンコで通ってたから大丈夫。 駐輪場の場所も昔通り。 今でも週末にバスで行くことがあるが，停まってる2輪車が殆どないんだよなぁ。 まぁ，好都合だけど。 運がよければ地球ロック可。\n松江駅東・西駐輪場 JR 松江駅の周辺は路上の駐輪は禁止されている。\n松江駅付近自転車路駐禁止区域 | Flickr その代わり駅の東西に駐輪場があって，そこそこの台数（松江市の人口基準1 でね）を停めれる感じ。 有料である。\n松江駅東駐輪場 | Flickr 駐輪場の管理人のおじさんに訊いてみたが，一見さんで利用する場合と定期で契約する場合で設備が違うようだ。 もちろん定期契約のほうが自転車をしっかり固定できるし，スタッフの方が見回って監視してくれている。 ちなみに3ヵ月定期契約で4,180円。 安全を込みで考えるなら決して高い値段ではないが，私は週末しか利用しないからなぁ。 悩みどころ。\n松江イオン JR 松江駅近くのイオンは路駐禁エリアからギリギリ外れてるのよ。 上の看板地図で言うと左端にある「松江サティ」と書かれている辺りが現在の松江イオン。\nまぁ，大規模小売店なので駐輪場はあるにはあるのだが\n松江イオンの駐輪場 | Flickr すンごい密集していて，しかも自転車を固定できない。 一応屋根はあるけど基本的に吹き曝しなので風の強い日は将棋倒しになってる光景をたまに見かける。 さらに（改めて見て気がついたが）ニッパで切れそうな安いワイヤーロックで括ってあるだけの（そこそこいいお値段ぽい）クロスバイクが放置気味に置いてあったりして「やっぱ松江って田舎なんだなぁ」とほっこりしたり（笑）\n正直に言ってここには停めたくない。 それなら多少歩いても松江駅の駐輪場に停めるわ。\n月に1,2回程度とはいえ，私は結構利用してるんだよね。 髪切ったりとか回るお寿司屋さんで昼飯喰ったりとか2。\n昼飯 | Flickr んー。 やっぱ松江駅の駐輪場を基点にしてあとは徒歩・バスで周辺を歩き回るのがいいだろうか。\nその他 駐輪スペースに気をつけながら周囲を見回すと2輪が微妙に冷遇されているのがよく分かる。\n田舎なので，コンビニ程度でもそこそこ広く駐車スペースがあるんだけど，やはり自動車中心で「自転車ってどこ停めればいいの？」な感じ。 まぁ，元々通勤用に買ったので，お買い物自転車にするつもりはないし，いいっちゃあいいんだけどね。\nせっかく安くもない買い物をしたんだから，身体を自転車に慣らしつつ，少しずつ行動範囲を広げていければなぁ，と思ったり。 そのために今後も駐輪場をたずねて回る必要があるかもしれないけど（笑）\nブックマーク ロードバイクをパクられないためにやっておくべき3つのこと - YouTube 松江城自転車駐輪場マップ 島根県松江市の自転車駐輪場一覧 - NAVITIME 参考 ブリヂストン(BRIDGESTONE) コンパクトワイヤーロック ブラック 長さΦ3×180cm WL-SP1 ブリヂストン(BRIDGESTONE) スポーツ用品 B00DL74Q0Y (ASIN), 4977716051878 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 本来の鍵とは別に，コンビニとかでごく短時間自転車を停めるために購入。ニッパで切れそうだが「鍵をかけている」という状態が示せればカジュアル盗難は抑止できる？ みたいな。\nreviewed by Spiegel on 2022-09-24 (powered by PA-APIv5)\n松江市における「住民基本台帳登録数」は2022年8月末時点で198,341人だそうな。20万人いかんのか。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nもちろんノンアルコール・ビールっすよ。若い頃ならともかく，もう昼間から呑んだくれる元気はない（笑）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "SSH, MySQL, Zerolog, そして Kra",
      "section": "golang",
      "description": "LOAD DATA INFILE 文を駆動させるところまで。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/ssh-mysql-zerolog-and-kra/",
      "published": "2022-09-22T14:05:54+00:00",
      "update": "2022-09-23T04:11:04+00:00",
      "content": "SSH, MySQL, Zerolog VPS 上に構築された MySQL サービスに大量のデータを送り込む必要がありまして。 Go でバッチ処理を組もうと考えたわけだ。 当然 MySQL サービスは VPS の外から直接アクセスできないので SSH トンネルをくぐる必要がある。\nというわけで最初に作ったのが github.com/goark/sshql だった。\nSSH 越しに DB サーバにアクセスする 再掲載すると，こんな感じに書ける。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/mysqldrv\u0026#34; ) func main() { dialer := \u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, } mysqldrv.New(dialer).RegisterDial(\u0026#34;ssh+tcp\u0026#34;) db, err := sql.Open(\u0026#34;mysql\u0026#34;, \u0026#34;dbuser:dbpassword@ssh+tcp(localhost:3306)/dbname\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } defer dialer.Close() defer db.Close() rows, err := db.Query(\u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } for rows.Next() { var id int64 var name string if err := rows.Scan(\u0026amp;id, \u0026amp;name); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;ID: %d Name: %s\\n\u0026#34;, id, name) } rows.Close() } ssh+tcp という名前で dialer を登録し，この名前を使って DSN (Data Source Name) を構成するというのがポイント。 Dialer のクローズを忘れずに（笑）\nただ，これだとログが取れない。 んで，どうせログを取るなら github.com/rs/zerolog パッケージを使いたいわけですよ。\nそこで登場するのが github.com/simukti/sqldb-logger パッケージ。 これを使えば標準の sql.DB に zerolog などのサードパーティ製 logger を仕込むことができる。 こんな感じ。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/mysqldrv\u0026#34; \u0026#34;github.com/rs/zerolog\u0026#34; sqldblogger \u0026#34;github.com/simukti/sqldb-logger\u0026#34; \u0026#34;github.com/simukti/sqldb-logger/logadapter/zerologadapter\u0026#34; ) func main() { dialer := \u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, } mysqldrv.New(dialer).RegisterDial(\u0026#34;ssh+tcp\u0026#34;) dsn := \u0026#34;dbuser:dbpassword@ssh+tcp(localhost:3306)/dbname\u0026#34; mysqlDb, err := sql.Open(\u0026#34;mysql\u0026#34;, dsn) if err != nil { fmt.Fprintln(os.Stderr, err) return } db := sqldblogger.OpenDriver( dsn, mysqlDb.Driver(), zerologadapter.New(zerolog.New(os.Stderr)), sqldblogger.WithMinimumLevel(sqldblogger.LevelDebug), ) defer dialer.Close() defer db.Close() rows, err := db.Query(\u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } for rows.Next() { var id int64 var name string if err := rows.Scan(\u0026amp;id, \u0026amp;name); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;ID: %d Name: %s\\n\u0026#34;, id, name) } rows.Close() } DSN を2回指定しないといけないのが若干鬱陶しいが，ともかくこれで zerolog による構造化ログが出るようになった。\nさらに Kra を仕込む 2022年春の Go Conference でとても感銘を受けたのが github.com/taichi/kra パッケージ。\nDBアクセスライブラリ Kra いや ent とかってデータ構造とその関係を最初から構築するならいい道具だと思うけど（コードで設計できるのは素晴らしい！），既にある RDBMS 環境を使う場合には必ずしもマッチしないのよね。 更に言うと，既存 ORM やクエリビルダとかの中途半端な SQL 抽象化・隠蔽にはウンザリしてるのよ（この辺は Go に限らないけど）。 それなら最初からガチで SQL 文を書いて，クエリプランをチェックしつつ評価・最適化して，それから実装を進めるべきだと常々思っていた1。\nというわけで github.com/taichi/kra を使うチャンスを伺っていたのだが，今回はお試しにはちょうどいいサイズだったので採用した。 とはいえ，今回のような構成ではどうすればいいのか分からなくて kra パッケージのソースコードやサンプルコードを眺めながら，まずは以下のように書いてみる。\npackage main import ( \u0026#34;database/sql\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/goark/sshql\u0026#34; \u0026#34;github.com/goark/sshql/mysqldrv\u0026#34; \u0026#34;github.com/rs/zerolog\u0026#34; sqldblogger \u0026#34;github.com/simukti/sqldb-logger\u0026#34; \u0026#34;github.com/simukti/sqldb-logger/logadapter/zerologadapter\u0026#34; \u0026#34;github.com/taichi/kra\u0026#34; kraSql \u0026#34;github.com/taichi/kra/sql\u0026#34; ) func main() { dialer := \u0026amp;sshql.Dialer{ Hostname: \u0026#34;sshserver\u0026#34;, Port: 22, Username: \u0026#34;remoteuser\u0026#34;, Password: \u0026#34;passphraseforauthkey\u0026#34;, PrivateKey: \u0026#34;/home/username/.ssh/id_eddsa\u0026#34;, } mysqldrv.New(dialer).RegisterDial(\u0026#34;ssh+tcp\u0026#34;) dsn := \u0026#34;dbuser:dbpassword@ssh+tcp(localhost:3306)/dbname\u0026#34; mysqlDb, err := sql.Open(\u0026#34;mysql\u0026#34;, dsn) if err != nil { fmt.Fprintln(os.Stderr, err) return } db := kraSql.NewDB( sqldblogger.OpenDriver( dsn, mysqlDb.Driver(), zerologadapter.New(zerolog.New(os.Stderr)), sqldblogger.WithMinimumLevel(sqldblogger.LevelDebug), ), kraSql.NewCore(kra.NewCore(kra.MySQL)), ) defer dialer.Close() defer db.Close() rs, err := db.Query(context.TODO(), \u0026#34;SELECT id, name FROM example ORDER BY id\u0026#34;) if err != nil { fmt.Fprintln(os.Stderr, err) return } rows := rs.Rows() for rows.Next() { rec := struct { Id int64 `db:\u0026#34;id\u0026#34;` Name string `db:\u0026#34;name\u0026#34;` }{} if err := kraSql.NewRows(kraSql.NewCore(kra.NewCore(kra.MySQL)), rows).Scan(\u0026amp;rec); err != nil { fmt.Fprintln(os.Stderr, err) break } fmt.Printf(\u0026#34;%#v\\n\u0026#34;, rec) } rows.Close() } クエリ結果の取り出しが若干まどろこしいが，これは kra/sql.Rows には何故か Next() メソッドがないため2。 しょうがないので 標準の sql.Rows を取り出して，そちらの Next() メソッドで回している。\nこれでちゃんと動いてログも取れているのを確認できた。\nトランザクション制御 トランザクション制御用に以下のような関数を用意する。\nfunc Transaction(ctx context.Context, db *kraSql.DB, opts *sql.TxOptions, fn func(tx *kraSql.Tx) error) error { tx, err := db.BeginTx(ctx, opts) if err != nil { return errs.Wrap(err) } defer func() { if v := recover(); v != nil { _ = tx.Rollback() panic(v) } }() if err := fn(tx); err != nil { if rErr := tx.Rollback(); rErr != nil { return errs.Wrap(rErr, errs.WithCause(err)) } return errs.Wrap(err) } if err := tx.Commit(); err != nil { return errs.Wrap(err) } return nil } なお，エラーハンドリングには自作の github.com/goark/errs パッケージを使っている。 zerolog と組み合わせてエラーを構造化してログに吐けるのが利点。\n実際にトランザクション処理を行う場合は，たとえば\n// logger := zerolog.New(os.Stderr) // ctx := context.TODO() values := struct { Id int64 `db:\u0026#34;id\u0026#34;` Name string `db:\u0026#34;name\u0026#34;` }{ Id: 100, Name: \u0026#34;Alice\u0026#34;, } if err := Transaction(ctx, db, \u0026amp;sql.TxOptions{}, func(tx *kraSql.Tx) error { stmt, err := tx.Prepare(ctx, \u0026#34;INSERT INTO example(id,name) VALUES (:id,:name)\u0026#34;) if err != nil { return errs.Wrap(err) } defer stmt.Close() res, err := stmt.Exec(ctx, \u0026amp;values) if err != nil { return errs.Wrap(err) } count, err := res.RowsAffected() if err != nil { return errs.Wrap(err) } logger.Info().Int64(\u0026#34;affected\u0026#34;, count).Send() return nil }); err != nil { logger.Error().Interface(\u0026#34;error\u0026#34;, err).Send() ... } てな感じに書ける。 こういうのが kra にあるとめがっさ便利なんだけどねぇ（それを言い出すとパッケージがどんどん膨れてしまうのだがw）。\nLOAD DATA INFILE 文で大量のデータを突っ込む さて，いよいよ MySQL の テーブルに大量のデータを突っ込むのだが， INSERT 文でちまちまやってたら日が暮れてしまうので（実際に試して日が暮れた） LOAD DATA INFILE 文を使うことにする。\nMySQL :: MySQL 5.6 リファレンスマニュアル :: 13.2.6 LOAD DATA INFILE 構文 こんな感じの SQL 文。\nLOAD DATA LOCAL INFILE \u0026#39;input.file\u0026#39; INTO TABLE exsample_table CHARACTER SET utf8mb4 FIELDS TERMINATED BY \u0026#39;\\t\u0026#39; LINES TERMINATED BY \u0026#39;\\n\u0026#39; ( field1, field2, ... ) これでローカルにある input.file ファイルの内容をリモートの MySQL の exsample_table テーブルに送り込める。 (field1, field2, ...) の並びと入力ファイルの要素の並びが同じであることが前提。 またサーバ側の MySQL サービスが --local_infile オプション付きで起動されていること。\nCHARACTER SET 句はファイルの文字エンコードディングがDBサービスのデフォルトと異なる場合に設定する。 FIELDS 句および LINES を省略した場合のデフォルト値はこうなっているそうな。\nFIELDS TERMINATED BY \u0026#39;\\t\u0026#39; ENCLOSED BY \u0026#39;\u0026#39; ESCAPED BY \u0026#39;\\\\\u0026#39; LINES TERMINATED BY \u0026#39;\\n\u0026#39; STARTING BY \u0026#39;\u0026#39; いわゆる TSV (Tab Separated Value) 形式のレコードだね。 これ以外の形式なら明示的に設定する必要がある。\nで，これを github.com/go-sql-driver/mysql パッケージで実装するには，3つのステップが必要。\nひとつ目はデータ読み込みハンドラを登録する。 こんな感じ3。\nfile, err := os.Open(\u0026#34;input.file\u0026#34;) if err != nil { return err } defer file.Close() mysql.RegisterReaderHandler(\u0026#34;data\u0026#34;, func() io.Reader { return file }) 次に実際の SQL 文を発行する。\n// logger := zerolog.New(os.Stderr) // ctx := context.TODO() if err := Transaction(ctx, db, \u0026amp;sql.TxOptions{}, func(tx *kraSql.Tx) error { res, err := tx.Exec(ctx, `LOAD DATA LOCAL INFILE \u0026#39;Reader::data\u0026#39; INTO TABLE exsample_table (field1, field2, ...)`) if err != nil { return errs.Wrap(err) } count, err := res.RowsAffected() if err != nil { return errs.Wrap(err) } logger.Info().Int64(\u0026#34;affected\u0026#34;, count).Send() return nil }); err != nil { logger.Error().Interface(\u0026#34;error\u0026#34;, err).Send() ... } ファイルを指定する部分に先ほど登録したハンドラの名前を使って 'Reader::data' と指定する。 爆速でした。\nちなみに，うっかり tx.Prepare() で前準備しようとすると「そんな構文はサポートしてない」（←超意訳）と怒られる。 PREPARE で対応している構文は以下のページが参考になる。\nMySQL :: MySQL 8.0 リファレンスマニュアル :: 13.5 プリペアドステートメント 最後に mysql.DeregisterReaderHandler() 関数で登録を解除する。 後始末はきちんとね。\nブックマーク 【自分用のメモ】MySQL8でインポート・エクスポート - Qiita 参考図書 プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\nデベロッパーゴースーパーゴラン Tシャツ Geek Go Super Golang Tees ウェア\u0026amp;シューズ B09C2XBC2F (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; ついカッとなってポチった。反省はしない\nreviewed by Spiegel on 2022-04-10 (powered by PA-APIv5)\nSQL はひとつの独立した言語で（チューリング完全），宣言型プログラミング言語と考えるのが分かりやすい（異論は認めるw）。宣言型で分かりやすいのは正規表現だろう（関数型言語には宣言型が多い。 Lisp とか Haskell とか）。特に Go は宣言型の言語とはあまり相性がよくない。たとえば，正規表現の（構文解析やコンパイラではなく）ビルダを作ろうと考える人は少ないだろう（労力に見合わない）。どの言語・フレームワークでも同じことだが ORM やクエリビルダを使って頑張って抽象化や隠蔽をしても上手くマッチしない局面が多く，結局は「ガチの SQL でいいぢゃん。 PREPARE 構文で事前準備して変数部分はプレースホルダ経由で渡せば安全は確保される」となる。そういう意味じゃ Go 標準の database/sql パッケージは，かなり妥当な割り切りをしてると思う。まぁ，後方互換性を保つためにちょっとアレな感じになっているのは否めないけど（笑）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\ngithub.com/jackc/pgx 専用の kra/pgx.Rows にはちゃんと Next() メソッドが付いている。提供されているメソッドが微妙に違う理由はよく分からないが，ソースコードを眺めるに，何となく意図的にそうなってる気がする。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n実は mysql.RegisterLocalFile() 関数を使えば直接ファイルパスを登録することができる。ハンドラ登録で io.Reader interface 型で渡すほうが応用が効きやすいので，今回はこちら。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Java 19 がリリースされた",
      "section": "release",
      "description": "2023-03 までの短期サポート・バージョン",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2022/09/java-19-is-released/",
      "published": "2022-09-20T20:13:14+00:00",
      "update": "2022-09-25T05:00:11+00:00",
      "content": "予定通り Java 19 がリリースされた。 2023-03 までの短期サポート・バージョンである。\nOpenJDK JDK 19 GA Release JDK 19 JDK 19 Release Notes Overview (Java SE 19 \u0026amp; JDK 19) 主な内容は以下の通り。\n405: Record Patterns (Preview) 422: Linux/RISC-V Port 424: Foreign Function \u0026amp; Memory API (Preview) 425: Virtual Threads (Preview) 426: Vector API (Fourth Incubator) 427: Pattern Matching for switch (Third Preview) 428: Structured Concurrency (Incubator) via JDK 19 OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。 以下は完全手動でのインストール（笑）\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://download.java.net/java/GA/jdk19/877d6127e982470ba2a7faa31cc93d04/36/GPL/openjdk-19_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-19_linux-x64_bin.tar.gz $ sudo ln -s jdk-19 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;19\u0026#34; 2022-09-20 OpenJDK Runtime Environment (build 19+36-2238) OpenJDK 64-Bit Server VM (build 19+36-2238, mixed mode, sharing) LTS 版 Java バイナリが欲しいなら Adoptium で取得できる。\n私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern Oracle Java のサポート期間 “Oracle Java SE Support Roadmap” より。\nRelease GA Date Premier Support Extended Support 11 (LTS) 2018-09 2023-09 2026-09 17 (LTS) 2021-09 2026-09 2029-09 18 2022-03 2022-09 - 19 2022-09 2023-03 - 20 2023-03 2023-09 - 21 (LTS) 2023-09 2028-09 2031-09 2022-09 時点で Premier Support が終了しているものは除いている。 Java 8 については Adoptium などで最新バイナリを取得可能。\nぶっちゃけ Java 17 の Premier Support が2026年まであるので，少なくとも LTS に関しては 17→21 への換装は進まないと思うなぁ。 11→21 はあるかもしれんけど。 Azure の Web Apps とか今年に入ってようやく Java 17 に対応したんだぜ。 そんで来年は21とか LTS の意味がねー！ 多分その次に出るであろう 25? まで保留だよな。\nブックマーク Java 19が正式リリース。より軽量な仮想スレッド、RISC-Vへの移植など新機能。1年後のJava 21が次のLTS版に － Publickey Oracle、「Java 19」を発表 ～より軽量な「仮想スレッド」をプレビュー導入 - 窓の杜 JDK 19 Security Enhancements 参考図書 Spring Data JPAプログラミング入門 溝口賢司 (著) 秀和システム 2017-08-03 (Release 2018-04-23) Kindle版 B07CKHR8C1 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; JPA のお勉強用に購入。紙のほうはプレミアが付いてるっぽいが Kindle で買えるよ。固定レイアウトだからブラウザの Kindle Cloud Reader で読めるし。真面目に基本を押さえて書いていて分かりやすい。\nreviewed by Spiegel on 2021-08-26 (powered by PA-APIv5)\nEffective Java 第3版 Joshua Bloch (著), 柴田 芳樹 (翻訳) 丸善出版 2018-10-30 単行本（ソフトカバー） 4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。\nreviewed by Spiegel on 2021-03-17 (powered by PA-APIv5)\nSpring Boot 2 入門: 基礎から実演まで 原田 けいと (著), 竹田 甘地 (著), Robert Segawa (著) 2020-05-22 (Release 2020-05-22) Kindle版 B0893LQ5KY (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; Spring Boot を勉強することになって急遽買った本。めっさ分かりやすかった。 PDF 版が欲しいくらい（笑） Spring Boot 2.7 対応にアップデートされていた。素敵！\nreviewed by Spiegel on 2022-08-14 (powered by PA-APIv5)\n2021-08-22 に PlantUML v1.2022.7 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "CC と NFT に関する FAQ を翻訳してみた",
      "section": "remark",
      "description": "なんたる蛮勇（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/09/nfts-and-cc/",
      "published": "2022-09-19T08:44:04+00:00",
      "update": "2022-09-20T20:21:23+00:00",
      "content": "いやぁ，ン年振りに cc-licenses セクションに記事を追加したぜ（笑）\n発端は yomoyomo さんの記事。\na16zが提唱するNFT向け「Can’t Be Evil」ライセンスとクリエイティブ・コモンズのNFTに対する見解 - YAMDAS現更新履歴 恥ずかしながら，この記事を読んではじめて Creative Commons が CC と NFT に関する FAQ を公開しているのを知ったですよ。\nFAQ: CC and NFTs - Creative Commons で，一念発起いたしまして，この FAQ の翻訳を敢行した。 やっちまったんだよ！\nNFT と CC Licenses なんたる蛮勇（笑）\nいやね，この前読んだ本で思ったわけさ。\n苦手・不得手は言い訳にならない！ ちなみに翻訳の内容については 全く自信がありません \u0026#x1f647;\nいや，ホンマにちょいちょい怪しい部分があるのよ。 もし「わしが見ちゃる！」という奇特な方がおられましたら，添削して頂けると助かります。 フィードバックはこちら（Twitter でも OK）。\n（訳文が正しいなら）けっこう読み応えのある FAQ だと思う。 上から順に全文読むことをお勧めします。 「NFT って何？」って方も一度読んでみたらいいと思うよ。\nその上で\nCC’s mission is not just sharing but better sharing—sharing in a way that promotes a more vibrant commons and generates more support for the creators of freely reusable works. via FAQ: CC and NFTs - Creative Commons という部分に軽く感動してしまった。 そうだよな。 これこそが Creative Commons の意義だよね。\nとりあえず\u0026hellip; もうしばらく英語はいいです。\nブックマーク New FAQ on NFTs and CC0 - Creative Commons a16z/a16z-contracts: a16z Contracts is a library for solidity contracts, including licenses 参考図書 クリエイティブ・コモンズ―デジタル時代の知的財産権 レッシグ,ローレンス (著), 敬士, 椙山 (著), 圭介, 上村 (著), 紘一郎, 林 (著), 絵美, 若槻 (著), 大洋, 土屋 (著), クリエイティブコモンズジャパン (編集), Lessig,Lawrence (原著) NTT出版 2005-03-01 単行本 475710152X (ASIN), 9784757101524 (EAN), 475710152X (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 残念ながら紙の本は実質的に絶版なんですよねぇ。是非デジタル化を希望します。\nreviewed by Spiegel on 2014-08-02 (powered by PA-APIv5)\n著作権は文化を発展させるのか: 人権と文化コモンズ 山田 奨治 (著) 人文書院 2021-07-29 (Release 2021-07-29) Kindle版 B099RTG3J7 (ASIN) 2021年夏に出てたのだが，仕事が忙しくなってすっかり忘れていた。これから読みます。\nreviewed by Spiegel on 2021-12-06 (powered by PA-APIv5)\n著作権法 第3版 中山 信弘 (著) 有斐閣 2020-09-04 単行本 4641243336 (ASIN), 9784641243330 (EAN), 4641243336 (ISBN) 第3版が出てた。第2版は図書館で借りて読んだが，途中でギブアップした。個人が興味本位で読める本ではないらしい（笑）\nreviewed by Spiegel on 2020-10-12 (powered by PA-APIv5)\n"
    }
  ]
}
