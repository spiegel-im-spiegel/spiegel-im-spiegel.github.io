{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "Ubuntu に KeePassXC を導入する",
      "section": "remark",
      "description": "APT または Snap から導入できるのだが Snap 版を利用したほうがいいみたい。 ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/08/installing-keepassxc-in-ubuntu/",
      "published": "2019-08-25T03:05:20+00:00",
      "update": "2019-08-25T03:06:57+00:00",
      "content": " 以前に Mono 版の KeePass を導入する手順を紹介したが Linux 用であればサードパーティの KeePassXC がよさげである。\nKeePassXC は KeePass のサードパーティ版である KeePassX の fork でマルチプラットフォームに対応している。 Windows や macOS の他，各種 Linux ディストリビューションにも対応しているようだ。\nUbuntu では APT または Snap から導入できるのだが1\n$ apt show keepassxc Package: keepassxc Version: 2.3.4+dfsg.1-1 Priority: optional Section: universe/utils Origin: Ubuntu Maintainer: Ubuntu Developers \u0026lt;ubuntu-devel-discuss@lists.ubuntu.com\u0026gt; Original-Maintainer: Julian Andres Klode \u0026lt;jak@debian.org\u0026gt; ...$ snap find keepassxc Name Version Publisher Notes Summary keepassxc 2.4.3 keepassxreboot - community driven port of the windows application “Keepass Password Safe” keepassx-elopio 2.0.2 elopio - KeePassX is a cross platform password safe ということで Snap 版を利用したほうがいいみたい。 というわけで，早速！\n$ sudo snap install keepassxc keepassxc 2.4.3 from Jonathan White (keepassxreboot) installed  これで Ubuntu のメニューから KeePassXC を起動できる。\n おおっ，日本語だ（笑）\n使い方は本家の KeePass とだいたい同じようだ。 ブラウザ連携は今のところ怖くて使う気にならない。 まぁ，そのうち気が向いたらね。\n削除する場合は\n$ sudo snap remove keepassxc  でおｋ。 ちなみにアップグレードは\n$ sudo snap refresh  で Snap 管理下にある全てのパッケージを一括でアップグレードできる。\nSnap はローカルにリポジトリ・データベースを持たないので（APT に比べて）扱いが簡単なのはいいのだが，こういうアプリ・ストア型のパッケージ管理システムは，どうしてもサービス提供者側の統制が強くなるので，好かんのだよなぁ。 一応 PPA にもリポジトリがあるみたいなのだが，うーん...\nブックマーク  GitHub - keepassxreboot/keepassxc: KeePassXC is a cross-platform community-driven port of the Windows application “Keepass Password Safe”. Ubuntu 19.04 その146 - Snap Storeからインストール可能なセキュリティーアプリ5選 - kledgeb   Ubuntu 18.04 以降は標準で Snap が入ってるらしい。 [return]   "
    },
    {
      "title": "MathJax v2.7.6 がリリースされた",
      "section": "release",
      "description": "つか v3 の（βが取れた）正式版が8月末（日本では9月初？）にようやく出るのか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/08/mathjax-v2_7_6-is-released/",
      "published": "2019-08-25T01:25:16+00:00",
      "update": "2019-08-25T01:29:36+00:00",
      "content": " Web ブラウザ上で高品質な数式表現を行うための JavaScript パッケージである MathJax v2.7.6 がリリースされた。\n MathJax v2.7.6 now available | MathJax  今回はメンテナンス・リリースで MathJax v3 正式リリースに向けた修正のようだ。\nThis is a maintenance release that fixes an issue with the latest.js file that is used to obtain the most current 2.x version of MathJax from one of the CDNs that serves MathJax. The problem is that the most current version is only obtained if the highest version on the CDN is version 2.x.y for some x and y, so when MathJax goes to version 3.0.0 (scheduled for August 31st), latest.js will find that the current CDN version is 3.0.0 and (correctly) will not switch to that, but instead will (incorrectly) use the version from which latest.js was loaded rather than the highest 2.x.y available. This means that when version 3.0 is released, sites using latest.js will fall back from version 2.7.5 to the version that they specified for latests.js. MathJax will still run on those pages, but it may be an earlier version than you have been getting in the past. via MathJax v2.7.6 now available  つか v3 の（βが取れた）正式版が8月末（日本では9月初？）にようやく出るのか。 MathJax v3 は configuration が大きく変わると聞いているので，しばらくは要注意だな。\nアップデートは計画的に。\nブックマーク  ちょこっと MathJax： 初期設定  参考図書  [改訂第7版]LaTeX2ε美文書作成入門 奥村 晴彦, 黒木 裕介 技術評論社 2017-01-24 大型本 4774187054 (ASIN), 9784774187051 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。\nreviewed by Spiegel on 2017-09-27 (powered by PA-API)\n "
    },
    {
      "title": "2019-08-25 のブックマーク",
      "section": "bookmarks",
      "description": "「「はやぶさ２」の再突入カプセル回収計画について」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/08/25-bookmarks/",
      "published": "2019-08-25T01:05:51+00:00",
      "update": "2019-08-25T01:06:13+00:00",
      "content": " リリース情報  Rails 6.0正式版がリリース。Action Textでリッチテキスト対応、Action Mailboxでメール処理、マルチデータベース、パラレルテストなど新機能 － Publickey MathJax v2.7.6 now available | MathJax  バベルのインターネット セキュリティ＆プライバシー関連  Don’t Let Encrypted Messaging Become a Hollow Promise | Electronic Frontier Foundation アップル、「Safari」のトラッキング防止ポリシーを公開--対策強化へ - ZDNet Japan 日本年金機構を騙る不審メールについてまとめてみた - piyolog 匿名制「ヘンタイ」ポルノサイトのユーザー情報110万件が流出 | TechCrunch Japan ハッカーが数年ぶりにiPhoneを脱獄。修正済み脆弱性がiOS 12.4で再発 - Engadget 日本版 Bluetoothの暗号鍵ネゴシエーションに脆弱性、仕様自体を修正 - PC Watch  Bluetoothデバイスに脆弱性、アップデートのチェックを | マイナビニュース ASCII.jp：Bluetooth脆弱性を突いた「KNOB攻撃」からデバイスを守る方法は？  ASCII.jp：NEC、共通鍵暗号化方式OCB2に脆弱性を発見 MIT Tech Review: 顔認証よりパスワードが安全？スマホロック解除強要で割れる司法 : 指紋認証が必要なら本人の指を切ってくればいいし，顔認証が必要なら物理的に「顔」を調達してくればいい。認証の先にある「もの」の価値が大きいほど認証突破へのインセンティブも大きくなる MIT Tech Review: 人気暗号通貨取引所を襲った標的型攻撃、その驚くべき実態 「rest-client」など11のRubyライブラリにバックドアが発見される - ZDNet Japan GitHubでセキュリティ脆弱性のアラートが来てビビりながら対応した話 - Qiita A look at the Windows 10 exploit Google Zero disclosed this week | Ars Technica  Google Finds 20-Year-Old Microsoft Windows Vulnerability - Schneier on Security  テキサス州２２自治体のランサムウェア感染についてまとめてみた - piyolog Modifying a Tesla to Become a Surveillance Platform - Schneier on Security LinuxカーネルのUSB取り扱いに関する脆弱性、アップデートがリリースされる | Think IT（シンクイット） GitHub supports Web Authentication (WebAuthn) for security keys - The GitHub Blog  GitHubがWebAuthn対応を開始。MacのTouch IDやWindows Helloの指紋認証などを2要素認証に利用可能に［訂正あり］ － Publickey GitHubがWebAuthn対応で物理セキュリティキーによる二段階認証を正式にサポート - GIGAZINE  EU、顔認識技術の「無差別利用」に規制を検討か - ZDNet Japan License Plate \u0026quot;NULL\u0026quot; - Schneier on Security 複数のシスコ製品に深刻な脆弱性、アップデートを | マイナビニュース AWSの障害は冷却装置の故障が原因--サービスはほぼ復旧 - ZDNet Japan  天文関連  「はやぶさ２」の再突入カプセル回収計画について | トピックス | JAXA はやぶさ２プロジェクト NASAが木星の衛星エウロパの「氷の海」探査ミッションを正式発表 | TechCrunch Japan MIT Tech Review: ブラックホールが中性子星を飲み込んだときの重力波、初検出か アルマ望遠鏡、39個の「見えない銀河」を捉える - 東京大学 大学院理学系研究科・理学部  2019年8月23日ニュース「これまで見えなかった110億年も昔の銀河が見えた アルマ望遠鏡で東大、国立天文台が観測」 | SciencePortal  日本のispaceは2021年の月面着陸、2023年のローバー月探査を目指す | TechCrunch Japan  知財関連  YouTube、虚偽のDMCA侵害通知でユーチューバーを脅迫した男を提訴 | P2Pとかその辺のお話R IBMがPOWERプロセッサの命令セットをオープンに。OpenPOWER Foundationへ寄贈 － Publickey アダルト2社がほぼすべてを占める米国の著作権トロール訴訟 | P2Pとかその辺のお話R 崩壊した革新のサイクル：テック／メディア企業による競争を阻害する著作権法の悪用 | P2Pとかその辺のお話R  Linux または Ubuntu に関する話題  Ubuntu 20.04 その1 - Qt 4とQt 4依存アプリを削除する提案・Qt 4はUbuntu 19.10が最後か - kledgeb Ubuntu 19.04 その146 - Snap Storeからインストール可能なセキュリティーアプリ5選 - kledgeb  GitHub - keepassxreboot/keepassxc: KeePassXC is a cross-platform community-driven port of the Windows application “Keepass Password Safe”.   その他  我々は今「オープンソースの黄金時代」にいるのか？ - YAMDAS現更新履歴 : 既に幻滅機だと思ってたよ（笑） 主要メディアはゲーマーゲート騒動の教訓から何ひとつ学んでいない | TechCrunch Japan 手の動きを追跡するGoogleのアルゴリズムで手話を認識できるか | TechCrunch Japan 初のトランジスタ数1兆のチップを製造するためにCerebrasが克服した5つの技術的課題 | TechCrunch Japan 英国民も気づいていないジョンソン新政権「合意なき離脱」の現実味：国末憲人 | ヨーロッパの部屋 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト MIT Tech Review: 世界最大級のAI向けメガチップ、米スタートアップが開発 iOS 13のプライバシー強化が競争を阻害するとアップルを非難するデベロッパー | TechCrunch Japan サイエンスクリップ「『東京2020』をレガシーに ―熱中症の科学、対策にどう生かすか―」| SciencePortal チュートリアル「AWSアカウント間のIAMロールを使用したアクセスの委任」ノート - Qiita  "
    },
    {
      "title": "Go 1.13 のエラー・ハンドリング",
      "section": "golang",
      "description": "golang.org/x/xerrors パッケージの仕様とはかなり異なっているので注意が必要である。 ",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/error-handling-in-go-1_3/",
      "published": "2019-08-24T03:06:25+00:00",
      "update": "2019-08-25T12:15:36+00:00",
      "content": " さて， Go 言語コンパイラの 1.13 がリリースされた（2019-08-22 時点ではリリース候補版）。\nGo 1.13 の変更点は色々あるが，エラー・ハンドリングに関しては「エラーの構造化」が正式に組み込まれたことだろう。 この記事では「エラーの構造化」に絞って紹介する。\nerrors.Unwrap, errors.Is, errors.As 関数の追加 errors パッケージにおいては Unwrap(), Is(), As() 関数が追加された。\nerrors.Unwrap() 関数はシンプルで，引数の error インスタンスが Unwrap() メソッドを持っていればその結果を返すというものだ。\n// Unwrap returns the result of calling the Unwrap method on err, if err\u0026#39;s // type contains an Unwrap method returning error. // Otherwise, Unwrap returns nil. func Unwrap(err error) error { u, ok := err.(interface { Unwrap() error }) if !ok { return nil } return u.Unwrap() } golang.org/x/xerrors パッケージでは xerrors.Wrapper interface 型が定義されていたが，まぁ Unwrap() 関数以外で Wrapper 型を使う局面はないので，これでもいいっちゃあいいのかな。\nerrors.Is() は2つの error インスタンスの同値性（equality）を検査する1。 errors.As() 関数 error インスタンスから指定した型へ変換または抽出する。 先ほどの errors.Unwrap() 関数はこれらの関数内で呼び出される。\n両関数の中身は golang.org/x/xerrors パッケージのものと同じ（筈）。\n// Is reports whether any error in err\u0026#39;s chain matches target. // // The chain consists of err itself followed by the sequence of errors obtained by // repeatedly calling Unwrap. // // An error is considered to match a target if it is equal to that target or if // it implements a method Is(error) bool such that Is(target) returns true. func Is(err, target error) bool { if target == nil { return err == target } isComparable := reflectlite.TypeOf(target).Comparable() for { if isComparable \u0026amp;\u0026amp; err == target { return true } if x, ok := err.(interface{ Is(error) bool }); ok \u0026amp;\u0026amp; x.Is(target) { return true } // TODO: consider supporing target.Is(err). This would allow \t// user-definable predicates, but also may allow for coping with sloppy \t// APIs, thereby making it easier to get away with them. \tif err = Unwrap(err); err == nil { return false } } } // As finds the first error in err\u0026#39;s chain that matches target, and if so, sets // target to that error value and returns true. // // The chain consists of err itself followed by the sequence of errors obtained by // repeatedly calling Unwrap. // // An error matches target if the error\u0026#39;s concrete value is assignable to the value // pointed to by target, or if the error has a method As(interface{}) bool such that // As(target) returns true. In the latter case, the As method is responsible for // setting target. // // As will panic if target is not a non-nil pointer to either a type that implements // error, or to any interface type. As returns false if err is nil. func As(err error, target interface{}) bool { if target == nil { panic(\u0026#34;errors: target cannot be nil\u0026#34;) } val := reflectlite.ValueOf(target) typ := val.Type() if typ.Kind() != reflectlite.Ptr || val.IsNil() { panic(\u0026#34;errors: target must be a non-nil pointer\u0026#34;) } if e := typ.Elem(); e.Kind() != reflectlite.Interface \u0026amp;\u0026amp; !e.Implements(errorType) { panic(\u0026#34;errors: *target must be interface or implement error\u0026#34;) } targetType := typ.Elem() for err != nil { if reflectlite.TypeOf(err).AssignableTo(targetType) { val.Elem().Set(reflectlite.ValueOf(err)) return true } if x, ok := err.(interface{ As(interface{}) bool }); ok \u0026amp;\u0026amp; x.As(target) { return true } err = Unwrap(err) } return false } var errorType = reflectlite.TypeOf((*error)(nil)).Elem() コードが微妙にダサいのは Go 言語が総称型を持っていないため。 逆に言うと，総称型がなくともこの程度はできる，ということで（笑）\nここまでが準備運動（笑）\nfmt.Errorf 関数による error のラッピング fmt.Errorf() 関数の書式で %w 使えるようになった。 %w を使うと対応する error インスタンスをラッピングする wrapError 型のインスタンスを生成する。\n// Errorf formats according to a format specifier and returns the string as a // value that satisfies error. // // If the format specifier includes a %w verb with an error operand, // the returned error will implement an Unwrap method returning the operand. It is // invalid to include more than one %w verb or to supply it with an operand // that does not implement the error interface. The %w verb is otherwise // a synonym for %v. func Errorf(format string, a ...interface{}) error { p := newPrinter() p.wrapErrs = true p.doPrintf(format, a) s := string(p.buf) var err error if p.wrappedErr == nil { err = errors.New(s) } else { err = \u0026amp;wrapError{s, p.wrappedErr} } p.free() return err } ちなみに wrapError 型は以下のように定義されている。\ntype wrapError struct { msg string err error } func (e *wrapError) Error() string { return e.msg } func (e *wrapError) Unwrap() error { return e.err } シンプルで結構。\ngolang.org/x/xerrors パッケージの仕様とはかなり異なっているので注意が必要である。 開発しているシステム/アプリケーションが xerrors.Errorf() 関数の仕様に依存しているなら置き換えは難しいかも。\n標準パッケージへの Unwrap() メソッドの組み込み 標準パッケージのソースコードに対して jvgrep Unwrap src/**/*.go とかやると分かるが，いくつかのパッケージで定義されている error 派生型にも Unwrap() メソッドが組み込まれているようだ。\nたとえばファイル操作失敗時に吐かれる os.PathError 型は以下のように定義されている。\n// PathError records an error and the operation and file path that caused it. type PathError struct { Op string Path string Err error } func (e *PathError) Error() string { return e.Op + \u0026#34; \u0026#34; + e.Path + \u0026#34;: \u0026#34; + e.Err.Error() } func (e *PathError) Unwrap() error { return e.Err } これを踏まえて\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func checkFileOpen(path string) error { file, err := os.Open(path) if err != nil { return err } defer file.Close() return nil } func main() { if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { fmt.Fprintln(os.Stderr, err) return //Outpout:  //open not-exist.txt: no such file or directory \t} } を以下のように書き換えてみる。\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;syscall\u0026#34; ) func checkFileOpen(path string) error { file, err := os.Open(path) if err != nil { return err } defer file.Close() return nil } func main() { if err := checkFileOpen(\u0026#34;not-exist.txt\u0026#34;); err != nil { var errno syscall.Errno if errors.As(err, \u0026amp;errno) { fmt.Fprintln(os.Stderr, errno) return } \tfmt.Fprintln(os.Stderr, err) return } } これを実行すると\n$ go run sample2.go no such file or directory と一発で syscall.Errno のインスタンスが抽出されていることが分かる。 これで標準パッケージのエラーの取り回しが楽になるだろう。\nそろそろ真面目にエラー・ハンドリングを設計しないと 自作ツールでもそろそろ真面目にエラー・ハンドリングを設計しないといけないかなぁ。\nエラー・ハンドリングで難しいのはシステム/アプリケーションの「利用者」が欲しいエラー情報と「運用・開発者」が欲しいエラー情報とが微妙に異なる点だろう。 ビジネス用語のいわゆる 5W1H で考えるなら「利用者」が欲しいのは主に “What” と “Why” だろうが，「運用・開発者」は寧ろ残りの “When”, “Where”, “Who”, “How” の情報が重要だよね。 まぁ “When” や “Who” は logger の担当だろうけど。\n幸いなことに fmt パッケージでは %v, %#v, %+v で情報の詳細度を変えられるので，この辺を上手く使ってどうにか，というところだろうか。\nふむむむむー。\nブックマーク  エラー・ハンドリングについて Error の構造化 階層化 Error パッケージ “xerrors” を試してみる Go 1.13 と 1.14 （Go 2 へ向けて）  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  比較対象の error インスタンス（第2引数）と被検査対象の error インスタンス（第1引数）内にラッピングされている error インスタンスのいずれかが同値であるなら両インスタンは同値であると見做す。 [return]   "
    },
    {
      "title": "LibreOffice 6.3 へのアップグレード",
      "section": "release",
      "description": "6.2 系と 6.3 系はパソコン上で共存できてしまうので 6.3 系のみを使うのであれば 6.2 系は削除すること。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/08/upgrade-libreoffice-6_3/",
      "published": "2019-08-19T10:51:39+00:00",
      "update": "2019-08-19T11:08:46+00:00",
      "content": "LibreOffice 6.2.6 および 6.3 がリリースされた。\n The Document Foundation announces LibreOffice 6.3 - The Document Foundation Blog LibreOffice 6.2.6 is ready, all users should update for enhanced security - The Document Foundation Blog  LibreOffice 6.2.6 はセキュリティ・アップデートを含んでいるので早めのアップデートを。\n今回は LibreOffice 6.3 へのアップグレードを行う。\nUbuntu では LibreOffice を導入するための手段がいくつか存在するが OpenPGP 鍵を使って暗号化や電子署名を行うのであれば公式サイトサイトから *.deb ファイルを取ってきてインストールするしかない。 やり方は以下の記事を参考にどうぞ。\n Ubuntu に LibreOffice をインストールする3つの方法  6.2 系と 6.3 系はパソコン上で共存できてしまうので 6.3 系のみを使うのであれば 6.2 系は削除すること。\n$ sudo apt remove libreoffice6.2* libobasis6.2* 細かくチェックしたわけではないが 6.3 でも OpenPGP 鍵で暗号化したファイルが開けたので，まぁ問題なかろう。\n"
    },
    {
      "title": "2019-08-18 のブックマーク",
      "section": "bookmarks",
      "description": "「HTTP/2 の実装に対するサービス運用妨害 (DoS) 攻撃手法」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/08/18-bookmarks/",
      "published": "2019-08-18T04:22:56+00:00",
      "update": "2019-08-25T01:05:34+00:00",
      "content": " リリース情報  Hugo 0.57: The Cascading Edition | Hugo  Hugo 0.57.1: A couple of Bug Fixes | Hugo Hugo 0.57.2: A couple of Bug Fixes | Hugo  Highlights from Git 2.23 - The GitHub Blog  セキュリティ＆プライバシー関連  Coinbaseがうけた標的型攻撃とその対応についてまとめてみた - piyolog Exploiting GDPR to Get Private Information - Schneier on Security ドロップキャッチを悪用したTwitterのっとりについてまとめてみた - piyolog Side-Channel Attack against Electronic Locks - Schneier on Security Microsoft 製品の脆弱性対策について(2019年8月) ：IPA 独立行政法人 情報処理推進機構  2019年 8月マイクロソフトセキュリティ更新プログラムに関する注意喚起 Microsoft、2019年8月の月例更新を発表 ～BlueKeepに似た“ワーム可能な”脆弱性に注意 - 窓の杜 【重要】Microsoft Windows Serverのリモートデスクトップサービスにおける脆弱性について | さくらインターネット XP以降、20年存在していたWindowsの脆弱性をGoogleが発見 - PC Watch 2019年8月の月例更新プログラムに問題、VB6/VBA/VBScriptアプリ・マクロが応答不能に - 窓の杜  キヤノン製カメラ「EOS」「PowerShot」のPTPに脆弱性--ファーム修正を順次開始 - CNET Japan セキュリティ企業が管理する約2800万件の生体認証記録が流出していたことが判明 - GIGAZINE 米金融大手Capital One情報漏えいの容疑者、さらに30社超からデータ盗難の疑い - ZDNet Japan 「Chrome」と「Firefox」のアドレスバーでEV証明書の情報表示を変更へ - ZDNet Japan Software Vulnerabilities in the Boeing 787 - Schneier on Security Bypassing Apple FaceID's Liveness Detection Feature - Schneier on Security ８信用金庫のシステム障害についてまとめてみた - piyolog ASCII.jp：一部Windows Serverに脆弱性が見つかり、さくらがアップデートを促す VU#605641 - HTTP/2 implementations do not robustly handle abnormal traffic and resource exhaustion  JVNVU#98433488: HTTP/2 の実装に対するサービス運用妨害 (DoS) 攻撃手法 JVNVU#98790275: Apache HTTP Web Server 2.4 における複数の脆弱性に対するアップデート JVNVU#93696206: Apple SwiftNIO HTTP/2 における脆弱性に対するアップデート HTTP/2実装に脆弱性、DoS攻撃のおそれ | マイナビニュース 「Node.js」の2019年8月セキュリティ更新が公開 ～HTTP/2実装のDoS脆弱性を修正 - 窓の杜 Apple SwiftNIO HTTP/2に脆弱性、アップデートを | マイナビニュース  Androidユーザー800万人がGoogle Playから85種の新手のアドウェアをダウンロードしていた | TechCrunch Japan 「監視カメラの画像認識をだます服」をハッカー兼ファッションデザイナーが発表 - GIGAZINE  天文関連  APOD: 2019 August 15 - The Perseids and the Plough Announcements - Existing Maunakea Telescopes Announce Return to Work - Subaru Telescope  お知らせ - ハワイ観測所の現状について - すばる望遠鏡  Texas Amateur Detects Possible Impact on Jupiter - Sky \u0026amp; Telescope  木星に巨大な何かが衝突したっぽいです | ギズモード・ジャパン  ブラックホールがわずか2時間で75倍も明るく輝き天文学者も「前代未聞」と驚嘆 - GIGAZINE SETI@home, the Alien-Hunting Project for the Nonscientist, Turns 20 - The Ringer  知財関連  'Google Blocked TorrentFreak From Appearing in Search Feature' - TorrentFreak  その他  プログラミングHaskell第2版を翻訳しました - あどけない話 VerizonがTumblrをWordPressの親会社Automatticに売却 | TechCrunch Japan MIT Tech Review: 結局、電動キックボードは、それほど環境に優しくない MIT Tech Review: 10代のうつ病、ゲームのプレイ時間は「影響なし」＝カナダ調査 アドテクには相関性より因果関係、ClearBrainが因果分析ツールを発表 | TechCrunch Japan シリコンヴァレーが傾倒する「創造的破壊」では、世界は決してよくならない｜WIRED.jp  "
    },
    {
      "title": "Einstein@Home とパルサー",
      "section": "remark",
      "description": "「計算機・ネットワークは有益な目的に使おう」",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/08/einsteinathome-and-pulsar/",
      "published": "2019-08-18T04:05:54+00:00",
      "update": "2019-08-18T04:06:59+00:00",
      "content": " （「星が好きな人のための新着情報」より）\nAstronomy Picture of the Day (APOD) で面白い写真が公開されていた。\n APOD: 2019 August 13 - Supernova Cannon Expels Pulsar J0002  超新星爆発の残骸である CTB 1 から秒速千キロメートルで遠ざかっていくパルサー。 CTB 1 からはじき出されたと考えられるが詳しいプロセス等はまだ分かっていないようだ。\nキャプションには\nAbout 10,000 years ago, the supernova that created the nebular remnant CTB 1 not only destroyed a massive star but blasted its newly formed neutron star core -- a pulsar -- out into the Milky Way Galaxy. The pulsar, spinning 8.7 times a second, was discovered using downloadable software Einstein@Home searching through data taken by NASA's orbiting Fermi Gamma-Ray Observatory. via APOD: 2019 August 13 - Supernova Cannon Expels Pulsar J0002  と書かれていて，どうやら Einstein@Home の成果を含んでいるらしい。 うんうん。\nEinstein@Home は学術系分散コンピューティング基盤である BOINC (Berkeley Open Infrastructure for Network Computing) 上で現在も運用されている科学プロジェクトである。\nEinstein@Home プロジェクトの開始は2005年。 この年は「国際物理年」で様々なイベントが開催されたが，そのうちのひとつが Einstein@Home というわけだ。 一過性のお祭りに終わらず14年も運用が続いている（そして成果が出ている）というのは素晴らしいことである1。\nなんで2005年が国際物理年だったかというと，2005年のちょうど100年前，1905年がアインシュタインによって3つの論文が公開された「奇跡の年」だったからだ。 その論文が\n 光電効果の理論 特殊相対性理論（当時は「相対性原理」と呼ばれていた） ブラウン運動の理論  である。 Einstein@Home では一般相対性理論が予言した「重力波」の直接検出を目指している。\n 1974年に連星パルサーの公転周期の軌道が短くなっていく現象が観測され，これが重力波の存在を示す間接的な証拠となっています。（連星パルサーは重力波を放出することによりエネルギーを失い公転周期が短くなるとかなんとか。で，実際に重力波があるとして計算した周期減少率が実際の観測と誤差の範囲内で一致したとかなんとか。ちなみにこの研究を行ったグループは1993年にノーベル物理学賞を受賞しています） via Einstein@Home のすすめ -- Club-HUAA   Einstein@Home では LIGO などの重力波干渉計でパルサーを観測します。 パルサーとは高速回転する中性子星のことで周期的（数ミリ秒から数秒）に電磁波（電波や可視光線あるいはX線など）を放射します。 もし完全に軸対称形でないパルサーがあればそれは重力波を放出するはずです。 ただし，もし重力波が放出されているとしてもそれは非常に微弱なものであろうと予測されています。 ノイズに埋もれた小さな重力波シグナルを検出するのには膨大な計算が必要です。 そこで「膨大な計算」の部分を私たちのコンピュータの空き時間を使って分担して行おうというわけです。 重力波干渉計はアメリカの LIGO （LIGO Hanford Observatory （LHO）および LIGO Livingston Observatory （LLO）の2箇所あります）以外にもドイツの GEO600 のデータも使われるようです。 via Einstein@Home のすすめ -- Club-HUAA  （ちなみに日本にも重力波干渉計がいくつかあるが，それらがプロジェクトに参加するという話は今だに聞いたことがない）\n重力波を検出するには観測対象となり得るパルサーを数多く捜索することが必要で， Einstein@Home ではそうした捜索も分散コンピューティングで行っている。 今回の「撃ち出されるパルサー」も Einstein@Home によるパルサー捜索の成果というわけだ。\nBOINC はプロジェクトを構築するためのサーバ側のキットと参加ユーザに配布されるクライアント・ツールで構成されている。 クライアント・ツールはマルチプラットフォームに対応していて Ubuntu の場合は APT でインストールできる。\n$ sudo apt install boinc-client boinc-manager  OS 移行のため中断していたが BOINC による学術分散コンピューティング・プロジェクトの活動を再開した  クライアント・ツールでは参加プロジェクトの設定や計算機への負荷の調整等もできる。 ラズパイで専用機を組むのも面白いかもしれない。 無理のないところで参加していただければ幸いである。\n「計算機・ネットワークは有益な目的に使おう」\nブックマーク  BOINC による学術分散コンピューティング・プロジェクトでの活動を再開した 週末スペシャル： LIGO が重力波の「直接検出」に成功する！ Einstein@Home のすすめ -- Club-HUAA : BOINC クライアントの使い方など一部内容が古くなっているのでご注意を  参考図書  SETI@homeファンブック―おうちのパソコンで宇宙人探し 野尻 抱介 ローカス 単行本 4898140866 (ASIN), 9784898140864 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  内容は古いけど当時の「熱」を伝えた名著だと思うけどなぁ。著者の方が自己出版で Kindle で出してくれたらいいのに。\nreviewed by Spiegel on 2019-03-28 (powered by PA-API)\n  余談だが SETI@home は（BOINC 以前も含めると）正式運用開始から今年で20周年である。資金難で難儀したり最近ではアレシボ望遠鏡が被災したりして大変ではあるが，様々な副プロジェクトを含みつつ継続できているのはいいことだと思う。 [return]   "
    },
    {
      "title": "nil は nil",
      "section": "golang",
      "description": "nil は状態を表す「識別子」あるいは「表現」に過ぎず，それ自身は型も値も持たない。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/nil-is-nil/",
      "published": "2019-08-17T23:46:56+00:00",
      "update": "2019-08-17T23:47:13+00:00",
      "content": " Qiita を覗いてたら\n Goのnilは(nil, nil)という(型, 値)ペアのインターフェースだと把握すれば混乱しない - Qiita  という記事を見かけたが，おそらくは nil の理解のための方便として意図的に書かれていると思われ，それはそれで悪くないのだが，微妙に危険な香りがするので私なりの解説を記しておく。\nnil は nil たとえば fmt.Printf() 関数などで nil の型と値を取ろうとすると\nfmt.Printf(\u0026#34;Type: %T, Value: %v\u0026#34;, nil, nil) // Output: // Type: \u0026lt;nil\u0026gt;, Value: \u0026lt;nil\u0026gt; などと表示されるので，いかにも nil 型のようなものがあるように見えるが，実際にはこれは「型がない」ことを示している。 同様に値についても，厳密には nil という値ではなく「値がない」ことを示しているのだ。\n「nil とは何か」をきちんと定義した文章は見かけないが， Go 言語の仕様書には，型 T の変数 x に対して\nx is the predeclared identifier nil and T is a pointer, function, slice, map, channel, or interface type. via The Go Programming Language Specification  であると記されている。\nGo 言語では，ある型の値が「宣言されていない」状態のことを「ゼロ値（zero value）」と呼んでいる。 たとえば int などの数値型では「ゼロ値」として数値の 0 を， bool では false を，文字列では空文字列をとる。 同じようにポインタ型や interface 型などでは nil を「ゼロ値」としましょう，ということなのである。 このように仕様として定義することで曖昧な状態を排除でき，私達ユーザは安心してその変数を使用することができるわけだ。\nしたがって nil は状態を表す「識別子」あるいは「表現」に過ぎず1，それ自身は型も値も持たない2。 強いて言うなら（プログラミング言語で最も悪名高いとされる3）「null 参照」の一種だとは言えるだろう。\nだから本当は\nif err != nil { ... } なんかも\nif !(err is nil) { ... } みたいな感じに書ければ分かりやすかったのかもしれないが，シンプルを旨とする Go 言語でそんな迂遠な表現がとられるわけもなく，敢えて「nil との同値性（equality）」という表現をとっているわけだ（偏見）。\ninterface 型は，型と値への参照を属性に持つ まずは，以下の簡単なコードを考えてみる。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; ) type Binary uint64 func (i Binary) Get() uint64 { return uint64(i) } func (i Binary) String() string { return strconv.FormatUint(i.Get(), 2) } func main() { b := Binary(200) fmt.Println(b.String()) // Output: \t// 11001000 } 変数 b を図式化してみよう4。 こんな感じ。\n via Go Data Structures: Interfaces  これを覚えておいてね。\nここで main() 関数の中身を以下のように変えてみる。\nfunc main() { b := Binary(200) s := fmt.Stringer(b) fmt.Println(s.String()) } ちなみに fmt.Stringer 型は以下に定義される interface 型である。\ntype Stringer interface { String() string } ゆえに変数 s は以下のように図式化できる。\n via Go Data Structures: Interfaces  このように interface 型は，型と値への参照を属性に持つオブジェクトとして実装されている。\nただし要素が空の interface{} 型では\n via Go Data Structures: Interfaces  のように最適化されているらしい。 まぁ，ユーザレベルで両者を区別する必要はないけれど。\n interface 型では nil を「ゼロ値」とすると書いたが，そのためには「型と値」の2つの属性とも nil でなければならない。 値（への参照）だけが nil でも型全体としては nil にならないのである。\nこれでハマりやすいのがエラーハンドリングである。\nエラーハンドリングのハマりどころ Go 言語の組み込み型である error は以下のように表すことができる。\n// The error built-in interface type is the conventional interface for // representing an error condition, with the nil value representing no error. type error interface { Error() string } これを踏まえて，こんなコードを考えてみよう。\npackage main import \u0026#34;fmt\u0026#34; type ErrorObject struct{} func (m *ErrorObject) Error() string { return \u0026#34;I\u0026#39;m error object.\u0026#34; } func foo() *ErrorObject { return nil } func bar() error { return foo() } func main() { if err := bar(); err != nil { fmt.Printf(\u0026#34;%#v is not nil\\n\u0026#34;, err) } else { fmt.Printf(\u0026#34;%#v is nil\\n\u0026#34;, err) } } このコードはコンパイルエラーにならないし完全に動くが，実行結果は\n(*main.ErrorObject)(nil) is not nil となる。 前節まで読んだならもうお分かりだろうが bar() 関数の返り値の error は *ErrorObject という型を持つため nil にならないのである。 したがって err != nil は真（true）となる。\nbar() 関数の返り値を正しく評価するには Conversion 構文で型を括りだすか，いっそ foo() 関数を\nfunc foo() error { return nil } と書き換えるかだろう。 まぁ，後者だよね。 そうすれば実行結果は\n\u0026lt;nil\u0026gt; is nil となる。\nブックマーク  エラー・ハンドリングについて（追記あり）  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  もちろんこれは言語仕様上の話で実装上は何らかの値をとる。大昔のC言語なんかでは「#define NULL ((void*)0)」みたいな記述もあったが，さすがにそーゆーのはない（よね？）。 [return] そういう意味では最初に紹介した記事で “Goのnilは(nil, nil)” という部分は間違いではないだろう。 [return] 拙文「「null 安全」について」を参照のこと。 [return] 引用元の記事（“Go Data Structures: Interfaces”）では 1 word = 32 bits のシステムとして解説されているのでご注意を。 [return]   "
    },
    {
      "title": "Go 1.12.9 がリリースされた",
      "section": "release",
      "description": "今回はセキュリティ・アップデートなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/08/go-1_12_9-is-released/",
      "published": "2019-08-16T11:56:08+00:00",
      "update": "2019-08-16T11:58:09+00:00",
      "content": " Go 1.12.9 がリリースされた。 今回はセキュリティ・アップデートはなし。\n Go 1.12.9 is released - Google Group  go1.12.9 (released 2019/08/15) includes fixes to the linker, and the os and math/big packages. See the Go 1.12.9 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT が提供する Go コンパイラは2世代も古くて使いものにならないため1，ダウンロードページから go1.12.9.linux-amd64.tar.gz を取ってきて任意の場所に展開する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.12.9.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.12.9.linux-amd64.tar.gz $ sudo mv go go1.12.9 $ sudo ln -s go1.12.9 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.12.9 linux/amd64 ほい。 ひと仕事終わり。\nアップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  改訂2版 みんなのGo言語 松木 雅幸, mattn, 藤原 俊一郎, 中島 大一, 上田 拓也, 牧 大輔, 鈴木 健太 技術評論社 2019-08-01 (Release 2019-08-01) Kindle版 B07VPSXF6N (ASIN), 9784297107284 (EISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  改訂2版の目玉は7章の「データベースの扱い方」が追加されたことだろう。他の章では，大まかな構成は1版と同じだが細かい部分が変わっていて Go 1.12 への言及まであるのには驚いた。\nreviewed by Spiegel on 2019-08-12 (powered by PA-API)\n  提供される Go コンパイラのサポートは1世代前まで。 [return]   "
    },
    {
      "title": "Go 1.12.8 がリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "2つのセキュリティ脆弱性の修正がある。アップデートは計画的に。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/08/go-1_12_8-is-released/",
      "published": "2019-08-14T00:01:05+00:00",
      "update": "2019-08-18T01:12:46+00:00",
      "content": " Go 1.12.8 がリリースされた。\n [security] Go 1.12.8 and Go 1.11.13 are released - Google Group  今回はセキュリティ・アップデートを含んでいる。 Go 言語で Web サービスを構築している人は要注意だ。\nnet/http: Denial of Service vulnerabilities in the HTTP/2 implementation  CVE-2019-9512 CVE-2019-9514  net/http and golang.org/x/net/http2 servers that accept direct connections from untrusted clients could be remotely made to allocate an unlimited amount of memory, until the program crashes. Servers will now close connections if the send queue accumulates too many control messages. The issues are CVE-2019-9512 and CVE-2019-9514, and Go issue golang.org/issue/33606. via Go 1.12.8 and Go 1.11.13 are released  Netflix の中の人，ありがとう。\nnet/url: parsing validation issue  CVE-2019-14809  url.Parse would accept URLs with malformed hosts, such that the Host field could have arbitrary suffixes that would appear in neither Hostname() nor Port(), allowing authorization bypasses in certain applications. Note that URLs with invalid, not numeric ports will now return an error from url.Parse. The issue is CVE-2019-14809 and Go issue golang.org/issue/29098. via Go 1.12.8 and Go 1.11.13 are released  アップデートは計画的に Ubuntu の APT は相変わらずサポートから外れた 1.10 しか対応していないのでダウンロードページからバイナリ（go1.12.8.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。\n$ cd /usr/local/src $ sudo curl \u0026#34;https://dl.google.com/go/go1.12.8.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.12.8.linux-amd64.tar.gz $ sudo mv go go1.12.8 $ sudo ln -s go1.12.8 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.12.8 linux/amd64 アップデートは計画的に。 時期的に次は 1.13 のリリースかな。\nブックマーク  VU#605641 - HTTP/2 implementations do not robustly handle abnormal traffic and resource exhaustion  [HTTP/2実装に脆弱性、DoS攻撃のおそれ | マイナビニュース]   参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by PA-API)\n  改訂2版 みんなのGo言語 松木 雅幸, mattn, 藤原 俊一郎, 中島 大一, 上田 拓也, 牧 大輔, 鈴木 健太 技術評論社 2019-08-01 (Release 2019-08-01) Kindle版 B07VPSXF6N (ASIN), 9784297107284 (EISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  改訂2版の目玉は7章の「データベースの扱い方」が追加されたことだろう。他の章では，大まかな構成は1版と同じだが細かい部分が変わっていて Go 1.12 への言及まであるのには驚いた。\nreviewed by Spiegel on 2019-08-12 (powered by PA-API)\n "
    }
  ]
}
