{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "GnuPG 2.2.31 (LTS) がリリースされた",
      "section": "release",
      "description": "Libgcrypt の脆弱性について追記。GnuPG 自身のセキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/09/gnupg-2_2_31-lts-is-released/",
      "published": "2021-09-16T11:39:59+00:00",
      "update": "2021-09-16T23:32:41+00:00",
      "content": "GnuPG LTS 版 2.2.31 がリリースされた。\n [Announce] GnuPG 2.2.31 (LTS) released  セキュリティ・アップデートはなし。 詳細はこちら。\n agent: Fix a regression in GET_PASSPHRASE. [#5577] scd: Fix an assertion failure in close_pcsc_reader. [67e1834ad4] scd: Add support for PC/SC in \u0026ldquo;GETINFO reader_list\u0026rdquo;.  Release-info: https://dev.gnupg.org/T5571 via GnuPG 2.2.31 (LTS) released  【2021-09-17 追記】 Libgcrypt の脆弱性について Ubuntu が Libgcrypt の脆弱性報告をしていて気が付いたが，Libgcrypt 1.8.8 および 1.9 系の 1.9.4 より前のバージョンは脆弱性を含んでいるらしい。 GnuPG 側のアナウンスがなくいつの間にかアップデートしてたので単純なバグ修正かと思ったらそうじゃなかったようだ。 そういうのはちゃんと通知してほしい。\nてか， Ubuntu は（OpenSSL もそうだが）ちまちまバックポートパッチを当てるんじゃなくて普通にバージョンアップしてくれよ。 誰がそのパッチの安全性を保証するんだよ orz\nCVE-2021-33560 Libgcrypt before 1.8.8 and 1.9.x before 1.9.3 mishandles ElGamal encryption because it lacks exponent blinding to address a side-channel attack against mpi_powm, and the window size is not chosen appropriately. This, for example, affects use of ElGamal in OpenPGP. via NVD - CVE-2021-33560   CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N 深刻度: 重要 (Score: 7.5)     基本評価基準 評価値     攻撃元区分 ネットワーク   攻撃条件の複雑さ 低   必要な特権レベル 不要   ユーザ関与レベル 不要   スコープ 変更なし   機密性への影響 高   完全性への影響 なし   可用性への影響 なし    CVE-2021-40528 The ElGamal implementation in Libgcrypt before 1.9.4 allows plaintext recovery because, during interaction between two cryptographic libraries, a certain dangerous combination of the prime defined by the receiver’s public key, the generator defined by the receiver’s public key, and the sender’s ephemeral exponents can lead to a cross-configuration attack against OpenPGP. via NVD - CVE-2021-40528   CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N 深刻度: 警告 (Score: 5.9)     基本評価基準 評価値     攻撃元区分 ネットワーク   攻撃条件の複雑さ 高   必要な特権レベル 不要   ユーザ関与レベル 不要   スコープ 変更なし   機密性への影響 高   完全性への影響 なし   可用性への影響 なし     On the (in)security of ElGamal in OpenPGP - Part I - Syssec@IBM Research On the (in)security of ElGamal in OpenPGP - Part II - Syssec@IBM Research  GnuPG 関連パッケージのバージョン GnuPG 関連の各パッケージのバージョンは以下の通り（数字は大体のビルド順）。\n   # パッケージ名 バージョン 公開日 更新     1 Libgpg-error 1.42 2021-03-22    2 Libgcrypt 1.8.8 (LTS) 2021-06-02     Libgcrypt 1.9.4 2021-08-22    3 Libassuan 2.5.5 2021-03-22    4 Libksba 1.6.0 2021-06-10    5 nPth 1.6 2018-07-16    6 ntbTLS 0.2.0 2020-08-27    7 GnuPG 2.2.31 (LTS) 2021-09-15     GnuPG 2.3.2 2021-08-24     現在 GnuPG には2.2系と2.3系があり1，2.2系は LTS 版に位置付けられている。 2.3系では AEAD (Authenticated Encryption with Associated Data) 等 RFC 4880bis で検討されている機能が実装されているので，最新機能を試したいのであればこちらを入れるとよいだろう。 なお2.2系は少なくとも2024年末まではサポートが続けられる予定である。 通常運用であれば，当面は2.2系でも問題ない（ECC も対応してるよ）。\nアップデートは計画的に。\nブックマーク  OpenPGP の実装  参考図書   暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n   暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n   厳密には1.4系もあるが，これは legacy 版と位置付けられており，よほどのバグか脆弱性がない限りは更新されない。もし今だに1.4系（あるいは既にサポートされていない2.0/2.1系）を使っているのなら2.2系以降にアップグレードすることを強くお勧めする。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Java 17 LTS がリリースされた",
      "section": "release",
      "description": "Java のサポート期限ってどうなってるんだっけ？",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/09/java-17-is-released/",
      "published": "2021-09-15T11:27:14+00:00",
      "update": "2021-09-15T13:06:14+00:00",
      "content": "予定通り Java 17 がリリースされた。 Java 11 以来の LTS (Long-Term-Support) バージョンである。\n JDK 17 JDK 17 GA Release JDK 17 Release Notes  OpenJDK を APT で管理するメリットはないので，実行バイナリをリリースページから直接ダウンロードして配置する。 以下は完全手動でのインストール（笑）\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://download.java.net/java/GA/jdk17/0d483333a00540d886896bac774ff48b/35/GPL/openjdk-17_linux-x64_bin.tar.gz\u0026#34; -O $ cd .. $ sudo unlink java # 以前のバージョンの Java 環境がある場合 $ sudo tar xvf src/openjdk-17_linux-x64_bin.tar.gz $ sudo ln -s jdk-17 java $ java -version # すでに PATH が通っている場合 openjdk version \u0026#34;17\u0026#34; 2021-09-14 OpenJDK Runtime Environment (build 17+35-2724) OpenJDK 64-Bit Server VM (build 17+35-2724, mixed mode, sharing) 私としては PlantUML が動けばいいので，試しておく1。\nFactory Method Pattern  うむうむ。 ちゃんと動くな。\nJava のサポート期限ってどうなってるんだっけ？ まずは Oracle Java。 これははっきりしている。\n Oracle Java SE Support Roadmap  これによると\n   Release GA Date Premier Support Extended Support     7 (LTS) 2011-07 2019-07 2022-07   8 (LTS) 2014-03 2022-03 2030-12   11 (LTS) 2018-09 2023-09 2026-09   16 2021-03 2021-09 -   17 (LTS) 2021-09 2026-09 2029-09   18 2022-03 2022-09 -   19 2022-09 2023-03 -   20 2023-03 2022-09 -   21 (LTS) 2023-09 2028-09 2031-09    となっている2（2021-09 時点でサポートが終了しているものは除いている）。\n一方 OpenJDK はよく分からないが AdoptOpenJDK については\n Support | AdoptOpenJDK - Open source, prebuilt OpenJDK binaries  によると\n   バージョン First Availability End of Availability     8 (LTS) 2014-03 at least 2026-05   11 (LTS) 2018-09 2024-10   16 2021-03 2021-09   17 (LTS) 2021-09 (TBC)    となっている。 まだ更新されないのかな？\nこういっちゃあ何だが，きょうび Oracle Java をわざわざ選択する理由はないだろう。 どうしても Oracle のクラウドを使いたいというのなら別だが（笑）\nAmazon にしたって Microsoft にしたって IBM にしたって，自社のクラウドでそれぞれオープンな製品を用意してる。 つまり「どの Java を使うか」ではなく「どの XaaS 環境を使うか」で必然的に Java も決まってしまうのである。\nいや，この前見かけた #ITアウトレイジが面白くて\n とっくにOpenJDKに移行済みなんだよ！今更戻れるわけねーだろ！#ITアウトレイジhttps://t.co/FL8FyhEjSj pic.twitter.com/UAtrrnvABM\n\u0026mdash; hisa_u (@hisa_u) September 15, 2021  って，感じだよねぇ（笑）\nブックマーク  3年ぶりの長期サポート版となる「Java 17」正式版がリリース。M1 Macのサポート、Sealed Classの追加など － Publickey オラクル、Oracle JDKを再び無料提供へ、本番環境でも利用可。昨日リリースのJava 17から － Publickey Oracle、「Java 17」を発表 ～3年ぶりの長期サポートリリース（LTS） - 窓の杜  参考図書   Spring Data JPAプログラミング入門 溝口賢司 (著) 秀和システム 2017-08-03 (Release 2018-04-23) Kindle版 B07CKHR8C1 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  JPA のお勉強用に購入。紙のほうはプレミアが付いてるっぽいが Kindle で買えるよ。固定レイアウトだからブラウザの Kindle Cloud Reader で読めるし。真面目に基本を押さえて書いていて分かりやすい。\nreviewed by Spiegel on 2021-08-26 (powered by PA-APIv5)\n   Effective Java 第3版 Joshua Bloch (著), 柴田 芳樹 (翻訳) 丸善出版 2018-10-30 単行本（ソフトカバー） 4621303252 (ASIN), 9784621303252 (EAN), 4621303252 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  再勉強中。 Kindle 版のほうがちょっと安いが，勤務先でも使いたかったので紙の本にした。\nreviewed by Spiegel on 2021-03-17 (powered by PA-APIv5)\n   Spring Boot 2 入門: 基礎から実演まで Webアプリ開発入門 原田 けいと (著), 竹田 甘地 (著), Robert Segawa (著)  2020-05-22 (Release 2020-05-22) Kindle版 B0893LQ5KY (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Spring Boot を勉強することになって急遽買った本。めっさ分かりやすかった。 PDF 版が欲しいくらい（笑）\nreviewed by Spiegel on 2021-06-13 (powered by PA-APIv5)\n   大鉄人１７ 神谷政浩 (出演), 竹井みどり (出演), 中丸忠雄 (出演), 原口剛 (出演), 島田歌穂 (出演), 高品正広 (出演), 大月ウルフ (出演), 平田昭彦 (出演), 山口あきら (出演), 山本麟一 (出演), 小林恭二 (出演), 河合徹 (出演), 村松美枝子 (出演), 水島弘 (出演), 山田稔 (監督), 若林幹 (監督), 内田一作 (監督), 上原正三 (Writer), 伊上勝 (Writer), 安斉あゆ子 (Writer), 熊谷節 (Writer), 江連卓 (Writer)  (Release 2017-03-10) Prime Video B06XC6CYRF (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  なんと！ Amazon Prime Video 見れるのか！ 好きな作品でした。\nreviewed by Spiegel on 2021-09-15 (powered by PA-APIv5)\n   2021-08-30 に PlantUML V1.2021.10 がリリースされている。 PlantUML の使い方等については拙文「真面目に PlantUML」シリーズを参考にどうぞ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Oracle Java 8 はクライアント側での利用と開発目的での利用のみ許可されている。サーバ側での運用は別途有償契約が必要（の筈）。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2021-09-12 のブックマーク",
      "section": "bookmarks",
      "description": "「誰でも無料でアメリカ天文学会が発行する学術誌を閲覧可能になることが決定」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2021/09/12-bookmarks/",
      "published": "2021-09-12T02:12:19+00:00",
      "update": "2021-09-12T02:19:04+00:00",
      "content": "リリース情報  Hugo 0.88.1: One Fix | Hugo  Release v0.88.1 · gohugoio/hugo · GitHub   Release v3.7.3 · go-task/task · GitHub Release 8.12.1 · mermaid-js/mermaid · GitHub Release v1.42.1 · golangci/golangci-lint · GitHub Thunderbird — Release Notes (91.1.0) — Thunderbird Thunderbird — Release Notes (78.14.0) — Thunderbird Firefox 92.0, See All New Features, Updates and Fixes Announcing Rust 1.55.0 | Rust Blog Release gopls/v0.7.2 · golang/tools · GitHub Announcement of LibreOffice 7.1.6 Community - The Document Foundation Blog LibreOffice Getting Started Guide 7.2 - The Document Foundation Blog 「OpenSSL 3.0.0」が公開 ～ライセンスは「Apache License 2.0」に - 窓の杜  OpenSSL 3.0.0 が出たので変更点を確認する    セキュリティ＆プライバシー関連  Someone could be tracking you through your headphones  Tracking People by their MAC Addresses - Schneier on Security   Bluetoothスタックに16個の脆弱性が見つかる　1400以上の製品に影響か - ITmedia エンタープライズ 小説投稿サイト「カクヨム」の偽サイトに注意　作品を無断転載　UIも本物そっくりにコピー - ITmedia NEWS This Seemingly Normal Lightning Cable Will Leak Everything You Type  Lightning Cable with Embedded Eavesdropping - Schneier on Security   Androidの2021年9月のセキュリティ更新が発表 - 窓の杜 Microsoft Windows 製品の Microsoft MSHTML の脆弱性対策について(CVE-2021-40444)：IPA 独立行政法人 情報処理推進機構  Microsoft MSHTMLの脆弱性（CVE-2021-40444）に関する注意喚起   Ghostscriptnにリモードコード実行の脆弱性、概念実証コードが公開 | TECH+ ツイッターが「ブロックせずにフォロワー解除」する機能をテスト中 | TechCrunch Japan GitHub security update: Vulnerabilities in tar and @npmcli/arborist | The GitHub Blog Bloomberg - Are you a robot?  知財関連  誰でも無料でアメリカ天文学会が発行する学術誌を閲覧可能になることが決定 - GIGAZINE 第４４４回：利用者のフェアディーリングの権利と著作者の権利の間のバランスを言うカナダ最高裁の判決: 無名の一知財政策ウォッチャーの独言  Linux または Ubuntu に関する話題  Ubuntu 18.04 その463 - Ubuntu 18.04.6 LTSの追加リリースへ - kledgeb LinuxカーネルにNTFSドライバーが追加、トーバルズ氏はGitHub経由のマージに苦言 - ZDNet Japan  Azure や Windows に関する話題  プレビュー版「Windows Terminal」のタブバーにアクリル効果、スタイリッシュな見栄えに - 窓の杜 「Windows Subsystem for Android」が「Microsoft Store」に？ - ZDNet Japan Windows Update KB5004296 成功せず - 電気ウナギ的○○  Go 言語関連  DaprのGo紹介 [機能紹介編] Tips For Effective Go Tests. Skipping tests is common practice… | by Moshe Beladev | Aug, 2021 | Medium Azure SDK for Goの管理ライブラリーセットがリニューアル - Qiita Increasing developer happiness with GitHub code scanning | The GitHub Blog Go製CGOフリーなSQLiteドライバーでentを使う Deep Dive into The Go\u0026rsquo;s Web Server GitHub - mattn/go-gimei : ダミーデータ作成用に  Java 言語関連  Spring Boot DBからファイルをダウンロード : showeryのブログ Spring Bootアプリケーションのネイティブイメージが簡単に作れるSpring Nativeの紹介 | フューチャー技術ブログ  その他  O\u0026rsquo;Reilly Japan - メタファーとしての発酵 プロフェッショナルIPv6（無料版） - Professional IPv6 - BOOTH パソコンユーザーのためのDRAM入門 Part 1 - Qiita Gitのインデックスの中身  Gitのオブジェクトの中身   GitHub Sponsors 登録手順 : 面倒くさいw CLI を作る中でわかった deno のうれしさ WASM-4 Denoの分散ホスティング「Deno Deploy」ベータ2公開。FiIe System API追加、クラッシュレポートなど － Publickey Zennで特定のコメントを非表示にする マイクロサービスの開発とテストファースト／テスト駆動開発 【Mercari Gears Lecture Series】 | メルカリエンジニアリング 貼り付けたコードの言語をAIが自動で推測 ～「Visual Studio Code」の2021年8月更新 - 窓の杜 グーグルの「時間結晶」研究と量子コンピューターにみる可能性 - ZDNet Japan マイクロソフト、WebAssemblyとWebGLで推論エンジンを実装した「ONNX Runtime Web」（ORT Web）をオープンソースで公開 － Publickey Why Erlang? | Fredrik Holmqvist  ブログ: なぜ、Erlangなのか?   9月2日木曜日に発生したAWS東京リージョンの大規模障害、原因はネットワークデバイスの新プロトコル処理に潜在的なバグがあったこと。AWSが報告書を公開 － Publickey Google、訂正不可能なメモリエラーによるクラッシュを回避する「Memory Poisoning Recovery」をGoogle Cloudで提供へ － Publickey 中国政府の告発本を出版した男性、出版直前に行方不明だった元妻から「出版をキャンセルして」と告げられたことを明かす - GIGAZINE FlutterのバックグラウンドDartコード実行を理解する by Kurogoma4D | プロポーザル | FlutterKaigi 2021 #FlutterKaigi - fortee.jp 「Amazon Elasticsearch Service」の名称が「Amazon OpenSearch Service」に変更。ElasticsearchからフォークしたOpenSearchも採用 － Publickey Amazon EKS Anywhereが正式リリース。オンプレミスにAmazon EKSと同様のKubernetes環境を無料で構築可能 － Publickey テスト文字列に「うんこ」と入れるな  新卒向け研修資料「テスト文字列に\u0026quot;うんこ\u0026quot;と入れるな」を公開しました | 株式会社インフィニットループ技術ブログ   【アップデート解説】Welcome to Flutter 2.5 !! 「部屋裏のバイテン」第3巻 : ぽじとろんの竹本泉観察記 米PayPalが日本のペイディを3000億円で買収、アジアで「BNPL」後払い市場に参入 | TechCrunch Japan レノボが12.6インチAndroidタブ「Lenovo Tab P12 Pro」発表、120Hz有機EL採用で重量565g | TechCrunch Japan When It Comes to Antitrust, It’s All Connected | Electronic Frontier Foundation  すべては反トラストに通ず：水平方向の独占と垂直方向の独占 | P2Pとかその辺のお話R   Epic対Apple訴訟に判決　Appleにアプリ内購入の強制禁止命令もEpicは控訴か - ITmedia NEWS iframe sandboxのメモ  "
    },
    {
      "title": "gpgpdump v0.12.5 をリリースした",
      "section": "release",
      "description": "鍵の有効期限日が上手く表示されてなかったので修正した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/09/gpgpdump-v0_12_5-is-released/",
      "published": "2021-09-11T12:05:29+00:00",
      "update": "2021-09-11T12:06:26+00:00",
      "content": "OpenPGP パケットの内容を可視化する gpgpdump の v0.12.2 をリリースした。\n Release v0.12.5 · spiegel-im-spiegel/gpgpdump · GitHub  実は，この前の TeX Live 2021 のインストール時に気が付いたのだが TUG の公開鍵のように有効期限を電子署名を追記する形で更新している場合に新しいほうの有効期限日が上手く表示されてなかった。 ついでに，有効期限日数の表示がおかしなことになっていたので小数点以下を切り上げて表示することにした。\n最新バージョンで件の公開鍵を見ると以下のようになる。\n$ gpgpdump fetch http://www.tug.org/texlive/files/texlive.asc -u Public-Key Packet (tag 6) (269 bytes) Version: 4 (current) Public key creation time: 2016-03-19T01:48:04Z Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (2048 bits) RSA public encryption exponent e (17 bits) User ID Packet (tag 13) (40 bytes) User ID: TeX Live Distribution \u0026lt;tex-live@tug.org\u0026gt; Signature Packet (tag 2) (318 bytes) Version: 4 (current) Signiture Type: Positive certification of a User ID and Public-Key packet (0x13) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (40 bytes) Signature Creation Time (sub 2): 2016-03-19T01:48:04Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to certify other keys. Flag: This key may be used to sign data. Key Expiration Time (sub 9): 540 days after (2017-09-10T01:48:04Z) Preferred Symmetric Algorithms (sub 11) (5 bytes) Symmetric Algorithm: AES with 256-bit key (sym 9) Symmetric Algorithm: AES with 192-bit key (sym 8) Symmetric Algorithm: AES with 128-bit key (sym 7) Symmetric Algorithm: CAST5 (128 bit key, as per) (sym 3) Symmetric Algorithm: TripleDES (168 bit key derived from 192) (sym 2) Preferred Hash Algorithms (sub 21) (5 bytes) Hash Algorithm: SHA2-256 (hash 8) Hash Algorithm: SHA-1 (hash 2) Hash Algorithm: SHA2-384 (hash 9) Hash Algorithm: SHA2-512 (hash 10) Hash Algorithm: SHA2-224 (hash 11) Preferred Compression Algorithms (sub 22) (3 bytes) Compression Algorithm: ZLIB \u0026lt;RFC1950\u0026gt; (comp 2) Compression Algorithm: BZip2 (comp 3) Compression Algorithm: ZIP \u0026lt;RFC1951\u0026gt; (comp 1) Features (sub 30) (1 bytes) Flag: Modification Detection (packets 18 and 19) Key Server Preferences (sub 23) (1 bytes) Flag: No-modify Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x0d5e5d9106bab6bc Hash left 2 bytes 89 fd RSA signature value m^d mod n (2047 bits) Signature Packet (tag 2) (312 bytes) Version: 4 (current) Signiture Type: Positive certification of a User ID and Public-Key packet (0x13) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (34 bytes) Key Flags (sub 27) (1 bytes) Flag: This key may be used to certify other keys. Flag: This key may be used to sign data. Preferred Symmetric Algorithms (sub 11) (5 bytes) Symmetric Algorithm: AES with 256-bit key (sym 9) Symmetric Algorithm: AES with 192-bit key (sym 8) Symmetric Algorithm: AES with 128-bit key (sym 7) Symmetric Algorithm: CAST5 (128 bit key, as per) (sym 3) Symmetric Algorithm: TripleDES (168 bit key derived from 192) (sym 2) Preferred Hash Algorithms (sub 21) (5 bytes) Hash Algorithm: SHA2-256 (hash 8) Hash Algorithm: SHA-1 (hash 2) Hash Algorithm: SHA2-384 (hash 9) Hash Algorithm: SHA2-512 (hash 10) Hash Algorithm: SHA2-224 (hash 11) Preferred Compression Algorithms (sub 22) (3 bytes) Compression Algorithm: ZLIB \u0026lt;RFC1950\u0026gt; (comp 2) Compression Algorithm: BZip2 (comp 3) Compression Algorithm: ZIP \u0026lt;RFC1951\u0026gt; (comp 1) Features (sub 30) (1 bytes) Flag: Modification Detection (packets 18 and 19) Key Server Preferences (sub 23) (1 bytes) Flag: No-modify Signature Creation Time (sub 2): 2016-03-19T04:07:41Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x0d5e5d9106bab6bc Hash left 2 bytes 01 d6 RSA signature value m^d mod n (2048 bits) Signature Packet (tag 2) (540 bytes) Version: 4 (current) Signiture Type: Generic certification of a User ID and Public-Key packet (0x10) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-512 (hash 10) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2016-03-20T01:57:31Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x6caca448860cdc13 Hash left 2 bytes 5a ec RSA signature value m^d mod n (4096 bits) Signature Packet (tag 2) (284 bytes) Version: 4 (current) Signiture Type: Generic certification of a User ID and Public-Key packet (0x10) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2016-03-20T23:53:54Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x0716748a30d155ad Hash left 2 bytes 21 c4 RSA signature value m^d mod n (2047 bits) Public-Subkey Packet (tag 14) (269 bytes) Version: 4 (current) Public key creation time: 2016-03-19T01:48:04Z Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (2048 bits) RSA public encryption exponent e (17 bits) Signature Packet (tag 2) (293 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (15 bytes) Signature Creation Time (sub 2): 2016-03-19T01:48:04Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to encrypt communications. Flag: This key may be used to encrypt storage. Key Expiration Time (sub 9): 540 days after (2017-09-10T01:48:04Z) Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x0d5e5d9106bab6bc Hash left 2 bytes a3 a8 RSA signature value m^d mod n (2047 bits) Signature Packet (tag 2) (287 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (9 bytes) Key Flags (sub 27) (1 bytes) Flag: This key may be used to encrypt communications. Flag: This key may be used to encrypt storage. Signature Creation Time (sub 2): 2016-03-19T04:09:15Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x0d5e5d9106bab6bc Hash left 2 bytes d7 48 RSA signature value m^d mod n (2047 bits) Public-Subkey Packet (tag 14) (269 bytes) Version: 4 (current) Public key creation time: 2016-03-19T01:49:00Z Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (2048 bits) RSA public encryption exponent e (17 bits) Signature Packet (tag 2) (580 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (15 bytes) Signature Creation Time (sub 2): 2016-03-19T01:49:00Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to sign data. Key Expiration Time (sub 9): 540 days after (2017-09-10T01:49:00Z) Unhashed Subpacket (297 bytes) Issuer (sub 16): 0x0d5e5d9106bab6bc Embedded Signature (sub 32) (284 bytes) Signature Packet (tag 2) (284 bytes) Version: 4 (current) Signiture Type: Primary Key Binding Signature (0x19) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2016-03-19T01:49:00Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x4ce1877e19438c70 Hash left 2 bytes f3 8d RSA signature value m^d mod n (2046 bits) Hash left 2 bytes 91 40 RSA signature value m^d mod n (2047 bits) Signature Packet (tag 2) (603 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (38 bytes) Key Flags (sub 27) (1 bytes) Flag: This key may be used to sign data. Issuer Fingerprint (sub 33) (21 bytes) Version: 4 (need 20 octets length) Fingerprint (20 bytes) c7 8b 82 d8 c7 95 12 f7 9c c0 d7 c8 0d 5e 5d 91 06 ba b6 bc Signature Creation Time (sub 2): 2017-09-06T23:56:27Z Key Expiration Time (sub 9): 902 days after (2018-09-06T23:56:27Z) Unhashed Subpacket (297 bytes) Embedded Signature (sub 32) (284 bytes) Signature Packet (tag 2) (284 bytes) Version: 4 (current) Signiture Type: Primary Key Binding Signature (0x19) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2016-03-19T01:49:00Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x4ce1877e19438c70 Hash left 2 bytes f3 8d RSA signature value m^d mod n (2046 bits) Issuer (sub 16): 0x0d5e5d9106bab6bc Hash left 2 bytes 0d 16 RSA signature value m^d mod n (2047 bits) Signature Packet (tag 2) (603 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (38 bytes) Key Flags (sub 27) (1 bytes) Flag: This key may be used to sign data. Issuer Fingerprint (sub 33) (21 bytes) Version: 4 (need 20 octets length) Fingerprint (20 bytes) c7 8b 82 d8 c7 95 12 f7 9c c0 d7 c8 0d 5e 5d 91 06 ba b6 bc Signature Creation Time (sub 2): 2018-08-31T16:19:24Z Key Expiration Time (sub 9): 1261 days after (2019-08-31T16:19:12Z) Unhashed Subpacket (297 bytes) Embedded Signature (sub 32) (284 bytes) Signature Packet (tag 2) (284 bytes) Version: 4 (current) Signiture Type: Primary Key Binding Signature (0x19) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2016-03-19T01:49:00Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x4ce1877e19438c70 Hash left 2 bytes f3 8d RSA signature value m^d mod n (2046 bits) Issuer (sub 16): 0x0d5e5d9106bab6bc Hash left 2 bytes d4 df RSA signature value m^d mod n (2044 bits) Signature Packet (tag 2) (603 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (38 bytes) Key Flags (sub 27) (1 bytes) Flag: This key may be used to sign data. Issuer Fingerprint (sub 33) (21 bytes) Version: 4 (need 20 octets length) Fingerprint (20 bytes) c7 8b 82 d8 c7 95 12 f7 9c c0 d7 c8 0d 5e 5d 91 06 ba b6 bc Signature Creation Time (sub 2): 2019-03-13T00:38:24Z Key Expiration Time (sub 9): 1479 days after (2020-04-06T00:38:24Z) Unhashed Subpacket (297 bytes) Embedded Signature (sub 32) (284 bytes) Signature Packet (tag 2) (284 bytes) Version: 4 (current) Signiture Type: Primary Key Binding Signature (0x19) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2016-03-19T01:49:00Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x4ce1877e19438c70 Hash left 2 bytes f3 8d RSA signature value m^d mod n (2046 bits) Issuer (sub 16): 0x0d5e5d9106bab6bc Hash left 2 bytes 0f 14 RSA signature value m^d mod n (2047 bits) Signature Packet (tag 2) (603 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-512 (hash 10) Hashed Subpacket (38 bytes) Key Flags (sub 27) (1 bytes) Flag: This key may be used to sign data. Issuer Fingerprint (sub 33) (21 bytes) Version: 4 (need 20 octets length) Fingerprint (20 bytes) c7 8b 82 d8 c7 95 12 f7 9c c0 d7 c8 0d 5e 5d 91 06 ba b6 bc Signature Creation Time (sub 2): 2020-04-06T02:40:10Z Key Expiration Time (sub 9): 1960 days after (2021-07-30T02:40:10Z) Unhashed Subpacket (297 bytes) Embedded Signature (sub 32) (284 bytes) Signature Packet (tag 2) (284 bytes) Version: 4 (current) Signiture Type: Primary Key Binding Signature (0x19) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2016-03-19T01:49:00Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x4ce1877e19438c70 Hash left 2 bytes f3 8d RSA signature value m^d mod n (2046 bits) Issuer (sub 16): 0x0d5e5d9106bab6bc Hash left 2 bytes 69 4e RSA signature value m^d mod n (2047 bits) Signature Packet (tag 2) (603 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-512 (hash 10) Hashed Subpacket (38 bytes) Key Flags (sub 27) (1 bytes) Flag: This key may be used to sign data. Issuer Fingerprint (sub 33) (21 bytes) Version: 4 (need 20 octets length) Fingerprint (20 bytes) c7 8b 82 d8 c7 95 12 f7 9c c0 d7 c8 0d 5e 5d 91 06 ba b6 bc Signature Creation Time (sub 2): 2021-07-02T22:45:27Z Key Expiration Time (sub 9): 2322 days after (2022-07-27T22:45:27Z) Unhashed Subpacket (297 bytes) Embedded Signature (sub 32) (284 bytes) Signature Packet (tag 2) (284 bytes) Version: 4 (current) Signiture Type: Primary Key Binding Signature (0x19) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA-1 (hash 2) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2016-03-19T01:49:00Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x4ce1877e19438c70 Hash left 2 bytes f3 8d RSA signature value m^d mod n (2046 bits) Issuer (sub 16): 0x0d5e5d9106bab6bc Hash left 2 bytes 89 0c RSA signature value m^d mod n (2048 bits) 長ったらしくなって申し訳ないが，毎年1年ずつ有効期限を延長しているのが分かる。 私もこういう鍵運用にしようかなぁ。 やっぱ鍵そのものを度々替えるのはダメだよねぇ。\nブックマーク  OpenPGP の実装 OpenPGP パケットを可視化する gpgpdump  参考図書   暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\n   暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\n "
    },
    {
      "title": "仮名・ローマ字変換する Go パッケージを作ってみた",
      "section": "golang",
      "description": "ついカッとなってやった。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/kana-roman-conversion/",
      "published": "2021-09-11T03:31:49+00:00",
      "update": "2021-09-12T02:38:47+00:00",
      "content": "@mattn_jp さんの tweet で偽名や偽住所を生成できる mattn/go-gimei という Go パッケージを知る。 なにそれ便利。 さっそく使わせてもらおう。\nところでこれローマ字があるといいよね。\nというわけで，仮名からローマ字に変換するパッケージを作ってしまった（笑）\n spiegel-im-spiegel/krconv: Convert kana-character to roman-alphabet  こんな感じで使うことができる。\npackage krconv_test import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/krconv\u0026#34; ) func ExampleConvert() { s := \u0026#34;マツエ テッペイ　めっちゃほりでぃ ﾅﾝﾊﾞかげつで まんざい みるんだょっ\u0026#34; fmt.Println(krconv.Convert(s)) //Output: \t//matsue teppei metchahoridei nambakagetsude manzai mirundayotsu } ちなみに UTF-8 文字列が前提ね。\nこれと先程の mattn/go-gimei を組み合わせてみよう。\n//go:build run // +build run  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;github.com/mattn/go-gimei\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/krconv\u0026#34; ) func main() { p := gimei.NewName() fmt.Println(\u0026#34;氏名：\u0026#34;, p.Kanji()) fmt.Println(\u0026#34;カナ：\u0026#34;, p.Katakana()) fmt.Println(\u0026#34;ローマ字：\u0026#34;, strings.ToTitle(krconv.Convert(p.Last.Hiragana())), strings.Title(krconv.Convert(p.First.Hiragana()))) fmt.Println(\u0026#34;Email：\u0026#34;, string([]rune(krconv.Convert(p.First.Hiragana()))[0:1])+\u0026#34;.\u0026#34;+krconv.Convert(p.Last.Hiragana())+\u0026#34;@example.com\u0026#34;) } 出力結果はこんな感じ。\n$ go run sample.go 氏名： 上原 弥璃 カナ： ウエハラ イヨリ ローマ字： UEHARA Iyori Email： i.uehara@example.com どやさ！\n変換については，以下のページを参考に，ヘボン式にしている。\n ヘボン式ローマ字｜神奈川県パスポートセンター公式サイト ヘボン式ローマ字綴方表（外務省のページ？）  ただし，長音の扱い（大野（おおの）→ [☓] oono , [○] ono）については判定が難しそうなので無視している1。 そうそう，これに関連して長音の記号（ー）は変換後の文字列から削除することにした。\n全体の処理手順としては\n 半角全角変換（全角英数・記号は半角に，半角カナは全角に，カナの濁点・半濁点の合成列は事前合成形に） カタカナ→平仮名変換 文字単位（rune 単位ではない）に分割 文字単位でローマ字への置き換え 拗音の変換 撥音・促音の変換  という感じ。 仮名文字以外の英数字や漢字や記号（「々」等）は素通しなのであしからず。 ヷ，ヸ，ヹ，ヺ はどう変換していいか分からなかったので，これも素通ししている。 「あ゙」のような対応するローマ字のない合成列も同様。\nあとヒープを潤沢に使ってループもぐるぐる回してかなり富豪的なコードになっているので，大規模文字列やクリティカルな処理には向いてない。\nというわけで，こんなんでよろしければどうぞ。\n【2021-09-12 追記】 変換ロジックを見直した v0.1.2 をリリースした。\n Release v0.1.2 · spiegel-im-spiegel/krconv · GitHub  krconv パッケージの変換ロジックは，同じく拙作の gnkf からのコピペなのだが，仮名文字を平仮名に寄せると「ば（U+306F U+3099）」「ぱ（U+306F U+309A）」のような濁点・半濁点の結合文字を付加した合成列に対応できてないことに気が付いた。\nそこで変換手順の前半を\n 平仮名→カタカナ変換 半角全角変換（全角英数・記号は半角に，半角カナは全角に，濁点・半濁点の合成列は事前合成形に）  と入れ替えることで対応した。 仮名文字を全角カタカナに寄せた上で変換するわけですな。\nブックマーク   英語で「ー」長音はどう書けば良いのか | ふーらいの思うこと\n 【思うこと】URLに悩む　その2 | ふーらいの思うこと    Unicode 文字列を「文字」単位に分離する\n  参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n   ヘボン式では基本的に長音は表記しないらしい。例示では「佐藤（さとう） 」の「う」は長音で「SATO」と表記するけど「松浦（まつうら）」の「う」は長音ではないので「MATSUURA」と書けとある。分かるか！ こんなもん。要するに仮名文字からそれが長音かどうか判定するのは不可能なんだよ。せいぜい「ー」のような明確な長音記号を省くくらいしかできないわけ。機械的な処理はこれが限界と諦めた。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "Go 1.17.1 のリリース【セキュリティ・アップデート】",
      "section": "release",
      "description": "Go 1.16.5 の修正が直りきってなかったようだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2021/09/go-1_17_1-is-released/",
      "published": "2021-09-10T10:58:44+00:00",
      "update": "2021-09-10T11:00:22+00:00",
      "content": "Go 1.17.1 がリリースされた。\n [security] Go 1.17.1 and Go 1.16.8 are released  今回は1件の脆弱性修正を含んでいる。\ngo1.17.1 (released 2021-09-09) includes a security fix to the archive/zip package, as well as bug fixes to the compiler, linker, the go command, and to the crypto/rand, embed, go/types, html/template, and net/http packages. See the Go 1.17.1 milestone on our issue tracker for details. via Release History - The Go Programming Language  CVE-2021-39293 The fix for CVE-2021-33196 can be bypassed by crafted inputs. As a result, the NewReader and OpenReader functions in archive/zip can still cause a panic or an unrecoverable fatal error when reading an archive that claims to contain a large number of files, regardless of its actual size. via Go 1.17.1 and Go 1.16.8 are released  Go 1.16.5 の修正が直りきってなかったようだ。 CVE-2021-33196 は CVSSv3.1 基本評価値が 7.5 とヤバめの値だったので，今回も早めに対処するのがいいだろう。\n（以下未稿）\n例によって\u0026hellip; Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.17.1.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.17.1.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.17.1.linux-amd64.tar.gz $ sudo mv go go1.17.1 $ sudo ln -s go1.17.1 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.17.1 linux/amd64 アップデートは計画的に。\n参考図書   プログラミング言語Go アラン・ドノバン (著), ブライアン・カーニハン (著), 柴田芳樹 (著) 丸善出版 2016-06-20 (Release 2021-07-13) Kindle版 B099928SJD (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  Kindle 版出た！ 一部内容が古びてしまったが，この本は Go 言語の教科書と言ってもいいだろう。感想はこちら。\nreviewed by Spiegel on 2021-05-22 (powered by PA-APIv5)\n "
    },
    {
      "title": "改めて TeX Live を Ubuntu に（APT を使わずに）導入する",
      "section": "remark",
      "description": "LuaLaTeX でソースコードを含む文書を PDF 出力するところまで。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/09/install-texlive-in-ubuntu-again/",
      "published": "2021-09-09T13:20:36+00:00",
      "update": "2021-09-10T09:57:54+00:00",
      "content": "6月にパソコンを買い換えてから新しいマシンには $\\mathrm{\\TeX}$ 環境を入れてなかったのだが，先日『LaTeX2ε美文書作成入門』第8版の読書感想文を書いたばかりなので，調子に乗って TeX Live 2021 を入れてしまおうと思い立った。\n『LaTeX2ε美文書作成入門』の付録Aには\n あらかじめ /usr/local/texlive というディレクトリを作成し，インストールする人の権限で書き込めるようにしておくのが簡単です ［改訂第8版］LaTeX2ε美文書作成入門より  とか書かれてあって「やっぱそーなのか」と納得してしまった。 激しくダサい気がするがしょうがないか。 まぁ，今回は個人パソコンなので素直に\n$ cd /usr/local/ $ sudo mkdir texlive $ sudo chown -R username:username texlive としてしおう。\nサーバ機などでは，インストール完了後にオーナーを root に書き戻し\n$ cd /usr/local $ sudo chown -R root:root texlive $ cd texlive/2021/bin/x86_64-linux/ $ sudo ./tlmgr path add と /usr/local/bin/ 等パスの通ったディレクトリへシンボリック・リンクを張っておけば複数ユーザで共有できるようになる。 アップグレード等で元に戻す場合は\n$ sudo tlmgr path remove $ cd /usr/local/ $ sudo chown -R username:username texlive ... という感じに，いったんシンボリック・リンクを削除してから諸々の作業を行うといいだろう。\nOpenPGP 公開鍵を取ってくる TeX Live のサイトでは検証用に OpenPGP 公開鍵を公開している。 これを取ってきて自分の鍵束にインポートしてしまおう。\n$ gpg --fetch-key http://www.tug.org/texlive/files/texlive.asc gpg: 鍵を\u0026#39;http://www.tug.org/texlive/files/texlive.asc\u0026#39;から要求 gpg: 鍵0D5E5D9106BAB6BC: 公開鍵\u0026#34;TeX Live Distribution \u0026lt;tex-live@tug.org\u0026gt;\u0026#34;をインポートしました gpg: 処理数の合計: 1 gpg: インポート: 1 $ gpg --list-keys 0D5E5D9106BAB6BC pub rsa2048 2016-03-19 [SC] C78B82D8C79512F79CC0D7C80D5E5D9106BAB6BC uid [ 不明 ] TeX Live Distribution \u0026lt;tex-live@tug.org\u0026gt; sub rsa2048 2016-03-19 [E] sub rsa2048 2016-03-19 [S] [有効期限: 2022-07-27] これはアレだな。 TeX Live がアップグレードされるたびに更新しろってことだな。\nインストーラのダウンロードと検証 では続きを。\n$ curl -L \u0026#34;https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz\u0026#34; -O $ curl -L \u0026#34;https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz.sha512\u0026#34; -O $ curl -L \u0026#34;https://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz.sha512.asc\u0026#34; -O $ gpg -d install-tl-unx.tar.gz.sha512.asc gpg: 署名されたデータが\u0026#39;install-tl-unx.tar.gz.sha512\u0026#39;にあると想定します gpg: 2021年09月08日 08時53分40秒 JSTに施された署名 gpg: RSA鍵4CE1877E19438C70を使用 gpg: \u0026#34;TeX Live Distribution \u0026lt;tex-live@tug.org\u0026gt;\u0026#34;からの正しい署名 [不明の] gpg: *警告*: この鍵は信用できる署名で証明されていません! gpg: この署名が所有者のものかどうかの検証手段がありません。 主鍵フィンガープリント: C78B 82D8 C795 12F7 9CC0 D7C8 0D5E 5D91 06BA B6BC 副鍵フィンガープリント: D8F2 F860 57A8 57E4 2A88 106A 4CE1 877E 1943 8C70 $ sha512sum -c install-tl-unx.tar.gz.sha512 install-tl-unx.tar.gz: OK なんちう回りくどい1。 普通にダウンロードファイルに署名すりゃいいぢゃん orz\nちなみに拙作の gnkf を使っても\n$ gnkf hash -a SHA-512 -c install-tl-unx.tar.gz.sha512 install-tl-unx.tar.gz: OK てな感じで検証できる。 sha512sum コマンドがない環境でどうぞ。 宣伝でした（笑）\nよーやくインストール開始 $ tar xvf install-tl-unx.tar.gz $ cd install-tl-20210908/ $ ./install-tl リポジトリを指定する必要はないみたい。 適当に近場を探してくれてるようだ。\n======================\u0026gt; TeX Live installation procedure \u0026lt;===================== ======\u0026gt; Letters/digits in \u0026lt;angle brackets\u0026gt; indicate \u0026lt;======= ======\u0026gt; menu items for actions or customizations \u0026lt;======= = help\u0026gt; https://tug.org/texlive/doc/install-tl.html \u0026lt;======= Detected platform: GNU/Linux on x86_64 \u0026lt;B\u0026gt; set binary platforms: 1 out of 16 \u0026lt;S\u0026gt; set installation scheme: scheme-full \u0026lt;C\u0026gt; set installation collections: 40 collections out of 41, disk space required: 7135 MB \u0026lt;D\u0026gt; set directories: TEXDIR (the main TeX directory): /usr/local/texlive/2021 TEXMFLOCAL (directory for site-wide local files): /usr/local/texlive/texmf-local TEXMFSYSVAR (directory for variable and automatically generated data): /usr/local/texlive/2021/texmf-var TEXMFSYSCONFIG (directory for local config): /usr/local/texlive/2021/texmf-config TEXMFVAR (personal directory for variable and automatically generated data): ~/.texlive2021/texmf-var TEXMFCONFIG (personal directory for local config): ~/.texlive2021/texmf-config TEXMFHOME (directory for user-specific files): ~/texmf \u0026lt;O\u0026gt; options: [ ] use letter size instead of A4 by default [X] allow execution of restricted list of programs via \\write18 [X] create all format files [X] install macro/font doc tree [X] install macro/font source tree [ ] create symlinks to standard directories \u0026lt;V\u0026gt; set up for portable installation Actions: \u0026lt;I\u0026gt; start installation to hard disk \u0026lt;P\u0026gt; save installation profile to \u0026#39;texlive.profile\u0026#39; and exit \u0026lt;Q\u0026gt; quit Enter command: 必要に応じて設定を変えて（既定のままでも無問題）問題なければ I を入力してインストールを開始する。 私の環境では1時間近くかかった。 お茶菓子を用意しておくか（笑）\n環境変数については ~/.profile ファイルに\n# Expand $PATH to include the directory where TeX Live applications go. texlive_path=\u0026#34;/usr/local/texlive/2021\u0026#34; texlive_bin_path=\u0026#34;${texlive_path}/bin/x86_64-linux\u0026#34; if [ -d \u0026#34;$texlive_path\u0026#34; -a -n \u0026#34;${PATH##*${texlive_bin_path}}\u0026#34; -a -n \u0026#34;${PATH##*${texlive_bin_path}:*}\u0026#34; ]; then export PATH=\u0026#34;$PATH:$texlive_bin_path\u0026#34; fi unset texlive_path texlive_bin_path と追記しておけばいいかな。 一応，動作確認しておく。\n$ lualatex -v This is LuaHBTeX, Version 1.13.2 (TeX Live 2021) Execute \u0026#39;luahbtex --credits\u0026#39; for credits and version details. There is NO warranty. Redistribution of this software is covered by the terms of the GNU General Public License, version 2 or (at your option) any later version. For more information about these matters, see the file named COPYING and the LuaTeX source. LuaTeX is Copyright 2021 Taco Hoekwater and the LuaTeX Team. マニュアルに関しては texdoc コマンドを使って\n$ texdoc luatex などとすれば対応する PDF ファイルが開く。 便利！\n自動実行可能な外部コマンドの指定 とりあえず shell_escape_commands の値を変更しておく。 インストール直後は\n$ kpsewhich -var-value=shell_escape_commands bibtex,bibtex8,extractbb,gregorio,kpsewhich,makeindex,repstopdf,texosquery-jre8, となっているので /usr/ocal/texlive/texmf-local/web2c/texmf.cnf ファイルを作成し以下を記述する。\nshell_escape_commands = \\ bibtex,bibtex8,pbibtex,jbibtex,\\ extractbb,\\ gregorio,\\ kpsewhich,\\ makeindex,mendex,\\ repstopdf,epspdf,\\ texosquery-jre8,\\ これで shell_escape_commands の値が上書きされて\n$ kpsewhich -var-value=shell_escape_commands bibtex,bibtex8,pbibtex,jbibtex,extractbb,gregorio,kpsewhich,makeindex,mendex,repstopdf,epspdf,texosquery-jre8, となる。\n設定を変更したら mktexlsr で状態を更新しておくこと。\n$ mktexlsr mktexlsr: Updating /usr/local/texlive/2021/texmf-config/ls-R... mktexlsr: Updating /usr/local/texlive/2021/texmf-dist/ls-R... mktexlsr: Updating /usr/local/texlive/2021/texmf-var/ls-R... mktexlsr: Updating /usr/local/texlive/texmf-local/ls-R... mktexlsr: Done. LuaLaTeX でなんか出力してみる そうだ。 プログラムコードを出してみよう。\n LuaLaTeX でコードを書いてみる  その前に listings パッケージで Go コードの syntax highlight が効くよう listings-golang を取ってくる。\n$ cd /usr/local/texlive/texmf-local/tex/latex/ $ git clone git@github.com:julienc91/listings-golang.git $ mktexlsr そうそう。 $\\mathrm{Lua\\LaTeX}$ を使うならフォントキャッシュも念の為にアップデートしておくか。\n$ luaotfload-tool -fu 用意したテキストはこんな感じ。\n\\documentclass{jlreq} \\usepackage[jis2004,deluxe]{luatexja-preset} % Japanese fonts \\setmonofont[AutoFakeSlant,BoldItalicFeatures={FakeSlant},Scale=MatchLowercase]{Inconsolatazi4} % use Inconsolata  \\usepackage{graphicx,xcolor} % \\usepackage{listings} \\usepackage{listings-golang} % import this package after listings \\lstset{ frame=single, basicstyle=\\small\\ttfamily, tabsize=4, commentstyle=\\color{darkgray}, keywordstyle=\\color{brown}\\bfseries, stringstyle=\\color{blue}, showstringspaces=false } \\begin{document} \\section{Go 言語による Hello World} \\begin{lstlisting}[language=Golang] package main import \u0026#34;fmt\u0026#34; func main() { for i := 0; i \u0026lt; 10; i++ { fmt.Println(\u0026#34;Hello, world\u0026#34;) //Hello, 世界 } } \\end{lstlisting} \\section{シェルスクリプト} \\begin{lstlisting}[language=sh] #!/bin/sh for i in `seq 100`; do j=\u0026#34;$i\u0026#34; if [`expr $i % 3` == 0 ]; then echo -n \u0026#39;Fizz\u0026#39;; j=\u0026#39;\u0026#39;; fi  if [ `expr $i % 5` == 0 ]; then echo -n \u0026#39;Buzz\u0026#39;; j=\u0026#39;\u0026#39;; fi echo \u0026#34;$j\u0026#34; done \\end{lstlisting} \\end{document} へっへっへ。 jlreq ドキュメントクラスを使ってみたぜ。\nこれを処理した結果は以下の通り。\nsample.pdf  うんうん。 こんなもんだろう。\nVS Code に LaTeX Workshop を導入する 『LaTeX2ε美文書作成入門』でも紹介されていた VS Code 用の LaTeX Workshop を導入してみた。\n$ code --install-extension James-Yu.latex-workshop たとえば，以下の内容で .latexmkrc ファイルを用意しておく。\n#!/usr/bin/env perl # LaTeX commands $pdflatex = \u0026#39;lualatex %O -synctex=1 %S\u0026#39;; $latex = \u0026#39;uplatex %O -synctex=1 %S\u0026#39;; $latex_silent_switch = \u0026#39;-interaction=batchmode -c-style-errors\u0026#39;; # bibTeX commands $bibtex = \u0026#39;upbibtex %O %B\u0026#39;; $biber = \u0026#39;biber %O --bblencoding=utf8 -u -U --output_safechars %B\u0026#39;; $makeindex = \u0026#39;mendex %O -o %D %S\u0026#39;; # Device Driver $dvipdf = \u0026#39;dvipdfmx %O -z9 -V 7 -o %D %S\u0026#39;; $dvips = \u0026#39;dvips %O -z -f %S | convbkmk -u \u0026gt; %D\u0026#39;; $ps2pdf = \u0026#39;ps2pdf14 -dPDFA -dPDFACompatibilityPolicy=1 -sProcessColorModel=DeviceCMYK %O %S %D\u0026#39;; # Typeset mode (generate a PDF) $pdf_mode = 1; # 0: do not generate a pdf , 1: using $pdflatex , 2: using $ps2pdf , 3: using $dvipdf # Other configuration $pvc_view_file_via_temporary = 0; $max_repeat = 5; したら $\\mathrm{\\LaTeX}$ テキストを保存するたびに上の設定でタイプセットが自動実行されて PDF まで作ってしまうわけですよ。 めっさ便利。\nブックマーク   Installing TeX Live over the Internet - TeX Users Group\n  TeX Wiki\n  TeX Live を Ubuntu に（APT を使わずに）導入する\n  TeX Live 2018 から 2019 へのアップグレード\n  TeX Live 2020 へのアップグレード\n  参考図書   [改訂第8版]LaTeX2ε美文書作成入門 奥村晴彦 (著), 黒木裕介 (著) 技術評論社 2020-11-14 大型本 4297117126 (ASIN), 9784297117122 (EAN), 4297117126 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  2020年末に第8版が出てたのに気付かなかったよ。可能なら紙の本も買って常に側に置いておくのが吉。版元には PDF 版もある。\nreviewed by Spiegel on 2021-09-05 (powered by PA-APIv5)\n   電子署名の検証で「*警告*: この鍵は信用できる署名で証明されていません!」と表示されているが，気にしなくてよい。その前の「\u0026quot;TeX Live Distribution \u0026lt;tex-live@tug.org\u0026gt;\u0026quot;からの正しい署名」が表示されていればOK。警告が出るのはインポートした公開鍵に自鍵で署名したり有効度を設定したりしてないからだが，直接手渡しされた鍵でもないのに安易に信用するのは危険であると言っておこう。もちろん何らかの手段で鍵と所有者が確定できるのであれば署名するなり有効度を設定するなりすればよい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "予防接種へ行ってきた（第2話）",
      "section": "remark",
      "description": "流石ドラッグストアは商売上手だ（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/09/vaccines-are-go-2nd/",
      "published": "2021-09-07T02:03:27+00:00",
      "update": "2021-09-07T02:13:21+00:00",
      "content": "前半からの続き。\n予防接種前日まで 1回目は勤務先の夏季休暇のタイミングで予約できたが，2回目はこちらでタイミングを選べない。 できれば週末付近にしてほしかったが，思いっきり月曜日になってしまった。 会場は1回目と同じ市立病院。\nというわけで，勤務先の上司に話したところ1「念のため翌日も有給休暇にしなさい」と言われ休むことにした。 翌朝になって発熱して休暇願いするとか，勤務中に具合が悪くなったりするくらいなら最初から休みにしたほうがマシだろうという判断である。\n予防接種当日 午後イチの会議にちょっとだけ参加して帰るつもりが（午後から半休を申請済み），いつものように紛糾して予定より20分遅れで退勤。 一旦帰宅してから接種会場に向かうつもりである。\n帰り道でふと思い出した。\n「しまった。予診票書いてない！」  帰宅してから大慌てで予診票を書き（前回と同じ内容だしw），準備して会場に向かう。 お薬手帳も忘れないように！\n前回の教訓から，できるだけ待ちなしにできるよう予約時刻15分前キッチリに会場に到着する。\nヤクをキメてくるぜ！ | Flickr  したら「待ち」どころか待機エリアに誰もいなかった。 さすが月曜日といったところか。 そのまま整理券をもらって入場。 会場内も待ち行列はなく，予約時刻の10分前にはお注射完了してしまった（笑） ちなみに予診票に不備があって赤ペンを入れられてしまったヨ。 慌てて書くもんじゃないよね。 ゴメンペコン。\n接種後の待機エリアにて持参してきた Kindle 端末でラノベを読みながら15分ほど和んで帰宅。 本当は病院内のカフェで茶でもシバいてから帰りたかったが，このご時世で開いてなかった。 残念。\n予診の担当医から「2回目は熱が出やすい」とアドバイスされたので，帰りがけに会場近くのドラッグストアで解熱剤を買うことにした。 いや，流石だね。 入口近くのエリアに解熱剤の特設コーナーがあったよ（笑）\nアスピリンとイブプロフェンのどちらにしようか悩んだが，某ダイ・ハードのせいでアスピリンは頭痛薬の印象が強い（イブプロフェンも頭痛・生理痛に効くけどね）。 とういうわけで，イブプロフェンが主成分の解熱剤を買って帰った。 まぁ，ドラッグストアで処方箋なしで買える薬なんだから気休め程度で。\n予防接種翌日 いつもどおりに起きる。 熱は平熱。 そういや今日は着替えなくてよかった。 燃えるゴミの日なのでゴミ出しして，今日はのんびり過ごそう。\nもし SARS-CoV-2 に感染したら 勤務先は「予防接種は任意で」というスタンスをとっている。 なので実施する場合は今回のように有給休暇をとる必要がある。 ただし，松江市でもようやく職域接種が始まるので，そちらの取りまとめはしてくれたらしい。 若い人はどうしても出遅れてるので（政治が悪いw）職域接種はありがたいかもしれない。\n感染時の手当も特にないらしいが，そもそも病気で数週間休んだ場合は傷病手当が日割り計算でもらえるので，そっちを積極的に利用してくれと言われている。 また，重症化して費用がかさんだ場合は高額療養費が貰えるはず。 実は私も持病関係でコレのお世話になっている。\n大抵の「病院」は申し出れば費用に関して相談に乗ってくれるセクションがあるので（病院側も貰いっぱぐれるのは困るからね）積極的に利用すべきだろう。\n今や誰でも「コロナは伝染 (うつ) るもの」と認識して準備・行動すべきだ。 おそらく年末には別の変異種も登場するだろう。 日頃の（美徳シグナリングではない）衛生管理は当たり前だが，一方で「水際対策」云々と騒ぐ季節はとうに過ぎている。\n「コロナ平気症」も「コロナ恐怖症」も百害あって一利なしだ。 避けられない病なら上手く付き合うことがリスク・マネジメントの基本だし，それを福祉や経済等で支援・補償するのは「政治」の仕事である。\nついでに「脅威」だけを「遠吠え」するク◯メディアは滅びろ！ と言いたい（笑）\nブックマーク  Reaching ‘Herd Immunity’ Is Unlikely in the U.S., Experts Now Believe - The New York Times  ブログ: アメリカでは「集団免疫」に到達するのは難しいと専門家は考えている    参考図書   サンダーバード ARE GO (Original TV Soundtrack) Ben Foster \u0026amp; Nick Foster (メインアーティスト) Rambling RECORDS (Release 2016-01-20) MP3 ダウンロード B07H93B9JF (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  サンダーバードの曲は上がる！\nreviewed by Spiegel on 2021-08-13 (powered by PA-APIv5)\n   ダイ・ハード2 (吹替版) ウィリアム・アザートン (出演), レニー・ハーリン (監督)  (Release 2000-01-01) Prime Video B07CXRPT4J (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  まだ髪がある頃のブルース・ウィリスが観れる（笑） ちなみに私は野沢那智さんのファンなので吹替版が好み。\nreviewed by Spiegel on 2021-09-04 (powered by PA-APIv5)\n   念のために言うと，勤務先は有給休暇の理由を訊くとか野暮なことはしない。今時は当たり前かもしれないが。でも，まぁ，今回は理由が理由なので事前に言っておいたほうがいいと私が判断したのだ。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "改訂第8版『LaTeX2ε美文書作成入門』を眺める",
      "section": "remark",
      "description": "2020年11月に出てたの？ 完全に見落としてたよ orz",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/09/latex-primer/",
      "published": "2021-09-05T08:42:03+00:00",
      "update": "2021-09-05T09:54:36+00:00",
      "content": "Twitter の TL を見て気が付いた。 あれ？ 『LaTeX2ε美文書作成入門』の第8版って出てるの？ 完全に見落としてたよ orz\n『LaTeX2ε美文書作成入門』は Kindle 版もあるし版元で買えば PDF 版もあるんだけど，今回は紙の本を買った。 この手のリファレンス本は，一覧性という観点では，まだ紙のほうが有利。 デジタル版が好みなら PDF 版を買うのがいいだろう。 悪いが，この手の本で Kindle 版はない。\n第7版からの3年間で大きく変わったことといえば $\\mathrm{Lua\\LaTeX}$ 日本語環境の台頭だろう。 序文でも\n 本書も $\\mathrm{Lua\\LaTeX}$ と新しい jleq ドキュメントクラスと原ノ味で組版しました ［改訂第8版］LaTeX2ε美文書作成入門より  と書かれている。 えっ，これ原ノ味フォントなの？ そういや巻末に原ノ味フォントの全グリフが載ってるな（笑）\n入力環境（第2章）についても真っ先に Cloud LaTeX が紹介されているし1（これは第7版でもそうか），コラム内とはいえ VS Code 用の LaTeX Workshop が紹介されていたりする。 また jleq ドキュメントクラスについても14章で詳しく解説している。 時代が変わったんだねぇ。\nグラフィック周りについては第7版に引き続き付録Dで $\\mathrm{Ti}k\\mathrm{Z}$/PGF を詳しく解説している。\n $\\mathrm{Ti}k\\mathrm{Z}$ に慣れると picture 環境は使いたくなくなります ［改訂第8版］LaTeX2ε美文書作成入門より  とか書かれてあって，ちょっと笑ってしまう。\n第8版では R, gnuplot 以外に Python を使った例を挙げている。 ちなみに Go 言語でも gonum.org/v1/plot パッケージで $\\mathrm{Ti}k\\mathrm{Z}$ 出力をサポートしている。 また，みんな大好き DOT 言語でも dot2tex というツール（Python 製）を使うと $\\mathrm{Ti}k\\mathrm{Z}$ 形式に変換してくれるらしい。 もっとも dot2tex には dot2texi $\\mathrm{\\LaTeX}$ パッケージもあるようなので，こっちのほうが便利かもしれないが。 あと PlantUML でもベータ版ながら $\\mathrm{Ti}k\\mathrm{Z}$ 形式に対応しているようだ。\nぶっちゃけ PDF を最終出力とするのなら $\\mathrm{Lua\\LaTeX}$ で必要十分だよな。 まぁ，論文を書くとなると各学会用のドキュメントクラスを使わないといけないので簡単ではないだろうが。\n最近は $\\mathrm{Lua\\LaTeX}$ を直にゴリゴリ書く機会は無くなったが『LaTeX2ε美文書作成入門』を眺めていると色々遊びたくなってくる。 今の仕事が落ち着いたら試してみたいところである。\nブックマーク  TeX Wiki LaTeX Workshopってなに？どうやって使うの？調べてみた！ - Qiita TikZ実例集〜2Dグラフ編 - Notes_JP TikZ実例集〜3D編 - Notes_JP  参考図書   [改訂第8版]LaTeX2ε美文書作成入門 奥村晴彦 (著), 黒木裕介 (著) 技術評論社 2020-11-14 大型本 4297117126 (ASIN), 9784297117122 (EAN), 4297117126 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  2020年末に第8版が出てたのに気付かなかったよ。可能なら紙の本も買って常に側に置いておくのが吉。版元には PDF 版もある。\nreviewed by Spiegel on 2021-09-05 (powered by PA-APIv5)\n   Cloud LaTeX 連携用の VS Code 拡張機能があるんだな。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "失敗体験という技術",
      "section": "remark",
      "description": "技能は成功体験で技術は失敗体験",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2021/09/trial-and-error/",
      "published": "2021-09-05T02:26:57+00:00",
      "update": "2021-09-05T02:59:57+00:00",
      "content": "今回は Facebook の TL で見かけた記事を起点に戯れ言を書いてみる。\n 今の子どもを苦しめているのは、昔の常識を教える大人　植松努氏が実感した、日本教育の世界との“ズレ” - ログミーBiz  教育機関の最終目標は教育機関から離陸させることであり「企業はおそらく最終教育機関」てのはダメなんじゃないのかなぁ。 教育機関があろうとなかろうと人は一生勉強だよ。 まぁ「教育機関」としての企業を踏み台にして別の企業や事業へキャリア・アップするというのなら，労働者側にとってはアリかもしれないが（笑）\n何も知らずに IT 業界に入ったばかりの頃は色々叩き込まれたが，そのうちのひとつは「プログラミング設計は異常系を書ききること」だ。\n正常系は基本的に一本道だが異常系は無数にある。 それらをひとつひとつ迷路パズルの袋小路を塗りつぶすように塞いでいくのがプログラミングだろう。 これはプログラムをフローで認識しているうちは気づかない。 だから新人のうちは状態遷移表を大量に書かされた1。\nでも異常系の列挙は，それを予め知ってないと書けないんだよね。\nこの「予め知る」ための失敗体験こそが 技能 (スキル) ではなく技術の源泉だと思う。 そういう意味で「制御された失敗」を蓄積することはエンジニアとしては正しいやり方と言える。 エンジニアが言う「もう二度とやらない」は「次やるときは上手くやる」という意味である（笑）\nまた当時は「技能はモノに付くが技術は人に付く」とも教えられた。 今回紹介した記事に絡めるなら技能は成功体験で技術は失敗体験と言えるかもしれない。 技能と技術は開発の両輪で，どちらもなくてはならないものだ。\nよく整備された散歩道を歩くのは気持ちいいし，それはそれでよい体験だと思うが，散歩道に施されている「整備」に気付けるのは脇道や寄り道も歩いてこそである。 まぁ，今の世知辛い世の中では，失敗を許容する余裕がないから技術も蓄積されないのかもしれないが。 技術斜陽国ニッポン（笑）\n参考図書   迷路で行こう 忠之, 坂本 (著), 博, 吉岡 (著), 一之, 湯沢 (著), ニコリ (編集) 波書房 1991-12-01 単行本 4816412174 (ASIN), 9784816412172 (EAN), 4816412174 (ISBN)  私はニコリで迷路の解き方を教えてもらいました。\nreviewed by Spiegel on 2021-09-05 (powered by PA-APIv5)\n   子どもが体験するべき50の危険なこと (Make: Japan Books) Gever Tulley (著), Julie Spiegler (著), 金井 哲夫 (翻訳) オライリージャパン 2011-05-26 単行本（ソフトカバー） 4873114985 (ASIN), 9784873114989 (EAN), 4873114985 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ただ守るだけではダメなのよ。\nreviewed by Spiegel on 2014-10-08 (powered by PA-APIv5)\n   火星の人 アンディ ウィアー (著), 小野田和子 (翻訳) 早川書房 2014-08-25 (Release 2014-09-30) Kindle版 B00O1VJZLO (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  面白かった。やっぱ原作のほうがいいな。\nreviewed by Spiegel on 2016-02-20 (powered by PA-APIv5)\n   知らない人のために解説すると，状態遷移表とは「状態」と「イベント」を行・列の表として列挙して，交差する各要素に処理を記述したもの。ちなみに，フローはコードを見れば分かるからフローチャートは要らんと言われた。顧客への言い訳用に書かされたことはあったけど（笑） 現在主流になりつつある関数型言語ではそもそもフロー記述が通用しないかな。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
    }
  ]
}
