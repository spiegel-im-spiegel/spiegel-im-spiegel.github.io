{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "これがオリンピック効果というやつか",
      "section": "remark",
      "description": "なんか微妙に反応があるみたいだし鮮度が落ちないうちにブログに書いておくか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/tokyo-2020/",
      "published": "2019-05-11T13:57:46+00:00",
      "update": "2019-05-11T13:59:34+00:00",
      "content": " 今年は時事ネタは控えめにしようと思っているのだが，なんか微妙に反応があるみたいだし，鮮度が落ちないうちにブログに書いておくか。\n私が気がついたのは福井健策さんによる以下の tweet だった。\n うん？「チケット保有者は、会場内において、写真、動画を撮影･･できます。･･チケット保有者は、これらのコンテンツについて保有する一切の権利をIOCに移転するとともに、その著作者人格権を行使しないことに同意します」（33条3項）そうか、アグレッシブだな。IOC。https://t.co/lCLkIDlY5a\n\u0026mdash; 福井健策 FUKUI, Kensaku (@fukuikensaku) 2019年5月9日  なんちうか「利用規約」が8章51条もある時点で（human-readable でないという意味で）時代遅れにも程があると思うが，件の「東京2020チケット購入・利用規約」の文言はこれ。\n  3．チケット保有者は、会場内において、写真、動画を撮影し、音声を録音することができます。また、チケット保有者は、IOCが、これらのコンテンツに係る知的財産権（著作権法第27条および第28条の権利を含みます。）について、チケット保有者もしくはその代理人に対する金銭の支払や、これらの者から別途許諾を要することなく、単独で権利を保有することに同意し、さらにチケット保有者は、これらのコンテンツについて保有する一切の権利（著作権法第27条および第28条の権利を含みます。）をIOCに移転するとともに、その著作者人格権を行使しないことに同意します。  via 東京2020チケット購入・利用規約  ちなみに「著作権法第27条および第28条の権利」というのは「二次的著作物の作成に関する権利」および「二次的著作物の利用に関する原著作者の権利」を指す。 その上で4項\n  4． IOCは、前項を前提としたうえで、チケット保有者が会場内で撮影・録音したコンテンツを個人的、私的、非営利的かつ非宣伝目的のために利用することができる制限的かつ取消可能な権利を、チケット保有者に対して許諾します。ただし、チケット保有者は、会場内で撮影または録音された動画および音声については、IOCの事前の許可なく、テレビ、ラジオ、インターネット（ソーシャルメディアやライブストリーミングなどを含みます。）その他の電子的なメディア（既に存在するものに限らず将来新たな技術により開発されるものを含みます。）において配信、配布（その他第三者への提供行為を含みます。）することはできません。  via 東京2020チケット購入・利用規約  を規定している。\nつまり「会場」内で作成されたあらゆるコンテンツの権利は IOC (International Olympic Committee) に帰属し，その利用権を（事後に取り消し可能とした上で）本来の著作者に「許諾する」としたわけだ。 しかも財産権の譲渡（移転）と人格権の不行使は無償かつ排他的に行われることを（チケットと引き換えに）強要しているわけだ。 チケットを高額で売りつけた上に権利まで奪うとか何処のジャイアンだよ。\nとはいえ，昔はこういう「ライセンス」は普通にあった。 特にブログ勃興期のゼロ年代前半ではこの手のジャイアニズムが横行し，大きな批判を浴びていた。\n「著作権」がコンテンツホルダー同士を調停するための手段であった20世紀までならこういう規約も有効だったかもしれないが（今でもコンテンツホルダー同士では有効らしいw），今はネット上のあらゆるコミュニケーションが「創作」「創造」とセットになっていて，それを権利を奪う形で禁止するというのはまさに「表現の自由の侵害」であろう。\nとはいえ，向こうさんも商売（興行）でやっていて，特に「放映権」は重要な商売道具なのだから，それをコントロールできないのは困るというのはよく分かる。 実際に音楽ライブでも撮影や録音およびそれらを公開する行為を禁じているところは多い。 それの延長線上と考えればオリンピックの様子を勝手に撮影・録音し公開することを禁じること自体はそれほど無茶な「要求」とは思えない。\n要するに，それを著作者の権利を奪う形で「実装」しているというのが問題なわけだ。 「要求」がまともでも「実装」がクソというのはよくある話である。\nところがここでピントはずれなヤツが出てくるのだ。\n  会場内で撮影した動画は思い出の記録としてSNSにも投稿しておきたい……と思ってしまいそうですが、この規約は実際どういった運用になるのでしょうか。  via 五輪会場で撮影した動画はSNS投稿できない？　東京五輪のチケット規約が話題、組織委員会に見解を聞く - ねとらぼ  ツッコむのそこかよ orz\nオリンピック礼賛も大概にせーよ！ ホンマ，冬眠ならぬ夏眠してる間にオリンピック終わってるとかならないかな。 やりたいやつだけが誰も知らないところでひっそりとやればいい。 それならこんな馬鹿げた規約も不要だろう。\nもう馬鹿すぎて怒る気にもならない。 これがオリンピック効果というやつか。\n参考図書  著作権法 第2版 中山 信弘 有斐閣 2014-10-27 Book 単行本 ASIN: 4641144699, EAN: 9784641144699 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  興味本位で買うには少々お高いので図書館で借りて読んだ。大学とかで専門の教科書にもなっているそうな。独学で読むにはヘヴィな内容だが一度は目を通しておきたい一冊。\nreviewed by Spiegel on 2019-05-11 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "Advanced Package Tool に関する覚え書き",
      "section": "remark",
      "description": "今回の件で自機でのアプリケーションあるいはパッケージ管理について，ちょっと考えてしまった。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/advanced-package-tool/",
      "published": "2019-05-10T09:32:34+00:00",
      "update": "2019-05-11T12:24:54+00:00",
      "content": " 先日 Firefox がやらしたじゃないですか。\n Thread: Add-ons not working due to certificate expiration - Add-on Support - Mozilla Discourse  証明書の期限切れでアドオンが全部排除されるというバグとしてはありがちなやつなんだけど， Mozilla が改修版（v66.0.4）を出してから Ubuntu の APT でアップデートできるようになるまで概ね2日ほどかかってるのよ。\n今回の件で自機でのアプリケーションあるいはパッケージ管理について，ちょっと考えてしまった。 そこでまずは APT について調べ直すところから始めることにした。\ndpkg と Advanced Package Tool 皆さんご存知の通り Ubuntu は Debian から fork したディストリビューションでアプリケーション管理も Debian のものを踏襲している。\nアプリケーションのビルド済みバイナリや関連ファイルにバージョン情報や依存情報等のメタデータを付加したものを（ar/tar/gzip/bzip2 などで）ひとまとめにしたものを「パッケージ」と呼ぶ。 Debian/Ubuntu では .deb の拡張子が付いたファイルがそのパッケージファイルで，パッケージファイルを利用するためのツールが dpkg である。\nただし dpkg にはプリミティブな機能しかないため一般のユーザが dpkg をそのまま使うことはまずない。 一般ユーザ用のフロントエンド（のひとつ）が APT (Advanced Package Tool) ということになる。\nAPT はバックエンドにパッケージ管理用のデータベースを持っていて1，このデータベースをもとにパッケージ間の依存関係を維持しながら可能な限り自動で導入や削除を行おうとする。\nしたがってデータベースにないパッケージは APT では導入できない。 この場合は以下の3つの手段をとることができる。\n サードパーティのリポジトリを登録して APT から導入できるようにする deb ファイルを使って直接インストールする ビルド済みバイナリを直接展開して導入する。またはソースファイルから直接ビルドを行う  Ubuntu パッケージのリリースサイクル Ubuntu は概ね半年ごとにアップグレードされ，リリース時の年月がそのままバージョン番号になっている。 たとえば先日2019年4月にリリースされたバージョンには 19.04 が振られている。\nUbuntu に収録されるパッケージは OS リリース時にバージョンが固定され重大な不具合や脆弱性が発覚しない限り更新されることはないようだ。 先日の Firefox の件はむしろ例外的に早い対応だったということになる。\nしかし，昨今は活況なソフトウェアほどリリースサイクルが短い傾向があり半年というタイムスケールでは追いつかないことも多い。 自身でリスクを引き受けてでも APT による管理を離れて自前で最新バージョンを維持したいという要求もあると思う。\nつまり APT で管理可能なパッケージについても\n APT で導入する deb ファイルを使って直接インストールする ビルド済みバイナリを直接展開して導入する。またはソースファイルから直接ビルドを行う  という3つの手段をとり得るわけだ。\nそこで以降からは管理方法毎によく使うパッケージを分類してみる。 なお，この分類は私の独断と偏見に依る部分が大きいので，他の人にはあまり参考にならないであろう点は先に誤っておく。 ゴメンペコン。\n公式リポジトリから APT を使って管理するパッケージ セキュリティ関連ツールなのでしょうがない 以下のパッケージはセキュリティ関連ツールで，これらに依存するパッケーも多く，特に保守的な運用になっているようだ。 したがって安定的な運用を優先し APT による管理とする。\n   製品名 パッケージ名 備考     GnuPG gnupg 既定でインストール済   OpenSSH openssh-client クライアント側。既定でインストール済   OpenSSL openssl 既定でインストール済    以下も参考にどうぞ\n Windows 環境で作った GnuPG の鍵束を Ubuntu に移行する  APT に任せて安心なパッケージ 以下は何も考えずに APT に任せても大丈夫だろう。 不具合や脆弱性への対応はどうしても遅れるが今のところは許容範囲ということで。\n   製品名 パッケージ名 備考     Firefox firefox 既定でインストール済   Thunderbird thunderbird 既定でインストール済   LibreOffice libreoffice 既定でインストール済   ifconfig net-tools 2 何故か既定で入ってなかった   curl curl 何故か既定で入ってなかった   OpenJDK openjdk-12-jre JRE のみの場合。バージョンごとにパッケージ名が異なるので注意（左は Java 12 の場合）   KDiff3 kdiff3    Graphviz graphviz    vim vim 既定で入ってるのは vim-tiny で vim を入れると置き換わる   BOINC boinc-client, boinc-manager クライアント側   KeePass keepass2 あらかじめ Mono がインストールされていること    Firefox, LibreOffice, Thunderbird については公式サイトで実行イメージがダウンロード可能になっていて，そちらを取ってきて使うこともできるが，完全に APT の管理を離れてしまい，かつ APT で管理されるバージョンと混在になってしまうので考えどころではある。 Firefox Developer Edition を使うなら混在もありかも。\nその他 依存関係とか導入手順とかが複雑で自前で管理するのが面倒くさい，て感じのパッケージ。\n   製品名 パッケージ名 備考     GCC 等 build-essential 何故か 18.10 には既定で入ってなかった   CIFS Client cifs-utils 導入方法は拙文を参照のこと   ClamAV clamav, clamav-daemon 導入方法は拙文を参照のこと    サードパーティ・リポジトリから APT を使って管理するパッケージ Git 公式リポジトリでも導入可能だが最新版が欲しかったので PPA のリポジトリを使うことにした。 詳しくは\n PPA から Git をインストールする  を参照のこと。\nMono インストールにはサードパーティ・リポジトリの登録と署名検証用の公開鍵の取得が必要。 詳しくは\n Ubuntu に Mono を導入する  を参照のこと。\ndeb ファイルを使って直接インストールする deb ファイルを使って直接インストールするには gdebi を使うのがオススメである。 導入は APT からできる。\n$ sudo apt install gdebi-core これで\n$ sudo gdebi foo.deb とすれば依存パッケージも含めてインストールしてくれる。 内部で APT のデータベースを使ってるのかな。\n自前で導入する場合は最新バージョンに常に注意すること。\nATOM エディタ リリースページ から最新版の atom-amd64.deb ファイルをダウンロードしてインストールする。\n$ sudo gdebi ./atom-amd64.deb 詳しくは\n Ubuntu に ATOM エディタを導入する  を参照のこと。\nHugo いや，シングルバイナリで依存関係も殆どないので deb ファイルからインストールする必然性は微塵もないのだが，どうも APT からインストールできるパッケージが全く追従できてないみたいなので。\nリリースページから最新版の deb ファイルを取ってきてインストールすればよい。\n$ sudo gdebi ./hugo_0.55.5_Linux-64bit.deb ビルド済みバイナリを直接展開して導入する 自前で導入する場合は最新バージョンに常に注意すること。\nGo コンパイラ Go コンパイラ自体は APT でも導入可能だが，お互いのリリースタイミングが悪いのか2世代もバージョンが古い。 これでは使いものにならないので（Go コンパイラの公式サポートは1世代前まで），ダウンロードページから go1.xx.x.linux-amd64.tar.gz ファイルを取ってきて任意の場所に展開して使う。\n$ cd /usr/local/src $ sudo curl https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz -O $ cd .. $ unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.12.5.linux-amd64.tar.gz $ sudo mv go go1.12.5 $ sudo ln -s go1.12.5 go $ ./go/bin/go version go version go1.12.5 linux/amd64 bin/ ディレクトリにはパスを通しておけば大丈夫。\nFileZilla これも APT で導入可能なのだが，だいぶバージョンが古いので，ダウンロードページから取ってきたファイルを展開して使うことにする。\n$ cd /usr/local/ $ sudo tar xvf src/FileZilla_3.42.1_x86_64-linux-gnu.tar.bz2 $ sudo chown -R root:root FileZilla3 chown でオーナーを変えるのを忘れないように。\nGit Extensions Mono がインストールされていることが前提。 詳しくは\n Ubuntu に Mono を導入する  を参照のこと。\nTeX Live TeX Live に関しては（大量のパッケージがあるため）最新の環境が必要ないのであれば APT を使うほうがオススメである。\n$ apt show texlive Package: texlive Version: 2018.20190227-1 Priority: optional Section: universe/tex Source: texlive-base Origin: Ubuntu ... が，やっぱり最新の環境がほしいので手動でインストールすることにした。\n手動でインストールする場合はインストーラ install-tl を使う。 TeX Live 内の各パッケージの更新には tlmgr を使う。\n$ sudo tlmgr update --self --all 詳しくは\n TeX Live を Ubuntu に（APT を使わずに）導入する  を参照のこと。\nソースファイルから直接ビルドを行う 自前で導入する場合は最新バージョンに常に注意すること。\npgpdump のビルド 実は APT で導入できるっぽいのだが，自作の gpgpdump の動作確認用にリファレンス実装として最新版が必要なのよ。 GCC 等のツールチェーンがあれば簡単にビルドできる。\nリポジトリからソースコードを取ってきて\n$ ./configure $ make でビルドできる。 なお圧縮パケットの解凍に bz2 が必要な場合は APT でパッケージ libbz2-dev をあらかじめインストールしておくこと。\ngit-credential-libsecret のビルド git-credential 用に git-credential-libsecret をビルドする。\nlibsecret 自体のインストールは APT で行う。\n$ sudo apt install libsecret-1-dev libgnome-keyring-dev これで展開されるソースコードを適当な場所にコピーしてビルドする。\n$ cp -r /usr/share/doc/git/contrib/credential/libsecret ~/work $ cd ~/work/libsecret $ make gcc -g -O2 -Wall -pthread -I/usr/include/libsecret-1 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/uuid -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -o git-credential-libsecret.o -c git-credential-libsecret.c gcc -o git-credential-libsecret git-credential-libsecret.o -lsecret-1 -lgio-2.0 -lgobject-2.0 -lglib-2.0 ビルドした git-credential-libsecret をパスの通ったディレクトリに入れれば完了。\nブックマーク  Ubuntu security notices Debian -- Security Information\n 「apt-get」はもう古い？新しい「apt」コマンドを使ったUbuntuのパッケージ管理 | LFI\n Use GDebi for Quickly Installing DEB Packages in Ubuntu - It's FOSS\n 【Linux FAQ】.debファイルをダウンロードしたのですが、どうやってインストールすればいいですか？ | LFI\n Installing LibreOffice on Linux - The Document Foundation Wiki\n   /etc/apt/ ディレクトリ以下のファイル群がそれ。このうち sources.list が Ubuntu 公式のパッケージ・リポジトリを定義したファイルである。またサードパーティのリポジトリは /etc/apt/sources.list.d/ ディレクトリに *.list ファイルで設定可能である。 [return] パッケージ net-tools をインストールすると ifconfig のほかに arp, netstat, rarp, nameif, route といったツールがインストールされる。 [return]   "
    },
    {
      "title": ".NET 統合に関するブックマーク",
      "section": "remark",
      "description": "ノンビリと成り行きを見守ることにしよう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/bookmarks-for-dotnet/",
      "published": "2019-05-08T13:36:09+00:00",
      "update": "2019-05-08T13:38:17+00:00",
      "content": "いよいよ Microsoft による .NET 統合の動きが本格化しそうである。 めでたい！\n Introducing .NET 5 | .NET Blog  個人的には Mono 上で動くアプリケーションがどうなるか気になるところであるが\n Mono is the original cross-platform implementation of .NET. It started out as an open-source alternative to .NET Framework and transitioned to targeting mobile devices as iOS and Android devices became popular. Mono is the runtime used as part of Xamarin.\n[...]\nTaken together, the .NET Core and Mono runtimes have a lot of similarities (they are both .NET runtimes after all) but also valuable unique capabilities. It makes sense to make it possible to pick the runtime experience you want. We’re in the process of making CoreCLR and Mono drop-in replacements for one another. We will make it as simple as a build switch to choose between the different runtime options.  via Introducing .NET 5  .NET 5 のリリース自体は来年（2020年）なのでノンビリと成り行きを見守ることにしよう。 Go 言語か Kotlin が .NET をサポートすれば完璧なのだが（笑）\n以降では .NET 5 関連のブックマークを挙げていく。 随時更新する予定なのであしからず。\n ［速報］オープンソースの「.NET 5」がすべての.NETを引き継ぐ。.NET Frameworkと.NET CoreとXamarinは「.NET 5」に。Microsoft Build 2019 － Publickey .NET Core 3.0 の目玉の single exe を preview5 で試してみた - Qiita [.NET Core その63 - .NET Coreの将来と.NET 5・.NET Frameworkから.NET Coreへ - kledgeb]\n Ubuntu に Mono を導入する\n  "
    },
    {
      "title": "Go 1.12.5 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。ついでに Ubuntu へのインストールについても言及しておく。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/05/go-1_12_5-is-released/",
      "published": "2019-05-07T13:05:00+00:00",
      "update": "2019-05-10T09:36:43+00:00",
      "content": " Go 1.12.5 がリリースされた。 セキュリティ・アップデートはなし。\n Go 1.12.5 and Go 1.11.10 are released - Google Group   go1.12.5 (released 2019/05/06) includes fixes to the compiler, the linker, the go command, the runtime, and the os package. See the Go 1.12.5 milestone on our issue tracker for details.  via Release History - The Go Programming Language  ちなみに Ubuntu の APT (Advanced Package Tool) で Go コンパイラをインストールすると2世代も古いのが入る（モジュール・モードが使えないしサポートからも外れていると思う）。\n$ apt show golang Package: golang Version: 2:1.10~4ubuntu1 Priority: optional Section: devel Source: golang-defaults Origin: Ubuntu ... ちうわけでダウンロードページから go1.12.5.linux-amd64.tar.gz とかを取ってきて任意の場所に手動で展開するほうが吉である。 たとえば，こんな感じ。\n$ cd /usr/local/src $ sudo curl https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz -O $ cd .. $ unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.12.5.linux-amd64.tar.gz $ sudo mv go go1.12.5 $ sudo ln -s go1.12.5 go $ ./go/bin/go version go version go1.12.5 linux/amd64 これで /usr/local/go/bin にパスを通してやればよい。 たとえば /etc/profile.d ディレクトリに golang-bin-path.sh とかいった名前でファイルを作って（名前は適当）\n# shellcheck shell=sh # Expand $PATH to include the directory where golang applications go. golang_bin_path=\u0026#34;/usr/local/go/bin\u0026#34; if [ -n \u0026#34;${PATH##*${golang_bin_path}}\u0026#34; -a -n \u0026#34;${PATH##*${golang_bin_path}:*}\u0026#34; ]; then export PATH=$PATH:${golang_bin_path} fi とでも書いておけば次回ログイン時にはパスが通っている。\n$ go version go version go1.12.5 linux/amd64 環境変数については GO111MODULE 以外は設定する必要はない。 ちなみに GOPATH は既定で\n$ go env | grep GOPATH GOPATH=\u0026#34;/home/username/go\u0026#34; となっている。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "Ununtu に ClamAV を導入する",
      "section": "remark",
      "description": "こんなに面倒臭いとは思わなかった。もうしばらく運用してから評価してみるですよ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/clamav-for-ubuntu/",
      "published": "2019-05-06T08:39:20+00:00",
      "update": "2019-05-07T13:05:32+00:00",
      "content": " ClamAV を Ubuntu に導入したのだが，思いのほか面倒臭かったので，覚え書きとして記しておく。\nClamAV をインストールする ClamAV のインストール自体は APT (Advanced Package Tool) で簡単にできる。\n$ sudo apt install clamav clamav-daemon なお clamav-daemon は ClamAV をサービス化するためのパッケージである。\n現時点（2019年5月）で ClamAV の最新は 0.101.x なのだが APT で提供されているバージョンは 0.100.x の古いバージョンのようだ。 一応，以下の脆弱性への対応はしてあるみたいだが\n ClamAV® blog: ClamAV 0.101.2 and 0.100.3 patches have been released!  このバージョンの古さは後々に影響を及ぼすかもしれない。 Debian には最新のソースパッケージがあるようだが，セキュリティ製品だしソースコードからビルドするのは流石に...\nデータベースを更新する まずは手動でデータベースを更新する。\n設定ファイル /etc/clamav/freshclam.conf から NotifyClamd の行をコメントアウトした上で freshclam コマンドを実行する。 コマンドラインで書くとこんな感じ。\n$ sudo systemctl stop clamav-freshclam $ sudo sed -i -e \u0026#34;s/^NotifyClamd/#NotifyClamd/g\u0026#34; /etc/clamav/freshclam.conf $ sudo freshclam Sun May 5 13:36:34 2019 -\u0026gt; ClamAV update process started at Sun May 5 13:36:34 2019 Sun May 5 13:36:34 2019 -\u0026gt; ^Your ClamAV installation is OUTDATED! Sun May 5 13:36:34 2019 -\u0026gt; ^Local version: 0.100.3 Recommended version: 0.101.2 Sun May 5 13:36:34 2019 -\u0026gt; DON\u0026#39;T PANIC! Read https://www.clamav.net/documents/upgrading-clamav Sun May 5 13:36:34 2019 -\u0026gt; main.cvd is up to date (version: 58, sigs: 4566249, f-level: 60, builder: sigmgr) Sun May 5 13:36:34 2019 -\u0026gt; daily.cvd is up to date (version: 25439, sigs: 1562310, f-level: 63, builder: raynman) Sun May 5 13:36:34 2019 -\u0026gt; bytecode.cvd is up to date (version: 328, sigs: 94, f-level: 63, builder: neo) $ sudo sed -i -e \u0026#34;s/^#NotifyClamd/NotifyClamd/g\u0026#34; /etc/clamav/freshclam.conf $ sudo systemctl start clamav-freshclam データベースの更新自体はうまく行ってるようだが OUTDATED とか言われてるよ orz\n...見なかったことにしよう。\nなお clamav-freshclam.service の状態を確認するには以下のコマンドを起動すればよい。\n$ sudo systemctl status clamav-freshclam.service 手動で動作確認 Malware 対策ソフト用の無害なウイルス（笑）があるので，これを使って clamscan コマンドで動作確認する。\n$ curl http://www.eicar.org/download/eicar.com -O $ clamscan --infected --remove ./eicar.com ./eicar.com: Eicar-Test-Signature FOUND ./eicar.com: Removed. ----------- SCAN SUMMARY ----------- Known viruses: 6120222 Engine version: 0.100.3 Scanned directories: 0 Scanned files: 1 Infected files: 1 Data scanned: 0.00 MB Data read: 0.00 MB (ratio 0.00:1) Time: 20.181 sec (0 m 20 s) よーし，うむうむ，よーし。\nScan On-Access の設定 ファイルアクセスへの常時監視を行う Scan On-Access を有効にするために /etc/clamav/clamd.conf ファイルを修正する。 本当は ScanOnAccess を true にするだけでいい筈なのだが1，以下のコマンドで\n$ sudo systemctl status clamav-daemon.service サービスの状態を確認すると以下のログを吐いて停止していた。\nERROR: ScanOnAccess: fanotify_init failed: Operation not permitted ScanOnAccess: clamd must be started by root /etc/clamav/clamd.conf ファイルの他の部分にも手を入れる必要があるようだ。 以下に変更・追記が必要な項目を挙げておく。\nLocalSocketGroup root User root ScanOnAccess true OnAccessMountPath /home/username OnAccessExcludePath /home/username/nocheck # VirusEvent /usr/local/bin/clamd-response OnAccessPrevention false OnAccessExtraScanning true OnAccessExcludeUID 0 最初の3行が変更が必要な項目，以降が追加項目である。 OnAccessMountPath でスキャン対象のディレクトリを OnAccessExcludePath で除外対象を指定する。 どちらも複数指定できる。\nVirusEvent が効かない！？ 上の設定で VirusEvent をコメントアウトしているが，どうやら 0.100 では Scan On-Access を有効にしても VirusEvent の設定が効かないようなのだ（0.101 はどうなんだろう）。\nVirusEvent には malware を発見した際に起動するコマンドを指定するのだが，これが動かないってかなり致命的じゃないのか？\n次善の策として以下のスクリプトを書いて cron で回すことにした。 Malware を検出すれば画面に通知が表示されるはずである。 cron で回してるだけなのでタイムラグが発生する。\n#!/bin/bash  logfile=\u0026#34;/home/username/.local/log/clamd-found.log\u0026#34; if [ -r $logfile ]; then PRV_CNT=`cat $logfile | wc -l` else PRV_CNT=0 fi CNT=`grep ScanOnAccess /var/log/syslog | grep FOUND | grep -v \u0026#34;(null)\u0026#34; | tee $logfile | wc -l` if [ $CNT != $PRV_CNT ]; then DATESTR=`date` sudo -u username DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus /usr/bin/notify-send -t 10000 \u0026#34;$DATESTRVirus Found $CNT\u0026#34; fi ダサいけどしょうがない。 ちなみに username の部分には cron を回すログインユーザ名を， 1000 の部分にはそのユーザ ID をセットする2。\nもう一度，動作確認 clamav-daemon.service がうまく機能するか試してみよう。\n先ほどの無害なウイルス（笑）をダウンロードする。\n$ curl http://www.eicar.org/download/eicar.com -O これでログ等を見て検知しているか確認する（上の通知も出れば完璧）。 確認できたらとっとと削除すること。\n今回は clamdscan のほうを使ってみよう。\n$ clamdscan --infected --remove ./eicar.com /home/spiegel/work/./eicar.com: Eicar-Test-Signature FOUND /home/spiegel/work/./eicar.com: Removed. ----------- SCAN SUMMARY ----------- Infected files: 1 Time: 0.365 sec (0 m 0 s) 圧倒的に速くなった。 まぁ，バックグラウンドにサービスがいるんだから当たり前だが（笑）\nThunderbird と連携したかったが... MUA である Thunderbird と連携できるアドオンがあると聞いたのだが\n clamdrib LIN :: Thunderbird 向けアドオン  うまくインストールできない。\nclamdrib LIN の最新バージョンは2017年のもので最近のバージョン 60 以降には対応してないっぽい（互換性チェック回避のオプションも試したがうまく行かなかった）。 諦めるしかないようだ。\nこんなんばっかだな ＞ ClamAV\n「ウイルス対策ソフト」は必要か？ なんだか知らないが「Linux にウイルス対策ソフトは必要か？」などという頭の悪い議論があるそうで，しかも「必要ない」という人の主張は「Linux ユーザは Windows や macOS に比べて規模が小さいから狙われにくい」という，これまた頭が悪いとしか言いようがないものらしい。\n「ウイルス」という表現は古臭くて的を得ていないので，この記事では色々ひっくるめて malware (malicious software) という表現に統一させてもらうが，ぶっちゃけて言うなら使っている OS にかかわらず「ユーザレベルでは malware 対策はセキュリティ管理の中核ではない」というのが多分正しい。\nじゃあ malware 対策は必要ないのかと言えば「さにあらず」で，しかしそういったものは外部化され不可視になっている。 今どきの言葉で言うなら “Security as a Service” とでもいうような状況である。 そしてそのプラットフォーム OS として Linux 等のセキュリティ要件はむしろ高まっていると言えるだろう。 今回 ClamAV を触ってみて感じたことだが，一般ユーザにとって ClamAV がちょっと残念な感じになっているのはサーバ用途に最適化されつつあるからではないかと思うのだ。\nセキュリティのトレンドは「防衛」中心から「監視」中心にシフトしていて，単純に malware をバラ撒いただけではすぐに検知され対策されてしまう。 故に攻撃側も時間をかけてでも密やかに確実にターゲットを追い詰める social engineering を駆使した各種ターゲティング攻撃へとシフトしている。\nPhishing メールやそれに含まれる malware 検知などはサービスプロバイダが（有料のものも含めて）やってくれるし， Web についても Phishing サイトやマイニング・コード等を含んだサイトはブラウザレベルでかなりいい感じにブロックできるようになりつつある3。 そういう意味で私にとって malware 対策ソフトは「うっかり転んだときのための少額保険」みたいなもので，それ以外ではあまり出しゃばって欲しくなかったりする。\n実際にそれまで使ってた Windows 7 でも “Microsoft Security Essentials” で必要十分な性能だったし ClamAV でも同程度の性能を満たしていれば，今回はそれでよかったのだ。 それがこんなに面倒臭いとは思わなかった。\nかといって malware 対策ソフトそのものに金銭は払いたくないし4，もうしばらく運用してから評価してみるですよ。\nブックマーク  The 8 Best Free Anti-Virus Programs for Linux  Linux向けアンチウイルスソフト8選 | マイナビニュース  Clam Antivirusに関するメモ ClamAV - Community Help Wiki ClamAVをUbuntu MATE 18.04 LTSにセットアップ Ubuntu 18.04 LTS DesktopでClamAVによるウィルスチェックを実行 – LAB4ICT ClamAV - ArchWiki\n Free Linux Malware Scanner | Lightweight Agent for Linux Malware Detection and Removal | Sophos : ClamAV がダメそうならこっちにする（笑）\n Ubuntu16.04(さくらVPS)で１からcronの設定をし、pythonプログラムを定期実行する - Qiita\n   サービスのリスタートには sudo systemctl restart clamav-daemon.service とすればよい。 [return] ユーザ ID が分からない場合は id username とコマンドを打てば分かるだろう。 [return] はっきり言ってフェイク・ニュースなんかより Phishing ページなどセキュリティ・リスクの高いコンテンツに対する監視の方にもっとリソースを割いてほしいのだけど。かといって中間車攻撃で暗号通信を覗き見るなんてのは論外だが。 [return] Android 端末には F-Secure 社の FREEDOME を入れている。 FREEDOME 自体は VPN ソフトだが malware 対策機能も付いていて追跡コードもある程度ブロックしてくれる優れもの。実はこれの Linux 版があれば買ってもよかったのだがなかったのだ。仮想ネットワークについては I2P を試してみるか，と思っていたりする。 [return]   "
    },
    {
      "title": "2019-05-05 のブックマーク",
      "section": "bookmarks",
      "description": "「MOMO3号機の打ち上げは成功! 日本初の民間宇宙ロケットが誕生」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2019/05/05-bookmarks/",
      "published": "2019-05-05T04:06:16+00:00",
      "update": "2019-05-10T10:23:00+00:00",
      "content": " リリース情報  News: KeePass 2.42 available! - KeePass  セキュリティ＆プライバシー関連  A 'Blockchain Bandit' Is Guessing Private Keys and Scoring Millions | WIRED  Stealing Ethereum by Guessing Weak Private Keys - Schneier on Security  Docker Hubの不正アクセスについてまとめてみた - piyolog マイクロソフトはパスワードを期限切れにするポリシーの廃止を検討 | TechCrunch Japan アップルがスクリーンタイム監視アプリ削除の正当性を主張 | TechCrunch Japan A hotspot finder app exposed 2 million Wi-Fi network passwords – TechCrunch TVerの改ざんについてまとめてみた - piyolog あやしいソフトも安全・気軽に試せる「Windows サンドボックス」 - 窓の杜 3 reasons Google and Facebook may listen to you (and what you can do about it) - F-Secure Blog 「ac.jp」ドメインの審査不備問題についてまとめてみた - piyolog 「Google Chrome 74」に2件の脆弱性 - 窓の杜 There Used to Be An App For That – OurPact – Medium  Appleのペアレンタルコントロール機能を持つアプリ削除の説明はおかしい？ - iPhone Mania  Public-Interest Technology Resources  Cybersecurity for the Public Interest - Schneier on Security  アップルはプライバシーを重視しているが、iPhoneはそうでもない事実 | TechCrunch Japan : iPhone に限らず重視はしてないと思うぞ。 Apple の技術的・インフラ的にできないだけで，それを「プライバシー重視」などと言い換えているだけ 「Firefox」でインストール済みアドオンが利用不能になる問題が発生中 - 窓の杜  To re-enable all disabled non-system addons you can do the following. I am not r... | Hacker News : とりあえずの対応策  リレーアタック盗難から愛車を守る！自動車セキュリティの名門が開発したキーケース | AUTO MESSE WEB  天文関連  ブラックホールが放つ弾丸のようなプラズマから歳差運動の周期を解析 | sorae：宇宙へのポータルサイト MIT Tech Review: 巨大衝突による月の誕生に新説、地球はマグマで覆われていた？ 時には昔の話を - 国立天文台暦計算室 First Analysis of Asteroid Water Reveals Earth-Like Makeup - Eos MIT Tech Review: 小惑星が地球に衝突しそうになったらどうする？NASAなど模擬訓練 MOMO3号機現地取材(6) MOMO3号機の打ち上げは成功! 日本初の民間宇宙ロケットが誕生 | マイナビニュース  知財関連  オープンソース海賊版アドオンの「撲滅」は難しい、が…… – P2Pとかその辺のお話R CC Search is out of beta with 300M images and easier attribution - Creative Commons  クリエイティブ・コモンズが独自のサーチエンジン搭載開始 – HON.jp News Blog   その他  改元特番でＮＨＫだけが伝えた”不都合な真実”(水島宏明) - 個人 - Yahoo!ニュース Nature ハイライト：暑さの感受性：海生動物は陸生動物よりも気候温暖化に対して脆弱であることが示された | Nature | Nature Research Ubuntu 18.04 その328 - DellからUbuntu 18.04をプリインストールしたDell Precision 3540/3541登場 - kledgeb 英裁判所がウィキリークス創設者に50週の禁固刑 | TechCrunch Japan 高次元科学への誘い:Hiroshi Maruyama's Blog - CNET Japan Sass基礎 - Qiita Ubuntu 19.04 その30 - Snapストアからインストール可能なゲーム6選 - kledgeb : 微妙...  "
    },
    {
      "title": "「令」のゲシュタルト崩壊",
      "section": "remark",
      "description": "デザインの一部として書く（描く）なら，せめて楷書体にしてくれないだろうか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/gestaltzerfall-of-reiwa/",
      "published": "2019-05-05T02:49:46+00:00",
      "update": "2019-05-05T02:50:26+00:00",
      "content": "自慢じゃないけど，こちとら中3まで習字教室（書道ではないw）に通ってたですよ。 今回は「だからどうした」という話。\nいやね。 改元のお祭り騒ぎは（消費税増税前の一時的個人消費拡大という意味でも）結構なんだけどさ。 こうもアチコチで「令和」が連呼されるとゲシュタルト崩壊を起こしそうになるのよ。 特に「令」の字。\n元々の来歴はともかく，私達がふだん目にしている明朝体やゴシック体は活字印刷された文章で使うことを想定した書体なのですよ。 それに「領」とか「玲」とか「零」とかいった画数の多い字の一部としてみれば明朝体の「令」はよくできたデザインだと思う。 でもこの字だけを取り出すと「これじゃない」感が半端ないわけさ。\nデザインの一部として書く（描く）なら，せめて楷書体にしてくれないだろうか。\nと思ってフリーの楷書体フォントを探してみるも，なかなかないものだね。 近いもので以下のサイトを見つけた。\n 白舟書体 伝統的書体から遊び心溢れるデザイン筆文字のフォントまで  「使用許諾」によると個人サイトでデザインの一部として使うなら「追加契約・追加料金なしで可能」らしい。 というわけで，「白舟楷書教漢」書体と先日公開した「青空文庫」用の書影と組み合わせてみよう1。\n どや，楷書体かっこええやろ！ （CV 久川綾）\n カードキャプターさくら 1期+2期+3期 コンプリート DVD-BOX [Import] IDP DVD DVD ASIN: B004JSTW5S, EAN: 3760000568838 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  3期分合わせて4千円弱とか太っ腹！ まぁ私は Hulu で観るけどね。たまに観たくなるのよ。\nreviewed by Spiegel on 2019-05-05 (powered by amazon-item 0.2.1)\n  [改訂第7版]LaTeX2ε美文書作成入門 奥村 晴彦, 黒木 裕介 技術評論社 2017-01-24 Book 大型本 ASIN: 4774187054, EAN: 9784774187051 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。\nreviewed by Spiegel on 2017-09-27 (powered by amazon-item v0.2.0)\n  このブログは基本的に BY-SA ライセンスで公開しているが，この画像に関しては適用外とする。「白舟楷書教漢」書体の翻案扱いになりそうだし。フォントの利用については該当サイトへどうぞ。 [return]   "
    },
    {
      "title": "『気象がわかる数式入門』を立ち読みした",
      "section": "remark",
      "description": "こういう本は是非本棚に置いていつでも引っ張り出せるようにしておきたいものである。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2019/05/meteorology-and-math/",
      "published": "2019-05-04T10:11:39+00:00",
      "update": "2019-05-04T10:20:16+00:00",
      "content": "長いお休みももう少しで終わり。 みなさん GW はいかがお過ごしですか。\nこの GW は天気がよかったので散歩がてら県立図書館へ行ってまったりとしていたのだが，また面白い本を見つけてしまったのですよ。\n なにこれ。面白そう！  その場でパラパラとページをめくって中身を確認し，ケータイを取り出して Amazon でポチりました（笑）\n最近はいい本がいっぱいあるんだなぁ。 これを子供の頃に読んでいれば...\n前にもどこかで書いたような気がするが，独学というのはどうしても「つまみ食い」になりがちで，ひとつのジャンルを体系的に学ぶのが難しい。\n私は科学と数学は相補的な関係にあると思っているが『気象がわかる数式入門』は数学と科学の間にある本という感じだろうか。 内容的には高校生物理くらいのレベルだと思うが基本的なことをきちんと押さえているので読んでても迷いにくい。 たぶん中学生くらいでも理解できるんじゃないかな。\nこの本と何か適当な数学書があれば完璧じゃないだろうか。 たとえば「数学ガール」シリーズ（微積分あたりの巻）とか（笑） こういう本は是非本棚に置いていつでも引っ張り出せるようにしておきたいものである。\nというわけで，今回は借りずに買ったのであった（ちなみに別の本を借りたのだが，それはまた後日）。\n 気象がわかる数式入門 二宮 洸三 オーム社 2006-07-01 Book 単行本 ASIN: 4274202712, EAN: 9784274202711 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  気象に入る前に「次元」や「単位系」といった基本中の基本の話から始まり，そこから誤差論（の最初のほう）とかだんだんと核心に入っていく。順番に読んでいけば無理なく「気象」を始めとする物理学の初歩が理解できるよう構成されている教科書的な内容。これが私の子供の頃にあったらなぁ。\nreviewed by Spiegel on 2019-05-04 (powered by amazon-item 0.2.1)\n "
    },
    {
      "title": "Go モジュールの依存関係を可視化するツール ggm v0.2.0 をリリースした",
      "section": "release",
      "description": "前回作ったツールが思ったより有用なことに気がついて「これはちゃんとコードを書こう」と思い立った。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2019/05/ggm-0_2_0-is-released/",
      "published": "2019-05-04T09:09:55+00:00",
      "update": "2019-05-04T09:11:20+00:00",
      "content": " 前回「Go モジュールの依存関係を可視化するツールを作った」のだが，思ったより有用なことに気がついて「これはちゃんとコードを書こう」と思い立った。\nちうわけで，リリースしました。\n Release v0.2.0 · spiegel-im-spiegel/ggm  今回はちゃんとバイナリも用意しているぞ（笑）\n使い方はこんな感じ。\n$ ggm -h Usage: ggm [flags] [input file] Flags: -c, --config string Configuration file --debug Debug flag -h, --help help for ggm -v, --version Output version of ggm 前回と異なるのは -c オプションを付けたことか。 たとえば以下の内容で ggm.toml というファイルを作って\n[node] fontname = \u0026#34;Inconsolata\u0026#34; 以下のコマンドラインで DOT ファイルを生成すると\n$ go mod graph | ggm -c ggm.toml digraph G { ID = \u0026#34;G\u0026#34;; n1[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/spiegel-im-spiegel/ggm\u0026#34;]; n2[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/BurntSushi/toml\\nv0.3.1\u0026#34;]; n3[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/emicklei/dot\\nv0.9.3\u0026#34;]; n4[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/spf13/cobra\\nv0.0.3\u0026#34;]; n5[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/spf13/pflag\\nv1.0.3\u0026#34;]; n6[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;github.com/spiegel-im-spiegel/gocli\\nv0.9.5\u0026#34;]; n7[fontname=\u0026#34;Inconsolata\u0026#34;,label=\u0026#34;golang.org/x/xerrors\\nv0.0.0-20190410155217-1f06c39b4373\u0026#34;]; n1-\u0026gt;n2; n1-\u0026gt;n3; n1-\u0026gt;n4; n1-\u0026gt;n5; n1-\u0026gt;n6; n1-\u0026gt;n7; } てな感じで fontname 属性を仕込むことができる。 これを dot コマンドに流し込むと\n$ go mod graph | ggm -c ggm.toml | dot -Tpng -o ggm.png  ggm.png  てな風にフォントを Inconsolata にすることができるのですよ（勿論あらかじめフォントがインストールされていることが条件ね）。\n-c オプションで指定するファイルは TOML 形式で node と edge の属性を設定することができる。 ただし手抜き実装で属性名やその値の正しさについてはノーチェックなのでご注意を（つまり key=value で表されるものなら何でも入るw）。\n今回 DOT 言語用のビルダ・パッケージには github.com/emicklei/dot を利用している。 シンプルな設計で（簡単な図であれば）使い勝手がよい。\n本当は本家の Go コンパイラが DOT 言語で吐いてくれればこんなの要らないんだけどねぇ。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n "
    },
    {
      "title": "Go モジュールのバージョン管理",
      "section": "golang",
      "description": "試して壊して試して壊して... を繰り返した成果が今回の記事である。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/versioning-of-go-modules/",
      "published": "2019-05-04T04:08:19+00:00",
      "update": "2019-05-05T01:17:07+00:00",
      "content": " 今回の長期休暇を利用して今まで公開したツールやパッケージ類をチューニングしているのだが， Go 1.11 以降から実装されているモジュール対応モード（module-aware mode）のバージョン管理の挙動が（ドキュメントを読んだだけでは）ピンとこなかったので，この際いろいろと試してみることにした。\n試して壊して試して壊して... を繰り返した成果が今回の記事である1。 まとめは最後に書いておくのであしからず。\nみんな大好き Hello World まずは以下の簡単なパッケージを作ってみる。\nhello/ ├── go.mod └── hello.go go.mod ファイルの内容は以下の通り。 今回の記事では先頭行の module ディレクティブに注目する。 module ディレクティブはパッケージのモジュール・パスを定義するもので，このモジュールパスとバージョンのセットがモジュールの IDentity となる。\nmodule github.com/spiegel-im-spiegel/hello go 1.12 hello.go ファイルの内容は以下の通り。\npackage hello import \u0026#34;fmt\u0026#34; func Hello() { fmt.Println(\u0026#34;Hello World\u0026#34;) } このパッケージをリポジトリに push してバージョンタグ v1.0.0 を付ける。\nパッケージを使う側のコードも書いておこう。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; func main() { hello.Hello() } これを実行すると以下のようになる。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello v1.0.0 go: downloading github.com/spiegel-im-spiegel/hello v1.0.0 go: extracting github.com/spiegel-im-spiegel/hello v1.0.0 Hello World このとき，パッケージを使う側の go.mod は以下のようになっているはずである（モジュール名は適当）。\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello v1.0.0 前準備はこれで OK\nパッケージのバージョンを v2 にアップグレードする ではこの hello パッケージを少し弄ってみよう。 まずは安直に hello.go 関数を以下のように変更する。\npackage hello import \u0026#34;fmt\u0026#34; func Hello(name string) { fmt.Println(\u0026#34;Hello\u0026#34;, name, \u0026#34;by v2\u0026#34;) } Hello() 関数の後方互換性が失われたのでメジャーバージョンを上げることにしよう。 このコードを push してバージョンタグ v2.0.0 を付ける。\nこの新しいパッケージで使う側のコードを修正してみる。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; func main() { hello.Hello(\u0026#34;Golang\u0026#34;) } go.mod ファイルも直さないとね。\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello v2.0.0 これを実行すると以下のようになる。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello v2.0.0 go: downloading github.com/spiegel-im-spiegel/hello v0.0.0-20190503134808-f31e6a72de0f go: extracting github.com/spiegel-im-spiegel/hello v0.0.0-20190503134808-f31e6a72de0f Hello Golang by v2 ありゃりゃ。 v2.0.0 のモジュールを見つけたまではよかったが，ダウンロード時にバージョンタグを認識していない？\nここで思い出したのが Semantic Versioning のルールである。\n Semantic Import Versioning  ひょっとして v2 ディレクトリを切ったらいいのか？ 試してみよう2。\nv2 ディレクトリによる分離 先ほどのコミットはなかったことにして， hello パッケージの構成を以下のように変える。\nhello/ ├── go.mod ├── hello.go └── v2/ └── hello.go hello.go が v1 のコードで v2/hello.go が v2 のコードである。\nこのパッケージを使う側のコードも以下のように変える。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello/v2\u0026#34;  func main() { hello.Hello(\u0026#34;Golang\u0026#34;) } go.mod はこんな感じ？\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello/v2 v2.0.0 これで実行してみよう。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.0 go: github.com/spiegel-im-spiegel/hello/v2@v2.0.0: go.mod has non-.../v2 module path \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; (and .../v2/go.mod does not exist) at revision v2.0.0 go: error loading module requirements ええつと？ あぁ，そうか。 パッケージ側のv2/ ディレクトリにも go.mod ファイルがいるのか。\nんじゃあ，以下の内容の v2/go.mod ファイルを追加して v2.0.1 タグを付ける。\nmodule github.com/spiegel-im-spiegel/hello/v2 go 1.12 これでパッケージの構成は以下のようになった。\nhello/ ├── go.mod ├── hello.go └── v2/ ├── go.mod └── hello.go では，このパッケージを使って先ほどのコードを動かしてみよう。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: downloading github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: extracting github.com/spiegel-im-spiegel/hello/v2 v2.0.1 Hello Golang by v2 ようやく動いたよ... orz\nインポートパスをリダイレクトしたかったのだが... パッケージ側の構成はこれでいいとして，パッケージをインポートする側は\nimport \u0026#34;github.com/spiegel-im-spiegel/hello\u0026#34; で v2 のコードを動かしたいよね。 というわけで go.mod を以下のように書いてみる。\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello/v2 v2.0.1 replace github.com/spiegel-im-spiegel/hello v2.0.1 =\u0026gt; github.com/spiegel-im-spiegel/hello/v2 v2.0.1 これで動かすとどうなるか。\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello v2.0.1 go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: downloading github.com/spiegel-im-spiegel/hello/v2 v2.0.1 go: extracting github.com/spiegel-im-spiegel/hello/v2 v2.0.1 Hello Golang by v2 おっ，うまくいったっぽい？ でも go.mod ファイルを見てみると\nmodule work go 1.12 require ( github.com/spiegel-im-spiegel/hello v0.0.0-20190503144136-a8f02ef988d2 // indirect github.com/spiegel-im-spiegel/hello/v2 v2.0.1 ) replace github.com/spiegel-im-spiegel/hello v0.0.0-20190503144136-a8f02ef988d2 =\u0026gt; github.com/spiegel-im-spiegel/hello/v2 v2.0.1 てな感じに書き換えられてしまった。 ふむむむむ？\nどうもパッケージ内のディレクトリ名とバージョンタグを暗黙的に関連付けているようだ。 なので v2.x タグは hello/v2/ ディレクトリに関連付けられてしまう。\n たとえば同じリビジョンに v1.0.1 タグを付ければ\n という感じで hello/ ディレクトリにもバージョンタグが割り当てられる。 もっともそれで\nmodule work go 1.12 require ( github.com/spiegel-im-spiegel/hello v1.0.1 github.com/spiegel-im-spiegel/hello/v2 v2.0.1 ) replace github.com/spiegel-im-spiegel/hello v1.0.1 =\u0026gt; github.com/spiegel-im-spiegel/hello/v2 v2.0.1 としたところで更なる混乱を招くだけだけどね。\n“Malformed Module Path” ならば，旧い v1 の方を別ディレクトリに移動すればいんじゃね？ って思うよね。 私は思った。\nで，パッケージ側を\nhello/ ├── go.mod ├── hello.go └── v1/ ├── go.mod └── hello.go という構成にし，呼び出す側の go.mod ファイルを\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello v1.0.1 replace github.com/spiegel-im-spiegel/hello v1.0.1 =\u0026gt; github.com/spiegel-im-spiegel/hello/v1 v1.0.1 とかやってみたんだけど\ninvalid module version github.com/spiegel-im-spiegel/hello/v1: malformed module path: github.com/spiegel-im-spiegel/hello/v1 とか言われたですよ。 いや “malformed module path” て orz\n結局 モジュール対応モード下でメジャー・バージョンを上げたならモジュール・パスも変えるしかない ということらしい。\nv2 ブランチを切って運用する とはいえバージョンごとに物理的にディレクトリを切って運用するというのは今時ありえないダサさである。 そこで物理的にディレクトリを切るのではなくリポジトリ上でブランチを切って運用することを考える。\nパッケージのディレクトリ構成は v1 と同じ。\nhello/ ├── go.mod └── hello.go これに対して v2 ブランチを切り， v2 ブランチ上で go.mod を以下のように変更する。\nmodule github.com/spiegel-im-spiegel/hello2/v2  go 1.12 モジュールのパスと物理パスが異なっている が気にしないで先に進む。 hello.go を\npackage hello import \u0026#34;fmt\u0026#34; func Hello(name string) { fmt.Println(\u0026#34;Hello\u0026#34;, name, \u0026#34;by v2\u0026#34;) } として go.mod とともに v2 ブランチに commit \u0026amp; push し，バージョンタグ v2.0.0 を付与する。\nパッケージを使用する側のコードは以下の通り。\npackage main import \u0026#34;github.com/spiegel-im-spiegel/hello/v2\u0026#34; func main() { hello2.Hello(\u0026#34;Golang\u0026#34;) } これを実行すると\n$ go run main.go go: finding github.com/spiegel-im-spiegel/hello/v2 v2.0.0 go: downloading github.com/spiegel-im-spiegel/hello/v2 v2.0.0 go: extracting github.com/spiegel-im-spiegel/hello/v2 v2.0.0 Hello Golang by v2 という感じでうまく動いたようだ。 go.mod の内容も\nmodule work go 1.12 require github.com/spiegel-im-spiegel/hello/v2 v2.0.0 // indirect となっていた。 よーし，うむうむ，よーし。\nブランチとモジュール・パスの関係は以下のような感じだろうか。\n まとめると...  v1 以降，メジャーバージョンを上げる度にモジュール・パスを変更して管理を分ける  v2.x なら path/to/module/v2 などとする。最後の v2 がポイント パスの最後がバージョン番号（v2 など）になっていれば，暗黙的にバージョンタグが対応する  モジュール・パスを変更するには go.mod ファイルの module ディレクティブを変更する  物理的にディレクトリを切るのであれば go.mod ファイルも含める バージョンごとにブランチを切って管理するのであれば，各ブランチの go.mod ファイルで指定するモジュール・パスに注意する  パッケージを利用する側はリポジトリの物理パスとモジュール・パスが異なる場合があるため go.mod ファイルに記述されているモジュール・パスを確認する 同一パッケージの異なるメジャー・バージョンのモジュール・パスを replace で繋がないこと。更に分かりにくくなるか指定によってはエラーになる  といったところだろうか。\nバージョンごとにパッケージのパスを分けるため gopkg.in といったサービスが使われることがあるが，リポジトリの物理パスとモジュール・パスが異なる場合は注意が必要である。 うまくパッケージをダウンロードできない場合は go.mod ファイル内に\nreplace gopkg.in/russross/blackfriday.v2 v2.0.1 =\u0026gt; github.com/russross/blackfriday/v2 v2.0.1 といった記述が必要になるかもしれない（というかそれが元々の replace ディレクティブの機能）。\nブックマーク  モジュール対応モードへの移行を検討する  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan, Brian W. Kernighan 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 Book 単行本（ソフトカバー） ASIN: 4621300253, EAN: 9784621300251 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2018-10-20 (powered by amazon-item v0.2.0)\n  実際にはこの記事で書いた量の三倍くらいは試して壊して... を繰り返している。 [return] ちなみに v0 から v1 へのアップグレード時にはこのようなことは起きない。一般的に v0 系はベータ版と認識されていて後方互換性については煩くない。 Go 言語のモジュール対応モードでもチェックが入らないようだ。言い方を変えると v1 以降は（Semantic Versioning に従うなら）後方互換性についてちゃんと考えないといけないってこともであるのだが。バージョン設計と運用は意外と難しい？ [return]   "
    }
  ]
}
