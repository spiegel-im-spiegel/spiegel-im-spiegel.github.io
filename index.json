{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "FOSS とジョナサン",
      "section": "remark",
      "description": "そして Open Source は「強者の武器」となる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/foss-and-jonathan/",
      "published": "2020-09-14T12:06:21+00:00",
      "update": "2020-09-15T00:15:38+00:00",
      "content": "最近 Facebook や Twitter の TL で FOSS (Free/Open Source Software) に関する総括みたいな記事をよく見かけるのだが，気のせいだろうか。 まぁ TL って自身の性癖の暴露だから，そういう風に見えてしまうこともあるのだろう。\n「自由」は主張である 人とは本来，不自由な存在である。 何故なら，人は独りでは自身を証明できないから。 故に人が「自由」を求めるのなら「対象」が必ずあるし，求めるからには「対価」が必要である。\nFree Software は以下の4つの自由を求めている。\n  どんな目的に対しても、プログラムを望むままに実行する自由 (第零の自由)。 プログラムがどのように動作しているか研究し、必要に応じて改造する自由 (第一の自由)。 ほかの人を助けられるよう、コピーを再配布する自由 (第二の自由)。 改変した版を他に配布する自由 (第三の自由)。   自由ソフトウェアとは? - GNUプロジェクト - フリーソフトウェアファウンデーションより  物凄く簡単に言うと Free Software は「『政治から自由である』という政治主張」を持つソフトウェア（活動）なのである。 そして「政治主張」を実践するからには，責任やら義務やらが発生する。 その実装例が GNU GPL (General Public License; 一般公衆ライセンス) における “copyleft” という法的 hack である，と考えれば分かりやすいだろう。\nつまり Free Software は「政治から自由である」ために政治的な責任・義務を負うという Anarchism 特有のレトリックを抱えているわけだ。\nOpen Source as a Jonathan インターネットの老害達（笑）が懐かしむ「インターネットの黄金時代」をヒッピー文化に擬えることがある。 で，私の中でヒッピー文化の典型は『かもめのジョナサン』だったりする。\nかの作品に対する感想や評価は色々あるだろうが，私の中でジョナサンは「『飛ぶ』ために全てから逃げた存在」だ。 まぁ，かつてのオウム信者にはアレを読んで入信した人とかもいるそうなので，それほど的はずれではないだろう（笑）\n（最初からそう呼ばれていたわけではないが） Open Source は Free Software 運動から「政治主張」を洗い落としたものである。 Open Source の枠組みでは “copyleft” もオプションのひとつに過ぎない。 おおっ！ これぞまさしくポリシー・ロンダリング（違う1）。\nOpen Source がそうした理由は単純だ。 「自由」の対価を払いたくなかったから。 だから「自由を得る」のではなく「不自由から逃げる」のだ，ジョナサンのように，「それがぼくには楽しかったから」。\n囚人のジレンマと搾取 すずきひろのぶさんが最近「フリーソフトウェアと それを取巻く世界の状況 」という2007年当時のスライドを公開されていて，この中に「囚人のジレンマ」についての言及がある。\n一応「囚人のジレンマ」について簡単に解説しておこう。\nある犯罪を行った囚人 A, B に対し\n If A and B each betray the other, each of them serves two years in prison If A betrays B but B remains silent, A will be set free and B will serve three years in prison If A remains silent but B betrays A, A will serve three years in prison and B will be set free If A and B both remain silent, both of them will serve only one year in prison (on the lesser charge)   via Prisoner\u0026#39;s dilemma - Wikipedia  と持ちかける。 表にするとこんな感じ。\n   Prisoner B stays silent\n(cooperates) Prisoner B betrays\n(defects)  Prisoner A stays silent\n(cooperates) Each serves 1 year Prisoner A: 3 years\nPrisoner B: goes free  Prisoner A betrays\n(defects) Prisoner A: goes free\nPrisoner B: 3 years Each serves 2 years\n(lesser charge)    via Prisoner\u0026#39;s dilemma - Wikipedia  このとき囚人 A, B はそれぞれ黙秘するか裏切るか？ という「非協力ゲーム」の一種である。 この条件下では「両者とも黙秘（協力）する」がパレート効率的であるにも関わらず，「単独のゲーム」または「有限繰り返しゲーム」においては「両者とも裏切る」がナッシュ均衡となることが分かっている。\nでは「無期限繰り返しゲーム」による囚人のジレンマはどうなるのか。 これについては様々なモデルで研究が行われている。 たとえば\n  明白な答えの1つは、力のある人はその力を使って力の弱い人を利用できるということだ  MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明より  は典型的な「搾取」のパターンだ。\nさらに最近では「戦略的力関係とゲームのルールが両者に対称的である場合」でも\n アリスがボブの戦略を知った場合に、ボブの行動を利用し、アリス自身の結果をより良くできることを、藤本と金子教授は示している。\nしかし、この戦略がボブにとってより良い結果を約束するとアリスが保証すれば、アリスはボブの協力を確実なものにできる。たとえばある状況では、両方のプレイヤーが裏切る場合の結果よりも、ボブが犠牲になった方がボブにとって良い結果になるとアリスが保証できるのだ。\nこのため、たとえアリスがより有利になったとしても、ボブには搾取を受け入れる動機がある。「このように、両方のプレイヤーが搾取関係を安定にしています」。\n MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明より  といった「搾取」のパターンも発表されている。\nそして Open Source は「強者の武器」となる 「フリーソフトウェアと それを取巻く世界の状況 」では， GPL 下でソフトウェア開発を行うことでパレート効率的である「両者とも協力する」関係に固定できると主張している（もちろん喩え話として語られている）。\nしかし GPLv3 アップデートを巡る騒動を見る限り，誰もがパレート効率的な「両者とも協力する」関係を望んでいるわけではないように見える。\nthe GPLv2 was pretty popular at the time, but there were a couple notable loopholes some big corporations had been taking advantage of, which the free software people wanted to close. a whole bunch of people thought the GPLv2 was fine the way it was, though - closing the loopholes as aggressively as the GPLv3 did cut off some justifiable security measures, and some people said that it could do more harm than good. the linux kernel, along with a lot more stuff, declared it was sticking with the GPLv2 and not moving to the GPLv3. via Post-Open Source | boringcactus  and LLVM became at least as good as GCC, and a less risky decision for big companies, and easier to use to build new languages. so the free software movement’s last technical advantage was gone. its social advantages also kinda went up in flames with the GPLv3, too: the software that was the foundation for the GPL enforcement lawsuits stuck with the GPLv2. via Post-Open Source | boringcactus  「自由を得る」 Free Software (運動) より「不自由から逃げる」 Open Source を選好することによって何が起きるか。 「戦略的力関係とゲームのルールが両者に対称的である場合でも、搾取的な関係が構築できる」のであれば，それはどのような形を取るのか。\nジョナサンは「ここではない」世界へと逃げ込めたが，かもめならぬ我が身では何があろうとこの世界この社会で生きていかなければならない。\nOpen Source に関する批判は色々見受けるが，要するに Open Source が「強者の武器」となり，情報力を背景にした搾取の構造を構成していることが問題なのだと思う。 しかし Free Software ではその非対称性を壊せない。\n故に\ntl;dr: say no to licenses, say yes to norms. via Post-Open Source | boringcactus  なんてな話も出るのかもしれない。 個人的には（日本の法運用を見ても分かる通り）規範だのガイドラインだのをベースにした運用は腐敗や搾取の温床にしかならないと思うが（笑）\nブックマーク  クーリエ連載；エコノミスト紹介、自由のためなら人が死んでもいい フリーソフトウェアとそれを取巻く世界の状況 (2007) – とりあえずノートがわりに書いてます Post-Open Source | boringcactus  ブログ: ポスト・オープンソース   孵卵器の中のインターネット 搾取と狂狷  参考図書  かもめのジョナサン【完成版】（新潮文庫） リチャード・バック (著), 五木 寛之 (翻訳) 新潮社 2015-07-01 (Release 2015-12-18) Kindle版 B01916B8V8 (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  「まぼろしの4章」を加えた完成版。私の中でヒッピー文化のイメージは子どものときに読んだ『かもめのジョナサン』であり，初期のインターネットも『かもめのジョナサン』の延長線上にあると理解している。\nreviewed by Spiegel on 2017-01-23 (powered by PA-APIv5)\n  グリゴリの捕縛 白田 秀彰  2001-11-26 (Release 2014-09-17) 青空文庫 4307 (図書カードNo.) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  白田秀彰さんの「グリゴリの捕縛」が青空文庫に収録されていた。 内容は 怪獣大決戦 おっと憲法（基本法）についてのお話。 古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。 その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。\nreviewed by Spiegel on 2019-03-30 (powered by aozorahack)\n  もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo (著) 達人出版会 2017-12-25 (Release 2019-03-02) デジタル書籍 infoshare2 (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  WirelessWire News 連載の書籍化。感想はこちら。祝 Kindle 化！\nreviewed by Spiegel on 2018-12-31\n  それがぼくには楽しかったから 全世界を巻き込んだリナックス革命の真実 (小プロ・ブックス) リーナス トーバルズ (著), デビッド ダイヤモンド (著), 風見 潤 (翻訳), 中島 洋 (監修) 小学館プロダクション 2001-05-10 単行本 4796880011 (ASIN), 9784796880015 (EAN), 4796880011 (ISBN)  Linux の作者 Linus Torvalds の自伝的作品。\nreviewed by Spiegel on 2017-01-23 (powered by PA-APIv5)\n  かもめが翔んだ日 渡辺真知子 (メインアーティスト) Sony Music Direct(Japan)Inc. 1978-05-02 (Release 2014-04-04) MP3 ダウンロード B00FU3P37W (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  そらで唄えます。つか，今でもカラオケでよく唄います（笑）\nreviewed by Spiegel on 2020-09-14 (powered by PA-APIv5)\n   本当の policy laundering は国際的な議論や規制を都合よく利用して国内での立法プロセスを迂回することをさす： In their review of global business regulation, Braithwaite and Drahos find that some countries (notably the U.S. and the UK) push for certain regulatory standards in international bodies and then bring those regulations home under the requirement of harmonization and the guise of multilateralism; this is what we refer to as policy laundering. (via Policy laundering - Wikipedia) \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-09-13 のブックマーク",
      "section": "bookmarks",
      "description": "「Yubicoが最新セキュリティキー「Yubikey 5C」を発表、価格は約5800円」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/09/13-bookmarks/",
      "published": "2020-09-13T02:05:45+00:00",
      "update": "2020-09-13T02:07:11+00:00",
      "content": "リリース情報  Release v1.31.0 · golangci/golangci-lint · GitHub Release 1.51.0 · atom/atom · GitHub Release August 2020 · microsoft/vscode · GitHub Release MathJax v3.1.1 · mathjax/MathJax-src · GitHub Release MathJax v3.1.2 · mathjax/MathJax-src · GitHub  バベルのインターネット  中国がMITの子供向けプログラミング言語「Scratch」の国内使用を禁止 | TechCrunch Japan ファーウェイスマホは2021年にHarmonyOSを搭載へ、HarmonyOS 2.0ベータを年内配布 | TechCrunch Japan  セキュリティ＆プライバシー関連  マルウェア Emotet の感染拡大および新たな攻撃手法について WordPress「File Managerプラグイン」の脆弱性についての注意喚起 | さくらインターネット ドコモ口座を悪用した不正送金についてまとめてみた - piyolog More on NIST’s Post-Quantum Cryptography - Schneier on Security Intel、2020年9月のセキュリティアドバイザリを公開 ～第8世代Intel Core以降などのBIOSに問題 - 窓の杜 Yubicoが最新セキュリティキー「Yubikey 5C」を発表、価格は約5800円 | TechCrunch Japan NSA元長官キース・アレクサンダー氏がアマゾンの取締役に - ZDNet Japan OpenSSL Security Advisory: Raccoon Attack (CVE-2020-1968)  「OpenSSL」に暗号通信を解読可能な脆弱性“Raccoon Attack” ～パッチ提供のない旧版は注意 - 窓の杜   Ranking National Cyber Power - Schneier on Security  天文関連  6mミリ波電波望遠鏡が日本天文遺産に認定 | 国立天文台(NAOJ) APOD: 2020 September 8 - GW190521: Unexpected Black Holes Collide Survey finds no detectable alien radio signals across 10 million stars – Astronomy Now : ほ座の1000万個以上の恒星がある領域で電波による地球外文明探査を実施。しかし検出できず  知財関連  Archivists Want Broader DMCA Exemption for ‘Abandoned’ Online Games * TorrentFreak Post-Open Source | boringcactus  ブログ: ポスト・オープンソース    その他  Schneier.com is Moving - Schneier on Security マイクロソフト、WebIDEの「Visual Studio Codespaecs」を「GitHub Codespaces」に統合へ － Publickey 「Azure Spring Cloud」正式リリース。JavaフレームワークSpring Bootの開発と実行のためのフルマネージド環境 － Publickey Update on extension support in the new Firefox for Android | Mozilla Add-ons Blog  Android版「Firefox」で利用できるアドオンが少な過ぎる問題についてMozillaが声明 - 窓の杜   マイクロソフトが「SMB over QUIC」ファイル共有プロトコル実装中。VPNなしでもインターネット上で安全にファイルサーバへのアクセスを実現へ － Publickey 2020年9月8日ニュース「血栓作るタンパク質で新型コロナ重症化を予測 千葉大が実用化に向け臨床研究」 | SciencePortal Gitでやりたいこと、ここで見つかる - Qiita マイクロソフト、AWSのコスト管理機能をAzureの管理機能に統合。「Azure Cost Management + Billing」AWS用コネクタが正式リリース － Publickey GoogleもRPAに参入か。ノーコードでプロセスオートメーションを実現する「AppSheet Automation」を含む「Business Application Platform」を発表 － Publickey 【編集部からのお知らせ】窓の杜ライブラリでクラウドサービスの紹介をはじめます！ - 窓の杜 モバイル向けGPUでも優勢を誇るNVIDIA「GeForce」シリーズ | TechCrunch Japan OpenJDKのソースコード、GitHubへの移行を完了 － Publickey LibreOffice Tips \u0026amp; Tricks: Replacing Microsoft Fonts - The Document Foundation Blog Google CloudがAPI管理とノーコードを駆使したビジネスアプリプラットフォームを公開 | TechCrunch Japan TensorFlowの機械学習による画像認識をScratch上で！ 子どもでもできるAI活用プログラミング - どれ使う？プログラミング教育ツール - 窓の杜 Q-CTRLとQuantum Machinesが提携、量子コンピューティング開発を加速 | TechCrunch Japan グーグルがAndroid 11を公開、メッセージ、プライバシー関連を中心に強化・改善 | TechCrunch Japan 自動JavaユニットテストツールDiffblueの無料コミュニティエディションが登場 | TechCrunch Japan マイクロソフト、AWSのコスト管理機能をAzureの管理機能に統合。「Azure Cost Management + Billing」AWS用コネクタが正式リリース － Publickey データセンター構成ツールの「Chef」、Progressによる買収を発表 － Publickey The Third Edition of Ross Anderson’s Security Engineering - Schneier on Security GitHub/GitLabとの統合用WebIDE「Gitpod」がオープンソースで公開。GitHub Codespacesを先取りする開発環境 － Publickey 2020年9月11日ニュース「特定外来生物『ヒガタアシ』中国経由で侵入か 遺伝子解析＋貿易統計で突き止め」 | SciencePortal Using Gonum Graphs to Solve Word Ladder Puzzles | Gonum System-Glitch/goyave: 🍐 Elegant Golang Web Framework 第5回『プログラミング言語Go』オンライン読書会 - connpass : 取り敢えずエントリしてみた ブログ: PCR検査が陽性でも、感染ではないかも知れない  "
    },
    {
      "title": "GitHub プロファイルを（ちょっとだけ）カッコよくしてみる",
      "section": "remark",
      "description": "自前でポートフォリオを構成できる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/using-github-profile-readme/",
      "published": "2020-09-12T12:17:02+00:00",
      "update": "2020-09-13T02:18:45+00:00",
      "content": "何となく他所様の GitHub プロファイルを眺めてたら既定の表示と違うものがチラホラと見受けられる。\nどうやら，自分のユーザ名（私の場合は spiegel-im-spiegel）のリポジトリを作って中の README.md をプロファイルページの Overview タブに表示できるらしい。\nたとえばこんな感じ。\nGitHub Profile Overview  Markdown や HTML のほか，拡張子を変えれば AsciiDoc とかも使えるみたいなので，割と自由に記述できる。 要するに，自前でポートフォリオを構成できるわけだ。\n取り敢えず，それなりの画面を作りたいなら以下のサービスを利用するのがお勧め。\n GitHub Profile Readme Generator | GitHub Profile Readme Generator rahuldkjain/github-profile-readme-generator: Generate github profile README easily with latest add-ons like visitors count, github stats, etc using minimal UI.  項目を適当に埋めていって，アイコンやアドオンを選択して [Generate README] ボタンを押せば雛形となる Markdown コード（中身はほぼ HTML だけどw）を出力してくれるので，そのまま使うもよし，アレンジして使うもよしである。\nブックマーク  How to create Github Profile-README | by Pratik Kumar | Jul, 2020 | Towards Data Science Shields.io: Quality metadata badges for open source projects alexandresanlim/Badges4-README.md-Profile: Improve your README.md profile with these amazing badges. anuraghazra/github-readme-stats: Dynamically generated stats for your github readmes Blog Post Workflow · Actions · GitHub Marketplace · GitHub  gautamkrishnar/blog-post-workflow: Show your latest blog posts from any sources or StackOverflow activity or Youtube Videos on your GitHub profile/project readme automatically using the RSS feed   GitHub Readme Stats を利用してGitHubプロフィールをカッコよくする - Qiita  "
    },
    {
      "title": "最近のセキュリティ・インシデント",
      "section": "remark",
      "description": "帰ってきた Emotet / キャッシュレス決済の脆弱性",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/recently-security-incidents/",
      "published": "2020-09-11T04:55:11+00:00",
      "update": "2020-09-13T02:07:11+00:00",
      "content": "（この記事は Facebook の TL に書き散らした内容からの再構成です）\n言い訳すると，私はもう「エンジニア」でも「管理者」でもないので，自身に直接降りかかりそうなセキュリティ・インシデント以外は知らないふりをすることにしている（一応ブックマークは溜め込んでるけど）。 でも，まぁ，最近話題の以下の2つはブログ記事として記しておこうかな，と思ったので（笑）\n 帰ってきた Emotet キャッシュレス決済の脆弱性  帰ってきた Emotet Emotet は主に電子メールで媒介される「トロイの木馬」に分類される malware で，単独での拡散機能はない。\n日本では2019年末あたりから報告例が上がっていて，一時は沈静化していたが，2020年7月中旬から再活性化している。\n 「Emotet」と呼ばれるウイルスへの感染を狙うメールについて：IPA 独立行政法人 情報処理推進機構 国内で相次ぐ不審メールの注意喚起と返信型Emotetについてまとめてみた - piyolog  Emotet の特徴は以下の通り。\n Emotet は単体で感染することは少なく、認証情報を盗み出すトロイの木馬や身代金を要求するランサムウェアと一緒に感染することが多く、標的となるEメールや連絡先などの情報を盗み出し、これらの情報を利用して、実際に交わされたEメールの内容や連絡先を悪用し、偽装したEメールを配信することで新たな被害者を標的にします。受け取ったメッセージは正規のもののように見えてしまうため、ユーザーがこのフィッシングメールを判別することは極めて困難にです。Emotetは定期的にアップデートや改変が繰り返されており、Emotet自体とコマンド＆コントロールチャネルが更新できるため、従来のアンチウイルスのシグネチャやネットワークレベルでの検知は困難です 活動を休止していたEmotetが再び活発に – 感染リスクを軽減するためには - F-Secureより  つまり Emotet 侵入は「第一段階」に過ぎず，次段階の内部情報の窃盗や ransomware を使った脅迫行為に向けた情報収集に使われているようだ。\n 標的型ランサムウェア被害企業が1年以上前からEmotetに感染していた可能性についてまとめてみた - piyolog  なので Emotet を検出しても，それを「除去して終わり」とはならず，内部システムの徹底的な洗い出しや情報漏洩の可能性の検討等の面倒くさい作業が待っているわけだ。\nEmotet 特効の防御策はないが，電子メールを媒介とすることから，通常の phishing 対策の徹底が重要となる。\n  身に覚えのないメールの添付ファイルは開かない。メール本文中のURLリンクはクリックしない。 自分が送信したメールへの返信に見えるメールであっても、不自然な点があれば添付ファイルは開かない。 OSやアプリケーション、セキュリティソフトを常に最新の状態にする。 信頼できないメールに添付されたWord文書やExcelファイルを開いた時に、マクロやセキュリティに関する警告が表示された場合、「マクロを有効にする」「コンテンツの有効化」というボタンはクリックしない。 メールや文書ファイルの閲覧中、身に覚えのない警告ウインドウが表示された際、その警告の意味が分からない場合は、操作を中断する。 身に覚えのないメールや添付ファイルを開いてしまった場合は、すぐにシステム管理部門等へ連絡する。   「Emotet」と呼ばれるウイルスへの感染を狙うメールについてより  最近の事例として面白いのは「パスワード付き zip ファイル」をパスワードと共に添付して送るタイプである。\n   「Emotet」と呼ばれるウイルスへの感染を狙うメールについてより  通常の添付ファイルは（企業・組織によっては）メールサーバ到達時点で拒否されることがあるため「パスワード付き zip ファイル」が使われるのだろうが，これが見事に日本の特殊商慣行というか奇習にマッチしているようで，9月に入ってから Emotet の侵入報告が激増しているらしい（笑）\n個人的には（少なくともビジネス・シーンでは）メールにファイルを添付して送るのは今や「悪習」だと思う。 ファイルの共有を行いたいのであれば Google drive や Box, Dropbox などのストレージ・サービスを活用すべきだろう。 かといって Firefox Send のような認証を omit した仕組みでは却ってリスクが増すけれど。\nキャッシュレス決済の脆弱性 私もどうしても「どこもろざ」と読んでしまう。 そもそも「銀行口座」を連想させるようなネーミングからして失敗だよな（笑）\n ドコモ口座を悪用した不正送金についてまとめてみた - piyolog  Twitter の TL を眺めるに，「docomo 利用者以外は関係ない」と思っている人が意外に多そうだ。 関係ないからね。 上のリンク先の記事に挙がっている銀行の口座を持っている人は，一度は残高履歴を確認することを強くお勧めする。\n「ドコモ口座」は最近流行りの「キャッシュレス決済」サービスのひとつである。\nいわゆる「キャッシュレス決済」の市場は既に飽和していて「パイの食い合い」状態になっている。 これに拍車をかけるのが政府主導の「マイナポイント」で，ぶっちゃけ非常にウザい。\nキャリア系の決済サービスの強みは回線契約自体が利用者の「信用」を担保することだったと思うが，サービス対象者を不特定に拡大してしまったために「信用」の構造が変わってしまったのが今回のポイントのひとつだろう。\nもうひとつはチャージに「Web 口振受付サービス」を使っていること。\n   ドコモ口座を悪用した不正送金についてまとめてみたより  これは結構ヤバい仕組みだ。\n邪推だが「ドコモ口座」では「口座振替」が同一ユーザ内で完結するから問題ないと思ったのだろう。 しかし，実際には「ドコモ口座」ユーザが「誰か分からない」のだから，この前提は成り立たない。\nまぁ「ドコモ口座」は 2020-09-10 までに全ての銀行口座登録・変更機能を停止したそうで，遅きに失したとはいえ，措置としては妥当だろう。\n 銀行口座登録の申込受付停止および一部銀行のチャージ停止について  「ドコモ口座」では「本人確認」を強化すると言っているが「本人確認書類」の詐取はいくらでもあり得るのだから，オンラインでの（完全な）身元確認は無理と考えたほうがいい。 むしろ「オンラインでの身元確認は無理」という前提で，どのようにサービスを設計するかが重要だろう。\nあと，いまどき SMS 認証はヤメロ！ やる気あんのか？\nこれ，今回はたまたま「ドコモ口座」だっただけで，似たようなことをやらかしてる「キャッシュレス決済」サービスは結構あるんじゃないの？ 今回のインシデントを通じてきちんとリスク・アセスメントを行い，必要なら法規制をかけないと。 野放図にやりたい放題やる季節は（7pay 崩壊とともに）終わってるのよ。\nまた，この手の犯罪は必ず模倣者が出る。 しばらくは残高履歴をこまめにチェックしたほうがいいだろう。\n【2020-09-12 追記】 暗証番号を認証に使ってはいけない Twitter で見かけたが某国営放送風テレビが「暗証番号を定期的に変える」とか馬鹿すぎることを言ってるらしい。 誰がそんな頭の悪いことを言い始めたのやら\u0026hellip; sigh\n言うまでもないことだと思っていたが改めて言わせてもらうと，暗証番号や PIN コードは認証（authentication）には使えない。 これらのコードは数字4桁から6桁で構成されている。 このサイズの数字列を総当り方式で解読しても，かかるコストは1円未満しかならない。\n    利用する文字種類数と内訳 パスワード長   種類数 数字 文字 シンボル 4文字 8文字 12文字 16文字    10種0-9なしなし1円未満\n（$2^{13.3}$）1円未満\n（$2^{26.6}$）約35円\n（$2^{39.9}$）約35万円\n（$2^{53.2}$） 36種0-9a-zなし1円未満\n（$2^{20.7}$）約100円\n（$2^{41.4}$）約1.65億円\n（$2^{62.0}$）約276兆円\n（$2^{82.7}$） 62種0-9a-z\nA-Zなし1円未満\n（$2^{23.8}$）約7,500円\n（$2^{47.6}$）約1,120億円\n（$2^{71.5}$）約165京円\n（$2^{95.3}$） 94種0-9a-z\nA-Z ! \" # $ %\n\u0026amp; ' ( ) =\n~ | - ^ `\n¥ { @ [\n+ * ] ; :\n} \u0026lt; \u0026gt; ? _\n, . / 1円未満\n（$2^{26.2}$）約21万円\n（$2^{52.4}$）約16.5兆円\n（$2^{78.7}$）\n約129,000京円\n（$2^{104.9}$）   パスワード解読の想定コスト例（情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編  2.4.2.2項より）  たとえば TOTP (Time-based One-time Password) 認証では6桁の数字列を使うが，生存期間は30秒程度で，つまりその程度の信頼性しかないのだ。\nじゃあ，永続的な暗証番号や PIN コードが何に使われるのかというと，デバイスやアプリの「アンロック」に使われる。 この場合，暗証番号や PIN コードはユーザと（手元の）デバイスの間でのみ共有されていればいいので，（アカウントのロックアウトも組み合わせれば）セキュリティ要件はかなり緩くできる。\nしかし，暗証番号を「Web 口振受付サービス」のようなリモートサービスの認証で使うとなると話は変わってくる。 そもそも銀行側が「キャッシュカードの暗証番号を保持ってる」こと自体が問題だと思うが\u0026hellip;\nそういえば，どっかの説教番組が「SIM の PIN コードは変更したほうが安全」とか馬鹿なことを言ったそうで，実際に試した人のトラブルが続出したらしい（笑） 暗証番号や PIN コードは頻繁に変更するように考えられてないし，もし「頻繁に変更」が必要だと言うのなら，そのサービスやシステムは完全に失敗作である。\nあっ，でも，最近は警察や銀行関係者を装って，キャッシュカードや暗証番号を詐取する詐欺が流行ってるらしい。 詐欺に引っかからないのが一番だが，万一の事後処理として「暗証番号を変更する方法」は確認しておいたほうがいいだろう。\nブックマーク  日本医師会、マルウェア「Emotet」の感染を公表\u0026ndash;感染拡散メールに注意喚起 - ZDNet Japan  参考図書  セキュリティはなぜやぶられたのか ブルース・シュナイアー (著), 井口 耕二 (翻訳) 日経BP 2007-02-15 単行本 4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  原書のタイトルが “Beyond Fear: Thinking Sensibly About Security in an Uncertain World” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。\nreviewed by Spiegel on 2019-02-11 (powered by PA-APIv5)\n  信頼と裏切りの社会 ブルース・シュナイアー (著), 山形 浩生 (翻訳) NTT出版 2013-12-24 単行本（ソフトカバー） 4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  社会における「信頼」とは。\nreviewed by Spiegel on 2015-11-28 (powered by PA-APIv5)\n "
    },
    {
      "title": "Go 1.15.2 がリリースされた",
      "section": "release",
      "description": "セキュリティ・アップデートはなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/09/go-1_15_2-is-released/",
      "published": "2020-09-10T01:22:48+00:00",
      "update": "2020-09-10T01:23:18+00:00",
      "content": "Go 1.15.2 がリリースされた。\n Go 1.15.2 and Go 1.14.9 are released  セキュリティ・アップデートはなし。\ngo1.15.2 (released 2020/09/09) includes fixes to the compiler, runtime, documentation, the go command, and the net/mail, os, sync, and testing packages. See the Go 1.15.2 milestone on our issue tracker for details. via Release History - The Go Programming Language  例によって Ubuntu の APT で管理している Go コンパイラは古いので，ダウンロードページからバイナリ（go1.15.2.linux-amd64.tar.gz）を取ってきて手動でインストールすることを強く推奨する。 以下は手動での作業例。\n$ cd /usr/local/src $ sudo curl -L \u0026#34;https://golang.org/dl/go1.15.2.linux-amd64.tar.gz\u0026#34; -O $ cd .. $ sudo unlink go # 以前の Go が入っている場合 $ sudo tar xvf src/go1.15.2.linux-amd64.tar.gz $ sudo mv go go1.15.2 $ sudo ln -s go1.15.2 go $ go version # /usr/local/go/bin にパスが通っている場合 go version go1.15.2 linux/amd64 アップデートは計画的に。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "住所コードと郵便番号に関する覚え書き",
      "section": "remark",
      "description": "個人が興味本位で弄るのは無理，という結論になった。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2020/09/address-code-and-postal-code/",
      "published": "2020-09-09T09:30:36+00:00",
      "update": "2020-09-10T02:42:01+00:00",
      "content": "昨日リリースした spiegel-im-spiegel/cov19data パッケージなんだけど，東京都の PCR 検査陽性者のデータも参照できるようにしている。\n 東京都 新型コロナウイルス陽性患者発表詳細 - データセット - 東京都オープンデータカタログサイト  今までは日付毎に行数をカウントするだけでデータの詳細に興味はなかったのだが，今回改めて CSV ファイルを眺めてみると「全国地方公共団体コード」のカラムがあったので「これなら都道府県名や市区町村名いらなくね？」と気がついた。\nついでにこの住所コードと郵便番号を関連付ければ面白いデータセットが組めるんじゃないかと安直に考えたのだが，どうも簡単な話ではないようだ。 ていうか，個人が興味本位でやるのは無理，という結論になった。\n今回は，その辺の話を覚え書きとして記しておく。\n住所コード ひとくちに住所コードと言っても，様々なレイヤがある。 以下で細かく見てみよう。\nJIS 都道府県コード JIS 規格で決められているコードで，都道府県ごとに 01 から 47 までの2桁の数字列で表される。 たとえば，島根県の都道府県コードは 32 である。\nJIS 住所コードと全国地方公共団体コード 市区町村までを表す住所コードは，都道府県コード＋3桁の合計5桁の数字列で表され，これも JIS 規格で決められている。 たとえば，島根県松江市は 32201 である。\n更に，住所コードの末尾にチェック・ディジットを付加した6桁を「全国地方公共団体コード」と呼ぶ。 ちなみにチェック・ディジットの計算手順は以下の通り。\n 住所コード $abcde$ の各桁に対して $a \\times 6 + b \\times 5 + c \\times 4 + d \\times 3 + e \\times 2$ を求める (1) (1) で求めた値を $11$ で割ったあまりを求める (2) (2) で求めた値を $11$ から引いた値の下1桁がチェック・ディジットとなる  たとえば，住所コード 32201 のチェック・ディジットは\n\\[ 11 - \\left(\\left(3 \\times 6 + 2 \\times 5 + 2 \\times 4 + 0 \\times 3 + 1 \\times 2 \\right) \\bmod 11 \\right) = 6 \\]  なので 322016 が全国地方公共団体コードとなる。\nまた 都道府県コード＋000＋チェック・ディジット で都道府県を表す全国地方公共団体コードになるらしい。 つまり 320005 で島根県を表す。\n国交省 GIS による大字町丁目コード JIS 住所コードよりも更に詳細な住所コードは色々あるが，たとえば以下のものがある。\n 国土地理協会の全国町・字ファイルで提供される JIS 住所コードを含む11桁のコード体系。通称「11桁コード」。住基ネットや個人番号カードでおなじみ地方公共団体情報システム機構もこれを使っているようだ 運輸局で使われる運輸局住所コード。9桁または12桁のコード体系。 JIS 住所コード非互換 国土交通省 GIS の位置参照情報に含まれる大字町丁目コード。 JIS 住所コードを含む12桁のコード体系  オススメは GIS の位置参照情報。 GIS で提供されるデータはいわゆるオープンデータになっていて Creative Commons の「表示 \u0026nbsp;」ライセンス条件下で利用することができる。\n 本利用ルールは、クリエイティブ・コモンズ・ライセンスの表示4.0国際（https://creativecommons.org/licenses/by/4.0/legalcode.jaに規定される著作権利用許諾条件。以下「CCBY」といいます。）と互換性があり、本利用ルールが適用されるコンテンツはCCBYに従うことでも利用することができます。 利用規約より  Japanese-Addresses GIS の位置参照情報を上手く使っているのが Geolonia から提供されているオープンデータの japanese-addresses である。\n Geolonia 住所データ | japanese-addresses geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ  japanese-addresses データは Creative Commons の「表示 \u0026nbsp;」ライセンスで提供されている。 またデータの生成コードは MIT ライセンスで公開されている。\njapanese-addresses データは GIS の位置参照情報をそのまま使っているわけではなく JP の郵便番号データと組み合わせて住所の読み情報も付加しているようだ。 あれ？ じゃあ GIS の位置参照情報と郵便番号データを組み合わせて住所コードと郵便番号とを連携させられるんじゃね？ と思った私を誰が責められよう（笑）\n住所コードと郵便番号 JP の郵便番号データを眺めてみるとこんな感じになっている。\n32201,\u0026#34;690 \u0026#34;,\u0026#34;6900000\u0026#34;,\u0026#34;ｼﾏﾈｹﾝ\u0026#34;,\u0026#34;ﾏﾂｴｼ\u0026#34;,\u0026#34;ｲｶﾆｹｲｻｲｶﾞﾅｲﾊﾞｱｲ\u0026#34;,\u0026#34;島根県\u0026#34;,\u0026#34;松江市\u0026#34;,\u0026#34;以下に掲載がない場合\u0026#34;,0,0,0,0,0,0 32201,\u0026#34;69002\u0026#34;,\u0026#34;6900261\u0026#34;,\u0026#34;ｼﾏﾈｹﾝ\u0026#34;,\u0026#34;ﾏﾂｴｼ\u0026#34;,\u0026#34;ｱｲｶﾁｮｳ\u0026#34;,\u0026#34;島根県\u0026#34;,\u0026#34;松江市\u0026#34;,\u0026#34;秋鹿町\u0026#34;,0,0,0,0,0,0 32201,\u0026#34;690 \u0026#34;,\u0026#34;6900022\u0026#34;,\u0026#34;ｼﾏﾈｹﾝ\u0026#34;,\u0026#34;ﾏﾂｴｼ\u0026#34;,\u0026#34;ｱｵﾊﾞﾀﾞｲ\u0026#34;,\u0026#34;島根県\u0026#34;,\u0026#34;松江市\u0026#34;,\u0026#34;青葉台\u0026#34;,0,0,0,0,0,0 32201,\u0026#34;690 \u0026#34;,\u0026#34;6900015\u0026#34;,\u0026#34;ｼﾏﾈｹﾝ\u0026#34;,\u0026#34;ﾏﾂｴｼ\u0026#34;,\u0026#34;ｱｹﾞﾉｷﾞ\u0026#34;,\u0026#34;島根県\u0026#34;,\u0026#34;松江市\u0026#34;,\u0026#34;上乃木\u0026#34;,0,0,1,0,0,0 ... 一見 JIS 住所コードと郵便番号が\n のように 1 対 n の関係になっているように見えるけど\n 郵便番号や市区町村データを取り扱うときにはまったこと - Qiita  によると\n 郵便番号は必ず1つの町名に紐づいているわけではない 市区町村をまたいで同じ郵便番号を持つケースがある 市区町村はおろか県を飛び越えて同じ郵便番号を持ちうるケースがある  そうで，つまり JIS 住所コードと郵便番号と住所（文字列）の関係は\n となっていて， JIS 住所コードと郵便番号の間で関係を記述できない。 敢えてやるなら\n のように第3の固有IDを作って間接的に関連付ける必要がある。\n\u0026hellip;というわけで諦めました 道理で住所コードと郵便番号を関連付ける実装を見かけない筈だよ。\n使い方としては，まず構造のない住所（文字列）があって，単にその住所を絞り込む条件として住所コードや郵便番号が使える，というだけなのだろう。 古い閉じたシステムではよくある構成だが，外部データと関連付けようとすると素朴すぎて使えない。\nたとえば JIS 住所コードより詳細な「11桁コード」や GIS 位置参照情報の「大字町丁目コード」を第3の固有IDとして郵便番号を関連付けることは可能かもしれないが，そのためには文字列の住所を「名寄せ」する必要がある。 しかも郵便番号データって月単位で変更されるので，ほぼ無理ゲーな気がする。 実際 japanese-addresses は郵便番号との関連付けを行っていないわけだし。\nというわけで，個人が興味本位でやるのは（労力に見合わないので）無理，と諦めた1。\nおあとがよろしいようで m(_ _)m\nブックマーク  日本全国の住所マスターデータをオープンデータとして無料公開 - Geolonia    もちろん仕事なら調査・構築・保守までやるよ（笑） \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "WHO COVID-2019 データを取得するパッケージを作ってみた",
      "section": "release",
      "description": "データ取得部分を外だしにしてパッケージ化した。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/release/2020/09/cov19data-package-is-released/",
      "published": "2020-09-08T09:29:42+00:00",
      "update": "2020-09-08T09:33:21+00:00",
      "content": "ちょっと思いついて WHO COVID-2019 データを取得するパッケージを作ってみた。\n spiegel-im-spiegel/cov19data: Importing WHO COVID-2019 Cases Global Data  ろくすっぽテストもしてないが，汎用で使えるとも思えないし，まぁいいだろう。\n“WHO Coronavirus Disease (COVID-19) Dashboard” で公開されている CSV データを取ってくるだけの簡単なお仕事である。\nそれだけではナニなので，簡単な集計もできるようにした。 たとえば\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/cov19data\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/cov19data/client\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/cov19data/entity\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/cov19data/histogram\u0026#34; \u0026#34;github.com/spiegel-im-spiegel/cov19data/values\u0026#34; ) func main() { h, err := cov19data.MakeHistogramWHO( client.Default(), values.NewPeriod( values.NewDate(2020, time.Month(8), 1), values.Yesterday(), ), 7, //step by 7 days  entity.WithCountryCode(values.CC_JP), entity.WithRegionCode(values.WPRO), ) if err != nil { fmt.Printf(\u0026#34;%+v\\n\u0026#34;, err) return } b, err := histogram.ExportHistCSV(h) if err != nil { fmt.Printf(\u0026#34;%+v\\n\u0026#34;, err) return } if _, err := io.Copy(os.Stdout, bytes.NewReader(b)); err != nil { fmt.Println() } // Output:  // Date_from,Date_to,Cases,Deaths  // 2020-07-28,2020-08-03,8698,16  // 2020-08-04,2020-08-10,9303,35  // 2020-08-11,2020-08-17,7677,52  // 2020-08-18,2020-08-24,6840,82  // 2020-08-25,2020-08-31,5358,98  // 2020-09-01,2020-09-07,3991,84 } てな感じに書けば，8月以降の日本のデータを7日ごとに集計できたりする。\nこのパッケージで集計したデータを使えば\nConfirmed COVID-2019 Cases in Japan  なんてなグラフも描ける。\n元々は SARS-CoV-2 ウイルス感染の動向をチェックするために，ネットの隅っこで\n spiegel-im-spiegel/covid-2019-report: 日本における COVID-2019 確認発症者のレポート  を作って手作業でチマチマ集計していたのだが，徐々に自動化できるようになったので，データ取得部分を外だしにしてパッケージ化したというわけ。\n「とりあえず動いてるからいいか」とあまりテストを書いてないし，設計も雑で如何にもやっつけなコードだけど，よろしかったらどうぞ。\nブックマーク  Go 言語でもグラフを描きたい！  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "time.Time の比較が覚えれん！",
      "section": "golang",
      "description": "一覧表にしておこう。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/order-by-time/",
      "published": "2020-09-07T02:16:53+00:00",
      "update": "2020-09-07T02:31:03+00:00",
      "content": "時刻を表す time.Time 型は比較演算子（==, \u0026lt;, \u0026gt; 等）が使えないので Equal(), Before(), After() 各メソッドが用意されているのだけど， Equal() メソッドはともかく Before() や After() は覚えれんっちうの！\nまぁドキュメントを見れば済む話なのだが，毎回「どうだっけ？」と探すのもナニなので，この際，記事として纏めておくことにした。\nまずはコードを書いてみる。 これ基本。\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { year2000 := time.Date(2000, 1, 1, 0, 0, 0, 0, time.UTC) year3000 := time.Date(3000, 1, 1, 0, 0, 0, 0, time.UTC) fmt.Printf(\u0026#34;year3000.After(year2000) = %v\\n\u0026#34;, year3000.After(year2000)) fmt.Printf(\u0026#34;year3000.Before(year2000) = %v\\n\u0026#34;, year3000.Before(year2000)) fmt.Printf(\u0026#34;year2000.After(year3000) = %v\\n\u0026#34;, year2000.After(year3000)) fmt.Printf(\u0026#34;year2000.Before(year3000) = %v\\n\u0026#34;, year2000.Before(year3000)) } これの実行結果は\n$ go run sample1.go year3000.After(year2000) = true year3000.Before(year2000) = false year2000.After(year3000) = false year2000.Before(year3000) = true となる。 a.After(b) は「a は b の後か？」と覚えればいいかな。\nやっぱ面倒くさい。 一覧表にしておこう。\n 関係 メソッド 返り値   $a = b$ a.Equal(b)true a.Before(b)false a.After(b)false $a \\lt b$ a.Equal(b)false a.Before(b)true a.After(b)false $a \\gt b$ a.Equal(b)false a.Before(b)false a.After(b)true    【サンプル】時刻のソート もう少し「ありそう」なサンプルを考えてみよう。 たとえば，以下のようなデータセット eraList があるとする。\ntype Era struct { Name string Start time.Time } var ( jst = time.FixedZone(\u0026#34;JST\u0026#34;, 9*60*60) eraList = []Era{ {Name: \u0026#34;令和\u0026#34;, Start: time.Date(2019, time.May, 1, 0, 0, 0, 0, jst)}, {Name: \u0026#34;平成\u0026#34;, Start: time.Date(1989, time.January, 8, 0, 0, 0, 0, jst)}, {Name: \u0026#34;昭和\u0026#34;, Start: time.Date(1926, time.December, 25, 0, 0, 0, 0, jst)}, {Name: \u0026#34;大正\u0026#34;, Start: time.Date(1912, time.July, 30, 0, 0, 0, 0, jst)}, } ) この eraList を時刻の昇順で並べ替えてみる。 こんな感じかな。\nfunc (e Era) String() string { return fmt.Sprintf(\u0026#34;%s (from %s)\u0026#34;, e.Name, e.Start.Format(\u0026#34;2006-01-02\u0026#34;)) } func main() { fmt.Println(eraList) sort.Slice(eraList, func(i, j int) bool { return eraList[i].Start.Before(eraList[j].Start) \t}) fmt.Println(eraList) } 結果は以下の通り。\n$ go run sample2.go [令和 (from 2019-05-01) 平成 (from 1989-01-08) 昭和 (from 1926-12-25) 大正 (from 1912-07-30)] [大正 (from 1912-07-30) 昭和 (from 1926-12-25) 平成 (from 1989-01-08) 令和 (from 2019-05-01)] よーし，うむうむ，よーし。\n参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n "
    },
    {
      "title": "次期 Go 言語で導入される（かもしれない） io/fs パッケージについて予習する",
      "section": "golang",
      "description": "ツリー型のディレクトリ・ファイル構成のファイルシステムを操作するパッケージに対して統一した interface 型を提供して互換性を高めようというわけだ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/golang/file-system-interface-in-go-2/",
      "published": "2020-09-06T07:18:45+00:00",
      "update": "2020-09-06T07:22:09+00:00",
      "content": "先日行われた “Go 1.15 Release Party in Japan” で紹介されていた File System Interfaces のドラフト案について予習がてら覚え書きとして記しておく。\n File System Interfaces for Go — Draft Design    io/fs draft design - YouTube  たとえば /path/to/filename.txt のようにツリー型のディレクトリ・ファイル構成のファイルシステムは多い。 メジャーな OS のファイルシステムは大抵そうだし Web のパスや書庫ファイル（*.tar や *.zip など）もツリー型のディレクトリ・ファイル構成になっている。\nたとえば Go の標準パッケージ\n archive/zip html/template net/http os text/template  などは（ほぼ）同じツリー型だが使い方やメソッド名などが微妙に異なっている。 またサードパーティ製のパッケージでは， rakyll/statik のように，実行モジュールにディレクトリ・ファイルをまるっと埋め込めるものもあったりする1。\nこういったパッケージに対して統一した interface 型を提供して互換性を高めようというわけだ。 したら，テストとかもやり易くなるしね（笑）\nfs.FS 型と fs.File 型 ドラフト案では io/fs パッケージを新たに作ってファイルシステムの汎化を定義するようだ。\nまず，ファイルシステムの汎化型 fs.FS は以下のように定義するらしい。\ntype FS interface { Open(name string) (File, error) } また fs.FS.Open() メソッドの返り値になっている fs.File 型は\ntype File interface { Stat() (os.FileInfo, error) Read([]byte) (int, error) Close() error } と定義される。\nたとえば，通常のファイルの読み書きについて\ntype myFS struct{} func NewFS() fs.FS { return \u0026amp;myFS{} } func (fsys *myFS) Open(name string) (fs.File, error) { return os.Open(name) } みたいに定義すれば\nfunc main() { f, err := NewFS().Open(\u0026#34;no-exist.txt\u0026#34;) if err != nil { fmt.Println(err) return } defer f.Close() //Output:  //open no-exist.txt: no such file or directory } てな感じに書ける。 どやさ！\nちなみにディレクトリ区切り文字はスラッシュ “/” で（実際のファイルシステムに関わらず）統一するらしい。 また相対パス指定で “.” や “..” は使えないようにするようだ。 まぁ，実際にはパス変換関数とか必要になるかもしれないね。\nファイルシステム・インタフェースの拡張 上述の説明だと「http.FileSystem 型を使えばええんちゃうん？」となる。 実際 http.FileSystem 型は\ntype File interface { io.Closer io.Reader io.Seeker Readdir(count int) ([]os.FileInfo, error) Stat() (os.FileInfo, error) } type FileSystem interface { Open(name string) (File, error) } と定義されているため fs.FS / fs.File 型とほぼ変わらない2。\n駄菓子菓子。\nio/fs パッケージでは拡張機能を定義した型も用意するらしい。\nたとえばファイル情報を取得する Stat() メソッドを含む\ntype StatFS interface { FS Stat(name string) (os.FileInfo, error) } や，ディレクトリエントリを読む機能を含む\ntype ReadDirFS interface { FS ReadDir(name string) ([]os.FileInfo, error) } といった interface 型も用意されている。\n他にもファイルの内容を一括で読み込める\ntype ReadFileFS interface { FS ReadFile(name string) ([]byte, error) } や Glob() メソッドが使える\ntype GlobFS interface { FS Glob(pattern string) ([]string, error) } も用意するようだ。 実際にはこれらの interface 型を組み合わせて使うことになると思われる。\nブックマーク  Draft designを読む · GitHub rakyll/statik でシングルバイナリにまとめる  参考図書  プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES) Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳) 丸善出版 2016-06-20 単行本（ソフトカバー） 4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;  著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K\u0026amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。\nreviewed by Spiegel on 2016-07-13 (powered by PA-APIv5)\n   実行モジュールにディレクトリ・ファイルを埋め込めるパッケージとしては jteeuwen/go-bindata や jessevdk/go-assets が有名だが，これらは最早メンテナンスされていないので使わないほうがいい。 \u0026#x21a9;\u0026#xfe0e;\n たとえば rakyll/statik パッケージではファイルシステムの生成・初期化関数 fs.New() の返り値は http.FileSystem 型である。 \u0026#x21a9;\u0026#xfe0e;\n   "
    },
    {
      "title": "2020-09-06 のブックマーク",
      "section": "bookmarks",
      "description": "「AWSが「Bottlerocket」を一般提供--Rust指向のコンテナー向けLinux」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2020/09/06-bookmarks/",
      "published": "2020-09-06T01:42:48+00:00",
      "update": "2020-09-06T01:44:33+00:00",
      "content": "リリース情報  LibreOffice 7.0.1 available for download - The Document Foundation Blog Release 8.8.0 · mermaid-js/mermaid · GitHub  バベルのインターネット  インド政府、中国製アプリの取り締まり強化\u0026ndash;新たに118種類を禁止に - ZDNet Japan  セキュリティ＆プライバシー関連  従業員へ賄賂を渡し脅迫目的で不正アクセスを企んだ米国の事件についてまとめてみた - piyolog AWS、「Java 8」を2026年まで、「Java 11」は2027年まで、現行より3年サポート期間延長を発表。独自JavaディストリビューションのCorretto 8とCorretto 11で － Publickey テスラの車にはネット経由で一斉にリモート操作できる脆弱性があった - GIGAZINE Zoomがブラウザに保存されたCookieをアンインストール時に操作していることが判明 - GIGAZINE FASTCash 2.0: North Korea\u0026rsquo;s BeagleBoyz Robbing Banks | CISA  North Korea ATM Hack - Schneier on Security   noteのIPアドレス漏洩と同様のリスクを持つSNS ID漏洩が修正されたので、何が起きてたかをまとめます。｜榊原昌彦｜note NSAによる大規模な通話記録の収集は「違法」\u0026ndash;裁判所が判断 - ZDNet Japan 「OpenSSL」の脆弱性、その存在すら気付かれないまま放置されている可能性も？【海外セキュリティ】 - INTERNET Watch 情報セキュリティ白書2020：IPA 独立行政法人 情報処理推進機構 Insider Attack on the Carnegie Library - Schneier on Security Safariで｢ファイルを勝手に共有してしまう｣脆弱性が発覚。被害を防ぐには？ | ライフハッカー［日本版］ Hacking AI-Graded Tests - Schneier on Security  天文関連  News | A “bang” in LIGO and Virgo detectors signals most massive gravitational-wave source yet | LIGO Lab | Caltech 若い惑星の公転面は傾いていない？：惑星系の進化に新知見 | 観測成果 | すばる望遠鏡 プレスリリース - 三つ子星のまわりで見つかった、互い違いの原始惑星系円盤 - アルマ望遠鏡  知財関連    フリーソフトウェアとそれを取巻く世界の状況 (2007) – とりあえずノートがわりに書いてます   Download Shepard Fairey\u0026rsquo;s Creative Commons Logo Remix - Creative Commons  その他  Android向けホーム画面アプリ「Microsoft Launcher 6.2」が配信開始 - 窓の杜 「Internet Explorer」来年終了は誤解です！ でももう削除しちゃってもいいんじゃない？ - 高橋忍のにゃんともWindows - 窓の杜 constant package · pkg.go.dev 2020年8月31日ニュース「新型コロナ患者で起きる免疫暴走の引き金物質を発見 阪大グループ」 | SciencePortal Bootstrap Icons · Official open source SVG icon library for Bootstrap  Bootstrapにとって初めての独自アイコン集「Bootstrap Icons」バージョン1.0が初公開 － Publickey   Optimal Management of a Pandemic in the Short Run and the Long Run  長期および短期のパンデミックの最適管理 - himaginary’s diary   GoogleがBigQueryを安価に提供できる理由は、Borgによる大規模分散コンテナ環境があるから － Publickey cocoa-mhlw/cocoa  Covid-19Radar/Covid19Radar: Open Source / Internationalization/ iOS Android Cross Platform Contact Tracing App by exposure notification framework Xamarin App and Server Side Code   New Case Studies About Google’s Use of Go | Google Open Source Blog liamg/furious: Golang IP/port scanner with SYN (stealth) scanning and device manufacturer identification Linuxカーネル、29年の歴史を振り返るレポート\u0026ndash;コミット数は100万超 - ZDNet Japan AWS、コンテナ実行に最適化したLinux OS「Bottlerocket」正式版リリース － Publickey  AWSが「Bottlerocket」を一般提供\u0026ndash;Rust指向のコンテナー向けLinux - ZDNet Japan   Googleアカウントを持たないユーザーとも、G Suiteのドキュメントやスプレッドシートを共有、編集可能に － Publickey 『サクラ大戦』新作アプリ『サクラ革命』事前登録開始！ 開発・運営はディライトワークス、時代は太正100年、ジャンルはRPG - ファミ通.com 2020年9月3日ニュース「日本の南近海の海面水温上昇で台風勢力強まる恐れ 8月は3海域で最高水温と気象庁」 | SciencePortal 2020年9月2日ニュース「イネの根の張り方を制御する遺伝子発見 塩害対策に期待」 | SciencePortal 「GitHub Container Registry」パブリックベータとしてサービス開始。無料でコンテナのパブリックイメージ公開可能 － Publickey Kubernetes 1.19正式版がリリース。Ingress APIが正式版に、サポート期間は9カ月を1年に延長 － Publickey If everyone hates it, why is OOP still so widely spread? - Stack Overflow Blog  ブログ: 皆が嫌っているのに、なぜOOPが未だに広く普及しているのか?   The database I wish I had  ブログ: 私が欲しいと思うデータベース   Planning the 2021 Roadmap | Rust Blog マイクロソフト、次期Windows ServerでHTTP/3のベースとなるQUICプロトコル搭載、UDPやTCP性能も向上へ － Publickey 任天堂が往年のゲーム＆ウォッチをマリオ版としてカラー画面・USB-C化でリメイク、11月13日に5478円で発売 | TechCrunch Japan 2020年9月4日ニュース「再生可能エネルギー時代に電気の品質を安定させる制御法を開発 慶大など」 | SciencePortal IIJ、「Windows Virtual Desktop」のフルマネージドサービスを提供 - ZDNet Japan : 企業向け，個人では無理かな Webアクション「部屋裏のバイテン」第5話 : ぽじとろんの竹本泉観察記  "
    }
  ]
}
