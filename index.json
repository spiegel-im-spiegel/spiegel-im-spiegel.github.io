{
  "title": "text.Baldanders.info",
  "url": "https://text.baldanders.info/",
  "feed": "https://text.baldanders.info/index.xml",
  "description": "帰ってきた「しっぽのさきっちょ」",
  "entry": [
    {
      "title": "『ユニコーン企業のひみつ』読書会（2）",
      "section": "remark",
      "description": "トライブ，チャプター，ギルド，そしてカンパニーベット",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/06/competing-with-unicorns-2/",
      "published": "2022-06-18T12:37:06+00:00",
      "update": "2022-06-18T12:37:25+00:00",
      "content": "先月から始まった『ユニコーン企業のひみつ』読書会の2回目。\n第2回『ユニコーン企業のひみつ』オンライン読書会 - connpass 今回は4章から9.4章までだったが，内容盛り沢山なので複数回に分けて紹介する。\nところでヘッドセットのマイクの調子が悪いのよ。 自分の声は聞こえないので分からなかったが，過剰にノイキャンが効いてる感じらしい。 観念して USB 接続のマイクを発注した。 とほほ\naudio-technica USBコンデンサーマイク 在宅勤務/録音/動画配信/ポッドキャスト AT9933USB Audio Technica(オーディオテクニカ) (Release 2015-02-13) エレクトロニクス B00T5ANN00 (ASIN), 4961310129798 (EAN) Bluetooth 接続のヘッドセットの調子が悪いので，マイクだけ USB 接続のものを買ってみた。\nreviewed by Spiegel on 2022-06-18 (powered by PA-APIv5)\n目次 『ユニコーン企業のひみつ』読書会（1） 『ユニコーン企業のひみつ』読書会（2） ← イマココ “There is No Spotify Model” 今回の範囲からは外れるが，読書会で以下の記事が紹介されていたので共有する。\nSpotify’s Failed #SquadGoals Spotifyは \u0026lsquo;Spotifyモデル \u0026lsquo;を使っていない - アジャイルよろず相談室（日本語訳） 実はこの辺の話は「訳者あとがき」で少し言及されている。 「訳者あとがき」によると\nSpotify でのスクワッドやトライブ、ギルドといった少し変わった名前のエンジニアリング組織編成、いわゆる「Spotify モデル」は、アジャイルコーチの Henrik Kniberg らの記事や動画をきっかけに英語圏のアジャイル界隈では広く認知されました。本文での説明も、初出である \u0026ldquo;Scaling@Spotify\u0026rdquo;（2012年）、\u0026ldquo;Spotify Engineering Culture\u0026rdquo;（2014 年）\u0026ldquo;Spotify Rythm\u0026rdquo;（2016 年）を踏まえたものになっています。とはいえこれも、あくまで著者の在籍時の経験にもとづいたスナップショットです。 『ユニコーン企業のひみつ』訳者あとがきより とある。 前回紹介したようにスタートアップが「学習する機械」であり「失敗はゲームの一部」であるなら，マネジメントそのものも同様にイテレーションしているだろうと想像できる。\nじゃあ『ユニコーン企業のひみつ』はもう古くて使えないのかというと，さにあらずで\n繰り返しますが、大切なのはスクラムか Spotify モデルかというプラクティスではありません。重要なのはプラクティスを支える原則や、それを生みだす価値観のあり方、すなわち文化です。「文化が重要」なのです。 『ユニコーン企業のひみつ』訳者あとがきより と記されている。\n「訳者あとがき」ではこの辺の話を含め『ユニコーン企業のひみつ』以外の本も紹介されているので「いまさら Spotify モデルかよ！」という人は「訳者あとがき」を立ち読みするところから始めてもいいかも知れない（笑） ちなみに『ユニコーン企業のひみつ』で「文化」の話は9章で登場する。\n前説おわり。\nトライブ（Tribe），チャプター（Chapter），ギルド（Guild） トライブ，チャプター，ギルドは Spotify が考案した組織の概念で，スクワッドの機能を全社レベルにスケールするための構造化と言える。 ひとつずつ見ていこう。\nトライブ トライブは前回紹介したスクワッドを束ねたものだ。 といってもトライブはスクワッドの上位組織ではなく\nスクワッド以外の組織構造（トライブ、チャプター、ギルド）はどれも、スクワッドの支援と調整のために組まれた「足場」 『ユニコーン企業のひみつ』4.2章より であり，あくまでも自律（フルスタック）した小さなチームである「スクワッド第一」で\nスクワッドとトライブのどちらも、どんな顧客に向けたものなのかがきちんと特定された、明快なミッションを持っていなければならない。ミッションには成功を示す明確な指標が必要であり、トライブはその達成に責任がある。 『ユニコーン企業のひみつ』4.2章より ということらしい。\nチャプター チャプターはトライブ内のスクワッドを横断し，同じ専門性を持つメンバーで構成されるグループだ。 スクワッドを縦串とするならチャプターは横串と考えてもいいかも知れない。 ただし，いわゆる「マトリクス組織」構造における「人材プール」ではないらしい（私はいまいちピンとこなかったが）。\nギルド ギルドは\n同じ専門分野に興味のあるメンバーからなるグループで、組織を横断して形成される。 [\u0026hellip;] チャプターとは異なり、ギルドは正式な組織ではない。 『ユニコーン企業のひみつ』4.6章より だそうな。 緩い技術交流コミュニティ，あるいはもっと緩い勉強会みたいなイメージだろうか。\nこのことを過小評価してはいけない。学ぶことの持つ力、すなわち、自分自身が成長していると感じ続けられることは、勤勉でスマートな、知性豊かな人たちにとってはこの上ない魅力だ。これこそ、最も優秀で素晴らしいメンバーを惹きつけ続けるための秘訣だ。 『ユニコーン企業のひみつ』4.6章より スクワッド・トライブの自己組織化 4.7章でトライブの面白い例が紹介されている。 多めの引用はご容赦。\nSpotify の組織改編がいつもこうだったというわけではないが、ある大規模なトライブの組織再編にあたり、アジャイルコーチをファシリテーターとしたワークショップを開催したことがあった。そのワークショップではリーダー陣が一堂に会して、共同で新しいトライブの編成を考えた。といっても、その時点では新しいトライブに具体的なメンバーをアサインしなかった。Spotify はメンバーに自分で自分の所属をサインアップさせることにした。 『ユニコーン企業のひみつ』4.7章より この一連の流れが特筆に値すると思ったのは、テック企業の本気を目のあたりにしたからだ。テック企業は意思決定を現場に任せて、メンバーの自己組織化を促すためなら、どこまでも突き進む。 『ユニコーン企業のひみつ』4.7章より Spotify や他のテック企業が発見したのは、メンバーが転職せずにすぐれた仕事を続けてくれる可能性が高くなるのは、内容をよく理解した仕事を自分で選び、気に入った人たちと一緒に働いている場合だということだ。 『ユニコーン企業のひみつ』4.7章より なんとなく「スクワッドが寄り集まってトライブを形成する」みたいなイメージで考えていたのだが，最初から構造化されたスクワッド・トライブを構成して，そこに向かって各々サインアップするって感じなのね。\nここまで読み進めるとチャプターが「人材プール」ではないと述べられていることの意味が少し分かる。 上から辞令が降りてくるわけではないのだ。 スタートアップ内では自分の仕事は自分で見つけないといけないらしい（笑） 言い方を変えるなら，それができる「人材」こそがスタートアップでは求められているわけだ。\nカンパニーベット（Company Bet） 「カンパニーベット」も Spotify の用語だそうで\nカンパニーベットは、会社が取り組みたい重要事項を、終わらせたい順に並べたリスト 『ユニコーン企業のひみつ』5.2章より を指すらしい。 もちろん，ただ漫然と優先順位を決めるのではなく DIBB (Data, Insight, Belief, Bet) と呼ばれる意思決定フレームワークに基づいて決定していく。\n前節の「スクワッド・トライブの自己組織化」とは異なりカンパニーベットは上から降りてくるメッセージだ。 とはいえ，これは業務命令ではない。\n念を押しておくが、自分たちの時間を何に費やすべきかの最終的な決定権はあくまでスクワッドにある。スクワッドの自律性は揺らがない。スクワッドはベットや DIBB を参照することで、自分たちが会社全体の役に立っていることと、利己的な部分最適に陥っていないことを自分たちで点検する。ベットもDIBB もスクワッドの判断を支援することに存在意義があるのだ。 『ユニコーン企業のひみつ』5.5章より カンパニーベットは，喩えるなら，現場のエンジニアの向きを揃える整流器のようなものだろうか。\n大きなチャンスに狙いを絞ったベットに向けて「部隊」を集結させ、総力をあげてこれに取り組む。やり遂げたら、次の大がかりなベットが始まるまでの間、各自はそれぞれ普段の業務に戻る。Spotify のようなテック企業はそうやって物事を進めている。 『ユニコーン企業のひみつ』5.5章より というわけで\u0026hellip; 次回へ続く。\n参考図書 ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 Jonathan Rasmusson (著), 島田 浩二 (翻訳), 角谷 信太郎 (翻訳) オライリージャパン 2021-04-26 単行本（ソフトカバー） 4873119464 (ASIN), 9784873119465 (EAN), 4873119464 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元より電子版も出ている。 Google や Spotify のような「ユニコーン企業」はどのようにして「ミッション」を遂行しているのか。\nreviewed by Spiegel on 2022-05-21 (powered by PA-APIv5)\n"
    },
    {
      "title": "Atom の落日",
      "section": "remark",
      "description": "ユーザ間のエコシステムが出来上がっている製品であっても廃れたらあっという間",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/06/sunsetting-atom/",
      "published": "2022-06-11T00:19:04+00:00",
      "update": "2022-06-11T00:19:35+00:00",
      "content": "GitHub が Microsoft に買収されて以来，その内そうなるだろうとは思っていたが，ついにこの日が来てしまったか。\nToday, we’re announcing that we are sunsetting Atom and will archive all projects under the organization on December 15, 2022. via Sunsetting Atom | The GitHub Blog Atom には思い入れがある。 思い返せば2015年は色々と心境の変化があった年で，たとえば Windows 7 のサポート終了をにらんで Windows 依存からの脱却を模索し始めた年で Go で遊び始めた年でもある。 「Windows 依存からの脱却」の最大の障害はテキストエディタの秀丸に依存しきっていたことで，マルチプラットフォームで手に馴染むエディタを探すことが最優先事項だったのだ。\nというわけで，私の中で Atom と Go はセットになっていた。 Atom の拡張機能である go-plus の出来が（当時としては）よかったのも大きい。\nそういえば Twitter で「VSCode に「中華を初めて統一した始皇帝」みたいな印象ができつつある」みたいな tweet を見かけたが，エディタ界の始皇帝は vim だろうとか思ってみたり。 このブログでも何度か書いているが，私は vi にトラウマがあって， vi/vim を起動するとペーペーの新人の頃に工場の片隅でガチの VT 端末を前に泣きながらデバッグしていたあの頃がフラッシュバックしてしまうのだ。 なので最初から vim という選択肢はなかった。 まぁ Ubuntu 環境にいると結局は vim も使わざるを得ないのだが（笑）\nプログラミルクボーイ「Vim」 - YouTube 話を戻そう。\n私の中で風向きが変わったのは “Language Server Protocol (LSP)” が登場したあたり。 LSP はホンマに画期的なアイデアで，当然 Go 用の lunguage server も登場するんだけど1 go-plus はこれを取り込むことができなかった。\n加えて，私が IT 業界に再就職して支給された Windows 10 機に Atom を入れたら堪えられないほど遅いのにビックリし，観念して VS Code に乗り換えたのだった。\nパソコンに Visual Studio Code を導入する（再チャレンジ） Microsoft Windows を嫌って Ubuntu や Atom にしたというのに，結局は Microsoft に屈してしまったわけだ（「くっころ」とか言わないよ）。 今やすっかり手に馴染んでしまったけどね。\nAtom が登場したのは2014年だそうだが，当時は SublimeText のカウンタという位置付けだったと思う。 8年というのはソフトウェア製品としては息が長いほうだと思うけど，テキストエディタは下手すると10年20年と使うものなので簡単に消えられては困るわけですよ。 それでも時代の流れには逆らえない。 ユーザ間のエコシステムが出来上がっている製品であっても廃れたらあっという間ということか。 まさに「落日」だな。\nせめて VS Code のエコシステムが永く続くことを祈ろう。\nブックマーク Why GitHub Is Killing Atom Text Editor Introducing Zed – A collaborative code editor written in Rust LSP が発表された頃 Go 用の lunguage server としていくつかの実装があったが，現在はほぼ gopls 一択である。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Web3 ってゆーな！",
      "section": "remark",
      "description": "久しぶりの「◯◯ってゆーな！」シリーズ。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/06/this-is-not-web/",
      "published": "2022-06-02T11:29:46+00:00",
      "update": "2022-06-02T11:30:01+00:00",
      "content": "久しぶりの「◯◯ってゆーな！」シリーズ。 ってシリーズだったのか，これ。\n今回のトリガーはこちら。\nWeb3とWeb2.0を比較する時にあまり注目されないけど重要だと思う点 - ヨーロッパで働くIT土方社長のブログ まぁ「Web技術者が全くワクワクしない」かどうかは知らないが，もし「Web3 は Web じゃないよね」という意味があるなら同意する。\n面倒くさいので日本語 Wikipedia から引用してしまうが， Web3 とは\nWeb3（ウェブスリー）、またはWeb3.0とは、パブリック型のブロックチェーンを基盤としたインターネットの概念である。\nこの言葉は2014年に暗号通貨のイーサリアムの共同創設者であるギャビン・ウッドによって作られたもので、このアイデアは2020年と2021年に暗号通貨に熱狂する者や大型IT企業、ベンチャーキャピタルから関心を集めた。\nWeb3 - Wikipediaより らしい。 一方で古のインターネットから Web は World Wide Web の略称で使われる。 ゼロ年代の Web 2.0 もこの文脈で語られている。 その意味で「ブロックチェーンを基盤」とする Web3 は明確に “Web” じゃない。 まぁ，私としては昨年（2021年）の時点で NFT を「Xanadu 未満」と切り捨ててるんだけどね。\nちなみに “Xanadu” とは\nWorld Wide Webは確かにリンクを使うことで世界中に散らばるドキュメントに関連性をもたせることに成功した。Xanaduもそれを狙っていたことは事実だけれど、World Wide Webをドキュメント中心のネットワークと仮に定義するならば、Xanaduはリンク中心のネットワークとでも言えるかもしれない（World Wide Webだってリンク中心じゃないか、と言う人もいるかもしれないけど）。というのも、Xanaduでは元となるドキュメントは一つしか存在せず、それ以外は全てコピーでしかない。World Wide Webでは構造上、オリジナルのコピーをそのまま転送することで通信を可能にしておりオリジナルとコピーの差は無いけれども、 Xanaduではオリジナルとコピーは「違うもの」として定義される。オリジナルとコピーはリンクの方法によって様々な変化を加えることが可能となる。だから必然的にXanaduではリンクの方式がWorld Wide Webと比べて豊富である(p301-307)。修正リンク、コメントリンク、双対リンク、翻訳リンク、見出しリンク、パラグラフリンク、引用リンク、レイアウトリンク、脚注リンク、ハイパーテキストリンク、通常のジャンプリンク、モード付きのジャンプリンク、推奨コースリンク、拡張リンク、著作リンク、参照リンク、代替バージョンリンク、コメント文書、保証リンク、メールリンクなどがある。\nXanaduの実現を難しくしている原因の一つは、著作権問題にある。いわゆるマイクロペイメント・システムが実現し、データ通信量に応じて著作権料が支払われるシステムをXanaduは想定しているけれど、今のところこれを可能にするマイクロペイメント・システムは実現されていない。バージョン管理システムも、CVSのようなアプリケーションとしては存在していても、HTMLそのものにバージョン管理システムが埋め込まれているわけではない。そして、XanaduとWorld Wide Web(インターネット)の歴史を隔てる一番の要因は、開発方法そのもの。インターネットは徹底してオープンな姿勢を貫いてきた。勿論例外も存在するけれど、基本的にソースは公開されることが原則で、だからこそGPLやLinuxなどといったものが生まれて来た。それに対して Xanaduはソースの内容を一切公開せず特許化してしまっている。だから、ネルソンの語るXanaduの理想郷がどれだけ素晴らしいものであったとしても、開発グループに入ることができなければ、Xanaduに関わることはできない。HTMLは確かに貧弱なマークアップ言語だが、その記述方法が簡単であったからこそ、ここまで普及することができたのも事実なのである。もし、仮にXanaduがオープンソースであったのなら、もしかしたらHTMLではなくXanaduが今のインターネットの主流になっていたのかもしれない。それでもXanaduはHTMLやXMLで実現できそうにない部分を未だに含んでおり、今後もその理念は必要とされていくのだろう。\nリテラリーマシン―ハイパーテキスト原論より といったような話。 こうした考え方が1980年代にはすでに出ていたわけだ。 故に Web3 みたいなもの言いは止めて Xanadu 2.0 とでも呼ぶべきだろう。 もし「それ」が Xanadu を超えるなら面白いとは思っている。\n私は（マシン語ベースでコードを書いてた時代はともかく）現代ソフトウェア設計において「名前」はとても重要な「制約」だと思っている。 名前と意味（機能）の乖離は徐々に確実に設計を狂わせる。 名前と意味の関係が一意で絶対とまでは言わないが，名前を軽視するソフトウェア・エンジニアは三流以下だと思う。\n参考図書 もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来 yomoyomo (著) 達人出版会 2017-12-25 (Release 2019-03-02) デジタル書籍 infoshare2 (tatsu-zine.com) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; WirelessWire News 連載の書籍化。感想はこちら。祝 Kindle 化！\nreviewed by Spiegel on 2018-12-31\n"
    },
    {
      "title": "2022-05-22 のブックマーク",
      "section": "bookmarks",
      "description": "「天の川銀河中心のブラックホールの撮影に初めて成功」他",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/bookmarks/2022/05/22-bookmarks/",
      "published": "2022-05-22T07:33:26+00:00",
      "update": "2022-05-22T07:36:51+00:00",
      "content": "リリース情報 Release v0.98.0 · gohugoio/hugo · GitHub Release v2.0.0 · pelletier/go-toml · GitHub Release v1.24.1 · tailscale/tailscale · GitHub Release 4.4.12_0 · nyaosorg/nyagos · GitHub Release v0.8.0 · nyaosorg/go-readline-ny · GitHub Release 0.23.0 · tinygo-org/tinygo · GitHub Release v1.24.2 · tailscale/tailscale · GitHub LibreOffice 7.3.3 Community available for download - The Document Foundation Blog 「LibreOffice 7.3.3 Community」が公開 ～「SourceForge」での提供も開始 - 窓の杜 Release April 2022 (version 1.67) · microsoft/vscode · GitHub Visual Studio CodeがMarkdownのサポートを強化。ファイルのドロップでリンクを自動作成、見出しへの参照一覧など。Visual Studio Code 1.67（April 2022） － Publickey Release Git for Windows 2.36.1 · git-for-windows/git · GitHub Release v1.46.0 · golangci/golangci-lint · GitHub Release v3.2.0 · golangci/golangci-lint-action · GitHub Release v3.12.1 · go-task/task · GitHub Release v1.46.1 · golangci/golangci-lint · GitHub Release v0.21.0 · sharkdp/bat · GitHub Release 9.1.1 · mermaid-js/mermaid · GitHub Release v0.99.0 · gohugoio/hugo · GitHub Release v1.46.2 · golangci/golangci-lint · GitHub Release v0.4.0 · geolonia/japanese-addresses · GitHub Release v0.99.1 · gohugoio/hugo · GitHub Release April 2022 Recovery 2 · microsoft/vscode · GitHub Release v2.5.14 · spring-projects/spring-boot · GitHub Release v2.6.8 · spring-projects/spring-boot · GitHub Release v2.7.0 · spring-projects/spring-boot · GitHub Announcing Rust 1.61.0 | Rust Blog Release gopls/v0.8.4 · golang/tools · GitHub Release MathJax v3.2.1 · mathjax/MathJax-src · GitHub Release v0.37.0: Release Wasmtime 0.37.0 (#4169) · bytecodealliance/wasmtime · GitHub 「Firefox 100.0.1」が公開 ～ピクチャーインピクチャーの問題を解決 - 窓の杜 セキュリティ＆プライバシー関連 「Rust」ベースのランサムウェア「BlackCat」、60以上の組織に被害\u0026ndash;FBIが注意喚起 - ZDNet Japan NeedCurrentDirectoryForExePathW function (processenv.h) - Win32 apps | Microsoft Docs 「政府によるインターネットの遮断」は2016年以降に世界60カ国で935件以上も発生、安価な商業ツールが検閲に使われる実態も - GIGAZINE Software security starts with the developer: Securing developer accounts with 2FA | The GitHub Blog GitHub will require all code contributors to use two-factor authentication - The Verge GitHub、全てのコード提供者に2要素認証を義務付け\u0026ndash;2023年末までに - ZDNet Japan 15.3 Million Request-Per-Second DDoS Attack - Schneier on Security Cloudflare blocks 15M rps HTTPS DDoS attack Apple, Google and Microsoft team up on passwordless logins – TechCrunch OpenPGP keys and SHA-1 - The Thunderbird Blog FUJITSU Network IPCOMの運用管理インタフェースの脆弱性に関する注意喚起 「子どもの保護」の名の下に暗号化を破壊しようとする欧州委員会 | P2Pとかその辺のお話R 欧州委員会の無責任な「オンライン児童性虐待防止・撲滅規則」案がエンドツーエンド暗号化を破壊する | P2Pとかその辺のお話R Cut-and-paste terrorism: Much of the Buffalo shooter’s manifesto is copied word for word from the Christchurch killer – We Hunted The Mammoth Technical Advisory – Tesla BLE Phone-as-a-Key Passive Entry Vulnerable to Relay Attacks – NCC Group Research Bluetooth Flaw Allows Remote Unlocking of Digital Locks - Schneier on Security 他人でもワンタッチで勝手にテスラ車のドアを開けてしまえる問題が報告される、実演ムービーも公開 - GIGAZINE Bluetooth Low Energyに脆弱性。家や車のスマートキーなどに影響の恐れ - PC Watch ISC BIND 9における脆弱性について（2022年5月） Security advisory: malicious crate rustdecimal | Rust Blog GitHub、コードのコントリュビュータに2要素認証を義務化、2023年末までに。パスワードレスへの対応も積極化 － Publickey Apple、Google、マイクロソフトが対応表明した、パスワードレスがさらに便利になる2つの新機能とは。 PCがスマホとBluetooth通信でパスワード不要に、2台目のスマホにもクレデンシャルを簡単リストア － Publickey ASCII.jp：画像に埋め込まれたマルウェア感染スクリプト「ステガノグラフィ」とは 「Qt」で開発されたWindowsアプリに権限昇格の問題、アプリの権限で任意コードが実行されるおそれ - 窓の杜 GitHub Achieves ISO/IEC 27001:2013 Certification! | The GitHub Blog GitHubがISO/IEC 27001:2013認証を取得 - GitHubブログ iOS/Androidで広告IDのトラッキングを停止する方法と、今すぐそうすべき理由 | P2Pとかその辺のお話R VPN Users\u0026rsquo; Anonymity Under Threat Following Indian Security Order * TorrentFreak VPNから匿名性を剥ぎ取ろうとするインド・セキュリティ当局 | P2Pとかその辺のお話R 知財関連 『OMEGA』パロディー時計『OMECO』 商標登録はなぜ取り消されたのか - 弁護士ドットコム Twitterの新オーナーは「表現の自由」のために何をなすべきか | P2Pとかその辺のお話R Russian Cinemas Are Showing Pirated Movies Downloaded From Torrents * TorrentFreak Pythonソフトウェア財団が無事Pythonの商標権を獲得へ（栗原潔） - 個人 - Yahoo!ニュース ドワンゴが、対FC2特許権侵害訴訟で敗訴（4年ぶり2回目）（栗原潔） - 個人 - Yahoo!ニュース ポスト「ロー対ウェイド判決」の世界で、企業がデジタルライツを守るためにできること | P2Pとかその辺のお話R ディズニーの著作権の特別保護を剥奪する法案をアメリカ上院議員が提出、2022年内にミッキーが「フリー素材」化する可能性 - GIGAZINE Software Freedom Conservancy right-to-repair lawsuit against California TV manufacturer Vizio, Inc. remanded to California State Court - Software Freedom Conservancy SFC、GPL違反めぐる対VIZIO訴訟で大きな一歩 - ZDNet Japan Linux または Ubuntu に関する話題 【Ubuntu日和】【第1回】Ubuntuのススメ - PC Watch 【Ubuntu日和】【第2回】Windowsに対するUbuntuの利点 - PC Watch 【Ubuntu日和】【第3回】Ubuntuでもエルデンリングを動かせる！ SteamでWindows用のゲームをプレイしよう - PC Watch Concerns Raised Over The \u0026ldquo;New\u0026rdquo; NTFS Linux Driver That Merged Last Year - Phoronix Linux仮想マシンを「Boxes」で簡単に作成するには - ZDNet Japan Ubuntu 22.10 その2 - Ubuntu 22.10の開発コード - kledgeb Ubuntu 22.04 その84 - 日本語入力の候補ウィンドウがアプリの左下に表示される不具合 - kledgeb Ubuntu 22.10 その3 - Ubuntu 22.10の開発始まる - kledgeb The Magic of Docker Desktop is Now Available on Linux - Docker ［速報］「Docker Desktop for Linux」が登場、WindowsやMac版と同じ機能や操作を提供、Raspberry Pi OSにも対応 － Publickey Linuxカーネル内部をフックするeBPFを用いてセキュリティの可観測性を実現する「Tetragon」がオープンソースで公開 － Publickey 【さくらの専用サーバ PHY / さくらの専用サーバ】カスタムOS「Ubuntu 18.04」提供終了のお知らせ | さくらインターネット Ubuntu 22.10 その7 - GNOME Sushiをプリインストールする提案 - kledgeb 正誤表『Linuxシステムの仕組み』：柴田 芳樹 (Yoshiki Shibata)：SSブログ Azure や Windows に関する話題 Windows Update のエラーを解決する サービスの認証に失敗する不具合。2022年5月11日のWindowsUpdateが原因 | ニッチなPCゲーマーの環境構築Z Windows 11のパッチ「KB5013943」をインストールすると一部でブルースクリーン - 窓の杜 「Windows 10」バージョン「20H2」「1909」、サービス終了 - ZDNet Japan Go 言語関連 SQLDrivers · golang/go Wiki · GitHub Go Conferrence 2022 Springで登壇した #gocon - My External Storage TinyGo 0.23 で遊べるマイコンボード一覧 - sago35の日記 Go: Story of TryLock Function. ℹ️ This article is based on Go 1.18. | by Vincent Blanchon | A Journey With Go | May, 2022 | Medium io.Copyを調べてみた Goのスクレイピングライブラリ goquery と colly を試してみる AT SAMの部屋(4) XiaoでもGo！Goroutineで並行処理、どこまでいけそう？ | デバイスビジネス開拓団 google-cloud-go の使ってみた操作まとめ - Qiita Goならわかるシステムプログラミング第2版が出たので書評しますね sqlmock + gormでDB周りのテストを書く Java 言語関連 『Effective Java 第3版』オンライン読書会を終了します：柴田 芳樹 (Yoshiki Shibata)：SSブログ 天文関連 ユリウス日について - 国立天文台暦計算室\nRussia says it\u0026rsquo;s pulling out of International Space Station over sanctions\nWatch Event Horizon Telescope\u0026rsquo;s Milky Way discovery online | Space\n天の川銀河中心のブラックホールの撮影に初めて成功 | 国立天文台(NAOJ) Simulation meets observation in first image of the supermassive black hole at our galaxy’s center – TechCrunch MIT Tech Review: 天の川銀河のブラックホール、撮影に初成功 Lunar eclipse guide: May 15-16 super blood… | The Planetary Society\nBlood moon, big city: Skywatcher captures total lunar eclipse over New York (photos) | Space\n【スマホで望遠鏡を簡単操作】ビクセン・ワイヤレスユニット | 天リフOriginal\nその他 Git.io deprecation | GitHub Changelog Verbatim、“1回だけ”書き込める外付けSSD。データ保持10年以上 - PC Watch Being friendly: Friendly forks 101 | The GitHub Blog JSON Viewer - JSON Hero GitHub Desktop 3.0でPull Requestとのインテグレーションを強化 - GitHubブログ PayPal shuttering its San Francisco office – TechCrunch Google Releases First Developer Preview of Privacy Sandbox on Android 13 Visual Studio Codeを用いた簡単な正規表現検索 - Qiita 基本的な正規表現一覧 | murashun.jp PerlNavigatorがすごい - 時計を壊せ ジョノ・ベーコン著、高須正和訳『遠くへ行きたければ、みんなで行け ～「ビジネス」「ブランド」「チーム」を変革するコミュニティの原則』を恵贈いただいた - YAMDAS現更新履歴 「Firefox」も「バージョン 100」に ～Chrome/Edgeに続く - 窓の杜 「Thunderbird 91.9.0」が公開 ～互換性維持のためにOpenPGP署名でSHA-1を一部許可 - 窓の杜 Lithium-ion recycler Li-Cycle lands $200 million to power future EVs – TechCrunch 「WebAssembly 2.0」に関する最初のワーキングドラフトが公開。整数における符号拡張命令、関数からの複数の戻り値などを拡張 － Publickey Bing Removed 143 Million ‘Pirate’ Site URLs Last Year * TorrentFreak 2022年4月に発生したアトラシアンのサービス停止に関するインシデント事後レビュー | Atlassian Japan 公式ブログ | アトラシアン株式会社 【PostgreSQL】date型の値から年・月・日を取得するextract関数 | プログラマーになった 「中卒」 男のブログ How the Open App Markets Act wants to remake app stores - The Verge GitHub - 01mf02/jaq: A jq clone focussed on correctness, speed, and simplicity : jq クローン。 Rust 実装 俺も、パソコン触って 40周年 - 電気ウナギ的○○ PostgreSQLでNOT NULL制約をつけたり外したり New AlloyDB for PostgreSQL frees you from legacy databases | Google Cloud Blog ［速報］Google、Amazon Auroraに対抗する高性能DB「AlloyDB for PostgreSQL」発表。通常のPostgreSQLよりOLTPが4倍高速、OLAPが100倍高速と － Publickey GitHub - Cveinnt/LiveTerm: 💻 Build terminal styled websites in minutes! 支払い区分の表記変更のお知らせ | さくらインターネット 映画をカラオケボックス配給してほしい｜塚本 牧生｜note GitHub ActionsにおけるStep/Job/Workflow設計論 Googleのロシア法人が銀行口座を押収されて破産 - GIGAZINE 国立国会図書館が所蔵する絶版本、PCやスマホで閲覧可能に　約153万点　きょうから - ITmedia NEWS 「シン・ウルトラマン」を観た - 電気ウナギ的○○ マイクロソフト、Webブラウザで3Dゲームがびゅんびゅん動く「Babylon.js 5.0」正式リリース、WebGPUにフル対応、iOS/Androidなどクロスプラットフォーム展開も － Publickey Red Hat Ansible Automation Platformのマネージドサービス、Microsoft Azure上で提供開始。クラウドもオンプレミスも構成管理可能 － Publickey F5、NGINXの開発チームをロシア国外へ移転させたことを報告。開発を立て直しリリースサイクルも元通りに － Publickey ［速報］「Flutter 3」登場、FlutterによるmacOSとLinuxアプリ開発が正式版に。Macのユニバーサルバイナリにも対応 － Publickey Cloudflare、CDNエッジで稼働するSQLiteベースのRDB「Cloudflare D1」発表。ユーザーの近接CDNエッジに自動でレプリカを分散配置、高速アクセスを実現 － Publickey ［速報］Dockerが「Docker Extensions」を発表。VMwareやRed Hat、RancherなどサードパーティがDocker Desktopにさまざまな追加機能を提供 － Publickey GOV.UK drops jQuery from their front end. GitHub Actions入門 ── ワークフローの基本的な構造からOIDCによる外部サービス認証まで - エンジニアHub｜Webエンジニアのキャリアを考える！ オンラインゲームでは、お互いの位置がだいぶ離れていても (日本とブラジルくらい) 何故素早く同期できるのですか？どのように通信しているのでしょうか？に対するNakamura Yutaさんの回答 - Quora Deno、Node.js、Cloudflare Workersなど、非Webブラウザ系JavaScriptランタイムのコード互換を目指す「Web-interoperable Runtimes Community Group」（WinterCG）が発足 － Publickey 日本の全エンジニアに捧ぐ！現在公開されているAPI一覧【2013年版】 | FINDJOB! Startup プロダクトバックログアイテムの分割方法 | Ryuzee.com 「PuTTY」が「Microsoft Store」に登場 ～ストアに蔓延する偽物対策か - 窓の杜 「GitHub」のMarkdownドキュメントで待望の数式表示がサポート - 窓の杜 「Python 3.9.13」が公開、シリーズ最後のバグフィックスリリース - 窓の杜 Google、古いガラケーの白黒絵文字をオマージュした「Noto Emoji」フォントを発表 - 窓の杜 「Zoom」が無料アカウント主催の全ミーティングを40分に制限 - 窓の杜 グーグル「従来の無償版G Suite」、非営利目的で利用継続可能に - ZDNet Japan 週休3日制をテストする組織が増加\u0026ndash;新しい働き方の可能性と課題 - ZDNet Japan "
    },
    {
      "title": "『ユニコーン企業のひみつ』読書会（1）",
      "section": "remark",
      "description": "アレな GAFA 礼賛本を読むくらいならこっちの方をお勧めする。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/competing-with-unicorns/",
      "published": "2022-05-21T11:28:24+00:00",
      "update": "2022-06-18T12:37:25+00:00",
      "content": "前にどっかで書いたような気がするが，遅まきながらプロジェクト・マネジメントの勉強を始めている。 といっても別にプロマネになりたいわけではなく，単に職場でマネジメントの観点で意見を求められることがあったので，そういう観点で見る目も養おうということで。 つっても PMBOK の基礎的な内容に留まっているが。 身も蓋もない言い方をするなら興味本位（笑）\nで，今回『ユニコーン企業のひみつ』という本を題材にした読書会を開催するというので，これまた興味本位で参加してみた。\n第1回『ユニコーン企業のひみつ』オンライン読書会 - connpass この本は知らなくても原著者の Jonathan Rasmusson1 という名前を聞いたら「あぁ『アジャイルサムライ』の人か」と思う人もいるかも知れない。 いや，私は読んでないけど。 ちなみに原書 “Competing with Unicorns” は2020年，今回の翻訳本『ユニコーン企業のひみつ』は2021年に出版されている。\n目次 『ユニコーン企業のひみつ』読書会（1） ← イマココ 『ユニコーン企業のひみつ』読書会（2） 「ユニコーン企業」とは 『ユニコーン企業のひみつ』の訳注によると，「ユニコーン企業」とは\n2013年にベンチャーキャリタリストの Aileen Lee が「ユニコーン企業」という概念を提唱したときの定義は、創業10年以内、評価額10億ドル以上、非上場、米国拠点のテック企業（当時は39社）。ユニコーンと呼ぶのは、その統計上の希少性を神話的な幻獣になぞらえたもの 『ユニコーン企業のひみつ』まえがきより だそうな。 ただ，この本ではもう少し緩い定義で\n本書で「ユニコーン企業」と言うとき、それは評価額が10億ドル規模の企業でありながら、スタートアップみたいに運営されている企業のことだと思ってほしい 『ユニコーン企業のひみつ』まえがきより としている。 この定義なら「Google、Amazon、Facebook、Spotify なんかがこれに該当する」（まえがき）と言えるだろう。\nなお「スタートアップ」の定義も\n本書においてスタートアップとは、50名未満の小さな企業を想定している 『ユニコーン企業のひみつ』まえがきより とだいぶ緩い。\n「スタートアップはプロダクトがすべて」 スタートアップを特徴づける説明がこれ。\nスタートアップはプロダクトがすべてだ。デモで見せるのはプロダクトだ。新しい顧客をひきつけるのもプロダクトだ。資金調達するのもプロダクトだし、学習するのもプロダクトを通じてだ 『ユニコーン企業のひみつ』1.1章より 故に「スタートアップはイテレーションを重ねる」（1.2章）ことになる。 これが既存のエンタープライズ企業との最大の違いだろう。 『ユニコーン企業のひみつ』ではエンタープライズを「期待に応じる機械」（1.4章）と呼びスタートアップを「学習する機械」（1.2章）と呼んでいる。\n「期待に応じる」ためには「プロジェクト駆動」が望ましい。 期待に応じる目標を掲げ，目標を達成するための KGI/KPI を評価しゴールを設定する。 コストを計上し期日を決め作業分割を行いリソース（予算や人員を含む）を確保してスケジュールやリスクの変動を管理（監視）する。 プロジェクトが設定するゴールへ計画通りに到達できたら成功だ。\nでもプロダクトを中心に据えるなら「プロジェクト駆動」はうまく行かない。 PDCA や OODA といったサイクルを回すにしても活動がプロジェクト単位で途切れてしまうので，とてもじゃないが「イテレーションを重ねる」ことはできない。 そこでスタートアップはチームに権限と自律性を与える「ミッション」で仕事を進める。\n「失敗はゲームの一部」 「プロジェクトとミッションってなにがちゃうねん」と思うだろう（実際に読書会でもそういう疑問は出た）。 『ユニコーン企業のひみつ』ではプロジェクトとミッションの違いを以下のようにまとめている。\nプロジェクト ミッション 予算がある チームの人数が予算 終わりがある 期間に定めがない 短期間 長期間 プロジェクトマネージャーがいる プロジェクトマネージャーがいない 開発だけして引き継ぐ 開発もメンテナンスもする 完成したら解散する チームは一緒のまま 計画にフォーカス 顧客にフォーカス 期待に応じることが価値 インパクトが価値 トップダウン ボトムアップ 『ユニコーン企業のひみつ』2.5章より もしプロジェクトからミッションへ切り替えたいならプロダクトに対する「成功」の定義も書き換える必要がある。\nプロダクト開発における成功とは「発見と学習」だ。最初のプロダクトをとにかく早く世に出すのもそのためだ。そしてこれを素早く、何度も何度も繰り返す。失策をおかすこともあるだろう。だが、リリースを重ねるごとにプロダクトは良くなっていく 『ユニコーン企業のひみつ』1.5章より プロダクト開発では失敗はゲームの一部だ。 [\u0026hellip;] プロダクト開発は一発勝負じゃない。初回のリリースは始まりに過ぎない 『ユニコーン企業のひみつ』1.5章より プロジェクトマネージャーなどいない ところで「プロジェクトマネージャーがいない」のにどうやって管理するねん，って思わなかった？ 私は思った。 でもプロジェクトじゃないんだからプロジェクトマネージャーがいないのは当たり前だよな。 その代わり重要なのが「プロダクトマネージャー」と「データサイエンティスト」だ。\nデータサイエンティストは8章で詳しく説明されるらしいので，とりあえずプロダクトマネージャーについて紹介すると\nプロダクトマネージャーは「このプロダクトは何をすべきか」について、信頼のおける情報源になることでプロダクトのデリバリーを導く。スクワッドと協力して戦略を定義し、ロードマップを策定し、機能の定義を考える。マーケティング、売上予測、損益計算の責任にも何らかの関わりを持つ 『ユニコーン企業のひみつ』3.3章より だそうな。 「スクワッドと協力して」というのがポイントだろう。 つまりプロダクトマネージャーはスクワッドの管理者ではないということだ。 故にプロダクトマネージャーはスクワッドに対して「指示」は行わない（アドバイスや提案はあり）。\nちなみに，この本で「スクワッド（Squad）」とは\n少人数で、職能横断（Cross-Function）の、自己組織化されたチームだ。 [\u0026hellip;] 自律した小さなチームはテック企業のあらゆる活動の中心だ。新規プロダクトの開発、新たな市場への参入、株式公開の準備。どの場合であっても、テック企業では自律した小さなチームがその中心にいる 『ユニコーン企業のひみつ』3.1章より と定義・解説されている2。 この定義を見て「公安9課」を連想したのは私だけじゃない筈（と思いたいw）。\nスクワッドが所属する企業に対して自律的に振る舞うためには，お互いに対等な信頼関係が必要だ。 この辺が一番難しいんじゃないかな，と個人的には思う。 そのためのヒントは3.7章に書かれている。\nGAFA 礼賛本を読むくらいなら というわけで，今回は3章まで読了。 ページ数が少ないので，多分あと2回ほどで終わると思う。 もしこの拙文を見て興味が湧いたなら手にとって読んでみてもいいだろう。\n買うなら版元で扱っている電子版がお勧め。 「プログラミング言語Go読書会」では紙の本にびっしり書き込みをしているが PDF なら書き込みもデジタルでできる3（笑）\nこの本を読んで「お父さん，明日からミッションを掲げてプロダクト駆動で頑張るぞ！」とは行かないかも知れないが，アレな GAFA 礼賛本を読むくらいならこっちの方をお勧めする。\n参考図書 ユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 Jonathan Rasmusson (著), 島田 浩二 (翻訳), 角谷 信太郎 (翻訳) オライリージャパン 2021-04-26 単行本（ソフトカバー） 4873119464 (ASIN), 9784873119465 (EAN), 4873119464 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元より電子版も出ている。 Google や Spotify のような「ユニコーン企業」はどのようにして「ミッション」を遂行しているのか。\nreviewed by Spiegel on 2022-05-21 (powered by PA-APIv5)\n攻殻機動隊 STAND ALONE COMPLEX 田中敦子 (出演), 阪脩 (出演), 大塚明夫 (出演), 山寺宏一 (出演), 仲野裕 (出演), 大川透 (出演), 山口太郎 (出演), 小野塚貴志 (出演), 玉川紗己子 (出演), 神山健治 (監督) (Release 2016-08-05) Prime Video B01JMEDX8A (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 「GHOST IN THE SHELL」とどっちが好きかと言われれば悩むところだが，アニメ版「攻殻機動隊」シリーズでは好きな作品。\nreviewed by Spiegel on 2022-05-21 (powered by PA-APIv5)\nAmazon に書かれている著者の経歴によると「世界最大級の革新的なテック企業が世界中にソフトウェアを届けることを支援してきた。エンジニアとしては、Spotifyのインテグレーションを支援した。対象プラットフォームはSony PlayStation、Facebook Messenger、Google Chromecast、iMessage。同様にBMW、Tesla、Fordの自動車にも統合した」とある。『ユニコーン企業のひみつ』では Spotify での経験が色濃く反映されている。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nスクワッドはかなり重要な概念なので3章を丸々使って解説されている。 Spotify においてスクワッドがどう機能しているかについてこれとかこれで紹介されている（いずれも15分弱の動画）。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUbuntu に標準で付いている Evince は PDF の任意の場所にメモを追加する程度はできる。このくらいの機能で十分だろう。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "『数学ガールの秘密ノート/丸い三角関数』を読む【再掲載】",
      "section": "remark",
      "description": "8年前の再掲載。いや Twitter で「三角関数」が流行ってると聞いたので乗っておかないと（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/mathgirl-note-circular-functions/",
      "published": "2022-05-19T11:40:50+00:00",
      "update": "2022-05-19T12:02:25+00:00",
      "content": "（この記事は8年ほど前に書いた記事を再構成して再掲載したものです。8年前の内容という点を考慮していただけるとありがたいです。いや Twitter で「三角関数」が流行ってると聞いたので乗っておかないとw）\nやぁ来た来た。 来ましたよ。 そもそも「丸い三角関数」なんてタイトルが面白くないわけがない。 おぢさん，最初からクライマックスですョ。 どのくらい面白かったかというと，読んでる途中でポリアの『いかにして問題をとくか』を Amazon に発注してしまうくらい面白かった（そういえば自前では持ってなかった）。\n今回はユーリちゃんのターンだね。 テトラちゃんは今回は自信喪失気味な感じだったし，ミルカさんは明らかに出番が少ない！ まぁミルカさんをメインにしたら回転行列の話から一気に群論まで行きそうな感じだけど（笑）\nなんでユーリちゃんかというと，私が三角関数を覚えたのがやっぱり中学生の頃だったから。 今回のユーリちゃんを見てると自分の子供時代を思い出して，なんか懐かしくなってしまうんだよなぁ。 ちなみに学校の授業でいつ三角関数を習ったのかは覚えてない。 少なくとも学校の授業よりは早く習得してたのは確か。 今の学校教育って，いつ三角関数を習うの？ 中学？ 高校？ まぁピタゴラスの定理を習ったら三角関数なんてすぐだよね。 ってことはやっぱり中学かな？\nなんで（授業よりも早く）三角関数を覚えたかったかというと，三角関数は物理，とりわけ天文学には必須の道具だったから（あとは微分方程式ね）。\n三角関数は空間をイメージしながら考えると楽に理解できる。 理解できると三角関数はとても楽しい。 私の場合は逆で，最初に天球上の星々のイメージがあって，そこから三角関数を学んだのでとても楽に覚えられた。\nたとえば第2章にリサージュ図形の話が出ている（ユーリちゃん回）。 作中ではオシロスコープの例が出てたけど，私達天文ファンはもっと身近なものを知っている。 それは天球上を移動する太陽や月や惑星たちだ。\nvia Analemma of the Sun | Flickr (György Soponyai, CC-BY-NC) これは一定の期間ごとに1年間かけて，同じ時刻，同じ場所，同じ方向にカメラを設置し太陽を重ね撮りで撮影したもの。 これをアナレンマ（Analemma）という。 リサージュ図形と似てるよね。 でもちょっと形が歪。 それは地球の自転軸が公転面に対して傾いていることと地球の公転軌道が円ではないことを示しているからだ1。\nvia Explanation about a celestial sphere in Japanese (cc-by-sa-2.5) つまりアナレンマは太陽の周りを回る地球の写像と言える。 三角関数を学べばこういう図形も比較的容易に理解できるようになる。 ねっ，面白いでしょ。\nそういえば第4章（これもユーリちゃん回）で「円周率を数える」実験をしているわけだけど，その中の問題4-1は，小学生の時にやったことがあるんだよね。 いわゆる「夏休みの自由研究」のネタに困って苦し紛れにやったやつだ。 当時はまだ筆算の割り算を覚えたてで，一生懸命計算したっけ（私は今だに「計算」が苦手である）。 今思い出せば「3.141」くらいまでは合ってたような気がするけどその先はグダグダだった。 まぁまだ誤差論も知らない小僧のやることだからね。 それでもそれを「自由研究」として受理してくれた当時の担任には感謝である。\n今回，特に感じたのは「僕」やミルカさんたちの背後にある「眼差し」だ。 それは他の「数学ガール」シリーズでも時々感じるものだけど，今回特にそれを感じたのは，子供時代の私がユーリちゃんに感情移入し，それを今の私が「見てる」からだと分かった。 私には子どもはいないけど，もし子どもがいたらきっと学校の授業参観でそういう目で子どもを見るんだろうなぁ，と思ったり。\nブックマーク 『数学ガールの秘密ノート／ベクトルの真実』で遊ぶ 『数学ガールの秘密ノート／行列が描くもの』を読んで子供の頃を思い出す 参考図書 数学ガールの秘密ノート／丸い三角関数 結城 浩 (著) SBクリエイティブ 2014-04-23 (Release 2015-04-18) Kindle版 B00W6NCLJM (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 丸と三角の楽しい関係。頑張れば小学生高学年でも大丈夫。\nreviewed by Spiegel on 2014-11-30 (powered by PA-APIv5)\n数学ガールの秘密ノート／ベクトルの真実 結城 浩 (著) SBクリエイティブ 2015-11-17 (Release 2015-12-03) Kindle版 B018VE46YW (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 図形（具象）と数式（抽象）の往復は楽しい。\nreviewed by Spiegel on 2016-03-04 (powered by PA-APIv5)\n数学ガールの秘密ノート／行列が描くもの 結城 浩 (著) SBクリエイティブ 2018-10-16 (Release 2018-10-17) Kindle版 B07JB2MSQT (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 三角関数，ベクトルときたら次は行列だよね。リサちゃん大活躍で嬉しい。\nreviewed by Spiegel on 2018-10-20 (powered by PA-APIv5)\nいかにして問題をとくか G．ポリア (著), 柿内賢信 (翻訳) 丸善出版 2022-03-25 (Release 2022-02-24) Kindle版 B09T94D62K (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; なんと！ Kindle 版が出た。ただしプリント・レプリカ形式なので見れる環境が限られる。残念ながら Kindle Cloud Reader では見れなかった。紙の本を持ってる人が念の為に買っておくのがいいかな（笑）\nreviewed by Spiegel on 2022-05-19 (powered by PA-APIv5)\n天体の位置計算 長沢 工 (著) 地人書館 1985-09-01 単行本 4805202254 (ASIN), 9784805202258 (EAN), 4805202254 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; B1950.0 分点から J2000.0 分点への過渡期に書かれた本なので情報が古いものもあるが，基本的な内容は位置天文学の教科書として充分通用する。\nreviewed by Spiegel on 2015-01-11 (powered by PA-APIv5)\n天体物理学 Arnab Rai Choudhuri (著), 森 正樹 (翻訳) 森北出版 2019-05-28 単行本 4627275110 (ASIN), 9784627275119 (EAN), 4627275110 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 興味本位で買うにはちょっとビビる値段なので図書館で借りて読んでいる。まえがきによると，この手のタイプの教科書はあまりないらしい。内容は非常に堅実で分かりやすい。理系の学部生レベルなら問題なく読めるかな。\nreviewed by Spiegel on 2019-11-13 (powered by PA-APIv5)\nもう少しヒントを言うと，黄道面に対して最大角度となる夏至・冬至と公転起動の遠日点・近日点は異なる，ということも考慮に入れるといいだろう。アナレンマは元々占星術の用語で日時計のメモリを指すものだったらしい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "ついに apt-key コマンドに「非推奨」のワーニングが",
      "section": "remark",
      "description": "しょうがない。 この機会に対応するか。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/apt-key-is-deprecated/",
      "published": "2022-05-06T09:10:02+00:00",
      "update": "2022-05-18T19:39:07+00:00",
      "content": "前回の続き。 Docker を Ubuntu にインストールするには以下の拙文が参考になる。\nUbuntu に Docker を入れる 簡単に説明すると\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - と電子署名検証用の OpenPGP 鍵をインポートした上で\n$ sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; とすれば (Ubuntu 22.04 LTS であれば) jammy 用のリポジトリが追加される。 実際には /etc/apt/sources.list.d/ ディレクトリにある archive_uri-https_download_docker_com_linux_ubuntu-jammy.list ファイルに\ndeb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable という内容が書かれている（筈）。\nところが今回 Ubuntu 22.04 LTS では，この状態で apt update すると\n$ sudo apt update ... ヒット:5 https://download.docker.com/linux/ubuntu jammy InRelease ... パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています... 完了 状態情報を読み取っています... 完了 パッケージはすべて最新です。 W: https://download.docker.com/linux/ubuntu/dists/jammy/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details. とワーニングが出る。 あぁ，ついに Ubuntu でもこのワーニングが出るようになったか。 今まで先延ばしにしてたからなぁ。 しょうがない。 この機会に対応するか。\nちなみに apt-key(8) のマニュアルには\nExcept for using apt-key del in maintainer scripts, the use of apt-key is deprecated. This section shows how to replace existing use of apt-key.\nIf your existing use of apt-key add looks like this:\nwget -qO- https://myrepo.example/myrepo.asc | sudo apt-key add - Then you can directly replace this with (though note the recommendation below):\nwget -qO- https://myrepo.example/myrepo.asc | sudo tee /etc/apt/trusted.gpg.d/myrepo.asc Make sure to use the \u0026ldquo;asc\u0026rdquo; extension for ASCII armored keys and the \u0026ldquo;gpg\u0026rdquo; extension for the binary OpenPGP format (also known as \u0026ldquo;GPG key public ring\u0026rdquo;). The binary OpenPGP format works for all apt versions, while the ASCII armored format works for apt version \u0026gt;= 1.4.\nRecommended: Instead of placing keys into the /etc/apt/trusted.gpg.d directory, you can place them anywhere on your filesystem by using the Signed-By option in your sources.list and pointing to the filename of the key. See sources.list(5) for details. Since APT 2.4, /etc/apt/keyrings is provided as the recommended location for keys not managed by packages. When using a deb822-style sources.list, and with apt version \u0026gt;= 2.4, the Signed-By option can also be used to include the full ASCII armored keyring directly in the sources.list without an additional file.\nvia apt-key(8) などと書かれている。 要するに /etc/apt/keyrings ディレクトリに公開鍵を ASCII Armor 形式のまま放り込んでしまえばいいのか？\nんー。 こんな感じかな。\n$ cd /etc/apt/keyrings $ sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o docker-key.asc ファイル名は適当。 念のため出力した docker-key.asc ファイルの中身を拙作 gpgpdump で覗いてみよう。\n$ gpgpdump -u -f docker-key.asc Public-Key Packet (tag 6) (525 bytes) Version: 4 (current) Public key creation time: 2017-02-22T18:36:26Z Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (4096 bits) RSA public encryption exponent e (17 bits) User ID Packet (tag 13) (43 bytes) User ID: Docker Release (CE deb) \u0026lt;docker@docker.com\u0026gt; Signature Packet (tag 2) (567 bytes) Version: 4 (current) Signiture Type: Positive certification of a User ID and Public-Key packet (0x13) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-512 (hash 10) Hashed Subpacket (33 bytes) Signature Creation Time (sub 2): 2017-02-22T19:34:24Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to certify other keys. Flag: This key may be used to sign data. Flag: This key may be used to encrypt communications. Flag: This key may be used to encrypt storage. Flag: This key may be used for authentication. Preferred Symmetric Algorithms (sub 11) (4 bytes) Symmetric Algorithm: AES with 256-bit key (sym 9) Symmetric Algorithm: AES with 192-bit key (sym 8) Symmetric Algorithm: AES with 128-bit key (sym 7) Symmetric Algorithm: CAST5 (128 bit key, as per) (sym 3) Preferred Hash Algorithms (sub 21) (4 bytes) Hash Algorithm: SHA2-512 (hash 10) Hash Algorithm: SHA2-384 (hash 9) Hash Algorithm: SHA2-256 (hash 8) Hash Algorithm: SHA2-224 (hash 11) Preferred Compression Algorithms (sub 22) (4 bytes) Compression Algorithm: ZLIB \u0026lt;RFC1950\u0026gt; (comp 2) Compression Algorithm: BZip2 (comp 3) Compression Algorithm: ZIP \u0026lt;RFC1951\u0026gt; (comp 1) Compression Algorithm: Uncompressed (comp 0) Features (sub 30) (1 bytes) Flag: Modification Detection (packets 18 and 19) Key Server Preferences (sub 23) (1 bytes) Flag: No-modify Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x8d81803c0ebfcd88 Hash left 2 bytes b2 c9 RSA signature value m^d mod n (4094 bits) Public-Subkey Packet (tag 14) (525 bytes) Version: 4 (current) Public key creation time: 2017-02-22T18:36:26Z Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) RSA public modulus n (4096 bits) RSA public encryption exponent e (17 bits) Signature Packet (tag 2) (1086 bytes) Version: 4 (current) Signiture Type: Subkey Binding Signature (0x18) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (9 bytes) Signature Creation Time (sub 2): 2017-02-22T18:36:26Z Key Flags (sub 27) (1 bytes) Flag: This key may be used to sign data. Unhashed Subpacket (553 bytes) Issuer (sub 16): 0x8d81803c0ebfcd88 Embedded Signature (sub 32) (540 bytes) Signature Packet (tag 2) (540 bytes) Version: 4 (current) Signiture Type: Primary Key Binding Signature (0x19) Public-key Algorithm: RSA (Encrypt or Sign) (pub 1) Hash Algorithm: SHA2-256 (hash 8) Hashed Subpacket (6 bytes) Signature Creation Time (sub 2): 2017-02-22T18:36:26Z Unhashed Subpacket (10 bytes) Issuer (sub 16): 0x7ea0a9c3f273fcd8 Hash left 2 bytes d5 60 RSA signature value m^d mod n (4095 bits) Hash left 2 bytes f2 b8 RSA signature value m^d mod n (4095 bits) もともと /etc/apt/trusted.gpg ファイルに入ってる公開鍵は\n$ apt-key list Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)). /etc/apt/trusted.gpg -------------------- pub rsa4096 2017-02-22 [SCEA] 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid [ 不明 ] Docker Release (CE deb) \u0026lt;docker@docker.com\u0026gt; sub rsa4096 2017-02-22 [S] ... となっているので，同じ鍵ということでいいよね。\nここで /etc/apt/sources.list.d/ ディレクトリにある archive_uri-https_download_docker_com_linux_ubuntu-jammy.list ファイルの中身を以下のように書き換える。\ndeb [arch=amd64 signed-by=/etc/apt/keyrings/docker-key.asc] https://download.docker.com/linux/ubuntu jammy stable ポイントは signed-by オプション。 このオプションに先程の公開鍵ファイルをフルパスで指定する。 add-apt-repository コマンドを使うなら\nsudo add-apt-repository \u0026#34;deb [arch=amd64 signed-by=/etc/apt/keyrings/docker-key.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; という感じだろうか。これでもう一度 apt update すると\n$ sudo apt update ... ヒット:5 https://download.docker.com/linux/ubuntu jammy InRelease ... パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています... 完了 状態情報を読み取っています... 完了 パッケージはすべて最新です。 よし。 ワーニングは出なくなったな。\nなんでこんな面倒くさいことをするかというと，もし秘密鍵が漏洩したサードパーティの公開鍵がひとつでも APT の鍵束に入っていると，その鍵を使って malware 入れ放題になる可能性があるからだ1。 サードパーティの公開鍵を分離し signed-by オプションで公開鍵が作用するパッケージを限定することでリスクが低減されることを狙っている。 簡単に言うと「もうサードパーティの公開鍵は APT で管理しないから自分でやれ！ 管理する仕組みは提供するから」ということである。 まぁ，苦肉の策って感じだけどね（笑）\n最後に /etc/apt/trusted.gpg ファイルを削除するか他所に退避させておけば問題ないであろう。\n【2022-05-19 追記】 pgAdmin のアップグレード pgAdmin も Docker と同じくサード・パーティ公開鍵の登録が必要なので以下の手順で公開鍵とリポジトリの登録を行う。\n$ sudo curl -fsSL https://www.pgadmin.org/static/packages_pgadmin_org.pub -o /etc/apt/keyrings/pgadmin-4-key.asc $ sudo sh -c \u0026#39;echo \u0026#34;deb [signed-by=/etc/apt/keyrings/pgadmin-4-key.asc] https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main\u0026#34; \u0026gt; /etc/apt/sources.list.d/pgadmin4.list\u0026#39; これで無問題。\nブックマーク Ubuntu Manpage: apt-key - APT キー管理ユーティリティ 非推奨となったapt-keyの代わりにsigned-byとgnupgを使う方法 - 2021-05-05 - ククログ 参考図書 暗号化 プライバシーを救った反乱者たち スティーブン・レビー (著), 斉藤 隆央 (翻訳) 紀伊國屋書店 2002-02-16 単行本 4314009071 (ASIN), 9784314009072 (EAN), 4314009071 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！\nreviewed by Spiegel on 2015-03-09 (powered by PA-APIv5)\nPGP―暗号メールと電子署名 シムソン ガーフィンケル (著), Garfinkel,Simson (原著), ユニテック (翻訳) オライリー・ジャパン 1996-04-01 単行本 4900900028 (ASIN), 9784900900028 (EAN), 4900900028 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 良書なのだが，残念ながら内容が古すぎた。 PGP の歴史資料として読むならいいかもしれない。\nreviewed by Spiegel on 2014-10-16 (powered by PA-APIv5)\n暗号技術入門 第3版　秘密の国のアリス 結城 浩 (著) SBクリエイティブ 2015-08-25 (Release 2015-09-17) Kindle版 B015643CPE (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。\nreviewed by Spiegel on 2015-09-20 (powered by PA-APIv5)\nOpenPGP 鍵の信用モデルは「信用の輪（web of trust）」と呼ばれるもので，ユーザ同士の peer で直接的な関係が鍵管理の前提になっている。このため不特定のユーザの間ではどうしても鍵管理が緩くなってしまう。この辺は不特定ユーザを前提にした X.509 とは思想が異なる。 OpenPGP 鍵の信用モデルについては拙文「OpenPGP の電子署名は「ユーザーの身元を保証し」ない」あたりを参考にしていただけるとありがたい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "Ubuntu 22.04 LTS へのアップグレード",
      "section": "remark",
      "description": "今回は特に大きな問題はなし。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/upgrade-ubuntu-22_04-lts/",
      "published": "2022-05-06T09:07:48+00:00",
      "update": "2022-05-22T07:36:51+00:00",
      "content": "Ubuntu が「22.04 LTS にアップグレードせんのん？（← 超意訳）」と煩いので GW で余裕のある間にアップグレードすることにした。 今回は特に（少なくとも最近の機械では）日本語周りで不具合の話も聞かなかったし。\nUbuntu 22.04 リリースノート 今回は特に大きな問題はなし。\n日本語入力周りは問題なく動いている。 Ubuntu コミュニティのご尽力に感謝 21.10 から Firefox は Snap 版になっているのに何故か言語パッケージが APT で提供されているというチグハグな状態だったが，今回で統一された？ Thunderbird は相変わらず GnuPG の鍵束を認識してくれない。そろそろ捨てようか LibreOffice は 7.3 系。 OpenPGP 鍵で暗号化したファイルもちゃんと開けるし，問題ないだろう。 Snap 版は相変わらず評判が悪いようだ（笑） KeePassXC は既に jammy リポジトリがある。依存ライブラリのバージョンが違うらしい pgAdmin4 は jammy リポジトリがまだ用意されてない模様。こちらはしばらく様子見か Node.js は NodeSource で v18 系をインストールしてみた。今のところは問題なし。なにかあれば v16 (LTS) に戻すつもり いつものように GnuPG が古い $ gpg --version gpg (GnuPG) 2.2.27 libgcrypt 1.9.4 Copyright (C) 2021 Free Software Foundation, Inc. License GNU GPL-3.0-or-later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: /home/username/.gnupg サポートしているアルゴリズム: 公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA 暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 圧縮: 無圧縮, ZIP, ZLIB, BZIP2 まぁ v2.3 系でないのはしょうがないにしても，せめて今の LTS 最新版（v2.2.34）にしてくれよ orz\nOpenSSH と OpenSSL $ ssh -V OpenSSH_8.9p1 Ubuntu-3, OpenSSL 3.0.2 15 Mar 2022 OpenSSL は v3.0.3 のセキュリティ・アップデートに対応したバックポート・パッチが出ているようだ。 相変わらず分かりにくい。 普通にバージョンを上げてくれんもんかねぇ。\nちなみに GnuPG の gpg-agent との連携は問題なかった。\nOpenSSH の認証鍵を GunPG で作成・管理する gpg-agent の設定： GnuPG in Ubuntu Docker と apt-key これに関しては記事を分けた。 後半へ続く（笑）\nブックマーク Ubuntu 22.04 その58 - Ubuntu 22.04 LTSがリリースされました・ディスクイメージのダウンロード - kledgeb\nUbuntu 22.04 その59 - Ubuntu 22.04 LTSの新機能と変更点 - kledgeb\nUbuntu 22.04 その60 - Ubuntu 22.04 LTSの既知の問題 - kledgeb\nUbuntu 21.10 その89 - Ubuntu 22.04 LTSへのアップグレードは数日中に提供予定 - kledgeb\nUbuntu 20.04 その240 - Ubuntu 22.04 LTSへのアップグレード提供時期について - kledgeb\nCanonical、「Ubuntu 22.04 LTS」の提供を開始 ～WSLパッケージもストアに登場 - 窓の杜\nUbuntu 22.04 をインストールしたら設定すること 10 ヶ条\nUbuntu 20.04にNode.jsをインストールする方法 | DigitalOcean\nUbuntu 21.10 その90 - Ubuntu 22.04 LTSへアップグレードするには・アップグレードの注意事項 - kledgeb\nUbuntu 22.04 その63 - Ubuntu 22.04 LTSで行われたRaspberry Piのサポート改善 - kledgeb\nUbuntu 22.04 その104 - 日付やタイムゾーンを自動設定するには・時間の12時間制と24時間制を切り替えるには - kledgeb\nUbuntu 22.04 その102 - ユーザーアカウントを追加するには・ユーザーアカウントを削除するには - kledgeb\nUbuntu 22.04 その101 - ユーザーアカウントの各種設定を変更するには・ユーザーアカウントのパスワードや自動ログイン設定を変更するには - kledgeb\nUbuntu 22.04 その100 - UIの言語を変更するには・言語環境に足りないソフトウェアがないかチェックするには - kledgeb\nUbuntu 22.04 その99 - 日本語入力（Mozc）の設定をカスタマイズして作業効率を上げよう - kledgeb\nUbuntu 22.04 その95 - ディスプレイサーバーを切り替えるには・XorgとWayland - kledgeb\nUbuntu 22.04 その91 - 目への負担を軽減する夜間モードを設定するには - kledgeb\nUbuntu 22.04 その90 - ディスプレイの解像度やHiDPIの設定をカスタマイズする・マルチディスプレイを設定する - kledgeb\nUbuntu 22.04 その89 - デバイスのバッテリー残量の確認やパフォーマンスを調整するには・その他電源に関する設定を変更するには - kledgeb\nUbuntu 22.04 その67 - Active Directoryのサポート強化とADsys - kledgeb\nUbuntu 22.04 LTSのインストール その7 - UEFIブートマネージャーの確認 〜 MOKの登録 - kledgeb\nUbuntu 22.04 LTS 日本語 Remix リリース | Ubuntu Japanese Team\nUbuntu 22.04 その106 - Ubuntu 22.04 LTS 日本語 Remixがリリースされました・ディスクイメージのダウンロード - kledgeb Ubuntu 22.04 その120 - UbuntuのブートローダーをBoot Repairで修復するには・Ubuntuが起動しないトラブルを解決 - kledgeb\nUbuntu 22.04 その125 - 強化されたスクリーンキャプチャー機能・スクリーンキャストも利用可能に - kledgeb\nUbuntu 22.04 その133 - ファイルアプリとDropboxを連携させてDropboxを便利に活用しよう - kledgeb\nUbuntu 22.04 その136 - 画面からはみ出して移動できなくなったウィンドウを移動するには・サイズが小さすぎてサイズ調整できなくなったウィンドウのサイズを調整するには - kledgeb\nUbuntu 22.04 その138 - インジケーターからGNOME Shell拡張を管理するには・Extension Listの使い方 - kledgeb\nUbuntu 22.04 その139 - インジケーターからマウントされたボリュームを開いたりアンマウントするには・Removable Drive Menuの使い方 - kledgeb\nUbuntu 22.04 その140 - インジケーターからサウンドデバイスやオーディオプロファイルを切り替えるには・Sound Input \u0026amp; Output Device Chooserの使い方 - kledgeb\nUbuntu 22.04 その141 - クリップボードの履歴を取りクリップボードの内容を再利用するには・Clipboard Indicatorの使い方 - kledgeb\nUbuntu 22.04 その144 - デスクトップアイコンをもっと細かくカスタマイズするには・ボリュームやアイコン表示のカスタマイズなど - kledgeb\n"
    },
    {
      "title": "波乗りプログラマ",
      "section": "remark",
      "description": "競馬の予想屋に現金を預けてはいけない（笑）",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/programmer-the-surfer/",
      "published": "2022-05-05T01:49:50+00:00",
      "update": "2022-05-05T01:52:43+00:00",
      "content": "（この記事は Twitter に書き散らしたものを再構成したものです）\n起点はここから。\n最近のプログラミング言語はなんだかファッションみたくトレンド指向が強い気がしてる。先日の飽きたの記事の人もそうだけど、皆トレンドに遅れを取られまいと必死になってしまってるんじゃなかろうか。\n\u0026mdash; mattn (@mattn_jp) May 3, 2022 この tweet からの一連は実際に Twitter で見ていただくとして，プログラミング言語の「トレンド」はだいたい2,3年おきに入れ替わる。 学生にとって3年は長い時間かもしれないが，仕事してる人にとって3年は短い。 このタイムスケールで「トレンド」を追いかけることに意味は殆どないと断言してしまおう（笑）\nネットでも「COBOL は終わった」「まだだ！まだ終わらんよ」みたいな話はしょっちゅう聞くし，私自身「Java はやめておけ」と言って憚らない人間だが，実際の世の中は汎用機は捨てても COBOL は捨てられないシステムも多いし，私も今だに Java コードで四苦八苦している。 こういった仕事がなくなることは短期的にはないだろう。 だからといってそれらの言語を若い人に勧めるかというと，それは別の話。\nyomoyomo さんの翻訳記事に「プログラミングを独習するには10年かかる」というのがある。 20年以上前の Java に関する記事だが主な主張に関しては他の言語どころか他の業界に置き換えても同じだろう。\n研究者 (Hayes, Bloom) によると、チェス、作曲、絵画、ピアノ演奏、水泳、テニス、そして神経心理学や位相幾何学の研究を含む、広範な分野のいずれについても、専門技術を身につけるにはおよそ10年かかるそうだ。近道など実在しないようなのだ。4歳にして音楽の神童だったモーツァルトでさえ、超一流の楽曲を作り出すまでに13年以上を要している。別のジャンルになるが、ビートルズが突如現れナンバーワンヒットを連発し、エド・サリバン・ショーに出演したのは1964年だった。しかし、彼らは1957年からリバプールやハンブルグの小さなクラブで演奏していたわけで、また彼らは初期から大衆の支持を獲得したが、彼らがはじめて批評的にも大きな成功を得た『サージェント・ペパーズ』がリリースされたのは1967年である。サミュエル・ジョンソンは、「どんな分野であれ、生涯にわたる努力なくして優れたものには達し得ない。それよりも安い代償で手に入れることはできないのだ」と、それには十年以上かかると考えた。またチョーサーも「人生はとても短く、技を習得するにはとても時間がかかる」と嘆いている。 プログラミングを独習するには10年かかるより この記事を勝手に読み替えるなら「仕事でプログラミング言語を習得し使いこなすにはそのくらいのタイムスケールで考えなければならない」ということだろう。 言い方を変えるなら，たかが2,3年の「トレンド」で言語を評価するなどナンセンスである。\n10年というのは人生の「就労時代」の1/4から1/3の期間に相当する。 でも「トレンド」で考えるならその10年の間に最低でも2回は入れ替わりがあるということになる。 如何に刹那的か分かるだろう。\nもちろん，どの業界でも「波の最先端」は常に意識して情報を仕入れていく必要がある。 でもその最先端に立っている人を羨み波の尻尾を必死に追いかけるだけでは何も身につかない。 「鶏口となるも牛後となるなかれ」とはよく言ったものである（笑）\n「推測するな計測せよ」の IT 業界では広く集めた「情報」を実際に試して「技能（スキル）」として深堀りし「技術」として昇華していかなければならない。\n技能はモノに付くが技術はヒトに付く これは私がペーペーの新人の頃に当時のボスに叩き込まれた言葉だ。 企業は技能を求めるが，最終的に「個人」に残るのは技術だけだ。 当然ながら辿り着くまでには時間がかかるし，明確なゴールもない。\n某恋愛ラノベ作品に「お金がなければ浮気もできない」というフレーズがあって思わず笑ってしまったが，お金で買える最も価値あるものは自由と時間である。 職業ソフトウェア・エンジニアはプログラミングを「技術」として身に付けるために時間をかけるし，その時間を稼ぐために少なくないお金を使う1。\nメディアは「波」のさきっちょしか見ないし，さらにその先は語れない。 たかが3年先の予測さえ外すのがメディアである。 競馬の予想屋に現金を預けてはいけない（笑）\n桑田佳祐 – 波乗りジョニー（Full ver.） - YouTube ブックマーク プログラミング言語との付き合い方 参考図書 アプレンティスシップ・パターン　―徒弟制度に学ぶ熟練技術者の技と心得 (THEORY/IN/PRACTICE) Dave H. Hoover (著), Adewale Oshineye (著), 柴田 芳樹 (翻訳) オライリージャパン 2010-07-08 単行本（ソフトカバー） 4873114608 (ASIN), 9784873114606 (EAN), 4873114608 (ISBN) 出版元でデジタル版を購入可能。いわゆる「徒弟制度」を参考に「技術」を習得するための考え方を示す本。なんだけど，まだ読み終わってない。\nreviewed by Spiegel on 2022-05-05 (powered by PA-APIv5)\nユニコーン企業のひみつ ―Spotifyで学んだソフトウェアづくりと働き方 Jonathan Rasmusson (著), 島田 浩二 (翻訳), 角谷 信太郎 (翻訳) オライリージャパン 2021-04-26 単行本（ソフトカバー） 4873119464 (ASIN), 9784873119465 (EAN), 4873119464 (ISBN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 版元より電子版も出ている。 Google や Spotify のような「ユニコーン企業」はどのようにして「ミッション」を遂行しているのか。\nreviewed by Spiegel on 2022-05-21 (powered by PA-APIv5)\n波乗りジョニー 桑田佳祐 (メインアーティスト) TAISHITA 2001-07-04 (Release 2019-12-20) MP3 ダウンロード B082FWNFPG (ASIN) 評価\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; 個人的にカラオケ定番曲のひとつ。桑田佳祐さんの曲は音域が合ってるみたいで歌いやすくてよい。\nreviewed by Spiegel on 2022-05-05 (powered by PA-APIv5)\n考えてみたら，自由と時間を買うためにお金を稼ぐのに，お金を得るために自分の時間を売り飛ばすのは本末転倒だよな（笑） まぁ，私達ビンボー人はお金がないと死んじゃうからな。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    },
    {
      "title": "TechCrunch Japan 終了後の後始末",
      "section": "remark",
      "description": "翻訳記事 URL を可能な限り原文記事 URL に書き換えてみる。",
      "author": "Spiegel",
      "license": "http://creativecommons.org/licenses/by-sa/4.0/",
      "url": "https://text.baldanders.info/remark/2022/05/garbage-collection/",
      "published": "2022-05-04T07:03:59+00:00",
      "update": "2022-05-04T07:04:24+00:00",
      "content": "2月に TechCrunch Japan が終了してバックナンバーも残さず消滅する話を書いた。 んで，実際に GW 中にサイトが消滅したわけだが，以前の URL を叩いてみたところ 404 ではなく本家 TechCrunch にリダイレクトされるようだ。\nいや，そこまでしてくれるなら，せめて翻訳記事は本家の原文記事にリダイレクトしてくれよ orz\nまぁ，愚痴ってもしょうがない。 こちらで可能な限り URL の書き換えを試みることにしよう。\nまずこのブログ・サイトの作業リポジトリ上で TechCrunch Japan の URL がどのくらいあるか軽く grep してみる1。\n$ grep -c \u0026#34;jp\\.techcrunch\\.com\u0026#34; \u0026#34;content/**/*.md\u0026#34; 1121 おぅふ。 アホほどあるがな orz\nTechCrunch Japan 記事の URL を機械的に変換できるか たとえば TechCrunch Japan 記事の URL を\nhttps://jp.techcrunch.com/2020/08/14/2020-08-13-instagram-delete-photos-messages-servers/\nとする。 この記事に対する原文記事の URL は\nhttps://techcrunch.com/2020/08/13/instagram-delete-photos-messages-servers/\nである。 ドメインが jp.techcrunch.com → techcrunch.com なのは当然として\n翻訳記事と原文記事では URL パスの日付部分が違う 原文記事の日付は翻訳記事の slug に含まれている 日付部分を除く slug の文字列は翻訳記事と原文記事で同じ これくらいなら正規表現を使った置換処理で何とかなりそうだ。 最近のテキスト・エディタは置換処理で正規表現が使えるものが多いが，私が愛用している VS Code でも正規表現を使った一括置換が可能である。\nVisual Studio Codeを用いた簡単な正規表現検索 - Qiita 例外 (AMP) を潰す 私の作業環境で2箇所ほど例外というか間違いがあって\nhttps://jp.techcrunch.com/2017/12/12/2017-12-11-some-hp-laptops-are-hiding-a-deactivated-keylogger/amp/ https://jp.techcrunch.com/2020/01/03/2020-01-02-ex-google-policy-chief-dumps-on-the-tech-giant-for-dodging-human-rights/amp/?__twitter_impression=true などと，うっかり AMP 用の URL を載せちゃったみたいで，しかも片方は変なパラメータがくっついている。 これらも機械的に置換できなくはないのだが，2箇所だけだし，手作業で原文記事の URL に書き換えた。\nAMP ページはマジで滅びて欲しい。 なんでこんな下らないことで Google に気を使わにゃならんの。 メディアが気を遣うべき相手は私ら閲覧者だろうが。 本末転倒だよ。\nあと，古い URL でスキーマが HTTP のままになってるのが結構あったので，これは http://jp.techcrunch.com → https://jp.techcrunch.com に一括置換した。\nSlug パターン 前節の例外を排除したことで TechCrunch Japan 記事のURL\nhttps://jp.techcrunch.com/yyyy/mm/dd/slug/\nのうち slug 部分にのみ注目すればよくなった。 この Slug 部分も複数のパターンが見受けられるので整理しておく\nパターン1: 日付情報 yyyy-mm-dd を含む Slug 最初に挙げた例の通り yyyy-mm-dd-originalslug に要素分解できるパターン。 このパターンには別のバリエーションがあって\nhttps://jp.techcrunch.com/2020/07/15/x2020-07-14-harvard-mit-sue-ice-student-visas-rule/ https://jp.techcrunch.com/2020/11/21/https-techcrunch-com-2020-11-20-google-facebook-and-twitter-threaten-to-leave-pakistan-over-censorship-law/ のように日付情報の前に余分な文字列がくっついている。 2番目のとか原文記事の URL そのままぢゃん。 「なにすんねん」ってツッコんじゃったよ（笑）\nパターン2: 日付情報 yyyymmdd を含む Slug 以下のような URL パターン：\nhttps://jp.techcrunch.com/2017/09/13/20170912new-bluetooth-vulnerability-can-hack-a-phone-in-ten-seconds/ https://jp.techcrunch.com/2016/07/08/automotive-fortune-tesla20160706tesla-says-drivers-using-autopilot-remain-safer-than-regular-drivers/ パターン1のハイフンが抜けた状態。\nパターン3: Slug に日付情報がない https://jp.techcrunch.com/2021/06/10/netflix-cowboy-bebop-streaming-this-fall/ jp.techcrunch.com → techcrunch.com と置換するだけで行けるかなぁと思ったが駄目だった（本家サイトが404になる）。 原文記事の日付情報が得られないので置換不可。\nパターン4: Slug がパーセント・エンコーディングされている https://jp.techcrunch.com/2017/03/13/%e3%80%8c%e6%b3%95%e4%bb%a4%e4%b8%8a%e9%81%95%e5%8f%8d%e3%81%ae%e5%8f%af%e8%83%bd%e6%80%a7%e3%80%81%e5%80%ab%e7%90%86%e7%9a%84%e3%81%ab%e3%82%82%e5%95%8f%e9%a1%8c%e3%80%8ddena%e3%81%8cwelq%e5%95%8f/ 多分，というか間違いなく日本版オリジナル記事だよね。 これは置換対象外とした。\n置換用正規表現 というわけで，今回はパターン1と2のみが対象となる。 置換処理は VS Code を使っている。\nパターン1の検索・置換正規表現は以下の通り。\n正規表現 検索 https://jp\\.techcrunch\\.com/\\d{4}/\\d{2}/\\d{2}/.*(\\d{4})-(\\d{2})-(\\d{2})-(.+)/ 置換 https://techcrunch.com/$1/$2/$3/$4/ 対象ファイル *.md パターン2の検索・置換正規表現は以下の通り。\n正規表現 検索 https://jp\\.techcrunch\\.com/\\d{4}/\\d{2}/\\d{2}/.*(\\d{4})(\\d{2})(\\d{2})(.+)/ 置換 https://techcrunch.com/$1/$2/$3/$4/ 対象ファイル *.md もう少し頑張ればひとつにまとめられたかもしれないが，副作用が出るのが嫌だったので分けた。 これで未変換の TechCrunch Japan 記事の URL は118個まで減ったが，今のところ，これ以上は無理なので，放置ということで。\nどっとはらい\nブックマーク 基本的な正規表現一覧 | murashun.jp 私の環境では mattn/jvgrep を grep に alias して使っている。ファイル指定を \u0026quot;content/**/*.md\u0026quot; などと再帰的に指定できるのが嬉しい。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"
    }
  ]
}
