<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2017-10-29:/</id>
	<updated>2017-10-29T16:22:37+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.30.2</generator>

	
	<entry>
		<title>Twitter Card メタデータに対応した - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/10/twitter-card-metadata/" />
		<id>tag:text.Baldanders.info,2017-10-29:/remark/2017/10/twitter-card-metadata/</id>
		<published>2017-10-29T16:00:38+09:00</published>
		<updated>2017-10-29T16:00:38+09:00</updated>
		<summary>もう Semantic Web なんか誰も見向きもしなくなってるみたいだし， Web コンテンツを解析する手段は AI 技術を利用したものへシフトしてるようだし，もう（どうでも）いいかな，と。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;なんとなく思いついてこのブログをいわゆる “&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview&#34; title=&#34;Summary card — Twitter Developers&#34;&gt;Twitter Card&lt;/a&gt;” に対応させた。&lt;/p&gt;

&lt;p&gt;実は &lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview&#34; title=&#34;Summary card — Twitter Developers&#34;&gt;Twitter Card&lt;/a&gt; が登場し始めたときに Tumblr などで適用していたのだが，あまりに酷い仕様で &lt;a href=&#34;https://validator.w3.org/&#34; title=&#34;The W3C Markup Validation Service&#34;&gt;HTML Validator&lt;/a&gt; にかけるとエラーの嵐になるし，そもそも Semantic Web を無視した設計に腹が立って忌避していたのだ。
しかし，まぁ，もう Semantic Web なんか誰も見向きもしなくなってるみたいだし， Web コンテンツを解析する手段は AI 技術を利用したものへシフトしてるようだし，もう（どうでも）いいかな，と。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview&#34; title=&#34;Summary card — Twitter Developers&#34;&gt;Twitter Card&lt;/a&gt; の仕様も随分シンプルになった。
まず，カードのタイプが以下の4種類のみになった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary&#34; title=&#34;Summary card — Twitter Developers&#34;&gt;Summary card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary-card-with-large-image&#34; title=&#34;Summary with large image — Twitter Developers&#34;&gt;Summary with large image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/player-card&#34; title=&#34;Player card — Twitter Developers&#34;&gt;Player card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/app-card&#34; title=&#34;App card — Twitter Developers&#34;&gt;App card&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/player-card&#34; title=&#34;Player card — Twitter Developers&#34;&gt;Player card&lt;/a&gt; は動画やスライドショウのページ用， &lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/app-card&#34; title=&#34;App card — Twitter Developers&#34;&gt;App card&lt;/a&gt; はアプリページ用なので，それ以外の Web ページでは &lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary&#34; title=&#34;Summary card — Twitter Developers&#34;&gt;Summary card&lt;/a&gt; か &lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary-card-with-large-image&#34; title=&#34;Summary with large image — Twitter Developers&#34;&gt;Summary with large image&lt;/a&gt; を選択することになる。
&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary-card-with-large-image&#34; title=&#34;Summary with large image — Twitter Developers&#34;&gt;Summary with large image&lt;/a&gt; はアイキャッチ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ec1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ec1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 用の大きめの画像（300×157から4096×4096）を含む Card で，メディア・サイトなどが多用するあの&lt;strong&gt;ウザい&lt;/strong&gt;やつである。
&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary-card-with-large-image&#34; title=&#34;Summary with large image — Twitter Developers&#34;&gt;Summary with large image&lt;/a&gt; にしないのなら &lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary&#34; title=&#34;Summary card — Twitter Developers&#34;&gt;Summary card&lt;/a&gt; を選択する。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/summary&#34; title=&#34;Summary card — Twitter Developers&#34;&gt;Summary card&lt;/a&gt; で必須のメタデータは以下の2つである。
これを指定しないとカードが表示されない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;twitter:card&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;twitter:title&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的には &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 要素を使って以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;twitter:card&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;summary&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;twitter:title&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Codic API を利用するパッケージを作ってみた — プログラミング言語 Go | text.Baldanders.info&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかしこのままではページの説明（description）やアイコン画像が表示されないため（何故 optional なのに無理くり表示しようとするのだろう），以下のメタデータも追加する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;twitter:description&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;twitter:image&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;画像には144×144から4096×4096までのサイズが使える。
これらを合わせると以下の記述が最低限必要と言える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;twitter:card&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;summary&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;twitter:title&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Codic API を利用するパッケージを作ってみた — プログラミング言語 Go | text.Baldanders.info&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;twitter:description&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;spf13/viper を使ってみたかったのだ。&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;twitter:image&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://text.baldanders.info//images/attention/go-code.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上のメタデータを &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 要素内に設置する。
これで以下のように表示される（筈）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/37949847556/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4510/37949847556_0867f5741b_o.png&#34; srcset=&#34;https://farm5.staticflickr.com/4510/37949847556_0867f5741b_o.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Twitter Card: Summary&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/37949847556/&#34;&gt;Twitter Card: Summary&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;以前は &lt;code&gt;twitter:image&lt;/code&gt; 等を property-content として設定させようとしていたが（これのせいで &lt;a href=&#34;https://validator.w3.org/&#34; title=&#34;The W3C Markup Validation Service&#34;&gt;HTML Validator&lt;/a&gt; がエラーを吐いていた），さすがに改心したようである（笑）&lt;/p&gt;

&lt;p&gt;サイトのオーナーやページの作成者が Twitter ユーザの場合は以下のメタデータも使える。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;twitter:site&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;twitter:creator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これも同じように&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;twitter:site&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;@spiegel_2007&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;twitter:creator&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;@spiegel_2007&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすればよい。
カードの見た目には全く関係ないが Twitter アナリティクスか何かで使うのだろう，多分。&lt;/p&gt;

&lt;p&gt;メタデータの幾つかは &lt;a href=&#34;http://ogp.me/&#34; title=&#34;The Open Graph protocol&#34;&gt;OGP&lt;/a&gt; の語彙と置き換えることができる。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;http://ogp.me/&#34; title=&#34;The Open Graph protocol&#34;&gt;OGP&lt;/a&gt; は Facebook が最初に考えた仕様で，元々はネット上のコンテンツと Facebook のアプリを関連付けて制御する仕組みだったのだが&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/rdfa/ogp.svg&#34;&gt;&lt;img src=&#34;http://www.baldanders.info/spiegel/archive/rdfa/ogp.svg&#34; srcset=&#34;http://www.baldanders.info/spiegel/archive/rdfa/ogp.svg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Open Graph の相関図&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/rdfa/ogp.svg&#34;&gt;Open Graph の相関図&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;RDF/RDFa の仕様の一部を借用した大変筋の悪いもので，本来の目的は明後日方向に飛んでいき，現在は &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 要素にメタデータを記述するための迂遠な手段に堕している&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:rdfa1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:rdfa1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
ただし &lt;a href=&#34;http://ogp.me/&#34; title=&#34;The Open Graph protocol&#34;&gt;OGP&lt;/a&gt; で記述したメタデータを参照するサービスは多いため，今だに SEO 対策として用いられているようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview&#34; title=&#34;Summary card — Twitter Developers&#34;&gt;Twitter Card&lt;/a&gt; のメタデータと置き換え可能な &lt;a href=&#34;http://ogp.me/&#34; title=&#34;The Open Graph protocol&#34;&gt;OGP&lt;/a&gt; の述語を以下に示す。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview&#34; title=&#34;Summary card — Twitter Developers&#34;&gt;Twitter Card&lt;/a&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;&lt;a href=&#34;http://ogp.me/&#34; title=&#34;The Open Graph protocol&#34;&gt;OGP&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;twitter:card&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;og:type&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;twitter:description&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;og:description&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;twitter:title&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;og:title&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;twitter:image&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;og:image&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;これらの述語を既に使っている場合は &lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview&#34; title=&#34;Summary card — Twitter Developers&#34;&gt;Twitter Card&lt;/a&gt; のメタデータで記述する必要はない。
なお &lt;code&gt;og:type&lt;/code&gt; は本来はメディア・タイプ（MIME タイプや RDF/RDFa の語彙で定義されるタイプ）を指定するものなので &lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview&#34; title=&#34;Summary card — Twitter Developers&#34;&gt;Twitter Card&lt;/a&gt; 用に使うべきではない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ogp.me/&#34; title=&#34;The Open Graph protocol&#34;&gt;OGP&lt;/a&gt; は（一応） RDFa の仕様に従っているのでメタデータ指定には name-content ではなく property-content で記述する。
例えば以下の通り&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ogp1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ogp1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;  &lt;span class=&#34;na&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;og: http://ogp.me/ns#&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;og:title&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Codic API を利用するパッケージを作ってみた — プログラミング言語 Go | text.Baldanders.info&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;og:description&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;spf13/viper を使ってみたかったのだ。&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;property&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;og:image&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://text.baldanders.info//images/attention/go-code.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 要素に &lt;code&gt;prefix&lt;/code&gt; を付けるのを忘れずに（&lt;a href=&#34;https://www.w3.org/TR/html5/&#34;&gt;HTML5&lt;/a&gt; の場合）。
なぜ &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 要素ではなく &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 要素に付けるかというと，  &lt;a href=&#34;http://ogp.me/&#34; title=&#34;The Open Graph protocol&#34;&gt;OGP&lt;/a&gt; は &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 要素外での使用を考慮していないからである。
まぁ Twitter 側はそんなこと微塵も気にしてないだろうけど。
おそらく接頭辞を &lt;code&gt;og&lt;/code&gt; 以外にしたら Twitter 側は認識できなくなるんじゃないのかな（馬鹿らしいので試さない）。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 要素内の &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 要素や &lt;code&gt;description&lt;/code&gt; メタデータはまるっと無視するようである。
本当に何でこんな頭の悪い仕様になってるのか知らないが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ttl1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ttl1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，最初に書いたように，いまさら Semantic Web なんか気にする人はいないだろうし，どうでもいいか。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cards-dev.twitter.com/validator&#34;&gt;Card Validator | Twitter Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.granfairs.com/blog/staff/setting-twitter-cards&#34;&gt;ツイートにページ情報を表示する「Twitterカード（Twitter Cards）」を設定してみた | 株式会社グランフェアズ&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://saruwakakun.com/html-css/reference/twitter-card&#34;&gt;【2017年版】Twitterカードとは？使い方と設定方法まとめ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/rdfa/&#34;&gt;RDFa 入門 — Baldanders.info&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://scrapbox.io/spiegel-branch/%E3%82%BF%E3%82%A4%E3%83%A0%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%AE%E5%A5%B4%E9%9A%B7&#34;&gt;タイムラインの奴隷 - Spiegel&amp;rsquo;s Branch - Scrapbox&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/483993195X/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51oaN2iq9xL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/483993195X/baldandersinf-22/&#34;&gt;セマンティック HTML/XHTML&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;神崎 正英 &lt;/dd&gt;&lt;dd&gt;毎日コミュニケーションズ 2009-05-28&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4627829310/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4627829310.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;セマンティック・ウェブのためのRDF/OWL入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873114527/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873114527.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;セマンティックWeb プログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4764904276/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4764904276.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Linked Data: Webをグローバルなデータ空間にする仕組み&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274202925/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274202925.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;オントロジー構築入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4501542101/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4501542101.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;トピックマップ入門 (セマンティック技術シリーズ)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;残念ながら紙の本は実質的に絶版なんですよねぇ。是非デジタル化を希望します。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-08-17&#34;&gt;2014/08/17&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ec1&#34;&gt;この記事を書くにあたってちょっと調べたのだが「アイキャッチ」というのは和製英語なんだそうだ。「アイキャッチ」の “eye” は一人称の “I” を連想させるため，「アイキャッチ」は “I catch” とストーカー発言みたいな怖い誤解を与えてしまうらしい。なお “eye” は “attention” に置き換えることができるそうで， &lt;a href=&#34;アイキャッチ画像の「アイキャッチ」とは？正しい英語ではどういう？&#34; title=&#34;アイキャッチ画像の「アイキャッチ」とは？正しい英語ではどういう？&#34;&gt;“catch the reader’s attention” みたいな言い回し&lt;/a&gt;になるとか。ふぅ。英語は難しいぜ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ec1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:rdfa1&#34;&gt;RDF/RDFa は Web 上の（URI で記述可能な）あらゆるリソースを「主語・述語・目的語」の三つ組（triple）で表すことで machine-understandable な「意味」を与える Semantic Web の実装のひとつである。もちろん Facebook はそんな思想背景など微塵も考慮していなかったと思うが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:rdfa1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ogp1&#34;&gt;&lt;code&gt;og:image&lt;/code&gt; の目的語は URL なので， RDFa 仕様としては property-content ではなく（&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 要素を使って） rel-resource または rel-href とするのが正しい。のだが， &lt;a href=&#34;http://ogp.me/&#34; title=&#34;The Open Graph protocol&#34;&gt;OGP&lt;/a&gt; は馬鹿なので property-content とする（つまりリテラル・データとして扱う）よう求めている。私が間違ってるわけではない，決して。ホント，なんだよこのクソ仕様は。ブツブツブツ&amp;hellip;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ogp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ttl1&#34;&gt;ちなみに Facebook は &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 要素を認識して使っている。はっきり言って &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 要素と &lt;code&gt;twitter:title&lt;/code&gt; メタデータが独立して存在してるってのは詐欺の匂いがするんだが，誰も気にしないのかね。アイキャッチ画像につられて詐欺みたいなサイトに誘導されるってのは Facebook でも見られるが（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ttl1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ちょこっと MathJax： インライン数式と別行立て数式 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/10/getting-started-mathjax-3/" />
		<id>tag:text.Baldanders.info,2017-10-27:/remark/2017/10/getting-started-mathjax-3/</id>
		<published>2017-10-27T17:24:58+09:00</published>
		<updated>2017-10-27T17:24:58+09:00</updated>
		<summary>MathJax の数式の表示には2種類ある。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/getting-started-mathjax-2/&#34; title=&#34;ちょこっと MathJax： 基本的な数式表現&#34;&gt;前回&lt;/a&gt;からだいぶ間があいたけど，そろそろ続きを。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/getting-started-mathjax-1/&#34;&gt;ちょこっと MathJax： 初期設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/getting-started-mathjax-2/&#34;&gt;ちょこっと MathJax： 基本的な数式表現&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/10/getting-started-mathjax-3/&#34;&gt;ちょこっと MathJax： インライン数式と別行立て数式&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;インライン数式と別行立て数式&#34;&gt;インライン数式と別行立て数式&lt;/h2&gt;

&lt;p&gt;さて，&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/getting-started-mathjax-1/&#34; title=&#34;ちょこっと MathJax： 初期設定&#34;&gt;初期設定&lt;/a&gt;の回でも少し言及したが，&lt;a href=&#34;https://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; の数式の表示には2種類ある。
まず本文に埋め込まれる形で表示される数式。
これを「インライン数式（in-line math）」と呼ぶ。
インライン数式は &lt;code&gt;\(...\)&lt;/code&gt; で囲んで記述する。&lt;/p&gt;

&lt;p&gt;たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;エネルギーと質量には \(E=mc^2\) の関係がある。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と記述すると&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;エネルギーと質量には \(E=mc^2\) の関係がある。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;のように表示される。&lt;/p&gt;

&lt;p&gt;もうひとつは本文とは行を改めて表示される数式。
これを「別行立て数式（displayed equations）」と呼ぶ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:book1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:book1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
別行立て数式は &lt;code&gt;$$...$$&lt;/code&gt; または &lt;code&gt;\[...\]&lt;/code&gt; で囲んで記述する。&lt;/p&gt;

&lt;p&gt;たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;エネルギーと質量には \[E=mc^2\] の関係がある。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と記述すると&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
エネルギーと質量には \[E=mc^2\] の関係がある。
&lt;/blockquote&gt;&lt;/figure&gt;

&lt;p&gt;のように表示される。&lt;/p&gt;

&lt;p&gt;$\mathrm{\LaTeX}$ ではインライン数式については &lt;code&gt;\(...\)&lt;/code&gt; ではなく &lt;code&gt;$...$&lt;/code&gt; を使う。
なので &lt;a href=&#34;http://docs.mathjax.org/en/latest/options/preprocessors/tex2jax.html&#34; title=&#34;The tex2jax Preprocessor — MathJax 2.7 documentation&#34;&gt;&lt;code&gt;tex2jax&lt;/code&gt;&lt;/a&gt; オプションをいじって &lt;code&gt;$...$&lt;/code&gt; を有効にしてしまおう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/x-mathjax-config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;MathJax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;tex2jax&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;inlineMath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\\(&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\\)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]],&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;processEscapes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;オプション設定について詳しくは&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/getting-started-mathjax-1/&#34; title=&#34;ちょこっと MathJax： 初期設定&#34;&gt;初期設定&lt;/a&gt;の回を参照のこと&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:jm1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:jm1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;textstyle-と-displaystyle&#34;&gt;Textstyle と Displaystyle&lt;/h2&gt;

&lt;p&gt;先程の例で挙げた数式 $E=mc^2$ ではインライン数式と別行立て数式表示に（表示位置以外は）さしたる違いは見られないが，数式によっては表示が明らかに異なる場合がある。
たとえば &lt;code&gt;\sum_{k=1}^n a_k&lt;/code&gt; という記述について，インライン数式なら&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;たとえば $\sum_{k=1}^n a_k$ という記述について&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;となるが，別行立て数式では&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
たとえば \[\sum_{k=1}^n a_k\] という記述について
&lt;/blockquote&gt;&lt;/figure&gt;

&lt;p&gt;となる。
インライン数式では，できるだけ数式が本文からはみ出ないように自動的に調節してくれているのである。
これを意図的に変えるには &lt;code&gt;\textstyle&lt;/code&gt;, &lt;code&gt;\displaystyle&lt;/code&gt;, &lt;code&gt;\limits&lt;/code&gt;, &lt;code&gt;\nolimits&lt;/code&gt; といったコマンドを使う。
以下に各コマンドを使った場合の表示の違いを挙げる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;$\mathrm{TeX}$ 記法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;表示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\textstyle\sum_{k=1}^n a_k&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$\textstyle\sum_{k=1}^n a_k$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\displaystyle\sum_{k=1}^n a_k&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$\displaystyle\sum_{k=1}^n a_k$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\textstyle\sum\limits_{k=1}^n a_k&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$\textstyle\sum\limits_{k=1}^n a_k$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;\displaystyle\sum\nolimits_{k=1}^n a_k&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;$\displaystyle\sum\nolimits_{k=1}^n a_k$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;分数表記&#34;&gt;分数表記&lt;/h2&gt;

&lt;p&gt;もうひとつ。
インライン数式と別行立て数式で気をつけるべきなのが分数の表記である。
たとえば &lt;code&gt;y=1/x&lt;/code&gt; を $\mathrm{TeX}$ 記法で記述する場合は &lt;code&gt;y=\frac{1}{x}&lt;/code&gt; と書くが，インライン数式の場合は&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;たとえば &lt;code&gt;y=1/x&lt;/code&gt; は $y=\frac{1}{x}$ と書く&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;となり，別行立て数式の場合は&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
たとえば &lt;code&gt;y=1/x&lt;/code&gt; は \[y=\frac{1}{x}\] と書く
&lt;/blockquote&gt;&lt;/figure&gt;

&lt;p&gt;となる。
しかしインライン数式の場合，これでは文字が小さくなりすぎるし，結局は本文からハミ出してしまう。
なのでインライン数式では &lt;code&gt;\frac&lt;/code&gt; を使うのではなくそのまま &lt;code&gt;$y=1/x$&lt;/code&gt; と書くのが良いとされている。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;たとえば &lt;code&gt;y=1/x&lt;/code&gt; は $y=1/x$ と書く&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なお分数でも textstyle と displaystyle に相当する &lt;code&gt;\tfrac&lt;/code&gt; と &lt;code&gt;\dfrac&lt;/code&gt; がある。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;$\mathrm{TeX}$ 記法&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;表示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;y=\tfrac{1}{x}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$y=\tfrac{1}{x}$&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;y=\dfrac{1}{x}&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;$y=\dfrac{1}{x}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; でも連分数（&lt;code&gt;\cfrac&lt;/code&gt;）が使える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bk2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bk2&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;\[
b_0 + \cfrac{c_1}{b_1 +
  \cfrac{c_2}{b_2 +
  \cfrac{c_3}{b_3 +
  \cfrac{c_4}{b_4 + \cdots}}}}
\]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;blockquote&gt;
\[
b_0 + \cfrac{c_1}{b_1 +
  \cfrac{c_2}{b_2 +
  \cfrac{c_3}{b_3 +
  \cfrac{c_4}{b_4 + \cdots}}}}
\]
&lt;/blockquote&gt;&lt;/figure&gt;

&lt;p&gt;流石にこれはインライン数式じゃ無理だよね（笑）&lt;/p&gt;

&lt;h2 id=&#34;インライン数式で高さを揃える&#34;&gt;インライン数式で高さを揃える。&lt;/h2&gt;

&lt;p&gt;インライン数式では &lt;code&gt;$\sqrt{g}$&lt;/code&gt; と &lt;code&gt;$\sqrt{h}$&lt;/code&gt; のように数式によって高さが不揃いになるものがある。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;インライン数式では $\sqrt{g}$ と $\sqrt{h}$ の高さが不揃い&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;高さを揃えるには &lt;code&gt;\mathstrut&lt;/code&gt; コマンドを使って以下のように記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;\mathstrut コマンドを使って $\sqrt{\mathstrut g}$ と $\sqrt{\mathstrut h}$ の高さを揃えてみる&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;\mathstrut&lt;/code&gt; コマンドを使って $\sqrt{\mathstrut g}$ と $\sqrt{\mathstrut h}$ の高さを揃えてみる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;さらに &lt;code&gt;\smash&lt;/code&gt; コマンドとも組み合わせて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;\smash コマンドも使って $\sqrt{\smash[b]{\mathstrut g}}$ と $\sqrt{\smash[b]{\mathstrut h}}$ を揃えてみる&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;\smash&lt;/code&gt; コマンドも使って $\sqrt{\smash[b]{\mathstrut g}}$ と $\sqrt{\smash[b]{\mathstrut h}}$ を揃えてみる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とするともうちょっとだけいい感じになるようである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:smsh1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:smsh1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
折角なのでマクロに組み込んでしまおう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/x-mathjax-config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;MathJax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;TeX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Macros&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;ssqrt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\\sqrt{\\smash[b]{\\mathstrut #1}}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで以下のように書けば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;\smash コマンドも使って $\ssqrt{g}$ と $\ssqrt{h}$ を揃えてみる&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同じ結果が得られる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;\smash&lt;/code&gt; コマンドも使って $\ssqrt{g}$ と $\ssqrt{h}$ を揃えてみる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;別行立て数式に番号を振る&#34;&gt;別行立て数式に番号を振る&lt;/h2&gt;

&lt;p&gt;別行立て数式では数式に番号を振ることができる。たとえば &lt;code&gt;\[E=mc^2\]&lt;/code&gt; に (a) をいう番号を振りたければ &lt;code&gt;\tag&lt;/code&gt; コマンドを使って &lt;code&gt;\[E=mc^2 \tag{a}\]&lt;/code&gt; とする。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[E=mc^2 \tag{a}\]
&lt;/blockquote&gt;&lt;/figure&gt;

&lt;p&gt;この番号にはラベル &lt;code&gt;\label&lt;/code&gt; を付けて参照することができる。
たとえば &lt;code&gt;\[E=mc^2 \tag{b}\label{eq-b}\]&lt;/code&gt; としておいて&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[E=mc^2 \tag{b}\label{eq-b}\]
&lt;/blockquote&gt;&lt;/figure&gt;

&lt;p&gt;このラベルを参照するには &lt;code&gt;\eqref{eq-b}&lt;/code&gt; でこのように →\eqref{eq-b}← できる（&lt;code&gt;$...$&lt;/code&gt; で囲まなくてもよい）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:anc1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:anc1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;数式に通し番号を振る&#34;&gt;数式に通し番号を振る&lt;/h3&gt;

&lt;p&gt;ページ内で通し番号を振りたい場合は，まず &lt;a href=&#34;http://docs.mathjax.org/en/latest/options/input-processors/TeX.html&#34; title=&#34;The TeX input processor — MathJax 2.7 documentation&#34;&gt;&lt;code&gt;TeX&lt;/code&gt;&lt;/a&gt; オプションで設定を変更する（オプション設定については&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/getting-started-mathjax-1/&#34; title=&#34;ちょこっと MathJax： 初期設定&#34;&gt;初期設定&lt;/a&gt;の回を参照）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text/x-mathjax-config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;MathJax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;TeX&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;equationNumbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;autoNumber&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;AMS&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に番号を振るには数式を &lt;code&gt;\[...\]&lt;/code&gt; で囲むのではなく &lt;code&gt;\begin{equation}...\end{equation}&lt;/code&gt; で囲む。
自動で番号が振られるので &lt;code&gt;\tag&lt;/code&gt; コマンドは不要である。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;エネルギーと質量には
\begin{equation}
  E=mc^2 \label{eq-1st}
\end{equation}
の関係がある。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;blockquote&gt;
エネルギーと質量には
\begin{equation}
  E=mc^2 \label{eq-1st}
\end{equation}
の関係がある。
&lt;/blockquote&gt;&lt;/figure&gt;

&lt;p&gt;参照も同様に →\eqref{eq-1st}← できる。&lt;/p&gt;

&lt;p&gt;余談だが &lt;code&gt;\begin&lt;/code&gt; と &lt;code&gt;\end&lt;/code&gt; で囲まれた領域を $\mathrm{\LaTeX}$  では「環境」と呼ぶ。
&lt;code&gt;\begin{foober}...\end{foober}&lt;/code&gt; なら「&lt;code&gt;foobar&lt;/code&gt; 環境」と呼んだりする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;equation&lt;/code&gt; にアスタリスクを付けた &lt;code&gt;equation*&lt;/code&gt; 環境では，環境内の数式を自動採番の対象外にできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:math1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:math1&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;エネルギーと質量には
\begin{equation*}
  E=mc^2
\end{equation*}
の関係がある。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;blockquote&gt;
エネルギーと質量には
\begin{equation*}
  E=mc^2
\end{equation*}
の関係がある。
&lt;/blockquote&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;equation&lt;/code&gt; 環境以外にも &lt;code&gt;align&lt;/code&gt; 環境や &lt;code&gt;gather&lt;/code&gt; 環境なども自動採番の対象となる（自動採番を無効にするアスタリスクも有効）。
&lt;code&gt;align&lt;/code&gt; 環境などで特定の式に番号を振りたくない場合は &lt;code&gt;\notag&lt;/code&gt; コマンドを使って&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;\begin{align}
  (a+b)^2 &lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt;= a^2+2ab+b^2 \\
  (a-b)^2 &lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt;= a^2-2ab+b^2  \notag \\
  (a+b)^3 &lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt;= a^3+3a^{2}b+3ab^2+b^3
\end{align}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;blockquote&gt;
\begin{align}
  (a+b)^2 &amp;= a^2+2ab+b^2 \\
  (a-b)^2 &amp;= a^2-2ab+b^2  \notag \\
  (a+b)^3 &amp;= a^3+3a^{2}b+3ab^2+b^3
\end{align}
&lt;/blockquote&gt;&lt;/figure&gt;

&lt;p&gt;とすればよい。
また複数の数式を &lt;code&gt;split&lt;/code&gt; 環境や &lt;code&gt;aligned&lt;/code&gt; 環境で囲むことで複数の数式の塊に一つの番号を振ることもできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:math2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:math2&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;\begin{equation}
  \begin{split}
    (a+b)^2 &lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt;= a^2+2ab+b^2 \\
    (a-b)^2 &lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt;= a^2-2ab+b^2 \\
    (a+b)^3 &lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt;= a^3+3a^{2}b+3ab^2+b^3
  \end{split}
\end{equation}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure&gt;
&lt;blockquote&gt;
\begin{equation}
\begin{split}
  (a+b)^2 &amp;= a^2+2ab+b^2 \\
  (a-b)^2 &amp;= a^2-2ab+b^2 \\
  (a+b)^3 &amp;= a^3+3a^{2}b+3ab^2+b^3
\end{split}
\end{equation}
&lt;/blockquote&gt;&lt;/figure&gt;

&lt;h2 id=&#34;books&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774187054/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51E5K7B53aL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774187054/baldandersinf-22/&#34;&gt;[改訂第7版]LaTeX2ε美文書作成入門&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;奥村 晴彦 黒木 裕介 &lt;/dd&gt;&lt;dd&gt;技術評論社 2017-01-24&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798118141/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798118141.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;LaTeX2e辞典~用法・用例逆引きリファレンス (DESKTOP REFERENCE)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4535558752/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4535558752.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;公共政策入門 ミクロ経済学的アプローチ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320112415/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4320112415.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Rで楽しむ統計 (Wonderful R 1)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000298550/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4000298550.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;岩波データサイエンス Vol.5&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797391383/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797391383.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/積分を見つめて (数学ガールの秘密ノートシリーズ)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000298569/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4000298569.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;岩波データサイエンス Vol.6&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798115363/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798115363.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;独習 LaTeX2ε&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4785315717/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4785315717.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;具体例から学ぶ 多様体&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774193046/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774193046.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;【改訂第3版】基礎からわかる情報リテラシー&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4768704700/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4768704700.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;はじめて学ぶリー群 ―線型代数から始めよう&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;ついに第7版が登場。紙の本で買って常に側に置いておくのが吉。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-09-27&#34;&gt;2017-09-27&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:book1&#34;&gt;「インライン数式」「別行立て数式」という言い回しは『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774187054/baldandersinf-22/&#34; title=&#34;Amazon | [改訂第7版]LaTeX2ε美文書作成入門 | 奥村 晴彦, 黒木 裕介 通販&#34;&gt;LaTeX2ε美文書作成入門&lt;/a&gt;』を踏襲している。ちなみに “in-line math”, “displayed equations” は &lt;a href=&#34;https://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; のドキュメントでの言い回し。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:book1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:jm1&#34;&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/getting-started-mathjax-1/&#34; title=&#34;ちょこっと MathJax： 初期設定&#34;&gt;初期設定&lt;/a&gt;の回でも言及しているが &lt;code&gt;processEscapes&lt;/code&gt; はパラグラフ &lt;code&gt;&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;&lt;/code&gt; 内でのみ有効なようだ。つまり &lt;code&gt;processEscapes&lt;/code&gt; が有効な状態では，パラグラフ内の &lt;code&gt;\(...\)&lt;/code&gt; や &lt;code&gt;\[...\]&lt;/code&gt; がエスケープされてしまうので注意すること。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:jm1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bk2&#34;&gt;出典は『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774187054/baldandersinf-22/&#34; title=&#34;Amazon | [改訂第7版]LaTeX2ε美文書作成入門 | 奥村 晴彦, 黒木 裕介 通販&#34;&gt;LaTeX2ε美文書作成入門&lt;/a&gt;』より。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bk2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:smsh1&#34;&gt;これも『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774187054/baldandersinf-22/&#34; title=&#34;Amazon | [改訂第7版]LaTeX2ε美文書作成入門 | 奥村 晴彦, 黒木 裕介 通販&#34;&gt;LaTeX2ε美文書作成入門&lt;/a&gt;』を参考にした。いつもお世話になっています。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:smsh1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:anc1&#34;&gt;数式参照用の id は &lt;a href=&#34;https://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; で動的に生成されているので，ページ外からの参照はお勧めできない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:anc1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:math1&#34;&gt;実は &lt;code&gt;\[...\]&lt;/code&gt; は &lt;code&gt;equation*&lt;/code&gt; 環境と等価である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:math1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:math2&#34;&gt;&lt;code&gt;split&lt;/code&gt; 環境は自動採番の対象外である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:math2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Codic API を利用するパッケージを作ってみた - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/codic-api/" />
		<id>tag:text.Baldanders.info,2017-10-25:/golang/codic-api/</id>
		<published>2017-10-25T15:46:59+09:00</published>
		<updated>2017-10-27T18:19:23+09:00</updated>
		<summary>spf13/viper を使ってみたかったのだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;つい最近まで知らなかったのだが &lt;a href=&#34;https://codic.jp/&#34; title=&#34;プログラマーのためのネーミング辞書 | codic&#34;&gt;codic&lt;/a&gt; というサービスがあるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codic.jp/&#34;&gt;プログラマーのためのネーミング辞書 | codic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;簡単に言うと日本語の「名前」を英語に変換してくれるサービスなのだが，プログラマ向けに変数名やメソッド名として使いやすいよう提案してくれる優れものである。
まさに&lt;a href=&#34;http://text.baldanders.info/remark/2017/10/programmin-language-in-english/&#34; title=&#34;プログラミング言語の暗黙ルール&#34;&gt;英語不得手な私&lt;/a&gt;のためにあるようなサービスじゃないか！ 何故今までこのサービスに辿り着けなかったのか &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Web 画面はこんな感じ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/37176009973/&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4459/37176009973_5026b4c303.jpg&#34; srcset=&#34;https://farm5.staticflickr.com/4459/37176009973_5026b4c303.jpg 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;codic service&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/37176009973/&#34;&gt;codic service&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;あの時このサービスのことを知っていたら&lt;a href=&#34;http://text.baldanders.info/remark/2017/04/regist-dose-not-exist/&#34; title=&#34;“regist” という単語は存在しない&#34;&gt;メソッド名に &lt;code&gt;regist&lt;/code&gt;&lt;/a&gt; とか付けようとして赤っ恥をかかなくて済んだのに。
とほほ。&lt;/p&gt;

&lt;p&gt;というわけで早速サインアップしましたよ。
GitHub のアカウントでもサインアップできるのが素敵（最終確認にメールアドレスを要求されるけど）。&lt;/p&gt;

&lt;p&gt;で， &lt;a href=&#34;https://codic.jp/&#34; title=&#34;プログラマーのためのネーミング辞書 | codic&#34;&gt;codic&lt;/a&gt; では API を公開しているようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codic.jp/docs/api&#34;&gt;API | codic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で，これを使うための &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;パッケージも既に見られるんだけど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/codic-project/Codic_cli&#34;&gt;codic-project/Codic_cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/39e/go-codic&#34;&gt;39e/go-codic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CLI しか用意されてない，っていうか何で GET で取ろうとするんだよ！ というわけで自作することにした。&lt;/p&gt;

&lt;p&gt;→ 自作しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gocodic&#34;&gt;spiegel-im-spiegel/gocodic: codic の API を利用するための Go 言語パッケージ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;すみません。
勢いで作ったのでテストを書いてません。
そのうちなんとかします。
日本語圏向けのサービスなんだから &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gocodic/blob/master/README.md&#34; title=&#34;gocodic/README.md at master · spiegel-im-spiegel/gocodic&#34;&gt;README&lt;/a&gt; もガッツリ日本語でいいよね（笑）&lt;/p&gt;

&lt;h2 id=&#34;curl-で-api-を確認する&#34;&gt;Curl で API を確認する&lt;/h2&gt;

&lt;p&gt;RESTfull API なんだから &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; で説明してくれよ，と思う私は贅沢なのでしょうか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34;&gt;cURL as DSL — cURL as DSL 1.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.shibu.jp/article/115602749.html&#34;&gt;Shibu&amp;rsquo;s Diary: cURL as DSLとは何だったのか。あるいは細かすぎて伝わらないcURL as DSL。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえず，&lt;a href=&#34;https://codic.jp/docs/api/engine/translate&#34;&gt;翻訳用の API&lt;/a&gt; は &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; を使うと以下のように記述できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;curl &amp;#34;https://api.codic.jp/v1/engine/translate.json&amp;#34; -H &amp;#34;Authorization: Bearer YOUR_ACCESS_TOKEN&amp;#34; -F &amp;#34;text=hello&amp;#34; -F &amp;#34;casing=camel&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;text=hello&lt;/code&gt; って日本語やないやないかい！ というのはとりあえずスルーしていただいて，これを &lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コードに変換すると以下のようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;mime/multipart&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;writer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;multipart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NewWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WriteField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WriteField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;casing&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;camel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NewRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;https://api.codic.jp/v1/engine/translate.json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Bearer YOUR_ACCESS_TOKEN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;multipart/form-data; boundary=&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Boundary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Do&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReadAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これが雛形で出発点である。
&lt;code&gt;YOUR_ACCESS_TOKEN&lt;/code&gt; に正しいアクセス・トークン（&lt;a href=&#34;https://codic.jp/&#34; title=&#34;プログラマーのためのネーミング辞書 | codic&#34;&gt;codic&lt;/a&gt; にサインアップするともらえる）をセットすればちゃんと動く。
動くコードってのは大事だよね。&lt;/p&gt;

&lt;p&gt;最終的にどうなったかは &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gocodic/blob/master/README.md&#34; title=&#34;gocodic/README.md at master · spiegel-im-spiegel/gocodic&#34;&gt;README&lt;/a&gt; を見ていただきたい。&lt;/p&gt;

&lt;h2 id=&#34;spf13-viper-を使ってみたかったのだ&#34;&gt;spf13/viper を使ってみたかったのだ&lt;/h2&gt;

&lt;p&gt;外部パッケージは &lt;a href=&#34;http://text.baldanders.info/golang/consider-switching-from-glide-to-dep/&#34; title=&#34;Glide から Dep への移行を検討する&#34;&gt;dep で管理&lt;/a&gt;することにした。
こんな感じである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;github.com/spf13/cobra&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;branch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;master&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;github.com/spf13/viper&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^1.0.0&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;github.com/spiegel-im-spiegel/gocli&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^0.4.0&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;constraint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;github.com/pkg/errors&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^0.8.0&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pkg/errors&#34; title=&#34;pkg/errors: Simple error handling primitives&#34;&gt;pkg/errors&lt;/a&gt; パッケージ以外は CLI (Command-Line Interface) 用のパッケージである。
この中でも今回は特に &lt;a href=&#34;https://github.com/spf13/viper&#34; title=&#34;spf13/viper: Go configuration with fangs&#34;&gt;spf13/viper&lt;/a&gt; を使ってみたかったのだ。
だって毎回アクセス・トークンをコマンドラインに書く訳にはいかないでしょ。
呼び出しバッチやスクリプトに書くとか以ての外だし。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34; title=&#34;spf13/viper: Go configuration with fangs&#34;&gt;spf13/viper&lt;/a&gt; は設定ファイルにアクセスするためのパッケージで，特に &lt;a href=&#34;https://github.com/spf13/cobra&#34; title=&#34;spf13/cobra: A Commander for modern Go CLI interactions&#34;&gt;spf13/cobra&lt;/a&gt; との相性がいいのが特徴である。
というか同じ作者なのだが。
&lt;a href=&#34;https://github.com/spf13/cobra&#34; title=&#34;spf13/cobra: A Commander for modern Go CLI interactions&#34;&gt;spf13/cobra&lt;/a&gt; の使い方は以前紹介したので，そちらを参考にして欲しい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/estimate-of-pi-2-cli/&#34;&gt;モンテカルロ法による円周率の推定（その2 CLI）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34; title=&#34;spf13/cobra: A Commander for modern Go CLI interactions&#34;&gt;spf13/cobra&lt;/a&gt; が生成してくれる &lt;code&gt;cmd/root.go&lt;/code&gt; に &lt;a href=&#34;https://github.com/spf13/viper&#34; title=&#34;spf13/viper: Go configuration with fangs&#34;&gt;spf13/viper&lt;/a&gt; 初期化のコードがある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// initConfig reads in config file and ENV variables if set.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;initConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cfgFile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Use config file from the flag.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;viper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetConfigFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cfgFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Find home directory.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;home&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;homedir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Search config in home directory with name &amp;#34;.gocodic&amp;#34; (without extension).
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;viper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;AddConfigPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;home&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;viper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SetConfigName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;.gocodic&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;viper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;AutomaticEnv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// read in environment variables that match
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// If a config file is found, read it in.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;viper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReadInConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Using config file:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;viper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ConfigFileUsed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数は &lt;a href=&#34;https://github.com/spf13/cobra&#34; title=&#34;spf13/cobra: A Commander for modern Go CLI interactions&#34;&gt;spf13/cobra&lt;/a&gt; が生成した &lt;code&gt;cmd&lt;/code&gt; パッケージの &lt;code&gt;init()&lt;/code&gt; 関数内で呼び出される。
このまま弄らなくても問題ないが，個人的にはエラーを標準出力に出してるのが気に入らなかったので少し変えている。&lt;/p&gt;

&lt;p&gt;その後， &lt;a href=&#34;https://github.com/spf13/viper&#34; title=&#34;spf13/viper: Go configuration with fangs&#34;&gt;spf13/viper&lt;/a&gt; で読み込む設定項目を記述していくのだが&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;rootCmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PersistentFlags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;StringVar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cfgFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;config file (default is $HOME/.gocodic.yaml)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;rootCmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PersistentFlags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BoolP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;output by JSON format (raw data)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;rootCmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PersistentFlags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;StringP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;access token of codic.jp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;viper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BindPFlag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rootCmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PersistentFlags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Lookup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;viper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;BindPFlag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rootCmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PersistentFlags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Lookup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じで &lt;a href=&#34;https://github.com/spf13/cobra&#34; title=&#34;spf13/cobra: A Commander for modern Go CLI interactions&#34;&gt;spf13/cobra&lt;/a&gt; 側のフラグ（厳密には &lt;a href=&#34;https://github.com/spf13/pflag&#34; title=&#34;spf13/pflag: Drop-in replacement for Go&#39;s flag package, implementing POSIX/GNU-style --flags.&#34;&gt;spf13/pflag&lt;/a&gt;）と &lt;a href=&#34;https://github.com/spf13/viper&#34; title=&#34;spf13/viper: Go configuration with fangs&#34;&gt;spf13/viper&lt;/a&gt; をバインドしてしまう。
これで &lt;code&gt;cmd&lt;/code&gt; パッケージ側からはフラグ情報を透過的に扱える。
フラグ情報を取り出す場合には&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;jsonFlag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;viper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GetBool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;viper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GetString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;などとすればよい。
分かれば簡単。&lt;/p&gt;

&lt;h2 id=&#34;ところで&#34;&gt;ところで&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.codic.jp/&#34;&gt;2016年4月からブログが更新されてない&lt;/a&gt;けど，そのうちサービスが止まるなんてないよね？
&lt;a href=&#34;https://twitter.com/codic_project&#34;&gt;Twitter アカウントは生きてる&lt;/a&gt;みたいだし。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://niisi.hatenablog.jp/entry/2016/08/17/171000&#34;&gt;【codic】プログラマ必見！もう変数名や関数名に困らない！プログラマのためのネーミングツールを紹介 - プログラミング向上雑記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nelog.jp/codic&#34;&gt;関数や変数のネーミングに悩んだら「codic」に日本語名を入力するとある程度解決するかも&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shtnkgm/items/45b4cd274fa813d29539&#34;&gt;よく使うcurlコマンドのオプションまとめ（12個） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>プログラミング言語の暗黙ルール - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/10/programmin-language-in-english/" />
		<id>tag:text.Baldanders.info,2017-10-25:/remark/2017/10/programmin-language-in-english/</id>
		<published>2017-10-25T12:32:16+09:00</published>
		<updated>2017-10-25T12:32:16+09:00</updated>
		<summary>これは Scrapbox に書いた記事の再構成です。内容はほぼ同じ</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（これは &lt;a href=&#34;https://scrapbox.io/spiegel-branch/%E3%80%8C%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%80%8D%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6&#34;&gt;Scrapbox に書いた記事&lt;/a&gt;の再構成です。内容はほぼ同じです）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/the-language-of-programming/&#34;&gt;プログラミング言語について | プログラミング | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;英語不得手な私としてはこの記事で延々と聞かせられる「愚痴」に深く同情はするが，しょせん「愚痴」は「愚痴」でしかない。&lt;/p&gt;

&lt;p&gt;これで思い出したのが「&lt;a href=&#34;http://jp.techcrunch.com/2016/05/17/20160510please-dont-learn-to-code/&#34; title=&#34;頼むからプログラミングを学ばないでくれ | TechCrunch Japan&#34;&gt;頼むからプログラミングを学ばないでくれ&lt;/a&gt;」である。
この記事については私も以前にブログ記事を書いた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/lets-programming/&#34;&gt;「だれもがプログラミングを学ぶべき」ではない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちょうど「小学生の学校教育カリキュラムに『プログラミング』を導入する」などという頭の悪い教育政策を聞かされた頃だったので，反発する意味で書いたのだが&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;日本語や英語を習得するのに文法から習う人はいないだろう（日本の学校教育は違うかもw）。 たくさんの言葉を聞いて話して書いて読んで，そうして少しずつ語彙を飲み込んでいって習得していくものだ。&lt;br&gt;
プログラミング言語は違う。 プログラミング言語で決定的に重要なのは言語仕様つまり文法である。 何故ならプログラミングとは，究極的には，ゼロ知識から論理を積み上げていくことであり，プログラミング言語はそのための道具であり手段なのだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/lets-programming/&#34;&gt;「だれもがプログラミングを学ぶべき」ではない&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;が主張の全てである。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://postd.cc/the-language-of-programming/&#34; title=&#34;プログラミング言語について | プログラミング | POSTD&#34;&gt;プログラミング言語について&lt;/a&gt;」で唯一面白かった指摘は，プログラミング言語には言語仕様とは別に暗黙的に決められているルールというか規範のようなものが存在するという点。
それが「名前」である。
この点については日本語圏でも参考になるページが色々ある。
たとえば以下のページ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.find-job.net/startup/english-for-engineers-naming-conventions&#34;&gt;正しいコーディングが身につくエンジニア英語の手引き 〜文法とクラス／メソッド、命名規則〜 | Find Job! Startup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/jnchito/items/459d58ba652bf4763820&#34;&gt;モデルやメソッドに名前を付けるときは英語の品詞に気をつけよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;にも「名前」に関する議論がある。
たとえば&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/20160126101358.htm&#34;&gt;Big Sky :: Names&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のような話だが，ここでも英語の語彙が組み込まれている（ということに今気がついた）。&lt;/p&gt;

&lt;p&gt;つまり，英語圏で作られたプログラミング言語では暗黙的に英語の語彙を要求しているのである。
こればっかりはいくらプログラミングを勉強しても身につかないし，英語を無視して作ったものはまさに「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E8%AA%9E%E3%81%AE%E9%83%A8%E5%B1%8B&#34; title=&#34;中国語の部屋 - Wikipedia&#34;&gt;中国語の部屋&lt;/a&gt;」と同じく機械的なものにならざるを得ない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:lang1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:lang1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;だから若者たちよ。
悪いことは言わないから英語を習得しなはれ。
語彙を育むためには&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;たくさんの言葉を聞いて話して書いて読んで，そうして少しずつ語彙を飲み込んでいって習得していく&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/05/lets-programming/&#34;&gt;「だれもがプログラミングを学ぶべき」ではない&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;しかないのだ。
まぁ，私はこれが大変苦手なのだが。
だからこの歳でもいまだ英語不得手のままである。
とほほ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/programming-language/&#34;&gt;プログラミング言語との付き合い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/09/programming/&#34;&gt;プログラミングで「計算論的思考」は身につかない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.codic.jp/2015/11/20/release-codic-atom-package/&#34;&gt;Codic ATOM Package - codic blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:lang1&#34;&gt;言い換えれば日本語のプログラミング言語は日本語の語彙を前提にしているわけで，そんなもん日本（語圏）人以外には使えない。ただでさえ日本語は難しいと外国語圏からは言われているのに。いまや IT 後進国の日本が自国語のプログラミング言語を作るとかヘソで茶が沸いてしまう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:lang1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語における Singleton Pattern - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/singleton-pattern/" />
		<id>tag:text.Baldanders.info,2017-10-24:/golang/singleton-pattern/</id>
		<published>2017-10-24T14:43:01+09:00</published>
		<updated>2017-10-25T12:04:08+09:00</updated>
		<summary>はっきり言って「Singleton なめんな！」ですよ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は小ネタでお送りします。&lt;/p&gt;

&lt;p&gt;いや，ネットでね，&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;での Singleton 実装をこんな感じに書く人をやたら見かけるのだが&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//Hello class
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//GetInstance returns singleton instance
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GetInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はっきり言って &lt;strong&gt;Singleton なめんな！&lt;/strong&gt; ですよ。&lt;/p&gt;

&lt;p&gt;そうそう。
プログラマで Singleton Pattern を知らない人はいないと思うけど，一応解説しておくと， Singleton Pattern というのは，あるクラスに対してプログラム全体でインスタンスがひとつだけ生成されるよう制限するプログラミング・パターンである。
たとえば，外部と通信を行う entity class なんかはインスタンスがぼこぼこできて各々勝手に処理をされると困るわけで， singleton インスタンスの内部で同期をとっていく必要があるわけ。&lt;/p&gt;

&lt;p&gt;という説明からも分かると思うけど「&lt;strong&gt;スレッドセーフでない singleton 実装に存在意義はない&lt;/strong&gt;」のである。
ちなみに結城浩さんの&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1BS/baldandersinf-22/&#34; title=&#34;増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 | 結城 浩 | コンピュータ・IT | Kindleストア | Amazon&#34;&gt;デザパタ本&lt;/a&gt;にあるサンプルコードも以下のようになっている（こっちは Java での記述だけど&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:java1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:java1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.util.Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MySystem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MySystem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MySystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MySystem&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MySystem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt; で &lt;code&gt;synchronized&lt;/code&gt; なのがポイントね。
つまり，実際にインスタンスを生成する処理では何らかの手段でスレッドセーフであることが保証されてないといけない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:st1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:st1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
最初の &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のパターンが何故ダメなのかは実際に動くコードを書いてみれば分かる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//Hello class
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//GetInstance returns singleton instance
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GetInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;new instance&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//delay 1sec
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Chris&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GetInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//blocking
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;簡単に説明すると，まず &lt;code&gt;GetInstance()&lt;/code&gt; 関数内部で初期化処理時間を演出するために１秒間の delay を発生させている。
&lt;code&gt;run()&lt;/code&gt; 関数内で &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;channel&lt;/a&gt; &lt;code&gt;ch&lt;/code&gt; にインスタンスを食わせているのはブロッキングのため。
別に何を食わせてもいいのだが，手近に &lt;code&gt;GetInstance()&lt;/code&gt; 関数で取得したインスタンスがあるので，それを食わせている。
&lt;code&gt;main()&lt;/code&gt; 関数では &lt;code&gt;run()&lt;/code&gt; 関数を &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;goroutine&lt;/a&gt; で3連続起動したあと， &lt;code&gt;&amp;lt;-ch&lt;/code&gt; でブロックを解除している。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/cL-RMmS2ev&#34;&gt;実行結果&lt;/a&gt;は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;new instance
new instance
new instance
Hello Alice
Hello Chris
Hello Bob&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;並行処理下の3つの &lt;code&gt;run()&lt;/code&gt; 関数に対してインスタンスが3つ生成されてしまっているのが分かると思う。&lt;/p&gt;

&lt;p&gt;ではどう書けばいいのか。
一番簡単なのは &lt;a href=&#34;https://golang.org/ref/spec#Variables&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;var&lt;/a&gt; 宣言時に初期化してしまうことである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//GetInstance returns singleton instance
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GetInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に簡単なのは &lt;a href=&#34;https://golang.org/doc/effective_go.html#init&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;&lt;code&gt;init()&lt;/code&gt;&lt;/a&gt; 関数を使うことである。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//create instance and initialize
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html#init&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;&lt;code&gt;init()&lt;/code&gt;&lt;/a&gt; 関数は少し特殊な関数で，&lt;code&gt;main()&lt;/code&gt; 関数がキックされる前，パッケージ内の &lt;a href=&#34;https://golang.org/ref/spec#Variables&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;var&lt;/a&gt; 宣言時の初期化の後に呼ばれる。
ひとつのパッケージ内またはひとつのファイル内にいくつも &lt;a href=&#34;https://golang.org/doc/effective_go.html#init&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;&lt;code&gt;init()&lt;/code&gt;&lt;/a&gt; 関数を設置できるのが特徴なのだが，どういう順番に起動するかは言語仕様として明記されていないため&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:init1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:init1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，パッケージ内の複数の &lt;a href=&#34;https://golang.org/doc/effective_go.html#init&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;&lt;code&gt;init()&lt;/code&gt;&lt;/a&gt; 関数同士が依存また干渉するような書き方は避けるべきだろう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main()&lt;/code&gt; 関数がキックされるまではメイン以外の &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34; title=&#34;The Go Programming Language Specification - The Go Programming Language&#34;&gt;goroutine&lt;/a&gt; は（生成は可能だが）起動されないことが保証されているため，記述がスレッドセーフか否か気にする必要はない。
言い方を変えると，何らかの同期を伴う初期化処理の場合はこの方法では記述できないことになる。&lt;/p&gt;

&lt;p&gt;「どうしても &lt;code&gt;GetInstance()&lt;/code&gt; 関数内で同期をとりたいんじゃ」という場合は&amp;hellip; たとえば &lt;a href=&#34;https://golang.org/pkg/sync/&#34; title=&#34;sync - The Go Programming Language&#34;&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/a&gt; パッケージを使うとかだろうか。
Singleton Pattern におあつらえ向きの &lt;a href=&#34;https://golang.org/pkg/sync/&#34; title=&#34;sync - The Go Programming Language&#34;&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Once&lt;/code&gt; というのがある。
最初に挙げた例を流用するならこんな感じだろうか。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//Hello class
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;once&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Once&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//GetInstance returns singleton instance
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GetInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;once&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Do&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以下のコードで実際に動かして検証してみよう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;sync&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//Hello class
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;once&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Once&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//GetInstance returns singleton instance
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GetInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;once&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Do&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;new instance&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//delay 1sec
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;instance&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Chris&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GetInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//blocking
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/8ODOeffoyF&#34;&gt;実行結果&lt;/a&gt;は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;new instance
Hello Chris
Hello Alice
Hello Bob&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちゃんと singleton として動作していることが分かる。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/235/1235262/&#34;&gt;GASCII.jp：Goならわかるシステムプログラミング&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/480/1480872/&#34;&gt;ASCII.jp：Go言語と並列処理（2）｜Goならわかるシステムプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ruiu/items/54f0dbdec0d48082a5b1&#34;&gt;Goでスレッド（goroutine）セーフなプログラムを書くために必ず注意しなければいけない点 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1EU/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41GPVATQiZL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1EU/baldandersinf-22/&#34;&gt;Java言語で学ぶリファクタリング入門&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2007-01-26&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1BS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1BS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8ATHGW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8ATHGW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;増補改訂版 Java言語で学ぶデザインパターン入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B073F45B97/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B073F45B97.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／積分を見つめて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00H372H40/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00H372H40.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマの数学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1AO/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1AO.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Java言語プログラミングレッスン 第3版（下）　オブジェクト指向を始めよう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0185E10ZQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0185E10ZQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;実践Javaコーディング作法&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B071V7MY82/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B071V7MY82.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プリンシプル オブ プログラミング 3年目までに身につけたい 一生役立つ101の原理原則&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMK4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ガロア理論&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1A4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1A4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Java言語プログラミングレッスン 第3版（上）　Java言語を始めよう&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-10-24&#34;&gt;2017-10-24&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1BS/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41uoMp5etSL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1BS/baldandersinf-22/&#34;&gt;増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2004-06-18&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8ATHGW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8ATHGW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;増補改訂版 Java言語で学ぶデザインパターン入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1EU/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1EU.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Java言語で学ぶリファクタリング入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B073F45B97/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B073F45B97.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／積分を見つめて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B076BY4VJH/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B076BY4VJH.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アプリケーションアーキテクチャ設計パターン&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06Y114CHD/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06Y114CHD.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;C言語による スーパーLinuxプログラミング　Cライブラリの活用と実装・開発テクニック&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00H372H40/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00H372H40.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラマの数学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMK4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ガロア理論&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMJ0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMJ0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／整数で遊ぼう&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;結城浩さんによる通称「デザパタ本」のマルチスレッド編。 Java 以外でも使える優れもの。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-10-24&#34;&gt;2017-10-24&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:java1&#34;&gt;このコードのパターンは Singleton Pattern を説明するにはよく出来ているしちゃんと動く（ココ重要）が，同期コストが高いため，実際にはあまり使われない。 Java における Singleton Pattern には様々な実装例があるので探してみるといいだろう。ちなみに Java 使いではなくとも結城浩さんの&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1BS/baldandersinf-22/&#34; title=&#34;増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編 | 結城 浩 | コンピュータ・IT | Kindleストア | Amazon&#34;&gt;デザパタ本&lt;/a&gt;は買って読んでおくことを強くお勧めする。 Java 使いの方から見ると古いバージョンで書かれたコードなのが難点だが，紙の本で買うとサンプルコード入りのディスクが付いてくるので若干お得？
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:java1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:st1&#34;&gt;他にもインスタンスのコピー（コピーコンストラクタ等）を暗黙的に許容する言語ではコピーを無効にする措置が必要，とかある。そういう意味じゃ今回私が書いたコードも不完全で，実際には singleton インスタンスを隠蔽するためのラッパークラスが必要になる。ビジネス・ロジックも含めると，実は Singleton の実装ってそう甘くないのよねー
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:st1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:init1&#34;&gt;どうもソースファイルのファイル名が影響するらしい。つまりファイル名を工夫すれば &lt;a href=&#34;https://golang.org/doc/effective_go.html#init&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;&lt;code&gt;init()&lt;/code&gt;&lt;/a&gt; 関数の呼び出し順を制御できる，という噂。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:init1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「改憲」という要求開発 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/10/requirement-development/" />
		<id>tag:text.Baldanders.info,2017-10-23:/remark/2017/10/requirement-development/</id>
		<published>2017-10-23T17:45:41+09:00</published>
		<updated>2017-10-26T14:08:23+09:00</updated>
		<summary>やぁ，選挙が終わりましたよ。ようやくこれで胡乱なことが喋れるよ（笑）</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;やぁ，選挙が終わりましたよ。
ようやくこれで胡乱なことが喋れるよ（笑） みんなよく選挙期間中に公衆空間で具体的な候補者を名指しでこき下ろしたり礼賛したりできるな。
私は選管や選管に密告するネットユーザが怖いので無理です。&lt;/p&gt;

&lt;p&gt;さっそく頭のなかでトグロを巻いてる色々な雑念を &lt;a href=&#34;https://scrapbox.io/spiegel-branch/&#34; title=&#34;Spiegel&#39;s Branch - Scrapbox&#34;&gt;Scrapbox&lt;/a&gt; に吐き出していく（外部記憶に書いて忘れるため）。
そこで半分無意識に書いた&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt; 
&lt;q&gt;普通は逆。国家の主権者のアイデンティティを担保するものとして憲法がある。太平洋戦争で何もかもぶっ壊された当時の日本人には自分たちを肯定するものが天皇と憲法しかなかったのかもしれないが。改憲議論を含めて憲法について考えるなら，自分たちの行動規範や慣習の源泉（ルーツ）について突き詰めていく作業が不可欠だが，突き詰めていくと当の憲法にぶち当たって，そこより以前とは断絶状態になっている&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://scrapbox.io/spiegel-branch/%E6%94%B9%E6%86%B2&#34;&gt;改憲 - Spiegel&amp;#39;s Branch - Scrapbox&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;を眺めていて（我ながら珍しいことを書くなぁ）ふと思いついた。&lt;/p&gt;

&lt;p&gt;「これってコーランのことなんじゃね&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:quran1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:quran1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;？」&lt;/p&gt;

&lt;p&gt;なんでこんな明後日の方向に思考が飛んだかというと，以下の記事を思い出したからだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://30th.rcast.u-tokyo.ac.jp/future/future01.html&#34;&gt;対話する「未来論」：イスラームの宗教と脳の機能は交差する。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;正直な話，最初にこれを読んだときにはうまく脳に馴染まなかった。
ただ，この中で西欧（ギリシア哲学）的な思考とイスラーム教的な思考の違いが分かりやすく例示されている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt; 
&lt;q&gt;例えば高校で数学の問題集をわれわれは渡されて、解答は渡されずに、数学的な真理を見出していく。後で先生が解答集から答えを見せてくれて、それ以前の人間がすでに見出していた真理と照らし合わせて理解する、そういうやり方でわれわれは数学を学びますよね。これはギリシア哲学の時代の、つまり近代的な自我を課題にするようになる以前の、科学としての哲学の方法論です。それに対して、コーランは神が啓示で真理を下した、いわば「解答集」であって、人間はそこから逆算して世界に存在する問題を認識する。問題を認識すると同時に答えも与えられている。そもそも答えが先にあって、答えにあるように世界に存在する問題読み取るのですから、答えがあるのは当たり前なのですが、しかしとにかくそのように解答と問いを同時に受け取って、世界と人間の生命に対する確信を得る。究極のマニュアルなんですね。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://30th.rcast.u-tokyo.ac.jp/future/future01.html&#34;&gt;対話する「未来論」：イスラームの宗教と脳の機能は交差する。&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;具体的には算数で「$1+1=\,?$」という問題と「$2$」という解答のセットがあるとする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:math1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:math1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
そこで「$1+1$」について考察し解答である「$2$」を導き出すのが西欧的思考で，「$1+1=2$ である」を絶対として無条件に受け入れるのがイスラーム教的思考と考えればいいのだろうか（算数に関しては日本の学校教育は後者な気もするが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ed1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ed1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;）。&lt;/p&gt;

&lt;p&gt;実はコンピュータ・エンジニアも似たようなことをする。
それは TDD (Test-Driven Development) である。&lt;/p&gt;

&lt;p&gt;TDD では先に「テスト」を書く。
つまり「問題と解答」のセットを先に作るのである。
そして入力した問題に対して必ず「正しい」解答が出力されるよう手順（algorithm）を記述するのがプログラミングである。&lt;/p&gt;

&lt;p&gt;たとえば「20と32の最大公約数は4」を導く手順としては&lt;a href=&#34;http://text.baldanders.info/golang/greatest-common-divisor/&#34;&gt;「ユークリッド互除法」が有名&lt;/a&gt;だが，なぜ「ユークリッド互除法」で最大公約数が解けるのかエンジニアは考えない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gcd1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:gcd1&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
テストが要求する $gcd(20,32)=4$ を実装できることが重要なのである。
そもそも大抵の数学ライブラリに入ってるしね（笑）&lt;/p&gt;

&lt;p&gt;現在の日本国憲法が日本人にとって「最後の憲法&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:quran2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:quran2&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;」であるなら「改憲」議論そのものがナンセンスだろう。
実際そのように考えている政治家（やその支持者）は多そうだ。&lt;/p&gt;

&lt;p&gt;憲法に関しては，私はそっちに与しないが。&lt;/p&gt;

&lt;p&gt;たとえば，上で挙げた TDD は「テストは正しい」ことが必要条件である。
「テストは正しい」と信じられなければ，そもそも TDD は成立しないのだ。&lt;/p&gt;

&lt;p&gt;エンジニアがアルゴリズム偏重になることについては苦言を呈する人もいる。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;プログラミングにおける何らかの問題に取り組むとき、まず私たちはその問題が何であるのか、そしてそれは本当に問題であるのかを見極めなければならない。その問題が本当にプログラミングで解決できる問題かどうかを考慮せず、プログラミングで解決することに固執し、「なぜ問題なのか」という視点を失ってしまっては、そこから何も得ることはできない。それがプログラミングで解決できる問題であろうと、なかろうとだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/05/17/20160510please-dont-learn-to-code/&#34;&gt;頼むからプログラミングを学ばないでくれ | TechCrunch Japan&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これは全くもってそのとおり。
エンジニアリングの世界ではこれを「要求定義」もしくはもう少し推し進めて「要求開発」と呼ぶ。&lt;/p&gt;

&lt;p&gt;私たち日本人に日本国憲法を「最後の憲法」たらしめんとする圧力の源は何なのか。
そこから考え始めるべきではないのだろうか。
それも「要求開発」である。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://shinodahideaki.blog.jp/archives/16834872.html&#34;&gt;護憲派は改憲案に賛成すべきだ : 「平和構築」を専門にする国際政治学者&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://shinodahideaki.blog.jp/archives/21571730.html&#34;&gt;立憲民主党の未来は実は改憲にある : 「平和構築」を専門にする国際政治学者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shinodahideaki.blog.jp/archives/21632477.html&#34;&gt;長谷部恭男教授の「立憲主義」は、集団的自衛権の違憲性を説明しない : 「平和構築」を専門にする国際政治学者&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/10/the-48th-general-election/&#34;&gt;第48回衆議院議員総選挙&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822282686/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/512Y77Y5WDL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822282686/baldandersinf-22/&#34;&gt;要求開発~価値ある要求を導き出すプロセスとモデリング&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;山岸 耕二 安井 昌男 萩本 順三 河野 正幸 野田 伊佐夫 平鍋 健児 細川 努 依田 智夫 ［要求開発アライアンス］ &lt;/dd&gt;&lt;dd&gt;日経BP社 2006-03-02&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283585/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822283585.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;UMLモデリング入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798121967/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798121967.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;エリック・エヴァンスのドメイン駆動設計 (IT Architects’Archive ソフトウェア開発の実践)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4492961143/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4492961143.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ビジネスプロセスの教科書&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283496/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4822283496.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;UMLモデリングレッスン&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274505219/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274505219.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ソフトウェアエンジニアリング基礎知識体系 ―SWEBOK V3.0―&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320023528/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4320023528.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;要求仕様の探検学―設計に先立つ品質の作り込み&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4764904047/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4764904047.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;要求工学知識体系 第1版&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798114456/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798114456.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ユースケース駆動開発実践ガイド (OOP Foundations)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;要求は開発するものらしい。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-01-24&#34;&gt;2017-01-24&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51XGP8AFX2L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22/&#34;&gt;いかにして問題をとくか&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;G. ポリア 柿内 賢信 &lt;/dd&gt;&lt;dd&gt;丸善 1975-04-01&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621085298/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621085298.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;いかにして問題をとくか・実践活用編&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4061497863/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4061497863.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学的思考法―説明力を鍛えるヒント  講談社現代新書&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/462108819X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/462108819X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学×思考=ざっくりと  いかにして問題をとくか&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797375698/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797375698.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4185086180/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4185086180.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;授業研究に学ぶ高校新数学科の在り方&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-26&#34;&gt;2014/09/26&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;!-- eof --&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:quran1&#34;&gt;いや，イスラーム教徒の方は怒らないでね。この手の「思考の横滑り」は私にはいつものことなので笑って許してください。私はエンジニアだけど，いつも論理的に考えているわけじゃあないんだよ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:quran1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:math1&#34;&gt;厳密には $1+1=2$ というのは「$1+1$ と $2$ は常に等しい」という意味の恒等式であるが，細かいことは言わないでおく。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:math1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ed1&#34;&gt;そうでなければ「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000744.shtml&#34; title=&#34;日本の「算数」は壊れてる？ — Baldanders.info&#34;&gt;掛け算は順序が大事&lt;/a&gt;」みたいな大惨事にはならないだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ed1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gcd1&#34;&gt;いや，さすがに現場のエンジニアは学生時代に一度くらいは「ユークリッドの互除法」を証明したことがあるだろけど。やったことないって人や忘れてしまった人は&lt;a href=&#34;https://cakes.mu/posts/16292&#34;&gt;結城浩さんの「数学ガールの秘密ノート」の連載で「ユークリッドの互除法」が登場する&lt;/a&gt;ので読むといいだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gcd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:quran2&#34;&gt;「&lt;a href=&#34;http://30th.rcast.u-tokyo.ac.jp/future/future01.html&#34;&gt;イスラームの宗教と脳の機能は交差する。&lt;/a&gt;」には「最後」について「宗教的に画期的な「発明」」と書かれている： 「イスラーム教徒は「最後の預言者であるムハンマドに託された最後の啓示の言葉」としてコーランを認識することで、「最後の次」の啓示というものが出てくることを、単に認識しません。誰かがどれだけよく考え抜いて、現代のグローバル化した人類社会の新たな環境に適合した新たな啓示の法はこうだ、と新しい宗教を提示しても、コーランの内容と比べてその新しい宗教が優れているか否か、ということをイスラーム教徒の側は誰も論じません。論じる必然性を全く感じないからです」
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:quran2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>WPA2 脆弱性（KRACKs）に関する覚え書き - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/10/breaking-wpa2-by-forcing-nonce-reuse/" />
		<id>tag:text.Baldanders.info,2017-10-17:/remark/2017/10/breaking-wpa2-by-forcing-nonce-reuse/</id>
		<published>2017-10-17T20:00:30+09:00</published>
		<updated>2017-10-21T13:25:53+09:00</updated>
		<summary>今回は，世界中で大騒ぎになっている Wi-Fi の WPA2 認証に関する脆弱性について。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;昨夜は早めに寝落ちしてしまったのだが，その間に TL が随分賑やかになっていた。
そこで WPA2 脆弱性の話と中性子星衝突を重力波望遠鏡で観測した話をまとめておく。&lt;/p&gt;

&lt;p&gt;今回は，世界中で大騒ぎになっている Wi-Fi の WPA2 認証に関する脆弱性について。
&lt;a href=&#34;http://text.baldanders.info/remark/2017/09/vulnerability-in-bluetooth-implementation/&#34; title=&#34;Bluetooth 実装の脆弱性に関する覚え書き&#34;&gt;Bluetooth でやらかした&lt;/a&gt;ばっかりなのに追い打ちですやん。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.krackattacks.com/&#34;&gt;KRACK Attacks: Breaking WPA2&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://papers.mathyvanhoef.com/ccs2017.pdf&#34;&gt;Key Reinstallation Attacks: Forcing Nonce Reuse in WPA2 &lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kb.cert.org/vuls/id/228519&#34;&gt;Vulnerability Note VU#228519 - Wi-Fi Protected Access II (WPA2) handshake traffic can be manipulated to induce nonce and session key reuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ciadr/vul/20171017_WPA2.html&#34;&gt;WPA2 における複数の脆弱性について：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU90609033/&#34;&gt;JVNVU#90609033: Wi-Fi Protected Access II (WPA2) ハンドシェイクにおいて Nonce およびセッション鍵が再利用される問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20171016/1488907259&#34;&gt;WPA2の脆弱性 KRACKsについてまとめてみた - piyolog&lt;/a&gt; : オススメ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;脆弱性の内容&#34;&gt;脆弱性の内容&lt;/h2&gt;

&lt;p&gt;通称 KRACKs (&lt;strong&gt;K&lt;/strong&gt;ey &lt;strong&gt;R&lt;/strong&gt;einstallation &lt;strong&gt;A&lt;/strong&gt;tta&lt;strong&gt;cks&lt;/strong&gt;)。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;WPA2 プロトコルには、ハンドシェイク中に Nonce およびセッション鍵が再利用される問題があります。攻撃者はアクセスポイント (AP) とクライアントの間で Man-in-the-Middle 攻撃を成功させた後、ハンドシェイク中に特定のメッセージを AP またはクライアントに再送することで、Nonce やリプレイカウンタ をリセットし、すでに使用されているセッション鍵を再利用させることが可能です。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU90609033/&#34;&gt;Wi-Fi Protected Access II (WPA2) ハンドシェイクにおいて Nonce およびセッション鍵が再利用される問題&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/Oh4WURZoR98&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Oh4WURZoR98&#34;&gt;KRACK Attacks: Bypassing WPA2 against Android and Linux - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Nonce （ノンスまたはナンスと読むらしい）ってのは暗号通信の最初にやり取りする使い捨てのランダムな値で，これを認証情報に混ぜることで第三者による「リプレイ攻撃（replay attack）」を防ぐことができる。
今回はそういうのが全部チャイされてしまうわけやね。&lt;/p&gt;

&lt;p&gt;これが成功すると中間者攻撃（man-in-the-middle attack）が成立してしまい，通信内容の盗み見や改竄ができるようになってしまう。
ただし影響範囲は無線 LAN 内に限定されるため，インターネット越しに攻撃を受けるわけではない。
また暗号通信に使われる暗号アルゴリズムには脆弱性はない。&lt;/p&gt;

&lt;p&gt;具体的な脆弱性の内容は以下の通り（&lt;a href=&#34;http://jvn.jp/vu/JVNVU90609033/&#34;&gt;Vulnerability Note VU#228519&lt;/a&gt; より抜粋）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4-way ハンドシェイクにおける Pairwise Key の再利用 (CVE-2017-13077)&lt;/li&gt;
&lt;li&gt;4-way ハンドシェイクにおける Group Key の再利用 (CVE-2017-13078)&lt;/li&gt;
&lt;li&gt;4-way ハンドシェイクにおける Integrity Group Key の再利用 (CVE-2017-13079)&lt;/li&gt;
&lt;li&gt;Group-key ハンドシェイクにおける Group Key の再利用 (CVE-2017-13080)&lt;/li&gt;
&lt;li&gt;Group-key ハンドシェイクにおける Integrity Group Key の再利用 (CVE-2017-13081)&lt;/li&gt;
&lt;li&gt;Fast BSS Transition 再接続リクエストの再送許可とその処理における Pairwise Key の再利用 (CVE-2017-13082)&lt;/li&gt;
&lt;li&gt;PeerKey ハンドシェイクにおける STK Key の再利用 (CVE-2017-13084)&lt;/li&gt;
&lt;li&gt;Tunneled Direct-Link Setup (TDLS) ハンドシェイクにおける TDLS PeerKey (TPK) Key の再利用 (CVE-2017-13086)&lt;/li&gt;
&lt;li&gt;Wireless Network Management (WNM) Sleep Mode レスポンスフレーム処理時の Group Key (GTK) の再利用 (CVE-2017-13087)&lt;/li&gt;
&lt;li&gt;Wireless Network Management (WNM) Sleep Mode レスポンスフレーム処理時の Integrity Ggroup Key (IGTK) の再利用 (CVE-2017-13088)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;影響度-cvss&#34;&gt;影響度（CVSS）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU90609033/&#34;&gt;JVNVU#90609033: Wi-Fi Protected Access II (WPA2) ハンドシェイクにおいて Nonce およびセッション鍵が再利用される問題&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CVSSv3 基本評価値 5.0 (&lt;code&gt;CVSS:3.0/AV:A/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;関節（A）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;必要な特権レベル（PR）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;ユーザ関与レベル（UI）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;スコープ（S）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;変更なし（U）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;低（L）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CVSS については&lt;a href=&#34;http://text.baldanders.info/remark/2015/cvss-v3-metrics-in-jvn/&#34;&gt;解説ページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;影響を受ける製品&#34;&gt;影響を受ける製品&lt;/h2&gt;

&lt;p&gt;Wi-Fi 通信が可能なあらゆる機器が対象となる。
たとえば無線 LAN ルータ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:rt1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:rt1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，スマホ等の携帯端末，ネットワーク家電などが考えられる。&lt;/p&gt;

&lt;h2 id=&#34;対策-回避策&#34;&gt;対策・回避策&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;日本の &lt;a href=&#34;http://jvn.jp/vu/JVNVU90609033/&#34;&gt;JVN&lt;/a&gt;，および &lt;a href=&#34;https://www.kb.cert.org/vuls/id/228519&#34;&gt;CERT/CC&lt;/a&gt; の各ページにはベンダ企業のステータスが掲載されているので確認すること

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20171016-wpa&#34;&gt;Multiple Vulnerabilities in Wi-Fi Protected Access and Wi-Fi Protected Access II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iodata.jp/support/information/2017/wpa2/&#34;&gt;WPA2の脆弱性に関する弊社調査・対応状況について | IODATA アイ・オー・データ機器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://buffalo.jp/support_s/t20171017.html&#34;&gt;大切なお知らせ ｜ BUFFALO バッファロー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.watchguard.co.jp/security-news/wpa-and-wpa2-vulnerabilities-update.html&#34;&gt;WPA と WPA2 の脆弱性に関する最新情報 – UTM/NGFWでマルウェア・標的型攻撃対策｜ウォッチガード・テクノロジー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rtpro.yamaha.co.jp/RT/FAQ/Security/JVNVU90609033.html&#34;&gt;「Wi-Fi Protected Access II (WPA2) ハンドシェイクにおいて Nonce およびセッション鍵が再利用される問題」について (FAQ for YAMAHA RT Series / Security)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dlink-jp.com/support&#34;&gt;サポート | D-Link Japan&lt;/a&gt; : 「「WPA2の脆弱性」 に関する弊社調査状況について」をクリック&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.elecom.co.jp/support/news/20171018/&#34;&gt;WPA2の脆弱性に関する弊社調査・対応状況について - 重要なお知らせ - ELECOM |&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aterm.jp/product/atermstation/info/2017/info1018.html&#34;&gt;【重要】「WPA2」の脆弱性に関するお知らせ| お知らせ | AtermStation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.cnet.com/release/30213798/&#34;&gt;【お知らせ】Wi-Fiの暗号化技術「WPA2」脆弱性対策について - CNET Japan&lt;/a&gt; : 日本ヒューレット・パッカード株式会社からの報道資料&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.furunosystems.co.jp/info/detail/id=820&#34;&gt;【重要なお知らせ】無線LAN製品のWPA2の脆弱性に関するお知らせ｜フルノシステムズ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.furunosystems.co.jp/info/detail/id=822&#34;&gt;【重要なお知らせ】無線ハンディターミナル製品のWPA2の脆弱性に関するお知らせ｜フルノシステムズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.planex.co.jp/news/info/20171019_info.shtml&#34;&gt;WPA2の脆弱性への対応についてのお知らせ｜PLANEX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.toshiba-memory.co.jp/company/news/20171017-1.html&#34;&gt;無線LAN搭載 SDメモリカード/FlashAir™における「WPA2の鍵情報の生成・管理に関する脆弱性」について｜ニュース｜会社情報｜東芝メモリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.allied-telesis.co.jp/support/list/faq/vuls/20171019.html&#34;&gt;サポート｜Wi-Fi Protected Access II (WPA2) ハンドシェイクに関する脆弱性&lt;/a&gt; : アライドテレシス株式会社&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.sophos.com/kb/ja-jp/127658&#34;&gt;勧告: Sophos Wireless への WPA および WPA2 の脆弱性による鍵再インストール攻撃 (KRACKs) の影響 - Sophos Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tp-link.jp/faq-1970.html&#34;&gt;WPA2 セキュリティの脆弱性に関して(KRACKs) - TP-Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.denso-wave.com/ja/info/detail__991.html&#34;&gt;WPA2の脆弱性に関するBHT製品への影響と対応｜お知らせ｜デンソーウェーブ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;iOS や Android を提供する Apple や Google では修正版を準備中とのこと

&lt;ul&gt;
&lt;li&gt;ただし Android に関しては，端末を提供しているベンダ企業やキャリア企業が対応しない限り対応されないと思われる。特に古い機種や古いバージョンの OS を使い続けている場合は対応されないと思ったほうがいい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://internet.watch.impress.co.jp/docs/news/1087533.html&#34;&gt;WPA2脆弱性、Androidの対策パッチは11月6日提供予定、iOSの対策済みベータ配布が開始 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Windows については Microsoft からの10月のアップデートで修正されている

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-13080&#34;&gt;CVE-2017-13080 | Windows Wireless WPA Group Key Reinstallation Vulnerability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Linux や FreeBSD 等については対応が始まっている。ディストリビュータの情報に注意すること

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://oss.sios.com/security/wpa-security-vulnerability-20171016&#34;&gt;WPA2の脆弱性(KRACK Attacks / KRACKs )とCVE情報(CVE-2017-13077 - CVE-2017-13088) — | サイオスOSS | サイオステクノロジー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお GitHub にて CVE-2017-13082（Fast BSS Transition 再接続リクエストの再送許可とその処理における Pairwise Key の再利用）についてのチェックツールが公開されている模様（CVE-2017-13082 は 802.11r 方式を使うアクセスポイントに影響する）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vanhoefm/krackattacks-test-ap-ft&#34;&gt;vanhoefm/krackattacks-test-ap-ft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サポートが受けられない場合，回避方法としては以下が挙げられるだろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wi-Fi を使用しない

&lt;ul&gt;
&lt;li&gt;公衆空間で Wi-Fi を使わない場合は無効にしておく&lt;/li&gt;
&lt;li&gt;公衆無線 LAN はリスクが高いので利用しない&lt;/li&gt;
&lt;li&gt;可能であれば有線で接続する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;暗号化通信を利用する

&lt;ul&gt;
&lt;li&gt;Web でのやりとりには HTTPS を使う（&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/Security/HTTP_Strict_Transport_Security&#34; title=&#34;HTTP Strict Transport Security - Web セキュリティ | MDN&#34;&gt;HSTS (HTTP Strict Transport Security)&lt;/a&gt; でちゃんと HTTPS にリダイレクトされること）&lt;/li&gt;
&lt;li&gt;VPN サービスを利用する（慌ててよく分からないサービスに飛びつかないこと）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;WPA2 がダメだからと言って WEP を使うのは事態を悪化させるだけである。
脆弱性が発見された現時点でも WPA2 が一番まともな認証プロトコルであることには変わりない。&lt;/p&gt;

&lt;p&gt;はっきりいってネットワーク機器のアップデートはあまり期待できない。
とくに安ものの無線 LAN ルータとか，古い機種のスマホとかは事実上の放置プレイである。
先月の &lt;a href=&#34;http://text.baldanders.info/remark/2017/09/vulnerability-in-bluetooth-implementation/&#34; title=&#34;Bluetooth 実装の脆弱性に関する覚え書き&#34;&gt;Bluetooth 脆弱性&lt;/a&gt;に対応しなかったベンダ企業やその製品については，今回も何もないと考えたほうがいい。&lt;/p&gt;

&lt;p&gt;はっきり言って Android 端末はもう潮時かなと思ってる。
他の選択肢が Apple 製品しかないってのが業腹だけど（個人的に嫌いなんだよ）。&lt;/p&gt;

&lt;p&gt;まぁ，この機会にゆっくり考えることにしよう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arstechnica.com/information-technology/2017/10/severe-flaw-in-wpa2-protocol-leaves-wi-fi-traffic-open-to-eavesdropping/&#34;&gt;Serious flaw in WPA2 protocol lets attackers intercept passwords and much more | Ars Technica&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2017/10/new_krack_attac.html&#34;&gt;New KRACK Attack Against Wi-Fi Encryption - Schneier on Security&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.wlan-business.org/archives/11325&#34;&gt;無線LAN（Wi-Fi）暗号化における脆弱性への対応について  |  無線LANビジネス推進連絡会【WiBiz（ワイビズ）】 - お知らせ - 新着情報無線LANビジネス推進連絡会【WiBiz（ワイビズ）】&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.st.ryukoku.ac.jp/~kjm/security/memo/2017/10.html#20171017_wpa2&#34;&gt;セキュリティホール memo の情報&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://japan.cnet.com/article/35108859/&#34;&gt;WPA2の脆弱性「KRACKs」公開、多数のWi-Fi機器に影響の恐れ - CNET Japan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://jp.techcrunch.com/2017/10/17/20171016heres-what-you-can-do-to-protect-yourself-from-the-krack-wifi-vulnerability/&#34;&gt;WPA2のWiFi脆弱性から身を守る方法――KRACK攻撃の内容と対策 | TechCrunch Japan&lt;/a&gt; : 山奥に引っ越せとか周囲の土地を買い取って建物を潰せとか，ネタでも笑えないよ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35108863/&#34;&gt;Wi-Fiを脅かす脆弱性「KRACK」、各社の対応状況は&amp;ndash;MS、アップル、グーグルなど - ZDNet Japan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1710/17/news044.html&#34;&gt;WPA2の脆弱性「KRACK」対処パッチ、Microsoftは対応済み、AppleのOSとAndroidは数週間中 - ITmedia NEWS&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1710/17/news048.html&#34;&gt;「WPA2」の脆弱性情報、セキュリティ機関が公開　パッチ適用を呼び掛け - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.trendmicro.co.jp/archives/16162&#34;&gt;WPA2の脆弱性「KRACKs」、ほぼすべてのWi-Fi通信可能な端末機器に影響 | トレンドマイクロ セキュリティブログ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://protonvpn.com/blog/wifi-vulnerability-krack/&#34;&gt;WiFi Connection Vulnerability - Blog - ProtonVPN -&lt;/a&gt; : ProtonVPN の広告記事（笑）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.soumu.go.jp/menu_kyotsuu/important/kinkyu02_000274.html&#34;&gt;総務省｜無線LAN（Wi-Fi）暗号化における脆弱性について（注意喚起）&lt;/a&gt; : いまさら総務省（笑）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:rt1&#34;&gt;無線 LAN ルータは Wi-Fi ネットワークを中継する機能のあるものが対象となる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:rt1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>重力波望遠鏡で中性子星同士の衝突を観測 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/10/neutron-stars-collide/" />
		<id>tag:text.Baldanders.info,2017-10-17:/remark/2017/10/neutron-stars-collide/</id>
		<published>2017-10-17T17:50:25+09:00</published>
		<updated>2017-10-26T14:08:23+09:00</updated>
		<summary>今回は中性子星同士の衝突を LIGO を始めとする重力波望遠鏡で観測した話。もう，片っ端からシンクを張り付けておくよ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;昨夜は早めに寝落ちしてしまったのだが，その間に TL が随分賑やかになっていた。
そこで WPA2 脆弱性の話と中性子星衝突を重力波望遠鏡で観測した話をまとめておく。&lt;/p&gt;

&lt;p&gt;今回は中性子星同士の衝突を LIGO を始めとする重力波望遠鏡で観測した話。
もう，片っ端からシンクを張り付けておくよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nasa.gov/press-release/nasa-missions-catch-first-light-from-a-gravitational-wave-event&#34;&gt;NASA Missions Catch First Light from a Gravitational-Wave Event | NASA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.esa.int/Our_Activities/Space_Science/Integral_sees_blast_travelling_with_gravitational_waves&#34;&gt;Integral sees blast travelling with gravitational waves / Space Science / Our Activities / ESA&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.eso.org/public/news/eso1733/&#34;&gt;ESO Telescopes Observe First Light from Gravitational Wave Source | ESO&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.subarutelescope.org/Pressrelease/2017/10/16/j_index.html&#34;&gt;観測成果 - ―日本の望遠鏡群が捉えた重元素の誕生の現場― - すばる望遠鏡&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cfca.nao.ac.jp/pr/20171016&#34;&gt;重力波源からの光のメッセージを読み解く &amp;ndash;重元素の誕生現場，中性子星合体&amp;ndash; | CfCA - Center for Computational Astrophysics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nao.ac.jp/news/science/2017/20171016-j-gem.html&#34;&gt;重力波天体が放つ光を初観測：日本の望遠鏡群が捉えた重元素の誕生の現場 ―重力波を追いかけた天文学者たちは宝物を見つけた― | 国立天文台(NAOJ)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.hiroshima-u.ac.jp/news/42158&#34;&gt;【研究成果】重力波天体が放つ光を初観測 －日本の望遠鏡群が捉えた重元素の誕生の現場－ | 広島大学&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.s.u-tokyo.ac.jp/ja/info/5594/&#34;&gt;中性子星合体からの重力波初検出と重力波天体が放つ光の初観測 - 東京大学 大学院理学系研究科・理学部&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.konan-u.ac.jp/news/archives/16933&#34;&gt;【理工】重力波天体が放つ光を初観測〜日本の望遠鏡群が捉えた重元素の誕生の現場〜 | 大学TOP | 甲南大学&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.tohoku.ac.jp/japanese/2017/10/press20171023-01.html&#34;&gt;中性子星合体からの光は偏りが小さかった 〜宇宙の金&amp;hellip; | プレスリリース | 東北大学 -TOHOKU UNIVERSITY-&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.space.com/38469-gravitational-waves-from-neutron-stars-discovery-ligo.html&#34;&gt;First Detection of Gravitational Waves from Neutron-Star Crash Marks New Era of Astronomy&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.space.com/38471-gravitational-waves-neutron-star-crashes-discovery-explained.html&#34;&gt;Gravitational Waves from Neutron Star Crashes: The Discovery Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.space.com/38473-neutron-star-collision-videos-by-hubble-telescope-others.html&#34;&gt;When Neutron Stars Collide! What the Hubble Telescope and Others Saw (Videos)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.space.com/38478-did-neutron-stars-collision-create-black-hole.html&#34;&gt;These Two Neutron Stars Collided: Are They a Black Hole Now?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.space.com/38491-ligo-neutron-stars-heavy-metals-gold.html&#34;&gt;Neutron-Star Collision Reveals Origin of Gold, Astronomers Say&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://sorae.jp/030201/2017_10_16_gra.html&#34;&gt;「中性子星合体による重力波」初観測に成功　米欧研究チーム | sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/030201/2017_10_17_gra2.html&#34;&gt;日本観測チーム、重力波天体の光を初観測　重元素誕生予測とほぼ一致 | sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2017/10/20171017_01.html&#34;&gt;2017年10月17日ニュース「日本の観測チームが『重力波』の源を世界で初めて光で捉えた」 | SciencePortal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回の成果はいくつかあって&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ブラックホールではなく中性子星同士の衝突を重力波望遠鏡で観測できたこと

&lt;ul&gt;
&lt;li&gt;中性子星同士の衝突はブラックホールのそれよりは規模が小さいが光学系での観測には向いている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重力波望遠鏡以外の光学望遠鏡と連携して対象の天体を観測できたこと

&lt;ul&gt;
&lt;li&gt;その結果，重元素の存在を確認できたこと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;一連の観測ネットワークに日本の「&lt;a href=&#34;https://subarutelescope.org/&#34; title=&#34;Subaru Telescope&#34;&gt;すばる&lt;/a&gt;」を始めとする観測所も参加できたこと&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;といったところだろうか。&lt;/p&gt;

&lt;p&gt;まず重力波望遠鏡で天体衝突のイベントを観測し，光学望遠鏡（電波望遠鏡を含む）がそれを追認して更に様々な知見を得る，という流れができると非常に面白いことになるだろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jgem.hiroshima-u.ac.jp/&#34;&gt;新学術領域研究・計画研究A02 「天体重力波の光学赤外線対応現象の探索」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;重力波を捉える新しい「眼」ができたということは，それほど凄いことなのである。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/e8Yt7O7BLuc&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=e8Yt7O7BLuc&#34;&gt;Neutron Star Merger Seen in Gravity and Matter - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/02/14-stories/&#34;&gt;週末スペシャル： LIGO が重力波の「直接検出」に成功する！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>暗号鍵関連の各種変数について - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/10/key-parameters/" />
		<id>tag:text.Baldanders.info,2017-10-17:/remark/2017/10/key-parameters/</id>
		<published>2017-10-17T16:32:03+09:00</published>
		<updated>2017-10-17T16:32:03+09:00</updated>
		<summary>この記事は将来の記事で再利用するための snippet 置き場として使うことにする。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;「&lt;a href=&#34;https://qiita.com/darai0512/items/c7b47d1b3fe06c4dea7d&#34;&gt;ECDSA鍵をGitHubで使う方法&lt;/a&gt;」で SP 800-56 が Rev.4 になってるのを見て一瞬「ふぁ！」となったが，よく考えたら今年始めに書いた「&lt;a href=&#34;http://text.baldanders.info/remark/2017/02/sha-1-collision/&#34;&gt;最初の SHA-1 衝突例&lt;/a&gt;」では既に Rev.4 を参照していたのだった。
でも古い記事を見返したら結構 Rev.3 のままになってるので，このさい全部アップデートすることにした。&lt;/p&gt;

&lt;p&gt;この記事は将来の記事で再利用するための snippet 置き場として使うことにする。
表のレイアウトの関係で携帯端末で見ている人は見づらいかもしれないけど，そこはご容赦。&lt;/p&gt;

&lt;h2 id=&#34;参照資料&#34;&gt;参照資料&lt;/h2&gt;

&lt;p&gt;ここで参照する資料は，米国 &lt;a href=&#34;https://www.nist.gov/&#34; title=&#34;National Institute of Standards and Technology | NIST&#34;&gt;NIST&lt;/a&gt; の Special Publication (SP) 800-57 Part 1 で正式タイトルは「Recommendation for Key Management Part 1: General （鍵管理における推奨事項 第一部：一般事項）」となっている（日本語訳は IPA によるもの）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-4/final&#34;&gt; SP 800-57 Part 1 Rev. 4 Recommendation for Key Management, Part 1: General&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://doi.org/10.6028/NIST.SP.800-57pt1r4&#34;&gt;NIST Special Publication 800-57 Part 1; Revision 4; Recommendation for Key Management Part 1: General &lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; （&lt;span&gt;&lt;a href=&#34;https://www.ipa.go.jp/files/000055490.pdf&#34;&gt;IPA による日本語版 &lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;セキュリティ強度と鍵長の関係&#34;&gt;セキュリティ強度と鍵長の関係&lt;/h2&gt;

&lt;p&gt;最初はセキュリティ強度と鍵長の関係を示す表。
単位は全て bit である。&lt;/p&gt;

&lt;div&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;style&gt;
main table.nist2 th  {
  vertical-align:middle;
  text-align: center;
}
main table.nist2 td  {
  vertical-align:middle;
  text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;nist2&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Security&lt;br&gt;Strength&lt;/th&gt;
&lt;th&gt;Symmetric&lt;br&gt; key&lt;br&gt; algorithms&lt;/th&gt;
&lt;th&gt;FFC&lt;br&gt;(e.g., DSA, D-H)&lt;/th&gt;
&lt;th&gt;IFC&lt;br&gt;(e.g., RSA)&lt;/th&gt;
&lt;th&gt;ECC&lt;br&gt;(e.g., ECDSA)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;$\le 80$&lt;/td&gt;&lt;td&gt;2TDEA&lt;/td&gt;&lt;td&gt;$L=1024$&lt;br&gt;$N=160$&lt;/td&gt;&lt;td&gt;$k=1024$&lt;/td&gt; &lt;td&gt;$f = 160\text{ - }223$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$112$&lt;/td&gt;&lt;td&gt;3TDEA&lt;/td&gt;&lt;td&gt;$L=2048$&lt;br&gt;$N=224$&lt;/td&gt; &lt;td&gt;$k=2048$&lt;/td&gt; &lt;td&gt;$f = 224\text{ - }255$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$128$&lt;/td&gt;&lt;td&gt;AES-128&lt;/td&gt;&lt;td&gt;$L=3072$&lt;br&gt;$N=256$&lt;/td&gt; &lt;td&gt;$k=3072$&lt;/td&gt; &lt;td&gt;$f = 256\text{ - }383$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$192$&lt;/td&gt;&lt;td&gt;AES-192&lt;/td&gt;&lt;td&gt;$L=7680$&lt;br&gt;$N=384$&lt;/td&gt; &lt;td&gt;$k=7680$&lt;/td&gt; &lt;td&gt;$f = 384\text{ - }511$&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$256$&lt;/td&gt;&lt;td&gt;AES-256&lt;/td&gt;&lt;td&gt;$L=15360$&lt;br&gt;$N=512$&lt;/td&gt;&lt;td&gt;$k=15360$&lt;/td&gt;&lt;td&gt;$f=512+$&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Comparable strengths (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r4&#39;&gt;SP800-57 Part 1 Revision 4 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Symmetric key algorithms は共通鍵暗号アルゴリズム全般を指す。
たとえば AES とか。
IFC (Integer Factorization Cryptosystems) は素因数分解問題ベースの公開鍵暗号アルゴリズムで RSA がこれに該当する。
FFC (Finite Field Cryptosystems) は離散対数問題ベースの公開鍵暗号アルゴリズムで Diffie-Hellman や DSA などがこれに該当する。
ECC (Elliptic Curve Cryptosystems) は離散対数問題でも特に楕円曲線上の離散対数問題ベースの公開鍵暗号アルゴリズムを指す。
たとえば ECDSA や ECDH など。&lt;/p&gt;

&lt;p&gt;IFC では $k$，FFC では $L$，ECC では $f$ が鍵長を示す。
たとえばセキュリティ強度が 128bit なら&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AES 128bit&lt;/li&gt;
&lt;li&gt;DSA 3072bit&lt;/li&gt;
&lt;li&gt;RSA 3072bit&lt;/li&gt;
&lt;li&gt;ECDSA 256bit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の組み合わせで「ベストマッチ キター！」となる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/S0Zn1DRSH0w&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/figure&gt;

&lt;h2 id=&#34;セキュリティ強度と-hash-関数の関係&#34;&gt;セキュリティ強度と Hash 関数の関係&lt;/h2&gt;

&lt;p&gt;次はセキュリティ強度とHash 関数の関係を示す表。&lt;/p&gt;

&lt;div&gt;
&lt;figure lang=&#39;en&#39;&gt;
&lt;style&gt;
main table.nist3 th  {
  vertical-align:middle;
  text-align: center;
}
main table.nist3 td  {
  //vertical-align:middle;
  text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;nist3&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Security &lt;br&gt;Strength&lt;/th&gt;
&lt;th&gt;Digital Signatures and &lt;br&gt;hash-only applications&lt;/th&gt;
&lt;th&gt;HMAC,&lt;br&gt;Key Derivation Functions,&lt;br&gt;Random Number Generation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; $\le 8$0&lt;/td&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$112$&lt;/td&gt;
&lt;td&gt;SHA-224, SHA-512/224, SHA3-224&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$128$&lt;/td&gt;
&lt;td&gt;SHA-256, SHA-512/256, SHA3-25&lt;/td&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$192$&lt;/td&gt;
&lt;td&gt;SHA-384, SHA3-384&lt;/td&gt;
&lt;td&gt;SHA-224, SHA-512/224&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;$\ge 256$&lt;/td&gt;
&lt;td&gt;SHA-512, SHA3-512&lt;/td&gt;
&lt;td&gt;SHA-256, SHA-512/256,&lt;br&gt; SHA-384,&lt;br&gt; SHA-512, SHA3-512&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Hash functions that can be used to provide the targeted security strengths (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r4&#39;&gt;SP800-57 Part 1 Revision 4 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;考え方は先程の暗号鍵長のときと同じ。
ただし Hash 関数の場合は使用目的ごとに要求されるアルゴリズムが異なるので注意が必要である。&lt;/p&gt;

&lt;h2 id=&#34;セキュリティ強度と有効期限&#34;&gt;セキュリティ強度と有効期限&lt;/h2&gt;

&lt;p&gt;こちらはセキュリティ強度の有効期限を表したものだ。&lt;/p&gt;

&lt;div&gt;
&lt;figure lang=&#39;en&#39;&gt;
&lt;style&gt;
main table.nist4 th  {
  vertical-align:middle;
  text-align: center;
}
main table.nist4 td  {
  vertical-align:middle;
  text-align: center;
}
&lt;/style&gt;
&lt;table class=&#34;nist4&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&#39;2&#39;&gt;Security Strength&lt;/th&gt;
&lt;th&gt;Through&lt;br&gt; 2030&lt;/th&gt;
&lt;th&gt;2031 and&lt;br&gt; Beyond&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td rowspan=&#39;2&#39;&gt;$\lt 112$&lt;/td&gt;&lt;td&gt;Applying&lt;/td&gt;  &lt;td colspan=&#39;2&#39;&gt;Disallowed&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;                              &lt;td&gt;Processing&lt;/td&gt;&lt;td colspan=&#39;2&#39;&gt;Legacy-use&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan=&#39;2&#39;&gt;$112$&lt;/td&gt;    &lt;td&gt;Applying&lt;/td&gt;  &lt;td rowspan=&#39;2&#39;&gt;Acceptable&lt;/td&gt;&lt;td&gt;Disallowed&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;                              &lt;td&gt;Processing&lt;/td&gt;                               &lt;td&gt;Legacy use&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;$128$&lt;/td&gt;                &lt;td rowspan=&#39;3&#39;&gt;Applying/Processing&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$192$&lt;/td&gt;                                   &lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;$256$&lt;/td&gt;                                   &lt;td&gt;Acceptable&lt;/td&gt;&lt;td&gt;Acceptable&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Security-strength time frames (via &lt;q&gt;&lt;a href=&#39;https://doi.org/10.6028/NIST.SP.800-57pt1r4&#39;&gt;SP800-57 Part 1 Revision 4 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;各用語はそれぞれ&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;用語&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Applying&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;適用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Processing&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Acceptable&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;許容&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Legacy-use&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;許容（レガシー使用のみ）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Disallowed&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;禁止&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;という意味だ。
例を挙げると，セキュリティ強度 112bit の暗号スイート（Cipher Suites）を適用する場合は2030年までは許容するけど2031年以降は禁止。
すでに暗号化されているデータを復号したい場合でも，2031年以降はレガシー・システムしか許容しない，ということになる。&lt;/p&gt;

&lt;p&gt;たとえば ssh 認証は「適用」なので多くの人が使ってる RSA 2048bit の鍵は2031年以降は使用禁止となるわけだ。
まぁ，そんな先まで同じシステムで同じ鍵を使い続けるかどうかは分からないが（なので今使ってる鍵を慌てて新調する必要はない。新規に作成するなら 128bit 強度の鍵をお勧めするが）。&lt;/p&gt;

&lt;p&gt;なおこれは各アルゴリズムに危殆化要因となる脆弱性等がない場合の話である。
したがって暗号製品を使うシステムの管理者やセキュリティ管理者は常に暗号関係のトピックに耳を澄ませておくべきであろう。&lt;/p&gt;

&lt;h2 id=&#34;openpgp-で利用可能なアルゴリズム&#34;&gt;OpenPGP で利用可能なアルゴリズム&lt;/h2&gt;

&lt;p&gt;ついでに OpenPGP を規定する &lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;RFC 4880&lt;/a&gt; に載っている暗号関連アルゴリズムを挙げておく。&lt;/p&gt;

&lt;p&gt;まずは共通鍵暗号アルゴリズムから。
なお 3DES (3TDEA) の鍵長が 168bit となっているが，実質のセキュリティ強度は 112bit である。&lt;/p&gt;

&lt;div&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;アルゴリズム&lt;/th&gt;&lt;th&gt;鍵長&lt;/th&gt;&lt;th&gt;ブロック長&lt;/th&gt;&lt;th&gt;参考文献&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;1&lt;/td&gt;
&lt;td&gt;IDEA&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;64&lt;/td&gt;
&lt;td&gt;&lt;q&gt;&lt;a href=&#34;http://www.mediacrypt.com/_contents/10_idea/100000_ind.asp&#34;&gt;IDEA International Data Encryption Algorithm&lt;/a&gt;&lt;/q&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;2&lt;/td&gt;
&lt;td&gt;3DES&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;168&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;64&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://doi.org/10.6028/NIST.SP.800-67r1&#34;&gt;SP800-67 Rev.1 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;3&lt;/td&gt;
&lt;td&gt;CAST5&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;64&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc2144&#34;&gt;RFC2144&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;4&lt;/td&gt;
&lt;td&gt;Blowfish&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;64&lt;/td&gt;
&lt;td&gt;&lt;q&gt;&lt;a href=&#34;http://www.schneier.com/paper-blowfish-fse.html&#34;&gt;Description of a New Variable-Length Key, 64-Bit Block Cipher (Blowfish)&lt;/a&gt;&lt;/q&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;5&lt;/td&gt;
&lt;td&gt;(Reserved)&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;6&lt;/td&gt;
&lt;td&gt;(Reserved)&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;7&lt;/td&gt;
&lt;td&gt;AES&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://dx.doi.org/10.6028/NIST.FIPS.197&#34;&gt;FIPS PUB 197 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;8&lt;/td&gt;
&lt;td&gt;AES192&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;192&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://dx.doi.org/10.6028/NIST.FIPS.197&#34;&gt;FIPS PUB 197 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;9&lt;/td&gt;
&lt;td&gt;AES256&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;256&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://dx.doi.org/10.6028/NIST.FIPS.197&#34;&gt;FIPS PUB 197 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;10&lt;/td&gt;
&lt;td&gt;Twofish&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;256&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td&gt;&lt;q&gt;The Twofish Encryption Algorithm&lt;/q&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;11&lt;/td&gt;
&lt;td&gt;Camellia128&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc3713&#34;&gt;RFC3713&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc5581&#34;&gt;RFC5581&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;12&lt;/td&gt;
&lt;td&gt;Camellia192&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;192&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc3713&#34;&gt;RFC3713&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc5581&#34;&gt;RFC5581&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;13&lt;/td&gt;
&lt;td&gt;Camellia256&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;256&lt;/td&gt;
&lt;td class=&#39;right&#39;&gt;128&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc3713&#34;&gt;RFC3713&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc5581&#34;&gt;RFC5581&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;OpenPGP で使用可能な共通鍵暗号アルゴリズム一覧&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;余談だが &lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000451.shtml&#34; title=&#34;The Camellia Cipher in OpenPGP — Baldanders.info&#34;&gt;Camellia 暗号は日本製&lt;/a&gt;である。&lt;/p&gt;

&lt;p&gt;続いて公開鍵暗号アルゴリズム。&lt;/p&gt;

&lt;div&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;アルゴリズム&lt;/th&gt;&lt;th&gt;参考文献&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;1&lt;/td&gt;
&lt;td&gt;RSA&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc3447&#34;&gt;RFC3447&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;2&lt;/td&gt;
&lt;td&gt;RSA Encrypt-Only&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc3447&#34;&gt;RFC3447&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;3&lt;/td&gt;
&lt;td&gt;RSA Sign-Only&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc3447&#34;&gt;RFC3447&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;...&lt;/td&gt;
&lt;td&gt;(Reserved)&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;16&lt;/td&gt;
&lt;td&gt;Elgamal&lt;br&gt;(Encrypt-Only)&lt;/td&gt;
&lt;td&gt;&lt;q&gt;&lt;a href=&#34;http://crypto.csail.mit.edu/classes/6.857/papers/elgamal.pdf&#34;&gt;A public key cryptosystem and a signature scheme based on discrete logarithms &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;17&lt;/td&gt;
&lt;td&gt;DSA&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf&#34;&gt;FIPS PUB 186-4 &lt;sup&gt; &lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;18&lt;/td&gt;
&lt;td&gt;ECDH&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar2.pdf&#34;&gt;SP800-56A Revision 2 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc6637&#34;&gt;RFC6637&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;19&lt;/td&gt;
&lt;td&gt;ECDSA&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf&#34;&gt;FIPS PUB 186-4 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc6637&#34;&gt;RFC6637&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;20&lt;/td&gt;
&lt;td&gt;(Reserved)&lt;/td&gt;
&lt;td&gt;(formerly Elgamal Encrypt or Sign)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;21&lt;/td&gt;
&lt;td&gt;(Diffie-Hellman)&lt;/td&gt;
&lt;td&gt;ANSI &lt;a href=&#34;http://www.x9.org/&#34;&gt;X9&lt;/a&gt;.42, as defined for IETF-S/MIME&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;22&lt;/td&gt;
&lt;td&gt;EdDSA (draft)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://link.springer.com/article/10.1007%2Fs13389-012-0027-1&#34;&gt;High-speed high-security signatures&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;OpenPGP で使用可能な公開鍵暗号アルゴリズム一覧&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Pub20 の Elgamal は，元々暗号化と署名の両方できるものだったが，脆弱性が見つかったため OpenPGP では使用禁止になった。
Pub21 の Diffie-Hellman は予約済みになってるが実装されている製品はない。&lt;/p&gt;

&lt;p&gt;さらに Hash 関数。&lt;/p&gt;

&lt;div&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;アルゴリズム&lt;/th&gt;&lt;th&gt;参考文献&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;1&lt;/td&gt;
&lt;td&gt;MD5&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1321&#34;&gt;RFC1321&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;2&lt;/td&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf&#34;&gt;FIPS PUB 186-4 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;3&lt;/td&gt;
&lt;td&gt;RIPE-MD/160&lt;/td&gt;
&lt;td&gt;&lt;q&gt;&lt;a href=&#34;http://homes.esat.kuleuven.be/~bosselae/ripemd160.html&#34;&gt;The hash function RIPEMD-160&lt;/a&gt;&lt;/q&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;4&lt;/td&gt;
&lt;td&gt;(Reserved)&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;5&lt;/td&gt;
&lt;td&gt;(Reserved)&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;6&lt;/td&gt;
&lt;td&gt;(Reserved)&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;7&lt;/td&gt;
&lt;td&gt;(Reserved)&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;8&lt;/td&gt;
&lt;td&gt;SHA256&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf&#34;&gt;FIPS PUB 180-4 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;9&lt;/td&gt;
&lt;td&gt;SHA384&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf&#34;&gt;FIPS PUB 180-4 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;10&lt;/td&gt;
&lt;td&gt;SHA512&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf&#34;&gt;FIPS PUB 180-4 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td class=&#39;right&#39;&gt;11&lt;/td&gt;
&lt;td&gt;SHA224&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf&#34;&gt;FIPS PUB 180-4 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;OpenPGP で使用可能な一方向ハッシュ関数一覧&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://www.nist.gov/news-events/news/2015/08/nist-releases-sha-3-cryptographic-hash-standard&#34; title=&#34;NIST Releases SHA-3 Cryptographic Hash Standard | NIST&#34;&gt;SHA-3&lt;/a&gt; (&lt;span&gt;&lt;a href=&#34;http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf&#34;&gt;FIPS PUB 202 &lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;) を OpenPGP にどのように組み込むかについては，現在&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000866.shtml&#34; title=&#34;SHA-3 が OpenPGP に組み込まれる（予定） — Baldanders.info&#34;&gt;検討中&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;パスワードの強度&#34;&gt;パスワードの強度&lt;/h2&gt;

&lt;p&gt;これは &lt;a href=&#34;https://www.nist.gov/&#34; title=&#34;National Institute of Standards and Technology | NIST&#34;&gt;NIST&lt;/a&gt; ではなく IPA の資料だが，文字種と文字数の組み合わせによるパスワードの強度についても上げておこう。
出典は以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ipg/documents/dev_setting_crypt.html&#34;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://www.ipa.go.jp/files/000026760.pdf&#34;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
&lt;figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&#39;4&#39;&gt;利用する文字種類数と内訳&lt;/th&gt;
&lt;th colspan=&#39;4&#39;&gt;パスワード長&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;種類数&lt;/th&gt;
&lt;th&gt;数字&lt;/th&gt;
&lt;th&gt;文字&lt;/th&gt;
&lt;th&gt;シンボル&lt;/th&gt;
&lt;th&gt;4文字&lt;/th&gt;
&lt;th&gt;8文字&lt;/th&gt;
&lt;th&gt;12文字&lt;/th&gt;
&lt;th&gt;16文字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;10種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;      &lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{13.3}$）&lt;/td&gt;&lt;td&gt;1円未満（$2^{26.6}$）&lt;/td&gt;  &lt;td&gt;約35円（$2^{39.9}$）&lt;/td&gt;     &lt;td&gt;約35万円（$2^{53.2}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;36種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;/td&gt;       &lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{20.7}$）&lt;/td&gt;&lt;td&gt;約100円（$2^{41.4}$）&lt;/td&gt;  &lt;td&gt;約1.65億円（$2^{62.0}$）&lt;/td&gt; &lt;td&gt;約276兆円（$2^{82.7}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;62種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{23.8}$）&lt;/td&gt;&lt;td&gt;約7,500円（$2^{47.6}$）&lt;/td&gt;&lt;td&gt;約1,120億円（$2^{71.5}$）&lt;/td&gt;&lt;td&gt;約165京円（$2^{95.3}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;94種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;&lt;td&gt;&lt;code style=&#39;font-size:smaller;&#39;&gt;! &#34; # $ %&lt;br&gt;&amp;amp; &#39; ( ) =&lt;br&gt;~ | - ^ `&lt;br&gt;¥ { @ [&lt;br&gt;+ * ] ; :&lt;br&gt;} &amp;lt; &amp;gt; ? _&lt;br&gt;, . /&lt;/code&gt;&lt;/td&gt;
                                                             &lt;td&gt;1円未満（$2^{26.2}$）&lt;/td&gt;&lt;td&gt;約21万円（$2^{52.4}$）&lt;/td&gt; &lt;td&gt;約16.5兆円（$2^{78.7}$）&lt;/td&gt; &lt;td&gt;約129,000京円（$2^{104.9}$）&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;パスワード解読の想定コスト例（&lt;q&gt;&lt;a href=&#39;https://www.ipa.go.jp/files/000026760.pdf&#39;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 2.4.2.2項より）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;測定基準は以下の通り。&lt;/p&gt;

&lt;div&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;利用できる文字種類すべてを完全にランダムに選択して作ったパスワードを一つ一つ調べる全数探索により1日で解読しようとした際にかかるおおまかな想定攻撃コストを示しています。ここでは、全数探索(暗号鍵の総数256)でDES10を1日で解読するためのコストを約250万円と仮定します。また、パスワードを1つ検査するのとDESの暗号鍵を1つ検査するコストは同じであるとし、パスワードを求めるのに必要な計算量(検査する個数)が半分になればコストも半分、2倍になればコストも2倍になるものとしています。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#39;https://www.ipa.go.jp/files/000026760.pdf&#39;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 2.4.2.2項より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000740.shtml&#34;&gt;CRYPTREC Report 2013 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000810.shtml&#34;&gt;Prohibiting RC4 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cryptrec.go.jp/topics/cryptrec_20151218_sha1_cryptanalysis.html&#34;&gt;CRYPTREC | SHA-1の安全性について&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.cryptrec.go.jp/report/c13_tech_guideline_SHA-1_web.pdf&#34;&gt;CRYPTREC暗号技術ガイドライン(SHA-1) &lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.visvirial.com/articles/519&#34;&gt;scryptがGPUに破られる時 | びりあるの研究ノート&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/02/sha-1-collision/&#34;&gt;最初の SHA-1 衝突例&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/10/changes-in-password-best-practices/&#34;&gt;「パスワードのベストプラクティス」が変わる&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「パスワードのベストプラクティス」が変わる - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/10/changes-in-password-best-practices/" />
		<id>tag:text.Baldanders.info,2017-10-16:/remark/2017/10/changes-in-password-best-practices/</id>
		<published>2017-10-16T19:21:02+09:00</published>
		<updated>2017-10-18T15:02:52+09:00</updated>
		<summary>Bruce Schneier 氏の「Changes in Password Best Practices」の内容が簡潔だったので「そのうち紹介しなくちゃ」と思っていたが，先を越されたっぽい感じなので，便乗記事として上げておく（笑）</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;Bruce Schneier 氏の “&lt;a href=&#34;https://www.schneier.com/blog/archives/2017/10/changes_in_pass.html&#34; title=&#34;Changes in Password Best Practices - Schneier on Security&#34;&gt;Changes in Password Best Practices&lt;/a&gt;” の内容が簡潔だったので「そのうち紹介しなくちゃ」と思っていたが，先を越されたっぽい感じなので，便乗記事として上げておく（笑）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://itpro.nikkeibp.co.jp/atcl/column/17/092800400/101200002/&#34;&gt;やばいパスワード - 複雑なパスワードを強制、でも破られやすいという現実：ITpro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まずは “&lt;a href=&#34;https://www.schneier.com/blog/archives/2017/10/changes_in_pass.html&#34; title=&#34;Changes in Password Best Practices - Schneier on Security&#34;&gt;Changes in Password Best Practices&lt;/a&gt;” で挙げられている3つの要件を以下に紹介する。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop it with the annoying password complexity rules. They make passwords harder to remember. They increase errors because artificially complex passwords are harder to type in. And they don&amp;rsquo;t help that much. It&amp;rsquo;s better to allow people to &lt;strong&gt;use pass phrases&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;top it with password expiration. That was &lt;a href=&#34;https://securingthehuman.sans.org/blog/2017/03/23/time-for-password-expiration-to-die&#34; title=&#34;Security Awareness Blog | Time for Password Expiration to Die&#34;&gt;an old idea for an old way&lt;/a&gt; we used computers. Today, &lt;strong&gt;don&amp;rsquo;t make people change their passwords unless there&amp;rsquo;s indication of compromise&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Let people &lt;strong&gt;use password managers&lt;/strong&gt;. This is how we deal with all the passwords we need.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;強調部分は私によるものである。&lt;/p&gt;

&lt;h2 id=&#34;生成規則が複雑なだけのパスワードではダメ&#34;&gt;生成規則が複雑なだけのパスワードではダメ&lt;/h2&gt;

&lt;p&gt;最初の要件は，いたずらに複雑なパスワード生成規則を強要するな，というものだ。
ここで勘違いしてもらっては困るのだが，これは「複雑なパスワードはダメ」と言っているのではない。&lt;/p&gt;

&lt;p&gt;パスワードの要件は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;できるだけ文字数が多いこと&lt;/li&gt;
&lt;li&gt;出来るだけ文字種が多いこと&lt;/li&gt;
&lt;li&gt;出来るだけランダムに文字を選ぶこと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の3つである。
これを人力で作って覚えるのは難しい。&lt;/p&gt;

&lt;p&gt;パスワードの強度に関して IPA が2013年に発表した資料がある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/ipg/documents/dev_setting_crypt.html&#34;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://www.ipa.go.jp/files/000026760.pdf&#34;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうちの「&lt;span&gt;&lt;a href=&#34;https://www.ipa.go.jp/files/000026760.pdf&#34;&gt;解説編 &lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;」にパスワードの解読されやすさの一覧表がある。
以下に引用しよう。&lt;/p&gt;

&lt;div&gt;
&lt;figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&#39;4&#39;&gt;利用する文字種類数と内訳&lt;/th&gt;
&lt;th colspan=&#39;4&#39;&gt;パスワード長&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;種類数&lt;/th&gt;
&lt;th&gt;数字&lt;/th&gt;
&lt;th&gt;文字&lt;/th&gt;
&lt;th&gt;シンボル&lt;/th&gt;
&lt;th&gt;4文字&lt;/th&gt;
&lt;th&gt;8文字&lt;/th&gt;
&lt;th&gt;12文字&lt;/th&gt;
&lt;th&gt;16文字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;10種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;      &lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{13.3}$）&lt;/td&gt;&lt;td&gt;1円未満（$2^{26.6}$）&lt;/td&gt;  &lt;td&gt;約35円（$2^{39.9}$）&lt;/td&gt;     &lt;td&gt;約35万円（$2^{53.2}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;36種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;/td&gt;       &lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{20.7}$）&lt;/td&gt;&lt;td&gt;約100円（$2^{41.4}$）&lt;/td&gt;  &lt;td&gt;約1.65億円（$2^{62.0}$）&lt;/td&gt; &lt;td&gt;約276兆円（$2^{82.7}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;62種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満（$2^{23.8}$）&lt;/td&gt;&lt;td&gt;約7,500円（$2^{47.6}$）&lt;/td&gt;&lt;td&gt;約1,120億円（$2^{71.5}$）&lt;/td&gt;&lt;td&gt;約165京円（$2^{95.3}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;94種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;&lt;td&gt;&lt;code style=&#39;font-size:smaller;&#39;&gt;! &#34; # $ %&lt;br&gt;&amp;amp; &#39; ( ) =&lt;br&gt;~ | - ^ `&lt;br&gt;¥ { @ [&lt;br&gt;+ * ] ; :&lt;br&gt;} &amp;lt; &amp;gt; ? _&lt;br&gt;, . /&lt;/code&gt;&lt;/td&gt;
                                                             &lt;td&gt;1円未満（$2^{26.2}$）&lt;/td&gt;&lt;td&gt;約21万円（$2^{52.4}$）&lt;/td&gt; &lt;td&gt;約16.5兆円（$2^{78.7}$）&lt;/td&gt; &lt;td&gt;約129,000京円（$2^{104.9}$）&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;パスワード解読の想定コスト例（&lt;q&gt;&lt;a href=&#39;https://www.ipa.go.jp/files/000026760.pdf&#39;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 2.4.2.2項より）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;見たらわかると思うが，文字種の多さより文字数の多いほうがインパクトがあることが分かる。
数英大小文字記号すべて使って8文字のパスワードを作っても&lt;strong&gt;1日で解読完了させるコスト&lt;/strong&gt;は21万円ほどだが，これは数字だけで16文字からなるパスワードよりもコストが低い。&lt;/p&gt;

&lt;p&gt;ただしこれは最もコストの高い「総当たり攻撃」の場合である（しかも4年も前の話だ）。&lt;/p&gt;

&lt;div&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;利用できる文字種類すべてを完全にランダムに選択して作ったパスワードを一つ一つ調べる全数探索により1日で解読しようとした際にかかるおおまかな想定攻撃コストを示しています。ここでは、全数探索(暗号鍵の総数256)でDES10を1日で解読するためのコストを約250万円と仮定します。また、パスワードを1つ検査するのとDESの暗号鍵を1つ検査するコストは同じであるとし、パスワードを求めるのに必要な計算量(検査する個数)が半分になればコストも半分、2倍になればコストも2倍になるものとしています。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#39;https://www.ipa.go.jp/files/000026760.pdf&#39;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#39;fa fa-file-pdf-o&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 2.4.2.2項より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;したがって辞書にあるような単語を組み合わせたパスフレーズの場合は，余程の単語数が必要になる。
たとえば「&lt;a href=&#34;http://itpro.nikkeibp.co.jp/atcl/column/17/092800400/101200002/&#34; title=&#34;やばいパスワード - 複雑なパスワードを強制、でも破られやすいという現実：ITpro&#34;&gt;やばいパスワード&lt;/a&gt;」で紹介されている方法では&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;テレビは1日1時間 → Terebi ha 1 niti 1 Jikan  → Terebiha1niti1Jikan&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;といった感じで19文字のパスワードを生成していて，先程の表で照らし合わせると，総当たり攻撃なら，ほとんど天文学的なコストになるが，実際にはそれぞれの単語が攻撃側の辞書にある場合は，たったの6単語しかないわけで，やり方によっては解読コストをかなり引き下げられる可能性もある（犯罪者側の最近の事情をよく知らないので杞憂かもしれないが）。&lt;/p&gt;

&lt;p&gt;パスフレーズというのは，もともと「辞書攻撃」などない長閑な時代に PGP などのセキュリティ製品に採用されていたもので（今でも GnuPG ではパスフレーズが使用できる）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;I could tell you my pass phrase, but then I would have to kill you.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;みたいな比較的長い文（phrase）を使うことを想定している&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:pgp1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:pgp1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
したがってパスワード解読技術が向上している今の時代に単語を組み合わせただけのパスフレーズがどこまで効果的かは正直に言って分からない。
しかし “&lt;code&gt;Password!1&lt;/code&gt;” みたいな「法令遵守の観点から社内規則に則ってはいるけど機械で容易に推測可能なパスワード」よりは遥かにマシということなのである。&lt;/p&gt;

&lt;h2 id=&#34;パスワードの有効期限など無意味&#34;&gt;パスワードの有効期限など無意味&lt;/h2&gt;

&lt;p&gt;2番目の要件は既に散々言われていることなので今更であろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/07/02-stories/&#34;&gt;週末スペシャル： 「パスワードの定期変更はすべきでない」，他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;追記-パスワード定期変更の起源&#34;&gt;【追記】 パスワード定期変更の起源？&lt;/h3&gt;

&lt;p&gt;「&lt;a href=&#34;http://www.jnsa.org/aboutus/jnsaml/ml-57special.html&#34;&gt;JNSAメールマガジン　臨時号　2015.4.3.&lt;/a&gt;」によると&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;パスワードの定期的な変更は、パスワード文字列が4文字だった時代にパスワードの総当たり攻撃(ブルートフォース攻撃)の対策として実施したことが起源と言われている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.jnsa.org/aboutus/jnsaml/ml-57special.html&#34;&gt;JNSAメールマガジン　臨時号　2015.4.3.&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;なんだそうだ。
ホンマかいな（笑）&lt;/p&gt;

&lt;p&gt;むしろ，ネットワーク管理者やセキュリティ管理者が自分たちの仕事（アカウント管理）を面倒臭がって「放っておいても期限切れになる」パスワード運用を強制した，のほうに1票いれるよ。&lt;/p&gt;

&lt;h2 id=&#34;パスワード管理ツールを使え&#34;&gt;パスワード管理ツールを使え&lt;/h2&gt;

&lt;p&gt;3番目の要件もおなじみのやつである。&lt;/p&gt;

&lt;p&gt;最近はウイルス対策ソフトを提供しているセキュリティ企業がパスワード管理ツールも提供していたりするので，そちらを使う手もある。
私としては &lt;a href=&#34;https://keepass.info/&#34; title=&#34;KeePass Password Safe&#34;&gt;KeePass&lt;/a&gt; を是非オススメするが。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://keepass.info/&#34;&gt;KeePass Password Safe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://keepass.info/&#34; title=&#34;KeePass Password Safe&#34;&gt;KeePass&lt;/a&gt; はオープンソースのパスワード管理ツールで Windows の .NET Framework 用だが Linux 用に &lt;a href=&#34;http://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; で動作するバージョンも存在する。
また Android や iOS で動作する互換アプリも存在する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=keepass2android.keepass2android&#34;&gt;Keepass2Android Password Safe - Google Play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;パスワード管理ツールにはデータ暗号化にマスタパスワードを要求するものが多いが， &lt;a href=&#34;https://keepass.info/&#34; title=&#34;KeePass Password Safe&#34;&gt;KeePass&lt;/a&gt; では暗号鍵ファイルで暗号化できるのでマスタパスワードも不要だ（マスタパスワードと組み合わせることも可能）。
暗号鍵ファイルさえ適切に管理すればパスワードを格納した DB ファイルをクラウドに置いて（他人に見えないところに置いてね）機器間で共有することもできる。&lt;/p&gt;

&lt;h2 id=&#34;パスワードを覚えようとか考えないこと&#34;&gt;パスワードを覚えようとか考えないこと&lt;/h2&gt;

&lt;p&gt;いつも言っていることだが「&lt;strong&gt;パスワードを覚えるなんて脳みその無駄使い&lt;/strong&gt;」である。
最初に述べた3要件を満たすパスワードをツールで生成させてツールで管理すればよい。
どうしても不安ならば紙に書いて誰にも知られないように管理する手もある。
パスフレーズだって「覚えないといけない」という点では同じことなのだ。&lt;/p&gt;

&lt;p&gt;「セキュリティと利便性のトレードオフ」なんてのは昔の話である。
適切な運用をすればセキュリティも利便性も両方確保できる。
それをしないのは単なる怠慢だ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://pages.nist.gov/800-63-3/&#34;&gt;NIST SP 800-63 Digital Identity Guidelines&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.sbbit.jp/article/cont1/33969&#34;&gt;崩れる「安全なパスワード」神話　否定される過去の基準、追従できない現場の課題 ｜ビジネス+IT&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35105725/&#34;&gt;あの「面倒なパスワード作成ルール」、作った人も後悔していた - ZDNet Japan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4900900028/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/5132396FFQL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4900900028/baldandersinf-22/&#34;&gt;PGP―暗号メールと電子署名&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;シムソン ガーフィンケル Simson Garfinkel &lt;/dd&gt;&lt;dd&gt;オライリー・ジャパン 1996-04&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;3&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4756136494/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4756136494.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング作法&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320026926/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4320026926.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング言語C 第2版 ANSI規格準拠&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797350997/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797350997.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新版暗号技術入門 秘密の国のアリス&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798132608/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798132608.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報処理教科書 高度試験午後II論述 春期・秋期 (EXAMPRESS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798105538.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;エンタープライズ アプリケーションアーキテクチャパターン (Object Oriented Selection)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;良書なのだが，残念ながら内容が古すぎた。 PGP の歴史資料として読むならいいかもしれない。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-10-16&#34;&gt;2014/10/16&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:pgp1&#34;&gt;この物騒なパスフレーズは Simson Garfinkel 氏の『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4900900028/baldandersinf-22/&#34; title=&#34;Amazon | PGP―暗号メールと電子署名 | シムソン ガーフィンケル, Simson Garfinkel, ユニテック 通販&#34;&gt;PGP&lt;/a&gt;』に載っていたものである。パスフレーズは文字数や文字種の制限がないのが特徴である。もし入力に日本語（UTF-8）が使えるのなら，海外の犯罪者に対しては，かなり強力なパスフレーズができると思うんだけどねぇ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:pgp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
