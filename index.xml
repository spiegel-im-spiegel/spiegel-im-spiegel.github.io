<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2017-04-25:/</id>
	<updated>2017-04-25T22:16:55+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.20.5</generator>

	
	<entry>
		<title>Punycode によるホモグラフ攻撃例とその回避 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/04/homograph-attack/" />
		<id>tag:text.Baldanders.info,2017-04-25:/remark/2017/04/homograph-attack/</id>
		<published>2017-04-25T22:16:55+09:00</published>
		<updated>2017-04-29T17:03:45+09:00</updated>
		<summary>この手の攻撃の回避法だが， Chrome についてはバージョン 58 以降であれば対応済みである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xudongz.com/blog/2017/idn-phishing/&#34;&gt;Phishing with Unicode Domains - Xudong Zheng&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば，以下の &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コードで2つの “apple&amp;rdquo; を考える（元ネタは&lt;a href=&#34;https://play.golang.org/p/BzJVWN78pA&#34; title=&#34;The Go Playground&#34;&gt;ここ&lt;/a&gt;）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	for _, value := range &amp;quot;apple&amp;quot; {
		fmt.Printf(&amp;quot;%#U\n&amp;quot;, value)
	}
	fmt.Println()
	for _, value := range &amp;quot;аррӏе&amp;quot; {
		fmt.Printf(&amp;quot;%#U\n&amp;quot;, value)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;見た目では分かりにくいかもしれないが，最初の “apple&amp;rdquo; は US ASCII で2番目の “аррӏе&amp;rdquo; はキリル文字なんだそうだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:grp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:grp&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
このコードの実行結果は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;U+0061 &#39;a&#39;
U+0070 &#39;p&#39;
U+0070 &#39;p&#39;
U+006C &#39;l&#39;
U+0065 &#39;e&#39;

U+0430 &#39;а&#39;
U+0440 &#39;р&#39;
U+0440 &#39;р&#39;
U+04CF &#39;ӏ&#39;
U+0435 &#39;е&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;現在，国際化ドメイン名（Internationalized Domain Name; IDN）については &lt;code&gt;xn--&lt;/code&gt; から始まる &lt;a href=&#34;https://en.wikipedia.org/wiki/Punycode&#34; title=&#34;Punycode - Wikipedia&#34;&gt;punycode&lt;/a&gt; を使った表記が認められている。
更に &lt;a href=&#34;https://en.wikipedia.org/wiki/Punycode&#34; title=&#34;Punycode - Wikipedia&#34;&gt;punycode&lt;/a&gt; を使った「ホモグラフ攻撃（homograph attack）」については以前から議論があり，少なくとも複数の言語の文字が混在する場合はブラウザ側で Unicode 文字による表記がキャンセルされる。
たとえば &lt;code&gt;xn-pple-43d.com&lt;/code&gt; は Unicode 表記では &lt;code&gt;аpple.com&lt;/code&gt; （先頭の а がキリル文字）だが， Chrome や Firefox といった主要ブラウザでは &lt;a href=&#34;https://en.wikipedia.org/wiki/Punycode&#34; title=&#34;Punycode - Wikipedia&#34;&gt;punycode&lt;/a&gt; のまま &lt;code&gt;xn-pple-43d.com&lt;/code&gt; と表記される（試さないように）。&lt;/p&gt;

&lt;p&gt;しかし複数言語が混在しない場合，つまり最初に挙げたキリル文字だけの “аррӏе&amp;rdquo; のような場合にはこの制約は効かない。
その言語による真っ当な名前なのかホモグラフ攻撃なのか見分けがつかないからである。
たとえば &lt;code&gt;xn--80ak6aa92e.com&lt;/code&gt; は &lt;code&gt;аррӏе.com&lt;/code&gt; だが “аррӏе&amp;rdquo; の部分は全てキリル文字なので主要ブラウザでも &lt;code&gt;аррӏе.com&lt;/code&gt; と表示される。&lt;/p&gt;

&lt;p&gt;PoC として &lt;a href=&#34;https://www.xn--80ak6aa92e.com/&#34;&gt;https://www.xn--80ak6aa92e.com/&lt;/a&gt; が用意されているので，皆さんが使っているブラウザで（証明書の詳細情報も含めて）ドメイン名がどう表示されるか確認して欲しい。&lt;/p&gt;

&lt;p&gt;さて，この手の攻撃の回避法だが， Chrome についてはバージョン 58 以降であれば &lt;code&gt;xn--80ak6aa92e.com&lt;/code&gt; も &lt;a href=&#34;https://en.wikipedia.org/wiki/Punycode&#34; title=&#34;Punycode - Wikipedia&#34;&gt;punycode&lt;/a&gt; 表記になる。
どういうロジックなのかは不明&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:idn&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:idn&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
Firefox については，設定の &lt;code&gt;network.IDN_show_punycode&lt;/code&gt; 項目&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cfg&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cfg&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; を true にすれば強制的に &lt;a href=&#34;https://en.wikipedia.org/wiki/Punycode&#34; title=&#34;Punycode - Wikipedia&#34;&gt;punycode&lt;/a&gt; 表記になる。&lt;/p&gt;

&lt;p&gt;個人的には国際化ドメイン名は要らんのじゃないかと思うのだが，どうなんだろうねぇ。
果てしなく紛らわしい。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://arstechnica.com/security/2017/04/chrome-firefox-and-opera-users-beware-this-isnt-the-apple-com-you-want/&#34;&gt;Chrome, Firefox, and Opera users beware: This isn’t the apple.com you want | Ars Technica&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://securingtomorrow.mcafee.com/business/neutralize-threats/chrome-and-firefox-adding-protection-against-this-nasty-phishing-trick/&#34;&gt;Chrome And Firefox Adding Protection Against This Nasty Phishing Trick | McAfee Blogs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=683314&#34;&gt;683314 - Security: Whole-script confusable domain label spoofing (Cyrillic) - chromium - Monorail&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=1332714&#34;&gt;1332714 - IDN Phishing using whole-script confusables on Windows and Linux&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://forest.watch.impress.co.jp/docs/news/1055935.html&#34;&gt;「Google Chrome 58」が正式版に ～“Indexed DB 2.0”対応と29件の脆弱性修正 - 窓の杜&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://eset-info.canon-its.jp/malware_info/special/detail/151001.html&#34;&gt;本物と偽物の区別がつかないホモグラフ攻撃 | マルウェア情報局&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://punycode.jp/&#34;&gt;日本語JPドメイン名のPunycode変換・逆変換 - 日本語.jp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.arearesearch.co.jp/learn/program/06.html&#34;&gt;日本語ドメイン→Punycode表記への変換 | IPラーニング&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:grp&#34;&gt;キリル文字の “аррӏе&amp;rdquo; の並びに意味はない。ここでは単純に字形の類似性のみに着目して考える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:grp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:idn&#34;&gt;Firefox のように &lt;a href=&#34;https://en.wikipedia.org/wiki/Punycode&#34; title=&#34;Punycode - Wikipedia&#34;&gt;punycode&lt;/a&gt; をまるっと無視するのではないようだ。たとえば Chrome 58 でも「情報処理試験.jp（&lt;code&gt;xn--n9q36mh1hnxuksz7wt.jp&lt;/code&gt;）」はちゃんと Unicode 表記になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:idn&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cfg&#34;&gt;&lt;code&gt;about:config&lt;/code&gt; から設定する。 “punycode&amp;rdquo; で検索すれば一発で出てくる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cfg&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>“regist” という単語は存在しない - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/04/regist-dose-not-exist/" />
		<id>tag:text.Baldanders.info,2017-04-24:/remark/2017/04/regist-dose-not-exist/</id>
		<published>2017-04-24T09:42:55+09:00</published>
		<updated>2017-04-24T09:42:55+09:00</updated>
		<summary>ちょうど2年前に書いた記事の再掲載です。マジで英語不得手なものですみません。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;ちょうど&lt;a href=&#34;https://medium.com/@spiegel/-f067ee75ff3c&#34; title=&#34;“regist” という単語は存在しない – Der Spiegel im Spiegel – Medium&#34;&gt;2年前に書いた記事&lt;/a&gt;の再掲載です。
マジで英語不得手なものですみません。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;仕事で「登録って regist だっけ？」と思ってググったら，あちこちのページで「regist なんて単語は存在しねーよ，くそが！」（←超意訳）と物凄い勢いで怒られた。
正しくは “register”。この単語で動詞も名詞も表せる。&lt;/p&gt;

&lt;p&gt;英語不得手なのでどうしてもこの手の勘違いが発生するのよ。
まぁ気が付いたら直すだけだけど。
もしくは，本当は regist は resist の typo で私は今作ってるシステムに反抗したいのかもしれない。&lt;/p&gt;

&lt;p&gt;なんてなことはない。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ryounagaoka/items/290885ee3291b393fe1f&#34;&gt;IT業界で横行する恥ずかしい英語発音 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>『Goプログラミング実践入門』を眺める - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/04/go-web-programming/" />
		<id>tag:text.Baldanders.info,2017-04-23:/remark/2017/04/go-web-programming/</id>
		<published>2017-04-23T19:08:38+09:00</published>
		<updated>2017-04-24T09:26:58+09:00</updated>
		<summary>個人的には context パッケージについて解説があるとなおよかったが， Go 言語 の 1.6 をベースに書かれているので無理か。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://www.manning.com/books/go-web-programming&#34; title=&#34;Manning | Go Web Programming&#34;&gt;原書のタイトルが “Go Web Programming&amp;rdquo;&lt;/a&gt; となっている通り，『&lt;a href=&#34;http://book.impress.co.jp/books/1115101145&#34; title=&#34;Goプログラミング実践入門 標準ライブラリでゼロからWebアプリを作る - インプレスブックス&#34;&gt;Goプログラミング実践入門&lt;/a&gt;』は「Web アプリケーションまたはサービスのプログラミング」について &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のコードを使って解説している本である。
しかも「実践入門」というよりは基礎学習に近い内容。
したがって既に現場でばりばりコードを書いてる人には物足りないだろう。
そういう人は（少し前に出た本だけど）オライリー・ジャパンの『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; title=&#34;Go言語によるWebアプリケーション開発 | Mat Ryer, 鵜飼 文敏, 牧野 聡 |本 | 通販 | Amazon&#34;&gt;Go言語によるWebアプリケーション開発&lt;/a&gt;』のほうがいいかもしれない。&lt;/p&gt;

&lt;p&gt;特徴的なのが， &lt;a href=&#34;https://echo.labstack.com/&#34; title=&#34;Echo - High performance, minimalist Go web framework&#34;&gt;Echo&lt;/a&gt; のような有名どころのフレームワークは使わず， &lt;a href=&#34;https://golang.org/pkg/net/&#34; title=&#34;net - The Go Programming Language&#34;&gt;&lt;code&gt;net&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://golang.org/pkg/net/http/&#34; title=&#34;http - The Go Programming Language&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://golang.org/pkg/html/&#34; title=&#34;html - The Go Programming Language&#34;&gt;&lt;code&gt;html&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://golang.org/pkg/html/template/&#34; title=&#34;template - The Go Programming Language&#34;&gt;&lt;code&gt;template&lt;/code&gt;&lt;/a&gt; といった標準パッケージのみで解説しているところ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:pkg&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:pkg&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
大昔によくあった， TCP/IP の解説を C 言語コードで行ったり CGI (Common Gateway Interface) の解説を Perl のコードで行ってた技術解説本のようなノリがあってなかなか楽しく読めた。&lt;/p&gt;

&lt;p&gt;Web アプリケーション以外でもそうだけど，フレームワークって「中身」がちゃんと分かってないと適切に使えないよね。
そういう意味ではよく出来てると思う。
個人的には &lt;a href=&#34;https://golang.org/pkg/context/&#34; title=&#34;context - The Go Programming Language&#34;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt; パッケージについて解説があるとなおよかったが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt; の 1.6 をベースに書かれているので無理か。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XKPNVWV/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51dQZeafzvL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XKPNVWV/baldandersinf-22/&#34;&gt;Goプログラミング実践入門　標準ライブラリでゼロからWebアプリを作る impress top gearシリーズ&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Sau Sheong Chang 武舎 広幸 阿部 和也 上西 昌弘 &lt;/dd&gt;&lt;dd&gt;インプレス 2017-03-17&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06Y3JV86V/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06Y3JV86V.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;IoTエンジニア養成読本&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XTKZS7J/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06XTKZS7J.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Electronではじめるアプリ開発 ～JavaScript/HTML/CSSでデスクトップアプリを作ろう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XJ86BFZ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06XJ86BFZ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング経験者がGo言語を本格的に勉強する前に読むための本&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XNQCW7B/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06XNQCW7B.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;徹底マスター JavaScriptの教科書　プログラミングの教養から、言語仕様、開発技法までが正しく身につく&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01LMS7B1O/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01LMS7B1O.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;みんなのGo言語[現場で使える実践テクニック]&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06X9PL5WD/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06X9PL5WD.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Elixir/Phoenix 初級②: データベースとクエリ構造体 (OIAX BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01MUS2RP9/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01MUS2RP9.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;JavaScriptエンジニアが手っ取り早くReactの基礎を理解するための「超」入門書&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01N183E3H/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01N183E3H.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;nginx実践ガイド impress top gearシリーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01FH3KRTI/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01FH3KRTI.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01N1GOX62/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01N1GOX62.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;WebデベロッパーのためのReact開発入門 JavaScript UIライブラリの基本と活用&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;Web アプリケーションまたはサービスについて Go 言語のコードで解説。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-04-23&#34;&gt;2017-04-23&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51UoREcNrnL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34;&gt;Go言語によるWebアプリケーション開発&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Mat Ryer 鵜飼 文敏 &lt;/dd&gt;&lt;dd&gt;オライリージャパン 2016-01-22&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621300253.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング言語Go&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117607/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117607.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;マイクロサービスアーキテクチャ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774178667/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774178667.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;nginx実践入門 (WEB+DB PRESS plus)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4863541783/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4863541783.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;改訂2版 基礎からわかる Go言語&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774179930/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774179930.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;サーバ/インフラエンジニア養成読本 DevOps編 [Infrastructure as Code を実践するノウハウが満載! ] (Software Design plus)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;日本語監訳者による解説（付録 B）が意外に役に立つ感じ。 Web アプリケーションだけでなく，サーバサイドで動く CLI アプリへの言及もある。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-13&#34;&gt;2016-03-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:pkg&#34;&gt;テストフレームワークや ORM (Object-Relational Mapping) についてはサードパーティのパッケージも紹介している。また RDBMS のドライバは標準パッケージとしては提供されないので，サードパーティのパッケージが使われている（『&lt;a href=&#34;http://book.impress.co.jp/books/1115101145&#34; title=&#34;Goプログラミング実践入門 標準ライブラリでゼロからWebアプリを作る - インプレスブックス&#34;&gt;Goプログラミング実践入門&lt;/a&gt;』では PostgreSQL なので &lt;a href=&#34;https://github.com/lib/pq&#34; title=&#34;lib/pq: Pure Go Postgres driver for database/sql&#34;&gt;&lt;code&gt;github.com/lib/pq&lt;/code&gt;&lt;/a&gt; を使用）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:pkg&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GW 過ぎたらみんな忘れてるに100カノッサ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/04/mastodon/" />
		<id>tag:text.Baldanders.info,2017-04-16:/remark/2017/04/mastodon/</id>
		<published>2017-04-16T23:48:58+09:00</published>
		<updated>2017-04-26T20:58:06+09:00</updated>
		<summary>んー。要するに今回の「お祭り」は，どこぞの院生が Mastodon のインスタンスを立ち上げたらうっかりユーザが殺到しちゃって，さくらや Azure の中の人なんかも巻き込んで今に至る。ということでおっけ？</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;んー。
要するに今回の「お祭り」は，どこぞの院生が &lt;a href=&#34;https://github.com/tootsuite/mastodon&#34; title=&#34;tootsuite/mastodon: A GNU Social-compatible microblogging server&#34;&gt;Mastodon&lt;/a&gt; のインスタンスを立ち上げたらうっかりユーザが殺到しちゃって，さくらや Azure の中の人なんかも巻き込んで今に至る。
ということでおっけ？&lt;/p&gt;

&lt;p&gt;とりあえず &lt;a href=&#34;https://mstdn.jp/&#34;&gt;mstdn.jp&lt;/a&gt; にアカウントを作ってみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mstdn.jp/@spiegel&#34; title=&#34;Der spiegel im spiegel - mstdn.jp&#34;&gt;@spiegel@mstdn.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「世界一」とか言う割にまだ “spiegel&amp;rdquo; が取られてなかったことからしてそれほどは流行ってない感じ？
500文字なんて日本語なら小説が書けるレベルだよな。&lt;/p&gt;

&lt;p&gt;分散型メッセージングってのは夢だよねぇ。
私は Twitter より Jabber/XMPP を連想したよ。
まぁ &lt;a href=&#34;https://github.com/tootsuite/mastodon&#34; title=&#34;tootsuite/mastodon: A GNU Social-compatible microblogging server&#34;&gt;Mastodon&lt;/a&gt; は（Twitter と同じく）分類としてはマイクロブロギング・サービスになるんだろうけど。&lt;/p&gt;

&lt;p&gt;そもそもインターネットが（現状はともかく理想としては）分散型のネットワークだし，電子メールだって Web だって分散型のサービスだ。
今世紀に入ってからなら Tor や Blockchain を含めてもいいかもしれない。
いわゆる「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000490.shtml&#34; title=&#34;監視をコントロールする — Baldanders.info&#34;&gt;技術的ゲートキーパ&lt;/a&gt;」を迂回できるというのは大きい。&lt;/p&gt;

&lt;p&gt;でも実際には分散型サービスって成功例があんまり無いんだよね。
みんな思いつくけど（そして作ろうと思えば作れるけど）続かない。
続けていくインセンティブが（サービス運用側に）ないから。
よほどのキラーコンテンツが登場しない限りはね（それか JK の間で流行りだすとか）。
あるいは犯罪者の巣窟になってケーサツに潰されるのもお約束（&lt;a href=&#34;https://github.com/tootsuite/mastodon&#34; title=&#34;tootsuite/mastodon: A GNU Social-compatible microblogging server&#34;&gt;Mastodon&lt;/a&gt; って C&amp;amp;C サーバにうってつけだよね&lt;code&gt;w&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;ちうわけで様子見。
GW 過ぎたらみんな忘れてるに100カノッサ。
まぁでも私のお予想はたいがい外れるので，外れたら &lt;a href=&#34;https://mstdn.jp/&#34;&gt;mstdn.jp&lt;/a&gt; に寄付してもいいかもしれない。&lt;/p&gt;

&lt;p&gt;自ドメインに自分専用インスタンスを設置するのはパス。
計算機リソース借りるのだって無料じゃないし Docker イメージがあるとはいえ明らかに面倒くさい（レンタルサーバにおまけでついてくるというのならともかく）。
費用対効果の観点から少なくとも個人がそこまでしてするメリットはないだろう。&lt;/p&gt;

&lt;p&gt;一方でサービスベンダが自前でインスタンスを設置するのはあり。
Twitter と違って「名前」の問題で悩む必要がないだけでもメリットはある。
まぁ &lt;a href=&#34;https://github.com/tootsuite/mastodon&#34; title=&#34;tootsuite/mastodon: A GNU Social-compatible microblogging server&#34;&gt;Mastodon&lt;/a&gt; をみんなが使っているというのが前提だけどね。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/465/1465842/&#34;&gt;ASCII.jp：Twitterのライバル？　実は、新しい「マストドン」（Mastodon）とは！｜遠藤諭のプログラミング＋日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://munesada.com/2017/04/13/blog-9885&#34;&gt;ポストTwitterのSNS！？「Mastodon（マストドン）」の初期設定やスマホで使うアプリを紹介するぞ！ | むねさだブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://did2memo.net/2017/04/14/mastodon-android-app/&#34;&gt;Android用「マストドン」アプリ「Tusky」の利用方法とエラー対策&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://isid.ai/diary/2017/04/14/1179/&#34;&gt;Mastodon は自分のドメインでIDを持つことが大事。「リモートフォロー」の価値を最大化するべし。 ｜ 諸多日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hitoasa.hateblo.jp/entry/20101013/1286950786&#34;&gt;OStatusの仕様をかいつまんで適当に和訳するよ - hito_asaの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cpplover.blogspot.jp/2017/04/blog-post_20.html&#34;&gt;本の虫: ここらでもう一度マストドンについて語っておくか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2017/04/20/mastodon/&#34;&gt;日本のネットを騒がせる「マストドン」、その課題と可能性をえふしん氏に聞いた | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sho.tdiary.net/20170421.html&#34;&gt;企業は安易なMastodonインスタンスの運用を避けるべきでは? - ただのにっき(2017-04-21)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cardina1.red/2017/04/13/federated-social-web/&#34;&gt;gnusocial や mastodon の哲学 - 何とは言わない天然水飲みたさ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yotsumao.hatenablog.com/entry/2017/04/19/%E3%80%90%E3%81%95%E3%81%8F%E3%82%89%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%81%A7%E3%80%91%E3%83%9E%E3%82%B9%E3%83%88%E3%83%89%E3%83%B3%E3%81%8A%E3%81%B2%E3%81%A8%E3%82%8A%E6%A7%98%E7%94%A8&#34;&gt;【さくらのクラウドで】マストドンおひとり様用インスタンスを作ってみた【スタートアップスクリプト】 - 脱SEして文筆家になった人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r7kamura.hatenablog.com/entry/2017/04/20/014606&#34;&gt;MastodonをAWSでシュッと動かすやつ - ✘╹◡╹✘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/takahashim/items/a8c0eb3a75d366cfe87b&#34;&gt;Mastodon API gemを使って投稿する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/cv_k/items/8ecafea3ce7dd720cec6&#34;&gt;日本のマストドン インスタンス一覧 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hyper-text.org/archives/2017/04/mastodon-instance-with-amazon-s3.shtml&#34;&gt;Mastodon インスタンスの画像や動画の保存先をクラウドストレージ （Amazon S3） に移行した話 | WWW WATCH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://masto.host/&#34;&gt;Masto.Host - Hosting for Mastodon Instances&lt;/a&gt; : ホスティングサービス。5ユーロ/月より&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/S-YOU/items/cf677ae282bd6f38fbbb&#34;&gt;マストドンのタイムラインをgo-mastodon のWebSocketを使用し取得する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/bezeklik/items/1a8530d530613acd665c&#34;&gt;Mastodon を CentOS にインストールする (Docker未使用) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語 1.8.1 がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/04/go-1_8_1-released/" />
		<id>tag:text.Baldanders.info,2017-04-08:/remark/2017/04/go-1_8_1-released/</id>
		<published>2017-04-08T15:48:30+09:00</published>
		<updated>2017-04-08T15:48:30+09:00</updated>
		<summary>Go 言語コンパイラのバージョン 1.8.1 がリリースされた。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラのバージョン 1.8.1 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/1-2Uow_7TjQ&#34;&gt;Go 1.8.1 is released - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;p&gt;“go1.8.1 (released 2017/04/07) includes fixes to the compiler, linker, runtime, documentation, go command and the &lt;code&gt;crypto/tls&lt;/code&gt;, &lt;code&gt;encoding/xml&lt;/code&gt;, &lt;code&gt;image/png&lt;/code&gt;, &lt;code&gt;net&lt;/code&gt;, &lt;code&gt;net/http&lt;/code&gt;, &lt;code&gt;reflect&lt;/code&gt;, &lt;code&gt;text/template&lt;/code&gt;, and &lt;code&gt;time&lt;/code&gt; packages.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.8.minor&#34;&gt;Release History - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;セキュリティ・アップデートではないようだがかなり広範囲に改修が行われているようだ。
アップデートは計画的に。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ソートを使う - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/sort/" />
		<id>tag:text.Baldanders.info,2017-04-07:/golang/sort/</id>
		<published>2017-04-07T20:01:34+09:00</published>
		<updated>2017-04-08T15:40:24+09:00</updated>
		<summary>ソートをアルゴリズムまで言及すると非常に深いテーマになるのだが，今回は標準の sort パッケージの使い方に絞って「こんな感じ」で説明していく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回はソート（sort）のお話。&lt;/p&gt;

&lt;p&gt;プログラマでソートを知らない人はいないだろうが，一応説明しておくと，あるデータの集合を一定の規則に従って並べ替えることを指す。
日本語では「整列」と呼んだりするらしい。
ソートをアルゴリズムまで言及すると非常に深いテーマになるのだが，今回は標準の &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt; パッケージの使い方に絞って「こんな感じ」で説明していく。&lt;/p&gt;

&lt;p&gt;なお，この記事で紹介するコードは &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt; パッケージのドキュメントに書かれているものを流用している。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のコンパイラ・コードは MIT ライセンスで提供されているのでご注意を。&lt;/p&gt;

&lt;h2 id=&#34;基本型データ列のソート&#34;&gt;基本型データ列のソート&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt; パッケージでは基本型の int, float64, string についてはソート関数が用意されている。&lt;/p&gt;

&lt;p&gt;たとえば &lt;code&gt;{0.055, 0.815, 1.0, 0.107}&lt;/code&gt; というデータ列があるとしよう。
これを昇順（小さい値から大きい値へ順に並べること）で並べることを考える。
この場合は &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Float64s()&lt;/code&gt; 関数を使えば簡単である。
コードにするとこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;sort&amp;quot;
)

func main() {
	fset := []float64{0.055, 0.815, 1.0, 0.107}
	for _, f := range fset {
		fmt.Printf(&amp;quot;%f &amp;quot;, f)
	}
	fmt.Print(&amp;quot;\n&amp;quot;)
	sort.Float64s(fset)
	for _, f := range fset {
		fmt.Printf(&amp;quot;%f &amp;quot;, f)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果はこんな感じになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run sort1.go
0.055000 0.815000 1.000000 0.107000
0.055000 0.107000 0.815000 1.000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では，降順（大きい値から小さい値へ順に並べること）で並べるにはどうすればいいだろう。
これはちょっとだけ面倒くさくなる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;sort&amp;quot;
)

func main() {
	fset := []float64{0.055, 0.815, 1.0, 0.107}
	for _, f := range fset {
		fmt.Printf(&amp;quot;%f &amp;quot;, f)
	}
	fmt.Print(&amp;quot;\n&amp;quot;)
    sort.Sort(sort.Reverse(sort.Float64Slice(fset)))
	for _, f := range fset {
		fmt.Printf(&amp;quot;%f &amp;quot;, f)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まず &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Float64Slice&lt;/code&gt; は &lt;code&gt;[]float64&lt;/code&gt; を示す型である。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Float64Slice []float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この型が示すデータ集合を &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Sort()&lt;/code&gt; 関数で並べ替えるのだが，並べ替えの規則を &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Reverse()&lt;/code&gt; 関数で反転させている。
実行結果はこんな感じでちゃんと降順になっているのが分かるだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run sort2.go
0.055000 0.815000 1.000000 0.107000
1.000000 0.815000 0.107000 0.055000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実は最初に出た &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Float64s()&lt;/code&gt; 関数は内部で &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Sort()&lt;/code&gt; 関数を呼んでいる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Float64s sorts a slice of float64s in increasing order.
func Float64s(a []float64) { Sort(Float64Slice(a)) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で， &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Sort()&lt;/code&gt; 関数の内部では &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Float64Slice&lt;/code&gt; に紐付く &lt;code&gt;Len()&lt;/code&gt;, &lt;code&gt;Less()&lt;/code&gt;, &lt;code&gt;Swap()&lt;/code&gt; 各メソッドが呼ばれている。
&lt;code&gt;Len()&lt;/code&gt;, &lt;code&gt;Less()&lt;/code&gt;, &lt;code&gt;Swap()&lt;/code&gt; 各メソッドを持つ &lt;a href=&#34;https://golang.org/doc/effective_go.html#interfaces_and_types&#34; title=&#34;Effective Go - The Go Programming Language&#34;&gt;interface&lt;/a&gt; を Sorter と呼び，以下のように定義されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A type, typically a collection, that satisfies sort.Interface can be
// sorted by the routines in this package. The methods require that the
// elements of the collection be enumerated by an integer index.
type Interface interface {
	// Len is the number of elements in the collection.
	Len() int
	// Less reports whether the element with
	// index i should sort before the element with index j.
	Less(i, j int) bool
	// Swap swaps the elements with indexes i and j.
	Swap(i, j int)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;オブジェクトのソート&#34;&gt;オブジェクトのソート&lt;/h2&gt;

&lt;p&gt;つまり Sorter インタフェースを持つ型であれば &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Sort()&lt;/code&gt; 関数でソート可能ということになる。
たとえば以下のオブジェクト集合を考える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A Planet defines the properties of a solar system object.
type Planet struct {
	Name     string
	Mass     float64
	Distance float64
}

var planets = []Planet{
	{&amp;quot;Mercury&amp;quot;, 0.055, 0.4},
	{&amp;quot;Venus&amp;quot;, 0.815, 0.7},
	{&amp;quot;Earth&amp;quot;, 1.0, 1.0},
	{&amp;quot;Mars&amp;quot;, 0.107, 1.5},
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Planet&lt;/code&gt; オブジェクトの集合に対する Sorter インタフェースはこんな感じにする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:str&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:str&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ByMass implements sort.Interface for []Planet based on the Mass field.
type ByMass []Planet

func (a ByMass) Len() int           { return len(a) }
func (a ByMass) Less(i, j int) bool { return a[i].Mass &amp;lt; a[j].Mass }
func (a ByMass) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり &lt;code&gt;Mass&lt;/code&gt; フィールド値の昇順に並べるわけだ。&lt;/p&gt;

&lt;p&gt;全体ではこんな感じになるだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;sort&amp;quot;
)

// A Planet defines the properties of a solar system object.
type Planet struct {
	Name     string
	Mass     float64
	Distance float64
}

func (p Planet) String() string {
	return p.Name
}

// ByMass implements sort.Interface for []Planet based on the Mass field.
type ByMass []Planet

func (a ByMass) Len() int           { return len(a) }
func (a ByMass) Less(i, j int) bool { return a[i].Mass &amp;lt; a[j].Mass }
func (a ByMass) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }

func main() {
	planets := []Planet{
		{&amp;quot;Mercury&amp;quot;, 0.055, 0.4},
		{&amp;quot;Venus&amp;quot;, 0.815, 0.7},
		{&amp;quot;Earth&amp;quot;, 1.0, 1.0},
		{&amp;quot;Mars&amp;quot;, 0.107, 1.5},
	}

	for _, p := range planets {
		fmt.Printf(&amp;quot;%v &amp;quot;, p)
	}
	fmt.Print(&amp;quot;\n&amp;quot;)
	sort.Sort(ByMass(planets))
	for _, p := range planets {
		fmt.Printf(&amp;quot;%v &amp;quot;, p)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は以下の通りで意図通りの動作になっているのが分かるだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run sort3.go
Mercury Venus Earth Mars
Mercury Mars Venus Earth
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sort-slice-関数を使う場合&#34;&gt;&lt;code&gt;sort.Slice()&lt;/code&gt; 関数を使う場合&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; 限定であるが， &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Slice()&lt;/code&gt; 関数を使えば Sorter インタフェースを定義しなくてもソートを行うことができる。
&lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Slice()&lt;/code&gt; 関数の定義は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Slice(slice interface{}, less func(i, j int) bool)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際のコードはこんな感じになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;sort&amp;quot;
)

// A Planet defines the properties of a solar system object.
type Planet struct {
	Name     string
	Mass     float64
	Distance float64
}

func (p Planet) String() string {
	return p.Name
}

func main() {
	planets := []Planet{
		{&amp;quot;Mercury&amp;quot;, 0.055, 0.4},
		{&amp;quot;Venus&amp;quot;, 0.815, 0.7},
		{&amp;quot;Earth&amp;quot;, 1.0, 1.0},
		{&amp;quot;Mars&amp;quot;, 0.107, 1.5},
	}

	for _, p := range planets {
		fmt.Printf(&amp;quot;%v &amp;quot;, p)
	}
	fmt.Print(&amp;quot;\n&amp;quot;)
	sort.Slice(planets, func(i, j int) bool {
		return planets[i].Mass &amp;lt; planets[j].Mass
	})
	for _, p := range planets {
		fmt.Printf(&amp;quot;%v &amp;quot;, p)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Slice()&lt;/code&gt; 関数の第2引数が関数閉包（closure）になっている点に注意&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
これなら第2引数の関数の内容を変えれば任意の規則でソートを行うことができる。&lt;/p&gt;

&lt;p&gt;結果は Sorter インタフェースがある場合と同じく&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go run sort4.go
Mercury Venus Earth Mars
Mercury Mars Venus Earth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となった。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sugyan/items/fd7138a756c1a409f5fd&#34;&gt;sliceのシャッフル - Qiita&lt;/a&gt; : &lt;a href=&#34;https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle&#34;&gt;Fisher–Yates shuffle&lt;/a&gt; というアルゴリズムらしい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nyamadandan/items/2c82011801b148c98e52&#34;&gt;Go言語でバイトニックソート実装してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ohkawa/items/269507985b3ae10cbff9&#34;&gt;Goでバケットソートアルゴリズム(ビット列を使用) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tchssk/items/b61f1f06d22a6232d4c8&#34;&gt;interface{} をソートする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20161004092237.htm&#34;&gt;Big Sky :: golang の sort インタフェース難しい問題が解決した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/02/go-1_8-released/&#34;&gt;Go 言語 1.8 がリリース&lt;/a&gt; : &lt;a href=&#34;https://golang.org/pkg/sort/&#34; title=&#34;sort - The Go Programming Language&#34;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Slice()&lt;/code&gt; 関数はバージョン 1.8 で導入された&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1FO/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/416jAxVU4NL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1FO/baldandersinf-22/&#34;&gt;数学ガール／乱択アルゴリズム&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ株式会社 2014-02-14&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1D6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1D6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ゲーデルの不完全性定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1CM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／フェルマーの最終定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMK4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ガロア理論&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EYXMA9I/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00EYXMA9I.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMIQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMIQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／式とグラフ&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;工学ガール，リサちゃん登場！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-04-19&#34;&gt;2015/04/19&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:str&#34;&gt;今回は簡単のため &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; を使っているが，データ集合は &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; である必要はなく Sorter インタフェースを持つ任意のオブジェクトであればよい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:str&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c&#34;&gt;つか， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の関数は全て関数閉包として動作するんだけどね。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>エディタ以上ワープロ未満の HackMD - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/04/hackmd/" />
		<id>tag:text.Baldanders.info,2017-04-06:/remark/2017/04/hackmd/</id>
		<published>2017-04-06T22:25:55+09:00</published>
		<updated>2017-04-07T12:47:30+09:00</updated>
		<summary>もうしばらく遊んでみて，よさげなら常用してみようかな，と。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;たとえばちょっとしたメモを取るとき。&lt;/p&gt;

&lt;p&gt;仕事なら紙のノートで手書きで書く。
「ちょっとしたメモ」なら手書きで走り書きの方がまだ速い（キーボード打ちながらメモを書けるし）。
その代り私の走り書きは酷い悪筆で私自身も読めないことがあるのが玉に瑕である（笑）&lt;/p&gt;

&lt;p&gt;仕事以外のことで目の前に紙のノートも PC もない場合は &lt;a href=&#34;https://simplenote.com/&#34;&gt;Simplenote&lt;/a&gt; を愛用するようになった。
&lt;a href=&#34;https://simplenote.com/&#34;&gt;Simplenote&lt;/a&gt; は SaaS 型のテキストエディタである。
Web 版のほか各種携帯端末用のアプリが揃っていて使い勝手がいい。&lt;/p&gt;

&lt;p&gt;ただ， &lt;a href=&#34;https://simplenote.com/&#34;&gt;Simplenote&lt;/a&gt; は良くも悪くもプレーンテキストのエディタで，まとまった情報を整理して書こうとするとイマイチである。
しかし仕事でもないのにワープロなんか使いたくないし，簡単な構造化テキストであれば markdown で書けた方がいい。&lt;/p&gt;

&lt;p&gt;で， markdown なテキストが書ける SaaS 型のエディタツールがないかなぁ，と思っていたのだが，どうも &lt;a href=&#34;https://hackmd.io/&#34; title=&#34;HackMD - 共同編集できるMarkdownノート&#34;&gt;HackMD&lt;/a&gt; が良さげな感じである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/&#34;&gt;HackMD - 共同編集できるMarkdownノート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hackmdio/hackmd/&#34;&gt;hackmdio/hackmd: Realtime collaborative markdown notes on all platforms.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://hackmd.io/&#34; title=&#34;HackMD - 共同編集できるMarkdownノート&#34;&gt;HackMD&lt;/a&gt; の特徴を以下に列挙してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT ライセンス。 Docker イメージも用意されていてオンプレミスな運用もできる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/&#34; title=&#34;HackMD - 共同編集できるMarkdownノート&#34;&gt;hackmd.io&lt;/a&gt; で提供される SaaS 版は以下の通り

&lt;ol&gt;
&lt;li&gt;自身はアカウント管理を行ってない。サインインは Facebook, Twitter, GitHub, Dropbox, Google のアカウントを利用できる。ちなみにサインインしなくても「ゲスト」として利用することも可能&lt;/li&gt;
&lt;li&gt;Markdown 記法で記述するが，かなり強力にカスタマイズされている

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/yaml-metadata&#34; title=&#34;Supported YAML metadata - HackMD&#34;&gt;YAML 形式によるページ制御&lt;/a&gt;ができる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;www.mathjax.org&#34;&gt;MathJax&lt;/a&gt; による数式表現が可能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.graphviz.org/&#34; title=&#34;Graphviz | Graphviz - Graph Visualization Software&#34;&gt;graphviz&lt;/a&gt;（DOT 言語）, &lt;a href=&#34;http://knsv.github.io/mermaid/&#34; title=&#34;mermaid - Generation of diagrams and flowcharts from text in a similar manner as markdown.&#34;&gt;mermaid&lt;/a&gt;，&lt;a href=&#34;https://bramp.github.io/js-sequence-diagrams/&#34; title=&#34;js-sequence-diagrams by bramp&#34;&gt;js-sequence-diagrams&lt;/a&gt;，&lt;a href=&#34;http://flowchart.js.org/&#34;&gt;flowchart.js&lt;/a&gt; の記法で作図ができる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://abcnotation.com/&#34;&gt;abc&lt;/a&gt; 記法で楽譜が書ける&lt;/li&gt;
&lt;li&gt;簡単な記述により YouTube, Vimeo, Gist, SlideShare, Speakerdeck のコンテンツを埋め込める&lt;/li&gt;
&lt;li&gt;タグを設定できる。タグをキーにした検索が可能&lt;/li&gt;
&lt;li&gt;その他，詳しくは「&lt;a href=&#34;https://hackmd.io/s/4JbKDCN1hx&#34; title=&#34;機能紹介 - HackMD&#34;&gt;機能紹介&lt;/a&gt;」で&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ed1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ed1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://imgur.com/&#34; title=&#34;Imgur: The most awesome images on the Internet&#34;&gt;imgur&lt;/a&gt; と連動している。アップロードした画像は自動的に &lt;a href=&#34;http://imgur.com/&#34; title=&#34;Imgur: The most awesome images on the Internet&#34;&gt;imgur&lt;/a&gt; に格納される&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ig&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ig&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Dropbox, Google Drive, Gist へエクスポート可能&lt;/li&gt;
&lt;li&gt;Dropbox, Google Drive, Gist およびクリップボードからインポート可能&lt;/li&gt;
&lt;li&gt;markdown または HTML 形式でローカルにダウンロード可能&lt;/li&gt;
&lt;li&gt;基本的に誰でも編集でき誰でも閲覧できる。なお，編集・閲覧許可範囲を「サインイン・ユーザのみ」「オーナーのみ」に絞ることはできる。許可するユーザを指定したりはできないようだ（まぁアカウント管理をしてないからね）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:pv&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:pv&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;試しにちょろんと落書きしてみた。
（楽譜は無理。復活の呪文を唱えているようにしか見えん）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/s/S1thQI76e&#34;&gt;MathJax による数式表現。 - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/s/ByuxOLQag&#34;&gt;シーケンス図を描こう - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/s/S19e0LXTe&#34;&gt;クラス図を描こう - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/s/H1iq2i76e#&#34;&gt;フローチャートを描こう - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/s/Hkrec_Nae&#34;&gt;Go 言語で Hello World - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もうしばらく遊んでみて，よさげなら常用してみようかな，と。&lt;/p&gt;

&lt;h2 id=&#34;追記-メタデータについて&#34;&gt;【追記】 メタデータについて&lt;/h2&gt;

&lt;p&gt;上で述べたように &lt;a href=&#34;https://hackmd.io/&#34; title=&#34;HackMD - 共同編集できるMarkdownノート&#34;&gt;HackMD&lt;/a&gt; では YAML 形式によるページ制御ができる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackmd.io/yaml-metadata&#34;&gt;Supported YAML metadata - HackMD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的には先頭行に以下の記述を加える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
YAML metas
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定項目は色々あるが，私は必ず以下の設定をするようにしている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
robots: noindex, nofollow
lang: ja
dir: ltr
breaks: false
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;robots&lt;/code&gt; 項目は &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 要素に robots を設定する。
検索エンジンや他ページの referer に拾われたくない場合は &lt;code&gt;noindex, nofollow&lt;/code&gt; をセットしておけばいい。
ただし行儀のいい crawler や Web サイトばかりではないので，その辺はあしからず。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lang&lt;/code&gt; 項目はページに国・言語情報を設定する，筈なのだが利いてないようである（既定の &lt;code&gt;en&lt;/code&gt; のまま）。
まぁそのうち有効になると信じて。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dir&lt;/code&gt; 項目は文字の向き（右向き・左向き）を指定する。
既定は &lt;code&gt;ltr&lt;/code&gt; （左→右向き）なのでなくてもいいのだが，一応設定しておく。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;breaks&lt;/code&gt; 項目は markdown 入力の改行をそのまま HTML 表示に反映（hard break）させるかどうか指定する。
既定は &lt;code&gt;true&lt;/code&gt;。
この辺は好みで。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nulab-inc.com/ja/blog/nulab/hackmd-hack/&#34;&gt;リアルタイム共同編集可能なMarkdownエディタ「HackMD」をハックしてみた| Nulab (Japanese)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.share-wis.com/esa-and-hackmd&#34;&gt;esa.ioと HackMDでつくるいい感じの議事録&amp;amp;ドキュメント管理 | ShareWis Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nelog.jp/hackmd&#34;&gt;クラウド上にMarkdownで手軽にメモを残せる無料ツール「HackMD」が便利&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ed1&#34;&gt;編集画面で見出し単位で表示の畳み込みができるのが地味に便利。アウトライン編集に使える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ed1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ig&#34;&gt;&lt;a href=&#34;http://imgur.com/&#34; title=&#34;Imgur: The most awesome images on the Internet&#34;&gt;imgur&lt;/a&gt; への画像の登録は匿名アカウントで行われ後から削除できない。したがって間違ってアップロードしても取り消せないし，ましてや公開できない画像をアップロードするのは以っての外である。ご注意を。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ig&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:pv&#34;&gt;言うまでもないが，パスワード等の秘密情報，プライバシーに関わる情報（個人情報を含む），その他公開できない情報をこのサービスに載せないこと。一応 private モードにすればオーナー以外は編集・閲覧できないが，この手のサービスは信用しすぎないのが肝要である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:pv&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GnuPG 2.1.20 がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/04/gnupg-2_1_20-released/" />
		<id>tag:text.Baldanders.info,2017-04-04:/remark/2017/04/gnupg-2_1_20-released/</id>
		<published>2017-04-04T20:30:11+09:00</published>
		<updated>2017-04-04T20:45:16+09:00</updated>
		<summary>今回もセキュリティ・アップデートはなし。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;GnuPG 2.1.20 がリリースされている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2017q2/000404.html&#34;&gt;[Announce] GnuPG 2.1.20 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回もセキュリティ・アップデートはなし。
主な修正点は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: New properties &amp;lsquo;&lt;code&gt;expired&lt;/code&gt;&amp;rsquo;, &amp;lsquo;&lt;code&gt;revoked&lt;/code&gt;&amp;rsquo;, and &amp;lsquo;&lt;code&gt;disabled&lt;/code&gt;&amp;rsquo; for the import and export filters.&lt;/li&gt;
&lt;li&gt;gpg: New command &lt;code&gt;--quick-set-primary-uid&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;gpg: New compliance field for the &lt;code&gt;--with-colon&lt;/code&gt; key listing.&lt;/li&gt;
&lt;li&gt;gpg: Changed the key parser to generalize the processing of local meta data packets.&lt;/li&gt;
&lt;li&gt;gpg: Fixed assertion failure in the TOFU trust model.&lt;/li&gt;
&lt;li&gt;gpg: Fixed exporting of zero length user ID packets.&lt;/li&gt;
&lt;li&gt;scd: Improved support for multiple readers.&lt;/li&gt;
&lt;li&gt;scd: Fixed timeout handling for key generation.&lt;/li&gt;
&lt;li&gt;agent: New option &lt;code&gt;--enable-extended-key-format&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;dirmngr: Do not add a keyserver to a new dirmngr.conf.  Dirmngr uses a default keyserver.&lt;/li&gt;
&lt;li&gt;dimngr: Do not treat TLS warning alerts as severe error when building with GNUTLS.&lt;/li&gt;
&lt;li&gt;dirmngr: Actually take &lt;code&gt;/etc/hosts&lt;/code&gt; in account.&lt;/li&gt;
&lt;li&gt;wks: Fixed client problems on Windows.  Published keys are now set to world-readable.&lt;/li&gt;
&lt;li&gt;tests: Fixed creation of temporary directories.&lt;/li&gt;
&lt;li&gt;A socket directory for a non standard GNUGHOME is now created on the fly under &lt;code&gt;/run/user&lt;/code&gt;.  Thus &amp;ldquo;&lt;code&gt;gpgconf --create-socketdir&lt;/code&gt;&amp;rdquo; is now optional.  The use of &amp;ldquo;&lt;code&gt;gpgconf --remove-socketdir&lt;/code&gt;&amp;rdquo; to clean up obsolete socket directories is however recommended to avoid cluttering &lt;code&gt;/run/user&lt;/code&gt; with useless directories.&lt;/li&gt;
&lt;li&gt;Fixed build problems on some platforms.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.1.20
libgcrypt 1.7.6
Copyright (C) 2017 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>インスタンスの生成と Functional Options パターン - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/functional-options-pattern/" />
		<id>tag:text.Baldanders.info,2017-04-04:/golang/functional-options-pattern/</id>
		<published>2017-04-04T01:01:59+09:00</published>
		<updated>2017-04-04T16:22:14+09:00</updated>
		<summary>今回も自分用の覚え書きとして書いておく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/weloan/items/56f1c7792088b5ede136&#34;&gt;Go言語のFunctional Option Pattern - Qiita&lt;/a&gt;」を参考にして今回も自分用の覚え書きとして書いておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;には C++ や Java 等にある class 宣言がない。
つまりインスタンス（instance）生成時の構築子（constructor）もない。
ではどうやってインスタンスを生成するのか。&lt;/p&gt;

&lt;p&gt;たとえば以下のような型を考える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package ui

import (
	&amp;quot;io&amp;quot;
)

// UI is Command line user interface
type UI struct {
	reader      io.Reader
	writer      io.Writer
	errorWriter io.Writer
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ui.UI&lt;/code&gt; 型のインスタンスを生成するにはいくつかの方法がある。&lt;/p&gt;

&lt;p&gt;まずは &lt;code&gt;new()&lt;/code&gt; 関数を使う方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := new(ui.UI)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;new()&lt;/code&gt; 関数でインスタンスを生成する場合は必ずゼロ値で初期化される。
&lt;code&gt;ui.UI&lt;/code&gt; の場合は &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;writer&lt;/code&gt;, &lt;code&gt;errorWriter&lt;/code&gt; の各フィールドには nil がセットされる。
しかし &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Reader&lt;/code&gt; および &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Writer&lt;/code&gt; は nil のまま使用すると panic になるため何らかの初期値を与える必要がある。&lt;/p&gt;

&lt;p&gt;2番目は複合リテラル（composite literals）で記述する方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := UI{reader: os.Stdin, writer: os.Stdout, errorWriter: os.Stderr}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この方法であれば各フィールドに初期値を与えることができる。
ただしフィールドがパッケージの外からは不可視の場合は（普通そうするよね）この手は使えない。&lt;/p&gt;

&lt;p&gt;そこで，3番目の方法として構築子に相当する関数を考える。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package ui

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
)

// UI is Command line user interface
type UI struct {
	reader      io.Reader
	writer      io.Writer
	errorWriter io.Writer
}

// New returns a new UI instance
func New(r io.Reader, w, e io.Writer) *UI {
	if r == nil {
		r = ioutil.NopCloser(bytes.NewReader(nil))
	}
	if w == nil {
		w = ioutil.Discard
	}
	if e == nil {
		e = ioutil.Discard
	}
	return &amp;amp;UI{reader: r, writer: w, errorWriter: e}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうすれば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := ui.New(os.Stdin, os.Stdout, os.Stderr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と記述することでパッケージ外でも初期化済みのインスタンスを生成できる。
また&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := ui.New(nil, nil, nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と無効な値（nil）を引数に指定した場合でもフィールドには（nil ではなく）安全な値がセットされる。&lt;/p&gt;

&lt;p&gt;この方法の問題点は引数に必ず何らかの値をセットしなければならないことだ（&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;にはデフォルト引数（default argument）のような仕組みはない）。
たとえば &lt;code&gt;errorWriter&lt;/code&gt; は既定では使わないことが分かっていてもインスタンス生成時には&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := ui.New(os.Stdin, os.Stdout, nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとしなければならない。
また&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// NewWithoutErr returns a new UI instance
func NewWithoutErr(r io.Reader, w io.Writer) *UI {
	return New(r, w, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと構築子を別途増やす手もあるが，それでは有効なフィールドの組み合わせが増えると関数の管理が煩雑になってしまう。&lt;/p&gt;

&lt;p&gt;そこで4番目の方法。
構築子の引数に初期値をセットするのではなく，初期化関数をセットするのである。
この初期化関数の型を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Option is function value of functional options
type Option func(*UI)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と定義する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:srf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:srf&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
すると構築子は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Option is function value of functional options
type Option func(*UI)

// New returns a new UI instance
func New(opts ...Option) *UI {
	u := &amp;amp;UI{reader: ioutil.NopCloser(bytes.NewReader(nil)), writer: ioutil.Discard, errorWriter: ioutil.Discard}
	for _, opt := range opts {
		opt(u)
	}
	return u
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と記述することができる。&lt;/p&gt;

&lt;p&gt;さらにフィールドごとに &lt;code&gt;Option&lt;/code&gt; 関数を返す関数も定義する（これらの関数を用意することで &lt;code&gt;ui&lt;/code&gt; パッケージを利用するユーザから関数閉包（closure）を隠蔽できる）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Reader returns closure as type Option
func Reader(r io.Reader) Option {
    return func(u *UI) {
        if r != nil {
            u.reader = r
        }

    }
}

//Writer returns closure as type Option
func Writer(w io.Writer) Option {
    return func(u *UI) {
        if w != nil {
            u.writer = w
        }
    }
}

//ErrorWriter returns closure as type Option
func ErrorWriter(e io.Writer) Option {
    return func(u *UI) {
        if e != nil {
            u.errorWriter = e
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうしておけばインスタンス生成時の記述は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := ui.New(ui.Reader(os.Stdin), ui.Writer(os.Stdout))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと初期化の必要なフィールドのみ引数で指定でき，かつコードの見た目も分かりやすくできる。
このようなプログラミング・パターンを “Functional Options&amp;rdquo; と呼ぶようである。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://commandcenter.blogspot.jp/2014/01/self-referential-functions-and-design.html&#34;&gt;command center: Self-referential functions and the design of options&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis&#34;&gt;Functional options for friendly APIs | Dave Cheney&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gocli&#34;&gt;spiegel-im-spiegel/gocli: Command line interface&lt;/a&gt; : 本記事と全く同じではないが， Functional Options パターンの実装例を作ってみた&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/410V3ulwP5L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798142417/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798142417.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スターティングGo言語 (CodeZine BOOKS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4865940391/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4865940391.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Kotlinスタートブック -新しいAndroidプログラミング&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4839959234/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4839959234.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Docker実戦活用ガイド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4274218961/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4274218961.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グッド・マス ギークのための数・論理・計算機科学&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:srf&#34;&gt;これを自己参照関数（self-referential function）と呼ぶそうだ。 “&lt;a href=&#34;https://commandcenter.blogspot.jp/2014/01/self-referential-functions-and-design.html&#34; title=&#34;command center: Self-referential functions and the design of options&#34;&gt;Self-referential functions and the design of options&lt;/a&gt;” には自己参照関数の様々なバリエーションが紹介されている。この記事ではもっとも簡単な構造のみ紹介している。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:srf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「けもフレ」ロスは続く。 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2017/04/anime-kemono-friends2/" />
		<id>tag:text.Baldanders.info,2017-04-03:/remark/2017/04/anime-kemono-friends2/</id>
		<published>2017-04-03T20:18:14+09:00</published>
		<updated>2017-04-05T13:59:41+09:00</updated>
		<summary>「けもフレ」最終話で泣けたシーン / Commons としての「けもフレ」</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;「けもフレ」ロスは続く。
「&lt;a href=&#34;http://www.message-movie.jp/&#34; title=&#34;映画『メッセージ』 | オフィシャルサイト | ソニー・ピクチャーズ&#34;&gt;メッセージ&lt;/a&gt;」が封切られるまでの我慢。
テッド・チャンの作品がどうなってるのか。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#kf&#34;&gt;「けもフレ」最終話で泣けたシーン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cms&#34;&gt;Commons としての「けもフレ」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kf121&#34;&gt;【追記】息抜きで作られた「12.1話」&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;kf&#34;&gt;「けもフレ」最終話で泣けたシーン&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kailnokankaku.com/archives/922&#34;&gt;【けものフレンズ12話　考察】最高の最終話！泣けたシーンまとめ！ | もぐネタ！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事を参考に私も便乗してもう少しだけ感想を書いてみる。
私のこの手の戯れ言はいつものように偏見に塗れてるのであしからず。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/03/anime-kemono-friends/&#34; title=&#34;アニメ「けものフレンズ」たーのしー！ ...かったよ&#34;&gt;前に書いた&lt;/a&gt;とおり，「けもフレ」最終話では「嬉しい」「かっこいい」が先に立って個人的に泣けるシーンはあまり無かったのだが，唯一本気で泣きそうになったシーンがボス（ラッキービースト）とサーバルの会話シーン。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「サーバル、3人での旅楽しかったよ」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;そこだけ聞くと深夜アニメにありがちな「フラグ」に見える（実際に海に沈むし&lt;code&gt;w&lt;/code&gt;）。
でも，ボスは（質問に対する応答ではなく）意思を持って「楽しかった」と言ったのだ。
これを驚きと言わずになんと言うのだ！&lt;/p&gt;

&lt;p&gt;ボスは（みんな自由に生きている）フレンズたちとは異なり「ジャパリパーク」というシステムに帰属する存在で，システムのルールに従って行動する「スマートな機械&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ai&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ai&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」だ。
カバンちゃんに対してフレンドリーに見える態度もボスの「機能」であり，それ故にイレギュラーに弱い「ポンコツ」だったのだ。
それは11話でカバンちゃんにパークガイド権限を付与する際も同様に見えた&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:kf1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:kf1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;それが最終話でこの爆弾発言である。
（長老などを除く）ほとんどのフレンズたちは端からボスを「（喋らないけど）意思を持つ者」として認知しているだろうし，それ故にこの発言の意味に微塵も気づいてないが視聴者はそうはいかない。
ルールにより制限された行動の中でサーバルに「楽しかった」と告げたその言葉の奥にどんな「想い」があるのか。
想像するだけで泣けてくる。&lt;/p&gt;

&lt;p&gt;ボスも「のけもの」じゃなかった。
ボス視点だけでお話が作れちゃうよ（笑）&lt;/p&gt;

&lt;h2 id=&#34;cms&#34;&gt;Commons としての「けもフレ」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.animatetimes.com/news/details.php?id=1488452395&#34;&gt;すごーい！の連続、『けものフレンズ』チームに３万字インタビュー | アニメイトタイムズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このインタビュー記事の以下の部分が刺さった。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;&lt;strong&gt;梶井&lt;/strong&gt;：アニメ作品に限りませんが、たいていは１クールなりで終わって、それまでです。仮にBDやグッズ、原作本が売れて、海外にも番組が売れて大成功となって２期やりましょうとなっても、結局は消費されるだけの運命です。『けものフレンズ』は、そういう作品にはしたくなかった。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.animatetimes.com/news/details.php?id=1488452395&#34;&gt;すごーい！の連続、『けものフレンズ』チームに３万字インタビュー&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;&lt;strong&gt;福原&lt;/strong&gt;：それこそお話のプロットをいくつか作って、吉崎先生に読んでいただいたんです。あのときは深夜の「萌系アニメ」や「バトル寄りのお話」もあったんです。でも、すべてなくなって、いまのカタチになりました。萌系アニメやバトルアニメはテンプレートがあるので、みんなにとってはわかりやすいんですけどね。&lt;br&gt;
&lt;br&gt;
――テンプレート通りの作品だったら、いまのブームは来てなかった？&lt;br&gt;
&lt;br&gt;
&lt;strong&gt;梶井&lt;/strong&gt;：来てたかもしれませんが、3ヵ月で忘れられると思います。それが「消費されるアニメ」だから。とか偉そうに言ってますが、いまの『けものフレンズ』もどうなるかわかりませんけどね（笑）。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.animatetimes.com/news/details.php?id=1488452395&#34;&gt;すごーい！の連続、『けものフレンズ』チームに３万字インタビュー&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これで連想したのはいわゆる「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%88%E3%82%A5%E3%83%AB%E3%83%95%E7%A5%9E%E8%A9%B1&#34; title=&#34;クトゥルフ神話 - Wikipedia&#34;&gt;クトゥルー神話&lt;/a&gt;」だ。
あんな感じで「けもフレ」設定を中心とした生態系（ecosystem）ができると面白いねぇ。&lt;/p&gt;

&lt;p&gt;とりあえず「&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4041054443/baldandersinf-22/&#34;&gt;オフィシャルガイドブック&lt;/a&gt;」は買った方がいいのかなぁ。
はっきり言って BD は要らんのだが。
BD 抜きで2,000円～3,000円くらいで売ってくれんかな。&lt;/p&gt;

&lt;h2 id=&#34;kf121&#34;&gt;【追記】息抜きで作られた「12.1話」&lt;/h2&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/lh_GcdBamD4&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lh_GcdBamD4&#34;&gt;けものフレンズ　12.1話「ばすてき」 - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/irodori7/status/849299293789933568&#34;&gt;息抜きで作られた&lt;/a&gt;らしいけど，これ音も声もちゃんと入ってるやん。
これが「野生解放」か！ もう感謝しかない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://forest.watch.impress.co.jp/docs/serial/yajiuma/1053179.html&#34;&gt;たつき監督、けものフレンズ第12.1話「ばすてき」を公開 - やじうまの杜 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getnews.jp/archives/1686664&#34;&gt;「たつき監督ありがとう」の嵐！　『けものフレンズ』12.1話「ばすてき」まさかの公開 ｜ ガジェット通信&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XPL6LX6/baldandersinf-22/&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/417C0Ui00WL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XPL6LX6/baldandersinf-22/&#34;&gt;けものフレンズ　コミックアラカルト　ジャパリパーク編&lt;けものフレンズコミックアラカルト&gt; (角川コミックス・エース)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;少年エース編集部 &lt;/dd&gt;&lt;dd&gt;KADOKAWA / 角川書店 2017-03-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01NAGGOQI/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01NAGGOQI.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;けものフレンズ ‐ようこそジャパリパークへ！‐(1)&lt;けものフレンズ　‐ようこそジャパリパークへ！‐&gt; (角川コミックス・エース)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B01N3AZ98X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B01N3AZ98X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;けものフレンズ ‐ようこそジャパリパークへ！‐(2)&lt;けものフレンズ　‐ようこそジャパリパークへ！‐&gt; (角川コミックス・エース)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XP7LP5J/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06XP7LP5J.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ガールズ＆パンツァーの日常 4コマコミックアンソロジー&lt;ガールズ＆パンツァーの日常 4コマコミックアンソロジー&gt; (コミックアライブ)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XP85DXZ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06XP85DXZ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ガールズ＆パンツァー 劇場版 ハートフル・タンク・アンソロジー　2&lt;ガールズ＆パンツァー　劇場版　ハートフル・タンク・アンソロジー&gt; (コミックアライブ)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XS14MKJ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06XS14MKJ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;艦隊これくしょん -艦これ- おねがい！鎮守府目安箱 1&lt;艦隊これくしょん -艦これ- おねがい！鎮守府目安箱&gt; (電撃コミックスNEXT)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XGSBBYH/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06XGSBBYH.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;小林さんちのメイドラゴン 公式アンソロジー ： 2 (アクションコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XRTMKRY/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06XRTMKRY.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;だがしかし（７） (少年サンデーコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XNKXGW2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06XNKXGW2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;柚子森さん（２） (ビッグコミックススペシャル)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XPSPFM2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06XPSPFM2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;【電子版】紅殻のパンドラ(10)&lt;紅殻のパンドラ&gt; (角川コミックス・エース)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B06XNXF7M2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B06XNXF7M2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;くまみこ 8&lt;くまみこ&gt; (コミックフラッパー)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;アルパカは愛されてるなぁ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-03-29&#34;&gt;2017-03-29&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ai&#34;&gt;「&lt;a href=&#34;http://jp.techcrunch.com/2017/01/11/20170110ai-powered-is-techs-meaningless-equivalent-of-all-natural/&#34;&gt;「AIを搭載」は「全て自然」同様の技術的ナンセンスだ | TechCrunch Japan&lt;/a&gt;」参照。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ai&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:kf1&#34;&gt;パークガイド権限の付与はカバンちゃんの「お客さんじゃない」発言と帽子の飾り羽をイベント・トリガーとした機械的な反応に見える。でも実際にはボスはカバンちゃんの行動を予測し &lt;strong&gt;カバンちゃんを助ける&lt;/strong&gt; ために他のラッキービーストを通じて救援を要請している。それも最終話で分かるようになってるんだけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:kf1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
