<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2015-12-29:/</id>
	<updated>2015-12-29T16:11:05+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>ゆく年くる年 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1229-stories/" />
		<id>tag:text.Baldanders.info,2015-12-29:/remark/2015/1229-stories/</id>
		<published>2015-12-29T16:11:05+09:00</published>
		<updated>2015-12-29T16:11:05+09:00</updated>
		<summary>2016年の主な暦象 / 年末年始のセキュリティ / 年末年始の引きこもり予定</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;h2 id=&#34;2016年の主な暦象:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;2016年の主な暦象&lt;/h2&gt;

&lt;p&gt;2016年の『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416115458/baldandersinf-22/&#34;&gt;天文年鑑&lt;/a&gt;』より。&lt;/p&gt;

&lt;h3 id=&#34;日食-月食:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;日食・月食&lt;/h3&gt;

&lt;p&gt;3月9日に皆既日食。
東南アジア・オーストラリアを中心とした地域で見れる。
日本では部分日食となる。&lt;/p&gt;

&lt;p&gt;9月1日に金環日食。
これはアフリカ大陸あたり。
日本ではかすりもしない。&lt;/p&gt;

&lt;p&gt;ほかに3月23日と8月18日および9月17日に半影月食があるが，まぁ見た目じゃわからないだろうねぇ（笑）&lt;/p&gt;

&lt;h3 id=&#34;水星の日面経過:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;水星の日面経過&lt;/h3&gt;

&lt;p&gt;日本時間の5月9日から10日にかけて水星の日面経過がある。
水星の日面経過は2006年以来9年ぶり。
ただし日本付近はピンポイントで見られない。&lt;/p&gt;

&lt;p&gt;ちなみに「経過」というのは，地球から見て大きな天体の前に小さな天体が通過する現象を指す&lt;a href=&#34;http://optik2.mtk.nao.ac.jp/~somamt/notes/transit.htm&#34;&gt;天文学用語&lt;/a&gt;である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cbd3cfb5e91b5e542f63ef8efac6673b:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cbd3cfb5e91b5e542f63ef8efac6673b:e&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
大きな天体に小さな天体が隠される「&lt;ruby&gt;&lt;rb&gt;掩蔽&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;えんぺい&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;」と対になる言葉だ。&lt;/p&gt;

&lt;h3 id=&#34;火星が中接近:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;火星が中接近&lt;/h3&gt;

&lt;p&gt;2016年は火星が地球に中接近する。
方角はさそり座とてんびん座の間をうろちょろしている。
見頃は5月31日の再接近（マイナス2等星くらいの明るさになる）の前後2,3ヶ月だろうか。
とくに8月25日は土星・火星・さそり座のアンタレスが並んで見えるため肉眼でも楽しめる。&lt;/p&gt;

&lt;p&gt;ちなみに火星は2年2ヶ月ごとに地球に接近する。
次回2018年の接近は大接近となる。&lt;/p&gt;

&lt;h3 id=&#34;主な流星群:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;主な流星群&lt;/h3&gt;

&lt;p&gt;今年は8月中旬のペルセウス座流星群が好条件である。
月齢が若く夜半前に月が沈んでしまうため，夜半過ぎから見頃になるペルセウス座流星群には都合がいいのである。
たぶん国立天文台がまた何かキャンペーンをやるだろうし，子どもがいる人は夏休みの自由研究の題材にしてはいかがだろうか。&lt;/p&gt;

&lt;p&gt;逆に12月中旬のふたご座流星群の時は満月と重なるという最悪条件。
でも月と流れ星をいっしょに撮りたい天体写真マニアには好機か？&lt;/p&gt;

&lt;h2 id=&#34;年末年始のセキュリティ:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;年末年始のセキュリティ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/measures/vacation.html&#34;&gt;長期休暇における情報セキュリティ対策：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/pr/2015/pr150006.html&#34;&gt;冬期の長期休暇に備えて &lt;sup&gt;2015&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;個人や家庭で注意する点としては，一般公開で休暇中の計画や行動を具体的に晒さないようにすることと， OS やアプリケーションのセキュリティ・アップデートをきちんと済ませること，といったところのようだ。&lt;/p&gt;

&lt;p&gt;まぁ Activity の公開については，一般の人はそれほど神経質になる必要もないと思うが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cbd3cfb5e91b5e542f63ef8efac6673b:j&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cbd3cfb5e91b5e542f63ef8efac6673b:j&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，プライバシーに配慮する必要のある人（有名人とか）は気をつけないといけないだろうねぇ。&lt;/p&gt;

&lt;h2 id=&#34;年末年始の引きこもり予定:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;年末年始の引きこもり予定&lt;/h2&gt;

&lt;p&gt;今年はゲームで引きこもろうとタイトルを物色していたのだが，君に決めた！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jp.square-enix.com/MOBIUSFF/&#34;&gt;MOBIUS FINAL FANTASY | SQUARE ENIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/0GlVAlyNi0I&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0GlVAlyNi0I&#34;&gt;メビウス ファイナルファンタジー [iPhone/Android] 公式トレーラー2015 - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;（以降 MFF と略称する）&lt;/p&gt;

&lt;p&gt;いやぁ，&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000561.shtml&#34;&gt;「風来のシレン」で怒りまくってた&lt;/a&gt;頃に比べると隔世の感があるね。
丹下桜さん，いいわぁ。&lt;/p&gt;

&lt;p&gt;基本的にガチャ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cbd3cfb5e91b5e542f63ef8efac6673b:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cbd3cfb5e91b5e542f63ef8efac6673b:s&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; の出目で難易度が激変するゲームは嫌いなのだが（これが射幸心を煽る元だし）， MFF はその辺のバランスがよく，いい感じに RPG のシナリオに没頭できるようになっている。&lt;/p&gt;

&lt;p&gt;特に年末年始のキャンペーンである「&lt;a href=&#34;http://www.finalfantasy.jp/mobius/information/2015/12/06/d4c1ad0f7cda4f73b7118fa4d93a90a4ec5129f2.html&#34;&gt;スターターパック大召喚&lt;/a&gt;」が秀逸。
これがあったから「遅れてきたルーキー」である私でもやる気になった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cbd3cfb5e91b5e542f63ef8efac6673b:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cbd3cfb5e91b5e542f63ef8efac6673b:a&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
お金突っ込まなくてもそれなりに楽しく遊べるというのは重要。&lt;/p&gt;

&lt;p&gt;蒐集家や重症のゲームオタクがいくらお金を突っ込んでも知ったことではないが，子どもや私のようなライト・ユーザでも楽しめないなら，その時点でクソゲーである。
個人的には「&lt;a href=&#34;http://www.jp.square-enix.com/MOBIUSFF/system/other.html&#34;&gt;メビウスギフトボックス&lt;/a&gt;」くらいなら継続的にお金を払ってもいいと思っている。&lt;/p&gt;

&lt;p&gt;若いころのようにゲーム雑誌を買って流行を追いかける気力もないし&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cbd3cfb5e91b5e542f63ef8efac6673b:m&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cbd3cfb5e91b5e542f63ef8efac6673b:m&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;，なにより可処分時間をゲームに当てるのが「もったいない」と思うようになってしまった。
ゲームをする暇もないほど生き急いでるつもりもないのだが，歳をとった証拠なのだろう。&lt;/p&gt;

&lt;p&gt;まぁ何事もほどほどに。&lt;/p&gt;

&lt;h2 id=&#34;それでは:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;それでは&lt;/h2&gt;

&lt;p&gt;みなさま，良い年を迎えられますよう。&lt;/p&gt;

&lt;h2 id=&#34;参考:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;参考&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416115458/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51XoyiTnmFL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416115458/baldandersinf-22/&#34;&gt;天文年鑑2016年版&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;天文年鑑編集委員会 &lt;/dd&gt;&lt;dd&gt;誠文堂新光社 2015-11-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805208899/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4805208899.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文手帳 2016年版: 星座早見盤付 天文ポケット年鑑&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/462108965X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/462108965X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;理科年表 平成28年&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B016YNZD0I/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B016YNZD0I.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文ガイド 2016年 01 月号  [特大号 付録付き]&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B017VPHTX2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B017VPHTX2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;月刊 星ナビ 2016年 1月号&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416115512/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4416115512.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;藤井 旭の天文年鑑 2016年版: スターウォッチング完全ガイド&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;天文ファン必携。2016年版&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-12-29&#34;&gt;2015-12-29&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cbd3cfb5e91b5e542f63ef8efac6673b:e&#34;&gt;ただし「日面通過」や「太陽面通過」でも間違いとは言い切れない。「太陽面通過」は主にメディア等で定着している言葉のようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cbd3cfb5e91b5e542f63ef8efac6673b:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cbd3cfb5e91b5e542f63ef8efac6673b:j&#34;&gt;それでも「旅の恥」をネットに開陳するのは止めたほうがいいと思う。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cbd3cfb5e91b5e542f63ef8efac6673b:j&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cbd3cfb5e91b5e542f63ef8efac6673b:s&#34;&gt;MFF ではガチャを「召喚」と呼んでいる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cbd3cfb5e91b5e542f63ef8efac6673b:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cbd3cfb5e91b5e542f63ef8efac6673b:a&#34;&gt;特にあのくだらない「リセット・マラソン」をしなくて済むのはホンマに助かる。「スターターパック大召喚」を行うには召喚チケット6枚か魔石3,000が必要だが，実は召喚チケット6枚くらいは序盤をマメにプレイしていればすぐ手に入るので，ここでお金を払う必要はない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cbd3cfb5e91b5e542f63ef8efac6673b:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cbd3cfb5e91b5e542f63ef8efac6673b:m&#34;&gt;そもそも紙の雑誌を買うなんて資源ごみにお金を払ってるようなもんだし。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cbd3cfb5e91b5e542f63ef8efac6673b:m&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>NYAGOS 4.1-beta がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/nyagos-4_1_beta/" />
		<id>tag:text.Baldanders.info,2015-12-20:/remark/2015/nyagos-4_1_beta/</id>
		<published>2015-12-20T16:31:06+09:00</published>
		<updated>2015-12-21T10:36:09+09:00</updated>
		<summary>4.1 で大きく変わったのはコールバック関数の扱いのようだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;ここのところ忙しくしてたら，いつの間にか &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; の &lt;a href=&#34;https://github.com/zetamatta/nyagos/releases/tag/4.1-beta&#34;&gt;4.1-beta&lt;/a&gt; が出てた。
4.1 で大きく変わったのはコールバック関数の扱いのようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クラッシュ回避のため、全てのLua のコールバック関数はそれぞれの Lua インスタンスを持つようにした。（つまり、.nyagos で定義されたグローバル変数は、全てのコールバック関数から見ることができなくなった）&lt;/li&gt;
&lt;li&gt;コールバック関数と .nyagos 間で値を共有するため、テーブル share[] を作った&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コールバック関数の挙動が変わったのは&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この制限は、クラッシュ回避のため、コールバック関数ごとに別の Lua インスタンスを用意しているためです。エイリアス等は別の goroutine 内で呼ばれるのですが、4.0 では、この時同一の Lua インスタンスを使用していたため、時にスタックに矛盾が発生して、クラッシュすることがあったのです。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c08586c85fa73c182a7a&#34;&gt;nyagosスクリプト解説 - CMD.EXEで化けさせず、nyagosの中だけプロンプトをカラー化&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ということらしい。&lt;/p&gt;

&lt;p&gt;実は &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; で表示するプロンプトは以下の記事を参考にオリジナルの &lt;code&gt;%PROMPT%&lt;/code&gt; から変えている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c08586c85fa73c182a7a&#34;&gt;nyagosスクリプト解説 - CMD.EXEで化けさせず、nyagosの中だけプロンプトをカラー化 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前のプロンプト定義は以下のような感じだった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Simple Prompt for CMD.EXE
set{
    PROMPT=&#39;$L&#39;.. nyagos.getenv(&#39;COMPUTERNAME&#39;) .. &#39;:$P$G$_$$$s&#39;
}

-- Coloring Prompt for NYAGOS.exe
local prompter=nyagos.prompt
nyagos.prompt = function(this)
    return prompter(&#39;$e[36;40;1m&#39;..this..&#39;$e[37;1m&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この中の &lt;code&gt;prompter&lt;/code&gt; がコールバック関数から見えなくなったということらしい。
そこで以下のようにコードを変更するのだそうだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Simple Prompt for CMD.EXE
nyagos.env.prompt=&#39;$L&#39;.. nyagos.getenv(&#39;COMPUTERNAME&#39;) .. &#39;:$P$G$_$$$s&#39;

-- Coloring Prompt for NYAGOS.exe
share.org_prompter=nyagos.prompt
nyagos.prompt = function(this)
    return share.org_prompter(&#39;$e[36;40;1m&#39;..this..&#39;$e[37;1m&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポイントは &lt;code&gt;share.org_prompter=nyagos.prompt&lt;/code&gt; の部分。
オリジナルの &lt;code&gt;nyagos.prompt()&lt;/code&gt; 関数を &lt;code&gt;share[]&lt;/code&gt; テーブルに退避させている。&lt;/p&gt;

&lt;p&gt;これでめでたく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\program\nyagos&amp;gt;nyagos.exe
Nihongo Yet Another GOing Shell 4.1-beta-amd64 Powered by go1.5.2 &amp;amp; Lua 5.3
Copyright (c) 2014,2015 HAYAMA_Kaoru and NYAOS.ORG
&amp;lt;VENUS:C:/program/nyagos&amp;gt;
$ ls
Doc/               lua53.dll          nyagos.lua*        specialfolders.js*
catalog.d/         makeicon.cmd*      nyole.dll
license.txt        nyagos.d/          readme.md
lnk.js*            nyagos.exe*        readme_ja.md
&amp;lt;VENUS:C:/program/nyagos&amp;gt;
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示できるようになった（カラーでお見せできないのが残念です）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:98f564c311f7795b2925fd0f13551316:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:98f564c311f7795b2925fd0f13551316:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;実は私もプロンプトは折り返す派。
開発環境ではフォルダがかなり深くなることがあり，既存の &lt;code&gt;$P$G&lt;/code&gt; では見づらいのだ。
まぁこれは Windows に限らないのだが。&lt;/p&gt;

&lt;h2 id=&#34;参考:98f564c311f7795b2925fd0f13551316&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/nyagos-and-lua/&#34;&gt;NYAGOS で Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/75840096f8279dd641a8&#34;&gt;何がちがう？NYAGOS 4.0 と 4.1β - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:98f564c311f7795b2925fd0f13551316:a&#34;&gt;そういや昔の UNIX ワークステーションはホスト名に venus とか惑星名を付けてるところが多かったな。私がネットワーク管理者をしてた時はプロキシサーバに janus とか付けてた。若気の至りである（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:98f564c311f7795b2925fd0f13551316:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 太陽系外惑星命名コンテスト - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1219-stories/" />
		<id>tag:text.Baldanders.info,2015-12-19:/remark/2015/1219-stories/</id>
		<published>2015-12-19T17:06:34+09:00</published>
		<updated>2015-12-19T17:06:34+09:00</updated>
		<summary>太陽系外惑星命名コンテスト / カープファンはもっと怒っていい / 軽佻浮薄 / BOINC では Android エンジニアを欲している / ロボット法学会設立準備会ブログ</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#exoplanet:02f686350486f11dc2a787fb73285189&#34;&gt;太陽系外惑星命名コンテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#carp:02f686350486f11dc2a787fb73285189&#34;&gt;カープファンはもっと怒っていい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#media:02f686350486f11dc2a787fb73285189&#34;&gt;軽佻浮薄&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boinc:02f686350486f11dc2a787fb73285189&#34;&gt;BOINC では Android エンジニアを欲している&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#robot-law:02f686350486f11dc2a787fb73285189&#34;&gt;ロボット法学会設立準備会ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;exoplanet:02f686350486f11dc2a787fb73285189&#34;&gt;太陽系外惑星命名コンテスト&lt;/h2&gt;

&lt;p&gt;昨年から国際天文学連合（IAU）が行っていた「太陽系外惑星命名コンテスト」の一般投票結果が出たようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iau.org/news/pressreleases/detail/iau1511/&#34;&gt;NameExoWorlds Contest Opens for Public Voting | Press Releases | IAU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nao.ac.jp/news/topics/2015/20151215-nameexoworlds.html&#34;&gt;国際天文学連合「太陽系外惑星命名キャンペーン」一般投票最終結果 | 国立天文台(NAOJ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oao.nao.ac.jp/2015/12/15/nameexoworlds/&#34;&gt;国立天文台 岡山天体物理観測所 | 岡山天体物理観測所で発見された太陽系外惑星に名前がつきました。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2015/12/18/exoplanet-new-names/&#34;&gt;太陽系外惑星に与えられた、神やゾンビ、科学者にちなんだ名前 « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;個人的には「星に名前をつける」という行為に魅力を感じなかったのと利権臭プンプンなのがなんか嫌だったので途中からスルーしてたが，まぁ多くの方が天文学に興味を持つ機会になるならいいかって気もする。
このあと何が行われるんだっけ。
まぁ，いいか。&lt;/p&gt;

&lt;h2 id=&#34;carp:02f686350486f11dc2a787fb73285189&#34;&gt;カープファンはもっと怒っていい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.netandfield.com/shar/2015/12/15-3.html&#34;&gt;糞みたいなカープファンには消えて欲しいわと思いつつ、おでん15個 - 電気ウナギ的○○&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実はこのとき私も「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000760.shtml&#34;&gt;ふくろう&lt;/a&gt;」でおでんを貪っておりまして，この緊迫した試合を観ていた。
ちょうど忘年会シーズンのピーク時期でもあり繁華街はどこも大盛り上がりだったのですよ。
いやぁ，負けたのは悔しいけど，ダレることのない面白い試合であった。&lt;/p&gt;

&lt;p&gt;いや，もう，地元では「カープより点が取れるサッカーチーム」として今年のサンフレッチェ大絶賛なのですよ。
そんでその試合を観たカープファンの結論は「それに比べてカープは」となるわけだ。&lt;/p&gt;

&lt;p&gt;今年のカープの守銭奴ぶりは開幕前から遺憾なく発揮されていて&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@spiegel/-12b10e655cd9&#34;&gt;相手チームファンの席を横取りする広島東洋カープ — Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それでも優勝に絡む活躍でもすればまだしも，あれだけコマが揃ってて「ゆ」の字にも掛からない有様。
来年も黒田は残ってくれると言ってくれたのは嬉しいが，それで勝てる気が全くしない。
今年のカープの個人的評価は「ファンがいくらお金を落としても応援しても無駄なチーム」である。
来年はどうなるやら。&lt;/p&gt;

&lt;p&gt;もともと広島の地元ファンは「しわい」のよ。
でもそれが広島地元スポーツチームへの愛情なわけ。
カープを愛するなら現状に対してちゃんと怒らないとダメだし，サンフレッチェのように実績を残しているチームにはきちんと報いないとダメだと思う。
地元の小さい商圏争いでスポーツチームの活動を制限するのは本当にくだらないことだと思う。&lt;/p&gt;

&lt;h2 id=&#34;media:02f686350486f11dc2a787fb73285189&#34;&gt;軽佻浮薄&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20151218_736120.html&#34;&gt;日本のミレニアル世代の8割はオンラインコンテンツの信憑性を疑わない傾向、アドビ調査 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「軽佻浮薄」ってことか（笑）&lt;/p&gt;

&lt;p&gt;まぁでも，「軽佻浮薄」という言葉は私等の世代で既に言われていたので，世の中の基盤はそうそう変わらないってことなのだろう。
というわけで，このサイトでは今後も流行に反して「ミレニアル世代」に嫌われるコンテンツを量産する所存であります。&lt;/p&gt;

&lt;p&gt;そもそも加工されてない映像や画像なんてものはない。
いまどき写真が「真実を写す」などと思っている馬鹿はいまい。
デジタル・カメラは内臓機能で自動補正が行われるんだから撮影時点で既に加工済みだし，対象をよりよく見せるために更に加工を施すことは天文写真でだって普通に行われていることだ。
ネット上の記事にしたって，そこに人間の意志が乗る限り偏ってない記事なんてものもありえない。&lt;/p&gt;

&lt;p&gt;問題は加工や偏りがあるか否かではなく，それがどんな意図で行われているかだろう。&lt;/p&gt;

&lt;h2 id=&#34;boinc:02f686350486f11dc2a787fb73285189&#34;&gt;BOINC では Android エンジニアを欲している&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boinc.berkeley.edu/dev/forum_thread.php?id=10677&#34;&gt;Android developer needed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だそうで，興味のある方は是非。&lt;/p&gt;

&lt;h2 id=&#34;robot-law:02f686350486f11dc2a787fb73285189&#34;&gt;ロボット法学会設立準備会ブログ&lt;/h2&gt;

&lt;p&gt;ロボット法学会設立準備会のブログが出来たらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/author/robot_law/&#34;&gt;ロボット法学会設立準備会 - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2015/12/48688/&#34;&gt;ロボットと法を考えよう - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ロボットとか人工知能について考える時の方向性は大きく2つあって，ひとつはロボットや人工知能を「知性」または知性の萌芽と考える方向，もうひとつはロボットや人工知能をできるだけ「道具」に押し留める方向だ。&lt;/p&gt;

&lt;p&gt;はっきりいってロボットや人工知能を道具に押し留めたいのなら，既にある「産業ロボット」や「愛玩ロボット」の延長線上で考えればいい話。
どうもロボット法学会設立準備会はそちらの方向を向いているようだ。
だから「未来のロボットや人工知能を現行法でどれだけコントロールできるか」というのが議論の中心になる。
これはこれで合理的な話である。&lt;/p&gt;

&lt;p&gt;もうひとつロボット法学会で論点になっているのが「ロボットや人工知能を通じた遠隔操作」の問題。
昨今お騒がせの drone も基本的には遠隔操作だし，医療分野でも遠隔操作による手術は実用化されつつある（されてるのかな？）。
あるいは身体にデバイスを埋め込む技術も昔とは様相が変わってきている。
これは道具と人との composition とも言える事態であり，現行法でどこまで対処できるのかが問題となる。&lt;/p&gt;

&lt;p&gt;まぁ，その辺をどう展開させてくれるのか，楽しみにしている。&lt;/p&gt;

&lt;p&gt;そういやロボット絡みで&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.stopkillerrobots.org/&#34;&gt;Campaign to Stop Killer Robots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.huffingtonpost.jp/human-rights-watch-japan/killer-robot_b_7038168.html&#34;&gt;「キラーロボット」はアカウンタビリティを欠く　法的責任追及にさまざまな困難、禁止が当然 | ヒューマン・ライツ・ウォッチ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というキャンペーンがあるらしい。
併せてどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;参考:02f686350486f11dc2a787fb73285189&#34;&gt;参考&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/31e2h91IUWL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4000280872/baldandersinf-22/&#34;&gt;イノベーション 悪意なき嘘 (双書 時代のカルテ)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;名和 小太郎 &lt;/dd&gt;&lt;dd&gt;岩波書店 2007-01-11&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「両用技術とはどのようなものか。その核心には「矛と楯の論理」がある」（まえがき「予断・診断・独断 そんなばかな」より）&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-10-01&#34;&gt;2015-10-01&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語における「オブジェクト」 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/object-oriented-programming/" />
		<id>tag:text.Baldanders.info,2015-12-15:/golang/object-oriented-programming/</id>
		<published>2015-12-15T21:19:58+09:00</published>
		<updated>2015-12-22T00:18:59+09:00</updated>
		<summary>Go 言語がいわゆる「オブジェクト指向言語」と言えるかどうかについては色々とあるようだが，オブジェクト指向プログラミングを助けるための仕掛けはいくつか存在する。今回はその中の type キーワードを中心に解説していく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;がいわゆる「オブジェクト指向言語」と言えるかどうかについては色々とあるようだが，オブジェクト指向プログラミングを助けるための仕掛けはいくつか存在する。
今回はその中の &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードを中心に解説していく。&lt;/p&gt;

&lt;p&gt;なお，今回のソースコードは “&lt;a href=&#34;https://tour.golang.org/&#34;&gt;A Tour of Go&lt;/a&gt;” のものをかなり流用しているため取り扱いに注意。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の公式ドキュメントは CC License の by 3.0，ソースコードは &lt;a href=&#34;https://golang.org/LICENSE&#34;&gt;BSD license&lt;/a&gt; で提供されている。&lt;/p&gt;

&lt;h2 id=&#34;go-言語の基本型:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;Go 言語の基本型&lt;/h2&gt;

&lt;p&gt;今さらだけど， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の基本型（basic type）は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bool&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;int, int8, int16, int32, int64&lt;/li&gt;
&lt;li&gt;uint, uint8, uint16, uint32, uint64&lt;/li&gt;
&lt;li&gt;uintptr&lt;/li&gt;
&lt;li&gt;byte&lt;/li&gt;
&lt;li&gt;rune&lt;/li&gt;
&lt;li&gt;float32, float64&lt;/li&gt;
&lt;li&gt;complex64, complex128&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうち byte は uint8 の別名で rune&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:rn&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:rn&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; は int32 の別名である。
また int, uint, uintptr のサイズはプラットフォーム依存になっている。
string は不変（immutable）な値で，その実体は byte 配列である。
基本型は組み込み型であり，振る舞いを追加・変更することはできない。&lt;/p&gt;

&lt;p&gt;さらにこれらの基本型を集約した構造体 &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; を定義できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	vertex := struct {
		X int
		Y int
	}{X: 1, Y: 2}
	fmt.Println(vertex)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに構造体のフィールド（field）には構造体を含めることができ，入れ子構造にすることもできる。&lt;/p&gt;

&lt;p&gt;この他に配列（array/slice）や連想配列（map）あるいは関数値（function value）といったものもあるが，今回は踏み込まない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:slc&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:slc&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;型に名前を付ける:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;型に名前を付ける&lt;/h2&gt;

&lt;p&gt;全ての型には &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードを使って名前を付けることができる。
例えば先ほどのコードは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func main() {
	vertex := Vertex{X: 1, Y: 2}
	fmt.Println(vertex)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書き直すことができる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードが使えるのは構造体だけではない。
上述の基本型も &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードを使って型を再定義できる。&lt;/p&gt;

&lt;p&gt;たとえば，2つの時点間の時間を表す &lt;a href=&#34;https://golang.org/pkg/time/&#34; title=&#34;time - The Go Programming Language&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Duration&lt;/code&gt; は以下のように定義されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Duration int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また，配列なども型として再定義できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Msgs []string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードを使って型に名前を付ける利点は3つある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;名前を付けることでコードの可読性を上げる（オブジェクト指向設計では名前がとても重要）&lt;/li&gt;
&lt;li&gt;再利用性の向上（特に構造体の場合）&lt;/li&gt;
&lt;li&gt;型に関数を関連付けることができる。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードによる名付けは単なる別名定義ではないということだ。&lt;/p&gt;

&lt;h2 id=&#34;型に関数を関連付ける:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;型に関数を関連付ける&lt;/h2&gt;

&lt;p&gt;型に関数を関連付けるには以下のように記述する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X =&amp;quot;, v.X, &amp;quot;, Y =&amp;quot;, v.Y)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;(v Vertex)&lt;/code&gt; の部分はメソッド・レシーバ（method receiver）と呼ばれ，これが型と関数を関連付ける役割を果たす。
内部処理としては&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func String(v Vertex) string {
	return fmt.Sprint(&amp;quot;X =&amp;quot;, v.X, &amp;quot;, Y =&amp;quot;, v.Y)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と等価である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:call&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:call&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
関数の呼び出し側は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
	X int
	Y int
}

func (v Vertex) String() string {
	return fmt.Sprint(&amp;quot;X =&amp;quot;, v.X, &amp;quot;, Y =&amp;quot;, v.Y)
}

func main() {
	vertex := Vertex{X: 1, Y: 2}
	fmt.Println(vertex.String())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにピリオドで関数を連結して記述する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:pr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:pr&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;構造体そのものには関数を付与できない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:mt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:mt&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func (v struct{ X, Y int }) String() string {
	return fmt.Sprint(&amp;quot;X =&amp;quot;, v.X, &amp;quot;, Y =&amp;quot;, v.Y)
}

func main() {
	var vertex = struct {
		X int
		Y int
	}{X: 1, Y: 2}
	fmt.Println(vertex.String())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと書いても，コンパイル時に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;invalid receiver type struct { X int; Y int } (struct { X int; Y int } is an unnamed type)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と怒られる。
&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードによって型に名前が付けられていることが重要なのだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;には class キーワードはないが， &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードを使うことで，名前と属性と操作を持つクラスを記述することができる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:cls&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:cls&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;汎化-特化と処理の委譲:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;汎化・特化と処理の委譲&lt;/h2&gt;

&lt;p&gt;オブジェクト指向設計においてクラス間の関係は大きく2つある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;汎化・特化&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:c1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:c1&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;（継承または is-a 関係）&lt;/li&gt;
&lt;li&gt;関連&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:c2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:c2&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;（包含または has-a 関係）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このうち関連についてはこれまで説明した方法で実現できるが，汎化・特化は表現できない。
そこで以下の機能を使って汎化・特化を実現する。&lt;/p&gt;

&lt;h3 id=&#34;振る舞いのみを定義した型:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;振る舞いのみを定義した型&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; を使うと振る舞いのみを定義した型を表現することができる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; で定義された型で最もよく目にするのは &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; だろう。
&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は以下のように定義できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:er1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:er1&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type error interface {
	Error() string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は「string 型を返す &lt;code&gt;Error()&lt;/code&gt; 関数」のみが定義されている。
逆に言うと「string 型を返す &lt;code&gt;Error()&lt;/code&gt; 関数」を持つ全ての型は &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; の一種（つまり is-a 関係）であると見なすことができる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:dt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:dt&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package os

// PathError records an error and the operation and file path that caused it.
type PathError struct {
	Op   string
	Path string
	Err  error
}

func (e *PathError) Error() string { return e.Op + &amp;quot; &amp;quot; + e.Path + &amp;quot;: &amp;quot; + e.Err.Error() }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と定義される &lt;a href=&#34;https://golang.org/pkg/os/&#34; title=&#34;os - The Go Programming Language&#34;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;PathError&lt;/code&gt; は &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; の一種である。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; も &lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt; キーワードで名前を付けることができ，他の型と同じように扱うことができる。
さらに &lt;a href=&#34;https://golang.org/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; で定義した型は振る舞いのみで具体的な実装を含まないため，多態性を持たせた記述が可能になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:if&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:if&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;型の埋め込み:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;型の埋め込み&lt;/h3&gt;

&lt;p&gt;もうひとつの汎化・特化の機能が型の埋め込み（embed）である。
構造体や &lt;a href=&#34;https://golang.org/ref/spec#Interface_types&#34; title=&#34;Interface types&#34;&gt;interface&lt;/a&gt; には別の型を埋め込むことができる。&lt;/p&gt;

&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;ReadWriter&lt;/code&gt; は以下のように &lt;code&gt;Reader&lt;/code&gt; および &lt;code&gt;Writer&lt;/code&gt; を埋め込んでいる。
（このときの &lt;code&gt;Reader&lt;/code&gt; および &lt;code&gt;Writer&lt;/code&gt; を「埋め込みインタフェース（enbedding interface）」と呼ぶ）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package io

// Implementations must not retain p.
type Reader interface {
	Read(p []byte) (n int, err error)
}

// Implementations must not retain p.
type Writer interface {
	Write(p []byte) (n int, err error)
}

// ReadWriter is the interface that groups the basic Read and Write methods.
type ReadWriter interface {
	Reader
	Writer
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これによって &lt;code&gt;ReadWriter&lt;/code&gt; は &lt;code&gt;Read()&lt;/code&gt; および &lt;code&gt;Write()&lt;/code&gt; を自身の振る舞いのように扱うことができる。
この場合も &lt;code&gt;ReadWriter&lt;/code&gt; は &lt;code&gt;Reader&lt;/code&gt; および &lt;code&gt;Writer&lt;/code&gt; の一種であると見なすことができる。&lt;/p&gt;

&lt;p&gt;同様に &lt;a href=&#34;https://golang.org/pkg/bufio/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;bufio&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;ReadWriter&lt;/code&gt; についても&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package bufio

// ReadWriter stores pointers to a Reader and a Writer.
// It implements io.ReadWriter.
type ReadWriter struct {
	*Reader
	*Writer
}

// NewReadWriter allocates a new ReadWriter that dispatches to r and w.
func NewReadWriter(r *Reader, w *Writer) *ReadWriter {
	return &amp;amp;ReadWriter{r, w}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と実装されていて， &lt;a href=&#34;https://golang.org/pkg/bufio/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;bufio&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;Reader&lt;/code&gt; および &lt;code&gt;Writer&lt;/code&gt; を埋め込み，これらの型の一種として実装されている（このときの &lt;code&gt;Reader&lt;/code&gt; および &lt;code&gt;Writer&lt;/code&gt; を「埋め込みフィールド（enbedded field）」または「匿名フィールド（anonymous field）」と呼ぶ）。
なお， &lt;a href=&#34;https://golang.org/pkg/bufio/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;bufio&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;ReadWriter&lt;/code&gt; は &lt;a href=&#34;https://golang.org/pkg/io/&#34; title=&#34;io - The Go Programming Language&#34;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;ReadWriter&lt;/code&gt; の一種として機能している点にも注目してほしい。&lt;/p&gt;

&lt;h3 id=&#34;関数のオーバーライドと処理の委譲:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;関数のオーバーライドと処理の委譲&lt;/h3&gt;

&lt;p&gt;では，今まで述べたことを使って以下のコードを書いてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type ErrorInfo interface {
	error
	Errno() int
}

type ErrorInfo1 struct{}

func (err *ErrorInfo1) Error() string {
	return fmt.Sprint(&amp;quot;Error Information: &amp;quot;, err.Errno())
}

func (err *ErrorInfo1) Errno() int {
	return 1
}

func Action() error {
	err := &amp;amp;ErrorInfo1{}
	return err
}

func main() {
    if err := Action(); err != nil {
		fmt.Println(err)
        return
	}
    fmt.Println(&amp;quot;Normal End&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; の拡張として &lt;code&gt;ErrorInfo&lt;/code&gt; を定義する。
&lt;code&gt;ErrorInfo&lt;/code&gt; では &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; を埋め込み，さらに &lt;code&gt;Errno()&lt;/code&gt; を追加している。
これを実装したのが &lt;code&gt;ErrorInfo1&lt;/code&gt; である。
したがって実行結果は “&lt;code&gt;Error Information: 1&lt;/code&gt;” が出力される。&lt;/p&gt;

&lt;p&gt;次に &lt;code&gt;ErrorInfo1&lt;/code&gt; のバリエーションとして &lt;code&gt;ErrorInfo2&lt;/code&gt; を追加してみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type ErrorInfo interface {
	error
	Errno() int
}

type ErrorInfo1 struct{}

func (err *ErrorInfo1) Error() string {
	return fmt.Sprint(&amp;quot;Error Information: &amp;quot;, err.Errno())
}

func (err *ErrorInfo1) Errno() int {
	return 1
}

type ErrorInfo2 struct {
	ErrorInfo1
}

func (err *ErrorInfo2) Errno() int {
	return 2
}

func Action() error {
	err := &amp;amp;ErrorInfo2{}
	return err
}

func main() {
    if err := Action(); err != nil {
		fmt.Println(err)
        return
	}
    fmt.Println(&amp;quot;Normal End&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ErrorInfo2&lt;/code&gt; では &lt;code&gt;Error()&lt;/code&gt; は &lt;code&gt;ErrorInfo1&lt;/code&gt; のものをそのまま使い回したいが &lt;code&gt;Errno()&lt;/code&gt; では異なる値を出力したい，と考えた。
実行結果として “&lt;code&gt;Error Information: 2&lt;/code&gt;” が出力されることを期待したが，実際には前回と同じ “&lt;code&gt;Error Information: 1&lt;/code&gt;” が出力される。&lt;/p&gt;

&lt;p&gt;埋め込みフィールド（&lt;code&gt;ErrorInfo1&lt;/code&gt;）の関数の名前が埋め込みを行った型（&lt;code&gt;ErrorInfo2&lt;/code&gt;）の名前と衝突する場合は埋め込みを行った型のほうが優先的される&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:ovr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:ovr&#34;&gt;12&lt;/a&gt;&lt;/sup&gt; が，これは C++ や Java などにある仮想関数のオーバーライドとは少し異なる。&lt;/p&gt;

&lt;p&gt;上のコードでは &lt;code&gt;ErrorInfo2&lt;/code&gt; と直接関連付けられた &lt;code&gt;Error()&lt;/code&gt; がないため &lt;code&gt;ErrorInfo1&lt;/code&gt; の &lt;code&gt;Error()&lt;/code&gt; が呼ばれるが，その関数の中で呼ばれる &lt;code&gt;Errno()&lt;/code&gt; は &lt;code&gt;ErrorInfo2&lt;/code&gt; と関連付けられた関数ではなく &lt;code&gt;ErrorInfo1&lt;/code&gt; と関連付けられた関数になる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/delegation.svg&#34;&gt;&lt;img src=&#34;http://text.baldanders.info/images/delegation.svg&#34; alt=&#34;delegation&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://text.baldanders.info/images/delegation.svg&#34;&gt;delegation&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では埋め込みフィールドの関数呼び出しが「委譲」として機能しているためである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:ef&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:ef&#34;&gt;13&lt;/a&gt;&lt;/sup&gt;。
たとえば C++ 言語では virtual 修飾子を付与して仮想関数化することで意図的にオーバーライドできるが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:dlg&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:dlg&#34;&gt;14&lt;/a&gt;&lt;/sup&gt;， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではこのような仕掛けがないため，呼ばれた関数は常に委譲として機能する。&lt;/p&gt;

&lt;p&gt;上の例はクラス構成からして明らかにダメダメなのだが，今回のポイントはサブクラスである &lt;code&gt;ErrorInfo2&lt;/code&gt; から &lt;code&gt;Errno()&lt;/code&gt; 関数を上書きすることでスーパークラス &lt;code&gt;ErrorInfo1&lt;/code&gt; の &lt;code&gt;Error()&lt;/code&gt; 関数の処理を書き換えようとした点にある。
継承&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:374c32c25cfbe86872f0cdc7cd9ba174:ih&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:374c32c25cfbe86872f0cdc7cd9ba174:ih&#34;&gt;15&lt;/a&gt;&lt;/sup&gt; の実装で一番よくあるミスがこの「カプセル化の破れ」で， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は敢えて移譲を強制することでこの手の不具合が発生するのを回避しようとしているように見える。&lt;/p&gt;

&lt;p&gt;また，他の言語では明示的に委譲を実装しようとすると冗長な記述になることが多いが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は埋め込みを使うことでシンプルな記述で委譲を実装できる点がメリットと言える。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:374c32c25cfbe86872f0cdc7cd9ba174&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/16acb36e94cfe3b02aa1&#34;&gt;オブジェクト指向言語としてGolangをやろうとするとハマること - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sona-tar/items/2b4b70694fd680f6297c&#34;&gt;オブジェクト指向言語としてGolangをやろうとするとハマる点を整理してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://otiai10.hatenablog.com/entry/2014/01/15/220136&#34;&gt;Go言語に継承は無いんですか【golang】 - DRYな備忘録&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://otiai10.hatenablog.com/entry/2014/06/16/224109&#34;&gt;Go言語でジェネリクスっぽいことがしたいでござる【generics】【golang】 - DRYな備忘録&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:rn&#34;&gt;rune は Unicode 文字の符号位置（code point）を示す型で文字そのものを表現する。 string と rune の関係については「&lt;a href=&#34;http://text.baldanders.info/golang/string-and-rune/&#34;&gt;String と Rune&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:rn&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:slc&#34;&gt;slice については「&lt;a href=&#34;http://text.baldanders.info/golang/search-prime-numbers/&#34;&gt;素数探索アルゴリズムで遊ぶ&lt;/a&gt;」で少し紹介している。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:slc&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:call&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の関数呼び出しでは，引数の渡し方は基本的に「値渡し」である。「参照渡し」にするにはポインタを使う。メソッド・レシーバについては値渡しで定義すれば値とポインタ両方のインスタンスに対して関数を呼び出せる。いわゆる value object についてはこれで問題ないだろう。バッファ操作のような内部状態を操作する関数についてはメソッド・レシーバを参照渡しにして定義するとよい。ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のポインタは C/C++ のようなポインタ演算はできないので注意（ポインタ演算をしたい場合は &lt;a href=&#34;https://golang.org/pkg/unsafe/&#34; title=&#34;unsafe - The Go Programming Language&#34;&gt;&lt;code&gt;unsafe&lt;/code&gt;&lt;/a&gt; パッケージを使う）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:call&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:pr&#34;&gt;ちなみに &lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;time - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Print&lt;/code&gt; などでは引数の型が &lt;code&gt;String()&lt;/code&gt; を持っていることを期待し，この関数の出力結果をデフォルト書式にしている。したがって &lt;code&gt;fmt.Println(vertex.String())&lt;/code&gt; と &lt;code&gt;fmt.Println(vertex)&lt;/code&gt; は同じ結果になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:pr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:mt&#34;&gt;他にも基本型や他パッケージで定義されている型に関数を追加することはできない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:mt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:cls&#34;&gt;クラスは名前と属性と操作の3つの要素で構成されている。名前は他クラスと識別できるものを1個。属性と操作は0個以上存在する。 &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では空のフィールドの &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; を定義することにより0個の属性を持つクラスを構成できる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:cls&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:c1&#34;&gt;言わずもがなだが，サブクラスから見たスーパークラスが「汎化」でその逆が「特化」である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:c1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:c2&#34;&gt;関連は更に集約と複合に分類できるが今回は踏み込まない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:c2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:er1&#34;&gt;&lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; は組み込み型なので，実際にこのような定義が標準パッケージにあるわけではない。 &lt;a href=&#34;http://blog.golang.org/error-handling-and-go&#34; title=&#34;Error handling and Go - The Go Blog&#34;&gt;error&lt;/a&gt; について詳しくは「&lt;a href=&#34;http://text.baldanders.info/golang/error-handling/&#34;&gt;エラー・ハンドリングについて&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:er1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:dt&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では Java の implement のような継承を明示するキーワードはない。記述された振る舞いからクラス関係を決定する方法を「&lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_typing&#34;&gt;ダック・タイピング（duck typing）&lt;/a&gt;」と呼ぶ。ダック・タイピングの由来は「&lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_test&#34;&gt;ダック・テスト（duck test）&lt;/a&gt;」だそうで，ダック・テストとは “If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.” と帰納法的に対象を推測する手法を指すらしい。ダック・タイピングのメリットのひとつは多重継承で発生する様々な問題（名前の衝突や菱形継承など）を気にする必要がない点である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:dt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:if&#34;&gt;たとえば &lt;code&gt;interface{}&lt;/code&gt; と記述すればあらゆる型を含むことになる。これを利用して &lt;a href=&#34;https://golang.org/pkg/fmt/&#34; title=&#34;time - The Go Programming Language&#34;&gt;&lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Print&lt;/code&gt; は &lt;code&gt;func Print(a ...interface{}) (n int, err error) { ... }&lt;/code&gt; と定義されている。ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;にはいわゆる&lt;a href=&#34;https://golang.org/doc/faq#generics&#34;&gt;「総称型」はサポートされていない&lt;/a&gt;。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:if&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:ovr&#34;&gt;複数の型を埋め込んでいる場合，埋め込みフィールド間で名前が衝突しているフィールドや関数を使おうとするとコンパイルエラーになる。この場合は &lt;code&gt;err.ErrorInfo1.Error()&lt;/code&gt; のように型を明示して回避できる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:ovr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:ef&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;的には埋め込みフィールドはフィールドのバリエーションのひとつにすぎないため，動作も通常のフィールドが持つ関数を呼び出した場合と変わらない。そういう意味では構造体への埋め込みは，見かけ上は「is-a 関係」でも，実質的には「has-a 関係」に近いと言えるかもしれない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:ef&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:dlg&#34;&gt;逆に Java では関数は常に仮想関数として機能しオーバーライドされる可能性がある。これを抑止するためには final 修飾子を付加する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:dlg&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:374c32c25cfbe86872f0cdc7cd9ba174:ih&#34;&gt;ここで言う継承は設計時の「汎化・特化」のことではなく，言語機能などを使った実装上の継承のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:374c32c25cfbe86872f0cdc7cd9ba174:ih&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>本を売りたいなら本屋である必然性がない，または「まだ本屋で消耗してるの？」 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/books/" />
		<id>tag:text.Baldanders.info,2015-12-13:/remark/2015/books/</id>
		<published>2015-12-13T20:18:01+09:00</published>
		<updated>2015-12-13T20:18:01+09:00</updated>
		<summary>はっきり言っちゃうけど，日本の書店システムは一度完全に解体したほうがいいんじゃないの？</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/13/no-concierge-for-bookstore/&#34;&gt;書店に「生活提案」は可能か？ « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まぁ面白いとは思うけど，それならもう「本屋」である必然性がないよね。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;確かに、購書空間が本を探し、吟味するために快適なものであることは大切である。だがそれはあらゆる商業空間に共通の課題であり、「生活提案」という理念ゆえではない。本を購入したあと、居心地のよいカフェで美味しい飲み物を飲みながら新しい本を繙くのは至福の時間だが、それは読者一人一人の嗜好に任せるべきことで、ことさら書店が「提案」することではない。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/13/no-concierge-for-bookstore/&#34;&gt;書店に「生活提案」は可能か？&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;というのはもっともな話で，それなら本屋にカフェスペースを置くのではなくカフェで店の雰囲気に合う本を売ればいいぢゃん，ってことになる。
実際そういう発想のビジネス・モデルはある。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;たとえば「ツール・ド・フランス」に関する本がほしい人は、本屋さんよりも自転車（ロードバイク）屋さんに行く頻度が多いのではないかなと思うんです。もちろん、そのユーザーが本屋に行く層ならこれまで通り本屋で買えばいいのですが、その人が本屋に行かないのだとしたら…。だったら自転車屋さんに、最初からそのお店にくるお客さんが興味をもちそうな本を置くことで、読書に対して可処分時間が使われる可能性が増えると思うのです。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2015/10/15/kotori-tsugi-ynst/&#34;&gt;どこでも、だれでも「書店をつくれる世界」にするしかない：本を読むプロがはじめるイノヴェイション「ことりつぎ」 « WIRED.jp&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「生活提案」というのは本当はこういうことなんじゃないの？&lt;/p&gt;

&lt;p&gt;たとえばマンガやファッション雑誌などはコンビニで「ついでに」買う人が多いだろうし，私のようにコンピュータ関連の本を家電量販店で買ったりする人もいるだろう。
その人の日常生活の中で自然に本を手にとってくれるよう望むならば，最初から本屋なんか「アウト・オブ・眼中」だよ。&lt;/p&gt;

&lt;p&gt;今の本屋はただの「本を定価で売るブックオフ」か「本しか売ってないコンビニ」でしかない。
目的の本が決まってる人は Amazon や他のサービスでポチればいいし，なんとなく本を探している人は，売れ筋の本しか置かないその辺の本屋より，個性的な品揃えの古本屋を巡回するほうが余程幸せな時間を過ごせる。
本屋で消耗するなんて本好きにとっては馬鹿げた行為だ。&lt;/p&gt;

&lt;p&gt;はっきり言っちゃうけど，日本の書店システムはバブル崩壊以降（特に地方は）壊れてしまってるし，一度完全に解体したほうがいいんじゃないの？ そのほうが出版社にとっても作者にとっても，そして本屋にとっても幸せなことだと思うけどね。&lt;/p&gt;

&lt;p&gt;もちろん再構築（restructuring）はいつだって痛みを伴うものだけど。
でも，このままダラダラと成り行きに任せてたら三者共倒れだよ。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B009IMAGYQ/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51z%2BiAd-8QL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B009IMAGYQ/baldandersinf-22/&#34;&gt;犬とハサミは使いよう　１&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;更伊 俊介 鍋島 テツヒロ &lt;/dd&gt;&lt;dd&gt;KADOKAWA / エンターブレイン 2011-02-28&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CFJIZYM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CFJIZYM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;犬とハサミは使いよう2&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CFJJ01O/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CFJJ01O.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;犬とハサミは使いよう3&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CFJJ05A/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CFJJ05A.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;犬とハサミは使いよう4&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CFJJ03M/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CFJJ03M.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;犬とハサミは使いよう5&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CPEB6PW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CPEB6PW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;犬とハサミは使いよう6&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;犬になっても本を読む！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-04-26&#34;&gt;2015/04/26&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>また Windows 10 にヤラレタ（KB3112343 の恐怖） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/windows-10-upgrade-problem/" />
		<id>tag:text.Baldanders.info,2015-12-13:/remark/2015/windows-10-upgrade-problem/</id>
		<published>2015-12-13T13:12:02+09:00</published>
		<updated>2015-12-13T13:12:02+09:00</updated>
		<summary>自宅のマシンをチェックしたら，既に遅かった。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;h2 id=&#34;kb3112343-の恐怖:293f1a69cda8a56bf980c6417271db51&#34;&gt;KB3112343 の恐怖&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.itmedia.co.jp/burstlog/2015/12/microsoftwindows_7kb3112343.html&#34;&gt;Microsoft様、お願いですからWindows 7のままでいさせてください（KB3112343の恐怖）：海外速報部ログ：オルタナティブ・ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ見て慌てて自宅のマシンをチェックしたら，既に遅かった。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23083745173/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/630/23083745173_dddce0d481.jpg&#34; alt=&#34;windows update 201512&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23083745173/&#34;&gt;windows update 201512&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Windows Update にこういうの混ぜないで欲しいなぁ。
しょうがない。
削除するか。&lt;/p&gt;

&lt;h2 id=&#34;windows-update-によるアップグレードを抑止する:293f1a69cda8a56bf980c6417271db51&#34;&gt;Windows Update によるアップグレードを抑止する&lt;/h2&gt;

&lt;p&gt;まずはコントロールパネルから「プログラムと機能」を表示し，その中の「インストールされた更新プログラムを表示」する。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23082675514/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/763/23082675514_d35d3628e3.jpg&#34; alt=&#34;windows update 201512&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23082675514/&#34;&gt;windows update 201512&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これで今までインストールした Windows Update の一覧が表示されるので，この中から以下の項目をアンインストールする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;KB2952664 （もしあれば）&lt;/li&gt;
&lt;li&gt;KB3021917 （もしあれば）&lt;/li&gt;
&lt;li&gt;KB3035583 （もしあれば）&lt;/li&gt;
&lt;li&gt;KB3112343&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一覧から目視で探すのは大変なので，右肩にある検索窓から上に挙げた KBxxxxxxx の番号を入力して探してみると簡単にできる。
アンインストールを行うと再起動を要求されることがあるが，アンインストールを全部行ったあと再起動すればよい。&lt;/p&gt;

&lt;p&gt;次にコントロールパネルから「Windows Update」を開く。
利用可能な更新プログラムの中に「Windows 10 にアップグレード」の文言のある項目や上に挙げた KB3112343 等の更新プログラムがあれば全て「非表示」にする。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23684736236/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5674/23684736236_3a5b44e179.jpg&#34; alt=&#34;windows update 201512&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23684736236/&#34;&gt;windows update 201512&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;トドメにローカル・グループ・ポリシーを変更する。
今度は &lt;code&gt;gpedit.msc&lt;/code&gt; を起動する（起動の方法はご随意に，多分管理者権限が必要）。&lt;/p&gt;

&lt;p&gt;起動したら「コンピュータの構成」→「管理用テンプレート」→「Windows コンポーネント」→「Windows Update」を開く。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23343726479/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/655/23343726479_f484fe8914.jpg&#34; alt=&#34;local group policy editor&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23343726479/&#34;&gt;local group policy editor&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;右側に表示されている一覧から「Turn off the upgrade to the latest version of Windows through Windows Update」をダブルクリックで開く。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23685672316/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/637/23685672316_5cd228bfc0.jpg&#34; alt=&#34;Turn off the upgrade to the latest version of Windows through Windows Update&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23685672316/&#34;&gt;Turn off the upgrade to the latest version of Windows through Windows Update&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;左上にある「有効(E)」のラジオボタンをチェックして「適用」ボタンを押せば OK。
もとの画面で「Turn off the upgrade to the latest version of Windows through Windows Update」の項目が「有効」になっていれば設定が効いている。&lt;/p&gt;

&lt;p&gt;Windows 10 が悪いとは言わない（まぁ敢えてオススメはしないけど）。
しかし，その気がない人にまで強制的にアップグレードさせようというのは悪質すぎる。
こういうことやるから Microsoft は嫌われるんだってそろそろ自覚しろよ。&lt;/p&gt;

&lt;p&gt;個人的には Windows 7 のサポートが切れる2020年までにメインの環境を Linux に移行する予定なんで（そのために&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;秀丸から ATOM に乗り換え&lt;/a&gt;たりしてるんだし），要らんことしないでほしい。&lt;/p&gt;

&lt;h2 id=&#34;参考:293f1a69cda8a56bf980c6417271db51&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/bbc91030c26bc3c799f7&#34;&gt;Windows 10 の広告アイコンを消す方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fortune-work.com/2015/windows10-2.html&#34;&gt;【続】 Windows7でWindows10 無償アップデートのアイコンをアンインストール | 空中庭園&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fortune-work.com/2015/windows10-4.html&#34;&gt;Windows 7のWindows Updateで表示される「Windows 10 にアップグレード」を削除する方法 | 空中庭園&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50752605.html&#34;&gt;エフセキュアブログ : Windows 10を安心して使用するために知っておくべき5つのこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/wifi-sense/&#34;&gt;Windows 10 で PSK を共有する — しっぽのさきっちょ | text.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/02/news076.html&#34;&gt;「Windows 10」へのアップグレード、来年には「推奨される更新プログラム」に“格上げ”へ - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 「あかつき」金星の衛星になる - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1213-stories/" />
		<id>tag:text.Baldanders.info,2015-12-13:/remark/2015/1213-stories/</id>
		<published>2015-12-13T00:21:37+09:00</published>
		<updated>2015-12-13T00:21:37+09:00</updated>
		<summary>「あかつき」金星の衛星になる / State of the Commons 2015 / 「往復書簡・クールジャパンを超えて」 / 新潮社 Foresight に入会した</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#venus:a041a5d41c83ed2e24b78f5dcc5fe355&#34;&gt;「あかつき」金星の衛星になる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cc:a041a5d41c83ed2e24b78f5dcc5fe355&#34;&gt;State of the Commons 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jpn:a041a5d41c83ed2e24b78f5dcc5fe355&#34;&gt;「往復書簡・クールジャパンを超えて」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fs:a041a5d41c83ed2e24b78f5dcc5fe355&#34;&gt;新潮社 Foresight に入会した&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;venus:a041a5d41c83ed2e24b78f5dcc5fe355&#34;&gt;「あかつき」金星の衛星になる&lt;/h2&gt;

&lt;p&gt;「あかつき」の金星周回軌道への再投入に成功したようだ。
めでたい！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2015/12/20151207_akatsuki_j.html&#34;&gt;JAXA | 金星探査機「あかつき」の金星周回軌道投入における姿勢制御用エンジン噴射結果について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2015/12/20151207_02.html&#34;&gt;2015年12月7日ニュース「探査機『あかつき』が金星軌道にJAXA再挑戦し日本初の惑星探査実現へ」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1941&#34;&gt;あかつき、金星周回軌道への再投入を実施、成否は2日後に判明 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaxa.jp/press/2015/12/20151209_akatsuki_j.html&#34;&gt;JAXA | 金星探査機「あかつき」の金星周回軌道投入結果について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1512/09/news132.html&#34;&gt;「あかつき」から金星の画像が届く　軌道投入成功後、初の撮影 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://moonstation.jp/ja/blog/archives/1946&#34;&gt;【速報】あかつき、金星周回軌道への投入を確認、日本初の惑星探査機誕生 | 月探査情報ステーションブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.planetary.org/blogs/emily-lakdawalla/2015/12091630-akatsukis-new-orbit-first.html&#34;&gt;Akatsuki&amp;rsquo;s new orbit, first images, and science plans | The Planetary Society&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.isas.ac.jp/j/topics/topics/2015/1209.shtml&#34;&gt;ISAS | 金星探査機「あかつき」の金星周回軌道投入結果について / トピックス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あぁ，そうか。
火星の時は失敗してるもんねぇ。
月や小惑星（asteroid）を除けば「あかつき」が日本初か。
こうやって，着々と実績を積んでいくんだねぇ。&lt;/p&gt;

&lt;h2 id=&#34;cc:a041a5d41c83ed2e24b78f5dcc5fe355&#34;&gt;State of the Commons 2015&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stateof.creativecommons.org/2015/&#34;&gt;Creative Commons — State of the Commons 2015 — It&amp;rsquo;s been a remarkable year, most notably for the more than 1.1 billion works under one of the CC licenses, CC0, or the public domain mark.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://creativecommons.org/weblog/2015/12/08/46651&#34;&gt;State of the Commons: 1 Billion Creative Commons Works - Creative Commons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@creativecommons/state-of-the-commons-2015-86016ee719c4#.d8hq9r28k&#34;&gt;STATE OF THE COMMONS 2015 — Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@creativecommons/state-of-the-commons-1-billion-creative-commons-works-82a08592e6dd#.yl7oaj7v9&#34;&gt;State of the Commons: 1 Billion Creative Commons Works — Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://current.ndl.go.jp/node/30172&#34;&gt;クリエイティブ・コモンズ（CC）、2015年版の”State of the Commons”を公開、10億件以上の作品がCCライセンスを使用 | カレントアウェアネス・ポータル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; が付与された作品が10億件を超えたそうな。
このうち CC0 と「表示」および「表示-継承」の Free Culture licenses が $3 + 24 + 37$ で $60\%$ 超えですよ。
めでたい！&lt;/p&gt;

&lt;p&gt;&amp;hellip;まぁ，日本にはあんまり関係ない話かもだけど。&lt;/p&gt;

&lt;h2 id=&#34;jpn:a041a5d41c83ed2e24b78f5dcc5fe355&#34;&gt;「往復書簡・クールジャパンを超えて」&lt;/h2&gt;

&lt;p&gt;なんか面白い連載が始まるらしい。
発端はこれ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2015/11/16/beyond-cool-japan/&#34;&gt;クール・ジャパンはどこがイケ（て）ないのか？ « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2015/11/47846/&#34;&gt;日本のテック業界の元気がない理由 - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちうわけで， &lt;a href=&#34;https://wirelesswire.jp/author/mayumi_tanimoto/&#34;&gt;WirelessWire News の谷本真由美さん&lt;/a&gt;と&lt;a href=&#34;http://magazine-k.jp/author/ohara-kay/&#34;&gt;マガジン航の大原ケイさん&lt;/a&gt;による「往復書簡」が始まったようだ。
早速1往復。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2015/12/07/beyond-cool-japan-01/&#34;&gt;副次権ビジネスのすすめ « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2015/12/48658/&#34;&gt;末端の人間は不真面目でいい - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんか「往復書簡」というより遠距離掛け合い漫才みたいな感じだが，面白そうなのでこのまま読んでみよう。
どういう話に発展するか楽しみである。&lt;/p&gt;

&lt;h2 id=&#34;fs:a041a5d41c83ed2e24b78f5dcc5fe355&#34;&gt;新潮社 Foresight に入会した&lt;/h2&gt;

&lt;p&gt;そういえば，今月に入って新潮社 Foresight に入会した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fsight.jp/&#34;&gt;新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;直接のトリガは今月から有料になった&lt;a href=&#34;http://www.fsight.jp/category/ikeuchinews&#34;&gt;池内恵さんの記事&lt;/a&gt;を読むためだが，前々から興味はあったのだ。&lt;/p&gt;

&lt;p&gt;「情報は広く知識は深く」というは最近の私の座右の銘となっているが，情報にも無料でアクセスできる情報と有料の情報がある。
「給湯室会議」や「居酒屋トーク」あるいはネット上のゴシップは無料の情報だ。
一方で新聞や雑誌などの情報は有料の情報である。
両者はそもそも情報の質と方向性が異なるため，摂取の仕方も異なる。&lt;/p&gt;

&lt;p&gt;ただ，最近の日本の新聞やテレビの情報についてはお金を払ってまで見ようとは思わない。
前節の記事で紹介した「&lt;a href=&#34;https://wirelesswire.jp/2015/11/47846/&#34;&gt;日本のテック業界の元気がない理由&lt;/a&gt;」でも&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;本国ではうだつの上がらなそうな微妙な感じのガイジンが「日本のマンホールの蓋がすごい」「日本のワキガ防止スプレーの効果はすごい。俺のワキガさえ平気だ！」と媚を売る番組が大盛況で、相変わらずだなあという感じですが、日本の某経済雑誌の今週号の特集が「誰がテレビを殺す」だったりして、Top Gearの地位はしばらく安泰だろうと思う今日このごろです。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://wirelesswire.jp/2015/11/47846/&#34;&gt;日本のテック業界の元気がない理由&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とか dis られていて，（私は殆どテレビを見ないけど）確かにお好み焼き屋でたまに見るテレビ番組ってそんなん多いなと思ったりする。
そんで「やっぱ自宅にテレビは要らんな」となる。
新聞も同じで，新聞記事に書いてあることがどこまで本当か他のニュースソース（大抵英語の情報かその翻訳，英語不得手なのに）で比較・確認しないといけない。
こんな「噂」レベルの情報にお金を払うほうがどうかしている。&lt;/p&gt;

&lt;p&gt;本来，お金を払う価値のある情報というのは一次情報かそれに近い情報である。
記者やアナウンサのキャラや演出なんかどうでもいいのである。&lt;/p&gt;

&lt;p&gt;一方で現場に近い人達（たとえば上述の谷本真由美さんや原ケイさんなど）の記事は（ご本人はギャラを貰ってるのかもしれないが），私たちユーザは無料でアクセスできる。
『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00OT5IZR2/baldandersinf-22/&#34;&gt;石油の「埋蔵量」は誰が決めるのか?&lt;/a&gt;』を読んで最近チェックしだした岩瀬昇さんなどは &lt;a href=&#34;http://ameblo.jp/nobbypapa/&#34;&gt;ameblo で書かれている&lt;/a&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:a041a5d41c83ed2e24b78f5dcc5fe355:ambl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:a041a5d41c83ed2e24b78f5dcc5fe355:ambl&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;日本のジャーナリズムはお金の取り方・使い方を間違えているとしか思えない。&lt;/p&gt;

&lt;p&gt;Foresight の購読料は 800円/月 だが，それを払ってまで見る価値のある媒体なのか，それとも「やっぱいいや」と購読を止めちゃうのか。
まぁ，おいおい分かるだろう。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:a041a5d41c83ed2e24b78f5dcc5fe355:ambl&#34;&gt;本や漫画を書いてる方が ameblo なんかで記事を書くのはブランドの毀損じゃないかと思ってしまうのだが，まぁいいか。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:a041a5d41c83ed2e24b78f5dcc5fe355:ambl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>強すぎる結界は更なる魔を引き寄せる - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/cipher-risk/" />
		<id>tag:text.Baldanders.info,2015-12-12:/remark/2015/cipher-risk/</id>
		<published>2015-12-12T21:16:03+09:00</published>
		<updated>2015-12-12T21:16:03+09:00</updated>
		<summary>強すぎる光は影を濃くするのみだ。あるいは強すぎる結界は更なる魔を引き寄せる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2015/12/48567/&#34; title=&#34;我匿す、ゆえに我あり - WirelessWire News（ワイヤレスワイヤーニュース）&#34;&gt;我匿す、ゆえに我あり - WirelessWire News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はこれをネタにつらつらと世迷いごとを書いてみる。
いつも以上に戯れ言なので，あんまり真面目に読まないように。&lt;/p&gt;

&lt;h2 id=&#34;本当に秘密なことは誰とも共有してはならない:dce2488275596f7e80d074ad1b292c1e&#34;&gt;本当に秘密なことは誰とも共有してはならない&lt;/h2&gt;

&lt;p&gt;優れたアルゴリズムを使えば暗号システムそのものは必ずしも隠す必要はないが，鍵はどうしても秘匿しなくてはならない。
しかし秘密を共有すれば必ず漏えいリスクが発生する。
公開鍵暗号方式が「発明」されるまで，暗号技術が軍事または大企業の技術として専有されていたのは「秘密の共有」に莫大なコストがかかるからだ。&lt;/p&gt;

&lt;p&gt;本当に秘密なことは誰とも共有してはならない。&lt;/p&gt;

&lt;h2 id=&#34;秘密なんてないさ:dce2488275596f7e80d074ad1b292c1e&#34;&gt;秘密なんてないさ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000833.shtml&#34;&gt;個人的に今年イチオシ&lt;/a&gt;の映画である『イミテーション・ゲーム』に印象的なシーンがある。
ドイツの暗号機械「エニグマ」の暗号鍵を短時間で解読することに成功したアラン等のチームは，この事実を（政府や軍にも）知らせないことに決めた。
理由は（政治的な思惑もあるだろうが）事実を敵国に知られないためである。
敵国に知られれば相手は暗号システムを変えるだろうから。&lt;/p&gt;

&lt;p&gt;秘密を隠すためには秘密が存在することをも隠す必要がある。&lt;/p&gt;

&lt;p&gt;フランスの警察当局がテロ事件の犯人を捕まえることができたのは暗号を解読したからではない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gizmodo.jp/2015/11/what-police-can-learn-from-a-terrorist.html&#34;&gt;警察がテロリストの捨てた携帯からわかること : ギズモード・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;警察・諜報組織は一般の人がアクセスできない情報にもアクセスできる。
たとえ暗号データそのものを解読できなくても，いったん対象を絞り込むことができれば，行動履歴をかき集め「名寄せ」することで追い詰めることができるのだ。
これを回避するのは並大抵ではない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000768.shtml&#34;&gt;「オーウェルが描いた悪夢のような監視社会をさまざまな点で超えてしまっているこの世界」で私たちはいかにして生き残るか — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だから問題はどうやって「対象を絞り込む」か，つまりフィルタリングあるいはスクリーニングの問題である。&lt;/p&gt;

&lt;h2 id=&#34;前門の虎-後門の狼少年:dce2488275596f7e80d074ad1b292c1e&#34;&gt;前門の虎，後門の狼少年&lt;/h2&gt;

&lt;p&gt;現在「パリのテロ」は西欧諸国にとって「錦の御旗」になっている。&lt;/p&gt;

&lt;p&gt;名前が示す通り「テロ（terrorism）」は誰だって怖い。
そして，それによって大勢の人や近しい人が命を落とすのであれば，怒りを感じて当然である（恐怖は怒りを駆動する）。&lt;/p&gt;

&lt;p&gt;テロの目的は相手に「恐怖」を刷り込み戦争状態を維持・活性化することにある。
でも「恐怖」を利用しているのはテロリストだけではない。
このことを 9.11 以後の10年あまりの間に私たちは嫌というほど見せつけられた筈である。
西欧諸国は「パリのテロ」を利用して 9.11 と同じ状況を作り出そうとしている。
目の前の恐怖に竦みあがっていると後ろから刺される。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;ニューヨーク州南部地区連邦地方裁判所のVictor Marrero判事は判決文の中で、FBIの見解は「極端であり、範囲を過度に拡大している」と述べている。&lt;br&gt;
同判事はまた、Merrill氏に対する発言禁止命令の適用範囲が広すぎる点について、「米国憲法修正第1項（言論の自由）、および国民に対する政府の説明責任という両方の観点から、重大な問題をはらんでいる」との判断を示した。&lt;br&gt;
NSLの発言禁止命令を完全に解くことに成功したのは、Merrill氏が初めてだ。&lt;br&gt;
米国愛国者法（US Patriot Act）は、2001年9月11日の同時多発テロ事件から1カ月後に成立したときに、NSLの適用範囲を拡大した。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35074261/&#34;&gt;FBIによる令状なしの個人情報開示要求、実態が明らかに–あらゆる通信記録が対象 - ZDNet Japan&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;秘密なんてないyo:dce2488275596f7e80d074ad1b292c1e&#34;&gt;秘密なんてないYO&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;https://wirelesswire.jp/2015/12/48567/&#34; title=&#34;我匿す、ゆえに我あり - WirelessWire News（ワイヤレスワイヤーニュース）&#34;&gt;我匿す、ゆえに我あり&lt;/a&gt;」では &lt;a href=&#34;https://www.schneier.com/&#34;&gt;Bruce Schneier&lt;/a&gt; さんの “&lt;a href=&#34;https://www.schneier.com/essays/archives/2015/06/why_we_encrypt.html&#34;&gt;Why We Encrypt&lt;/a&gt;” の一部を翻訳されている。
以下に少し紹介する。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;If we only use encryption when we’re working with important data, then encryption signals that data&#39;s importance. If only dissidents use encryption in a country, that country&#39;s authorities have an easy way of identifying them. But if everyone uses it all of the time, encryption ceases to be a signal. No one can distinguish simple chatting from deeply private conversation. The government can&#39;t tell the dissidents from the rest of the population. Every time you use encryption, you&#39;re protecting someone who needs to use it to stay alive.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.schneier.com/essays/archives/2015/06/why_we_encrypt.html&#34;&gt;Essays: Why We Encrypt - Schneier on Security&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;重要なデータに携わる場合にだけ暗号を使うと、暗号化はそのデータが重要である合図になってしまう。ある国で反体制派しか暗号を使わないと、その国の権力者は反体制派を特定する容易な手段を手にすることになる。でも、誰もがいつでも暗号を使うなら、暗号化は合図でなくなる。単なるお喋りと深刻な密談の区別を誰もつけられなくなる。政府は反体制派とそれ以外の国民を区別できなくなる。あなたは暗号を使うたびに、生きのびるために暗号を使う必要のある誰かを守っているのだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://wirelesswire.jp/2015/12/48567/&#34;&gt;我匿す、ゆえに我あり&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「木の葉を隠すなら森のなか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce2488275596f7e80d074ad1b292c1e:br&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce2488275596f7e80d074ad1b292c1e:br&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」ということだろう。
たぶんこれは通信・ネットワークに於いては正しい。&lt;/p&gt;

&lt;p&gt;現代社会においては善人と悪人，内部告発者と犯罪者，あるいは愛国者とテロリストを区別することはできない。
これらは私たちの日常空間に埋め込まれているからだ。&lt;/p&gt;

&lt;p&gt;特に今回のパリのテロや先日の&lt;a href=&#34;http://www.fsight.jp/articles/-/40737&#34;&gt;米国カリフォルニア州のテロ&lt;/a&gt;のような「ローン・ウルフ型」と言われるテロは，活動主体の武装組織などと事前に negotiation する必要はなく，勝手に立案して勝手に実行して勝手に名乗りを上げることができてしまう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce2488275596f7e80d074ad1b292c1e:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce2488275596f7e80d074ad1b292c1e:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
こういったことを警察・諜報組織が（事後ならともかく）事前に察知することは，たとえ全ての通信履歴を解読できたとしても，難しいだろう。
何故なら誰とも秘密を共有する必要はない（または共有する範囲がごく限られる）し，秘密の存在自体を秘匿しやすいからだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce2488275596f7e80d074ad1b292c1e:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce2488275596f7e80d074ad1b292c1e:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;テロのような犯罪を事前に防ぐことが難しいのは暗号技術のせいではない。
彼ら為政者はただ，森に隠された木の葉を探すために「焼き払え！」と叫んでいるだけである。&lt;/p&gt;

&lt;h2 id=&#34;強すぎる結界は更なる魔を引き寄せる:dce2488275596f7e80d074ad1b292c1e&#34;&gt;強すぎる結界は更なる魔を引き寄せる&lt;/h2&gt;

&lt;p&gt;しかし，実際問題として暗号技術が正しく機能しているのかというと甚だ疑問と言わざるを得ない。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;https://wirelesswire.jp/2015/12/48567/&#34; title=&#34;我匿す、ゆえに我あり - WirelessWire News（ワイヤレスワイヤーニュース）&#34;&gt;我匿す、ゆえに我あり&lt;/a&gt;」では電子メールを挙げていた&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce2488275596f7e80d074ad1b292c1e:mua&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce2488275596f7e80d074ad1b292c1e:mua&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; が， HTTPS も基盤である &lt;a href=&#34;http://text.baldanders.info/remark/2015/1128-diary/#pki:69db4720d983b07bf75e11bfad43c4fd&#34;&gt;PKI が揺らいでいる&lt;/a&gt;。
もっと言うと利便性やセキュリティの名のもとに HTTPS 通信に「中間者攻撃（man-in-the-middle-attack）」を仕掛けて通信内容を「監査」する製品がセキュリティ企業などから提供され，ユーザ企業側もそれを使うことをよしとしている。
しかも「中間者攻撃」の仕組みがあることが分かっているのなら，犯罪者だってそれを利用できる可能性があるわけだ。
知らぬは末端のユーザのみである。&lt;/p&gt;

&lt;p&gt;こう考えると本当に「あらゆる通信に」暗号化を適用すべきなのか疑問に感じてしまう。
政治的圧力には同じ圧力で対抗できるかもしれないが，市場はそんな政治的思惑も「面倒」なルールも全部迂回してしまう。
かといって他に冴えたやり方もないので，とりあえずはせっせと「森を作る」しかないのだが。&lt;/p&gt;

&lt;p&gt;強すぎる光は影を濃くするのみだ。
あるいは強すぎる結界は更なる魔を引き寄せる。&lt;/p&gt;

&lt;p&gt;これはいつも言っていることだが，ルールが守られないのはルール自体に問題がある。
そろそろ排除するだけのセキュリティも暗号技術も曲がり角に来ているのではないかと思ったりする。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dce2488275596f7e80d074ad1b292c1e:br&#34;&gt;正しくは「賢い人は葉をどこへ隠す？ 森の中だ。森がない時は、自分で森を作る。一枚の枯れ葉を隠したいと願う者は、枯れ葉の林をこしらえあげるだろう」らしい。 Gilbert Keith Chesterton 著『&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%96%E3%83%A9%E3%82%A6%E3%83%B3%E7%A5%9E%E7%88%B6%E3%81%AE%E7%AB%A5%E5%BF%83&#34;&gt;ブラウン神父の童心（The Innocence of Father Brown）&lt;/a&gt;』より「折れた剣（The Sign of the Broken Sword）」の中の一節。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce2488275596f7e80d074ad1b292c1e:br&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce2488275596f7e80d074ad1b292c1e:a&#34;&gt;ちゃんと名乗りを上げないとただの犯罪と見分けがつかないからね。そのせいで米国の例では「テロ」の判断が遅れたわけだが（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce2488275596f7e80d074ad1b292c1e:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce2488275596f7e80d074ad1b292c1e:b&#34;&gt;さらに言えば，自爆テロなら「事後」を考慮する必要もない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce2488275596f7e80d074ad1b292c1e:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce2488275596f7e80d074ad1b292c1e:mua&#34;&gt;私も同じネタで&lt;a href=&#34;http://text.baldanders.info/remark/2015/use-the-signal-luke/&#34;&gt;記事を書いた&lt;/a&gt;。実は TextSecure が Signal に統合されてからウチのスマホでは動かなくなってしまった。とほほ orz
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce2488275596f7e80d074ad1b292c1e:mua&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>あまり使わないけど，たまに使おうとすると忘れてる Git コマンド集 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/git-commands/" />
		<id>tag:text.Baldanders.info,2015-12-09:/remark/2015/git-commands/</id>
		<published>2015-12-09T20:14:59+09:00</published>
		<updated>2015-12-21T09:57:01+09:00</updated>
		<summary>git 各コマンドに関する覚え書き。思い出したら追記予定。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; 各コマンドに関する覚え書き。
思い出したら追記予定。&lt;/p&gt;

&lt;h2 id=&#34;submodule-の作成から削除まで:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の作成から削除まで&lt;/h2&gt;

&lt;h3 id=&#34;submodule-の作成:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の作成&lt;/h3&gt;

&lt;p&gt;Repository に別の repository &lt;code&gt;sub_repo.git&lt;/code&gt; を submodule として &lt;code&gt;subdir&lt;/code&gt; に追加する場合は以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule add sub_repo.git subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;submodule-の初期化:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の初期化&lt;/h3&gt;

&lt;p&gt;Submodule を含む repository を clone してきた場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone repo.git
$ cd repo/subdir
$ git submodule init
$ git submodule update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone --recursive repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で初期化できる。
これ以降， remote 側から fetch/maerge した際に submodule の参照ポイントが変更されていた場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で初期化できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;submodule-の更新:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の更新&lt;/h3&gt;

&lt;p&gt;Submodule の remote 側の変更を pull する場合は以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --remote subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fetch したデータを merge する場合は &lt;code&gt;--merge&lt;/code&gt; オプションを， rebase する場合は &lt;code&gt;--rebase&lt;/code&gt; オプションを付ける&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;submodule-の削除:426366135f9b7036b5475695fbc6d142&#34;&gt;Submodule の削除&lt;/h3&gt;

&lt;p&gt;Repository から submodule を削除する場合は以下のコマンドで削除できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule deinit subdir
$ git rm subdir
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remote-repository-の接続設定:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository の接続設定&lt;/h2&gt;

&lt;h3 id=&#34;remote-repository-への-uri-を変更する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository への URI を変更する&lt;/h3&gt;

&lt;p&gt;Remote repository （通常は &lt;code&gt;origin&lt;/code&gt;）の接続先 URI を変更するには以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote set-url origin new_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;remote-repository-との接続を追加する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository との接続を追加する&lt;/h3&gt;

&lt;p&gt;新たに remote repository との接続を追加する場合には以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote add upstream up_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは追加した remote repository に &lt;code&gt;upstream&lt;/code&gt; と名前をつけている。
たとえば fork した repository で作業する際に fork 元の repository の変更も取り込みたい場合などに有効である。&lt;/p&gt;

&lt;h3 id=&#34;remote-repository-との接続を削除する:426366135f9b7036b5475695fbc6d142&#34;&gt;Remote Repository との接続を削除する&lt;/h3&gt;

&lt;p&gt;Remote repository との接続を削除する場合には以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote rm upstream up_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;repository-の分離:426366135f9b7036b5475695fbc6d142&#34;&gt;Repository の分離&lt;/h2&gt;

&lt;p&gt;Repository の特定のディレクトリ &lt;code&gt;subdir&lt;/code&gt; を commit tree を維持したまま分離したいときの手順。&lt;/p&gt;

&lt;p&gt;まず元の repository &lt;code&gt;org_repo.git&lt;/code&gt; を clone する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone org_repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clone 元の bare repository がない場合にはローカルの repository を丸ごとどっかにコピーすればよい（commit 済みであること）。&lt;/p&gt;

&lt;p&gt;で， clone した repository 内に入って &lt;code&gt;git filter-branch&lt;/code&gt; コマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd org_repo
$ git filter-branch --subdirectory-filter subdir HEAD
Rewrite **************************************** (999/999)
Ref &#39;refs/heads/master&#39; was rewritten
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このとき &lt;code&gt;subdir&lt;/code&gt; 以下のファイル・ディレクトリが repository のトップ・ディレクトリに移動するので注意が必要である。
また，オリジナルの commit tree が &lt;code&gt;refs/original/refs/heads/master&lt;/code&gt; として残っているので以下のコマンドで削除する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git update-ref -d refs/original/refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成した repository はそのまま使うなり新しい bare repository に push するなりすればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote set-url origin new_repo.git
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;元の repository に push しようとすると怒られる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;git-に関するブックマーク:426366135f9b7036b5475695fbc6d142&#34;&gt;Git に関するブックマーク&lt;/h2&gt;

&lt;p&gt;ついでなので，ローカルで溜め込んでいた &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; に関するブックマークを挙げておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34;&gt;Git for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gitextensions.github.io/&#34;&gt;Git Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kinokoru.jp/archives/1017&#34;&gt;【Git入門者向け】イメージで理解するGitコマンド事始め | きのこる庭&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kray.jp/blog/git-pull-rebase/&#34;&gt;git pull と git pull –rebase の違いって？図を交えて説明します！ | KRAY Inc&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Teloo/items/95a860ae276b49edb040&#34;&gt;Git - pull は本当に fetch + merge なの？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/doilux/items/b5a9abd95ac91e848a5f&#34;&gt;Gitのこれやめて！リスト - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://meme.efcl.info/2011/07/gitcloneerror-setting-certificate.html&#34;&gt;githubからclone時にerror setting certificate verify locationsがでる | MemeTodo&lt;/a&gt; : うちでもなっていろいろ大変だった&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kiida/items/0d51c43ac73f14f09f5a&#34;&gt;Git LFSが1.0になってGitHubで使えるようになったので試してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/crifff/items/32ffc824f69ed5632217&#34;&gt;git-lfsは大容量のファイルを扱うもので多量のファイルを扱うものではない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-h.hatenablog.com/entry/2013/12/07/093423&#34;&gt;gitで重いリポジトリをcloneするとき - webネタ&lt;/a&gt; （&lt;a href=&#34;http://qiita.com/butchi_y/items/cc0fe50acc47c1e3ab32&#34;&gt;Qiita 版&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;Git - サブモジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://raimon49.github.io/2015/04/04/git-submodule-deinit.html&#34;&gt;Gitのsubmoduleをお手軽に削除する - Steel Dragon 14106&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/hiratara/20091112/1258023732&#34;&gt;Gitリポジトリ中のサブディレクトリを別のリポジトリにする - 北海道苫小牧市出身のPGが書くブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gozuk16.hatenablog.com/entry/2015/04/24/145714&#34;&gt;Gitリポジトリのディレクトリ構成を変えて別リポジトリにする - ごずろぐ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/go_astrayer/items/6e39d3ab16ae8094496c&#34;&gt;Git リポジトリに上がっているファイルを履歴ごと消すには？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dtan4/items/34e41e3bd40a43fd8cbf&#34;&gt;GitHub にパスワードとかセンシティブなファイルを push してしまったときの対処法 - Qiita&lt;/a&gt; : GitHub などリモートのリポジトリに上げてしまうと，とてつもなく面倒になるので，要注意&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;git-flow-and-github-flow:426366135f9b7036b5475695fbc6d142&#34;&gt;Git-flow and GitHub-flow&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scottchacon.com/2011/08/31/github-flow.html&#34;&gt;GitHub Flow – Scott Chacon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;GitHub Flow (Japanese translation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;A successful Git branching model » nvie.com&#34;&gt;A successful Git branching model » nvie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;git-flow cheatsheet&#34;&gt;git-flow cheatsheet&lt;/a&gt; （日本語）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://komaken.me/blog/2013/09/09/git-flow%E3%81%A8github-flow%E3%81%96%E3%81%A3%E3%81%8F%E3%82%8A%E3%81%BE%E3%81%A8%E3%82%81/&#34;&gt;git flowとgithub flowざっくりまとめ | KentaKomai Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.qnyp.com/2013/05/28/pull-request-for-github-beginners/&#34;&gt;GitHub初心者はForkしない方のPull Requestから入門しよう | qnyp blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;code&gt;--recursive&lt;/code&gt; オプションなしで cloneした 直後は &lt;code&gt;git update&lt;/code&gt; では初期化できないので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:sub1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;Rebase は歴史の改変なので取り扱いに注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:rb&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;code&gt;-f&lt;/code&gt; オプションを付けて強制的に push することは可能。ただしこれは（rebase と同じで）歴史の改変になるため取り扱いに注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:426366135f9b7036b5475695fbc6d142:sf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Glide で Vendoring - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/vendoring-with-glide/" />
		<id>tag:text.Baldanders.info,2015-12-07:/golang/vendoring-with-glide/</id>
		<published>2015-12-07T23:30:21+09:00</published>
		<updated>2015-12-23T12:59:00+09:00</updated>
		<summary>Go 言語 1.5 の vendoring 機能をサポートするツールが glide である。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;以前「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt; 1.5 の vendoring 機能を紹介したが，この vendoring のヘルパ・ツールと言えるのが &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; である。
&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では依存する外部パッケージの情報を YAML 形式の定義ファイルに記述し，この定義ファイルを基に外部パッケージの管理を行う。&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; 0.8 から挙動が少し変わった。
この記事では 0.8.2 を使っている）&lt;/p&gt;

&lt;h2 id=&#34;glide-のインストール:721380b38042a10816ac6a323733a866&#34;&gt;Glide のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は自身も &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; で外部パッケージを管理している。
なので最初は &lt;code&gt;go get&lt;/code&gt; ではなく &lt;a href=&#34;https://github.com/Masterminds/glide/releases&#34;&gt;Releases&lt;/a&gt; ページからビルド済みのものを取得することをお勧めする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;既に &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; が利用可能な状態なら，以下の要領でビルドできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\glide&amp;gt;SET GOPATH=C:\workspace\glide

C:\workspace\glide&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\glide&amp;gt;git clone git@github.com:Masterminds/glide.git src\github.com\Masterminds\glide
Cloning into &#39;src\github.com\Masterminds\glide&#39;...
remote: Counting objects: 2292, done.
remote: Compressing objects: 100% (65/65), done.
remote: Total 2292 (delta 34), reused 0 (delta 0), pack-reused 2292
Receiving objects: 100% (2292/2292), 468.01 KiB | 397.00
Receiving objects: 100% (2292/2292), 537.97 KiB | 397.00 KiB/s, done.
Resolving deltas: 100% (1578/1578), done.
Checking connectivity... done.

C:\workspace\glide&amp;gt;pushd src\github.com\Masterminds\glide

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;glide install
[INFO] Fetching updates for github.com/codegangsta/cli.
[INFO] Fetching updates for github.com/Masterminds/cookoo.
[INFO] Fetching updates for github.com/Masterminds/vcs.
[INFO] Fetching updates for gopkg.in/yaml.v2.
[INFO] Fetching updates for github.com/Masterminds/semver.
[INFO] Setting version for github.com/Masterminds/cookoo to 78aa11ce75e257c51be7ea945edb84cf19c4a6de.
[INFO] Setting version for github.com/Masterminds/semver to 6333b7bd29aad1d79898ff568fd90a8aa533ae82.
[INFO] Setting version for github.com/codegangsta/cli to b5232bb2934f606f9f27a1305f1eea224e8e8b88.
[INFO] Setting version for github.com/Masterminds/vcs to eaee272c8fa4514e1572e182faecff5be20e792a.
[INFO] Setting version for gopkg.in/yaml.v2 to f7716cbe52baa25d2e9b0d0da546fcf909fc16b4.

C:\workspace\glide\src\github.com\Masterminds\glide&amp;gt;popd

C:\workspace\glide&amp;gt;go install -v ./...
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io
github.com/Masterminds/glide/msg
github.com/Masterminds/glide/gb
github.com/Masterminds/glide/vendor/gopkg.in/yaml.v2
github.com/Masterminds/glide/vendor/github.com/Masterminds/semver
github.com/Masterminds/glide/vendor/github.com/codegangsta/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/safely
github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/cli
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/sql
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/database/active
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/convert
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/fmt
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/example
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/log
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/web/auth
github.com/Masterminds/glide/util
github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/doc
github.com/Masterminds/glide/cfg
github.com/Masterminds/glide/dependency
github.com/Masterminds/glide/cmd
github.com/Masterminds/glide

C:\workspace\glide&amp;gt;bin\glide.exe -v
glide version dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単な使い方は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt; glide -h
NAME:
   glide - The lightweight vendor package manager for your Go projects.

Each project should have a &#39;glide.yaml&#39; file in the project directory. Files
look something like this:

        package: github.com/Masterminds/glide
        imports:
                - package: github.com/Masterminds/cookoo
                  vcs: git
                  ref: 1.1.0
                  subpackages: **
                - package: github.com/kylelemons/go-gypsy
                  subpackages: yaml
                        flatten: true

NOTE: As of Glide 0.5, the commands &#39;in&#39;, &#39;into&#39;, &#39;gopath&#39;, &#39;status&#39;, and &#39;env&#39;
no longer exist.


USAGE:
   glide [global options] command [command options] [arguments...]

VERSION:
   0.8.2

COMMANDS:
   create, init Initialize a new project, creating a glide.yaml file
   get          Install one or more packages into `vendor/` and add dependency to glide.yaml.
   import       Import files from other dependency management systems.
   name         Print the name of this project.
   novendor, nv List all non-vendor paths in a directory.
   rebuild      Rebuild (&#39;go build&#39;) the dependencies
   install, i   Install a project&#39;s dependencies
   update, up   Update a project&#39;s dependencies
   tree         Tree prints the dependencies of this project as a tree.
   list         List prints all dependencies that Glide could discover.
   about        Learn about Glide
   help, h      Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --yaml, -y &amp;quot;glide.yaml&amp;quot;              Set a YAML configuration file.
   --quiet, -q                          Quiet (no info or debug messages)
   --debug                              Print Debug messages (verbose)
   --home &amp;quot;C:\Users\username\.glide&amp;quot;    The location of Glide files [$GLIDE_HOME]
   --no-color                           Turn off colored output for log messages
   --help, -h                           show help
   --version, -v                        print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;開発環境の準備:721380b38042a10816ac6a323733a866&#34;&gt;開発環境の準備&lt;/h2&gt;

&lt;p&gt;動作検証用に「&lt;a href=&#34;http://text.baldanders.info/golang/gopath-pollution/&#34;&gt;GOPATH 汚染問題&lt;/a&gt;」で使ったコードを利用する。
まず，以下の環境を作る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:\workspace\vdemo2&amp;gt;SET GOPATH=C:\workspace\vdemo2

C:\workspace\vdemo2&amp;gt;SET GO15VENDOREXPERIMENT=1

C:\workspace\vdemo2&amp;gt;tree /f .
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;julian-day.go&lt;/code&gt; の内容は以下のとおりである。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

    &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		}
		args[i] = num
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, modjulian.DayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然ながら，このままビルドしても外部パッケージがないため失敗する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;go install ./...
src\julian-day\julian-day.go:10:2: cannot find package &amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot; in any of:
        C:\Go\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOROOT)
        C:\workspace\vdemo2\src\github.com\spiegel-im-spiegel\astrocalc\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;依存関係を定義する:721380b38042a10816ac6a323733a866&#34;&gt;依存関係を定義する&lt;/h2&gt;

&lt;p&gt;開発環境ができたら，パッケージのフォルダ（今回は &lt;code&gt;src/julian-day&lt;/code&gt;）に移動し， &lt;code&gt;glide create&lt;/code&gt; コマンドで依存関係を定義する &lt;code&gt;glide.yaml&lt;/code&gt; ファイルを生成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2&amp;gt;pushd src\julian-day

C:\workspace\vdemo2\src\julian-day&amp;gt;glide create
[INFO] Generating a YAML configuration file and guessing the dependencies
[INFO] Attempting to import from other package managers (use --skip-import to skip)
[INFO] Found reference to github.com\spiegel-im-spiegel\astrocalc\modjulian

C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
            glide.yaml
            julian-day.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースコードを読んで &lt;code&gt;glide.yaml&lt;/code&gt; に必要な情報を推測して書いてくれているようだが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:cre&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，デリミタが “/” じゃなくて “\” になってる。
Windows 環境だからかな。
残念 orz&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com\spiegel-im-spiegel\astrocalc\modjulian
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34; title=&#34;spiegel-im-spiegel/astrocalc&#34;&gt;astrocalc&lt;/a&gt;/modjulian パッケージのパスを修正して、更にバージョン情報を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com/spiegel-im-spiegel/astrocalc/modjulian
  version: v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;go get&lt;/code&gt; コマンドと同じように， &lt;code&gt;package&lt;/code&gt; のパスから自動的に repository を判別してパッケージを取得できる。
&lt;code&gt;go get&lt;/code&gt; コマンドと異なるのは， &lt;code&gt;glide.yaml&lt;/code&gt; ファイルで指定した &lt;code&gt;version&lt;/code&gt; 情報から適切な revision を選択できる点である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:semv&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:semv&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;また，以下のように VCS (Version Control System) の種類&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:vcs&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; と URI を明示的に指定することもできる（&lt;code&gt;vcs&lt;/code&gt; と &lt;code&gt;repo&lt;/code&gt; は必ずセットで指定する）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;package: julian-day
import:
- package: github.com/spiegel-im-spiegel/astrocalc/modjulian
  vcs:     git
  repo:    git@github.com:spiegel-im-spiegel/astrocalc.git
  version: v0.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば，プライベートな bare repository からインポートする場合には，この方法が有効である。&lt;/p&gt;

&lt;h2 id=&#34;パッケージの取得とビルド:721380b38042a10816ac6a323733a866&#34;&gt;パッケージの取得とビルド&lt;/h2&gt;

&lt;p&gt;パッケージの取得には &lt;code&gt;glide update&lt;/code&gt; または &lt;code&gt;glide up&lt;/code&gt; コマンドを起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;glide up
[INFO] Fetching updates for github.com/spiegel-im-spiegel/astrocalc.
[INFO] Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Scanning github.com/spiegel-im-spiegel/astrocalc for dependencies.
[INFO] Setting version for github.com/spiegel-im-spiegel/astrocalc to v0.1.0.
[INFO] Project relies on 1 dependencies.
[INFO] Writing glide.lock file
C:\workspace\vdemo2\src\julian-day&amp;gt;tree /f C:\workspace\vdemo2
C:\WORKSPACE\VDEMO2
└─src
    └─julian-day
        │  glide.lock
        │  glide.yaml
        │  julian-day.go
        │
        └─vendor
            └─github.com
                └─spiegel-im-spiegel
                    └─astrocalc
                        │  .editorconfig
                        │  .gitignore
                        │  .travis.yml
                        │  LICENSE
                        │  README.md
                        │
                        └─modjulian
                                example_test.go
                                LICENSE
                                modjulian.go
                                modjulian_test.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでビルドが可能になった。
ではビルドしようかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\vdemo2\src\julian-day&amp;gt;popd

C:\workspace\vdemo2&amp;gt;go install -v  ./...
julian-day/vendor/github.com/spiegel-im-spiegel/astrocalc/modjulian
julian-day

C:\workspace\vdemo2&amp;gt;bin\julian-day.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;h2 id=&#34;vendor-フォルダの管理:721380b38042a10816ac6a323733a866&#34;&gt;Vendor フォルダの管理&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;glide.lock&lt;/code&gt; ファイルには外部パッケージの状態が記述されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hash: b1eecd43769aa1225f7b8922a35566008561c64f4ce11180f299888ed153ad69
updated: 2015-12-23T10:47:22.4140434+09:00
imports:
- name: github.com/spiegel-im-spiegel/astrocalc
  version: 256cd3bd4dc63441d3f4759d761593a147d51d88
  subpackages:
  - modjulian
devImports: []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;glide.lock&lt;/code&gt; があれば &lt;code&gt;glide install&lt;/code&gt;（または &lt;code&gt;glide i&lt;/code&gt;）コマンドで &lt;code&gt;vendor&lt;/code&gt; フォルダ以下の状態を復元できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では外部パッケージを vendor フォルダ以下に repository 構造ごと展開する。
この場合，開発対象のパッケージも repository で管理しているのだから， repository が入れ子になり具合が悪い。
その辺，当の &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; はどうしてるのかなぁと思ったら &lt;code&gt;.gitignore&lt;/code&gt; ファイルで &lt;code&gt;vendor/&lt;/code&gt; を除外対象にしていた。
なるほど，そりゃそうか。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;glide.yaml&lt;/code&gt; および &lt;code&gt;glide.lock&lt;/code&gt; ファイルの管理さえちゃんとしていれば &lt;code&gt;glide install&lt;/code&gt; コマンドでいつでも復元できるのだから &lt;code&gt;vendor&lt;/code&gt; フォルダ以下を除外しても問題ないわけだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:v&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
これは複数メンバで開発環境を共有する際には便利な機能である。&lt;/p&gt;

&lt;p&gt;また vendoring に対応していない（Go 1.4 以下の）環境や &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; がない環境では &lt;code&gt;go get&lt;/code&gt; で外部パッケージを取ってくることで（revision 等の問題はあるけど）一応ビルドは通る。&lt;/p&gt;

&lt;p&gt;更に言うと， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の標準機能に準拠しているため，他のサポートツールとの相性がいいのも利点だろう。
たとえば， &lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;ATOM ベースの開発環境&lt;/a&gt;は &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; と相性がいい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:gov&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:gov&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
あと，（多少強引な手を使っているが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:721380b38042a10816ac6a323733a866:tci&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;） &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt; のような CI (Continuous Integration) と組み合わせることも難しくない。&lt;/p&gt;

&lt;p&gt;こう考えると &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; は&lt;a href=&#34;http://text.baldanders.info/golang/project-based-development/&#34;&gt;前に紹介&lt;/a&gt;した &lt;a href=&#34;http://getgb.io/&#34;&gt;gb&lt;/a&gt; よりも筋がいいツールといえるかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:721380b38042a10816ac6a323733a866&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tienlen/items/8e192e68d6b18bec3b4a&#34;&gt;glide - パッケージ管理のお困りの方へ - - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:ins&#34;&gt;Mac 環境なら brew でインストールできるらしい。 Linux 等の環境であれば &lt;code&gt;make&lt;/code&gt; コマンドで各種プラットフォームの実行ファイルをビルドできる。一応 &lt;code&gt;go get&lt;/code&gt; でもビルドできるが， revision を制御できないので失敗する可能性もある（これは &lt;code&gt;make&lt;/code&gt; コマンドでビルドする場合でも同じだけど）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:ins&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;code&gt;glide create&lt;/code&gt; 時の依存パッケージの推測を抑止するには &lt;code&gt;--skip-import&lt;/code&gt; オプションを付ける。のだが，効いてないな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:cre&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:semv&#34;&gt;今回であれば repository の &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc/releases/tag/v0.1.0&#34;&gt;&lt;code&gt;v0.1.0&lt;/code&gt;&lt;/a&gt; タグに対応する revision を選択する。バージョンの記述形式は &lt;code&gt;package.json&lt;/code&gt; と同じように記述でき，バージョンの解釈は &lt;a href=&#34;http://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; に従っている。ちなみに revision ID を直接指定することもできる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:semv&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt; のほか svn (&lt;a href=&#34;http://subversion.apache.org/&#34;&gt;Subversion&lt;/a&gt;), hg (&lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt;), bzr (&lt;a href=&#34;http://bazaar.canonical.com/&#34;&gt;Bazaar&lt;/a&gt;) が利用可能である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:vcs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;code&gt;vendor&lt;/code&gt; フォルダ以下は外部パッケージなので通常はさわることはない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:v&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:gov&#34;&gt;残念ながら，「&lt;a href=&#34;http://text.baldanders.info/golang/package-visualization-tool/&#34;&gt;パッケージの依存状況の視覚化&lt;/a&gt;」ツールは vendoring 機能に対応していないため上手く表示できない。なお， &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; では &lt;code&gt;glide list&lt;/code&gt; および &lt;code&gt;glide tree&lt;/code&gt; で依存パッケージを見ることができる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:gov&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; の &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/.travis.yml&#34;&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://github.com/Masterminds/glide/blob/master/Makefile&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt; を参照。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:721380b38042a10816ac6a323733a866:tci&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
