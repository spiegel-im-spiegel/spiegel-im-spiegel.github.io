<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2016-03-12:/</id>
	<updated>2016-03-12T22:12:53+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>「ズンドコチェック」なるものが流行っているらしい - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/zundoko-choir/" />
		<id>tag:text.Baldanders.info,2016-03-12:/golang/zundoko-choir/</id>
		<published>2016-03-12T22:12:53+09:00</published>
		<updated>2016-03-12T22:12:53+09:00</updated>
		<summary>というわけで Go 言語で実装することを考えてみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Javaの講義、試験が「自作関数を作り記述しなさい」って問題だったから&lt;br&gt;「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数作ったら満点で単位貰ってた&lt;/p&gt;&amp;mdash; てくも (@kumiromilk) &lt;a href=&#34;https://twitter.com/kumiromilk/status/707437861881180160&#34;&gt;2016年3月9日&lt;/a&gt;&lt;/blockquote&gt;


&lt;/figure&gt;

&lt;p&gt;「習作（study）」としてはなかなか秀逸なアイデアだと思う。
これで満点くれる教官も流石だが（笑） 巷では「ズンドコキヨシ」とか「キヨシチェック」とか「ズンドコチェック」とか呼ばれているらしい。&lt;/p&gt;

&lt;p&gt;というわけで&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;を &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で実装することを考えてみる。
私はコレを「ズンドコ・コール（zundoko-choir）」と呼ぶことにする。&lt;/p&gt;

&lt;p&gt;とはいえ，ズンドコ・コールを実装する事自体はそう難しくない。
たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math/rand&amp;quot;
	&amp;quot;time&amp;quot;
)

const (
	zun     = &amp;quot;ズン&amp;quot;
	doko    = &amp;quot;ドコ&amp;quot;
	kiyoshi = &amp;quot;キ・ヨ・シ！&amp;quot;
)

func generate() chan string {
	ch := make(chan string)
	go func() {
		var zundoko = [2]string{zun, doko}
		rand.Seed(time.Now().UnixNano())
		for {
			ch &amp;lt;- zundoko[rand.Intn(2)]
		}
	}()
	return ch
}

func main() {
	zundoko := generate()
	zcount := 0
	for {
		zd := &amp;lt;-zundoko
		fmt.Print(zd)
		if zd == zun {
			zcount++
		} else if zcount &amp;gt;= 4 {
			break
		} else {
			zcount = 0
		}
	}
	fmt.Print(kiyoshi)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「ズン」および「ドコ」をランダムに生成する部分は &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; と &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt; を使えばいいだろう（&lt;code&gt;generate()&lt;/code&gt; 関数内の処理）。
擬似乱数は厳密でなくてもいいので安直に &lt;a href=&#34;https://golang.org/pkg/math/rand/&#34; title=&#34;rand - The Go Programming Language&#34;&gt;&lt;code&gt;math/rand&lt;/code&gt;&lt;/a&gt; を使うことにした。
さらに「ズン」「ズン」「ズン」「ズン」「ドコ」の配列パターンのチェックだが，「ズン」が4回以上連続で来た直後に「ドコ」が来たら OK としてみた。
まぁ，これがもっとも素朴な実装でパフォーマンスとしてもそれほど遜色ない筈。&lt;/p&gt;

&lt;p&gt;と，ここまで考えてハタと気づいた。
問題は「自作関数を作り記述しなさい」なんだからメイン関数にロジック書いたらアカンやん！&lt;/p&gt;

&lt;p&gt;というわけでまたもゴリゴリとコードを書いてパッケージにしてしまった。
アホだ，私（笑）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/zundoko&#34;&gt;spiegel-im-spiegel/zundoko: Zundoko-choirs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;出力は標準出力に直書きするのではなく &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; の &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; に &lt;code&gt;append()&lt;/code&gt; することで実現する。
この出力先を &lt;code&gt;Choirs&lt;/code&gt; 型として定義した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Choirs - zundoko-choirs list
type Choirs struct {
	c []string
}

//Push is append choirs
func (c *Choirs) Push(s string) {
	c.c = append(c.c, s)
}

func (c *Choirs) String() string {
	if c == nil {
		return &amp;quot;&amp;quot;
	}
	content := make([]byte, 0, 128)
	for _, s := range c.c {
		content = append(content, s...)
	}
	return string(content)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに文字列の連結は &lt;a href=&#34;https://golang.org/pkg/strings/&#34; title=&#34;strings - The Go Programming Language&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Join()&lt;/code&gt; 関数は使わず「&lt;a href=&#34;http://text.baldanders.info/golang/join-strings/&#34; title=&#34;文字列連結はどれが速い？ — プログラミング言語 Go&#34;&gt;文字列連結はどれが速い？&lt;/a&gt;」で紹介した方法を使っている。&lt;/p&gt;

&lt;p&gt;これで最初のコードは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func generate() chan string {
	ch := make(chan string)
	go func() {
		var zd = [2]string{Zun, Doko}
		rand.Seed(time.Now().UnixNano())
		for {
			ch &amp;lt;- zd[rand.Intn(2)]
		}
	}()
	return ch
}

//Run zundoko-choirs
func Run() *Choirs {
	zd := generate()
	c := &amp;amp;Choirs{make([]string, 0)}
	zcount := 0
	for {
		s := &amp;lt;-zd
		c.Push(s)
		if s == Zun {
			zcount++
		} else if zcount &amp;gt;= 4 {
			break
		} else {
			zcount = 0
		}
	}
	c.Push(Kiyoshi)
	return c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書き換えることができる。
このパッケージを呼び出すメイン側は例えば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/zundoko&amp;quot;
)

func main() {
	c := zundoko.Run()
	fmt.Println(c)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書けばいい。&lt;/p&gt;

&lt;p&gt;ところで「ズン」「ドコ」の出力は &lt;code&gt;Choirs&lt;/code&gt; 型で保持られているので，末尾の5要素のパターンを調べる別の方法もあると気づく。
たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var matchingPattern = []string{Zun, Zun, Zun, Zun, Doko}

func (c *Choirs) match() bool {
	if c == nil {
		return false
	}
	if len(c.c) &amp;lt; 5 {
		return false
	}
	return reflect.DeepEqual(c.c[len(c.c)-5:], matchingPattern)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この関数を使えば &lt;code&gt;Run()&lt;/code&gt; 関数は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Run2 zundoko-choirs (another logic)
func Run2() *Choirs {
	zd := generate()
	c := &amp;amp;Choirs{make([]string, 0)}
	for {
		s := &amp;lt;-zd
		c.Push(s)
		if c.match() {
			break
		}
	}
	c.Push(Kiyoshi)
	return c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり随分すっきりする。
ただこれコストが高くつきそうである。
というわけで，これも調べてみた。
まず以下のベンチマークを書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package zundoko

import &amp;quot;testing&amp;quot;

func BenchmarkRun1(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		Run()
	}
}

func BenchmarkRun2(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		Run2()
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;BenchmarkRun1&lt;/code&gt; が従来のもの， &lt;code&gt;BenchmarkRun2&lt;/code&gt; が先程の &lt;code&gt;match()&lt;/code&gt; 関数を使ったバージョンである。
結果は以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go test -bench Run -benchmem
testing: warning: no tests to run
PASS
BenchmarkRun1-4    50000     28141 ns/op    1800 B/op     9 allocs/op
BenchmarkRun2-4    30000     40102 ns/op    3912 B/op   115 allocs/op
ok      github.com/spiegel-im-spiegel/zundoko   4.261s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;乱数の要素が絡むので毎回同じ値ではないが，傾向としてはこんな感じ。
&lt;code&gt;BenchmarkRun2&lt;/code&gt; のほうが allocation 回数が圧倒的に多いのが分かるだろう。
これがスピードにもダイレクトに反映されている感じである。&lt;/p&gt;

&lt;p&gt;今回は「「ズン」が4回以上連続で来た直後に「ドコ」が来たら OK」という単純なロジックだったが，もっと複雑なパターンが要求される場合は工夫が必要かもしれない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;「ズン」と「ドコ」の出現回数を数える関数も作ってみた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//CountZunDoko returns count of &amp;quot;ZUN&amp;quot; and &amp;quot;DOKO&amp;quot; choirs
func (c *Choirs) CountZunDoko() (int, int) {
	z := 0
	d := 0
	if c == nil {
		return z, d
	}
	for _, s := range c.c {
		switch s {
		case Zun:
			z++
		case Doko:
			d++
		}
	}
	return z, d
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば &lt;code&gt;generate()&lt;/code&gt; 関数内で使っている擬似乱数パッケージを別のものに換えた時に統計処理で簡単な性能評価ができるかもしれない。
今回はそこまではしなけど（擬似乱数の話はいずれやりたい）。&lt;/p&gt;

&lt;p&gt;こうやって手遊びでコードを弄るのは楽しいものである。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:ba7781b05a447c47fa6bc5c87477853e&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shunsugai@github/items/971a15461de29563bf90&#34;&gt;ズンドコキヨシまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shinderuman@github/items/2ff67c2404647d2b7ea6&#34;&gt;ズンドコキヨシ with Go (n番煎じ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:ba7781b05a447c47fa6bc5c87477853e&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41aCueik45L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22/&#34;&gt;プログラミング言語Go&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;Alan A.A. Donovan Brian W. Kernighan 柴田 芳樹 &lt;/dd&gt;&lt;dd&gt;丸善出版 2016-06-15&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Go言語によるWebアプリケーション開発&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117607/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117607.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;マイクロサービスアーキテクチャ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873117402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873117402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハイパフォーマンスPython&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/0134190440/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/0134190440.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;The Go Programming Language (Addison-Wesley Professional Computing Series)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4774166340/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4774166340.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Vim script テクニックバイブル ~Vim使いの魔法の杖&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。買おうかどうか悩み中。目次があればなぁ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-12&#34;&gt;2016-03-12&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;たとえば &lt;a href=&#34;https://golang.org/pkg/container/list/&#34; title=&#34;list - The Go Programming Language&#34;&gt;&lt;code&gt;container/list&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://golang.org/pkg/container/ring/&#34; title=&#34;ring - The Go Programming Language&#34;&gt;&lt;code&gt;container/ring&lt;/code&gt;&lt;/a&gt; といったパッケージを使う手がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ba7781b05a447c47fa6bc5c87477853e:lr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GnuPG Modern Version for Windows ― gpg-agent について - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-2/" />
		<id>tag:text.Baldanders.info,2016-03-11:/remark/2016/03/using-gnupg-modern-version-2/</id>
		<published>2016-03-11T12:39:07+09:00</published>
		<updated>2016-03-12T15:16:45+09:00</updated>
		<summary>今回は gpg-agent について解説する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-1/&#34;&gt;インストール編&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-2/&#34;&gt;gpg-agent について&lt;/a&gt; （← イマココ）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;gpg-agent:1e41d3f194187822b8041e09e4da8068&#34;&gt;gpg-agent&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;gpg-agent&lt;/code&gt; は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; modern version の中核コンポーネントで，秘密鍵の管理&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1e41d3f194187822b8041e09e4da8068:sr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1e41d3f194187822b8041e09e4da8068:sr&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; を行い一定期間キャッシュする。
&lt;code&gt;gpg-agent&lt;/code&gt; は &lt;code&gt;gpg&lt;/code&gt;, &lt;code&gt;gpgsm&lt;/code&gt;, &lt;code&gt;gpgconf&lt;/code&gt;, &lt;code&gt;gpg-connect-agent&lt;/code&gt; といったコンポーネントから常駐プロセスとして起動されお互いに通信を行う&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1e41d3f194187822b8041e09e4da8068:od&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1e41d3f194187822b8041e09e4da8068:od&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gpg-agent&lt;/code&gt; が稼働中かどうかは &lt;code&gt;gpg-agent&lt;/code&gt; を引数なしで起動すれば分かる。
以下は既に起動している場合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;gpg-agent
gpg-agent[3996]: gpg-agent running and available
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gpg-agent&lt;/code&gt; が稼働していない場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;gpg-agent
gpg-agent[9552]: no gpg-agent running in this session
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと表示される。&lt;/p&gt;

&lt;p&gt;手動で &lt;code&gt;gpg-agent&lt;/code&gt; を起動する場合は以下のコマンドで起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;gpg-connect-agent /bye
gpg-connect-agent: no running gpg-agent - starting &#39;C:\path\to\GnuPG\bin\gpg-agent.exe&#39;
gpg-connect-agent: waiting for the agent to come up ... (5s)
gpg-connect-agent: connection to agent established
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;逆に &lt;code&gt;gpg-agent&lt;/code&gt; を手動で停止したい場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;gpg-connect-agent killagent /bye
OK closing connection
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば安全に停止できる。&lt;/p&gt;

&lt;h3 id=&#34;pinentry:1e41d3f194187822b8041e09e4da8068&#34;&gt;Pinentry&lt;/h3&gt;

&lt;p&gt;Pinentry はパスフレーズ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1e41d3f194187822b8041e09e4da8068:pp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1e41d3f194187822b8041e09e4da8068:pp&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; やスマートカードの PIN コードを入力する際に &lt;code&gt;gpg-agent&lt;/code&gt; から呼び出される。
Windows 版では Pinentry プログラムとして &lt;code&gt;pinentry-basic.exe&lt;/code&gt; が同梱されている。
同等の機能を持つものであれば他のプログラムと差し替えることもできる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gpg&lt;/code&gt; に &lt;code&gt;--batch&lt;/code&gt; （または &lt;code&gt;--pinentry-mode loopback&lt;/code&gt;）オプションとパスフレーズ指定オプション（&lt;code&gt;--passphrase&lt;/code&gt;, &lt;code&gt;--passphrase-fd&lt;/code&gt;, &lt;code&gt;--passphrase-file&lt;/code&gt;）をセットで指定している場合は Pinentry を迂回できることがある（&lt;code&gt;--quick-gen-key&lt;/code&gt; コマンドの場合など）。&lt;/p&gt;

&lt;h3 id=&#34;gpg-agent-のオプション:1e41d3f194187822b8041e09e4da8068&#34;&gt;gpg-agent のオプション&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;gpg-agent&lt;/code&gt; のオプションは &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; ホームディレクトリ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1e41d3f194187822b8041e09e4da8068:hd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1e41d3f194187822b8041e09e4da8068:hd&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; 直下にある &lt;code&gt;gpg-agent.conf&lt;/code&gt; ファイルで設定する。
設定は以下の様なフォーマットで行う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;default-cache-ttl 600
max-cache-ttl 7200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;gpg-agent.conf&lt;/code&gt; ファイルで使いそうなオプションを以下に挙げる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;オプション名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;log-file&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ログの出力先をフルパスで指定する。 挙動をチェックしたい場合など&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;default-cache-ttl&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;直前にアクセスしたキャッシュ・エントリの有効期間を秒単位で指定する。 既定値は 600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;max-cache-ttl&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;キャッシュ・エントリの有効期間の最大値を秒単位で指定する。 アクセスの有無にかかわらずこの期間が過ぎるとキャッシュがクリアされる。 既定値は 7200&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pinentry-program&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;独自に Pinentry プログラムを指定する場合はここにフルパスで指定する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pinentry-timeout&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pinentry プログラムの表示時間を秒単位で指定する。 既定値は 0 （タイムアウトなし）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;他にも，鍵生成時にパスフレーズの文字種や最小文字長を指定したり，パスフレーズの有効期間（期間が過ぎると警告が出るらしい）を設定できたりするようだ。
オプション項目について詳しくはは&lt;a href=&#34;https://gnupg.org/documentation/manuals/gnupg/Agent-Options.html&#34; title=&#34;Agent Options - Using the GNU Privacy Guard&#34;&gt;マニュアル&lt;/a&gt;（英語）を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;putty-with-gpg-agent:1e41d3f194187822b8041e09e4da8068&#34;&gt;PuTTY with gpg-agent&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; は Windows 用の SSH クライアント兼ターミナル・エミュレータである。
&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; には Plink と呼ばれるコマンドラインベースの SSH 接続ツールがあり，他ツール（例えば &lt;a href=&#34;https://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt;）と連携できるようになっている。
さらに &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; には Pagent と呼ばれるエージェントツールもあり，認証用の秘密鍵をキャッシュすることができる。&lt;/p&gt;

&lt;p&gt;今回は Pagent を &lt;code&gt;gpg-agent&lt;/code&gt; で置き換えることを考える。&lt;/p&gt;

&lt;h3 id=&#34;gpg-agent-のオプション-1:1e41d3f194187822b8041e09e4da8068&#34;&gt;gpg-agent のオプション&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;gpg-agent.conf&lt;/code&gt; ファイルに以下のオプションを追加する（&lt;code&gt;enable-putty-support&lt;/code&gt; 以外は任意）。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;オプション名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;enable-putty-support&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Pagent プロトコルを有効にする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;default-cache-ttl-ssh&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;直前にアクセスしたキャッシュ・エントリの有効期間を秒単位で指定する。 既定値は 1800&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;max-cache-ttl-ssh&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;キャッシュ・エントリの有効期間の最大値を秒単位で指定する。 アクセスの有無にかかわらずこの期間が過ぎるとキャッシュがクリアされる。 既定値は 7200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;設定を保存したら &lt;code&gt;gpg-connect-agent&lt;/code&gt; を使って &lt;code&gt;gpg-agent&lt;/code&gt; を再起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;gpg-connect-agent killagent /bye
OK closing connection

C:&amp;gt;gpg-connect-agent /bye
gpg-connect-agent: no running gpg-agent - starting &#39;C:\path\to\GnuPG\bin\gpg-agent.exe&#39;
gpg-connect-agent: waiting for the agent to come up ... (5s)
gpg-connect-agent: connection to agent established
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお， &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の各コンポーネントは必要に応じて自動的に &lt;code&gt;gpg-agent&lt;/code&gt; を起動するので問題ないのだが， &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; と連動しているわけではないため， &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; 起動時に &lt;code&gt;gpg-agent&lt;/code&gt; が起動していない状況もありうる。
そこで， Windows ログイン時に &lt;code&gt;gpg-connect-agent&lt;/code&gt; を使って &lt;code&gt;gpg-agent&lt;/code&gt; を起動しておくことをお薦めする。&lt;/p&gt;

&lt;h3 id=&#34;ssh-鍵のインポート:1e41d3f194187822b8041e09e4da8068&#34;&gt;SSH 鍵のインポート&lt;/h3&gt;

&lt;p&gt;SSH 鍵のインポートには2通りの方法あるようだが，今回は簡単な方でいく&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1e41d3f194187822b8041e09e4da8068:imp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1e41d3f194187822b8041e09e4da8068:imp&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;鍵ファイル（ここでは &lt;code&gt;id_rsa.PPK&lt;/code&gt; とする）を Pagent で開く。
ファイルの関連付けがされている場合はエクスプローラから該当の PPK ファイルをダブルクリックすればいい。
そうでない場合は以下のコマンドで PPK ファイルを開く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;pageant.exe id_rsa.PPK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると Pagent のプロンプトが1回， &lt;code&gt;gpg-agent&lt;/code&gt; のプロンプトが2回表示され，都合3回パスフレーズを入力させられる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25558118892/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1454/25558118892_045f0a9b8f_o.png&#34; alt=&#34;Pagent&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25558118892/&#34;&gt;Pagent&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25558116832/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1485/25558116832_dd02c5d7ec_o.png&#34; alt=&#34;GnuPG Pinentry (1)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25558116832/&#34;&gt;GnuPG Pinentry (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25376004580/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1467/25376004580_58a790993c_o.png&#34; alt=&#34;GnuPG Pinentry (2)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25376004580/&#34;&gt;GnuPG Pinentry (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これで秘密鍵が &lt;code&gt;private-keys-v1.d&lt;/code&gt; フォルダに格納される。
また &lt;code&gt;sshcontrol&lt;/code&gt; ファイルが作成され，インポートした鍵の情報が書き込まれる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# List of allowed ssh keys.  Only keys present in this file are used
# in the SSH protocol.  The ssh-add tool may add new entries to this
# file to enable them; you may also add them manually.  Comment
# lines, like this one, as well as empty lines are ignored.  Lines do
# have a certain length limit but this is not serious limitation as
# the format of the entries is fixed and checked by gpg-agent. A
# non-comment line starts with optional white spaces, followed by the
# keygrip of the key given as 40 hex digits, optionally followed by a
# caching TTL in seconds, and another optional field for arbitrary
# flags.   Prepend the keygrip with an &#39;!&#39; mark to disable it.

# RSA key added on: 2016-03-10 21:24:32
# MD5 Fingerprint:  56:ff:fd:60:38:a1:7a:44:0c:37:86:90:94:8d:7f:6a
F65BB98767E88930612C6EABC4D4918E2A573903 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この &lt;code&gt;F65B...&lt;/code&gt; の長ったらしい数字列は keygrip と呼ばれる鍵の識別子で &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; の鍵 ID とは異なるもののようだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1e41d3f194187822b8041e09e4da8068:kg&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1e41d3f194187822b8041e09e4da8068:kg&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;これで鍵のインポートができたので &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; で実際に SSH 接続してみると&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25585468551/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1586/25585468551_0447584a65_o.png&#34; alt=&#34;GnuPG Pinentry (3)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25585468551/&#34;&gt;GnuPG Pinentry (3)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とプロンプトが表示された。
めでたし！&lt;/p&gt;

&lt;h2 id=&#34;git-for-windows-との連携:1e41d3f194187822b8041e09e4da8068&#34;&gt;Git for Windows との連携&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; と &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free SSH and Telnet client&#34;&gt;PuTTY&lt;/a&gt; を連携するには，環境変数 &lt;code&gt;GIT_SSH&lt;/code&gt; に Plink へのフルパスをセットする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;setx GIT_SSH=C:\path\to\PuTTY\plink.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一方，リポジトリの &lt;code&gt;.git\config&lt;/code&gt; ファイルには PPK ファイルの場所をセットする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[remote &amp;quot;origin&amp;quot;]
	puttykeyfile = C:/path/to/PuTTY/id_rsa.PPK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で &lt;code&gt;git fetch&lt;/code&gt; または &lt;code&gt;git push&lt;/code&gt; を行うと Plink 経由で &lt;code&gt;gpg-agent&lt;/code&gt; にリクエストが発生する。&lt;/p&gt;

&lt;h2 id=&#34;windows-版-gpg-agent-は-openssh-と相性が悪い:1e41d3f194187822b8041e09e4da8068&#34;&gt;Windows 版 gpg-agent は OpenSSH と相性が悪い？&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;gpg-agent&lt;/code&gt; は &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; の &lt;code&gt;ssh-agent&lt;/code&gt; と置き換えることもできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1e41d3f194187822b8041e09e4da8068:sa&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1e41d3f194187822b8041e09e4da8068:sa&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。
&lt;code&gt;gpg-agent&lt;/code&gt; への SSH 鍵のインポートには &lt;code&gt;ssh-add&lt;/code&gt; を使うのだが， Windows 環境では上手く動かない。
どうやらファイル・ディスクリプタ &lt;code&gt;S.gpg-agent.ssh&lt;/code&gt; が上手く機能しないようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 版&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1e41d3f194187822b8041e09e4da8068:m&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1e41d3f194187822b8041e09e4da8068:m&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; と &lt;a href=&#34;https://github.com/PowerShell/Win32-OpenSSH&#34; title=&#34;PowerShell/Win32-OpenSSH: Win32 port of OpenSSH&#34;&gt;PowerShell 用&lt;/a&gt;の &lt;a href=&#34;http://www.openssh.com/&#34; title=&#34;OpenSSH&#34;&gt;OpenSSH&lt;/a&gt; で試してみたのだが，いずれも上手くいかなかった。
&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 版については &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; modern version を使えば上手くいくのかもしれないが，面倒なので試してない。
今後，試す機会があればここに追記する。&lt;/p&gt;

&lt;h2 id=&#34;参考になる-かもしれない-web-ページ:1e41d3f194187822b8041e09e4da8068&#34;&gt;参考になる（かもしれない） Web ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gnupg.org/&#34;&gt;The GNU Privacy Guard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml&#34;&gt;わかる！ OpenPGP 暗号 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hp.vector.co.jp/authors/VA024651/PuTTYkj.html&#34;&gt;hdk の自作ソフトの紹介 | PuTTYjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ice.hotmint.com/putty/&#34;&gt;iceiv+putty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://webkaru.net/linux/putty-ssh-login-public-key/&#34;&gt;公開鍵認証によるSSH接続 - PuTTYの使い方 - Linux入門 - Webkaru&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tsuyoshi_cho/items/79c09905ae3f192b3a0f&#34;&gt;Windowsでのssh agent - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.yubico.com/PGP/SSH_authentication/Windows.html&#34;&gt;SSH authentication using a YubiKey on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yanor.net/wiki/?Git%2FGit%20for%20Windows%2FSSH%E3%81%ABPuTTY%E3%82%92%E4%BD%BF%E3%81%86&#34;&gt;Git/Git for Windows/SSHにPuTTYを使う - yanor.net/wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://superuser.com/questions/911496/gpg-agent-under-windows-as-ssh-agent-for-git-bash&#34;&gt;GPG Agent under Windows as SSH Agent for git bash - Super User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://incenp.org/notes/2015/gnupg-for-ssh-authentication.html&#34;&gt;Using GnuPG (2.1) for SSH authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sysmic.org/dotclear/index.php?post/2010/03/24/Convert-keys-betweens-GnuPG%2C-OpenSsh-and-OpenSSL&#34;&gt;Convert keys between GnuPG, OpenSsh and OpenSSL - Sysmic.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1e41d3f194187822b8041e09e4da8068:sr&#34;&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-1/&#34; title=&#34;GnuPG Modern Version for Windows ― インストール編&#34;&gt;前回&lt;/a&gt;も書いたが， classic version と modern version は鍵（特に秘密鍵）の管理の仕方が異なるため両者を混在させる場合は注意が必要である。 Classic version で作成した鍵を modern version にも反映させたいのであれば &lt;code&gt;gpg-v21-migrated&lt;/code&gt; ファイルを削除すると再度移行処理が走るらしい。 Classic version を使わなければならない状況（Linux などではパッケージ管理ツールがアプリケーションの証明用に &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の classic version を使うことがある）でないのなら modern version に一本化するほうがお勧めである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1e41d3f194187822b8041e09e4da8068:sr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1e41d3f194187822b8041e09e4da8068:od&#34;&gt;Modern version では &lt;code&gt;gpg-agent&lt;/code&gt; が必須となった。したがって &lt;code&gt;--use-agent&lt;/code&gt;, &lt;code&gt;--no-use-agent&lt;/code&gt;, &lt;code&gt;--gpg-agent-info&lt;/code&gt; 各オプションは無効（ダミーオプション）になっている。また UNIX 互換プラットフォームで &lt;code&gt;gpg-agent&lt;/code&gt; 利用する際は &lt;code&gt;GPG_TTY&lt;/code&gt; 環境変数をセットする必要があるが， Windows では不要なためここでは割愛する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1e41d3f194187822b8041e09e4da8068:od&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1e41d3f194187822b8041e09e4da8068:pp&#34;&gt;パスワード（password）とパスフレーズ（passphrase）の違いは，パスフレーズでは英数字以外に空白文字や記号が使え文字数の制限がないことにある。ちなみに &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; の秘密鍵にはいかなる形でもパスフレーズを保持しない（S2K パラメータ情報は持っている）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1e41d3f194187822b8041e09e4da8068:pp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1e41d3f194187822b8041e09e4da8068:hd&#34;&gt;Windows では， &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; ホームディレクトリの既定は &lt;code&gt;%APPDATA%\gnupg&lt;/code&gt; となっている。これを変更するには &lt;code&gt;GNUPGHOME&lt;/code&gt; 環境変数または &lt;code&gt;--homedir&lt;/code&gt; オプションを使う。（&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-1/&#34; title=&#34;GnuPG Modern Version for Windows ― インストール編&#34;&gt;前回&lt;/a&gt;を参照のこと）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1e41d3f194187822b8041e09e4da8068:hd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1e41d3f194187822b8041e09e4da8068:imp&#34;&gt;今回は PPK ファイルを直接読み込む方法をとったが， PPK ファイルから OpenSSH 形式にエクスポートし，それを更に X.509 形式に変換した後 &lt;code&gt;gpgsm&lt;/code&gt; でインポートすることもできる。（参考： &lt;a href=&#34;http://www.sysmic.org/dotclear/index.php?post/2010/03/24/Convert-keys-betweens-GnuPG%2C-OpenSsh-and-OpenSSL&#34;&gt;Convert keys between GnuPG, OpenSsh and OpenSSL&lt;/a&gt;）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1e41d3f194187822b8041e09e4da8068:imp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1e41d3f194187822b8041e09e4da8068:kg&#34;&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 鍵以外の鍵にも対応するためらしい。 &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 鍵の keygrip は &lt;code&gt;--with-keygrip&lt;/code&gt; オプションを付けて鍵を表示すると見ることができる。ちなみに &lt;code&gt;private-keys-v1.d&lt;/code&gt; フォルダにある秘密鍵のファイルは，この keygrip 値がそのままファイル名になっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1e41d3f194187822b8041e09e4da8068:kg&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1e41d3f194187822b8041e09e4da8068:sa&#34;&gt;&lt;code&gt;gpg-agent.conf&lt;/code&gt; ファイルに &lt;code&gt;enable-ssh-support&lt;/code&gt; オプションをセットする。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1e41d3f194187822b8041e09e4da8068:sa&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1e41d3f194187822b8041e09e4da8068:m&#34;&gt;&lt;a href=&#34;https://git-for-windows.github.io/&#34; title=&#34;Git for Windows&#34;&gt;Git for Windows&lt;/a&gt; に同梱されている &lt;code&gt;git bash&lt;/code&gt; も &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1e41d3f194187822b8041e09e4da8068:m&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>GnuPG Modern Version for Windows ― インストール編 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-1/" />
		<id>tag:text.Baldanders.info,2016-03-09:/remark/2016/03/using-gnupg-modern-version-1/</id>
		<published>2016-03-09T18:27:04+09:00</published>
		<updated>2016-03-12T15:16:22+09:00</updated>
		<summary>Windows 版 GnuPG Modern Version のインストールについて。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;この記事は以下の記事を最新版 &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 用に再構成したものです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000770.shtml&#34;&gt;GnuPG 2.1.0 (modern) for Windows のインストール — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; modern version について2回に分けて解説する。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-1/&#34;&gt;インストール編&lt;/a&gt; （← イマココ）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-2/&#34;&gt;gpg-agent について&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;なお modern version の特徴である ECC への対応については以下の Gist ページを参照のこと。
（これもそのうち再構成してここで公開する予定）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/spiegel-im-spiegel/f177c02af04d3b34ade0&#34;&gt;Windows 版 GnuPG 2.1.x を使ってみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;openpgp-実装としての-gnupg:58d4685478fa2f24dbfa33f4efd5f890&#34;&gt;OpenPGP 実装としての GnuPG&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; の起源は &lt;a href=&#34;https://www.philzimmermann.com/&#34; title=&#34;Phil Zimmermann&#39;s Home Page&#34;&gt;Phil Zimmermann&lt;/a&gt; さんによる PGP (Pretty Good Privacy) と呼ばれる暗号ツールである。
PGP の最初のバージョンは1991年に公開された&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:58d4685478fa2f24dbfa33f4efd5f890:1991&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:58d4685478fa2f24dbfa33f4efd5f890:1991&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
当時の &lt;a href=&#34;https://www.philzimmermann.com/&#34; title=&#34;Phil Zimmermann&#39;s Home Page&#34;&gt;Phil Zimmermann&lt;/a&gt; さんは反核運動家で，政府等の組織からデータやメッセージ（特に電子メール）を保護するための手段として PGP を開発し，最終的にそれをフリーで公開した&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:58d4685478fa2f24dbfa33f4efd5f890:pgp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:58d4685478fa2f24dbfa33f4efd5f890:pgp&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;その後 PGP はいくつか改良を重ね，1998年に &lt;a href=&#34;http://tools.ietf.org/html/rfc2440&#34; title=&#34;RFC 2440 - OpenPGP Message Format&#34;&gt;RFC 2440&lt;/a&gt; つまり OpenPGP として標準化された&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:58d4685478fa2f24dbfa33f4efd5f890:op&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:58d4685478fa2f24dbfa33f4efd5f890:op&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
また特許上の制限や国際政治上の問題も2000年を機に大幅に緩和され PGP を含む多くの暗号製品が本格的に使われるようになった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; は &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; をベースにドイツで生まれた製品である。
特定の個人・組織が独占することのないよう &lt;a href=&#34;https://www.gnu.org/&#34; title=&#34;The GNU Operating System and the Free Software Movement&#34;&gt;GNU&lt;/a&gt; プロジェクトの一環として現在も開発が行われている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:58d4685478fa2f24dbfa33f4efd5f890:gpl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:58d4685478fa2f24dbfa33f4efd5f890:gpl&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; には現在，以下の3つのバージョンがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classic Version (1.4.x)&lt;/li&gt;
&lt;li&gt;Stable Version (2.0.x)&lt;/li&gt;
&lt;li&gt;Modern Version (2.1.x)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このうち Windows プラットフォームに対応しているのは classic version と modern version である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:58d4685478fa2f24dbfa33f4efd5f890:gw&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:58d4685478fa2f24dbfa33f4efd5f890:gw&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。
今回は modern version のインストールについて紹介する。&lt;/p&gt;

&lt;h2 id=&#34;modern-version-インストーラのダウンロード:58d4685478fa2f24dbfa33f4efd5f890&#34;&gt;Modern Version インストーラのダウンロード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/download/&#34; title=&#34;GnuPG - Download&#34;&gt;ダウンロードページ&lt;/a&gt; の “GnuPG binary releases” にある Windows 用のバイナリへのリンクからダウンロードを行う（執筆時点でヴァージョン 2.1.11, 20160209 版が最新）。
必ずインストーラ本体と署名ファイルをセットでダウンロードすること。&lt;/p&gt;

&lt;p&gt;前バージョンの &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を持っている場合はインストーラの署名検証を行い，正しいファイルであることを確認すること。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;gpg --verify gnupg-w32-2.1.11_20160209.exe.sig
gpg: assuming signed data in &#39;gnupg-w32-2.1.11_20160209.exe&#39;
gpg: Signature made 02/09/16 20:05:47 東京 (標準時) using RSA key ID 4F25E3B6
gpg: using PGP trust model
gpg: Good signature from &amp;quot;Werner Koch (dist sig)&amp;quot; [full]
gpg: binary signature, digest algorithm SHA256, key algorithm rsa2048
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;署名検証用の公開鍵は以下にある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gnupg.org/signature_key.html&#34;&gt;Signature Key&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;classic-version-の削除:58d4685478fa2f24dbfa33f4efd5f890&#34;&gt;Classic Version の削除&lt;/h2&gt;

&lt;p&gt;Modern version のファイル構成は classic version と互換性がない。
Modern version を利用するのなら classic version は削除するのがお勧めである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classic version の鍵束（keyring; &lt;code&gt;pubring.gpg&lt;/code&gt;, &lt;code&gt;secring.gpg&lt;/code&gt;, &lt;code&gt;trustdb.gpg&lt;/code&gt;）は別の場所に退避させておき Modern version インストール後にインポートする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:58d4685478fa2f24dbfa33f4efd5f890:imp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:58d4685478fa2f24dbfa33f4efd5f890:imp&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。インポートの方法は後述する&lt;/li&gt;
&lt;li&gt;Classic version  アンインストール後に環境変数 &lt;code&gt;PATH&lt;/code&gt; に &lt;code&gt;gpg.exe&lt;/code&gt; へのパスが残っている場合は念のためこれも削除しておく。環境変数の変更方法がわからない方は無理に削除しなくてもいい&lt;/li&gt;
&lt;li&gt;Classic version  アンインストール後にレジストリ &lt;code&gt;HKEY_CURRENT_USER\Software\GNU\GnuPG&lt;/code&gt; が残っている場合は，これも削除してしまうのがよいだろう。ただしレジストリ操作に自信のない人はこれも無理に触らなくてよい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお &lt;code&gt;trustdb.gpg&lt;/code&gt; は以下の手順でテキストファイルにエクスポートしておくとよい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:58d4685478fa2f24dbfa33f4efd5f890:t&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:58d4685478fa2f24dbfa33f4efd5f890:t&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;gpg --export-ownertrust &amp;gt; trust.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modern-version-のインストール:58d4685478fa2f24dbfa33f4efd5f890&#34;&gt;Modern Version のインストール&lt;/h2&gt;

&lt;p&gt;準備ができたところでインストールを始めよう。
ダウンロードしたインストーラを起動する。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/24974542243/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1502/24974542243_4e83a1d7b1.jpg&#34; alt=&#34;Installing GnuPG for Windows (1)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24974542243/&#34;&gt;Installing GnuPG for Windows (1)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;英語だけど無問題。
ほとんど選択肢はないので &lt;code&gt;[Next]&lt;/code&gt; ボタンで先に進めていけばいい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25482633892/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1545/25482633892_d9dc023e1a.jpg&#34; alt=&#34;Installing GnuPG for Windows (2)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25482633892/&#34;&gt;Installing GnuPG for Windows (2)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/24974542073/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1695/24974542073_20408e1079.jpg&#34; alt=&#34;Installing GnuPG for Windows (3)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24974542073/&#34;&gt;Installing GnuPG for Windows (3)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25305629970/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1472/25305629970_6f5dcb4ef0.jpg&#34; alt=&#34;Installing GnuPG for Windows (4)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25305629970/&#34;&gt;Installing GnuPG for Windows (4)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;インストール先のフォルダを変えたい場合はここで変更する。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25601226555/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1449/25601226555_b07b73e7fa.jpg&#34; alt=&#34;Installing GnuPG for Windows (5)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25601226555/&#34;&gt;Installing GnuPG for Windows (5)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25575126816/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1633/25575126816_f090b537bf.jpg&#34; alt=&#34;Installing GnuPG for Windows (6)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25575126816/&#34;&gt;Installing GnuPG for Windows (6)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/24970753344/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1587/24970753344_5da4faf427.jpg&#34; alt=&#34;Installing GnuPG for Windows (7)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/24970753344/&#34;&gt;Installing GnuPG for Windows (7)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;[Finish]&lt;/code&gt; ボタンを押してインストール完了。&lt;/p&gt;

&lt;p&gt;この時点で &lt;code&gt;PATH&lt;/code&gt; も通っているため，コマンドプロンプトから&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;gpg --version
gpg (GnuPG) 2.1.11
libgcrypt 1.6.5
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: C:/Users/username/AppData/Roaming/gnupg
Supported algorithms:
Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と入力すればバージョン情報が表示される。&lt;/p&gt;

&lt;h2 id=&#34;ホームディレクトリの変更:58d4685478fa2f24dbfa33f4efd5f890&#34;&gt;ホームディレクトリの変更&lt;/h2&gt;

&lt;p&gt;インストール直後は &lt;code&gt;%APPDATA%\gnupg&lt;/code&gt; が &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; のホームディレクトリになっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:58d4685478fa2f24dbfa33f4efd5f890:gh&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:58d4685478fa2f24dbfa33f4efd5f890:gh&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;。
通常はこれで問題ないが，他のフォルダに変更したい場合は環境変数 &lt;code&gt;GNUPGHOME&lt;/code&gt; でフォルダを指定する。
また &lt;code&gt;gpg.exe&lt;/code&gt; 起動時に &lt;code&gt;--homedir&lt;/code&gt; オプションでホームディレクトリを直接指定することもできる（&lt;code&gt;--homedir&lt;/code&gt; オプションが優先）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;gpg --version --homedir C:\usr\home
gpg (GnuPG) 2.1.11
libgcrypt 1.6.5
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: C:/usr/home
Supported algorithms:
Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストール直後のホームディレクトリはまだ空である。&lt;/p&gt;

&lt;h2 id=&#34;classic-version-の鍵束のインポート:58d4685478fa2f24dbfa33f4efd5f890&#34;&gt;Classic Version の鍵束のインポート&lt;/h2&gt;

&lt;p&gt;Classic version からアップグレードした人は旧鍵束（&lt;code&gt;pubring.gpg&lt;/code&gt;, &lt;code&gt;secring.gpg&lt;/code&gt;, &lt;code&gt;trustdb.gpg&lt;/code&gt; → &lt;code&gt;trust.txt&lt;/code&gt;）をあらかじめ退避していると思うが，これを新しくインストールした modern version へインポートする。
手順は以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;gpg --import-options import-local-sigs --import pubring.gpg
C:&amp;gt;gpg --import secring.gpg
C:&amp;gt;gpg --import-ownertrust trust.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;秘密鍵（&lt;code&gt;secring.gpg&lt;/code&gt;）のインポートでは鍵の数だけパスフレーズの入力をを要求される。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/25316582890/&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1507/25316582890_9ff8c3d2ea_o.png&#34; alt=&#34;GnuPG pinentry&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/25316582890/&#34;&gt;GnuPG pinentry&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;このプロンプト画面（Pinentry）については&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/using-gnupg-modern-version-2/&#34; title=&#34;GnuPG Modern Version for Windows ― gpg-agent について&#34;&gt;次回&lt;/a&gt;に &lt;code&gt;gpg-agent&lt;/code&gt; の話と絡めて説明する。&lt;/p&gt;

&lt;p&gt;上手くインポートできていれば以下のように鍵を表示することができる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:58d4685478fa2f24dbfa33f4efd5f890:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:58d4685478fa2f24dbfa33f4efd5f890:e&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;gpg --list-keys 0xCE59D5FA
pub   dsa3072/CE59D5FA 2014-10-15 [SC] [revoked: 2014-10-15]
uid         [ revoked] John Doe (Demonstration) &amp;lt;john@examle.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インポートにより &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; のホームディレクトリには以下のフォルダ・ファイルができているはずである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pubring.kbx&lt;/code&gt; ファイル&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:58d4685478fa2f24dbfa33f4efd5f890:kbx&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:58d4685478fa2f24dbfa33f4efd5f890:kbx&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trustdb.gpg&lt;/code&gt; ファイル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gpg-v21-migrated&lt;/code&gt; ファイル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private-keys-v1.d&lt;/code&gt; フォルダ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;private-keys-v1.d&lt;/code&gt; フォルダにはインポートした秘密鍵の数だけファイルが作成されている。
&lt;code&gt;gpg-v21-migrated&lt;/code&gt; ファイルは鍵束が  modern version へ移行したことを示すフラグである。&lt;/p&gt;

&lt;h2 id=&#34;付録-gnupg-以外の-openpgp-実装:58d4685478fa2f24dbfa33f4efd5f890&#34;&gt;【付録】 GnuPG 以外の OpenPGP 実装&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 以外の &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; 実装としては以下のものがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.symantec.com/ja/jp/encryption/&#34;&gt;PGP 暗号化ソフトウェア | シマンテック&lt;/a&gt; : PGP は現在 Symantec 社の暗号化ソリューションの一部となっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.thialfihar.android.apg&#34;&gt;APG - Google Play&lt;/a&gt; (&lt;a href=&#34;http://thialfihar.org/&#34;&gt;Thialfihar&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thialfihar/apg&#34;&gt;thialfihar/apg: OpenPGP for Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.openkeychain.org/&#34;&gt;OpenKeychain&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.sufficientlysecure.keychain&#34;&gt;OpenKeychain: Easy PGP - Google Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/open-keychain/open-keychain&#34;&gt;open-keychain/open-keychain: OpenKeychain is an OpenPGP implementation for Android.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ipgmail.com/&#34;&gt;iPGMail&lt;/a&gt; : PGP for iOS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考になる-かもしれない-web-ページ:58d4685478fa2f24dbfa33f4efd5f890&#34;&gt;参考になる（かもしれない） Web ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gnupg.org/&#34;&gt;The GNU Privacy Guard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ietf.org/mailman/listinfo/openpgp&#34;&gt;openpgp &amp;ndash; Ongoing discussion of OpenPGP issues.&lt;/a&gt; : ここで次期 OpenPGP の議論などが交わされている&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml&#34;&gt;わかる！ OpenPGP 暗号 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cla-ri.net/pgp/&#34;&gt;PGP User&amp;rsquo;s Manual for Windows&lt;/a&gt; : 最近は更新されてないが PGP を巡る歴史資料としての価値は高い&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gnupg.hclippr.com/&#34;&gt;GNU Privacy Guard講座&lt;/a&gt; : 最近の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; に関する日本語の情報はこちらがお薦め&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jo-ke.name/wp/?p=111&#34;&gt;GnuPG invalid packet workaround | random repairs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinuxjp.org/index.php/GnuPG&#34;&gt;GnuPG - ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:58d4685478fa2f24dbfa33f4efd5f890&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4900900028/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/5132396FFQL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4900900028/baldandersinf-22/&#34;&gt;PGP―暗号メールと電子署名&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;シムソン ガーフィンケル Simson Garfinkel &lt;/dd&gt;&lt;dd&gt;オライリー・ジャパン 1996-04&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;3&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4756136494/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4756136494.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング作法&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4320026926/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4320026926.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;プログラミング言語C 第2版 ANSI規格準拠&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797350997/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797350997.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新版暗号技術入門 秘密の国のアリス&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798132608/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798132608.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報処理教科書 高度試験午後II論述 春期・秋期 (EXAMPRESS)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798105538/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798105538.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;エンタープライズ アプリケーションアーキテクチャパターン (Object Oriented Selection)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;良書なのだが，残念ながら内容が古すぎた。 PGP の歴史資料として読むならいいかもしれない。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-10-16&#34;&gt;2014/10/16&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:58d4685478fa2f24dbfa33f4efd5f890:1991&#34;&gt;当時の PGP の仕様は（公開年にちなんでか） &lt;a href=&#34;http://tools.ietf.org/html/rfc1991&#34; title=&#34;RFC 1991 - PGP Message Exchange Formats&#34;&gt;RFC 1991&lt;/a&gt; として公開されている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:58d4685478fa2f24dbfa33f4efd5f890:1991&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:58d4685478fa2f24dbfa33f4efd5f890:pgp&#34;&gt;もともと &lt;a href=&#34;https://www.philzimmermann.com/&#34; title=&#34;Phil Zimmermann&#39;s Home Page&#34;&gt;Phil Zimmermann&lt;/a&gt; さんは PGP をシェアウェアとして売り出すつもりだったらしい。しかし米国内で事実上暗号を禁止する法案が提出され，法案の可決を阻止する目的もあり PGP をフリーで公開した。ところが &lt;a href=&#34;https://www.philzimmermann.com/&#34; title=&#34;Phil Zimmermann&#39;s Home Page&#34;&gt;Phil Zimmermann&lt;/a&gt; さんが暗号に関する特許について迂闊だったことや PGP が ftp サーバを通じて海外に漏洩してしまった（当時は暗号製品には輸出規制があり強い暗号製品は米国外に持ち出せなかった）ことなどもあって，しばらくの間 &lt;a href=&#34;https://www.philzimmermann.com/&#34; title=&#34;Phil Zimmermann&#39;s Home Page&#34;&gt;Phil Zimmermann&lt;/a&gt; さんと PGP は不遇の身の上となる。当時の輸入規制に「書籍」は含まれていなかったため，最新版の PGP コードを書籍として出版し海外でコンパイルする国際化プロジェクトがあった。何もかも懐かしい（笑） ちなみに現在の PGP は無料ではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:58d4685478fa2f24dbfa33f4efd5f890:pgp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:58d4685478fa2f24dbfa33f4efd5f890:op&#34;&gt;現在は &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;RFC 4880&lt;/a&gt; にアップデートされ，更に改良が進められている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:58d4685478fa2f24dbfa33f4efd5f890:op&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:58d4685478fa2f24dbfa33f4efd5f890:gpl&#34;&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; の著作権は &lt;a href=&#34;http://www.fsf.org/&#34; title=&#34;Front Page — Free Software Foundation — working together for free software&#34;&gt;FSF&lt;/a&gt; に帰属し &lt;a href=&#34;http://www.gnu.org/licenses/licenses.html#GPL&#34; title=&#34;The GNU General Public License&#34;&gt;GNU GPL&lt;/a&gt; でライセンスされている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:58d4685478fa2f24dbfa33f4efd5f890:gpl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:58d4685478fa2f24dbfa33f4efd5f890:gw&#34;&gt;Stable version については &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; で Windows 用バイナリを配布している。 &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; は &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を含む GUI ツールをパッケージ化したものだが，セキュリティ・アップデートを含む本家の更新に追従できていないのが玉に瑕である。 &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 本体のみでいいのなら modern version の Windows 用バイナリで充分間に合う。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:58d4685478fa2f24dbfa33f4efd5f890:gw&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:58d4685478fa2f24dbfa33f4efd5f890:imp&#34;&gt;実は classic version の鍵束をそのまま使っても自動的にファイルが移行されるため大抵は問題ないのだが，旧鍵束にはバグが混入しているそうで，安全のため明示的にインポート作業を行うほうがいいらしい。なお modern version の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; は，移行時以外は classic version の &lt;code&gt;secring.gpg&lt;/code&gt; を参照しないため modern version と classic version を混在させる場合は注意が必要である。（&lt;code&gt;gpg-v21-migrated&lt;/code&gt; ファイルを削除すると再度移行処理が走るらしい）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:58d4685478fa2f24dbfa33f4efd5f890:imp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:58d4685478fa2f24dbfa33f4efd5f890:t&#34;&gt;&lt;code&gt;trustdb.gpg&lt;/code&gt; ファイルはそのまま使うのではなく， &lt;code&gt;--export-ownertrust&lt;/code&gt; オプションでテキストファイルにエクスポートしたものを使うのが安全なようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:58d4685478fa2f24dbfa33f4efd5f890:t&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:58d4685478fa2f24dbfa33f4efd5f890:gh&#34;&gt;環境変数 &lt;code&gt;APPDATA&lt;/code&gt; には通常 &lt;code&gt;C:\Users\username\AppData\Roaming&lt;/code&gt; （&lt;code&gt;username&lt;/code&gt; はログインユーザの名前）がセットされている。ちなみに UNIX 系のプラットフォームでは &lt;code&gt;~/.gnupg&lt;/code&gt; が &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 既定のホームディレクトリだが Windows は構成が異なるためこのようになっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:58d4685478fa2f24dbfa33f4efd5f890:gh&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:58d4685478fa2f24dbfa33f4efd5f890:e&#34;&gt;例で挙げた鍵は「&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/openpgp.shtml&#34;&gt;わかる！ OpenPGP 暗号&lt;/a&gt;」で説明用に作成した鍵で既に破棄済みになっているが，ご容赦を。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:58d4685478fa2f24dbfa33f4efd5f890:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:58d4685478fa2f24dbfa33f4efd5f890:kbx&#34;&gt;kbx は keybox の略らしい。 Stable version 以降では OpenPGP の鍵束だけでなく S/MIME （X.509）や OpenSSH の鍵も格納できる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:58d4685478fa2f24dbfa33f4efd5f890:kbx&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>PuTTY 0.67 リリース（Security Fix） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/putty-0_67-released/" />
		<id>tag:text.Baldanders.info,2016-03-08:/remark/2016/03/putty-0_67-released/</id>
		<published>2016-03-08T14:34:05+09:00</published>
		<updated>2016-03-08T14:34:05+09:00</updated>
		<summary>SCP にセキュリティ脆弱性が発見されたようだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;Windows 用の SSH（Secure SHell） クライアント &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free telnet/ssh client&#34;&gt;PuTTY&lt;/a&gt; 0.67 がリリースされている。
&lt;code&gt;pscp.exe&lt;/code&gt; にセキュリティ脆弱性が発見されたようだ。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt; Many versions of PSCP prior to 0.67 have a stack corruption vulnerability in their treatment of the &#39;sink&#39; direction (i.e. downloading from server to client) of the old-style SCP protocol.&lt;br&gt;
In order for this vulnerability to be exploited, the user must connect to a malicious server and attempt to download any file. &lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/wishlist/vuln-pscp-sink-sscanf.html&#34;&gt;PuTTY vulnerability vuln-pscp-sink-sscanf&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;0.66 以下の &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34; title=&#34;PuTTY: a free telnet/ssh client&#34;&gt;PuTTY&lt;/a&gt; を使っている人は &lt;strong&gt;必ず&lt;/strong&gt; 0.67 にアップデートすること。
なお，以下の日本語版も 0.67 がリリースされている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hp.vector.co.jp/authors/VA024651/PuTTYkj.html&#34; title=&#34;hdk の自作ソフトの紹介 | PuTTYjp&#34;&gt;PuTTYjp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ice.hotmint.com/putty/&#34; title=&#34;iceiv+putty&#34;&gt;iceiv+putty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>だれがパトロンなのか - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/who-writer-of-the-patron/" />
		<id>tag:text.Baldanders.info,2016-03-07:/remark/2016/03/who-writer-of-the-patron/</id>
		<published>2016-03-07T19:56:12+09:00</published>
		<updated>2016-03-07T19:56:12+09:00</updated>
		<summary>作家がその気になればいくらでも接点や機会はつくれるのである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.mu/tsukamoto/n/n1688cfdc287a&#34;&gt;「読みたい」以外に本を買う理由があるか｜塚本 牧生｜note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;個人的にはこの記事に激しく同意する。
何故って今の日本の出版社は担当者が海外からのオファーを勝手に断ったり印税率を3%まで値切ってるって話じゃない。
そんな状況下でせっせと本を売って私たちがそれを買って，本当にそれで作家は幸せになれるのかい？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/01/26/beyond-cool-japan-02/&#34;&gt;ゼネラリストばかりで「プロ」がいない出版界 « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/02/24/beyond-cool-japan-03/&#34;&gt;こんまりの「片づけ」本は海外でなぜ売れた？ « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私はもう50年生きてる「おっさん」だけど作家の名前だけで買ってる本は殆どない。
たぶん竹本泉さんと高橋葉介さんくらいだろう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:93e8d3d7663bbcd891f56781783b3d10:0&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:93e8d3d7663bbcd891f56781783b3d10:0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
もちろん他にも好きな作家さんはいるがすべての作品を無条件に好きというわけではない。
ある作品が面白かったからといってその作家の次の作品が面白いとは限らない。
本はアウトプットされた「成果」が全て。
今時の言い方をするなら「作家は書いてナンボ，売れてナンボ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:93e8d3d7663bbcd891f56781783b3d10:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:93e8d3d7663bbcd891f56781783b3d10:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;」である。&lt;/p&gt;

&lt;p&gt;米国では出版社が作家を支えるシステムがあるそうだ。
たとえば印税の前渡し制度（「アドバンス」と呼ばれるらしい）などである。
作家が安心して執筆活動を続けられるよう「投資」するわけだ。
その上で出版物が売れるよう出版社はあらゆる手段を尽くす（投資したのだから回収しなくちゃね）。
この中には当然 E ブックも含まれる。&lt;/p&gt;

&lt;p&gt;日本の出版社が作家に対してこのような「投資」を行っているようには（読者からは）とても見えない。
出版社に依存している作家は戦前の「小作農」のようである。
とはいえ日本の出版社がパトロンとして機能していないことは非難すべきことではない。
しかし，そうであるならば「本の売上で出版社が作家達を支える」という発想が無理筋であることは容易に理解できるはずである。&lt;/p&gt;

&lt;p&gt;作家活動には色々なやり方がある。
これまでどおり出版社とタッグを組んでいく方法もあれば，作家自身がプロモーションを行う場合もあるだろう。
&lt;a href=&#34;http://text.baldanders.info/remark/2016/02/the-martian/&#34;&gt;自己出版（self publishing）でブレイクして映画化&lt;/a&gt;までされるパターンだってあるのだ。
ただ出版社（や出版エージェント）と組むのなら，お互い対等な立場でパートナーシップを組んでいかなければ作家は搾取されるだけになる。
いや，これは作家だけの話じゃなく個人事業主や私のようなフリーランスで活動している人間はみんな同じなのだが。&lt;/p&gt;

&lt;p&gt;日本には「タニマチ」とか「タカラヅカ」とかいったファンが直接対象を支えるシステムがある。
もしある作家さんが好きでその活動を支えたいと読者が考えるなら，もっとその作家の活動そのものにコミットしていくべきなんじゃないだろうか。&lt;/p&gt;

&lt;p&gt;昔は紙媒体を通じて間接的にしかできなかったことが今はネット等を通じて直接できる。
出版社が出版してくれなくても Web 連載や自己出版などを通じて発表できる機会もある。
あるいは昨年 &lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20150723/cckickstarter&#34;&gt;Creative Commons がやった&lt;/a&gt;ようにクラウド・ファンディングで出資者を募ることだってできるだろう。&lt;/p&gt;

&lt;p&gt;作家がその気になればいくらでも接点や機会はつくれるのである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:93e8d3d7663bbcd891f56781783b3d10:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:93e8d3d7663bbcd891f56781783b3d10:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B009GYTNT0/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41RTBwiiIuL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B009GYTNT0/baldandersinf-22/&#34;&gt;ルポ 電子書籍大国アメリカ (アスキー新書)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;大原 ケイ &lt;/dd&gt;&lt;dd&gt;KADOKAWA / アスキー・メディアワークス 2010-09-09&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00K2MEFFW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00K2MEFFW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;１００分でわかる企業法務　取締役のための会社法ノート (角川oneテーマ21)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00MIFE3BC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00MIFE3BC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アカマイ　知られざるインターネットの巨人 (角川ＥＰＵＢ選書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00LWWON3A/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00LWWON3A.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;文学とは何か (角川ソフィア文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00KIG35ZS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00KIG35ZS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;国防の常識 (角川oneテーマ21)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00KIG38F0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00KIG38F0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;領土の常識 (角川oneテーマ21)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;電子書籍に関する本を読むなら最初にこの本を読むことをお勧めする。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-10-18&#34;&gt;2014/10/18&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00KAOQXTS/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51JKldeFctL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00KAOQXTS/baldandersinf-22/&#34;&gt;アメリカの電子書籍“ブーム”は今 (カドカワ・ミニッツブック)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;大原 ケイ &lt;/dd&gt;&lt;dd&gt;ブックウォーカー 2014-05-15&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00OK0FKTM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00OK0FKTM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Sleeping Beauty: A Collection of Moco&#39;s Sleeping Postures: モコちゃんの寝姿大全&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00IJ5GMAU/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00IJ5GMAU.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;電子書籍の最新事情が1時間でわかる電子書籍 (All About Books)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0WJTFE/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0WJTFE.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;本は死なない　Ａｍａｚｏｎキンドル開発者が語る「読書の未来」&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00NUFMHR6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00NUFMHR6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ナナのリテラシー２&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00KKCOTRI/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00KKCOTRI.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;電子書籍制作・流通の基礎テキスト&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;『ルポ 電子書籍大国アメリカ』の続編的な位置づけ。2013年米国の出版状況の分析と今後についての予測。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-10-18&#34;&gt;2014/10/18&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4832252836/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ik9zw2iBL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4832252836/baldandersinf-22/&#34;&gt;メェ~探偵フワロ (まんがタイムコミックス)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ナントカ &lt;/dd&gt;&lt;dd&gt;芳文社 2014-04-07&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4832252879/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4832252879.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天国のススメ!  (3) (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4832254626/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4832254626.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ラディカル・ホスピタル (29) (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4832268325/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4832268325.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ヒツジの執事 (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4832252941/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4832252941.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;らいか・デイズ (17) (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4801954758/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4801954758.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;りふじんなふたり 1 (バンブーコミックス)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;ローストビーフをモリモリ食べる（あらゆる意味で）肉食系のヒツジを描けるのはナントカさんしかいない！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-07&#34;&gt;2016-03-07&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:93e8d3d7663bbcd891f56781783b3d10:0&#34;&gt;最近は逢空万太さんの芸風がお気に入りで，彼の本は割と買ってる気がする。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:93e8d3d7663bbcd891f56781783b3d10:0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:93e8d3d7663bbcd891f56781783b3d10:a&#34;&gt;ナントカさん作『メェ～探偵フワロ』より。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:93e8d3d7663bbcd891f56781783b3d10:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:93e8d3d7663bbcd891f56781783b3d10:b&#34;&gt;もちろんそれで売れるかどうかは別問題だけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:93e8d3d7663bbcd891f56781783b3d10:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： 公開鍵暗号の研究者がチューリング賞を受賞 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/06-stories/" />
		<id>tag:text.Baldanders.info,2016-03-06:/remark/2016/03/06-stories/</id>
		<published>2016-03-06T18:20:23+09:00</published>
		<updated>2016-03-06T18:20:23+09:00</updated>
		<summary>公開鍵暗号の研究者がチューリング賞を受賞 / 出版社（者）としての青空文庫と aozorahack / 避難訓練と 3.11 / ユーザが EC に求めること / その他の気になる記事</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;2月は逃げました。
3月ですよ。
年度末ですよ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#dh:6dd43dcd366428dd58640940df53736a&#34;&gt;公開鍵暗号の研究者がチューリング賞を受賞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#aozora:6dd43dcd366428dd58640940df53736a&#34;&gt;出版社（者）としての青空文庫と aozorahack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#risk:6dd43dcd366428dd58640940df53736a&#34;&gt;避難訓練と 3.11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ec:6dd43dcd366428dd58640940df53736a&#34;&gt;ユーザが EC に求めること&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other:6dd43dcd366428dd58640940df53736a&#34;&gt;その他の気になる記事&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;dh:6dd43dcd366428dd58640940df53736a&#34;&gt;公開鍵暗号の研究者がチューリング賞を受賞&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gizmodo.jp/2016/03/Turing_Award_for_public_key_encryption.html&#34;&gt;コンピューティング分野のノーベル賞ことチューリング賞、公開鍵暗号の研究者に与えられる : ギズモード・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「チューリング賞（ACM A. M. Turing Award）」はコンピュータ科学の分野での最高権威の賞と言われている。
この賞に（両氏の名を冠した） “Diffie-Hellman” 暗号方式の発明者である Whitfield Diffie, Martin E. Hellman 両氏が今まで受賞されていなかったことのほうが驚きだが，公開鍵暗号といえば RSA のほうが真っ先に浮かんでしまうからだろうか。
今ごろ受賞というのも政治臭プンプンだが，功績が認められるということはいいことである。&lt;/p&gt;

&lt;p&gt;具体的な論文はこちら。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://www-ee.stanford.edu/~hellman/publications/24.pdf&#34;&gt;New Directions in Cryptography&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;20世紀後半は暗号の暗黒時代とも言われている。
もともと暗号技術は軍事技術の一種として使われることが多かったが，第2次世界大戦の前後から重要性が高まり，国家による統制が激しくなった。
これを変えるきっかけとなったもののひとつが公開鍵暗号である。&lt;/p&gt;

&lt;p&gt;詳しくは Steven Levy さんの『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;』をどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;aozora:6dd43dcd366428dd58640940df53736a&#34;&gt;出版社（者）としての青空文庫と aozorahack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ospn.jp/osc2016-spring/&#34; title=&#34;オープンソースカンファレンス2016 Tokyo/Spring - オープンソースの文化祭！&#34;&gt;OSC Tokyo 2016/Spring&lt;/a&gt; のときの発表資料だそうな。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/itRRJPdUruVE52&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://www.slideshare.net/takahashim/osc-2016-tokyospring-aozorahack&#34;&gt;aozorahackと青空文庫の現状とこれから (OSC 2016 Tokyo/Spring)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この中で青空文庫の出版社（者）的な機能に注目している。
つまり著作権の切れた書籍に対して入力・校正・公開を行うプロセスは出版（publishing）そのものではないかという指摘である。
で，青空文庫の「図書館」機能と「出版」機能を分離することでより多くの人を巻き込むことができるのではないかという提案のようだ。&lt;/p&gt;

&lt;p&gt;具体的には管理用の DB から公開可能なサブセットを公開 DB として使えるようにしたいらしい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://www.slideshare.net/takahashim/osc-2016-tokyospring-aozorahack&#34;&gt;&lt;img src=&#34;https://farm2.staticflickr.com/1473/24920649843_83bff63a6e.jpg&#34; alt=&#34;aozorahackと青空文庫の現状とこれから (OSC 2016 Tokyo/Spring)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://www.slideshare.net/takahashim/osc-2016-tokyospring-aozorahack&#34;&gt;aozorahackと青空文庫の現状とこれから (OSC 2016 Tokyo/Spring)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;多分ファイルも公開可能なものを別にして切り出したほうがいいのだろう（公開していない校正中の作品にはまだ著作権が切れていないものもあるので）。
公開 DB およびファイルにアクセスする API を作れば様々な人が様々なシーンで公有作品を利用できる。
また翻訳作品以外の Free Culture Licenses&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6dd43dcd366428dd58640940df53736a:fcl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6dd43dcd366428dd58640940df53736a:fcl&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; の作品も多く含めることができれば青空文庫の幅が広がるかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;risk:6dd43dcd366428dd58640940df53736a&#34;&gt;避難訓練と 3.11&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://311walk.jp/&#34;&gt;3.11WALK - 3.11は、歩いて帰ろう。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大規模災害は滅多に起こらない。
だから，いざ起きた時，つまり「事後」にどう備えるか。
ただ単に情緒的に 3.11 を思い出すのではなく，これから起きる未来を想定して「避難訓練」をしていくことはとても重要だと思う。&lt;/p&gt;

&lt;p&gt;「想定外を想定する」のは結構難しいが必要なことである。
何事もね。&lt;/p&gt;

&lt;h2 id=&#34;ec:6dd43dcd366428dd58640940df53736a&#34;&gt;ユーザが EC に求めること&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078917/&#34;&gt;PayPalとJECCICAが「EC戦略白書」発表、EC企業と顧客の認識差が浮き彫り - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;ユーザーが中小ECサイトを利用しない理由として、（1）存在が知られていない（44.5%）、（2）会員登録が面倒（34.4％）、（3）商品数の少なさ（25.6％）、（4）セキュリティ面の不安（17.5%）--の順で回答が多かった。商品の少なさやセキュリティよりも、「会員登録が面倒」という理由の方が強いことは注目に値する。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078917/&#34;&gt;PayPalとJECCICAが「EC戦略白書」発表、EC企業と顧客の認識差が浮き彫り&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「会員登録が面倒」というのはよく分かる。
ユーザは「一見客」として来ているのに会員登録を要求されるのはウザいことこの上ない。
問題は，そういうユーザの心理をサービス・プロバイダ側が認識していなかったということだろう。
ユーザを囲い込むことに躍起になって，ユーザのことを全く考えていないという証拠でもある。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この調査結果を踏まえて川連氏は、中小EC企業はユーザーの「囲い込み戦略」を止めるべきだと断言した。国内ECサイトの売上トップ100社のうち会員登録を必須とするサイトは7割。それに対して、米国のECサイト売上トップ100社で会員登録が必須なのは2割程度だ。さらにトップ25社に絞ると、国内21社に対して米国は2社となる。「すでに、グローバルトレンドはゲスト購入に移行しつつある」（川連氏）。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078917/&#34;&gt;PayPalとJECCICAが「EC戦略白書」発表、EC企業と顧客の認識差が浮き彫り&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;似たような発想は実際の店舗でもあって&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/03/01/toreta-pos/&#34;&gt;飲食店の「常連作り」支援に向け、予約台帳のトレタがPOSシステム5社と連携へ | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もう「常連」を囲い込みの道具としか見なしていないことがミエミエの最低マーケティングである。&lt;/p&gt;

&lt;p&gt;POS などのシステムはユーザを「スマート・モブ（smart mob）」と見なし行動追跡しながら保険統計学的に評価する。
近年はやりの「ビッグ・データ（big data）」も同じである。
これはこれで大事な分析だが，そのような視点から「常連」が生まれることはない。&lt;/p&gt;

&lt;p&gt;「固定客」と「常連客」は全くベクトルが違う。
足繁く通っているからといって客側が自身を常連とは認識してないこともあるし（毎朝マックでコーヒーを飲んでるからといって自分がその店の常連だとは思ってないだろう），逆に数年に1度しか来ない「常連客」だっているのだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6dd43dcd366428dd58640940df53736a:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6dd43dcd366428dd58640940df53736a:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;かつての「クーポン」戦略が失敗したのは，ユーザを囲い込んでいるつもりで実は「クーポン」という土俵ですべての店舗が相対評価されてしまっている点である。
ユーザは数多ある「クーポン」の中から一番お得なものを都度選択しているだけで，お店に対する愛着も敬意もない。
ただ「クーポンを使えばお得」という感想が残るだけだ。&lt;/p&gt;

&lt;p&gt;EC も同じこと。
ユーザから見てその店舗に惹きつけられる何かがあれば囲い込む必要はないし，そこで勝負していかなければ結局は「EC」という括りの中で相対評価されるだけで「固定客」にも「常連客」にもならない。&lt;/p&gt;

&lt;h2 id=&#34;other:6dd43dcd366428dd58640940df53736a&#34;&gt;その他の気になる記事&lt;/h2&gt;

&lt;p&gt;あとで個別に記事にするかもしれないが，とりあえずブックマークのみ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/03/02/little-bookstore-in-northern-street/&#34;&gt;北海道のシャッター通りに本屋をつくる « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2016/02/the_importance_.html&#34;&gt;The Importance of Strong Encryption to Security - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20160229_745961.html&#34;&gt;「Ruby」をWindows環境へ簡単導入できる「Rumix 2」が更新。「Ruby 2.2」に対応 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160301_746190.html&#34;&gt;「丸善＆ジュンク堂ネットストア」がネット書店「honto」に統合、hontoでも店舗取り置きサービスが利用可能に -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/TakahikoKawasaki/items/f2a0d25a4f05790b3baa&#34;&gt;OAuth 2.0 + OpenID Connect のフルスクラッチ実装者が知見を語る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/TakahikoKawasaki/items/30fbd546935cea914e4f&#34;&gt;【第二弾】OAuth 2.0 + OpenID Connect のフルスクラッチ実装者が知見を語る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/A-I/items/49bcb56ed977b4fb36ff&#34;&gt;GoTTY 良さそう - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kooshin/items/8c7dbfc9c5e8a88d1705&#34;&gt;GoTTYでブラウザからルータを操作してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:6dd43dcd366428dd58640940df53736a&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6dd43dcd366428dd58640940df53736a:fcl&#34;&gt;&lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/deed.ja&#34;&gt;CC0&lt;/a&gt;, &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/deed.ja&#34;&gt;by&lt;/a&gt;, &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/deed.ja&#34;&gt;by-sa&lt;/a&gt; を合わせて Free Culture Licenses と呼ぶ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6dd43dcd366428dd58640940df53736a:fcl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6dd43dcd366428dd58640940df53736a:a&#34;&gt;広島市は「支店都市」なのでだいたい数年単位で人が入れ替わる。故にわざわざ遠方から来る「滅多に来ない常連客」だっているのである。でも「滅多に来ない常連客」がいるというのは，その店が長く続いている証でもある。繁華街では「2年保てば上出来，3年保てば老舗」と言われるくらいお店の入れ替わりも激しい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6dd43dcd366428dd58640940df53736a:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『数学ガールの秘密ノート／ベクトルの真実』で遊ぶ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/mathgirl-note-vector/" />
		<id>tag:text.Baldanders.info,2016-03-04:/remark/2016/03/mathgirl-note-vector/</id>
		<published>2016-03-04T17:35:38+09:00</published>
		<updated>2016-03-04T17:35:38+09:00</updated>
		<summary>いやぁ，昨年の発売直後に買った（というか予約してた）のに，仕事が忙しかったりプライベートでも色々あってなかなか読み進められなかった。ようやく読み終わったですよ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;いやぁ，昨年の発売直後に買った（というか予約してた）のに，仕事が忙しかったりプライベートでも色々あってなかなか読み進められなかった。
ようやく読み終わったですよ。&lt;/p&gt;

&lt;p&gt;「数学ガールの秘密ノート」シリーズは「読む（read）」というより「遊ぶ（play）」という言葉がふさわしいと思う。
読んでて自然と手が動く。
紙と鉛筆が必須の本（笑）&lt;/p&gt;

&lt;p&gt;今回はミルカさん回かなぁ。
ミルカさんって「才女」という設定で言動もクールなんだけど，今回に限っては「飼い主を引っ張り回す散歩中のワンコ」みたいで面白かった。
「僕」はミルカさんについていけるけど，テトラちゃんは引っ張り回されて大慌てな感じがまた可愛らしい。
そしてユーリちゃんはいつものようにマイペース。&lt;/p&gt;

&lt;p&gt;さて。&lt;/p&gt;

&lt;p&gt;今回は「丸い三角関数」の続編と言えるかもしれない。
「丸い三角関数」で書いた感想は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000685.shtml&#34;&gt;「丸い三角関数」を読む 他 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この時も書いたが，三角関数は空間をイメージしながら考えると楽に理解できる。
「ベクトル」はそういった空間をイメージするのに最適な題材である。
いわゆる実数は1次元空間として理解できるし，実数を1次元空間として理解できれば複素数は平面（2次元）で考えればいいのだから楽勝である。
こうして考えていけば3次元，4次元， &amp;hellip;と図には書けなくなっても数式でイメージできるようになる。
これは人類の素晴らしい叡智のひとつである。&lt;/p&gt;

&lt;p&gt;「ベクトルの真実」を読むと分かるとおり，ベクトルを表すには最低でも次数の数だけパラメータが必要である。
1次元ならひとつ $(x)$，2次元ならふたつ $(x,y)$，3次元なら3つ $(x,y,z)$ といった具合に。
また「向きと大きさ」が分かればいいのだから，2次元ベクトルであれば「$x$ 軸に対する角度」と「大きさ」の2つのパラメータで表すこともできる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8f453491b517a9b5c12a467ba70acae6:pc&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8f453491b517a9b5c12a467ba70acae6:pc&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
いずれにしろ次数の数だけパラメータが必要だ。
しかし例外もある。
星の位置である。&lt;/p&gt;

&lt;p&gt;初等天文学では「天球」という概念を導入する。
「天球」の定義は「観測者を中心とした無限遠の球」である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8f453491b517a9b5c12a467ba70acae6:god&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8f453491b517a9b5c12a467ba70acae6:god&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
夜空の星々はこの「天球」上に存在すると見なすわけだ。
大きさが「無限遠」である点がポイント。
大きさを「無限遠」とすることで，3次元空間にあるはずの天体を2つのパラメータで表せるようになる。
これが赤経と赤緯である。&lt;/p&gt;

&lt;p&gt;私はこの説明を聞いたとき小躍りしたよ。
「無限遠の球」なんて概念が日常生活の中にあるなんて！&lt;/p&gt;

&lt;p&gt;もちろん，実際には天体までの距離は有限である。
それを「天球」に投影&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8f453491b517a9b5c12a467ba70acae6:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8f453491b517a9b5c12a467ba70acae6:s&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; することで太陽系天体の天球上での軌道や恒星観測時の光行差&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8f453491b517a9b5c12a467ba70acae6:aol&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8f453491b517a9b5c12a467ba70acae6:aol&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; とかいった奇天烈なものが見えてくる。
そしてそういったものが観測された時に「それは何故か？」と考えることが科学の始まりである。&lt;/p&gt;

&lt;p&gt;てな感じで，物語を追いかけながら脳みその別の部分で宇宙空間に思いを馳せたりしていた。
いやぁ，楽しい楽しい。&lt;/p&gt;

&lt;p&gt;毎度のことながら。
「数学ガールの秘密ノート」シリーズは数学成分多めで中学生以上を対象にしているが，小学生高学年なら頑張れば理解できるはず。
てか，是非挑戦して欲しい。
前にも書いたが，私が小学生なら「数学ガールの秘密ノート」シリーズは絶好の「夏休みの自由研究」ネタだよ（笑）&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B018VE46YW/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41Oi1m%2Bp3PL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B018VE46YW/baldandersinf-22/&#34;&gt;数学ガールの秘密ノート／ベクトルの真実&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-11-17&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMJ0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMJ0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／整数で遊ぼう&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMIQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMIQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート／式とグラフ&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;図形（具象）と数式（抽象）の往復は楽しい。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-03-04&#34;&gt;2016-03-04&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:8f453491b517a9b5c12a467ba70acae6:pc&#34;&gt;これを「極座標系」と呼ぶ。また座標軸に対する角度を「偏角」，大きさを「動径」と呼ぶ。「ベクトルの真実」ではこれらの名前は出てこなかったが，極座標系の考え方はあちこちに書かれている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8f453491b517a9b5c12a467ba70acae6:pc&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8f453491b517a9b5c12a467ba70acae6:god&#34;&gt;ちなみに神話的には神々は「天球」外側に存在すると考えられている。中世の星座絵が反転してるのは「神の視点」を意識しているからである。3次元の「無限遠の球」の外側に神が居るとか面白すぎる！
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8f453491b517a9b5c12a467ba70acae6:god&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8f453491b517a9b5c12a467ba70acae6:s&#34;&gt;そういえば「ベクトルの真実」でも「ベクトルの影」という言い回しをしてたな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8f453491b517a9b5c12a467ba70acae6:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8f453491b517a9b5c12a467ba70acae6:aol&#34;&gt;光行差が発見されたのは18世紀である。光行差が発見できるほど観測技術が進歩したということでもある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8f453491b517a9b5c12a467ba70acae6:aol&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>SSLv2 を有効にしている TLS 実装の脆弱性 ― 馬も鹿も暗号化する時代のセキュリティ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/vulnerability-cross-protocol-attack-on-tls-using-sslv2/" />
		<id>tag:text.Baldanders.info,2016-03-03:/remark/2016/03/vulnerability-cross-protocol-attack-on-tls-using-sslv2/</id>
		<published>2016-03-03T00:30:52+09:00</published>
		<updated>2016-03-10T22:15:52+09:00</updated>
		<summary>OpenSSL をはじめとする SSL/TLS 暗号通信の実装に複数のセキュリティ脆弱性あり。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;h2 id=&#34;脆弱性の内容:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;脆弱性の内容&lt;/h2&gt;

&lt;p&gt;いい加減 SSL 周りの脆弱性にはうんざりなのだが， &lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;OpenSSL&#34;&gt;OpenSSL&lt;/a&gt; をはじめとする SSL/TLS 暗号通信の実装に複数のセキュリティ脆弱性あり。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;CVE&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;脆弱性内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0800&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cross-protocol attack on TLS using SSLv2 (DROWN)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0705&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Double-free in DSA code&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0798&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Memory leak in SRP database lookups&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0797&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BN_hex2bn/BN_dec2bn NULL pointer deref/heap corruption&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0799&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fix memory issues in BIO_*printf functions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0702&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Side channel attack on modular exponentiation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0703&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Divide-and-conquer session key recovery in SSLv2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CVE-2016-0704&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Bleichenbacher oracle in SSLv2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;このうち特に CVE-2016-0800 のリスクが高いので紹介する。&lt;/p&gt;

&lt;h3 id=&#34;cve-2016-0800-cross-protocol-attack-on-tls-using-sslv2-drown:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;CVE-2016-0800 : Cross-protocol attack on TLS using SSLv2 (DROWN)&lt;/h3&gt;

&lt;p&gt;通称 &lt;a href=&#34;https://drownattack.com/&#34;&gt;DROWN (Decrypting RSA with Obsolete and Weakened eNcryption)&lt;/a&gt; 攻撃。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;A cross-protocol attack was discovered that could lead to decryption of TLS sessions by using a server supporting SSLv2 and EXPORT cipher suites as a Bleichenbacher RSA padding oracle.  Note that traffic between clients and non-vulnerable servers can be decrypted provided another server supporting SSLv2 and EXPORT ciphers (even with a different protocol such as SMTP, IMAP or POP) shares the RSA keys of the non-vulnerable server. This vulnerability is known as DROWN (CVE-2016-0800).&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.openssl.org/news/secadv/20160301.txt&#34;&gt;OpenSSL Security Advisory [1st March 2016]&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;OpenSSL&#34;&gt;OpenSSL&lt;/a&gt; などで SSLv2 を有効にしている場合， SSL を使用していなくても TLS 暗号通信を中間者攻撃で攻略することができるらしい&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6d5bd55434e6d5f7fee9b3b63f7e155a:tls&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6d5bd55434e6d5f7fee9b3b63f7e155a:tls&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
ポイントは SSL サーバのみでなくサーバとネットで繋がっている他のマシンにも影響をおよぼす可能性があることだ。&lt;/p&gt;

&lt;h3 id=&#34;cve-2016-0702-side-channel-attack-on-modular-exponentiation:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;CVE-2016-0702 : Side channel attack on modular exponentiation&lt;/h3&gt;

&lt;p&gt;リスクは低いが， CVE-2016-0702 についても一応紹介しておく。
通称 &lt;a href=&#34;http://ssrg.nicta.com.au/projects/TS/cachebleed/&#34; title=&#34;CacheBleed: A Timing Attack on OpenSSL Constant Time RSA&#34;&gt;CacheBleed&lt;/a&gt; と呼ばれる side-channel 攻撃の一種である。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;A side-channel attack was found which makes use of cache-bank conflicts on the Intel Sandy-Bridge microarchitecture which could lead to the recovery of RSA keys.  The ability to exploit this issue is limited as it relies on an attacker who has control of code in a thread running on the same hyper-threaded core as the victim thread which is performing decryptions.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.openssl.org/news/secadv/20160301.txt&#34;&gt;OpenSSL Security Advisory [1st March 2016]&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;どうもこれ，2013年の GnuPG の脆弱性のバリエーションらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://eprint.iacr.org/2013/448.pdf&#34;&gt;Flush&amp;#43;Reload: a High Resolution, Low Noise, L3 Cache Side-Channel Attack&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; （&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000648.shtml&#34; title=&#34;Flush+Reload: a High Resolution, Low Noise, L3 Cache Side-Channel Attack — Baldanders.info&#34;&gt;当時書いた拙文&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Side-channel 攻撃は成立条件が特殊なので，一般的にリスクは高くない。
CVSSv2 基本評価値は 2.6 (AV:L/AC:H/Au:N/C:P/I:P/A:N) なので，こういう攻略法もあるといった程度に覚えておくといいだろう。&lt;/p&gt;

&lt;h2 id=&#34;影響度-cvss:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;影響度（CVSS）&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CVSSv2 基本評価値 7.1 (AV:N/AC:H/Au:N/C:C/I:C/A:N)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“&lt;a href=&#34;https://www.kb.cert.org/vuls/id/583776&#34;&gt;Vulnerability Note VU#583776 - Network traffic encrypted using RSA-based SSL certificates over SSLv2 may be decrypted by the DROWN attack&lt;/a&gt;” より&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃前の認証要否（Au）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;全面的（C）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;全面的（C）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;CVSSv3 基本評価値 7.4 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://jvn.jp/vu/JVNVU90617353/&#34;&gt;JVNVU#90617353: SSLv2 の暗号通信を解読可能な脆弱性 (DROWN 攻撃)&lt;/a&gt;」より&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;必要な特権レベル（PR）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;ユーザ関与レベル（UI）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;スコープ（S）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;変更なし（U）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;CVSS については&lt;a href=&#34;http://text.baldanders.info/remark/2015/cvss-v3-metrics-in-jvn/&#34;&gt;解説ページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;影響を受ける製品:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;影響を受ける製品&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;OpenSSL 1.0.1r およびそれ以前の 1.0.1 系列&lt;/li&gt;
&lt;li&gt;OpenSSL 1.0.2f およびそれ以前の 1.0.2 系列&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また，このバージョンの &lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;OpenSSL&#34;&gt;OpenSSL&lt;/a&gt; を利用している製品（Apache, Postfix, Nginx 等）も影響を受ける。
なお，公開されているサーバが &lt;a href=&#34;https://drownattack.com/&#34; title=&#34;DROWN Attack&#34;&gt;DROWN&lt;/a&gt; の影響を受けているかどうかテストするサイトがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://test.drownattack.com/&#34;&gt;test.drownattack.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;OpenSSL&#34;&gt;OpenSSL&lt;/a&gt; 以外にも SSLv2 が有効になっている場合は今回の脆弱性の影響を受ける可能性があり，以下の製品・バージョンについて警告されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft IIS (Windows Server) : バージョン 7 以降は既定で SSLv2 が無効化されている&lt;/li&gt;
&lt;li&gt;MNetwork Security Services (NSS) : バージョン 3.13 以降は既定で SSLv2 が無効化されている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LibreSSL は &lt;a href=&#34;https://drownattack.com/&#34; title=&#34;DROWN Attack&#34;&gt;DROWN&lt;/a&gt; の影響を受けないそうだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://undeadly.org/cgi?action=article&amp;amp;sid=20160301141941&amp;amp;mode=expanded&#34;&gt;LibreSSL not affected by DROWN attack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;対策-回避策:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;対策・回避策&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.openssl.org/&#34; title=&#34;OpenSSL&#34;&gt;OpenSSL&lt;/a&gt; に関しては最新バージョンで対策されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenSSL 1.0.1s&lt;/li&gt;
&lt;li&gt;OpenSSL 1.0.2g&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SSL は既に仕様上の脆弱性を抱えており，可能な限り無効にすることをお薦めする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/vuln/ssl_crypt_config.html&#34;&gt;SSL/TLS暗号設定ガイドライン～安全なウェブサイトのために（暗号設定対策編）～：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どうしても SSLv2 を有効にしなければならない場合，証明書を分けて，他のプロトコルと共用しないようにすること。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://drownattack.com/&#34;&gt;DROWN (Decrypting RSA with Obsolete and Weakened eNcryption)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.openssl.org/news/secadv/20160301.txt&#34;&gt;OpenSSL Security Advisory [1st March 2016]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kb.cert.org/vuls/id/583776&#34;&gt;Vulnerability Note VU#583776 - Network traffic encrypted using RSA-based SSL certificates over SSLv2 may be decrypted by the DROWN attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU90617353/&#34;&gt;JVNVU#90617353: SSLv2 の暗号通信を解読可能な脆弱性 (DROWN 攻撃)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/at/2016/at160010.html&#34;&gt;OpenSSL の複数の脆弱性に関する注意喚起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20160301/1456849603&#34;&gt;OpenSSLの脆弱性CVE-2016-800(DROWN)やCVE-2016-0702(CacheBleed)についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gigazine.net/news/20160302-drown-attack/&#34;&gt;SSLの脆弱性で日本の大手サイトを含む全世界1100万以上のHTTPSサイトが攻撃を受け得ると判明 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078777/&#34;&gt;HTTPSサイトの3割に影響する「DROWN」脆弱性見つかる&amp;ndash;OpenSSLはパッチ公開 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1603/02/news065.html&#34;&gt;「DROWN攻撃」の脆弱性が発覚，HTTPSサイトの33％に影響 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/blog/vulnerability/february-2016-security-releases/&#34;&gt;February 2016 Security Release Summary | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cryptographyengineering.com/2016/03/attack-of-week-drown.html&#34;&gt;A Few Thoughts on Cryptographic Engineering: Attack of the week: DROWN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://arstechnica.com/security/2016/03/more-than-13-million-https-websites-imperiled-by-new-decryption-attack/&#34;&gt;More than 11 million HTTPS websites imperiled by new decryption attack | Ars Technica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tsukamoto/items/9a5242e39e255fdc194b&#34;&gt;VMware製品へのDROWN脆弱性の影響情報 - Qiita&lt;/a&gt; : VMware 製品には影響はないそうだ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;余談-馬も鹿も暗号化する時代のセキュリティ:6d5bd55434e6d5f7fee9b3b63f7e155a&#34;&gt;【余談】 馬も鹿も暗号化する時代のセキュリティ&lt;/h2&gt;

&lt;p&gt;一千万規模か。
意外と少ないな。
まぁ2014年に大騒ぎになった SSL 関連の脆弱性のおかげで SSL を無効にしたところも多かろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/announce/20141017-ssl.html&#34;&gt;更新：SSL 3.0 の脆弱性対策について(CVE-2014-3566)：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SSL を無効に出来ないサイトの多くは古い PC やケータイを考慮しているのだろうけど，もう考慮の余地はないと思う。
セキュリティを気にせざるを得ない他のユーザに迷惑をかけるからだ。&lt;/p&gt;

&lt;p&gt;Web サイトを全て暗号化すべきという意見があって，セキュリティ専門家でも賛同者が多いが，私は懐疑的だ。
現在はセキュリティ要件が2,3年単位で変化し追従できないサービスやユーザも多い。
問題なのは，サイトが乗っ取らるなどして，暗号通信下で malware の活動を許してしまうことで，セキュリティ管理のいい加減なサービスが暗号通信を行うのはむしろ有害とさえ言える。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://news.mynavi.jp/news/2016/03/01/106/&#34;&gt;SSL VPNの9割がセキュリティ対策が不十分な状況 | マイナビニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160229_745799.html&#34;&gt;総SSL通信化時代のセキュリティ死角、F5ネットワークスが解説 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35078634/&#34;&gt;サイバー攻撃を認識するまで平均2カ月かかる&amp;ndash;CIO意識調査 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今だに SSLv2 や SSLv3 を有効にしているサイトがあるというのなら，そのサイトはセキュリティ上は全く信用できないと断言していいと思う。
脆弱な暗号通信を使うくらいなら，いっそ暗号化していない限定機能の HTTP サイトを用意して古いマシンのユーザは（安全でないことを警告したうえで）そちらに誘導する方がよい。
個人的な感覚では Web サービス全体の &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; 程度が暗号化できていれば充分だと思う。&lt;/p&gt;

&lt;p&gt;馬も鹿も暗号化するこの時代。
国家や企業の戯れ言に耳を貸す気はないが，それが本当は何を守ってるのか，そろそろ真面目に考えないといけないのではないのだろうか。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6d5bd55434e6d5f7fee9b3b63f7e155a:tls&#34;&gt;TLS と SSLv3 で同じ証明書を使用している場合。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6d5bd55434e6d5f7fee9b3b63f7e155a:tls&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/gcc-msys2-3/" />
		<id>tag:text.Baldanders.info,2016-03-01:/remark/2016/03/gcc-msys2-3/</id>
		<published>2016-03-01T22:02:47+09:00</published>
		<updated>2016-03-08T13:57:12+09:00</updated>
		<summary>前回で gcc を導入できたので，実際にビルドを試してみる。今回はターゲットとして pgpdump を用いる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 のインストールから初期化処理まで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;gcc パッケージ群の導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34;&gt;pgpdump をビルドする&lt;/a&gt; （← イマココ）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;前回&lt;/a&gt;で gcc を導入できたので，実際にビルドを試してみる。
今回はターゲットとして &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; を用いる。&lt;/p&gt;

&lt;h2 id=&#34;pgpdump:c509a9983168e49e64441034797bfe05&#34;&gt;pgpdump&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; は山本和彦さんによる &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;OpenPGP&lt;/a&gt; パケットの&lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/ja/&#34;&gt;視覚化ツール&lt;/a&gt;。
ソースコードは &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;GitHub で公開&lt;/a&gt;されているが， UNIX 系のプラットフォームを前提に作られているため &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 上でビルドを行う。&lt;/p&gt;

&lt;p&gt;まずは &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; のソースコードをダウンロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git clone https://github.com/kazu-yamamoto/pgpdump.git
Cloning into &#39;pgpdump&#39;...
remote: Counting objects: 492, done.
Receiving objects:  59% (291remote: Total 492 (delta 0), reused 0 (delta 0), pack-reused 492 92
Receiving objects: 100% (492/492), 180.29 KiB | 0 bytes/s, done.
Resolving deltas: 100% (320/320), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;32bit-版のビルド:c509a9983168e49e64441034797bfe05&#34;&gt;32bit 版のビルド&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; のビルド手順は &lt;code&gt;configure&lt;/code&gt; を実行した後 make を実行する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c509a9983168e49e64441034797bfe05:conf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c509a9983168e49e64441034797bfe05:conf&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
まずは何も考えずに &lt;code&gt;configure&lt;/code&gt; の実行してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cd pgpdump/

$ ./configure
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for inflate in -lz... yes
checking for BZ2_bzBuffToBuffDecompress in -lbz2... yes
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for unistd.h... (cached) yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking unixlib/local.h usability... no
checking unixlib/local.h presence... no
checking for unixlib/local.h... no
checking whether time.h and sys/time.h may both be included... yes
checking whether struct tm is in sys/time.h or time.h... time.h
checking for struct tm.tm_zone... no
checking whether tzname is declared... yes
checking for tzname... yes
configure: creating ./config.status
config.status: creating Makefile
config.status: WARNING:  &#39;Makefile.in&#39; seems to ignore the --datarootdir setting
config.status: creating config.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; ではパケット内の圧縮データを扱うため &lt;code&gt;libz&lt;/code&gt; および &lt;code&gt;libbz2&lt;/code&gt; が必要となるが，ちゃんと認識しているようだ。
これによって作成された &lt;code&gt;Makefile&lt;/code&gt; がこれ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;prefix = /usr/local
exec_prefix = ${prefix}
bindir = ${exec_prefix}/bin
mandir = ${prefix}/share/man
LIBS = -lbz2 -lz
CFLAGS  = -g -O2 -O -Wall
LDFLAGS =
VERSION = `git tag | tail -1 | sed -e &#39;s/v//&#39;`

RM = rm -f
INSTALL  = install

INCS = pgpdump.h
SRCS = pgpdump.c types.c tagfuncs.c packet.c subfunc.c signature.c keys.c \
       buffer.c uatfunc.c
OBJS = pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o \
       buffer.o uatfunc.o
PROG = pgpdump

MAN  = pgpdump.1

CNF = config.h config.status config.cache config.log
MKF = Makefile

.c.o:
	$(CC) -c $(CFLAGS) $&amp;lt;

all: $(PROG)

$(PROG): $(OBJS)
	$(CC) $(CFLAGS) -o $(PROG) $(OBJS) $(LIBS) $(LDFLAGS)

clean:
	$(RM) $(OBJS) $(PROG)

distclean:
	$(RM) $(OBJS) $(PROG) $(CNF) $(MKF)

install: all
	$(INSTALL) -d $(DESTDIR)$(bindir)
	$(INSTALL) -cp -pm755 $(PROG) $(DESTDIR)$(bindir)
	$(INSTALL) -d $(DESTDIR)$(mandir)/man1
	$(INSTALL) -cp -pm644 $(MAN) $(DESTDIR)$(mandir)/man1

archive:
	git archive master -o ~/pgpdump-$(VERSION).tar --prefix=pgpdump-$(VERSION)/
	gzip ~/pgpdump-$(VERSION).tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この時点での問題は以下のとおり。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; が &lt;code&gt;/usr/local&lt;/code&gt; になっている。このままでもエラーにはならないが，今回は 32bit 版と 64bit 版を分けたいので &lt;code&gt;/mingw32&lt;/code&gt; としたい&lt;/li&gt;
&lt;li&gt;リンク時のオプション（&lt;code&gt;LDFLAGS&lt;/code&gt;）に &lt;code&gt;-static&lt;/code&gt; がないため，このままビルドすると DLL に依存する構成になってしまう&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これらについては &lt;code&gt;configure&lt;/code&gt; に情報を渡せばよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ ./configure --prefix=/mingw32 LDFLAGS=-static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;Makefile&lt;/code&gt; は以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;prefix = /mingw32
exec_prefix = ${prefix}
bindir = ${exec_prefix}/bin
mandir = ${prefix}/share/man
LIBS = -lbz2 -lz
CFLAGS  = -g -O2 -O -Wall
LDFLAGS = -static
VERSION = `git tag | tail -1 | sed -e &#39;s/v//&#39;`

RM = rm -f
INSTALL  = install

INCS = pgpdump.h
SRCS = pgpdump.c types.c tagfuncs.c packet.c subfunc.c signature.c keys.c \
       buffer.c uatfunc.c
OBJS = pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o \
       buffer.o uatfunc.o
PROG = pgpdump

MAN  = pgpdump.1

CNF = config.h config.status config.cache config.log
MKF = Makefile

.c.o:
	$(CC) -c $(CFLAGS) $&amp;lt;

all: $(PROG)

$(PROG): $(OBJS)
	$(CC) $(CFLAGS) -o $(PROG) $(OBJS) $(LIBS) $(LDFLAGS)

clean:
	$(RM) $(OBJS) $(PROG)

distclean:
	$(RM) $(OBJS) $(PROG) $(CNF) $(MKF)

install: all
	$(INSTALL) -d $(DESTDIR)$(bindir)
	$(INSTALL) -cp -pm755 $(PROG) $(DESTDIR)$(bindir)
	$(INSTALL) -d $(DESTDIR)$(mandir)/man1
	$(INSTALL) -cp -pm644 $(MAN) $(DESTDIR)$(mandir)/man1

archive:
	git archive master -o ~/pgpdump-$(VERSION).tar --prefix=pgpdump-$(VERSION)/
	gzip ~/pgpdump-$(VERSION).tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では make を実行しよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ make
cc -c -g -O2 -O -Wall pgpdump.c
cc -c -g -O2 -O -Wall types.c
cc -c -g -O2 -O -Wall tagfuncs.c
cc -c -g -O2 -O -Wall packet.c
cc -c -g -O2 -O -Wall subfunc.c
cc -c -g -O2 -O -Wall signature.c
cc -c -g -O2 -O -Wall keys.c
cc -c -g -O2 -O -Wall buffer.c
cc -c -g -O2 -O -Wall uatfunc.c
cc -g -O2 -O -Wall -o pgpdump pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o buffer.o uatfunc.o -lbz2 -lz  -static

$ strip pgpdump.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;できた実行ファイルをコマンドプロンプトから起動してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;pgpdump.exe -v
pgpdump.exe version 0.29, Copyright (C) 1998-2014 Kazu Yamamoto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うまくいったようである。&lt;/p&gt;

&lt;h2 id=&#34;64bit-版のビルド:c509a9983168e49e64441034797bfe05&#34;&gt;64bit 版のビルド&lt;/h2&gt;

&lt;p&gt;32bit 版で要領は分かったので一気に終わらせてしまおう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git clone https://github.com/kazu-yamamoto/pgpdump.git
Cloning into &#39;pgpdump&#39;...
remote: Counting objects: 492, done.
Receiving objects:  62% (306remote: Total 492 (delta 0), reused 0 (delta 0), pack-reused 492/92
Receiving objects: 100% (492/492), 180.29 KiB | 0 bytes/s, done.
Resolving deltas: 100% (320/320), done.
Checking connectivity... done.

$ cd pgpdump/

$ ./configure --prefix=/mingw64 LDFLAGS=-static
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.exe
checking for suffix of executables... .exe
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for inflate in -lz... yes
checking for BZ2_bzBuffToBuffDecompress in -lbz2... yes
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for unistd.h... (cached) yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking unixlib/local.h usability... no
checking unixlib/local.h presence... no
checking for unixlib/local.h... no
checking whether time.h and sys/time.h may both be included... yes
checking whether struct tm is in sys/time.h or time.h... time.h
checking for struct tm.tm_zone... no
checking whether tzname is declared... yes
checking for tzname... yes
configure: creating ./config.status
config.status: creating Makefile
config.status: WARNING:  &#39;Makefile.in&#39; seems to ignore the --datarootdir setting
config.status: creating config.h

$ make
cc -c -g -O2 -O -Wall pgpdump.c
cc -c -g -O2 -O -Wall types.c
cc -c -g -O2 -O -Wall tagfuncs.c
cc -c -g -O2 -O -Wall packet.c
cc -c -g -O2 -O -Wall subfunc.c
cc -c -g -O2 -O -Wall signature.c
cc -c -g -O2 -O -Wall keys.c
cc -c -g -O2 -O -Wall buffer.c
cc -c -g -O2 -O -Wall uatfunc.c
cc -g -O2 -O -Wall -o pgpdump pgpdump.o types.o tagfuncs.o packet.o subfunc.o signature.o keys.o buffer.o uatfunc.o -lbz2 -lz  -static

$ strip pgpdump.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これもコマンドプロンプト上で起動してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;pgpdump.exe -v
pgpdump.exe version 0.29, Copyright (C) 1998-2014 Kazu Yamamoto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;問題なし。&lt;/p&gt;

&lt;h2 id=&#34;動作確認:c509a9983168e49e64441034797bfe05&#34;&gt;動作確認&lt;/h2&gt;

&lt;p&gt;実際にちゃんと動くかどうか &lt;a href=&#34;https://www.jpcert.or.jp/jpcert-pgp.html&#34; title=&#34;JPCERT コーディネーションセンター PGP公開鍵&#34;&gt;JPCERT/CC の公開鍵&lt;/a&gt;をを使って確認してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;C:&amp;gt;pgpdump.exe info-0x69ECE048.asc
Old: Public Key Packet(tag 6)(269 bytes)
        Ver 4 - new
        Public key creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Pub alg - RSA Encrypt or Sign(pub 1)
        RSA n(2048 bits) - ...
        RSA e(17 bits) - ...
Old: User ID Packet(tag 13)(29 bytes)
        User ID - JPCERT/CC &amp;lt;info@jpcert.or.jp&amp;gt;
Old: Signature Packet(tag 2)(316 bytes)
        Ver 4 - new
        Sig type - Generic certification of a User ID and Public Key packet(0x10).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: preferred symmetric algorithms(sub 11)(3 bytes)
                Sym alg - AES with 256-bit key(sym 9)
                Sym alg - CAST5(sym 3)
                Sym alg - Triple-DES(sym 2)
        Hashed Sub: key server preferences(sub 23)(4 bytes)
                Flag - No-modify
        Hashed Sub: key flags(sub 27)(4 bytes)
                Flag - This key may be used to certify other keys
                Flag - This key may be used to sign data
                Flag - This key may be used to encrypt communications
                Flag - This key may be used to encrypt storage
                Flag - The private component of this key may be in the possession of more than one person
        Hashed Sub: preferred compression algorithms(sub 22)(2 bytes)
                Comp alg - ZLIB &amp;lt;RFC1950&amp;gt;(comp 2)
                Comp alg - ZIP &amp;lt;RFC1951&amp;gt;(comp 1)
        Hashed Sub: features(sub 30)(4 bytes)
                Flag - Modification detection (packets 18 and 19)
        Hashed Sub: preferred hash algorithms(sub 21)(3 bytes)
                Hash alg - SHA256(hash 8)
                Hash alg - SHA384(hash 9)
                Hash alg - SHA512(hash 10)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 16 12:51:22 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x317D97A469ECE048
        Hash left 2 bytes - cd 79
        RSA m^d mod n(2047 bits) - ...
                -&amp;gt; PKCS-1
Old: Signature Packet(tag 2)(277 bytes)
        Ver 3 - old
        Hash material(5 bytes):
                Sig type - Generic certification of a User ID and Public Key packet(0x10).
                Creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Key ID - 0xE7734FA60C7BDE12
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hash left 2 bytes - e9 53
        RSA m^d mod n(2047 bits) - ...
                -&amp;gt; PKCS-1
Old: Signature Packet(tag 2)(156 bytes)
        Ver 4 - new
        Sig type - Generic certification of a User ID and Public Key packet(0x10).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Mon Jun 15 14:51:27 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x8C756B2E2C94D4ED
        Hash left 2 bytes - 35 fd
        RSA m^d mod n(1022 bits) - ...
                -&amp;gt; PKCS-1
Old: Public Subkey Packet(tag 14)(269 bytes)
        Ver 4 - new
        Public key creation time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Pub alg - RSA Encrypt or Sign(pub 1)
        RSA n(2048 bits) - ...
        RSA e(17 bits) - ...
Old: Signature Packet(tag 2)(577 bytes)
        Ver 4 - new
        Sig type - Subkey Binding Signature(0x18).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA1(hash 2)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 02 14:43:58 東京 (標準時) 2009
        Hashed Sub: key flags(sub 27)(4 bytes)
                Flag - This key may be used to encrypt communications
                Flag - This key may be used to encrypt storage
        Hashed Sub: embedded signature(sub 32)(284 bytes)
        Ver 4 - new
        Sig type - Primary Key Binding Signature(0x19).
        Pub alg - RSA Encrypt or Sign(pub 1)
        Hash alg - SHA256(hash 8)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Tue Jun 02 14:43:57 東京 (標準時) 2009
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x09D704B753BA1622
        Hash left 2 bytes - 71 2d
        RSA m^d mod n(2048 bits) - ...
                -&amp;gt; PKCS-1
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x317D97A469ECE048
        Hash left 2 bytes - 1d e2
        RSA m^d mod n(2046 bits) - ...
                -&amp;gt; PKCS-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うむ，問題ないようだな。
ちなみに Windows バイナリは&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/pgpdump/&#34;&gt;うちのサイトでも公開&lt;/a&gt;しているのでご自由にどうぞ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c509a9983168e49e64441034797bfe05:conf&#34;&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入&#34;&gt;前回&lt;/a&gt;インストールした &lt;code&gt;base-devel&lt;/code&gt; パッケージグループは今回の &lt;a href=&#34;https://github.com/kazu-yamamoto/pgpdump&#34; title=&#34;kazu-yamamoto/pgpdump: A PGP packet visualizer&#34;&gt;pgpdump&lt;/a&gt; ビルドには必要なく，インストールしなくても問題ない。まぁ今回は単純なビルドだし。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c509a9983168e49e64441034797bfe05:conf&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>MSYS2 による gcc 開発環境の構築 ― gcc パッケージ群の導入 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/03/gcc-msys2-2/" />
		<id>tag:text.Baldanders.info,2016-03-01:/remark/2016/03/gcc-msys2-2/</id>
		<published>2016-03-01T22:02:44+09:00</published>
		<updated>2016-03-08T13:57:12+09:00</updated>
		<summary>いよいよ gcc をインストールする。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34;&gt;MSYS2 のインストールから初期化処理まで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-2/&#34;&gt;gcc パッケージ群の導入&lt;/a&gt; （← イマココ）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34;&gt;pgpdump をビルドする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;いよいよ gcc をインストールする。
その前に&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;pacman-によるパッケージ管理:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;pacman によるパッケージ管理&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;の初期化でもちょっとだけ出てきたが， &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のパッケージ管理には pacman コマンドを使う。
pacman は元々 Arch Linux のパッケージ管理ツールで，使い方もこれと同じようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://archlinuxjp.kusakata.com/wiki/Pacman&#34;&gt;pacman - ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;よく使うコマンドとしては&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;コマンドライン&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;処理内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -S &amp;lt;package_name1&amp;gt; [package_name2...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定したパッケージをインストールする&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Sl [repository]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;パッケージを一覧表示する（リポジトリを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Ss [regex...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;パッケージを一覧・検索する（キーワードを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Su&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;インストール済みのパッケージを更新する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Sy&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;パッケージのデータベースを更新する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Syu&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;-Su&lt;/code&gt;, &lt;code&gt;-Sy&lt;/code&gt; の同時指定&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Q [package_name...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;インストール済みパッケージを一覧・検索する（パッケージを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Qs [regex...]&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;インストール済みパッケージを一覧・検索する（をキーワードを指定可能）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -R &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定したパッケージを削除する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;pacman -Rs &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;依存関係を含めて指定したパッケージを削除する（指定したパッケージにのみ依存するパッケージを削除）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;あたりか。
試しに git をインストールしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman -S git
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (34) db-5.3.28-2  expat-2.1.0-2  gdbm-1.11-3  heimdal-1.5.3-8  libgdbm-1.11-3
                openssh-7.1p2-1  perl-5.22.0-2  perl-Authen-SASL-2.16-2  perl-Convert-BinHex-1.123-2
                perl-Encode-Locale-1.04-1  perl-Error-0.17024-1  perl-File-Listing-6.04-2
                perl-HTML-Parser-3.71-3  perl-HTML-Tagset-3.20-2  perl-HTTP-Cookies-6.01-2
                perl-HTTP-Daemon-6.01-2  perl-HTTP-Date-6.02-2  perl-HTTP-Message-6.06-2
                perl-HTTP-Negotiate-6.01-2  perl-IO-Socket-SSL-2.016-1  perl-IO-stringy-2.111-1
                perl-LWP-MediaTypes-6.02-2  perl-MIME-tools-5.506-1  perl-MailTools-2.14-1
                perl-Net-HTTP-6.09-1  perl-Net-SMTP-SSL-1.02-1  perl-Net-SSLeay-1.70-1
                perl-TermReadKey-2.33-1  perl-TimeDate-2.30-2  perl-URI-1.68-1
                perl-WWW-RobotRules-6.02-2  perl-libwww-6.13-1  vim-7.4.1415-2  git-2.7.1-1

合計ダウンロード容量:   24.75 MiB
合計インストール容量:  114.53 MiB

:: インストールを行いますか？ [Y/n] y
:: パッケージを取得します...
 expat-2.1.0-2-x86_64                                  13.1 KiB  12.8M/s 00:00 [##################] 100%
 vim-7.4.1415-2-x86_64                                  6.1 MiB  1217K/s 00:05 [##################] 100%
 heimdal-1.5.3-8-x86_64                               543.7 KiB   824K/s 00:01 [##################] 100%
 openssh-7.1p2-1-x86_64                               653.4 KiB   312K/s 00:02 [##################] 100%
 db-5.3.28-2-x86_64                                    41.7 KiB  10.2M/s 00:00 [##################] 100%
 libgdbm-1.11-3-x86_64                                 20.4 KiB  9.94M/s 00:00 [##################] 100%
 gdbm-1.11-3-x86_64                                   108.5 KiB   682K/s 00:00 [##################] 100%
 perl-5.22.0-2-x86_64                                  12.4 MiB  1170K/s 00:11 [##################] 100%
 perl-Error-0.17024-1-any                              17.1 KiB  8.33M/s 00:00 [##################] 100%
 perl-Authen-SASL-2.16-2-any                           42.4 KiB  8.28M/s 00:00 [##################] 100%
 perl-Encode-Locale-1.04-1-any                          9.7 KiB  9.46M/s 00:00 [##################] 100%
 perl-HTTP-Date-6.02-2-any                              8.6 KiB  8.42M/s 00:00 [##################] 100%
 perl-File-Listing-6.04-2-any                           7.7 KiB  0.00B/s 00:00 [##################] 100%
 perl-HTML-Tagset-3.20-2-any                           10.3 KiB  10.0M/s 00:00 [##################] 100%
 perl-HTML-Parser-3.71-3-x86_64                        76.9 KiB  10.7M/s 00:00 [##################] 100%
 perl-LWP-MediaTypes-6.02-2-any                        18.0 KiB  8.81M/s 00:00 [##################] 100%
 perl-URI-1.68-1-any                                   75.6 KiB  9.22M/s 00:00 [##################] 100%
 perl-HTTP-Message-6.06-2-any                          71.3 KiB  9.94M/s 00:00 [##################] 100%
 perl-HTTP-Cookies-6.01-2-any                          20.4 KiB  20.0M/s 00:00 [##################] 100%
 perl-HTTP-Daemon-6.01-2-any                           14.2 KiB  0.00B/s 00:00 [##################] 100%
 perl-HTTP-Negotiate-6.01-2-any                        11.4 KiB  0.00B/s 00:00 [##################] 100%
 perl-Net-HTTP-6.09-1-any                              19.8 KiB  19.3M/s 00:00 [##################] 100%
 perl-WWW-RobotRules-6.02-2-any                        12.2 KiB  12.0M/s 00:00 [##################] 100%
 perl-libwww-6.13-1-any                               122.2 KiB   367K/s 00:00 [##################] 100%
 perl-TimeDate-2.30-2-any                              35.9 KiB  8.77M/s 00:00 [##################] 100%
 perl-MailTools-2.14-1-any                             58.4 KiB  9.50M/s 00:00 [##################] 100%
 perl-IO-stringy-2.111-1-any                           52.6 KiB  10.3M/s 00:00 [##################] 100%
 perl-Convert-BinHex-1.123-2-any                       30.1 KiB  9.79M/s 00:00 [##################] 100%
 perl-MIME-tools-5.506-1-any                          180.4 KiB   367K/s 00:00 [##################] 100%
 perl-Net-SSLeay-1.70-1-x86_64                        191.2 KiB   590K/s 00:00 [##################] 100%
 perl-IO-Socket-SSL-2.016-1-any                       112.5 KiB   208K/s 00:01 [##################] 100%
 perl-Net-SMTP-SSL-1.02-1-any                           3.5 KiB  22.2K/s 00:00 [##################] 100%
 perl-TermReadKey-2.33-1-x86_64                        20.9 KiB  18.7K/s 00:01 [##################] 100%
 git-2.7.1-1-x86_64                                     3.6 MiB   448K/s 00:08 [##################] 100%
(34/34) キーリングのキーを確認                                                 [##################] 100%
(34/34) パッケージの整合性をチェック                                           [##################] 100%
(34/34) パッケージファイルのロード                                             [##################] 100%
(34/34) ファイルの衝突をチェック                                               [##################] 100%
(34/34) 空き容量を確認                                                         [##################] 100%
:: パッケージの変更を処理しています...
( 1/34) インストール expat                                                     [##################] 100%
( 2/34) インストール vim                                                       [##################] 100%
( 3/34) インストール heimdal                                                   [##################] 100%
( 4/34) インストール openssh                                                   [##################] 100%
( 5/34) インストール db                                                        [##################] 100%
( 6/34) インストール libgdbm                                                   [##################] 100%
( 7/34) インストール gdbm                                                      [##################] 100%
( 8/34) インストール perl                                                      [##################] 100%
( 9/34) インストール perl-Error                                                [##################] 100%
(10/34) インストール perl-Authen-SASL                                          [##################] 100%
(11/34) インストール perl-Encode-Locale                                        [##################] 100%
(12/34) インストール perl-HTTP-Date                                            [##################] 100%
(13/34) インストール perl-File-Listing                                         [##################] 100%
(14/34) インストール perl-HTML-Tagset                                          [##################] 100%
(15/34) インストール perl-HTML-Parser                                          [##################] 100%
(16/34) インストール perl-LWP-MediaTypes                                       [##################] 100%
(17/34) インストール perl-URI                                                  [##################] 100%
(18/34) インストール perl-HTTP-Message                                         [##################] 100%
(19/34) インストール perl-HTTP-Cookies                                         [##################] 100%
(20/34) インストール perl-HTTP-Daemon                                          [##################] 100%
(21/34) インストール perl-HTTP-Negotiate                                       [##################] 100%
(22/34) インストール perl-Net-HTTP                                             [##################] 100%
(23/34) インストール perl-WWW-RobotRules                                       [##################] 100%
(24/34) インストール perl-libwww                                               [##################] 100%
perl-libwww の提案パッケージ
    perl-LWP-Protocol-HTTPS: for https:// url schemes
(25/34) インストール perl-TimeDate                                             [##################] 100%
(26/34) インストール perl-MailTools                                            [##################] 100%
(27/34) インストール perl-IO-stringy                                           [##################] 100%
(28/34) インストール perl-Convert-BinHex                                       [##################] 100%
module test... pass.
(29/34) インストール perl-MIME-tools                                           [##################] 100%
(30/34) インストール perl-Net-SSLeay                                           [##################] 100%
(31/34) インストール perl-IO-Socket-SSL                                        [##################] 100%
(32/34) インストール perl-Net-SMTP-SSL                                         [##################] 100%
(33/34) インストール perl-TermReadKey                                          [##################] 100%
(34/34) インストール git                                                       [##################] 100%
git の提案パッケージ
    python2: various helper scripts
    subversion: git svn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てか，本当に最小限しか入ってないんだな（笑） 提案パッケージについては，とりあえずスルーする。&lt;/p&gt;

&lt;h3 id=&#34;msys2-のリポジトリ:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;MSYS2 のリポジトリ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/etc/pacman.conf&lt;/code&gt; を見ると MSYS2 では &lt;code&gt;mingw32&lt;/code&gt;, &lt;code&gt;mingw64&lt;/code&gt;, &lt;code&gt;msys&lt;/code&gt; の3つのリポジトリを管理していることが分かる。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;リポジトリ名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;参照ファイル&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;mingw32&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.mingw32&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;mingw64&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.mingw64&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;msys&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;/etc/pacman.d/mirrorlist.msys&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;実際には「参照ファイル」にリポジトリへの URI が書かれている。
たとえば &lt;code&gt;/etc/pacman.d/mirrorlist.mingw32&lt;/code&gt; ならこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;##
## 32-bit Mingw-w64 repository mirrorlist
##

## Primary
## msys2.org
Server = http://repo.msys2.org/mingw/i686
Server = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686
Server = http://www2.futureware.at/~nickoe/msys2-mirror/i686/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では実際にリポジトリの中を覗いてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman -Sl | grep gcc
mingw32 mingw-w64-i686-gcc 5.3.0-2
mingw32 mingw-w64-i686-gcc-ada 5.3.0-2
mingw32 mingw-w64-i686-gcc-fortran 5.3.0-2
mingw32 mingw-w64-i686-gcc-libgfortran 5.3.0-2
mingw32 mingw-w64-i686-gcc-libs 5.3.0-2
mingw32 mingw-w64-i686-gcc-objc 5.3.0-2
mingw64 mingw-w64-x86_64-gcc 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-ada 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-fortran 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-libgfortran 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-libs 5.3.0-2
mingw64 mingw-w64-x86_64-gcc-objc 5.3.0-2
msys gcc 4.9.2-6
msys gcc-fortran 4.9.2-6
msys gcc-libs 4.9.2-6 [インストール済み]
msys mingw-w64-cross-gcc 4.9.2-3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どれを使うかはユーザ次第だが，今回は &lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; 内ではなく Windows 環境で動作するアプリケーションを作りたいので， &lt;code&gt;mingw32&lt;/code&gt; および &lt;code&gt;mingw64&lt;/code&gt; リポジトリのものを導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/chromabox/items/fd07bad3f426101fc4a6&#34;&gt;Windowsでgccなどを利用できるMSYS2の環境設定など - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gcc-のインストール:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;gcc のインストール&lt;/h2&gt;

&lt;p&gt;では gcc のインストールを始めよう。
今回は以下のパッケージグループを導入する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingw-w64-i686-toolchain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingw-w64-x86_64-toolchain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ものすごく分かりにくいが &lt;code&gt;mingw-w64-x86_64-toolchain&lt;/code&gt; が 64bit 用である。
ログがかなり長くなるがご容赦。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ pacman -S base-devel mingw-w64-i686-toolchain mingw-w64-x86_64-toolchain
:: 51 のパッケージがグループ base-devel にあります:
:: リポジトリ msys
   1) asciidoc  2) autoconf  3) autoconf2.13  4) autogen  5) automake-wrapper  6) automake1.10
   7) automake1.11  8) automake1.12  9) automake1.13  10) automake1.14  11) automake1.15
   12) automake1.6  13) automake1.7  14) automake1.8  15) automake1.9  16) bison  17) diffstat
   18) diffutils  19) dos2unix  20) file  21) flex  22) gawk  23) gdb  24) gettext  25) gperf
   26) grep  27) groff  28) help2man  29) intltool  30) lemon  31) libtool  32) libunrar  33) m4
   34) make  35) man-db  36) pacman  37) patch  38) patchutils  39) perl  40) pkg-config  41) pkgfile
   42) rcs  43) scons  44) sed  45) swig  46) texinfo  47) texinfo-tex  48) ttyrec  49) unrar
   50) wget  51) xmlto

選択して下さい (デフォルト=all):
警告: file-5.25-1 は最新です -- 再インストール
警告: flex-2.6.0-1 は最新です -- 再インストール
警告: gawk-4.1.3-1 は最新です -- 再インストール
警告: gettext-0.19.6-1 は最新です -- 再インストール
警告: grep-2.22-1 は最新です -- 再インストール
警告: m4-1.4.17-4 は最新です -- 再インストール
警告: pacman-5.0.1.6388.dcb2397-1 は最新です -- 再インストール
警告: perl-5.22.0-2 は最新です -- 再インストール
警告: pkgfile-15-1 は最新です -- 再インストール
警告: sed-4.2.2-2 は最新です -- 再インストール
:: 16 のパッケージがグループ mingw-w64-i686-toolchain にあります:
:: リポジトリ mingw32
   1) mingw-w64-i686-binutils  2) mingw-w64-i686-crt-git  3) mingw-w64-i686-gcc
   4) mingw-w64-i686-gcc-ada  5) mingw-w64-i686-gcc-fortran  6) mingw-w64-i686-gcc-libgfortran
   7) mingw-w64-i686-gcc-libs  8) mingw-w64-i686-gcc-objc  9) mingw-w64-i686-gdb
   10) mingw-w64-i686-headers-git  11) mingw-w64-i686-libmangle-git
   12) mingw-w64-i686-libwinpthread-git  13) mingw-w64-i686-make  14) mingw-w64-i686-pkg-config
   15) mingw-w64-i686-tools-git  16) mingw-w64-i686-winpthreads-git

選択して下さい (デフォルト=all): 1 2 3 7 9 10 11 12 13 14 15 16
:: 16 のパッケージがグループ mingw-w64-x86_64-toolchain にあります:
:: リポジトリ mingw64
   1) mingw-w64-x86_64-binutils  2) mingw-w64-x86_64-crt-git  3) mingw-w64-x86_64-gcc
   4) mingw-w64-x86_64-gcc-ada  5) mingw-w64-x86_64-gcc-fortran  6) mingw-w64-x86_64-gcc-libgfortran
   7) mingw-w64-x86_64-gcc-libs  8) mingw-w64-x86_64-gcc-objc  9) mingw-w64-x86_64-gdb
   10) mingw-w64-x86_64-headers-git  11) mingw-w64-x86_64-libmangle-git
   12) mingw-w64-x86_64-libwinpthread-git  13) mingw-w64-x86_64-make  14) mingw-w64-x86_64-pkg-config
   15) mingw-w64-x86_64-tools-git  16) mingw-w64-x86_64-winpthreads-git

選択して下さい (デフォルト=all): 1 2 3 7 9 10 11 12 13 14 15 16
依存関係を解決しています...
衝突するパッケージがないか確認しています...

パッケージ (143) docbook-xml-4.5-2  docbook-xsl-1.78.1-3  glib2-2.44.1-1  libassuan-2.4.2-1
                 libgc-7.2.d-1  libgcrypt-1.6.4-1  libgpg-error-1.21-1  libgpgme-1.6.0-1
                 libguile-2.0.11-3  libltdl-2.4.6-1  libpipeline-1.4.0-1  libunistring-0.9.6-1
                 libxslt-1.1.28-7  mingw-w64-i686-bzip2-1.0.6-5
                 mingw-w64-i686-ca-certificates-20150426-2
                 mingw-w64-i686-expat-2.1.0-6  mingw-w64-i686-gdbm-1.11-3
                 mingw-w64-i686-gettext-0.19.6-2  mingw-w64-i686-gmp-6.1.0-1
                 mingw-w64-i686-isl-0.15-1  mingw-w64-i686-libffi-3.2.1-3
                 mingw-w64-i686-libiconv-1.14-5  mingw-w64-i686-libsystre-1.0.1-2
                 mingw-w64-i686-libtasn1-4.7-1  mingw-w64-i686-libtre-git-r122.c2f5d13-4
                 mingw-w64-i686-mpc-1.0.3-2  mingw-w64-i686-mpfr-3.1.3.p0-2
                 mingw-w64-i686-ncurses-6.0.20160220-1  mingw-w64-i686-openssl-1.0.2.f-1
                 mingw-w64-i686-p11-kit-0.23.1-3  mingw-w64-i686-python2-2.7.11-2
                 mingw-w64-i686-readline-6.3.008-1  mingw-w64-i686-tcl-8.6.4-2
                 mingw-w64-i686-termcap-1.3.1-2  mingw-w64-i686-tk-8.6.4-2
                 mingw-w64-i686-windows-default-manifest-6.4-2  mingw-w64-i686-zlib-1.2.8-9
                 mingw-w64-x86_64-bzip2-1.0.6-5  mingw-w64-x86_64-ca-certificates-20150426-2
                 mingw-w64-x86_64-expat-2.1.0-6  mingw-w64-x86_64-gdbm-1.11-3
                 mingw-w64-x86_64-gettext-0.19.6-2  mingw-w64-x86_64-gmp-6.1.0-1
                 mingw-w64-x86_64-isl-0.15-1  mingw-w64-x86_64-libffi-3.2.1-3
                 mingw-w64-x86_64-libiconv-1.14-5  mingw-w64-x86_64-libsystre-1.0.1-2
                 mingw-w64-x86_64-libtasn1-4.7-1  mingw-w64-x86_64-libtre-git-r122.c2f5d13-4
                 mingw-w64-x86_64-mpc-1.0.3-2  mingw-w64-x86_64-mpfr-3.1.3.p0-2
                 mingw-w64-x86_64-ncurses-6.0.20160220-1  mingw-w64-x86_64-openssl-1.0.2.f-1
                 mingw-w64-x86_64-p11-kit-0.23.1-3  mingw-w64-x86_64-python2-2.7.11-2
                 mingw-w64-x86_64-readline-6.3.008-1  mingw-w64-x86_64-tcl-8.6.4-2
                 mingw-w64-x86_64-termcap-1.3.1-2  mingw-w64-x86_64-tk-8.6.4-2
                 mingw-w64-x86_64-windows-default-manifest-6.4-2  mingw-w64-x86_64-zlib-1.2.8-9
                 perl-Locale-Gettext-1.05-4  perl-Module-Build-0.4212-1  perl-Test-Pod-1.50-1
                 perl-XML-Parser-2.44-1  perl-YAML-Syck-1.29-1  python2-2.7.10-1  tar-1.28-3
                 asciidoc-8.6.9-4  autoconf-2.69-3  autoconf2.13-2.13-2  autogen-5.18.4-2
                 automake-wrapper-10-1  automake1.10-1.10.3-3  automake1.11-1.11.6-3
                 automake1.12-1.12.6-3  automake1.13-1.13.4-4  automake1.14-1.14.1-3
                 automake1.15-1.15-2  automake1.6-1.6.3-2  automake1.7-1.7.9-2  automake1.8-1.8.5-3
                 automake1.9-1.9.6-2  bison-3.0.4-1  diffstat-1.58-1  diffutils-3.3-3
                 dos2unix-7.3.3-1  file-5.25-1  flex-2.6.0-1  gawk-4.1.3-1  gdb-7.9-1
                 gettext-0.19.6-1  gperf-3.0.4-3  grep-2.22-1  groff-1.22.3-1  help2man-1.47.3-1
                 intltool-0.51.0-2  lemon-3.8.7.0-1  libtool-2.4.6-1  libunrar-5.3.7-1  m4-1.4.17-4
                 make-4.1-4  man-db-2.7.4-1  mingw-w64-i686-binutils-2.25.1-2
                 mingw-w64-i686-crt-git-5.0.0.4627.d55f21d-1  mingw-w64-i686-gcc-5.3.0-2
                 mingw-w64-i686-gcc-libs-5.3.0-2  mingw-w64-i686-gdb-7.11-1
                 mingw-w64-i686-headers-git-5.0.0.4627.6baeb9d-1
                 mingw-w64-i686-libmangle-git-5.0.0.4509.2e5a9a2-1
                 mingw-w64-i686-libwinpthread-git-5.0.0.4573.628fdbf-1
                 mingw-w64-i686-make-4.1.2351.a80a8b8-1  mingw-w64-i686-pkg-config-0.29-1
                 mingw-w64-i686-tools-git-5.0.0.4592.90b8472-1
                 mingw-w64-i686-winpthreads-git-5.0.0.4573.628fdbf-1
                 mingw-w64-x86_64-binutils-2.25.1-2  mingw-w64-x86_64-crt-git-5.0.0.4627.03684c4-1
                 mingw-w64-x86_64-gcc-5.3.0-2  mingw-w64-x86_64-gcc-libs-5.3.0-2
                 mingw-w64-x86_64-gdb-7.11-1  mingw-w64-x86_64-headers-git-5.0.0.4627.53be55d-1
                 mingw-w64-x86_64-libmangle-git-5.0.0.4509.2e5a9a2-1
                 mingw-w64-x86_64-libwinpthread-git-5.0.0.4573.628fdbf-1
                 mingw-w64-x86_64-make-4.1.2351.a80a8b8-1  mingw-w64-x86_64-pkg-config-0.29-1
                 mingw-w64-x86_64-tools-git-5.0.0.4592.90b8472-1
                 mingw-w64-x86_64-winpthreads-git-5.0.0.4573.628fdbf-1  pacman-5.0.1.6388.dcb2397-1
                 patch-2.7.5-1  patchutils-0.3.3-2  perl-5.22.0-2  pkg-config-0.28-2  pkgfile-15-1
                 rcs-5.9.4-1  scons-2.4.1-2  sed-4.2.2-2  swig-3.0.7-1  texinfo-6.0-1
                 texinfo-tex-6.0-1  ttyrec-1.0.8-1  unrar-5.3.7-1  wget-1.17.1-2  xmlto-0.0.26-2

合計ダウンロード容量:   186.38 MiB
合計インストール容量:  1221.31 MiB
最終的なアップグレード容量:  1124.41 MiB

:: インストールを行いますか？ [Y/n] y
:: パッケージを取得します...
 mingw-w64-i686-libiconv-1.14-5-any                   602.2 KiB   929K/s 00:01 [##################] 100%
 mingw-w64-i686-gmp-6.1.0-1-any                       459.3 KiB   947K/s 00:00 [##################] 100%
 mingw-w64-i686-libwinpthread-git-5.0.0.4573.628...    27.1 KiB  8.84M/s 00:00 [##################] 100%
 mingw-w64-i686-gcc-libs-5.3.0-2-any                  609.8 KiB   944K/s 00:01 [##################] 100%
 mingw-w64-i686-bzip2-1.0.6-5-any                      75.5 KiB  9.21M/s 00:00 [##################] 100%
 mingw-w64-i686-zlib-1.2.8-9-any                      153.2 KiB   471K/s 00:00 [##################] 100%
 mingw-w64-i686-binutils-2.25.1-2-any                  10.3 MiB  1080K/s 00:10 [##################] 100%
 mingw-w64-i686-headers-git-5.0.0.4627.6baeb9d-1-any    5.0 MiB  1244K/s 00:04 [##################] 100%
 mingw-w64-i686-crt-git-5.0.0.4627.d55f21d-1-any     1701.9 KiB   888K/s 00:02 [##################] 100%
 mingw-w64-i686-isl-0.15-1-any                        539.7 KiB   843K/s 00:01 [##################] 100%
 mingw-w64-i686-mpfr-3.1.3.p0-2-any                   258.0 KiB   809K/s 00:00 [##################] 100%
 mingw-w64-i686-mpc-1.0.3-2-any                        62.3 KiB  10.1M/s 00:00 [##################] 100%
 mingw-w64-i686-windows-default-manifest-6.4-2-any   1472.0   B  0.00B/s 00:00 [##################] 100%
 mingw-w64-i686-winpthreads-git-5.0.0.4573.628fd...    35.1 KiB  11.4M/s 00:00 [##################] 100%
 mingw-w64-i686-gcc-5.3.0-2-any                        24.6 MiB  1222K/s 00:21 [##################] 100%
 mingw-w64-i686-expat-2.1.0-6-any                     107.1 KiB  9.51M/s 00:00 [##################] 100%
 mingw-w64-i686-gettext-0.19.6-2-any                    3.0 MiB   808K/s 00:04 [##################] 100%
 mingw-w64-i686-gdbm-1.11-3-any                       150.1 KiB   313K/s 00:00 [##################] 100%
 mingw-w64-i686-libffi-3.2.1-3-any                     36.3 KiB  17.7M/s 00:00 [##################] 100%
 mingw-w64-i686-libtre-git-r122.c2f5d13-4-any          69.1 KiB  11.3M/s 00:00 [##################] 100%
 mingw-w64-i686-libsystre-1.0.1-2-any                   9.1 KiB  0.00B/s 00:00 [##################] 100%
 mingw-w64-i686-ncurses-6.0.20160220-1-any           1747.2 KiB   918K/s 00:02 [##################] 100%
 mingw-w64-i686-libtasn1-4.7-1-any                    171.3 KiB   268K/s 00:01 [##################] 100%
 mingw-w64-i686-p11-kit-0.23.1-3-any                  198.0 KiB   630K/s 00:00 [##################] 100%
 mingw-w64-i686-ca-certificates-20150426-2-any        382.4 KiB   797K/s 00:00 [##################] 100%
 mingw-w64-i686-openssl-1.0.2.f-1-any                   2.7 MiB   986K/s 00:03 [##################] 100%
 mingw-w64-i686-termcap-1.3.1-2-any                    12.3 KiB  12.0M/s 00:00 [##################] 100%
 mingw-w64-i686-readline-6.3.008-1-any                327.2 KiB   986K/s 00:00 [##################] 100%
 mingw-w64-i686-tcl-8.6.4-2-any                         2.8 MiB  1151K/s 00:03 [##################] 100%
 mingw-w64-i686-tk-8.6.4-2-any                       1874.2 KiB  1180K/s 00:02 [##################] 100%
 mingw-w64-i686-python2-2.7.11-2-any                   10.8 MiB  1286K/s 00:09 [##################] 100%
 mingw-w64-i686-gdb-7.11-1-any                          2.8 MiB   995K/s 00:03 [##################] 100%
 mingw-w64-i686-libmangle-git-5.0.0.4509.2e5a9a2...    16.5 KiB  8.07M/s 00:00 [##################] 100%
 mingw-w64-i686-make-4.1.2351.a80a8b8-1-any           105.3 KiB  9.34M/s 00:00 [##################] 100%
 mingw-w64-i686-pkg-config-0.29-1-any                 235.8 KiB   741K/s 00:00 [##################] 100%
 mingw-w64-i686-tools-git-5.0.0.4592.90b8472-1-any    235.1 KiB   742K/s 00:00 [##################] 100%
 mingw-w64-x86_64-libiconv-1.14-5-any                 600.2 KiB   757K/s 00:01 [##################] 100%
 mingw-w64-x86_64-gmp-6.1.0-1-any                     477.1 KiB   756K/s 00:01 [##################] 100%
 mingw-w64-x86_64-libwinpthread-git-5.0.0.4573.6...    24.2 KiB  7.87M/s 00:00 [##################] 100%
 mingw-w64-x86_64-gcc-libs-5.3.0-2-any                541.9 KiB   845K/s 00:01 [##################] 100%
 mingw-w64-x86_64-bzip2-1.0.6-5-any                    77.9 KiB  10.9M/s 00:00 [##################] 100%
 mingw-w64-x86_64-zlib-1.2.8-9-any                    148.6 KiB   472K/s 00:00 [##################] 100%
 mingw-w64-x86_64-binutils-2.25.1-2-any                11.9 MiB  1245K/s 00:10 [##################] 100%
 mingw-w64-x86_64-headers-git-5.0.0.4627.53be55d...     5.0 MiB  1117K/s 00:05 [##################] 100%
 mingw-w64-x86_64-crt-git-5.0.0.4627.03684c4-1-any      2.6 MiB  1002K/s 00:03 [##################] 100%
 mingw-w64-x86_64-isl-0.15-1-any                      524.3 KiB   830K/s 00:01 [##################] 100%
 mingw-w64-x86_64-mpfr-3.1.3.p0-2-any                 265.2 KiB   831K/s 00:00 [##################] 100%
 mingw-w64-x86_64-mpc-1.0.3-2-any                      62.3 KiB  10.1M/s 00:00 [##################] 100%
 mingw-w64-x86_64-windows-default-manifest-6.4-2-any 1484.0   B  0.00B/s 00:00 [##################] 100%
 mingw-w64-x86_64-winpthreads-git-5.0.0.4573.628...    33.2 KiB  8.11M/s 00:00 [##################] 100%
 mingw-w64-x86_64-gcc-5.3.0-2-any                      25.1 MiB  1270K/s 00:20 [##################] 100%
 mingw-w64-x86_64-expat-2.1.0-6-any                   106.7 KiB  9.47M/s 00:00 [##################] 100%
 mingw-w64-x86_64-gettext-0.19.6-2-any                  3.0 MiB  1214K/s 00:03 [##################] 100%
 mingw-w64-x86_64-gdbm-1.11-3-any                     151.8 KiB   315K/s 00:00 [##################] 100%
 mingw-w64-x86_64-libffi-3.2.1-3-any                   34.5 KiB  16.9M/s 00:00 [##################] 100%
 mingw-w64-x86_64-libtre-git-r122.c2f5d13-4-any        69.2 KiB  11.3M/s 00:00 [##################] 100%
 mingw-w64-x86_64-libsystre-1.0.1-2-any                 9.3 KiB  9.11M/s 00:00 [##################] 100%
 mingw-w64-x86_64-ncurses-6.0.20160220-1-any         1794.3 KiB  1133K/s 00:02 [##################] 100%
 mingw-w64-x86_64-libtasn1-4.7-1-any                  171.4 KiB   353K/s 00:00 [##################] 100%
 mingw-w64-x86_64-p11-kit-0.23.1-3-any                193.5 KiB   610K/s 00:00 [##################] 100%
 mingw-w64-x86_64-ca-certificates-20150426-2-any      382.1 KiB   799K/s 00:00 [##################] 100%
 mingw-w64-x86_64-openssl-1.0.2.f-1-any                 3.3 MiB   984K/s 00:03 [##################] 100%
 mingw-w64-x86_64-termcap-1.3.1-2-any                  12.6 KiB  12.3M/s 00:00 [##################] 100%
 mingw-w64-x86_64-readline-6.3.008-1-any              327.4 KiB   992K/s 00:00 [##################] 100%
 mingw-w64-x86_64-tcl-8.6.4-2-any                       2.8 MiB  1070K/s 00:03 [##################] 100%
 mingw-w64-x86_64-tk-8.6.4-2-any                     1869.4 KiB  1158K/s 00:02 [##################] 100%
 mingw-w64-x86_64-python2-2.7.11-2-any                 10.9 MiB  1132K/s 00:10 [##################] 100%
 mingw-w64-x86_64-gdb-7.11-1-any                        2.8 MiB  1119K/s 00:03 [##################] 100%
 mingw-w64-x86_64-libmangle-git-5.0.0.4509.2e5a9...    16.3 KiB  15.9M/s 00:00 [##################] 100%
 mingw-w64-x86_64-make-4.1.2351.a80a8b8-1-any         103.2 KiB  10.1M/s 00:00 [##################] 100%
 mingw-w64-x86_64-pkg-config-0.29-1-any               226.1 KiB   691K/s 00:00 [##################] 100%
 mingw-w64-x86_64-tools-git-5.0.0.4592.90b8472-1-any  247.0 KiB   774K/s 00:00 [##################] 100%
 python2-2.7.10-1-x86_64                               10.0 MiB  1138K/s 00:09 [##################] 100%
 libgpg-error-1.21-1-x86_64                           103.8 KiB  11.3M/s 00:00 [##################] 100%
 libgcrypt-1.6.4-1-x86_64                             337.7 KiB  1014K/s 00:00 [##################] 100%
 gettext-0.19.6-1-x86_64                             1441.4 KiB  1131K/s 00:01 [##################] 100%
 libxslt-1.1.28-7-x86_64                              121.8 KiB   372K/s 00:00 [##################] 100%
 docbook-xml-4.5-2-any                                 81.4 KiB  64.8K/s 00:01 [##################] 100%
 docbook-xsl-1.78.1-3-any                             714.3 KiB   197K/s 00:04 [##################] 100%
 asciidoc-8.6.9-4-any                                 173.6 KiB  1052K/s 00:00 [##################] 100%
 gawk-4.1.3-1-x86_64                                  951.1 KiB   755K/s 00:01 [##################] 100%
 m4-1.4.17-4-x86_64                                   200.8 KiB   637K/s 00:00 [##################] 100%
 diffutils-3.3-3-x86_64                               265.7 KiB   557K/s 00:00 [##################] 100%
 autoconf-2.69-3-any                                  584.6 KiB   615K/s 00:01 [##################] 100%
 autoconf2.13-2.13-2-any                              134.8 KiB   843K/s 00:00 [##################] 100%
 libgc-7.2.d-1-x86_64                                  60.2 KiB  8.40M/s 00:00 [##################] 100%
 libltdl-2.4.6-1-x86_64                                28.0 KiB  9.13M/s 00:00 [##################] 100%
 libunistring-0.9.6-1-x86_64                          492.2 KiB   769K/s 00:01 [##################] 100%
 libguile-2.0.11-3-x86_64                               2.1 MiB   822K/s 00:03 [##################] 100%
 autogen-5.18.4-2-x86_64                              623.9 KiB   792K/s 00:01 [##################] 100%
 automake1.6-1.6.3-2-any                              253.6 KiB   793K/s 00:00 [##################] 100%
 automake1.7-1.7.9-2-any                              296.0 KiB   911K/s 00:00 [##################] 100%
 automake1.8-1.8.5-3-any                              342.9 KiB   719K/s 00:00 [##################] 100%
 automake1.9-1.9.6-2-any                              385.5 KiB   805K/s 00:00 [##################] 100%
 automake1.10-1.10.3-3-any                            439.6 KiB   698K/s 00:01 [##################] 100%
 automake1.11-1.11.6-3-any                            489.5 KiB   622K/s 00:01 [##################] 100%
 automake1.12-1.12.6-3-any                            502.4 KiB   786K/s 00:01 [##################] 100%
 automake1.13-1.13.4-4-any                            500.0 KiB   778K/s 00:01 [##################] 100%
 automake1.14-1.14.1-3-any                            502.2 KiB   792K/s 00:01 [##################] 100%
 automake1.15-1.15-2-any                              502.0 KiB   781K/s 00:01 [##################] 100%
 automake-wrapper-10-1-any                              3.0 KiB  0.00B/s 00:00 [##################] 100%
 bison-3.0.4-1-x86_64                                1045.1 KiB   914K/s 00:01 [##################] 100%
 diffstat-1.58-1-x86_64                                20.8 KiB  20.3M/s 00:00 [##################] 100%
 dos2unix-7.3.3-1-x86_64                              311.7 KiB   950K/s 00:00 [##################] 100%
 flex-2.6.0-1-x86_64                                  280.4 KiB   863K/s 00:00 [##################] 100%
 gdb-7.9-1-x86_64                                       3.4 MiB  1030K/s 00:03 [##################] 100%
 gperf-3.0.4-3-x86_64                                  93.6 KiB  9.14M/s 00:00 [##################] 100%
 grep-2.22-1-x86_64                                   220.7 KiB   655K/s 00:00 [##################] 100%
 groff-1.22.3-1-x86_64                               1776.5 KiB  1099K/s 00:02 [##################] 100%
 perl-Locale-Gettext-1.05-4-x86_64                     11.0 KiB  10.7M/s 00:00 [##################] 100%
 help2man-1.47.3-1-x86_64                             142.3 KiB   426K/s 00:00 [##################] 100%
 perl-XML-Parser-2.44-1-x86_64                        142.7 KiB   176K/s 00:01 [##################] 100%
 intltool-0.51.0-2-x86_64                              39.4 KiB  9.61M/s 00:00 [##################] 100%
 lemon-3.8.7.0-1-x86_64                                35.2 KiB  11.5M/s 00:00 [##################] 100%
 tar-1.28-3-x86_64                                    671.9 KiB   821K/s 00:01 [##################] 100%
 libtool-2.4.6-1-x86_64                               381.6 KiB   779K/s 00:00 [##################] 100%
 libunrar-5.3.7-1-x86_64                              138.8 KiB   836K/s 00:00 [##################] 100%
 make-4.1-4-x86_64                                    387.0 KiB   791K/s 00:00 [##################] 100%
 libpipeline-1.4.0-1-x86_64                            25.7 KiB  8.36M/s 00:00 [##################] 100%
 man-db-2.7.4-1-x86_64                                477.0 KiB   739K/s 00:01 [##################] 100%
 sed-4.2.2-2-x86_64                                   671.9 KiB   689K/s 00:01 [##################] 100%
 patch-2.7.5-1-x86_64                                  75.9 KiB  10.6M/s 00:00 [##################] 100%
 patchutils-0.3.3-2-x86_64                             64.7 KiB  10.5M/s 00:00 [##################] 100%
 glib2-2.44.1-1-x86_64                               1689.1 KiB   747K/s 00:02 [##################] 100%
 pkg-config-0.28-2-x86_64                             159.4 KiB   333K/s 00:00 [##################] 100%
 pkgfile-15-1-x86_64                                   21.4 KiB  10.5M/s 00:00 [##################] 100%
 rcs-5.9.4-1-x86_64                                   164.1 KiB   508K/s 00:00 [##################] 100%
 scons-2.4.1-2-any                                    786.9 KiB   448K/s 00:02 [##################] 100%
 swig-3.0.7-1-x86_64                                 1023.2 KiB   709K/s 00:01 [##################] 100%
 texinfo-6.0-1-x86_64                                 992.7 KiB   768K/s 00:01 [##################] 100%
 texinfo-tex-6.0-1-x86_64                              25.0 KiB  12.2M/s 00:00 [##################] 100%
 ttyrec-1.0.8-1-x86_64                                 17.4 KiB  17.0M/s 00:00 [##################] 100%
 unrar-5.3.7-1-x86_64                                 110.6 KiB   203K/s 00:01 [##################] 100%
 libassuan-2.4.2-1-x86_64                              91.7 KiB  35.8K/s 00:03 [##################] 100%
 libgpgme-1.6.0-1-x86_64                              175.7 KiB  84.3K/s 00:02 [##################] 100%
 wget-1.17.1-2-x86_64                                 570.7 KiB   275K/s 00:02 [##################] 100%
 perl-YAML-Syck-1.29-1-x86_64                          60.7 KiB  9.88M/s 00:00 [##################] 100%
 perl-Module-Build-0.4212-1-any                       172.0 KiB   534K/s 00:00 [##################] 100%
 perl-Test-Pod-1.50-1-any                               8.0 KiB  0.00B/s 00:00 [##################] 100%
 xmlto-0.0.26-2-x86_64                                 23.5 KiB  7.66M/s 00:00 [##################] 100%
(143/143) キーリングのキーを確認                                               [##################] 100%
(143/143) パッケージの整合性をチェック                                         [##################] 100%
(143/143) パッケージファイルのロード                                           [##################] 100%
(143/143) ファイルの衝突をチェック                                             [##################] 100%
(143/143) 空き容量を確認                                                       [##################] 100%
:: パッケージの変更を処理しています...
(  1/143) インストール python2                                                 [##################] 100%
(  2/143) インストール libgpg-error                                            [##################] 100%
(  3/143) インストール libgcrypt                                               [##################] 100%
(  4/143) 再インストール gettext                                               [##################] 100%
(  5/143) インストール libxslt                                                 [##################] 100%
(  6/143) インストール docbook-xml                                             [##################] 100%
(  7/143) インストール docbook-xsl                                             [##################] 100%
(  8/143) インストール asciidoc                                                [##################] 100%
(  9/143) 再インストール gawk                                                  [##################] 100%
( 10/143) 再インストール m4                                                    [##################] 100%
( 11/143) インストール diffutils                                               [##################] 100%
( 12/143) インストール autoconf                                                [##################] 100%
( 13/143) インストール autoconf2.13                                            [##################] 100%
( 14/143) インストール libgc                                                   [##################] 100%
( 15/143) インストール libltdl                                                 [##################] 100%
( 16/143) インストール libunistring                                            [##################] 100%
( 17/143) インストール libguile                                                [##################] 100%
( 18/143) インストール autogen                                                 [##################] 100%
( 19/143) 再インストール perl                                                  [##################] 100%
( 20/143) インストール automake1.6                                             [##################] 100%
( 21/143) インストール automake1.7                                             [##################] 100%
( 22/143) インストール automake1.8                                             [##################] 100%
( 23/143) インストール automake1.9                                             [##################] 100%
( 24/143) インストール automake1.10                                            [##################] 100%
( 25/143) インストール automake1.11                                            [##################] 100%
( 26/143) インストール automake1.12                                            [##################] 100%
( 27/143) インストール automake1.13                                            [##################] 100%
( 28/143) インストール automake1.14                                            [##################] 100%
( 29/143) インストール automake1.15                                            [##################] 100%
( 30/143) インストール automake-wrapper                                        [##################] 100%
( 31/143) インストール bison                                                   [##################] 100%
( 32/143) インストール diffstat                                                [##################] 100%
( 33/143) インストール dos2unix                                                [##################] 100%
( 34/143) 再インストール file                                                  [##################] 100%
( 35/143) 再インストール flex                                                  [##################] 100%
( 36/143) インストール gdb                                                     [##################] 100%
( 37/143) インストール gperf                                                   [##################] 100%
( 38/143) 再インストール grep                                                  [##################] 100%
( 39/143) インストール groff                                                   [##################] 100%
( 40/143) インストール perl-Locale-Gettext                                     [##################] 100%
( 41/143) インストール help2man                                                [##################] 100%
( 42/143) インストール perl-XML-Parser                                         [##################] 100%
( 43/143) インストール intltool                                                [##################] 100%
( 44/143) インストール lemon                                                   [##################] 100%
( 45/143) インストール tar                                                     [##################] 100%
( 46/143) インストール libtool                                                 [##################] 100%
( 47/143) インストール libunrar                                                [##################] 100%
( 48/143) インストール make                                                    [##################] 100%
( 49/143) インストール libpipeline                                             [##################] 100%
( 50/143) インストール man-db                                                  [##################] 100%
it&#39;s recommended to create an initial
database running as root:
&amp;quot;/usr/bin/mandb --quiet&amp;quot;
man-db の提案パッケージ
    gzip [インストール済み]
( 51/143) 再インストール sed                                                   [##################] 100%
( 52/143) 再インストール pacman                                                [##################] 100%
( 53/143) インストール patch                                                   [##################] 100%
patch の提案パッケージ
    ed: for patch -e functionality
( 54/143) インストール patchutils                                              [##################] 100%
( 55/143) インストール glib2                                                   [##################] 100%
glib2 の提案パッケージ
    gamin: for gio fam module
    python2: for gdbus-codegen and gtester-report [インストール済み]
( 56/143) インストール pkg-config                                              [##################] 100%
( 57/143) 再インストール pkgfile                                               [##################] 100%
( 58/143) インストール rcs                                                     [##################] 100%
( 59/143) インストール scons                                                   [##################] 100%
( 60/143) インストール swig                                                    [##################] 100%
( 61/143) インストール texinfo                                                 [##################] 100%
( 62/143) インストール texinfo-tex                                             [##################] 100%
( 63/143) インストール ttyrec                                                  [##################] 100%
( 64/143) インストール unrar                                                   [##################] 100%
( 65/143) インストール libassuan                                               [##################] 100%
( 66/143) インストール libgpgme                                                [##################] 100%
( 67/143) インストール wget                                                    [##################] 100%
wget の提案パッケージ
    ca-certificates: HTTPS downloads [インストール済み]
( 68/143) インストール perl-YAML-Syck                                          [##################] 100%
( 69/143) インストール perl-Module-Build                                       [##################] 100%
( 70/143) インストール perl-Test-Pod                                           [##################] 100%
( 71/143) インストール xmlto                                                   [##################] 100%
( 72/143) インストール mingw-w64-i686-libiconv                                 [##################] 100%
( 73/143) インストール mingw-w64-i686-gmp                                      [##################] 100%
( 74/143) インストール mingw-w64-i686-libwinpthread-git                        [##################] 100%
( 75/143) インストール mingw-w64-i686-gcc-libs                                 [##################] 100%
( 76/143) インストール mingw-w64-i686-bzip2                                    [##################] 100%
( 77/143) インストール mingw-w64-i686-zlib                                     [##################] 100%
( 78/143) インストール mingw-w64-i686-binutils                                 [##################] 100%
( 79/143) インストール mingw-w64-i686-headers-git                              [##################] 100%
( 80/143) インストール mingw-w64-i686-crt-git                                  [##################] 100%
( 81/143) インストール mingw-w64-i686-isl                                      [##################] 100%
( 82/143) インストール mingw-w64-i686-mpfr                                     [##################] 100%
( 83/143) インストール mingw-w64-i686-mpc                                      [##################] 100%
( 84/143) インストール mingw-w64-i686-windows-default-manifest                 [##################] 100%
( 85/143) インストール mingw-w64-i686-winpthreads-git                          [##################] 100%
( 86/143) インストール mingw-w64-i686-gcc                                      [##################] 100%
( 87/143) インストール mingw-w64-i686-expat                                    [##################] 100%
( 88/143) インストール mingw-w64-i686-gettext                                  [##################] 100%
( 89/143) インストール mingw-w64-i686-gdbm                                     [##################] 100%
( 90/143) インストール mingw-w64-i686-libffi                                   [##################] 100%
( 91/143) インストール mingw-w64-i686-libtre-git                               [##################] 100%
( 92/143) インストール mingw-w64-i686-libsystre                                [##################] 100%
( 93/143) インストール mingw-w64-i686-ncurses                                  [##################] 100%
( 94/143) インストール mingw-w64-i686-libtasn1                                 [##################] 100%
( 95/143) インストール mingw-w64-i686-p11-kit                                  [##################] 100%
( 96/143) インストール mingw-w64-i686-ca-certificates                          [##################] 100%
( 97/143) インストール mingw-w64-i686-openssl                                  [##################] 100%
( 98/143) インストール mingw-w64-i686-termcap                                  [##################] 100%
( 99/143) インストール mingw-w64-i686-readline                                 [##################] 100%
(100/143) インストール mingw-w64-i686-tcl                                      [##################] 100%
(101/143) インストール mingw-w64-i686-tk                                       [##################] 100%
(102/143) インストール mingw-w64-i686-python2                                  [##################] 100%
(103/143) インストール mingw-w64-i686-gdb                                      [##################] 100%
(104/143) インストール mingw-w64-i686-libmangle-git                            [##################] 100%
(105/143) インストール mingw-w64-i686-make                                     [##################] 100%
(106/143) インストール mingw-w64-i686-pkg-config                               [##################] 100%
(107/143) インストール mingw-w64-i686-tools-git                                [##################] 100%
(108/143) インストール mingw-w64-x86_64-libiconv                               [##################] 100%
(109/143) インストール mingw-w64-x86_64-gmp                                    [##################] 100%
(110/143) インストール mingw-w64-x86_64-libwinpthread-git                      [##################] 100%
(111/143) インストール mingw-w64-x86_64-gcc-libs                               [##################] 100%
(112/143) インストール mingw-w64-x86_64-bzip2                                  [##################] 100%
(113/143) インストール mingw-w64-x86_64-zlib                                   [##################] 100%
(114/143) インストール mingw-w64-x86_64-binutils                               [##################] 100%
(115/143) インストール mingw-w64-x86_64-headers-git                            [##################] 100%
(116/143) インストール mingw-w64-x86_64-crt-git                                [##################] 100%
(117/143) インストール mingw-w64-x86_64-isl                                    [##################] 100%
(118/143) インストール mingw-w64-x86_64-mpfr                                   [##################] 100%
(119/143) インストール mingw-w64-x86_64-mpc                                    [##################] 100%
(120/143) インストール mingw-w64-x86_64-windows-default-manifest               [##################] 100%
(121/143) インストール mingw-w64-x86_64-winpthreads-git                        [##################] 100%
(122/143) インストール mingw-w64-x86_64-gcc                                    [##################] 100%
(123/143) インストール mingw-w64-x86_64-expat                                  [##################] 100%
(124/143) インストール mingw-w64-x86_64-gettext                                [##################] 100%
(125/143) インストール mingw-w64-x86_64-gdbm                                   [##################] 100%
(126/143) インストール mingw-w64-x86_64-libffi                                 [##################] 100%
(127/143) インストール mingw-w64-x86_64-libtre-git                             [##################] 100%
(128/143) インストール mingw-w64-x86_64-libsystre                              [##################] 100%
(129/143) インストール mingw-w64-x86_64-ncurses                                [##################] 100%
(130/143) インストール mingw-w64-x86_64-libtasn1                               [##################] 100%
(131/143) インストール mingw-w64-x86_64-p11-kit                                [##################] 100%
(132/143) インストール mingw-w64-x86_64-ca-certificates                        [##################] 100%
(133/143) インストール mingw-w64-x86_64-openssl                                [##################] 100%
(134/143) インストール mingw-w64-x86_64-termcap                                [##################] 100%
(135/143) インストール mingw-w64-x86_64-readline                               [##################] 100%
(136/143) インストール mingw-w64-x86_64-tcl                                    [##################] 100%
(137/143) インストール mingw-w64-x86_64-tk                                     [##################] 100%
(138/143) インストール mingw-w64-x86_64-python2                                [##################] 100%
(139/143) インストール mingw-w64-x86_64-gdb                                    [##################] 100%
(140/143) インストール mingw-w64-x86_64-libmangle-git                          [##################] 100%
(141/143) インストール mingw-w64-x86_64-make                                   [##################] 100%
(142/143) インストール mingw-w64-x86_64-pkg-config                             [##################] 100%
(143/143) インストール mingw-w64-x86_64-tools-git                              [##################] 100%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;base-devel&lt;/code&gt; は面倒なので全てインストール。
一部が再インストールされたが問題はなさそう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
gcc を含む toolchain については Ada, FORTRAN, Object-C の言語パッケージを除いたものをインストールした。&lt;/p&gt;

&lt;h3 id=&#34;gcc-の動作確認:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;gcc の動作確認&lt;/h3&gt;

&lt;p&gt;まずは 32bit 版の動作確認。
&lt;code&gt;mingw32_shell.bat&lt;/code&gt; を起動，または 環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; に &lt;code&gt;MINGW32&lt;/code&gt; をセットして shell を起動する。
&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; を使うのであれば以下のシーケンスで起動できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;set MSYSTEM=MINGW32 &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gcc を起動して動作確認。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gcc -v
Using built-in specs.
COLLECT_GCC=C:\msys64\mingw32\bin\gcc.exe
COLLECT_LTO_WRAPPER=C:/msys64/mingw32/bin/../lib/gcc/i686-w64-mingw32/5.3.0/lto-wrapper.exe
Target: i686-w64-mingw32
Configured with: ../gcc-5.3.0/configure --prefix=/mingw32 --with-local-prefix=/mingw32/local --build=i686-w64-mingw32 --host=i686-w64-mingw32 --target=i686-w64-mingw32 --with-native-system-header-dir=/mingw32/i686-w64-mingw32/include --libexecdir=/mingw32/lib --with-gxx-include-dir=/mingw32/include/c++/5.3.0 --enable-bootstrap --with-arch=i686 --with-tune=generic --enable-languages=c,lto,c++,objc,obj-c++,fortran,ada --enable-shared --enable-static --enable-libatomic --enable-threads=posix --enable-graphite --enable-fully-dynamic-string --enable-libstdcxx-time=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-version-specific-runtime-libs --disable-isl-version-check --enable-lto --enable-libgomp --disable-multilib --enable-checking=release --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-libiconv --with-system-zlib --with-gmp=/mingw32 --with-mpfr=/mingw32 --with-mpc=/mingw32 --with-isl=/mingw32 --with-pkgversion=&#39;Rev2, Built by MSYS2 project&#39; --with-bugurl=http://sourceforge.net/projects/msys2 --with-gnu-as --with-gnu-ld --disable-sjlj-exceptions --with-dwarf2
Thread model: posix
gcc version 5.3.0 (Rev2, Built by MSYS2 project)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に 64bit 版の動作確認。
動作確認には &lt;code&gt;mingw64_shell.bat&lt;/code&gt; を起動，または 環境変数 &lt;code&gt;MSYSTEM&lt;/code&gt; に &lt;code&gt;MINGW64&lt;/code&gt; をセットして shell を起動する。
&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-1/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― インストールから初期化処理まで&#34;&gt;前回&lt;/a&gt;紹介した &lt;a href=&#34;https://conemu.github.io/&#34; title=&#34;ConEmu - Handy Windows Terminal&#34;&gt;ConEmu&lt;/a&gt; を使うのであれば以下のシーケンスで起動できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;set MSYSTEM=MINGW64 &amp;amp; C:\msys64\usr\bin\bash.exe --login -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gcc を起動して動作確認。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ gcc -v
Using built-in specs.
COLLECT_GCC=C:\msys64\mingw64\bin\gcc.exe
COLLECT_LTO_WRAPPER=C:/msys64/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/5.3.0/lto-wrapper.exe
Target: x86_64-w64-mingw32
Configured with: ../gcc-5.3.0/configure --prefix=/mingw64 --with-local-prefix=/mingw64/local --build=x86_64-w64-mingw32 --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --with-native-system-header-dir=/mingw64/x86_64-w64-mingw32/include --libexecdir=/mingw64/lib --with-gxx-include-dir=/mingw64/include/c++/5.3.0 --enable-bootstrap --with-arch=x86-64 --with-tune=generic --enable-languages=c,lto,c++,objc,obj-c++,fortran,ada --enable-shared --enable-static --enable-libatomic --enable-threads=posix --enable-graphite --enable-fully-dynamic-string --enable-libstdcxx-time=yes --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-version-specific-runtime-libs --disable-isl-version-check --enable-lto --enable-libgomp --disable-multilib --enable-checking=release --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-libiconv --with-system-zlib --with-gmp=/mingw64 --with-mpfr=/mingw64 --with-mpc=/mingw64 --with-isl=/mingw64 --with-pkgversion=&#39;Rev2, Built by MSYS2 project&#39; --with-bugurl=http://sourceforge.net/projects/msys2 --with-gnu-as --with-gnu-ld
Thread model: posix
gcc version 5.3.0 (Rev2, Built by MSYS2 project)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ターゲット名が &lt;code&gt;x86_64-w64-mingw32&lt;/code&gt; となっていて非常に分かりにくいが， mingw32 版では &lt;code&gt;i686-w64-mingw32&lt;/code&gt; となっているので，なんとか区別して欲しい。&lt;/p&gt;

&lt;h2 id=&#34;gcc-のスレッドモデルと例外処理:e4d37e3e22a214ebbbfa3f31e05a9358&#34;&gt;gcc のスレッドモデルと例外処理&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; で提供される gcc のスレッドモデルと例外処理は以下のようになっているらしい。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;On MSYS2 I maintain only one configuration:&lt;br&gt;
32-bit: threads=posix, exceptions=dwarf&lt;br&gt;
64-bit: threads=posix, exceptions=seh&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://sourceforge.net/p/msys2/tickets/24/&#34;&gt;MSYS2 / Tickets / #24 Mingw64 downloads through msys2?&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://msys2.github.io/&#34; title=&#34;MSYS2 installer&#34;&gt;MSYS2&lt;/a&gt; のベースになっている &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; のスレッドモデルには win32 と posix が提供されている。 win32 は Windows ネイティブなスレッド関連関数を使っているため速いが， C++11 の thread, mutex, future はサポートしていないらしい。
一方，例外処理には SJLJ（SetJump/LongJump）， &lt;a href=&#34;http://ja.wikipedia.org/wiki/DWARF&#34;&gt;DWARF&lt;/a&gt;2， SEH（Structured Exception Handling）があり，この中では Windows ネイティブな SEH が一番速い。ただし SEH は 64bit gcc でしか対応していないため 32bit 環境では使えない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; のもうひとつの実装である &lt;a href=&#34;http://tdm-gcc.tdragon.net/&#34; title=&#34;TDM-GCC&#34;&gt;TDM-GCC&lt;/a&gt; では，スレッドモデルには posix，例外処理には SJLJ（32bit）または SEH（64bit）が設定されているようだ。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;TDM-GCC includes a pthreads emulation layer for Microsoft Windows systems, called &#34;winpthreads&#34;. This lets you use std::thread and other C++11 concurrency features in your programs, out of the box.&lt;br&gt;
[...]&lt;br&gt;
64-bit binaries use &#34;SEH&#34;, which stands for &#34;Structured Exception Handling&#34;.&lt;br&gt;
[...]&lt;br&gt;
If you create a 32-bit binary with the TDM64 edition, it will use SJLJ exception handling. DW2 exception handling is not available in this edition.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://tdm-gcc.tdragon.net/quirks&#34;&gt;TDM-GCC : Quirks&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/03/gcc-msys2-3/&#34; title=&#34;MSYS2 による gcc 開発環境の構築 ― pgpdump をビルドする&#34;&gt;次回&lt;/a&gt;は実際にビルドを行う。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;ていうか，最新版が入ってるのが分かるなら，わざわざ再インストールする必要はないと思うのだが&amp;hellip;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e4d37e3e22a214ebbbfa3f31e05a9358:bd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;ちなみにオリジナルの &lt;a href=&#34;http://mingw-w64.org/&#34; title=&#34;Mingw-w64 - GCC for Windows 64 &amp;amp; 32 bits [mingw-w64]&#34;&gt;MinGW-w64&lt;/a&gt; ではインストール時にスレッドモデルと例外処理を選択できる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:e4d37e3e22a214ebbbfa3f31e05a9358:w64&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
