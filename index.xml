<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2018-12-28:/</id>
	<updated>2018-12-28T18:18:03+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info/images/avatar.jpg</icon>
	<logo>http://text.baldanders.info/images/avatar.jpg</logo>
	<generator uri="https://gohugo.io/">Hugo 0.52</generator>

	
	<entry>
		<title>真面目に PlantUML (2) : シーケンス図 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/" />
		<id>tag:text.Baldanders.info,2018-12-28:/remark/2018/12/plantuml-2-sequence-diagram/</id>
		<published>2018-12-28T18:18:03+09:00</published>
		<updated>2018-12-28T18:18:03+09:00</updated>
		<summary>さっそく今回はシーケンス図を PlantUML で書いてみようか。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/12/plantuml-1/&#34; title=&#34;真面目に PlantUML (1) : PlantUML のインストール&#34;&gt;前回&lt;/a&gt;でインストールまで終わったので，今回から各図の書き方について記しておく。
なお，今回から &lt;code&gt;skinparam&lt;/code&gt; 定義をまとめた &lt;a href=&#34;https://github.com/spiegel-im-spiegel/plantuml-sample/blob/master/skinparams.iuml&#34; title=&#34;plantuml-sample/skinparams.iuml at master · spiegel-im-spiegel/plantuml-sample&#34;&gt;&lt;code&gt;skinparams.iuml&lt;/code&gt;&lt;/a&gt; ファイルを用意し，このファイルを食わせることで見た目の調整を行うことにする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -Dfile.encoding=UTF-8 -jar plantuml.jar -nometadata -charset UTF-8 -config skinparams.iuml *.puml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さっそく今回はシーケンス図を &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; で書いてみようか。&lt;/p&gt;

&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;PlantUML のインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/&#34;&gt;シーケンス図&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;オブジェクトとライフライン&#34;&gt;オブジェクトとライフライン&lt;/h2&gt;

&lt;p&gt;UML のシーケンス図（sequence diagram）はオブジェクト同士のやり取り（相互作用）を時系列で表したものである。
オブジェクトの粒度は設計により様々で，人やシステムを表す場合もあればクラス単位の場合もある。
たとえば Alice と Bob が挨拶を交わす場合は&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello.puml&#34;&gt;&lt;img src=&#34;./hello.png&#34; srcset=&#34;./hello.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;と表す。
上の矩形がオブジェクトを表す。
そこから真下に伸びる点線は「ライフライン（lifeline）」と呼ばれているもので，上から下に時間が進行している。
横向きの矢印は「メッセージ（message）」と呼ばれていて，一方のオブジェクトからもう一方へ何らかのアクションを起こしたことを示している。&lt;/p&gt;

&lt;p&gt;上図の場合は，まず Alice から Bob へ “hello” を行い，その後に Bob から Alice へ “hello” を行ったことを表す。
ただし，この時点では2つの “hello” に関係があるかどうかは分からない。&lt;/p&gt;

&lt;p&gt;UML のシーケンス図ではオブジェクトは矩形で表されるが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; には以下の図形も用意されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:obj1&#34;&gt;&lt;a href=&#34;#fn:obj1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

actor Actor
participant Participant
boundary Boundary
control Control
entity Entity
database Database
collections Collections

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./objects.puml&#34;&gt;&lt;img src=&#34;./objects.png&#34; srcset=&#34;./objects.png 1950w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;本来ならシーケンス図はこんな感じの&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./frame.puml&#34;&gt;&lt;img src=&#34;./frame.png&#34; srcset=&#34;./frame.png 606w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;フレームで囲む必要があるが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; にはこれに該当するものが用意されていない。
まぁ実務で作図したときもシーケンス図をちゃんとフレームで囲ってるのをあまり見なかったので，気にする人はいないのだろう。&lt;/p&gt;

&lt;h2 id=&#34;メッセージ詳細&#34;&gt;メッセージ詳細&lt;/h2&gt;

&lt;p&gt;ではシーケンス図におけるメッセージのやりとりについて，いくつかパターンを書いてみよう。&lt;/p&gt;

&lt;h3 id=&#34;同期メッセージ-synchronous-message&#34;&gt;同期メッセージ（Synchronous Message）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt; B : Synchronous Message
activate B

B -&amp;gt; B : Internal call

A &amp;lt;&amp;lt;-- B : Reply Message
deactivate B

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./sync.puml&#34;&gt;&lt;img src=&#34;./sync.png&#34; srcset=&#34;./sync.png 857w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;矢印の種類に注意。&lt;/p&gt;

&lt;p&gt;「メッセージ」となっているが必ずしも通信を行っているわけではなく，相手オブジェクトのメソッドを呼び出す場合もこのような記述になる。&lt;/p&gt;

&lt;p&gt;Object B のライフラインにある縦長の矩形は「実行仕様（execution specification）」と呼ばれるもので，その期間中に何らかの処理を行っていることを示す。
Object B は Object A からのメッセージを受けて内部処理を行って結果を Object A に返しているわけやね。&lt;/p&gt;

&lt;h3 id=&#34;非同期メッセージ-asynchronous-message&#34;&gt;非同期メッセージ（Asynchronous Message）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B
participant &amp;#34;Object C&amp;#34; as C

A -&amp;gt;&amp;gt; C : Asynchronous Message
activate C

A -&amp;gt;&amp;gt; B : Asynchronous Message
activate B

hnote over A : Waiting...

A &amp;lt;&amp;lt;-- B : Reply Message
deactivate B

A &amp;lt;&amp;lt;-- C : Reply Message
deactivate C

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./async.puml&#34;&gt;&lt;img src=&#34;./async.png&#34; srcset=&#34;./async.png 1181w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;矢印の種類，特に同期メッセージとの違いに注意。&lt;/p&gt;

&lt;p&gt;Object A と Object B の間，および Object A と Object B の間は同期していないため，処理の終了を待っているわけですね。
分かります。&lt;/p&gt;

&lt;h3 id=&#34;メッセージの不達&#34;&gt;メッセージの不達&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt;&amp;gt; B : Asynchronous Message
activate B

hnote over A : Waiting...

A x&amp;lt;-- B : No Reply
deactivate B

hnote over A : Timeout

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./timeout.puml&#34;&gt;&lt;img src=&#34;./timeout.png&#34; srcset=&#34;./timeout.png 790w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;異常系シーケンスでよく見かけるやつ。
Object B からの応答がなくてタイムアウトしちゃったとか。&lt;/p&gt;

&lt;h3 id=&#34;スコープ外からのメッセージ-found-lost-message&#34;&gt;スコープ外からのメッセージ（Found/Lost Message）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

[o-&amp;gt;&amp;gt; A : Found Message
activate A

A -&amp;gt; B : Synchronous Message
activate B

B -&amp;gt; B : Internal call
activate B

B -&amp;gt;&amp;gt;o] : Lost Message
deactivate B

A &amp;lt;&amp;lt;-- B : Reply Message
deactivate B

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./found-lost.puml&#34;&gt;&lt;img src=&#34;./found-lost.png&#34; srcset=&#34;./found-lost.png 1126w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;図のスコープ外とのやり取り。
メッセージがロストしているわけではない。
本当は黒丸なんだけど，何故か黒丸が使えない。&lt;/p&gt;

&lt;h2 id=&#34;複合フラグメント-combined-fragment&#34;&gt;複合フラグメント（Combined Fragment）&lt;/h2&gt;

&lt;p&gt;シーケンス図で条件分岐やループなどの制御構造を表現するために以下のような「複合フラグメント」を記述できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

actor Alice
actor Bob

Alice -&amp;gt;&amp;gt; Bob: Hello

alt successful case
  Bob --&amp;gt;&amp;gt; Alice: Hello
else failure case
  Bob --&amp;gt;&amp;gt; Alice: Who?
  loop 3 times
    Alice -&amp;gt;&amp;gt; Bob: Hello again
  end loop
end alt

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./fragment.puml&#34;&gt;&lt;img src=&#34;./fragment.png&#34; srcset=&#34;./fragment.png 596w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;複合フラグメントとして以下のものがある。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;alt&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Alternative&lt;/strong&gt; 指定した条件下で分岐処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;opt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Option&lt;/strong&gt; 指定した条件下で行う処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Loop&lt;/strong&gt; 指定した条件下で繰り返し処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;break&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;break&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Break&lt;/strong&gt; 指定した条件下で中断処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;par&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;par&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Parallel&lt;/strong&gt; 並列処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;critical&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;critical&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Critical&lt;/strong&gt; クリティカル・セッション&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group ignore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Ignore&lt;/strong&gt; 無効な処理または重要でない処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;consider&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group consider&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Consider&lt;/strong&gt; 有効な処理または重要な処理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group assert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Assert&lt;/strong&gt; 処理が成り立つために条件が必要なことを示す&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;neg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;group neg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Negation&lt;/strong&gt; 本来起こりえない処理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;外部参照&#34;&gt;外部参照&lt;/h3&gt;

&lt;p&gt;複合フラグメントとはちょっと違うが， &lt;code&gt;ref&lt;/code&gt; を使ってシーケンスの一部を外部参照にできる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B

A -&amp;gt; B : Request

ref over A,B
  Initialize
end ref

A &amp;lt;&amp;lt;-- B : Complete

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./refer.puml&#34;&gt;&lt;img src=&#34;./refer.png&#34; srcset=&#34;./refer.png 1215w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;これでシーケンス図を機能ごとに分解することが可能になる。&lt;/p&gt;

&lt;h2 id=&#34;オブジェクトの生成と消滅&#34;&gt;オブジェクトの生成と消滅&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;create&lt;/code&gt;/&lt;code&gt;destroy&lt;/code&gt; を使って以下のようにオブジェクトの生成と消滅を記述できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

participant &amp;#34;Object A&amp;#34; as A
participant &amp;#34;Object B&amp;#34; as B
participant &amp;#34;Object C&amp;#34; as C

== Create Object ==

A -&amp;gt; B: Create Object C
activate B

create C
B-&amp;gt;C: Create

ref over B, C : Initialize

A &amp;lt;&amp;lt;-- B: Success
deactivate B

|||
== Destroy Object ==

A -&amp;gt; B: Destroy Object C
activate B

B-&amp;gt;C: Destroy
activate C

B&amp;lt;&amp;lt;--C: Done
deactivate C
destroy C

A &amp;lt;&amp;lt;-- B: Success
deactivate B

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./create.puml&#34;&gt;&lt;img src=&#34;./create.png&#34; srcset=&#34;./create.png 1215w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;んー。
バツの付く位置が違うような気がするが，まぁいいか。&lt;/p&gt;

&lt;p&gt;今日のところはこれで。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;Sequence Diagram syntax and features&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/sequence.html&#34;&gt;シーケンス図(Sequence Diagram) - UML入門 - IT専科&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/plantuml-sample&#34;&gt;GitHub - spiegel-im-spiegel/plantuml-sample: Samples for PlantUML&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:obj1&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では記述のかなりの部分を省略できるが，そのせいで文脈依存にならざるを得ない。たとえば &lt;code&gt;Alice-&amp;gt;Bob&lt;/code&gt; とだけ記述した場合，それがシーケンス図を表すのかクラス図なのか，あるいは他の図なのか分かりにくい（&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; はシーケンス図判定の優先度が高いようだが仕様として明記されていない）。そこで &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; でオブジェクトを定義する際は “&lt;code&gt;actor Alice&lt;/code&gt;” のように常に種別を明記する癖をつけておくと（後に再利用する上でも）いいだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:obj1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>真面目に PlantUML (1) : PlantUML のインストール - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/12/plantuml-1/" />
		<id>tag:text.Baldanders.info,2018-12-27:/remark/2018/12/plantuml-1/</id>
		<published>2018-12-27T19:55:14+09:00</published>
		<updated>2018-12-28T18:18:03+09:00</updated>
		<summary> せっかく時間ができたのだから PlantUML についてちゃんと調べてみることにした。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;1年ほど前に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタを使って &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; を使って UML で遊んだのだが， &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; 自体は「とりあえず動かしてみた」というレベルできちんと調べていなかった。
せっかく時間ができたのだから，この機会にちゃんと調べてみることにした。&lt;/p&gt;

&lt;h2 id=&#34;目次&#34;&gt;目次&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;PlantUML のインストール&lt;/a&gt; ← イマココ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/12/plantuml-2-sequence-diagram/&#34;&gt;シーケンス図&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;plantuml-のインストール&#34;&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; は UML (Unified Modeling Language; 統一モデリング言語) を記述するための DSL (Domain-Specific Language; ドメイン特化言語) と考えてよい。
UML の構文（に相当するもの）は図形で表されるが，それをテキストで記述できるようにしたのが &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; である。
&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では UML 2.0 のうち以下の図（Diagrams）を作成できるようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;構造図（Structural Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/class-diagram&#34;&gt;クラス図（Class Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/component-diagram&#34;&gt;コンポーネント図（Component Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/object-diagram&#34;&gt;オブジェクト図（Object Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/deployment-diagram&#34;&gt;配置図（Deployment Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;振る舞い図（Behavioral Diagrams）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図（Sequence Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/use-case-diagram&#34;&gt;ユースケース図（Use Case Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図（Activity Diagram）&lt;/a&gt; ※ベータ版&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/state-diagram&#34;&gt;状態遷移図（State Machine Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/timing-diagram&#34;&gt;タイミング図（Timing Diagram）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の実行モジュールは Java の jar ファイルで提供されているため，あらかじめ Java の実行環境を用意する必要がある（最新の &lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; で問題ない）。
また&lt;a href=&#34;http://plantuml.com/sequence-diagram&#34;&gt;シーケンス図&lt;/a&gt;と&lt;a href=&#34;http://plantuml.com/activity-diagram-beta&#34;&gt;アクティビティ図&lt;/a&gt;以外は &lt;a href=&#34;https://graphviz.gitlab.io/_pages/doc/info/lang.html&#34; title=&#34;The DOT Language&#34;&gt;DOT 言語&lt;/a&gt;にトランス・コンパイルされるため &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; もインストールする必要がある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の実行モジュールは&lt;a href=&#34;http://plantuml.com/download&#34;&gt;ダウンロードページ&lt;/a&gt;から最新の &lt;code&gt;plantuml.jar&lt;/code&gt; ファイルをダウンロードすれば大丈夫。
&lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; も&lt;a href=&#34;http://graphviz.org/download/&#34;&gt;ダウンロードページ&lt;/a&gt;等から取得できる。
たとえば Windows であれば “Stable 2.38 Windows install packages” をダウンロードしてインストールすればよい。&lt;/p&gt;

&lt;p&gt;用意ができたら &lt;code&gt;plantuml.jar&lt;/code&gt; ファイルのあるフォルダで以下のコマンドを入力し動作確認する（以下は Windows 7 環境下での例）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -version
PlantUML version 1.2018.14 (Sat Dec 22 01:33:16 JST 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.1+13
Operating System: Windows 7
OS Version: 6.1
Default Encoding: MS932
Language: ja
Country: JP
Machine: ********
PLANTUML_LIMIT_SIZE: 4096
Processors: 4
Max Memory: 2,065,694,720
Total Memory: 130,023,424
Free Memory: 123,436,232
Used Memory: 6,587,192
Thread Active Count: 1

The environment variable GRAPHVIZ_DOT has not been set
Dot executable is C:\path\to\dot.exe
Dot version: dot - graphviz version 2.38.0 (20140413.2041)
Installation seems OK. File generation OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;GRAPHVIZ_DOT&lt;/code&gt; 環境変数がないよ，と言っているが &lt;a href=&#34;http://graphviz.org/&#34; title=&#34;Graphviz - Graph Visualization Software&#34;&gt;Graphviz&lt;/a&gt; の dot コマンドにパスが通っていれば無問題。
念のため dot コマンドとの連携を確認しておこう。
以下のコマンドを実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -testdot
The environment variable GRAPHVIZ_DOT has not been set
Dot executable is C:\path\to\dot.exe
Dot version: dot - graphviz version 2.38.0 (20140413.2041)
Installation seems OK. File generation OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;コマンドライン-オプション&#34;&gt;コマンドライン・オプション&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のコマンドライン・オプションは以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -h
Usage: java -jar plantuml.jar [options] -gui
        (to execute the GUI)
        or java -jar plantuml.jar [options] [file/dir] [file/dir] [file/dir]
        (to process files or directories)

You can use the following wildcards in files/dirs:
        *       means any characters but &amp;#39;\&amp;#39;
        ?       one and only one character but &amp;#39;\&amp;#39;
        **      means any characters (used to recurse through directories)

where options include:

        -gui                To run the graphical user interface
        -tpng               To generate images using PNG format (default)
        -tsvg               To generate images using SVG format
        -teps               To generate images using EPS format
        -tpdf               To generate images using PDF format
        -tvdx               To generate images using VDX format
        -txmi               To generate XMI file for class diagram
        -tscxml             To generate SCXML file for state diagram
        -thtml              To generate HTML file for class diagram
        -ttxt               To generate images with ASCII art
        -tutxt              To generate images with ASCII art using Unicode characters
        -tlatex             To generate images using LaTeX/Tikz format
        -tlatex:nopreamble  To generate images using LaTeX/Tikz format without preamble
        -o[utput] &amp;#34;dir&amp;#34;     To generate images in the specified directory
        -DVAR1=value        To set a preprocessing variable as if &amp;#39;!define VAR1 value&amp;#39; were used
        -Sparam1=value      To set a skin parameter as if &amp;#39;skinparam param1 value&amp;#39; were used
        -r[ecurse]          recurse through directories
        -I\path\to\file     To include file as if &amp;#39;!include file&amp;#39; were used
        -I\path\to\*.puml   To include files with pattern
        -charset xxx        To use a specific charset (default is windows-31j)
        -e[x]clude pattern  To exclude files that match the provided pattern
        -metadata           To retrieve PlantUML sources from PNG images
        -nometadata         To NOT export metadata in PNG/SVG generated files
        -checkmetadata      Skip PNG files that don&amp;#39;t need to be regenerated
        -version            To display information about PlantUML and Java versions
        -checkversion       To check if a newer version is available for download
        -v[erbose]          To have log information
        -quiet              To NOT print error message into the console
        -debugsvek          To generate intermediate svek files
        -h[elp]             To display this help message
        -testdot            To test the installation of graphviz
        -graphvizdot &amp;#34;exe&amp;#34;  To specify dot executable
        -p[ipe]             To use stdin for PlantUML source and stdout for PNG/SVG/EPS generation
        -encodesprite 4|8|16[z] &amp;#34;file&amp;#34;      To encode a sprite at gray level (z for compression) from an image
        -computeurl|-encodeurl      To compute the encoded URL of a PlantUML source file
        -decodeurl          To retrieve the PlantUML source from an encoded URL
        -syntax             To report any syntax error from standard input without generating images
        -language           To print the list of PlantUML keywords
        -checkonly          To check the syntax of files without generating images
        -failfast           To stop processing as soon as a syntax error in diagram occurs
        -failfast2          To do a first syntax check before processing files, to fail even faster
        -pattern            To print the list of Regular Expression used by PlantUML
        -duration           To print the duration of complete diagrams processing
        -nbthread N         To use (N) threads for processing
        -nbthread auto      To use 4 threads for processing
        -timeout N          Processing timeout in (N) seconds. Defaults to 15 minutes (900 seconds).
        -author[s]          To print information about PlantUML authors
        -overwrite          To allow to overwrite read only files
        -printfonts         To print fonts available on your system
        -enablestats        To enable statistics computation
        -disablestats       To disable statistics computation (default)
        -htmlstats          To output general statistics in file plantuml-stats.html
        -xmlstats           To output general statistics in file plantuml-stats.xml
        -realtimestats      To generate statistics on the fly rather than at the end
        -loopstats          To continuously print statistics about usage
        -splash             To display a splash screen with some progress bar
        -progress           To display a textual progress bar in console
        -pipeimageindex N   To generate the Nth image with pipe option
        -stdlib             To print standart library info
        -extractstdlib      To extract PlantUML Standard Library into stdlib folder
        -filename &amp;#34;example.puml&amp;#34;    To override %filename% variable
        -preproc            To output preprocessor text of diagrams
        -cypher             To cypher texts of diagrams so that you can share them

If needed, you can setup the environment variable GRAPHVIZ_DOT.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;かなりの数のオプションがあるが，よく使うのは以下のものだろうか。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;オプション&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tpng&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PNG 形式で出力（既定値）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tsvg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SVG 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-teps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EPS 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tpdf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PDF 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tlatex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LaTeX/Tikz 形式で出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-tlatex:nopreamble&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;LaTeX/Tikz 形式で出力（プリアンブルなし）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-o[utput] &amp;quot;dir&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指定したフォルダに出力&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-charset xxx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字エンコーディングの指定&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-nometadata&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PNG/SVG 出力にメタデータを含めない&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p[ipe]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;入出力をパイプで行う&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;みんな大好き-hello-world&#34;&gt;みんな大好き Hello World&lt;/h2&gt;

&lt;p&gt;では簡単なコードを処理してみよう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hello.puml&lt;/code&gt; という名前のファイルを用意して以下のように入力する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; ではドキュメントの中にコードを埋め込むことを想定して &lt;code&gt;@startuml ... @enduml&lt;/code&gt; 内の記述のみが処理の対象となる。&lt;/p&gt;

&lt;p&gt;ではこのファイルを処理してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -charset UTF-8 hello.puml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;hello.puml&lt;/code&gt; と同じフォルダに &lt;code&gt;hello.png&lt;/code&gt; ファイルが出力される。
&lt;code&gt;hello.png&lt;/code&gt; ファイルの内容は以下の通り。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello.puml&#34;&gt;&lt;img src=&#34;./hello.png&#34; srcset=&#34;./hello.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;って，ちっちゃ！
じゃあ，解像度を調節してもう少し大きくしてみよう。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;skinparam dpi 300
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これを処理するとこうなる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello2.puml&#34;&gt;&lt;img src=&#34;./hello2.png&#34; srcset=&#34;./hello2.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;おおっ。
おっきくなった。&lt;/p&gt;

&lt;h2 id=&#34;見た目の調整&#34;&gt;見た目の調整&lt;/h2&gt;

&lt;p&gt;上の例で示したように &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; では &lt;code&gt;skinparam&lt;/code&gt; コマンドを使って見た目の調整ができる。
では，もう少し調整を入れて UML っぽい図にしてみる。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;skinparam shadowing false
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam backgroundColor transparent
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam dpi 300
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam arrow {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName Noto Serif JP
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 10
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontStyle plain
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Color Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Thickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam participant {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontName Noto Sans
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontSize 14
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  FontStyle plain
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BackgroundColor WhiteSmoke
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  BorderThickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  Padding 20
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam sequence {
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBackgroundColor transparent
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderColor Black
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  LifeLineBorderThickness 1
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;  MessageAlignment center
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;hide footbox
&lt;/span&gt;&lt;span class=&#34;hl&#34;&gt;skinparam BoxPadding 10
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;フォントの変更と線の色と太さを調節してみた。
またライフラインの間隔も調整している。
以上を処理するとこんな図になる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello3.puml&#34;&gt;&lt;img src=&#34;./hello3.png&#34; srcset=&#34;./hello3.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;h2 id=&#34;見た目の指定を別ファイルに分離する&#34;&gt;見た目の指定を別ファイルに分離する&lt;/h2&gt;

&lt;p&gt;見た目の指定は別ファイルにして再利用したいところである。
そこで &lt;code&gt;hello.iuml&lt;/code&gt; ファイルを作成して &lt;code&gt;skinparam&lt;/code&gt; コマンドの内容をまるっと移動してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;skinparam shadowing false
skinparam backgroundColor transparent
skinparam dpi 300

skinparam arrow {
  FontColor Black
  FontName Noto Serif JP
  FontSize 10
  FontStyle plain
  Color Black
  Thickness 1
}
skinparam participant {
  FontColor Black
  FontName Noto Sans
  FontSize 14
  FontStyle plain
  BackgroundColor WhiteSmoke
  BorderColor Black
  BorderThickness 1
  Padding 20
}
skinparam sequence {
  LifeLineBackgroundColor transparent
  LifeLineBorderColor Black
  LifeLineBorderThickness 1
  MessageAlignment center
}
hide footbox
skinparam BoxPadding 10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このファイルをインクルードする形でコードを修正する。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&lt;span class=&#34;hl&#34;&gt;!include hello.iuml
&lt;/span&gt;
Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;これを処理すると&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello4.puml&#34;&gt;&lt;img src=&#34;./hello4.png&#34; srcset=&#34;./hello4.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;

&lt;p&gt;先程と全く同じ結果が得られる。&lt;/p&gt;

&lt;p&gt;また最初の&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

Alice-&amp;gt;Bob : hello
Alice&amp;lt;-Bob : はろー

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;に対して&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ java -jar plantuml.jar -charset UTF-8 -config hello.iuml hello.puml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と &lt;code&gt;-config&lt;/code&gt; オプションで &lt;code&gt;hello.iuml&lt;/code&gt; ファイルを指定しても同じ結果が得られる。
これで再利用しやすくなっただろう。&lt;/p&gt;

&lt;h2 id=&#34;追記-plantuml-のコメント&#34;&gt;【追記】 &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; のコメント&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の &lt;code&gt;@startuml ... @enduml&lt;/code&gt; 領域内にコメントを記述する際には以下の２通りの書き方がある。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

&amp;#39; 一行コメント

/&amp;#39;
複数行に渡る
コメント
&amp;#39;/

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお，行の途中に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml

skinparam dpi 300 &amp;#39;解像度の設定

@enduml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のような記述はできない（しかもエラーにもならない）のでご注意を。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itsenka.com/contents/development/uml/&#34;&gt;UML入門 - IT専科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://plantuml.com/skinparam&#34;&gt;Changing colors and fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yohshiy.blog.fc2.com/blog-entry-152.html&#34;&gt;PlantUML の使い方 | プログラマーズ雑記帳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Trello で引っ越し - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/12/move-with-trello/" />
		<id>tag:text.Baldanders.info,2018-12-24:/remark/2018/12/move-with-trello/</id>
		<published>2018-12-24T19:06:08+09:00</published>
		<updated>2018-12-24T19:06:08+09:00</updated>
		<summary>必要なタスクが多く私の貧弱な脳みそでは管理しきれなくなったため Trello を試すことにした。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/12/i-am-a-sunday-programmer/&#34; title=&#34;どうも，日曜プログラマの Spiegel です&#34;&gt;前回の話&lt;/a&gt;の通り実家に引っ越すことになったのだが，今まで過ごしてきた環境を整理するのに必要なタスクが多く私の貧弱な脳みそでは管理しきれなくなったため &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; を試すことにした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; はタスクを付箋紙のように貼り付けて運用するタスク管理サービスで，最小構成であれば無料で利用できる。
今回 &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; を選択した理由は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;操作がシンプルで，いわゆる「かんばん方式」と相性がいい&lt;/li&gt;
&lt;li&gt;スマートフォンなどの携帯端末で運用でき，しかも直感的で比較的分かりやすい&lt;/li&gt;
&lt;li&gt;日本語でおｋ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; ではプロジェクトを「ボード」と呼び，ボードの中に複数の「リスト」を作成できる。
更に「リスト」の中に複数の「カード」を作成することができる。
この「カード」が付箋紙の役割となる。
「リスト」と「カード」はいくらでも追加できるようだ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;div style=&#34;position: relative; margin: 0 2rem; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
	&lt;iframe class=&#34;youtube-player&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; src=&#34;https://www.youtube-nocookie.com/embed/xky48zyL9iA&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=xky48zyL9iA&#34;&gt;Getting Started With Trello (Demo) - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;引っ越し-ボードの作成&#34;&gt;「引っ越し」ボードの作成&lt;/h2&gt;

&lt;p&gt;まずは「引っ越し」ボードを新規に作成し，その中に以下のリストを作成する。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;リスト名&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;掲示&lt;/td&gt;
&lt;td&gt;タスク以外の情報を置いておく&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;課題&lt;/td&gt;
&lt;td&gt;「引っ越し」に関するタスクを置いておく&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;着手中&lt;/td&gt;
&lt;td&gt;「引っ越し」に関するタスクのうち着手中のものを置いておく&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;確認待ち&lt;/td&gt;
&lt;td&gt;着手中のタスクの中で待ち状態（自身ではアクションを起こせない）のものを置いておく&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;完了&lt;/td&gt;
&lt;td&gt;完了したタスクを置いておく&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;必要となるタスクを列挙する&#34;&gt;必要となるタスクを列挙する&lt;/h2&gt;

&lt;p&gt;次に「引っ越し」に必要なタスクをカードとして「課題」リストに列挙する。
このときはタスク間の関係とか優先順位とかはとりあえず横において，ひたすら列挙することに専念する。&lt;/p&gt;

&lt;h2 id=&#34;タスクを整理し優先順位を付ける&#34;&gt;タスクを整理し優先順位を付ける&lt;/h2&gt;

&lt;p&gt;列挙したタスクを整理する。
このとき，以下のことに注意する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タスク以外のカードを除外する

&lt;ul&gt;
&lt;li&gt;情報（引越し業者の連絡先など）のみのカードは「掲示」リストに移動する&lt;/li&gt;
&lt;li&gt;ルーチンワーク（毎週のゴミ出しなど）はタスクに含めず情報として「掲示」リストに移動する&lt;/li&gt;
&lt;li&gt;イベントやマイルストーンは除外する（後述） ただしイベントやマイルストーンの前準備としてのタスクについては別途カードを起こして整理する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;タスク間の関連が強いものについてはひとつのカードにまとめ，サブタスクをチェックリストとして列挙する&lt;/li&gt;
&lt;li&gt;カードに「期限」を設定する（とりあえず大雑把な期限でよい）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;タスクの優先順位の付け方はプロジェクトによって色々あると思うが「引っ越し」の場合は明らかに「期限」が優先順位のキーになる筈である。
そこで「掲示」リストの各カードを「期限」の昇順でソートする。&lt;/p&gt;

&lt;h3 id=&#34;スケジュール-サービスとの連携&#34;&gt;スケジュール・サービスとの連携&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; には “Power-Up” と呼ばれる拡張機能があって，これはボードメニューから設定できる。
無料ユーザもひつだけ “Power-Up” を追加できるのだが，ここで Calendar 機能を追加することを強くオススメする。&lt;/p&gt;

&lt;p&gt;Calendar 機能では期限を設定したカードを対象にカレンダー表示ができるのだが， iCal 形式でエクスポートできる。
これを Google Calendar や他のカレンダー・サービス（またはアプリ）にインポートすることでスケジュール管理ができるようになる。&lt;/p&gt;

&lt;p&gt;前節で「イベントやマイルストーンは除外する」と書いたが，ルーチンワークやイベント・マイルストーンはカレンダー・サービス（またはアプリ）で管理すればタスクとスケジュールとの連携が可能になる。
これでプロジェクト全体の見通しがとても良くなるので是非お試しあれ！&lt;/p&gt;

&lt;h2 id=&#34;タスクに着手する&#34;&gt;タスクに着手する&lt;/h2&gt;

&lt;p&gt;「課題」リストのカードのうち着手可能なタスクから「着手中」リストに移動する。
このときタスクの担当者を「メンバー」としてセットする。
こうしておけば担当したタスクについて &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; のホームページに「次にやる」カードが表示される。
逆に「完了」リストに移動したカードからは「メンバー」を削除すること。&lt;/p&gt;

&lt;p&gt;（引越し業者など）相手からのアクションを待っているタスクについてはカードを「確認待ち」リストに移動する。
このとき確認の問い合わせ担当を「メンバー」としてセットし，確認のデッドラインを「期限」にセットする。
カードを「確認待ち」リストから「着手中」リストに戻す際に「メンバー」をタスク実行者に「期限」を完了予定日時に設定し直す（実はこのタイミングでスケジュールの確認・見直しができる）。&lt;/p&gt;

&lt;p&gt;「確認待ち」リストは定期的に見直すことで（ルーチンワークとしてスケジュール管理する）見落としをなくす。&lt;/p&gt;

&lt;p&gt;あるタスクを遂行中に副次的に別のタスクが発生した場合は遠慮なくカードを追加する。
このとき，いったん「課題」リストにカードを起こして全体を見ながら整理するクセをつけるとよい。
「全体最適化」というやつである。&lt;/p&gt;

&lt;p&gt;カードのコメント機能はメンバー間のやり取りのみに利用する。
情報を追加する場合は「詳細説明」に追記する。&lt;/p&gt;

&lt;p&gt;何らかの理由で期限までにタスクの遂行が難しいと分かったら遠慮なくリスケジュールする。
タスク管理ではタスクの完遂が&lt;a href=&#34;https://dic.pixiv.net/a/%E9%A2%A8%E8%A6%8B%E3%81%BF%E3%81%9A%E3%81%BB&#34;&gt;最優先事項&lt;/a&gt;であり，タスク管理とスケジュール管理が競合するのであればタスクの遂行を優先すべきである。
&lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; では「期限」をキーに簡単にソートし直せるためリスケジュールも比較的簡単にできる（もちろん，そのための人間側の調整は大変だけど）。&lt;/p&gt;

&lt;h2 id=&#34;gtd-は失敗したけど-trello-なら大丈夫&#34;&gt;GTD は失敗したけど &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; なら大丈夫&lt;/h2&gt;

&lt;p&gt;実は一度 GTD (Getting Things Done) 手法によるタスク管理をやったことがあるのだが3ヶ月ほどで挫折してしまった。
挫折した理由は分かっていて，何らかのイレギュラー（病気とか）が起こった場合に，それを修復しようとして無理をしてしまい，そこから管理が破綻していくのである。&lt;/p&gt;

&lt;p&gt;じゃあ何故 &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; で大きな破綻もなく上手く行ったかというと，実は &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt; はスケジュール管理が得意ではなく，自然にタスク完遂を優先に運用できるからだと気がついた。&lt;/p&gt;

&lt;p&gt;GTD はどちらかというとワークフローのための管理手法であり，タスクとスケジュールの分離が難しく，しかもスケジュール完遂が優先されがちである。
多分この辺が私の性格に合ってないんじゃないかと思う。&lt;/p&gt;

&lt;p&gt;本来こういったタスク管理はチームで運用してこそ威力を発揮すると思うが（リーン開発とかアジャイルとかスクラムとか），今回のような機会を通してその片鱗を経験しておくのは悪くないんじゃないかな。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.mu/ynunokawa/n/nd9df585d2399&#34;&gt;Trello で施策の優先度決めを超高速でやる｜ヌノカワ ユウスケ / SmartDrive｜note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/hirokishirai/items/77b59a13ddb8b7d782c1&#34;&gt;trelloで使えるMarkDown構文 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/matsuoshi/items/293608fbacf5d9d09d0d&#34;&gt;Trello の各カードに期限日を設定して、Google Calendar に同期させる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stmn.co.jp/tech/1227&#34;&gt;Integromat による Trello・GitHub 連携 – 株式会社スタメン | stmn, inc.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://euphoniumize-45th.hatenablog.com/entry/2017/12/04/230113&#34;&gt;タスク管理ツールはTrello一択 - 木牛流馬が動かない&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.lifehacker.jp/2017/01/170117_trellotrello.html&#34;&gt;タスク管理ツール｢Trello｣の使い方をTrello社の社員たちに聞いてみた | ライフハッカー［日本版］&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://mba.globis.ac.jp/about_mba/glossary/detail-11756.html&#34;&gt;かんばん方式とは・意味｜MBAのグロービス経営大学院&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/kitfactory/items/37b42c0716e1ff1efb28&#34;&gt;「アジャイルは死んだ」以降に残るものは何か -リーンソフトウェア開発を再評価し、自工程完結で全体観点で改善する - - Qiita&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B01IGW5IIW/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51gC8Tmq1kL._SL160_.jpg&#34; width=&#34;113&#34; height=&#34;160&#34; alt=&#34;リーン開発の現場 カンバンによる大規模プロジェクトの運営&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B01IGW5IIW/baldandersinf-22&#34;&gt;リーン開発の現場 カンバンによる大規模プロジェクトの運営&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ＨｅｎｒｉｋＫｎｉｂｅｒｇ, 角谷信太郎&lt;/dd&gt;
    &lt;dd&gt;オーム社&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私はこれで勉強しました。もう一回読み直すかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.24&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>どうも，日曜プログラマの Spiegel です - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/12/i-am-a-sunday-programmer/" />
		<id>tag:text.Baldanders.info,2018-12-24:/remark/2018/12/i-am-a-sunday-programmer/</id>
		<published>2018-12-24T19:06:01+09:00</published>
		<updated>2018-12-24T19:06:01+09:00</updated>
		<summary>というわけで来年からは「日曜プログラマ」として，相変わらず慎ましく暮らしていきたいと考える所存です。 </summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;2018年も押し迫った今日このごろ，皆様いかがお過ごしでしょうか。
私事ではありますが，諸事情により生まれ故郷である&lt;a href=&#34;http://www.city.matsue.shimane.jp/&#34;&gt;松江市&lt;/a&gt;に帰ることになりました。
まぁ，ぶっちゃけ drop out です。&lt;/p&gt;

&lt;p&gt;この時点で「降りる」ならもっと早く決断しろよというご指摘はごもっともなのですが，様々な未練が絶ち難く，結果的に実家の家族や周囲の友人を含め迷惑を撒き散らしてしまったことは本当に申し訳なく思っています。&lt;/p&gt;

&lt;p&gt;来年以降の展望など皆無ですが，少なくとも職業プログラマは廃業することになるでしょう。
はっきり言って職業としてのプログラマには全く未練はなく，むしろ守秘義務がどうとか生産性がこうとか面倒っちいことを考える必要が一切なくなり不合理なコードも楽しく書き放題になった環境は望むところだったりします&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:diy1&#34;&gt;&lt;a href=&#34;#fn:diy1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;というわけで，今までは「流しのプログラマ」としてやってきましたが，来年からは「日曜プログラマ」として，相変わらず Web の辺境（&lt;a href=&#34;http://text.baldanders.info/remark/2015/open-this-site/&#34;&gt;しっぽのさきっちょ&lt;/a&gt;）で慎ましく暮らしていきたいと考える所存です。
どぞ，よろしく。&lt;/p&gt;

&lt;h2 id=&#34;本をあきらめて&#34;&gt;本をあきらめて&lt;/h2&gt;

&lt;p&gt;私は「断捨離」という（宗教用語ではなく）流行り言葉が好きではない。
この言葉を流行らせた人は上手いことを言ったつもりなんだろうが，今どきの「断捨離」というのはファッションとしてのダイエットと変わらない。
もちろん様々な理由でそうしなければならないこともあるが，他人に言われてこれほどムカつく言葉もないだろう。&lt;/p&gt;

&lt;p&gt;今回の帰郷は「そうしなければならない」案件となった。
なにせ実家には（34年も&lt;ruby&gt;&lt;rb&gt;帰郷&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;かえ&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;らなかった）私の居場所はないのである。
それでも家族で食事ができる空間と寝床，更に本棚と PC をひとつずつ置ける空間を貰ったのだから，家族には感謝しかない。&lt;/p&gt;

&lt;p&gt;特に本の処分は精神的にクるものがあった。
2015年に&lt;a href=&#34;http://text.baldanders.info/remark/2015/0920-diary/&#34; title=&#34;今日の戯れ言：週末は掃除三昧&#34;&gt;軽トラ一杯分の本を捨てた&lt;/a&gt;ときも若干思ったが，広島に来てからの34年間を否定された気分になる。
たかが本なのにねー。
でも，されど本，か。&lt;/p&gt;

&lt;p&gt;（ちゃんと数えたわけではないが）大雑把に内訳を言うと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;今回対象となった本（書籍・漫画・雑誌）が約1,750冊

&lt;ul&gt;
&lt;li&gt;そのうち実家に持ち帰った本が約350冊&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bookoffonline.co.jp/&#34; title=&#34;ブックオフオンライン 中古/新品の本・漫画（まんが）、コミック・CD・DVD・ゲームをまとめて購入＆まとめて買取&#34;&gt;ブックオフオンライン&lt;/a&gt;で買取・処分を依頼した本が約980冊&lt;/li&gt;
&lt;li&gt;残り（主に仕事関係の雑誌）は資源ごみ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;って感じ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:kdl1&#34;&gt;&lt;a href=&#34;#fn:kdl1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;いやぁ，雑誌の廃棄はしんどかった。
ゴミ捨て場と自宅とを何往復したか（朦朧として）覚えてない。
翌日はみいりがしてエラかったし&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ib1&#34;&gt;&lt;a href=&#34;#fn:ib1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;今は紙の漫画雑誌は買わない（アプリか Web で連載を見るか Kindle で買う）が，他ジャンルの雑誌も二度と紙で買うまぁ，と改めて心に誓うのだった。
資源ごみをお金出して買うとかありえないよね。&lt;/p&gt;

&lt;p&gt;帰郷後の本棚（の一部）はこんな感じ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.instagram.com/p/Brm6Y8wlU_Q/&#34;&gt;&lt;img src=&#34;./bookshelf.jpg&#34; srcset=&#34;./bookshelf.jpg 2624w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;本棚を1/4に縮小・再構築。来年はこの状態からスタート。&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.instagram.com/p/Brm6Y8wlU_Q/&#34;&gt;本棚を1/4に縮小・再構築。来年はこの状態からスタート。&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;竹本泉エリアはこうなった。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.instagram.com/p/Brm6p2nFuWv/&#34;&gt;&lt;img src=&#34;./area-for-izumi-takemoto.jpg&#34; srcset=&#34;./area-for-izumi-takemoto.jpg 2095w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;#竹本泉 エリア。リニューアル版は処分した orz&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.instagram.com/p/Brm6p2nFuWv/&#34;&gt;#竹本泉 エリア。リニューアル版は処分した orz&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;リニューアル版は全て&lt;a href=&#34;https://www.bookoffonline.co.jp/&#34; title=&#34;ブックオフオンライン 中古/新品の本・漫画（まんが）、コミック・CD・DVD・ゲームをまとめて購入＆まとめて買取&#34;&gt;ブックオフオンライン&lt;/a&gt;へ送付。
もう竹本泉ファンと自称できない &lt;code&gt;(T_T)&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;松江と原発&#34;&gt;松江と原発&lt;/h2&gt;

&lt;p&gt;いわゆる「平成の大合併」で島根原発のある鹿島町が&lt;a href=&#34;http://www.city.matsue.shimane.jp/&#34;&gt;松江市&lt;/a&gt;に組み入れられ，&lt;a href=&#34;http://www.city.matsue.shimane.jp/&#34;&gt;松江市&lt;/a&gt;は「原発のあるマチ」になった。
&lt;a href=&#34;http://www.city.matsue.shimane.jp/&#34;&gt;松江市&lt;/a&gt;役所で転入手続き時に貰ったのがこれ。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.instagram.com/p/BrllddWFq0O/&#34;&gt;&lt;img src=&#34;./nuclear-power-plant.jpg&#34; srcset=&#34;./nuclear-power-plant.jpg 2072w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;原発災害時の避難計画のパンフレット。市役所でもらった。&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.instagram.com/p/BrllddWFq0O/&#34;&gt;原発災害時の避難計画のパンフレット。市役所でもらった。&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;住んでいる地区によって違うのだが，うちは益田や津和野（島根県の西端）あたりへ避難しろってことらしい。
改めて当事者になったんだなぁ，と感慨深い。&lt;/p&gt;

&lt;p&gt;エネルギー問題の本質は，今まで「外部」に押し付けていたリスクやコストを如何にして引き受けるか，ということに尽きる。
無邪気に批判や礼賛をすればいいというものではないのだ。&lt;/p&gt;

&lt;p&gt;せっかく&lt;a href=&#34;http://www.city.matsue.shimane.jp/&#34;&gt;松江市&lt;/a&gt;に&lt;ruby&gt;&lt;rb&gt;帰郷&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;かえ&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;ったんだから，部外者ではなく当事者として，そういうことも考えていければいいな，と思ったりする。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:diy1&#34;&gt;やはり人が人らしく生きるには&lt;a href=&#34;http://www.mhatta.org/wp/2018/12/05/thoughts-on-child-porn-regulation/&#34; title=&#34;児童ポルノの表現規制に関する考え方のスケッチ – mhatta&#39;s mumbo jumbo&#34;&gt;愚行権&lt;/a&gt;を（行使するしないに関わらず）確保しておくことが大事なんだなぁ。人生には「余白」が必要。プログラミングを「手段」としてではなく「余暇」として楽しめるようになったのは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のおかげや思うちょります。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:diy1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:kdl1&#34;&gt;ちなみに Kindle では2018年末時点で1,300冊ほど購入・保持している。クラウドで保管されているので置き場所に困ることはないが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:kdl1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ib1&#34;&gt;みいりがしてエラかった → 筋肉痛でしんどかった（ 出雲弁） 「みいり」というのは他所でも似たような言い回しがあるらしい。方言は「痛み」に関する表現が多くて面白いよね。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ib1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『数学ガールの秘密ノート「暗記と理解」』より - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/12/comprehension/" />
		<id>tag:text.Baldanders.info,2018-12-21:/remark/2018/12/comprehension/</id>
		<published>2018-12-21T19:05:32+09:00</published>
		<updated>2018-12-21T19:05:32+09:00</updated>
		<summary>暗記は思考のショートカット，理解とはプロセス</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;Twitter で感想を呟いたら微妙に反応があったみたいなので，調子に乗ってブログ記事に再構成してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cakes.mu/posts/23641&#34;&gt;第245回　暗記と理解（前編）｜数学ガールの秘密ノート｜結城浩｜cakes（ケイクス）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cakes.mu/posts/23724&#34;&gt;第246回　暗記と理解（後編）｜数学ガールの秘密ノート｜結城浩｜cakes（ケイクス）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;暗記は思考のショートカット&#34;&gt;暗記は思考のショートカット&lt;/h2&gt;

&lt;p&gt;私はとにかく暗記が苦手で，学校の授業では如何にして暗記の量を減らせるかで苦心していた。
今でも暗記は全く駄目で，特に論理でないものは覚えるのに苦労する。
顔とか名前とかパスワード（パスフレーズ）とか&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:pp1&#34;&gt;&lt;a href=&#34;#fn:pp1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
たぶん脳みそに何か欠陥があるんじゃないかな。&lt;/p&gt;

&lt;p&gt;ホンマ，皮肉でもなんでもなく暗記が得意な人とか写真記憶とか羨ましい。
ラノベみたいなチート能力は要らないが，暗記能力は欲しかったよ。&lt;/p&gt;

&lt;p&gt;小中の算数は計算問題が主で壊滅的な成績。
暗算ができなくて計算に他人の3倍くらいかかるからだ。
ドリルの宿題はひたすら苦行だった（遠い目）。
中3で代数や幾何の証明問題が増えてきてようやく人並みの成績がとれるようになった。
証明問題は証明のフローさえ覚えれば幾らでも応用と組み合わせができるし。
これで高校は理数科に入ってしまったのだから人生は分からないものである。&lt;/p&gt;

&lt;p&gt;私は「暗記は思考のショートカット」と認識している。
例えば数学なら，公式や定理・公理をきちんと覚えて使いこなせば「理解を進める」ための強力な道具となるだろう。
あるいは自然言語の「語彙」を覚えるとか，プログラミングでフレームワークやデザイン・パターンを覚えたり，といったことも同様だ。&lt;/p&gt;

&lt;h2 id=&#34;理解とはプロセス&#34;&gt;理解とはプロセス&lt;/h2&gt;

&lt;p&gt;数学の成績が上向いてきて気がついたのだが，自分が理解していることと理解していることを（テスト等で）他人に証明することは別問題である。
これに気づいてからは学校成績は気にならなくなった。
まぁ両親がそういうのにあまり煩くない人だからというのもあるけど，今にして思えば，これも中二病の一種だったんだろう。&lt;/p&gt;

&lt;p&gt;そもそも大前提として「人は想像を絶するものは想像できない」。
じゃあ，どうやったら人は「想像の地平線の向こう側」に行けるのか。&lt;/p&gt;

&lt;p&gt;これは結城浩さんの「数学ガール」シリーズを読むようになって納得できたことだが，正しい理解には対話が不可欠だと思う。
対話によって「想像の地平線の向こう側」を識ることができるのだ。
ならば「理解とはプロセス」であり，常に現在進行形で不完全なものなのだ。
人はその不完全さを抱いて「理解を進める」のである。&lt;/p&gt;

&lt;h2 id=&#34;理解を進める&#34;&gt;理解を進める&lt;/h2&gt;

&lt;p&gt;「理解すること」は「理解を進める」ことと同義だと私は思う。
ときには立ち止まっても後ろを向いても構わないが，トータルで前に進めているのなら「理解している」と言っていいんじゃないだろうか。&lt;/p&gt;

&lt;p&gt;ちなみに私の場合，本を読むときには（自分にとって）難しい本を1冊買って，その本を理解するために別の本を大量に買ったり，最近ではネットで調べたりする。
モットーは「情報は広く知識は深く」である。
いつもうまくいくとは限らないけど（笑）&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2016/11/reading-comprehension/&#34;&gt;AI の読解力，人の読解力&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B00NAQA33A/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41hSKEDU3zL._SL160_.jpg&#34; width=&#34;111&#34; height=&#34;160&#34; alt=&#34;数学ガールの誕生　理想の数学対話を求めて&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B00NAQA33A/baldandersinf-22&#34;&gt;数学ガールの誕生　理想の数学対話を求めて&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんの講演集。こういう場所に立ち会える今の学生さんは羨ましい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.21&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51XGP8AFX2L._SL160_.jpg&#34; width=&#34;112&#34; height=&#34;160&#34; alt=&#34;いかにして問題をとくか&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621045938/baldandersinf-22&#34;&gt;いかにして問題をとくか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;G. ポリア&lt;/dd&gt;
    &lt;dd&gt;丸善&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;数学書。というか問いの立てかたやものの考え方についての指南書。のようなものかな。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:pp1&#34;&gt;だからパスワードを覚えなくても安全に運用できる方法を考えたりするわけだ。自分で書いたコードは覚えようとしなくても自然と頭に浮かぶのにねぇ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:pp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>2018年お気に入り ATOM パッケージ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/12/favorite-atom-packages-2018/" />
		<id>tag:text.Baldanders.info,2018-12-17:/remark/2018/12/favorite-atom-packages-2018/</id>
		<published>2018-12-17T22:45:24+09:00</published>
		<updated>2018-12-18T08:08:33+09:00</updated>
		<summary>年末なので ATOM エディタの整理を。 </summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;年末なので &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; エディタの整理を。
といっても最近はあまりいじるところがないけど。&lt;/p&gt;

&lt;h2 id=&#34;gocode-を巡るあれこれ&#34;&gt;gocode を巡るあれこれ&lt;/h2&gt;

&lt;p&gt;本当のことを言うと &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援パッケージを LSP (Language Server Protocol) ベースにしたいんだけど，最近流行りの &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/golsp&#34; title=&#34;golsp - GoDoc&#34;&gt;golsp&lt;/a&gt; や &lt;a href=&#34;https://github.com/saibing/bingo&#34; title=&#34;saibing/bingo: Bingo is a Go language server that speaks Language Server Protocol.&#34;&gt;bingo&lt;/a&gt; を扱えるパッケージはなさそう。&lt;/p&gt;

&lt;p&gt;以前からある &lt;a href=&#34;https://github.com/sourcegraph/go-langserver&#34; title=&#34;sourcegraph/go-langserver: Go language server to add Go support to editors and other tools that use the Language Server Protocol (LSP)&#34;&gt;go-langserver&lt;/a&gt; はバックエンドに gocode を利用しているのだが（今は違う？），本家の &lt;a href=&#34;https://github.com/nsf/gocode&#34; title=&#34;nsf/gocode: An autocompletion daemon for the Go programming language&#34;&gt;nsf/gocode&lt;/a&gt; が &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.10 以降で組み込まれたビルドキャッシュ機能に追従できず fork が乱立して混沌としている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gc1&#34;&gt;&lt;a href=&#34;#fn:gc1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;結局 &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援パッケージを利用するなら &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; 一択で&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; をインストール，またはインストール済みであることを確認する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; をインストールする。この際，サブパッケージおよび各種支援ツールが自動インストールされるのを確認する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stamblerre/gocode&#34; title=&#34;stamblerre/gocode: An autocompletion daemon for the Go programming language&#34;&gt;stamblerre/gocode&lt;/a&gt; を &lt;code&gt;go get&lt;/code&gt; コマンドで上書きインストールする&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:gp1&#34;&gt;&lt;a href=&#34;#fn:gp1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という手順になるだろう。
&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/golsp&#34; title=&#34;golsp - GoDoc&#34;&gt;golsp&lt;/a&gt; や &lt;a href=&#34;https://github.com/saibing/bingo&#34; title=&#34;saibing/bingo: Bingo is a Go language server that speaks Language Server Protocol.&#34;&gt;bingo&lt;/a&gt; が使えれば将来的に楽なんだけどねぇ。&lt;/p&gt;

&lt;p&gt;それ以前に 1.12 で&lt;a href=&#34;http://text.baldanders.info/golang/go-module-aware-mode/&#34; title=&#34;モジュール対応モードへの移行を検討する&#34;&gt;モジュール対応モード&lt;/a&gt;に本格的に移行した場合に &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; が追従できるかどうかなんだけど。
最悪の場合は &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined&#34;&gt;Visual Studio Code&lt;/a&gt; に乗り換えるか（vim は若い頃のデスマーチなトラウマがフラッシュバックするので使いたくない）。&lt;/p&gt;

&lt;h2 id=&#34;atom-ide-ui-と連携する-document-outline&#34;&gt;&lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; と連携する &lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;今まで markdown テキストのアウトライン表示は &lt;a href=&#34;https://atom.io/packages/nav-panel-plus&#34;&gt;nav-panel-plus&lt;/a&gt; を使ってたんだけど &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; に対応していないのが欠点だった。
で，色々探してみたら &lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt; が良さげである。
&lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt; の設定で “show by default” 項目を無効にしておけば &lt;a href=&#34;https://atom.io/packages/atom-ide-ui&#34;&gt;atom-ide-ui&lt;/a&gt; のアウトライン表示のタブだけが表示される。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/document-outline&#34;&gt;document-outline&lt;/a&gt; は以下の構造化テキストに対応している&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markdown (Commonmark)&lt;/li&gt;
&lt;li&gt;LaTeX&lt;/li&gt;
&lt;li&gt;ReStructuredText&lt;/li&gt;
&lt;li&gt;AsciiDoc&lt;/li&gt;
&lt;li&gt;Knitr&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;らしいんだけど LaTeX ファイルのアウトラインが上手く表示されないんだよなぁ。
うーむ。&lt;/p&gt;

&lt;p&gt;他にも &lt;a href=&#34;https://atom.io/packages/ide-html&#34;&gt;ide-html&lt;/a&gt; で HTML を，&lt;a href=&#34;https://atom.io/packages/ide-css&#34;&gt;ide-css&lt;/a&gt; で CSS を，&lt;a href=&#34;https://atom.io/packages/ide-yaml&#34;&gt;ide-yaml&lt;/a&gt; で YAML を，&lt;a href=&#34;https://atom.io/packages/ide-json&#34;&gt;ide-json&lt;/a&gt; で JSON を扱える。
これでメジャーな構造化テキストは大体扱えるかな&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:om1&#34;&gt;&lt;a href=&#34;#fn:om1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/favorite-atom-packages-2017/&#34;&gt;年末なので ATOM Editor を掃除しましょう（もしくは2017年お気に入り ATOM パッケージ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/12/plantuml-with-atom/&#34;&gt;ATOM エディタを使った作図（PlantUML 編）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:gc1&#34;&gt;gocode を巡るゴタゴタについては「&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20181217000056.htm&#34;&gt;gocode やめます(そして Language Server へ)&lt;/a&gt;」が参考になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gc1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:gp1&#34;&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; では &lt;a href=&#34;https://github.com/mdempsky/gocode&#34; title=&#34;mdempsky/gocode: An autocompletion daemon for the Go programming language&#34;&gt;mdempsky/gocode&lt;/a&gt; が自動インストールされるが， &lt;a href=&#34;https://github.com/mdempsky/gocode&#34; title=&#34;mdempsky/gocode: An autocompletion daemon for the Go programming language&#34;&gt;mdempsky/gocode&lt;/a&gt; は&lt;a href=&#34;http://text.baldanders.info/golang/go-module-aware-mode/&#34; title=&#34;モジュール対応モードへの移行を検討する&#34;&gt;モジュール対応モード&lt;/a&gt;に対応していないらしいので &lt;a href=&#34;https://github.com/stamblerre/gocode&#34; title=&#34;stamblerre/gocode: An autocompletion daemon for the Go programming language&#34;&gt;stamblerre/gocode&lt;/a&gt; を手動でインストールする必要がある。実は &lt;a href=&#34;https://atom.io/packages/ide-go&#34;&gt;ide-go&lt;/a&gt; で &lt;a href=&#34;https://github.com/sourcegraph/go-langserver&#34; title=&#34;sourcegraph/go-langserver: Go language server to add Go support to editors and other tools that use the Language Server Protocol (LSP)&#34;&gt;go-langserver&lt;/a&gt; を駆動させていたのだが &lt;a href=&#34;https://atom.io/packages/ide-go&#34;&gt;ide-go&lt;/a&gt; 自体が &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; を要求するので意味がなかったっぽい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:gp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:om1&#34;&gt;私は使わないが &lt;a href=&#34;https://atom.io/packages/org-mode&#34;&gt;org-mode&lt;/a&gt; パッケージもあるらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:om1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Firefox の Cipher Suite - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/12/cipher-suite-in-firefox/" />
		<id>tag:text.Baldanders.info,2018-12-16:/remark/2018/12/cipher-suite-in-firefox/</id>
		<published>2018-12-16T11:24:32+09:00</published>
		<updated>2018-12-16T17:55:21+09:00</updated>
		<summary>たまには Firefox のことも思い出してあげてください</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://note.mu/note_s/n/n517ff243e083&#34;&gt;J-STAGEがFirefoxでのアクセスを遮断、日本の電子ジャーナルが世界から不可視となった日｜Guest｜note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事を読んで以下のように思わなかっただろうか。&lt;/p&gt;

&lt;p&gt;「Firefox 側が &lt;code&gt;TLS_RSA_WITH_AES_256_CBC_SHA256&lt;/code&gt; あたりを用意すればええんちゃうん？」&lt;/p&gt;

&lt;p&gt;私は思った。
&lt;a href=&#34;https://www.jstage.jst.go.jp/&#34;&gt;J-STAGE&lt;/a&gt; というサイトや運営している &lt;a href=&#34;https://www.jst.go.jp/&#34; title=&#34;国立研究開発法人 科学技術振興機構&#34;&gt;JST&lt;/a&gt; という組織をよく知らないので，なんでそこまで悪意たっぷりに書かれるのかよく分からないが，もうちょっと書きようがあるだろうに。&lt;/p&gt;

&lt;h2 id=&#34;tls-cipher-suite&#34;&gt;TLS Cipher Suite&lt;/h2&gt;

&lt;p&gt;まず TLS (Transport Layer Security) Version 1.2 の仕様を記した &lt;a href=&#34;https://tools.ietf.org/html/rfc5246&#34; title=&#34;RFC 5246 - The Transport Layer Security (TLS) Protocol Version 1.2&#34;&gt;RFC 5246&lt;/a&gt; によると “&lt;a href=&#34;https://tools.ietf.org/html/rfc5246#section-9&#34;&gt;Mandatory Cipher Suites&lt;/a&gt;” というのがあって，この中で &lt;code&gt;TLS_RSA_WITH_AES_128_CBC_SHA&lt;/code&gt; を MUST に定めている。
したがって，上述のリンク先の記事でこれがないことについて「TLS仕様違反」と断じている点は間違いない。&lt;/p&gt;

&lt;p&gt;この場合，サーバ側の対応としては， NSS なら &lt;code&gt;TLS_RSA_WITH_AES_128_CBC_SHA&lt;/code&gt;， OpenSSL なら &lt;code&gt;AES128-SHA&lt;/code&gt; を有効にすればいいわけだ。&lt;/p&gt;

&lt;p&gt;一方， Firefox はどうなっているかというと &lt;code&gt;about:config&lt;/code&gt; を開いて “&lt;code&gt;ssl3&lt;/code&gt;” で検索すると出てくる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./cipher-suite-in-firefox.png&#34;&gt;&lt;img src=&#34;./cipher-suite-in-firefox.png&#34; srcset=&#34;./cipher-suite-in-firefox.png 643w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Cipher Suite in Firefox&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;./cipher-suite-in-firefox.png&#34;&gt;Cipher Suite in Firefox&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ちなみにこれは Firefox Developer Edition 65 の場合である。
一応，抜き書きすると&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.dhe_rsa_aes_128_sha&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.dhe_rsa_aes_256_sha&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.ecdhe_ecdsa_aes_128_gcm_sha256&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.ecdhe_ecdsa_aes_128_sha&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.ecdhe_ecdsa_aes_256_gcm_sha384&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.ecdhe_ecdsa_aes_256_sha&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.ecdhe_ecdsa_chacha20_poly1305_sha256&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.ecdhe_rsa_aes_128_gcm_sha256&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.ecdhe_rsa_aes_128_sha&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.ecdhe_rsa_aes_256_gcm_sha384&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.ecdhe_rsa_aes_256_sha&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.ecdhe_rsa_chacha20_poly1305_sha256&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.rsa_aes_128_sha&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.rsa_aes_256_sha&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;security.ssl3.rsa_des_ede3_sha&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となっている。
これを見ると &lt;code&gt;TLS_RSA_...&lt;/code&gt; から始まる古い cipher suite は殆ど対応していないことが分かる（mandatory cipher suites を除けば2つのみ）。
Firefox 側の思惑は不明だが，古い cipher suite は PFS (Perfect Forward Secrecy) に対応してない（できない）ため意図的に外してる可能性もある。&lt;/p&gt;

&lt;h2 id=&#34;cipher-suites-for-modern-browser&#34;&gt;Cipher Suites for Modern Browser&lt;/h2&gt;

&lt;p&gt;（おそらくもうサポートされていない）古いブラウザを切り捨てていいのであれば，以下の cipher suite をサポートしておけば問題ないらしい。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HEX&lt;/th&gt;
&lt;th&gt;IANA&lt;/th&gt;
&lt;th&gt;OpenSSL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0xC0,0x2C&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ECDHE-ECDSA-AES256-GCM-SHA384&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0xC0,0x30&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ECDHE-RSA-AES256-GCM-SHA384&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0xCC,0xA9&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ECDHE-ECDSA-CHACHA20-POLY1305&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0xCC,0xA8&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ECDHE-RSA-CHACHA20-POLY1305&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0xC0,0x2B&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ECDHE-ECDSA-AES128-GCM-SHA256&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0xC0,0x2F&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0xC0,0x24&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ECDHE-ECDSA-AES256-SHA384&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0xC0,0x28&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ECDHE-RSA-AES256-SHA384&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0xC0,0x23&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ECDHE-ECDSA-AES128-SHA256&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0xC0,0x27&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ECDHE-RSA-AES128-SHA256&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;これらの cipher suite は Firefox 27 以降, Chrome 30 以降, IE 11 以降, Edge, Opera 17 以降, Safari 9 以降, Android 5.0 以降, Java 8 以降であれば対応している。&lt;/p&gt;

&lt;h2 id=&#34;たまには-firefox-のことも思い出してあげてください&#34;&gt;たまには Firefox のことも思い出してあげてください&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/12/software-diversity/&#34; title=&#34;オープンソースはコードの多様性を担保しない&#34;&gt;以前も書いた&lt;/a&gt;が，携帯端末も含めれば Chrome/Chromium と Safari/WebKit でほぼ寡占状態と言ってよい。
そういった状況の中で Firefox も対応しろと言われてもかったるいかもしれないし，実際に私が関わったことのある案件でも Chrome や Edge での動作確認はするのに Firefox はスルーするところも結構あったりした。
特定企業への依存度が減るんだから，むしろ Firefox は推奨されていいと思うんだけどねぇ。&lt;/p&gt;

&lt;p&gt;少なくとも HTTPS 接続で Firefox を&lt;ruby&gt;&lt;rb&gt;村八分&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;ハブ&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;にする理由はないと思うので，是非ともよろしくお願いします。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.mozilla.org/en-US/questions/1119007&#34;&gt;How can I disable arbitrary SSL/TLS cipher suites in Firefox? | Firefox Support Forum | Mozilla Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.mozilla.org/Security/Server_Side_TLS&#34;&gt;Security/Server Side TLS - MozillaWiki&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7905&#34;&gt;RFC 7905 - ChaCha20-Poly1305 Cipher Suites for Transport Layer Security (TLS)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.ssllabs.com/ssltest/&#34;&gt;SSL Server Test (Powered by Qualys SSL Labs)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cc.dcsec.uni-hannover.de/&#34;&gt;SSL Cipher Suites Supported By Your Browser&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/mozilla/cipherscan&#34;&gt;GitHub - mozilla/cipherscan: A very simple way to find out which SSL ciphersuites are supported by a target.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/square/certigo&#34;&gt;GitHub - square/certigo: A utility to examine and validate certificates in a variety of formats&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2017/10/key-parameters/&#34;&gt;暗号鍵関連の各種変数について&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; height=&#34;160&#34; alt=&#34;暗号技術入門 第3版　秘密の国のアリス&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.15&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「暗号資産」とやら - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2018/12/crypto-assets/" />
		<id>tag:text.Baldanders.info,2018-12-15:/remark/2018/12/crypto-assets/</id>
		<published>2018-12-15T19:45:29+09:00</published>
		<updated>2018-12-15T19:45:29+09:00</updated>
		<summary>官製用語あるいは法律用語として「暗号資産」を国際的に統一しましょうということのようだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;世間では「暗号通貨（cryptocurrency）」と呼ばれている「仮想通貨」。
金融庁でも一貫して「仮想通貨」と呼んでいたようだが，今後は「暗号資産（crypto-assets）」に統一するらしい。&lt;/p&gt;

&lt;p&gt;「暗号資産」の呼び名は，どうやら今年の G20 から始まっているらしい。
G20 ブエノスアイレス・サミットの首脳宣言でも以下のように記されている。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;We will regulate crypto-assets for anti-money laundering and countering the financing of terrorism in line with FATF standards and we will consider other responses as needed.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://ja.scribd.com/document/394632165/Buenos-Aires-Leaders-Declaration&#34;&gt;G20 Leaders’ declaration Building consensus for fair and sustainable development; section 25&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;金融庁の「&lt;a href=&#34;https://www.fsa.go.jp/news/30/singi/20181214.html&#34;&gt;「仮想通貨交換業等に関する研究会」（第11回）議事次第&lt;/a&gt;」によると&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;一方で、最近では、国際的な議論の場において、“crypto-asset”（「暗号資産」）との表現が用いられつつある。また、現行の資金決済法において、仮想通貨交換業者に対して、法定通貨との誤認防止のための顧客への説明義務を課しているが、なお「仮想通貨」の呼称は誤解を生みやすい、との指摘もある。こうした国際的な動向等を踏まえれば、法令上、「仮想通貨」の呼称を「暗号資産」に変更することが考えられる。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.fsa.go.jp/news/30/singi/20181214-1.pdf&#34;&gt;仮想通貨交換業等に関する研究会 報告書（案）&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ということで，官製用語あるいは法律用語として「暗号資産」に，国際化をにらんで，統一しましょうということのようだ。
といっても世間では「暗号通貨」として広まりきっているのに今さら「暗号資産」とか余計に混乱を招くのではないかと思うのだが... まぁ知ったこっちゃないか。&lt;/p&gt;

&lt;p&gt;私は Bitcoin を勉強し始めた頃からこれを「補完通貨」と認識している。
補完通貨が通貨ではなく資産として機能し始めるというのは，その通貨の「終わりの始まり」である。&lt;/p&gt;

&lt;p&gt;ちなみに「暗号通貨」だろうが「暗号資産」だろうが（確かに暗号技術は使われているが）暗号の要素など1ミリもないと&lt;a href=&#34;http://text.baldanders.info/remark/2018/01/cryptocurrency-are-not-crypto/&#34; title=&#34;「暗号通貨」ってゆーな！&#34;&gt;重ねて&lt;/a&gt;主張しておく。
それこそ誤解を招く言葉である。&lt;/p&gt;

&lt;p&gt;というわけで，これが「仮想通貨」に関する今年の締めの記事になりそう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.fsb.org/wp-content/uploads/P160718-1.pdf&#34;&gt;Crypto-assets; Report to the G20 on work by the FSB and standard-setting bodies &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://saudigazette.com.sa/article/549293/World/America/G20-nations-agree-to-reform-WTO-in-joint-declaration&#34;&gt;G20 nations agree to reform WTO in joint declaration - Saudi Gazette&lt;/a&gt; : 全文テキスト&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://cruel.org/krugman/babysitj.html&#34;&gt;Krugman: Baby Sitting the Economy (経済を子守りしてみると。)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/01/cryptocurrency-are-not-crypto/&#34;&gt;「暗号通貨」ってゆーな！&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/02/blockchain-and-pki/&#34;&gt;「仮想通貨」と公開鍵基盤&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2018/05/internet-as-a-class-system/&#34;&gt;階級社会としてのインターネット&lt;/a&gt;
&lt;!-- eof --&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>GnuPG 2.2.12 のリリース - release</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/release/2018/12/gnupg-2_2_12-released/" />
		<id>tag:text.Baldanders.info,2018-12-15:/release/2018/12/gnupg-2_2_12-released/</id>
		<published>2018-12-15T18:01:01+09:00</published>
		<updated>2018-12-15T18:01:01+09:00</updated>
		<summary>今回もセキュリティ・アップデートはなし。機能追加がいくつか。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="http://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.2.12 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2018q4/000433.html&#34;&gt;[Announce] GnuPG 2.2.12 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回もセキュリティ・アップデートはなし。
主な機能追加・修正点は以下の通り。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;tools: New commands &lt;code&gt;--install-key&lt;/code&gt; and &lt;code&gt;--remove-key&lt;/code&gt; for gpg-wks-client.  This allows to prepare a Web Key Directory on a local file system for later upload to a web server.&lt;/li&gt;
&lt;li&gt;gpg: New &lt;code&gt;--list-option&lt;/code&gt; &amp;quot;show-only-fpr-mbox&amp;quot;.  This makes the use of the new gpg-wks-client &lt;code&gt;--install-key&lt;/code&gt; command easier on Windows.&lt;/li&gt;
&lt;li&gt;gpg: Improve processing speed when &lt;code&gt;--skip-verify&lt;/code&gt; is used.&lt;/li&gt;
&lt;li&gt;gpg: Fix a bug where a LF was accidentally written to the console.&lt;/li&gt;
&lt;li&gt;gpg: --card-status now shwos whether a card has the new KDF feature enabled.&lt;/li&gt;
&lt;li&gt;agent: New runtime option &lt;code&gt;--s2k-calibration=MSEC&lt;/code&gt;.  New configure option &lt;code&gt;--with-agent-s2k-calibration=MSEC&lt;/code&gt;. [&lt;a href=&#34;https://dev.gnupg.org/T3399&#34;&gt;https://dev.gnupg.org/T3399&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;dirmngr: Try another keyserver from the pool on receiving a 502, 503, or 504 error.  [&lt;a href=&#34;https://dev.gnupg.org/T4175&#34;&gt;https://dev.gnupg.org/T4175&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;dirmngr: Avoid possible CSRF attacks via http redirects.  A HTTP query will not anymore follow a 3xx redirect unless the Location header gives the same host.  If the host is different only the host and port is taken from the Location header and the original path and query parts are kept.&lt;/li&gt;
&lt;li&gt;dirmngr: New command FLUSHCRL to flush all CRLS from disk and memory.  [&lt;a href=&#34;https://dev.gnupg.org/T3967&#34;&gt;https://dev.gnupg.org/T3967&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;New simplified Chinese translation (zh_CN).&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2018q4/000433.html&#34;&gt;GnuPG 2.2.12 released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;最新版をインストールすると以下のようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ gpg --version
gpg (GnuPG) 2.2.12
libgcrypt 1.8.4
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: ********
サポートしているアルゴリズム:
公開鍵: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
暗号方式: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
    CAMELLIA128, CAMELLIA192, CAMELLIA256
ハッシュ: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
圧縮: 無圧縮, ZIP, ZLIB, BZIP2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;アップデートは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/openpgp/&#34;&gt;OpenPGP の実装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; width=&#34;113&#34; height=&#34;160&#34; alt=&#34;暗号技術入門 第3版　秘密の国のアリス&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ&lt;/dd&gt;
    &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
    &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.12.15&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 1.11.4 のリリース - release</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/release/2018/12/go-1_11_4-is-released/" />
		<id>tag:text.Baldanders.info,2018-12-15:/release/2018/12/go-1_11_4-is-released/</id>
		<published>2018-12-15T16:00:33+09:00</published>
		<updated>2018-12-15T16:00:33+09:00</updated>
		<summary>今回はセキュリティアップデートはないが，前回のリリースに間に合わなかった修正が反映されている。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="release" label="release" scheme="http://text.baldanders.info/release" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラの 1.11.4 および 1.10.7 がリリースされた。
今回はセキュリティアップデートはないが，前回のリリースに間に合わなかった修正が反映されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/7LQy56br6Y4&#34;&gt;Go 1.11.4 and Go 1.10.7 are released - Google group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.4+label%3ACherryPickApproved&#34;&gt;Go 1.11.4 milestone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Type alias 周りの修正が多いねぇ。
あと HTTP/2 関連の修正もある。&lt;/p&gt;

&lt;p&gt;アップデートは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;参考図書&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; height=&#34;160&#34; alt=&#34;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/exec/obidos/ASIN/4621300253/baldandersinf-22&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;Alan A.A. Donovan, Brian W. Kernighan&lt;/dd&gt;
      &lt;dd&gt;丸善出版&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
      &lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018.10.19&lt;/abbr&gt; (powered by &lt;a href=&#34;https://dadadadone.com/amakuri/&#34; &gt;Amakuri&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
