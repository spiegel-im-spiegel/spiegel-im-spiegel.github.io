<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2015-09-20T14:11:36+0900:/</id>
	<updated>2015-09-20T14:11:36+0900</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」 （プレ・オープン中）</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>内容に関係のない広告で掠りをとるやり方はゼロ年代で終わってる - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/adblock/" />
		<id>tag:text.Baldanders.info,2015-09-20T14:11:36+0900:/remark/2015/adblock/</id>
		<published>2015-09-20T14:11:36+0900</published>
		
		<summary>ユーザはバカではない。Web 上にあるものの何に価値があるのか既に知っている。価値の無いものにいくら広告を付けても，その事自体が忌避の対象になるだけだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;何故だかよく分からないのだが，私の観測範囲で広告ブロックアプリが話題になっているようなので，便乗して書いておく。&lt;/p&gt;

&lt;p&gt;ちなみに私は広告ブロックツール自体は使ってない。
そのツールを使うこと自体が鬱陶しいし，セキュリティ上ヤバそうな場所（アダルトサイトや儲け話をするサイト）には行かないことにしている。
しかし，私が携帯端末で使っている VPN アプリ &lt;a href=&#34;https://www.f-secure.com/en/web/home_global/freedome&#34;&gt;Freedome&lt;/a&gt; は追跡用のコードをブロックしているため，追跡型広告は事実上ブロックしていることになる。
実際 &lt;a href=&#34;https://www.f-secure.com/en/web/home_global/freedome&#34;&gt;Freedome&lt;/a&gt; だけでかなりの数をブロックしているようだ。&lt;/p&gt;

&lt;p&gt;追跡コードをブロックするとトラフィックが改善するという報告はある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50754459.html&#34;&gt;エフセキュアブログ : 新たな調査で、オンライントラッキングがWebブラウジングを遅延させることが判明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50754721.html&#34;&gt;エフセキュアブログ : Freedomeの追跡保護を比較&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サイト運営者はこのことをもっと重く捉えるべきだと思う。
その追跡コードは本当に必要なのですか？&lt;/p&gt;

&lt;p&gt;広告の是非については Web 2.0 から言われていることで今更感が漂う話ではあるが，ひとつ言えるのは「内容に関係のない広告で掠りをとるやり方はゼロ年代で終わってる」ということだ。&lt;/p&gt;

&lt;p&gt;「広告がユーザを追い回す」現代では，広告は（ユーザから見て）明確にリスクである。
ユーザが広告をコントロールできるのでなければ「広告がユーザを追い回す」ことを喜ぶのは，その筋の方々だけだろう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:012c9285ac9ef5fdcb99c2fd55029b7d:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:012c9285ac9ef5fdcb99c2fd55029b7d:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
故にユーザが広告をブロックすることに対しサイト運営者が文句や愚痴を言うのは，全く以て言いがかりである。&lt;/p&gt;

&lt;p&gt;最近は&lt;a href=&#34;http://qiita.com/osamu1203/items/c0e92b3ac661046dfd79&#34;&gt;ユーザが広告をブロックすると記事を見せなくするツール&lt;/a&gt;があるそうだが，わざわざブロック・アプリを導入している人が，内容が見れないからといって広告ブロックを解除しようなどとは普通は考えないだろう。&lt;/p&gt;

&lt;p&gt;現在はクリエイターが自身の activity を通してコンテンツの価値を上げマネタイズしていく時代である。
日本の &lt;a href=&#34;https://note.mu/&#34;&gt;note.nu&lt;/a&gt; なんてまんまその発想だし，もっと広く見回してみれば platisher (platform＋publisher) の議論なども当てはまるだろう。&lt;/p&gt;

&lt;p&gt;ユーザはバカではない。
Web 上にあるものの何に価値があるのか既に知っている。
価値の無いものにいくら広告を付けても，その事自体が忌避の対象になるだけだ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:012c9285ac9ef5fdcb99c2fd55029b7d:1&#34;&gt;これを比較的うまくやっているのが，実は Facebook である。  Facebook ではタイムライン上に現れる広告をある程度（いや，かなり）&lt;a href=&#34;http://blog.f-secure.jp/archives/50750076.html&#34;&gt;チューニングできる&lt;/a&gt;。完全にコントロールできるわけではないのが惜しいけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:012c9285ac9ef5fdcb99c2fd55029b7d:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>String と Rune - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/string-and-rune/" />
		<id>tag:text.Baldanders.info,2015-09-19T23:45:56+0900:/golang/string-and-rune/</id>
		<published>2015-09-19T23:45:56+0900</published>
		
		<summary>今回は文字列について。短めにさくっと。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/556166b6631c0369754f&#34;&gt;はじめての Go 言語 (on Windows) その4 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;文字列を示す &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; は不変（immutable）なオブジェクトだが，中身は byte 配列である。
したがって以下のように&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;
	size := len(nihongo)

	fmt.Printf(&amp;quot;nihongo = %d bytes :&amp;quot;, size)
	for i := 0; i &amp;lt; size; i++ {
		fmt.Printf(&amp;quot; %x&amp;quot;, nihongo[i])
	}
	fmt.Print(&amp;quot;\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; をダンプすると以下の結果になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string01.go
nihongo = 9 bytes : e6 97 a5 e6 9c ac e8 aa 9e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（ちなみに &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で取り扱う文字列の文字エンコーディングは UTF-8 が既定である。
他の文字エンコーディングで書かれた文字列を扱うには，一度 UTF-8 に変換する処理が必要になる。
文字エンコーディングの変換については項を改めて紹介する）&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; なんて名前なのに）文字単位で情報を保持しているわけではないため，最初の2文字を取り出すつもりでうっかり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	fmt.Printf(&amp;quot;nihongo = %s\n&amp;quot;, nihongo)
	fmt.Printf(&amp;quot;nippon = %s\n&amp;quot;, nihongo[:2])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんてなコードを書くと以下の結果になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string02.go
nihongo = 日本語
nippon = ��
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文字列を文字単位で扱うには &lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; を使う。
いや，ルーンってどんだけ厨二&amp;hellip; ゲフンゲフン。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;
	nihongoRune := []rune(nihongo)
	size := len(nihongoRune)

	fmt.Printf(&amp;quot;nihongo = %d characters : &amp;quot;, size)
	for i := 0; i &amp;lt; size; i++ {
		fmt.Printf(&amp;quot;%#U &amp;quot;, nihongoRune[i])
	}
	fmt.Printf(&amp;quot;\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run string03.go
nihongo = 3 characters : U+65E5 &#39;日&#39; U+672C &#39;本&#39; U+8A9E &#39;語&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;または， &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; に対して for range を使ってループを回すと文字（&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt;）単位で取得できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	for pos, runeValue := range nihongo {
		fmt.Printf(&amp;quot;%#U starts at byte position %d\n&amp;quot;, runeValue, pos)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run string03b.go
U+65E5 &#39;日&#39; starts at byte position 0
U+672C &#39;本&#39; starts at byte position 3
U+8A9E &#39;語&#39; starts at byte position 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; の実体は int32 で，内部的には Unicode 表現になっている。
&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; と &lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; は相互変換できるので，文字列を切り取る場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	nihongo := &amp;quot;日本語&amp;quot;

	fmt.Printf(&amp;quot;nihongo = %s\n&amp;quot;, nihongo)
	fmt.Printf(&amp;quot;nippon = %s\n&amp;quot;, string([]rune(nihongo)[:2]))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; → []&lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; → &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; と変換していけば安全に処理できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run string02b.go
nihongo = 日本語
nippon = 日本
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もう少し細かい処理が必要なら &lt;a href=&#34;http://golang.org/pkg/unicode/utf8/&#34;&gt;&lt;code&gt;unicode/utf8&lt;/code&gt;&lt;/a&gt; パッケージを使う手もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:22aba2fd29e0e069728fb8201971f262&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/strings&#34;&gt;Strings, bytes, runes and characters in Go - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://knightso.hateblo.jp/entry/2014/06/24/090719&#34;&gt;Go言語のstring, runeの正体とは？ - golang - The Round&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hokaccha/items/3d3f45b5927b4584dbac&#34;&gt;golang - Goでマルチバイトが混在した文字列をtruncateする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uchiko/items/1810ddacd23fd4d3c934&#34;&gt;golang - Go言語で文字コード変換 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;ちなみに &lt;a href=&#34;http://golang.org/pkg/strings/&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt; パッケージは内部で &lt;a href=&#34;http://golang.org/pkg/unicode/utf8/&#34;&gt;&lt;code&gt;unicode/utf8&lt;/code&gt;&lt;/a&gt; パッケージを使っているようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:22aba2fd29e0e069728fb8201971f262:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語のドキュメント・フレームワーク - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/document/" />
		<id>tag:text.Baldanders.info,2015-09-19T23:43:25+0900:/golang/document/</id>
		<published>2015-09-19T23:43:25+0900</published>
		
		<summary>パッケージ化したのならドキュメントを書きましょう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/5f9e96f226f46089388f&#34;&gt;はじめての Go 言語 (on Windows) その8 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/testing/&#34; title=&#34;Go 言語のテスト・フレームワーク&#34;&gt;前回&lt;/a&gt;の続き。
パッケージ化したのならドキュメントを書きましょう。&lt;/p&gt;

&lt;h2 id=&#34;godoc-のインストール:7445d9e511c27034085e252d0df49931&#34;&gt;godoc のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://godoc.org/golang.org/x/tools/cmd/godoc&#34; title=&#34;godoc - GoDoc&#34;&gt;&lt;code&gt;godoc&lt;/code&gt;&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のドキュメント化ツールです。
&lt;code&gt;go get&lt;/code&gt; コマンドで導入できます。（&lt;code&gt;go get&lt;/code&gt; コマンドについては「&lt;a href=&#34;http://text.baldanders.info/golang/go-get-package/&#34;&gt;go get コマンドでパッケージを管理する&lt;/a&gt;」を参照）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;mkdir C:\workspace\godoc

C:&amp;gt;cd C:\workspace\godoc

C:\workspace\godoc&amp;gt;SET GOPATH=C:\workspace\godoc

C:\workspace\godoc&amp;gt;go get -v golang.org/x/tools/cmd/godoc
Fetching https://golang.org/x/tools/cmd/godoc?go-get=1
Parsing meta tags from https://golang.org/x/tools/cmd/godoc?go-get=1 (status code 200)
get &amp;quot;golang.org/x/tools/cmd/godoc&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;golang.org/x/tools&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://go.googlesource.com/tools&amp;quot;} at https://golang.org/x/tools/cmd/godoc?go-get=1
get &amp;quot;golang.org/x/tools/cmd/godoc&amp;quot;: verifying non-authoritative meta tag
Fetching https://golang.org/x/tools?go-get=1
Parsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)
golang.org/x/tools (download)
golang.org/x/tools/blog/atom
golang.org/x/tools/present
golang.org/x/tools/go/ast/astutil
golang.org/x/tools/go/exact
golang.org/x/tools/go/buildutil
golang.org/x/tools/go/types
golang.org/x/tools/container/intsets
golang.org/x/tools/blog
golang.org/x/tools/godoc/vfs
golang.org/x/tools/godoc/redirect
golang.org/x/tools/godoc/static
golang.org/x/tools/playground
golang.org/x/tools/godoc/util
golang.org/x/tools/go/types/typeutil
golang.org/x/tools/go/loader
golang.org/x/tools/godoc/vfs/httpfs
golang.org/x/tools/godoc/vfs/gatefs
golang.org/x/tools/godoc/vfs/mapfs
golang.org/x/tools/godoc/vfs/zipfs
golang.org/x/tools/go/ssa
golang.org/x/tools/go/callgraph
golang.org/x/tools/go/ssa/ssautil
golang.org/x/tools/go/pointer
golang.org/x/tools/godoc/analysis
golang.org/x/tools/godoc
golang.org/x/tools/cmd/godoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに &lt;code&gt;godoc&lt;/code&gt; の実行モジュールは &lt;code&gt;%GOPATH\bin&lt;/code&gt; フォルダではなく &lt;code&gt;%GOROOT%\bin&lt;/code&gt; フォルダに格納されます。
これで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;godoc time
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかやるとパッケージ（この場合は &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージ）のドキュメントが表示されるのですが，さすがにコマンドプロンプトでこれを見るのは辛いので， HTTP サービスを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;godoc -http=&amp;quot;:3000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでブラウザで &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; にアクセスするとドキュメントを見ることができます。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18026303435/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8788/18026303435_7b136c64bb.jpg&#34; alt=&#34;godoc&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18026303435/&#34;&gt;godoc&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;たとえば &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージはこんなふうに表示されます。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023061102/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8847/18023061102_e5474f1ddc.jpg&#34; alt=&#34;godoc: time package&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023061102/&#34;&gt;godoc: time package&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;本家サイトと同じですね。&lt;/p&gt;

&lt;h3 id=&#34;godoc-で-modjulian-パッケージを見てみる:7445d9e511c27034085e252d0df49931&#34;&gt;godoc で modjulian パッケージを見てみる&lt;/h3&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34;&gt;機能のパッケージ化&lt;/a&gt;」で作った &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34;&gt;&lt;code&gt;github.com/spiegel-im-spiegel/astrocalc&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/modjulian&lt;/code&gt; はどうなっているでしょう。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023689372/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8831/18023689372_08795d4e8e.jpg&#34; alt=&#34;godoc: package list&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18023689372/&#34;&gt;godoc: package list&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17839022348/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8835/17839022348_4315878c95.jpg&#34; alt=&#34;godoc: modjulian package&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17839022348/&#34;&gt;godoc: modjulian package&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;全くコメントがないので，さすがに一覧には何もないですが，個別ページには最小限の情報が載っています。凄いなぁ。&lt;/p&gt;

&lt;h2 id=&#34;modjulian-パッケージにドキュメント用のコメントを追記する:7445d9e511c27034085e252d0df49931&#34;&gt;modjulian パッケージにドキュメント用のコメントを追記する&lt;/h2&gt;

&lt;p&gt;では，ソースコードを少しいじってドキュメント用のコードを追記してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/**
 * Astronomical calculation for Golang.
 * These codes are licensed under CC0.
 * http://creativecommons.org/publicdomain/zero/1.0/deed.ja
 */

// modjulian パッケージは
// 修正ユリウス日（Modified Julian Date）の計算を行います。
package modjulian

import &amp;quot;time&amp;quot;

// DayNumber は
// 日付から修正ユリウス通日を取得します。
//
//   t := time.Date(2015, 1, 1, 0, 0, 0, 0, time.UTC)
//   fmt.Print(modjulian.DayNumber(t)) //57023
//
// 時刻（時分秒）は無視します。
// 1970年1月1日以前のグレゴリオ暦では Fliegel の公式を使って計算します。
// 1970年1月1日以降は UNIX Time を用いて通日を取得します。
func DayNumber(t time.Time) int64 {
	if t.Sub(time.Unix(0, 0)) &amp;gt;= 0 {
		return dnUnix(t)
	} else {
		return dnGregorian(t)
	}
}

// dnGregorian は
// Fliegel の公式を使い，日付から修正ユリウス通日を計算します。
//
// 時刻（時分秒）は無視します。
func dnGregorian(t time.Time) int64 {
	y := int64(t.Year())
	m := int64(t.Month())
	if m &amp;lt; 3 {
		y -= 1
		m += 9
	} else {
		m -= 3
	}
	d := int64(t.Day()) - 1
	return (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
}

// dnUnix は
// UNIX Time で1970年1月1日からの通日を取得し，修正ユリウス通日を計算します。
//
// 時刻（時分秒）は無視します。
// 1970年1月1日以前の日付では正しく計算できません。
func dnUnix(t time.Time) int64 {
	const (
		onday   = int64(86400) //seconds
		baseDay = int64(40587) //Modified Julian Date at January 1, 1970
	)
	return (t.Unix())/onday + baseDay
}
&lt;/code&gt;&lt;/pre&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18002607746/&#34;&gt;&lt;img src=&#34;https://farm8.staticflickr.com/7732/18002607746_9990483503.jpg&#34; alt=&#34;godoc: package list&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/18002607746/&#34;&gt;godoc: package list&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17408544863/&#34;&gt;&lt;img src=&#34;https://farm9.staticflickr.com/8897/17408544863_f0f5649e32.jpg&#34; alt=&#34;godoc: modjulian 2&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17408544863/&#34;&gt;godoc: modjulian 2&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;日本語ですみません。
英語不得手なもので。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;パッケージのコメントは &lt;code&gt;package&lt;/code&gt; 指定の直前のコメントが有効になる。（ファイル先頭のコメントは反映されない）&lt;/li&gt;
&lt;li&gt;パッケージリストの説明はパッケージ・コメントの最初の1文のみ表示される（日本語の句読点も理解しているらしい）&lt;/li&gt;
&lt;li&gt;関数等のコメントはそれぞれの記述の直前のコメントが有効になる。&lt;/li&gt;
&lt;li&gt;基本的に改行は無視される。ただし空行があれば別のパラグラフと理解しているようだ。&lt;/li&gt;
&lt;li&gt;空白文字2文字のインデントでコード記述領域（HTML 的には &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 要素）とみなしているらしい。コードを書く必要はないけど。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上の例では説明のためにコメント内にサンプルコードを載せましたが，サンプルコードを記述するのであればもっとスマートな方法があります。
それはテストにサンプルコードを含める方法です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package modjulian_test

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func ExampleDayNumber() {
	t := time.Date(2015, 1, 1, 0, 0, 0, 0, time.UTC)
	fmt.Print(modjulian.DayNumber(t))
	// Output:
	// 57023
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このようなテスト &lt;code&gt;example_test.go&lt;/code&gt; を作ると，ドキュメントが以下のようになります。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17843944479/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5327/17843944479_024f2f4073.jpg&#34; alt=&#34;godoc: modjulian 3&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/17843944479/&#34;&gt;godoc: modjulian 3&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;もちろん，テストもできます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\jd&amp;gt;go test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- PASS: TestDayNumber (0.00s)
=== RUN   ExampleDayNumber
--- PASS: ExampleDayNumber (0.00s)
PASS
ok      github.com/spiegel-im-spiegel/astrocalc/modjulian       2.755s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この仕組みを使えばサンプルコードを常に最新の仕様にマッチさせることが可能になります。
プログラマにとってドキュメントで一番欲しいのはサンプルコードなので，サンプルコードさえ正しければ，他はそれほど詳細に書かなくても推測できます。
そういう意味で，このようなテストと連動したドキュメント・フレームワークはなかなかおもしろいと思います。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:7445d9e511c27034085e252d0df49931&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/megu_ma/items/2066aef2f8c7f0ce2cc3&#34;&gt;Go で godoc を使えるようにする〜godoc のインストール〜 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/05/26/go-code-review/&#34;&gt;Go言語のコードレビュー | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://papaeye.tumblr.com/post/92328649161/go&#34;&gt;Go コードのレビュー時によくされるコメント - build error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20131101/1383285018&#34;&gt;testingパッケージのExamplesについて - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swdyh.tumblr.com/post/55771477125/go-example&#34;&gt;GoのExampleテストが便利 : swdyh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/taknb2nch/20140225/1393302743&#34;&gt;godoc.org への掲載方法を調べた - taknb2nchのメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語のテスト・フレームワーク - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/testing/" />
		<id>tag:text.Baldanders.info,2015-09-19T23:40:43+0900:/golang/testing/</id>
		<published>2015-09-19T23:40:43+0900</published>
		
		<summary>パッケージ化したのならテストをしましょう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/64224f22ef17d916dc2d&#34;&gt;はじめての Go 言語 (on Windows) その7 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34; title=&#34;機能のパッケージ化&#34;&gt;前回&lt;/a&gt;の続き。&lt;/p&gt;

&lt;h2 id=&#34;テストコードを書く:3047d71ccf1370a2898eb92c70273f56&#34;&gt;テストコードを書く&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では最初からテスト・フレームワークが同梱されています。
いまどきの言語はみんなそうですよね。
テストコードを書くには対象のソースファイルと同じフォルダに &lt;code&gt;*_test.go&lt;/code&gt; という名前のファイルを用意します。
まぁ，説明するより書いた方が早いですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package modjulian

import (
	&amp;quot;os&amp;quot;
	&amp;quot;testing&amp;quot;
	&amp;quot;time&amp;quot;
)

type mjdnTest struct { //test case for DayNumber
	in time.Time //input data
	out int64 //expected result
}

var mjdnTests []mjdnTest  //test cases for DayNumber

func TestMain(m *testing.M) {
	//initialization
 	mjdnTests = []mjdnTest {  //test cases for DayNumber
		{time.Date(1969, 12, 31, 0, 0, 0, 0, time.UTC), int64(40586)},
		{time.Date(1970,  1,  1, 0, 0, 0, 0, time.UTC), int64(40587)},
		{time.Date(2015,  1,  1, 0, 0, 0, 0, time.UTC), int64(57023)},
	}

	//start test
    code := m.Run()

	//termination
    os.Exit(code)
}

func TestModifiedJulianDayNumber(t *testing.T) {
	for _, testCase := range mjdnTests {
		result := DayNumber(testCase.in)
		if result != testCase.out {
			t.Errorf(&amp;quot;DayNumber of \&amp;quot;%v\&amp;quot; = %d, want %d.&amp;quot;, testCase.in, result, testCase.out)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;package&lt;/code&gt; にはテスト対象のパッケージを指定します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt; には &lt;a href=&#34;http://golang.org/pkg/testing/&#34;&gt;&lt;code&gt;testing&lt;/code&gt;&lt;/a&gt; パッケージを含めます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Test...&lt;/code&gt; で始まる関数名がテスト実行用の関数です。引数には &lt;code&gt;t *testing.T&lt;/code&gt; を指定します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TestMain()&lt;/code&gt; は特別な関数です。テストの最初に呼び出され， &lt;code&gt;Run()&lt;/code&gt; で他のテスト関数群をキックします。引数には &lt;code&gt;m *testing.M&lt;/code&gt; を指定します。 &lt;code&gt;TestMain()&lt;/code&gt; 内で初期化や条件を変えたテストの繰り返しや後始末処理などを行うことができます。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/pkg/testing/&#34;&gt;&lt;code&gt;testing&lt;/code&gt;&lt;/a&gt; パッケージには，他の言語のテスト・フレームワークによくある &lt;a href=&#34;http://golang.jp/go_faq#assertions&#34;&gt;assertion 関数がありません&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3047d71ccf1370a2898eb92c70273f56:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3047d71ccf1370a2898eb92c70273f56:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。 &lt;a href=&#34;http://golang.jp/go_faq#testing_framework&#34;&gt;FAQ&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3047d71ccf1370a2898eb92c70273f56:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3047d71ccf1370a2898eb92c70273f56:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; によると&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一般的なテストフレームワークにおいて条件・制御・出力機構を持つ専用のミニ言語が用意される傾向がありますが、Go言語にはすでにこれらが備わっています。これらを再び作成するより、我々はGo言語のテストを進めたかったのです。このようにしたことで余計な言語を覚える必要がなくなり、テストを直接的かつ理解しやすくしています。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあります。
テスト駆動型開発の場合，テストコードはそれ自体が設計書として機能しますので，この割り切りは妥当と言えます&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3047d71ccf1370a2898eb92c70273f56:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3047d71ccf1370a2898eb92c70273f56:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
その代わりテストコードを（ドキュメントとして）きちんと書くのは骨が折れますが（笑）&lt;/p&gt;

&lt;p&gt;テストコードが書けたので早速動かしてみましょう。
環境は&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34; title=&#34;機能のパッケージ化&#34;&gt;前回&lt;/a&gt;の最後の状態をそのまま引き継ぎます。&lt;/p&gt;

&lt;p&gt;テストを行うには &lt;code&gt;go test&lt;/code&gt; コマンドを使います。
以下の例ではパッケージを指定していますが， &lt;code&gt;./...&lt;/code&gt; と指定すれば全てのパッケージのテストが対象になります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\jd&amp;gt;go test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- PASS: TestDayNumber (0.00s)
PASS
ok      github.com/spiegel-im-spiegel/astrocalc/modjulian       0.229s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは成功例。じゃあ，&lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc/blob/master/modjulian/modjulian.go&#34;&gt;元のコード&lt;/a&gt;を少しいじってわざと失敗させてみましょうか（なんだかなぁ）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\jd&amp;gt;go test -v github.com/spiegel-im-spiegel/astrocalc/modjulian
=== RUN   TestDayNumber
--- FAIL: TestDayNumber (0.00s)
        modjulian_test.go:35: DayNumber of &amp;quot;1969-12-31 00:00:00 +0000 UTC&amp;quot; = 40587, want 40586.
FAIL
exit status 1
FAIL    github.com/spiegel-im-spiegel/astrocalc/modjulian       1.566s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーレポートを吐く &lt;code&gt;Errorf()&lt;/code&gt; は内部で &lt;code&gt;Fail()&lt;/code&gt; を呼び出し，テスト自体は続行します。
一方 &lt;code&gt;Errorf()&lt;/code&gt; の代わりに &lt;code&gt;Fatalf()&lt;/code&gt; を使うと，内部で &lt;code&gt;FailNow()&lt;/code&gt; を呼び出しテストを中断します。&lt;/p&gt;

&lt;p&gt;Go 言語のテスト・フレームワークでは benchmark や coverage もサポートしてますが，今回は割愛します。&lt;/p&gt;

&lt;h2 id=&#34;テストの自動化-continuous-integration:3047d71ccf1370a2898eb92c70273f56&#34;&gt;テストの自動化（Continuous Integration）&lt;/h2&gt;

&lt;p&gt;今回のコードは自動化するほどの規模でもないですが，話のついでに &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; で自動化しちゃいましょう。
えっと，今回は &lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; の説明は割愛します。
興味のある方は「&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34;&gt;ブックマーク&lt;/a&gt;」の項を参考にして下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/&#34; title=&#34;Travis CI - Test and Deploy Your Code with Confidence&#34;&gt;Travis CI&lt;/a&gt; でビルド・テストを行うためには &lt;code&gt;.travis.yml&lt;/code&gt; を書く必要がありますが，テストを行うだけなら &lt;code&gt;.travis.yml&lt;/code&gt; の記述は簡単です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;language: go

go:
  - 1.4
  - 1.5

script:
 - go test -v ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果は&lt;a href=&#34;https://travis-ci.org/spiegel-im-spiegel/astrocalc&#34;&gt;ここ&lt;/a&gt;を参照して下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/document/&#34; title=&#34;Go 言語のドキュメント・フレームワーク&#34;&gt;次回&lt;/a&gt;はドキュメントの話。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:3047d71ccf1370a2898eb92c70273f56&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/8717a5982547cfa54ebc&#34;&gt;Go の Test に対する考え方 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://straitwalk.hatenablog.com/entry/2014/09/18/232810&#34;&gt;Goでテストを書く - 成らぬは人の為さぬなりけり&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/umisama/items/0d589cca7e89b89c29a8&#34;&gt;golang 1.4で追加されたtestingの便利機能(テストの初期化とお片づけ) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/dmnlk/items/3fb4e0abb98e39fee275&#34;&gt;Go + Travis CI + Coveralls でCI環境を作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sue445.hatenablog.com/entry/2013/06/01/170607&#34;&gt;GithubにあるリポジトリをTravis CI連携する手順 #junitbook - くりにっき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/10/16/golang-in-ci-as-a-service/&#34;&gt;CI-as-a-ServiceでGo言語プロジェクトの最新ビルドを継続的に提供する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uchimanajet7.hatenablog.com/entry/2015/03/20/211352&#34;&gt;golangでTravis CIを使ってクロスコンパイルするときにハマったところ #golang #travisci - uchimanajet7のメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/atotto/items/b796c31c1755dbec13db&#34;&gt;Go言語のビルド生活を drone.ioで幸せに暮らす #golang - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:3047d71ccf1370a2898eb92c70273f56:1&#34;&gt;オリジナルは &lt;a href=&#34;http://golang-jp.org/doc/faq#assertions&#34;&gt;http://golang-jp.org/doc/faq#assertions&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3047d71ccf1370a2898eb92c70273f56:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3047d71ccf1370a2898eb92c70273f56:2&#34;&gt;オリジナルは &lt;a href=&#34;http://golang-jp.org/doc/faq#testing_framework&#34;&gt;http://golang-jp.org/doc/faq#testing_framework&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3047d71ccf1370a2898eb92c70273f56:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3047d71ccf1370a2898eb92c70273f56:3&#34;&gt;私は組み込みエンジニアなので，プログラミングで assert を多用するのは，エンジニアの怠慢だと思ってしまいます。まぁ，ベクタ・テーブルからゴリゴリ書くってのなら別ですが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3047d71ccf1370a2898eb92c70273f56:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>機能のパッケージ化 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/packaging/" />
		<id>tag:text.Baldanders.info,2015-09-19T22:41:30+0900:/golang/packaging/</id>
		<published>2015-09-19T22:41:30+0900</published>
		
		<summary>description</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/404871d2bafd22bdbb90&#34;&gt;はじめての Go 言語 (on Windows) その6 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/julian-day-number/&#34; title=&#34;「ユリウス日」で遊ぶ&#34;&gt;前回&lt;/a&gt;の続き。
なんだけど，今回はパッケージのお話。
ユリウス日の計算なんて簡単なので今まで &lt;code&gt;main()&lt;/code&gt; 関数の中にゴリゴリ書いてましたが，今後のことを考えて，これを使ってパッケージ化の作業を行うことにします。&lt;/p&gt;

&lt;h2 id=&#34;ユリウス日計算のパッケージ化:bf561d8ea0bbb40075d9094acab07703&#34;&gt;ユリウス日計算のパッケージ化&lt;/h2&gt;

&lt;p&gt;まずは，&lt;a href=&#34;http://text.baldanders.info/golang/julian-day-number/&#34; title=&#34;「ユリウス日」で遊ぶ&#34;&gt;前回&lt;/a&gt;のコードから計算処理部分をきちんと分離します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;
)

func ModifiedJulianDayNumber(t time.Time) int64 {
	if t.Sub(time.Unix(0, 0)) &amp;gt;= 0 {
		return mjdnUnix(t)
	} else {
		return mjdnGregorian(t)
	}
}

func mjdnGregorian(t time.Time) int64 {
	y := int64(t.Year())
	m := int64(t.Month())
	if m &amp;lt; 3 {
		y -= 1
		m += 9
	} else {
		m -= 3
	}
	d := int64(t.Day()) - 1
	return (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
}

func mjdnUnix(t time.Time) int64 {
	const (
		onday   = int64(86400) //seconds
		baseDay = int64(40587) //Modified Julian Date at January 1, 1970
	)
	return (t.Unix())/onday + baseDay
}

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		} else {
			args[i] = num
		}
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, ModifiedJulianDayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run julian-day-4.go 1969 12 31
1969-12-31 00:00:00 +0000 UTC
MJD = 40586日

C:&amp;gt;go run julian-day-4.go 1970 1 1
1970-01-01 00:00:00 +0000 UTC
MJD = 40587日

C:&amp;gt;go run julian-day-4.go 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ユリウス日の端数が鬱陶しいので修正ユリウス日の整数部分のみ計算しています。
あと1970年1月1日を境界として計算方法を変えています。
本当はユリウス暦の場合の計算も含めるべきなんでしょうけど，今回は割愛します。&lt;/p&gt;

&lt;p&gt;さて，上のコードのうち修正ユリウス日計算関数を別ファイルにしてパッケージ化します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package modjulian

import &amp;quot;time&amp;quot;

func DayNumber(t time.Time) int64 {
	if t.Sub(time.Unix(0, 0)) &amp;gt;= 0 {
		return dnUnix(t)
	} else {
		return dnGregorian(t)
	}
}

func dnGregorian(t time.Time) int64 {
	y := int64(t.Year())
	m := int64(t.Month())
	if m &amp;lt; 3 {
		y -= 1
		m += 9
	} else {
		m -= 3
	}
	d := int64(t.Day()) - 1
	return (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
}

func dnUnix(t time.Time) int64 {
	const (
		onday   = int64(86400) //seconds
		baseDay = int64(40587) //Modified Julian Date at January 1, 1970
	)
	return (t.Unix())/onday + baseDay
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッケージ名は &lt;code&gt;modjulian&lt;/code&gt; としました。
ちなみにパッケージ内の関数等は名前の先頭が大文字のものだけが外部から参照可能です。&lt;/p&gt;

&lt;h3 id=&#34;go-言語における名前の問題:bf561d8ea0bbb40075d9094acab07703&#34;&gt;Go 言語における名前の問題&lt;/h3&gt;

&lt;p&gt;Go 言語およびそのコミュニティは名前にうるさいようです。
たとえば「&lt;a href=&#34;http://golang.jp/effective_go&#34;&gt;実践Go言語&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bf561d8ea0bbb40075d9094acab07703:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bf561d8ea0bbb40075d9094acab07703:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」によると&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;慣例では，パッケージ名は小文字でひとつの単語です。アンダースコアや大文字が混ざって(mixedCaps)はいけません。パッケージ使用者がその名前をタイプすることを考慮して，簡潔すぎるぐらいにしてください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なんだそうで，本当はパッケージ名を &lt;code&gt;julianDate&lt;/code&gt; としたかったんだけど，それでは筋が悪いらしい。&lt;/p&gt;

&lt;p&gt;もうひとつ。&lt;/p&gt;

&lt;p&gt;もう一つの慣例は，パッケージ名がそのソースディレクトリのベース名であるということです。たとえば&lt;code&gt;src/pkg/encoding/base64&lt;/code&gt;に置かれているパッケージは，“&lt;code&gt;encoding/base64&lt;/code&gt;”としてインポートし，名前は&lt;code&gt;base64&lt;/code&gt;となります。&lt;code&gt;encoding_base64&lt;/code&gt;や&lt;code&gt;encodingBase64&lt;/code&gt;とはなりません。&lt;/p&gt;

&lt;p&gt;なのでパッケージの指定はハンガリアン記法とかではなく単語をディレクトリで区切って階層化することで整理できそうです。
これって Java とかに慣れてる人には比較的とっつきやすい仕組みかもしれません。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;長い名前は，慣れたとしても読みやすくなることはありません。複雑もしくは微妙なニュアンスを持つものに名前をつけるときは，すべての情報を名前で表現しようとするより，通常は役立つドキュメントコメントを書いたほうがよいでしょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;パッケージの配置と呼び出し:bf561d8ea0bbb40075d9094acab07703&#34;&gt;パッケージの配置と呼び出し&lt;/h2&gt;

&lt;p&gt;パッケージを呼び出すのには（標準のパッケージと同じく） &lt;code&gt;import&lt;/code&gt; を使えばいいのですが，記述によってパッケージをどこに配置するかが変わります。&lt;/p&gt;

&lt;p&gt;たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;./modjulian&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と相対パスで記述した場合は，呼び出し元のファイルの場所にある &lt;code&gt;modjulian&lt;/code&gt; フォルダを探します。
以下はパッケージが見つからなくてエラーになってる例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\jd\src\julian-day-4b&amp;gt;go build julian-day-4b.go
julian-day-4b.go:10:2: open C:\workspace\jd\src\julian-day-4b\modjulian: The system cannot find the file specified.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一方&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;modjulian&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と記述した場合には，環境変数 &lt;code&gt;GOROOT&lt;/code&gt; および &lt;code&gt;GOPATH&lt;/code&gt; で指定されるフォルダ以下を探すようです。
以下もパッケージが見つからなくてエラーになってる例です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\workspace\jd\src\julian-day-4b&amp;gt;go build julian-day-4b.go
julian-day-4b.go:10:2: cannot find package &amp;quot;modjulian&amp;quot; in any of:
        C:\Go\src\modjulian (from $GOROOT)
        C:\Gopath\src\modjulian (from $GOPATH)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;ではパッケージを相対パスで指定するのは（デバッグ時などを除いて）良くないと言われています。
これは &lt;code&gt;go get&lt;/code&gt; コマンドでパッケージをビルドする際，相対パスを解釈しないようにしているからのようです&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bf561d8ea0bbb40075d9094acab07703:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bf561d8ea0bbb40075d9094acab07703:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;パッケージを-github-上に配置する:bf561d8ea0bbb40075d9094acab07703&#34;&gt;パッケージを GitHub 上に配置する&lt;/h3&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/go-get-package/&#34;&gt;go get コマンドでパッケージを管理する&lt;/a&gt;」でも紹介しましたが，インターネット上の repository にあるパッケージを&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &amp;quot;github.com/username/package&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように指定することで，任意に取り込むことが可能です。
そこで今回のパッケージを &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; 上に公開しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34;&gt;&lt;code&gt;github.com/spiegel-im-spiegel/astrocalc&lt;/code&gt;&lt;/a&gt;&lt;code&gt;/modjulian&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このパッケージを使って書いてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/modjulian&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintf(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.Atoi(argsStr[i])
		if err != nil {
			fmt.Fprintf(os.Stderr, err)
			return
		} else {
			args[i] = num
		}
	}
	tm := time.Date(args[0], time.Month(args[1]), args[2], 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, modjulian.DayNumber(tm))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このソースファイル &lt;code&gt;julian-day-4b.go&lt;/code&gt; と &lt;code&gt;modjulian&lt;/code&gt; パッケージを以下のように配置してビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;SET GOPATH=C:\workspace\jd

C:&amp;gt;cd C:\workspace\jd

C:\workspace\jd&amp;gt;tree /f .
C:\WORKSPACE\JD
│
└─src
    └─julian-day-4b
            julian-day-4b.go

C:\workspace\jd&amp;gt;go get -v github.com/spiegel-im-spiegel/astrocalc/modjulian
github.com/spiegel-im-spiegel/astrocalc (download)
github.com/spiegel-im-spiegel/astrocalc/modjulian

C:\workspace\jd&amp;gt;go install ./...

C:\workspace\jd&amp;gt;tree /f .
C:\WORKSPACE\JD
│
├─bin
│      julian-day-4b.exe
│
├─pkg
│  └─windows_amd64
│      └─github.com
│          └─spiegel-im-spiegel
│              └─astrocalc
│                      modjulian.a
│
└─src
    ├─github.com
    │  └─spiegel-im-spiegel
    │      └─astrocalc
    │          │  .editorconfig
    │          │  .gitignore
    │          │  .travis.yml
    │          │  LICENSE
    │          │  README.md
    │          │
    │          └─modjulian
    │                  example_test.go
    │                  LICENSE
    │                  modjulian.go
    │                  modjulian_test.go
    │
    └─julian-day-4b
            julian-day-4b.go

C:\workspace\jd&amp;gt;bin\julian-day-4b.exe 1969 12 31
1969-12-31 00:00:00 +0000 UTC
MJD = 40586日

C:\workspace\jd&amp;gt;bin\julian-day-4b.exe 1970 1 1
1970-01-01 00:00:00 +0000 UTC
MJD = 40587日

C:\workspace\jd&amp;gt;bin\julian-day-4b.exe 2015 1 1
2015-01-01 00:00:00 +0000 UTC
MJD = 57023日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まだまだ続くよ。
&lt;a href=&#34;http://text.baldanders.info/golang/testing/&#34; title=&#34;Go 言語のテスト・フレームワーク&#34;&gt;次回&lt;/a&gt;はテストについて。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:bf561d8ea0bbb40075d9094acab07703&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:bf561d8ea0bbb40075d9094acab07703:1&#34;&gt;オリジナルは “&lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt;”
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bf561d8ea0bbb40075d9094acab07703:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:bf561d8ea0bbb40075d9094acab07703:2&#34;&gt;これについてはいろいろな意見があるようですが，妥当な割り切りだと思います。特にコードを CI (Continuous Integration) によって管理している場合は重要なポイントです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bf561d8ea0bbb40075d9094acab07703:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>「ユリウス日」で遊ぶ - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/julian-day-number/" />
		<id>tag:text.Baldanders.info,2015-09-19T21:23:33+0900:/golang/julian-day-number/</id>
		<published>2015-09-19T21:23:33+0900</published>
		
		<summary>今回は暦で遊びます。とりあえず，簡単なところで「ユリウス日」をいってみるか。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/e743d63ef5165d750eff&#34;&gt;はじめての Go 言語 (on Windows) その5 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;今回は暦で遊びます。
とりあえず，簡単なところで「ユリウス日（Julian Date または Julian Day Number&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;）」をいってみるか。&lt;/p&gt;

&lt;h2 id=&#34;ユリウス日の定義:dce87c312b9004de93da86b8c547be13&#34;&gt;ユリウス日の定義&lt;/h2&gt;

&lt;p&gt;ユリウス日とは紀元前4713年1月1日正午&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; を起点とした通日のことです。
たとえば2015年1月1日零時はユリウス日では2,457,023.5日になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eco.mtk.nao.ac.jp/cgi-bin/koyomi/cande/date2jd.cgi&#34;&gt;ユリウス日&lt;/a&gt; （&lt;a href=&#34;http://eco.mtk.nao.ac.jp/koyomi/&#34;&gt;国立天文台暦計算室&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://homepage1.nifty.com/manome/astrology/julian.html&#34;&gt;ユリウス日(Julian Day)&lt;/a&gt; : 暦にまつわるエピソードを含めて参考になります&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tondering.dk/claus/cal/julperiod.php&#34;&gt;The Julian Period&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この際，いくつか気を付ける点があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;紀元前（BC）1年の翌年は紀元後（AD）1年。つまり AD1年を $1$ とするなら BC1年は $0$，BC2年は $-1$ となります。紀元前4713年は $-4712$ です。&lt;/li&gt;
&lt;li&gt;ユリウス暦は紀元前45年から開始されたと言われています。つまりそれ以前は異なる暦だったわけです。しかしユリウス日では紀元前45年より前の日付もユリウス暦と見なして取り扱います。&lt;/li&gt;
&lt;li&gt;欧州では西暦（紀元後）1582年に当時のローマ法王グレゴリオ13世によって（現在言われるところの）グレゴリオ暦が布告されましたが，この際に1582年10月4日の翌日を10月15日としたためギャップが生じました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;年月日から-修正-ユリウス日を求める:dce87c312b9004de93da86b8c547be13&#34;&gt;年月日から（修正）ユリウス日を求める&lt;/h2&gt;

&lt;p&gt;というわけで大昔のユリウス日を求めるのは西暦を使う場合でもちょっと面倒くさいのですが，範囲をグレゴリオ暦に限るなら便利な式があります。&lt;/p&gt;

&lt;p&gt;グレゴリオ暦のある日を「$Y$ 年 $M$ 月 $D$ 日」で表せるとすると&lt;/p&gt;

&lt;blockquote&gt;
\begin{aligned}
    y   &amp; = Y + \left\lfloor \frac{M - 3}{12} \right\rfloor \\
    m   &amp; = \left( 12 + \left( M - 3 \right) \right) \bmod 12 \\
    d   &amp; = D - 1 \\
    MJD &amp; = \left\lfloor 365.25y \right\rfloor + \left\lfloor \frac{y}{400} \right\rfloor - \left\lfloor \frac{y}{100} \right\rfloor + \left\lfloor 30.60m + 0.5 \right\rfloor + d - 678881 \\
    JD  &amp; = MJD + 2400000.5
\end{aligned}
&lt;/blockquote&gt;

&lt;p&gt;でユリウス日 $JD $ を求めることができます&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ちなみに $MJD$ は修正ユリウス日（Modified Julian Date）と呼ばれるものです。
定義は上の式の通りで，ユリウス日から240万日分をカットして日付の起点を正午から（私たちになじみのある）正子&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; にずらしています。&lt;/p&gt;

&lt;p&gt;$ \left\lfloor x \right\rfloor $ は床関数と呼ばれるもので「実数 $x$ に対して $x$ 以下の最大の整数」と定義されます。
例えば&lt;/p&gt;

&lt;blockquote&gt;
\begin{aligned}
    \left\lfloor 1.0 \right\rfloor &amp; = 1 \\
    \left\lfloor 0.7 \right\rfloor &amp; = 0 \\
    \left\lfloor -0.5 \right\rfloor &amp; = -1 \\
    \left\lfloor -2.0 \right\rfloor &amp; = -2 \\
\end{aligned}
&lt;/blockquote&gt;

&lt;p&gt;となります。
単に小数点を取るだけではないです。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の &lt;a href=&#34;http://golang.org/pkg/math/&#34;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt; パッケージには，そのものずばりの &lt;code&gt;math.Floor()&lt;/code&gt; 関数があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
)

func main() {
	fmt.Printf(&amp;quot;[1.0] = %v\n&amp;quot;, math.Floor(1.0))
	fmt.Printf(&amp;quot;[0.7] = %v\n&amp;quot;, math.Floor(0.7))
	fmt.Printf(&amp;quot;[-0.5] = %v\n&amp;quot;, math.Floor(-0.5))
	fmt.Printf(&amp;quot;[-2.0] = %v\n&amp;quot;, math.Floor(-2.0))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run floor.go
[1.0] = 1
[0.7] = 0
[-0.5] = -1
[-2.0] = -2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では換算式を &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で実装してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
)

func main() {
	year := 2015
	month := 1
	day := 1
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, year, month, day)

	mm := float64(month - 3)
	y := float64(year) + math.Floor(mm/12.0)
	m := math.Mod(12.0+mm, 12.0)
	d := float64(day - 1)
	fmt.Printf(&amp;quot;y = %f\n&amp;quot;, y)
	fmt.Printf(&amp;quot;m = %f\n&amp;quot;, m)
	fmt.Printf(&amp;quot;d = %f\n\n&amp;quot;, d)

	mjd := math.Floor(365.25*y) + math.Floor(y/400.0) - math.Floor(y/100.0) + math.Floor(30.60*m+0.5) + d - 678881.0
	fmt.Printf(&amp;quot;MJD = %f日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, mjd+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-1.go
2015年1月1日

y = 2014.000000
m = 10.000000
d = 0.000000

MJD = 57023.000000日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と，これではあまりにひどいので，少し変形。&lt;/p&gt;

&lt;p&gt;床関数は正の値に対しては小数点以下の切り捨てと同じ。
Go 言語では int 型の乗除算には int 型の結果が返り小数点以下が切り捨てられることを利用して&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	year := 2015
	month := 1
	day := 1
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, year, month, day)

	y := 1
	m := 1
	if month &amp;lt; 3 {
		y = year - 1
		m = month + 9
	} else {
		y = year
		m = month - 3
	}
	d := day - 1
	fmt.Printf(&amp;quot;y = %d\n&amp;quot;, y)
	fmt.Printf(&amp;quot;m = %d\n&amp;quot;, m)
	fmt.Printf(&amp;quot;d = %d\n\n&amp;quot;, d)

	mjd := (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, float64(mjd)+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-2.go
2015年1月1日

y = 2014
m = 10
d = 0

MJD = 57023日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これなら &lt;a href=&#34;http://golang.org/pkg/math/&#34;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt; パッケージ自体不要になります。グレゴリオ暦は1582年より前では適用できないのでこれで必要十分です。
以降で使いやすくするために，ここから更に変形して年月日を引数から取得するようにします（引数の Validation は省いています。ゴメンペコン）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
)

func main() {
	//引数のチェック
	flag.Parse()
	argsStr := flag.Args()
	if len(argsStr) &amp;lt; 3 {
		fmt.Fprintln(os.Stderr, &amp;quot;年月日を指定してください&amp;quot;)
		return
	}
	args := make([]int64, 3)
	for i := 0; i &amp;lt; 3; i++ {
		num, err := strconv.ParseInt(argsStr[i], 10, 64)
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
			return
		} else {
			args[i] = num
		}
	}
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, args[0], args[1], args[2])

	y := args[0]
	m := args[1]
	if m &amp;lt; 3 {
		y -= 1
		m += 9
	} else {
		m -= 3
	}
	d := args[2] - 1
	fmt.Printf(&amp;quot;y = %d\n&amp;quot;, y)
	fmt.Printf(&amp;quot;m = %d\n&amp;quot;, m)
	fmt.Printf(&amp;quot;d = %d\n\n&amp;quot;, d)

	mjd := (1461*y)/4 + y/400 - y/100 + (153*m+2)/5 + d - 678881
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, float64(mjd)+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;go run julian-day-2b.go 2015 1 1
2015年1月1日

y = 2014
m = 10
d = 0

MJD = 57023日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;unix-time-からユリウス日を求める:dce87c312b9004de93da86b8c547be13&#34;&gt;UNIX Time からユリウス日を求める&lt;/h2&gt;

&lt;p&gt;さて，これでグレゴリオ暦の任意の日付からユリウス日を求めることができるようになりました。
これを踏まえて，もう少し簡単にユリウス日を得る方法を考えてみます。&lt;/p&gt;

&lt;p&gt;Go 言語で時刻情報を取得・操作するために &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージが用意されています。
&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージをつらつら眺めてみると &lt;code&gt;Unix()&lt;/code&gt; 関数を使って UNIX Time を得ることができるようです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unix returns t as a Unix time, the number of seconds elapsed since January 1, 1970 UTC.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということは，1970年1月1日零時 UTC のユリウス日が分かれば，そこを起点に UNIX Time を加算すればいいことになります。
簡単！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-2b.go 1970 1 1
1970年1月1日

y = 1969
m = 10
d = 0

MJD = 40587日
JD = 2440587.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので，こうなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	const onday = int64(86400)   //seconds
	const baseDay = int64(40587) //Modified Julian Date at January 1, 1970

	year := 2015
	month := 1
	day := 1
	fmt.Printf(&amp;quot;%v年%v月%v日\n\n&amp;quot;, year, month, day)

	tm := time.Date(year, time.Month(month), day, 0, 0, 0, 0, time.UTC)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, tm)
	ut := tm.Unix()
	fmt.Printf(&amp;quot;UNIX Time = %v seconds = %v days and %v seconds\n\n&amp;quot;, ut, ut/onday, ut%onday)

	mjd := ut/onday + baseDay
	fmt.Printf(&amp;quot;MJD = %d日\n&amp;quot;, mjd)
	fmt.Printf(&amp;quot;JD = %f日\n&amp;quot;, float64(mjd)+2400000.5)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run julian-day-3.go
2015年1月1日

2015-01-01 00:00:00 +0000 UTC
UNIX Time = 1420070400 seconds = 16436 days and 0 seconds

MJD = 57023日
JD = 2457023.500000日
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;えーっと。
コードを見ればお分かりと思いますが，これだと1970年1月1日より前の日付では正しく動きません。
任意の日付&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:dce87c312b9004de93da86b8c547be13:7&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:dce87c312b9004de93da86b8c547be13:7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; で正しく動かすには床関数を使います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/packaging/&#34;&gt;次回&lt;/a&gt;は，これをパッケージ化してみましょう。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:dce87c312b9004de93da86b8c547be13&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:1&#34;&gt;ちなみに1日未満の端数を含む場合を「ユリウス日（Julian Date）」，端数を含まない場合を「ユリウス通日（Julian Day Number）」と呼び分けているようです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:2&#34;&gt;もともと太陽暦は「子午線から太陽までの時角」が時刻のベースになってるため，ユリウス日を考えた人は正午を起点にすべきと考えたのでしょう。日常生活で昼に日付が変わったら色々面倒そうですが。あぁでも， B な企業に勤めている人には日付の起点とか関係ないかな（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:3&#34;&gt;上の式は「Fliegel の公式」などと呼ばれることがありますが，厳密には Fliegel の公式を電卓向けに分かりやすく展開したもので，初等天文学の教科書などでよく登場する式です。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:4&#34;&gt;余談ですが365.25日を「ユリウス年」と呼びます。天文学では1年の長さが年によって変わるのは困るので，一様な長さの「ユリウス年」を考えたわけです。つまり上の式はユリウス年にうるう年の補正をかけてるわけですね。ちなみに「ユリウス世紀」は36525日です。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:5&#34;&gt;月の値から2を引くのは暦計算の基本的なテクニックだったります（式では0基点にするために3を引いてますが）。現在の1月（Ianuarius または January）を年初としたのはユリウス暦以降からで，それまでは現在の3月（Martius または March）が年初でした。だから2月だけちょっと特殊なんですねぇ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:6&#34;&gt;耳慣れないかもしれないですが，夜中の12時のことです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:dce87c312b9004de93da86b8c547be13:7&#34;&gt;とはいえ UNIX Time の取りうる値の範囲内での話ですが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:dce87c312b9004de93da86b8c547be13:7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>今日の戯れ言 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/0917-diary/" />
		<id>tag:text.Baldanders.info,2015-09-18T03:11:44+0900:/remark/2015/0917-diary/</id>
		<published>2015-09-18T03:11:44+0900</published>
		
		<summary>セキュリティ・暗号関連 / 機械支配待望論</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;日を跨いじゃったけど，溜まってたものを吐き出す。&lt;/p&gt;

&lt;h2 id=&#34;セキュリティ-暗号関連:7de7822f81e49845760a41cfe20e81ad&#34;&gt;セキュリティ・暗号関連&lt;/h2&gt;

&lt;p&gt;とりあえずメモ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50754420.html&#34;&gt;エフセキュアブログ : 最悪のプライバシー保護機能を持つ、WINDOWS 10にアップグレードする必要はなし&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lifehacker.jp/2015/08/150817win10_privacy.html&#34;&gt;デフォルトのままは危険？ 「Windows 10」のプライバシー設定はこう変えよう ｜ ライフハッカー［日本版］&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.livedoor.jp/k_urushima/archives/1768181.html&#34;&gt;自堕落な技術者の日記 : 「RFC 7525 TLSとDTLSの安全な利用に関する推奨事項」の公開 - livedoor Blog（ブログ）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1509/16/news007.html&#34;&gt;Windows標準機能でいますぐできる標的型攻撃対策：続・設定を見直すだけ、いますぐ簡単にできる「標的型メール攻撃対策」 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;) - ＠IT&lt;/a&gt; : 「&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1409/05/news006.html&#34;&gt;すぐ実践可能！：設定を見直すだけ、いますぐ簡単にできる「標的型メール攻撃対策」 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;) - ＠IT&lt;/a&gt;」の続編らしい&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;64ビットブロック暗号misty1の安全性について:7de7822f81e49845760a41cfe20e81ad&#34;&gt;「64ビットブロック暗号MISTY1の安全性について」&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cryptrec.go.jp/topics/cryptrec_20150716_misty1_cryptanalysis.html&#34;&gt;64ビットブロック暗号MISTY1の安全性について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cryptrec.go.jp/topics/cryptrec_20150812_misty1_cryptanalysis.html&#34;&gt;64ビットブロック暗号MISTY1の安全性について（続報）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;随分前の話で恐縮だが，国産のブロック暗号 MISTY1 がちょっとだけ攻略された，という話題。
といっても，鍵空間が $2^{64}$ に対して解読に必要なデータ量が $2^{63.58}$ ということで，ほとんど全件探索と変わらないのであるが。
続報にある改良版にしても計算量は $2^{69.5}$ で大幅に少なくなっているものの，解読に必要なデータ量は $2^{64}$ であり，これも現実的な脅威ではないようである。&lt;/p&gt;

&lt;p&gt;MISTY1 は &lt;a href=&#34;http://cryptrec.go.jp/list.html&#34;&gt;CRYPTREC 暗号リスト&lt;/a&gt;において「推奨候補暗号リスト」のひとつとして挙げられている。
なおブロック暗号については，可能であれば $128\,\mathrm{bits}$ のブロック長のもの（AES や Camellia など）を選択ことが推奨されている。&lt;/p&gt;

&lt;p&gt;そうそう。
CRYPTREC といえば &lt;a href=&#34;http://cryptrec.go.jp/topics/cryptrec_20150716_c14report.html&#34;&gt;CRYPTREC Report 2014&lt;/a&gt; が出てるのだった。
あとでチェックしないと。&lt;/p&gt;

&lt;h3 id=&#34;rc4-overkill:7de7822f81e49845760a41cfe20e81ad&#34;&gt;RC4 Overkill&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rc4nomore.com/&#34;&gt;RC4 NOMORE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1507/17/news058.html&#34;&gt;短時間でcookie解読、RC4暗号通信を破る新手法 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/d8MtmKrXlKQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=d8MtmKrXlKQ&#34;&gt;The RC4 NOMORE Attack: Demonstration in Practice - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;これも随分前の話でゴメン。
既に&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000810.shtml&#34;&gt;死に体の RC4&lt;/a&gt; に追い打ち。&lt;/p&gt;

&lt;h3 id=&#34;ietf-94-で-openpgp-wg-がなんかやるらしい:7de7822f81e49845760a41cfe20e81ad&#34;&gt;IETF-94 で OpenPGP WG がなんかやるらしい？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mailarchive.ietf.org/arch/search/?email_list=openpgp&#34;&gt;[openpgp] Should we try to meet in Yokohama?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://www.ietf.org/meeting/94/index.html&#34;&gt;11月に横浜で行われる IETF-94&lt;/a&gt; で OpenPGP WG もなにかやるらしい？&lt;/p&gt;

&lt;h2 id=&#34;機械支配待望論:7de7822f81e49845760a41cfe20e81ad&#34;&gt;機械支配待望論&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cruel.hatenablog.com/entry/2015/08/28/161912&#34;&gt;We&amp;rsquo;ll Make Great Pets: 機械支配待望論 - 山形浩生の「経済のトリセツ」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中で&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;さらに人間と機械は、出自がちがうので、同じリソースをめぐって争う必要がない。これが動物だと、居住空間とか食べ物とか毛皮や肉とか、競合する資源がある。だけど機械とは競合しない……完全にしないとは言わないけれど、他の動物と比べれば大幅にちがう。人間はお金や女や権力を巡って争ってきたけど、機械はお金とか関係ないし、セックスもしないし（人間のほうはしたがる人もいるけど）、権力も関係ない。だから機械やAIが賢くなっても、別に人間なんか滅ぼす必要なんかまったくない。人間にそういうものをエサとして差し出せば（あるいは実物なくても画面にその絵を描いてやるだけで）人間はホイホイ動くし掃除もするしメンテもするし。機械にとってこんな便利なものはないよ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;というのは全く以ってそのとおりだと思う。&lt;/p&gt;

&lt;p&gt;「機械が仕事を奪う」というのは&lt;a href=&#34;http://text.baldanders.info/remark/2015/information-oriented-society/&#34;&gt;前回書いた話&lt;/a&gt;と相似形で，自分たちがやってることをモノに転嫁しているに過ぎない。
奪ってるのはモノではなくヒトである。&lt;/p&gt;

&lt;p&gt;もし本当に「ターミネーター脳」の人達が言うように機械が人類を滅ぼすのなら，（今のところただの「自然現象」の延長にすぎない）地球上の知性にとって，間違いなく「進化」である。
そもそも機械なら地球に縛られる必要もなかろう。
どちらかと言うと機械に見捨てられる方を心配したほうがいいんじゃないのか？&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>素数探索アルゴリズムで遊ぶ - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/search-prime-numbers/" />
		<id>tag:text.Baldanders.info,2015-09-17T21:23:42+0900:/golang/search-prime-numbers/</id>
		<published>2015-09-17T21:23:42+0900</published>
		<updated>2015-09-18T15:06:00+0900</updated>
		<summary>これまた，みんな大好き素数探索アルゴリズム</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/047a9bd6436e6391ddd4&#34;&gt;はじめての Go 言語 (on Windows) その2 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;は公式のドキュメントがとても充実していて（ただしほぼ英語だけど），私のような初学者に易しい環境といえる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/&#34;&gt;Documentation - The Go Programming Language&lt;/a&gt; : 言語仕様に関するドキュメントはこちら（&lt;a href=&#34;http://golang-jp.org/doc/&#34;&gt;一部日本語化&lt;/a&gt;されている）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/&#34;&gt;Packages - The Go Programming Language&lt;/a&gt; : 標準パッケージのドキュメントはこちら（&lt;a href=&#34;http://golang-jp.org/pkg/&#34;&gt;一部日本語化&lt;/a&gt;されている）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とはいえ，コードが実際にどのように機能するかは書いてみないと分からない部分もある。
なので，今回からは実際にコードを書きながら言語の癖のようなものを調べていくことにする。
仕事に使うなら厳密な評価が必要だけど，今のところはそんな予定もないし，まずはテキトーで（笑）&lt;/p&gt;

&lt;p&gt;早速，みんな大好き素数探索アルゴリズムで遊ぶ。&lt;/p&gt;

&lt;h2 id=&#34;素数の定義:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;素数の定義&lt;/h2&gt;

&lt;p&gt;一応，素数（prime number）の定義を以下に示す。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1 と自分自身以外に正の約数を持たない 1 より大きい自然数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ここで自然数（natural number）は「ペアノの公理」に従う（0 が自然数に含まれるかどうかについては色々あるみたいだが，素数の定義には影響がないので，ここでは無視する）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%9A%E3%82%A2%E3%83%8E%E3%81%AE%E5%85%AC%E7%90%86&#34;&gt;ペアノの公理 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/taketo1024/items/2ab856d21bf9b9f30357&#34;&gt;Swiftで自然数を作ってみた（ペアノの公理） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみに結城浩さんの『数学ガール／ゲーデルの不完全性定理』にペアノの公理について分かりやすく解説した章がある。
お勧め。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1D6/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/415MuioBMJL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1D6/baldandersinf-22/&#34;&gt;数学ガール／ゲーデルの不完全性定理&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ株式会社 2014-02-14&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1FO/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1FO.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／乱択アルゴリズム&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1CM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1CM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／フェルマーの最終定理&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00L0PDMK4/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00L0PDMK4.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガール／ガロア理論&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;結城浩さんの本はよく整備された遊歩道を散歩するような気楽さと安心感がある。だから「フェルマーの最終定理」とか「ゲーデルの不完全性定理」とかいった難解そうなテーマでも，迷うことなく，しかも一歩ずつ歩みを進めてゴールまで辿り着けるのかもしれない。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-16&#34;&gt;2015-09-16&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;alg1:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;素数探索アルゴリズム（その1）&lt;/h2&gt;

&lt;p&gt;素数の定義を愚直にコードで表すなら以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	max := 100
	fmt.Printf(&amp;quot;%v 以下の素数:&amp;quot;, max)

	start := time.Now() //Start
	for n := 2; n &amp;lt;= max; n++ {
		flag := true
		for m := 2; m &amp;lt; n; m++ {
			if (n % m) == 0 { // n が m で割り切れる → 素数ではない
				flag = false
				break
			}
		}
		if flag {
			fmt.Printf(&amp;quot; %v&amp;quot;, n)
		}
	}
	goal := time.Now()                     //Goal
	fmt.Printf(&amp;quot;\n%v 経過&amp;quot;, goal.Sub(start)) //経過時間を表示
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime01.go
100 以下の素数: 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97
5.0002ms 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この値を覚えておいてね。
検算に使うから。&lt;/p&gt;

&lt;h2 id=&#34;alg2:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;素数探索アルゴリズム（その2: エラトステネスの篩の変形）&lt;/h2&gt;

&lt;p&gt;もう少しだけ効率的に素数を探すアルゴリズムとして「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9&#34; title=&#34;エラトステネスの篩 - Wikipedia&#34;&gt;エラトステネスの篩&lt;/a&gt;」と呼ばれる方法がある。
ただし「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9&#34; title=&#34;エラトステネスの篩 - Wikipedia&#34;&gt;エラトステネスの篩&lt;/a&gt;」は決まった範囲を探索するものなので少々使いづらい。
そこで「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9&#34; title=&#34;エラトステネスの篩 - Wikipedia&#34;&gt;エラトステネスの篩&lt;/a&gt;」で使われている以下の素数の特徴を最初のアルゴリズムに加えてみる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;2 以上の全ての自然数はひとつ以上の素数の積で構成される（この素数の集合を素因数（prime factor）という）。したがってある数が素数か否かの判定は，その数より小さい素数のみで調べればよい&lt;/li&gt;
&lt;li&gt;更に，積の可換則（commutative property あるいは交換法則）により，自然数 $n$ が素数か否か判定する場合は $\sqrt{n}$ 以下の素数で調べればよい&lt;br /&gt;
（たとえば 35 の素因数は 5 と 7 だが， $5 \times 7 = 7 \times 5 = 35$ なので，直前の素数 31 まで回さずとも 3 および 5 ($\le \sqrt{35}$) まで調べれば判定できる）&lt;/li&gt;
&lt;li&gt;素数の定義から 2 が素数であることは自明なので（1 と 2 の間に自然数は存在しない）， 2 より大きい 2 の倍数（すなわち偶数）については判定しなくてもよく，対象となる自然数は 3 以上の奇数のみでいいことになる。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;では，この特徴を加えたコードを書いてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	primes := make([]int64, 1)     // 素数のリスト
	primes_f := make([]float64, 1) // 素数のリスト（浮動小数点へのキャスト）
	primes[0] = 2                  // 2 は素数
	primes_f[0] = 2.0              // 2 は素数（浮動小数点）
	var max int64 = 100

	start := time.Now() // Start
	var n int64 = 3
	for n = 3; n &amp;lt; max; n += 2 { // 3 から始まる奇数のみを探索
		flag := true
		f := float64(n)                    // 浮動小数点に cating
		rf := math.Sqrt(f)                 // n に対して √n をとる
		for i := 1; i &amp;lt; len(primes); i++ { // 2 より大きい既知の素数でチェックする
			if primes_f[i] &amp;gt; rf { // n に対して √n 以下の素数まで探索すればよい
				break
			} else if (n % primes[i]) == 0 { // n が既知の素数で割り切れる → 素数ではない
				flag = false
				break
			}
		}
		if flag {
			primes = append(primes, n)     // 素数を追加
			primes_f = append(primes_f, f) // 素数を追加（浮動小数点）
		}
	}
	goal := time.Now() // Goal
	fmt.Printf(&amp;quot;%v 以下の素数: %v\n&amp;quot;, max, primes)
	fmt.Printf(&amp;quot;%v 経過&amp;quot;, goal.Sub(start)) // 経過時間を表示
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime02.go
100 以下の素数: [2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97]
0 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;slice-と-make-と-append:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;slice と make() と append()&lt;/h3&gt;

&lt;p&gt;コード中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;primes := make([]int64, 1)     // 素数のリスト
primes_f := make([]float64, 1) // 素数のリスト（浮動小数点へのキャスト）
primes[0] = 2                  // 2 は素数
primes_f[0] = 2.0              // 2 は素数（浮動小数点）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の変数 &lt;code&gt;primes&lt;/code&gt; および &lt;code&gt;primes_f&lt;/code&gt; は &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; と呼ばれる可変長の配列型である。
更に組み込み関数 &lt;code&gt;make()&lt;/code&gt; は &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; のみ使用可能なメモリ割り当て関数である。
ちなみに &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; 以外は &lt;code&gt;new()&lt;/code&gt; を使う。
&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Map_types&#34;&gt;map&lt;/a&gt;, &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; のみ特別なのは，これらの型は初期値と内部状態を持つためである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; に要素を追加する場合は &lt;code&gt;append()&lt;/code&gt; 関数を使えばいいのだが，これが結構クセがある。
&lt;code&gt;append()&lt;/code&gt; 関数では &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; の容量（capacity）がいっぱいになると新たにメモリを確保してオリジナルの内容をコピーする。
つまりポインタが変わってしまうのだ。（メモリの割り当て方のパターンにも注目）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
	a := make([]int, 0)                                         // 空の配列を用意
	fmt.Printf(&amp;quot;Slice(%02d) : %p : %v (%v)\n&amp;quot;, 0, a, a, cap(a)) // 配列の表示（初期状態）
	for num := 1; num &amp;lt;= 17; num++ {
		a = append(a, num)                                            //配列要素の追加
		fmt.Printf(&amp;quot;Slice(%02d) : %p : %v (%v)\n&amp;quot;, num, a, a, cap(a)) //配列の表示
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run slice.go
Slice(00) : 0x5cebb8 : [] (0)
Slice(01) : 0xc082002340 : [1] (1)
Slice(02) : 0xc082002380 : [1 2] (2)
Slice(03) : 0xc082006740 : [1 2 3] (4)
Slice(04) : 0xc082006740 : [1 2 3 4] (4)
Slice(05) : 0xc0820083c0 : [1 2 3 4 5] (8)
Slice(06) : 0xc0820083c0 : [1 2 3 4 5 6] (8)
Slice(07) : 0xc0820083c0 : [1 2 3 4 5 6 7] (8)
Slice(08) : 0xc0820083c0 : [1 2 3 4 5 6 7 8] (8)
Slice(09) : 0xc082050000 : [1 2 3 4 5 6 7 8 9] (16)
Slice(10) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10] (16)
Slice(11) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11] (16)
Slice(12) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12] (16)
Slice(13) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13] (16)
Slice(14) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14] (16)
Slice(15) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15] (16)
Slice(16) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16] (16)
Slice(17) : 0xc082056000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17] (32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;容量が変化するごとにポインタ値も変化していることがお分かりだろうか。&lt;/p&gt;

&lt;p&gt;ちなみに Go コンパイラは，返値を無視するコーディングに対してエラーを吐く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;a = append(a, num)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の部分を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;append(a, num)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime02.go
# command-line-arguments
.\slice.go:9: append(a, num) evaluated but not used
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とエラーになる。&lt;/p&gt;

&lt;p&gt;また，容量はあらかじめ指定できる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;a := make([]int, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の部分を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;a := make([]int, 0, 32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run slice.go
Slice(00) : 0xc082050000 : [] (32)
Slice(01) : 0xc082050000 : [1] (32)
Slice(02) : 0xc082050000 : [1 2] (32)
Slice(03) : 0xc082050000 : [1 2 3] (32)
Slice(04) : 0xc082050000 : [1 2 3 4] (32)
Slice(05) : 0xc082050000 : [1 2 3 4 5] (32)
Slice(06) : 0xc082050000 : [1 2 3 4 5 6] (32)
Slice(07) : 0xc082050000 : [1 2 3 4 5 6 7] (32)
Slice(08) : 0xc082050000 : [1 2 3 4 5 6 7 8] (32)
Slice(09) : 0xc082050000 : [1 2 3 4 5 6 7 8 9] (32)
Slice(10) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10] (32)
Slice(11) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11] (32)
Slice(12) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12] (32)
Slice(13) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13] (32)
Slice(14) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14] (32)
Slice(15) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15] (32)
Slice(16) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16] (32)
Slice(17) : 0xc082050000 : [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17] (32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
メモリ割り当ては意外に高コストの操作なので， &lt;a href=&#34;http://golang.org/ref/spec#Slice_types&#34;&gt;slice&lt;/a&gt; を扱う場合はこの辺がチューニング・ポイントになるだろう。&lt;/p&gt;

&lt;h2 id=&#34;100万個目の素数:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;100万個目の素数&lt;/h2&gt;

&lt;p&gt;上のコードを少し修正して $x$ 個目の素数を調べることにしよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;math&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	//コマンドライン引数の解析
	algno := flag.Int(&amp;quot;alg&amp;quot;, 0, &amp;quot;0: Basic algorithm , 1: Sieve of Eratosthenes&amp;quot;)
	flag.Parse()
	args := flag.Args()
	if *algno &amp;lt; 0 || *algno &amp;gt; 1 {
		fmt.Fprintln(os.Stderr, os.ErrInvalid)
		return
	}
	if len(args) != 1 {
		fmt.Fprintln(os.Stderr, os.ErrInvalid)
		return
	}
	max, err := strconv.ParseInt(args[0], 10, 64)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	if max &amp;lt;= 0 {
		max = 1
	}

	//素数探索
	prime := int64(0)
	start := time.Now() // Start
	switch *algno {
	case 1:
		prime = LastPrimeE(max)
	default:
		prime = LastPrimeB(max)
	}
	goal := time.Now()                       // Goal
	fmt.Printf(&amp;quot;%v 個目の素数: %v\n&amp;quot;, max, prime) // max 個目の素数
	fmt.Printf(&amp;quot;%v 経過\n&amp;quot;, goal.Sub(start))   // 経過時間を表示
}

func LastPrimeB(max int64) int64 {
	count := int64(0)

	for n := int64(2); ; n++ {
		flag := true
		for m := int64(2); m &amp;lt; n; m++ {
			if (n % m) == 0 { // n が m で割り切れる → 素数ではない
				flag = false
				break
			}
		}
		if flag {
			count++
			if count &amp;gt;= max {
				return n
			}
		}
	}
}

func LastPrimeE(max int64) int64 {
	if max &amp;lt;= 1 {
		return 2
	}
	primes := make([]int64, 1, max)     // 素数のリスト
	primes_f := make([]float64, 1, max) // 素数のリスト（浮動小数点へのキャスト）
	primes[0] = 2                       // 2 は素数
	primes_f[0] = 2.0                   // 2 は素数（浮動小数点）

	count := int64(1)
	for n := int64(3); ; n += 2 { // 3 から始まる奇数のみを探索
		flag := true
		f := float64(n)                    // 浮動小数点に cating
		rf := math.Sqrt(f)                 // n に対して √n をとる
		for i := 1; i &amp;lt; len(primes); i++ { // 2 より大きい既知の素数でチェックする
			if primes_f[i] &amp;gt; rf { // n に対して √n 以下の素数まで探索すればよい
				break
			} else if (n % primes[i]) == 0 { // n が既知の素数で割り切れる → 素数ではない
				flag = false
				break
			}
		}
		if flag {
			count++
			if count &amp;gt;= max {
				return n
			}
			primes = append(primes, n)     // 素数を追加
			primes_f = append(primes_f, f) // 素数を追加（浮動小数点）
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今後のためにコマンドライン解析の部分と実際の素数探索アルゴリズムを分けている。
まず検算。
25個目の素数が 97 なら OK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime03.go -alg=0 25
25 個目の素数: 97
0 経過

C:&amp;gt;go run prime03.go -alg=1 25
25 個目の素数: 97
0 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では実際に動かしてみよう。
まずは「&lt;a href=&#34;#alg1:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;その1&lt;/a&gt;」のアルゴリズムから。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime03.go -alg=0 100
100 個目の素数: 541
0 経過

C:&amp;gt;go run prime03.go -alg=0 10000
10000 個目の素数: 104729
4.4072521s 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;100万個目の素数は有意の時間で見つかりませんでした orz&lt;/p&gt;

&lt;p&gt;次に「&lt;a href=&#34;#alg2:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;その2&lt;/a&gt;」のアルゴリズムで。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime03.go --alg=1 100
100 個目の素数: 541
0 経過

C:&amp;gt;go run prime03.go --alg=1 10000
10000 個目の素数: 104729
7.0004ms 経過

C:&amp;gt;go run prime03.go --alg=1 1000000

1000000 個目の素数: 15485863
4.9042805s 経過

C:&amp;gt;go run prime03.go --alg=1 10000000
10000000 個目の素数: 179424673
2m13.8686568s 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というわけで，100万個目の素数探索に5秒弱，1000万個目の素数探索に2分ちょっとかかってしまった。
まぁ，でも，こんなもんか。&lt;/p&gt;

&lt;h2 id=&#34;alg3:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;素数探索アルゴリズム（その3: エラトステネスの篩を並行処理で）&lt;/h2&gt;

&lt;p&gt;これまでのアルゴリズムは基本的に2重のループで値を順番に付き合わせているだけだったが，この部分を並行処理で行えば速いんじゃね？ と思うよね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で並行処理を行うには &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt;（「ゴルーチン」と読むらしい）を使う。
また &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt; の worker 間ではメモリ共有ができないため， &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; を使い message-passing 方式&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ba5a2fe9dba0ce0dbb53ecd3120fd65e:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ba5a2fe9dba0ce0dbb53ecd3120fd65e:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;で通信を行う。&lt;/p&gt;

&lt;p&gt;で，実際に &lt;a href=&#34;http://golang.jp/go_tutorial#index12&#34;&gt;チュートリアルには並行処理を使った素数探索アルゴリズムが紹介&lt;/a&gt;されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ba5a2fe9dba0ce0dbb53ecd3120fd65e:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ba5a2fe9dba0ce0dbb53ecd3120fd65e:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
いくつかサイトを巡ったが，このやり方がもっとも素直なようだ（後述するが速いわけではない）。
そこで，このコードを流用させてもらうことにした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func LastPrimeE2(max int64) int64 {
	if max &amp;lt;= 1 {
		return 2 // 最初の素数は2
	}

	count := int64(1)
	primes := sieve()
	for {
		prime := &amp;lt;-primes
		count++
		if count &amp;gt;= max {
			return prime
		}
	}
}

// 素数候補の数を生成する
func generate() chan int64 {
	ch := make(chan int64)
	go func() {
		for n := int64(3); ; n += 2 { // 3 以降の奇数を送信（2 以外の偶数は素数ではない）
			ch &amp;lt;- n
		}
	}()
	return ch
}

// 素数 &#39;prime&#39; に対するフィルタ
// &#39;prime&#39; で割り切れない値のみ通過可能
func filter(in chan int64, prime int64) chan int64 {
	out := make(chan int64)
	go func() {
		for {
			n := &amp;lt;-in
			if (n % prime) != 0 {
				out &amp;lt;- n
			}
		}
	}()
	return out
}

// エラトステネスの篩
func sieve() chan int64 {
	out := make(chan int64)
	go func() {
		ch := generate()
		for {
			prime := &amp;lt;-ch
			out &amp;lt;- prime
			ch = filter(ch, prime)
		}
	}()
	return out
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そうそう。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では関数は全て関数閉包（closure）として機能する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 関数も少しいじって &lt;code&gt;-alg=2&lt;/code&gt; でこのアルゴリズムを起動するようにする。
まずは検算ね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime04.go -alg=2 25
25 個目の素数: 97
0 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;じゃあ，早速うごかしてみよっか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime04.go -alg=2 100
100 個目の素数: 541
2.0002ms 経過

C:&amp;gt;go run prime04.go -alg=2 10000
10000 個目の素数: 104729
4.2002402s 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;100万個目の素数は有意の時間で見つかりませんでした orz&lt;/p&gt;

&lt;p&gt;まぁアルゴリズム的に「篩」っぽくはあるんだけどね。&lt;/p&gt;

&lt;p&gt;ある値が素数であると判定されるためには，その値より小さい全ての素数フィルタを通過しなければならない（つまり「&lt;a href=&#34;#alg2:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;その2&lt;/a&gt;」で紹介した特徴の2番目を全く生かせていない）。
これが致命的。
しかもこのフィルタ処理 &lt;code&gt;filter()&lt;/code&gt; は素数フィルタの生成も兼ねていて，前の素数フィルタの出力を次の素数フィルタの入力として連結しているのでスキップできない。&lt;/p&gt;

&lt;p&gt;かなりインチキではあるけど，捜索範囲を「100万個目」までと限定し，「100万個目」の素数が 15,485,863 であると分かっているならもう少し速くできるかもしれない。
つまり以下のように改良する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func LastPrimeE2(max int64) int64 {
	if max &amp;lt;= 1 {
		return 2 // 最初の素数は2
	}

	count := int64(1)
	primes := sieve()
	for prime := range primes {
		count++
		if count &amp;gt;= max {
			return prime
		}
	}
	return count
}

// 素数候補の数を生成する
// ただし上限を 15485863 とする
func generate() chan int64 {
	ch := make(chan int64)
	go func() {
		for n := int64(3); n &amp;lt;= 15485863; n += 2 { // 3 以降の奇数を送信（2 以外の偶数は素数ではない）
			ch &amp;lt;- n
		}
		close(ch)
	}()
	return ch
}

// 素数 &#39;prime&#39; に対するフィルタ
func filter(in chan int64, prime int64) chan int64 {
	out := make(chan int64)
	go func() {
		for n := range in {
			if (n % prime) != 0 {
				out &amp;lt;- n
			}
		}
		close(out)
	}()
	return out
}

// エラトステネスの篩
func sieve() chan int64 {
	out := make(chan int64)
	go func() {
		ch := generate()
		fflag := true
		for {
			prime, ok := &amp;lt;-ch
			if !ok {
				break
			}
			out &amp;lt;- prime
			if fflag &amp;amp;&amp;amp; prime*prime &amp;lt;= 15485863 {
				ch = filter(ch, prime)
			} else { // 素数が最大値の平方根（√15485863）より大きい場合はフィルタを作らず無条件に通す
				fflag = false
			}
		}
		close(out)
	}()
	return out
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで実行してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go run prime05.go -alg=2 100
100 個目の素数: 541
2.0001ms 経過

C:&amp;gt;go run prime05.go -alg=2 10000
10000 個目の素数: 104729
378.0216ms 経過

C:&amp;gt;go run prime05.go -alg=2 1000000
1000000 個目の素数: 15485863
39.4492564s 経過
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おお。
ようやく有意の時間で探索できた。
それでも「&lt;a href=&#34;#alg2:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;その2&lt;/a&gt;」の10倍以上かかるけど。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; への送信データが有限個の場合は最後に &lt;code&gt;close(ch)&lt;/code&gt; でクローズする。
一方 &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; からの受信側は &lt;a href=&#34;http://golang.org/ref/spec#For_statements&#34;&gt;for range 構文&lt;/a&gt;を使うことで安全に扱うことができる。
ただし上述の &lt;code&gt;sieve()&lt;/code&gt; 関数では 変数 &lt;code&gt;ch&lt;/code&gt; が新しい素数フィルタの出力に上書きされていくので &lt;a href=&#34;http://golang.org/ref/spec#For_statements&#34;&gt;for range 構文&lt;/a&gt;は使えない。
その代わり以下の記述で &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; を安全に扱うことができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;prime, ok := &amp;lt;-ch
if !ok {
    break // channel が閉じられた
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はここまで。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:ba5a2fe9dba0ce0dbb53ecd3120fd65e&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/20130414/1365960707&#34;&gt;Go の並行処理 - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sudix/items/f95ef0e5bbd0cd3d4378&#34;&gt;(翻訳)Goでのパイプラインとキャンセル - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/suin/items/eca21ed935115e5da2e8&#34;&gt;Go: 計算なしのFizzBuzz - Qiita&lt;/a&gt; : &lt;a href=&#34;http://golang.org/ref/spec#Channel_types&#34;&gt;channel&lt;/a&gt; の説明するのにいいかも&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yuki2006/items/3f90e53ce74c6cff1608&#34;&gt;Goのchannelの送受信用の型について - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hondata/items/64776c79063e93bea9ed&#34;&gt;Go言語のChannelは送信時にもブロックする - Qiita&lt;/a&gt; : 意外と見落とす channel 送信時のブロック&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Jxck_/items/da3ca2db58734a966cac&#34;&gt;Go - select loop の小ネタ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sudix/items/67d4cad08fe88dcb9a6d&#34;&gt;Goのforとgoroutineでやりがちなミスとたった一つの冴えたgo vetと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tutuming/items/c0ffdd28001ee0e9320d&#34;&gt;golang - x/net/context の実装パターン - Qiita&lt;/a&gt; : &lt;a href=&#34;https://godoc.org/golang.org/x/net/context&#34;&gt;golang.org/x/net/context&lt;/a&gt; を使って並行処理を細かく制御&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/07/30/golang-parallel-by-cpu/&#34;&gt;Go言語でCPU数に応じて並列処理数を制限する | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ymko/items/554e3630fefdc29393a8&#34;&gt;やはり俺のgolangがCPUを一つしか使わないのはまちがっている。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ba5a2fe9dba0ce0dbb53ecd3120fd65e:1&#34;&gt;message-passing 方式は Erlang などで一躍有名になったやつ。ただし Erlang ではプロセス間通信の手段として  message-passing を使う。これは Actor と呼ばれている。 &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt; は「並行処理」であり「並列処理」ではない。また，いわゆる thread とも異なる。&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で並列処理を行うなら「&lt;a href=&#34;http://deeeet.com/writing/2014/07/30/golang-parallel-by-cpu/&#34;&gt;Go言語でCPU数に応じて並列処理数を制限する&lt;/a&gt;」あたりが参考になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ba5a2fe9dba0ce0dbb53ecd3120fd65e:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ba5a2fe9dba0ce0dbb53ecd3120fd65e:2&#34;&gt;ただし現在の&lt;a href=&#34;https://golang.org/doc/&#34;&gt;公式ドキュメント&lt;/a&gt;には存在しない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ba5a2fe9dba0ce0dbb53ecd3120fd65e:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『「情報社会」が「社会」になった時代』 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/information-oriented-society/" />
		<id>tag:text.Baldanders.info,2015-09-15T21:42:00+0900:/remark/2015/information-oriented-society/</id>
		<published>2015-09-15T21:42:00+0900</published>
		<updated>2015-09-16T05:22:00+0900</updated>
		<summary>「技術が社会を変える」のではないなら，むしろ「大統領選挙に出馬するレッシグ教授」こそが次の一手なのかもしれない。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://2015ssi.mond.jp/?page_id=251&#34;&gt;2015年社会情報学会学会大会&lt;/a&gt;のワークショップ「『情報社会論』の変遷と再編――統治の再設計に向けて」の資料だそうな。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/9tAnQD5Ht9IBmp&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;http://www.slideshare.net/NishidaRyosuke/20150912&#34;&gt;20150912日本の情報社会論とその欲望&lt;/a&gt;&lt;/q&gt; （by &lt;a href=&#34;//www.slideshare.net/NishidaRyosuke&#34; target=&#34;_blank&#34;&gt;西田亮介&lt;/a&gt;）&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この中で『「情報社会」が「社会」になった時代』という言葉が印象的だった。&lt;/p&gt;

&lt;p&gt;スライドでも紹介されている佐藤俊樹さんの『社会は情報化の夢を見る ― ［新世紀版］ノイマンの夢・近代の欲望』は技術決定論に基づく安易な未来予測を「情報化」社会論だとして批判する。
この本の初版『ノイマンの夢・近代の欲望―情報化社会を解体する』は1996年に発行されたものだが，2010年に新世紀版を出すにあたって時事的な話題以外はほとんど手を入れる必要がなかったという。&lt;/p&gt;

&lt;p&gt;随分前に「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000599.shtml&#34;&gt;“The Shadow Web”&lt;/a&gt;」で紹介したが，もともとインターネットというのは障害や（国家などによる）検閲に強いシステムとして開発されてきた。
「インターネットは検閲をダメージであると解釈し，それを回避する」（John Gilmore）のである。&lt;/p&gt;

&lt;p&gt;しかし現状のインターネットはこのようには機能していないし，このような機能こそを（セキュリティの名のもとに）回避しようとする動きがある。
さらに言えば「クラウド化」と「IoT（Internet of Things）」によって，私たちは（利便性と引き換えに）私たちのプライバシーを人質に取られている。
インターネットはとっくに「テレビ」と化しているし，ある意味で「テレビ」より悪質である（だからといって今更自宅にテレビを置く気はないが）。&lt;/p&gt;

&lt;p&gt;確かに新しい技術の存在は社会の仕組みを変える可能性があるし，現に近代（前期近代）から大きく変容した現代（後期近代 late modernity）においてインターネットをはじめとする科学技術は無視できない存在である。
しかしそれは本当に「インターネットをはじめとする科学技術」によってもたらされたものだろうか。
私たちは私たちがこれまでやってきたことをモノに転嫁しているだけではないのか。
技術が社会を変えるのなら社会に必要なのはヒトではなくモノである，と言えないか。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;https://wirelesswire.jp/2015/09/46083/&#34;&gt;20年後：インターネットの自由という夢の死&lt;/a&gt;」では現在のインターネットの状況を変えるためには「中央集権化、規制、そしてグローバリゼーションという3つのトレンドの逆をいく」必要があると述べている。
でも，それって結局「近代の欲望」のバリエーションにすぎないし，「人こそが社会を変える」と言っているのではないのか。&lt;/p&gt;

&lt;p&gt;「技術が社会を変える」のではないなら，むしろ「&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1509/07/news120.html&#34;&gt;大統領選挙に出馬するレッシグ教授&lt;/a&gt;」こそが次の一手なのかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;参考:402d7641705aec28f708246dee42af14&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/ced/20060514/1147585867&#34;&gt;ノイマンの夢・近代の欲望―情報化社会を解体する - 雑記帳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000599.shtml&#34;&gt;“The Shadow Web”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2015/09/46083/&#34;&gt;20年後：インターネットの自由という夢の死 - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4309410391/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51sgo2CPdpL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4309410391/baldandersinf-22/&#34;&gt;社会は情報化の夢を見る---［新世紀版］ノイマンの夢・近代の欲望 (河出文庫)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;佐藤 俊樹 &lt;/dd&gt;&lt;dd&gt;河出書房新社 2010-09-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;3&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-3-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4140910844/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4140910844.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ウェブ社会の思想―“遍在する私”をどう生きるか (NHKブックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4040800206/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4040800206.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;人工知能は人間を超えるか ディープラーニングの先にあるもの (角川EPUB選書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798106801/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798106801.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Free Culture&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4004304652/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4004304652.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;現代社会の理論―情報化・消費化社会の現在と未来 (岩波新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4121023226/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4121023226.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;仕事と家族 - 日本はなぜ働きづらく、産みにくいのか (中公新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;1996年に出版された『ノイマンの夢・近代の欲望―情報化社会を解体する』の改訂新装版。しかし内容はこれまでと変わりなく，繰り返し語られる技術決定論を前提とする安易な未来予測を「情報化」社会論だとして批判する。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/417iD4x5N%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジョック ヤング Jock Young &lt;/dd&gt;&lt;dd&gt;洛北出版 2007-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764331/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764331.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;後期近代の眩暈―排除から過剰包摂へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4255008515/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4255008515.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;断片的なものの社会学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796700439/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4796700439.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スティグマの社会学―烙印を押されたアイデンティティ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764242/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764242.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新しい貧困 労働消費主義ニュープア&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062881357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062881357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;弱者の居場所がない社会――貧困・格差と社会的包摂 (講談社現代新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000410.shtml&#34;&gt;感想はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798115002/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41bC8pdM2iL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798115002/baldandersinf-22/&#34;&gt;CODE VERSION 2.0&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ローレンス・レッシグ Lawrence Lessig &lt;/dd&gt;&lt;dd&gt;翔泳社 2007-12-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798102040/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798102040.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;コモンズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798119806/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798119806.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;REMIX ハイブリッド経済で栄える文化と商業のあり方&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798106801/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798106801.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Free Culture&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480431837/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480431837.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アーキテクチャの生態系: 情報環境はいかに設計されてきたか (ちくま文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757102453/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4757102453.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アーキテクチャの生態系――情報環境はいかに設計されてきたか&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;前著『CODE』改訂版。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM Editor に関するメモ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/atom-editor/" />
		<id>tag:text.Baldanders.info,2015-09-15T21:00:13+0900:/remark/2015/atom-editor/</id>
		<published>2015-09-15T21:00:13+0900</published>
		<updated>2015-09-17T11:34:00+0900</updated>
		<summary>ATOM Editor に関するメモ。 Windows 環境が前提になっているのであしからず。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;この記事は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor に関する情報を Qiita に投稿した記事から再構成したものである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/3d41d98dacc107d73431&#34;&gt;ATOM Editor をそろそろ始めようか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/a1b4d1ad2a6693ae33e4&#34;&gt;行末の空白は EditorConfig で始末しましょう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/5c6dafcece9e7118877a&#34;&gt;ATOM 1.0 リリースおめでたう記念に最初からインストールし直してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そうそう。
Windows 環境が前提になっているのであしからず。&lt;/p&gt;

&lt;h2 id=&#34;atom-1-0-をインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM 1.0 をインストールする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; サイトからインストールパッケージ &lt;code&gt;AtomSetup.exe&lt;/code&gt; をダウンロードして起動すればよい。
インストールが成功するとインストールフォルダ &lt;code&gt;C:\Users\username\AppData\Local\atom\bin&lt;/code&gt; に PATH が通る。
これでコマンドプロンプトからも &lt;code&gt;atom&lt;/code&gt; および &lt;code&gt;apm&lt;/code&gt; コマンドが使えるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;atom -v
[7696:0915/112859:INFO:CONSOLE(0)] 1.0.11


C:&amp;gt;apm -v
apm  1.0.4
npm  2.13.3
node 0.10.40
python
git 2.5.2.windows.2
visual studio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の環境では Python と Visual Studio は入れてないのでバージョンが入ってないのかな。
たしか node-gyp をビルドするのに（Windows 環境では） Python と Visual Studio が要るんだよね。
ううむ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://create-something.hatenadiary.jp/entry/2014/07/13/021655&#34;&gt;Windowsでnode-gypのビルドを通す - なにか作る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;atom-をアンインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM をアンインストールする&lt;/h3&gt;

&lt;p&gt;アンインストール自体はコンパネから「プログラムと機能」を開いて「Atom」をアンインストールする。アンインストールを開始するもほぼ無言で完了。男前（笑）&lt;/p&gt;

&lt;p&gt;ただしユーザのフォルダ内には &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 関連のファイルがかなり残っているので手動で掃除する。対象となるのは以下のフォルダ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\.atom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Local\atom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Local\Temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\username\AppData\Roaming\Atom&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;AppData&lt;/code&gt; フォルダは既定では不可視になっているのでご注意を。 &lt;code&gt;C:\Users\username\.atom&lt;/code&gt; フォルダには &lt;code&gt;keymap.cson&lt;/code&gt; などの設定ファイルが入ってるので，バックアップを取っておくと安全。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C:\Users\username\AppData\Local\Temp&lt;/code&gt; には &lt;code&gt;Atom Crashes&lt;/code&gt; フォルダがある。どうやらクラッシュ・レポートはここに吐かれるらしい。テンポラリ・フォルダにある古い日付のフォルダ・ファイルは，大概は削除して大丈夫なのだが，たまにヤバいやつもあるので掃除は慎重に。&lt;/p&gt;

&lt;h2 id=&#34;apm-stars-でテーマ-パッケージを一気にインストールする:9f5cc37d12d96caee7deea463dce6873&#34;&gt;apm stars でテーマ・パッケージを一気にインストールする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;apm&lt;/code&gt; には star を付けたテーマ・パッケージを一気にインストールするコマンドがある。&lt;/p&gt;

&lt;p&gt;この機能を使うには，まず &lt;code&gt;apm&lt;/code&gt; にアカウントのトークンを登録する必要がある。アカウントのトークンは &lt;a href=&#34;https://atom.io/account&#34;&gt;Account&lt;/a&gt; ページから取得できる。（&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; のアカウントを持っていれば，そのまま &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にも sign in できるのだが，持ってない人はどうするんだろう？）&lt;/p&gt;

&lt;p&gt;取得したトークンを &lt;code&gt;apm login&lt;/code&gt; コマンドで登録すれば OK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;apm login
Welcome to Atom!

Before you can publish packages, you&#39;ll need an API token.

Visit your account page on Atom.io https://atom.io/account,
copy the token and paste it below when prompted.

Press [Enter] to open your account page on Atom.io.
Token&amp;gt; ****************
Saving token to Keychain done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Star を付けたテーマ・パッケージは &lt;code&gt;apm stars&lt;/code&gt; コマンドで見ることができる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;apm stars
Packages starred by you (12)
├── atom-monokai Monokai syntax theme for Atom Dark &amp;amp; Light UI, One Dark &amp;amp; Light, and Seti UI (23084 downloads, 34 stars)
├── autoclose-html Automates closing of HTML Tags (76164 downloads, 266 stars)
├── editorconfig Helps developers maintain consistent coding styles between different editors (50538 downloads, 413 stars)
├── file-icons Assign file extension icons and colours for improved visual grepping (282022 downloads, 1429 stars)
├── git-plus Do git things without the terminal (253091 downloads, 794 stars)
├── highlight-line Highlights the current line in the editor (51313 downloads, 385 stars)
├── japan-util utilities for Japanese (738 downloads, 9 stars)
├── japanese-wrap Word wrap for Japanese text (51256 downloads, 302 stars)
├── open-recent Open recent files in the current window, and recent folders (optionally) in a new window. (10325 downloads, 128 stars)
├── quick-highlight Highlight text quickly. (826 downloads, 11 stars)
├── show-ideographic-space Show ideographic space (known as 全角スペース) (3691 downloads, 49 stars)
└── symbols-tree-view A symbols view like taglist (16995 downloads, 161 stars)

Use `apm stars --install` to install them all or visit http://atom.io/packages to read more about them.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに &lt;code&gt;--install&lt;/code&gt; オプションを付ければ一気にインストールできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;apm stars --install
Installing atom-monokai to C:\Users\username\.atom\packages done
Installing autoclose-html to C:\Users\username\.atom\packages done
Installing editorconfig to C:\Users\username\.atom\packages done
Installing file-icons to C:\Users\username\.atom\packages done
Installing git-plus to C:\Users\username\.atom\packages done
Installing highlight-line to C:\Users\username\.atom\packages done
Installing japan-util to C:\Users\username\.atom\packages done
Installing japanese-wrap to C:\Users\username\.atom\packages done
Installing open-recent to C:\Users\username\.atom\packages done
Installing quick-highlight to C:\Users\username\.atom\packages done
Installing show-ideographic-space to C:\Users\username\.atom\packages done
Installing symbols-tree-view to C:\Users\username\.atom\packages done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで複数マシンへの環境構築が随分楽になると思う。なお star の管理は &lt;code&gt;apm star&lt;/code&gt; または &lt;code&gt;apm unstar&lt;/code&gt; コマンドでできるが，テーマ・パッケージのページでも可能。&lt;/p&gt;

&lt;p&gt;（&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の star が &lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; の star のように &lt;a href=&#34;https://flattr.com/&#34;&gt;Flattr&lt;/a&gt; と連動すれば面白いんだけどねぇ。とりあえず flattr ボタンを貼り付ける手もあるけど）&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/115fea37ad2e515f6641&#34;&gt;ATOM の Theme / Package の感想文（2015-06-10） - Qiita&lt;/a&gt;」にテーマ・パッケージの感想を書いている。個人的な印象なんであんまり参考にならないかもだけど，よろしかったらどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;atom-の設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ATOM の設定&lt;/h2&gt;

&lt;h3 id=&#34;proxy-設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Proxy 設定&lt;/h3&gt;

&lt;p&gt;Intranet 上のマシンで外部との接続が阻まれている場合は Proxy 設定を行う。
設定には &lt;code&gt;apm&lt;/code&gt; コマンドを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;apm config set https-proxy http://username:password@proxy.exsample.com:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;font-family-の選択:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Font Family の選択&lt;/h3&gt;

&lt;p&gt;エディタのフォントは作業効率に大きく影響する。これは私個人の感覚だが，日本語の地の文章がゴシック体なのは辛い。いくら綺麗だからといって Meiryo フォントをエディタに使う気にはならない。ただし，コードに関しては視認性が一番重要。ということで，フォントの指定は以下で無問題。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Inconsolata&amp;quot;, &amp;quot;MS Mincho&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（日本語フォントの指定が MS 明朝なのは，どんな日本語 Windows 環境でも MS 明朝は必ず入ってるから。自分の感覚で見易いフォントがあればそちらを使うべき。ちなみに IPA 明朝は線が細すぎて不向きだった（まぁ印刷用に特化したフォントだからね。 IPA は Web Font 用の IPA 明朝/ゴシックフォントを開発すべき）。 &lt;a href=&#34;http://www.levien.com/type/myfonts/inconsolata.html&#34; title=&#34;Inconsolata&#34;&gt;Inconsolata&lt;/a&gt; は OpenType フォントを取ってきて「インストール」してしまえばよい）&lt;/p&gt;

&lt;p&gt;Windows では Tree View のフォントが汚いので，ここは素直に Meiryo UI フォントに変える。 &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; を以下のように変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css:styles.less&#34;&gt;.tree-view {
	font-family: &amp;quot;Meiryo UI&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css:styles.less&#34;&gt;atom-workspace {
  font-family: &amp;quot;Meiryo UI&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればタブや Settings 画面のフォントも変えられる。&lt;/p&gt;

&lt;h3 id=&#34;editorconfig:9f5cc37d12d96caee7deea463dce6873&#34;&gt;EditorConfig&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; があればタブや改行コードなどの設定を統一できる。
これは特に複数人で作業する場合に威力を発揮する。
たとえば，このサイトの作業環境では以下のように設定している。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root = true

[*]
end_of_line = lf
charset = utf-8
indent_style = tab
indent_size = 4
trim_trailing_whitespace = true
insert_final_newline = true

[*.html]
insert_final_newline = false

[*.md]
indent_style = space
indent_size = 4
trim_trailing_whitespace = false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; はフォルダを遡って &lt;code&gt;.editorconfig&lt;/code&gt; ファイルを探し，フォルダの上から順番に評価していく。
&lt;code&gt;root = true&lt;/code&gt; の記述がないとどこまでも上の階層に遡っていくので，プロジェクトのトップ・フォルダの &lt;code&gt;.editorconfig&lt;/code&gt; には必ずこれを記述すること。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[*]&lt;/code&gt; は対象となるファイルを指定している。 &lt;code&gt;[*]&lt;/code&gt; なら全てのファイルが対象である。 &lt;code&gt;[*.html]&lt;/code&gt; は拡張子 &lt;code&gt;html&lt;/code&gt; のファイルが対象となる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end_of_line&lt;/code&gt; では改行コードを指定する。 &lt;code&gt;lf&lt;/code&gt;, &lt;code&gt;cr&lt;/code&gt;, &lt;code&gt;crlf&lt;/code&gt; から選択できる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indent_style&lt;/code&gt; はインデント（タブ）のスタイルを指定する。 &lt;code&gt;tab&lt;/code&gt; または &lt;code&gt;space&lt;/code&gt; を指定する。 &lt;code&gt;space&lt;/code&gt; にすると，いわゆる「ソフトタブ」になる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indent_size&lt;/code&gt; はタブの幅を指定する。 &lt;code&gt;indent_style&lt;/code&gt; と &lt;code&gt;indent_size&lt;/code&gt; は常にセットで指定すると間違いがない。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trim_trailing_whitespace&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にすると行末の空白文字を削除してくれる。残念なことに &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の場合は，いわゆる「全角空白」を空白文字と見なしてくれない。まぁ全角空白を空白文字と見なす実装のほうが少ないけど。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert_final_newline&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; にするとファイルの末尾が改行文字ではない場合に補完してくれる。でもこれって使いどころが難しいのよね。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://editorconfig.org/&#34; title=&#34;EditorConfig&#34;&gt;EditorConfig&lt;/a&gt; は多くのテキスト・エディタや統合開発環境に対応していて，もちろん &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; にも対応パッケージがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/editorconfig&#34;&gt;editorconfig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;文字エンコーディングについて残念なお知らせ:9f5cc37d12d96caee7deea463dce6873&#34;&gt;文字エンコーディングについて残念なお知らせ&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;charset&lt;/code&gt; では文字エンコーディングを指定するが，標準では &lt;code&gt;latin1&lt;/code&gt;, &lt;code&gt;utf-8&lt;/code&gt;, &lt;code&gt;utf-8-bom&lt;/code&gt;, &lt;code&gt;utf-16be&lt;/code&gt;, &lt;code&gt;utf-16le&lt;/code&gt; しかサポートしていない。
それ以外の文字エンコーディングは実装依存ということになる。&lt;/p&gt;

&lt;p&gt;しかも &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の場合，ファイルを新規作成する場合にこの設定が効かないようで，たとえば &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 側の “File Encoding” が &lt;code&gt;shiftjis&lt;/code&gt; で  &lt;code&gt;.editorconfig&lt;/code&gt; ファイル側が &lt;code&gt;charset = utf-8&lt;/code&gt; の場合，新規作成ファイルは &lt;code&gt;shiftjis&lt;/code&gt; にセットされ，そのまま保存される。
しかも次にそのファイルを開く場合は（&lt;code&gt;.editorconfig&lt;/code&gt; ファイル側の設定が効いてしまうので） &lt;code&gt;utf8&lt;/code&gt; で開いてしまい，結果派手に文字化けする（&lt;code&gt;ctrl-shift-U&lt;/code&gt; で文字エンコーディングを変更すれば元に戻るけど）。&lt;/p&gt;

&lt;p&gt;新規作成時の初期の文字エンコーディングは今のところどうしようもないが，プロジェクトごとに “File Encoding” を変更して対応するか，新規作成ファイルが開いた直後に &lt;code&gt;ctrl-shift-U&lt;/code&gt; で文字エンコーディングを変更することで何とかなるだろう（ダサいけど）。&lt;/p&gt;

&lt;h4 id=&#34;ファイル読み込み時に文字エンコーディングを自動判別する:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ファイル読み込み時に文字エンコーディングを自動判別する&lt;/h4&gt;

&lt;p&gt;もうひとつの緩和策としては，既存ファイル読み込み時に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に文字エンコードを自動判別させることだ。ただし，この機能を持つ Package は今のところ存在しないようなので自前で何とかするしかない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tokudiro/items/bc232c7d36261dc45936&#34;&gt;ATOM でファイルを開いたら自動文字コード判定を行う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この設定を行うには node.js のフルパッケージが必要。&lt;/p&gt;

&lt;p&gt;（Linux や Mac な人は依存関係で node.js がインストールされると思うけど， Windows では &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; インストール時に一部機能が同梱されているだけなので（しかもバージョンが古い），フル機能を使うには別途インストールする必要あり）&lt;/p&gt;

&lt;p&gt;Windows の場合は &lt;code&gt;%USERPROFILE%\.atom&lt;/code&gt; フォルダに移動する。その後， &lt;code&gt;npm&lt;/code&gt; コマンドを使って &lt;code&gt;iconv-lite&lt;/code&gt; と &lt;code&gt;jschardet&lt;/code&gt; をインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:&amp;gt;cd C:\Users\username\.atom
C:\Users\username\.atom&amp;gt;&amp;gt;npm install iconv-lite
iconv-lite@0.4.10 node_modules\iconv-lite

C:\Users\username\.atom&amp;gt;&amp;gt;npm install jschardet
jschardet@1.1.1 node_modules\jschardet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると &lt;code&gt;%USERPROFILE%\.atom\node_modules&lt;/code&gt; フォルダが作成され，その中に &lt;code&gt;iconv-lite&lt;/code&gt; と &lt;code&gt;jschardet&lt;/code&gt; がインストールされているはずである。&lt;/p&gt;

&lt;p&gt;次は &lt;code&gt;%USERPROFILE%\.atom\init.coffee&lt;/code&gt; ファイルに以下の記述を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;fs = require(&#39;fs&#39;)

atom.workspace.onDidOpen -&amp;gt;
  editor = atom.workspace.getActiveTextEditor()

  try
    filePath = editor.getPath()
  catch error
    return
  return unless fs.existsSync(filePath)

  jschardet = require &#39;jschardet&#39;
  iconv = require &#39;iconv-lite&#39;
  fs.readFile filePath, (error, buffer) =&amp;gt;
    return if error?
    {encoding} = jschardet.detect(buffer) ? {}
    encoding = &#39;utf8&#39; if encoding is &#39;ascii&#39;
    return unless iconv.encodingExists(encoding)

    encoding = encoding.toLowerCase().replace(/[^0-9a-z]|:\d{4}$/g, &#39;&#39;)
    editor.setEncoding(encoding)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/tokudiro/items/bc232c7d36261dc45936&#34;&gt;ATOM でファイルを開いたら自動文字コード判定を行う&lt;/a&gt;」によると，これは &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; からの流用らしい。ただし現在， &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; は Core Package に入ってるので atom フォルダをひっくり返してもソースコードは見当たらない。ので，GitHub repository &lt;a href=&#34;https://github.com/atom/encoding-selector&#34;&gt;atom/encoding-selector&lt;/a&gt; にある &lt;a href=&#34;https://github.com/atom/encoding-selector/blob/master/lib/encoding-list-view.coffee&#34;&gt;lib/encoding-list-view.coffee&lt;/a&gt; を参考にするといいだろう。 &lt;code&gt;detectEncoding:&lt;/code&gt; のあたりである。&lt;/p&gt;

&lt;p&gt;これで &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を起動して既定の文字エンコーディングでない適当なファイルを読み込ませてみれば確認できる。ただし，自動判別は万能じゃない（たまに間違う）ので，その辺は悪しからずってことで。&lt;/p&gt;

&lt;p&gt;一番いいのは &lt;a href=&#34;https://atom.io/packages/encoding-selector&#34;&gt;encoding-selector&lt;/a&gt; がファイル読み込み時に自動判別する機能を付けてくれることなんだけど。誰かやらないかな。個人的には &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; 開発に積極的に commit する気はないので，完全に他人任せなのだが。&lt;/p&gt;

&lt;h3 id=&#34;git-関連機能:9f5cc37d12d96caee7deea463dce6873&#34;&gt;Git 関連機能&lt;/h3&gt;

&lt;p&gt;GitHub が作ったという割には git 機能が貧弱なのは何故なのだろう。特に &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; 相当の機能が Core パッケージに入ってないのは解せぬ。というわけでインストールした。公開してくださった方に感謝。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; は主にコマンドパレットで操作するが（メニューの「Packages」からも辿れる），コマンドパレットの呼び出しを f1 キーに割り当てたらだいぶ使いやすくなった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/git-control&#34;&gt;git-control&lt;/a&gt; は GUI で最初の頃は便利だったのだが， [git-plus] が手に馴染んできたら使わなくなった。 &lt;a href=&#34;https://atom.io/packages/git-control&#34;&gt;git-control&lt;/a&gt; が， submodule の処理が得意ではないっぽいのもマイナス。&lt;/p&gt;

&lt;h3 id=&#34;矩形選択:9f5cc37d12d96caee7deea463dce6873&#34;&gt;矩形選択&lt;/h3&gt;

&lt;p&gt;矩形選択用に &lt;code&gt;%USERPROFILE%\.atom\keymap.cson&lt;/code&gt; ファイルに対して以下のキー設定を行った&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;body&#39;:
  &#39;alt-shift-down&#39;: &#39;editor:add-selection-below&#39;
  &#39;alt-shift-left&#39;: &#39;core:select-left&#39;
  &#39;alt-shift-right&#39;: &#39;core:select-right&#39;
  &#39;alt-shift-up&#39;: &#39;editor:add-selection-above&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Alt+Shift キーを押しながらカーソルを上下左右に動かせば矩形選択ができる。実はこれらの操作のキー割り当ては元々こうなっている。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Keybind&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;コマンド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ctrl-alt-down&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;editor:add-selection-below&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ctrl-alt-up&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;editor:add-selection-above&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-left&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;core:select-left&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-right&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;core:select-right&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ただし，うちのパソコンでは Ctrl+Alt キーを押しながらカーソルを動かすと（Windows がキーを横取りして）ディスプレイの向きが変わってしまうので，かなり切ないことになってしまう。&lt;/p&gt;

&lt;p&gt;実際には &lt;code&gt;editor:add-selection-below&lt;/code&gt; および &lt;code&gt;editor:add-selection-above&lt;/code&gt; はマルチカーソル・モードのコマンドである。マルチカーソル・モードは癖がある感じだが慣れれば結構使えるかも。&lt;/p&gt;

&lt;p&gt;キーボード操作ではなく，マウス操作で矩形選択がしたい場合は &lt;a href=&#34;https://atom.io/packages/Sublime-Style-Column-Selection&#34;&gt;sublime-style-column-selection&lt;/a&gt; を導入するとよい。 Windows ではマウスのセンターボタンを押しながらマウスを動かす。&lt;/p&gt;

&lt;p&gt;いずれのやり方でも，日本語混じりのテキストではうまくいかない。これは上述した行の折り返しの問題と同じと思われる。やれやれ。&lt;/p&gt;

&lt;h3 id=&#34;その他:9f5cc37d12d96caee7deea463dce6873&#34;&gt;その他&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;自動保存を行う Core パッケージ &lt;a href=&#34;https://atom.io/packages/autosave&#34;&gt;autosave&lt;/a&gt; は既定で無効になってる。私は &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; で commit する前に保存するのをどうしても忘れるので，これを有効にしておくと吉。ただし &lt;a href=&#34;https://atom.io/packages/git-plus&#34;&gt;git-plus&lt;/a&gt; で，自動保存により勝手に commit が走るので注意。&lt;/li&gt;
&lt;li&gt;Core パッケージ &lt;a href=&#34;https://atom.io/packages/tabs&#34;&gt;tabs&lt;/a&gt; の設定で “Enable VCS Coloring” を有効にするとタブに表示されているファイル名が色分けされて表示される。&lt;/li&gt;
&lt;li&gt;Core パッケージ &lt;a href=&#34;https://atom.io/packages/git-diff&#34;&gt;git-diff&lt;/a&gt; の設定で “Show Icons In Editor Gutter” を有効にすると差分情報がちょっとだけ見やすくなる。&lt;/li&gt;
&lt;li&gt;インデントをそろえるために &lt;a href=&#34;https://atom.io/packages/highlight-column&#34;&gt;highlight-column&lt;/a&gt; を紹介しているページを見かけたけど，インデントをそろえる目的なら，標準の Settings で “Show Indent Guide” にチェックを入れておく方が吉。&lt;/li&gt;
&lt;li&gt;秀丸では大変重宝したアウトライン解析。&lt;a href=&#34;https://atom.io/packages/symbols-tree-view&#34;&gt;symbols-tree-view&lt;/a&gt; があればアウトライン解析を行って右側のサイドバーに表示する。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/japan-util&#34;&gt;japan-util&lt;/a&gt; : 全角・半角変換機能。英数字を全角で書いたり仮名文字を半角で書いたりするバカがいるので，意外と使うのよ，これ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/highlight-line&#34;&gt;highlight-line&lt;/a&gt; でカーソル行をハイライトにしたり下線を引いたりできる。色のカスタマイズは &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; ファイルで行う。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/open-recent&#34;&gt;open-recent&lt;/a&gt; は最近開いたファイルやフォルダを覚えておいてくれる便利なやつ。てか，なぜこれが標準で搭載されてないのだ。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/show-ideographic-space&#34;&gt;show-ideographic-space&lt;/a&gt; : いわゆる「全角空白」を視覚化してくれる。見せ方は &lt;code&gt;%USERPROFILE%\.atom\styles.less&lt;/code&gt; ファイルでカスタマイズ可能。実際には IME のプロパティでスペース・キー押下で常に「半角空白」を入力するように設定すればほとんど防げるんだどね（全角空白を入力する場合は &lt;code&gt;shift-space&lt;/code&gt; 押下）。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/packages/autoclose-html&#34;&gt;autoclose-html&lt;/a&gt; : HTML 入力でタグを入力すると自動的に閉じタグを補完してくれる。自動補完の機能は色々あって，大抵は &lt;a href=&#34;https://atom.io/packages/autocomplete-plus&#34;&gt;autocomplete-plus&lt;/a&gt; のサブパッケージだったりするのだが，これだけは毛色が違う（笑）&lt;/li&gt;
&lt;li&gt;特定の単語をマークしておける &lt;a href=&#34;https://atom.io/packages/quick-highlight&#34;&gt;quick-highlight&lt;/a&gt; が結構使える。 Windows だとキーに割り当てられないので、 toggle を適当なファンクションキーとかに割り当てておくとめっさ便利。&lt;/li&gt;
&lt;li&gt;むむっ。 &lt;a href=&#34;https://atom.io/packages/latex&#34;&gt;latex&lt;/a&gt; パッケージなるものがあるなぁ。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;現在の設定:9f5cc37d12d96caee7deea463dce6873&#34;&gt;現在の設定&lt;/h3&gt;

&lt;p&gt;現在の設定は &lt;a href=&#34;https://gist.github.com/spiegel-im-spiegel/e6e9c7340987f1607b2c&#34;&gt;Gist に貼り付け&lt;/a&gt;ている。
よろしかったら参考にどうぞ。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/spiegel-im-spiegel/e6e9c7340987f1607b2c.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;ブックマーク:9f5cc37d12d96caee7deea463dce6873&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に関するブックマークは &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/3d41d98dacc107d73431&#34;&gt;Qiita でメンテナンス&lt;/a&gt;している。
こちらも併せてどうぞ。&lt;/p&gt;
</content>
	</entry>
	
</feed>
