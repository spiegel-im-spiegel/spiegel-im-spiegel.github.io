<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2015-09-26T19:36:36+0900:/</id>
	<updated>2015-09-26T19:36:36+0900</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」 （プレ・オープン中）</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15-DEV</generator>

	
	<entry>
		<title>ブログ機能移転に関する TODO - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/todo-replace-blog/" />
		<id>tag:text.Baldanders.info,2015-09-26T19:36:36+0900:/remark/2015/todo-replace-blog/</id>
		<published>2015-09-26T19:36:36+0900</published>
		
		<summary>description</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;さて，本家サイトに&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000872.shtml&#34;&gt;ブログ機能移転の告知&lt;/a&gt;を出したぞ。
ここでは覚え書きとして移転作業の TODO を挙げておく。&lt;/p&gt;

&lt;ul style=&#34;list-style:none;&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;todo&#34; id=&#34;todo1&#34; disabled=&#34;true&#34; checked=&#34;checked&#34;&gt; &lt;a href=&#34;http://www.baldanders.info/archives.shtml&#34;&gt;旧ブログ記事&lt;/a&gt;からトラックバック情報を削除&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;todo&#34; id=&#34;todo2&#34; disabled=&#34;true&#34;&gt; 10月4日（日）までに本家サイトから &lt;a href=&#34;http://www.movabletype.jp/opensource/&#34;&gt;MTOS&lt;/a&gt; のモジュールを削除&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;todo&#34; id=&#34;todo3&#34; disabled=&#34;true&#34;&gt; &lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt; のレシピから&lt;a href=&#34;http://www.baldanders.info/archives.shtml&#34;&gt;旧ブログ記事&lt;/a&gt;関連のものを削除&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;todo&#34; id=&#34;todo4&#34; disabled=&#34;true&#34;&gt; その後，本家の RSS を &lt;a href=&#34;http://text.baldanders.info/index.xml&#34;&gt;text.Baldanders.info&lt;/a&gt; にリダイレクト&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;todo&#34; id=&#34;todo5&#34; disabled=&#34;true&#34;&gt; 関連 cron （主に DB のバックアップ）の停止&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>今日の戯れ言：セクサロイドは電気ウナギの夢を見るか - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/0925-diary/" />
		<id>tag:text.Baldanders.info,2015-09-25T21:57:48+0900:/remark/2015/0925-diary/</id>
		<published>2015-09-25T21:57:48+0900</published>
		
		<summary>セクサロイドは電気ウナギの夢を見るか / スマホの緊急通報ってマジ意味あるの？ / 「ノーベル賞有力候補に森和俊、坂口志文氏」 / 「僕らが守るべきウェブ」とか / 金融インフラを Block Chain で代替する / 「水のような音楽」の結末</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;ブックマークしたネタが溜まってきたので，ここらで吐き出しておく&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#non-human-person:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;セクサロイドは電気ウナギの夢を見るか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#k-tai:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;スマホの緊急通報ってマジ意味あるの？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nobel-prize:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「ノーベル賞有力候補に森和俊、坂口志文氏」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#our-web:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「僕らが守るべきウェブ」とか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#p2p:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;金融インフラを Block Chain で代替する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#music:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「水のような音楽」の結末&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;non-human-person:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;セクサロイドは電気ウナギの夢を見るか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2015/09/25/pepper-robot-sex-banned/&#34;&gt;ロボット「Pepper」はユーザー規約で性行為を禁止されている « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;q lang=&#34;en&#34;&gt;&lt;a href=&#34;http://arstechnica.co.uk/gadgets/2015/09/sexbots-with-a-detrimental-effect-on-society-should-be-banned-say-researchers/&#34;&gt;Sexbots with a “detrimental effect on society” should be banned, say researchers&lt;/a&gt;&lt;/q&gt;
 あたりも合わせて読むと面白いかもしれない。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;このキャンペーンの創始者たちは、セックスロボットの開発により「女性と子どもをモノとみなす傾向が助長」され、「女性と子どもが劣った存在であるという認識」が強まるので禁止しなければならないと主張している。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2015/09/25/pepper-robot-sex-banned/&#34;&gt;ロボット「Pepper」はユーザー規約で性行為を禁止されている&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;というのはどう考えても言いがかりとしか思えないけどね&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
これだからキリスト教圏の人間ってのは&amp;hellip;&lt;/p&gt;

&lt;p&gt;これとは対照的に&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bylines.news.yahoo.co.jp/kuriharakiyoshi/20150924-00049819/&#34;&gt;サルは著作権者になり得るのか？(栗原潔) - 個人 - Yahoo!ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という記事も見かけてウケてしまった。&lt;/p&gt;

&lt;p&gt;これって実は著作権ではなく，いわゆる &lt;q lang=&#34;en&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000788.shtml&#34;&gt;non-human person&lt;/a&gt;&lt;/q&gt;
 の問題であるように思える。だから動物愛護団体が動いているわけだ。
もっとも米国では&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;NhRPの主張は、チンパンジーにも権利があるというものだ。チンパンジーは人間にこれほどよく似ているのだから、完全な人権とまではいかなくても、少なくともいくつかの基本的な権利を認めるべきだという主張だ。&lt;br&gt;
しかし、12月4日（米国時間）に下された最新の判決は、原告側の敗訴となった。ニューヨーク州の最高裁判所は、知性や感情をもっているとはいえ、チンパンジーは権利をもつ者に期待される社会的義務を果たすことができないと結論付けたのだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2014/12/24/orangutan-personhood/&#34;&gt;アルゼンチンの裁判所、オランウータンに「人権」を認める&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;らしいので，著作権も認められないんじゃないのかなぁ。
だって著作権法って「インセンティブ法」なんでしょ。&lt;/p&gt;

&lt;p&gt;ロボットが「モノ」であればどんなに精巧であっても「ダッチワイフ」や「張り型」の延長でしかないし&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;， &lt;q lang=&#34;en&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000788.shtml&#34;&gt;non-human person&lt;/a&gt;&lt;/q&gt;
 だというなら，ヒトの都合で行為を禁止すること自体が「権利の侵害」と見なしうるよね。&lt;/p&gt;

&lt;p&gt;そういえば「&lt;a href=&#34;http://robotlaw.jp/&#34;&gt;ロボット法学会&lt;/a&gt;」設立らしい。
その&lt;a href=&#34;http://peatix.com/event/115206&#34;&gt;準備研究会&lt;/a&gt;が10月に開催されるそうな。
いやぁ，スピード感があっていいですな。&lt;/p&gt;

&lt;h2 id=&#34;k-tai:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;スマホの緊急通報ってマジ意味あるの？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20150925_722631.html&#34;&gt;ウェザーニューズ、噴火するとスマホに通知する「火山アラーム」、ライブカメラや詳細情報を伝える「火山 Ch.」も -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これってさぁ，現地の人間にとっては「遅すぎる情報」だし，それ以外の人にとっては興味本位以上の価値はないよね。
地震の緊急通報にしたって，西日本に多い直下型地震の場合は地震を感じてから緊急通報が鳴ったりするわけさ。
ウザいことこの上ない。&lt;/p&gt;

&lt;p&gt;一番ウザいのは避難勧告「解除」をわざわざ緊急通報で発信してくさること。
これ避難している人以外には意味のない情報なんだから，避難所にいる人に直接伝えればいいだろ。
なんでスマホに送るかなぁ。&lt;/p&gt;

&lt;p&gt;緊急通報ってのは，本当に緊急で，更にそれによって何らかのアクションを取りうる場合には有効だけど，そうでないなら全く無意味な情報でしかなく，無意味な情報が頻発するような「緊急」通報なんかみんなスルーしちゃうよ，そのうち。&lt;/p&gt;

&lt;h2 id=&#34;nobel-prize:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「ノーベル賞有力候補に森和俊、坂口志文氏」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2015/09/20150924_03.html&#34;&gt;2015年9月24日ニュース「ノーベル賞有力候補に森和俊、坂口志文氏　トムソン・ロイター発表」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ノーベル賞の話題が出ると秋って感じ。&lt;/p&gt;

&lt;h2 id=&#34;our-web:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「僕らが守るべきウェブ」とか&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20150925/webwehavetosave&#34;&gt;yomoyomo さんとこの記事&lt;/a&gt;経由&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/mediumjp/the-web-we-have-to-save-95fb9b150b49&#34;&gt;僕らが守るべきウェブ — Japanese Official — Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「&lt;a href=&#34;https://wirelesswire.jp/2015/09/46083/&#34;&gt;20年後：インターネットの自由という夢の死&lt;/a&gt;」も併せて読むとよい。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;https://wirelesswire.jp/2015/09/46083/&#34;&gt;20年後：インターネットの自由という夢の死&lt;/a&gt;」については「&lt;a href=&#34;http://text.baldanders.info/remark/2015/information-oriented-society/&#34;&gt;『「情報社会」が「社会」になった時代』&lt;/a&gt;」でもちょろんと紹介したが，彼らの言う「インターネットの自由」ってのは結局，近代の欲望である「社会的包摂」をそのままネットに持ち込んでいるに過ぎない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:f&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:f&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
で，その「社会的包摂」がどうなったかは現代（late modernity）社会をみれば明らかだ。&lt;/p&gt;

&lt;p&gt;ネットが「異郷」である時代&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; はとっくに終わった。
今や「ネット」も「リアル」もひと続きの「社会」である。
リアルの社会で「社会的包摂」が破綻しているのに，ネットで上手くいく筈がないじゃない。&lt;/p&gt;

&lt;p&gt;だから問題は「インターネットの自由」なんてコップの中の話じゃなくて，ネットを含む「社会と自由」をどう整合させていくか，といった感じに「問い」を変えていかなければならない。
意味を失った「問い」の解を探し続けるのは「目的を失った市民運動」と同じくらい害悪である。&lt;/p&gt;

&lt;p&gt;そろそろ「インターネット」に引きこもって新参者を dis るのは止めたほうがいいと思うよ。&lt;/p&gt;

&lt;h3 id=&#34;それは-階級闘争-か:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;それは「階級闘争」か？&lt;/h3&gt;

&lt;p&gt;これに関連するかもしれないけど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://chikawatanabe.com/2015/09/22/sharing_economy_labor_issues/&#34;&gt;階級闘争としてのシェアリング（またはオンデマンド）エコノミー | On Off and Beyond&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これって「階級闘争」というよりはむしろ「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000410.shtml&#34;&gt;相対的剥奪&lt;/a&gt;」じゃないのかなぁ。&lt;/p&gt;

&lt;h2 id=&#34;p2p:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;金融インフラを Block Chain で代替する&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/09/25/mijin/&#34;&gt;金融インフラをブロックチェーンで代替してコストを10分の1に、日本から「mijin」が登場 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は「それはとても理にかなってるね」と反応する側だが，それよりも日本がようやく「P2P アレルギー」から脱しつつある？ と思うと感慨深い。&lt;/p&gt;

&lt;h2 id=&#34;music:52299d6aab5a2eae24a6b7c60cb0c372&#34;&gt;「水のような音楽」の結末&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/09/24/20150923mo-users-mo-money/&#34;&gt;ストリーミングサービスの真実：レーベルは儲かっているがアーティストに利益が回っていない | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ストリーミング・サービスってのは結局のところ，今まで「水売り」から買ってた水を「水道局」から買うってことで&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:d&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;，それで儲かってるのは流通を押さえている存在（＝出版社）なんだよね。&lt;/p&gt;

&lt;p&gt;記事では&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;現在、ストリーミングサービスから得られるロイヤリティ料が少ないように見えるのは、ストリーミング自体がまだ新しいものだからだ。利用者が登録するほど、16ドルでCDが販売された時代と匹敵するほどの支払いをアーティストは手に入れることができるようになる。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/09/24/20150923mo-users-mo-money/&#34;&gt;ストリーミングサービスの真実：レーベルは儲かっているがアーティストに利益が回っていない&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;と書かれているが，はっきり言って（音楽）出版社への依存状態を減らしていかないと先はないと思う。
もうパトロンが食客を養う時代じゃないだろう。&lt;/p&gt;

&lt;p&gt;ところで国内の音楽ストリーミング・サービスはどれもイマイチだと思っていたが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:52299d6aab5a2eae24a6b7c60cb0c372:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:52299d6aab5a2eae24a6b7c60cb0c372:e&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;， &lt;a href=&#34;http://googlejapan.blogspot.jp/2015/09/google-play-music.html&#34;&gt;Google Play Music&lt;/a&gt; はかなりマシなサービスだと思う。
いや，私，嗜好が偏ってるから（笑）&lt;/p&gt;

&lt;p&gt;でも実は &lt;a href=&#34;http://googlejapan.blogspot.jp/2015/09/google-play-music.html&#34;&gt;Google Play Music&lt;/a&gt; はあまり利用してない。
何故なら私のケータイには既に2千曲以上入ってるし（主に CD から落としたのと Amazon MP3 で買ったやつ），知らない音楽を「発見」するなら &lt;a href=&#34;http://www.shoutcast.com/&#34;&gt;SHOUTcast&lt;/a&gt; で充分だから。
私があと30歳若かったら違う感想を持ったんだろうけどねぇ。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:a&#34;&gt;そういえば手塚治虫さんの名作『火の鳥』の「未来編」では，人類で唯一生き残ったマサトが「彼女」を作るために大量のロボットを作るけど，その度に絶望するシーンがあって子どもながらに衝撃的だった（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:b&#34;&gt;性欲がモノに向かっていくなら，むしろ性犯罪の抑制になる？
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:f&#34;&gt;違うのは「物語（narrative）」ではなく「技術」で包摂しようとしていることだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:f&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:c&#34;&gt;ここでいう「時代」とは，もちろんインターネットのタイムスケールの話だよ。インターネットでは「4年ひと昔」だ。今なら「2年ひと昔」かもしれない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:d&#34;&gt;島根県松江市みたいに水道代がやたら高いところには当てはまらないかもだけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:52299d6aab5a2eae24a6b7c60cb0c372:e&#34;&gt;Apple Music は除く。何故なら私は Apple 製品を持ってないから。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:52299d6aab5a2eae24a6b7c60cb0c372:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Template の部品化 - hugo</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/hugo/partial-template/" />
		<id>tag:text.Baldanders.info,2015-09-25T11:14:44+0900:/hugo/partial-template/</id>
		<published>2015-09-25T11:14:44+0900</published>
		
		<summary>今回は Template について，もう少しだけ詳しく紹介してみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="hugo" label="hugo" scheme="http://text.baldanders.info/hugo" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は Template について，もう少しだけ詳しく紹介してみる。&lt;/p&gt;

&lt;h2 id=&#34;theme-hugo-theme-text-を導入する:c866e1b45973a5febd798fe7f4d9aa2f&#34;&gt;Theme “hugo-theme-text” を導入する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/hugo/theme/&#34; title=&#34;Theme を利用する&#34;&gt;前回&lt;/a&gt;予告した通り，拙作の Theme &lt;a href=&#34;https://github.com/spiegel-im-spiegel/hugo-theme-text&#34;&gt;spiegel-im-spiegel/hugo-theme-text&lt;/a&gt; を導入する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;git clone https://github.com/spiegel-im-spiegel/hugo-theme-text.git themes/hugo-theme-text
Cloning into &#39;themes/hugo-theme-text&#39;...
remote: Counting objects: 174, done.
remote: Compressing objects: 100% (133/133), done.
Receiving objecemote: Total 174 (delta 82), reused 123 (delta 35), pack-reused 0
Receiving objects:  49%
Receiving objects: 100% (174/174), 25.34 KiB | 0 bytes/s, done.
Resolving deltas: 100% (82/82), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作業環境が git 管理下にある場合は submodule として導入するとよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;git submodule add https://github.com/spiegel-im-spiegel/hugo-theme-text.git themes/hugo-theme-text
Cloning into &#39;themes/hugo-theme-text&#39;...
remote: Counting objects: 282, done.
remote: Compressing objects: 100% (11/11), done.
rRemote: Total 282 (delta 4), reused 0 (delta 0), pack-reused 271eceiving object
Receiving objects: 100% (282/282), 37.54 KiB | 0 bytes/s, done.
Resolving deltas: 100% (141/141), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;では，例によっていきなりビルド。
の前に，作業環境の &lt;code&gt;layouts&lt;/code&gt; フォルダを空っぽにする。&lt;/p&gt;

&lt;p&gt;ではビルド。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;hugo --theme=&amp;quot;hugo-theme-text&amp;quot;
0 draft content
0 future content
1 pages created
0 paginator pages created
2 tags created
1 categories created
in 21 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでこんな感じの &lt;code&gt;index.html&lt;/code&gt; ファイルができれば成功。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;jp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;Hugo 0.15-DEV&amp;quot; /&amp;gt;

&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//fonts.googleapis.com/css?family=Droid+Serif:400,400italic,700,700italic|Open+Sans:400,400italic,700,700italic|Inconsolata:400,700&amp;amp;subset=latin,latin-ext&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/cc-icons/1.2.1/css/cc-icons.min.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/main.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/text-baldanders.css&amp;quot;&amp;gt;

&amp;lt;link rel=&amp;quot;alternate&amp;quot; href=&amp;quot;/index.xml&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; title=&amp;quot;Hello World!&amp;quot;&amp;gt;

&amp;lt;title&amp;gt;Hello World!&amp;lt;/title&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;



&amp;lt;div id=&#39;container&#39;&amp;gt;
&amp;lt;header role=&amp;quot;banner&amp;quot;&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://hello.example.com/&amp;quot;&amp;gt;Hello World!&amp;lt;/a&amp;gt; &amp;lt;a href=&#39;http://text.baldanders.info/index.xml&#39; title=&#39;Feed&#39;&amp;gt;&amp;lt;i class=&#39;fa fa-rss&#39;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;

&amp;lt;/header&amp;gt;


&amp;lt;main role=&amp;quot;main&amp;quot;&amp;gt;
&amp;lt;article itemscope itemtype=&#39;http://schema.org/Blog&#39; itemref=&#39;maker&#39;&amp;gt;
&amp;lt;h2 itemprop=&#39;name&#39;&amp;gt;All Entries&amp;lt;/h2&amp;gt;
&amp;lt;ul style=&amp;quot;list-style:none;&amp;quot;&amp;gt;&amp;lt;li itemprop=&#39;blogPost&#39; itemscope itemtype=&#39;http://schema.org/BlogPosting&#39;&amp;gt;
	[&amp;lt;a href=&amp;quot;/practice&amp;quot;&amp;gt;practice&amp;lt;/a&amp;gt;] &amp;lt;a href=&amp;quot;http://hello.example.com/practice/hello/&amp;quot; itemprop=&#39;url&#39;&amp;gt;&amp;lt;strong itemprop=&#39;name&#39;&amp;gt;Hello!&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;
	&amp;lt;span style=&amp;quot;font-size:smaller;&amp;quot;&amp;gt;(&amp;lt;time&amp;gt;2015-09-05&amp;lt;/time&amp;gt;)
	 #&amp;lt;a href=&amp;quot;/tags/hello&amp;quot;&amp;gt;hello&amp;lt;/a&amp;gt; #&amp;lt;a href=&amp;quot;/tags/world&amp;quot;&amp;gt;world&amp;lt;/a&amp;gt;
	&amp;lt;/span&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/article&amp;gt;
&amp;lt;/main&amp;gt;

&amp;lt;footer&amp;gt;

&amp;lt;nav role=&amp;quot;navigation&amp;quot;&amp;gt;
&amp;lt;ul class=&#39;cloud center&#39;&amp;gt;
&amp;lt;li&amp;gt;Powered by &amp;lt;a href=&#39;http://gohugo.io/&#39;&amp;gt;Hugo 0.15-DEV&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;https://github.com/spiegel-im-spiegel/hugo-theme-text&amp;quot;&amp;gt;Text&amp;lt;/a&amp;gt;.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;

&amp;lt;/footer&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だいぶ賑やかになった。&lt;/p&gt;

&lt;p&gt;この &lt;code&gt;index.html&lt;/code&gt; のテンプレートはこんな感じになっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ partial &amp;quot;top.html&amp;quot; . }}
&amp;lt;head&amp;gt;
{{ partial &amp;quot;header.html&amp;quot; . }}
&amp;lt;title&amp;gt;{{ .Site.Title }}&amp;lt;/title&amp;gt;
{{ with .Site.Params.description }}&amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ end }}
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
{{ partial &amp;quot;prepare.html&amp;quot; . }}
&amp;lt;div id=&#39;container&#39;&amp;gt;&amp;lt;!-- Container Area --&amp;gt;
{{ partial &amp;quot;banner.html&amp;quot; . }}

&amp;lt;main role=&amp;quot;main&amp;quot;&amp;gt;
&amp;lt;article itemscope itemtype=&#39;http://schema.org/Blog&#39; itemref=&#39;maker&#39;&amp;gt;
&amp;lt;h2 itemprop=&#39;name&#39;&amp;gt;All Entries&amp;lt;/h2&amp;gt;
&amp;lt;ul style=&amp;quot;list-style:none;&amp;quot;&amp;gt;{{ range .Site.Pages }}{{ partial &amp;quot;li.html&amp;quot; . }}{{ end }}&amp;lt;/ul&amp;gt;
&amp;lt;/article&amp;gt;
&amp;lt;/main&amp;gt;

{{ partial &amp;quot;footer.html&amp;quot; . }}
&amp;lt;/div&amp;gt;&amp;lt;!-- Container Area --&amp;gt;
{{ partial &amp;quot;cleanup.html&amp;quot; . }}
&amp;lt;/body&amp;gt;
{{ partial &amp;quot;end.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この中で &lt;code&gt;{{ partial &amp;quot;top.html&amp;quot; . }}&lt;/code&gt; となっている部分が partial template を呼び出している部分で，テンプレートの中にテンプレートを入れ子にすることができる。&lt;/p&gt;

&lt;h3 id=&#34;partial-template:c866e1b45973a5febd798fe7f4d9aa2f&#34;&gt;Partial Template&lt;/h3&gt;

&lt;p&gt;Partial template を格納する場所は決まっている。
では， &lt;a href=&#34;https://github.com/spiegel-im-spiegel/hugo-theme-text&#34;&gt;spiegel-im-spiegel/hugo-theme-text&lt;/a&gt; の構成を見てみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\hugo-env\www&amp;gt;tree /f themes\hugo-theme-text
C:\HUGO-ENV\WWW\THEMES\HUGO-THEME-TEXT
│  LICENSE
│  README.md
│  theme.toml
│
├─archetypes
│      default.md
│
├─layouts
│  │  index.html
│  │  rss.xml
│  │
│  ├─partials
│  │      banner.html
│  │      cc-license.html
│  │      ccl-rss.html
│  │      cleanup.html
│  │      end.html
│  │      feedback.html
│  │      footer.html
│  │      header-include.html
│  │      header.html
│  │      li.html
│  │      navi.html
│  │      prepare.html
│  │      social.html
│  │      top.html
│  │
│  └─_default
│          list.html
│          single.html
│
└─static
    ├─css
    │      main.css
    │      text-baldanders.css
    │
    └─images
            avatar.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;layouts/partials&lt;/code&gt; フォルダに多くのファイルが格納されているのがお分かりだろうか。
これが partial template である。&lt;/p&gt;

&lt;p&gt;たとえば &lt;code&gt;layouts/partials/top.html&lt;/code&gt; の中身は以下のようになっている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
{{ with .Site.LanguageCode }}&amp;lt;html lang=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ else }}&amp;lt;html&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また &lt;code&gt;layouts/partials/header.html&lt;/code&gt; は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
{{ .Hugo.Generator }}
{{ with .Site.Params.favicon }}&amp;lt;link rel=&amp;quot;icon&amp;quot; type=&amp;quot;image/x-icon&amp;quot; href=&amp;quot;{{ . }}&amp;quot;&amp;gt;{{ end }}
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//fonts.googleapis.com/css?family=Droid+Serif:400,400italic,700,700italic|Open+Sans:400,400italic,700,700italic|Inconsolata:400,700&amp;amp;subset=latin,latin-ext&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/cc-icons/1.2.1/css/cc-icons.min.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/main.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/css/text-baldanders.css&amp;quot;&amp;gt;
{{ partial &amp;quot;header-include.html&amp;quot; . }}
&amp;lt;link rel=&amp;quot;alternate&amp;quot; href=&amp;quot;/index.xml&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; title=&amp;quot;{{ .Site.Title }}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていて，内部でさらに &lt;code&gt;layouts/partials/header-include.html&lt;/code&gt; を呼び出している。
実は &lt;code&gt;layouts/partials/header-include.html&lt;/code&gt; の中身は空である。
ユーザの作業環境側に &lt;code&gt;layouts/partials/header-include.html&lt;/code&gt; ファイルを設置すればそちらが優先して読み込まれるため，これでユーザ側がカスタマイズできるようになっている。&lt;/p&gt;

&lt;h3 id=&#34;おまけ-author-情報:c866e1b45973a5febd798fe7f4d9aa2f&#34;&gt;【おまけ】 Author 情報&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/hugo-theme-text&#34;&gt;spiegel-im-spiegel/hugo-theme-text&lt;/a&gt; では &lt;code&gt;config.toml&lt;/code&gt; に以下の author 情報を入れるとページに反映される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[params.author]
name      = &amp;quot;Spiegel&amp;quot;
url       = &amp;quot;http://www.baldanders.info/spiegel/profile/&amp;quot;
avatar    = &amp;quot;/images/avatar.jpg&amp;quot;
license   = &amp;quot;by-sa&amp;quot;
github    = &amp;quot;spiegel-im-spiegel&amp;quot;
twitter   = &amp;quot;spiegel_2007&amp;quot;
medium    = &amp;quot;@spiegel&amp;quot;
instagram = &amp;quot;spiegel_2007&amp;quot;
facebook  = &amp;quot;spiegel.im.spiegel&amp;quot;
linkedin  = &amp;quot;spiegelimspiegel&amp;quot;
flattr    = &amp;quot;spiegel&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21504929379/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5779/21504929379_e29706db7c.jpg&#34; alt=&#34;Top Page of “hugo-theme-text”&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21504929379/&#34;&gt;Top Page of “hugo-theme-text”&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;記事ページでは front matter に &lt;code&gt;[author]&lt;/code&gt; 項目を加える事で front matter の値が優先して表示される。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;+++
date = &amp;quot;2015-09-05T16:40:41+09:00&amp;quot;
draft = false
title = &amp;quot;Hello!&amp;quot;
categories = [ &amp;quot;hugo&amp;quot; ]
tags = [ &amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot; ]

[author]
  avatar = &amp;quot;/images/avatar.jpg&amp;quot;
  facebook = &amp;quot;spiegel.im.spiegel&amp;quot;
  flattr = &amp;quot;spiegel&amp;quot;
  github = &amp;quot;spiegel-im-spiegel&amp;quot;
  instagram = &amp;quot;spiegel_2007&amp;quot;
  license = &amp;quot;by-sa&amp;quot;
  linkedin = &amp;quot;spiegelimspiegel&amp;quot;
  medium = &amp;quot;@spiegel&amp;quot;
  name = &amp;quot;Spiegel&amp;quot;
  twitter = &amp;quot;spiegel_2007&amp;quot;
  url = &amp;quot;http://www.baldanders.info/spiegel/profile/&amp;quot;
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21069070064/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/718/21069070064_4a0e51cbbd.jpg&#34; alt=&#34;Entry Page of “hugo-theme-text”&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/21069070064/&#34;&gt;Entry Page of “hugo-theme-text”&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;他にも favicon や Disqus などを設置可能。
詳しくは &lt;a href=&#34;https://github.com/spiegel-im-spiegel/hugo-theme-text#simple-text-hugo-theme&#34;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt; を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:c866e1b45973a5febd798fe7f4d9aa2f&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wdkk.co.jp/lab/hugo/&#34;&gt;Hugoサイト構築 | Watanabe-DENKI Inc. 渡辺電気株式会社&lt;/a&gt; : お勧め！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/hugo/bookmark/&#34;&gt;Hugo に関するブックマークはこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>セキュリティ脆弱性を修正した Go 1.4.3 がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/go-1-4-3-is-released/" />
		<id>tag:text.Baldanders.info,2015-09-25T00:42:22+0900:/remark/2015/go-1-4-3-is-released/</id>
		<published>2015-09-25T00:42:22+0900</published>
		
		<summary>Go 言語の net/http パッケージに脆弱性が発見された模様。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
The issues were reported in Go&#39;s net/http package. They affect programs using that package to proxy HTTP requests. We recommend that all users upgrade to Go 1.5, which fixes these issues. For users unable to upgrade to Go 1.5, we have released version 1.4.3, which is based on Go 1.4.2 plus fixes for these issues. Affected Go programs—those that use the net/http package as a proxy server—must be recompiled with Go 1.5 or Go 1.4.3 to receive the fixes. 
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/iSIyW4lM4hY&#34;&gt;Go 1.4.3 is released (security fix) - Google グループ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;というわけで &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の &lt;a href=&#34;https://golang.org/pkg/net/http/&#34; title=&#34;http - The Go Programming Language&#34;&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; パッケージに脆弱性が発見された模様。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/net/http/&#34; title=&#34;http - The Go Programming Language&#34;&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; パッケージを使っている製品は最新バージョンで再コンパイルすること（パッケージ間の依存関係に注意）。
可能であれば 1.5 系を使うのが望ましい。
諸事情で 1.5 系が使えない場合は，リリースされた 1.4.3 を使ってもよい。&lt;/p&gt;

&lt;h2 id=&#34;影響度-cvss:c3a96b046f183dd79cb60ec78087c2e7&#34;&gt;影響度（CVSS）&lt;/h2&gt;

&lt;p&gt;CVSS 基本評価値 6.8 (AV:N/AC:M/Au:N/C:P/I:P/A:P) （暫定値）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/security/cve/CVE-2015-5739&#34;&gt;access.redhat.com | CVE-2015-5739&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/security/cve/CVE-2015-5740&#34;&gt;access.redhat.com | CVE-2015-5740&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/security/cve/CVE-2015-5741&#34;&gt;access.redhat.com | CVE-2015-5741&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;中（M）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃前の認証要否（Au）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption&gt;CVSSv2 基本評価値&lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;CVSS については&lt;a href=&#34;http://www.baldanders.info/spiegel/archive/cvss/cvss2.html&#34;&gt;デモページ&lt;/a&gt;を参照のこと。&lt;/p&gt;

&lt;h2 id=&#34;参考:c3a96b046f183dd79cb60ec78087c2e7&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang&#34;&gt;プログラミング言語 Go - text.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>今日の戯れ言：SW 終わった - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/0923-diary/" />
		<id>tag:text.Baldanders.info,2015-09-23T22:05:15+0900:/remark/2015/0923-diary/</id>
		<published>2015-09-23T22:05:15+0900</published>
		
		<summary>PSK を共有するサービス / ブラックリストの共有はうまくいかない</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;シルバー・ウィーク終わりましたね。
渋滞のない快適な通勤も今日で終わりか。
明日は雨って言うし早めに出かけないとなぁ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#wireless:8889a1e819041c97ba11b7859cc847e1&#34;&gt;PSK を共有するサービス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adblock:8889a1e819041c97ba11b7859cc847e1&#34;&gt;ブラックリストの共有はうまくいかない&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;wireless:8889a1e819041c97ba11b7859cc847e1&#34;&gt;PSK を共有するサービス&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.makuake.com/project/wifishare/&#34;&gt;周りのWiFiをいつでも利用し放題にするアプリを作成！通信制限からも解放！ |　クラウドファンディング　-　Makuake（マクアケ）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実はこれを全く知らなくて，最初聞いたときは「&lt;a href=&#34;https://corp.fon.com/&#34;&gt;FON&lt;/a&gt; みたいなもん？」と考えていたが，そんなレベルじゃなくて，無線 LAN の PSK (Pre-Shared Key) を不特定多数と共有するという恐ろしいサービスだった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://geekles.net/gadget/150922-wifi-share-wi-fi-pass-is-plain-text&#34;&gt;検証結果：高木浩光氏がご立腹の「WiFiシェア」、暗号化してるはずのWi-Fiパスワードを平文で保存してた | Geekles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いや PSK が平文で保存されていようが暗号化されていようがダメなものはダメだって。
なぜなら PSK は無線 LAN 機器に対して行う認証を兼ねていて，それを不特定多数と共有するということは「War Driving やり放題」と言っているのと同じことだからだ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8889a1e819041c97ba11b7859cc847e1:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8889a1e819041c97ba11b7859cc847e1:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;たとえば，無線 LAN は素通しでも上位レイヤで認証を行う &lt;a href=&#34;https://corp.fon.com/&#34;&gt;FON&lt;/a&gt; のようなやり方や，いっそ全てのアクセスポイントを無線メッシュネットワークでつなぐ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8889a1e819041c97ba11b7859cc847e1:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8889a1e819041c97ba11b7859cc847e1:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; というのならまだ分かる。
&lt;a href=&#34;https://www.makuake.com/&#34;&gt;Makuake&lt;/a&gt; は無線 LAN へのアクセスを売り買いすることでマネタイズできると考えているようだが， PSK が知れ渡れば誰でもいくらでもサービスを迂回できてしまう（あるいは WIFI シェアを迂回して接続するアプリだって作れるだろう）。&lt;/p&gt;

&lt;p&gt;なんでこんなサービスがうまくいくと考えているのかよく分からないが，クラウド・ファンディングで資金を集めたところを見ると「うまくいく」と思っている人が多いということなのだろう。
やれやれ。&lt;/p&gt;

&lt;h2 id=&#34;adblock:8889a1e819041c97ba11b7859cc847e1&#34;&gt;ブラックリストの共有はうまくいかない&lt;/h2&gt;

&lt;p&gt;私は広告はあまり気にならないので（広告による Tracking は気になる），最近話題（？）の広告ブロック・アプリについてはほとんど興味が無いのだが，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kenmaz/items/65cc4a7ca3ef2eae253b&#34;&gt;1分で作るiOS9の広告ブロッカー - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;content blocker って何でもブロックできちゃうのね。
これって広告の問題じゃないよなぁ。&lt;/p&gt;

&lt;p&gt;特定のコンテンツをブロックするための「ブラックリスト」を作ってみんなで共有しようという発想は一見よさ気に見えるが，この手の「ブラックリスト」が最終的に上手くいったという話を聞いたことがない。
何故なら，この手の「ブラックリスト」は極めて恣意的なもので，共有できるほどの普遍性はないから。&lt;/p&gt;

&lt;p&gt;昔， spam メールをブロックするために「ブラックリスト」を作って共有する仕組みがあったが，最終的に破綻した。
誤報や恣意的な目的で「ブラックリスト」が更新されるケースが跡を絶たなかったからだ。
これを「能動的失敗」という。
能動的失敗が頻出すれば，誰もそれを信用しなくなり，迂回するようになる。&lt;/p&gt;

&lt;p&gt;ブラックリストがかろうじて機能しているのは parental control や企業向けファイアウォールくらいだろう。
この場合でもフィルタ設定をかなり慎重にやらないと，やはり「能動的失敗」を引き起こすことになる。&lt;/p&gt;

&lt;p&gt;その昔， &lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000487.shtml&#34;&gt;iPad を使ってた頃&lt;/a&gt;は微妙に Safari が気に食わなかった。
何故か Safari はコンテンツを勝手に改変する。
たとえばコンテンツ中に数字列があれば電話番号と判断して妙ちきりんなリンクを張ってくさる。
まぁ，もう Apple 製品は懲りたので，今となってはどうでもいい話なのだが。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:8889a1e819041c97ba11b7859cc847e1:a&#34;&gt;ふつう認証というのは（適切でないユーザを排除するために）ユーザに対して行うものだが，無線 LAN の PSK は認証の向きが逆なのである。無線 LAN でユーザに対して認証を行うには IEEE802.1X （EAP は IEEE802.1X の方式のひとつ）を実装する必要がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8889a1e819041c97ba11b7859cc847e1:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8889a1e819041c97ba11b7859cc847e1:b&#34;&gt;拙文「&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000599.shtml&#34;&gt;“The Shadow Web” — Baldanders.info&lt;/a&gt;」参照。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8889a1e819041c97ba11b7859cc847e1:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>PHP の思ひ出 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/php-memory/" />
		<id>tag:text.Baldanders.info,2015-09-23T20:06:29+0900:/remark/2015/php-memory/</id>
		<published>2015-09-23T20:06:29+0900</published>
		
		<summary>うひゃあ。 PHP って今そんなことになっているのか。今度仕事で PHP やる機会があっても最初から勉強しなおしだな，こりゃ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（この記事は「プリキュア・メモリ」を脳内 BGM にお送りしています）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tadsan/items/157969b338fd8b782b21&#34;&gt;モダンPHPアンチパターン - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うひゃあ。
&lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; って今そんなことになっているのか。
今度仕事で &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; やる機会があっても最初から勉強しなおしだな，こりゃ。&lt;/p&gt;

&lt;h2 id=&#34;asp-の劣化コピーだろ-これ:6c548a925ccf868852f8a61e292ab466&#34;&gt;ASP の劣化コピーだろ，これ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; は最初から気に食わない言語だった。
だって ASP （ASP.NET じゃなくて ASP）の劣化コピーにしか見えなかったんだもの。
MS ですら ASP.NET に移行していたあの当時に &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; が魅力的に見えるはずがなかった。&lt;/p&gt;

&lt;h2 id=&#34;php-で制御を行う:6c548a925ccf868852f8a61e292ab466&#34;&gt;PHP で制御を行う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000481.shtml&#34;&gt;最後に PHP の仕事をしたのは2010年&lt;/a&gt;かな。
ネットワークに繋がっている機器を &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; で（もちろん Web インタフェースで）制御するという仕事で，初めて &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; が面白いと思った仕事だった。
ちなみにこの時のフレームワークは &lt;a href=&#34;http://www.smarty.net/&#34;&gt;Smarty&lt;/a&gt; だった。&lt;/p&gt;

&lt;p&gt;今まで C/C++ でゴリゴリと制御を書いてきた身としてはまさに「目からうろこが落ちる」状態だった。
スクリプト言語で制御ができるなんて！&lt;/p&gt;

&lt;p&gt;当時の機器は制御ロジック自体は内部に埋め込まれていた。
だから programmable な部分は&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;機器に制御のトリガ・イベントを送る&lt;/li&gt;
&lt;li&gt;機器間の同期をとる&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ことであり，トリガ・イベントを送るだけでいいのならスクリプト言語でも構わないわけだ。&lt;/p&gt;

&lt;p&gt;IoT たらいうバズワードでもてはやされる最近の「スマート家電」の特徴は，制御だけでなくセンサも備えていることだが，センシング・データを「情報」として解釈して自律的に動けるほど「スマート」なものは少ない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6c548a925ccf868852f8a61e292ab466:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6c548a925ccf868852f8a61e292ab466:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
結局，データの解釈とその結果として何らかの制御トリガを蹴ったくるのは「外部のなにか」であり，その「外部のなにか」の真正性が問題になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6c548a925ccf868852f8a61e292ab466:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6c548a925ccf868852f8a61e292ab466:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;php-は死なず:6c548a925ccf868852f8a61e292ab466&#34;&gt;PHP は死なず？&lt;/h2&gt;

&lt;p&gt;これは印象論だが，ゼロからシステムを組むのであれば &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; を使う必然性は全くない。
Web サービス限定であっても「後ろから前まで JavaScript でいいじゃん」な感じである。
デスクトップアプリですら &lt;a href=&#34;http://electron.atom.io/&#34;&gt;Electron&lt;/a&gt; で組めるんだから。&lt;/p&gt;

&lt;p&gt;まぁでも，安いレンタルサーバを借りてる場合は選択肢は少ないし，既に &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; が稼働している環境なら &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; のほうが手軽なことも多々ある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6c548a925ccf868852f8a61e292ab466:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6c548a925ccf868852f8a61e292ab466:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;あるいは&lt;a href=&#34;http://qiita.com/naru0504/items/9bd56998a187d101a777&#34;&gt;日本以外にも PHP が人気な国もある&lt;/a&gt;そうなので，「ただ消え去る（fade away）のみ」とはならないかもしれない。
ただ，時々舞い込んでくる「汎用機の COBOL システムをオープン系のシステムに replace する」案件に関わってると，似たようなことが &lt;a href=&#34;https://secure.php.net/&#34; title=&#34;PHP: Hypertext Preprocessor&#34;&gt;PHP&lt;/a&gt; 界隈でも起きないか心配なところではある。&lt;/p&gt;

&lt;h2 id=&#34;php-5-4-は捨てましょう:6c548a925ccf868852f8a61e292ab466&#34;&gt;PHP 5.4 は捨てましょう&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&#34;http://qiita.com/tadsan/items/157969b338fd8b782b21&#34;&gt;モダンPHPアンチパターン&lt;/a&gt;」によると，既に &lt;a href=&#34;http://php.net/supported-versions.php&#34;&gt;PHP 5.4 はサポートが終了&lt;/a&gt;しているらしい。&lt;/p&gt;

&lt;p&gt;って，あれ？ &lt;a href=&#34;http://www.sakura.ne.jp/&#34;&gt;さくらのレンタルサーバ&lt;/a&gt;は PHP 5.4 が標準じゃなかったっけ？ と思って確認したら 5.4 だった。
とりあえず 5.6 に上げておく。
まぁ，ほとんど使わないんだけどね&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6c548a925ccf868852f8a61e292ab466:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6c548a925ccf868852f8a61e292ab466:d&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;これって，ひょっとして結構インパクトが大きい？&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6c548a925ccf868852f8a61e292ab466:a&#34;&gt;それができるなら，もう家電じゃなくてロボットだけどね。ほとんどロボットみたいな家電は既にあるが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6c548a925ccf868852f8a61e292ab466:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6c548a925ccf868852f8a61e292ab466:b&#34;&gt;そもそも機器自体（というかその背後にいる存在）の悪意の有無は，実際に被害に遭うまで分かりようがない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6c548a925ccf868852f8a61e292ab466:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6c548a925ccf868852f8a61e292ab466:c&#34;&gt;昔， &lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000236.shtml&#34;&gt;Perl で RSS を JSON に変換しようとしてどえら苦労した&lt;/a&gt;が， PHP なら数行の記述でほぼ同じことができる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6c548a925ccf868852f8a61e292ab466:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6c548a925ccf868852f8a61e292ab466:d&#34;&gt;そもそもさくらが自分とこのサーバをちゃんとメンテしてるかどうかもよく分からないのだが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6c548a925ccf868852f8a61e292ab466:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>文字エンコーディング変換 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/transform-character-encoding/" />
		<id>tag:text.Baldanders.info,2015-09-23T20:04:00+0900:/golang/transform-character-encoding/</id>
		<published>2015-09-23T20:04:00+0900</published>
		<updated>2015-09-24T12:30:00+0900</updated>
		<summary>文字エンコーディング変換に関してはあちこちに記事があるのだが，微妙に古い気がするので，メモとして書き記しておく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/2e475b48226330aa5570&#34;&gt;Golang による文字エンコーディング変換 - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;文字エンコーディング変換に関してはあちこちに記事があるのだが，微妙に古い気がするので，メモとして書き記しておく。&lt;/p&gt;

&lt;h2 id=&#34;go-言語の文字エンコーディング変換:8c97bc776007d33febbab020a38c72f3&#34;&gt;Go 言語の文字エンコーディング変換&lt;/h2&gt;

&lt;p&gt;Go 言語では Unicode が既定となっている。
そもそもソースコードが UTF-8 前提になっているし，文字の単位である &lt;a href=&#34;http://blog.golang.org/strings&#34; title=&#34;Strings, bytes, runes and characters in Go - The Go Blog&#34;&gt;rune&lt;/a&gt; の実体は UTF-32 相当である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8c97bc776007d33febbab020a38c72f3:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8c97bc776007d33febbab020a38c72f3:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;したがって UTF-8 以外の文字エンコーディングを扱う場合は何らかの変換処理を挟む必要がある。
そのためのパッケージが &lt;a href=&#34;https://godoc.org/golang.org/x/text/transform&#34; title=&#34;transform - GoDoc&#34;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/a&gt; である。
また&lt;a href=&#34;https://godoc.org/golang.org/x/text/encoding&#34;&gt;エンコーディング&lt;/a&gt;についても各種そろっていて，日本語の場合は &lt;a href=&#34;https://godoc.org/golang.org/x/text/encoding/japanese&#34; title=&#34;japanese - GoDoc&#34;&gt;&lt;code&gt;encoding/japanese&lt;/code&gt;&lt;/a&gt; パッケージを使う。
&lt;a href=&#34;https://godoc.org/golang.org/x/text/encoding/japanese&#34; title=&#34;japanese - GoDoc&#34;&gt;&lt;code&gt;encoding/japanese&lt;/code&gt;&lt;/a&gt; パッケージでは Shift-JIS, EUC-JP, ISO-2202-JP を扱える。&lt;/p&gt;

&lt;h3 id=&#34;パッケージの導入:8c97bc776007d33febbab020a38c72f3&#34;&gt;パッケージの導入&lt;/h3&gt;

&lt;p&gt;日本語が必要なだけなら &lt;code&gt;golang.org/x/text/encoding/japanese&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8c97bc776007d33febbab020a38c72f3:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8c97bc776007d33febbab020a38c72f3:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; を &lt;code&gt;go get&lt;/code&gt; すれば全てインストールされる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go get -v golang.org/x/text/encoding/japanese
Fetching https://golang.org/x/text/encoding/japanese?go-get=1
Parsing meta tags from https://golang.org/x/text/encoding/japanese?go-get=1 (status code 200)
get &amp;quot;golang.org/x/text/encoding/japanese&amp;quot;: found meta tag main.metaImport{Prefix:&amp;quot;golang.org/x/text&amp;quot;, VCS:&amp;quot;git&amp;quot;, RepoRoot:&amp;quot;https://go.googlesource.com/text&amp;quot;} at https://golang.org/x/text/encoding/japanese?go-get=1
get &amp;quot;golang.org/x/text/encoding/japanese&amp;quot;: verifying non-authoritative meta tag
Fetching https://golang.org/x/text?go-get=1
Parsing meta tags from https://golang.org/x/text?go-get=1 (status code 200)
golang.org/x/text (download)
golang.org/x/text/transform
golang.org/x/text/encoding/internal/identifier
golang.org/x/text/encoding
golang.org/x/text/encoding/internal
golang.org/x/text/encoding/japanese
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;変換ロジック-サンプルコード:8c97bc776007d33febbab020a38c72f3&#34;&gt;変換ロジック（サンプルコード）&lt;/h3&gt;

&lt;p&gt;変換ロジックのサンプルを以下に示す（thanks &lt;a href=&#34;http://qiita.com/mattn&#34;&gt;@mattn&lt;/a&gt;）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;golang.org/x/text/encoding/japanese&amp;quot;
	&amp;quot;golang.org/x/text/transform&amp;quot;
)

func main() {
	reader := NewDecoder(os.Stdin)
	writer := NewEncoder(os.Stdout)
	if _, err := io.Copy(writer, reader); err != nil {
		fmt.Fprintln(os.Stderr, err)
	}
}

func NewDecoder(reader io.Reader) *transform.Reader {
	return transform.NewReader(reader, japanese.ShiftJIS.NewDecoder())
}

func NewEncoder(writer io.Writer) *transform.Writer {
	return transform.NewWriter(writer, japanese.EUCJP.NewEncoder())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UTF-8 以外の文字エンコーディングから UTF-8 への変換は decode と呼ばれている。
一方， UTF-8 から UTF-8 以外の文字エンコーディングへの変換は encode と呼ばれている。&lt;/p&gt;

&lt;p&gt;上のサンプルでは Shift-JIS →（Decoder）→ UTF-8 →（Encoder）→ EUC-JP の手順で変換していることがお分かりであろうか。
では実際に動かしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;echo Go言語で行こう | go run transform.go &amp;gt; euc.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;euc.txt&lt;/code&gt; に「Go言語で行こう」と EUC-JP で書き込まれていたら成功である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:8c97bc776007d33febbab020a38c72f3:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:8c97bc776007d33febbab020a38c72f3:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
今回は標準入出力を使ったが， Reader/Writer の stream で表せるものなら同様の処理でできるはずである。&lt;/p&gt;

&lt;h2 id=&#34;文字エンコーディング変換に関する注意点:8c97bc776007d33febbab020a38c72f3&#34;&gt;文字エンコーディング変換に関する注意点&lt;/h2&gt;

&lt;p&gt;Shift-JIS/EUC-JP と UTF-8/UTF-32 ではベースとなっている文字集合（文字エンコーディングではない）が異なる。
Shift-JIS/EUC-JP の文字集合は基本的に JIS 規格だが UTF-8/UTF-32 は Unicode であり，両者は非対称の関係である。
このため，今回のような異なる文字集合を跨ぐ変換を行うと変換が正しく行われない場合もあり得る（要検証）。&lt;/p&gt;

&lt;p&gt;更に困ったことに，歴史的経緯（便利な言葉だw）から Shift-JIS や EUC-JP の実装にはいくつかバリエーションがあるため，実装間の差異が問題になる場合もある。
&lt;a href=&#34;https://godoc.org/golang.org/x/text/encoding/japanese&#34; title=&#34;japanese - GoDoc&#34;&gt;&lt;code&gt;encoding/japanese&lt;/code&gt;&lt;/a&gt; パッケージはこの実装上の差異を考慮してはいないようである。&lt;/p&gt;

&lt;p&gt;更に更に言えば，汎用機などは旧JIS＋外字の構成になっていることが多く，このような需要に応えるなら独自の変換ロジックを開発するしかない。&lt;/p&gt;

&lt;h3 id=&#34;変換ロジックの別解:8c97bc776007d33febbab020a38c72f3&#34;&gt;変換ロジックの別解&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/transform&#34; title=&#34;transform - GoDoc&#34;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/a&gt; を使った変換でうまくいかない場合は &lt;a href=&#34;https://github.com/djimenez/iconv-go&#34; title=&#34;djimenez/iconv-go&#34;&gt;&lt;code&gt;djimenez/iconv-go&lt;/code&gt;&lt;/a&gt; パッケージを使う手もある。
ただし， &lt;a href=&#34;https://github.com/djimenez/iconv-go&#34; title=&#34;djimenez/iconv-go&#34;&gt;&lt;code&gt;djimenez/iconv-go&lt;/code&gt;&lt;/a&gt; パッケージのビルドには &lt;code&gt;libiconv&lt;/code&gt; および &lt;code&gt;glibc&lt;/code&gt; が必要である（クロス環境では注意）。
このパッケージを使うことで &lt;code&gt;iconv&lt;/code&gt; 相当の処理が可能になる。&lt;/p&gt;

&lt;p&gt;（別の変換パッケージとして &lt;a href=&#34;https://godoc.org/code.google.com/p/mahonia&#34;&gt;&lt;code&gt;mahonia&lt;/code&gt;&lt;/a&gt; を紹介しているところがいくつか見られたが，ドキュメントを見る限り DEPRECATED となっていて使えないようだ。また repository にもアクセスできない）&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:8c97bc776007d33febbab020a38c72f3&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uchiko/items/1810ddacd23fd4d3c934&#34;&gt;golang - Go言語で文字コード変換 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.stackoverflow.com/questions/6120/go%E3%81%A7byte%E3%82%92shift-jis%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B&#34;&gt;go - Goで[]byteをshift-jisの文字列に変換する - スタック・オーバーフロー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/irugo/items/390bd187871c7716a1e1&#34;&gt;GO言語で文字コードを扱うライブラリの使用例 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/nobuhito/items/ff782f64e32f7ed95e43&#34;&gt;Golangで文字コード判定 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:8c97bc776007d33febbab020a38c72f3:a&#34;&gt;「&lt;a href=&#34;http://text.baldanders.info/golang/string-and-rune/&#34;&gt;String と Rune&lt;/a&gt;」参照。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8c97bc776007d33febbab020a38c72f3:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8c97bc776007d33febbab020a38c72f3:b&#34;&gt;かつてパッケージの場所は &lt;code&gt;code.google.com/p/go.text/transform&lt;/code&gt; および &lt;code&gt;code.google.com/p/go.text/encoding/japanese&lt;/code&gt; だったが，ここの repository は今は存在しないので注意。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8c97bc776007d33febbab020a38c72f3:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:8c97bc776007d33febbab020a38c72f3:c&#34;&gt;もちろんこれは Windows のコマンドプロンプトで動かした場合の話。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:8c97bc776007d33febbab020a38c72f3:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>文字列連結はどれが速い？ - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/join-strings/" />
		<id>tag:text.Baldanders.info,2015-09-21T23:08:07+0900:/golang/join-strings/</id>
		<published>2015-09-21T23:08:07+0900</published>
		<updated>2015-09-23T20:00:00+0900</updated>
		<summary>Go 言語で文字列の連結を行う際にどうやるのが一番速いか，という話。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/16ab7dabbd0749281227&#34;&gt;Golang の文字列連結はどちらが速い？ - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/string-and-rune/&#34; title=&#34;String と Rune&#34;&gt;前回&lt;/a&gt;につづき &lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; の話題。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で文字列の連結を行う際にどうやるのが一番速いか，という話。&lt;/p&gt;

&lt;h2 id=&#34;文字列連結を行う4つの方法:53cbada6770de764fdec60b0362267fb&#34;&gt;文字列連結を行う4つの方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で文字列の連結を行う際には概ね以下の4つの方法がある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;“&lt;code&gt;+&lt;/code&gt;” 演算子で連結する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/strings/&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Join&lt;/code&gt; で連結する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#String_types&#34;&gt;string&lt;/a&gt; は「不変（immutable）」なので，最初の2つが高コストになるだろうことはすぐに想像がつく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ruiu/items/2bb83b29baeae2433a79&#34;&gt;Goでは文字列連結はコストの高い操作 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://atotto.hatenadiary.jp/entry/2013/04/26/202701&#34;&gt;Go言語で効率良く文字列を連結する話 #golang - memoメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では残りの2つはどうなのかというと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ono_matope/items/d5e70d8a9ff2b54d5c37&#34;&gt;Goの文字列結合のパフォーマンス - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;によると最後のが一番速いらしい。ほんじゃまぁ，確かめてみるか。&lt;/p&gt;

&lt;h2 id=&#34;サンプルコードを用意:53cbada6770de764fdec60b0362267fb&#34;&gt;サンプルコードを用意&lt;/h2&gt;

&lt;p&gt;以下のコード &lt;code&gt;join.go&lt;/code&gt; を使って評価してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bufio&amp;quot;
	&amp;quot;bytes&amp;quot;
	&amp;quot;io&amp;quot;
)

//Read content (text data) from buffer
func ContentText(inStream io.Reader) ([]string, error) {
	scanner := bufio.NewScanner(inStream)
	list := make([]string, 0)
	for scanner.Scan() {
		list = append(list, scanner.Text())
	}
	if err := scanner.Err(); err != nil {
		return nil, err
	}
	return list, nil
}

//Write content (text data) to buffer
func WriteBuffer1(lines []string) []byte {
	//write to byte buffer
	content := make([]byte, 0)
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content = append(content, line...)
		content = append(content, recode...)
	}
	return content
}

//Write content (text data) to buffer
func WriteBuffer1Cap128(lines []string) []byte {
	//write to byte buffer
	content := make([]byte, 0, 128) //128 bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content = append(content, line...)
		content = append(content, recode...)
	}
	return content
}

//Write content (text data) to buffer
func WriteBuffer1Cap1K(lines []string) []byte {
	//write to byte buffer
	content := make([]byte, 0, 1024) //1K bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content = append(content, line...)
		content = append(content, recode...)
	}
	return content
}

//Write content (text data) to buffer (buffered I/O)
func WriteBuffer2(lines []string) []byte {
	//write to byte buffer
	content := bytes.NewBuffer(make([]byte, 0))
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content.WriteString(line)
		content.WriteString(recode)
	}
	return content.Bytes()
}

//Write content (text data) to buffer (buffered I/O)
func WriteBuffer2Cap128(lines []string) []byte {
	//write to byte buffer
	content := bytes.NewBuffer(make([]byte, 0, 128)) //128 bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content.WriteString(line)
		content.WriteString(recode)
	}
	return content.Bytes()
}

//Write content (text data) to buffer (buffered I/O)
func WriteBuffer2Cap1K(lines []string) []byte {
	//write to byte buffer
	content := bytes.NewBuffer(make([]byte, 0, 1024)) //1K bytes capacity
	recode := &amp;quot;\r\n&amp;quot;
	for _, line := range lines {
		content.WriteString(line)
		content.WriteString(recode)
	}
	return content.Bytes()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストコード &lt;code&gt;join_test.go&lt;/code&gt; はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;os&amp;quot;
	&amp;quot;testing&amp;quot;
)

func readFile() []string {
	file, err := os.Open(&amp;quot;CollisionsForHashFunctions.txt&amp;quot;) //maybe file path
	if err != nil {
		panic(err)
	}
	defer file.Close()
	list, err := ContentText(file)
	if err != nil {
		panic(err)
	}
	return list
}

func BenchmarkWriteBuffer1(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer1(list)
		_ = string(content)
	}
}

func BenchmarkWriteBuffer1Cap128(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer1Cap128(list)
		_ = string(content)
	}
}

func BenchmarkWriteBuffer1Cap1K(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer1Cap1K(list)
		_ = string(content)
	}
}

func BenchmarkWriteBuffer2(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer2(list)
		_ = string(content)
	}
}

func BenchmarkWriteBuffer2Cap128(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer2Cap128(list)
		_ = string(content)
	}
}

func BenchmarkWriteBuffer2Cap1K(b *testing.B) {
	list := readFile()
	b.ResetTimer()
	for i := 0; i &amp;lt; b.N; i++ {
		content := WriteBuffer2Cap1K(list)
		_ = string(content)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のテストについては&lt;a href=&#34;http://text.baldanders.info/golang/testing/&#34;&gt;以前紹介した&lt;/a&gt;が，同じ要領で &lt;code&gt;Benchmark&lt;/code&gt; から始まる名前の関数を作るとベンチマーク用のコードとして認識される。
引数には &lt;code&gt;b *testing.B&lt;/code&gt; を指定する。&lt;/p&gt;

&lt;p&gt;ベンチマークの内訳は以下のとおり。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;ベンチマーク名&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;処理内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer1&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer1Cap128&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する（ capacity 128B）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer1Cap1K&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; に追記する（ capacity 1KB）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer2&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer2Cap128&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する（ capacity 128B）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;BenchmarkWriteBuffer2Cap1K&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;[]byte&lt;/code&gt; に &lt;code&gt;append&lt;/code&gt; する（ capacity 1KB）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;入力テキストだが，小さいファイルではテストにならない気がしたので，大昔に書いたテキスト &lt;a href=&#34;http://www.baldanders.info/spiegel/archive/CollisionsForHashFunctions.txt&#34;&gt;&lt;code&gt;CollisionsForHashFunctions.txt&lt;/code&gt;&lt;/a&gt; を使うことにした。
サイズは70行，7KB ほど。&lt;/p&gt;

&lt;h2 id=&#34;テスト結果:53cbada6770de764fdec60b0362267fb&#34;&gt;テスト結果&lt;/h2&gt;

&lt;p&gt;結果は以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go test -bench WriteBuffer -benchmem
testing: warning: no tests to run
PASS
BenchmarkWriteBuffer1-8           100000         17831 ns/op       37056 B/op     12 allocs/op
BenchmarkWriteBuffer1Cap128-8     100000         20321 ns/op       36992 B/op     11 allocs/op
BenchmarkWriteBuffer1Cap1K-8      100000         19301 ns/op       36096 B/op      8 allocs/op
BenchmarkWriteBuffer2-8           100000         17300 ns/op       33760 B/op     10 allocs/op
BenchmarkWriteBuffer2Cap128-8     100000         19451 ns/op       34992 B/op      9 allocs/op
BenchmarkWriteBuffer2Cap1K-8      100000         15490 ns/op       25712 B/op      6 allocs/op
ok      join    12.659s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ありゃりゃ。 &lt;a href=&#34;http://golang.org/pkg/bytes/&#34;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Buffer&lt;/code&gt; を使ったほうが速いみたい（capacity を大きくとれば）。&lt;/p&gt;

&lt;p&gt;それなら，入力テキストを切り詰めて10行，0.3KB にしてやってみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;gt;go test -bench WriteBuffer -benchmem
testing: warning: no tests to run
PASS
BenchmarkWriteBuffer1-8          2000000           859 ns/op        1312 B/op      5 allocs/op
BenchmarkWriteBuffer1Cap128-8    2000000           707 ns/op        1248 B/op      4 allocs/op
BenchmarkWriteBuffer1Cap1K-8     2000000           796 ns/op        1376 B/op      2 allocs/op
BenchmarkWriteBuffer2-8          1000000          1686 ns/op        1600 B/op      6 allocs/op
BenchmarkWriteBuffer2Cap128-8    1000000          1411 ns/op        1680 B/op      5 allocs/op
BenchmarkWriteBuffer2Cap1K-8     2000000           980 ns/op        1488 B/op      3 allocs/op
ok      join    13.589s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度は &lt;code&gt;[]byte&lt;/code&gt; の方が速くなった。&lt;/p&gt;

&lt;p&gt;まぁでも予想通りかな。
データのサイズが大きくなればバッファ操作のほうが有利になるのは分かりやすいっちゃあ分かりやすい。&lt;/p&gt;

&lt;p&gt;注目すべきは &lt;code&gt;BenchmarkWriteBuffer1Cap128&lt;/code&gt; と &lt;code&gt;BenchmarkWriteBuffer1Cap1K&lt;/code&gt; で， capacity を 1KB 取ったほうが若干遅くなっている。この辺のチューニングをどうするか，というところなのだろう（実はこれ，環境によって微妙に順位が変わるんだよなぁ）。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:53cbada6770de764fdec60b0362267fb&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jxck.hatenablog.com/entry/20131123/1385189088&#34;&gt;Go でベンチマーク - Block Rockin’ Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/Mulyu/items/ed585f2777496f29a725&#34;&gt;go言語でベンチマーク - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>「暦」日本史 （再掲載） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/japanese-koyomi/" />
		<id>tag:text.Baldanders.info,2015-09-21T21:43:15+0900:/remark/2015/japanese-koyomi/</id>
		<published>2015-09-21T21:43:15+0900</published>
		
		<summary>この記事は2004年初出の記事を再構成したものです。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;この記事は&lt;a href=&#34;http://www.baldanders.info/spiegel/remark/archives/000045.shtml&#34;&gt;2004年初出の記事&lt;/a&gt;を再構成したものです。
記事中の知見や意見は現在のものとは異なる可能性があります。&lt;/p&gt;

&lt;h2 id=&#34;万有こよみ百科:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;『万有こよみ百科』&lt;/h2&gt;

&lt;p&gt;実家の私の本棚を整理していたら懐かしい冊子が出てきました。
『歴史読本』 ’73年12月 臨時増刊号と書かれています。
タイトルは『万有こよみ百科』。&lt;/p&gt;

&lt;p&gt;ただ冊子には見覚えがあるものの，どうやって手に入れたのか覚えてなかったりします。
古本屋で買ったのか。
もしかしたら天文研の BOX から借りたまま忘れているのかもしれません。（だとしたらヤバイなぁ）&lt;/p&gt;

&lt;p&gt;1973年は明治の改暦から100周年にあたる年で，この冊子はその記念として作られたもののようです。
せっかくなので，この冊子の中から面白そうな内容をいくつか紹介してみましょう。
なお現在はこの冊子が発行されてから30年経っています&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
よって最近の知見とは異なる可能性もありますがご容赦を。&lt;/p&gt;

&lt;h3 id=&#34;勅令第90号:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;勅令第90号&lt;/h3&gt;

&lt;p&gt;皆さんは日本の暦がどのような暦法でどのように定められているのかご存知ですか？
現在の日本の暦は明治31年5月10日の「勅令第90号」と呼ばれる勅令で定められています。
内容は以下のとおりです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;神武天皇即位紀元年数ノ四ヲ以テ整除スヘキ年ヲ閏年トス。
但シ紀元年数ヨリ六百六十ヲ減シテ百ヲ以テ整除シ得ヘキモノノ中更ニ四ヲ以テ其ノ商ヲ整除シ得サル年ハ平年トス&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これはグレゴリオ暦と実質的に同じですが，
「神武天皇即位紀元」が紀元になっている点が異なります。
つまり現在においても日本では「神武天皇即位紀元」は生きているのです。&lt;/p&gt;

&lt;p&gt;日本で最も古い暦は西暦554年頃から使われていた元嘉暦であろうと言われています。
つまりそれ以前は「伝説の時代」であり暦は存在していなかったのです。
もちろん神武天皇の時代にも暦は存在していませんでした。
（暦が存在していない時代に紀元を求めるなどナンセンスですが，これについては後述します）&lt;/p&gt;

&lt;h3 id=&#34;暦以前:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;暦以前&lt;/h3&gt;

&lt;p&gt;暦以前の日本はどうしていたのでしょう。
暦（こよみ）という言葉の起源は「日読（かよみ）」であるという説があります。
また万葉集には「月読」という語句があり月日を数える程度のことはされていたようです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;月読めばいまだ冬なり しかすがに霞たなびく春立ちぬとか（巻二十の四四九二）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ただし古代の日本ではまだ「年」の概念がなかったようで，魏志倭人伝によると倭人は「其の俗正歳四時を知らず、ただ春耕秋収を記し、年紀と為すのみ」だったと書かれています。&lt;/p&gt;

&lt;p&gt;また万葉集にも&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;わが欲りし雨は降り来ぬ かくしあらば 言挙げせずとも年は栄えむ（巻十八の四一二四）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあり，年（とし）は稲穀の意味で用いられていたようです&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;暦の輸入と日本独自の暦の開発:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;暦の輸入と日本独自の暦の開発&lt;/h3&gt;

&lt;p&gt;日本で暦が導入されたのは先ほど述べたとおり西暦554年頃からですが，当時の暦は中国から輸入されたものでした。
これらの暦は「漢暦五伝」と呼ばれ，導入された順に「元嘉暦」「儀鳳暦」「大衍暦」「五紀暦」「宣明暦」と呼ばれています。
最後の宣明暦は800年以上も用いられました。&lt;/p&gt;

&lt;p&gt;日本人の手による暦法が用いられるようになったのは江戸時代に入ってからです。
これが保井春海によって作られた「貞亨暦」です。
後に天文観測等により修正が加えられ「宝暦暦」「寛政暦」「天保暦」が生まれます。
天保暦は太陰太陽暦としては世界的にも完成度が高いものです。
現在のいわゆる「旧暦」も天保暦の暦法を基に計算されているようです&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;漢暦五伝および貞亨暦（とその改良版）は本来の「日読」的な役割よりも，もっと宗教的・呪術的なものとして用いられていたようです。
例えば当時の江戸幕府は貞亨暦への改暦に積極的ではなかったと言われています。
当時の現行暦である宣明暦や試験的に導入された授時暦・大統暦が実際の暦象（日食や月食などの天文現象）から外れているのにもかかわらず貞亨暦への改暦を渋ったのは，暦の持つ宗教的・呪術的なものへの執着だったのかもしれません。&lt;/p&gt;

&lt;h3 id=&#34;地方歴や民間歴:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;地方歴や民間歴&lt;/h3&gt;

&lt;p&gt;一方，為政者による暦とは別に地方の豪族や民衆が作成・使用した地方暦や民間暦も数多く存在していたそうです。
明治5年の改暦直前の時点でも「京暦」「伊勢暦」「南都暦」「丹生暦」「三島暦」「江戸暦」「会津暦」などの暦が存在していたようです。
変わったところでは「田山暦&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;」「盛岡盲暦&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:5&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;」などがあり，これらの暦の中には現在も継続されているものもある，と『万有こよみ百科』には記されています。&lt;/p&gt;

&lt;h3 id=&#34;明治の改暦:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;明治の改暦&lt;/h3&gt;

&lt;p&gt;このような状況の中で明治の改暦を迎えるのですが，『万有こよみ百科』の記事のいくつかは明治の改暦における政治的・儀式的な側面を指摘しています。&lt;/p&gt;

&lt;p&gt;まず政治的な側面としては，日本の国際化・近代化（いわゆる文明開花）にとって太陽暦（グレゴリオ暦）への改暦は不可欠であるという現実と，時の明治政府の切迫した財政状況（天保暦のまま明治6年を続けると閏月を含む13ヶ月分の給料を払わなければならなかったそうです）にあったと言われています。
この辺は結構有名な話ですね。&lt;/p&gt;

&lt;p&gt;一方で，こちらの方がより重要なのですが，明治の改暦は「正朔を奉ず」儀式でもありました。
つまり「明治維新」という易姓革命を正当化するためには「正朔を奉ず」儀式が必要不可欠だったということです。
当時の日本にとってもっとも近代的な暦法であるグレゴリオ暦と神武天皇即位紀元との歪なマッチングは「明治維新」そのものの歪さを象徴するものなのかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;暦支配への欲望とサマータイム:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;暦支配への欲望とサマータイム&lt;/h2&gt;

&lt;p&gt;さて，ここ数年「サマータイム導入」の是非が話題になっていますね&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:46738f040f05586112eadaa7e5f7b0fe:6&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:46738f040f05586112eadaa7e5f7b0fe:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
私にはこれが「授時」または「正朔を奉ず」儀式であるように思えてなりません。
現代において暦法や時制を為政者が勝手に変更できるという発想はあまりにもナンセンスです。&lt;/p&gt;

&lt;p&gt;私達は為政者につかえる「臣民」ではありません。
政治的な思惑だけで議論される「サマータイム」も暦のない「伝説の時代」に紀元をもとめる「神武天皇即位紀元」もナンセンスで歪な発想です。&lt;/p&gt;

&lt;p&gt;この機会に「暦」について「時間」について考えてみませんか。&lt;/p&gt;

&lt;h2 id=&#34;参考ページ:46738f040f05586112eadaa7e5f7b0fe&#34;&gt;参考ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www1.kaiho.mlit.go.jp/KOHO/faq/reki/kyuureki.html&#34;&gt;旧暦のあれこれ｜天文・暦情報｜海上保安庁海洋情報部&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www1.kaiho.mlit.go.jp/KOHO/faq/reki/shinreki.html&#34;&gt;現行の暦法｜天文・暦情報｜海上保安庁海洋情報部&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nao.ac.jp/faq/a0304.html&#34;&gt;質問3-4）「旧暦」ってなに？ | 国立天文台(NAOJ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eco.mtk.nao.ac.jp/koyomi/topics/html/topics2014.html&#34;&gt;旧暦2033年問題について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E7%A5%9E%E6%AD%A6%E5%A4%A9%E7%9A%87%E5%8D%B3%E4%BD%8D%E7%B4%80%E5%85%83&#34;&gt;神武天皇即位紀元 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000784.shtml&#34;&gt;朔旦冬至と授時 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000840.shtml&#34;&gt;暦の改訂（DE405 から DE430 へ） — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:1&#34;&gt;2004年当時の話です。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:2&#34;&gt;正月の歳神（としがみ）様も本来は米の神だったという説もあるそうです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:3&#34;&gt;ただし，いわゆる「旧暦」は日本の公式な暦ではありません。「旧暦」と言われているものの多くは，現行暦の暦象をベースに天保暦のルールを当てはめていったもののようです。したがって「&lt;a href=&#34;http://eco.mtk.nao.ac.jp/koyomi/topics/html/topics2014.html&#34;&gt;2033年問題&lt;/a&gt;」のようなことも起こりえます。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:4&#34;&gt;&lt;a href=&#34;http://www.nao.ac.jp/gallery/weekly/2015/20150203-koyomi.html&#34;&gt;「田山暦」（「東遊録後編」収録） | 国立天文台(NAOJ)&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:5&#34;&gt;「&lt;a href=&#34;http://www.nao.ac.jp/gallery/weekly/2014/20141111-morioka-calendar.html&#34;&gt;盛岡暦 | 国立天文台(NAOJ)&lt;/a&gt;」によると現在も発行されているそうです。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:46738f040f05586112eadaa7e5f7b0fe:6&#34;&gt;しつこいですが，2004年当時の話です。現在でも時々話題になりますが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:46738f040f05586112eadaa7e5f7b0fe:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>『暗号技術入門 第3版』をななめ読み - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/cryptography-introduction/" />
		<id>tag:text.Baldanders.info,2015-09-20T21:43:17+0900:/remark/2015/cryptography-introduction/</id>
		<published>2015-09-20T21:43:17+0900</published>
		
		<summary>今回は大幅改訂版なので，以前のを持ってる人も買っておいて損はない。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;結城浩さんの『&lt;a href=&#34;http://www.hyuki.com/cr/&#34;&gt;暗号技術入門 第3版&lt;/a&gt;』がついに登場。
前の第2版のときは細々した追記が主だったような気がするが，今回は大幅改訂版なので，以前のを持ってる人も買っておいて損はない。
主な改訂内容としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SHA-3 について詳しく解説&lt;/li&gt;
&lt;li&gt;HeartBleed や POODLE など，最近の攻撃手法について言及&lt;/li&gt;
&lt;li&gt;付録で楕円曲線暗号（Elliptic Curve Cryptography）について詳しく解説&lt;/li&gt;
&lt;li&gt;Bitcoin というか Bitcoin の中の重要な技術要素である Block Chain について詳しく解説&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にも &lt;a href=&#34;https://www.gnupg.org/&#34;&gt;GnuPG&lt;/a&gt; の記述が modern version に対応してたり，認証つき暗号（AEAD; Authenticated Encryption with Associated Data）およびその実装である GCM (Galois/Counter Mode) への言及があったり，いろいろ細かく手直しされている。&lt;/p&gt;

&lt;p&gt;特に楕円曲線暗号の解説は秀逸で，入門レベルでの解説の中では一番分かりやすかった。
あと Block Chain の解説もお勧め。
Bitcoin や Block Chain に関する解説本はすでにたくさん出ているが，暗号技術の観点からきちんと解説しているものは少なく，「信用モデル」にまで話を展開しているものは更に少ない。&lt;/p&gt;

&lt;p&gt;結局，暗号システムの実装というのは究極的には「信用モデル」の開発であると言える。
問題は「信用モデル」はロジックだけでは成立しない，ということだ。
『&lt;a href=&#34;http://www.hyuki.com/cr/&#34;&gt;暗号技術入門 第3版&lt;/a&gt;』では信用モデルの例として hierarchical PKI の典型である X.509 と OpenPGP の Web of Trust，そして Block Chain を挙げているが，それぞれ特徴があって比較すると面白い。
たとえば Block Chain はユーザ間に働く経済的 incentive を巧妙に使うが，それだけにパラメータの調整が難しいし， Mt. Gox のような経済リスクも考慮しなくてはならない。&lt;/p&gt;

&lt;p&gt;そもそも信用というのは過去の事実に対してのみ評価可能なのに，実際に評価したいのは現在及び未来についてなのだ。
これって本来は不能解だよね。
でも信用が評価できなくては世の中は回らない。
だから，どうにかして実用可能なレベルにまで近似できないか，と専門家やエンジニアは頭を悩ますわけ。&lt;/p&gt;

&lt;p&gt;そういったことを頭の隅に入れながら読めば，この本は単なるリファレンス本ではないことに気づくと思う。&lt;/p&gt;

&lt;p&gt;最後にちょっとだけ注文をつけるなら「前方秘匿性（PFS; Perfect Forward Secrecy）」および OTR (Off-the-Record) Messaging の肝である「否認可能（Deniability）」についても言及が欲しかった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:bb61903cf045c2e66950873376fa2076:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:bb61903cf045c2e66950873376fa2076:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
メッセージングの世界においてはこのふたつが重要な要件になってきているからだ。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;第3版出た！ てか，もう Kindle 版出てるのか。紙の本買うのはやまったかなぁ。 SHA-3 や BitCoin/BlockChain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ブルース・シュナイアー 山形 浩生 &lt;/dd&gt;&lt;dd&gt;エヌティティ出版 2013-12-24&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4622078007/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4622078007.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;殺人ザルはいかにして経済に目覚めたか?―― ヒトの進化からみた経済学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4620323098/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4620323098.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;リベラルのことは嫌いでも、リベラリズムは嫌いにならないでください－－井上達夫の法哲学入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4152094362/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4152094362.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;楽観主義者の未来予測(上): テクノロジーの爆発的進化が世界を豊かにする&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/413052027X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/413052027X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;社会調査の考え方　下&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4326302402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4326302402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;歴史から理論を創造する方法: 社会科学と歴史学を統合する&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;ゴメン。途中まで読んで積読中。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:bb61903cf045c2e66950873376fa2076:1&#34;&gt;PFS についてはもしかしたら見落としてるかもしれないが。なにせ斜め読みだったから。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:bb61903cf045c2e66950873376fa2076:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
