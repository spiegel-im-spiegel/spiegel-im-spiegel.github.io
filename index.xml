<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2016-02-07:/</id>
	<updated>2016-02-07T00:18:50+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>gpgpdump - OpenPGP packet visualizer - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/gpgpdump-released/" />
		<id>tag:text.Baldanders.info,2016-02-07:/remark/2016/02/gpgpdump-released/</id>
		<published>2016-02-07T00:18:50+09:00</published>
		<updated>2016-02-07T00:18:50+09:00</updated>
		<summary>OpenPGP パケットの内容を視覚化する gpgpdump の 0.1.0 をリリースした。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;余暇でちまちま作っていたが，とりあえず使えるようになったので。&lt;/p&gt;

&lt;p&gt;OpenPGP パケットの内容を視覚化する &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; の 0.1.0 をリリースした。
名前でピンとくる人もいるだろうが，山本和彦さんの &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; の翻案である。
特徴は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で作成。特別なパッケージは使用していないので &lt;code&gt;go get&lt;/code&gt; コマンドのみでビルド可能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; （または &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt;）フォーマットで出力&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34; title=&#34;RFC 4880 - OpenPGP Message Format&#34;&gt;RFC 4880&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc5581&#34; title=&#34;RFC 5581 - The Camellia Cipher in OpenPGP&#34;&gt;RFC 5581&lt;/a&gt; および &lt;a href=&#34;https://tools.ietf.org/html/rfc6637&#34; title=&#34;RFC 6637 - Elliptic Curve Cryptography (ECC) in OpenPGP&#34;&gt;RFC 6637&lt;/a&gt; をサポート&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License Version 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat sig
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iF4EARMIAAYFAlTDCN8ACgkQMfv9qV+7+hg2HwEA6h2iFFuCBv3VrsSf2BREQaT1
T1ZprZqwRPOjiLJg9AwA/ArTwCPz7c2vmxlv7sRlRLUI6CdsOqhuO1KfYXrq7idI
=ZOTN
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という OpenPGP 署名データがあるとする。
これを &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; で表示すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pgpdump sig
Old: Signature Packet(tag 2)(94 bytes)
        Ver 4 - new
        Sig type - Signature of a canonical text document(0x01).
        Pub alg - Reserved for ECDSA(pub 19)
        Hash alg - SHA256(hash 8)
        Hashed Sub: signature creation time(sub 2)(4 bytes)
                Time - Sat Jan 24 11:52:15 東京 (標準時) 2015
        Sub: issuer key ID(sub 16)(8 bytes)
                Key ID - 0x31FBFDA95FBBFA18
        Hash left 2 bytes - 36 1f
        Unknown signature(pub 19)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。
一方， &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; の場合は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpgpdump sig
[[Packet]]
  name = &amp;quot;Packet&amp;quot;
  value = &amp;quot;Signature Packet (tag 2)&amp;quot;
  note = &amp;quot;94 bytes&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Version&amp;quot;
    value = &amp;quot;4&amp;quot;
    dump = &amp;quot;04&amp;quot;
    note = &amp;quot;new&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Signiture Type&amp;quot;
    value = &amp;quot;Signature of a canonical text document (0x01)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Public-key Algorithm&amp;quot;
    value = &amp;quot;ECDSA public key algorithm (pub 19)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hash Algorithm&amp;quot;
    value = &amp;quot;SHA256 (hash 8)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hashed Subpacket&amp;quot;

    [[Packet.Item.Item]]
      name = &amp;quot;Signature Creation Time (sub 2)&amp;quot;
      value = &amp;quot;2015-01-24T11:52:15+09:00&amp;quot;
      dump = &amp;quot;54 c3 08 df&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Unhashed Subpacket&amp;quot;

    [[Packet.Item.Item]]
      name = &amp;quot;Issuer (sub 16)&amp;quot;
      value = &amp;quot;0x31FBFDA95FBBFA18&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Hash left 2 bytes&amp;quot;
    dump = &amp;quot;36 1f&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Multi-precision integer&amp;quot;
    dump = &amp;quot;...&amp;quot;
    note = &amp;quot;ECDSA r (256 bits)&amp;quot;

  [[Packet.Item]]
    name = &amp;quot;Multi-precision integer&amp;quot;
    dump = &amp;quot;...&amp;quot;
    note = &amp;quot;ECDSA s (252 bits)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じで同等の内容を &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; フォーマットで出力する。
また &lt;code&gt;-j&lt;/code&gt; オプションを付けると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpgpdump sig
{
  &amp;quot;Packet&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;Packet&amp;quot;,
      &amp;quot;value&amp;quot;: &amp;quot;Signature Packet (tag 2)&amp;quot;,
      &amp;quot;note&amp;quot;: &amp;quot;94 bytes&amp;quot;,
      &amp;quot;Item&amp;quot;: [
        {
          &amp;quot;name&amp;quot;: &amp;quot;Version&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;4&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;04&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;new&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Signiture Type&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;Signature of a canonical text document (0x01)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Public-key Algorithm&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;ECDSA public key algorithm (pub 19)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hash Algorithm&amp;quot;,
          &amp;quot;value&amp;quot;: &amp;quot;SHA256 (hash 8)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hashed Subpacket&amp;quot;,
          &amp;quot;Item&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;Signature Creation Time (sub 2)&amp;quot;,
              &amp;quot;value&amp;quot;: &amp;quot;2015-01-24T11:52:15+09:00&amp;quot;,
              &amp;quot;dump&amp;quot;: &amp;quot;54 c3 08 df&amp;quot;
            }
          ]
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Unhashed Subpacket&amp;quot;,
          &amp;quot;Item&amp;quot;: [
            {
              &amp;quot;name&amp;quot;: &amp;quot;Issuer (sub 16)&amp;quot;,
              &amp;quot;value&amp;quot;: &amp;quot;0x31FBFDA95FBBFA18&amp;quot;
            }
          ]
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Hash left 2 bytes&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;36 1f&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Multi-precision integer&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;...&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;ECDSA r (256 bits)&amp;quot;
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Multi-precision integer&amp;quot;,
          &amp;quot;dump&amp;quot;: &amp;quot;...&amp;quot;,
          &amp;quot;note&amp;quot;: &amp;quot;ECDSA s (252 bits)&amp;quot;
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じに &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; 形式で出力する。
だいぶ冗長な表現で申し訳ないが，解析結果を以下の &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; で正規化している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Packets - OpenPGP packets
type Packets struct {
	Packet []*Item
}

//Item - item in Packets
type Item struct {
	Name  string  `toml:&amp;quot;name&amp;quot; json:&amp;quot;name&amp;quot;`
	Value string  `toml:&amp;quot;value,omitempty&amp;quot; json:&amp;quot;value,omitempty&amp;quot;`
	Dump  string  `toml:&amp;quot;dump,omitempty&amp;quot; json:&amp;quot;dump,omitempty&amp;quot;`
	Note  string  `toml:&amp;quot;note,omitempty&amp;quot; json:&amp;quot;note,omitempty&amp;quot;`
	Item  []*Item `toml:&amp;quot;Item,omitempty&amp;quot; json:&amp;quot;Item,omitempty&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gpgpdump&#34; title=&#34;spiegel-im-spiegel/gpgpdump: gpgpdump - OpenPGP packet visualizer&#34;&gt;gpgpdump&lt;/a&gt; は &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の勉強用に作成した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet&#34;&gt;&lt;code&gt;golang.org/x/crypto/openpgp/packet&lt;/code&gt;&lt;/a&gt; というパッケージがあって，これを使えば簡単にできるだろうと思ったのが大間違いで，結局このパッケージで使えたのは &lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet#OpaquePacket&#34;&gt;&lt;code&gt;OpaquePacket&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://godoc.org/golang.org/x/crypto/openpgp/packet#OpaqueSubpacket&#34;&gt;&lt;code&gt;OpaqueSubpacket&lt;/code&gt;&lt;/a&gt; くらい。
実際のパケットの解析はゴリゴリとコードを書くはめになった
いや，これだけでもだいぶ助かったけど。&lt;/p&gt;

&lt;p&gt;とはいえ，まだまだ課題はあって&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パケット解析部分のテストが未実装。つか，古いフォーマットのパケットのテストどうしよう&lt;/li&gt;
&lt;li&gt;そもそもパケット解析部分は作りが悪くて簡単に &lt;a href=&#34;http://blog.golang.org/defer-panic-and-recover&#34; title=&#34;Defer, Panic, and Recover - The Go Blog&#34;&gt;panic&lt;/a&gt; が起きてしまうので全面的に書きなおす予定&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4880#section-5.6&#34;&gt;Compressed Data Packet (Tag 8)&lt;/a&gt; が未実装。どうやって実現しようか悩み中&lt;/li&gt;
&lt;li&gt;実は ECC (&lt;a href=&#34;https://tools.ietf.org/html/rfc6637&#34; title=&#34;RFC 6637 - Elliptic Curve Cryptography (ECC) in OpenPGP&#34;&gt;RFC 6637&lt;/a&gt;) がよく分かってない。もしかしたら解釈を間違えているかもしれない&lt;/li&gt;
&lt;li&gt;最終的には &lt;a href=&#34;http://www.mew.org/~kazu/proj/pgpdump/&#34; title=&#34;pgpdump&#34;&gt;pgpdump&lt;/a&gt; と同等な出力を目指す&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったあたりを，これからゆっくり手を入れていこうと考えている。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:a131791b2fce306ad1e4a38715959029&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/golang/&#34;&gt;プログラミング言語 Go — text.Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Struct タグについて - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/struct-tag/" />
		<id>tag:text.Baldanders.info,2016-02-05:/golang/struct-tag/</id>
		<published>2016-02-05T00:11:53+09:00</published>
		<updated>2016-02-05T00:11:53+09:00</updated>
		<summary>Struct で正規化できる情報であれば，タグを使うことでアプリケーション外部とのやり取りがずっと楽になる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; で構造化されている情報を特定のファイルやデータベースに出力したり，逆にファイルやデータベースの情報を &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; に流し込みたい場合に &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; の各フィールドに目印になる情報があると便利である。
この目印として機能するのが &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; タグである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5fa302080eeba16361245078fe0e5ca6:an&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5fa302080eeba16361245078fe0e5ca6:an&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; タグは以下のように記述する。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;By convention, tag strings are a concatenation of optionally space-separated key:&#34;value&#34; pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 &#39; &#39;), quote (U+0022 &#39;&#34;&#39;), and colon (U+003A &#39;:&#39;). Each value is quoted using U+0022 &#39;&#34;&#39; characters and Go string literal syntax.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/pkg/reflect/#example_StructTag&#34;&gt;reflect - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Server struct {
	Host      string `elem:&amp;quot;host&amp;quot;`
	IPAddress string `elem:&amp;quot;ip_address&amp;quot;`
	Port      int    `elem:&amp;quot;port&amp;quot;`
	Note      string `elem:&amp;quot;note&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このタグ情報を取得するには &lt;a href=&#34;https://golang.org/pkg/reflect/&#34; title=&#34;reflect - The Go Programming Language&#34;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; パッケージを使う。
たとえばこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;reflect&amp;quot;
)

type Server struct {
	Host      string `elem:&amp;quot;host&amp;quot;`
	IPAddress string `elem:&amp;quot;ip_address&amp;quot;`
	Port      int    `elem:&amp;quot;port&amp;quot;`
	Note      string `elem:&amp;quot;note&amp;quot;`
}

func main() {
	s := Server{}
	t := reflect.TypeOf(s)
	for i := 0; i &amp;lt; t.NumField(); i++ {
		field := t.Field(i)
		fmt.Printf(&amp;quot;Name=%s , tag(elem)=%s\n&amp;quot;, field.Name, field.Tag.Get(&amp;quot;elem&amp;quot;))
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行するとこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Name=Host , tag(elem)=host
Name=IPAddress , tag(elem)=ip_address
Name=Port , tag(elem)=port
Name=Note , tag(elem)=note
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際には &lt;a href=&#34;https://golang.org/pkg/reflect/&#34; title=&#34;reflect - The Go Programming Language&#34;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; を直接使う局面は少なく，既にあるパッケージを利用することが多い。
たとえば &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; による構造化データを &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; 形式に出力する &lt;a href=&#34;https://golang.org/pkg/encoding/json/&#34; title=&#34;json - The Go Programming Language&#34;&gt;&lt;code&gt;encoding/json&lt;/code&gt;&lt;/a&gt; パッケージがある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;encoding/json&amp;quot;
	&amp;quot;fmt&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot;`
}

func main() {
	s := Server{Host: &amp;quot;localhost&amp;quot;, IPAddress: &amp;quot;127.0.0.1&amp;quot;, Port: 8080, Note: &amp;quot;Web Application&amp;quot;}
	j, err := json.MarshalIndent(s, &amp;quot;&amp;quot;, &amp;quot;  &amp;quot;)
	if err != nil {
		return
	}
	fmt.Println(string(j))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行するとこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
  &amp;quot;ip_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
  &amp;quot;port&amp;quot;: 8080,
  &amp;quot;note&amp;quot;: &amp;quot;Web Application&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Server&lt;/code&gt; の内容が &lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; 形式で出力されているのが分かるだろう。
&lt;a href=&#34;https://tools.ietf.org/html/rfc7159&#34; title=&#34;RFC 7159 - The JavaScript Object Notation (JSON) Data Interchange Format&#34;&gt;JSON&lt;/a&gt; の要素名がタグで指定した名前になっていることを確認してほしい。&lt;/p&gt;

&lt;p&gt;反対もやってみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;encoding/json&amp;quot;
	&amp;quot;fmt&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot;`
}

func main() {
	svr := []byte(`{
  &amp;quot;host&amp;quot;: &amp;quot;localhost&amp;quot;,
  &amp;quot;ip_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
  &amp;quot;port&amp;quot;: 8080,
  &amp;quot;note&amp;quot;: &amp;quot;Web Application&amp;quot;
}`)
	var s Server
	if err := json.Unmarshal(svr, &amp;amp;s); err != nil {
		return
	}
	fmt.Println(s)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果はこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{localhost 127.0.0.1 8080 Web Application}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;きれいに &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; に値が入っているのが分かると思う。&lt;/p&gt;

&lt;p&gt;ちなみにタグの書式は &lt;code&gt;key:&amp;quot;value&amp;quot;&lt;/code&gt; だが，間違って記述しても単に無視されるだけでコンパイル時も実行時もエラーにならないので注意が必要である。
なおタグ書式の文法ミスについては，静的検査ツールの &lt;a href=&#34;https://golang.org/cmd/vet/&#34; title=&#34;vet - The Go Programming Language&#34;&gt;vet&lt;/a&gt; でチェックできる。&lt;/p&gt;

&lt;p&gt;タグは複数列挙することができる。
たとえばサンプルの構造体を &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; にも対応させたいなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Server struct {
	Host      string `json:&amp;quot;host&amp;quot; toml:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot; toml:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot; toml:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot; toml:&amp;quot;note&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとする（デリミタは空白文字）。
じゃあ，先ほどと同じようにして &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; で出力してみる。
&lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; を扱うには &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;&lt;code&gt;github.com/BurntSushi/toml&lt;/code&gt;&lt;/a&gt; パッケージを使うとよい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/BurntSushi/toml&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot; toml:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot; toml:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot; toml:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot; toml:&amp;quot;note,omitempty&amp;quot;`
}

func main() {
	s := Server{Host: &amp;quot;localhost&amp;quot;, IPAddress: &amp;quot;127.0.0.1&amp;quot;, Port: 8080, Note: &amp;quot;&amp;quot;}
	t := new(bytes.Buffer)
	if err := toml.NewEncoder(t).Encode(s); err != nil {
		return
	}
	fmt.Println(t.String())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host = &amp;quot;localhost&amp;quot;
ip_address = &amp;quot;127.0.0.1&amp;quot;
port = 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;omitempty&lt;/code&gt; オプションはフィールドが空（&lt;code&gt;nil&lt;/code&gt; または空文字列）の場合に出力を省略できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5fa302080eeba16361245078fe0e5ca6:oz&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5fa302080eeba16361245078fe0e5ca6:oz&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
このオプションは &lt;a href=&#34;https://golang.org/pkg/encoding/json/&#34; title=&#34;json - The Go Programming Language&#34;&gt;&lt;code&gt;encoding/json&lt;/code&gt;&lt;/a&gt; パッケージでも使える。&lt;/p&gt;

&lt;p&gt;ついでに反対もやってみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/BurntSushi/toml&amp;quot;
)

type Server struct {
	Host      string `json:&amp;quot;host&amp;quot; toml:&amp;quot;host&amp;quot;`
	IPAddress string `json:&amp;quot;ip_address&amp;quot; toml:&amp;quot;ip_address&amp;quot;`
	Port      int    `json:&amp;quot;port&amp;quot; toml:&amp;quot;port&amp;quot;`
	Note      string `json:&amp;quot;note&amp;quot; toml:&amp;quot;note,omitempty&amp;quot;`
}

func main() {
	svr := `
host = &amp;quot;localhost&amp;quot;
ip_address = &amp;quot;127.0.0.1&amp;quot;
port = 8080
note = &amp;quot;Web Application&amp;quot;
`
	var s Server
	if _, err := toml.Decode(svr, &amp;amp;s); err != nil {
		return
	}
	fmt.Println(s)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{localhost 127.0.0.1 8080 Web Application}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように &lt;a href=&#34;https://golang.org/ref/spec#Struct_types&#34; title=&#34;Struct types&#34;&gt;struct&lt;/a&gt; で正規化できる情報であれば，タグ機能を使うことでアプリケーション外部とのやり取りがだいぶ楽になる。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:5fa302080eeba16361245078fe0e5ca6&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiyosi.tumblr.com/post/100922038678/go-%E3%81%A7-struct-%E3%81%AE%E3%82%BF%E3%82%B0%E6%83%85%E5%A0%B1%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B&#34;&gt;Go で struct のタグ情報を取得する - hiyosi&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/fcd25db64f341ad2471f&#34;&gt;struct にアノテーションつけてたら go vet . すべき - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.restartr.com/2014/08/13/golang-json-marshal-unmarshal/&#34;&gt;Goのjson.Marshal/Unmarshalの仕様を整理してみる - I Will Survive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/reiki4040/items/6556d4eba797329e9f51&#34;&gt;BurntSushi/tomlを使ってハマったこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:5fa302080eeba16361245078fe0e5ca6:an&#34;&gt;「アノテーション（annotation）」と呼ぶ人もいる。たぶん Java の annotation 機能を意識しているんだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5fa302080eeba16361245078fe0e5ca6:an&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5fa302080eeba16361245078fe0e5ca6:oz&#34;&gt;数値の場合は &lt;code&gt;omitzero&lt;/code&gt; オプションを付けると 0 のときに出力を省略できる。ただし &lt;a href=&#34;https://github.com/BurntSushi/toml&#34;&gt;&lt;code&gt;BurntSushi/toml&lt;/code&gt;&lt;/a&gt; パッケージでは &lt;a href=&#34;http://qiita.com/reiki4040/items/6556d4eba797329e9f51&#34;&gt;&lt;code&gt;Decode()&lt;/code&gt; がうまく動かない&lt;/a&gt;らしい。実は &lt;code&gt;omitempty&lt;/code&gt; オプションも &lt;code&gt;Decode()&lt;/code&gt; 時の挙動が怪しいんだよなぁ。 &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; パーサの別実装としては &lt;a href=&#34;https://github.com/naoina/toml&#34;&gt;naoina/toml&lt;/a&gt; というのもある。これは最新の &lt;a href=&#34;https://github.com/toml-lang/toml&#34; title=&#34;toml-lang/toml: Tom&#39;s Obvious, Minimal Language&#34;&gt;TOML&lt;/a&gt; 仕様に追随しているようだが &lt;code&gt;omitzero&lt;/code&gt; オプションには対応していない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5fa302080eeba16361245078fe0e5ca6:oz&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>リスク認知とトレードオフ - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/02/risk-trade-off/" />
		<id>tag:text.Baldanders.info,2016-02-03:/remark/2016/02/risk-trade-off/</id>
		<published>2016-02-03T22:02:21+09:00</published>
		<updated>2016-02-03T22:02:21+09:00</updated>
		<summary>リスクと利便性はトレードオフできない。リスクとトレードオフできるのはリスクのみ。リスクをトレードオフして「全体最適化」することが重要なのである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;繰り返し語られていることではあるけれど。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;https://www.usenix.org/system/files/conference/soups2015/soups15-paper-ion.pdf&#34;&gt;“...no one can hack my mind”: Comparing Expert and Non-Expert Security Practices&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://googlejapan.blogspot.jp/2016/02/blog-post.html&#34;&gt;Google Japan Blog: サイバーセキュリティ月間：エキスパートたちのセキュリティ対策&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20160202_741876.html&#34;&gt;セキュリティの専門家とそうでない人のセキュリティ対策の違いとは、Googleが論文紹介 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;面白いのはこの表。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;本論文では、オンラインにおける安全性を確保するために行っている対策について、セキュリティ専門家 231 人と一般のインターネットユーザー 294 人に対して行った調査結果から、異なる 2 つのグループからの回答をもとに、それぞれの対策や判断の違いと理由をまとめたものです。&lt;br&gt;
以下は、最も回答が多かったセキュリティ対策を、エキスパートと一般ユーザーで分類した表です。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://googlejapan.blogspot.jp/2016/02/blog-post.html&#34;&gt;エキスパートたちのセキュリティ対策&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;一般ユーザ&lt;/th&gt;
    &lt;th&gt;順位&lt;/th&gt;
    &lt;th&gt;セキュリティ・エキスパート&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;アンチウイルスソフトを使う&lt;/td&gt;
    &lt;th&gt;1&lt;/th&gt;
    &lt;td&gt;ソフトウェアアップデートをインストールする&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;強固なパスワードを使う&lt;/td&gt;
    &lt;th&gt;2&lt;/th&gt;
    &lt;td&gt;サービスごとにユニークなパスワードを使う&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;頻繁にパスワードを変える&lt;/td&gt;
    &lt;th&gt;3&lt;/th&gt;
    &lt;td&gt;2段階認証を使う&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;知ってるウェブサイトしか利用しない&lt;/td&gt;
    &lt;th&gt;4&lt;/th&gt;
    &lt;td&gt;強固なパスワードを使う&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;個人情報は公開しない&lt;/td&gt;
    &lt;th&gt;5&lt;/th&gt;
    &lt;td&gt;パスワード管理ツールを使う&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;figcaption&gt;&lt;a href=&#34;http://googlejapan.blogspot.jp/2016/02/blog-post.html&#34;&gt;「エキスパートたちのセキュリティ対策」より&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;これとよく似た表があったな，と思ったら吉川肇子さんの『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4641280304/baldandersinf-22/&#34;&gt;リスクとつきあう&lt;/a&gt;』という本の中にあった。
それは「危険と感じられる活動や科学技術」を30項目挙げ順位をつけたものであるが，全部を載せるのは無理なので，大学生のワースト3とトップ3を挙げ，それに対する専門家の順位を並べてみる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;活動や科学技術&lt;/th&gt;
    &lt;th&gt;大学生順位&lt;/th&gt;
    &lt;th&gt;専門家順位&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;原子力&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;20&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;拳銃&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;4&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;喫煙&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;動力草刈り機&lt;/td&gt;
    &lt;td&gt;28&lt;/td&gt;
    &lt;td&gt;28&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;予防接種&lt;/td&gt;
    &lt;td&gt;29&lt;/td&gt;
    &lt;td&gt;25&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;水泳&lt;/td&gt;
    &lt;td&gt;30&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;figcaption&gt;吉川肇子著『リスクとつきあう』 p.77&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ちなみに専門家の1位は「自動車」である。
もっともこの表は1987年の論文のもので現在とは知見が異なると思うけど&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7a096df77ca5d6d505e7211e392a93c5:aa&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7a096df77ca5d6d505e7211e392a93c5:aa&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，注目すべきは一般の人と専門家とのリスク「感覚」のギャップである。&lt;/p&gt;

&lt;p&gt;リスクは「生起確率×脅威の大きさ」で測るが，私を含め一般の人はこの「感覚」に慣れていない。
何らかの認知バイアスが必ずかかってしまう。
それがこのギャップとなって顕われるのだと思う。&lt;/p&gt;

&lt;p&gt;だからこの表を見て「専門家の言うとおりにしなきゃ」と考えるのは早計で&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7a096df77ca5d6d505e7211e392a93c5:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7a096df77ca5d6d505e7211e392a93c5:a&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，自身のリスク「感覚」を磨いていくことが重要である。
本当はそういうのは義務教育のうちにやっとくべきなんだろうけどね。&lt;/p&gt;

&lt;p&gt;さらに言うなら，個人と営利企業と国家とではリスクに対してそれぞれ執るべき行動が異なる。
何故なら，それぞれの「守るべきもの」が異なるから。&lt;/p&gt;

&lt;p&gt;個人にとってまっさきに重要なのはプライバシーと財産だろう。
営利企業は個人と似ているが，賢い企業はリスクをお金に換算できる。
故に「リスクはチャンス」なのだ。
そして国家にとっては「軍事」を含めた包括的なものであり，特定の個人や企業との利害には（基本的には）興味が無い&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7a096df77ca5d6d505e7211e392a93c5:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7a096df77ca5d6d505e7211e392a93c5:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;そういえば最近こんな記事があった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50762469.html&#34;&gt;エフセキュアブログ : 今年度のCTFを無双した韓国チーム、その強さの秘密&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;国家にとって「サイバー・セキュリティ」の防衛力の高さは「サイバー攻撃」力の高さに直結する（たとえそれを行使する気がなくとも）。
だから各国は「サイバー・セキュリティ」の向上を目指さざるをえない。
「サイバー・セキュリティ」防衛力の高さを誇示することが他国に対する示威行動になる。
この記事の最後の文章を挙げておこう。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;日本で〇〇万人のセキュリティ技術者が不足しているという報道があるのと同じように、韓国でも〇〇万人(韓国では10万人説が主流)のセキュリティ技術者が不足しているとマスコミは報道したがるそうです。&lt;br&gt;
それでも中の人は、サイバーセキュリティは数ではなく質だということをきちんとわかっていて、韓国トップクラスの技術者が世界トップクラスになるための工夫を続けています。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50762469.html&#34;&gt;今年度のCTFを無双した韓国チーム、その強さの秘密&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ホンマ，日本年金機構の不始末にかこつけて「セキュリティ戦略」を利権化しようという意図は分かりやすいが，単に動員に頼るんじゃなく，本当の意味での「戦略」をきちんと企図して実行しないと，まぁた世界から取り残されるよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.wsj.com/articles/JJ11757514300003864480318027226602632645960&#34;&gt;サイバー対策強化へ法案＝政府 - WSJ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;愚痴はともかく，ただ政府やセキュリティ企業や（自称を含む）専門家に従えばいいというわけではなく，自分にとって何が大事で何を守るべきかを客観的に把握できていなければならない。
「彼を知り己を知れば百戦殆からず」である。
孫子だっけ？&lt;/p&gt;

&lt;p&gt;最後にリスクと利便性はトレードオフできない。
リスクとトレードオフできるのはリスクのみ。
リスクをトレードオフして「全体最適化」することが重要なのである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7a096df77ca5d6d505e7211e392a93c5:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7a096df77ca5d6d505e7211e392a93c5:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
故に優先順位がとても重要になる。
そこで最初の表に戻るわけだ。&lt;/p&gt;

&lt;p&gt;「辞書攻撃」で簡単に解読できるようなパスワードを「強固」と思い込んで必死で暗記したのに，何かの拍子で忘れてしまってサービスが使えなくなった上に攻撃者に乗っ取られる。
なんてお馬鹿なことにならないように。
使える道具はきっちり使って人間の弱さや曖昧さを許容しつつ排除するよう構成するなら，個人にとっての「サイバー・セキュリティ」はそれほど難しいことではない。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:7a096df77ca5d6d505e7211e392a93c5&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283100/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283100/baldandersinf-22/&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ブルース・シュナイアー 井口 耕二 &lt;/dd&gt;&lt;dd&gt;日経BP社 2007-02-15&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4881359967/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4881359967.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号の秘密とウソ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797350997/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797350997.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新版暗号技術入門 秘密の国のアリス&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4594070507/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4594070507.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;チャイナ・ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159746/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159746.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;宇宙創成〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;日本語のタイトルはアレだが中身は名著。とりあえず読んどきなはれ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-14&#34;&gt;2014/09/14&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00E7HMI7U/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51I9C7cFl2L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00E7HMI7U/baldandersinf-22/&#34;&gt;環境リスク学&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;中西準子 &lt;/dd&gt;&lt;dd&gt;日本評論社 2013-08-01&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00E7HMIB6/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00E7HMIB6.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;食のリスク学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00M98XGDO/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00M98XGDO.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;基準値のからくり　安全はこうして数字になった (ブルーバックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00VQ75FAQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00VQ75FAQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;21世紀の資本&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B014II6012/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B014II6012.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;丸山眞男セレクション (平凡社ライブラリー700)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00BWI0U0O/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00BWI0U0O.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;「ゼロリスク社会」の罠～「怖い」が判断を狂わせる～&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;環境リスクのみならず「リスク」全体に目配せした良書。著者の自伝的作品でもある。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-02-03&#34;&gt;2016-02-03&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4641280304/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/519S1SM2S4L._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4641280304/baldandersinf-22/&#34;&gt;リスクとつきあう―危険な時代のコミュニケーション (有斐閣選書)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;吉川 肇子 &lt;/dd&gt;&lt;dd&gt;有斐閣 2000-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4885554241/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4885554241.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;リスクコミュニケーション (エネルギーフォーラム新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4779502357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4779502357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;健康リスク・コミュニケーションの手引き&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4873262526/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4873262526.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;リスクコミュニケーション―前進への提言&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480066845/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480066845.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;「リスク」の食べ方―食の安全・安心を考える (ちくま新書)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4872592840/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4872592840.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;リスクコミュニケーション論 (シリーズ環境リスクマネジメント)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;リスク・コミュニケーションについて。内容は古いがまだまだ使える。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-02-03&#34;&gt;2016-02-03&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:7a096df77ca5d6d505e7211e392a93c5:aa&#34;&gt;たとえば専門家の間では長い間，飛行機よりも自動車のほうがリスクが高いとみなされていたが，近年では飛行機のほうがリスクが高いのではないかという意見もある。飛行機事故の生起確率に対して事故時の被害の大きさのほうがずっと大きいかららしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7a096df77ca5d6d505e7211e392a93c5:aa&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7a096df77ca5d6d505e7211e392a93c5:a&#34;&gt;いや専門家の意見を参考にするのはいいことだと思うけど，今時は専門家もピンキリだからなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7a096df77ca5d6d505e7211e392a93c5:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7a096df77ca5d6d505e7211e392a93c5:b&#34;&gt;つまり安倍首相が「国民の安心安全のために」というときの「国民」は個人を指しているわけではない。そしてこれらの思惑は時に衝突する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7a096df77ca5d6d505e7211e392a93c5:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7a096df77ca5d6d505e7211e392a93c5:c&#34;&gt;だからリスクをお金に換算するというのは理に適っていると言える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7a096df77ca5d6d505e7211e392a93c5:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： フェルミのパラドックス - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/30-stories/" />
		<id>tag:text.Baldanders.info,2016-01-30:/remark/2016/01/30-stories/</id>
		<published>2016-01-30T19:19:39+09:00</published>
		<updated>2016-01-30T19:19:39+09:00</updated>
		<summary>フェルミのパラドックス / GnuPG 2.1.11 released / Go 1.6 Release Candidate 1 / MIAU からの意見書</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#seti:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;フェルミのパラドックス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gpg:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;GnuPG 2.1.11 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#golang:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;Go 1.6 Release Candidate 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miau:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;MIAU からの意見書&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;seti:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;フェルミのパラドックス&lt;/h2&gt;

&lt;p&gt;人類の歴史は（宇宙誕生からの時間に比べれば）極々短いものだが，この歴史の中で私たちが ETI（Extra-terrestrial Intelligence; 地球外生命体）と直接的・間接的に接触したという記録はない。
宇宙に ETI やその文明がありふれているのなら，今まで地球人が接触しなかったのは何故？ というのが「フェルミのパラドックス」の内容であり，これが ETI 非存在を示す間接的な材料となっている。&lt;/p&gt;

&lt;p&gt;最近このフェルミのパラドックスを説明する新しい説が出たらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://online.liebertpub.com/doi/10.1089/ast.2015.1387&#34;&gt;The Case for a Gaian Bottleneck: The Biology of Habitability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://science.anu.edu.au/whats-on/all-news/aliens-are-silent-because-they-are-extinct&#34;&gt;The aliens are silent because they are extinct | Science, Medicine and Health&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/01/27exolife/index-j.shtml&#34;&gt;地球外生命からコンタクトがない理由 - アストロアーツ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;もし金星や火星に初期の微生物が存在していたとしても、急速な環境の変化を安定にすることはできませんでした。一方、おそらく地球上の生物は、惑星の気候を安定させる重要な役割を果たしたのでしょう。いまだに地球外生命体の存在を示す兆候を見つけられていないのは、生物または知的生命体の誕生というよりも、惑星表面におけるフィードバック・サイクルの生物学的な制御が急速に起こることは稀だ、ということと関係が深いと思われます&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/01/27exolife/index-j.shtml&#34;&gt;地球外生命からコンタクトがない理由&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;銀河系内にどのくらい（地球人と交信可能な）知的文明が存在するか推定する方程式がある。
これが「ドレイク方程式」と呼ばれるものだ。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
\[
    N = R_{*} \times f_p \times  n_e \times f_l \times f_i \times f_c \times L
\]
&lt;/blockquote&gt;

&lt;/figure&gt;

&lt;p&gt;各項の意味は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$R_{*}$ ： 銀河系内で年間で誕生する恒星の数&lt;/li&gt;
&lt;li&gt;$f_p$ ： その恒星が惑星を持つようになる確率&lt;/li&gt;
&lt;li&gt;$n_e$ ： それらの中で生命の発生し得る条件を備えた惑星の数&lt;/li&gt;
&lt;li&gt;$f_l$ ： その惑星の中に実際に生命が発生し得る確率&lt;/li&gt;
&lt;li&gt;$f_i$ ： その生命が知性を持つに至る確率&lt;/li&gt;
&lt;li&gt;$f_c$ ： 彼らが実際に恒星間電波通信を行うまでに進歩する確率&lt;/li&gt;
&lt;li&gt;$L$ ： その文明の寿命&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;である。&lt;/p&gt;

&lt;p&gt;この式の評価は色々あるのだが，金子隆一著『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;ファースト・コンタクト―地球外知性体と出会う日&lt;/a&gt;』では&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$R_{*} = 20$&lt;/li&gt;
&lt;li&gt;$f_p = 0.25$&lt;/li&gt;
&lt;li&gt;$n_e = 1.5$&lt;/li&gt;
&lt;li&gt;$f_l = 0.75$&lt;/li&gt;
&lt;li&gt;$f_i = 0.5$&lt;/li&gt;
&lt;li&gt;$f_c = 0.5$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と見積もられていた。
つまり $N = 1.4L$ となる。
仮に恒星間電波通信が可能な文明の寿命を1万年とするなら約1万4千の地球外文明が存在し得ることになる。
ちなみに地球人が電波を通信手段として使うようになってからまだ150年も経っていない。
さらに宇宙に向けて「アレシボ・メッセージ」を送ったのは1974年末。
「つい最近」の出来事である。&lt;/p&gt;

&lt;p&gt;後半の $f_i$, $f_c$, $L$ 以外はほぼ物理的要因で決まると言ってよい。
また $L$ の唯一のサンプルは地球文明なので，地球文明が長く続ければ続くほど $L$ が大きく見積もれることになる。&lt;/p&gt;

&lt;p&gt;しかし今回の論文から， $n_e$ や $f_l$ といった項が実はかなり小さい値なのではないか，と考えることもできる。
さて，現在の学者さん達はドレイク方程式をどのように解釈するだろうか。&lt;/p&gt;

&lt;p&gt;そうそう。
&lt;a href=&#34;http://setiathome.ssl.berkeley.edu/&#34;&gt;SETI@home&lt;/a&gt; はバージョン 8 がリリースされている。
自宅マシンでは順調に稼働中。
Android 版もあるよ。&lt;/p&gt;

&lt;h2 id=&#34;gpg:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;GnuPG 2.1.11 released&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; 2.1.11 が出た。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2016q1/000383.html&#34;&gt;[Announce] GnuPG 2.1.11 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;セキュリティ・アップデートはなし。
主な変更点は以下のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gpg: New command &amp;ndash;export-ssh-key to replace the gpgkey2ssh tool.&lt;/li&gt;
&lt;li&gt;gpg: Allow to generate mail address only keys with &amp;ndash;gen-key.&lt;/li&gt;
&lt;li&gt;gpg: &amp;ldquo;&amp;ndash;list-options show-usage&amp;rdquo; is now the default.&lt;/li&gt;
&lt;li&gt;gpg: Make lookup of DNS CERT records holding an URL work.&lt;/li&gt;
&lt;li&gt;gpg: Emit PROGRESS status lines during key generation.&lt;/li&gt;
&lt;li&gt;gpg: Don&amp;rsquo;t check for ambigious or non-matching key specification in the config file or given to &amp;ndash;encrypt-to.  This feature will return in 2.3.x.&lt;/li&gt;
&lt;li&gt;gpg: Lock keybox files while updating them.&lt;/li&gt;
&lt;li&gt;gpg: Solve rare error on Windows during keyring and Keybox updates.&lt;/li&gt;
&lt;li&gt;gpg: Fix possible keyring corruption. (bug#2193)&lt;/li&gt;
&lt;li&gt;gpg: Fix regression of &amp;ldquo;bkuptocard&amp;rdquo; sub-command in &amp;ndash;edit-key and remove &amp;ldquo;checkbkupkey&amp;rdquo; sub-command introduced with 2.1.  (bug#2169)&lt;/li&gt;
&lt;li&gt;gpg: Fix internal error in gpgv when using default keyid-format.&lt;/li&gt;
&lt;li&gt;gpg: Fix &amp;ndash;auto-key-retrieve to work with dirmngr.conf configured keyservers. (bug#2147).&lt;/li&gt;
&lt;li&gt;agent: New option &amp;ndash;pinentry-timeout.&lt;/li&gt;
&lt;li&gt;scd: Improve unplugging of USB readers under Windows.&lt;/li&gt;
&lt;li&gt;scd: Fix regression for generating RSA keys on card.&lt;/li&gt;
&lt;li&gt;dirmmgr: All configured keyservers are now searched.&lt;/li&gt;
&lt;li&gt;dirmngr: Install CA certificate for hkps.pool.sks-keyservers.net. Use this certiticate even if &amp;ndash;hkp-cacert is not used.&lt;/li&gt;
&lt;li&gt;gpgtar: Add actual encryption code.  gpgtar does now fully replace gpg-zip.&lt;/li&gt;
&lt;li&gt;gpgtar: Fix filename encoding problem on Windows.&lt;/li&gt;
&lt;li&gt;Print a warning if a GnuPG component is using an older version of gpg-agent, dirmngr, or scdaemon.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;golang:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;Go 1.6 Release Candidate 1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の 1.6 RC 版が登場。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/pXcUuFHc4YE&#34;&gt;Go 1.6 Release Candidate 1 is released - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Our goal is to release the final version of Go 1.6 in around two weeks.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/pXcUuFHc4YE&#34;&gt;Go 1.6 Release Candidate 1 is released&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;だそうで，楽しみである。&lt;/p&gt;

&lt;h2 id=&#34;miau:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;MIAU からの意見書&lt;/h2&gt;

&lt;p&gt;MIAU から「知的財産推進計画2016」が公開されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://miau.jp/index1453962972.phtml&#34;&gt;MIAU : 知的財産戦略本部「知的財産推進計画2016」策定に当たっての意見募集に、意見書を提出しました。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容については概ね同意。
つか， MIAU って仕事してるんだねぇ（笑）&lt;/p&gt;

&lt;p&gt;でもこれって効果あるのかねぇ。
やらないよりはマシだろうけど。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:abb0f7d2ccc635faeca500bd63eb454c&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41GPXP2HRVL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4166600044/baldandersinf-22/&#34;&gt;ファースト・コンタクト―地球外知性体と出会う日 (文春新書)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;金子 隆一 &lt;/dd&gt;&lt;dd&gt;文藝春秋 1998-10&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;地球外文明探査の歴史を俯瞰する良書。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-30&#34;&gt;2016-01-30&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語と Unicode 正規化 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/unicode-normalization/" />
		<id>tag:text.Baldanders.info,2016-01-30:/golang/unicode-normalization/</id>
		<published>2016-01-30T04:05:52+09:00</published>
		<updated>2016-01-30T22:38:31+09:00</updated>
		<summary>今回は少し目先を変えて「Unicode 正規化」のお話。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は少し目先を変えて「Unicode 正規化（normalization）」のお話。&lt;/p&gt;

&lt;h2 id=&#34;2羽の-ペンギン:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;2羽の「ペンギン」&lt;/h2&gt;

&lt;p&gt;まず「ペンギン」という文字列を思い浮かべてみる。
この文字列を Unicode のコードポイントで表すと以下のようになる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ペ：U+30DA&lt;/li&gt;
&lt;li&gt;ン：U+30F3&lt;/li&gt;
&lt;li&gt;ギ：U+30AE&lt;/li&gt;
&lt;li&gt;ン：U+30F3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ところでペンギンの「ペ」と「ギ」は半濁点および濁点を含む。
Unicode は「ペ」と「ギ」をそれぞれ2つの要素に分解できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ペ：U+30D8 + U+309A&lt;/li&gt;
&lt;li&gt;ン：U+30F3&lt;/li&gt;
&lt;li&gt;ギ：U+30AD + U+3099&lt;/li&gt;
&lt;li&gt;ン：U+30F3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;U+309A および U+3099 はそれぞれ半濁点と濁点を表す「結合文字（combining character）」である。
「ヘ」や「キ」のような「基底文字（base character）」に結合文字を1つ以上&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:cs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:cs&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 付加した文字を「合成列（composite sequence）」と呼ぶ。
これに対して「ペ：U+30DA」や「ギ：U+30AE」のような文字を「事前合成形（precomposed）」と呼ぶ。&lt;/p&gt;

&lt;p&gt;つまり同じ文字を同じ文字集合&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:ccs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:ccs&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; で表しているのにもかかわらず複数の符号化&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:ecd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:ecd&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; が存在するわけだ。
これを「重複符号化」と言う。
文字集合に重複符号化があるというのは，はっきり言って「クソ仕様」である。&lt;/p&gt;

&lt;p&gt;もちろんこれは Unicode を作った連中がヘボいのではなく（いや，ヘボいのかもしれないが），いわゆる「歴史的経緯」というやつである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:jis&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:jis&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
だからこれはこういうものだと諦めるしかない。&lt;/p&gt;

&lt;p&gt;しかし情報処理を行う上では，この2羽の「ペンギン」が等価（equivalance）であることを示す手立てを考えなければならない。&lt;/p&gt;

&lt;h2 id=&#34;正規等価:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;正規等価&lt;/h2&gt;

&lt;p&gt;2羽の「ペンギン」が等価であることを示す一番簡単な方法は，文字列を事前合成形あるいは合成列のどちらかに統一（＝正規化）してしまえばいい。
これを「正規等価（canonical equivalance）」と呼ぶ。
このうち，事前合成形に正規化する方法を “NFC（Normalization Form Composition）”，合成列に正規化する方法を “NFD（Normalization Form Decomposition）” と呼ぶ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では &lt;code&gt;golang.org/x/text/unicode/&lt;/code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34; title=&#34;norm - GoDoc&#34;&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/a&gt; パッケージで Unicode 文字列を正規化できる。
まぁ，コードで書いたほうがはやいか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;golang.org/x/text/unicode/norm&amp;quot;
)

func main() {
	penguin := &amp;quot;ペンギン&amp;quot;
	for pos, runeValue := range penguin {
		fmt.Printf(&amp;quot;penguin[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	penguin2 := string(norm.NFD.Bytes([]byte(penguin)))
	for pos, runeValue := range penguin2 {
		fmt.Printf(&amp;quot;penguin2[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	penguin3 := string(norm.NFC.Bytes([]byte(penguin2)))
	for pos, runeValue := range penguin3 {
		fmt.Printf(&amp;quot;penguin3[%d] = %#U\n&amp;quot;, pos, runeValue)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;penguin[0] = U+30DA &#39;ペ&#39;
penguin[3] = U+30F3 &#39;ン&#39;
penguin[6] = U+30AE &#39;ギ&#39;
penguin[9] = U+30F3 &#39;ン&#39;
penguin2[0] = U+30D8 &#39;ヘ&#39;
penguin2[3] = U+309A &#39;゚&#39;
penguin2[6] = U+30F3 &#39;ン&#39;
penguin2[9] = U+30AD &#39;キ&#39;
penguin2[12] = U+3099 &#39;゙&#39;
penguin2[15] = U+30F3 &#39;ン&#39;
penguin3[0] = U+30DA &#39;ペ&#39;
penguin3[3] = U+30F3 &#39;ン&#39;
penguin3[6] = U+30AE &#39;ギ&#39;
penguin3[9] = U+30F3 &#39;ン&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NFC と NFD が交換可能であることがわかると思う。&lt;/p&gt;

&lt;h2 id=&#34;3羽目の-ペンギン-と互換等価:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;3羽目の「ペンギン」と互換等価&lt;/h2&gt;

&lt;p&gt;さてここで3羽目の「ﾍﾟﾝｷﾞﾝ」に登場してもらおう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ﾍ：U+FF8D&lt;/li&gt;
&lt;li&gt;ﾟ：U+FF9F&lt;/li&gt;
&lt;li&gt;ﾝ：U+FF9D&lt;/li&gt;
&lt;li&gt;ｷ：U+FF77&lt;/li&gt;
&lt;li&gt;ﾞ：U+FF9E&lt;/li&gt;
&lt;li&gt;ﾝ：U+FF9D&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これはいわゆる「半角カナ」である。
半角カナの半濁点 U+FF9F および濁点 U+FF9E は結合文字の半濁点 U+309A および濁点 U+3099 と同等とみなされているが「ペ」や「ギ」に相当する半角カナの事前合成形は存在しないため NFC で事前合成形に正規化しようとしても&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;golang.org/x/text/unicode/norm&amp;quot;
)

func main() {
	penguin := &amp;quot;ﾍﾟﾝｷﾞﾝ&amp;quot;
	for pos, runeValue := range penguin {
		fmt.Printf(&amp;quot;penguin[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	penguin2 := string(norm.NFC.Bytes([]byte(penguin)))
	for pos, runeValue := range penguin2 {
		fmt.Printf(&amp;quot;penguin2[%d] = %#U\n&amp;quot;, pos, runeValue)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;penguin[0] = U+FF8D &#39;ﾍ&#39;
penguin[3] = U+FF9F &#39;ﾟ&#39;
penguin[6] = U+FF9D &#39;ﾝ&#39;
penguin[9] = U+FF77 &#39;ｷ&#39;
penguin[12] = U+FF9E &#39;ﾞ&#39;
penguin[15] = U+FF9D &#39;ﾝ&#39;
penguin2[0] = U+FF8D &#39;ﾍ&#39;
penguin2[3] = U+FF9F &#39;ﾟ&#39;
penguin2[6] = U+FF9D &#39;ﾝ&#39;
penguin2[9] = U+FF77 &#39;ｷ&#39;
penguin2[12] = U+FF9E &#39;ﾞ&#39;
penguin2[15] = U+FF9D &#39;ﾝ&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何も変わらないことが分かるだろう。
そもそも半角カナは「互換用文字（Compatibility Character）」として異なるコードポイントが割り当てられているため，このままでは3羽目の「ﾍﾟﾝｷﾞﾝ」が等価であることを示せない。&lt;/p&gt;

&lt;p&gt;このような場合は「ﾍﾟﾝｷﾞﾝ」と互換性のある別の文字列に正規化できるとよい。
これを「互換等価（compatibility equivalance）」と呼ぶ。
具体的には，事前合成形に正規化する NFKC（Normalization Form Compatibility Composition）と合成列に正規化する NFKD（Normalization Form Compatibility Decomposition）の2つがある。&lt;/p&gt;

&lt;p&gt;早速 &lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34; title=&#34;norm - GoDoc&#34;&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/a&gt; パッケージを使ってコードを書いてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;golang.org/x/text/unicode/norm&amp;quot;
)

func main() {
	penguin := &amp;quot;ﾍﾟﾝｷﾞﾝ&amp;quot;
	for pos, runeValue := range penguin {
		fmt.Printf(&amp;quot;penguin[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	penguin2 := string(norm.NFKC.Bytes([]byte(penguin)))
	for pos, runeValue := range penguin2 {
		fmt.Printf(&amp;quot;penguin2[%d] = %#U\n&amp;quot;, pos, runeValue)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;penguin[0] = U+FF8D &#39;ﾍ&#39;
penguin[3] = U+FF9F &#39;ﾟ&#39;
penguin[6] = U+FF9D &#39;ﾝ&#39;
penguin[9] = U+FF77 &#39;ｷ&#39;
penguin[12] = U+FF9E &#39;ﾞ&#39;
penguin[15] = U+FF9D &#39;ﾝ&#39;
penguin2[0] = U+30DA &#39;ペ&#39;
penguin2[3] = U+30F3 &#39;ン&#39;
penguin2[6] = U+30AE &#39;ギ&#39;
penguin2[9] = U+30F3 &#39;ン&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり， NFC で正規化した「ペンギン」と等価であることがわかる。&lt;/p&gt;

&lt;p&gt;互換等価による正規化は応用範囲が広い。
たとえば「㈱」（U+3231）は「(株)」（U+0028 + U+682A + U+0029）に変換される。
文字列検索の前に互換等価による正規化を行っておくことで処理がやりやすくなるというのはあるかもしれない。
ただし， NFC と NFD は交換可能だが（ただしオリジナル文字列が事前合成形と合成列とで混在している場合は元に戻せないが）， NFKC や NFKD で正規化した文字列を元に戻す方法はないので注意が必要である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:hw&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:hw&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;恐怖の-cjk-互換文字:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;恐怖の CJK 互換文字&lt;/h2&gt;

&lt;p&gt;正規等価については注意すべき点がある。
有名な「神」を例に挙げよう。
これを NFC / NFD で正規化する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;

	&amp;quot;golang.org/x/text/unicode/norm&amp;quot;
)

func main() {
	god := &amp;quot;神&amp;quot;
	for pos, runeValue := range god {
		fmt.Printf(&amp;quot;god[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	god2 := string(norm.NFC.Bytes([]byte(god)))
	for pos, runeValue := range god2 {
		fmt.Printf(&amp;quot;god2[%d] = %#U\n&amp;quot;, pos, runeValue)
	}

	god3 := string(norm.NFD.Bytes([]byte(god)))
	for pos, runeValue := range god3 {
		fmt.Printf(&amp;quot;god3[%d] = %#U\n&amp;quot;, pos, runeValue)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;god[0] = U+FA19 &#39;神&#39;
god2[0] = U+795E &#39;神&#39;
god3[0] = U+795E &#39;神&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり，NFC でも NFD でも違う文字になってしまった。
ちなみに「神」から「神」へ正規化する方法はない。
困ったね。&lt;/p&gt;

&lt;p&gt;実は「神」は「CJK 互換文字」と呼ばれるグループに属し，「神」とは異体字の関係にある。
故に「神」を「神」に正規化してしまったのである。&lt;/p&gt;

&lt;p&gt;これは明らかに仕様ミスである。
「神」と「神」のような異体字の関係は本来なら正規等価ではなく互換等価であるべきだからだ。&lt;/p&gt;

&lt;p&gt;&amp;hellip;やっぱり Unicode はクソ仕様だ。&lt;/p&gt;

&lt;p&gt;ただ，これが実際の場面で問題になることは少ないと思われる。
なぜなら，正規化を行うのは「2つの文字列が等価であるか？」を調べるための手段にすぎないからだ。
普通はね。&lt;/p&gt;

&lt;p&gt;ところが，普通でないことをする馬鹿がいるのである。&lt;/p&gt;

&lt;h3 id=&#34;独自路線に走る-apple:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;独自路線に走る Apple&lt;/h3&gt;

&lt;p&gt;Apple の OS X （iOS も？）のファイルシステムである HFS+ はファイル名を NFD 相当に正規化するという恐ろしい仕様になっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:fs&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:fs&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。
しかしそれでは先ほどの例のように異体字を別の文字に変えられてしまうため困ったことになってしまう。&lt;/p&gt;

&lt;p&gt;そこで Apple は CJK 互換文字を含むいくつかの文字を正規化の対象から外すという蛮行に出た。
俗に “NFD-mac” などと呼ばれる独自路線に走ってしまったわけだ。
クソの上塗りである。&lt;/p&gt;

&lt;p&gt;これにより様々な（特にマルチプラットフォームな）アプリケーションが多大なる迷惑を被ることになるが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:751a772bc6e9a12c63d6df9ab1f95927:mac&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:751a772bc6e9a12c63d6df9ab1f95927:mac&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;，深くはツッコむまい。&lt;/p&gt;

&lt;h2 id=&#34;unicode-正規化に関するまとめ:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;Unicode 正規化に関するまとめ&lt;/h2&gt;

&lt;p&gt;以上， Unicode 正規化の4つの方式をまとめると以下のようになる。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Composing&lt;/th&gt;
    &lt;th&gt;Decomposing&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th style=&#34;text-align:right;&#34;&gt;Canonical equivalence&lt;/th&gt;
    &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34;&gt;norm&lt;/a&gt;.NFC&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34;&gt;norm&lt;/a&gt;.NFD&lt;/code&gt;&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th style=&#34;text-align:right;&#34;&gt;Compatibility equivalence&lt;/th&gt;
    &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34;&gt;norm&lt;/a&gt;.NFKC&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34;&gt;norm&lt;/a&gt;.NFKD&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;figcaption&gt;&lt;a href=&#34;https://blog.golang.org/normalization&#34;&gt;via “Text normalization in Go”&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;https://godoc.org/golang.org/x/text/unicode/norm&#34; title=&#34;norm - GoDoc&#34;&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/a&gt; パッケージでは “NFD-mac” なるローカル仕様には対応していないので，必要なら自作する必要がある。&lt;/p&gt;

&lt;p&gt;Unicode 文字列の等価属性を調べる際には是非参考にどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:751a772bc6e9a12c63d6df9ab1f95927&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/www/column/ogata/sp24.htm&#34;&gt;特別編24 JIS X 0213の改正は、文字コードにどんな未来をもたらすか（7）　番外編：改正JIS X 0213とUnicodeの等価属性／正規化について（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/www/column/ogata/sp25.htm&#34;&gt;特別編24 JIS X 0213の改正は、文字コードにどんな未来をもたらすか（7）　番外編：改正JIS X 0213とUnicodeの等価属性／正規化について（下）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nomenclator.la.coocan.jp/unicode/normalization.htm&#34;&gt;Unicode正規化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/normalization&#34;&gt;Text normalization in Go - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masakielastic/items/01a4fb691c572dd71a19&#34;&gt;Go で UTF-8 の文字列を扱う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.albert2005.co.jp/blog/2014/11/21/mco-normalize/&#34;&gt;文字コード地獄秘話 第3話：後戻りの効かないUnicode正規化 - ALBERT Engineer Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cpplover.blogspot.jp/2015/01/blog-post_14.html&#34;&gt;本の虫: Linus Torvalds、HFS+に激怒&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:cs&#34;&gt;結合文字はひとつの基底文字に対して複数付加される場合もある。しかもこの場合に結合文字同士の順序は不定である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:cs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:ccs&#34;&gt;正しくは「符号化文字集合（coded character set）」である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:ccs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:ecd&#34;&gt;これは UTF-8 などの「文字エンコーディング」とは異なるものだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:ecd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:jis&#34;&gt;日本の JIS 規格にも「歴史的経緯」による重複符号化がある。言わずと知れた「半角」「全角」文字である。異体字も一種の重複符号化と言える。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:jis&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:hw&#34;&gt;単に全角・半角変換ができればいいのなら &lt;code&gt;golang.org/x/text/&lt;/code&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/text/width&#34; title=&#34;width - GoDoc&#34;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; パッケージをお勧めする。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:hw&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:fs&#34;&gt;ちなみに Windows のファイルシステムはフォルダ・ファイルの名前を正規化するとかいうアホなことはしない。事前合成形も合成列も受け入れる。見かけ同じ名前のフォルダ・ファイルが複数できる可能性はあるが，それはそれ。多分，ほとんどの OS のファイルシステムは名前の正規化なんてしてないはず。この HFS+ による Unicode 正規化のおかげで他プラットフォームはかなりの迷惑を被ることになる。たとえば複数のプラットフォームをまたぐファイル交換（例えば Linux → OS X → Windows みたいな経路）を行った場合に OS X を経由した途端にフォルダ・ファイル名を書き換えられてしまうのだ。しかもユーザやアプリケーションは基本的に干渉できない。迷惑千万な話である。もっとも Windows ユーザは Windows ファイルシステムのダメさ加減が身に沁みてるので他所を嗤えないけど（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:fs&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:751a772bc6e9a12c63d6df9ab1f95927:mac&#34;&gt;たとえば Linus Torvalds は HFS+ に起因する git の脆弱性問題で&lt;a href=&#34;http://cpplover.blogspot.jp/2015/01/blog-post_14.html&#34;&gt;激怒&lt;/a&gt;している。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:751a772bc6e9a12c63d6df9ab1f95927:mac&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>二次的著作物と CC Licenses - cc-licenses</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/cc-licenses/04-derivative-works/" />
		<id>tag:text.Baldanders.info,2016-01-26:/cc-licenses/04-derivative-works/</id>
		<published>2016-01-26T20:29:34+09:00</published>
		<updated>2016-01-30T19:36:45+09:00</updated>
		<summary>CC Licenses では「改変禁止」条件がなければ「翻案物を作成、複製および共有すること」を許諾する。また翻案物を受け取ったユーザは原著作者の許諾を（提示されている CC Licenses の条件に従って）自動的に得る。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="cc-licenses" label="cc-licenses" scheme="http://text.baldanders.info/cc-licenses" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は「二次的著作物」について。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#about:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;「二次的著作物」とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ccl:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;CC Licenses による改変の許諾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cl:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;Copyleft のすすめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parody:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;パロディについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#niji:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;二次創作のみを許可したい&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;about:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;「二次的著作物」とは&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt;第2条では「二次的著作物」は以下のように定義されている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;著作物を翻訳し、編曲し、若しくは変形し、又は脚色し、映画化し、その他翻案することにより創作した著作物をいう。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34;&gt;著作権法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「創作」的であることが重要で，「既存の著作物の修正増減に創作性が認められるが、原著作物の表現形式の本質的な特徴が失われるに至っていない場合&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:ak&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:ak&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」に二次的著作物と見なされる。
たとえばフォーマット変換や機械翻訳（点字などへの置き換え）などは「逐語的コピー」と呼ばれ複製と見なされる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:cpy&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:cpy&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;具体的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;翻訳&lt;/li&gt;
&lt;li&gt;編曲&lt;/li&gt;
&lt;li&gt;変形（美術、写真、建築物、地図・図形の著作物で用いられることが多い）&lt;/li&gt;
&lt;li&gt;脚色&lt;/li&gt;
&lt;li&gt;映画化&lt;/li&gt;
&lt;li&gt;翻案（上述した以外の全て。コミカライズやノベライズ，文章の要約，あるいはプログラムのバージョンアップや他言語への移植なども含まれる）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった感じに分類されるが，一絡げに「翻案」または「改変」と表記されることが多い。
&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では二次的著作物に相当するものを「翻案物（Adapted Material）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:m&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:m&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;」としている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;&lt;strong&gt;「翻案物」&lt;/strong&gt;とは、著作権およびそれに類する権利の対象となり、ライセンス対象物について許諾者が有する著作権およびそれに類する権利に基づく許諾が必要とされるような形で、翻訳され、改変され、編集され、変形され、またはその他の方法により変更されたマテリアルで、ライセンス対象物から派生したか、またはライセンス対象物に基づくものを意味します。本パブリック・ライセンスにおいては、ライセンス対象物が音楽作品、実演または録音物で、これらが動画と同期させられる場合には、翻案物が常に作成されることになります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ (Creative Commons) — 表示-継承 4.0 国際&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;著作（権）者は自身の著作物に対して&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;二次的著作物の作成に関する権利（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第27条）&lt;/li&gt;
&lt;li&gt;二次的著作物の利用に関する原著作者の権利（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第28条）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2つの権利を持っている。
ポイントは二次的著作物の原著作者（元の著作物の著作者）も二次的著作物に対して一連の著作財産権を持っていることである。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;二次的著作物の原著作物の著作者は、当該二次的著作物の利用に関し、この款に規定する権利で当該二次的著作物の著作者が有するものと同一の種類の権利を専有する。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34;&gt;著作権法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;つまり，ユーザが二次的著作物を利用したいと考えるなら，二次的著作物の著作（権）者と原著作（権）者の双方から許可を得る必要がある。&lt;/p&gt;

&lt;h2 id=&#34;ccl:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;CC Licenses による改変の許諾&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では「改変禁止 &lt;i class=&#34;cc cc-nd&#34;&gt;&lt;/i&gt;」条件がなければ「翻案物を作成、複製および共有すること」を許諾する。
また翻案物を受け取ったユーザは原著作者の許諾を（提示されている &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; の条件に従って）自動的に得る&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:sl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:sl&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;あなたから翻案物を受領した者は、あなたが適用した翻案者のライセンスの条件にしたがった翻案物におけるライセンスされた権利を行使できるという申出を自動的に許諾者から受け取ります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ (Creative Commons) — 表示-継承 4.0 国際&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;つまり，原マテリアルとその翻案物の双方が &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; で許諾されているなら，双方のライセンス条件に従って翻案物も利用することができる。&lt;/p&gt;

&lt;p&gt;なお &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では「表示 &lt;i class=&#34;cc cc-by&#34;&gt;&lt;/i&gt;」条件が必須になっているため，翻案物およびその複製や翻案物に対しても原著作者のクレジット表示が必要になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:attr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:attr&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;cl:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;Copyleft のすすめ&lt;/h2&gt;

&lt;p&gt;二次的著作物については原著作物の許諾条件と二次的著作物の許諾条件の両方に従う必要がある。
原著作物が &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; で許諾されている場合でも，その翻案物が &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; で許諾されていない場合は利用条件が著しく制限される場合がある（まぁ原著作物から派生させる手もあるのだが）。
また原著作物とその翻案物の双方が &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; で許諾されているとしても両者の条件が異なれば，やはりそれも制限になってしまう。&lt;/p&gt;

&lt;p&gt;もし翻案物も含めてマテリアルを広く共有したいと望むのであれば「継承 &lt;i class=&#34;cc cc-sa&#34;&gt;&lt;/i&gt;」条件を付加することをお勧めする。
「継承 &lt;i class=&#34;cc cc-sa&#34;&gt;&lt;/i&gt;」条件が付加されている場合は，翻案物に対しても同等のライセンス&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:cmp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:cmp&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; を付加することが求められる。&lt;/p&gt;

&lt;p&gt;このようなライセンスの仕組みは &lt;a href=&#34;http://www.gnu.org/licenses/copyleft.html&#34; title=&#34;コピーレフトって何? - GNUプロジェクト - フリーソフトウェアファウンデーション&#34;&gt;Copyleft&lt;/a&gt; と呼ばれている。
&lt;a href=&#34;http://www.gnu.org/licenses/copyleft.html&#34; title=&#34;コピーレフトって何? - GNUプロジェクト - フリーソフトウェアファウンデーション&#34;&gt;Copyleft&lt;/a&gt; の起源は &lt;a href=&#34;https://www.gnu.org/copyleft/gpl.html&#34;&gt;GNU GPL（General Public License）&lt;/a&gt; であるが， &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; においても「継承 &lt;i class=&#34;cc cc-sa&#34;&gt;&lt;/i&gt;」条件よって &lt;a href=&#34;http://www.gnu.org/licenses/copyleft.html&#34; title=&#34;コピーレフトって何? - GNUプロジェクト - フリーソフトウェアファウンデーション&#34;&gt;Copyleft&lt;/a&gt; もしくはそれに近いライセンスを構成できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:cl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:cl&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; で「継承 &lt;i class=&#34;cc cc-sa&#34;&gt;&lt;/i&gt;」条件が付くのは以下の2つである。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;th class=&#39;left&#39;&gt;&lt;i class=&#34;cc cc-by-sa cc-2x&#34;&gt;&lt;/i&gt;   &lt;/th&gt;&lt;th class=&#39;left&#39;&gt;表示-継承           &lt;/th&gt;&lt;td&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;コモンズ証&lt;/a&gt;（&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/deed.ja&#34;&gt;日本語&lt;/a&gt;） &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode&#34;&gt;法的条項&lt;/a&gt;（&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;日本語&lt;/a&gt;） &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/rdf&#34;&gt;メタデータ&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class=&#39;left&#39;&gt;&lt;i class=&#34;cc cc-by-nc-sa cc-2x&#34;&gt;&lt;/i&gt;&lt;/th&gt;&lt;th class=&#39;left&#39;&gt;表示-非営利-継承    &lt;/th&gt;&lt;td&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;コモンズ証&lt;/a&gt;（&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.ja&#34;&gt;日本語&lt;/a&gt;） &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode&#34;&gt;法的条項&lt;/a&gt;（&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode.ja&#34;&gt;日本語&lt;/a&gt;） &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/rdf&#34;&gt;メタデータ&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption&gt;Creative Commons Licenses Version 4.0 International&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/copyleft.html&#34; title=&#34;コピーレフトって何? - GNUプロジェクト - フリーソフトウェアファウンデーション&#34;&gt;Copyleft&lt;/a&gt; はプログラミングの世界でも「ウイルス的」と揶揄されることもあるが，共有を維持するには必要な仕掛けだと思う。
&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; の使われ方を見ても，&lt;a href=&#34;https://stateof.creativecommons.org/2015/&#34;&gt;2015年時点&lt;/a&gt;では「&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; title=&#34;Creative Commons — Attribution-ShareAlike 4.0 International — CC BY-SA 4.0&#34;&gt;表示-継承&lt;/a&gt;」条件が37%で最も多い。
この機会に検討してみてはいかがだろうか。&lt;/p&gt;

&lt;p&gt;なお &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; は&lt;a href=&#34;http://text.baldanders.info/cc-licenses/01-copyright/#fair-use:c0a4c5753ec2f9b59ccc6a19f369d87d&#34;&gt;「公正な利用（fair use）」や「著作権の制限」&lt;/a&gt;として利用が認められていることに対しては効力が及ばないため， &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; の条件に関わらず利用可能である。&lt;/p&gt;

&lt;h2 id=&#34;parody:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;パロディについて&lt;/h2&gt;

&lt;p&gt;海外では，パロディ・風刺について「公正な利用（fair use）」としてある程度認められている国もあるが，日本ではパロディに関する規定そのものがない。
そのため現状では「引用」か「翻案」かで線引されることになる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:pd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:pd&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;商業作品の場合は（防衛のために）あらかじめオリジナル作品の著作（権）者から許可を得ていることもあるようだが，そうでない場合は特に悪質なものでない限り「黙認」されているのが現状のようだ。
しかし，いったん訴訟になった場合，パロディが「引用」として認められるのはかなり難しいと思われる。&lt;/p&gt;

&lt;h2 id=&#34;niji:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;二次創作のみを許可したい&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では，どの条件の組み合わせでもマテリアルの複製や配布を（条件に従う限りは）制限しない。
これは &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; を適用したマテリアルやその翻案物がインターネット上に置かれることを前提にしたものだからである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:in&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:in&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;。
しかしインターネットに乗らないマテリアル（紙の書籍， CD や DVD/BD でパッケージされた楽曲や映像など）は旧来の流通経路でコントロールする必要があるため &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; とは馴染まない側面があるのも確かだ。&lt;/p&gt;

&lt;p&gt;「複製・配布は許可できないが二次創作は許可したい」という需要に対応するため，かつて &lt;a href=&#34;https://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; では翻案のみを許可する「サンプリング・ライセンス（sampling license）」の作成が試みられた。
ただ，この試みはうまくいかなかったようで，現在サンプリング・ライセンスは retire している。&lt;/p&gt;

&lt;p&gt;少なくとも &lt;a href=&#34;https://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; では翻案のみを許可するライセンス・ツールは存在しない。
このような要件がある場合は独自にライセンスを構築するしかない。&lt;/p&gt;

&lt;h3 id=&#34;同人マーク-ライセンス:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;同人マーク・ライセンス&lt;/h3&gt;

&lt;p&gt;「二次創作のみを許可したい」という要件に対して，日本での試みとして「&lt;a href=&#34;http://commonsphere.jp/doujin-license-1/&#34; title=&#34;同人マーク・ライセンス 1.0 | commonsphere&#34;&gt;同人マーク・ライセンス&lt;/a&gt;」がある。
これは日本の「同人市場」という特殊商慣行に特化したライセンスで，原著作物の複製・配布を禁止する代わりに，二次的著作物の作成とその複製・配布を許可している。
ただしいくつか条件があって&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;許諾者は、利用者に対し、本作品について、全世界において、本作品の著作権の存続期間中、本ライセンスの各条項に従い、利用者自身が、二次創作同人誌を作成し、同人誌即売会において配布すること（有償および無償の場合双方を含みます。また、インターネット配信やCD、DVD等のデジタルメディアでの配布などのデジタルデータによる配布は除きます。以下同じ）を非独占的に許諾します。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://commonsphere.jp/doujin-license-1/&#34;&gt;同人マーク・ライセンス 1.0&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるとおり，媒体は「二次創作同人誌」に限られ，配布経路も「同人誌即売会」に限られる。
たとえば，同人誌即売会に出品しない（本来的な意味での）二次創作同人誌は原著作物に「&lt;a href=&#34;http://commonsphere.jp/doujin-license-1/&#34; title=&#34;同人マーク・ライセンス 1.0 | commonsphere&#34;&gt;同人マーク・ライセンス&lt;/a&gt;」があろうと（著作（権）者から別途許諾がない限り） NG である。&lt;/p&gt;

&lt;p&gt;最近（2013年）になって「&lt;a href=&#34;http://commonsphere.jp/doujin-license-1/&#34; title=&#34;同人マーク・ライセンス 1.0 | commonsphere&#34;&gt;同人マーク・ライセンス&lt;/a&gt;」が提唱された背景には「環太平洋パートナーシップ（Trans-Pacific Partnership; TPP）協定」の知財分野における「著作権の非親告罪化」が挙げられる。
もし「著作権の非親告罪化」が日本で成立すれば同人市場は壊滅状態になると予想されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:mkt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:mkt&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;。
いわばこれは作家たちによる自己防衛的ライセンスであると言える。&lt;/p&gt;

&lt;p&gt;同人市場に限らず日本では事後承諾的に著作物を利用する慣習があり（たとえば&lt;a href=&#34;#parody:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;パロディ&lt;/a&gt;や勝手翻訳など），こういったものも軒並み「著作権の非親告罪化」に引っかかることになるだろう。
しかもこれに（同じく TPP で決まった）「法定賠償制度」も加われば巨額の賠償金を払わされる可能性がある。
これにより日本においても「&lt;a href=&#34;https://www.eff.org/issues/copyright-trolls&#34;&gt;著作権トロル&lt;/a&gt;」が台頭することになる。
むしろこちらの方が深刻である。
これについて文化庁は&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;著作権等侵害罪の一部非親告罪化については、TPP協定において非親告罪化が義務づけられている範囲及びその趣旨を踏まえつつ、我が国の二次創作文化への影響に十分配慮し、適切に非親告罪の範囲を定めること&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20151111_730105.html&#34;&gt;TPPで“違法ダウンロード”適用拡大も、文化庁の審議会で再び検討か -INTERNET Watch&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;などとしているが，翻案は「二次創作文化」だけではなく日常生活の広い範囲に関わる「活動」である。
「&lt;a href=&#34;http://text.baldanders.info/cc-licenses/01-copyright/&#34;&gt;著作権と著作権法&lt;/a&gt;」でも書いたが，ユーザを無視した知財政策を続けていると本当に「ガラパゴス」になっちゃうよ。&lt;/p&gt;

&lt;h2 id=&#34;参考になる-かもしれない-web-ページ:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;参考になる（かもしれない） Web ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://onm-tm.jp/news/%EF%BD%91%EF%BC%97%EF%BC%8E%E3%82%AD%E3%83%A3%E3%83%A9%E3%82%AF%E3%82%BF%E3%83%BC%E3%81%AE%E8%91%97%E4%BD%9C%E6%A8%A9%E6%B3%95%E4%B8%8A%E3%81%AE%E5%8F%96%E6%89%B1%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84&#34;&gt;キャラクターの著作権法上の取扱いについて | 大島・西村・宮永商標特許事務所&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://otapol.jp/2014/09/post-1542.html&#34;&gt;スクウェア・エニックスの著作権侵害の可能性はグレー!?　『ハイスコアガール』問題について福井健策弁護士に話をうかがってみた｜おたぽる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.law.nihon-u.ac.jp/publication/pdf/chizai/4/04.pdf&#34;&gt;米国著作権法におけるパロディとフェア・ユース/差止め請求 −パロディに関する裁判例と，小説の続編出版が問題とされた最近の事例から−&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.bunka.go.jp/seisaku/chosakuken/seminar/contents_symposium/08/pdf/akamatsu.pdf&#34;&gt;二次創作における「意思表示システム」の提唱&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yamdas.org/column/technique/cctrans.html&#34;&gt;クリエイティブ・コモンズ・ライセンスのブログ翻訳のススメ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.creativecommons.org/2015/10/08/cc-by-sa-4-0-now-one-way-compatible-with-gplv3/&#34;&gt;CC BY-SA 4.0 now one-way compatible with GPLv3 - Creative Commons Blog - Creative Commons&lt;/a&gt; （&lt;a href=&#34;http://creativecommons.jp/2016/01/25/cc-by-sa-%EF%BC%88%E8%A1%A8%E7%A4%BA-%E7%B6%99%E6%89%BF%EF%BC%89-4-0%E3%81%8B%E3%82%89gpl-v3%E3%81%B8%E3%81%AE%E4%B8%80%E6%96%B9%E5%90%91%E3%81%AE%E4%BA%92%E6%8F%9B%E3%81%8C%E5%AE%9F%E7%8F%BE/&#34;&gt;日本語訳&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stateof.creativecommons.org/2015/&#34;&gt;Creative Commons — State of the Commons 2015 — It&amp;rsquo;s been a remarkable year, most notably for the more than 1.1 billion works under one of the CC licenses, CC0, or the public domain mark.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20151111_730105.html&#34;&gt;TPPで“違法ダウンロード”適用拡大も、文化庁の審議会で再び検討か -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/campaigns/trans-pacific-partnership-would-harm-user-rights-and-the-commons/&#34;&gt;Trans-Pacific Partnership Would Harm User Rights and the Commons - Creative Commons - Creative Commons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:ak&#34;&gt;&lt;span&gt;&lt;a href=&#34;http://www.courts.go.jp/app/files/hanrei_jp/827/013827_hanrei.pdf&#34;&gt;「アンコウ行灯事件」判決文&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;より。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:ak&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:cpy&#34;&gt;他にも漫画のキャラクタなどを似せて描いた場合も，翻案ではなく，複製と見なされる場合がある。文脈とか，どの程度似てるかとかにもよるだろうけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:cpy&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:m&#34;&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; は著作隣接権で保護されるものも含む形で許諾しているためこのような表現になる。詳しくは「&lt;a href=&#34;http://creativecommons.jp/2015/07/15/cc%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9%E3%83%BB%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B34-0-%E6%97%A5%E6%9C%AC%E8%AA%9E%E7%89%88%E3%81%AE%E5%85%AC%E9%96%8B/&#34;&gt;CCライセンス・バージョン4.0 日本語版の公開 | クリエイティブ・コモンズ・ジャパン&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:m&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:sl&#34;&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; ではサブライセンスを禁止しているため，翻案物に対する許諾の一方を直に原著作者から得る，という形になっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:sl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:attr&#34;&gt;クレジット表示については&lt;a href=&#34;http://text.baldanders.info/cc-licenses/02-creative-commons-licenses/#attribution:3c09c25a3f426190f3d3ae33caa0c3dc&#34;&gt;前に書いた記事&lt;/a&gt;を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:attr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:cmp&#34;&gt;「同等のライセンス」として同じ条件の &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; （他バージョンを含む）が挙げられる。また「&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; title=&#34;Creative Commons — Attribution-ShareAlike 4.0 International — CC BY-SA 4.0&#34;&gt;表示-継承&lt;/a&gt;」については &lt;a href=&#34;http://artlibre.org/licence/lal/en/&#34;&gt;Free Art License&lt;/a&gt; 1.3 や &lt;a href=&#34;https://www.gnu.org/copyleft/gpl.html&#34;&gt;GNU GPL&lt;/a&gt;v3 も互換性のあるライセンスとして認められている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:cmp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:cl&#34;&gt;ただし厳密に &lt;a href=&#34;http://www.gnu.org/licenses/copyleft.html&#34; title=&#34;コピーレフトって何? - GNUプロジェクト - フリーソフトウェアファウンデーション&#34;&gt;Copyleft&lt;/a&gt; と言えるのは「&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; title=&#34;Creative Commons — Attribution-ShareAlike 4.0 International — CC BY-SA 4.0&#34;&gt;表示-継承&lt;/a&gt;」条件のみである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:cl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:pd&#34;&gt;パロディはいわゆる「パクり」（一般的には「剽窃」）とは異なる。「替え歌」や短歌の「本歌取り」もパロディの一種と考えられる。米国における parody と fair use の関係については「&lt;span&gt;&lt;a href=&#34;http://www.law.nihon-u.ac.jp/publication/pdf/chizai/4/04.pdf&#34;&gt;米国著作権法におけるパロディとフェア・ユース/差止め請求 −パロディに関する裁判例と，小説の続編出版が問題とされた最近の事例から−&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;」が参考になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:pd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:in&#34;&gt;そもそもインターネットはコピーの連鎖で成り立っているものだし，無理に制限しようとすればユーザ側の「使用」や「公正な利用」まで侵害しかねない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:in&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:mkt&#34;&gt;さる調査によると&lt;a href=&#34;http://www.gamespark.jp/article/2016/01/19/63159.html&#34;&gt;2015年の同人誌市場は757億円規模&lt;/a&gt;だそうだ。そりゃあ狙われるよねぇ（笑） まぁ同人市場は同人誌だけじゃないし同人誌と言ってもいろいろあるので，二次創作が実際にどの程度かは分からないけど数十億から数百億の規模でもおかしくないだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:mkt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>[security] Go 1.5.3 is released - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/security-update-go-1_5_3-is-released/" />
		<id>tag:text.Baldanders.info,2016-01-24:/remark/2016/01/security-update-go-1_5_3-is-released/</id>
		<published>2016-01-24T15:24:23+09:00</published>
		<updated>2016-01-24T16:29:20+09:00</updated>
		<summary>リスクとしては大したことはないですが， Web アプリケーションまたは TLS の実装を Go 言語で行っている方は要更新です。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;2週間前の話ですみません。
1月14日に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラ 1.5.3 が出ています。
メインは &lt;a href=&#34;https://golang.org/pkg/math/big/&#34; title=&#34;big - The Go Programming Language&#34;&gt;&lt;code&gt;math/big&lt;/code&gt;&lt;/a&gt; パッケージの不具合修正です。&lt;/p&gt;

&lt;p&gt;リスクとしては大したことはないですが， Web アプリケーションまたは TLS の実装を &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で行っている方は要更新です。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;This issue can affect RSA computations in crypto/rsa, which is used by crypto/tls. TLS servers on 32-bit systems could plausibly leak their RSA private key due to this issue. Other protocol implementations that create many RSA signatures could also be impacted in the same way.&lt;br&gt;
Specifically, incorrect results in one part of the RSA Chinese Remainder computation can cause the result to be incorrect in such a way that it leaks one of the primes. While RSA blinding should prevent an attacker from crafting specific inputs that trigger the bug, on 32-bit systems the bug can be expected to occur at random around one in 2^26 times. Thus collecting around 64 million signatures (of known data) from an affected server should be enough to extract the private key used.&lt;br&gt;
On 64-bit systems, the frequency of the bug is so low (less than one in 2^50) that it would be very difficult to exploit. Nonetheless, everyone is strongly encouraged to upgrade.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/MEATuOi_ei4&#34;&gt;[security] Go 1.5.3 is released - Google グループ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;cve-2015-8618-carry-propagation-in-int-exp-montgomery-code-in-math-big-library:51e51d81c7827f7f2f9459e4211dec84&#34;&gt;CVE-2015-8618 Carry propagation in Int.Exp Montgomery code in math/big library&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CVSSv2 基本評価値 2.6 (&lt;code&gt;AV:N/AC:H/Au:N/C:P/I:N/A:N&lt;/code&gt;)&lt;/strong&gt;
（&lt;a href=&#34;https://access.redhat.com/security/cve/cve-2015-8618&#34;&gt;Redhat による評価&lt;/a&gt;）&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃前の認証要否（Au）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： Planet Nine - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/23-stories/" />
		<id>tag:text.Baldanders.info,2016-01-23:/remark/2016/01/23-stories/</id>
		<published>2016-01-23T13:54:34+09:00</published>
		<updated>2016-01-30T15:44:05+09:00</updated>
		<summary>Planet Nine / 次期X線国際天文衛星 ASTRO-H は 2月12日に打ち上げ予定 / 2^74207281-1 is Prime! / いまのところ「秀丸」への依存度は1割程度 / Bitcoin は失敗したか / TeX Wiki が移転しとるがな / 「『いま読むべき本』３冊」</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#planet9:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Planet Nine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#astro-h:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;次期X線国際天文衛星 ASTRO-H は 2月12日に打ち上げ予定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prime:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;2^74207281-1 is Prime!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hidemaru:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;いまのところ「秀丸」への依存度は1割程度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bitcoin:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Bitcoin は失敗したか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tex:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;TeX Wiki が移転しとるがな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#books:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;「『いま読むべき本』３冊」&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;planet9:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Planet Nine&lt;/h2&gt;

&lt;p&gt;冥王星が9番目の惑星だった頃からこの手の話は尽きないが，どうも今回はマジらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.caltech.edu/news/caltech-researchers-find-evidence-real-ninth-planet-49523&#34;&gt;Caltech Researchers Find Evidence of a Real Ninth Planet | Caltech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iopscience.iop.org/article/10.3847/0004-6256/151/2/22/pdf&#34;&gt;EVIDENCE FOR A DISTANT GIANT PLANET IN THE SOLAR SYSTEM - pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nature.com/news/evidence-grows-for-giant-planet-on-fringes-of-solar-system-1.19182&#34;&gt;Evidence grows for giant planet on fringes of Solar System : Nature News &amp;amp; Comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seti.org/seti-institute/planet-nine-are-we-not-that-special&#34;&gt;Planet Nine: Are We Not That Special? | SETI Institute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/01/20160121_02.html&#34;&gt;2016年1月21日ニュース「太陽系に9番目の惑星か 米チームが予測」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/01/21planet9/index-j.shtml&#34;&gt;シミュレーションで推測、太陽系第9惑星存在の可能性 - アストロアーツ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/030201/2016_01_21_planet-nine.html&#34;&gt;太陽系に「第9惑星」存在か　米天文学者らが論文発表 | sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/01/21/20160120astronomers-find-evidence-of-a-ninth-planet/&#34;&gt;9番目の惑星の存在を示す証拠が発見された | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japanese.engadget.com/2016/01/25/9/&#34;&gt;「見えない太陽系第9惑星」は本当に発見できる？何を使って、どう見つける？ - Engadget Japanese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://universesandbox.com/blog/2016/01/alpha-18-2-planet-9/&#34;&gt;Alpha 18.2 | Planet Nine | Now Available « Universe Sandbox | blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実際に発見されたわけではなく，いわゆる「海王星以遠天体（Trans-Neptunian Object; TNO または Edgeworth-Kuiper Belt Object; EKBO）」の軌道の偏りからの推測らしい。
よくある与太話ではなく，割と確からしい話のようだ。&lt;/p&gt;

&lt;p&gt;こういう話を聞くといつも思うが，子供のころ聞かされていた「太陽系」のイメージが実は太陽のほんの近傍のものに過ぎないことに気付かされる。
「水金地火木&amp;hellip;」などと受験用の念仏を唱えている場合ではないのですよ。&lt;/p&gt;

&lt;h2 id=&#34;astro-h:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;次期X線国際天文衛星 ASTRO-H は 2月12日に打ち上げ予定&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://astro-h.isas.jaxa.jp/&#34;&gt;ASTRO-H&lt;/a&gt; て広島大学の CORE-U（極限宇宙研究拠点）も参画してるのか。
母校のことなのに全然知らなかったよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://core-u.hiroshima-u.ac.jp/blog/2016/01/22/x%E7%B7%9A%E5%A4%A9%E6%96%87%E8%A1%9B%E6%98%9F%E3%80%8Castro-h%E3%80%8D2%E6%9C%8812%E6%97%A5%E6%89%93%E3%81%A1%E4%B8%8A%E3%81%92%E3%81%B8/&#34;&gt;X線天文衛星「ASTRO-H」2月12日打ち上げへ広島大学極限宇宙研究拠点 CORE-U&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;prime:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;2^74207281-1 is Prime!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mersenne.org/primes/?press=M74207281&#34;&gt;Mersenne Prime Discovery - 2^74207281-1 is Prime!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/107/1107594/&#34;&gt;ASCII.jp：「新たな世界最大の素数」昨年9月に発見&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/01/22/discover-your-own-prime-number/&#34;&gt;「史上最大の素数」、更新される « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mersenne.org/primes/&#34;&gt;GIMPS (Great Internet Mersenne Prime Search)&lt;/a&gt; プロジェクトによる分散コンピューティングを使った素数探索で新たなメルセンヌ素数 $2^{74,207,281}-1$ が見つかったようだ。&lt;/p&gt;

&lt;p&gt;「メルセンヌ素数」というのは $M_p = 2^p-1$ で表されるメルセンヌ数 $M_p$ のうち素数であるものを指す。
$M_p$ が素数なら $p$ も素数であるという面白い性質がある（逆は成り立たない）。
また $M_p = 2^p-1$ が素数なら $2^{p-1}(2^p-1)$ は完全数&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; になる。&lt;/p&gt;

&lt;p&gt;メルセンヌ数に対しては効率的な素数判定法が知られており分散コンピューティング向きの題材である。&lt;/p&gt;

&lt;h3 id=&#34;参考:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mailsrv.nara-edu.ac.jp/~asait/prime.htm&#34;&gt;巨大素数と計算機&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hidemaru:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;いまのところ「秀丸」への依存度は1割程度&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20160119/hidemaru&#34;&gt;WindowsがMacより優れているのは秀丸エディタが動くことだけ（暴論） - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あー，わかるわかる。
私もかなりの「&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;依存症」なので（笑）&lt;/p&gt;

&lt;p&gt;その「&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;依存症」から脱却すべく &lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM に乗り換え中&lt;/a&gt;だが，今のところ9割くらいは &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で賄えている。
とはいえ，私はコード書きで文章書きではない。
文章を大量に書く人に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; がいいかどうかはなんとも言えない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の欠点は大きく2つ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;起動が遅く，全体的にもっさりしている&lt;/li&gt;
&lt;li&gt;大きなテキストを読み込めない（または読み込みに非常に時間がかかる）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;たかだか20万行程度のテキスト（ぶっちゃけ CSV なんだけど）を読み込むのにフリーズしないで欲しい。
起動が遅いのは仕方がないと諦めた。
秀丸みたいに常駐モードがあればいいんだけどねぇ。
まぁ &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を立ち上げっぱなしにしておけばいいか。&lt;/p&gt;

&lt;p&gt;この辺は多分 &lt;a href=&#34;http://electron.atom.io/&#34;&gt;Electron&lt;/a&gt; の限界なんだろう。
そういや&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;も登場したての頃は動作がもっさりしていて Vz と併用してたっけ（Vz は DOS 窓から使ってた）。
気長に性能向上を待つとしよう。&lt;/p&gt;

&lt;p&gt;テキストエディタは製品云々より手に馴染むかどうかが絶対的に重要で，そのため必然的に hackable にならざるを得ない。
故に宗教論争も起こりやすい。
それに人は慣れ親しんだ手順や workflow からは簡単に抜け出せないものである。
私は emacs なんか触りたくもないし， vi/vim は若い頃のトラウマがフラッシュバックするので可能なかぎり使いたくない。&lt;/p&gt;

&lt;p&gt;そういえば，結城浩さんは Vim を使われているような&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;bitcoin:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Bitcoin は失敗したか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1601/20/news120.html&#34;&gt;ビットコインは「失敗した」　離脱を表明した主要開発者が語る、その問題点 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bitcoin ってどうしてもかつての「地域通貨」を連想しちゃうんだよなぁ。
かつての「地域通貨」で上手くいったところはないはず。&lt;/p&gt;

&lt;p&gt;通貨は血液のように国や企業や人々の間で循環していくことが重要。
特に総量が決まっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 補完通貨は誰かがガメて抱え込んでしまえばそこでお終いなのだ。&lt;/p&gt;

&lt;p&gt;そういえば「世界の富豪62人が保有する資産は、「36億人分の富」に相当する」のだそうだ。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;オックスファムによれば、世界の人口のうち「最も豊かな1パーセント」がもつ富と、「最も貧しい50パーセント」がもつ富が同じになるという見通しは、予想より1年早く、現実になったという&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2016/01/21/global-poverty-oxfam/&#34;&gt;世界人口の約半数は「より貧しく」なっていく « WIRED.jp&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;まぁ今の世界のシステムがそうなるよう構築されているのだから，ある意味当然の帰結と言えるけど。
「アベノミクス」だって結局はそのシステムに乗っかったものなんだから地方在住の貧乏人にカネが回ってくる道理がないのだ。&lt;/p&gt;

&lt;p&gt;でも Bitcoin のような通貨システムはこの動きを加速させてしまうんじゃないだろうか。
どうなんだろう。
そろそろ本当に総括が必要なのだろうか。&lt;/p&gt;

&lt;h3 id=&#34;参考-1:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cruel.org/hotwired/hotwired23_01.html&#34;&gt;HotWired Japan_Altbiz  山形浩生の『ケイザイ2.0』 第23回 地域通貨って、そんなにいいの？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1601/21/news024.html&#34;&gt;特集：FinTech入門（3）：ブロックチェーンは「取引コストゼロ」の世界を実現しようとしている (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tex:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;TeX Wiki が移転しとるがな&lt;/h2&gt;

&lt;p&gt;1月20日から &lt;a href=&#34;https://texwiki.texjp.org/&#34; title=&#34;TeX Wiki&#34;&gt;https://texwiki.texjp.org/&lt;/a&gt; に移転したらしい。&lt;/p&gt;

&lt;p&gt;つらつら眺めてたら&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://texwiki.texjp.org/?Atom&#34;&gt;Atom - TeX Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というページがあった。&lt;/p&gt;

&lt;p&gt;そういや &lt;a href=&#34;http://pandoc.org/&#34; title=&#34;Pandoc - About pandoc&#34;&gt;Pandoc&lt;/a&gt; も気になってるんだよな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pandoc.org/&#34;&gt;Pandoc - About pandoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jgm/pandoc&#34;&gt;jgm/pandoc: Universal markup converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tags/Pandoc&#34;&gt;Pandocに関する投稿 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://betrue12.hateblo.jp/entry/2015/04/10/003830&#34;&gt;PandocでMarkdownからPDF化を試してみた - ARMERIA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://pandoc.org/&#34; title=&#34;Pandoc - About pandoc&#34;&gt;Pandoc&lt;/a&gt; は一度導入しかけて挫折したんだけど，最近のバージョンはとっつきやすくなってるみたい。
けど試す隙がない。&lt;/p&gt;

&lt;h2 id=&#34;books:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;「『いま読むべき本』３冊」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/01/22/3-books-for-new-editors/&#34;&gt;出版の「初心」を思い出すための３冊 « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うーむ，「『いま読むべき本』３冊」かぁ。
私が人様に本を勧めるなどおこがましい話ではあるが，敢えて3冊選べというなら，今のところこれかな。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798115002/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41bC8pdM2iL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798115002/baldandersinf-22/&#34;&gt;CODE VERSION 2.0&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ローレンス・レッシグ Lawrence Lessig &lt;/dd&gt;&lt;dd&gt;翔泳社 2007-12-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798102040/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798102040.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;コモンズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798119806/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798119806.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;REMIX ハイブリッド経済で栄える文化と商業のあり方&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798106801/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798106801.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Free Culture&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480431837/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480431837.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アーキテクチャの生態系: 情報環境はいかに設計されてきたか (ちくま文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757102453/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4757102453.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アーキテクチャの生態系――情報環境はいかに設計されてきたか&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;前著『CODE』改訂版。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ブルース・シュナイアー 山形 浩生 &lt;/dd&gt;&lt;dd&gt;エヌティティ出版 2013-12-24&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4622078007/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4622078007.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;殺人ザルはいかにして経済に目覚めたか?―― ヒトの進化からみた経済学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4140816872/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4140816872.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;限界費用ゼロ社会―&lt;モノのインターネット&gt;と共有型経済の台頭&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4478017883/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4478017883.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;第五の権力---Googleには見えている未来&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621089188/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621089188.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;リスク 不確実性の中での意思決定 (サイエンス・パレット)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/412102138X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/412102138X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ソーシャル・キャピタル入門　- 孤立から絆へ (中公新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-23&#34;&gt;2016-01-23&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/417iD4x5N%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジョック ヤング Jock Young &lt;/dd&gt;&lt;dd&gt;洛北出版 2007-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764331/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764331.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;後期近代の眩暈―排除から過剰包摂へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4255008515/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4255008515.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;断片的なものの社会学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796700439/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4796700439.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スティグマの社会学―烙印を押されたアイデンティティ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764242/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764242.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新しい貧困 労働消費主義ニュープア&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062881357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062881357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;弱者の居場所がない社会――貧困・格差と社会的包摂 (講談社現代新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000410.shtml&#34;&gt;感想はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;もっとも，ちゃんと最後まで読んだのは『排除型社会』だけであとは途中まで読んで積ん読状態。
まぁ『CODE』は Version 1 は既読なのでそのうちゆっくり。
面白い本ほど読むのに時間が掛かるし考える時間も増える。&lt;/p&gt;

&lt;p&gt;というわけで，今年は「本を買わない」ことにした&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
厳密には「2016年に新規に買うのは5冊まで」。
その代わり積ん読状態になってる本を消化することに注力する。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;「完全数（perfect number）」とは「その数自身を除く約数の和がその数自身と等しい自然数」を指す。たとえば $6$ の素因数は $2\times3$ なので $6$ 自身を除く約数の和は $1+2+3=6$ となり完全数と言える。ちなみに $3$ は $2^2-1$ でメルセンヌ素数で $2^1(2^2-1)=6$ である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;たとえば Bitcoin の総量は約2,100万BTCで，どのように振り出されるかは数学的に決まっており恣意的な制御はできないようになっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;マンガやラノベは別ね。あれは娯楽だから。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語の日付処理 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/time-functions/" />
		<id>tag:text.Baldanders.info,2016-01-22:/golang/time-functions/</id>
		<published>2016-01-22T20:56:21+09:00</published>
		<updated>2016-01-22T20:56:21+09:00</updated>
		<summary>今回は日付処理の話。特にフォーマットの定義の仕方はよく忘れるので覚え書きとして記しておく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は日付処理の話。
特にフォーマットの定義の仕方はよく忘れるので覚え書きとして記しておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で日付処理を行うには &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージを使う。
よく使う型としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Time&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Duration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Location&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が挙げられるだろう。
&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Time&lt;/code&gt; は時刻を， &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Duration&lt;/code&gt; は2時点間の時間を，そして &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Location&lt;/code&gt; は地球上の時差を表す型である。
たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tz, err := time.LoadLocation(&amp;quot;Asia/Tokyo&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	tm := time.Date(2006, 1, 2, 15, 4, 5, 0, tz)
	fmt.Println(tm)
	now := time.Now()
	fmt.Println(now)
	d := now.Sub(tm)
	fmt.Println(d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書くと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2006-01-02 15:04:05 +0900 JST
2009-11-10 23:00:00 +0000 UTC
33808h55m55s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てな感じになる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c11a81a4a42bf05b71b8320d533680a9:m&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c11a81a4a42bf05b71b8320d533680a9:m&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;時刻を任意のフォーマットで表示する場合は少し特殊な方法を使う。
たとえば &lt;a href=&#34;https://tools.ietf.org/html/rfc3339&#34;&gt;RFC 3339&lt;/a&gt; フォーマットに出力するなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tz, err := time.LoadLocation(&amp;quot;Asia/Tokyo&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	tm := time.Date(2015, 12, 31, 23, 59, 59, 0, tz)
	fmt.Println(tm.Format(&amp;quot;2006-01-02T15:04:05Z07:00&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-12-31T23:59:59+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出力される。
テンプレート文字列が &lt;code&gt;%Y&lt;/code&gt; とか &lt;code&gt;YYYY&lt;/code&gt; のような形式ではないのだ。
これは適当な文字列ではなく一応法則があって&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;月は &lt;code&gt;1&lt;/code&gt; （または &lt;code&gt;01&lt;/code&gt;, &lt;code&gt;Jan&lt;/code&gt;, &lt;code&gt;January&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;日は &lt;code&gt;2&lt;/code&gt; （または &lt;code&gt;02&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;時は &lt;code&gt;3&lt;/code&gt; （または &lt;code&gt;03&lt;/code&gt;, &lt;code&gt;15&lt;/code&gt;） ※ 午後3時を指す&lt;/li&gt;
&lt;li&gt;分は &lt;code&gt;4&lt;/code&gt; （または &lt;code&gt;04&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;秒は &lt;code&gt;5&lt;/code&gt; （または &lt;code&gt;05&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;年は &lt;code&gt;06&lt;/code&gt; （または &lt;code&gt;2006&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;時差は &lt;code&gt;-07&lt;/code&gt; （または &lt;code&gt;-0700&lt;/code&gt;, &lt;code&gt;-07:00&lt;/code&gt;, &lt;code&gt;Z07:00&lt;/code&gt;, &lt;code&gt;MST&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c11a81a4a42bf05b71b8320d533680a9:tz&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c11a81a4a42bf05b71b8320d533680a9:tz&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; など）&lt;/li&gt;
&lt;li&gt;曜日は &lt;code&gt;Mon&lt;/code&gt; （または &lt;code&gt;Monday&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;AM/PM は &lt;code&gt;PM&lt;/code&gt; （または &lt;code&gt;pm&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という感じに 1 からの連番になっている（曜日等は例外だけど）ので，まぁ覚えられるかな？ でもよく忘れるんだよなぁ。
&lt;code&gt;%Y&lt;/code&gt; みたいなのとどちらがいいかは微妙な気がするが，慣れの問題かもしれない。&lt;/p&gt;

&lt;p&gt;典型的なフォーマットは定数化されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
	ANSIC       = &amp;quot;Mon Jan _2 15:04:05 2006&amp;quot;
	UnixDate    = &amp;quot;Mon Jan _2 15:04:05 MST 2006&amp;quot;
	RubyDate    = &amp;quot;Mon Jan 02 15:04:05 -0700 2006&amp;quot;
	RFC822      = &amp;quot;02 Jan 06 15:04 MST&amp;quot;
	RFC822Z     = &amp;quot;02 Jan 06 15:04 -0700&amp;quot; // RFC822 with numeric zone
	RFC850      = &amp;quot;Monday, 02-Jan-06 15:04:05 MST&amp;quot;
	RFC1123     = &amp;quot;Mon, 02 Jan 2006 15:04:05 MST&amp;quot;
	RFC1123Z    = &amp;quot;Mon, 02 Jan 2006 15:04:05 -0700&amp;quot; // RFC1123 with numeric zone
	RFC3339     = &amp;quot;2006-01-02T15:04:05Z07:00&amp;quot;
	RFC3339Nano = &amp;quot;2006-01-02T15:04:05.999999999Z07:00&amp;quot;
	Kitchen     = &amp;quot;3:04PM&amp;quot;
	// Handy time stamps.
	Stamp      = &amp;quot;Jan _2 15:04:05&amp;quot;
	StampMilli = &amp;quot;Jan _2 15:04:05.000&amp;quot;
	StampMicro = &amp;quot;Jan _2 15:04:05.000000&amp;quot;
	StampNano  = &amp;quot;Jan _2 15:04:05.000000000&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので，先ほどのコードも出力部分を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Println(tm.Format(time.RFC3339))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば同じ結果が得られる。
時刻フォーマットは，いったんシステムの中で決めてしまえば同じものを使い回すことになると思うので，定数化してしまえば「フォーマットどうだっけ？」と煩わされることも少ないだろう。&lt;/p&gt;

&lt;p&gt;ところで現行（バージョン 1.5 系）の &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Parse()&lt;/code&gt; 関数は日付の解釈が寛容で，各月の末日を31日まで許容している。
たとえば閏年でない2月29日でも&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tm, err := time.Parse(time.RFC3339, &amp;quot;2015-02-29T23:59:59+09:00&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	fmt.Println(tm)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2015-03-01 23:59:59 +0900 +0900
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり，エラーとならずいい感じ（？）に加減してくれるのだが，バージョン 1.6 からは少し解釈が厳密になりエラーを返すようだ。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The time package&#39;s Parse function has always rejected any day of month larger than 31, such as January 32. In Go 1.6, Parse now also rejects February 29 in non-leap years, February 30, February 31, April 31, June 31, September 31, and November 31.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://tip.golang.org/doc/go1.6&#34;&gt;Go 1.6 Release Notes DRAFT - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Date()&lt;/code&gt; 関数は更に寛容である。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tz, err := time.LoadLocation(&amp;quot;Asia/Tokyo&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	tm := time.Date(2015, 13, 32, 25, 60, 00, 0, tz)
	fmt.Println(tm)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2016-02-03 02:00:00 +0900 JST
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ブックマーク:c11a81a4a42bf05b71b8320d533680a9&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2015/12/22/000011&#34;&gt;Goで良い感じに日時をパースするライブラリdatemakiの話とGo 1.6 - YAMAGUCHI::weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ushio_s/items/3e270933641710bbd88e&#34;&gt;golangのtime.Timeの当日00:00:00を取得する方法とベンチマーク - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c11a81a4a42bf05b71b8320d533680a9:m&#34;&gt;厳密にいうと月の値は &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Month&lt;/code&gt; 型である。サンプル・コードのようにリテラルな数値なら気にする必要はないが，変数を &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Date()&lt;/code&gt; 関数にセットする場合は注意が必要である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c11a81a4a42bf05b71b8320d533680a9:m&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c11a81a4a42bf05b71b8320d533680a9:tz&#34;&gt;時差の MST は米国の山岳部時間（Mountain Standad Time）を指すらしい。ソルトレイクシティとかデンバーとかかな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c11a81a4a42bf05b71b8320d533680a9:tz&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>人格権と CC Licenses - cc-licenses</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/cc-licenses/03-moral-rights/" />
		<id>tag:text.Baldanders.info,2016-01-20:/cc-licenses/03-moral-rights/</id>
		<published>2016-01-20T21:31:46+09:00</published>
		<updated>2016-01-26T12:33:47+09:00</updated>
		<summary>前回紹介した「Creative Commons Licenses」の内容を踏まえた上で今回は「著作者人格権」と CC Licenses との関係について解説する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="cc-licenses" label="cc-licenses" scheme="http://text.baldanders.info/cc-licenses" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/cc-licenses/02-creative-commons-licenses/&#34;&gt;前回紹介した「Creative Commons Licenses」&lt;/a&gt;の内容を踏まえた上で今回は人格権と &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; との関係について解説する。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#about:6963633eb1ea213b04a144eca337a838&#34;&gt;「著作者人格権」とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other:6963633eb1ea213b04a144eca337a838&#34;&gt;その他の「人格権」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ccl:6963633eb1ea213b04a144eca337a838&#34;&gt;CC Licenses では（可能なかぎり）人格権は行使されない&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;about:6963633eb1ea213b04a144eca337a838&#34;&gt;「著作者人格権」とは&lt;/h2&gt;

&lt;p&gt;まずは「著作者人格権」から。&lt;/p&gt;

&lt;p&gt;著作者人格権は&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第18条から第20条にかけて定められている。
すなわち以下の3つの権利の総称である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;公表権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第18条）&lt;/li&gt;
&lt;li&gt;氏名表示権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第19条）&lt;/li&gt;
&lt;li&gt;同一性保持権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第20条）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また「著作者人格権は、著作者の一身に専属し、譲渡することができない」（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第59条）。
つまり著作者以外の人に譲渡できないし，著作者以外の人がこれを行使することもできない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
また著作者人格権は著作者の死後も機能するとされている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;このうちもっとも強力な権利が「同一性保持権」である。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;著作者は、その著作物及びその題号の同一性を保持する権利を有し、その意に反してこれらの変更、切除その他の改変を受けないものとする。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34;&gt;著作権法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるように著作者は著作物の改変をいつでも禁止することができる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
このような強い権利は他の国にはない（同一性保持権自体は他の国でも見られるが限定的）。
このため日本の著作権ライセンスの中には，許諾者による「同一性保持権」の不行使を明示しているものもある。&lt;/p&gt;

&lt;h2 id=&#34;other:6963633eb1ea213b04a144eca337a838&#34;&gt;その他の「人格権」&lt;/h2&gt;

&lt;p&gt;著作隣接権のひとつである「実演家の権利」には「実演家の人格権」というのがある。
具体的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;氏名表示権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第90条）&lt;/li&gt;
&lt;li&gt;同一性保持権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第90条）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2つである。
著作者人格権と同じく一身専属性を持ち譲渡できないし，実演家の死後も機能する（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第101条）。
ただし同一性保持権については&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;実演家は、その実演の同一性を保持する権利を有し、自己の名誉又は声望を害するその実演の変更、切除その他の改変を受けないものとする。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34;&gt;著作権法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるとおり「自己の名誉又は声望を害する」場合のみという制限がある。&lt;/p&gt;

&lt;p&gt;著作権ではないが「パブリシティ権」や「プライバシー権」といったものも人格権の一種として挙げられるだろう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
著作権法上は問題なくとも，これらの人格権によって著作物が利用できない場合はある，ということは覚えておいたほうがいいと思う。&lt;/p&gt;

&lt;h2 id=&#34;ccl:6963633eb1ea213b04a144eca337a838&#34;&gt;CC Licenses では（可能なかぎり）人格権は行使されない&lt;/h2&gt;

&lt;p&gt;さて，上述した人格権について &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; はどうしているかというと，許諾範囲を逸脱しない限り許諾者は人格権を行使しないことになっている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;同一性保持の権利のような著作者人格権は、本パブリック・ライセンスのもとではライセンスされません。パブリシティ権、プライバシー権、および／または他の類似した人格権も同様です。ただし、可能なかぎり、許諾者は、あなたがライセンスされた権利を行使するために必要とされる範囲内で、また、その範囲内でのみ、許諾者の保持する、いかなるそのような権利を放棄し、および／または主張しないことに同意します。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ (Creative Commons) — 表示-継承 4.0 国際&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;人格権の一身専属性を考えればこのような表現になるということだろう。
ただし「可能なかぎり」という条件がついている。&lt;/p&gt;

&lt;p&gt;この点について，以前のバージョンでは比較的明確に書かれていて，たとえば 2.1 日本版では&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;原著作者及び実演家の名誉又は声望を害する方法で原著作物を改作、変形もしくは翻案して生じる著作物は、この利用許諾の目的においては、二次的著作物に含まれない。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ リーガル・コード — 表示-継承 2.1 日本版&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあり，原著作者の名誉・声望を害する改変は二次的著作物に含めない，としている。
また 3.0 Unported でも同様に&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Except as otherwise agreed in writing by the Licensor or as may be otherwise permitted by applicable law, if You Reproduce, Distribute or Publicly Perform the Work either by itself or as part of any Adaptations or Collections, You must not distort, mutilate, modify or take other derogatory action in relation to the Work which would be prejudicial to the Original Author&#39;s honor or reputation.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/3.0/legalcode&#34;&gt;Creative Commons Legal Code — Attribution-ShareAlike 3.0 Unported&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;となっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;この辺の文言が 4.0 International でなくなった理由はよく分からないが，“&lt;a href=&#34;https://creativecommons.org/Version4/&#34;&gt;What&amp;rsquo;s New in 4.0&lt;/a&gt;” には&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The 4.0 license suite uniformly and explicitly waives moral rights held by the licensor where possible to the limited extent necessary to enable reuse of the content in the manner intended by the license. Publicity, privacy, and personality rights held by the licensor are expressly waived to the same limited extent. While many understand these rights to be waived when held by the licensor in 3.0 and earlier versions, version 4.0’s treatment makes the intended outcome clear.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/Version4/&#34;&gt;What&amp;#39;s New in 4.0 - Creative Commons&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;との記述があり，あえて「名誉・声望を害する改変」部分の記述を削った可能性もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:d&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;キャラクタの権利:6963633eb1ea213b04a144eca337a838&#34;&gt;キャラクタの権利&lt;/h3&gt;

&lt;p&gt;キャラクタやキャラクタの名前の利用については著作権ではなく商標権（工業デザインの場合は意匠権）で保護されることが多い&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:e&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。
この場合， &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; は商標権や意匠権についてはライセンスしないので，個別に許可を得る必要がある。&lt;/p&gt;

&lt;p&gt;実在の人物やその人物の延長上のキャラクタ（「デーモン小暮閣下」など）に対しては「パブリシティ権」が適用される。
パブリシティ権は肖像権の一種と考えられ「氏名・肖像から生じる経済的利益ないし価値を排他的に支配する権利&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;」と定義されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では，これまで述べた通り，パブリシティ権についてもライセンスしないが「可能なかぎり」行使しない，となっている。&lt;/p&gt;

&lt;h2 id=&#34;参考になる-かもしれない-web-ページ:6963633eb1ea213b04a144eca337a838&#34;&gt;参考になる（かもしれない） Web ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://creativecommons.jp/2006/11/15/ccplv3-discussion/&#34;&gt;【CCPLv3.0】著作者人格権（同一性保持権）に関する議論 | クリエイティブ・コモンズ・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/Version4/&#34;&gt;What&amp;rsquo;s New in 4.0 - Creative Commons - Creative Commons&lt;/a&gt; （&lt;a href=&#34;http://qiita.com/nyampire/items/c03904bd27bd8812aad3&#34;&gt;日本語参考訳&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:a&#34;&gt;近年はあまり見なくなったが， Web サービスの中にはユーザのコンテンツの著作権をサービス・プロバイダに譲渡し著作者人格権の不行使を要求するものがある。著作者人格権は譲渡できないため，著作者人格権の不行使も無効になると思われる。ただし個別契約の中で著作者人格権の不行使を約束する場合はあり得る。ちなみに「職務著作（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第15条）」の場合は所属する法人が著作者となるため，個々人に著作者人格権は発生しない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;「著作物を公衆に提供し、又は提示する者は、その著作物の著作者が存しなくなつた後においても、著作者が存しているとしたならばその著作者人格権の侵害となるべき行為をしてはならない」（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第60条）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:b&#34;&gt;ただしこれにはいくつか例外がある。学校教育の目的上やむを得ない場合，建築物の模様替えやリフォーム，プログラムの不具合修正や改善，などである。ちなみに「著作権の制限」（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第30-50条）は著作者人格権には及ばないのでご注意を。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:c&#34;&gt;ただし日本には明示的な「プライバシー権」は存在しない。「個人情報保護法」は（人格権ではなく）個人にまつわる&lt;strong&gt;情報&lt;/strong&gt;の取り扱いについて定めた法律である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; 3.0 では著作者人格権に関する議論が国際的にも行われたようだ。くわしくは「&lt;a href=&#34;http://creativecommons.jp/2006/11/15/ccplv3-discussion/&#34;&gt;著作者人格権（同一性保持権）に関する議論&lt;/a&gt;」が参考になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:d&#34;&gt;この辺は GPL などの他ライセンスとの互換性を考える上で重要なポイントでもある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:e&#34;&gt;基本的にキャラクタや名前には著作権はない。このため防衛のためにキャラクタやキャラクタの名前を商標登録することが多いらしい。ただし創作上の文脈としてキャラクタや名前が書（描）かれている場合は著作物の一部として認められる場合がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;&lt;span&gt;&lt;a href=&#34;http://www.courts.go.jp/hanrei/pdf/A730EBEA9CA60D6249256C7F0023A16E.pdf&#34;&gt;「ダービースタリオン事件」判決文&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;より。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;ただし作品上の架空のキャラクタや無機物やペット等にはパブリシティ権は適用されない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
