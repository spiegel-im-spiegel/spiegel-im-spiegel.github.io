<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2016-01-26:/</id>
	<updated>2016-01-26T20:29:34+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>二次的著作物と CC-Licenses - cc-licenses</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/cc-licenses/04-derivative-works/" />
		<id>tag:text.Baldanders.info,2016-01-26:/cc-licenses/04-derivative-works/</id>
		<published>2016-01-26T20:29:34+09:00</published>
		<updated>2016-01-26T20:29:34+09:00</updated>
		<summary>CC Licenses では「改変禁止」条件がなければ「翻案物を作成、複製および共有すること」を許諾する。また翻案物を受け取ったユーザは原著作者の許諾を（提示されている CC Licenses の条件に従って）自動的に得る。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="cc-licenses" label="cc-licenses" scheme="http://text.baldanders.info/cc-licenses" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は「二次的著作物」について。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#about:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;「二次的著作物」とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ccl:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;CC Licenses による改変の許諾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cl:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;Copyleft のすすめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parody:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;パロディについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#niji:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;二次創作のみを許可したい&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;about:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;「二次的著作物」とは&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt;第2条では「二次的著作物」は以下のように定義されている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;著作物を翻訳し、編曲し、若しくは変形し、又は脚色し、映画化し、その他翻案することにより創作した著作物をいう。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34;&gt;著作権法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「創作」的であることが重要で，「既存の著作物の修正増減に創作性が認められるが、原著作物の表現形式の本質的な特徴が失われるに至っていない場合&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:ak&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:ak&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;」に二次的著作物と見なされる。
たとえばフォーマット変換や機械翻訳（点字などへの置き換え）などは「逐語的コピー」と呼ばれ複製と見なされる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:cpy&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:cpy&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;具体的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;翻訳&lt;/li&gt;
&lt;li&gt;編曲&lt;/li&gt;
&lt;li&gt;変形（美術、写真、建築物、地図・図形の著作物で用いられることが多い）&lt;/li&gt;
&lt;li&gt;脚色&lt;/li&gt;
&lt;li&gt;映画化&lt;/li&gt;
&lt;li&gt;翻案（上述した以外の全て。コミカライズやノベライズ，文章の要約，あるいはプログラムのバージョンアップや他言語への移植なども含まれる）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった感じに分類されるが，一絡げに「翻案」または「改変」と表記されることが多い。
&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では二次的著作物に相当するものを「翻案物（Adapted Material）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:m&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:m&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;」としている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;&lt;strong&gt;「翻案物」&lt;/strong&gt;とは、著作権およびそれに類する権利の対象となり、ライセンス対象物について許諾者が有する著作権およびそれに類する権利に基づく許諾が必要とされるような形で、翻訳され、改変され、編集され、変形され、またはその他の方法により変更されたマテリアルで、ライセンス対象物から派生したか、またはライセンス対象物に基づくものを意味します。本パブリック・ライセンスにおいては、ライセンス対象物が音楽作品、実演または録音物で、これらが動画と同期させられる場合には、翻案物が常に作成されることになります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ (Creative Commons) — 表示-継承 4.0 国際&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;著作（権）者は自身の著作物に対して&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;二次的著作物の作成に関する権利（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第27条）&lt;/li&gt;
&lt;li&gt;二次的著作物の利用に関する原著作者の権利（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第28条）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2つの権利を持っている。
ポイントは二次的著作物の原著作者（元の著作物の著作者）も二次的著作物に対して一連の著作財産権を持っていることである。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;二次的著作物の原著作物の著作者は、当該二次的著作物の利用に関し、この款に規定する権利で当該二次的著作物の著作者が有するものと同一の種類の権利を専有する。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34;&gt;著作権法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;つまり，ユーザが二次的著作物を利用したいと考えるなら，二次的著作物の著作（権）者と原著作（権）者の双方から許可を得る必要がある。&lt;/p&gt;

&lt;h2 id=&#34;ccl:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;CC Licenses による改変の許諾&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では「改変禁止 &lt;i class=&#34;cc cc-nd&#34;&gt;&lt;/i&gt;」条件がなければ「翻案物を作成、複製および共有すること」を許諾する。
また翻案物を受け取ったユーザは原著作者の許諾を（提示されている &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; の条件に従って）自動的に得る&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:sl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:sl&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;あなたから翻案物を受領した者は、あなたが適用した翻案者のライセンスの条件にしたがった翻案物におけるライセンスされた権利を行使できるという申出を自動的に許諾者から受け取ります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ (Creative Commons) — 表示-継承 4.0 国際&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;つまり，原マテリアルとその翻案物の双方が &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; で許諾されているなら，双方のライセンス条件に従って翻案物も利用することができる。&lt;/p&gt;

&lt;p&gt;なお &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では「表示 &lt;i class=&#34;cc cc-by&#34;&gt;&lt;/i&gt;」条件が必須になっているため，翻案物およびその複製や翻案物に対しても原著作者のクレジット表示が必要になる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:attr&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:attr&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;cl:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;Copyleft のすすめ&lt;/h2&gt;

&lt;p&gt;二次的著作物については原著作物の許諾条件と二次的著作物の許諾条件の両方に従う必要がある。
原著作物が &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; で許諾されている場合でも，その翻案物が &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; で許諾されていない場合は利用条件が著しく制限される場合がある（まぁ原著作物から派生させる手もあるのだが）。
また原著作物とその翻案物の双方が &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; で許諾されているとしても両者の条件が異なれば，やはりそれも制限になってしまう。&lt;/p&gt;

&lt;p&gt;もし翻案物も含めてマテリアルを広く共有したいと望むのであれば「継承 &lt;i class=&#34;cc cc-sa&#34;&gt;&lt;/i&gt;」条件を付加することをお勧めする。
「継承 &lt;i class=&#34;cc cc-sa&#34;&gt;&lt;/i&gt;」条件が付加されている場合は，翻案物に対しても同等のライセンス&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:cmp&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:cmp&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; を付加することが求められる。&lt;/p&gt;

&lt;p&gt;このようなライセンスの仕組みは &lt;a href=&#34;http://www.gnu.org/licenses/copyleft.html&#34; title=&#34;コピーレフトって何? - GNUプロジェクト - フリーソフトウェアファウンデーション&#34;&gt;Copyleft&lt;/a&gt; と呼ばれている。
&lt;a href=&#34;http://www.gnu.org/licenses/copyleft.html&#34; title=&#34;コピーレフトって何? - GNUプロジェクト - フリーソフトウェアファウンデーション&#34;&gt;Copyleft&lt;/a&gt; の起源は &lt;a href=&#34;https://www.gnu.org/copyleft/gpl.html&#34;&gt;GNU GPL（General Public License）&lt;/a&gt; であるが， &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; においても「継承 &lt;i class=&#34;cc cc-sa&#34;&gt;&lt;/i&gt;」条件よって &lt;a href=&#34;http://www.gnu.org/licenses/copyleft.html&#34; title=&#34;コピーレフトって何? - GNUプロジェクト - フリーソフトウェアファウンデーション&#34;&gt;Copyleft&lt;/a&gt; もしくはそれに近いライセンスを構成できる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:cl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:cl&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; で「継承 &lt;i class=&#34;cc cc-sa&#34;&gt;&lt;/i&gt;」条件が付くのは以下の2つである。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;th class=&#39;left&#39;&gt;&lt;i class=&#34;cc cc-by-sa cc-2x&#34;&gt;&lt;/i&gt;   &lt;/th&gt;&lt;th class=&#39;left&#39;&gt;表示-継承           &lt;/th&gt;&lt;td&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;コモンズ証&lt;/a&gt;（&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/deed.ja&#34;&gt;日本語&lt;/a&gt;） &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode&#34;&gt;法的条項&lt;/a&gt;（&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;日本語&lt;/a&gt;） &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/rdf&#34;&gt;メタデータ&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th class=&#39;left&#39;&gt;&lt;i class=&#34;cc cc-by-nc-sa cc-2x&#34;&gt;&lt;/i&gt;&lt;/th&gt;&lt;th class=&#39;left&#39;&gt;表示-非営利-継承    &lt;/th&gt;&lt;td&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;コモンズ証&lt;/a&gt;（&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.ja&#34;&gt;日本語&lt;/a&gt;） &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode&#34;&gt;法的条項&lt;/a&gt;（&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode.ja&#34;&gt;日本語&lt;/a&gt;） &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/rdf&#34;&gt;メタデータ&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;figcaption&gt;Creative Commons Licenses Version 4.0 International&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://www.gnu.org/licenses/copyleft.html&#34; title=&#34;コピーレフトって何? - GNUプロジェクト - フリーソフトウェアファウンデーション&#34;&gt;Copyleft&lt;/a&gt; はプログラミングの世界でも「ウイルス的」と揶揄されることもあるが，共有を維持するには必要な仕掛けだと思う。
&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; の使われ方を見ても，&lt;a href=&#34;https://stateof.creativecommons.org/2015/&#34;&gt;2015年時点&lt;/a&gt;では「&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; title=&#34;Creative Commons — Attribution-ShareAlike 4.0 International — CC BY-SA 4.0&#34;&gt;表示-継承&lt;/a&gt;」条件が37%で最も多い。
この機会に検討してみてはいかがだろうか。&lt;/p&gt;

&lt;p&gt;なお &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; は&lt;a href=&#34;http://text.baldanders.info/cc-licenses/01-copyright/#fair-use:c0a4c5753ec2f9b59ccc6a19f369d87d&#34;&gt;「公正な利用（fair use）」や「著作権の制限」&lt;/a&gt;として利用が認められていることに対しては効力が及ばないため， &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; の条件に関わらず利用可能である。&lt;/p&gt;

&lt;h2 id=&#34;parody:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;パロディについて&lt;/h2&gt;

&lt;p&gt;海外では，パロディ・風刺について「公正な利用（fair use）」としてある程度認められている国もあるが，日本ではパロディに関する規定そのものがない。
そのため現状では「引用」か「翻案」かで線引されることになる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:pd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:pd&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;商業作品の場合は（防衛のために）あらかじめオリジナル作品の著作（権）者から許可を得ていることもあるようだが，そうでない場合は特に悪質なものでない限り「黙認」されているのが現状のようだ。
しかし，いったん訴訟になった場合，パロディが「引用」として認められるのはかなり難しいと思われる。&lt;/p&gt;

&lt;h2 id=&#34;niji:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;二次創作のみを許可したい&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では，どの条件の組み合わせでもマテリアルの複製や配布を（条件に従う限りは）制限しない。
これは &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; を適用したマテリアルやその翻案物がインターネット上に置かれることを前提にしたものだからである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:in&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:in&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;。
しかしインターネットに乗らないマテリアル（紙の書籍， CD や DVD/BD でパッケージされた楽曲や映像など）は旧来の流通経路でコントロールする必要があるため &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; とは馴染まない側面があるのも確かだ。&lt;/p&gt;

&lt;p&gt;「複製・配布は許可できないが二次創作は許可したい」という需要に対応するため，かつて &lt;a href=&#34;https://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; では翻案のみを許可する「サンプリング・ライセンス（sampling license）」の作成が試みられた。
ただ，この試みはうまくいかなかったようで，現在サンプリング・ライセンスは retire している。&lt;/p&gt;

&lt;p&gt;少なくとも &lt;a href=&#34;https://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; では翻案のみを許可するライセンス・ツールは存在しない。
このような要件がある場合は独自にライセンスを構築するしかない。&lt;/p&gt;

&lt;h3 id=&#34;同人マーク-ライセンス:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;同人マーク・ライセンス&lt;/h3&gt;

&lt;p&gt;「二次創作のみを許可したい」という要件に対して，日本での試みとして「&lt;a href=&#34;http://commonsphere.jp/doujin-license-1/&#34; title=&#34;同人マーク・ライセンス 1.0 | commonsphere&#34;&gt;同人マーク・ライセンス&lt;/a&gt;」がある。
これは日本の「同人市場」という特殊商慣行に特化したライセンスで，原著作物の複製・配布を禁止する代わりに，二次的著作物の作成とその複製・配布を許可している。
ただしいくつか条件があって&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;許諾者は、利用者に対し、本作品について、全世界において、本作品の著作権の存続期間中、本ライセンスの各条項に従い、利用者自身が、二次創作同人誌を作成し、同人誌即売会において配布すること（有償および無償の場合双方を含みます。また、インターネット配信やCD、DVD等のデジタルメディアでの配布などのデジタルデータによる配布は除きます。以下同じ）を非独占的に許諾します。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://commonsphere.jp/doujin-license-1/&#34;&gt;同人マーク・ライセンス 1.0&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるとおり，媒体は「二次創作同人誌」に限られ，配布経路も「同人誌即売会」に限られる。
たとえば，同人誌即売会に出品しない（本来的な意味での）二次創作同人誌は原著作物に「&lt;a href=&#34;http://commonsphere.jp/doujin-license-1/&#34; title=&#34;同人マーク・ライセンス 1.0 | commonsphere&#34;&gt;同人マーク・ライセンス&lt;/a&gt;」があろうと（著作（権）者から別途許諾がない限り） NG である。&lt;/p&gt;

&lt;p&gt;最近（2013年）になって「&lt;a href=&#34;http://commonsphere.jp/doujin-license-1/&#34; title=&#34;同人マーク・ライセンス 1.0 | commonsphere&#34;&gt;同人マーク・ライセンス&lt;/a&gt;」が提唱された背景には「環太平洋パートナーシップ（Trans-Pacific Partnership; TPP）協定」の知財分野における「著作権の非親告罪化」が挙げられる。
もし「著作権の非親告罪化」が日本で成立すれば同人市場は壊滅状態になると予想されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ff0ca281c6b038daf79ed1b67f526b4d:mkt&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ff0ca281c6b038daf79ed1b67f526b4d:mkt&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;。
いわばこれは作者たちによる自己防衛的ライセンスであると言える。&lt;/p&gt;

&lt;p&gt;同人市場に限らず日本では事後承諾的に著作物を利用する慣習があり（たとえば&lt;a href=&#34;#parody:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;パロディ&lt;/a&gt;や勝手翻訳など），こういったものも軒並み「著作権の非親告罪化」に引っかかることになるだろう。
しかもこれに（同じく TPP で決まった）「法定賠償制度」も加われば巨額の賠償金を払わされる可能性がある。
これにより日本においても「&lt;a href=&#34;https://www.eff.org/issues/copyright-trolls&#34;&gt;著作権トロル&lt;/a&gt;」が台頭することになる。
むしろこちらの方が深刻である。
これについて文化庁は&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;著作権等侵害罪の一部非親告罪化については、TPP協定において非親告罪化が義務づけられている範囲及びその趣旨を踏まえつつ、我が国の二次創作文化への影響に十分配慮し、適切に非親告罪の範囲を定めること&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20151111_730105.html&#34;&gt;TPPで“違法ダウンロード”適用拡大も、文化庁の審議会で再び検討か -INTERNET Watch&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;などとしているが，翻案は「二次創作文化」だけではなく日常生活の広い範囲に関わる「活動」である。
「&lt;a href=&#34;http://text.baldanders.info/cc-licenses/01-copyright/&#34;&gt;著作権と著作権法&lt;/a&gt;」でも書いたが，ユーザを無視した知財政策を続けていると本当に「ガラパゴス」になっちゃうよ。&lt;/p&gt;

&lt;h2 id=&#34;参考になる-かもしれない-web-ページ:ff0ca281c6b038daf79ed1b67f526b4d&#34;&gt;参考になる（かもしれない） Web ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://onm-tm.jp/news/%EF%BD%91%EF%BC%97%EF%BC%8E%E3%82%AD%E3%83%A3%E3%83%A9%E3%82%AF%E3%82%BF%E3%83%BC%E3%81%AE%E8%91%97%E4%BD%9C%E6%A8%A9%E6%B3%95%E4%B8%8A%E3%81%AE%E5%8F%96%E6%89%B1%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84&#34;&gt;キャラクターの著作権法上の取扱いについて | 大島・西村・宮永商標特許事務所&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://otapol.jp/2014/09/post-1542.html&#34;&gt;スクウェア・エニックスの著作権侵害の可能性はグレー!?　『ハイスコアガール』問題について福井健策弁護士に話をうかがってみた｜おたぽる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.law.nihon-u.ac.jp/publication/pdf/chizai/4/04.pdf&#34;&gt;米国著作権法におけるパロディとフェア・ユース/差止め請求 −パロディに関する裁判例と，小説の続編出版が問題とされた最近の事例から−&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;a href=&#34;http://www.bunka.go.jp/seisaku/chosakuken/seminar/contents_symposium/08/pdf/akamatsu.pdf&#34;&gt;二次創作における「意思表示システム」の提唱&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yamdas.org/column/technique/cctrans.html&#34;&gt;クリエイティブ・コモンズ・ライセンスのブログ翻訳のススメ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.creativecommons.org/2015/10/08/cc-by-sa-4-0-now-one-way-compatible-with-gplv3/&#34;&gt;CC BY-SA 4.0 now one-way compatible with GPLv3 - Creative Commons Blog - Creative Commons&lt;/a&gt; （&lt;a href=&#34;http://creativecommons.jp/2016/01/25/cc-by-sa-%EF%BC%88%E8%A1%A8%E7%A4%BA-%E7%B6%99%E6%89%BF%EF%BC%89-4-0%E3%81%8B%E3%82%89gpl-v3%E3%81%B8%E3%81%AE%E4%B8%80%E6%96%B9%E5%90%91%E3%81%AE%E4%BA%92%E6%8F%9B%E3%81%8C%E5%AE%9F%E7%8F%BE/&#34;&gt;日本語訳&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stateof.creativecommons.org/2015/&#34;&gt;Creative Commons — State of the Commons 2015 — It&amp;rsquo;s been a remarkable year, most notably for the more than 1.1 billion works under one of the CC licenses, CC0, or the public domain mark.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20151111_730105.html&#34;&gt;TPPで“違法ダウンロード”適用拡大も、文化庁の審議会で再び検討か -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/campaigns/trans-pacific-partnership-would-harm-user-rights-and-the-commons/&#34;&gt;Trans-Pacific Partnership Would Harm User Rights and the Commons - Creative Commons - Creative Commons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:ak&#34;&gt;&lt;span&gt;&lt;a href=&#34;http://www.courts.go.jp/app/files/hanrei_jp/827/013827_hanrei.pdf&#34;&gt;「アンコウ行灯事件」判決文&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;より。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:ak&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:cpy&#34;&gt;他にも漫画のキャラクタなどを似せて描いた場合も，翻案ではなく，複製と見なされる場合がある。文脈とか，どの程度似てるかとかにもよるだろうけど。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:cpy&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:m&#34;&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; は著作隣接権で保護されるものも含む形で許諾しているためこのような表現になる。詳しくは「&lt;a href=&#34;http://creativecommons.jp/2015/07/15/cc%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9%E3%83%BB%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B34-0-%E6%97%A5%E6%9C%AC%E8%AA%9E%E7%89%88%E3%81%AE%E5%85%AC%E9%96%8B/&#34;&gt;CCライセンス・バージョン4.0 日本語版の公開 | クリエイティブ・コモンズ・ジャパン&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:m&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:sl&#34;&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; ではサブライセンスを禁止しているため，翻案物に対する許諾の一方を直に原著作者から得る，という形になっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:sl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:attr&#34;&gt;クレジット表示については&lt;a href=&#34;http://text.baldanders.info/cc-licenses/02-creative-commons-licenses/#attribution:3c09c25a3f426190f3d3ae33caa0c3dc&#34;&gt;前に書いた記事&lt;/a&gt;を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:attr&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:cmp&#34;&gt;「同等のライセンス」として同じ条件の &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; （他バージョンを含む）が挙げられる。また「&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; title=&#34;Creative Commons — Attribution-ShareAlike 4.0 International — CC BY-SA 4.0&#34;&gt;表示-継承&lt;/a&gt;」については &lt;a href=&#34;http://artlibre.org/licence/lal/en/&#34;&gt;Free Art License&lt;/a&gt; 1.3 や &lt;a href=&#34;https://www.gnu.org/copyleft/gpl.html&#34;&gt;GNU GPL&lt;/a&gt;v3 も互換性のあるライセンスとして認められている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:cmp&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:cl&#34;&gt;ただし厳密に &lt;a href=&#34;http://www.gnu.org/licenses/copyleft.html&#34; title=&#34;コピーレフトって何? - GNUプロジェクト - フリーソフトウェアファウンデーション&#34;&gt;Copyleft&lt;/a&gt; と言えるのは「&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34; title=&#34;Creative Commons — Attribution-ShareAlike 4.0 International — CC BY-SA 4.0&#34;&gt;表示-継承&lt;/a&gt;」条件のみである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:cl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:pd&#34;&gt;パロディはいわゆる「パクり」（一般的には「剽窃」）とは異なる。「替え歌」や短歌の「本歌取り」もパロディの一種と考えられる。米国における parody と fair use の関係については「&lt;span&gt;&lt;a href=&#34;http://www.law.nihon-u.ac.jp/publication/pdf/chizai/4/04.pdf&#34;&gt;米国著作権法におけるパロディとフェア・ユース/差止め請求 −パロディに関する裁判例と，小説の続編出版が問題とされた最近の事例から−&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;」が参考になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:pd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:in&#34;&gt;そもそもインターネットはコピーの連鎖で成り立っているものだし，無理に制限しようとすればユーザ側の「使用」や「公正な利用」まで侵害しかねない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:in&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ff0ca281c6b038daf79ed1b67f526b4d:mkt&#34;&gt;さる調査によると&lt;a href=&#34;http://www.gamespark.jp/article/2016/01/19/63159.html&#34;&gt;2015年の同人誌市場は757億円規模&lt;/a&gt;だそうだ。そりゃあ狙われるよねぇ（笑） まぁ同人市場は同人誌だけじゃないし同人誌と言ってもいろいろあるので，二次創作が実際にどの程度かは分からないけど数十億から数百億の規模でもおかしくないだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ff0ca281c6b038daf79ed1b67f526b4d:mkt&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>[security] Go 1.5.3 is released - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/security-update-go-1_5_3-is-released/" />
		<id>tag:text.Baldanders.info,2016-01-24:/remark/2016/01/security-update-go-1_5_3-is-released/</id>
		<published>2016-01-24T15:24:23+09:00</published>
		<updated>2016-01-24T16:29:20+09:00</updated>
		<summary>リスクとしては大したことはないですが， Web アプリケーションまたは TLS の実装を Go 言語で行っている方は要更新です。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;2週間前の話ですみません。
1月14日に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラ 1.5.3 が出ています。
メインは &lt;a href=&#34;https://golang.org/pkg/math/big/&#34; title=&#34;big - The Go Programming Language&#34;&gt;&lt;code&gt;math/big&lt;/code&gt;&lt;/a&gt; パッケージの不具合修正です。&lt;/p&gt;

&lt;p&gt;リスクとしては大したことはないですが， Web アプリケーションまたは TLS の実装を &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で行っている方は要更新です。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;This issue can affect RSA computations in crypto/rsa, which is used by crypto/tls. TLS servers on 32-bit systems could plausibly leak their RSA private key due to this issue. Other protocol implementations that create many RSA signatures could also be impacted in the same way.&lt;br&gt;
Specifically, incorrect results in one part of the RSA Chinese Remainder computation can cause the result to be incorrect in such a way that it leaks one of the primes. While RSA blinding should prevent an attacker from crafting specific inputs that trigger the bug, on 32-bit systems the bug can be expected to occur at random around one in 2^26 times. Thus collecting around 64 million signatures (of known data) from an affected server should be enough to extract the private key used.&lt;br&gt;
On 64-bit systems, the frequency of the bug is so low (less than one in 2^50) that it would be very difficult to exploit. Nonetheless, everyone is strongly encouraged to upgrade.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/MEATuOi_ei4&#34;&gt;[security] Go 1.5.3 is released - Google グループ&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;cve-2015-8618-carry-propagation-in-int-exp-montgomery-code-in-math-big-library:51e51d81c7827f7f2f9459e4211dec84&#34;&gt;CVE-2015-8618 Carry propagation in Int.Exp Montgomery code in math/big library&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CVSSv2 基本評価値 2.6 (&lt;code&gt;AV:N/AC:H/Au:N/C:P/I:N/A:N&lt;/code&gt;)&lt;/strong&gt;
（&lt;a href=&#34;https://access.redhat.com/security/cve/cve-2015-8618&#34;&gt;Redhat による評価&lt;/a&gt;）&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;基本評価基準&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;評価値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃元区分（AV）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ネットワーク（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃条件の複雑さ（AC）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高（H）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;攻撃前の認証要否（Au）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;不要（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報漏えいの可能性（機密性への影響, C）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;部分的（P）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;情報改ざんの可能性（完全性への影響, I）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;業務停止の可能性（可用性への影響, A）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;なし（N）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： Planet Nine - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/23-stories/" />
		<id>tag:text.Baldanders.info,2016-01-23:/remark/2016/01/23-stories/</id>
		<published>2016-01-23T13:54:34+09:00</published>
		<updated>2016-01-26T19:31:03+09:00</updated>
		<summary>Planet Nine / 次期X線国際天文衛星 ASTRO-H は 2月12日に打ち上げ予定 / 2^74207281-1 is Prime! / いまのところ「秀丸」への依存度は1割程度 / Bitcoin は失敗したか / TeX Wiki が移転しとるがな / 「『いま読むべき本』３冊」</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#planet9:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Planet Nine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#astro-h:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;次期X線国際天文衛星 ASTRO-H は 2月12日に打ち上げ予定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prime:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;2^74207281-1 is Prime!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hidemaru:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;いまのところ「秀丸」への依存度は1割程度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bitcoin:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Bitcoin は失敗したか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tex:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;TeX Wiki が移転しとるがな&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#books:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;「『いま読むべき本』３冊」&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;planet9:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Planet Nine&lt;/h2&gt;

&lt;p&gt;冥王星が9番目の惑星だった頃からこの手の話は尽きないが，どうも今回はマジらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.caltech.edu/news/caltech-researchers-find-evidence-real-ninth-planet-49523&#34;&gt;Caltech Researchers Find Evidence of a Real Ninth Planet | Caltech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iopscience.iop.org/article/10.3847/0004-6256/151/2/22/pdf&#34;&gt;EVIDENCE FOR A DISTANT GIANT PLANET IN THE SOLAR SYSTEM - pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nature.com/news/evidence-grows-for-giant-planet-on-fringes-of-solar-system-1.19182&#34;&gt;Evidence grows for giant planet on fringes of Solar System : Nature News &amp;amp; Comment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seti.org/seti-institute/planet-nine-are-we-not-that-special&#34;&gt;Planet Nine: Are We Not That Special? | SETI Institute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2016/01/20160121_02.html&#34;&gt;2016年1月21日ニュース「太陽系に9番目の惑星か 米チームが予測」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.astroarts.co.jp/news/2016/01/21planet9/index-j.shtml&#34;&gt;シミュレーションで推測、太陽系第9惑星存在の可能性 - アストロアーツ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sorae.jp/030201/2016_01_21_planet-nine.html&#34;&gt;太陽系に「第9惑星」存在か　米天文学者らが論文発表 | sorae.jp : 宇宙（そら）へのポータルサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2016/01/21/20160120astronomers-find-evidence-of-a-ninth-planet/&#34;&gt;9番目の惑星の存在を示す証拠が発見された | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japanese.engadget.com/2016/01/25/9/&#34;&gt;「見えない太陽系第9惑星」は本当に発見できる？何を使って、どう見つける？ - Engadget Japanese&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実際に発見されたわけではなく，いわゆる「海王星以遠天体（Trans-Neptunian Object; TNO または Edgeworth-Kuiper Belt Object; EKBO）」の軌道の偏りからの推測らしい。
よくある与太話ではなく，割と確からしい話のようだ。&lt;/p&gt;

&lt;p&gt;こういう話を聞くといつも思うが，子供のころ聞かされていた「太陽系」のイメージが実は太陽のほんの近傍のものに過ぎないことに気付かされる。
「水金地火木&amp;hellip;」などと受験用の念仏を唱えている場合ではないのですよ。&lt;/p&gt;

&lt;h2 id=&#34;astro-h:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;次期X線国際天文衛星 ASTRO-H は 2月12日に打ち上げ予定&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://astro-h.isas.jaxa.jp/&#34;&gt;ASTRO-H&lt;/a&gt; て広島大学の CORE-U（極限宇宙研究拠点）も参画してるのか。
母校のことなのに全然知らなかったよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://core-u.hiroshima-u.ac.jp/blog/2016/01/22/x%E7%B7%9A%E5%A4%A9%E6%96%87%E8%A1%9B%E6%98%9F%E3%80%8Castro-h%E3%80%8D2%E6%9C%8812%E6%97%A5%E6%89%93%E3%81%A1%E4%B8%8A%E3%81%92%E3%81%B8/&#34;&gt;X線天文衛星「ASTRO-H」2月12日打ち上げへ広島大学極限宇宙研究拠点 CORE-U&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;prime:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;2^74207281-1 is Prime!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mersenne.org/primes/?press=M74207281&#34;&gt;Mersenne Prime Discovery - 2^74207281-1 is Prime!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ascii.jp/elem/000/001/107/1107594/&#34;&gt;ASCII.jp：「新たな世界最大の素数」昨年9月に発見&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/01/22/discover-your-own-prime-number/&#34;&gt;「史上最大の素数」、更新される « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mersenne.org/primes/&#34;&gt;GIMPS (Great Internet Mersenne Prime Search)&lt;/a&gt; プロジェクトによる分散コンピューティングを使った素数探索で新たなメルセンヌ素数 $2^{74,207,281}-1$ が見つかったようだ。&lt;/p&gt;

&lt;p&gt;「メルセンヌ素数」というのは $M_p = 2^p-1$ で表されるメルセンヌ数 $M_p$ のうち素数であるものを指す。
$M_p$ が素数なら $p$ も素数であるという面白い性質がある（逆は成り立たない）。
また $M_p = 2^p-1$ が素数なら $2^{p-1}(2^p-1)$ は完全数&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; になる。&lt;/p&gt;

&lt;p&gt;メルセンヌ数に対しては効率的な素数判定法が知られており分散コンピューティング向きの題材である。&lt;/p&gt;

&lt;h3 id=&#34;参考:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mailsrv.nara-edu.ac.jp/~asait/prime.htm&#34;&gt;巨大素数と計算機&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hidemaru:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;いまのところ「秀丸」への依存度は1割程度&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20160119/hidemaru&#34;&gt;WindowsがMacより優れているのは秀丸エディタが動くことだけ（暴論） - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あー，わかるわかる。
私もかなりの「&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;依存症」なので（笑）&lt;/p&gt;

&lt;p&gt;その「&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;依存症」から脱却すべく &lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM に乗り換え中&lt;/a&gt;だが，今のところ9割くらいは &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; で賄えている。
とはいえ，私はコード書きで文章書きではない。
文章を大量に書く人に &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; がいいかどうかはなんとも言えない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; の欠点は大きく2つ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;起動が遅く，全体的にもっさりしている&lt;/li&gt;
&lt;li&gt;大きなテキストを読み込めない（または読み込みに非常に時間がかかる）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;たかだか20万行程度のテキスト（ぶっちゃけ CSV なんだけど）を読み込むのにフリーズしないで欲しい。
起動が遅いのは仕方がないと諦めた。
秀丸みたいに常駐モードがあればいいんだけどねぇ。
まぁ &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; を立ち上げっぱなしにしておけばいいか。&lt;/p&gt;

&lt;p&gt;この辺は多分 &lt;a href=&#34;http://electron.atom.io/&#34;&gt;Electron&lt;/a&gt; の限界なんだろう。
そういや&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;も登場したての頃は動作がもっさりしていて Vz と併用してたっけ（Vz は DOS 窓から使ってた）。
気長に性能向上を待つとしよう。&lt;/p&gt;

&lt;p&gt;テキストエディタは製品云々より手に馴染むかどうかが絶対的に重要で，そのため必然的に hackable にならざるを得ない。
故に宗教論争も起こりやすい。
それに人は慣れ親しんだ手順や workflow からは簡単に抜け出せないものである。
私は emacs なんか触りたくもないし， vi/vim は若い頃のトラウマがフラッシュバックするので可能なかぎり使いたくない。&lt;/p&gt;

&lt;p&gt;そういえば，結城浩さんは Vim を使われているような&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;bitcoin:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;Bitcoin は失敗したか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1601/20/news120.html&#34;&gt;ビットコインは「失敗した」　離脱を表明した主要開発者が語る、その問題点 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;) - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bitcoin ってどうしてもかつての「地域通貨」を連想しちゃうんだよなぁ。
かつての「地域通貨」で上手くいったところはないはず。&lt;/p&gt;

&lt;p&gt;通貨は血液のように国や企業や人々の間で循環していくことが重要。
特に総量が決まっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 補完通貨は誰かがガメて抱え込んでしまえばそこでお終いなのだ。&lt;/p&gt;

&lt;p&gt;そういえば「世界の富豪62人が保有する資産は、「36億人分の富」に相当する」のだそうだ。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;オックスファムによれば、世界の人口のうち「最も豊かな1パーセント」がもつ富と、「最も貧しい50パーセント」がもつ富が同じになるという見通しは、予想より1年早く、現実になったという&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2016/01/21/global-poverty-oxfam/&#34;&gt;世界人口の約半数は「より貧しく」なっていく « WIRED.jp&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;まぁ今の世界のシステムがそうなるよう構築されているのだから，ある意味当然の帰結と言えるけど。
「アベノミクス」だって結局はそのシステムに乗っかったものなんだから地方在住の貧乏人にカネが回ってくる道理がないのだ。&lt;/p&gt;

&lt;p&gt;でも Bitcoin のような通貨システムはこの動きを加速させてしまうんじゃないだろうか。
どうなんだろう。
そろそろ本当に総括が必要なのだろうか。&lt;/p&gt;

&lt;h3 id=&#34;参考-1:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cruel.org/hotwired/hotwired23_01.html&#34;&gt;HotWired Japan_Altbiz  山形浩生の『ケイザイ2.0』 第23回 地域通貨って、そんなにいいの？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1601/21/news024.html&#34;&gt;特集：FinTech入門（3）：ブロックチェーンは「取引コストゼロ」の世界を実現しようとしている (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;) - ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tex:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;TeX Wiki が移転しとるがな&lt;/h2&gt;

&lt;p&gt;1月20日から &lt;a href=&#34;https://texwiki.texjp.org/&#34; title=&#34;TeX Wiki&#34;&gt;https://texwiki.texjp.org/&lt;/a&gt; に移転したらしい。&lt;/p&gt;

&lt;p&gt;つらつら眺めてたら&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://texwiki.texjp.org/?Atom&#34;&gt;Atom - TeX Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というページがあった。&lt;/p&gt;

&lt;p&gt;そういや &lt;a href=&#34;http://pandoc.org/&#34; title=&#34;Pandoc - About pandoc&#34;&gt;Pandoc&lt;/a&gt; も気になってるんだよな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pandoc.org/&#34;&gt;Pandoc - About pandoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jgm/pandoc&#34;&gt;jgm/pandoc: Universal markup converter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tags/Pandoc&#34;&gt;Pandocに関する投稿 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://betrue12.hateblo.jp/entry/2015/04/10/003830&#34;&gt;PandocでMarkdownからPDF化を試してみた - ARMERIA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://pandoc.org/&#34; title=&#34;Pandoc - About pandoc&#34;&gt;Pandoc&lt;/a&gt; は一度導入しかけて挫折したんだけど，最近のバージョンはとっつきやすくなってるみたい。
けど試す隙がない。&lt;/p&gt;

&lt;h2 id=&#34;books:ffd709d11af105d92f9548bcb225ebbc&#34;&gt;「『いま読むべき本』３冊」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/01/22/3-books-for-new-editors/&#34;&gt;出版の「初心」を思い出すための３冊 « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うーむ，「『いま読むべき本』３冊」かぁ。
私が人様に本を勧めるなどおこがましい話ではあるが，敢えて3冊選べというなら，今のところこれかな。&lt;/p&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798115002/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41bC8pdM2iL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798115002/baldandersinf-22/&#34;&gt;CODE VERSION 2.0&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ローレンス・レッシグ Lawrence Lessig &lt;/dd&gt;&lt;dd&gt;翔泳社 2007-12-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798102040/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798102040.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;コモンズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798119806/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798119806.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;REMIX ハイブリッド経済で栄える文化と商業のあり方&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4798106801/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4798106801.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Free Culture&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4480431837/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4480431837.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アーキテクチャの生態系: 情報環境はいかに設計されてきたか (ちくま文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757102453/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4757102453.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;アーキテクチャの生態系――情報環境はいかに設計されてきたか&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;前著『CODE』改訂版。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ブルース・シュナイアー 山形 浩生 &lt;/dd&gt;&lt;dd&gt;エヌティティ出版 2013-12-24&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4622078007/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4622078007.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;殺人ザルはいかにして経済に目覚めたか?―― ヒトの進化からみた経済学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4140816872/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4140816872.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;限界費用ゼロ社会―&lt;モノのインターネット&gt;と共有型経済の台頭&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4478017883/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4478017883.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;第五の権力---Googleには見えている未来&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4621089188/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4621089188.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;リスク 不確実性の中での意思決定 (サイエンス・パレット)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/412102138X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/412102138X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ソーシャル・キャピタル入門　- 孤立から絆へ (中公新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-23&#34;&gt;2016-01-23&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/417iD4x5N%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジョック ヤング Jock Young &lt;/dd&gt;&lt;dd&gt;洛北出版 2007-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764331/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764331.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;後期近代の眩暈―排除から過剰包摂へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4255008515/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4255008515.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;断片的なものの社会学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796700439/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4796700439.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スティグマの社会学―烙印を押されたアイデンティティ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764242/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764242.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新しい貧困 労働消費主義ニュープア&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062881357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062881357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;弱者の居場所がない社会――貧困・格差と社会的包摂 (講談社現代新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000410.shtml&#34;&gt;感想はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;もっとも，ちゃんと最後まで読んだのは『排除型社会』だけであとは途中まで読んで積ん読状態。
まぁ『CODE』は Version 1 は既読なのでそのうちゆっくり。
面白い本ほど読むのに時間が掛かるし考える時間も増える。&lt;/p&gt;

&lt;p&gt;というわけで，今年は「本を買わない」ことにした&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
厳密には「2016年に新規に買うのは5冊まで」。
その代わり積ん読状態になってる本を消化することに注力する。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;「完全数（perfect number）」とは「その数自身を除く約数の和がその数自身と等しい自然数」を指す。たとえば $6$ の素因数は $2\times3$ なので $6$ 自身を除く約数の和は $1+2+3=6$ となり完全数と言える。ちなみに $3$ は $2^2-1$ でメルセンヌ素数で $2^1(2^2-1)=6$ である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ffd709d11af105d92f9548bcb225ebbc:pn&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;たとえば Bitcoin の総量は約2,100万BTCで，どのように振り出されるかは数学的に決まっており恣意的な制御はできないようになっている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ffd709d11af105d92f9548bcb225ebbc:bc&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;マンガやラノベは別ね。あれは娯楽だから。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:ffd709d11af105d92f9548bcb225ebbc:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Go 言語の日付処理 - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/time-functions/" />
		<id>tag:text.Baldanders.info,2016-01-22:/golang/time-functions/</id>
		<published>2016-01-22T20:56:21+09:00</published>
		<updated>2016-01-22T20:56:21+09:00</updated>
		<summary>今回は日付処理の話。特にフォーマットの定義の仕方はよく忘れるので覚え書きとして記しておく。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は日付処理の話。
特にフォーマットの定義の仕方はよく忘れるので覚え書きとして記しておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で日付処理を行うには &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; パッケージを使う。
よく使う型としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Time&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Duration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Location&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が挙げられるだろう。
&lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Time&lt;/code&gt; は時刻を， &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Duration&lt;/code&gt; は2時点間の時間を，そして &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Location&lt;/code&gt; は地球上の時差を表す型である。
たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tz, err := time.LoadLocation(&amp;quot;Asia/Tokyo&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	tm := time.Date(2006, 1, 2, 15, 4, 5, 0, tz)
	fmt.Println(tm)
	now := time.Now()
	fmt.Println(now)
	d := now.Sub(tm)
	fmt.Println(d)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書くと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2006-01-02 15:04:05 +0900 JST
2009-11-10 23:00:00 +0000 UTC
33808h55m55s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てな感じになる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c11a81a4a42bf05b71b8320d533680a9:m&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c11a81a4a42bf05b71b8320d533680a9:m&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;時刻を任意のフォーマットで表示する場合は少し特殊な方法を使う。
たとえば &lt;a href=&#34;https://tools.ietf.org/html/rfc3339&#34;&gt;RFC 3339&lt;/a&gt; フォーマットに出力するなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tz, err := time.LoadLocation(&amp;quot;Asia/Tokyo&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	tm := time.Date(2015, 12, 31, 23, 59, 59, 0, tz)
	fmt.Println(tm.Format(&amp;quot;2006-01-02T15:04:05Z07:00&amp;quot;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-12-31T23:59:59+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出力される。
テンプレート文字列が &lt;code&gt;%Y&lt;/code&gt; とか &lt;code&gt;YYYY&lt;/code&gt; のような形式ではないのだ。
これは適当な文字列ではなく一応法則があって&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;月は &lt;code&gt;1&lt;/code&gt; （または &lt;code&gt;01&lt;/code&gt;, &lt;code&gt;Jan&lt;/code&gt;, &lt;code&gt;January&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;日は &lt;code&gt;2&lt;/code&gt; （または &lt;code&gt;02&lt;/code&gt;, &lt;code&gt;_2&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;時は &lt;code&gt;3&lt;/code&gt; （または &lt;code&gt;03&lt;/code&gt;, &lt;code&gt;15&lt;/code&gt;） ※ 午後3時を指す&lt;/li&gt;
&lt;li&gt;分は &lt;code&gt;4&lt;/code&gt; （または &lt;code&gt;04&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;秒は &lt;code&gt;5&lt;/code&gt; （または &lt;code&gt;05&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;年は &lt;code&gt;06&lt;/code&gt; （または &lt;code&gt;2006&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;時差は &lt;code&gt;-07&lt;/code&gt; （または &lt;code&gt;-0700&lt;/code&gt;, &lt;code&gt;-07:00&lt;/code&gt;, &lt;code&gt;Z07:00&lt;/code&gt;, &lt;code&gt;MST&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c11a81a4a42bf05b71b8320d533680a9:tz&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c11a81a4a42bf05b71b8320d533680a9:tz&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; など）&lt;/li&gt;
&lt;li&gt;曜日は &lt;code&gt;Mon&lt;/code&gt; （または &lt;code&gt;Monday&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;AM/PM は &lt;code&gt;PM&lt;/code&gt; （または &lt;code&gt;pm&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という感じに 1 からの連番になっている（曜日等は例外だけど）ので，まぁ覚えられるかな？ でもよく忘れるんだよなぁ。
&lt;code&gt;%Y&lt;/code&gt; みたいなのとどちらがいいかは微妙な気がするが，慣れの問題かもしれない。&lt;/p&gt;

&lt;p&gt;典型的なフォーマットは定数化されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
	ANSIC       = &amp;quot;Mon Jan _2 15:04:05 2006&amp;quot;
	UnixDate    = &amp;quot;Mon Jan _2 15:04:05 MST 2006&amp;quot;
	RubyDate    = &amp;quot;Mon Jan 02 15:04:05 -0700 2006&amp;quot;
	RFC822      = &amp;quot;02 Jan 06 15:04 MST&amp;quot;
	RFC822Z     = &amp;quot;02 Jan 06 15:04 -0700&amp;quot; // RFC822 with numeric zone
	RFC850      = &amp;quot;Monday, 02-Jan-06 15:04:05 MST&amp;quot;
	RFC1123     = &amp;quot;Mon, 02 Jan 2006 15:04:05 MST&amp;quot;
	RFC1123Z    = &amp;quot;Mon, 02 Jan 2006 15:04:05 -0700&amp;quot; // RFC1123 with numeric zone
	RFC3339     = &amp;quot;2006-01-02T15:04:05Z07:00&amp;quot;
	RFC3339Nano = &amp;quot;2006-01-02T15:04:05.999999999Z07:00&amp;quot;
	Kitchen     = &amp;quot;3:04PM&amp;quot;
	// Handy time stamps.
	Stamp      = &amp;quot;Jan _2 15:04:05&amp;quot;
	StampMilli = &amp;quot;Jan _2 15:04:05.000&amp;quot;
	StampMicro = &amp;quot;Jan _2 15:04:05.000000&amp;quot;
	StampNano  = &amp;quot;Jan _2 15:04:05.000000000&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので，先ほどのコードも出力部分を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Println(tm.Format(time.RFC3339))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば同じ結果が得られる。
時刻フォーマットは，いったんシステムの中で決めてしまえば同じものを使い回すことになると思うので，定数化してしまえば「フォーマットどうだっけ？」と煩わされることも少ないだろう。&lt;/p&gt;

&lt;p&gt;ところで現行（バージョン 1.5 系）の &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Parse()&lt;/code&gt; 関数は日付の解釈が寛容で，各月の末日を31日まで許容している。
たとえば閏年でない2月29日でも&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tm, err := time.Parse(time.RFC3339, &amp;quot;2015-02-29T23:59:59+09:00&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	fmt.Println(tm)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2015-03-01 23:59:59 +0900 +0900
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり，エラーとならずいい感じ（？）に加減してくれるのだが，バージョン 1.6 からは少し解釈が厳密になりエラーを返すようだ。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The time package&#39;s Parse function has always rejected any day of month larger than 31, such as January 32. In Go 1.6, Parse now also rejects February 29 in non-leap years, February 30, February 31, April 31, June 31, September 31, and November 31.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://tip.golang.org/doc/go1.6&#34;&gt;Go 1.6 Release Notes DRAFT - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ちなみに &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Date()&lt;/code&gt; 関数は更に寛容である。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
	tz, err := time.LoadLocation(&amp;quot;Asia/Tokyo&amp;quot;)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		return
	}
	tm := time.Date(2015, 13, 32, 25, 60, 00, 0, tz)
	fmt.Println(tm)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2016-02-03 02:00:00 +0900 JST
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ブックマーク:c11a81a4a42bf05b71b8320d533680a9&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2015/12/22/000011&#34;&gt;Goで良い感じに日時をパースするライブラリdatemakiの話とGo 1.6 - YAMAGUCHI::weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/ushio_s/items/3e270933641710bbd88e&#34;&gt;golangのtime.Timeの当日00:00:00を取得する方法とベンチマーク - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c11a81a4a42bf05b71b8320d533680a9:m&#34;&gt;厳密にいうと月の値は &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Month&lt;/code&gt; 型である。サンプル・コードのようにリテラルな数値なら気にする必要はないが，変数を &lt;a href=&#34;http://golang.org/pkg/time/&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Date()&lt;/code&gt; 関数にセットする場合は注意が必要である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c11a81a4a42bf05b71b8320d533680a9:m&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c11a81a4a42bf05b71b8320d533680a9:tz&#34;&gt;時差の MST は米国の山岳部時間（Mountain Standad Time）を指すらしい。ソルトレイクシティとかデンバーとかかな。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c11a81a4a42bf05b71b8320d533680a9:tz&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>人格権と CC Licenses - cc-licenses</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/cc-licenses/03-moral-rights/" />
		<id>tag:text.Baldanders.info,2016-01-20:/cc-licenses/03-moral-rights/</id>
		<published>2016-01-20T21:31:46+09:00</published>
		<updated>2016-01-26T12:33:47+09:00</updated>
		<summary>前回紹介した「Creative Commons Licenses」の内容を踏まえた上で今回は「著作者人格権」と CC Licenses との関係について解説する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="cc-licenses" label="cc-licenses" scheme="http://text.baldanders.info/cc-licenses" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/cc-licenses/02-creative-commons-licenses/&#34;&gt;前回紹介した「Creative Commons Licenses」&lt;/a&gt;の内容を踏まえた上で今回は人格権と &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; との関係について解説する。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#about:6963633eb1ea213b04a144eca337a838&#34;&gt;「著作者人格権」とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#other:6963633eb1ea213b04a144eca337a838&#34;&gt;その他の「人格権」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ccl:6963633eb1ea213b04a144eca337a838&#34;&gt;CC Licenses では（可能なかぎり）人格権は行使されない&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;about:6963633eb1ea213b04a144eca337a838&#34;&gt;「著作者人格権」とは&lt;/h2&gt;

&lt;p&gt;まずは「著作者人格権」から。&lt;/p&gt;

&lt;p&gt;著作者人格権は&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第18条から第20条にかけて定められている。
すなわち以下の3つの権利の総称である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;公表権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第18条）&lt;/li&gt;
&lt;li&gt;氏名表示権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第19条）&lt;/li&gt;
&lt;li&gt;同一性保持権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第20条）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また「著作者人格権は、著作者の一身に専属し、譲渡することができない」（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第59条）。
つまり著作者以外の人に譲渡できないし，著作者以外の人がこれを行使することもできない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
また著作者人格権は著作者の死後も機能するとされている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;このうちもっとも強力な権利が「同一性保持権」である。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;著作者は、その著作物及びその題号の同一性を保持する権利を有し、その意に反してこれらの変更、切除その他の改変を受けないものとする。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34;&gt;著作権法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるように著作者は著作物の改変をいつでも禁止することができる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
このような強い権利は他の国にはない（同一性保持権自体は他の国でも見られるが限定的）。
このため日本の著作権ライセンスの中には，許諾者による「同一性保持権」の不行使を明示しているものもある。&lt;/p&gt;

&lt;h2 id=&#34;other:6963633eb1ea213b04a144eca337a838&#34;&gt;その他の「人格権」&lt;/h2&gt;

&lt;p&gt;著作隣接権のひとつである「実演家の権利」には「実演家の人格権」というのがある。
具体的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;氏名表示権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第90条）&lt;/li&gt;
&lt;li&gt;同一性保持権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第90条）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2つである。
著作者人格権と同じく一身専属性を持ち譲渡できないし，実演家の死後も機能する（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第101条）。
ただし同一性保持権については&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;実演家は、その実演の同一性を保持する権利を有し、自己の名誉又は声望を害するその実演の変更、切除その他の改変を受けないものとする。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34;&gt;著作権法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるとおり「自己の名誉又は声望を害する」場合のみという制限がある。&lt;/p&gt;

&lt;p&gt;著作権ではないが「パブリシティ権」や「プライバシー権」といったものも人格権の一種として挙げられるだろう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
著作権法上は問題なくとも，これらの人格権によって著作物が利用できない場合はある，ということは覚えておいたほうがいいと思う。&lt;/p&gt;

&lt;h2 id=&#34;ccl:6963633eb1ea213b04a144eca337a838&#34;&gt;CC Licenses では（可能なかぎり）人格権は行使されない&lt;/h2&gt;

&lt;p&gt;さて，上述した人格権について &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; はどうしているかというと，許諾範囲を逸脱しない限り許諾者は人格権を行使しないことになっている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;同一性保持の権利のような著作者人格権は、本パブリック・ライセンスのもとではライセンスされません。パブリシティ権、プライバシー権、および／または他の類似した人格権も同様です。ただし、可能なかぎり、許諾者は、あなたがライセンスされた権利を行使するために必要とされる範囲内で、また、その範囲内でのみ、許諾者の保持する、いかなるそのような権利を放棄し、および／または主張しないことに同意します。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ (Creative Commons) — 表示-継承 4.0 国際&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;人格権の一身専属性を考えればこのような表現になるということだろう。
ただし「可能なかぎり」という条件がついている。&lt;/p&gt;

&lt;p&gt;この点について，以前のバージョンでは比較的明確に書かれていて，たとえば 2.1 日本版では&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;原著作者及び実演家の名誉又は声望を害する方法で原著作物を改作、変形もしくは翻案して生じる著作物は、この利用許諾の目的においては、二次的著作物に含まれない。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ リーガル・コード — 表示-継承 2.1 日本版&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあり，原著作者の名誉・声望を害する改変は二次的著作物に含めない，としている。
また 3.0 Unported でも同様に&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Except as otherwise agreed in writing by the Licensor or as may be otherwise permitted by applicable law, if You Reproduce, Distribute or Publicly Perform the Work either by itself or as part of any Adaptations or Collections, You must not distort, mutilate, modify or take other derogatory action in relation to the Work which would be prejudicial to the Original Author&#39;s honor or reputation.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by-sa/3.0/legalcode&#34;&gt;Creative Commons Legal Code — Attribution-ShareAlike 3.0 Unported&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;となっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;この辺の文言が 4.0 International でなくなった理由はよく分からないが，“&lt;a href=&#34;https://creativecommons.org/Version4/&#34;&gt;What&amp;rsquo;s New in 4.0&lt;/a&gt;” には&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The 4.0 license suite uniformly and explicitly waives moral rights held by the licensor where possible to the limited extent necessary to enable reuse of the content in the manner intended by the license. Publicity, privacy, and personality rights held by the licensor are expressly waived to the same limited extent. While many understand these rights to be waived when held by the licensor in 3.0 and earlier versions, version 4.0’s treatment makes the intended outcome clear.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/Version4/&#34;&gt;What&amp;#39;s New in 4.0 - Creative Commons&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;との記述があり，あえて「名誉・声望を害する改変」部分の記述を削った可能性もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:d&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;キャラクタの権利:6963633eb1ea213b04a144eca337a838&#34;&gt;キャラクタの権利&lt;/h3&gt;

&lt;p&gt;キャラクタやキャラクタの名前の利用については著作権ではなく商標権（工業デザインの場合は意匠権）で保護されることが多い&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:e&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。
この場合， &lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; は商標権や意匠権についてはライセンスしないので，個別に許可を得る必要がある。&lt;/p&gt;

&lt;p&gt;実在の人物やその人物の延長上のキャラクタ（「デーモン小暮閣下」など）に対しては「パブリシティ権」が適用される。
パブリシティ権は肖像権の一種と考えられ「氏名・肖像から生じる経済的利益ないし価値を排他的に支配する権利&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;」と定義されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では，これまで述べた通り，パブリシティ権についてもライセンスしないが「可能なかぎり」行使しない，となっている。&lt;/p&gt;

&lt;h2 id=&#34;参考になる-かもしれない-web-ページ:6963633eb1ea213b04a144eca337a838&#34;&gt;参考になる（かもしれない） Web ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://creativecommons.jp/2006/11/15/ccplv3-discussion/&#34;&gt;【CCPLv3.0】著作者人格権（同一性保持権）に関する議論 | クリエイティブ・コモンズ・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/Version4/&#34;&gt;What&amp;rsquo;s New in 4.0 - Creative Commons - Creative Commons&lt;/a&gt; （&lt;a href=&#34;http://qiita.com/nyampire/items/c03904bd27bd8812aad3&#34;&gt;日本語参考訳&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:a&#34;&gt;近年はあまり見なくなったが， Web サービスの中にはユーザのコンテンツの著作権をサービス・プロバイダに譲渡し著作者人格権の不行使を要求するものがある。著作者人格権は譲渡できないため，著作者人格権の不行使も無効になると思われる。ただし個別契約の中で著作者人格権の不行使を約束する場合はあり得る。ちなみに「職務著作（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第15条）」の場合は所属する法人が著作者となるため，個々人に著作者人格権は発生しない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;「著作物を公衆に提供し、又は提示する者は、その著作物の著作者が存しなくなつた後においても、著作者が存しているとしたならばその著作者人格権の侵害となるべき行為をしてはならない」（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第60条）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:b&#34;&gt;ただしこれにはいくつか例外がある。学校教育の目的上やむを得ない場合，建築物の模様替えやリフォーム，プログラムの不具合修正や改善，などである。ちなみに「著作権の制限」（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第30-50条）は著作者人格権には及ばないのでご注意を。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:c&#34;&gt;ただし日本には明示的な「プライバシー権」は存在しない。「個人情報保護法」は（人格権ではなく）個人にまつわる&lt;strong&gt;情報&lt;/strong&gt;の取り扱いについて定めた法律である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;&lt;a href=&#34;https://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; 3.0 では著作者人格権に関する議論が国際的にも行われたようだ。くわしくは「&lt;a href=&#34;http://creativecommons.jp/2006/11/15/ccplv3-discussion/&#34;&gt;著作者人格権（同一性保持権）に関する議論&lt;/a&gt;」が参考になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:d&#34;&gt;この辺は GPL などの他ライセンスとの互換性を考える上で重要なポイントでもある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:e&#34;&gt;基本的にキャラクタや名前には著作権はない。このため防衛のためにキャラクタやキャラクタの名前を商標登録することが多いらしい。ただし創作上の文脈としてキャラクタや名前が書（描）かれている場合は著作物の一部として認められる場合がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;&lt;span&gt;&lt;a href=&#34;http://www.courts.go.jp/hanrei/pdf/A730EBEA9CA60D6249256C7F0023A16E.pdf&#34;&gt;「ダービースタリオン事件」判決文&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;より。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;ただし作品上の架空のキャラクタや無機物やペット等にはパブリシティ権は適用されない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>再帰呼び出しと関数テーブル - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/recursive-call-and-function-table/" />
		<id>tag:text.Baldanders.info,2016-01-18:/golang/recursive-call-and-function-table/</id>
		<published>2016-01-18T22:59:07+09:00</published>
		<updated>2016-01-19T21:50:44+09:00</updated>
		<summary>今回は再帰呼び出しの話。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は再帰呼び出しの話。&lt;/p&gt;

&lt;p&gt;再帰呼び出しのサンプルとして典型的なのは&lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number&#34; title=&#34;Fibonacci number - Wikipedia, the free encyclopedia&#34;&gt;フィボナッチ数&lt;/a&gt;かな。
&lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number&#34; title=&#34;Fibonacci number - Wikipedia, the free encyclopedia&#34;&gt;フィボナッチ数&lt;/a&gt;の定義を愚直にコードにするとこんな感じになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func fibonacciNumber(n int) int {
	switch n {
	case 0:
		return 0
	case 1:
		return 1
	default:
		return fibonacciNumber(n-2) + fibonacciNumber(n-1)
	}
}

type ff func(int) int

var fib = fibonacciNumber

func main() {
	fmt.Println(fibonacciNumber(40))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般に手続き型言語は再帰呼び出しに弱いと言われている（関数型のほうが有利）。
特に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt; に最適化を割り振っている関係で，関数呼び出しやその戻り&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:90181bd94c22568ae136c2a2c4e81a10:r&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:90181bd94c22568ae136c2a2c4e81a10:r&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; のパフォーマンスが冷遇されているようだ。
したがって，再帰呼び出し部分のパフォーマンスを改善したければ，なるべく呼び出し回数を減らすようにするのがコツである。
たとえば上の&lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number&#34; title=&#34;Fibonacci number - Wikipedia, the free encyclopedia&#34;&gt;フィボナッチ数&lt;/a&gt;の場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

var fibonacciNumbers = make(map[int]int)

func fibonacciNumber(n int) int {
	switch n {
	case 0:
		return 0
	case 1:
		return 1
	default:
		if fn, ok := fibonacciNumbers[n]; ok {
			return fn
		}
		fn := fibonacciNumber(n-2) + fibonacciNumber(n-1)
		fibonacciNumbers[n] = fn
		return fn
	}
}

func main() {
	fmt.Println(fibonacciNumber(40))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じに計算結果を保持っておくことでかなり改善する。&lt;/p&gt;

&lt;p&gt;ところで，再帰呼び出しで怖いのが無限呼び出しに陥るパターンである。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では関数値（function value）を介す場合であれば再帰呼び出しを禁止する。&lt;/p&gt;

&lt;p&gt;たとえば先ほどのコードを以下のように書き換えてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

var fibonacciNumbers = make(map[int]int)

func fibonacciNumber(n int) int {
	switch n {
	case 0:
		return 0
	case 1:
		return 1
	default:
		if fn, ok := fibonacciNumbers[n]; ok {
			return fn
		}
		fn := fib(n-2) + fib(n-1)
		fibonacciNumbers[n] = fn
		return fn
	}
}

type ff func(int) int

var fib ff = fibonacciNumber

func main() {
	fmt.Println(fib(40))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fibonacciNumber()&lt;/code&gt; を &lt;code&gt;fib()&lt;/code&gt; で別名定義しているだけだが，これを実行しようとすると以下のコンパイルエラーになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prog.go:25: initialization loop:
	prog.go:25 fib refers to
	prog.go:7 fibonacciNumber refers to
	prog.go:25 fib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関数値 &lt;code&gt;fib&lt;/code&gt; の部分でエラーになっている点に注目してほしい。&lt;/p&gt;

&lt;p&gt;本当に「ついうっかり」再帰呼び出しになってしまう場合はエラーではじいてもらってありがたいのだが，そうでない場合もある。
あまり例示がうまくなくて申し訳ないのだが，以下の簡単なステート・マシンを考えてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func f0(evt int) int {
	fmt.Println(&amp;quot;processing f0&amp;quot;)
	return 1
}

func f1(evt int) int {
	fmt.Println(&amp;quot;processing f1&amp;quot;)
	return 2
}

func f2(evt int) int {
	fmt.Println(&amp;quot;processing f2&amp;quot;)
	return 3
}

func f3(evt int) int {
	fmt.Println(&amp;quot;processing f3&amp;quot;)
	return 0
}

type fn func(int) int

var fs = []fn{
	f0,
	f1,
	f2,
	f3,
}

func StateMachin(stat, evt int) int {
	return fs[stat](evt)
}

func main() {
	s := 0
	for e := 0; e &amp;lt; 10; e++ {
		s = StateMachin(s, e)
		if s == 0 {
			break
		}
	}
	fmt.Println(&amp;quot;end&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fs&lt;/code&gt; が関数テーブルになっていて，状態 &lt;code&gt;s&lt;/code&gt; とイベント &lt;code&gt;e&lt;/code&gt; に対する処理 &lt;code&gt;fs[s](e)&lt;/code&gt; を呼び出して処理後の状態を返してもらう。
一応 &lt;code&gt;StateMachine()&lt;/code&gt; 関数で詳細を隠蔽しているつもりである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:90181bd94c22568ae136c2a2c4e81a10:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:90181bd94c22568ae136c2a2c4e81a10:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ここで &lt;code&gt;StateMachine(3, evt)&lt;/code&gt; の処理に続けて &lt;code&gt;StateMachine(1, evt)&lt;/code&gt; の処理がしたくなり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func f3(evt int) int {
    fmt.Println(&amp;quot;processing f3&amp;quot;)
    return StateMachin(1, evt)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと書いたらどうなるか。
もちろんこれもコンパイルエラーになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prog.go:32: initialization loop:
	prog.go:32 fs refers to
	prog.go:20 f3 refers to
	prog.go:34 StateMachin refers to
	prog.go:32 fs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし実際には &lt;code&gt;f3&lt;/code&gt; を無限に呼び出しているわけではないので，このコンパイルエラーでは困ってしまう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:90181bd94c22568ae136c2a2c4e81a10:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:90181bd94c22568ae136c2a2c4e81a10:a&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
このエラーを回避するには関数テーブル &lt;code&gt;fs&lt;/code&gt; を介さなければよい。
たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = []fn{
	f0,
	f1,
	f2,
	//f3,
}

func StateMachin(stat, evt int) int {
	if stat == 3 {
		return f3(evt)
	}
	return fs[stat](evt)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば，めでたく &lt;code&gt;f1&lt;/code&gt; → &lt;code&gt;f2&lt;/code&gt; → &lt;code&gt;f3&lt;/code&gt; → &lt;code&gt;f1&lt;/code&gt; とエンドレスにつながる。
ちなみにここでうっかり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func f3(evt int) int {
	fmt.Println(&amp;quot;processing f3&amp;quot;)
	return StateMachin(3, evt)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと書くと，コンパイルエラーにもならず無限呼び出しが発生する。&lt;/p&gt;

&lt;p&gt;再帰呼び出しは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:90181bd94c22568ae136c2a2c4e81a10&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2015/02/23/165341&#34;&gt;Goで再帰使うと遅くなりますがそれが何だ - YAMAGUCHI::weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/cc0f29441b16d63472ed&#34;&gt;.\hoge.go:7: initialization loop - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:90181bd94c22568ae136c2a2c4e81a10:r&#34;&gt;再帰呼び出しが「末尾呼び出し（tail call）」の場合は，戻りの最適化でパフォーマンスの向上が期待できるが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のコンパイラはこの辺の最適化も行っていないらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:90181bd94c22568ae136c2a2c4e81a10:r&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:90181bd94c22568ae136c2a2c4e81a10:b&#34;&gt;実際には別パッケージにしてちゃんとクラス設計すべきだろうけど色々端折っている。ゴメンペコン。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:90181bd94c22568ae136c2a2c4e81a10:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:90181bd94c22568ae136c2a2c4e81a10:a&#34;&gt;このコードに限れば &lt;code&gt;StateMachine(1, evt)&lt;/code&gt; ではなく &lt;code&gt;f1(evt)&lt;/code&gt; を呼び出せば済む話なのでこれは言いがかりであるが，「話の都合」ということで軽く流していただけるとありがたい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:90181bd94c22568ae136c2a2c4e81a10:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： Go コンパイラのセキュリティアップデートがあるらしい - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/09-stories/" />
		<id>tag:text.Baldanders.info,2016-01-09:/remark/2016/01/09-stories/</id>
		<published>2016-01-09T18:59:13+09:00</published>
		<updated>2016-01-09T18:59:13+09:00</updated>
		<summary>Go コンパイラのセキュリティアップデートがあるらしい / GnuPG 1.4.20 released / GitLab.com にアカウントを作った / くそな「中間者デバイス」が SHA-1 廃止の邪魔をする</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;年末忙しくて書き損ねてるネタを回収中。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#go:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;Go コンパイラのセキュリティアップデートがあるらしい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gpg:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GnuPG 1.4.20 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gl:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GitLab.com にアカウントを作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mitm:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;くそな「中間者デバイス」が SHA-1 廃止の邪魔をする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;go:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;Go コンパイラのセキュリティアップデートがあるらしい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/MLaPAPFlCNY&#34;&gt;[security] Go 1.5.3 pre-announcement - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳細は示されてないが13日（日本時間だと14日かな）を待つことにしよう。
来週は月例のセキュリティ更新週間である。&lt;/p&gt;

&lt;h2 id=&#34;gpg:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GnuPG 1.4.20 released&lt;/h2&gt;

&lt;p&gt;昨年の話で申し訳ないが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2015q4/000382.html&#34;&gt;[Announce] GnuPG 1.4.20 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;セキュリティアップデートではないが既定の動作が変わるようである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reject signatures made using the MD5 hash algorithm unless the new option &amp;ndash;allow-weak-digest-algos or &amp;ndash;pgp2 are given.&lt;/li&gt;
&lt;li&gt;New option &amp;ndash;weak-digest to specify hash algorithms which should be considered weak.&lt;/li&gt;
&lt;li&gt;Changed default cipher for symmetric-only encryption to AES-128.&lt;/li&gt;
&lt;li&gt;Fix for DoS when importing certain garbled secret keys.&lt;/li&gt;
&lt;li&gt;Improved error reporting for secret subkey w/o corresponding public subkey.&lt;/li&gt;
&lt;li&gt;Improved error reporting in decryption due to wrong algorithm.&lt;/li&gt;
&lt;li&gt;Fix cluttering of stdout with trustdb info in double verbose mode.&lt;/li&gt;
&lt;li&gt;Pass a DBUS envvar to gpg-agent for use by gnome-keyring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GnuPG というか OpenPGP が後生大事に MD5 を残しているのは過去の資産への対応のためであろう。&lt;/p&gt;

&lt;p&gt;ちなみに PGP の最初のリリースは1991年で，実に四半世紀も前である。
作者の &lt;a href=&#34;https://www.philzimmermann.com/&#34;&gt;Phil Zimmermann&lt;/a&gt; は当時，米国内反核運動の活動家であった。
更に暗号技術に対する政治的圧力は現在と比較にならないほど厳しく，米国は長いあいだ彼をマークし続けた。
PGP の広まり方や改良のプロセスは実に「インターネット的」であった。
詳しくは Steven Levy の『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化（Crypto）&lt;/a&gt;』をどうぞ。&lt;/p&gt;

&lt;p&gt;あれからネットも随分変わったが，当時政府が何をしたか企業は何をしたか「暗号アナーキスト」たちはどうしたか。
現在のネットは先人の努力により「勝ち取った」ものであることを私たちは絶対に忘れてはならない。&lt;/p&gt;

&lt;p&gt;自由そのものは自由ではない。
勝ち取ったものはいつか奪われる。
奪われたくなければ勝ち続けなければならない。&lt;/p&gt;

&lt;h2 id=&#34;gl:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GitLab.com にアカウントを作った&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masakura/items/e679c094e8afea9a4879&#34;&gt;GitLab/GitLab.com 勉強会 (2015/12/09) レポート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ見て &lt;a href=&#34;https://gitlab.com/&#34; title=&#34;GitLab&#34;&gt;GitLab.com&lt;/a&gt; にアカウントを作ってみた。
とりあえず中身は空っぽ。
公開リポジトリを &lt;a href=&#34;https://gitlab.com/&#34; title=&#34;GitLab&#34;&gt;GitLab.com&lt;/a&gt; に作るメリットはない気もするが，容量が 10GB/repos あるのはありがたい。&lt;/p&gt;

&lt;p&gt;まぁ，どう使うかはこれからおいおい考える。
今年あたり，どっかにサーバでも借りて私用リポジトリ・サービスを立ち上げてみたいのだが，これもおいおい。&lt;/p&gt;

&lt;h2 id=&#34;mitm:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;くそな「中間者デバイス」が SHA-1 廃止の邪魔をする&lt;/h2&gt;

&lt;p&gt;いやもうこれは笑うところだよね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35075954/&#34;&gt;「Firefox」、SHA-1証明書のサポートを一時的に復活&amp;ndash;HTTPSサイトのアクセスに問題 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1601/08/news069.html&#34;&gt;FirefoxのSHA-1廃止で一部ユーザーに障害、サポート復活 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;Barnes氏は次のように説明している。「ユーザーがHTTPSサイトへの接続を試みると、中間者デバイスがFirefoxに対し、サーバの本物の証明書でなく新規のSHA-1証明書を送信する」&lt;br&gt;
「Firefoxは新規のSHA-1証明書を拒否するため、サーバに接続できない」（同氏）&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35075954/&#34;&gt;「Firefox」、SHA-1証明書のサポートを一時的に復活--HTTPSサイトのアクセスに問題&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/remark/2015/problem-of-sha1-collision/&#34;&gt;SHA-1 衝突問題： 廃止の前倒し&lt;/a&gt;」でも紹介したが， SHA-1 の危殆化はかなり現実的な問題になってきている。
いますぐどうこうというわけではないが，これ以上の先延ばしは出来ない状態である。
しかし CA やブラウザが頑張っても「中間者デバイス」なる覗き屋が邪魔をする。&lt;/p&gt;

&lt;p&gt;やはりセキュリティ製品が暗号通信に対して「中間者攻撃」を仕掛けるのは筋が悪すぎると思うのだが，何とかならないものかねぇ。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Blockchain と Smart Contract - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/blockchain-and-smart-contract/" />
		<id>tag:text.Baldanders.info,2016-01-07:/remark/2016/01/blockchain-and-smart-contract/</id>
		<published>2016-01-07T20:50:45+09:00</published>
		<updated>2016-01-18T12:18:27+09:00</updated>
		<summary>Bitcoin は「誰が」取り引きしているかについて気にしないが，もっと広く smart contract を考えるのなら何らかの形で「誰が」を保証しなければならないし，そのための基盤（infrastructure）が必要となる，と思うのだがどうだろう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;年末忙しくて書き損ねてるネタを回収中。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20151223/blockchain&#34;&gt;「YAMDAS現更新履歴」の記事&lt;/a&gt;より。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115869/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp1&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中1話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115873/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp3&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中3話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昨年この記事を斜め読みした時は気づかなかったが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sakura.ad.jp/press/2015/1216_mijin_cloud_chain/&#34;&gt;さくらインターネットとテックビューロ、ブロックチェーンの実証実験環境「mijinクラウドチェーンβ」を金融機関やITエンジニア向けに無料提供～本日より申込受付を開始し、2016年1月から順次提供～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sakura.ad.jp/press/2016/0107_demonstration_platform/&#34;&gt;「さくらのクラウド」、「ASTERIA WARP」、「mijin」の3社製品･サービスによるプライベート･ブロックチェーン＆IoT実証実験プラットフォームの無償提供開始について＜無償提供期間：2016年1月18日～6月30日＞&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あぁ，これって広告記事だったのか。
感度低いなぁ，私（笑）&lt;/p&gt;

&lt;p&gt;上の記事からいくつか気になる部分を抜き出しておく。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;しかし、ブロックチェーン技術の登場により、既存の様々なセキュリティや整合性といった基準を妥協することなく、トランザクションあたりのコストが限りなくゼロに近づいていきます。そこで新しい常識として、「リアルタイムセトルメント」の概念が現実となります。そして締めの集計概念も、そもそもトランザクションに残高（バランス）の概念を持つブロックチェーンの基本機能でまかなえます。&lt;br&gt;
ビジネス慣習が締め処理からリアルタイム決済へパラダイムシフトすることにより、カウンターパーティーリスクも最小限となるだけではなく、既存の様々な頭痛の種が払拭されるでしょう。バッチ処理がされていたものに関してもリアルタイム処理へと移行し、真のリアルタイム24時間サービスの提供など、一般消費者もそこから大きな恩恵を得るに違いありません。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目）&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;現在主流のブロックチェーン技術は、処理の負荷を分散することが主目的ではないという点が分散型DBとは大きく違います。あくまでも主目的は物理的分散によるダウンタイムの払拭です。我々はデータ自体の分散や処理の分散の研究も進めておりますが、現在では全てのノードが同じデータを保有し、同じ仕事をすることができます。従って一般的なブロックチェーンの世界では、台数の増加がパフォーマンスの向上に直結しません。よって、「最低何台必要ですか？」の問いに対する答えは、「1台」となります。&lt;br&gt;
現在のブロックチェーン技術が、最新の分散型DBにデータベースとしてのスループット性能では勝つことはできません。ブロックチェーンが持つ大きな利点は、現在の金融システム等で必要とされる処理量であれば、データの整合性を保ったまま、物理的分散によりゼロダウンタイムを実現し、かつそこに同時に劇的なコスト削減をもたらすということに集約されます。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目）&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Blockchain の特徴は完全性と可用性にある，ということのようだ。
「&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;東雲銀子さん&lt;/a&gt;」みたいな人は要らなくなるかもしれない。&lt;/p&gt;

&lt;p&gt;ちなみに昨年までの私の Bitcoin や Blockchain に関する理解は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000827.shtml&#34;&gt;そろそろ Blockchain について勉強を始めるか — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このときのまとめをもう一度整理して再掲載しておくと&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Blockchain は「鎖」で繋がれた追記型データベース。「鎖」の途中のデータは取り消しも変更（改竄）もできない&lt;/li&gt;
&lt;li&gt;Blockchain の追記プロセスには不正の余地がないよう何らかの仕掛けが必要。 Bitcoin の場合は「作業証明（proof-of-work）」がそれにあたる&lt;/li&gt;
&lt;li&gt;Blockchain は P2P による分散型かつ fault tolerant（過失を許容する）なシステムだが最終的には fork も merge も許容しない&lt;/li&gt;
&lt;li&gt;Bitcoin のアドレス（実体は公開鍵）の帰属先について Bitcoin/Blockchain は関知しない。Bitcoin が気にするのは Blockchain に記載されるアドレスの一貫性と無矛盾性である。アドレスの証明が必要な場合は外部の PKI を利用するか新たに組み込む必要がある&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;私の関心領域は「信用モデル（trust model）」にあるため，このようなまとめになっている。
Bitcoin は「誰が」取り引きしているかについて気にしない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; が，もっと広く smart contract を考えるのなら何らかの形で「誰が」を保証しなければならないし，そのための基盤（infrastructure）が必要となる，と思うのだがどうだろう。&lt;/p&gt;

&lt;p&gt;私は Bitcoin そのものへの関心が薄いのだが，これは地方から見て Bitcoin がアベノミクスのごとき「彼岸」の話であることと，いわゆる FinTech（Financial Technology） なるバズワードは「畑違い」だから。
でも Blockchain 自身は FinTech 分野におさまらない可能性を持っていると思う。
ので，今後も情報を追いかけていくつもりである。&lt;/p&gt;

&lt;h2 id=&#34;参考ページ:0c973b9c2f93e7746db5aec1dc8b68cd&#34;&gt;参考ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/03/31/bitcoin-essay/&#34;&gt;誰も教えてくれないけれど、これを読めば分かるビットコインの仕組みと可能性 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boj.or.jp/research/wps_rev/rev_2015/rev15j13.htm/&#34;&gt;（日銀レビュー）「デジタル通貨」の特徴と国際的な議論 ：日本銀行 Bank of Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hshimo/items/093f40b856ba2436fbba&#34;&gt;スマートコントラクトとは何か? Smart Contractsの言葉の定義 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cryptocoin.hatenablog.com/entry/2015/07/22/001500&#34;&gt;Smart Contract - 暗号通貨のお勉強　～Bitcoin、Rippleを中心に～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tatarou1986/items/9d994896795a4871dc37&#34;&gt;BitCoinとBlockChainにまつわる誤解ーそんなことはできない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:0c973b9c2f93e7746db5aec1dc8b68cd&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W1BX3N2/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51aobp3mndL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W1BX3N2/baldandersinf-22/&#34;&gt;アンダーグラウンド・マーケット (朝日新聞出版)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;藤井太洋 &lt;/dd&gt;&lt;dd&gt;朝日新聞出版 2015-03-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00V7Y7DUS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00V7Y7DUS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ビッグデータ・コネクト (文春文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I3W45AS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I3W45AS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;オービタル・クラウド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CHIFA1M/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CHIFA1M.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Gene Mapper -full build-&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B019FV4BGI/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B019FV4BGI.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天冥の標Ⅸ　PART1　ヒトであるヒトとないヒトと (ハヤカワ文庫JA)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B019FV4BGS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B019FV4BGS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;中継ステーション〔新訳版〕 (ハヤカワ文庫SF)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;デジタル通貨ならこれかな。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-07&#34;&gt;2016-01-07&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51d7PAEntoL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;銀子の窓口（１） (バンブーコミックス 4コマセレクション)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;唐草ミチル &lt;/dd&gt;&lt;dd&gt;竹書房 2014-10-27&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0185M2QAQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0185M2QAQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;秘書の仕事じゃありません　２巻 (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0197POLV2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0197POLV2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;軍神ちゃんとよばないで　２巻 (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B018K0HAIQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B018K0HAIQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;私設花野女子怪館（２） (バンブーコミックス MOMOセレクション)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B013FVA8KW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B013FVA8KW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;腹黒舞子さんとの京生活（２） (バンブーコミックス 4コマセレクション)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B017XKJD84/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B017XKJD84.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;うしろのご先祖さま（２） (バンブーコミックス 4コマセレクション)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;金融界のクール・ビューティ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-07&#34;&gt;2016-01-07&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;これは匿名とは異なる。 Bitcoin の元帳である Blockchain は同期されたコピーを誰でも閲覧でき，同じ Bitcoin アドレスを使い続けるならそのアドレスに対する取引履歴を抽出することもできる。アドレスや取引履歴をもとに対象を絞り込むのは面倒だが不可能ではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ボットネット・テイクダウンと割れ窓理論 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/broken-windows-theory/" />
		<id>tag:text.Baldanders.info,2016-01-06:/remark/2016/01/broken-windows-theory/</id>
		<published>2016-01-06T21:04:43+09:00</published>
		<updated>2016-01-06T21:04:43+09:00</updated>
		<summary>結局これは他の犯罪と同じで，「割れ窓」をせっせと補修して回るだけではきりがなく，犯罪を起こす「社会の物質的条件」を変えていくことこそが本命なのである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E7%AE%A1%E5%AD%90&#34;&gt;管子&lt;/a&gt;」の中の有名な言葉に「倉廩満ちて礼節を知り，衣食足りて栄辱を知る」というのがある。
いわゆる「割れ窓理論（broken windows theory）」は，これと比較すると因果が逆であり，全く以って的外れである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3f46fb39de5d548520d8e2de8805aa77:bw&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3f46fb39de5d548520d8e2de8805aa77:bw&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
メリケンのインテリよりも古代人の言葉のほうが洞察が深いというのはなかなか皮肉が効いている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50756643.html&#34;&gt;エフセキュアブログ : Dridexの解体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50757427.html&#34;&gt;エフセキュアブログ : ボットネットテイクダウン狂想曲&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「ボットネット・テイクダウン（botnet take down）」とは，詐欺等の犯罪やサイバー攻撃の温床となっている&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%9C%E3%83%83%E3%83%88%E3%83%8D%E3%83%83%E3%83%88&#34;&gt;ボットネット&lt;/a&gt;の壊滅を目標として各国警察やセキュリティ企業などを中心に行われている活動を指す。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;本作戦は、関連サーバを押収し、当該ネットワークの管理者を起訴するとともに、より多くの感染端末を特定し、プロバイダ等を通じて感染端末の利用者に対して不正プログラムの駆除を促すことにより、感染端末を減少させることとしている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.npa.go.jp/cyber/goz/&#34;&gt;国際的なボットネットのテイクダウン作戦&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この作戦は、インターネットバンキングに係る不正送金事犯に使用されているとみられる不正プログラム「Game Over Zeus」（GOZ）のネットワークを崩壊させる“ボットネットのテイクダウン作戦”と呼ばれています。FBI、ユーロポールが中心となり、日本の警察を含む協力国の法執行機関が連携して、関連サーバを押収し、当該ネットワークの管理者を起訴しています。さらには、感染端末を特定し、プロバイダ等を通じてユーザに駆除を促すことにより、感染端末を減少させることも行っています。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.is702.jp/news/1591/partner/101_g/&#34;&gt;警察による国際的ボットネットの壊滅作戦&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;GOZ のテイクダウン作戦は有名だが，これ以外のボットネットについても順次テイクダウンが行われている。
しかし実際の効果はまちまちで場当たり的な印象がぬぐえず，この点が「割れ窓理論」が引き合いに出される理由なようだ。&lt;/p&gt;

&lt;p&gt;テイクダウン作戦のようなやり方は「電撃戦」としては効果があるかもれないが，長期的に継続しても効果が薄くなるだけのように思う。
むしろテイクダウン作戦の長期化はコストの浪費を招き，そのことが攻撃者に意味を与える（テロと同じ）。
その辺が分からないほど警察やセキュリティ企業は馬鹿ではないだろう。
しかし他にもっと効果的な方法がないのだから（今のところは）続けるしかないというのが現状かもしれない。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;それでも私個人的にはボットネットのテイクダウンに賛成派だったりします。賛成というのは、テイクダウンをやれば万事解決という意味ではなく、テイクダウンもボットネット一掃作戦の一部として有効だという意味です。実際、テイクダウンをきっかけとして捜査が進展することはよくあります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50757427.html&#34;&gt;ボットネットテイクダウン狂想曲&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;結局これは他の犯罪と同じで，「割れ窓」をせっせと補修して回るだけではきりがなく，犯罪を起こす「社会の物質的条件」を変えていくことこそが本命なのである。
もっとも，そこまでくれば警察の仕事というより政治家の仕事なのだが。
いや，経済学的センスのない日本の政治家には無理かな（笑）&lt;/p&gt;

&lt;h2 id=&#34;参考文献:3f46fb39de5d548520d8e2de8805aa77&#34;&gt;参考文献&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/417iD4x5N%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジョック ヤング Jock Young &lt;/dd&gt;&lt;dd&gt;洛北出版 2007-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764331/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764331.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;後期近代の眩暈―排除から過剰包摂へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4255008515/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4255008515.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;断片的なものの社会学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796700439/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4796700439.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スティグマの社会学―烙印を押されたアイデンティティ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764242/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764242.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新しい貧困 労働消費主義ニュープア&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062881357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062881357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;弱者の居場所がない社会――貧困・格差と社会的包摂 (講談社現代新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「割れ窓理論」についても言及あり。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283100/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283100/baldandersinf-22/&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ブルース・シュナイアー 井口 耕二 &lt;/dd&gt;&lt;dd&gt;日経BP社 2007-02-15&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4881359967/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4881359967.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号の秘密とウソ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797350997/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797350997.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新版暗号技術入門 秘密の国のアリス&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4594070507/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4594070507.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;チャイナ・ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159746/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159746.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;宇宙創成〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;日本語のタイトルはアレだが中身は名著。とりあえず読んどきなはれ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-14&#34;&gt;2014/09/14&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:3f46fb39de5d548520d8e2de8805aa77:bw&#34;&gt;「割れ窓理論」では米国ニューヨーク市警の事例が有名だろう。1993年から1996年にかけてニューヨークの犯罪発生率が 36% も減少した。しかし当時の警視総監は後の講演で，当時のニューヨークで「ゼロ・トレランス政策」は実施されていなかったと証言した。また当時の米国の主要都市の犯罪発生率は，犯罪対策の有無や警察体制に関わらず，全体的に減少傾向にあった。「ゼロ・トレランス政策とは、大量の人々が周縁に追いやられ、貧困にあえぎ、抑圧されるような社会をつくりだす排除の過程の一部をなすものであり、さらにいえば、それはたんなる保険統計的な処理にすぎないもので、司法というより公共衛生と呼ぶべき政策である」（『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;』より）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3f46fb39de5d548520d8e2de8805aa77:bw&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>コマンドライン・インタフェースとファサード・パターン - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/cli-and-facade-pattern/" />
		<id>tag:text.Baldanders.info,2016-01-05:/golang/cli-and-facade-pattern/</id>
		<published>2016-01-05T22:06:41+09:00</published>
		<updated>2016-01-06T09:48:00+09:00</updated>
		<summary>ファサード・パターンは DDD (Domain-Driven Design) と相性がよい。普通は Web アプリケーションのような多様なサブシステムを持つシステムを設計する際に導入する考え方だが， CLI の場合でもサブコマンドを構成するのであればファサード・パターンがよいだろう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラには &lt;a href=&#34;https://golang.org/pkg/flag/&#34; title=&#34;flag - The Go Programming Language&#34;&gt;&lt;code&gt;flag&lt;/code&gt;&lt;/a&gt; パッケージが標準で提供されており，いわゆるコマンドライン・インタフェース（Command line interface; CLI）の操作はこれでまかなうことができる。
ただし &lt;a href=&#34;https://golang.org/pkg/flag/&#34; title=&#34;flag - The Go Programming Language&#34;&gt;&lt;code&gt;flag&lt;/code&gt;&lt;/a&gt; パッケージではサブコマンドをサポートしていないためサブコマンドを構成したい場合は少し工夫が必要となる。
ちなみにサブコマンドとは，以下のようなコマンドラインの構成になっているアプリケーションである。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ command [golabal options] &amp;lt;sub-command&amp;gt; [sub-options] [arguments]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラの &lt;code&gt;go run&lt;/code&gt; もサブコマンドだし， &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; の &lt;code&gt;git commit&lt;/code&gt; とかもサブコマンドである。&lt;/p&gt;

&lt;h2 id=&#34;コマンドライン-インタフェースと-unix-philosophy:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;コマンドライン・インタフェースと UNIX Philosophy&lt;/h2&gt;

&lt;p&gt;ところで CLI でよく引き合いに出されるのが “&lt;a href=&#34;http://www.ru.j-npcs.org/usoft/WWW/LJ/Articles/unixtenets.html&#34; title=&#34;Tenets of the UNIX Philosophy&#34;&gt;UNIX Philosophy&lt;/a&gt;” と呼ばれるアプリケーションを作る際の哲学というか指針のようなものである。
曰く&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Small is beautiful. （小さいものは美しい）&lt;/li&gt;
&lt;li&gt;Make each program do one thing well. （各プログラムが一つのことをうまくやるようにせよ）&lt;/li&gt;
&lt;li&gt;Build a prototype as soon as possible. （できる限り早くプロトタイプを作れ）&lt;/li&gt;
&lt;li&gt;Choose portability over efficiency. （効率よりも移植しやすさを選べ）&lt;/li&gt;
&lt;li&gt;Store data in flat text files. （単純なテキストファイルにデータを格納せよ）&lt;/li&gt;
&lt;li&gt;Use software leverage to your advantage. （ソフトウェアの効率を優位さとして利用せよ）&lt;/li&gt;
&lt;li&gt;Use shell scripts to increase leverage and portability. （効率と移植性を高めるためにシェルスクリプトを利用せよ）&lt;/li&gt;
&lt;li&gt;Avoid captive user interfaces. （拘束的なユーザーインターフェースは作るな）&lt;/li&gt;
&lt;li&gt;Make every program a Filter. （全てのプログラムはフィルタとして振る舞うようにせよ）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の9項目&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:up&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:up&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
昨今は UNIX 互換環境でも GUI が普通になってきたので対話型のインタフェースも増えてきたが，それでも従来の CUI shell 上で動作するアプリケーションの需要が減ったわけではなく，サーバサイドではむしろ需要は大きくなっていると言ってもいい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で CLI アプリケーションを作る際に気をつける点としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;他のツールと shell を介して連携できるよう標準入出力を使ったフィルタプログラムとする&lt;/li&gt;
&lt;li&gt;外部データの入出力は JSON, YAML, TOML といったテキストを用い UTF-8 文字エンコーディングに統一する&lt;/li&gt;
&lt;li&gt;コードの可搬性（または移植性）を考慮し，プラットフォーム依存を避けるようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったところだろうか。
もともと &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はクロスプラットフォーム開発に強いため，それほど難しい要件ではないはずである。&lt;/p&gt;

&lt;h2 id=&#34;サブコマンドとファサード-パターン:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;サブコマンドとファサード・パターン&lt;/h2&gt;

&lt;p&gt;サブコマンド方式は一見 “&lt;a href=&#34;http://www.ru.j-npcs.org/usoft/WWW/LJ/Articles/unixtenets.html&#34; title=&#34;Tenets of the UNIX Philosophy&#34;&gt;UNIX Philosophy&lt;/a&gt;” に反しているように見えるが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は全てのパッケージをひとつの実行モジュールに結合してしまうため，関連する機能をサブコマンドとして組み込むのは悪くないやりかたである。&lt;/p&gt;

&lt;p&gt;サブコマンドを構成する場合は「ファサード・パターン（facade pattern）」で考えるとよい。
「ファサード」は「建物の正面」という意味だそうで，システム内の各サブシステムの窓口のように機能する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:fcd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:fcd&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/facade-pattern.svg&#34;&gt;&lt;img src=&#34;http://text.baldanders.info/images/facade-pattern.svg&#34; alt=&#34;Facade Pattern&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://text.baldanders.info/images/facade-pattern.svg&#34;&gt;Facade Pattern&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この図のようにファサード・パターンは DDD (Domain-Driven Design) と相性がよい。
普通は Web アプリケーションのような多様なサブシステムを含むシステムを設計する際に導入する考え方だが， CLI の場合でもサブコマンドを構成するのであればファサード・パターンがよいだろう。&lt;/p&gt;

&lt;h2 id=&#34;mitchellh-cli-パッケージ:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;mitchellh/cli パッケージ&lt;/h2&gt;

&lt;p&gt;CLI をサポートするパッケージはいくつか公開されているのだが，この中で今回は &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; パッケージを紹介する。
&lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; はサブコマンドをファサード・パターンで実装するのに便利な機能を実装している。&lt;/p&gt;

&lt;h3 id=&#34;command-インタフェース:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;Command インタフェース&lt;/h3&gt;

&lt;p&gt;まずは &lt;code&gt;Command&lt;/code&gt; インタフェース。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A command is a runnable sub-command of a CLI.
type Command interface {
	// Help should return long-form help text that includes the command-line
	// usage, a brief few sentences explaining the function of the command,
	// and the complete list of flags the command accepts.
	Help() string

	// Run should run the actual command with the given CLI instance and
	// command-line arguments. It should return the exit status when it is
	// finished.
	Run(args []string) int

	// Synopsis should return a one-line, short synopsis of the command.
	// This should be less than 50 characters ideally.
	Synopsis() string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Command&lt;/code&gt; インタフェースはサブコマンドの context 情報を構成するのに使う。
&lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; は &lt;code&gt;Command&lt;/code&gt; インタフェースに適合する型（&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt;）のインスタンスを受け取ってサブコマンドの制御を行う&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:t&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:t&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
さらに以下の関数値（function value）を示す型 &lt;code&gt;CommandFactory&lt;/code&gt; も用意されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// CommandFactory is a type of function that is a factory for commands.
// We need a factory because we may need to setup some state on the
// struct that implements the command itself.
type CommandFactory func() (Command, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように &lt;code&gt;Command&lt;/code&gt; 型のインスタンスを返す関数を型として定義し，この型のリストを作成するのである。&lt;/p&gt;

&lt;h3 id=&#34;cli-構造体:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;CLI 構造体&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; に渡す context 情報は &lt;code&gt;CLI&lt;/code&gt; 構造体にまとめられている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// CLI contains the state necessary to run subcommands and parse the
// command line arguments.
type CLI struct {
	// Args is the list of command-line arguments received excluding
	// the name of the app. For example, if the command &amp;quot;./cli foo bar&amp;quot;
	// was invoked, then Args should be []string{&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;}.
	Args []string

	// Commands is a mapping of subcommand names to a factory function
	// for creating that Command implementation. If there is a command
	// with a blank string &amp;quot;&amp;quot;, then it will be used as the default command
	// if no subcommand is specified.
	Commands map[string]CommandFactory

	// Name defines the name of the CLI.
	Name string

	// Version of the CLI.
	Version string

	// HelpFunc and HelpWriter are used to output help information, if
	// requested.
	//
	// HelpFunc is the function called to generate the generic help
	// text that is shown if help must be shown for the CLI that doesn&#39;t
	// pertain to a specific command.
	//
	// HelpWriter is the Writer where the help text is outputted to. If
	// not specified, it will default to Stderr.
	HelpFunc   HelpFunc
	HelpWriter io.Writer

	once           sync.Once
	isHelp         bool
	subcommand     string
	subcommandArgs []string
	topFlags       []string

	isVersion bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;構造体の中に &lt;code&gt;CommandFactory&lt;/code&gt; のリストが含まれていることがお分かりだろうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Commands map[string]CommandFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これによってサブコマンド名と対応する処理を関連付けている。&lt;/p&gt;

&lt;h3 id=&#34;ui-インタフェース:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;Ui インタフェース&lt;/h3&gt;

&lt;p&gt;入出力関数群を持つ &lt;code&gt;Ui&lt;/code&gt; インタフェースは以下のように定義されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Ui is an interface for interacting with the terminal, or &amp;quot;interface&amp;quot;
// of a CLI. This abstraction doesn&#39;t have to be used, but helps provide
// a simple, layerable way to manage user interactions.
type Ui interface {
	// Ask asks the user for input using the given query. The response is
	// returned as the given string, or an error.
	Ask(string) (string, error)

	// AskSecret asks the user for input using the given query, but does not echo
	// the keystrokes to the terminal.
	AskSecret(string) (string, error)

	// Output is called for normal standard output.
	Output(string)

	// Info is called for information related to the previous output.
	// In general this may be the exact same as Output, but this gives
	// Ui implementors some flexibility with output formats.
	Info(string)

	// Error is used for any error messages that might appear on standard
	// error.
	Error(string)

	// Warn is used for any warning messages that might appear on standard
	// error.
	Warn(string)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更に &lt;code&gt;Ui&lt;/code&gt; の特化クラスとして &lt;code&gt;BasicUi&lt;/code&gt; や &lt;code&gt;PrefixedUi&lt;/code&gt; や &lt;code&gt;ColoredUi&lt;/code&gt; が定義されている。
&lt;code&gt;ColoredUi&lt;/code&gt; は出力をカラーにできるが，残念ながら Windows のコマンドプロンプトには対応していないようだ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ui&lt;/code&gt; インタフェースは &lt;code&gt;Command&lt;/code&gt; インタフェースと組み合わせてサブコマンド側の context 情報を構成するのに使う。&lt;/p&gt;

&lt;h3 id=&#34;mitchellh-cli-パッケージのメリット:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;mitchellh/cli パッケージのメリット&lt;/h3&gt;

&lt;p&gt;上述したように &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; はサブコマンドをファサード・パターンで実装するのに便利な機能を実装している。
なおかつ &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; ではファサード・パターンを入れ子にすることができる。
たとえばサブコマンドのサブコマンドを構成することもできるのだ。&lt;/p&gt;

&lt;h2 id=&#34;mitchellh-cli-を使ってファサード-パターンを組んでみる:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;mitchellh/cli を使ってファサード・パターンを組んでみる&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; をファサード・パターンとして組みやすくするためのラッパーとして &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gofacade&#34; title=&#34;spiegel-im-spiegel/gofacade&#34;&gt;spiegel-im-spiegel/gofacade&lt;/a&gt; パッケージを作ってみた&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:li&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:li&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;まず，入出力の Context を定義するためのクラスとして &lt;code&gt;Context&lt;/code&gt; 構造体を作った。
中身は &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;BasicUi&lt;/code&gt; 構造体を埋め込んでいるだけである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:ebd1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:ebd1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Context inheritance cli.BasicUi
type Context struct {
	//Embedded BasicUi
	*cli.BasicUi
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更に &lt;code&gt;Context&lt;/code&gt; 構造体を包含する &lt;code&gt;Facade&lt;/code&gt; 構造体を定義する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Facade is context of facade
type Facade struct {
	//UI defines user interface of the Cli
	Cxt *Context
	// commands is a mapping of subcommand names to a factory function
	commands map[string]cli.CommandFactory
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Facade&lt;/code&gt; 構造体には &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;CommandFactory&lt;/code&gt; のリストを含んでいる。
このリストに &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Command&lt;/code&gt; インタフェースに適合するインスタンスを追加するための関数がこれ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:cl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:cl&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// AddCommand add command
func (f *Facade) AddCommand(name string, command cli.Command) {
	f.commands[name] = func() (cli.Command, error) {
		return command, nil
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にファサードを実行するには以下の関数を起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Run facade
func (f *Facade) Run(appName, version string, args []string) (int, error) {
	c := cli.NewCLI(appName, version)
	c.Args = args
	c.Commands = f.commands
	c.HelpWriter = f.Cxt.Writer
	return c.Run()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他に細かい道具はあるが，まぁこんなもんだろう。&lt;/p&gt;

&lt;h3 id=&#34;spiegel-im-spiegel-gofacade-の実装例:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;spiegel-im-spiegel/gofacade の実装例&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gofacade&#34; title=&#34;spiegel-im-spiegel/gofacade&#34;&gt;spiegel-im-spiegel/gofacade&lt;/a&gt; パッケージの実装例として &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34; title=&#34;spiegel-im-spiegel/astrocalc&#34;&gt;spiegel-im-spiegel/astrocalc&lt;/a&gt; パッケージに CLI ツールを追加してみた。
こんな感じのコマンドラインを構成してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ astrocalc [-v | -h] mjdn &amp;lt;year&amp;gt; &amp;lt;month&amp;gt; &amp;lt;day&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まず &lt;code&gt;astrocalc mjdn&lt;/code&gt; サブコマンドを以下のように定義する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package mjdnCmd

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;strings&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/mjdn&amp;quot;
	&amp;quot;github.com/spiegel-im-spiegel/gofacade&amp;quot;
)

// Name は mjdn コマンド名を定義する
const Name string = &amp;quot;mjdn&amp;quot;

// Context は mjdn コマンドのコンテキストを定義する
type Context struct {
	//Embedded gofacade.Context
	*gofacade.Context
	//AppName にはアプリケーション名を格納する
	AppName string
}

// Command は Context のインスタンスを返す
func Command(cxt *gofacade.Context, appName string) *Context {
	return &amp;amp;Context{Context: cxt, AppName: appName}
}

// Synopsis は mjdn コマンドの概要を返す
func (c Context) Synopsis() string {
	return &amp;quot;Calculation of Modified Julian Day&amp;quot;
}

// Help は mjdn コマンドのヘルプを返す
func (c Context) Help() string {
	helpText := `
Usage: astrocalc mjdn &amp;lt;year&amp;gt; &amp;lt;month&amp;gt; &amp;lt;day&amp;gt;
`
	return fmt.Sprintln(strings.TrimSpace(helpText))
}

// Run は mjdn コマンドを実行する
func (c Context) Run(args []string) int {
	flags := flag.NewFlagSet(Name, flag.ContinueOnError)
	flags.Usage = func() {
		c.Error(c.Help())
	}
	// Parse commandline flag
	if err := flags.Parse(args); err != nil {
		return gofacade.ExitCodeError
	}
	if flags.NArg() != 3 {
		c.Error(fmt.Sprintf(&amp;quot;年月日を指定してください\n\n%s&amp;quot;, c.Help()))
		return gofacade.ExitCodeError
	}
	argsStr := flags.Args()
	var ymd = make([]int, 3)
	for i, arg := range argsStr {
		num, err := strconv.Atoi(arg)
		if err != nil {
			c.Error(fmt.Sprintln(err))
			return gofacade.ExitCodeError
		}
		ymd[i] = num
	}
	tm := time.Date(ymd[0], time.Month(ymd[1]), ymd[2], 0, 0, 0, 0, time.UTC)
	c.Output(fmt.Sprint(mjdn.DayNumber(tm)))
	return gofacade.ExitCodeOK
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポイントは &lt;code&gt;astrocalc mjdn&lt;/code&gt; サブコマンド用の context 情報として &lt;code&gt;Context&lt;/code&gt; 構造体を定義しているところ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Context は mjdn コマンドのコンテキストを定義する
type Context struct {
	//Embedded gofacade.Context
	*gofacade.Context
	//AppName にはアプリケーション名を格納する
	AppName string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gofacade&#34; title=&#34;spiegel-im-spiegel/gofacade&#34;&gt;&lt;code&gt;gofacade&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Context&lt;/code&gt; 構造体を埋め込みフィールドで定義しているのがお分かりだろうか。
&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gofacade&#34; title=&#34;spiegel-im-spiegel/gofacade&#34;&gt;&lt;code&gt;gofacade&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Context&lt;/code&gt; はさらに &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;BasicUi&lt;/code&gt; 構造体を埋め込んでいる。
また &lt;code&gt;Context&lt;/code&gt; 構造体は &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Command&lt;/code&gt; インタフェースの特化クラスとして実装している。&lt;/p&gt;

&lt;p&gt;では，この &lt;code&gt;Context&lt;/code&gt; 構造体を使ってアプリケーションの起動部分を書いてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/internal/mjdnCmd&amp;quot;
	&amp;quot;github.com/spiegel-im-spiegel/gofacade&amp;quot;
)

const (
	// Name はアプリケーション名を定義する
	Name string = &amp;quot;astrocalc&amp;quot;
	// Version はアプリケーションのバージョン番号を定義する
	Version string = &amp;quot;0.1.0&amp;quot;
)

func setupFacade(cxt *gofacade.Context) *gofacade.Facade {
	fcd := gofacade.NewFacade(cxt)
	fcd.AddCommand(mjdnCmd.Name, mjdnCmd.Command(cxt, Name))
	return fcd
}

func main() {
	cxt := gofacade.NewContext(os.Stdin, os.Stdout, os.Stderr)
	fcd := setupFacade(cxt)
	rtn, err := fcd.Run(Name, Version, os.Args[1:])
	if err != nil {
		cxt.Error(fmt.Sprintln(err))
	}
	os.Exit(rtn)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;setupFacade()&lt;/code&gt; 関数でファサードを作成し， &lt;code&gt;main()&lt;/code&gt; 関数で実行しているのが分かると思う。
では実際に compile &amp;amp; run してみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\astrocalc&amp;gt; pushd C:\workspace\astrocalc\src\github.com\spiegel-im-spiegel\astrocalc

C:\workspace\astrocalc\src\github.com\spiegel-im-spiegel\astrocalc&amp;gt; glide up
[INFO] Fetching updates for github.com/spiegel-im-spiegel/gofacade.
[INFO] Found glide.yaml in C:\workspace\astrocalc\src\github.com\spiegel-im-spiegel\astrocalc\vendor\github.com\spiegel-im-spiegel\gofacade/glide.yaml
[INFO] Fetching updates for github.com/mitchellh/cli.
[INFO] Scanning github.com/mitchellh/cli for dependencies.
[INFO] ==&amp;gt; Unknown github.com/bgentry/speakeasy (github.com/bgentry/speakeasy)
[INFO] ==&amp;gt; Unknown github.com/mattn/go-isatty (github.com/mattn/go-isatty)
[INFO] Fetching updates for github.com/bgentry/speakeasy.
[INFO] Fetching updates for github.com/mattn/go-isatty.
[INFO] Scanning github.com/bgentry/speakeasy for dependencies.
[INFO] Scanning github.com/mattn/go-isatty for dependencies.
[INFO] Project relies on 4 dependencies.
[INFO] Writing glide.lock file

C:\workspace\astrocalc\src\github.com\spiegel-im-spiegel\astrocalc&amp;gt; popd

C:\workspace\astrocalc&amp;gt; go install -v github.com/spiegel-im-spiegel/astrocalc
github.com/spiegel-im-spiegel/astrocalc/mjdn
github.com/spiegel-im-spiegel/astrocalc/vendor/github.com/bgentry/speakeasy
github.com/spiegel-im-spiegel/astrocalc/vendor/github.com/mattn/go-isatty
github.com/spiegel-im-spiegel/astrocalc/vendor/github.com/mitchellh/cli
github.com/spiegel-im-spiegel/astrocalc/vendor/github.com/spiegel-im-spiegel/gofacade
github.com/spiegel-im-spiegel/astrocalc/internal/mjdnCmd
github.com/spiegel-im-spiegel/astrocalc

C:\workspace\astrocalc&amp;gt; bin\astrocalc.exe -h
usage: astrocalc [--version] [--help] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]

Available commands are:
    mjdn    Calculation of Modified Julian Day

C:\workspace\astrocalc&amp;gt; bin\astrocalc.exe -h mjdn
Usage: astrocalc mjdn &amp;lt;year&amp;gt; &amp;lt;month&amp;gt; &amp;lt;day&amp;gt;

C:\workspace\astrocalc&amp;gt; bin\astrocalc.exe mjdn 2015 1 1
57023 (2015-01-01)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よしよし。
うまくいった。
なお &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; については「&lt;a href=&#34;http://text.baldanders.info/golang/vendoring-with-glide/&#34;&gt;Glide で Vendoring&lt;/a&gt;」を参考にどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yuuki.hatenablog.com/entry/go-cli-unix&#34;&gt;Go言語によるCLIツール開発とUNIX哲学について - ゆううきブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tellme.tokyo/post/2015/06/23/unix_cli_tool_go/&#34;&gt;開発者から見た UNIX 哲学とコマンドラインツールと Go言語 - TELLME.TOKYO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ryochack.hatenablog.com/entry/2013/04/17/232753&#34;&gt;Go言語のflagパッケージを使う - uragami note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/04/17/panicwrap/&#34;&gt;Go言語のCLIツールのpanicをラップしてクラッシュレポートをつくる | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kumatch/items/258d7984c0270f6dd73a&#34;&gt;flag 並にシンプルでより強力な CLI パーサ kingpin の紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8ATHGW/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41mh5r0NwLL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8ATHGW/baldandersinf-22/&#34;&gt;増補改訂版 Java言語で学ぶデザインパターン入門&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2004-06-18&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1BS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1BS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1EU/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1EU.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Java言語で学ぶリファクタリング入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00JEYPPOE/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00JEYPPOE.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Code Complete 第2版 上　完全なプログラミングを目指して&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0197SZZZ0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0197SZZZ0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;日経Linux（リナックス） 2016年 1月号 [雑誌]&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00V2WMQNE/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00V2WMQNE.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;改訂2版　パーフェクトJava&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-05&#34;&gt;2016-01-05&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:up&#34;&gt;翻訳は &lt;a href=&#34;https://ja.wikipedia.org/wiki/UNIX%E5%93%B2%E5%AD%A6&#34;&gt;Wikipedia の記事&lt;/a&gt;から拝借させてもらった。ちなみに &lt;a href=&#34;https://ja.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License&#34;&gt;Wikipedia のコンテンツは基本的には by-sa ライセンスで公開&lt;/a&gt;されている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:up&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:fcd&#34;&gt;ファサード自身はサブシステムの詳細を知らず context 情報を渡して処理をキックするのみなのが特徴。サブシステム側はファサードに依存せず， context 情報さえあれば処理可能にするのがコツである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:fcd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:t&#34;&gt;型（&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt;）については「&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:t&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:li&#34;&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gofacade&#34; title=&#34;spiegel-im-spiegel/gofacade&#34;&gt;spiegel-im-spiegel/gofacade&lt;/a&gt; は &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;CC0&lt;/a&gt; で公開している。個人的には実証コードの扱いなので，（著作権情報の書き換えも含めて）自由に利用して 構わない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:li&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:ebd1&#34;&gt;なんでこんな回りくどいことをしているかというと， &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; パッケージをカプセル化したかったから。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:ebd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:cl&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では関数は全て関数閉包（closure）として機能する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:cl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
