<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2020-01-01:/</id>
	<updated>2020-01-01T11:20:52+00:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>私達の10年</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/01/our-decade/" />
		<id>tag:text.Baldanders.info,2020-01-01:/remark/2020/01/our-decade/</id>
		<published>2020-01-01T11:20:37+00:00</published>
		<updated>2020-01-01T11:20:52+00:00</updated>
		<summary>考えるまでもなく今年は2020年で，この10年を振り返る節目の年である。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;なんとなく予感がしてたけど，やはり風邪を引いてしまった。
昨夜に&lt;a href=&#34;https://text.baldanders.info/remark/2020/01/2020-holidays/&#34; title=&#34;2020年の祝日休日&#34;&gt;前回の記事&lt;/a&gt;を書いて以降，飯時以外はずっと寝ている。
おかげで年末年始のテレビから完全に解脱（笑）できました。
ケータイから元日の Twitter や Facebook の TL を見ても「みんなテレビで消耗してるんだなぁ」という感想しか浮かばない。&lt;/p&gt;
&lt;p&gt;昨年痛感したのが「日常に忙殺されることの恐ろしさ」で，これはほとんど思考停止に近い状況だった。
そんな状況を予想し，安易に知ったかぶりしないで「政治的無関心」を年次目標に掲げた昨年初の私を誰か褒めてくれ（笑）&lt;/p&gt;
&lt;p&gt;故に「今年の目標も『政治的無関心』でいっか」と思ったのだが，以下の記事を読んで今年は少し考え方を変えることにした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wired.com/story/the-two-myths-of-the-internet/&#34;&gt;The Two Myths of the Internet | WIRED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2020/01/2.html&#34;&gt;ブログ: 2つのインターネットの神話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相変わらず WIRED.jp はこういう重要な記事の翻訳はしないのな。
どのみち WIRED.jp は全く参照しなくなったので別にいいんだけど。&lt;/p&gt;
&lt;p&gt;考えてみれば，いや考えるまでもなく今年は2020年で，この10年を振り返る節目の年である。
そしてネット関連でこの10年最大のトピックは上の記事でも挙げられているように&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;アラブの春（から続く中東の混乱）&lt;/li&gt;
&lt;li&gt;スノーデンによる NSA 内部告発&lt;/li&gt;
&lt;li&gt;監視資本主義による個人の搾取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;の3つだろう。&lt;/p&gt;
&lt;p&gt;白田秀彰さんの「&lt;a href=&#34;https://www.aozora.gr.jp/cards/000021/card4307.html&#34;&gt;グリゴリの捕縛&lt;/a&gt;」に引きつけて考えるなら「アラブの春」は暴力，「スノーデンによる NSA 内部告発」は情報力，「監視資本主義による個人の搾取」は経済力に対して，ネットや技術がどのような役割を演じたかを端的に物語っている。&lt;/p&gt;
&lt;p&gt;私は上の記事の内容全てに同意するわけではないが，少なくとも &lt;q lang=&#34;en&#34;&gt;Technologies determine nothing. Technologies influence everything&lt;/q&gt; というフレーズについてはそのとおりだと思う。&lt;/p&gt;
&lt;p&gt;この10年を振り返る上で日本語圏には優れた文献がある。
yomoyomo さんによる『&lt;a href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来&lt;/a&gt;』だ。
分厚い内容で&lt;a href=&#34;https://text.baldanders.info/remark/2019/01/infoshare2/&#34; title=&#34;『もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来』を読む（ボーナストラック以外）&#34;&gt;一気に読むと頭がクラクラする&lt;/a&gt;が，必読書であることは間違いないだろう。&lt;/p&gt;
&lt;p&gt;というわけで，私の今年の目標は少し上方修正して&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;ruby&gt;&lt;rb&gt;お祭り騒ぎ&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;東京オリンピック&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;で消耗しない&lt;/li&gt;
&lt;li&gt;これからの10年を見据えた考察（と行動）を行う&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;とする。
まぁ，その前に日常に忙殺される現在の状況を何とかしないといけないのだが，これが一番難しい。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00E6NPCBO?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51OEOdQe1dL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00E6NPCBO?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;OUR DECADE&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Godiego (メインアーティスト)&lt;/dd&gt;
    &lt;dd&gt;COLUMBIA (Release 2013-08-07)&lt;/dd&gt;
    &lt;dd&gt;MP3 ダウンロード&lt;/dd&gt;
    &lt;dd&gt;B00E6NPCBO (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私が10代の頃にもっとも影響を受けたアルバムのひとつ。生物年齢的にも中二病まっしぐらだった私に深く刺さった「かっこいい」アルバムだったのだ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-01-01&#34;&gt;2020-01-01&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B012DZ1NUA?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/513xO0idqOL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B012DZ1NUA?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;仮面ライダーディケイド&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;梶淳 (プロデュース), 白倉伸一郎 (プロデュース), 武部直美 (プロデュース), 和佐野健一 (プロデュース)&lt;/dd&gt;
    &lt;dd&gt;&lt;/dd&gt;
    &lt;dd&gt;Prime Video&lt;/dd&gt;
    &lt;dd&gt;B012DZ1NUA (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;3&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;今見ても謎の作品。井上正大の出世作（？）であの二眼レフ・トイカメラの出世作でもある（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-01-01&#34;&gt;2020-01-01&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hreview&#34; &gt;
	&lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;&lt;img src=&#34;https://tatsu-zine.com/images/books/877/cover_s.jpg&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;yomoyomo&lt;/dd&gt;
      &lt;dd&gt;達人出版会 2017-12-25&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
      &lt;/abbr&gt;&lt;/dd&gt;
    &lt;/dl&gt;
    &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://wirelesswire.jp/author/yomoyomo/&#34;&gt;WirelessWire News 連載&lt;/a&gt;の書籍化。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2019/01/infoshare2/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
	&lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018-12-31&lt;/abbr&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hreview&#34; &gt;
	&lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://tatsu-zine.com/books/infoshare&#34;&gt;&lt;img src=&#34;https://tatsu-zine.com/images/books/15/cover_s.jpg&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
    &lt;dl class=&#34;fn&#34;&gt;
      &lt;dt&gt;&lt;a href=&#34;https://tatsu-zine.com/books/infoshare&#34;&gt;情報共有の未来&lt;/a&gt;&lt;/dt&gt;
      &lt;dd&gt;yomoyomo&lt;/dd&gt;
      &lt;dd&gt;達人出版会 2011-12-30&lt;/dd&gt;
      &lt;dd&gt;評価&amp;nbsp;&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;
        &lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;
      &lt;/abbr&gt;&lt;/dd&gt;
    &lt;/dl&gt;
    &lt;p class=&#34;description&#34;&gt;同名ブログの書籍化。感想は&lt;a href=&#34;https://baldanders.info/blog/000611/&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;
    &lt;p class=&#34;powered-by&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34;&gt;2018-12-31&lt;/abbr&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.aozora.gr.jp/cards/000021/card4307.html&#34;&gt;&lt;img src=&#34;https://text.baldanders.info/images/aozora/card4307.svg&#34; width=&#34;110&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.aozora.gr.jp/cards/000021/card4307.html&#34;&gt;グリゴリの捕縛&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;白田 秀彰&lt;/dd&gt;
    &lt;dd&gt; 2001-11-26 (Release 2014-09-17)&lt;/dd&gt;
    &lt;dd&gt;青空文庫&lt;/dd&gt;
    &lt;dd&gt;4307 (図書カードNo.)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;白田秀彰さんの「&lt;a href=&#34;http://orion.mt.tama.hosei.ac.jp/hideaki/kenporon.htm&#34;&gt;グリゴリの捕縛&lt;/a&gt;」が青空文庫に収録されていた。
内容は &lt;strike&gt;怪獣大決戦&lt;/strike&gt; おっと憲法（基本法）についてのお話。
古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。
その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-03-30&#34;&gt;2019-03-30&lt;/abbr&gt; (powered by &lt;a href=&#34;https://aozorahack.org/&#34;&gt;aozorahack&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>2020年の祝日休日</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/01/2020-holidays/" />
		<id>tag:text.Baldanders.info,2020-01-01:/remark/2020/01/2020-holidays/</id>
		<published>2019-12-31T21:51:58+00:00</published>
		<updated>2019-12-31T21:58:13+00:00</updated>
		<summary>今年はオリンピックのせいで祝日が変則になっている。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;みなさま，あけましておめでとうございます。
年末ギリギリまでドタバタしてたので全然「明けた」気がしないけど，まぁ今年もよろしくお願いします。&lt;/p&gt;
&lt;p&gt;今年はオリンピックのク◯野郎のせいで祝日が変則になっている。
そこで，覚え書きとして2020年の祝日休日について記しておく。
ホンマ，面倒くさいったら&amp;hellip;&lt;/p&gt;
&lt;p&gt;2020年の「国民の祝日」およびその他の休日は以下の通り&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;祝日休日名&lt;/th&gt;
&lt;th&gt;日付&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;元日&lt;/td&gt;
&lt;td&gt;2020-01-01 (水)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;成人の日&lt;/td&gt;
&lt;td&gt;2020-01-13 (月)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;建国記念の日&lt;/td&gt;
&lt;td&gt;2020-02-11 (火)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;天皇誕生日&lt;/td&gt;
&lt;td&gt;2020-02-23 (日)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;休日&lt;/td&gt;
&lt;td&gt;2020-02-24 (月)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;春分の日&lt;/td&gt;
&lt;td&gt;2020-03-20 (金)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;昭和の日&lt;/td&gt;
&lt;td&gt;2020-04-29 (水)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;憲法記念日&lt;/td&gt;
&lt;td&gt;2020-05-03 (日)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;みどりの日&lt;/td&gt;
&lt;td&gt;2020-05-04 (月)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;こどもの日&lt;/td&gt;
&lt;td&gt;2020-05-05 (火)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;休日&lt;/td&gt;
&lt;td&gt;2020-05-06 (水)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;海の日&lt;/td&gt;
&lt;td&gt;2020-07-23 (木)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;スポーツの日&lt;/td&gt;
&lt;td&gt;2020-07-24 (金)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;山の日&lt;/td&gt;
&lt;td&gt;2020-08-10 (月)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;敬老の日&lt;/td&gt;
&lt;td&gt;2020-09-21 (月)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;秋分の日&lt;/td&gt;
&lt;td&gt;2020-09-22 (火)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文化の日&lt;/td&gt;
&lt;td&gt;2020-11-03 (火)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;勤労感謝の日&lt;/td&gt;
&lt;td&gt;2020-11-23 (月)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;つまりオリンピック期間に寄せて海の日，山の日，スポーツの日が変更になっているわけやね&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;「国民の祝日に関する法律」が改正され、平成32年から「体育の日」は「スポーツの日」となります。また、平成32年に限り、「海の日」は7月23日に、「スポーツの日」は7月24日に、「山の日」は8月10日となります&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.nao.ac.jp/news/topics/2019/20190201-rekiyoko.html&#34;&gt;平成32（2020）年暦要項の発表 | 国立天文台(NAOJ)&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;おかげで10月は祝日がない &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ちなみに日本の祝日休日は毎年2月1日に国立天文台から翌年のものが発表される。
したがって国立天文台の発表内容が正式である。
ついでに言うと，祝日を含む暦象について&lt;a href=&#34;https://eco.mtk.nao.ac.jp/koyomi/&#34; title=&#34;国立天文台 天文情報センター 暦計算室&#34;&gt;国立天文台から Google カレンダーのデータも公開&lt;/a&gt;されているので，インポートしておくとよいだろう。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/05/google-ephemeris/&#34;&gt;カレンダーに祝日を入れたいなら国立天文台へ行けばいいじゃない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/11/astronomical-calendar-2020/&#34;&gt;2020年の主な暦象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4416719485?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41aDY33z67L._SL160_.jpg&#34; width=&#34;112&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4416719485?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;天文年鑑 2020年版&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;天文年鑑 編集委員会 (編集)&lt;/dd&gt;
    &lt;dd&gt;誠文堂新光社 2019-11-20&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4416719485 (ASIN), 9784416719480 (EAN), 4416719485 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;天文ファン必携。2020年版。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-11-23&#34;&gt;2019-11-23&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;「国民の祝日」は休日となる。また「「国民の祝日」が日曜日に当たるときは、その日後においてその日に最も近い「国民の祝日」でない日を休日とする」（「国民の祝日に関する法律」より）。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;海の日は7月第3月曜日，山の日は8月11日，スポーツの日は10月第2月曜日が本来の日付。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>ATOM エディタでリモートのディレクトリ・ファイルを同期する</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/12/remote-sync-with-atom/" />
		<id>tag:text.Baldanders.info,2019-12-31:/remark/2019/12/remote-sync-with-atom/</id>
		<published>2019-12-31T10:13:34+00:00</published>
		<updated>2019-12-31T10:14:55+00:00</updated>
		<summary>remote-sync が設定や操作がシンプルなので，これを使うことにした。 </summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;まぁ，独りで作業するなら &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt; で管理するほうが安全なのだが，リモートのサーバとちょっとしたファイルのやり取りをするために &lt;a href=&#34;https://filezilla-project.org/&#34; title=&#34;FileZilla - The free FTP solution&#34;&gt;FileZilla&lt;/a&gt; を起動して接続するのは大袈裟でかったるいなぁ思い始め「そういや &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; のパッケージでリモートのファイルを直接編集できるパッケージがなかったっけ？」と探してみた。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/remote-ftp&#34;&gt;remote-ftp&lt;/a&gt; を推す記事が多かったので最初はこれを導入してみたが，何故か sftp で接続できんのよ。
しょうがないので他のパッケージを漁ってみたのだが &lt;a href=&#34;https://atom.io/packages/remote-sync&#34;&gt;remote-sync&lt;/a&gt; が設定や操作がシンプルなので，これを使うことにした。
厳密にはリモートのファイルを直接編集するわけではないのだが，まぁいいや。&lt;/p&gt;
&lt;p&gt;まずはローカル側とリモート側で同期するディレクトリを作成する。&lt;/p&gt;
&lt;p&gt;ローカル側で作成したディレクトリをプロジェクトのルートとして &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; を起動し，コマンドパレットから “Remote Sync: Configure” を選択するか Tree View のコンテキストメニューから  “Remote Sync” → “Configure” と選択する。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./remote-sync-context-menu.png&#34;&gt;&lt;img src=&#34;./remote-sync-context-menu.png&#34; srcset=&#34;./remote-sync-context-menu.png 680w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;すると以下の設定画面が表示されるので必要な情報を設定して &lt;code&gt;[Save]&lt;/code&gt; する。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./remote-sync-configure.png&#34;&gt;&lt;img src=&#34;./remote-sync-configure.png&#34; srcset=&#34;./remote-sync-configure.png 530w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;これで準備完了。
“uploadOnSave” にチェックが入っていればセーブするたびにリモートのファイルを更新してくれる。
その他の機能についてはコマンドパレットまたはコンテキストメニューから起動できる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;ちなみに設定内容はロカール側のプロジェクト・ディレクトリ直下の &lt;code&gt;.remote-sync.json&lt;/code&gt; に格納されている。
中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;logger&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Remote Sync&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;uploadOnSave&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;useAtomicWrites&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;deleteLocal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2222&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/home/username/docs/sync&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;ignore&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;.remote-sync.json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;.git/**&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;useAgent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;transport&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;scp&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このファイルさえあれば任意のディレクトリを同期ディレクトリにできるわけだ。&lt;/p&gt;
&lt;p&gt;とりあえず，こんなもんかな。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Diff ツールについては初期状態では何も指定されていないので &lt;a href=&#34;https://atom.io/packages/remote-sync&#34;&gt;remote-sync&lt;/a&gt; の設定で任意のツールを指定する。個人的には KDiff3 がオススメ。 &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; なら apt コマンドで導入できる。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>2019-12-28 のブックマーク</title>
		<category term="bookmarks" label="bookmarks" scheme="https://text.baldanders.info/bookmarks/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/bookmarks/2019/12/28-bookmarks/" />
		<id>tag:text.Baldanders.info,2019-12-28:/bookmarks/2019/12/28-bookmarks/</id>
		<published>2019-12-28T10:29:55+00:00</published>
		<updated>2019-12-28T10:31:41+00:00</updated>
		<summary>「ロシア、インターネットからの自国切り離し実験に成功」他</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;h2 id=&#34;heading&#34;&gt;リリース情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/news/0.62.0-relnotes/&#34;&gt;Hugo Christmas Edition! | Hugo&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nasust.com/hugo/tips/markdown_render_hooks/&#34;&gt;Markdown Render Hooks - リンクや画像のテンプレートを作成する仕組み | Hugo 入門 / 解説 | nasust dev blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nasust.com/hugo/functions/render_string/&#34;&gt;.RenderString | Markdownの文字列をHTMLに変換する | Hugo 入門 / 解説 | nasust dev blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;バベルのインターネット&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35147348/&#34;&gt;﻿ロシア、インターネットからの自国切り離し実験に成功 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/12/27/2019-12-26-wikipedia-ban-ruled-unconstitutional-by-turkish-court/&#34;&gt;ウィキペディア禁止は違憲とトルコ憲法裁判所が裁定  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fsight.jp/articles/-/46325&#34;&gt;「和製プラットフォーマー」を「誤爆」する「GAFA」規制案：大西康之 | 記事 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/12/27/2019-12-26-wikimedia-foundation-expresses-deep-concerns-about-indias-proposed-intermediary-liability-rules/&#34;&gt;ウィキメディア財団がインドが提案する仲介者責任規則に深い懸念を表明  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;セキュリティ＆プライバシー関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/about/security-model/&#34;&gt;Hugo&#39;s Security Model | Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pc.watch.impress.co.jp/docs/news/1225/962/index.html&#34;&gt;2億6,700万ユーザーの名前と電話番号がFacebookから流出 ～SMSスパムなどに使われる可能性 - PC Watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.technologyreview.jp/s/174329/the-fall-and-rise-of-a-spyware-empire/&#34;&gt;MIT Tech Review: ハッキングされた「ハッキング・チーム」 崩壊と再建のシナリオ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35147387/&#34;&gt;オープンソースのSSOソフト最新版「OpenAM14」が公開&amp;ndash;パスワードレス化に対応 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/announce/alert20191225.html&#34;&gt;ECサイト構築で多く利用されている「EC-CUBE」を用いたウェブサイトでの情報漏えい被害の増加について：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zdnet.com/article/chinese-hacker-group-caught-bypassing-2fa/&#34;&gt;Chinese hacker group caught bypassing 2FA | ZDNet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2019/12/chinese_hackers_1.html&#34;&gt;Chinese Hackers Bypassing Two-Factor Authentication - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;天文関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hpn.hatenablog.com/entry/2019/12/24/183721&#34;&gt;暗いベテルギウス - 星のつぶやき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://astro-limovie.info/jclo/doccuments/Handbook/&#34;&gt;星食観測ハンドブック2020 発刊のお知らせ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alma-telescope.jp/news/mambo9-201912&#34;&gt;ニュース - アルマ望遠鏡、重力レンズ効果を受けない最遠の星形成銀河を発見 - アルマ望遠鏡&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-4&#34;&gt;知財関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/copyright/2887&#34;&gt;EU調査：海賊版サイトの利用が大幅減少、ただし全容把握は難しく | P2Pとかその辺のお話R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20191227/oapen&#34;&gt;人文・社会科学の学術図書のオープンアクセスを推進し、CCライセンスの出版物をダウンロードできるOAPENコンソーシアムを今さら知る - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-5&#34;&gt;その他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/privacy/2829&#34;&gt;テックワーカーと消費者がテクノロジーを悪用した人権侵害を防ぐためにできること | P2Pとかその辺のお話R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fsight.jp/articles/-/46290&#34;&gt;強まるトルコ＝カタールの紐帯：池内恵 | 池内恵の中東通信 | 新潮社　Foresight(フォーサイト) | 会員制国際情報サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/12/22/2019-12-20-vape-lung-is-on-the-decline-as-cdc-report-fixes-blame-on-oily-additive/&#34;&gt;電子たばこによる肺疾患が減少傾向、原因はビタミンEアセテートか  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.archive.org/2019/12/20/lawrence-lessig-being-a-citizen-is-a-public-office-too/&#34;&gt;Lawrence Lessig: Being a Citizen is a Public Office, too | Internet Archive Blogs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2019/12/blog-post_77.html&#34;&gt;ブログ: ローレンス・レッシグ: 市民であることも公職である&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/aws_5.html&#34;&gt;AWS、オープンソースベンダのライセンス変更による商用サービスの制限は「顧客を見ていない」と反論 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1225934.html&#34;&gt;さよならFTP ～「Google Chrome 80」でFTP接続は非推奨に - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35146475/&#34;&gt;マイクロソフト、Rustベースのセキュアなプログラミング言語を探求中 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rjlipton.wordpress.com/2019/12/22/predicting-when-pnp-is-resolved/&#34;&gt;Predicting When P=NP is Resolved | Gödel&#39;s Lost Letter and P=NP&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2019/12/pnp.html&#34;&gt;ブログ: P=NPがいつ解決されるかを予測する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/webassemblytensorflowjsweb100.html&#34;&gt;WebAssembly版のTensorFlow.jsが登場、Webブラウザでの推論処理を10倍以上高速に実行 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2019/12/blog-post_24.html&#34;&gt;ブログ: 非常に多くの日本人の子どもたちが学校に行くことを拒否する理由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nautil.us/issue/79/catalysts/where-is-my-mind&#34;&gt;Where Is My Mind? - Issue 79: Catalysts - Nautilus&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2019/12/blog-post_23.html&#34;&gt;ブログ: 心はどこにあるのか?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aozora.gr.jp/aozorablog/?p=4314&#34;&gt;aozorablog » タロットの絵解キ／杖の組（Ａ・Ｅ・ウェイト／大久保ゆう訳）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.technologyreview.jp/s/173410/can-photonic-chips-save-bitcoin/&#34;&gt;MIT Tech Review: 暗号通貨の電力消費問題、光コンピューティングは解決策になるか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yamdas.hatenablog.com/entry/20191227/atas-of-ai&#34;&gt;ビッグデータやAI倫理の問題を訴えてきたケイト・クロフォードの初の単著『Atlas of AI』が出る - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lord-left.github.io/posts/love-coding-c.html&#34;&gt;Why I love Coding in C // December 2019&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2019/12/c.html&#34;&gt;ブログ: 私がCのコーディングを好きな理由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/12/27/2019-12-17-anyscale-ray-project-distributed-computing-a16z/&#34;&gt;AIによる分散システム「Ray」を開発するAnyscaleが22億円超を調達  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>Google Fonts が日本語に対応してた</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/12/japanese-fonts-by-google-cdn/" />
		<id>tag:text.Baldanders.info,2019-12-22:/remark/2019/12/japanese-fonts-by-google-cdn/</id>
		<published>2019-12-21T23:03:36+00:00</published>
		<updated>2019-12-31T04:31:45+00:00</updated>
		<summary>これで日本語 Web フォントを指定するのに Early Access 版を使ったり，自前で巨大フォントファイルを用意しなくてもよくなったんだね。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/12/slide-site-by-hugo/&#34; title=&#34;Hugo でスライド・サイトを立てる実験&#34;&gt;前回の記事&lt;/a&gt;を書いてて気付いたのだが， Google Fonts が正式に日本語に対応してるぢゃん！ おじさん気がつかなかったよ &lt;code&gt;orz&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/fonts/&#34;&gt;Google Fonts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これで日本語 Web フォントを指定するのに &lt;a href=&#34;https://fonts.google.com/earlyaccess&#34; title=&#34;Early Access - Google Fonts&#34;&gt;Early Access&lt;/a&gt; 版を使ったり，自前で巨大フォントファイルを用意しなくてもよくなったんだね。&lt;/p&gt;
&lt;p&gt;たとえば Web フォントを NOTO フォントで統一するなら &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 要素内に&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;//fonts.googleapis.com/css?family=Noto+Sans+JP|Noto+Sans|Noto+Serif|Noto+Serif+JP&amp;amp;display=swap&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と記述すればよい&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
NOTO Sans の太字もご所望なら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;//fonts.googleapis.com/css?family=Noto+Sans+JP:400,700|Noto+Sans:400,700|Noto+Serif|Noto+Serif+JP&amp;amp;display=swap&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という感じにウェイトを指定できる&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;Web ページ側のスタイルは，たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Noto Serif&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Noto Serif JP&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;serif&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;/* normal */&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Noto Sans&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Noto Sans JP&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;sans-serif&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;700&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;/* bold */&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こんな感じで記述していけばいいだろう。&lt;/p&gt;
&lt;p&gt;ちなみにブラウザの設定によっては Google Fonts を追跡コードとみなしてブロックする場合があるので既定値（&lt;code&gt;serif&lt;/code&gt; や &lt;code&gt;sans-serif&lt;/code&gt;）の指定を忘れないこと。&lt;/p&gt;
&lt;p&gt;よしよし。
これでよーやくフォント周りの懸念がなくなった。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2015/web-font-family/&#34;&gt;Web フォントに関する覚え書き&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2016/10/japanese-serif-fonts-by-google-cdn/&#34;&gt;Web フォントに関する覚え書き（明朝体編）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/12/installing-noto-serif-jp-in-www_baldanders_info/&#34;&gt;結局 Noto Serif JP を Web フォントとして導入した&lt;/a&gt; : 自前で Web フォントをインストールしたときの話&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/release/2018/05/creative-commons-icons-by-font-awesome/&#34;&gt;Font Awesome 5.0.11 で Creative Commons アイコンに完全対応した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- eof --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;URL のクエリー部（&lt;code&gt;?&lt;/code&gt; 以降の文字列）に &lt;code&gt;|&lt;/code&gt; や &lt;code&gt;:&lt;/code&gt; の文字を使うと &lt;a href=&#34;https://validator.w3.org/&#34; title=&#34;The W3C Markup Validation Service&#34;&gt;W3C の Validator&lt;/a&gt; に怒られるのでご注意を。大抵はブラウザが上手く解釈してくれるので問題ないのだが。気になるなら &lt;code&gt;%7c&lt;/code&gt; や &lt;code&gt;%3a&lt;/code&gt; といった&lt;a href=&#34;https://tools.ietf.org/html/rfc3986#section-2.1&#34; title=&#34;RFC 3986 - Uniform Resource Identifier: Generic Syntax&#34;&gt;パーセント・エンコーディング&lt;/a&gt;に置き換えればよい。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;400 とか 700 とかの値は CSS の &lt;code&gt;font-weight&lt;/code&gt; に設定する数値。 &lt;code&gt;font-weight&lt;/code&gt; の &lt;code&gt;normal&lt;/code&gt; が 400 に相当する。ちなみに &lt;code&gt;bold&lt;/code&gt; は 700。 &lt;code&gt;bolder&lt;/code&gt; で 400 → 700 → 900 と太くなる。 &lt;code&gt;lighter&lt;/code&gt; だと 400 → 100 と細くなる。普通の文章であれば 400 のみで十分だし，太字が必要な場合でも追加で 700 を用意しておけば問題ないだろう。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>Hugo でスライド・サイトを立てる実験</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2019/12/slide-site-by-hugo/" />
		<id>tag:text.Baldanders.info,2019-12-21:/remark/2019/12/slide-site-by-hugo/</id>
		<published>2019-12-21T13:38:36+00:00</published>
		<updated>2019-12-21T13:44:40+00:00</updated>
		<summary>ちょろんとググってみたら reveal-hugo なる Hugo テーマがあって，内部では reveal.js を使ってスライドを制御しているらしい。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://shimane-go.connpass.com/event/159977/&#34; title=&#34;Shimane.go#03 - connpass&#34;&gt;来月のイベント&lt;/a&gt;用に資料をスライド形式で作ろうと思うのだが， MS Office は大昔に捨ててしまったし LibreOffice の Impress で書くというのも今更だしなぁ。&lt;/p&gt;
&lt;p&gt;できれば markdown で書いて VCS でドキュメント管理したい。&lt;/p&gt;
&lt;p&gt;で，ちょろんとググってみたら &lt;a href=&#34;https://reveal-hugo.dzello.com/&#34;&gt;reveal-hugo&lt;/a&gt; なる &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; テーマがあって，内部では &lt;a href=&#34;https://revealjs.com/&#34; title=&#34;reveal.js – The HTML Presentation Framework&#34;&gt;reveal.js&lt;/a&gt; を使ってスライドを制御しているらしい。
これだよ，これ。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; は静的サイト・ジェネレータなのでデプロイ先の自由度が高い。
さくらのレンタルサーバみたいな老舗でも GitHub Page や最近流行り（？）の &lt;a href=&#34;https://www.netlify.com/&#34; title=&#34;Netlify: All-in-one platform for automating modern web projects.&#34;&gt;Netlify&lt;/a&gt; でも大丈夫。
しかも &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; にはサーバ・モードがあるのでローカル環境で試すこともできる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://revealjs.com/&#34; title=&#34;reveal.js – The HTML Presentation Framework&#34;&gt;Reveal.js&lt;/a&gt; テーマを自作するのでなければ通常版の &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; で問題ない。
また &lt;a href=&#34;https://reveal-hugo.dzello.com/&#34;&gt;reveal-hugo&lt;/a&gt; には &lt;a href=&#34;https://revealjs.com/&#34; title=&#34;reveal.js – The HTML Presentation Framework&#34;&gt;reveal.js&lt;/a&gt; 一式がまるっと含まれているので別途のインストールは不要。
Node.js をインストールする必要もない。
簡単！&lt;/p&gt;
&lt;p&gt;では，さっそく試してみよう。&lt;/p&gt;
&lt;h2 id=&#34;hugo-&#34;&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; 環境の構築&lt;/h2&gt;
&lt;p&gt;まずは適当なディレクトリで &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; 環境を作成する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ hugo new site hugo-slide
Congratulations! Your new Hugo site is created in /home/username/hugo-env/hugo-slide.

Just a few more steps and you&amp;#39;re ready to go:

1. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/ or
   create your own with the &amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34; command.
2. Perhaps you want to add some content. You can add single files
   with &amp;#34;hugo new &amp;lt;SECTIONNAME&amp;gt;/&amp;lt;FILENAME&amp;gt;.&amp;lt;FORMAT&amp;gt;&amp;#34;.
3. Start the built-in live server via &amp;#34;hugo server&amp;#34;.

Visit https://gohugo.io/ for quickstart guide and full documentation.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで &lt;code&gt;hugo-slide&lt;/code&gt; ディレクトリが作成される。
このディレクトリに入り git リポジトリとして初期化する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd hugo-slide
$ git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この時点でコミットしておけばいつでも元に戻せるので安心である。&lt;/p&gt;
&lt;p&gt;次に &lt;a href=&#34;https://reveal-hugo.dzello.com/&#34;&gt;reveal-hugo&lt;/a&gt; を git のサブモジュールとして導入する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git submodule add git@github.com:dzello/reveal-hugo.git themes/reveal-hugo
Cloning into &amp;#39;/home/username/hugo-env/hugo-slide/themes/reveal-hugo&amp;#39;...
remote: Enumerating objects: 1713, done.
remote: Total 1713 (delta 0), reused 0 (delta 0), pack-reused 1713
Receiving objects: 100% (1713/1713), 6.61 MiB | 1.83 MiB/s, done.
Resolving deltas: 100% (848/848), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;マジ簡単。
&lt;a href=&#34;https://reveal-hugo.dzello.com/&#34;&gt;Reveal-hugo&lt;/a&gt; をアップデートする場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ git submodule update --init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;でよい。
以降 &lt;a href=&#34;https://reveal-hugo.dzello.com/&#34;&gt;reveal-hugo&lt;/a&gt; の中身は弄らない方針で作業を進める。&lt;/p&gt;
&lt;h3 id=&#34;configtoml-&#34;&gt;config.toml の設定&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; 環境作成直後の &lt;code&gt;config.toml&lt;/code&gt; の中身はこんな感じになっている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;nx&#34;&gt;baseURL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://example.org/&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;languageCode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;en-us&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;My New Hugo Site&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これを以下のように書き換える。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;nx&#34;&gt;baseURL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://example.org/&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;languageCode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ja_JP&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;スライド用デモ・サイト&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;theme&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;reveal-hugo&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;outputFormats&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reveal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;baseName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;mediaType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text/html&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;isHTML&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;markup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;defaultMarkdownHandler&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;blackfriday&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;markup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;highlight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;codeFences&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; で作成したサイトをデプロイするなら &lt;code&gt;baseURL&lt;/code&gt; にデプロイ先の URL を設定する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[outputFormats.Reveal]&lt;/code&gt; 項目は &lt;a href=&#34;https://revealjs.com/&#34; title=&#34;reveal.js – The HTML Presentation Framework&#34;&gt;reveal.js&lt;/a&gt; 用の出力設定で，取り敢えずおまじないのようなものだと思っておけばよい。&lt;/p&gt;
&lt;p&gt;最後の4行は &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; 0.60 以降では必須の設定である。
これも取り敢えずおまじないとして唱えておく（笑）&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;スライド用のドキュメントを作成・表示する&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hugo-slide/content&lt;/code&gt; ディレクトリに &lt;code&gt;_index.md&lt;/code&gt; ファイルを作成する。
お試しなので，中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;+++
title = &amp;#34;Hello world!&amp;#34;
outputs = [&amp;#34;Reveal&amp;#34;]
+++

&lt;span class=&#34;gh&#34;&gt;# Hello world!
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;
This is my first slide.

---

&lt;span class=&#34;gh&#34;&gt;# Hello Mars!
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;
This is my second slide.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで2ページ分のスライドができた。&lt;/p&gt;
&lt;p&gt;早速 &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; をサーバモードで起動して表示してみよう。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この状態でブラウザで &lt;code&gt;http://localhost:1313/&lt;/code&gt; にアクセスすれば&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./first-page.png&#34;&gt;&lt;img src=&#34;./first-page.png&#34; srcset=&#34;./first-page.png 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;おおっ，できたできた。
ちなみに &lt;code&gt;[F]&lt;/code&gt; キー押下で全画面表示になる（元に戻すには &lt;code&gt;[ESC]&lt;/code&gt; キー押下）。
&lt;code&gt;[Page Down]&lt;/code&gt; キーを押すか右下の &lt;code&gt;&amp;gt;&lt;/code&gt; をクリックすれば次ページに遷移する。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./second-page.png&#34;&gt;&lt;img src=&#34;./second-page.png&#34; srcset=&#34;./second-page.png 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;セクションでスライドを分ける&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://shimane-go.connpass.com/event/159977/&#34; title=&#34;Shimane.go#03 - connpass&#34;&gt;来月のイベント&lt;/a&gt;は技術系なのでコードも書けるようにしておきたい。&lt;/p&gt;
&lt;p&gt;では &lt;code&gt;hugo-slide/content&lt;/code&gt; ディレクトリに &lt;code&gt;hello&lt;/code&gt; ディレクトリを切ってその中に &lt;code&gt;_index.md&lt;/code&gt; ファイルを作成してみよう。
中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;+++
title = &amp;#34;みんな大好き Hello World&amp;#34;
outputs = [&amp;#34;Reveal&amp;#34;]
+++

&lt;span class=&#34;gh&#34;&gt;# みんな大好き Hello World
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;```&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;```&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;http://localhost:1313/hello/&lt;/code&gt; にアクセスすれば&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello-default.png&#34;&gt;&lt;img src=&#34;./hello-default.png&#34; srcset=&#34;./hello-default.png 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;と表示される。
このようにディレクトリを切ってセクション毎に分けることで複数のスライドを置くことができる。&lt;/p&gt;
&lt;p&gt;ただし &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; はセクションの階層化はできない。
更にいうと &lt;a href=&#34;https://reveal-hugo.dzello.com/&#34;&gt;reveal-hugo&lt;/a&gt; ではひとつのセクションに複数の原稿ファイルをおいてもひとつのスライドにまとめられてしまうようだ。
ご注意を。&lt;/p&gt;
&lt;p&gt;さて，次は見た目をちょっと弄ってみようか。&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;スライドテーマの指定&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://reveal-hugo.dzello.com/&#34;&gt;Reveal-hugo&lt;/a&gt; ではサイト単位，あるいは front matter 単位で &lt;a href=&#34;https://revealjs.com/&#34; title=&#34;reveal.js – The HTML Presentation Framework&#34;&gt;reveal.js&lt;/a&gt; テーマを指定できる。
&lt;code&gt;config.toml&lt;/code&gt; でサイト単位で指定する場合は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reveal_hugo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;theme&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sky&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という感じに， front matter で指定するなら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reveal_hugo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;theme&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sky&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じに指定できる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://revealjs.com/&#34; title=&#34;reveal.js – The HTML Presentation Framework&#34;&gt;Reveal.js&lt;/a&gt; が用意しているテーマには以下のものがある。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;black&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Black background, white text, blue links (default theme)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;white&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;White background, black text, blue links&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;league&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Gray background, white text, blue links (default theme for reveal.js &amp;lt; 3.0.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;beige&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Beige background, dark text, brown links&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sky&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blue background, thin dark text, blue links&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;night&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Black background, thick white text, orange links&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;serif&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Cappuccino background, gray text, brown links&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;simple&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;White background, black text, blue links&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;solarized&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Cream-colored background, dark green text, blue links&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ちなみに &lt;code&gt;sky&lt;/code&gt; だとこんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello-sky.png&#34;&gt;&lt;img src=&#34;./hello-sky.png&#34; srcset=&#34;./hello-sky.png 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;更に &lt;a href=&#34;https://reveal-hugo.dzello.com/&#34;&gt;reveal-hugo&lt;/a&gt; ではカスタム・テーマとして &lt;code&gt;robot-lung&lt;/code&gt; と &lt;code&gt;sunblind&lt;/code&gt; が用意されている。
カスタム・テーマは&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reveal_hugo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;custom_theme&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;reveal-hugo/themes/robot-lung.css&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という感じに指定できる。
もちろん自作のテーマを組み込むことも可能である。&lt;/p&gt;
&lt;h2 id=&#34;syntax-highlight-&#34;&gt;Syntax Highlight の指定&lt;/h2&gt;
&lt;p&gt;コード部分の Syntax Highlight には &lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt; が使われている。
&lt;a href=&#34;https://highlightjs.org/&#34;&gt;Highlight.js&lt;/a&gt; は &lt;a href=&#34;https://revealjs.com/&#34; title=&#34;reveal.js – The HTML Presentation Framework&#34;&gt;reveal.js&lt;/a&gt; のプラグインとして既定で組み込まれている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://highlightjs.org/&#34;&gt;Highlight.js&lt;/a&gt; のスタイルは&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reveal_hugo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;highlight_theme&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;github&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じで指定できる。
&lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt; で指定可能なスタイルは&lt;a href=&#34;https://highlightjs.org/static/demo/&#34; title=&#34;highlight.js demo&#34;&gt;デモ・ページ&lt;/a&gt;で確認できる。&lt;/p&gt;
&lt;h3 id=&#34;hugo--syntax-highlight-&#34;&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; の Syntax Highlight を使う&lt;/h3&gt;
&lt;p&gt;ところで &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; は自前で Syntax Highlight の機能を持っている。
これを使わない手はない。&lt;/p&gt;
&lt;p&gt;まず &lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt; プラグインを無効にするのだが，個別にプラグインを無効化する方法がないため，&lt;code&gt;config.toml&lt;/code&gt; で&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reveal_hugo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;load_default_plugins&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;plugins&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;reveal-js/plugin/zoom-js/zoom.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;reveal-js/plugin/notes/notes.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という感じに，いったん既定のプラグインを全て無効にしてから必要なものを個別に組み込む。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;The world’s fastest framework for building websites | Hugo&#34;&gt;Hugo&lt;/a&gt; 側の Syntax Highlight の設定は&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;markup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;highlight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;codeFences&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;hl_Lines&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;lineNoStart&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;lineNos&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;lineNumbersInTable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;noClasses&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tango&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;tabWidth&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;などとすればよいだろう。
&lt;code&gt;codeFences&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; になっている点に注意。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;style&lt;/code&gt; のサンプルは以下を参考にどうぞ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://xyproto.github.io/splash/docs/all.html&#34;&gt;Short snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xyproto.github.io/splash/docs/longer/all.html&#34;&gt;Long snippets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;たとえば &lt;code&gt;tango&lt;/code&gt; スタイルを使えば&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello-sky-tango.png&#34;&gt;&lt;img src=&#34;./hello-sky-tango.png&#34; srcset=&#34;./hello-sky-tango.png 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;てな感じになる。&lt;/p&gt;
&lt;h2 id=&#34;web-&#34;&gt;Web フォントを使いたい！&lt;/h2&gt;
&lt;p&gt;Web で公開することを考えるのなら Web フォントを使いたいところである。
それにタイトルがちょいとデカすぎるしコードは小さすぎるよね。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://reveal-hugo.dzello.com/&#34;&gt;Reveal-hugo&lt;/a&gt; では &lt;code&gt;layouts/partials/reveal-hugo/head.html&lt;/code&gt; を使ってページの &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 要素に任意の記述を割り込ませることができる。
これを使ってフォントの調整をしよう。&lt;/p&gt;
&lt;p&gt;たとえばこんな記述を割り込ませてみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;//fonts.googleapis.com/css?family=Noto+Sans%7cNoto+Sans+JP%3a400,700%7cInconsolata%3a400,700&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;text/css&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;/css/font-family.css&amp;#39;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;text/css&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ちなみに &lt;code&gt;font-family.css&lt;/code&gt; はこんな内容にしてみた&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Noto Sans&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Noto Sans JP&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;sans-serif&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Noto Sans&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Noto Sans JP&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;sans-serif&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Inconsolata&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Noto Sans JP&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;monospace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.6&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.3&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;h4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;reveal&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.8&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで実際の表示は&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./hello-webfonts.png&#34;&gt;&lt;img src=&#34;./hello-webfonts.png&#34; srcset=&#34;./hello-webfonts.png 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;てな感じになった。
こんなもんかな。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://reveal-hugo.dzello.com/&#34;&gt;Reveal-hugo&lt;/a&gt; では他にも fragment など &lt;a href=&#34;https://revealjs.com/&#34; title=&#34;reveal.js – The HTML Presentation Framework&#34;&gt;reveal.js&lt;/a&gt; のギミックが利用可能だが，今回は割愛する。&lt;/p&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js/&#34;&gt;hakimel/reveal.js: The HTML Presentation Framework&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dzello/reveal-hugo&#34;&gt;dzello/reveal-hugo: 📽️ Create rich HTML-based presentations with Hugo and Reveal.js&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/reveal-hugo/&#34;&gt;Reveal Hugo | Hugo Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/01/sakura-and-hugo/&#34;&gt;さくらのレンタルサーバ上で Hugo によるサイト管理を行う&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/release/2019/11/hugo-v0_60-with-goldmark-parser/&#34;&gt;Hugo v0.60 から既定の Markdown パーサが Goldmark になったようだ&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- eof --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;code&gt;font-family.css&lt;/code&gt; ファイルは &lt;code&gt;static/css/&lt;/code&gt; ディレクトリに置くこと。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>2019-12-21 のブックマーク</title>
		<category term="bookmarks" label="bookmarks" scheme="https://text.baldanders.info/bookmarks/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/bookmarks/2019/12/21-bookmarks/" />
		<id>tag:text.Baldanders.info,2019-12-21:/bookmarks/2019/12/21-bookmarks/</id>
		<published>2019-12-21T02:40:41+00:00</published>
		<updated>2019-12-21T02:43:33+00:00</updated>
		<summary>「The RCS Texting Protocol Is Way Too Easy to Hack」他</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;h2 id=&#34;heading&#34;&gt;バベルのインターネット&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/12/14/2019-12-13-internet-shutdown-india-assam-meghalaya/&#34;&gt;インド政府が再びインターネットを遮断、今回はアッサム州とメガラヤ州  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35146897/&#34;&gt;Mozillaら、ネット中立性規則の復活を目指し再審理を請求 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/freedom-of-speech/2905&#34;&gt;「.org」ドメイン管理団体の売却は世界に何をもたらすのか | P2Pとかその辺のお話R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;セキュリティ＆プライバシー関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2019/12/15/071756&#34;&gt;実名入りで届く象印を騙ったQUOカード当選詐欺について調べてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atpress.ne.jp/news/201256&#34;&gt;デンソーとNTTコミュニケーションズ、車両向けセキュリティオペレーションセンター（車両SOC）の実現に必要な技術検証を開始｜株式会社デンソー　NTTコミュニケーションズ株式会社のプレスリリース&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://motor-fan.jp/tech/10012818&#34;&gt;デンソー、NTT コミュニケーションズ：車両向けセキュリティオペレーションセンターの実現に必要な技術検証を開始｜MotorFanTECH[モーターファンテック]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/jp/news/2019/12/github-security-advisory-cve/&#34;&gt;GitHubが脆弱性ワークフローを改善してCVE採番機関に&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wired.com/story/rcs-texting-security/&#34;&gt;The RCS Texting Protocol Is Way Too Easy to Hack | WIRED&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2019/12/security_vulner_21.html&#34;&gt;Security Vulnerabilities in the RCS Texting Protocol - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.nikkeibp.co.jp/atcl/nxt/news/18/06709/?n_cid=nbpnxt_fbbn&#34;&gt;「33自治体のデータがIaaSから消失」、日本電子計算がシステム障害の詳細明かす | 日経 xTECH（クロステック）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2019/12/iranian_attacks.html&#34;&gt;Iranian Attacks on Industrial Control Systems - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1225225.html&#34;&gt;「npm」由来の脆弱性を修正した「Node.js」が公開 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2019/12/attacker_causes.html&#34;&gt;Attacker Causes Epileptic Seizure over the Internet - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/googlebeyondprod.html&#34;&gt;Google、クラウドネイティブ向けセキュリティの枠組みを示す「BeyondProd」発表。ホワイトペーパーを公開 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/topics/alert20191219.html&#34;&gt;年末年始における情報セキュリティに関する注意喚起：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2019/12/lousy_iot_secur.html&#34;&gt;Lousy IoT Security - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/jp/blogs/news/data_disposal/&#34;&gt;クラウドにおける安全なデータの廃棄 | Amazon Web Services ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/_aws.html&#34;&gt;クラウドは、データを完全削除したくてもハードディスクを物理破壊してくれない。どうする？ AWSが説明 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1225696.html&#34;&gt;オープンソースの暗号化ドライブ作成ツール「VeraCrypt」v1.24に脆弱性 - 窓の杜&lt;/a&gt; : Android 版とかあるんだねぇ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/12/20/2019-12-19-ring-doorbell-passwords-exposed/&#34;&gt;1500個以上のRingのパスワードがダークウェブ上で発見  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/12/20/2019-12-18-cloud-flaws-millions-child-watch-trackers/&#34;&gt;数百万人のスマートウォッチから位置情報が漏れている事実  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;天文関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alma-telescope.jp/news/press/carbon-201912&#34;&gt;プレスリリース - 宇宙初期に予想外の巨大炭素ガス雲を発見 －アルマ望遠鏡がとらえた宇宙最初の環境汚染－ - アルマ望遠鏡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.technologyreview.jp/s/164797/do-satellite-mega-constellations-really-have-to-be-so-big/&#34;&gt;MIT Tech Review: 人工衛星「数」競争、大量の打ち上げは本当に必要か？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://subarutelescope.org/Pressrelease/2019/12/18/j_index.html&#34;&gt;観測成果 - 巨大銀河の核は 120 億年前にはすでにできていた - すばる望遠鏡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4560097135?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;星の文化史事典[増補新版] | 出雲 晶子 |本 | 通販 | Amazon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;知財関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/nginxigor_sysoev.html&#34;&gt;NGINX、モスクワオフィスへの強制捜査の状況を説明。創業者Igor Sysoev氏への尋問はあったものの、現時点で逮捕者や拘束者はなしと － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/copyright/2824&#34;&gt;Twitterへの著作権削除要請、半年で倍増 | P2Pとかその辺のお話R&lt;/a&gt; : 「こうした著作権通知の半数以上は、不適切なものや虚偽、あるいは対応不能なものが占めていたため、同プラットフォームからは削除されてはいない」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-4&#34;&gt;その他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/12/14/2019-12-13-porsche-and-lucasfilm-co-designed-a-new-starfighter-for-the-star-wars-universe/&#34;&gt;ポルシェとルーカスフィルムが共同制作したスターウォーズの戦闘機  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/serial/yajiuma/1224705.html&#34;&gt;どうしてこうなった？　Outlook系メールサービスで発見された不思議な不具合が話題に - やじうまの杜 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/kubernetes_117.html&#34;&gt;Kubernetes 1.17正式版が登場。クラウドプロバイダーを示すラベルが正式版、ボリュームスナップショットがベータ版に － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/electronnodejsopenjs_foundation.html&#34;&gt;Electronフレームワーク、Node.jsなどの開発をホストする「OpenJS Foundation」に合流 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://p2ptk.org/freedom-of-speech/2909&#34;&gt;セックスワーカーへの暴力を終わらせる国際デー：FOSTAがもたらした悪影響を直視せよ | P2Pとかその辺のお話R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/12/19/2019-12-19-all-tulips-must-wilt/&#34;&gt;すべてのチューリップはいずれ枯れる、2020年に差し迫る仮想通貨の価値半減のウワサ  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://web.eecs.utk.edu/~azh/blog/challengingprojects.html&#34;&gt;Challenging projects every programmer should try - Austin Z. Henley&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2019/12/blog-post_20.html&#34;&gt;ブログ: すべてのプログラマーが試すべき挑戦的なプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2019/12/20/2019-12-19-facebook-operating-system/&#34;&gt;Facebookが脱Googleへ、ハードウェアのソーシャル化に向けて新OSを開発中  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35147153/&#34;&gt;東大とIBM、量子コンピューター「Q」を日本で運用 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>パッケージの管理（モジュール対応版）</title>
		<category term="golang" label="golang" scheme="https://text.baldanders.info/golang/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/manage-packages/" />
		<id>tag:text.Baldanders.info,2019-12-20:/golang/manage-packages/</id>
		<published>2019-12-20T09:01:26+00:00</published>
		<updated>2019-12-20T09:06:47+00:00</updated>
		<summary>モジュール対応モードでは $GOPATH/src 下にある外部パッケージのコードは参照しない。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;随分前に「&lt;a href=&#34;https://text.baldanders.info/golang/go-get-package/&#34;&gt;go get コマンドでパッケージを管理する&lt;/a&gt;」を書いたのだが，内容が古すぎて使い物にならなくなっている。
この記事を全面改訂してもいいのだが，個人的には当時の試行錯誤っぷりに懐かしい気分になったので，これはそのまま手を加えず新たに記事を起こすことにした。
特にパッケージとモジュールの関係に注意して読んでいただければ幸いである。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;前提条件&lt;/h2&gt;
&lt;p&gt;作業プラットフォームは &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラのバージョンは 1.13.x (またはそれ以上) とする。
環境構築手順は以下を参考にどうぞ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/12/install-ubuntu-to-second-hand-pc/&#34;&gt;中古 PC に Ubuntu 環境を導入する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各環境変数の値（一部）は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env GOPATH
GO111MODULE=&amp;#34;&amp;#34;
GOARCH=&amp;#34;amd64&amp;#34;
GOCACHE=&amp;#34;/home/username/.cache/go-build&amp;#34;
GOENV=&amp;#34;/home/username/.config/go/env&amp;#34;
GOHOSTARCH=&amp;#34;amd64&amp;#34;
GOHOSTOS=&amp;#34;linux&amp;#34;
GOOS=&amp;#34;linux&amp;#34;
GOPATH=&amp;#34;/home/username/go&amp;#34;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;プラットフォームによって環境変数の値は異なるが凡その振る舞いは同じなので，適当に読み替えていただきたい。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;code&gt;GO111MODULE&lt;/code&gt; の値として以下を設定できる。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;値&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;on&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常にモジュール対応モードで動作する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;off&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常に GOPATH モードで動作する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$GOPATH&lt;/code&gt; 以下のディレクトリにあるパッケージは GOPATH モードで，それ以外はモジュール対応モードで動作する&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;GO111MODULE&lt;/code&gt; 未定義時の既定は &lt;code&gt;auto&lt;/code&gt;。
なお，バージョン 1.13 からは &lt;code&gt;auto&lt;/code&gt; で &lt;code&gt;$GOPATH&lt;/code&gt; 以下のディレクトリで作業していても &lt;code&gt;go.mod&lt;/code&gt; によるモジュール定義がされている場合はモジュール対応モードで動作するようになった。&lt;/p&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;ありのまま今おこった事を話すぜ！&lt;/h2&gt;
&lt;h3 id=&#34;-hello-&#34;&gt;パッケージ hello を作って実行してみる&lt;/h3&gt;
&lt;p&gt;まずは &lt;code&gt;$GOPATH/src/hello&lt;/code&gt; ディレクトリを作成し，以下のソースコード &lt;code&gt;hello.go&lt;/code&gt; を記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;there&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ついでに動作確認を兼ねてテスト用に &lt;code&gt;example_test.go&lt;/code&gt; ファイルも作っておこう。
中身はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hello_test&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ExampleHello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//Output:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;//Hello World
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これで&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go test ./...
ok  	hello	0.001s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とかなればパッケージ &lt;code&gt;hello&lt;/code&gt; の完成である。&lt;/p&gt;
&lt;p&gt;次にパッケージ &lt;code&gt;hello&lt;/code&gt; を使うコードを書いてみる。
&lt;code&gt;$GOPATH/src/sample&lt;/code&gt; ディレクトリを作成し，以下のソースコード &lt;code&gt;sample.go&lt;/code&gt; を記述する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先程のサンプル関数 &lt;code&gt;ExampleHello()&lt;/code&gt; と同じ内容なので出力結果は同じになる筈である。
このコードをコンパイル&amp;amp;実行してみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run sample.go 
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;うんうん。
ここまでは問題なし。&lt;/p&gt;
&lt;h3 id=&#34;heading-2&#34;&gt;パッケージをモジュール化する&lt;/h3&gt;
&lt;p&gt;では，パッケージ &lt;code&gt;hello&lt;/code&gt; と &lt;code&gt;sample&lt;/code&gt; をモジュール化してみよう。&lt;/p&gt;
&lt;p&gt;まずはパッケージ &lt;code&gt;hello&lt;/code&gt; から。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init hello
go: creating new go.mod: module hello

$ go test ./...
ok  	hello	(cached)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;p&gt;つぎはパッケージ &lt;code&gt;sample&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go mod init sample
go: creating new go.mod: module sample

$ go run sample.go 
build command-line-arguments: cannot load hello: cannot find module providing package hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ありゃりゃーん。
コンパイルに失敗しちゃったよ。
パッケージ &lt;code&gt;hello&lt;/code&gt; をロードできないと言っている。
ロード？&lt;/p&gt;
&lt;p&gt;ここで &lt;code&gt;$GOPATH/pkg/linux_amd64&lt;/code&gt; ディレクトリを見るも &lt;code&gt;hello&lt;/code&gt; に対応するコンパイル済みバイナリは存在しない。
それもその筈で，最近の &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラは外部パッケージのロードとコンパイルをモジュール毎に &lt;code&gt;$GOPATH/pkg/mod&lt;/code&gt; および &lt;code&gt;$GOCACHE&lt;/code&gt; ディレクトリ下で行っている&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
したがってモジュール対応モードでは &lt;code&gt;$GOPATH/src&lt;/code&gt; 下にある外部パッケージのコードは参照しないのだ。&lt;/p&gt;
&lt;p&gt;さて，困ったね。&lt;/p&gt;
&lt;h2 id=&#34;1--gopath-&#34;&gt;解決法1： 強制的に GOPATH モードにする&lt;/h2&gt;
&lt;p&gt;環境変数 &lt;code&gt;GO111MODULE&lt;/code&gt; の値を &lt;code&gt;off&lt;/code&gt; にすることにより， &lt;code&gt;go.mod&lt;/code&gt; の有無に依らず強制的に GOPATH モードでビルドすることができる。
上述の例であれば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go env -w GO111MODULE=off

$ go run sample.go 
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とすればよい&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;ただし &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラの開発側は GOPATH を将来的に無くす方向で議論および開発を進めているため（後方互換性の観点からバージョン 1.x のうちは大丈夫だろうが）このやり方はあまりオススメできない。
暫定措置というやつである。&lt;/p&gt;
&lt;h2 id=&#34;2-replace-&#34;&gt;解決法2： replace ディレクティブを使う&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sample&lt;/code&gt; パッケージの &lt;code&gt;go.mod&lt;/code&gt; に以下のディレクティブを追記することで，ローカルにある &lt;code&gt;hello&lt;/code&gt; パッケージのコードを参照するようになる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;replace hello =&amp;gt; ../hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;replace&lt;/code&gt; ディレクティブは非常に便利なのだが，どうしても環境依存の記述になってしまうのが欠点である。
たとえば外部の CI/CD サービスと組み合わせる場合はローカルの環境と同じになるように設定をチューニングする必要があるかもしれない。
これも暫定措置だよね。&lt;/p&gt;
&lt;h2 id=&#34;3-&#34;&gt;解決法3： モジュール・パッケージ構成を再設計する&lt;/h2&gt;
&lt;p&gt;まぁ，身も蓋もない話だが，最終的にはモジュールおよびパッケージの構成を再設計するしかないだろう。&lt;/p&gt;
&lt;p&gt;今回の例で言えば &lt;code&gt;sample&lt;/code&gt; パッケージの構成を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ tree sample
sample
├── go.mod
├── hello
│   ├── example_test.go
│   └── hello.go
└── sample.go

1 directory, 4 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;として &lt;code&gt;sample.go&lt;/code&gt; を&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;hl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sample/hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と書き換えればいい。
&lt;code&gt;hello&lt;/code&gt; パッケージを &lt;code&gt;sample&lt;/code&gt; モジュール内のサブ・パッケージとして再構成するのである。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;における「モジュール」は「パッケージ（群）＋バージョン」であり，しかもバージョン管理は git 等 VCS の機能に依るところが大きい。
故に「1モジュール＝1リポジトリ」を目安にすべきだろう（でないとバージョン管理が煩雑になる）。
その上で「モジュール＝リポジトリ」内に関係の密なパッケージ（群）を組み込んでいくというのが &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;プログラミング設計の基本的な進め方になると思うのだが，どうだろう。&lt;/p&gt;
&lt;h2 id=&#34;heading-3&#34;&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/k-motoyan/items/4213d5ef09963ffea489&#34;&gt;Goモジュールモードでモジュール内に作ったモジュールを扱う - Qiita&lt;/a&gt; : モジュール内にサブ・モジュールを構成すること自体は可能である&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/go-module-aware-mode/&#34;&gt;モジュール対応モードへの移行を検討する&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/golang/versioning-of-go-modules/&#34;&gt;Go モジュールのバージョン管理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-4&#34;&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-10-20&#34;&gt;2018-10-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;古いバージョンの &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラでは環境変数 &lt;code&gt;GOCACHE&lt;/code&gt; に &lt;code&gt;off&lt;/code&gt; をセットすることでキャッシュ利用を無効化することができたが，最近のバージョンでは &lt;code&gt;off&lt;/code&gt; は設定できなくなっている。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;コマンド &lt;code&gt;go env -w&lt;/code&gt; で設定した環境変数の値を削除するには &lt;code&gt;-u&lt;/code&gt; オプションを使う。例えば &lt;code&gt;go env -u GO111MODULE&lt;/code&gt; のように使う。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>strings.EqualFold 関数を使え</title>
		<category term="golang" label="golang" scheme="https://text.baldanders.info/golang/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/use-equalfold-function/" />
		<id>tag:text.Baldanders.info,2019-12-15:/golang/use-equalfold-function/</id>
		<published>2019-12-15T09:01:19+00:00</published>
		<updated>2019-12-15T09:06:48+00:00</updated>
		<summary>大文字小文字を無視した文字列比較では素直に strings.EqualFold() 関数を使いましょう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; が吐く&lt;a href=&#34;https://text.baldanders.info/golang/code-review-with-golangci/&#34; title=&#34;GolangCI でコード・レビューを自動化する&#34;&gt;レビュー結果&lt;/a&gt;を基にチマチマとコードを直していたのだが，その中で&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;SA6005: should use strings.EqualFold(a, b) instead of strings.ToLower(a) == strings.ToLower(b)

if strings.ToLower(left) == strings.ToLower(right) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;という指摘があった。
いや，もの知らずでゴメンペコン。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/strings/&#34; title=&#34;strings - The Go Programming Language&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;EqualFold()&lt;/code&gt; 関数ってなんじゃら？ と思ってソースコードを見たら&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// EqualFold reports whether s and t, interpreted as UTF-8 strings,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// are equal under Unicode case-folding.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;EqualFold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;と書かれている。&lt;/p&gt;
&lt;p&gt;ふむふむ。
では試してみよう。
こんな感じのコードを書いて&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;lefts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;rights&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;GO&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ＧＯ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lefts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rights&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s == %s : %v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;EqualFold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行してみると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run sample1.go 
go == Go : true
go == GO : true
go == go : true
go == Ｇｏ : false
go == ＧＯ : false
go == ｇｏ : false
ｇｏ == Go : false
ｇｏ == GO : false
ｇｏ == go : false
ｇｏ == Ｇｏ : true
ｇｏ == ＧＯ : true
ｇｏ == ｇｏ : true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ってな感じになった。
全角と半角は区別してくれるらしい。
Unicode の文字種をきちんと判別しているということだ。&lt;/p&gt;
&lt;p&gt;ちなみに &lt;a href=&#34;https://golang.org/pkg/strings/&#34; title=&#34;strings - The Go Programming Language&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;ToLower()&lt;/code&gt; 関数を使って&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;lefts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;rights&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;GO&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ＧＯ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lefts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rights&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s == %s : %v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ToLower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とやっても同じ結果になる。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/strings/&#34; title=&#34;strings - The Go Programming Language&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;EqualFold()&lt;/code&gt; 関数と &lt;a href=&#34;https://golang.org/pkg/strings/&#34; title=&#34;strings - The Go Programming Language&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;ToLower()&lt;/code&gt; 関数でどっちが速いかなんてのは考えるまでもないのだが，いちおう試しておこう。
こんな感じのコードでいいかな。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;equalfold&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;lefts&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;rights&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;GO&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ＧＯ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;rights2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ｇｏ&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;BenchmarkEqualCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lefts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rights2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;					&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt;
				&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
					&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt;
				&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;BenchmarkEqualLower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lefts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rights&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ToLower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;					&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt;
				&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
					&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt;
				&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;BenchmarkEqualFold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lefts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rights&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;EqualFold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;					&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt;
				&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
					&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;right&lt;/span&gt;
				&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;BenchmarkEqualCase&lt;/code&gt; は他の2つのコードとの比較用に書いてみた。
実行結果はこんな感じ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go test -bench Equal -benchmem
goos: linux
goarch: amd64
pkg: sample
BenchmarkEqualCase-4    	32061360	        36.2 ns/op	       0 B/op	       0 allocs/op
BenchmarkEqualLower-4   	 1367802	       869 ns/op	      64 B/op	       8 allocs/op
BenchmarkEqualFold-4    	 3149362	       378 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	sample	4.748s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;表にまとめておこう。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;関数名&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;実行時間&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Alloc サイズ&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Alloc 回数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BenchmarkEqualCase&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36.2 ns&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0 bytes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BenchmarkEqualLower&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;869 ns&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64 bytes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BenchmarkEqualFold&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;378 ns&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0 bytes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;BenchmarkEqualCase&lt;/code&gt; と &lt;code&gt;BenchmarkEqualFold&lt;/code&gt; の比較では &lt;code&gt;BenchmarkEqualFold&lt;/code&gt; のほうが10倍の時間がかかっているが，それよりも &lt;code&gt;BenchmarkEqualLower&lt;/code&gt; の処理のほうが圧倒的に遅いことが分かる。
まぁメモリ・アロケーションが絡むとねぇ。&lt;/p&gt;
&lt;p&gt;というわけで，大文字小文字を無視した文字列比較では素直に &lt;a href=&#34;https://golang.org/pkg/strings/&#34; title=&#34;strings - The Go Programming Language&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;EqualFold()&lt;/code&gt; 関数を使いましょう，という話でした。&lt;/p&gt;
&lt;h2 id=&#34;-nul-&#34;&gt;【付録】 “NUL” 文字の比較&lt;/h2&gt;
&lt;p&gt;まるきし余談ではあるが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mattn.kaoriya.net/software/lang/go/20190806152526.htm&#34;&gt;Big Sky :: Go で大文字小文字無視の文字列比較ベンチマーク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この記事にある &lt;code&gt;isDevNull3&lt;/code&gt; 関数について&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isDevNull3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ToLower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;nul&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/strings/&#34; title=&#34;strings - The Go Programming Language&#34;&gt;&lt;code&gt;strings&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;EqualFold()&lt;/code&gt; 関数を使うよう書き換えてみる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isDevNull3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;EqualFold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;nul&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでベンチマークテストを実行すると&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;goos: linux
goarch: amd64
pkg: sample/lowercase
BenchmarkS1-4   	41640913	        27.2 ns/op	       0 B/op	       0 allocs/op
BenchmarkS2-4   	35464141	        30.7 ns/op	       0 B/op	       0 allocs/op
BenchmarkS3-4   	12628962	        94.4 ns/op	       0 B/op	       0 allocs/op
PASS
ok  	sample/lowercase	3.578s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;メモリ・アロケーションが発生しなくなり，かなり速くなる。
まぁ，それでもいっちゃん遅いのだが（笑）&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-10-20&#34;&gt;2018-10-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry><entry>
		<title>GolangCI でコード・レビューを自動化する</title>
		<category term="golang" label="golang" scheme="https://text.baldanders.info/golang/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/code-review-with-golangci/" />
		<id>tag:text.Baldanders.info,2019-12-15:/golang/code-review-with-golangci/</id>
		<published>2019-12-15T05:05:25+00:00</published>
		<updated>2019-12-15T05:05:43+00:00</updated>
		<summary>リポジトリ全体をチェックしてくれるレビュー・サービスの存在はありがたい。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;以前「&lt;a href=&#34;https://text.baldanders.info/golang/donot-sleep-through-life/&#34;&gt;golangci-lint に叱られる&lt;/a&gt;」で&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;q&gt;&lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; も気になるが，それはまたいつか&lt;/q&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と書いたが，今回はその話。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; は &lt;a href=&#34;https://github.com/&#34; title=&#34;The world’s leading software development platform · GitHub&#34;&gt;GitHub&lt;/a&gt; と連携して機能するコード・レビュー・サービスで， &lt;a href=&#34;https://github.com/&#34; title=&#34;The world’s leading software development platform · GitHub&#34;&gt;GitHub&lt;/a&gt; 上のリポジトリにある &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コードに lint をかけて結果を報告してくれる。
Pull request とも連携してレビュー結果を上げてくれるので，レビューにかかる労力をかなり引き下げることができる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;サインアップは &lt;a href=&#34;https://github.com/&#34; title=&#34;The world’s leading software development platform · GitHub&#34;&gt;GitHub&lt;/a&gt; アカウントで行うことができる。
サインアップに成功したらリポジトリ一覧画面に行けるようになる&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./list-of-reps.jpg&#34;&gt;&lt;img src=&#34;./list-of-reps.jpg&#34; srcset=&#34;./list-of-reps.jpg 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;連携したいリポジトリに &lt;code&gt;[Connect]&lt;/code&gt; するとレビューを開始するのだが，レビュー結果が表示されるまで結構時間がかかるみたい。
実は随分前に &lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; に登録していくつかのパッケージと連携させていたのだが，なかなか処理が終わらないので，そのまま綺麗サッパリ忘れ去っていたのだった（笑）&lt;/p&gt;
&lt;p&gt;レビューが終わったリポジトリの &lt;code&gt;[Report]&lt;/code&gt; を開くとこんな感じの画面になる。
これは問題がなかったリポジトリの場合：&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./result-review-no-error.jpg&#34;&gt;&lt;img src=&#34;./result-review-no-error.jpg&#34; srcset=&#34;./result-review-no-error.jpg 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;こっちは問題が発見されたリポジトリ：&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./result-review-error.jpg&#34;&gt;&lt;img src=&#34;./result-review-error.jpg&#34; srcset=&#34;./result-review-error.jpg 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;このレポート結果を基にコードを修正する。
当然ながら master ブランチ上で作業をしないこと。&lt;/p&gt;
&lt;p&gt;修正を commit &amp;amp; push し，修正を行ったブランチから pull request をかける。
&lt;a href=&#34;https://github.com/&#34; title=&#34;The world’s leading software development platform · GitHub&#34;&gt;GitHub&lt;/a&gt; 側は pull request したコードに対して連携しているサービスを呼び出して事前チェックを行う。
チェックにパスすればこんな感じになる。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;./pull-request.jpg&#34;&gt;&lt;img src=&#34;./pull-request.jpg&#34; srcset=&#34;./pull-request.jpg 850w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;問題があれば “Details” で問題箇所が示されるので，修正を行って再度 commit &amp;amp; push する。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; には&lt;a href=&#34;https://github.com/golangci/golangci-lint&#34; title=&#34;golangci/golangci-lint: Linters Runner for Go. 5x faster than gometalinter. Nice colored output. Can report only new issues. Fewer false-positives. Yaml/toml config.&#34;&gt;コマンドライン・ツール&lt;/a&gt;も用意されていて IDE やテキストエディタなどとも連携可能なのだが&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，どうしても見落としがあるみたいで，リポジトリ全体をチェックしてくれるレビュー・サービスの存在はありがたい。&lt;/p&gt;
&lt;p&gt;さて，他のパッケージも修正するか。&lt;/p&gt;
&lt;h2 id=&#34;heading&#34;&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.classmethod.jp/go/golangci/&#34;&gt;無料で使える Go 言語の CI サービス『GolangCI』を使ってみる ｜ Developers.IO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heading-1&#34;&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-10-20&#34;&gt;2018-10-20&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4542503461?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51CAFNAdZPL._SL160_.jpg&#34; width=&#34;113&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4542503461?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;組込み開発者におくるMISRA‐C:2004―C言語利用の高信頼化ガイド&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;MISRA‐C研究会 (編集)&lt;/dd&gt;
    &lt;dd&gt;日本規格協会 2006-10-01&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4542503461 (ASIN), 9784542503465 (EAN), 4542503461 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;私が持っているのはこれよりひとつ古い版だが，まぁいいか。むかし，車載用の組み込みエンジニアをやっていた頃は必読書として読まされました。今はもっと包括的な内容のものがあるはず。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-06&#34;&gt;2019-02-06&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;とはいえ &lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; がチェックしてくれるのは lint レベルのコード・チェックなので，ビジネスロジック等の妥当性は人間が判断する必要がある。言い方を変えれば &lt;a href=&#34;https://golangci.com/&#34; title=&#34;Automated code review for Go&#34;&gt;GolangCI&lt;/a&gt; で lint レベルのチェックを事前に行っておけば，人間はビジネスロジック等のチェックに専念することができる。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;既定では公開リポジトリのみが対象となる。お金を払えばプライベート・リポジトリもチェックできるらしいが試していない。 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; エディタの場合は &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージで Linter に &lt;a href=&#34;https://github.com/golangci/golangci-lint&#34; title=&#34;golangci/golangci-lint: Linters Runner for Go. 5x faster than gometalinter. Nice colored output. Can report only new issues. Fewer false-positives. Yaml/toml config.&#34;&gt;golangci-lint&lt;/a&gt; を指定できる。 &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
</feed>
