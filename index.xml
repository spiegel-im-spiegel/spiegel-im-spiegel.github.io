<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="https://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="https://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2020-09-16:/</id>
	<updated>2020-09-16T01:24:16+00:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>https://text.baldanders.info/images/avatar.jpg</icon>
	<logo>https://text.baldanders.info/images/avatar.jpg</logo>

	<entry>
		<title>Java 15 がリリースされた</title>
		<category term="release" label="release" scheme="https://text.baldanders.info/release/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/09/java-15-is-released/" />
		<id>tag:text.Baldanders.info,2020-09-16:/release/2020/09/java-15-is-released/</id>
		<published>2020-09-16T01:22:49+00:00</published>
		<updated>2020-09-16T01:24:16+00:00</updated>
		<summary>OpenJDK および同系列の Java のみのショート・サイクルのバージョンアップ</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;予定通り Java 15 がリリースされた。
&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; および同系列の Java のみのショート・サイクルのバージョンアップである。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openjdk.java.net/projects/jdk/15/&#34;&gt;JDK 15&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jdk.java.net/15/&#34;&gt;JDK 15 GA Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jdk.java.net/15/release-notes&#34;&gt;JDK 15 Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; を APT で管理するメリットはないので，実行バイナリを&lt;a href=&#34;https://jdk.java.net/15/&#34;&gt;リリースページ&lt;/a&gt;から直接ダウンロードして配置する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src
$ sudo curl -L &amp;#34;https://download.java.net/java/GA/jdk15/779bf45e88a44cbd9ea6621d33e33db1/36/GPL/openjdk-15_linux-x64_bin.tar.gz&amp;#34; -O
$ cd ..
$ sudo unlink java # 以前のバージョンの Java 環境がある場合
$ sudo tar xvf src/openjdk-15_linux-x64_bin.tar.gz
$ sudo ln -s jdk-15 java
$ java -version # すでに PATH が通っている場合
openjdk version &amp;#34;15&amp;#34; 2020-09-15
OpenJDK Runtime Environment (build 15+36-1562)
OpenJDK 64-Bit Server VM (build 15+36-1562, mixed mode, sharing)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;私としては &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; が動けばいいので，試しておく&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./factory-method-pattern.puml&#34;&gt;&lt;img src=&#34;./factory-method-pattern.png&#34; srcset=&#34;./factory-method-pattern.png 1193w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Factory Method Pattern&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;./factory-method-pattern.puml&#34;&gt;Factory Method Pattern&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;うむうむ。
ちゃんと動くな。&lt;/p&gt;
&lt;h2&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; のリポジトリが GitHub に移行&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://openjdk.java.net/&#34;&gt;OpenJDK&lt;/a&gt; のリポジトリが GitHub に移行したそうだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openjdk/jdk&#34;&gt;openjdk/jdk: JDK main-line development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コード管理について，2019年の段階で Mercurial から git への移行が提案されていたらしい。
その上で，自前での管理ではなく，外部のサービスを使うことにしたようだ。&lt;/p&gt;
&lt;p&gt;外部サービスとして GitHub を選択した理由は&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;GitHub&amp;rsquo;s performance is as good as or superior to other providers, it is the world&amp;rsquo;s largest source-code hosting service (50 million users as of May 2020), and it has one of the most extensive APIs.&lt;/p&gt;
&lt;p&gt;GitHubのパフォーマンスは他のプロバイダと同等かそれ以上であり、世界最大のソースコードホスティングサービス（2020年5月時点で5000万人のユーザー）でもあり、最も豊富なAPIを備えています。&lt;/p&gt;
&lt;p&gt;GitHub&amp;rsquo;s extensive API has enabled support for GitHub in many tools including text editors, IDEs, command-line tools, and graphical desktop clients.&lt;/p&gt;
&lt;p&gt;GitHubの豊富なAPIは、テキストエディタ、IDE、コマンドラインツール、グラフィカルなデスクトップクライアントなど、多くのツールでのサポートを実現しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/openjdkgithub.html&#34;&gt;OpenJDKのソースコード、GitHubへの移行を完了 － Publickey&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;とのこと。
さもありなん。&lt;/p&gt;
&lt;p&gt;ところで &lt;a href=&#34;https://github.blog/2020-05-06-new-from-satellite-2020-github-codespaces-github-discussions-securing-code-in-private-repositories-and-more/&#34; title=&#34;New from Satellite 2020: GitHub Discussions, Codespaces, securing code in private repositories, and more - The GitHub Blog&#34;&gt;GitHub Discussions&lt;/a&gt; はいつ一般に開放されるのだろう。
開放されるなら，Disqus なんか捨てて，フィードバックはそっちに移行したいんだけどなぁ。
それとも個人ユーザには開放されないとか？&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00I8AT1EU?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41GPVATQiZL._SL160_.jpg&#34; width=&#34;125&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00I8AT1EU?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;Java言語で学ぶリファクタリング入門&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2007-01-26 (Release 2014-03-12)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00I8AT1EU (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんによる「リファクタリング本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-11&#34;&gt;2018-12-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Java言語で学ぶリファクタリング入門 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00I8ATHGW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41mh5r0NwLL._SL160_.jpg&#34; width=&#34;126&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00I8ATHGW?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;増補改訂版 Java言語で学ぶデザインパターン入門&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2004-06-18 (Release 2014-03-12)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00I8ATHGW (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-05&#34;&gt;2016-01-05&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 増補改訂版 Java言語で学ぶデザインパターン入門 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00I8AT1BS?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41uoMp5etSL._SL160_.jpg&#34; width=&#34;126&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00I8AT1BS?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;結城 浩 (著)&lt;/dd&gt;
    &lt;dd&gt;SBクリエイティブ 2004-06-18 (Release 2014-03-12)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B00I8AT1BS (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;結城浩さんによる通称「デザパタ本」の Kindle 版。意外にも Java 以外でも応用できる優れもの。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-07&#34;&gt;2018-12-07&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- Java言語で学ぶデザインパターン入門 マルチスレッド編 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;2020-08-23 に &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; Version 1.2020.16 が&lt;a href=&#34;http://plantuml.com/changes&#34;&gt;リリース&lt;/a&gt;されている。 &lt;a href=&#34;http://plantuml.com/&#34; title=&#34;Open-source tool that uses simple textual descriptions to draw UML diagrams.&#34;&gt;PlantUML&lt;/a&gt; の使い方等については拙文「&lt;a href=&#34;https://text.baldanders.info/remark/2018/12/plantuml-1/&#34;&gt;真面目に PlantUML&lt;/a&gt;」シリーズを参考にどうぞ。 &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>「Web 口振受付サービス」ってなんぞ？</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/web-account-transfer/" />
		<id>tag:text.Baldanders.info,2020-09-15:/remark/2020/09/web-account-transfer/</id>
		<published>2020-09-15T08:59:10+00:00</published>
		<updated>2020-09-15T10:11:08+00:00</updated>
		<summary>オンライン上で識別・認証するためのデジタル・トークンを持っていない場合は「Web 口振受付サービス」で暗証番号やらの危なっかしい情報を使わざるを得ない，ということだ。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;さて，先週から各メディアは嬉々として「ドコモ口座」を叩いてるわけだが（まぁ&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/recently-security-incidents/#docomo-account&#34; title=&#34;キャッシュレス決済の脆弱性&#34;&gt;「ドコモ口座」による「&lt;ruby&gt;&lt;rb&gt;セキュリティ劇場&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;security theater&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;」&lt;/a&gt;がお粗末すぎるのは否めないが），問題の核心はそこじゃないだろうと思っていたら，やはり「ドコモ口座」だけじゃなかったようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://k-tai.watch.impress.co.jp/docs/news/1277074.html&#34;&gt;「ドコモ口座」以外5社の決済サービスでも不正利用、高市総務相が明らかに - ケータイ Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まずはおさらいから。&lt;/p&gt;
&lt;p&gt;piyokango さんによる「&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/08/054431&#34;&gt;ドコモ口座を悪用した不正送金についてまとめてみた&lt;/a&gt;」を参照して，今回の「関係者」を挙げてみる。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox lightmode&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/08/054431&#34;&gt;&lt;img src=&#34;../recently-security-incidents/20200908053844.png&#34; srcset=&#34;../recently-security-incidents/20200908053844.png 696w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ドコモ口座を悪用した不正送金についてまとめてみた - piyolog&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/08/054431&#34;&gt;ドコモ口座を悪用した不正送金についてまとめてみた - piyolog&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ここで気になるのはやはり「&lt;a href=&#34;https://www.chigin-cns.co.jp/services/web_service/&#34; title=&#34;Web口振受付サービス｜地銀ネットワークサービス&#34;&gt;Web 口振受付サービス&lt;/a&gt;」だろう。
某国営放送風テレビが「暗証番号を定期的に変える」とか頭の悪すぎることを言ったそうだし，「&lt;a href=&#34;https://www.chigin-cns.co.jp/services/web_service/&#34; title=&#34;Web口振受付サービス｜地銀ネットワークサービス&#34;&gt;Web 口振受付サービス&lt;/a&gt;」が今回のセキュリティ最弱点であることは（たぶん）間違いないだろう。&lt;/p&gt;
&lt;p&gt;じゃあ「&lt;a href=&#34;https://www.chigin-cns.co.jp/services/web_service/&#34; title=&#34;Web口振受付サービス｜地銀ネットワークサービス&#34;&gt;Web 口振受付サービス&lt;/a&gt;」ってなんぞ？&lt;/p&gt;
&lt;div class=&#34;box&#34;&gt;&lt;p&gt;ゴメンペコン。
ここからはかなり推測を含んでいる。
何故かというと，現時点で「&lt;a href=&#34;https://www.chigin-cns.co.jp/services/web_service/&#34; title=&#34;Web口振受付サービス｜地銀ネットワークサービス&#34;&gt;Web 口振受付サービス&lt;/a&gt;」が使えるサービスを持ってないから。&lt;/p&gt;
&lt;p&gt;というわけで，続きをどうぞ。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;まず，今回正直（？）に申告したゆうちょ銀行を見てみる。
ゆうちょ銀行では「&lt;a href=&#34;https://www.jp-bank.japanpost.jp/kojin/sokin/kozafurikae/kj_sk_kf_furikae.html&#34;&gt;口座振替受付サービス&lt;/a&gt;」として以下の3つの手段を提供している。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;&lt;dl&gt;
&lt;dt&gt;収納機関のWebサイトからのお申込み（Web 受付方式）&lt;/dt&gt;
&lt;dd&gt;&lt;q&gt;携帯電話会社やクレジットカード会社など（収納機関）のWebサイトからゆうちょ銀行を選択し、インターネット経由で即時に自動払込みのお申込みができます&lt;/q&gt;&lt;/dd&gt;
&lt;dt&gt;収納機関のWebサイトからのお申込み（金融機関受付方式）&lt;/dt&gt;
&lt;dd&gt;&lt;q&gt;携帯電話会社やクレジットカード会社など（収納機関）のWebサイトからゆうちょ銀行を選択し、ゆうちょダイレクトから自動払込みのお申込みができます&lt;/q&gt;&lt;/dd&gt;
&lt;dt&gt;ゆうちょ銀行のキャッシュカードでのお申込み（収納機関受付方式）&lt;/dt&gt;
&lt;dd&gt;&lt;q&gt;ゆうちょ銀行の通常貯金口座のキャッシュカードを、携帯電話会社やクレジットカード会社など（収納機関）に設置された端末機に読み込ませ、暗証番号を入力することで自動払込みのお申込みができます&lt;/q&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.jp-bank.japanpost.jp/kojin/sokin/kozafurikae/kj_sk_kf_furikae.html&#34;&gt;口座振替受付サービス－ゆうちょ銀行&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ただし，これら3つの手段を使うにはそれぞれ条件がある。
以下に表にしてみる。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;申し込み方法&lt;/th&gt;
&lt;th&gt;サービス名&lt;/th&gt;
&lt;th&gt;登録方法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ゆうちょダイレクト&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Web 受付方式&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.chigin-cns.co.jp/services/web_service/&#34; title=&#34;Web口振受付サービス｜地銀ネットワークサービス&#34;&gt;Web 口振受付サービス&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Web ブラウザ&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;金融機関受付方式&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.pay-easy.jp/&#34; title=&#34;「いつでも、どこでも、ペイジー。」日本マルチペイメントネットワーク推進協議会&#34;&gt;Pay-easy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Web ブラウザ&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;収納機関受付方式&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.pay-easy.jp/&#34; title=&#34;「いつでも、どこでも、ペイジー。」日本マルチペイメントネットワーク推進協議会&#34;&gt;Pay-easy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;専用端末&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;そういや，こっちに帰郷ったときに市役所で引き落とししてもらう銀行を登録する際に &lt;a href=&#34;https://www.pay-easy.jp/&#34; title=&#34;「いつでも、どこでも、ペイジー。」日本マルチペイメントネットワーク推進協議会&#34;&gt;Pay-easy&lt;/a&gt; の専用端末らしきものを使ったわ（今メインで利用してる銀行は &lt;a href=&#34;https://www.pay-easy.jp/&#34; title=&#34;「いつでも、どこでも、ペイジー。」日本マルチペイメントネットワーク推進協議会&#34;&gt;Pay-easy&lt;/a&gt; に対応してる）。&lt;/p&gt;
&lt;p&gt;おそらく Web での登録であっても「ゆうちょダイレクト」のアカウントを持っていれば，そのアカウントの認証トークンを使って &lt;a href=&#34;https://www.pay-easy.jp/&#34; title=&#34;「いつでも、どこでも、ペイジー。」日本マルチペイメントネットワーク推進協議会&#34;&gt;Pay-easy&lt;/a&gt; 経由で識別（identification）や認証（authentication）は可能なのだろう。&lt;/p&gt;
&lt;p&gt;言い方を変えると，オンライン上で識別・認証するためのデジタル・トークンを持っていない場合は「&lt;a href=&#34;https://www.chigin-cns.co.jp/services/web_service/&#34; title=&#34;Web口振受付サービス｜地銀ネットワークサービス&#34;&gt;Web 口振受付サービス&lt;/a&gt;」で暗証番号やらの危なっかしい情報を使わざるを得ない，ということだ。&lt;/p&gt;
&lt;p&gt;これ結構マズいよねぇ。
個人的には「&lt;a href=&#34;https://www.chigin-cns.co.jp/services/web_service/&#34; title=&#34;Web口振受付サービス｜地銀ネットワークサービス&#34;&gt;Web 口振受付サービス&lt;/a&gt;」を使う銀行さんはあまり利用したくない気分である。
既に口座があって公共料金の引き落とし等に使ってるならどうしようもないけど（マメに残高履歴をチェックするしかない）。&lt;/p&gt;
&lt;p&gt;たとえばダイレクトバンキング等のアカウントを持っていて Web で &lt;a href=&#34;https://www.pay-easy.jp/&#34; title=&#34;「いつでも、どこでも、ペイジー。」日本マルチペイメントネットワーク推進協議会&#34;&gt;Pay-easy&lt;/a&gt; が利用可能なら「&lt;a href=&#34;https://www.chigin-cns.co.jp/services/web_service/&#34; title=&#34;Web口振受付サービス｜地銀ネットワークサービス&#34;&gt;Web 口振受付サービス&lt;/a&gt;」での登録を全て無効にするとかできないのだろうか。&lt;/p&gt;
&lt;p&gt;まぁ，身元の曖昧なユーザを抱えるサービスに対して口座振替を設定するようなシチュエーションは今までなかったんだろう。
おそらく銀行ごとに「&lt;a href=&#34;https://www.chigin-cns.co.jp/services/web_service/&#34; title=&#34;Web口振受付サービス｜地銀ネットワークサービス&#34;&gt;Web 口振受付サービス&lt;/a&gt;」で対応可能な収納機関がかなり絞り込まれると思う。
今後の動向に注目である。&lt;/p&gt;
&lt;!-- eof --&gt;
</content>
	</entry><entry>
		<title>FOSS とジョナサン</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/foss-and-jonathan/" />
		<id>tag:text.Baldanders.info,2020-09-14:/remark/2020/09/foss-and-jonathan/</id>
		<published>2020-09-14T12:06:21+00:00</published>
		<updated>2020-09-15T00:15:38+00:00</updated>
		<summary>そして Open Source は「強者の武器」となる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;最近 Facebook や Twitter の TL で FOSS (Free/Open Source Software) に関する総括みたいな記事をよく見かけるのだが，気のせいだろうか。
まぁ TL って自身の性癖の暴露だから，そういう風に見えてしまうこともあるのだろう。&lt;/p&gt;
&lt;h2&gt;「自由」は主張である&lt;/h2&gt;
&lt;p&gt;人とは本来，不自由な存在である。
何故なら，人は独りでは自身を証明できないから。
故に人が「自由」を求めるのなら「対象」が必ずあるし，求めるからには「対価」が必要である。&lt;/p&gt;
&lt;p&gt;Free Software は以下の4つの自由を求めている。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;どんな目的に対しても、プログラムを望むままに実行する自由 (第零の自由)。&lt;/li&gt;
&lt;li&gt;プログラムがどのように動作しているか研究し、必要に応じて改造する自由 (第一の自由)。&lt;/li&gt;
&lt;li&gt;ほかの人を助けられるよう、コピーを再配布する自由 (第二の自由)。&lt;/li&gt;
&lt;li&gt;改変した版を他に配布する自由 (第三の自由)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.html&#34;&gt;自由ソフトウェアとは? - GNUプロジェクト - フリーソフトウェアファウンデーション&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;物凄く簡単に言うと Free Software は「『政治から自由である』という政治主張」を持つソフトウェア（活動）なのである。
そして「政治主張」を実践するからには，責任やら義務やらが発生する。
その実装例が GNU GPL (General Public License; 一般公衆ライセンス) における “copyleft” という法的 hack である，と考えれば分かりやすいだろう。&lt;/p&gt;
&lt;p&gt;つまり Free Software は「政治から自由である」ために政治的な責任・義務を負うという Anarchism 特有のレトリックを抱えているわけだ。&lt;/p&gt;
&lt;h2&gt;Open Source as a Jonathan&lt;/h2&gt;
&lt;p&gt;インターネットの老害達（笑）が懐かしむ「インターネットの黄金時代」をヒッピー文化に擬えることがある。
で，私の中でヒッピー文化の典型は『&lt;a href=&#34;https://www.amazon.co.jp/dp/B01916B8V8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;かもめのジョナサン&lt;/a&gt;』だったりする。&lt;/p&gt;
&lt;p&gt;かの作品に対する感想や評価は色々あるだろうが，私の中でジョナサンは「『飛ぶ』ために全てから逃げた存在」だ。
まぁ，かつてのオウム信者にはアレを読んで入信した人とかもいるそうなので，それほど的はずれではないだろう（笑）&lt;/p&gt;
&lt;p&gt;（最初からそう呼ばれていたわけではないが） Open Source は Free Software 運動から「政治主張」を洗い落としたものである。
Open Source の枠組みでは “copyleft” もオプションのひとつに過ぎない。
おおっ！ これぞまさしくポリシー・ロンダリング（違う&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;）。&lt;/p&gt;
&lt;p&gt;Open Source がそうした理由は単純だ。
「自由」の対価を払いたくなかったから。
だから「自由を得る」のではなく「不自由から逃げる」のだ，ジョナサンのように，「それがぼくには楽しかったから」。&lt;/p&gt;
&lt;h2&gt;囚人のジレンマと搾取&lt;/h2&gt;
&lt;p&gt;すずきひろのぶさんが最近「&lt;span&gt;&lt;a href=&#34;#ZgotmplZ&#34;&gt;フリーソフトウェアと それを取巻く世界の状況 &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;」という2007年当時のスライドを公開されていて，この中に「囚人のジレンマ」についての言及がある。&lt;/p&gt;
&lt;p&gt;一応「囚人のジレンマ」について簡単に解説しておこう。&lt;/p&gt;
&lt;p&gt;ある犯罪を行った囚人 A, B に対し&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;If A and B each betray the other, each of them serves two years in prison&lt;/li&gt;
&lt;li&gt;If A betrays B but B remains silent, A will be set free and B will serve three years in prison&lt;/li&gt;
&lt;li&gt;If A remains silent but B betrays A, A will serve three years in prison and B will be set free&lt;/li&gt;
&lt;li&gt;If A and B both remain silent, both of them will serve only one year in prison (on the lesser charge)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Prisoner%27s_dilemma&#34;&gt;Prisoner&amp;#39;s dilemma - Wikipedia&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;と持ちかける。
表にするとこんな感じ。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote class=&#34;nobox&#34;&gt;
&lt;table&gt;&lt;tbody&gt;
&lt;tr&gt;
  &lt;th style=&#34;vertical-align:middle&#34;&gt;&lt;/th&gt;
  &lt;th style=&#34;vertical-align:middle&#34;&gt;Prisoner B stays silent&lt;br&gt;(cooperates)&lt;/th&gt;
  &lt;th style=&#34;vertical-align:middle&#34;&gt;Prisoner B betrays&lt;br&gt;(defects)&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;
  &lt;th style=&#34;vertical-align:middle&#34;&gt;Prisoner A stays silent&lt;br&gt;(cooperates)&lt;/th&gt;
  &lt;td style=&#34;vertical-align:middle&#34;&gt;Each serves 1 year&lt;/td&gt;
  &lt;td style=&#34;vertical-align:middle&#34;&gt;Prisoner A: 3 years&lt;br&gt;Prisoner B: goes free&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
  &lt;th style=&#34;vertical-align:middle&#34;&gt;Prisoner A betrays&lt;br&gt;(defects)&lt;/th&gt;
  &lt;td style=&#34;vertical-align:middle&#34;&gt;Prisoner A: goes free&lt;br&gt;Prisoner B: 3 years&lt;/td&gt;
  &lt;td style=&#34;vertical-align:middle&#34;&gt;Each serves 2 years&lt;br&gt;(lesser charge)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Prisoner%27s_dilemma&#34;&gt;Prisoner&amp;#39;s dilemma - Wikipedia&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;このとき囚人 A, B はそれぞれ黙秘するか裏切るか？ という「非協力ゲーム」の一種である。
この条件下では「両者とも黙秘（協力）する」がパレート効率的であるにも関わらず，「単独のゲーム」または「有限繰り返しゲーム」においては「両者とも裏切る」がナッシュ均衡となることが分かっている。&lt;/p&gt;
&lt;p&gt;では「無期限繰り返しゲーム」による囚人のジレンマはどうなるのか。
これについては様々なモデルで研究が行われている。
たとえば&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;明白な答えの1つは、力のある人はその力を使って力の弱い人を利用できるということだ&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.technologyreview.jp/s/144680/prisoners-dilemma-shows-how-exploitation-is-a-basic-property-of-human-society/&#34;&gt;MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;は典型的な「搾取」のパターンだ。&lt;/p&gt;
&lt;p&gt;さらに最近では「&lt;a href=&#34;https://www.technologyreview.jp/s/144680/prisoners-dilemma-shows-how-exploitation-is-a-basic-property-of-human-society/&#34; title=&#34;MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明&#34;&gt;戦略的力関係とゲームのルールが両者に対称的である場合&lt;/a&gt;」でも&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;p&gt;アリスがボブの戦略を知った場合に、ボブの行動を利用し、アリス自身の結果をより良くできることを、藤本と金子教授は示している。&lt;/p&gt;
&lt;p&gt;しかし、この戦略がボブにとってより良い結果を約束するとアリスが保証すれば、アリスはボブの協力を確実なものにできる。たとえばある状況では、両方のプレイヤーが裏切る場合の結果よりも、ボブが犠牲になった方がボブにとって良い結果になるとアリスが保証できるのだ。&lt;/p&gt;
&lt;p&gt;このため、たとえアリスがより有利になったとしても、ボブには搾取を受け入れる動機がある。「このように、両方のプレイヤーが搾取関係を安定にしています」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.technologyreview.jp/s/144680/prisoners-dilemma-shows-how-exploitation-is-a-basic-property-of-human-society/&#34;&gt;MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;といった「搾取」のパターンも発表されている。&lt;/p&gt;
&lt;h2&gt;そして Open Source は「強者の武器」となる&lt;/h2&gt;
&lt;p&gt;「&lt;span&gt;&lt;a href=&#34;#ZgotmplZ&#34;&gt;フリーソフトウェアと それを取巻く世界の状況 &lt;sup&gt;&lt;i class=&#34;far fa-file-pdf&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;」では， GPL 下でソフトウェア開発を行うことでパレート効率的である「両者とも協力する」関係に固定できると主張している（もちろん喩え話として語られている）。&lt;/p&gt;
&lt;p&gt;しかし GPLv3 アップデートを巡る騒動を見る限り，誰もがパレート効率的な「両者とも協力する」関係を望んでいるわけではないように見える。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;the GPLv2 was pretty popular at the time, but there were a couple notable loopholes some big corporations had been taking advantage of, which the free software people wanted to close. a whole bunch of people thought the GPLv2 was fine the way it was, though - closing the loopholes as aggressively as the GPLv3 did cut off some justifiable security measures, and some people said that it could do more harm than good. the linux kernel, along with a lot more stuff, declared it was sticking with the GPLv2 and not moving to the GPLv3&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.boringcactus.com/2020/08/13/post-open-source.html&#34;&gt;Post-Open Source | boringcactus&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;and LLVM became at least as good as GCC, and a less risky decision for big companies, and easier to use to build new languages. so the free software movement’s last technical advantage was gone. its social advantages also kinda went up in flames with the GPLv3, too: the software that was the foundation for the GPL enforcement lawsuits stuck with the GPLv2&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.boringcactus.com/2020/08/13/post-open-source.html&#34;&gt;Post-Open Source | boringcactus&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;「自由を得る」 Free Software (運動) より「不自由から逃げる」 Open Source を選好することによって何が起きるか。
「&lt;a href=&#34;https://www.technologyreview.jp/s/144680/prisoners-dilemma-shows-how-exploitation-is-a-basic-property-of-human-society/&#34; title=&#34;MIT Tech Review: なぜ搾取は起きるのか？東大研究者が「囚人のジレンマ」で解明&#34;&gt;戦略的力関係とゲームのルールが両者に対称的である場合でも、搾取的な関係が構築できる&lt;/a&gt;」のであれば，それはどのような形を取るのか。&lt;/p&gt;
&lt;p&gt;ジョナサンは「ここではない」世界へと逃げ込めたが，かもめならぬ我が身では何があろうとこの世界この社会で生きていかなければならない。&lt;/p&gt;
&lt;p&gt;Open Source に関する批判は色々見受けるが，要するに Open Source が「強者の武器」となり，情報力を背景にした搾取の構造を構成していることが問題なのだと思う。
しかし Free Software ではその非対称性を壊せない。&lt;/p&gt;
&lt;p&gt;故に&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;tl;dr: say no to licenses, say yes to norms&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.boringcactus.com/2020/08/13/post-open-source.html&#34;&gt;Post-Open Source | boringcactus&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なんてな話も出るのかもしれない。
個人的には（日本の法運用を見ても分かる通り）規範だのガイドラインだのをベースにした運用は腐敗や搾取の温床にしかならないと思うが（笑）&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cruel.org/economist/courier200712.html&#34;&gt;クーリエ連載；エコノミスト紹介、自由のためなら人が死んでもいい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mynotebook.h2np.net/post/5666&#34;&gt;フリーソフトウェアとそれを取巻く世界の状況 (2007) – とりあえずノートがわりに書いてます&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boringcactus.com/2020/08/13/post-open-source.html&#34;&gt;Post-Open Source | boringcactus&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2020/09/blog-post_13.html&#34;&gt;ブログ: ポスト・オープンソース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2017/01/internet-in-the-incubator/&#34;&gt;孵卵器の中のインターネット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2019/06/kyoken/&#34;&gt;搾取と狂狷&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B01916B8V8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41W5YDuOufL._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B01916B8V8?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;かもめのジョナサン【完成版】（新潮文庫）&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;リチャード・バック (著), 五木 寛之 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;新潮社 2015-07-01 (Release 2015-12-18)&lt;/dd&gt;
    &lt;dd&gt;Kindle版&lt;/dd&gt;
    &lt;dd&gt;B01916B8V8 (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;「まぼろしの4章」を加えた完成版。私の中でヒッピー文化のイメージは子どものときに読んだ『かもめのジョナサン』であり，初期のインターネットも『かもめのジョナサン』の延長線上にあると理解している。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-01-23&#34;&gt;2017-01-23&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- かもめのジョナサン --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.aozora.gr.jp/cards/000021/card4307.html&#34;&gt;&lt;img src=&#34;https://text.baldanders.info/images/aozora/card4307.svg&#34; width=&#34;110&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.aozora.gr.jp/cards/000021/card4307.html&#34;&gt;グリゴリの捕縛&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;白田 秀彰&lt;/dd&gt;
    &lt;dd&gt; 2001-11-26 (Release 2014-09-17)&lt;/dd&gt;
    &lt;dd&gt;青空文庫&lt;/dd&gt;
    &lt;dd&gt;4307 (図書カードNo.)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;白田秀彰さんの「&lt;a href=&#34;http://orion.mt.tama.hosei.ac.jp/hideaki/kenporon.htm&#34;&gt;グリゴリの捕縛&lt;/a&gt;」が青空文庫に収録されていた。
内容は &lt;strike&gt;怪獣大決戦&lt;/strike&gt; おっと憲法（基本法）についてのお話。
古代社会 → 中世社会 → 近代社会 → 現代社会 と順を追って法と慣習そして力（power）との関係について解説し，その中で憲法（基本法）がどのように望まれ実装されていったか指摘してる。
その後，現代社会の次のパラダイムに顕現する「情報力」と社会との関係に言及していくわけだ。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-03-30&#34;&gt;2019-03-30&lt;/abbr&gt; (powered by &lt;a href=&#34;https://aozorahack.org/&#34;&gt;aozorahack&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- グリゴリの捕縛 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;&lt;img src=&#34;https://tatsu-zine.com/images/books/877/cover_s.jpg&#34; width=&#34;106&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://tatsu-zine.com/books/infoshare2&#34;&gt;もうすぐ絶滅するという開かれたウェブについて 続・情報共有の未来&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;yomoyomo (著)&lt;/dd&gt;
    &lt;dd&gt;達人出版会 2017-12-25 (Release 2019-03-02)&lt;/dd&gt;
    &lt;dd&gt;デジタル書籍&lt;/dd&gt;
    &lt;dd&gt;infoshare2 (tatsu-zine.com)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;&lt;a href=&#34;https://wirelesswire.jp/author/yomoyomo/&#34;&gt;WirelessWire News 連載&lt;/a&gt;の書籍化。感想は&lt;a href=&#34;https://text.baldanders.info/remark/2019/01/infoshare2/&#34;&gt;こちら&lt;/a&gt;。祝 &lt;a href=&#34;https://www.amazon.co.jp/dp/B08DD2MC46?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Kindle 化&lt;/a&gt;！&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2018-12-31&#34;&gt;2018-12-31&lt;/abbr&gt;&lt;/p&gt;
&lt;/div&gt; &lt;!-- 続・情報共有の未来 --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4796880011?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51WZM2W6ZBL._SL160_.jpg&#34; width=&#34;111&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4796880011?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;それがぼくには楽しかったから 全世界を巻き込んだリナックス革命の真実 (小プロ・ブックス)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;リーナス トーバルズ (著), デビッド ダイヤモンド (著), 風見 潤 (翻訳), 中島 洋 (監修)&lt;/dd&gt;
    &lt;dd&gt;小学館プロダクション 2001-05-10&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4796880011 (ASIN), 9784796880015 (EAN), 4796880011 (ISBN)&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;Linux の作者 Linus Torvalds の自伝的作品。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2017-01-23&#34;&gt;2017-01-23&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- それがぼくには楽しかったから --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/B00FU3P37W?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51i5fOe6NKL._SL160_.jpg&#34; width=&#34;160&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B00FU3P37W?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;かもめが翔んだ日&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;渡辺真知子 (メインアーティスト)&lt;/dd&gt;
    &lt;dd&gt;Sony Music Direct(Japan)Inc. 1978-05-02 (Release 2014-04-04)&lt;/dd&gt;
    &lt;dd&gt;MP3 ダウンロード&lt;/dd&gt;
    &lt;dd&gt;B00FU3P37W (ASIN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;4&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;far fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;そらで唄えます。つか，今でもカラオケでよく唄います（笑）&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2020-09-14&#34;&gt;2020-09-14&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- かもめが翔んだ日 --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;本当の policy laundering は国際的な議論や規制を都合よく利用して国内での立法プロセスを迂回することをさす： &lt;q lang=&#34;en&#34;&gt;In their review of global business regulation, Braithwaite and Drahos find that some countries (notably the U.S. and the UK) push for certain regulatory standards in international bodies and then bring those regulations home under the requirement of harmonization and the guise of multilateralism; this is what we refer to as policy laundering&lt;/q&gt;. (via &lt;a href=&#34;https://en.wikipedia.org/wiki/Policy_laundering&#34;&gt;Policy laundering - Wikipedia&lt;/a&gt;) &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>2020-09-13 のブックマーク</title>
		<category term="bookmarks" label="bookmarks" scheme="https://text.baldanders.info/bookmarks/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/bookmarks/2020/09/13-bookmarks/" />
		<id>tag:text.Baldanders.info,2020-09-13:/bookmarks/2020/09/13-bookmarks/</id>
		<published>2020-09-13T02:05:45+00:00</published>
		<updated>2020-09-13T02:07:11+00:00</updated>
		<summary>「Yubicoが最新セキュリティキー「Yubikey 5C」を発表、価格は約5800円」他</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;h2&gt;リリース情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golangci/golangci-lint/releases/tag/v1.31.0&#34;&gt;Release v1.31.0 · golangci/golangci-lint · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/atom/atom/releases/tag/v1.51.0&#34;&gt;Release 1.51.0 · atom/atom · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vscode/releases/tag/1.49.0&#34;&gt;Release August 2020 · microsoft/vscode · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mathjax/MathJax-src/releases/tag/3.1.1&#34;&gt;Release MathJax v3.1.1 · mathjax/MathJax-src · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mathjax/MathJax-src/releases/tag/3.1.2&#34;&gt;Release MathJax v3.1.2 · mathjax/MathJax-src · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;バベルのインターネット&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/07/2020-09-07-scratch-ban-in-china/&#34;&gt;中国がMITの子供向けプログラミング言語「Scratch」の国内使用を禁止  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/10/2020-09-10-huawei-debut-harmonyos-android-alternative-phones-2021/&#34;&gt;ファーウェイスマホは2021年にHarmonyOSを搭載へ、HarmonyOS 2.0ベータを年内配布  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;セキュリティ＆プライバシー関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/newsflash/2020090401.html&#34;&gt;マルウェア Emotet の感染拡大および新たな攻撃手法について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sakura.ad.jp/information/announcements/2020/09/07/1968204806/&#34;&gt;WordPress「File Managerプラグイン」の脆弱性についての注意喚起 | さくらインターネット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/08/054431&#34;&gt;ドコモ口座を悪用した不正送金についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2020/09/more_on_nists_p.html&#34;&gt;More on NIST’s Post-Quantum Cryptography - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1275821.html&#34;&gt;Intel、2020年9月のセキュリティアドバイザリを公開 ～第8世代Intel Core以降などのBIOSに問題 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/10/2020-09-09-yubico-reveals-new-yubikey/&#34;&gt;Yubicoが最新セキュリティキー「Yubikey 5C」を発表、価格は約5800円  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35159398/&#34;&gt;NSA元長官キース・アレクサンダー氏がアマゾンの取締役に - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.openssl.org/news/secadv/20200909.txt&#34;&gt;OpenSSL Security Advisory: Raccoon Attack (CVE-2020-1968)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1276532.html&#34;&gt;「OpenSSL」に暗号通信を解読可能な脆弱性“Raccoon Attack” ～パッチ提供のない旧版は注意 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2020/09/ranking-national-cyber-power.html&#34;&gt;Ranking National Cyber Power - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;天文関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nao.ac.jp/news/topics/2020/20200908-6m.html&#34;&gt;6mミリ波電波望遠鏡が日本天文遺産に認定 | 国立天文台(NAOJ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apod.nasa.gov/apod/ap200908.html&#34;&gt;APOD: 2020 September 8 - GW190521: Unexpected Black Holes Collide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://astronomynow.com/2020/09/08/survey-finds-no-detectable-alien-radio-signals-across-10-million-stars/&#34;&gt;Survey finds no detectable alien radio signals across 10 million stars – Astronomy Now&lt;/a&gt; : &lt;a href=&#34;https://news.local-group.jp/20200910.html#p02&#34;&gt;ほ座の1000万個以上の恒星がある領域で電波による地球外文明探査を実施。しかし検出できず&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;知財関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://torrentfreak.com/archivists-want-broader-dmca-exemption-for-abandoned-online-games-200910/&#34;&gt;Archivists Want Broader DMCA Exemption for ‘Abandoned’ Online Games * TorrentFreak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boringcactus.com/2020/08/13/post-open-source.html&#34;&gt;Post-Open Source | boringcactus&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2020/09/blog-post_13.html&#34;&gt;ブログ: ポスト・オープンソース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;その他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2020/09/schneiercom_is_.html&#34;&gt;Schneier.com is Moving - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/webidevisual_studio_codespaecsgithub_codespaces.html&#34;&gt;マイクロソフト、WebIDEの「Visual Studio Codespaecs」を「GitHub Codespaces」に統合へ － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/azure_spring_cloudjava_spring_boot.html&#34;&gt;「Azure Spring Cloud」正式リリース。JavaフレームワークSpring Bootの開発と実行のためのフルマネージド環境 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.mozilla.org/addons/2020/09/02/update-on-extension-support-in-the-new-firefox-for-android/&#34;&gt;Update on extension support in the new Firefox for Android | Mozilla Add-ons Blog&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/news/1275539.html&#34;&gt;Android版「Firefox」で利用できるアドオンが少な過ぎる問題についてMozillaが声明 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/smb_over_quicvpn.html&#34;&gt;マイクロソフトが「SMB over QUIC」ファイル共有プロトコル実装中。VPNなしでもインターネット上で安全にファイルサーバへのアクセスを実現へ － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2020/09/20200908_01.html&#34;&gt;2020年9月8日ニュース「血栓作るタンパク質で新型コロナ重症化を予測 千葉大が実用化に向け臨床研究」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shimotaroo/items/b73d896ace10894fd290&#34;&gt;Gitでやりたいこと、ここで見つかる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/awsazureazure_cost_management_billingaws.html&#34;&gt;マイクロソフト、AWSのコスト管理機能をAzureの管理機能に統合。「Azure Cost Management + Billing」AWS用コネクタが正式リリース － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/googlerpaappsheet_automationbusiness_application_platform.html&#34;&gt;GoogleもRPAに参入か。ノーコードでプロセスオートメーションを実現する「AppSheet Automation」を含む「Business Application Platform」を発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/info/announce/1275529.html&#34;&gt;【編集部からのお知らせ】窓の杜ライブラリでクラウドサービスの紹介をはじめます！ - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/10/nvidia-geforce/&#34;&gt;モバイル向けGPUでも優勢を誇るNVIDIA「GeForce」シリーズ  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/openjdkgithub.html&#34;&gt;OpenJDKのソースコード、GitHubへの移行を完了 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.documentfoundation.org/blog/2020/09/08/libreoffice-tt-replacing-microsoft-fonts/&#34;&gt;LibreOffice Tips &amp;amp; Tricks: Replacing Microsoft Fonts - The Document Foundation Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/09/2020-09-08-google-cloud-launches-its-business-application-platform-with-apigee-and-appsheet/&#34;&gt;Google CloudがAPI管理とノーコードを駆使したビジネスアプリプラットフォームを公開  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forest.watch.impress.co.jp/docs/serial/progedu/1276077.html&#34;&gt;TensorFlowの機械学習による画像認識をScratch上で！ 子どもでもできるAI活用プログラミング - どれ使う？プログラミング教育ツール - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/10/2020-09-09-q-ctrl-and-quantum-machines-team-up-to-accelerate-quantum-computing/&#34;&gt;Q-CTRLとQuantum Machinesが提携、量子コンピューティング開発を加速  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/09/2020-09-08-android-11-has-arrived/&#34;&gt;グーグルがAndroid 11を公開、メッセージ、プライバシー関連を中心に強化・改善  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jp.techcrunch.com/2020/09/09/2020-09-08-diffblue-launches-a-free-community-edition-of-its-automated-java-unit-testing-tool/&#34;&gt;自動JavaユニットテストツールDiffblueの無料コミュニティエディションが登場  |  TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/awsazureazure_cost_management_billingaws.html&#34;&gt;マイクロソフト、AWSのコスト管理機能をAzureの管理機能に統合。「Azure Cost Management + Billing」AWS用コネクタが正式リリース － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/chefprogress.html&#34;&gt;データセンター構成ツールの「Chef」、Progressによる買収を発表 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2020/09/the_third_editi.html&#34;&gt;The Third Edition of Ross Anderson’s Security Engineering - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/20/githubgitlabwebidegitpodgithub_codespaces.html&#34;&gt;GitHub/GitLabとの統合用WebIDE「Gitpod」がオープンソースで公開。GitHub Codespacesを先取りする開発環境 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scienceportal.jst.go.jp/news/newsflash_review/newsflash/2020/09/20200911_01.html&#34;&gt;2020年9月11日ニュース「特定外来生物『ヒガタアシ』中国経由で侵入か 遺伝子解析＋貿易統計で突き止め」 | SciencePortal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gonum.org/post/word_ladder/&#34;&gt;Using Gonum Graphs to Solve Word Ladder Puzzles | Gonum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/System-Glitch/goyave&#34;&gt;System-Glitch/goyave: 🍐 Elegant Golang Web Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gpl-reading.connpass.com/event/188380/&#34;&gt;第5回『プログラミング言語Go』オンライン読書会 - connpass&lt;/a&gt; : 取り敢えずエントリしてみた&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://okuranagaimo.blogspot.com/2020/09/pcr.html&#34;&gt;ブログ: PCR検査が陽性でも、感染ではないかも知れない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>GitHub プロファイルを（ちょっとだけ）カッコよくしてみる</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/using-github-profile-readme/" />
		<id>tag:text.Baldanders.info,2020-09-12:/remark/2020/09/using-github-profile-readme/</id>
		<published>2020-09-12T12:17:02+00:00</published>
		<updated>2020-09-13T02:18:45+00:00</updated>
		<summary>自前でポートフォリオを構成できる。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;何となく他所様の &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; プロファイルを眺めてたら既定の表示と違うものがチラホラと見受けられる。&lt;/p&gt;
&lt;p&gt;どうやら，自分のユーザ名（私の場合は &lt;code&gt;spiegel-im-spiegel&lt;/code&gt;）のリポジトリを作って中の &lt;code&gt;README.md&lt;/code&gt; をプロファイルページの Overview タブに表示できるらしい。&lt;/p&gt;
&lt;p&gt;たとえばこんな感じ。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;&lt;img src=&#34;./github-profile-readme.png&#34; srcset=&#34;./github-profile-readme.png 896w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;GitHub Profile Overview&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;GitHub Profile Overview&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Markdown や HTML のほか，拡張子を変えれば AsciiDoc とかも使えるみたいなので，割と自由に記述できる。
要するに，自前でポートフォリオを構成できるわけだ。&lt;/p&gt;
&lt;p&gt;取り敢えず，それなりの画面を作りたいなら以下のサービスを利用するのがお勧め。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rahuldkjain.github.io/gh-profile-readme-generator/&#34;&gt;GitHub Profile Readme Generator | GitHub Profile Readme Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rahuldkjain/github-profile-readme-generator&#34;&gt;rahuldkjain/github-profile-readme-generator: Generate github profile README easily with latest add-ons like visitors count, github stats, etc using minimal UI.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;項目を適当に埋めていって，アイコンやアドオンを選択して &lt;em&gt;[Generate README]&lt;/em&gt; ボタンを押せば雛形となる Markdown コード（中身はほぼ HTML だけど&lt;code&gt;w&lt;/code&gt;）を出力してくれるので，そのまま使うもよし，アレンジして使うもよしである。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/explore-new-github-readme-feature-7d5cc21bf02f?gi=eb8dd4afb703&#34;&gt;How to create Github Profile-README | by Pratik Kumar | Jul, 2020 | Towards Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shields.io/&#34;&gt;Shields.io: Quality metadata badges for open source projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alexandresanlim/Badges4-README.md-Profile&#34;&gt;alexandresanlim/Badges4-README.md-Profile: Improve your README.md profile with these amazing badges.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/anuraghazra/github-readme-stats&#34;&gt;anuraghazra/github-readme-stats: Dynamically generated stats for your github readmes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/blog-post-workflow&#34;&gt;Blog Post Workflow · Actions · GitHub Marketplace · GitHub&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gautamkrishnar/blog-post-workflow&#34;&gt;gautamkrishnar/blog-post-workflow: Show your latest blog posts from any sources or StackOverflow activity or Youtube Videos on your GitHub profile/project readme automatically using the RSS feed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/zizi4n5/items/f8076cb25bbf64a9bc1c&#34;&gt;GitHub Readme Stats を利用してGitHubプロフィールをカッコよくする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry><entry>
		<title>最近のセキュリティ・インシデント</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/recently-security-incidents/" />
		<id>tag:text.Baldanders.info,2020-09-11:/remark/2020/09/recently-security-incidents/</id>
		<published>2020-09-11T04:55:11+00:00</published>
		<updated>2020-09-15T09:00:24+00:00</updated>
		<summary>帰ってきた Emotet / キャッシュレス決済の脆弱性</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;（この記事は Facebook の TL に書き散らした内容からの再構成です）&lt;/p&gt;
&lt;p&gt;言い訳すると，私はもう「エンジニア」でも「管理者」でもないので，自身に直接降りかかりそうなセキュリティ・インシデント以外は知らないふりをすることにしている（一応&lt;a href=&#34;https://text.baldanders.info/bookmarks/&#34;&gt;ブックマークは溜め込んでる&lt;/a&gt;けど）。
でも，まぁ，最近話題の以下の2つはブログ記事として記しておこうかな，と思ったので（笑）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#return-emotet&#34;&gt;帰ってきた Emotet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#docomo-account&#34;&gt;キャッシュレス決済の脆弱性&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;return-emotet&#34;&gt;帰ってきた Emotet&lt;/h2&gt;
&lt;p&gt;Emotet は主に電子メールで媒介される「トロイの木馬」に分類される malware で，単独での拡散機能はない。&lt;/p&gt;
&lt;p&gt;日本では2019年末あたりから報告例が上がっていて，一時は沈静化していたが，2020年7月中旬から再活性化している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/announce/20191202.html&#34;&gt;「Emotet」と呼ばれるウイルスへの感染を狙うメールについて：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2019/11/26/054443&#34;&gt;国内で相次ぐ不審メールの注意喚起と返信型Emotetについてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Emotet の特徴は以下の通り。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;Emotet は単体で感染することは少なく、認証情報を盗み出すトロイの木馬や身代金を要求するランサムウェアと一緒に感染することが多く、標的となるEメールや連絡先などの情報を盗み出し、これらの情報を利用して、実際に交わされたEメールの内容や連絡先を悪用し、偽装したEメールを配信することで新たな被害者を標的にします。受け取ったメッセージは正規のもののように見えてしまうため、ユーザーがこのフィッシングメールを判別することは極めて困難にです。Emotetは定期的にアップデートや改変が繰り返されており、Emotet自体とコマンド＆コントロールチャネルが更新できるため、従来のアンチウイルスのシグネチャやネットワークレベルでの検知は困難です&lt;/q&gt;&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://blog.f-secure.com/ja/emotet-returned-from-vacation-and-is-active-again-how-to-reduce-risk-in-your-environment/&#34;&gt;活動を休止していたEmotetが再び活発に – 感染リスクを軽減するためには - F-Secure&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;つまり Emotet 侵入は「第一段階」に過ぎず，次段階の内部情報の窃盗や ransomware を使った脅迫行為に向けた情報収集に使われているようだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2019/11/29/082315&#34;&gt;標的型ランサムウェア被害企業が1年以上前からEmotetに感染していた可能性についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので Emotet を検出しても，それを「除去して終わり」とはならず，内部システムの徹底的な洗い出しや情報漏洩の可能性の検討等の面倒くさい作業が待っているわけだ。&lt;/p&gt;
&lt;p&gt;Emotet 特効の防御策はないが，電子メールを媒介とすることから，通常の phishing 対策の徹底が重要となる。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;身に覚えのないメールの添付ファイルは開かない。メール本文中のURLリンクはクリックしない。&lt;/li&gt;
&lt;li&gt;自分が送信したメールへの返信に見えるメールであっても、不自然な点があれば添付ファイルは開かない。&lt;/li&gt;
&lt;li&gt;OSやアプリケーション、セキュリティソフトを常に最新の状態にする。&lt;/li&gt;
&lt;li&gt;信頼できないメールに添付されたWord文書やExcelファイルを開いた時に、マクロやセキュリティに関する警告が表示された場合、「マクロを有効にする」「コンテンツの有効化」というボタンはクリックしない。&lt;/li&gt;
&lt;li&gt;メールや文書ファイルの閲覧中、身に覚えのない警告ウインドウが表示された際、その警告の意味が分からない場合は、操作を中断する。&lt;/li&gt;
&lt;li&gt;身に覚えのないメールや添付ファイルを開いてしまった場合は、すぐにシステム管理部門等へ連絡する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/announce/20191202.html&#34;&gt;「Emotet」と呼ばれるウイルスへの感染を狙うメールについて&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;最近の事例として面白いのは「パスワード付き zip ファイル」をパスワードと共に添付して送るタイプである。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox lightmode&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://www.ipa.go.jp/security/announce/20191202.html#L13&#34;&gt;&lt;img src=&#34;./000085326.png&#34; srcset=&#34;./000085326.png 500w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;「Emotet」と呼ばれるウイルスへの感染を狙うメールについて&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/announce/20191202.html#L13&#34;&gt;「Emotet」と呼ばれるウイルスへの感染を狙うメールについて&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;通常の添付ファイルは（企業・組織によっては）メールサーバ到達時点で拒否されることがあるため「パスワード付き zip ファイル」が使われるのだろうが，これが見事に日本の特殊商慣行というか奇習にマッチしているようで，9月に入ってから Emotet の侵入報告が激増しているらしい（笑）&lt;/p&gt;
&lt;p&gt;個人的には（少なくともビジネス・シーンでは）メールにファイルを添付して送るのは今や「悪習」だと思う。
ファイルの共有を行いたいのであれば Google drive や Box, Dropbox などのストレージ・サービスを活用すべきだろう。
かといって Firefox Send のような&lt;a href=&#34;https://text.baldanders.info/remark/2020/07/requirement-for-encryption/&#34; title=&#34;経路の暗号化とデータの暗号化では要件が異なる&#34;&gt;認証を omit した仕組み&lt;/a&gt;では却ってリスクが増すけれど。&lt;/p&gt;
&lt;h2 id=&#34;docomo-account&#34;&gt;キャッシュレス決済の脆弱性&lt;/h2&gt;
&lt;p&gt;私もどうしても「どこもろざ」と読んでしまう。
そもそも「銀行口座」を連想させるようなネーミングからして失敗だよな（笑）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/08/054431&#34;&gt;ドコモ口座を悪用した不正送金についてまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Twitter の TL を眺めるに，「docomo 利用者以外は関係ない」と思っている人が意外に多そうだ。
関係ないからね。
上のリンク先の記事に挙がっている銀行の口座を持っている人は，一度は残高履歴を確認することを強くお勧めする。&lt;/p&gt;
&lt;p&gt;「&lt;a href=&#34;https://docomokouza.jp/&#34;&gt;ドコモ口座&lt;/a&gt;」は最近流行りの「キャッシュレス決済」サービスのひとつである。&lt;/p&gt;
&lt;p&gt;いわゆる「キャッシュレス決済」の市場は既に飽和していて「パイの食い合い」状態になっている。
これに拍車をかけるのが政府主導の「&lt;a href=&#34;https://mynumbercard.point.soumu.go.jp/&#34;&gt;マイナポイント&lt;/a&gt;」で，ぶっちゃけ非常にウザい。&lt;/p&gt;
&lt;p&gt;キャリア系の決済サービスの強みは回線契約自体が利用者の「信用」を担保することだったと思うが，サービス対象者を不特定に拡大してしまったために「信用」の構造が変わってしまったのが今回のポイントのひとつだろう。&lt;/p&gt;
&lt;p&gt;もうひとつはチャージに「&lt;a href=&#34;https://www.chigin-cns.co.jp/services/web_service/&#34; title=&#34;Web口振受付サービス｜地銀ネットワークサービス&#34;&gt;Web 口振受付サービス&lt;/a&gt;」を使っていること。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote class=&#34;nobox lightmode&#34; style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/08/054431&#34;&gt;&lt;img src=&#34;./20200908053844.png&#34; srcset=&#34;./20200908053844.png 696w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;ドコモ口座を悪用した不正送金についてまとめてみた&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://piyolog.hatenadiary.jp/entry/2020/09/08/054431&#34;&gt;ドコモ口座を悪用した不正送金についてまとめてみた&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;これは結構ヤバい仕組みだ。&lt;/p&gt;
&lt;p&gt;邪推だが「ドコモ口座」では「口座振替」が同一ユーザ内で完結するから問題ないと思ったのだろう。
しかし，実際には「ドコモ口座」ユーザが「誰か分からない」のだから，この前提は成り立たない。&lt;/p&gt;
&lt;p&gt;まぁ「ドコモ口座」は 2020-09-10 までに全ての銀行口座登録・変更機能を停止したそうで，遅きに失したとはいえ，措置としては妥当だろう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docomokouza.jp/maintenance/info_20200910.html&#34;&gt;銀行口座登録の申込受付停止および一部銀行のチャージ停止について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「ドコモ口座」では&lt;a href=&#34;https://www.nttdocomo.co.jp/info/news_release/detail/20200909_00_m.html&#34; title=&#34;ドコモ口座への銀行口座の新規登録における対策強化について&#34;&gt;「本人確認」を強化すると言っている&lt;/a&gt;が「本人確認書類」の詐取はいくらでもあり得るのだから，オンラインでの（完全な）身元確認は無理と考えたほうがいい。
むしろ「オンラインでの身元確認は無理」という前提で，どのようにサービスを設計するかが重要だろう。&lt;/p&gt;
&lt;p&gt;あと，いまどき &lt;a href=&#34;http://jp.techcrunch.com/2016/07/26/20160725nist-declares-the-age-of-sms-based-2-factor-authentication-over/&#34; title=&#34;SMSを使った二要素認証を非推奨〜禁止へ、米国立技術規格研究所NISTの新ガイダンス案 | TechCrunch Japan&#34;&gt;SMS 認証はヤメロ&lt;/a&gt;！ やる気あんのか？&lt;/p&gt;
&lt;p&gt;これ，今回はたまたま「ドコモ口座」だっただけで，似たようなことをやらかしてる「キャッシュレス決済」サービスは結構あるんじゃないの？ 今回のインシデントを通じてきちんとリスク・アセスメントを行い，必要なら法規制をかけないと。
野放図にやりたい放題やる季節は（&lt;a href=&#34;https://text.baldanders.info/remark/2019/07/7id-risk/&#34; title=&#34;7iD リスク&#34;&gt;7pay 崩壊&lt;/a&gt;とともに）終わってるのよ。&lt;/p&gt;
&lt;p&gt;また，この手の犯罪は必ず模倣者が出る。
しばらくは残高履歴をこまめにチェックしたほうがいいだろう。&lt;/p&gt;
&lt;h3&gt;【2020-09-12 追記】 暗証番号を認証に使ってはいけない&lt;/h3&gt;
&lt;p&gt;Twitter で見かけたが某国営放送風テレビが「暗証番号を定期的に変える」とか馬鹿すぎることを言ってるらしい。
誰がそんな頭の悪いことを言い始めたのやら&amp;hellip; sigh&lt;/p&gt;
&lt;p&gt;言うまでもないことだと思っていたが改めて言わせてもらうと，暗証番号や PIN コードは認証（authentication）には使えない。
これらのコードは数字4桁から6桁で構成されている。
このサイズの数字列を総当り方式で解読しても，かかるコストは1円未満しかならない。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan=&#39;4&#39;&gt;利用する文字種類数と内訳&lt;/th&gt;
&lt;th colspan=&#39;4&#39;&gt;パスワード長&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;種類数&lt;/th&gt;
&lt;th&gt;数字&lt;/th&gt;
&lt;th&gt;文字&lt;/th&gt;
&lt;th&gt;シンボル&lt;/th&gt;
&lt;th&gt;4文字&lt;/th&gt;
&lt;th&gt;8文字&lt;/th&gt;
&lt;th&gt;12文字&lt;/th&gt;
&lt;th&gt;16文字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;10種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満&lt;br&gt;（$2^{13.3}$）&lt;/td&gt;&lt;td&gt;1円未満&lt;br&gt;（$2^{26.6}$）&lt;/td&gt;&lt;td&gt;約35円&lt;br&gt;（$2^{39.9}$）&lt;/td&gt;&lt;td&gt;約35万円&lt;br&gt;（$2^{53.2}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;36種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満&lt;br&gt;（$2^{20.7}$）&lt;/td&gt;&lt;td&gt;約100円&lt;br&gt;（$2^{41.4}$）&lt;/td&gt;&lt;td&gt;約1.65億円&lt;br&gt;（$2^{62.0}$）&lt;/td&gt;&lt;td&gt;約276兆円&lt;br&gt;（$2^{82.7}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;62種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;&lt;td&gt;なし&lt;/td&gt;&lt;td&gt;1円未満&lt;br&gt;（$2^{23.8}$）&lt;/td&gt;&lt;td&gt;約7,500円&lt;br&gt;（$2^{47.6}$）&lt;/td&gt;&lt;td&gt;約1,120億円&lt;br&gt;（$2^{71.5}$）&lt;/td&gt;&lt;td&gt;約165京円&lt;br&gt;（$2^{95.3}$）&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;94種&lt;/td&gt;&lt;td&gt;0-9&lt;/td&gt;&lt;td&gt;a-z&lt;br&gt;A-Z&lt;/td&gt;
	&lt;td&gt;&lt;code style=&#39;font-size:smaller;&#39;&gt;! &#34; # $ %&lt;br&gt;&amp;amp; &#39; ( ) =&lt;br&gt;~ | - ^ `&lt;br&gt;¥ { @ [&lt;br&gt;+ * ] ; :&lt;br&gt;} &amp;lt; &amp;gt; ? _&lt;br&gt;, . /&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;1円未満&lt;br&gt;（$2^{26.2}$）&lt;/td&gt;&lt;td&gt;約21万円&lt;br&gt;（$2^{52.4}$）&lt;/td&gt;&lt;td&gt;約16.5兆円&lt;br&gt;（$2^{78.7}$）&lt;/td&gt;&lt;br&gt;&lt;td&gt;約129,000京円&lt;br&gt;（$2^{104.9}$）&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;パスワード解読の想定コスト例（&lt;q&gt;&lt;a href=&#39;https://www.ipa.go.jp/files/000026760.pdf&#39;&gt;情報漏えいを防ぐためのモバイルデバイス等設定マニュアル 解説編 &lt;sup&gt;&lt;i class=&#39;far fa-file-pdf&#39;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/q&gt; 2.4.2.2項より）&lt;/figcaption&gt;
&lt;/figure&gt; &lt;!-- 要 MathJax --&gt;&lt;/p&gt;
&lt;p&gt;たとえば &lt;a href=&#34;https://tools.ietf.org/html/rfc6238&#34; title=&#34;RFC 6238 - TOTP: Time-Based One-Time Password Algorithm&#34;&gt;TOTP (Time-based One-time Password)&lt;/a&gt; 認証では6桁の数字列を使うが，生存期間は30秒程度で，つまりその程度の信頼性しかないのだ。&lt;/p&gt;
&lt;p&gt;じゃあ，永続的な暗証番号や PIN コードが何に使われるのかというと，デバイスやアプリの「アンロック」に使われる。
この場合，暗証番号や PIN コードはユーザと（手元の）デバイスの間でのみ共有されていればいいので，（アカウントのロックアウトも組み合わせれば）セキュリティ要件はかなり緩くできる。&lt;/p&gt;
&lt;p&gt;しかし，暗証番号を「&lt;a href=&#34;https://www.chigin-cns.co.jp/services/web_service/&#34; title=&#34;Web口振受付サービス｜地銀ネットワークサービス&#34;&gt;Web 口振受付サービス&lt;/a&gt;」のようなリモートサービスの認証で使うとなると話は変わってくる。
そもそも銀行側が「キャッシュカードの暗証番号を保持ってる」こと自体が問題だと思うが&amp;hellip;&lt;/p&gt;
&lt;p&gt;そういえば，どっかの&lt;a href=&#34;https://baldanders.info/spiegel/log/nikki-s/200206.html#2303&#34; title=&#34;せち日記 - 2002年06月分&#34;&gt;説教番組&lt;/a&gt;が「SIM の PIN コードは変更したほうが安全」とか馬鹿なことを言ったそうで，実際に試した人のトラブルが続出したらしい（笑） 暗証番号や PIN コードは頻繁に変更するように考えられてないし，もし「頻繁に変更」が必要だと言うのなら，そのサービスやシステムは完全に失敗作である。&lt;/p&gt;
&lt;p&gt;あっ，でも，最近は警察や銀行関係者を装って，キャッシュカードや暗証番号を詐取する詐欺が流行ってるらしい。
詐欺に引っかからないのが一番だが，万一の事後処理として「暗証番号を変更する方法」は確認しておいたほうがいいだろう。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://japan.zdnet.com/article/35159322/&#34;&gt;日本医師会、マルウェア「Emotet」の感染を公表&amp;ndash;感染拡散メールに注意喚起 - ZDNet Japan&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://text.baldanders.info/remark/2020/09/web-account-transfer/&#34;&gt;「Web 口振受付サービス」ってなんぞ？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; width=&#34;107&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4822283100?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 井口 耕二 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;日経BP 2007-02-15&lt;/dd&gt;
    &lt;dd&gt;単行本&lt;/dd&gt;
    &lt;dd&gt;4822283100 (ASIN), 9784822283100 (EAN), 4822283100 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;原書のタイトルが “&lt;a href=&#34;https://www.amazon.co.jp/dp/B000PY3NB4?tag=baldandersinf-22&amp;linkCode=ogi&amp;th=1&amp;psc=1&#34;&gt;Beyond Fear: Thinking Sensibly About Security in an Uncertain World&lt;/a&gt;” なのに対して日本語タイトルがどうしようもなくヘボいが中身は名著。とりあえず読んどきなはれ。ゼロ年代当時 9.11 およびその後の米国のセキュリティ政策と深く関連している内容なので，そのへんを加味して読むとよい。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2019-02-11&#34;&gt;2019-02-11&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- セキュリティはなぜやぶられたのか --&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; width=&#34;108&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4757143044?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;ブルース・シュナイアー (著), 山形 浩生 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;NTT出版 2013-12-24&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4757143044 (ASIN), 9784757143043 (EAN), 4757143044 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;社会における「信頼」とは。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-11-28&#34;&gt;2015-11-28&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- 信頼と裏切りの社会 --&gt;
</content>
	</entry><entry>
		<title>Go 1.15.2 がリリースされた</title>
		<category term="release" label="release" scheme="https://text.baldanders.info/release/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/09/go-1_15_2-is-released/" />
		<id>tag:text.Baldanders.info,2020-09-10:/release/2020/09/go-1_15_2-is-released/</id>
		<published>2020-09-10T01:22:48+00:00</published>
		<updated>2020-09-10T01:23:18+00:00</updated>
		<summary>セキュリティ・アップデートはなし。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; 1.15.2 がリリースされた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/golang-announce/c/ipD8jvpSFtA&#34;&gt;Go 1.15.2 and Go 1.14.9 are released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;セキュリティ・アップデートはなし。&lt;/p&gt;
&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;&lt;q&gt;go1.15.2 (released 2020/09/09) includes fixes to the compiler, runtime, documentation, the go command, and the &lt;code&gt;net/mail&lt;/code&gt;, &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;sync&lt;/code&gt;, and &lt;code&gt;testing&lt;/code&gt; packages. See the &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.2+label%3ACherryPickApproved&#34;&gt;Go 1.15.2 milestone&lt;/a&gt; on our issue tracker for details&lt;/q&gt;.&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.15.minor&#34;&gt;Release History - The Go Programming Language&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;例によって &lt;a href=&#34;https://www.ubuntu.com/&#34; title=&#34;The leading operating system for PCs, IoT devices, servers and the cloud | Ubuntu&#34;&gt;Ubuntu&lt;/a&gt; の APT で管理している &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go&lt;/a&gt; コンパイラは古いので，&lt;a href=&#34;https://golang.org/dl/&#34; title=&#34;Downloads - The Go Programming Language&#34;&gt;ダウンロードページ&lt;/a&gt;からバイナリ（&lt;a href=&#34;https://golang.org/dl/go1.15.2.linux-amd64.tar.gz&#34;&gt;&lt;code&gt;go1.15.2.linux-amd64.tar.gz&lt;/code&gt;&lt;/a&gt;）を取ってきて手動でインストールすることを強く推奨する。
以下は手動での作業例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ cd /usr/local/src
$ sudo curl -L &amp;#34;https://golang.org/dl/go1.15.2.linux-amd64.tar.gz&amp;#34; -O
$ cd ..
$ sudo unlink go # 以前の Go が入っている場合
$ sudo tar xvf src/go1.15.2.linux-amd64.tar.gz
$ sudo mv go go1.15.2
$ sudo ln -s go1.15.2 go
$ go version # /usr/local/go/bin にパスが通っている場合
go version go1.15.2 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;アップデートは計画的に。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>住所コードと郵便番号に関する覚え書き</title>
		<category term="remark" label="remark" scheme="https://text.baldanders.info/remark/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/remark/2020/09/address-code-and-postal-code/" />
		<id>tag:text.Baldanders.info,2020-09-09:/remark/2020/09/address-code-and-postal-code/</id>
		<published>2020-09-09T09:30:36+00:00</published>
		<updated>2020-09-16T01:24:16+00:00</updated>
		<summary>個人が興味本位で弄るのは無理，という結論になった。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;昨日リリースした &lt;a href=&#34;https://github.com/spiegel-im-spiegel/cov19data&#34; title=&#34;spiegel-im-spiegel/cov19data: Importing WHO COVID-2019 Cases Global Data&#34;&gt;spiegel-im-spiegel/cov19data&lt;/a&gt; パッケージなんだけど，東京都の PCR 検査陽性者のデータも参照できるようにしている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://catalog.data.metro.tokyo.lg.jp/dataset/t000010d0000000068&#34;&gt;東京都 新型コロナウイルス陽性患者発表詳細 - データセット - 東京都オープンデータカタログサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今までは日付毎に行数をカウントするだけでデータの詳細に興味はなかったのだが，今回改めて CSV ファイルを眺めてみると「全国地方公共団体コード」のカラムがあったので「これなら都道府県名や市区町村名いらなくね？」と気がついた。&lt;/p&gt;
&lt;p&gt;ついでにこの住所コードと郵便番号を関連付ければ面白いデータセットが組めるんじゃないかと安直に考えたのだが，どうも簡単な話ではないようだ。
ていうか，個人が興味本位でやるのは無理，という結論になった。&lt;/p&gt;
&lt;p&gt;今回は，その辺の話を覚え書きとして記しておく。&lt;/p&gt;
&lt;h2&gt;住所コード&lt;/h2&gt;
&lt;p&gt;ひとくちに住所コードと言っても，様々なレイヤがある。
以下で細かく見てみよう。&lt;/p&gt;
&lt;h3&gt;JIS 都道府県コード&lt;/h3&gt;
&lt;p&gt;JIS 規格で決められているコードで，都道府県ごとに &lt;code&gt;01&lt;/code&gt; から &lt;code&gt;47&lt;/code&gt; までの2桁の数字列で表される。
たとえば，島根県の都道府県コードは &lt;code&gt;32&lt;/code&gt; である。&lt;/p&gt;
&lt;h3&gt;JIS 住所コードと全国地方公共団体コード&lt;/h3&gt;
&lt;p&gt;市区町村までを表す住所コードは，都道府県コード＋3桁の合計5桁の数字列で表され，これも JIS 規格で決められている。
たとえば，島根県松江市は &lt;code&gt;32201&lt;/code&gt; である。&lt;/p&gt;
&lt;p&gt;更に，住所コードの末尾にチェック・ディジットを付加した6桁を「全国地方公共団体コード」と呼ぶ。
ちなみにチェック・ディジットの計算手順は以下の通り。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;住所コード $abcde$ の各桁に対して $a \times 6 + b \times 5 + c \times 4 + d \times 3 + e \times 2$ を求める &lt;em&gt;(1)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(1)&lt;/em&gt; で求めた値を $11$ で割ったあまりを求める &lt;em&gt;(2)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(2)&lt;/em&gt; で求めた値を $11$ から引いた値の下1桁がチェック・ディジットとなる&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;たとえば，住所コード &lt;code&gt;32201&lt;/code&gt; のチェック・ディジットは&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;mathjax&#34;&gt;
\[
11 - \left(\left(3 \times 6 + 2 \times 5 + 2 \times 4 + 0 \times 3 + 1 \times 2 \right) \bmod 11 \right) = 6
\]
&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;なので &lt;code&gt;322016&lt;/code&gt; が全国地方公共団体コードとなる。&lt;/p&gt;
&lt;p&gt;また 都道府県コード＋&lt;code&gt;000&lt;/code&gt;＋チェック・ディジット で都道府県を表す全国地方公共団体コードになるらしい。
つまり &lt;code&gt;320005&lt;/code&gt; で島根県を表す。&lt;/p&gt;
&lt;h3&gt;国交省 &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; による大字町丁目コード&lt;/h3&gt;
&lt;p&gt;JIS 住所コードよりも更に詳細な住所コードは色々あるが，たとえば以下のものがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;国土地理協会の全国町・字ファイルで提供される JIS 住所コードを含む11桁のコード体系。通称「11桁コード」。住基ネットや個人番号カードでおなじみ地方公共団体情報システム機構もこれを使っているようだ&lt;/li&gt;
&lt;li&gt;運輸局で使われる運輸局住所コード。9桁または12桁のコード体系。 JIS 住所コード非互換&lt;/li&gt;
&lt;li&gt;国土交通省 &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; の位置参照情報に含まれる大字町丁目コード。 JIS 住所コードを含む12桁のコード体系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;オススメは &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; の位置参照情報。
&lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; で提供されるデータはいわゆるオープンデータになっていて Creative Commons の「&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; title=&#34;Creative Commons — Attribution 4.0 International — CC BY 4.0&#34;&gt;表示  &lt;span&gt;&lt;i class=&#34;fab fa-creative-commons&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fab fa-creative-commons-by&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;」ライセンス条件下で利用することができる。&lt;/p&gt;
&lt;figure&gt;
&lt;blockquote&gt;&lt;q&gt;本利用ルールは、クリエイティブ・コモンズ・ライセンスの表示4.0国際（&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode.ja&#34;&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode.ja&#34;&gt;https://creativecommons.org/licenses/by/4.0/legalcode.ja&lt;/a&gt;&lt;/a&gt;に規定される著作権利用許諾条件。以下「CCBY」といいます。）と互換性があり、本利用ルールが適用されるコンテンツはCCBYに従うことでも利用することができます&lt;/q&gt;。&lt;/blockquote&gt;
&lt;figcaption&gt;&lt;q&gt;&lt;a href=&#34;https://nlftp.mlit.go.jp/ksj/other/agreement.html&#34;&gt;利用規約&lt;/a&gt;&lt;/q&gt;より&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;&lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34; title=&#34;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&#34;&gt;Japanese-Addresses&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; の位置参照情報を上手く使っているのが &lt;a href=&#34;https://geolonia.com/&#34; title=&#34;Geolonia - An Elastic Map Hosting - Geolonia&#34;&gt;Geolonia&lt;/a&gt; から提供されているオープンデータの &lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34; title=&#34;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&#34;&gt;japanese-addresses&lt;/a&gt; である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geolonia.github.io/japanese-addresses/&#34;&gt;Geolonia 住所データ | japanese-addresses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34;&gt;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34; title=&#34;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&#34;&gt;japanese-addresses&lt;/a&gt; データは Creative Commons の「&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; title=&#34;Creative Commons — Attribution 4.0 International — CC BY 4.0&#34;&gt;表示  &lt;span&gt;&lt;i class=&#34;fab fa-creative-commons&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fab fa-creative-commons-by&#34;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/a&gt;」ライセンスで提供されている。
またデータの生成コードは MIT ライセンスで公開されている。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34; title=&#34;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&#34;&gt;japanese-addresses&lt;/a&gt; データは &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; の位置参照情報をそのまま使っているわけではなく JP の&lt;a href=&#34;https://www.post.japanpost.jp/zipcode/download.html&#34; title=&#34;郵便番号データダウンロード - 日本郵便&#34;&gt;郵便番号データ&lt;/a&gt;と組み合わせて住所の読み情報も付加しているようだ。
あれ？ じゃあ &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; の位置参照情報と&lt;a href=&#34;https://www.post.japanpost.jp/zipcode/download.html&#34; title=&#34;郵便番号データダウンロード - 日本郵便&#34;&gt;郵便番号データ&lt;/a&gt;を組み合わせて住所コードと郵便番号とを連携させられるんじゃね？ と思った私を誰が責められよう（笑）&lt;/p&gt;
&lt;h2&gt;住所コードと郵便番号&lt;/h2&gt;
&lt;p&gt;JP の&lt;a href=&#34;https://www.post.japanpost.jp/zipcode/download.html&#34; title=&#34;郵便番号データダウンロード - 日本郵便&#34;&gt;郵便番号データ&lt;/a&gt;を眺めてみるとこんな感じになっている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;32201,&amp;#34;690  &amp;#34;,&amp;#34;6900000&amp;#34;,&amp;#34;ｼﾏﾈｹﾝ&amp;#34;,&amp;#34;ﾏﾂｴｼ&amp;#34;,&amp;#34;ｲｶﾆｹｲｻｲｶﾞﾅｲﾊﾞｱｲ&amp;#34;,&amp;#34;島根県&amp;#34;,&amp;#34;松江市&amp;#34;,&amp;#34;以下に掲載がない場合&amp;#34;,0,0,0,0,0,0
32201,&amp;#34;69002&amp;#34;,&amp;#34;6900261&amp;#34;,&amp;#34;ｼﾏﾈｹﾝ&amp;#34;,&amp;#34;ﾏﾂｴｼ&amp;#34;,&amp;#34;ｱｲｶﾁｮｳ&amp;#34;,&amp;#34;島根県&amp;#34;,&amp;#34;松江市&amp;#34;,&amp;#34;秋鹿町&amp;#34;,0,0,0,0,0,0
32201,&amp;#34;690  &amp;#34;,&amp;#34;6900022&amp;#34;,&amp;#34;ｼﾏﾈｹﾝ&amp;#34;,&amp;#34;ﾏﾂｴｼ&amp;#34;,&amp;#34;ｱｵﾊﾞﾀﾞｲ&amp;#34;,&amp;#34;島根県&amp;#34;,&amp;#34;松江市&amp;#34;,&amp;#34;青葉台&amp;#34;,0,0,0,0,0,0
32201,&amp;#34;690  &amp;#34;,&amp;#34;6900015&amp;#34;,&amp;#34;ｼﾏﾈｹﾝ&amp;#34;,&amp;#34;ﾏﾂｴｼ&amp;#34;,&amp;#34;ｱｹﾞﾉｷﾞ&amp;#34;,&amp;#34;島根県&amp;#34;,&amp;#34;松江市&amp;#34;,&amp;#34;上乃木&amp;#34;,0,0,1,0,0,0
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一見 JIS 住所コードと郵便番号が&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./entity-relationship-1.puml&#34;&gt;&lt;img src=&#34;./entity-relationship-1.png&#34; srcset=&#34;./entity-relationship-1.png 687w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;のように 1 対 n の関係になっているように見えるけど&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/_takwat/items/3a121656425fac7bb820&#34;&gt;郵便番号や市区町村データを取り扱うときにはまったこと - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;によると&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;郵便番号は必ず1つの町名に紐づいているわけではない&lt;/li&gt;
&lt;li&gt;市区町村をまたいで同じ郵便番号を持つケースがある&lt;/li&gt;
&lt;li&gt;市区町村はおろか県を飛び越えて同じ郵便番号を持ちうるケースがある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そうで，つまり JIS 住所コードと郵便番号と住所（文字列）の関係は&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./entity-relationship-2.puml&#34;&gt;&lt;img src=&#34;./entity-relationship-2.png&#34; srcset=&#34;./entity-relationship-2.png 687w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;となっていて， JIS 住所コードと郵便番号の間で関係を記述できない。
敢えてやるなら&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./entity-relationship-3.puml&#34;&gt;&lt;img src=&#34;./entity-relationship-3.png&#34; srcset=&#34;./entity-relationship-3.png 956w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;のように第3の固有IDを作って間接的に関連付ける必要がある。&lt;/p&gt;
&lt;h2&gt;&amp;hellip;というわけで諦めました&lt;/h2&gt;
&lt;p&gt;道理で住所コードと郵便番号を関連付ける実装を見かけない筈だよ。&lt;/p&gt;
&lt;p&gt;使い方としては，まず構造のない住所（文字列）があって，単にその住所を絞り込む条件として住所コードや郵便番号が使える，というだけなのだろう。
古い閉じたシステムではよくある構成だが，外部データと関連付けようとすると素朴すぎて使えない。&lt;/p&gt;
&lt;p&gt;たとえば JIS 住所コードより詳細な「11桁コード」や &lt;a href=&#34;https://nlftp.mlit.go.jp/&#34;&gt;GIS&lt;/a&gt; 位置参照情報の「大字町丁目コード」を第3の固有IDとして郵便番号を関連付けることは可能かもしれないが，そのためには文字列の住所を「名寄せ」する必要がある。
しかも&lt;a href=&#34;https://www.post.japanpost.jp/zipcode/download.html&#34; title=&#34;郵便番号データダウンロード - 日本郵便&#34;&gt;郵便番号データ&lt;/a&gt;って月単位で変更されるので，ほぼ無理ゲーな気がする。
実際 &lt;a href=&#34;https://github.com/geolonia/japanese-addresses&#34; title=&#34;geolonia/japanese-addresses: 全国の町丁目レベル（189,540件）の住所データのオープンデータ&#34;&gt;japanese-addresses&lt;/a&gt; は郵便番号との関連付けを行っていないわけだし。&lt;/p&gt;
&lt;p&gt;というわけで，個人が興味本位でやるのは（労力に見合わないので）無理，と諦めた&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;おあとがよろしいようで &lt;code&gt;m(_ _)m&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geolonia.com/pressrelease/2020/08/05/japanese-addresses.html&#34;&gt;日本全国の住所マスターデータをオープンデータとして無料公開 - Geolonia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- eof --&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;もちろん仕事なら調査・構築・保守までやるよ（笑） &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry><entry>
		<title>WHO COVID-2019 データを取得するパッケージを作ってみた</title>
		<category term="release" label="release" scheme="https://text.baldanders.info/release/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/release/2020/09/cov19data-package-is-released/" />
		<id>tag:text.Baldanders.info,2020-09-08:/release/2020/09/cov19data-package-is-released/</id>
		<published>2020-09-08T09:29:42+00:00</published>
		<updated>2020-09-08T09:33:21+00:00</updated>
		<summary>データ取得部分を外だしにしてパッケージ化した。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;ちょっと思いついて WHO COVID-2019 データを取得するパッケージを作ってみた。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/cov19data&#34;&gt;spiegel-im-spiegel/cov19data: Importing WHO COVID-2019 Cases Global Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ろくすっぽテストもしてないが，汎用で使えるとも思えないし，まぁいいだろう。&lt;/p&gt;
&lt;p&gt;“&lt;a href=&#34;https://covid19.who.int/&#34;&gt;WHO Coronavirus Disease (COVID-19) Dashboard&lt;/a&gt;” で公開されている CSV データを取ってくるだけの簡単なお仕事である。&lt;/p&gt;
&lt;p&gt;それだけではナニなので，簡単な集計もできるようにした。
たとえば&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/spiegel-im-spiegel/cov19data&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/spiegel-im-spiegel/cov19data/client&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/spiegel-im-spiegel/cov19data/entity&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/spiegel-im-spiegel/cov19data/histogram&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/spiegel-im-spiegel/cov19data/values&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cov19data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MakeHistogramWHO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewPeriod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Month&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Yesterday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//step by 7 days
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithCountryCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CC_JP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;entity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WithRegionCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WPRO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%+v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;histogram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ExportHistCSV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%+v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Output:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Date_from,Date_to,Cases,Deaths
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 2020-07-28,2020-08-03,8698,16
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 2020-08-04,2020-08-10,9303,35
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 2020-08-11,2020-08-17,7677,52
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 2020-08-18,2020-08-24,6840,82
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 2020-08-25,2020-08-31,5358,98
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 2020-09-01,2020-09-07,3991,84
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;てな感じに書けば，8月以降の日本のデータを7日ごとに集計できたりする。&lt;/p&gt;
&lt;p&gt;このパッケージで集計したデータを使えば&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;&lt;a href=&#34;./covid-2019-new-cases-histgram-in-japan.png&#34;&gt;&lt;img src=&#34;./covid-2019-new-cases-histgram-in-japan.png&#34; srcset=&#34;./covid-2019-new-cases-histgram-in-japan.png 747w&#34; sizes=&#34;(min-width:600px) 500px, 80vw&#34; alt=&#34;Confirmed COVID-2019 Cases in Japan&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&#34;./covid-2019-new-cases-histgram-in-japan.png&#34;&gt;Confirmed COVID-2019 Cases in Japan&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;なんてなグラフも描ける。&lt;/p&gt;
&lt;p&gt;元々は SARS-CoV-2 ウイルス感染の動向をチェックするために，ネットの隅っこで&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/covid-2019-report&#34;&gt;spiegel-im-spiegel/covid-2019-report: 日本における COVID-2019 確認発症者のレポート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を作って手作業でチマチマ集計していたのだが，徐々に自動化できるようになったので，データ取得部分を外だしにしてパッケージ化したというわけ。&lt;/p&gt;
&lt;p&gt;「とりあえず動いてるからいいか」とあまりテストを書いてないし，設計も雑で如何にもやっつけなコードだけど，よろしかったらどうぞ。&lt;/p&gt;
&lt;h2&gt;ブックマーク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://text.baldanders.info/golang/chart-with-golang/&#34;&gt;Go 言語でもグラフを描きたい！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry><entry>
		<title>time.Time の比較が覚えれん！</title>
		<category term="golang" label="golang" scheme="https://text.baldanders.info/golang/" />
		<link rel="alternate" type="text/html" href="https://text.baldanders.info/golang/order-by-time/" />
		<id>tag:text.Baldanders.info,2020-09-07:/golang/order-by-time/</id>
		<published>2020-09-07T02:16:53+00:00</published>
		<updated>2020-09-07T02:31:03+00:00</updated>
		<summary>一覧表にしておこう。</summary>
		<author>
			<name>Spiegel</name>
			<uri>https://baldanders.info/profile/</uri>
		</author>
		
	<link rel="cc:license" type="application/rdf+xml" href="https://creativecommons.org/licenses/by-sa/4.0/rdf" />


		<content type="html" xml:lang="ja" xml:base="https://text.baldanders.info/">&lt;p&gt;時刻を表す &lt;a href=&#34;https://pkg.go.dev/time&#34; title=&#34;time package · pkg.go.dev&#34;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;&lt;code&gt;.Time&lt;/code&gt; 型は比較演算子（&lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; 等）が使えないので &lt;code&gt;Equal()&lt;/code&gt;, &lt;code&gt;Before()&lt;/code&gt;, &lt;code&gt;After()&lt;/code&gt; 各メソッドが用意されているのだけど， &lt;code&gt;Equal()&lt;/code&gt; メソッドはともかく &lt;code&gt;Before()&lt;/code&gt; や &lt;code&gt;After()&lt;/code&gt;  は覚えれんっちうの！&lt;/p&gt;
&lt;p&gt;まぁ&lt;a href=&#34;https://pkg.go.dev/time&#34; title=&#34;time package · pkg.go.dev&#34;&gt;ドキュメント&lt;/a&gt;を見れば済む話なのだが，毎回「どうだっけ？」と探すのもナニなので，この際，記事として纏めておくことにした。&lt;/p&gt;
&lt;p&gt;まずはコードを書いてみる。
これ基本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;year2000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UTC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;year3000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UTC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;year3000.After(year2000) = %v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;year3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;After&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;year2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;year3000.Before(year2000) = %v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;year3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Before&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;year2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;year2000.After(year3000) = %v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;year2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;After&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;year3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;year2000.Before(year3000) = %v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;year2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Before&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;year3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これの実行結果は&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-test&#34; data-lang=&#34;test&#34;&gt;$ go run sample1.go 
year3000.After(year2000) = true
year3000.Before(year2000) = false
year2000.After(year3000) = false
year2000.Before(year3000) = true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;となる。
&lt;code&gt;a.After(b)&lt;/code&gt; は「&lt;code&gt;a&lt;/code&gt; は &lt;code&gt;b&lt;/code&gt; の後か？」と覚えればいいかな。&lt;/p&gt;
&lt;p&gt;やっぱ面倒くさい。
一覧表にしておこう。&lt;/p&gt;
&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;table class=&#34;left&#34;&gt;
&lt;thead&gt;&lt;tr&gt;
    &lt;th&gt;関係&lt;/th&gt;
    &lt;th&gt;メソッド&lt;/th&gt;
    &lt;th&gt;返り値&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;&lt;td class=&#34;center&#34; rowspan=&#34;3&#34; style=&#34;vertical-align:middle;&#34;&gt;$a = b$&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;a.Equal(b)&lt;/code&gt;&lt;/td&gt;&lt;td class=&#34;center&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;code&gt;a.Before(b)&lt;/code&gt;&lt;/td&gt;&lt;td class=&#34;center&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;code&gt;a.After(b)&lt;/code&gt;&lt;/td&gt;&lt;td class=&#34;center&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;

    &lt;tr&gt;&lt;td class=&#34;center&#34; rowspan=&#34;3&#34; style=&#34;vertical-align:middle;&#34;&gt;$a \lt b$&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;a.Equal(b)&lt;/code&gt;&lt;/td&gt;&lt;td class=&#34;center&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;code&gt;a.Before(b)&lt;/code&gt;&lt;/td&gt;&lt;td class=&#34;center&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;code&gt;a.After(b)&lt;/code&gt;&lt;/td&gt;&lt;td class=&#34;center&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;

    &lt;tr&gt;&lt;td class=&#34;center&#34; rowspan=&#34;3&#34; style=&#34;vertical-align:middle;&#34;&gt;$a \gt b$&lt;/td&gt;
        &lt;td&gt;&lt;code&gt;a.Equal(b)&lt;/code&gt;&lt;/td&gt;&lt;td class=&#34;center&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;code&gt;a.Before(b)&lt;/code&gt;&lt;/td&gt;&lt;td class=&#34;center&#34;&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;code&gt;a.After(b)&lt;/code&gt;&lt;/td&gt;&lt;td class=&#34;center&#34;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/figure&gt;
&lt;h2&gt;【サンプル】時刻のソート&lt;/h2&gt;
&lt;p&gt;もう少し「ありそう」なサンプルを考えてみよう。
たとえば，以下のようなデータセット &lt;code&gt;eraList&lt;/code&gt; があるとする。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Era&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Start&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Time&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;jst&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;FixedZone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;JST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;eraList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Era&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;令和&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2019&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;May&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)},&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;平成&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1989&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;January&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)},&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;昭和&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1926&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;December&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)},&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;大正&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1912&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;July&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)},&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この &lt;code&gt;eraList&lt;/code&gt; を時刻の昇順で並べ替えてみる。
こんな感じかな。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Era&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s (from %s)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;2006-01-02&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;eraList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;eraList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;hl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eraList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Before&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;eraList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;eraList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;結果は以下の通り。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;$ go run sample2.go 
[令和 (from 2019-05-01) 平成 (from 1989-01-08) 昭和 (from 1926-12-25) 大正 (from 1912-07-30)]
[大正 (from 1912-07-30) 昭和 (from 1926-12-25) 平成 (from 1989-01-08) 令和 (from 2019-05-01)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;
&lt;h2&gt;参考図書&lt;/h2&gt;
&lt;div class=&#34;hreview&#34;&gt;
  &lt;div class=&#34;photo&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;&lt;img src=&#34;https://m.media-amazon.com/images/I/41meaSLNFfL._SL160_.jpg&#34; width=&#34;123&#34; alt=&#34;photo&#34;&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;dl class=&#34;fn&#34;&gt;
    &lt;dt&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621300253?tag=baldandersinf-22&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&#34;&gt;プログラミング言語Go (ADDISON-WESLEY PROFESSIONAL COMPUTING SERIES)&lt;/a&gt;&lt;/dt&gt;
    &lt;dd&gt;Alan A.A. Donovan (著), Brian W. Kernighan (著), 柴田 芳樹 (翻訳)&lt;/dd&gt;
    &lt;dd&gt;丸善出版 2016-06-20&lt;/dd&gt;
    &lt;dd&gt;単行本（ソフトカバー）&lt;/dd&gt;
    &lt;dd&gt;4621300253 (ASIN), 9784621300251 (EAN), 4621300253 (ISBN), 9784621300251 (ISBN)&lt;/dd&gt;
    &lt;dd&gt;評価&lt;abbr class=&#34;rating fa-sm&#34; title=&#34;5&#34;&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&amp;nbsp;&lt;i class=&#34;fas fa-star&#34;&gt;&lt;/i&gt;&lt;/abbr&gt;&lt;/dd&gt;
  &lt;/dl&gt;
  &lt;p class=&#34;description&#34;&gt;著者のひとりは（あの「バイブル」とも呼ばれる）通称 “K&amp;amp;R” の K のほうである。この本は Go 言語の教科書と言ってもいいだろう。&lt;/p&gt;
  &lt;p class=&#34;powered-by&#34;&gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-07-13&#34;&gt;2016-07-13&lt;/abbr&gt; (powered by &lt;a href=&#34;https://affiliate.amazon.co.jp/assoc_credentials/home&#34;&gt;PA-APIv5&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt; &lt;!-- プログラミング言語Go --&gt;
</content>
	</entry>
</feed>
