<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2015-11-28:/</id>
	<updated>2015-11-28T19:39:24+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>週末スペシャル： DELL よ，お前もか - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1128-diary/" />
		<id>tag:text.Baldanders.info,2015-11-28:/remark/2015/1128-diary/</id>
		<published>2015-11-28T19:39:24+09:00</published>
		<updated>2015-11-29T20:14:29+09:00</updated>
		<summary>DELL よ，お前もか / たしかに「プライバシーマーク」はクソだけど / Google は Android 端末を解除できる</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#pki:69db4720d983b07bf75e11bfad43c4fd&#34;&gt;DELL よ，お前もか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#privacy:69db4720d983b07bf75e11bfad43c4fd&#34;&gt;たしかに「プライバシーマーク」はクソだけど&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#android:69db4720d983b07bf75e11bfad43c4fd&#34;&gt;Google は Android 端末を解除できる&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;pki:69db4720d983b07bf75e11bfad43c4fd&#34;&gt;DELL よ，お前もか&lt;/h2&gt;

&lt;p&gt;あーあ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kb.cert.org/vuls/id/870761&#34;&gt;Vulnerability Note VU#870761 - Dell Foundation Services installs root certificate and private key (eDellRoot)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kb.cert.org/vuls/id/925497&#34;&gt;Vulnerability Note VU#925497 - Dell System Detect installs root certificate and private key (DSDTestProvider)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU91791008/&#34;&gt;JVNVU#91791008: Dell Foundation Services (DFS) がルート証明書と秘密鍵 (eDellRoot) をインストールする問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jvn.jp/vu/JVNVU99824449/&#34;&gt;JVNVU#99824449: Dell System Detect (DSD) がルート証明書と秘密鍵 (DSDTestProvider) をインストールする問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Kango/20151124/1448366156&#34;&gt;Dell製PCで確認されたeDellRoot証明書の関連情報をまとめてみた - piyolog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35073924/&#34;&gt;デル製PCに「意図せぬ脆弱性」&amp;ndash;プリインストールされたルート証明書で - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1511/25/news055.html&#34;&gt;Dell、ルート証明書の脆弱性で対応表明　別の問題発覚 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1511/24/news048.html&#34;&gt;DellのPCに不審なルート証明書、LenovoのSuperfishと同じ問題か - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.zdnet.com/article/35074095/&#34;&gt;「Windows Defender」、デルのルート証明書問題に対応 - ZDNet Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000809.shtml&#34;&gt;Lenovo のとき&lt;/a&gt;も書いたけど， PC ベンダ側がどう言い訳しようとも，これは純然たる「悪意」なの！&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;セキュリティ企業や組織は「脆弱性（vulnerability）」などと比較的穏当な表現をしているが，オレオレ・ルート証明書をインストールする行為自体が明確な「悪意」である。 なぜなら（上述した通り）これは PKI の信用モデルに対する攻撃（破壊）だからだ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000809.shtml&#34;&gt;Malware Spoofing HTTPS — Baldanders.info&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ちなみに EV SSL も前提が崩れ始めていることをお忘れなく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000828.shtml&#34;&gt;踊る PKI — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lenovo のときは「中国企業だから」なんてなこともちょっと思ったが， DELL もやっているとなると X.509 がいよいよ「バベルの塔」になる日も近いということかねぇ。&lt;/p&gt;

&lt;h2 id=&#34;privacy:69db4720d983b07bf75e11bfad43c4fd&#34;&gt;たしかに「プライバシーマーク」はクソだけど&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://itpro.nikkeibp.co.jp/atcl/column/14/346926/112000384/?rt=nocnt&#34;&gt;News ＆ Trend - なぜCCCはプライバシーマークを返上し、T会員規約を改訂したのか（前編）：ITpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://itpro.nikkeibp.co.jp/atcl/column/14/346926/112600387/?cx&#34;&gt;News ＆ Trend - なぜCCCはプライバシーマークを返上し、T会員規約を改訂したのか（後編）：ITpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takagi-hiromitsu.jp/diary/20151121.html#p01&#34;&gt;高木浩光＠自宅の日記 - CCCはお気の毒と言わざるをえない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この問題が複雑そうに見えるのは「プライバシーマーク」が本当にただの「マーク」で，ユーザから見てなんの役にも立っていないということだ。
本来この手の認証サービスは相手が信頼できるかどうか不明な場合に第3者がそれを担保する仕組みなのだが，「プライバシーマーク」はそのようには機能していない。
なぜなら，認証を受けた企業・組織が実際に条件を逸脱する行為をしたとしても「プライバシーマーク」はその逸脱に対して事実上なにもしないからだ。&lt;/p&gt;

&lt;p&gt;企業が利益を追求すること自体は evil ではない。
だがそれは他の企業・組織やユーザとの間に社会的な信頼関係があってはじめて成立し得る。
その企業・組織の信頼性を客観的に示す方法はない。
地道に「過去の実績」を積み上げていくしかないのである。
これを「ブランド」という。&lt;/p&gt;

&lt;p&gt;CCC のブランド・イメージはとっくの昔に壊れている。
それは公共図書館運営に対する「嫌悪」とも言える反発を見ても分かることだ。
「信用がない」どころかマイナスに振りきれている。
それで「うちは独自のプライバシー・ポリシーで運営します」と言ったところで「あー，また CCC がやらかしてら」くらいにしか思われなくて当然だろう。&lt;/p&gt;

&lt;p&gt;まぁ，私個人は今後も CCC は（プライバシー情報の運用に対して）信用しないし， &lt;a href=&#34;http://nukalumix.hateblo.jp/entry/tcardoptoutlist&#34;&gt;CCC に加担する企業・組織&lt;/a&gt;も信用しない。&lt;/p&gt;

&lt;h2 id=&#34;android:69db4720d983b07bf75e11bfad43c4fd&#34;&gt;Google は Android 端末を解除できる&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gigazine.net/news/20151125-google-remote-unlock/&#34;&gt;Googleはユーザーが所有するスマホの端末ロックをリモート解除可能と発覚 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお，これには条件があって&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;レポートで判明した事実について、IT関連メディアの&lt;a href=&#34;http://thenextweb.com/google/2015/11/22/google-can-remotely-bypass-the-passcode-of-at-least-74-of-android-devices-if-ordered/&#34;&gt;The Next Web&lt;/a&gt;がGoogleに確認したところ、Googleが端末のロック解除をリモートで行えるのは「パターンで画面ロックされているAndroid 4.4搭載端末のみ」であり、PINおよびパスワードでロックしている端末についてはリモートで解除を行えないとのことです。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://gigazine.net/news/20151125-google-remote-unlock/&#34;&gt;Googleはユーザーが所有するスマホの端末ロックをリモート解除可能と発覚&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ということらしい。
Andorid 5.x は暗号化されている建前だが，パフォーマンスがどうこう言うお馬鹿ユーザが多いせいか，暗号化されてない端末も多いようだ。
Andorid 5.x でも暗号化されてない端末には同様のリスクがある。&lt;/p&gt;

&lt;p&gt;Google はユーザに対して「&lt;a href=&#34;https://www.google.com/android/devicemanager&#34;&gt;デバイスマネージャ&lt;/a&gt;」のサービスを提供しており， Google が画面ロックをリモートで解除可能だとしてもおかしくはない。
また PIN コードやパスワードでリモート解除できないのであれば，それほどのインパクトではない。&lt;/p&gt;

&lt;p&gt;対策としては&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Android 端末は必ず暗号化を行うこと&lt;/li&gt;
&lt;li&gt;盗難・紛失・没収の際は「&lt;a href=&#34;https://www.google.com/android/devicemanager&#34;&gt;デバイスマネージャ&lt;/a&gt;」を使い強いパスワードでロックすること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;というところだろう。
あと，端末の紛失を想定して「避難訓練」しておくのは有効である。&lt;/p&gt;

&lt;p&gt;もちろんデータをクラウドに置いている場合はクラウドごとに個別に対処する必要があるし，そもそも携帯端末は tracking が容易であり警察・諜報組織は端末の中身が見れなくてもさほど困らないということをお忘れなく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000516.shtml&#34;&gt;スマートフォンのセキュリティ管理 — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000739.shtml&#34;&gt;「パスワードを覚える」なんて脳みその無駄遣い — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000768.shtml&#34;&gt;「オーウェルが描いた悪夢のような監視社会をさまざまな点で超えてしまっているこの世界」で私たちはいかにして生き残るか — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gizmodo.jp/2015/11/what-police-can-learn-from-a-terrorist.html&#34;&gt;警察がテロリストの捨てた携帯からわかること : ギズモード・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:69db4720d983b07bf75e11bfad43c4fd&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/413qoSjODUL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4757143044/baldandersinf-22/&#34;&gt;信頼と裏切りの社会&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ブルース・シュナイアー 山形 浩生 &lt;/dd&gt;&lt;dd&gt;エヌティティ出版 2013-12-24&lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4622078007/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4622078007.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;殺人ザルはいかにして経済に目覚めたか?―― ヒトの進化からみた経済学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4620323098/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4620323098.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;リベラルのことは嫌いでも、リベラリズムは嫌いにならないでください－－井上達夫の法哲学入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4152094362/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4152094362.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;楽観主義者の未来予測(上): テクノロジーの爆発的進化が世界を豊かにする&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/413052027X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/413052027X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;社会調査の考え方　下&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4326302402/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4326302402.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;歴史から理論を創造する方法: 社会科学と歴史学を統合する&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;ゴメン。途中まで読んで積読中。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM Editor で Amazon Associate ID を含んだ商品 URL を生成する - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/insert-amazon-url-with-associate-id-in-atom-editor/" />
		<id>tag:text.Baldanders.info,2015-11-27:/remark/2015/insert-amazon-url-with-associate-id-in-atom-editor/</id>
		<published>2015-11-27T22:20:50+09:00</published>
		<updated>2015-11-27T22:20:50+09:00</updated>
		<summary>昔，結城浩さんが Amazon の商品 URL を変換する秀丸マクロを公開されていて， ATOM Editor では使えないためどうしたものかと思っていたのだが，先日 init.coffee に簡単なコマンドを書く方法を習ったので移植してみた。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;昔，結城浩さんが Amazon の商品 URL を変換する秀丸マクロを公開されていて&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/hyuki/20120413/amazon&#34;&gt;アマゾン・アソシエイトID（アフィリエイト用のID）を含んだ商品URLを生成する秀丸マクロ - 結城浩のはてな日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これがとても便利で重宝していたのだが， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor では使えないためどうしたものかと思っていた。
で，先日 &lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/&#34;&gt;&lt;code&gt;init.coffee&lt;/code&gt; に簡単なコマンドを書く方法を習った&lt;/a&gt;ので，上の秀丸マクロを &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor に移植してみた。&lt;/p&gt;

&lt;p&gt;以下が &lt;code&gt;init.coffee&lt;/code&gt; に追記する内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;# Amazon Associate ID を含んだ商品 URL を生成する
#  クリップボードの内容を読み込み，変換してセットする
#  http(s)://www.amazon.co.jp/... から始まる文字列を想定
#  /dp/XXXXXXXXXX または /ASIN/XXXXXXXXXX のパタンを探す
#  変換できない場合はクリップボードの内容をそのままセットする
# refs http://d.hatena.ne.jp/hyuki/20120413/amazon
amazonUrl = (id) -&amp;gt;
  url = atom.clipboard.read()
  re = /^htt(?:p|ps):\/\/www.amazon.co.jp\//
  if !re.test(url)
    return url
  result = url.match(/\/(?:dp|ASIN)\/(.{10})/)
  if result == null
    return url
  else if result.length &amp;lt; 2
    return url
  asin = result[1]
  if id == &amp;quot;&amp;quot;
    &amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/#{asin}/&amp;quot;
  else
    &amp;quot;http://www.amazon.co.jp/exec/obidos/ASIN/#{asin}/#{id}/&amp;quot;

insertText = (str) -&amp;gt;
  return unless editor = atom.workspace.getActiveTextEditor()
  selection = editor.getLastSelection()
  selection.insertText(str)

atom.commands.add &#39;atom-text-editor&#39;, &#39;my-tools:amazon&#39;, -&amp;gt;
  id = &#39;&#39; # Amazon Associate ID
  insertText(amazonUrl(id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コードがやっつけでダサいのはご勘弁ということで&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:028833c50231051bae73e587c9bed4d5:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
&lt;code&gt;insertText&lt;/code&gt; 関数は&lt;a href=&#34;http://text.baldanders.info/remark/2015/insert-datetime-in-atom-editor/&#34;&gt;前のとき&lt;/a&gt;の使い回し。&lt;/p&gt;

&lt;p&gt;これで &lt;code&gt;id&lt;/code&gt; に Associate ID （たとえば私の &lt;code&gt;baldandersinf-22&lt;/code&gt;）をセットして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.amazon.co.jp/%E6%95%B0%E5%AD%A6%E3%82%AC%E3%83%BC%E3%83%AB-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797341378
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をクリップボードにコピーした状態でコマンドパレットから「My Tools: Amazon」を起動すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.amazon.co.jp/exec/obidos/ASIN/4797341378/baldandersinf-22/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出力される。
変換できない場合はクリップボードの内容をそのまま出力する。&lt;/p&gt;

&lt;p&gt;よーし，うむうむ，よーし。&lt;/p&gt;

&lt;h2 id=&#34;参考:028833c50231051bae73e587c9bed4d5&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atom.io/docs/api/&#34;&gt;Atom API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_Expressions&#34;&gt;正規表現 - JavaScript | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.softel.co.jp/labs/tools/regex/&#34;&gt;正規表現チェッカー（JavaScript版） | Softel labs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt; は慣れん。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:028833c50231051bae73e587c9bed4d5:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Git.io から短縮 URL を取得するコード - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/get-shortened-url-from-gitio/" />
		<id>tag:text.Baldanders.info,2015-11-26:/golang/get-shortened-url-from-gitio/</id>
		<published>2015-11-26T20:29:30+09:00</published>
		<updated>2015-11-26T20:29:30+09:00</updated>
		<summary>これって curl で書けるんなら Go 言語で表現できるんじゃね？</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;（初出： &lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/042751d98e315e4e3382&#34;&gt;Git.io 短縮 URL を golang コードで取得してみる - Qiita&lt;/a&gt;）&lt;/p&gt;

&lt;h2 id=&#34;git-io-で短縮-url-が取得できるらしい:0223b5e2f12da4589f164146964cba22&#34;&gt;Git.io で短縮 URL が取得できるらしい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/sotayamashita/items/1cf05f2a2be3d6fb3388&#34;&gt;Git・Githubに隠された便利な機能 | GitHub Cheat Sheet（日本語訳） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを読んでたら後ろの方に &lt;a href=&#34;http://git.io/&#34; title=&#34;git.io&#34;&gt;Git.io&lt;/a&gt; の話が出ていた。
このサイトで短縮 URL を生成できるらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/985-git-io-github-url-shortener&#34;&gt;Git.io: GitHub URL Shortener&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API が &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; で掲載されていて，例えば私の &lt;a href=&#34;https://github.com/spiegel-im-spiegel&#34;&gt;https://github.com/spiegel-im-spiegel&lt;/a&gt; なら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -i &amp;quot;http://git.io&amp;quot; -F &amp;quot;url=https://github.com/spiegel-im-spiegel&amp;quot;
HTTP/1.1 201 Created
Server: Cowboy
Connection: keep-alive
Date: Sat, 08 Aug 2015 02:42:16 GMT
Status: 201 Created
Content-Type: text/html;charset=utf-8
Location: http://git.io/vOj52
Content-Length: 37
X-Xss-Protection: 1; mode=block
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Runtime: 0.210952
X-Node: 871d903e-a8e0-46ff-a96f-ef424385e5ed
X-Revision: b1d9ce07ccb700fc90398edafd397beb8d3bd772
Via: 1.1 vegur

https://github.com/spiegel-im-spiegel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;てな感じで，ヘッダの Location 要素に短縮 URL が返ってくる仕組みらしい。
って，これって &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; で書けるんなら &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で表現できるんじゃね？&lt;/p&gt;

&lt;h2 id=&#34;curl-as-dsl:0223b5e2f12da4589f164146964cba22&#34;&gt;cURL as DSL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34;&gt;cURL as DSL — cURL as DSL 1.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.shibu.jp/article/115602749.html&#34;&gt;Shibu&amp;rsquo;s Diary: cURL as DSLとは何だったのか。あるいは細かすぎて伝わらないcURL as DSL。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; とは &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; の構文を任意のコード&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0223b5e2f12da4589f164146964cba22:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0223b5e2f12da4589f164146964cba22:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; に変換してくれるもので，どういうことかというと「&lt;a href=&#34;http://qiita.com/Hiraku/items/dfda2f8a5353b0742271&#34;&gt;Web API は curl で表現すればいいんじゃね？&lt;/a&gt;」ということらしい。&lt;/p&gt;

&lt;h2 id=&#34;さっそく-curl-を-go-言語に変換してみる:0223b5e2f12da4589f164146964cba22&#34;&gt;さっそく curl を Go 言語に変換してみる&lt;/h2&gt;

&lt;p&gt;では早速，上述の curl コマンドを &lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; を使って &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;に変換してみる（ただし &lt;code&gt;-i&lt;/code&gt; オプションは付けない）。
結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;mime/multipart&amp;quot;
	&amp;quot;net/http&amp;quot;
)

func main() {
	var buffer bytes.Buffer
	writer := multipart.NewWriter(&amp;amp;buffer)
	writer.WriteField(&amp;quot;url&amp;quot;, &amp;quot;https://github.com/spiegel-im-spiegel&amp;quot;)
	writer.Close()

	resp, err := http.Post(&amp;quot;http://git.io&amp;quot;, &amp;quot;multipart/form-data; boundary=&amp;quot;+writer.Boundary(), &amp;amp;buffer)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	log.Print(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力のみちょっと弄って&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;mime/multipart&amp;quot;
	&amp;quot;net/http&amp;quot;
)

func main() {
	var buffer bytes.Buffer
	writer := multipart.NewWriter(&amp;amp;buffer)
	writer.WriteField(&amp;quot;url&amp;quot;, &amp;quot;https://github.com/spiegel-im-spiegel&amp;quot;)
	writer.Close()

	resp, err := http.Post(&amp;quot;http://git.io&amp;quot;, &amp;quot;multipart/form-data; boundary=&amp;quot;+writer.Boundary(), &amp;amp;buffer)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	log.Println(&amp;quot;  Status: &amp;quot;, resp.Header.Get(&amp;quot;Status&amp;quot;))
	log.Println(&amp;quot;Location: &amp;quot;, resp.Header.Get(&amp;quot;Location&amp;quot;))
	log.Println(&amp;quot;    Body: &amp;quot;, string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt;go run gitio.go
2015/08/08 12:00:00   Status: 201 Created
2015/08/08 12:00:00 Location: http://git.io/vOj52
2015/08/08 12:00:00     Body: https://github.com/spiegel-im-spiegel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり，めでたく短縮 URL が取得できた。&lt;/p&gt;

&lt;p&gt;ちなみに最初の &lt;a href=&#34;http://curl.haxx.se/&#34; title=&#34;curl and libcurl&#34;&gt;curl&lt;/a&gt; コマンドの &lt;code&gt;-F&lt;/code&gt; を &lt;code&gt;-d&lt;/code&gt; に替えて &lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; にかけると&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0223b5e2f12da4589f164146964cba22:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0223b5e2f12da4589f164146964cba22:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;
	&amp;quot;net/url&amp;quot;
)

func main() {
	values := url.Values{
		&amp;quot;url&amp;quot;: {&amp;quot;https://github.com/spiegel-im-spiegel&amp;quot;},
	}

	resp, err := http.PostForm(&amp;quot;http://git.io&amp;quot;, values)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	log.Print(string(body))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように変換される。
&lt;a href=&#34;https://golang.org/pkg/net/http/&#34; title=&#34;http - The Go Programming Language&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Post()&lt;/code&gt; 関数から &lt;a href=&#34;https://golang.org/pkg/net/http/&#34; title=&#34;http - The Go Programming Language&#34;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;PostForm()&lt;/code&gt; 関数に替わってかなりコードがすっきりした。
今回のような単純な request ならこちらの方がいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;ついでにパッケージも作ってみた:0223b5e2f12da4589f164146964cba22&#34;&gt;ついでにパッケージも作ってみた&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gitioapi&#34;&gt;spiegel-im-spiegel/gitioapi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これを称して「他人の褌で相撲を取る」という&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0223b5e2f12da4589f164146964cba22:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0223b5e2f12da4589f164146964cba22:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
なるほど。
こうやって API を実装していくんだね。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:0223b5e2f12da4589f164146964cba22&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:0223b5e2f12da4589f164146964cba22:a&#34;&gt;今のところは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のほかに Python3, PHP, JavaScript (node.js/XMLHttpRequest), Java, Objective-C (NSURL_Session/NSURLConnection), Vim Script (WebAPI-vim) に対応している。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0223b5e2f12da4589f164146964cba22:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:0223b5e2f12da4589f164146964cba22:b&#34;&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/042751d98e315e4e3382&#34;&gt;初出の記事&lt;/a&gt;のコメントで &lt;a href=&#34;https://shibukawa.github.io/curl_as_dsl/&#34; title=&#34;cURL as DSL — cURL as DSL 1.0 documentation&#34;&gt;cURL as DSL&lt;/a&gt; の作者の方に教えていただいた。感謝！
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0223b5e2f12da4589f164146964cba22:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:0223b5e2f12da4589f164146964cba22:c&#34;&gt;実はジェネレータで生成したコードの著作権は誰に帰属するのか，とかいろいろ思うところはあるのだけど，それはまた別の機会に。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0223b5e2f12da4589f164146964cba22:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Hugo 0.15 が Apache License 2.0 下でリリース - hugo</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/hugo/hugo-0_15-released-under-apache2/" />
		<id>tag:text.Baldanders.info,2015-11-26:/hugo/hugo-0_15-released-under-apache2/</id>
		<published>2015-11-26T20:26:45+09:00</published>
		<updated>2015-11-26T20:26:45+09:00</updated>
		<summary>追加された機能が盛りだくさんあり詳しくは上のリンク先を確認していただくとして，実は今回の目玉はライセンスのアップグレードである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="hugo" label="hugo" scheme="http://text.baldanders.info/hugo" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/&#34;&gt;Repository&lt;/a&gt; ではしばらく前からリリース準備が行われていて wktk 状態で待っていたのだが，ようやくリリースの運びとなった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases/tag/v0.15&#34;&gt;Release v0.15 · spf13/hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt; hugo version
Hugo Static Site Generator v0.15 BuildDate: 2015-11-25T14:35:20+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;追加された機能が盛りだくさんあり詳しくは上のリンク先を確認していただくとして，実は今回の目玉はライセンスのアップグレードである。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; のライセンスは &lt;a href=&#34;https://opensource.org/licenses/Simple-2.0&#34;&gt;Simple Public License (SimPL) 2.0&lt;/a&gt; だったのだが，これを企業ユーザでも利用しやすい一般的なライセンスにしてくれという要望というか議論は随分前からあったらしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/hugo/issues/201&#34;&gt;Upgrade the license to an open one · Issue #201 · spf13/hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Simple-2.0&#34; title=&#34;Simple Public License (SimPL-2.0) | Open Source Initiative&#34;&gt;SimPL-2.0&lt;/a&gt; はオープンソース・ライセンスのひとつで GPLv2 を（文字通り）よりシンプルに記述したもののようである。&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;This Simple Public License 2.0 (SimPL-2.0 for short) is a plain language implementation of GPL 2.0.  The words are different, but the goal is the same - to guarantee for all users the freedom to share and change software.  If anyone wonders about the meaning of the SimPL, they should interpret it as consistent with GPL 2.0.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://opensource.org/licenses/Simple-2.0&#34;&gt;Simple Public License (SimPL-2.0)&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;当初は GPL や MIT ライセンスなどが候補に挙がっていたようだが，最終的には &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, Version 2.0&lt;/a&gt; （&lt;a href=&#34;https://osdn.jp/projects/opensource/wiki/licenses%2FApache_License_2.0&#34;&gt;日本語訳&lt;/a&gt;）に決まった。
&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34; title=&#34;Apache License, Version 2.0&#34;&gt;Apache-2.0&lt;/a&gt; は copyleft ではないがオープンソース・ライセンスのひとつであり，特許の終了規定やコード等の寄与（contribution）に関する規定があるのが特徴。
さらに &lt;a href=&#34;http://www.gnu.org/licenses/license-list.ja.html#apache2&#34;&gt;GPLv3 と互換性のあるライセンス&lt;/a&gt;として認められている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; ではユーザによるコードの寄与が結構あるため，この点が &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34; title=&#34;Apache License, Version 2.0&#34;&gt;Apache-2.0&lt;/a&gt; を選択する決め手になったようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/&#34; title=&#34;GitHub&#34;&gt;GitHub&lt;/a&gt; などは pull request で気軽にコードを寄与できるメリットがあるが，寄与されたコードの扱いが問題になることもある。
Copyleft であれば寄与されたコードも自動的に元のライセンスに従うため混乱は少ないが，そうでない場合は &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34; title=&#34;Apache License, Version 2.0&#34;&gt;Apache-2.0&lt;/a&gt; のような明示的な規定が必要になるだろう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1be1044af98006ffe33bc89a20b80d08:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1be1044af98006ffe33bc89a20b80d08:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:1be1044af98006ffe33bc89a20b80d08&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/hugo/bookmark/&#34;&gt;Hugo に関するブックマークはこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1be1044af98006ffe33bc89a20b80d08:a&#34;&gt;更に言うと， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では気軽にパッケージを import できるが，最終的な製品のライセンスをどうするかは結構重要な問題である。 &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; のライセンス・アップグレードの際には，この辺の確認でも時間がかかった感じだ。事ほど左様にライセンスの互換性とは重要な問題なのである。ちなみに &lt;a href=&#34;http://gohugo.io/&#34; title=&#34;Hugo :: A fast and modern static website engine&#34;&gt;Hugo&lt;/a&gt; のようなコード・ジェネレータあるいはもっと広く CASE (Computer Aided Software Engineering) ツールが生成するコードが誰に帰属するのかは，また別の問題である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1be1044af98006ffe33bc89a20b80d08:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Security Advisory Gpg4win - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/security-advisory-gpg4win/" />
		<id>tag:text.Baldanders.info,2015-11-25:/remark/2015/security-advisory-gpg4win/</id>
		<published>2015-11-25T21:49:56+09:00</published>
		<updated>2015-11-25T21:49:56+09:00</updated>
		<summary>今回の Gpg4win のリリースはセキュリティ・アップデートを含み， Advisory も併せてリリースされている。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;Windows 用の &lt;a href=&#34;https://gnupg.org/&#34; title=&#34;The GNU Privacy Guard&#34;&gt;GnuPG&lt;/a&gt; を含む暗号ツール群 &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; の 2.3.0 がリリースされた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lists.wald.intevation.org/pipermail/gpg4win-announce/2015-November/000067.html&#34;&gt;Gpg4win-announce: Gpg4win 2.3.0 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回のリリースはセキュリティ・アップデートを含み， Advisory も併せてリリースされている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://lists.wald.intevation.org/pipermail/gpg4win-announce/2015-November/000066.html&#34;&gt;[Gpg4win-announce] Security Advisory Ggp4win 2015-11-25&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容は以下のとおり。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The installer will load and execute other code if it is placed in the same directory as a DLL with the right name.  This &amp;ldquo;current directory attack&amp;rdquo; or &amp;ldquo;dll preloading attack&amp;rdquo; can be part of a remote exploitation for example if the Gpg4win installer is downloaded to a common Downloads directory and the attacker can previously place files there by tricking a user or other software to download files with a specific name to the same place. If the Gpg4win installer is then executed, the other code may run, while the user believes to run only the Gpg4win installer.&lt;/li&gt;
&lt;li&gt;There is a &amp;ldquo;local privilege escalation&amp;rdquo; during an installer run.  Installer runs can happen during a fresh, an update install or a deinstallation. With Windows Vista or later an administrator can log in as user and give higher privileges to a single process using the User Account Control mechanism (UAC). If the installer is started in this way, there is a time window where an attacker running with user privileges can insert code in a temporary directory of the installer that will be executed with the higher privileges bypassing the UAC.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;まぁ Windows ではありがちな脆弱性である。
GnuPG 自体に問題があるわけではなく，&lt;a href=&#34;http://sourceforge.net/p/nsis/bugs/1125/&#34; title=&#34;NSIS: Nullsoft Scriptable Install System / Bugs / #1125 Code execution / Privilege escalation problems with NSIS installers&#34;&gt;インストーラのバグ&lt;/a&gt;っぽい。&lt;/p&gt;

&lt;p&gt;世の中は&lt;a href=&#34;http://text.baldanders.info/remark/2015/use-the-signal-luke/&#34;&gt;10人にひとりもまともに OpenPGP 製品を使えない&lt;/a&gt;らしいのに &lt;a href=&#34;https://www.gpg4win.org/&#34; title=&#34;Gpg4win - Secure email and file encryption with GnuPG for Windows&#34;&gt;Gpg4win&lt;/a&gt; を使ってる人がどの程度いるのかかなり怪しいのだが，まぁ一応。&lt;/p&gt;

&lt;p&gt;影響度はよく分からないが， DLL プリロード攻撃の脆弱性も権限昇格の脆弱性も割とヤバめなので，さっさとアップデートすることをおすすめする。
ひょっとして，これ他の Windows 向けオンラインソフトにも影響出るかなぁ。&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>行末の空白文字を削除する - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/trim-trailing-whitespace/" />
		<id>tag:text.Baldanders.info,2015-11-23:/remark/2015/trim-trailing-whitespace/</id>
		<published>2015-11-23T20:42:06+09:00</published>
		<updated>2015-11-23T20:42:06+09:00</updated>
		<summary>行末の空白文字を削除する小ネタ。いや，たまに使おうとすると忘れてるんだよね。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;テキストエディタで行末の空白文字を削除する小ネタ。
いや，たまに使おうとすると忘れてるんだよね。&lt;/p&gt;

&lt;h2 id=&#34;atom-editor-の場合:b7eb25d7668de56fd3123c625cd97081&#34;&gt;ATOM Editor の場合&lt;/h2&gt;

&lt;p&gt;以前は行末の処理は &lt;a href=&#34;https://atom.io/packages/editorconfig&#34; title=&#34;editorconfig&#34;&gt;editorconfig&lt;/a&gt; でできてたはずなんだけど，いつの間にか &lt;code&gt;trim_trailing_whitespace&lt;/code&gt; と &lt;code&gt;insert_final_newline&lt;/code&gt; は “doesn&amp;rsquo;t work yet” になってる。
それとも私の勘違いだったのか。&lt;/p&gt;

&lt;p&gt;気を取り直して。&lt;/p&gt;

&lt;p&gt;行末の空白を一気に削除したいならコマンドパレットで &lt;code&gt;whitespace&lt;/code&gt; を検索すると “Remove Trailing Whitespace” があるので，これを実行する。
保存するたびに自動的に行末の空白文字を削除したいのであれば &lt;a href=&#34;https://atom.io/packages/whitespace&#34; title=&#34;whitespace&#34;&gt;whitespace&lt;/a&gt; の Settings にある “Remove Trailing Whitespace” を有効にする。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/23214924646/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/778/23214924646_fb830df03b.jpg&#34; alt=&#34;settings for whitespace (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23214924646/&#34;&gt;settings for whitespace (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;おまけだが，同じ Settings 画面で “Ensure Single Trailing Newline” を有効にすると，テキストファイル末尾が改行になっていない場合は改行を補ってくれる。
他にもこまごまとした設定があり，しかもファイルタイプごとに設定できるようだ。
でもファイルタイプではなく &lt;a href=&#34;https://atom.io/packages/editorconfig&#34; title=&#34;editorconfig&#34;&gt;editorconfig&lt;/a&gt; でコントロールできるようになってほしい。&lt;/p&gt;

&lt;p&gt;もうひとつ余談だが， &lt;a href=&#34;http://text.baldanders.info/golang/golang-with-atom/&#34;&gt;Go 言語環境&lt;/a&gt;ではコードの整形を行う際に &lt;a href=&#34;https://atom.io/packages/whitespace&#34; title=&#34;whitespace&#34;&gt;whitespace&lt;/a&gt; の設定に関係なく行末の空白を削除してくれる。
他の言語でも整形ツールがあれば同様にできるかも。&lt;/p&gt;

&lt;h2 id=&#34;秀丸またはサクラエディタの場合:b7eb25d7668de56fd3123c625cd97081&#34;&gt;秀丸またはサクラエディタの場合&lt;/h2&gt;

&lt;p&gt;現在，ほとんどの作業は &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; に移行できているのだが，巨大ファイルを扱う場合などはまだ&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;等&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; のお世話になっている。
&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;ではファイルタイプごとに保存時に行末の空白を削除するかどうか設定できる。
あるいは置換機能を使う方法もある。
手順は以下の通り。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;「検索文字列」に &lt;strong&gt;&lt;code&gt;[ 　\t]+$&lt;/code&gt;&lt;/strong&gt; を指定する（行末の半角空白，全角空白，タブ文字を正規表現で指定する）&lt;/li&gt;
&lt;li&gt;「置換文字列」はブランクにする（何もセットしない）&lt;/li&gt;
&lt;li&gt;「正規表現」の項目にチェックを入れて置換を開始する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ちなみに同様の手順は&lt;a href=&#34;http://sakura-editor.sourceforge.net/&#34; title=&#34;サクラエディタ&#34;&gt;サクラエディタ&lt;/a&gt;でも使える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
てか， &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; も含め置換処理に正規表現が使えるエディタならたいてい使える&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;職場では&lt;a href=&#34;http://hide.maruo.co.jp/software/hidemaru.html&#34; title=&#34;秀まるおのホームページ(サイトー企画)－秀丸エディタ&#34;&gt;秀丸&lt;/a&gt;が NG の場合もあるので，その場合は&lt;a href=&#34;http://sakura-editor.sourceforge.net/&#34; title=&#34;サクラエディタ&#34;&gt;サクラエディタ&lt;/a&gt;で代替えしている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b7eb25d7668de56fd3123c625cd97081:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;&lt;a href=&#34;http://sakura-editor.sourceforge.net/&#34; title=&#34;サクラエディタ&#34;&gt;サクラエディタ&lt;/a&gt;では「タイプ別設定」の「スクリーン → インデント」の項目で「改行時に末尾の空白を削除」にチェックを入れることで行末の空白を自動的に削除できる。なんでこんな変なところに設定項目があるんだろう。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b7eb25d7668de56fd3123c625cd97081:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;でも正規表現ってあまり得意じゃないので，普段は忘れてるんだよなぁ。昔，正規表現を簡単に組み立てることのできるツールがあって重宝していたが，マシンを replace していくうちに行方不明になっちゃった。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b7eb25d7668de56fd3123c625cd97081:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>うるう秒は当分存続らしい - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/leap-second/" />
		<id>tag:text.Baldanders.info,2015-11-22:/remark/2015/leap-second/</id>
		<published>2015-11-22T17:35:57+09:00</published>
		<updated>2015-11-22T17:35:57+09:00</updated>
		<summary>INTERNET Watch で詳しい記事を見つけたので，これをベースにグダグダ書いてみる。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;某新聞で記事を見かけたが，このブログでは基本的に日本の新聞記事にリンクは張らない方針なので Facebook に愚痴だけ書いて済ませていたが， INTERNET Watch で詳しい記事を見つけたので，これをベースにグダグダ書いてみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20151120_731707.html&#34;&gt;“うるう秒”しばらくは存続、ITUの世界無線通信会議で決定 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うるう秒をどうするかという議論は今に始まった議論ではない。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;うるう秒を巡っては、その存廃が1999年から15年以上に渡って議論されている。特に近年は、時刻調整を必要とするPCなどの機器が急増。その調整作業が膨大になってきていること、うるう秒によるシステムトラブルが現実に発生していることなどを理由に、廃止を求める意見が日本をはじめとした各国から挙がっているという。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20150515_702167.html&#34;&gt;「うるう秒」18年ぶりの平日実施──7月1日午前に「8時59分60秒」挿入 -INTERNET Watch&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;最近の議論では&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;2015年3～4月の会合の段階では、4つの案が検討されているという。A案は「UTCへのうるう秒調整を廃止し、新たな連続時系を導入する」、B案が「現行UTCの定義を維持しつつ、新たに（うるう秒調整を廃止した）連続時系を導入し、2つの時系列を共存させる」、C案が「現行UTCの定義を変更しない」、D案は「研究の結論が出ていないため、現行UTCの定義を変更しない」となっている。&lt;br&gt;
このうちA案を支持しているのが米国、フランス、オーストラリア、韓国、中国、日本。B案は英国、C案はロシア、D案はアラブ6カ国が支持する。タイおよびドイツの動向は不明。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20150515_702167.html&#34;&gt;「うるう秒」18年ぶりの平日実施──7月1日午前に「8時59分60秒」挿入 -INTERNET Watch&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;という状況だったそうだ。&lt;/p&gt;

&lt;p&gt;うるう秒に関する障害については以前にまとめた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/spiegel-im-spiegel/items/0793acd607ce01a124d6&#34;&gt;うるう秒に関する覚え書き - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;うるう秒に関する障害には大きく2つある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NTP の Leap Indicator による時刻の巻き戻し（うるう秒を挿入する場合）&lt;/li&gt;
&lt;li&gt;タイムスタンプの問題&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このうちひとつめの方は NTP を SLEW モードにすればよい。
SLEW モードなら時刻を巻き戻すことなく，また Leap Indicator をセットしないので他のサービスを巻き添えにすることもない（サービスが独自の時刻処理を持っている場合は別）。&lt;/p&gt;

&lt;p&gt;問題はタイムスタンプのほう。
うるう秒で時刻調整している間は機器間で時刻同期できないし，うるう秒を挿入する場合（過去のうるう秒は全てこれ）は「2015年6月30日 23:59:60 UTC」といったタイムスタンプを処理できない場合がある。
タイムスタンプは，特に電子署名においては中核技術のひとつであるため（「否認防止（non-repudiation）」には正しい時刻が必要），処理できない場合があるとなると影響が大きい。
ただし，実際にはうるう秒が挿入される前後で時刻および関連するサービスへのアクセスを停止することで問題を回避できている。
可用性（availability）への影響は最小限に抑えられるわけだ。&lt;/p&gt;

&lt;p&gt;UTC は原子時系の一種だが，恒星時系の一種である UT&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:039085d8e1a38486fee4a9a96d45a753:a1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:039085d8e1a38486fee4a9a96d45a753:a1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; と連動している。
UTC が UT と連動しなくなれば日常の暦象に大きく影響する。
「100年に1分程度」ではなく「100年に1分も」ギャップがあっては困るのである。&lt;/p&gt;

&lt;p&gt;そもそもコンピュータの時刻系を UTC にするからこのようなことが起こるのであって，1秒の進み遅れが問題になるなら UTC を使ってはいけない。
それならむしろ TAI（国際原子時）と同期させるべきだ。
たとえば GPS は $\mathrm{TAI} - 19\,\mathrm{sec}$ で運用されている。
もちろんうるう秒はない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:039085d8e1a38486fee4a9a96d45a753:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:039085d8e1a38486fee4a9a96d45a753:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;UTC は人の日常生活に寄せた時刻系であってコンピュータ向きではない。
だからといって UTC のほうを弄るのは全く筋の悪いやりかたで，（恐らく政治的な思惑もあるのだろうが）なんでこんなに議論が紛糾するのかわからない。&lt;/p&gt;

&lt;p&gt;最後に Linux 開発者の発言を紹介しておこう。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;トーヴァルズは、最大の間違いは（時間を1970年1月1日0時0分0秒からの経過秒数で形式的に表示する）POSIX標準において1日を86,400秒と定義しておきながら、（うるう秒による調整が必要な）UTCをコンピューターに採用するという自己矛盾をおかしたことだったと指摘する。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2015/06/30/torvalds_leapsecond/&#34;&gt;Linux開発者リーナス・トーヴァルズ、来る「うるう秒」を語る « WIRED.jp&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;ちなみに実際の UNIX Time は UTC のある時刻から1970年初の時刻を単に差し引いただけのもので，うるう秒を考慮していない。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;&lt;strong&gt;トーヴァルズ&lt;/strong&gt;：ほとんどの場合、機械でさえも原子時のことは気にしていませんよ。大半は、人間が時間を気にしているから機械もそうしているんです。例えば、機械がローンの支払のトラッキングを行っている、というのがそうですね。だから実際は、その2つを分けることはできないんです。人々に「時間と太陽の相関性や、日付と季節の相関性など気にしないように」と言わなくてはいけなくなります。それは現実的でないですよね。&lt;br&gt;
原子時を本当に気にかけているのは、宇宙関連の作業をしているコンピューターや開発者たちでしょう。それ以外の人々は（コンピューターも）POSIX時間を採用し、「そんなの知るか」と言っておけばいいんです。タイムキーピングの倒錯性によって、少数の不運な人々はバグが起きるのを心配するでしょうが。残りのわたしたちはこのうるう秒を、親しい友人たちとちょっとナンセンスなパーティーでも開くための口実にでもすればいいんですよ。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://wired.jp/2015/06/30/torvalds_leapsecond/&#34;&gt;Linux開発者リーナス・トーヴァルズ、来る「うるう秒」を語る « WIRED.jp&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:039085d8e1a38486fee4a9a96d45a753:a1&#34;&gt;UT は太陽時の一種で，太陽時は恒星時系の一種。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:039085d8e1a38486fee4a9a96d45a753:a1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:039085d8e1a38486fee4a9a96d45a753:b&#34;&gt;GPS は UT と連動させる必要はなく，2つの時点間の時間が精確にわかれば問題ない。故にうるう秒は必要ないのである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:039085d8e1a38486fee4a9a96d45a753:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>同時多発テロ関連のブックマーク（暗号関連） - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/paris-attacks-and-cipher/" />
		<id>tag:text.Baldanders.info,2015-11-21:/remark/2015/paris-attacks-and-cipher/</id>
		<published>2015-11-21T19:02:46+09:00</published>
		<updated>2015-11-24T22:08:23+09:00</updated>
		<summary>「同時多発テロ関連のブックマーク」から暗号・諜報関連の記事を切り出してこの記事で管理することにする。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;いや，もうね，バカかと。
アホかと。&lt;/p&gt;

&lt;p&gt;9.11 以後，「テロとの戦い」と称して市民のプライバシーにかなり踏む込み形で諜報活動が行われた。
その結果が今のありさまである。
警察組織や諜報機関が欲しているのはテロリストの情報ではない。
彼らは「テロ」を利用しているだけである。
私たちは，「9.11 以後」10年以上の時間をかけてそれを悟ったのではないのか。&lt;/p&gt;

&lt;p&gt;というわけで，「&lt;a href=&#34;http://text.baldanders.info/remark/2015/paris-attacks/&#34;&gt;同時多発テロ関連のブックマーク&lt;/a&gt;」から暗号・諜報関連の記事を切り出してこの記事で管理することにする。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2015/11/18/isis-encrypted-communications/&#34;&gt;ISが使う暗号化メッセージング・サーヴィスは、あなたにも使える « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2015/11/paris_terrorist.html&#34;&gt;Paris Terrorists Use Double ROT-13 Encryption - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techcrunch.com/2015/11/19/telegram-purges-isis-public-channels/&#34;&gt;After Paris Attacks, Telegram Purges ISIS Public Content | TechCrunch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/19/news060.html&#34;&gt;パリ同時テロ実行犯の連絡ツールは暗号化されていない素のSMS──英Telegraph報道 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gizmodo.jp/2015/11/post_20218.html&#34;&gt;テロは暗号化技術のせい？ 好機とばかり監視を正当化する情報機関 : ギズモード・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wirelesswire.jp/2015/11/47933/&#34;&gt;パリ同時多発テロの余波 – 米FCC委員長、通信監視関連法の修正を提起 - WirelessWire News（ワイヤレスワイヤーニュース）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gizmodo.jp/2015/11/paris_encript.html&#34;&gt;パリ同時多発テロで通信暗号化を責めるのはやっぱりおかしい : ギズモード・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/24/news110.html&#34;&gt;米IT業界団体、バックドア提供拒否を明言　パリ同時テロを受けて必要論が再燃も - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;パリで起きた同時テロのような恐ろしい悲劇を受け、解決策を探すのは当然のことだ。だが暗号化レベルを下げることは解決策にはならない&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/24/news110.html&#34;&gt;米IT業界団体、バックドア提供拒否を明言　パリ同時テロを受けて必要論が再燃も&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;捜査当局や国家安全保障局が国民の保護に尽力していることには深く感謝している。だが暗号化レベルを引き下げたり、暗号化されたデバイスやデータにバックドアを作成したりすれば、たとえそれが善人のためであっても、結局、攻撃者が悪用できる脆弱性を生み出すことにつながりかねない&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/24/news110.html&#34;&gt;米IT業界団体、バックドア提供拒否を明言　パリ同時テロを受けて必要論が再燃も&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.schneier.com/blog/archives/2015/11/policy_repercus.html&#34;&gt;Policy Repercussions of the Paris Terrorist Attacks - Schneier on Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lawfareblog.com/reflections-nsa-oversight-and-prediction-nsa-authorities-and-oversight-and-transparency-will-expand&#34;&gt;Reflections on NSA Oversight, and a Prediction That NSA Authorities (and Oversight, and Transparency) Will Expand - Lawfare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Two important lessons of the last dozen years are (1) the government will increase its powers to meet the national security threat fully (because the People demand it), and (2) the enhanced powers will be accompanied by novel systems of review and transparency that seem to those in the Executive branch to be intrusive and antagonistic to the traditional national security mission, but that in the end are key legitimating factors for the expanded authorities.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.lawfareblog.com/reflections-nsa-oversight-and-prediction-nsa-authorities-and-oversight-and-transparency-will-expand&#34;&gt;Reflections on NSA Oversight, and a Prediction That NSA Authorities (and Oversight, and Transparency) Will Expand&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283100/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283100/baldandersinf-22/&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ブルース・シュナイアー 井口 耕二 &lt;/dd&gt;&lt;dd&gt;日経BP社 2007-02-15&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4881359967/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4881359967.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号の秘密とウソ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797350997/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797350997.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新版暗号技術入門 秘密の国のアリス&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4594070507/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4594070507.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;チャイナ・ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159746/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159746.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;宇宙創成〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;原題は “Beyond Fear”。「9.11 以後」に書かれたセキュリティ書である。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-14&#34;&gt;2014/09/14&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ATOM で Go - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/golang-with-atom/" />
		<id>tag:text.Baldanders.info,2015-11-21:/golang/golang-with-atom/</id>
		<published>2015-11-21T14:19:02+09:00</published>
		<updated>2015-11-27T14:31:41+09:00</updated>
		<summary>ATOM Editor で Go 言語のコーディング環境を整える。 go-plus パッケージの導入について。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回もまた横道に逸れてツールの話。
&lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; Editor で &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のコーディング環境を整える。
環境を作る度に「どうだったっけ」とあちこちサイトを巡るので，覚え書きとしてまとめておく。&lt;/p&gt;

&lt;p&gt;例によって Windows 環境を前提にしているので，他の環境の方は適当に脳内補完してください。&lt;/p&gt;

&lt;h2 id=&#34;開発支援ツールの導入:19f55614c00d490a9959ede6566335af&#34;&gt;開発支援ツールの導入&lt;/h2&gt;

&lt;p&gt;まずは &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;用の支援ツールを導入する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;C:&amp;gt; go get -v golang.org/x/tools/cmd/vet
C:&amp;gt; go get -v golang.org/x/tools/cmd/goimports
C:&amp;gt; go get -v golang.org/x/tools/cmd/oracle
C:&amp;gt; go get -v github.com/golang/lint/golint
C:&amp;gt; go get -v github.com/nsf/gocode
C:&amp;gt; go get -v github.com/rogpeppe/godef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/lint&#34; title=&#34;golang/lint&#34;&gt;golint&lt;/a&gt; は，いわゆる lint ツール。
&lt;a href=&#34;https://golang.org/cmd/vet/&#34; title=&#34;vet - The Go Programming Language&#34;&gt;vet&lt;/a&gt; もコードの静的検査ツール。
両方あると幸せになれる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/goimports&#34; title=&#34;goimports - GoDoc&#34;&gt;goimport&lt;/a&gt; はコード整形ツールで，標準の &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; を置き換えることができ，かつ &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34; title=&#34;gofmt - The Go Programming Language&#34;&gt;gofmt&lt;/a&gt; よりも若干かしこい。
&lt;a href=&#34;https://github.com/nsf/gocode&#34; title=&#34;nsf/gocode&#34;&gt;gocode&lt;/a&gt; は入力補完ツール。
&lt;a href=&#34;https://github.com/rogpeppe/godef&#34; title=&#34;rogpeppe/godef&#34;&gt;godef&lt;/a&gt; は指定したシンボルの定義定義元情報を出力するツール（出力を使って定義元へジャンプできる。実際には &lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/oracle&#34; title=&#34;oracle - GoDoc&#34;&gt;oracle&lt;/a&gt; と併用するらしい）。
いずれも vim や emacs などでは有名だが &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;ATOM&lt;/a&gt; でも使える。&lt;/p&gt;

&lt;p&gt;言わずもがなだが，これらのツールには PATH を通しておくこと。
&lt;code&gt;%GOPATH%\bin&lt;/code&gt; フォルダにパスを通しておけばいいだろう。&lt;/p&gt;

&lt;h2 id=&#34;go-plus-パッケージの導入:19f55614c00d490a9959ede6566335af&#34;&gt;go-plus パッケージの導入&lt;/h2&gt;

&lt;p&gt;では，上述のツールを操作できる &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; パッケージを導入する。
やり方は Settings 画面（&lt;code&gt;ctrl+,&lt;/code&gt; で起動）で Install してもいいし &lt;code&gt;apm&lt;/code&gt; コマンドを使ってもよい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM Editor に関するメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; には設定項目がいくつかあるが，ほとんど既定値のままで使える。
コマンドパレットから &lt;code&gt;golang&lt;/code&gt; をキーワードに検索すると山程機能があるのが分かるだろう。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22710708563/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5794/22710708563_3d4aca2709.jpg&#34; alt=&#34;menu of go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22710708563/&#34;&gt;menu of go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;既定ではソースファイルを保存する度にコード整形や lint 等が走る。
これを制御したい場合はパッケージの Setting で以下の項目を調整すればよい。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;&lt;img src=&#34;https://farm1.staticflickr.com/735/22767398347_ed9329653a.jpg&#34; alt=&#34;settings for go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22767398347/&#34;&gt;settings for go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;定義ファイルへのジャンプと復帰は &lt;code&gt;alt-cmd-g&lt;/code&gt; および &lt;code&gt;alt-shift-cmd-G&lt;/code&gt; にバインドされているが Windows 環境では動かないので（コマンドパレットから起動してもいいのだが）適当なキーに再割当てするといいだろう。
ファンクションキーは結構空いてるので，たとえば&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Keystroke&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Selector&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;shift-f12&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;golang:godef-return&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;とアサインするなら &lt;code&gt;%USERPROFILE%\.atom\keymap.cson&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cson&#34;&gt;&#39;atom-text-editor[data-grammar=&amp;quot;source go&amp;quot;]:not(.mini)&#39;:
  &#39;f12&#39;: &#39;golang:godef&#39;
  &#39;shift-f12&#39;: &#39;golang:godef-return&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と設定すればいい。&lt;/p&gt;

&lt;p&gt;lint や定義ファイルのジャンプは &lt;code&gt;GOPATH&lt;/code&gt; や &lt;code&gt;GOROOT&lt;/code&gt; を見て外部パッケージを判断しているのだが， &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; のようなツールでは &lt;code&gt;GOPATH&lt;/code&gt; をコマンド内部で書き換えて実行するので lint ツールとは整合性が取れなくなる。
&lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; の設定では &lt;code&gt;GOPATH&lt;/code&gt; を上書きすることも可能なので，とりあえずこれで回避する方法もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:19f55614c00d490a9959ede6566335af:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/23233956325/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5821/23233956325_0ddf55e61a.jpg&#34; alt=&#34;settings for go-plus (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/23233956325/&#34;&gt;settings for go-plus (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; への対応は “Planned Features” に挙がってるので，将来的には小細工しなくても &lt;a href=&#34;http://getgb.io/&#34; title=&#34;gb - A project based build tool for Go&#34;&gt;gb&lt;/a&gt; ベースの開発ができるようになるかもしれない。
てか，なってほしい。&lt;/p&gt;

&lt;h2 id=&#34;language-go-パッケージは同梱済み:19f55614c00d490a9959ede6566335af&#34;&gt;language-go パッケージは同梱済み&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/language-go&#34; title=&#34;language-go&#34;&gt;language-go&lt;/a&gt; は Core パッケージに入っているためインストール時点で既に入っている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:19f55614c00d490a9959ede6566335af:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;https://atom.io/packages/language-go&#34; title=&#34;language-go&#34;&gt;language-go&lt;/a&gt; の機能で目を引くのはやはり Snippets だろう。
以下はその一部（パッケージの Settings に一覧がある）。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a data-flickr-embed=&#34;true&#34; href=&#34;https://www.flickr.com/photos/spiegel/22712254763/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5675/22712254763_f8fb9f6735.jpg&#34; alt=&#34;Snippets for golang (ATOM)&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.flickr.com/photos/spiegel/22712254763/&#34;&gt;Snippets for golang (ATOM)&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;こんなよぅけ覚えれるか！ まぁとりあえず，よく使うものだけ覚えておけばいいのだろうけど。&lt;/p&gt;

&lt;p&gt;使い方は，トリガーとなる文字列を入力して tab キーを押す。
たとえば &lt;code&gt;func&lt;/code&gt; と入力して tab キーを押すと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func ()  {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と展開される。
&lt;code&gt;iferr&lt;/code&gt; なら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err != nil {
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;h2 id=&#34;go-find-references-パッケージが惜しい:19f55614c00d490a9959ede6566335af&#34;&gt;go-find-references パッケージが惜しい&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://atom.io/packages/go-find-references&#34; title=&#34;go-find-references&#34;&gt;go-find-references&lt;/a&gt; パッケージは &lt;a href=&#34;https://github.com/redefiance/go-find-references&#34;&gt;redefiance/go-find-references&lt;/a&gt; を使って指定したシンボルを参照しているファイルを列挙してくれる便利ツールだが， Windows 環境ではタグジャンプが上手く動かない。
どうやら &lt;code&gt;C:&lt;/code&gt; などのドライブレターを上手く処理できないようだ。
とほほ。&lt;/p&gt;

&lt;h2 id=&#34;bookmark:19f55614c00d490a9959ede6566335af&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/fcd25db64f341ad2471f&#34;&gt;struct にアノテーションつけてたら go vet . すべき - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/osamingo/items/d5ec42fb8587d857310a&#34;&gt;これからGo言語を書く人への三種の神器 - Qiita&lt;/a&gt; : &lt;code&gt;go vet&lt;/code&gt;, &lt;code&gt;goimports&lt;/code&gt;, &lt;code&gt;golint&lt;/code&gt; で正しいコードを書きましょう。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;code&gt;GOPATH&lt;/code&gt; を &lt;a href=&#34;https://atom.io/packages/go-plus&#34; title=&#34;go-plus&#34;&gt;go-plus&lt;/a&gt; の設定で上書きする場合は “Environment Overrides Config” を&lt;strong&gt;無効にする&lt;/strong&gt;こと。なんでかこれ，毎回ハマるんだよなぁ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:19f55614c00d490a9959ede6566335af:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;code&gt;language&lt;/code&gt; でインストール済みパッケージを検索するとメジャーな言語は大抵入っているのが分かる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:19f55614c00d490a9959ede6566335af:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： The TPP must be rejected. - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1121-diary/" />
		<id>tag:text.Baldanders.info,2015-11-21:/remark/2015/1121-diary/</id>
		<published>2015-11-21T07:48:29+09:00</published>
		<updated>2015-11-25T21:06:23+09:00</updated>
		<summary>The TPP must be rejected. / 広島大学天文学研究会プラネタリウム &amp; 天体観望会 / NTPsec ベータ版が公開 / Visual Studio Code がベータ版に到達</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#tppip:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;The TPP must be rejected.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#huaa:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;広島大学天文学研究会プラネタリウム &amp;amp; 天体観望会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ntpsec:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;NTPsec ベータ版が公開&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vscode:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;Visual Studio Code がベータ版に到達&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;tppip:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;The TPP must be rejected.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; から TPP の分析とかなり強い調子の提言。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://creativecommons.org/weblog/entry/46455&#34;&gt;Trans-Pacific Partnership Would Harm User Rights and the Commons - Creative Commons&lt;/a&gt; : 要旨&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/campaigns/trans-pacific-partnership-would-harm-user-rights-and-the-commons&#34;&gt;Trans-Pacific Partnership Would Harm User Rights and the Commons - Creative Commons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要点は以下のとおり（英語のままでごめん）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;20-year copyright term extension is unnecessary and unwarranted&lt;/li&gt;
&lt;li&gt;The mention of the public domain is lip service, at best&lt;/li&gt;
&lt;li&gt;Enforcement provisions are mandatory, while exceptions and limitations are optional&lt;/li&gt;
&lt;li&gt;Potentially drastic infringement penalties, even for non-commercial sharing&lt;/li&gt;
&lt;li&gt;Criminal penalties for circumventing digital rights management on works&lt;/li&gt;
&lt;li&gt;Investor-state dispute settlement mechanism may be leveraged for intellectual property claims&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最初の著作権期限の延長および2番目については，&lt;a href=&#34;http://text.baldanders.info/remark/2015/1114-diary/#tppip:3520c6f27e68cb332b04696ebe5f9997&#34;&gt;これまで述べた&lt;/a&gt;ように「公有財産の私有化」と言えるものだが，残りの4つはまさに「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%A2%E3%83%B3%E3%82%BA%E3%81%AE%E6%82%B2%E5%8A%87&#34;&gt;コモンズの悲劇&lt;/a&gt;」を地で行くような内容であり &lt;a href=&#34;http://creativecommons.org/&#34; title=&#34;Creative Commons&#34;&gt;Creative Commons&lt;/a&gt; が強い調子に出るのも当然と言える。&lt;/p&gt;

&lt;p&gt;「所有」の概念も「共有」の概念も希薄&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4ca62cdab1361b1e3422be67b19d3669:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4ca62cdab1361b1e3422be67b19d3669:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; な日本では，このような強い調子に出る人や団体はない。
しかし TPP 知財は1国の問題ではなく，かつ今後100年単位で世界に影響を及ぼしうるものだ。&lt;/p&gt;

&lt;p&gt;さて，どうなるやら。&lt;/p&gt;

&lt;h3 id=&#34;追記:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;追記&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1511/25/news078.html&#34;&gt;著作権侵害の非親告罪化には「慎重であるべき」　文芸家協会が声明 - ITmedia ニュース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://internet.watch.impress.co.jp/docs/news/20151125_732191.html&#34;&gt;日本ではパロディー認める判決は出ていない、コミケなど摘発の可能性――TPPによる著作権侵害の非親告罪化になおも懸念、日本文藝家協会が声明 -INTERNET Watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;huaa:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;広島大学天文学研究会プラネタリウム &amp;amp; 天体観望会&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiroshima-u.jp/moto/news/2015-11-13-1057&#34;&gt;広島大学天文学研究会プラネタリウム＆天体観望会を開催します | 広島大学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;わお。
広大のサイトで告知だよ。
偉くなったなぁ，天文研。
私の頃のようなヌルいサークル活動じゃなくなってるのかもな。&lt;/p&gt;

&lt;p&gt;11月20日（金）の回は終わったけど，12月8日（火）の回はこれからなので，興味のある方は是非。
西条おっと東広島キャンパスの夜空はいいですよ。&lt;/p&gt;

&lt;p&gt;私は平日は無理 orz&lt;/p&gt;

&lt;h2 id=&#34;ntpsec:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;NTPsec ベータ版が公開&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ntpsec.org/pressrelease-20151116.html&#34;&gt;NTP Security Project announces public development release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/ntpsec09.html&#34;&gt;Network Time Protocol（NTP）の脆弱性を改善する「NTPsec」、ベータ版が公開 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The goal of the project is to harden against security vulnerabilities and especially against “amplification attacks” that threaten the stability of the entire Internet. The project welcomes the participation of information security researchers, and practices Responsible Disclosure.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.ntpsec.org/pressrelease-20151116.html&#34;&gt;NTP Security Project announces public development release&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;NTP における「増幅攻撃（amplification attacks）」とは2014年に発生した NTP を使った DDoS を指していて&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;というのも、monlistで問い合わせを送ると、そのNTPサーバーが過去に通信したマシン、最大600台分のIPアドレスを返答する。わずか234バイトの問い合わせパケットに対し、帰ってくる応答パケットのサイズは数十倍、数百倍という大きさだ。オープンなNTPサーバーに送信元を偽装したmonlistリクエストを送り付けると、標的には膨大なトラフィックが押し寄せる。&lt;br&gt;
この構図は、2013年のDDoS攻撃に悪用された「DNSリフレクション攻撃」（DNS amp攻撃）と同様だ。ただ、DNSリフレクション攻撃における増幅率が8倍であるのに対し、NTPのmonlistを悪用した増幅攻撃では、19倍から206倍という数字がはじき出せると、CloudFlareは説明している。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1402/12/news140.html&#34;&gt;DNSよりも高い増幅率の「理想的なDDoSツール」：NTP増幅攻撃で“史上最大規模”を上回るDDoS攻撃発生 - ＠IT&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;というものだ。
これから徐々に &lt;a href=&#34;https://www.ntpsec.org/&#34; title=&#34;Welcome to NTPsec&#34;&gt;NTPsec&lt;/a&gt; に置き換わっていくのかな。&lt;/p&gt;

&lt;h2 id=&#34;vscode:4ca62cdab1361b1e3422be67b19d3669&#34;&gt;Visual Studio Code がベータ版に到達&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.msdn.com/b/vscode/archive/2015/11/17/announcing-visual-studio-code-beta.aspx&#34;&gt;Announcing Visual Studio Code Beta - Visual Studio Code - Site Home - MSDN Blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/visual_studio_code_go_pascal.html&#34;&gt;［速報］無償のコードエディタ「Visual Studio Code」が、Go言語/Pascal/Reactなどに対応。ベータ版にも到達。Microsoft Connect(); 2015 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さらに&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.publickey1.jp/blog/15/netwindowsmacos_xlinux.html&#34;&gt;［速報］オープンソース版.NETがリリース候補版に到達。Windows、MacOS X、Linuxで同一の.NETアプリが実行可能に。Microsoft Connect(); 2015 － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forest.impress.co.jp/docs/news/20151119_731485.html&#34;&gt;Microsoft、開発者向けの無償プログラム“Visual Studio Dev Essentials”を発表 - 窓の杜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大盤振る舞い！ まぁでも，残念ながらエディタは &lt;a href=&#34;http://text.baldanders.info/remark/2015/atom-editor/&#34;&gt;ATOM に乗り換えちゃった&lt;/a&gt;ので &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Visual Studio Code - Code Editing. Redefined.&#34;&gt;Visual Studio Code&lt;/a&gt; は当分出番なしかな。
仕事でも使う予定はないし。&lt;/p&gt;

&lt;p&gt;新しい .NET はかなり期待している。
希望としては &lt;a href=&#34;http://gitextensions.github.io/&#34;&gt;Git Extensions&lt;/a&gt; や &lt;a href=&#34;http://keepass.info/&#34;&gt;KeePass&lt;/a&gt; など今まで &lt;a href=&#34;http://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; で動いていたものが新しい .NET に置き換えれるなら私が嬉しい。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:4ca62cdab1361b1e3422be67b19d3669:a&#34;&gt;「所有」の概念が薄いからこそ「公有」や「共有」の概念も希薄だと言えるが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4ca62cdab1361b1e3422be67b19d3669:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
