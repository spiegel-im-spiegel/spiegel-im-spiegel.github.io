<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/">
	<title>text.Baldanders.info</title>
	<link rel="alternate" type="text/html" href="http://text.baldanders.info/" />
	<link rel="self" type="application/atom+xml" href="http://text.baldanders.info/index.xml" />
	<id>tag:text.Baldanders.info,2016-01-20:/</id>
	<updated>2016-01-20T21:31:46+09:00</updated>
	<subtitle>帰ってきた「しっぽのさきっちょ」</subtitle>
	<icon>http://text.baldanders.info//images/avatar.jpg</icon>
	<logo>http://text.baldanders.info//images/avatar.jpg</logo>
	<generator uri="http://gohugo.io/">Hugo 0.15</generator>

	
	<entry>
		<title>人格権と CC-Licenses - cc-licenses</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/cc-licenses/03-moral-rights/" />
		<id>tag:text.Baldanders.info,2016-01-20:/cc-licenses/03-moral-rights/</id>
		<published>2016-01-20T21:31:46+09:00</published>
		<updated>2016-01-20T21:31:46+09:00</updated>
		<summary>前回紹介した「Creative Commons Licenses」の内容を踏まえた上で今回は「著作者人格権」と CC Licenses との関係について解説する。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="cc-licenses" label="cc-licenses" scheme="http://text.baldanders.info/cc-licenses" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/cc-licenses/02-creative-commons-licenses/&#34;&gt;前回紹介した「Creative Commons Licenses」&lt;/a&gt;の内容を踏まえた上で今回は人格権と &lt;a href=&#34;http://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; との関係について解説する。&lt;/p&gt;

&lt;h2 id=&#34;著作者人格権-とは:6963633eb1ea213b04a144eca337a838&#34;&gt;「著作者人格権」とは&lt;/h2&gt;

&lt;p&gt;まずは「著作者人格権」から。&lt;/p&gt;

&lt;p&gt;著作者人格権は&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第18条から第20条にかけて定められている。
すなわち以下の3つの権利の総称である。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;公表権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第18条）&lt;/li&gt;
&lt;li&gt;氏名表示権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第19条）&lt;/li&gt;
&lt;li&gt;同一性保持権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第20条）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また「著作者人格権は、著作者の一身に専属し、譲渡することができない」（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第59条）。
つまり著作者以外の人に譲渡できないし，著作者以外の人がこれを行使することもできない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
また著作者人格権は著作者の死後も機能するとされている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;このうちもっとも強力な権利が「同一性保持権」である。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;著作者は、その著作物及びその題号の同一性を保持する権利を有し、その意に反してこれらの変更、切除その他の改変を受けないものとする。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34;&gt;著作権法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるように著作者は著作物の改変をいつでも禁止することができる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:b&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
このような強い権利は他の国にはない（同一性保持権自体は他の国でも見られるが限定的）。
このため日本の著作権ライセンスの中には，許諾者による「同一性保持権」の不行使を明示しているものもある。&lt;/p&gt;

&lt;h2 id=&#34;その他の-人格権:6963633eb1ea213b04a144eca337a838&#34;&gt;その他の「人格権」&lt;/h2&gt;

&lt;p&gt;著作隣接権のひとつである「実演家の権利」には「実演家の人格権」というのがある。
具体的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;氏名表示権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第90条）&lt;/li&gt;
&lt;li&gt;同一性保持権（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第90条）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2つである。
著作者人格権と同じく一身専属性を持ち譲渡できないし，実演家の死後も機能する（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第101条）。
ただし同一性保持権については&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;実演家は、その実演の同一性を保持する権利を有し、自己の名誉又は声望を害するその実演の変更、切除その他の改変を受けないものとする。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34;&gt;著作権法&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあるとおり「自己の名誉又は声望を害する」場合のみという制限がある。&lt;/p&gt;

&lt;p&gt;著作権ではないが「パブリシティ権」や「プライバシー権」といったものも人格権の一種として挙げられるだろう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:c&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:c&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
著作権法上は問題なくとも，これらの人格権によって著作物が利用できない場合はある，ということは覚えておいたほうがいいと思う。&lt;/p&gt;

&lt;h2 id=&#34;cc-licenses-では-可能なかぎり-人格権は行使されない:6963633eb1ea213b04a144eca337a838&#34;&gt;CC Licenses では（可能なかぎり）人格権は行使されない&lt;/h2&gt;

&lt;p&gt;さて，上述した人格権について &lt;a href=&#34;http://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; はどうしているかというと，許諾範囲を逸脱しない限り許諾者は人格権を行使しないことになっている。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;同一性保持の権利のような著作者人格権は、本パブリック・ライセンスのもとではライセンスされません。パブリシティ権、プライバシー権、および／または他の類似した人格権も同様です。ただし、可能なかぎり、許諾者は、あなたがライセンスされた権利を行使するために必要とされる範囲内で、また、その範囲内でのみ、許諾者の保持する、いかなるそのような権利を放棄し、および／または主張しないことに同意します。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ (Creative Commons) — 表示-継承 4.0 国際&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;人格権の一身専属性を考えればこのような表現になるということだろう。
ただし「可能なかぎり」という条件がついている。&lt;/p&gt;

&lt;p&gt;この点について，以前のバージョンでは比較的明確に書かれていて，たとえば 2.1 日本版では&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;原著作者及び実演家の名誉又は声望を害する方法で原著作物を改作、変形もしくは翻案して生じる著作物は、この利用許諾の目的においては、二次的著作物に含まれない。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/legalcode.ja&#34;&gt;クリエイティブ・コモンズ リーガル・コード — 表示-継承 2.1 日本版&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;とあり，原著作者の名誉・声望を害する改変は二次的著作物に含めない，としている。
また 3.0 Unported でも同様に&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;Except as otherwise agreed in writing by the Licensor or as may be otherwise permitted by applicable law, if You Reproduce, Distribute or Publicly Perform the Work either by itself or as part of any Adaptations or Collections, You must not distort, mutilate, modify or take other derogatory action in relation to the Work which would be prejudicial to the Original Author&#39;s honor or reputation.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/legalcode&#34;&gt;Creative Commons Legal Code — Attribution-ShareAlike 3.0 Unported&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;となっている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;この辺の文言が 4.0 International でなくなった理由はよく分からないが，“&lt;a href=&#34;https://creativecommons.org/Version4/&#34;&gt;What&amp;rsquo;s New in 4.0&lt;/a&gt;” には&lt;/p&gt;

&lt;figure lang=&#34;en&#34;&gt;
&lt;blockquote&gt;
&lt;q&gt;The 4.0 license suite uniformly and explicitly waives moral rights held by the licensor where possible to the limited extent necessary to enable reuse of the content in the manner intended by the license. Publicity, privacy, and personality rights held by the licensor are expressly waived to the same limited extent. While many understand these rights to be waived when held by the licensor in 3.0 and earlier versions, version 4.0’s treatment makes the intended outcome clear.&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://creativecommons.org/Version4/&#34;&gt;What&amp;#39;s New in 4.0 - Creative Commons&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;との記述があり，あえて「名誉・声望を害する改変」部分の記述を削った可能性もある&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:d&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&#34;キャラクタの権利:6963633eb1ea213b04a144eca337a838&#34;&gt;キャラクタの権利&lt;/h3&gt;

&lt;p&gt;キャラクタやキャラクタの名前の利用については著作権ではなく商標権（工業デザインの場合は意匠権）で保護されることが多い&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:e&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。
この場合， &lt;a href=&#34;http://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; は商標権や意匠権についてはライセンスしないので，個別に許可を得る必要がある。&lt;/p&gt;

&lt;p&gt;実在の人物やその人物の延長上のキャラクタ（「デーモン小暮閣下」など）に対しては「パブリシティ権」が適用される。
パブリシティ権は肖像権の一種と考えられ「氏名・肖像から生じる経済的利益ないし価値を排他的に支配する権利&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;」と定義されている&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;。
&lt;a href=&#34;http://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; では，これまで述べた通り，パブリシティ権についてもライセンスしないが「可能なかぎり」行使しない，となっている。&lt;/p&gt;

&lt;h2 id=&#34;参考になる-かもしれない-web-ページ:6963633eb1ea213b04a144eca337a838&#34;&gt;参考になる（かもしれない） Web ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://creativecommons.jp/2006/11/15/ccplv3-discussion/&#34;&gt;【CCPLv3.0】著作者人格権（同一性保持権）に関する議論 | クリエイティブ・コモンズ・ジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://creativecommons.org/Version4/&#34;&gt;What&amp;rsquo;s New in 4.0 - Creative Commons - Creative Commons&lt;/a&gt; （&lt;a href=&#34;http://qiita.com/nyampire/items/c03904bd27bd8812aad3&#34;&gt;日本語参考訳&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:a&#34;&gt;近年はあまり見なくなったが， Web サービスの中にはユーザのコンテンツの著作権をサービス・プロバイダに譲渡し著作者人格権の不行使を要求するものがある。著作者人格権は譲渡できないため，著作者人格権の不行使も無効になると思われる。ただし個別契約の中で著作者人格権の不行使を約束する場合はあり得る。ちなみに「職務著作（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第15条）」の場合は所属する法人が著作者となるため，個々人に著作者人格権は発生しない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;「著作物を公衆に提供し、又は提示する者は、その著作物の著作者が存しなくなつた後においても、著作者が存しているとしたならばその著作者人格権の侵害となるべき行為をしてはならない」（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第60条）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:a2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:b&#34;&gt;ただしこれにはいくつか例外がある。学校教育の目的上やむを得ない場合，建築物の模様替えやリフォーム，プログラムの不具合修正や改善，などである。ちなみに「著作権の制限」（&lt;a href=&#34;http://law.e-gov.go.jp/htmldata/S45/S45HO048.html&#34; title=&#34;著作権法&#34;&gt;著作権法&lt;/a&gt; 第30-50条）は著作者人格権には及ばないのでご注意を。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:c&#34;&gt;ただし日本には明示的な「プライバシー権」は存在しない。「個人情報保護法」は（人格権ではなく）個人にまつわる&lt;strong&gt;情報&lt;/strong&gt;の取り扱いについて定めた法律である。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:c&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;&lt;a href=&#34;http://creativecommons.org/licenses/&#34; title=&#34;ライセンスについて - Creative Commons&#34;&gt;CC Licenses&lt;/a&gt; 3.0 では著作者人格権に関する議論が国際的にも行われたようだ。くわしくは「&lt;a href=&#34;http://creativecommons.jp/2006/11/15/ccplv3-discussion/&#34;&gt;著作者人格権（同一性保持権）に関する議論&lt;/a&gt;」が参考になる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:c2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:d&#34;&gt;この辺は GPL などの他ライセンスとの互換性を考える上で重要なポイントでもある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:e&#34;&gt;基本的にキャラクタや名前には著作権はない。このため防衛のためにキャラクタやキャラクタの名前を商標登録することが多いらしい。ただし創作上の文脈としてキャラクタや名前が書（描）かれている場合は著作物の一部として認められる場合がある。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;&lt;span&gt;&lt;a href=&#34;http://www.courts.go.jp/hanrei/pdf/A730EBEA9CA60D6249256C7F0023A16E.pdf&#34;&gt;「ダービースタリオン事件」判決文&lt;sup&gt;&lt;i class=&#34;fa fa-file-pdf-o&#34;&gt;&lt;/i&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;より。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:ds&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;ただし作品上の架空のキャラクタや無機物やペット等にはパブリシティ権は適用されない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6963633eb1ea213b04a144eca337a838:pr1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>再帰呼び出しと関数テーブル - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/recursive-call-and-function-table/" />
		<id>tag:text.Baldanders.info,2016-01-18:/golang/recursive-call-and-function-table/</id>
		<published>2016-01-18T22:59:07+09:00</published>
		<updated>2016-01-19T21:50:44+09:00</updated>
		<summary>今回は再帰呼び出しの話。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;今回は再帰呼び出しの話。&lt;/p&gt;

&lt;p&gt;再帰呼び出しのサンプルとして典型的なのは&lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number&#34; title=&#34;Fibonacci number - Wikipedia, the free encyclopedia&#34;&gt;フィボナッチ数&lt;/a&gt;かな。
&lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number&#34; title=&#34;Fibonacci number - Wikipedia, the free encyclopedia&#34;&gt;フィボナッチ数&lt;/a&gt;の定義を愚直にコードにするとこんな感じになる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func fibonacciNumber(n int) int {
	switch n {
	case 0:
		return 0
	case 1:
		return 1
	default:
		return fibonacciNumber(n-2) + fibonacciNumber(n-1)
	}
}

type ff func(int) int

var fib = fibonacciNumber

func main() {
	fmt.Println(fibonacciNumber(40))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般に手続き型言語は再帰呼び出しに弱いと言われている（関数型のほうが有利）。
特に &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は &lt;a href=&#34;http://golang.org/ref/spec#Go_statements&#34;&gt;goroutine&lt;/a&gt; に最適化を割り振っている関係で，関数呼び出しやその戻り&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:90181bd94c22568ae136c2a2c4e81a10:r&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:90181bd94c22568ae136c2a2c4e81a10:r&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; のパフォーマンスが冷遇されているようだ。
したがって，再帰呼び出し部分のパフォーマンスを改善したければ，なるべく呼び出し回数を減らすようにするのがコツである。
たとえば上の&lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number&#34; title=&#34;Fibonacci number - Wikipedia, the free encyclopedia&#34;&gt;フィボナッチ数&lt;/a&gt;の場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

var fibonacciNumbers = make(map[int]int)

func fibonacciNumber(n int) int {
	switch n {
	case 0:
		return 0
	case 1:
		return 1
	default:
		if fn, ok := fibonacciNumbers[n]; ok {
			return fn
		}
		fn := fibonacciNumber(n-2) + fibonacciNumber(n-1)
		fibonacciNumbers[n] = fn
		return fn
	}
}

func main() {
	fmt.Println(fibonacciNumber(40))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じに計算結果を保持っておくことでかなり改善する。&lt;/p&gt;

&lt;p&gt;ところで，再帰呼び出しで怖いのが無限呼び出しに陥るパターンである。
&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では関数値（function value）を介す場合であれば再帰呼び出しを禁止する。&lt;/p&gt;

&lt;p&gt;たとえば先ほどのコードを以下のように書き換えてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

var fibonacciNumbers = make(map[int]int)

func fibonacciNumber(n int) int {
	switch n {
	case 0:
		return 0
	case 1:
		return 1
	default:
		if fn, ok := fibonacciNumbers[n]; ok {
			return fn
		}
		fn := fib(n-2) + fib(n-1)
		fibonacciNumbers[n] = fn
		return fn
	}
}

type ff func(int) int

var fib ff = fibonacciNumber

func main() {
	fmt.Println(fib(40))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fibonacciNumber()&lt;/code&gt; を &lt;code&gt;fib()&lt;/code&gt; で別名定義しているだけだが，これを実行しようとすると以下のコンパイルエラーになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prog.go:25: initialization loop:
	prog.go:25 fib refers to
	prog.go:7 fibonacciNumber refers to
	prog.go:25 fib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関数値 &lt;code&gt;fib&lt;/code&gt; の部分でエラーになっている点に注目してほしい。&lt;/p&gt;

&lt;p&gt;本当に「ついうっかり」再帰呼び出しになってしまう場合はエラーではじいてもらってありがたいのだが，そうでない場合もある。
あまり例示がうまくなくて申し訳ないのだが，以下の簡単なステート・マシンを考えてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func f0(evt int) int {
	fmt.Println(&amp;quot;processing f0&amp;quot;)
	return 1
}

func f1(evt int) int {
	fmt.Println(&amp;quot;processing f1&amp;quot;)
	return 2
}

func f2(evt int) int {
	fmt.Println(&amp;quot;processing f2&amp;quot;)
	return 3
}

func f3(evt int) int {
	fmt.Println(&amp;quot;processing f3&amp;quot;)
	return 0
}

type fn func(int) int

var fs = []fn{
	f0,
	f1,
	f2,
	f3,
}

func StateMachin(stat, evt int) int {
	return fs[stat](evt)
}

func main() {
	s := 0
	for e := 0; e &amp;lt; 10; e++ {
		s = StateMachin(s, e)
		if s == 0 {
			break
		}
	}
	fmt.Println(&amp;quot;end&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fs&lt;/code&gt; が関数テーブルになっていて，状態 &lt;code&gt;s&lt;/code&gt; とイベント &lt;code&gt;e&lt;/code&gt; に対する処理 &lt;code&gt;fs[s](e)&lt;/code&gt; を呼び出して処理後の状態を返してもらう。
一応 &lt;code&gt;StateMachine()&lt;/code&gt; 関数で詳細を隠蔽しているつもりである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:90181bd94c22568ae136c2a2c4e81a10:b&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:90181bd94c22568ae136c2a2c4e81a10:b&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;ここで &lt;code&gt;StateMachine(3, evt)&lt;/code&gt; の処理に続けて &lt;code&gt;StateMachine(1, evt)&lt;/code&gt; の処理がしたくなり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func f3(evt int) int {
    fmt.Println(&amp;quot;processing f3&amp;quot;)
    return StateMachin(1, evt)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと書いたらどうなるか。
もちろんこれもコンパイルエラーになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;prog.go:32: initialization loop:
	prog.go:32 fs refers to
	prog.go:20 f3 refers to
	prog.go:34 StateMachin refers to
	prog.go:32 fs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし実際には &lt;code&gt;f3&lt;/code&gt; を無限に呼び出しているわけではないので，このコンパイルエラーでは困ってしまう&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:90181bd94c22568ae136c2a2c4e81a10:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:90181bd94c22568ae136c2a2c4e81a10:a&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
このエラーを回避するには関数テーブル &lt;code&gt;fs&lt;/code&gt; を介さなければよい。
たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = []fn{
	f0,
	f1,
	f2,
	//f3,
}

func StateMachin(stat, evt int) int {
	if stat == 3 {
		return f3(evt)
	}
	return fs[stat](evt)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば，めでたく &lt;code&gt;f1&lt;/code&gt; → &lt;code&gt;f2&lt;/code&gt; → &lt;code&gt;f3&lt;/code&gt; → &lt;code&gt;f1&lt;/code&gt; とエンドレスにつながる。
ちなみにここでうっかり&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func f3(evt int) int {
	fmt.Println(&amp;quot;processing f3&amp;quot;)
	return StateMachin(3, evt)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと書くと，コンパイルエラーにもならず無限呼び出しが発生する。&lt;/p&gt;

&lt;p&gt;再帰呼び出しは計画的に。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:90181bd94c22568ae136c2a2c4e81a10&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ymotongpoo.hatenablog.com/entry/2015/02/23/165341&#34;&gt;Goで再帰使うと遅くなりますがそれが何だ - YAMAGUCHI::weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/cc0f29441b16d63472ed&#34;&gt;.\hoge.go:7: initialization loop - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:90181bd94c22568ae136c2a2c4e81a10:r&#34;&gt;再帰呼び出しが「末尾呼び出し（tail call）」の場合は，戻りの最適化でパフォーマンスの向上が期待できるが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;のコンパイラはこの辺の最適化も行っていないらしい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:90181bd94c22568ae136c2a2c4e81a10:r&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:90181bd94c22568ae136c2a2c4e81a10:b&#34;&gt;実際には別パッケージにしてちゃんとクラス設計すべきだろうけど色々端折っている。ゴメンペコン。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:90181bd94c22568ae136c2a2c4e81a10:b&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:90181bd94c22568ae136c2a2c4e81a10:a&#34;&gt;このコードに限れば &lt;code&gt;StateMachine(1, evt)&lt;/code&gt; ではなく &lt;code&gt;f1(evt)&lt;/code&gt; を呼び出せば済む話なのでこれは言いがかりであるが，「話の都合」ということで軽く流していただけるとありがたい。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:90181bd94c22568ae136c2a2c4e81a10:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>週末スペシャル： Go コンパイラのセキュリティアップデートがあるらしい - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/09-stories/" />
		<id>tag:text.Baldanders.info,2016-01-09:/remark/2016/01/09-stories/</id>
		<published>2016-01-09T18:59:13+09:00</published>
		<updated>2016-01-09T18:59:13+09:00</updated>
		<summary>Go コンパイラのセキュリティアップデートがあるらしい / GnuPG 1.4.20 released / GitLab.com にアカウントを作った / くそな「中間者デバイス」が SHA-1 廃止の邪魔をする</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;年末忙しくて書き損ねてるネタを回収中。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#go:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;Go コンパイラのセキュリティアップデートがあるらしい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gpg:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GnuPG 1.4.20 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gl:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GitLab.com にアカウントを作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mitm:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;くそな「中間者デバイス」が SHA-1 廃止の邪魔をする&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;go:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;Go コンパイラのセキュリティアップデートがあるらしい&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-announce/MLaPAPFlCNY&#34;&gt;[security] Go 1.5.3 pre-announcement - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳細は示されてないが13日（日本時間だと14日かな）を待つことにしよう。
来週は月例のセキュリティ更新週間である。&lt;/p&gt;

&lt;h2 id=&#34;gpg:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GnuPG 1.4.20 released&lt;/h2&gt;

&lt;p&gt;昨年の話で申し訳ないが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-announce/2015q4/000382.html&#34;&gt;[Announce] GnuPG 1.4.20 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;セキュリティアップデートではないが既定の動作が変わるようである。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reject signatures made using the MD5 hash algorithm unless the new option &amp;ndash;allow-weak-digest-algos or &amp;ndash;pgp2 are given.&lt;/li&gt;
&lt;li&gt;New option &amp;ndash;weak-digest to specify hash algorithms which should be considered weak.&lt;/li&gt;
&lt;li&gt;Changed default cipher for symmetric-only encryption to AES-128.&lt;/li&gt;
&lt;li&gt;Fix for DoS when importing certain garbled secret keys.&lt;/li&gt;
&lt;li&gt;Improved error reporting for secret subkey w/o corresponding public subkey.&lt;/li&gt;
&lt;li&gt;Improved error reporting in decryption due to wrong algorithm.&lt;/li&gt;
&lt;li&gt;Fix cluttering of stdout with trustdb info in double verbose mode.&lt;/li&gt;
&lt;li&gt;Pass a DBUS envvar to gpg-agent for use by gnome-keyring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GnuPG というか OpenPGP が後生大事に MD5 を残しているのは過去の資産への対応のためであろう。&lt;/p&gt;

&lt;p&gt;ちなみに PGP の最初のリリースは1991年で，実に四半世紀も前である。
作者の &lt;a href=&#34;https://www.philzimmermann.com/&#34;&gt;Phil Zimmermann&lt;/a&gt; は当時，米国内反核運動の活動家であった。
更に暗号技術に対する政治的圧力は現在と比較にならないほど厳しく，米国は長いあいだ彼をマークし続けた。
PGP の広まり方や改良のプロセスは実に「インターネット的」であった。
詳しくは Steven Levy の『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化（Crypto）&lt;/a&gt;』をどうぞ。&lt;/p&gt;

&lt;p&gt;あれからネットも随分変わったが，当時政府が何をしたか企業は何をしたか「暗号アナーキスト」たちはどうしたか。
現在のネットは先人の努力により「勝ち取った」ものであることを私たちは絶対に忘れてはならない。&lt;/p&gt;

&lt;p&gt;自由そのものは自由ではない。
勝ち取ったものはいつか奪われる。
奪われたくなければ勝ち続けなければならない。&lt;/p&gt;

&lt;h2 id=&#34;gl:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;GitLab.com にアカウントを作った&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masakura/items/e679c094e8afea9a4879&#34;&gt;GitLab/GitLab.com 勉強会 (2015/12/09) レポート - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ見て &lt;a href=&#34;https://gitlab.com/&#34; title=&#34;GitLab&#34;&gt;GitLab.com&lt;/a&gt; にアカウントを作ってみた。
とりあえず中身は空っぽ。
公開リポジトリを &lt;a href=&#34;https://gitlab.com/&#34; title=&#34;GitLab&#34;&gt;GitLab.com&lt;/a&gt; に作るメリットはない気もするが，容量が 10GB/repos あるのはありがたい。&lt;/p&gt;

&lt;p&gt;まぁ，どう使うかはこれからおいおい考える。
今年あたり，どっかにサーバでも借りて私用リポジトリ・サービスを立ち上げてみたいのだが，これもおいおい。&lt;/p&gt;

&lt;h2 id=&#34;mitm:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;くそな「中間者デバイス」が SHA-1 廃止の邪魔をする&lt;/h2&gt;

&lt;p&gt;いやもうこれは笑うところだよね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35075954/&#34;&gt;「Firefox」、SHA-1証明書のサポートを一時的に復活&amp;ndash;HTTPSサイトのアクセスに問題 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/enterprise/articles/1601/08/news069.html&#34;&gt;FirefoxのSHA-1廃止で一部ユーザーに障害、サポート復活 - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;Barnes氏は次のように説明している。「ユーザーがHTTPSサイトへの接続を試みると、中間者デバイスがFirefoxに対し、サーバの本物の証明書でなく新規のSHA-1証明書を送信する」&lt;br&gt;
「Firefoxは新規のSHA-1証明書を拒否するため、サーバに接続できない」（同氏）&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://japan.cnet.com/news/service/35075954/&#34;&gt;「Firefox」、SHA-1証明書のサポートを一時的に復活--HTTPSサイトのアクセスに問題&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;「&lt;a href=&#34;http://text.baldanders.info/remark/2015/problem-of-sha1-collision/&#34;&gt;SHA-1 衝突問題： 廃止の前倒し&lt;/a&gt;」でも紹介したが， SHA-1 の危殆化はかなり現実的な問題になってきている。
いますぐどうこうというわけではないが，これ以上の先延ばしは出来ない状態である。
しかし CA やブラウザが頑張っても「中間者デバイス」なる覗き屋が邪魔をする。&lt;/p&gt;

&lt;p&gt;やはりセキュリティ製品が暗号通信に対して「中間者攻撃」を仕掛けるのは筋が悪すぎると思うのだが，何とかならないものかねぇ。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:f5be1a5c24e490c7dcaaa2d9d26e48a7&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51ZRZ62WKCL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4314009071/baldandersinf-22/&#34;&gt;暗号化 プライバシーを救った反乱者たち&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;スティーブン・レビー 斉藤 隆央 &lt;/dd&gt;&lt;dd&gt;紀伊國屋書店 2002-02-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/487593100X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/487593100X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4484111160/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4484111160.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;グーグル ネット覇者の真実 追われる立場から追う立場へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/410215972X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/410215972X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159738/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159738.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読 下巻 (新潮文庫 シ 37-3)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;20世紀末，暗号技術の世界で何があったのか。知りたかったらこちらを読むべし！&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-03-09&#34;&gt;2015/03/09&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Blockchain と Smart Contract - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/blockchain-and-smart-contract/" />
		<id>tag:text.Baldanders.info,2016-01-07:/remark/2016/01/blockchain-and-smart-contract/</id>
		<published>2016-01-07T20:50:45+09:00</published>
		<updated>2016-01-18T12:18:27+09:00</updated>
		<summary>Bitcoin は「誰が」取り引きしているかについて気にしないが，もっと広く smart contract を考えるのなら何らかの形で「誰が」を保証しなければならないし，そのための基盤（infrastructure）が必要となる，と思うのだがどうだろう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;年末忙しくて書き損ねてるネタを回収中。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20151223/blockchain&#34;&gt;「YAMDAS現更新履歴」の記事&lt;/a&gt;より。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115869/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp1&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中1話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115873/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp3&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中3話目） | コインテレグラフジャパン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昨年この記事を斜め読みした時は気づかなかったが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sakura.ad.jp/press/2015/1216_mijin_cloud_chain/&#34;&gt;さくらインターネットとテックビューロ、ブロックチェーンの実証実験環境「mijinクラウドチェーンβ」を金融機関やITエンジニア向けに無料提供～本日より申込受付を開始し、2016年1月から順次提供～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sakura.ad.jp/press/2016/0107_demonstration_platform/&#34;&gt;「さくらのクラウド」、「ASTERIA WARP」、「mijin」の3社製品･サービスによるプライベート･ブロックチェーン＆IoT実証実験プラットフォームの無償提供開始について＜無償提供期間：2016年1月18日～6月30日＞&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あぁ，これって広告記事だったのか。
感度低いなぁ，私（笑）&lt;/p&gt;

&lt;p&gt;上の記事からいくつか気になる部分を抜き出しておく。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;しかし、ブロックチェーン技術の登場により、既存の様々なセキュリティや整合性といった基準を妥協することなく、トランザクションあたりのコストが限りなくゼロに近づいていきます。そこで新しい常識として、「リアルタイムセトルメント」の概念が現実となります。そして締めの集計概念も、そもそもトランザクションに残高（バランス）の概念を持つブロックチェーンの基本機能でまかなえます。&lt;br&gt;
ビジネス慣習が締め処理からリアルタイム決済へパラダイムシフトすることにより、カウンターパーティーリスクも最小限となるだけではなく、既存の様々な頭痛の種が払拭されるでしょう。バッチ処理がされていたものに関してもリアルタイム処理へと移行し、真のリアルタイム24時間サービスの提供など、一般消費者もそこから大きな恩恵を得るに違いありません。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目）&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;現在主流のブロックチェーン技術は、処理の負荷を分散することが主目的ではないという点が分散型DBとは大きく違います。あくまでも主目的は物理的分散によるダウンタイムの払拭です。我々はデータ自体の分散や処理の分散の研究も進めておりますが、現在では全てのノードが同じデータを保有し、同じ仕事をすることができます。従って一般的なブロックチェーンの世界では、台数の増加がパフォーマンスの向上に直結しません。よって、「最低何台必要ですか？」の問いに対する答えは、「1台」となります。&lt;br&gt;
現在のブロックチェーン技術が、最新の分散型DBにデータベースとしてのスループット性能では勝つことはできません。ブロックチェーンが持つ大きな利点は、現在の金融システム等で必要とされる処理量であれば、データの整合性を保ったまま、物理的分散によりゼロダウンタイムを実現し、かつそこに同時に劇的なコスト削減をもたらすということに集約されます。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://jp.cointelegraph.com/news/115872/what-is-the-reason-that-a-world-financial-institution-invests-in-a-block-chain-technology-as-a-favorite-of-the-fin-technical-center-all-togetherjp2&#34;&gt;世界の金融機関がフィンテックの本命としてブロックチェーン技術にこぞって投資する理由とは？（全3話中2話目）&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Blockchain の特徴は完全性と可用性にある，ということのようだ。
「&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;東雲銀子さん&lt;/a&gt;」みたいな人は要らなくなるかもしれない。&lt;/p&gt;

&lt;p&gt;ちなみに昨年までの私の Bitcoin や Blockchain に関する理解は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000827.shtml&#34;&gt;そろそろ Blockchain について勉強を始めるか — Baldanders.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このときのまとめをもう一度整理して再掲載しておくと&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Blockchain は「鎖」で繋がれた追記型データベース。「鎖」の途中のデータは取り消しも変更（改竄）もできない&lt;/li&gt;
&lt;li&gt;Blockchain の追記プロセスには不正の余地がないよう何らかの仕掛けが必要。 Bitcoin の場合は「作業証明（proof-of-work）」がそれにあたる&lt;/li&gt;
&lt;li&gt;Blockchain は P2P による分散型かつ fault tolerant（過失を許容する）なシステムだが最終的には fork も merge も許容しない&lt;/li&gt;
&lt;li&gt;Bitcoin のアドレス（実体は公開鍵）の帰属先について Bitcoin/Blockchain は関知しない。Bitcoin が気にするのは Blockchain に記載されるアドレスの一貫性と無矛盾性である。アドレスの証明が必要な場合は外部の PKI を利用するか新たに組み込む必要がある&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;私の関心領域は「信用モデル（trust model）」にあるため，このようなまとめになっている。
Bitcoin は「誰が」取り引きしているかについて気にしない&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; が，もっと広く smart contract を考えるのなら何らかの形で「誰が」を保証しなければならないし，そのための基盤（infrastructure）が必要となる，と思うのだがどうだろう。&lt;/p&gt;

&lt;p&gt;私は Bitcoin そのものへの関心が薄いのだが，これは地方から見て Bitcoin がアベノミクスのごとき「彼岸」の話であることと，いわゆる FinTech（Financial Technology） なるバズワードは「畑違い」だから。
でも Blockchain 自身は FinTech 分野におさまらない可能性を持っていると思う。
ので，今後も情報を追いかけていくつもりである。&lt;/p&gt;

&lt;h2 id=&#34;参考ページ:0c973b9c2f93e7746db5aec1dc8b68cd&#34;&gt;参考ページ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jp.techcrunch.com/2015/03/31/bitcoin-essay/&#34;&gt;誰も教えてくれないけれど、これを読めば分かるビットコインの仕組みと可能性 | TechCrunch Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.boj.or.jp/research/wps_rev/rev_2015/rev15j13.htm/&#34;&gt;（日銀レビュー）「デジタル通貨」の特徴と国際的な議論 ：日本銀行 Bank of Japan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hshimo/items/093f40b856ba2436fbba&#34;&gt;スマートコントラクトとは何か? Smart Contractsの言葉の定義 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cryptocoin.hatenablog.com/entry/2015/07/22/001500&#34;&gt;Smart Contract - 暗号通貨のお勉強　～Bitcoin、Rippleを中心に～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/tatarou1986/items/9d994896795a4871dc37&#34;&gt;BitCoinとBlockChainにまつわる誤解ーそんなことはできない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考図書:0c973b9c2f93e7746db5aec1dc8b68cd&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51t6yHHVwEL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B015643CPE/baldandersinf-22/&#34;&gt;暗号技術入門 第3版　秘密の国のアリス&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2015-08-25&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0148FQNVC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0148FQNVC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;自作エミュレータで学ぶx86アーキテクチャ　コンピュータが動く仕組みを徹底理解！&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLJM/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLJM.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/丸い三角関数&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00Y9EYOIW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00Y9EYOIW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/微分を追いかけて&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B012BYBTZC/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B012BYBTZC.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;情報セキュリティ白書2015: サイバーセキュリティ新時代：あらゆる変化へ柔軟な対応を&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W6NCLL0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00W6NCLL0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;数学ガールの秘密ノート/数列の広場&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;SHA-3 や Bitcoin/Blockchain など新しい知見や技術要素を大幅追加。暗号技術を使うだけならこれ1冊でとりあえず無問題。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-20&#34;&gt;2015-09-20&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W1BX3N2/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51aobp3mndL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00W1BX3N2/baldandersinf-22/&#34;&gt;アンダーグラウンド・マーケット (朝日新聞出版)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;藤井太洋 &lt;/dd&gt;&lt;dd&gt;朝日新聞出版 2015-03-20&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00V7Y7DUS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00V7Y7DUS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;ビッグデータ・コネクト (文春文庫)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I3W45AS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I3W45AS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;オービタル・クラウド&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00CHIFA1M/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00CHIFA1M.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Gene Mapper -full build-&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B019FV4BGI/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B019FV4BGI.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天冥の標Ⅸ　PART1　ヒトであるヒトとないヒトと (ハヤカワ文庫JA)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B019FV4BGS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B019FV4BGS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;中継ステーション〔新訳版〕 (ハヤカワ文庫SF)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;デジタル通貨ならこれかな。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-07&#34;&gt;2016-01-07&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51d7PAEntoL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00ORBY3PQ/baldandersinf-22/&#34;&gt;銀子の窓口（１） (バンブーコミックス 4コマセレクション)&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;唐草ミチル &lt;/dd&gt;&lt;dd&gt;竹書房 2014-10-27&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0185M2QAQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0185M2QAQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;秘書の仕事じゃありません　２巻 (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0197POLV2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0197POLV2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;軍神ちゃんとよばないで　２巻 (まんがタイムコミックス)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B018K0HAIQ/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B018K0HAIQ.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;私設花野女子怪館（２） (バンブーコミックス MOMOセレクション)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B013FVA8KW/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B013FVA8KW.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;腹黒舞子さんとの京生活（２） (バンブーコミックス 4コマセレクション)&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B017XKJD84/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B017XKJD84.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;うしろのご先祖さま（２） (バンブーコミックス 4コマセレクション)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;金融界のクール・ビューティ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-07&#34;&gt;2016-01-07&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;これは匿名とは異なる。 Bitcoin の元帳である Blockchain は同期されたコピーを誰でも閲覧でき，同じ Bitcoin アドレスを使い続けるならそのアドレスに対する取引履歴を抽出することもできる。アドレスや取引履歴をもとに対象を絞り込むのは面倒だが不可能ではない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0c973b9c2f93e7746db5aec1dc8b68cd:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>ボットネット・テイクダウンと割れ窓理論 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/broken-windows-theory/" />
		<id>tag:text.Baldanders.info,2016-01-06:/remark/2016/01/broken-windows-theory/</id>
		<published>2016-01-06T21:04:43+09:00</published>
		<updated>2016-01-06T21:04:43+09:00</updated>
		<summary>結局これは他の犯罪と同じで，「割れ窓」をせっせと補修して回るだけではきりがなく，犯罪を起こす「社会の物質的条件」を変えていくことこそが本命なのである。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;「&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E7%AE%A1%E5%AD%90&#34;&gt;管子&lt;/a&gt;」の中の有名な言葉に「倉廩満ちて礼節を知り，衣食足りて栄辱を知る」というのがある。
いわゆる「割れ窓理論（broken windows theory）」は，これと比較すると因果が逆であり，全く以って的外れである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3f46fb39de5d548520d8e2de8805aa77:bw&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3f46fb39de5d548520d8e2de8805aa77:bw&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
メリケンのインテリよりも古代人の言葉のほうが洞察が深いというのはなかなか皮肉が効いている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50756643.html&#34;&gt;エフセキュアブログ : Dridexの解体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50757427.html&#34;&gt;エフセキュアブログ : ボットネットテイクダウン狂想曲&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「ボットネット・テイクダウン（botnet take down）」とは，詐欺等の犯罪やサイバー攻撃の温床となっている&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%9C%E3%83%83%E3%83%88%E3%83%8D%E3%83%83%E3%83%88&#34;&gt;ボットネット&lt;/a&gt;の壊滅を目標として各国警察やセキュリティ企業などを中心に行われている活動を指す。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;本作戦は、関連サーバを押収し、当該ネットワークの管理者を起訴するとともに、より多くの感染端末を特定し、プロバイダ等を通じて感染端末の利用者に対して不正プログラムの駆除を促すことにより、感染端末を減少させることとしている。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;https://www.npa.go.jp/cyber/goz/&#34;&gt;国際的なボットネットのテイクダウン作戦&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この作戦は、インターネットバンキングに係る不正送金事犯に使用されているとみられる不正プログラム「Game Over Zeus」（GOZ）のネットワークを崩壊させる“ボットネットのテイクダウン作戦”と呼ばれています。FBI、ユーロポールが中心となり、日本の警察を含む協力国の法執行機関が連携して、関連サーバを押収し、当該ネットワークの管理者を起訴しています。さらには、感染端末を特定し、プロバイダ等を通じてユーザに駆除を促すことにより、感染端末を減少させることも行っています。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://www.is702.jp/news/1591/partner/101_g/&#34;&gt;警察による国際的ボットネットの壊滅作戦&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;GOZ のテイクダウン作戦は有名だが，これ以外のボットネットについても順次テイクダウンが行われている。
しかし実際の効果はまちまちで場当たり的な印象がぬぐえず，この点が「割れ窓理論」が引き合いに出される理由なようだ。&lt;/p&gt;

&lt;p&gt;テイクダウン作戦のようなやり方は「電撃戦」としては効果があるかもれないが，長期的に継続しても効果が薄くなるだけのように思う。
むしろテイクダウン作戦の長期化はコストの浪費を招き，そのことが攻撃者に意味を与える（テロと同じ）。
その辺が分からないほど警察やセキュリティ企業は馬鹿ではないだろう。
しかし他にもっと効果的な方法がないのだから（今のところは）続けるしかないというのが現状かもしれない。&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;それでも私個人的にはボットネットのテイクダウンに賛成派だったりします。賛成というのは、テイクダウンをやれば万事解決という意味ではなく、テイクダウンもボットネット一掃作戦の一部として有効だという意味です。実際、テイクダウンをきっかけとして捜査が進展することはよくあります。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://blog.f-secure.jp/archives/50757427.html&#34;&gt;ボットネットテイクダウン狂想曲&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;結局これは他の犯罪と同じで，「割れ窓」をせっせと補修して回るだけではきりがなく，犯罪を起こす「社会の物質的条件」を変えていくことこそが本命なのである。
もっとも，そこまでくれば警察の仕事というより政治家の仕事なのだが。
いや，経済学的センスのない日本の政治家には無理かな（笑）&lt;/p&gt;

&lt;h2 id=&#34;参考文献:3f46fb39de5d548520d8e2de8805aa77&#34;&gt;参考文献&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/417iD4x5N%2BL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会―後期近代における犯罪・雇用・差異&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ジョック ヤング Jock Young &lt;/dd&gt;&lt;dd&gt;洛北出版 2007-03&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764331/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764331.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;後期近代の眩暈―排除から過剰包摂へ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4255008515/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4255008515.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;断片的なものの社会学&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4796700439/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4796700439.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;スティグマの社会学―烙印を押されたアイデンティティ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4791764242/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4791764242.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新しい貧困 労働消費主義ニュープア&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4062881357/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4062881357.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;弱者の居場所がない社会――貧困・格差と社会的包摂 (講談社現代新書)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;「割れ窓理論」についても言及あり。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-09-15&#34;&gt;2015-09-15&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283100/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51-pZ52JsUL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4822283100/baldandersinf-22/&#34;&gt;セキュリティはなぜやぶられたのか&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;ブルース・シュナイアー 井口 耕二 &lt;/dd&gt;&lt;dd&gt;日経BP社 2007-02-15&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4881359967/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4881359967.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号の秘密とウソ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4797350997/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4797350997.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;新版暗号技術入門 秘密の国のアリス&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4594070507/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4594070507.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;チャイナ・ハッカーズ&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4105393022/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4105393022.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;暗号解読―ロゼッタストーンから量子暗号まで&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4102159746/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4102159746.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;宇宙創成〈上〉 (新潮文庫)&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34; &gt;日本語のタイトルはアレだが中身は名著。とりあえず読んどきなはれ。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#34;#maker&#34; class=&#34;reviewer&#34;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2014-09-14&#34;&gt;2014/09/14&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34;&gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:3f46fb39de5d548520d8e2de8805aa77:bw&#34;&gt;「割れ窓理論」では米国ニューヨーク市警の事例が有名だろう。1993年から1996年にかけてニューヨークの犯罪発生率が 36% も減少した。しかし当時の警視総監は後の講演で，当時のニューヨークで「ゼロ・トレランス政策」は実施されていなかったと証言した。また当時の米国の主要都市の犯罪発生率は，犯罪対策の有無や警察体制に関わらず，全体的に減少傾向にあった。「ゼロ・トレランス政策とは、大量の人々が周縁に追いやられ、貧困にあえぎ、抑圧されるような社会をつくりだす排除の過程の一部をなすものであり、さらにいえば、それはたんなる保険統計的な処理にすぎないもので、司法というより公共衛生と呼ぶべき政策である」（『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4903127044/baldandersinf-22/&#34;&gt;排除型社会&lt;/a&gt;』より）。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3f46fb39de5d548520d8e2de8805aa77:bw&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>コマンドライン・インタフェースとファサード・パターン - golang</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/golang/cli-and-facade-pattern/" />
		<id>tag:text.Baldanders.info,2016-01-05:/golang/cli-and-facade-pattern/</id>
		<published>2016-01-05T22:06:41+09:00</published>
		<updated>2016-01-06T09:48:00+09:00</updated>
		<summary>ファサード・パターンは DDD (Domain-Driven Design) と相性がよい。普通は Web アプリケーションのような多様なサブシステムを持つシステムを設計する際に導入する考え方だが， CLI の場合でもサブコマンドを構成するのであればファサード・パターンがよいだろう。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="golang" label="golang" scheme="http://text.baldanders.info/golang" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラには &lt;a href=&#34;https://golang.org/pkg/flag/&#34; title=&#34;flag - The Go Programming Language&#34;&gt;&lt;code&gt;flag&lt;/code&gt;&lt;/a&gt; パッケージが標準で提供されており，いわゆるコマンドライン・インタフェース（Command line interface; CLI）の操作はこれでまかなうことができる。
ただし &lt;a href=&#34;https://golang.org/pkg/flag/&#34; title=&#34;flag - The Go Programming Language&#34;&gt;&lt;code&gt;flag&lt;/code&gt;&lt;/a&gt; パッケージではサブコマンドをサポートしていないためサブコマンドを構成したい場合は少し工夫が必要となる。
ちなみにサブコマンドとは，以下のようなコマンドラインの構成になっているアプリケーションである。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ command [golabal options] &amp;lt;sub-command&amp;gt; [sub-options] [arguments]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;たとえば &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;コンパイラの &lt;code&gt;go run&lt;/code&gt; もサブコマンドだし， &lt;a href=&#34;https://git-scm.com/&#34; title=&#34;Git&#34;&gt;git&lt;/a&gt; の &lt;code&gt;git commit&lt;/code&gt; とかもサブコマンドである。&lt;/p&gt;

&lt;h2 id=&#34;コマンドライン-インタフェースと-unix-philosophy:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;コマンドライン・インタフェースと UNIX Philosophy&lt;/h2&gt;

&lt;p&gt;ところで CLI でよく引き合いに出されるのが “&lt;a href=&#34;http://www.ru.j-npcs.org/usoft/WWW/LJ/Articles/unixtenets.html&#34; title=&#34;Tenets of the UNIX Philosophy&#34;&gt;UNIX Philosophy&lt;/a&gt;” と呼ばれるアプリケーションを作る際の哲学というか指針のようなものである。
曰く&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Small is beautiful. （小さいものは美しい）&lt;/li&gt;
&lt;li&gt;Make each program do one thing well. （各プログラムが一つのことをうまくやるようにせよ）&lt;/li&gt;
&lt;li&gt;Build a prototype as soon as possible. （できる限り早くプロトタイプを作れ）&lt;/li&gt;
&lt;li&gt;Choose portability over efficiency. （効率よりも移植しやすさを選べ）&lt;/li&gt;
&lt;li&gt;Store data in flat text files. （単純なテキストファイルにデータを格納せよ）&lt;/li&gt;
&lt;li&gt;Use software leverage to your advantage. （ソフトウェアの効率を優位さとして利用せよ）&lt;/li&gt;
&lt;li&gt;Use shell scripts to increase leverage and portability. （効率と移植性を高めるためにシェルスクリプトを利用せよ）&lt;/li&gt;
&lt;li&gt;Avoid captive user interfaces. （拘束的なユーザーインターフェースは作るな）&lt;/li&gt;
&lt;li&gt;Make every program a Filter. （全てのプログラムはフィルタとして振る舞うようにせよ）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の9項目&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:up&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:up&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
昨今は UNIX 互換環境でも GUI が普通になってきたので対話型のインタフェースも増えてきたが，それでも従来の CUI shell 上で動作するアプリケーションの需要が減ったわけではなく，サーバサイドではむしろ需要は大きくなっていると言ってもいい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;で CLI アプリケーションを作る際に気をつける点としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;他のツールと shell を介して連携できるよう標準入出力を使ったフィルタプログラムとする&lt;/li&gt;
&lt;li&gt;外部データの入出力は JSON, YAML, TOML といったテキストを用い UTF-8 文字エンコーディングに統一する&lt;/li&gt;
&lt;li&gt;コードの可搬性（または移植性）を考慮し，プラットフォーム依存を避けるようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったところだろうか。
もともと &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;はクロスプラットフォーム開発に強いため，それほど難しい要件ではないはずである。&lt;/p&gt;

&lt;h2 id=&#34;サブコマンドとファサード-パターン:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;サブコマンドとファサード・パターン&lt;/h2&gt;

&lt;p&gt;サブコマンド方式は一見 “&lt;a href=&#34;http://www.ru.j-npcs.org/usoft/WWW/LJ/Articles/unixtenets.html&#34; title=&#34;Tenets of the UNIX Philosophy&#34;&gt;UNIX Philosophy&lt;/a&gt;” に反しているように見えるが， &lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;の場合は全てのパッケージをひとつの実行モジュールに結合してしまうため，関連する機能をサブコマンドとして組み込むのは悪くないやりかたである。&lt;/p&gt;

&lt;p&gt;サブコマンドを構成する場合は「ファサード・パターン（facade pattern）」で考えるとよい。
「ファサード」は「建物の正面」という意味だそうで，システム内の各サブシステムの窓口のように機能する&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:fcd&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:fcd&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;a href=&#34;http://text.baldanders.info/images/facade-pattern.svg&#34;&gt;&lt;img src=&#34;http://text.baldanders.info/images/facade-pattern.svg&#34; alt=&#34;Facade Pattern&#34;&gt;&lt;/a&gt;
&lt;figcaption&gt;&lt;a href=&#34;http://text.baldanders.info/images/facade-pattern.svg&#34;&gt;Facade Pattern&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;この図のようにファサード・パターンは DDD (Domain-Driven Design) と相性がよい。
普通は Web アプリケーションのような多様なサブシステムを含むシステムを設計する際に導入する考え方だが， CLI の場合でもサブコマンドを構成するのであればファサード・パターンがよいだろう。&lt;/p&gt;

&lt;h2 id=&#34;mitchellh-cli-パッケージ:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;mitchellh/cli パッケージ&lt;/h2&gt;

&lt;p&gt;CLI をサポートするパッケージはいくつか公開されているのだが，この中で今回は &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; パッケージを紹介する。
&lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; はサブコマンドをファサード・パターンで実装するのに便利な機能を実装している。&lt;/p&gt;

&lt;h3 id=&#34;command-インタフェース:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;Command インタフェース&lt;/h3&gt;

&lt;p&gt;まずは &lt;code&gt;Command&lt;/code&gt; インタフェース。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A command is a runnable sub-command of a CLI.
type Command interface {
	// Help should return long-form help text that includes the command-line
	// usage, a brief few sentences explaining the function of the command,
	// and the complete list of flags the command accepts.
	Help() string

	// Run should run the actual command with the given CLI instance and
	// command-line arguments. It should return the exit status when it is
	// finished.
	Run(args []string) int

	// Synopsis should return a one-line, short synopsis of the command.
	// This should be less than 50 characters ideally.
	Synopsis() string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Command&lt;/code&gt; インタフェースはサブコマンドの context 情報を構成するのに使う。
&lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; は &lt;code&gt;Command&lt;/code&gt; インタフェースに適合する型（&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt;）のインスタンスを受け取ってサブコマンドの制御を行う&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:t&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:t&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。
さらに以下の関数値（function value）を示す型 &lt;code&gt;CommandFactory&lt;/code&gt; も用意されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// CommandFactory is a type of function that is a factory for commands.
// We need a factory because we may need to setup some state on the
// struct that implements the command itself.
type CommandFactory func() (Command, error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように &lt;code&gt;Command&lt;/code&gt; 型のインスタンスを返す関数を型として定義し，この型のリストを作成するのである。&lt;/p&gt;

&lt;h3 id=&#34;cli-構造体:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;CLI 構造体&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; に渡す context 情報は &lt;code&gt;CLI&lt;/code&gt; 構造体にまとめられている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// CLI contains the state necessary to run subcommands and parse the
// command line arguments.
type CLI struct {
	// Args is the list of command-line arguments received excluding
	// the name of the app. For example, if the command &amp;quot;./cli foo bar&amp;quot;
	// was invoked, then Args should be []string{&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;}.
	Args []string

	// Commands is a mapping of subcommand names to a factory function
	// for creating that Command implementation. If there is a command
	// with a blank string &amp;quot;&amp;quot;, then it will be used as the default command
	// if no subcommand is specified.
	Commands map[string]CommandFactory

	// Name defines the name of the CLI.
	Name string

	// Version of the CLI.
	Version string

	// HelpFunc and HelpWriter are used to output help information, if
	// requested.
	//
	// HelpFunc is the function called to generate the generic help
	// text that is shown if help must be shown for the CLI that doesn&#39;t
	// pertain to a specific command.
	//
	// HelpWriter is the Writer where the help text is outputted to. If
	// not specified, it will default to Stderr.
	HelpFunc   HelpFunc
	HelpWriter io.Writer

	once           sync.Once
	isHelp         bool
	subcommand     string
	subcommandArgs []string
	topFlags       []string

	isVersion bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;構造体の中に &lt;code&gt;CommandFactory&lt;/code&gt; のリストが含まれていることがお分かりだろうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Commands map[string]CommandFactory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これによってサブコマンド名と対応する処理を関連付けている。&lt;/p&gt;

&lt;h3 id=&#34;ui-インタフェース:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;Ui インタフェース&lt;/h3&gt;

&lt;p&gt;入出力関数群を持つ &lt;code&gt;Ui&lt;/code&gt; インタフェースは以下のように定義されている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Ui is an interface for interacting with the terminal, or &amp;quot;interface&amp;quot;
// of a CLI. This abstraction doesn&#39;t have to be used, but helps provide
// a simple, layerable way to manage user interactions.
type Ui interface {
	// Ask asks the user for input using the given query. The response is
	// returned as the given string, or an error.
	Ask(string) (string, error)

	// AskSecret asks the user for input using the given query, but does not echo
	// the keystrokes to the terminal.
	AskSecret(string) (string, error)

	// Output is called for normal standard output.
	Output(string)

	// Info is called for information related to the previous output.
	// In general this may be the exact same as Output, but this gives
	// Ui implementors some flexibility with output formats.
	Info(string)

	// Error is used for any error messages that might appear on standard
	// error.
	Error(string)

	// Warn is used for any warning messages that might appear on standard
	// error.
	Warn(string)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更に &lt;code&gt;Ui&lt;/code&gt; の特化クラスとして &lt;code&gt;BasicUi&lt;/code&gt; や &lt;code&gt;PrefixedUi&lt;/code&gt; や &lt;code&gt;ColoredUi&lt;/code&gt; が定義されている。
&lt;code&gt;ColoredUi&lt;/code&gt; は出力をカラーにできるが，残念ながら Windows のコマンドプロンプトには対応していないようだ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ui&lt;/code&gt; インタフェースは &lt;code&gt;Command&lt;/code&gt; インタフェースと組み合わせてサブコマンド側の context 情報を構成するのに使う。&lt;/p&gt;

&lt;h3 id=&#34;mitchellh-cli-パッケージのメリット:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;mitchellh/cli パッケージのメリット&lt;/h3&gt;

&lt;p&gt;上述したように &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; はサブコマンドをファサード・パターンで実装するのに便利な機能を実装している。
なおかつ &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; ではファサード・パターンを入れ子にすることができる。
たとえばサブコマンドのサブコマンドを構成することもできるのだ。&lt;/p&gt;

&lt;h2 id=&#34;mitchellh-cli-を使ってファサード-パターンを組んでみる:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;mitchellh/cli を使ってファサード・パターンを組んでみる&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; をファサード・パターンとして組みやすくするためのラッパーとして &lt;a href=&#34;https://github.com/spiegel-im-spiegel/gofacade&#34; title=&#34;spiegel-im-spiegel/gofacade&#34;&gt;spiegel-im-spiegel/gofacade&lt;/a&gt; パッケージを作ってみた&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:li&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:li&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;まず，入出力の Context を定義するためのクラスとして &lt;code&gt;Context&lt;/code&gt; 構造体を作った。
中身は &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;BasicUi&lt;/code&gt; 構造体を埋め込んでいるだけである&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:ebd1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:ebd1&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//Context inheritance cli.BasicUi
type Context struct {
	//Embedded BasicUi
	*cli.BasicUi
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更に &lt;code&gt;Context&lt;/code&gt; 構造体を包含する &lt;code&gt;Facade&lt;/code&gt; 構造体を定義する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Facade is context of facade
type Facade struct {
	//UI defines user interface of the Cli
	Cxt *Context
	// commands is a mapping of subcommand names to a factory function
	commands map[string]cli.CommandFactory
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Facade&lt;/code&gt; 構造体には &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;CommandFactory&lt;/code&gt; のリストを含んでいる。
このリストに &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Command&lt;/code&gt; インタフェースに適合するインスタンスを追加するための関数がこれ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:cl&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:cl&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// AddCommand add command
func (f *Facade) AddCommand(name string, command cli.Command) {
	f.commands[name] = func() (cli.Command, error) {
		return command, nil
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にファサードを実行するには以下の関数を起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Run facade
func (f *Facade) Run(appName, version string, args []string) (int, error) {
	c := cli.NewCLI(appName, version)
	c.Args = args
	c.Commands = f.commands
	c.HelpWriter = f.Cxt.Writer
	return c.Run()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他に細かい道具はあるが，まぁこんなもんだろう。&lt;/p&gt;

&lt;h3 id=&#34;spiegel-im-spiegel-gofacade-の実装例:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;spiegel-im-spiegel/gofacade の実装例&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gofacade&#34; title=&#34;spiegel-im-spiegel/gofacade&#34;&gt;spiegel-im-spiegel/gofacade&lt;/a&gt; パッケージの実装例として &lt;a href=&#34;https://github.com/spiegel-im-spiegel/astrocalc&#34; title=&#34;spiegel-im-spiegel/astrocalc&#34;&gt;spiegel-im-spiegel/astrocalc&lt;/a&gt; パッケージに CLI ツールを追加してみた。
こんな感じのコマンドラインを構成してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ astrocalc [-v | -h] mjdn &amp;lt;year&amp;gt; &amp;lt;month&amp;gt; &amp;lt;day&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まず &lt;code&gt;astrocalc mjdn&lt;/code&gt; サブコマンドを以下のように定義する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package mjdnCmd

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;strconv&amp;quot;
	&amp;quot;strings&amp;quot;
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/mjdn&amp;quot;
	&amp;quot;github.com/spiegel-im-spiegel/gofacade&amp;quot;
)

// Name は mjdn コマンド名を定義する
const Name string = &amp;quot;mjdn&amp;quot;

// Context は mjdn コマンドのコンテキストを定義する
type Context struct {
	//Embedded gofacade.Context
	*gofacade.Context
	//AppName にはアプリケーション名を格納する
	AppName string
}

// Command は Context のインスタンスを返す
func Command(cxt *gofacade.Context, appName string) *Context {
	return &amp;amp;Context{Context: cxt, AppName: appName}
}

// Synopsis は mjdn コマンドの概要を返す
func (c Context) Synopsis() string {
	return &amp;quot;Calculation of Modified Julian Day&amp;quot;
}

// Help は mjdn コマンドのヘルプを返す
func (c Context) Help() string {
	helpText := `
Usage: astrocalc mjdn &amp;lt;year&amp;gt; &amp;lt;month&amp;gt; &amp;lt;day&amp;gt;
`
	return fmt.Sprintln(strings.TrimSpace(helpText))
}

// Run は mjdn コマンドを実行する
func (c Context) Run(args []string) int {
	flags := flag.NewFlagSet(Name, flag.ContinueOnError)
	flags.Usage = func() {
		c.Error(c.Help())
	}
	// Parse commandline flag
	if err := flags.Parse(args); err != nil {
		return gofacade.ExitCodeError
	}
	if flags.NArg() != 3 {
		c.Error(fmt.Sprintf(&amp;quot;年月日を指定してください\n\n%s&amp;quot;, c.Help()))
		return gofacade.ExitCodeError
	}
	argsStr := flags.Args()
	var ymd = make([]int, 3)
	for i, arg := range argsStr {
		num, err := strconv.Atoi(arg)
		if err != nil {
			c.Error(fmt.Sprintln(err))
			return gofacade.ExitCodeError
		}
		ymd[i] = num
	}
	tm := time.Date(ymd[0], time.Month(ymd[1]), ymd[2], 0, 0, 0, 0, time.UTC)
	c.Output(fmt.Sprint(mjdn.DayNumber(tm)))
	return gofacade.ExitCodeOK
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポイントは &lt;code&gt;astrocalc mjdn&lt;/code&gt; サブコマンド用の context 情報として &lt;code&gt;Context&lt;/code&gt; 構造体を定義しているところ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Context は mjdn コマンドのコンテキストを定義する
type Context struct {
	//Embedded gofacade.Context
	*gofacade.Context
	//AppName にはアプリケーション名を格納する
	AppName string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gofacade&#34; title=&#34;spiegel-im-spiegel/gofacade&#34;&gt;&lt;code&gt;gofacade&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Context&lt;/code&gt; 構造体を埋め込みフィールドで定義しているのがお分かりだろうか。
&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gofacade&#34; title=&#34;spiegel-im-spiegel/gofacade&#34;&gt;&lt;code&gt;gofacade&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Context&lt;/code&gt; はさらに &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;BasicUi&lt;/code&gt; 構造体を埋め込んでいる。
また &lt;code&gt;Context&lt;/code&gt; 構造体は &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt;.&lt;code&gt;Command&lt;/code&gt; インタフェースの特化クラスとして実装している。&lt;/p&gt;

&lt;p&gt;では，この &lt;code&gt;Context&lt;/code&gt; 構造体を使ってアプリケーションの起動部分を書いてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;github.com/spiegel-im-spiegel/astrocalc/internal/mjdnCmd&amp;quot;
	&amp;quot;github.com/spiegel-im-spiegel/gofacade&amp;quot;
)

const (
	// Name はアプリケーション名を定義する
	Name string = &amp;quot;astrocalc&amp;quot;
	// Version はアプリケーションのバージョン番号を定義する
	Version string = &amp;quot;0.1.0&amp;quot;
)

func setupFacade(cxt *gofacade.Context) *gofacade.Facade {
	fcd := gofacade.NewFacade(cxt)
	fcd.AddCommand(mjdnCmd.Name, mjdnCmd.Command(cxt, Name))
	return fcd
}

func main() {
	cxt := gofacade.NewContext(os.Stdin, os.Stdout, os.Stderr)
	fcd := setupFacade(cxt)
	rtn, err := fcd.Run(Name, Version, os.Args[1:])
	if err != nil {
		cxt.Error(fmt.Sprintln(err))
	}
	os.Exit(rtn)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;setupFacade()&lt;/code&gt; 関数でファサードを作成し， &lt;code&gt;main()&lt;/code&gt; 関数で実行しているのが分かると思う。
では実際に compile &amp;amp; run してみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\workspace\astrocalc&amp;gt; pushd C:\workspace\astrocalc\src\github.com\spiegel-im-spiegel\astrocalc

C:\workspace\astrocalc\src\github.com\spiegel-im-spiegel\astrocalc&amp;gt; glide up
[INFO] Fetching updates for github.com/spiegel-im-spiegel/gofacade.
[INFO] Found glide.yaml in C:\workspace\astrocalc\src\github.com\spiegel-im-spiegel\astrocalc\vendor\github.com\spiegel-im-spiegel\gofacade/glide.yaml
[INFO] Fetching updates for github.com/mitchellh/cli.
[INFO] Scanning github.com/mitchellh/cli for dependencies.
[INFO] ==&amp;gt; Unknown github.com/bgentry/speakeasy (github.com/bgentry/speakeasy)
[INFO] ==&amp;gt; Unknown github.com/mattn/go-isatty (github.com/mattn/go-isatty)
[INFO] Fetching updates for github.com/bgentry/speakeasy.
[INFO] Fetching updates for github.com/mattn/go-isatty.
[INFO] Scanning github.com/bgentry/speakeasy for dependencies.
[INFO] Scanning github.com/mattn/go-isatty for dependencies.
[INFO] Project relies on 4 dependencies.
[INFO] Writing glide.lock file

C:\workspace\astrocalc\src\github.com\spiegel-im-spiegel\astrocalc&amp;gt; popd

C:\workspace\astrocalc&amp;gt; go install -v github.com/spiegel-im-spiegel/astrocalc
github.com/spiegel-im-spiegel/astrocalc/mjdn
github.com/spiegel-im-spiegel/astrocalc/vendor/github.com/bgentry/speakeasy
github.com/spiegel-im-spiegel/astrocalc/vendor/github.com/mattn/go-isatty
github.com/spiegel-im-spiegel/astrocalc/vendor/github.com/mitchellh/cli
github.com/spiegel-im-spiegel/astrocalc/vendor/github.com/spiegel-im-spiegel/gofacade
github.com/spiegel-im-spiegel/astrocalc/internal/mjdnCmd
github.com/spiegel-im-spiegel/astrocalc

C:\workspace\astrocalc&amp;gt; bin\astrocalc.exe -h
usage: astrocalc [--version] [--help] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]

Available commands are:
    mjdn    Calculation of Modified Julian Day

C:\workspace\astrocalc&amp;gt; bin\astrocalc.exe -h mjdn
Usage: astrocalc mjdn &amp;lt;year&amp;gt; &amp;lt;month&amp;gt; &amp;lt;day&amp;gt;

C:\workspace\astrocalc&amp;gt; bin\astrocalc.exe mjdn 2015 1 1
57023 (2015-01-01)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よしよし。
うまくいった。
なお &lt;a href=&#34;https://github.com/Masterminds/glide&#34; title=&#34;Masterminds/glide&#34;&gt;glide&lt;/a&gt; については「&lt;a href=&#34;http://text.baldanders.info/golang/vendoring-with-glide/&#34;&gt;Glide で Vendoring&lt;/a&gt;」を参考にどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;ブックマーク:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;ブックマーク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yuuki.hatenablog.com/entry/go-cli-unix&#34;&gt;Go言語によるCLIツール開発とUNIX哲学について - ゆううきブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tellme.tokyo/post/2015/06/23/unix_cli_tool_go/&#34;&gt;開発者から見た UNIX 哲学とコマンドラインツールと Go言語 - TELLME.TOKYO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ryochack.hatenablog.com/entry/2013/04/17/232753&#34;&gt;Go言語のflagパッケージを使う - uragami note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://deeeet.com/writing/2015/04/17/panicwrap/&#34;&gt;Go言語のCLIツールのpanicをラップしてクラッシュレポートをつくる | SOTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kumatch/items/258d7984c0270f6dd73a&#34;&gt;flag 並にシンプルでより強力な CLI パーサ kingpin の紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://text.baldanders.info/golang/bookmark/&#34;&gt;Go 言語に関するブックマーク集はこちら&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;参考図書:d4a750c9c3ada9f8f4bd4f3022a7bb81&#34;&gt;参考図書&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8ATHGW/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41mh5r0NwLL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8ATHGW/baldandersinf-22/&#34;&gt;増補改訂版 Java言語で学ぶデザインパターン入門&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;結城 浩 &lt;/dd&gt;&lt;dd&gt;SBクリエイティブ 2004-06-18&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;4&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-4-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1BS/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1BS.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;増補改訂版 Java言語で学ぶデザインパターン入門 マルチスレッド編&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00I8AT1EU/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00I8AT1EU.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Java言語で学ぶリファクタリング入門&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00JEYPPOE/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00JEYPPOE.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;Code Complete 第2版 上　完全なプログラミングを目指して&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B0197SZZZ0/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B0197SZZZ0.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;日経Linux（リナックス） 2016年 1月号 [雑誌]&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00V2WMQNE/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B00V2WMQNE.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;改訂2版　パーフェクトJava&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;結城浩さんによる通称「デザパタ本」。 Java 以外でも使える優れもの。&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2016-01-05&#34;&gt;2016-01-05&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:up&#34;&gt;翻訳は &lt;a href=&#34;https://ja.wikipedia.org/wiki/UNIX%E5%93%B2%E5%AD%A6&#34;&gt;Wikipedia の記事&lt;/a&gt;から拝借させてもらった。ちなみに &lt;a href=&#34;https://ja.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License&#34;&gt;Wikipedia のコンテンツは基本的には by-sa ライセンスで公開&lt;/a&gt;されている。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:up&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:fcd&#34;&gt;ファサード自身はサブシステムの詳細を知らず context 情報を渡して処理をキックするのみなのが特徴。サブシステム側はファサードに依存せず， context 情報さえあれば処理可能にするのがコツである。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:fcd&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:t&#34;&gt;型（&lt;a href=&#34;https://golang.org/ref/spec#Properties_of_types_and_values&#34; title=&#34;Properties of types and values&#34;&gt;type&lt;/a&gt;）については「&lt;a href=&#34;http://text.baldanders.info/golang/object-oriented-programming/&#34;&gt;Go 言語における「オブジェクト」&lt;/a&gt;」を参照のこと。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:t&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:li&#34;&gt;&lt;a href=&#34;https://github.com/spiegel-im-spiegel/gofacade&#34; title=&#34;spiegel-im-spiegel/gofacade&#34;&gt;spiegel-im-spiegel/gofacade&lt;/a&gt; は &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;CC0&lt;/a&gt; で公開している。個人的には実証コードの扱いなので，（著作権情報の書き換えも含めて）自由に利用して 構わない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:li&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:ebd1&#34;&gt;なんでこんな回りくどいことをしているかというと， &lt;a href=&#34;https://github.com/mitchellh/cli&#34; title=&#34;mitchellh/cli&#34;&gt;mitchellh/cli&lt;/a&gt; パッケージをカプセル化したかったから。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:ebd1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d4a750c9c3ada9f8f4bd4f3022a7bb81:cl&#34;&gt;&lt;a href=&#34;https://golang.org/&#34; title=&#34;The Go Programming Language&#34;&gt;Go 言語&lt;/a&gt;では関数は全て関数閉包（closure）として機能する。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d4a750c9c3ada9f8f4bd4f3022a7bb81:cl&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>年始スペシャル：2016年から公有になった作品の著作者 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/04-stories/" />
		<id>tag:text.Baldanders.info,2016-01-05:/remark/2016/01/04-stories/</id>
		<published>2016-01-05T01:22:33+09:00</published>
		<updated>2016-01-06T12:29:56+09:00</updated>
		<summary>2016年から公有になった作品の著作者 / テレビに映っているものが分からない / 過疎地こそ「自動運転」が欲しい / 「PVの話をするのはもう止めよう」</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;明けましておめでとうございます。
本年もご愛顧のほどよろしくお願いします。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#pd:5300895818cfe3d8a857fedba5e3e154&#34;&gt;2016年から公有になった作品の著作者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#media:5300895818cfe3d8a857fedba5e3e154&#34;&gt;テレビに映っているものが分からない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vehicle:5300895818cfe3d8a857fedba5e3e154&#34;&gt;過疎地こそ「自動運転」が欲しい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#web:5300895818cfe3d8a857fedba5e3e154&#34;&gt;「PVの話をするのはもう止めよう」&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;pd:5300895818cfe3d8a857fedba5e3e154&#34;&gt;2016年から公有になった作品の著作者&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aozora.gr.jp/soramoyou/soramoyouindex.html#000480&#34;&gt;いまだ来ない本のための青空&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/919886&#34;&gt;2016年にパブリックドメイン入りした著作者 - Togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine-k.jp/2016/01/04/public-domain-of-the-book/&#34;&gt;本とパブリック・ドメイン « マガジン航[kɔː]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20160105/crimeandpunishment&#34;&gt;ドストエフスキー『罪と罰』が刊行されて150年＆米川正夫氏の訳業のパブリックドメイン化 - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;乱歩、谷崎に隠れがちですが、米川正夫の翻訳がパブリックドメイン入りすることに大変注目しています。トルストイ、ドストエフスキー、ツルゲーネフ、プーシキンら、ロシア文学の大作家の膨大な作品の日本語訳がPDになる。大きな意味があります。 &lt;a href=&#34;https://t.co/74RNz7GYBP&#34;&gt;https://t.co/74RNz7GYBP&lt;/a&gt;&lt;/p&gt;&amp;mdash; 丹治吉順 aka 朝P (@tanji_y) &lt;a href=&#34;https://twitter.com/tanji_y/status/682689790978859008&#34;&gt;2015, 12月 31&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;江戸川乱歩や谷崎潤一郎って今年からなんだねぇ。
&lt;a href=&#34;http://text.baldanders.info/remark/2015/anne-frank-scandal/&#34;&gt;Anne Frank の作品&lt;/a&gt;も公有になったようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://boingboing.net/2016/01/02/anne-franks-diary-is-in-the.html&#34;&gt;Anne Frank&amp;rsquo;s diary is in the public domain; editors aren&amp;rsquo;t co-authors / Boing Boing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/yomoyomo/20160104/annefrank&#34;&gt;アンネ・フランク財団の主張は認められず『アンネの日記』はパブリックドメイン入り（ついでに書くとアドルフ・ヒトラー『我が闘争』も） - YAMDAS現更新履歴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;media:5300895818cfe3d8a857fedba5e3e154&#34;&gt;テレビに映っているものが分からない&lt;/h2&gt;

&lt;p&gt;年末年始は実家に帰っていたが，実家にはテレビがありテレビを眺めながら暮らしていた。
実家では私にチャネル権はないので，大晦日は必然的に「紅白」を見ることになる&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5300895818cfe3d8a857fedba5e3e154:tv&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5300895818cfe3d8a857fedba5e3e154:tv&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;毎年のことながら「紅白」に出場している人の半分くらいが分からない。
甥姪が好きなアイドルグループも親には馴染みの歌謡曲・演歌の歌手も分からない。
かろうじて分かるのは Perfume と「ラスボス」くらいか。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;小林幸子さんの歌前に、綾瀬はるかさんが「ラスボス」について「最後に出てくる大物という意味で、ラストのボス、略してラスボス」と解説。この語は『三省堂国語辞典』最新第7版では議論の末に載らなかったのですが、紅白の場で国民的に認知された、と主張できないこともない。&lt;/p&gt;&amp;mdash; 飯間浩明 (@IIMA_Hiroaki) &lt;a href=&#34;https://twitter.com/IIMA_Hiroaki/status/682557717118992386&#34;&gt;2015, 12月 31&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;私以外の家族は彼女等のことを「意味がわからない」と言っていた。&lt;/p&gt;

&lt;p&gt;こういうギャップは昔からあるが，単純な世代間ギャップではなく，登場人物の背後にある「文脈」を知っているかどうかがポイントである。
小林幸子が唄ってる時に表示された「弾幕」も文脈を知らない人にはウザい演出でしかないし， Perfume の海外での活躍や卓越した映像技術も知らない人にはただ奇妙なだけである。&lt;/p&gt;

&lt;p&gt;むしろ，こういうギャップをごった煮のように混ぜる NHK の度量に感心する。
こういう演出は民放ではたぶん無理だろう。&lt;/p&gt;

&lt;h2 id=&#34;vehicle:5300895818cfe3d8a857fedba5e3e154&#34;&gt;過疎地こそ「自動運転」が欲しい&lt;/h2&gt;

&lt;p&gt;これは後で読む。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tmresearch.co.jp/sensor/2015/12/01/sensor_no-25/&#34;&gt;東京海上研究所 | ニュースレター | SENSOR No.25　「自動運転をめぐる法的な課題」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ところで，歳をとると色々とガタが来るものであるが，日本の田舎は基本的に車社会なので，「歳をとったから自動車運転はやめなさい」というわけにはいかないのが現状である。
ならば自動運転の実証実験は田舎でこそやる意味があると思うのだが，どうだろう。&lt;/p&gt;

&lt;p&gt;という話を実家でしていた。&lt;/p&gt;

&lt;h2 id=&#34;web:5300895818cfe3d8a857fedba5e3e154&#34;&gt;「PVの話をするのはもう止めよう」&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wired.jp/2016/01/03/page-views-dont-matter/&#34;&gt;ウェブ関係者よ、PVの話をするのはもう止めよう « WIRED.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PV のような指標が無意味なことは，数年どころか Web 2.0 の頃には既に言われているのに今だこんな議論をしているのは滑稽に見える。
あるいは，いかに Web が進歩して&lt;strong&gt;いない&lt;/strong&gt;かという傍証であると思う。
Facebook のコメントに「だって折り込み広告を入れて、それを実際に何人が見たかで課金なんてしてないでしょ？」という意見があったが，全く以ってそのとおりだと思う。&lt;/p&gt;

&lt;p&gt;上の記事でも少し指摘されているけど，コンテンツやその周辺で交わされる「文脈」を無視した広告など誰も見ないし，そんな広告が満載のウザいページを見たかどうかなんて情報に意味はない。
PV という虚構に人や金が群がり，釣りコンテンツや無意味にページ分割された報道記事が溢れている現状こそが Web 全体の情報の質を押し下げている。
広告にどれだけお金が流れているかなんて Web においてはまるで自慢にならない。
それはただのテレビの延長にすぎないからだ。&lt;/p&gt;

&lt;p&gt;思うのは，文脈を含めたユーザの Activty を測定可能なら，そこに広告を置く必然性はないんじゃないかということだ。
たとえば &lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000638.shtml&#34;&gt;Intention Economy（意思の経済）&lt;/a&gt;と呼ばれるような。
そうなれば広告に依存した Web 2.0 型のマネタイズから脱却できるし，上で例示した下らない SEO も駆逐できる。&lt;/p&gt;

&lt;p&gt;まぁそれができないからこの有様なんだろうけど。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:5300895818cfe3d8a857fedba5e3e154:tv&#34;&gt;実家では各自で観たい番組を録画しているので，リアルタイムでは「みんなで見る＝どうでもいい」番組が優先される。もっとも普段テレビを見ない私には「ニチアサ」以外に「観たい番組」など存在しないのだが。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5300895818cfe3d8a857fedba5e3e154:tv&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>Lua のモジュール - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2016/01/lua-module/" />
		<id>tag:text.Baldanders.info,2016-01-04:/remark/2016/01/lua-module/</id>
		<published>2016-01-04T22:44:13+09:00</published>
		<updated>2016-01-04T22:44:13+09:00</updated>
		<summary>Lua は不案内なので知らなかったのだが module() 関数は Lua 5.2 で廃止されていたらしい。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">&lt;p&gt;&lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; 4.1.0_0 がリリースされた。
主な変更点は &lt;code&gt;ln&lt;/code&gt; コマンドが追加されたことのようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zetamatta/nyagos/releases/tag/4.1.0_0&#34;&gt;Release 4.1.0_0 · zetamatta/nyagos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ただ，私の場合はより切実な問題があって， &lt;code&gt;-f&lt;/code&gt; オプションで &lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; のスクリプトを実行させた場合に &lt;code&gt;module()&lt;/code&gt; 関数が使えなくなった。
&lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; は不案内なので知らなかったのだが &lt;code&gt;module()&lt;/code&gt; 関数は &lt;a href=&#34;http://www.lua.org/&#34; title=&#34;The Programming Language Lua&#34;&gt;Lua&lt;/a&gt; 5.2 で deprecated になっていたらしい。
逆になんで今まで使えてたのかは分からない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://p-monster.hatenablog.com/entry/2013/02/13/205419&#34;&gt;Luaのモジュールを穴が空くまで見つめてみる - プログラミングの魔物&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;module()&lt;/code&gt; 関数が使えないので &lt;code&gt;require()&lt;/code&gt; で外部ファイルを呼び出すとファイル内の記述がそのまま実行される。&lt;/p&gt;

&lt;p&gt;以前なら &lt;code&gt;module1.lua&lt;/code&gt; に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;module(&amp;quot;module1&amp;quot;, package.seeall)

function method1()
	return &amp;quot;Method 1&amp;quot;
end

function method2()
	return &amp;quot;Method 2&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と定義しておけば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&amp;quot;module1&amp;quot;)

nyagos.write(module1.method1()..&amp;quot;\n&amp;quot;)
nyagos.write(module1.method2()..&amp;quot;\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と記述できた。
もし同じように機能させたいなら &lt;code&gt;module1.lua&lt;/code&gt; を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;module1 = {}

module1.method1 = function()
	return &amp;quot;Method 1&amp;quot;
end

module1.method2 = function()
	return &amp;quot;Method 2&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と記述するのが一番簡単なようだ。
&lt;code&gt;module1&lt;/code&gt; を関数テーブルとして定義するわけだ。&lt;/p&gt;

&lt;p&gt;あるいは &lt;code&gt;module1.lua&lt;/code&gt; を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local module1 = {}

module1.method1 = function()
	return &amp;quot;Method 1&amp;quot;
end

module1.method2 = function()
	return &amp;quot;Method 2&amp;quot;
end

return module1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としておいて，呼び出し側を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local module1 = require(&amp;quot;module1&amp;quot;)

nyagos.write(module1.method1()..&amp;quot;\n&amp;quot;)
nyagos.write(module1.method2()..&amp;quot;\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればグローバル領域を汚さずに済むだろう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.luafaq.org/&#34;&gt;Lua Unofficial FAQ (uFAQ)&lt;/a&gt; : “1.37.2 Life after module()?” の項が参考になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/16849422/using-the-module-function-in-lua-5-2&#34;&gt;c++ - Using the &amp;lsquo;module&amp;rsquo; function in Lua 5.2? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://marupeke296.com/LUA_No4_Table.html&#34;&gt;その４ 会得必須！Luaの真髄「テーブル」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ie.u-ryukyu.ac.jp/~e085739/lua.hajime.4.html&#34;&gt;第 4 回: Lua のオブジェクト指向について紹介する — WTOPIA v1.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>ゆく年くる年 - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/1229-stories/" />
		<id>tag:text.Baldanders.info,2015-12-29:/remark/2015/1229-stories/</id>
		<published>2015-12-29T16:11:05+09:00</published>
		<updated>2015-12-29T16:11:05+09:00</updated>
		<summary>2016年の主な暦象 / 年末年始のセキュリティ / 年末年始の引きこもり予定</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;h2 id=&#34;2016年の主な暦象:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;2016年の主な暦象&lt;/h2&gt;

&lt;p&gt;2016年の『&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416115458/baldandersinf-22/&#34;&gt;天文年鑑&lt;/a&gt;』より。&lt;/p&gt;

&lt;h3 id=&#34;日食-月食:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;日食・月食&lt;/h3&gt;

&lt;p&gt;3月9日に皆既日食。
東南アジア・オーストラリアを中心とした地域で見れる。
日本では部分日食となる。&lt;/p&gt;

&lt;p&gt;9月1日に金環日食。
これはアフリカ大陸あたり。
日本ではかすりもしない。&lt;/p&gt;

&lt;p&gt;ほかに3月23日と8月18日および9月17日に半影月食があるが，まぁ見た目じゃわからないだろうねぇ（笑）&lt;/p&gt;

&lt;h3 id=&#34;水星の日面経過:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;水星の日面経過&lt;/h3&gt;

&lt;p&gt;日本時間の5月9日から10日にかけて水星の日面経過がある。
水星の日面経過は2006年以来9年ぶり。
ただし日本付近はピンポイントで見られない。&lt;/p&gt;

&lt;p&gt;ちなみに「経過」というのは，地球から見て大きな天体の前に小さな天体が通過する現象を指す&lt;a href=&#34;http://optik2.mtk.nao.ac.jp/~somamt/notes/transit.htm&#34;&gt;天文学用語&lt;/a&gt;である&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cbd3cfb5e91b5e542f63ef8efac6673b:e&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cbd3cfb5e91b5e542f63ef8efac6673b:e&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。
大きな天体に小さな天体が隠される「&lt;ruby&gt;&lt;rb&gt;掩蔽&lt;/rb&gt;&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;えんぺい&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;」と対になる言葉だ。&lt;/p&gt;

&lt;h3 id=&#34;火星が中接近:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;火星が中接近&lt;/h3&gt;

&lt;p&gt;2016年は火星が地球に中接近する。
方角はさそり座とてんびん座の間をうろちょろしている。
見頃は5月31日の再接近（マイナス2等星くらいの明るさになる）の前後2,3ヶ月だろうか。
とくに8月25日は土星・火星・さそり座のアンタレスが並んで見えるため肉眼でも楽しめる。&lt;/p&gt;

&lt;p&gt;ちなみに火星は2年2ヶ月ごとに地球に接近する。
次回2018年の接近は大接近となる。&lt;/p&gt;

&lt;h3 id=&#34;主な流星群:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;主な流星群&lt;/h3&gt;

&lt;p&gt;今年は8月中旬のペルセウス座流星群が好条件である。
月齢が若く夜半前に月が沈んでしまうため，夜半過ぎから見頃になるペルセウス座流星群には都合がいいのである。
たぶん国立天文台がまた何かキャンペーンをやるだろうし，子どもがいる人は夏休みの自由研究の題材にしてはいかがだろうか。&lt;/p&gt;

&lt;p&gt;逆に12月中旬のふたご座流星群の時は満月と重なるという最悪条件。
でも月と流れ星をいっしょに撮りたい天体写真マニアには好機か？&lt;/p&gt;

&lt;h2 id=&#34;年末年始のセキュリティ:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;年末年始のセキュリティ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ipa.go.jp/security/measures/vacation.html&#34;&gt;長期休暇における情報セキュリティ対策：IPA 独立行政法人 情報処理推進機構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jpcert.or.jp/pr/2015/pr150006.html&#34;&gt;冬期の長期休暇に備えて &lt;sup&gt;2015&lt;/sup&gt;&amp;frasl;&lt;sub&gt;12&lt;/sub&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;個人や家庭で注意する点としては，一般公開で休暇中の計画や行動を具体的に晒さないようにすることと， OS やアプリケーションのセキュリティ・アップデートをきちんと済ませること，といったところのようだ。&lt;/p&gt;

&lt;p&gt;まぁ Activity の公開については，一般の人はそれほど神経質になる必要もないと思うが&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cbd3cfb5e91b5e542f63ef8efac6673b:j&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cbd3cfb5e91b5e542f63ef8efac6673b:j&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，プライバシーに配慮する必要のある人（有名人とか）は気をつけないといけないだろうねぇ。&lt;/p&gt;

&lt;h2 id=&#34;年末年始の引きこもり予定:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;年末年始の引きこもり予定&lt;/h2&gt;

&lt;p&gt;今年はゲームで引きこもろうとタイトルを物色していたのだが，君に決めた！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jp.square-enix.com/MOBIUSFF/&#34;&gt;MOBIUS FINAL FANTASY | SQUARE ENIX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure style=&#39;margin:0 auto;text-align:center;&#39;&gt;
&lt;iframe class=&#34;youtube-player&#34; width=&#34;500&#34;  height=&#34;281&#34; src=&#34;https://www.youtube-nocookie.com/embed/0GlVAlyNi0I&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0GlVAlyNi0I&#34;&gt;メビウス ファイナルファンタジー [iPhone/Android] 公式トレーラー2015 - YouTube&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;（以降 MFF と略称する）&lt;/p&gt;

&lt;p&gt;いやぁ，&lt;a href=&#34;http://www.baldanders.info/spiegel/log2/000561.shtml&#34;&gt;「風来のシレン」で怒りまくってた&lt;/a&gt;頃に比べると隔世の感があるね。
丹下桜さん，いいわぁ。&lt;/p&gt;

&lt;p&gt;基本的にガチャ&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cbd3cfb5e91b5e542f63ef8efac6673b:s&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cbd3cfb5e91b5e542f63ef8efac6673b:s&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; の出目で難易度が激変するゲームは嫌いなのだが（これが射幸心を煽る元だし）， MFF はその辺のバランスがよく，いい感じに RPG のシナリオに没頭できるようになっている。&lt;/p&gt;

&lt;p&gt;特に年末年始のキャンペーンである「&lt;a href=&#34;http://www.finalfantasy.jp/mobius/information/2015/12/06/d4c1ad0f7cda4f73b7118fa4d93a90a4ec5129f2.html&#34;&gt;スターターパック大召喚&lt;/a&gt;」が秀逸。
これがあったから「遅れてきたルーキー」である私でもやる気になった&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cbd3cfb5e91b5e542f63ef8efac6673b:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cbd3cfb5e91b5e542f63ef8efac6673b:a&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。
お金突っ込まなくてもそれなりに楽しく遊べるというのは重要。&lt;/p&gt;

&lt;p&gt;蒐集家や重症のゲームオタクがいくらお金を突っ込んでも知ったことではないが，子どもや私のようなライト・ユーザでも楽しめないなら，その時点でクソゲーである。
個人的には「&lt;a href=&#34;http://www.jp.square-enix.com/MOBIUSFF/system/other.html&#34;&gt;メビウスギフトボックス&lt;/a&gt;」くらいなら継続的にお金を払ってもいいと思っている。&lt;/p&gt;

&lt;p&gt;若いころのようにゲーム雑誌を買って流行を追いかける気力もないし&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:cbd3cfb5e91b5e542f63ef8efac6673b:m&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:cbd3cfb5e91b5e542f63ef8efac6673b:m&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;，なにより可処分時間をゲームに当てるのが「もったいない」と思うようになってしまった。
ゲームをする暇もないほど生き急いでるつもりもないのだが，歳をとった証拠なのだろう。&lt;/p&gt;

&lt;p&gt;まぁ何事もほどほどに。&lt;/p&gt;

&lt;h2 id=&#34;それでは:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;それでは&lt;/h2&gt;

&lt;p&gt;みなさま，良い年を迎えられますよう。&lt;/p&gt;

&lt;h2 id=&#34;参考:cbd3cfb5e91b5e542f63ef8efac6673b&#34;&gt;参考&lt;/h2&gt;

&lt;div class=&#34;hreview&#34; &gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416115458/baldandersinf-22/&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51XoyiTnmFL._SL160_.jpg&#34; alt=&#34;photo&#34; class=&#34;photo&#34;  /&gt;&lt;/a&gt;&lt;dl &gt;&lt;dt class=&#34;fn&#34;&gt;&lt;a class=&#34;item url&#34; href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416115458/baldandersinf-22/&#34;&gt;天文年鑑2016年版&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;天文年鑑編集委員会 &lt;/dd&gt;&lt;dd&gt;誠文堂新光社 2015-11-16&lt;/dd&gt;&lt;dd&gt;評価&lt;abbr class=&#34;rating&#34; title=&#34;5&#34;&gt;&lt;img src=&#34;http://g-images.amazon.com/images/G/01/detail/stars-5-0.gif&#34; alt=&#34;&#34; /&gt;&lt;/abbr&gt; &lt;/dd&gt;&lt;/dl&gt;&lt;p class=&#34;similar&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4805208899/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4805208899.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文手帳 2016年版: 星座早見盤付 天文ポケット年鑑&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/462108965X/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/462108965X.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;理科年表 平成28年&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B016YNZD0I/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B016YNZD0I.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;天文ガイド 2016年 01 月号  [特大号 付録付き]&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B017VPHTX2/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/B017VPHTX2.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;月刊 星ナビ 2016年 1月号&#34;  /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4416115512/baldandersinf-22/&#34; target=&#34;_top&#34;&gt;&lt;img src=&#34;http://images.amazon.com/images/P/4416115512.09._SCTHUMBZZZ_.jpg&#34;  alt=&#34;藤井 旭の天文年鑑 2016年版: スターウォッチング完全ガイド&#34;  /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p class=&#34;description&#34;&gt;天文ファン必携。2016年版&lt;/p&gt;
&lt;p class=&#34;gtools&#34; &gt;reviewed by &lt;a href=&#39;#maker&#39; class=&#39;reviewer&#39;&gt;Spiegel&lt;/a&gt; on &lt;abbr class=&#34;dtreviewed&#34; title=&#34;2015-12-29&#34;&gt;2015-12-29&lt;/abbr&gt; (powered by &lt;a href=&#34;http://www.goodpic.com/mt/aws/index.html&#34; &gt;G-Tools&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:cbd3cfb5e91b5e542f63ef8efac6673b:e&#34;&gt;ただし「日面通過」や「太陽面通過」でも間違いとは言い切れない。「太陽面通過」は主にメディア等で定着している言葉のようだ。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cbd3cfb5e91b5e542f63ef8efac6673b:e&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cbd3cfb5e91b5e542f63ef8efac6673b:j&#34;&gt;それでも「旅の恥」をネットに開陳するのは止めたほうがいいと思う。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cbd3cfb5e91b5e542f63ef8efac6673b:j&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cbd3cfb5e91b5e542f63ef8efac6673b:s&#34;&gt;MFF ではガチャを「召喚」と呼んでいる。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cbd3cfb5e91b5e542f63ef8efac6673b:s&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cbd3cfb5e91b5e542f63ef8efac6673b:a&#34;&gt;あのくだらない「リセット・マラソン」をしなくて済むのはホンマに助かる。「スターターパック大召喚」を行うには召喚チケット6枚か魔石3,000が必要だが，実は召喚チケット6枚くらいは序盤をマメにプレイしていればすぐ手に入るので，ここでお金を払う必要はない。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cbd3cfb5e91b5e542f63ef8efac6673b:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:cbd3cfb5e91b5e542f63ef8efac6673b:m&#34;&gt;そもそも紙の雑誌を買うなんて資源ごみにお金を払ってるようなもんだし。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:cbd3cfb5e91b5e542f63ef8efac6673b:m&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
	<entry>
		<title>NYAGOS 4.1-beta がリリース - remark</title>
		<link rel="alternate" type="text/html" href="http://text.baldanders.info/remark/2015/nyagos-4_1_beta/" />
		<id>tag:text.Baldanders.info,2015-12-20:/remark/2015/nyagos-4_1_beta/</id>
		<published>2015-12-20T16:31:06+09:00</published>
		<updated>2015-12-21T10:36:09+09:00</updated>
		<summary>4.1 で大きく変わったのはコールバック関数の扱いのようだ。</summary>
		
			<author>
				<name>Spiegel</name>
				<uri>http://www.baldanders.info/spiegel/profile/</uri>
			</author>
			
	<link rel="cc:license" type="application/rdf+xml" href="http://creativecommons.org/licenses/by-sa/4.0/rdf" />


		
		<category term="remark" label="remark" scheme="http://text.baldanders.info/remark" />
		<content type="html" xml:lang="ja" xml:base="http://text.baldanders.info/">

&lt;p&gt;ここのところ忙しくしてたら，いつの間にか &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; の &lt;a href=&#34;https://github.com/zetamatta/nyagos/releases/tag/4.1-beta&#34;&gt;4.1-beta&lt;/a&gt; が出てた。
4.1 で大きく変わったのはコールバック関数の扱いのようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クラッシュ回避のため、全てのLua のコールバック関数はそれぞれの Lua インスタンスを持つようにした。（つまり、.nyagos で定義されたグローバル変数は、全てのコールバック関数から見ることができなくなった）&lt;/li&gt;
&lt;li&gt;コールバック関数と .nyagos 間で値を共有するため、テーブル share[] を作った&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コールバック関数の挙動が変わったのは&lt;/p&gt;

&lt;figure&gt;
&lt;blockquote&gt;
&lt;q&gt;この制限は、クラッシュ回避のため、コールバック関数ごとに別の Lua インスタンスを用意しているためです。エイリアス等は別の goroutine 内で呼ばれるのですが、4.0 では、この時同一の Lua インスタンスを使用していたため、時にスタックに矛盾が発生して、クラッシュすることがあったのです。&lt;/q&gt;
&lt;/blockquote&gt;
&lt;figcaption&gt;via &lt;q&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c08586c85fa73c182a7a&#34;&gt;nyagosスクリプト解説 - CMD.EXEで化けさせず、nyagosの中だけプロンプトをカラー化&lt;/a&gt;&lt;/q&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;ということらしい。&lt;/p&gt;

&lt;p&gt;実は &lt;a href=&#34;http://www.nyaos.org/index.cgi?p=NYAGOS&#34; title=&#34;NYAOS.ORG - NYAGOS&#34;&gt;NYAGOS&lt;/a&gt; で表示するプロンプトは以下の記事を参考にオリジナルの &lt;code&gt;%PROMPT%&lt;/code&gt; から変えている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/c08586c85fa73c182a7a&#34;&gt;nyagosスクリプト解説 - CMD.EXEで化けさせず、nyagosの中だけプロンプトをカラー化 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前のプロンプト定義は以下のような感じだった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Simple Prompt for CMD.EXE
set{
    PROMPT=&#39;$L&#39;.. nyagos.getenv(&#39;COMPUTERNAME&#39;) .. &#39;:$P$G$_$$$s&#39;
}

-- Coloring Prompt for NYAGOS.exe
local prompter=nyagos.prompt
nyagos.prompt = function(this)
    return prompter(&#39;$e[36;40;1m&#39;..this..&#39;$e[37;1m&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この中の &lt;code&gt;prompter&lt;/code&gt; がコールバック関数から見えなくなったということらしい。
そこで以下のようにコードを変更するのだそうだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Simple Prompt for CMD.EXE
nyagos.env.prompt=&#39;$L&#39;.. nyagos.getenv(&#39;COMPUTERNAME&#39;) .. &#39;:$P$G$_$$$s&#39;

-- Coloring Prompt for NYAGOS.exe
share.org_prompter=nyagos.prompt
nyagos.prompt = function(this)
    return share.org_prompter(&#39;$e[36;40;1m&#39;..this..&#39;$e[37;1m&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポイントは &lt;code&gt;share.org_prompter=nyagos.prompt&lt;/code&gt; の部分。
オリジナルの &lt;code&gt;nyagos.prompt()&lt;/code&gt; 関数を &lt;code&gt;share[]&lt;/code&gt; テーブルに退避させている。&lt;/p&gt;

&lt;p&gt;これでめでたく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\program\nyagos&amp;gt;nyagos.exe
Nihongo Yet Another GOing Shell 4.1-beta-amd64 Powered by go1.5.2 &amp;amp; Lua 5.3
Copyright (c) 2014,2015 HAYAMA_Kaoru and NYAOS.ORG
&amp;lt;VENUS:C:/program/nyagos&amp;gt;
$ ls
Doc/               lua53.dll          nyagos.lua*        specialfolders.js*
catalog.d/         makeicon.cmd*      nyole.dll
license.txt        nyagos.d/          readme.md
lnk.js*            nyagos.exe*        readme_ja.md
&amp;lt;VENUS:C:/program/nyagos&amp;gt;
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示できるようになった（カラーでお見せできないのが残念です）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:98f564c311f7795b2925fd0f13551316:a&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:98f564c311f7795b2925fd0f13551316:a&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;実は私もプロンプトは折り返す派。
開発環境ではフォルダがかなり深くなることがあり，既存の &lt;code&gt;$P$G&lt;/code&gt; では見づらいのだ。
まぁこれは Windows に限らないのだが。&lt;/p&gt;

&lt;h2 id=&#34;参考:98f564c311f7795b2925fd0f13551316&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://text.baldanders.info/remark/2015/nyagos-and-lua/&#34;&gt;NYAGOS で Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zetamatta/items/75840096f8279dd641a8&#34;&gt;何がちがう？NYAGOS 4.0 と 4.1β - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:98f564c311f7795b2925fd0f13551316:a&#34;&gt;そういや昔の UNIX ワークステーションはホスト名に venus とか惑星名を付けてるところが多かったな。私がネットワーク管理者をしてた時はプロキシサーバに janus とか付けてた。若気の至りである（笑）
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:98f564c311f7795b2925fd0f13551316:a&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
	</entry>
	
</feed>
